;;; -*- Mode:Lisp; Syntax:Common-Lisp; Package:STORAGE; Lowercase:T; Base:8; -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;  This file is in the cold load (for the wiring functions).

;;;; Wiring

;;; Wire the structure, not necessarily on contiguous pages.
(defun wire-structure (structure)
  (when storage-exists
    (if (and #+3600 nil (eq (named-structure-p structure) 'disk-event))
	(wire-disk-event structure)
      (multiple-value-bind (nil leader size)
	  (%find-structure-extent (follow-structure-forwarding structure))
	(wire-words leader size)))))

(defun unwire-structure (structure)
  (when storage-exists
    (if (and #+3600 nil (eq (named-structure-p structure) 'disk-event))
	(unwire-disk-event structure)
      (multiple-value-bind (nil leader size)
	  (%find-structure-extent (follow-structure-forwarding structure))
	(unwire-words leader size)))))

;;; Returns T if all the pages in the structure are wired, else NIL.
(defun structure-wired-p (structure)
  (if (and #+3600 nil (eq (named-structure-p structure) 'disk-event))
      (disk-event-wired-p structure)
    (multiple-value-bind (nil leader size)
	(%find-structure-extent (follow-structure-forwarding structure))
      (words-wired-p leader size))))

#+ignore (progn ;; This stuff isn't called or debugged.  DLA 10/4/87
(defconst *pointer-types* '(dtp-locative dtp-compiled-function dtp-array
				       dtp-even-pc dtp-odd-pc))
(defconst *ignore-types* '(dtp-null dtp-nil dtp-symbol dtp-fix dtp-float))

;;; Make the function wired, but not in vma-equals-pma space.  This can only
;;; be used to wire functions which can tolerate map misses and which won't
;;; automatically be wired when booted from a disk-saved image.
;;;+++ this is known to not be quite done.
(defun wire-function (fun &optional dont-wire-strings &aux pht-index)
  (check-arg-type fun :compiled-function)
  (or (= dtp-compiled-function (%data-type fun))
      (ferror nil "~S is not a compiled function" fun))
  (let ((fun-leader (%find-structure-leader fun)))
    (wire-structure fun-leader)
    ;; Snap all external references to wired values
    (do ((n (compiled-function-table-size fun-leader))
	 (i 0 (1+ i))
	 (loc (%make-pointer-offset dtp-locative fun -1)
	      (%make-pointer-offset dtp-locative loc -1))
	 (dtp))
	(( i n))
      (cond ((memq (setq dtp (data-type-name (%p-data-type loc))) *pointer-types*)
	     (loop for ptr = (%pointer (cdr loc))
		   while (and ( ptr %wired-virtual-address-high)
			      ( %vma-equals-pma (ldb %%vma-equals-pma ptr))
			      (setq pht-index (pht-lookup (ldb %%vma-page-num ptr)))
			      ( %mmpt-status-wired
				 (mmpt-status (mmpt-lookup (pht-ppn pht-index)))))
		   do
		   (let* ((nloc (%make-pointer dtp-locative ptr))
			  (ndtp (%p-data-type nloc)))
		     (cond ((= dtp-one-q-forward ndtp)
			    (%p-dpb (%pointer (%p-contents-as-locative nloc))
				    %%q-pointer
				    loc))
			   ((and dont-wire-strings (eq dtp 'dtp-array) (stringp (cdr loc)))
			    (return nil))
			   (t
			    (format t "~&External reference to an unwired cell from ~
				    ~S|~O[~A], unwired pointer at ~S[~A](~S)."
				    fun i dtp
				    nloc (data-type-name ndtp)
				    (compiler:disassemble-decode-locative nloc))
			    (when (fquery nil "Wire it? ")
			      (if (= dtp-compiled-function ndtp)
				  (wire-function nloc dont-wire-strings)
				(wire-structure nloc)))
			    (loop-finish))))))
	    ((memq dtp *ignore-types*))
	    (t
	     (ferror nil "Invalid external reference from ~S|~O[~A] at location ~S"
		     fun i dtp loc))))))
) ;#+IGNORE


;;;; Paging

;;Do not store anything but disk-arrays and disk-events in this area
(defvar si:disk-array-area (make-area :name 'disk-array-area :gc :static :region-size 1000000
				      :representation :structure
				      '%%region-level %safeguarded-level))

;; +++---+++ temp kludge set up by qld-run-initializations
(defwiredvar si:disk-array-area-region nil)

(defvar *default-page-in-hang-p* t "T if default is to wait for words to be in")
(defvar *default-page-in-type* :normal
":PREFETCH     if default is to mark the pages as prefetched.
:NORMAL   if default is to mark the pages as normal.
:MODIFIED   if default is to mark the pages as modified.")

(defvar *default-page-out-write-modified* :queue
":NOW        if default is to wait for all modified pages to be written.
:QUEUE      if default is to queue the writes, but not wait for them.
:DEFERRED   if default is to write modified pages later as needed.")
(defvar *default-page-out-reuse* :unmodified
":NOW        if default is to mark all pages as immediately reusable.
:UNMODIFIED if default is to mark unmodified pages as immediately reusable.
:DEFERRED   if default is to reuse the pages as needed later.
:REMOVE     if default is to remove the pages.")

(defun page-in-words (address n-words &key
		      (type *default-page-in-type*)
		      (hang-p *default-page-in-hang-p*))
  #+VLM (declare (ignore address n-words type hang-p))
  #+VLM nil
  #-VLM
  (si:inhibit-gc-flips
    (let* ((address (%pointer address))
	   (n-pages (1+ (ldb %%vma-page-num (+ (ldb %%vma-word-offset address) n-words -1)))))
      (when (and storage-exists (plusp n-words))
	(%funcall-in-aux-stack #'user-prefetch-pages address n-pages nil
			       (if (eq type :normal) t nil))	;+++ :modified not implemented
	(when hang-p (si:wait-for-disk-done))))))

(defun page-out-words (address n-words &key
		       (write-modified *default-page-out-write-modified*)
		       (reuse *default-page-out-reuse*))
  #+VLM (declare (ignore address n-words write-modified reuse))
  #+VLM nil
  #-VLM
  (si:inhibit-gc-flips
    (let* ((address (%pointer address))
	   (vpn (extract-vpn address))
	   (n-pages (1+ (ldb %%vma-page-num (+ (ldb %%vma-word-offset address) n-words -1)))))
      (when (and storage-exists (plusp n-words))
	(if (eq reuse :remove)
	    (%funcall-in-aux-stack #'remove-pages vpn n-pages)
	    (%funcall-in-aux-stack #'flush-pages vpn n-pages
				   (ecase write-modified
				     ((:now :queue) t)
				     (:deferred nil))
				   (ecase reuse
				     (:now t)
				     (:unmodified :unmodified)
				     (:deferred nil))))
	(when (eq write-modified :now) (si:wait-for-disk-done))))))

(defun page-in-area (area &rest page-in-words-keywords)
  (si:inhibit-gc-flips
    (si:do-area-regions (region area)
      (apply #'page-in-region region page-in-words-keywords))))

(defun page-out-area (area &rest page-out-words-keywords)
  (si:inhibit-gc-flips
    (si:do-area-regions (region area)
      (apply #'page-out-region region page-out-words-keywords))))

(defun page-in-region (region &rest page-in-words-keywords)
  (si:inhibit-gc-flips
    (apply #'page-in-words (region-origin region) (region-free-pointer region)
	   page-in-words-keywords)))

(defun page-out-region (region &rest page-out-words-keywords)
  (si:inhibit-gc-flips
    (apply #'page-out-words (region-origin region) (region-free-pointer region)
	   page-out-words-keywords)))

(defun page-in-structure (structure &rest page-in-words-keywords)
  (multiple-value-bind (nil leader size)
      (%find-structure-extent (follow-structure-forwarding structure))
    (apply #'page-in-words leader size page-in-words-keywords)))

(defun page-out-structure (structure &rest page-out-words-keywords)
  (multiple-value-bind (nil leader size)
      (%find-structure-extent (follow-structure-forwarding structure))
    (apply #'page-out-words leader size page-out-words-keywords)))

(defun page-array-calculate-bounds (array from to)
  (declare (values array start size))
  "FROM and TO are either fixnums or a list of subscipts.  If they are
   fixnums then they are the flattened (coerced to one dimensional) array
   indices.  If they are lists and the lists are shorter than the number of
   dimensions, zero is used for each missing element of FROM and the
   maximum index for the corresponding dimension is used for each missing
   element of TO.  (Therefore, NIL for FROM means the start of the array
   and NIL for TO means the end of the array.)  In all cases, FROM is
   inclusive and TO is exclusive. 
   
   If the array is eventually displaced to an absolute address (probably TV
   buffer), then NIL is returned.  Otherwise three values are returned: the
   array (after chasing indirect pointers), the starting address of data,
   and the number of Q's of data.  Indirect arrays, and indirect arrays
   with the element size changing now work."

  (setq array (follow-structure-forwarding array))
  ;; Avoid some fencepost problems by checking for empty arrays here.
  (when (zerop (array-total-size array))
    (return-from page-array-calculate-bounds nil))
  (let ((ndims (zl:array-#-dims array))
	start end)
    (cond ((fixnump from) (setq start from))
	  ((null from) (setq start 0))
	  ((listp from)
	   (when (> (length from) ndims)
	     (error "Too many dimensions in starting index ~S" from))
	   ;; 10 dims max; 3600 limit is 7 or thereabouts
	   (with-stack-list (dimlist 0 0 0 0 0 0 0 0 0 0)
	     (setq dimlist (nthcdr (- 10. ndims) dimlist))
	     (loop for dimlist on dimlist
		   for dim in from
		   do (setf (car dimlist) (or dim 0)))
	     (setq start (apply #+row-major #'array-row-major-index
				#-row-major #'array-column-major-index
				array dimlist))))
	  (T (error "Bad starting index ~S, expected a fixnum, list or NIL." from)))
    (cond ((fixnump to) (setq end to))
	  ((null to) (setq end (zl:array-length array)))
	  ((listp to)
	   (when (> (length to) ndims)
	     (error "Too many dimensions in ending index ~S" to))
	   ;; 10 dims max; 3600 limit is 7 or thereabouts
	   (with-stack-list (dimlist 0 0 0 0 0 0 0 0 0 0)
	     (setq dimlist (nthcdr (- 10. ndims) dimlist))
	     (loop for dimnum from 1 to ndims
		   as max = (1- (zl:array-dimension-n dimnum array))
		   for dimlist on dimlist
		   for dims on to
		   do (setf (car dimlist) (min (or (car dims) max) max)))
	     (setq end (1+			;convert from inclusive to exclusive
			 (apply #+row-major #'array-row-major-index
				#-row-major #'array-column-major-index
				array dimlist)))))
	  (T (error "Bad ending index ~S, expected a fixnum, list or NIL." to)))
    (loop while (array-displaced-p array)
	  as old-array = array
	  while (arrayp (setq array (si:array-indirect-to array)))
	  do (let ((offset (or (si:array-index-offset old-array) 0)))
	       (incf start offset)
	       (incf end offset))
	     (let ((numerator (array-elements-per-q (array-type-field array)))
		   (denominator (array-elements-per-q (array-type-field old-array))))
	       (setq start (truncate (* start numerator) denominator)
		     end   (truncate (+ (* end numerator) denominator -1) denominator))))
      (if (arrayp array)
	  (let ((elts-per-q (array-elements-per-q (array-type-field array))))
	    (setq start (truncate start elts-per-q)
		  end   (truncate (+ end elts-per-q -1) elts-per-q))
	    (values array
		    (%make-pointer-offset sys:dtp-locative
					  array
					  (+ (si:array-data-offset array) start))
		    (- end start)))
	nil)))

;;; old version
;FROM and TO are lists of subscripts.  If too short, zeros are appended.
;Returns array, starting address of data, number of Q's of data.
;First value is NIL if displaced to an absolute address (probably TV buffer).
#||
(defun page-array-calculate-bounds (array from to)
  (declare (values array start size))
  (setq array (follow-structure-forwarding array))
  (let ((ndims (array-/#-dims array))
	(array-type (array-type-field array)))
    (or ( (length from) ndims)
	(ferror "Too many dimensions in starting index ~S" from))
    (or ( (length to) ndims)
	(ferror "Too many dimensions in ending index ~S" to))
    (let ((start (or (nth (1- ndims) from) 0))
	  (end (1- (or (nth (1- ndims) to) (array-dimension-n ndims array)))))
      (do* ((i (1- ndims) (1- i))
	    (dim (array-dimension-n i array) (array-dimension-n i array)))
	   ((zerop i))
	(setq start (+ (* start dim) (or (nth (1- i) from) 0))
	      end (+ (* end dim) (1- (or (nth (1- i) to) dim)))))
      (setq end (1+ end))			;Convert from inclusive to exclusive
      (loop while (array-displaced-p array)
	    do (setq array (array-indirect-to array))
	    while (arrayp array)
	    do (incf start (or (array-index-offset array) 0)))	;+++ bug if incompatible type
      (if (arrayp array)
	  (let ((size (- end start))
		(elts-per-q (array-elements-per-q array-type)))
	    (setq start (+ (truncate start elts-per-q)
			   (%pointer array)
			   (array-data-offset array))
		  size (truncate (+ size elts-per-q -1) elts-per-q))
	    (values array start size))))))
||#

(defun page-in-array (array &optional from to
		      (hang-p *default-page-in-hang-p*)
		      (normalize-p t))
  (multiple-value-bind (array from size)
      (page-array-calculate-bounds array from to)
    (and array
	 (page-in-words from size :type (if normalize-p :normal :prefetch) :hang-p hang-p))))

(defun page-out-array (array &optional from to (hang-p nil))
  (multiple-value-bind (array from size)
      (page-array-calculate-bounds array from to)
    (and array
	 (page-out-words from size :write-modified (if hang-p :now :deferred)))))

(defun page-in-raster-array (raster &optional from-x from-y to-x to-y
			     (hang-p *default-page-in-hang-p*)
			     (normalize-p t))
  (stack-let* ((from (list #+row-major from-y from-x #-row-major from-y))
	       (to   (list #+row-major   to-y   to-x #-row-major   to-y)))
    (page-in-array raster
		   (and (or from-x from-y) from)
		   (and (or to-x to-y) to)
		   hang-p normalize-p)))

(defun page-out-raster-array (raster &optional from-x from-y to-x to-y (hang-p nil))
  (stack-let* ((from (list #+row-major from-y from-x #-row-major from-y))
	       (to   (list #+row-major   to-y   to-x #-row-major   to-y)))
    (page-out-array raster
		    (and (or from-x from-y) from)
		    (and (or to-x to-y) to)
		    hang-p)))



(defun set-area-read-only (area &optional (read-only-p t))
  "If READ-ONLY-P is true, write protects the entire area, making sure
   that all resident pages in the area are also write protected.  Otherwise
   unprotects the area."
  (si:inhibit-gc-flips
    (si:do-area-regions (region area)
      (set-region-read-only region read-only-p))
    (setf (ldb %%region-read-only (area-region-bits area)) (if read-only-p 1 0))))

(defun set-region-read-only (region &optional (read-only-p t))
  "If READ-ONLY-P is true, write protects the entire region, making sure
   that all resident pages in the region are also write protected.  Otherwise
   unprotects the region."
  (si:inhibit-gc-flips
    ;; Set the read-only flag for the region
    (setf (ldb %%region-read-only (region-bits region)) (if read-only-p 1 0))
    ;; And for all resident pages as well
    (%funcall-in-aux-stack #'set-words-read-only
			   (region-origin region)
			   (region-free-pointer region)
			   read-only-p)))



(defun with-prefetching-disabled-internal (area continuation)
  (si:with-fast-storage-accessors (region-bits area-region-list region-list-thread)
    (let ((old-inhibit-scheduling-flag inhibit-scheduling-flag)
	  (inhibit-scheduling-flag t)		;Lock out other processes running the same code
	  (n-regions 0)
	  (n 0))
      (si:do-area-regions (region area)
	(when (plusp (ldb %%region-swapin-quantum (region-bits region)))
	  (incf n-regions)))
      (with-stack-array (array (* 2 n-regions) :type art-q-list)
	(si:do-area-regions (region area)
	  (let* ((bits (region-bits region))
		 (swapin (ldb %%region-swapin-quantum bits)))
	    (when (plusp swapin)
	      (setf (aref array n) region) (incf n)
	      (setf (aref array n) swapin) (incf n)
	      (setf (region-bits region) (dpb 0 %%region-swapin-quantum bits)))))
	(unless (= n (* 2 n-regions))
	  (error "Internal error:  number of regions didn't match on second pass."))
	(unwind-protect
	    (let ((inhibit-scheduling-flag old-inhibit-scheduling-flag))
	      (funcall continuation))
	  (let ((plist (g-l-p array))
		(count 0))
	    (si:do-area-regions (region area)
	      (let ((swapin (getf plist region)))
		(when swapin
		  (setf (ldb %%region-swapin-quantum (region-bits region)) swapin)
		  (incf count))))
	    (unless (= count n-regions)
	      (error "Internal error:  number of regions didn't match on third pass."))))))))



(defun halt (&optional fep-commands)
  "Halt the machine, optionally passing a string to the FEP for 
   execution as commands.  This should always be used instead of si:%halt
   since the microcode may be halted in the middle of a disk write otherwise,
   smashing the sector with bad ECC."
  (zl:check-arg fep-commands (or (null fep-commands) (stringp fep-commands)) "a string")
  (without-interrupts
      (when (and *consoles*
		 (variable-boundp #'tv:who-line-run-state)
		 (variable-boundp tv:who-line-run-state-sheet)
		 (not (null tv:who-line-run-state-sheet)))
	(setq tv:who-line-run-state "Machine Halt")
	(tv:who-line-run-state tv:who-line-run-state-sheet nil nil))
    (if (null fep-commands)
	(%funcall-in-aux-stack #'si:aux-halt)
	(multiple-value-bind (ignore vma size) (%find-structure-extent fep-commands)
	  #+3600 (wire-consecutive-words vma size)
	  #+IMach (wire-words vma size)
	  #+3600 (setq fep-command-string
		       (%make-pointer dtp-array (%vma-to-pma (%pointer fep-commands))))
	  ;; unwire now (without-interrupts) in case warm boot, which otherwise 
	  ;; would leave dynamic words wired and annoy the GC.
	  (unwire-words vma size)
	  (%funcall-in-aux-stack #'si:aux-halt #+imach fep-commands)
	  #+3600 (setq fep-command-string nil)))))
