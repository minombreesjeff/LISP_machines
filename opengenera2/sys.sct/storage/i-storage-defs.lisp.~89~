;;; -*- Mode:Lisp; Syntax:Common-Lisp; Package:STORAGE; Base:8; Lowercase:T -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;
;;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")This file is I-machine specific.  L-STORAGE-DEFS is its L-machine analogue.


0;;;; Macrology

;;; 3600 expands these into conditionals.
(defmacro min* (a b) `(min ,a ,b))
(defmacro max* (a b) `(max ,a ,b))

;;; In critical inner loops, use this when the predicate is rarely true.
(defmacro when* (predicate &body body)
  `(compiler:%error-when ,predicate . ,body))

(defmacro extract-vpn (vma) `(ldb %%vma-page-num ,vma))
(defmacro deposit-vpn (vpn background) `(%logdpb ,vpn %%vma-page-num ,background))
(defmacro extract-ppn (pma) `(ldb %%pma-page-num ,pma))
(defmacro deposit-ppn (ppn background) `(%logdpb ,ppn %%pma-page-num ,background))

;;; For compatibility.
(defmacro vma-page-num (vma) `(%logldb %%vma-page-num ,vma))

;;; Round up to a page size, and return page number, quickly of course
(defmacro ceiling-page-size (n-words)
  `(ldb %%vma-page-num (+ ,n-words page-size -1)))

(defmacro ceiling-chunk-size (n-words)
  `(ldb %%vma-chunk-num (+ ,n-words %address-space-chunk-size -1)))

(defmacro address-plus (address &rest offsets)
  `(%32-bit-plus ,address (+ ,@offsets)))

(defmacro address-difference (address &rest offsets)
  `(%32-bit-difference ,address (+ ,@offsets)))

;;; Check if the value-th bit in mask is set.  Useful as a fast version of member
;;; for fields.  Needed in wired code which can't have lists.
(defmacro bit-member (value mask)
  ;; This is different than on the 3600 because I-machine has a logtest instruction.
  `(logtest (rot 1 ,value) ,mask))

(defmacro incf* (reference &optional (amount 1))
  "Increment the reference, wrapping around instead of consing a bignum."
  `(setf ,reference (%32-bit-plus ,reference ,amount)))

(defmacro decf* (reference &optional (amount 1))
  "Decrement a reference, sticking at 0"
  `(setf ,reference (let ((diff (%32-bit-difference ,reference ,amount)))
		      (if (minusp diff) 0 diff))))

(defmacro /2 (n) `(ldb (byte 31. 1) ,n))
(defmacro /4 (n) `(ldb (byte 30. 2) ,n))
(defmacro /8 (n) `(ldb (byte 29. 3) ,n))
(defmacro /32 (n) `(ldb (byte 27. 5) ,n))

(defmacro *2 (n) `(rot ,n 1))
(defmacro *4 (n) `(rot ,n 2))
(defmacro *8 (n) `(rot ,n 3))
(defmacro *32 (n) `(rot ,n 5))

;;; Insure atomicity of body.  Code must run on auxiliary stack, or else without
;;; interrupts.  Should be called only from wired code so can't hard page fault if not
;;; on auxiliary stack.  Map miss page faults ok.
(defmacro wired-without-interrupts (&body body)
  `(let-if (not (%auxiliary-stack-p)) ((inhibit-scheduling-flag t))
     ,@body))

(defmacro with-storage-lock (&body body)
  (let ((name '#:storage-lock))
    `(let ((,name (shiftf *storage-lock* t)))
       (multiple-value-prog1 (progn ,@body) (setq *storage-lock* ,name)))))

(defmacro without-storage-lock (&body body)
  (let ((name '#:storage-lock))
    `(let ((,name (shiftf *storage-lock* nil)))
       (multiple-value-prog1 (progn ,@body) (setq *storage-lock* ,name)))))

;;; Enter the storage system.  Setup various meters.
;;; This also opens the page trace record so that multiple paging operations
;;; will be grouped into one record for the higher level paging operation
;;; which is causing all the lower operations to occur.
(defmacro enter-storage-system (var &body body)
  `(let ((.start-time. (%microsecond-clock))
	 (.storage-lock. (shiftf *storage-lock* t)))
     (when *page-trace-array*
       (page-trace-open .start-time.))
     (macrolet ((exit-storage-system ()
		  `(when .start-time.
		     (when *page-trace-array*
		       (page-trace-close))
		     (setq *storage-lock* .storage-lock.)
		     (incf* ,',var (wired-time-difference-milliseconds
				     (%microsecond-clock) .start-time.))
		     (setf .start-time. nil))))
       (multiple-value-prog1
	 (progn ,@body)
	 (exit-storage-system)))))

;;; If a higher-level page trace record was created, this doesn't do anything
;;; except add the operations in the body to the record.  Otherwise, it starts
;;; a new record with just the operations in the body.
(defmacro with-page-trace-record (&body body)
  `(progn
     (when *page-trace-array*
       (page-trace-open (%microsecond-clock)))
     (multiple-value-prog1
       (progn ,@body)
       (when *page-trace-array*
	 (page-trace-close)))))

;;; Time a form in ms.
(defmacro ms-time (var &body body)
  `(let ((.start-time. (%microsecond-clock)))
     (multiple-value-prog1
       (progn ,@body)
       (incf* ,var
	      (wired-time-difference-milliseconds (%microsecond-clock) .start-time.)))))

;;; Can't use to wrap a multiple value return.
(defmacro timed-wired-wait (var disk-permit ms-limit fun &rest args)
  `(ms-time ,var (wired-wait ,disk-permit ,ms-limit ,fun ,@args)))

;;; Import some SI things the hard way.
(defmacro return-to-main-stack-buffer (&rest l) `(si:return-to-main-stack-buffer ,@l))
(defmacro %funcall-in-aux-stack (&rest l) `(si:%funcall-in-aux-stack ,@l))
(defmacro %auxiliary-stack-p () `(si:%auxiliary-stack-p))
(defmacro wired-time-difference (&rest l) `(si:wired-time-difference ,@l))
(defmacro wired-time-difference-milliseconds (&rest l) `(si:wired-time-difference-milliseconds ,@l))

;;; *PHT-BASE* is an internal register so there's no improvement to make.
(defmacro with-quick-pht-accessors (&body body)
  `(progn ,@body))

(defmacro with-quick-mmpt-accessors (&body body)
  #-VLM `(let ((*mmpt-base* *mmpt-base*))
	   (declare (zl:unspecial *mmpt-base*))
	   ,@body)
  #+VLM `(progn ,@body))

(defmacro with-quick-pht-and-mmpt-accessors (&body body)
  #-VLM `(let ((*mmpt-base* *mmpt-base*))
	   (declare (zl:unspecial *mmpt-base*))
	   ,@body)
  #+VLM `(progn ,@body))

(defmacro with-quick-mmpt1-accessors (&body body)
  #-VLM `(let ((*mmpt1-base* *mmpt1-base*))
	   (declare (zl:unspecial *mmpt1-base*))
	   ,@body)
  #+VLM `(progn ,@body))

;; Temporarily disable prepaging in an area so that useless stuff won't be prepaged
;; This relies on other agents such as reorder-memory not happening in parallel.
;; If two process run this code, however, it will "work" (that is, nothing bad will happen).
(defmacro with-prefetching-disabled (area &body body)
  `(with-prefetching-disabled-internal ,area
     #'(sys:named-lambda with-prefetching-disabled () 
	 (declare (sys:downward-function))
	 . ,body)))

#-VLM (PROGN
(define-symbol-macro *pht-base* (%read-internal-register %register-pht-base))
(define-symbol-macro *pht-mask* (%read-internal-register %register-pht-mask))

(defmacro %clear-map-cache ()
  `(let ((old-map-cache (%read-internal-register %register-map-cache-control)))
     (%write-internal-register (logand (lognot (dpb -1 %%map-cache-enable 0))
				       old-map-cache)
			       %register-map-cache-control)
     (%write-internal-register old-map-cache %register-map-cache-control)))

;;; Callable on aux stack only.
(defmacro page-resident-p (vpn)
  `(let ((pht-index (pht-lookup ,vpn)))
     (and pht-index (zerop (pht-pending pht-index)))))

(defmacro with-wired-structure (structure &body body)
  ;; I think the only way this unwind protect can fail is if an error occurs within
  ;; wire-structure after it has wired the structure or parts of it but prior to it
  ;; returning.  This sort of error should be very rare.
  `(let ((.struct. nil))
     (unwind-protect
       (progn
	 (without-interrupts
	   (wire-structure ,structure)
	   (setq .struct. ,structure))
	 ,@body)
       (when .struct.
	 (unwire-structure .struct.)))))

(defmacro with-quick-mmpt-lookups (&body body)
  `(let ((*mmpt-y-base* *mmpt-y-base*))
     (declare (zl:unspecial *mmpt-y-base*))
     (macrolet ((mmpt-lookup (ppn &environment environment)
		  (once-only (ppn &environment environment)
		    `(let ((y-entry (mmpt-y-entry (ldb %%ppn-mmpt-y ,ppn))))
		       (and ( (mmpt-y-entry-valid y-entry) 0)
			    (dpb (mmpt-y-entry-index y-entry) %%ppn-mmpt-y ,ppn))))))
       ,@body)))

(defmacro with-disk-wakeup-optimization (&body body)
  (let ((saved '#:saved-optimize-disk-wakeups))
    `(let ((,saved (shiftf *optimize-disk-wakeups* t)))
       (unwind-protect
	   (progn ,@body)
	 (when (not (setq *optimize-disk-wakeups* ,saved))
	   (issue-deferred-unit-wakeups))))))

(defmacro without-disk-wakeup-optimization (&body body)
  (let ((saved '#:saved-optimize-disk-wakeups))
    `(let ((,saved (shiftf *optimize-disk-wakeups* nil)))
       (unwind-protect
	   (progn
	     ;; if they were being deferred, issue them now
	     (when ,saved
	       (issue-deferred-unit-wakeups))
	     ,@body)
	 (setq *optimize-disk-wakeups* ,saved)))))



;;;; Page Hash Table

;;; The PHT is referenced by microcode to resolve map cache misses.  It is partitioned into
;;; buckets of 4 entries of 2 words each (called PHT0 and PHT1); within a bucket, the
;;; entries are laid out in order, alternating PHT0 and PHT1 words.  A specific entry is
;;; addressed by a pht index, which is the offset, in words, from the base of PHT, of the
;;; PHT0 word of the entry.

(defmacro define-pht-accessors (indirect-name immediate-name byte word)
  `(progn
     (defmacro ,indirect-name (index)
       ,(select word
	   (0 ``(%p-ldb ,',byte (%pointer-plus *pht-base* ,index)))
	   (1 ``(%p-ldb ,',byte (%pointer-plus *pht-base* (1+ ,index))))))
     ,(when (not (null immediate-name))
	`(defmacro ,immediate-name (entry) `(%logldb ,',byte ,entry)))))

(define-pht-accessors pht-vpn pht0-vpn %%pht0-vpn 0)
(define-pht-accessors pht-fault-request pht0-fault-request %%pht0-fault-request 0)
(define-pht-accessors pht-pending pht0-pending %%pht0-pending 0)
(define-pht-accessors pht-reference-bits pht0-reference-bits %%pht0-reference-bits 0)
;;; This field is in the cdr-code, so it isn't represented in the immediate.
(define-pht-accessors pht-chain nil %%pht0-chain 0)

(define-pht-accessors pht-ppn pht1-ppn %%pht1-ppn 1)
(define-pht-accessors pht-modified pht1-modified %%pht1-modified 1)
(define-pht-accessors pht-write-protect pht1-write-protect %%pht1-write-protect 1)
(define-pht-accessors pht-cache-inhibit pht1-cache-inhibit %%pht1-cache-inhibit 1)
(define-pht-accessors pht-transport-trap pht1-transport-trap %%pht1-transport-trap 1)
(define-pht-accessors
  pht-ephemeral-reference pht1-ephemeral-reference %%pht1-ephemeral-reference 1)

;;; SETF of this preserves the cdr-code and thus the chain bit.
(defmacro pht-pht0 (index)
  `(%p-ldb %%q-fixnum (%pointer-plus (%read-internal-register %register-pht-base) ,index)))

(defmacro pht-pht1 (index)
  `(%p-ldb %%q-fixnum (%pointer-plus (%read-internal-register %register-pht-base)
				     (1+ ,index))))

;;; Given a vpn, return the pht index of the first entry of the first probe.
;;; Clobbers BAR 1.
(defmacro pht-initial-hash (vpn)
  `(progn
     (setf (%read-internal-register %register-bar-1) (deposit-vpn ,vpn 0))
     (%read-internal-register %register-pht-hash-1)))

;;; This is just 17x + 1, mod 2^32.
(defmacro pht-next-state (state &environment environment)
  (once-only (state &environment environment)
    `(sys:%32-bit-plus
       (sys:%32-bit-plus
	 (sys:%logdpb ,state (byte 28. 4.) 0)
	 ,state)
       1)))

;;; --- all the WHENs in this function need to be WHEN*s, but the compiler can't hack that
(defmacro search-pht (&key hash-vpn match-vpn rehash-hook &environment environment)
  (once-only (match-vpn &environment environment)
    `(let* ((state ,hash-vpn)
	    ;; Preserve block register 1 just to be conservative.
	    (saved-bar-1 (%block-register 1))
	    ;; Note that the initial hash is guaranteed to be zero in the high four bits.
	    (offset (logand (pht-initial-hash state) *pht-mask*)))
       (setf (%read-internal-register %register-bar-1) (%pointer-plus *pht-base* offset))
       (loop doing
	 (when* (= (ldb %%pht0-vpn (%block-read 1 :fixnum-only t)) ,match-vpn)
	   (setf (%block-register 1) saved-bar-1)
	   (return offset))
	 (%block-read 1 :fixnum-only t)		;discard PHT1
	 (when* (= (ldb %%pht0-vpn (%block-read 1 :fixnum-only t)) ,match-vpn)
	   (setf (%block-register 1) saved-bar-1)
	   (return (+ offset 2)))
	 (%block-read 1 :fixnum-only t)		;discard PHT1
	 (when* (= (ldb %%pht0-vpn (%block-read 1 :fixnum-only t)) ,match-vpn)
	   (setf (%block-register 1) saved-bar-1)
	   (return (+ offset 4)))
	 (%block-read 1 :fixnum-only t)		;discard PHT1
	 ;; This last PHT0 word can be reread below to check the cdr code.  However, I believe
	 ;; the second read will take the data out of the BAR 1 data buffer instead of issuing
	 ;; another request, since we're disabling the BAR advance.
	 (when* (= (ldb %%pht0-vpn
			(%block-read 1 :fixnum-only t :no-increment t :prefetch nil))
		   ,match-vpn)
	   (setf (%block-register 1) saved-bar-1)
	   (return (+ offset 6)))
	 ,(if (eq rehash-hook :exit-collision-chain-hack)
	      `(when* (ldb-test (byte 1 6)
			       (%tag (%block-read 1 :prefetch nil :set-cdr-next nil)))
		 (setf (%block-register 1) saved-bar-1)
		 (return nil))
	      `(,rehash-hook offset))
	 ;; Search next bucket in chain.
	 (setf (%block-register 1)
	       (%pointer-plus *pht-base*
			      (setq offset
				    (logand
				      (dpb (setq state (pht-next-state state)) (byte 25. 3) 0)
				      ;; Note that the high four bits are dont-cares.
				      *pht-mask*))))))))


;;;; Main Memory Page Table

(zl:defstruct (mmpt-y-entry (:type :fixnum) :conc-name)
  ((index (byte %mmpt-y-bits 0))		;Y index into mmpt
   (valid (byte 1 %mmpt-y-bits))))		;1 if index is valid

(defmacro mmpt-y-entry (index)
  `(%memory-read (%pointer-plus *mmpt-y-base* ,index) :fixnum-only t))

(defsetf mmpt-y-entry (index) (value)
  `(%memory-write (%pointer-plus *mmpt-y-base* ,index) ,value))

(defmacro mmpt-y-index (index) `(mmpt-y-entry-index (mmpt-y-entry ,index)))
(defmacro mmpt-y-valid (index) `(mmpt-y-entry-valid (mmpt-y-entry ,index)))

(defmacro mmpt-y-to-ppn-y-entry (index)
  `(%memory-read (%pointer-plus *mmpt-y-to-ppn-y-base* ,index) :fixnum-only t))

(defsetf mmpt-y-to-ppn-y-entry (index) (value)
  `(%memory-write (%pointer-plus *mmpt-y-to-ppn-y-base* ,index) ,value))

(defmacro define-mmpt-accessors (indirect-name immediate-name byte)
  `(progn
     (defmacro ,indirect-name (index)
       `(%p-ldb ,',byte (%pointer-plus *mmpt-base* ,index)))
     (defmacro ,immediate-name (entry) `(%logldb ,',byte ,entry))))

(define-mmpt-accessors mmpt-invalid-vpn mmpt-entry-invalid-vpn %%mmpt-invalid-vpn)
(define-mmpt-accessors mmpt-vpn mmpt-entry-vpn %%mmpt-vpn)
(define-mmpt-accessors mmpt-write-lock mmpt-entry-write-lock %%mmpt-write-lock)
(define-mmpt-accessors mmpt-status mmpt-entry-status %%mmpt-status)
(define-mmpt-accessors mmpt-flushing mmpt-entry-flushing %%mmpt-flushing)

(defmacro mmpt-entry (index)
  `(%memory-read (%pointer-plus *mmpt-base* ,index) :fixnum-only t))

(defsetf mmpt-entry (index) (value)
  `(%memory-write (%pointer-plus *mmpt-base* ,index) ,value))

;;; Simulate alterant defined by 3600 defstruct implementation.
(defmacro alter-mmpt (index ignore &rest pairs &environment environment)
  (labels ((expand (pairs background)
	     (if (null pairs)
		 background
	       (destructuring-bind (field value . rest) pairs
		 `(%logdpb ,value
			   ,(ecase field
			      (invalid-vpn '%%mmpt-invalid-vpn)
			      (vpn '%%mmpt-vpn)
			      (write-lock '%%mmpt-write-lock)
			      (status '%%mmpt-status)
			      (age '%%mmpt-age)
			      (flushing '%%mmpt-flushing))
			   ,(expand rest background))))))
    (once-only (index &environment environment)
      `(setf (mmpt-entry ,index) ,(expand pairs `(mmpt-entry ,index))))))

(defmacro mmpt-wired-count (index)
  `(%p-ldb %%mmpt1-wired-count (%pointer-plus *mmpt1-base* ,index)))

(defmacro mmpt-thread (index)
  `(%p-ldb %%mmpt1-thread (%pointer-plus *mmpt1-base* ,index)))


;;;; Main memory map

;;; The main memory map (set up by the FEP) describes the portions of the physical address
;;; space that we should use as main memory.  Each entry is a (quantum,n-quanta) pair that
;;; corresponds to a contiguous portion of physical address space.  A quantum is 256
;;; pages, or 64K words, which is the granularity of the PPN<->MMPT mapping (MMPT-Y).

(defmacro main-memory-map-ppn (index)
  `(* (ldb %%main-memory-map-quantum
	   (%memory-read (%pointer-plus main-memory-map-address ,index) :fixnum-only t))
      (ldb %%vma-page-num %main-memory-map-quantum-size)))

(defmacro main-memory-map-n-pages (index)
  `(* (1+ (ldb %%main-memory-map-n-quanta
	       (%memory-read (%pointer-plus main-memory-map-address ,index) :fixnum-only t)))
      (ldb %%vma-page-num %main-memory-map-quantum-size)))

;;; The FEP also sets up a bad memory map that describes pages in the
;;; main memory map that should not be used (either because memory
;;; testing has show them to have errors, or because the particular
;;; hardware implementation has memory that does not match the quantum
;;; granularity of the main-memory map)
(defmacro bad-memory-pages-ppn (index)
  `(extract-ppn (%memory-read (%pointer-plus bad-memory-pages-address ,index) :fixnum-only t)))

(defmacro bad-memory-pages-n-pages (index)
  `(1+ (ldb %%pma-word-offset
	    (%memory-read (%pointer-plus bad-memory-pages-address ,index) :fixnum-only t))))

;;;; SMPT definitions

;;; Branch node
(defmacro smpt-branch-vpn (node index)
  `(cdr (%pointer-plus ,node (+ (defstorage-size smpt-node) ,index))))
(defmacro smpt-branch-descendent (node index)
  `(cdr (%pointer-plus ,node (+ (defstorage-size smpt-node) %smpt-branch-max ,index))))

;;; Leaf node
(defmacro smpt-leaf-vpn (node index)
  `(%p-ldb %%smpt-leaf-vpn (%pointer-plus ,node (+ (defstorage-size smpt-node) ,index))))
(defmacro smpt-leaf-n-pages (node index)
  `(%p-ldb %%smpt-leaf-n-pages (%pointer-plus ,node (+ (defstorage-size smpt-node) ,index))))
(defmacro smpt-leaf-vpn-and-n-pages (node index)
  `(cdr (%pointer-plus ,node (+ (defstorage-size smpt-node) ,index))))
(defmacro smpt-leaf-dpn (node index)
  `(cdr (%pointer-plus ,node (+ (defstorage-size smpt-node) %smpt-leaf-max ,index))))

;;; Load map
(defmacro load-map-vma (index)
  `(%memory-read (%pointer-plus load-map-vma-address ,index) :fixnum-only t))
(defmacro load-map-n-words (index)
  `(%p-ldb (byte 24. 0) (%pointer-plus load-map-opcode-address ,index)))
(defmacro load-map-opcode (index)
  `(%p-ldb (byte 4 24.) (%pointer-plus load-map-opcode-address ,index)))
(defmacro load-map-operand (index)
  `(%memory-read (%pointer-plus load-map-operand-address ,index) :fixnum-only t))

;;; Until the fancy features of the I-machine load map are supported, just use these
;;; accessors to support the 3600 lookup routine.
(defmacro load-map-vpn (index)
  `(%p-ldb %%vma-page-num (%pointer-plus load-map-vma-address ,index)))
(defmacro load-map-n-pages (index)
  `(%p-ldb (byte 16. 8.) (%pointer-plus load-map-opcode-address ,index)))
(defmacro load-map-dpn (index)
  `(%memory-read (%pointer-plus load-map-operand-address ,index) :fixnum-only t))


;;;; Macros to hide the details of accessing two-level bitmaps

;;; Without a body, returns t if the map bit exists and is set
;;; With a body, the body is executed only if the map bit exists and is set,
;;; and the map bit can be accessed as (aref map index)
(defmacro load-bitmap (vpn &body body &environment environment)
  (once-only (vpn &environment environment)
    `(let ((index (ldb %%vpn-bitmap-index ,vpn))
	   (map (aref *load-bitmaps* (ldb %%vpn-bitmap-num ,vpn))))
       (and map
	    (> (array-short-length-field map) index)
	    (aref map index)
	    ,@(and body `((progn ,@body)))))))

;;; Can only setf bits that actually exist
(defsetf load-bitmap (vpn) (val)
  `(setf (aref (aref *load-bitmaps* (ldb %%vpn-bitmap-num ,vpn))
	       (ldb %%vpn-bitmap-index ,vpn))
	 ,val))

;;; Returns t if the map bit exists and is set, or does not exist
(defmacro sysout-bitmap (vpn &environment environment)
  (once-only (vpn &environment environment)
    `(let ((index (ldb %%vpn-bitmap-index ,vpn))
	   (map (aref *sysout-bitmaps* (ldb %%vpn-bitmap-num ,vpn))))
       (if (and map (> (array-short-length-field map) index))
	   (aref map index)
	   t))))

;;; Can setf bits even if they don't actually exist
(defsetf sysout-bitmap (vpn) (val)
; Doesn't work in cross compiler
; (once-only (vpn &environment 1lt::*get-setf-method-interpreter-environment*0)	;1retch
0    `(let* ((vpn ,vpn)
	    (index (ldb %%vpn-bitmap-index vpn))
	    (map (aref *sysout-bitmaps* (ldb %%vpn-bitmap-num vpn))))
       (and map
	    (> (array-short-length-field map) index)
	    (setf (aref map index) ,val))))

;;; Helper macro to reconstruct packet object from disk-queue entry for
;;; netboot disk completion.  Resulting packet is either in
;;; vma-equals-pma (for clients) or a wired vma (for servers).
(defmacro packet-from-address (address)
  ;; Ppn gives page of phys packet.  Build a pointer to the packet in
  ;; vma-equals-pma, then get software packet from appropriate slot.
  ;; (You should return neti:epacket-software-packet of this, but its
  ;; not defined yet?)
  `(%make-pointer-offset dtp-array ,address
			 ;; One for the array header
			 ,(- (1+ (netboot::packet-data-start-unwired)))))

)						;#-VLM

;; The only part of that the VLM needs
#+VLM
(defsubst sysout-bitmap (vpn)
  (let ((index (vm-lookup vpn)))
    (or (null index)
	(vm-read-attribute modified index))))

#||
;;; Helper macros to reconstruct packet object from disk-queue entry for
;;; netboot disk completion.  (OBS uses ppn; NBS uses vma).  Resulting
;;; packet is either in vma-equals-pma (for clients) or a wired vma (for
;;; servers).

(defmacro packet-ppn-software-packet (ppn)
  ;; Ppn gives page of phys packet.  Build a pointer to the packet in
  ;; vma-equals-pma, then get software packet from appropriate slot.
  ;; (You should return neti:epacket-software-packet of this, but its
  ;; not defined yet?)
  `(%make-pointer dtp-array
		  (dpb %vma-equals-pma %%vma-equals-pma (dpb ,ppn %%pma-page-num 0))))

(defmacro packet-vma-software-packet (vma)
  ;; Vma is of the data in the packet.  Packets are page-aligned,
  ;; though, so we can build a pointer to the array header (which must
  ;; be the software packet pointer.)
  `(%make-pointer dtp-array (dpb 0 %%vma-word-offset (%pointer ,vma))))
||#


;;; VLM virtual-memory "coprocessor" interface

#+VLM (PROGN
(eval-when (compile load eval)
(defenumerated vm-register-number
	       (vm-register-command		;a command/result and 19-bit operand/value
		vm-register-address		;virtual address
		vm-register-extent		;word count
		vm-register-attributes		;see below
		vm-register-destination		;virtual address
		vm-register-data)		;fill/compare word, note: Q-sized
  #o1100
  ))

;; The below kludges as vm-register is only intended to take a (constant) symbol as an argument
(defmacro vm-register (register)
  `(sys:%coprocessor-read ,(intern (format nil "VM-REGISTER-~A" (string register)) "STORAGE")))

(eval-when (compile load eval)
(future-common-lisp:define-setf-expander vm-register (register)
  (let ((value (gensym)))
    (values ()
	    ()
	    `(,value)
	    `(progn
	       (sys:%coprocessor-write ,value
				       ,(intern (format nil "VM-REGISTER-~A" (string register))
						"STORAGE"))
	       ,value)
	    `(sys:%coprocessor-read ,(intern (format nil "VM-REGISTER-~A" (string register))
					     "STORAGE"))
	    ))))

(defstorage (vm-attributes :structure nil)
  ((vm-attribute-access-fault 1 0)
   (vm-attribute-write-fault 1 1)
   (vm-attribute-transport-fault 1 2)
   (vm-attribute-transport-disable 1 3)
   (vm-attribute-ephemeral-reference 1 4)
   (vm-attribute-modified 1 5)
   (vm-attribute-exists 1 6))
  ;; --- ephemeral references?
  )

(defmacro vm-attribute (attribute &optional (attributes '(vm-register attributes)))
  `(ldb-test ,(intern (format nil "VM-ATTRIBUTE-~A" (string attribute)) "STORAGE")
	     ,attributes))

(eval-when (compile load eval)
(defenumerated vm-opcode
	       (vm-opcode-lookup		;operand is vpn, result is index
		vm-opcode-create		;operands are address & extent, result is index
		vm-opcode-destroy		;operands are address & extent, boolean result

		vm-opcode-read-attributes	;operand is index
		vm-opcode-write-attributes	;operand is index

		vm-opcode-fill			;operand is increment (of fill data)
		vm-opcode-search		;operand is increment (of address)
		vm-opcode-copy			;operand is memory-cycle?

		vm-opcode-scan			;operand is start index?
		vm-opcode-enable

		vm-opcode-pht-scan		;operand is sense
		vm-opcode-copy-and-forward
		vm-opcode-resident-scan
		)
  ))

(eval-when (compile load eval)
(defenumerated vm-result-code
	       (vm-result-code-success
		vm-result-code-failure)
  ))

(defstorage (vm-command :structure nil)
  ((vm-command-opcode 13. 19.)
   (vm-command-operand 19. 0.)))

(defmacro vm-command (opcode &optional (argument 0))
  (declare (ignore opcode argument))
  (error "Must be used within WITH-VM-COPROCESSOR")) 

(defstorage (vm-reply :structure nil)
  ((vm-reply-result 13. 19.)
   (vm-reply-value 19. 0.)))

(defmacro vm-reply ()
  (error "Must be used within WITH-VM-COPROCESSOR"))

(defmacro with-vm-coprocessor (&body body)
  (let ((old-in-use (gensym))
	(reply (gensym))
	(address (gensym))
	(extent (gensym))
	(attributes (gensym))
	(destination (gensym))
	(data (gensym)))
    `(flet ((save-registers ()
	      (%set-min-trap-mode trap-mode-extra-stack)
	      (values
		(vm-register command)
		(vm-register address)
		(vm-register extent)
		(vm-register attributes)
		(vm-register destination)
		(vm-register data)))
	    (restore-registers (reply address extent attributes destination data)
	      (%set-min-trap-mode trap-mode-extra-stack)
	      (setf *vm-coprocessor-saved-reply* reply
		    (vm-register address) address
		    (vm-register extent) extent
		    (vm-register attributes) attributes
		    (vm-register destination) destination
		    (vm-register data) data))
	    (vm-command-internal (command)
	      (%set-min-trap-mode trap-mode-extra-stack)
	      (setf *vm-coprocessor-saved-reply* nil
		    (vm-register command) command))
	    (vm-reply-internal ()
	      (%set-min-trap-mode trap-mode-extra-stack)
	      (let ((result (or (shiftf *vm-coprocessor-saved-reply* nil)
				(vm-register command))))
		(and (eq (sys:%logldb vm-reply-result result) vm-result-code-success)
		     (sys:%logldb vm-reply-value result)))))
       (macrolet ((vm-command (opcode &optional (argument 0))
		    `(vm-command-internal 
		       (%logdpbs ,(intern (format nil "VM-OPCODE-~A" (string opcode))
					  "STORAGE")
				 vm-command-opcode
				 ,argument vm-command-operand
				 0)))
		  (vm-reply ()
		    `(vm-reply-internal)))
	 (let ((,old-in-use *vm-coprocessor-in-use*))
	   (setq *vm-coprocessor-in-use* t)
	   (multiple-value-bind (,reply ,address ,extent ,attributes ,destination ,data)
	       (when ,old-in-use
		 (incf* *vm-coprocessor-collisions*)
		 (save-registers))
	     (multiple-value-prog1
	       (progn ,@body)
	       (if ,old-in-use
		   (restore-registers ,reply ,address ,extent ,attributes ,destination ,data)
		   (setf *vm-coprocessor-saved-reply* nil))
	       (setf *vm-coprocessor-in-use* ,old-in-use))))))))

(defmacro vm-lookup (vpn)
  `(with-vm-coprocessor
     (setf (vm-register address) (storage:deposit-vpn ,vpn 0))
     (vm-command lookup)
     (vm-reply)))

(defmacro vm-create (address nwords &optional faultp)
  `(with-vm-coprocessor
     (setf (vm-register address) ,address
	   (vm-register extent) ,nwords)
     (vm-command create (if ,faultp 1 0))
     (vm-reply)))

(defmacro vm-read-attribute (attribute index)
  `(with-vm-coprocessor
     (vm-command read-attributes ,index)
     (and (vm-reply) (vm-attribute ,attribute))))

(defmacro vm-write-attribute (attribute index value)
  (once-only (index)
    `(with-vm-coprocessor
       (vm-command read-attributes ,index)
       (when (vm-reply)
	 (setf (vm-attribute ,attribute) ,value)
	 (vm-command write-attributes ,index)
	 (vm-reply)))))

(defmacro vm-enable (address nwords &optional faultp)
  `(with-vm-coprocessor
     (cl:setf (vm-register address) ,address
	      (vm-register extent) ,nwords)
     (vm-command enable (if ,faultp 1 0))
     (vm-reply)))

(defmacro vm-pht-scan (address nwords mask matchp)
  `(with-vm-coprocessor
     (cl:setf (vm-register address) ,address
	      (vm-register extent) ,nwords
	      (vm-register attributes) ,mask)
     (vm-command pht-scan (if ,matchp 1 0))
     (and (vm-reply) (storage::vm-register address))))

(defmacro vm-scan (address nwords &optional slowp)
  `(with-vm-coprocessor
     (cl:setf (vm-register address) ,address
	      (vm-register extent) ,nwords)
     (vm-command scan (if ,slowp 1 0))
     (and (vm-reply) (vm-register address))))

(defmacro vm-copy-and-forward (from-address to-address size)
  `(with-vm-coprocessor
     (cl:setf (vm-register address) ,from-address
	      (vm-register destination) ,to-address
	      (vm-register extent) ,size)
     (vm-command copy-and-forward)
     ;; returns nil if the operation would trap
     (vm-reply)))

;; Compatibility stubs

(defmacro define-pht-compatibility-stub (indirect-name immediate-name vlm-name)
  `(progn
     (defmacro ,indirect-name (index)
       `(if (vm-read-attribute ,',vlm-name ,index) 1 0))
     (defsetf ,indirect-name (index) (new-value)
       `(vm-write-attribute ,',vlm-name ,index ( ,new-value 0)))
     ,(when (not (null immediate-name))
	`(progn
	   (defmacro ,immediate-name (entry)
	     `(vm-attribute ,',vlm-name ,entry))
	   (defsetf ,immediate-name (entry) (new-value)
	     `(setf (vm-attribute ,',vlm-name ,entry) ,new-value))))))

(define-pht-compatibility-stub pht-fault-request pht0-fault-request access-fault)
(define-pht-compatibility-stub pht-modified pht1-modified modified)
(define-pht-compatibility-stub pht-write-protect pht1-write-protect write-fault)
(define-pht-compatibility-stub pht-transport-trap pht1-transport-trap transport-fault)
(define-pht-compatibility-stub
  pht-ephemeral-reference pht1-ephemeral-reference ephemeral-reference)


;; --- Kludge Kaution!  pht0 sets only the fault-request bit, pht1 all others
(defmacro pht-pht0 (index)
  `(with-vm-coprocessor (vm-command read-attributes ,index) (vm-register attributes)))

(defsetf pht-pht0 (index) (entry)
  `(vm-write-attribute access-fault ,index (vm-attribute access-fault ,entry)))

(defmacro pht-pht1 (index)
  `(with-vm-coprocessor (vm-command read-attributes ,index) (vm-register attributes)))

(defsetf pht-pht1 (index) (entry)
  (once-only (index entry)
    `(with-vm-coprocessor
       (vm-command read-attributes ,index)
       (setf (vm-attribute access-fault ,entry) (vm-attribute access-fault))
       (setf (vm-register attributes) ,entry)
       (vm-command write-attributes ,index))))

)						;#+VLM
