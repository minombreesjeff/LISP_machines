;;; -*- Mode:Lisp; Syntax:Common-Lisp; Package:STORAGE; Base:10; Lowercase:T; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defconstant %page-size32 #+3600 288 #+(and IMach (not VLM)) 320 #+VLM 2048)
(defconstant si:disk-sector-data-size32 %page-size32)
(defconstant si:disk-block-length-in-bytes (* %page-size32 4))

;;; Disk commands are of type (unsigned-byte 6).  The commands are enumerated so they
;;; indicate the proper data transfer type in the low 3 bits; see below.
(defconstant %disk-command-read32 0)		;normal user-mode read
(defconstant %disk-command-read40 1)		;normal system-mode read
(defconstant %disk-command-write32 2)		;normal user-mode write
(defconstant %disk-command-write40 3)		;normal system-mode write
(defconstant %disk-command-compare32 4)		;user-mode read-compare
(defconstant %disk-command-compare40 5)		;system-mode read-compare
(defconstant %disk-command-event 6)		;mark to implement disk-event-tasks
(defconstant %disk-command-wakeup 7)		;dequeue all completed disk requests ASAP
(defconstant %disk-command-long-read32 8)	;read sector plus extra words
(defconstant %disk-command-long-write32 10)	;write sector plus extra words
(defconstant %disk-command-mount 14)		;
(defconstant %disk-command-seek 15)		;position heads, no transfer
(defconstant %disk-command-read-all 16)		;read entire track starting at index pulse
(defconstant %disk-command-write-all 18)	;write entire track starting at index pulse
(defconstant %disk-command-format-track 22)	;
(defconstant %disk-command-noop 23)		;no operation
(defconstant %disk-command-read-header 24)	;read sector header only
(defconstant %disk-command-read-defect-data 32) ;read specially formatted cylinder

(defconstant %%disk-command-transfer (byte 3 0))

;;; These are the data transfer types.  The low bit indicates 3240 conversion,
;;; the next two bits indicate read/write/compare/none.
(defconstant %data-transfer-read32 0)
(defconstant %data-transfer-read40 1)
(defconstant %data-transfer-write32 2)
(defconstant %data-transfer-write40 3)
(defconstant %data-transfer-compare32 4)
(defconstant %data-transfer-compare40 5)
(defconstant %data-transfer-none 6)		;also 7

;;; These also work on disk commands.
(defmacro disk-transfer-write-p (type) `(= (ldb (byte 2 1) ,type) 1))
(defmacro disk-transfer-read-p (type) `(not (logtest ,type 2)))
(defmacro disk-transfer-conversion-p (type) `(logtest ,type 1))
(defmacro disk-transfer-none-p (type) `(= (ldb (byte 2 1) ,type) 3))

;;; A disk-error-type is an (unsigned-byte 8).  The high four bits are a system-defined
;;; `error class' for generic error reporting; the low four bits are for extra
;;; unit-specific information about the error.  An error is reported with a generic
;;; statement (e.g. "disk datapath error"), and the unit is given the chance to provide
;;; additional information (e.g. "80188 data bus parity error") if possible.
(defconstant %%disk-error-type-class (byte 4 4))	;generic error class
(defconstant %%disk-error-type-code (byte 4 0))	        ;unit-specific error code

(#+3600 defstruct
 #+3600 (disk-event :named (:constructor nil) (:alterant nil) (:conc-name nil))
 #+IMach defstorage
 #+IMach (disk-event :structure nil :forwardable nil :preserve-cdr-codes nil)
 #+IMach ()					;header
 #+IMach ()					;named structure symbol
  ;; See field definitions below.
  (disk-event-flags)
  ;; Pointer to specified parent event, or nil.
  (disk-event-parent)
  ;; Parent uses this thread to link all its children.
  (disk-event-next-event)
  (disk-event-previous-event)
  (disk-event-children)
  ;; List of requests, in queueing order (first on list is last enqueued).
  (disk-event-request-head)
  (disk-event-request-tail)
  ;; Set to a process that's blocked waiting for this disk event.
  (disk-event-blocked-process)
  ;; Used to link this disk event into the list of failed disk events, should it get an error.
  (disk-event-error-thread)
  ;; Number of unsignaled errors for this very event.  Doubles as the fill pointer for
  ;; the error table.
  (disk-event-error-index)
  ;; An array with two words for each pending (unsignaled) error directly associated with
  ;; this event.  Each entry has a copy of the disk-request-flags word of the erring
  ;; request, and the precise disk address of the error.  The array is large enough to
  ;; accomodate all the errors that can occur `simultaneously' (one for each unit).
  (disk-event-error-table)
  ;; Number of requests for this event that have been flushed; other requests for other
  ;; events may have been flushed as a result of the same error, those aren't included.
  (disk-event-flushed-transfers)
  ;; 3600-style disk event tasks are supported using the following two bit masks (there
  ;; are a maximum of 32 tasks per event).  The active mask indicate which tasks are
  ;; meaningful, the completed mask indicates actual task status.
  (disk-event-active-tasks)
  (disk-event-completed-tasks)
  ;; A process lock held by user disk while waiting for a disk event task or for a disk
  ;; event to be idle.  When multiple processes wait for a single disk event, they'll
  ;; block on the lock, which implements promotion and a real waiter queue, instead of
  ;; relying on our primitive wakeup mechanism, which doesn't.
  (disk-event-lock)
  (disk-event-spare-0)
  (disk-event-spare-1))

;In SYSDEF
;(defconstant %disk-event-object-size 17)		;excluding header and name

(defconstant %%disk-event-type (byte 1 0))	        ;serial or parallel
(defconstant %%disk-event-depth (byte 4 1))	        ;number of ancestors
(defconstant %%disk-event-data-check (byte 1 5))	;write compares and soft errors
(defconstant %%disk-event-error-enqueue-action (byte 1 6))
(defconstant %%disk-event-error-dequeue-action (byte 1 7))

(defmacro define-disk-event-flag (name byte)
  `(defmacro ,name (event) `(ldb ,',byte (disk-event-flags ,event))))

(define-disk-event-flag disk-event-type %%disk-event-type)
(define-disk-event-flag disk-event-depth %%disk-event-depth)
(define-disk-event-flag disk-event-data-check %%disk-event-data-check)
(define-disk-event-flag disk-event-error-enqueue-action %%disk-event-error-enqueue-action)
(define-disk-event-flag disk-event-error-dequeue-action %%disk-event-error-dequeue-action)

;;; Whether a disk-event allows reordering of its requests and descendents or not.
(defconstant %disk-event-parallel 0)
(defconstant %disk-event-serial 1)

(defmacro disk-event-serial-p (event)
  `(logtest (disk-event-flags ,event) 1))

(defconstant %disk-event-error-enqueue-flush 0)
(defconstant %disk-event-error-enqueue-error 1)

;;; When an irrecoverable disk error is first noticed coming out of the unit driver, we
;;; can either record the error in the disk event to be signalled to the client program
;;; at the next synchronization point, or we can crash.
(defconstant %disk-event-error-dequeue-signal 0)	;for user events
(defconstant %disk-event-error-dequeue-crash 1)	        ;for paging events

;;; 2 words for every possible attached unit
(defconstant %disk-event-error-table-size 64)

;;; The maximum number of disk-event-tasks per event, for 3600 compatibility.
(defconstant %disk-event-size 32)

(defmacro map-over-disk-error-events (f)
  (let ((event '#:event))
    `(loop for ,event first *disk-error-events* then (disk-event-error-thread ,event)
	   until (null ,event)
	   do (funcall ,f ,event))))

(defconstant %%memory-descriptor-class (byte 4 27))
(defconstant %%memory-descriptor-words (byte 27 0))

(defstorage (memory-descriptor :structure nil :forwardable nil :preserve-cdr-codes t)
  ((memory-descriptor-words 27 0)
   (memory-descriptor-class 4 27))
  (memory-descriptor-daps)
  (memory-descriptor-link))

(defmacro destructure-memory-descriptor (memory-descriptor)
  `(progn
     (setf (%block-register 1) ,memory-descriptor)
     (values (%block-read 1) (%block-read 1) (%block-read 1 :prefetch nil))))

(#+3600 defstruct
 #+3600 (disk-request :named (:constructor nil) (:alterant nil) (:conc-name nil))
 #+IMach defstorage
 #+IMach (disk-request :structure nil :forwardable nil :preserve-cdr-codes nil)
 #+IMach ()					;header
 #+IMach ()					;named structure symbol
  ;; All the requests for a given unit are doubly linked in execution order
  ;; while awaiting delivery to the unit driver, and doubly linked in a separate
  ;; list during execution by the unit driver.
  (disk-request-next-request)
  (disk-request-previous-request)
  ;; All requests for a disk event are doubly linked in queueing order.
  (disk-request-event-next-request)
  (disk-request-event-previous-request)
  ;; Request info.
  (disk-request-flags)				;see below for field definitions
  (disk-request-address)			;starting disk address (in kilobits)
  (disk-request-length)				;transfer length (in kilobits)
  (disk-request-event)				;the associated disk event
  (disk-request-memory-descriptors)		;description of memory addresses
  ;; Space for one memory descriptor is included in each request.
  (disk-request-descriptor-0)			;be careful of the cdr code
  (disk-request-descriptor-1)			;be careful of the cdr code
  (disk-request-descriptor-2)			;be careful of the cdr code
  ;; Space for the master queue's per unit tree.
  (disk-request-ascendent)
  (disk-request-next-descendent)
  (disk-request-previous-descendent)
  (disk-request-spare-0))

(defconstant %disk-request-object-size 16)		;excluding header and name

;;; Restrict disk request length to 256 pages.
(defconstant %maximum-disk-request-length (* 256 10))

(defconstant %%disk-request-command (byte 6 0))
(defconstant %%disk-request-transfer-type (byte 3 0))
(defconstant %%disk-request-class (byte 4 6))
(defconstant %%disk-request-command&class (byte 10 0))
(defconstant %%disk-request-unit (byte 5 10))
(defconstant %%disk-request-status (byte 3 15))
(defconstant %%disk-request-error-type (byte 8 18))
(defconstant %%disk-request-error-test (byte 1 26))	;force error indicated by error-type
;;; If set, this request must not be executed until all previously issued requests
;;; have been successfully completed.
(defconstant %%disk-request-serial-marker (byte 1 27))
;;; If set, this request must be executed "carefully", which means that if it is ever
;;; decomposed into multiple smaller transfers they must be executed in order.
(defconstant %%disk-request-serial-request (byte 1 28))

(defconstant %disk-request-status-pending 0)
(defconstant %disk-request-status-completed 1)
(defconstant %disk-request-status-failed 2)
(defconstant %disk-request-status-aborted 3)
(defconstant %disk-request-status-flushed 4)
(defconstant %disk-request-status-outstanding 5)

(defmacro define-disk-request-flag (name byte)
  `(defmacro ,name (request) `(ldb ,',byte (disk-request-flags ,request))))

(define-disk-request-flag disk-request-command %%disk-request-command)
(define-disk-request-flag disk-request-transfer-type %%disk-request-transfer-type)
(define-disk-request-flag disk-request-class %%disk-request-class)
(define-disk-request-flag disk-request-command&class %%disk-request-command&class)
(define-disk-request-flag disk-request-unit %%disk-request-unit)
(define-disk-request-flag disk-request-status %%disk-request-status)
(define-disk-request-flag disk-request-error-type %%disk-request-error-type)
(define-disk-request-flag disk-request-error-test %%disk-request-error-test)
(define-disk-request-flag disk-request-serial-marker %%disk-request-serial-marker)
(define-disk-request-flag disk-request-serial-request %%disk-request-serial-request)

;;; Overload the address field when using %disk-command-event.
(defmacro disk-request-task-id (request) `(disk-request-address ,request))

;;; LENGTH is in kilobits, TYPE is needed to test for 3240 conversion.
(defmacro disk-request-words (length command)
  `(if (disk-transfer-conversion-p ,command)
       (*4/5 (kilobitswords ,length))
     (kilobitswords ,length)))


;;;; Unit definitions

(defstorage
  #+IMach (unit-queue :structure nil :forwardable nil :preserve-cdr-codes nil)
  #+3600 (unit-queue)
  ()						;header
  unit-named-structure-symbol
  unit-unit-number
  unit-request-count
  unit-lock
  unit-pending-head
  unit-pending-tail
  unit-pending-region-root
  unit-pending-region-event-0
  unit-pending-region-event-1
  unit-pending-region-event-2
  unit-pending-region-event-3
  unit-outstanding-head
  unit-outstanding-tail
  unit-aborted-head
  unit-aborted-tail
  unit-completed-head
  unit-completed-tail
  unit-size					;in kilobits
  ((unit-geometry-info)
   (unit-cylinder-size 14 0)			;in kilobits
   (unit-track-size 9 14)			;in kilobits
   (unit-sector-size 4 23)			;in kilobits
   (unit-background-tracks 3 27)		;policy hint
   (unit-background-batch-p 1 30))		;contiguous transfers preferred
  unit-background-queue-base
  unit-background-queue-bound
  unit-background-queue-fill
  unit-background-queue-empty
  ;; Space for recording interunit dependencies.
  unit-active-event-0
  unit-active-event-1
  unit-active-event-2
  unit-active-event-3
  unit-active-event-count-0
  unit-active-event-count-1
  unit-active-event-count-2
  unit-active-event-count-3
  ;; The microsecond clock when the most recent request was exchanged between unit and master.
  unit-activity-timestamp
  unit-wakeup-internal-method
  unit-geometry-query-method
  unit-localization-query-method
  decode-disk-address-method
  decode-disk-error-method
  unit-spare-0
  unit-spare-1
  unit-spare-2
  unit-spare-3)

(defmacro define-disk-generic (name lambda-list)
  (let ((variable-name (intern (string-append name "-METHOD") (symbol-package name))))
    `(defwiredsubst ,name ,lambda-list
       (funcall (,variable-name ,(car lambda-list)) ,@lambda-list))))

;;; The `function cell' in the unit queue gets forwarded to the real function cell,
;;; so we can patch the definition more easily.  Note that this has to run wired, even
;;; when method isn't wired.
(defmacro initialize-disk-method (variable method)
  `(%p-store-tag-and-pointer
     (locf ,variable)
     dtp-one-q-forward
     #+IMach (%pointer-plus (function ,method) -1)
     #+3600 (broken)))

(defmacro unit-queue (unit-number)
  `(or (aref *unit-table* ,unit-number)
       (wired-ferror nil "There is no unit number ~D" ,unit-number)))

(defmacro map-over-unit-queues (function)
  (let ((list '#:list))
    `(let ((,list *unit-list*))
       (loop until (null ,list) do (funcall ,function (pop ,list))))))

(defstorage
  #+IMach (background-queue-entry :structure nil :forwardable nil :preserve-cdr-codes nil)
  #+3600 (background-queue-entry)
  (background-queue-ppn)
  (background-queue-dpn))


;;;; Locking

;;; The objectives of the disk locking are
;;;
;;;  - it should work
;;;  - don't get wrapped up with the details of how the rest of the system 
;;;    (i.e. interrupt tasks or the unit drivers) works
;;;  - enqueueing requests from clients can be serialized; it would be possible
;;;    but not terribly beneficial to support finer-grained locking
;;;  - advancing requests through a unit can lock out enqueueing requests to that
;;;    same unit, and vice versa, but requests should be able to advance through
;;;    different units independently
;;;
;;; Here's what needs to be locked:
;;;
;;;  - enqueueing a new request has to link the request into its disk-event,
;;;    which needs to be atomic and interlocked with dequeueing a completed request,
;;;    which has to unlink the request from its disk-event
;;;  - enqueueing a new request might allocate a request object, which needs to
;;;    be atomic and interlocked with deallocation (this might be done with
;;;    store-conditional, but it turns out we don't have to)
;;;  - enqueueing a new request might allocate one or more memory descriptors, which
;;;    needs to be atomic and interlocked with deallocation (this also might be done
;;;    with store-conditional, but it turns out we don't have to)
;;;  - both these allocations might fail, in which case we have to block
;;;    waiting for resources
;;;  - enqueueing a new request performs a search of and insertion in the unit
;;;    pending queue (both the linear and tree structures), which needs to be
;;;    atomic and interlocked with request advancement within that unit, which
;;;    deletes requests from the pending queue
;;;  - completion processing of dequeued requests needs to be interlocked with
;;;    the storage system, to avoid inconsistent access to the PHT and MMPT
;;;  - insertions in the outstanding, aborted, and completed queues of a unit,
;;;    which happen when advancing requests through the unit, need to be atomic
;;;    and interlocked with deletions
;;;  - the master driver uses some state (*disk-last-request*) to optimize the
;;;    interunit aspects of disk request enqueueing, which needs to be examined
;;;    and updated atomically by enqueueing, and interlocked somewhat with request
;;;    advancement which can update it (tricky)
;;;
;;; Note that disk requests can be enqueued only synchronously, as a result of system
;;; (paging) code or user code.  Requests will advance (i.e. unit-input-request or
;;; unit-output-request will be called) at either system level or from an interrupt task
;;; (i.e. asynchronously, and perhaps with no defense against recursive calls).  Completion
;;; processing should be doable at either system level (from wired-wait) or from an
;;; interrupt task (from a periodic timer or something).
;;;
;;; We use two layers of locks.  One, a (singular) lock on "the master driver", serializes
;;; enqueueing, interlocks enqueueing with completion processing and dequeueing, and
;;; protects the disk data structures not associated with units (request and event
;;; objects).  The other, a lock for each unit queue, interlocks request insertion,
;;; advancement through the unit driver, and completion processing, and protects the data
;;; structures within each unit independently (the pending, outstanding, aborted, and
;;; completed queues).  A general technique used for both kinds of locks is that if an
;;; asychronous routine can't get the lock, it "promotes" it so that the lock holder
;;; will do the work that of the asychronous routine, as soon as it's done.
;;;
;;; The master lock is locked during request enqueuing.  During that time, completion
;;; processing cannot be performed for any other requests; an attempt to do so (due to an
;;; asynchronous interrupt) will request the lock holder to do some polling when it's
;;; through.  Similarly, the master lock is locked during completion processing, so it
;;; protects against recursive invocations.  Note that requests can advance within
;;; individual units (from the pending to outstanding to completed queues) without holding
;;; the master lock.
;;;
;;; The attempt to get the master lock on enqueueing will never fail because it's being
;;; held by someone doing completion processing, since request enqueueing is only done
;;; synchronously by user or system code.  If it does fail, it's because some other process
;;; is enqueueing at the same time, so we could just process wait.  However, I'm going to
;;; run enqueueing in system mode anyway, so we're not actually using the master lock
;;; for serialization, though we could in the future (e.g. on a multiprocessor).
;;;
;;; A unit lock is also locked while enqueueing a request for that unit.  During that time,
;;; the unit can't advance requests through the pending, outstanding, and completed queues;
;;; an attempt to do so (due to an asynchronous interrupt) will request the lock holder to
;;; do some polling when it's through.  Similarly, a unit lock is locked while advancing
;;; requests through the unit, so it protects against recursive invocations.
;;;
;;; Because request insertion can lock out request delivery to units, via the unit lock,
;;; unit drivers can't expect immediate response from the master driver.  This is another
;;; reason why unit drivers process multiple requests at a time, to allow some buffering.
;;;
;;; Request enqueueing may need resources (a request object or memory descriptor objects)
;;; that aren't really predictable at the time the locks are locked.  So we use a simple
;;; transaction-abort technique to throw out, release the locks, and try again after
;;; waiting for resources to become available.
;;;
;;; The storage system "binds" *storage-lock* to T whenever it doesn't want disk completion
;;; routines modifying the PHT or MMPT.  After the master driver receives some completed
;;; requests from a unit, it tries to perform completion processing for them.  If the
;;; storage lock is set or if it can't get the master disk lock, the completion processing
;;; will have to be done later.  In that case it sets *disk-wakeup* to T, which causes
;;; sequence-break-internal to call disk-wakeup, which performs any needed completion
;;; processing for all disk units.

;;; Both the master and unit locks can hold one of three values.  The lock-free and lock-held
;;; states are obvious.  The lock-poll state means that some other agent tried to get the
;;; lock while it was in the lock-held state, so when the lock is freed some polling should
;;; be done.  All transitions between states are done with store-conditional.
(defconstant %disk-lock-free 0)
(defconstant %disk-lock-held 1)
(defconstant %disk-lock-poll 2)

(defmacro with-master-lock ((&key (if-locked :skip) (wrapper ''unwind-protect))
			    &body body)
  (let ((location '#:lock-location))
    `(loop with ,location = (locf *master-disk-lock*) do
       (when (store-conditional ,location %disk-lock-free %disk-lock-held)
	 (return
	   (,(eval wrapper)
	    (progn ,@body)
	    (loop do
	      (cond ((store-conditional ,location %disk-lock-held %disk-lock-free)
		     (return nil))
		    ((store-conditional ,location %disk-lock-poll %disk-lock-held)
		     (disk-wakeup-locked)))))))
       ,(case if-locked
	  (:loop
	    ;; --- perhaps we should wired-wait here, for non-interrupt-driven units
	    `(progn))
	  (:skip
	    '(return nil))
	  (:crash
	    `(wired-ferror :fatal "Master disk lock already held"))
	  (:poll
	    `(when (or (= (location-contents ,location) %disk-lock-poll)
		       (store-conditional ,location %disk-lock-held %disk-lock-poll))
	       (return nil)))))))

(defmacro with-unit-lock ((unit &key (if-locked :skip) (wrapper ''unwind-protect))
			  &body body &environment environment)
  (let ((location '#:lock-location))
    (once-only (unit &environment environment)
      `(loop with ,location = (locf (unit-lock ,unit)) do
	 (when (store-conditional ,location %disk-lock-free %disk-lock-held)
	   (return
	     (,(eval wrapper)
	      (progn ,@body)
	      (loop do
		(cond ((store-conditional ,location %disk-lock-held %disk-lock-free)
		       (return nil))
		      ((store-conditional ,location %disk-lock-poll %disk-lock-held)
		       (unit-wakeup-locked ,unit)))))))
	 ,(case if-locked
	    (:loop
	      ;; --- perhaps we should wired-wait here, for non-interrupt-driven units
	      `(progn))
	    (:skip
	      '(return nil))
	    (:crash
	      `(wired-ferror :fatal "Unit lock already held"))
	    (:poll
	      `(when (or (= (location-contents ,location) %disk-lock-poll)
			 (store-conditional ,location %disk-lock-held %disk-lock-poll))
		 (return nil))))))))

(defmacro storage-system-locked-p () '*storage-lock*)

;;; Just a random fixnum, so we don't have to safeguard an object representation.
(defconstant %disk-insertion-transaction-id 40959)

(defmacro with-insertion-transaction (&body body)
  ;; This is just a more efficient, and wireable, way of saying
  ;; (block insertion-transaction
  ;;   (loop
  ;;     (apply #'disk-wait
  ;;       (multiple-value-list
  ;;         (catch %disk-insertion-transaction-id
  ;;           (return-from insertion-transaction (progn ,@body)))))))
  ;; In particular we don't want to go through the abort-call hair in the usual case
  ;; where we actually do the return-from.
  `(block insertion-transaction
     (loop as stack-pointer = (compiler:%stack-location-internal 0)
	   as arguments = (sys:%multiple-value-push
			    (catch %disk-insertion-transaction-id
			      (return-from insertion-transaction (progn ,@body))))
	   ;; Sanity check, cause I seem to lose a value every once in a while.
	   do (when* ( (%pointer-difference (compiler:%stack-location-internal 0) stack-pointer)
			arguments)
		(si:%halt))
	   do (increment-meter *count-disk-insertion-restarts*)
	   ;; There are ARGUMENTS values on the top of the stack.  Turn them into a
	   ;; stack list, and apply #'disk-wait to it.
	   do (compiler:%instruction %set-cdr-code-1 (sp 0))
	   do (apply #'disk-wait (%make-pointer sys:dtp-list (%pointer-plus stack-pointer 1)))
	   ;; There are still ARGUMENTS values on the top of the stack.  Flush them.
	   ;; There's no better way to do this; directly writing the SP requires a pipeline
	   ;; stall that we can't enforce without going to interrupt level.
	   do (loop while (plusp arguments) do (%pop) (decf arguments)))))

(defmacro restart-insertion-transaction (function &rest arguments)
  `(throw %disk-insertion-transaction-id (values ,function ,@arguments)))


;;;; Randomness

(defmacro increment-meter (name)
  #+3600 `(incf* ,name)
  #+IMach `(%memory-write (locf ,name) (%32-bit-plus ,name 1)))

(defmacro *10 (x &environment environment)
  (once-only (x &environment environment)
    `(+ (rot ,x 3) (rot ,x 1))))

(defmacro *5 (x &environment environment)
  (once-only (x &environment environment)
    `(+ (rot ,x 2) ,x)))

;;; 1/10 is 13107/131072.  The multiply is easy because 13107 is #b11001100110011, and
;;; the divide is just a shift.  This works for 16-bit positive integers, and is about
;;; three times faster than a general divide.
;be conservative
;(defmacro /10 (x)
;  `(let* ((x (1+ ,x))
;	  (x*3 (+ x x x))
;	  (x*51 (+ (rot x*3 4) x*3)))
;     (ldb (byte 15 17) (+ (rot x*51 8) x*51))))
(defmacro /10 (x) `(values (truncate ,x 10)))

(defmacro *10/8 (x) `(/8 (*10 ,x)))
(defmacro *4/5 (x) `(*4 (truncate ,x 5)))
(defmacro *5/4 (x) `(*5 (/4 ,x)))

(defmacro atomic-logior (reference value)
  (let ((location '#:location)
	(old-value '#:old-value)
	(new-value '#:new-value))
    `(let ((,location (locf ,reference)))
       (loop do
	 (let* ((,old-value (location-contents ,location))
		(,new-value (logior ,old-value ,value)))
	   (when (store-conditional ,location ,old-value ,new-value)
	     (return ,new-value)))))))

(defmacro atomic-logand (reference value)
  (let ((location '#:location)
	(old-value '#:old-value)
	(new-value '#:new-value))
    `(let ((,location (locf ,reference)))
       (loop do
	 (let* ((,old-value (location-contents ,location))
		(,new-value (logand ,old-value ,value)))
	   (when (store-conditional ,location ,old-value ,new-value)
	     (return ,new-value)))))))

(defmacro kilobitswords (kilobits) `(*32 ,kilobits))
(defmacro wordskilobits (words) `(/32 ,words))

(defmacro pageskilobits (pages) 
  #+VLM `(%fixnum-multiply
	   ,pages
	   ,(/ (* %page-size32 (byte-size %%q-pointer)) 1024))
  #-VLM` (*10 ,pages))

(defmacro kilobitspages (kilobits) 
  #+VLM `(%fixnum-floor
	   ,kilobits
	   ,(/ (* %page-size32 (byte-size %%q-pointer)) 1024))
  #-VLM `(/ ,kilobits 10))

(defconstant %trap-mode-user 0)
(defconstant %trap-mode-system 1)
(defconstant %trap-mode-interrupt 2)

(defmacro %funcall-in-interrupt-mode (function &rest arguments)
  `(si:%funcall-in-trap-mode (%set-trap-mode %trap-mode-interrupt) ,function ,@arguments))

(defmacro %funcall-in-system-mode (function &rest arguments)
  `(si:%funcall-in-trap-mode (%set-trap-mode %trap-mode-system) ,function ,@arguments))


;;;; Controller definitions

;;; Most unit drivers are organized as controllers with a number of units attached.
;;; They all have locks and a list of units and a service routine.

(defstorage (controller :structure nil :forwardable nil :preserve-cdr-codes nil)
  ()						;header
  (controller-named-structure-symbol)		;nss
  (controller-lock)
  (controller-units)
  (service-controller-internal-method))

(defmacro with-controller-lock ((controller &key (if-locked :skip) (wrapper ''unwind-protect))
				&body body &environment environment)
  (once-only (controller &environment environment)
    `(loop with location = (locf (controller-lock ,controller)) do
       (when (store-conditional location %disk-lock-free %disk-lock-held)
	 (return
	   (,(eval wrapper)
	    (progn ,@body)
	    (loop do
	      (cond ((store-conditional location %disk-lock-held %disk-lock-free)
		     (return nil))
		    ((store-conditional location %disk-lock-poll %disk-lock-held)
		     (service-controller-internal ,controller)))))))
       ,(ecase if-locked
	  (:loop
	    ;; --- perhaps we should wired-wait here, for non-interrupt-driven units
	    nil)
	  (:skip
	    '(return nil))
	  (:crash
	    `(wired-ferror :fatal "Controller lock already held"))
	  (:poll
	    `(when (or (= (location-contents location) %disk-lock-poll)
		       (store-conditional location %disk-lock-held %disk-lock-poll))
	       (return nil)))))))

(defmacro verify-controller-lock (controller)
  `(when* (= (controller-lock ,controller) %disk-lock-free)
     (wired-ferror :fatal "Controller unlocked?!")))

(defmacro map-over-controller-units (controller function)
  (let ((list '#:list))
    `(let ((,list (controller-units ,controller)))
       (loop until (null ,list) do (funcall ,function (pop ,list))))))
