;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;; User Datagram Protocol
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Miscellaneous Services

;;; IEN 116 Name Server

(net:define-server :ien-116 (:medium :udp :connection conn :network network
				     :reject-unless-trusted nil)
  (multiple-value-bind (pkt start ignore)
      (send conn :read-input-buffer t t)
    (when pkt
      (selector (aref pkt start) =
	(1 (multiple-value-bind (rpkt rstart ignore)
	       (send conn :get-output-buffer)
	     (let* ((name-length (aref pkt (1+ start)))
		    (name-end (+ start 2 name-length))
		    (rname-end (+ rstart 2 name-length))
		    (name (make-array name-length :type 'sys:art-8b))
		    ) 
	       (copy-array-portion pkt start name-end rpkt rstart rname-end)
	       (copy-array-portion pkt (+ start 2) name-end name 0 name-length)
	       (let* ((host (si:parse-host (ascii-to-string name) t))
		      (address (when host
				 (loop for (net addr) in (send host :network-addresses)
				       when (eq net network)
					 return addr))))
		 (cond ((null address)
			(setf (aref rpkt name-end) #x+03)
			(incf name-end)
			(setf (aref rpkt name-end) 14)
			(incf name-end)
			(copy-array-portion (string-to-ascii "Name not known") 0 14
					    rpkt name-end (incf name-end 14))
			(send conn :advance-output-buffer name-end)
			(send conn :force-output))
		       (t (setf (aref rpkt name-end) #x+02)
			  (incf name-end)
			  (setf (aref rpkt name-end) #x+04)
			  (incf name-end)
			  (setf (load-internet-address rpkt name-end) address)
			  (incf name-end 4)
			  (send conn :advance-output-buffer name-end)
			  (send conn :force-output)))))))))))




;;; Unix rwho ProtocolD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")  -Removed for lack of interest.

;0(defvar *rwho-messages* nil)

1;;; Neither of these servers work properly and no one seems to want them.
;;; If you feel adventurous, go for it!
0#|
(net:define-server :unix-rwho (:medium :udp :connection icp-conn)
  (multiple-value-bind (pkt start end)
      (send icp-conn :read-input-buffer t t)
    (when pkt
      (let ((host (send icp-conn :foreign-host)))
	(unless (send host :uninterned-p)
	  (let ((message (getf *rwho-messages* host)))
	    (unless (and message ( (string-length message) (- end start)))
	      (setf message (make-array (- end start) :element-type '(unsigned-byte 8) :fill-pointer 0))
	      (setf (getf *rwho-messages* host) message))
	    (copy-array-portion pkt start end message 0 (- end start))
	    (setf (fill-pointer message) (- end start))))))))
|#
	
;;; RFC 887 Resource Location Protocol


;(defconstant rlp-who-provides 0)
;(defconstant rlp-do-you-provide 1)
;(defconstant rlp-who-anywhere-provides 2)
;(defconstant rlp-does-anyone-provide 3)
;(defconstant rlp-i-provide 4)
;(defconstant rlp-they-provide 5)
;
;(defconstant rlp-local #X+80)
;
;(net:define-server :rfc887-resource-location (:medium :udp :connection icp-conn)
;  (multiple-value-bind (pkt start end)
;      (send icp-conn :read-input-buffer t t)
;    (when pkt
;      (multiple-value-bind (opkt ostart oend)
;	  (send icp-conn :new-output-buffer)
;	(setf oend (+ ostart 4))
;	(setf (aref opkt (1+ ostart)) 0)
;	(copy-array-portion pkt (+ start 2) (+ start 4) opkt (+ ostart 2) oend)
;	(selector (aref pkt start) =
;	  ;;Who-Provides
;	  (0)
;	  ;;Do-You-Provide
;	  (1)
;	  ;;Who-Anywhere-Provides
;	  (2)
;	  ;;Does-Anyone-Provide
;	  (3)
;	  ;;I-Provide
;	  (4)
;	  ;;They-Provide
;	  (5)
;	  ;;Other
;	  (otherwise (error "Unknown RLP type ~D." (aref pkt start))))))))

;;;
;;; all this stuff is for supporting the internet domain resolver.  It wants to be
;;; in ip-tcp somewhere, not clear that this is the right place for it.  I'll 
;;; reorganize all this stuff when worlds stop wobbling.
;;; Record streams

neti:
(defflavor domain-udp-record-stream
	((output-buffer (zl:make-array 512 :type 'zl:art-8b))
	 stream)
	(					;si:buffered-stream
	 si:buffered-binary-stream)
  (:initable-instance-variables stream))

neti:
(defwhopper (:tyo domain-udp-record-stream) (ch)
  (continue-whopper (int-char ch)))
	   
neti:
(defwhopper (:close domain-udp-record-stream) (abortp)
  (when stream (send stream ':close abortp))
  (setq stream nil)
  (continue-whopper abortp))

neti:
(defmethod (:reliable-p domain-udp-record-stream) () nil)

neti:
(defmethod (:next-input-buffer domain-udp-record-stream) (&optional no-hang-p)
  (send stream :read-input-buffer nil no-hang-p))

neti:
(defmethod (:discard-input-buffer domain-udp-record-stream) (ignore)
  (send stream :advance-input-buffer))

neti:
(defmethod (:new-output-buffer domain-udp-record-stream) ()
  (values output-buffer 0 512))

neti:
(defmethod (:send-output-buffer domain-udp-record-stream) (ignore length ignore)
  (send stream :string-out output-buffer 0 length)
  (send stream :force-output))

neti:
(defmethod (:discard-output-buffer domain-udp-record-stream) (ignore))

;;;

neti:
(defflavor udp-domain-access-path
	()
	(domain-access-path))

neti:
(defmethod (:get-connection-for-service udp-domain-access-path) ()
  (make-instance 'domain-udp-record-stream
		 :stream (net:get-connection-for-service neti:service-access-path :no-rfc t)))


1;;; Tell the lower levels that there is a connection error and it can try another route.
0neti:
(defmethod (:report-connection-error domain-udp-record-stream) (signal-error)
  (send stream :report-connection-error signal-error))

;;;
;;; udp protocol stuff
;;;

(add-udp-port-for-protocol :domain-simple 53)
(net:define-protocol :domain-simple (:domain :udp)
  (:desirability .9)
  (:invoke (path)
   (make-instance 'neti:udp-domain-access-path :service-access-path path)))

;;;

neti:
(defflavor udp-server
	   (connection)
  (neti:basic-server)
  :abstract-flavor
  (:gettable-instance-variables connection)
  (:initable-instance-variables connection))

neti:
(defmethod (:foreign-host udp-server) ()
  (send connection :foreign-host))

neti:
(defmethod (:kill udp-server) (ignore)
  (send connection :close :abort))

neti:
(compile-flavor-methods udp-server)

neti:
(defflavor default-udp-server () (udp-server)
  (:init-keywords :host :trusted-p))

neti:
(defmethod (:server-top-level default-udp-server) ()
  (error "This isn't a real server, you know."))

neti:
(compile-flavor-methods default-udp-server)

neti:
(defprop :udp default-udp-server neti:server-base-flavor)
;;;

neti:
(compile-flavor-methods domain-udp-record-stream)
neti:
(compile-flavor-methods udp-domain-access-path)


