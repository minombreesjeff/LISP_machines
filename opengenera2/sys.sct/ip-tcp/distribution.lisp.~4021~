;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Initialize a site

;;(export 'initialize-internet-namespace)
(defun initialize-internet-namespace ()
  "Create and initialize the INTERNET namespace."
  ;; Read in the user-supplied information
  (multiple-value-bind (name dir local-addr gw-name gw-addr)
      (dw:accept-values `((string :prompt "Name of the namespace to create? "
				  :default "INTERNET")
			  (fs:pathname
			    :prompt "Directory where that namespace's files should be kept? "
			    :default ,(fs:parse-pathname "LOCAL:>sys>site>"))
			  (string :prompt "Internet address of the local host? ")
			  (string :prompt "Name of your internet gateway? ")
			  (string :prompt "Internet address of your internet gateway? ")))
    ;; Error check until we have a presentation type for internet addresses
    (parse-internet-address local-addr)
    (parse-internet-address gw-addr)
    ;; Create the new namespace object
    (setf name (string-upcase name))
    (let ((namespace
	    (neti:add-or-change-object
	      :namespace (neti:parse-name name t)
	      `(:descriptor-file ,(string (make-internet-files name dir))
		:search-rules (neti:**self**)
		:primary-name-server (,net:*local-host*)))))
      ;; Load it
      (send namespace :get-latest-timestamp)
      ;; Update the local namespace to include it
      (unless (member namespace (send net:*namespace* :search-rules))
	(multiple-value-bind (ns-name plist)
	    (send net:*namespace* :namespace-view net:*namespace*)
	  (setf (getf plist :search-rules)
		(append (getf plist :search-rules) (ncons namespace)))
	  (format t "~&Updating local namespace object...")
	  (net:update-object-permanently :namespace net:*namespace* ns-name plist)))
      ;; Add the INTERNET network to the local namespace.
      (format t "~&Updating local network object...")
      (net:update-object-permanently :network net:*namespace*
				     (neti:parse-name name nil net:*namespace*)
				     `(:type :internet
				       :nickname (,(neti:parse-name name nil namespace)))))
    (let ((internet (net:find-object-named :network name)))
      ;; Add the local host's address to its local object.
      (multiple-value-bind (host-name plist)
	  (send net:*local-host* :namespace-view net:*namespace*)
	(unless (assoc internet (getf plist :address))
	  (push `(,internet ,local-addr) (getf plist :address)))
	(format t "~&Updating local host object...")
	(net:update-object-permanently :host net:*namespace* host-name plist))
      ;; Add the INTERNET network to the local namespace.
      (format t "~&Updating gateway host object...")
      (net:update-object-permanently :host net:*namespace*
				     (neti:parse-name gw-name nil net:*namespace*)
				     `(:address ((,internet ,gw-addr))
				       :service ((:gateway :ip :internet-gateway))
				       :site ,net:*local-site*)))
    nil))

(defun make-internet-files (name dir)
  (let* ((namespace-file 
	   (send dir :new-pathname :name (format nil "~A-NAMESPACE" name) 
		 :canonical-type :text :version :newest))
	 (version-file 
	   (send dir :new-pathname :name (format nil "~A-NAMESPACE-LOG" name)
		 :canonical-type :text :version :newest))
	 (changes-file 
	   (send dir :new-pathname :name (format nil "~A-NAMESPACE-CHANGES" name)
		 :canonical-type :text :version :newest))
	 (hosts-file
	   (send dir :new-pathname :name (format nil "~A-HOSTS" name)
		 :canonical-type :text :version :newest))
	 (other-file 
	   (send dir :new-pathname :name (format nil "~A-OTHERS" name)
		 :canonical-type :text :version :newest)))
    ;; Make the namespace descriptor
    (with-open-file (stream namespace-file :direction :output)
      (format stream ";-*-Text-*-~%VERSION ~A~%CHANGES ~A~%* ~A~%HOST ~A~2%"
	      version-file changes-file other-file hosts-file))
    ;; Make the INTERNET-OTHERS file.
    (with-open-file (stream other-file :direction :output)
      (format stream ";;; -*- Mode: Text -*-
NAMESPACE ~A
DESCRIPTOR-FILE ~A
SEARCH-RULES ~A
PRIMARY-NAME-SERVER ~A
INTERNET-DOMAIN-NAME ARPA

NETWORK ~A
TYPE ~A
NICKNAME ~A|~A

"
	      name namespace-file name
	      (send (send net:*local-host* :primary-name) :qualified-string)
	      name name (send net:*namespace* :name) name))
    ;; Make the INTERNET-HOSTS file.
    (with-open-file (stream hosts-file :direction :output)
      (format stream ";;; -*- Mode: Text -*-
HOST SRI-NIC
SYSTEM-TYPE TOPS-20
ADDRESS ~A 192.67.67.20
SERVICE NIC-HOST-TABLE TCP RFC-811

"
	      name))
    ;; Make the INTERNET-NAMESPACE-LOG file.
    (with-open-file (stream version-file :direction :output))
    ;; Make the INTERNET-NAMESPACE-CHANGES file.
    (with-open-file (stream changes-file :direction :output)
      (format stream "TIMESTAMP 1~%~%"))
    ;; Return the descriptor file name.
    namespace-file))



;;; Host Table tools

;;; Handle the internet host table
;;(export 'translate-nic-host-table)
(defun translate-nic-host-table (input-file output-file &rest keywords)
  (with-open-file (input-stream input-file)
    (apply #'translate-nic-host-stream input-stream output-file (truename input-stream)
	   keywords)))

;;; The following is something of a kludge.  When the :NAMESPACE service
;;; is handled better, this should be completely redone.
;;(export 'install-nic-host-table)
(defun install-nic-host-table (&optional (host "internet|sri-nic") &rest args)
  (net:keeping-namespace-server
    (condition-bind ((net:host-does-not-support-service
		       #'neti:host-does-not-support-protocol-specify-path-handler))
      (apply #'net:invoke-service-on-host :nic-host-table (net:parse-host host) args))))

(defun pathname-for-internet-host-info (path)
  (accept 'fs:pathname
	  :prompt "Output file? "
	  :default (second (assoc :host
				  (send (send (send (neti:service-access-path-host path)
						    :primary-name)
					      :namespace)
					:file-information)))))

(net:define-protocol :rfc-811 (:nic-host-table :byte-stream)
  (:desirability .3)
  (:invoke (path &aux version)
    (let ((pathname (pathname-for-internet-host-info path)))
      (with-open-stream (net-stream
			  (net:get-connection-for-service path :ascii-translation t))
	(format net-stream "VERSION~%")
	(force-output net-stream)
	(let ((line (send net-stream :line-in)))
	  (setf version (parse-integer line :start (1+ (string-search-char #\space line))
				       :sign-allowed nil)))
	(close net-stream :abort t))
      (format t "~&Version ~D..." version)
      (with-open-stream (net-stream
			  (net:get-connection-for-service path :ascii-translation t))
	(format net-stream "ALL~%")
	(force-output net-stream)
	(apply #'translate-nic-host-stream net-stream pathname
	       (format nil "version ~D of ~A" version (send net-stream :foreign-host))
	       (neti:service-access-path-args path))))))

(add-tcp-port-for-protocol :rfc-811 101)

;;; Translates media
(defparameter *nic-services*
	      '(("TCP" :tcp
		 (("ECHO" :byte-stream-echo (:echo))
		  ("DISCARD" :discard (:discard))
		  ("FTP" :tcp-ftp (:file))
		  ("TELNET" :telnet (:login))
		  ("SMTP" :smtp (:mail-to-user :send :expand-mail-recipient))
		  ("TIME" :time-msb (:time))
		  ("FINGER" :ascii-name (:show-users))
		  ("SUPDUP" :supdup (:login))
		  ))
		("UDP" :udp
		 (("TFTP" :tftp (:file))
		  ("TIME" :time-simple-msb (:time))
		  ))
		("IP" :ip
		 (("GW" :internet-gateway (:gateway))
		  ))
		("GW" :ip-gateway
		 (("PRIME" :internet-gateway-prime (:gateway))
		  ("DUMB" :internet-gateway-dumb (:gateway))
		  ("ALWAYS-UP" :internet-gateway-always-up (:gateway))
		  ("EGP" :internet-gateway-egp (:gateway))
		  ))
		))

(defparameter *nic-system-types*
	      '(("TOPS20" :tops-20)
		("FOONEX" :tenex)
		("UNIX" :unix42)
		))

(defparameter *nic-machine-types*
	      '(("SYMBOLICS-3600" :|3600|)
		))

(defun translate-nic-host-stream (input-stream output-file source-string
				  &key (namespace-name "INTERNET") link-to link-sites)
  (let ((entry-list))
    (loop with (line eof)
	  with name-ht = (make-hash-table :test #'string-equal :size 2000)
	  with address-ht = (make-hash-table :test #'string-equal :size 2000)
	  doing (multiple-value-setq (line eof)
		  (send input-stream :line-in))
	  when (let ((non-blank (string-search-not-set '(#\sp #\tab) line)))
		 (and non-blank
		      (char-not-equal (aref line non-blank) #\;)))
	    do (let ((tokens (tokenize-nic-host-table-line line)))
		 (selector (first (first tokens)) string-equal
		   ("NET")
		   (("HOST" "GATEWAY")
		    (let (address name machine-type system-type protocol)
		      (setf `("HOST" ,address ,name ,machine-type ,system-type ,protocol)
			    tokens)
		      (setf name
			    (loop for name in name
				  for len = (string-length name)
				  when (and (> len 5)
					    (string-equal name ".ARPA" :start1 (- len 5)))
				    collect (subseq name 0 (- len 5))))
		      (when (and name address)
			(let ((existing))
			  (loop for n in name
				for hte = (gethash n name-ht)
				when hte
				  doing
				    (setq name (delete n name))
				    (pushnew hte existing))
			  (loop for a in address
				for hte = (gethash a address-ht)
				when hte
				  doing
				    (setq address (delete a address))
				    (pushnew hte existing))
			  (cond ((= (length existing) 1)
				 (let ((hte (first existing)))
				   (when name (setf (first hte) (nconc name (first hte))))
				   (when address
				     (setf (second hte) (nconc address (second hte))))
				   (loop for p in protocol
					 do (pushnew p (fifth hte) :test #'string-equal))))
				((and name address)
				 (let ((entry (list name address machine-type system-type protocol)))
				   (when existing
				     (format t "~&~A lost some names or addresses to ~S.  Made it anyway."
					     line existing))
				   (loop for n in name
					 do (setf (gethash n name-ht) entry))
				   (loop for a in address
					 do (setf (gethash a address-ht) entry))
				   (push entry entry-list)))
				(t (when existing
				     (format t "~&~A lost all names or addresses to hosts ~S."
					     line existing))))
			  ))))))
	  until eof)
    (with-open-file (output-stream output-file :direction :output)
      (format output-stream "~
;;; -*- Mode: Text -*-
;;; *** THIS FILE WAS AUTOMATICALLY GENERATED BY A PROGRAM, DO NOT EDIT IT ***
;;; Host table made from ~A by ~A at ~\\DATIME\\~%"
	      source-string zl:user-id)
      (loop for (name address machine-type system-type protocol) in (nreverse entry-list)
	    doing
	(format output-stream "HOST ~A~%" (first name))
	(when link-to
	  (format output-stream "NICKNAME ~A|~A~%" link-to (first name)))
	(loop for name in (cdr name)
	      do (format output-stream "NICKNAME ~A~%" name))
	(loop for addr in address
	      do (format output-stream "ADDRESS ~A ~A~%" namespace-name addr))
	(when link-sites
	  (let ((idx (string-search-char #\- (first name))))
	    (when idx
	      (condition-case ()
		   (let ((site-name (intern (substring (first name) 0 idx) "keyword")))
		     (when (member site-name link-sites)
		       (let* ((site (net:find-object-named :site site-name))
			      (ns (send site :local-namespace))
			      (host-name (substring (first name) (1+ idx))))
			 (neti:searching-one-namespace (ns)
			   (net:find-object-named :host host-name))
			 (format output-stream "NICKNAME ~A|~A~%" ns host-name))))
		 (net:object-not-found)))))
	(when machine-type
	  (let ((mt (assoc (first machine-type) *nic-machine-types* :test #'string-equal)))
	    (format output-stream "MACHINE-TYPE ~A~%"
		    (if mt (second mt) (first machine-type)))))
	(when system-type
	  (let ((st (assoc (first system-type) *nic-system-types* :test #'string-equal)))
	    (format output-stream "SYSTEM-TYPE ~A~%"
		    (if st (second st) (first system-type)))))
	(when (string-equal (first name) "SRI-NIC")	;talk about kludges!
	  (format output-stream "SERVICE NIC-HOST-TABLE TCP RFC-811~%"))
	(loop for prot in protocol
	      do (let* ((slash (string-search-char #\/ prot))
			(medium (substring prot 0 slash))
			(m-entry (assoc medium *nic-services* :test #'string-equal)))
		   (when (and m-entry slash)
		     (let* ((protocol (substring prot (1+ slash)))
			    (p-entry (assoc protocol (third m-entry) :test #'string-equal)))
		       (dolist (service (third p-entry))
			 (format output-stream "SERVICE ~A ~A ~A~%"
				 service (second m-entry) (second p-entry)))))))
	(terpri output-stream))
      (send output-stream :close)
      (truename output-stream))))

(defun tokenize-nic-host-table-line (line)
  (loop as start-idx first 0 then (1+ idx)
	with line-list = nil
	with sublist = nil
	while (setq start-idx (string-search-not-set '(#\sp #\tab) line :start start-idx))
	as idx = (string-search-set '(#\: #\,) line :start start-idx)
	while idx
	as pidx = (1+ (zl:string-reverse-search-not-set '(#\sp #\tab) line idx))
	as token = (substring line start-idx (max pidx start-idx))
	unless (equal token "")
	  do (push token sublist)
	do (when (char-equal (aref line idx) #\:)
	     (push (nreverse sublist) line-list)
	     (setq sublist nil))
	finally (return (nreverse line-list))))
