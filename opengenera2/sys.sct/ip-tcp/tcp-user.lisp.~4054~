;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; -*-
;; Transmission Control Protocol -- user interface
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defun make-fast-sub-packet (seg start limit type)
  (let ((off (mod (si:array-index-offset seg) 4)))
    (if (and (zerop off) (eq (sys:array-type seg) type))
	(values seg start limit)
	(values (neti:get-sub-packet seg type (- off))
		(+ start off)
		(+ limit off)))))

  ;;
;;;;;;  Define and manipulate buffered TCP streams.  Much of this is
;;;;;;  just a user interface into the tcp-protocol proper. 
  ;;

(defflavor basic-tcp-stream
	((tcb nil))
	(si:stream)
  (:initable-instance-variables tcb)
  (:gettable-instance-variables tcb)
  (:required-init-keywords :tcb))

(defmethod (:array-type basic-tcp-stream) () 'sys:art-8b)

(defmethod (:close basic-tcp-stream) (&optional abort-p)
  (when tcb
    (close-tcb (prog1 tcb (setq tcb nil)) abort-p)))

(defmethod (:close-with-reason basic-tcp-stream) (reason &optional abort-p)
  reason					;tcp doesn't support reasons
  (send self :close abort-p))

(defmethod (:connected-p basic-tcp-stream) ()
  (and tcb (member (tcb-state tcb) '(:established))))

(defmethod (:foreign-host basic-tcp-stream) ()
  (and tcb (tcb-foreign-host-object tcb)))

(defmethod (:accept basic-tcp-stream) ()
  (accept-tcb tcb))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Note, if timeout is Nil, this will wait indefinately (which is right for a server).
0(defmethod (:complete-connection basic-tcp-stream) (&key timeout)
  (complete-open-tcb tcb timeout))

(defmethod (:reject basic-tcp-stream) (&optional reason)
  reason
  (reject-tcb (prog1 tcb (setf tcb nil))))

(defmethod (:network basic-tcp-stream) ()
  (values (send (tcb-network tcb) :network)
	  (tcb-foreign-address tcb)))

(defmethod (:trusted-p basic-tcp-stream) ()
  (multiple-value-call #'ip-host-trusted-p (send self :network)))

(defmethod (:local-address basic-tcp-stream) ()
  (and tcb (tcb-local-address tcb)))

(defmethod (:local-port basic-tcp-stream) ()
  (and tcb (tcb-local-port tcb)))

(defmethod (:foreign-address basic-tcp-stream) ()
  (and tcb (tcb-foreign-address tcb)))

(defmethod (:foreign-port basic-tcp-stream) ()
  (and tcb (tcb-foreign-port tcb)))

(defmethod (:number-of-outstanding-connections basic-tcp-stream) ()
  16)
(defmethod (:connection-pending-p basic-tcp-stream) ()
  (and tcb (not (eq (tcb-state tcb) :established))))
(defmethod (:check-connection-state basic-tcp-stream) ()
  ;; This is handled elsewhere
  t)

  ;;
;;;;;; Stuff for FTP
  ;;

(defun tcp-parse-auxiliary-port (network port-name &key expected-foreign-host)
  (declare (values host port-number))
  (let ((bytes (loop with (num delim)
		     repeat 6
		     for idx = 0 then (1+ delim)
		     do (when delim
			  (cond ((= delim (string-length port-name)) (return nil))
				((char (aref port-name delim) #\,) (return nil))))
			(multiple-value-setq (num delim)
			  (parse-integer port-name :start idx :junk-allowed t))
			(when (or (null num) (< num 0) (> num 255.)) (return nil))
		     collect num into list
		     finally (when (= delim (string-length port-name))
			       (return list)))))
    (unless bytes (error "Invalid syntax in port name."))
    (let* ((ip-address (build-internet-address (first bytes) (second bytes)
					       (third bytes) (fourth bytes)))
	   (foreign-host
	     (or (and expected-foreign-host
		      (loop for (net address) in (send
						   expected-foreign-host :network-addresses)
			    when (and (neti:network-eql net network)
				      (compare-internet-address address ip-address))
			      return expected-foreign-host))
		 (net:get-host-from-address ip-address network))))
      (values foreign-host
	      (dpb (fifth bytes) (byte 8 8) (sixth bytes)))))) 

(defmethod (:start-open-auxiliary-stream basic-tcp-stream)
	   (active-p &key local-id foreign-id stream-options application-id
		     &aux local-port foreign-host foreign-port)
  (declare (values stream local-id))
  application-id
  (setf local-port (case local-id
		     ((nil) nil)
		     (:same (tcb-local-port tcb))
		     (:1- (1- (tcb-local-port tcb)))
		     (otherwise (error "Bad local port."))))
  (case foreign-id
    ((nil)
     (setf foreign-port nil)
     (setf foreign-host (tcb-foreign-host-object tcb)))
    (:same
      (setf foreign-port (tcb-foreign-port tcb))
      (setf foreign-host (tcb-foreign-host-object tcb)))
    (:1-
      (setf foreign-port (1- (tcb-foreign-port tcb)))
      (setf foreign-host (tcb-foreign-host-object tcb)))
    (otherwise
      (multiple-value-setq (foreign-host foreign-port)
	(tcp-parse-auxiliary-port (send (tcb-network tcb) :network) foreign-id
				  :expected-foreign-host (tcb-foreign-host-object tcb)))))
  (let ((aux-tcb (open-tcb active-p foreign-host foreign-port local-port :wait-for-syn nil
			   :foreign-address (tcb-foreign-address tcb)
			   :my-address (tcb-local-address tcb))))
    (values (apply #'make-tcp-stream aux-tcb stream-options)
	    (multiple-value-call #'format nil "~D,~D,~D,~D,~D,~D"
				 (explode-internet-address (tcb-local-address aux-tcb))
				 (ldb (byte 8 8) (tcb-local-port aux-tcb))
				 (ldb (byte 8 0) (tcb-local-port aux-tcb)))))) 


  ;;
;;;;;;  TCP streams are always bidirectional.  Separate input and output
;;;;;;  to separate the modularity. 
  ;;

;;; input side

(defflavor tcp-input-stream-mixin
	((input-seg nil))
	(si:input-stream-exception-mixin)
  (:required-flavors basic-tcp-stream si:basic-buffered-input-stream))
(defmethod (stream-reading-process tcp-input-stream-mixin) ()
  (tcb-reading-process tcb))
(defmethod ((setf stream-reading-process) tcp-input-stream-mixin) (process)
  (setf (tcb-reading-process tcb) process))
(defmethod (si:stream-input-block tcp-input-stream-mixin)
	   (&optional whostate function &rest arguments)
  (flet ((predicate ()
	   (declare (sys:downward-function))
	   (or (and function (not (null (apply function arguments))))
	       (tcp-data-available tcb))))
    (when (not (predicate))
      (setf (tcb-reading-process tcb) *current-process*)
      (si:stream-input-exception-block self (or whostate "TCP In") #'predicate))
    #||
    (when tcb
      (setf (tcb-reading-process tcb) nil))
    ||#
    nil))
(defmethod (:input-wait tcp-input-stream-mixin) (&optional whostate function &rest arguments)
  (setf (tcb-reading-process tcb) *current-process*)
  (send self :input-exception-wait (or whostate "TCP In")
	#'(lambda ()
	    (declare (sys:downward-function))
	    (or (and function (not (null (apply function arguments))))
		(tcp-data-available tcb))))
  #||
  (when tcb
    (setf (tcb-reading-process tcb) nil))
  ||#
  nil)
(defmethod (:next-input-buffer tcp-input-stream-mixin) (&optional no-hang-p)
  (when input-seg
    (tcp-implementation-error nil
			      "Input segment ~S about to be lost!!  Proceed to return it and continue."
			      input-seg)
    (return-tcp-segment (prog1 input-seg (setq input-seg nil))))
  1;; Check to see that the tcb is still around before waiting
0  (when (null tcb)
    (error 'tcp-stream-closed :attempt "read from" :stream self))
  (cond (no-hang-p
	 (send self :check-input-exception))
	(t
	 (setf (tcb-reading-process tcb) *current-process*)
	 (si:stream-input-exception-block
	   self "TCP In"
	       #'(lambda ()
		   (declare (sys:downward-function))
		   (tcp-data-available tcb)))
	 #||
	 (when tcb
	   (setf (tcb-reading-process tcb) nil))
	 ||#))
  1;; Check it after waiting (it could have gone away).
0  (when (null tcb)
    (error 'tcp-stream-closed :attempt "read from" :stream self))
  (multiple-value-bind (seg start limit)
      (get-next-read-segment tcb)
    (setq input-seg seg)
    (if seg
	(make-fast-sub-packet seg start limit (send self :array-type))
	(case (tcb-state tcb)
	  ((:established :fin-wait-1 :fin-wait-2)
	   (values nil nil nil nil))
	  ((:close-wait :time-wait) (values nil nil nil t))
	  (otherwise (bad-tcp-connection-state tcb "get data from"))))))

(defmethod (:discard-input-buffer tcp-input-stream-mixin) (seg)
  (when (not (eq (neti:sub-packet-packet seg) (neti:sub-packet-packet input-seg)))
    (tcp-implementation-error nil
      "Segment to discard, ~S, is not the input segment ~S" seg input-seg))
  (return-tcp-segment (prog1 input-seg (setq input-seg nil))))



;;; output side

(defflavor tcp-output-stream-mixin
	((output-seg nil)
	 output-seg-start-idx)
	(si:output-stream-exception-mixin)
  (:required-flavors basic-tcp-stream si:basic-buffered-output-stream))
(defmethod (stream-writing-process tcp-output-stream-mixin) ()
  (tcb-writing-process tcb))
(defmethod ((setf stream-writing-process) tcp-output-stream-mixin) (process)
  (setf (tcb-writing-process tcb) process))
(defmethod (:new-output-buffer tcp-output-stream-mixin) ()
  1;; Check to see if we have a tcb first
0  (when (null tcb)
    (error 'tcp-stream-closed :attempt "write to" :stream self))
  1;; Now, set the process and block.
0  (setf (tcb-writing-process tcb) *current-process*)
  (si:stream-output-exception-block
    self "TCP Out"
    #'(lambda ()
	(declare (sys:downward-function))
	(tcp-output-allowed-p tcb)))		1;This checks for the tcb disappearing
0  1;; Check for the tcb again since it might have gone away
0  (when (null tcb)
    (error 'tcp-stream-closed :attempt "write to" :stream self))
  1;; Check for bad state
0  (unless (member (tcb-state tcb) '(:established :close-wait))
    (bad-tcp-connection-state tcb "send a segment to"))
  1;; Everything seems OK, get a segment and return it.
0  (multiple-value-bind (seg start limit)
      (get-output-segment tcb)
    (setq output-seg seg)
    (multiple-value-bind (nseg nstart nlimit)
	(make-fast-sub-packet seg start limit (send self :array-type))
      (setq output-seg-start-idx nstart)
      (values nseg nstart nlimit))))

(defmethod (:send-output-buffer tcp-output-stream-mixin) (seg limit explicit)
  (when (null tcb)
    (error 'tcp-stream-closed :attempt "write to" :stream self))
  (unless (eq (neti:sub-packet-packet seg) (neti:sub-packet-packet output-seg))
    (tcp-implementation-error nil
      "Segment to output, ~S, is not the output segment ~S" seg output-seg))
  (incf (seg-length output-seg) (- limit output-seg-start-idx))
  (send-data-segment tcb (prog1 output-seg (setq output-seg nil)) explicit))

(defmethod (:discard-output-buffer tcp-output-stream-mixin) (seg)
  (unless (eq (neti:sub-packet-packet seg) (neti:sub-packet-packet output-seg))
    (tcp-implementation-error nil
      "Segment to output, ~S, is not the output segment ~S" seg output-seg))
  (without-interrupts
    (let ((oseg output-seg))
      (setq output-seg nil)
      (if (eq (seg-output-state oseg) :tcb-and-user)
	  (setf (seg-output-state oseg) :tcb-only)
	(return-tcp-segment oseg)))))
(defmethod (:finish tcp-output-stream-mixin) ()
  (setf (tcb-writing-process tcb) *current-process*)
  (si:stream-output-exception-block
    self "TCP Finish"
    #'(lambda ()
	(declare (sys:downward-function))
	(tcp-finished-p tcb)))
  (when (null tcb)
    (error 'tcp-stream-closed :attempt "write to" :stream self))
  (unless (member (tcb-state tcb) '(:established :close-wait))
    (bad-tcp-connection-state tcb "send a segment to")))

(defmethod (:eof tcp-output-stream-mixin) ()
  (when (null tcb)
    (error 'tcp-stream-closed :attempt "write to" :stream self))
  (send self :force-output)
  (send-fin-for-tcb tcb (get-tcp-segment tcb)))

;; Real flavors

(defflavor tcp-binary-stream ()
	   (tcp-input-stream-mixin tcp-output-stream-mixin basic-tcp-stream
	    si:buffered-binary-stream
	    si:unsigned-byte-8-with-character-io-mixin))

(defflavor tcp-binary-ascii-stream ()
	   (tcp-input-stream-mixin tcp-output-stream-mixin basic-tcp-stream
	    si:buffered-binary-stream
	    si:unsigned-byte-8-with-character-io-mixin))

(defflavor tcp-binary-unix-stream ()
	   (tcp-input-stream-mixin tcp-output-stream-mixin basic-tcp-stream
	    si:buffered-binary-stream
	    unsigned-byte-8-with-unix-character-io-mixin))

(defflavor tcp-character-stream ()
	   (tcp-input-stream-mixin tcp-output-stream-mixin basic-tcp-stream
	    si:buffered-character-stream))

(defmethod (:array-type tcp-character-stream) () 'sys:art-string)

(defflavor tcp-ascii-stream ()
	   (si:bidirectional-stream
	    
	    si:ascii-translating-buffered-input-stream-mixin
 	    tcp-input-stream-mixin
 	    si:buffered-line-input-stream
 
 	    si:ascii-translating-output-stream-mixin
 	    tcp-output-stream-mixin
 	    si:buffered-tyo-output-stream

	    basic-tcp-stream))
(defflavor tcp-unix-stream ()
	   (si:bidirectional-stream
	    
	    unix-translating-buffered-input-stream-mixin
 	    tcp-input-stream-mixin
 	    si:buffered-line-input-stream
 
 	    unix-translating-buffered-output-stream-mixin
 	    tcp-output-stream-mixin
 	    si:buffered-output-character-stream

	    basic-tcp-stream))
(compile-flavor-methods tcp-binary-stream tcp-binary-ascii-stream tcp-binary-unix-stream
			tcp-character-stream tcp-ascii-stream tcp-unix-stream)
(defun make-tcp-stream
       (tcb &key (characters t) ascii-translation translation &allow-other-keys)
  (when ascii-translation
    (setf translation :ascii))
  (unwind-protect
      (let ((stream (make-instance (if characters
				       (ecase translation
					 (:ascii 'tcp-ascii-stream)
					 (:unix 'tcp-unix-stream)
					 ((nil) 'tcp-character-stream))
				       (ecase translation
					 (:ascii 'tcp-binary-ascii-stream)
					 (:unix 'tcp-binary-unix-stream)
					 ((nil) 'tcp-binary-stream)))
				   :tcb tcb)))
	(setf (tcb-user-stream tcb) stream)
	(setq tcb nil)				;in case make-instance errs
	stream)
    (when tcb (abort-tcb tcb))))
;(export 'open-tcp-stream)
(defun open-tcp-stream (host port local-port &rest keys
			&key (timeout *tcp-connect-timeout*) &allow-other-keys)
  (declare (arglist host port local-port &key (timeout *tcp-connect-timeout*) direction
		    (characters t) ascii-translation translation))
  (declare (values tcp-stream))
  (net:with-connection-retrying
    (host (format nil "TCP ~D~@[(~S)~]" port (tcp-port-protocol-name port)) try-reason)
    (case try-reason
      (:longer-timeout (setf timeout (* 2 (or timeout *tcp-connect-timeout*))))
      (:wait-indefinitely (setf timeout nil)))
    (apply #'make-tcp-stream (open-tcb t host port local-port :timeout timeout) keys)))
;(export 'tcp-listen)
(defun tcp-listen (host port local-port &rest keys
		   &key (wait-for-syn t) (timeout nil) (accept-p t) &allow-other-keys)
  (declare (arglist host port local-port &key (timeout nil) (wait-for-syn t) (accept-p t)
		    direction (characters t) ascii-translation translation))
  (declare (values tcp-stream))
  (let ((tcb (open-tcb nil host port local-port
		       :wait-for-syn wait-for-syn
		       :timeout timeout)))
    (when (and wait-for-syn accept-p)
      (when (and (eq (tcb-state tcb) :listen)
		 (tcb-initial-receive-seq tcb))	;syn has arrived
	(accept-tcb tcb))
      (tcb-travel-through-states tcb "Accept" nil :listen :syn-received))
    (apply #'make-tcp-stream tcb keys)))



;;; New server system

(defun (:tcp neti:reject-function) (reason tcb)
  reason
  (reject-tcb tcb))

(defun (:property :tcp neti:byte-stream-function)  (tcb &rest keys)
  (apply #'make-tcp-stream tcb keys))
