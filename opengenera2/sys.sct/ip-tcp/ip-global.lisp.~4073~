;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Lowercase: Yes; -*-
;; Internet Protocol Global Definitions
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Data Macros

(defmacro ip-load-16 (array offset)
  `(neti:put-together-bytes :big ,array ,offset 2))

(defmacro ip-store-16 (value array offset &environment env)
  (once-only (offset &environment env)
    `(neti:fill-in-bytes :big ,array ,offset ,value 2 nil)))

(defmacro ip-load-32 (array offset)
  `(neti:put-together-bytes #-cadr :fixnum-big #+cadr :big ,array ,offset 4))

(defmacro ip-store-32 (value array offset &environment env)
  (once-only (offset &environment env)
    `(neti:fill-in-bytes #-cadr :fixnum-big #+cadr :big ,array ,offset ,value 4 nil)))

  ;;
;;;;;;  Helper macros for the fields.  These are needed because TCP is a
;;;;;;  big-ender protocol and the Lisp Machine is little ender. 
;;;;;;  This may go away if LMFS:DEFSTORAGE gets extended.
  ;;

(eval-when (compile load eval)
  (defun get-structure-offset (structure start-slot)
    (declare lt:(side-effects reducible))
    (let* ((desc (or (get structure 'si:defstruct-description)
		     (error "Structure ~S not defined." structure)))
	   (slots (si:defstruct-description-slot-alist desc))
	   (slot (or (assoc start-slot slots)
		     (error "~S is not a slot of ~S." start-slot structure)))
	   (slot-desc (cdr slot))
	   (offset (si:defstruct-slot-description-number slot-desc)))
      offset))
  )

(defmacro get-structure-offset-inline (structure start-slot)
  `',(get-structure-offset structure start-slot))

(defmacro load-structure-bytes (segment structure start-slot nbytes)
  `(neti:put-together-bytes #-cadr :fixnum-big #+cadr :big ,segment
			    ,(get-structure-offset structure start-slot) ,nbytes))

(defmacro deposit-structure-bytes (segment structure start-slot nbytes number)
  `(neti:fill-in-bytes #-cadr :fixnum-big #+cadr :big ,segment
		       ,(get-structure-offset structure start-slot) ,number ,nbytes nil))

(defmacro define-structure-substs (structure &body fields)
  `(eval-when (compile load eval)	  
     ,@(loop for (name start-slot nbytes) in fields
	     collect `(proclaim '(inline ,name))
	     collect `(defun ,name (seg)
			(load-structure-bytes seg ,structure ,start-slot ,nbytes))
	     collect `(defsetf ,name (seg) (val)
			`(deposit-structure-bytes ,seg ,',structure ,',start-slot ,',nbytes ,val)))))

;;; Constants

(defconstant *icmp-protocol-number* 1)
(defconstant *egp-protocol-number* 8)

;;; Parameters

;(export '*ip-default-max-packet-size*)
(defparameter *ip-default-max-packet-size* 576
  "The maximum length of an IP datagram unless otherwise specified.")

;(export '*background-interval*)
(defparameter *background-interval* (* 60 60)
  "The sleep interval for the IP background process.")

;;; Variables

;(export '*ip-debug-flag*)
(defvar *ip-debug-flag* nil
  "T to enable IP error notifications.")



;;; Errors

(defflavor internet-error ((network)) (net:network-error)
  :abstract-flavor
  (:gettable-instance-variables network)
  (:initable-instance-variables network))

(defmethod (:network-type internet-error) () :internet)



;;; Data Structures

;; INTERFACE: How to get out of the local machine.

(defstruct (ip-interface :named)
  instance					;the actual interface instance
  local-address					;local address on that interface
  prime-gateways				;list of gateways accessible through interface
  max-packet-size				;MTU for this interface
  subnet-number					;number of subnet interface is on
  subnet					;the IP-SUBNET for this subnet
  mask						;the address mask for this subnet
  dynamic-p
  spare)

;; ROUTE: How to get to some other host.

(defstruct (ip-route :named)
  ip						;the IP-PROTOCOL instance
  foreign-host					;the host object, or NIL if unknown
  foreign-addresses				;list of addresses on this network
						;Variable routing information follows
  source					;on what this route is based
  interface					;the IP-INTERFACE to use
  gateway-address				;address of the gateway to use,
						;or NIL if it is local.
  (pkts-in 0)					;meters
  (pkts-out 0)
  max-packet-size				;bytes per packet to this host
  spare)

;; SUBNET: How to get to some particular other subnet.

(defstruct (ip-subnet :named)
  ip						;the IP-PROTOCOL
  number					;number of this subnet
  interface					;the interface to use for local subnets
  gateways					;good IP-GATEWAY's
  spare)

;; GATEWAY: Information about a gateway we are using.

(defstruct (ip-gateway :named
		       (:include ip-route))
  dead						;NIL if gateway is alive
						;otherwise why not
  time-last-alive				;last time we pinged it successfully
  time-last-pinged				;last time we asked for a response
  desirability					;relative desirability (0 to 1, or NIL)
  ip-gateway-spare)

;; PROTOCOL: Information about a higher-level protocol.

(defstruct internal-ip-protocol
  instance					;the protocol instance itself
  structure-symbol				;named structure symbol and leader length
  leader-size)					;for packets passed to the protocol

;; HEADER: The internet protocol packet header.

(defconstant internet-header-version-number 4)

(zl:defstruct (ip-header (:conc-name ip-header-)
			 (:alterant nil)
			 (:constructor nil)
			 :size-symbol)
  ((version #o0404)
   (ihl #o0004))
  type-of-service
  length-high length-low
  identification-high identification-low
  ((mbz #o0701)
   (dont-fragment #o0601)
   (more-fragments #o0501)
   (fragment-offset-high #o0005))
  fragment-offset-low
  time-to-live
  protocol
  checksum-high checksum-low
  source-1 source-2 source-3 source-4
  destination-1 destination-2 destination-3 destination-4)

(defmacro alter-ip-header
	  (item &rest keys-and-values)
  `(progn
     ,@(loop for (key value . nil) on keys-and-values by #'cddr	
	     collect `(setf (,(intern
				(string-append "IP-HEADER-" key))
			     ,item)
			    ,value))))

;; Define the 16-bit fields.

(define-structure-substs ip-header
  (ip-header-length length-high 2)
  (ip-header-identification identification-high 2))

;; and the complex ones.

(defsubst ip-header-fragment-offset (ip)
  (dpb (ip-header-fragment-offset-high ip) (byte 5 8) (ip-header-fragment-offset-low ip)))

(defsubst set-ip-header-fragment-offset (ip fragment-offset)
  (setf (ip-header-fragment-offset-high ip) (lsh fragment-offset -8))
  (setf (ip-header-fragment-offset-low ip) (ldb (byte 8 0) fragment-offset)))

(defsubst ip-header-source (ip)
  (load-internet-address ip 12))

(defsubst ip-header-destination (ip)
  (load-internet-address ip 16))

;; REASSEMBLY-NODE: Information about partially reassembled packets.

(defstruct (ip-reassembly-node (:conc-name "IP-RA-"))
  source					;source address
  destination					;(local) destination address
  id						;identification number
  last-pkt-time					;time last fragment arrived
  last-pkt-ttl					;time to live of last fragment
  pkt						;reassembled packet
  header-length					;header length of same
  total-length					;total length of same
  hole-list)					;list of (hole-begin . hole-end)'s.

;; PKT-LOG: Logging of processed packets for debugging.
;; The array itself consists of the first N octets of the packet.

(defstruct (ip-pkt-log :array-leader)
  reserved-1					;fill pointer
  reserved-2					;named structure symbol
  time						;time when logged
  reason)					;reason logged

(defmacro alter-ip-pkt-log
	  (item &rest keys-and-values)
  `(progn
     ,@(loop for (key value . nil) on keys-and-values by #'cddr
	     collect `(setf (,(intern
				(string-append "IP-PKT-LOG-" key))
			     ,item)
			    ,value))))



;;; Packet Management

(defun ip-get-packet (route &optional no-wait-p (type 'sys:art-8b) (offset 0)
		      (leader-length neti:sub-packet-size) named-structure-symbol
		      &aux pkt length)
  (declare (values packet length))
  (let ((interface (and route (ip-route-interface route))))
    (setf pkt (if (and interface (not (symbolp interface))
		       (instancep (ip-interface-instance interface)))
		  (send (ip-interface-instance interface) :allocate-packet (not no-wait-p))
		  (neti:allocate-packet-buffer (not no-wait-p)))))
  (setf length (or neti:*big-packet-size*
		   (and route (ip-route-max-packet-size route))
		   *ip-default-max-packet-size*))
  (when pkt
    (values (neti:get-sub-packet pkt type (+ ip-header-size offset)
				 leader-length named-structure-symbol)
	    (- length ip-header-size offset))))

(defun ip-return-packet (packet)
  (neti:deallocate-packet-buffer packet))



(defvarD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") *secure-subnets*0 nil "A list of the parsed secure subnets from the site object")

(defun 1parse-secure-subnets0 ()
  (let (nets (raw-subnet-info (send neti:*local-site* :secure-subnets)))
    (loop for (net subnet-entries) in raw-subnet-info
	  when (send net :network-typep :internet)
	    do (let ((old-alist-member (assoc net nets))
		     (parsed-subnets (loop for item in subnet-entries
					   when (string-equal item "ALL")
					     do (return '(:all))
					   else
					   as parsed-subnet =
					      (condition-case (error)
						   (parse-internet-address
						     (string-trim #(#\space) item))
						 (error
						   (tv:notify 
						     nil
						     "An error occurred during IP secure ~
                                 initialization: ~a The site object needs fixing." error)
						   nil))
					   when parsed-subnet collect parsed-subnet)))
		 (if old-alist-member
		     (setf (cdr (last (second old-alist-member))) parsed-subnets)
		     (push (list net parsed-subnets) nets))))
    (setq *secure-subnets* nets))) 

(add-initialization "Update Internet Security"
		    '(parse-secure-subnets) '(site normal now))


(defun 1ip-host-trusted-p 0(network address)
  (let ((secure-subnets
	  (if (not (neti:ns-eq net:*local-site* neti:*distribution-site*))
	      (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Easy case
0	      (second (assoc network *secure-subnets*))
	      2;; Much harder, fetch the subnet information from the FEP, if it is there
0	      (let* ((network-data (neti:get-primary-address-entry-of-type :internet))
		     (subnets (and network-data
				   (loop for (option . item)
					in (neti:primary-address-options network-data)
				   when (string-equal option "ip-secure-subnets")
				     return item))))
		(when subnets
		  (loop with subnet-string = (string-trim '(#\space) subnets)
			with start = 0
			as comma-or-end = (position #\, subnet-string :start start)
			as entry = (string-trim '(#\space)
						(substring subnet-string start comma-or-end))
			as parsed-entry = (if (string-equal entry "all")
					      :ALL
					      (condition-case (error)
						   (parse-internet-address entry)
						 (error nil)))
			when parsed-entry
			  collect parsed-entry
			until (null comma-or-end)
			do (setq start (1+ comma-or-end))))))))
    (if secure-subnets
	(loop for subnet in secure-subnets
		   when (or
			  2;;"All", the same address, the same offical network, and the same
0			  2;;subnetted network are all valid.  (:ALL, 128.81.41.7, 128.81.41.0,
			  ;;128.81.0.0)
0			  (eq subnet :all)
			  (compare-internet-address subnet address)
			  (compare-internet-address subnet
						    (internet-subnet-number address 0 network))
			  (compare-internet-address subnet
						    (official-internet-subnet-number address)))
		     return t)
	2;; They didn't specify anything in the FEP and we are at the distribution site, so
	;; allow access to those hosts that are on our IP network
0	(when (neti:ns-eq net:*local-site* neti:*distribution-site*)
	  2;; Only should have one address to worry about in this site
0	  (let ((my-address (loop for (net addr) in (send net:*local-host* :network-addresses)
				  when (neti:ns-eq net network)
				    return addr)))
	    (compare-internet-address
	      (internet-address-mask address address 0)
	      (internet-address-mask my-address my-address 0)))))))


(defmacro ip-notify (severity ctl-string &rest args)
  `(when (or ,severity *ip-debug-flag*)
     (let ((neti:*inhibit-validity-checking*))
       (tv:notify nil ,ctl-string ,@args))))



;;; Checksumming

#+(or 3600 imach)
;; Super high-speed checksum for 3600.
(defun 1ip-compute-checksum 0 (pkt from-idx to-idx source destination pseudo-header)
  (declare (values checksum-high checksum-low))
  (let ((sum 0)
	(carry 0))
    ;; This part knows that Internet addresses are 32-bit fixnums!!!
    ;; Unfortunately, the bytes are in the wrong order.
    (macrolet ((sum-address (address)
		 `(sum-32 (rot ,address 8)))
	       
	       (sum-32 (number)
		 `(multiple-value-setq (sum carry)
		    (sys:%add-bignum-step ,number sum carry))))
      
      (dolist (item pseudo-header)
	(sum-address item))
      (when source
	(sum-address source))
      (when destination
	(sum-address destination)) 
      ;; Now the hard part.
      (let* ((base-offset (si:array-index-offset pkt))
	     (from-byte (+ base-offset from-idx))
	     (to-byte (+ base-offset to-idx))
	     (from-word (ldb (byte 14 2) from-byte))
	     (to-word (ldb (byte 14 2) to-byte))
	     (ptr (sys:%make-pointer-offset sys:dtp-locative
					    (locf (aref (si:array-indirect-to pkt) from-word))
					    -1)))
	
	;; Handle the beginning
	(case (ldb (byte 2 0) from-byte)
	  (2 (sum-32 (ldb (byte 16 16) (sys:%p-contents-increment-pointer ptr)))
	     (incf from-word))
	  (0)
	  (otherwise (error "Invalid starting byte.")))

	;; The loop
	(let ((nwords (- to-word from-word)))
	  (when (plusp nwords)
	    (setq sum (block-checksum sum ptr nwords))
	    (setq ptr (sys:%make-pointer-offset sys:dtp-locative ptr nwords))))

	;; Handle the end
	(case (ldb (byte 2 0) (+ base-offset to-idx))
	  (2 (sum-32 (ldb (byte 16 0) (sys:%p-contents-increment-pointer ptr))))
	  (0)
	  (1 (sum-32 (ldb (byte 8 0) (sys:%p-contents-increment-pointer ptr))))
	  (3 (sum-32 (ldb (byte 24 0) (sys:%p-contents-increment-pointer ptr))))) 
	)
      ;; Reduce to 16 bits
      (setf sum (ldb (byte 16 16) (lognot (progn
					    (setf sum (sys:%32-bit-plus sum carry))
					    (sys:%32-bit-plus sum (rot sum 16)))))) 
      (values (ldb (byte 8 0) sum) (ldb (byte 8 8) sum)))))
#+3600
(defun 1block-checksum 0(sum pointer number-of-words)
  (let ((carry 0)
	(pointer pointer))
    2;; This writes a massive nested group of %add-bignum-step(s) at expansion time.
0    (macrolet ((unrolled-sum (unrolling-count)
		 (if (eql unrolling-count 1)
		     `(sys:%add-bignum-step
			(sys:%p-contents-increment-pointer pointer) sum carry)
		     `(sys:%multiple-value-call-n
			sys:%add-bignum-step
			,`(unrolled-sum ,(1- unrolling-count))
			2
			(values (sys:%p-contents-increment-pointer pointer)) 1))))
      2;; Unroll the loop as much as possible (128 words) and unroll the remaining < 128 words
0      2;; as much as possible too.  We pay a small price for the bit tests in order to unroll
0      2;; the loop more.
0      (loop repeat (ldb (byte 14 7) number-of-words) do
	(multiple-value-setq (sum carry)
	  (unrolled-sum 128)))
      (when (plusp (ldb (byte 1 6) number-of-words))
	(multiple-value-setq (sum carry)
	  (unrolled-sum 64)))
      (when (plusp (ldb (byte 1 5) number-of-words))
	(multiple-value-setq (sum carry)
	  (unrolled-sum 32)))
      (when (plusp (ldb (byte 1 4) number-of-words))
	(multiple-value-setq (sum carry)
	  (unrolled-sum 16)))
      (when (plusp (ldb (byte 1 3) number-of-words))
	(multiple-value-setq (sum carry)
	  (unrolled-sum 8)))
      (when (plusp (ldb (byte 1 2) number-of-words))
	(multiple-value-setq (sum carry)
	  (unrolled-sum 4)))
      (when (plusp (ldb (byte 1 1) number-of-words))
	(multiple-value-setq (sum carry)
	  (unrolled-sum 2)))
      (when (plusp (ldb (byte 1 0) number-of-words))
	(multiple-value-setq (sum carry)
	  (unrolled-sum 1)))
      (setq sum (sys:%32-bit-plus sum carry))	2;Add in any stray carry that may be around
0      )))

#+imach
(defun 1block-checksum 0(sum pointer number-of-words)
  (si:with-block-registers (1)
    (let ((carry 0))
      (setf (sys:%block-register 1) (sys:%pointer-plus pointer 1))
      2;; This writes a massive nested group of %add-bignum-step(s) at expansion time.
0      (if (< sys:(%read-internal-register %register-chip-revision) 4)
	  2;;Unrolled loop using %add-bignum-step for pre-rev 4 Ivory
0	  (macrolet ((unrolled-sum (unrolling-count)
		       (if (eql unrolling-count 1)
			   `(sys:%add-bignum-step
			      (sys:%block-read 1 :fixnum-only t) sum carry)
			   `(sys:%multiple-value-call-n
			      sys:%add-bignum-step
			      ,`(unrolled-sum ,(1- unrolling-count))
			      2
			      (values (sys:%block-read 1 :fixnum-only t)) 1))))
	    2;; Unroll the loop as much as possible (64 words) and unroll the remaining < 64
0	    2;; words as much as possible too.  We pay a small price for the bit tests in order
0	    2;; to unroll the loop more.
0	    (loop repeat (ldb (byte 15 6) number-of-words) do
	      (multiple-value-setq (sum carry)
		(unrolled-sum 64)))
	    (when (plusp (ldb (byte 1 5) number-of-words))
	      (multiple-value-setq (sum carry)
		(unrolled-sum 32)))
	    (when (plusp (ldb (byte 1 4) number-of-words))
	      (multiple-value-setq (sum carry)
		(unrolled-sum 16)))
	    (when (plusp (ldb (byte 1 3) number-of-words))
	      (multiple-value-setq (sum carry)
		(unrolled-sum 8)))
	    (when (plusp (ldb (byte 1 2) number-of-words))
	      (multiple-value-setq (sum carry)
		(unrolled-sum 4)))
	    (when (plusp (ldb (byte 1 1) number-of-words))
	      (multiple-value-setq (sum carry)
		(unrolled-sum 2)))
	    (when (plusp (ldb (byte 1 0) number-of-words))
	      (multiple-value-setq (sum carry)
		(unrolled-sum 1)))
	    (setq sum (sys:%32-bit-plus sum carry))	2;Add in any stray carry that may be around
0	    )
	  2;; Rev 4 Ivory supports block-alu one's complement addition
0	  (progn
	    (sys:set-alu-and-rotate-control :function sys:(%alu-function-add %alu-add-op2
									     %alu-add-op2-pass
									     0)
					    :enable-condition-exception 0
					    :enable-load-carry-in 1)
	    (sys:unroll-block-forms (number-of-words 32)
	      (sys:%block-read-alu 1 sum))
2	    ;; Handle the final carry, if any
0	    (setq sum (sys:%alu sum 0)))
	  ))))
;; This is the original "fast" checksum computation.
;; This should be "machine-independent".
;; It has some hope of working on LM-2's.
#-(or 3600 imach)
(defun ip-compute-checksum (pkt from-idx to-idx source destination pseudo-header)
  (declare (values checksum-high checksum-low))
  (let ((pkt-16 (neti:get-sub-packet pkt 'sys:art-16b 0))
	(from-16 (ash from-idx -1))
	(to-16 (ash to-idx -1))
	(sum 0)
	(sum-high 0))
    (loop for i from from-16 below to-16
	  do (incf sum (aref pkt-16 i)))
    ;; from-idx is never odd
    (when (oddp to-idx)
      (incf sum (aref pkt (1- to-idx))))
    (when source
      (multiple-value-bind (b1 b2 b3 b4)
	  (explode-internet-address source)
	(incf sum (+ b1 b3))
	(incf sum-high (+ b2 b4))))
    (when destination
      (multiple-value-bind (b1 b2 b3 b4)
	  (explode-internet-address destination)
	(incf sum (+ b1 b3))
	(incf sum-high (+ b2 b4))))
    (loop for pseudo-item in pseudo-header
	  do (incf sum-high pseudo-item))
    (incf sum (ash sum-high 8))
    (loop while (>= sum 1_16)
	  do (setq sum (+ (ash sum -16) (ldb (byte 16 0) sum))))
    (setq sum (logxor #X+FFFF sum))
    (if (zerop sum)				;always send -0 for +0.
	(values 255 255)
	(values (ldb (byte 8 0) sum) (ldb (byte 8 8) sum)))))

#||
(defun test-checksum (n)
  (let ((pkt nil))
    (unwind-protect
	(progn
	  (setf pkt (neti:allocate-packet-buffer))
	  (let ((src (random 1_30)) (dst (random 1_30)) (ps '(1 2 3)))
	    (dotimes (i n)
	      (setf (aref pkt i) (random 255)))
	    (multiple-value-bind (old-l old-h)
		(ip-compute-checksum pkt 0 n src dst ps)
	      (multiple-value-bind (new-l new-h)
		  (xip-compute-checksum pkt 0 n src dst ps)
		(unless (and (= old-l new-l) (= old-h new-h))
		  (break))))))
      (when pkt
	(neti:deallocate-packet-buffer pkt)))))
||#
(defun ip-set-checksum-dont-care (pkt from-idx check-idx to-idx
				  &optional source destination &rest pseudo-header)
  (neti:with-network-packet (pkt)
    (setf (aref pkt check-idx) 0)		;clear checksum field
    (setf (aref pkt (1+ check-idx)) 0)
    (multiple-value-bind (high low)		;compute checksum
	(ip-compute-checksum pkt from-idx to-idx source destination pseudo-header)
      (when (and (zerop high) (zerop low))
	(setq high (1- 1_8) low (1- 1_8)))
      (setf (aref pkt check-idx) high)		;store it
      (setf (aref pkt (1+ check-idx)) low))))
(defun ip-set-checksum (pkt from-idx check-idx to-idx
			&optional source destination &rest pseudo-header)
  (neti:with-network-packet (pkt)
    (setf (aref pkt check-idx) 0)		;clear checksum field
    (setf (aref pkt (1+ check-idx)) 0)
    (multiple-value-bind (high low)		;compute checksum
	(ip-compute-checksum pkt from-idx to-idx source destination pseudo-header)
      (setf (aref pkt check-idx) high)		;store it
      (setf (aref pkt (1+ check-idx)) low))))
;;; returns T if the checksum is bad, NIL if it is OK.
;;; It is the one's complement sum that should be -0 (#xFFFF) if checksum is correct, but
;;; since compute-checksum complements that sum, we have to check for +0.
(defun ip-check-checksum (pkt from-idx check-idx to-idx
				    &optional source destination &rest pseudo-header)
  (declare (values t-for-bad-nil-for-ok))
  check-idx					;unused
  (or (< to-idx from-idx)			;make sure args are valid
      (multiple-value-bind (high low)		;compute checksum
	  (ip-compute-checksum pkt from-idx to-idx source destination pseudo-header)
	(not (and (zerop high) (zerop low))))))
;;; returns T if the checksum is bad, NIL if it is OK.
;;; It is the one's complement sum that should be -0 (#xFFFF) if checksum is correct, but
;;; since compute-checksum complements that sum, we have to check for +0.
;;; This is identical to IP-CHECK-CHECKSUM, but is provided for symmetry with 
;;; IP-SET-CHECKSUM-DONT-CARE.  
(defun ip-check-checksum-dont-care (pkt from-idx check-idx to-idx
				    &optional source destination &rest pseudo-header)
  (declare (values t-for-bad-nil-for-ok))
  check-idx					;unused
  (or (< to-idx from-idx)			;make sure args are valid
      (multiple-value-bind (high low)		;compute checksum
	  (ip-compute-checksum pkt from-idx to-idx source destination pseudo-header)
	(not (and (zerop high) (zerop low)))))) ; had better come out to be +0 (the 
						; complement of -0)


;;; Protocols

(defvar *ip-protocol-alist* nil "Alist of IP protocol numbers to implementation flavors")

(defmacro define-ip-protocol (number flavor &optional message-list possible-media-function)
  `(progn (define-ip-protocol-1 ,number ',flavor ',possible-media-function)
	  ,@(loop for message in message-list
		  collect `(defmethod (,message internet-network) (&rest args)
			     (unless ip-protocol (error "Network not enabled."))
			     (lexpr-send ip-protocol ,message args))
		  collect `(defmethod (,message ip-protocol) (&rest args)
			     (lexpr-send (internal-ip-protocol-instance (aref protocol-array
									      ,number))
					 ,message args)))))

(defun define-ip-protocol-1 (number flavor possible-media-function)
  (let ((entry (assoc number *ip-protocol-alist*)))
    (when entry (setq *ip-protocol-alist* (delete entry *ip-protocol-alist*))))
  (push (list number flavor possible-media-function) *ip-protocol-alist*))

(defflavor ip-protocol-mixin
	((pkts-in 0)				;meters
	 (pkts-out 0)
	 network				;actually the IP-PROTOCOL
	 protocol-number)			;the protocol number
	()
  :abstract-flavor
  :gettable-instance-variables
  (:required-methods :protocol-name :receive-ip-packet)
  (:initable-instance-variables network protocol-number))

;;; Defaults for all the messages,

(defmethod (:background ip-protocol-mixin) ())

(defmethod (:disable ip-protocol-mixin) ())

(defmethod (:display-ip-packet ip-protocol-mixin) (ignore ignore ignore ignore stream ignore)
  (format stream " ~A" (send self :protocol-name)))

(defmethod (:enable ip-protocol-mixin) ())

(defmethod (:note-destination-unreachable ip-protocol-mixin)
	   (ignore ignore ignore ignore ignore))

(defmethod (:note-source-quench ip-protocol-mixin) (ignore ignore ignore ignore))

(defmethod (:packet-buffer-panic ip-protocol-mixin) ())

(defmethod (:packet-leader-size ip-protocol-mixin) () neti:sub-packet-size)

(defmethod (:packet-structure-symbol ip-protocol-mixin) () nil)

(defwhopper (:peek ip-protocol-mixin) ()
  (list ()
	(tv:scroll-parse-item
	  (format nil "~A (~D)" (send self :protocol-name) protocol-number)
	  `(:function ,#'send (,self :pkts-in) nil ("  packets in: ~5D"))
	  `(:function ,#'send (,self :pkts-out ) nil ("  packets out: ~5D")))
	(continue-whopper)))

(defmethod (:peek ip-protocol-mixin) () ())
(defmethod 1(reset-meters ip-protocol-mixin0 1:before)0 ()
  (setf pkts-in 0)
  (setf pkts-out 0))

(defmethod (:receive-ip-packet ip-protocol-mixin :before) (ignore ignore ignore ignore)
  (incf pkts-in))

(defmethod (:reset ip-protocol-mixin) ())

(defmethod (:transmit-ip-packet ip-protocol-mixin)
	   (pkt length route source destination free-flag)
  (incf pkts-out)
  (send network :transmit-packet pkt length protocol-number
	route source destination free-flag))

;;; Address hashing

(defun make-internet-address-hash-table ()
  #+(or 3600 imach) (make-hash-table :test #'eql :locking :without-interrupts :ignore-gc t)
  #-(or 3600 imach) (make-hash-table :test #'compare-internet-address :locking :without-interrupts))

;;; The IP protocol itself

(defflavor ip-protocol
	((enabled)
	 (initialized)
	 (routing-initialized)
	 network				;the INTERNET-NETWORK
	 (protocol-array (make-array 256))
						;IP-PROTOCOL structures
	 (interface-list)			;IP-INTERFACE structures
	 (gateway-hash-table (make-internet-address-hash-table))
						;IP-GATEWAY structures by address
	 (subnet-hash-table (make-internet-address-hash-table))
						;IP-SUBNET structures by subnet number
	 (route-hash-table (make-internet-address-hash-table))
						;IP-ROUTE structures by foreign address
1	 0(mask-hash-table (make-internet-address-hash-table))
						;subnet masks by subnet
	 (gateway-type)				;what kind of gateway are we?
	 (default-gateway)			2;The default-internet-gateway in the host obj.
0	 (default-network)			2;The default-routing-network from the net.
0	 (background-timer)

	 (reassembly-nodes)			;IP-REASSEMBLY-NODE structures

	 (pkts-received 0)			;meters
	 (pkts-transmitted 0)
	 (pkts-in 0)
	 (pkts-out 0)
	 (pkts-routed 0)
	 (errors)

	 (recent-headers)			;array of recent headers for debugging
	 (recent-header-ptr)			;current pointer into above

	 (local-addresses nil)			2;List of our local addresses
0	 (local-route nil)			2;The route object to the local host

0	 (last-host nil)			2;Cache of the last host we talked to
0	 (last-host-route nil)			2;The corresponding route
0	 2;;Ditto for the last address
0	 (last-address 0)
	 (last-address-route nil)
	 )
	()
  :gettable-instance-variables
  (:initable-instance-variables network)
  (:readable-instance-variables routing-initialized)
  (:functions background-enable background-disable))

(defun-in-flavor (internet-subnet-number-internal ip-protocol) (address &optional (pad 0))
  ;; The "real" definition of internet-subnet-number.  Takes subnet masks into
  ;; account.
  ;; First check for addresses directly on any of our interfaces
  (loop for interface in interface-list
	with official-subnet-mask = (internet-address-mask address -1 0)
	with official-subnet-number = (logand address official-subnet-mask)
	when (compare-internet-address
	       (logand (ip-interface-subnet-number interface) official-subnet-mask)
	       official-subnet-number)
	  return (if (zerop pad)
		     (logand address (ip-interface-mask interface))
		     (logior
		       (logand address (ip-interface-mask interface))
		       (logand (lognot (ip-interface-mask interface)) -1)))
	finally (return
		  ;; Next check for address masks in network namespace object
		  (loop 
	for (caddress mask) in (tcp::ip-get-subnet-masks)
	when (compare-internet-address
	       (logand mask address)
	       caddress)
	  return (if (zerop pad)
		     (logand address mask)
		     (logior
		       (logand address mask)
		       (logand (lognot mask) -1)))
	finally ;;finally give up and use official mask
	  (return official-subnet-number)))))

(defmethod (:internet-subnet-number ip-protocol) (address &optional (pad 0))
  ;; The external entry point for internet-subnet-number-internal.
  (internet-subnet-number-internal address pad))

2;;; This looks at an address and returns T if it is a broadcast of any form
;;; (255.255.255.255, X.Y.Z.0, X.Y.Z.255, and others based on odd subnet masks)
0(defmethod (ip-possible-broadcast-address-p ip-protocol) (address route)
  2;;If we have a route, we can see if this has something to do with a subnet mask.
0  (let ((interface (ip-route-interface route)))
    (or (eq interface :broadcast)
	(if interface
	    (let* ((subnet-number (ip-interface-subnet-number interface))
		   (mask (gethash subnet-number mask-hash-table)))
	      (if mask
		  (eql (logior mask address) *ip-broadcast-address*))))
	(eql (ldb (byte 8 0) address) 255)
	(eql (ldb (byte 8 0) address) 0)
	(compare-internet-address address *ip-broadcast-address*))))
(defmethod 1(reset-meters ip-protocol)0 ()
  (loop for protocol being the array-elements of protocol-array
	when protocol
	  do (reset-meters (internal-ip-protocol-instance protocol)))
  (setf pkts-received 0
	pkts-transmitted 0
	pkts-in 0
	pkts-out 0
	pkts-routed 0))


;;; Network Definitions

(defun (:udp net:define-server) (options)
  (let ((argument-list nil)
	(argument-descriptions nil)
	(property-list nil))
    (loop for (indicator value) on options by 'cddr
	  do (case indicator
	       (:connection
		(push value argument-list)
		(push :connection argument-descriptions))))
    (values (nreverse argument-list) (nreverse argument-descriptions)
	    property-list '(:connection))))

2;;; This asks the burning question, "Is this host on a network that I can talk to?"
;;; It returns our local network that we use to talk to him if our net is either EQ to his
;;; net or our global-network-name matches his global-network-name.
0(defun ip-network-for-host (host)
  (let ((local-net (neti:local-network-of-type :internet)))
    (or (loop for (net) in (send host :address)
	    when (neti:network-eql local-net net)
	      return local-net)
      (error "Host ~A is not on any local Internet." host))))

(defsubst 1internet-network-eql 0(network1 network2)
  (and (send network1 :network-typep :internet)
       (send network2 :network-typep :internet)
       (neti:network-eql network1 network2)))
(defmacro 1map-ip-addresses 0(host network function &rest other-args)
  `(loop for (.net. .addr.) in (send ,host :network-addresses)
	 when (internet-network-eql .net. ,network)
	   do (funcall ,function .addr. ,@other-args)))
2;;; Warning!  This conses.  Use only when necessary.
0(defmacro 1host-ip-addresses 0(host &optional (network (neti:local-network-of-type :internet)))
  `(loop for (net addr) in (send ,host :network-addresses)
	 when (internet-network-eql net ,network)
	   collect addr))
