;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;; Exterior Gateway Protocol (RFC 904)

;; Data Structures

(defstruct (egp-neighbor (:conc-name "EGP-N-") :named)
  address
  local-address
  route
  (state :idle)
  system
  (sequence 0)
  hello-interval
  poll-interval
  (last-hello-sent-seq -1)
  (last-hello-sent-time 0)
  (n-lost-hellos 0)
  (last-hello-received-time 0)
  (last-poll-sent-seq -1)
  (last-poll-sent-time 0)
  (last-poll-received-time 0))

;; Packet Formats

(defstruct (egp-header :conc-name
		       (:constructor nil)
		       :size-symbol)
  version
  type
  code
  info
  checksum-high
  checksum-low
  system-high
  system-low
  sequence-high
  sequence-low)

(define-structure-substs egp-header
  (egp-header-system system-high 2)
  (egp-header-sequence sequence-high 2))

(defconstant egp-version-number 2)

(defstruct (egp-na :conc-name
		   (:include egp-header)
		   (:constructor nil)
		   :size-symbol)
  hello-interval-high
  hello-interval-low
  poll-interval-high
  poll-interval-low)

(define-structure-substs egp-na
  (egp-na-hello-interval hello-interval-high 2)
  (egp-na-poll-interval poll-interval-high 2))

(defstruct (egp-poll :conc-name
		     (:include egp-header)
		     (:constructor nil)
		     :size-symbol)
  interior-gateways
  exterior-gateways
  source-1
  source-2
  source-3
  source-4)

(defmacro egp-poll-source (egp)
  `(load-internet-address ,egp ,(get-structure-offset 'egp-poll 'source-1)))

(defstruct (egp-error :conc-name
		   (:include egp-header)
		   (:constructor nil)
		   :size-symbol)
  reason-high
  reason-low)

(define-structure-substs egp-error
  (egp-error-reason reason-high 2))

;;;

(defmacro egp-transmit (neighbor type code info length &body body)
  `(let ((response (ip-get-packet (egp-n-route ,neighbor))))
     (setf (egp-header-version response) egp-version-number)
     (setf (egp-header-type response) ,type)
     (setf (egp-header-code response) ,code)
     (setf (egp-header-info response) ,info)
     (setf (egp-header-system response) my-system)
     (setf (egp-header-sequence response) (incf (egp-n-sequence ,neighbor)))
     (progn ,@body)
     (ip-set-checksum response 0 4 ,length)
     (send self :transmit-ip-packet response ,length (egp-n-route ,neighbor)
	   (egp-n-local-address ,neighbor) (egp-n-address ,neighbor) t)))

(defmacro egp-respond (source destination type code info sequence length &body body
		       &environment env)
  (once-only (source length &environment env)
    `(let* ((route (send network :route-to-address ,source))
	    (response (ip-get-packet route t)))
       (when response
	 (setf (egp-header-version response) egp-version-number)
	 (setf (egp-header-type response) ,type)
	 (setf (egp-header-code response) ,code)
	 (setf (egp-header-info response) ,info)
	 (setf (egp-header-system response) my-system)
	 (setf (egp-header-sequence response) ,sequence)
	 (progn ,@body)
	 (ip-set-checksum response 0 4 ,length)
	 (send self :transmit-ip-packet response ,length route
	       ,destination ,source t)))))

;;;

(defflavor egp-protocol
	((neighbor-hash-table (make-internet-address-hash-table))
	 (my-system 0)
	 (my-hello-interval 30)
	 (my-poll-interval 120)
	 (checksum-errors 0)
	 (format-errors 0)
	 (errors-out 0))
	(ip-protocol-mixin)
  :gettable-instance-variables)

(defmethod (:protocol-name egp-protocol) () "EGP")

(defmethod (:packet-structure-symbol egp-protocol) () 'egp-header)

(defmethod (:reset egp-protocol) ()
  (clrhash neighbor-hash-table))

;;; Utilities

(defun egp-host-bytes (b1)
  (cond ((< b1 #X+80) 3)
	((< b1 #X+C0) 2)
	((< b1 #X+E0) 1)
	(t (error "Class D address?"))))

(defun egp-net-bytes (b1)
  (cond ((< b1 #X+80) 1)
	((< b1 #X+C0) 2)
	((< b1 #X+E0) 3)
	(t (error "Class D address?"))))

(defun-in-flavor (egp-log-error egp-protocol) (egp length reason)
  (ip-notify nil "EGP ~A:~A"
	     reason
	     (with-output-to-string (stream)
	       (send self :display-ip-packet egp length nil nil stream nil))))

(defun-in-flavor (egp-send-error egp-protocol) (egp length source destination reason)
  (egp-respond source destination 8 0 0 0 (+ egp-error-size 12)
    (setf (egp-error-reason response) reason)
    (copy-array-portion egp 0 length response 0 (+ egp-error-size 12))
    (egp-log-error response (+ egp-error-size 12) "Local Error")))

(defun-in-flavor (egp-process-nr egp-protocol) (egp length neighbor)
  (if (or (null neighbor) (neq (egp-n-state neighbor) :up))
      (egp-log-error egp length "NR from non-neighbor")
      (loop with about-subnet = (egp-poll-source egp)
	    with host-bytes = (egp-host-bytes (explode-internet-address about-subnet))
	    with host-loc = (- 4 host-bytes)
	    with net-addr = (make-array 4 :element-type '(unsigned-byte 8))
	    with gw-addr = (make-array 4 :element-type '(unsigned-byte 8))
	    initially (copy-array-portion egp 12 16 gw-addr 0 4)
	    for i from 0 below (+ (egp-poll-interior-gateways egp)
				  (egp-poll-exterior-gateways egp))
	    with idx = 16
	    do (copy-array-portion egp idx (incf idx host-bytes) gw-addr host-loc 4)
	    for nn = (gethash (load-internet-address gw-addr 0) neighbor-hash-table)
	    for subnets = (loop repeat (aref egp idx)
				initially (incf idx)
				nconc (loop with distance = (aref egp idx)
					    repeat (aref egp (1+ idx))
					    initially (incf idx 2)
					    for net-bytes = (egp-net-bytes (aref egp idx))
					    doing
					    (copy-array-portion egp idx (incf idx net-bytes)
								net-addr 0 4)
					    collect (load-internet-address
						      net-addr 0)))
	    when (and nn (zerop i))
	    do (send network :set-appropriate-subnets-for-gateway (egp-n-route nn) subnets))))

(defun-in-flavor (egp-send-nr egp-protocol) (source destination egp neighbor)
  (let ((subnets (send network :get-appropriate-subnets-for-self (egp-n-route neighbor)))
	(address (make-array 4 :element-type '(unsigned-byte 8)))
	(idx 16))
    (egp-respond source destination 1 0 0 (egp-header-sequence egp) idx
      (setf (egp-poll-interior-gateways response) 1)
      (setf (egp-poll-exterior-gateways response) 0)
      (setf (load-internet-address address 0) (egp-n-local-address neighbor))
      (copy-array-portion address 0 (egp-net-bytes (aref address 0)) response 12 16)
      (copy-array-portion address (egp-net-bytes (aref address 0)) 4
			  response idx (incf idx (egp-host-bytes (aref address 0))))
      (setf (aref response idx) 1)
      (incf idx)
      (setf (aref response idx) 0)
      (incf idx)
      (setf (aref response idx) (length subnets))
      (incf idx)
      (loop for subnet in subnets
	    for nb = (egp-net-bytes (explode-internet-address subnet))
	    do
	    (store-internet-address subnet address 0)
	    (copy-array-portion address 0 nb response idx (incf idx nb))))))

;;; Real methods

(defmethod (:enable egp-protocol) ()
  (setf my-system (si:parse-number
		    (or (send net:*local-site* :user-get :internet-egp-autonomous-system)
			"0"))))

(defmethod (:receive-ip-packet egp-protocol) (egp length source destination)
  (cond	((not (= (egp-header-version egp) egp-version-number))
	 (incf format-errors))
	((ip-check-checksum egp 0 4 length)
	 (incf checksum-errors)
	 (egp-send-error egp length source destination 1))
	(t (let ((neighbor (gethash source neighbor-hash-table)))
	     (selector (egp-header-type egp) =
	       ;;Network Reachability
	       (1 (egp-process-nr egp length neighbor))
	       ;;NR Poll
	       (2 (cond ((or (null neighbor) (neq (egp-n-state neighbor) :up))
			 (egp-send-error egp length source destination 4))
			(t (egp-send-nr source destination egp neighbor))))
	       ;;Neighbor Acquisition
	       (3 (selector (egp-header-code egp) =
		    ;;Request
		    (0 #||
		       (unless neighbor
			 (let ((route (send network :route-to-address source)))
			   (when (compare-internet-address
				   source (ip-route-gateway-address route))
			     (setf neighbor
				   (setf (gathash source neighbor-hash-table)
					 (make-egp-neighbor
					   :address source :local-address destination
					   :route (ip-make-gateway (ip-route-interface route)
								   source)))))))
		       ||#
		       (cond (neighbor
			      (egp-respond source destination 3 1 0
					   (egp-header-sequence egp) egp-na-size
				(setf (egp-na-hello-interval response) my-hello-interval)
				(setf (egp-na-poll-interval response) my-poll-interval))
			      (setf (egp-n-system neighbor) (egp-header-system egp))
			      (setf (egp-n-hello-interval neighbor) (egp-na-hello-interval egp))
			      (setf (egp-n-poll-interval neighbor) (egp-na-poll-interval egp))
			      (setf (egp-n-state neighbor) :down))
			     (t
			      (egp-respond source destination 3 2 4
					   (egp-header-sequence egp) egp-na-size
				(setf (egp-na-hello-interval response) my-hello-interval)
				(setf (egp-na-poll-interval response) my-poll-interval)))))
		    ;;Reply
		    (1 #||
		       (when (and (null neighbor) (= (egp-header-sequence egp) 65535))
			   (let ((route (send network :route-to-address source)))
			     (when (compare-internet-address
				     source (ip-route-gateway-address route))
			       (setf neighbor
				     (setf (gethash source neighbor-hash-table)
					   (make-egp-neighbor
					     :address source :local-address destination
					     :route (ip-make-gateway (ip-route-interface route)
								     source)
					     :last-hello-sent-seq 65535))))))
		       ||#
		    (when (and neighbor
			       (eq (egp-n-state neighbor) :acquire)
			       (= (egp-header-sequence egp)
				  (egp-n-last-hello-sent-seq neighbor)))
		      (setf (egp-n-system neighbor) (egp-header-system egp))
		      (setf (egp-n-hello-interval neighbor) (egp-na-hello-interval egp))
		      (setf (egp-n-poll-interval neighbor) (egp-na-poll-interval egp))
		      (setf (egp-n-state neighbor) :down)
		      (setf (egp-n-last-hello-sent-seq neighbor) -1)))
		   ;;Refusal
		   (2 #||
		      (when (and neighbor
				   (eq (egp-n-state neighbor) :acquire)
				   (= (egp-header-sequence egp)
				      (egp-n-last-hello-sent-seq neighbor)))
			  (egp-log-error egp length "Removing neighbor")
			  (remhash (egp-n-address neighbor) neighbor-hash-table))
		      ||#)
		       ;;Cease
		       (3 (egp-respond source destination 3 4 0
				       (egp-header-sequence egp) egp-na-size)
			  (when neighbor
			    (setf (egp-n-state neighbor) :idle)
			    (setf (egp-n-last-hello-sent-seq neighbor) -1)))
		       ;;Cease Acknowledge
		       (4)
		       (otherwise (egp-send-error egp length source destination 3))))
	       ;;Neighbor Hello
	       (5 (cond ((or (null neighbor)
			     (not (member (egp-n-state neighbor) '(:down :up))))
			 (egp-respond source destination 3 3 0 0 egp-na-size)
			 (egp-log-error egp length "Hello from non-neighbor"))
			(t (selector (egp-header-code egp) =
			     ;;Hello
			     (0  (egp-respond source destination 5 1 0
					      (egp-header-sequence egp) egp-header-size)
				 (unless (time-elapsed-p
					   (* my-hello-interval 60)
					   (egp-n-last-hello-received-time neighbor))
				   (egp-log-error egp length "Excess Hello received"))
				 (setf (egp-n-last-hello-received-time neighbor) (time:time)))
			     ;;I Heard You
			     (1 (when (= (egp-header-sequence egp)
					 (egp-n-last-hello-sent-seq neighbor))
				  (setf (egp-n-last-hello-sent-seq neighbor) -1)
				  (setf (egp-n-n-lost-hellos neighbor) 0)
				  (setf (egp-n-state neighbor) :up)
				  (send network :set-gateway-reachable (egp-n-route neighbor))))
			     (otherwise (incf format-errors)
					(egp-send-error egp length source destination 3))))))
	       ;;Error
	       (8 (egp-log-error egp length "Remote Error"))
	       (otherwise (incf format-errors)
			  (egp-send-error egp length source destination 3))))))
  (when egp (ip-return-packet egp)))

;;; Background

(defmethod (:background egp-protocol) ()
  (maphash #'(lambda (ignore neighbor)
	       (send self :background-neighbor neighbor))
	   neighbor-hash-table))

(defun-in-flavor (egp-maybe-send-hello egp-protocol) (neighbor)
  (when (time-elapsed-p (* 60 (1+ (egp-n-hello-interval neighbor)))
			(egp-n-last-hello-sent-time neighbor))
    (unless (= (egp-n-last-hello-sent-seq neighbor) -1)
      (incf (egp-n-n-lost-hellos neighbor))
      (case (egp-n-state neighbor)
	(:up (when (> (egp-n-n-lost-hellos neighbor) 5)
	       (setf (egp-n-state neighbor) :down)
	       (send network :set-gateway-unreachable (egp-n-route neighbor) :egp)))))
    (egp-transmit neighbor 5 0
		  (case (egp-n-state neighbor) (:up 1) (:down 2) (otherwise 0))
		  egp-header-size)
    (setf (egp-n-last-hello-sent-time neighbor) (time:time))
    (setf (egp-n-last-hello-sent-seq neighbor) (egp-n-sequence neighbor))))

(defmethod (:background-neighbor egp-protocol) (neighbor)
  ;; Changed the call of internet-subnet-number to an :internet-subnet-number
  ;; message.
  (case (egp-n-state neighbor)
    (:down
     (egp-maybe-send-hello neighbor))
    (:up
     (egp-maybe-send-hello neighbor)
     (when (time-elapsed-p (* 60 (1+ (egp-n-poll-interval neighbor)))
			   (egp-n-last-poll-sent-time neighbor))
       (egp-transmit neighbor 2 0 0 egp-poll-size
	 (setf (load-internet-address response 12) 
	       (send network :internet-subnet-number (egp-n-local-address neighbor))))
       (setf (egp-n-last-poll-sent-time neighbor) (time:time))
       (setf (egp-n-last-poll-sent-seq neighbor) (egp-n-sequence neighbor))))
    (:acquire
     (egp-transmit neighbor 3 0 0 egp-na-size
       (setf (egp-na-hello-interval response) my-hello-interval)
       (setf (egp-na-poll-interval response) my-poll-interval))
     (setf (egp-n-last-hello-sent-seq neighbor) (egp-n-sequence neighbor)))
    ))

;;; User Interface

(defmethod (:egp-add-neighbor egp-protocol) (gateway)
  (send self :background-neighbor
	(or (gethash (ip-route-gateway-address gateway) neighbor-hash-table)
	    (setf (gethash (ip-route-gateway-address gateway) neighbor-hash-table)
		  (make-egp-neighbor :address (ip-route-gateway-address gateway)
				     :local-address (ip-interface-local-address
						      (ip-route-interface gateway))
				     :route gateway :state :acquire)))))

(defmethod (:egp-broadcast-acquire egp-protocol) (local-address)
  ;; Changed the call of internet-subnet-number to an :internet-subnet-number
  ;; message.
  (egp-respond (send network :internet-subnet-number local-address 255) local-address 3 0 0
	       65535 egp-na-size
    (setf (egp-na-hello-interval response) my-hello-interval)
    (setf (egp-na-poll-interval response) my-poll-interval)))

;;; Debugging

(defmethod (:display-ip-packet egp-protocol) (egp length ignore ignore stream ignore)
  (format stream " EGP")
  (cond ((< length egp-header-size))
	((= (egp-header-version egp) egp-version-number)
	 (format stream " system ~D seq ~D: "
		 (egp-header-system egp) (egp-header-sequence egp))
	 (selector (egp-header-type egp) =
	   ;;Network Reachability
	   (1 (format stream "Network Reachability")
	      (when ( length egp-poll-size)
		(format stream " ~D Int ~D Ext for ~A:"
			(egp-poll-interior-gateways egp) (egp-poll-exterior-gateways egp)
			(unparse-internet-address (egp-poll-source egp)))
		))
	   ;;NR Poll
	   (2 (format stream "Poll ~A" (unparse-internet-address (egp-poll-source egp))))
	   ;;Neighbor Acquisition
	   (3 (let ((reason (selector (egp-header-info egp) =
			      (0 "unspecified")
			      (1 "active mode")
			      (2 "passive mode")
			      (3 "insufficient resources")
			      (4 "administratively prohibited")
			      (5 "going down")
			      (6 "parameter problem")
			      (otherwise (format nil "status ~D" (egp-header-info egp))))))
		(selector (egp-header-code egp) =
		  ((0 1) (format stream "Acquisition ~[Request~;Reply~] ~A hello ~D poll ~D"
				 (egp-header-code egp) reason
				 (egp-na-hello-interval egp) (egp-na-poll-interval egp)))
		  (2 (format stream "Acquisition Refusal (~A)" reason))
		  (3 (format stream "Cease (~A)" reason))
		  (4 (format stream "Cease Acknowledgement"))
		  (otherwise (format stream "Acquisition Code ~D" (egp-header-code egp))))))
	   ;;Neighbor Hello
	   (5 (format stream "~A (~A)"
		      (selector (egp-header-code egp) =
			(0 "Hello")
			(1 "I Heard You")
			(otherwise (format nil "Code ~D" (egp-header-code egp))))
		      (selector (egp-header-info egp) =
			(0 "")
			(1 "reachable")
			(2 "unreachable")
			(otherwise (format nil "status ~D" (egp-header-info egp))))))
	   ;;Error
	   (8 (format stream "Error (~A)"
		      (selector (egp-error-reason egp) =
			(0 "unspecified")
			(1 "bad EGP checksum")
			(2 "bad IP source address in NR")
			(3 "undefined EGP type or code")
			(4 "received poll from non-neighbor")
			(5 "received excess unsolicited NR message")
			(6 "received excess poll")
			(7 "erroneous countsin received NR message")
			(8 "no response to NR poll")
			(otherwise (format nil "reason ~D" (egp-error-reason egp)))))
	      (when (>= length (+ egp-header-size egp-error-size))
		(format stream ": ")
		(send self :display-ip-packet
		      (make-array (- length egp-error-size) :element-type '(unsigned-byte 8)
				  :displaced-to egp
				  :displaced-index-offset egp-error-size)
		      (- length egp-error-size) nil nil nil nil)))
	   (otherwise (format stream "unknown type ~D" (egp-header-type egp)))))
	(t (format stream " bad version ~D" (egp-header-version egp)))))

(defmethod (:peek egp-protocol) ()
  (list ()
	(tv:scroll-parse-item
	  `(:function send (,self :checksum-errors) nil ("Meters:  Checksum errors: ~5D"))
	  `(:function send (,self :format-errors) nil ("  Format errors: ~5D"))
	  `(:function send (,self :errors-out) nil ("  Errors out: ~5D")))
	(tv:scroll-maintain-list #'(lambda ()
				     (loop for neighbor being the hash-elements of neighbor-hash-table
					   collect neighbor))
				 #'egp-peek-neighbor)))
(defmethod D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(reset-meters egp-protocol)0 ()
  (setf checksum-errors 0
	format-errors 0
	errors-out 0))

(defun egp-peek-neighbor (neighbor)
  (tv:scroll-parse-item
    (format nil "~A~@[ (~A)~]"
	    (unparse-internet-address (egp-n-address neighbor))
	    (net:get-host-from-address (egp-n-address neighbor)
				       (send (ip-route-ip (egp-n-route neighbor)) :network)
				       t))
    `(:function egp-n-state (,neighbor) nil (" ~A"))
    ))

(compile-flavor-methods egp-protocol)

;;; Initializations

(define-ip-protocol 8 egp-protocol (:egp-add-neighbor))
