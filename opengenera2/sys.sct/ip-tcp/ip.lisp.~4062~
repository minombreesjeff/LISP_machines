;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Lowercase: Yes; -*-
;; Internet Datagram Protocol
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; The Internet Datagram Protocol

;;; Internet network definition
;;; Most messages get forwarded to the IP protocol module.

(defmethod (:address-trusted-p internet-network) (address)
  (ip-host-trusted-p self address))

(defmethod (:disable internet-network) ()
  (when ip-protocol (send ip-protocol :disable)))

(defmethod (:enable internet-network) ()
  (unless ip-protocol
    (setq ip-protocol (make-instance 'ip-protocol :network self)))
  (send ip-protocol :enable))

(defmethod (:enabled internet-network) ()
  (when ip-protocol (send ip-protocol :enabled)))

(defmethod (:packet-buffer-panic internet-network) ()
  (when ip-protocol (send ip-protocol :packet-buffer-panic)))

(defmethod (:peek internet-network) ()
  (tv:scroll-maintain-list
    #'(lambda () (when ip-protocol (list ip-protocol)))
    #'(lambda (protocol) (send protocol :peek))))
(defmethod (:possible-media-for-protocol internet-network) (protocol-name base-medium)
  (remove-duplicates
    (loop for (nil nil possible-media-function) in *ip-protocol-alist*
	  when possible-media-function
	  append (funcall possible-media-function protocol-name base-medium))))
(defmethod (:possible-medium-for-protocol internet-network) (protocol-name base-medium)
  (first (send self :possible-media-for-protocol protocol-name base-medium)))
(defmethod (:supports-protocol-on-medium internet-network) (protocol-name medium-name)
  (member medium-name (send self :possible-media-for-protocol
			    protocol-name
			    (neti:protocol-base-medium-name
			      (neti:find-protocol-named protocol-name)))))
(defmethod (:supports-broadcast internet-network) (protocol-name)
  ;; Only makes sense for UDP
  (rassoc protocol-name *udp-protocol-alist*))

(defmethod (:print-recent-headers internet-network) (&optional (stream *standard-output*))
  (when ip-protocol (send ip-protocol :print-recent-headers stream)))

(defmethod (:receive-packet internet-network) (pkt interface address)
  (if ip-protocol
      (send ip-protocol :receive-packet pkt interface address)
      (neti:deallocate-packet-buffer pkt)))

(defmethod (:reset internet-network) ()
  (send self :disable)
  (when ip-protocol
    (send ip-protocol :reset)))

(defmethod (:set-recent-header-size internet-network) (n)
  (when ip-protocol (send ip-protocol :set-recent-header-size n)))

(defmethod D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(reset-meters internet-network)0 ()
  (when ip-protocol
    (reset-meters ip-protocol)))
(defun 1reset-ip-tcp-meters 0()
  (let ((network (neti:find-network-named :internet)))
    (when network
      (reset-meters network))))

(add-initialization "Reset IP-TCP Meters" '(reset-tcp-meters) '(warm))


;;; The IP protocol handler

;;; Internal Functions

(defun-in-flavor (ip-map-over-protocols ip-protocol) (message &rest args)
  (loop for i from 0 to 255
	for protocol = (aref protocol-array i)
	when protocol
	do (lexpr-send (internal-ip-protocol-instance protocol) message args)))

(defun-in-flavor (ip-send-to-protocol ip-protocol) (protocol message &rest args)
  (lexpr-send (internal-ip-protocol-instance (aref protocol-array protocol)) message args))

;;; Error handling

(defun-in-flavor (ip-error ip-protocol) (ip free-flag error-type &rest ignore)
  (incf (getf errors error-type 0))
  (when free-flag (ip-return-packet ip)))

(defmethod (ip-error-via-icmp ip-protocol) (ip free-flag type code)
  (unless (= (ip-header-protocol ip) *icmp-protocol-number*)
    (ip-send-to-protocol *icmp-protocol-number*
			 :ip-error ip (* 4 (ip-header-ihl ip))
			 (ip-header-source ip)
			 type code))
  (when *ip-debug-flag*
    (ip-notify nil "IP Error ~D ~D: ~A"
	       type code (with-output-to-string (stream)
			   (send self :display-header ip stream))))
  (ip-error ip free-flag 'icmp))

(defun-in-flavor (ip-record-header ip-protocol) (ip reason)
  (when recent-headers
    (let* ((log (aref recent-headers recent-header-ptr))
	   (ll (array-total-size log)))
      (copy-array-portion ip 0 ll log 0 ll)
      (alter-ip-pkt-log log :time (time:fixnum-microsecond-time) :reason reason))
    (unless (< (incf recent-header-ptr) (array-total-size recent-headers))
      (setq recent-header-ptr 0))))

;;; Packet Processing

(defun-in-flavor (ip-receive-raw ip-protocol)
		 (ip header-length total-length source destination free-flag)
  (unless free-flag
    (setq ip (neti:copy-packet-buffer ip total-length nil))
    (setq free-flag t))
  (when ip
    (let ((protocol (aref protocol-array (ip-header-protocol ip))))
      (if protocol
	  (send (internal-ip-protocol-instance protocol)
		:receive-ip-packet
		(neti:get-sub-packet ip 'sys:art-8b header-length
				     (internal-ip-protocol-leader-size protocol)
				     (internal-ip-protocol-structure-symbol protocol))
		(- total-length header-length)
		source destination)
	  (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Only send an ICMP error if this is not to a broadcast address.
0	  (cond ((not (ip-possible-broadcast-address-p
			self destination (send self :route-to-address destination)))
		 (ip-error-via-icmp self ip free-flag 3 2))
		(free-flag (ip-return-packet ip)))))))

(defun-in-flavor (ip-transmit-raw ip-protocol) (ip header-length total-length route free-flag)
  ;; Special case:  local cable broadcasts (255.255.255.255) need to go to all interfaces
  (when (and (= (ip-route-gateway-address route) *ip-broadcast-address*) (rest interface-list))
    (loop for interface in interface-list
	  with known-interface = (ip-route-interface route)
	  when (not (eq interface known-interface))
	    do
	      (let ((pkt (neti:without-big-packets
			   (send (ip-interface-instance interface) :allocate-packet nil))))
		(when pkt
		  (incf pkts-transmitted)
		  (copy-array-portion ip 0 total-length pkt 0 total-length)
		  2;; Set the source address to be that of the interface we are using
0		  (setf (ip-header-source pkt) (ip-interface-local-address interface))
		  (ip-set-checksum pkt 0 10 header-length)	2;Set Checksum for new pkt
0		  (send (ip-interface-instance interface) :transmit-packet pkt t network
			*ip-broadcast-address* total-length)))))
  ;; Transmit on the route interface
  (ip-set-checksum ip 0 10 header-length)
  (incf pkts-transmitted)
  (send (ip-interface-instance (ip-route-interface route)) :transmit-packet
	ip free-flag network (ip-route-gateway-address route) total-length))

;;; Options

(defun-in-flavor (ip-process-option ip-protocol) (ip offset length option route-loc)
  (neti:with-network-packet (ip)
    (let ((interface (ip-route-interface (location-contents route-loc))))
      (when interface				2;Avoids lossage on unknown routes
0	(case option
	  (7 (unless (symbolp (ip-interface-instance interface))
	       (let ((ptr (aref ip (+ offset 2))))
		 (when (<= ptr (- length 3))
		   (setf (load-internet-address ip (+ offset (1- ptr)))
			 (ip-interface-local-address interface))
		   (incf (aref ip (+ offset 2)) 4)))))
	  (68)					;internet timestamp
	  (130)					;security
	  ((131 137)
	   (unless (symbolp (ip-interface-instance interface))
	     (loop for ptr from (aref ip (+ offset 2)) by 4
		   unless (<= ptr (- length 3)) return nil
		   for new-address = (load-internet-address ip (+ offset (1- ptr)))
		   for new-route = (send self :route-to-address new-address)
		   for new-interface = (ip-route-interface new-route)
		   while (eq (ip-interface-instance new-interface) :local)
		   finally
		     (when (and (= option 137)
				(not (compare-internet-address
				       new-address (ip-route-gateway-address new-route))))
		       (error "Option 137"))
		     (setf (load-internet-address ip (1- (+ offset (- ptr 4))))
			   (ip-interface-local-address new-interface))
		     (setf (location-contents route-loc) new-route))))
	  ;;(136) Stream Identifier
	  )))))

;;; Fragmentation

(defun-in-flavor (ip-disassemble ip-protocol) (ip header-length total-length route free-flag)
  (neti:with-network-packet (ip)
    (cond ((not (zerop (ip-header-dont-fragment ip)))
	   (ip-error-via-icmp self ip free-flag 3 4))
	  (T
	   (let ((interface (ip-route-interface route)))
	     (declare (sys:array-register interface))
	     (loop with fragment-offset = (+ (ash (ip-header-fragment-offset-high ip) 8)
					     (ip-header-fragment-offset-low ip))
		   with max-fragment-off =
		     (truncate (- (ip-interface-max-packet-size interface) header-length) 8)
		   with max-fragment-size = (* max-fragment-off 8)
		   for this-offset from (+ header-length max-fragment-size)
				   below total-length by max-fragment-size
		   for this-off from (+ fragment-offset max-fragment-off) by max-fragment-off
		   for last-fragment = (>= (+ this-offset max-fragment-size) total-length)
		   do
	       (let ((this-pkt (neti:without-big-packets
				 (send (ip-interface-instance interface)
				       :allocate-packet nil))))
		 (when this-pkt
		   (neti:with-network-packet (this-pkt)
		     (copy-array-portion ip 0 header-length this-pkt 0 header-length)
		     (setf (ip-header-fragment-offset-high this-pkt) (ash this-off -8))
		     (setf (ip-header-fragment-offset-low this-pkt) (logand this-off #x+FF))
		     (if last-fragment
			 (let ((this-length (- total-length (- this-offset header-length))))
			   (copy-array-portion ip this-offset total-length
					       this-pkt header-length this-length)
			   (setf (ip-header-length this-pkt) this-length)
			   (ip-record-header this-pkt :disassembled)
			   (ip-transmit-raw this-pkt header-length this-length route t))
			 (let ((this-length (+ header-length max-fragment-size)))
			   (setf (ip-header-more-fragments this-pkt) 1)
			   (copy-array-portion ip this-offset
					       (+ this-offset max-fragment-size)
					       this-pkt header-length this-length)
			   (setf (ip-header-length this-pkt) this-length)
			   (ip-record-header this-pkt :disassembled)
			   (ip-transmit-raw this-pkt header-length this-length route t))))))
		   finally
		     (setf (ip-header-more-fragments ip) 1)
		     (let ((this-length (+ header-length max-fragment-size)))
		       (setf (ip-header-length ip) this-length)
		       2;; Copy the last data out of the big packet
0		       (when (neti:big-packet-p ip)
			 (let ((pkt (neti:without-big-packets
				      (send (ip-interface-instance interface)
					    :allocate-packet nil))))
			   (when (null pkt)
			     (loop do (setq pkt (neti:without-big-packets
						  (send (ip-interface-instance interface)
							:allocate-packet nil)))
				   until pkt 
				   do (process-allow-schedule)))
			   (copy-array-portion ip 0 this-length pkt 0 this-length)
			   (when free-flag (neti:deallocate-packet-buffer ip))
			   (setq ip pkt
				 free-flag t)))
		       (ip-record-header ip :disassembled)
		       (ip-transmit-raw ip header-length this-length route free-flag))))))))

(defun-in-flavor (ip-flush-reassembly-node ip-protocol) (ra suppress-icmp-errors)
  (setf reassembly-nodes (delete ra reassembly-nodes))
  (let ((pkt (ip-ra-pkt ra)))
    (when pkt
      (if (or suppress-icmp-errors
	      (eql (car (first (ip-ra-hole-list ra))) 0))
	  (neti:deallocate-packet-buffer pkt)
	  (ip-error-via-icmp self pkt t 11 1)))))
(defvar 1*ip-max-reassembly-size* 010240)

(defun-in-flavor (ip-reassemble ip-protocol)
	      (ip header-length total-length source destination free-flag)
  (neti:with-network-packet (ip)
    (let* ((fragment-first (ash (+ (ash (ip-header-fragment-offset-high ip) 8)
				   (ip-header-fragment-offset-low ip)) 3))
	   (fragment-last (+ fragment-first (- total-length header-length)))
	   (ra (loop with id = (ip-header-identification ip)
		     for ra in reassembly-nodes
		     when (and (= id (ip-ra-id ra))
			       (compare-internet-address source (ip-ra-source ra))
			       (compare-internet-address destination
							 (ip-ra-destination ra)))
		       return ra
		     finally
		       (let* ((ra-pkt (neti:with-big-packets (*ip-max-reassembly-size*)
					(neti:allocate-packet-buffer nil))))
			 (when ra-pkt
			   (push (setf ra (make-ip-reassembly-node
					    :source source :destination destination :id id
					    :pkt ra-pkt
					    :header-length 60
					    :hole-list '((0 . 65536))))
				 reassembly-nodes)
			   (return ra))))))
      (when ra
	(neti:with-network-packet (ra)
	  (setf (ip-ra-last-pkt-time ra) (sys:time))
	  (setf (ip-ra-last-pkt-ttl ra) (* 60 (ip-header-time-to-live ip)))
	  (loop for hole in (ip-ra-hole-list ra)
		as (hole-first . hole-last) = hole
		when (and (< fragment-first hole-last)
			  (> fragment-last hole-first))
		  do
		    (setf (ip-ra-hole-list ra) (delete hole (ip-ra-hole-list ra)))
		    (when (> fragment-first hole-first)
		      (push (cons hole-first fragment-first) (ip-ra-hole-list ra)))
		    (if (zerop (ip-header-more-fragments ip))
			(setf (ip-ra-total-length ra) (+ (ip-ra-header-length ra)
							 fragment-last))
			(when (< fragment-last hole-last)
			  (push (cons fragment-last hole-last) (ip-ra-hole-list ra))))
		    (let ((first-good (max fragment-first hole-first))
			  (last-good (min fragment-last hole-last))
			  (offset (- fragment-first header-length))
			  (rpkt (ip-ra-pkt ra))
			  (rhl (ip-ra-header-length ra)))
		      (declare (sys:array-register rpkt))
		      (unless (> (+ rhl last-good) (array-total-size rpkt))
			(copy-array-portion
			  ip (- first-good offset) (- last-good offset)
			  rpkt (+ rhl first-good) (+ rhl last-good)))
		      (when (zerop first-good)
			(copy-array-portion ip 0 header-length rpkt 0 rhl)
			(setf (ip-header-ihl rpkt) (truncate rhl 4))))
		    (return))))
      (when free-flag (neti:deallocate-packet-buffer (prog1 ip (setf ip nil))))
      (when (and ra (null (ip-ra-hole-list ra)))
	(setf reassembly-nodes (delete ra reassembly-nodes))
	(let ((ip (ip-ra-pkt ra)))
	  (setf (ip-header-length ip) (ip-ra-total-length ra))
	  (setf (ip-header-more-fragments ip) 0)
	  (ip-record-header ip :reassembled)
	  (ip-receive-raw ip (ip-ra-header-length ra) (ip-ra-total-length ra)
			  (ip-ra-source ra) (ip-ra-destination ra) t)
	  )))))

;; The main code

(defun-in-flavor (ip-transmit ip-protocol) (ip header-length total-length route free-flag)
  (cond ((> total-length (ip-interface-max-packet-size (ip-route-interface route)))
	 2;;Too big, disassemble
0	 (ip-disassemble ip header-length total-length route free-flag))
	((not (neti:big-packet-p ip))		2;Vanilla packet
0	 (ip-transmit-raw ip header-length total-length route free-flag))
	(t					2;A big packet that can fit in one normal packet
0	 (let ((pkt (neti:without-big-packets (send (ip-interface-instance
						      (ip-route-interface route))
						    :allocate-packet nil))))
	   (when pkt
	     (copy-array-portion ip 0 total-length pkt 0 total-length)
	     (ip-transmit-raw pkt header-length total-length route t))
	   (when free-flag (neti:deallocate-packet-buffer ip))))))

(defun-in-flavor (ip-receive ip-protocol) (ip header-length total-length
					      source destination free-flag)
  (neti:with-network-packet (ip)
    (incf pkts-in)
    (if (and (zerop (ip-header-fragment-offset-high ip))
	     (zerop (ip-header-fragment-offset-low ip))
	     (zerop (ip-header-more-fragments ip)))
	(ip-receive-raw ip header-length total-length source destination free-flag)
	(ip-reassemble ip header-length total-length source destination free-flag))))

2;;; This really makes the decisions on receiving and transmitting packets.
0(defun-in-flavor (ip-retransmit-packet ip-protocol) (ip header-length total-length
							source destination route
							source-interface free-flag)
  (neti:with-network-packet (ip)
    (unless route (setq route (send self :route-to-address destination)))
    2;; Handle IP Options
0    (loop with i = 20
	  while (< i header-length)
	  for option = (aref ip i)
	  do (case option
	       (0 (return))
	       (1 (incf i))
	       (otherwise (let ((option-length (aref ip (1+ i))))
			    (ip-process-option ip i option-length option (locf route))
			    (incf i option-length)))))
  
    (let* ((route route)
	   (interface (ip-route-interface route)))
      (declare (sys:array-register route))
      2;; Go down the line figuring out what to do with this packet
0    
      (cond ((null interface)
	     2;; Network Unreachable (don't send an ICMP message to a broadcast)
0	     (cond ((not (ip-possible-broadcast-address-p1 0self source route))
		    (ip-record-header ip :unreachable)
		    (ip-error-via-icmp self ip free-flag 3 0))	;network unreachable
		   (free-flag (ip-return-packet ip))))
	    ((and (not (symbolp interface))
		  (eq (ip-interface-instance interface) :local))
	     ;;It's for the local host
	     (ip-record-header ip :receive)
	     (ip-receive ip header-length total-length source destination free-flag))
	  
	    ((<= (decf (ip-header-time-to-live ip)) 0)
	     (if (or (ip-possible-broadcast-address-p1 0self source route)
		     (ip-possible-broadcast-address-p1 0self destination route))
		 2;; Broadcast:  throw it away
0		 (when free-flag (ip-return-packet ip))
		 2;; Otherwise, let them know that it expired
0		 (ip-record-header ip :expired)
		 (ip-error-via-icmp self ip free-flag 11 0)))
	  
	    ;;Broadcast packet?
	    ((compare-internet-address *ip-broadcast-address*
				       (ip-route-gateway-address route))
	     ;; Transmit it if locally generated
	     (when (null source-interface)
	       (incf (ip-route-pkts-out route))
	       (unless (symbolp interface)
		 (ip-record-header ip :broadcast)
		 (ip-transmit ip header-length total-length route nil)))
	     ;; Receive it
	     (ip-record-header ip :receive)
	     (ip-receive ip header-length total-length source destination free-flag))
	  
	    2;; Transmit it if it is from us to another host
0	    ((null source-interface)
	     (incf (ip-route-pkts-out route))
	     (ip-record-header ip :transmit)
	     (ip-transmit ip header-length total-length route free-flag))
	  
	    2;; Transmit it if we are a gateway and it is not to a broadcast address of any kind
0	    ((and routing-initialized
		  (rest interface-list)
		  (not (ip-possible-broadcast-address-p1 0self destination route)))
	     (incf pkts-routed)
	     (incf (ip-route-pkts-out route))
	     2;; send a redirect if there is a better way to get there
0	     (when (eq source-interface (ip-interface-instance interface))
	       (ip-send-to-protocol *icmp-protocol-number* :ip-send-redirect 
				    ip header-length destination route source-interface))
	     (ip-record-header ip :forward)
	     (ip-transmit ip header-length total-length route free-flag))
	  
	  
	    2;; Can't do anything with it, throw it away
0	    (t
	     (ip-return-packet ip))
	    ))))

;;; External Interfaces

(defmethod (:enable ip-protocol) ()
  (unless initialized
    (loop for (number flavor) in *ip-protocol-alist*
	  for current-protocol = (aref protocol-array number)
	  unless (and current-protocol
		      (typep (internal-ip-protocol-instance current-protocol) flavor))
	  do (let ((instance (make-instance flavor :network self :protocol-number number)))
	       (setf (aref protocol-array number)
		     (make-internal-ip-protocol
		       :instance instance
		       :structure-symbol (send instance :packet-structure-symbol)
		       :leader-size (send instance :packet-leader-size)))))
    (if (send self :initialize-routing)
	(setf initialized (sys:time))
	(setf initialized nil)))
  (when initialized 
    (setq enabled t)
    (ip-map-over-protocols :enable)
    (background-enable))
  nil)
(defmethod (:disable ip-protocol) ()
  (setq enabled nil)
  (background-disable)
  (ip-map-over-protocols :disable))

(defmethod (:reset ip-protocol) ()
  (send self :disable)
  (send self :flush-reassembly nil)
  (ip-map-over-protocols :reset)
  (setf initialized nil))

(defmethod (:packet-buffer-panic ip-protocol) ()
  (send self :flush-reassembly nil)
  (ip-map-over-protocols :packet-buffer-panic))

;;; Idiocy

(defun-in-flavor (ip-unwedge-3600-ethernet-interface ip-protocol) (interface)
  (send interface :resolve-protocol-address network 0))

;;; The guts of it all

(defmethod (:receive-packet ip-protocol) (pkt source-interface ignore)
  (incf pkts-received)
  (if enabled
      (let ((ip (neti:get-sub-packet pkt 'sys:art-8b 0 neti:sub-packet-size 'ip-header)))
	(neti:with-network-packet (ip)
	  (let ((header-length (* 4 (ip-header-ihl ip))))
	    #+3600
	    ;;Aren't IO rev 2 boards wonderful?  You don't want to know the details.
	    (when (and (let ((length (ip-header-length ip)))
			 (and (> length 46) (oddp length)))
		       sys:*main-console*
		       (not (sys:console-audio-exists-p sys:*main-console*))
		       (typep source-interface 'neti:3600-ethernet-interface))
	      (ip-unwedge-3600-ethernet-interface source-interface))
	    (cond ((not (= (ip-header-version ip) internet-header-version-number))
		   (ip-error ip t 'bad-version))
		  ((null routing-initialized))
		  ((< (ip-header-ihl ip) 5) (ip-error ip t 'bad-field 0))
		  ((ip-check-checksum ip 0 10 header-length) (ip-error ip t 'checksum))
		  (t (ip-retransmit-packet ip header-length (ip-header-length ip)
					   (ip-header-source ip)
					   (ip-header-destination ip) nil source-interface t))))))
      (neti:deallocate-packet-buffer pkt)))

;;; This routine checks that the supplied source address is a valid address for this host.
;;; The address may be any one of this host's addresses or it may be a broadcast address.
;;; In the latter case, the a correct local address is returned.
2;;; Return nil if the address is invalid
0(defun-in-flavor (ip-validate-transmit-source-address ip-protocol) (source)
  (block have-source
    ;; Check for our local addresses.
    (dolist (interface interface-list)
      (when (compare-internet-address source (ip-interface-local-address interface))
	(return-from have-source source)))
    ;; Check for a broadcast address.
    ;; This will happen if we are replying to a broadcast packet.
    ;; Choose an appropriate local address.
    (let* ((back-route (send self :route-to-address source))
	   (route-gateway-address (ip-route-gateway-address back-route)))
      (when (and route-gateway-address
		 (compare-internet-address *ip-broadcast-address* route-gateway-address))
	(let ((interface (ip-route-interface back-route)))
	  (cond ((ip-interface-p interface)
		 ;; Broadcast address on a particular interface.
		 (return-from have-source
		   (ip-interface-local-address interface)))
		((and (eq interface :broadcast)
		      (= (list-length interface-list) 1))
		 ;; General broadcast and we are not multi-homed
		 (return-from have-source
		   (ip-interface-local-address (first interface-list))))))))
    2;;; Invalid address
0    nil))

(defmethod (:transmit-packet ip-protocol) (pkt length protocol
					       route source destination free-flag)
  (unless route (setq route (send self :route-to-address destination)))
  ;; Make sure the source address is valid.
    (let ((valid-source (ip-validate-transmit-source-address source)))
      (if valid-source
	  (let ((identification (incf pkts-out))
		(total-length (+ ip-header-size length))
		(ip (neti:get-sub-packet pkt 'sys:art-8b (- ip-header-size)
					 neti:sub-packet-size 'ip-header)))
	    (declare (sys:array-register ip))
	    (si:fill-array ip ip-header-size 0)
	    (alter-ip-header ip
			     :version internet-header-version-number
			     :ihl (truncate ip-header-size 4)
			     :type-of-service 0
			     :dont-fragment 0
			     :more-fragments 0
			     :fragment-offset-high 0
			     :fragment-offset-low 0
			     :time-to-live 64
			     :protocol protocol)
	    (setf (ip-header-length ip) total-length)
	    (setf (ip-header-identification ip) identification)
	    (setf (ip-header-source ip) valid-source)
	    (setf (ip-header-destination ip) destination)
	    (ip-retransmit-packet ip ip-header-size total-length valid-source destination
				  route nil free-flag))
	  2;; Source address invalid, punt.
0	  (neti:deallocate-packet-buffer pkt)
	  (ip-notify T "IP unable to transmit packet to address ~A"
		     (unparse-internet-address source)))))

(defmethod (:flush-reassembly ip-protocol) (just-expired-nodes)
  (loop with now = (sys:time)
	for ra in reassembly-nodes
	when (or (not just-expired-nodes)
		 (> (time:time-difference now (ip-ra-last-pkt-time ra))
		    (ip-ra-last-pkt-ttl ra)))
	  do (ip-flush-reassembly-node ra (not just-expired-nodes))))

(defmethod (:note-destination-unreachable ip-protocol) (ip code)
  (let ((protocol (aref protocol-array (ip-header-protocol ip)))
	(header-length (* 4 (ip-header-ihl ip))))
    (when protocol
      (send (internal-ip-protocol-instance protocol)
	    :note-destination-unreachable
	    (neti:get-sub-packet ip 'sys:art-8b header-length
				 (internal-ip-protocol-leader-size protocol)
				 (internal-ip-protocol-structure-symbol protocol))
	    8
	    (ip-header-source ip)
	    (ip-header-destination ip)
	    code))))

(defmethod (:icmp-source-quench ip-protocol) (ignore ip)
  (let ((protocol (aref protocol-array (ip-header-protocol ip)))
	(header-length (* 4 (ip-header-ihl ip))))
    (when protocol
      (send (internal-ip-protocol-instance protocol)
	    :note-source-quench
	    (neti:get-sub-packet ip 'sys:art-8b header-length
				 (internal-ip-protocol-leader-size protocol)
				 (internal-ip-protocol-structure-symbol protocol))
	    8
	    (ip-header-source ip)
	    (ip-header-destination ip)))))
;;; Background

(defun-in-flavor (background-processing ip-protocol) ()
  (send self :flush-reassembly t)
  (send self :background-routing)
  (ip-map-over-protocols :background))

(defun-in-flavor (background-from-timer ip-protocol) ()
  (when enabled
    (background-processing)
    (process:reset-timer-relative background-timer (floor *background-interval* 60))))

(defun-in-flavor (background-enable ip-protocol) ()
  (when (null background-timer)
    ;; Create the timer object here, after the function is defined
    ;; This conses a closure, too bad
    (setq background-timer (process:create-timer-call #'background-from-timer ()
						      :name "IP Background")))
  (ping-gateways self)
  (unless (process:timer-pending-p background-timer)
    (process:reset-timer-relative background-timer 1)))

(defun-in-flavor (background-disable ip-protocol) ()
  (when background-timer
    (process:clear-timer background-timer)))

;;; Debugging

(defmethod (:display-header ip-protocol) (ip stream)
  (format stream "~& IP ")
  (unless (< (array-total-size ip) ip-header-size)
    (neti:with-network-packet (ip)
      (let ((header-length (* 4 (ip-header-ihl ip)))
	    (total-length (min (array-total-size ip) (ip-header-length ip)))
	    (source (ip-header-source ip))
	    (destination (ip-header-destination ip))
	    (protocol (aref protocol-array (ip-header-protocol ip)))
	    (fragment-offset (* 8 (+ (ash (ip-header-fragment-offset-high ip) 8)
				     (ip-header-fragment-offset-low ip))))
	    (neti:*inhibit-validity-checking* t))
	(format stream "~A->~A ~5D (~D:~D)~[~; *more*~]"
		(let ((host (neti:get-host-from-address source network t)))
		  (if host (neti:host-short-name host) (unparse-internet-address source)))
		(let ((host (neti:get-host-from-address destination network t)))
		  (if host (neti:host-short-name host) (unparse-internet-address destination)))
		(ip-header-identification ip)
		fragment-offset
		(- (ip-header-length ip) header-length)
		(ip-header-more-fragments ip))
	(when (zerop fragment-offset)
	  (if protocol
	      (let ((plen (max 0 (- total-length header-length))))
		(send (internal-ip-protocol-instance protocol)
		      ':display-ip-packet
		      (make-array plen :element-type '(unsigned-byte 8) :displaced-to ip
				  :displaced-index-offset header-length)
		      plen
		      source destination
		      stream
		      (ip-header-protocol ip)))
	      (format stream " (protocol ~D)" (ip-header-protocol ip))))))))

(defmethod (:set-recent-header-size ip-protocol) (n)
  (setf recent-header-ptr 0)
  (setf recent-headers (make-array n))
  (loop for i from 0 below n
	do (setf (aref recent-headers i)
		 (make-array 128 :element-type '(unsigned-byte 8) :leader-list '(128 ip-header nil nil)))))

(defmethod (:print-recent-headers ip-protocol) (&optional (stream *standard-output*))
  (when recent-headers
    (loop with n = (array-total-size recent-headers)
	  for i from 1 to n
	  for ip = (aref recent-headers (mod (+ n (- recent-header-ptr i)) n))
	  while (ip-pkt-log-time ip)
	  do (format stream "~&IP ~6,4$ ~A: "
		     (* 1.d-6 (ip-pkt-log-time ip)) (ip-pkt-log-reason ip))
	  (send self :display-header ip stream))))

(defmethod (:peek ip-protocol) ()
  (list ()
	(tv:scroll-parse-item
	  `(:function send (,self :pkts-received) nil ("  Received: ~5D"))
	  `(:function send (,self :pkts-transmitted) nil ("  Transmitted: ~5D"))
	  `(:function send (,self :pkts-in) nil ("  In: ~5D"))
	  `(:function send (,self :pkts-out) nil ("  Out: ~5D"))
	  `(:function send (,self :pkts-routed) nil ("  Routed: ~5D")))
	(tv:scroll-maintain-list #'(lambda (ip)
				     (loop for error on (send ip :errors) by #'cddr
					   collect error))
				 #'(lambda (error)
				     (tv:scroll-parse-item
				       (format nil "  ~A errors: " (first error))
				       `(:function second (,error) nil ("~D"))))
				 nil nil nil nil
				 self)
	(tv:scroll-parse-item "")
	(tv:peek-hidden-data
	  "Click to add/remove detailed information."
	  (tv:scroll-maintain-list #'send
				   #'ip-peek-reassembly
				   nil nil nil nil
				   self :reassembly-nodes)
	  `(:function (lambda (ip) (length (send ip :reassembly-nodes)))
	    (,self) nil ("~D reassembly nodes:")))
	;;Protocols
	(tv:scroll-maintain-list #'(lambda (array)
				     (loop for i from 0 to 255
					   for protocol = (aref array i)
					   when protocol
					   collect protocol))
				 #'(lambda (protocol)
				     (list ()
					   (tv:scroll-parse-item "")
					   (send (internal-ip-protocol-instance protocol)
						 :peek)))
				 nil nil nil nil
				 protocol-array)
	(send self :peek-routing)))

(defun ip-peek-reassembly (ra)
  (list
    nil
    (tv:scroll-parse-item
;      `(:function
;	#'(lambda (ra) (unparse-internet-address (ip-ra-source ra))) (,ra) nil (" [~A]"))
;      `(:function
;	#'(lambda (ra)
;	    (unparse-internet-address (ip-ra-destination ra))) (,ra) nil ("[~A]"))
      `(:function ip-ra-id (,ra) nil (" ~5D"))
      `(:function ip-ra-total-length (,ra) nil (" ~@[ ~D~]")))
    (tv:scroll-maintain-list
      #'ip-ra-hole-list
      #'(lambda (hole)
	  (tv:scroll-parse-item
	    (format nil "    ~5D-~5D" (car hole) (cdr hole))))
      nil nil nil nil
      ra)))
