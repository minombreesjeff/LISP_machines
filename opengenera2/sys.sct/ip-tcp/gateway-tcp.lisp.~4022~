;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Lowercase: Yes -*-
;;; TCP streams via the TCP (ARPA) server on ITS.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Errors

(defflavor gateway-tcp-connection-error
	(contained-error rfc-port network bridge neti:protocol-name neti:foreign-host)
	()
  :initable-instance-variables
  :gettable-instance-variables
  (:required-flavors net:connection-error))

(defmethod (:network-type gateway-tcp-connection-error) ()
  (send network :type))

(defmethod (:print-request-name gateway-tcp-connection-error) (stream)
  (format stream "~D~@[ (~A)~]" rfc-port neti:protocol-name))

(defmethod (:report gateway-tcp-connection-error) (stream)
  (format stream "Cannot connect to ~D~@[ (~A)~] at ~A via ~A:~%~A"
	  rfc-port neti:protocol-name neti:foreign-host bridge contained-error))

(defflavor gateway-tcp-host-not-responding-during-connection
	()
	(gateway-tcp-connection-error net:host-not-responding-during-connection))

(defflavor gateway-tcp-host-connection-refused
	((neti:reason nil)) (gateway-tcp-connection-error net:connection-refused))

(compile-flavor-methods gateway-tcp-host-not-responding-during-connection
			gateway-tcp-host-connection-refused)



;;; Service interface

(net:define-protocol :tcp-gateway (:tcp-gateway :chaos)
  (:desirability .6)
  (:invoke (gateway-service)
    (let ((real-service (first (neti:service-access-path-args gateway-service)))
	  (connect-args (second (neti:service-access-path-args gateway-service)))
	  (other-medium-parameters (third (neti:service-access-path-args gateway-service))))
      (apply #'gateway-tcp-connect
	     (neti:service-access-path-host real-service)
	     (protocol-name-tcp-port
	       (neti:protocol-name (neti:service-access-path-protocol real-service))
	       t)
	     (neti:service-access-path-host gateway-service)
	     (neti:get-medium-network (first other-medium-parameters))
	     connect-args))))

;; real-host   #, based on real-protocol  gateway-host  target-step-network  (second args)

(defun gateway-tcp-connect (host port bridge network
			    &key future-p ascii-translation characters)
  future-p					;+++
  (let ((contact-name (format nil "TCP ~A ~O"
			      (loop for (net addr) in (send host :address)
				    when (eq net network)
				      return addr)
			      port))
	(flavor (cond (ascii-translation
		       'gateway-tcp-ascii-translating-stream)
		      (characters
		       'gateway-tcp-character-stream)
		      (t
		       'gateway-tcp-stream))))
    (make-instance flavor :host host :port port :bridge bridge :network network
		   :connection (open-arpa-gateway-connection bridge network contact-name
							     host port nil))))

(defun open-arpa-gateway-connection (bridge network contact-name host port conn)
  (condition-case (err)
       (if (null conn)
	   (chaos:connect bridge contact-name)
	   (chaos:wait-for-connect conn 'chaos:open-state 600.))
     (chaos:chaos-host-not-responding-during-connection
       (error 'gateway-tcp-host-not-responding-during-connection
	      :foreign-host host :bridge bridge :network network :rfc-port port
	      :contained-error err))
     (chaos:chaos-connection-refused
       (error 'gateway-tcp-host-connection-refused
	      :foreign-host host :bridge bridge :network network :rfc-port port
	      :contained-error err))))

(defflavor gateway-tcp-stream-mixin
	(host port bridge network chaos:connection
	      parent-connection parent-contact-name)
	()
  :gettable-instance-variables
  :initable-instance-variables
  (:required-flavors chaos:basic-input-stream chaos:basic-output-stream))

(defmethod (sys:print-self gateway-tcp-stream-mixin) (stream ignore slashify)
  (if slashify
      (si:printing-random-object (self stream :typep)
	(princ self stream))
      (format stream "Gateway TCP Connection to ~A port ~D via ~A"
	      (send host :short-name) port (send bridge :short-name))))

;;; Sender might want bridge or real foreign host.  Latter seems a little better.
(defmethod (:foreign-host gateway-tcp-stream-mixin) ()
  host)
 
(defmethod (:connected-p gateway-tcp-stream-mixin) ()
  (and chaos:connection (eq (chaos:state chaos:connection) 'chaos:open-state)))

(defvar *gateway-unique-name-counter* 0)

(defmethod (:start-open-auxiliary-stream gateway-tcp-stream-mixin)
	   (active-p &key local-id foreign-id stream-options application-id
		     &aux aux-port local-port bridge-address name aux-conn)
  application-id
  ;; We are somewhat limited here.
  (when (or active-p
	    (not (member foreign-id '(nil :1-)))
	    (not (member local-id '(nil :same))))
    (error "Gateway streams don't support active auxiliary opens."))
  ;; Don't mix stuff up too much.
  (send self :force-output)
  (setf aux-port (if foreign-id (1- port) port))
  (setf name (format nil "C~4,'0O~3,'0O"
		     (ldb (byte 12. 0) (send net:*local-host* :chaos-address))
		     (ldb (byte 9. 0) (incf *gateway-unique-name-counter*))))
  ;; Send the magic packet
  (let* ((pkt (chaos:get-pkt))
	 (pkt-string (chaos:pkt-8b-array pkt)))
    (dotimes (i 8)
      (setf (aref pkt-string i) (char-to-ascii (aref name i))))
    (ip-store-32 aux-port pkt-string 8)
    (setf (chaos:pkt-nbytes pkt) 12.)		;8 bytes of name, 2 words of socket
    ;; Tell the gateway to do tcp listen now.
    (chaos:send-pkt chaos:connection pkt (if local-id #o210 #o212)))
  ;; Make the new connection
  (setf aux-conn (chaos:open-connection bridge name))
  (if local-id
      (progn (setf local-port port)
	     (setf bridge-address (loop for (net addr) in (send bridge :network-addresses)
					when (eq net network)
					  return addr)))
      (let* ((pkt (chaos:get-next-pkt chaos:connection))
	     (pkt8 (chaos:pkt-8b-array pkt)))
	(unless (and (= (chaos:pkt-opcode pkt) #o300)
		     (= (chaos:pkt-nbytes pkt) 6))
	  (error "Bad gensym-port-number packet returned from gateway"))
	(setf local-port (aref pkt chaos:first-data-word-in-pkt))
	(setf bridge-address (build-internet-address (aref pkt8 3) (aref pkt8 2)
						     (aref pkt8 5) (aref pkt8 4)))
	(chaos:return-pkt pkt)))
  ;; Return the new stream.
  (values (make-instance (if (getf stream-options :ascii-translation)
			     'gateway-tcp-ascii-translating-stream
			     'gateway-tcp-stream)
			 :host host :port aux-port
			 :bridge bridge :network network
			 :connection aux-conn
			 :parent-connection chaos:connection
			 :parent-contact-name name)
	  (multiple-value-call #'format nil "~D,~D,~D,~D,~D,~D"
			       (explode-internet-address bridge-address)
			       (ldb (byte 8 8) local-port) (ldb (byte 8 0) local-port))))

(defmethod (:complete-connection gateway-tcp-stream-mixin) (&key timeout)
  timeout
  ;; Tell the gateway to open chaos and wait for tcp now.
  (let ((pkt (chaos:get-pkt)))
    (chaos:send-pkt parent-connection pkt #o211))
  (open-arpa-gateway-connection bridge network parent-contact-name
				host port chaos:connection))

;;;

(defflavor gateway-tcp-stream
	()
	(gateway-tcp-stream-mixin chaos:binary8-stream))

(defflavor gateway-tcp-character-stream
	()
	(gateway-tcp-stream-mixin chaos:character-stream))

(defflavor gateway-tcp-ascii-translating-stream
	()
	(gateway-tcp-stream-mixin chaos:ascii-translating-character-stream))

(compile-flavor-methods gateway-tcp-stream gateway-tcp-character-stream
			gateway-tcp-ascii-translating-stream)



(defflavor tcp-gateway
	(server stream conn in-process out-process)
	()
  (:functions tcp-gateway-in-process tcp-gateway-out-process)
  (:initable-instance-variables server stream conn))

(defmethod (tcp-gateway-top-level tcp-gateway) ()
  (unwind-protect
      ;; Croaking at the first close is probably the wrong thing...
      (progn
	(chaos:accept conn)
	(setq in-process
	      (process-run-function "TCP Gateway Server In" #'tcp-gateway-in-process))
	(setq out-process
	      (process-run-function "TCP Gateway Server Out" #'tcp-gateway-out-process))
	(process-wait "Server Wait"
	  #'(lambda () (or (not (send in-process :active-p))
			   (not (send out-process :active-p))))))
    (tcp-gateway-abort self))
  nil)

(defmethod (tcp-gateway-abort tcp-gateway) ()
  (when in-process
    (send in-process :reset)
    (setf in-process nil))
  (when out-process
    (send out-process :reset)
    (setf out-process nil))
  (chaos:close-conn conn "Aborted" t)
  (send stream :close :abort)
  nil)

(defmethod (tcp-gateway-complete-connection tcp-gateway) ()
  (send stream :complete-connection)
  nil)

(defun-in-flavor (tcp-gateway-in-process tcp-gateway) ()
  (condition-case-if (not neti:*server-debug-flag*) (error)
       (loop
	 (unless (chaos:data-available conn)
	   (send stream :force-output)
	   (process-wait "Chaos In"
	     #'(lambda () (or (not (eq (chaos:state conn) 'chaos:open-state))
			      (chaos:data-available conn)))))
	 (when (not (eq (chaos:state conn) 'chaos:open-state))
	   (return nil))
	 (let ((pkt nil))
	   (unwind-protect
	       (progn
		 (setf pkt (chaos:get-next-pkt conn))
		 (let ((opc (chaos:pkt-opcode pkt)))
		   (selector opc =
		     ((chaos:cls-op chaos:los-op)
		      (return nil))		;closed or lost.
		     ((chaos:eof-op)		;Finishing.
		      (send stream :close))
		     ((chaos:rfc-op chaos:ans-op chaos:unc-op))	;Foobar, throw these away.
		     ((#o210 #o212)		;Open Aux connection.
		      (tcp-gateway-server-open-aux-conn
			server self pkt
			(send stream :foreign-host) (send stream :local-port)))
		     (#o211			;Activate Aux connection.
		      (tcp-gateway-server-complete-aux-conn server))
		     (otherwise
		       (send stream :string-out
			     (chaos:pkt-8b-array pkt) 0 (chaos:pkt-nbytes pkt))))))
	     (when pkt (chaos:return-pkt pkt)))))
     (error
       (tv:notify nil "TCP Gateway server got an error:~%~A" error))))

(defun-in-flavor (tcp-gateway-out-process tcp-gateway) ()
  (condition-case-if (not neti:*server-debug-flag*) (error)
       (loop
	(multiple-value-bind (seg start end)
	    (send stream :read-input-buffer)
	  (when (null seg)
	    (chaos:send-pkt conn (chaos:get-pkt) chaos:eof-op)
	    (chaos:finish-conn conn)
	    (return nil))
	  (loop for st first start then (+ st chaos:max-data-bytes-per-pkt)
		while (< st end)
		for bytes = (min (- end st) chaos:max-data-bytes-per-pkt)
		for pkt = (chaos:get-pkt)
		do (copy-array-portion seg st end (chaos:pkt-8b-array pkt) 0 bytes)
		   (setf (chaos:pkt-nbytes pkt) bytes)
		   (chaos:send-pkt conn pkt))
	  (send stream :advance-input-buffer end)))
     (error
       (tv:notify nil "TCP Gateway server got an error:~%~A" error))))

(defmethod (tcp-gateway-aux-conn-opened tcp-gateway) (local-address local-port)
  (let ((rpkt (chaos:get-pkt)))
    (setf (chaos:pkt-nbytes rpkt) 6)
    (setf (aref rpkt chaos:first-data-word-in-pkt) local-port)
    (multiple-value-bind (a b c d)
	(tcp:explode-internet-address local-address)
      (setf (aref rpkt (1+ chaos:first-data-word-in-pkt)) (dpb a (byte 8 8) b))
      (setf (aref rpkt (+ 2 chaos:first-data-word-in-pkt)) (dpb c (byte 8 8) d)))
    (chaos:send-pkt conn rpkt #o300))
  nil)

(defmethod (tcp-gateway-peek-item tcp-gateway) ()
  (tv:scroll-parse-item
    `(:function ,#'(lambda () (chaos:foreign-host conn)) () nil ("     Connecting ~A"))
    `(:function ,#'(lambda () (send stream :foreign-host)) () nil (" with ~A"))
    `(:function ,#'(lambda () (send stream :foreign-port)) () nil (" port ~D."))))

(compile-flavor-methods tcp-gateway)



(defflavor tcp-gateway-server
	((main-gateway) (aux-gateway))
	(chaos:chaos-server))

(net:define-server :tcp-gateway (:medium :chaos :flavor tcp-gateway-server :who-line t))

(defmethod (:server-top-level tcp-gateway-server) ()
  (let ((main-conn (send self :conn)))
    (unwind-protect
	(condition-case-if (not neti:*server-debug-flag*) (error)
	     (let* ((pkt (chaos:get-next-pkt main-conn))
		    (str (chaos:pkt-string pkt))
		    (sp1 (string-search-char #\space str))
		    (sp2 (string-search-char #\space str :start (1+ sp1)))
		    (host-name (string-trim " " (substring str sp1 sp2)))
		    (host (if (string-search-not-set "0123456789." host-name)
			      (net:parse-host host-name)
			    (let ((internet (net:local-network-of-type :internet)))
			      (net:get-host-from-address
				(send internet :parse-address host-name)
				internet))))
		    (port (parse-integer str :start (1+ sp2) :radix 8)))
	       (chaos:return-pkt pkt)
	       (setf main-gateway
		     (make-instance 'tcp-gateway
				    :server self :conn main-conn
				    :stream (tcp:open-tcp-stream host port nil
								 :timeout (* 60 15)
								 :characters nil))))
	   (error
	     (chaos:reject main-conn (format nil "~A" error))
	     (setf main-conn nil)))
      (when (and (null main-gateway) main-conn)
	(chaos:close-conn main-conn "Aborted" t))))
  (when main-gateway
    (tcp-gateway-top-level main-gateway)))

(defmethod (tcp-gateway-server-open-aux-conn tcp-gateway-server)
	   (gateway pkt foreign-host local-port)
  (unless (eq gateway main-gateway) (error "Only on main connection."))
  (when aux-gateway
    (tcp-gateway-abort aux-gateway)
    (setf aux-gateway nil))
  (block open
    ;; Open an auxiliary connection, as described by this packet.
    (let* ((opc (chaos:pkt-opcode pkt))
	   (string (chaos:pkt-string pkt))
	   (contact-name (substring string 0 8))
	   (port (aref pkt (+ 5 chaos:first-data-word-in-pkt))))
      (when (= opc #o212) (setf local-port nil))
      (setf port (dpb (ldb (byte 8 0) port) (byte 8 8) (ldb (byte 8 8) port)))
      (let ((aux-conn (chaos:listen contact-name chaos:*default-window-size* nil)))
	(unless (and (process-wait-with-timeout "Aux Listen" (* 30 60)
		       #'(lambda ()
			   (not (eq (chaos:state aux-conn) 'chaos:listening-state))))
		     (member (chaos:state aux-conn) '(chaos:rfc-received-state
						       chaos:brd-received-state
						       chaos:open-state)))
	  ;; Didn't make it.
	  (chaos:remove-conn aux-conn)
	  (setf aux-conn nil)
	  (return-from open))
	;; Okay, got RFC.  Listen for the aux TCP connection.
	;; Don't walk the TCP conn thru until we get a 211 pkt.
	(let ((aux-stream (tcp:tcp-listen foreign-host port local-port :characters nil
					  :wait-for-syn nil)))
	  (setf aux-gateway (make-instance 'tcp-gateway
					   :server self :conn aux-conn :stream aux-stream))
	  (when (null local-port)
	    ;; User didn't say what local port to use, so we had TCP make it up.
	    ;; Tell user what that local port is in a 300 packet.
	    (tcp-gateway-aux-conn-opened main-gateway
					 (send aux-stream :local-address)
					 (send aux-stream :local-port)))))))
  nil)

(defmethod (tcp-gateway-server-complete-aux-conn tcp-gateway-server) ()
  ;; Okay, time to activate the pending aux connection.  User is waiting now.
  (block complete
    ;; If none pending, skip all this.
    (when aux-gateway
      ;; Walk this through.
      (ignore-errors				;if error, throw right outa here.
	(tcp-gateway-complete-connection aux-gateway)
	;; Made it!  The new process(es) will accept the RFC now.  Spawn them.
	(process-run-function "TCP-GATEWAY Aux Server" #'tcp-gateway-top-level aux-gateway)
	;; Okay.  Pop out of here past the "lose" code below.
	(return-from complete nil))
      ;; Presumably lost above.  Undo everything.
      (tcp-gateway-abort aux-gateway)
      (setf aux-gateway nil))))

(defmethod (:peek tcp-gateway-server) ()
  (list ()
	(tcp-gateway-peek-item main-gateway)
	(tv:scroll-maintain-list #'(lambda () (when aux-gateway (list aux-gateway)))
				 #'tcp-gateway-peek-item)))

(compile-flavor-methods tcp-gateway-server)

(chaos:add-contact-name-for-protocol :tcp-gateway "TCP")
