;; -*- Mode: Lisp; Package: TCP; Lowercase: Yes; Syntax: Common-lisp -*-
;; Internet Control Message Protocol
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defvar *icmp-echo-sequence* 0)

;; Data Structures

(defstruct (icmp :conc-name
		 (:type vector)
		 (:constructor nil)
		 :size-symbol)
  type
  code
  checksum-high
  checksum-low
  data-1
  data-2
  data-3
  data-4)

(defmacro alter-icmp
	  (item &rest keys-and-values)
  `(progn
     ,@(loop for (key value . nil) on keys-and-values by #'cddr
	     collect `(setf (,(intern
				(string-append "ICMP-" key))
			     ,item)
			    ,value))))

(defstruct (icmp-echo-conn :conc-name :constructor)
  identifier
  process
  pending-pkts)


(defflavor icmp-protocol
	((echoes-outstanding)
	 (checksum-errors 0)
	 (echoes-in 0)
	 (errors-out 0)
	 (redirects-out 0)
	 (conns))
	(ip-protocol-mixin)
  :gettable-instance-variables)

(defmethod (:protocol-name icmp-protocol) () "ICMP")

(defmethod (:packet-structure-symbol icmp-protocol) () 'icmp)

(defmethod (:reset icmp-protocol) ())

(defmethod (:receive-ip-packet icmp-protocol) (icmp length source destination)
  (neti:with-network-packet (icmp)
    (cond ((ip-check-checksum icmp 0 2 length)
	   (let ((internet (send network :network))
		 (neti:*inhibit-validity-checking* t))	D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");Don't do namespace queries
0	     (ip-notify nil "ICMP bad checksum length ~D ~A -> ~A"
			length
			(neti:get-host-from-address source internet)
			(neti:get-host-from-address destination internet))
	     (incf checksum-errors)))
	  (t (let ((log-it))
	       (case (icmp-type icmp)
		 ;;Echo Reply
		 (0 (case (icmp-data-1 icmp)
		      (0 (let ((echo (assoc (ip-load-16 icmp 6) echoes-outstanding)))
			   (when echo (setf (cdr echo) (time:time)))))
		      (255 (send network :icmp-alive source))
		      (otherwise
			(let ((conn (find (icmp-data-1 icmp) conns
					  :test '= :key 'icmp-echo-conn-identifier)))
			  (when conn
			    (without-interrupts
			      (setf (icmp-echo-conn-pending-pkts conn)
				    (nconc (icmp-echo-conn-pending-pkts conn)
					   (ncons icmp))))
			    (let ((process (icmp-echo-conn-process conn)))
			      (when process
				(process:process-wakeup process)))
			    (setf icmp nil))))))
		 ;;Destination Unreachable
		 (3 (send network :note-destination-unreachable
			  (neti:get-sub-packet icmp 'sys:art-8b icmp-size)
			  (icmp-code icmp))
		    (setf log-it t))
		 ;;Source Quench
		 (4 (send network :icmp-source-quench source
			  (neti:get-sub-packet icmp 'sys:art-8b icmp-size))
		    (setf log-it t))
		 ;;Redirect
		 (5 (send network :icmp-redirect source
			  (neti:get-sub-packet icmp 'sys:art-8b icmp-size)
			  (load-internet-address icmp 4)
			  (case (icmp-code icmp)
			    ((0 2) nil)
			    ((1 3) t))))
		 ;;Echo
		 (8 (incf echoes-in)
		    (setf (icmp-type icmp) 0)
		    (ip-set-checksum icmp 0 2 length)
		    (send self :transmit-ip-packet icmp length
			  (send network :route-to-address source) destination source t)
		    (setq icmp nil))
		 ;;Time Exceeded (11), Parameter Problem (12), Timestamp (13), Timestamp Reply
		 ;;(14), Information Request (15), Information Reply (16), or any others
		 (otherwise (setf log-it t)))
	       (when log-it
		 (ip-notify nil "~A (~A->~A)"
			    (with-output-to-string (stream)
			      (send self :display-ip-packet icmp length
				    source destination
				    stream protocol-number))
			    (neti:unparse-internet-address source)
			    (neti:unparse-internet-address destination))))))
    (when icmp (ip-return-packet icmp))))

;;; IP interface

(defmethod (:ip-error icmp-protocol) (ip header-length source type code)
  (let* ((route (send network :route-to-address source))
	 (interface (ip-route-interface route)))
    (when (and interface (not (eq interface :broadcast)))
      (let* ((icmp (ip-get-packet route t))
	     (length (+ icmp-size header-length 8)))
	(when icmp
	  (setf (icmp-type icmp) type)
	  (setf (icmp-code icmp) code)
	  (copy-array-portion ip 0 (- length icmp-size) icmp icmp-size length)
	  (ip-set-checksum icmp 0 2 length)
	  (send self :transmit-ip-packet icmp length route
		(ip-interface-local-address (ip-route-interface route)) source t)
	  (incf errors-out))))))

(defmethod (:ip-send-redirect icmp-protocol)
	   (ip header-length destination real-route source-interface)
  (let* ((real-network (send network :network))
	 (source (send-if-handles
		   source-interface :packet-protocol-source-address real-network ip)))
    (when source
      (let* ((route (send network :route-to-address source))
	     (icmp (ip-get-packet route t))
	     (length (+ icmp-size header-length 8)))
	1;;; Don't send redirects to ourself
0	(when (not (eq (ip-interface-instance (ip-route-interface route)) :local))
	  (ip-notify nil "ICMP Send Redirect to ~A so ~A goes via ~A"
		     (unparse-internet-address source)
		     (unparse-internet-address destination)
		     (unparse-internet-address (ip-route-gateway-address real-route)))
	  (when icmp
	    (setf (icmp-type icmp) 5)
	    (setf (icmp-code icmp) 1)
	    (setf (load-internet-address icmp 4)
		  (ip-route-gateway-address real-route))
	    (copy-array-portion ip 0 (- length icmp-size) icmp icmp-size length)
	    (ip-set-checksum icmp 0 2 length)
	    (send self :transmit-ip-packet icmp length route
		  (send source-interface :protocol-address real-network) source t)
	    (incf redirects-out)))))))

(defmethod (:icmp-ping-gateway icmp-protocol) (gateway)
  (send self :icmp-send-echo-internal gateway
	(ip-interface-local-address (ip-route-interface gateway))
	(ip-route-gateway-address gateway)
	255))

(defmethod (:icmp-send-echo-internal icmp-protocol)
	   (route local-address foreign-address id &optional (length 8) (sequence 0))
  (let ((icmp (ip-get-packet route)))
    (alter-icmp icmp :type 8 :code 0 :data-1 id :data-2 0)
    (ip-store-16 sequence icmp 6)
    (loop for i from 8 below length
	  do (setf (aref icmp i) (logand i #o377)))
    (ip-set-checksum icmp 0 2 length)
    (send self :transmit-ip-packet icmp length route local-address foreign-address t)))

;;; Debugging

(defun-in-flavor (icmp-display-contained-packet icmp-protocol) (icmp length stream)
  (send network :display-header
	(make-array (min 64 (- length icmp-size)) :element-type '(unsigned-byte 8)
		    :displaced-to icmp :displaced-index-offset icmp-size)
	stream))

(defmethod (:display-ip-packet icmp-protocol) (icmp length source dest stream ignore)
  (let ((internet (send network :network)))
    (flet ((convert-address (address)
	     (and address
		  (let ((host
			  (let ((neti:*inhibit-validity-checking* t))
			    (neti:get-host-from-address address internet t))))
		    (unless (eq host net:*local-host*)
		      (if host (neti:host-short-name host) (unparse-internet-address address)))))))
      (format stream " ICMP~@[ from ~A~]~@[ to ~A~]: "
	      (convert-address source) (convert-address dest))))
  (unless (< length icmp-size)
    (case (icmp-type icmp)
      ;;Echo Reply
      (0 (format stream "Echo Reply ~D ~D ~D"
		 (icmp-code icmp)
		 (ip-load-16 icmp 4)
		 (ip-load-16 icmp 6)))
      ;;Destination Unreachable
      (3 (format stream "~[Net Unreachable~;Host Unreachable~;Protocol Unreachable~;Port Unreachable~;Failed to Fragment~;Source Route Failed~] "
		 (icmp-code icmp))
	 (icmp-display-contained-packet icmp length stream))
      ;;Source Quench
      (4 (format stream "Source Quench ")
	 (icmp-display-contained-packet icmp length stream))
      ;;Redirect
      (5 (format stream "Redirect ~[Network~;Host~;Network/TOS~;Host/TOS~] to ~A"
		 (icmp-code icmp) (unparse-internet-address
				    (load-internet-address icmp 4)))
	 (icmp-display-contained-packet icmp length stream))
      ;;Echo
      (8 (format stream "Echo ~D ~D ~D"
		 (icmp-code icmp) (ip-load-16 icmp 4) (ip-load-16 icmp 6)))
      ;;Time Exceeded
      (11 (format stream "~[Time to Live~;Reassembly Time~] Exceeded " (icmp-code icmp))
	  (icmp-display-contained-packet icmp length stream))
      ;;Parameter Problem
      (12 (format stream "Parameter Problem at octet ~D " (icmp-data-1 icmp))
	  (icmp-display-contained-packet icmp length stream))
      ;;Timestamp
      (13 (format stream "Timestamp ~D ~D: ~D ~D ~D" (ip-load-16 icmp 4) (ip-load-16 icmp 6)
		  (ip-load-32 icmp 8) (ip-load-32 icmp 12) (ip-load-32 icmp 16)))
      ;;Timestamp Reply
      (14 (format stream "Timestamp Reply ~D ~D: ~D ~D ~D"
		  (ip-load-16 icmp 4) (ip-load-16 icmp 6)
		  (ip-load-32 icmp 8) (ip-load-32 icmp 12) (ip-load-32 icmp 16)))
      ;;Information Request
      (15 (format stream "Information Request ~D ~D" (ip-load-16 icmp 4) (ip-load-16 icmp 6)))
      ;;Information Reply
      (16 (format stream "Information Reply ~D ~D" (ip-load-16 icmp 4) (ip-load-16 icmp 6)))
      (otherwise (format stream "unknown type ~D" (icmp-type icmp))))))

(defmethod (:peek icmp-protocol) ()
  (list ()
	(tv:scroll-parse-item
	  `(:function send (,self :checksum-errors) nil ("Meters:  Checksum errors: ~5D"))
	  `(:function send (,self :echoes-in) nil ("  Echoes in: ~5D"))
	  `(:function send (,self :errors-out) nil ("  Errors out: ~5D"))
	  `(:function send (,self :redirects-out) nil ("  Redirects out: ~5D"))
	  )))
(defmethod (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(reset-meters icmp-protocol)0 ()
  (setf checksum-errors 0
	echoes-in 0
	errors-out 0
	redirects-out 0))

;;; Commands

(defmethod (:icmp-send-echo icmp-protocol) (host &optional length delay)
  (setf length (max 8 (or length 8)))
  (multiple-value-bind (route local-address foreign-address)
      (send network :route-to-host host)
    (let ((sequence (process:atomic-updatef *icmp-echo-sequence*	
			#'(lambda (x)
			    (if (< x 65535)
				(1+ x)
				0)))
		    ))
      (send self :get-echo-reply sequence)
      (process::atomic-push (ncons sequence) echoes-outstanding)
      (send self :icmp-send-echo-internal
	    route local-address foreign-address 0 length sequence)
      (prog1 (process-wait-with-timeout
		 (string-append "ICMP Echo "
				(or (neti:host-short-name host) ""))
		 (or delay (* 5 60))
	       #'(lambda (icmp sequence)
		   (not (null (send icmp :echo-reply sequence))))
	       self sequence)
	     (send self :get-echo-reply sequence)))))

(defmethod (:echo-reply icmp-protocol) (address)
  (let ((echo (assoc address echoes-outstanding)))
    (and echo (cdr echo))))

(defmethod (:get-echo-reply icmp-protocol) (address)
  (let ((echo (assoc address echoes-outstanding)))
    (when echo (process:atomic-updatef echoes-outstanding
			#'(lambda (x) (delete echo x))))))

(defmethod (:send-misleading-redirect icmp-protocol)
	   (host-address-to-mislead subnet target-address)
  (let* ((real-network (send network :network))
	 (destination (send real-network :parse-address host-address-to-mislead))
	 (subnet-number (send real-network :parse-address subnet))
	 (target (send real-network :parse-address target-address))
	 (route (send network :route-to-address destination))
	 (icmp (ip-get-packet route t))
	 (length (+ icmp-size 20 8)))
    (when icmp
      (setf (icmp-type icmp) 5)
      (setf (icmp-code icmp) 0)
      (setf (load-internet-address icmp 4) target)
      (let ((ip (neti:get-sub-packet icmp 'sys:art-8b 8)))
	(store-internet-address destination ip 12)
	(store-internet-address subnet-number ip 16))
      (ip-set-checksum icmp 0 2 length)
      (send self :transmit-ip-packet icmp length route
	    (loop for (net addr) in (send net:*local-host* :network-addresses)
		  when (eq net real-network)
		  return addr)
	    destination t))))


;;; ICMP Echo "connections"

(defmacro with-icmp-echo-conn ((conn icmp) &body body)
  `(let ((,conn nil))
     (unwind-protect
	 (progn
	   (setf ,conn (open-icmp-echo-conn ,icmp))
	   ,@body))
     (when ,conn
       (close-icmp-echo-conn ,icmp ,conn))))

(defmethod (open-icmp-echo-conn icmp-protocol) ()
  (loop for i from 1 below 255
	when (null (find i conns :test '= :key 'icmp-echo-conn-identifier))
	  do (let ((conn (make-icmp-echo-conn :identifier i :process *current-process*)))
	       (without-interrupts (push conn conns))
	       (return conn))
	finally (error "All ICMP echo conns in use")))

(defmethod (close-icmp-echo-conn icmp-protocol) (conn)
  (without-interrupts (setf conns (delete conn conns)))
  (loop for pkt in (icmp-echo-conn-pending-pkts conn)
	do (ip-return-packet pkt)))

(defmacro with-next-icmp-echo-conn-packet ((pkt conn icmp) &body body)
  `(let ((,pkt nil))
     (unwind-protect
	 (progn
	   (setf ,pkt (receive-icmp-echo-conn-packet ,icmp ,conn))
	   ,@body))
     (when ,pkt
       (ip-return-packet ,pkt))))

(defmethod (icmp-echo-conn-packet-pending-p icmp-protocol) (conn)
  (not (null (icmp-echo-conn-pending-pkts conn))))

(defmethod (receive-icmp-echo-conn-packet icmp-protocol) (conn)
  (without-interrupts
    (prog1
      (car (icmp-echo-conn-pending-pkts conn))
      (setf (icmp-echo-conn-pending-pkts conn) (cdr (icmp-echo-conn-pending-pkts conn))))))

(compile-flavor-methods icmp-protocol)


;;; User interface

;(export 'send-icmp-echo)
(defun send-icmp-echo (host &key length timeout)
  (setq host (net:parse-host host))
  (send (ip-network-for-host host) :icmp-send-echo host length timeout))

;;; Initializations

(define-ip-protocol 1 icmp-protocol (:icmp-send-echo :send-misleading-redirect))
