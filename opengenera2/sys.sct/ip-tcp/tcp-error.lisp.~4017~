;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;; Transmission Control Protocol -- error support
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defflavor tcp-error () ()
  (:required-flavors net:network-error))

(defflavor remote-tcp-error
	(network neti:connection neti:foreign-host)
	(tcp-error)
  (:gettable-instance-variables network)
  (:required-flavors net:remote-network-error))

(defmethod (make-instance remote-tcp-error) (&rest ignore)
  (setq neti:foreign-host (tcb-foreign-host-object neti:connection))
  (setq network (send (tcb-network neti:connection) :network)))

(defmethod (:network-type tcp-error) () :tcp)

(defflavor tcp-stream-closed () (tcp-error net:network-stream-closed))

(defflavor tcp-connection-error
	(local-port foreign-port neti:protocol-name neti:connection)
	(remote-tcp-error)
  (:required-flavors net:connection-error))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; A connection error report can allow IP to pick a different route (address) if
;;; one is available.
0(defmethod (make-instance tcp-connection-error) (&rest ignore)
  (setq local-port (tcb-local-port neti:connection))
  (setq foreign-port (tcb-foreign-port neti:connection))
  (send (tcb-protocol neti:connection) :report-failing-route
	(tcb-route neti:connection) (tcb-foreign-address neti:connection))
  nil)

(defmethod (:print-request-name tcp-connection-error) (stream)
  (if neti:protocol-name
      (princ neti:protocol-name stream)
    (format stream "~D~@[(~S)~]~D~@[(~S)~]"
	    local-port   (tcp-port-protocol-name local-port)
	    foreign-port (tcp-port-protocol-name foreign-port))))

(defflavor tcp-host-not-responding-during-connection
	(tcp-connection-state foreign-internet-address neti:connection)
	(tcp-connection-error net:host-not-responding-during-connection))

(defmethod (make-instance tcp-host-not-responding-during-connection) (&rest ignore)
  (setq tcp-connection-state (tcb-state neti:connection))
  (setq foreign-internet-address (tcb-foreign-address neti:connection)))

(defmethod (:report tcp-host-not-responding-during-connection) (stream)
  (case tcp-connection-state
    (:listen
     (format stream "Timeout while waiting for ~A to connect to port ~D~@[(~S)~]."
	     neti:foreign-host
	     local-port (tcp-port-protocol-name local-port)))
    (otherwise
     (format stream "~A (at Internet address ~A) did not respond to a "
	     neti:foreign-host (unparse-internet-address foreign-internet-address))
     (send self :print-request-name stream)
     (send stream :string-out " request."))))

(defflavor tcp-host-stopped-responding () (remote-tcp-error net:host-stopped-responding))

(defflavor tcp-destination-unreachable () ())

(defmethod (:report tcp-destination-unreachable :after) (stream)
  (format stream "~%Either the destination does not support that protocol or some gateway could not determine a route to the destination."))

(defflavor tcp-destination-unreachable-during-connection ()
	   (tcp-destination-unreachable tcp-host-not-responding-during-connection))

(defflavor tcp-destination-became-unreachable ()
	   (tcp-destination-unreachable tcp-host-stopped-responding))

(defflavor tcp-connection-refused
	((neti:reason nil))
	(tcp-connection-error net:connection-refused))

(defflavor tcp-connection-closed ((neti:reason nil)) (remote-tcp-error net:connection-closed))

(defflavor tcp-connection-closed-locally () (remote-tcp-error net:connection-closed-locally))

(defflavor tcp-connection-reset ((neti:reason nil)) (remote-tcp-error net:connection-lost))

(defflavor tcp-connection-no-more-data () (remote-tcp-error net:connection-no-more-data))

(defflavor bad-tcp-connection-state
	(state)
	(remote-tcp-error net:bad-connection-state)
  :initable-instance-variables)

(defmethod (:report bad-tcp-connection-state) (stream)
  (format stream "Attempt to ~A ~:[a connection~;~:*~S~% ~] which unexpectedly went into ~A state."
	  neti:attempt neti:connection state))

(defflavor bad-tcp-state-in-connect
	()
	(tcp-connection-error net:connection-error bad-tcp-connection-state))

(defmethod (:report bad-tcp-state-in-connect) (stream)
  (format stream "~:[Connection~;~:*~S~% ~] went into ~A.~@
		  While trying to connect to ~A at port ~D~@[(~S)~]."
	  neti:connection state neti:foreign-host
	  foreign-port (tcp-port-protocol-name foreign-port)))

(compile-flavor-methods tcp-stream-closed
			tcp-host-not-responding-during-connection
			tcp-host-stopped-responding
			tcp-destination-unreachable-during-connection
			tcp-destination-became-unreachable
			tcp-connection-refused
			tcp-connection-closed
			tcp-connection-closed-locally
			tcp-connection-no-more-data
			tcp-connection-reset
			bad-tcp-connection-state
			bad-tcp-state-in-connect
			)


(defun bad-tcp-connection-state (tcb attempt
				 &aux (state (tcb-state tcb)) (substate (tcb-substate tcb))
				 error-type)
  (setq error-type (case state
		     (:closed (case substate
				(:reset 'tcp-connection-reset)
				((:locally :aborted :implementation-error :resetting-tcp)
				 'tcp-connection-closed-locally)
				(:timeout 'tcp-host-stopped-responding)
				(:destination-unreachable 'tcp-destination-became-unreachable)
				(otherwise nil)))
		     (:close-wait 'tcp-connection-no-more-data)
		     (otherwise nil)))
  (if error-type
      (error error-type
	     :connection tcb
	     :attempt attempt)
    (error 'bad-tcp-connection-state
	   :connection tcb
	   :attempt attempt
	   :state state)))

#+ignore (
(setf zwei:*lisp-indent-offset-alist*
      (delete 'tcp-implementation-error zwei:*lisp-indent-offset-alist*))
(push '(tcp-implementation-error 1 1) zwei:*lisp-indent-offset-alist*)
)


(defun tcp-implementation-error (fatal format-string &rest format-args)
  (cond (fatal
	 (setq *tcp-enable* nil)
	 (error "TCP implementation error: ~~?~~%TCP has been disabled."
		format-string format-args))
	(t
	 (cerror "Resume and do error recovery"
		 "TCP implementation error: ~~?~"
		 format-string format-args))))
