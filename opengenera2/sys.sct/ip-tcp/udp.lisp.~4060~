;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;; User Datagram Protocol
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;; Data Structures

(defstruct (udp-leader :conc-name
		       (:constructor nil)
		       (:include neti:sub-packet)
		       (:type vector)
		       :size-symbol
		       :array-leader)
  next
  length)

(defstruct (udp-header :conc-name
		       (:constructor nil)
		       (:type vector)
		       :size-symbol)
  source-port-high
  source-port-low
  destination-port-high
  destination-port-low
  length-high
  length-low
  checksum-high
  checksum-low)

(defselect ((udp-header named-structure-invoke))
  (:describe (udp)
    (describe-defstruct udp 'udp-header)
    (describe-defstruct udp 'udp-leader)))

;; Errors

(defflavor udp-error () (internet-error))

(defflavor udp-no-response () (udp-error net:host-not-responding-during-connection))

(defflavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")udp-destination-unreachable 0(icmp-code) (udp-no-response)
  (:initable-instance-variables icmp-code)
  (:required-init-keywords :icmp-code)
  (:gettable-instance-variables icmp-code))

(defmethod 1(:report udp-destination-unreachable0 1:after)0 (stream)
  (format stream "~&The ~[net is unreachable~;~
                          host is unreachable~;~
                          protocol is unreachable~;~
                          port is unreachable~;~
                          packet failed to fragment~;~
                          source route failed~]."
	  icmp-code))

(compile-flavor-methods udp-destination-unreachable)

(defmethod (:print-request-name udp-no-response) (stream)
  (let ((local-port (send neti:connection :local-port))
	(foreign-port (send neti:connection :foreign-port)))
    (format stream "UDP ~D~@[(~S)~]~D~@[(~S)~]"
	    local-port (udp-port-protocol-name local-port)
	    foreign-port (udp-port-protocol-name foreign-port))))

(compile-flavor-methods udp-no-response)
;;; Protocol stuff

;(export 'udp-port-protocol-name)
(defun udp-port-protocol-name (udp-port-number &optional errorp)
  (or (cdr (assoc udp-port-number *udp-protocol-alist*))
      (and errorp (error "UDP port ~D does not have a protocol name." udp-port-number))))

;(export 'protocol-name-udp-port)
(defun protocol-name-udp-port (protocol-name &optional errorp)
  (or (car (rassoc protocol-name *udp-protocol-alist*))
      (and errorp (error "Protocol ~S does not have a UDP port number." protocol-name))))

;;; Flavors

(defflavor udp-protocol
	((conn-list nil)
	 (checksum-errors 0)
	 (bad-format-errors 0)
	 (bad-port-errors 0))
	(ip-protocol-mixin)
  :gettable-instance-variables
  (:settable-instance-variables checksum-errors))
(defflavor udp-conn
	((route)
	 local-address
	 local-port
	 foreign-address
	 (host-addresses)			(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");multiple-interfaces
0	 foreign-port
	 (no-checksum)
	 (dead)
	 (in-head)
	 udp-protocol
	 protocol-number
	 (pkts-in 0)
	 (pkts-out 0)
	 (server)
	 (waiting-process *current-process*)
	 (packet-size nil))
	(si:buffered-binary-stream
	 si:unsigned-byte-8-with-character-io-mixin)
  (:initable-instance-variables
   udp-protocol protocol-number route local-address local-port foreign-address foreign-port
   server waiting-process packet-size)
  :gettable-instance-variables
  (:settable-instance-variables no-checksum foreign-port waiting-process))

2;;; Tell IP to use another route if possible next time.
0(defun-in-flavor (report-connection-error udp-conn) (signal-error)
  (let ((ip-protocol (send udp-protocol :network)))
    (send ip-protocol :report-failing-route route foreign-address)
    (when signal-error
      (if (consp dead)
	  (apply #'signal dead)
	  (error 'udp-no-response
		 :connection self
		 :network (send ip-protocol :network)
		 :foreign-host (send self :foreign-host))))))

(defmethod (:report-connection-error udp-conn) (signal-error)
  (report-connection-error signal-error))

2;;; A handy print method
0(defmethod (sys:print-self udp-conn) (stream print-depth slashify-p)
  (declare (ignore print-depth slashify-p))
  (sys:printing-random-object (self stream :typep)
    (let ((network (send (send udp-protocol :network) :network))
	  (cl:*print-pretty* nil)
	  (cl:*print-length* nil))
      (format stream
	      "~~A~@[(~A)~].~D~@[(~S)~]~A~@[(~A)~].~D~@[(~S)~]~@[ (~A)~]~"
	      (unparse-internet-address local-address)
	      (net:get-host-from-address local-address network t)
	      local-port
	      (udp-port-protocol-name local-port)
	      (or (and foreign-address (unparse-internet-address foreign-address)) "*")
	      (and foreign-address (net:get-host-from-address foreign-address network t))
	      (or foreign-port "*")
	      (and foreign-port (udp-port-protocol-name foreign-port))
	      (cond ((null dead) nil)
		    ((eq dead t) 'dead)
		    ((consp dead) (first dead))
		    (t dead))))))

;;; The UDP protocol itself

(defmethod (:protocol-name udp-protocol) () "UDP")

(defmethod (:packet-leader-size udp-protocol) () udp-leader-size)

(defmethod (:packet-structure-symbol udp-protocol) () 'udp-header)

(defmethod (:reset udp-protocol) ()
  (loop for conn in conn-list
	do (send conn :close :abort)))

(defmethod (:packet-buffer-panic udp-protocol) ()
  (loop for conn in conn-list
	do (send conn :flush-input-packets)))

;;; The real thing.

(defmethod (:receive-ip-packet udp-protocol) (udp length source destination)
  (let ((source-port (ip-load-16 udp 0))
	(destination-port (ip-load-16 udp 2))
	(udp-length (ip-load-16 udp 4)))
    (setf (udp-leader-length udp) udp-length)
    (setf (udp-leader-next udp) 't)
    (cond
      ((or (not (= udp-length length)) (< length 8))
       (incf bad-format-errors))
      ((and (or (not (zerop (udp-header-checksum-high udp)))
		(not (zerop (udp-header-checksum-low udp))))
	    (ip-check-checksum-dont-care udp 0 6 udp-length source destination protocol-number
					 udp-length))
       (incf checksum-errors))
      (t
       (block get-conn
	 (loop for conn in conn-list
	       when (send conn :acceptable-p source source-port destination destination-port)
		 do (send conn :receive-udp (prog1 udp (setf udp nil)))
		    (return-from get-conn))
	 (let ((broadcast-p (ip-possible-broadcast-address-p
			      network destination
			      (send network :route-to-address destination)))
	       (server (neti:find-server-named (udp-port-protocol-name destination-port nil))))
	   (when server
	     (let* ((route (send network :route-to-address source))
		    (conn (when (or (not broadcast-p)
				    (ip-route-interface route))
			    (make-instance
			      'udp-conn
			      :route route
			      :foreign-address source
			      :foreign-port source-port
			      :local-address (if broadcast-p
						 (ip-interface-local-address
						   (ip-route-interface route))
						 destination)
			      :local-port destination-port
			      :udp-protocol self
			      :protocol-number protocol-number
			      :server server
			      :packet-size (getf (neti:server-property-list server) :big-packets)
			      ))))
	       (when conn
		 (send self :add-conn conn)
		 (send conn :receive-udp (prog1 udp (setf udp nil)))
		 (neti:invoke-server server :udp (send network :network) source conn))
	       (return-from get-conn)))
	   2;; Send ICMP Port unreachable messages to non-broadcast addresses
0	   (when (not broadcast-p)
	     (ip-error-via-icmp network (prog1 (udp-leader-packet udp) (setf udp nil)) t 3 3)
	     (incf bad-port-errors)))))))
  (when udp (ip-return-packet udp)))

(defmethod (:note-destination-unreachable udp-protocol) (udp ignore source destination code)
  (loop with source-port = (ip-load-16 udp 0)
	with destination-port = (ip-load-16 udp 2)
	for conn in conn-list
	when (and (eql (send conn :local-port) source-port)
		  (eql (send conn :foreign-port) destination-port)
		  (eql (send conn :local-address) source)
		  (eql (send conn :foreign-address) destination))
	return (send conn :note-destination-unreachable code)))

;;; "Connection" Management

(defvar *udp-port-gensym* 1024)

(defmethod (:gensym-udp-port udp-protocol) ()
  (loop do (when (> (incf *udp-port-gensym*) 65535)
	     (setf *udp-port-gensym* 1024))
	when (and (null (udp-port-protocol-name *udp-port-gensym* nil))
		  (loop for conn in conn-list
			never (= *udp-port-gensym* (send conn :local-port))))
	return *udp-port-gensym*))

(defmethod (:get-udp-conn udp-protocol)
	   (foreign-host foreign-port &key local-port no-checksum waiting-process
			 packet-size)
  (multiple-value-bind (route local-address foreign-address)
      (send network :route-to-host foreign-host)
    (if local-port
	(unless (loop for conn in conn-list
		      never (= local-port (send conn :local-port)))
	  (error "Local port already in use."))
	(setf local-port (send self :gensym-udp-port)))
    (let ((conn (make-instance
		  'udp-conn :udp-protocol self :protocol-number protocol-number
		  :route route
		  :local-address local-address :local-port local-port
		  :foreign-address foreign-address :foreign-port foreign-port
		  :no-checksum no-checksum
		  :waiting-process (or waiting-process *current-process*)
		  :packet-size packet-size)))
      (send self :add-conn conn)
      conn)))

(defmethod (:add-conn udp-protocol) (conn)
  (push conn conn-list))

(defmethod (:remove-conn udp-protocol) (conn)
  (setf conn-list (delete conn conn-list)))

;;; Debugging

(defmethod (:peek udp-protocol) ()
  (list ()
	(tv:scroll-parse-item
	  "Meters:  "
	  `(:function send (,self :checksum-errors) nil ("  bad checksum: ~5D"))
	  `(:function send (,self :bad-port-errors) nil ("  unknown port: ~5D"))
	  `(:function send (,self :bad-format-errors) nil ("  bad format: ~5D")))
	(tv:scroll-parse-item "")
	(tv:peek-hidden-data
	  "Click to add/remove connection list."
	  (tv:scroll-maintain-list
	    #'(lambda () conn-list)
	    #'(lambda (conn) (send conn :peek)))
	  `(:function ,#'(lambda () (length conn-list)) nil nil ("~D connection~:p:")))))
(defmethod 1(reset-meters udp-protocol)0 ()
  (setf checksum-errors 0
	bad-port-errors 0
	bad-format-errors 0))

(defmethod (:display-ip-packet udp-protocol) (pkt pkt-length ignore ignore stream ignore)
  (format stream "~&  UDP")
  (when ( pkt-length udp-header-size)
    (let ((length (ip-load-16 pkt 4)))
      (format stream "[~5D~5D] length ~D:" (ip-load-16 pkt 0) (ip-load-16 pkt 2) length)
      (loop for i from udp-header-size below (min (+ udp-header-size 24) pkt-length)
	    do (format stream " ~16,2,'0R" (aref pkt i)))
      (format stream "  ")
      (loop for i from udp-header-size below (min (+ udp-header-size 24) pkt-length)
	    do (format stream "~C" (aref pkt i)))
      )))

;; A UDP "connection"

(defmethod (:set-local-port udp-conn) (new-port)
  (setf local-port (or new-port (send udp-protocol :gensym-udp-port))))

(defmethod (:acceptable-p udp-conn) (source source-port destination destination-port)
  (and (= local-port destination-port)
       (or (null source-port) (null foreign-port) (= source-port foreign-port))
       (or (null server) (= local-address destination)
	   2;; Catch broadcasts from the same host to the same port
0	   (ip-possible-broadcast-address-p (send udp-protocol :network) destination
					    route))
       (or (null server) (null foreign-address) (= source foreign-address)
	   2;; Handle the case of a host with multiple interfaces sending responses with
	   ;; different addresses.  All we can hope for is that the host is known to the local
	   ;; host and we can find the addresses.  We cache the addresses so we only have to
	   ;; do the lookup once.
0	   (progn
	     (unless host-addresses
	       (let* ((network (send (send udp-protocol :network) :network))
		      (addresses (let ((neti:*inhibit-validity-checking* t))
				   (send (net:get-host-from-address source network)
					 :network-addresses))))
		 (setq host-addresses
		       (loop for (net addr) in addresses
			     when (neti:network-eql net network)
			       collect addr))))
	     (member foreign-address host-addresses :test #'=)))))
(defmethod (:receive-udp udp-conn) (udp)
  (process:with-no-other-processes
    (if dead					2;conn may have been closed.
0	(when udp (ip-return-packet udp))
	(unless foreign-port (setf foreign-port (ip-load-16 udp 0)))
	(setf (udp-leader-next udp) nil)
	(if in-head
	    (loop with current = in-head
		  with next = (udp-leader-next current)
		  when (null next)
		    return (setf (udp-leader-next current) udp)
		  do (setq current next
			      next (udp-leader-next next)))
	    (progn (setf in-head udp)
		   (process:process-wakeup waiting-process)))
	(incf pkts-in))))

(defmethod (:note-destination-unreachable udp-conn) (code)
  ;; Don't report unreachable messages to broadcasts
  (unless (and foreign-address
	       (compare-internet-address foreign-address *ip-broadcast-address*))
    (send self :flush-input-packets)
    (setf dead (list 'udp-destination-unreachable
		     :icmp-code code
		     :connection self
		     :network (send (send udp-protocol :network) :network)
		     :foreign-host (send self :foreign-host)))
    (send udp-protocol :remove-conn self)
    (process:wakeup waiting-process)))

;;; UDP servers

(defmethod (:foreign-host udp-conn) ()
  2;; When we have a broadcast conn, we need to find the address from the packet since the
0  2;; foreign-address we have cached in the conn is 255.255.255.255.  But, we need to be
0  2;; careful that have an input buffer.
0  (net:get-host-from-address
    (if (and (compare-internet-address foreign-address *ip-broadcast-address*)
	     si:stream-input-buffer)
	(ip-header-source
	  (neti:get-sub-packet (udp-leader-packet si:stream-input-buffer)
			       'sys:art-8b 0 neti:sub-packet-size 'ip-header))
	foreign-address)
    (send (send udp-protocol :network) :network)))


(defmethod (:connection-pending-p udp-conn) ()
  (and (null in-head) (not dead)))

(defmethod (:check-connection-state udp-conn) ()
  (unless in-head
    (report-connection-error t)))

(defmethod (:number-of-outstanding-connections udp-conn) () 16)

(defmethod (:flush-input-packets udp-conn) (&optional ignore)
  (process:with-no-other-processes
    (loop with pkt = in-head
	  while (and pkt (neq pkt t))
	  do
	     (let ((old-pkt pkt))
	       (setq pkt (udp-leader-next pkt))
	       (ip-return-packet old-pkt))
	  finally (setf in-head nil))))

(defmethod (:close udp-conn) (&optional ignore)
  (send self :flush-input-packets)
  (setf dead 'closed)
  (send udp-protocol :remove-conn self)
  (process:wakeup waiting-process))

(defmethod (:network udp-conn) ()
  (send (send udp-protocol :network) :network))
(defun udp-conn-data-wait (conn &optional (timeout (* 120 60)))
  (process:process-block-with-timeout (and timeout (/ (float timeout) 60.0)) "UDP In"
    #'(lambda (conn) (not (send conn :connection-pending-p))) conn))
(defmethod (:next-input-buffer udp-conn) (&optional no-hang-p (timeout (* 120 60)))
  (setf waiting-process *current-process*)
  (loop unless no-hang-p do (udp-conn-data-wait self timeout)
			    (send self :check-connection-state)	2;Check to see if we timed-out
0	when dead
	  do (if (eq dead 'closed)
		 (return nil)
		 (report-connection-error t))
	for udp = in-head
	unless udp return nil
	do (process:with-no-other-processes
	     (setq in-head (udp-leader-next in-head))
	     (return (values udp udp-header-size (udp-leader-length udp) t)))))

(defmethod (:discard-input-buffer udp-conn) (udp)
  (ip-return-packet udp))

(defmethod (:new-output-buffer udp-conn) ()
  (if (numberp packet-size)
      (neti:with-big-packets (packet-size)
	(multiple-value-bind (pkt length)
	    (ip-get-packet route nil 'sys:art-8b 0 udp-leader-size 'udp-header)
	  (values pkt udp-header-size length)))
      (multiple-value-bind (pkt length)
	    (ip-get-packet route nil 'sys:art-8b 0 udp-leader-size 'udp-header)
	  (values pkt udp-header-size length))))
(defmethod (:send-output-buffer udp-conn) (udp length &optional ignore)
  (neti:with-network-packet (udp)
    (setf (udp-leader-next udp) 't)
    (ip-store-16 local-port udp 0)
    (ip-store-16 foreign-port udp 2)
    (ip-store-16 length udp 4)
    (if no-checksum
	(progn (setf (udp-header-checksum-high udp) 0)
	       (setf (udp-header-checksum-low udp) 0))
	(ip-set-checksum-dont-care
	  udp 0 6 length local-address foreign-address protocol-number length))
    (send udp-protocol :transmit-ip-packet udp length
	  route local-address foreign-address t)
    (incf pkts-out)))

(defmethod (:discard-output-buffer udp-conn) (pkt)
  (ip-return-packet pkt))

;;; Debugging

(defmethod (:peek udp-conn) ()
  (list ()
	(tv:scroll-parse-item
	  (format nil "~5D: ~A  ~5D"
		  local-port
		  (send self :foreign-host)
		  foreign-port)
	  `(:function ,#'send (,self :pkts-in) nil ("  in: ~D"))
	  `(:function ,#'send (,self :pkts-out) nil ("  out: ~D")))
	(tv:scroll-maintain-list
	  #'(lambda (conn) (send conn :in-head))
	  #'(lambda (udp)
	      (tv:scroll-parse-item
		`(:function udp-leader-length (,udp) nil ("  (length ~D)"))))
	  nil
	  #'(lambda (udp) (let ((next (udp-leader-next udp)))
			    (values udp next (null next))))
	  nil nil
	  self)))

(compile-flavor-methods udp-protocol udp-conn)
(defun udp-possible-media (protocol-name base-medium)
  (when (and (neti:medium-can-implement-base-medium :udp base-medium)
	     (protocol-name-udp-port protocol-name))
    '(:udp)))
(define-ip-protocol 17 udp-protocol (:get-udp-conn) udp-possible-media)
(defparameter 1*udp-datagram-retransmission-times* 05)
(defparameter 1*udp-datagram-timeout* 0(* 60 5))
(defparameter 1*udp-datagram-retransmission-interval* 0(* 2 60))
;;; Network interface

(net:define-medium :udp (:datagram)
  (((:network :internet)) (service-access-path
			    &key (future-p nil) (timeout *udp-datagram-timeout*)
			    no-rfc (rfc-data nil rfc-data-p)
			    characters)
   (when characters
     (error "UDP doesn't hack characters yet."))
   (multiple-value-bind (host network ignore)
       (neti:decode-service-access-path-for-medium service-access-path)
     (let ((protocol (neti:service-access-path-protocol service-access-path))
	   (conn nil)
	   (open nil)
	   (real-rfc-data nil))
       (unless no-rfc
	 (setq real-rfc-data
	       ;; Strings, arrays and keywords are allowed for rfc-data
	       (etypecase rfc-data
		 (null
		   (unless rfc-data-p
		     (let ((function (getf (neti:protocol-property-list protocol)
					   :chaos-contact-name-function)))
		       (when function
			 (let ((text (string-trim
				       '(#\space)
				       (funcall function "" service-access-path))))
			   (sys:make-stack-array (length text)
						 :element-type '(unsigned-byte 8)
						 :displaced-to text))))))
		 (string
		   (sys:make-stack-array (length rfc-data) :element-type '(unsigned-byte 8)
					 :displaced-to rfc-data))
		 (keyword
		   (let ((rfc-string (string rfc-data)))
		     (sys:make-stack-array (length rfc-string) :element-type '(unsigned-byte 8)
					   :displaced-to rfc-string)))
		 ((vector (unsigned-byte 8))
		  rfc-data))))
       (unwind-protect
	   (let ((rfc-length (length real-rfc-data)))
	     (setf conn (send network :get-udp-conn host
			      (protocol-name-udp-port (neti:protocol-name protocol) t)))
	     (unless no-rfc
	       ;; Retransmission for real :Datagram users.
	       (loop for count = 1 then (incf count)
		     until (> count *udp-datagram-retransmission-times*)
		     do
		 (multiple-value-bind (pkt start nil)
		     (send conn :new-output-buffer)
		   (when real-rfc-data
		     (copy-array-portion real-rfc-data 0 rfc-length
					 pkt start (incf start rfc-length)))
		   (send conn :send-output-buffer pkt start))
		 2;; We return when future-p is T and the host is not broadcast.  This allows
		 ;; broadcasting to do retransmission and invoke-multiple-services to do the
		 ;; right thing on non-broadcast paths.  This means we can't do broadcasts
		 ;; that do not require acknowledgement but this seems to be the best
		 ;; comprimise and is consistent with the chaos-simple medium
0		 (when (and future-p
			    (not (eq (neti:service-access-path-host service-access-path)
				     :broadcast)))
		   (return))
		 (when (udp-conn-data-wait
			 conn
			 2;; Only try the real long timeout on the last retransmission,
			 ;; otherwise use *udp-datagram-retransmission-interval*
0			 (if (= count *udp-datagram-retransmission-times*)
			     timeout
			     *udp-datagram-retransmission-interval*))
		   (return))
		     finally (send conn :report-connection-error t)))
	     (setf open t)
	     conn)
	 (when (and conn (not open))
	   (send conn :close :abort)))))))

;;;

(defun (:udp neti:invoke-service-function)
       (server medium-name medium-args general-arguments)
  medium-name
  (let ((conn (first medium-args)))
    (unwind-protect
	(with-stack-list* (arguments :connection conn general-arguments)
	  (neti:funcall-server-function server arguments))
      (send conn :close))))

;;;

(defun (:udp neti:reject-function) (reason conn)
  reason
  (send conn :close :abort))

(defun (:udp neti:datagram-function) (server general-arguments conn)
  (let ((abortp nil))
    (unwind-protect
	(multiple-value-bind (rfc rfc-offset rfc-length)
	    (send conn :read-input-buffer nil t)
	  (multiple-value-bind (pkt resp-offset resp-length)
	      (send conn :get-output-buffer)
	    (multiple-value-bind (success string-or-byte-count)
		(with-stack-list* (arguments :request-array rfc
					     :request-array-start rfc-offset
					     :request-array-end rfc-length
					     :response-array pkt
					     :response-array-start resp-offset
					     :response-array-end resp-length
					     general-arguments)
		  (neti:funcall-server-function server arguments))
	      (setq abortp (not success))
	      (when success
		(etypecase string-or-byte-count
		  (integer
		    (send conn :advance-output-buffer string-or-byte-count))
		  (string
		    (let ((length (length string-or-byte-count)))
		      (dotimes (i length)
			(setf (aref pkt (+ resp-offset i))
			      (char-code (aref string-or-byte-count i))))
		      (send conn :advance-output-buffer (+ resp-offset length))))
		  (vector
		    (let ((length (length string-or-byte-count)))
		      (copy-array-portion string-or-byte-count 0 length
					  pkt resp-offset (+ resp-offset length))
		      (send conn :advance-output-buffer (+ resp-offset length)))))))))
      (send conn :close abortp))))

