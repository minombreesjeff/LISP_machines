;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: Yes; -*-
;; Transmission Control Protocol -- debugging aids
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

  ;;
;;;;;;  Interface to IP debugging
  ;;

(defmethod (:display-ip-packet tcp-protocol) (seg length ignore ignore stream ignore)
  (format stream " TCP")
  (when ( length 20)
    (format stream
	    " ~6@{~A~} ~D->~D Seq=~D. ~@[Ack=~D. ~] Window=~D.~@[Urg=~D. ~]"
	    (if (zerop (seg-urg seg)) " " "U")
	    (if (zerop (seg-ack seg)) " " "A")
	    (if (zerop (seg-psh seg)) " " "P")
	    (if (zerop (seg-rst seg)) " " "R")
	    (if (zerop (seg-syn seg)) " " "S")
	    (if (zerop (seg-fin seg)) " " "F")
	    (seg-source-port seg)
	    (seg-destination-port seg)
	    (seq-num-abnormalize (seg-sequence seg))
	    (and (not (zerop (seg-ack seg)))
		 (seq-num-abnormalize (seg-acknowledge seg)))
	    (seg-window seg)
	    (and (not (zerop (seg-urg seg))) (seg-urgent seg)))))

(defmethod (:peek tcp-protocol) ()
  (list ()
	(tv:scroll-parse-item
	  `(:function send (,self :checksum-errors) nil ("Meters:  Checksum errors:  ~5D")))
	(tv:scroll-parse-item "")
	(tv:peek-hidden-data
	  "Click to add/remove connection list."
	  (tv:scroll-maintain-list
	    #'(lambda () (sort (copy-list *tcb-list*) #'string-lessp :key #'tcb-foreign-host))
	    #'peek-tcp-tcb)
	  `(:function (lambda () (length *tcb-list*)) () nil ("~D connection~:p:")))
	(tv:scroll-parse-item "")
	(tv:peek-hidden-data
	  "Click to add/remove meters."
	  (tv:scroll-maintain-list #'(lambda () *tcp-meters*)
				   #'(lambda (counter)
				       (tv:scroll-parse-item
					 `(:string ,(string counter) 30.)
					 `(:function symbol-value (,counter) nil
					   ("~@10A" 10. t)))))
	  "Meters:")
	))

(defun peek-tcp-tcb (tcb)
  (list ()
	(tv:scroll-parse-item "")
	(tv:scroll-parse-item
	  `(:function ,#'tcb-foreign-host-object (,tcb) nil ("Host ~A "))
	  `(:mouse-item
	     (nil :kbd (:execute (nil :eval (reset-tcb ',tcb :locally)))
		  :documentation "Forcibly close this connection.")
	     :function ,#'tcb-state (,tcb) nil)
	  `(:function ,#'tcb-local-port (,tcb) nil (", local port ~D."))
	  `(:function ,#'tcb-foreign-port (,tcb) nil (", foreign port ~D.")))
	(tv:scroll-parse-item
	  `(:function ,#'(lambda (tcb)
			   (let ((artt (tcb-average*8-round-trip-time tcb)))
			     (when artt (/ artt (* 8 60.)))))
	    (,tcb) nil ("Ave. RTT ~2,3F seconds."))
	  `(:function ,#'(lambda (tcb)
			   (let ((drtt (tcb-deviation*4-round-trip-time tcb)))
			     (when drtt (/ drtt (* 4 60.)))))
	    (,tcb) nil (", Dev. RTT ~2,3F seconds."))
	  `(:function ,#'(lambda (tcb)
			   (let ((artt (tcb-average*8-round-trip-time tcb))
				 (drtt (tcb-deviation*4-round-trip-time tcb)))
			     (when (and artt drtt)
			       (/ (+ (/ artt 8) (* 2 (/ drtt 4))) 60.))))
	    (,tcb) nil (", Suggested RTO ~2,3F seconds.")))
	(tv:scroll-parse-item
	  `(:function ,#'(lambda (tcb) (/ (tcb-current-retransmission-delay tcb) 60.))
	    (,tcb) nil ("Current retransmission delay ~2,3F seconds."))
	  `(:function ,#'tcb-retransmissions (,tcb) nil (", retransmissions ~D."))
	  `(:function ,#'(lambda (tcb)
			   ;; Tell what we really will use
			   (let ((now (zl:time))
				 (retransmit (tcb-next-retransmit-time tcb)))
			     (and retransmit
				  (if (time-lessp retransmit now)
				      0
				      (/ (time-difference retransmit now) 60.)))))
	    (,tcb) nil ("~@[, Next retransmit in ~2,3F seconds.~]")))
	(tv:scroll-parse-item
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-seq-num-acked tcb)))
	    (,tcb) nil ("Read acked ~D."))	
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-seq-num-read tcb)))
	    (,tcb) nil (", read ~D."))
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-seq-num-received tcb)))
	    (,tcb) nil (", received ~D."))
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-seq-num-limit tcb)))
	    (,tcb) nil (", offered limit ~D.")))
	(tv:scroll-parse-item
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-send-seq-acked tcb)))
	    (,tcb) nil ("Send acked ~D."))
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-next-send-seq tcb)))
	    (,tcb) nil (", next to send ~D."))
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-send-seq-limit tcb)))
	    (,tcb) nil (", imposed limit ~D."))
	  `(:function ,#'(lambda (tcb)
			   (seq-num-abnormalize (tcb-send-seq-advert tcb)))
	    (,tcb) nil (", advertised limit ~D.")))
	(tv:scroll-parse-item
	  `(:function ,#'(lambda (tcb)
			   (if (and (tcb-seq-num-limit tcb) (tcb-seq-num-acked tcb))
			       (/ (seq-num-difference (tcb-seq-num-limit tcb)
						      (tcb-seq-num-acked tcb))
				  (tcb-max-seg-size tcb))
			       0))
	    (,tcb) nil ("Receive window ~2,3F segments"))
	  `(:function ,#'(lambda (tcb)
			   (/ (tcb-send-window tcb)
			      (tcb-max-seg-size tcb)))
	    (,tcb) nil (", send window ~2,3F segments"))
	  `(:function ,#'(lambda (tcb)
			   (/ (tcb-congestion-window tcb)
			      (tcb-max-seg-size tcb)))
	    (,tcb) nil (", congestion window ~2,3F segments"))
	  	  `(:function ,#'(lambda (tcb)
			   (and (tcb-slow-start-threshold tcb)
				(/ (tcb-slow-start-threshold tcb)
				   (tcb-max-seg-size tcb))))
	    (,tcb) nil (", slow-start threshold ~2,3F segments"))
	  )))

(defun peek-close-tcb (tcb)
  (when (tv:mouse-y-or-n-p (format nil "Close ~A" tcb))
    (send-rst-for-tcb tcb (get-tcp-segment tcb t))
    (remove-tcb tcb)))

(defmethod (:server-connection-menu-choices tcp-protocol) ()
  '(("Close" :value :close
     :documentation "Close connection forcibly.")
    ("Insert Detail" :value :detail
     :documentation
     "Insert detailed info about network connection.")
    ("Remove Detail" :value :undetail
     :documentation
     "Remove detailed info from Peek display.")))

(defmethod (:do-server-connection-menu-choice tcp-protocol)
	   (peek-instance choice tcb item)
  (case choice
    (:close      (peek-close-tcb tcb))
    (:detail     (setf (array-leader item (+ 4 tv:scroll-item-leader-offset)) tcb
		       (array-leader item (+ 5 tv:scroll-item-leader-offset)) t))
    (:undetail   (setf (array-leader item (+ 4 tv:scroll-item-leader-offset)) nil
		       (array-leader item (+ 5 tv:scroll-item-leader-offset)) nil))
    )
  (send peek-instance ':set-needs-redisplay t))

(compile-flavor-methods tcp-protocol)


  ;;
;;;;;;  TCP specific utilities
  ;;

(defun collect-allocated-tcp-segments ()
  (let* ((segs nil)
	 (loc (locf segs)))
    (map-tcp-segments #'(lambda (test-seg loc)
			    (when (seg-allocated test-seg)
			      (push test-seg (cdr loc))))
		      loc)
    (nreverse segs)))

(defun record-tcp-segment-header (seg direction)
  (without-interrupts
    (let* ((idx (array-leader *recent-tcp-headers* 1))
	   (rcnt (aref *recent-tcp-headers* idx)))
      (copy-array-portion seg  0 20.		;20 byte header without options
			  rcnt 0 20.)
      (alter-tcp-recent-segment rcnt
				:direction direction
				:from (seg-source-address seg)
				:to (seg-destination-address seg)
				:length (seg-length seg)
				:recorded (time:fixnum-microsecond-time))
      (setf (array-leader *recent-tcp-headers* 1)
	    (rem (1+ idx) (array-leader *recent-tcp-headers* 0)))))
  nil)

  ;;
;;;;;;  Printout of debug info and meters.
;;;;;;  Names in here have TCP in them because there are many other
;;;;;;  things in the TCP package. 
  ;;

(defun dump-tcp-guts ()

  (show-tcp-meters)

  (show-recent-tcp-send-ack-reasons)

  (show-tcp-conns nil)

  (print-recent-tcp-headers))

(defun clear-meters ()
  (dolist (meter *tcp-meters*) (set meter 0)))

(defun show-tcp-meters ()
  (format t "~%TCP Meters:~%")
  (dolist (meter *tcp-meters*)
    (format t "  ~A: ~30T~D.~%" meter (symbol-value meter))))

(defun snapshot-tcp-meters (&optional (jiffs 600.))
  (let* ((start (without-interrupts (mapcar #'symbol-value *tcp-meters*)))
	 (stop (progn (sleep jiffs)
		      (without-interrupts (mapcar #'symbol-value *tcp-meters*))))
	 (diffs (mapcar #'- stop start))
	 (rates (mapcar #'* diffs (circular-list (truncate 60.0 jiffs)))))
    (mapcar #'list diffs rates)))

(defun show-tcp-snapshot (&optional (jiffs 600.))
  (format t "~%Meter rates: ~30TRaw~40T/sec~%")
  (loop for meter in *tcp-meters*
	for (diff rate) in (snapshot-tcp-meters jiffs)
	do (format t "  ~A: ~30T~D.~40T~6F~%" meter diff rate)))

(defun show-recent-tcp-send-ack-reasons ()
  (loop with alist = nil
	for reason being the array-elements of *recent-tcp-send-ack-reasons*
	as elem = (assoc reason alist)
	do (if elem
	       (incf (cadr elem))
	     (push (list reason 1) alist))
	finally (format t "~%Recent reasons for sending ACKs:~%~:{~20<~A~>: ~3D~%~}"
			alist)))

(defun show-tcp-conns (&optional (verbose t))
  (when *tcb-list*
    (format t "~%Active connections:")
    (dolist (tcb *tcb-list*)
      (print-tcb tcb verbose))))

(defun print-tcb (tcb &optional (verbose t))
  (format t "~%~S:~% State ~S; local ~A-~D; foreign ~A-~D (~A);~%"
	  tcb (tcb-state tcb)
	  (unparse-internet-address (tcb-local-address   tcb)) (tcb-local-port   tcb)
	  (unparse-internet-address (tcb-foreign-address tcb)) (tcb-foreign-port tcb)
	  (send (tcb-foreign-host-object tcb) ':pretty-name))
  (format t " Read #~D., Acked #~D., Avail: ~D. (in ~D segs), Limit ~D.;~%"
	  (seq-num-abnormalize (tcb-seq-num-read tcb))
	  (seq-num-abnormalize (tcb-seq-num-acked tcb))
	  (seq-num-abnormalize (tcb-seq-num-received tcb))
	  (seq-num-abnormalize (tcb-read-segs-length tcb))
	  (seq-num-abnormalize (tcb-seq-num-limit tcb)))
  (format t " Acked ~D., Next ~D., Limit ~D. Retransmission Delay ~2,3F sec;~%"
	  (seq-num-abnormalize (tcb-send-seq-acked tcb))
	  (seq-num-abnormalize (tcb-next-send-seq tcb))
	  (seq-num-abnormalize (tcb-send-seq-limit tcb))
	  (/ (tcb-current-retransmission-delay tcb) 60.))
  (let ((artt (tcb-average*8-round-trip-time tcb))
	(drtt (tcb-deviation*4-round-trip-time tcb))
	(sst (tcb-slow-start-threshold tcb))
	(cong (tcb-congestion-window tcb))
	(advert (seq-num-difference (tcb-send-seq-advert tcb) (tcb-send-seq-acked tcb)))
	(mss (tcb-max-seg-size tcb)))
    (format t
	    " Ave. RTT ~2,3F sec., Dev. RTT ~2,3F sec., Suggested RTO ~2,3F sec.~@[, Slow-start ~2,3F segs~], ~D retransmissions;~%"
	    (when artt (/ artt (* 8 60.)))
	    (when drtt (/ drtt (* 4 60.)))
	    (when (and artt drtt)
	      (/ (+ (/ artt 8) (* 2 (/ drtt 4))) 60.))
	    (and sst
		 (/ (tcb-slow-start-threshold tcb)
		    mss))
	    (tcb-retransmissions tcb))
    (format t " Receive window ~2,3F segs, send window ~2,3F segs, ~A window ~2,3F segs;~%"
	    (if (and (tcb-seq-num-limit tcb) (tcb-seq-num-acked tcb))
		(/ (seq-num-difference (tcb-seq-num-limit tcb)
				       (tcb-seq-num-acked tcb))
		   mss)
		0)
	    (/ (tcb-send-window tcb) mss)
	    (cond ((or (null sst) (< cong sst))
		   "slow-start")
		  ((< cong advert)
		   "congestion")
		  (t
		   "advertised"))
	    (/ cong mss)))
  (when (tcb-send-segs tcb)
    (format t " Send segments:~%")
    (print-seg-chain (tcb-send-segs tcb) verbose 4))
  (when (tcb-read-segs tcb)
    (format t " Read segments:~%")
    (print-seg-chain (tcb-read-segs tcb) verbose 4))
  (when (tcb-received-segs tcb)
    (format t " Received segments:~%")
    (print-seg-chain (tcb-received-segs tcb) verbose 4)))

(defun print-seg-chain (chain &optional (verbose t) (indent 0))
  (loop for seg first chain then (seg-link seg)
	while seg
	do (print-seg seg verbose indent)))

(defun print-seg (seg &optional (verbose t) (indent 0))
  (format t "~&~V@T~S: Flags: ~6@{~A~}; ~O data bytes long.~%"
	  indent
	  seg
	  (if (zerop (seg-urg seg)) "" "U")
	  (if (zerop (seg-ack seg)) "" "A")
	  (if (zerop (seg-psh seg)) "" "P")
	  (if (zerop (seg-rst seg)) "" "R")
	  (if (zerop (seg-syn seg)) "" "S")
	  (if (zerop (seg-fin seg)) "" "F")
	  (seg-length-data-only seg))
  (when verbose
    (when (neq t t)
      |Someday: hack verbose segment printing|)))


(defun print-recent-tcp-headers (&optional count)
  (let* ((elems (array-leader *recent-tcp-headers* 0))
	 (idx   (array-leader *recent-tcp-headers* 1))
	 (neti:*inhibit-validity-checking* t)
	 (network (neti:local-network-of-type :internet)))
    (if count (setq count (min count elems)) (setq count elems))
    #+ignore (  "~%In  .bits. from-from->to-to ...")
    (format t "~%Current internal time is ~6,4$ ~@
	       DIR UAPRSF from-from->to-to Sequence (Acknowledge) Window (Urgent) Recorded~%"
	    (* (time:fixnum-microsecond-time) 1.d-6))
    (loop repeat count
	  do (setq idx (rem (+ idx elems -1) elems))
	  as seg = (aref *recent-tcp-headers* idx)
	  while (seg-recent-recorded seg)
	  do (format t "~A ~6@{~A~} ~A-~D->~A-~D Seq=~D. ~@[Ack=~D. ~] Len=~D Window=~D. ~
		        ~@[Urg=~D. ~] Rcrded: ~6,4$~%"
		     (case (seg-recent-direction seg)
		       (:in  "In ")
		       (:out "Out")
		       (otherwise "???"))
		     (if (zerop (seg-urg seg)) " " "U")
		     (if (zerop (seg-ack seg)) " " "A")
		     (if (zerop (seg-psh seg)) " " "P")
		     (if (zerop (seg-rst seg)) " " "R")
		     (if (zerop (seg-syn seg)) " " "S")
		     (if (zerop (seg-fin seg)) " " "F")
		     (let ((host (neti:get-host-from-address (seg-recent-from seg) network t)))
		       (if host
			   (neti:host-short-name host)
			   (unparse-internet-address (seg-recent-from seg))))
		     (seg-source-port seg)
		     (let ((host (neti:get-host-from-address (seg-recent-to seg) network t)))
		       (if host
			   (neti:host-short-name host)
			   (unparse-internet-address (seg-recent-to seg))))
		     (seg-destination-port seg)
		     (seq-num-abnormalize (seg-sequence seg))
		     (and (not (zerop (seg-ack seg)))
			  (seq-num-abnormalize (seg-acknowledge seg)))
		     (seg-recent-length seg)
		     (seg-window seg)
		     (and (not (zerop (seg-urg seg))) (seg-urgent seg))
		     (* 1.d-6 (seg-recent-recorded seg))))))
