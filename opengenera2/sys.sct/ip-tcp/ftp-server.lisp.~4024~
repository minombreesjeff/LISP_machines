;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;;; TCP FTP Servers as file jobs.  Protocol from RFC 765.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Data streams

(defflavor ftp-server-aux-stream
	(stream)
	()
  :abstract-flavor
  (:initable-instance-variables stream))

(defflavor ftp-server-stream-mode-character-input-stream ()
	   (ftp-server-aux-stream ftp-stream-mode-character-input-mixin))

(defflavor ftp-server-stream-mode-binary-input-stream ()
	   (ftp-server-aux-stream ftp-stream-mode-binary-input-mixin))

(defflavor ftp-server-stream-mode-image-input-stream ()
	   (ftp-server-aux-stream ftp-stream-mode-image-input-mixin))

(defflavor ftp-server-block-mode-character-input-stream ()
	   (ftp-server-aux-stream ftp-block-mode-character-input-mixin))

(defflavor ftp-server-block-mode-binary-input-stream ()
	   (ftp-server-aux-stream ftp-block-mode-binary-input-mixin))

(defflavor ftp-server-block-mode-image-input-stream ()
	   (ftp-server-aux-stream ftp-block-mode-image-input-mixin))

(defflavor ftp-server-stream-mode-character-output-stream ()
	   (ftp-server-aux-stream ftp-stream-mode-character-output-mixin))

(defflavor ftp-server-stream-mode-binary-output-stream ()
	   (ftp-server-aux-stream ftp-stream-mode-binary-output-mixin))

(defflavor ftp-server-stream-mode-image-output-stream ()
	   (ftp-server-aux-stream ftp-stream-mode-image-output-mixin))

(defflavor ftp-server-block-mode-character-output-stream ()
	   (ftp-server-aux-stream ftp-block-mode-character-output-mixin))

(defflavor ftp-server-block-mode-binary-output-stream ()
	   (ftp-server-aux-stream ftp-block-mode-binary-output-mixin))

(defflavor ftp-server-block-mode-image-output-stream ()
	   (ftp-server-aux-stream ftp-block-mode-image-output-mixin))

(compile-flavor-methods ftp-server-stream-mode-character-input-stream
			ftp-server-stream-mode-binary-input-stream
			ftp-server-stream-mode-image-input-stream
			ftp-server-stream-mode-character-output-stream
			ftp-server-stream-mode-binary-output-stream
			ftp-server-stream-mode-image-output-stream
			ftp-server-block-mode-character-input-stream
			ftp-server-block-mode-binary-input-stream
			ftp-server-block-mode-image-input-stream
			ftp-server-block-mode-character-output-stream
			ftp-server-block-mode-binary-output-stream
			ftp-server-block-mode-image-output-stream)

(defflavor tcp-ftp-server
	((aux-stream) (data-stream) stream
	 type structure mode byte-size estimated-length user-name data-conn-port passive
	 logged-in
	 (working-dir (fs:parse-pathname "local:>*.*.*"))
	 rename-pathname)
	(neti:byte-stream-server)
  (:functions
   execute-command
   abor-command allo-command appe-command cdup-command cwd-command dele-command help-command
   list-command mkd-command mode-command nlst-command noop-command pass-command pasv-command
   port-command pwd-command quit-command rein-command retr-command rmd-command  rnfr-command
   rnto-command site-command stat-command stor-command stou-command stru-command syst-command
   type-command user-command xmkd-command))

(defun-in-flavor (ftp-server-initialize tcp-ftp-server) ()
  (setf type "A")
  (setf structure "F")
  (setf mode "S")
  (setf byte-size nil)
  (setf estimated-length nil)
  (setf user-name nil)
  (setf logged-in nil)
  (setf data-conn-port nil)
  (setf passive nil)
  (setf working-dir (send working-dir :new-directory :root))
  (setf rename-pathname nil))

(defmethod (make-instance tcp-ftp-server) (&rest ignore)
  (setf stream (send self :stream))
  (ftp-server-initialize))

(defun-in-flavor (ftp-reply tcp-ftp-server) (code &rest args)
  (let ((msg (apply #'format nil args)))
    (loop for start = 0 then (1+ cr-loc)
	  for cr-loc = (string-search-char #\cr msg :start start)
	  for line = (format nil "~3D~:[ ~;-~] ~A" code cr-loc (substring msg start cr-loc))
	  do (write-line line stream)
	  when *tcp-ftp-debug-p*
	    do (write-line line *trace-output*)
	  while cr-loc)
    (force-output stream)))

(defun-in-flavor (ftp-server-pathname tcp-ftp-server) (args)
  (fs:merge-pathnames (fs:parse-pathname args net:*local-host*) working-dir))

(defun-in-flavor (ftp-server-open-data-stream tcp-ftp-server) (direction)
  (when aux-stream
    (unless (send aux-stream :connected-p)
      (close aux-stream :abort t)
      (setf aux-stream nil)))
  (unless aux-stream
    (setf aux-stream (or (prog1 passive (setf passive nil))
			 (send stream :start-open-auxiliary-stream t
			       :foreign-id (or data-conn-port :same) :local-id :1-
			       :stream-options '(:characters nil))))
    (send aux-stream :complete-connection))
  (setf data-stream
	(make-instance
	  (selector mode string-equal
	    ("B"
	     (case direction
	       (:input (if (not (string-equal type "A"))
			   (if (= byte-size 8)
			       'ftp-server-block-mode-image-input-stream
			       'ftp-server-block-mode-binary-input-stream)
			   'ftp-server-block-mode-character-input-stream))
	       (:output (if (not (string-equal type "A"))
			    (if (= byte-size 8)
				'ftp-server-block-mode-image-output-stream
				'ftp-server-block-mode-binary-output-stream)
			    'ftp-server-block-mode-character-output-stream))))
	    ("S"
	     (case direction
	       (:input (if (not (string-equal type "A"))
			   (if (= byte-size 8)
			       'ftp-server-stream-mode-image-input-stream
			       'ftp-server-stream-mode-binary-input-stream)
			   'ftp-server-stream-mode-character-input-stream))
	       (:output (if (not (string-equal type "A"))
			    (if (= byte-size 8)
				'ftp-server-stream-mode-image-output-stream
				'ftp-server-stream-mode-binary-output-stream)
			    'ftp-server-stream-mode-character-output-stream)))))
	  :byte-size byte-size :stream aux-stream)))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Note:  This is really not the way to do this.  A macro called make-ftp-server-command
;;; or something like that should be created to add commands and help text to hash tables
;;; so execute-command and help-command aren't so ugly.  You would not have to modify 2
;;; functions and the server flavor to create a new command.  Since the FTP spec changes
;;; infrequently, I didn't bother with changing the whole mechanism now. -Crawley 8/13/87.

0(defun-in-flavor (execute-command tcp-ftp-server) (cmd-name args)
  (let ((cmd (selector cmd-name string-equal
	       ("ABOR" #'abor-command)		1;Abort
0	       ("ALLO" #'allo-command)		1;Allocate
0	       ("APPE" #'appe-command)		1;Append
0	       ("CDUP" #'cdup-command)		1;Change to Parent Directory
0	       ("CWD" #'cwd-command)		1;Change Working Directory
0	       ("DELE" #'dele-command)		1;Delete File
0	       ("HELP" #'help-command)		1;Help
0	       ("LIST" #'list-command)		1;List Directory
0	       ("MKD" #'mkd-command)		1;Make Directory
0	       ("MODE" #'mode-command)		1;Mode
0	       ("NLST" #'nlst-command)		1;Name List Directory
0	       ("NOOP" #'noop-command)		1;No Operation
0	       ("PASS" #'pass-command)		1;Password
0	       ("PASV" #'pasv-command)		1;Passive
0	       ("PORT" #'port-command)		1;Port
0	       ("PWD" #'pwd-command)		1;Print Directory (Present Working Directory)
0	       ("QUIT" #'quit-command)		1;Quit
0	       ("REIN" #'rein-command)		1;Reinitialize
0	       ("RETR" #'retr-command)		1;Retrieve File
0	       ("RMD" #'rmd-command)		1;Remove Directory
0	       ("RNFR" #'rnfr-command)		1;Rename From
0	       ("RNTO" #'rnto-command)		1;Rename To
0	       ("SITE" #'site-command)		1;Site Command (used for Expunge)
0	       ("STAT" #'stat-command)		1;Status
0	       ("STOR" #'stor-command)		1;Store File
0	       ("STOU" #'stou-command)		1;Store Unique
0	       ("STRU" #'stru-command)		1;Structure
0	       ("SYST" #'syst-command)		1;System
0	       ("TYPE" #'type-command)		1;Type
0	       ("USER" #'user-command)		1;User ID
0	       ("XMKD" #'xmkd-command))))	1;MKD for Unix 4.2BSD
0    (if cmd
	(condition-case (e)
	     (funcall cmd args)
	   (error (ftp-reply (typecase e
			       ((fs:file-locked
				  fs:file-open-for-output
				  fs:not-available)
				450)
			       ((fs:no-more-room)
				452)
			       ((fs:file-lookup-error fs:access-error)
				550)
			       ((fs:pathname-error)
				553)
			       (otherwise
				 451))
			     "~A" e)))
	(ftp-reply 500 "Unknown command ~A." cmd-name))))

(defmethod (:server-top-level tcp-ftp-server) ()
  (declare (special lmfs:*access-permissive* lmfs:*require-login*))
  (fs:with-automatic-login-to-sys-host
    (let ((trusted-p (send self :trusted-p)))
      (if (and (not trusted-p)			;this really ought to be site configurable.
	       (not net:*system-secured*))
	  ;; No LMFS access control and he isn't trusted.
	  (ftp-reply 421 "FTP permission denied to ~A." (send self :foreign-host))
	  ;; We trust him enough.
	  (let ((lmfs:*access-permissive* lmfs:*access-permissive*)
		(lmfs:*require-login* lmfs:*require-login*))
	    (declare (special lmfs:*access-permissive* lmfs:*require-login*))
	    ;; Untrusted users must always go through the ACL mechanism.
	    (when (not trusted-p)
	      (setf lmfs:*access-permissive* nil)
	      (setf lmfs:*require-login* t))
	    (fs:force-user-to-login)
	    (ftp-reply 220 "FTP service ready.")
	    (catch 'ftp-server-exit
	      (loop 
		(multiple-value-bind (cline eof) (read-line stream nil nil)
		  (when (or eof (null cline)) (error "Unexpected end of file."))
		  (when *tcp-ftp-debug-p*
		    (write-line cline *trace-output*))
		  (let ((spx (or (string-search-char #\space cline) (string-length cline))))
		    (execute-command (substring cline 0 spx)
				     (string-left-trim '(#\space)
						       (substring cline spx))))))))))))

(defmacro ftp-server-data-transfer (direction preliminary-reply &body body)
  `(let ((already-connected (and aux-stream (send aux-stream :connected-p)))
	 (state :open-data))
     (unwind-protect
       (progn
	 (ftp-server-open-data-stream ,direction)
	 (ftp-reply (if already-connected 125 150) "~A" ,preliminary-reply)
	 (setf state :data-xfer)
	 (progn ,@body)
	 (close data-stream)
	 (setf data-stream nil)
	 (if (send aux-stream :connected-p)
	     (ftp-reply 250 "File transfer completed.")
	     (setf aux-stream nil)
	     (ftp-reply 226 "File transfer completed."))
	 (setf state nil))
       (when state
	 (cond (aux-stream
		(close aux-stream :abort t)
		(setf aux-stream nil)))
	 (setf data-stream nil)))))

(defun-in-flavor (add-access-name tcp-ftp-server) (access-name)
  (lmfs:add-capability-raw (lmfs:look-up-user-access-name access-name 0 nil t))
  (setf logged-in t))

(defun-in-flavor (current-element-type tcp-ftp-server) ()
  (selector type string-equal
    ("A" 'string-char)
    ("I" '(unsigned-byte 8))
    ("L" `(unsigned-byte ,byte-size))))

(defun-in-flavor (check-logged-in tcp-ftp-server) ()
  (declare (special lmfs:*require-login*))
  (when (and (not logged-in) lmfs:*require-login*)
    (error "You must give the USER command before using this command.")))



(defun-in-flavor (abor-command tcp-ftp-server) (ignore)
  (ftp-reply (if aux-stream 225 226) "Transfer already complete."))

(defun-in-flavor (allo-command tcp-ftp-server) (args)	      
  (setf estimated-length (parse-integer args :sign-allowed nil))
  (if estimated-length
      (ftp-reply 200 "ALLO ~D accepted." estimated-length)
      (ftp-reply 501 "ALLO must be given a number.")))

(defun-in-flavor (appe-command tcp-ftp-server) (args)
  (check-logged-in)
  (with-open-file (file (ftp-server-pathname args)
			:direction :output :if-exists :append
			:element-type (current-element-type))
    (ftp-server-data-transfer :input
			      (format nil "Store of ~A started."
				      (send (truename file) :string-for-host))
      (stream-copy-until-eof data-stream file))))

(defun-in-flavor (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(cdup-command tcp-ftp-server)0 (ignore)
  (setf working-dir (send working-dir :up-directory-level))			  
  (ftp-reply 250 "Working directory now ~A." working-dir))


(defun-in-flavor (cwd-command tcp-ftp-server) (args)
  (setf working-dir
	(send working-dir :new-directory (send (ftp-server-pathname args) :directory)))
  (ftp-reply 250 "Working directory now ~A." working-dir))

(defun-in-flavor (dele-command tcp-ftp-server) (args)
  (check-logged-in)
  (delete-file (ftp-server-pathname args))
  (ftp-reply 250 "Done."))

(defun-in-flavor (help-command tcp-ftp-server) (args)
  (setq args (string-upcase args))
  (let ((help-string (selector args string-equal
	       ("ABOR" "(abort operation).")
	       ("ALLO" "allocate storage (not necessary on this server).")
	       ("APPE" "filename (append to file).")
	       ("CDUP" "(change to parent directory).")
	       ("CWD" "directory (change working directory).")
	       ("DELE" "filename (delete file).")
	       ("HELP" "command-name (help command).")
	       ("LIST" "pathname (directory list).")
	       ("MKD" "directory (create directory).")
	       ("MODE" "S or B (file transfer mode, stream and block are supported).")
	       ("NLST" "pathname (name list of directory).")
	       ("NOOP" "(no operation).")
	       ("PASS" "password (password command).")
	       ("PASV" "(set server to passive mode).")
	       ("PORT" "byte0, byte1, byte2, byte3, byte4 (specify a data port).")
	       ("PWD" "(print current working directory).")
	       ("QUIT" "(disconnect from server).")
	       ("REIN" "(reinitialize server).")
	       ("RETR" "filename (retrieve file).")
	       ("RMD" "directory (remove directory).")
	       ("RNFR" "filename (rename from).")
	       ("RNTO" "filename (rename to).")
	       ("SITE" "Expunge pathname (Site specific command to expunge a directory).")
	       ("STAT" "(get server status).")
	       ("STOR" "filename (store file).")
	       ("STOU" "filename (store unique is the same as store on this server).")
	       ("STRU" "file-structure (only file structure supported on this server).")
	       ("SYST" "(system type).")
	       ("TYPE" "element-type (ASCII, Image, and Logical-Byte supported).")
	       ("USER" "username.")
	       ("XMKD" "directory (same as MKD)."))))
    (if help-string
	(ftp-reply 214 "Syntax: ~A ~A" args help-string)
	(ftp-reply 214 "LISP Machine FTP server version of 12 August 1987, Protocol is RFC 959.
The following commands are recognized:
ABOR   ALLO   APPE   CDUP  CWD    DELE   HELP   LIST   MKD    MODE   NLST   
NOOP   PASS   PASV   PORT  PWD    QUIT   REIN   RETR   RMD    RNFR   RNTO  
STAT   STOR   STOU   STRU  SYST   TYPE   USER   XMKD
Use HELP command-name for the syntax of a particular command."))))
	      
(defun-in-flavor (list-command tcp-ftp-server) (args)
  (check-logged-in)
  (let* ((path (ftp-server-pathname args))
	 (files (send path :directory-list nil)))
    (ftp-server-data-transfer :output (format nil "Here comes a listing of ~A."
					      (send path :string-for-host))
      (loop for (pathname . properties) in files
	    when pathname
	      do
		(format data-stream "~a  ~d  ~@[~d~]  ~\\time\\  ~a~%"
			(send pathname :string-for-host)
			(getf properties :length-in-blocks)
			(getf properties :length-in-bytes)
			(file-write-date pathname)
			(getf properties :author))))))

(defun-in-flavor (ftp-response-quoted-pathname tcp-ftp-server) (pathname)
  (let* ((s (send pathname :string-for-host))
	 (l (length s))
	 (n (count #\" s :test #'char-equal)))
    (if (zerop n)
	s
	(loop with result = (make-string (+ n l))
	      for idx1 from 0 below l
	      as idx2 = 0 then (1+ idx2)
	      as char = (char s idx1)
	   do (when (char-equal char #\")
		(setf (aref result idx2) #\")
		(incf idx2))
	      (setf (aref result idx2) char)
	   finally (return result)))))

(defun-in-flavor (mkd-command tcp-ftp-server) (args)
  (check-logged-in)
  (ftp-reply 257 "~S Directory Created."
	     (ftp-response-quoted-pathname
	       (send (ftp-server-pathname args) :create-directory))))

(defun-in-flavor (mode-command tcp-ftp-server) (args)
  (setq args (string-upcase args))
  (cond ((member args '("S" "B") :test #'string-equal)
	 (setf mode args)
	 (ftp-reply 200 "MODE accepted."))
	(T (ftp-reply 504 "Unsupported MODE."))))

(defun-in-flavor (nlst-command tcp-ftp-server) (args)
  (check-logged-in)
  (let* ((path (ftp-server-pathname args))
	 (files (send path :directory-list '(:fast))))
    (ftp-server-data-transfer :output (format nil "Here comes a listing of ~A."
					      (send path :string-for-host))
      (loop for (pathname) in files
	    when pathname
	    do (write-line (send pathname :string-for-host) data-stream)))))

(defun-in-flavor (noop-command tcp-ftp-server) (ignore)
  (ftp-reply 200 "OK"))
	      
(defun-in-flavor (pass-command tcp-ftp-server) (args)
  (multiple-value-bind (result user)
      (lmfs:look-up-password user-name nil args)
    (cond ((eq result t)
	   (fs:log-server-login (send self :protocol) (send self :foreign-host) user-name t)
	   (add-access-name user)
	   (ftp-reply 230 "Password accepted."))
	  (t
	   (ftp-reply 530 "Password incorrect.")))))

(defun-in-flavor (pasv-command tcp-ftp-server) (ignore)
  (multiple-value-bind (pstream port)
      (send stream :start-open-auxiliary-stream nil
	    :local-id nil :foreign-id :same :stream-options '(:characters nil))
    (setf passive pstream)
    (ftp-reply 227 "~A" port)))

(defun-in-flavor (port-command tcp-ftp-server) (args)
  (setf data-conn-port args)
  (multiple-value-bind (dhost port)
      (tcp-parse-auxiliary-port (send self :network) data-conn-port
				:expected-foreign-host (send self :foreign-host))
    (ftp-reply 200 "PORT ~A (~A port ~D) accepted." data-conn-port dhost port)))

(defun-in-flavor 2(pwd-command tcp-ftp-server)0 (ignore)
  (ftp-reply 257 "\"~A\" is the current directory."
	     (send working-dir :string-for-host)))

(defun-in-flavor (quit-command tcp-ftp-server) (ignore)
  (ftp-reply 221 "Goodbye.")
  (when user-name
    (fs:log-server-logout (send self :protocol) (send self :foreign-host) user-name))
  (throw 'ftp-server-exit nil))

(defun-in-flavor (rein-command tcp-ftp-server) (ignore)
  (declare (special lmfs:*access-groups*))
  (setf lmfs:*access-groups* nil)
  (when user-name
    (fs:log-server-logout (send self :protocol) (send self :foreign-host) user-name))
  (ftp-server-initialize)
  (ftp-reply 220 "Server reinitialized"))

(defun-in-flavor (retr-command tcp-ftp-server) (args)
  (check-logged-in)
  (with-open-file (file (ftp-server-pathname args) :direction :input
			:element-type (current-element-type))
    (ftp-server-data-transfer :output
			      (format nil "Retrieve of ~A started."
				      (send (truename file) :string-for-host))
      (stream-copy-until-eof file data-stream))))


(defun-in-flavor 2(rmd-command tcp-ftp-server)0 (args)
  (check-logged-in)
  (delete-file (send (ftp-server-pathname args) :directory-pathname-as-file))
  (ftp-reply 250 "Directory deleted."))

(defun-in-flavor (rnfr-command tcp-ftp-server) (args)
  (check-logged-in)
  (when rename-pathname (error "RNFR given twice."))
  (setf rename-pathname (ftp-server-pathname args))
  (ftp-reply 350 "Rename ~A to be:" rename-pathname))

(defun-in-flavor (rnto-command tcp-ftp-server) (args)
  (check-logged-in)
  (unless rename-pathname (error "RNTO given without RNFR."))
  (multiple-value-bind (ignore old-name new-name)
      (rename-file rename-pathname (fs:merge-pathnames args rename-pathname))
    (setf rename-pathname nil)
    (ftp-reply 250 "Renamed ~A to be ~A." old-name new-name)))


1;;; The only site specific command right now is EXPUNGE.
0(defun-in-flavor 2(site-command tcp-ftp-server)0 (args)
  (let* ((spx (or (string-search-char #\space args) (string-length args)))
	 (command-string (string-upcase (substring args 0 spx)))
	 (command-args (string-left-trim '(#\space) (substring args spx))))
    (cond
      ((string-equal command-string "EXPUNGE")
       (ftp-reply 200 "~D records expunged."
		  (send (ftp-server-pathname command-args) :expunge)))
      (t (ftp-reply 501 "Unknown SITE parameters.")))))

(defun-in-flavor (stat-command tcp-ftp-server) (args)
  (cond ((string-equal args "")
	 (ftp-reply 211 "Status of FTP connection to ~A.  Data connection is ~:[closed~;open~].  TYPE ~A~:[~*~; ~D~], MODE ~A, STRU ~A."
		    net:*local-host* aux-stream type (string-equal type "L") byte-size
		    mode structure))
	(t
	 (check-logged-in)
	 (let ((path (ftp-server-pathname args)))
	   (if (send path :wild-p)
	       (let ((list (fs:directory-list path)))
		 (ftp-reply 212
			    (with-output-to-string (reply)
			      (print (list* (first list)
					    (loop for (path . props) in (cdr list)
						  collect (list* (send path :string-for-host)
								 props)))
				     reply))))
	       (let ((properties (fs:file-properties path)))
		 (ftp-reply 213 (with-output-to-string (reply)
				  (print (list* (send (first properties) :string-for-host)
						(cdr properties))
					 reply)))))))))

(defun-in-flavor (stor-command tcp-ftp-server) (args)
  (check-logged-in)
  (with-open-file (file (ftp-server-pathname args)
			:direction :output :element-type (current-element-type))
    (ftp-server-data-transfer :input
			      (format nil "Store of ~A started."
				      (send (truename file) :string-for-host))
      (stream-copy-until-eof data-stream file))))


1;;; This is the same as the STOR command for LMFS since filenames are unique.
0(defun-in-flavor 2(stou-command tcp-ftp-server)0 (args)
  (stor-command args))
	      
(defun-in-flavor (stru-command tcp-ftp-server) (args)
  (setq args (string-upcase args))
  (cond ((member args '("F") :test #'string-equal)
	 (setf structure args)
	 (ftp-reply 200 "STRU accepted."))
	(T (ftp-reply 504 "Unsupported STRUcture."))))


(defun-in-flavor 2(syst-command tcp-ftp-server)0 (ignore)
  (multiple-value-bind (system-major-version system-minor-version)
      (sct:get-system-version "system")
    (multiple-value-bind (ip-tcp-major-version ip-tcp-minor-version)
	(sct:get-system-version "ip-tcp")
      (ftp-reply 215 "LISPM Symbolics Lisp Machine, System ~d.~d, IP-TCP ~d.~d."
		 system-major-version system-minor-version ip-tcp-major-version
		 ip-tcp-minor-version))))

(defun-in-flavor (type-command tcp-ftp-server) (args)
  (selector (aref args 0) char-equal
    (#\A
     (setf type "A")
     (setf byte-size nil)
     (ftp-reply 200 "TYPE Ascii"))
    (#\I
     (setf type "I")
     (setf byte-size 8)
     (ftp-reply 200 "TYPE Image"))
    (#\L
     (setf type "L")
     (setf byte-size (parse-integer args :start 2 :sign-allowed nil))
     (if byte-size
	 (ftp-reply 200 "TYPE Logical-byte ~D." byte-size)
	 (ftp-reply 504 "Invalid byte size.")))
    (otherwise
      (ftp-reply 504 "Unsupported TYPE."))))

(defun-in-flavor (user-command tcp-ftp-server) (args)
  (declare (special lmfs:*require-login*))
  (setf user-name args)
  (setf working-dir (send working-dir :new-directory user-name))
  (cond ((null net:*system-secured*)
	 (ftp-reply 230 "USER accepted."))
	((null lmfs:*require-login*)
	 (let ((access-name nil))
	   (flet ((log-it ()
		    (fs:log-server-login (send self :protocol) (send self :foreign-host)
					 user-name nil)))
	     (case (multiple-value-bind (ok acc)
		       (lmfs:look-up-password user-name nil "")
		     (setq access-name acc)
		     ok)
	       (:no-user
		 (log-it)
		 (ftp-reply 230 "USER accepted.  No special access rights allowed."))
	       (:bad-password
		 (ftp-reply 331 "USER accepted.  Supply password to get special access."))
	       (otherwise
		 (log-it)
		 (add-access-name access-name))))))
	(t
	 (ftp-reply 331 "USER accepted.  Password required."))))

(defun-in-flavor 2(xmkd-command tcp-ftp-server)0 (args)
  (mkd-command args))

(compile-flavor-methods tcp-ftp-server)

(net:define-server 2:tcp-ftp0 (:medium :byte-stream
			     :flavor tcp-ftp-server
			     :reject-unless-trusted nil
			     :stream (nil :ascii-translation t)
			     :who-line t))


