;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;MSP, CUT, MGR

;;; PC Paintbrush
(fs:define-canonical-type :pcx "PCX")

(define-image-file-format :pcx
  :pretty-name "PC Paintbrush"
  :read-function read-image-from-pcx
  :file-stream-element-type (unsigned-byte 8)
  )

(rpc:define-octet-structure (pcx-header :access-type :unsigned-8
					:default-index 0)
  ;;0
  (unknown-1 (vector rpc:cardinal-8 4))		;#x#(0A 05 01 01)
  ;;4
  (xmin rpc:integer-16)
  (ymin rpc:integer-16)
  (xmax rpc:integer-16)
  (ymax rpc:integer-16)				;inclusive
  ;;12
  (unknown-2 (vector rpc:cardinal-8 53))	;#x#(80    02    5E    01
						;    00    00    00    00
						;    00    AA    0A/00 00/AA
						;    CB/00 53/00 4C/AA 00/AA
						;    00/AA 00    00    00/AA
						;    00    00/AA 00/AA 00/AA
						;    08/00 0A/AA FD/AA 02/AA
						;    42/55 02/55 CB/55 02/55
						;    41/55 01/FF 01/55 00/FF
						;    01/55 00/55 20/FF 20/FF
						;    20/FF 20/55 20/55 20/FF
						;    20/55 20/FF 20/FF 20/FF
						;    20/55 20/FF 20/FF 20/FF
						;    00)
  ;;65
  (nplanes rpc:integer-8)
  (row-bytes rpc:integer-16)
  ;;68
  (unknown-3 (vector rpc:cardinal-8 60))	;#x#(92 1E 03/13 00 50 3F D2/DA 7D
						;    04 00 16 00 64 00 0E/0D 81
						;    1F 09 00 00 1A/22 7D 09 05
						;    0D 00 2B 91 04 00 11 00
						;    31 91 46/4E 7D 83 0B 2C 00
						;    F9 3D 50/58 7D 50 3F 05 00
						;    2B 91 00 00 00 00 05 00
						;    2B 91 00 00)
  ;;128
  )

(defvar *vga-color-map* (make-color-map
			  :name "Nominal PCX 4-bit color map"
			  :initial-data '((0 0 0 0)
					  (1 0 0 2/3)
					  (2 0 2/3 0)
					  (3 0 2/3 2/3)
					  (4 2/3 0 0)
					  (5 2/3 0 2/3)
					  (6 2/3 2/3 0)
					  (7 2/3 2/3 2/3)
					  (8 1/3 1/3 1/3)
					  (9 1/3 1/3 1)
					  (10 1/3 1 1/3)
					  (11 1/3 1 1)
					  (12 1 1/3 1/3)
					  (13 1 1/3 1)
					  (14 1 1 1/3)
					  (15 1 1 1))))

(defun read-image-from-pcx (stream)
  (stack-let ((header (make-pcx-header)))
    (send stream :string-in "EOF in header" header)
    (let* ((x-position (pcx-header-xmin header))
	   (y-position (pcx-header-ymin header))
	   (width (1+ (- (pcx-header-xmax header) x-position)))
	   (height (1+ (- (pcx-header-ymax header) y-position)))
	   (nplanes (pcx-header-nplanes header))
	   (result (graphics:make-raster-array-with-correct-width width height
		     :element-type `(unsigned-byte ,nplanes)))
	   (row-bytes (pcx-header-row-bytes header))
	   (total-row-bytes (* row-bytes nplanes)))
      (with-fast-tyi (stream)
	(stack-let* ((slice (graphics:make-raster-array-with-correct-width
			      (* total-row-bytes 8) 1 :element-type 'bit))
		     (bytes (make-array total-row-bytes
					:element-type '(unsigned-byte 8)
					:displaced-to slice)))
	  (declare (sys:array-register bytes))
	  (sys:with-bit-reversing
	    (tv:dotimes-noting-progress (y height "Decoding image rows")
	      (let ((index 0))
		(loop
		  (when ( index total-row-bytes)
		    (when (> index total-row-bytes)
		      (error "Run length encoding crossed row boundary"))
		    (return))
		  (macrolet ((add-byte (byte)
			       `(progn
				  (setf (aref bytes index) (sys:bit-reverse-8 ,byte))
				  (incf index))))
		    (let ((byte (fast-tyi stream)))
		      (if (= (load-byte byte 6 2) 3)
			  (let ((next (fast-tyi stream)))
			    (dotimes (ignore (load-byte byte 0 6))
			      (add-byte next)))
			  (add-byte byte))))))
	      (if (= nplanes 1)
		  (bitblt boole-1 width 1 slice 0 0 result 0 y)
		  ;; Each plane for this row is laid side by size starting with the MSB
		  (dotimes (p nplanes)
		    #+imach
		    (let ((slice slice)
			  (result result))
		      (declare (sys:array-register-1d slice result))
		      (loop repeat width
			    for i from (* y (decode-raster-array result))
			    for j from (* p row-bytes 8)
			    do
			(setf (load-byte (sys:%1d-aref result i) p 1)
			      (sys:%1d-aref slice j))))
		    #-imach
		    (let ((tv:bitblt-unpacking-mask (deposit-byte 0 p 1 1)))
		      (tv:bitblt-unpacked #o-17777777753 width 1
					  slice (* p row-bytes 8) 0 result 0 y))))))
	  (unless (null (fast-tyi stream))
	    (cerror "Ignore it" "Extra stuff at the end of the file"))))
      (values result width height :x-position x-position :y-position y-position
	      :color-map (case nplanes (4 *vga-color-map*))))))

;;; GEM .IMG
(fs:define-canonical-type :img "IMG")

(define-image-file-format :img
  :pretty-name "Gem IMG"
  :description "Used by Ventura Publisher"
  :read-function read-image-from-gem-img
  :file-stream-element-type (unsigned-byte 8)
  )

(rpc:define-octet-structure (gem-img-header :access-type :byte-swapped-8
					    :default-index 0)
  (version rpc:integer-16)
  (header-length rpc:cardinal-16)
  (nplanes rpc:cardinal-16)
  (pattern-length rpc:cardinal-16)
  (pixel-x-size rpc:cardinal-16)		;(microns)
  (pixel-y-size rpc:cardinal-16)		;(microns)
  (width rpc:cardinal-16)
  (height rpc:cardinal-16)
  )

(defun read-image-from-gem-img (stream)
  (stack-let ((header (make-gem-img-header)))
    (let ((pointer (send stream :read-pointer)))
      (send stream :string-in "EOF in header" header)
      (assert (= (gem-img-header-version header) 1))
      (send stream :set-pointer (+ pointer (* (gem-img-header-header-length header) 2))))
    (with-fast-tyi (stream)
      (let ((width (gem-img-header-width header))
	    (height (gem-img-header-height header))
	    (depth (gem-img-header-nplanes header))
	    (pattern-length (gem-img-header-pattern-length header)))
	(stack-let ((pattern (make-array pattern-length :element-type '(unsigned-byte 8))))
	  (declare (sys:array-register pattern))
	  (sys:with-bit-reversing
	    (graphics:decoding-raster-by-byte-rows ((result bytes
						      :row-bytes row-bytes :index bindex)
						    (width height depth)
						    :note-progress t)
	       (let ((index bindex)
		     (row-count 0))
		 (loop
		   (when ( row-count row-bytes)
		     (when (> row-count row-bytes)
		       (error "Run length encoding crossed row boundary"))
		     (return))
		   (macrolet ((add-byte (byte)
				`(progn
				   (setf (aref bytes index) (sys:bit-reverse-8 ,byte))
				   (incf index)
				   (incf row-count))))
		     (let ((byte (fast-tyi stream)))
		       (case byte
			 (#x80
			  (let ((count (fast-tyi stream)))
			    (dotimes (ignore count)
			      (let ((byte (fast-tyi stream)))
				(add-byte byte)))))
			 (0
			   (let ((count (fast-tyi stream)))
			     (fast-tyi-advance stream)
			     (send stream :string-in "EOF in the middle of a pattern" pattern)
			     (dotimes (ignore count)
			       (dotimes (j pattern-length)
				 (add-byte (aref pattern j))))))
			 (otherwise
			   (let ((count (logand byte #x7F))
				 (byte (if (logtest byte #x80) #xFF 0)))
			     (dotimes (ignore count)
			       (add-byte byte)))))))))
	      (unless (null (fast-tyi stream))
		(cerror "Ignore it" "Extra stuff at the end of the file"))
	      (values result width height
		      :x-resolution (round 25400 (gem-img-header-pixel-x-size header))
		      :y-resolution (round 25400 (gem-img-header-pixel-y-size header))))))))))

;;; Lempel-Ziv Welch data compression

;;; Algorithm deduced from IEEE paper by Welch, June 15 1987 document by
;;; CompuServe, and PD memo by Steve Blackstock.

;;; Yes, it really does take 3 minutes to compile a typical use of these macros on a 3600.

;;; The string table is full of "CONS"'s consisting of a character CAR and prefix index
;;; CDR.  Additionally we store the prefix length for the string so that we do not need a
;;; reversing queue on output (since we are not constrained to output sequentially -- the
;;; RAM case of Welch's first algorithmic variation) and so that we can distinguish a NULL
;;; CDR from CDR 0 (rather than using 1 based indices).
(defconstant %%lzw-code-char (byte 8 0))	;Assume nothing wider than this encoded.
(defconstant %%lzw-code-prefix (byte 12 8))	;Maximum table index
(defconstant %%lzw-code-prefix-length (byte 12 20))	;If entire table one list
(defconstant %%lzw-code-key (byte (+ 8 12) 0))

;;; :reset-codes is the GIF variant which gives a code for resetting the compression
;;; when the table fills up.  This code should also start the data.
;;; Environment must define lzw-output-char and lzw-output-advance.
(defmacro with-lzw-decoding ((code-size &key reset-codes (max-code-size 12)) &body body)
  `(stack-let ((lzw-string-table (make-array (lsh 1 ,max-code-size)))
	       (lzw-input-bits 0)
	       (lzw-input-nbits 0)
	       (lzw-state nil)
	       (lzw-compression-size ,(if reset-codes `(1+ ,code-size) code-size))
	       lzw-last-code lzw-last-length lzw-last-first-char
	       lzw-string-index lzw-string-limit)
     (declare (sys:array-register lzw-string-table))
     (macrolet ((lzw-reset-table ()
		  `(progn
		     (setq lzw-state :reset
			   lzw-compression-size ,',code-size)
		     (let ((i (ash 1 ,',code-size)))
		       (dotimes (j i)
			 (setf (aref lzw-string-table j) j))
		       ,@',(when reset-codes
			     `((setf (aref lzw-string-table i) :reset)
			       (incf i)
			       (setf (aref lzw-string-table i) :eoi)
			       (incf i)))
		       (setq lzw-string-index i
			     lzw-compression-size (integer-length i)
			     lzw-string-limit (ash 1 lzw-compression-size))
		       (si:%fast-block-store (locf (aref lzw-string-table i))
					     (- (lsh 1 ,',max-code-size) i) nil))))
		(lzw-decode-check-eoi ()
		  ,(when reset-codes
		     '`(unless (eq lzw-state :eoi)
			 (error "EOF before End of Information indicator"))))
		(lzw-decode-data (data nbits)
		  `(progn
		     (setf (load-byte lzw-input-bits lzw-input-nbits ,nbits) ,data)
		     (incf lzw-input-nbits ,nbits)
		     (lzw-decode-data-loop :reset-codes ,,reset-codes))))
       ;; We could add an option to suppress this for variations which use a different
       ;; special code the first time a character is introduced.  Also, the GIF encoding
       ;; always begins with the reset code, but unless we fill the table, we'll never
       ;; recognize it as that.  Evidently the comparison was meant to be done
       ;; numerically, rather than via a special entry in the table.
       (lzw-reset-table)
       . ,body)))

;;; Subroutine of above.
(defmacro lzw-decode-data-loop (&key (reset-codes t))
  `(loop while ( lzw-input-nbits lzw-compression-size)
	 do
     (let* ((code (load-byte lzw-input-bits 0 lzw-compression-size))
	    (mapping (aref lzw-string-table code))
	    (output-length nil))
       (when (plusp (decf lzw-input-nbits lzw-compression-size))
	 (setq lzw-input-bits (lsh lzw-input-bits (- lzw-compression-size)))
	 #+ignore
	 (setq lzw-input-bits (load-byte lzw-input-bits lzw-compression-size lzw-input-nbits)))
       (block lzw-next-code
	 (when (symbolp mapping)
	   (ecase mapping
	     ((nil)
	      ;; "Exceptional" KwKwK case.  Actually quite common when w = KKK..., as in
	      ;; a long run of zeros.
;	      (assert (= code lzw-string-index))
	      (unless (= code lzw-string-index)
		(format t "~&Code expected is ~D(~:*~O), gotten is ~D(~:*~O)" lzw-string-index code))
	      (let ((length lzw-last-length))
		;; First character of previous output (last char of last entry made if any).
		(lzw-output-char lzw-last-first-char length)
		(setq output-length (1+ length)))
	      ;; Fall through with previous output to be output (and to form prefix).
	      (setq mapping (aref lzw-string-table lzw-last-code)))
	     (:eoi
	       (setq lzw-state :eoi)
	       (return-from lzw-next-code))
	     (:reset
	       (lzw-reset-table)
	       (return-from lzw-next-code))))
	 (ecase lzw-state
	   ((nil)
	    ;; Output string (backwards).
	    (loop
	      (let ((char (ldb %%lzw-code-char mapping))
		    (length (ldb %%lzw-code-prefix-length mapping)))
		(lzw-output-char char length)
		(unless output-length
		  (setq output-length (1+ length)))
		(if (plusp length)
		    (setq mapping (aref lzw-string-table (ldb %%lzw-code-prefix mapping)))
		  (setq mapping (si::%logdpbs lzw-last-length %%lzw-code-prefix-length
					      lzw-last-code %%lzw-code-prefix
					      char %%lzw-code-char 0))
		  (setf (aref lzw-string-table lzw-string-index) mapping)
		  (when ( (incf lzw-string-index) lzw-string-limit)
		    (if (> (incf lzw-compression-size) 12)
			;; Note that none of the available documentation mentions the
			;; subtle fact that you must read the reset code in 12-bit size,
			;; not 13 as you would if you just incremented and hoped for it
			;; to come next.
			(setq lzw-state :overflow
			      lzw-compression-size 12)
			(setq lzw-string-limit (ash lzw-string-limit 1))))
		  (setq lzw-last-first-char char)
		  (return)))))
	   (:reset
	    (setq lzw-state nil)
	    (lzw-output-char mapping 0)
	    (setq output-length 1)
	    (setq lzw-last-first-char mapping))
	   (:overflow
	     ,(prog1
		(if reset-codes
		    '(error "The reset code did not follow immediately after the 4096th string")
		    '(progn (setq lzw-state nil)
			    (lzw-output-char mapping 0)
			    (setq output-length 1)
			    (setq lzw-last-first-char mapping)))
		#+ignore
		(si:dbg))
	      )
		  
	   (:eoi
	    (error "Data after End of Information indicator")))
	 (setq lzw-last-code code
	       lzw-last-length output-length)
	 (lzw-output-advance output-length)))))

#+ignore
(defmacro describe-lzw-string-table ()
  `(loop for mapping being the array-elements of lzw-string-table below lzw-string-index
	 using (index index) do
     (format t "~&~D: " index)
     (if (symbolp mapping)
	 (prin1 mapping)
	 (format t "~D" (ldb %%lzw-code-char mapping))
	 (let ((prefix (ldb %%lzw-code-prefix mapping))
	       (length (ldb %%lzw-code-prefix-length mapping)))
	   (unless (and (zerop prefix) (zerop length))
	     (format t "+~D[~D]" prefix length))))))

(defmacro lzw-decoding-raster ((raster width height depth code-size
				&key reset-codes (note-progress t))
			       &body body)
  (ignore depth)
  `(sys:with-1d-raster-array (,raster)
     (with-lzw-decoding (,code-size :reset-codes ,reset-codes)
       (,@(if note-progress
	      `(tv:noting-progress ("Decoding image rows"))
	      `(progn ,height))
	(let ((lzw-raster-x 0)
	      (lzw-raster-y 0))
	  (macrolet ((lzw-output-char (byte prefix-length)
		       `(let ((x (+ lzw-raster-x ,prefix-length))
			      (y lzw-raster-y))
			  (when ( x ,',width)
			    (multiple-value-bind (q r)
				(floor x ,',width)
			      (setq x r)
			      (incf y q)))
			  (setf (sys:1d-raster-aref ,',raster x y) ,byte)))
		     (lzw-output-advance (length)
		       `(when ( (incf lzw-raster-x ,length) ,',width)
			  (multiple-value-bind (q r)
			      (floor lzw-raster-x ,',width)
			    (setq lzw-raster-x r)
			    (incf lzw-raster-y q)
			    )
			  ,',(when note-progress
			       `(tv:note-progress lzw-raster-y ,height)))))
	    (multiple-value-prog1
	      (progn . ,body)
	      (unless (= lzw-raster-y ,height)
		(format t "~&Subimage claimed to be ~D high, but only supplied ~D."
			,height lzw-raster-y)))))))))

;;; CompuServe GIF
(fs:define-canonical-type :gif "GIF")

(define-image-file-format :gif
  :pretty-name "GIF"
  :description "CompuServe Graphics Interchange Format"
  :read-function read-image-from-gif
  :write-function write-image-to-gif
  :file-stream-element-type (unsigned-byte 8)
  :file-canonical-type :gif
  )

(rpc:define-octet-structure (gif-file :access-type :unsigned-8
				      :default-index 0)
  (signature (vector rpc:character-8 6))
  (screen gif-screen-descriptor))

(rpc:define-octet-structure (gif-screen-descriptor :access-type :unsigned-8)
  (width rpc:integer-16)
  (height rpc:integer-16)
  (* (* rpc:cardinal-8
	(pixel-size-1 (load-byte 0 3))
	(color-resolution-1 (load-byte 4 3))
	(color-map-p (rpc:boolean-bit 7))))
  (background-pixel rpc:cardinal-8)
  (* (rpc:padding rpc:cardinal-8 1)))

(rpc:define-octet-structure (gif-image-descriptor :access-type :unsigned-8
						  :default-index 0)
  (left rpc:integer-16)
  (top rpc:integer-16)
  (width rpc:integer-16)
  (height rpc:integer-16)
  (* (* rpc:cardinal-8
	(pixel-size-1 (load-byte 0 3))
	(interlaced (rpc:boolean-bit 6))
	(color-map-p (rpc:boolean-bit 7)))))

(defun acquire-color-map (&rest args)
  (apply'make-color-map args))

(defun acquire-raster-array-with-correct-width (width height &rest args &key (element-type t)
						&allow-other-keys)
  (apply'tv:allocate-temp-sheet-raster-and-header
    (raster-width-and-height-to-make-array-dimensions
      (graphics::raster-array-correct-width width element-type) height)
    ':area (color::image-bit-array-area)
    :type (cli::type-array-element-type element-type)
    (si:rem-keywords
    (si:copylist args) '(:element-type))))

(defun read-image-from-gif (stream)
  (let (width height depth global-color-map interlace-fixup-needed-p result)
    (flet ((read-color-map ()
	     (let* ((length (ash 1 depth)) r g b
		    (color-map (acquire-color-map :size length)))
	       (dotimes (index length)
		 (set-color-map-rgb color-map index
				    (setq r (read-byte stream))
				    (setq g (read-byte stream))
				    (setq b (read-byte stream))
				    255)
		 (ignore r g b)
		 #+ignore
		 (format t "~&Index ~d = (~d, ~d, ~D)"
			 index r g b))
	       color-map)))
      (condition-case (error)
	   (progn
	     (stack-let ((header (make-gif-file)))
	       (send stream :string-in "EOF in header" header)
	       (assert (or (string= (gif-file-signature header) "GIF89a")
			   (string= (gif-file-signature header) "GIF87a")))
	       (let ((screen (rpc:octet-structure-field-index (gif-file-screen header))))
		 (setq width (gif-screen-descriptor-width header screen)
		       height (gif-screen-descriptor-height header screen)
		       depth (1+ (gif-screen-descriptor-pixel-size-1 header screen)))
		 (when (gif-screen-descriptor-color-map-p header screen)
		   (setq global-color-map (read-color-map)))))
	     ;; We treat the several images in the file as pieces of a whole "screen".
	     ;; This seems more in accord with the documentation.
	     (progn
	       (setq result (acquire-raster-array-with-correct-width
			      width height :area tv:bit-array-area
			      :element-type `(unsigned-byte ,depth)))
	       (unwind-protect
		   (condition-case (error)
			(loop named outer do
			  (ecase (read-byte stream)
			    (#.(ascii-code #\,)			;Image
			     (let (left top subwidth subheight
				   (subdepth depth) (color-map global-color-map) subimage)
			       (stack-let ((header (make-gif-image-descriptor)))
				 (send stream :string-in "EOF in header" header)
				 (setq left (gif-image-descriptor-left header)
				       top (gif-image-descriptor-top header)
				       subwidth (gif-image-descriptor-width header)
				       subheight (gif-image-descriptor-height header)
				       subdepth (1+ (gif-image-descriptor-pixel-size-1 header))
				       )
				 (unless (= depth subdepth)
				   (format t "~&Error in image: subdepth=~D, depth=~D"
					   subdepth depth)
				   (if (= 1 subdepth)
				       (format t " using depth ~D" (setq subdepth depth))
				       (format t " using subdepth ~D" subdepth)))
				 #+ignore
				 (assert (= depth subdepth))
				 (when (gif-image-descriptor-color-map-p header)
				   (setq depth (1+ (gif-image-descriptor-pixel-size-1 header))
					 color-map (read-color-map))
				   (format t "~&Depth for color map = ~D" depth)
				   (when color-map
				     (if global-color-map
					 (assert (color-map-equal global-color-map color-map))
					 (setq global-color-map color-map))))
				 ;; If images is in funny order, fix it up later
				 (when (gif-image-descriptor-interlaced header)
				   (setq interlace-fixup-needed-p t)))
			       ;;--- Maybe if there's only one we should set x-position,y-position
			       ;;from left,top.
			       (setq subimage
				     (if (and (= left 0) (= top 0)
					      (= subwidth width) (= subheight height))
					 result
					 (stack-let ((dims (list subheight subwidth)))
					   (sys:make-stack-array
					     dims :type (sys:array-type result)
					     :displaced-to result
					     :displaced-conformally t
					     :displaced-index-offset (+ left
									(* top (decode-raster-array
										 result)))))))
			       (let ((code-size (read-byte stream)))
				 (assert (< code-size 12))
;		 (format t "~&Depth=~D, subdepth=~D, code-size=~D" depth subdepth code-size)
				 #+ignore
				 (if (= 1 subdepth)
				     (assert (= code-size (+ 2 subdepth)))
				     (assert (= code-size (1+ subdepth))))
				 (lzw-decoding-raster (subimage subwidth subheight subdepth code-size
								:reset-codes t)
				   (stack-let ((data-buffer (make-array 256
									:element-type '(unsigned-byte 8)))
					       (data-index 0)
					       (data-limit 0))
				     (declare (sys:array-register data-buffer))
				     (loop with last = -1 do
				       (setq data-limit (read-byte stream))
				       (when (or (zerop data-limit) ( lzw-raster-y height))
					 (lzw-decode-check-eoi)
					 (if (and ( lzw-raster-y height)
						  (= data-limit (char-code #\;)))
					     (return-from outer)
					     (return )))
				       (setq data-index 0)
				       (send stream :string-in "EOF in data"
					     data-buffer data-index data-limit)
				       (loop for this-data-index from data-index
					     for data-byte being the array-elements of data-buffer
						 from data-index below data-limit
					     do (ignore this-data-index)
						(lzw-decode-data data-byte 8)
					     finally (setq last data-byte)
						     (ignore last))))))))
			    (#.(ascii-code #\;)
			     (return))
			    (#.(ascii-code #\!)
			     (let ((extension-function (read-byte stream)))
			       (ignore extension-function)
			       (loop
				 (let ((count (read-byte stream)))
				   (when (zerop count)
				     (return))
				   (dotimes (ignore count)
				     (read-byte stream))))))))
		      (sys:end-of-file (format t "~&End of file in middle of image")
				       nil))
		 (when interlace-fixup-needed-p
		   (stack-let ((index-array (make-array height)))
		     ;;first come lines going to every 8, starting at 0.
		     ;;then every 8, starting at 4.
		     ;;then every 4, starting at 2.
		     ;;finally every 2, starting at 1.
		     ;;build table of where to get real line from
		     (loop for i below height
			   with inc = 8 and last-inc = 8
			   with line = 0
			   do (when (aref index-array line) (error "you blew it"))
			      (setf (aref index-array line) i)
			      (incf line last-inc)
			      (when ( line height)
				(setq last-inc inc inc (floor inc 2) line (mod inc 8))))
		     (macrolet ((swap-lines (dindex sindex)
				  `(progn
				     (bitblt tv:alu-xor width 1 result 0 ,sindex result 0 ,dindex)
				     (bitblt tv:alu-xor width 1 result 0 ,dindex result 0 ,sindex)
				     (bitblt tv:alu-xor width 1 result 0 ,sindex result 0 ,dindex))))
		       (tv:noting-progress ("Shuffling interlaced image")
			 (loop for dest-line below height
			       for source-line = (aref index-array dest-line)
			       unless (= dest-line source-line)
				 do (swap-lines dest-line source-line)
				    (loop for i from dest-line below height
					  for j = (aref index-array i)
					  when (= j dest-line)
					    do (setf (aref index-array i) source-line)
					       (return))
				    (tv:note-progress dest-line height)))))))
	       (values result width height :color-map global-color-map)))
	 (sys:end-of-file (format t "~&End of file reading header of image")
			  nil))
      )))

(defun write-image-to-gif (output-stream raster rwidth rheight &key name color-map
			   &allow-other-keys)
  (let ((depth (get-real-depth-for-image-raster raster)	;kludge because image not passed in
	       #+ignore
	       (cdr (assoc (si:array-type raster) si:array-bits-per-element))))
    (unless ( depth 8)
      (error "GIF format is only defined for images with pixels of 8 or fewer bits."))
    (write-rasters-to-gif-file
      output-stream (list (list raster 0 0 rwidth rheight name color-map depth))
      rwidth rheight depth color-map)))


;;total kludge, this all should be recast not to use rasters
(defun get-real-depth-for-image-raster (raster)
  (loop for im in (images::named-images)
	for da = (send-if-handles im :data-array)
	when (eql da raster) return (send im :useful-bits-per-pixel)))


(defun write-images-to-gif-file (images output-stream &optional global-color-map)
  (multiple-value-bind (specs screen-width screen-height screen-depth)
      (loop for (image left top subwidth subheight name color-map image-depth) in images
	    do (progn
		 (when (null left) (setq left 0))
		 (when (null top) (setq left 0))
		 (when (null subwidth) (setq subwidth (send image :width)))
		 (when (null subheight) (setq subheight (send image :height)))
		 (when (null name) (setq name (send image :name)))
		 (when (null color-map) (send image :setup-color-map))
		 (when (null image-depth) (setq image-depth (send image :useful-bits-per-pixel)))
		 )
	    collect (list (send image :data-array)
			  left top subwidth subheight name color-map image-depth) into specs
	    maximize subwidth into width
	    maximize subheight into height
	    maximize (send image :useful-bits-per-pixel) into depth
	    finally (return (values specs width height depth name)))
    (write-rasters-to-gif-file output-stream specs screen-width screen-height screen-depth
			       global-color-map)))

(defun write-rasters-to-gif-file (output-stream specs screen-width screen-height screen-depth
				  &optional global-color-map)
      (output-screen-header output-stream screen-width screen-height screen-depth global-color-map)
      (loop for (raster left top subwidth subheight name image-color-map depth) in specs
	    do (ignore name)
	       (output-gif-image raster output-stream left top subwidth subheight depth
				 global-color-map image-color-map))
      (send output-stream :tyo (ascii-code #\;)))

(defun output-screen-header (output-stream screen-width screen-height depth
			     &optional global-color-map)
  (let ((header (make-gif-file)))
    (loop for i being array-elements of "GIF87a"
	  for j from (rpc::octet-structure-field-index (gif-file-signature header))
	  do (setf (aref header j) (char-to-ascii i)))
    (let ((screen (rpc:octet-structure-field-index (gif-file-screen header))))
      (setf (gif-screen-descriptor-width header screen) screen-width)
      (setf (gif-screen-descriptor-height header screen) screen-height)
      (setf (gif-screen-descriptor-pixel-size-1 header screen) (1- depth))
      (when global-color-map
	(setf (gif-screen-descriptor-color-map-p header screen) t))
;      (send output-stream :tyo (length header))
      (send output-stream :string-out header)
      (when global-color-map
	(write-color-map-to-gif-stream depth global-color-map output-stream))
      )))

(defun output-gif-image (raster output-stream left top subwidth subheight
			 depth global-color-map image-color-map)
  (send output-stream :tyo (char-to-ascii #\,))
  (output-image-header output-stream left top subwidth subheight depth
		       global-color-map image-color-map)
  (send output-stream :tyo depth)
  (output-image-raster raster output-stream subwidth subheight depth))


(defun output-image-header (output-stream left top subwidth subheight depth
			  global-color-map image-color-map)
  (stack-let ((header (make-gif-image-descriptor)))
    (setf (gif-image-descriptor-left header) left)
    (setf (gif-image-descriptor-top header) top)
    (setf (gif-image-descriptor-width header) subwidth)
    (setf (gif-image-descriptor-height header) subheight)
    (setf (gif-image-descriptor-pixel-size-1 header) (1- depth))
    (if (or (null image-color-map) 
	    (and global-color-map (color-map-equal image-color-map global-color-map)))
	(setf (gif-image-descriptor-color-map-p header) nil)
	(setf (gif-image-descriptor-color-map-p header) t)
	(write-color-map-to-gif-stream depth image-color-map output-stream)
	(setf (gif-image-descriptor-pixel-size-1 header) (1- depth)))
;    (send output-stream :tyo (length header))
    (send output-stream :string-out header)))

(defun write-color-map-to-gif-stream (depth color-map output-stream)
  (stack-let ((length (ash 1 depth))
	      (buffer (si:make-array 256. :type 'si:art-8b :fill-pointer 1)))
    (flet ((old-write-a-byte (value)
	     (si:array-push buffer value)
	     (when ( (fill-pointer buffer) 256.)
	       (setf (Aref buffer 0) (1- (fill-pointer buffer)))
	       (send output-stream :string-out buffer)
	       (setf (fill-pointer buffer) 1)))
	   (write-a-byte (value) (send output-stream :tyo value))
	   )
      (ignore (old-write-a-byte 1))
      (dotimes (index length)
;	(when (zerop index) (si:dbg))
	(multiple-value-bind (r g b)
	    (color-map-rgb color-map index 255.)
	  (write-a-byte r)
	  (write-a-byte g)
	  (write-a-byte b))))))

(defun make-gif-hash-table ()(make-hash-table :size 1_13))

(defresource gif-hash-table ()
  :constructor (make-gif-hash-table)
  :initializer (clrhash object)
  )


(defmacro using-gif-hash-table (var &body body)
  `(si:using-resource (,var gif-hash-table)
     ,@body))

(defun output-image-raster (raster output-stream subwidth subheight depth)
  (stack-let* ((excess 0) (nbits 0) (code-size (if (= 1 depth) 3 (1+ depth)))
	(x 0) (y 0) ;(incode 0) (inbits 0)
	(buffer (si:make-array 256 :type 'si:art-8b :fill-pointer 1))
	(reset-code (lsh 1 (1- code-size)))
	)
    (tv:noting-progress ("Gifing rasters")
    (labels ((shift-out-byte (string size &optional force?)
	       (setq excess (dpb string (byte size nbits) excess))
	     (incf nbits size)
	     (loop for i from 0 by 8
		   while ( nbits 8)
		   do (ignore i)
		      (si:array-push buffer (ldb (byte 8 0) excess))
		      (when ( (fill-pointer buffer) 256.)
			(setf (aref buffer 0) (1- (fill-pointer buffer)))
			(send output-stream :string-out buffer)
			(setf (fill-pointer buffer) 1))
		      (setq excess (lsh excess -8))
		      (decf nbits 8))
	     (when force?
	       (si:array-push buffer (ldb (byte 8 0) excess))
	       (setf (aref buffer 0) (1- (fill-pointer buffer)))
	       (send output-stream :string-out buffer)
	       (setq excess 0 nbits 0)))
	   (get-raster-byte ()
	     (unless (or (= x subwidth) (= y subheight))
	       (prog1
		 (raster-aref raster x y)
		 (incf x)
		 (when ( x subwidth)
		   (setq x 0)
		   (incf y)
		   (tv:note-progress y subheight)
		   ))))
	   #+ignore
	   (get-raster-sub-byte ()
	     (if ( inbits depth)
		 (prog1 (ldb (byte depth 0) incode)
			(decf inbits depth)
			(setq incode (lsh incode (- depth))))
		 (let ((new-byte  (get-raster-8b-byte)))
		   (when new-byte
		     (setq incode (dpb new-byte (byte 8 inbits) incode))
		     (incf inbits 8)
		     (prog1 (ldb (byte depth 0) incode)
			    (decf inbits depth)
			    (setq incode (lsh incode (- depth))))))))
	   )
      (macrolet ((output-it (&optional force?)
		   `(progn
		      (shift-out-byte current-string code-size ,force?)
		      (when (> (incf code) code-limit)
		          (incf code-size)
		       (when (> code-size 12)
			(shift-out-byte reset-code 12)	;not code-size
			(clrhash index-table)
			(dotimes (i (ash 1 byte-size))	;actually, you can skip this
			 (setf (gethash i index-table) i))	;since never lookup length 1
			(setq code (+ (ash 1 byte-size) 2)
			      code-size (1+ byte-size)))
		         (setq code-limit (ash 1 code-size)))
		      (setq current-string char	;All singletons in initial table
			  current-length 1))))
	(using-gif-hash-table index-table

	(loop with  byte-size = depth
	      with current-string and current-length = 0
	      and code-limit = (lsh 1 code-size)
	      with code = (+ reset-code 2)
	      for real-char = (get-raster-byte)
	      while real-char
	      for char = real-char
	      for first-time? = t then nil
	      when first-time?
		do (setq current-string char current-length 1)
		   (shift-out-byte reset-code code-size)
	      else
		do (let* ((entry (si:%logdpbs char %%lzw-code-char
					      current-string %%lzw-code-prefix
					      current-length %%lzw-code-prefix-length 0))
			  (index (gethash entry index-table)))
		     #+ignore
		     (format t "~&Entry for char=~D, current-string=~D, current-length=~D is ~D"
			     char current-string current-length index)
		     (cond (index
			    (setq current-string index)
			    (incf current-length))
			   (t
			    (setf (gethash entry index-table) code)
;			    (format t "code=~D " code)
			    (output-it))))
	      finally (output-it)
		      (setq current-string (1+ reset-code))
		      (output-it t)
		      (send output-stream :tyo 0)
		      )))))))

