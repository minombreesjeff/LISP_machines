;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Some macros that should go in the system, but were not approved by
;;; technical patch review in their present form without concrete
;;; alternatives being suggested.

(defmacro ceiling-multiple-of (n mod &environment env)
  (block optimize-power-of-two
    (when (integerp mod)
      (when (let ((size (1- (integer-length mod))))
	      (= mod (ash 1 size)))
	  (return-from optimize-power-of-two
	    `(logand (+ ,n ,(1- mod)) ,(- mod)))))
    (once-only (mod &environment env)
      `(* ,mod (ceiling ,n ,mod)))))

(defmacro with-fast-tyi ((stream) &body body)
  (let ((buffered-p-var (sys:fintern "~S BUFFER-P" stream))
	(buffer-var (sys:fintern "~S BUFFER" stream))
	(index-var (sys:fintern "~S INDEX" stream))
	(limit-var (sys:fintern "~S LIMIT" stream)))
    `(let ((,buffered-p-var (operation-handled-p ,stream :read-input-buffer))
	   (,buffer-var nil)
	   (,index-var 0)
	   (,limit-var 0))
       (multiple-value-prog1
	 (progn . ,body)
	 (fast-tyi-advance ,stream)))))

(defmacro fast-tyi (stream)
  (let ((buffered-p-var (sys:fintern "~S BUFFER-P" stream))
	(buffer-var (sys:fintern "~S BUFFER" stream))
	(index-var (sys:fintern "~S INDEX" stream))
	(limit-var (sys:fintern "~S LIMIT" stream)))
    `(if ,buffered-p-var
	 (loop while ( ,index-var ,limit-var)
	       do (when ,buffer-var
		    (send ,stream :advance-input-buffer))
		  (multiple-value-setq (,buffer-var ,index-var ,limit-var)
		    (send ,stream :read-input-buffer))
	       when (null ,buffer-var) return nil
	       finally (return (prog1 (aref ,buffer-var ,index-var)
				      (incf ,index-var))))
	 (send ,stream :tyi))))

(defmacro fast-tyi-advance (stream)
  (let ((buffer-var (sys:fintern "~S BUFFER" stream))
	(index-var (sys:fintern "~S INDEX" stream))
	(limit-var (sys:fintern "~S LIMIT" stream)))
    `(when ,buffer-var
       (send ,stream :advance-input-buffer ,index-var)
       (setq ,buffer-var nil
	     ,index-var ,limit-var))))

(defmacro with-image-raster ((raster image &rest options
					   &key width height
					   &allow-other-keys)
			     &body body)
  (si:with-rem-keywords (runtime-options options '(:width :height))
    `(with-image-raster-1 ,image
			  (sys:named-lambda with-image-raster (,raster
							       ,(or width 'ignore)
							       ,(or height 'ignore))
			    . ,body)
			  . ,runtime-options)))
