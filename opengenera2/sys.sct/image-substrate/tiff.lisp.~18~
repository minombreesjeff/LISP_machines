;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(fs:define-canonical-type D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB"):tiff0 "TIFF"
  (:msdos "TIF"))

(define-image-file-format 1:tiff
0  :pretty-name "TIFF"
  :description "Tagged Image File Format"
  :read-function read-images-from-tiff-stream
  :write-function write-images-to-tiff-stream
  :file-stream-element-type (unsigned-byte 8)
  :calling-sequence :image-sequence)

;; Ask the thing returned for its subfiles.
;; The subfile data for the last subfile also
;; appears at toplevel in the thing returned,
;; but that's only incidental.
(defun 1read-images-from-tiff-stream0 (stream)
  (let ((reader (make-tiff-reader :stream stream)))
    (read-tiff-file-1 reader)
    (map 'list #'tiff-file-image (tiff-reader-subfiles reader))))

;; I think the TIFF standard wants this to be NIL
(defvar 1*tiff-nyi-break*0 NIL
  "Whether to BREAK on NYI fields")

(defvar 1*tiff-types*0 #(nil :byte :ascii :short :long :rational))

(defvar 1*tiff-tags*0 (make-hash-table))

(defmacro 1define-tiff-reader0 (pretty-name code type-accepted &body body)
  (declare (arglist pretty-name code &body body "(type count value-offset)"))
  (let ((lisp-name (intern (string-upcase pretty-name))))
    `(progn
       (defmethod (,lisp-name tiff-reader) (type count value-offset)
	 (declare (sys:function-parent ,pretty-name define-tiff-reader))
	 (progn count value-offset nil)
	 (assert ,(if (consp type-accepted)
		      `(member type ',type-accepted)
		      `(eql type ',type-accepted)))
	 ,@body)
       (note-tiff-reader ',lisp-name ',pretty-name ',code))))

(defun 1note-tiff-reader0 (lisp-name pretty-name code)
  (setf (gethash code *tiff-tags*) (list lisp-name pretty-name))
  (setf (gethash lisp-name *tiff-tags*) (list pretty-name code)))

(defun 1find-tiff-reader0 (code)
  (loop
    (let ((reader (first (gethash code *tiff-tags*))))
      (if reader
	  (return reader)
	  (cerror "Try again (presumably after loading definition)"
		  "No defined TIFF reader for tag code ~d" code)))))

(defflavor 1tiff-reader
0	(
	 ;; specific to reading
	 (pathname)
	 (stream)
	 (byte-order :big-endian)
	 (subfiles ())
	 )
	(tiff-subfile)
  :writable-instance-variables
  (:constructor make-tiff-reader (&key pathname stream))
  )

(defmacro 1define-tiff-subfile0 (flavor-name instance-variables component-flavors &rest flavor-options)
  `(progn
     (defflavor ,flavor-name ,instance-variables ,component-flavors ,@flavor-options)
     (defmethod (tiff-subfile-from-tiff-reader tiff-reader) ()
       (let ((subfile (make-tiff-subfile)))
	 ,@(domap 'list ((var instance-variables))
	     (when (consp var) (setq var (first var)))
	     (let ((access `(,(intern (string-append flavor-name '- var)) subfile)))
	       `(when (variable-boundp ,var)
		  (setf ,access ,var))))
	 subfile))))

(define-tiff-subfile 1tiff-subfile
0	(
	 ;; the whole point of this exercise
	 image
	 ;; basic fields
	 (bits-per-sample 1)
	 (color-map nil)
	 color-response-curves
	 (compression nil)			;(member nil :ccitt3 :ccitt4 :lzw :packbits)
	 gray-response-curve
	 (gray-response-unit 100)		;
	 image-length
	 image-width
	 (subfile-type ())			;list of flags
	 (photometric-interpretation :0white)	;(member :0white :0black :rgb :palette-color :transparency-mask)
	 (planar-configuration :pixels-contiguous)	;(member :pixels-contiguous :pixels-planar)
	 (predictor nil)
	 (resolution-unit :inch)		;(member nil :inch :cm)
	 (rows-per-strip :)
	 (samples-per-pixel 1)
	 (strip-byte-counts nil)
	 strip-offsets
	 (bit-fill-order :big-endian)		;(member :big-endian :little-endian)
	 (orientation-row0-column0 :top-left)
	 (x-resolution nil)
	 (y-resolution nil)
	 ;; informational fields
	 artist date-time host-computer image-description make model software
	 ;; fax fields
	 fax-compression
	 group-3-options
	 group-4-options
	 ;; document storage and retrieval fields
	 (document-name nil) page-name
	 page-number				;(numerator denominator)
	 (x-position 0) (y-position 0)
	 )
	()
  :writable-instance-variables
  (:constructor make-tiff-subfile ())
  )

(defmacro 1dpbs0 (byte byte-spec &rest into)
  (if (null (rest into))
      `(dpb ,byte ,byte-spec ,@into)
      `(dpb ,byte ,byte-spec (dpbs ,@into))))

(defmethod 1(get-tiff-2 tiff-reader)0 ()
  (let ((b1 (read-byte stream))
	(b2 (read-byte stream)))
    ;;---Could get rid of this by making big-endian-tiff-reader and little-endian-tiff-reader
    (ecase byte-order
      (:big-endian
	(dpb b1 (byte 8 8) b2))
      (:little-endian
	(dpb b2 (byte 8 8) b1)))))

(defmethod 1(get-tiff-4 tiff-reader)0 ()
  (let ((b1 (read-byte stream))
	(b2 (read-byte stream))
	(b3 (read-byte stream))
	(b4 (read-byte stream)))
    ;;---Could get rid of this by making big-endian-tiff-reader and little-endian-tiff-reader
    (ecase byte-order
      (:big-endian
	(dpbs b1 (byte 8 24) b2 (byte 8 16) b3 (byte 8 8) b4))
      (:little-endian
	(dpbs b4 (byte 8 24) b3 (byte 8 16) b2 (byte 8 8) b1)))))

(defmethod 1(short-from-long tiff-reader)0 (val)
  ;;---Could get rid of this by making big-endian-tiff-reader and little-endian-tiff-reader
  (ecase byte-order
    (:big-endian (ldb (byte 16 16) val))
    (:little-endian (ldb (byte 16 0) val))))

(defmethod 1(other-short-from-long tiff-reader)0 (val)
  ;;---Could get rid of this by making big-endian-tiff-reader and little-endian-tiff-reader
  (ecase byte-order
    (:big-endian (ldb (byte 16 0) val))
    (:little-endian (ldb (byte 16 16) val))))

(defmethod 1(get-tiff-ascii tiff-reader)0 (count value-offset)
  (send stream :set-pointer value-offset)
  (stack-let ((buf (make-array count :element-type 'string-char :fill-pointer 0)))
    (dotimes (j (1- count))
      (let ((b (read-byte stream)))
	(when (zerop b) (return))
	(vector-push-extend (ascii-to-char b) buf)))
    (copy-seq buf)))

(defmethod 1(get-tiff-vector tiff-reader)0 (count value-offset type)
  (let ((v (make-array count)))
    (ecase type
      (:short
	(case count
	  (0 )
	  (1 (setf (aref v 0) (short-from-long self value-offset)))
	  (2 (setf (aref v 0) (short-from-long self value-offset))
	     (setf (aref v 1) (other-short-from-long self value-offset)))
	  (otherwise
	    (send stream :set-pointer value-offset)
	    (dotimes (j count)
	      (setf (aref v j) (get-tiff-2 self))))))
      (:long
	(case count
	  (0 )
	  (1 (setf (aref v 0) value-offset))
	  (otherwise
	    (send stream :set-pointer value-offset)
	    (dotimes (j count)
	      (setf (aref v j) (get-tiff-4 self)))))))
    v))

(defmethod 1(get-tiff-rational tiff-reader)0 (value-offset)
  (send stream :set-pointer value-offset)
  (let ((numerator (get-tiff-4 self))
	(denominator (get-tiff-4 self)))
    (/ numerator denominator)))

(defun 1tiff-nyi0 ()
  (declare (dbg:error-reporter))
  (when *tiff-nyi-break*
    (break "NYI")))

(defmethod 1(read-tiff-file-1 tiff-reader)0 ()
  (setq byte-order
	(let ((wd (get-tiff-2 self)))
	  (ecase wd
	    (#x4949				;'II'
	     :little-endian)
	    (#x4d4d				;'MM'
	     :big-endian))))
  (let ((wd (get-tiff-2 self)))
    (unless (eql wd 42)
      (error "TIFF version ~d but should be 42" wd)))
  (let ((ifd-pointer (get-tiff-4 self)))
    (loop
      (multiple-value-bind (subfile next-ifd-pointer)
	  (read-tiff-subfile self ifd-pointer)
	(push subfile subfiles)
	(if (zerop next-ifd-pointer)
	    (return)
	    (setq ifd-pointer next-ifd-pointer))))
    (setq subfiles (coerce (nreverse subfiles) 'vector)))
  self)

(defmethod 1(read-tiff-subfile tiff-reader)0 (pointer)
  (send stream :set-pointer pointer)
  (let ((number-of-entries (get-tiff-2 self)))
    (stack-let ((tags (make-array number-of-entries))
		(types (make-array number-of-entries))
		(counts (make-array number-of-entries))
		(value-offsets (make-array number-of-entries)))
      (dotimes (j number-of-entries)
	(setf (aref tags j) (get-tiff-2 self))
	(setf (aref types j) (get-tiff-2 self))
	(setf (aref counts j) (get-tiff-4 self))
	(setf (aref value-offsets j) (get-tiff-4 self)))
      (let ((next-pointer (get-tiff-4 self)))
	(domap () ((tag tags) (type types) (count counts) (value-offset value-offsets))
	  (let ((reader (find-tiff-reader tag))
		(type-symbol (or (ignore-errors (aref *tiff-types* type))
				 (error "TIFF data type ~d is undefined" type))))
	    (funcall reader self type-symbol count value-offset)))
	(read-tiff-image self)
	(values (tiff-subfile-from-tiff-reader self)
		next-pointer)))))

(defmethod (1read-tiff-image tiff-reader0) ()
  ;; Barf if necessary before we make the big arrays
  (ecase compression
    ((nil) )
    ((:packbits :ccitt3) )
    ((:ccitt4 :lzw)
     (error "Compression ~s not yet implemented" compression)))
  (setq image (tv:allocate-temp-sheet-raster-and-header
		(list image-length (tv:raster-width-for-bitblt image-width bits-per-sample))
		:type (tv:raster-array-type-for-bits bits-per-sample)))
  (assert (eql orientation-row0-column0 :top-left))
  (if (eql rows-per-strip :) (setq rows-per-strip image-length))
  (tv:noting-progress ("Decoding image rows")
    (dotimes (strip (length strip-offsets))
      (let* ((offset (aref strip-offsets strip))
	     (byte-count (if strip-byte-counts
			     (aref strip-byte-counts strip)
			     ;;--- This is pretty horrible.
			     (let ((length (or (send stream :length)
					       (getf (cdr (fs:file-properties (send stream :truename)))
						     :length-in-bytes)
					       (error "no file length is available"))))
			       (- length offset)))))
	;;--- This is really too large to put on the data stack a lot of the time.
	;;Nor is there any system resource of these arrays already.
	(tv:with-temp-sheet-raster
	  (strip-buffer byte-count :type 'zl:art-8b)
	  (send stream :set-pointer offset)
	  (send stream :string-in "EOF while reading strip" strip-buffer)
	  (copy-strip-buffer-to-image self strip-buffer strip))))
    (assert (member photometric-interpretation '(:0white :0black)))
    (ecase photometric-interpretation
      (:0white )
      (:0black
	(sys:%draw-rectangle image-width image-length 0 0 boole-xor image)))))



(defmethod 1(copy-strip-buffer-to-image tiff-reader)0 (strip-buffer strip-number)
  (assert (eql samples-per-pixel 1))		;---
  (assert (eql planar-configuration :pixels-contiguous))	;---
  (multiple-value-bind (image-array-width image-array-height)
      (decode-raster-array image)
    (let ((strip-top-row
	    (if (and (eql rows-per-strip image-length) (zerop strip-number))
		0
		(* strip-number rows-per-strip)))
	  (bytes-per-row (ceiling (* image-width samples-per-pixel bits-per-sample) 8)))
      (stack-let ((image8 (graphics:make-raster-array-with-correct-width
			    (ceiling (* image-array-width bits-per-sample) 8)
			    image-array-height
			    :element-type '(unsigned-byte 8)
			    :displaced-to image)))
	(ecase compression
	  ((nil)
	   (sys:with-1d-raster-array (image8)
	     (let ((k 0))
	       (dotimes (j rows-per-strip)
		 (let ((row (+ j strip-top-row)))
		   (when ( row image-length) (return))
		   (tv:note-progress row image-length)
		   (dotimes (i bytes-per-row)
		     (setf (sys:1d-raster-aref image8 i row) (aref strip-buffer k))
		     (incf k))))))
	   (bit-reverse-bytes-in-strip image8 image-length rows-per-strip strip-top-row
				       bit-fill-order bytes-per-row bits-per-sample))
	  ((:packbits)
	   (stack-let ((to (make-array bytes-per-row
				       :element-type '(unsigned-byte 8)
				       :fill-pointer 0
				       :displaced-to image8
				       :displaced-index-offset
				       (array-row-major-index
					 image8 (+ strip-top-row rows-per-strip -1) 0))))
	     (let ((k 0)
		   (to-array-type (sys:array-type to))
		   (to-array-dims (sys:array-dimensions to))
		   )
	       (dotimes (j rows-per-strip)
		 (let ((row (+ j strip-top-row)))
		   (when ( row image-length) (return))
		   (tv:note-progress row image-length)
		   (si:change-indirect-array to to-array-type to-array-dims image8
					     (array-row-major-index image8 row 0))
		   (setf (fill-pointer to) 0)
		   (setq k (mtb::unpack-bits strip-buffer to :start1 k :end2 bytes-per-row
					     :bit-reverse-p nil))))))
	   (bit-reverse-bytes-in-strip image8 image-length rows-per-strip strip-top-row
				       bit-fill-order bytes-per-row bits-per-sample))
	  ((:ccitt3)
	   (decode-ccitt3-runs image image-width image-length
			       strip-buffer strip-top-row rows-per-strip))
	  ((:ccitt4 :lzw)
	   (error "Compression ~S not implemented" compression)))
	))))

(defun 1bit-reverse-bytes-in-strip0 (image8 image-length rows-per-strip strip-top-row
				   bit-fill-order bytes-per-row bits-per-sample)
  (ecase bit-fill-order
    (:little-endian )
    (:big-endian
      (ecase bits-per-sample
	(8 )
	((1 2 4)
	 (sys:with-bit-reversing
	   (sys:with-1d-raster-array (image8)
	     (dotimes (j rows-per-strip)
	       (let ((row (+ j strip-top-row)))
		 (when ( row image-length) (return))
		 (dotimes (i bytes-per-row)
		   (setf (sys:1d-raster-aref image8 i row)
			 (let ((val (sys:1d-raster-aref image8 i row)))
			   (case bits-per-sample
			     (1 )
			     (2 (setq val (sys:dpbs (ldb (byte 2 0) val) (byte 2 6)
						    (ldb (byte 2 2) val) (byte 2 4)
						    (ldb (byte 2 4) val) (byte 2 2)
						    (ldb (byte 2 6) val))))
			     (4 (setq val (sys:dpbs (ldb (byte 4 0) val) (byte 4 4)
						    (ldb (byte 4 4) val)))))
			   (sys:bit-reverse-8 val)))))))))
	((16 32)
	 (let* ((bytes-per-sample (/ bits-per-sample 8))
		(mask (1- bytes-per-sample))
		(half (/ bytes-per-sample 2)))
	   (sys:with-1d-raster-array (image8)
	     (dotimes (j rows-per-strip)
	       (let ((row (+ j strip-top-row)))
		 (when ( row image-length) (return))
		 (dotimes (i bytes-per-row)
		   (when (< (logand i mask) half)
		     (rotatef (sys:1d-raster-aref image8 (logxor i mask) row)
			      (sys:1d-raster-aref image8 i row)))))))))))))

(define-tiff-reader |BitsPerSample| 258 :short
  (assert (eql count samples-per-pixel))
  (setq bits-per-sample (short-from-long self value-offset)))

(define-tiff-reader |ColorMap| 320 :short
  (let ((ncells (expt 2 bits-per-sample)))
    (assert (eql count (* 3 ncells)))
    (setq color-map (make-color-map :size ncells))
    (send stream :set-pointer value-offset)
    (dotimes (c ncells)
      (set-color-map-rgb color-map c
			 (get-tiff-2 self) (get-tiff-2 self) (get-tiff-2 self)
			 (1- 1_16)))))

(define-tiff-reader |ColorResponseCurves| 301 :short
  (assert (eql count (* 3 (expt 2 bits-per-sample))))
  (tiff-nyi))

(define-tiff-reader |Compression| 259 :short
  (assert (eql count 1))
  (setq compression
	(ecase (short-from-long self value-offset)
	  (1 nil)
	  (2 :ccitt3)
	  (5 :lzw)
	  (32773 :packbits))))

(define-tiff-reader |GrayResponseCurve| 291 :short
  (assert (eql count (expt 2 bits-per-sample)))
  (tiff-nyi))

(define-tiff-reader |GrayResponseUnit| 290 :short
  (assert (eql count 1))
  (setq gray-response-unit
	(ecase (short-from-long self value-offset)
	  (1 10)
	  (2 100)
	  (3 1000)
	  (4 10000)
	  (5 100000))))

(define-tiff-reader |ImageLength| 257 (:short :long)
  (assert (eql count 1))
  (setq image-length 
	(ecase type
	  (:short (short-from-long self value-offset))
	  (:long value-offset))))

(define-tiff-reader |ImageWidth| 256 (:short :long)
  (assert (eql count 1))
  (setq image-width
	(ecase type
	  (:short (short-from-long self value-offset))
	  (:long value-offset))))

(define-tiff-reader |NewSubfileType| 254 :long
  (assert (eql count 1))
  (tiff-nyi))

(define-tiff-reader |PhotometricInterpretation| 262 :short
  (assert (eql count 1))
  (setq photometric-interpretation
	(ecase (short-from-long self value-offset)
	  (0 :0white)
	  (1 :0black)
	  (2 :rgb)
	  (3 :palette-color)
	  (4 :transparency-mask))))

(define-tiff-reader |PlanarConfiguration| 284 :short
  (assert (eql count 1))
  (setq planar-configuration
	(ecase (short-from-long self value-offset)
	  (1 :pixels-contiguous)
	  (2 :pixels-planar))))

(define-tiff-reader |Predictor| 317 :short
  (assert (eql count 1))
  (setq predictor (short-from-long self value-offset)))

(define-tiff-reader |ResolutionUnit| 296 :short
  (assert (eql count 1))
  (setq resolution-unit
	(ecase (short-from-long self value-offset)
	  (1 nil)
	  (2 :inch)
	  (3 :cm))))

(define-tiff-reader |RowsPerStrip| 278 (:short :long)
  (assert (eql count 1))
  (setq rows-per-strip
	(ecase type
	  (:short (short-from-long self value-offset))
	  (:long value-offset))))

(define-tiff-reader |SamplesPerPixel| 277 :short
  (assert (eql count 1))
  (setq samples-per-pixel (short-from-long self value-offset)))

(define-tiff-reader |StripByteCounts| 279 (:short :long)
  (setq strip-byte-counts (get-tiff-vector self count value-offset type))
  ;; When a TIFF thingie fits into a long, they put the long in here
  ;; instead of a long pointer to a long.  Makes it hard to get this
  ;; count and pointer stuff right.
  (when (eql count 1)
    (setf (aref strip-byte-counts 0)
	  (progn
	    (send stream :set-pointer (aref strip-byte-counts 0))
	    (get-tiff-4 self)))))

(define-tiff-reader |StripOffsets| 273 (:short :long)
  (setq strip-offsets (get-tiff-vector self count value-offset type)))

(define-tiff-reader |XResolution| 282 :rational
  (assert (eql count 1))
  (setq x-resolution (get-tiff-rational self value-offset)))

(define-tiff-reader |YResolution| 283 :rational
  (assert (eql count 1))
  (setq y-resolution (get-tiff-rational self value-offset)))

(define-tiff-reader |Artist| 315 :ascii
  (setq artist (get-tiff-ascii self count value-offset)))

(define-tiff-reader |DateTime| 306 :ascii
  (setq date-time (get-tiff-ascii self count value-offset)))

(define-tiff-reader |HostComputer| 316 :ascii
  (setq host-computer (get-tiff-ascii self count value-offset)))

(define-tiff-reader |ImageDescription| 270 :ascii
  (setq image-description (get-tiff-ascii self count value-offset)))

(define-tiff-reader |Make| 271 :ascii
  (setq make (get-tiff-ascii self count value-offset)))

(define-tiff-reader |Model| 272 :ascii
  (setq model (get-tiff-ascii self count value-offset)))

(define-tiff-reader |Software| 305 :ascii
  (setq software (get-tiff-ascii self count value-offset)))

(define-tiff-reader |Group3Options| 292 :long
  (assert (eql count 1))
  (tiff-nyi))

(define-tiff-reader |Group4Options| 293 :long
  (assert (eql count 1))
  (tiff-nyi))

(define-tiff-reader |DocumentName| 269 :ascii
  (setq document-name (get-tiff-ascii self count value-offset)))

(define-tiff-reader |PageName| 285 :ascii
  (setq page-name (get-tiff-ascii self count value-offset)))

(define-tiff-reader |PageNumber| 297 :short
  (assert (eql count 2))
  (send stream :set-pointer value-offset)
  (let ((page-num (get-tiff-2 self))
	(number-of-pages (get-tiff-2 self)))
    (setq page-number (list page-num number-of-pages))))

(define-tiff-reader |XPosition| 286 :rational
  (setq x-position (get-tiff-rational self value-offset)))

(define-tiff-reader |YPosition| 287 :rational
  (setq y-position (get-tiff-rational self value-offset)))

(define-tiff-reader |CellLength| 265 :short
  (assert (eql count 1))
  ;; It's no longer recommended, so I'll ignore it
  )

(define-tiff-reader |CellWidth| 264 :short
  (assert (eql count 1))
  ;; It's no longer recommended, so I'll ignore it
  )

(define-tiff-reader |FillOrder| 266 :short
  (assert (eql count 1))
  (setq bit-fill-order
	(ecase (short-from-long self value-offset)
	  (1 :big-endian)
	  (2 :little-endian))))

(define-tiff-reader |FreeByteCounts| 289 :long
  ;; It's no longer recommended, so I'll ignore it
  )

(define-tiff-reader |FreeOffsets| 288 :long
  ;; It's no longer recommended, so I'll ignore it
  )

(define-tiff-reader |MaxSampleValue| 281 :short
  (assert (eql count samples-per-pixel))
  ;; It's no longer recommended, so I'll ignore it
  )

(define-tiff-reader |MinSampleValue| 280 :short
  (assert (eql count samples-per-pixel))
  ;; It's no longer recommended, so I'll ignore it
  )

(define-tiff-reader |SubFileType| 255 :short
  (assert (eql count 1))
  (ecase (short-from-long self value-offset)
    (1 (push "Full resolution image data" subfile-type))
    (2 (push "Reduced resolution image data" subfile-type))
    (3 (push "Single page of multi-page document" subfile-type))))

(define-tiff-reader |Orientation| 274 :short
  (assert (eql count 1))
  (setq orientation-row0-column0
    (ecase (short-from-long self value-offset)
      ;; row-column
      (1 :top-left)
      (2 :top-right)
      (3 :bottom-right)
      (4 :bottom-left)
      (5 :left-top)
      (6 :right-top)
      (7 :right-bottom)
      (8 :left-bottom))))

(define-tiff-reader |Thresholding| 263 :short
  (assert (eql count 1))
  (ignore
    (ecase (short-from-long self value-offset)
      (1 :bilevel)
      (2 :dithered)
      (3 :error-diffused))))


(defmethod 1(tiff-file-image tiff-subfile)0 ()
  ;;--- Perhaps subfiles should just be built on top of image.  See how IMAN falls out.
  (let ((resolution-scale (ecase resolution-unit
			    (:inch 1)
			    (:cm 2.54))))
    (make-image-from-raster image :width image-width :height image-length
			    :name document-name
			    :x-resolution (and x-resolution (* x-resolution resolution-scale))
			    :y-resolution (and y-resolution (* y-resolution resolution-scale))
			    :color-map color-map)))

(compile-flavor-methods tiff-subfile tiff-reader)

(defun 1write-images-to-tiff-stream0 (stream images)
  (assert (= (length images) 1))
  ;; Reserve enough space for the most we could output.
  (let* ((image (first images))
	 (width (image-width image))
	 (height (image-height image))
	 (depth (image-depth image))
	 (x-resolution (image-x-resolution image))
	 (y-resolution (image-y-resolution image))
	 (image-name (let ((string (image-name image))) (and string (string-to-ascii string))))
	 (color-map (image-color-map image))
	 (ntags 13))
    (when x-resolution (incf ntags))
    (when y-resolution (incf ntags))
    (when image-name (incf ntags))
    (when color-map (incf ntags))
    (let* ((header-length (+ 2 2 4 2 (* ntags 12) 4))
	   (extended-index header-length))
      (when x-resolution (incf extended-index 8))
      (when y-resolution (incf extended-index 8))
      (when image-name (incf extended-index (ceiling-multiple-of (1+ (length image-name)) 4)))
      (when color-map (incf extended-index (* (ash 1 depth) 3 2)))
      (stack-let ((header (make-array extended-index :element-type '(unsigned-byte 8)))
		  (header-index 0))
	(setq extended-index header-length)	;Back up to fill
	(setf (rpc:byte-swapped-8-aref-16 header header-index) #x4D4D)	;May as well do big
	(incf header-index 2)
	(setf (rpc:byte-swapped-8-aref-16 header header-index) 42)
	(incf header-index 2)
	(setf (rpc:byte-swapped-8-aref-32 header header-index) (+ header-index 4))
	(incf header-index 4)
	(setf (rpc:byte-swapped-8-aref-16 header header-index) ntags)
	(incf header-index 2)
	(flet ((write-tiff (tag type length value)
		 (setf (rpc:byte-swapped-8-aref-16 header header-index)
		       (second (gethash tag *tiff-tags*)))
		 (incf header-index 2)
		 (setf (rpc:byte-swapped-8-aref-16 header header-index)
		       (position type *tiff-types*))
		 (incf header-index 2)
		 (setf (rpc:byte-swapped-8-aref-32 header header-index) length)
		 (incf header-index 4)
		 (ecase type
		   (:byte
		     (setf (aref header header-index) value))
		   (:short
		     (if (> length 2)
			 ;; Note that caller must supply contents.
			 (setf (rpc:byte-swapped-8-aref-32 header header-index) extended-index)
			 (setf (rpc:byte-swapped-8-aref-16 header header-index) value)))
		   (:long
		     (setf (rpc:byte-swapped-8-aref-32 header header-index) value))
		   (:rational
		     (setf (rpc:byte-swapped-8-aref-32 header header-index) extended-index)
		     (setf (rpc:byte-swapped-8-aref-32 header extended-index)
			   (numerator value))
		     (incf extended-index 4)
		     (setf (rpc:byte-swapped-8-aref-32 header extended-index)
			   (denominator value))
		     (incf extended-index 4))
		   (:ascii
		     (setf (rpc:byte-swapped-8-aref-32 header header-index) extended-index)
		     (copy-array-portion value 0 (length value)
					 header extended-index
					 (+ extended-index (length value)))
		     (incf extended-index length)))
		 (incf header-index 4)))
	  (write-tiff 'SubFileType :short 1 1)
	  (write-tiff 'ImageWidth :short 1 width)
	  (write-tiff 'ImageLength :short 1 height)
	  (write-tiff 'BitsPerSample :short 1 depth)
	  (write-tiff 'Compression :short 1 #x8005)	;PackBits
	  (write-tiff 'PhotometricInterpretation :short 1 0)
	  (write-tiff 'FillOrder :short 1 1)
	  (write-tiff 'Orientation :short 1 1)
	  (write-tiff 'SamplesPerPixel :short 1 1)
	  (write-tiff 'MinSampleValue :short 1 0)
	  (write-tiff 'MaxSampleValue :short 1 (1- (ash 1 depth)))
	  (write-tiff 'PlanarConfiguration :short 1 1)
	  (when x-resolution
	    (write-tiff 'XResolution :rational 1 (rationalize x-resolution)))
	  (when y-resolution
	    (write-tiff 'YResolution :rational 1 (rationalize y-resolution)))
	  (when image-name
	    (write-tiff 'DocumentName :ascii
			(ceiling-multiple-of (1+ (length image-name)) 4) image-name))
	  (when color-map
	    (write-tiff 'ColorMap :short (* 3 (ash 1 depth)) nil)
	    (dotimes (c (ash 1 depth))
	      (flet ((write-extended-16 (n)
		       (setf (rpc:byte-swapped-8-aref-16 header extended-index) n)
		       (incf extended-index 2)))
		(multiple-value-bind (r g b)
		    (color-map-rgb color-map c (1- 1_16))
		  (write-extended-16 r)
		  (write-extended-16 g)
		  (write-extended-16 b)))))
	  (write-tiff 'StripOffsets :long 1 extended-index))
	(setf (rpc:byte-swapped-8-aref-32 header header-index) 0)
	(incf header-index 4)
	(assert (and (= header-index header-length)
		     (= extended-index (length header))))
	(send stream :string-out header)))
    (with-image-raster (raster image)
     (stack-let* ((row-bytes (ceiling (* width depth) 8))
		  (raster-row-bytes (ceiling (* (multiple-value-bind (nil nil span)
						    (decode-raster-array raster)
						  span)
						depth) 8))
		  (as-bytes (make-array (* raster-row-bytes height)
					:element-type '(unsigned-byte 8)
					:displaced-to raster))
		  (extra-source (make-array row-bytes :element-type '(unsigned-byte 8)))
		  (slice (make-array (+ row-bytes 2) :element-type '(unsigned-byte 8)
				     :fill-pointer 0)))
      (declare (sys:array-register as-bytes extra-source slice))
      (sys:with-bit-reversing
	(dotimes (y height)
	  (let ((raster-index (* y raster-row-bytes))
		(source extra-source)
		(source-index 0))
	    (ecase depth
	      (1
	       (dotimes (i row-bytes)
		 (setf (aref extra-source i)
		       (sys:bit-reverse-8 (aref as-bytes (+ raster-index i))))))
	      (8
	       (setq source as-bytes
		     source-index raster-index))
	      (2
	       (dotimes (i row-bytes)
		 (setf (aref extra-source i)
		       (let ((value 0))
			 (dotimes (j 4)
			   (setf (load-byte value (- 6 (* j 2)) 2)
				 (raster-aref raster (+ (* i 4) j) y)))
			 value))))
	      (4
	       (dotimes (i row-bytes)
		 (setf (aref extra-source i)
		       (let ((value 0))
			 (dotimes (j 2)
			   (setf (load-byte value (- 4 (* j 4)) 4)
				 (raster-aref raster (+ (* i 2) j) y)))
			 value))))
	      (16
	       (dotimes (i (ceiling row-bytes 2))
		 (setf (rpc:byte-swapped-8-aref-16 extra-source (* i 2))
		       (raster-aref raster i y))))
	      (32
	       (dotimes (i (ceiling row-bytes 4))
		 (setf (rpc:byte-swapped-8-aref-32 extra-source (* i 4))
		       (raster-aref raster i y)))))
	    (setf (fill-pointer slice) 0)
	    (mtb::pack-bits source slice :start1 source-index :end1 (+ source-index row-bytes)
					 :bit-reverse-p nil)
	    (send stream :string-out slice))))))))
