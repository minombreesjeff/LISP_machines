;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Color maps

(deff make-color-map 'color:make-standard-color-map)

(defun color-map-equal (map1 map2)
  (equalp (send map1 :map) (send map2 :map)))

(defun color-map-rgb (map index &optional (denominator 1))
  (multiple-value-bind (r g b)
      (send map :read-color-map index)
    (flet ((scale (value)
	     (if (= denominator 1)
		 value
		 (round (* value denominator)))))
      (values (scale r) (scale g) (scale b)))))

(defun set-color-map-rgb (map index red green blue &optional (denominator 1))
  (flet ((scale (value)
	   (if (= denominator 1)
	       value
	       (/ value (float denominator)))))
    (send map :write-color-map index (scale red) (scale green) (scale blue))))

;;;; Images

(deff image-p 'color:image-p)

(defprop define-image-message-linkage defun zwei:definition-function-spec-type)
(defmacro define-image-message-linkage (name message &rest args)
  (let ((settable t)
	(send-if-handles nil)
	(coerce 'identity)
	indicator default)
    (when (eq message :get)
      (setq indicator (pop args))
      (setq default (pop args)))
    (loop while args
	  do (ecase (pop args)
	       (:settable (setq settable (pop args)))
	       (:coerce (setq coerce (pop args)))
	       (:send-if-handles (setq send-if-handles (pop args)))))
    `(progn
       (defun ,name (image)
	 ,(let ((form `(send image ,message)))
	    (when send-if-handles
	      (setq form `(send-if-handles . ,(rest form))))
	    (when (eq message :get)
	      (setq form `(,@form ',indicator)))
	    (unless (null default)
	      (setq form `(or ,form ,default)))
	    (unless (eq coerce 'identity)
	      (setq form `(,coerce ,form)))
	    form))
       ,@(when settable
	   (let ((set-name (sys:fintern "SET-~A" name)))
	     `((defun ,set-name (image value)
		 (declare (sys:function-parent ,name defun))
		 ,(if (eq message :get)
		      `(send image :putprop value ',indicator)
		      `(send image ,(intern (string-append "SET-" message)
					    si:pkg-keyword-package)
			     value)))
	       (defsetf ,name ,set-name)))))))

(define-image-message-linkage image-name :name :coerce (lambda (x) (and x (string x))))

(define-image-message-linkage image-raster :data-array)

(define-image-message-linkage image-width :width)
(define-image-message-linkage image-height :height)
(define-image-message-linkage image-size :size :settable nil)
(define-image-message-linkage image-depth :useful-bits-per-pixel :settable nil)

(define-image-message-linkage image-color-map :setup-color-map :send-if-handles t)

(define-image-message-linkage image-x-resolution :get :x-resolution 0)
(define-image-message-linkage image-y-resolution :get :y-resolution 0)
(define-image-message-linkage image-x-position :get :x-position 0)
(define-image-message-linkage image-y-position :get :y-position 0)

(define-image-message-linkage image-file :source-file)
(define-image-message-linkage image-file-format :file-format)

(defun make-image-from-raster (raster &rest args &key (name nil) &allow-other-keys)
  (declare (arglist (raster &key width height name
				 color-map x-resolution y-resolution
				 x-position y-position
				 file file-format
				 invisible-to-database)))
  (setq args (copy-list args))
  (loop for sublist on args by 'cddr do
    (case (first sublist)
      (:color-map
	(setf (first sublist) :setup-color-map))
      (:file
	(setf (first sublist) :source-file))))
  (apply #'color:make-image (color:default-image-type (sys:array-element-byte-size raster))
	 :data-array raster :name name		;Default to NIL, so can set later.
	 args))

(defun find-image-named (name &key (if-does-not-exist :error))
  (let ((entry (gethash name color:*named-images*)))
    (if entry
	(if (consp entry) (first entry) entry)
	(case if-does-not-exist
	  (:error (error "There is no image named ~A" name))))))

(defun named-images ()
  ;; Note: return just the first if name collision
  (loop for entry being the hash-elements of color:*named-images*
	collect (if (consp entry) (first entry) entry)))

(defun image-1-bit-raster (image)
  (send (send image :1b-image) :data-array))


(defun with-image-raster-1 (image continuation &key force-1b force-gray)
  (when (and force-gray (not (operation-handled-p image :8b-image)))
    (setq force-1b t))
  (let ((temp-image))
    (unwind-protect
	(progn
	  (cond (force-1b
		 (if (operation-handled-p image :1b-image)
		     (setq image (send image :1b-image))
		     (setq temp-image
			   (setq image (make-image-from-raster (image-1-bit-raster image)
							       :width (image-width image)
							       :height (image-height image)
							       :invisible-to-database t)))))
		(force-gray
		 ;;--- There isn't a version of :8b-image that does grayscale.
		 (setq temp-image
		       (setq image (send image :create-8b-image :method :grayscale
					 :name nil :invisible-to-database t)))))
	  (let ((w (image-width image))
		(h (image-height image)))
	    (tv:with-bit-array
	      image :input
	      #'(lambda (raster index span)
		  (floor index span)
		  (unless (zerop index) (error "protocol doesn't permit nonzero index"))
		  (funcall continuation raster w h))
	      :width w
	      :height h)))
    (when temp-image (color:kill-image temp-image))
    )))


;;;; A few additional operations on images.

(defun rotate-image (image)
  ;; I'm supposed to use some kind of continuation thingy, right?
  (let ((raster (send image :data-array)))
    (check-type raster (array bit))
    (multiple-value-bind (width height)
	(send image :size)
      (send image :set-data-array (lgp:bit-array-rot-90 width height raster 0 0))
      (send image :set-size height width))))

(defun reflect-image (image direction)
  (let ((raster (send image :data-array)))
    (multiple-value-bind (width height) (send image :size)
      (reflect-raster raster width height direction))))

(defun reflect-raster (raster width height direction)
  (ecase direction
    (:vertical
      ;; Reverse in Y direction.
      (stack-let* ((dims (list 1 (decode-raster-array raster)))
		   (slice (make-array dims :type (sys:array-type raster))))
	(loop for top from 0
	      for bottom downfrom (1- height)
	      while (< top bottom)
	      do
	  (bitblt boole-1 width 1 raster 0 top slice 0 0)
	  (bitblt boole-1 width 1 raster 0 bottom raster 0 top)
	  (bitblt boole-1 width 1 slice 0 0 raster 0 bottom))))
    (:horizontal
      ;; Reverse in X direction.
      (stack-let* ((dims (list (multiple-value-bind (nil nil span)
				   (decode-raster-array raster) span)
			       1))
		   (slice (make-array dims :type (sys:array-type raster))))
	(loop for left from 0
	      for right downfrom (1- width)
	      while (< left right)
	      do
	  (bitblt boole-1 1 height raster left 0 slice 0 0)
	  (bitblt boole-1 1 height raster right 0 raster left 0)
	  (bitblt boole-1 1 height slice 0 0 raster right 0))))))

(defun trim-image (image)
  (multiple-value-bind (raster width height dx dy)
      (trim-and-copy-raster (send image :data-array))
    (send image :set-data-array raster)
    (send image :set-size width height)
    (incf (image-x-position image) dx)
    (incf (image-y-position image) dy)))

(defun trim-and-copy-raster (raster)
  (multiple-value-bind (left right+1)
      (raster-ink-bounds-left/right raster)
    (multiple-value-bind (top bottom+1)
	(raster-ink-bounds-top/bottom raster)
      (trim-and-copy-raster-1 raster left top right+1 bottom+1))))

(defun trim-and-copy-raster-1 (raster left top right+1 bottom+1)
  (let ((width (- right+1 left))
	(height (- bottom+1 top)))
    (let ((new (graphics:make-raster-array-with-correct-width width height
		 :element-type (array-element-type raster))))
      (bitblt boole-1 width height
	      raster left top
	      new 0 0)
      (values new width height left top))))

(defun raster-ink-bounds-left/right (raster)
  (multiple-value-bind (width height) (decode-raster-array raster)
    (sys:with-data-stack
      (let ((height2 (ceiling height 2)))
	(let ((rows (sys:make-raster-stack-array width height2 :type (sys:array-type raster))))
	  (bitblt boole-1 width height2 raster 0 0 rows 0 0)
	  (bitblt boole-ior width (- height height2) raster 0 height2 rows 0 0)
	  (setq height2 (ceiling height2 2))
	  (loop while (> height2 1) do
	    (let ((height4 (ceiling height2 2)))
	      (bitblt boole-ior width (- height2 height4)
		      rows 0 height4 rows 0 0)
	      (setq height2 height4)))
	  (let ((left (dotimes (i width)
			(when ( (raster-aref rows i 0) 0) (return i))))
		(right (loop for i from (1- width) downto 0
			     when ( (raster-aref rows i 0) 0)
			       return i)))
	    (if left
		(values left (1+ right))
		(values 0 1))))))))

(defun raster-ink-bounds-top/bottom (raster)
  (check-type raster (array bit))
  (multiple-value-bind (ignore height spanning-width) (decode-raster-array raster)
    (stack-let ((1d-raster (make-array (* height spanning-width)
				       :element-type 'bit :displaced-to raster)))
      (let ((nwords (/ (* height spanning-width) 32)))
	(multiple-value-bind (p bit-offset bits)
	    (cli::decode-bit-vector 1d-raster 0 (* height spanning-width))
	  (assert (zerop bit-offset))
	  (assert (= bits (* height spanning-width)))
	  (let ((first-nonzero
		  (dotimes (j nwords)
		    (let ((word (sys:%p-contents-increment-pointer p)))
		      (unless (zerop word)
			(return j))))))
	    (if first-nonzero
		(let ((first-row (floor (* 32 first-nonzero) spanning-width))
		      (last-nonzero nil))
		  (loop for j from (1+ first-nonzero) below nwords do
		    (let ((word (sys:%p-contents-increment-pointer p)))
		      (unless (zerop word)
			(setq last-nonzero j))))
		  (if last-nonzero
		      (let ((last-row (floor (* 32 last-nonzero) spanning-width)))
			(values first-row (1+ last-row)))
		      (values first-row (1+ first-row))))
		(values 0 1))))))))

(defun transform-image (image new-name
			&key (crop nil) (reflect nil) (rotate 0) (scale 1)
			     (depth (image-depth image))
			     (conversion-method nil))
  (let* ((new-image image)
	 (depth-change ( depth (image-depth new-image)))
	 (1b-reduce-without-iman (and depth-change (= depth 1)
				      (not (operation-handled-p image :create-1b-image)))))
    (when (or crop reflect ( rotate 0) ( scale 1) 1b-reduce-without-iman)
      (let ((raster (image-raster image)))
	(multiple-value-bind (width height)
	    (image-size image)
	  (let ((x-position (image-x-position image))
		(y-position (image-y-position image)))
	    (when crop
	      (multiple-value-bind (left top right bottom)
		  (if (eq crop :ink)
		      (multiple-value-bind (left right)
			  (raster-ink-bounds-left/right raster)
			(multiple-value-bind (top bottom)
			    (raster-ink-bounds-top/bottom raster)
			  (values left top right bottom)))
		      (values-list crop))
		(let (dx dy)
		  (multiple-value-setq (raster width height dx dy)
		    (trim-and-copy-raster-1 raster left top right bottom))
		  (incf x-position dx)
		  (incf y-position dy))))
	    (when reflect
	      (reflect-raster raster width height reflect))
	    (dotimes (ignore (/ rotate 90))
	      (setq raster (lgp:bit-array-rot-90 width height raster 0 0))
	      (rotatef width height)
	      (rotatef x-position y-position))
	    (unless (= scale 1)
	      (if (fboundp 'color:zoom-rectangle)
		  (let* ((new-width (round (* width scale)))
			 (new-height (round (* height scale)))
			 (new-raster (graphics:make-raster-array-with-correct-width
				       new-width new-height
				       :element-type (array-element-type raster))))
		    (color:zoom-rectangle
		      :from-array raster :from-right width :from-bottom height
		      :to-array new-raster :to-right new-width :to-bottom new-height)
		    (setq raster new-raster width new-width height new-height))
		  ;; Poor man's version (only decent for 1-bit).
		  (multiple-value-setq (raster nil nil width height)
		    (graphics:with-output-to-bitmap (stream)
		      (graphics:draw-image raster 0 0 :scale scale :stream stream)))))
	    (when 1b-reduce-without-iman
	      ;; Recognize special case of converting to monochrome without IMAN loaded.
	      ;; Do it the simple minded way, which is better than nothing.
	      (let ((new-raster (graphics:make-raster-array-with-correct-width
				  width height :element-type 'bit)))
		(tv:%read-1-bit-raster width height raster 0 0 new-raster 0 0)
		(setq raster new-raster
		      depth-change nil)))
	    (setq new-image (make-image-from-raster raster :width width :height height
						    :x-position x-position
						    :y-position y-position
						    :invisible-to-database t))))))
    (if depth-change
	(let ((create-message (case depth
				(1 :create-1b-image)
				(2 :create-2b-image)
				(4 :create-4b-image)
				(8 :create-8b-image)
				(otherwise :create-32b-image))))
	  (unless (operation-handled-p new-image create-message)
	    (error "This operation does not work unless IMAN is loaded"))
	  (let ((args (and conversion-method (list :method conversion-method))))
	    (setq new-image (lexpr-send new-image create-message
					:name new-name args))))
	;; This will register it.
	(setf (image-name new-image) new-name))
    new-image))
