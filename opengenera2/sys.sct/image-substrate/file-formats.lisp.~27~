;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-presentation-type named-image-internal ()
   :history t

   :parser ((stream &key original-type initially-display-possibilities)
	    (dw:complete-from-sequence (named-images) stream
				       :predicate #'image-name	;Must have a name
				       :type original-type
				       :name-key #'image-name
				       :initially-display-possibilities
				        initially-display-possibilities))
   :printer ((image stream)
	     (write-string (image-name image) stream))

   :typep ((object) (image-p object))
   :description "an image")

(define-presentation-type named-image ()
   :abbreviation-for '(named-image-internal)
   :choose-displayer ((stream object query-identifier &key original-type)
		      (dw:accept-values-choose-from-sequence
			stream (named-images) object query-identifier
			:type original-type))
   :description "an image"
   )

(defun set-default-image (image)
  (setf (dw:presentation-type-default 'named-image) image))

(cp:define-command (com-transform-image :command-table "Images")
    ((image 'named-image :prompt "source image")
     (new-name 'string :prompt "destination image name"
		       :default (and image (image-name image)))
     &key
     (crop '((token-or-type (("None" . nil)
			     ("Ink" :value :ink :documentation "Smallest enclosing rectangle"))
	       ((sequence-enumerated integer integer integer integer)
		:description "a list of left,top,right,bottom")))
	   :default nil :mentioned-default :ink)
     (rotate '((member 0 90 180 270) :description "number of degrees")
	     :default 0 :mentioned-default 90)
     (reflect '((token-or-type (("None" . nil))
		  ((member :vertical :horizontal) :description "Reflection axis")))
	      :default nil :mentioned-default :vertical)
     (scale 'number :default 1)
     (depth '((member 1 2 4 8 32)) :default (and image (image-depth image)))
     (conversion-method (let ((old-depth (and image (image-depth image))))
			  (cond ((eql depth old-depth)
				 '((alist-member :alist (("None" . nil)))))
				((> depth old-depth)
				 '((alist-member :alist (("Expand" :value :expand)))))
				((= depth 8)
				 '((alist-member
				     :alist (("None" . nil)
					     ("Red" :value :red
					      :documentation "Just the red plane")
					     ("Green" :value :green
					      :documentation "Just the green plane")
					     ("Blue" :value :blue
					      :documentation "Just the blue plane")
					     ("Palette" :value :palette
					      :documentation "Use the standard palette")
					     ("Peano" :value :peano
					      :documentation "Create a palette based on colors used")
					     ("Gray scale" :value :grayscale)))))
				(t
				 '((alist-member :alist (("Dither" :value :dither)))))))
			:default (let ((old-depth (and image (image-depth image))))
				   (cond ((eql depth old-depth) nil)
					 ((> depth old-depth) :expand)
					 ((= depth 8) :peano)
					 (t :dither)))))
   (let ((other-image (find-image-named new-name :if-does-not-exist nil)))
     (when (and other-image (neq image other-image))
       (unless (yes-or-no-p "There is already an image named \"~A\",
it will become inaccessible, okay? ")
	 (return-from com-transform-image))))
   (let ((new-image (transform-image image new-name
				     :crop crop :rotate rotate :reflect reflect :scale scale
				     :depth depth :conversion-method conversion-method)))
     (set-default-image new-image)
     (format t "~&Image created: ")
     (present new-image 'named-image)))

(defflavor image-file-format
	(name
	 pretty-name
	 (description nil)
	 (read-function nil)
	 (write-function nil)
	 (file-stream-element-type nil)
	 (file-canonical-types nil)
	 (calling-sequence :raster))
	()
  :initable-instance-variables
  :readable-instance-variables
  (:init-keywords :file-canonical-type :auxiliary-file-canonical-types)
  (:required-init-keywords :name)
  )

(defmethod (make-instance image-file-format) (&key (file-canonical-type name)
						   (auxiliary-file-canonical-types nil)
					      &allow-other-keys)
  (check-type calling-sequence (member :raster :image :image-sequence))
  (setq file-canonical-types auxiliary-file-canonical-types)
  (when file-canonical-type
    (push file-canonical-type file-canonical-types))
  (unless (variable-boundp pretty-name)
    (setq pretty-name (string-capitalize name))))

(defmethod (sys:print-self image-file-format) (stream &rest ignore)
  (sys:printing-random-object (self stream :typep)
    (when name
      (prin1 name stream))))

(defvar *image-file-formats* nil :localize t)

(defvar *images-canonical-types* (list :image-icon :null-type) :localize t)

(defun add-image-file-format (name &rest options)
  (when (si:record-source-file-name name 'define-image-format)
    (let* ((new (apply #'make-instance 'image-file-format :name name options)))
      (pushnew new *image-file-formats* :replace t :key #'image-file-format-name)
      (loop for type in (image-file-format-file-canonical-types new)
	    unless (or (null type)
		       (member type *images-canonical-types*))
	      do
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")		;add to end destructively, so users of the list will win
0		(nconc *images-canonical-types* (list type)))
      )))


(defun find-image-file-format (name &key (if-does-not-exist :error))
  (or (find name *image-file-formats* :key #'image-file-format-name)
      (case if-does-not-exist
	(:error (error "There is no image format named ~A" name)))))

(defprop define-image-file-format "Image file format" si:definition-type-name)

(defmacro define-image-file-format (name &body options)
  (declare (arglist name &key pretty-name description
		    read-function write-function
		    (file-stream-element-type nil)
		    (file-canonical-type name)
		    (auxiliary-file-canonical-types nil)
		    (calling-sequence :raster)))
  `(add-image-file-format ,name . ,(loop for (keyword value) on options by 'cddr
					 collect keyword
					 collect (if (and (atom value)
							  (constantp value))
						     value
						     `',value))))

(defmethod (image-file-format-input-p image-file-format) ()
  (not (null read-function)))

(defmethod (image-file-format-output-p image-file-format) ()
  (not (null write-function)))

(define-presentation-type image-file-format-name-internal ((&key direction))
   :parser ((stream &key original-type initially-display-possibilities)
	    (dw:complete-from-sequence *image-file-formats* stream
				       :predicate (case direction
						    (:input #'image-file-format-input-p)
						    (:output #'image-file-format-output-p)
						    (otherwise #'true))
				       :compress-choices :never
				       :type original-type
				       :name-key #'image-file-format-pretty-name
				       :value-key #'image-file-format-name
				       :documenter #'(lambda (format stream)
						       (let ((description
							       (image-file-format-description
								 (find-image-file-format
								   format))))
							 (when description
							   (write-string description stream))
							 ))
				       :initially-display-possibilities
				        initially-display-possibilities))

   :printer ((format stream)
	     (write-string (image-file-format-pretty-name (find-image-file-format format))
			   stream))
   :description "an image file format")

(define-presentation-type image-file-format-name ((&key direction))
   :abbreviation-for `((image-file-format-name-internal :direction ,direction))

   :choose-displayer ((stream object query-identifier &key original-type)
		      (dw:accept-values-choose-from-sequence
			stream *image-file-formats* object query-identifier
			:type original-type :key #'image-file-format-name
			:documentation-key #'image-file-format-description))

   :description "an image file format")

(defun pathname-default-image-file-format-name (pathname &key direction)
  (when pathname
    (if (eq (send (send pathname :host) :system-type) :macintosh)
	:macintosh	;Special case, files are internally self typing
	(let ((canonical-type (send pathname :canonical-type)))
	  (loop for format in *image-file-formats*
		when (and (member canonical-type
				  (image-file-format-file-canonical-types format))
			  (case direction
			    (:input (image-file-format-input-p format))
			    (:output (image-file-format-output-p format))
			    (otherwise t)))
		  return (image-file-format-name format))))))

(defmethod (read-images-from-file-in-format image-file-format) (pathname &rest options)
  (unless read-function
    (error "The ~A format cannot read files." self))
  (multiple-value-bind (image width height args)
      (flet ((get-it (argument)
	       (multiple-value-call #'(lambda (raster &optional width height &rest args)
					(values raster width height (copy-list args)))
				    (apply read-function argument options))))
	(if (null file-stream-element-type)
	    (get-it pathname)
	    (with-open-file (stream pathname :element-type file-stream-element-type)
	      (get-it stream))))
    (ecase calling-sequence
      (:image-sequence
	image)
      (:image
	(list image))
      (:raster
	(list (apply #'make-image-from-raster image :width width :height height args))))))

(defmethod (write-image-to-file-in-format image-file-format) (image pathname &rest options)
  (unless write-function
    (error "The ~A format cannot write files." self))
  (flet ((do-call (&rest value)
	   (if (null file-stream-element-type)
	       (apply write-function pathname value)
	       (with-open-file (stream pathname :direction :output
				       :element-type file-stream-element-type)
		 (apply write-function stream value)
		 (send stream :close)
		 (send stream :truename)))))
    (ecase calling-sequence
      (:image-sequence
	(apply #'do-call (list image) options))
      (:image
	(apply #'do-call image options))
      (:raster
	(with-image-raster (raster image :width width :height height)
	  (apply #'do-call raster width height
		 :name (image-name image)
		 :color-map (image-color-map image)
		 options))))))

(compile-flavor-methods image-file-format)

(define-image-file-format :bin
  :pretty-name "BIN"
  :description "Symbolics binary file (data only, compatible with all architectures)"
  :write-function write-images-to-bin-file
  :read-function load-images-from-bin-file
  :calling-sequence :image-sequence)

;;; You can just use load-file to load the images and they appear silently.
(defvar *this-file-images*)
(defvar *note-this-file-images* nil)

(defun load-images-from-bin-file (pathname)
  (let ((*this-file-images* nil)
	(*note-this-file-images* t))
    (si:bin-load-file pathname nil t)
    *this-file-images*))

(defun note-this-file-image (image)
  (when *note-this-file-images*
    (push image *this-file-images*)))

(defun write-images-to-bin-file (pathname images)
  (sys:dump-forms-to-file pathname (loop for image in images
					 collect `(note-this-file-image ',image))))

;;; Should these commands be global, or in some application, such as DDyer's image browser?

(defun unique-image-name (prefix)
  (loop for i from 0 do
    (let ((name (if (plusp i)
		    (format nil "~A-~D" prefix i)
		    prefix)))
      (unless (find-image-named name :if-does-not-exist nil)
	(return name)))))

(cp:define-command (com-read-image-file :command-table "Images")
    ((pathname '((sequence pathname)) :prompt "from file(s)")
     (format '((image-file-format-name :direction :input))
	     :prompt "format" :documentation "format of file"
	     :default (pathname-default-image-file-format-name (first pathname)))
     &key
     (trim 'boolean :default (eq format :macpaint)	;Since format fully determines size
	   :mentioned-default t
	   :documentation "Return the smallest image necessary to store just the ink")
     (rotate 'boolean :default nil :mentioned-default t
	     :documentation "Rotate the image 90 degrees (useful for MacPaint screen images)")
     (mac-file-header 'boolean :default nil :mentioned-default t
		      :documentation "Both forks of file were copied from Macintosh"
		      ;; Only offered if common Mac formats not stored on Mac.
		      :when (and (member format '(:pict :macpaint))
				 pathname
				 (neq (send (send (first pathname) :host) :system-type)
				      :macintosh)))
     )
   (let ((options (and (member format '(:pict :macpaint))
		       pathname
		       (neq (send (send (first pathname) :host) :system-type) :macintosh)
		       ;; Default is t, so only need to pass if offered (not MacFS).
		       (list :header-p mac-file-header)))
	 ;; The CP should have a single routine to do this work.
	 (files (loop for pathname in pathname
		      if (not (send pathname :wild-p))
			collect pathname
		      else nconc (let ((list (directory pathname)))
				   (if (eq (send pathname :version) :newest)
				       (loop for file in list
					     collect (send file :new-version :newest))
				       list)))))
     (if (null files)
	 (format t "~&No files match ~{~A~^, ~}.~%" pathname)
	 (dolist (file files)
	   (let ((images (apply #'read-images-from-file-in-format
				(find-image-file-format format) file
				options)))
	     (when rotate
	       (map () #'rotate-image images))
	     (when trim
	       (map () #'trim-image images))
	     (dolist (image images)
	       (setf (image-file image) file
		     (image-file-format image) format)
	       (when (null (image-name image))
		 (setf (image-name image) (unique-image-name (send file :raw-name)))))
	     (if (null images)
		 (format t "~&No images read~:[ from ~A~].~%" (null (rest files)) file)
	       (set-default-image (first images))
	       (format t "~&Images read~:[ from ~A~]: " (null (rest files)) file)
	       (present images '((sequence named-image)))
	       (terpri)))))))

(cp:define-command (com-write-image-file :command-table "Images")
    ((image 'named-image :prompt "image")
     (pathname 'pathname :prompt "to file" :default (image-file image))
     (format '((image-file-format-name :direction :output))
	     :prompt "format" :documentation "format of file"
	     :default (or (pathname-default-image-file-format-name pathname)
			  (image-file-format image)))
     &key
     (mac-file-header 'boolean :default nil :mentioned-default t
		      :documentation "Both forks of file to be copied to Macintosh"
		      ;; Only offered if common Mac formats not stored on Mac.
		      :when (and (member format '(:pict :macpaint))
				 pathname
				 (neq (send (send pathname :host) :system-type)
				      :macintosh))))
   (let ((options (and (member format '(:pict :macpaint))
		       pathname
		       (neq (send (send pathname :host) :system-type) :macintosh)
		       ;; Default is t, so only need to pass if offered (not MacFS).
		       (list :header-p mac-file-header))))
     (let ((truename (apply #'write-image-to-file-in-format (find-image-file-format format)
			    image pathname
			    options)))
       (when truename
	 (format t "~&Written: ~A~%" truename)))))

(define-presentation-type rectangle ()
   :expander '((sequence-enumerated integer integer integer integer) :echo-space nil)
   :parser ((stream &key default)
	    (dw:with-accept-subfields (stream :separator ",")
		((left 'integer :prompt "left" :default (first default))
		 (top 'integer :prompt "top" :default (second default))
		 (right 'integer :prompt "right" :default (third default))
		 (bottom 'integer :prompt "bottom" :default (fourth default)))
	      (list left top right bottom)))
   )

(define-presentation-type point ()
   :expander '((sequence-enumerated integer integer) :echo-space nil)
   :parser ((stream &key default)
	    (dw:with-accept-subfields (stream :separator ",")
		((x 'integer :prompt "x" :default (first default))
		 (y 'integer :prompt "y" :default (second default)))
	      (list x y)))
   )

;;;--- The idea here should be that all code uses something like draw-image to do the work.
;;; It takes the image instance and calls it to do the scaled drawing to the stream,
;;; such as by swapping in slices.  It could still be called draw-image, which would then take
;;; either a raster or an image instance.
(cp:define-command (com-show-image :command-table "Images")
    ((image 'named-image :prompt "image")
     &key
     (source-rectangle 'rectangle :default (multiple-value-bind (width height)
					       (image-size image)
					     (list 0 0 width height)))
     (destination-position '((token-or-type (("Cursor position" . :cursor))
					    point))
			   :default :cursor)
     (scale '((number (0))) :default 1))
   (cond ((not (operation-handled-p *standard-output* :draw-image-instance))
	  ;; :Output destination someplace not a window.
	  (with-image-raster (raster image)
	    (destructuring-bind (left top right bottom) source-rectangle
	      (let ((height (- bottom top)))
		(graphics:with-room-for-graphics (t (ceiling (* height scale)))
		  (graphics:draw-image raster 0 (- height) :scale scale :scale-y -1
				       :image-left left :image-top top
				       :image-right right :image-bottom bottom))))))
	 ((neq destination-position :cursor)
	  (lexpr-send *standard-output* :draw-image-instance image
		      (first destination-position) (second destination-position)
		      scale source-rectangle))
	 (t
	  (fresh-line)   
	  (multiple-value-bind (nil y)
	      (send *standard-output* :read-cursorpos)
	    (lexpr-send *standard-output* :draw-image-instance image 0 y
			scale source-rectangle)
	    (dw:with-output-truncation ()
	      (send *standard-output* :set-cursorpos nil
		    (+ y
		       (destructuring-bind (ignore top ignore bottom) source-rectangle
			 (let ((height (- bottom top)))
			   (ceiling (* height scale))))
		       (send *standard-output* :line-height))))))))

(define-presentation-to-command-translator com-show-image (named-image) (image)
  `(com-show-image ,image))

(cp:define-command (com-hardcopy-image :command-table "Images"
				       :provide-output-destination-keyword nil)
    ((image 'named-image :prompt "image" :confirm t)
     (printer '((token-or-type (:file) sys:printer))
	      :prompt "printer" :default hardcopy:*default-bitmap-printer*)
     (file 'pathname :when (eq printer :file) :prompt "file")
     &key
     (scale '((token-or-type (("Best fit")) ((number (0))))) :default nil :provide-default t)
     (orientation '((scl:member :landscape :portrait :best-fit)) :default :best-fit))
   (hardcopy-image image (if (eq printer :file)
			     (hardcopy:get-hardcopy-device (list :file file))
			     printer)
		   :scale scale :orientation orientation))

(defun hardcopy-image (image &optional (printer hardcopy:*default-bitmap-printer*) &rest args)
  (declare (arglist image &optional (printer hardcopy:*default-bitmap-printer*)
			  &key scale (orientation :best-fit)))
  (setq printer (hardcopy:get-hardcopy-device printer))
  (setq args (copy-list args))			;May need to modify indicator
  (loop for sublist on args by 'cddr do
    (when (eq (first sublist) :scale)
      (setf (first sublist) :zoom)))
  (let ((force-gray nil)
	(force-1b nil))
    (cond ((send-if-handles printer :color-p)
	   ;; Printer can take anything, pass in map is known.
	   (let ((cm (image-color-map image)))
	     (when (and cm (neq cm color:*standard-grayscale-map*))
	       (setf (getf args :color-map) cm))))
	  ((send-if-handles printer :gray-p)
	   ;; Printer can take gray, convert from color if necessary.
	   (when (or ( (image-depth image) 24)
		     (let ((cm (image-color-map image)))
		       (and cm (neq cm color:*standard-grayscale-map*))))
	     (setq force-gray t)))
	  (t
	   ;; Printer can only take B&W.
	   (when (> (image-depth image) 1)
	     (setq force-1b t))))
    (with-image-raster (raster image :width width :height height
				     :force-gray force-gray :force-1b force-1b)
      (apply #'hci::hardcopy-image raster printer
	     :width width :height height
	     :title (or (image-name image) "Image")
	     args))))

;;; Allow use via Function 0 Q.
(hardcopy:define-hardcopy-screen-destination :named-image
  :documentation "Put image into set that can be written to files or inserted into editors."
  :reader ((stream &key name)
	   (list :name (accept 'string :prompt "  Name" :stream stream
			       :default (or name "Screen-image"))))
  :multi-bit-ok t
  :value ((raster &rest args &key name &allow-other-keys)
	  (set-default-image
	    (apply #'make-image-from-raster raster
		   :name (unique-image-name (or name "Screen-image"))
		   args))))

(hardcopy:define-hardcopy-screen-destination :file
  :documentation "Write image to a file"
  :reader ((stream &key file format)
	   (setq file (accept 'pathname :prompt "  File" :stream stream :default file)
		 format (accept '((image-file-format-name :direction :output))
				:prompt "   Format"
				:default (or format
					     (pathname-default-image-file-format-name file))))
	   (list :file file :format format))
  :multi-bit-ok t
  :value ((raster &rest args &key file format &allow-other-keys)
	  (write-image-to-file-in-format (find-image-file-format format)
					 (si:with-rem-keywords (some-args args
									  '(:file :format))
					   (apply #'make-image-from-raster raster some-args))
					 file)))

(define-presentation-action screen-image
   (t si:input-editor
      :gesture nil
      :blank-area t
      :documentation "Pick up image from screen"
      :menu :marking-and-yanking)
   (ignore &key window)
   (set-default-image (get-screen-image-with-mouse (tv:mouse-sheet (tv:sheet-mouse window)))))

(defun get-screen-image-with-mouse (&optional (sheet tv:mouse-sheet))
  (multiple-value-bind (left top right bottom)
      (tv:mouse-specify-rectangle nil nil nil nil sheet)
    (let* ((width (- right left))
	   (height (- bottom top))
	   (bitmap (graphics::make-raster-array-with-correct-width width height
		     :element-type (cdr (assoc (tv:sheet-array-type sheet)
					       cli::*array-element-types*)))))
      (decf left (tv:sheet-left-margin-size sheet))
      (decf top (tv:sheet-top-margin-size sheet))
      (send sheet :bitblt-from-sheet tv:alu-seta width height left top bitmap 0 0)
      (make-image-from-raster bitmap :width width :height height
				     :name (unique-image-name "Screen-image")))))

(defvar *dont-use-iman?* nil)			;default to using IMAN if loaded
						;set to T if you want to use this
						;patch's code even when IMAN is loaded.

(defvar *consider-screen-bow-mode* nil)		;DDyer wants this to default to NIL, i.e.
						;always produce non-bow suitable output
						;T means 'do the right thing' for the current
						;bow-mode state

;;;--- Temporary.  This is just to show how to interact properly with the output history.
;;; The idea is that draw-image massages the arguments into some convenient recordable state,
;;; then does a message to the window, which in turn calls it back to do the actual drawing
;;; after coordinate adjustment.

;;; This calling arrangement assumes that the image instance will take
;;; care of caching enough to be able to do this rapidly again if called
;;; to repaint the output history.
(defmethod (:draw-image-instance graphics:raster-graphics-mixin)
	   (image-instance x y scale &optional (image-left 0) (image-top 0)
			   image-right image-bottom)
  (let* ((screen (send self :screen))
	 (vlm-main-screen #-VLM nil
			  #+VLM (not (typep screen 'COLOR:COMMON-COLOR-HARDWARE-MIXIN))))
    (when (and (null *dont-use-iman?*)
	       (not vlm-main-screen)
	       (operation-handled-p image-instance :view-image))
      (return-from :draw-image-instance
	(send image-instance :view-image self :wdx x :wdy y :scale scale
	      :dx image-left :dy image-top
	      :width image-right :height image-bottom)))
    (with-image-raster (raster image-instance :width width :height height)
      (unless image-right (setq image-right width))
      (unless image-bottom (setq image-bottom height))
      (setq width (- image-right image-left)
	    height (- image-bottom image-top))
      (let ((image-depth (sys:array-element-byte-size raster))
	    (sheet-depth (tv:screen-bits-per-pixel screen)))
	(when vlm-main-screen
	  (setq sheet-depth 1))
	(cond ((= image-depth sheet-depth)
	       (when (and (not (= scale 1)) (> image-depth 1))
		 (error "Cannot scale deep images yet."))
	       (cond ((= scale 1)
		      (send self :draw-raster width height raster x y image-left image-top))
		     ((> scale 1)
		      (graphics::draw-simply-scaled-image self raster x y scale scale
							  nil :draw :erase t
							  image-left image-top width height))
		     (t
		      (graphics:with-graphics-identity-transform (self)
			(graphics:with-graphics-translation (self x y)
			  (graphics:draw-image raster 0 0 :scale scale :stream self
					       :image-left image-left :image-top image-top
					       :image-right image-right :image-bottom image-bottom))))))
	      ((and (= image-depth 1) (= scale 1) #+vlm (not vlm-main-screen))
	       (send self :draw-raster width height raster x y image-left image-top))
	      ((and (> scale 0)
		    (integerp scale)
		    (member (type-of image-instance)
			    '(color:2b-image color:4b-image
					     color:false-color-image
					     color::rgb-image
					     color:32b-image)))
	       (let ((raster (1b-raster-for-image-on-window
			       image-instance width height self scale)))
		 (send self :draw-raster (* scale width) (* scale height)
		       raster
		       x y image-left image-top)))
	      (t
	       (error "Cannot draw images of this type yet.")))))))


(dw::define-viewport-graphics-operation :draw-image-instance
					(image-instance x y scale
					 &optional (image-left 0) (image-top 0)
						   image-right image-bottom)
  :arguments-to-convert (x y)
; :alu alu
  :box (let ((width (- (or image-right (image-width image-instance)) image-left))
	     (height (- (or image-bottom (image-height image-instance)) image-top)))
	 (values x y
		 (+ x (ceiling (* width scale))) (+ y (ceiling (* height scale)))))
  )
(defun scale-keyword-for-mode (mode scale)
  (unless (eq mode :bow) (setq mode nil))
  (intern (format nil "1B-RASTER~:[~*~;-~A~]-~D"
		  mode (string-upcase mode) scale) "keyword"))

(defun 1b-raster-for-image-on-window (image-instance width height window &optional (scale 1))
  (let* ((screen  (send-if-handles window :screen))
	 (bow-mode (and screen (send-if-handles screen :bow-mode)))
	 (real-screen-depth (send screen :bits-per-pixel))
	 (element-type (list 'unsigned-byte real-screen-depth))
	 )
    (or ;;version cached on image?
      (send image-instance :get 
	    (if *consider-screen-bow-mode*
		(if bow-mode
		    (scale-keyword-for-mode :bow scale)
		    (scale-keyword-for-mode :wob scale))
		(scale-keyword-for-mode "" scale)
		))
      ;;no, compute and cache
      (let ((new-raster
	      (make-raster-array (* 32 (ceiling width 32) scale)
				 (* height scale)
				 :area tv:bit-array-area
				 :element-type element-type))
	    (new-raster1
	      (make-raster-array (* 32 (ceiling width 32) scale)
				 (* height scale)
				 :initial-element 1
				 :area tv:bit-array-area
				 :element-type element-type))
	    )
	(tv:unprepare-sheet
	  ;;create 1b image suitable for BOW mode (consistent with color hardware, 0=black)
	  (false-image-to-1b (* width scale) (* height scale)
			     image-instance new-raster)
	  ;;create other arity equivalent for WOB mode
	  (bitblt tv:alu-xor (* scale width) (* scale height)
		  new-raster 0 0 new-raster1  0 0)
	  )
	(send image-instance :putprop new-raster1 (scale-keyword-for-mode :wob scale))
	(send image-instance :putprop new-raster (scale-keyword-for-mode :bow scale))
	;;supply bow mode, since user could have changed it while waiting for computation
	;;he gets the type in effect at the start
	(appropriate-raster-for-bow-mode window new-raster new-raster1 bow-mode)))))

(defun appropriate-raster-for-bow-mode (window bow-raster non-bow-raster &optional (bow-mode nil bow-supplied?))
  (declare (values appropriate-raster know-for-sure?))
  (if *consider-screen-bow-mode*
      (let* ((screen (send-if-handles window :screen))
	     (bow-mode (if bow-supplied? bow-mode
			   (when screen (send-if-handles screen :bow-mode)))))
	(if bow-mode
	    (values bow-raster screen)
	    (values non-bow-raster screen)))
      (values non-bow-raster nil)))

(defmacro every-pixel ((x-lim y-lim &rest descriptors) &body body)
  `(let (,@(loop for (nil array) in descriptors
		collect (list array array)))
     (declare (sys:array-register-1d ,@(loop for (nil array) in descriptors
						    collect array)))
       (let (,@(loop for (nil array) in descriptors
		    collect (list (intern (string-append array "-SPAN"))
				  `(#+column-major sys:array-column-span
				    #+row-major sys:array-row-span
				    ,array))))
	 (macrolet ,(loop for (variable array) in descriptors
			  collect `(,variable () '(sys:%1d-aref ,array ,(intern (string-append array "-INDEX")))))
	   (loop for j-index below ,y-lim
		 ,@(loop for (nil array) in descriptors
			 collect 'for
			 collect (intern (string-append array "-START"))
			 collect 'from
			 collect 0
			 collect 'by
			 collect (intern (string-append array "-SPAN")))
		 do (loop for i-index below ,x-lim
			  ,@(loop for (nil array) in descriptors
				  collect 'for
				  collect (intern (string-append array "-INDEX"))
				  collect 'from
				  collect (intern (string-append array "-START")))
			  do ,@body))))))

(defun false-8b-image-to-1b (x-lim y-lim 8b-image 1b-array &optional (threshold 256.) (range 0))
  (stack-let* ((sum 0)
	       (8b-array (send 8b-image :Data-array))
	       (8b-array-1d (si:make-array (apply '* (si:array-dimensions 8b-array))
					   :type (si:array-type 8b-array)
					   :displaced-to 8b-array))
	       (intensity (make-array 256))
	       (factor (floor (si:array-dimension-n 1 1b-array)
			      (si:array-dimension-n 1 8b-array)))
	       (setup-color-map (send 8b-image :setup-color-map))
	       (color-map (when setup-color-map (send setup-color-map :map)))
	       (color-map-1d (if color-map
				 (si:make-array (apply '* (array-dimensions color-map))
						:type (si:array-type color-map)
						:displaced-to color-map)
				 8b-array-1d))	;it won't be used in this case
	       )
    (declare (sys:array-register intensity color-map-1d 8b-array-1d))
    #+ignore
    (format t "~&Factor =~D, xlim=~D, ylim=~D, 1b=~A, 8b=~A" factor x-lim y-lim 1b-array 8b-array)
    (loop with max = (color:rgb->ihs 1.0 1.0 1.0)
	  with span = (if color-map (sys::array-row-span color-map) 0)
	  for i below (if color-map (si:array-dimension-n 2 color-map) 256)
	  for ii from (* i span)
	  for r = (when color-map (aref color-map-1d ii))
	  for g = (when color-map (aref color-map-1d (+ ii span)))
	  for b = (when color-map (aref color-map-1d (+ ii span span)))
	  for int = (if color-map (floor (* 256 (color:rgb->ihs r g b)) max) i)
	  do (setf (aref intensity i) int))
    (let (last (kspan (si:array-row-span 8b-array))
	  )
      (declare (sys::array-register intensity 8b-array-1d))
      (every-pixel (x-lim y-lim (out 1b-array))
	(ignore i-index j-index)
	(when (zerop (mod i-index factor))
	  (setq last (aref intensity (aref 8b-array-1d (+ (floor i-index factor)
							  (* kspan (floor j-index factor))))
			   #+ignore
			   (raster-aref 8b-array (floor i-index factor) (floor j-index factor))))
	  )
	(incf sum last)
	(if (< sum (- threshold range))
	    (setf (out) 1)
	    (setf (out) 0) (decf sum threshold))))))

(defun false-4b-image-to-1b (x-lim y-lim 4b-image 1b-array &optional (threshold 16.) (range 0))
  (stack-let* ((sum 0)
	      (4b-array (send 4b-image :Data-array))
	      (intensity (make-array 16))
	      (factor (floor (si:array-dimension-n 1 1b-array)
			     (si:array-dimension-n 1 4b-array)))
	      )
    (declare (sys:array-register intensity))
    (loop with setup-color-map = (send 4b-image :setup-color-map)
	  with color-map = (when setup-color-map (send setup-color-map :map))
	  with max = (color:rgb->ihs 1.0 1.0 1.0)
	  for i below (if color-map (si:array-dimension-n 2 color-map) 16)
	  for r = (when color-map (raster-aref color-map i 0))
	  for g = (when color-map (raster-aref color-map i 1))
	  for b = (when color-map (raster-aref color-map i 2))
	  for int = (if color-map (floor (* 16 (color:rgb->ihs r g b)) max) i)
	  do (setf (aref intensity i) int))
    (let (last)
    (every-pixel (x-lim y-lim (out 1b-array))
      (ignore i-index j-index)
      (incf sum (if (zerop (mod i-index factor))
		    (setq last (aref intensity (raster-aref 4b-array (floor i-index factor)
							    (floor j-index factor))))
		    last))
      (if (< sum (- threshold range))
	  (setf (out) 1)
	  (setf (out) 0) (decf sum threshold))))))

(defmacro 32b-intensity (word)
  `(let* ((.w. ,word)
	  (.r. (ldb (byte 8 0) .w.))
	  (.g. (ldb (byte 8 8) .w.))
	  (.b. (ldb (byte 8 16) .w.)))
     (color:fixnum-rgb->i .r. .g. .b.)))

(defmacro 24b-intensity (r g b)
  `(color:fixnum-rgb->i ,r ,g ,b))

(defun false-24b-image-to-1b (x-lim y-lim 24b-image 1b-array &optional (threshold 256.) (range 0))
  (stack-let* ((sum 0)
	       (24br-array (send 24b-image :red))
	       (24bg-array (send 24b-image :green))
	       (24bb-array (send 24b-image :blue))
	       (factor (floor (si:array-dimension-n 1 1b-array)
			      (si:array-dimension-n 1 24br-array))))
    (declare (sys:array-register intensity))
    (when (send-if-handles 24b-image :setup-color-map) 
      (error "Don't know how to handle maps."))
    (let (last)
      (every-pixel (x-lim y-lim (out 1b-array))
	(ignore i-index j-index)
	(incf sum (if (zerop (mod i-index factor))
		      (setq last (24b-intensity 
				   (raster-aref 24br-array (floor i-index factor)
							     (floor j-index factor))
				   (raster-aref 24bg-array (floor i-index factor)
							     (floor j-index factor))
				   (raster-aref 24bb-array (floor i-index factor)
							     (floor j-index factor))))
		      last))
	(if (< sum (- threshold range))
	    (setf (out) 1)
	    (setf (out) 0) (decf sum threshold))))))

(defun false-32b-image-to-1b (x-lim y-lim 32b-image 1b-array &optional (threshold 256.) (range 0))
  (stack-let* ((sum 0)
	       (32b-array (send 32b-image :Data-array))
	       (factor (floor (si:array-dimension-n 1 1b-array)
			      (si:array-dimension-n 1 32b-array))))
    (declare (sys:array-register intensity))
    (when (send-if-handles 32b-image :setup-color-map) (error "Don't know how to handle maps."))
    (let (last)
      (every-pixel (x-lim y-lim (out 1b-array))
	(ignore i-index j-index)
	(incf sum (if (zerop (mod i-index factor))
		      (setq last (32b-intensity (raster-aref 32b-array (floor i-index factor)
							     (floor j-index factor))))
		      last))
	(if (< sum (- threshold range))
	    (setf (out) 1)
	    (setf (out) 0) (decf sum threshold))))))

(defun false-image-to-1b (xlim ylim im &rest args)
  (ecase (send im :useful-bits-per-pixel)
    (4 (apply 'false-4b-image-to-1b xlim ylim im args))
    (8 (apply 'false-8b-image-to-1b xlim ylim im args))
    (24 (apply 'false-24b-image-to-1b xlim ylim im args))
    (32 (apply 'false-32b-image-to-1b xlim ylim im args))))

;;;; Debugging tools

#||

(defmethod (show-image-contents simple-image) ()
  (dw:with-output-truncation (t)
    (with-character-size (:very-small)
      (let ((depth (sys:array-element-byte-size raster)))
	(sys:with-1d-raster-array (raster)
	  (dotimes (y height)
	    (terpri)
	    (let ((last-digit t))
	      (dotimes (x width)
		(let ((contents (sys:1d-raster-aref raster x y)))
		  (if (zerop contents)
		      (setq last-digit nil)
		    (unless last-digit
		      (send *standard-output* :set-cursorpos (* x (if (> depth 1) 2 1))
							     nil :character))
		    (if (> depth 1)
			(format t "~2,'0D" contents)
			(write-char #\*))
		    (setq last-digit t)))))))))))

||#
