;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for IMAGE-SUBSTRATE version 440.4
;;; Reason: Function (FLAVOR:METHOD :DRAW-IMAGE-INSTANCE GRAPHICS:RASTER-GRAPHICS-MIXIN):  handle VLM case a bit better
;;; Function IMAGES:1B-RASTER-FOR-IMAGE-ON-WINDOW:  make correct raster type if doing "1b" for deep screen
;;; Written by Reti, 8/14/98 19:27:04
;;; while running on Beta Blocker from BETA:/usr/opt/VLM200/lib/symbolics/products2.vlod
;;; with Open Genera 2.0, Genera 8.5, System 452.11, Zmail 442.1, Tape 444.2,
;;; IP-TCP 452.4, IP-TCP Documentation 423.0, Lock Simple 437.0, Compare Merge 404.0,
;;; VC Documentation 401.0, Logical Pathnames Translation Files NEWEST, Color 427.1,
;;; Graphics Support 431.0, Genera Extensions 16.0, Essential Image Substrate 433.0,
;;; Color System Documentation 10.0, SGD Book Design 10.0, Image Substrate 440.3,
;;; Images 431.2, Macsyma 421.45, Experimental Symbolics Concordia 444.0,
;;; Experimental Graphic Editor 440.0, Experimental Graphic Editing 441.0,
;;; Experimental Bitmap Editor 441.0,
;;; Experimental Graphic Editing Documentation 431.0, Experimental Postscript 436.0,
;;; Experimental Concordia Documentation 431.0, Experimental Joshua 237.3,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.1, C 440.0, Experimental Lexer Runtime 438.0,
;;; Experimental Lexer Package 438.0, Experimental Minimal Lexer Runtime 439.0,
;;; Experimental Lalr 1 434.0, Experimental Context Free Grammar 439.0,
;;; Experimental Context Free Grammar Package 439.0, Experimental C Runtime 438.0,
;;; Experimental Compiler Tools Package 434.0,
;;; Experimental Compiler Tools Runtime 434.0, Experimental C Packages 436.0,
;;; Experimental Syntax Editor Runtime 434.0, C Library Headers 434,
;;; Experimental Compiler Tools Development 435.0,
;;; Experimental Compiler Tools Debugger 434.0, Experimental C Documentation 426.0,
;;; Experimental Syntax Editor Support 434.0, Experimental LL-1 support system 438.0,
;;; Experimental Fortran 434.0, Experimental Fortran Runtime 434.0,
;;; Experimental Fortran Package 434.0, Experimental Fortran Doc 427.0,
;;; Experimental Pascal 433.0, Experimental Pascal Runtime 434.0,
;;; Experimental Pascal Package 434.0, Experimental Pascal Doc 427.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Ivory Revision 5, VLM Debugger 329,
;;; Genera program 8.9, DEC OSF/1 V3.2 (Rev. 148),
;;; 1152x874 8-bit PSEUDO-COLOR X Screen BETA:0.0 with 224 Genera fonts (DECWINDOWS Digital Equipment Corporation Digital UNIX V3.2C R1),
;;; 1280x976 8-bit PSEUDO-COLOR X Screen BETA:0.0 with 224 Genera fonts (DECWINDOWS Digital Equipment Corporation Digital UNIX V3.2C R1),
;;; Console set keyboard type (from S:>reti>console-set-keyboard-type.lisp.3).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.27")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.27")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-")

(PROGN

;;;--- Temporary.  This is just to show how to interact properly with the output history.
;;; The idea is that draw-image massages the arguments into some convenient recordable state,
;;; then does a message to the window, which in turn calls it back to do the actual drawing
;;; after coordinate adjustment.

;;; This calling arrangement assumes that the image instance will take
;;; care of caching enough to be able to do this rapidly again if called
;;; to repaint the output history.
(defmethod (:draw-image-instance graphics:raster-graphics-mixin)
	   (image-instance x y scale &optional (image-left 0) (image-top 0)
			   image-right image-bottom)
  (let* ((screen (send self :screen))
	 (vlm-main-screen #-VLM nil
			  #+VLM (not (typep screen 'COLOR:COMMON-COLOR-HARDWARE-MIXIN))))
    (when (and (null *dont-use-iman?*)
	       (not vlm-main-screen)
	       (operation-handled-p image-instance :view-image))
      (return-from :draw-image-instance
	(send image-instance :view-image self :wdx x :wdy y :scale scale
	      :dx image-left :dy image-top
	      :width image-right :height image-bottom)))
    (with-image-raster (raster image-instance :width width :height height)
      (unless image-right (setq image-right width))
      (unless image-bottom (setq image-bottom height))
      (setq width (- image-right image-left)
	    height (- image-bottom image-top))
      (let ((image-depth (sys:array-element-byte-size raster))
	    (sheet-depth (tv:screen-bits-per-pixel screen)))
	(when vlm-main-screen
	  (setq sheet-depth 1))
	(cond ((= image-depth sheet-depth)
	       (when (and (not (= scale 1)) (> image-depth 1))
		 (error "Cannot scale deep images yet."))
	       (cond ((= scale 1)
		      (send self :draw-raster width height raster x y image-left image-top))
		     ((> scale 1)
		      (graphics::draw-simply-scaled-image self raster x y scale scale
							  nil :draw :erase t
							  image-left image-top width height))
		     (t
		      (graphics:with-graphics-identity-transform (self)
			(graphics:with-graphics-translation (self x y)
			  (graphics:draw-image raster 0 0 :scale scale :stream self
					       :image-left image-left :image-top image-top
					       :image-right image-right :image-bottom image-bottom))))))
	      ((and (= image-depth 1) (= scale 1) #+vlm (not vlm-main-screen))
	       (send self :draw-raster width height raster x y image-left image-top))
	      ((and (> scale 0)
		    (integerp scale)
		    (member (type-of image-instance)
			    '(color:2b-image color:4b-image
					     color:false-color-image
					     color::rgb-image
					     color:32b-image)))
	       (let ((raster (1b-raster-for-image-on-window
			       image-instance width height self scale)))
		 (send self :draw-raster (* scale width) (* scale height)
		       raster
		       x y image-left image-top)))
	      (t
	       (error "Cannot draw images of this type yet.")))))))


(dw::define-viewport-graphics-operation :draw-image-instance
					(image-instance x y scale
					 &optional (image-left 0) (image-top 0)
						   image-right image-bottom)
  :arguments-to-convert (x y)
; :alu alu
  :box (let ((width (- (or image-right (image-width image-instance)) image-left))
	     (height (- (or image-bottom (image-height image-instance)) image-top)))
	 (values x y
		 (+ x (ceiling (* width scale))) (+ y (ceiling (* height scale)))))
  )

)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.27")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-")


(defun 1b-raster-for-image-on-window (image-instance width height window &optional (scale 1))
  (let* ((screen  (send-if-handles window :screen))
	 (bow-mode (and screen (send-if-handles screen :bow-mode)))
	 (real-screen-depth (send screen :bits-per-pixel))
	 (element-type (list 'unsigned-byte real-screen-depth))
	 )
    (or ;;version cached on image?
      (send image-instance :get 
	    (if *consider-screen-bow-mode*
		(if bow-mode
		    (scale-keyword-for-mode :bow scale)
		    (scale-keyword-for-mode :wob scale))
		(scale-keyword-for-mode "" scale)
		))
      ;;no, compute and cache
      (let ((new-raster
	      (make-raster-array (* 32 (ceiling width 32) scale)
				 (* height scale)
				 :area tv:bit-array-area
				 :element-type element-type))
	    (new-raster1
	      (make-raster-array (* 32 (ceiling width 32) scale)
				 (* height scale)
				 :initial-element 1
				 :area tv:bit-array-area
				 :element-type element-type))
	    )
	(tv:unprepare-sheet
	  ;;create 1b image suitable for BOW mode (consistent with color hardware, 0=black)
	  (false-image-to-1b (* width scale) (* height scale)
			     image-instance new-raster)
	  ;;create other arity equivalent for WOB mode
	  (bitblt tv:alu-xor (* scale width) (* scale height)
		  new-raster 0 0 new-raster1  0 0)
	  )
	(send image-instance :putprop new-raster1 (scale-keyword-for-mode :wob scale))
	(send image-instance :putprop new-raster (scale-keyword-for-mode :bow scale))
	;;supply bow mode, since user could have changed it while waiting for computation
	;;he gets the type in effect at the start
	(appropriate-raster-for-bow-mode window new-raster new-raster1 bow-mode)))))

