;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for IMAGE-SUBSTRATE version 440.1
;;; Reason: Canonical type :PPM:  support for PPM
;;; Written by Reti, 7/08/98 13:42:19
;;; while running on Sour Cream from FEP0:>cl-http.ilod.1
;;; with System 452.6, CLOS 439.0, RPC 443.1, Embedding Support 435.0,
;;; MacIvory Support 447.0, UX Support 443.0, Development Utilities 439.0,
;;; Old TV 436.0, Zwei 436.0, Utilities 445.0, RPC Development 438.0,
;;; MacIvory Development 434.0, UX Development 442.0, Server Utilities 442.0,
;;; Serial 435.0, Hardcopy 446.0, Zmail 442.1, SCSI 430.0, Tape 444.1, LMFS 442.0,
;;; NSage 440.0, Extended Help 441.0, CL Developer 428.0,
;;; Documentation Database 440.3, IP-TCP 452.2,
;;; Experimental IP-TCP Documentation 422.0, CLX 450.0, X Remote Screen 448.0,
;;; Experimental X Documentation 421.1, NFS Client 442.0,
;;; Experimental NFS Documentation 423.1, Experimental Lock Simple 435.1,
;;; Version Control 405.0, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, HTTP Server 67.61,
;;; Showable Procedures 36.3, Binary Tree 34.0, W3 Presentation System 7.0,
;;; CD-ROM Mastering 51.17, Experimental Image Substrate 440.0,
;;; Experimental Essential Image Substrate 433.0, cold load 1, Ivory Revision 4A,
;;; IFEP 325, FEP0:>I325-loaders.flod(8), FEP0:>I325-info.flod(8),
;;; FEP0:>I325-debug.flod(8), FEP0:>I325-lisp.flod(8), FEP0:>I325-KERNEL.FEP(9),
;;; Boot ROM version 320, Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Macintosh System Software 7.5.3, 1152x802 Screen with Genera fonts,
;;; Machine serial number 30343, Macintosh, Apple Extended Keyboard II,
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "SYS:IMAGE-SUBSTRATE;UNIX-FILE-FORMATS.LISP.26")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:IMAGE-SUBSTRATE;UNIX-FILE-FORMATS.LISP.26")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-")

(fs:define-canonical-type :ppm "PPM")

(define-image-file-format :ppm
  :pretty-name "Portable Pixmap"
  :description "Poskanzer's portable pixmap format"
  :read-function read-image-from-ppm
  :write-function write-image-to-ppm
  :file-stream-element-type (unsigned-byte 8)	;because it is mixed binary and ascii
						;we have to call it binary 
)

(defvar *pbm-whitespace* (list (char-to-ascii #\space)
			   (char-to-ascii #\tab)
			   (char-to-ascii #\return)
			   (char-to-ascii #\line)))
			   
(defvar *pbm-line-end* (list (char-to-ascii #\return) (char-to-ascii #\line)))

(defun digit-value (code)
  (if ( (char-to-ascii #\0) code (char-to-ascii #\9))
      (- code (char-to-ascii #\0))
      (error "Invalid character")))

(defun read-ppm-char (stream)
  (let ((code (send stream :tyi)))
    (if (eql code (char-to-ascii #\#))
	(loop for code = (send stream :tyi)
	      until (member code *pbm-line-end*)
	      finally (return (read-ppm-char stream)))
	code)))

(defun read-decimal-number (stream)
  (loop with result = 0
	with digits-seen = 0
	for code = (read-ppm-char stream)
	if  (member code *pbm-whitespace*)
	do (unless (zerop digits-seen)
	     (return result))
	else
	  do (setq result (+ (* 10 result) (digit-value code)))
	     (incf digits-seen)))

(defun read-image-from-ppm (stream &rest options)
  (let ((magic-number (make-array 2 :element-type 'string-char)))
    (setf (aref magic-number 0) (ascii-to-char (send stream :tyi)))
    (setf (aref magic-number 1) (ascii-to-char (send stream :tyi)))
    (unless (or (string-equal magic-number "P3")
		(string-equal magic-number "P5")
		(string-equal magic-number "P6"))
      (error "This doesn't appear to be a ppm file."))
    (let* ((width (read-decimal-number stream))
	   (height (read-decimal-number stream))
	   (maxval (read-decimal-number stream))
	   raster)
      (format t "~&PPM magic = ~A, width = ~D, height = ~D, maxval=~D"
	      magic-number width height maxval)
      (unless (null options) (error "Can't handle options yet."))
      (unless ( maxval 255) (error "can't handle pixel values greater than 255"))
      (setq raster (acquire-raster-array-with-correct-width
		     width height :element-type 
		     (if (string-equal "P5" magic-number)
			 '(unsigned-byte 8)
			 '(signed-byte 31))))
      (stack-let* ((raster8 (si:make-array 
			      (* width height (if (string-equal magic-number "P5") 1 4))
			      :type 'si:art-8b :displaced-to raster)))
	(if (string-equal magic-number "P6")
	    ;;binary versions
	    (loop for i below (* width height 4) by 4
		  do (send stream :string-in nil raster8 i (+ i 3)))
	    (if (string-equal magic-number "P3")
		;;portable version
		(loop for i below (* width height 4) by 4
		      do (setf (aref raster8 i) (read-decimal-number stream))
			 (setf (aref raster8 (1+ i)) (read-decimal-number stream))
			 (setf (aref raster8 (+ 2 i)) (read-decimal-number stream)))
		(if (string-equal magic-number "P5")	;grayscale
		    (loop for i below (* width height) by width
			  do (send stream :string-in nil raster8 i (+ i width))))))
	(values raster width height)))))

(defun write-image-to-ppm  (output-stream raster rwidth rheight &key name color-map
			    &allow-other-keys)
  (if (and color-map (> (send color-map :size) 256))
      (write-image-to-standard-ppm output-stream raster rwidth rheight name color-map)
      (ecase (si:array-type raster)
	(sys:art-fixnum
	  (write-binary-ppm-from-fixnum-raster output-stream raster rwidth rheight name))
	(sys:art-8b
	  (if color-map
	      (write-binary-ppm-from-color-mapped-8b-image
		output-stream raster rwidth rheight name color-map)
	      (write-binary-ppm-from-gray-8b-image
		output-stream raster rwidth rheight name)))
	(sys:art-1b
	  (error "Use PBM format instead.")))))

;;for now, only gets called with a color map (cause that's how we know values are bigger
;;than 255.
(defun write-image-to-standard-ppm (output-stream raster rwidth rheight name color-map)
  (write-standard-ppm-header output-stream rwidth rheight name (1- (send color-map :size)))
  (loop for j below rheight
	do (loop with col = 0 and string = (si:make-array 70 :type'si:art-string :fill-pointer 0)
		 with binary-string = (si:make-array 70 :type'si:art-8b :displaced-to string)
		 for i below rwidth
		 for value = (raster-aref raster i j)
		 do (setf (fill-pointer string) 0)
		    (with-output-to-string (*standard-output* string)
		      (format t "~D " value))
		    (incf col (fill-pointer string))
		    (when (> col 70)
		      (send output-stream :tyo (char-to-ascii #\line))
		      (setq col (fill-pointer string)))
		    (send output-stream :string-out binary-string 0 (fill-pointer string)))
	finally (send output-stream :tyo (char-to-ascii #\line))))

(defun write-standard-ppm-header (output-stream rwidth rheight name &optional (maxval 255))
  (send output-stream :tyo (char-to-ascii #\P))
  (send output-stream :tyo (char-to-ascii #\3))
  (send output-stream :tyo (char-to-ascii #\line))
  (when name
    (send output-stream :tyo (char-to-ascii #\#))
    (send output-stream :tyo (char-to-ascii #\space))
    (loop for char being array-elements of name
	  do (send output-stream :tyo (char-to-ascii char)))
    (send output-stream :tyo (char-to-ascii #\line)))  

  (loop for char being array-elements of (format nil "~D" rwidth)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\space))
  (loop for char being array-elements of (format nil "~D" rheight)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line))
  (loop for char being array-elements of (format nil "~D" maxval)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line)))

(defun write-binary-ppm-header (output-stream rwidth rheight name &optional (maxval 255))
  (send output-stream :tyo (char-to-ascii #\P))
  (send output-stream :tyo (char-to-ascii #\6))
  (send output-stream :tyo (char-to-ascii #\line))
  (when name
    (send output-stream :tyo (char-to-ascii #\#))
    (send output-stream :tyo (char-to-ascii #\space))
    (loop for char being array-elements of name
	  do (send output-stream :tyo (char-to-ascii char)))
    (send output-stream :tyo (char-to-ascii #\line)))  

  (loop for char being array-elements of (format nil "~D" rwidth)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\space))
  (loop for char being array-elements of (format nil "~D" rheight)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line))
  (loop for char being array-elements of (format nil "~D" maxval)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line)))

(defun write-binary-ppm-from-fixnum-raster (output-stream raster rwidth rheight name)
  (stack-let* ((raster8 (si:make-array (* rwidth rheight 4) :type 'si:art-8b
				       :displaced-to raster)))
    (write-binary-ppm-header output-stream raster rwidth rheight name)
    (loop for i below (* rwidth rheight 4) by 4
	  do (send output-stream :string-out raster8 i (+ i 3)))))

(defun write-binary-ppm-from-color-mapped-8b-image (output-stream raster rwidth rheight
						    name color-map)
  (let* ((limitval (send color-map :size))
	 (maxval (1- limitval)))
    (write-binary-ppm-header output-stream rwidth rheight name maxval)
    (stack-let ((rgb-values (si:make-array limitval)))
      (loop with fr and fg and fb
	    for i below limitval
	    for entry = (prog1 (si:make-stack-array 3 :type'si:art-8b)
			       (multiple-value-setq (fr fg fb)
				 (send color-map :read-color-map i)))
	    do (setf (aref entry 0) (min maxval (floor (* fr limitval))))
	       (setf (aref entry 1) (min maxval (floor (* fg limitval))))
	       (setf (aref entry 2) (min maxval (floor (* fb limitval))))
	       (setf (aref rgb-values i) entry))
      (loop for j below rheight do
	(loop for i below rwidth
	      do (send output-stream :string-out (aref rgb-values (raster-aref raster i j))))))))

(defun write-binary-ppm-from-gray-8b-image (output-stream raster rwidth rheight name)
  (let* ((limitval 256)
	 (maxval (1- limitval)))
    (write-binary-ppm-header output-stream rwidth rheight name maxval)
    (loop for j below rheight do
	(loop for i below rwidth
	      for value = (raster-aref raster i j)
	      do (loop repeat 3 do (send output-stream :tyo value))))))
      
