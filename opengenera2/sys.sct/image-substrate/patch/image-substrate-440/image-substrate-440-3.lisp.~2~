;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for IMAGE-SUBSTRATE version 440.3
;;; Reason: Function (FLAVOR:METHOD :DRAW-IMAGE-INSTANCE GRAPHICS:RASTER-GRAPHICS-MIXIN):  add support for 24 bit images
;;; Function IMAGES:24B-INTENSITY:  new
;;; Function IMAGES:FALSE-24B-IMAGE-TO-1B:  24bit image converter
;;; Function IMAGES:FALSE-IMAGE-TO-1B:  allow 24 as a choice
;;; Written by Reti, 8/14/98 12:24:46
;;; while running on Sour Cream from FEP0:>axp-from-clim.ilod.1
;;; with System 452.11, CLOS 439.0, RPC 443.1, Embedding Support 435.0,
;;; MacIvory Support 447.0, UX Support 443.0, Development Utilities 439.0,
;;; Old TV 436.0, Zwei 436.0, Utilities 445.0, RPC Development 438.0,
;;; MacIvory Development 434.0, UX Development 442.0, Server Utilities 442.0,
;;; Serial 435.0, Hardcopy 446.0, Zmail 442.1, SCSI 430.0, Tape 444.2, LMFS 442.1,
;;; NSage 440.0, Extended Help 441.0, CL Developer 428.0,
;;; Documentation Database 440.3, IP-TCP 452.4,
;;; Experimental IP-TCP Documentation 422.0, CLX 450.0, X Remote Screen 448.0,
;;; X Documentation 421.1, NFS Client 442.0, NFS Documentation 423.1,
;;; Experimental Lock Simple 435.1, Version Control 405.0, Compare Merge 404.0,
;;; VC Documentation 401.0, Logical Pathnames Translation Files NEWEST,
;;; HTTP Server 67.73, Showable Procedures 36.3, Binary Tree 34.0,
;;; W3 Presentation System 7.0, FrameThrower XL Interface 14.0, FrameThrower 14.0,
;;; SGD Book Design 10.0, Color System Documentation 10.0,
;;; Essential Image Substrate 433.0, Genera Extensions 16.0, Graphics Support 431.0,
;;; Color 427.1, CLIM 72.0, Genera CLIM 72.0, PostScript CLIM 72.0,
;;; CLIM Documentation 72.0, Experimental Alpha AXP Assembler 8.0,
;;; Experimental Alpha AXP Emulator Support 8.4,
;;; Experimental Alpha AXP Translator Support 8.2, Experimental Alpha AXP OSF VLM 8,
;;; Image Substrate 440.2, HTTP Client 48.9, HTTP Client Substrate 1.16,
;;; CD-ROM Mastering 51.19, Images 431.2, cold load 1, Ivory Revision 4A, IFEP 325,
;;; FEP0:>I325-loaders.flod(8), FEP0:>I325-info.flod(8), FEP0:>I325-debug.flod(8),
;;; FEP0:>I325-lisp.flod(8), FEP0:>I325-KERNEL.FEP(9), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Macintosh System Software 7.5.3, 1152x802 Screen with Genera fonts,
;;; Machine serial number 30343, Macintosh, Apple Extended Keyboard II,
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.25")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.25")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-")

(PROGN

;;;--- Temporary.  This is just to show how to interact properly with the output history.
;;; The idea is that draw-image massages the arguments into some convenient recordable state,
;;; then does a message to the window, which in turn calls it back to do the actual drawing
;;; after coordinate adjustment.

;;; This calling arrangement assumes that the image instance will take
;;; care of caching enough to be able to do this rapidly again if called
;;; to repaint the output history.
(defmethod (:draw-image-instance graphics:raster-graphics-mixin)
	   (image-instance x y scale &optional (image-left 0) (image-top 0)
			   image-right image-bottom)
  (when (and (null *dont-use-iman?*) (operation-handled-p image-instance :view-image))
    (return-from :draw-image-instance
      (send image-instance :view-image self :wdx x :wdy y :scale scale
	    :dx image-left :dy image-top
	    :width image-right :height image-bottom)))
  (with-image-raster (raster image-instance :width width :height height)
    (unless image-right (setq image-right width))
    (unless image-bottom (setq image-bottom height))
    (setq width (- image-right image-left)
	  height (- image-bottom image-top))
    (let ((image-depth (sys:array-element-byte-size raster))
	  (sheet-depth (tv:screen-bits-per-pixel (send self :screen))))
      (cond ((= image-depth sheet-depth)
	     (when (and (not (= scale 1)) (> image-depth 1))
	       (error "Cannot scale deep images yet."))
	     (cond ((= scale 1)
		    (send self :draw-raster width height raster x y image-left image-top))
		   ((> scale 1)
		    (graphics::draw-simply-scaled-image self raster x y scale scale
							nil :draw :erase t
							image-left image-top width height))
		   (t
		    (graphics:with-graphics-identity-transform (self)
		      (graphics:with-graphics-translation (self x y)
			(graphics:draw-image raster 0 0 :scale scale :stream self
					     :image-left image-left :image-top image-top
					     :image-right image-right :image-bottom image-bottom))))))
	    ((and (= image-depth 1) (= scale 1))
	     (send self :draw-raster width height raster x y image-left image-top))
	    ((and (> scale 0)
		  (integerp scale)
		  (member (type-of image-instance)
			  '(color:2b-image color:4b-image
					   color:false-color-image
					   color::rgb-image
					   color:32b-image)))
	     (let ((raster (1b-raster-for-image-on-window
			     image-instance width height self scale)))
	       (send self :draw-raster (* scale width) (* scale height)
		     raster
		     x y image-left image-top)))
	    (t
	     (error "Cannot draw images of this type yet."))))))


(dw::define-viewport-graphics-operation :draw-image-instance
					(image-instance x y scale
					 &optional (image-left 0) (image-top 0)
						   image-right image-bottom)
  :arguments-to-convert (x y)
; :alu alu
  :box (let ((width (- (or image-right (image-width image-instance)) image-left))
	     (height (- (or image-bottom (image-height image-instance)) image-top)))
	 (values x y
		 (+ x (ceiling (* width scale))) (+ y (ceiling (* height scale)))))
  )

)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.25")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-")


(defmacro 24b-intensity (r g b)
  `(color:fixnum-rgb->i ,r ,g ,b))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.25")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-")


(defun false-24b-image-to-1b (x-lim y-lim 24b-image 1b-array &optional (threshold 256.) (range 0))
  (stack-let* ((sum 0)
	       (24br-array (send 24b-image :red))
	       (24bg-array (send 24b-image :green))
	       (24bb-array (send 24b-image :blue))
	       (factor (floor (si:array-dimension-n 1 1b-array)
			      (si:array-dimension-n 1 24br-array))))
    (declare (sys:array-register intensity))
    (when (send-if-handles 24b-image :setup-color-map) 
      (error "Don't know how to handle maps."))
    (let (last)
      (every-pixel (x-lim y-lim (out 1b-array))
	(ignore i-index j-index)
	(incf sum (if (zerop (mod i-index factor))
		      (setq last (24b-intensity 
				   (raster-aref 24br-array (floor i-index factor)
							     (floor j-index factor))
				   (raster-aref 24bg-array (floor i-index factor)
							     (floor j-index factor))
				   (raster-aref 24bb-array (floor i-index factor)
							     (floor j-index factor))))
		      last))
	(if (< sum (- threshold range))
	    (setf (out) 1)
	    (setf (out) 0) (decf sum threshold))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:IMAGE-SUBSTRATE;FILE-FORMATS.LISP.25")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-")

(defun false-image-to-1b (xlim ylim im &rest args)
  (ecase (send im :useful-bits-per-pixel)
    (4 (apply 'false-4b-image-to-1b xlim ylim im args))
    (8 (apply 'false-8b-image-to-1b xlim ylim im args))
    (24 (apply 'false-24b-image-to-1b xlim ylim im args))
    (32 (apply 'false-32b-image-to-1b xlim ylim im args))))

