;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; More image formats

(define-image-file-format :truevision
  :pretty-name "Truevision"
  :description "Truevision product family format"
  :read-function read-truevision-file-internal
  :file-stream-element-type (unsigned-byte 8)
  :file-canonical-type nil	;vda, icb, tga, vst, and win.
  ;; Mac type is FOTO (created by BHKF) in at least one instance.
  )

(rpc:define-octet-structure-field-type-macro byte-member (base-type position size set)
  `(member (load-byte ,base-type ,position ,size) ,set))

(rpc:define-octet-structure (truevision-header :access-type :unsigned-8
					       :default-index 0)
  (id-length rpc:cardinal-8)
  (color-map-type (boolean rpc:cardinal-8))	;For now
  (image-type-b (* rpc:cardinal-8
		   (image-type (byte-member 0 3 '(nil :mapped :true :b&w)))
		   (rle-p (rpc:boolean-bit 3))))
  (color-map-start rpc:integer-16)
  (color-map-length rpc:integer-16)
  (color-map-entry-size rpc:cardinal-8)
  (origin-x rpc:integer-16)
  (origin-y rpc:integer-16)
  (width rpc:integer-16)
  (height rpc:integer-16)
  (depth rpc:cardinal-8)
  (descriptor (* rpc:cardinal-8
		 (alpha-bits-per-channel (load-byte 0 3))
		 (right-to-left (rpc:boolean-bit 4))
		 (top-to-bottom (rpc:boolean-bit 5))))
  )

(defun read-truevision-file-internal (stream)
  (let (width height x-position y-position depth raster id color-map
	invert-x invert-y rle-p)
    (with-fast-tyi (stream)
      (stack-let ((header (make-truevision-header)))
	(send stream :string-in "EOF in the header" header)
	(let ((length (truevision-header-id-length header)))
	  (when (plusp length)
	    (stack-let ((buffer (make-array length :element-type '(unsigned-byte 8))))
	      (send stream :string-in "EOF in the header" buffer)
	      (setq id (ascii-to-string buffer)))))
	(when (truevision-header-color-map-type header)
	  (setq color-map (make-color-map
			    :size (+ (truevision-header-color-map-start header)
				     (truevision-header-color-map-length header))))
	  (let* ((entry-size (truevision-header-color-map-entry-size header))
		 (field-size (floor entry-size 3)))
	    (loop for index from (truevision-header-color-map-start header)
		  repeat (truevision-header-color-map-length header)
		  do
	      (multiple-value-bind (r g b)
		  (let ((rgb 0))
		    (loop repeat (ceiling entry-size 8)
			  for shift from 0 by 8
			  do
		      (setf (sys:%logldb (byte 8 shift) rgb) (fast-tyi stream)))
		    (values (load-byte rgb 0 field-size)
			    (load-byte rgb field-size field-size)
			    (load-byte rgb (* field-size 2) field-size)))
		(set-color-map-rgb color-map index r g b))))
	  (unless (eq (truevision-header-image-type header) :mapped)
	    ;; I don't know what good the map is if the image isn't mapped.
	    (setq color-map nil)))
	(setq x-position (truevision-header-origin-x header)
	      y-position (truevision-header-origin-y header)
	      width (truevision-header-width header)
	      height (truevision-header-height header)
	      depth (truevision-header-depth header))
	(setq rle-p (truevision-header-rle-p header)
	      invert-x (truevision-header-right-to-left header)
	      invert-y (not (truevision-header-top-to-bottom header))))
      (setq raster (graphics:make-raster-array-with-correct-width
		     width height
		     :element-type (if color-map `(unsigned-byte ,depth) 'fixnum)))
      (sys:with-1d-raster-array (raster)
	(tv:dotimes-noting-progress (y height "Decoding image rows")
	  (flet ((read-pixel ()
		   (let ((value 0))
		     (loop repeat (ceiling depth 8)
			   for shift from 0 by 8
			   do (setf (sys:%logldb (byte 8 shift) value) (fast-tyi stream)))
		     (when (and (= depth 16) (not color-map))
		       ;; We do not natively support shallow true color.
		       (setq value (sys:%logdpbs (ldb (byte 5 0) value) (byte 5 3)	;R
						 (ldb (byte 5 5) value) (byte 5 11)	;G
						 (ldb (byte 5 10) value) (byte 5 19)	;B
						 (ldb (byte 1 15) value) (byte 1 24)	;A
						 0)))
		     value)))
	    (if (not rle-p)
		(dotimes (x width)
		  (setf (sys:1d-raster-aref raster x y) (read-pixel)))
		(let ((x 0))
		  (loop
		    (when ( x width)
		      (unless (= x width)
			(cerror "Try to go on" "Scan line crossed RLE boundary"))
		      (return))
		    (let* ((op (fast-tyi stream))
			   (count (1+ (ldb (byte 7 0) op))))
		      (if (ldb-test (byte 1 7) op)
			  (let ((pixel (read-pixel)))
			    (dotimes (ignore count)
			      (setf (sys:1d-raster-aref raster x y) pixel)
			      (incf x)))
			  (dotimes (ignore count)
			    (setf (sys:1d-raster-aref raster x y) (read-pixel))
			    (incf x)))))))))))
    (when invert-x
      (reflect-raster raster width height :horizontal))
    (when invert-y
      (reflect-raster raster width height :vertical))
    (ignore id)	;--- what indicator?
    (values raster width height
	    :color-map color-map ; :id id
	    :x-position x-position :y-position y-position)))
