;;; -*- Mode: LISP; Syntax: Zetalisp; Package: COLOR; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD-EXTENDED NIL) "CPTFONTB") A sharable color map format
0;;
;; This file implements a simple, hardware independent color map
;; which is used by IMAGES to specify color maps.  
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defflavor standard-color-map
	((map)(name)(derived-maps)(read-only)(map-info-tick 0))
	(si:property-list-mixin)
  :initable-instance-variables
  :settable-instance-variables
  (:init-keywords :initial-data :global-var-name :size)
  (:method-combination :IMAGE-DUMP-FORM (:NCONC :MOST-SPECIFIC-LAST)
                       :BINARY-DUMP-FORM (:NCONC :MOST-SPECIFIC-LAST)
                       :CREATE-BIT-ARRAYS (:NCONC :MOST-SPECIFIC-LAST)
                       :CREATE-DISPLACED-BIT-ARRAYS (:NCONC :MOST-SPECIFIC-LAST)
                       :CREATE-INIT-PLIST (:NCONC :MOST-SPECIFIC-LAST)))

(defun make-standard-color-map (&rest options
				&key (flavor 'standard-color-map) &allow-other-keys)
  (si:with-rem-keywords (options options '(:flavor))
    (cl:apply #'make-instance flavor options)))

(defmethod (:global-var-name standard-color-map) ()
  (send self ':get :global-var-name))

(defwhopper (:print-self standard-color-map) (stream plev slashify )
  (if name
      (printing-random-object (self stream :no-pointer :typep)
	(format stream "~A" name))
      (continue-whopper stream plev slashify)))

(defmethod (:init standard-color-map :after) (plist)

  (let ((data (get plist ':initial-data))
	(size (get plist :size))
	(global-name (get plist :global-var-name)))
    (when data (setq size (max (or size 0)
			       (1+ (loop for (i) in data maximize i)))))
    (unless size (setq size 256))

    (when (null map)
      (setq map (make-raster-array size 3 :initial-value 0.0)))

    (when global-name
      (send self :putprop global-name :global-var-name))

    (if data
	(loop for i in data do (lexpr-send self ':write-color-map i))
	(loop with max =  (decode-raster-array map)
	      with inc = (// 1.0 (1- max))
	      for i from 0 below max
	      as v from 0.0 by inc
	      do (send self ':write-color-map i v v v)))))

(defmethod (:color-map-description standard-color-map) (&optional ignore)
  (values (decode-raster-array map) 1 :dependent))


(defmethod (:image-dump-form standard-color-map :nconc) ()
  (let* ((can (canonical-color-map self))
	 (nam (send can :name))
	 (nam (if (neq can self)
		  nam
		  (when (standard-map-with-name nam) nam))))
    `(:standard-color-map
       ',(if nam
	     nam
	     (loop for i from 0 below (decode-raster-array map)
		   collect
		     `(,i ,@(multiple-value-list (send self ':read-color-map i))))))))

(defmethod (:fasd-form standard-color-map) ()
  (let* ((can (canonical-color-map self))
	 (tmp (if (neq can self) can (standard-map-with-name (send can :name))))
	 (nam (when tmp (send tmp :global-var-name))))
    (if nam
	`',nam
	`(make-standard-color-map :flavor ',(typep can)
				  ,@(send can :create-init-plist))
	)))

(defmethod (:create-init-plist standard-color-map :nconc)
	   (&key exclude-properties include-properties)
  (ignore include-properties)
  (unless (memq map exclude-properties)
    `(:map ',map)))

(defmethod (:size standard-color-map) (&optional (m map))
  (array-dimension-n 2 m))

(defmethod (:set-size standard-color-map) (new-size)
  (unless (eql new-size (send self :size))
    (incf map-info-tick)
    (setq map (make-raster-array new-size 3 :initial-value 0.0))))

(defmethod (:read-color-map standard-color-map) (n &optional (m map))
  (values (raster-aref m n 0) (raster-aref m n 1) (raster-aref m n 2)))

(defmethod (:read-managed-map standard-color-map) (n &optional ignore (m map))
  (send self ':read-color-map n m))

(defmethod (:write-color-map standard-color-map) (n r g b &optional (m map))
  (when read-only (ferror "this map is read-only"))
  (setq derived-maps nil)
  (incf map-info-tick)
  (and r (setf (raster-aref m n 0) r))
  (and g (setf (raster-aref m n 1) g))
  (and b (setf (raster-aref m n 2) b))
  nil)

(defmethod (:write-managed-map standard-color-map) (n r g b &optional ignore (m map))
  (send self ':write-color-map n r g b m))

(defmethod (:read-screen-map standard-color-map) (screen &rest args)
  (lexpr-send screen :read-screen-map self args))

(defmethod (:write-screen-map standard-color-map)
	   (scr &optional (mapn (send scr :map-segment-number)) noupdate
		(map-image (send scr :color-map-image)))
  (unless (eq self (send scr :standard-color-map mapn map-image))
    (send scr :write-screen-map self mapn noupdate map-image )))
	
(defmethod (:full-color-translation-array standard-color-map) ()
  (or (get (locf derived-maps) :full-color-translation-array)
      (putprop (locf derived-maps)
	       (loop with len = (decode-raster-array map)
		     with tr = (make-array len)
		     for i from 0 below len do
		 (multiple-value-bind (r g b) (send self ':read-color-map i)
		   (setq r (min 255 (round (* r 255.5)))
			 g (min 255 (round (* g 255.5)))
			 b (min 255 (round (* b 255.5))))
		   (aset (dpb b (byte 8 16.) (dpb g (byte 8 8) (dpb r (byte 8 0) -1)))
			 tr i))
		     finally (return tr))
	       :full-color-translation-array)))


(defmethod (:color-map-image standard-color-map) ()
  map)

(defmethod (:new-color-map standard-color-map) (&rest ignore)
  )

(defmethod (:fixnum-color-heap standard-color-map)()
  (or (get (locf derived-maps) :fixnum-color-heap-)
      (let* ((size (decode-raster-array map))
	     (fs 255.99)
	     (la (make-array size)))
	(declare (sys:array-register la))
	(loop for i from 0 below size do
	  (multiple-value-bind (r g b) (send self :read-color-map i)
	    (multiple-value-bind (hr hg hb) (rgb->hardware-rgb r g b fs)
	      (let ((dist (+ (* hr hr)(* hg hg)(* hb hb))))
		(setf (aref la i) `(,(isqrt dist)
				    ,hr ,hg ,hb
				    ,i
				    ))))))
	(cl:sort la #'(lambda (a b) (< (car a)(car b))))
	(putprop (locf derived-maps) la :fixnum-color-heap-)
	la)
	))

(defmethod (:flonum-color-heap standard-color-map)()
  (or (get (locf derived-maps) :flonum-color-heap-)
      (let* ((size (decode-raster-array map))
	     (la (make-array size)))
	(declare (sys:array-register la))
	(loop for i from 0 below size
	      do
	  (multiple-value-bind (r g b) (send self :read-color-map i)
	    (let ((dist (+ (* r r)(* g g)(* b b))))
	      (setf (aref la i)
		    `(,(sqrt dist)
		      ,r ,g ,b
		      ,i
		      )))))
	(cl:sort la #'(lambda (a b) (< (car a)(car b))))
	(putprop (locf derived-maps) la :flonum-color-heap-)
	la)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Some standard color maps
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar *standard-1b-grayscale-map*
	(make-standard-color-map :name :standard-1b-grayscale-map
				 :size 2
				 :global-var-name '*standard-1b-grayscale-map*
				 :property-list `(:map-manager
						   ,(make-instance 'full-color-map
								   :first-palette-color 0
								   :last-color-value 1
								   :last-free-color 1
								   :number-of-segments 2))))

(defvar *standard-2b-color-map*
	(make-standard-color-map :name ':2b-color-map
				 :size 4
				 :property-list `(:map-manager
						   ,(make-instance 'false-color-map
								   :first-palette-color 1
								   :last-color-value 3.
								   :last-free-color 3.
								   :number-of-segments 0))
				 :global-var-name '*standard-2b-color-map*))

(defvar *standard-2b-grayscale-map*
	(make-standard-color-map :name :standard-2b-grayscale-map
				 :size 4
				 :global-var-name '*standard-2b-grayscale-map*
				 :property-list `(:map-manager
						   ,(make-instance 'full-color-map
								   :first-palette-color 0
								   :last-color-value 3
								   :last-free-color 3
								   :number-of-segments 4))))
(defvar *standard-4b-grayscale-map* 
	(make-standard-color-map :name :standard-4b-grayscale-map
				 :size 16
				 :global-var-name '*standard-4b-grayscale-map*
				 :property-list `(:map-manager
						   ,(make-instance 'full-color-map
								   :first-palette-color 0
								   :last-color-value 15.
								   :last-free-color 15.
								   :number-of-segments 16.))))
(defvar *standard-4b-color-map*
	(make-standard-color-map :name ':standard-4b-color-map
				 :size 16
				 :property-list `(:map-manager
						   ,(make-instance 'false-color-map
								   :first-palette-color 1
								   :last-color-value 15.
								   :last-free-color 15.
								   :number-of-segments 2))
				 :global-var-name '*standard-4b-color-map*))

(defvar *standard-grayscale-map* 
	(make-standard-color-map :name :standard-grayscale-map
				 :global-var-name '*standard-grayscale-map*
				 :property-list `(:map-manager
						   ,(make-instance 'full-color-map
								   :first-palette-color 0
								   :number-of-segments 256.))))
(defvar *standard-b&w-map* *standard-grayscale-map*)

(defvar *standard-false-color-map*
	(make-standard-color-map :name ':standard-false-color-map
				 :property-list `(:map-manager
						   ,(make-instance 'false-color-map
								   :first-palette-color 1
								   :number-of-segments 6))
				 :global-var-name '*standard-false-color-map*))

(defvar *primary-only-color-map*
	(make-standard-color-map :name ':primary-only-color-map
				 :property-list `(:map-manager
						   ,(make-instance 'false-color-map
								   :first-palette-color 1
								   :number-of-segments 2))
				 :global-var-name '*primary-only-color-map*))

(defvar *primary-false-color-map*
	(make-standard-color-map :name ':primary-false-color-map
				 :property-list `(:map-manager
						   ,(make-instance 'false-color-map
								   :first-palette-color 0
								   :number-of-segments '(8 8 4)))))

(defvar *standard-maps* (list *standard-grayscale-map*
			      *standard-false-color-map*
			      *primary-false-color-map*
			      *primary-only-color-map*
			      *standard-4b-grayscale-map*
			      *standard-4b-color-map*
			      *standard-2b-color-map*
			      *standard-2b-grayscale-map*
			      *standard-1b-grayscale-map*
			      ))


(eval-when (load eval)
  (loop for i in *standard-maps*
	as man = (send i :get :map-manager)
	when man
	do
	  (send i :set-read-only nil)
	  (send man :set-super i)
	  (send man :create-balanced-map)
	  (send i :set-read-only t)
	  ))

(defun standard-map-with-name (name)
  (when (eq name :standard-b&w-map) (setq name :standard-grayscale-map))
  (loop for i in *standard-maps*
	when (eq name (send i :name))
	  do (return i)))

(defun standard-grayscale-map (pixel-depth)
  (selector pixel-depth eql
    (1 *standard-1b-grayscale-map*)
    (2 *standard-2b-grayscale-map*)
    (4 *standard-4b-grayscale-map*)
    (8 *standard-grayscale-map*)
  ))

(defmethod (canonical-color-map standard-color-map) ()
  (or (cl:getf derived-maps :canonical-color-map-1)
      (let* ((my-map (send self :full-color-translation-array))
	     (my-len (array-length my-map)))
	(declare (sys:array-register my-map))
	(let ((can (or (car (member self *standard-maps*))
		       (loop for map in *standard-maps*
			     as his-map = (send map :full-color-translation-array)
			     as his-len = (array-length his-map)
			     when (and (eql  my-len his-len)
				       (let ((his-map his-map))
					 (declare (sys:array-register his-map))
					 (loop for i from 0 below my-len
					       always
						 (eql (aref my-map i)(aref his-map i)))))
			       return map
			     finally (return self)))))
	  (setf (getf derived-maps :canonical-color-map-1) can)
	  can))))


(defun transfer-map-type (map)
  (cond ((null map) :grayscale)
	((instancep map)
	 (let ((can (canonical-color-map map)))
	   (cond ((eq can (standard-grayscale-map
			    (haulong (1- (send can :color-map-description)))))
		  ':grayscale)
		 ((let ((mm (send can :map-manager)))
		    (and mm
			 (send mm :operation-handled-p :orthogonal-rgb-segments)
			 ':palette)))
		 (t ':random))))
	(t :random)))

(defmethod (copy-color-map standard-color-map) (&key size)
  (let* ((old-size (send self :size))
	 (new-size (or size old-size))
	 (new (make-standard-color-map :flavor (typep self) :size new-size)))
    (loop for i from  0 below (min old-size new-size) do
      (multiple-value-bind (r g b) (send self :read-managed-map i)
	(send new :write-managed-map i r g b)))
    new))
