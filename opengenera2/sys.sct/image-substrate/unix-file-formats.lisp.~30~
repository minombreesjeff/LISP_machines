;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IMAGES; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Unix image formats

(fs:define-canonical-type :xbm "XBM")

(define-image-file-format :xbm
  :pretty-name "X Bitmap"
  :description "X windows bitmap (C code)"
  :read-function read-x-bitmap-file-internal
  :write-function write-x-bitmap-file-internal
  :file-stream-element-type string-char
  )

;;; Temporary special purpose parser.  Horrible error checking, rigid format, etc.
(defun read-x-bitmap-file-internal (stream)
  (let (name width height
	(depth 1))
    (loop
      (let ((line (read-line stream)))
	(cond ((string-equal line "#define " :end1 8)
	       (let* ((name-end (string-search-char #\_ line :start 8 :from-end t))
		      (type-end (string-search-char #\space line :start name-end)))
		 (if name
		     (assert (string-equal line name :start1 8 :end1 name-end))
		     (setq name (substring line 8 name-end)))
		 (let ((value (parse-integer line :start type-end)))
		   (cond ((string-equal line "_width" :start1 name-end :end1 type-end)
			  (setq width value))
			 ((string-equal line "_height" :start1 name-end :end1 type-end)
			  (setq height value))
			 ((string-equal line "_depth" :start1 name-end :end1 type-end)
			  (setq depth value))))))
	      ((string-equal line (format nil "static char ~A_bits[] = {" name))
	       (return))
	      (t
	       (error "Unknown line in file: ~A" line)))))
    (assert (and width height))
    (graphics:decoding-raster-by-byte-rows ((raster bytes :row-bytes row-bytes :index bindex)
					    (width height depth)
					    :note-progress t :named fill)
      (loop repeat row-bytes
	    for index from bindex
	    do
	(loop
	  (let ((char (send stream :tyi)))
	    (when (or (null char) (char-equal char #\}))
	      (return-from fill))
	    (when (char-equal char #\x)
	      (return))))
	(setf (aref bytes index) (dpb (digit-char-p (send stream :tyi) 16)
				      (byte 4 4)
				      (digit-char-p (send stream :tyi) 16))))
      (values raster width height
	      :name (nsubstitute #\- #\_ name :test #'char-equal)))))


#||	;This is doing it right, but the HParse parser isn't real enough.
(defun read-x-bitmap-file-internal (stream)
  (compiler:matchp (let ((macintosh-internals::*hparse-max-level* 1024))
		     (macintosh-internals::hparse-all stream))
    (('macintosh-internals::program
      ('macintosh-internals::define-simple-macro width-var (width))
      ('macintosh-internals::define-simple-macro height-var (height))
      ('macintosh-internals::static
       ('char ('macintosh-internals::initialized
	       ('macintosh-internals::array-declarator bits-var
		('macintosh-internals::array-subscript 'nil))
	       ('macintosh-internals::initializer-list contents)))))
     (let ((last (last contents)))
       (when (and (rest last) (atom (rest last)))
	 (setf (rest last) (list (rest last)))))
     (flet ((match-var (var rest)
	      (let ((index (string-search-char #\_ var :from-end t)))
		(when (and index (string-equal var rest :start1 (1+ index)))
		  (substring var 0 index)))))
       (let ((name (match-var width-var "width")))
	 (when (and name
		    (string-equal name (match-var height-var "height"))
		    (string-equal name (match-var bits-var "bits"))
		    (integerp width)
		    (integerp height))
	   (graphics:decoding-raster-by-byte-rows ((result bytes
						    :row-bytes row-bytes :index bindex)
						   (width height depth)
						   :note-progress t :named fill)
	     (loop repeat row-bytes
		   for index from bindex
		   do
	       (when (null contents)
		 (return-from fill))
	       (setf (aref bytes index) (pop contents)))
	     (return-from read-x-bitmap-file-internal
	       (values raster width height
		       (nsubstitute #\- #\_ name :test #'char-equal)))))))))
  (error "File contents are not in correct format."))
||#

(defun write-x-bitmap-file-internal (stream raster width height &key name &allow-other-keys)
  (let ((depth (sys:array-element-byte-size raster)))
    (setq name (substitute #\_ #\- name :test #'char-equal))
    (format stream "#define ~A_width ~D~%" name width)
    (format stream "#define ~A_height ~D~%" name height)
    (when (> depth 1)
      (format stream "#define ~A_depth ~D~%" name depth))
    (format stream "static char ~A_bits[] = {~%" name)
    (formatting-textual-list (stream :filled t :after-line-break "  ")
      (graphics:encoding-raster-by-byte-rows ((bytes :row-bytes row-bytes :index bindex)
					      (raster width height depth)
					      :note-progress t)
	(loop repeat row-bytes
	      for index from bindex
	      do
	  (formatting-textual-list-element (stream)
	    (format stream "0x~2,'0X" (aref bytes index))))))
    (format stream "};~%")))

(fs:define-canonical-type :pbm "PBM")

;;; Just about the most wasteful format you could imagine.
(define-image-file-format :pbm
  :pretty-name "Portable Bitmap"
  :description "X windows \"portable\" bitmap (1's and 0's)"
  :read-function read-pbm-file-internal
  :write-function write-pbm-file-internal
  :file-stream-element-type string-char
  )

(defun read-pbm-file-internal (stream)
  (let ((line nil)
	(index 0)
	width height raster)
    (labels ((next-non-whitespace ()
	       (loop
		 (when line
		   (setq index (string-search-not-set si:*whitespace* line :start index))
		   (when index
		     (if (char-equal (aref line index) #\#)
			 (setq line nil)	;Comment, ignore the rest
			 (return index))))
		 (setq line (read-line stream)
		       index 0)))
	     (next-whitespace ()
	       (setq index (or (string-search-set si:*whitespace* line :start index)
			       (string-length line))))
	     (next-token ()
	       (values (next-non-whitespace) (next-whitespace))))
      (multiple-value-bind (start end)
	  (next-token)
	(assert (string-equal line "P1" :start1 start :end1 end)))
      (multiple-value-bind (start end)
	  (next-token)
	(setq width (parse-integer line :start start :end end)))
      (multiple-value-bind (start end)
	  (next-token)
	(setq height (parse-integer line :start start :end end)))
      (setq raster (graphics::make-raster-array-with-correct-width width height
								   :element-type 'bit))
      (tv:dotimes-noting-progress (y height "Decoding image rows")
	(dotimes (x width)
	  (setf (raster-aref raster x y)
		(digit-char-p (let ((index (next-non-whitespace)))
				(aref line index))
			      2))
	  (incf index)))
      (values raster width height))))

(defun write-pbm-file-internal (stream raster width height &key name &allow-other-keys)
  (format stream "P1~%~@[# ~A~%~]~D ~D~%" name width height)
  (formatting-textual-list (stream :separator " " :filled t :fill-column '(70 :character))
    (tv:dotimes-noting-progress (y height "Encoding image rows")
      (dotimes (x width)
	(formatting-textual-list-element (stream)
	  (write-char (digit-char (raster-aref raster x y)) stream))))))

(fs:define-canonical-type :ppm "PPM")

(define-image-file-format :ppm
  :pretty-name "Portable Pixmap"
  :description "Poskanzer's portable pixmap format"
  :read-function read-image-from-ppm
  :write-function write-image-to-ppm
  :file-stream-element-type (unsigned-byte 8)	;because it is mixed binary and ascii
						;we have to call it binary 
)

(defvar *pbm-whitespace* (list (char-to-ascii #\space)
			   (char-to-ascii #\tab)
			   (char-to-ascii #\return)
			   (char-to-ascii #\line)))
			   
(defvar *pbm-line-end* (list (char-to-ascii #\return) (char-to-ascii #\line)))

(defun digit-value (code)
  (if ( (char-to-ascii #\0) code (char-to-ascii #\9))
      (- code (char-to-ascii #\0))
      (error "Invalid character")))

(defun read-ppm-char (stream)
  (let ((code (send stream :tyi)))
    (if (eql code (char-to-ascii #\#))
	(loop for code = (send stream :tyi)
	      until (member code *pbm-line-end*)
	      finally (return (read-ppm-char stream)))
	code)))

(defun read-decimal-number (stream)
  (loop with result = 0
	with digits-seen = 0
	for code = (read-ppm-char stream)
	if  (member code *pbm-whitespace*)
	do (unless (zerop digits-seen)
	     (return result))
	else
	  do (setq result (+ (* 10 result) (digit-value code)))
	     (incf digits-seen)))

(defun read-image-from-ppm (stream &rest options)
  (let ((magic-number (make-array 2 :element-type 'string-char)))
    (setf (aref magic-number 0) (ascii-to-char (send stream :tyi)))
    (setf (aref magic-number 1) (ascii-to-char (send stream :tyi)))
    (unless (or (string-equal magic-number "P3")
		(string-equal magic-number "P5")
		(string-equal magic-number "P6"))
      (error "This doesn't appear to be a ppm file."))
    (let* ((width (read-decimal-number stream))
	   (height (read-decimal-number stream))
	   (maxval (read-decimal-number stream))
	   raster)
      (format t "~&PPM magic = ~A, width = ~D, height = ~D, maxval=~D"
	      magic-number width height maxval)
      (unless (null options) (error "Can't handle options yet."))
      (unless ( maxval 255) (error "can't handle pixel values greater than 255"))
      (setq raster (acquire-raster-array-with-correct-width
		     width height :element-type 
		     (if (string-equal "P5" magic-number)
			 '(unsigned-byte 8)
			 '(signed-byte 31))))
      (stack-let* ((raster8 (si:make-array 
			      (* width height (if (string-equal magic-number "P5") 1 4))
			      :type 'si:art-8b :displaced-to raster)))
	(if (string-equal magic-number "P6")
	    ;;binary versions
	    (loop for i below (* width height 4) by 4
		  do (send stream :string-in nil raster8 i (+ i 3)))
	    (if (string-equal magic-number "P3")
		;;portable version
		(loop for i below (* width height 4) by 4
		      do (setf (aref raster8 i) (read-decimal-number stream))
			 (setf (aref raster8 (1+ i)) (read-decimal-number stream))
			 (setf (aref raster8 (+ 2 i)) (read-decimal-number stream)))
		(if (string-equal magic-number "P5")	;grayscale
		    (loop for i below (* width height) by width
			  do (send stream :string-in nil raster8 i (+ i width))))))
	(values raster width height)))))

(defun write-image-to-ppm  (output-stream raster rwidth rheight &key name color-map
			    &allow-other-keys)
  (if (and color-map (> (send color-map :size) 256))
      (write-image-to-standard-ppm output-stream raster rwidth rheight name color-map)
      (ecase (si:array-type raster)
	(sys:art-fixnum
	  (write-binary-ppm-from-fixnum-raster output-stream raster rwidth rheight name))
	(sys:art-8b
	  (if color-map
	      (write-binary-ppm-from-color-mapped-8b-image
		output-stream raster rwidth rheight name color-map)
	      (write-binary-ppm-from-gray-8b-image
		output-stream raster rwidth rheight name)))
	(sys:art-1b
	  (error "Use PBM format instead.")))))

;;for now, only gets called with a color map (cause that's how we know values are bigger
;;than 255.
(defun write-image-to-standard-ppm (output-stream raster rwidth rheight name color-map)
  (write-standard-ppm-header output-stream rwidth rheight name (1- (send color-map :size)))
  (loop for j below rheight
	do (loop with col = 0 and string = (si:make-array 70 :type'si:art-string :fill-pointer 0)
		 with binary-string = (si:make-array 70 :type'si:art-8b :displaced-to string)
		 for i below rwidth
		 for value = (raster-aref raster i j)
		 do (setf (fill-pointer string) 0)
		    (with-output-to-string (*standard-output* string)
		      (format t "~D " value))
		    (incf col (fill-pointer string))
		    (when (> col 70)
		      (send output-stream :tyo (char-to-ascii #\line))
		      (setq col (fill-pointer string)))
		    (send output-stream :string-out binary-string 0 (fill-pointer string)))
	finally (send output-stream :tyo (char-to-ascii #\line))))

(defun write-standard-ppm-header (output-stream rwidth rheight name &optional (maxval 255))
  (send output-stream :tyo (char-to-ascii #\P))
  (send output-stream :tyo (char-to-ascii #\3))
  (send output-stream :tyo (char-to-ascii #\line))
  (when name
    (send output-stream :tyo (char-to-ascii #\#))
    (send output-stream :tyo (char-to-ascii #\space))
    (loop for char being array-elements of name
	  do (send output-stream :tyo (char-to-ascii char)))
    (send output-stream :tyo (char-to-ascii #\line)))  

  (loop for char being array-elements of (format nil "~D" rwidth)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\space))
  (loop for char being array-elements of (format nil "~D" rheight)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line))
  (loop for char being array-elements of (format nil "~D" maxval)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line)))

(defun write-binary-ppm-header (output-stream rwidth rheight name &optional (maxval 255))
  (send output-stream :tyo (char-to-ascii #\P))
  (send output-stream :tyo (char-to-ascii #\6))
  (send output-stream :tyo (char-to-ascii #\line))
  (when name
    (send output-stream :tyo (char-to-ascii #\#))
    (send output-stream :tyo (char-to-ascii #\space))
    (loop for char being array-elements of name
	  do (send output-stream :tyo (char-to-ascii char)))
    (send output-stream :tyo (char-to-ascii #\line)))  

  (loop for char being array-elements of (format nil "~D" rwidth)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\space))
  (loop for char being array-elements of (format nil "~D" rheight)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line))
  (loop for char being array-elements of (format nil "~D" maxval)
	do (send output-stream :tyo (Char-to-ascii char)))
  (send output-stream :tyo (char-to-ascii #\line)))

(defun write-binary-ppm-from-fixnum-raster (output-stream raster rwidth rheight name)
  (stack-let* ((raster8 (si:make-array (* rwidth rheight 4) :type 'si:art-8b
				       :displaced-to raster)))
    (write-binary-ppm-header output-stream rwidth rheight name 255)
    (loop for i below (* rwidth rheight 4) by 4
	  do (send output-stream :string-out raster8 i (+ i 3)))))

(defun write-binary-ppm-from-color-mapped-8b-image (output-stream raster rwidth rheight
						    name color-map)
  (let* ((limitval (send color-map :size))
	 (maxval (1- limitval)))
    (write-binary-ppm-header output-stream rwidth rheight name maxval)
    (stack-let ((rgb-values (si:make-array limitval)))
      (loop with fr and fg and fb
	    for i below limitval
	    for entry = (prog1 (si:make-stack-array 3 :type'si:art-8b)
			       (multiple-value-setq (fr fg fb)
				 (send color-map :read-color-map i)))
	    do (setf (aref entry 0) (min maxval (floor (* fr limitval))))
	       (setf (aref entry 1) (min maxval (floor (* fg limitval))))
	       (setf (aref entry 2) (min maxval (floor (* fb limitval))))
	       (setf (aref rgb-values i) entry))
      (loop for j below rheight do
	(loop for i below rwidth
	      do (send output-stream :string-out (aref rgb-values (raster-aref raster i j))))))))

(defun write-binary-ppm-from-gray-8b-image (output-stream raster rwidth rheight name)
  (let* ((limitval 256)
	 (maxval (1- limitval)))
    (write-binary-ppm-header output-stream rwidth rheight name maxval)
    (loop for j below rheight do
	(loop for i below rwidth
	      for value = (raster-aref raster i j)
	      do (loop repeat 3 do (send output-stream :tyo value))))))
      

(fs:define-canonical-type :cbm "CBM")

(define-image-file-format :cbm
  :pretty-name "Compact Bitmap"
  :description "X windows \"compact\" bitmap"
  :read-function read-cbm-file-internal
  :write-function write-cbm-file-internal
  :file-stream-element-type (unsigned-byte 8)
  )

(defun read-cbm-file-internal (stream)
  (assert (= (read-byte stream) #x2A))
  (assert (= (read-byte stream) #x17))
  (let* ((width (dpb (read-byte stream) (byte 8 8) (read-byte stream)))
	 (height (dpb (read-byte stream) (byte 8 8) (read-byte stream)))
	 (raster (graphics::make-raster-array-with-correct-width width height
								 :element-type 'bit)))
    (let ((byte 0)
	  (nbits 0))
      (tv:dotimes-noting-progress (y height "Decoding image rows")
	(dotimes (x width)
	  (when (zerop nbits)
	    (setq byte (read-byte stream)
		  nbits 8))
	  (setf (raster-aref raster x y)
		(load-byte byte (1- nbits) 1))
	  (decf nbits))))
    (values raster width height)))

(defun write-cbm-file-internal (stream raster width height &key &allow-other-keys)
  (write-byte #x2A stream)
  (write-byte #x17 stream)
  (write-byte (load-byte width 8 8) stream)
  (write-byte (load-byte width 0 8) stream)
  (write-byte (load-byte height 8 8) stream)
  (write-byte (load-byte height 0 8) stream)
  (let ((byte 0)
	(nbits 0))
    (tv:dotimes-noting-progress (y height "Encoding image rows")
      (dotimes (x width)
	(setf (load-byte byte (- 7 nbits) 1) (raster-aref raster x y))
	(when ( (incf nbits) 8)
	  (write-byte byte stream)
	  (setq byte 0
		nbits 0))))
    (when (plusp nbits)
      (write-byte byte stream))))

(fs:define-canonical-type :xim "XIM")

(define-image-file-format :xim
  :pretty-name "Xim"
  :description "X Image"
  :read-function read-xim-file-internal
  :file-stream-element-type (unsigned-byte 8)
  )

(defun read-xim-file-internal (stream)
  (sys:with-data-stack
    (labels ((read-string (n)
	       (stack-let ((array (make-array n :element-type '(unsigned-byte 8))))
		 (send stream :string-in t array)
		 (let* ((l (or (position 0 array) n))
			(string (make-array l :element-type 'string-char)))
		   (dotimes (i l)
		     (setf (aref string i) (ascii-to-char (aref array i))))
		   string)))
	     (read-integer (n)
	       (let ((string (read-string n)))
		 (and (plusp (length string))
		      (parse-integer string :sign-allowed nil)))))
      (let ((version (read-integer 8)))
	(assert (= 3 version)))
      (let* ((header-size (read-integer 8)))
	(assert (= 1024 header-size)))
      (let* ((width (read-integer 8))
	     (height (read-integer 8))
	     (n-colors (read-integer 8))
	     (n-channels (or (read-integer 8) 1))
	     (n-pictures (or (read-integer 8) 1))
	     (alpha-channel (or (read-integer 4) 0))
	     (run-length (or (read-integer 4) 0))
	     (author (read-string 48))
	     (date (read-string 32))
	     (program (read-string 16))
	     (comment (read-string 96))
	     (name (pathname-name (pathname stream))))
	author date program comment
	(assert (= 1 n-pictures))
	(assert (= 0 run-length))
	(flet ((read-channel (array)
		 (send stream :string-in t array)))
	  (ecase n-channels
	    ((0 1)
	     (let ((color-map (make-color-map :size 256)))
	       (dotimes (i 256)
		 (set-color-map-rgb color-map i
				    (read-byte stream) (read-byte stream) (read-byte stream)
				    255))
	       (ignore n-colors)		;Could subset.
	       (let* ((raster (graphics::make-raster-array-with-correct-width
				width height :element-type '(unsigned-byte 8)))
		      (row-overlay (sys:make-stack-array (* width height)
							 :element-type '(unsigned-byte 8)
							 :displaced-to raster)))
		 (dotimes (y height)
		   (adjust-array row-overlay width
				 :displaced-to raster
				 :displaced-index-offset (array-row-major-index raster y 0))
		   (read-channel row-overlay))
		 (values raster width height :name name :color-map color-map))))
	    ((3)
	     (let ((cmap-dummy (sys:make-stack-array (* 3 256)
						     :element-type '(unsigned-byte 8))))
	       (send stream :string-in t cmap-dummy)
	       (let ((raster (make-raster-array width height :element-type 'fixnum))
		     (row (sys:make-stack-array width :element-type '(unsigned-byte 8))))
		 (declare (sys:array-register-1d raster))
		 (macrolet ((do-channel (position)
			      `(dotimes (y height)
				 (read-channel row)
				 (let ((index (array-row-major-index raster y 0)))
				   (dotimes (x width)
				     (setf (ldb (byte 8 ,position)
						(sys:%1d-aref raster index))
					   (aref row x))
				     (incf index))))))
		   (do-channel 0)
		   (do-channel 8)
		   (do-channel 16)
		   (when (eql alpha-channel 1)
		     (do-channel 24)))
		 (values raster width height :name name))))))))))

(fs:define-canonical-type :xwd "XWD")

(define-image-file-format :xwd
  :pretty-name "X Window Dump"
  :description "X v.11 window dump"
  :read-function read-xwd-file-internal
  :file-stream-element-type (unsigned-byte 8)
  )

(rpc:define-octet-structure (xwd-11-header :access-type :byte-swapped-8
					   :default-index 0
					   :default-type rpc:cardinal-32)
  header-size
  file-version					;7
  (pixmap-format (member rpc:cardinal-32 '(:xy-bitmap :xy-pixmap :z-pixmap)))
  pixmap-depth
  pixmap-width
  pixmap-height
  x-offset
  (byte-order (member rpc:cardinal-32 '(:lsb :msb)))
  bitmap-unit
  (bitmap-bit-order (member rpc:cardinal-32 '(:lsb :msb)))
  bitmap-pad
  bits-per-pixel
  bytes-per-line
  visual-class
  red-mask
  green-mask
  blue-mask
  bits-per-rgb
  colormap-entries
  ncolors
  window-width
  window-height
  window-x
  window-y
  window-border-width)

(rpc:define-octet-structure (xwd-11-color :access-type :byte-swapped-8
					  :default-index 0)
  (pixel rpc:cardinal-32)
  (red rpc:cardinal-16)
  (green rpc:cardinal-16)
  (blue rpc:cardinal-16)
  (flags rpc:cardinal-8)
  (* (rpc:padding rpc:cardinal-8 1)))

(defun read-xwd-file-internal (stream)
  (let (color-map width height depth bytes-per-line)
    (stack-let ((header (make-xwd-11-header)))
      (send stream :string-in "EOF in the header" header)
      (dotimes (ignore (- (xwd-11-header-header-size header)
			  (rpc:octet-structure-total-size
			    (xwd-11-header header 0))))
	(read-byte stream))
      (assert (and (eq (xwd-11-header-byte-order header) :msb)
		   (eq (xwd-11-header-bitmap-bit-order header) :msb)
		   (eq (xwd-11-header-pixmap-format header) :z-pixmap)))
      (let ((cm (make-color-map :size (xwd-11-header-ncolors header))))
	(stack-let ((color (make-xwd-11-color)))
	  (dotimes (c (xwd-11-header-colormap-entries header))
	    (send stream :string-in "EOF in a colormap" color)
	    (set-color-map-rgb cm c
			       (xwd-11-color-red color)
			       (xwd-11-color-green color)
			       (xwd-11-color-blue color)
			       (1- 1_16))))
	(when (> (xwd-11-header-ncolors header) 2)
	  (setq color-map cm)))
      (setq width (xwd-11-header-pixmap-width header)
	    height (xwd-11-header-pixmap-height header)
	    depth (xwd-11-header-pixmap-depth header)
	    bytes-per-line (xwd-11-header-bytes-per-line header)))
    (with-fast-tyi (stream)
      (sys:with-bit-reversing
	(graphics:decoding-raster-by-byte-rows ((raster bytes
						  :index bindex
						  :row-bytes ignore)	;Header says
						(width height depth)
						:note-progress t)
	    (dotimes (i bytes-per-line)
	      (let ((value (fast-tyi stream)))
		(ecase depth
		  (1 (setq value (sys:bit-reverse-8 value)))
		  (8 ))
		(setf (aref bytes (+ bindex i)) value)))
	  (values raster width height :color-map color-map))))))

(fs:define-canonical-type :rle "RLE")

(define-image-file-format :utah-rle
  :pretty-name "Utah RLE"
  :description "University of Utah format Run-length-encoding"
  :read-function read-rle-file-internal
  :file-stream-element-type (unsigned-byte 8)
  :file-canonical-type :rle
  )

(rpc:define-octet-structure (rle-header :access-type :unsigned-8
					:default-index 0)
  (magic rpc:cardinal-16)
  (x-pos rpc:integer-16)
  (y-pos rpc:integer-16)
  (x-size rpc:integer-16)
  (y-size rpc:integer-16)
  (flags (* rpc:cardinal-8
	    (clear-first (rpc:boolean-bit 0))
	    (no-background (rpc:boolean-bit 1))
	    (alpha (rpc:boolean-bit 2))
	    (comments (rpc:boolean-bit 3))))
  (nchannels rpc:cardinal-8)
  (pixel-bits rpc:cardinal-8)
  (ncmap rpc:cardinal-8)
  (cmaplen rpc:cardinal-8))

(defun read-rle-file-internal (stream)
  (let (width height raster x-position y-position color-map comments)
    (with-fast-tyi (stream)
      (stack-let ((header (make-rle-header)))
	(send stream :string-in "EOF in the header" header)
	(assert (= (rle-header-magic header) #xCC52))
	(setq width (rle-header-x-size header)
	      height (rle-header-y-size header)
	      x-position (rle-header-x-pos header)
	      y-position (rle-header-y-pos header))
	(when (and (= (rle-header-nchannels header) 1)
		   (= (rle-header-ncmap header) 3))
	  ;; Only combination that has a meaningful interpretation for our color maps
	  (setq color-map (make-color-map :size (ash 1 (rle-header-cmaplen header)))))
	(assert (= (rle-header-pixel-bits header) 8))
	(let ((index 1)
	      (background 0))
	  (unless (rle-header-no-background header)
	    (dotimes (j (rle-header-nchannels header))
	      (let ((pixel (fast-tyi stream)))
		(setf (sys:%logldb (byte 8 (* j 8)) background) pixel))
	      (incf index)))
	  (when (oddp index)
	    (fast-tyi stream))
	  (setq raster (graphics:make-raster-array-with-correct-width
			 width height
			 :element-type (if (= (rle-header-nchannels header) 1)
					   `(unsigned-byte ,(rle-header-pixel-bits header))
					   'fixnum)
			 :initial-element background)))
	(dotimes (mapc (rle-header-ncmap header))
	  (dotimes (index (ash 1 (rle-header-cmaplen header)))
	    (let ((value (let ((lsb (fast-tyi stream))
			       (msb (fast-tyi stream)))
			   (dpb msb (byte 8 8) lsb))))
	      (when color-map
		(multiple-value-bind (r g b)
		    (color-map-rgb color-map index (1- 1_16))
		  (case mapc
		    (0 (setq r value))
		    (1 (setq g value))
		    (2 (setq b value)))
		  (set-color-map-rgb color-map index r g b (1- 1_16)))))))
	(when (rle-header-comments header)
	  (let ((length (let ((lsb (fast-tyi stream))
			      (msb (fast-tyi stream)))
			  (dpb msb (byte 8 8) lsb))))
	    (stack-let ((string (make-array 20 :element-type 'string-char
					       :fill-pointer 0)))
	      (dotimes (i length)
		(let ((char (fast-tyi stream)))
		  (if (plusp char)
		      (vector-push-extend (ascii-to-char char) string)
		    (push (copy-seq string) comments)
		    (setf (fill-pointer string) 0)))))
	    (when (oddp length)
	      (fast-tyi stream)))
	  (setq comments (nreverse comments))))
      (tv:noting-progress ("Decoding image rows")
	(sys:with-1d-raster-array (raster)
	  (let ((y 0)
		(x 0)
		(c 0))
	    (loop
	      (let ((opcode (or (fast-tyi stream) (return)))
		    (operand (fast-tyi stream)))
		(when (logtest opcode #x40)
		  (setq opcode (logand opcode #x3F))
		  (let ((lsb (fast-tyi stream))
			(msb (fast-tyi stream)))
		    (setq operand (dpb msb (byte 8 8) lsb))))
		(macrolet ((add-pixel (pixel)
			     `(progn
				(setf (sys:%logldb (byte 8 c) (sys:1d-raster-aref raster x y))
				      ,pixel)
				(incf x))))
		  (ecase opcode
		    (1
		      (incf y operand)
		      (tv:note-progress y height)
		      (setq x 0))
		    (2
		      (setq c (if (= operand 255)	;Alpha channel
				  24
				  (* operand 8)))
		      (setq x 0))
		    (3
		      (incf x operand))
		    (5
		      (incf operand)	;This is not given in the spec, but the C does it.
		      (dotimes (j operand)
			(let ((pixel (fast-tyi stream)))
			  (add-pixel pixel)))
		      (when (oddp operand)
			(fast-tyi stream)))
		    (6
		      (incf operand)	;This is not given in the spec, but the C does it.
		      (let ((pixel (fast-tyi stream)))
			(fast-tyi stream)		;Padding (or high byte)
			(dotimes (j operand)
			  (add-pixel pixel))))
		    (7
		      (return))))))))))
    (reflect-raster raster width height :vertical)
    (values raster width height
	    :color-map color-map :comments comments
	    :x-position x-position :y-position y-position)))
