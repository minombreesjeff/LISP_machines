;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; The D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(min 128. control-stack-max-frame-size)0 is to reduce architectural
;;; dependencies.
(defmacro maximum-key-size ()
  `(-1 0(min 128. 1control-stack-max-frame-size0)
      (si:defstorage-size si:stack-frame)
      8 2 1 1 5))       ;8 locals + 2 arguments + 1 argument
			; + 1 function + 5 margin

;;; This is for tuning, you can change this value.
;;; The real don't-crash-the-machine limit is hardwired into the code.
;;; I am starting it out at the full size, but if we wish to shrink it we can.
;;; <later; I shrank it>
(defparameter *maximum-key-size* (min #+3600 128 #+imach 20. (maximum-key-size)))

;;; This punts if the size of the key gets out of hand.  This is justifiable;
;;; large types end up depending on EQness of the type spec, but it is unlikely
;;; that they would appear as explicit lists in the code or otherwise be non-1eql
0;;; yet 1equal0.  If this is not acceptable, redesign your type, and design a key
;;; that is not so large as to be a performance problem.
(defun call-with-one-level-key (function key)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (let ((max-length (min (1- *maximum-key-size*)
			 (maximum-key-size)))
	(length -1)
	(argl key)
	(arg)
	(new-key))
    1;; No variables after this point!!
0    (loop while argl
	  do (setq arg (pop argl))
	     (incf length)
	     (if ( length max-length)
		 ;; We're getting too big, just truncate so they all map to the same
		 ;; bucket.
		 (progn (%push nil)
			(setq new-key
			      (cond ((< length 0) nil)
				    ((= length 0) key)
				    (t (sys:%finish-stack-list* length))))
			(return))
	       (if (atom arg)
		   (%push arg)
		 (%push (%make-pointer dtp-locative arg))))
	     finally
	       (setq new-key (when ( length 0)
			       (sys:%finish-stack-list length))))
    ;; We can get away with a variable number of %PUSHes
    ;; because we know we're about to return.
    ;; Don't try to do anything else in here, or the compiler will not be able
    ;; to generate meaningful code.
    (funcall function new-key)))

(defun call-with-one-level-key-cache (function key &rest additional-args)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (let ((max-length (min (1- *maximum-key-size*)
			 (maximum-key-size)))
	(length -1)
	(argl key)
	(arg)
	(new-key))
    1;; No variables after this point!!
0    (loop while argl
	  do (setq arg (pop argl))
	     (incf length)
	     (if ( length max-length)
		 ;; We're getting too big, let's just make this a dotted list refering
		 ;; to some more arguments.
		 (progn (%push (%make-pointer dtp-locative argl))
			(setq new-key
			      (cond ((< length 0) nil)
				    ((= length 0) key)
				    (t (sys:%finish-stack-list* length))))
			(return))
	       (if (atom arg)
		   (%push arg)
		 (%push (%make-pointer dtp-locative arg))))
	     finally
	       (setq new-key (when ( length 0)
			       (sys:%finish-stack-list length))))
    ;; We can get away with a variable number of %PUSHes
    ;; because we know we're about to return.
    ;; Don't try to do anything else in here, or the compiler will not be able
    ;; to generate meaningful code.
    (apply function new-key additional-args)))

;;; +++ This isn't done yet.
(defun call-with-meta-arg-key-cache (function prargs)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (let ((max-length (min (1- *maximum-key-size*)
			 (maximum-key-size)))
	(length -1)
	(argl *meta-presentation-keywords*)
	(arg)
	(new-key))
    1;; No variables after this point!!
0    (loop while argl
	  do (setq arg (getf prargs (pop argl)))
	     (incf length)
	     (if ( length max-length)
		 ;; We're getting too big, let's just make this a dotted list refering
		 ;; to some more arguments.
		 (progn (%push (%make-pointer dtp-locative argl))
			(setq new-key
			      (cond ((< length 0) nil)
				    ((= length 0) prargs)
				    (t (sys:%finish-stack-list* length))))
			(return))
	       (if (atom arg)
		   (%push arg)
		 (%push (%make-pointer dtp-locative arg))))
	     finally
	       (setq new-key (when ( length 0)
			       (sys:%finish-stack-list length))))
    ;; We can get away with a variable number of %PUSHes
    ;; because we know we're about to return.
    ;; Don't try to do anything else in here, or the compiler will not be able
    ;; to generate meaningful code.
    (funcall function new-key)))


(defun call-with-presentation-type-keys (function type-name-and-types &optional ignore)
  (declare (dbg:invisible-frame :presentation-handler-search))
  (let ((max-length (min (1- *maximum-key-size*)
			 (maximum-key-size)))
	(length 0)			;accomodates initial %PUSH in loop
	(argl type-name-and-types)
	(new-key))
    (labels ((recurse (remainder)
	       (declare (dbg:invisible-frame :presentation-handler-search))
	       (loop for type-list on remainder
		     for type = (car type-list)
		     do
		 (when (not (atom type))
		   (if (atom (car type))
		       (stack-let ((p-type (list type)))
			 ;; p-type avoids consing in 1decode-old-presentation-type
0			 (return
			   (with-presentation-type-key-internal
			     (lambda (key)
			       (sys:%with-binding-stack-level
				 (%bind-location (locf (car type-list)) key)
				 (if (null (cdr type-list))
				     (funcall function new-key)
				   (recurse (cdr type-list)))))
			     p-type)))
		     (return
		       (with-presentation-type-key-internal
			 (lambda (key)
			   (sys:%with-binding-stack-level
			     (%bind-location (locf (car type-list)) key)
			     (if (null (cdr type-list))
				 (funcall function new-key)
			       (recurse (cdr type-list)))))
			 type))))
		     finally (return (funcall function new-key)))))
      (loop initially (%push (pop argl))
	    while argl
	    when ( length max-length)
	      do ;; We're getting too big, let's just punt, leaving the rest not disjoint.
		(progn (%push nil)
		       (setq new-key
			     (cond ((< length 0) nil)
				   ((= length 0) argl)
				   (t (sys:%finish-stack-list* length))))
		       (return))
	    do (%push (pop argl))
	       (incf length)
	       finally
		 (setq new-key (sys:%finish-stack-list length)))
      ;; We can get away with a variable number of %PUSHes
      ;; because we know we're about to return.
      (recurse (cdr new-key)))))

(defun call-with-presentation-type-cache-keys (function type-name-and-types)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (let ((length 0)				;Would be -1, except taking into account the
						;1initially0 clause in the loop.
	(argl type-name-and-types)
	(new-key))
    (labels ((recurse (remainder)
	       (declare (dbg:invisible-frame :presentation-handler-search))
	       (loop for type-list on remainder
		     for type = (car type-list)
		     do
		 (when (not (atom type))
		   (if (atom (car type))
		       (stack-let ((p-type (list type)))
			 (return
			   (with-key-for-cache (key p-type)
			     (sys:%with-binding-stack-level
			       (%bind-location (locf (car type-list)) key)
			       (if (null (cdr type-list))
				   (funcall function new-key)
				 (recurse (cdr type-list)))))))
		     (return
		       (with-key-for-cache (key type)
			 (sys:%with-binding-stack-level
			   (%bind-location (locf (car type-list)) key)
			   (if (null (cdr type-list))
			       (funcall function new-key)
			     (recurse (cdr type-list))))))))
		     finally (return (funcall function new-key)))))
      (loop initially (%push (pop argl))
	    while argl
	    when ( length (min (1- *maximum-key-size*)
				(maximum-key-size)))
	      do
	;; We're getting too big, let's just make this a dotted list refering
	;; to some more arguments.
		(progn (%push nil)
		       (setq new-key
			     (cond ((< length 0) nil)
				   ((= length 0) argl)
				   (t (sys:%finish-stack-list* length))))
		       (return))
	    do (%push (pop argl))
	       (incf length)
	       finally
		 (setq new-key (sys:%finish-stack-list length)))
      ;; We can get away with a variable number of %PUSHes
      ;; because we know we're about to return.
      (recurse (cdr new-key)))))

(defgeneric with-presentation-type-key-internal (function presentation-type)
  (declare (sys:downward-funarg function))
  (:method-arglist function presentation-type)
  (:function (declare (dbg:invisible-frame :presentation-handler-search))
	     (if (atom presentation-type)
		 (funcall function presentation-type)
	       (with-type-descriptor ((desc presentation-type)
				      presentation-type :exact-only t)
		 (if (null desc)
		     (with-type-decoded (type-name data-args) presentation-type
		       (if (null data-args)
			   (funcall function type-name)
			 (stack-let ((data-type `(,type-name ,@data-args)))
			   (call-with-one-level-key function data-type))))
		   (funcall (flavor:generic with-presentation-type-key-internal)
			    desc function presentation-type))))))

(defmethod (with-presentation-type-key-internal presentation-type-descriptor)
	   (function presentation-type)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (with-type-decoded (type-name data-args) presentation-type
    (cond ((null data-args)
	   ;; Standardize on just the symbol when there's no data arguments
	   (funcall function type-name))
	  ((variable-boundp key-generator)
	   ;; Call the key generator with just the data arguments, to be sure it
	   ;; can't depend on any presentation arguments.
	   (apply key-generator function type-name data-args))
	  (t (stack-let ((key `(,type-name ,@data-args)))
	       ;; Call the key generator with just the data arguments, to be sure it
	       ;; can't depend on any presentation arguments.
	       (call-with-one-level-key function key))))))

(defmacro with-presentation-type-key ((key-var type) &body body)
  (declare (zwei:indentation 0 4 1 1))
  `(with-presentation-type-key-internal
     #'(lambda (,key-var)
	 (declare (sys:downward-function)
		  (dbg:invisible-frame :presentation-handler-search))
	 ,@body)
     ,type))


;;; Key generator that just uses the name
;;; >>> If you change this, be sure to update the pointers to the old copy
;;; >>> living in the type descriptors.
(defun standard-key-generator (function name &rest data-args)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (ignore data-args)
  (funcall function name))

;;; Cache key generator, preserves keys when key generator discards them.
;;; >>> If you change this, be sure to update the pointers to the old copy
;;; >>> living in the type descriptors.
(defun standard-cache-key-generator (function name &rest data-args)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (if (null data-args)
      (funcall function name)
    (stack-let ((key `(,name ,@data-args)))
      (call-with-one-level-key-cache function key))))

;;; Cache key generator, preserves keys when key generator discards them.
;;; Includes presentation type arguments as well.
;;; >>> If you change this, be sure to update the pointers to the old copy
;;; >>> living in the type descriptors.
(defun standard-cache-key-generator-rest (function type &optional do-not-cache original-type)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (with-type-decoded (nil data-args pr-args) type
     (with-type-decoded (type-name) original-type
	(stack-let ((new-type `(,type-name ,@data-args)))
	  (with-key-for-cache (data-key new-type)
	    (when (null pr-args)
	      (return-from standard-cache-key-generator-rest
		(funcall function data-key do-not-cache)))
	    ;; Do this now, since 1consed-in-control-stack0 miscompiles if we've done 1%push0's
	    (setq do-not-cache (loop for arg in pr-args
				     thereis (consed-in-control-stack arg)))
	    (let ((key)
		  (real-data-key data-key)
		  (arg)
		  (count 0))
	      (when (and pr-args (atom data-key))
		(%push data-key)
		(setq real-data-key (%finish-stack-list 0)))
	      (%push real-data-key)
	      (loop while pr-args
		    do (incf count)
		       (setq arg (pop pr-args))
		       (%push (if (atom arg) arg (%make-pointer dtp-locative arg))))
	      (setq key (%finish-stack-list count))
	      (funcall function key do-not-cache)))))))

;;; Cache key generator for caches dependent on the presentation arguments.
;;; The continuation is called on the key, and a (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")do-not-cache0 argument indicating
;;; that a stack-consed presentation-argument was encountered.
;;; >>> If you change this, be sure to update the pointers to the old copy
;;; >>> living in the type descriptors.
(defun standard-full-cache-key-generator (function type &optional do-not-cache original-type)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (with-type-decoded (nil data-args pr-args) type
     (with-type-decoded (original-type-name) original-type
	(if (null pr-args)
	    (if (null data-args)
		(return-from standard-full-cache-key-generator
		  (funcall function original-type-name do-not-cache))
	      (labels ((invoke-continuation (key)
			 (funcall function key do-not-cache)))
		(stack-let ((key `(,original-type-name ,@data-args)))
		  (call-with-one-level-key-cache #'invoke-continuation key))))
	  (stack-let ((key1 `(,original-type-name ,@data-args)))
	    (let ((do-not-cache
		    (or do-not-cache
			(loop for pr in pr-args
			      thereis (consed-in-control-stack pr)))))
	      (call-with-one-level-key-cache
		(lambda (key2)
		  (call-with-one-level-key-cache
		    (lambda (key-pr)
		      (stack-let ((key `(,key2 ,@key-pr)))
			(funcall function key do-not-cache)))
		    pr-args))
		key1)))))))


(defun with-rest-presentation-arguments (function types do-not-cache)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (if (null types)
      (funcall function nil do-not-cache)
    (with-full-key-for-cache (type-key do-not-cache (first types) :do-not-cache do-not-cache)
      (labels ((add-this-key (more-key do-not-cache)
		 (stack-let ((key (list* type-key more-key)))
		   (funcall function key do-not-cache))))
	(with-rest-presentation-arguments #'add-this-key (rest types) do-not-cache)))))


;;; This is the macro
(defmacro with-key-for-cache ((cache-key type) &body body)
  (let ((type-var (make-symbol "TYPE"))
	(type-name (make-symbol "TYPE-NAME"))
	(type-dargs (make-symbol "TYPE-DARGS"))
	(type-desc (make-symbol "TYPE-DESCRIPTOR"))
	(cache-key-body (make-symbol "CACHE-KEY-BODY")))
    `(let ((,type-var ,type))
       (with-type-decoded (,type-name ,type-dargs) ,type-var
	 (let ((,type-desc (symbol-presentation-type-descriptor ,type-name)))
	   (labels ((,cache-key-body (,cache-key)
		     (declare (sys:downward-function)
			      (dbg:invisible-frame :presentation-handler-search))
		     ,@body))
	     (if (null ,type-dargs)
		 (,cache-key-body ,type-name)
	       (if ,type-desc
		   (apply #'with-cache-key ,type-desc #',cache-key-body
			  ,type-name ,type-dargs)
		 (stack-let ((key (list ,type-name ,type-dargs)))
		   (call-with-one-level-key-cache #',cache-key-body key))))))))))

;;; +++ This isn't done yet.
(defun with-key-for-cache-internal (type continuation)
  (declare (sys:downward-funarg continuation)
	   (dbg:invisible-frame :presentation-handler-search))
  (with-type-decoded (type-name type-dargs type-prargs) type
    (let ((type-desc (symbol-presentation-type-descriptor type-name)))
      (if (and (null type-dargs) (null type-prargs))
	  (funcall continuation type-name)
	(if type-desc
	    (funcall #'with-cache-key type-desc continuation type)
	  (stack-let ((key (list* type-name type-dargs)))
	    (if type-prargs
		(call-with-one-level-key-cache
		  (lambda (type-prargs1)
		    (call-with-one-level-key-cache
		      (lambda (key1)
			(stack-let ((key2 (list* key1 type-prargs1)))
			  (funcall continuation key2)))
		      key))
		  type-prargs)
	      (call-with-one-level-key-cache continuation key))))))))

(defmacro with-full-key-for-cache ((cache-key do-not-cache-var type &key do-not-cache)
				   &body body)
  (let ((cache-key-body (make-symbol "FULL-CACHE-KEY-BODY")))
    `(labels ((,cache-key-body (,cache-key ,do-not-cache-var)
	       (declare (sys:downward-function)
			(dbg:invisible-frame :presentation-handler-search))
	       ,@body))
       (with-full-key-for-cache-internal #',cache-key-body ,type ,@(when do-not-cache
								     `(,do-not-cache))))))

(defgeneric with-full-key-for-cache-internal (continuation type &optional do-not-cache
							   (original-type type))
  (declare (sys:downward-funarg continuation)
	   (dbg:invisible-frame :presentation-handler-search))
  (:method-arglist continuation type &optional do-not-cache (original-type type))
  (:function
    (declare (sys:downward-funarg continuation)
	     (dbg:invisible-frame :presentation-handler-search))
    (with-type-descriptor ((type-desc expanded-type) type :error-p nil)
      (with-type-decoded (nil type-dargs type-prargs) expanded-type
	 (with-type-decoded (original-type-name) original-type
	    (if (and (null type-dargs) (null type-prargs))
		(funcall continuation original-type-name do-not-cache)
	      (if type-desc
		  (funcall (flavor:generic with-full-key-for-cache-internal)
			   type-desc continuation expanded-type do-not-cache
			   original-type)
		(standard-full-cache-key-generator continuation type do-not-cache
						   original-type))))))))

(defmethod (with-full-key-for-cache-internal presentation-type-descriptor)
	   (continuation type &optional do-not-cache (original-type type))
  (declare (sys:downward-funarg continuation)
	   (dbg:invisible-frame :presentation-handler-search))
  (if (variable-boundp with-full-cache-key)
      (funcall with-full-cache-key continuation type do-not-cache original-type)
    (if (or (not (variable-boundp with-cache-key))
	    (eql with-cache-key 'standard-cache-key-generator)
	    (eql with-cache-key #'standard-cache-key-generator))
	(standard-full-cache-key-generator continuation type do-not-cache original-type)
      (with-type-decoded (nil data-args pr-args) type
	 (with-type-decoded (original-type-name) original-type
	    (if (null pr-args)
		(labels ((invoke-continuation (key)
			   (funcall continuation key do-not-cache)))
		  (apply with-cache-key #'invoke-continuation original-type-name data-args))
	      (let ((do-not-cache (or do-not-cache
				      (loop for pr in pr-args
					    thereis (consed-in-control-stack pr)))))
		(labels ((add-presentation-args (key-so-far)
			   (declare (sys:downward-function))
			   (labels ((add-presentation-args-body (pr-key)
				      (if (atom key-so-far)
					  (stack-let ((key `((,key-so-far) ,@pr-key)))
					    (funcall continuation key do-not-cache))
					(stack-let ((key `(,key-so-far ,@pr-key)))
					  (funcall continuation key do-not-cache)))))
			     (call-with-one-level-key #'add-presentation-args-body pr-args))))
		  (apply with-cache-key #'add-presentation-args
			 original-type-name data-args)))))))))

(define-type-method-translator 2-make-compatible-with-full-cache-key
			       (function type do-not-cache original-type)
  (ignore type original-type)
  (labels ((fixup-type (key do-not-cache)
	     (declare (dbg:invisible-frame :presentation-handler-search))
	     ;; Substitute in the original type name, as the function should have done.
	     (with-type-decoded (original-type-name) original-type
		(with-type-decoded (nil data-args pr-args) key
		   (stack-let ((new-key `((,original-type-name ,@data-args) ,@pr-args)))
		     (when (null pr-args)
		       (setq new-key (car new-key))
		       (when (null data-args)
			 (setq new-key (car new-key))))
		     (funcall function new-key do-not-cache))))))
    (call-method #'fixup-type type do-not-cache)))

(defmethod (with-cache-key presentation-type-descriptor) (function type-name &rest data-args)
  (declare (dbg:invisible-frame :presentation-handler-search))
  (if (variable-boundp with-cache-key)
      (apply with-cache-key function type-name data-args)
    (if (variable-boundp key-generator)
	(apply key-generator function type-name data-args)
      (if (null data-args)
	  (funcall function type-name)
	(stack-let ((key `(,type-name ,@data-args)))
	  (call-with-one-level-key-cache function key))))))
