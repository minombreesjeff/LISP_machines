;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Typeout windows

(defflavor dynamic-typeout-window () (tv:basic-typeout-window tv:kludge-inferior-mixin
				      dynamic-window)
  (:default-init-plist :margin-components nil :save-bits nil))

(defun-in-flavor (dynamic-handle-mouse-p dynamic-typeout-window) ()
  (multiple-value-bind (x-pos y-pos)
      (tv:sheet-mouse-position self)
    (tv:handle-mouse-p x-pos y-pos)))

(defwhopper (:mouse-motion-pending dynamic-typeout-window) ()
  (if (dynamic-handle-mouse-p)
      (continue-whopper)
      (send-if-handles tv:superior :mouse-motion-pending)))

(defmethod (:still-the-mouse-window dynamic-typeout-window) ()
  (and (tv:sheet-is-mouse-window-p self)
       (dynamic-handle-mouse-p)))

tv:
(defmethod (:still-the-mouse-window window-with-typeout-mixin) ()
  (or (sheet-is-mouse-window-p self)
      (sheet-is-mouse-window-p typeout-window)))

(defwhopper (:update-highlighted-presentation dynamic-typeout-window) (&rest args)
  (if (dynamic-handle-mouse-p)
      (lexpr-continue-whopper args)
      (tv:blinker-set-visibility highlighting-blinker nil)
      (lexpr-send-if-handles tv:superior :update-highlighted-presentation args)))

(defmethod (:turn-off-mouse-highlighting dynamic-typeout-window :after) ()
  (send-if-handles tv:superior :turn-off-mouse-highlighting))

;;; This is necessary to make resizing a window with graphics and text not get confused.
;;; The problem is that resizing deexposes (and then reexposes), which clears the bottom
;;; line state.
(defmethod (:redraw-inside-sets dynamic-typeout-window :before)
	   (&optional (box cursor-viewport) &rest ignore)
  (when (eq box cursor-viewport)
    (tv:reached-bottom)))

(defflavor temporary-dynamic-typeout-window ()
	   (tv:temporary-typeout-window-mixin dynamic-typeout-window))

;;;+++ Following taken from (BASIC-TYPEOUT-WINDOW :EXPOSE-FOR-TYPEOUT), but instead of
;;; homing cursor, rescroll.

;;Expose, but don't clear the screen
(defmethod (:expose-for-typeout dynamic-typeout-window) ()
  ;; This is here so that we don't try to activate ourselves while we are locked,
  ;; so that we don't violate locking order, because activating requires getting
  ;; a lock on our superior
  (send self :activate)

  (unless tv:exposed-p
    (send self :close-current-output-displayed-string)
    (send self :close-secondary-viewport nil)
    (setq tv:cursor-x (tv:sheet-inside-left)	;Quietly home the cursor
	  tv:cursor-y (tv:sheet-inside-top))
    (multiple-value-bind (nil y)
	(letf ((coordinate-transformation-enabled t))
	  (send self :read-cursorpos))
      (setq maximum-y-position (max maximum-y-position y)))
    (set-box-position cursor-viewport 0 maximum-y-position)
    (macrolet ((update-indices (array)
		 (multiple-value-bind (start-index end-index)
		     (viewport-displayed-array-index-names array)
		   ;; These 1-'s are because we might have closed off a string above.
		   ;; Simpler than doing a full computation here.
		   `(setq ,start-index (max 0 (1- (fill-pointer ,array)))
			  ,end-index nil))))
      (update-indices displayed-presentations)
      (update-indices displayed-strings)
      (update-indices displayed-graphics)))

  (send self :expose nil :noop)
  (send self :refresh-margins)

  (unless tv:exposed-p
    ;; If our superior has no screen array, we won't really be exposed.  So wait
    ;; until really exposed to prevent infinite regression
    (process-wait "Typeout Exposed" #'location-contents (locf (tv:sheet-exposed-p self))))

  (let ((superior-scroll-bar (find-margin-component
			       (send-if-handles tv:superior :margin-components)
			       'margin-scroll-bar)))
    (when superior-scroll-bar
      (when (eq (margin-scroll-bar-visibility superior-scroll-bar) :if-requested)
	(setf (margin-scroll-bar-visibility superior-scroll-bar) :temporary-normal))
      (send tv:superior :new-scroll-position)))

  (letf ((coordinate-transformation-enabled t))
    (send self :adjust-cursor-position-and-visibility 0 0))
  (send self :clear-rest-of-line))

;;; Action must take place in an :after daemon, because it wants the
;;; :new-scroll-position to take effect after the superior has regained
;;; control.  Cannot have it in the actual whopper or wrapper body,
;;; because then it would surround the necesary locking from tv:sheet. 
;;; So, we need the combination of methods.
(defwhopper-subst (:deexpose dynamic-typeout-window) (&rest args)
  (let ((*was-exposed* (not (null tv:exposed-p))))
    (declare (special *was-exposed*))
    (lexpr-continue-whopper args)))

(defmethod (:deexpose dynamic-typeout-window :after) (&rest ignore)
  (declare (special *was-exposed*))
  (when *was-exposed*
    (let ((superior-scroll-bar (find-margin-component
				 (send-if-handles tv:superior :margin-components)
				 'margin-scroll-bar)))
      (when superior-scroll-bar
	(when (eq (margin-scroll-bar-visibility superior-scroll-bar) :temporary-normal)
	  (setf (margin-scroll-bar-visibility superior-scroll-bar) :if-requested))
	(send tv:superior :new-scroll-position)))))

(defmethod (:new-scroll-position dynamic-typeout-window :after) ()
  (send-if-handles tv:superior :new-scroll-position))

(defun-in-flavor (clear-rest-of-typeout-window dynamic-typeout-window) ()
  (tv:prepare-sheet (self)
    (tv:sheet-draw-rectangle (tv:sheet-inside-width) (- (tv:sheet-inside-height)
							tv:bottom-reached)
			     (tv:sheet-inside-left) (+ tv:bottom-reached
						       (tv:sheet-inside-top))
			     tv:erase-aluf)
    (tv:reached-bottom)))

;;; Even though :CLEAR-WINDOW turns into :SET-VIEWPORT-POSITION, we need
;;; this to clear before the inherited :BEFORE daemon smashes TV:BOTTOM-REACHED.
(defmethod (:clear-window dynamic-typeout-window :before) (&rest ignore)
  (clear-rest-of-typeout-window))

(defmethod (:set-viewport-position dynamic-typeout-window :before) (&rest ignore)
  (clear-rest-of-typeout-window))

(defmethod (:typeout-window-p dynamic-typeout-window) () t)

(defmethod (:remove-self dynamic-typeout-window) ()
  (send tv:superior :remove-typeout-window))

(defflavor dynamic-window-with-typeout () (tv:window-with-typeout-mixin dynamic-window)
  (:default-init-plist :typeout-window '(dynamic-typeout-window 
					 :deexposed-typeout-action (:expose-for-typeout)
					 :io-buffer nil)))

(defmethod (:init dynamic-window-with-typeout :after) (ignore)
  (send tv:typeout-window :set-io-buffer tv:io-buffer))

(defwhopper (:redraw-inside-sets dynamic-window-with-typeout) (&rest args)
  (unless (send tv:typeout-window :bottom-reached)
    (lexpr-continue-whopper args)))

(defmethod (:remove-typeout-window dynamic-window-with-typeout) ()
  (when (send tv:typeout-window :active-p)
    (let ((br (tv:round-up (+ (send tv:typeout-window :bottom-reached)
			      (send tv:typeout-window :y-offset)
			      tv:*typeout-line-height*
			      1)
			   tv:line-height)))
      (send tv:typeout-window :deactivate)
      (letf ((output-recording-enabled nil)
	     (coordinate-transformation-enabled nil))
	(send self :draw-rectangle (tv:sheet-inside-width) br 0 0 :erase))
      (send self :redisplay-between-cursorposes (box-left cursor-viewport)
						(box-top cursor-viewport)
						(box-right cursor-viewport)
						(min (+ (box-top cursor-viewport) br)
						     (box-bottom cursor-viewport))))))

(defwhopper (:scroll-one-screenful dynamic-window-with-typeout) (&rest args)
  (if (send tv:typeout-window :exposed-p)
      (if (operation-handled-p tv:typeout-window :scroll-one-screenful)
	  (lexpr-send tv:typeout-window :scroll-one-screenful args)
	  (beep))
      (lexpr-continue-whopper args)))

(defflavor dynamic-window-pane () (tv:pane-mixin dynamic-window)
  (:default-init-plist :margin-components `((margin-borders )
					    (margin-white-borders )
					    (margin-label ))
		       :save-bits nil))

(defmethod (:default-expose-bits-action dynamic-window) () :restore)

(defflavor dynamic-window-pane-with-typeout ()
	   (dynamic-window-with-typeout dynamic-window-pane))

;;; In case some kludge is needed on this.
(defflavor dynamic-window-frame () ()
  (:required-flavors tv:basic-frame))

(defvar *lisp-listener-margin-components* *listener-margin-components*)

(defvar *initial-lisp-listener-margin-components*
	*tombstone-borders-with-scroll-bars-margin-components*)

(defflavor dynamic-lisp-listener () (tv:listener-mixin dynamic-window)
  (:default-init-plist :margin-components *lisp-listener-margin-components*))

(defflavor dynamic-lisp-listener-pane () (tv:pane-mixin dynamic-lisp-listener)
  (:documentation :combination "Dynamic lisp listener within a frame"))

(defflavor background-dynamic-lisp-interactor
	((typed-to nil)
	 (background-window-was-exposed nil))
	(tv:listener-mixin-internal dynamic-window)
  (:writable-instance-variables background-window-was-exposed)
  (:default-init-plist :deexposed-typeout-action ':notify
		       :deexposed-typein-action ':notify))

(defmethod (:init background-dynamic-lisp-interactor :before) (plist)
  (setf (getf (location-contents plist) :save-bits) :delayed))

(defmethod (:init background-dynamic-lisp-interactor :after) (ignore)
;--- lambda blows out
;--- old closure is lying around with 147 instead of 138 in mapping table
;--- see patch 364.107
;--- No it's 364.170, which made the flavor smaller
  (setf tv:(io-buffer-input-function io-buffer)
	#'(lambda (ignore thing)
	    (when (characterp thing)
	      (setq typed-to t))
	    thing)))

(defmethod (:set-process background-dynamic-lisp-interactor) (np)
  (setf tv:(io-buffer-last-output-process io-buffer) np)
  (setq typed-to nil)
  (setq tv:process np))

(defmethod (:expose background-dynamic-lisp-interactor :before) (&rest ignore)
  (setq background-window-was-exposed t))

;;; If some action of the background process has caused a real background window
;;; to be allocated, we try to make sure that the user gets a chance to read any
;;; output before we flush the window.  However, if the user has never acknowledged
;;; the background output (i.e. he never exposed the background window), don't force
;;; him to confirm that he has seen the output when the window is about to be deallocated,
;;; since the output isn't there (the background process presumably hung in Output Hold
;;; waiting for the user to expose the window).
;;; Of course, it seems a bit screwy that when the user D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")does0 read the background output
;;; (via Function-0-S), then exposes some other window and then the process goes away,
;;; this code forces him to read the output again and confirm that the window should
;;; go away.  "Fixed in the new activity system"
(defmethod (:wait-until-seen background-dynamic-lisp-interactor) ()
  (when background-window-was-exposed
    (unless typed-to
      (format self "~2&Type any character to get rid of this window: ")
      (read-character self)))
  ;; If we have typed out since we were selected last, then wait until we get seen.
  (when (member self tv:background-interesting-windows)
    (process-wait "Wait Until Seen" #'(lambda (s) (not (member s tv:background-interesting-windows)))
			 self)
    ;; Then wait until we are deselected
    (process-wait "No Longer Seen" #'(lambda (s) (neq s tv:selected-window)) self)))

(defun initialize-dynamic-window (window)
  ;; History is cleared at deinitialize time
  (tv:sheet-validate-deactivated-screen-array window)
  (send window :set-end-of-page-mode :default)
  (send window :set-scroll-factor nil)
  (send window :set-mouse-blinker-character #\Mouse:nw-arrow)
  (send window :set-default-character-style
	(send (send window :screen) :default-character-style))
  (send window :set-more-p nil))

(defun deinitialize-dynamic-window (window)
  ;; Don't thwart the GC by hanging on to stuff
  (send window :clear-history))

(defflavor dynamic-window-resource-typeout-mixin ()
	   (tv:window-with-typeout-mixin)
  (:default-init-plist :typeout-window '(dynamic-typeout-window 
					 :deexposed-typeout-action (:expose-for-typeout)
					 :io-buffer nil)))

(defmethod (:initialize dynamic-window-resource-typeout-mixin :after) ()
  (initialize-dynamic-window tv:typeout-window))

(defmethod (:deinitialize dynamic-window-resource-typeout-mixin :after) ()
  (deinitialize-dynamic-window tv:typeout-window))

(defwhopper (:scroll-one-screenful dynamic-window-resource-typeout-mixin) (&rest args)
  (if (send tv:typeout-window :exposed-p)
      (if (operation-handled-p tv:typeout-window :scroll-one-screenful)
	  (lexpr-send tv:typeout-window :scroll-one-screenful args)
	  (beep))
      (lexpr-continue-whopper args)))

(defflavor dynamic-window-resource () (dynamic-window)
  (:init-keywords :temporary-p :momentary-p :hysteresis :typeout-window-p)
  (:default-init-plist :save-bits :delayed)
  (:mixture
   (:typeout-window-p dynamic-window-resource-typeout-mixin)
   (:momentary-p momentary-window-mixin)
   (:temporary-p tv:temporary-window-mixin)
   (:hysteresis (nil nil) (otherwise tv:hysteretic-window-mixin)))
  )

(defmethod (:initialize dynamic-window-resource) ()
  (initialize-dynamic-window self)
  nil)

(defmethod (:deinitialize dynamic-window-resource) ()
  (deinitialize-dynamic-window self))

;;; :mixture doesn't seem to inherit, so build this flavor from
;;; scratch
(defflavor dynamic-menu-resource
	(menu-program
	 (alias-for-selected-windows nil))
	(dynamic-window)
  (:init-keywords :temporary-p :momentary-p :hysteresis)
  (:mixture
   (:momentary-p momentary-window-mixin)
   (:temporary-p tv:temporary-window-mixin)
   (:hysteresis (nil nil) (otherwise tv:hysteretic-window-mixin)))
  (:initable-instance-variables menu-program)
  (:writable-instance-variables menu-program))

(defwhopper-subst (:alias-for-selected-windows dynamic-menu-resource) ()
  (or alias-for-selected-windows (continue-whopper)))

(defmethod (:set-alias-for-selected-windows dynamic-menu-resource) (window)
  (setq alias-for-selected-windows window))

;;; --- didn't really save much over initialize-dynamic-window, so maybe
;;; we should merge them
(defun initialize-dynamic-menu (window)
  ;; history is cleared at deinitialize time
  (tv:sheet-validate-deactivated-screen-array window)
  (send window :set-alias-for-selected-windows nil)
  (send window :set-mouse-blinker-character #\Mouse:nw-arrow)
  (send window :set-label `(:string ""
			    ;; Must be fully specified; should this be JESS also?
			    :style ,(tv:screen-default-style (tv:sheet-screen window)))))

(defun deinitialize-dynamic-menu (window)
  ;; Don't thwart the GC by hanging on to stuff
  ;; (also, the history is probably paged in now)
  (send window :clear-history))
