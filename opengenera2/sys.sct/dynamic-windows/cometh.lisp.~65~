;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(compile-flavor-methods displayed-presentation text-displayed-presentation null-presentation
			displayed-string
			viewport)

(compile-flavor-methods simulated-presentation)

(compile-flavor-methods margin-white-borders margin-borders margin-asymmetrical-borders
			margin-ragged-borders margin-drop-shadow-borders
			margin-whitespace margin-pattern
			margin-label margin-scroll-bar margin-ruler)

(compile-flavor-methods dynamic-window dynamic-lisp-listener dynamic-lisp-listener-pane
			dynamic-typeout-window temporary-dynamic-typeout-window
			dynamic-window-with-typeout dynamic-window-resource
			dynamic-menu-resource
			dynamic-window-pane dynamic-window-pane-with-typeout
			background-dynamic-lisp-interactor)

(tv:add-select-key #\L 'tv:listener-mixin "Lisp" 'dynamic-lisp-listener)
(tv:add-activity-to-system-menu-programs-column "Lisp")

(tv:defwindow-resource dynamic-window (&key (momentary-p nil)
					    (temporary-p momentary-p)
					    (hysteresis (and momentary-p 25))
					    (blinker-p nil)
					    (typeout-window-p nil)
					    (margin-components
					      (if temporary-p
						  *drop-shadow-and-outside-box-label-margin-components*
						  *standard-margin-components*)))
  :make-window (dynamic-window-resource
		 :temporary-p temporary-p
		 :momentary-p momentary-p
		 :hysteresis hysteresis
		 :blinker-p blinker-p
		 :typeout-window-p typeout-window-p
		 :margin-components margin-components)
  :initializer (send object :initialize)
  :deinitializer (send object :deinitialize)
  :reusable-when :deactivated
  :initial-copies 0)				D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");We'll preallocate this resource ourself.

0(defvar *default-menu-character-style* (si:parse-character-style '(:jess :roman :large)))

(tv:defwindow-resource dynamic-menu (&key (momentary-p nil)
					  (temporary-p momentary-p))
  :make-window (dynamic-menu-resource
		 :menu-program (make-program 'menu-program)
		 :temporary-p temporary-p
		 :momentary-p momentary-p
		 :hysteresis (and momentary-p 25)
		 :blinker-p nil
		 :more-p nil
		 ;; ---does this same style work for all screens?
		 :default-character-style *default-menu-character-style*
		 :margin-components
		 *menu-choose-margin-choices*)
  :initializer (initialize-dynamic-menu object)
  :deinitializer (deinitialize-dynamic-menu object)
  :initial-copies 0
  ;; Damm.  I don't want this thing to be checking locks at all.
  ;; If the window is free in the resource, use it!
  ;; :deexposed seems marginally better than :deactivated, since
  ;; we don't have to fault in and search the inferiors of main-screen.
  ;; Of course, any page faults we save here will probably be taken anyway
  ;; in a second when we finally expose the menu...
  :reusable-when :deexposed)


(compile-flavor-methods graphics::drawing-state
			graphics::raster-drawing-state graphics::binary-drawing-state)

(compile-flavor-methods pixel-width-stream filling-stream indenting-stream line-column-stream
			redisplay-piece table-redisplay-piece-table table-redisplay-piece-menu
			table-redisplay-piece-row table-redisplay-piece-column-headings
			table-redisplay-piece-column table-redisplay-piece-cell menu-geometry
			redisplay-helper-stream abbreviated-output-stream
			set-cursorpos-simulating-stream line-buffering-stream
			line-width-table-replaying-stream new-coordinates-stream
			simulated-presentation-recording-stream underlining-stream
			graphics::binary-graphics-stream)

(defresource pixel-width-stream (&key (stream *standard-output*)
				      (line-width-table nil))
  :matcher true
  :constructor (make-instance 'pixel-width-stream
			      :stream stream :line-width-table line-width-table)
  :initializer (send object :reset :stream stream
				   :line-width-table line-width-table))

(defresource set-cursorpos-simulating-stream (stream)
  :constructor (make-instance 'set-cursorpos-simulating-stream)
  :matcher true
  :initializer (send object :initialize stream))

(defresource line-buffering-stream (stream)
  :constructor (make-instance 'line-buffering-stream)
  :matcher true
  :initializer (send object :initialize stream))

(defresource simulated-presentation-recording-stream ()
  :constructor (make-instance 'simulated-presentation-recording-stream)
  :initial-copies 0)

(defresource graphics::binary-graphics-stream ()
  :constructor (make-instance 'graphics::binary-graphics-stream))

(defresource new-coordinates-stream ()
  :constructor (make-instance 'new-coordinates-stream))

1;;; List of resources that we preallocate before GC or disk save --
;;;    Each element is of the form 0(resource-name . options)1.  Any occurrence of (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB").superior.
1;;;    in the options is replaced by the actual main screen object before preallocation.
0(defparameter *common-resource-initializations*
  '((dynamic-window .superior.)			1;Vanilla DW resource.
0    (dynamic-window .superior. :momentary-p t)	1;Momentary DW resource.
0    (dynamic-window .superior. :temporary-p t :blinker-p t)	1;Used by 0Converse1.
0    (dynamic-menu .superior. :momentary-p t :temporary-p t)
    (program-frame 'accept-values .superior. :temporary-p t :process nil)
    (dynamic-window .superior. :temporary-p t :blinker-p nil)	1;Help window for AVV windows.
0    (dynamic-window .superior.			;Function F and H.
		    :margin-components *ragged-borders-label-and-scroll-bars-margin-components*
		    :blinker-p t)
    ))

1;;; List of common context/presentation type/object type triples --
;;;    These triples always appear in the 2*presentation-context-mouse-handlers-cache*1 as
;;;    they are generated by typing simple CP commands or moving the mouse over an editor
;;;    buffer or over the output of 0List Buffers1 (0c-X c-B1) in the editor.  So, we'll
;;;    prefill the cache with the entries generated by these triples to make life a little
;;;    faster after booting.
;;;
0;;;    2*common-context-object-and-displayed-types*0 is a tree structure, with
;;;    the top-level list being an alist from context types.  The 2second0 element
;;;    of each bucket is a name describing the bucket.  The 2cddr0 of these
;;;    buckets is a list of shared sublists, for storage efficiency.  Each
;;;    shared sublist is an alist from object types to multiple displayed types.
1;;;
;;;    Note -- We can't setup this list until the CP is loaded and the default command
;;;    table has been initialized.

0(defvar *common-context-object-and-displayed-types* nil)

(defun make-common-context-object-and-displayed-types ()
  ;; 2si:input-editor0 and 2nil0 contexts are assumed for all types.
  (let* ((ll-context `(((cp:command-or-form :command-table ,cp:*command-table*
					    :dispatch-mode :command-preferred)
			:environment nil :expression-reader nil :expression-printer nil)
		       ((cp:command-or-form :command-table ,cp:*command-table*
					    :dispatch-mode :form-preferred)
			:environment nil :expression-reader nil :expression-printer nil)
		       ;; Nobody uses 2:form-only0 or 2:command-only0; they didn't even work
		       ;; until a couple days ago.
		       ((sys:form)
			:environment nil :expression-reader nil :expression-printer nil)
		       (cp:command :command-table ,cp:*command-table*)))
	 (debugger-context `((or ((or form
				      ((cp:command :command-table
						   ,(cp:find-command-table "Lisp-Debugger")))))
				 si:input-editor)
			     (cp:command-or-form :command-table
						 ,(cp:find-command-table "Lisp-Debugger")
						 :dispatch-mode :form-preferred)
			     (cp:command-name :command-table
					      ,(cp:find-command-table "Lisp-Debugger"))
			     cp:command))
	 (macro-expand-context '(si:non-simple-form))
	 (avv-context `((cp:command :command-table ,(cp:find-command-table "ACCEPT-VALUES"))
			(cp:command-name :command-table
					 ,(cp:find-command-table "ACCEPT-VALUES"))))
	 (menu-context `((cp:command :command-table ,(cp:find-command-table "MENU-PROGRAM"))
			 (cp:command-name :command-table
					  ,(cp:find-command-table "MENU-PROGRAM"))))
	 (command-arguments `(in-band-menu pathname (sequence pathname)
					   si:several-strings package
					   boolean inverted-boolean))
	 (ed-context `((or zwei:presentation-command si:input-editor)
		       zwei:buffer
		       (or (function-spec :defined-p :any) generic-function-name)))
	 (ddex-context `((or (cp:command :command-table ,(cp:find-command-table "DOC-EX"))
			     si:input-editor)
			 dw::window-wakeup-redisplay))
	 (lispy `(,@ll-context ,@command-arguments ,@debugger-context))
	 (non-lispy `(,@ed-context ,@avv-context ,@menu-context ,@ddex-context))
	 (everything `(,@lispy ,@non-lispy))
	 (name-alist `(("Lisp Listener contexts" ,@ll-context)
		       ("Command argument contexts" ,@command-arguments)
		       ("Debugger contexts" ,@debugger-context)
		       ("Macro Expand contexts" ,@macro-expand-context)
		       ("Editor contexts" ,@ed-context)
		       ("Accept Variable Values contexts" ,@avv-context)
		       ("Menu contexts" ,@menu-context)
		       ("Document examinor contexts" ,@ddex-context)))
	 (tree
	   `((,everything
	      (null no-type)
	      (null graphics)
	      (cons raw-text))

	     (,ll-context
	      ;; Actual types found on initial window
	      ((fs:fep-pathname expression pathname fs:fep-pathname)
	       (com-show-file (xxx)) (com-load-file (xxx)) (describe xxx))
	      (fs:lmfs-pathname pathname)
	      (fs:logical-pathname pathname)
	      (fs:vms4-pathname pathname fs:vms4-pathname)
	      (fs:unix4-2-pathname pathname fs:unix4-2-pathname)
	      (sct:system sct:system)
	      (fixnum expression)
	      (symbol expression)
	      (cons cp:command)
	      (symbol ((cp:command-name :command-table ,cp:*command-table*)))
	      (redisplay-piece redisplay-structure)
	      (cons replayable-output)
	      (cons si:pseudo-command)
	      (dynamic-lisp-listener expression)
	      (neti:site neti:site)
	      (fs:lispm-host fs:lispm-host)
	      (cons ,@ll-context))
	  
	     (,lispy
	      ;; Common types
	      (fs:lmfs-pathname expression pathname fs:lmfs-pathname fs:directory-pathname)
	      (fs:logical-pathname expression pathname fs:logical-pathname
				   fs:directory-pathname)
	      (fs:unix4-2-pathname expression pathname fs:unix4-2-pathname
				   fs:directory-pathname)
	      (fs:vms4-pathname expression pathname fs:vms4-pathname fs:directory-pathname)
	      (string string expression)
	      (symbol boolean expression form function flavor:flavor-name
		      generic-function-name)
	      (fixnum expression form)
	      (cons expression function form)
	      (null expression form boolean)
	      #|  ;; Not that common
	      (single-float single-float float number expression form)
	      (double-float double-float float number expression form)
	      (bignum bignum integer rational number expression form)
	      (complex complex number expression form)
	      (ratio ratio rational number expression form)
	      (character character expression form)
              |#
	      (compiled-function function expression form)
	      (lexical-closure function expression form)
	      (locative expression dbg:named-locative-slot)
	      (cons dbg:named-form-slot stack-frame)
	      (array expression)
	      (sage:record-group sage:record-group)
	      (cons sage:record-group-name))

	     (,macro-expand-context
	      ;; Common types to see in a 2mexp0 loop.
	      (string expression)
	      (symbol expression)
	      (fixnum expression)
	      (cons expression)
	      (null expression))

	     (,ed-context
	      ;; Common types, trimmed for the editor, which doesn't see them as much.
	      (fs:lmfs-pathname pathname fs:lmfs-pathname fs:directory-pathname)
	      (fs:logical-pathname pathname fs:logical-pathname fs:directory-pathname)
	      (fs:unix4-2-pathname pathname fs:unix4-2-pathname fs:directory-pathname)
	      (fs:vms4-pathname pathname fs:vms4-pathname fs:directory-pathname)
	      (string string expression code-fragment)
	      (symbol boolean expression code-fragment function)
	      (fixnum code-fragment)
	      (cons expression function code-fragment)
	      (null boolean code-fragment)
	      #|  ;; Not that common
	      (single-float float number expression form)
	      (double-float float number expression form)
	      (bignum integer rational number expression form)
	      (complex number expression form)
	      (ratio rational number expression form)
	      (character expression form)
              |#
	      (compiled-function function)
	      (lexical-closure function)
	      (locative dbg:named-locative-slot)
	      (cons dbg:named-form-slot)
	      (sage:record-group sage:record-group)
	      (cons sage:record-group-name))

	     (,ed-context
	      ;; Editor types
	      (cons zwei:bp)
	      (cons zwei:change-history-element)
	      (zwei:non-file-buffer zwei:non-file-buffer)
	      (zwei:file-buffer zwei:file-buffer)
	      (zwei:definitions-editing-buffer zwei:definitions-editing-buffer)
	      (zwei:callers-of-functions-editing-buffer
		zwei:callers-of-functions-editing-buffer))

	     ;; Fairly self-contained.
	     (,ddex-context
	      (sage:record-group sage:record-group)
	      (cons sage:record-group-name)
	      (ddex::ddex-item ddex::bookmark)))))
    (setq *common-context-object-and-displayed-types*
	  (block outer
	    (loop with context-buckets
		  for (contexts . display-pairs) in tree
		  do
	      (setq display-pairs (copy-tree display-pairs permanent-storage-area))
	      (loop for context in contexts
		    for bucket = (assoc context context-buckets)
		    unless bucket
		      do (setq bucket
			       (list* (list context
					    (car (rassoc context name-alist :test #'member)))
				      nil)
			       context-buckets (nconc context-buckets (list* bucket nil)))
			 (unless (second (car bucket))
			   (error "The bucket ~S has no name." bucket))
		    do
		(setf bucket (nconc bucket (list* display-pairs nil))))
		  finally
		    (labels ((name-alist-lessp (x y)
			       (< (position x name-alist :key #'car)
				  (position y name-alist :key #'car)))
			     (bucket-name (bucket)
			       (second (car bucket))))
		      (setq context-buckets
			    (stable-sort context-buckets #'name-alist-lessp
					 :key #'bucket-name)))
		    (return-from outer
		      (copy-list
			(loop for bucket in context-buckets
			      collect (copy-list bucket permanent-storage-area))
			permanent-storage-area)))))))

1;;; List of commonly used presentation types whose parsers and/or printers are prefetched.
;;; 
;;;    Each element of this list is of the form 0(presentation-type &key (parser t) (printer t)
;;;									no-default)
1;;;
;;;    Note -- We can't setup this list until the CP is loaded and the default command
;;;    table has been initialized.
0(defvar *common-presentation-types* nil)
(defun make-common-presentation-types ()
  (let ((ll-context `((cp:command-or-form :command-table ,cp:*command-table*
					  :dispatch-mode :command-preferred)
		      :environment nil :expression-reader nil :expression-printer nil))
	(command-context `((cp:command :command-table ,cp:*command-table*)))
	(command-name-context `((cp:command-name :command-table ,cp:*command-table*)
				:complete-activates t))
	(avv-context `((cp:command :command-table ,(cp:find-command-table "ACCEPT-VALUES"))))
	(menu-context `((cp:command :command-table ,(cp:find-command-table "MENU-PROGRAM"))))
	(debugger-context `((or ((or form
                                     ((cp:command :command-table
						  ,(cp:find-command-table "Lisp-Debugger")))))
                                si:input-editor))))
    (copy-tree
      `((,ll-context :no-default t)
	(,command-context :no-default t)
	(,command-name-context :no-default t)
	(,avv-context :no-default t)
	(,menu-context :no-default t)
	(,debugger-context :no-default t)
	(((sys:form) :environment nil :expression-reader nil :expression-printer nil))
	(((pathname) :direction :read :dont-merge-default nil))
	(pathname)
	(string)
	(((sequence pathname)))
	((sequence ((pathname) :default-version :newest)))
	(fs:directory-pathname :parser nil)
	(((zwei:buffer) :create-p :if-forced))
	(zwei:presentation-command :parser nil)
	(zwei:buffer :parser nil)
	(zwei:file-buffer :parser nil)
	(zwei:non-file-buffer :parser nil)
	(zwei:modified-sections-buffer :parser nil)
	(zwei:source-compare-buffer :parser nil)
	(zwei:definitions-editing-buffer :parser nil)
	(zwei:callers-of-functions-editing-buffer :parser nil)
	(zwei:duplicate-sections-buffer :parser nil))
      permanent-storage-area)))

1;;; The function that actually prefills the caches.
0;;; This wants to be trimed down and made to call my new stuff.
(defun prefill-caches (&optional before-cold)
  (si:inhibit-lengthy-background-updates
    (without-interrupts 
      (loop while *type-handler-tables-update-process*	1;Wait for it.
0	    do 
	(setf (process-priority *type-handler-tables-update-process*) 0)
	(process-wait "Finish handler table fill"
	  (lambda () (null *type-handler-tables-update-process*)))))
    (without-interrupts
      (unwind-protect
	  (loop while *background-update-queue*
		do
	    (setf (process-priority *type-background-process*) 0)
	    (process-wait "Finish type updates"
	      (lambda () (null *background-update-queue*))))
	(setf (process-priority *type-background-process*) -1))
      (when before-cold
	(with-good-lock (*background-process-lock* :write)
	  (process-flush *type-background-process*))))
    (unless *update-types-incrementally*
      (loop until (eql *type-handler-tables-valid-tick* *type-tick*)
	    do (update-handler-tables-immediately)))
    (unless (null tv:main-screen)
      (loop for (resource-name . options) in *common-resource-initializations* do
	(deallocate-resource resource-name
			     (apply #'allocate-resource resource-name
				    (loop for value in options
					  collect (if (eq value '.superior.)
						      tv:main-screen
						      (eval value)))))))))

;;; Resource 2dw::funny-encache-stream0:  A resource of streams that just call a
;;;   function (with no args) when you do I/O on them.  This allows you to poke
;;;   around at the dynamic environment of potential I/O to find what contexts
;;;   are really involved, and to force encaching of all type methods involved.

(defflavor funny-encache-stream (function)
	   (si:interactive-stream si:bidirectional-stream)
  :initable-instance-variables
  :writable-instance-variables)

(defmethod (:tyi funny-encache-stream) (&optional ignore)
  (funcall function))

(defmethod (:tyo funny-encache-stream) (ch &rest ignore)
  (ignore ch)
  (funcall function))

(defmethod (si:input-editor-replace-input funny-encache-stream) (&rest ignore)
  (funcall function))

(defmethod (si:input-editor-display-help funny-encache-stream) (&rest ignore)
  (funcall function))

(defmethod (si:input-editor-tyi funny-encache-stream) (&rest ignore)
  (funcall function))

(defmethod (:name funny-encache-stream) ()
  "FUNNY-ENCACHE-STREAM")

(defmethod (:read-cursorpos funny-encache-stream) ()
  0 0)

(defmethod (:set-cursorpos funny-encache-stream) ()
  0 0)

(compile-flavor-methods funny-encache-stream)

(defresource funny-encache-stream ()
  :constructor (make-instance 'funny-encache-stream)
  :deinitializer (setf (funny-encache-stream-function object) nil))

(defun encache-common-presentation-types ()
  (tv:noting-progress ("Encaching type handlers and methods")
    (unless  *common-context-object-and-displayed-types*
      (setq *common-context-object-and-displayed-types*
	    (make-common-context-object-and-displayed-types)))
    (labels ((check-type-tick ()
	       (unless (eql *type-tick* *type-handler-tables-valid-tick*)
		 (return-from encache-common-presentation-types)))
	     (compute-major-type-name (major-type)
	       (loop with type = major-type
		     do
		 (with-type-decoded (type-name data-args) type
		    (if (member type-name '(or and))
			(setq type (first data-args))
		      (return type-name))))))
      (let ((total (+ (reduce #'+ (mapcar (lambda (l) (reduce #'+ (mapcar #'length (cdr l))))
					  *common-context-object-and-displayed-types*))
		      (length *common-presentation-types*)))
	    (count 0)
	    (progress-string))
	
	(loop for ((accept-type description) . type-pair-lists)
		  in *common-context-object-and-displayed-types*
	      do
	  (setq progress-string
		(string-append
		  "Encaching:  " description " (" (compute-major-type-name accept-type) ))
	  (tv:note-progress count total)
	  (incf count (reduce #'+ (mapcar #'length type-pair-lists)))
	  (labels ((map-over-subcontexts (&optional (throw-p t))
		     (loop for context = *presentation-input-context*
				       then (presentation-input-context-superior context)
			   for context-type = (presentation-input-context-presentation-type
						context)
			   for inner-progress-string =
			       (if (fringe-eql context-type accept-type)
				   progress-string
				 (string-append
				   progress-string "/" (compute-major-type-name context-type)))
			   do
		       (loop for type-pair-list in type-pair-lists
			     do
			 (loop for (object-type . displayed-types)
				   in type-pair-list
			       do
			   (loop for displayed-type in displayed-types
				 do
			     (check-type-tick)
			     (tv:alter-progress-note-text
			       (string-append inner-progress-string "  "
					      (presentation-type-name object-type) ", "
					      (presentation-type-name displayed-type)
					      ")"))
			     (presentation-context-mouse-handlers object-type displayed-type
								  context)
			     (check-type-tick)
			     (stack-let ((ieb-context
					   `(si:input-editor nil nil)))
			       (presentation-context-mouse-handlers object-type displayed-type
								    ieb-context)))))
			     while context)
		       (when throw-p
			 (throw 'punt nil))))	;I.e. we just hacked 2nil0 as a context.
	    (let ((parser-p
		    (with-type-method ((ignore parser) accept-type
				       #'presentation-type-find-parser :error-p nil)
		      (when parser t))))
	      (if (not parser-p)
		  (with-presentation-input-context (accept-type) ()
		       (map-over-subcontexts nil))
		(check-type-tick)
		(using-resource (stream funny-encache-stream)
		  (setf (funny-encache-stream-function stream) #'map-over-subcontexts)
		  (catch 'punt
		    (let ((*signal-parse-error-on-missing-type-methods* t))
		      (accept accept-type :stream stream
			      :provide-default nil :prompt nil))))))))
	(tv:alter-progress-note-text "Encaching:  Type methods")
	(labels ((encache-type-methods (punting-stream presentation-type
						       &key (printer t) (parser t)
						       (no-default (not parser)))
		  (check-type-tick)
		   (tv:alter-progress-note-text
		     (string-append "Encaching type methods:  "
				    (compute-major-type-name presentation-type)))
		   (when parser
		     (catch 'punt
		       (apply #'accept presentation-type
			      :stream punting-stream
			      :prompt nil
			      (when no-default
				'(:provide-default nil))))
		     (check-type-tick)
		     (let ((*standard-output* punting-stream))
		       (catch 'punt
			 (describe-presentation-type presentation-type 'null-stream))))
		   (when printer
		     (check-type-tick)
		     ;; No object, we can't just call 2present0, we have to do the work ourself.
		     (with-type-method ((type meth) presentation-type
					#'presentation-type-find-printer)
		       (ignore type meth))))
		 (punt-io ()
		   (throw 'punt nil)))
	  (using-resource (punting-stream funny-encache-stream)
	    (setf (funny-encache-stream-function punting-stream) #'punt-io)
	    (loop for spec in (or *common-presentation-types*
				  (setq *common-presentation-types*
					(make-common-presentation-types)))
		  do
	      (check-type-tick)
	      (tv:note-progress count total)
	      (incf count)
	      (apply #'encache-type-methods punting-stream spec))))))))


(add-initialization "Prefill DW caches" '(prefill-caches t) '(:before-cold))

(si:define-gc-optimization prefill-caches :layered-ids-release
  (:documentation "Prefill dynamic-window caches")
  (:before-flip (ignore)
    (prefill-caches)))
