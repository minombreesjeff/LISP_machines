;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains the portions of FORMATTED-OUTPUT that have to be loaded
;;; early in the world-building process because they get called (for non-window
;;; streams) before the static and dynamic window systems get loaded.
;;; This is mostly run-time routines that support macros defined in FORMATTED-OUTPUT.
;;; Nothing in this file can depend explicitly on windows or flavors.


(defun with-underlining-internal (stream continuation &key (underline-whitespace t))
  (cond ((not (operation-handled-p stream :underline-between-cursorposes))
	 (funcall continuation stream))
	(underline-whitespace
	 (with-underlining-internal-1 (stream)
	   (funcall continuation stream)))
	(t
	 (let ((xstream (make-instance 'underlining-stream :stream stream)))
	   (funcall continuation xstream)))))

;;; Takes the components of style separately
(defun with-style-internal (stream 1st 2nd 3rd bind-line-height continuation arg)
  (if (and (null 1st) (null 2nd) (null 3rd))
      (funcall continuation arg)
      (with-stack-list (style 1st 2nd 3rd)
	(send stream :with-character-style style continuation arg bind-line-height))))

;;; Takes a style
(defun with-style-internal-1 (stream style bind-line-height continuation arg)
  (if (or (null style) (eq style si:*null-style*))
      (funcall continuation arg)
      (send stream :with-character-style style continuation arg bind-line-height)))

(defun format-textual-list (sequence function &rest args
			    &key (separator ", ") finally if-two
			    filled fill-column after-line-break conjunction
			    (stream *standard-output*))
  (declare (sys:downward-funarg function))
  separator finally if-two filled fill-column after-line-break conjunction
  (apply
    #'formatting-textual-list-1
    stream
    (lambda (stream)
      (map nil
	      (lambda (e)
		(enqueue-formatting-textual-list-element
		  stream
		  (lambda (stream) (funcall function e stream))))
	      sequence))
    args))

(defun formatting-textual-list-1 (stream continuation &key (separator ", ") finally if-two
				  (filled nil filled-supplied) fill-column
				  after-line-break conjunction
				  &allow-other-keys)
  (let ((queue ())
	(number-in-queue 0)
	(number-printed 0)
	(separator-before nil)
	(separator-actual separator)
	(separator-after nil))
    (when (and after-line-break (not filled-supplied))
      (setq filled t))
    (when filled
      (if (eq filled :before)
	  (let ((before (string-search-not-char #\Space separator)))
	    (unless (zerop before)
	      (setq separator-before (substring separator 0 before)
		    separator-actual (if before (substring separator before) ""))))
	  (let ((after (string-search-not-char #\Space separator :from-end t)))
	    (setq separator-actual (substring separator 0 (and after (1+ after)))
		  separator-after (if after (substring separator (1+ after)) "")))))
    (labels ((print-one (stream continuation &optional special-separator)
	       (when (plusp number-printed)
		 (if special-separator
		     (write-string special-separator stream)
		   (when separator-before
		     (send stream :conditional-string-out separator-before))
		   (write-string separator-actual stream)
		   (when separator-after
		     (send stream :conditional-string-out separator-after))))
	       (funcall continuation stream)
	       (incf number-printed))
	     (enqueue (continuation stream)
	       (if (not (or finally if-two conjunction))
		   (print-one stream continuation)
		 (setq queue (nconc queue (ncons continuation)))
		 (incf number-in-queue)
		 (loop while (> number-in-queue 2) doing
		   (print-one stream (pop queue))
		   (decf number-in-queue))))
	     (do-it (stream)
	       (multiple-value-prog1
		 (let ((*enqueue-function* #'enqueue))
		   (funcall continuation stream))
		 (let ((twocase (= (+ number-printed number-in-queue) 2)))
		   (when (and twocase conjunction (null if-two))
		     (setq if-two (string-append #\Space conjunction #\Space)))
		   (if (and if-two twocase)
		       (dolist (continuation queue)
			 (print-one stream continuation if-two))
		     (when (and (null finally) conjunction)
		       (setq finally (string-append separator conjunction #\Space)))
		     (loop while queue doing
		       (print-one stream
				  (pop queue)
				  (or (and (null queue) finally) separator))))))))
      (if (and filled
	       ;; This test is for the benefit of world building
	       (get 'filling-stream 'flavor:flavor))
	  (filling-output
	      (stream :fill-on-spaces nil :fill-column fill-column
		      :after-line-break after-line-break)
	    (do-it stream))
	(do-it stream)))))

(defun enqueue-formatting-textual-list-element (stream continuation)
  (funcall *enqueue-function* continuation stream))
