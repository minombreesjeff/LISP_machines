;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This hacks all cases of number, by inheritance.

(defun get-number-type-word-and-article (type)
  (let* ((type-name (string-downcase (presentation-type-name type)))
	 (article (if (eq (string-a-or-an type-name nil nil) :an) "an " "a ")))
    (values type-name article)))

(defun read-number-internal (stream type original-type &key base)
  (let ((val (flet ((parse-internal ()
		      (let ((token (read-standard-token stream)))
			(condition-case (parsed index)
			     (let ((package *package*))
			       (with-standard-io-environment
				 (let ((*package* package)
				       (*read-base* (or base *read-base*)))
				   (read-from-string token))))
			   (error )
			   (:no-error
			     (when (= index (string-length token))
			       (cond ((typep parsed type)
				      (return-from parse-internal
					parsed))
				     ((typep parsed '(and number (not complex)))
				      (return-from parse-internal
					(coerce parsed type)))))))
			(error 'input-not-of-required-type
			       :string token
			       :type original-type))))
	       (if (eq type 'number)
		   (parse-internal)
		   (with-presentation-input-context ('((and number ((not complex))))
						     :stream stream)
						    (blip)
			(parse-internal)
		      (number
			(setf (presentation-blip-object blip)
			      (coerce (presentation-blip-object blip) type))
			(echo-presentation-blip stream blip)
			(presentation-blip-object blip)))))))
    (unless (ptypep val original-type)
      (error 'object-parsed-not-of-type
	     :object val :write-keywords (and base `(:base ,base))
	     :type original-type))
    (values val original-type)))

(defun describe-number-type (stream range-low range-high plural-count original-type
			     base base-given &optional modulus &aux (bbase base))
  (multiple-value-bind (word article)
      (get-number-type-word-and-article original-type)

    (unless base-given
      (setq bbase nil))

    (let-if base-given
	    ((*print-base* base))
		   
      (setq article
	    (case plural-count
	      ((nil) (cond ((member bbase '(2 10 16)) "a ")
			   ((eql bbase 8) "an ")
			   (bbase "a ")
			   (t article)))
	      ((t) "")
	      (otherwise
		(if (numberp plural-count)
		    (format nil "~R " plural-count)
		  (string-append plural-count #\Space)))))
		   
      (cli::print-number-type-description
	(string-append
	  article

	  (if base-given
	      (case base
		(2 "binary ")
		(8 "octal ")
		(10 "decimal ")
		(16 "hexadecimal ")
		(otherwise (format nil "base ~D~:[.~] " base ( base 10))))
	    "")

	  (if (null plural-count)
	      word
	    (selector word string-equal
	      ("fixnum" "fixna")
	      ("bignum" "bigna")
	      (otherwise (string-pluralize word)))))

	stream
	(or range-low '*)
	(or range-high '*)
	modulus))))

(define-presentation-type number ((&optional range-low range-high)
				  &key (base 10. base-given) (radix nil)
				  (exact-float-value nil))
   :no-deftype t

   :parser ((stream &key original-type)
	    (read-number-internal stream 'number original-type :base base))

   :printer ((number stream)
	     (write number :stream stream :base base :radix radix
		    :exact-float-value exact-float-value))

   :viewspec-choices ((&key type)
		      (presentation-type-keyword-options-into-cvv
			type
			`((:base integer 10.)
			  (:radix boolean nil))))

   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     base base-given))

   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2))
   :typep ((number)
	   ;; We seem to have to avoid the CL type system at all costs,
	   ;; Especially when we will be replacing it with this.
	   (and (numberp number)
		(or (null range-low)
		    (eq range-low '*)
		    (if (consp range-low)
			(< (first range-low) number)
		      ( range-low number)))
		(or (null range-high)
		    (eq range-high '*)
		    (if (consp range-high)
			(< number (first range-high))
		      ( number range-high)))))

   :map-over-supertypes
     ((function predicate &key predicate-p type keys-seen)
      (let ((predicate (if (or (not predicate-p)
			       (eq predicate #'zl:rationalp)		;Ratio
			       (eq predicate #'integerp)
			       (eq predicate #'fixnump)
			       (eq predicate #'si:bignump)
			       (eq predicate #'rationalp)
			       (eq predicate #'floatp)
			       (eq predicate #'single-float-p)
			       (eq predicate #'double-float-p)
			       (eq predicate #'complexp))
			   predicate
			 (merge-predicates #'numberp predicate))))
	(with-type-decoded (nil nil pr-args) type
	  (unless (already-seen-p 'expression keys-seen)
	    (merge-meta-args 'expression pr-args function 'expression predicate)))))

   :with-cache-key
     ((function original-type-name)
      (stack-let ((type-1 `(,original-type-name ,range-low ,range-high))
		  (type-2 `(,original-type-name ,range-low)))
	(cond ((and (eq range-low '*)
		    (eq range-high '*))
	       (funcall function original-type-name))
	      ((eq range-high '*)
	       (funcall function type-2))
	      (t (funcall function type-1)))))

   )

(defun recurse-number-type (function predicate recurse
			    type-name range-low range-high pr-args)
  (declare (sys:downward-funarg function recurse)
	   (dbg:invisible-frame :presentation-handler-search))
  (stack-let ((data-type `(,type-name ,range-low ,range-high))
	      (data-type-1 `(,type-name ,range-low))
	      (data-type-2 `(,type-name)))
      (when (eql range-high '*)
	(if (eql range-low '*)
	    (if (not pr-args)
		(setq data-type type-name)
	      (setq data-type data-type-2))
	  (setq data-type data-type-1)))
      (stack-let ((new-type `(,data-type ,@pr-args)))
	(unless pr-args
	  (setq new-type data-type))
	(funcall recurse new-type function predicate))))

(define-presentation-type integer ((&optional (range-low '*) (range-high '*))
				   &key (base 10. base-given) (radix nil radix-given))
   :no-deftype t

   :parser ((stream &key original-type)
	    (let ((token (read-standard-token stream)))
	      (values
		(condition-case (val)
		     (parse-integer token :radix base)
		   (error
		     ;; @#$(@*#$& D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")parse-integer0 doesn't signal a more reasonable condition
		     ;; (like 1parse-error0).
		     (error 'input-not-of-required-type
			    :string token
			    :type (copy-list original-type)))
		   (:no-error
		     (unless (ptypep val original-type)
		       (error 'object-parsed-not-of-type
			      :object val
			      :type (copy-list original-type)))
		     val))
		original-type)))
	   
   :with-cache-key ((function original-type-name)
		    (when (consp range-low)
		      (setq range-low (car range-low))
		      (when (integerp range-low)
			(setq range-low (1+ range-low))))
		    (when (consp range-high)
		      (setq range-high (car range-high))
		      (when (integerp range-high)
			(setq range-high (1- range-high))))
		    (if (and (eql range-low '*)
			     (eql range-high '*))
			(funcall function original-type-name)
		      (stack-let ((key `(,original-type-name ,range-low ,range-high)))
			(funcall function key))))

   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2 t))

   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     base base-given))

   :map-over-subtypes
   ((function predicate &key recurse type predicate-p)
    (when (consp range-low)
      (setq range-low (1+ (first range-low))))
    (when (consp range-high)
      (setq range-high (1- (first range-high))))
    (cond ((and (eql range-low '*)
		(eql range-high '*))
	   ;; exactly 1(or fixnum bignum)
0	   (funcall recurse 'fixnum function predicate)
	   (funcall recurse 'bignum function predicate))
	  ;; exactly 1fixnum0, or not hacking predicates and includes 1fixnum0.
	  ((or (and (eql range-low most-negative-fixnum)
		    (eql range-high most-positive-fixnum))
	       (and (not predicate-p)
		    (or (eql range-low '*)
			( range-low most-negative-fixnum))
		    (or (eql range-high '*)
			( range-high most-positive-fixnum))))
	   (funcall recurse 'fixnum function predicate))
	  ;; Empty
	  ((and (numberp range-low)
		(numberp range-high)
		(< range-high range-low))
	   nil)
	  ;; Overlaps subrange; we can do it if we're allowed to hack predicates
	  (predicate-p
	   (with-type-decoded (ignore data-args) type
	       (let* ((new-predicate
			(when predicate-p
			  (compute-type-predicate
			    #'(presentation-function number typep-function)
			    data-args predicate)))
		      (fix-predicate
			;; If includes all of 1fixnum0, don't need to add to fixnum predicate.
			(if (and (or (eq range-low '*)
				     ( range-low most-negative-fixnum))
				 (or (eq range-high '*)
				     ( range-high most-positive-fixnum)))
			    predicate
			  new-predicate)))
		 ;; Does it overlap any of 1fixnum0?
		 (when (or (and (or (eq range-low '*)
				    (and (numberp range-high)
					 ( range-low range-high)))
				( most-negative-fixnum range-high))
			   (and (or (eq range-high '*)
				    (and (numberp range-low)
					 ( range-low range-high)))
				( range-low most-positive-fixnum)))
		   (funcall recurse 'fixnum function fix-predicate))
		 ;; Does it overlap any of bignum?
		 (when (or (eq range-low '*)
			   (eq range-high '*)
			   (< range-low most-negative-fixnum)
			   (> range-high most-positive-fixnum))
		   (funcall recurse 'bignum function new-predicate)))))))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (unless (or (eq predicate #'fixnump)
		  (eq predicate #'si:bignump))
	(setq predicate (merge-predicates #'integerp predicate))))
    (with-type-decoded (ignore ignore pr-args) type
      (when (consp range-low)
	(setq range-low (1+ (first range-low))))
      (when (consp range-high)
	(setq range-high (1- (first range-high))))
      (recurse-number-type function predicate recurse
			   'rational range-low range-high pr-args)))
   )

(define-presentation-type mod ((n)
			       &key (base 10. base-given) (radix nil radix-given))
   :no-deftype t

   :map-over-supertypes-and-subtypes
     ((function predicate &key recurse type predicate-p)
      (with-type-decoded (ignore ignore pr-args) type
	 (let ((range-low 0)
	       (range-high (1- n)))
	   (when predicate-p
	     (setq predicate (compute-byte-range-predicate range-low range-high predicate)))
	   (recurse-number-type function predicate recurse
				'integer range-low range-high pr-args))))
   :describer
     ((stream &key plural-count)
      (describe-number-type stream 0 (1- n) plural-count 'integer
			    base base-given n)))

(defun compute-byte-range-predicate (low high existing-predicate)
  (encache-predicate (low high existing-predicate)
    (compute-byte-range-predicate-1 low high existing-predicate)))

(defun compute-byte-range-predicate-1 (low high existing-predicate)
  #'(lambda (number)
      (and (integerp number)			;sigh...
	   (or (null existing-predicate)
	       (funcall existing-predicate number))
	   ( low number high))))

(define-presentation-type bit ()
   :no-deftype t
   :map-over-supertypes-and-subtypes
     ((function predicate &key recurse type predicate-p)
      (with-type-decoded (ignore ignore pr-args) type
	 (let ((range-low 0)
	       (range-high 1))
	   (when predicate-p
	     (setq predicate (compute-byte-range-predicate range-low range-high predicate)))
	   (recurse-number-type function predicate recurse
				'integer range-low range-high pr-args))))
   :description "a bit, 0 or 1")

(define-presentation-type unsigned-byte ((s)
					 &key (base 10. base-given) (radix nil radix-given))
   :no-deftype t

   :map-over-supertypes-and-subtypes
     ((function predicate &key recurse type predicate-p)
      (with-type-decoded (ignore ignore pr-args) type
	 (let ((range-low 0)
	       (range-high (1- (ash 1 s))))
	   (when predicate-p
	     (setq predicate (compute-byte-range-predicate range-low range-high predicate)))
	   (recurse-number-type function predicate recurse
				'integer range-low range-high pr-args)))))

(define-presentation-type signed-byte ((s)
				       &key (base 10. base-given) (radix nil radix-given))
   :no-deftype t

   :map-over-supertypes-and-subtypes
     ((function predicate &key recurse type predicate-p)
      (with-type-decoded (ignore ignore pr-args) type
	 (let ((range-low (- (ash 1 (1- s))))
	       (range-high (1- (ash 1 (1- s)))))
	   (when predicate-p
	     (setq predicate (compute-byte-range-predicate range-low range-high predicate)))
	   (recurse-number-type function predicate recurse
				'integer range-low range-high pr-args)))))

;;; Not used at present, but possibly quite useful.
#+ignore
(defun stack-list-append (function &rest lists)
  (declare (sys:downward-funarg function))
  (loop for l in lists
	sum (length l) into length
	finally
	  (if (> length *maximum-key-size*)
	      (funcall function (apply #'append lists))
	    (let ((result)
		  (lists lists)
		  (l))
	      (loop while lists
		    do
		(setq l (pop lists))
		(loop while l
		      do (%push (pop l))))
	      (setq result (%finish-stack-list (1- length)))
	      (funcall function result)))))

(define-presentation-type bignum (() &key (base 10.) (radix nil))
   :no-deftype t

   :map-over-subtypes
   ((function predicate &key recurse type)
    (stack-let ((high-type `(integer ,(1+ most-positive-fixnum)))
		(low-type `(integer * ,(1- most-negative-fixnum))))
      (when (or (null predicate)
		(funcall predicate (1+ most-positive-fixnum)))
	(funcall recurse high-type function predicate))
      (when (or (null predicate)
		(funcall predicate (1- most-negative-fixnum)))
	(funcall recurse low-type function predicate))))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (with-type-decoded (ignore ignore pr-args) type
      (stack-let ((new-type `((integer) ,@pr-args)))
	(let ((predicate (if (not predicate-p) predicate
			   (merge-predicates #'si:bignump predicate))))
	  (funcall recurse new-type function predicate)))))
   :description "a bignum")

(define-presentation-type complex ((&optional (component-type '*))
				   &key (base 10.) (radix nil) (exact-float-value nil))
   :no-deftype t
   :typep ((complex)
	   (case component-type
	     ((* t expression number)
	      (complexp complex))
	     (otherwise
	       (and (complexp complex)
		    (typep (realpart complex) component-type)
		    (typep (imagpart complex) component-type)))))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (with-type-decoded (ignore data-args pr-args) type
      (stack-let ((new-type `((number) ,@pr-args)))
	(let ((predicate (if (not predicate-p) predicate
			   (if (eq component-type '*)
			       ;; Easier to optimize
			       (merge-predicates #'complexp predicate)
			     (compute-type-predicate
			       #'(presentation-function complex typep-function)
			       data-args predicate)))))
	  (funcall recurse new-type function predicate)))))
   :describer ((stream &key plural-count original-type)
	       (with-type-decoded (type-name) original-type
		  (let ((string (string-downcase type-name)))
		    (when (find #\- string)
		      (setq string (substitute #\Space #\- string)))
		    (if (zerop (length string))
			(write-string "a ||" stream)
		      (unless plural-count
		        (write-string (string-a-or-an string nil :downcase) stream)
		        (write-char #\Space stream))
		      (write-string (if plural-count (string-pluralize string) string)
				    stream))))
	       (with-type-decoded (component-type-name data-args) component-type
		  (case component-type-name
		    ((* t expression))
		    (otherwise
		      (unless (and (eq component-type-name 'number)
				   (null data-args))
			(write-string " whose components are " stream)
			(describe-presentation-type component-type stream t))))))
	       )

(define-presentation-type fixnum ((&optional (range-low '*) (range-high '*))
				  &key (base 10. base-given) (radix nil))
   :no-deftype t

   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2 t))

   ;; Ignore the CL type system's excursions
   :map-over-subtypes ((function predicate)
		       (ignore function predicate))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (setq predicate (merge-predicates #'fixnump predicate)))
    (with-type-decoded (ignore ignore pr-args) type
      (setq range-low (if (or (null range-low)
			      (eq range-low '*))
			  most-negative-fixnum
			(max range-low most-negative-fixnum))
	    range-high (if (or (null range-high)
			       (eq range-high '*))
			   most-positive-fixnum
			 (min range-high most-positive-fixnum)))
      (stack-let ((new-type `((integer ,most-negative-fixnum ,most-positive-fixnum)
			      ,@pr-args)))
	(funcall recurse new-type function predicate))))
   :describer ((stream &key plural-count type original-type)
	       (with-type-decoded (type-name data-args pr-args) original-type
		  (if (and (eq type-name 'fixnum)
			   (or (neq range-low '*)
			       (neq range-high '*)))
		      ;; 1call-next-method
0		      (stack-let ((integer-type `((integer ,@data-args) ,@pr-args)))
			(describe-presentation-type integer-type stream plural-count))
		    (describe-number-type stream range-low range-high plural-count type-name
					  base base-given)))))

(define-presentation-type float ((&optional (range-low '*) (range-high '*))
				 &key (exact-float-value nil))
   :no-deftype t

   :history (()
	     (values (find-accept-history 'expression)
		     (lambda (history-element)
		       (when (and (numberp (pres-hist-elt-object history-element))
				  (not (complexp (pres-hist-elt-object history-element))))
			 (make-presentation-history-element
			   :object (float (pres-hist-elt-object history-element))
			   :type `((float ,range-low ,range-high)))))))

   :printer ((number stream)
	     (write number :stream stream :exact-float-value exact-float-value))

   :parser ((stream &key original-type)
	    (read-number-internal stream 'float original-type))
	   
   :viewspec-choices ((&key type)
		      (presentation-type-keyword-options-into-cvv
			type
			`((:exact-float-value boolean nil))))

   :with-cache-key ((function original-type-name)
		    ;; The ranges could use flonum-successor technology
		    (if (and (eql range-low '*)
			     (eql range-high '*))
			(funcall function original-type-name)
		      (stack-let ((key `(,original-type-name ,range-low ,range-high)))
			(funcall function key))))

   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2))

   :map-over-subtypes
   ((function predicate &key recurse type)
    (recurse-number-type function predicate recurse
			 'long-float range-low range-high nil)
    (unless (or (and (numberp range-high)
		     (< range-high most-negative-single-float))
		(and (consp range-high)
		     ( (car range-high) most-negative-single-float))
		(and (numberp range-low)
		     (> range-low most-positive-single-float))
		(and (consp range-low)
		     ( (car range-low) most-positive-single-float)))
      (recurse-number-type function predicate recurse
			   'short-float range-low range-high nil)))
   :map-over-supertypes
   ((function predicate &key recurse type)
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'number range-low range-high pr-args))))

;; This bypasses the broken CL type-archy (and will eventually replace it)
(define-presentation-type short-float ((&optional (range-low '*) (range-high '*))
				       &key (exact-float-value nil))
   :no-deftype t
	   
   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2))
   :map-over-subtypes
   ((function predicate &key recurse type)
    (recurse-number-type function predicate recurse
			 'single-float range-low range-high nil))
   :map-over-supertypes
   ((function predicate &key recurse type)
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'float range-low range-high pr-args))))

;; This bypasses the broken CL type-archy (and will eventually replace it)
(define-presentation-type single-float ((&optional (range-low '*) (range-high '*))
					&key (exact-float-value nil))
   :no-deftype t
	   
   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2))

   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     10 nil))
   :map-over-subtypes
   ((function predicate &key recurse)
    (recurse-number-type function predicate recurse
			 'short-float range-low range-high nil))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (setq predicate (merge-predicates #'single-float-p predicate)))
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'short-float range-low range-high pr-args))))

(define-presentation-type double-float ((&optional (range-low '*) (range-high '*))
					&key (exact-float-value nil))
   :no-deftype t

   :parser ((stream &key original-type)
	    (read-number-internal stream 'double-float original-type))

   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2))
   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     10 nil))
   :map-over-subtypes
   ((function predicate &key recurse)
    (recurse-number-type function predicate recurse
			 'long-float range-low range-high nil))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (setq predicate (merge-predicates #'double-float-p predicate)))
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'long-float range-low range-high pr-args))))

(define-presentation-type long-float ((&optional (range-low '*) (range-high '*))
				      &key (exact-float-value nil))
   :no-deftype t

   :parser ((stream &key original-type)
	    (read-number-internal stream 'long-float original-type))

   :presentation-subtypep ((type-1 type-2)
			   (number-subtypep type-1 type-2))
   :map-over-subtypes
   ((function predicate &key recurse)
    (recurse-number-type function predicate recurse
			 'double-float range-low range-high nil))
   :map-over-supertypes
   ((function predicate &key recurse type)
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'float range-low range-high pr-args))))

(define-presentation-type future-common-lisp:real
      ((&optional (range-low '*) (range-high '*))
       &key (exact-float-value nil))
   :no-deftype t

   :parser ((stream &key original-type)
	    (read-number-internal stream 'future-common-lisp:real original-type))
   :printer ((number stream)
	     (write number :stream stream
		    :exact-float-value exact-float-value))
   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     nil nil))

   :presentation-subtypep
     ((type1 type2)
      (number-subtypep type1 type2))
   :map-over-subtypes
     ((function predicate &key recurse type)
      (recurse-number-type function predicate recurse
			   'rational range-low range-high nil)
      (recurse-number-type function predicate recurse
			   'float range-low range-high nil))
   :map-over-supertypes
     ((function predicate &key recurse type predicate-p)
      (when predicate-p
	(setq predicate (merge-predicates #'future-common-lisp:realp predicate)))
      (with-type-decoded (ignore ignore pr-args) type
	 (recurse-number-type function predicate recurse
			      'number range-low range-high pr-args))))

(define-presentation-type rational ((&optional (range-low '*) (range-high '*))
				    &key (base 10. base-given) (radix nil))
   :no-deftype t
   :presentation-subtypep ((type1 type2) (number-subtypep type1 type2))
   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     base base-given))
   :map-over-subtypes
   ((function predicate &key recurse type)
    (recurse-number-type function predicate recurse
			 'ratio range-low range-high nil)
    (recurse-number-type function predicate recurse
			 'integer range-low range-high nil))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (unless (or (eq predicate #'zl:rationalp)		;Ratio
		  (eq predicate #'integerp)
		  (eq predicate #'fixnump)
		  (eq predicate #'si:bignump))
	(setq predicate (merge-predicates #'rationalp predicate))))
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'number range-low range-high pr-args))))

(define-presentation-type ratio ((&optional (range-low '*) (range-high '*))
				 &key (base 10. base-given) (radix nil))
   :no-deftype t
   :presentation-subtypep ((type1 type2) (number-subtypep type1 type2))
   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     base base-given))
   #+imach
   :map-over-subtypes
   #+imach
   ((function predicate &key recurse type)
    (recurse-number-type function predicate recurse
			 'small-ratio range-low range-high nil)
    (recurse-number-type function predicate recurse
			 'big-ratio range-low range-high nil))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (setq predicate (merge-predicates #'zl:rationalp predicate)))
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'rational range-low range-high pr-args))))

#+imach
(define-presentation-type small-ratio ((&optional (range-low '*) (range-high '*))
				       &key (base 10. base-given) (radix nil))
   :no-deftype t
   :presentation-subtypep ((type1 type2) (number-subtypep type1 type2))
   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     base base-given))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (setq predicate (merge-predicates #'cli::small-ratio-p predicate)))
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'ratio range-low range-high pr-args))))

#+imach
(define-presentation-type big-ratio ((&optional (range-low '*) (range-high '*))
				       &key (base 10. base-given) (radix nil))
   :no-deftype t
   :presentation-subtypep ((type1 type2) (number-subtypep type1 type2))
   :describer ((stream &key plural-count original-type)
	       (describe-number-type stream range-low range-high plural-count original-type
				     base base-given))
   :map-over-supertypes
   ((function predicate &key recurse type predicate-p)
    (when predicate-p
      (setq predicate (merge-predicates #'cli::big-ratio-p predicate)))
    (with-type-decoded (ignore ignore pr-args) type
      (recurse-number-type function predicate recurse
			   'ratio range-low range-high pr-args))))

(defun number-subtypep (type-1 type-2 &optional integer-p)
  (when (atom type-2)
    (return-from number-subtypep (values t t)))
  (when (atom type-1)
    (setq type-1 (list type-1)))
  (destructuring-bind (type-name &optional range-low-1 range-high-1)
		      type-1
    (destructuring-bind (ignore &optional range-low-2 range-high-2)
			type-2
      (when integer-p
	;; When it's an integer, we can take advantage of the quantization.
	(when (consp range-low-1)
	  (setq range-low-1 (1+ (car range-low-1))))
	(when (consp range-high-1)
	  (setq range-high-1 (1- (car range-high-1))))
	(when (consp range-low-2)
	  (setq range-low-2 (1+ (car range-low-2))))
	(when (consp range-high-2)
	  (setq range-high-2 (1- (car range-high-2)))))
      (cond ((or (null range-low-2)
		 (eq range-low-2 '*)
		 (and (consp range-low-2)
		      (eq (car range-low-2) '*)))
	     ;; no lower limit on the supertype
	     )
	    ((or (null range-low-1)
		 (eq range-low-1 '*)
		 (and (consp range-low-1)
		      (eq (car range-low-1) '*)))
	     ;; no lower-limit on the subtype, but there is on
	     ;; the supertype.
	     (return-from number-subtypep (values nil t)))
	    ((and (atom range-low-1)
		  (atom range-low-2))
	     (unless ( range-low-2 range-low-1)
	       (return-from number-subtypep (values nil t))))
	    ((and (consp range-low-1)
		  (consp range-low-2))
	     (unless ( (car range-low-2)
			(car range-low-1))
	       (return-from number-subtypep (values nil t))))
	    ((consp range-low-1)
	     (if (eq type-name 'integer)
		 (unless ( range-low-2 (1+ (car range-low-1)))
		   (return-from number-subtypep (values nil t)))
	       (unless ( range-low-2 (car range-low-1))
		 (return-from number-subtypep (values nil t)))))
	    ((consp range-low-2)
	     (unless (< (car range-low-2) range-low-1)
	       (return-from number-subtypep (values nil t))))
	    (t (error "Unexpected case in ~S:  ~S vs ~S for lower limit."
		      'number-subtypep range-low-1 range-low-2)))
      ;; This should be done in terms of a common function for this and
      ;; the above half.  Enumeration of the cases required less brain-power,
      ;; but won't be as maintainable.
      (cond ((or (null range-high-2)
		 (eq range-high-2 '*)
		 (and (consp range-high-2)
		      (eq (car range-high-2) '*)))
	     ;; no upper limit on the supertype
	     (return-from number-subtypep (values t t)))
	    ((or (null range-high-1)
		 (eq range-high-1 '*)
		 (and (consp range-high-1)
		      (eq (car range-high-1) '*)))
	     ;; no upper-limit on the subtype, but there is on
	     ;; the supertype.
	     (return-from number-subtypep (values nil t)))
	    ((and (atom range-high-1)
		  (atom range-high-2))
	     (unless ( range-high-2 range-high-1)
	       (return-from number-subtypep (values nil t))))
	    ((and (consp range-high-1)
		  (consp range-high-2))
	     (unless ( (car range-high-2)
			(car range-high-1))
	       (return-from number-subtypep (values nil t))))
	    ((consp range-high-1)
	     (if (eq type-name 'integer)
		 (unless ( range-high-2 (1- (car range-high-1)))
		   (return-from number-subtypep (values nil t)))
	       (unless ( range-high-2 (car range-high-1))
		 (return-from number-subtypep (values nil t)))))
	    ((consp range-high-2)
	     (unless (> (car range-high-2) range-high-1)
	       (return-from number-subtypep (values nil t))))
	    (t (error "Unexpected case in ~S:  ~S vs ~S for upper limit."
		      'number-subtypep range-high-1 range-high-2)))
      (return-from number-subtypep (values t t)))))
