;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Histories

(defstruct (presentation-history-element
	     (:conc-name pres-hist-elt-)
	     (:type :list))
  object
  type
  (string nil))

(defflavor presentation-history (type)
	   (zwei:history)
  :gettable-instance-variables
  :initable-instance-variables)

(defmethod (setup-history-name-from-type presentation-history) ()
  (setq zwei:name
	(with-output-to-string (s)
	  (describe-presentation-type type s t))))

(defun-in-flavor (unparse-element presentation-history) (element)
  (when element
    (or (pres-hist-elt-string element)
	(with-output-to-string (s)
	  (send self :print-element element s)))))

(defmethod (:print-element presentation-history) (element stream)
  (destructuring-bind (object type &optional string) element
    (if string
	(with-output-as-presentation (:stream stream :object object :type type)
	  (write-string string stream))
	(let ((*print-abbreviate-quote* t))
	  (present object type :stream stream)))))

(defmethod (:history-and-element presentation-history) (element)
  (cons self (unparse-element element)))

;;I like the default for :EQUAL-ELEMENTS, CASE-SENSITIVE-EQUAL

(defmethod (:match-element presentation-history) (string element)
  (and element
       (string-search string (unparse-element element))))

(defun-in-flavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(presentation-type-for-yanking presentation-history)0 ()
  (or (si:input-editor-flag :input-history-presentation-type-for-yanking)
      type))

(defwhopper 1(:yank presentation-history)0 (&rest args)
  (if (eq (car args) ':raw)			;pretty kludgey multiple self treatment
      (lexpr-continue-whopper (cdr args))
      (multiple-value-bind (elt idx)
	  (next-matching-element
	    self (first args) 
	    (presentation-type-for-yanking))
	(when elt
	  (setq zwei:yank-position idx)
	  (unparse-element elt)))))

(defwhopper (:yank-next presentation-history) (&rest args)
  (unparse-element (lexpr-continue-whopper args)))

(defmethod 1(:yank-matching presentation-history)0 (string &optional n)
  (multiple-value-bind (elt idx)
      (next-matching-element
	self n (presentation-type-for-yanking)
	string)
    (when elt (setq zwei:yank-position idx)
	  (unparse-element elt))))

(defvar 1*default-history-cutoff-length*0 20)

(defmethod 1(yank-for-presentation-type presentation-history)0 (accept-type &rest ignored)
  (declare (values object type found-p))
  (let ((element
	  (next-matching-element self 1 accept-type nil *default-history-cutoff-length*)))
    (when element
      (values (pres-hist-elt-object element)
	      (pres-hist-elt-type element)
	      t))))

(defmethod 1(next-matching-element presentation-history)0 (current-idx accept-type
							 &optional match-string cutoff-length)
  (declare (values element index))
  (with-input-editing-options (((:input-history-presentation-type-for-yanking :override)
				accept-type))
    (zwei:map-history-elements (self element index :start-idx current-idx
				     :match-string match-string
				     :cutoff-length cutoff-length)
      (return-from next-matching-element (values element index)))))

(defmethod (push-for-presentation-type presentation-history) (object type &optional string)
  (heap-copy-presentation-type-if-necessary type)
  (when (not (presentation-type-p type))
    (error "Attempt to push presentation history with bogus type."))
  (send self :push (make-presentation-history-element :object object :type type
						      :string string)
	     :raw t))


(defun-in-flavor 1(convert-element presentation-history)0 (element &optional to-type)
  (when element
    (unless to-type
	    (setq to-type
		  (presentation-type-for-yanking)))
    (multiple-value-bind (converted-thing typ unchanged-p)
	(invoke-default-preprocessor (pres-hist-elt-object element) to-type
				     (pres-hist-elt-type element)
				     (type-of (pres-hist-elt-object element)))
	(if unchanged-p
	    element
	    ;; return NIL if there isn't any converted-thing
	    (if (or converted-thing typ)
		(make-presentation-history-element
		  :object converted-thing
		  :type (or typ (pres-hist-elt-type element)))
		NIL)))))

(defmethod 1(:map-history-elements-internal presentation-history)
0	   (continuation &key start-idx offset cutoff-length
			      match-string (match-predicate :match-element))
  (declare (sys:downward-funarg continuation))
  (let ((pres-type (presentation-type-for-yanking)))
    (setq start-idx (cond ((null start-idx) 0)
			  ((not (minusp start-idx))
			   (if zwei:*history-rotate-if-numeric-arg* (+ start-idx zwei:rotation -1)
			       (1- start-idx)))
			  (t
			   (if zwei:*history-rotate-if-numeric-arg* (+ start-idx zwei:rotation)
			       start-idx))))

    (loop for r from (+ (or start-idx zwei:rotation) (or offset 0))
	  with length = (send self :length)
	  repeat (if cutoff-length (min length cutoff-length) length)
	  unless (< -1 r length)
	    do (if zwei:*history-yank-wraparound* (setq r (mod r length)) (return nil))
	  as element = (convert-element (send self :element r))
	  when (or (null match-string) (send self match-predicate match-string element))
	    when
	      (let ((elt-pres-type (pres-hist-elt-type element))
		    (object-type (type-of (pres-hist-elt-object element))))
		(t-to-t-identity-translate-p
		  elt-pres-type object-type
		  pres-type (pres-hist-elt-object element)))
	      do (funcall continuation element r))))

(defwhopper (:push presentation-history) (element &key (raw nil))
  (condition-case ()
       (unless raw
	 (setq element (send self :canonicalize-element element)))
     (parse-error )
     (:no-error (continue-whopper element))))

(defmethod (:canonicalize-element presentation-history) (element)
  (etypecase element
    (string
      (make-presentation-history-element
	:object (accept-from-string type element) :type type :string element))
    (cons element)))

(defmethod (:funcall-with-default presentation-history) (element function &rest args)
  (setq zwei:rotation 0)
  (letf ((zwei:temporary-element (and element (send self :canonicalize-element element))))
    (apply function args)))

(compile-flavor-methods presentation-history)

(defun define-presentation-type-history-1 (typename)
  (make-instance 'presentation-history :type typename :name (string-capitalize typename)))

(defun reset-presentation-history (typename)
  (when (presentation-type-presentation-type-history typename)
    (send (presentation-type-presentation-type-history typename) :reset)))

(defun presentation-type-default (presentation-type)
  (declare (values default type found-p))
  (multiple-value-bind (history converter)
      (find-accept-history presentation-type)
    (when history
      (yank-for-presentation-type history presentation-type
				  :history-element-converter converter))))

(defun set-presentation-type-default (type value)
  (let ((history (find-accept-history type)))
    (cond ((not history)
	   (error "No history is maintained for presentation type ~S." type))
	  (t
	   (push-for-presentation-type history value type)))))

(defsetf presentation-type-default set-presentation-type-default)

(defun reset-all-presentation-histories ()
  (dolist (pt *all-presentation-types*)
    (reset-presentation-history pt)))

(si:define-gc-optimization reset-all-presentation-histories :cleanup
  (:documentation "Reset presentation histories")
  (:before-flip (ignore)
    (reset-all-presentation-histories)))

(add-initialization "Reset presentation histories"
		    '(reset-all-presentation-histories)
		    '(before-cold))
