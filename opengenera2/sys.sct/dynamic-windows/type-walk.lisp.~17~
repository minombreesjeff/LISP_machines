;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")map-over-type-hierarchy0 and friends

;;; Other types besides the ones in CLTL that need to be special-cased as atomic types
(defvar *other-cl-types* '(lexical-closure dynamic-closure))

(defvar *atomic-subtype-table* (make-hash-table))

(defun find-atomic-subtype-parent (type)
  (gethash type *atomic-subtype-table*))

;; Use SETF instead of this.
(defun set-find-atomic-subtype-parent (type parent)
  (setf (gethash type *atomic-subtype-table*) parent))

(defsetf find-atomic-subtype-parent set-find-atomic-subtype-parent)

(defun new-compute-atomic-subtype-table ()
  (let ((table *atomic-subtype-table*))
    (clrhash table)
    (loop for node in (generate-atomic-subtype-table)
	  do (loop for (this next) on (cdr node)
		 until (atomic-subtype-parent this)
		 do (setf (find-atomic-subtype-parent this) next)))))

(defsubst atomic-subtype-parent (symbol)
  (multiple-value-bind (nil nil nil nil parent)
      (symbol-flavor-or-cl-type symbol)
    parent))

;;; This is used by symbol-flavor-or-cl-type to remember all its plist searching.
(defvar *flavor-or-cl-type-cache*  (make-good-table :name "Flavor or CL type"
						    :test #'eql))

;;; Return a flavor or CLOS class object, 1t0 or nil (whether is a structure), any
;;; deftype expander, any typep function, and the atomic-subtype-parent property.
;;; These are combined like this to minimize the number of pages that must be
;;; touched to check on all of these.
(defun symbol-flavor-or-cl-type (symbol)
  (declare (values flavor-or-class defstruct-p deftype-fun typep-fun
		   atomic-subtype-parent non-atomic-deftype))
  (multiple-value-bind (result foundp)
      (gethash symbol *flavor-or-cl-type-cache*)
    (let ((frob
	    (if foundp result
	      (setf (gethash symbol *flavor-or-cl-type-cache*)
		    (or (and (nsymbolp symbol) symbol)	;a class without a proper name
			(get symbol 'flavor:flavor)
			(let ((class (clos:find-class symbol nil)))
			  (declare (notinline typep))
			  (when (and class (not (typep class 'clos:built-in-class)))
			    class))
			(not (null (defstruct-type-p symbol)))
			(let* ((deftype (get symbol 'deftype))
			       (descriptor (symbol-presentation-type-descriptor symbol))
			       (typep
				 (unless (and descriptor
					      (presentation-type-explicit-type-function
						descriptor))
				   ;; Don't override the one defined in the presentation-type.
				   (get symbol 'typep)))
			       (atomic-subtype-parent (find-atomic-subtype-parent symbol))
			       (non-atomic-deftype
				 (when (and (not descriptor) deftype)
				   (not (member (first (type-arglist symbol))
						'(&rest &key &optional))))))
			  (if (or typep (not (atom deftype))
				  non-atomic-deftype
				  ;; deftype overrides atomic-subtype-parent.
				  (and (not deftype) atomic-subtype-parent))
			      (list-in-area *handler-dynamic-area*
					    deftype typep atomic-subtype-parent
					    non-atomic-deftype)
			    deftype)))))))
      (etypecase frob
	(array (values frob))
	(instance (values frob))
	(null (values nil))
	((member t) (values nil t))
	(future-common-lisp:function (values nil nil frob))
	(list (destructuring-bind (deftype typep atomic-subtype-parent non-atomic-deftype)
		  frob
		(values nil nil deftype typep atomic-subtype-parent non-atomic-deftype)))
	(symbol (values nil nil nil nil frob))))))

(defun generate-atomic-subtype-table ()
  (loop with table
	with marker = (gensym)
	for type in (loop for x in (append *standard-terminal-types* *other-cl-types*)
			  unless (member x '(not or and member satisfies))
			    collect x)
	do (loop named tloop
		 with thought-parent = nil
		 for node in table
		 as prev-ptr = node
		 do (loop for nnode on (cdr node)
			  as (ttype) = nnode
			  when (subtypep type ttype)
			    do (cond ((null type))
				     ((or (eq (car prev-ptr) marker)
					  (subtypep (car prev-ptr) type))
				      (setf (cdr prev-ptr)
					    (list* type nnode))
				      (return-from tloop nil))
				     ((or (null thought-parent)
					  (subtypep ttype (car thought-parent)))
				      (setq thought-parent nnode)))
			  do (setq prev-ptr nnode))
		    
		 finally (push (list* marker type thought-parent) table))
	   finally (nsubst 'expression 't (first table))
		   (setf (cddr (find nil table :key #'second)) (list t))
		   (return table)))

(new-compute-atomic-subtype-table)

#||
(2 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")(defun print-atomic-subtype-table ()
  (loop for (nil . stuff) in (generate-atomic-subtype-table)
	do (terpri)
	   (format-textual-list stuff #'princ)))

(defun compute-atomic-subtype-table ()
  (loop for type in (append *standard-terminal-types* *other-cl-types*)
	do (remprop type 'atomic-subtype-parent))
  (loop for node in (generate-atomic-subtype-table)
	do (loop for (this next) on (cdr node)
		 until (get this 'atomic-subtype-parent)
		 do (setf (get this 'atomic-subtype-parent) next))))

(compute-atomic-subtype-table)

(defun verify-atomic-subtype-table ()
  (loop for node in (generate-atomic-subtype-table)
	do (loop for this in (cdr node)
		 unless (eql (atomic-subtype-parent this) (get this 'atomic-subtype-parent))
		   do (format T "Mismatch for ~s" this))))
0||#

(defun map-over-containing-types (type function &optional state)
  (declare (downward-funarg function))
  (with-type-decoded (ignore data-args pr-args) type
    (loop for type = type then next
	  for type-name = (presentation-type-name type)
	  for next = (atomic-subtype-parent type-name)
	  do (if (and (null pr-args)
		      (null data-args))
		 (setq state (funcall function type state))
	       (stack-let ((ntype `((,type-name ,@data-args) ,@pr-args)))
		 (setq state (funcall function ntype state))))
	  while next)
  state))

(defun atomic-subtype-subtypep (x y)
  (loop for x = x then (atomic-subtype-parent x)
	thereis (eq x y)
	while x))

;;; The &rest argument is here so we can avoid having to create closures and
;;; cluttering up the stack quite so much.
(defun merge-meta-args (new-type pr-args continuation &rest continuation-args)
  (declare (sys:downward-funarg continuation)
	   (dbg:invisible-frame :presentation-handler-search))
  (with-type-decoded (nil nil new-pr-args) new-type
    (let ((meta-count -1)
	  (keys *meta-presentation-keywords*)
	  (key)
	  (meta)
	  (old-meta-flag)
	  (dtype)
	  (merged-type)
	  (merged-pr-args))
      1;; No variables after this point!!
0      (loop do (setq key (pop keys)
		     meta (getf pr-args key))
	       (when meta
		 (unless (and (not old-meta-flag)
			      (eq (getf new-pr-args key (sys:%stack-frame-pointer))
				  (sys:%stack-frame-pointer)))
		   (setq old-meta-flag t))
		 (%push key)
		 (%push meta)
		 (incf meta-count 2)
		 (when ( meta-count (min (- *maximum-key-size* 7)
					  (- (maximum-key-size) 6)))
		   ;; Allowing for additional locals and 1apply0.
		   ;; This is rather unlikely, since we only have one meta-presentation arg
		   ;; at moment; you'd have to screw up 1*meta-presentation-args*0.
		   (error "Too many meta-presentation arguments.")
		   (return-from merge-meta-args nil)))
	       while keys)
      (if (< meta-count 0)
	  (apply continuation new-type continuation-args)
	(cond (old-meta-flag
	       (loop do
		 (setq key (pop new-pr-args)
		       meta (pop new-pr-args))
		 (when (or (not (member key *meta-presentation-keywords*))
			   (eq (getf pr-args key (sys:%stack-frame-pointer))
			       (sys:%stack-frame-pointer)))
		   (%push key)
		   (%push meta)
		   (incf meta-count 2)
		   (when ( meta-count (min (- *maximum-key-size* 11)
					    (- (maximum-key-size) 10)))
		     ;; Additionally, allowing for 4 additional 1%push0es below, plus 1apply0.
		     (error "Too many presentation arguments.")
		     (return-from merge-meta-args nil)))
		     while new-pr-args)
	       (setq merged-pr-args (%finish-stack-list meta-count)))
	      (t (%push new-pr-args)
		 (setq merged-pr-args (%finish-stack-list* (1+ meta-count)))))
	(cond ((atom new-type)
	       (%push new-type)
	       (setq dtype (%finish-stack-list 0)))
	      ((atom (car new-type))
	       (setq dtype new-type))
	      (t (setq dtype (car new-type))))
	(%push dtype)
	(%push merged-pr-args)
	(setq merged-type (%finish-stack-list* 1))
	(apply continuation merged-type continuation-args)))))

(defmacro encache-predicate ((&rest keyforms) (predicate-maker &rest args))
  (declare (zwei:indentation 0 4 1 1))
  (let ((key (gensymbol "KEY-"))
	(found-p (gensymbol "FOUND-P"))
	(predicate (gensymbol "PREDICATE-")))
    `(macrolet ((unlist (&body body)
		  `(let ((maybe-list (progn ,@body)))
		     (if (atom maybe-list)
			 maybe-list
		       (when (consed-in-control-stack maybe-list)
			 (setq *predicate-arg-copies*
			       (%32-bit-plus *predicate-arg-copies* 1))
			 (setq maybe-list
			       (copy-if-necessary maybe-list *predicate-key-area*)))
		       (%make-pointer dtp-locative maybe-list)))))
       (stack-let ((,key `(,#',predicate-maker ,,@keyforms)))
	 (setf *predicate-creations*
	       (%32-bit-plus *predicate-creations* 1))
	 (multiple-value-bind (,predicate ,found-p)
	     (gethash ,key *predicate-cache*)
	   (if ,found-p
	       ,predicate
	     (setf *predicate-cache-misses*
		   (%32-bit-plus *predicate-cache-misses* 1))
	     (setq ,predicate (let ((default-cons-area *predicate-area*))
				(,predicate-maker ,@args)))
	     (setf (gethash (copy-tree ,key *predicate-key-area*) *predicate-cache*)
		   ,predicate)
	     ,predicate))))))

;;; We only copy closures we know we know the format of, and do not depend on
;;; a shared environment.
(defprop copyable-closure t si:debug-info)

(defun merge-predicates (new-predicate old-predicate)
  (if (null new-predicate)
      old-predicate
    (if (null old-predicate)
	new-predicate
      (if (eql new-predicate old-predicate)
	  old-predicate
	(encache-predicate (new-predicate old-predicate)
	  (merge-predicates-internal new-predicate old-predicate))))))

;;; Split to avoid consing closures unless needed.
(defun merge-predicates-internal (new-predicate old-predicate)
  (labels ((predicate (object)
	     (declare (copyable-closure))
	     (and (funcall old-predicate object)
		  (funcall new-predicate object))))
    #'predicate))

(defun merge-or-predicates (new-predicate old-predicate)
  (if (null new-predicate)
      old-predicate
    (if (null old-predicate)
	new-predicate
      (if (eql new-predicate old-predicate)
	  old-predicate
	(encache-predicate (new-predicate old-predicate)
	  (merge-or-predicates-internal new-predicate old-predicate))))))

;;; Split to avoid consing closures unless needed.
(defun merge-or-predicates-internal (new-predicate old-predicate)
  (labels ((predicate (object)
	     (declare (copyable-closure))
	     (or (funcall old-predicate object)
		 (funcall new-predicate object))))
    #'predicate))

(defun compute-flavor-predicate (flavor-name existing-predicate
				 &optional typep-function type-dargs)
  (cond ((or (null typep-function) (null type-dargs))
	 (encache-predicate (flavor-name existing-predicate)
	   (compute-flavor-predicate-internal flavor-name existing-predicate
					      typep-function type-dargs)))
	((and (null (cdr type-dargs))
	      (atom (first type-dargs)))
	 (encache-predicate (flavor-name (first type-dargs) existing-predicate)
	   (compute-flavor-predicate-internal flavor-name existing-predicate
					      typep-function type-dargs)))
	(t
	 (encache-predicate (flavor-name type-dargs existing-predicate)
	   (compute-flavor-predicate-internal flavor-name existing-predicate
					      typep-function type-dargs)))))

(defun compute-flavor-predicate-internal (flavor-name existing-predicate
					  typep-function type-dargs)
  (labels ((typep-flavor (object)
	     (declare (copyable-closure))
	     (and (or (null existing-predicate)
		      (funcall existing-predicate object))
		  (cli::typep-flavor object flavor-name))))
    (if typep-function
	(compute-flavor-predicate-internal-1 #'typep-flavor typep-function type-dargs)
      #'typep-flavor)))

(defun compute-flavor-predicate-internal-1 (flavor-predicate typep-function type-dargs)
  ;; We don't need to hack the "existing-predicate" because it will have
  ;; already been handled by the first closure generated by 1c-f-p-internal0.
  (let ((type-predicate (compute-type-predicate typep-function type-dargs nil)))
    (labels ((typep-flavor-with-typep-function (object)
	       (declare (copyable-closure))
	       (and (funcall flavor-predicate object)
		    (funcall type-predicate object))))
      #'typep-flavor-with-typep-function)))

(defun compute-class-predicate (class-name existing-predicate
				&optional typep-function type-dargs)
  (let ((class (if (symbolp class-name) (clos:find-class class-name) class-name)))
    (cond ((or (null typep-function) (null type-dargs))
	   (encache-predicate (class-name existing-predicate)
	     (compute-class-predicate-internal class existing-predicate
					       typep-function type-dargs)))
	  ((and (null (cdr type-dargs))
		(atom (first type-dargs)))
	   (encache-predicate (class-name (first type-dargs) existing-predicate)
	     (compute-class-predicate-internal class existing-predicate
					       typep-function type-dargs)))
	  (t
	   (encache-predicate (class-name type-dargs existing-predicate)
	     (compute-class-predicate-internal class existing-predicate
					       typep-function type-dargs))))))

(defun compute-class-predicate-internal (class existing-predicate
					 typep-function type-dargs)
  (labels ((typep-class (object)
	     (declare (copyable-closure))
	     (and (or (null existing-predicate)
		      (funcall existing-predicate object))
		  (clos-internals:typep-class object class))))
    (if typep-function
	(compute-class-predicate-internal-1 #'typep-class typep-function type-dargs)
      #'typep-class)))

(defun compute-class-predicate-internal-1 (class-predicate typep-function type-dargs)
  ;; We don't need to hack the "existing-predicate" because it will have
  ;; already been handled by the first closure generated by 1c-c-p-internal0.
  (let ((type-predicate (compute-type-predicate typep-function type-dargs nil)))
    (labels ((typep-class-with-typep-function (object)
	       (declare (copyable-closure))
	       (and (funcall class-predicate object)
		    (funcall type-predicate object))))
      #'typep-class-with-typep-function)))

(defun compute-structure-predicate (structure-name existing-predicate
				    &optional typep-function type-dargs)
  (cond ((or (null typep-function) (null type-dargs))
	 (encache-predicate (structure-name existing-predicate)
	   (compute-structure-predicate-internal structure-name existing-predicate
						 typep-function type-dargs)))
	((and (null (cdr type-dargs))
	      (atom (first type-dargs)))
	 (encache-predicate (structure-name (first type-dargs) existing-predicate)
	   (compute-structure-predicate-internal structure-name existing-predicate
						 typep-function type-dargs)))
	(t
	 (encache-predicate (structure-name type-dargs existing-predicate)
	   (compute-structure-predicate-internal structure-name existing-predicate
						 typep-function type-dargs)))))

(defun compute-structure-predicate-internal (structure-name existing-predicate
					     typep-function type-dargs)
  (labels ((typep-structure (object)
	     (declare (copyable-closure))
	     (and (or (null existing-predicate)
		      (funcall existing-predicate object))
		  (cli::typep-structure object structure-name))))
    (if typep-function
	(compute-structure-predicate-internal-1 #'typep-structure typep-function type-dargs)
      #'typep-structure)))

(defun compute-structure-predicate-internal-1 (structure-predicate typep-function type-dargs)
  ;; We don't need to hack the "existing-predicate" because it will have
  ;; already been handled by the first closure generated by 1c-s-p-internal0.
  (let ((type-predicate (compute-type-predicate typep-function type-dargs nil)))
    (labels ((typep-structure-with-typep-function (object)
	       (declare (copyable-closure))
	       (and (funcall structure-predicate object)
		    (funcall type-predicate object))))
      #'typep-structure-with-typep-function)))

;;; Close over data arguments and the existing predicate.
(defun compute-type-predicate (type-predicate type-dargs existing-predicate)
  (if (and (null type-dargs)
	   (null existing-predicate))
      type-predicate
    ;; In case on the stack and minimize paging
    (cond ((null type-dargs)
	   ;; More optimizations
	   (merge-predicates type-predicate existing-predicate))
	  ((and (null (cdr type-dargs))
		(atom (first type-dargs)))
	   ;; Avoid having to cons the list of dargs
	   (encache-predicate (type-predicate (first type-dargs) existing-predicate)
	     (compute-type-predicate-internal-1 type-predicate
						(sys:copy-if-necessary (first type-dargs))
						existing-predicate)))
	  (t (encache-predicate (type-predicate type-dargs existing-predicate)
	       (compute-type-predicate-internal type-predicate
						(copy-list (sys:copy-if-necessary type-dargs)
							   *predicate-area*)
						existing-predicate))))))

;;; Split to avoid consing closures unless needed.
(defun compute-type-predicate-internal (type-predicate type-dargs existing-predicate)
  (labels ((predicate (object)
	     (declare (copyable-closure))
	     (and (or (null existing-predicate)
		      (funcall existing-predicate object))
		  (apply type-predicate object type-dargs))))
    #'predicate))

;;; The only reason this is different from 1compute-type-predicate-internal0 is to
;;; avoid having to take a page-fault on the type-dargs.
(defun compute-type-predicate-internal-1 (function arg existing-predicate)
  (labels ((predicate (object)
	     (declare (copyable-closure))
	     (and (or (null existing-predicate)
		      (funcall existing-predicate object))
		  (funcall function object arg))))
    #'predicate))


(defconstant *already-seen-table-size* 30)

;;; Check if we've already seen this.  (If we haven't, remember that we have now).
(defun already-seen-p (type set)
  (let ((set set))
    (declare (sys:array-register set))
    (let ((fill-pointer (fill-pointer set)))
      (or (%block-search-eq type (locf (aref set 0)) fill-pointer)
	  (loop for i below fill-pointer
		thereis (let ((element (aref set i)))
			  (or (eql type element)	;It's %BLOCK-SEARCH-EQ, not -EQL
			      (and (consp element)
				   (fringe-eql type element))))
		finally (unless ( fill-pointer *already-seen-table-size*)
			  (setf (aref set fill-pointer) type)
			  (incf (fill-pointer set))))))))

(defun flush-stack-keys-seen (old-fill-pointer keys-seen)
  ;; Flush out stuff that may have been stack-consed while we were in here.
  (let ((keys-seen keys-seen)
	(fill-pointer (fill-pointer keys-seen)))
    (declare (sys:array-register keys-seen))
    (loop with i = old-fill-pointer
	  for j from old-fill-pointer below fill-pointer
	  for item = (aref keys-seen j)
	  do
      (if (and (consp item) (consed-in-control-stack item))
	  (setf (aref keys-seen j) nil)
	(setf (aref keys-seen i) item)
	(incf i))
	  finally
	    (setf (fill-pointer keys-seen) i))))

(defmacro with-keys-seen-scope (keys-seen &body body)
  (let ((keys-seen-var (gensymbol "KEYS-SEEN-"))
	(old-fill-pointer (gensymbol "OLD-FILL-POINTER-")))
    `(let* ((,keys-seen-var ,keys-seen)
	    (,old-fill-pointer (fill-pointer ,keys-seen-var)))
       (multiple-value-prog1
	 (progn ,@body)
	 (flush-stack-keys-seen ,old-fill-pointer ,keys-seen-var)))))

;;; Remove one particular stack-consed key we know about.

(defun remove-stack-key (type set old-index)
  (let* ((fill-pointer (fill-pointer set))
	 (count (- fill-pointer old-index))
	 (location (%block-search-eq type (locf (aref set old-index)) count)))
    (when location
      (%block-gc-copy (%make-pointer-offset dtp-locative location 1) location (1- count))
      (setf (aref set (1- fill-pointer)) nil)
      (setf (fill-pointer set) (1- fill-pointer))
      nil)))

(defmacro removing-stack-key ((key-var keys-seen) &body body)
  (let ((keys-seen-var (gensymbol "KEYS-SEEN-"))
	(old-fill-pointer (gensymbol "OLD-FILL-POINTER-")))
    `(let* ((,keys-seen-var ,keys-seen)
	    (,old-fill-pointer (fill-pointer ,keys-seen-var)))
       (multiple-value-prog1 (progn ,@body)
			     (when (and (consp ,key-var)
					(consed-in-control-stack ,key-var))
			       (remove-stack-key ,key-var ,keys-seen-var
						 ,old-fill-pointer))))))


(defun map-over-flavor-or-class-dependents (flavor-or-class function
					    type-sym type-dargs type-prargs key
					    predicate new-predicate)
  (if (instancep flavor-or-class)		;CLOS class descriptor
      (clos-internals:map-over-class-and-its-subclasses
	flavor-or-class
	#'(lambda (class)
	    ;; We think class is a subtype of TYPE-SYM, but make sure.
	    ;; All-composed-dependents can have extraneous entries, and can
	    ;; point to uncomposed classes.  We only know anything for sure
	    ;; about composed ones.
	    (when (member
		    (if (symbolp type-sym) (clos:find-class type-sym) type-sym)
		    (clos-internals:class-precedence-list class))
	      (let* ((class-name (clos:class-name class))
		     (pred (if (eq class-name type-sym) predicate new-predicate)))
		(unless (eq class-name key)
		  (if (and (null type-dargs)
			   (null type-prargs))
		      (funcall function class-name class-name pred)
		      (stack-let ((ntype `((,class-name ,@type-dargs) ,@type-prargs)))
			(when (null type-prargs)
			  (setq ntype (car ntype))
			  (when (null type-dargs)
			    (setq ntype class-name)))
			(funcall function ntype class-name pred))))))))
    (flavor::do-all-composed-dependents
      (flav flav-object flavor-or-class)
      (ignore flav-object)
      ;; We think flav is a subtype of TYPE-SYM, but make sure.
      ;; All-composed-dependents can have extraneous entries, and can
      ;; point to uncomposed flavors.  We only know anything for sure
      ;; about composed ones.
      (when (member type-sym (flavor::flavor-all-components flav-object))
	(let ((pred (if (eq flav type-sym) predicate new-predicate)))
	  (unless (eq flav key)
	    (if (and (null type-dargs)
		     (null type-prargs))
		(funcall function flav flav pred)
		(stack-let ((ntype `((,flav ,@type-dargs) ,@type-prargs)))
		  (when (null type-prargs)
		    (setq ntype (car ntype))
		    (when (null type-dargs)
		      (setq ntype flav)))
		  (funcall function ntype flav pred)))))))))

;;; +++ Should avoid recomputing cache-key when it's going to be the same as
;;; +++ the table key.
(zwei:defindentation (map-over-type-hierarchy 0 8 1 10 2 10 3 2 4 1))

(defun map-over-type-hierarchy (type supertype for-lookup function
				&optional (predicate nil predicate-p-default)
					  (predicate-p predicate-p-default)
					  already-seen)
 (declare (sys:downward-funarg function predicate)
	  (dbg:invisible-frame :presentation-handler-search))
 (if (eq type 'no-type)
     (funcall function 'no-type 'no-type nil)
     (stack-let* ((original-type type)
		  (keys-seen (make-array *already-seen-table-size* :fill-pointer 0)))
       ;; If we've already got a types-seen table, use that instead.
       ;; We always make one of our own on the stack, to avoid an extra level of closure
       ;; for the more common case.
       (when already-seen
	 (setq keys-seen already-seen))
       (labels
	 ((recurse (type function predicate)
	    (declare (sys:downward-function)
		     (sys:downward-funarg function predicate))
	    (with-type-descriptor ((type-desc expanded-type) type :exact-only t)
	      (with-type-decoded (type-sym type-dargs type-prargs) expanded-type
		 (multiple-value-bind (flavor-or-class structure-p deftype cl-typep
				       atomic non-atomic-deftype)
		     (symbol-flavor-or-cl-type type-sym)
		   (let* ((typep-function
			    (when type-desc
			      (presentation-type-descriptor-typep-function type-desc)))
			  ;; We only take one typep function.  The one in the descriptor takes
			  ;; precedence, because it may have been explicit.  If there's a
			  ;; descriptor, there will always either be a (3 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")typep-function
0			  ;; or nothing, because any 3cl-typep0 would have been copied
			  ;; into the descriptor and would be found in 3typep-function
0			  ;; if it were usable.
			  (typep-fun (if type-desc typep-function cl-typep))
			  ;; In general, once you have marched away from the original
			  ;; type, you use 1new-predicate0 instead of 1predicate0.  Note
			  ;; that these can be the same in some cases!
			  (new-predicate
			    (when predicate-p
			      (cond (flavor-or-class
				     (if (instancep flavor-or-class)
					 (compute-class-predicate type-sym predicate
								  typep-fun type-dargs)
					 (compute-flavor-predicate type-sym predicate
								   typep-fun type-dargs)))
				    (structure-p
				     (compute-structure-predicate type-sym predicate
								  typep-fun type-dargs))
				    (typep-fun
				     (compute-type-predicate typep-fun type-dargs predicate))
				    (t predicate)))))
		     (when (and supertype
				(or (neq type original-type)
				    (neq supertype 'describe-presentation-type)))
		       ;; If we are going in the supertype direction, we want the
		       ;; predicate immediately.
		       (setq predicate new-predicate))
		     (macrolet ((with-new-atomic-type ((new-type-var new-type) &body body)
				  (let ((old-fill-pointer (gensymbol "OLD-FILL-POINTER-"))
					(ntype (gensymbol "NTYPE-"))
					(dtype (gensymbol "DTYPE-")))
				    `(stack-let* ((,old-fill-pointer (fill-pointer keys-seen))
						  (,ntype ,new-type)
						  (,dtype `(,,ntype))
						  (,new-type-var `(,(if (atom ,ntype) ,dtype
									,ntype)
								   ,@type-prargs)))
				       (when (and (null type-prargs) (atom ,ntype))
					 (setq ,new-type-var ,ntype)
					 (setq ,old-fill-pointer nil))
				       (prog1 (progn ,@body)
					      (when ,old-fill-pointer
						(remove-stack-key ,new-type-var keys-seen
								  ,old-fill-pointer)))))))
		       (with-keys-seen-scope keys-seen
			 (labels
			   ((cache-key-body (cache-key)
			      (declare (sys:downward-function))
			      (with-presentation-type-key (key expanded-type)
				(with-keys-seen-scope keys-seen
				  (labels
				    ((do-expression ()
				       (declare (sys:downward-function))
				       (stack-let ((e-type `((expression) :escape nil)))
					 (merge-meta-args e-type type-prargs
							  (lambda (e-type)
							    (declare (sys:downward-function))
							    (funcall function e-type 'expression
								     new-predicate)))))
				     (expand-and-recurse ()
				       (declare (sys:downward-function))
				       (cond (flavor-or-class
					      (if (not supertype)
						  ;; Moving in the subtype direction
						  (unless for-lookup
						    (map-over-flavor-or-class-dependents
						      flavor-or-class function
						      type-sym type-dargs type-prargs key
						      predicate new-predicate))
						  ;; Moving in the supertype direction
						  (unless (and for-lookup
							       ;; Gotta include this when looking
							       ;; for type methods.
							       (neq for-lookup
								    'get-type-property-stack))
						    ;; Use 1predicate0 in here so that
						    ;; 1describe-presentation-type0 doesn't see
						    ;; the predicate.  In other situations,
						    ;; 1predicate0 is eq to 1new-predicate0.
						    (if (and (null type-dargs)
							     (null type-prargs))
							(if (instancep flavor-or-class)
							    (let ((standard-object
								    (clos:find-class 'clos:standard-object)))
							      (dolist (class (clos:class-precedence-list flavor-or-class))
								(when (eq class standard-object)
								  (return))
								(let ((name (clos:class-name class)))
								  (funcall function name name
									   predicate))))
							    (labels ((do-flavor-component (flav)
								       (unless (eq flav 'flavor:vanilla)
									 (funcall function flav flav
										  predicate))))
							      (flavor::map-all-flavor-components
								type-sym #'do-flavor-component)))
							(if (instancep flavor-or-class)
							    (let ((standard-object (clos:find-class 'clos:standard-object)))
							      (dolist (class (clos:class-precedence-list flavor-or-class))
								(when (eq class standard-object)
								  (return))
								(let ((name (clos:class-name class)))
								  (stack-let ((ntype
										`((,name ,@type-dargs)
										  ,@type-prargs)))
								    (when (null type-prargs)
								      (setq ntype (car ntype))
								      (when (null type-dargs)
									(setq ntype name)))
								    (funcall function ntype name
									     predicate)))))
							    (labels ((do-flavor-component-dargs (flav)
								       (unless (eq flav 'flavor:vanilla)
									 (stack-let ((ntype
										       `((,flav ,@type-dargs)
											 ,@type-prargs)))
									   (when (null type-prargs)
									     (setq ntype (car ntype))
									     (when (null type-dargs)
									       (setq ntype flav)))
									   (funcall function ntype flav
										    predicate)))))
							      (flavor::map-all-flavor-components
								type-sym #'do-flavor-component-dargs)))))
						  (if (instancep flavor-or-class)
						      (merge-meta-args 'clos-internals:member-of-class
								       type-prargs function
								       'clos-internals:member-of-class
								       new-predicate)
						      (merge-meta-args 'instance
								       type-prargs function
								       'instance new-predicate))
						  (do-expression)))
					     (structure-p
					      ;;---Still not doing inheritance of structure types
					      (when supertype
						(merge-meta-args 'structure type-prargs
								 function 'structure new-predicate)
						(do-expression)))
					     (type-desc
					      (funcall
						(if supertype
						    #'presentation-type-supertype-stack-with-predicate
						    #'presentation-type-subtype-stack-with-predicate)
						type-desc expanded-type
						(lambda (type xpredicate)
						  (declare (sys:downward-function))
						  (unless (and (listp type)
							       (with-type-decoded (type-name) type
								  (eq type-name
								      'presentation-only-type)))
						    (recurse type function xpredicate)))
						new-predicate)
					      (when supertype
						(when type-dargs
						  (unless (presentation-type-disallow-atomic-type
							    type-desc)
						    (with-new-atomic-type (ntype type-sym)
									  (recurse ntype function new-predicate))))))
					     (deftype
					      (with-new-atomic-type
						(dtype (apply deftype type-dargs))
						(with-type-decoded (dtype-name) dtype
						   ;; 1presentation-only-type0 just 3isn't0 real.
						   ;; Someday it will go away.  For now, refuse to
						   ;; recognize it.  It's just there for the CL type
						   ;; system to know that it's being left out.
						   (unless (eq dtype-name 'presentation-only-type)
						     (recurse dtype function new-predicate)))))
					     (atomic (when supertype
						       (let ((final
							       (map-over-containing-types
								 expanded-type
								 (lambda (tp ignore)
								   (declare (sys:downward-function))
								   (with-type-decoded (tp-name) tp
								      (unless (eq tp-name type-sym)
									(funcall function tp tp-name
										 new-predicate))
								      tp-name)))))
							 (recurse final function new-predicate))))
					     (t nil))))
				    (unless (already-seen-p cache-key keys-seen)
				      (if (and (null type-dargs) (null type-prargs))
					  (when (or (eql cache-key type-sym)
						    (not (already-seen-p type-sym keys-seen)))
					    (funcall function type-sym type-sym predicate))
					  (funcall function expanded-type key predicate))
				      (cond
					((eq type-sym nil))
					((eq type-sym 'presentation-only-type))
					(type-desc
					 (if supertype
					     (map-over-supertypes type-desc #'expand-and-recurse
								  function new-predicate
								  #'recurse expanded-type
								  original-type
								  for-lookup key
								  keys-seen predicate-p)
					     (map-over-subtypes type-desc #'expand-and-recurse
								function new-predicate
								#'recurse expanded-type
								original-type
								for-lookup key
								keys-seen predicate-p)))
					(t (expand-and-recurse)))
				      (when (and type-dargs
						 (or supertype
						     (and predicate-p typep-fun))
						 (not (if (not type-desc)
							  non-atomic-deftype
							  (presentation-type-disallow-atomic-type
							    type-desc))))
					(if supertype
					    (merge-meta-args type-sym type-prargs
							     #'recurse function new-predicate)
					    ;; This is where we do the type reduction now
					    (recurse type-sym function new-predicate)))))))))
			   #|| ;; Expanded in place to avoid redoing the descriptor lookup.
			   (with-key-for-cache (cache-key type)
			     (cache-key-body cache-key))
			   ||#
			   (if (null type-dargs)
			       (cache-key-body type-sym)
			       (if type-desc
				   (apply #'with-cache-key
					  type-desc
					  #'cache-key-body
					  type-sym
					  type-dargs)
				   (stack-let ((key (list type-sym type-dargs)))
				     (call-with-one-level-key-cache #'cache-key-body key)))))))))))))
	 (recurse type function predicate)))
     (when for-lookup
       ;; If we're doing the lookup, handle T as supertype or NIL as subtype.
       ;; We don't do it except at lookup, since otherwise our tables would be huge.
       (if supertype
	   (funcall function t t nil)
	   (funcall function nil nil nil))))
  nil)

