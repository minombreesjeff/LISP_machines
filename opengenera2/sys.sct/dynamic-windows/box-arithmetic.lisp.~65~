;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Box arithmetic and display package

(defvar *presentation-area* (make-area :name '*presentation-area*))

(defflavor box (left top right bottom) ()
  :initable-instance-variables
  :writable-instance-variables
  (:ordered-instance-variables left top right bottom)
  (:default-init-plist :area *presentation-area*)
  (:constructor make-box (left top right bottom))
  (:constructor make-temporary-box (left top right bottom
				    &key (area default-cons-area))))

(defmethod (print-self box) (stream ignore slashify-p)
  (flet ((doit (stream)
	   (format stream "/x ~D:~D, y ~D:~D/" left right top bottom)))
    (if slashify-p
	(printing-random-object (self stream :typep)
	  (doit stream))
	(doit stream))))

(defmethod (copy-box box) (&key (area default-cons-area))
  (make-temporary-box left top right bottom :area area))

(defmethod (box-edges box) ()
  (declare (values left top right bottom))
  (values left top right bottom))

(defmethod (set-box-edges box) (new-left new-top new-right new-bottom)
  (setq left new-left top new-top
	right new-right bottom new-bottom))

(defmethod (box-position box) ()
  (declare (values left top))
  (values left top))

(defmethod (set-box-position box) (x y)
  (psetq left x
	 right (+ x (- right left)))
  (psetq top y
	 bottom (+ y (- bottom top))))

(defmethod (box-bottom-right box) ()
  (declare (values right bottom))
  (values right bottom))

(defmethod (box-size box) ()
  (values (- right left) (- bottom top)))

(defmethod (set-box-size box) (width height)
  (setq right (+ left width)
	bottom (+ top height)))

(defmethod (box-width box) ()
  (- right left))

(defmethod (box-height box) ()
  (- bottom top))

(defmethod (box-center-x box) ()
  (floor (+ left right) 2))

(defmethod (box-center-y box) ()
  (floor (+ top bottom) 2))

(defmethod (augment-bounding-box box) (bounding-box)
  (if (null bounding-box)
      (copy-box self)
      (multiple-value-bind (bbleft bbtop bbright bbbottom) (box-edges bounding-box)
	(set-box-edges bounding-box
		       (min bbleft left) (min bbtop top)
		       (max bbright right) (max bbbottom bottom))
	bounding-box)))

;;; FROM-BOX has the old bounding box as superior, TO-BOX the new.
;;; FROM-BOX can be NIL, meaning erase.
(defun adjoin-box-copy (copies displayed-inferiors from-box to-box)
  (multiple-value-bind (to-left to-top to-right to-bottom)
      (box-edges to-box)
    (if (and from-box (member from-box displayed-inferiors))
	(multiple-value-bind (from-left from-top from-right from-bottom)
	    (box-edges from-box)
	  (unless (and (= from-left to-left) (= from-top to-top)
		       (= from-right to-right) (= from-bottom to-bottom))
	    ;;Erase the excess that cannot come from FROM-BOX.
	    (let ((from-width (- from-right from-left))
		  (to-width (- to-right to-left)))
	      (when (< from-width to-width)
		(setq copies (adjoin-box-erase
			       copies displayed-inferiors
			       (make-temporary-box (+ to-left from-width) to-top
						   to-right to-bottom)))
		(setq to-right (+ to-left from-width))))
	    (let ((from-height (- from-bottom from-top))
		  (to-height (- to-bottom to-top)))
	      (when (< from-height to-height)
		(setq copies (adjoin-box-erase
			       copies displayed-inferiors
			       (make-temporary-box to-left (+ to-top from-height)
						   to-right to-bottom)))
		(setq to-bottom (+ to-top from-height))))
	    ;; Copy what remains.
	    (setq copies (adjoin-box-1 copies from-box 
				       (make-temporary-box to-left to-top
							   to-right to-bottom))))
	  copies)
	(adjoin-box-erase copies displayed-inferiors to-box))))

(defmethod (box-well-formed-p box) ()
  (and (> right left) (> bottom top)))

(defmethod (box-empty-p box) ()
  (and (= right left) (= bottom top)))

(defun box-equal (box-1 box-2)
  (and (= (box-left box-1) (box-left box-2))
       (= (box-top box-1) (box-top box-2))
       (= (box-right box-1) (box-right box-2))
       (= (box-bottom box-1) (box-bottom box-2))))

(defun box-size-equal (box-1 box-2)
  (and (= (box-width box-1) (box-width box-2))
       (= (box-height box-1) (box-height box-2))))

(defun box-smaller-p (box-1 box-2)
  (or (< (box-width box-1) (box-width box-2))
      (< (box-height box-1) (box-height box-2))))

(defun boxes-overlap-p (box-1 box-2)
  (let ((left (max (box-left box-1) (box-left box-2)))
	(top (max (box-top box-1) (box-top box-2)))
	(right (min (box-right box-1) (box-right box-2)))
	(bottom (min (box-bottom box-1) (box-bottom box-2))))
    (when (and (> right left) (> bottom top))
      (values t left top right bottom))))

(defun box-intersection (box-1 box-2)
  (multiple-value-bind (valid-p left top right bottom)
      (boxes-overlap-p box-1 box-2)
    (when valid-p
      (make-temporary-box left top right bottom))))

(defmethod (box-contains-box-p box) (other-box)
  (and ( (box-left other-box) left)
       ( (box-top other-box) top)
       ( (box-right other-box) right)
       ( (box-bottom other-box) bottom)))

(defmethod (box-contains-point-p box) (x y)
  (and ( y top) (< y bottom)
       ( x left) (< x right)))

;;; These next two allow NIL for unbounded, which is why the arguments aren't boxes.
(defmethod (box-contained-in-region-p box) (other-left other-top other-right other-bottom)
  (and (or (null other-left) ( other-left left))
       (or (null other-top) ( other-top top))
       (or (null other-right) ( other-right right))
       (or (null other-bottom) ( other-bottom bottom))))

(defmethod (box-overlaps-region-p box) (other-left other-top other-right other-bottom)
  (and (let ((intersection-top (if other-top (max top other-top) top))
	     (intersection-bottom (if other-bottom (min bottom other-bottom) bottom)))
	 (> intersection-bottom intersection-top))
       (let ((intersection-left (if other-left (max left other-left) left))
	     (intersection-right (if other-right (min right other-right) right)))
	 (> intersection-right intersection-left))))

(defmethod (box-position-deltas box) (other-box)
  (values (- left (box-left other-box))
	  (- top (box-top other-box))))

(defmethod (box-copy-with-offsets box) (delta-x delta-y &key (area default-cons-area))
  (make-temporary-box (+ left delta-x) (+ top delta-y)
		      (+ right delta-x) (+ bottom delta-y)
		      :area area))

(defmethod (box-extend-to-point box) (x y)
  (minf left x)
  (minf top y)
  (maxf right x)
  (maxf bottom y))

(defmethod (box-extend-to-box box) (other-box)
  (multiple-value-call #'box-extend-to-region self (dw:box-edges other-box)))

(defmethod (box-extend-to-region box) (other-left other-top other-right other-bottom)
  (minf left other-left)
  (minf top other-top)
  (maxf right other-right)
  (maxf bottom other-bottom))

(defmethod (box-equals-region-p box) (other-left other-top other-right other-bottom)
  (and (= left other-left)
       (= top other-top)
       (= right other-right)
       (= bottom other-bottom)))

;;; Any portion of BOX that is in DISPLAYED-INFERIORS needs to be erased.
(defun adjoin-box-erase (copies displayed-inferiors box)
  (when (box-well-formed-p box)
    ;; First see if BOX is wholly inside something
    (if (loop for ibox in displayed-inferiors
	      thereis (box-contains-box-p ibox box))
	(setq copies (adjoin-box-1 copies nil box))
	(loop for ibox in displayed-inferiors
	      doing
	  (let ((box (box-intersection ibox box)))
	    (when box
	      (setq copies (adjoin-box-1 copies nil box)))))))
  copies)

(defmethod (box-common-edge-p box) (with-box)
  (multiple-value-bind (with-left with-top with-right with-bottom)
      (box-edges with-box)
    (or (and (not (or ( with-bottom top)
		      ( with-top bottom)))
	     (cond ((= with-right left)
		    :left)
		   ((= with-left right)
		    :right)))
	(and (not (or ( with-right left)
		      ( with-left right)))
	     (cond ((= with-bottom top)
		    :top)
		   ((= with-top bottom)
		    :bottom))))))

;;; Boxes are the same shape.
;;; Maybe need an optimization here for merging bitblts and moving erased bits.
;;; To move a lot of lines with nothing to the right, move the whole block the width
;;; of the widest.
(defun adjoin-box-1 (copies from-box to-box)
  (block top
    (unless (box-well-formed-p to-box)
      (return-from top))
    (let ((elem (if from-box
		    (let ((delta-x (- (box-left to-box) (box-left from-box)))
			  (delta-y (- (box-top to-box) (box-top from-box))))
		      (when (and (zerop delta-x) (zerop delta-y))
			(return-from top))
		      (or (with-stack-list (deltas delta-x delta-y)
			    (assoc deltas copies :test #'equal))
			  (let ((elem (ncons (list delta-x delta-y))))
			    (push elem copies)
			    elem)))
		    (or (assoc 'nil copies)
			(let ((elem (ncons 'nil)))
			  (push elem copies)
			  elem)))))
      ;; Everything in ELEM is moving the same direction.  Try to merge in.
      (setf (cdr elem) (adjoin-boxes to-box (cdr elem)))))
  copies)

(defun adjoin-boxes (box boxes)
  (let ((pending (list box)))
    (loop while pending
	  doing
      (loop named retry
	    for box-1 in pending
	    doing
	(loop for list first (locf boxes) then (cdr list)
	      when (null (cdr list))
		;; Didn't manage to merge, add in and done
		do (setf (cdr list) (ncons box-1))
		   (setq pending (delete box-1 pending))
		   (return-from retry)
	      as (nil box-2) = list
	      doing
	  (let ((common-edge (box-common-edge-p box-2 box-1)))
	    (when (and common-edge
		       (ecase common-edge
			 ((:left :right)
			  ;; Common vertical edge, combine horizontal
			  (let (middle-top middle-bottom)
			    (let ((top (box-top box-1))
				  (bottom (box-top box-2))
				  (box box-1))
			      (unless (= top bottom)
				(when (> top bottom)
				  (rotatef top bottom)
				  (setq box box-2))
				(push (make-temporary-box (box-left box) top
							  (box-right box) bottom)
				      pending))
			      (setq middle-top bottom))
			    (let ((top (box-bottom box-1))
				  (bottom (box-bottom box-2))
				  (box box-2))
			      (unless (= top bottom)
				(when (> top bottom)
				  (rotatef top bottom)
				  (setq box box-1))
				(push (make-temporary-box (box-left box) top
							  (box-right box) bottom)
				      pending))
			      (setq middle-bottom top))
			    (let (left right)
			      (if (eq common-edge :left)
				  ;; 1 to LEFT of 2
				  (setq left (box-left box-1)
					right (box-right box-2))
				  (setq left (box-left box-2)
					right (box-right box-1)))
			      (push (make-temporary-box left middle-top right middle-bottom)
				    pending)))
			  t)
			 ((:top :bottom)
			  ;; Common horizontal edge, combine vertical only if whole strip,
			  ;; Since we know that horizontal is faster than vertical
			  (when (and (= (box-left box-1) (box-left box-2))
				     (= (box-right box-1) (box-right box-2)))
			    (let (top bottom)
			      (if (eq common-edge :top)
				  ;; 1 on TOP of 2
				  (setq top (box-top box-1)
					bottom (box-bottom box-2))
				  (setq top (box-top box-2)
					bottom (box-bottom box-1)))
			      (push (make-temporary-box (box-left box-1) top
							(box-right box-1) bottom)
				    pending))
			    t))))
	      (setq pending (delete box-1 pending))
	      (setf (cdr list) (cddr list))
	      (return-from retry)))))))
  boxes)

;;; Pieces of the BOX'es in BOX-SET-1 not in BOX-SET-2
(defun box-set-difference (box-set-1 box-set-2)
  (loop for box-1 in box-set-1
	append (unless (loop for box-2 in box-set-2
			     ;; Fast check for wholly within some box, can be eliminated
			     thereis (box-contains-box-p box-2 box-1))
		 (let ((result (ncons box-1)))
		   (loop for box-2 in box-set-2
			 doing
		     (setq result (loop for box-1 in result
					append (box-difference box-1 box-2))))
		   result))))

(defun box-difference (box-1 box-2)
  (unless (box-contains-box-p box-2 box-1)
    (if (not (boxes-overlap-p box-1 box-2))
	(ncons box-1)
	(multiple-value-bind (left-1 top-1 right-1 bottom-1)
	    (box-edges box-1)
	  (multiple-value-bind (left-2 top-2 right-2 bottom-2)
	      (box-edges box-2)
	    (let ((result nil))
	      (when (< top-1 top-2)
		(push (make-temporary-box left-1 top-1 right-1 top-2) result))
	      (when (> bottom-1 bottom-2)
		(push (make-temporary-box left-1 bottom-2 right-1 bottom-1) result))
	      (when (< left-1 left-2)
		(push (make-temporary-box left-1 (max top-1 top-2)
					  left-2 (min bottom-1 bottom-2))
		      result))
	      (when (> right-1 right-2)
		(push (make-temporary-box right-2 (max top-1 top-2)
					  right-1 (min bottom-1 bottom-2))
		      result))
	      result))))))

(defun do-box-copies (copies window protected-presentations off-screen-copies)
  ;; If copying left to right or top to bottom, should start on right/bottom;
  ;; if copying right to left or bottom to top, should start on left/top.
  ;; Vertical takes precedence over horizontal, since bitblt proceeds row by row.
  (flet ((delta-direction (delta-x delta-y)
	   (and delta-x delta-y
		(if (not (zerop delta-y))
		    (if (plusp delta-y) :backward :forward)
		    (if (plusp delta-x) :backward :forward)))))
    (let ((first-direction (loop for ((delta-x delta-y)) in copies
				 thereis (delta-direction delta-x delta-y))))
      (when first-direction			;If there's anything to do at all
	(if (loop for ((delta-x delta-y)) in copies
		  always (let ((direction (delta-direction delta-x delta-y)))
			   (or (null direction) (eq direction first-direction))))
	    ;; Easier case, all one direction.
	    (setq off-screen-copies (do-box-copies-internal copies window nil nil
							    protected-presentations
							    off-screen-copies))
	    (let ((width 0) (height 0))
	      (loop for (nil . boxes) in copies do
		(dolist (box boxes)
		  (incf height (box-height box))
		  (maxf width (box-width box))))
	      (let ((copies-forward nil)
		    (boxes-forward nil)
		    (copies-backward nil)
		    (boxes-backward nil))
		(loop for elem in copies do
		  (destructuring-bind ((&optional delta-x delta-y) . boxes) elem
		    (case (delta-direction delta-x delta-y)
		      (:forward
			(push elem copies-forward)
			;; Protected here is prior to move.
			(dolist (box boxes)
			  (push (box-copy-with-offsets box (- delta-x) (- delta-y))
				boxes-forward)))
		      (:backward
			(push elem copies-backward)
			(setq boxes-backward (append boxes-forward boxes))))))
		(using-resource (mark-table mark-table)
		  (tv:with-temporary-sheet-bit-raster (copy-array window width height)
		    (let ((running-y 0))
		      (loop for ((delta-x delta-y) . boxes) in copies-backward do
			(dolist (box boxes)
			  (send window :note-box-shift box delta-x delta-y
							   mark-table boxes-forward
							   protected-presentations)
			  (if (not (box-contains-box-p (send window :cursor-viewport)
						       (box-copy-with-offsets box
									      (- delta-x)
									      (- delta-y))))
			      (when (boxes-overlap-p (send window :cursor-viewport) box)
				(setq off-screen-copies (adjoin-box-1 off-screen-copies nil
								      box)))
			      (send window :bitblt-from-sheet tv:alu-seta
				    (box-width box) (box-height box)
				    (- (box-left box) delta-x) (- (box-top box) delta-y)
				    copy-array 0 running-y))
			  (incf running-y (box-height box)))))
		    (setq off-screen-copies (do-box-copies-internal copies-forward window
								    mark-table boxes-backward
								    protected-presentations
								    off-screen-copies))
		    (let ((running-y 0))
		      (loop for ((delta-x delta-y) . boxes) in copies-backward do
			(ignore delta-x delta-y)
			(dolist (box boxes)
			  (send window :bitblt tv:alu-seta
				(box-width box) (box-height box)
				copy-array 0 running-y
				(box-left box) (box-top box))
			  (incf running-y (box-height box)))))))))))))
  off-screen-copies)

(defun box-position-greaterp (box-1 box-2)
  (multiple-value-bind (x1 y1)
      (box-position box-1)
    (multiple-value-bind (x2 y2)
	(box-position box-2)
      (if (= y1 y2)
	  (> x1 x2)
	  (> y1 y2)))))

(defun box-position-lessp (box-1 box-2)
  (box-position-greaterp box-2 box-1))

(defun do-box-copies-internal (copies window
			       mark-table protected-boxes
			       protected-presentations off-screen-copies)
  (setq copies (loop for (deltas . boxes) in copies
		     when deltas
		       nconc (loop for to-box in boxes collect (cons to-box deltas))))
  (when copies
    ;; Start copying in the corner toward which we are copying.  We are only called
    ;; with a set that is uniform in direction.  E.g. when copying up and to the right
    ;; (all delta-x positive, all delta-y negative), start in the upper left corner.
    ;; This is so that we avoid the case where an earlier destination box overlaps a later
    ;; source box.  The ordinary dictionary order on top,left is not good enough.
    ;; It loses when the earlier box is taller enough that its destination box spans
    ;; the later new top (which therefore goes later) and later old top (causing a turd).
    ;; In this case, we should have made the smaller box earlier on the basis instead of
    ;; its horizontal position.  I believe the predicate below manages to do this.
    (let ((up-p (loop for (nil nil delta-y) in copies thereis (minusp delta-y)))
	  (left-p (loop for (nil delta-x nil) in copies thereis (minusp delta-x))))
      (setq copies (sort copies #'(lambda (box-1 box-2)
				    (multiple-value-bind (l1 t1 r1 b1)
					(box-edges box-1)
				      (multiple-value-bind (l2 t2 r2 b2)
					  (box-edges box-2)
					(cond (( b1 t2)	;Definitely above
					       up-p)
					      (( b2 t1)	;Definitely below
					       (not up-p))
					      (( r1 l2)	;Definitely left
					       left-p)
					      (( r2 l1)	;Definitely right
					       (not left-p))
					      ;; If you get here, the boxes overlap and
					      ;; you're bound to lose.
					      ))))
			 :key #'first)))
    (loop for (to-box delta-x delta-y) in copies do
      (setq off-screen-copies (shift-box delta-x delta-y to-box window
					 mark-table protected-boxes
					 protected-presentations
					 off-screen-copies))))
  off-screen-copies)

(defun do-box-erases (copies window)
  (let ((erase-elem (assoc 'nil copies)))
    (loop for box in (cdr erase-elem)
	  do (erase-box box window))))

(defun shift-box (delta-x delta-y destination-box window
		  mark-table protected-boxes
		  protected-presentations off-screen-copies)
  (multiple-value-bind (x y)
      (box-position destination-box)
    (send window :note-box-shift destination-box delta-x delta-y
	  mark-table protected-boxes protected-presentations)
    (let ((viewport (send window :cursor-viewport))
	  (unshifted-box (box-copy-with-offsets destination-box
						(- delta-x) (- delta-y))))
      ;; We only have redisplay work to do when the destination box intersects viewport.
      (when (boxes-overlap-p viewport destination-box)
	(if (box-contains-box-p viewport unshifted-box)
	    ;; old box contained in viewport - use bitblt
	    (send window :bitblt-within-sheet tv:alu-seta
		  (* (box-width destination-box) (if (plusp delta-x) -1 1))
		  (* (box-height destination-box) (if (plusp delta-y) -1 1))
		  (- x delta-x) (- y delta-y) x y)
	    ;; The source box is not totally contained in the viewport.
	    ;; Do as much by bitblt as possible.  The rest is offscreen.
	    (let (source-intersection
		  destination-intersection
		  visible-intersection)
	      (if (and (boxes-overlap-p viewport unshifted-box)	; source box in viewport?
		       (setq source-intersection	; compute source intersection
			     (box-intersection viewport unshifted-box))
		       (setq destination-intersection	; destination intersection
			     (box-intersection viewport destination-box))
		       (setq visible-intersection
			     (box-intersection
			       (box-copy-with-offsets source-intersection delta-x delta-y)
			       destination-intersection)))
		  ;; Bitblt the visible part of the destination that comes from the
		  ;; visible part of the source.
		  (multiple-value-bind (clipped-x clipped-y)
		      (box-position visible-intersection)
		    ;; use bitblt for the visible part of destination that is coming from
		    ;; on screen
		    (send window :bitblt-within-sheet tv:alu-seta
			  (* (box-width visible-intersection) (if (plusp delta-x) -1 1))
			  (* (box-height visible-intersection) (if (plusp delta-y) -1 1))
			  (- clipped-x delta-x)  (- clipped-y delta-y) clipped-x clipped-y)
		    ;; The part of the source that ends up on screen that wasn't
		    ;; there already, has to be added to off-screen-copies.
		    (loop for destination-box-from-off-screen
			      in (box-difference destination-intersection visible-intersection)
			  do (setq off-screen-copies
				   (adjoin-box-1 off-screen-copies nil
						 destination-box-from-off-screen))))
		  ;; Source is not on the screen and cannot be bitblt'ed.
		  (setq off-screen-copies
			(adjoin-box-1 off-screen-copies nil destination-box))))))))
  off-screen-copies)

(defun erase-box (box window &optional (try-clear-region t))
  (if (and try-clear-region (operation-handled-p window :clear-region))
      (send window :clear-region (box-left box) (box-top box)
				 (box-right box) (box-bottom box))
      (send window :draw-rectangle (box-width box) (box-height box)
				   (box-left box) (box-top box)
				   :erase)))

;;; These are only used inside a prepare-sheet
(defvar *shift-viewport-temp-box-1* (make-instance 'box))
(defvar *shift-viewport-temp-box-2* (make-instance 'box))

;;; This shifts the good old bits between the boxes and returns two
;;; boxes describing the areas that need to be filled up.
;;; Note that these boxes are not in world coordinates and are not newly consed.
;;; This function should only be called inside a prepare-sheet.
(defun shift-viewport-box (old-box new-box window &optional (clear-out-too t))
  (unless (box-equal old-box new-box)
    (multiple-value-bind (old-left old-top old-right old-bottom)
	(box-edges old-box)
      (multiple-value-bind (new-left new-top new-right new-bottom)
	  (box-edges new-box)
	(let ((x-for ( new-left old-left))
	      ;; We'd rather do it in the D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")forward0 x direction, because the BITBLTs are
	      ;; faster by a factor of 1.6 or so.  The most common case is scrolling,
	      ;; where the old-left and -right are the same as the new- ones.
	      (y-for ( new-top old-top)))
	  (send window :bitblt-within-sheet tv:alu-seta
		(if x-for (- old-right new-left) (- old-left new-right))
		(if y-for (- old-bottom new-top) (- old-top new-bottom))
		(if x-for (- new-left old-left) 0)
		(if y-for (- new-top old-top) 0)
		(if x-for 0 (- old-left new-left))
		(if y-for 0 (- old-top new-top)))
	  (flet ((make-erase-box (box width height left top)
		   (set-box-edges box left top (+ left width) (+ top height))
		   (and (box-well-formed-p box) box)))
	    (let ((tall-skinny-box (make-erase-box *shift-viewport-temp-box-1*
				     (if x-for (- new-right old-right) (- old-left new-left))
				     (if y-for (- old-bottom new-top) (- new-bottom old-top))
				     (if x-for (- old-right new-left) 0)
				     (if y-for 0 (- old-top new-top))))
		  (short-fat-box (make-erase-box *shift-viewport-temp-box-2*
				   (- old-right old-left)
				   (if y-for (- new-bottom old-bottom) (- old-top new-top))
				   0
				   (if y-for (- old-bottom new-top) 0))))
	      (when clear-out-too
		(when tall-skinny-box
		  (erase-box tall-skinny-box window))
		(when short-fat-box
		  (erase-box short-fat-box window)))
	      (values tall-skinny-box short-fat-box))))))))

(defun box-set-difference-sorted (box sorted-boxes)
  (let ((tallest-box-height (coordinate-sorted-set-tallest-box-height sorted-boxes))
	(result (list box)))
    (multiple-value-bind (nil top right bottom)
	(box-edges box)
      (let ((index (coordinate-sorted-set-index-for-position sorted-boxes right bottom
							      :key #'identity)))
	(loop for index from (1- index) downto 0 do
	  (let ((other-box (aref sorted-boxes index)))
	    (when ( (box-bottom other-box) top)
	      (return))
	    (when (box-contains-box-p other-box box)
	      (return-from box-set-difference-sorted nil))
	    (when (boxes-overlap-p box other-box)
	      (setq result (loop for box in result
				 nconc (box-difference box other-box))))))
	(loop for index from index below (fill-pointer sorted-boxes) do
	  (let ((other-box (aref sorted-boxes index)))
	    (when ( (box-top other-box) (+ bottom tallest-box-height))
	      (return))
	    (when (box-contains-box-p other-box box)
	      (return-from box-set-difference-sorted nil))
	    (when (boxes-overlap-p box other-box)
	      (setq result (loop for box in result
				 nconc (box-difference box other-box))))))))
    result))

(compile-flavor-methods box)
