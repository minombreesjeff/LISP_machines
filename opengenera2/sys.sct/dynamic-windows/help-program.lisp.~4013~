;;; -*- Mode: LISP; Syntax: Common-LISP; Package: DW; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; An extension to the program system for Sage based help.

(define-program-framework help-program
  :command-definer t
  :command-table (:inherit-from nil)
  :selectable nil)

(setf (mouse-char-for-gesture :command-menu-help) #\Mouse-Middle)

(define-presentation-type program-name ())

(defmethod (help-program-draw-title help-program) (stream)
  (dw:with-output-as-presentation (:stream stream
				   :object (program-name self)
				   :type 'program-name)
    (send stream :display-centered-string (program-pretty-name self))))

;;; All this hair is to get the typeout window used for printing help to ask to flush
;;; itself after you get that help.
(define-presentation-type window-wakeup-help ()
   :expander 'window-wakeup)

(defun help-program-check-for-help-wakeup (blip)
  (presentation-blip-case blip
    (window-wakeup-help
      (throw 'return-from-read-command
	(values nil nil :blank-line)))
    (otherwise
      (default-window-wakeup-handler blip))))

(defmethod (help-program-help help-program) (stream string-so-far &optional (format-string "")
								  &rest format-args)
  (let ((program-name (program-pretty-name self)))
    (format stream "~&You are typing a command at the ~A." program-name)
    (when (equal string-so-far "")		;Really top level
      (format stream "

~?

For accessing more detailed documentation about the ~A itself,
click on the ~@\\presentation\\ command.

"
	      format-string format-args program-name '(com-help) 'cp:command)
      ;; Inform command loop.
      (send stream :force-kbd-input (make-presentation-blip
				      :presentation-type 'window-wakeup-help
				      :object (si:follow-syn-stream stream)))))
  (terpri stream))
(defvar *help-topic-available-cache* (make-hash-table :test #'zl:equal))
(defvar *help-topic-available-cache-tick* 0)
(defun help-topic-available (program &rest name-components)
  (declare (values name record-group))
  (if (= *help-topic-available-cache-tick* (fill-pointer sage:*topic-aarray*))
      (multiple-value-bind (entry found-p)
	  (stack-let ((key (list* program name-components)))
	    (gethash key *help-topic-available-cache*))
	(when found-p
	  (return-from help-topic-available
	    (when entry (values (first entry) (second entry))))))
    (clrhash *help-topic-available-cache*)
    (setq *help-topic-available-cache-tick* (fill-pointer sage:*topic-aarray*)))
  (with-data-stack
    (let ((topic (first name-components)))
      (when (or (rest name-components) (symbolp topic))
	(let ((program-name (program-pretty-name program)))
	  (setq topic (make-stack-array (loop for item in name-components
					      sum 1
					      sum (string-length
						    (if (eq item :program)
							program-name item)))
					:fill-pointer 0 :element-type 'character))
	  (loop for (item . rest) on name-components do
	    (if (eq item :program)
		(vector-push-portion-extend topic program-name)
		(vector-push-portion-extend topic item
					    (string-search-not-char #\sp item)
					    (1+ (string-search-not-char #\sp item
									:from-end t))))
	    (when rest
	      (vector-push-extend #\sp topic)))))
      (let ((entry (si:aarray-lookup topic sage:*topic-aarray*)))
	(setf (gethash (list* program (copy-list name-components))
		       *help-topic-available-cache*)
	      entry)
	(when entry (values (first entry) (second entry)))))))


(defmethod (overview-help-topic help-program :default) ()
  `(:program "overview help topics"))

(defmethod (map-command-menu-item-to-help-topic help-program :default) (string)
  `("the" ,string :program "menu item"))

(defmethod (map-command-name-to-help-topic help-program :default) (symbol)
  (multiple-value-bind (found name)
      (cp:command-in-command-table-p symbol (dw:program-command-table self))
    (when found
      `("The" ,name ,(program-pretty-name self) "command"))))

(defmethod (map-program-name-to-help-topic help-program :default) (name)
  `("the" ,(string-capitalize-words name)))

(defmethod (map-avv-query-to-help-topic help-program :default) (query)
  (let ((prompt (getf (dw::accept-values-query-other-accept-options query) :prompt)))
    (when prompt
      `("the" ,prompt :program "option"))))



(define-presentation-type program-help-overview-topic ((&key program))
   :expander 'sage:record-group
   :parser ((stream &key original-type initially-display-possibilities)
	    (values
	      (dw:complete-from-sequence
		(when program
		  (multiple-value-bind (available record-group)
		      (apply #'help-topic-available program (overview-help-topic program))
		    (when available
		      (let ((installed (sage::find-record-for-lookup record-group)))
			(when installed
			  (cdr (assoc 'sage:expand (sage:doc-record-callees installed))))))))
		stream
		:partial-completers '(#\space)
		:type original-type
		:initially-display-possibilities initially-display-possibilities
		:name-key #'sage::record-group-topic-completion)))
   :description "an overview topic")

(define-presentation-type command-menu-item-for-help ((&key command-table))
   :abbreviation-for `((command-menu-item :command-table ,command-table))
   :parser ((stream &key original-type initially-display-possibilities)
	    (values
	      (completing-from-suggestions (stream :allow-any-input nil
						   :type original-type
						   :partial-completers '(#\space)
						   :initially-display-possibilities
						    initially-display-possibilities)
		;; Handlers from any menu level.
		(cp::map-over-command-table-inheritance (cp:find-command-table command-table)
		  #'(lambda (command-table)
		      (dolist (handler (cp::command-table-menu-accelerator-table
					 command-table))
			(suggest (command-menu-handler-command-name handler))))))))
   :description "a command menu item")

(define-presentation-type help-topic ((&key program))
   :history t
   :data-arguments-are-disjoint nil
   :printer ((object stream)
	     (cond ((stringp object)
		    (write-string object stream))
		   ((listp object)
		    (loop for first first t then nil
			  for string in object
			  unless first do (write-char #\Space stream)
			  if (eq string :program)
			    do (if program
				   (write-string (program-pretty-name program))
				   (princ string stream))
			  else do (write-string string stream)))
		    (t (present object 'sage:record-group :stream stream))))
   :parser ((stream &key initially-display-possibilities default)
	    (let ((command-table (program-command-table program)))
	      (multiple-value-bind (object type)
		  (accept `((or ((program-help-overview-topic :program ,program))
				((cp:command-name :command-table ,command-table))
				((command-menu-item-for-help :command-table ,command-table))))
			  :initially-display-possibilities initially-display-possibilities
			  :default default :stream stream :prompt nil)
		(ignore type)			;Always seems to be OR now.
		(values
		  (cond ((symbolp object)	
			;(presentation-subtypep type 'cp:command-name)
			 (map-command-name-to-help-topic program object))
			((stringp object)	
			;(presentation-subtypep type 'command-menu-item-for-help)
			 (map-command-menu-item-to-help-topic program object))
			(t object))))))
   :presentation-subtypep ((subtype supertype)
			   (dw:with-presentation-type-arguments (help-topic subtype)
			     (let ((sub-program program))
			       (dw:with-presentation-type-arguments (help-topic supertype)
				 (let ((super-program program))
				   (values (or (null super-program)
					       (eq super-program sub-program))
					   t)))))))

(define-help-program-command (com-help )
    ((topic `((token-or-type (("Prompt" . nil)) ((help-topic :program ,self))))
	    :default nil :provide-default t :prompt "about"))
   (unless topic
     (format t "~&You are typing at the ~A.
Enter the name of a command or concept to document, or click on a menu item.~%"
	     (program-pretty-name self))
     (setq topic (accept `((help-topic :program ,self))
			 :prompt "Help topic" :stream *standard-input*)))
   (block nodoc
     (when (or (stringp topic) (listp topic))
       (multiple-value-bind (available record-group)
	   (if (stringp topic)
	       (help-topic-available self topic)
	       (apply #'help-topic-available self topic))
	 (unless available
	   (format t "~&~:(~@\\presentation\\~) isn't documented yet.~%"
		   topic `((help-topic :program ,self)))
	   (return-from nodoc nil))
	 (setq topic record-group)))
     (sage::com-show-documentation topic)))

(define-command-menu-handler ("Help" help-program :help :gesture (:left :right)) ()
  `(com-help))

(defun help-command-if-available (program &rest topic)
  (multiple-value-bind (available record-group)
      (apply #'help-topic-available program topic)
    (when available
      `(com-help ,record-group))))

(define-presentation-to-command-translator help-about-this
   (command-menu-item-for-help :gesture :command-menu-help
			       :documentation ((string)
					       (format nil "Help about ~A" string)))
   (string &key window)
  (let ((program (current-program :type 'help-program :window window :error-p nil)))
    (when program
      (apply #'help-command-if-available
	     program (map-command-menu-item-to-help-topic program string)))))

(define-presentation-translator program-help (program-name help-topic) (name &key window)
  (let ((program (current-program :type 'help-program :window window :error-p nil)))
    (when program
      (multiple-value-bind (available record-group)
	  (apply #'help-topic-available program (map-program-name-to-help-topic program name))
	(when available record-group)))))
(define-presentation-to-command-translator help-about-this-program
   (program-name :gesture :command-menu-help
		 :documentation ((program-name)
				 (format nil "Help about ~:(~A~)" program-name)))
   (name &key window)
  (let ((program (current-program :type 'help-program :window window :error-p nil)))
    (when program
      (apply #'help-command-if-available program
	     (map-program-name-to-help-topic program name)))))

(define-presentation-translator option-help (accept-values-query-display help-topic)
				(query &key window)
  (let ((program (current-program :type 'help-program :window window :error-p nil)))
    (when program
      (let ((topic-name (map-avv-query-to-help-topic program query)))
	(when topic-name
	  (multiple-value-bind (available record-group)
	      (apply #'help-topic-available program topic-name)
	    (when available record-group)))))))

(define-help-program-command (com-command-help ) ()
   (let ((command (read-program-command self :prompt "Help for command: ")))
     (com-help (map-command-name-to-help-topic self command))))

(defun import-documentation-commands (&rest commands)
  (let ((command-table (cp:find-command-table 'help-program)))
    (loop for command in commands
	  do
      (cp:command-table-install-command command-table command))))

(import-documentation-commands 'sage::com-show-documentation
			       'ddex::com-show-documentation-overview)


#||
(define-help-program-command (com-show-missing-help :provide-output-destination-keyword t)
    ()
   (dw::help-program-show-missing-help self))

(defun help-program-show-missing-help (program)
  (let ((commands nil)
	(menu-items nil)
	)
    (cp::map-over-command-table-inheritance (dw:program-command-table program)
      #'(lambda (comtab)
	  (loop for (name . command) being the array-elements
		    of (cp::command-table-command-aarray comtab)
		do (unless (apply #'dw:help-topic-available program
				  (map-command-name-to-help-topic program command))
		     (pushnew command commands)))
	  (dolist (handler (cp::command-table-menu-accelerator-table comtab))
	    (let ((name (dw::command-menu-handler-command-name handler)))
	      (unless (apply #'dw:help-topic-available program
			     (map-command-menu-item-to-help-topic program name))
		(pushnew name menu-items :test #'string-equal))))))
    (format t "~&Commands:~%")
    (format-item-list commands :presentation-type 'cp:command-name)
    (format t "~2&Menu items:~%")
    (format-item-list menu-items :presentation-type 'command-menu-item)))
||#
