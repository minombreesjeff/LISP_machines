;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Tests for subtype-search algorithms.  Note that this tests them as a matched
;;; pair.  There is no other meaningful approach, since the contract is just that
;;; the lookup mapper has to find what the non-lookup mapper stored in the table.
;;; I don't know how to test for the predicate being right.

;;; This is just a simplified version of D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")presentation-subtypep0, with an additional
;;; argument.

(defun test-type-search-1 (supertype-major subtype supertype &optional trace-p
			   object object-p)
  (declare (values subtypep known-p))
  (labels ((exit (subtypep known-p)
	    (declare (sys:downward-function)
		     (dbg:invisible-frame :accept-internals))
	    (case trace-p
	      (:break (break ">>> Returning ~S, ~S" subtypep known-p))
	      ((nil))
	      (otherwise (format t "~&>>> Returning ~S, ~S~%" subtypep known-p)))
	    (return-from test-type-search-1 (values subtypep known-p))))
    (cond ((eq subtype supertype) (exit t t))
	  ((or (eq subtype 'no-type) (eq supertype 'no-type))
	   ;; We only have to this case these here, since it doesn't participate in the
	   ;; type hierarchy.
	   ;; This must be before the tests for nullity of the subtype.
	   (exit nil t))
	  ((null supertype) (exit nil t))	;Was (or (null subtype) (null supertype))
	  ((null subtype) (exit t t))		;But I think this is right.  See CLtL pg 33.
	  ((eq supertype t) (exit t t))
	  ((eq subtype t) (exit nil t)))
    (map-over-type-hierarchy (if supertype-major subtype supertype) supertype-major nil
     (lambda (raw-found-subtype raw-subkey raw-subtype-predicate)
       (declare (dbg:invisible-frame :presentation-handler-search))
       (map-over-type-hierarchy (if supertype-major supertype subtype)
				(not supertype-major) t
	(lambda (raw-found-supertype raw-superkey raw-supertype-predicate)
	  (declare (dbg:invisible-frame :presentation-handler-search))
	  (let ((found-subtype (if supertype-major raw-found-subtype raw-found-supertype))
		(subkey (if supertype-major raw-subkey raw-superkey))
		(found-supertype (if supertype-major
				     raw-found-supertype
				   raw-found-subtype))
		(superkey (if supertype-major raw-superkey raw-subkey))
		(predicate (if supertype-major raw-supertype-predicate raw-subtype-predicate)))
	    (with-type-decoded (supertype-name supertype-dargs) found-supertype
	      (let ((desc (presentation-type-descriptor supertype-name nil)))
		(when trace-p
		  (format t "~&[~S, ~S]~@
		       Keys: [~S, ~S]~:[~;~@
		       Predicate: ~S~]"
		    found-subtype found-supertype
		    subkey superkey
		    predicate predicate))
		(cond ((eql subkey superkey)
		       (multiple-value-bind (subtypep known-p)
			   (cond ((null supertype-dargs)
				  (values t t))
				 ((not desc)
				  (fringe-eql-subtypep subkey superkey))
				 (t (with-type-decoded (subtype subtype-dargs)
						       found-subtype
				      (with-type-decoded (supertype supertype-dargs)
							 found-supertype
					(stack-let ((subtype
						      `(,subtype ,@subtype-dargs))
						    (supertype
						      `(,supertype ,@supertype-dargs)))
					  (presentation-type-subtypep-compare
					    desc
					    subtype subkey
					    supertype superkey))))))
			 ;; If it's 1) Known to be subtypep-reducible
			 ;;      or 2) it's known and we aren't going to do
			 ;;	    type reduction
			 ;;      or 3) or there's no data args to do reduction on
			 ;; Then we can terminate the search
			 (when  (or (and known-p subtypep object-p)
				    (and (not object-p) known-p)
				    (and subtypep (null supertype-dargs)))
			   ;; don't cut off search if we may have type reduction
			   (when (and subtypep object-p predicate)
			     (let ((pred (funcall predicate object)))
			       (when trace-p
				 (if pred
				     (format t "~&>>> Predicate ~S succeeded.~%" predicate)
				   (format t "~&>>> Predicate ~S failed.~%" predicate)))
			       (unless pred (setq subtypep nil))))
			   (exit subtypep known-p))))
		      ((eq superkey t)
		       (let ((result t))
			 (when (and object-p predicate)
			   (let ((pred (funcall predicate object)))
			     (when trace-p
			       (if pred
				   (format t "~&>>> Predicate ~S succeeded.~%" predicate)
				 (format t "~&>>> Predicate ~S failed.~%" predicate)))
			     (unless pred
			       (setq result nil))))
			 (exit result t)))
		      ((and (eql (if (atom subkey) subkey (car subkey))
				 (if (atom superkey) superkey (car superkey)))
			    (or (not (presentation-type-disallow-atomic-type desc))
				(and (listp subkey) (listp superkey))))
		       (multiple-value-bind (subtypep known-p)
			   (cond ((null supertype-dargs)
				  (values t t))
				 ((null desc)
				  (fringe-eql-subtypep subkey superkey))
				 (t (with-type-decoded (subtype subtype-dargs)
						       found-subtype
				      (with-type-decoded (supertype supertype-dargs)
							 found-supertype
					(stack-let ((subtype
						      `(,subtype ,@subtype-dargs))
						    (supertype
						      `(,supertype ,@supertype-dargs)))
					  (presentation-type-subtypep-compare
					    desc
					    subtype subkey
					    supertype superkey))))))
			 ;; If it's 1) Known to be subtypep-reducible
			 ;;      or 2) it's known and we aren't going to do
			 ;;	    type reduction
			 ;;      or 3) or there's no data args to do reduction on
			 ;; Then we can terminate the search
			 (when (or (and known-p subtypep object-p)
				   (and (not object-p) known-p)
				   (and subtypep (null supertype-dargs)))
			   (when (and subtypep object-p predicate)
			     (let ((pred (funcall predicate object)))
			       (when trace-p
				 (if pred
				     (format t "~&>>> Predicate ~S succeeded.~%" predicate)
				   (format t "~&>>> Predicate ~S failed.~%" predicate)))
			       (unless pred (setq subtypep nil))))
			   (exit subtypep known-p)))))))))
	nil (and object-p supertype-major)))
     nil (and object-p (not supertype-major)))
    (exit nil nil)))

(defun test-type-search-case (subtype supertype value known-p &key known-problem trace-p
			      (object nil object-p))
  (condition-case-if (not trace-p)
		     (.error.)
       (macrolet ((equiv (a b)
		    `(or (and ,a ,b)
			 (and (not ,a) (not ,b)))))
	 (when trace-p
	   (format t "~& -- Supertype Major --~%"))
	 (multiple-value-bind (super-value super-known)
	     (test-type-search-1 t subtype supertype trace-p object object-p)
	   (when trace-p
	     (format t "~& -- Subtype Major --~%"))
	   (multiple-value-bind (sub-value sub-known)
	       (test-type-search-1 nil subtype supertype trace-p object object-p)
	     (labels ((compare-with-real-function (subtypep known-p)
			(when (and subtypep (not known-p))
			  (warn "For subtype ~S and supertype ~S,~@
				 >>> Returned value = T, known-p = NIL, which is illegal."
				subtype supertype))
			(multiple-value-bind (real-subtypep real-known-p real-predicate)
			    (presentation-subtypep subtype supertype object-p)
			  (when (and real-subtypep object-p real-predicate)
			    (setq real-subtypep (funcall real-predicate object)))
			  (if (neq subtypep real-subtypep)
			      (warn "For subtype ~S, and supertype ~S,~@
				     >>> Test value = ~S, real value = ~S."
				    subtype supertype
				    subtypep real-subtypep)
			    (unless (eq known-p real-known-p)
			      (warn "For subtype ~S and supertype ~S,~@
				     >>> Test known-p = ~S, real known-p = ~S."
				    subtype supertype
				    known-p real-known-p))))))
	       (compare-with-real-function sub-value sub-known)
	       (compare-with-real-function super-value super-known))
	     (unless (equiv super-value sub-value)
	       (warn "~:[~*~;--- This case is not expected to work yet ---~@
		 [~A]~&~]For subtype ~S and supertype ~S,~@
		 the subtype-major case gave ~S and the supertype-major case gave ~S."
		     known-problem known-problem subtype supertype sub-value super-value))
	     (unless (equiv super-known sub-known)
	       (warn "~:[~*~;--- This case is not expected to work yet ---~@
		 [~A]~&~]For subtype ~S and supertype ~S,~@
		 The subtype-major case is ~:[un~;~]known and the supertype-major case is ~
		 ~:[un~;~]known."
		     known-problem known-problem subtype supertype sub-known super-known))
	     (when (and (equiv super-value sub-value) (equiv super-known sub-known))
	       ;; Don't give warnings based on one, if we have an inconsistency.
	       (unless (equiv super-value value)
		 (warn "~:[~*~;--- This case is not expected to work yet ---~@
		   [~A]~&~]For subtype ~S and supertype ~S,~@
		   the result was ~S, but should be ~S."
		       known-problem known-problem subtype supertype super-value value))
	       (unless (equiv super-known known-p)
		 (if known-p
		     (warn "~:[~*~;--- This case is not expected to work yet ---~@
		      [~A]~&~]For subtype ~S and supertype ~S,~@
		       The result was unknown, but it should have been known."
			   known-problem known-problem subtype supertype)
		   (warn "~:[~*~;--- This case is not expected to work yet ---~@
		     [~A]~&~]For subtype ~S and supertype ~S,~@
		     The result was known, but the test did not know.  This result should~@
		     be checked.  If it is correct, the test should be updated."
			 known-problem known-problem subtype supertype)))))))
     (error (warn "~:[~*~;--- This case is not expected to work yet ---~@
		     [~A]~&~]For subtype ~S and supertype ~S,~@
		     The test signaled an error:  ~~A~."
			 known-problem known-problem subtype supertype .error.))))


;;; Test cases have been moved to HANDLER-TEST

;;;1 define-presentation-type0's for 1instance 0and 1structure0 have been moved
;;; too SYS:DYNAMIC-WINDOWS;PRESENTATION-TYPES.

;;; :Show Mouse Handler debugging command has moved to SYS:CP;INFO-COMMANDS.LISP
;;; because of loading dependencies.
