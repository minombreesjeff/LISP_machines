;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DW; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; :Show Mouse Handler debugging command

(defun handler-name-p (symbol)
  (loop for f in *presentation-mouse-handler-functions*
	for n = (presentation-mouse-handler-functions-name f)
	thereis (eql n symbol)))

(define-presentation-type handler-name ()
   :abbreviation-for `((and symbol ((satisfies handler-name-p))))
   :printer ((object stream) (prin1 object stream))
   :parser ((stream &key initially-display-possibilities)
	    (complete-input-from-symbol-set stream
					    *presentation-mouse-handler-names* 'handler-name
					    initially-display-possibilities)))

(define-presentation-type handler-instance (() &key
					    (displayed-context-type
					      () displayed-context-type-p)
					    (displayed-presentation-type
					      () displayed-presentation-type-p))
   :printer ((handler stream)
	     (let* ((f (presentation-mouse-handler-handler-functions handler))
		    (name (presentation-mouse-handler-functions-name f))
		    (context (presentation-mouse-handler-context-presentation-type handler))
		    (presentation-type
		      (presentation-mouse-handler-displayed-presentation-type handler))
		    (gesture (presentation-mouse-handler-gesture handler)))
	       (present name 'handler-name :stream stream)
	       (format stream " (~S): [" gesture)
	       (present (if displayed-context-type-p
			    displayed-context-type
			    context)
			'presentation-type :stream stream)
	       (write-char #\Space stream)
	       (present (if displayed-presentation-type-p
			    displayed-presentation-type
			    presentation-type)
			'presentation-type :stream stream)
	       (write-char #\Space stream)
	       (write-char #\] stream))))

(cp:define-command (show-mouse-handlers :command-table "Presentation")
    ((handler-name 'handler-name)
     &key
     (show-defined-handlers 'boolean :default t)
     (show-table-handlers 'boolean :default t))
  (when show-defined-handlers
    (format t "~&Handlers Defined (Gesture) [CONTEXT PRESENTATION-TYPE]")
    (loop for h in *presentation-mouse-handlers*
	  for n = (presentation-mouse-handler-functions-name
		    (presentation-mouse-handler-handler-functions h))
	  do
      (when (eql n handler-name)
	(fresh-line)
	(present h 'handler-instance))))
  (when show-table-handlers
    (format t "~&Handlers in table (Gesture) [CONTEXT PRESENTATION-TYPE]")
    (maphash
      (lambda (ignore context-table)
	(maphash
	  (lambda (ignore handlers-list)
	    (loop for hte in handlers-list
		  for htt = (handler-table-entry-types hte)
		  for h = (handler-table-entry-handler hte)
		  do
	      (when (eql handler-name
			 (presentation-mouse-handler-functions-name
			   (presentation-mouse-handler-handler-functions h)))
		(fresh-line)
		(present h `((handler-instance)
			     :displayed-context-type ,(handler-table-types-context-type htt)
			     :displayed-presentation-type
			     ,(handler-table-types-displayed-type htt))))))
	  context-table))
      *presentation-type-mouse-handler-table*)))


;; Goes here, for now.
(define-presentation-type presentation-type-name ()
   :abbreviation-for `((and symbol ((satisfies presentation-type-name-p))))
   :history t
   :describer ((stream &key plural-count)
	       (write-string 
		 (cond ((null plural-count) "the name of a presentation type")
		       ((eq plural-count t) "names of presentation types")
		       ((numberp plural-count)
			(format nil "the names of ~R presentation types" plural-count))
		       (t (format nil "the names of ~A presentation types" plural-count)))
		 stream))
   :printer ((object stream) (prin1 object stream))
   :parser ((stream &key initially-display-possibilities)
	    (complete-input-from-symbol-set stream
					    *all-presentation-types* 'presentation-type-name
					    initially-display-possibilities)))

(define-presentation-translator presentation-type-to-name
   (presentation-type presentation-type-name)
   (presentation-type)
   (presentation-type-name presentation-type))

(cp:define-command (show-presentation-type :command-table "Presentation")
    ((presentation-type-name 'presentation-type-name)
     &key (for-lookup 'boolean :default nil :mentioned-default t)
	  (include-predicate 'boolean :default for-lookup :mentioned-default t))
   (let ((arglist (presentation-type-arglist presentation-type-name)))
     (format t "~&Arglist:  ~S~%" arglist)
     (if (not (or (null (car arglist))
		  (member (caar arglist) '(&rest &optional &key))))
	 (format t "~&This type cannot be expanded without data arguments.~%")
       (format t "~&Supertypes:~%")
       (sys:with-indentation (*standard-output* 2)
	 (map-over-type-hierarchy presentation-type-name t nil
	   (lambda (super-type key predicate)
	     (ignore key predicate)
	     (present super-type 'presentation-type)
	     (terpri))))
       (when for-lookup
	 (format t "~&Supertypes for lookup:~%")
	 (sys:with-indentation (*standard-output* 2)
	   (map-over-type-hierarchy presentation-type-name t t
	    (lambda (super-type key predicate)
	      (ignore key predicate)
	      (present super-type 'presentation-type)
	      (terpri)))))
       (format t "~&Subtypes:~%")
       (sys:with-indentation (*standard-output* 2)
	 (map-over-type-hierarchy presentation-type-name nil nil
	  (lambda (sub-type key predicate)
	    (ignore key predicate)
	    (present sub-type 'presentation-type)
	    (terpri))))
       (when for-lookup
	 (format t "~&Subtypes for lookup:~%")
	 (sys:with-indentation (*standard-output* 2)
	   (map-over-type-hierarchy presentation-type-name nil t
	    (lambda (sub-type key predicate)
	      (ignore key)
	      (present sub-type 'presentation-type)
	      (when predicate
		(write-string " satisfying ")
		(present predicate 'expression))
	      (terpri))
	    nil include-predicate))))))

(cp:define-command (show-handlers-for-types :command-table "Presentation")
    ((context-type 'presentation-type
		   :prompt "Context type")
     (presentation-type 'presentation-type
			:prompt "Presentation type"))
   (let ((handler-alist (presentation-context-mouse-handlers-search presentation-type
								    context-type)))
     (formatting-table (*standard-output* :inter-column-spacing 50)
       (formatting-row (*standard-output*)
	 (formatting-cell (*standard-output* :align :center)
	   (format t "~'BHandler name~"))
	 (formatting-cell (*standard-output* :align :center)
	   (format t "~'BPredicate~"))
	 (formatting-cell (*standard-output* :align :center)
	   (format t "~'BGesture~")))
       (stack-let ((duplicates (make-array 100 :fill-pointer 0)))
	 (map-over-handler-alist-and-mouse-chars-in-context nil nil handler-alist
							    t context-type
	    (lambda (handler-entry gesture mouse-char gesture-match-p)
	      (declare (ignore gesture-match-p))
	      (let ((handler (if (atom handler-entry) handler-entry (first handler-entry)))
		    (pred (unless (atom handler-entry) (cdr handler-entry))))
		(unless (find handler duplicates)
		  (vector-push-extend handler duplicates)
		  (formatting-row (*standard-output*)
		    (formatting-cell (*standard-output*)
		      (present handler 'presentation-mouse-handler))
		    (formatting-cell (*standard-output* :align :center)
		      (present (not (null pred)) 'boolean))
		    (formatting-cell (*standard-output* :align :left)
		      (format t "~@[~S ~]~@[(~@:C)~]" gesture mouse-char)))))))))))

;;;; Debugging tools

(defun presentation-debug-p (presentation)
  (or *debug-anonymous-presentations*
      (not (presentation-anonymous-p presentation))))

(define-presentation-translator describe-presentation
  (t form
   :gesture :describe-presentation
   :tester ((ignore &key presentation)
	    (presentation-debug-p presentation))
   :menu :presentation-debugging
   :blank-area t)
  (ignore &key presentation)
  `(describe ',presentation))

(define-presentation-translator edit-presentation-handler
   (t cp:command
    :gesture ()
    :tester ((ignore &key presentation handler input-context)
	     (and (presentation-debug-p presentation)
		  (standard-command-translator-tester-1 '(si:com-edit-definition)
							handler input-context)))
    :do-not-compose t
    :documentation "Edit handler for this presentation"
    :menu :presentation-debugging
    :blank-area t)
   (ignore &key presentation window)
  (let ((name (edit-presentation-handler-internal presentation window)))
    (when name
      `(si:com-edit-definition ,name define-presentation-translator))))

(defun edit-presentation-handler-internal (presentation window)
  (let ((handler-list nil))
    (map-over-presentation-mouse-handlers presentation window t
      (lambda (handler context gesture mouse-char)
	(pushnew (list
		   (presentation-mouse-handler-debugging-description
		     :handler handler :window window
		     :gesture gesture :mouse-char mouse-char
		     :input-context context :presentation presentation)
		   :value (presentation-mouse-handler-functions-name
			    (presentation-mouse-handler-handler-functions handler)))
		 handler-list :key #'third)))
    (setq handler-list (sort handler-list #'string-lessp :key #'car))
    (menu-choose handler-list
		 :prompt (presentation-menu-label "Edit handler on " presentation)
		 :near-mode (presentation-near-mode presentation window))))

(defun presentation-mouse-handler-debugging-description (&rest options
							 &key handler mouse-char
							 &allow-other-keys)
  (with-output-to-string (stream)
    (prin1 (presentation-mouse-handler-functions-name
	     (presentation-mouse-handler-handler-functions handler))
	   stream)
    (when mouse-char
      (format stream " (~C)" mouse-char))
    (format stream ": ~A" 
	    (apply #'presentation-mouse-handler-context-documentation
		   :for-menu-p t
		   options))))

(define-presentation-action presentation-debugging-menu
  (t t
   :documentation "Presentation debugging menu"
   :gesture :presentation-debugging-menu
   :menu (t :style (nil :italic nil))
   :defines-menu :presentation-debugging
   :context-independent t
   :blank-area t)
  (ignore &rest args)
  (return-from presentation-debugging-menu
    (apply #'call-presentation-menu :presentation-debugging args)))
