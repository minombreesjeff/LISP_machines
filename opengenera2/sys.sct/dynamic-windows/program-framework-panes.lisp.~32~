;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Program panes

;;; Representation of a program pane type.
(defstruct (program-pane-type :named :conc-name
			      (:print-function
				(lambda (type stream ignore)
				  (si:printing-random-object (type stream :typep)
				    (write (program-pane-type-name type)
					   :stream stream)))))
  name		; of the type, probably a keyword
  allowed-options	; keywords allowed in the pane clause
  default-init-plist	; init plist for the pane flavor
  )

;;; Macro to register a new program pane type.
;;; Specify the allowed keyword options that that pane's clause,
;;; the default values for any of the pane option vars, and the
;;; initial init-plist for the pane flavor.
(defprop define-program-pane-type "Pane type" si:definition-type-name)

(defmacro define-program-pane-type (name allowed-options &rest default-init-plist)
  `(if (record-source-file-name ',name 'define-program-pane-type)
       (add-new-program-pane-type ',name ',allowed-options ',default-init-plist)))

(define-presentation-type menu-row-item-enumeration ()
   :abbreviation-for 'expression
   :description "number of items or list of lists of item strings")

(defvar *program-pane-options*
	`((:typeout-window boolean "Typeout window")
	  (:automatically-remove-typeout-window boolean "Automatically remove the typeout window")
	  (:height-in-lines ((integer 1)) "Height in lines")
	  (:size-from-output boolean "Set size of pane from contents")
	  (:margin-components form "Margin components")
	  (:default-character-style ((character-style-for-device
				       :device ,si:*b&w-screen*
				       :allow-relative nil)) "Default character style")
	  (:redisplay-function form "Pane redisplay function")
	  (:redisplay-string string "Pane display string")
	  (:incremental-redisplay boolean "Enable incremental redisplay for pane")
	  (:redisplay-after-commands boolean "Redisplay each time around command loop")
	  (:flavor symbol "Pane flavor")
	  (:menu-level keyword "Menu identifier")
	  (:rows menu-row-item-enumeration "Menu contents by rows")
	  (:columns menu-row-item-enumeration "Menu contents by columns")
	  (:center-p boolean "Center menu items")
	  (:equalize-column-widths inverted-boolean "Compress item columns")
	  ;; These are for :TREE-BROWSER.
	  (:tree-style                 keyword    "Tree Style")
	  (:root                       expression "Tree literal root")
	  (:root-function              form       "Tree root generator function")
	  (:branches-with-visible-inferiors
				       form       "Tree open branches")
	  (:leaf-description           string     "Leaf description")
	  (:leaf-p-function            form       "Leaf predicate function")
	  (:leaf-character-style       ((character-style-for-device
					  :device ,si:*b&w-screen*
					  :allow-relative nil))
				       "Leaf character style")
	  (:branch-description         string     "Branch description")
	  (:branch-walker-function     form       "Branch walker function")
	  (:branch-character-style     ((character-style-for-device
					  :device ,si:*b&w-screen*
					  :allow-relative nil))
				       "Branch character style")
	  (:branch-comparison-function form       "Branch comparison function")
	  (:branch-inferiors-function  form       "Branch inferiors function")
	  (:branch-data-function       form       "Branch data function")
	  (:branch-printer-function    form       "Branch printer function")
	  ))

;;; Registry of all pane types.
(defvar *program-pane-types* nil)

(defun find-program-pane-type (type-name)
  (find type-name *program-pane-types* :key #'program-pane-type-name))

;;; Constructs the pane structure instance and adds it to the registry.
(defun add-new-program-pane-type (name allowed-options default-init-plist)
  (let ((new-type (make-program-pane-type :name name
					  :allowed-options allowed-options
					  :default-init-plist default-init-plist)))
						;delete any old one
    (pushnew new-type *program-pane-types* :key #'program-pane-type-name :replace t)))

;;; All the standard pane types

(defvar *standard-pane-margin-components*
	`((margin-borders )
	  (margin-white-borders :thickness 4)))

(define-program-pane-type :interactor
			  (:typeout-window :automatically-remove-typeout-window
			   :height-in-lines)
  :height-in-lines 4
  :blinker-p t
  :margin-components *standard-pane-margin-components*
  :more-p nil)

(define-program-pane-type :listener
			  (:typeout-window :automatically-remove-typeout-window
			   :height-in-lines)
  :blinker-p t
  :margin-components *standard-pane-margin-components*
  :more-p t)

;;; Should we allow :size-from-output nil?
(define-program-pane-type :command-menu
			  (:menu-level :rows :columns
				       :center-p :equalize-column-widths :extend-width)
  :size-from-output t
  :redisplay-function 'display-command-menu
  :redisplay-after-commands nil
  :margin-components `((margin-borders )
		       (margin-white-borders :thickness 4)
		       (margin-whitespace :margin :left :thickness 10))
  :default-character-style '(:jess :roman :normal)
  :blinker-p nil
  :more-p nil
  :menu-level :top-level)

(define-program-pane-type :title
			  (:redisplay-function :redisplay-string :redisplay-after-commands
			   :height-in-lines :size-from-output)
  :height-in-lines 1
  :blinker-p nil
  :more-p nil
  :margin-components *standard-pane-margin-components*
  :redisplay-after-commands nil			;+++ Is this right?
  :default-character-style '(:sans-serif :bold :large))

(define-program-pane-type :display
			  (:flavor :redisplay-function :redisplay-string
			   :incremental-redisplay :redisplay-after-commands
			   :typeout-window :automatically-remove-typeout-window
			   :height-in-lines :size-from-output)
  :blinker-p nil
  :more-p t
  :margin-components *standard-pane-margin-components*)

(define-program-pane-type :accept-values
			  (:accept-values-function :queries-are-independent
			   :changed-value-overrides-default :program-modifies-state

			   :redisplay-after-commands
			   :typeout-window :automatically-remove-typeout-window
			   :size-from-output :height-in-lines)
  :accept-values-function 'accept-values-program-state-variables
  :queries-are-independent nil
  :changed-value-overrides-default nil
  :program-modifies-state t

  :size-from-output t
  :redisplay-after-commands t
  :incremental-redisplay :own-redisplayer
  :margin-components *standard-pane-margin-components*
  :blinker-p t
  :more-p nil
  :blinker-deselected-visibility :off)



(defflavor tree-browser ((root-function nil)
			 (branch-description "branch")
			 (leaf-description nil)
			 branches-with-visible-inferiors
			 (branch-comparison-function 'eql)
			 (branch-data-function nil)
			 (leaf-p-function nil)
			 (branch-walker-function nil)
			 (branch-inferiors-function nil))
	   (dynamic-window-pane-with-typeout)
  (:init-keywords :root)
  (:required-init-keywords :branch-data-function)
  :initable-instance-variables
  :writable-instance-variables)

(defmethod (make-instance tree-browser :after)
	   (&key root &allow-other-keys)
  (when (or (and branch-inferiors-function
		 (or leaf-p-function branch-walker-function))
	    (and (not branch-inferiors-function)
		 (or (not leaf-p-function) (not branch-walker-function))))
    (error "You must supply either a :BRANCH-INFERIORS-FUNCTION or both~@
            a :LEAF-P-FUNCTION and a :BRANCH-WALKER-FUNCTION~@
	    in a :TREE-BROWSER pane."))
  (when (and root root-function)
    (error "You may not supply both :ROOT and :ROOT-FUNCTION options in a :TREE-BROWSER pane."))
  (when (and (not root) (not root-function))
    (error "You must supply either a :ROOT or a :ROOT-FUNCTION option in a :TREE-BROWSER pane."))
  (when root
    (setq root-function #'(lambda () root)))
  (setq branches-with-visible-inferiors (list (funcall root-function))))

(defmethod (branch-inferiors-visible-p tree-browser) (branch)
  (if (member branch branches-with-visible-inferiors :test branch-comparison-function) t nil))

(defmethod ((setf branch-inferiors-visible-p) tree-browser) (branch flag)
  (if flag
      (pushnew branch branches-with-visible-inferiors :test branch-comparison-function)
      (setq branches-with-visible-inferiors (delete branch branches-with-visible-inferiors :test branch-comparison-function)))
  flag)

(defmethod (branch-inferiors tree-browser) (branch)
  (funcall branch-inferiors-function branch))

(defmethod (walk-tree tree-browser) (function &key only-if-visible)
  (labels ((walk (branch level)
	     (if (not leaf-p-function)
		 (let* ((recurse-p (or (not only-if-visible) (branch-inferiors-visible-p self branch)))
			(inferiors (funcall branch-inferiors-function branch)))
		   (funcall function branch level (not inferiors))
		   (when recurse-p
		     (mapc #'(lambda (inferior) (walk inferior (+ level 1)))
			   inferiors)))
		 (let ((leaf-p (funcall leaf-p-function branch)))
		   (funcall function branch level leaf-p)
		   (when (and (not leaf-p)
			      (or (not only-if-visible)
				  (branch-inferiors-visible-p self branch)))
		     (funcall branch-walker-function
			      branch
			      #'(lambda (inferior) (walk inferior (+ level 1)))))))))
    (walk (funcall root-function) 0)))

(defmethod (branch-name tree-browser) (branch)
  (values (parse-branch-data self branch)))

(defmethod (branch-presentation-object tree-browser) (branch)
  (multiple-value-bind (name object object-p)
      (parse-branch-data self branch)
    (ignore name)
    (values object object-p)))

(defmethod (branch-presentation-type tree-browser) (branch)
  (multiple-value-bind (name object object-p type type-p)
      (parse-branch-data self branch)
    (ignore name object object-p)
    (values type type-p)))

(defmethod (parse-branch-data tree-browser) (branch)
  (declare (values name object object-p type type-p))
  (multiple-value-call #'(lambda (name &rest v)
			   (let ((object   (if v (car v) name))
				 (object-p (if v t nil)))
			     (let ((type   (if (cdr v)
					       (cadr v)
					       (if object-p object name)))
				   (type-p (if (cdr v) t nil)))
			       (values name object object-p type type-p))))
		       (funcall branch-data-function branch)))

(define-presentation-type tree-branch ((tree-browser))
   :description "a tree branch"
   :history t
   :parser ((stream &key initially-display-possibilities type)
	    (dw:completing-from-suggestions (stream :initially-display-possibilities
						    initially-display-possibilities
						    :type type
						    :partial-completers
						    '(#\Space #\-))
	      (walk-tree tree-browser
			 #'(lambda (branch level leaf-p)
			     (ignore level)
			     (unless leaf-p
			       (dw:suggest (branch-name tree-browser branch)
					   branch))))))
   :printer ((object stream)
	     (princ (branch-name tree-browser object) stream)))

(defvar *close-branch-doc-hash-table* (make-hash-table :test 'equal))
(defvar *open-branch-doc-hash-table*  (make-hash-table :test 'equal))

(defun document-tree-branch-open-or-close (branch &key presentation &allow-other-keys)
  (with-type-decoded (type data-args pr-args)
	(presentation-type presentation)
     (ignore type pr-args)
     (let* ((tree-editor (first data-args))
	    (description (tree-browser-branch-description tree-editor)))
       (if (branch-inferiors-visible-p tree-editor branch)
	   (or (gethash description *close-branch-doc-hash-table*)
	       (setf (gethash description *close-branch-doc-hash-table*)
		     (format nil "Close this ~A" description)))
	   (or (gethash description *open-branch-doc-hash-table*)
	       (setf (gethash description *open-branch-doc-hash-table*)
		     (format nil "Open this ~A" description)))))))

(defun test-tree-branch-open-or-close (ignore &key input-context &allow-other-keys)
  (presentation-subtypep (presentation-input-context-presentation-type input-context)
			 '(or cp:command cp:command-or-form sys:form)))

(define-presentation-action tree-branch-open-or-close
   ((tree-branch *) t
    :tester test-tree-branch-open-or-close
    :gesture :select
    :documentation document-tree-branch-open-or-close)
   (item &key presentation window)
  (with-type-decoded (type data-args pr-args)
	(presentation-type presentation)
     (ignore type pr-args)
     (let ((tree-editor (first data-args)))
       (if (branch-inferiors-visible-p tree-editor item)
	   (setf (branch-inferiors-visible-p tree-editor item) nil)
	   (setf (branch-inferiors-visible-p tree-editor item) t)))
     (when (variable-boundp dw:*program-frame*)
       (send dw:*program-frame* :redisplay-pane window nil))))

;========================================================================

(defflavor dynamic-tree-browser-pane ((branch-printer-function nil)
				     (tree-style                 :line)
				     (branch-character-style     '(nil :bold :large))
				     (leaf-character-style   '(nil :roman :normal))
				     )
	   (tree-browser dynamic-window-pane-with-typeout)
  :initable-instance-variables
  :writable-instance-variables
  (:default-init-plist
   :default-character-style '(:jess :roman :large)))

(compile-flavor-methods dynamic-tree-browser-pane)

(defun (:property :line dynamic-tree-browser-redisplay) (name stream style level)
  (ignore style)
  (dotimes (i level) (ignore i) (write-char #\Space stream))
  (princ name stream)
  (terpri stream))

(defun dynamic-tree-browser-redisplay (program stream)
  (declare (ignore program))
  (let ((window (if (typep stream 'redisplay-helper-stream)
		    (symbol-value-in-instance stream 'stream)
		    stream)))
    (let ((branch-printer (dynamic-tree-browser-pane-branch-printer-function window))
	  (style          (dynamic-tree-browser-pane-tree-style              window))
	  (branch-comparison-function
			  (tree-browser-branch-comparison-function	     window)))
      (walk-tree window
		 #'(lambda (branch level leaf-p)
		     (lambda (sys:downward-function))
		     (with-redisplayable-output (:stream stream
						 :unique-id branch
						 :cache-value branch
						 :cache-test branch-comparison-function)
		       (with-character-style
			 ((if leaf-p
			      (dynamic-tree-browser-pane-leaf-character-style window)
			      (dynamic-tree-browser-pane-branch-character-style window))
			  stream)
			 (multiple-value-bind (name object object-p type)
			     (parse-branch-data window branch)
			   (flet ((print-branch-data (stream)
				    (funcall
				      (or branch-printer
					  (get style 'dynamic-tree-browser-redisplay)
					  (error
					    "~S is not a defined tree-browser display style."
					    style))
				      name stream style level)))
			     (flet ((print-branch (stream)
				      (if (not leaf-p)
					  (with-output-as-presentation
					      (:stream stream
					       :object branch
					       :type `(tree-branch ,window))
					    (print-branch-data stream))
					  (print-branch-data stream))))
			       (if (and object-p type)
				   (with-output-as-presentation
				       (:stream stream
					:object object
					:type   type)
				     (print-branch stream))
				   (print-branch stream))))))))
		 :only-if-visible t))))

(define-program-pane-type :tree-browser
			  (:height-in-lines :size-from-output :margin-components
			  ;:tree-style
			   :root :root-function :branches-with-visible-inferiors
			  ;:leaf-description
			   :leaf-p-function :leaf-character-style
			   :branch-description
			   :branch-walker-function :branch-character-style
			   :branch-comparison-function :branch-inferiors-function
			   :branch-data-function
			  ;:branch-printer-function
			   )
  :typeout-window nil
  :automatically-remove-typeout-window nil
  :flavor dynamic-tree-browser-pane
  :redisplay-function 'dynamic-tree-browser-redisplay
  :redisplay-string nil
  :incremental-redisplay t
  :redisplay-after-commands t
  :blinker-p nil
  :more-p t
  :margin-components 
    `((dw:margin-borders)
      (dw:margin-whitespace :margin :left   :thickness  2)
      (dw:margin-scroll-bar :margin :right  :visibility :if-needed)
      (dw:margin-scroll-bar :margin :bottom :visibility :if-needed)
      (dw:margin-white-borders :thickness 4)))

 
