;;; -*- Mode: LISP; Syntax: Common-LISP; Package: REORDER-SEQUENCE; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(dw:define-program-framework reorder-sequence
  :selectable nil
  :command-definer t
  :top-level (reorder-sequence-top-level)
  :command-table (:kbd-accelerator-p t
		  :inherit-from '("standard scrolling"
				  "standard arguments"))
  :panes ((title :title :redisplay-function 'reorder-sequence-draw-title)
	  (choices :display :default-character-style '(:jess :roman :normal)
			    :redisplay-function 'reorder-sequence-draw-choices
			    :incremental-redisplay t
			    :redisplay-after-commands t
			    :more-p nil
			    :margin-components `dw:((margin-ragged-borders )
						    (margin-scroll-bar :visibility :if-needed)
						    (margin-white-borders )))
	  (command-menu :command-menu))
  :configurations '((main
		      (:layout (main :column title choices command-menu))
		      (:sizes (main (title 1 :lines)
				    (command-menu :ask-window self
						  :size-for-pane command-menu)
				    :then (choices :even)))))
  :size-from-pane choices
  :label-pane nil
  :selectable nil
  :state-variables ((title "")
		    (sequence nil)
		    (printer nil)
		    (item-presentations nil)
		    (distinguished-item nil))
  )

(defmethod (reorder-sequence-draw-title reorder-sequence) (stream)
  (write-string title stream))

(define-presentation-type reorder-sequence-element () )

(defmethod (reorder-sequence-draw-choices reorder-sequence) (stream)
  (map nil					;wants to be (do-sequence (item seq) ...)
       (lambda (item)
	 (dw:with-redisplayable-output
	   (:stream stream
	    :unique-id item
	    :cache-value (list (eq item (reorder-sequence-distinguished-item self)) item)
	    :cache-test #'equal)
	   (with-character-face ((and (eq item (reorder-sequence-distinguished-item self))
				      :bold)
				 stream)
	     (let ((pres (dw:with-output-as-presentation (:stream stream
							  :type 'reorder-sequence-element
							  :object item)
			   (funcall printer item stream))))
	       (when pres
		 (setf (elt item-presentations
			    (or (position item item-presentations
					  :key (sys::named-lambda key (x)
						 (and x (dw:presentation-object x))))
				(position nil item-presentations)))
		       pres))))
	   (terpri stream)))
       sequence)
  (setq item-presentations (sort item-presentations #'<
				 :key #'(lambda (presentation)
					  (if (null presentation) -1
					      (dw:box-top
						(dw:presentation-displayed-box
						  presentation)))))))

(defmethod (reorder-sequence-reset-state reorder-sequence)
	   (new-title new-sequence new-printer)
  (setq title new-title
	sequence new-sequence
	printer new-printer)
  (setq item-presentations (make-array (length sequence))))

(defmethod (reorder-sequence-set-frame-size reorder-sequence) (frame)
  (send frame :maybe-size-from-pane)
  (let* ((label (send frame :get-pane 'title))
	 (width (send label :inside-size))
	 (good-width (min (send frame :inside-size-for-pane label 'title)
			  (send label :maximum-exposable-inside-size))))
    (when (> good-width width)
      (multiple-value-bind (old-width old-height)
	  (send frame :size)
	(send frame :set-size (+ old-width (- good-width width)) old-height)))))

(defun reorder-sequence-via-menu (sequence &key (prompt "Reorder sequence")
						printer presentation-type
						(superior (tv:mouse-default-superior))
						(near-mode '(:mouse)))
  (setq sequence (copy-seq sequence))
  (unless printer
    (setq printer (if presentation-type
		      #'(lambda (item stream)
			  (present item presentation-type :stream stream))
		      #'(lambda (item stream)
			  (present item (type-of item) :stream stream)))))
  (using-resource (frame dw:program-frame 'reorder-sequence superior
			 :temporary-p t :process nil)
    (let ((program (send frame :program)))
      (reorder-sequence-reset-state program prompt sequence printer)
      (reorder-sequence-set-frame-size program frame))
    (tv:expose-window-near frame near-mode nil nil)
    (tv:window-call (frame :deactivate)
      (dw:program-frame-top-level frame))))

(defmethod (reorder-sequence-top-level reorder-sequence) ()
  (send dw:*program-frame* :redisplay t)
  (catch 'return-new-sequence
    (loop
      (multiple-value-bind (command arguments flag)
	  (dw:read-program-command self :echo-stream #'ignore :notification nil
				   :status :exposed)
	(when (eq flag :status)
	  (signal 'sys:abort))
	(when command (apply command arguments))))))

(define-reorder-sequence-command (com-reorder-sequence-abort :menu-accelerator "Abort"
							     :keyboard-accelerator #\Abort)
				 ()
  (signal 'sys:abort))

(define-reorder-sequence-command (com-reorder-sequence-done :menu-accelerator "Done"
							    :keyboard-accelerator #\End)
				 ()
  (throw 'return-new-sequence sequence))

(define-reorder-sequence-command (com-reorder-sequence-move-item )
    ((item 'reorder-sequence-element)
     (start-x 'number) (start-y 'number))
   (ignore start-x)
   (let* ((item-position (position item sequence))
	  (length (length sequence)))
     (letf ((distinguished-item item))
       (send dw:*program-frame* :redisplay-pane 'choices)
       (dw:tracking-mouse (t :whostate "Move item"
			     :who-line-documentation-string
			     "Release when item is at desired new position."
			     )
	 (:release-mouse () (return nil))
	 (:mouse-motion-hold (x y)
	  (ignore x)
	  (cond ((> y start-y)
		 ;; Dragging down
		 (unless (= item-position (1- length))
		   (let ((up-to-item (loop for index from item-position below length
					   while (> y (dw:box-top
							(dw:presentation-displayed-box
							  (elt item-presentations index))))
					   finally (return index))))
		     (when (> up-to-item item-position)
		       (replace sequence sequence :start1 item-position
				:start2 (1+ item-position)
				:end2 up-to-item)
		       (setq item-position (1- up-to-item))
		       (setf (elt sequence item-position) item)
		       (send dw:*program-frame* :redisplay-pane 'choices)
		       (setq start-y y)))))
		((< y start-y)
		 (unless (zerop item-position)
		   (let ((down-to-item (loop for index downfrom item-position to 0
					     while (< y (dw:box-bottom
							  (dw:presentation-displayed-box
							    (elt item-presentations index))))
					     finally (return (1+ index)))))
		     (when (< down-to-item item-position)
		       (replace sequence sequence :start1 (1+ down-to-item)
				:start2 down-to-item
				:end2 item-position)
		       (setq item-position down-to-item)
		       (setf (elt sequence item-position) item)
		       (send dw:*program-frame* :redisplay-pane 'choices)
		       (setq start-y y))))))))))
   (send dw:*program-frame* :redisplay-pane 'choices)
   )

(define-presentation-to-command-translator com-reorder-sequence-move-item
   (reorder-sequence-element
     :documentation "Move this item (click and hold)")
   (item &key x y)
  `(com-reorder-sequence-move-item ,item ,x ,y))

;; alter-sequences-via-menu returns a list, elements of which correspond
;; in position to those of the input sequence-choices.  Each elt of the
;; returned list is either the symbol :unchanged, or a reordered sequence of elts
;; coming from the corresponding input sequence.


(define-presentation-type alter-sequences-choice () )

(defstruct (sequence-standin)
  application-sequence
  (cached-sequence :unchanged))

(dw:define-program-framework alter-sequences
  :selectable nil
  :command-definer t
  :top-level (alter-sequences-top-level)
  :command-table (:kbd-accelerator-p t
		  :inherit-from '("standard scrolling"
				  "standard arguments"))
  ;; I hope this will forbid using any terminal-io-for-debugger in this frame
  :terminal-io-pane title
  :panes ((title :title :redisplay-function 'alter-sequences-draw-title)
	  (choices1 :display :default-character-style '(:jess :roman :normal)
		    :redisplay-function 'alter-sequences-draw-choices1
		    :incremental-redisplay t
		    :redisplay-after-commands t
		    :more-p nil
		    :margin-components `dw:((margin-ragged-borders
					      :thickness 1)
					    (margin-label
					      :margin :top
					      :style (:swiss :bold :normal)
					      :box :inside)
					    (margin-scroll-bar :visibility :if-needed)
					    ,'(margin-white-borders )
					    ))
	  (choices2 :display :default-character-style '(:jess :roman :normal)
		    :redisplay-function 'alter-sequences-draw-choices2
		    :incremental-redisplay t
		    :redisplay-after-commands t
		    :more-p nil
		    :margin-components `dw:((margin-ragged-borders
					      :thickness 1)
					    (margin-label
					      :margin :top
					      :style (:swiss :bold :normal)
					      :box :inside)
					    (margin-scroll-bar :visibility :if-needed)
					    ,'(margin-white-borders )
					    ))
	  (sequence-choices
	    :display :default-character-style '(:jess :roman :normal)
	    :redisplay-function 'alter-sequences-draw-sequence-choices
	    :incremental-redisplay t
	    :redisplay-after-commands t
	    :more-p nil
	    :margin-components `dw:((margin-ragged-borders
				      :thickness 1)
				    (margin-label
				      :margin :top
				      :style (:swiss :bold :normal)
				      :box :inside)
				    (margin-scroll-bar :visibility :if-needed)
				    ,'(margin-white-borders )
				    ))
	  (command-menu :command-menu
			:margin-components
			'dw::((margin-pattern :pattern T :margin :left)
			      (margin-pattern :pattern T :margin :top)
			      (margin-pattern :pattern T :margin :bottom)
			      (margin-white-borders :thickness 4)
			      (margin-whitespace :margin :left :thickness 10)))
	  (command-menu-icon :display
			     :redisplay-function 'alter-sequences-display-reshape-icon
			     :margin-components
			     'dw::((margin-pattern :pattern T :margin :top)
				   (margin-pattern :pattern T :margin :right)
				   (margin-pattern :pattern T :margin :bottom)
				   (margin-white-borders :thickness 4)
				   ))
	  )
  :configurations '((main
		      (:layout
			(main :column title choices-row command-menu-row)
			(choices-row :row choices1 choices2 sequence-choices)
			(command-menu-row :row command-menu command-menu-icon))
		      (:sizes
			(main (title 1 :lines)
			      (command-menu-row :ask-window self
						:size-for-pane command-menu)
			      :then (choices-row :even))
			(choices-row (choices1 :even)
				     (choices2 :even)
				     (sequence-choices :even))
			(command-menu-row
			  (command-menu-icon :ask :square-pane-size)
			  :then (command-menu :even))
			)))
  :label-pane nil
  :selectable nil
  :size-from-pane sequence-choices
  :state-variables ((title "")
		    (sequence1 nil)
		    (sequence2 nil)
		    (sequence-choices nil)
		    (sequence-key nil)
		    (sequence-printer nil)
		    (element-printer nil)
		    (item-presentations1 nil)
		    (item-presentations2 nil)
		    (distinguished-item nil)
		    (sequence-column-label nil))
  )

; This is now defined in CLI
;(defmacro domap (result-type bindings &body body)
;  (zwei:zcollecting-into (variables sequences)
;    (dolist (binding bindings)
;      (destructuring-bind (variable sequence) binding
;	(zwei:zcollect variables variable)
;	(zwei:zcollect sequences sequence)))
;    `(map ,result-type
;	  (sys:named-lambda domap ,variables ,@body)
;	  ,@sequences)))

(defun alter-sequences-display-reshape-icon (program stream)
  (ignore program)
  (let ((inner-size 8)
	(outer-size 12)
	(presentation-type
	  `((dw::command-menu-item
	      :menu-level :top-level
	      :command-table ,(cp:find-command-table 'alter-sequences)))))
    (dw:with-output-as-presentation (:stream stream
				     :object "Reshape"
				     :type presentation-type
				     :single-box T)
      (graphics:draw-rectangle 0 0 outer-size outer-size :stream stream :filled nil)
      (graphics:draw-rectangle 0 0 inner-size inner-size :stream stream :filled nil)
      (graphics:draw-line inner-size inner-size outer-size outer-size :stream stream)
      (graphics:draw-lines (list inner-size (- outer-size 1)
				 (- outer-size 1) (- outer-size 1)
				 (- outer-size 1) inner-size)
			   :stream stream)
       )))

(defmethod (alter-sequences-draw-title alter-sequences) (stream)
  (write-string title stream))

(defmethod (alter-sequences-draw-choices1 alter-sequences) (stream)
  (when sequence1
    (alter-sequences-draw-choices self stream sequence1 item-presentations1)))

(defmethod (alter-sequences-draw-choices2 alter-sequences) (stream)
  (when sequence2
    (alter-sequences-draw-choices self stream sequence2 item-presentations2)))

(defmethod (alter-sequences-draw-choices alter-sequences) (stream sequence item-presentations)
  (assert (typep item-presentations 'array))
  (let ((*print-pretty* nil))
    (domap nil ((item (sequence-standin-cached-sequence sequence)))
      (dw:with-redisplayable-output
	(:stream stream
	 :unique-id item
	 :cache-value (list (eq item distinguished-item) item)
	 :cache-test #'equal)
	(with-character-face ((and (eq item distinguished-item)
				   :bold)
			      stream)
	  (let ((pres (dw:with-output-as-presentation (:stream stream
						       :type 'reorder-sequence-element
						       :object item)
			(funcall element-printer item stream))))
	    (when pres
	      (setf (aref item-presentations
			  (or (position item item-presentations
					:key (sys:named-lambda key (x)
					       (and x (dw:presentation-object x))))
			      (position nil item-presentations)))
		    pres))))
	(terpri stream))))
  (sort item-presentations #'<
	:key #'(lambda (presentation)
		 (if (null presentation)
		     -1
		     (dw:box-top (dw:presentation-displayed-box presentation))))))

(defmethod (alter-sequences-draw-sequence-choices alter-sequences) (stream)
  (dw:with-redisplayable-output
    (:stream stream
     :unique-id sequence-choices
     :cache-value sequence-choices
     :cache-test #'eq)
    (domap nil ((sequence sequence-choices))
      (dw:with-output-as-presentation (:stream stream
				       :type 'alter-sequences-choice
				       :object sequence)
	(funcall sequence-printer (sequence-standin-application-sequence sequence) stream)
	(terpri stream)))))

(defmethod (alter-sequences-encache-sequence alter-sequences) (sequence-standin)
  (when (eq (sequence-standin-cached-sequence sequence-standin) :unchanged)
    (setf (sequence-standin-cached-sequence sequence-standin)
	  (copy-seq (funcall sequence-key
			     (sequence-standin-application-sequence sequence-standin)))))
  (sequence-standin-cached-sequence sequence-standin))

(defun make-item-presentations-for-sequence (sequence)
  (let ((len (length (sequence-standin-cached-sequence sequence))))
    (make-array len :fill-pointer len)))

(defmethod (alter-sequences-reset-state alter-sequences)
	   (frame new-sequence-choices
	     &key ((:sequence-key new-sequence-key))
	     ((:sequence-printer new-sequence-printer))
	     ((:element-printer new-element-printer))
	     ((:prompt new-prompt))
	     ((:sequence-column-label new-sequence-column-label))
	     )
  (setq sequence-choices
	(map 'list (sys:named-lambda sequence-copier (seq)
		     (make-sequence-standin :application-sequence seq))
	     new-sequence-choices))
  (setq title new-prompt
	sequence-key new-sequence-key
	sequence-printer new-sequence-printer
	element-printer new-element-printer
	sequence1 nil sequence2 nil
	item-presentations1 nil item-presentations2 nil
	sequence-column-label new-sequence-column-label)
  (cond ((null sequence-choices) )
	((null (nthcdr 1 sequence-choices))
	 (setq sequence1 (first sequence-choices))
	 (alter-sequences-encache-sequence self sequence1)
	 (setq item-presentations1 (make-item-presentations-for-sequence sequence1)))
	((null (nthcdr 2 sequence-choices))
	 (setq sequence1 (first sequence-choices))
	 (alter-sequences-encache-sequence self sequence1)
	 (setq item-presentations1 (make-item-presentations-for-sequence sequence1))
	 (setq sequence2 (second sequence-choices))
	 (alter-sequences-encache-sequence self sequence2)
	 (setq item-presentations2 (make-item-presentations-for-sequence sequence2))))
  (let ((dw:*program* self)
	(dw:*program-frame* frame))
    (alter-sequences-set-pane-label self 'choices1 sequence1)
    (alter-sequences-set-pane-label self 'choices2 sequence2)
    (send (dw:get-program-pane 'sequence-choices) :set-label sequence-column-label)))

(defmethod (alter-sequences-set-pane-label alter-sequences) (pane-name standin)
  (send (dw:get-program-pane pane-name) :set-label
	(dw:with-output-to-presentation-recording-string (stream)
	  (write-string (ecase pane-name
			  (choices1 "From: ")
			  (choices2 "To: "))
			stream)
	  (when standin
	    (funcall sequence-printer
		     (sequence-standin-application-sequence standin)
		     stream)))))

(defmethod (alter-sequences-set-frame-size alter-sequences) (frame)
;;  (send frame :maybe-size-from-pane)
  (let ((inside-width-without-insides
	  (flet ((w (pane)
		   (- (send frame :send-pane pane :width)
		      (send frame :send-pane pane :inside-size))))
	    (max (+ (w 'choices1) (w 'choices2) (w 'sequence-choices))
		 (w 'title))))
	(label (send frame :get-pane 'title))
	(inside-widths
	  (flet ((w (pane-name)
		   (let ((pane (send frame :get-pane pane-name)))
		     (+ (send frame :inside-size-for-pane pane pane-name)
			(* 4 (send pane :char-width))))))
	    (let ((seq-w (w 'sequence-choices)))
	      (+ (let ((w (w 'choices1)))
		   (if (zerop w) seq-w w))
		 (let ((w (w 'choices2)))
		   (if (zerop w) seq-w w))
		 seq-w))))
	(min-width
	  (flet ((pane-size (pane-name)
		   (let ((pane (send frame :get-pane pane-name)))
		     (+ (send frame :inside-size-for-pane pane pane-name)
			(tv:sheet-left-margin-size pane)
			(tv:sheet-right-margin-size pane)))))
	    ;;--- This doesn't seem to work.  Maybe :inside-size-for-pane isn't
	    ;; returning the right values.  By default the frame is too narrow
	    ;; to display all of "Abort" "Done" and "Reshape"
	    (+ (pane-size 'command-menu) (pane-size 'command-menu-icon)))))
    (multiple-value-bind (max-width max-height)
	(send label :maximum-exposable-inside-size)
      (multiple-value-bind (width height)
	  (send frame :size)
	(let ((good-width (max min-width
			       (min max-width (+ inside-widths inside-width-without-insides))))
	      (good-height
		(min (max height
			  (* (let ((max 20))	;---
			       (when sequence1
				 (dw::maxf max (length (sequence-standin-cached-sequence
							 sequence1))))
			       (when sequence2
				 (dw::maxf max (length (sequence-standin-cached-sequence
							 sequence2))))
			       max)
			     (send frame :send-pane 'choices1 :line-height)))
		     max-height)))
	  (when (or ( good-width width)
		    ( good-height height))
	    (send frame :set-inside-size good-width good-height)))))))

(defun alter-sequences-via-menu (sequence-choices 
				 &key
				 sequence-key sequence-printer
				 element-printer
				 element-presentation-type
				 (sequence-column-label "Sequences")
				 (prompt "Alter sequences")
				 (superior tv:mouse-sheet)
				 (near-mode '(:mouse))
				 width height)
  (unless sequence-printer
    (setq sequence-printer (sys:named-lambda sequence-printer (item stream)
			     (present item (type-of item) :stream stream))))
  (unless element-printer
    (setq element-printer (if element-presentation-type
			      (sys:named-lambda element-printer (item stream)
				(present item element-presentation-type :stream stream))
			      (sys:named-lambda element-printer (item stream)
				(present item (type-of item) :stream stream)))))
  (using-resource (frame dw:program-frame 'alter-sequences superior
			 :temporary-p t :process nil)
    (let ((program (send frame :program)))
      (alter-sequences-reset-state program frame sequence-choices
				   :sequence-key sequence-key
				   :sequence-printer sequence-printer
				   :element-printer element-printer
				   :prompt prompt
				   :sequence-column-label sequence-column-label)
      (alter-sequences-set-frame-size program frame))
    ;; Use the computed size unless overridden
    (unless width (setq width (send frame :inside-width)))
    (unless height (setq height (send frame :inside-height)))
    (multiple-value-bind (max-width max-height)
	(send (send frame :superior) :inside-size)
      (when (eql width :full) (setq width max-width))
      (when (eql height :full) (setq height max-height))
      (minf width max-width)
      (minf height max-height))
    (send frame :set-size width height)
    (tv:expose-window-near frame near-mode nil nil)
    (tv:window-call (frame :deactivate)
      (dw:program-frame-top-level frame))))

(defmethod (alter-sequences-top-level alter-sequences) ()
  (let ((*terminal-io* tv:default-background-stream))
    (send dw:*program-frame* :redisplay t)
    (dolist (inf (send dw:*program-frame* :inferiors))
      (ignore-errors (send-if-handles inf :clear-input)))
    (catch 'return-new-sequences
      (loop
	(catch 'dw::abort-command-read
	  (multiple-value-bind (command arguments flag)
	      (dw:read-program-command self :echo-stream #'ignore :notification nil
				       :status :exposed
				       :window-wakeup :return)
	    (cond ((eq flag :status)
		   (signal 'sys:abort))
		  ((eq flag :wakeup)
		   (dw::default-window-wakeup-handler arguments))
		  (T (when command (apply command arguments))))))))
    (domap 'list ((seq sequence-choices))
      (sequence-standin-cached-sequence seq))))

(define-alter-sequences-command (com-alter-sequences-abort :menu-accelerator "Abort"
							     :keyboard-accelerator #\Abort)
				 ()
  (signal 'sys:abort))

(define-alter-sequences-command (com-alter-sequences-done :menu-accelerator "Done"
							    :keyboard-accelerator #\End)
				 ()
  (throw 'return-new-sequences ()))

(define-alter-sequences-command (com-alter-sequences-reshape :menu-accelerator "Reshape")
    ()
   (tv:window-editor-reshape dw:*program-frame* :corner :lower-right))

(define-alter-sequences-command (com-alter-sequences-select-sequence )
    ((sequence 'alter-sequences-choice))
   (cond ((null sequence1)
	  (setq sequence1 sequence)
	  (alter-sequences-encache-sequence self sequence1)
	  (setq item-presentations1 (make-item-presentations-for-sequence sequence1))
	  (alter-sequences-set-pane-label self 'choices1 sequence1)
	  (send dw:*program-frame* :redisplay-pane 'choices1))
	 ((null sequence2)
	  (setq sequence2 sequence)
	  (alter-sequences-encache-sequence self sequence2)
	  (setq item-presentations2 (make-item-presentations-for-sequence sequence2))
	  (alter-sequences-set-pane-label self 'choices2 sequence2)
	  (send dw:*program-frame* :redisplay-pane 'choices2)
	  )
	 (T (setq sequence1 sequence2
		  item-presentations1 item-presentations2)
	    (setq sequence2 sequence)
	    (alter-sequences-encache-sequence self sequence2)
	    (setq item-presentations2 (make-item-presentations-for-sequence sequence2))
	    (alter-sequences-set-pane-label self 'choices1 sequence1)
	    (alter-sequences-set-pane-label self 'choices2 sequence2)
	    (send dw:*program-frame* :redisplay-pane 'choices1)
	    (send dw:*program-frame* :redisplay-pane 'choices2))))

(define-presentation-to-command-translator com-alter-sequences-select-sequence
   (alter-sequences-choice
     :documentation "Select this sequence")
   (item)
  `(com-alter-sequences-select-sequence ,item))

(define-alter-sequences-command (com-alter-sequences-move-item )
    ((item 'reorder-sequence-element)
     (start-x 'number) (start-y 'number) (from-window T))
   (multiple-value-bind (from-standin from-item-presentations
			 to-standin to-item-presentations to-window)
       (if (eq from-window (dw:get-program-pane 'choices2))
	   (values sequence2 item-presentations2
		   sequence1 item-presentations1 (dw:get-program-pane 'choices1))
	   (values sequence1 item-presentations1
		   sequence2 item-presentations2 (dw:get-program-pane 'choices2)))
     (let* ((from-seq (sequence-standin-cached-sequence from-standin))
	    (to-seq (sequence-standin-cached-sequence to-standin))
	    (to-length (length to-seq))
	    (to-first-pos (max 0 
			       (dotimes (index to-length to-length)
				 (when (< start-y (dw:box-bottom
						    (dw:presentation-displayed-box
						      (aref to-item-presentations index))))
				   (return index)))))
	    (item-position))
       (vector-push-extend nil to-item-presentations)
       (delete item from-item-presentations
	       :key (sys:named-lambda key (x)
		      (and x (dw:presentation-object x))))
       (sys:without-aborts
	 ("The element being moved between sequences might become lost or duplicated")
	 (setq to-seq (insert-element-into-sequence item to-seq to-first-pos))
	 (setf (sequence-standin-cached-sequence to-standin) to-seq)
	 (setq from-seq (delete item from-seq))
	 (setf (sequence-standin-cached-sequence from-standin) from-seq))
       (setq to-length (length to-seq))
       (setq item-position (position item to-seq))
       (send to-window :set-mouse-position start-x start-y)
       (letf ((distinguished-item item))
	 (send dw:*program-frame* :redisplay-pane from-window)
	 (send dw:*program-frame* :redisplay-pane to-window)
	 (dw:tracking-mouse (to-window :whostate "Move item"
				       :who-line-documentation-string
				       "Release when item is at desired new position."
				       )
	   (:release-mouse () (return nil))
	   (:mouse-motion-hold (x y)
	    (ignore x)
	    (setq item-position
		  (move-item-to-y self y start-y item item-position
				  to-seq to-length to-window to-item-presentations))))))
     (send dw:*program-frame* :redisplay-pane to-window)))

(defmethod (move-item-to-y alter-sequences) (y start-y item item-position
					       to-seq to-length to-window
					       to-item-presentations)
  (cond ((> y start-y)
	 ;; Dragging down
	 (unless (= item-position (1- to-length))
	   (let ((up-to-item (loop for index from item-position below to-length
				   while (> y (dw:box-top
						(dw:presentation-displayed-box
						  (aref to-item-presentations index))))
				   finally (return index))))
	     (when (> up-to-item item-position)
	       (replace to-seq to-seq :start1 item-position
			:start2 (1+ item-position)
			:end2 up-to-item)
	       (setq item-position (1- up-to-item))
	       (setf (elt to-seq item-position) item)
	       (send dw:*program-frame* :redisplay-pane to-window)
	       (setq start-y y)))))
	((< y start-y)
	 (unless (zerop item-position)
	   (let ((down-to-item (loop for index downfrom item-position to 0
				     while (< y (dw:box-bottom
						  (dw:presentation-displayed-box
						    (aref to-item-presentations index))))
				     finally (return (1+ index)))))
	     (when (< down-to-item item-position)
	       (replace to-seq to-seq :start1 (1+ down-to-item)
			:start2 down-to-item
			:end2 item-position)
	       (setq item-position down-to-item)
	       (setf (elt to-seq item-position) item)
	       (send dw:*program-frame* :redisplay-pane to-window)
	       (setq start-y y))))))
  item-position)

(define-presentation-to-command-translator com-alter-sequences-move-item
   (reorder-sequence-element
     :tester ((ignore)
	      ;; maximally conservative
	      (and (boundp 'dw:*program*)
		   (typep dw:*program* 'alter-sequences)
		   (alter-sequences-sequence2 dw:*program*)))
     :documentation "Move this item (click and hold)")
   (item &key x y window)
  `(com-alter-sequences-move-item ,item ,x ,y ,window))

(defun insert-element-into-sequence (item sequence index)
  (cond ((vectorp sequence)
	 (vector-push-extend item sequence)
	 (replace sequence sequence :start1 (1+ index) :start2 index)
	 (setf (aref sequence index) item)
	 sequence)
	(T (cond ((zerop index)
		  (cons item sequence))
		 (T (push item (nthcdr index sequence))
		    sequence)))))

#||
(defun atest ()
  (let ((seq1 (loop for i from 1 to 5 collect (format () "~r" i)))
	(seq2 (loop for i from 1 to 20 collect (let ((*print-base* :german))
						 (princ-to-string i)))))
    (let ((seq-choices `((:english ,seq1)
			 (:german ,seq2))))
      (alter-sequences-via-menu seq-choices
				:sequence-key #'second
				:sequence-printer
				 (sys:named-lambda seq-printer (item stream)
				   (format stream "~:(~a~)" (first item)))
				:element-printer
				  (sys:named-lambda elt-printer (item stream)
				    (write-string item stream))
				  ))))

(defun btest ()
  (alter-sequences-via-menu (remove 'zwei:file-buffer
				    zwei:*zmacs-buffer-list*
				    :test-not (lambda (x y) (typep y x)))
			    :sequence-key #'zwei:buffer-sections
			    :sequence-printer
			      (sys:named-lambda seq-printer (item stream)
				(princ item stream))
			    :sequence-column-label "Buffers"
			    :element-printer
			      (sys:named-lambda elt-printer (item stream)
				(write-string (send item :definition-name) stream))
			    ))
||#
