;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(defmethod-type-descriptor (presentation-type-transform-old-arglist-p
			     presentation-type-descriptor)
			   ()
  (variable-boundp old-arglist-transformer))

(defmethod-type-descriptor (presentation-type-transform-type presentation-type-descriptor)
			   (old-p original-type data-args pr-args
				  &optional (warn-p *warn-about-old-types*))
  (if (not (variable-boundp old-arglist-transformer))
      (when old-p
	(when (or (eq warn-p t)
		  (eq warn-p :no-handler))
	  (let ((*warn-about-old-types* nil))
	    (warn "No transformer for old type ~S." original-type)))
	`((,name ,@data-args) ,@pr-args))
    (when (or old-p
	      (not (args-match-p (car arglist) data-args))
	      (not (args-match-p (cdr arglist) pr-args
				 :additional-keyword-args *meta-presentation-keywords*)))
      (funcall old-arglist-transformer data-args pr-args))))

(defmacro handler-or (&rest forms)
  (let ((block-name (make-symbol (format nil "HANDLER-OR-~A" (gensym))))
	(value (make-symbol (format nil "HANDLER-OR-~A" (gensym)))))
    `(block ,block-name
       ,@(loop for form in forms
	       collect (if (not (atom form))
			    `(let ((,value ,form))
			       (when ,value
				 (return-from ,block-name ,value)))
			 `(when (variable-boundp ,form)
			    (when ,form
			      (return-from ,block-name
				(values ,form ',form)))))))))

;;; Composite pseudo-slots.

(defmethod-type-descriptor (presentation-type-find-parser presentation-type-descriptor
							  :search-p nil)
			   ()
  (handler-or parser))

(defmethod-type-descriptor (presentation-type-find-printer presentation-type-descriptor
							   :search-p nil)
			   ()
  (handler-or printer))

(defmethod-type-descriptor (presentation-type-find-viewspec-choices
			     presentation-type-descriptor :search-p nil)
			   ()
  (handler-or viewspec-choices))

(defmethod-type-descriptor (presentation-type-find-default-preprocessor
			     presentation-type-descriptor :search-p nil)
			   ()
  (handler-or default-preprocessor))

(defmethod-type-descriptor (presentation-type-find-history-postprocessor
			     presentation-type-descriptor :search-p nil)
			   ()
  (handler-or history-postprocessor))

(defmethod-type-descriptor (presentation-type-find-highlighting-box-function
			     presentation-type-descriptor :search-p nil)
			   ()
  (handler-or highlighting-box-function))

(defmethod-type-descriptor (presentation-type-displayer-for-menu presentation-type-descriptor
								 :search-p nil)
			   ()
  (handler-or menu-displayer choose-displayer printer))

(defmethod-type-descriptor (presentation-type-displayer-for-accept-values
			     presentation-type-descriptor :search-p nil)
			   ()
  (handler-or accept-values-displayer choose-displayer printer))

(defmethod-type-descriptor (presentation-type-expansion-function presentation-type-descriptor)
			   ()
  (handler-or data-type-equivalent data-type-generator))

(defmethod-type-descriptor (presentation-type-pretty-name presentation-type-descriptor
							  :search-p nil) ()
  (handler-or presentation-type-printer (progn type-pretty-name)))

(defmethod-type-descriptor (presentation-type-history presentation-type-descriptor
						      :search-p nil) ()
  (handler-or presentation-type-history input-history-type input-history-expander))

(defmethod (presentation-type-supertype-stack-with-predicate presentation-type-descriptor)
	   (presentation-type function predicate &key generator-only)
  (declare (sys:downward-funarg function predicate)
	   (values function-value found-p)
	   (dbg:invisible-frame :presentation-handler-search))
  (labels ((invoke (type)
	     (declare (sys:downward-function))
	     (funcall function type predicate)))
    (unless generator-only
      (when (variable-boundp data-type-equivalent-stack)
	(return-from presentation-type-supertype-stack-with-predicate
	  (funcall data-type-equivalent-stack presentation-type #'invoke)))
      (when (variable-boundp data-type-equivalent)
	(return-from presentation-type-supertype-stack-with-predicate
	  (funcall function (funcall data-type-equivalent presentation-type) predicate))))
    (when (variable-boundp data-type-generator-stack)
      (return-from presentation-type-supertype-stack-with-predicate
	(funcall data-type-generator-stack presentation-type #'invoke)))
    (when (variable-boundp data-type-generator)
      (return-from presentation-type-supertype-stack-with-predicate
	(funcall function (funcall data-type-generator presentation-type) predicate)))
    (when (variable-boundp type-expander)
      (return-from presentation-type-supertype-stack-with-predicate
	(let* ((data-args (unless (atom presentation-type)
			    (cdar presentation-type)))
	       (result (apply type-expander data-args)))
	  (stack-let ((list-result (list result)))
	    (funcall function (if (atom result) result list-result) predicate)))))))

;;; Subroutine of map-over-presentation-type-hierarchy
;;; Invoke the type's supertype handler, or the default recursion if none.
(defmethod (map-over-supertypes presentation-type-descriptor)
	   (expand-and-recurse function predicate recurse type original-type for-lookup key
		     already-seen predicate-p)
  (declare (sys:downward-funarg expand-and-recurse recurse predicate)
	   (dbg:invisible-frame :presentation-handler-search))
  (if (variable-boundp map-over-supertypes)
      (funcall map-over-supertypes function predicate recurse type original-type t for-lookup
	       key already-seen predicate-p)
    (funcall expand-and-recurse)))

(defmethod (presentation-type-subtype-stack-with-predicate presentation-type-descriptor)
	   (presentation-type function predicate)
  (declare (values function-value expanded-p)
	   (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (when (variable-boundp data-type-equivalent-stack)
    (return-from presentation-type-subtype-stack-with-predicate
      (funcall data-type-equivalent-stack presentation-type
	       (lambda (type)
		 (declare (sys:downward-function)
			  (dbg:invisible-frame :presentation-handler-search))
		 (funcall function type predicate)))))
  (when (variable-boundp data-type-equivalent)
    (return-from presentation-type-subtype-stack-with-predicate
      (funcall function (funcall data-type-equivalent presentation-type) predicate)))
  (when (variable-boundp type-expander)
    (return-from presentation-type-subtype-stack-with-predicate
      (let* ((data-args (unless (atom presentation-type)
			  (cdar presentation-type)))
	     (result (apply type-expander data-args)))
	(stack-let ((list-result (list result)))
	  (funcall function (if (atom result) result list-result) predicate))))))

;;; Subroutine of map-over-presentation-type-hierarchy
;;; Invoke the type's subtype handler, or the default recursion if none.
(defmethod (map-over-subtypes presentation-type-descriptor)
	   (expand-and-recurse function predicate recurse type original-type for-lookup key
		     already-seen predicate-p)
  (declare (sys:downward-funarg expand-and-recurse recurse predicate)
	   (dbg:invisible-frame :presentation-handler-search))
  (if (variable-boundp map-over-subtypes)
      (funcall map-over-subtypes function predicate recurse type original-type nil for-lookup
	       key already-seen predicate-p)
    (funcall expand-and-recurse)))

(defmethod-type-descriptor (presentation-type-maybe-do-compiler-warnings
			     presentation-type-descriptor)
			   (presentation-type &optional args)
  (when (variable-boundp do-compiler-warnings)
    (apply do-compiler-warnings presentation-type args)))

(defmethod (presentation-type-arglist-and-typep-function presentation-type-descriptor) ()
  (values arglist (and (variable-boundp typep-function) typep-function)))

(defmethod (presentation-type-descriptor-typep-function presentation-type-descriptor) ()
  (when (variable-boundp typep-function)
    typep-function))


;;; Warnings relating to presentation types.

(defflavor presentation-type-warning (presentation-type)
	   (compiler:compiler-warning)
  :initable-instance-variables)

(defflavor invalid-presentation-type-warning ((reason nil))
	   (presentation-type-warning)
  :initable-instance-variables)

(defmethod (:report invalid-presentation-type-warning) (stream)
  (format stream "~S is invalid as a presentation type.~:[~;~@
		  Reason:  ~~?~~]"
	  presentation-type
	  reason (car reason) (cdr reason)))

(defflavor unknown-presentation-type-warning ()
	   (compiler:delayed-compiler-warning presentation-type-warning)
  :initable-instance-variables)

(defmethod (:report unknown-presentation-type-warning) (stream)
  (format stream "~S is not a known presentation type~:[ in ~S~]."
	  (presentation-type-name presentation-type)
	  (symbolp presentation-type)
	  presentation-type))

(defmethod (:obsolete-p unknown-presentation-type-warning) ()
  (presentation-type-defined-in-environment (presentation-type-name presentation-type)))

(defflavor wrong-presentation-type-arguments (arglist (reason) phase)
	   (compiler:delayed-compiler-warning presentation-type-warning)
  :initable-instance-variables)

(defmethod (:report wrong-presentation-type-arguments) (stream)
  (labels ((print-arglist ()
	     (print-type-arglist arglist stream)))
    (format stream "Wrong arguments to presentation type ~@\\PRESENTATION\\.~@
		  ~@\\PRESENTATION\\~@
		  does not match ~Q.~:[~;~@
		  The ~A arguments don't match for the following reason:~%  ~~A~~]"
	    (presentation-type-name presentation-type) 'presentation-type-name
	    presentation-type 'presentation-type
	    #'print-arglist
	    (and reason (neq reason t))
	    (string-downcase phase)
	    reason)))

;;--- Too bad this doesn't do real, sensitive output.  Someday perhaps...
(defun print-type-arglist (arglist &optional (stream *standard-output*))
  (if (null arglist)
      (write-string "()" stream)
    (write-char #\( stream)
    ;; Write the data arglist
    (if (null (car arglist))
	(write-string "()" stream)
      (lt:print-lambda-list (car arglist) stream
			    :brief t))
    ;; Write the presentation arglist
    (unless (null (cdr arglist))		;Avoid spurious space
      (write-char #\Space stream)
      (labels ((fixup-meta-key (key)
		 (intern (string key) si:pkg-user-package)))
	(lt:print-lambda-list (append (cdr arglist)
				      (mapcar #'fixup-meta-key *meta-presentation-keywords*))
			      stream
			      :brief t :parenthesis nil)))
    (write-char #\) stream))
  (values))

(defmethod (:obsolete-p wrong-presentation-type-arguments) ()
  (not (check-type-arguments-match presentation-type)))


;;; Check that the type argument to a function or macro needs a warning.
;;; Warns only if it knows it's quoted.  (If EVALUATED is NIL, it knows to
;;; always warn).

;;; +++ We could do better than this.  If the warning function takes a D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")evaluate0 keyword arg,
;;; +++ it indicates it's willing to see arguments that will be evaluated, and selectively
;;; +++ issue warnings for those which are constant.  1evaluate0 could be bound to a function
;;; +++ to perform this evaluation.  Then, just macroexpand the argument, check for the (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")car
0;;; +++ being 2list0, the 2caar0 being either a constant symbol or 2list0 of a constant symbol and
;;; +++ data argument.  If those conditions hold, we can do warnings.  First, we
;;; +++ evaluate that constant symbol to get the presentation type name, and supply the
;;; +++ type's checker with a dummy presentation type with unevaluated types.

(defun check-presentation-type-argument
       (type-arg &rest args &key (evaluated t)
	(function compiler:default-warning-function)
	(definition-type compiler:default-warning-definition-type))
  (let ((warned-obsolete nil)
	(recursed nil))
    (labels ((warn-1 (flavor &rest options)
	       (apply #'compiler:warn-1 flavor
		      :function function
		      :definition-type definition-type
		      options))
	     (check-not-defined (presentation-type)
	       (condition-case (error)
		    (with-type-descriptor ((descriptor expanded-type) presentation-type
					   :error-p nil)
		      (when descriptor
			(unless (or recursed (atom presentation-type))
			  (setq recursed t)
			  (presentation-type-maybe-do-compiler-warnings descriptor
									expanded-type
									args))
			(let ((replacement (presentation-type-obsolete descriptor)))
			  (when replacement
			    (unless warned-obsolete
			      (setq warned-obsolete t)
			      (compiler:warn `(:obsolete t
					       :function ,function
					       :definition-type ,definition-type)
					     "~S is an obsolete presentation-type name.~:[~@
					 Use ~S instead.~]"
					     (presentation-type-name descriptor)
					     (eq replacement t) replacement)))))
		      (unless descriptor
			(let ((type-name (presentation-type-name presentation-type)))
			  (when (not (presentation-type-defined-in-environment type-name))
			    (unless (eql type-name 'dw:no-type)
			      (warn-1 'unknown-presentation-type-warning
				      :delayed t
				      :presentation-type presentation-type))
			    t))))
		  (error
		    (warn-1 'invalid-presentation-type-warning
			    :presentation-type presentation-type
			    :reason
			    `("Error while checking for defined or obsolete:~@
			       ~2T~~A~"
			      ,error)))))		  
	     (canonicalize-type (type)
	       (when (atom type)
		 (setq type (list type)))
	       (when (atom (car type))
		 (setq type (list type))))
	     (check-symbol-and-args (presentation-type)
	       (unless (check-not-defined presentation-type)
		 (condition-case (mismatch phase)
		      (check-type-arguments-match presentation-type)
		    (error
		      (warn-1 'invalid-presentation-type-warning
			      :presentation-type presentation-type
			      :reason
			      `("Error during argument checking: ~~A~"
				,mismatch)))
		    (:no-error
		      (when mismatch
			(warn-1
			  'wrong-presentation-type-arguments
			  :delayed t
			  :arglist
			  (presentation-type-arglist-in-environment presentation-type)
			  :presentation-type (canonicalize-type presentation-type)
			  :reason mismatch
			  :phase phase))))))
	     (check-presentation-type-internal (presentation-type)
	       (typecase presentation-type
		 (presentation-type-descriptor)
		 (symbol
		   (check-symbol-and-args presentation-type))
		 (list
		   (typecase (car presentation-type)
		     (presentation-type-descriptor)
		     (symbol
		       (check-symbol-and-args presentation-type))
		     (list (typecase (caar presentation-type)
			     (presentation-type-descriptor)
			     (symbol (check-symbol-and-args presentation-type))
			     (list (warn-1 'invalid-presentation-type-warning
					   :presentation-type presentation-type
					   :reason '("Too many levels of parenthesis.")))
			     (otherwise (warn-1 'invalid-presentation-type-warning
						:presentation-type presentation-type
						:reason '("Not a presentation type.")))))
		     (otherwise
		       (warn-1 'invalid-presentation-type-warning
			       :presentation-type presentation-type
			       :reason '("Not a presentation type.")))))
		 (otherwise
		   (warn-1 'invalid-presentation-type-warning
			   :presentation-type presentation-type
			   :reason '("Not a presentation type.")))))
	     (check-presentation-type (presentation-type)
	       (typecase presentation-type
		 (presentation-type-descriptor)
		 ((or symbol list)
		  (check-presentation-type-internal presentation-type))
		 (otherwise
		   ;; Self-evaluating garbage.
		   (warn-1 'invalid-presentation-type-warning
			   :presentation-type presentation-type
			   :reason '("Not a symbol or list."))))))
      (if (not evaluated)
	  (check-presentation-type type-arg)
	(when (constantp type-arg)
	  ;; Can't check unless it's a constant!
	  (check-presentation-type
	    (lt:evaluate-constant type-arg compiler:*interpreter-lexical-environment*)))))))

;;; Check that a presentation-type's arguments match its defined argument-list.
;;; Returns an error object if not, useful in describing why.

(defun check-type-arguments-match (presentation-type)
  (declare (values error-or-nil phase))
  (let ((phase :data))
    (condition-case (.error.)
	 (with-type-decoded (nil data-args pr-args) presentation-type
	    (let ((arglist (presentation-type-arglist-in-environment presentation-type)))
	      (lt:match-args-to-lambda-list (car arglist) data-args)
	      (setq phase :presentation)
	      (lt:match-args-to-lambda-list (cdr arglist) pr-args
					    :additional-keyword-args
					    *meta-presentation-keywords*)
	      nil))
       (lt::lambda-list-match-error (values .error. phase)))))

(defmacro warning-on-error (function &body body)
  (let ((error. (make-symbol ".ERROR.")))
    `(condition-case (,error.)
	(progn ,@body)
      (error (warn "Error in style-checking ~S:  ~~A~" ',function ,error.)))))

(defun warn-if-constant (original-type function)
  (when (constantp original-type)
    (warn "It is unreasonable to supply a constant ~S argument to ~S.~@
	   It is supposed to be the passed-on value originally supplied."
	  :original-type function)))

(defun (accept compiler:style-checker) (form)
  (warning-on-error accept
    (destructuring-bind (ignore type &key default-type original-type &allow-other-keys) form
      (when type
	(check-presentation-type-argument type))
      (when default-type
	(check-presentation-type-argument default-type))
      (when original-type
	(warn-if-constant original-type 'accept)
	(check-presentation-type-argument original-type)))))

(defun (accept-from-string compiler:style-checker) (form)
  (warning-on-error accept-from-string
    (destructuring-bind (ignore type &key default-type original-type &allow-other-keys) form
      (when type
	(check-presentation-type-argument type))
      (when default-type
	(check-presentation-type-argument default-type))
      (when original-type
	(warn-if-constant original-type 'accept-from-string)
	(check-presentation-type-argument original-type)))))

(defun (zwei:typein-line-accept compiler:style-checker) (form)
  (warning-on-error zwei:typein-line-accept
    (destructuring-bind (ignore type &key default-type original-type &allow-other-keys) form
      (when type
	(check-presentation-type-argument type))
      (when default-type
	(check-presentation-type-argument default-type))
      (when original-type
	(warn-if-constant original-type 'zwei:typein-line-accept)
	(check-presentation-type-argument original-type)))))

(defun (present compiler:style-checker) (form)
  (warning-on-error present
    (destructuring-bind (ignore ignore &optional (presentation-type nil presentation-type-p)
				&key original-type for-context-type &allow-other-keys)
	form
      (when presentation-type-p
	(check-presentation-type-argument presentation-type))
      (when original-type
	(warn-if-constant original-type 'present)
	(check-presentation-type-argument original-type))
      (when for-context-type
	(check-presentation-type-argument for-context-type)))))

(defun (present-to-string compiler:style-checker) (form)
  (warning-on-error present-to-string
    (destructuring-bind (ignore ignore &optional (presentation-type nil presentation-type-p)
				&key original-type for-context-type &allow-other-keys)
	form
      (when presentation-type-p
	(check-presentation-type-argument presentation-type))
      (when original-type
	(warn-if-constant original-type 'present-to-string)
	(check-presentation-type-argument original-type))
      (when for-context-type
	(check-presentation-type-argument for-context-type)))))

(defun (presentation-subtypep compiler:style-checker) (form)
  (warning-on-error presentation-subtypep
    (destructuring-bind (ignore subtype supertype &optional ignore)
	form
      (check-presentation-type-argument subtype)
      (check-presentation-type-argument supertype))))

(defun (presentation-subtypep-cached compiler:style-checker) (form)
  (warning-on-error presentation-subtypep
    (destructuring-bind (ignore subtype supertype &optional ignore)
	form
      (check-presentation-type-argument subtype)
      (check-presentation-type-argument supertype))))

(defun (menu-choose compiler:style-checker) (form)
  (warning-on-error menu-choose
    (destructuring-bind (ignore ignore &key presentation-type &allow-other-keys)
	form
      (check-presentation-type-argument presentation-type))))

(defun (prompt-and-accept compiler:style-checker) (form)
  (warning-on-error prompt-and-accept
    (destructuring-bind (ignore p-t &optional ignore &rest ignore)
	form
      (let ((type (macroexpand p-t compiler:*interpreter-lexical-environment* t))
	    (evaluated t))
	(cond ((constantp type)
	       (setf type (lt:evaluate-constant type
						compiler:*interpreter-lexical-environment*)
		     evaluated nil))
	      ((and (listp type)
		    (eq (first type) 'list)	;We don't deal with 2list*0 yet.
		    (symbolp (second type)))
	       ;; Kludge; `(:type 'foo ...) = (list :type 'foo ...)
	       (setf type (cdr p-t)
		     evaluated t)))
	(if (and (listp type)
		 (symbolp (first type))
		 (not (presentation-type-defined-in-environment (first type))))
	    ;; the (key val ...) syntax.  1Must0 have a 2:type0.
	    (lt:with-lambda-list-destructured ((arglist 'accept) :key keys)
	      (when (or (eql (first type) :type)
			(find (first type) keys :key #'lt::key-key-name))
		(labels
		  ((check-accept-args ()
		     (loop for (key val) on type by 'cddr
			   do (ignore val)
			   unless (or (eql key :type)
				      (find key keys :key #'lt::key-key-name))
			     do
			       (warn "The first argument to ~S must be a presentation type,~@
				      or a list of keyword arguments to ~S plus ~S.~@
				      ~S is not a keyword argument to ~S"
				     'prompt-and-accept 'accept :type key 'accept))))
		  (stack-let ((marker (list nil)))
		    (let ((new-type (getf type :type marker)))
		      (if (eq new-type marker)
			  (return-from prompt-and-accept
			    (warn "The first argument to ~S must be a presentation type,~@
				   or a list of keyword arguments to ~S plus ~S.~@
				   There is no ~S in ~S."
				  'prompt-and-accept 'accept :type :type type))
			(check-accept-args)
			(loop for sym in '(:default-type :original-type)
			      for val = (getf type sym marker)
			      unless (eq val marker)
				do (check-presentation-type-argument val
								     :evaluated evaluated))
			;; We've found the real type
			(setf type new-type)))))
		(check-presentation-type-argument type :evaluated evaluated)))
	  ;; We think it was just a presentation type, not keyword-value pairs.
	  ;; Just do the usual things on the original argument.
	  (check-presentation-type-argument p-t))))))

(defun (menu-choose-from-set compiler:style-checker) (form)
  (warning-on-error menu-choose-from-set
    (destructuring-bind (ignore ignore presentation-type &rest ignore)
	form
      (check-presentation-type-argument presentation-type))))

(defun (handler-applies-in-limited-context-p compiler:style-checker) (form)
  (warning-on-error handler-applies-in-limited-context-p
    (destructuring-bind (ignore ignore limiting-context-type)
	form
      (check-presentation-type-argument limiting-context-type))))

(defun (format-item-list compiler:style-checker) (form)
  (warning-on-error format-item-list
    (destructuring-bind (ignore ignore &key presentation-type &allow-other-keys)
	form
      (check-presentation-type-argument presentation-type))))

(defun (complete-input compiler:style-checker) (form)
  (warning-on-error complete-input
    (destructuring-bind (ignore ignore ignore &key type &allow-other-keys)
	form
      (check-presentation-type-argument type))))

(defun (complete-from-sequence compiler:style-checker) (form)
  (warning-on-error complete-from-sequence
    (destructuring-bind (ignore ignore ignore &key type &allow-other-keys)
	form
      (check-presentation-type-argument type))))

(defun (completing-from-suggestions compiler:style-checker) (form)
  (warning-on-error completing-from-suggestions
    (destructuring-bind (ignore ignore &key type &allow-other-keys)
	form
      (check-presentation-type-argument type))))

(defun (echo-presentation-blip compiler:style-checker) (form)
  (warning-on-error echo-presentation-blip
    (destructuring-bind (ignore ignore ignore &optional ignore for-context-type)
	form
      (check-presentation-type-argument for-context-type))))

(defun (presentation-type-default compiler:style-checker) (form)
  (warning-on-error presentation-type-default
    (destructuring-bind (ignore presentation-type)
	form
      (check-presentation-type-argument presentation-type))))

(compile-flavor-methods presentation-type-descriptor
			invalid-presentation-type-warning
			unknown-presentation-type-warning
			wrong-presentation-type-arguments)


;;; Variable 2dw::*signal-parse-error-on-missing-type-methods*0:  A flag for
;;;   encaching and QA purposes.  Allows us to use 2accept0 to generate
;;;   subcontexts from a given context, without worrying that the given context
;;;   may not have a parser, and may only be used with
;;;   2dw:with-presentation-input-context0.  We can't just look at the type and
;;;   tell, since it may be buried in an 2or0.  Only 2accept0 knows for sure.

(defvar-resettable *signal-parse-error-on-missing-type-methods* nil)

;;; Anything with a stack-list in the presentation-arguments is not cachable.
;;; (I.e. environments).  This applies both to the input type and to the type
;;; found by the type-walk.

(defun with-type-method-internal (presentation-type method-type old-error-p function
				  &key (error-p t supplied-p) (supertype-p t)
				  predicate-p existing-predicate)
  (declare (sys:downward-funarg function)
	   (dbg:invisible-frame :presentation-handler-search))
  (unless supplied-p
    (setq error-p old-error-p))	;"bletch"
  (unless error-p
    (with-type-decoded (type-name) presentation-type
       (when (eq type-name 'no-type)
	 (return-from with-type-method-internal nil))))
  (macrolet ((cacheable-p (type)
	       `(with-type-decoded (nil nil pr-args)
				   ,type
		  (loop for pr in pr-args
			never (consed-in-control-stack pr)))))
    (let ((cacheable (cacheable-p presentation-type)))
      ;; Optimization: Don't bother building the key if we can see right away that
      ;; it's not going to be cacheable.
      (if (not cacheable)
	  (block success
	    (map-over-type-hierarchy presentation-type supertype-p 'get-type-property-stack
	      (lambda (type key predicate)
		(declare (sys:downward-function))
		(ignore key)
		(multiple-value-bind (method-fun real-method-type)
		    (funcall method-type type)
		  (when method-fun
		    (return-from success
		      ;; Since it couldn't be cached, funcall here instead of heap-consing
		      (funcall function type method-fun real-method-type predicate)))))
	      existing-predicate predicate-p))
	;; Canonicalize on 2t0 for the sake of the key.
	(setq predicate-p (not (null predicate-p)))
	(block not-cacheable
	  (with-full-key-for-cache (key do-not-cache presentation-type)
	    (stack-let* ((key-without-predicate `(,method-type ,key . ,(not supertype-p)))
			 (key-with-predicate `(,method-type
					       ;; t is never a predicate.
					       ,(or existing-predicate predicate-p)
					       ,key
					       . ,(not supertype-p)))
			 (key (if predicate-p
				  key-with-predicate
				key-without-predicate)))
	      (multiple-value-bind (result found-p)
		  (gethash key *type-method-cache*)
		(unless found-p
		  (setf result
			(block success
			  (map-over-type-hierarchy presentation-type supertype-p
				     'get-type-property-stack
			     (lambda (type key predicate)
			       (declare (sys:downward-function))
			       (ignore key)
			       (multiple-value-bind (method-fun real-method-type)
				   (funcall method-type type)
				 (when method-fun
				   (if do-not-cache
				       (return-from not-cacheable
					 ;; Since not cacheable, funcall here
					 ;; instead of heap-consing
					 (funcall function type method-fun
						  real-method-type predicate))
				     (return-from success
				       (list-in-area *handler-dynamic-area*
						     (heap-copy-presentation-type
						       type *handler-dynamic-area* 2)
						     method-fun
						     real-method-type
						     predicate))))))
			    existing-predicate predicate-p)))
		  (setf (gethash (copy-tree key *handler-dynamic-area*) *type-method-cache*)
			result))
		(unless result
		  (when error-p
		    (condition-case-if *signal-parse-error-on-missing-type-methods*
				       (.error.)
			 (error 'type-method-not-found :type presentation-type
				:method-finder method-type)
		       (type-method-not-found
			 (sys:parse-error "Error parsing:  ~A" .error.)))))
		(when result
		  (apply function result))))))))))

(defflavor presentation-type-error-mixin (type) ()
  :gettable-instance-variables
  :initable-instance-variables)

(defmethod (make-instance presentation-type-error-mixin :after) (&rest ignore)
  (heap-copy-presentation-type-if-necessary type))


(defflavor type-method-not-found (type method-finder)
	   (presentation-type-error-mixin error)
  :readable-instance-variables
  :initable-instance-variables)

(defmethod (dbg:report type-method-not-found) (stream)
  (if (not (presentation-type-p type))
      (format stream "~@\\PRESENTATION\\ is not a presentation type.~@
		      We cannot find a type method for it with ~@\\PRESENTATION\\"
	      type 'presentation-type method-finder 'function)
    (format stream "No type method for the type ~@\\PRESENTATION\\ was found,~@
		    in a search using the function ~@\\PRESENTATION\\."
	    type 'presentation-type method-finder 'function)))

(compile-flavor-methods type-method-not-found)
