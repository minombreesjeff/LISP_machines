;;; -*- Mode: LISP; Syntax: Common-lisp; Package: GRAPHICS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Flavor definitions live here to resolve cold-load circular dependencies

;;;; Generics

;;; Return a stream's current transformation matrix.
(defgeneric stream-transform (stream)
  (:function
    (funcall (flavor:generic stream-transform) (si:follow-syn-stream stream)))
  )


;;;; State flavors

;;; -modified means the current value is different from the nominal value.
;;; -unwritten means the current value is different from the one "in the device".

;;; The -transform-unwritten flag isn't 100% reliable, because of all the things that
;;; just use replace to store a new one in.
(defconstant %%drawing-state-new-transform (byte 2 0))
(defconstant %%drawing-state-transform-modified (byte 1 0))
(defconstant %%drawing-state-transform-unwritten (byte 1 1))

(defconstant %%drawing-state-new-parameters (byte 2 2))
(defconstant %%drawing-state-parameters-modified (byte 1 2))
(defconstant %%drawing-state-parameters-unwritten (byte 1 3))

(defconstant %%drawing-state-temporary-source (byte 1 16))

(defconstant %%scan-conversion-round-coordinates (byte 1 0))
(defconstant %%scan-conversion-center-circles (byte 1 1))

(defconstant %%scan-conversion-host-allowed (byte 1 15))

(defflavor drawing-state
	((flags 0)

	 (transform (make-identity-transform))

	 (thickness nil)
	 (scale-thickness t)

	 (line-end-shape :butt)
	 (line-joint-shape :miter)

	 (dashed nil)
	 (dash-pattern #(10 10))
	 (initial-dash-phase 0)
	 (draw-partial-dashes t)
	 (scale-dashes nil)

	 (alu :draw)
	 (pattern t)
	 (stipple nil)
	 (tile nil)
	 (gray-level 1)
	 (color nil)
	 (opaque t)

	 (scan-conversion-flags nil)
	 )
	()
  :writable-instance-variables
  (:constructor make-drawing-state ()))

(defflavor raster-drawing-state
	(
	 ;; The graphics cursor position
	 (position-x nil)
	 (position-y nil)

	 ;; The slope of the path entering the current position.  Used for drawing miters.
	 (position-dx nil)
	 (position-dy nil)
	 ;; The initial point of the currently open part of the path.
	 (path-initial-x nil)
	 (path-initial-y nil)
	 ;; The slope heading out of there.
	 (path-initial-dx nil)
	 (path-initial-dy nil)

	 (source-pattern nil)
	 (ones-alu :draw)
	 (zeros-alu :erase)
	 )
	(drawing-state)
  :writable-instance-variables
  (:constructor make-raster-drawing-state ())
  (:constructor make-stack-raster-drawing-state (area transform)))

(defflavor binary-drawing-state
	(
	 ;; The graphics cursor position
	 (position-x nil)
	 (position-y nil)

	 ;; The transform that we have encoded last.
	 (last-transform (make-identity-transform))

	 ;; The drawing state as a set of arguments.
	 (drawing-argument-list nil)
	 )
	(drawing-state)
  :writable-instance-variables
  (:constructor make-binary-drawing-state ()))

;;;; Graphics stream flavors

(defflavor standard-graphics-mixin () ()
  (:required-methods stream-transform
		     with-new-stream-transform

		     with-drawing-state-internal

		     current-position
		     set-current-position

		     with-clipping-path-internal
		     with-clipping-from-output-internal
		     with-clipping-mask-internal
		     ))

(defflavor drawing-state-graphics-mixin ((drawing-state nil)) (standard-graphics-mixin))

(defflavor raster-graphics-mixin () (drawing-state-graphics-mixin))

(defflavor tv:graphics-compatibility-mixin () ())

(defflavor tv:graphics-mixin () (tv:essential-window raster-graphics-mixin
				 tv:graphics-compatibility-mixin))

(defflavor binary-graphics-stream
	((drawing-state (make-binary-drawing-state))
	 ;; The stream we are writing on
	 stream
	 (subroutine-hash-table (make-hash-table :test 'equal))
	 (subroutine-number 0)
	 )
	(drawing-state-graphics-mixin))

;; So we can produce better warnings than just blowing out into the debugger.
(defgeneric sage::stream-supports-pictures-p (stream)
  (:method (drawing-state-graphics-mixin) t))
