;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(defsubst presentation-type-name-p (type-name)
  (and (symbolp type-name)
       (or (symbol-presentation-type-descriptor type-name)
	   (multiple-value-bind (flavor struct-p deftype typep)
	       (symbol-flavor-or-cl-type type-name)
	     (or flavor struct-p deftype typep)))))

(defun presentation-type-p (type)
  (and (typecase type
	 (keyword nil)
	 (symbol t)
	 (cons
	   (cond ((consp (car type))
		  (setq type (caar type)))
		 (T (setq type (car type))))))
       (presentation-type-name-p type)))

(defsubst defstruct-type-p (type-name)
  (or (let ((description (get type-name 'si:defstruct-description)))
	(and description
	     (eq (si:defstruct-description-type description) ':named-array)
	     (si:defstruct-description-named-p description)))
      (get type-name 'named-structure-invoke)))


(push 'presentation-only-type cli::*subtypep-terminal-types*)
;(PUSH 'PRESENTATION-ONLY-TYPE CLI::*TYPEP-TERMINAL-TYPES*)

;;; If you don't do this, it tries to ask the members if they are PRESENTATION-ONLY-TYPE
;;; at SUBTYPEP time, and gets an error.
(cli::define-subtypep-function (member presentation-only-type)
			       (ignore ignore ignore ignore ignore ignore)
  nil)


;;; New version of PRESENTATION-SUBTYPEP.  This uses the new sub/super-type mapping
;;; stuff from the handler-searching stuff, so we can be sure they implement the same
;;; algorithm.
;;;
;;; See comments in the file FIND-HANDLERS for more information about how this works.
(defun presentation-subtypep (subtype supertype &optional predicate-p)
  (declare (values subtypep known-p predicate))
  (with-key-for-cache (supertype-key supertype)
    (with-key-for-cache (subtype-key subtype)
      (stack-let ((key (list subtype-key supertype-key predicate-p))
		  (key1 (list subtype-key supertype-key)))
	(unless predicate-p
	  ;; If no predicate, optimize the key
	  (setq key key1))
	(multiple-value-bind (values success)
	    (gethash key *presentation-subtypep-cache*)
	  (if success
	      (typecase values
		((member t) (values t t))
		((member nil) (values nil t))
		((member :unknown) (values nil nil))
		(otherwise			;Otherwise must be a function
		  (values t t values)))
	    (multiple-value-bind (value known-p predicate)
		(presentation-subtypep-internal subtype supertype predicate-p)
	      (setf (gethash (copy-tree key *handler-ephemeral-area*)
			     *presentation-subtypep-cache*)
		    (cond ((and value predicate-p predicate)
			   predicate)
			  (value t)
			  ((not known-p) :unknown)
			  (t nil)))
	      (values value known-p predicate))))))))

;;; This is now exactly the same as D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")presentation-subtypep0, except it only takes
;;; two arguments and returns two values.
(defsubst presentation-subtypep-cached (subtype supertype)
  (presentation-subtypep subtype supertype))

(defun presentation-subtypep-internal (subtype supertype &optional predicate-p)
  (declare (values subtypep known-p predicate))
  ;; Handle the easy cases quickly.  (Redundant with clauses inside the mappings below).
  (cond ((eq subtype supertype) (values t t))
	((or (eq subtype 'no-type) (eq supertype 'no-type))
	 ;; We only have to this case these here, since it doesn't participate in the
	 ;; type hierarchy.
	 ;; This must be before the tests for nullity of the subtype.
	 (values nil t))
	((null supertype) (values nil t))	;Was (or (null subtype) (null supertype))
	((null subtype) (values t t))		;But I think this is right.  See CLtL pg 33.
	((eq supertype t) (values t t))
	((eq subtype t) (values nil t))
	(t (map-over-type-hierarchy subtype t nil
	     (lambda (found-subtype subkey predicate)
	       (declare (dbg:invisible-frame :presentation-handler-search))
	       (cond ((eq found-subtype supertype)
		      ;; This is redundant with the EQ clause below, and is just a
		      ;; very minor optimization.
		      (return-from presentation-subtypep-internal (values t t)))
		     ((null found-subtype)
		      (return-from presentation-subtypep-internal (values t t)))
		     (t
		      (map-over-type-hierarchy supertype nil t
		       (lambda (found-supertype superkey predicate)
			 (declare (dbg:invisible-frame :presentation-handler-search))
			 (with-type-descriptor ((desc found-supertype) found-supertype)
			   (with-type-decoded (supertype supertype-dargs) found-supertype
			     (cond
			       ((eql subkey superkey)
				(multiple-value-bind (subtypep known-p)
				    (cond ((null supertype-dargs)
					   (values t t))
					  ((not desc)
					   (fringe-eql-subtypep subkey superkey))
					  (t (with-type-decoded (subtype subtype-dargs)
								found-subtype
					       (stack-let ((subtype
							     `(,subtype
							       ,@subtype-dargs))
							   (supertype
							     `(,supertype
							       ,@supertype-dargs)))
						 (presentation-type-subtypep-compare
						   desc
						   subtype subkey
						   supertype superkey)))))
				  ;; If it's 1) Known to be subtypep-reducible
				  ;;      or 2) it's known and we aren't going to do
				  ;;	    type reduction
				  ;;      or 3) or there's no data args to do reduction on
				  ;; Then we can terminate the search
				  (when (or (and known-p subtypep predicate-p)
					    (and (not predicate-p) known-p)
					    (and subtypep (null supertype-dargs)))
				    ;; don't cut off search if we may have type reduction
				    (return-from presentation-subtypep-internal
				      (values subtypep t predicate)))))
			       ((eq superkey t)
				(return-from presentation-subtypep-internal
				  (values t t predicate)))
			       ((and (eql (if (atom subkey) subkey (car subkey))
					  (if (atom superkey) superkey (car superkey)))
				     (or (not (presentation-type-disallow-atomic-type desc))
					 (and (listp subkey) (listp superkey))))
				(multiple-value-bind (subtypep known-p)
				    (cond
				      ((null supertype-dargs)
				       (values t t))
				      ((null desc)
				       (fringe-eql-subtypep subkey superkey))
				      (t (with-type-decoded (subtype subtype-dargs)
							    found-subtype
					   (stack-let ((subtype
							 `(,subtype ,@subtype-dargs))
						       (supertype
							 `(,supertype
							   ,@supertype-dargs)))
					     (presentation-type-subtypep-compare
					       desc
					       subtype subkey
					       supertype superkey)))))
				  ;; If it's 1) Known to be subtypep-reducible
				  ;;      or 2) it's known and we aren't going to do
				  ;;	    type reduction
				  ;;      or 3) or there's no data args to do reduction on
				  ;; Then we can terminate the search
				  (when (or (and known-p subtypep predicate-p)
					    (and (not predicate-p) known-p)
					    (and subtypep (null supertype-dargs)))
				    ;; don't cut off search if we may have type reduction
				    (return-from presentation-subtypep-internal
				      (values subtypep known-p predicate)))))))))
		       predicate predicate-p))))
	     nil predicate-p)
	   (values nil nil))))

;; Nearly 1typep0.
;;--- Why does 1(ptypep (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")any-object1 'undefined-type-name)0 return 1t0 ???
(defun ptypep (object type &optional keys-already-seen)
  (with-type-decoded (type-name data-args) type
     ;; If it's a Lisp object, it must be an expression!
     (when (or (eql type-name 'expression)
	       (eql type-name t))
       (return-from ptypep t))
     ;; If there are no data args and the type is a flavor or structure,
     ;; then just calling 1typep0 suffices.
     (when (null data-args)
       (multiple-value-bind (flavor-or-class structure-p)
	   (symbol-flavor-or-cl-type type-name)
	 ;; Well, avoid 1typep 0and just do the fastest possible check for flavor
	 ;; and structure types.
	 (cond (flavor-or-class
		(return-from ptypep
		  (if (instancep flavor-or-class)	;CLOS class descriptor
		      (clos-internals:typep-class object flavor-or-class)
		    (cli::typep-flavor object type-name))))
	       (structure-p
		(return-from ptypep (cli::typep-structure object type-name)))))))
  (stack-let ((keys-seen (make-array *already-seen-table-size* :fill-pointer 0)))
    (when keys-already-seen
      (setq keys-seen keys-already-seen))
    (map-over-type-hierarchy type t nil
      (lambda (type key pred)
	(declare (dbg:invisible-frame :presentation-handler-search))
	(ignore key)
	(when pred
	  (unless (funcall pred object)
	    (return-from ptypep nil)))
	(with-type-decoded (name data-args) type
	   ;; Three special cases.
	   (labels ((ptypep-one-type (type)
		      (declare (sys:downward-function))
		      ;; Don't pass on keys-seen for 1or0 and 1and0, because
		      ;; we haven't seen them at this level
		      (ptypep object type)))
	     (case name
	       (or (return-from ptypep
		     (some #'ptypep-one-type data-args)))
	       (and (return-from ptypep
		      (every #'ptypep-one-type data-args)))
	       (not (return-from ptypep
		      (not (ptypep object (car data-args)))))))
	   (multiple-value-bind (flavor-or-class structure-p deftype typep)
	       (symbol-flavor-or-cl-type name)
	     (cond (typep
		    (unless (apply typep object data-args)
		      (return-from ptypep nil)))
		   (flavor-or-class
		    (if (instancep flavor-or-class)
			(unless (clos-internals:typep-class object flavor-or-class)
			  (return-from ptypep nil))
		      (unless (and (instancep object)
				   (si:typep-flavor object name))
			(return-from ptypep nil))))
		   (structure-p
		    (if (arrayp object)
			(let ((nss-symbol (named-structure-p object)))
			  (unless (or (eq nss-symbol name)
				      (si:typep-structure object name))
			    (return-from ptypep nil)))
		      (return-from ptypep nil))))
	     ;; The 1unless0 matches how 1presentation-subtypep0 and 1map-over-type-hierarchy0 work
	     (unless (symbol-presentation-type-descriptor name)
	       (when deftype
		 (let ((new-type (apply deftype data-args)))
		   (with-type-decoded (new-type-name) new-type
		      (unless (eq new-type-name 'presentation-only-type)
			(unless (ptypep object new-type keys-seen)
			  (return-from ptypep nil))))))))))
      nil
      t
      keys-seen))
  ;; If we passed all tests, return 1t0.
  t)

(defmethod-type-descriptor (presentation-type-subtypep-compare presentation-type-descriptor)
			   (type-1 key-1 type-2 key-2)
  (cond ((or (atom type-2)
	     (null (cdr type-2)))
	 (values t t))
	((variable-boundp presentation-subtypep)
	 (funcall presentation-subtypep type-1 type-2))
	(t (fringe-eql-subtypep key-1 key-2))))

(defmethod-type-descriptor (presentation-type-typep-function-or-nil
			     presentation-type-descriptor
			     :search-p nil) ()
  (handler-or typep-function))


(defun fringe-eql-subtypep (key-1 key-2)
  (cond ((or (not (atom key-2))
	     (atom key-1))
	 ;; We aren't the case where we are doing (FOO . args) against FOO.
	 (values (fringe-eql key-1 key-2) t))
	(t ;; (and (atom key-2) (not (atom key-1)))
	   ;; We're sure we're not, unless CAR is 
	   (values nil (neq key-2 (car key-1))))))

(defun (presentation-only-type cl:typep) (&rest ignore)
  (error "You should not be asking TYPEP on a presentation type."))

(defmethod (presentation-type-descriptor-name presentation-type-descriptor) ()
  name)

(defun presentation-type-name (type &optional ignore)
  (etypecase type
    (presentation-type-descriptor
      (presentation-type-descriptor-name type))
    (symbol type)
    (list (etypecase (car type)
	    (symbol (car type))
	    (list (etypecase (caar type)
		    (symbol (caar type))
		    ((satisfies clos-internals::classp) (caar type))))
	    ((satisfies clos-internals::classp)
	     (car type))))
    ((satisfies clos-internals::classp) type)))

