;;; -*- Mode: LISP; Syntax: Common-lisp; Package: GRAPHICS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;;; Stipples and gray arrays.

(defstruct (stipple-array :named-array-leader
			  (:print-function print-stipple-array)
			  (:constructor make-stipple-array)
			  (:constructor-make-array-keywords (dimensions '(1 32))
							    (type 'sys:art-1b)))
  (name nil)
  (gray-level nil)
  (x-phase nil)
  )

(defun print-stipple-array (stipple stream ignore)
  (if (and (not *print-escape*) (stipple-array-name stipple))
      (princ (stipple-array-name stipple) stream)
      (printing-random-object (stipple stream :typep)
	(multiple-value-bind (width height)
	    (decode-raster-array stipple)
	  (format stream "~Dx~D~@[ ~A~]" width height (stipple-array-name stipple))))))

(defun stipple-array-repeat-size (stipple)
  (multiple-value-bind (width height)
      (decode-raster-array stipple)
    (values (or (and (typep stipple 'stipple-array) (stipple-array-x-phase stipple)) width)
	    height)))

;;; Compatible old function
(defun tv:make-gray (height width &rest patterns)
  (make-stipple height width
		(loop for octal-pattern in patterns
		      collect (loop with binary-pattern = 0
				    for octal-pos upfrom 0 by 3
				    for binary-pos below width
				    do (setq binary-pattern
					     (dpb (ldb (byte 1 octal-pos) octal-pattern)
						  (byte 1 binary-pos) binary-pattern))
				    finally (return binary-pattern)))))

(defun make-stipple (height width patterns &rest options)
  (assert (= height (length patterns)) (height patterns)
	  "Height should be same as number of patterns supplied")
  (check-type width (integer 0))
  (let* ((rwidth (lcm width 32))
	 (gray (with-stack-list (dimensions height rwidth)
		 (apply #'make-stipple-array :dimensions dimensions :x-phase width options))))
    (loop for pattern in patterns
	  for h upfrom 0 do
      (loop for pos below rwidth
	    for w downfrom (1- rwidth) do
	(setf (raster-aref gray w h) (ldb (byte 1 (mod pos width)) pattern))))
    gray))

;;; Another old name
(deff tv:make-binary-gray #'make-stipple)

;;; Sets of stipples.
(defvar *stipple-arrays* nil :localize t)
(defvar *pattern-stipple-arrays* nil :localize t)

;;; Gray textures that might be useful for deexposed or background
;;; graying, in increasing density from transparent to opaque (black or
;;; white).  If you are a masochist, you might also use bold patterns,
;;; Zippy, and so on.  This should eventually be the basis for a menu to
;;; act as the interface for gray setting.
;;; Also, for compatibility, this is a list of symbols, not stipple arrays.
(defvar tv:*gray-arrays* '(nil :black :white))

;;; Association of stipples used for gray simulation and their densities.
(defvar *gray-level-arrays* '((t 1) (nil 0)) :localize t)

(defun gray-level-stipple (gray-level)
  (loop for rest on *gray-level-arrays*
	as ((darker-gray darker-level) (lighter-gray lighter-level)) = rest
	do (when (null rest)
	     (return darker-gray))
	   (when ( gray-level lighter-level)
	     (return
	       (let ((darker-diff (- darker-level gray-level))
		     (lighter-diff (- gray-level lighter-level)))
		 (if (> darker-diff lighter-diff)
		     lighter-gray darker-gray))))))

(defprop defstipple defvar zwei:definition-function-spec-type)

(defmacro defstipple (name (height width) options patterns)
  (declare (arglist name (height width) (&key pretty-name gray-level tv-gray) patterns)
	   )
  `(defvar ,name (defstipple-1 ,height ,width ',patterns :name ',name . ,options)))

(defun defstipple-1 (height width patterns &key name pretty-name gray-level
						tv-gray pattern)
  (when (eq gray-level t)
    (setq gray-level (/ (loop for pattern in patterns sum (logcount pattern))
			(* width height))))
  (let ((stipple (make-stipple height width patterns
			       :name (or pretty-name (string-capitalize-words name))
			       :gray-level gray-level)))
    (pushnew stipple *stipple-arrays*)
    (when tv-gray
      (pushnew name (cdr tv:*gray-arrays*)))	;List of symbols, not stipples.
    (when pattern
      (pushnew stipple *pattern-stipple-arrays*))
    (when gray-level
      (pushnew (list stipple (float gray-level)) *gray-level-arrays*
	       :key #'second :test #'= :replace t)
      (setq *gray-level-arrays* (sort *gray-level-arrays* #'> :key #'second)))
    stipple))

(defun find-stipple-named (name)
  (let* ((stipple-package (find-package "STIPPLES"))
	 (string (typecase name
		   (string name)
		   (stipple-array
		     (stipple-array-name name))
		   (symbol
		     (if (and (eq (symbol-package name) stipple-package)
			      (boundp name))
			 (stipple-array-name (symbol-value name))
			 (string name)))
		   (otherwise (string name)))))
    (do-local-symbols (sym stipple-package)
      (when (and (boundp sym)
		 (string-equal string (stipple-array-name
					(symbol-value sym))))
	(return sym)))))

(defstipple stipples:50%-gray (2 2) (:tv-gray t :gray-level t)
  #b(01 10))

;; This one is taller than the others so that the vertical dotted line emanating
;; from the horizontal scroll bar will draw faster
(defstipple stipples:25%-gray (32 4) (:tv-gray t :gray-level t)
  #b(1000 0010 0100 0001 1000 0010 0100 0001 1000 0010 0100 0001 1000 0010 0100 0001
     1000 0010 0100 0001 1000 0010 0100 0001 1000 0010 0100 0001 1000 0010 0100 0001))

(defstipple stipples:75%-gray (4 4) (:tv-gray t :gray-level t)
  #b(0111 1101 1011 1110))

(defstipple stipples:33%-gray (3 3) (:tv-gray t :gray-level t)
  #b(100 010 001))

(defstipple stipples:hes-gray (4 4) (:tv-gray t)
  #b(1000 0000 0010 0000))

(defstipple stipples:12%-gray (8 8) (:tv-gray t :gray-level t)
  #b(10000000
     00010000
     00000010
     01000000
     00001000
     00000001
     00100000
     00000100))

(defstipple stipples:10%-gray (10 10) (:tv-gray t :gray-level t)
  #b(1000000000
     0001000000
     0000001000
     0000000001
     0010000000
     0000010000
     0000000010
     0100000000
     0000100000
     0000000100))

(defstipple stipples:9%-gray (11 11) (:tv-gray t :gray-level t)
  #b(10000000000
     00000001000
     00010000000
     00000000001
     00000010000
     00100000000
     00000000010
     00000100000
     01000000000
     00000000100
     00001000000))

(defstipple stipples:8%-gray (3 12) (:tv-gray t :gray-level t)
  #b(100000000000
     000010000000
     000000001000))

(defstipple stipples:7%-gray (7 14) (:tv-gray t :gray-level t)
  #b(10000000000000
     00001000000000
     00000000100000
     00000000000010
     00100000000000
     00000010000000
     00000000001000))

(defstipple stipples:6%-gray (8 16) (:tv-gray t :gray-level t)
  #b(1000000000000000
     0000001000000000
     0000000000001000
     0010000000000000
     0000000010000000
     0000000000000010
     0000100000000000
     0000000000100000))

(defstipple stipples:5.5%-gray (18 18) (:tv-gray t :gray-level t)
  #b(100000000000000000
     000001000000000000
     000000000010000000
     000000000000000100
     001000000000000000
     000000010000000000
     000000000000100000
     000000000000000001
     000010000000000000
     000000000100000000
     000000000000001000
     010000000000000000
     000000100000000000
     000000000001000000
     000000000000000010
     000100000000000000
     000000001000000000
     000000000000010000))

;;; These names could use some work.
;;; It'd be nice to keep the graphic-input:display-pattern-menu reasonably sized.

#||	;.5
(defstipple stipples:medium-gray (2 2) (:pattern t)
  #b(01 10))
||#

(defstipple stipples:southeast-dense-hatch (3 3) (:pattern t :pretty-name "SE Dense")
  #b(100 010 001))

(defstipple stipples:southwest-dense-hatch (3 3) (:pattern t :pretty-name "SW Dense")
  #b(001 010 100))

(defstipple stipples:southeast-thin-hatch ( 5 5) (:pattern t :pretty-name "SE Hatch")
  #b(10000 01000 00100 00010 00001))

(defstipple stipples:southwest-thin-hatch ( 5 5) (:pattern t :pretty-name "SW Hatch")
  #b(00001 00010 00100 01000 10000))

(defstipple stipples:southeast-thick-hatch (5 5) (:pattern t :pretty-name "SE Thick")
  #b(11000 01100 00110 00011 10001))

(defstipple stipples:southwest-thick-hatch (5 5) (:pattern t :pretty-name "SW Thick")
  #b(10001 00011 00110 01100 11000))

#||
(defstipple stipples:alt-4-gray (4 4) (:pattern t)
  #b(1000 0000 0010 0000))

(defstipple stipples:alt-6-gray (6 6) (:pattern t)
  #b(100000 000000 000000 000100 000000 000000))

(defstipple stipples:alt-8-gray (8 8) (:pattern t)
  #b(10000000 00000000 00000000 00000000
     00001000 00000000 00000000 00000000))

(defstipple stipples:alt-4-dark-gray (4 4) (:pattern t)
  #b(0111 1111 1101 1111))

(defstipple stipples:alt-6-dark-gray (6 6) (:pattern t)
  #b(011111 111111 111111 111011 111111 111111))
||#

(defstipple stipples:southeast-rain (4 4) (:pattern t :pretty-name "SE Rain")
  #b(1000 0100 0010 0000))

(defstipple stipples:southwest-rain (4 4) (:pattern t :pretty-name "SW Rain")
  #b(0001 0010 0100 0000))

(defstipple stipples:alt-rain (8 4) (:pattern t)
  #b(1000 0100 0010 0000 1000 0001 0010 0000))

(defstipple stipples:tracks (8 8) (:pattern t)
  #b(01000000 10100000 00000000 00000000
     00000010 00000101 00000000 00000000))

(defstipple stipples:horizontal-dashes (6 4) (:pattern t :pretty-name "Horiz Dashes")
  #b(1100 0000 0000 0011 0000 0000))

(defstipple stipples:vertical-dashes (6 6) (:pattern t :pretty-name "Vert Dashes")
  #b(100100 100100 100000 100000 000100 000100))

(defstipple stipples:horizontal-lines (4 1) (:pattern t :pretty-name "Horiz Lines")
  #b(1 0 0 0))

(defstipple stipples:vertical-lines (1 4) (:pattern t :pretty-name "Vert Lines")
  #b(1000))

(defstipple stipples:bricks (10. 8) (:pattern t)
  #b(00001000 00001000 00001000 00001000 11111111
     10000000 10000000 10000000 10000000 11111111))

(defstipple stipples:half-bricks (6 8) (:pattern t)
  #b(10001000 10001000 10001000 10001000 10001000 11111111))

(defstipple stipples:double-bricks (10. 8) (:pattern t)
  #b(00001000 00001000 00001000 00001000 00001000
     00001000 00001000 00001000 00001000 11111111))

(defstipple stipples:tiles (8 8) (:pattern t)
  #b(10000000 10000000 01000001 00111110
     00001000 00001000 00010100 11100011))

(defstipple stipples:hearts (8 8) (:pattern t)
  #b(01101100 10010010 10010010 01000100
     00101000 00010000 00000000 00000000))

(defstipple stipples:small-diamonds (4 4) (:pattern t)
  #b(1000 0101 0010 0101))

(defstipple stipples:large-diamonds (8 8) (:pattern t :pretty-name "Diagonals")
  #b(10000000 01000001 00100010 00010100
     00001000 00010100 00100010 01000001))

(defstipple stipples:parquet (8 8) (:pattern t)
  #b(10000000 11000001 00100010 00011100
     00001000 00010000 00100000 01000000))

(defstipple stipples:weave8 (8 8) (:pattern t)
  #b(00100010 00000010 11111010 00000010
     00100010 00100000 10101111 00100000))

(defstipple stipples:weave8b (8 8) (:pattern t)
  #b(00000000 00000010 01110010 00000010
     00000000 00100000 00100111 00100000))

(defstipple stipples:filled-diamonds (8 8) (:pattern t :pretty-name "Diamonds")
  #b(11111111 01111111 00111110 00011100
     00001000 00011100 00111110 01111111))

;;;; Pattern instances

;;; Basis for protocol.
(defflavor basic-pattern () ()
  (:required-methods pattern-call-with-drawing-parameters))

;;; Call function with drawing arguments.  To pass on to device dependent binding routine,
;;; call with :pattern self as the arguments.
(defgeneric pattern-call-with-drawing-parameters (pattern function stream drawing-state)
  )

;;; Always pass on to device dependent routine.
(defflavor device-pattern () (basic-pattern))

(defmethod (pattern-call-with-drawing-parameters device-pattern) (function ignore ignore)
  (funcall function :pattern self))

;;; Control of raster oriented device.
(defflavor raster-device-pattern () (device-pattern)
  (:required-methods pattern-compute-raster-source-pattern))

;;; Fill in the source and update the alus.  To get fuller control over the individual
;;; slices in the shape, return an instance (e.g. self) as the source.
(defgeneric pattern-compute-raster-source-pattern (pattern
						   source-so-far ones-alu zeros-alu
						   temporary-p stream drawing-state)
  (declare (values (updated-source ones-alu zeros-alu temporary-p)))
  )

;;; Complete control over raster device.
(defflavor raster-slice-device-pattern () (raster-device-pattern)
  (:required-methods pattern-draw-raster-slice))

(defmethod (pattern-compute-raster-source-pattern raster-slice-device-pattern)
	   (source-so-far ones-alu zeros-alu temporary-p ignore ignore)
  (when temporary-p
    (tv:deallocate-temp-sheet-raster-and-header source-so-far))
  (values self ones-alu zeros-alu))

;;; Called for each slice in the shape.  Fill in by drawing anything you want to stream,
;;; e.g. using :draw-1-bit-raster.
(defgeneric pattern-draw-raster-slice (pattern width height x y ones-alu zeros-alu
					       stream drawing-state))

;;; Control of postscript imaging device.
(defflavor lgp:postscript-device-pattern () (device-pattern)
  (:required-methods lgp:pattern-output-postscript-code))

;;; Output some postscript code (as characters) that does the filling or stroking.
(defgeneric lgp:pattern-output-postscript-code (pattern device-stream filled
							stream drawing-state))

;;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")make-simple-pattern0 (&rest drawing-args) is just a simple way of bundling those args.
(defflavor simple-pattern ((args nil)) (basic-pattern)
  (:constructor make-simple-pattern-internal (args)))

(defmethod (pattern-call-with-drawing-parameters simple-pattern) (function ignore ignore)
  (apply function args))

(defun make-simple-pattern (&rest drawing-args)
  (make-simple-pattern-internal (copy-list drawing-args)))

;;; 1make-device-conditional-pattern0 (device-alist) simply conditionalizes on the type of
;;;  stream.  Each alist element is (type . drawing-args). Types are:
;;;   1:color0 -- a stream that can draw in color.
;;;   1:postscript0 -- a stream that goes to a postscript interpreter.
;;;   1:window0 -- a window stream.
;;;   1otherwise0 (the symbol 1otherwise0) -- anything.
;;;  The first element that matches is used.
(defflavor device-conditional-pattern ((device-alist nil)) (basic-pattern)
  (:constructor make-device-conditional-pattern (device-alist)))

(defmethod (pattern-call-with-drawing-parameters device-conditional-pattern)
	   (function stream ignore)
  (loop for (condition . args) in device-alist do
    (when (ecase condition
	    (:color (color:color-stream-p stream))
	    (:postscript (lgp:postscript-stream-p stream))
	    (:window (send-if-handles stream :screen))
	    ((otherwise) t))
      (return (apply function args)))
    finally (return (funcall function))))

;;; 1make-two-color-stipple0 (stipple ones-color zeros-color) draws stipple in given colors.
;;; If not a color stream, just draws the stipple normally.
(defflavor two-color-stipple (stipple ones-color zeros-color) (raster-device-pattern)
  (:constructor make-two-color-stipple (stipple ones-color zeros-color)))

(defmethod (pattern-call-with-drawing-parameters two-color-stipple) (function stream ignore)
  (if (color:color-stream-p stream)
      (funcall function :pattern self)
      (funcall function :stipple stipple :opaque t)))

(defmethod (pattern-compute-raster-source-pattern two-color-stipple) (source-so-far
								      alu ignore
								      temporary-p
								      stream ignore)
  (when temporary-p
    (tv:deallocate-temp-sheet-raster-and-header source-so-far))
  (values stipple
	  (color:color-alu-for-window ones-color stream alu)
	  (color:color-alu-for-window zeros-color stream alu)))

;;; 1make-contrasting-pattern0 (index-number number-of-indices) draws in
;;; something distinct for adjacent indices.
(defflavor contrasting-pattern (index-number number-of-indices) (basic-pattern)
  (:constructor make-contrasting-pattern (index-number number-of-indices)))

(defmethod (pattern-call-with-drawing-parameters contrasting-pattern) (function stream ignore)
  (if (color:color-stream-p stream)
      (funcall function :color (nth (mod index-number 6)
				    '(:red :blue :green :yellow :cyan :magenta)))
      (funcall function :gray-level (/ (if (evenp index-number) index-number
					   (- (* (floor number-of-indices 2) 2) index-number))
				       number-of-indices))))

(compile-flavor-methods simple-pattern device-conditional-pattern
			two-color-stipple contrasting-pattern)
