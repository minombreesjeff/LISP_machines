;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Place for things of types presentation-mouse-handler and
;;; presentation-mouse-handler-functions and their list structure.
;;; This is not :gc :ephemeral because the handlers aren't consed
;;; with any frequency.  handler-table-entries, which point (among
;;; other things) to handlers, are ephemeral and go in *eql-dispatch-area*.

(defvar *presentation-mouse-handler-functions* () :localize t)
(defvar *presentation-mouse-handler-names*
	(si:make-aarray 500 :name "mouse handler name completion table"))

(defstruct (presentation-mouse-handler-functions
	     :named
	     (:make-array (:area *handler-area*))
	     (:constructor make-presentation-mouse-handler-functions
			   (name tester-function documentation-or-function))
	     (:print-function print-presentation-mouse-handler-functions))
  name
  value-function
  tester-function
  documentation-or-function
  )

(defun print-presentation-mouse-handler-functions (handler-functions stream depth)
  (cond ((not *print-escape*)
	 (prin1 (presentation-mouse-handler-functions-name handler-functions) stream))
	(*print-structure-contents*
	 (cl-structure-printer (type-of handler-functions) handler-functions stream depth))
	(t
	 (printing-random-object (handler-functions stream :typep)
	   (princ handler-functions stream)))))

(defun add-presentation-mouse-handler-function (name tester documentation)
  (pushnew (make-presentation-mouse-handler-functions
	     name
	     tester
	     documentation)
	   *presentation-mouse-handler-functions*
	   :key #'presentation-mouse-handler-functions-name
	   :localize t :replace t)
  (si:aarray-insert *presentation-mouse-handler-names* (string name) name 'atom))

(defun find-presentation-mouse-handler-functions (name &optional (error-p t))
  (or (find name *presentation-mouse-handler-functions*
	    :key #'presentation-mouse-handler-functions-name)
      (and error-p
	   (error "No presentation handler function named ~S." name))))

(define-function-spec-handler presentation-mouse-handler
			      (operation function-spec &optional arg1 arg2)
  (case operation
    (validate-function-spec
      (case (length function-spec)
	((2) (symbolp (second function-spec)))
	((3) (and (symbolp (second function-spec))
		  (member (third function-spec) '(:tester :documentation))))))
    (definition-has-location-p t)
    ((fdefine fdefinition fdefinedp fdefinition-location fundefine)
     (let* ((handler-function (find-presentation-mouse-handler-functions
				(second function-spec)
				(not (member operation '(fdefinedp fundefine)))))
	    (location
	      (and handler-function
		   (ecase (third function-spec)
		     ((nil)
		      (locf (presentation-mouse-handler-functions-value-function
			      handler-function)))
		     ((:tester)
		      (locf (presentation-mouse-handler-functions-tester-function
			      handler-function)))
		     ((:documentation)
		      (locf (presentation-mouse-handler-functions-documentation-or-function
			      handler-function)))))))
       (ecase operation
	 (fdefine
	   (setf (location-contents location) arg1))
	 (fdefinition
	   (location-contents location))
	 (fdefinedp
	   (and location (not (null (location-contents location)))))
	 (fdefinition-location
	   location)
	 (fundefine
	   (when location
	     (setf (location-contents location) nil))))))
    (otherwise
      (si:function-spec-default-handler operation function-spec arg1 arg2))))


(defvar *presentation-mouse-handlers* ())

(defstruct (presentation-mouse-handler :named
				       (:make-array (:area *handler-area*))
				       (:constructor make-presentation-mouse-handler
						     (handler-functions
						      context-presentation-type
						      displayed-presentation-type
						      gesture
						      property-list))
				       (:print-function print-presentation-mouse-handler))
  handler-functions
  context-presentation-type
  displayed-presentation-type
  gesture
  (property-list nil)
  )

(defun print-presentation-mouse-handler (mouse-handler stream depth)
  (cond ((not *print-escape*)
	 (princ (presentation-mouse-handler-handler-functions mouse-handler) stream))
	(*print-structure-contents*
	 (cl-structure-printer (type-of mouse-handler) mouse-handler stream depth))
	(t
	 (printing-random-object (mouse-handler stream)
	   (format stream "MOUSE-HANDLER ~A [~S] (~S  ~S)"
		   mouse-handler
		   (presentation-mouse-handler-gesture mouse-handler)
		   (presentation-mouse-handler-context-presentation-type mouse-handler)
		   (presentation-mouse-handler-displayed-presentation-type mouse-handler)
		   )))))

(defsubst presentation-mouse-handler-value-function (presentation-mouse-handler)
  (presentation-mouse-handler-functions-value-function
    (presentation-mouse-handler-handler-functions presentation-mouse-handler)))

(defun presentation-mouse-handler-tester-function (presentation-mouse-handler)
  (let* ((handler-functions (presentation-mouse-handler-handler-functions
			      presentation-mouse-handler))
	 (tester (presentation-mouse-handler-functions-tester-function handler-functions)))
    (if (eq tester t)
	(presentation-mouse-handler-functions-value-function handler-functions)
	tester)))

(defsubst presentation-mouse-handler-documentation-or-function (presentation-mouse-handler)
  (presentation-mouse-handler-functions-documentation-or-function
    (presentation-mouse-handler-handler-functions presentation-mouse-handler)))

(defun add-presentation-mouse-handler (handler-functions-name
				       context-presentation-type displayed-presentation-type
				       object-type gesture property-list)
  ;; Filter out now-bogus calls compiled into BIN files compiled in 7.1.
  (when (member object-type '(t nil no-type))
    (let ((handlers-added (list (make-presentation-mouse-handler
				  (find-presentation-mouse-handler-functions
				    handler-functions-name)
				  (heap-copy-presentation-type context-presentation-type
							       *handler-area* 2)
				  (heap-copy-presentation-type displayed-presentation-type
							       *handler-area* 2)
				  gesture
				  (copy-list property-list *handler-area*))))
	  (handlers-deleted nil))
      (setq *presentation-mouse-handlers*
	    (copy-list (nconc *presentation-mouse-handlers* handlers-added)))
      (update-presentation-context-mouse-handlers-cache handlers-added handlers-deleted))))

(defun find-presentation-mouse-handler (name)
  (labels ((handler-name (handler)
	     (presentation-mouse-handler-functions-name
	       (presentation-mouse-handler-handler-functions handler))))
    (find name *presentation-mouse-handlers*
	  :key #'handler-name)))

(defun delete-presentation-mouse-handler (name &key (kill t))
  (when kill
    (setq *presentation-mouse-handler-functions*
	  (delete name *presentation-mouse-handler-functions*
		  :key #'presentation-mouse-handler-functions-name))
    (si:aarray-delete *presentation-mouse-handler-names* (string name) name 'atom))
  (let ((handlers-deleted nil))
    (setq *presentation-mouse-handlers*
	  (copy-list
	    (delete-if (lambda (handler)
			 (when (eq (presentation-mouse-handler-functions-name
				     (presentation-mouse-handler-handler-functions handler))
				   name)
			   (push handler handlers-deleted)
			   t))
		       *presentation-mouse-handlers*)))
    (when handlers-deleted
      (update-presentation-context-mouse-handlers-cache nil handlers-deleted)
      t)))

(compiler:make-obsolete delete-presentation-mouse-handlers
			"use DELETE-PRESENTATION-MOUSE-HANDLER instead")
(defun delete-presentation-mouse-handlers (name)
  (delete-presentation-mouse-handler name :kill nil))


;;; Add and remove handlers from the handler-name table and (if active), the
;;; mouse handler type lookup table.
(defun update-presentation-context-mouse-handlers-cache (handlers-being-added
							 handlers-being-removed)
  (process:with-lock (*type-handler-tables-lock*)
    (loop for h in handlers-being-added
	  for name = (presentation-mouse-handler-functions-name
		       (presentation-mouse-handler-handler-functions h))
	  do (push h (gethash name *presentation-mouse-handlers-table*)))

    ;; We don't remove the handlers being removed from D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*handlers-affected-by-types-table*0,
    ;; because only the names live there.  If the incremental table updaters encounter
    ;; a stale handler name, they won't find any actual handlers in
    ;; 1*presentation-mouse-handlers-table*0, and so will do nothing.    
    (loop for h in handlers-being-removed
	  for name = (presentation-mouse-handler-functions-name
		       (presentation-mouse-handler-handler-functions h))
	  do (setf (gethash name *presentation-mouse-handlers-table*)
		   (remove h (gethash name *presentation-mouse-handlers-table*))))

    (unless *defer-type-change-processing*
      (when (or *update-types-incrementally*
		(eql *type-handler-tables-valid-tick* *type-tick*))
	(loop for handler in handlers-being-removed
	      do (remove-handler-from-table handler))
	(loop for handler in handlers-being-added
	      do (enter-handler-in-table-with-predicates handler))
	(clear-handler-caches)))))


(defmacro define-presentation-translator (name-or-stuff stuff-or-arglist &rest body)
  (declare (arglist . (name
			(from-presentation-type to-presentation-type
						&key tester
						     (gesture :select)
						     documentation
						     suppress-highlighting
						     (menu t)
						     (context-independent nil)
						     priority exclude-other-handlers
						     blank-area)
			arglist &body body))
	   (zwei:indentation 1 2 3 1))
  (let ((name nil)
	(stuff name-or-stuff)
	(arglist stuff-or-arglist))
    (if (atom name-or-stuff)
	(setq name name-or-stuff
	      stuff stuff-or-arglist
	      arglist (pop body))
	(warn () "Obsolete format of DEFINE-PRESENTATION-TRANSLATOR; ~
		  you should give a name."))
    (let ((compiler:default-warning-function name)
	  (compiler:default-warning-definition-type 'define-presentation-action))
      (destructuring-bind (from-presentation-type to-presentation-type
						  &key (tester nil tester-p)
						  (mouse-click :select)
						  &allow-other-keys &rest options)
	 stuff
						;--- Compatibility.  Also assumes that if it's old enough not to have a name, it
						;uses :MOUSE-CLICK instead of :GESTURE.
	(when (null name)
	  (setq name (fintern "~A-TO-~A-TRANSLATOR-ON-~A"
			      from-presentation-type to-presentation-type mouse-click)))
	(define-presentation-translator-internal name arglist
	  from-presentation-type to-presentation-type
	  (if (not tester-p) t tester)
	  options nil body)))))

;This removes it from the command tables but doesn't fundefine the various defuns
(defun (define-presentation-translator zwei:kill-definition) (name)
  (delete-presentation-mouse-handler name :kill t))

(defprop define-presentation-action define-presentation-translator
	 zwei:definition-function-spec-type)

(defmacro define-presentation-action (name-or-stuff stuff-or-arglist &rest body)
  (declare (arglist . (name
			(from-presentation-type to-presentation-type
						&key tester
						     defines-menu
						     (gesture :select)
						     documentation
						     suppress-highlighting
						     (menu t)
						     (context-independent nil)
						     priority exclude-other-handlers
						     blank-area)
			arglist &body body))
	   (zwei:indentation 1 2 3 1))
  (let ((name nil)
	(stuff name-or-stuff)
	(arglist stuff-or-arglist))
    (if (atom name-or-stuff)
	(setq name name-or-stuff
	      stuff stuff-or-arglist
	      arglist (pop body))
	(warn () "Obsolete format of DEFINE-PRESENTATION-ACTION; ~
		  you should give a name."))
    (let ((compiler:default-warning-function name)
	  (compiler:default-warning-definition-type 'define-presentation-action))
      (destructuring-bind (from-presentation-type to-presentation-type
						  &key (tester nil)
						  (mouse-click :select)
						  &allow-other-keys &rest options)
	 stuff
	(when (null name)
	  (setq name (fintern "~A-TO-~A-ACTION-ON-~A"
			      from-presentation-type to-presentation-type mouse-click)))
	(define-presentation-translator-internal name arglist
	  from-presentation-type to-presentation-type
	  tester options
	  '(:do-not-compose t)
	  (append body '(nil)))))))

(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Function to provide lambda lists that satisfy the pinheaded CL lambda list
;;; ordering rules, designed to make macro-writing as difficult as possible.
;;; The "additional-key keyword and the "rest" keyword allow the macro
;;; to insist that some arguments be present even when the user hasn't
;;; supplied them.
;;; This function can construct dubious lambda lists when ((:x y)) keywords
;;; are in use.  We haven't time to unscramble all the issues tonight. --BIM&RWK
;;; What this wants to be replaced by is a function that takes an arglist and a
;;; template arglist, and fills in any missing arguments of any type.
;;; however, thats harder to write.
0;;; Actually, I wrote it (a year later), and it lives at the start of this file.
;;; I haven't made this use it yet, though; I first needed it for something else.  --RWK
(defun make-allow-any-other-keys-arglist (arglist &key additional-key rest
					  (n-required 0)
					  (n-optional 0)
					  keys-passed)
  (lt:with-lambda-list-destructured (arglist :required required
					     :optional optional
					     :key key
					     :rest rest-present)
    (when (and rest rest-present (neq rest-present 'ignore)
	       (neq rest-present rest))
      (warn "Two rest arguments: ~S and ~S" rest-present rest))
    (when (> (length optional) n-optional)
      (warn "~D optional arguments given, but only ~D defined."
	    (length optional) n-optional))
    (when (> (length required) n-required)
      (warn "~D required arguments given, but only ~D defined."
	    (length required) n-required))
    (when (and key rest-present
	       ( (length required) n-required))
      (warn "&KEY and &REST both supplied, but there must be ~D required arguments."
	    n-required))
    (labels ((key-form-keyword (form)
	       (cond ((symbolp form)
		      (if (keywordp form)
			  form
			  (intern (symbol-name form) "")))
		     ((symbolp (car form))
		      (if (keywordp (car form))
			  (car form)
			  (intern (symbol-name (car form)) "")))
		     (t (second (first form)))))
	     (key-form-same-keyword (form1 form2)
	       (eq (key-form-keyword form1) (key-form-keyword form2))))
      (when (and key keys-passed)
	(let ((unknown (set-difference key keys-passed :test #'key-form-same-keyword)))
	  (when unknown
	    (warn "&KEY argument~P~{ ~A~} ~:[is~;are~] not passed by caller."
		  (length unknown) unknown (cdr unknown)))))
      (let ((good-rest (or rest-present rest))
	    (optional (append optional (make-list (max 0 (- n-optional (length optional)))
						  :initial-element 'ignore))))
	(unless (or rest-present
		    ( (+ (length required) (length optional))
		       (+ n-required n-optional)))
	  (setq required (append required (make-list (max 0 (- (+ n-required n-optional)
							       (+ (length required)
								  (length optional))))
						     :initial-element 'ignore))))
	(unless (or good-rest key)
	  (setq good-rest 'ignore))
	`(,@required ,@(when optional `(&optional ,@optional))
	  ,@(when good-rest `(&rest ,good-rest))
	  ,@(when (or key additional-key)
	      `(&key ,@key
		     ,@(set-difference additional-key key :test #'key-form-same-keyword)
		     &allow-other-keys)))))))


(defun define-presentation-translator-internal (name arglist
						from-presentation-type to-presentation-type
						tester options property-list body)
  (check-presentation-type-argument from-presentation-type :evaluated nil
				    :function name
				    :definition-type 'define-presentation-translator)
  (check-presentation-type-argument to-presentation-type :evaluated nil
				    :function name
				    :definition-type 'define-presentation-translator)
  (flet ((make-allow-other-keys-defun (function-name arglist body n-required keys-passed)
	   (setq arglist (make-allow-any-other-keys-arglist
			   arglist
			   :n-required n-required
			   :keys-passed keys-passed))
	   `(defun ,function-name ,arglist
	      (declare (function-parent ,name define-presentation-translator))
	      . ,body)))
    (destructuring-bind (&key (documentation nil)
			      (gesture :select)
			      (mouse-click nil m-c-p)
			      ((:suppress-highlighting ignore))
			      (not-in-menu nil)
			      ((:menu ignore) t)
			      ((:defines-menu ignore))
			      ((:context-independent context-independent))
			      ((:do-not-compose do-not-compose)
			       (getf property-list :do-not-compose))
			      ((:priority ignore))
			      ((:exclude-other-handlers ignore))
			      (blank-area nil)
			      ((:tester ignore)))
			options

      (when (and context-independent
		 (not (eql to-presentation-type 't)))
	(warn "~S ~S should not be used with a ~'ito-presentation-type~ of ~S.
	       It is only valid for translators to ~S."
	      :context-independent t to-presentation-type t)
	(setq options (copy-list options))
	(remf options :context-independent))

      (when (and context-independent
		 (not do-not-compose))
	(warn "~S ~S must only be used with ~S ~S.~@
	       A translator cannot be context-independent if the context~@
	       gets to see (and accept or decline) its value.~@
	       You probably want to remove the ~S option,~@
	       not add a ~S option."
	      :context-independent t :do-not-compose t
	      :context-independent :do-not-compose)
	(setq options (copy-list options))
	(remf options :context-independent))
	
      (when not-in-menu
	(warn `(:form ,options) "~S ~S is an obsolete format; use ~S ~S."
	      :not-in-menu not-in-menu :menu nil)
	(setf (getf property-list :menu) nil))
      (when m-c-p
	(setq gesture mouse-click)
	(warn `(:form ,options) "~S ~S is an obsolete format; use ~S ~S."
	      :mouse-click mouse-click :gesture gesture))
      (unless (symbolp gesture)
	(if (sys:mouse-char-p gesture)
	    (let ((name (mouse-char-gesture gesture)))
	      (warn `(:form ,options) "Gesture names are not mouse characters~@[~
 ;use ~S in place of ~S~]" name gesture))
	    (warn `(:form ,options) "~S is not a valid gesture name; they are symbols."
		  gesture)))
      (loop for indicator in '(:suppress-highlighting :menu :defines-menu
						      :context-independent
						      :do-not-compose
						      :priority :exclude-other-handlers)
	    as value = (getf options indicator options)
	    unless (eq value options)
	      do (setf (getf property-list indicator) value))
      `(progn
	 (add-presentation-mouse-handler-function ',name
						  ',(unless (consp tester)
						      tester)
						  ',(unless (consp documentation)
						      documentation))
	 ,(make-allow-other-keys-defun `(presentation-mouse-handler ,name)
				       arglist `((block ,name . ,body))
				       1 '(:gesture :handler :input-context :mouse-char
					   :original-presentation :presentation
					   :window :x :y :for-menu-p))
	 ,(when (consp tester)
	    (let ((tester-function `(presentation-mouse-handler ,name :tester)))
	      (prog1
		(make-allow-other-keys-defun tester-function (first tester) (rest tester)
					     1 '(:gesture :handler :input-context :mouse-char
                                                 :presentation :presentation-type :window))
		(setq tester tester-function))))
	 ,(when (consp documentation)
	    (let ((documentation-function `(presentation-mouse-handler ,name :documentation)))
	      (prog1
		(make-allow-other-keys-defun documentation-function
					     (first documentation) (rest documentation)
					     1 '(:gesture :handler :input-context :mouse-char
                                                 :presentation :string-buffer
						 :window :for-menu-p))
		(setq documentation documentation-function))))
	 (when (record-source-file-name ',name 'define-presentation-translator)
	   (delete-presentation-mouse-handler ',name :kill nil)
	   . ,(flet ((add-one (from-type-1 from-type-2
					   &optional (property-list property-list))
		       `(add-presentation-mouse-handler
			  ',name ',to-presentation-type ',from-type-1 ',from-type-2
			  ',gesture ',property-list)))
		(append (when blank-area
			  (let* ((menu (getf property-list :menu))
				 (new-props (if (not menu)
						property-list
					      (copy-list property-list))))
			    (when menu		;Present and not :MENU NIL
			      (if (atom menu)
				  (when (eq blank-area :in-menu)
				    (setf menu :blank-area))
				(when (eq blank-area :in-menu)
				  (setf menu `(:blank-area ,@(cdr menu)))))
			      (setf (getf new-props :menu) menu))
			    (ncons (add-one 'no-type 'no-type new-props))))
			(case from-presentation-type
			  ((nil) (ncons (add-one nil nil)))
			  ((t) (ncons (add-one t t)))
			  (no-type
			    (unless blank-area	;Redundant
			      (list (add-one 'no-type 'no-type))))
			  (otherwise
			    (list ;; This 1t0 could be 1expression0, but 1t0 is faster.
				  (add-one from-presentation-type t)))))))))))

(defprop define-presentation-to-command-translator define-presentation-translator
	 zwei:definition-function-spec-type)

(defmacro define-presentation-to-command-translator
	  (name-or-stuff stuff-or-arglist &rest body)
  (declare (arglist . (name
			(presentation-type &key tester
						(gesture :select)
						documentation
						suppress-highlighting
						(menu t)
						blank-area)
			arglist &body body))
	   (zwei:indentation 1 2 3 1))
  (let ((name nil)
	(stuff name-or-stuff)
	(arglist stuff-or-arglist))
    (if (atom name-or-stuff)
	(setq name name-or-stuff
	      stuff stuff-or-arglist
	      arglist (pop body))
	(warn () "Obsolete format of DEFINE-PRESENTATION-TO-COMMAND-TRANSLATOR; ~
		  you should give a name."))
    (destructuring-bind (presentation-type &key &allow-other-keys &rest options)
			stuff
      `(define-presentation-translator ,name
				       (,presentation-type cp:command . ,options) ,arglist
	 . ,body))))


#+++ignore
;; Useful for getting around the missing sensitivity for 
;;  x  ((token-or-type (foo) ((sequence x))))
;; I tried doing this with a general translator, but got screwed by the sequence object type.
(defmacro define-token-or-type-sequence-translators (type &optional (from-type type)
							  &key (key 'identity))
  `(progn
     (define-presentation-translator ,(fintern "SEQUENCE-OF-~A" type)
	(,from-type ((cl:sequence ,type)))
	(thing)
       (list (,key thing)))
     (define-presentation-translator ,(fintern "SEQUENCE-OF-~A-ACTIVATE" type)
	(,from-type ((cl:sequence ,type)) :gesture :select-and-activate)
	(thing)
       (values (list (,key thing)) '((cl:sequence ,type)) :activate t))))
