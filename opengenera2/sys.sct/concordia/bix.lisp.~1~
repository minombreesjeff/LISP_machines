;;;-*- Syntax: Common-lisp; Mode: Lisp; Package: Nsage; Lowercase: T; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#|
Saving formatter index information for later index runs.

This is for making a master index that combines indexes from several individual books.

The Concordia user, after formatting the book with Format Pages, does Save Index
to save the index info to a BIX (binary index) file.  I could make it so Save Tags 
does what Save Index does, except that the tags user may well be the writer formatting
a book over and over, while the index user is the poor person who finally gets to
do the master index after all the other books are finally done.

The person producing the master index does Format Merged Index, giving it the name
of a text file that contains the names of all the BIX files.  It seemed better to
put all the names into a stable file, instead of making you type in a dozen pathnames
each time.  [I could have made it so the list of file names was in a doc record for the 
master index book itself.  Some other day.]  It formats the index, starting at page 1,
IndexStyle = Permuted, document-type = 3SyManual.  To get the pages hardcopied, saved
or whatever, use the name "Merged Index D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")pathname0" where 1pathname0 was the file you
gave to Format Merged Index.

The text file naming the BIX files contains one pathname per line.
You can put in comments by preceding them with exclamation points,
like Lisp code uses semicolons (uh, hate that lisp-o-centric terminology?
Well, then, like HyperTalk uses "--".)

Each BIX file contains the name of the formatted topic it is the index for.
At the time of reading the BIX files, each such topic must actually be 
a registered book, with a nonempty "mnemonic".  That mnemonic is prefixed to
each page number in the master index.  If it can't find the registered
book or it has an empty mnemonic, it uses the debugger to give you a chance
to load or repair the register-book form, and Resume to try again.

The frontmatter for the master index book (including e.g. the pages "How to Use 
This Index" in the old book 10) must be formatted separately.

Some day we could make it work for multilevel indexes as well as permuted.

|#

#|
Implementation documentation.

A .bix file (binary index) contains information to reconstruct index entries,
for reloading to construct a master index book.
It's sab-like in detail (I started with the Private Document DeX commands).
It starts with the topic and type of the record-group this is the index for,
  followed by a 32-bit number: number of entries following.
Each entry is a 32-bit page number,
  followed by contents-list for that page number's rendering,
  followed by the contents-list for the index entry itself,
  followed by the string-to-sort-on (or nil).

|#

;;;========================================
;;; Saving
;;;========================================

;; The command just calls into the subroutine.
(define-page-previewer-command ((2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")com-save-index0 )
    ((record-group `((formatted-record-group :hash-table ,formatted-pages-hash-table))
		   :default current-record-group)
     (file `((pathname) :default-type "BIX")))
   (save-index-entries self record-group file))

;; This is split out into a subroutine in case we decide Save Tags should do this.
(defmethod 2(save-index-entries page-previewer)0 (formatted-record-group bix-pathname)
  (let* ((formatted-pages (gethash formatted-record-group formatted-pages-hash-table))
	 (final-ambient-values (formatted-pages-final-ambient-values formatted-pages))
	 (index-database (ambient-counters-lookup-ambient-value final-ambient-values 'index-database))
	 (entries (index-database-entries index-database)))
    (with-open-file (stream bix-pathname :direction :output :characters nil :byte-size 8)
      (with-sab-symbol-table (symbol-table :write stream)
	(write-sab-topic-spec (record-group-topic formatted-record-group)
			      stream symbol-table)
	(write-sab-type-spec (record-group-type formatted-record-group)
			     stream symbol-table)
	(write-32-bit-number stream (length entries))
	(tv:dolist-noting-progress (entry entries (format nil "Index entries  ~a"
							  bix-pathname))
	  (let ((counter (index-database-entry-page-counter entry)))
	    (write-32-bit-number stream (send counter :value))
	    (write-sab-contents-list (counter-value-contents-list counter :reference)
				     stream symbol-table)
	    (write-sab-contents-list (index-database-entry-contents-list entry)
				     stream symbol-table)
	    ;; If it was a multilevel index entry, we gotta save this.
	    ;; If it was permuted, it's wasted space, because it will be reconstructed.
	    ;; Can't tell any longer, too bad.
	    (write-sab-any-type (index-database-entry-string-to-sort-on entry)
				stream symbol-table)))))))

;;;========================================
;;; Reading
;;;========================================

;;; read the pathnames of the bix files out of the text file
(defun 2read-bix-pathnames-from-file0 (pathname)
  (let ((result ()))
    (with-open-file (in pathname)
      (loop
	(let ((line (read-line in nil)))
	  (when (null line) (return))
	  ;; The string processing here is not something you'd want to
	  ;; emulate for something with hundreds of lines, but for tens, it's okay.
	  (let ((comment-loc (position #\! line)))
	    (when comment-loc
	      (setq line (subseq line 0 comment-loc))))
	  (setq line (string-trim '(#\space #\tab) line))
	  (unless (zerop (length line))
	    (push (merge-pathnames line #p"sys:doc;.bix.newest") result)))))
    (nreverse result)))

;;; Read in the index entries from one or more bix files
(defun 2read-index-entries0 (many-bix-pathnames)
  (if (listp many-bix-pathnames)
      (mapcan #'read-one-bix-file many-bix-pathnames)
      (read-one-bix-file many-bix-pathnames)))

;;; Read in the index entries from one bix file.
(defun 2read-one-bix-file0 (bix-pathname)
  (with-open-file (stream bix-pathname :characters nil :byte-size 8)
    (with-document-and-device-types ()
      (with-sab-symbol-table (table :read stream)
	(flet ((find-rg (topic type)
		 (or (find-record-group-for-topic-and-type topic type)
		     ;; Maybe even this could be made recoverable.
		     (error "Cannot find record group for topic ~s type ~s, from ~a"
			    topic type bix-pathname)))
	       (find-rb (rg)
		 (loop
		   (let ((rb (registered-book-for-record-group rg)))
		     (when rb (return rb))
		     ;; Give'm a chance to repair and retry.
		     (cerror
		       "Look again (presumably after loading a REGISTER-BOOK form)"
		       "Cannot find registered book for ~a" rg))))
	       (find-mnemonic (rb)
		 (loop
		   (let ((mnemonic (registered-book-mnemonic rb)))
		     (if (> (length mnemonic) 0)
			 (return mnemonic)
			 ;; Give'm a chance to repair and retry.
			 (cerror "Look again (presumably after fixing a REGISTER-BOOK form"
				 "Mnemonic for ~a is missing or empty" rb)))))
	       )
	  (let* ((topic (read-sab-thing stream table ()))
		 (type (read-sab-thing stream table =sab-code-type-symbol=))
		 (record-group (find-rg topic type))
		 (registered-book (find-rb record-group))
		 (mnemonic (find-mnemonic registered-book)))
	    (let ((result (make-list (read-32-bit-number stream))))
	      (loop for tail on result do
		(let ((page-number (read-32-bit-number stream))
		      (page-contents-list (read-sab-thing stream table =sab-code-contents-list=))
		      (entry-contents-list (read-sab-thing stream table =sab-code-contents-list=))
		      (string-to-sort-on (read-sab-thing stream table ())))
		  (let ((entry (make-index-database-entry 
				 (make-standin-page-counter
				   page-number page-contents-list mnemonic)
				 entry-contents-list string-to-sort-on nil)))
		    (setf (first tail) entry))))
	      result)))))))

;; The standin counter just needs to return its contents list when asked.
;; It doesn't participate in the rest of counter behavior, since all that
;; was taken care of when the original book was formatted.
;; This needs work for multilevel index.
(defflavor 2standin-page-counter
0	(number contents-list)
	()
  (:constructor make-standin-page-counter-1 (number contents-list)))

;; This is where the mnemonic is used.  If you wanted some separator besides
;; "-" this is where to fix it.
(defun 2make-standin-page-counter0 (number contents-list mnemonic)
  (check-type mnemonic string)
  (make-standin-page-counter-1
    number
    (if (and (= 1 (length contents-list))
	     (stringp (first contents-list)))
	(list (string-append mnemonic "-" (first contents-list)))
	(cons (string-append mnemonic "-") contents-list))))
  
;; Make them differentiable when debugging
(defmethod 2(sys:print-self standin-page-counter)0 (stream &rest ignore)
  (si:printing-random-object (self stream :typep) (princ contents-list stream)))

;; Standin interface to formatter.
(defmethod 2(:value standin-page-counter)0 () number)

;; Standin interface.
(defmethod 2(counter-value-contents-list standin-page-counter)0 (reference-or-number)
  (assert (eq reference-or-number :reference))	;make sure it's not :number
  contents-list)

(compile-flavor-methods standin-page-counter)

;;;========================================
;;; Formatting
;;;========================================

;; The command
(define-page-previewer-command (2com-format-merged-index0 )
    ((pathname 'pathname
	       :documentation "Name of file containing .BIX file names"))
   ;; Need this standin record group because the Page Previewer program
   ;; names things with record groups.  See the formatted-record-group p-t.
   (let ((standin-record-group (make-instance 'record-group
					      :topic (format nil "Merged index ~a" pathname)
					      :type 'standin))
	 (bix-pathnames (read-bix-pathnames-from-file pathname)))
     ;; Read all the entries
     (let ((index-entries (read-index-entries bix-pathnames)))
       ;; Format all the entries
       (multiple-value-bind (formatted-pages final-heading-state final-ambient-values)
	   (format-merged-index-entries index-entries)
	 ;; Finish getting the formatted pages into the Page Previewer
	 (annotate-pages-leftover-presentations formatted-pages)
	 (set-current-record-group-and-pages
	   standin-record-group
	   (make-formatted-pages formatted-pages
				 :final-ambient-values final-ambient-values
				 :final-heading-state final-heading-state))
	 (set-page-number self 0 :force)
	 ;; Say what we did and how to get back to it.
	 (format (dw:get-program-pane 'interactor) "~&~d page~:p.  Refer to this as ~a"
		 (length current-pages)
		 (record-group-topic standin-record-group))))))

;; Do the formatting.  This is cobbled together from with-source and format-pages.
;; If you want to know how formatting works, read the code there.  If that is
;; inadequately commented, don't come back here, you won't learn any more.
(defun 2format-merged-index-entries0 (index-entries)
  (let ((index-contents-list
	  (let ((index-database (make-index-database)))
	    (setf (index-database-entries index-database) index-entries)
	    ;; Generate formatter directives (formatter input) from the index entries.
	    ;; I suppose you could try for a multilevel one instead of permuted ...
	    (directives-for-permuted-index index-database))))
    (with-ambient-counters 
      (with-sage-device (hardcopy:*default-text-printer* :lgp2
							 :hardcopy-options `(:deferred T))
	(with-document-and-device-types ('3symanual)
	  (let ((*expand-references-when* :immediate))
	    (let ((line-source (formatted-sage-text-line-source index-contents-list)))
	      (keeping-sage-files
		(with-presentation-stack ()
		  (let ((numerator 0))
		    (flet ((note-page-progress ()
			     (incf numerator)
			     ;; our usual bogus logarithmic page progress....
			     ;; half way across at 14 = (sqrt 200) 
			     (tv:note-progress (/ (log numerator) (log 200)))))
		      (tv:noting-progress-alterable-note ("Formatting index pages")
			(let ((heading-state (make-heading-state)))
			  (zwei:zcollecting-into (pages)
			    (loop for previous-page = nil then page
				  for page = (block page
					       (catch-error-restart ((sys:abort sys:error)
								     "Stop taking pages at page ~d"
								     numerator)
						 (return-from page
						   (take-page line-source heading-state previous-page)))
					       ())
				  do
			      (tv:format-progress-note () "Formatting page ~d" (1+ numerator))
			      (note-page-progress)
			      (if page
				  (zwei:zcollect pages page)
				  (loop-finish)))
			    (when (vertical-justification-allowed-p)
			      (vertically-justify-facing-pages pages))
			    (values pages heading-state *ambient-counters*)))))))))))))))
