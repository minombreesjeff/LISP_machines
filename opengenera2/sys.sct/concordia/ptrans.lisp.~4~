;;; -*- Mode: LISP; Syntax: Common-lisp; Package: SAGE; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;things to kill
#||

(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION) 'EDIT-RECORD)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'EDIT-REFERENCED-RECORD)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'OUT-POINTERS-FROM-NODE)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'OUT-POINTERS-FROM-RECORD)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'OUT-POINTERS-FROM-RECORD-GROUP)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'IN-POINTERS-FROM-NODE)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'IN-POINTERS-FROM-RECORD)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'IN-POINTERS-FROM-RECORD-GROUP)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION) 'RECORD-FROM-NODE)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'RECORD-GROUP-FROM-NODE)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'RECORD-GROUP-FROM-REFERENCE-NODE)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'RECORD-GROUP-FROM-RECORD)
(FUNCALL #'(:PROPERTY DEFINE-PRESENTATION-TRANSLATOR ZWEI:KILL-DEFINITION)
         'SHOW-DOCUMENTATION-FOR-DOC-RECORD)

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")(zwei:define-presentation-to-editor-command-translator (2 0 (NIL 0) (NIL :BOLD :SMALL) "TVFONTCB")edit-record
1						       (zwei:record-structure-node
							 "Edit record"
							 zwei:*standard-comtab*
							 :gesture :edit-function)
						       (node)
  `(edit-record ,(doc-record-record-group
		   (zwei:markup-structure-node-markup-structure node))))
(zwei:define-presentation-to-editor-command-translator 2edit-referenced-record
1						       (zwei:reference-structure-node
							 "Edit record"
							 zwei:*standard-comtab*
							 :gesture :edit-function)
						       (node)
  `(edit-record ,(sage-reference-record-group
		   (zwei:markup-structure-node-markup-structure node))))

(zwei:define-presentation-to-editor-command-translator 2out-pointers-from-node
1						       (zwei:record-structure-node
							 "Show links from record"
							 *wt-comtab*
							 :gesture nil)
						       (node)
  `(show-record-outward-pointers
     ,(zwei:markup-structure-node-markup-structure node)))

(zwei:define-presentation-to-editor-command-translator 2out-pointers-from-record
1						       (doc-record
							 "Show links from record"
							 *wt-comtab*
							 :gesture nil)
						       (doc-record)
  `(show-record-outward-pointers ,doc-record))

(zwei:define-presentation-to-editor-command-translator 2out-pointers-from-record-group
1						       (record-group
							 "Show links from record"
							 *wt-comtab*
							 :gesture nil)
						       (record-group)
  `(show-record-outward-pointers
     ,(or (first (record-group-edited-records record-group))
	  (find-record-for-lookup record-group))))


(zwei:define-presentation-to-editor-command-translator 2in-pointers-from-node
1						       (zwei:record-structure-node
							 "Show links to records"
							 *wt-comtab*
							 :gesture nil)
						       (node)
  `(show-record-group-inward-pointers
     ,(doc-record-record-group
	(zwei:markup-structure-node-markup-structure node))))

;; This suffers from the "gesture NIL bug"
(zwei:define-presentation-to-editor-command-translator 2in-pointers-from-record
1						       (doc-record
							 "Show links to record"
							 *wt-comtab*
							 :gesture nil)
						       (doc-record)
  `(show-record-group-inward-pointers
     ,(doc-record-record-group doc-record)))

(zwei:define-presentation-to-editor-command-translator 2in-pointers-from-record-group
1						       (record-group
							 "Show links to record"
							 *wt-comtab*
							 :gesture nil)
						       (record-group)
  `(show-record-group-inward-pointers ,record-group))


(define-presentation-translator 2record-from-node
1   (zwei:record-structure-node doc-record)
   (node)
  (zwei:markup-structure-node-markup-structure node))

(define-presentation-translator 2record-group-from-node
1   (zwei:record-structure-node record-group)
   (node)
  (let ((record
	  (zwei:markup-structure-node-markup-structure node)))
    (and record (doc-record-record-group record))))

(define-presentation-translator 2record-group-from-reference-node
1   (zwei:reference-structure-node record-group)
   (node)
  (let ((sage-reference (zwei:markup-structure-node-markup-structure node)))
    (sage-reference-record-group sage-reference)))

;; Can't have 2record-from-reference-node1 because the reference
;; points to the record-group, and there is no reliable way
;; to decide record is meant.

(define-presentation-translator 2record-group-from-record
1   (doc-record record-group)
   (record)
  (doc-record-record-group record))

(define-presentation-to-command-translator 2show-documentation-for-doc-record
1   (doc-record
     )
   (doc-record)
  (let ((rg (doc-record-record-group doc-record)))
    (cp:build-command 'com-show-documentation rg)))

0||#


(define-multiple-presentation-translators (3 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")to-record-group
0					  (record-group
					    :other-ptypes (doc-record
							    zwei:record-structure-node
							    zwei:reference-structure-node
							   index-database-entry)
					    ))

(define-multiple-presentation-translators 3to-doc-record
0					  (doc-record

					    :other-ptypes (zwei:record-structure-node
							    zwei:reference-structure-node
							    index-database-entry))
  )

(define-multiple-editor-command-translators 3ConEd-edit-definition
0					    (record-group
					      "Edit record"
					      zwei:*standard-comtab*
					      :gesture :edit-function
					      :other-ptypes (doc-record record-group-name
							      zwei:record-structure-node
							      zwei:reference-structure-node
							      index-database-entry
							      ;;--table-of-contents--
							      ))
					    (rg)
  `(edit-record ,rg))

(define-multiple-editor-command-translators 3show-links-from-record
0					    (doc-record
					      "Show links from record"
					      *wt-comtab*
					      :gesture nil
					      :other-ptypes (zwei:record-structure-node))
					    (doc-record)
  `(show-record-outward-pointers ,doc-record))

(define-multiple-editor-command-translators 3show-links-from-record-group
0					    (record-group
					      "Show links from record"
					      *wt-comtab*
					      :gesture nil
					      :other-ptypes (zwei:reference-structure-node)
					      )
					    (record-group)
  `(show-record-outward-pointers
     ;; This is really bogus, don't chew know.  It can't possibly know which
     ;; record you really have in mind.
     ,(find-record-for-lookup record-group)))

(define-multiple-editor-command-translators 3show-links-to-record-group
0					    (record-group
					      "Show links to record"
					      *wt-comtab*
					      :gesture nil
					      :other-ptypes (doc-record
							      zwei:record-structure-node
							      zwei:reference-structure-node))
					    (record-group)
  `(show-record-group-inward-pointers ,record-group))

(define-multiple-editor-command-translators 3collect-record-group-reference
0					    (record-group
					      "Collect record name"
					      *wt-comtab*
					      :gesture nil
					      :other-ptypes (doc-record
							      zwei:record-structure-node
							      zwei:reference-structure-node))
					    (record-group)
  `(collect-reference-and-redisplay ,record-group))
;;---Next time, include ConEd commands to creating links by clicking the right way on a target
