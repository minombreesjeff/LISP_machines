;;; -*- Syntax: Common-lisp; Mode: LISP; Base: 10; Package: NSAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;Program Stuff

(defvar *default-document-device-type*)

(dw:define-program-framework book-design-browser
  :pretty-name "Book Design Browser"
  :selectable nil
  :command-definer t
  :inherit-from (dw:help-program)
  :command-table (:inherit-from '("help-program"
				  "colon full command"
				  "standard arguments"
				  "input editor compatibility")
		  :kbd-accelerator-p 'nil)
  :state-variables nil
  :panes ((display :display
		   :typeout-window t
		   :end-of-page-mode :scroll
		   :margin-components `((dw:margin-scroll-bar :margin :left)
					(dw:margin-scroll-bar :margin :bottom)))
	  (command-menu :command-menu
			:center-p t
			:menu-level :top-level
			:columns '(("Describe Document Device Type"
				    "Show All Document Device Types")

				   ("Describe Book Design Element"
				    "Edit Book Design Element"
				    "Show Dependencies On Book Design Element")

				   ("Describe Environment"
				    "List Book Design Elements Using Environment"
				    "Show Dependencies On Environment")

				   ("Clear Display"
				    "Help")))
	  (interactor :interactor
		      :more-p t
		      :margin-components `((dw:margin-scroll-bar :margin :left))
		      :height-in-lines 3))
  :configurations '((browser
		      (:layout
			(browser
			  :column display command-menu interactor))
		      (:sizes
			(browser (command-menu :ask-window self :size-for-pane command-menu)
				 (interactor 3 :lines)
				 :then (display :even))))))

(defmacro with-browser-output-destination (browser-output-destination title landscape-p function &rest args)
  `(case ,browser-output-destination
     (:display
       (clear-display)
       (,function ,@args (dw:get-program-pane 'display)))
     (:printer
       (with-open-stream (stream (hardcopy:make-hardcopy-stream
				   (hardcopy:get-hardcopy-device
				     hardcopy:*default-text-printer*)
				   :landscape-p ,landscape-p
				   :title ,title))
	 (,function ,@args stream)))
     (:typeout
       (,function ,@args *standard-output*))))

(define-book-design-browser-command (com-help
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ()
   (com-show-documentation 
     (find-record-group-for-topic-and-type "the book design browser" 'section)))

(define-book-design-browser-command (com-clear-display
		      :menu-accelerator t
		      :provide-output-destination-keyword nil)
    ()
   (clear-display))

(defun clear-display ()
  (let ((stream (dw:get-program-pane 'display)))
    (format stream "~2%- - - - - - - - - - - - - - - - - - -~%")
    (send stream :clear-window)))

(define-presentation-type browser-output-destination ()
   :abbreviation-for '(member :display :printer :typeout))

;;;Document Device Type Stuff

(define-presentation-type document-device-type-pt ()
   :parser ((stream)
	    (dw:complete-from-sequence (sage::book-design-registry-specifics sage::*BOOK-DESIGN-REGISTRY*)
				       stream
				       :partial-completers '(#\sp)
				       :type 'document-device-type-pt
				       :name-key #'(lambda (document-device-type)
						     (format nil "~A ~A" 
							     (book-design-specifics-document-type document-device-type)
							     (book-design-specifics-device-type document-device-type)))
				       :compress-choices nil))
   :printer ((document-device-type stream)
	     (format stream "~A ~A" 
		     (book-design-specifics-document-type document-device-type)
		     (book-design-specifics-device-type document-device-type)))
   :description "a document device type")

(define-presentation-to-command-translator com-describe-document-device-type
   (document-device-type-pt 
     :gesture nil
     :documentation "Describe Document Device Type")
   (document-device-type-pt)
  `(com-describe-document-device-type ,document-device-type-pt :typeout))

(define-book-design-browser-command (com-describe-document-device-type
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ((document-device-type 'document-device-type-pt :prompt "document device type")
     (browser-output-destination 'browser-output-destination :prompt "where" :default :display))
   (with-browser-output-destination browser-output-destination
				    (format nil "Describe Document Device Type ~@\\presentation\\"
					    document-device-type 'document-device-type-pt)
				    nil
				    describe-document-device-type-internal document-device-type nil))

(define-book-design-browser-command (com-show-all-document-device-types
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ()
   (let ((document-device-types (sage::book-design-registry-specifics sage::*BOOK-DESIGN-REGISTRY*)))
     (setq document-device-types
	   (sort document-device-types 'string-lessp :key #'(lambda (document-device-type)
							      (string-append
								(book-design-specifics-document-type document-device-type)
								" "
								(book-design-specifics-device-type document-device-type)))))
     (loop for document-device-type in document-device-types
	   for new-page = (not (eql document-device-type (nth (- (length document-device-types) 1) document-device-types)))
	   do
       (with-browser-output-destination :printer
					(format nil "Describe Document Device Type ~@\\presentation\\"
						document-device-type 'document-device-type-pt)
					nil
					describe-document-device-type-internal document-device-type new-page))))

(defun describe-document-device-type-internal (document-device-type new-page stream)
  (setq *default-document-device-type* document-device-type)
  (let ((entry (book-design-specifics-entry document-device-type)))
    (format stream  "~%~'b~@\\presentation\\~ (a document device type) is specified by:~%"
	    document-device-type 'document-device-type-pt)
    (format-book-designs entry stream)
    (when new-page
      (format stream "~|"))))

(defun format-book-designs (entry stream)
  (let ((first (member 'first (book-design-entry-definition-forms entry) :key 'car)))
    (indenting-output (stream 3)
      (terpri stream)
      (format stream "~v~@\\presentation\\~"
	      (if first
		  '(nil :bold nil)
		  '(nil nil nil))
	      entry 'book-design-pt)
      (dolist (item (book-design-entry-definition-forms entry)) 
	(when (eql (first item) 'use)
	  (dolist (x (rest item))
	    (let ((itemx (find-book-design-entry-named x)))
	      (when itemx
		(format-book-designs itemx stream)))))))))

#|
(define-book-design-browser-command (com-define-document-device-type
				      :menu-accelerator nil
				      :provide-output-destination-keyword nil)
    ()
   (multiple-value-bind (type device pathname choices)
       (accept-book-design-selections)
     (write-book-designs type device choices pathname)))

(defun accept-book-design-selections ()
  (let ((query-stream (dw:get-program-pane 'display))
	type device pathname
	top-level frontmatter heads-and-feet headings headings-list environments)
    (send query-stream :clear-window)
    (format query-stream "~2%~'bDEFINE A DOCUMENT DEVICE TYPE.~~2%")
    (dw:accepting-values (query-stream
			   :own-windw nil
			   :resynchronize-every-pass t)
      (setq type (accept 'string
			 :stream query-stream
			 :prompt-mode :raw
			 :prompt "Document Type: "
			 :provide-default nil))
      (setq device (accept 'device-name
			   :stream query-stream
			   :prompt-mode :raw
			   :prompt "Device Type:   "
			   :provide-default nil))
      (setq top-level (accept '(book-design-pt :type :top-level)
			      :stream query-stream
			      :prompt-mode :raw
			      :prompt "Top Level:     "))
      (setq frontmatter (accept '(book-design-pt :type :frontmatter)
				:stream query-stream
				:prompt-mode :raw
				:prompt "Frontmatter:   "))
      (setq heads-and-feet (accept '(book-design-pt :type :heads-and-feet)
			     :stream query-stream
			     :prompt-mode :raw
			     :prompt "Heads and Feet:  "))
      (setq headings (accept '(book-design-pt :type :headings)
			     :stream query-stream
			     :prompt-mode :raw
			     :prompt "Headings:      "))
      (when headings
	(setq headings-list
	      (list
		(accept '(book-design-pt :type :majorpart)
			:stream query-stream
			:prompt-mode :raw
			:prompt "  Majorparts:    ")
		(accept '(book-design-pt :type :chapter)
			:stream query-stream
			:prompt-mode :raw
			:prompt "  Chapters:      ")
		(accept '(book-design-pt :type :section)
			:stream query-stream
			:prompt-mode :raw
			:prompt "  Sections:      ")
		(accept '(book-design-pt :type :subsection)
			:stream query-stream
			:prompt-mode :raw
			:prompt "  Subsections:   "))))
      (setq environments (accept '(book-design-pt :type :environments)
				 :stream query-stream
				 :prompt-mode :raw
				 :prompt "Environments:  "))
      (setq pathname (accept 'fs::pathname
			     :stream query-stream
			     :prompt-mode :raw
			     :prompt "Pathname:      "
			     :default (fs:parse-pathname (format nil "s:>whit>bd>bd-~A.lisp.newest" type)))))
    (values type device pathname
	    (list top-level frontmatter heads-and-feet headings headings-list environments))))

(defun write-book-designs (type device book-designs pathname)
  (setq type (string-upcase type))
  (zwei:with-editor-stream (stream :pathname pathname)
    (format stream ";;; -*- Syntax: Common-lisp; Mode: LISP; Base: 10; Package: NSAGE-*-")
    (format stream "~2%;;;Specifications for Document Device Type ~A ~A~2%" type device)
    (let ((top-level (first book-designs))
	  top-level-first			;to hold the "first" clause from top-level
	  (frontmatter (second book-designs))
	  (heads-and-feet (third book-designs))
	  (headings (fourth book-designs))
	  (headings-list (fifth book-designs))
	  (environments (sixth book-designs)))

      ;;Define the new doc type
      (format stream "~%~((define-document-type '~A)~)" type)

      ;;Define the top-level book design
      (format stream "~2%~((define-book-design book-design-for-~A-~A ()~)" type device)
      (dolist (spec (book-design-entry-definition-forms top-level))
	(when (eql (first spec) 'first)
	  (setq top-level-first spec)))

      ;;Include the "use" clauses for frontmatter headings environments
      (loop for book-design in (list frontmatter heads-and-feet headings environments)
	    for name in '(frontmatter heads-and-feet headings environments)
	    when book-design
	      do (format stream "~%   ~((use ~A-~A)~)" type name))

      ;;Include the first clause
      (when top-level-first
	(format stream "~%   ~(~A~)" top-level-first))
      (format stream ")")

      
      (format stream "~2%~((note-book-design-specifics '~A :~A 'book-design-for-~A-~A)~)"
	      type device type device)

      (when frontmatter
	(format stream "~2%~((define-book-design ~A-frontmatter ()~)" type) 
	(dolist (spec (book-design-entry-definition-forms frontmatter))
	  (format stream "~%   ~(~A~)" spec))
	(format stream ")"))

      (when heads-and-feet
	(format stream "~2%~((define-book-design ~A-heads-and-feet ()~)" type) 
	(dolist (spec (book-design-entry-definition-forms heads-and-feet))
	  (format stream "~%   ~(~A~)" spec))
	(format stream ")"))

      (when headings
	(let (other-specs)
	  (format stream "~2%~((define-book-design ~A-headings ()~)" type) 
	  (dolist (spec (book-design-entry-definition-forms headings))
	    (case (first spec)
	      (use
		(unless (let* ((string (string (second spec)))
			       (substring (substring string (1+ (string-search "-" string)) (string-length string))))
			  (member substring '("majorpart" "chapter" "section" "subsection") :test 'string-search))
		  (format stream "~%   ~(~A~)" spec)))
	      ((define modify)
	       (push spec other-specs))))
	  (dolist (heading headings-list)
	    (when heading
	      (format stream "~%   ~((use ~A-~A)~)" type (book-design-entry-name heading))))
	  (dolist (spec other-specs)
	    (format stream "~%   ~(~A~)" spec))
	  (format stream ")")))

      (when headings-list
	(dolist (heading headings-list)
	  (when heading
	    (format stream "~2%~((define-book-design ~A-~A ()~)" type (book-design-entry-name heading)) 
	    (dolist (spec (book-design-entry-definition-forms heading))
	      (format stream "~%   ~(~A~)" spec))
	    (format stream ")"))))

      (when environments
	(format stream "~2%~((define-book-design ~A-environments ()~)" type) 
	(dolist (spec (book-design-entry-definition-forms environments))
	  (format stream "~%   ~(~A~)" spec))
	(format stream ")")))
    (format stream "~2%"))

  (ed pathname))
|#

;;;Book Design Element Stuff

(define-presentation-type book-design-pt ()
   :parser ((stream)
	    (dw:complete-from-sequence (sort
					 (loop for book-design being the array-elements of *BOOK-DESIGN-REGISTRY*
					       collect book-design)
					 'string-lessp
					 :key #'(lambda (book-design)
						  (string (book-design-entry-name book-design))))
				       stream
				       :partial-completers '(#\sp)
				       :type 'book-design-pt
				       :name-key #'(lambda (book-design)
						     (string (book-design-entry-name book-design)))
				       :compress-choices nil))
   :printer ((book-design stream)
	     (format stream "~A" (book-design-entry-name book-design)))
   :describer ((stream &key plural-count)
	       (dw::presentation-string-pluralize "a book design element"
						  stream plural-count))) 

(define-book-design-browser-command (com-show-dependencies-on-book-design-element
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ((book-design 'book-design-pt)
     (browser-output-destination 'browser-output-destination :prompt "where" :default :display))
   (with-browser-output-destination browser-output-destination
				    (format nil "Show Dependencies On Book Design Element ~@\\presentation\\"
					    book-design 'book-design-pt)
				    nil
				    show-dependencies-on-book-design-element book-design))

(define-presentation-to-command-translator com-show-dependencies-on-book-design-element
   (book-design-pt 
     :gesture nil
     :documentation "Show Dependencies On Book Design Element")
   (book-design-pt)
  `(com-show-dependencies-on-book-design-element ,book-design-pt :typeout))

(define-book-design-browser-command (com-describe-book-design-element
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ((book-design 'book-design-pt)
     (browser-output-destination 'browser-output-destination :prompt "where" :default :display))
   (with-browser-output-destination browser-output-destination
				    (format nil "Describe Book Design Element ~@\\presentation\\"
					    book-design 'book-design-pt)
				    nil
				    describe-book-design-element book-design))

(define-presentation-to-command-translator com-describe-book-design-element
   (book-design-pt 
     :gesture nil
     :documentation "Describe Book Design Element")
   (book-design-pt)
  `(com-describe-book-design-element ,book-design-pt :typeout))

(defun describe-book-design-element (book-design stream &optional (top-level t))
  (let* ((clauses (book-design-entry-definition-forms book-design))
	 (first (member 'first clauses :key 'car))
	 used-book-designs first-clauses envr-clauses counters collectors)
    (dolist (clause clauses)
      (let ((clause-action (first clause))
	    (clause-items (rest clause)))
	(dolist (clause-item clause-items)
	  (case clause-action
	    (use (push (find-book-design-entry-named clause-item) used-book-designs))
	    ((define modify) (setq envr-clauses clause-items))
	    (counters (setq counters clause-items))
	    (collectors (setq collectors clause-items))
	    (first (setq first-clauses clause-items))))))
    (when top-level
      (format stream "~2%~'b~@\\presentation\\~ is a~@[ top-level~] book design element.~%"
	      book-design 'book-design-pt first)
      (when envr-clauses 
	(format stream "~%  Defines or modifies some environments." book-design 'book-design-pt))
      (when collectors
	(format stream "~%  Defines some collectors." book-design 'book-design-pt))
      (when counters
	(format stream "~%  Defines some counters." book-design 'book-design-pt)))
    (when used-book-designs
      (when top-level
	(format stream "~%  Inherits from:"))
      (dolist (used-book-design (reverse used-book-designs))
	(indenting-output (stream 2)
	  (terpri stream)
	  (format stream "  ~v~@\\presentation\\~" (if (member 'first
								 (book-design-entry-definition-forms used-book-design)
								 :key 'car)
							 '(nil :bold nil)
							 '(nil nil nil))
		  used-book-design 'book-design-pt)
	  (describe-book-design-element used-book-design stream nil))))
    (when (and top-level first-clauses)
      (let ((top-level-style (rest (cadr (first first-clauses))))
	    (top-level-text (rest (cadr (second first-clauses))))
	    (init (second (third first-clauses))))
	(format stream "~%  Top-level Style:")
	(dolist (att top-level-style)
	  (format stream "~%    ~A ~A" (first att) (second att)))
	(format stream "~%  Top-level Text:")
	(dolist (att top-level-text)
	  (format stream "~%    ~A ~A" (first att) (second att)))
	(format stream "~%  Init: ~A" init)))))

(define-book-design-browser-command (com-edit-book-design-element
		      :menu-accelerator t
		      :provide-output-destination-keyword nil)
    ((book-design 'book-design-pt))
   (edit-book-design book-design))

(define-presentation-action pr-edit-book-design-element
   (book-design-pt t
     :gesture nil
     :documentation "Edit Book Design Element")
   (book-design-pt)
  (edit-book-design book-design-pt))

(defun edit-book-design (book-design)
  (let ((name (book-design-entry-name book-design))
	(source (fs:parse-pathname
		  (string-append
		    (book-design-entry-defining-source-file book-design)
		    ".lisp.newest"))))
    (ed source)
    (ed `(zwei:edit-definition ,name ()))))

;;;Environment Stuff

(define-presentation-to-command-translator com-show-environment-documentation
   ((sage-environment-name :internal-too t) 
    :gesture :middle
    :documentation "Show Documentation"
		   :tester ((envr)
			    (sage::find-record-group-for-topic-and-type
			      (format nil "~@\\presentation\\ environment"
				      envr `(sage-environment-name :internal-too t))
			      'sage::section)))
   (envr)
  (let ((record (sage::find-record-group-for-topic-and-type
		  (format nil "~@\\presentation\\ environment"
			  envr `(sage-environment-name :internal-too t))
		  'sage::section)))
    `(com-show-documentation ,record)))

(define-presentation-to-command-translator com-describe-environment
   ((sage-environment-name :internal-too t) 
     :gesture nil
     :documentation "Describe Environment")
   (envr)
  `(com-describe-environment-internal ,envr ,*default-document-device-type* :typeout))

(define-book-design-browser-command (com-describe-environment
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ((envr '(sage-environment-name :internal-too t) :prompt "environment" :default nil)
     (document-device-type 'document-device-type-pt)
     (browser-output-destination 'browser-output-destination :prompt "where" :default :display))
   (with-browser-output-destination browser-output-destination
				    (format nil "Describe Environment ~@\\presentation\\ for ~@\\presentation\\"
					    envr '(sage-environment-name :internal-too t)
					    document-device-type 'document-device-type-pt)
				    t
				    describe-environment-internal envr document-device-type))

(defun describe-environment-internal (envr document-device-type stream)
  (setq *default-document-device-type* document-device-type)
  (let ((attributes (collect-environment-definition envr document-device-type)))
    
    (if attributes
	(progn
	  (format stream "~%~'b~@\\presentation\\~ (an environment) is defined in ~'b~@\\presentation\\~ (a document device type) as follows:~2%"
		  envr `(sage-environment-name :internal-too t)
		  document-device-type 'document-device-type-pt)
      
	  (format-environment-definition attributes stream)
	  (format-environment-dependencies envr stream))
	(format stream "~%~@\\presentation\\ for ~@\\presentation\\ is not defined.~2%"
		envr `(sage-environment-name :internal-too t)
		document-device-type 'document-device-type-pt))))

(define-presentation-to-command-translator com-show-dependencies-on-environment
   ((sage-environment-name :internal-too t) 
     :gesture nil
     :documentation "Show Dependencies on Environment")
   (envr)
  `(com-show-dependencies-on-environment ,envr :typeout))

(define-book-design-browser-command (com-show-dependencies-on-environment
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ((envr '(sage-environment-name :internal-too t) :prompt "environment" :default nil)
     (browser-output-destination 'browser-output-destination :prompt "where" :default :display))
   (with-browser-output-destination browser-output-destination
				    (format nil "Show Dependencies On Environment ~@\\presentation\\"
					    envr '(sage-environment-name :internal-too t))
				    nil
				    format-environment-dependencies envr))

(defun format-environment-dependencies (envr stream)
  (let ((dependencies (find-dependencies-on-envr envr)))
    (if dependencies
	(progn
	  (format stream "~%~'b~@\\presentation\\~ (an environment) is inherited by:~2%"
		  envr `(sage-environment-name :internal-too t))
	  (formatting-table (stream)
	    (formatting-column-headings (stream :underline-p t)
	      (formatting-cell (stream)
		(format stream "Environment"))
	      (formatting-cell (stream)
		(format stream "In Book Design Element")))
	    (loop for (envr book-design) in dependencies do
	      (formatting-row (stream)
		(formatting-cell (stream)
		  (format stream "~@\\presentation\\" envr `(sage-environment-name :internal-too t)))
		(formatting-cell (stream)
		  (format stream "~@\\presentation\\" book-design 'book-design-pt))))))
	(format stream "~%~'b~@\\presentation\\~ (an environment) is not inherited by any other environment."
		envr `(sage-environment-name :internal-too t)))))

(defun find-dependencies-on-envr (envr)
  (let (dependencies)
    (loop for book-design being the array-elements of *BOOK-DESIGN-REGISTRY* do
      (let ((clauses (book-design-entry-definition-forms book-design)))
	(dolist (clause clauses)
	  (let ((clause-action (first clause))
		(clause-items (rest clause)))
	    (when (member clause-action '(define modify))
	      (dolist (item clause-items)
		(let ((item-envr (first item))
		      (item-specs (rest item)))
		  (dolist (spec item-specs)
		    (when (and (consp spec)
			       (member (first spec) '(use copy))
			       (eql (second spec) (dd-symbol envr)))
		      (pushnew (list (lookup-directive-descriptor item-envr 'generic 'generic) book-design)
			       dependencies))))))))))
    dependencies))

(defun collect-environment-definition (initial-environment document-device-type)
  (setq initial-environment (dd-symbol initial-environment))
  (let* (attributes
	 (document-type (book-design-specifics-document-type document-device-type))
	 (device-type (book-design-specifics-device-type document-device-type))
	 (initial-book-design (find-book-design-entry document-type device-type)))
    (labels ((get-environment-definition (environment book-design via-book-design)
	       (let ((clauses (book-design-entry-definition-forms book-design))
		     used-environments used-book-designs)
		 (dolist (clause clauses)
		   (let ((clause-action (first clause))
			 (clause-items (rest clause)))
		     (dolist (clause-item clause-items)
		       (if (eql clause-action 'use)	;collect used book designs
			   (pushnew clause-item used-book-designs)
			   (let ((clause-environment (first clause-item))
				 (clause-specs (rest clause-item)))
			     (when (eql clause-environment environment)	;only look at clauses of envr in question
			       (dolist (spec clause-specs)
				 (let* ((attribute (if (consp spec) (first spec) spec))
					(value (if (consp spec) (second spec) nil))
					(attribute-list (list attribute value
							      (lookup-directive-descriptor environment document-type device-type)
							      book-design via-book-design clause-action)))
				   (if (member attribute '(use copy))	;collect used and copied environments
				       (pushnew value used-environments)
				       (pushnew attribute-list attributes :test 'eql :key 'car))))))))))
		 (when used-environments
		   (dolist (used-environment used-environments)
		     ;;start back with initial-book-design to get the whole tree for each used-environment
		     (get-environment-definition used-environment initial-book-design via-book-design)))
		 (when used-book-designs
		   (dolist (used-book-design used-book-designs)
		     (get-environment-definition environment (find-book-design-entry-named used-book-design) book-design))))))
      (get-environment-definition initial-environment initial-book-design nil)
      (values attributes))))

(defun format-environment-definition (attributes stream)
  (formatting-table (stream)
    (formatting-column-headings (stream :underline-p t)
      (formatting-cell (stream)
	(format stream "Attribute"))
      (formatting-cell (stream)
	(format stream "Value"))
      (formatting-cell (stream)
	(format stream "From Environment"))
      (formatting-cell (stream)
	(format stream "In Book Design Element"))
      (formatting-cell (stream)
	(format stream "Inherited by Book Design Element")))
    (loop for (attribute value envr book-design via clause-action) in (reverse attributes) do
      (formatting-row (stream)
	(formatting-cell (stream)
	  (format stream "~@\\presentation\\" attribute 'attribute-name))
	(formatting-cell (stream)
	  (format stream "~A" (cond ((eql (type-of value) 'string)
				     (cond ((string-search "pageheading" value)
					    (format nil "~'ipageheading~"))
					   ((string-search "pagefooting" value)
					    (format nil "~'ipagefooting~"))
					   (t value)))
				    (value value)
				    (t ""))))
	(formatting-cell (stream)
	  (format stream "~@\\presentation\\" envr `(sage-environment-name :internal-too t)))
	(formatting-cell (stream)
	  (format stream "~v~@\\presentation\\~"
		  (case clause-action
		    (define '(nil :bold nil))
		    (modify '(nil :italic nil))
		    (otherwise '(nil nil nil)))
		  book-design 'book-design-pt))
	(formatting-cell (stream)
	  (when via
	    (format stream "~@\\presentation\\"
		    via 'book-design-pt)))))))

(define-presentation-to-command-translator com-show-attribute-documentation
   (attribute-name 
     :gesture :middle
     :documentation "Show Documentation"
     :tester ((attr)
	      (sage::find-record-group-for-topic-and-type
		(format nil "~@\\presentation\\ attribute"
			attr 'attribute-name)
		'sage::section)))
   (attr)
  (let ((record (sage::find-record-group-for-topic-and-type
		  (format nil "~@\\presentation\\ attribute"
			  attr 'attribute-name)
		  'sage::section)))
    `(com-show-documentation ,record)))

(define-presentation-to-command-translator com-list-book-design-elements-using-environment
   ((sage-environment-name :internal-too t) 
     :gesture nil
     :documentation "List Book Design Elements Using Environment")
   (envr)
  `(com-list-book-design-elements-using-environment ,envr :typeout))

(define-book-design-browser-command (com-list-book-design-elements-using-environment
				      :menu-accelerator t
				      :provide-output-destination-keyword nil)
    ((envr '(sage-environment-name :internal-too t) :provide-default nil :prompt "environment")
     (browser-output-destination 'browser-output-destination :prompt "where" :default :display))
   (with-browser-output-destination browser-output-destination
				    (format nil "List Book Design Elements Using Environment ~@\\presentation\\"
					    envr '(sage-environment-name :internal-too t))
				    nil
				    list-book-design-elements-using-envr envr))

(defun list-book-design-elements-using-envr (envr stream)
  (let ((envr-symbol (dd-symbol envr)) 
	modifiers definers)
    (loop for book-design being the array-elements of *BOOK-DESIGN-REGISTRY* do
      (let ((defs (book-design-entry-definition-forms book-design)))
	(loop for def in defs do
	  (let ((def-action (first def))
		(def-items (rest def)))
	    (when (member def-action '(define modify))
	      (loop for def-item in def-items do
		(when (eql envr-symbol (first def-item))
		  (case def-action
		    (define (push book-design definers))
		    (modify (push book-design modifiers))))))))))
    (if (or definers modifiers)
	(progn
	  (when definers
	    (format stream "~2%~'b~@\\presentation\\~ (an environment) is ~'idefined~ by the following book design element~*~:P:~%"
		    envr `(sage-environment-name :internal-too t)
		    (length definers))
	    (dolist (definer definers)
	      (format stream "~%    ~@\\presentation\\" definer 'book-design-pt)))
	  (when modifiers
	    (format stream "~2%~'b~@\\presentation\\~ (an environment) is ~'imodified~ by the following book design element~*~:P:~%"
		    envr `(sage-environment-name :internal-too t)
		    (length modifiers))
	    (dolist (modifier modifiers)
	      (format stream "~%    ~@\\presentation\\" modifier 'book-design-pt))))
	(format stream "~2%~'b~@\\presentation\\~ (an environment) is not defined or modified by any book design element."
		envr `(sage-environment-name :internal-too t)))))

;;;this recurses through all of the users users users...

(defun show-dependencies-on-book-design-element (entry stream &optional (heading-p t))
  (let ((users (find-book-design-entry-users entry)))
    (when heading-p
      (if users
	  (format stream "~2%~'b~@\\presentation\\~ (a book design element) is inherited by:~%" entry 'book-design-pt)
	  (format stream "~2%~'b~@\\presentation\\~ (a book design element) is not inherited by any other book design elements."
		  entry 'book-design-pt)))
    (when users
      (dolist (user users)
	(indenting-output (stream 4)
	  (terpri stream)
	  (format stream "~@\\presentation\\" user 'book-design-pt)
	  (show-dependencies-on-book-design-element user stream nil))))))

#|
;;;these are commented out because I couldn't see how to use keyboard
;;;accelerators without using kbd-accelerator-p t which also cause the
;;;command processor to accept only commands given with m-X or :!!
(define-book-design-browser-command (com-scroll-forward
				      :keyboard-accelerator (#\c-V #\scroll))
    ()
   (let* ((display (dw:get-program-pane 'display))
	  (line-height (send display :line-height)))
     (send display :y-scroll-to (* (1- (truncate (send display :inside-height) line-height))
				   line-height) :relative)))

(define-book-design-browser-command (com-scroll-backward
				      :keyboard-accelerator (#\m-V #\m-scroll))
    ()
   (let* ((display (dw:get-program-pane 'display))
	  (line-height (send display :line-height)))
     (send display :y-scroll-to (- (* (1- (truncate (send display :inside-height) line-height))
				      line-height)) :relative)))
|#

(define-presentation-type registered-book-pt ()
   :parser ((stream)
	    (dw:complete-from-sequence *BOOK-REGISTRY*
				       stream
				       :partial-completers '(#\sp)
				       :type 'registered-book-pt
				       :name-key 'registered-book-title
				       :compress-choices nil))
   :printer ((registered-book stream)
	     (format stream "~A" (registered-book-title registered-book)))
   :describer ((stream &key plural-count)
	       (dw::presentation-string-pluralize "a registered book title"
						  stream plural-count)))

(define-book-design-browser-command (com-describe-registered-book
				      :menu-accelerator nil
				      :provide-output-destination-keyword nil)
    ((registered-book 'registered-book-pt)
     (browser-output-destination 'browser-output-destination :prompt "where" :default :display))
   (with-browser-output-destination browser-output-destination
				    (format nil "Describe Book ~A" (registered-book-title registered-book))
				    nil
				    describe-book registered-book))

(defun describe-book (registered-book stream)
  (format stream "~%~'b\"~A\"~ (a registered book) is registered as follows:~2%"
	  (registered-book-title registered-book))
  (formatting-table (stream)
    (formatting-column-headings (stream :underline-p t)
      (formatting-cell (stream)
	(format stream "Attribute"))
      (formatting-cell (stream)
	(format stream "Value")))
    (let ((mnemonic (registered-book-mnemonic registered-book)))
      (when (> (string-length mnemonic) 1)
	(formatting-row (stream)
	  (formatting-cell (stream)
	    (format stream "MNEMONIC"))
	  (formatting-cell (stream)
	    (format stream "~A" mnemonic)))))
    (loop for properties = (reverse (registered-book-extended-properties registered-book))
	  for n from 0 by 2 
	  for value = (nth n properties)
	  for property = (nth (1+ n) properties)
	  until (>= n (length properties))
	  do
      (formatting-row (stream)
	(formatting-cell (stream)
	  (format stream "~A" property))
	(formatting-cell (stream)
	  (format stream "~A"  (if (eql property 'symcopy)
				   (typecase value
				     (string value)
				     (otherwise (format nil "19~A - 1980" (time:default-year))))
				   value)))))))
