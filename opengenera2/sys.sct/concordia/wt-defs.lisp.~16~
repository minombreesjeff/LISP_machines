;;;-*- Syntax: Common-lisp; Mode: Lisp; Package: Nsage; Lowercase: T; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; NWT system initialization list
(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*nwt-initializations*0 nil)

(defstruct 1(collected-references)
0  list
  recently-added
  (tick 0))

(defvar 1*collected-references*0 (make-collected-references))

;;; 1dynamic-flet0 and friends have been moved into sage-defs.lisp since there are
;;; things (at least, compressed-database.lisp) which require it to be part of NSAGE.
;;; --RWK

(defmacro 1with-file-attributes-from-home-buffer0 ((edited-record) &body body)
  (let ((continuation (gensym))
	(home-node (gensym))
	(buffer (gensym))
	(attribute-string (gensym))
	(vars (gensym))
	(vals (gensym)))
    `(let* ((,continuation (named-lambda with-file-attributes-from-home-buffer ()
			     (declare (sys:downward-function))
			     ,@body))
	    (,home-node (find-home-node-for-record ,edited-record))
	    (,buffer (and ,home-node (zwei:interval-buffer ,home-node)))
	    (,attribute-string (and ,buffer (zwei:buffer-attribute-string ,buffer))))
       (if (and (stringp ,attribute-string)
		(not (string-equal ,attribute-string "")))
	   (multiple-value-bind (,vars ,vals)
	       (fs:file-attribute-bindings
		 nil :additional-attributes (fs:parse-attribute-list ,attribute-string))
	     (progv ,vars ,vals (funcall ,continuation)))
	   (funcall ,continuation)))))

;;; Support for presentation translators

;;; Convert (coerce) an object from one type to another
(defun 1convert-sage-object0 (object from-type to-type)
  (if (eql from-type to-type)
      object
      (let ((converter (run-time-lookup-sage-object-converter from-type to-type)))
	(and converter
	     (funcall converter object)))))

;;; Remembers the converters
(defvar 1*sage-object-converter-table*0 ())

;;; Record the converter
(defun 1note-sage-object-converter0 (from-type to-type name)
  (let ((from-slots (getf *sage-object-converter-table* from-type)))
    (setf (getf from-slots to-type) name)
    (setf (getf *sage-object-converter-table* from-type) from-slots))
  name)

;;; Look up a converter at compile time.
(defun 1compile-time-lookup-sage-object-converter0 (from-type to-type)
  (if (eql from-type to-type)
      'identity
      (getf (getf *sage-object-converter-table* from-type) to-type)))

;;; Look up a converter at run time
(defun 1run-time-lookup-sage-object-converter0 (from-type to-type)
  (if (eql from-type to-type)
      #'identity
      (getf (getf *sage-object-converter-table* from-type) to-type)))

;;; Defining a converter
(defmacro 1define-sage-object-converter0 (name (from-type to-type) &body body)
  `(progn
     (defsubst ,name (,from-type) ,@body)
     (note-sage-object-converter ',from-type ',to-type ',name)))

;;; Make convert-sage-object fast by looking up converters at compile time,
;;; which may well turn into defsubsts for even more open-coding.
(compiler:defoptimizer 1(convert-sage-object optimize-convert-sage-object )0 (form)
  (compiler:matchp form
    (('convert-sage-object object from-type to-type)
     (when (and (compiler:constant-form-p from-type)
		(compiler:constant-form-p to-type))
       (let ((from (compiler:constant-evaluator from-type))
	     (to (compiler:constant-evaluator to-type)))
	 (let ((how-to-do (compile-time-lookup-sage-object-converter from to)))
	   (when how-to-do
	     (return-from optimize-convert-sage-object `(,how-to-do ,object))))))))
  form)

;;; The converters.
;;; I chose not to use AI programming techniques with backtracking and stuff.
;;; Instead, you have to define all the conversions manually.

;;;
;;; Converting to record-groups
;;;

(define-sage-object-converter 1doc-recordrecord-group0 (doc-record record-group)
  (doc-record-record-group doc-record))

(define-sage-object-converter 1index-database-entryrecord-group0 (index-database-entry record-group)
  (let ((record (index-database-entry-record index-database-entry)))
    (unless (null record)
      (doc-recordrecord-group record))))

(define-sage-object-converter 1record-structure-noderecord-group0 (zwei:record-structure-node record-group)
  (doc-recordrecord-group
    (zwei:markup-structure-node-markup-structure zwei:record-structure-node)))

(define-sage-object-converter 1reference-structure-noderecord-group0 (zwei:reference-structure-node record-group)
  (sage-reference-record-group
    (zwei:markup-structure-node-markup-structure zwei:reference-structure-node)))

(define-sage-object-converter 1record-group-namerecord-group0 (record-group-name record-group)
  (convert-record-group-name-to-record-group-using-mouse record-group-name))

;;;
;;; Converting to records
;;;

;;; Record groups can't be converted to records in general.  Consider Kill Record.

(define-sage-object-converter 1index-database-entrydoc-record0 (index-database-entry doc-record)
  (index-database-entry-record index-database-entry))

(define-sage-object-converter 1record-structure-nodedoc-record0 (zwei:record-structure-node doc-record)
  (zwei:markup-structure-node-markup-structure zwei:record-structure-node))

;;; define a bunch of define-presentation-translator forms
(defmacro 1define-multiple-presentation-translators0 (name (ptype &rest options
							   &key other-ptypes &allow-other-keys))
  (let ((other-options (si:rem-keywords options '(:other-ptypes))))
    `(progn
       ;; This declaration doesn't work---
       ;;(declare (sys:function-parent ,name define-multiple-translators))
       ,@(domap 'list ((this-ptype other-ptypes))
	   (let ((translator-name (sys:fintern "~a from ~a" name this-ptype)))
	     `(define-presentation-translator ,translator-name (,this-ptype ,ptype ,@other-options)
		 (.object.)
		(convert-sage-object .object. ',this-ptype ',ptype)))))))

;; Define a bunch of define-presentation-to-command-translator forms
(defmacro 1define-multiple-command-translators0 (name (ptype &rest options
							   &key other-ptypes &allow-other-keys)
					       (object &rest other-args)
					       &body body)
  (let ((other-options (si:rem-keywords options '(:other-ptypes))))
    `(progn
       ;; This declaration doesn't work---
       ;;(declare (sys:function-parent ,name define-multiple-translators))
       ,@(domap 'list ((this-ptype (cons ptype other-ptypes)))
	   (let ((translator-name (sys:fintern "~a from ~a" name this-ptype)))
	     `(define-presentation-to-command-translator ,translator-name
		 (,this-ptype ,@other-options)
		 (.object. ,@other-args)
		(let ((,object (convert-sage-object .object. ',this-ptype ',ptype)))
		  (and ,object ,@body))))))))

;; Define a bunch of zwei:define-presentation-to-editor-command-translator forms
(defmacro 1define-multiple-editor-command-translators
0	  (name (ptype echo-name comtab &rest options
		       &key other-ptypes &allow-other-keys)
	   (object &rest other-args)
	   &body body)
  (let ((other-options (si:rem-keywords options '(:other-ptypes))))
    `(progn
       ;; This declaration doesn't work---
       ;;(declare (sys:function-parent ,name define-multiple-translators))
       ,@(domap 'list ((this-ptype (cons ptype other-ptypes)))
	   (let ((translator-name (sys:fintern "~a from ~a" name this-ptype)))
	     `(zwei:define-presentation-to-editor-command-translator ,translator-name
		 (,this-ptype ,echo-name ,comtab ,@other-options)
		 (.object. ,@other-args)
		(let ((,object (convert-sage-object .object. ',this-ptype ',ptype)))
		  (and ,object ,@body))))))))


;;; ----------------
;;; Flavor definitions needed for undocumenting topics

(defflavor 1killed-record
0	(dead-record-group
	 (patched-p nil))
	()
  :writable-instance-variables)

;;; Stuff for killed records.
(defmethod 1(zwei:record-structure-topic-name-and-type killed-record)0 ()
  (values (appropriate-title-rendering dead-record-group 'no-formatting)
	  (string-capitalize-words (record-group-type dead-record-group))))

(defmethod 1(brief-print-self killed-record)0 (stream)
  (format stream "Killed standin for \"~A\""
	  (appropriate-title-rendering dead-record-group 'no-formatting)))

;;; This causes attempts to c-K, etc. to barf.  Mark should look into making
;;; this more elegant.
(defmethod 1(sage::directive-superior killed-record)0 () nil)


;;; Comtab
(defvar 1*wt-comtab*
0	(let ((comtab (zwei:create-comtab "WT-Comtab")))
	  (setf (zwei:comtab-indirect-to comtab) zwei:*zmacs-comtab*)
	  comtab))


;;; References
(defvar 1*reference-views*0 '(include contents crossreference #+Ignore topic precis))


(defprop define-multiple-methods "Multiple methods for" si:definition-type-name)

;;; All the 1defgeneric0s for these methods are now in Nsage.
(defmacro 1define-multiple-methods0 (method-name arglist &body method-clauses)
  (unless (and (fdefinedp method-name)
	       (sys:generic-function-p (fdefinition method-name)))
    (error "~S is not a generic function, you should not use 1define-multiple-methods0 to define
methods for it" method-name))
  (let* ((method-arglist (lt:remove-arguments-from-lambda-list 1 arglist))
	 (forms
	   (loop for method-body in method-clauses
		 as (keyword flavor-stuff . body) = method-body
		 unless (eq keyword ':method)
		   do
		     (error "~S invalid keyword to define-multiple-methods, expected 1:method0"
			    keyword)
		 collect
		   `(defmethod (,method-name ,@flavor-stuff) ,method-arglist
		      ,@body))))
    `(zl:local-declare ((sys:function-parent ,method-name define-multiple-methods))
       (record-source-file-name ',method-name 'define-multiple-methods)
       ,@forms)))

;;; Phantom newlines stuff.
(define-multiple-methods 1maintains-connection-flags-p0 (sage-thing)
  (:method (doc-record) nil)
  (:method (record-field) nil)
  (:method (sage-command-arg-field) nil)
  (:method (sage-command-contents-field) nil)
  (:method (sage-text-structure) nil)
  (:method (fake-record-field) nil)
  (:method (killed-record) nil))

(define-multiple-methods 1connected-to-previous-line0 (sage-thing trailer-p)
  (:method (doc-record) (ignore trailer-p) nil)
  (:method (record-field) (ignore trailer-p) nil)
  (:method (sage-command-arg-field) (ignore trailer-p) nil)
  (:method (sage-command-contents-field) (ignore trailer-p) nil)
  (:method (sage-text-structure) (ignore trailer-p) nil)
  (:method (fake-record-field) (ignore trailer-p) nil)
  (:method (killed-record) (ignore trailer-p) nil))

(define-multiple-methods 1connected-to-next-line0 (sage-thing trailer-p)
  (:method (doc-record) (ignore trailer-p) nil)
  (:method (record-field) (ignore trailer-p) nil)
  (:method (sage-command-arg-field) (ignore trailer-p) nil)
  (:method (sage-command-contents-field) (ignore trailer-p) nil)
  (:method (sage-text-structure) (ignore trailer-p) nil)
  (:method (fake-record-field) (ignore trailer-p) nil)
  (:method (killed-record) (ignore trailer-p) nil))

(defun 1cannot-setf-connection-flags0 (thing)
  (error "Cannot set connection flags for ~a, a ~a.  (Internal Error)"
	 thing (cl:type-of thing)))

(define-multiple-methods 1(setf connected-to-previous-line)0 (sage-thing trailer-p new-val)
  (:method (doc-record) (ignore trailer-p new-val) (cannot-setf-connection-flags self))
  (:method (record-field) (ignore trailer-p new-val) (cannot-setf-connection-flags self))
  (:method (sage-command-arg-field) (ignore trailer-p new-val)
	   (cannot-setf-connection-flags self))
  (:method (sage-command-contents-field) (ignore trailer-p new-val)
	   (cannot-setf-connection-flags self))
  (:method (sage-text-structure) (ignore trailer-p new-val)(cannot-setf-connection-flags self))
  (:method (fake-record-field) (ignore trailer-p new-val)(cannot-setf-connection-flags self))
  (:method (killed-record) (ignore trailer-p new-val)(cannot-setf-connection-flags self)))

(define-multiple-methods 1(setf connected-to-next-line)0 (sage-thing trailer-p new-val)
  (:method (doc-record) (ignore trailer-p new-val) (cannot-setf-connection-flags self))
  (:method (record-field) (ignore trailer-p new-val) (cannot-setf-connection-flags self))
  (:method (sage-command-arg-field) (ignore trailer-p new-val)
	   (cannot-setf-connection-flags self))
  (:method (sage-command-contents-field) (ignore trailer-p new-val)
	   (cannot-setf-connection-flags self))
  (:method (sage-text-structure) (ignore trailer-p new-val)(cannot-setf-connection-flags self))
  (:method (fake-record-field) (ignore trailer-p new-val) (cannot-setf-connection-flags self))
  (:method (killed-record) (ignore trailer-p new-val)(cannot-setf-connection-flags self)))

(defgeneric 1completely-unconnected0 (sage-thing)
  (:method (doc-record) t)
  (:method (record-field) t)
  (:method (sage-command-arg-field) t)
  (:method (sage-command-contents-field) t)
  (:method (sage-text-structure) nil)
  (:method (fake-record-field) t)
  (:method (killed-record) t)
  (:method (sage-directive :default)
   (and (sage-directive-header-unconnected-to-previous self)
	(sage-directive-header-unconnected-to-next self)
	(sage-directive-trailer-unconnected-to-previous self)
	(sage-directive-trailer-unconnected-to-next self))))

(defgeneric 1(setf completely-unconnected)0 (sage-thing new-val)
  (:method (doc-record) (ignore new-val) (cannot-setf-connection-flags self))
  (:method (record-field) (ignore new-val) (cannot-setf-connection-flags self))
  (:method (sage-command-arg-field) (ignore new-val)
	   (cannot-setf-connection-flags self))
  (:method (sage-command-contents-field) (ignore new-val)
	   (cannot-setf-connection-flags self))
  (:method (sage-text-structure) (ignore new-val)
	   (cannot-setf-connection-flags self))
  (:method (fake-record-field) (ignore new-val) (cannot-setf-connection-flags self))
  (:method (killed-record) (ignore new-val) (cannot-setf-connection-flags self))
  (:method (sage-directive :default)
   (cond ((null new-val)
	  (cerror "Proceed without any special action"
		  "It does not make sense to set 1completely-unconnected0 to NIL."))
	 (t
	  (setf (sage-directive-header-unconnected-to-previous self) t)
	  (setf (sage-directive-header-unconnected-to-next self) t)
	  (setf (sage-directive-trailer-unconnected-to-previous self) t)
	  (setf (sage-directive-trailer-unconnected-to-next self) t)))))
