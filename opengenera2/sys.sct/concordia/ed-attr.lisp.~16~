;;; -*- Base: 10; Mode: LISP; Package: NSAGE; Syntax: Common-lisp; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains the parts of the Zwei-based Concordia
;;; writer's user interface having to do with editing 
;;; formatter attributes for environments and commands

;; Editing environment attributes. 

(define-presentation-typeD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") attribute-name0 ((&key internal-too))
   :parser ((stream &key type)
	    (dw:completing-from-suggestions (stream :type type)
	      (maphash #'(lambda (key value)
			   (ignore value)
			   (setq key (intern key *sage-package*))
			   (when (or (eq internal-too
					 (environment-attribute-internal-p key))
				     (not (environment-attribute-internal-p key)))
			     (let ((pretty-name (environment-attribute-pretty-name key)))
			       (dw:suggest pretty-name key))))
		       *environment-attributes*)))
   :printer ((attribute-name stream)
	     (write-string (environment-attribute-pretty-name attribute-name) stream)))

(define-presentation-type1 environment-name0 ((&key internal-too))
   :parser ((stream &key type)
	    (with-document-and-device-types ()
	      (dw:completing-from-suggestions (stream :type type)
		(maphash #'(lambda (key value)
			     (ignore value)
			     (let ((directive (lookup-directive-descriptor key)))
			       (when (and directive
					  (eq (dd-parse-type directive) :environment))
				 (setq key (intern key *sage-package*))
				 (when (or (eq internal-too (directive-internal-p key))
					   (not (directive-internal-p key)))
				   (let ((pretty-name (directive-pretty-name key)))
				     (dw:suggest pretty-name key))))))
			 *formatter-directives*))))
   :printer ((environment-name stream)
	     (write-string (directive-pretty-name environment-name) stream)))

(defmacro1 with-distance-destructured0 ((sign-var number-var units-var) spec &body body)
  `(multiple-value-bind (,sign-var ,number-var ,units-var)
       (cond ((= (length ,spec) 2)
	      (apply #'values nil ,spec))
	     (t (apply #'values ,spec)))
     ,@body))

(defun 1valid-distance-p0 (putative-distance &optional (direction '*))
  (and (listp putative-distance)
       (let ((length (length putative-distance)))
	 (< 1 length 4))
       (with-distance-destructured (sign number units) putative-distance
	 (and (or (null sign)
		  (member sign '(+ -)))
	      (numberp number)
	      (or
		(member units 
			'(inches cm mm points pixels picas))
		(not (null
		       (case direction
			 (:horizontal (eq units 'characters))
			 (:vertical (eq units 'lines))
			 (* (member units '(lines characters)))))))))))

;;; distance represented internally as (SIGN NUMBER UNITS)
(define-presentation-type1 distance0 ((&key (direction ':horizontal direction-p) relative-p))
   :parser ((stream &key default type)
	    (let ((start-loc (send stream :read-location))
		  (string (accept 'string :stream stream :prompt nil :default nil))
		  sign number units)
	      (si:with-parse-ferror (sage-parse-error)
		(cond ((string-equal string "")
		       (cond (default
			      (dw::presentation-replace-input
				stream start-loc (present-to-string default type)
				:dont-quote t)
			      (multiple-value-setq (sign number units)
				(with-distance-destructured (s n u) default
				  (values s n u))))
			     (t (parse-error "You must supply a distance."))))
		      (t
		       (multiple-value-setq (sign number units)
			 (parse-distance string direction))))
		(when sign
		  (unless relative-p
		    (parse-error "Relative distances are not allowed."))))
	      `(,sign ,number ,units)))
   :typep ((putative-distance)
	   (ignore relative-p)
	   ;; I don't quite understand why I need this * here, or how I can
	   ;; get the type system to do this for me.
	   (valid-distance-p putative-distance (if direction-p direction '*)))
   :printer ((thing stream)
	     (with-distance-destructured (sign number units) thing
	       (when sign
		 (write sign :stream stream))
	       (write number :stream stream :base 10.)
	       (write-char #\Space stream)
	       (format stream "~:(~A~)" units))))

(defun 1valid-scale-p0 (putative-scale)
  (and (listp putative-scale)
       (= (length putative-scale) 2)
       (destructuring-bind (number type) putative-scale
	 (and (numberp number)
	      (member type 
		      '(inches cm mm points pixels picas
			       characters lines
			       absolute relative
			       ;; compatibility??
			       size))))))

(define-presentation-type 1scale0 ()
   :parser ((stream &key default type)
	    (let ((start-loc (send stream :read-location))
		  (string (accept 'string :stream stream :prompt nil :default nil))
		  number num-type)
	      (si:with-parse-ferror (sage-parse-error)
		(cond ((string-equal string "")
		       (cond (default
			      (dw::presentation-replace-input
				stream start-loc (present-to-string default type)
				:dont-quote t)
			      (setq number (first default) num-type (second default)))
			     (t (parse-error "You must supply a distance."))))
		      (t
		       (multiple-value-setq (number num-type)
			 (parse-scale string))))
		)
	      `(,number ,num-type)))
   :typep ((putative-scale)
	   (valid-scale-p putative-scale))
   :printer ((thing stream)
	     (destructuring-bind (number type) thing
	       (when (eq type 'size)
		 (setq type 'inches)
		 (setq number (/ number *microns-per-inch*)))
	       (case type
		 (relative 
		   (write-char #\* stream)
		   (write number :stream stream :base 10.))
		 (absolute
		   (write number :stream stream :base 10.))
		 (otherwise
		   (write-string
		     (present-to-string `(,number ,type)
					'((distance :direction :vertical)))
		     stream))))))

;;; Just a trivial parser and printer for now; better one to follow?
(define-presentation-type1 contents-list0 ()
   :parser ((stream &key default type)
	    (let ((start-loc (send stream :read-location))
		  (string (accept 'string :stream stream :prompt nil :default nil))
		  list)
	      (ignore list start-loc default type)
	      (si:with-parse-ferror (error)
		(with-input-from-string (s string)
		  (sage-parse s)))))
   :printer ((contents-list stream)
	     (write contents-list :stream stream)))

;;; Just a trivial parser and printer for now; better one to follow?
(define-presentation-type1 template0 ()
   :parser ((stream &key default type)
	    (let ((start-loc (send stream :read-location))
		  (string (accept 'string :stream stream :prompt nil :default nil)))
	      (ignore start-loc type)
	      (si:with-parse-ferror (sage-parse-error)
		(cond ((string-equal string "")
		       (cond (default
			      default)
			     (t (parse-error "You must supply a template."))))
		      (t
		       (parse-template string))))))
   :printer ((thing stream)
	     (write thing :stream stream)))

(define-presentation-type 1string-for-lisp-reading0 ()
   :parser ((stream)
	    (let ((string (accept 'string :stream stream :prompt nil :default nil)))
	      (parse-l-string string)))
   :printer ((string-stuff stream)
	     (format-textual-list string-stuff #'prin1 :separator " " :stream stream)))

(define-presentation-type 1document-type0 ()
   :parser ((stream &key type initially-display-possibilities)
	    (dw:complete-from-sequence
	      *formatter-document-types* stream
	      :name-key #'(lambda (x) (string-capitalize x))
	      :type type
	      :initially-display-possibilities initially-display-possibilities))
   :printer ((document-type stream)
	     (write-string (string-capitalize document-type) stream)))

(define-presentation-type 1device-name0 ()
   :parser ((stream &key type initially-display-possibilities)
	    (dw:complete-from-sequence
	      *formatter-device-types* stream
	      :type type
	      :initially-display-possibilities initially-display-possibilities))
   :printer ((device-name stream)
	     (write-string (string-capitalize device-name) stream)))

(define-presentation-type 1Line-Type0 ()
   :expander 'symbol
   :parser ((stream &key initially-display-possibilities original-type)
	    (dw:completing-from-suggestions (stream
					      :initially-display-possibilities
					      initially-display-possibilities
					      :type original-type)
	      (map-over-line-or-box-types
		'local-line-definitions *line-type-definition-registry*
		nil nil
		#'(lambda (thing) (dw:suggest (string thing) thing)))))

   :printer ((symbol stream)
	     (write-string (symbol-name symbol) stream)))

(define-presentation-type 1Box-Type0 ()
   :expander 'symbol
   :parser ((stream &key initially-display-possibilities original-type)
	    (dw:completing-from-suggestions (stream
					      :initially-display-possibilities
					      initially-display-possibilities
					      :type original-type)
	      (map-over-line-or-box-types
		'local-box-definitions *box-type-definition-registry*
		nil nil
		#'(lambda (thing) (dw:suggest (string thing) thing)))))
   :printer ((symbol stream)
	     (write-string (symbol-name symbol) stream)))

(defun1 accept-attribute-value0 (attribute-name &key default-value stream)
  (declare (values value type unchanged-p clear-p))
  (let* ((attribute-name-string (environment-attribute-pretty-name attribute-name))
	 (directive-descriptor
	   (lookup-attribute-descriptor attribute-name))
	 (arglist
	   (when directive-descriptor
	     (dd-arglist directive-descriptor))))
    (when (null arglist)
      (error "~A is not a known attribute name" attribute-name))
    (accept-attribute-value-from-arglist attribute-name attribute-name-string
					 arglist default-value stream)))

(defun1 accept-attribute-value-from-arglist0 (query-identifier prompt arglist default stream)
  (declare (values value type unchanged-p clear-p))
  (labels ((acceptor (type)
	     (multiple-value-bind (result pres-type unedited-p)
		 (accept type
			 :default default
			 :stream stream
			 :prompt prompt)
	       (let ((clear-p (and (null result)
				  ;; (not unedited-p) 
				  (not (dw::ptypep result pres-type)))))
		 (values (list query-identifier result)
			 pres-type
			 unedited-p
			 clear-p)))))
    ;; assume arglist of length 1 now
    (let ((type (second (first arglist))))
      (cond
	((listp type)
	 (acceptor `((member ,@type))))
	(t (case type
	     (:template (acceptor 'template))
	     ((horizontal-distance vertical-distance
	       horizontal-distance-relative vertical-distance-relative)
	      (let ((direction
		      (case type
			((horizontal-distance horizontal-distance-relative)
			 :horizontal)
			(otherwise :vertical)))
		    (relative-p t		;envr-mods for distances can
						;always be relative?
				#+ignore(member type '(horizontal-distance-relative
							vertical-distance-relative))))
		(acceptor `((distance :direction ,direction
				      :relative-p ,relative-p)))))
	     (:symbol (acceptor 'symbol))
	     ((symbol boolean integer scale)
	       (acceptor type))
	     ((box-type line-type)
	      (acceptor `((or ,type symbol)
			  :description ,(with-output-to-string (s)
					  (dw:describe-presentation-type type s)))))
	     (presentation-type (acceptor '((sys:form) :edit-trivial-errors-p nil)
					  #+Ignore dw:presentation-type))
	     (presentation-object (acceptor '((sys:form) :edit-trivial-errors-p nil)
					  #+Ignore dw:presentation-type))
	     ((:cmd-or-envr-name
		cmd-or-envr-name) 
	      (acceptor 'sage-markup-name))
	     ;; horrible kludge to make :NONE work
	     (:none
	       (when (null default)
		 (setq default :none-no))
	       (acceptor '((alist-member
			     :alist (("Yes" :value :none-yes
				      :documentation "Make this attribute present")
				     ("No" :value :none-no
				      :documentation "Make this attribute not present"))))))
	     (contents-list
	       (acceptor 'contents-list))
	     ((T) (acceptor 'sys:expression))
	     (otherwise
	       (error "Don't know attribute type ~A yet (internal error)" type))))))))

#||
(defun test (name &optional default (stream *standard-input*))
  (fresh-line stream)
  (dw:accepting-values (stream)
    (accept-attribute-value name :stream stream :default-value default)))
||#

;;; Yes, this should really be the cross product of environment and attribute.
(defvar1 *interesting-attributes*
0	'(Indent Leftmargin Spread
		 Above Longlines Below
		 Group Spacing Blanklines))

(zwei:define-presentation-to-editor-command-translator
1  edit-environment-attributes
0  (zwei:environment-structure-node "Edit Environment Attributes" zwei:*standard-comtab*
	     :gesture :modify)
  (node)
  `(edit-envr-for-node-using-avv-in-typeout-window ,node))

(defun1 edit-envr-for-node-using-avv-in-typeout-window0 (node)
  (let* ((envr (zwei:markup-structure-node-markup-structure node)))
    (zwei:with-typeout-window-state
      (let ((old-envr-name (send envr :envr-name))
	    (old-envr-mods (send envr :envr-mods))
	    (new-envr-name (edit-using-avv envr :stream zwei:*typeout-window*))
	    (new-envr-mods (send envr :envr-mods)))
	(unless (eq old-envr-name new-envr-name)
	  #+Franz ;;This is unimplemented
	  (zwei:diagram-lines-change-string node (string new-envr-name)))
	(unless (and (eq old-envr-name new-envr-name)
		     (eq old-envr-mods new-envr-mods))
	  (zwei:mung-node node)
	  (zwei:diagram-lines-need-redisplay node))))))

(defun1 find-local-attribute-spec0 (definition attribute-name)
  ;; Yecch, must start at the bottom of the definition and
  ;; look upwards, recursively expanding USEs.
  ;; If not found, look in toplevel environment.
  (labels ((recurse (definition attribute-name)
	     (loop for element in (reverse definition)
		   as (attr-name attr-value) = element
		   do
	       (cond ((eq attr-name attribute-name)
		      (return-from find-local-attribute-spec element))
		     ((eq attr-name 'use)
		      (let* ((directive-descriptor (lookup-directive-descriptor attr-value))
			     (dd-definition (dd-definition directive-descriptor)))
			(recurse dd-definition attribute-name)))))))
    (recurse definition attribute-name)))


;;; This code used to be run at the end of the above, but seems completely wrong.
;
;    ;; if we get here, the element was not found, so look in toplevel environment
;    ;; This is gross, but there isn't always a reverse mapping from attribute name
;    ;; to attribute default.  This is the best we can do.
;    (with-sage-device ((si:follow-syn-stream *standard-output*) :screen)
;      (let ((envr (make-toplevel-environment)))
;	(let ((get-method (intern (symbol-name attribute-name) 'keyword)))
;	  (when (operation-handled-p envr get-method)
;	    (list attribute-name
;		  (send envr get-method))))))))

#||
(defun test (envr-name attr-name)
  (kludging-document-and-device-types
    (let* ((dd (lookup-directive-descriptor envr-name))
	   (def (dd-definition dd)))
      (find-local-attribute-spec def attr-name))))
||#

;;; Notice that this is a DEFUN-IN-FLAVOR.  There is a DEFUN-IN-FLAVOR
;;; with this same name for the flavor SAGE-COMMAND as well.
;;; Since this is a defun-in-flavor, it must precede its caller below.
(defun-in-flavor1 (edit-using-avv-internal sage-envr)0 (stream)
  (let (directive-descriptor definition stuff
	(old-environment-name envr-name)
	(environment-name envr-name)
	(hash-table (make-hash-table)))
    (labels ((remember-to-return-attribute (attribute-name)
	       (setf (gethash attribute-name hash-table) t))
	     (forget-to-return-attribute (attribute-name)
	       (setf (gethash attribute-name hash-table) nil))
	     (canonicalize-stuff ()
	       (setq stuff
		     (sort stuff #'string-lessp :key #'car)))
	     (compute-and-set-stuff ()
	       (setq directive-descriptor (lookup-directive-descriptor environment-name))
	       (setq definition (dd-definition directive-descriptor))
	       (clrhash hash-table)
	       (loop for (attr) in envr-mods do (remember-to-return-attribute attr))
	       (setq stuff
		     (append envr-mods
			     (loop for attr in *interesting-attributes*
				   when (and (not (find attr envr-mods :key #'car))
					     (find-local-attribute-spec definition attr))
				     collect it)))
	       ;; is this necessary any more?
	       (setq stuff
		     ;; relying on delete-duplicates preserving the first elements
		     ;; in the list, which will be the ones coming from envr-mods
		     (delete-duplicates stuff :key #'car :from-end t))
	       (canonicalize-stuff)))
      (compute-and-set-stuff)
      (fresh-line stream)
      (with-character-face (:italic stream :bind-line-height t)
	(with-underlining (stream) (format stream "Attributes for this environment:"))
	(fresh-line stream))
      (dw:accepting-values (stream :resynchronize-every-pass t)
	(setq environment-name (accept 'environment-name :stream stream
				       :default environment-name
				       :prompt "Environment Name"))
	(when (neq old-environment-name environment-name)
	  (setq old-environment-name environment-name)
	  (compute-and-set-stuff))
	(setq stuff
	      (loop for (attr val) in stuff
		    collecting
		    (multiple-value-bind (answer nil unchanged-p clear-p)
			(accept-attribute-value
			  attr
			  :stream stream
			  :default-value (if (eq val :none) :none-yes val))
		      (unless unchanged-p (remember-to-return-attribute attr))
		      (when clear-p (forget-to-return-attribute attr))
		      answer)))
	(let ((new-attribute (accept 'attribute-name :prompt "Other Attribute" :default nil
				     :query-identifier (length stuff)
				     :stream stream)))
	  (when new-attribute
	    (unless (find new-attribute stuff :key #'car)
	      (let ((value (second (find-local-attribute-spec definition new-attribute))))
		(setq stuff (append stuff (list (list new-attribute value))))))))
	(canonicalize-stuff)
	(dw:accept-values-command-button (stream)
					 (with-character-face (:italic stream)
					   (write-line
					     "Click on this line to reset attributes to default values."
					     stream))
	  (clrhash hash-table)
	  (setq stuff (loop for element in stuff
			    as (attr-name nil) = element
			    when (and (member attr-name *interesting-attributes*)
				      (find-local-attribute-spec definition attr-name))
			      collect it))
	  (canonicalize-stuff))))
    ;; Clean up :NONE types from result, only return attributes that were
    ;; passed in or edited.
    (loop for attr-pair in stuff
	  as (attr value) = attr-pair
	  with result
	  finally (return (values environment-name (reverse result)))
	  do
      (when (gethash attr hash-table)
	(cond ((not (member value '(:none-yes :none-no)))
	       (push attr-pair result))
	      ((eq value :none-no))
	      (t (push `(,attr :NONE) result)))))))

(defmethod1 (edit-using-avv sage-envr)0 (&key (stream *standard-output*)
					    (for-real t))	;stream?
  (with-document-and-device-types ()
    (multiple-value-bind (new-environment-name new-environment-mods)
	(edit-using-avv-internal stream)
      (when for-real
	(setq envr-mods new-environment-mods
	      envr-name new-environment-name))
      (values new-environment-name new-environment-mods))))


;;; Commands
(defun 1accept-command-arguments-from-arglist0 (arglist parameters stream gross-kludge-location)
  (labels ((get-arg-stuff-default (arg-stuff)
	     (and (listp arg-stuff) (second arg-stuff)))
	   (get-arg-stuff-arg (arg-stuff)
	     (cond ((listp arg-stuff) (first arg-stuff))
		   (t arg-stuff))))
    (let ((reversed-result nil))
      (multiple-value-bind (min-pos max-pos non-pos positionals keys any-keys list-of all)
	  (extract-pattern arglist)
	(ignore min-pos max-pos non-pos)
	(when (and list-of any-keys)
	  (error "We can't handle both &list-of and &any-keys at the same time.  Please report this error."))
	(cond (all
	       (let* ((arg (get-arg-stuff-arg (first all)))
		      (default (or (first parameters)
				   (get-arg-stuff-default (first all)))))
		 (multiple-value-bind (result pres-type unedited-p)
		     (accept-command-argument-value arg (second all) default stream)
		   (ignore pres-type)
		   (push (cons result (if (first parameters) nil unedited-p))
			 reversed-result))))
	      (t
	       (let ((positional-parameters
		       (loop for temp in positionals
			     for parm in parameters
			     collect parm))
		     (non-positional-parameters
		       (nthcdr (length positionals) parameters)))
		 (labels ((arg-match (arg-name arg-spec)
			    (or (eql arg-name arg-spec)
				(and (listp arg-spec)
				     (eql arg-name (first arg-spec)))))
			  (extract-positional-default (variable-name)
			    (nth (position variable-name positionals
					   :key #'car :test #'arg-match)
				 positional-parameters))
			  (extract-key-default (variable-name)
			    (cadr (assoc variable-name non-positional-parameters)))
			  (extract-list-of-default (variable-name)
			    (ignore variable-name)
			    ;; is this guaranteed to be right?
			    non-positional-parameters)
			  )
		   ;; first collect all positional values (experimentation shows that
		   ;; there is at most one)
		   ;; then collect key parameters
		   ;; then collect &list-of or &any-keys parameters
		   
		   ;; positionals
		   (loop for (arg-stuff type) in positionals
			 as arg = (get-arg-stuff-arg arg-stuff)
			 as default-present = (extract-positional-default arg)
			 as default = (or default-present
					  (get-arg-stuff-default arg-stuff))
			 do
		     (multiple-value-bind (result pres-type unedited-p)
			 (accept-command-argument-value arg type default stream)
		       (ignore pres-type)
		       (push (cons result (if default-present nil unedited-p)) reversed-result)))
		   
		   ;; keys
		   (loop for (arg-stuff type) in keys
			 as arg = (get-arg-stuff-arg arg-stuff)
			 as default-present = (extract-key-default arg)
			 as default = (or default-present
					  (get-arg-stuff-default arg-stuff))
			 do
		     (multiple-value-bind (result pres-type unedited-p)
			 (accept-command-argument-value arg type default stream)
		       (ignore pres-type)
		       (push (cons (list arg result) (if default-present nil unedited-p))
			     reversed-result)))
		   
		   ;;&list-of
		   (when list-of
		     (destructuring-bind (arg-stuff type) list-of
		       (let* ((arg (get-arg-stuff-arg arg-stuff))
			      (default-present (extract-list-of-default arg))
			      (default (or default-present
					   (get-arg-stuff-default arg-stuff))))
			 (multiple-value-bind (result pres-type unedited-p)
			     (accept-command-argument-value arg type default stream
							    :sequence-p t)
			   (ignore pres-type)
			   (setf (location-contents gross-kludge-location) result)
			   (ignore unedited-p)	;for now
			   #+ignore
			   (push (cons (first result) (if default-present nil unedited-p))
				 reversed-result)))))
		   
		   ;;&any-keys
		   (when any-keys
		     (destructuring-bind (arg-stuff type) any-keys
		       (let* ((arg (get-arg-stuff-arg arg-stuff))
			      (default-present (extract-list-of-default arg))
			      (default (or default-present
					   (get-arg-stuff-default arg-stuff))))
			 (unless (location-contents gross-kludge-location)
			   (setf (location-contents gross-kludge-location) default))
			 ;(multiple-value-bind (result unedited-p)
			 (accept-any-keys-stuff arg type gross-kludge-location stream)
			 #+ignore
			 (push (cons result (if default-present nil unedited-p))
			       reversed-result)
			   ;)
			   )))))))
	(values (reverse reversed-result) (length positionals))))))

(defun 1accept-any-keys-stuff0 (arg type stuff-loc stream)
  (declare (values result unedited-p))
  
  (let ((stuff (location-contents stuff-loc)))
    (dw:with-redisplayable-output (:stream stream
				   :unique-id arg
				   :cache-value 'title)
      (format stream "Below, enter alternating key/value pairs for argument ~:(~A~):~%" arg))
    
    (let ((unchanged-p t))
      ;; 
      (setq stuff
	    (loop for (keyword value) in stuff
		  collecting (multiple-value-bind (result nil unedited-p)
				 (accept-command-argument-value keyword type value stream)
			       (unless unedited-p
				 (setq unchanged-p nil))
			       (list keyword result))))
      (let ((new-keyword (accept 'symbol :prompt "Other Keyword" :default nil
				 :query-identifier (length stuff)
				 :stream stream)))
	(when new-keyword
	  (unless (find new-keyword stuff :key #'car)
	    (setq unchanged-p nil)
	    (setq stuff
		  (append stuff (list (list new-keyword (if (eq type ':NONE) t nil))))))))
      (values (setf (location-contents stuff-loc) stuff) unchanged-p))))

(defun 1accept-command-argument-value0 (name type default stream &key sequence-p)
  (declare (values result presentation-type unedited-p))
  (labels ((acceptor (type)
	     (when sequence-p (setq type `((sequence ,type))))
	     (accept type :default default :stream stream :prompt (string-capitalize name))))
    (cond
      ((listp type)
       (acceptor `((member ,@type))))
      (t (case type
	   ((:template template) (acceptor 'template))
	   ((:horizontal-distance horizontal-distance
	     :vertical-distance vertical-distance
	     horizontal-distance-relative vertical-distance-relative)
	    (let ((direction
		    (case type
		      ((:horizontal-distance horizontal-distance horizontal-distance-relative)
		       :horizontal)
		      (otherwise :vertical))))
	      (acceptor `((distance :direction ,direction
				    :relative-p t)))))
	   ((boolean integer)
	    (acceptor type))
	   ((box-type line-type)
	    (acceptor `((or ,type symbol)
			:description ,(with-output-to-string (s)
					(dw:describe-presentation-type type s)))))
	   ((:symbol :variable)
	    (acceptor 'symbol))
	   (:none
	     (acceptor 'boolean))
	   (:text (acceptor 'string))
	   (:positive-integer (acceptor '((integer 1))))
	   (:nonnegative-integer (acceptor '((integer 0))))
	   (:number (acceptor 'number))
	   (:boolean (acceptor 'boolean))
	   (:document-type (acceptor 'document-type))
	   (:device-name (acceptor 'device-name))
	   (:cmd-or-envr-name (acceptor 'sage-markup-name))
	   ((contents-list :contents-list)
	    (acceptor 'contents-list))
	   (:string-for-lisp-reading (acceptor 'string-for-lisp-reading))
	   (otherwise
	     (dw:with-redisplayable-output (:stream stream
					    :unique-id name
					    :cache-value 'foo)
	       (write-line (format nil "Don't know how to handle ~A, of type ~s, yet."
				   name type) stream))
	     nil
	     #+ignore
	     (error "Don't know ~A yet." type)))))))

(defun 1command-takes-arguments-p0 (command-name &key (error-p nil))
  (let ((command-descriptor (lookup-command-descriptor command-name)))
    (when (and error-p (null command-descriptor))
      (error "There is no command named ~s." command-name))
    (let ((arglist (dd-arglist command-descriptor)))
      (unless (or (null arglist)
		  (eq arglist ':none))
	t))))

;;; Notice that this is a DEFUN-IN-FLAVOR.  There is a DEFUN-IN-FLAVOR
;;; with this same name for the flavor SAGE-ENVR as well.
;;; Since this is a defun-in-flavor, it must precede its caller below.
(defun-in-flavor1 (edit-using-avv-internal sage-command)0 (stream)
  (let* ((directive-descriptor
	   (lookup-command-descriptor command-name))
	 (arglist
	   (when directive-descriptor
	     (dd-arglist directive-descriptor))))
    (when (or (null arglist) (eq arglist ':none))
      (zwei:barf "The ~A command takes no arguments." command-name))
    (let ((parms-to-edit parameter)
	  (gross-kludge nil))
      (multiple-value-bind (parms length-positionals)
	  (dw:accepting-values (stream :resynchronize-every-pass t)
	    (dw:with-redisplayable-output (:stream stream :cache-value command-name)
	      (with-character-face (:italic stream :bind-line-height t)
		(format stream "Arguments for command ~A:~%" command-name)))
	    (multiple-value-prog1
	      (accept-command-arguments-from-arglist arglist parms-to-edit stream
						     (locf gross-kludge))
	      (dw:accept-values-command-button
		(stream)
		(with-character-face (:italic stream :bind-line-height t)
		  (write-line "Click here to reset arguments to their default values." stream))
		(setq parms-to-edit nil)
		(setq gross-kludge nil))))
	(flet ((interesting-p (thing)
		 (and (listp thing)
		      (not (cdr thing)))))
	  (append
	    (loop for thing in parms
		  for count from 0
		  with total-number-of-things = (length parms)
		  when (or (and (< count length-positionals)
				(> total-number-of-things length-positionals))
			   (interesting-p thing))
		    collect (first thing))
	    gross-kludge))))))

(defmethod1 (edit-using-avv sage-command)0 (&key (stream *standard-output*)
					    (for-real t))	;stream?
  (with-document-and-device-types ()
    (let ((new-parameter
	    (edit-using-avv-internal stream)))
      (when for-real
	(setq parameter new-parameter))
      new-parameter)))

(zwei:define-presentation-to-editor-command-translator
1  edit-command-arguments
0  (zwei:command-structure-node
    "Edit Command Arguments" zwei:*standard-comtab*
    :tester ((node)
	     (let ((cmd (zwei:markup-structure-node-markup-structure node)))
	       (command-takes-arguments-p (send cmd :command-name))))
    :gesture :modify)
  (node)
  `(edit-command-arguments-for-node-using-avv-in-typeout-window ,node))

(defun1 edit-command-arguments-for-node-using-avv-in-typeout-window0 (node)
  (let* ((cmd (zwei:markup-structure-node-markup-structure node)))
    (zwei:mung-node node)
    (zwei:invalidate-cached-title-string node)
    (zwei:with-typeout-window-state
      (edit-using-avv cmd :stream zwei:*typeout-window*))))

#||

(defun find-interesting-commands ()
  (let ((result nil))
    (maphash (lambda (key desc)
	       (multiple-value-bind (min-pos max-pos non-pos positionals keys any-keys list-of all)
		   (extract-pattern (dd-arglist desc))
		 (when list-of
		   (push (cons key (second list-of)) result))))
	     *formatter-commands*)
    result))

(defun test-command-edit-using-avv (command parameter)
  (let ((cmd (make-sage-command command parameter)))
    (edit-using-avv cmd)
    (describe cmd)))

||#



