;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: SAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Undocument Topic:
;;; 1) Ensures there are no links to this topic.  If there are, it suggests
;;;    using Edit Links To Record to remove them all.
;;; 2) Removes the topic from the relevant tables:
;;;    a) Completion aarray
;;;    b) Removes from token tables
;;;    c) Does D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")not0 remove tokens from token string (too difficult)
;;;    d) Sets the killed flag for the record group.
;;;    e) Does 1not0 remove the uid from the hash table (there may be published
;;;       versions out there that are still pointed to.
;;; 3) Leaves a marker behind to tell us what happened.

(defvar (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*killed-record-group-markers*0 ())

(defun 2find-killed-record-group-marker0 (record-group)
  (assoc record-group *killed-record-group-markers*
	 :test (lambda (rg1 rg2)
		 (and (string-equal (record-group-topic-completion rg1)
				    (record-group-topic-completion rg2))
		      (eql (record-group-type rg1)
			   (record-group-type rg2))))))

(defmethod 2(remove-killed-record-group-marker-if-necessary record-group)0 ()
  (let ((stuff (find-killed-record-group-marker self)))
    (when stuff
      (destructuring-bind (rg node) stuff
	(ignore rg)
	(setq *killed-record-group-markers*
	      (delete stuff *killed-record-group-markers*))
	(let ((superior (zwei:node-superior node)))
	  (setf (zwei:node-inferiors superior)
		(delete node (zwei:node-inferiors superior)))
	  (zwei:redo-node-links superior))))))

(defmethod 2(record-group-contains-record-p record-group)0 (putative-child)
  (flet ((tester (rec)
	   (eq rec putative-child)))
    (or (tester published-record)
	(tester installed-record)
	(some #'tester edited-records))))

(defmethod 2(kill-record-group record-group)0 (&optional (report-stream *standard-output*))
  ;; Make sure there are no callers.
  (when (record-group-callers-after-installing-edited-records-if-necessary self)
    (cond (
	   (loop for (type . caller-recs) in callers
		 always
		   (every (lambda (c)
			    (let ((rg (doc-record-record-group c)))
			      (or
				;; either this record is no longer "contained" by
				;; its record group (don't ask me how).
				(not (record-group-contains-record-p rg c))
				(record-group-killed rg)
				;; or
				(and
				  ;; each caller must be a published record only
				  (eq c
				      (record-group-published-record rg))
				  ;; not only that, but there must be an edited record for each
				  ;; caller that does 1not0 contain a link to this guy.
				  (some #'(lambda (edited-record)
					    (loop for (type . callee-rgs)
						      in (doc-record-callees edited-record)
						  never
						    (member rg callee-rgs)))
					(record-group-edited-records rg))))))
			  caller-recs))
	   ;; --- this might want to check to see if the edited records have been
	   ;; installed and remind you.
	   )
	  (t
	   (format report-stream "~&You cannot undocument ~A; there are still links to it.~2&"
		   self)
	   (let ((*standard-output* report-stream))
	     (show-record-group-inward-pointers self))
	   (format report-stream "~2& You can use Show Links To Record to find the links.")
	   (return-from kill-record-group ':abort))))

  (when-record-group-unpatched
    (self)
    ((description)
     (format report-stream "~&You cannot undocument ~A, for you have included it in a patch
which you have not yet finished:

~A

You must either finish or abort the patch first."
	     self description))
    (return-from kill-record-group ':abort))

  #+Ignore
  ;; do not allow killing a record that is presently in an active patch.
  (let ((patch (gethash self zwei:*patched-record-hash-table*)))
    (when (and patch
	       (member patch zwei:*active-patch-states*))
      (let ((desc (zwei:patch-state-description patch)))
	(let ((desc-comma (string-search-char #\, desc)))
	  (when desc-comma (setq desc (substring desc 0 desc-comma))))
	(format report-stream "~&You cannot undocument ~A, for you have included it in a patch
which you have not yet finished:

~&~A: ~A, in ~\\presentation\\~@[, declared system ~A~]~:[~; (current patch)~]

You must either finish or abort that patch first."

	      self
	      (zwei:patch-state-state patch) desc (zwei:patch-state-buffer patch)
	      (and (zwei:private-patch-p patch)
		   (zwei:private-patch-state-for-system-name patch))
	      (eq zwei:*current-patch* patch))
      (return-from kill-record-group ':abort))))

  (remove-record-group-as-caller-from-all-callees self :published-too nil)
  
  (make-record-group-inaccessible-to-ui self)
  ':ok)

(defmethod 2(remove-record-group-from-editor record-group)0 ()
  (declare (values buffer-to-leave-marker-in bp-for-marker))
  (let ((editor-nodes nil)
	(buffer-to-leave-marker-in nil)
	(bp-for-marker nil))
    (labels ((collect-editor-nodes (record)
	       (setq editor-nodes
		     (append editor-nodes (gethash record *zwei-nodes-for-record-table*)))
	       (remhash record *zwei-nodes-for-record-table*))
	     (remove-node-from-editor (node)
	       ;; --- if this doesn't modify the interval, we need to make sure
	       ;; that it ends up being modified.
	       (let ((superior (zwei:node-superior node)))
		 (assert (typep superior 'zwei:file-markup-buffer))
		 (when (eq superior zwei:*interval*)
		   ;; how do we move out the point if it happens to be inside
		   ;; this node in some other interval?
		   (zwei:move-point
		     (zwei:forward-char (zwei:node-first-bp node) -1)))
		 (setf (zwei:node-inferiors superior)
		       (delete node (zwei:node-inferiors superior)))
		 ;; don't set the superior to nil, some things still have their
		 ;; hands on this node for some damn reason.
		 #+Ignore
		 (setf (zwei:node-superior node) nil)
		 (zwei:redo-node-links superior))))
      (map () #'collect-editor-nodes edited-records)
      (let ((node-for-marker
	      (or
		(loop for node in editor-nodes
		      when (eq (zwei:node-superior node) zwei:*interval*)
			return node)
		(first editor-nodes))))
	(setq buffer-to-leave-marker-in (zwei:node-superior node-for-marker)
	      bp-for-marker (zwei:forward-char (zwei:node-first-bp node-for-marker) -1)))
      (map () #'remove-node-from-editor editor-nodes)
      (values buffer-to-leave-marker-in bp-for-marker))))
    
(defmethod 2(:code-for-patch-buffer zwei:killed-record-structure-node)0 ()
  (let ((record-group (killed-record-dead-record-group zwei:markup-structure)))
    `(undocument-record-group
       :unique-id ',(record-group-unique-id record-group)
       :unique-index ',(compressed-record-group-index record-group)
       :record-group-name ,(with-output-to-string (*standard-output*)
			     (zwei:record-description self *standard-output*)))))

(defgeneric 2killed-record-p0 (record)
  (:method (doc-record) nil)
  (:method (killed-record) t))

(zwei:defcom 2com-wt-kill-record0 "Undocuments a record, leaving a tombstone behind."
	     ()
  (let ((record-group-to-kill
	  (zwei:typein-line-accept-record-group
	    :prompt "Record to undocument"
	    :default (record-group-at-point))))
    ;; This may not work since there was a bug that left records in the edited-records
    ;; list for record groups
    (unless (record-group-edited-records record-group-to-kill)
      (if (zwei:y-or-n-p "This record is not currently being edited.  Do you want to edit it and kill it? ")
	  (progn (edit-record record-group-to-kill)
		 (zwei:redisplay zwei:*window*))
	  (return-from com-wt-kill-record zwei:dis-none)))
    (zwei:mung-bp-interval (zwei:point))	;do this before kill-record-group
    (let ((successful (kill-record-group record-group-to-kill)))
      (ecase successful
	(:ABORT zwei:dis-none)
	(:OK
	  ;; get all edited records out of the editor
	  (multiple-value-bind (buffer-for-marker bp-for-marker)
	      (remove-record-group-from-editor record-group-to-kill)
	    (remove-collected-record-name record-group-to-kill)
	    (let ((killed-rec (make-instance 'killed-record)))
	      (setf (killed-record-dead-record-group killed-rec) record-group-to-kill)
	      (let ((node (zwei:insert-record-structure-nodes killed-rec
							      :at-bp bp-for-marker)))
		(pushnew `(,record-group-to-kill ,node) *killed-record-group-markers*)
		zwei:(when (and *current-patch*
				(fquery () "Make patch ~A ~D.~D remove ~A from the world? "
					(patch-state-system-name *current-patch*)
					(patch-state-major-version *current-patch*)
					(patch-state-minor-version *current-patch*)
					(with-output-to-string (standard-output)
					  (record-description
					    sage::record-group-to-kill standard-output))))
		       (when *collect-individual-patch-comments*
			 (zwei:add-patch-comment *current-patch*
						 "removal form"
						 (with-output-to-string (standard-output)
						   (record-description sage::node
								       standard-output)
						   (format t ":  "))))
		       (sage::wt-add-patch-interval
			 sage::node () ()
			 (node-superior sage::node)
			 (patch-state-buffer *current-patch*)))))

	    (zwei:typein-line "~&~:(~A~) \"~A\" undocumented."
			      (record-group-type record-group-to-kill)
			      (appropriate-title-rendering record-group-to-kill
							   'no-formatting))
	    (if (eq buffer-for-marker zwei:*interval*)	;what about region?
		zwei:dis-text
		(zwei:typein-line "~&Marker left in buffer ~A." buffer-for-marker)
		zwei:dis-none)))))))

;(zwei:set-comtab *wt-comtab* () (make-command-alist '(com-undocument-topic)))

;;; Don't allow saving this buffer if there are unpatched killed records that are published.
(defwhopper 2(:save zwei:file-markup-buffer)0 ()
  (let ((killed-records
	  (loop for rec in (zwei:node-inferiors self)
		when (typep rec 'zwei:killed-record-structure-node)
		  collect (zwei:markup-structure-node-markup-structure rec)))
	(unpatched-killed-records ()))
    (when killed-records
      (setq unpatched-killed-records
	    (loop for rec in killed-records
		  unless (or (killed-record-patched-p rec)
			     (not (record-group-published-record
				    (killed-record-dead-record-group rec))))
		    collect rec)))
    (when
      (or (null unpatched-killed-records)
	  (progn
	    (format-item-list unpatched-killed-records
			      :printer (lambda (rec stream)
					 (let ((rg (killed-record-dead-record-group rec)))
					   (dw:with-output-as-presentation (:stream stream
									    :type 'record-group
									    :object rg)
					     (format stream "~:(~A~) "
						     (record-group-type rg))
					     (write-char #\" stream)
					     (write-string (appropriate-title-rendering
							     rg 'no-formatting) stream)
					     (write-char #\" stream)))))
	    (let ((*query-io* zwei:*typeout-window*)
		  (plural-p (> (length killed-records) 1)))
	      (yes-or-no-p "~&The above published record~:[ was~;s were~] killed but not patched.  This
may cause serious harm to the documentation database.  Save anyway? " plural-p))))
      (continue-whopper)
      (loop for killed-rec in killed-records
	    do 
	(let ((marker (find-killed-record-group-marker
			(killed-record-dead-record-group killed-rec))))
	  (setq *killed-record-group-markers*
		(delete marker
			*killed-record-group-markers*))
	  (setf (zwei:node-inferiors self) (delete (second marker) (zwei:node-inferiors self)))
	  (zwei:must-redisplay zwei:*window* zwei:dis-all)))
      (zwei:redo-node-links self))))

#||
(zwei:define-presentation-to-editor-command-translator 2toggle-killed-record-patched
0						       (zwei:killed-record-structure-node
							 "Toggle patched"
							 *wt-comtab*
							 :tester true
							 :gesture nil)
						       (node)
  (flet ((do-it (node)
	   (let ((kr (zwei:markup-structure-node-markup-structure node)))
	     (setf (killed-record-patched-p kr)
		   (not (killed-record-patched-p kr)))
	     (zwei:diagram-lines-need-redisplay node))))
    `(,#'do-it ,node)))
||#
