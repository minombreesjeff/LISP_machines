;;; -*- Mode: LISP; Syntax: Common-lisp; Package: SAGE; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Source Compare Merge for sab buffers/files
;;(dw:with-graphics-tranlsation
zwei:
(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")display-diagram-line 0(stream line)
  (let ((diagram-line (and (array-has-leader-p line)
			   (line-diagram line)))
	(x (send stream :cursor-x))
	(y (send stream :cursor-y))
	(*extra-record-header-line-headroom* 0))	;Don't display any extra white space
    (incf x 6)
    (multiple-value-bind (nil yy) (send stream :visible-cursorpos-limits)
      (incf y yy)
      (send diagram-line :editor-draw line stream x y)
      (send stream :set-cursorpos 0
	    (+ y (send diagram-line :editor-height stream line))))))

(zwei:defcom1 com-wt-source-compare
0	     "Compares two files or buffers, prompting for type and name.
The result of the comparison appears on the screen.
A numeric argument is decoded to modify source-compare behavior:
  an argument of 2 causes case and style to be ignored
                 4 causes leading whitespace to be ignored
                 6 cause both case, style, and whitespace to be ignored" ()
  (dynamic-flet ((srccom:source-compare-files (file1 file2 &rest args)
		  (adjust-srccom-file-stream file1)
		  (adjust-srccom-file-stream file2)
		  (lexpr-continue file1 file2 args))
		 srccom:
		 (print-file-segment (file start-line-no end-line-no)
		   (do ((line-no start-line-no (1+ line-no))
			(line))
		       ((= line-no end-line-no))
		     (unless (setq line (get-file-line file line-no))
		       (return nil))
		     (let ((cs (send zwei:*major-mode* :default-character-style)))
		       (scl:with-character-style (cs *output-stream* :bind-line-height t)
			 (cond ((file-bp-table file)
				(zwei:present-line1-20 (aref (file-bp-table file) line-no)
						     *output-stream*
						     1(aref file line-no)
0						     ))
			       ((stringp line)
				(if (not (and (array-has-leader-p line)
					      (zwei:line-diagram line)))
				    (send *output-stream* :line-out line)
				    (zwei:display-diagram-line zwei:*typeout-window* line)))
			       (t
				(format *output-stream* "~A~%" line)))))))
		 srccom:
		 (print-differences (file-1 diff-line-no-1 same-line-no-1
					    file-2 diff-line-no-2 same-line-no-2)
		   (print-diffs-1 file-1 diff-line-no-1 same-line-no-1)
		   (print-diffs-1 file-2 diff-line-no-2 same-line-no-2)
		   (scl:with-character-family (:swiss *output-stream*)
		     (format *output-stream*
			     "~&_______________________________________________________~2%")))
		 srccom:
		 (print-diffs-1
		   (file diff-line-no same-line-no &aux label)
		   (setq diff-line-no (max 0 (- diff-line-no *lines-to-print-before*))
			 same-line-no (+ same-line-no *lines-to-print-after*))
		   (if (and (presentation-object file) (presentation-type file))
		       (format *output-stream* "~&~'b**** ~A ~@\\presentation\\, Line #~D~"
			       (file-type file) (presentation-object file)
			       (presentation-type file)
			       diff-line-no)
		       (format *output-stream* "~&'b**** ~A ~A, Line #~D~"
			       (file-type file) (file-name file) diff-line-no))
		   (cond ((setq label (line-last-label file diff-line-no))
			  (let ((diagram-p (and (array-has-leader-p label)
						(zwei:line-diagram label))))
			    (format *output-stream* "~%After ")
			    (if diagram-p
				(zwei:display-diagram-line zwei:*typeout-window* label)
				(scl:indenting-output (*output-stream* '(6 :pixel))
				  (format *output-stream* "~s~%" label)))))
			 (t (funcall *output-stream* ':tyo #\Cr)))
		   (print-file-segment file diff-line-no same-line-no)))
      (zwei:com-source-compare)))

(zwei:defcom 1com-wt-source-compare-merge
0	"Compare two files or buffers and merge the differences into the specified buffer.
Numeric argument is decoded bit-wise to modify source-compare behavior:
  bit 1 (2) causes case and style to be ignored
  bit 2 (4) causes leading whitespace to be ignored" ()
  (dynamic-flet ((srccom:source-compare-automatic-merge-recording (file1 file2 &rest args)
		   (adjust-srccom-file-stream file1)
		   (adjust-srccom-file-stream file2)
		   (lexpr-continue file1 file2 args))
		 srccom:
		 (print-file-segment (file start-line-no end-line-no)
		   (do ((line-no start-line-no (1+ line-no))
			(line))
		       ((= line-no end-line-no))
		     (unless (setq line (get-file-line file line-no))
		       (return nil))
		     (cond ((file-bp-table file)
			    (zwei:present-line1-10 (aref (file-bp-table file) line-no)
					       *output-stream*
					       1(aref file line-no)
0					       ))
			   ((stringp line)
			    (send *output-stream* :line-out line))
			   (t
			    (format *output-stream* "~A~%" line)))))
		 (zwei:source-compare-merge-query (marks)
1		   0;; Just a hook to get the merge buffer's default character style set
		   ;; up right.  Otherwise the diagrams look pretty stupid too.
1		   (change-buffer-default-character-style *screen-default-character-style*)
0		   (continue marks))
		 (zwei:sectionize-buffer (buffer)
		   (ignore buffer)
		   (break "Whoa, not so fast, buster")
		   ;;---Needs something like regenerate-copied-sage-interval here
		   )
		 )
    (zwei:com-source-compare-merge)))

zwei:
(defun 1present-line-1 0(bp stream1 &optional line-alias0)
  (unless (listp bp)				;Allow argument to be a line
    (setq bp (create-bp bp 0)))
  (dw:with-output-as-presentation (:stream stream
				   :object bp
				   :type 'bp)
    (send stream :line-out (1or line-alias0 (bp-line bp)))))

zwei:
(defun 1present-line-2 0(bp stream1 &optional line-alias0)
  (unless (listp bp)				;Allow argument to be a line
    (setq bp (create-bp bp 0)))
  (dw:with-output-as-presentation (:stream stream
				   :object bp
				   :type 'bp)
    (let* ((line (bp-line bp))
	   (diagram-line (and (array-has-leader-p line)
			      (line-diagram line))))
      (if (not diagram-line)
	  (send stream :line-out (1or line-alias0 (bp-line bp)))
	  (display-diagram-line *typeout-window* line)))))

(defun 1change-buffer-default-character-style0 (style)
  (send zwei:*interval* :putprop style :default-character-style)
  (let ((zwei:*set-attribute-updates-list* nil))
    (zwei:set-attribute-internal ':default-character-style
				 "Default-character-style"
				 (zwei:string-naming-character-style style)
				 style))
  (send (zwei:window-sheet zwei:*window*)
	:set-default-character-style style))

(defun 1adjust-srccom-file-stream0 (srccom-file)
  (ecase (srccom:presentation-type srccom-file)
    (zwei:buffer
      (setf (srccom:file-stream srccom-file)
	    (make-instance 'srccom-line-stream-from-buffer
			   :buffer (srccom:presentation-object srccom-file))))
    (fs:pathname
      (setf (srccom:file-stream srccom-file)
	    (make-instance 'srccom-line-stream-from-stream
			   :stream (srccom:file-stream srccom-file)))))
  srccom-file)

(defflavor 1srccom-line-stream-from-buffer
0	(buffer current-line)
	()
  :initable-instance-variables)

(defmethod 1(make-instance srccom-line-stream-from-buffer)0 (&rest ignore)
  (unless (variable-boundp current-line)
    (setq current-line (zwei:bp-line (zwei:interval-first-bp buffer)))))

(defmethod 1(:read-bp srccom-line-stream-from-buffer)0 (&optional buffer-matters)
  (cond ((null current-line) (zwei:interval-last-bp buffer))
	(buffer-matters
	 (zwei:make-bp zwei:bp-line current-line
		       zwei:bp-index 0
		       zwei:bp-status nil
		       zwei:bp-buffer-internal buffer))
	(t (zwei:create-bp current-line 0))))

(defmethod 1(:close srccom-line-stream-from-buffer)0 (&optional abort-p)
  (ignore abort-p))

(defmethod 1(:line-in srccom-line-stream-from-buffer)0 (&optional leader)
  (declare (values line eof-p))
  (check-type leader boolean)			;---
  (if (null current-line)
      (values nil t)
      (let ((line current-line))
	(setq current-line (zwei:line-next-in-buffer current-line :buffer buffer))
	;;Bleah.  The buffer is known to have a rogue blank line after the real last line
	;;in the buffer.  If we just returned the penultimate line in the buffer, call it
	;;quits and signal eof-p.
	(unless (zwei:line-next-in-buffer line :buffer buffer)
	  (return-from :line-in (values nil t)))
	(let ((diagram (and (array-has-leader-p line)
			    (zwei:line-diagram line))))
	  (if diagram
	      (write-diagram-to-line line diagram)
	      (copy-seq line))))))

(defflavor 1srccom-line-stream-from-stream
0	(stream records-info lines)
	()
  (:initable-instance-variables stream))

(defmethod 1(make-instance srccom-line-stream-from-stream)0 (&rest ignore)
  (unless (variable-boundp records-info)
    (setq records-info
	  (let ((pathname (send stream :pathname)))
	    (multiple-value-bind (info attribute-alist)
		(get-record-info-from-file pathname)
	      (let ((attribute-string
		      (or (second (cl:assoc :file-attribute-string attribute-alist)) "")))
		(setq lines (list attribute-string))
		info))))))

(defmethod 1(:close srccom-line-stream-from-stream)0 (&optional abort-p)
  (si:close-open-stream stream abort-p))

zwei:
(defun 1tweak-adjacent-diagram-lines 0(contents)
  (loop for previous-line = nil then line
	for line in contents
	for first = t then nil
	finally (return contents)
	do
    (let* ((diagram-for-line (and (array-has-leader-p line)
				  (line-diagram line)))
	   (diagram-for-previous-line (when (and previous-line
						 (array-has-leader-p previous-line))
					(line-diagram previous-line)))
	   (previous-markup (when diagram-for-previous-line
			      (markup-line-diagram-mixin-markup-structure
				diagram-for-previous-line)))
	   (trailer-p (when diagram-for-previous-line
			(mdl-trailer-p diagram-for-previous-line line :for-next))))
      (when (and diagram-for-line
		 (or first
		     (and diagram-for-previous-line
			  (sage::maintains-connection-flags-p previous-markup)
			  (not (sage::connected-to-next-line previous-markup trailer-p))))
		 (not zwei:*show-invisible-connection-markers*))
	(setf (cl:getf (line-plist line) :suppress-connection-to-previous-line) t)))))

;;; Note: Changes in this routine should be also made in zwei:excise-phantom-newlines.
;;; Unfortunately, these two routines do not yet share common code.
zwei:
(defun 1excise-phantom-newlines-for-srccom 0(lines)  
  (multiple-value-bind (pre-contents-lines contents post-contents-lines)
      (loop for line in lines
	    counting 1 into pos
	    with pcl
	    with contents
	    as contents-field-delimiter-p =
	       (let* ((l-d (and (array-has-leader-p line)
				(line-diagram line)))
		      (m-s (when l-d (markup-line-diagram-mixin-markup-structure l-d))))
		 (eql (when m-s (send-if-handles m-s :envr-name)) 'sage::contents))
	    with collecting-contents = nil
	    until (and collecting-contents contents-field-delimiter-p)
	    finally (return (values (nreverse pcl) (nreverse contents)
				    (nthcdr (1- pos) lines)))
	    do
	(if collecting-contents
	    (push line contents)
	    (push line pcl))
	(when contents-field-delimiter-p
	  (setq collecting-contents t)))
  
    (cl:assert lines () "Internal error.  No start of contents field for record from file.")
    (loop for previous-line = (first contents) then line
	  for line in (cdr contents)
	  with skip = nil
	  while line
	  finally (return (append pre-contents-lines
				  (tweak-adjacent-diagram-lines contents)
				  post-contents-lines))
	  do
      (if skip
	  (setq skip nil)
	  ;; run-in-markers look like {^ v}.  Set the encoded run-in markers in the line
	  ;; and also set the real flags in the markup-structure
	  (flet ((set-connected-to-previous-line (line markup trailer-p value)
		   (let ((run-in-marker-pos 
			   (1+ (string-search "{" line))))
		     (setf (aref line run-in-marker-pos) (if value #\^ #\space)))
		   (setf (sage::connected-to-previous-line markup trailer-p) value))
		 (set-connected-to-next-line (line markup trailer-p value)
		   (let ((run-in-marker-pos (+ 3 (string-search "{" line))))
		     (setf (aref line run-in-marker-pos) (if value #\v #\space)))
		   (setf (sage::connected-to-next-line markup trailer-p) value)))

	    (let* ((diagram-for-line (and (array-has-leader-p line)
					  (line-diagram line)))
		   (markup
		     (when diagram-for-line
		       (markup-line-diagram-mixin-markup-structure diagram-for-line)))
		   (trailer-p (when diagram-for-line
				(mdl-trailer-p diagram-for-line line :for-previous))))
	      (when (and markup
			 (sage::maintains-connection-flags-p markup))
		;; Previous line is blank and line is a diagram line
		(if (and (string-equal previous-line "") diagram-for-line)
		    (let* ((previous-line-pos (cl:position previous-line contents :test #'eq))
			   (new-previous-line (when (plusp previous-line-pos)
						(nth (1- previous-line-pos) contents)))
			   (new-previous-line-diagram (and new-previous-line
							   (array-has-leader-p
							     new-previous-line)
							   (line-diagram new-previous-line))))
		      (setq contents (cl:delete previous-line contents :test #'eq))
		      (if new-previous-line-diagram
			  (set-connected-to-previous-line line markup trailer-p t)
			  (set-connected-to-previous-line line markup trailer-p nil)))
		    (set-connected-to-previous-line line markup trailer-p t)))

	      (let* ((diagram-for-previous-line (and (array-has-leader-p previous-line)
						     (line-diagram previous-line)))
		     (markup (when diagram-for-previous-line
			       (markup-line-diagram-mixin-markup-structure
				 diagram-for-previous-line)))
		     (trailer-p (when diagram-for-previous-line
				  (mdl-trailer-p diagram-for-previous-line line :for-next))))
		(when (and markup
			   (sage::maintains-connection-flags-p markup))
		  ;; line is blank and previous-line is a diagram line
		  (if (and (string-equal line "") diagram-for-previous-line)
		      (progn
			(setq contents (cl:delete line contents :test #'eq))
			(setq skip t)
			(set-connected-to-next-line previous-line markup trailer-p nil))
		      (set-connected-to-next-line previous-line markup trailer-p t))))))))))

(defmethod 1(:line-in srccom-line-stream-from-stream)0 (&optional leader)
  (declare (values line eof-p))
  (check-type leader boolean)			;---
  ;; Instead of having a hairy tree-traverser whose state is kept in the instance,
  ;; this just generates and retains all the lines for a given record at once.
  ;; It does manage to do it record-by-record instead of making all the lines
  ;; for all the records all at the same time.
  (cond (lines
	 (pop lines))
	(records-info
	 (generate-srccom-lines (pop records-info)
				(named-lambda line-sink (line) (push line lines)))
	 (setq lines (nreverse lines))
	 (setq lines (zwei::excise1-0phantom1-0newlines-for-srccom lines))
	 (pop lines))
	(t (values nil t))))

(defmethod (ll 1srccom-line-stream-from-stream0) ()
  lines)

(defvar 1*srccom-record-standin-table*0 (make-hash-table))

(defun 1find-srccom-record-for-topic-and-type0 (topic type)
  (let ((record
	  (or (gethash type *srccom-record-standin-table*)
	      (let ((record-group (make-instance
				    'record-group
				    :topic topic :type type)))
		(setf (gethash type *srccom-record-standin-table*)
		      (make-instance (if (lisp-object-type-p type)
					 'lisp-record
					 'concept-record)
				     :name topic
				     :record-group record-group))))))
    (setf (doc-record-source-type record) (coerce-record-type type 'external)
	  (doc-record-topic record) topic
	  (doc-record-record-group record) (make-instance
				    'record-group
				    :topic topic :type type))
    record))

(defun 1generate-srccom-lines0 (record-info line-sink)
  (let ((record (find-srccom-record-for-topic-and-type (record-info-name record-info)
						       (record-info-type record-info))))
    (labels ((extract-appropriate-contents (field-name)
	       (or
		 (second (assoc field-name (record-info-record-fields record-info)))
		 (and (eq field-name 'source-topic)	;kludge
		      (second (assoc field-name (record-info-index-fields record-info))))))
	     (for-record (record)
	       ;; can't just pass record off here because it's the one that's in the
	       ;; machine, not the one in the file
	       (generate-diagram-line 'zwei:record-header-line record)
	       (let ((field-names
		       (record-field-names-for-editing record)))
		 (mapc #'for-record-field field-names))
	       (generate-diagram-line 'zwei:record-trailer-line record))
	     (for-record-field (field)
	       (when field
		 (let ((contents-list (extract-appropriate-contents field)))
		   (when (or contents-list
			     ;; remember that the buffer has some fields on display
			     ;; unconditionally.  Gag.
			     (member field (record-field-names-for-creation record)))
		     ;;source-topicrecord-name, etc.
		     (setq field (upgrade-record-field-name field))
		     (let ((record-field (make-fake-record-field field)))
		       (generate-diagram-line 'zwei:environment-header-line record-field)
		       (for-contents-list
			 (upgrade-sage-contents-list-for-newthink contents-list
								  :edited record-field))
		       (generate-diagram-line 'zwei:environment-header-line record-field
					      :trailer-p t))))))
	     (for-contents-list (contents-list)
	       (mapc #'for-directive contents-list))
	     (for-directive (directive)
	       ;; This would use generic function dispatch if I could get the methods
	       ;;  to share this lexical environment.  Oh well.
	       (etypecase directive
		 (string
		   (do-lines-of-string ((directive)
					(from to))
		     (text-line directive from to)))
		 (sage-text-structure
		   (zwei:do-lines ((line from to)
				   ((sage-text-structure-interval directive)))
		     (text-line line from to)))
		 (sage-envr
		   (generate-diagram-line 'zwei:environment-header-line directive)
		   (for-contents-list (send directive :contents-list))
		   (generate-diagram-line 'zwei:environment-header-line directive
					  :trailer-p t))
		 (sage-command
		   (generate-diagram-line 'zwei:command-diagram-line directive))
		 (sage-reference
		   (generate-diagram-line 'zwei:reference-diagram-line directive
				 :node (make-instance 'zwei:reference-structure-node
						      :markup-structure directive)))
		 (sage-macro-call (generate-diagram-line 'zwei:macro-call-diagram-line
							 directive))
		 (sage-picture (generate-diagram-line 'zwei:picture-diagram-line directive))
		 (example-record-marker
		   (generate-diagram-line 'zwei:example-record-marker-diagram-line directive))
		 (editable-sage-command
		   (generate-diagram-line 'zwei:editable-command-header-line directive))))
	     ;;=======
	     (text-line (string from to)
	       (funcall line-sink (substring string from to)))
	     (generate-diagram-line (diagram-flavor markup-structure &rest diagram-inits)
	       (funcall line-sink
			(write-diagram-to-line nil (apply #'make-instance diagram-flavor
							  :markup-structure markup-structure
							  diagram-inits)))))
      (for-record record))))

(defun 1write-diagram-to-line0 (old-line line-diagram)
  (ignore old-line)				;---
  (let ((length (cli::flat-operation
		  #'write-diagram-to-line-1 line-diagram)))
    (let ((line (zwei:create-line 'sys:art-string length ())))
      (setf (zwei:line-length line) 0)
      (with-output-to-string (stream line)
	(write-diagram-to-line-1 line-diagram stream))
      (setf (cl:getf (zwei:line-plist line) :diagram) line-diagram)
      ;;---needs something like sage-structure-representation-for-zwei-interval here
      line)))

(defun 1run-in-marker-string 0(markup-structure qualifier)
  (when (sage::maintains-connection-flags-p markup-structure)
    (multiple-value-bind (prev next)
	(cond ((eql qualifier :header)
	       (values
		 (if (sage::connected-to-previous-line markup-structure nil) "^" " ")
		 (if (sage::connected-to-next-line markup-structure nil)     "v" " ")))
	      ((eql qualifier :trailer)
	       (values
		 (if (sage::connected-to-previous-line markup-structure t)   "^" " ")
		 (if (sage::connected-to-next-line markup-structure t)       "v" " ")))
	      ((eql qualifier :combined)
	       (values
		 (if (sage::connected-to-previous-line markup-structure nil) "^" " ")
		 (if (sage::connected-to-next-line markup-structure t)       "v" " "))))
      (format nil "{~c ~c}" prev next))))

;; The encoding here is never seen by the user, only by
;; the source-compare line comparator.  The text
;; encoding has to contain just enough stuff that
;; source-compare's text comparison can tell when
;; things are different.  Don't be faked out by the
;; resemblance of the BE stuff to the VC encodings.
(defgeneric 1write-diagram-to-line-10 (line-diagram stream)
  (:method (zwei:markup-line-diagram-mixin :default)
   ;; If they're not eq, they will print differently, hence compare as different
   (write self :stream stream))
  
  (:method (zwei:record-header-line)
   (format stream "BR ~a" (zwei:cached-title-string self)))
  
  (:method (zwei:record-trailer-line)
   (format stream "ER ~a" (zwei:cached-title-string self)))
  
  (:method (zwei:environment-header-line)
   (let ((envr zwei:markup-structure))
     (let ((b/e (if zwei:trailer-p "E" "B"))
	   (e/f (etypecase envr
		  (sage-envr "E")
		  (record-field "F")
		  (fake-record-field "F")
		  (sage-command-contents-field "CC")
		  (editable-sage-command "EC"))))
       (format stream "~a~a ~a ~a[~{~a~}]"
	       b/e e/f
	       (send envr :envr-name)
	       (run-in-marker-string envr (if zwei:trailer-p :trailer :header))
	       (send-if-handles envr :envr-mods)))))
  
  (:method (zwei:reference-diagram-line)
   (let ((ref zwei:markup-structure))
     (format stream "LINK ~a ~a ~a ~a ~a"
	     (sage-reference-decode-view ref)
	     (sage-reference-appearance ref)
	     (sage-reference-booleans ref)
	     (sage-reference-record-group ref)
	     (run-in-marker-string ref :combined))))
  
  (:method (zwei:command-diagram-line)
   (let ((cmd zwei:markup-structure))
     (format stream "CMD ~a ~a ~a"
	     (send cmd :command-name) (send cmd :parameter)
	     (run-in-marker-string cmd :combined))))

  (:method (zwei:editable-command-header-line)
   (let ((cmd zwei:markup-structure))
     (write-string 
       (with-output-to-string (s)
	 (format s "edCMD ")
	 (sage::format-sage-command-for-title cmd s :for-source-compare t)
	 (format s " ~a" (run-in-marker-string cmd :combined)))
       stream)))

  (:method (zwei:macro-call-diagram-line)
   (let ((macro zwei:markup-structure))
     (format stream "MACRO ~a ~a ~a"
	     (send macro :macro-name)
	     (send macro :macro-args)
	     (run-in-marker-string macro :combined))))
  
  (:method (zwei:picture-diagram-line)
   (let ((pict zwei:markup-structure))
     (format stream "PICT ~a ~a ~a ~a"
	     (sage-picture-type pict)
	     (sage-picture-file-name pict)
	     (sage-picture-name pict)
	     (run-in-marker-string pict :combined))))
  
  (:method (zwei:example-record-marker-diagram-line)
   (let ((marker zwei:markup-structure))
     (format stream "EXAMPLE ~a ~a ~a"
	     (example-record-marker-type marker)
	     (example-record-marker-encoding marker)
	     (run-in-marker-string marker :combined))))

  ;; I don't think anything actually makes these.
  (:method (zwei:item-trailer-line)
   (ignore stream) (error "NYI---"))
  (:method (zwei:markup-drawing-line)
   (ignore stream) (error "NYI---"))

  )
