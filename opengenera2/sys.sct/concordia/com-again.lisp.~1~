;;; -*- Mode: LISP; Syntax: Common-lisp; Package: ZWEI; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defcom D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")com-again0 "Repeat last minibuffer command, without confirming arguments." ()
  (let ((elt (send *mini-buffer-history* :yank nil)))
    (do-it-again elt)))

(defcom 1com-reverse-again0 "Repeat last minibuffer without confirming arguments negating its numeric argument." ()
  (let* ((elt (send *mini-buffer-history* :yank nil))
	 (first (first (car elt)))
	 (second (second (car elt)))
	 (third (- (third (car elt))))		;rebuild list with negative numeric arg
	 (rest (cdddr (car elt))))
    ;; We can't do this because it actually negates the numeric arg in the history.
    ;(setf (third (car elt)) (- (abs (third (car elt)))))	;negate numeric arg
    (do-it-again (cons (list* first second third rest) (cdr elt)))))

(defun 1do-it-again 0(elt)
  ;; Echo the command, in italic, so you have some idea what the heck you did
  (unless (send *typein-window* ':send-if-handles ':prepare-for-typeout)
    ;; Must do this preparation if we are to use *typein-window* as stream
    (send *typein-window* ':fresh-line))
  (scl:with-character-face (:italic *typein-window*)
    (send *mini-buffer-history* :print-element elt *typein-window*))
  (sage::dynamic-flet 
    ((typein-line-accept
       (type &rest options)
       ;; maybe turn into accept-from-string
       (si:with-rem-keywords (some-options options '(:initial-input :initial-position
						     :initial-complete))
	 (if *mini-buffer-repeated-command*
	     (let ((string (pop *mini-buffer-repeated-command*)))
	       (scl:apply #'scl:accept-from-string type string some-options))
	     (sage::lexpr-continue type options))))
     (edit-in-mini-buffer
       (&optional (comtab *mini-buffer-comtab*)
		  initial-contents initial-char-pos mode-line-list)
       ;; maybe just return the string as interval
       (if *mini-buffer-repeated-command*
	   (let ((string (pop *mini-buffer-repeated-command*)))
	     (let ((interval (create-interval)))
	       (insert (interval-first-bp interval) string)
	       (values nil nil interval)))
	   (sage::continue comtab initial-contents initial-char-pos mode-line-list))))
    ;; redo the command, as if you clicked on its presentation after c-m-0 c-m-Y
    (condition-case ()
	 (re-execute-mini-buffer-command-from-mouse
	   (send *mini-buffer-history* :history-and-element elt))
       (dw:input-not-of-required-type (beep)
				      dis-none))))

(set-comtab *standard-comtab* '(#\s-Space com-again))
(set-comtab *standard-comtab* '(#\s-BackSpace com-reverse-again))
