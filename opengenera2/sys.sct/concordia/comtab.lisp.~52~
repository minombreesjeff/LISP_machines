;;; -*- Base: 10; Mode: LISP; Package: NSAGE; Syntax: Common-lisp; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Put all (most?) of the set-comtab stuff into this file, which is loaded
;;; after the commands are defined.

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")make-command-name0 (command-name)
  (string-capitalize-words
    (let ((name (string command-name)))
      (let ((skip (or (mismatch "COM-WT-" name) 0)))
	(substring name skip)))))

(defun 1make-command-alist0 (command-names)
  (mapcar (lambda (command-name)
	    (multiple-value-bind (name command)
		(if (consp command-name)
		    (values (first command-name) (second command-name))
		    (values (make-command-name command-name) command-name))
	      (unless (get command 'zwei:command-name)
		(warn "~s (~a) is not a defined command.  It may cause trouble if it is~@
			still undefined when a user attempts it."
		      command name))
	      (cons name command)))
	  command-names))

(defun 1make-menu-command0 (commands)
  (zwei:make-menu-command (make-command-alist commands)
			  'choose-menu-command))

;; This turd is because Zmacs Add Patch Changed Definitions always thinks
;; a zwei:set-comtab form is not a definition but part of a neighboring section.
;; So, make something that starts with "DEF" to gain its cooperation.
(defmacro 1define-comtab0 (comtab &rest things)
  `(zwei:set-comtab ,comtab ,@things))

(define-comtab 1*wt-comtab*
0	       `(#\mouse-Right
		 ,(make-menu-command
		    '(com-wt-update-arglist-field
		       com-wt-add-record-field
		       com-wt-edit-record
		       com-wt-show-links-to-record
		       com-wt-install-record
		       com-wt-check-spelling-of-record
		       zwei:com-change-typein-style
		       zwei:com-change-style-region
		       zwei:com-uppercase-region
		       zwei:com-lowercase-region
		       com-wt-show-records-in-buffer
		       zwei:com-list-buffers
		       zwei:com-kill-or-save-buffers
		       zwei:com-split-screen
		       ))
		 #\s-A com-wt-beginning-of-record
		 #\s-E com-wt-end-of-record
		 #\s-H com-wt-mark-record
		 #\s-. com-wt-edit-record
		 #\s-P com-wt-preview-record
		 #\s-L com-wt-make-Language-form
		 #\s-M com-wt-create-markup
		 #\s-^ com-wt-remove-markup
		 #\s-K com-wt-kill-environment
		 #\s-F com-wt-forward-environment
		 #\s-B com-wt-backward-environment
		 #\s-\( com-wt-beginning-of-environment
		 #\s-\) com-wt-end-of-environment
		 ;; #\Tab com-wt-insert-tab		;insert tab-to-tab-stop
		 #\s-W com-wt-what-record-am-I
		 #\s-I com-wt-insert-multilevel-index-entry
		 #\m-@ com-wt-mark-whole-word
		 #\m-Q com-wt-fill-paragraph
		 #\s-Tab com-wt-insert-tab-to-tab-stop
		 #\s-_ com-wt-insert-em-dash 
		 #\s-= com-wt-insert-collect-centering	;@=
		 #\s-> com-wt-insert-collect-right-flushing	;@>
		 #\s-Help com-wt-show-help
		 #\s-S com-wt-find-markup-string
		 #\s-R com-wt-reverse-find-markup-string)
  (make-command-alist 
    '(zwei:com-set-lisp-syntax
       com-wt-edit-record
       com-wt-edit-installed-record
       com-wt-create-record
       com-wt-create-link-and-record
       com-wt-install-record
       com-wt-check-spelling-of-record
       com-wt-set-lookup-mode
       com-wt-copy-record
       com-wt-add-record-field
       com-wt-update-arglist-field
       com-wt-remove-record-from-buffer
       com-wt-kill-record
       com-wt-rename-record
       com-wt-change-record-type
       com-wt-insert-record
       com-wt-change-environment
       com-wt-query-change-environments
       com-wt-parse-and-replace-region
       com-wt-exchange-records
       com-wt-show-records-in-buffer
       com-wt-count-records-in-buffer
       com-wt-reorder-records
       com-wt-move-records-among-buffers
       com-wt-sort-records
       com-wt-sort-links-in-record
       com-wt-collect-record-name
       com-wt-collect-all-record-names
       com-wt-clear-record-name-collection
       com-wt-create-link
       com-wt-edit-link
       com-wt-show-links-from-record
       com-wt-show-links-to-record
       com-wt-graph-links-from-record
       com-wt-create-environment
       com-wt-create-command
       com-wt-show-outline
       zwei:com-change-all-record-views
       zwei:com-change-record-view
       com-wt-create-picture
       com-wt-recompile-all-pictures-of-buffer
       com-wt-insert-graphic-editor-drawing
       com-wt-create-example-record-marker
       com-wt-test-example
       com-wt-insert-whole-index com-wt-insert-whole-toc
       com-wt-show-modification-history
       com-wt-collect-index-entries-of-topic
       com-wt-collect-index-entries-of-tag-table
       com-wt-collect-index-entries-of-buffer
       zwei:com-wt-convert-flat-text-to-record
       com-wt-add-patch-changed-records
       com-wt-add-patch-changed-records-of-buffer
       zwei:com-wt-clear-record-name-prefix
       zwei:com-wt-clear-record-name-suffix
       com-wt-list-changed-records
       com-wt-list-changed-records-of-buffer
       com-wt-kill-whole-sentence
       com-wt-mark-whole-sentence
       com-wt-find-markup
       com-wt-reverse-find-markup
       com-wt-find-link
       com-wt-reverse-find-link
       com-wt-set-buffer-disposition
       zwei:com-wt-set-record-name-prefix
       zwei:com-wt-set-record-name-suffix
       com-wt-break-file-lock
       com-wt-source-compare
       com-wt-find-orphan-records
       com-wt-find-orphan-records-in-buffer
       com-wt-find-orphan-records-in-tag-table
       com-wt-remove-run-in-markers
       com-wt-change-configuration
       com-wt-make-active-text
       )))

(define-comtab 1*wt-comtab*0 ()
  (make-command-alist '(zwei:com-wt-convert-flat-text-to-record)))

(defmacro 1define-editor-menu-commands0 (symbol-to-set-to-commands symbol-to-set-to-nil
				       &body body)
  `(progn (setq ,symbol-to-set-to-nil ()
		,symbol-to-set-to-commands ',(copy-tree body))
	  (postponably-prepare-editor-menu-commands)))

;;;  Create Record (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")name type0 :new 2pathname0 (use region if there)
;;;  Create Reference (to) 2name type0 :type {2crossref0,2include0}
;;;  Show Links From Record 2name type0 :level {2number0,2All0}  (like Find Table of Contents)
;;;  Show Links To Record 2name type0 :level {2number0,2All0}  (like List Callers)
;;;  Show Field 2field0 (e.g. keywords, no equivalent, used to just be there)
;;;  ...also Sage Commands, like tab-to-tab-stop or PageHeading or something
;;;  Show formatted record 2name type0 :level 2number0 :device 2printer
0;;;  Show formatted region :level 2number0 :level 2number0 :device 2printer

0(define-editor-menu-commands 1*editor-menu-commands*
0			     *prepared-editor-menu-commands*
  ("Buffers"
   ("Beginning" ZWEI:COM-GOTO-BEGINNING)
   ("End" ZWEI:COM-GOTO-END)
   ("Next Screen" ZWEI:COM-NEXT-SCREEN)
   ("Previous Screen" ZWEI:COM-PREVIOUS-SCREEN)
   ("Mark" ZWEI:COM-MARK-WHOLE)
   ("Find File" zwei:com-find-file)
   ("Save" ZWEI:COM-SAVE-FILE)
   ("Select" ZWEI:COM-SELECT-BUFFER)
   ("Select Previous" ZWEI:COM-SELECT-PREVIOUS-BUFFER)
   ("Set Buffer Disposition" com-wt-set-buffer-disposition)
   ("Find Orphan Records" com-wt-find-orphan-records-in-buffer)
;; ("Hardcopy" zwei:com-hardcopy-buffer)	;---certainly not the unstructured one
   )
  ("Topics"					;[a record and all its internal levels]
   ("Show Outline" com-wt-show-outline)
;;   ("Edit Outline" nil)				;--- [change the view, maybe use different editor]
;;   ("Show Final Form" nil)			;--- [formatted for device?]
;;   ("Add to Database" nil)			;---
;;   ("Check Spelling" nil)			;---
   ("Hardcopy" com-wt-preview-record :control-u)
   )
  ("Links"
   com-wt-show-links-from-record
   com-wt-show-links-to-record
   com-wt-graph-links-from-record
   ("Create Link" com-wt-create-link)	; [general form, prompts for args]
   ("Create Link and Record" com-wt-create-link-and-record)
   ("Edit Link" com-wt-edit-link)
   ("Find Link" com-wt-find-link)
   ("Reverse Find Link" com-wt-reverse-find-link)
;  ("Delete Link" nil)			;--- use c-D
   )
  ("Records"
   ("Beginning" com-wt-beginning-of-record)
   ("End" com-wt-end-of-record)
   ("Mark" com-wt-mark-record)
   ("Create" com-wt-create-record)
   ("Edit" com-wt-edit-record)
   ;;("Edit Installed" com-wt-edit-installed-record)
   ("Kill" com-wt-kill-record)
   ("Add Record Field" com-wt-add-record-field)
   ("Rename" com-wt-rename-record)
;;   ("Show Status" nil)				;---
   ("Preview" com-wt-preview-record)
   ("Check Spelling" com-wt-check-spelling-of-record)
;   ("Add to Database" nil)			;---
;   ("Remove from Database" nil)			;---
   ("Show Records in Buffer" com-wt-show-records-in-buffer)
   ("Collect Record Name" com-wt-collect-record-name)
   ("Collect All Record Names" com-wt-collect-all-record-names)
   ("Reorder Records" com-wt-reorder-records)
   ("Move Records Among Buffers" com-wt-move-records-among-buffers)
   ("Add Patch Changed Records" com-wt-add-patch-changed-records)
   ("List Changed Records" com-wt-list-changed-records)
   )
  ("Markup"
   ("Beginning" com-wt-beginning-of-environment)
   ("End" com-wt-end-of-environment)
   ("Create" com-wt-create-markup)
;  ("Create Command" com-wt-create-command)
   ("Make Language Form" com-wt-make-Language-form)
   ("Remove Markup" com-wt-remove-markup)
   ("Change Environment" com-wt-change-environment)
   ("Kill" com-wt-kill-environment)
   ("Find Markup" com-wt-find-markup)
   ("Reverse Find Markup" com-wt-reverse-find-markup)
   ("Find Markup String" com-wt-find-markup-string)
   ("Reverse Find Markup String" com-wt-reverse-find-markup-string)
;;   ("Show Definition" nil)			; ---[attribute/value stuff]
   )
  ("Kill History"
   ("Yank From Kill History" ZWEI:COM-YANK)
   ("Yank Previous" ZWEI:COM-YANK-POP)
   ("Show Kill History" zwei:com-yank 0)
   )
  ("Marked Regions" 
   ("Fill" ZWEI:COM-FILL-REGION)
   ("Interchange" ZWEI:COM-EXCHANGE-REGIONS)
   ("Copy" ZWEI:COM-SAVE-REGION)
   ("Kill" ZWEI:COM-KILL-REGION)
   ("Hardcopy" zwei:com-hardcopy-region)
   ("Sort Lines" zwei:com-sort-lines)
   ("Sort Paragraphs" zwei:com-sort-paragraphs)
   )
  ("Paragraphs"
   ("Beginning" ZWEI:COM-BACKWARD-PARAGRAPH)
   ("End" ZWEI:COM-FORWARD-PARAGRAPH)
   ("Mark" ZWEI:COM-MARK-PARAGRAPH)
   ("Fill" COM-WT-FILL-PARAGRAPH)
   )
  ("Sentences"
   ("Beginning" ZWEI:COM-BACKWARD-SENTENCE)
   ("End" ZWEI:COM-FORWARD-SENTENCE)
   ("Kill Forward" ZWEI:COM-KILL-SENTENCE)
   ("Kill Backward" ZWEI:COM-BACKWARD-KILL-SENTENCE)
   ("Kill" com-wt-kill-whole-sentence)		;; what key?
   ("Mark" com-wt-mark-whole-sentence)		;; what key?
   )
  ("Words"
   ("Forward" ZWEI:COM-FORWARD-WORD)
   ("Backward" ZWEI:COM-BACKWARD-WORD)
   ("Delete Forward" ZWEI:COM-KILL-WORD)
   ("Delete Backward" ZWEI:COM-BACKWARD-KILL-WORD)
   ("Capitalize" ZWEI:COM-UPPERCASE-INITIAL)
   ("Uppercase" ZWEI:COM-UPPERCASE-WORD)
   ("Lowercase" ZWEI:COM-LOWERCASE-WORD)
   ("Mark" com-wt-mark-whole-word)
   ("Interchange" ZWEI:COM-EXCHANGE-WORDS)
   )
  ("Lines"
   ("Beginning" ZWEI:COM-BEGINNING-OF-LINE)
   ("End" ZWEI:COM-END-OF-LINE)
   ("Up" ZWEI:COM-UP-REAL-LINE)
   ("Down" ZWEI:COM-DOWN-REAL-LINE)
   ("Kill Forward" ZWEI:COM-KILL-LINE)
   ("Kill Backward" ZWEI:COM-CLEAR)
   ("Open" ZWEI:COM-MAKE-ROOM)
   ("Interchange" ZWEI:COM-EXCHANGE-LINES)
   )
  ("Characters"
   ("Forward" zwei:com-forward)
   ("Backward" zwei:com-backward)
   ("Search Forward" ZWEI:COM-INCREMENTAL-SEARCH)
   ("Search Backward" ZWEI:COM-REVERSE-INCREMENTAL-SEARCH)
   ("Interchange" ZWEI:COM-EXCHANGE-CHARACTERS)
   )
  ("Character Style"
   zwei:com-change-region-to-italic
   zwei:com-change-region-to-bold
   zwei:com-change-region-to-regular
   zwei:com-show-character-styles
   zwei:com-change-typein-style
   )
  )

;; Turn off the worse than useless lisp comment commands
;; ---Comment-out-region could be useful, but s-M Comment works fine anyway.
(zwei:set-comtab *wt-comtab*
		 (mapcan (lambda (c) (list c :undefined))
			 '(#\c-\; #\m-\; #\m-N #\m-P #\m-Line #\c-m-\; 
			   ;; c-X \;  and c-X c-\;
			   )))


(zwei:set-comtab zwei:*zmacs-comtab*
		 '(#\s-. com-wt-edit-record)
		 (make-command-alist '(zwei:com-concordia-mode)))

(define-editor-menu-commands 1*editor-menu-debugging-commands*
0			     *prepared-editor-menu-commands*
  ("Debugging"
   zwei:com-kill-everything
   zwei:com-show-record-structure
   zwei:com-show-node-structure
   zwei:com-step-through-nodes
   com-describe-copied-sage-interval
   com-insert-test-stuff
   com-run-tree-tests))
