;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: SAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(add-initialization "Set record-lookup function"
		    '(setq *record-for-lookup-finding-function* 'find-record-for-lookup-nwt)
		    ()
		    '*nwt-initializations*)

;;; Like *flavor-compile-trace* for auto-installation of edited records.
;;; Value is a list of lists, one for each instance of auto-installation.
;;; Each sublist has three elements: the record installed, the universal time,
;;; and a boolean indicating whether or not the auto-installation happened
;;; as a result of doing Show Documentation.
(defvar *record-installation-trace* nil)

(add-initialization "SAGE::*RECORD-INSTALLATION-TRACE*"
		    '(setq *record-installation-trace* nil)
		    '(:full-gc))

(defmethod D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(find-record-for-lookup-nwt record-group)0 (&key error-p loading-contents)
  (let ((record-lookup-mode
	  (if (and (eq *record-lookup-mode* ':edit-newest-record)
		   ;; Read a file into the editor only if we
		   ;; would have to go to the file system anyway
		   (not loading-contents))
	      ':normal
	      *record-lookup-mode*)))
    (labels ((find-newest-edited-record ()
	       (loop with highest-version = 0
		     with newest-record
		     for record in edited-records
		     as record-version = (doc-record-version-number record)
		     when ( record-version highest-version)
		       do (setq highest-version record-version)
			  (setq newest-record record)
		     finally (return (values newest-record highest-version))))
	     (use-published-record-as-standin-for-edited (newest-record highest-version)
	       (or 
		 ;; either the published record is much newer (consider the case
		 ;; of loading doc patches for weeks after randomly editing a sab file
		 (and published-record
		      (> (doc-record-version-number published-record)
			 highest-version))
		 ;; or the newest edited record is the same as the published record
		 ;; and hasn't been edited yet.
		 (and (null installed-record)
		      (not (null published-record))
		      ;; Don't go to the file-system to fill the published
		      ;; record when we already have an edited record
		      ;; in core.
		      (doc-record-filled published-record)
		      (= (doc-record-version-number published-record)
			 highest-version)
		      (not (doc-record-modified newest-record)))))
	     (find-newest-edited-record-and-install-it ()
	       (multiple-value-bind (newest-record highest-version)
		   (find-newest-edited-record)
		 (cond ((use-published-record-as-standin-for-edited
			  newest-record highest-version)
			;; We can use the published record as the installed record
			;; because the edited record hasn't yet been modified.
			;; We do this to avoid record cloning when the newest
			;; edited record is the same as the published record.
			(setq installed-record published-record)
			(setf (doc-record-installed installed-record) t))
		       ((or (null installed-record)
			    (doc-record-contents-bogus installed-record)
			    (> highest-version (doc-record-version-number
						 installed-record))
			    (not (member (doc-record-version-number installed-record)
					 edited-records
					 :key #'doc-record-version-number))
			    (and (doc-record-modified newest-record)
				 (not (doc-record-installed newest-record))))
			(install-edited-record-in-record-group newest-record)
			#+Ignore
			(push (list installed-record (time:get-universal-time)
				    loading-contents)
			      *record-installation-trace*))))
	       installed-record)
	     (installed-record-if-computed ()
	       ;; The "installed" flag is set only by installing a
	       ;; record from the editor.  Installed records without
	       ;; this flag must have computed contents, and we DO
	       ;; want to return those records.
	       (and installed-record
		    (not (doc-record-installed installed-record))
		    installed-record)))
      (let ((record
	      (ecase record-lookup-mode
		(:use-published-record
		  (or published-record
		      (and edited-records
			   (find-newest-edited-record-and-install-it))
		      (installed-record-if-computed)))
		(:normal
		  (cond (edited-records
			 (find-newest-edited-record-and-install-it))
			((installed-record-if-computed))	;singleton COND
			(published-record published-record)))
		(:edit-newest-record
		  ;; Read a file into the editor only if we
		  ;; would have to go to the file system anyway
		  (ensure-record-in-editor self)
		  (multiple-value-bind (newest-record highest-version)
		      (find-newest-edited-record)
		    (when newest-record
		      (cond ((use-published-record-as-standin-for-edited
			       newest-record highest-version)
			     (setq installed-record published-record)
			     (setf (doc-record-installed installed-record) t))
			    (t
			     (install-edited-record-in-record-group newest-record)
			     #+Ignore
			     (push (list installed-record
					 (time:get-universal-time)
					 loading-contents)
				   *record-installation-trace*)))
		      installed-record))))))
	(when (and (null record) error-p)
	  (signal 'lookup-record-not-found :record-group self))
	record))))

(defun warn-about-record-not-in-editing-set (record-group)
  (let ((record (or (record-group-installed-record record-group)
		    (create-record :record-group record-group
				   :topic (record-group-topic record-group)
				   :type (record-group-type record-group)))))
    (fill-doc-record-bogus-contents record :not-in-editing-set :installed)
    (setf (record-group-installed-record record-group) record)))

(defmethod (doc-record-computed-contents-list doc-record :not-in-editing-set)
	   (&optional raw-contents)
  (ignore raw-contents)
  ;; You're supposed to use with-sage-device here, but it seems unnecessary
  (making-sage-directives (stream)
    (terpri stream)
    (write-string (namespace-type-string record-group) stream)
    (write-string " " stream)
    (write-string (appropriate-title-rendering record-group 'no-formatting) stream)
    (write-string " is not in the current editing set." stream)))

(defmethod 1(install-edited-record-if-necessary record-group)0 ()
  (find-record-for-lookup-nwt self))

;;; This is called by 1(flush-record-nodes-from-registry markup-buffer)0 
;;; and 1(:revert file-markup-buffer)0.
(defun 1remove-edited-record0 (edited-record)
  (let ((record-group (doc-record-record-group edited-record)))
    ;; I wish there were a "deletef" in the cl -f sense.
    (setf (record-group-edited-records record-group)
	  (delete edited-record (record-group-edited-records record-group)))))

ddex::
(define-doc-ex-command-and-documentation
  (1com-set-lookup-mode
0    :documentation "Sets the lookup mode to \"reader\" or \"writer\" for the current viewer.")
  ((mode '(alist-member :alist
			(("Normal" :value :normal
			  :documentation "Use newest edited records, else published.")
			 ("Use Published Record"
			  :value :use-published-record
			  :documentation "Use published records exclusively.")
			 ("Edit Newest Record"
			  :value :edit-newest-record
			  :documentation "Cause the newest version of the sab file containing
this record to be read into the editor.")))
	 :default sage::*record-lookup-mode*))
  (setf (send current-viewing-context :record-lookup-mode) mode)
  (setq nsage::*record-lookup-mode* mode)
  (send viewer-pane :reset-context current-viewing-context))
