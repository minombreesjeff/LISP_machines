;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SCT; Base: 10; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmethod (:kludge-load sage-module) (system-op &rest keys
				       &key reload never-load &allow-other-keys)
  (ignore system-op)
  (unless never-load
    ;; We don't use DEFAULT-LOAD because we need to use the source files,
    ;; not the product files...  That's why it's a "kludge load"
    (let* ((ins (loop for input-file in (sct:collect-module-inputs-and-outputs self :input)
		      when (and (not inhibit-loading)
				(or reload
				    (file-newer-than-installed-p *system* input-file self)))
			collect input-file)))
      (make-plan self *system*
		 :inputs ins
		 :default-input-type (source-file-type-default self)
		 :driving-function
		   #'(named-lambda sage-kludge-load-driver
				   (sar sab ignore &rest ignore)
		       (ignore sab)
		       (nsage::parse-and-install-records sar))
		 :documentation
		   #'(named-lambda sage-kludge-load-documentation
				   (sar sab ignore &rest ignore)
		       (ignore sab)
		       (format standard-output "~&Sage kludge load~[~;ing~;ed~] file ~A"
			 *system-pass* sar))))))

;; Just type (KLUDGE-LOAD-SYSTEM 'mumble)
(define-system-operation :kludge-load
  nil nil
  :arglist
    (system-name &rest keys
     &key (query :confirm) silent batch
	  reload (include-components t) no-warn
	  (version :released) (component-version nil)
     &allow-other-keys)
  :subsystems-ok nil
  :check-dependents t
  :encache :source
  :class :normal
  :body-wrapper
    `(let ((tv:more-processing-global-enable (if (or no-warn batch)
						 nil tv:more-processing-global-enable)))
       (si:inhibit-lengthy-background-updates
	 (si:sorting-modified-aarrays-if si:*enable-aarray-sorting-after-loads*
	   ,@BODY))))
