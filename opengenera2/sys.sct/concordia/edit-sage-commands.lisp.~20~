;;; -*- Mode: LISP; Syntax: Common-lisp; Package: SAGE; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-editable-sage-command-generic D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")format-sage-command-for-title
0				      (stream &key for-source-compare)
  (write-string (directive-pretty-name command-name) stream)
  (multiple-value-bind (ignore ignore ignore ignore ignore ignore ignore all)
      (sage-command-arglist-pattern self)
    (cond (all
	   (write-char #\Space stream)
	   (let ((string (filtered-string-from-contents-list (directive-inferiors self))))
	     (when string
	       (write-string string stream))))
	  (t
	   (loop for inf in (directive-inferiors self)
		 do
	     (format-sage-command-arg-for-title
	       inf stream :for-source-compare for-source-compare))))))

(define-editable-sage-command-method 1(format-sage-command-for-title IndexSecondary)0 (stream)
  (destructuring-bind (primary secondary)
      (directive-inferiors self)
    (format stream "~(~A~) " command-name)
    (flet ((do-it (field)
	     (let ((string (filtered-string-from-contents-list
			     (sage-command-contents-field-contents field))))
	       (when string
		 (write-string string stream)))))
      (do-it primary)
      (write-string " | " stream)
      (do-it secondary))))

(define-presentation-type 1sage-command-arg-boolean0 ()
   :printer ((thing stream)
	     (destructuring-bind (choice field node) thing
	       (ignore field node)
	       #+Ignore
	       (format stream "of ~:(~A~) to " (sage-command-arg-field-field-name field))
	       (format stream "~:[No~;Yes~]" choice))))

(define-presentation-type 1sage-command-arg-other0 () )

(define-presentation-type 1sage-command-any-key0 () )

(defmethod 1(present-sage-command-arg-field sage-command-arg-field)
0	   (stream node)
  (with-character-style ('(:fix :roman :normal) stream :bind-line-height t)
    (format stream "~:(~A~): " field-name)
    (case type
      ((:boolean boolean :none)			;boolean?
       (flet ((present-boolean (choice stream)
		(dw:with-output-as-presentation (:stream stream
						 :object `(,choice ,self ,node)
						 :type 'sage-command-arg-boolean)
		  (format stream "~v~:[No~;Yes~]~"
			  (if (or (eq choice value)
				  (and choice (eq value :none))) ':bold ()) choice))))
	 (format-textual-list '(t nil) #'present-boolean :stream stream :separator "  ")))
      (otherwise
	(dw:with-output-as-presentation (:stream stream
					 :object `(,self ,node)
					 :type 'sage-command-arg-other)
	  (let ((ptype (sage-typepresentation-type type)))
	    (if (or value value-p)
		(present value ptype :stream stream)
		(with-character-face (:italic stream :bind-line-height t)
		  (dw:describe-presentation-type ptype stream)))))))))

(defmethod 1(present-sage-command-arg-field sage-command-any-keys-field)0 (stream node)
  (with-character-style ('(:fix :roman :normal) stream :bind-line-height t)
    (case keyword-name
      (:new-one 
	(dw:with-output-as-presentation (:stream stream
					 :object `(,self ,node)
					 :type 'sage-command-any-key)
	  (with-character-face (:italic stream :bind-line-height t)
	    (let ((any-keys-arg
		    (string-right-trim
		      '(#\s)
		      (string-downcase
			(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Find out what the name of this argument is.
			;; Is this really the only way to do this?
0			(loop for sublist on (dd-arglist
					       (gethash (send superior :command-name)
							*formatter-commands*))
			      when (eq (car sublist) '&any-keys)
				return (caadr sublist))))))
	      (format stream "Click here to add a new ~A" any-keys-arg)))))
      (otherwise 
	(format stream "~:(~A~): " keyword-name)
	(dw:with-output-as-presentation (:stream stream
					 :object `(,self ,node)
					 :type 'sage-command-arg-other)
	  (let ((ptype (sage-typepresentation-type type)))
	    (if value
		(present value ptype :stream stream)
		(with-character-face (:italic stream :bind-line-height t)
		  (dw:describe-presentation-type ptype stream)))))))))

(zwei:define-presentation-to-editor-command-translator
  1add-sage-command-any-keys-new-keyword
0  (sage-command-any-key "New clause" *wt-comtab* :gesture :left)
  (object)
  (destructuring-bind (field node) object
    `(add-sage-command-new-keyword ,field ,node)))

(zwei:define-presentation-to-editor-command-translator
  1remove-sage-command-any-keys-keyword
0  (sage-command-arg-other "Remove clause" *wt-comtab* :gesture :delete
			  :tester ((object)
				   (destructuring-bind (field node) object
				     (ignore node)
				     (typep field 'sage-command-any-keys-field))))
  (object)
  (destructuring-bind (field node) object
    `(remove-sage-command-any-keys-keyword ,field ,node)))

(zwei:define-presentation-to-editor-command-translator
  1remove-sage-command-any-keys-contents-list-keyword
0  (zwei:sage-command-any-keys-contents-list-field-structure-node
    "Remove clause" *wt-comtab* :gesture :delete
    :documentation "Remove clause")
  (node)
  (let ((field (zwei:markup-structure-node-markup-structure node)))
    `(remove-sage-command-any-keys-keyword ,field ,node)))

(zwei:define-presentation-to-editor-command-translator
  1rename-sage-command-any-keys-contents-list-keyword
0  (zwei:sage-command-any-keys-contents-list-field-structure-node
    "Rename clause" *wt-comtab* :gesture :describe
    :documentation "Edit this in the minibuffer")
  (node)
  (let ((field (zwei:markup-structure-node-markup-structure node)))
    `(rename-sage-command-any-keys-keyword ,field ,node)))

(defmethod 1(rename-sage-command-any-keys-keyword sage-command-any-keys-contents-list-field)
0	   (node &key edit-existing)
  (let* ((initial-input (and edit-existing keyword-name))
	 (new-value
	   (zwei:typein-line-accept 'sage-variable
				    :prompt "New clause"
				    :default keyword-name
				    :initial-input initial-input
				    :initial-position (and initial-input
							   (length initial-input)))))
    (unless (eql keyword-name new-value)
      (zwei:mung-node node)
      (setq keyword-name new-value)
      (zwei:diagram-lines-need-redisplay node))))

(defun 1common-remove-any-keys-keyword0 (self node superior)
  (let ((zwei-superior (zwei:node-superior node)))
    (zwei:delete-interval (zwei:node-first-bp node)	;do this to move bps out of interval
			  (zwei:forward-char (zwei:node-last-bp node)))
    (setf (zwei:node-inferiors zwei-superior)
	  (delete node (zwei:node-inferiors zwei-superior)))
    (setf (directive-inferiors superior)
	  (delete self (directive-inferiors superior)))
    (zwei:mung-node zwei-superior)
    (zwei:diagram-lines-need-redisplay zwei-superior)
    (zwei:redo-node-links zwei-superior)))

(defmethod 1(remove-sage-command-any-keys-keyword sage-command-any-keys-field)0 (node)
  (common-remove-any-keys-keyword self node superior))

(defmethod 1(remove-sage-command-any-keys-keyword sage-command-any-keys-contents-list-field)
0	   (node)
  (common-remove-any-keys-keyword self node superior))

(defmethod 1(add-sage-command-new-keyword sage-command-any-keys-field)0 (node)
  (let ((new-keyword-name (zwei:typein-line-accept 'sage-variable :prompt "New clause")))
    (flet ((make-any-keys-field ()
	     (if (eq type :contents-list)
		 (let ((field
			 (make-sage-command-any-keys-contents-list-field
			   superior () new-keyword-name
			   field-name)))
		   (setf (directive-inferiors field) ())
		   field)
		 (make-sage-command-any-keys-field
		   superior new-keyword-name
		   type 
		   ()
		   field-name))))
      ;; assert unique keyword name
      (let* ((superior-zwei-node (zwei:node-superior node))
	     (new-field (make-any-keys-field))
	     (editor-node (zwei:markup-structure-editor-node new-field superior-zwei-node))
	     (zwei-clause-list (zwei:node-inferiors superior-zwei-node))
	     (sage-clause-list (directive-inferiors superior))
	     (new-clause-position (- (length sage-clause-list) 2)))
	(let ((existing-zwei-node
		(first
		  (member new-keyword-name zwei-clause-list
			  :test #'eq
			  :key #'(lambda (inferior)
				   (send-if-handles
				     (zwei:markup-structure-node-markup-structure inferior)
				     :envr-name))))))
	  (if existing-zwei-node
	      (if (zwei:typein-line-y-or-n-p "There is already a clause named ~a.  ~
                                              Do you want to replace it? " new-keyword-name)
		  (let ((existing-zwei-node-pos (position existing-zwei-node zwei-clause-list))
			;; If we really believe the zwei and sage lists always match, we
			;; could just find the position of one of the nodes and use it for
			;; both replacements
			(existing-sage-node-pos
			  (position new-keyword-name sage-clause-list
				    :test #'eq
				    :key #'(lambda (inferior)
					     (send-if-handles inferior :envr-name)))))
		    #+ignore(zwei:delete-interval	;delete the interval to move out bps
		      (zwei:node-first-bp existing-zwei-node)
		      (zwei:forward-char (zwei:node-last-bp existing-zwei-node)))
		    (replace zwei-clause-list (list editor-node)
			     :start1 existing-zwei-node-pos :end1 (1+ existing-zwei-node-pos))
		    (replace sage-clause-list (list new-field)
			     :start1 existing-sage-node-pos :end1 (1+ existing-sage-node-pos)))
		  (zwei:abort-current-command))
	      ;; Adding a new keyword
1	      0(setf (zwei:node-inferiors superior-zwei-node)	;Just in case
		    (delete editor-node zwei-clause-list))
	      (if (= (length sage-clause-list) 1)	;adding first real clause
		  (setf (zwei:node-inferiors superior-zwei-node)
			(cons editor-node zwei-clause-list)
			(directive-inferiors superior) (cons new-field sage-clause-list))
		  (loop as clause = (nth new-clause-position sage-clause-list)
			while (or (eq 'unassigned (send-if-handles clause :envr-name))
				  (eq 'otherwise (send-if-handles clause :envr-name)))
			do
		    (decf new-clause-position))
		  (let ((the-sage-cdr (nthcdr new-clause-position sage-clause-list))
			(the-zwei-cdr (nthcdr new-clause-position zwei-clause-list)))
		    (rplacd the-sage-cdr (cons new-field (cdr the-sage-cdr)))
		    (rplacd the-zwei-cdr (cons editor-node (cdr the-zwei-cdr)))))))
	(zwei:mung-node superior-zwei-node)
	(zwei:redo-node-links superior-zwei-node)
	(zwei:move-point (zwei:node-last-bp editor-node))	;Move point to new clause
	(zwei:move-mark (zwei:node-last-bp editor-node))	;Move mark also
	(zwei:diagram-lines-need-redisplay superior-zwei-node)))))

(zwei:define-presentation-to-editor-command-translator
  1set-sage-command-arg-field-boolean
0  (sage-command-arg-boolean "Change Value" *wt-comtab* :gesture :left)
  (object)
  (destructuring-bind (value field node)
      object
    `(set-sage-command-arg-field-boolean ,field ,value ,node)))

(defmethod 1(set-sage-command-arg-field-boolean sage-command-arg-field)0 (new-value node)
  (unless (eql value new-value)
    (zwei:mung-node node)
    (setq value new-value)
    (setq value-p value)
    (zwei:diagram-lines-need-redisplay node)))

(zwei:define-presentation-to-editor-command-translator
  1set-sage-command-arg-field-other
0  (sage-command-arg-other "Change value" *wt-comtab* :gesture :select
			  :documentation "Replace this in the minibuffer")
  (object)
  (destructuring-bind (field node) object
    `(set-sage-command-arg-field-other ,field ,node :edit-existing nil)))

(zwei:define-presentation-to-editor-command-translator
  1set-sage-command-arg-field-other-edit-existing
0  (sage-command-arg-other "Change value" *wt-comtab* :gesture :describe
			  :documentation "Edit this in the minibuffer")
  (object)
  (destructuring-bind (field node) object
    `(set-sage-command-arg-field-other ,field ,node :edit-existing t)))

(defmethod 1(set-sage-command-arg-field-other sage-command-arg-field)0 (node &key edit-existing)
  (let* ((ptype (sage-typepresentation-type type))
	 (initial-input (and edit-existing value (present-to-string value ptype)))
	 (new-value
	   (zwei:typein-line-accept ptype
				    :prompt (format nil "New value for ~A" field-name)
				    :default value
				    :initial-input initial-input
				    :initial-position (and initial-input
							   (length initial-input)))))
    (unless (eql value new-value)
      (zwei:mung-node node)
      (setq value new-value)
      (setq value-p t)
      (zwei:diagram-lines-need-redisplay node))))

(defvar 1*copying-whole-sage-command*0 ())

(defmethod 1(clone-contents-internal editable-sage-command)0 ()
  (let ((parameter (deduce-parameter self)))
    (make-sage-command command-name (clone-contents-internal parameter))))

(defmethod 1(deduce-parameter editable-sage-command)0 ()
  (multiple-value-bind (min-pos ignore ignore positionals keys any-keys list-of all)
      (sage-command-arglist-pattern self)
    (when all
      (return-from deduce-parameter 
	(ncons inferiors)))
    (let ((stuff
	    (loop for inf in inferiors
		  collect (deduce-sage-command-parameter inf)))
	  (reverse-parameters))
      (flet ((find-param (name)
	       (assoc name stuff)))
	(macrolet ((arg-type (arg-spec)
		     `(second ,arg-spec))
		   (arg-name (arg-spec)
		     `(first ,arg-spec)))
	  (loop for p in positionals
		as param = (find-param (arg-name p))
		unless (or param (zerop min-pos))
		  do (cerror "Proceed, ignoring the error"
			     "You did not specify the ~A parameter for ~A" (arg-name p) self)
		do
	    (push (second param) reverse-parameters))
	  (loop for key in keys
		as param = (find-param (arg-name key))
		do
	    (when param
	      (destructuring-bind (name value &optional type) param
		(if (eq type :none)
		    (when value (push `(,name :none) reverse-parameters))
		    (push `(,name ,value) reverse-parameters)))))
	  ;;; any-keys
	  (when any-keys
	    (let ((things nil)
		  (any-keys-name (first any-keys)))
	      (loop for thing in stuff
		    when (eq any-keys-name (first thing))
		      do (destructuring-bind (ignore keyword-name value type) thing
			   (ignore type)
			   (push `(,keyword-name ,value) things)))
	      (setq reverse-parameters (append things reverse-parameters))))

	  ;;; list-of
	  (when list-of
	    (let ((thing (find-param (first list-of))))
	      (assert (null reverse-parameters) () "There should be no collected parameters.")
	      (setq reverse-parameters (reverse (second thing)))))

	  (when all
	    (let ((thing (find-param (first all))))
	      (assert thing () "There was no thing")
	      (push (second thing) reverse-parameters)))))
      (nreverse reverse-parameters))))

(defmethod 1(deduce-sage-command-parameter sage-directive :default)0 ()
  (values nil :invalid))

(defmethod 1(deduce-sage-command-parameter sage-command-contents-field)0 ()
  (list field-name contents))

(defmethod 1(deduce-sage-command-parameter sage-command-arg-field)0 ()
  (let ((ptype (sage-typepresentation-type type)))
    (let ((val (if (eq type :none) (not (null value)) value)))
      (when (and value-p (dw::ptypep val ptype))
	(list field-name val type)))))

(defmethod 1(deduce-sage-command-parameter sage-command-any-keys-field)0 ()
  (let ((ptype (sage-typepresentation-type type)))
    (let ((val (if (eq type :none) (not (null value)) value)))
      (when (and value-p (dw::ptypep val ptype))
	(list field-name keyword-name val type)))))

(defmethod 1(deduce-sage-command-parameter sage-command-any-keys-contents-list-field)0 ()
  (list field-name keyword-name contents 'ignored))

(defmethod 1(copy-entire-sage-directive editable-sage-command)0 (into-interval)
  (let ((first-line (splice-new-line-into-end-of-interval into-interval))
	(*copying-whole-sage-command* t))
    (dolist (directive inferiors)
      (copy-entire-sage-directive directive into-interval))
    (let ((last-line (splice-new-line-into-end-of-interval into-interval)))
      (let ((representation (sage-structure-representation-for-zwei-interval self)))
	(setf (zwei:line-sage-structure-representation first-line)
	      (cons 'begin representation))
	(setf (zwei:line-sage-structure-representation last-line)
	      (cons 'end representation))))))

(defmethod 1(copy-entire-sage-directive sage-command-contents-field)0 (into-interval)
  (unless *copying-whole-sage-command*
    (zwei:barf "You can't copy one of these."))
  (let ((first-line (splice-new-line-into-end-of-interval into-interval)))
    (dolist (directive contents)
      (copy-entire-sage-directive directive into-interval))
    (let ((last-line (splice-new-line-into-end-of-interval into-interval)))
      (let ((representation (sage-structure-representation-for-zwei-interval self)))
	(setf (zwei:line-sage-structure-representation first-line)
	      (cons 'begin representation))
	(setf (zwei:line-sage-structure-representation last-line)
	      (cons 'end representation))))))

(defmethod 1(sage-structure-representation-for-zwei-interval sage-command-contents-field)0 ()
  (list 'regenerate-sage-command-contents-field field-name directive-flags))

(defmethod 1(sage-structure-representation-for-zwei-interval editable-sage-command)0 ()
  (list 'regenerate-editable-sage-command command-name directive-flags))

(defmethod 1(copy-entire-sage-directive sage-command-arg-field)0 (into-interval)
  (unless *copying-whole-sage-command*
    (zwei:barf "You can't copy one of these."))
  (splice-single-sage-structure-representation-line
    self 'regenerate-sage-command-arg-field into-interval))

(defmethod 1(sage-structure-representation-for-zwei-interval sage-command-arg-field)0 ()
  (list type value directive-flags field-name value-p))

(defmethod 1(copy-entire-sage-directive sage-command-any-keys-field)0 (into-interval)
  (unless *copying-whole-sage-command*
    (zwei:barf "You can't copy one of these."))
  (splice-single-sage-structure-representation-line
    self 'regenerate-sage-command-any-keys-field into-interval))

(defmethod 1(sage-structure-representation-for-zwei-interval sage-command-any-keys-field)0 ()
  (list keyword-name type value field-name value-p))

(defmethod 1(sage-structure-representation-for-zwei-interval sage-command-any-keys-contents-list-field)0 ()
  (list 'regenerate-sage-command-any-keys-contents-list-field keyword-name field-name))

(defmethod 1(zwei:markup-structure-node-views zwei:editable-command-structure-node)0 ()
  '(("One line" . :normal)
    ("Editable fields" . :expanded)))

(defmethod 1(zwei:change-markup-structure-node-view-to
	     zwei:editable-command-structure-node :before)
0	   (new-view)
  (when (and (neq new-view zwei:node-view)
	     (eq new-view ':normal))
    ;; when we're collapsing only!
    (zwei:move-nonboundary-bps-of-node-to self (zwei:node-first-bp self))))

;----------------------------------------------------------------


#||
(zwei:define-presentation-to-editor-command-translator
  1set-sage-command-arg-field-other-edit-existing0-1
  (sage-command-arg-other "Change value" *wt-comtab* :gesture :modify
			  :documentation "Edit this inline")
  (object &key presentation)
  (destructuring-bind (field node) object
    `(set-sage-command-arg-field-other-1 ,field ,node ,presentation)))

(defmethod 1(set-sage-command-arg-field-other-1 sage-command-arg-field)
0	   (node presentation)
  (let ((real-x (symbol-value-in-instance presentation 'dw::real-x))
	(real-y (symbol-value-in-instance presentation 'dw::real-y))
	(box (dw:presentation-displayed-box presentation))
	(window (zwei:window-sheet zwei:*window*)))
    (scl:with-character-style ('(:fix :roman :normal) window :bind-line-height t)
      (multiple-value-bind (left top right bottom)
	  (dw:box-edges box)
	(incf left real-x)
	(incf right real-x)
	(incf top real-y)
	(incf bottom real-y)
	(send window :draw-rectangle (- right left) (- bottom top) left top :erase)
	(zwei:diagram-lines-need-redisplay node)
	(multiple-value-bind (x y) (send window :read-cursorpos)
	  (unwind-protect
	      (progn
		(send window :set-cursorpos left top)
		(with-our-blinker-visible window
		  (let* ((ptype (sage-typepresentation-type type))
			 (initial-input (present-to-string value ptype))
			 (new-value
			   (with-input-editing-options ((:limited-full-rubout nil))
			     (with-input-editing-options
				 ((:initial-input
				    initial-input))
			       (flet ((help-displayer (continuation stream)
					(zwei:must-redisplay zwei:*window* zwei:dis-all)
					(funcall continuation stream)))
				 (let ((dw::*help-displayer* #'help-displayer))
				   (accept ptype :default value :prompt nil
					   :stream window)))))))
		    (setq value new-value))
		  ))
	    (send window :set-cursorpos x y)))))))
||#
