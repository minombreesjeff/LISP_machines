;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Background stream

(defvar tv:*background-lisp-interactor-screen-fraction* 3/4)

(defvar tv:*background-lisp-interactor-screen-utilization* :at-right
  ":at-right or :at-top")

(defun set-size-and-position-background-lisp-interactor
       (resource object &optional (superior tv:default-screen))
  (ignore resource)
  (tv:sheet-validate-deactivated-screen-array object)
  (ecase tv:*background-lisp-interactor-screen-utilization*
    (:at-right
      (multiple-value-bind (left top right bottom) (send superior :inside-edges)
	(ignore left)
	(send object :set-edges
	      (truncate 
		(+ left
		   (* (- 1 tv:*background-lisp-interactor-screen-fraction*)
		      (- right left))))
	      top right bottom)))
    (:at-top
      (send object :full-screen)
      (send object :set-size
	    nil
	    (truncate
	      (send superior :inside-height)
	      (/ 1 tv:*background-lisp-interactor-screen-fraction*)))))
  (setf (background-dynamic-lisp-interactor-background-window-was-exposed object)
	nil))

(tv:defwindow-resource tv:background-lisp-interactors ()
  :make-window (background-dynamic-lisp-interactor)
  :initializer set-size-and-position-background-lisp-interactor)

;;(defvar tv:default-background-stream 'tv:background-stream)  ;in LHARD
(defvar tv:background-interesting-windows nil)

(defvar tv:background-lisp-interactors)

(defvar tv:background-stream-which-operations)

(defun tv:background-stream (op &rest args)
  "This function is defaultly used as TERMINAL-IO for all processes.  If it gets called
at all, it turns TERMINAL-IO into a lisp listener window, and notifies the user that
the process wants the terminal."
  (declare (scl:inline process::process-debug-flag))
  (cond ((not (eq *terminal-io* tv:default-background-stream))
	 (apply *terminal-io* op args))
	((or (null tv:default-screen)
	     (ldb-test process::%%process-debug-no-background-interactor
		       (process::process-debug-flag *current-process*))
	     (null tv:mouse-sheet))
	 (apply tv:cold-load-stream op args))
	(t
	 (case op
	   ((:which-operations :operation-handled-p :send-if-handles)
	    ;; Get the which-operations once, but after the flavor has been compiled
	    (unless (variable-boundp tv:background-stream-which-operations)
	      (let ((wo (flavor::flavor-all-generics (flavor:find-flavor 'background-dynamic-lisp-interactor))))
		(dolist (own '(:beep :screen :exposed-p))
		  (pushnew own wo))
		(setq tv:background-stream-which-operations wo)))
	    (case op
	      (:which-operations tv:background-stream-which-operations)
	      (:operation-handled-p (member (first args) tv:background-stream-which-operations))
	      (:send-if-handles
		(when (member (first args) tv:background-stream-which-operations)
		  (cl:apply #'tv:background-stream args)))))
	   ;; If the stream hasn't changed since the process was started, do default action
	   (:beep
	     (apply tv:default-screen :beep args))
	   (:screen tv:default-screen)
	   (:exposed-p nil)
	   (otherwise
	     (setq *terminal-io* (tv:allocate-background-lisp-interactor))
	     (apply *terminal-io* op args))))))

(defun tv:allocate-background-lisp-interactor ()
  (declare (scl:inline process::process-debug-flag))
  (if (or (null *current-process*)
	  (ldb-test process::%%process-debug-no-background-interactor
		    (process::process-debug-flag *current-process*)))
      tv:cold-load-stream
      (let ((window (allocate-resource 'tv:background-lisp-interactors tv:default-screen)))
	(send window :set-label (string-append (process:process-name *current-process*)
					       " Background Stream"))
	(send window :clear-history)
	(send window :set-process *current-process*)
	(send window :activate)
	window)))

(defun si:process-flush-background-stream (&key (wait-until-seen t))
  (when (and (not (eq *terminal-io* tv:default-background-stream))
	     (typep *terminal-io* 'background-dynamic-lisp-interactor))
    (unwind-protect
	;; Allow aborting out of the :WAIT-UNTIL-SEEN and the UNWIND-PROTECT cleanup form
	;; that called PROCESS-FLUSH-BACKGROUND-STREAM, because we're going to do the
	;; rest of the cleanup in the cleanup forms just below anyway.  This makes it
	;; possible to kill or reset a process that is hung in this :WAIT-UNTIL-SEEN.
	(when (and wait-until-seen (process:safe-to-process-wait-p *current-process*))
	  (sys:with-aborts-enabled (unwind-protect)
	    (send-if-handles *terminal-io* :wait-until-seen)))
      (send *terminal-io* :deactivate)
      (deallocate-resource 'tv:background-lisp-interactors *terminal-io*)
      (setq *terminal-io* tv:default-background-stream)))
  nil)

(defun tv:find-interesting-window (&optional (console *console*))
  (multiple-value-bind (nil w)
      (tv:find-process-in-error console)
    (or w (find console tv:background-interesting-windows :key #'tv:sheet-console))))
