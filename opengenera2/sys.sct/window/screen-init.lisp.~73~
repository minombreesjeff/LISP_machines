;;;-*- Mode:LISP; Package:TV; Base:8 -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; These four variables should normally be 0.  They are here for the sake of
;;; users with non-perfect consoles.
(DEFCONST *SCREEN-LEFT-OFFSET* 0)
(DEFCONST *SCREEN-TOP-OFFSET* 0)
(DEFCONST *SCREEN-RIGHT-OFFSET* 0)
(DEFCONST *SCREEN-BOTTOM-OFFSET* 0)

(DEFVAR *CONSOLE-SCREENS* NIL)
(DEFVAR *OLD-CONSOLE-SCREENS* NIL)

(DEFVAR *WINDOW-SYSTEM-SHUT-DOWN* NIL)
(SYS:DEFVAR-RESETTABLE *WINDOW-INITIALIZATIONS-RUN* NIL)
(SYS:DEFVAR-RESETTABLE *WINDOW-DELAYED-PROCESSES* NIL)

(DEFCONST *CONSOLE-SCREENS-HAVE-WHO-LINE* T
  "T if main screens should have status lines.")

;;;

;This function is called from an initialization in COMETH
(DEFUN WINDOW-INITIALIZE ()
  (WHEN *MAIN-CONSOLE*
    (CONSOLE-ENSURE-MOUSE-AND-KEYBOARD *MAIN-CONSOLE*))	;Main console always needs a mouse.
  (WITHOUT-INTERRUPTS
    (SETQ WHO-LINE-SCREEN NIL			;Discard who line, in case no master console
	  NWATCH-WHO-LINE-SHEET NIL
	  WHO-LINE-RUN-STATE-SHEET NIL
	  WHO-LINE-FILE-STATE-SHEET NIL
	  WHO-LINE-DOCUMENTATION-WINDOW NIL)	;Leave WHO-LINE-RUN-LIGHT-LOC
    (WHEN (NOT *WINDOW-SYSTEM-SHUT-DOWN*)
      (HALT-SCREEN-MANAGER)
      (MAP-OVER-ALL-SHEETS #'SHEET-CLEAR-LOCKS-AND-RESOURCES)
      (SETQ *NUMBER-OF-SHEET-LOCK-WAITERS* 0 *NUMBER-OF-MOUSE-WAITERS* 0)
      (SETF PREPARED-SHEET NIL)
      (DOLIST (SCREEN (COPYLIST ALL-THE-SCREENS))
	(COND ((MEMQ SCREEN *CONSOLE-SCREENS*)
	       (LET ((MOUSE (SHEET-MOUSE SCREEN)))
		 (SETF (MOUSE-SHEET MOUSE) NIL)
		 (SETF (MOUSE-WINDOW MOUSE) NIL))
	       (DOLIST (INFERIOR (COPYLIST (SHEET-EXPOSED-INFERIORS SCREEN)))
		 (SEND INFERIOR :DEEXPOSE NIL))
	       (SEND SCREEN :DEEXPOSE NIL)
	       (SEND SCREEN :DEACTIVATE)
	       (SEND SCREEN :SET-CONSOLE NIL))
	      (T
	       (LET ((MOUSE (SHEET-MOUSE SCREEN)))
		 (WHEN MOUSE
		   (SETF (MOUSE-SHEET MOUSE) NIL)
		   (SETF (MOUSE-WINDOW MOUSE) NIL)))
	       (SEND SCREEN :DEEXPOSE NIL)))))
    (SETF *WINDOW-SYSTEM-SHUT-DOWN* NIL)
    (FLET ((REMOVE-OLD-SCREEN (SCREEN)
	     (SETF *OLD-CONSOLE-SCREENS* (DELQ SCREEN *OLD-CONSOLE-SCREENS*))
	     SCREEN)
	   (ADD-OLD-SCREEN (SCREEN)
	     (CL:PUSHNEW SCREEN *OLD-CONSOLE-SCREENS*)))
      (LET ((OLD-SCREENS (COPYLIST *CONSOLE-SCREENS*))
	    (NEW-SCREENS NIL))
	(FLET ((SCREEN-FOR-CONSOLE (CONSOLE MASTER-P)
		 (LET* ((FORMER-SCREEN (CONSOLE-SCREEN CONSOLE))
			(SCREEN (OR (LET ((SUBLIS (MEMQ FORMER-SCREEN OLD-SCREENS)))
				      (WHEN SUBLIS
					(SETF (FIRST SUBLIS) NIL)
					FORMER-SCREEN))
				    (WHEN (MEMQ FORMER-SCREEN *OLD-CONSOLE-SCREENS*)
				      (REMOVE-OLD-SCREEN FORMER-SCREEN)
				      FORMER-SCREEN)
				    (LOOP FOR SUBLIS ON OLD-SCREENS
					  FOR SCREEN = (CAR SUBLIS)
					  WHEN (AND SCREEN
						    (CONSOLE-SCREEN-ACCEPTABLE-P CONSOLE SCREEN))
					    DO (SETF (CAR SUBLIS) NIL)
					       (RETURN SCREEN))
				    (LOOP FOR SCREEN IN *OLD-CONSOLE-SCREENS*
					  WHEN (CONSOLE-SCREEN-ACCEPTABLE-P CONSOLE SCREEN)
					    DO (REMOVE-OLD-SCREEN SCREEN)
					       (RETURN SCREEN)))))
		   (INITIALIZE-ONE-SCREEN SCREEN CONSOLE MASTER-P))))
	  (COND (*MAIN-CONSOLE*
		 (SETF MAIN-SCREEN (SCREEN-FOR-CONSOLE *MAIN-CONSOLE* T))
		 (PUSH MAIN-SCREEN NEW-SCREENS))	;keep this on first
		(T (SETF MAIN-SCREEN NIL)))	;no console, no screen
	  (DOLIST (CONSOLE *SECONDARY-CONSOLES*)
	    (CONSOLE-INITIALIZE CONSOLE)
	    (CONSOLE-ENSURE-MOUSE-AND-KEYBOARD CONSOLE)
	    (PUSH (SCREEN-FOR-CONSOLE CONSOLE NIL) NEW-SCREENS)))
	(DOLIST (SCREEN OLD-SCREENS)
	  (WHEN SCREEN
	    (ADD-OLD-SCREEN SCREEN)))
	(SETF *CONSOLE-SCREENS* (NREVERSE NEW-SCREENS))))
    ;; Get the mouse going again
    (SETQ DEFAULT-SCREEN MAIN-SCREEN)
    ;; Copy frequently-referenced lists into WHO-LINE-AREA to minimize system working set
    ;; This will expand the area by a few words every boot, which should be acceptable.
    ;; I don't think the lists will ever expand off the first page at most sites.
    (SETQ ALL-THE-SCREENS (COPYLIST ALL-THE-SCREENS WHO-LINE-AREA))
    (SETQ *ACTIVE-WHO-LINE-SCREENS* (COPYLIST *ACTIVE-WHO-LINE-SCREENS* WHO-LINE-AREA))
    (DOLIST (SCREEN ALL-THE-SCREENS)
      (SETF (SHEET-BLINKER-LIST SCREEN)
	    (COPYLIST (SHEET-BLINKER-LIST SCREEN) WHO-LINE-AREA))))
  ;; Run initializations if we have a window system
  (MAYBE-RUN-WINDOW-INITIALIZATIONS)
  NIL)

(DEFUN INITIALIZE-ONE-SCREEN (SCREEN CONSOLE MASTER)
  ;; Find the console in a modular fashion.
  (MULTIPLE-VALUE-BIND (ADDRESS
			WIDTH HEIGHT BITS-PER-PIXEL
			TOP-MARGIN-SIZE BOTTOM-MARGIN-SIZE LEFT-MARGIN-SIZE RIGHT-MARGIN-SIZE)
      (CONSOLE-VIDEO-ADDRESS CONSOLE)
    ;; Allow for customization
    (INCF LEFT-MARGIN-SIZE *SCREEN-LEFT-OFFSET*)
    (INCF TOP-MARGIN-SIZE *SCREEN-TOP-OFFSET*)
    (DECF RIGHT-MARGIN-SIZE *SCREEN-RIGHT-OFFSET*)
    (DECF BOTTOM-MARGIN-SIZE *SCREEN-BOTTOM-OFFSET*)
    ;; Compensate for the run lights now being part of the screen
    (SETF BOTTOM-MARGIN-SIZE (MAX 0 (- BOTTOM-MARGIN-SIZE 3)))
    
    (LET* ((NEED-READJUST (NOT (NULL SCREEN)))
	   (ORIGINAL-HEIGHT HEIGHT)
	   (WHO-LINE-TEMPLATE (AND *CONSOLE-SCREENS-HAVE-WHO-LINE*
				   (CONSOLE-WHO-LINE-TEMPLATE CONSOLE)))
	   (WHO-LINE-HEIGHT (WHO-LINE-TOTAL-HEIGHT WHO-LINE-TEMPLATE)))
      
      ;;Figure out the height of the who line, if it is present
      (UNLESS (ZEROP WHO-LINE-HEIGHT)
	(SETQ HEIGHT (- HEIGHT WHO-LINE-HEIGHT BOTTOM-MARGIN-SIZE)
	      BOTTOM-MARGIN-SIZE 0))
      
      (UNLESS SCREEN				; make sure we have a screen to work with
	(SETQ SCREEN (CONSOLE-SCREEN-CREATE
		       CONSOLE NIL
		       :NAME "Main Screen"
		       :BUFFER ADDRESS
		       :BITS-PER-PIXEL BITS-PER-PIXEL
		       :LEFT 0 :RIGHT WIDTH
		       :TOP 0 :BOTTOM HEIGHT
		       :ORIGINAL-BOTTOM ORIGINAL-HEIGHT :ALLOW-OTHER-KEYS T
		       :LEFT-MARGIN-SIZE LEFT-MARGIN-SIZE
		       :RIGHT-MARGIN-SIZE RIGHT-MARGIN-SIZE
		       :TOP-MARGIN-SIZE TOP-MARGIN-SIZE
		       :BOTTOM-MARGIN-SIZE BOTTOM-MARGIN-SIZE))
	;; Constructing the wholine will need to expose some windows,
	;; which will need to check them against this for
	;; "appropriateness".
	(UNLESS (VARIABLE-BOUNDP DEFAULT-SCREEN)
	  (SETQ DEFAULT-SCREEN SCREEN))
	;; Editor kludge
	(LET ((AVAILABLE-WIDTH (SHEET-INSIDE-WIDTH SCREEN))
	      (DESIRED-WIDTH (+ (* (SHEET-CHAR-WIDTH SCREEN) 95.) 25.)))
	  (SET-DEFAULT-WINDOW-SIZE 'ZWEI:ZMACS-FRAME SCREEN NIL
				   :WIDTH (MIN DESIRED-WIDTH AVAILABLE-WIDTH))))
      
      (SEND SCREEN :SET-CONSOLE CONSOLE)	;The order here is important...
      (SETF (CONSOLE-SCREEN CONSOLE) SCREEN)
      
      (WHEN NEED-READJUST
	;; Set up the main screen, considering the who line
	(CONSOLE-READJUST-SCREEN CONSOLE SCREEN :BUFFER ADDRESS :BITS-PER-PIXEL BITS-PER-PIXEL
				 :LEFT 0 :RIGHT WIDTH :TOP 0 :BOTTOM HEIGHT
				 :ORIGINAL-BOTTOM ORIGINAL-HEIGHT
				 :LEFT-MARGIN-SIZE LEFT-MARGIN-SIZE
				 :RIGHT-MARGIN-SIZE RIGHT-MARGIN-SIZE
				 :TOP-MARGIN-SIZE TOP-MARGIN-SIZE
				 :BOTTOM-MARGIN-SIZE BOTTOM-MARGIN-SIZE))
      
      (SEND SCREEN :EXPOSE)
      
      (UNLESS (ZEROP WHO-LINE-HEIGHT)
	(LET ((WHO-SCREEN (SCREEN-WHO-LINE-SCREEN SCREEN)))
	  (COND (WHO-SCREEN
		 (CONSOLE-READJUST-SCREEN
		   CONSOLE WHO-SCREEN :BUFFER ADDRESS :BITS-PER-PIXEL BITS-PER-PIXEL
		   :LEFT 0 :RIGHT WIDTH :TOP HEIGHT :BOTTOM ORIGINAL-HEIGHT
		   :LEFT-MARGIN-SIZE LEFT-MARGIN-SIZE :RIGHT-MARGIN-SIZE RIGHT-MARGIN-SIZE
		   :TOP-MARGIN-SIZE 0
		   :BOTTOM-MARGIN-SIZE (- ORIGINAL-HEIGHT HEIGHT WHO-LINE-HEIGHT))
		 (SETF (WHO-LINE-SCREEN-WHO-LINE-TEMPLATE WHO-SCREEN)
		       WHO-LINE-TEMPLATE))
		(T
		 ;; Create a new one.
		 (SETF WHO-SCREEN
		       (CONSOLE-SCREEN-CREATE
			 CONSOLE T :AREA WHO-LINE-AREA
			 :NAME "Who Line Screen" :VSP 0
			 :PARENT-SCREEN SCREEN
			 :WHO-LINE-TEMPLATE WHO-LINE-TEMPLATE
			 :BUFFER ADDRESS
			 :BITS-PER-PIXEL BITS-PER-PIXEL
			 :LEFT 0 :RIGHT WIDTH
			 :TOP HEIGHT :BOTTOM ORIGINAL-HEIGHT
			 :LEFT-MARGIN-SIZE LEFT-MARGIN-SIZE
			 :RIGHT-MARGIN-SIZE RIGHT-MARGIN-SIZE
			 :TOP-MARGIN-SIZE 0
			 :BOTTOM-MARGIN-SIZE (- ORIGINAL-HEIGHT HEIGHT WHO-LINE-HEIGHT)))
		 (SETF (SCREEN-WHO-LINE-SCREEN SCREEN) WHO-SCREEN)))
	  ;; Set it up.
	  (WHEN WHO-SCREEN
	    (SEND WHO-SCREEN :ACTIVATE)
	    (WHO-LINE-SETUP WHO-SCREEN MASTER))))
      SCREEN)))

(DEFUN SHUTDOWN-WINDOW-SYSTEM ()
  (SETF TERMINAL-IO COLD-LOAD-STREAM)
  ;; Clear out the Initial Lisp Listener (what about the other windows?)
  (WHEN INITIAL-LISP-LISTENER
    (SEND-IF-HANDLES INITIAL-LISP-LISTENER :CLEAR-HISTORY :REFRESH NIL)
    (SEND INITIAL-LISP-LISTENER :HOME-CURSOR))
  (HALT-SCREEN-MANAGER)
  (SHUTDOWN-MICE)
  (MAP-OVER-ALL-SHEETS #'SHEET-CLEAR-LOCKS-AND-RESOURCES)
  (SETQ *NUMBER-OF-SHEET-LOCK-WAITERS* 0 *NUMBER-OF-MOUSE-WAITERS* 0)
  (SETF PREPARED-SHEET NIL)
  ;; Deexpose all of the screens (and top-level windows inside them).
  ;; Deactivate all the screens, but not the windows inside them
  (LET ((SCREENS (COPYLIST ALL-THE-SCREENS)))
    (DOLIST (SCREEN SCREENS)
      (COND ((MEMQ SCREEN *CONSOLE-SCREENS*)
	     (DOLIST (INFERIOR (COPYLIST (SHEET-EXPOSED-INFERIORS SCREEN)))
	       (SEND INFERIOR :DEEXPOSE NIL))
	     (SEND SCREEN :DEEXPOSE NIL)
	     (SEND SCREEN :DEACTIVATE)
	     (SEND SCREEN :SET-CONSOLE NIL))
	    (T
	     (SEND SCREEN :DEEXPOSE NIL)))))
  (SETF *WINDOW-SYSTEM-SHUT-DOWN* T)
  NIL)

(DEFUN MAYBE-RUN-WINDOW-INITIALIZATIONS ()
  (WHEN (AND (NOT *WINDOW-INITIALIZATIONS-RUN*)
	     (NOT (NULL MAIN-SCREEN)))
    (INITIALIZATIONS 'SI:WINDOW-INITIALIZATION-LIST T)
    (SETF *WINDOW-INITIALIZATIONS-RUN* T)
    (START-WINDOW-DELAYED-PROCESSES)))

(DEFUN MAP-OVER-ALL-INFERIORS (WINDOW FUNCTION)
  (DECLARE (SYS:DOWNWARD-FUNARG FUNCTION))
  (FUNCALL FUNCTION WINDOW)
  (DOLIST (WINDOW (COPYLIST (SEND WINDOW :INFERIORS)))
    (MAP-OVER-ALL-INFERIORS WINDOW FUNCTION))
  NIL)

#+IGNORE	;for now, until we get our act together -- Moon,DLA 24-Oct-88
(SI:DEFINE-GC-OPTIMIZATION REMOVE-OLD-ACTIVITIES SI:SYMBOLICS-SYSTEM-RELEASE
  (:DOCUMENTATION "Remove activity frames other than the initial Lisp listener.")
  (:BEFORE-FLIP (IGNORE)
   (CL:DOLIST (SCREEN (APPEND TV:*CONSOLE-SCREENS* TV:*OLD-CONSOLE-SCREENS*)
     (CL:DOLIST (WINDOW (COPYLIST (TV:SHEET-INFERIORS SCREEN)))
       (DECLARE (SPECIAL ZWEI:*ZMAIL-WINDOW*))
       (UNLESS (OR (EQ WINDOW TV:INITIAL-LISP-LISTENER)
		   (AND (VARIABLE-BOUNDP ZWEI:*ZMAIL-WINDOW*)
			(EQ WINDOW ZWEI:*ZMAIL-WINDOW*)))
	 (SEND WINDOW :KILL)
	 (LET ((TYPE (CL:TYPE-OF WINDOW)))
	   (UNLESS (MEMQ TYPE '(DW::DYNAMIC-LISP-LISTENER))
	     (CL:REMPROP TYPE 'TV:UNNAMED-WINDOW-INSTANCE-COUNT)))))))
   (SETF TV:*OLD-CONSOLE-SCREENS* NIL)))

(DEFUN MAP-OVER-ALL-SHEETS (FUNCTION)
  (DECLARE (SYS:DOWNWARD-FUNARG FUNCTION))
  (SI:MAP-OVER-OBJECTS #'(LAMBDA (AREA)
			   (OR (EQL AREA SHEET-AREA)
			       (EQL AREA WHO-LINE-AREA)))
		       #'SI:REGION-PREDICATE-STRUCTURE
		       #'(LAMBDA (IGNORE IGNORE IGNORE OBJECT IGNORE IGNORE)
			   (WHEN (TYPEP OBJECT 'TV:SHEET)
			     (FUNCALL FUNCTION OBJECT)))))
