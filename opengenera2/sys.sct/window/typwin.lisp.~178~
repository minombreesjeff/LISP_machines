;;; -*- Mode: LISP; Package: TV; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Typeout window

;;;Windows with typeout windows as inferiors
(DEFFLAVOR ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN
	((TYPEOUT-WINDOW NIL)
	 BORDERS)
	()
  (:REQUIRED-FLAVORS ESSENTIAL-MOUSE)
  (:GETTABLE-INSTANCE-VARIABLES TYPEOUT-WINDOW)
  (:INITABLE-INSTANCE-VARIABLES TYPEOUT-WINDOW)
  (:READABLE-INSTANCE-VARIABLES TYPEOUT-WINDOW)
  (:DOCUMENTATION :MIXIN "A window that has a typeout window as an inferior"))

;;;--- make-instance is unsafe for windows -- BIM
(DEFMETHOD (:init ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN :AFTER) (IGNORE)
  (UNLESS (VARIABLE-BOUNDP BORDERS)
    (SETQ BORDERS NIL))
  (AND (LISTP TYPEOUT-WINDOW)
       (SETQ TYPEOUT-WINDOW (LEXPR-FUNCALL #'MAKE-WINDOW (CAR TYPEOUT-WINDOW)
					   ':SUPERIOR SELF
					   (CDR TYPEOUT-WINDOW)))))

(DEFWRAPPER (:CHANGE-OF-SIZE-OR-MARGINS ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN) (IGNORE . BODY)
  ;`(WITH-SHEET-DEEXPOSED (TYPEOUT-WINDOW) . ,BODY)
  `(LET (.STATUS.)
     (DELAYING-SCREEN-MANAGEMENT
       (UNWIND-PROTECT
	 (PROGN
	   (COND (TYPEOUT-WINDOW			;May not be present during init
		  (SETQ .STATUS. (SEND TYPEOUT-WINDOW ':STATUS))
		  (SEND TYPEOUT-WINDOW ':DEEXPOSE ':DEFAULT ':NOOP)))
	   . ,BODY)
	 (AND .STATUS.
	      (SEND TYPEOUT-WINDOW ':SET-STATUS .STATUS.))))))

(DEFMETHOD (:CHANGE-OF-SIZE-OR-MARGINS ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN :AFTER)
	   (&REST IGNORE)
  (WHEN TYPEOUT-WINDOW
    (SEND TYPEOUT-WINDOW ':SET-EDGES (SHEET-INSIDE-LEFT) (SHEET-INSIDE-TOP)
	  (SHEET-INSIDE-RIGHT) (SHEET-INSIDE-BOTTOM))))
  
(DEFMETHOD (:TURN-OFF-BLINKERS-FOR-TYPEOUT ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN) ())

(DEFMETHOD (:TURN-ON-BLINKERS-FOR-TYPEOUT ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN) ())

(DEFMETHOD (:SELECT ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN :AFTER) (&REST ARGS)
  (AND (SEND TYPEOUT-WINDOW :INCOMPLETE-P)
       (LEXPR-SEND TYPEOUT-WINDOW ':SELECT ARGS)))

(DEFUN ROUND-UP (X MULTIPLE)
  (* (CEILING X MULTIPLE) MULTIPLE))

;; Draw a horizontal line to mark the bottom of the typeout
;; window, which is an inferior of this window.  Draw the line on
;; the superior window rather than on the typeout window because
;; it used to be that the line would connect with the borders of
;; the superior.  This knows specially to leave one pixel on the
;; left and right when drawing the line.  Clear all of the the
;; typeout window to the point of the typeout line, and clear the
;; line of text immediately below it.  Be sure to get the value
;; of LINE-HEIGHT for the superior window, and not for the
;; typeout window, since they may be different.

(DEFVAR *TYPEOUT-WINDOW-BORDER-ENABLE* T)

(DEFMETHOD (:DRAW-BOTTOM-LINE ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN)
	   (TYPEOUT-WINDOW Y THICKNESS OLD-Y)
  (LET* ((BOTTOM-EDGE (ROUND-UP (+ Y THICKNESS 1) LINE-HEIGHT))
	 (TYPEOUT-LEFT-MARGIN (SHEET-LEFT-MARGIN-SIZE TYPEOUT-WINDOW))
	 (TYPEOUT-TOTAL-MARGINS (+ TYPEOUT-LEFT-MARGIN
				   (SHEET-RIGHT-MARGIN-SIZE TYPEOUT-WINDOW))))
    (WHEN EXPOSED-P
      (PREPARE-SHEET (SELF)
	(LET ((TOP (MIN OLD-Y Y)))
	  (SHEET-DRAW-RECTANGLE (- (SHEET-INSIDE-WIDTH) TYPEOUT-TOTAL-MARGINS)
				(- (MIN BOTTOM-EDGE (- HEIGHT BOTTOM-MARGIN-SIZE)) TOP)
				(+ LEFT-MARGIN-SIZE TYPEOUT-LEFT-MARGIN)
				TOP
				ERASE-ALUF))
	(WHEN (AND *TYPEOUT-WINDOW-BORDER-ENABLE*
		   (< BOTTOM-EDGE (- HEIGHT BOTTOM-MARGIN-SIZE)))
	  (SHEET-DRAW-RECTANGLE (- WIDTH 2 LEFT-MARGIN-SIZE RIGHT-MARGIN-SIZE
				   TYPEOUT-TOTAL-MARGINS)
				THICKNESS
				(+ 1 LEFT-MARGIN-SIZE TYPEOUT-LEFT-MARGIN)
				Y
				CHAR-ALUF))))))

(DEFMETHOD (:ERASE-BOTTOM-LINE ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN) (TYPEOUT-WINDOW Y
								     THICKNESS)
  (LET* ((BOTTOM-EDGE (ROUND-UP (+ Y THICKNESS 1) LINE-HEIGHT))
	 (TYPEOUT-LEFT-MARGIN (SHEET-LEFT-MARGIN-SIZE TYPEOUT-WINDOW))
	 (TYPEOUT-TOTAL-MARGINS (+ TYPEOUT-LEFT-MARGIN
				   (SHEET-RIGHT-MARGIN-SIZE TYPEOUT-WINDOW))))
    (WHEN (AND EXPOSED-P *TYPEOUT-WINDOW-BORDER-ENABLE*
	       (< BOTTOM-EDGE (- HEIGHT BOTTOM-MARGIN-SIZE)))
      (PREPARE-SHEET (SELF)
	(SHEET-DRAW-RECTANGLE (- WIDTH (+ LEFT-MARGIN-SIZE RIGHT-MARGIN-SIZE
					  TYPEOUT-TOTAL-MARGINS))
			      THICKNESS (+ LEFT-MARGIN-SIZE TYPEOUT-LEFT-MARGIN)
			      Y ERASE-ALUF)))))

(DEFWHOPPER (:Y-SCROLL-TO ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN) (&REST ARGS)
  (IF (SEND TYPEOUT-WINDOW :EXPOSED-P)
      (IF (OPERATION-HANDLED-P TYPEOUT-WINDOW :Y-SCROLL-TO)
	  (LEXPR-SEND TYPEOUT-WINDOW :Y-SCROLL-TO ARGS)
	  (BEEP))
      (LEXPR-CONTINUE-WHOPPER ARGS)))

(DEFWHOPPER (:Y-SCROLL-POSITION ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN) (&REST ARGS)
  (IF (AND (SEND TYPEOUT-WINDOW :EXPOSED-P)
	   (OPERATION-HANDLED-P TYPEOUT-WINDOW :Y-SCROLL-TO))
      (LEXPR-SEND TYPEOUT-WINDOW :Y-SCROLL-POSITION ARGS)
      (LEXPR-CONTINUE-WHOPPER ARGS)))

(DEFWHOPPER (:SCROLL-RELATIVE ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN) (&REST ARGS)
  (IF (SEND TYPEOUT-WINDOW :EXPOSED-P)
      (IF (OPERATION-HANDLED-P TYPEOUT-WINDOW :SCROLL-RELATIVE)
	  (LEXPR-SEND TYPEOUT-WINDOW :SCROLL-RELATIVE ARGS)
	  (BEEP))
      (LEXPR-CONTINUE-WHOPPER ARGS)))

(DEFFLAVOR WINDOW-WITH-TYPEOUT-MIXIN
	()
	(ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN))

;;;Typeout windows themselves
;;; BOTTOM-REACHED is set to the largest Y clobbered, or NIL if nothing is clobbered.
;;; INCOMPLETE-P is set to T when the window is exposed, and NIL when it is deexposed
;;;  or by the :MAKE-COMPLETE method.
;;; For ordinary use, the command process of the program should check INCOMPLETE-P and wait
;;;   for the user to type space if that is set; the redisplay process should check
;;;   BOTTOM-REACHED and redisplay (only that portion, if it can) if that is set.
;;;  Thus things that typeout but that need not be saved for the user (like Y-OR-N-P's)
;;;   should send the :MAKE-COMPLETE message.
;;; By default, these windows cannot be selected from the system menu.
(DEFFLAVOR BASIC-TYPEOUT-WINDOW
	((BOTTOM-REACHED NIL) (HAD-MOUSE-P NIL) (INCOMPLETE-P NIL))
	(INTERACTOR-MIXIN NO-SCREEN-MANAGING-MIXIN DONT-SELECT-WITH-MOUSE-MIXIN)
  (:REQUIRED-FLAVORS ESSENTIAL-MOUSE)
  (:GETTABLE-INSTANCE-VARIABLES INCOMPLETE-P)
  (:DEFAULT-INIT-PLIST :DEEXPOSED-TYPEOUT-ACTION '(:EXPOSE-FOR-TYPEOUT) :PRIORITY -2)
  (:READABLE-INSTANCE-VARIABLES BOTTOM-REACHED)
  (:DOCUMENTATION :MIXIN "A window that grows over its superior"))

(DEFMETHOD (:ALIAS-FOR-SELECTED-WINDOWS BASIC-TYPEOUT-WINDOW) ()
  (SEND SUPERIOR ':ALIAS-FOR-SELECTED-WINDOWS))

(DEFMETHOD (:HANDLE-MOUSE BASIC-TYPEOUT-WINDOW :BEFORE) ()
  (SETQ HAD-MOUSE-P T))

;;;For MOUSE-MOVES and MOUSE-BUTTONS message, the typeout-window, if exposed, will
;;;receive the messages and if it is not in the covered area, pass them off to the
;;;superior and throw out of the original message.
(DEFWRAPPER (:MOUSE-MOVES BASIC-TYPEOUT-WINDOW) (IGNORE . BODY)
  `(CATCH 'SUPERIOR-HANDLED-MOUSE
     . ,BODY))

;;;Is the mouse somewhere the typeout window knows about?
(DEFUN-IN-FLAVOR (HANDLE-MOUSE-P BASIC-TYPEOUT-WINDOW) (X Y)
  (AND BOTTOM-REACHED
       (< Y (ROUND-UP (+ BOTTOM-REACHED *TYPEOUT-LINE-HEIGHT* 3)
		      (SEND SUPERIOR :LINE-HEIGHT)))
       ( X 0) ( Y 0) (< X WIDTH)))

(DEFMETHOD (:MOUSE-MOVES BASIC-TYPEOUT-WINDOW :BEFORE) (X Y)
  (IF (HANDLE-MOUSE-P X Y)
      (COND ((NOT HAD-MOUSE-P)
	     (SEND SUPERIOR ':TURN-OFF-BLINKERS-FOR-TYPEOUT)
	     (SETQ HAD-MOUSE-P T)))
      (COND (HAD-MOUSE-P			;Send one extra message the first time out
	     (SEND SUPERIOR ':TURN-ON-BLINKERS-FOR-TYPEOUT)
	     (SETQ HAD-MOUSE-P NIL))		;to turn off any blinkers
	    (T
	     (LET ((X (+ X X-OFFSET)) (Y (+ Y Y-OFFSET)))
	       (SEND SUPERIOR ':MOUSE-MOVES X Y)
	       (THROW 'SUPERIOR-HANDLED-MOUSE T))))))

(DEFWRAPPER (:MOUSE-BUTTONS BASIC-TYPEOUT-WINDOW) (IGNORE . BODY)
  `(CATCH 'SUPERIOR-HANDLED-MOUSE
     . ,BODY))

(DEFMETHOD (:MOUSE-BUTTONS BASIC-TYPEOUT-WINDOW :BEFORE) (BD X Y)
  (OR (HANDLE-MOUSE-P X Y)
      (LET ((X (+ X X-OFFSET)) (Y (+ Y Y-OFFSET)))
	(SEND SUPERIOR ':MOUSE-BUTTONS BD X Y)
	(THROW 'SUPERIOR-HANDLED-MOUSE T))))

;;; Superior has the scroll bar, which will actually scroll the typeout window
;;; so long as the typeout window is exposed.  So let superior decide sensitivity.
(DEFMETHOD (MOUSE-EXIT-TARGET-DIRECTION-SENSITIVE BASIC-TYPEOUT-WINDOW) (DIRECTION)
  (MOUSE-EXIT-TARGET-DIRECTION-SENSITIVE SUPERIOR DIRECTION))

(DEFWRAPPER (:WHO-LINE-DOCUMENTATION-STRING BASIC-TYPEOUT-WINDOW) (IGNORE . BODY)
  `(MULTIPLE-VALUE-BIND (X Y)
       (SHEET-MOUSE-POSITION SELF)
     (IF (NOT (HANDLE-MOUSE-P X Y))
	 (SEND SUPERIOR ':WHO-LINE-DOCUMENTATION-STRING)
	 . ,BODY)))

(DEFWRAPPER (:EXPOSE BASIC-TYPEOUT-WINDOW) (IGNORE . BODY)
  `(LET ((.TYPEOUT-WAS-EXPOSED. EXPOSED-P))
     (DECLARE (SPECIAL .TYPEOUT-WAS-EXPOSED.))
     ,@BODY))

(DEFMETHOD (:EXPOSE BASIC-TYPEOUT-WINDOW :AFTER) (&REST IGNORE)
  (DECLARE (SPECIAL .TYPEOUT-WAS-EXPOSED.))
  (OR .TYPEOUT-WAS-EXPOSED.
      (SETQ BOTTOM-REACHED (OR BOTTOM-REACHED 0)
	    INCOMPLETE-P T)))

(DEFMETHOD (:TYO BASIC-TYPEOUT-WINDOW :BEFORE) (IGNORE)
  (SETQ INCOMPLETE-P T))
  
(DEFMETHOD (:STRING-OUT BASIC-TYPEOUT-WINDOW :BEFORE) (&REST IGNORE)
  (SETQ INCOMPLETE-P T))

(DEFMETHOD (:LINE-OUT BASIC-TYPEOUT-WINDOW :BEFORE) (&REST IGNORE)
  (SETQ INCOMPLETE-P T))

(DEFMETHOD (:FRESH-LINE BASIC-TYPEOUT-WINDOW :BEFORE) ()
  (SETQ INCOMPLETE-P T))

(DEFMETHOD (:DISPLAY-LOZENGED-STRING BASIC-TYPEOUT-WINDOW :BEFORE) (&REST IGNORE)
  (SETQ INCOMPLETE-P T))

(DEFMETHOD (:BOTTOM-REACHED BASIC-TYPEOUT-WINDOW) ()
  BOTTOM-REACHED)

;;; This can cause one more line than necessary to be redisplayed, but that is
;;; better than part of a line being left over.  The fundamental problem is that
;;; BOTTOM-REACHED is the co-ordinate of the top of lowest line we clobbered.  The
;;; editor knows to add 1 line, but that isn't enough if we drew with a larger line
;;; height sometime along the way.

(DEFUN-IN-FLAVOR (COMPUTE-BOTTOM-REACHED-FOR-NEW-FONT-MAP BASIC-TYPEOUT-WINDOW) ()
  (WHEN EXPOSED-P
    (SETQ BOTTOM-REACHED (MAX (OR BOTTOM-REACHED 0)
			      (+ CURSOR-Y LINE-HEIGHT)))))

(DEFMETHOD (:SET-FONT-MAP BASIC-TYPEOUT-WINDOW :BEFORE) (IGNORE)
  (COMPUTE-BOTTOM-REACHED-FOR-NEW-FONT-MAP))

(DEFMETHOD (:SET-VSP BASIC-TYPEOUT-WINDOW :BEFORE) (IGNORE)
  (COMPUTE-BOTTOM-REACHED-FOR-NEW-FONT-MAP))

(DEFMETHOD (:MAKE-COMPLETE BASIC-TYPEOUT-WINDOW) ()
  (SETQ INCOMPLETE-P NIL))

(DEFMETHOD (:MAKE-INCOMPLETE BASIC-TYPEOUT-WINDOW) ()
  (SETQ INCOMPLETE-P T))

;;; Prevent (ESSENTIAL-WINDOW-WITH-TYPEOUT-MIXIN :AFTER :SELECT) from selecting
;;; a typeout window that is being deactivated by ZWEI:PREPARE-WINDOW-FOR-REDISPLAY.

(DEFMETHOD (:DEACTIVATE BASIC-TYPEOUT-WINDOW :BEFORE) ()
  (WHEN (OR (PLUSP LEFT-MARGIN-SIZE)
	    (PLUSP TOP-MARGIN-SIZE)
	    (PLUSP RIGHT-MARGIN-SIZE)
	    (PLUSP BOTTOM-MARGIN-SIZE))
    (PREPARE-SHEET (SELF)
      (WHEN (PLUSP TOP-MARGIN-SIZE)
	(SHEET-DRAW-RECTANGLE WIDTH TOP-MARGIN-SIZE 0 0 ERASE-ALUF))
      (WHEN (PLUSP LEFT-MARGIN-SIZE)
	(SHEET-DRAW-RECTANGLE LEFT-MARGIN-SIZE (- HEIGHT TOP-MARGIN-SIZE BOTTOM-MARGIN-SIZE)
			      0 TOP-MARGIN-SIZE ERASE-ALUF))
      (WHEN (PLUSP RIGHT-MARGIN-SIZE)
	(SHEET-DRAW-RECTANGLE RIGHT-MARGIN-SIZE (- HEIGHT TOP-MARGIN-SIZE BOTTOM-MARGIN-SIZE)
			      (- WIDTH RIGHT-MARGIN-SIZE) TOP-MARGIN-SIZE ERASE-ALUF))
      (WHEN (PLUSP BOTTOM-MARGIN-SIZE)
	(SHEET-DRAW-RECTANGLE WIDTH BOTTOM-MARGIN-SIZE 0 (- HEIGHT BOTTOM-MARGIN-SIZE)
			      ERASE-ALUF))))
  (SETQ INCOMPLETE-P NIL))

(DEFMETHOD (:ACTIVE-P BASIC-TYPEOUT-WINDOW) ()
  BOTTOM-REACHED)

;;Expose, but don't clear the screen
(DEFMETHOD (:EXPOSE-FOR-TYPEOUT BASIC-TYPEOUT-WINDOW) ()
  ;; This is here so that we don't try to activate ourselves while we are locked,
  ;; so that we don't violate locking order, because activating requires getting
  ;; a lock on our superior
  (SEND SELF :ACTIVATE)
  (SEND SELF :EXPOSE NIL :NOOP)
  (SEND SELF :REFRESH-MARGINS)
  (OR EXPOSED-P
      ;; If our superior has no screen array, we won't really be exposed.  So wait
      ;; until really exposed to prevent infinite regression
      (PROCESS-WAIT "Typeout Exposed" #'SHEET-EXPOSED-P SELF))
  (SEND SELF :HOME-CURSOR)
  (SEND SELF :CLEAR-REST-OF-LINE))

(DEFMETHOD (:NOTICE BASIC-TYPEOUT-WINDOW) (EVENT &REST IGNORE)
  (WHEN (AND (EQ EVENT ':ERROR)
	     (EQUAL DEEXPOSED-TYPEOUT-ACTION '(:EXPOSE-FOR-TYPEOUT)))
    (SEND SUPERIOR :NOTICE EVENT)
    T))

(DEFVAR *TYPEOUT-LINE-HEIGHT* 1)

(DEFUN-IN-FLAVOR (TYPEOUT-DRAW-BOTTOM-LINE BASIC-TYPEOUT-WINDOW) (NEW-BOTTOM-REACHED)
  (SEND SUPERIOR :DRAW-BOTTOM-LINE
	SELF (+ NEW-BOTTOM-REACHED Y-OFFSET)
	*TYPEOUT-LINE-HEIGHT* (+ (OR BOTTOM-REACHED 0) Y-OFFSET)))

(DEFUN-IN-FLAVOR (TYPEOUT-ERASE-BOTTOM-LINE BASIC-TYPEOUT-WINDOW) ()
  (WHEN BOTTOM-REACHED
    (SEND SUPERIOR :ERASE-BOTTOM-LINE
	  SELF (+ BOTTOM-REACHED Y-OFFSET) *TYPEOUT-LINE-HEIGHT*)))

(DEFUN-IN-FLAVOR (TYPEOUT-UPDATE-BOTTOM-LINE BASIC-TYPEOUT-WINDOW) (&OPTIONAL NEW-BOTTOM-REACHED)
  (SETQ NEW-BOTTOM-REACHED (MAX (OR BOTTOM-REACHED 0)
				(OR NEW-BOTTOM-REACHED 0)
				(+ CURSOR-Y LINE-HEIGHT)))
  (COND ((OR (NOT BOTTOM-REACHED) (= BOTTOM-REACHED 0))
	 ;; Draw line for the first time.
	 (TYPEOUT-DRAW-BOTTOM-LINE NEW-BOTTOM-REACHED))
	(( NEW-BOTTOM-REACHED BOTTOM-REACHED)
	 ;; Erase line from old place.
	 (TYPEOUT-ERASE-BOTTOM-LINE)
	 ;; Draw line in new place.
	 (TYPEOUT-DRAW-BOTTOM-LINE NEW-BOTTOM-REACHED)))
  ;; Update internally.
  (SETQ BOTTOM-REACHED NEW-BOTTOM-REACHED))

(DEFMETHOD (:DEEXPOSE BASIC-TYPEOUT-WINDOW :BEFORE) (&REST IGNORE)
  (WHEN EXPOSED-P
    (IF BOTTOM-REACHED (TYPEOUT-ERASE-BOTTOM-LINE))
    (SEND SELF :HOME-CURSOR))
  (SETQ INCOMPLETE-P NIL))

(DEFMETHOD (:DEEXPOSE BASIC-TYPEOUT-WINDOW :AFTER) (&REST IGNORE)
  (SETQ BOTTOM-REACHED NIL))
       
(DEFUN-IN-FLAVOR (REACHED-BOTTOM BASIC-TYPEOUT-WINDOW) ()
  (TYPEOUT-ERASE-BOTTOM-LINE)
  (SETQ BOTTOM-REACHED (SHEET-INSIDE-BOTTOM))
  (SETQ INCOMPLETE-P T))

(DEFMETHOD (:REFRESH BASIC-TYPEOUT-WINDOW :AFTER) (&OPTIONAL IGNORE)
  (WHEN (AND EXPOSED-P (NOT RESTORED-BITS-P))
    (REACHED-BOTTOM)))

(DEFMETHOD (REFRESH-RECTANGLE BASIC-TYPEOUT-WINDOW :AFTER) (LEFT TOP RIGHT BOTTOM)
  (DECLARE (IGNORE LEFT TOP RIGHT))
  (WHEN (> BOTTOM (OR BOTTOM-REACHED 0))
    ;; The rectangle to be refreshed intersects the bottom-line or the visible
    ;; portion of the superior.  Since we can't refresh the superior if it's a Zwei,
    ;; and as it happens we don't refresh the superior even if it's a DW,
    ;; just expand to cover the entire superior.
    (LET* ((B (OR BOTTOM-REACHED (SHEET-INSIDE-TOP)))
	   (H (- (SHEET-INSIDE-BOTTOM) B)))
      (WHEN (PLUSP H)
	(PREPARE-SHEET (SELF)
	  (SHEET-DRAW-RECTANGLE (SHEET-INSIDE-WIDTH) H (SHEET-INSIDE-LEFT) B ERASE-ALUF)))
      (SETQ BOTTOM-REACHED (SHEET-INSIDE-BOTTOM)))))

(DEFMETHOD (:CLEAR-WINDOW BASIC-TYPEOUT-WINDOW :BEFORE) (&REST IGNORE)
  (REACHED-BOTTOM))

(DEFMETHOD (:CLEAR-REST-OF-WINDOW BASIC-TYPEOUT-WINDOW :BEFORE) ()
  (REACHED-BOTTOM))

(DEFMETHOD (:END-OF-PAGE-EXCEPTION BASIC-TYPEOUT-WINDOW :BEFORE) ()
  (REACHED-BOTTOM))

(DEFMETHOD (:HOME-CURSOR BASIC-TYPEOUT-WINDOW :BEFORE) (&REST IGNORE)
  (WHEN TV:EXPOSED-P
    (TYPEOUT-UPDATE-BOTTOM-LINE)))

(DEFMETHOD (:INCREMENT-CURSORPOS BASIC-TYPEOUT-WINDOW :AFTER) (&REST IGNORE)
  (TYPEOUT-UPDATE-BOTTOM-LINE))

(DEFWHOPPER-SUBST (:ALLOCATE-VERTICAL-SPACE-FOR-OUTPUT BASIC-TYPEOUT-WINDOW)
		  (TOTAL-HEIGHT SPACE-ABOVE)
  (CONTINUE-WHOPPER TOTAL-HEIGHT SPACE-ABOVE)
  (TYPEOUT-UPDATE-BOTTOM-LINE (+ CURSOR-Y TOTAL-HEIGHT)))

(DEFMETHOD (:SET-CURSORPOS BASIC-TYPEOUT-WINDOW :AFTER) (&REST IGNORE)
  (TYPEOUT-UPDATE-BOTTOM-LINE))

(DEFMETHOD (:CLEAR-REST-OF-LINE BASIC-TYPEOUT-WINDOW :BEFORE) (&REST IGNORE)
  (TYPEOUT-UPDATE-BOTTOM-LINE))

(DEFCONSTANT *TYPEOUT-LINE-MARGIN* 3)

;;; This is used by the :draw-xxx :before daemons, which are now automatically defined
;;; by dw:define-viewport-graphics-operation, the central repository of the shape  bounding
;;; box algorithms.
(DEFMACRO TYPEOUT-GRAPHICS-UPDATE (NEW-BOTTOM-REACHED)
  `(TYPEOUT-UPDATE-BOTTOM-LINE (+ ,NEW-BOTTOM-REACHED *TYPEOUT-LINE-MARGIN*)))

;;; The following is DDyer's approach to the sharing of code.
;;; What the hell; it DOES work and shares the code better...
(DEFWHOPPER (:SET-REVERSE-VIDEO-P BASIC-TYPEOUT-WINDOW) (REVERSE-VIDEO-P)
  (LETF ((HEIGHT BOTTOM-REACHED))
    (CONTINUE-WHOPPER REVERSE-VIDEO-P)))

(COMMENT
  ;;This is the old way, already merged with the change to
  ;;the version in SHEET. -Weaver
;;; This is exactly the same as (:METHOD SHEET :SET-REVERSE-VIDEO-P), but it
;;; only draws a rectangle down to bottom reached.  A pity that there is no
;;; reasonable way to express this sharing of the code.
(DEFMETHOD (:SET-REVERSE-VIDEO-P BASIC-TYPEOUT-WINDOW) (REVERSE-VIDEO-P)
  (LET ((OLD (NOT (ZEROP (SHEET-REVERSE-VIDEO)))))
    (UNLESS (EQ REVERSE-VIDEO-P OLD)
      (WITHOUT-INTERRUPTS
	(SETF (SHEET-REVERSE-VIDEO) (IF REVERSE-VIDEO-P 1 0))
	(SWAPF CHAR-ALUF ERASE-ALUF)
       (SHEET-FORCE-ACCESS (SELF)
         (SHEET-DRAW-RECTANGLE WIDTH BOTTOM-REACHED 0 0
			       (SEND TV:SCREEN :EXCHANGE-TWO-COLORS-ALUF CHAR-ALUF ERASE-ALUF)
			       SELF))))))
);comment

;;;THIS IS A BIT OF A KLUDGE AND SHOULD PERHAPS BE INCLUDED SOMEWHERE ELSE
;;; Window-to-select is a further kludge.  Formerly, this code had
;;; always  caused its superior to be selected when it got a :deexpose
;;; message.   Note, however, that it should still be the superior's
;;; blinkers that are turned off (in :after :select).
(DEFFLAVOR KLUDGE-INFERIOR-MIXIN ((WINDOW-TO-SELECT NIL))
	   ;; KLUDGE-INFERIOR-MIXIN has to be before SELECT-MIXIN for :DEEXPOSE
	   (TV:SELECT-MIXIN TV:ESSENTIAL-WINDOW)
  (:INITABLE-INSTANCE-VARIABLES WINDOW-TO-SELECT)
  (:SETTABLE-INSTANCE-VARIABLES WINDOW-TO-SELECT)
  (:DOCUMENTATION :MIXIN "Turns off superiors blinkers when exposed"))

;;; These next two methods really ought to be converted to use :SELECT-RELATIVE,
;;; but doing so without bugs would be fairly difficult.  The bug is only that
;;; exposing a typeout window inferior to the selected-pane of an unselected
;;; "activity" will not change that activity's selected-pane; later on when
;;; the activity  becomes selected there will be an extraneous blinker blinking.
(DEFWRAPPER (:EXPOSE KLUDGE-INFERIOR-MIXIN) (IGNORE . BODY)
  `(LET ((.OLD-SELECTED-WINDOW. (TV:SHEET-SELECTED-WINDOW SELF)))
     (DECLARE (SPECIAL .OLD-SELECTED-WINDOW.))
     ,@BODY))

(DEFMETHOD (:EXPOSE KLUDGE-INFERIOR-MIXIN :AFTER) (&REST IGNORE)
  (DECLARE (SPECIAL .OLD-SELECTED-WINDOW.))
  (AND (EQ SUPERIOR .OLD-SELECTED-WINDOW.)
       (SEND SELF ':SELECT)))

(DEFMETHOD (:SELECT KLUDGE-INFERIOR-MIXIN :BEFORE) (&OPTIONAL IGNORE)
  (SEND SUPERIOR :INFERIOR-SELECT SELF))

(DEFMETHOD (:SELECT KLUDGE-INFERIOR-MIXIN :AFTER) (&REST IGNORE)
  (TURN-OFF-SHEET-BLINKERS SUPERIOR))  

(DEFMETHOD (:DEEXPOSE KLUDGE-INFERIOR-MIXIN :BEFORE) (&REST IGNORE)
  ;; If we are the selected window of our activity, substitute our superior.
  ;; This first clause is trying to recognize the typeout window being "relatively selected";
  ;; it will not work when there is more than one layer of frame.
  (WHEN (OR (EQ SELF (SEND-IF-HANDLES (SEND SELF :ALIAS-FOR-SELECTED-WINDOWS) :SELECTED-PANE))
	    (EQ SELF (SHEET-SELECTED-WINDOW SELF)))
    (SEND (OR WINDOW-TO-SELECT SUPERIOR) :SELECT-RELATIVE)))

(DEFFLAVOR TYPEOUT-WINDOW ((LABEL NIL) (BORDERS NIL))
  ;; BASIC-TYPEOUT-WINDOW has to be before KLUDGE-INFERIOR-MIXIN so it
  ;; can (SETQ INCOMPLETE-P NIL) on :DEEXPOSE
  (BASIC-TYPEOUT-WINDOW KLUDGE-INFERIOR-MIXIN WINDOW))

;;; This flavor provides a bit array to/from which the superior window's
;;; screen array is saved/restored when the typeout window is
;;; exposed/deexposed.  This is good for superiors that don't know how to
;;; redisplay themselves or can't do it quickly.
(DEFFLAVOR TEMPORARY-TYPEOUT-WINDOW-MIXIN
	((SUPERIOR-BIT-ARRAY NIL)
	 (BITS-SAVED NIL))
	   ()
  (:REQUIRED-FLAVORS BASIC-TYPEOUT-WINDOW)
  (:DOCUMENTATION :MIXIN "Make a typeout window save and restore its superior's bits"))

;;; Save the superior's bits
(DEFMETHOD (:EXPOSE-FOR-TYPEOUT TEMPORARY-TYPEOUT-WINDOW-MIXIN :BEFORE) ()
  ;; Make sure we have an array big enough to save the covered part of our superior
  (IF SUPERIOR-BIT-ARRAY
      (MULTIPLE-VALUE-BIND (OWIDTH OHEIGHT)
	  (DECODE-RASTER-ARRAY SUPERIOR-BIT-ARRAY)
	(UNLESS (AND ( OWIDTH WIDTH) ( OHEIGHT HEIGHT))
	  (SETQ SUPERIOR-BIT-ARRAY (GROW-BIT-ARRAY SUPERIOR-BIT-ARRAY WIDTH HEIGHT WIDTH
						   OWIDTH OHEIGHT NIL))))
      (SETQ SUPERIOR-BIT-ARRAY (MAKE-SHEET-BIT-ARRAY SELF WIDTH HEIGHT)))
  (SEND SUPERIOR :BITBLT-FROM-SHEET ALU-SETA (SHEET-INSIDE-WIDTH) (SHEET-INSIDE-HEIGHT)
	0 0 SUPERIOR-BIT-ARRAY 0 0)
  (SETF BITS-SAVED T))

;;; Restore the superior's bits
;;; This would be slightly faster if it had a :BEFORE :DEEXPOSE method that
;;; saved BOTTOM-REACHED and then only restored that much of the superior.
;;; It doesn't seem to be worth the trouble.
;;; This could also be improved by checking for the case where we weren't
;;; exposed before the :deexpose anyway.
(DEFMETHOD (:DEEXPOSE TEMPORARY-TYPEOUT-WINDOW-MIXIN :AFTER) (&REST IGNORE)
  (WHEN (AND SUPERIOR-BIT-ARRAY BITS-SAVED)
    (SHEET-FORCE-ACCESS (SUPERIOR T)
      (SEND SUPERIOR :BITBLT ALU-SETA (SHEET-INSIDE-WIDTH) (SHEET-INSIDE-HEIGHT)
	    SUPERIOR-BIT-ARRAY 0 0 0 0))
    (SETF BITS-SAVED NIL)))

;;; A real typeout window with this feature mixed in.
(DEFFLAVOR TEMPORARY-TYPEOUT-WINDOW ()
	   (TEMPORARY-TYPEOUT-WINDOW-MIXIN TYPEOUT-WINDOW))

(COMPILE-FLAVOR-METHODS TYPEOUT-WINDOW TEMPORARY-TYPEOUT-WINDOW)
