;;; -*- Mode: LISP; Package: TV; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;Menu type item typeout window
(DEFFLAVOR BASIC-MOUSE-SENSITIVE-ITEMS
	((ITEM-TYPE-ALIST NIL)			;Associates actions with types of items
	 (ITEM-LIST NIL)			;All the currently exposed items
	 ITEM-BLINKER)				;Highlights mousable items
	()
  (:REQUIRED-FLAVORS ESSENTIAL-MOUSE STREAM-MIXIN)
  (:SETTABLE-INSTANCE-VARIABLES ITEM-TYPE-ALIST)
  (:DOCUMENTATION :MIXIN "Menu like operations for a typeout window"))

;;;Item typed out by the :ITEM message
(DEFSTRUCT (TYPEOUT-ITEM LIST (:CONSTRUCTOR NIL))
  TYPEOUT-ITEM-TYPE				;For looking in ITEM-TYPE-ALIST
  TYPEOUT-ITEM-ITEM				;Identifier of item
  TYPEOUT-ITEM-LEFT				;Screen area occupied by item, relative to
  TYPEOUT-ITEM-TOP				;sheet, not to margins
  TYPEOUT-ITEM-RIGHT
  TYPEOUT-ITEM-BOTTOM)

;;;Make a blinker for the menu type items.
(DEFMETHOD (:INIT BASIC-MOUSE-SENSITIVE-ITEMS :AFTER) (IGNORE)
  (SETQ ITEM-BLINKER (MAKE-BLINKER SELF 'HOLLOW-RECTANGULAR-BLINKER ':VISIBILITY NIL)))

(DEFUN-IN-FLAVOR (TYPEOUT-ITEM-WINDOW-REMOVE-ITEMS BASIC-MOUSE-SENSITIVE-ITEMS) ()
  (SETQ ITEM-LIST NIL)
  (BLINKER-SET-VISIBILITY ITEM-BLINKER NIL))

;;;Forget any items on screen if cleared
(DEFMETHOD (:REFRESH BASIC-MOUSE-SENSITIVE-ITEMS :AFTER) (&OPTIONAL IGNORE)
  (OR RESTORED-BITS-P (TYPEOUT-ITEM-WINDOW-REMOVE-ITEMS)))

(DEFMETHOD (:CLEAR-WINDOW BASIC-MOUSE-SENSITIVE-ITEMS :AFTER) ()
  (TYPEOUT-ITEM-WINDOW-REMOVE-ITEMS))

(DEFMETHOD (:CLEAR-REST-OF-WINDOW BASIC-MOUSE-SENSITIVE-ITEMS :AFTER) (&AUX TEM)
  (COND ((SETQ TEM (MEMQ 'WRAPAROUND ITEM-LIST))
	 (RPLACD TEM NIL)
	 (MOUSE-WAKEUP))))

(DEFMETHOD (:EXPOSE-FOR-TYPEOUT BASIC-MOUSE-SENSITIVE-ITEMS :AFTER) ()
  (TYPEOUT-ITEM-WINDOW-REMOVE-ITEMS))

;;; Record a blip when the screen wraps around
(DEFMETHOD (:END-OF-PAGE-EXCEPTION BASIC-MOUSE-SENSITIVE-ITEMS :AFTER) ()
  (PUSH 'WRAPAROUND ITEM-LIST))

;;;Type out item, either as itself or FORMAT-ARGS.  TYPE is used for indexing into
;;;ITEM-TYPE-ALIST
(DEFMETHOD (:ITEM BASIC-MOUSE-SENSITIVE-ITEMS) (TYPE ITEM &REST FORMAT-ARGS)
  (LET ((X CURSOR-X))
    (IF FORMAT-ARGS (LEXPR-FUNCALL #'FORMAT SELF FORMAT-ARGS) (PRINC ITEM SELF))
    (PUSH (LIST TYPE ITEM X CURSOR-Y CURSOR-X (+ CURSOR-Y LINE-HEIGHT)) ITEM-LIST)
    (MOUSE-WAKEUP)))

;;;Make an item without drawing anything (assuming the caller has drawn it already)
;;;Instead you just pass in an enclosing rectangle
(DEFMETHOD (:PRIMITIVE-ITEM BASIC-MOUSE-SENSITIVE-ITEMS)
	   (TYPE ITEM LEFT TOP RIGHT BOTTOM &OPTIONAL (FLAVOR 'BASIC-TYPEOUT-SENSITIVE-ITEM))
  FLAVOR
  (LET ((NEW-ITEM `(,TYPE ,ITEM
		    ,(+ LEFT (SHEET-INSIDE-LEFT)) ,(+ TOP (SHEET-INSIDE-TOP))
		    ,(+ RIGHT (SHEET-INSIDE-LEFT)) ,(+ BOTTOM (SHEET-INSIDE-TOP)))))
    (PUSH NEW-ITEM ITEM-LIST)
    (MOUSE-WAKEUP)
    NEW-ITEM))

;;; Obsolete interface to SI:DISPLAY-ITEM-LIST
(DEFMETHOD (:ITEM-LIST BASIC-MOUSE-SENSITIVE-ITEMS) (TYPE LIST)
  (SI:DISPLAY-ITEM-LIST SELF TYPE LIST))

;;; When mouse leaves the window, turn off the item blinker
(DEFMETHOD (:HANDLE-MOUSE BASIC-MOUSE-SENSITIVE-ITEMS :AFTER) ()
  (SEND ITEM-BLINKER ':SET-VISIBILITY NIL))

;;;Blink any item the mouse points to
(DEFMETHOD (:MOUSE-MOVES BASIC-MOUSE-SENSITIVE-ITEMS) (X Y &AUX ITEM)
  (MOUSE-SET-BLINKER-CURSORPOS SELF)
  (COND ((AND (SETQ ITEM (SEND SELF ':MOUSE-SENSITIVE-ITEM X Y))
	      (ASSQ (TYPEOUT-ITEM-TYPE ITEM) ITEM-TYPE-ALIST))
	 ;; since the set-cursorpos method is going to clip the position,
	 ;; adjust blinker size accordingly.  this isn't really the right way
	 ;; to fix the problem, but it's close enough for old windows
	 (LET* ((LEFT (MAX 0 (- (TYPEOUT-ITEM-LEFT ITEM) (SHEET-INSIDE-LEFT))))
		(TOP (MAX 0 (- (TYPEOUT-ITEM-TOP ITEM) (SHEET-INSIDE-TOP))))
		(BWIDTH (- (TYPEOUT-ITEM-RIGHT ITEM) (SHEET-INSIDE-LEFT) LEFT))
		(BHEIGHT (- (TYPEOUT-ITEM-BOTTOM ITEM) (SHEET-INSIDE-TOP) TOP)))
	   (COND ((AND (> BHEIGHT 0) (> BWIDTH 0))
		  (SEND ITEM-BLINKER :SET-SIZE-AND-CURSORPOS BWIDTH BHEIGHT LEFT TOP)
		  (BLINKER-SET-VISIBILITY ITEM-BLINKER T))
		 (T
		  (BLINKER-SET-VISIBILITY ITEM-BLINKER NIL)))))
	(T (BLINKER-SET-VISIBILITY ITEM-BLINKER NIL))))

;;;Mouse-left selects the blinking item, mouse-right pops up a menu near it
(DEFMETHOD (:MOUSE-CLICK BASIC-MOUSE-SENSITIVE-ITEMS) (BUTTON X Y &AUX ITEM)
  (COND ((SETQ ITEM (SEND SELF ':MOUSE-SENSITIVE-ITEM X Y))
	 (LET ((ITEM-TYPE (TYPEOUT-ITEM-TYPE ITEM)))
	   (COND ((SETQ ITEM-TYPE (ASSQ ITEM-TYPE ITEM-TYPE-ALIST))
		  (SELECTOR BUTTON SI:CHAR-MOUSE-EQUAL
		    (#\MOUSE-1-1
		     (SEND SELF ':FORCE-KBD-INPUT
			   (LIST ':TYPEOUT-EXECUTE (CADR ITEM-TYPE)
				 (TYPEOUT-ITEM-ITEM ITEM)))
		     T)
		    (#\MOUSE-3-1
		     (PROCESS-RUN-FUNCTION "Menu Choose" #'TYPEOUT-MENU-CHOOSE
					   (CDDDR ITEM-TYPE)
					   ITEM
					   SELF
					   (MOUSE-DEFAULT-SUPERIOR SELF)
					   )))))))))


;;;Return the item the mouse if pointing to
(DEFUN-IN-FLAVOR (TYPEOUT-MOUSE-ITEM BASIC-MOUSE-SENSITIVE-ITEMS) (X Y)
  (DO ((ITEMS ITEM-LIST (CDR ITEMS))
       (ITEM) (ITEM-Y) (WRAPPED-AROUND))
      ((NULL ITEMS))
    (IF (SYMBOLP (SETQ ITEM (CAR ITEMS)))
	(SETQ WRAPPED-AROUND T)
	(AND ( (SETQ ITEM-Y (TYPEOUT-ITEM-TOP ITEM)) CURSOR-Y) WRAPPED-AROUND
	     (RETURN NIL))
	(AND ( Y ITEM-Y)
	     (< Y (TYPEOUT-ITEM-BOTTOM ITEM))
	     ( X (TYPEOUT-ITEM-LEFT ITEM))
	     (< X (TYPEOUT-ITEM-RIGHT ITEM))
	     (RETURN ITEM)))))

(DEFMETHOD (:MOUSE-SENSITIVE-ITEM BASIC-MOUSE-SENSITIVE-ITEMS) (X Y)
  (TYPEOUT-MOUSE-ITEM X Y))

(COMMENT
(DEFFLAVOR TYPEOUT-ITEM-TEST-WINDOW () (BASIC-MOUSE-SENSITIVE-ITEMS WINDOW)
  (:DOCUMENTATION :COMBINATION))
)

;;;Select thing to do with selected item from menu
(DEFUN TYPEOUT-MENU-CHOOSE (ALIST TYPEOUT-ITEM TYPEOUT-WINDOW
			    &OPTIONAL (SUPERIOR-WINDOW  TYPEOUT-WINDOW))

  (USING-RESOURCE (MENU MOMENTARY-MENU SUPERIOR-WINDOW)
    ;; Unadvertizable kludge
    (SEND MENU ':SET-LABEL
	  (AND (INSTANCEP (TYPEOUT-ITEM-ITEM TYPEOUT-ITEM))
	       (SEND (TYPEOUT-ITEM-ITEM TYPEOUT-ITEM)
		     ':SEND-IF-HANDLES ':STRING-FOR-PRINTING)))
    (SEND MENU ':SET-ITEM-LIST ALIST)
    (MULTIPLE-VALUE-BIND (DX DY NOT-FOUND-P)
	(SHEET-CALCULATE-OFFSETS TYPEOUT-WINDOW SUPERIOR-WINDOW NIL)
      (UNLESS NOT-FOUND-P
	(MOVE-WINDOW-NEAR-RECTANGLE MENU
				  (+ DX (TYPEOUT-ITEM-LEFT TYPEOUT-ITEM))
				  (+ DY (TYPEOUT-ITEM-TOP TYPEOUT-ITEM))
				  (+ DX (TYPEOUT-ITEM-RIGHT TYPEOUT-ITEM))
				  (+ DY (TYPEOUT-ITEM-BOTTOM TYPEOUT-ITEM)))))
    (LET ((CHOICE-RESULT (SEND MENU ':CHOOSE)))
      (AND CHOICE-RESULT
	   (SEND TYPEOUT-WINDOW ':FORCE-KBD-INPUT
		 (LIST ':TYPEOUT-EXECUTE CHOICE-RESULT (TYPEOUT-ITEM-ITEM TYPEOUT-ITEM)))))))



;;; Useful for adding new types in various places
(DEFMACRO ADD-TYPEOUT-ITEM-TYPE (ALIST TYPE NAME FUNCTION &OPTIONAL DEFAULT-P DOCUMENTATION)
  `(SETQ ,ALIST (ADD-TYPEOUT-ITEM-TYPE-1 ,ALIST ',TYPE ',FUNCTION ,NAME ,DEFAULT-P
					 ,DOCUMENTATION)))

(DEFUN ADD-TYPEOUT-ITEM-TYPE-1 (ALIST TYPE FUNCTION NAME DEFAULT-P DOCUMENTATION &AUX EL1 EL2)
  (OR (SETQ EL1 (ASSQ TYPE ALIST))
      (PUSH (SETQ EL1 (LIST TYPE NIL NIL)) ALIST))
  (AND DEFAULT-P (SETF (SECOND EL1) FUNCTION))
  (OR (SETQ EL2 (ASSOC NAME (CDDDR EL1)))
      (PUSH (SETQ EL2 (NCONS NAME)) (CDDDR EL1)))
  (SETF (CDR EL2) `(:VALUE ,FUNCTION :DOCUMENTATION ,DOCUMENTATION))
  (SETF (THIRD EL1) (MAKE-TYPEOUT-MOUSE-PROMPT (THIRD EL1) (SECOND EL1)
					       (CDDDR EL1)))
  ALIST)

(DEFMETHOD (:WHO-LINE-DOCUMENTATION-STRING BASIC-MOUSE-SENSITIVE-ITEMS) (&AUX ITEM ITEM-TYPE
									      X Y)
  (MULTIPLE-VALUE (X Y)
    (SHEET-MOUSE-POSITION SELF))
  (AND (SETQ ITEM (SEND SELF ':MOUSE-SENSITIVE-ITEM X Y))
       (SETQ ITEM-TYPE (TYPEOUT-ITEM-TYPE ITEM))
       (SETQ ITEM-TYPE (ASSQ ITEM-TYPE ITEM-TYPE-ALIST))
       (THIRD ITEM-TYPE)))

(DEFUN MAKE-TYPEOUT-MOUSE-PROMPT (STRING DEFAULT ALIST)
  (IF STRING
      (STORE-ARRAY-LEADER 0 STRING 0)
      (SETQ STRING (MAKE-ARRAY 100. ':TYPE 'ART-STRING ':LEADER-LIST '(0))))
  (DO ((L ALIST (CDR L)))
      ((NULL L))
    (AND (EQ DEFAULT (GET (CAR L) ':VALUE))
	 (SETQ DEFAULT (OR (GET (CAR L) ':DOCUMENTATION)
			   (CAAR L)))))
  (FORMAT STRING "Left: ~A  Right: menu of " DEFAULT)
  (DO ((L ALIST (CDR L))
       (FIRST-P T NIL))
      ((NULL L)
       (ARRAY-PUSH STRING #/.))
    (IF FIRST-P
	(SETQ FIRST-P NIL)
	(FORMAT STRING ", "))
    (FORMAT STRING "~A" (CAAR L)))
  STRING)


;;; Typeout window sensitive items. This is an implemenatation of the functionality that
;;; used to be provided by basic-mouse-sensitive-items based on the new mouse-sensitivity
;;; stuff. Following this implementation is a defflavor for basic-mouse-sensitive-items
;;; that can be used for compatibility.

(DEFFLAVOR BASIC-TYPEOUT-SENSITIVE-ITEMS
	((ITEM-LIST NIL))			;All the currently exposed items
	(TYPED-SENSITIVE-ITEMS-MIXIN STREAM-MIXIN)
  (:DOCUMENTATION :MIXIN "Menu like operations for a typeout window"))

(DEFFLAVOR BASIC-TYPEOUT-SENSITIVE-ITEM
	((USER-ITEM NIL))			;This is the item that the user supplied
						;as the ITEM argument to either the :ITEM
						;or :PRIMITIVE-ITEM message.
	(TYPED-SENSITIVE-ITEM-MIXIN
	 BASIC-RECTANGULAR-SENSITIVE-ITEM
	 BASIC-HIGHLIGHTING-MIXIN
	 BASIC-SENSITIVE-ITEM)
  (:DEFAULT-INIT-PLIST :SENSITIVITY ':INSIDE :HIGHLIGHTER-LINE-WIDTH 1)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

;;; Flush all of a basic-typeout-sensitive-items window's sensitive-items.
;;; This is done after things like :CLEAR-WINDOW.
(DEFUN-IN-FLAVOR (TYPEOUT-SENSITIVE-ITEMS-REMOVE-ITEMS BASIC-TYPEOUT-SENSITIVE-ITEMS)
	      (&REST IGNORE)
  (SENSITIVE-ITEM-MODIFY-ATTRIBUTES (:INFERIOR-SENSITIVE-ITEMS ITEM-LIST NIL)))

(DEFMETHOD (:REFRESH BASIC-TYPEOUT-SENSITIVE-ITEMS :AFTER) (&OPTIONAL IGNORE)
  (OR RESTORED-BITS-P (TYPEOUT-SENSITIVE-ITEMS-REMOVE-ITEMS)))

(DEFMETHOD (:CLEAR-WINDOW BASIC-TYPEOUT-SENSITIVE-ITEMS :AFTER) ()
  (TYPEOUT-SENSITIVE-ITEMS-REMOVE-ITEMS))

(DEFMETHOD (:EXPOSE-FOR-TYPEOUT BASIC-TYPEOUT-SENSITIVE-ITEMS :AFTER) ()
  (TYPEOUT-SENSITIVE-ITEMS-REMOVE-ITEMS))

;;; The :ITEM message is the highest-level way to make a new item. It types out the item
;;; (either using PRINC or taking a format-control-string and format args), and records
;;; the item in the item-list. The TYPE argument should be the item type, this is used
;;; to look up operations on the item (see typed-sensitive-items-mixin).
(DEFMETHOD (:ITEM BASIC-TYPEOUT-SENSITIVE-ITEMS) (TYPE ITEM &REST FORMAT-ARGS)
  (LET ((.MIN-X. CURSOR-X) (.MAX-X. CURSOR-X))
    (DECLARE (SPECIAL .MAX-X. .MIN-X.))
    (LET ((TOP  CURSOR-Y))
      (IF FORMAT-ARGS (LEXPR-FUNCALL #'FORMAT SELF FORMAT-ARGS) (PRINC ITEM SELF))
      (SEND SELF :PRIMITIVE-ITEM TYPE ITEM (- .MIN-X. (SHEET-INSIDE-LEFT))
	    (- TOP (SHEET-INSIDE-TOP))
	    (MAX .MAX-X. CURSOR-X) 
	    (- (+ CURSOR-Y LINE-HEIGHT)
	       (SHEET-INSIDE-TOP))))))

(DEFWRAPPER (:TYO BASIC-TYPEOUT-SENSITIVE-ITEMS) ((CHAR) . BODY)
  `(CL:LOCALLY
     (DECLARE (SPECIAL .MIN-X. .MAX-X.))
     (WHEN (AND (CHAR= CHAR #\CR) (VARIABLE-BOUNDP .MAX-X.))
       (SETQ .MAX-X. (MAX .MAX-X. CURSOR-X)))
     ,@BODY
     (WHEN (AND (CHAR= CHAR #\CR) (VARIABLE-BOUNDP .MIN-X.))
       (SETQ .MIN-X. (MIN .MIN-X. CURSOR-X)))))

;;; Obsolete interface to SI:DISPLAY-ITEM-LIST
(DEFMETHOD (:ITEM-LIST BASIC-TYPEOUT-SENSITIVE-ITEMS) (TYPE LIST)
  (SI:DISPLAY-ITEM-LIST SELF TYPE LIST))

;;; The :PRIMITIVE-ITEM message is the lowest level (legal) way to make an item. It does
;;; no drawing of the item itself (the caller must have drawn it already), instead the
;;; caller just passes in the item's enclosing rectangle.
(DEFMETHOD (:PRIMITIVE-ITEM BASIC-TYPEOUT-SENSITIVE-ITEMS)
	   (TYPE ITEM LEF TOP RIG BOT &OPTIONAL (FLAVOR 'BASIC-TYPEOUT-SENSITIVE-ITEM))
  (LET ((NEW-ITEM (MAKE-INSTANCE FLAVOR
				 :SENSITIVE-ITEM-TYPE TYPE
				 :USER-ITEM ITEM
				 :X LEF
				 :Y TOP
				 :WIDTH (- RIG LEF 1)
				 :HEIGHT (- BOT TOP 1))))
    (SENSITIVE-ITEM-MODIFY-ATTRIBUTES (:INFERIOR-SENSITIVE-ITEMS
					ITEM-LIST
				     (CONS NEW-ITEM ITEM-LIST)))
    NEW-ITEM))

;;; When the screen wraps around make a note of it in the item-list. Have to do this to be
;;; able to tell what items are still visible on the on the screen at any time.
(DEFMETHOD (:END-OF-PAGE-EXCEPTION BASIC-TYPEOUT-SENSITIVE-ITEMS :AFTER) ()
  (PUSH 'WRAPAROUND ITEM-LIST))

(DEFMETHOD (:CLEAR-REST-OF-WINDOW BASIC-TYPEOUT-SENSITIVE-ITEMS :AFTER) ()
  (LET ((WRAPAROUND-POINT (MEMQ 'WRAPAROUND ITEM-LIST)))
    (WHEN WRAPAROUND-POINT
      (SENSITIVE-ITEM-MODIFY-ATTRIBUTES
	(:INFERIOR-SENSITIVE-ITEMS ITEM-LIST (BUTLAST WRAPAROUND-POINT))))))

(DEFMETHOD (:MAP-OVER-SENSITIVE-ITEMS BASIC-TYPEOUT-SENSITIVE-ITEMS) (FUNCTION &REST IGNORE)
  (DO ((ITEMS ITEM-LIST (CDR ITEMS))
       (ITEM) (WRAPPED-AROUND))
      ((NULL ITEMS))
    (IF (SYMBOLP (SETQ ITEM (CAR ITEMS)))
	(SETQ WRAPPED-AROUND T)
	(AND ( (SEND ITEM :Y) CURSOR-Y) WRAPPED-AROUND
	     (RETURN NIL))
	(FUNCALL FUNCTION ITEM))))

(DEFMETHOD (:EXECUTE BASIC-TYPEOUT-SENSITIVE-ITEMS) (OP ITEM)
  ;; The basic-typeout-sensitive-item instances contain the objects that the
  ;; user passed to us (e.g. via the :ITEM message). That is the object the
  ;; user wants to see back, not the basic-typeout-sensitive-item instance.
  (SEND SELF :FORCE-KBD-INPUT (LIST ':TYPEOUT-EXECUTE OP (SEND ITEM :USER-ITEM))))

;;; Implementation of the old basic-mouse-sensitive-items flavor in terms of
;;; the new basic-typeout-sensitive-items-flavor.  These needs to be uncommented
;;; out when its positive the new stuff works.

(COMMENT

(COMPILER:MAKE-OBSOLETE BASIC-MOUSE-SENSITIVE-ITEMS
			"That flavor is now called BASIC-TYPEOUT-SENSITIVE-ITEMS."
			defflavor)

(DEFFLAVOR BASIC-MOUSE-SENSITIVE-ITEMS () (BASIC-TYPEOUT-SENSITIVE-ITEMS))

(DEFMACRO ADD-TYPEOUT-ITEM-TYPE (ALIST TYPE NAME FUNCTION &OPTIONAL DEFAULT-P DOCUMENTATION)
  `(SETQ ,ALIST (ADD-TYPEOUT-ITEM-TYPE-1 ,ALIST ',TYPE ',FUNCTION ,NAME ,DEFAULT-P
					 ,DOCUMENTATION)))

(DEFUN ADD-TYPEOUT-ITEM-TYPE-1 (ALIST TYPE NAME FUNCTION DEFAULT-P DOCUMENTATION)
  (ADD-SENSITIVE-ITEM-TYPE-1 ALIST TYPE FUNCTION NAME DOCUMENTATION DEFAULT-P T))

;;; Following is a list of the flavors that depend on basic-mouse-sensitive-items
;;; and a description of the disposition of each:
;;;
;;;  (SI:FLAVOR-DEPENDED-ON-BY-ALL (GET 'BASIC-MOUSE-SENSITIVE-ITEMS 'SI:FLAVOR)) ==>
;;;
;;;   TYPEOUT-WINDOW-WITH-MOUSE-SENSITIVE-ITEMS
;;;
;;;   ;; As near as I can tell, the flavor examiner doesn't really use
;;;   ;; the functionality provided by basic-mouse-sensitive-items.
;;;   FLAVEX:HISTORY-PANE
;;;   FLAVEX:EXAMINE-PANE-WITH-TYPEOUT
;;;   FLAVEX:EXAMINE-PANE
;;;   FLAVEX:SCROLL-PANE
;;;   
;;;   ZWEI:EDITOR-TYPEOUT-WINDOW
;;;   ZWEI:BACKGROUND-TYPEOUT-WINDOW
;;;   
;;;   
;;;   ;; The first of these is built on the second, both have *ZMAIL-TYPEOUT-ITEM-ALIST*
;;;   ;; as the value of their :item-type-alist init-option.
;;;   ZWEI:ZMAIL-SUMMARY-TYPEOUT-WINDOW
;;;   ZWEI:ZMAIL-TYPEOUT-WINDOW
;;;
;;;   ;; These also seem to use *ZMAIL-TYPEOUT-ITEM-ALIST*
;;;   ZWEI:DAY-IN-SEVERAL-WEEKS-PANE
;;;   ZWEI:DAY-IN-WEEK-PANE
;;;   ZWEI:DAY-IN-PERIOD-PANE
;;;   ZWEI:TRUNCATING-MOUSE-SENSITIVE-ITEMS
;;;
;;;   ****************************************************
;;;   Below here the flavors have been changed to use the
;;;   new basic-typeout-sensitive-items.  They work too.
;;;   ****************************************************
;;;   FED:FED-MOUSABLE-TYPEOUT-WINDOW
;;;   FED:REGISTER-PANE			
;;;   FED:REGISTER-MIXIN			
;;;					
;;;   PRESS:POP-UP-HARDCOPY-WINDOW		

)


;; Use this flavor of item when you want to nest items
(DEFFLAVOR NESTED-SENSITIVE-ITEM
	()
	(SUPERIOR-SENSITIVE-ITEM-MIXIN
	 BASIC-TYPEOUT-SENSITIVE-ITEM))

;;--- This appears to never be called on items, only on windows.  What this
;;--- indicates is that the modularity of superior-sensitive-item-mixin is
;;--- no good, since it gets mixed into both items and windows.  We need to
;;--- define this anyway since it is a required method.
(DEFMETHOD (:MAP-OVER-SENSITIVE-ITEMS NESTED-SENSITIVE-ITEM)
	   (FUNCTION TEST-X TEST-Y)
  FUNCTION TEST-X TEST-Y
  NIL)



(DEFFLAVOR TYPEOUT-WINDOW-WITH-MOUSE-SENSITIVE-ITEMS ((LABEL NIL) (BORDERS NIL))
  (BASIC-MOUSE-SENSITIVE-ITEMS
   ;; BASIC-TYPEOUT-WINDOW has to be before KLUDGE-INFERIOR-MIXIN so it
   ;; can (SETQ INCOMPLETE-P NIL) on :DEEXPOSE
   BASIC-TYPEOUT-WINDOW KLUDGE-INFERIOR-MIXIN
   WINDOW)
  (:DOCUMENTATION :COMBINATION "Typeout window with item operations"))

(COMPILE-FLAVOR-METHODS BASIC-TYPEOUT-SENSITIVE-ITEM
			 TYPEOUT-WINDOW-WITH-MOUSE-SENSITIVE-ITEMS)
