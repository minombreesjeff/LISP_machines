;;; -*- Mode: LISP; Syntax: Zetalisp; Base: 8; Package: COLOR; Lowercase: Yes -*-


;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Note:  This really wants to be in package COLOR.  This stuff is documented 
;;; that way in the color manual, even though there's some redundancy.

#|
  This macro, in conjunction with the various drawing functions and other things
in this file, implements an important extension to the behavior of alus on the 
b&w screen.  This should be passed to doc-changes.

  On all screens, B&W and color, we support the notion that drawing operations
are determined by three parameters, an ALU (or combination function) a MASK of
bits-per-pixel may be afffected by the drawing operation, and a DATA word, that
is the implied first operand of the operation.  These three things collectively
constitute a standard ALU.

  The motivation for this change is that on the color screen, the mask and data
are both logically necessary, and we want to support using the same kinds of drawing
specifications on all screens.  We expect that programs concerned only with the
B&W screen will be completely unaffected, and can safely ignore this change.  The
importance of the change is that programs concerned mainly with the color screen
will need less special caseing to do reasonable things on the b&w screen.

  Previously on the B&W screen, DATA and MASK were always 1.  Now, they can be controlled
by various means, and if the current ALU specifies such controls, they will be effective
on all screens.
|#

;;(DEFVAR TV:BITBLT-UNPACKING-CONSTANT -1 "Default value to draw with")
;;(DEFVAR TV:BITBLT-UNPACKING-MASK -1 "Default mask to draw under")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Useful ALU stuff
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar *all-the-alus* nil)
(defvar *all-the-alu-fns* nil)
;; these are the magic numbers that will be computed later on
;; they are included here because it isn't a good idea to have
;; an intermediate stage where the numbers aren't valid
(eval-when (compile load eval)
(defvar *alu-info* '#.(cl:make-array 16. :initial-contents '#o(
							       0403 0612 0505 0617
							       1440 1650 1445 1645
							       0520 0730 0524 0736
							       1463 1770 1464 1677)))
)

(comment 

;; this is the standard "magic number" chart for boolean operations

(boole fn x y ...)   if fn is "abcd" then
        y	0	1	2	3	4	5	6	7
      | 0  1	0	x*y	~x*y	y	x*~y	x	x#y	x+y
   ----------
    0 | a  c	8	9	10	11	12	13	14	15
  x   |  	~x+*~y	x=y	~x	~x+y	~y	x+~y	~x+~y	-1
    1 | b  d

)


(defun add-to-extended-alus (name value fn 1b-alu &aux a)
  (cond ((setq a (assq value *all-the-alus*))
	 (setf (second a) name)
	 )
	(t (push `(,value ,name ,1b-alu) *all-the-alus*)))

  (cond ((setq a (assq value *all-the-alu-fns*))
	 (setf (second a) fn)
	 (setf (third a) 1b-alu)
	 )
	(t (push `(,value ,fn ,1b-alu) *all-the-alu-fns*)))
  )

(defconstant %%alu-source-use (byte 2 0))        ;; code for use of source
(defconstant %%alu-complementary-source (byte 4 2)) ;; complementary alu
(defconstant %%complemented-source (byte 1 6))   ;; alu uses ~x
(defconstant %%b&w-font-alu (byte 4 7))	  ;; alternate alu for B&W font
(defconstant alu-source-used 0)
(defconstant alu-source-zeros-ignored 1)
(defconstant alu-source-ones-ignored 2)
(defconstant alu-source-ignored 3)

(defun add-to-boolean-alus-internal (value names desc &aux a)

  (cond ((setq a (assq value *all-the-alus*))
	 (rplacd a (copylist names)))
	(t (push `(,value ,@(copylist names)) *all-the-alus*)))

  (loop with new-val = (dpb value %%alu-complementary-source 0)
	and j = desc
	while j
	as i = (car j)
	do
    (selectq i
      (:b&w-font
       (setf (ldb %%b&w-font-alu new-val)
	     (cond ((fixp (cadr j)) (cadr j))
		   (t (symeval (cadr j)))))
       (setq j (cdr j)))
      (:source-ignored
       (setf (ldb %%alu-source-use new-val) alu-source-ignored))
      (:source-zeros-ignored
       (setf (ldb %%alu-source-use new-val) alu-source-zeros-ignored))
      (:source-ones-ignored
       (setf (ldb %%alu-source-use new-val) alu-source-ones-ignored))
      (:not-source
       (setf (ldb %%complemented-source new-val) 1))
      (t (cond ((fixp i)
		(setf (ldb %%alu-complementary-source new-val) i))
	       (t (ferror "bad keyword ~A" desc))))
      )
    (setq j (cdr j))
	finally (setf (aref *alu-info* value) new-val)
		)
  )

(defmacro add-to-boolean-alus (value name &rest desc)
  `(add-to-boolean-alus-internal ',value ',name ',desc))

(defmacro define-boolean (value names &rest desc)
  (cond ((nlistp names) (setq names (list names))))
  `(progn 'compile
	  (add-to-boolean-alus ,value ,names ,@(copylist desc))
	  ,@(loop for i in names collect
		  `(defconstant ,i ,value))))

(defmacro def-extended-alu (name value fn &optional (1b-alu value))
  `(progn 
     'compile
     (add-to-extended-alus ',name ',value ',fn ,1b-alu)
     ;;don't use defconstant, these values can change at runtime
     (defconst ,name ,value)
     ))

;; These are available as CL:BOOLE-mumble also.  CLtL, p. 222.
(define-boolean 0 (alu-0s alu-setz) :b&w-font tv:alu-andca :source-ignored)
(define-boolean 1 (alu-x*y alu-and) :b&w-font 3            :source-ones-ignored 2)
(define-boolean 2 alu-~x*y          :b&w-font tv:alu-andca :source-zeros-ignored
		  					   :not-source 1)
(define-boolean 3 (alu-y alu-noop)  :b&w-font 3 	   :source-ignored)
(define-boolean 4 alu-x*~y          :b&w-font tv:alu-xor   8)
(define-boolean 5 (alu-x alu-seta ) :b&w-font tv:alu-ior   10.)
(define-boolean 6 (alu-x#y alu-xor) :b&w-font tv:alu-xor   :source-zeros-ignored 9)
(define-boolean 7 (alu-x+y alu-ior) :b&w-font tv:alu-ior   :source-zeros-ignored 11)
(define-boolean 8. alu-~x*~y        :b&w-font tv:alu-andca :not-source 4)
(define-boolean 9. alu-x=y	    :b&w-font 3	           :not-source 6)
(define-boolean 10. alu-~x          :b&w-font tv:alu-andca :not-source 5)
(define-boolean 11. alu-~x+y        :b&w-font 3		   :source-ones-ignored
							   :not-source 7)
(define-boolean 12. alu-~y          :b&w-font tv:alu-xor   :source-ignored)
(define-boolean 13. alu-x+~y        :b&w-font tv:alu-ior   :not-source 14.)
(define-boolean 14. alu-~x+~y       :b&w-font tv:alu-xor   13.)
(define-boolean 15. (alu-1s alu-seto) :b&w-font tv:alu-ior :source-ignored)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; extended alus
;;
;; Extended alus are ***only*** used as communucation between low level
;; system code and microcode.  Fuck not with them!
;;
;; Extended alus are indicated by the sign bit, here renames as %extended-alu
;; Below that is a 7 bit field, designated %%extended-alu-opcode, interpreted as follows
;; 
;; 0  Regular "draw" operations, 
;;    For draw operations, templates may be used and write masks may be used
;; 1  "Paint" operations, including softe matte and alu-add
;; 2  "Shift" operations, bitblt hacks to simulate the packed pixel mode arrays.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; extended alus
;;
;; Extended alus are ***only*** used as communucation between low level
;; system code and microcode.  Fuck not with them!
;;
;; Extended alus are indicated by the sign bit, here renames as %extended-alu
;; Below that is a 7 bit field, designated %%extended-alu-opcode, interpreted as follows
;; 
;; 0  Regular "draw" operations, 
;;    For draw operations, templates may be used and write masks may be used
;; 1  "Paint" operations, including softe matte and alu-add
;; 2  "Shift" operations, bitblt hacks to simulate the packed pixel mode arrays.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; macro to duplicate masks out to at least EXTENSION-SIZE bits.  Specify a mask and
; either an elements-per-q or a bits-per-pixel.
; better code is generated if the element size is a compile time constant
;
(defmacro effective-write-mask (mask elements-per-q &optional bits-per-pixel
				(extension-size 32.))
  (if (or (fixp elements-per-q)(fixp bits-per-pixel))
      (loop with form = mask
	    as siz = (or bits-per-pixel (// 32. elements-per-q)) then (* siz 2)
	    until ( extension-size siz)
	    do
	(setq form `(let ((a ,form))
		      (%logdpb a (byte ,siz ,siz) a)))
	    finally (return form))
      `(let ((m ,mask))
	 (when ( m -1)
	   (tagbody
	     (selector ,(or bits-per-pixel elements-per-q) =
	       ,@(if bits-per-pixel
		     `((32. (go l32))
		       (16. (go l16))
		       (8. (go l8))
		       (4 (go l4))
		       (2 (go l2))
		       (t (go l1)))
		     `((1 (go l32))
		       (2 (go l16))
		       (4 (go l8))
		       (8. (go l4))
		       (16. (go l2))
		       (t (go l1)))))
	  l1 (setq m (%logdpb m (byte 1 1) m))
	  l2 ,@(when (< 2 extension-size)
		 `( (setq m (%logdpb m (byte 2 2) m))))
	  l4 ,@(when (< 4 extension-size)
		 `( (setq m (%logdpb m (byte 4 4) m))))
	  l8 ,@(when (< 8 extension-size)
		 `( (setq m (%logdpb m (byte 8. 8.) m))))
	  l16 ,@(when (< 16. extension-size)
		  `((setq m (%logdpb m (byte 16. 16.) m))))
	  l32))
	 m)))

(defconstant %extended-alu (%logdpb 1 (byte 1 #o37 ) 0) "Pixel oriented extended alus")
(defconstant %%extended-alu-opcode (byte 7 24.))
(defconstant %paint-alu (%logdpb 1 %%extended-alu-opcode 0) "Special alus for paint")
(defconstant %shift-alu (%logdpb 2 %%extended-alu-opcode 0) "Special shift alus")
(defconstant %template-alu #O20 "Use source operand as a template")
(defconstant %template-complement-alu #O40 "Use complement of source operans as a template")
(defconstant %masked-alu #O100 "Use the mask register")
(defconstant %folded-fill-alu #o200 "Use folded fill mode on photon")


(def-extended-alu alu-add #,(logior %extended-alu %paint-alu 0) alu-plus-internal tv:alu-xor)
(def-extended-alu alu-shift #,(logior %extended-alu %shift-alu 0) alu-shift-internal alu-noop)
(defvar color-microcode-p t)


(defun alu-plus-internal (dat src mask)
  (logior (logand (%32-bit-plus dat src) mask)
	  (boole alu-x*~y src mask)))

(defun alu-shift-internal (dat src mask)
  src mask
  dat)

(defun test-for-color-microcode ()
  (let ((ap (logior %extended-alu %paint-alu 0))
	(tv:bitblt-unpacking-constant 0))
    (si:with-stack-array (test '(1 32.) :type 'art-1b)
      (multiple-value-bind (ignore bad)
	  (catch-error
	    (tv:%draw-rectangle-internal 1 1 0 0 ap test)
	    nil)
	(setq color:alu-add
	      (if bad
		  tv:alu-xor ap)
	      color-microcode-p (not bad))))
    color-microcode-p))

(add-initialization :test-for-add '(test-for-color-microcode) '(si:now))

(defconstant tv:%literal-alu #o20)
  ;;this was promised to permit font operations to revert to release 6 behavior

(compiler:make-obsolete combine-data-and-mask "Replaced by more efficient primitives")


(defmacro macro-combine-data-and-mask
	  (bool data mask &key (template nil) (mask-available nil) (fill-available nil))
  
  #||
  BOOL is a constant boolean opcode
  DATA and MASK are variables, the fill data and plane mask
  MASK-AVAILABLE indicates the treatment of the plane mask
     NIL 	meaning microcode will be used, so it is necessary for non-uniform
     		data or mask to be flagged as extended alus
     :SOFTWARE  meaning that macrocode which respects data will be used, so
     		only non-uniform masks must be flagged.  This is the case for 
		:draw-point and friends.
     :PACKED 	incating that a combination of real plane mask and pixel mask
     		can be used to simulate a plane mask.  This mode is used by
		the broadcast resolution board
     T		to indicate a real hardware plane mask is available.

  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")Some comments on the contract for the result

0  The eventual result, in all cases, will be
      (logior (logand mask (boole alu data old-data))
	      (logand (lognot mask) old-data))

  This is acheived in different ways, depending on what combinations
  of hardware and software are available.

  if TEMPLATE MODE is specified, we must either use the fill hardware
  or generate an extended alu with the template bit set.  In some cases,
  fill hardware will be available but not suitable to the rest of the
  operands, so we use extended alus anyway.

  if FILL MODE hardware is available, and the operation can be cast as
  a SETA with any data, then it is.  This is the only combination where 
  ALU will be a plain alu rather than an "extended" alu when DATA isn't -1
  If the operation can't be cast as a SETA, we return the NO-FILL flag as
  a fourth value, indicating that the fill mode hardware can't be used for
  this operation.  All fill mode hardware operations must use alu-seta,
  because that is the only thing the hardware can do.

  we prefer to cast the operation with data = -1.  This avoids the need to
  use extended alus if a hardware mask is available, as is the case with the
  cadbuffer-ii overlay and some cadbuffer-i template operations.  In all cases
  except with fill mode hardware in use, data-1 forces us to use extended alus.
  
  We note when the particular combinations of alu, data and mask permit
  optimization of the whole operation into a noop, or converting to a 
  more specialized operation that will run faster.  for example,
   IOR data =1  mask = -1
  will be converted to
   SETO data = -1  mask = 1
  if a mask is available, but to
   Extended IOR data = 1 mask = -1 (extended because the data isn't -1)
  is a mask isn't available.


     ||#
  (let ((boolsym bool)
	(bool (eval bool)))

  (labels ((template-alu (alu &optional no-fill)
	     (if (or (not template)
		     (and fill-available (not no-fill)))
		 (if (and fill-available (not no-fill))
		     (selector alu eql
		       ((alu-0s alu-1s alu-x) alu-x)
		       (t (ferror "can only do alu-x in template mode")))
		     alu)
		 (logior %extended-alu %template-alu
			 (selector alu eql
			   ((alu-0s alu-1s) alu-x)
			   (alu-~y alu-x#y)
			   (t alu)))))
	   (uniform-packed-alu (alu mask escape-alu &optional escape-not-masked)
	       `(let* ((pixmask -1)
		       (b0 (ldb (byte 8 24.) ,mask))
		       (b1 (ldb (byte 8 16.) ,mask)))
		  (block letd
		    (if (zerop b0)
			(setq pixmask (logxor pixmask (lsh #x11111111 3))))
		    (if (zerop b1)
			(setq pixmask (logxor pixmask (lsh #x11111111 2)))
			(cond ((and ( b1 b0)
				    ( b0 0))
			       (return-from letd
				 (values ,escape-alu
					 ,(if escape-not-masked
					      `(lognot ,mask)
					      mask)
					 -1)))
			      (t (setq b0 b1))))
		    (let ((b2 (ldb (byte 8 8) ,mask)))
		      (if (zerop b2)
			  (setq pixmask (logxor pixmask (lsh #x11111111 1)))
			  (cond ((and ( b2 b0)
				      ( b0 0))
				 (return-from letd
				   (values ,escape-alu
					   ,(if escape-not-masked
						`(lognot ,mask)
						mask)
					   -1)))
				(t (setq b0 b2)))))
		    (let ((b3 (ldb (byte 8 0) ,mask)))
		      (if (zerop b3)
			  (setq pixmask (logxor pixmask (lsh #x11111111 0)))
			  (cond ((and ( b3 b0)
				      ( b0 0))
				 (return-from letd
				   (values ,escape-alu
					   ,(if escape-not-masked
						`(lognot ,mask)
						mask) -1)))
				 (t (setq b0 b3)))))
		    ;;if we get this far, the mask is uniform enough that
		    ;;we can use it in conjunction with the pixel mask
		    (setq b0 (%logdpb b0 (byte 8 8) b0))
		    (values ,alu
			    -1
			    (%logdpb b0 (byte  16. 16.) b0)
			    pixmask
			    )))))

    (if ( 0 bool 15.)
	
	(let ((info (aref *alu-info* bool ))
	      not-data)
	  
	  (cond ((not (zerop (ldb %%complemented-source info)))
		 (setq bool (ldb %%alu-complementary-source info))
		 (setq info (aref *alu-info* bool))
		 (setq not-data t)))
	  
	  (select (ldb %%alu-source-use info)
	    (alu-source-ones-ignored
	     #||
	     (ALU-X*Y -> ALU-X*Y ONES-IGNORED -1)
	     (ALU-~X*Y -> ALU-X*Y ONES-IGNORED 0)
	     ||#
	     `(let ((d ,`(boole ,(if (memq mask-available '(:packed t))
					    (if not-data alu-x*y alu-~x*y)
					    (if not-data alu-~x+~y alu-x+~y))
				       ,data ,mask))
		    )
		,(selectq mask-available
		   (:software
		    `(cond ((= d -1)
			    (values alu-noop -1 -1
				    ,@(when fill-available (list t))
				    ))
			   ((= d 0)
			    (values ,(template-alu alu-0s) 0 -1))
			   (t (values ,(template-alu alu-x*y) d -1))))
		   (:packed 
		    `(cond ((= d 0)
			    (values alu-noop -1 -1
				    ,@(when fill-available (list t))
				    ))
			   ((= d -1)
			    (values ,(template-alu alu-0s) 0 -1))
			   (t ,(uniform-packed-alu alu-0s 'd
						  (template-alu
						     (logior %extended-alu alu-x*y))
						  t)))
		    )
		   (nil
		    `(cond ((= d -1)
			    (values alu-noop -1 -1
				    ,@(when fill-available (list t))
				    ))
			   ((= d 0)
			    (values ,(template-alu alu-0s) 0 -1))
			   (t (values ,(template-alu (logior %extended-alu alu-x*y))
				      d
				      -1))))
		   (t `(cond ((= d 0)
			      (values alu-noop -1 -1
				      ,@(when fill-available (list t))
				      ))
			     (t (values ,(template-alu alu-0s) 0 d)))
		      )))
	     )
	    (alu-source-zeros-ignored
	     #||
	     (ALU-X#Y -> ALU-X#Y ZEROS-IGNORED -1)
	     (ALU-X=Y -> ALU-X#Y ZEROS-IGNORED 0)
	     (ALU-X+Y -> ALU-X+Y ZEROS-IGNORED -1)
	     (ALU-~X+Y -> ALU-X+Y ZEROS-IGNORED 0)
	     ||#
	     (if (= bool alu-x+y)
		 `(let ((d (boole ,(if not-data `alu-~x*y `alu-x*y) ,data ,mask)))
		    (cond ((= d 0) (values alu-noop -1 -1
					   ,@(when fill-available (list t))
					   )) ;; a complete noop
			  ,@(selectq mask-available
			      (:software
			       `(((= d -1) (values ,(template-alu alu-1s) -1 -1))
				 (t (values ,(template-alu  alu-x+y) d -1)))
			       )
			      (nil
			       `(((= d -1) (values ,(template-alu alu-1s) -1 -1))
				 (t (values ,(template-alu (logior %extended-alu alu-x+y))
					    d -1))))
			      (:packed
			       `(((= d -1) (values ,(template-alu alu-1s) -1 -1))
				 (t ,(uniform-packed-alu alu-1s 'd
							 (template-alu
							   (logior %extended-alu
								   alu-x+y))))))
			      (t `((t (values ,(template-alu alu-1s) -1 d)))))))
		 `(let ((d (boole ,(if not-data `alu-~x*y `alu-x*y) ,data ,mask)))
		    (cond ((= d 0) (values alu-noop -1 -1
					   ,@(when fill-available (list t))
					   )) ;; a complete noop
			  ,@(selectq mask-available
			      (:software
			       `(((= d -1) (values ,(template-alu alu-~y t) -1 -1
						   ,@(when fill-available `(t))))
				 (t (values ,(template-alu alu-x#y t)
					    d
					    -1
					    ,@(when fill-available `(t))
					    )))
			       )
			      (nil
			       `(((= d -1) (values ,(template-alu alu-~y t) -1 -1
						   ,@(when fill-available `(t))))
				 (t (values ,(template-alu (logior %extended-alu alu-x#y)
							   t)
					    d
					    -1
					    ,@(when fill-available `(t))
					    )))
			       )
			      (:packed
			       `(((= d -1) (values ,(template-alu alu-~y t) -1 -1
						   ,@(when fill-available `(t))))
				 (t ,(uniform-packed-alu
				      alu-x#y
				      'd
				      (template-alu (logior %extended-alu alu-x#y))
				      )))
			       )
			      (t `((t (values ,(template-alu alu-x#y t)
					      -1
					      d
					      ,@(when fill-available `(t)))))
				 ))
			  ))
		 ))
	    (alu-source-used
	     #||
	     (ALU-~X -> ALU-X SOURCE-USED 0)
	     (ALU-X -> ALU-X SOURCE-USED -1)
	     
	     (ALU-X*~Y -> ALU-X*~Y SOURCE-USED -1)
	     (ALU-~X*~Y -> ALU-X*~Y SOURCE-USED 0)
	     
	     (ALU-X+~Y -> ALU-~X+~Y SOURCE-USED 0)
	     (ALU-~X+~Y -> ALU-~X+~Y SOURCE-USED -1)
	     ||#
	     ;; tough cases.   we can do some special cases where the
	     ;; combination of data and mask is homogenous
	     (select bool
	       (alu-x
		`(cond ((= ,mask 0) (values alu-noop -1 -1
					    ,@(when fill-available (list t))
					    ))
		       (t ,
			(if (or (memq mask-available '(nil :software :packed))
				(not fill-available))
			    `(let ((d (boole ,(if not-data alu-~x*y alu-x*y) ,data ,mask)))
			       (cond ((and (= d 0)
					   ,@(unless (eq mask-available t) `((= ,mask -1))))
				      (values ,(template-alu alu-0s) 0 ,mask))
				     ((= d ,(if (eq mask-available t) mask -1))
				      (values ,(template-alu alu-1s) -1 ,mask))
				     (t (values ,(template-alu (logior %extended-alu alu-x) t)
						,(if not-data `(lognot ,data) `,data)
						,mask
						,@(when fill-available `(t))))))
			    `(values ,(template-alu alu-x)
				     ,(if not-data `(lognot ,data) `,data)
				     ,mask)))))
		(t
		 `(cond ((= ,mask 0) (values alu-noop -1 -1
					     ,@(when fill-available (list t))
					     ))
			(t
			 (let ((d (boole ,(if not-data `alu-~x*y `alu-x*y) ,data ,mask)))
			   ,(selectq mask-available
			      ((nil :software :packed)
			       `(cond ((and (= d 0)
					    (= ,mask -1))
				       ,(if (= bool alu-x*~y)
					    `(values ,(template-alu alu-0s) 0 -1)
					    `(values ,(template-alu alu-1s) -1 -1)))
				      ((= d -1)
				       ,(if (eq mask-available :software)
					    `(values ,(template-alu alu-x#y t)
						     ,mask -1
						     ,@(when fill-available `(t)))
					    `(values ,(template-alu alu-~y t)
						     -1 ,mask
						     ,@(when fill-available `(t)))
					    ))
				      (t (values ,(template-alu (logior %extended-alu bool) t)
						 ,(if not-data `(lognot ,data) `,data)
						 ,mask
						 ,@(when fill-available `(t))
						 ))))
			      (t
			       `(cond ((= d 0)
				       (values ,(template-alu (if (= bool alu-x*~y) alu-0s alu-1s))
					       ,(if (= bool alu-x*~y) 0 -1)
					       ,mask))
				      ((= d ,mask)
				       (values ,(template-alu alu-x#y t)
					       -1 ,mask
					       ,@(when fill-available `(t))))
				      (t (values ,(template-alu (logior %extended-alu bool)
								t)
						 ,(if not-data `(lognot ,data) `,data)
						 ,mask
						 ,@(when fill-available `(t))
						 ))))))))
		  )))
	    (t 
	     #||
	     (ALU-0S -> ALU-0S TRIVIAL -1)
	     (ALU-Y -> ALU-Y TRIVIAL -1)
	     (ALU-~Y -> ALU-~Y TRIVIAL -1)
	     (ALU-1S -> ALU-1S TRIVIAL -1)
	     ||#
	     (select bool
	       (alu-0s `(macro-combine-data-and-mask
			  alu-~x*y ,mask -1
			  :template ,template
			  :mask-available ,mask-available
			  :fill-available ,fill-available))
	       (alu-~y `(macro-combine-data-and-mask
			  alu-x#y ,mask -1
			  :template ,template
			  :mask-available ,mask-available
			  :fill-available ,fill-available))
	       (alu-y `(values alu-noop -1 -1
			       ,@(when fill-available (list t))
			       ))
	       (alu-1s `(macro-combine-data-and-mask
			  alu-x+y ,mask -1
			  :template ,template
			  :mask-available ,mask-available
			  :fill-available ,fill-available))
	       ))
	    ))
	(if (< bool 0)
	    `(values ,boolsym  ,data ,mask ,@(when fill-available `(t)))
	    `(values ,(template-alu bool t) ,data ,mask ,@(when fill-available `(t))))
	))))

;; this function combines a mask spec with a data constant, and if possible
;; eliminates the need for a mask, and if possible, eliminates the need for the
;; data by switching to a destination-only alu.
;;
;; it also swithches alus which use the complement of the source to those
;; using the plain source, and implements the complement-mask bit.  Together,
;; with the unpacking microcode, this lets the user use either the mask, or complemented
;; mask, with an arbitrary alu to combine the constant with the destionation data.
;;
(defmacro macro-combine-alu-data-and-mask
	  (alu data mask &key mask-available fill-available use-template)
  ;;
  ;; note that these are ordered to put the common cases first
  ;; In system 365, this doesn't matter since the compiler generates a dispatch
  ;;
  `(selector ,alu eql
     (7 (macro-combine-data-and-mask
	  7 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (2 (macro-combine-data-and-mask
	  2 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (6 (macro-combine-data-and-mask
	  6 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (5 (macro-combine-data-and-mask
	  5 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (0 (macro-combine-data-and-mask
	  0 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (15. (macro-combine-data-and-mask
	   15. ,data ,mask :template ,use-template
	   :mask-available ,mask-available :fill-available ,fill-available))
     (4 (macro-combine-data-and-mask
	  4 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (8. (macro-combine-data-and-mask
	  8. ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (9. (macro-combine-data-and-mask
	  9. ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (10. (macro-combine-data-and-mask
	   10. ,data ,mask :template ,use-template
	   :mask-available ,mask-available :fill-available ,fill-available))
     (11. (macro-combine-data-and-mask
	   11. ,data ,mask :template ,use-template
	   :mask-available ,mask-available :fill-available ,fill-available))
     (12. (macro-combine-data-and-mask
	   12. ,data ,mask :template ,use-template
	   :mask-available ,mask-available :fill-available ,fill-available))
     (13. (macro-combine-data-and-mask
	   13. ,data ,mask :template ,use-template
	   :mask-available ,mask-available :fill-available ,fill-available))
     (14. (macro-combine-data-and-mask
	   14. ,data ,mask :template ,use-template
	   :mask-available ,mask-available :fill-available ,fill-available))
     (1 (macro-combine-data-and-mask
	  1 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (3 (macro-combine-data-and-mask
	  3 ,data ,mask :template ,use-template
	  :mask-available ,mask-available :fill-available ,fill-available))
     (t (cond ((eql ,alu alu-add)
	       (macro-combine-data-and-mask
		 alu-add ,data ,mask :template ,use-template
		 :mask-available ,mask-available
		 :fill-available ,fill-available ))
	      (t (values ,alu ,data ,mask)))
     )))

(defun combine-alu-and-data-with-mask-and-fill (alu data mask)
  (macro-combine-alu-data-and-mask alu data mask :mask-available t :fill-available t)
  )

(defun combine-alu-and-data-with-software-mask (alu data mask)
  (macro-combine-alu-data-and-mask alu data mask
				   :mask-available :software
				   :fill-available nil)
  )

(defun combine-alu-and-data-with-mask (alu data mask)
  (macro-combine-alu-data-and-mask alu data mask :mask-available t :fill-available nil))

(defun combine-alu-and-data (alu data mask) 
  (macro-combine-alu-data-and-mask alu data mask :mask-available nil :fill-available nil))


(defun template-combine-alu-and-data-with-mask-and-fill (alu data mask)
  (macro-combine-alu-data-and-mask alu data mask :mask-available t :fill-available t
				   :use-template t)
  )

(defun template-combine-alu-and-data-with-mask (alu data mask)
  (macro-combine-alu-data-and-mask alu data mask :mask-available t :fill-available nil
				   :use-template t))

(defun template-combine-alu-and-data (alu data mask) 
  (macro-combine-alu-data-and-mask alu data mask :mask-available nil :fill-available nil
				   :use-template t))


(defun default-figure-usable-color-parameters 
       (write-mask data alu &optional type array screen-array &aux mc-data mc-mask)

  (when (and (bit-test tv:%literal-alu alu)
	     (not (bit-test %extended-alu alu)))
    (setq alu (logxor tv:%literal-alu alu))
    (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; the "literal alu" hack permits B&W fonts to behave as bitblt rather than
0    2;; as proper font operations.   This is handy for spreadsheets
0    (when (eq type :font)
      (setq type :bitblt)))

  (let ((is-bitblt (memq type '(:bitblt :bitblt-from))))

    (when (and is-bitblt (memq array '(:masked-bits :not-masked-bits)))
      2;; a bitblt operation with masked bits is a font operation
0      (setq type :font
	    is-bitblt nil))
    
    (when screen-array
      (unless is-bitblt
	(when (numberp array)
	  (let ((sh (lsh array 3)))
2	    ;;fixnums indicate byte number.  Shift the masks accordingly
0	    (setq write-mask (lsh (logand #o377 write-mask) sh)
		  data (lsh (logand #o377 data) sh))))
	)
      
      (let* ((bpe (array-element-size screen-array))
	     (ls (- 32. bpe))
	     (rs (- ls)))
	(when (< bpe 32.)
2	  ;;sign extend, so maximum winnage happens in folding.
0	  (setq data (ash (lsh data ls) rs)
		write-mask (ash (lsh write-mask ls) rs)))))
    
    
    (cond ((null type)
	   (multiple-value (alu mc-data mc-mask)
	     (combine-alu-and-data alu data write-mask)))
	  ((eq type :font)
	   (multiple-value (alu mc-data mc-mask)
	     (template-combine-alu-and-data alu data write-mask))
	   (when (eq array :not-masked-bits)
	     (unless (eql alu alu-noop)
	       (setq alu (logior %template-alu %template-complement-alu
				 %extended-alu alu))))
	   )
	  ((or is-bitblt (eq type :point))
	   (setq mc-data data mc-mask write-mask))
	  ((eq type :plain)
	   ;type :PLAIN, we never want to return an extended alu unless we have to
	   (multiple-value (alu mc-data mc-mask)
	     (combine-alu-and-data-with-software-mask alu data write-mask)))
	  (t (ferror "~A is not a known type of graphics operation" type))
	  )
    
    (when screen-array
      (setq array
	    (cond ((memq array '(:default :pixel :masked-bits :not-masked-bits nil))
		   screen-array)
		  ((and (numberp array)
			color-microcode-p
			(= alu tv:alu-seta)
			(= write-mask -1)
			(setq alu (dpb (if (eq type :bitblt) 1 0)
				       (byte 1 0)
				       (dpb array (byte 2 1) alu-shift)))
			screen-array))
		  (t (ferror "~A isn't a valid ARRAY specification" array))))

      (when (minusp alu)
	;duplicate plane mask and fill data in each byte
	(let ((bs (array-element-byte-size array)))
	  (when ( bs 32)

	    (setq mc-data (effective-write-mask mc-data nil bs)
		  mc-mask (effective-write-mask mc-mask nil bs))

	    )
	  ))
      )

    (values -1 ;; plane-mask
	    data
	    alu
	    array
	    mc-data
	    mc-mask))
  )

(defun masked-figure-usable-color-parameters 
       (write-mask data alu &optional type array screen-array &aux mc-data mc-mask)

  (when (and (bit-test tv:%literal-alu alu)
	     (not (bit-test %extended-alu alu)))
    (setq alu (logxor tv:%literal-alu alu))
    (when (eq type :font)
      (setq type :bitblt)))

  (let ((is-bitblt (memq type '(:bitblt :bitblt-from))))
    (when (and is-bitblt (memq array '(:masked-bits :not-masked-bits)))
      (setq type :font
	    is-bitblt nil))
    
    (when screen-array
      (unless is-bitblt
	(when (numberp array)
	  (let ((sh (lsh array 3)))
	    ;;fixnums indicate byte number.  Shift the masks accordingly
	    (setq write-mask (lsh (logand #o377 write-mask) sh)
		  data (lsh (logand #o377 data) sh))))
	)
      
      (let* ((bpe (array-element-size screen-array))
	     (ls (- 32. bpe))
	     (rs (- ls)))
	(when (< bpe 32.)
2	  ;;sign extend, so maximum winnage happens in folding.
0	  (setq data (ash (lsh data ls) rs)
		write-mask (ash (lsh write-mask ls) rs)))))
    
    
    (cond  ((null type)
	    (multiple-value (alu mc-data mc-mask)
	      (combine-alu-and-data-with-mask alu data write-mask)))
	   ((eq type :font)
	    (multiple-value (alu mc-data mc-mask)
	      (template-combine-alu-and-data-with-mask alu data write-mask))
	    (when (and (eq array :not-masked-bits)
		       ( alu alu-noop))
	      (setq alu (logior %template-alu %template-complement-alu
				%extended-alu alu))))
	   ((or is-bitblt (eq type :point))
	    (setq mc-data data mc-mask write-mask))
	   ((eq type :plain)
	    ;type :PLAIN, we never want to return an extended alu unless we have to
	    (multiple-value (alu mc-data mc-mask)
	      (combine-alu-and-data-with-mask alu data write-mask)))
	   (t (ferror "~A is not a known type of graphics operation" type))
	   )
    
    (when screen-array
      (setq array
	    (cond ((memq array '(:default :pixel :masked-bits :not-masked-bits nil))
		   screen-array)
		  ((and (numberp array)
			color-microcode-p
			(= alu tv:alu-seta)
			(= write-mask -1)
			(setq alu (dpb (if (eq type :bitblt) 1 0)
				       (byte 1 0)
				       (dpb array (byte 2 1) alu-shift)))
			screen-array))
		  (t (ferror "~A isn't a valid ARRAY specification" array))))
      (when (minusp alu)
	;duplicate plane mask and fill data in each byte
	(let ((bs (array-element-byte-size array)))
	  (when ( bs 32)

	    (setq mc-data (effective-write-mask mc-data nil bs)
		  mc-mask (effective-write-mask mc-mask nil bs))

	    )
	  ))
      )

    (values mc-mask
	    mc-data
	    alu
	    array
	    mc-data
	    mc-mask))
  )

;;;
;;; Color ALU support for the SC screen
;;;

(defflavor sc-color-alu-parameters-mixin
	(
	 ;; Selects which array is used
	 (array :default)
	 (plane-mask -1)
	 (pixel-mask -1)
	 (fill-data 0)
	 (alu tv:alu-seta)
	 )
	()
  :initable-instance-variables
  :gettable-instance-variables
  (:settable-instance-variables array alu))

(defmethod (make-instance sc-color-alu-parameters-mixin) (&rest ignore)
  (send self :set-plane-mask plane-mask)
  (send self :set-pixel-mask pixel-mask)
  (send self :set-fill-data fill-data))

(defmethod (:set-plane-mask sc-color-alu-parameters-mixin) (new)
  (setq plane-mask (if new (si:integer-low-bits-as-fixnum new) -1)))

(defmethod (:set-pixel-mask sc-color-alu-parameters-mixin) (new)
  (setq pixel-mask (if new (si:integer-low-bits-as-fixnum new) -1)))

(defmethod (:set-fill-data sc-color-alu-parameters-mixin) (new)
  (setq fill-data (if new (si:integer-low-bits-as-fixnum new) 0)))

   

;
; just extract the basic parameters, leaving optimization to the screen
;
(defmethod (:1-bit-parameters sc-color-alu-parameters-mixin) (ignore)

  (let ((tv:alu alu)
	(tv:mask plane-mask)
	(tv:value fill-data))
    (cond ((zerop (logand tv:mask 1))
	   (setq tv:alu alu-noop))
	  (t
	   (unless (zerop (logand tv:alu %extended-alu))
	     (setq tv:alu (third (assq tv:alu *all-the-alu-fns*))))
	   ))
    (values tv:alu tv:value tv:mask array)))



(defmethod (:sc-parameters sc-color-alu-parameters-mixin)
	   (sheet &optional sc-array)
  sheet sc-array ;; unused
  (values array plane-mask pixel-mask fill-data alu))




;;; A version that encaches the parameters if they aren't known already
(defflavor sc-color-alu-encached-parameters-mixin
	((cache-status :invalid))
	(sc-color-alu-parameters-mixin)
  :gettable-instance-variables)


(defwhopper (:sc-parameters sc-color-alu-encached-parameters-mixin) (screen sc-array)
  (or (eq cache-status :valid)
      (send self :encache-sc-parameters))
  (continue-whopper screen sc-array))


(defflavor general-sc-color-alu () (sc-color-alu-parameters-mixin))

;; 
;; this is used by the blanking protocol - it permits an alu instance
;; to be used as a "gray array" object
;;
(defmethod (:draw-blank-rectangle general-sc-color-alu)
	   (w h x y x-phase y-phase sheet raster ones-alu zeros-alu)
  (ignore x-phase y-phase ones-alu zeros-alu)
  (if sheet
      (tv:sheet-draw-rectangle w h x y self sheet raster)
      (let ((tv:bitblt-unpacking-constant fill-data)
	    (tv:bitblt-unpacking-mask plane-mask))
	(tv:%draw-rectangle w h x y alu raster))))

(compile-flavor-methods general-sc-color-alu)

;;;

(defun sc-fill-alu (fill-data plane-mask)
  (make-instance 'general-sc-color-alu
		 :array :default
		 :fill-data fill-data :plane-mask plane-mask
		 :pixel-mask -1 :alu tv:alu-seta))


;;; These are for use with constants
(defun scf (fill-data plane-mask)
  ;; Not until they can be dumped.
  ;;(declare lt:(side-effects reducible))
  (sc-fill-alu fill-data plane-mask))

(compiler:add-optimizer scf scf-transform-at-compile-time sc-fill-alu)

(defun scf-transform-at-compile-time (form)
  (if (and (numberp (second form)) (numberp (third form)))
      ;; *** What this really wants to check is whether compiling to core or not.
      ;; *** The check seems to be the best one I can find, but it sucks.  There seems
      ;; *** not to be a defined way to do this.
      (if (and (variable-boundp compiler:*compile-function*)
	       (not (funcall compiler:*compile-function* :to-core-p)))
	  `'(,compiler:eval-at-load-time-marker . (sc-fill-alu . ,(cdr form)))
	  `',(sc-fill-alu (second form) (third form)))
      `(sc-fill-alu . ,(cdr form))))
