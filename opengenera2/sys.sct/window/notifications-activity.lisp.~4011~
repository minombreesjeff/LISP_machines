;;; -*- Mode: LISP; Syntax: Common-lisp; Package: TV; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(dw:define-program-framework D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")notifications
0  :select-key #\n
  :command-definer t
  :command-table (:inherit-from '("standard arguments" "input editor compatibility")
		  :kbd-accelerator-p 't)
  :top-level (notification-program-top-level :echo-stream ignore)
  :state-variables ((last-notification-time 0)
		    (notification-cache nil))
  :panes
  ((title :title :size-from-output t
	  :redisplay-string "Notifications"
	  :default-character-style '(:eurex :italic :huge)
	  :height-in-lines 1
	  :redisplay-after-commands nil)
   (menu :command-menu :center-p t :rows '(("Help") ("Exit")))
   (notifications
     :display
;     :incremental-redisplay t
;     :redisplay-function 'redisplay-notification-window
     :redisplay-after-commands nil
     :typeout-window t
     :notification-mode :ignore
     :more-p nil
     :end-of-page-mode :scroll
     :margin-components `dw:((margin-borders )
			     (margin-scroll-bar )
			     (margin-whitespace :thickness 2 :margin :left)
			     (margin-ragged-borders :thickness 1 :horizontal-too lisp:nil))))
  :configurations
  '((main (:layout (main :column row-1 notifications) (row-1 :row title menu))
	  (:sizes (main (row-1 2 :lines menu) :then (notifications :even))
	   ;; this really wants to be (MENU :ASK-WINDOW SELF :SIZE-FOR-PANE MENU) but
	   ;; that blows out with "Some constraint could not be satisfied."
	   (row-1 (menu .2) :then (title :even))))))

(cp:install-command 'notifications 'si:com-show-gc-status)
(defun display-notifications ()
  (cp:execute-command 'si:com-select-activity "Notifications"))

(defmethod 1(redisplay-notification-window notifications)0 (stream)
  (loop for note in (reverse notification-cache) do
;    (dw:with-redisplayable-output (:stream stream
;				   :cache-value note
;				   :unique-id note)
      (display-notification stream note nil)
      (terpri stream)));)
(defmethod 1(notification-program-top-level notifications)0 (&rest args)
  (condition-bind ((sys:abort #'(lambda (ignore)
				  (send dw:*program-frame* :deselect)
				  (send dw:*program-frame* :bury)
				  ;; Returning NIL pretends the burying didn't happen, and
				  ;; lets other abort handlers run.
				  nil)))
    (si:with-command-loop-variable-bindings
      (loop doing
	(let* ((window (dw:get-program-pane 'notifications))
	       (notification-cell (send window :notification-cell))
	       ;; Queries should (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")not0 happen in the "viewer."
	       (query-io (send window :typeout-window)))
	  (labels ((notification-received? ()
		     ;; or a notification came that wasn't handled somehow
		     ;; either a notification was delivered to this window
		     (or (not (null (location-contents notification-cell)))
			 (not (eq notification-cache notification-history))))
		   (display-new-notifications ()
		     (let ((last-displayed-notification (first notification-cache)))
		       (setq notification-cache notification-history)
		       (let ((notifications-to-be-displayed
			       (loop for note in notification-cache
				     until (eq note last-displayed-notification)
				     collecting note)))
			 (loop for note in (reverse notifications-to-be-displayed)
			       do
			   (display-notification window note nil)
			   (terpri window))))
		     (when (neq notification-cache notification-history)
		       (display-new-notifications))))

	    (when (null notification-cache)
	      (setq notification-cache notification-history)
	      (redisplay-notification-window self window))
	    (dw:with-presentation-input-context ('si:input-editor)	;enable c-mouse-R
						()
		 (process:with-wait-function-polling (1. #'notification-received?)
		   (cl:apply #'dw:default-command-top-level
			     self
			     :window-wakeup (lambda (blip)
					      (dw:presentation-blip-case blip
						(dw::window-wakeup-select
						  (display-new-notifications)
						  (dw::default-window-wakeup-handler blip))
						(otherwise
						  (dw::default-window-wakeup-handler blip))))
			     :input-block #'notification-received?
			     :input-wait-handler
			     (lambda ()
			       (when (notification-received?)
				 (send window :receive-notification)
				 (display-new-notifications)))
			     args)))))))))

(defvar 1*notification-activity-help*
0  "This window maintains a log of notifications.
It displays all of the notifications which have been received since cold boot.
Use the scroll bar at the left edge of the window to scroll the notifications, or
 press š to scroll them downward and
 press m-š to scroll upward.
Press s-S to search forward through the text.
Press s-R to search backward through the text.
Use c-Mouse-L or c-Mouse-R to mark text in this window.
 Press s-W or m-W to push the marked text onto the kill ring.
Press ” to deselect this window.
Press † or ? to see this message.
Press ‹ to redisplay the notifications.

")

(define-notifications-command (1com-help0 :keyboard-accelerator (#\Help #\?)
					:menu-accelerator "Help")
    ()
   (with-character-style ('(sage:sans-serif-body :roman :normal) t :bind-line-height t)
     (format t *notification-activity-help*)))

(define-notifications-command (1com-exit-notifications0 :keyboard-accelerator (#\End #\Abort)
					:menu-accelerator "Exit")
    ()
   (send dw:*program-frame* :deselect)
   (send dw:*program-frame* :bury))
