;;; -*- Mode: LISP; Syntax: Zetalisp; Base: 10; Package: COLOR; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmacro color-bitblt-inner-loop-variant (variant)
  (if (keywordp variant)
      (cl:ecase variant
	     (:forwards 0)
	     (:single 1)
	     (:forwards-wrap 2)
	     )
      `(cl:ecase ,variant
	      (:forwards 0)
	      (:single 1)
	      (:forwards-wrap 2)
	      )))

(defconst %max-color-bitblt-function-index (* 16.  ;16 alus
					      4	;forwards, simple, forwards-wrap, xx
					      2	;mask unmask
					      3	;opcode 0, opcode 1, opcode 2, 
					      ))

(defun illegal-color-bitblt-function (&rest args)
  (ignore args)
  (ferror "Illegal color bitblt function"))

(defvar *color-bitblt-inner-loops*
	(make-array %max-color-bitblt-function-index
		    :initial-value 'illegal-color-bitblt-function))

(defvar *photon-color-bitblt-inner-loops*
	(make-array %max-color-bitblt-function-index
		    :initial-value 'illegal-color-bitblt-function))

(defmacro color-bitblt-function-index (variant alu mask-p)
  `(%logdpb (ldb color:%%extended-alu-opcode ,alu)
	    (byte 25. 7)
	    (%logdpb (if ,mask-p 1 0)
		     (byte 1 6)
		     (%logdpb (color-bitblt-inner-loop-variant ,variant)
			      (byte 2 4)
			      ,alu))))

(defun color-bitblt-inner-loop-fun (variant alu mask-p)
  (let ((index (color-bitblt-function-index variant alu mask-p)))
    (when ( index %max-color-bitblt-function-index)
      (ferror "illegal color alu ~O" alu))
    #||
    (setq last-index index
	  last-function (aref (if (bit-test %folded-fill-alu
					    alu)
				  *photon-color-bitblt-inner-loops*
				  *color-bitblt-inner-loops*)
			      index))
    ||#
    (aref (if (bit-test %folded-fill-alu
			alu)
	      *photon-color-bitblt-inner-loops*
	      *color-bitblt-inner-loops*)
	  index)))


(defun color-setup-bitblt-cases ()
  ;; This macro builds a list of (row column symbol) triplets where the row is the
  ;; type of inner-loop-function desired, the column is the boole-op alu and the symbol
  ;; is the interned name of the function that performs the given variant of the alu op.
  (loop for (mask group op desc photon)
	    in '((NIL :NORMAL 0 "-FILL" nil)
		 (NIL :PAINT 1 "-ADD" nil)
		 (NIL :MASK-NO-FILL 2 "" nil)
		 (T   :NORMAL 0 "-FILL-MASK" nil)
		 (T   :NORMAL 0 "-FOLDED-FILL-MASK" t)
		 (T   :PAINT 1 "-ADD-MASK")
		 (T :MASK-NO-FILL 2 "-MASK")
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")		 ;all the photon special cases last
0		 (T   :NORMAL 0 "-FOLDED-FILL" t)
		 (NIL :NORMAL 0 "-FOLDED-FILL" t)
		 )
	do
    (loop for (variant suffix) in `((:forwards "-FORWARDS")
				    (:single "-SIMPLE")
				    (:forwards-wrap "-FORWARDS-WRAP"))
	  do
	  (loop for (index prefix)
		    in (if (eq group :paint)
			   `((0 "BOTH"))
			   'cli::((boole-clr   "CONSTANT")
				  (boole-and   "BOTH")
				  (boole-andc1 "BOTH")
				  (boole-2     "DESTINATION")
				  (boole-andc2 "BOTH")
				  (boole-1     "SOURCE")
				  (boole-xor   "BOTH")
				  (boole-ior   "BOTH")
				  (boole-nor   "BOTH")
				  (boole-eqv   "BOTH")
				  (boole-c1    "SOURCE")
				  (boole-orc1  "BOTH")
				  (boole-c2    "DESTINATION")
				  (boole-orc2  "BOTH")
				  (boole-nand  "BOTH")
				  (boole-set   "CONSTANT")))
		as id = (eval index)
		as alu = (setf (ldb color:%%extended-alu-opcode id)
			       op)
		as name = (string-append
			    "BB-"
			    prefix
			    desc
			    suffix)
		as function-name = (intern name 'color)
		as a-index =  (color-bitblt-function-index variant alu mask)
		when (fboundp function-name)
		  do
		    (let ((fun (fsymeval function-name)))
		      (unless photon (setf (aref *color-bitblt-inner-loops* a-index) fun))
		      (setf (aref *photon-color-bitblt-inner-loops* a-index) fun)
		      )))))


(defvar *make-new-once* nil)
(defun repack-rectangle-function (function-spec &key other-args other-keywords
				  (make-new *make-new-once*))
  (multiple-value-bind (val found key)
      (unless make-new (gethash function-spec *repack-rectangle-functions*))
    (if found
	(values val key)
	(destructuring-bind (source-bits dest-bits . other-keys) function-spec
	  (prog1 (make-repack-rectangle-function
		   source-bits dest-bits other-args
		   other-keys
		   :other-keywords other-keywords
		   :compile t)
		 (setq *make-new-once* nil))
	))
  ))

(defun repack-rectangle-internal (function width height source sx sy dest dx dy
				  &rest other-args)

  (macrolet ((with-arrays-decoded (&body body)
	       #+3600
	       `(MULTIPLE-VALUE-BIND (s-base s-index-offset s-w source-span s-h s-bits-per-elt
				      d-base d-index-offset nil dest-span nil d-bits-per-elt)
		    (%BITBLT-DECODE-ARRAYS TV:ALU-SETA source dest)
		  ,@body)
	       #+imach
	       `(multiple-value-bind (s-base s-index-offset s-w source-span s-h s-bits-per-elt)
		    (cli::bitblt-decode-array source t )
		  (multiple-value-bind (d-base d-index-offset nil dest-span nil d-bits-per-elt
					d-valid-height)
		      (cli::bitblt-decode-array dest t)
		    ,@body))))
    (with-arrays-decoded
      (let* ((sx (mod sx s-w))
	     (sy (mod sy s-h))
	     (s-index-offset (lsh s-index-offset (- s-bits-per-elt)))
	     (-s-elements-per-q (- s-bits-per-elt 5))
	     (-d-elements-per-q (- d-bits-per-elt 5))
	     (yspan (* sy source-span))
	     (s-phase-mask (1- (lsh 1 (- 5 s-bits-per-elt))))
	     (sum-sx (+ sx s-index-offset))
	     (div-sx (lsh sum-sx -s-elements-per-q))
	     (s-phase (logand sum-sx s-phase-mask))
	     (sum-dx (+ dx (lsh d-index-offset (- d-bits-per-elt))))
	     (div-dx (lsh sum-dx -d-elements-per-q))
	     (d-phase (logand sum-dx (1- (lsh 1 (- 5 d-bits-per-elt)))))
	     )

	(cond #+imach ((or (< dy 0) (> (+ dy height) d-valid-height))
		       (error "Destination has too few lines"))
	      #+imach ((or (< dx 0) (> (+ dx width) (lsh dest-span d-bits-per-elt)))
		       (error "Destination isn't wide enough"))
	      (t 

						;(dbg:when-mode-lock (dbg))
	       (cl:apply function width height
			 s-base source-span (+ div-sx yspan) s-phase
			 d-base dest-span (+ div-dx (* dy dest-span)) d-phase
			 sx
1						;
						;note this ought to be just s-w (source width) but the 36xx bitblt
0						1;code does this, incorrectly0.  1As a practival matter, this means the
0						1;36xx wraps only at word boundaries
0			 (let ((s-index-phase (logand s-index-offset s-phase-mask)))
			   (if (zerop s-index-phase) s-w (+ s-w (- (lsh 32. -s-elements-per-q)
								   s-index-phase))))
			 (+ div-sx (* s-h source-span))
			 other-args)))))
    ))


(defun word-write-mask (byte-size write-mask)
  (loop for byte-index from byte-size below 32 by byte-size
	as bp = (byte byte-size byte-index)
	do (setq write-mask (%logdpb write-mask bp write-mask)))
  write-mask)


(defun %draw-masked-bits-function (alu source-bpp dest-bpp fill-data write-mask
				   &optional complement-source (zeros-value :skip))
  (let* ((effective-write-mask (word-write-mask dest-bpp write-mask))
	 (effective-fill-data (word-write-mask dest-bpp fill-data))
	 (use-write-mask ( effective-write-mask -1))
	 (use-fill-data ( effective-fill-data -1))

	 1;preserve raw alu and folded-fill bit
0	 (alu (cond ((or ( 0 alu)
			 (zerop (ldb %%extended-alu-opcode alu)))
		     (logand (logior #xF %folded-fill-alu) alu))
		    ((eql alu color:alu-add)
		     'sys:%32-bit-plus)
		    (t (ferror "Unknown alu ~A" alu))))

	 (pixel-function (cond ((and (null use-fill-data) (eql zeros-value 0)) '-)
			       (t 'store-fill-data-or-zero)))

	 (other-args '(fill-data write-mask zeros-value)))

    (with-stack-list (key source-bpp dest-bpp
			  :complement-source complement-source
			  :skip-zeros (cond ((fixp zeros-value) 'zeros-value)
					    ( t t))
			  :pixel-function pixel-function
			  :write-alu alu
			  :write-mask use-write-mask
			  )
      (multiple-value-bind (fun spec)
	  (repack-rectangle-function key :other-args other-args :make-new nil)
	;(setq rfun fun rspec spec)
	(values fun spec)
      ))))

(defun %repack-pixels-function
       (source-bpp dest-bpp alu write-mask source-byte dest-byte rotate-source)
  (let* ((effective-write-mask (word-write-mask dest-bpp write-mask))
	 (use-write-mask ( effective-write-mask -1))

	 1;preserve raw alu and folded-fill bit
0	 (alu (logand (logior #xF %folded-fill-alu) alu))
	 pixel-function pixel-function-args)

    (when source-byte
      (if (symbolp source-byte)
	  (setq pixel-function source-byte)
	  (setq pixel-function 'load-source-byte
		pixel-function-args source-byte)))

    (with-stack-list (key source-bpp dest-bpp
			  :pixel-function pixel-function
			  :pixel-function-args pixel-function-args
			  :write-alu alu
			  :write-byte-pointer (first dest-byte)
			  :write-mask use-write-mask
			  :rotate-source (when rotate-source 'rotate-source))
      ;(dbg:when-mode-lock (remhash key *repack-rectangle-functions*))
      (multiple-value-bind (fun spec)
	  (repack-rectangle-function key :other-args
				     (if rotate-source
					 `(write-mask rotate-source)
					 `(write-mask)))
	(values fun spec)
      ))))

(defun tv:%draw-char-unpacked-internal
       ( width height alu
	src sx sy source-span s-bits-per-elt s-bitpos
	dest dx dy dest-span d-bits-per-elt d-bitpos
	&optional alu-inner-loop)

  1;everything already clipped and decoded!0					  
1  ;source-span and dest-span already adjusted for bits-per-elt
0  ;(when (null src)(dbg))
  (let* ((-sbits (- s-bits-per-elt))
	 (-dbits (- d-bits-per-elt))
	 (s-elements-per-q (ash 32. -sbits))
	 (d-elements-per-q (ash 32. -dbits))
	 (yspan (* sy source-span))
	 (s-w (ash source-span (- 5 s-bits-per-elt)))
	 (fill-data tv:bitblt-unpacking-constant)
	 (write-mask  tv:bitblt-unpacking-mask)
	 )
    (multiple-value-bind (function spec)
	(or alu-inner-loop
	    (%draw-masked-bits-function
	      alu (lsh 1 s-bits-per-elt) (lsh 1 d-bits-per-elt) 
	      fill-data write-mask
	      nil nil))
      (multiple-value-bind (div-sx s-phase) (floor (+ sx (ash s-bitpos -sbits))
						   s-elements-per-q)
	(multiple-value-bind (div-dx d-phase) (floor (+ dx (ash d-bitpos -dbits))
						     d-elements-per-q)

						;(when stop (dbg))
	  (funcall function width height
		   src source-span (+ div-sx yspan) s-phase
		   dest dest-span (+ div-dx (* dy dest-span)) d-phase
		   sx
		   s-w
		   -1				;no wrap for this kind of operation
		   fill-data write-mask 0)
	  (values function spec))))))


(defun %draw-masked-bits-internal (width height source sx sy dest dx dy
				   &optional
				   (alu tv:alu-seta)
				   (fill-data -1)
				   (write-mask -1)
				   (complement-source nil)
				   (erase-zeros))

  (let* ((dest-bpp (array-element-byte-size dest))
	 (ez (cond ((fixp erase-zeros) erase-zeros)
		   (erase-zeros 0))))
    (multiple-value-bind (fun spec )
	(%draw-masked-bits-function alu 1 dest-bpp 
				    fill-data write-mask
				    complement-source
				    ez)
      (repack-rectangle-internal fun width height source sx sy dest dx dy
				 fill-data write-mask ez)
      (values fun spec)
      )
    ))


(defvar %bit-byte-specs (cl:make-array 32 :initial-contents
				       (loop for i from 0 below 32 collect `((byte 1 ,i)))))

(defun %copy-n-1-internal (n width height from-array from-x from-y
			   to-array to-x to-y alu bit write-mask)
  (when (bit-test 1 write-mask)
    (cond ((cli::source-dependent-alu-p alu t)
	   (multiple-value-bind (fun spec)
	       (%repack-pixels-function n 1 alu -1 (aref %bit-byte-specs 0) nil t)
	     (repack-rectangle-internal
	       fun width height
	       from-array from-x from-y to-array to-x to-y write-mask bit)
	     (values fun spec)))
	  (t (let ((tv:bitblt-unpacking-mask -1)
		   (tv:bitblt-unpacking-constant -1))
	       (tv:%draw-rectangle width height to-x to-y alu to-array))
	     ))))

(defun %copy-1-n-internal (n width height from-array from-x from-y
			   to-array to-x to-y alu bit write-mask)
  (when (bit-test (lsh 1 bit) write-mask)
    (cond ((cli::source-dependent-alu-p alu t)
	   (let ((mask (effective-write-mask (logand (lsh 1 bit) write-mask) nil n)))
	     (multiple-value-bind (fun spec)
		 (%repack-pixels-function 1 n alu mask 'store-minus-data nil nil)
	       (repack-rectangle-internal
		 fun width height
		 from-array from-x from-y to-array to-x to-y
		 mask)
	       (values fun spec))))
	  (t (multiple-value-bind (alu tv:bitblt-unpacking-constant tv:bitblt-unpacking-mask)
		 (combine-alu-and-data
		   alu -1
		   (effective-write-mask (logand (lsh 1 bit) write-mask) nil n))
	       (tv:%draw-rectangle width height to-x to-y alu to-array))))))

(defun %copy-32b-8b-internal (width height from-array from-x from-y
			      to-array to-x to-y alu shift-byte write-mask)
  (cond ((cli::source-dependent-alu-p alu t)
	 (multiple-value-bind (fun spec)
	     (%repack-pixels-function 32 8 alu write-mask `((byte 8 0)) nil t)
	   (repack-rectangle-internal
	     fun width height
	     from-array from-x from-y to-array to-x to-y write-mask (lsh shift-byte 3))
	   (values fun spec)))
	(t (multiple-value-bind (alu tv:bitblt-unpacking-constant tv:bitblt-unpacking-mask)
		 (combine-alu-and-data alu -1 (effective-write-mask write-mask 4))
	     (tv:%draw-rectangle width height to-x to-y alu to-array))
	 )))

(defun %copy-8b-32b-internal (width height from-array from-x from-y
			      to-array to-x to-y alu shift-byte write-mask)
  (cond ((cli::source-dependent-alu-p alu t)
	 (let ((write-mask (logand write-mask (lsh #xff (lsh shift-byte 3)))))
	   (multiple-value-bind (fun spec)
	       (%repack-pixels-function 8 32 alu write-mask
					nil
					(selector shift-byte eql
					  (0 '((byte 8 0)))
					  (1 '((byte 8 8)))
					  (2 '((byte 8 16)))
					  (t '((byte 8 24))))
					nil)

	     (repack-rectangle-internal
	       fun width height
	       from-array from-x from-y to-array to-x to-y write-mask)
	     (values fun spec))))
	(t (multiple-value-bind (alu tv:bitblt-unpacking-constant tv:bitblt-unpacking-mask)
		 (combine-alu-and-data alu -1 (logand (lsh #xff (lsh shift-byte 3))
						   write-mask))
	     (tv:%draw-rectangle width height to-x to-y alu to-array)))
	))

(defun microcoded-soft-matte-internal
       (combination matte-array matte-x matte-y
	brush-array brush-x brush-y
	canvas-array canvas-x canvas-y
	dest-array dest-x dest-y
	width height)
  (check-arg combination
	     (and (fixp combination) ( 0 combination 3))
	     "a fixnum from 0 to 3")
  (if color:color-microcode-p
      (progn
	#+3600
	(multiple-value-bind
	  (m-b m-s b-w b-s c-w c-s d-w d-s)
	    (sys:soft-matte-decode-arrays matte-array brush-array
					  canvas-array dest-array)
	  (sys:soft-matte-internal combination
				   (+ m-b matte-x (* matte-y m-s)) m-s
				   (+ b-w brush-x (* brush-y b-s)) b-s
				   (+ c-w canvas-x (* canvas-y c-s)) c-s
				   (+ d-w dest-x (* dest-y d-s)) d-s
				   width height))
	#+imach
	(ignore combination matte-array matte-x matte-y
		brush-array brush-x brush-y
		canvas-array canvas-x canvas-y
		dest-array dest-x dest-y
		width height)
	#+imach
	(ferror "not yet"))
      (ferror "attempt to call microcoded Soft Matte, which is not loaded"))
  nil)



