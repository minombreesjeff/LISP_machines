;;; -*- Mode: LISP; Syntax: Zetalisp; Package: TV; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; The system screen-dimmer, installed by Dodds, 20 Feb 1986.
;;; Based on experiments by Dodds and RLB.  We hope this helps a lot to extend
;;; console CRT life.

;;; In order for this code to work, the console in use must have a "new" console
;;; PROM installed, so that the screen brightness responds to program control, via
;;; (SYS:CONSOLE-BRIGHTNESS).  A test is done herein, so that the periodic
;;; checks are not even made if there is no programmable brightness control.  This
;;; should be true only for a vanishing number of old machines, generally ones that
;;; have not had the FEP V127 upgrade.  (There's a catch, however; see below.)

;;; When this file is loaded, it adds an initialization to start a timer queue
;;; entry.  Dimming of the screen occurs one of two ways:  
;;; 1> It happens automatically due to the timed polling, when the console idle
;;;    time exceeds the blank-screen time constant
;;;    [*dim-screen-after-n-minutes-idle*, see below]; and 
;;; 2> it can be manually started by <Function> c-<Refresh>.
;;; In either of these cases, another timer entry is queued when the screen is
;;; relighted, to perpetuate the idleness test.  You can stop the idle-time onset
;;; entirely by setting *dim-screen-after-n-minutes-idle* to NIL.  There
;;; is also a command to set this time parameter, among others: Set Screen Options.
;;; Also available is 
;;; (TV:SET-SCREEN-OPTIONS :DIM-SCREEN-AFTER-N-MINUTES-IDLE <number-or-NIL>)

;;; When the screen is "dimmed", the internal console brightness is set to the
;;; percentage of the current brightness indicated by the integer stored in
;;; *screen-dimness-percent*, which is presumed to produce a fairly dim brightness
;;; value.  To relight the screen, any key can be pressed, or the mouse can be
;;; moved.  In particular, pushing any of the shift keys or moving the mouse will
;;; do this, but without updating the console idle time.  When in this state
;;; (relighted, but keyboard activity time not updated), the same time constant is
;;; used.  If keyboard activity time is not updated within this period, the screen
;;; dims again.

;;; The screen is also relighted by the arrival of a notification or by a
;;; spontaneous window selection, such as the Converse pop-up window.
;;; If there is no keyboard activity within the next
;;; *dim-screen-after-n-minutes-idle* minutes, the screen dims again.

;;; The dimming of the screen is accomplished merely by saving the previous value
;;; of console brightness, and setting it to the product of the current brightness
;;; and *screen-dimness-percent*.  Setting of this parameter can be done conveniently
;;; with the same CP command, Set Screen Options, or the form
;;; (TV:SET-SCREEN-OPTIONS :SCREEN-DIMNESS-PERCENT <number>).  The default
;;; brightness value is 0% (black screen).  If you want a number that will leave
;;; the screen very dim but visible, the value will vary with your particular hardware.
;;; Experiment to find a good setting, starting with 50%.

;;; To achieve good performance, the unblanking is mediated by two processes.  One
;;; does nothing but listen for keyboard activity.  It runs at raised priority, in
;;; order to respond quickly, even if computation is going on in some other
;;; process.  The other process dims the screen and waits, at very low priority, to
;;; be told to terminate.

;;; A joker in the deck of program-controlled console brightness is the case where
;;; the console is unplugged from the computer long enough for the hardware to
;;; appear (to the software) to have lost program control.  Therefore, the
;;; feedback-driven dimmer function must sense this loss and bail out when it
;;; happens.  If it doesn't, the dimmer will loop forever at raised priority,
;;; interfering with notifications and other things.  When program brightness
;;; control has been "lost" (unplugged console), the dimmer will periodically test
;;; for the ability's being "regained" (console is plugged back in).  Operation of
;;; the dimmer will then quietly resume without intervention.

;;; A mechanism is provided to give the user a "hook" to be run when the screen is
;;; dimmed, and another for when it is "completely" relighted.  This is done via
;;; the variables *screen-dim-hook* and *screen-relight-hook*.  They are each
;;; intended to contain a form to be evaluated at the time the screen is dimmed,
;;; and when it is "completely" undimmed (i.e., there has been keyboard activity).
;;; If more than one form is desired, it must be surrounded by a PROGN.

;;; The following variables should be documented per se, although the first
;;; two are best dealt with via Set Screen Options or TV:SET-SCREEN-OPTIONS.

(defvar *dim-screen-after-n-minutes-idle* 20.)	;default 20 minutes
						;NIL to disable
(defvar *screen-dimness-percent* 0)		;ratio of dimness re current brightness

(defvar *screen-dim-hook* nil)
(defvar *screen-relight-hook* nil)

;;; These variables are internal and shouldn't be documented.

(defvar *continue-screen-save* nil)
(defvar screen-saver-window nil)	
(defvar *saved-console-brightness* nil)
(defvar *seconds-idle-when-started* nil)
(defvar *old-notification-history* nil)
(defvar *old-saved-sends* nil)
(defvar *screen-save-in-progress* nil)
(defconst *dimming-damping-constant* 15.)
(defconst *mouse-screen-wakeup-threshold* 6)
(defvar *program-console-brightness-control* nil)
(defvar *dimmer-startup-time* 0)
(defvar *blank-screen-timer* nil)

(defsubst time-since-last-activity ()
  (let ((kbd-time kbd-last-activity-time))	; to avoid race condition
    (time:time-difference (time) kbd-time)))

(defsubst minutes-since-dimmer-startup ()	        ; result is a real-number of minutes
  (// (- (time:get-universal-time) *dimmer-startup-time*) 60.0))

(defsubst minutes-idle ()				; result is a real-number of minutes
  (// (time-since-last-activity) 3600.0))

(defsubst seconds-idle ()
  (// (time-since-last-activity) 60.))

(defsubst minutes-elapsed (base-time)			; result is a real-number of minutes
  (// (time:time-difference (time) base-time) 3600.0))

(defun machine-has-program-console-brightness-control ()
  (or *program-console-brightness-control*	; semi-cached
      (let ((present-brightness (sys:console-brightness)))
	(setf (sys:console-brightness)
	      (if ( present-brightness .5)
		  (- present-brightness .01)
		  (+ present-brightness .01)))
	(process-sleep 2.)
	(prog1
	  (setq *program-console-brightness-control*
		( present-brightness (sys:console-brightness)))
	  (setf (sys:console-brightness) present-brightness)))))

(defun different-screen-brightness (old-brightness &optional (limit 200.))
  (declare (values new-brightness probes-needed))
  (loop with brightness
	for i from 1 to limit
	do (loop for j from 1 to 1000)		;give time to settle between probes
	   (setq brightness (console-brightness *main-console*))
	when ( old-brightness brightness)
	  do (return (values brightness i))
	finally (return (values brightness (1+ limit)))))

(defun damped-change-console-brightness (target-brightness)
  (check-arg target-brightness ( 0 target-brightness 1)
	     "a valid console-brightness value, 0  b  1")
  (loop with initial-brightness = (console-brightness *main-console*)
	with test = (if (> target-brightness initial-brightness) #' #')
	for old-brightness first nil then brightness
	for brightness first initial-brightness
		       then (different-screen-brightness old-brightness)
	for difference = (- target-brightness brightness)
	for remaining = (abs difference)
	for inc = (* (signum difference)
		     (max (// remaining *dimming-damping-constant*)
			  (min remaining .01)))
	until (or (< remaining 1\255)
		  (funcall test brightness target-brightness))
	do (when (and old-brightness
		      (= old-brightness brightness))
	     (setq *program-console-brightness-control* nil)
	     (return nil))
	   (setf (console-brightness *main-console*) (+ brightness inc))))

(defun validate-dim-value ()
  (if (variable-boundp *screen-dimness-percent*)
      (unless ( 0 *screen-dimness-percent* 100.)
	(notify nil "Warning: TV:*SCREEN-DIMNESS-PERCENT* has an invalid value, ~A.  ~
                     Resetting to 0%." *screen-dimness-percent*)
	(setq *screen-dimness-percent* 0))
    (notify nil "Warning: TV:*SCREEN-DIMNESS-PERCENT* is unbound.  Resetting to 0%.")
    (setq *screen-dimness-percent* 0))
  (// (float *screen-dimness-percent*) 100.0))

;; the following should impose a log scale, but it's not obvious just what.
(defun screen-saver ()
  (let-globally ((screen-saver-window selected-window))
    (setq *saved-console-brightness* (console-brightness *main-console*))
    (damped-change-console-brightness
      (* *saved-console-brightness* (validate-dim-value)))
    (setf (process-priority current-process) -12.)
    (process-wait "Dimming Screen" (lambda () (null *continue-screen-save*)))
    (damped-change-console-brightness *saved-console-brightness*)))

(defun screen-saver-monitor (from-function-key)
  (loop for process in process:*all-processes*
	when (and process
		  (process:active-p process)
		  (string-equal (process:process-name process) "Blanking screen"))
	  do (process-kill process))		;Get rid of any still stuck in "Sheet Lock".
  (let-globally ((*continue-screen-save* t))
    (let* ((saver-process (process-run-function "Blanking screen" #'screen-saver))
	   old-hardware-activity-time old-mouse-x old-mouse-y)
      (flet ((wakeup-test ()
	       (declare (special zwei:*saved-sends*))  
	       (or (null *program-console-brightness-control*)	;may have lost control
		   (null *main-console*)	;Shutdown -- be conservative.
		   ( old-hardware-activity-time
		      (cli::console-last-hardware-activity-time *main-console*))
		   (and (tv:mouse-wakeup-internal tv:main-mouse)
			(> (+ (abs (- (mouse-x main-mouse) old-mouse-x))
			      (abs (- (mouse-y main-mouse) old-mouse-y)))
			   *mouse-screen-wakeup-threshold*))
		   (and *seconds-idle-when-started*	;Paper over timing window
			(> *seconds-idle-when-started* (seconds-idle)))
		   (and screen-saver-window
			(neq screen-saver-window selected-window))
		   (and notification-history
			(or (neq notification-history *notification-last-delivered*)
			    (neq notification-history *old-notification-history*)))
		   (and (variable-boundp zwei:*saved-sends*)
			zwei:*saved-sends*
			(neq *old-saved-sends* zwei:*saved-sends*)))))
	(setf (process-priority current-process) 2.)	;make very responsive to kbd input
	(process-sleep (if from-function-key 120. 5))	;allow time for paws off keys
	(setq old-hardware-activity-time (cli::console-last-hardware-activity-time
					   *main-console*))
	(setq old-mouse-x (mouse-x main-mouse) old-mouse-y (mouse-y main-mouse))
	(process-wait "Keyboard wait" #'wakeup-test)
	(setq-globally *continue-screen-save* nil)
	(setf (process-priority saver-process) 2.)	;make screen-blank finish quickly
	))))

(defun run-screen-hooks (hook-list)
  (loop for hook in hook-list
	do (funcall hook)))

(defun save-screen-and-requeue (&optional from-function-key)
  (declare (special zwei:*saved-sends*))
  (unless *screen-save-in-progress*
    (run-screen-hooks *screen-dim-hook*)
    (let-globally ((*screen-save-in-progress* t)
		   (*seconds-idle-when-started* (seconds-idle))
		   (*old-notification-history* notification-history)
		   (*old-saved-sends* (when (variable-boundp zwei:*saved-sends*)
					zwei:*saved-sends*)))
      (screen-saver-monitor from-function-key)
      (when *dim-screen-after-n-minutes-idle*
	(when *blank-screen-timer*
	  (unless (process:timer-pending-p *blank-screen-timer*)
	    (process:reset-timer-relative *blank-screen-timer*
					  (* 60. *dim-screen-after-n-minutes-idle*)))))
      (run-screen-hooks *screen-relight-hook*))))

(defun blank-screen-top-level ()
  (flet ((wait-for-non-null-value (sym)
	   (and (boundp sym) (not (null (symeval sym))))))
    (process-wait "Dim screen when idle enable" #'wait-for-non-null-value
		  '*dim-screen-after-n-minutes-idle*)
    (process-wait "Dim screen when idle enable" #'wait-for-non-null-value
		  '*screen-dimness-percent*))
  (unless (or *screen-save-in-progress*
	      (process:timer-pending-p *blank-screen-timer*))
    (let ((idle-test-difference (- *dim-screen-after-n-minutes-idle*
				   (min (minutes-idle) (minutes-since-dimmer-startup)))))
      (if (not (plusp idle-test-difference))
	  (if (machine-has-program-console-brightness-control)
	      (process-run-function "Saving screen" #'save-screen-and-requeue)
	    (process:reset-timer-relative *blank-screen-timer*
					  (* 60. *dim-screen-after-n-minutes-idle*)))
	(process:reset-timer-relative *blank-screen-timer*
				      (* 60. idle-test-difference))))))
;;; Establish timer check at init and warm boot
(defun blank-screen-establish-timer (&optional guaranteed-dimmable)
  (if *blank-screen-timer*
      (process:clear-timer *blank-screen-timer*)
      (setq *blank-screen-timer* (process:create-timer-call #'blank-screen-top-level ()
							    :name "Blank screen")))
  ;; a screen blanker is started only if the right kind of console proms are installed to
  ;; allow program brightness control, and only if blanking is "turned on" by having a
  ;; value in the parameter *dim-screen-after-n-minutes-idle*.  This means that if it is
  ;; turned off, later setting a numeric value into the variable is not enough to turn it
  ;; back on; it has to be done by the Set Screen Dimmer Parameters command, so that
  ;; (blank-screen-establish-timer) is evaluated again.  We have to do it this way to
  ;; avoid having (blank-screen-top-level) hang during a warm boot.
  (when (or guaranteed-dimmable
	    (machine-has-program-console-brightness-control))
    (when *dim-screen-after-n-minutes-idle*
      (blank-screen-top-level))))		;start a new one

;;; Manual way to make screen be dimmed
(defun dimmer-function-key-prompt ()
  (cond ((operation-handled-p *console* 'console-activate-screen-saver)
	 (format nil "Activate the console screen saver."))
	((machine-has-program-console-brightness-control)
	 (format
	   nil "Dim the screen to ~D% of its present brightness~:[~;, as if the console ~
had been idle for ~:*~D minutes~]."
	   *screen-dimness-percent* *dim-screen-after-n-minutes-idle*))
	(t
	 (format nil "Reserved for console dimming from the keyboard, for machines with ~
programmable brightness control."))))

(defun function-key-save-screen-and-requeue-if-possible (&rest ignore)
  (cond ((operation-handled-p *console* 'console-activate-screen-saver)
	 (console-activate-screen-saver *console*))
	((machine-has-program-console-brightness-control)
	 (progn
	   (process-sleep 2.)
	   (save-screen-and-requeue t)))
	(t
	 (beep))))

(add-function-key #\c-Refresh
		  '(function-key-save-screen-and-requeue-if-possible)
		  '(dimmer-function-key-prompt))

(defun blank-screen-initialize-timer ()
  (setq *program-console-brightness-control* nil)	   ;guarantee a real test
  (setq *dimmer-startup-time* (time:get-universal-time))   ;make "idle" timer start now
  (blank-screen-establish-timer))

;;; Start the automatic timed screen dimming
(add-initialization "Dim screen when idle" '(blank-screen-initialize-timer) '(:warm :now))  



