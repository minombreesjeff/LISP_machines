;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: Color; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; shared color map management
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defflavor common-color-map (super (min 0.0) (max 1.0)
				   (first-free-color 1)
				   (last-free-color 254.)
				   (bits-per-color 8.)
				   (first-palette-color 1)
				   (last-color-value 255.)
				   (luminance-method  '(:exponential-map-value 1.0)))
	   ()
  (:gettable-instance-variables min max)
  (:settable-instance-variables min max super)
  (:init-keywords :number-of-segments)
  :initable-instance-variables)


(defmethod (:init common-color-map :after) (plist &aux segs)
  (cond ((setq segs (get plist ':number-of-segments))
	 (cond ((fixp segs) (send self ':set-number-of-segments segs))
	       (t (loop for i in segs as j in '(:red :green :blue) do
			(send self ':set-number-of-segments i j))))))
  )

(defmethod (:exponential-map-value common-color-map)
	   (x &optional (gamma 1.5 ))
 (expt x gamma))

(defmethod (:invert common-color-map) (&optional noupdate)
  (send self ':create-balanced-map max min noupdate ))

(defmethod (:inverted-p common-color-map) ()
  (> min max))

(defmethod (:luminance-method common-color-map) ()
  (cond ((eq (car luminance-method) ':exponential-map-value)
	 (cadr luminance-method))
	(t luminance-method)))

(defmethod (:set-luminance-method common-color-map) (spec)
  (selectq spec
    ((t) (setq spec '(:exponential-map-value)))
    (nil (setq spec '(:exponential-map-value 1.0)))
    (t (cond ((numberp spec) (setq spec `(:exponential-map-value ,spec)))
	     (t (ferror "bad spec")))))
  (setq luminance-method spec))

(defwhopper (:create-balanced-map common-color-map)
	    (&optional lb ub noupdate (map (send super ':color-map-image)) map-num)
  (continue-whopper lb ub map-num map)
  (unless noupdate (send super :new-color-map map map-num)))

(defmethod (:create-balanced-map common-color-map :after)
	   (&optional lb ub noupdate map map-num)
  ub lb noupdate map
  (setq first-free-color (+ first-palette-color (send self ':total-segments)))

  (multiple-value-bind (map-size segn)
      (send super :color-map-description t)
    (decf map-size)
    (loop for mapn from (or map-num 0) below (or map-num segn)
	  do
      (loop for i from first-free-color to last-free-color do
	(multiple-value-bind (r g b)
	  (send super ':read-managed-map (logxor map-size i) mapn map)
	  (send super ':write-managed-map i (- 1.0 r) (- 1.0 g) (- 1.0 b) mapn map))))
    (setq last-free-color (1- last-color-value))
  ))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; stuff to manage the map for an 8 bit screen
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defflavor false-color-map
	(rsegs gsegs bsegs) (common-color-map)
  :gettable-instance-variables
  (:default-init-plist :luminance-method  '(:exponential-map-value 1.0)
  ))

(defmethod (:number-of-segments false-color-map) (&optional color)
  (selectq color
    (nil (values rsegs gsegs bsegs))
    (:red rsegs)
    (:green gsegs)
    (:blue bsegs)
    (:gray (let ((g (gcd rsegs gsegs bsegs)))
	     (* g (// rsegs g) (// gsegs g) (// bsegs g))))
    (t (ferror "~A is not a color" color))))

(defmethod (:total-segments false-color-map) ()
  (* rsegs gsegs bsegs))

(defmethod (:set-number-of-segments false-color-map) (n &optional (colors '(:red :green :blue)))
  (loop for i in (cond ((listp colors) colors)
		       (t (list colors)))
	do
	(selectq i
	  (:red (setq rsegs n))
	  (:green (setq gsegs n))
	  (:blue (setq bsegs n))
	  (:gray (setq rsegs (setq bsegs (setq gsegs (fix (expt n 0.3334))))))
	  (t (ferror "~A is not a color" i)))))

(defmethod (:create-balanced-map false-color-map)
	   (&optional lb ub map-num map
		      &aux ri gi bi )

  (setq min (or lb min 0.0)
	max (or ub max 1.0))

  (setq ri (// (- max min) (max 1 (1- rsegs)))
        gi (// (- max min) (max 1 (1- gsegs)))
	bi (// (- max min) (max 1 (1- bsegs))))


  (loop for n from  (or map-num 0)
	    to (or map-num
		   (1- (multiple-value-bind (nil nn)
			   (send super :color-map-description t)
			 nn)))
	do
	(loop for r from 0 below rsegs
	      with rv
	      do
	      (setq rv (lexpr-send self (car luminance-method)
				   (+ min (* ri r)) (cdr luminance-method)))
	      (loop for g from 0 below gsegs
		    with gv 
		    do
		    (setq gv (lexpr-send self (car luminance-method)
					 (+ min (* gi g)) (cdr luminance-method)))
		    (loop for b from 0 below bsegs
			  with bv
			  do
			  (setq bv (lexpr-send self (car luminance-method)
					       (+ min (* bi b)) (cdr luminance-method)))
			  
			  (send super ':write-managed-map
				(send self ':compute-rgb-slots
				      (// (+ r 0.01) rsegs)
				      (// (+ g 0.01) gsegs)
				      (// (+ b 0.01) bsegs))
				rv gv bv
				n map))))

	;; reserve first and last for black and white
	(send super ':write-managed-map last-color-value 1.0 1.0 1.0 n map)
	(send super ':write-managed-map 0 0 0 0 n map)
	)
  )

(defmethod (:compute-rgb-slots false-color-map)
	   (r g b)
  "compute false color rgb slot"

  (cond ((and (= r 0) (= g 0) (= b 0))
	 0)
	((and (= r 1.0) (= g 1.0) (= b 1.0))
	 last-color-value)
	(t
	 ;; normalize RGB into slot nearest
	 (setq r (fix (* (float r) rsegs)))
	 (setq g (fix (* (float g) gsegs)))
	 (setq b (fix (* (float b) bsegs)))
	 
	 ;; clip colors
	 (setq r (max 0 (min r (1- rsegs))))
	 (setq g (max 0 (min g (1- gsegs))))
	 (setq b (max 0 (min b (1- bsegs))))
	 
	 (+ (* r gsegs bsegs)
	    (* g bsegs)
	    b
	    first-palette-color)
	 )))


(defmethod (:compute-rgb-dat false-color-map) (rr gg bb)
  (send self ':compute-rgb-slots rr gg bb))

(defmethod (:compute-rgb-data false-color-map) (rr gg bb)
  (send self ':compute-rgb-slots rr gg bb))

;;; Returns separate arrays for red green and blue, such that
;;; (+ (aref ra r) (aref ga g) (aref ba b)) is the correct index in the map for {r,g,b}.
;;; The palettes generated by false color palettes are all compatable with this model,
;;; even though in general color palettes aren't.
(defmethod (:orthogonal-rgb-segments false-color-map) (range)
  (let ((r-arr (make-array range :type 'art-8b))
	(g-arr (make-array range :type 'art-8b))
	(b-arr (make-array range :type 'art-8b))
	(r-quant (round range rsegs))
	(g-quant (round range gsegs))
	(b-quant (round range bsegs)))
    (declare (sys:array-register r-arr g-arr b-arr))
    (loop for i from 0 below range
	  as r-v = (+ first-palette-color (truncate i r-quant))
	  as g-v = (* rsegs (truncate i g-quant))
	  as b-v = (* rsegs gsegs (truncate i b-quant))
	  do
      (setf (aref b-arr i) r-v)
      (setf (aref g-arr i) g-v)
      (setf (aref r-arr i) b-v))
    (values r-arr g-arr b-arr)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; stuff for a 24 (or 32) bit screen to imitate a managed 8 bit screen
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defflavor full-color-map
	(rgb-segs) (common-color-map)
  (:default-init-plist :luminance-method  '(:exponential-map-value 1.0))
  )

(defmethod (:number-of-segments full-color-map) (&optional color)
  (selectq color
    (nil (values rgb-segs rgb-segs rgb-segs))
    ((:red :green :blue :gray) rgb-segs)
    (t (ferror "~A is not a color" color))))

(defmethod (:total-segments full-color-map) ()
  rgb-segs)

(defmethod (:set-number-of-segments full-color-map) (n &optional (color '(:gray)))
  (loop for i in (cond ((listp color) color)
		       (t (list color)))
	do
	(selectq i
	  ((:red :green :blue :gray) (setq rgb-segs n ))
	  (t (ferror "~A is not a color" color)))))

(defmethod (:create-balanced-map full-color-map)
	   (&optional lb ub map-num map &aux inc )
  (setq min (or lb min 0.0)
	max (or ub max 1.0))
  (setq inc (// (- max min) (max 1 (1- rgb-segs))))

  (loop for n from  (or map-num 0) to (or map-num
					  (1- (multiple-value-bind (nil nn)
						  (send super :color-map-description t)
						nn)))
	do
	(loop for i from 0 below rgb-segs
	      with fc = first-palette-color and v do
	      (send super ':write-managed-map (+ i fc)
		    (setq v (lexpr-send self
					(car luminance-method)
					(+ min (* inc i))
					(cdr luminance-method)))
		    v v
		    n map))

  ;; reserve first and last for black and white
  (send super ':write-managed-map last-color-value 1.0 1.0 1.0 n map)
  (send super ':write-managed-map 0 0 0 0 n map))
  )

(defmethod (:compute-rgb-slots full-color-map) (r g b)

  "compute real color rgb slot"

  (cond ((and (= r 0) (= g 0) (= b 0))
	 (values 0 0 0))
	((and (= r 1.0) (= g 1.0) (= b 1.0))
	 (let ((l last-color-value))
	   (values l l l)))
	(t 
	 (let* ((segs rgb-segs)
		(segs-1 (1- segs))
		(fpc first-palette-color))
	   (values
	     (+ fpc (max 0 (min (fix (* (float r) segs)) segs-1)))
	     (+ fpc (max 0 (min (fix (* (float g) segs)) segs-1)))
	     (+ fpc (max 0 (min (fix (* (float b) segs)) segs-1))))))
	)
  )

(defmethod (:compute-rgb-data full-color-map) (rr gg bb)
  (multiple-value-bind (r g b)
    (send self ':compute-rgb-slots rr gg bb)
    (let ((bpc bits-per-color))
      (logior r (lsh (logior (lsh b bpc) g) bpc))
      )))

(defmethod (:compute-rgb-dat full-color-map) (rr gg bb)
  (multiple-value-bind (r g b)
    (send self ':compute-rgb-slots rr gg bb)
    (let ((bpc bits-per-color))
      (logior r (lsh (logior (lsh b bpc) g) bpc))
      )))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; overall stuff to manage the color map for this screen
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defflavor managed-map-mixin
	((named-colors (make-hash-table))
	 map-manager
	 )
	()
  (:init-keywords :number-of-segments :named-rgb-colors :init-color-map)
  (:default-init-plist
   :init-color-map :init-managed-color-map
   :named-rgb-colors '((:red 1.0 0 0) (:green 0 1.0 0) (:blue 0 0 1.0)
		       (:yellow 1.0 1.0 0) (:cyan 0 1.0 1.0) (:magenta 1.0 0 1.0)))
  :initable-instance-variables
  (:settable-instance-variables map-manager)
  :gettable-instance-variables)

(defmethod (:init  managed-map-mixin :after) (options)
  (lexpr-send self ':name-colors (get options ':named-rgb-colors)))

(defmethod (:init-managed-color-map managed-map-mixin)
	   ( &optional typ segs &aux size rgb )

  (multiple-value (size nil rgb )
    (send self ':color-map-description t))
  (setq segs (or segs
		 (cond ((eq rgb ':independent)
			(unless typ (setq typ 'full-color-map))
			(list (- size 2) (-  size  2) (- size 2)))
		       (t
			(unless typ (setq typ 'false-color-map))
			(let ((ss (fix (expt (- size 3) 0.333))))
			  (list ss ss ss))))))

  ;; first and last slots eternally reserved for black and white
  (send self ':name-color ':black 0)
  (send self ':name-color ':white -1)
  (send self ':write-managed-map (1- size) 1.0 1.0 1.0)
  (send self ':write-managed-map 0 0 0 0)

  (setq map-manager
	(make-instance typ ':super self
		       ':last-color-value (1- size)
		       ':first-palette-color 1
		       ':bits-per-color (haulong (1- size))
		       ':number-of-segments segs))

  (send self ':create-balanced-map nil nil t)
  )

(defmethod (:number-of-segments managed-map-mixin) (&optional color)
  (send map-manager ':number-of-segments color))

(defmethod (:compute-rgb-slots managed-map-mixin) (r g b)
  (send map-manager :compute-rgb-slots r g b))

(defmethod (:compute-rgb-dat managed-map-mixin) (r g b)
  (send map-manager ':compute-rgb-dat r g b))

(defmethod (:compute-rgb-data managed-map-mixin) (r g b)
  (send map-manager ':compute-rgb-data r g b))

(defmethod (:set-number-of-segments managed-map-mixin) (n &rest colors)
  (send map-manager ':set-number-of-segments n colors)
  (send self ':create-balanced-map))

(defmethod (:name-color managed-map-mixin) (name r &optional g b)
  (send named-colors ':put-hash name (cond ((or g b) (list r g b))
					   (t r))))

(defmethod (:name-colors managed-map-mixin) (&rest names)
  (loop for i in names do
		(lexpr-send self ':name-color (car i) (cdr i))))

(defmethod (:get-color-named managed-map-mixin) (name)
  (gethash name named-colors))

(defmethod (:create-balanced-map managed-map-mixin)
	   (&optional min max no-update)
  (send map-manager ':create-balanced-map min max no-update)
  )

(defmethod (:set-luminance-method managed-map-mixin)
	   (&optional (spec t) &rest ignore)

  (send map-manager ':set-luminance-method spec)
  (send map-manager ':create-balanced-map)
  (send map-manager ':luminance-method)
  )

(defmethod (:luminance-method managed-map-mixin)
	   (&rest ignore)
  (send map-manager ':luminance-method)
  )

(defmethod (:compute-alu managed-map-mixin) (alu color-object)
  (send color-object ':compute-alu alu self))

(defmethod (:compute-hexcone-alu managed-map-mixin) ( alu i h s &optional inv (perm 0))

  ;; invert color sense if requested
  (cond
    ((listp inv)
     (and (first inv) (setq i (- 1.0 i)))
     (and (second inv) (setq h (- 1.0 h)))
     (and (third inv) (setq s (- 1.0 s))))
    ((eq inv t)
	 (setq i (- 1.0 i))
	 (setq h (- 1.0 h))
	 (setq s (- 1.0 s))))

  ;; permute the colors if requested
  (selectq (\ perm 3)
    (1 (psetq i h h i))
    (2 (psetq i s s i)))
  (selectq (// perm 3)
    (1 (psetq h s s h)))

  (multiple-value-bind (r g b)
      (hexcone-ihs->rgb i  h s)
    (send self ':compute-rgb-alu alu r g b)))

(defflavor use-managed-map-mixin (tv:screen) ())

(defmethod (:init  use-managed-map-mixin :after) (&rest ignore)
  (or (typep tv:screen 'managed-map-mixin)
      (ferror "Must be mixed with a screen including BALANCED-MAP-MIXIN")))

(defmacro pass-to-sheet (&rest messages)
  `(progn 'compile
	  ,@(loop for i in messages collect
		  `(defmethod (,i use-managed-map-mixin) (&rest args)
		     (lexpr-funcall tv:screen ',i args)))))

(pass-to-sheet
  :control-and-sync
  :compute-alu 
  :create-balanced-map :number-of-segments :set-number-of-segments :compute-color-alu
  :rot :mir :set-luminance-method :luminance-method)

;;
;; R G and B are floatp, to be normalized and passed on
;;
(defmethod (:write-managed-map managed-map-mixin)
	   (slot r g b &rest args &aux hr hg hb)
  (multiple-value (hr hg hb) (rgb->hardware-rgb r g b))
  (lexpr-send self ':write-color-map-image slot hr hg hb args)
  )
(defmethod (:read-managed-map managed-map-mixin)
	   (slot &rest args)
  (multiple-value-bind (r g b)
      (lexpr-send self ':read-color-map-image slot args)
    (hardware-rgb->rgb r g b)))

(pass-to-sheet :write-managed-map :read-managed-map)

;;
;; VAL is a fixp, normalized to map dimenstions;
;;
(defmethod (:write-color-map-component managed-map-mixin)
	   (slot color val &rest args &aux r g b )

  (multiple-value (r g b)
    (lexpr-send self ':read-color-map-image slot args))
  (selectq color
    ((:set-red :red) (setq r val))
    ((:set-green :green) (setq g val))
    ((:set-blue :blue) (setq b val)))
  (lexpr-send self ':write-color-map-image slot r g b args)
  )
 
;;
;; VAL is a floatp, to be normalized and stuffed into the map
;;
(defmethod (:write-managed-map-component managed-map-mixin)
	   (slot color val &rest args )
  "normalize val and write it into color map image"
  (lexpr-send self ':write-color-map-component
	slot color (rgb->hardware-rgb val 0 0) args)
  )

;;
;; This is the default color map initializer, which generates
;; gamma corrected ramps
;;
(defun ramp-color-map-value (slot)
  (declare (special n-slots gamma))
  (if (or (eql gamma 1) (eql gamma 1.0))
      (let ((sl (// (* slot 1024.) n-slots)))
	(values sl sl sl))
      (let ((v (min 1023.
		    (max 0
			 (round (* 1024.0
				   (expt (* slot (// 1.0 n-slots))
					 gamma)))))))
	(values v v v))))


(defmethod (:initialize-color-map managed-map-mixin)
	   (&optional segment-number
		      map
		      (spec-function #'ramp-color-map-value)
		      &special (gamma 1.0))
  "initialize a color map array to a plain ramp in every map"
  (multiple-value-bind (n-slots n-maps)
      (send self :color-map-description t)
    (declare (special n-slots))

    (when (numberp spec-function)
      (setq gamma spec-function
	    spec-function nil))

    (let* ((image (send self :color-map-image))
	   (real-map (send self :color-map))
	   (new-map (if (or (eq map real-map)
			    (null map)
			    (eq map t))
			image
			map))
	   (spec-function (if spec-function
			      spec-function
			      #'ramp-color-map-value
			      )))
      (loop for mapn from 0 below n-maps
	    when (or (null segment-number)
		     (= mapn segment-number))
	      do
		(loop for slot from 0 below n-slots
		      do 
		  (multiple-value-bind (r g b)
		      (funcall spec-function slot)
		    (send self :write-color-map-image slot r g b mapn new-map)
		    )))
      (when (or (null map) (eq map real-map))
	(send self :new-color-map image segment-number)))
      map))


;
; Simple variation to support 16 bit nuvista mode
;
(defflavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")5b-full-color-map0 () (full-color-map))

(defmethod (1:compute-rgb-data0 5b-full-color-map) (r g b)
  (multiple-value-bind (r g b)
      (send self ':compute-rgb-slots r g b)
    (%logdpbs (lsh b -3) (byte 5 10)
	      (lsh g -3) (byte 5 5)
	      (lsh r -3) (byte 5 0)
	      0)))
(defmethod (1:compute-rgb-dat0 5b-full-color-map) (r g b)
  (multiple-value-bind (r g b)
      (send self ':compute-rgb-slots r g b)
    (%logdpbs (lsh b -3) (byte 5 10)
	      (lsh g -3) (byte 5 5)
	      (lsh r -3) (byte 5 0)
	      0)))

(pass-to-sheet :write-managed-map-component)

(compile-flavor-methods false-color-map full-color-map)
