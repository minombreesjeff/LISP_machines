;;; -*- Mode: LISP; Syntax: Common-lisp; Package: COMMON-LISP-INTERNALS; Base: 10 -*-
;--- This should be in the SYSAP package.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Associated file is select-select-help.sab

(dw:define-program-framework D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")select-key-selector
0  :command-definer T
  :select-key #\=
  :inherit-from (dw:help-program)
  :top-level (select-key-selector-top-level)
  :command-table (:inherit-from '("help-program" "standard arguments"))
  :help standalone-select-key-selector-help
  :panes ((title :title
		 :default-character-style '(:eurex :italic :huge)
		 :redisplay-function 'dw:help-program-draw-title
		 :redisplay-after-commands nil)
	  (keys :display
		:redisplay-function 'display-keys
		:redisplay-after-commands nil
		:more-p nil :blinker-p nil
		:margin-components '((dw:margin-ragged-borders :thickness 1)
				     (dw:margin-whitespace :margin :left
							   :thickness 2)
				     (dw:margin-scroll-bar :margin :left
							   :visibility :if-needed)
				     (dw:margin-label :margin :top
						      :string "Keys"
						      :character-style (:swiss :bold nil)
						      :box :inside)
				     (dw:margin-white-borders :thickness 3)))
	  (activities
	    :display
	    :redisplay-function 'display-activities
	    :redisplay-after-commands nil
	    :more-p nil :blinker-p nil
	    :margin-components '((dw:margin-ragged-borders :thickness 1)
				 (dw:margin-whitespace :margin :left
						       :thickness 2)
				 (dw:margin-scroll-bar :margin :left
						       :visibility :if-needed)
				 (dw:margin-label :margin :top
						  :string "Activities"
						  :character-style (:swiss :bold nil)
						  :box :inside)
				 (dw:margin-white-borders :thickness 3)))
	  (assignments
	    :display
	    :redisplay-function 'display-assignments
	    :incremental-redisplay T
	    :typeout-window T
	    :margin-components '((dw:margin-ragged-borders :thickness 1)
				 (dw:margin-whitespace :margin :left
						       :thickness 2)
				 (dw:margin-scroll-bar :margin :left
						       :visibility :if-needed)
				 (dw:margin-label :margin :top
						  :string "Assignments"
						  :character-style (:swiss :bold nil)
						  :box :inside)
				 (dw:margin-white-borders :thickness 3)))
	  (command-menu :command-menu
			:columns '(("Add Assignment" "Delete Assignment" "Save Assignments")
				   ("Get From system" "Put Into System" "Help")))
	  (interactor :interactor
		      :end-of-page-mode :scroll))
  :configurations '((main
		      (:layout
			(main :column title choices interaction)
			(choices :row keys&activities assignments)
			(keys&activities :column keys activities)
			(interaction :row command-menu interactor))
		      (:sizes
			(main (title 1 :lines)
			      (interaction 4 :lines command-menu)
			      :then (choices :even))
			(choices (keys&activities .3) :then (assignments :even))
			(keys&activities
			  (keys 10 :lines) :then (activities :even))
			(interaction (command-menu .3) :then (interactor :even)))))
  :state-variables ((assignments ()))
  )
(defmethod 1(select-key-selector-top-level select-key-selector)0 (&rest options)
  (setq assignments (copy-table *select-key-table*))
  (apply #'dw:default-command-top-level self options))

;;;========================================
;;; Presentation types
;;;========================================

(define-presentation-type 1select-key0 ()
   :parser ((stream &key type)
	      (values
		(let ((loc (send stream :read-location))
		      (token (dw:read-standard-token stream)))
		  (let ((char (or (name-char token)
				  (and (= 1 (string-length token))
				       (char-upcase (aref token 0))))))
		    (when (null char)
		      (error 'dw:input-not-of-required-type :type type :string token))
		    (let ((preferred-name
			    (if (or (char-equal char #\space)
				    ( (char-code char) #o200))
				(char-name char)
				(string char))))
		      (dw::presentation-replace-input
			stream loc
			;; How to return other values (relative-p, time-specified-p)?
			  preferred-name)
		      char)))
		'select-key))
   :printer ((char stream)
	     (if (or (char-equal char #\space)
		     ( (char-code char) #o200))
		 (write-string (char-name char) stream)
		 (write-char char stream))))
(define-presentation-type 1selectable-activity0 ()
   :expander 'sys:activity-name)

;; Need this presentation type to get a more intelligent printer
(define-presentation-type 1select-key-or-selectable-activity
0      ()
   :abbreviation-for '((or select-key selectable-activity))
   :printer ((object stream &key acceptably)
	     (present object (select-key-or-selectable-activity? object)
		      :stream stream
		      :acceptably acceptably)))
;; At least contain this little kludge, necessary
;; because dw::ptypep is broken again.
(defun 1select-key-or-selectable-activity?0 (thing)
  (if (characterp thing)
      'select-key
      'selectable-activity))

;;;========================================
;;; Program pane display
;;;========================================

(defun 1display-keys0 (ignore stream)
  (fresh-line stream)
  (filling-output (stream)
    (flet ((present-char (char &optional specially)
	     (dw:with-output-as-presentation
	       (:stream stream
		:type 'select-key
		:object char)
	       (if specially
		   (write-string specially stream)
		   (write-char char stream)))
	     (write-char #\space stream)))
      ;; letters ABCDEFGHIJKLMNOPQRSTUVWXYZ
      (loop for code from (char-code #\A) to (char-code #\Z)
	    for char = (code-char code)
	    do (present-char char))
      ;; Digits reserved for args to Select commands
      ;; ascii graphics !"#$%&'()*+,-./:;<=>? @[\]^_`{|}~
      (loop for code from 33 to 126
	    for char = (code-char code)
	    unless (or (digit-char-p char)
		       (alpha-char-p char))
	      do (present-char char))
      (loop for code below 32
	    for char = (code-char code)
	    do (present-char char))
      (present-char #\‡)
      (present-char #\space "Space")
      (loop repeat 50 for code from #o200
	    for char = (code-char code)
	    for name = (char-name char)
	    do
	(when name
	  (unless (member char '(#\Select #\Function #\Rubout #\symbol-Help)
			  :test #'char-equal)
	    (present-char char name))))
      )))
(defun 1display-activities0 (ignore stream)
  (let ((suggestions (maptable *activity-table* #'cons 'list)))
    (setf suggestions (sort suggestions #'alphalessp :key #'car))
    (loop for (name) in suggestions do
      (present name 'selectable-activity :stream stream)
      (terpri stream))))
(defmethod 1(display-assignments select-key-selector)0 (stream)
  (let ((es (maptable assignments #'cons 'list)))
    (setf es (sort es #'string-lessp :key #'car))
    (formatting-table (stream)
      (dolist (assignment es)
	(dw:with-redisplayable-output
	    (:stream stream :unique-id assignment)
	  (formatting-row (stream)
	    (formatting-cell (stream)
	      (dw:with-redisplayable-output
		  (:stream stream :cache-value (first assignment))
		(present (first assignment) 'select-key :stream stream)))
	    (formatting-cell (stream)
	      (dw:with-redisplayable-output
		  (:stream stream :cache-value (rest assignment))
		(present (rest assignment) 'selectable-activity :stream stream)))))))))

;;;========================================
;;; Program commands and presentation translators
;;;========================================
(define-select-key-selector-command (1com-get-from-system
0				      :menu-accelerator T)
				    ()
  (setq assignments (copy-table *select-key-table*)))
(define-select-key-selector-command (1com-put-into-system
0				      :menu-accelerator T)
				    ()
  (setq *select-key-table* (copy-table assignments)))
(define-select-key-selector-command (1com-add-assignment
0				      :menu-accelerator T)
  ((some-from-key 'select-key-or-selectable-activity)
   (one-to-activity 'selectable-activity
		    :when (eq (select-key-or-selectable-activity? some-from-key)
			      'select-key)
		    :confirm T)
   (other-to-activity 'select-key
		      :when (eq (select-key-or-selectable-activity? some-from-key)
				'selectable-activity)
		      :confirm T))
  (multiple-value-bind (from-key to-activity)
      (if (cp::unread-argument-p one-to-activity)
	  (values other-to-activity some-from-key)
	  (values some-from-key one-to-activity))
    (setf (gethash from-key assignments) to-activity)))
(define-presentation-to-command-translator 1add-assignment-key
0   (select-key :gesture :select)
   (object)
  (values `(com-add-assignment ,object)
	  'cp:command
	  :activate nil))
(define-presentation-to-command-translator 1add-assignment-activity
0   (selectable-activity :gesture :select)
   (object)
  (values `(com-add-assignment ,object)
	  'cp:command
	  :activate nil))
(define-select-key-selector-command (1com-delete-assignment
0				      :menu-accelerator T)
    ((from-key 'select-key-or-selectable-activity))
   (unless (if (characterp from-key)
	       (remhash from-key assignments)
	       (let ((found nil))
		 (maphash #'(lambda (key activity)
			      (when (eq activity from-key)
				(remhash key assignments)
				(setf found t)))
			  assignments)
		 found))
     (format (dw:get-program-pane 'interactor)
	     "~@\\presentation\\ has no assignment."
	     from-key 'select-key-or-selectable-activity)))
(define-presentation-to-command-translator 1delete-assignment-key
0   (select-key :gesture :shift-middle		;same gesture as Document Examiner bookmarks
	       :tester ((object)
			(let ((program (ignore-errors dw:*program*)))
			  (and (typep program 'select-key-selector)
			       (gethash object (select-key-selector-assignments program))
			       T))))
   (object)
  `(com-delete-assignment ,object))
(define-presentation-to-command-translator 1delete-assignment-activity
0   (selectable-activity :gesture :shift-middle	;same gesture as Document Examiner bookmarks
			:tester ((object)
				 (let ((program (ignore-errors dw:*program*)))
				   (and (typep program 'select-key-selector)
					(block search
					  (maphash #'(lambda (ignore activity)
						       (when (eq activity object)
							 (return-from search t)))
						   (select-key-selector-assignments program)))))))
   (object)
  `(com-delete-assignment ,object))
#||
(define-presentation-translator 1key-from-activity
0   (selectable-activity select-key
			:tester ((object) (and (first object) T)))
   (object)
  (first object))
||#
;;---It would be nice to save only the differences from the
;; system's assignments, but since those aren't saved anywhere,
;; we can't.  That means the user's assignments can add or replace,
;; but can't delete.
(define-select-key-selector-command (1com-save-assignments
0				      :menu-accelerator T)
    ()
   (let ((interval (zwei:create-interval
		     nil nil (make-instance 'zwei:kill-ring-interval))))
     (with-open-stream (out (zwei:interval-stream-into-bp
			      (zwei:interval-last-bp interval)))
       (with-standard-io-environment 
	 (let ((*print-pretty* T))
	   (write `(tv:setup-select-keys ',(maptable assignments #'cons 'list) ())
		  :stream out)
	   (terpri out))))
     (send zwei:*kill-history* :push interval))
   (format T "~&Pushed on kill history, to yank into your init file~%"))
;; In TV because it's visible outside this program
(defun 1tv:setup-select-keys0 (items-to-add keys-to-remove)
  (dolist (e items-to-add)
    (setf (gethash (car e) *select-key-table*) (cdr e)))
  (dolist (e keys-to-remove)
    (remhash e *select-key-table*)))

;;;========================================
;;; Interface to the Help Program
;;;========================================

;;---This seems never to run.
(defmethod 1(standalone-select-selector-help select-key-selector)0 (stream string-so-far)
  (dw:help-program-help self stream string-so-far "
Click on a select key from the Keys menu, 
or on an activity from the Activities menu,
or on a command from the menu at the bottom left.
Click shift-Middle on an assignment in the Assignments pane to delete an assignment."))


(define-presentation-translator 1select-key-help0 (select-key dw:help-topic)
				(select-key &key window)
  (ignore select-key)				;all keys factory keyed alike
  (let ((program (dw:current-program :type 'dw:help-program :window window :error-p nil)))
    (when program
      (values
	(dw:help-topic-available program "the" :program "select keys")))))

(define-presentation-translator 1selectable-activity-help0 (selectable-activity dw:help-topic)
				(activity &key window)
  (let ((program (dw:current-program :type 'dw:help-program :window window :error-p nil)))
    (when program
      (values
	(dw:help-topic-available program "the"
				 (present-to-string activity 'selectable-activity)
				 "Activity")))))

(define-presentation-to-command-translator 1help-about-this-select-key
0   (select-key :gesture :command-menu-help
		 :documentation ((key)
				 (format nil "Help about select keys" key)))
   (select-key &key window)
  (ignore select-key)
  (let ((program (dw:current-program :type 'dw:help-program :window window :error-p nil)))
    (when program
      (dw:help-command-if-available program "the" :program "select keys"))))

(define-presentation-to-command-translator 1help-about-this-activity
0   (selectable-activity :gesture :command-menu-help
		 :documentation ((activity)
				 (with-output-to-string (stream)
				   (write-string "Help about " stream)
				   (present activity 'selectable-activity :stream stream))))
   (activity &key window)
  (let ((program (dw:current-program :type 'dw:help-program :window window :error-p nil)))
    (when program
      (dw:help-command-if-available program "the"
				    (present-to-string activity 'selectable-activity)
				    "activity"))))

;;; This makes the activity sensitive.
(cp:install-command 'select-key-selector 'si::com-select-activity)

;; Get "Help" into the menu
(dw::define-standard-menu-accelerator dw::com-help select-key-selector "Help")
