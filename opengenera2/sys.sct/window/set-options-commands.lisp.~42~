;;; -*- Mode: LISP; Syntax: Zetalisp; Package: TV; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;; Window system control panels

(cp:define-command (com-set-window-options :command-table "Window"
					   :provide-output-destination-keyword nil)
    ((window 'sheet
	     :default terminal-io
	     :provide-default (operation-handled-p terminal-io :choose-attributes)))
   (screen-editor-edit-attributes window :own-window nil))



;;; Modified by Dodds 9/03/86 13:23:06 to provide an integrated
;;; interface to both the Set Screen Options command and to programs
;;; (esp. init files) via the function TV:SET-SCREEN-OPTIONS.

;;; There is the following division of labor:
;;; GATHER-AND-SET-SCREEN-OPTIONS does all the DW user interactions to
;;; gather new values.  SET-SCREEN-OPTIONS is a top-level function that
;;; does the same sort of thing as a program interface, callable from init
;;; files and the like.  They call a common function to do the actual
;;; settings, SET-SCREEN-OPTIONS-INTERNAL.  The latter function assumes
;;; correct input!  The error checking is all in the interface functions.
(cp:define-command (com-set-screen-options :command-table "Session"
					   :provide-output-destination-keyword nil)
    ()
   (gather-and-set-screen-options :own-window nil))

;; Forward reference: Utilities
(compiler:function-defined 'tv:machine-has-program-console-brightness-control)

(defun gather-and-set-screen-options (&key own-window)
  (declare (special *dim-screen-after-n-minutes-idle* *screen-dimness-percent*))
  (flet ((fixed-line (string)
	     (dw:with-redisplayable-output (:unique-id string
					    :cache-value string
					    :stream query-io)
	       (terpri query-io)
	       (cl:write-line string query-io)))
	   )
    (let ((dimmer-p (and			; is Utilities loaded?
			 (fboundp 'tv:machine-has-program-console-brightness-control)
			 (funcall 'tv:machine-has-program-console-brightness-control)))
	  (screens (rem-if #'(lambda (screen) (typep screen 'generic-who-line-screen-mixin))
			   all-the-screens)))
      (multiple-value-bind
	(nil mouse-doc-options nil status-line-options
	 nil dimmer-options beep-mode
	 nil end-of-page-options context-nlines noise-string graphics-scan-conversion-mode
	 nil background-interactor-options
	 nil auto-repeat-options
	 nil console-who-line
	 screen-option-alist)
	  (dw:accepting-values (t :own-window own-window)
	    (values
	      (fixed-line "Documentation line options:")
	      (choose-status-line-options :documentation)
	      (fixed-line "Status line options:")
	      (choose-status-line-options :status)
	      (fixed-line "Global screen options:")
	      (when dimmer-p
		(let ((interval (accept '((token-or-type (("Don't dim" . nil))
							 time:time-interval))
					:default (and *dim-screen-after-n-minutes-idle*
						      (* *dim-screen-after-n-minutes-idle*
							 60))
					:provide-default t
					:prompt "  Interval to wait before dimming screen"))
		      (percentage *screen-dimness-percent*))
		  (when interval
		    (setq percentage (accept '((cl:integer 0 100.))
					     :prompt "  Dimness percentage"
					     :default percentage)))
		  (list 'tv:*dim-screen-after-n-minutes-idle* (and interval
								   (cl:// interval 60))
			'*screen-dimness-percent* percentage)))
	      (accept '((scl:alist-member :alist (("Beep only" . :beep)
						  ("Flash only" . :flash)
						  ("Beep and flash" . t))))
		      :prompt "  Beep mode" :default beep)
	      (fixed-line "Global window defaults:")
	      (let ((end-of-page-mode (accept '((cl:member :scroll :truncate :wrap))
					      :prompt "  End of screen action"
					      :default dw::*default-end-of-page-mode*))
		    (scroll-factor dw::*default-end-of-page-scroll-factor*))
		(unless (eq end-of-page-mode :wrap)
		  (setq scroll-factor (accept 'cl:number
					      :default scroll-factor
					      :prompt
					      "  Amount to scroll (number of lines or screen fraction)"
					      )))
		(list end-of-page-mode scroll-factor))
	      (accept '((cl:integer 0))
		      :prompt "  Overlap between screens when scrolling (lines)"
		      :default cp::*scroll-one-screenful-number-of-lines-left*)
	      (let* ((noise-string-p
		       (accept 'scl:boolean
			       :prompt "  Whether to prompt in the CP"
			       :default (not si:*disable-noise-strings*)))
		     (noise-string-style
		       (if noise-string-p
			   (accept `((scl:character-style))
				   :prompt "  Character style for prompts"
				   :default (si:parse-character-style
					      si:*noise-string-character-style*))
			   (si:parse-character-style
			     si:*noise-string-character-style*))))
		(list noise-string-p noise-string-style))
	      (graphics::scan-conversion-mode-option nil
						     graphics::*default-scan-conversion-flags*
						     :prompt "  Graphics scan conversion")
	      (fixed-line "Background interactor window settings:")
	      (list (dw:accept '((scl:member :at-right :at-top))
			       :prompt "  Position the interactor"
			       :default tv:*background-lisp-interactor-screen-utilization*)
		    (dw:accept '((cl:number 1\3 1))
			       :prompt "  Fraction of the screen it covers"
			       :default tv:*background-lisp-interactor-screen-fraction*))
	      (fixed-line "Keyboard and mouse repeat controls:")
	      (list (accept 'boolean
			    :prompt "  Keyboard auto-repeats when any key is held"
			    :default si:*kbd-auto-repeat-enabled-p*)
		    (accept 'boolean
			    :prompt "  REPEAT key enabled"
			    :default si:*kbd-repeat-key-enabled-p*)
		    (accept '((cl:integer 0))
			    :prompt "  60ths of a second before key starts repeating"
			    :default si:*kbd-auto-repeat-initial-delay*)
		    (accept '((cl:integer 0))
			    :prompt "  60ths of a second between repeated characters"
			    :default si:*kbd-repetition-interval*)
		    (accept 'boolean
			    :prompt "  Scroll bar auto-repeats when mouse button is held"
			    :default dw::*scroll-bar-auto-repeat-enable*)
		    (accept '((cl:integer 0))
			    :prompt "  60ths of a second before scroll bar starts repeating"
			    :default dw::*scroll-bar-auto-repeat-initial-delay*)
		    (accept '((cl:integer 0))
			    :prompt "  Minimum number of lines scrolled per second"
			    :default dw::*scroll-bar-auto-repeat-minimum-lines-per-second*)
		    (accept '((cl:integer 0))
			    :prompt "  Maximum number of lines scrolled per second"
			    :default dw::*scroll-bar-auto-repeat-maximum-lines-per-second*)
		    (accept '((cl:number (0) 60))
			    :prompt "  Maximum number of screens scrolled per second"
			    :default (round 60
					    dw::*scroll-bar-auto-repeat-screen-interval*)))
	      (fixed-line "Other:")
	      (accept 'scl:boolean
		      :prompt "  Status line present on main screen"
		      :default *console-screens-have-who-line*)
	      (mapcar #'gather-one-screen-options screens)))
	(let ((who-line-changed (set-global-screen-options-internal
				  :console-who-line console-who-line
				  :mouse-doc-options mouse-doc-options
				  :status-line-options status-line-options
				  :dimmer-options dimmer-options
				  :beep-mode beep-mode
				  :end-of-page-options end-of-page-options
				  :context-nlines context-nlines
				  :noise-string-p (first noise-string)
				  :noise-string-style (second noise-string)
				  :graphics-scan-conversion-mode
				   graphics-scan-conversion-mode
				  :background-lisp-interactor-screen-utilization
				   (nth 0 background-interactor-options)
				  :background-lisp-interactor-screen-fraction
				   (nth 1 background-interactor-options)
				  :keyboard-auto-repeat (nth 0 auto-repeat-options)
				  :enable-repeat-key (nth 1 auto-repeat-options)
				  :keyboard-repeat-initial-delay (nth 2 auto-repeat-options)
				  :keyboard-repetition-interval (nth 3 auto-repeat-options)
				  :scroll-bar-auto-repeat (nth 4 auto-repeat-options)
				  :scroll-bar-repeat-initial-delay (nth 5 auto-repeat-options)
				  :scroll-bar-repeat-minimum-lines-per-second
				   (nth 6 auto-repeat-options)
				  :scroll-bar-repeat-maximum-lines-per-second
				   (nth 7 auto-repeat-options)
				  :scroll-bar-repeat-maximum-screens-per-second
				   (nth 8 auto-repeat-options))))
	  (dolist (screen-options screen-option-alist)
	    (when (or (apply #'set-screen-options-internal screen-options)
		      who-line-changed)
	      (reset-who-line nil (first screen-options)))))
	))))

(defun gather-one-screen-options (screen)
  (format query-io "~%Screen options for ~A:~%" screen)
  (labels ((gray-name (gray)
	     (cond ((null gray)
		    "None")
		   ((keywordp gray)
		    (cl:string-capitalize gray))
		   ((symbolp gray)
		    (cl:string-capitalize
		      (substring gray 0 (string-reverse-search "-GRAY" gray))))
		   (t nil)))
	   (screen-gray-from-name (message)
	     (let ((gray (send screen message)))
	       (if (symbolp gray) gray
		   (or
		     (cl:find gray *gray-arrays*
			      :test #'(lambda (array symbol)
					(eq array (symeval symbol))))
		     gray))))
	   (gray-choices-and-default (which-grey)
	     (declare (values type default))
	     (let* ((current (screen-gray-from-name which-grey))
		    (current-name (or (gray-name current) "Current")))
	       (if (cl:member current *gray-arrays*)
		   (values `((scl:alist-member
			       :alist ,(loop for var in *gray-arrays*
					     collect (cons (gray-name var) var)))
			     :description "A gray pattern")
			   current)
		   (values `((scl:alist-member
			       :alist ((,current-name . ,current)
				       ,@(loop for var in *gray-arrays*
					       collect (cons (gray-name var) var))))
			     :description "A gray pattern")
			   current)))))
    `(,screen
      ,@(when (operation-handled-p screen :gray-array-for-unused-areas)
	  `(:background-gray
	     ,(multiple-value-bind (type default)
		  (gray-choices-and-default :gray-array-for-unused-areas)
		(accept type
			:prompt "  Background gray pattern"
			:query-identifier (cons screen :background-gray)
			:provide-default t
			:default default))))
      ,@(when (operation-handled-p screen :gray-array-for-inferiors)
	  `(:deexposed-gray
	     ,(multiple-value-bind (type default)
		  (gray-choices-and-default :gray-array-for-inferiors)
		(accept type
			:prompt "  Partially exposed window gray pattern"
			:query-identifier (cons screen :deexposed-gray)
			:provide-default t
			:default default))))
      :bow-mode
      ,(accept '((scl:alist-member
		   :alist (("Black" :value nil
			    :documentation "Makes the screen background black")
			   ("White" :value t	;bow=white=T
			    :documentation "Makes the screen background white"))))
	       :query-identifier (cons screen :bow-mode)
	       :prompt "  Screen background"
	       :default (send screen :bow-mode))
      :menu-highlighting-style
      ,(accept `((token-or-type (("Inverse video box" . nil))
			       ((scl:character-style-for-device
				  :device ,(sheet-display-device-type screen)
				  :against-default ,(screen-default-character-style screen))
				)))
	      :prompt "  Highlighting mode for highlighting menus"
	      :query-identifier (cons screen :menu-highlighting-style)
	      :provide-default t
	      :default (menu-selected-character-style screen))
      ,@(unless (memq screen *console-screens*)
	  `(:who-line
	     ,(accept 'scl:boolean
		      :query-identifier (cons screen :who-line)
		      :prompt "  Status line present"
		      :default (send screen :get :who-line))))
      )))



;;; Here's the program interface.  It takes an endless number of variable-value
;;; pairs, one for each recognized variable to be set, all of it composed as a
;;; single list.  Of course, extensive error checking is necessary.

;;; ---It would help a lot if TYPEP accepted any presentation type (which is a proper
;;; ---subset of CL types) for value checking.  As it is, all sorts of duplicated knowledge
;;; ---has to be wired into this function.  When TYPEP is extended, this function should be
;;; ---recast using it, which will greatly simplify it.  A particular problem is the list
;;; ---of screen variables in TV:*WHO-LINE-CONTROL-VARIABLES*.  These are all nice
;;; ---DEFSTRUCTs with a type field, which is unfortunately also a presentation type.  So
;;; ---the items in the list have to be wired in here, most unmodularly.

;;; The function accepts a keyword arg, :SCREEN, as the screen for which to set
;;; per-screen options.  The default is the value of TV:MAIN-SCREEN.  A lot of things 
;;; that should be per-screen are global.

;;; Here is a summary of the options and possible values that
;;; SET-SCREEN-OPTIONS presently accepts as keywords-value pairs:

;;;  Documentation line options:
;;;   :NUMBER-OF-WHOLINE-DOCUMENTATION-LINES   integer, 0  i  2
;;;   :WHOLINE-DOCUMENTATION-REVERSE-VIDEO-P   T or NIL
;;;   :WHOLINE-DOCUMENTATION-CHARACTER-STYLE   a character style appropriate for :SCREEN

;;;  Status line options:
;;;   :WHOLINE-DEFAULT-CHARACTER-STYLE         a character style appropriate for :SCREEN
;;;   :SHOW-MACHINE-NAME-IN-WHOLINE            T or NIL
;;;   :SHOW-CURRENT-PROCESS-IN-WHOLINE         T or NIL
;;;   :NOTE-PROGRESS-IN-WHOLINE                T, NIL or :WITH-FILE
;;;   :WHOLINE-CLOCK-FORMAT                    :DOW-HH-MM-SS, :MONTH-DAY-YEAR or :DOW-HH-MM-AM
;;;   :WHOLINE-CLOCK-COLON-BLINK-HALF-PERIOD   NIL, positive integer, or time interval
;;;   :WHOLINE-FILE-STATE-CHARACTER-STYLE      a character style appropriate for :SCREEN

;;;  Global screen options:
;;;   :SCREEN-DIMNESS-PERCENT              integer, 0  i  100
;;;   :DIM-SCREEN-AFTER-N-MINUTES-IDLE     NIL, positive integer [minutes], or time interval
;;;   :BEEP-MODE                           :BEEP, :FLASH, or T [both]

;;;  Global window defaults:
;;;   :END-OF-PAGE-MODE                    :SCROLL, :TRUNCATE, or :WRAP
;;;   :SCROLL-FACTOR                       a number
;;;   :CONTEXT-NLINES                      a non-negative integer
;;;   :NOISE-STRING-P                      whether or not to use noise strings at all
;;;   :NOISE-STRING-STYLE                  a character style appropriate for :SCREEN
;;;   :GRAPHICS-SCAN-CONVERSION-MODE       a number or list of keywords and values
;;;   :MENU-HIGHLIGHTING-STYLE             NIL or a character style appropriate for :SCREEN

;;;  Background interactor window settings:
;;;   :BACKGROUND-LISP-INTERACTOR-SCREEN-UTILIZATION  Where to put it: :AT-TOP or :AT-RIGHT
;;;   :BACKGROUND-LISP-INTERACTOR-SCREEN-FRACTION     Fraction of screen to cover, 1/3  f  1

;;;  Keyboard and mouse repeat controls:
;;;   :KEYBOARD-AUTO-REPEAT		   T or NIL
;;;   :ENABLE-REPEAT-KEY		   T or NIL
;;;   :KEYBOARD-REPEAT-INITIAL-DELAY	   60ths of a second before key starts repeating 
;;;   :KEYBOARD-REPETITION-INTERVAL        60ths of a second between repeated characters
;;;   :SCROLL-BAR-AUTO-REPEAT		   T or NIL
;;;   :SCROLL-BAR-REPEAT-INITIAL-DELAY	   60ths of a second before scroll bar starts repeat
;;;   :SCROLL-BAR-REPEAT-MINIMUM-LINES-PER-SECOND	Rate of scrolling controls
;;;   :SCROLL-BAR-REPEAT-MAXIMUM-LINES-PER-SECOND	..
;;;   :SCROLL-BAR-REPEAT-MAXIMUM-SCREENS-PER-SECOND	..

;;;  Per-screen options:
;;;   :BACKGROUND-GRAY                     a gray name: one of symbols in TV:*GRAY-ARRAYS* 
;;;   :DEEXPOSED-GRAY                      also a gray name...
;;;   :BOW-MODE                            T or NIL
;;;   :WHO-LINE				   T or NIL: whether a who-line should exist.
;;;					   (Only for non-console screens.)
;;;  Other:
;;;   :CONSOLE-WHO-LINE			   T or NIL: whether console screens
;;;				           should have status lines.
;;;
;;;  Note: The keywords that accept time-interval specs are dwimified to accept either
;;;  an integer, which is given the apropriate meaning (seconds for
;;;  TV:*WHOLINE-CLOCK-COLON-BLINK-HALF-PERIOD*, minutes for
;;;  :DIM-SCREEN-AFTER-N-MINUTES-IDLE), or an interval-spec string, like "2 minutes".
;;;
(defun set-screen-options (&rest vars-and-vals &key (screen main-screen) &allow-other-keys)
  (let ((v-vs (si:rem-keywords vars-and-vals '(:screen)))
	(global-args (ncons nil))
	(screen-args (ncons screen)))
    (flet ((find-variable-value (var)
	     (when (cl:member var v-vs)
	       (values (cl:getf v-vs var)
		       t)))
	   (check-val (var val predicate type-string transformer)
	     (loop until (funcall predicate val)
		   do (setq val (dbg:check-arg-1 var val type-string)))
	     (funcall transformer val))
	   ;; here, unfortunately, are a zillion home-brewed value-type predicates
	   (character-style-typep (char-style)
	     (and (or (cl:typep char-style 'character-style)
		      (cl:typep char-style 'list))
		  (si:style-valid-p char-style (screen-default-character-style screen)
				    (sheet-display-device-type screen))))
	   (gray-choice-p (var)
	     (or (cl:member var *gray-arrays*)
		 (valid-gray-array var)
		 (and (symbolp var) (boundp var)
		      (valid-gray-array (cl:symbol-value var)))))
	   (character-style-type-or-null-p (val)
	     (or (null val)
		 (and (or (cl:typep val 'character-style)
			  (cl:typep val 'list))
		      (si:style-valid-p val (screen-default-character-style screen)
					(sheet-display-device-type screen)))))
	   (parse-character-style-or-null (val)	; needed because (si:parse-character-style nil)
	     (if (null val) nil (si:parse-character-style val)))	;=> nil.nil.nil
	   (non-negative-integer-p (val)
	     (and (fixp val) (not (minusp val))))
	   (end-of-page-mode-value-p (val)
	     (cl:member val '(:scroll :truncate :wrap)))
	   (boolean-value-p (val)
	     (cl:member val '(t nil)))
	   (beep-mode-value-p (val)
	     (cl:member val '(:beep :flash t)))
	   (integer-0-to-100-p (val)
	     (and (fixp val) ( 0 val 100.)))
	   (integer-0-to-2-p (val)
	     (and (fixp val) ( 0 val 2)))
	   (time-interval-or-never-p (val)
	     (or (and (numberp val) (plusp val))
		 (condition-case () (time:parse-interval-or-never val)
		    (error nil)
		    (:no-error t))))
	   (time-interval-to-seconds-transformer (val)
	     (if (numberp val)
		 val
	       (time:parse-interval-or-never val)))
	   (time-interval-minutes-or-never-p (val)
	     (or (and (numberp val) (plusp val))
		 (condition-case () (time:parse-interval-or-never val)
		    (error nil)
		    (:no-error t))))
	   (time-interval-to-minutes-transformer (val)
	     (if (numberp val)
		 val
	       (let ((val (time:parse-interval-or-never val)))
		 (if val (ceiling val 60) nil))))
	   (clock-format-value-p (val)
	     (cl:member val '(:dow-hh-mm-ss :month-day-year :dow-hh-mm-am)))
	   (progress-note-value-p (val)
	     (cl:member val '(t nil :with-file)))
	   (graphics-scan-conversion-mode-p (val)
	     (or (cl:integerp val)
		 (and (listp val) (evenp (length val)))))
	   (number-1-third-to-1-p (val)
	     (and (numberp val) ( 1\3 val 1)))
	   (background-lisp-interactor-screen-utilization-mode-p (val)
	      (cl:member val '(:at-top :at-right))))
      (let ((who-line-control-variables-type-predicates-alist
	      `((*NUMBER-OF-WHOLINE-DOCUMENTATION-LINES*
		  :number-of-wholine-documentation-lines ,#'integer-0-to-2-p)
		(*WHOLINE-DOCUMENTATION-REVERSE-VIDEO-P*
		  :wholine-documentation-reverse-video-p ,#'boolean-value-p)
		(*WHOLINE-DOCUMENTATION-CHARACTER-STYLE*
		  :wholine-documentation-character-style ,#'character-style-typep)
		(*WHOLINE-DEFAULT-CHARACTER-STYLE*
		  :wholine-default-character-style ,#'character-style-typep)
		(*SHOW-MACHINE-NAME-IN-WHOLINE*
		  :show-machine-name-in-wholine ,#'boolean-value-p)
		(*SHOW-CURRENT-PROCESS-IN-WHOLINE*
		  :show-current-process-in-wholine ,#'boolean-value-p)
		(*NOTE-PROGRESS-IN-WHOLINE*
		  :note-progress-in-wholine ,#'progress-note-value-p)
		(*WHOLINE-CLOCK-FORMAT*
		  :wholine-clock-format ,#'clock-format-value-p)
		(*WHOLINE-CLOCK-COLON-BLINK-HALF-PERIOD*
		  :wholine-clock-colon-blink-half-period ,#'time-interval-or-never-p)
		(*WHOLINE-FILE-STATE-CHARACTER-STYLE*
		  :wholine-file-state-character-style ,#'character-style-typep)
		(*BACKGROUND-LISP-INTERACTOR-SCREEN-UTILIZATION*
		  :background-lisp-interactor-screen-utilization
		  ,#'background-lisp-interactor-screen-utilization-mode-p)
		(*BACKGROUND-LISP-INTERACTOR-SCREEN-FRACTION*
		  :background-lisp-interactor-screen-fraction ,#'number-1-third-to-1-p)))
	    (type-predicates-strings-alist
	      `((,#'character-style-typep
		 "an appropriate character style for this screen"
		 ,#'si:parse-character-style)	; accept style specs but always set style objs
		(,#'character-style-type-or-null-p
		 "NIL or an appropriate character style for this screen"
		 ,#'parse-character-style-or-null)	; ditto
		(,#'time-interval-or-never-p
		 "NIL or a positive integer [seconds] or a time interval"
		 ,#'time-interval-to-seconds-transformer)
		(,#'time-interval-minutes-or-never-p
		 "NIL or a positive integer [minutes] or a time interval"
		 ,#'time-interval-to-minutes-transformer)
		(,#'clock-format-value-p
		 "one of :DOW-HH-MM-SS, :MONTH-DAY-YEAR, or :DOW-HH-MM-AM")
		(,#'progress-note-value-p "one of T, NIL or :WITH-FILE")
		(,#'boolean-value-p "either T or NIL")
		(,#'integer-0-to-2-p "an integer between 0 and 2, inclusive")
		(,#'integer-0-to-100-p "an integer between 0 and 100, inclusive")
		(,#'non-negative-integer-p "a non-negative integer")
		(,#'numberp "a number")
		(,#'end-of-page-mode-value-p "one of :SCROLL :TRUNCATE or :WRAP")
		(,#'beep-mode-value-p "one of :BEEP :FLASH or T")
		(,#'gray-choice-p "one of the symbols in TV:*GRAY-ARRAYS*")
		(,#'graphics-scan-conversion-mode-p "a mask or set of keywords")
		(,#'background-lisp-interactor-screen-utilization-mode-p
		 "either :AT-TOP or :AT-RIGHT")
		(,#'number-1-third-to-1-p "a number between 1//3 and 1"))))
	(flet ((add-variable-value-to-arg-list (var pred &optional (args global-args) real-var)
		 (let ((entry (cl:assoc pred type-predicates-strings-alist)))
		   (multiple-value-bind (val found-p)
		       (find-variable-value var)
		     (when found-p
		       (setq val (check-val var val pred (second entry) (or (third entry)
									    #'cl:identity)))
		       (nconc args (list (or real-var var) val))
		       (setq v-vs (si:rem-keywords v-vs (list var))))
		     found-p))))
	  (loop with local-args = (ncons nil)
		for var in *mouse-documentation-choice-order*	;mouse doc options here
		as entry = (cl:assoc var who-line-control-variables-type-predicates-alist)
		when entry
		  do (add-variable-value-to-arg-list
		       (second entry) (third entry) local-args var)
		finally (when (cdr local-args)
			  (nconc global-args (list :mouse-doc-options (cdr local-args)))))
	  (loop with local-args = (list nil)
		for var in *status-line-choice-order*	;status line options here
		as entry = (cl:assoc var who-line-control-variables-type-predicates-alist)
		when entry
		  do (add-variable-value-to-arg-list
		       (second entry) (third entry) local-args var)
		finally (when (cdr local-args)
			  (nconc global-args (list :status-line-options (cdr local-args)))))
	  (add-variable-value-to-arg-list :background-gray #'gray-choice-p screen-args
					  ;;gray-choices
					  )
	  (add-variable-value-to-arg-list :deexposed-gray #'gray-choice-p screen-args
					  ;;gray-choices
					  )
	  (let* ((local-args (ncons nil))
		 (dimness-found
		   (add-variable-value-to-arg-list :screen-dimness-percent
						   #'integer-0-to-100-p
						   local-args
						   ;;'((cl:integer 0 100.))
						   ))
		 (minutes-idle-found
		   (add-variable-value-to-arg-list :dim-screen-after-n-minutes-idle
						   #'time-interval-minutes-or-never-p
						   local-args
						   ;;'((token-or-type (("Don't dim" . nil))
						   ;;          	     time:time-interval))
						   )))
	    (when (or dimness-found minutes-idle-found)
	      (nconc global-args
		     (list
		       :dimmer-options
		       (let (new-args)
			 (when dimness-found
			   (push (cl:getf (cdr local-args) :screen-dimness-percent)
				 new-args)
			   (push '*screen-dimness-percent* new-args))
			 (when minutes-idle-found
			   (push (cl:getf (cdr local-args) :dim-screen-after-n-minutes-idle)
				 new-args)
			   (push '*dim-screen-after-n-minutes-idle* new-args))
			 new-args)))))
	  (add-variable-value-to-arg-list :beep-mode #'beep-mode-value-p
					  ;;'((dw:menu-choose :alist (("Beep only" . :beep)
					  ;;    		    ("Flash only" . :flash)
					  ;;    		    ("Beep and flash" . t))))
					  )
	  (add-variable-value-to-arg-list :bow-mode #'boolean-value-p screen-args
			  ;;'((dw:menu-choose
			  ;;   :alist (("Black" :value nil
			  ;; 	   :documentation "Makes the screen background black")
			  ;; 	  ("White" :value t	;bow=white=T
			  ;;         :documentation "Makes the screen background white"))))
					  )
	  (let ((local-args (ncons nil)))
	    (add-variable-value-to-arg-list :end-of-page-mode #'end-of-page-mode-value-p
					    local-args
					    ;;'((cl:member :scroll :truncate :wrap))
					    )
	    (add-variable-value-to-arg-list :scroll-factor #'numberp local-args
					    ;;'cl:number
					    )
	    (when (cdr local-args)
	      (nconc global-args
		     (list :end-of-page-options
			   (list (or (cl:getf (cdr local-args) :end-of-page-mode)
				     dw::*default-end-of-page-mode*)
				 (or (cl:getf (cdr local-args) :scroll-factor)
				     dw::*default-end-of-page-scroll-factor*))))))
	  (add-variable-value-to-arg-list :context-nlines #'non-negative-integer-p
					  ;;'((cl:integer 0))
					  )
	  (add-variable-value-to-arg-list :noise-string-style #'character-style-typep
					  ;;character-style-type
					  )
	  (add-variable-value-to-arg-list :noise-string-p #'boolean-value-p
					  ;;character-style-type
					  )
	  (add-variable-value-to-arg-list :graphics-scan-conversion-mode
					  #'graphics-scan-conversion-mode-p)
	  (add-variable-value-to-arg-list :menu-highlighting-style
					  #'character-style-type-or-null-p
					  screen-args
					  ;;`((token-or-type (("Inverse video box" . nil))
					  ;;		   ,character-style-type))
					  )
	  (add-variable-value-to-arg-list :background-lisp-interactor-screen-utilization
					  #'background-lisp-interactor-screen-utilization-mode-p)
	  (add-variable-value-to-arg-list :background-lisp-interactor-screen-fraction
					  #'number-1-third-to-1-p)
	  (when (not (member screen *console-screens*))
	    (add-variable-value-to-arg-list :who-line #'boolean-value-p screen-args))
	  (add-variable-value-to-arg-list :console-who-line #'boolean-value-p)

	  (add-variable-value-to-arg-list :keyboard-auto-repeat #'boolean-value-p)
	  (add-variable-value-to-arg-list :enable-repeat-key #'boolean-value-p)
	  (add-variable-value-to-arg-list :keyboard-repeat-initial-delay
					  #'non-negative-integer-p)
	  (add-variable-value-to-arg-list :keyboard-repetition-interval
					  #'non-negative-integer-p)
	  (add-variable-value-to-arg-list :scroll-bar-auto-repeat #'boolean-value-p)
	  (add-variable-value-to-arg-list :scroll-bar-repeat-initial-delay
					  #'non-negative-integer-p)
	  (add-variable-value-to-arg-list :scroll-bar-repeat-minimum-lines-per-second
					  #'non-negative-integer-p)
	  (add-variable-value-to-arg-list :scroll-bar-repeat-maximum-lines-per-second
					  #'non-negative-integer-p)
	  (add-variable-value-to-arg-list :scroll-bar-repeat-maximum-screens-per-second
					  #'non-negative-integer-p)

	  ;; at this point, all var-val pairs should have been removed from the list
	  (when v-vs
	    (fsignal "I don't know what to do with the following option-value pairs:~
                    ~&  ~S" v-vs))
	  (let ((global-changes-p
		  (apply #'set-global-screen-options-internal (cdr global-args)))
		(screen-changes-p
		  (apply #'set-screen-options-internal screen-args)))
	    (when (or global-changes-p screen-changes-p)
	      (reset-who-line nil screen)))
	  )))))

(defun valid-gray-array (array)
  (and
    (arrayp array)
    ( (cl:array-rank array) 2)
    (zerop (cl:rem (array-dimension-n 2 array) 32.))))



(compiler:function-defined 'tv:blank-screen-establish-timer)	; Forward references: Utilit.
(compiler:function-defined 'tv:machine-has-program-console-brightness-control)

(defun set-global-screen-options-internal
       (&key (console-who-line nil console-who-line-p)
	(mouse-doc-options nil) (status-line-options nil)
	(dimmer-options nil)
	(beep-mode nil beep-mode-p)
	(end-of-page-options nil)
	(context-nlines nil context-nlines-p)
	(noise-string-p t noise-string-p-p)
	(noise-string-style nil noise-string-style-p)
	(graphics-scan-conversion-mode nil graphics-scan-conversion-mode-p)
	(background-lisp-interactor-screen-utilization
	  nil background-lisp-interactor-screen-utilization-p)
	(background-lisp-interactor-screen-fraction
	  nil background-lisp-interactor-screen-fraction-p)
	(keyboard-auto-repeat nil keyboard-auto-repeat-p)
	(enable-repeat-key nil enable-repeat-key-p)
	(keyboard-repeat-initial-delay nil keyboard-repeat-initial-delay-p)
	(keyboard-repetition-interval nil keyboard-repetition-interval-p)
	(scroll-bar-auto-repeat nil scroll-bar-auto-repeat-p)
	(scroll-bar-repeat-initial-delay nil scroll-bar-repeat-initial-delay-p)
	(scroll-bar-repeat-minimum-lines-per-second nil
	 scroll-bar-repeat-minimum-lines-per-second-p)
	(scroll-bar-repeat-maximum-lines-per-second nil
	 scroll-bar-repeat-maximum-lines-per-second-p)
	(scroll-bar-repeat-maximum-screens-per-second nil
	 scroll-bar-repeat-maximum-screens-per-second-p))
  (flet ((set-vars (&rest vars-and-vals)
	   (loop for (var val) on vars-and-vals by 'rest2
		 do (setf (symeval var) val))))
    ;; Dimmer options
    (when (and dimmer-options			; is Utilities loaded?
	       (fboundp 'tv:machine-has-program-console-brightness-control)
	       (funcall 'tv:machine-has-program-console-brightness-control))
      (apply #'set-vars dimmer-options)
      (tv:blank-screen-establish-timer t))
    ;; Beep mode
    (when beep-mode-p
      (setq beep beep-mode))
    ;; End of page options
    (when end-of-page-options
      (apply #'dw:set-default-end-of-page-mode end-of-page-options))
    (when context-nlines-p
      (setq cp::*scroll-one-screenful-number-of-lines-left* context-nlines))
    ;; Noise string style and -p
    (when noise-string-p-p
      (setq si:*disable-noise-strings* (not noise-string-p)))
    (when noise-string-style-p
      (setq si:*noise-string-character-style* noise-string-style))
    ;; background interactors
    (when background-lisp-interactor-screen-utilization-p
      (setq *background-lisp-interactor-screen-utilization*
	    background-lisp-interactor-screen-utilization))
    (when background-lisp-interactor-screen-fraction-p
      (setq *background-lisp-interactor-screen-fraction*
	    background-lisp-interactor-screen-fraction))
    (when graphics-scan-conversion-mode-p
      (if (cl:integerp graphics-scan-conversion-mode)
	  (setq graphics::*default-scan-conversion-flags* graphics-scan-conversion-mode)
	  (apply #'graphics:set-default-scan-conversion-mode graphics-scan-conversion-mode)))
    ;; Auto-repeat stuff
    (when keyboard-auto-repeat-p
      (setq si:*kbd-auto-repeat-enabled-p* keyboard-auto-repeat))
    (when enable-repeat-key-p
      (setq si:*kbd-repeat-key-enabled-p* enable-repeat-key))
    (when keyboard-repeat-initial-delay-p
      (setq si:*kbd-auto-repeat-initial-delay* keyboard-repeat-initial-delay))
    (when keyboard-repetition-interval-p
      (setq si:*kbd-repetition-interval* keyboard-repetition-interval))
    (when scroll-bar-auto-repeat-p
      (setq dw::*scroll-bar-auto-repeat-enable* scroll-bar-auto-repeat))
    (when scroll-bar-repeat-initial-delay-p
      (setq dw::*scroll-bar-auto-repeat-initial-delay* scroll-bar-repeat-initial-delay))
    (when scroll-bar-repeat-minimum-lines-per-second-p
      (setq dw::*scroll-bar-auto-repeat-minimum-lines-per-second*
	    scroll-bar-repeat-minimum-lines-per-second))
    (when scroll-bar-repeat-maximum-lines-per-second-p
      (setq dw::*scroll-bar-auto-repeat-maximum-lines-per-second*
	    scroll-bar-repeat-maximum-lines-per-second))
    (when scroll-bar-repeat-maximum-screens-per-second-p
      (setq dw::*scroll-bar-auto-repeat-screen-interval*
	    (round 60 scroll-bar-repeat-maximum-screens-per-second)))
    ;; Who lines
    (let ((mouse-doc-changes-p
	    (and mouse-doc-options
		 (apply #'set-who-line-control-variables-internal mouse-doc-options)))
	  (status-line-changes-p
	    (and status-line-options
		 (apply #'set-who-line-control-variables-internal status-line-options)))
	  (console-who-line-changes-p
	    (and console-who-line-p
		 (not (eq *console-screens-have-who-line*
			  (setf *console-screens-have-who-line* console-who-line))))))
      (or mouse-doc-changes-p status-line-changes-p console-who-line-changes-p))))

(defun set-screen-options-internal (screen &key
				    (background-gray nil background-gray-p)
				    (deexposed-gray nil deexposed-gray-p)
				    (bow-mode nil bow-mode-p)
				    (menu-highlighting-style nil menu-highlighting-style-p)
				    (who-line nil who-line-p))
  ;; Background grays
  (when background-gray-p
    (set-screen-background-gray
      (if (arrayp background-gray) background-gray
	  (symeval background-gray))
      (if (eq screen main-screen)
	  (list screen who-line-screen)
	  (list screen))))
  (when deexposed-gray-p
    (set-screen-deexposed-gray
      (if (arrayp deexposed-gray)
	  deexposed-gray
	  (symeval deexposed-gray))
      screen))
  ;; "Black on White" mode -- dunno what to do about color.
  (when bow-mode-p
    (send screen :set-bow-mode bow-mode))
  ;; Menu highlighting style
  (when menu-highlighting-style-p
    (setf (menu-selected-character-style screen) menu-highlighting-style))
  ;; Who line
  (and who-line-p
       (not (eq (send screen :get :who-line) (setf (send screen :get :who-line) who-line)))))



(define-presentation-type mode-lock-state ()
   :printer ((state stream)
	     (cl:write-string (dw::token-element-string state) stream))
   :parser ((stream)
	    (values
	      (dw:complete-from-sequence *mode-lock-states* stream
					 :name-key #'(lambda (elem)
						       (dw::token-element-string (car elem)))
					 :value-key #'first
					 :documenter
					   #'(lambda (state stream)
					       (let ((desc (second
							     (assoc state
								    *mode-lock-states*))))
						 (when desc
						   (cl:write-string desc stream)))))
	      ))
   )

(cp:define-command (com-set-mode-lock-state-controller :command-table "Debugging"
						       :provide-output-destination-keyword nil)
    ((state 'mode-lock-state
	    :default *mode-lock-state*
	    :prompt "new state"
	    :documentation "application class which controls use of the mode lock key"))
   (set-mode-lock-state-controller state))
