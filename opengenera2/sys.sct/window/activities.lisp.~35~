;;; -*- Mode: LISP; Syntax: Common-lisp; Package: COMMON-LISP-INTERNALS; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This is the "activity system", what there is of it.

;;; What is an activity?  I'm not sure how to describe it.  It's the thing that is connected
;;; to a Select key or a system menu program column item.  it's a thing you can give to the 
;;; Select Activity command.

;;; An activity instance implements the low-level semantics of an activity.
;;; Activities are actually passed around as the string which is their primary name.
;;; The user interfaces automatically convert this to the real activity object.

(defgeneric activity-description (activity)
  "Returns a brief description of the activity, suitable for the mouse documentation line."
  (:function
    (funcall (flavor:generic activity-description) (lookup-activity activity))))

(defgeneric select-activity (activity &rest keys)
  "Selects an instance of the activity."
  (declare (arglist activity &rest keys &key console superior
					     force-create beep-if-only-one-selected))
  (:function
    (apply (flavor:generic select-activity) (lookup-activity activity) keys)))

;;;

;; All activities are built on this.
(defflavor basic-activity
	(description
	 (source-file-name sys:fdefine-file-pathname))
	()
  :abstract-flavor
  (:conc-name "ACTIVITY-")
  (:init-keywords :name :names)
  (:initable-instance-variables description source-file-name)
  (:readable-instance-variables description source-file-name)
  (:required-init-keywords :description)
  (:required-methods select-activity)
  )

(defmethod (precreate-activity basic-activity :default) (&key start-process)
  start-process
  nil)

;;;

;;; Helpful routines for SELECT-ACTIVITY methods.

(defun find-frame-for-activity (console superior predicate creator
				&rest keys
				&key selected-ok
				select
				expose
				activate
				force-create
				beep-if-only-one-selected)
  (declare (sys:downward-funarg predicate creator))
  (declare (values frame created-p))
  (when (null console)
    (setf console (if superior (tv:sheet-console superior) sys:*console*))
    (when (null console)
      (return-from find-frame-for-activity nil)))
  (flet ((predicate (window)
	   (and (tv:window-is-selectable window)
		(or (null superior)
		    (tv:sheet-me-or-my-kid-p window superior))
		(funcall predicate window))))
    (let* ((current-selected-window (console-selected-window console))
	   (current-activity (and current-selected-window
				  (send current-selected-window :alias-for-selected-windows)))
	   (current-matches (and current-activity
				 (predicate current-activity))))
      (labels ((select-it (window bury-old &optional new-activity)
		 (when (or select expose activate)
		   (tv:delaying-screen-management	;Inhibit auto selection
		     (when current-selected-window
		       (send current-selected-window :deselect nil)
		       (when bury-old
			 (tv:add-to-previously-selected-windows current-selected-window t)))
		     (let ((exposable (tv:window-is-exposable-inferior window t)))
		       (if exposable
			   (if (and select (or (not new-activity )
					       (neq select :unless-created)))
			       (send window :select-shadowed-activity current-activity)
			       (if expose
				   (send window :expose)))
			   (send window :activate)))))
		 window)
	       (let-some-window-do-it (creator force-create)
		;; permit the selected window and its superiors to participate
		;; in the selection process.
		 (loop for window first current-activity then (tv:sheet-superior window)
		       when (not (instancep window))
			 do (return nil)
		       do (multiple-value-bind (found-thing created-p)
			      (lexpr-send-if-handles window
				     :select-key-find-window-of-flavor
				     :error-p nil
				     :creator creator
				     :console console
				     :predicate #'predicate
				     :force-create force-create
				     keys)
			    (when found-thing
			      (return-from let-some-window-do-it
				(values found-thing created-p)))))))
	(unless superior
	 ;; If the superior was specified, don't let the selected window
	 ;; affect the choice.
	  (when (and creator (not force-create))
	   ;; Give everyone a chance to find one, but never create one.
	    (multiple-value-bind (found-thing created-p)
		(let-some-window-do-it nil nil)
	      (when found-thing
		(return-from find-frame-for-activity
		  (values (select-it found-thing current-matches) created-p)))))
	 ;; Optional creation.  Never complain about unfound.
	  (multiple-value-bind (found-thing created-p)
	      (let-some-window-do-it creator force-create)
	    (when found-thing
	      (return-from find-frame-for-activity
		(values (select-it found-thing current-matches) created-p)))))
	(unless force-create
	  (when current-matches
	    (when selected-ok
	      (return-from find-frame-for-activity
		(values current-activity nil)))
	    (when (not (null (assoc current-activity tv:*windows-shadowed-for-selection*)))
	      (return-from find-frame-for-activity
		(values (select-it current-activity nil) nil))))
	  (let ((window (find-if #'predicate (console-previously-selected-windows console))))
	    (when window
	      (return-from find-frame-for-activity
		(values (select-it window current-matches) nil))))
	  (dolist (screen (tv:console-screens-for-selection console))
	    (dolist (window (tv:sheet-inferiors screen))
	      (when (and (not (eql window current-activity))
			 (tv:window-is-exposable-inferior window t)
			 (funcall predicate window))
		(cond ((null superior)
		       (tv:set-window-on-usable-screen window (sys:console-screen console)))
		      ((not (eql superior (send window :superior)))
		       (tv:set-window-on-usable-screen window superior nil :force-move t)))
		(return-from find-frame-for-activity
		  (values (select-it window current-matches) nil)))))
	  (when current-matches
	    (cond ((null beep-if-only-one-selected)
		   ;no beep
		   )
		  ((eq beep-if-only-one-selected t)
		   ;simple default beep
		   (send (console-screen console) :beep))
		  ((keywordp beep-if-only-one-selected)
		   ;beep or flash or whatever
		   (send (console-screen console) :beep beep-if-only-one-selected))
		  ((listp beep-if-only-one-selected)
		   ;a form to be evaluated
		   (eval beep-if-only-one-selected))
		  (t ;a function to be called
		   (funcall beep-if-only-one-selected)))
	    (return-from find-frame-for-activity (values nil nil))))
	(when creator
	  (let ((new-window (funcall creator
				     :superior (or superior (sys:console-screen console)))))
	    (when new-window
	      (return-from find-frame-for-activity
		(values (select-it new-window nil t) t)))))
	(values nil nil)))))

;;;

;;; This kind of activity implements the semantics of TV:ADD-SELECT-KEY.
;;; It is used by activities that are not implemented as programs.

(defflavor compatible-activity
	(flavor create-p)
	(basic-activity)
  (:initable-instance-variables flavor create-p)
  (:required-init-keywords :flavor :create-p))



(defun window-reusable-for-flavor-spec (window flavor-spec)
  (when window
    (let ((window (send window :alias-for-selected-windows)))
      (when (if (nlistp flavor-spec)
		(or (eql flavor-spec t) ; promiscuous
		    (typep window flavor-spec))
		(loop for flavor in flavor-spec thereis (typep window flavor)))
	window))))

(defun window-creation-flavor-from-flavor-spec (flavor-spec)
  (if (listp flavor-spec)
      (first flavor-spec)
      flavor-spec))

(defmethod (select-activity compatible-activity) (&key console superior
						       force-create beep-if-only-one-selected)
  ;; If FLAVOR is a list, it needs to be evaluated.
  (let ((flavor-or-window (if (consp flavor)
			      (eval `(let ((tv:always-make-new ',force-create))
				       ,flavor))
			      flavor)))
    (cond ((instancep flavor-or-window)
	   ;; If the activity list has a specific window indicated, use that.
	   (tv:set-window-on-usable-screen flavor-or-window
					   (or superior
					       (sys:console-screen
						 (or console sys:*console*))))
	   (send flavor-or-window :activate)
	   (find-frame-for-activity
	     console superior
	     #'(lambda (window) (eql window flavor-or-window))
	     nil
	     :select t
	     :beep-if-only-one-selected beep-if-only-one-selected))
	  (t
	   (let ((created-window nil))
	     (or (find-frame-for-activity
		   console superior
		   #'(lambda (window) (window-reusable-for-flavor-spec window flavor-or-window))
		   #'(lambda (&rest init-keywords &key superior &allow-other-keys)
		       (when create-p
			 (cond ((atom create-p)
				(cl:apply #'tv:make-window
					  (if (eql create-p t)
					      (window-creation-flavor-from-flavor-spec
						flavor-or-window)
					      create-p)
					  init-keywords))
			       (t
				(setf (process:process-name *current-process*)
				      (activity-description self))
				(let ((created (eval create-p)))
				  (cond ((typep created 'tv:sheet)
					 created)
					(t
					 (console-selected-window (tv:sheet-console superior)))))))))
		   :select t
		   :force-create force-create
		   :beep-if-only-one-selected beep-if-only-one-selected)
		 created-window))))))

#||
(defmethod (precreate-activity compatible-activity) (&key start-process)
  (LET* ((FLAVOR-OR-WINDOW (IF (LISTP (SECOND FORM))
				   (EVAL `(LET ((ALWAYS-MAKE-NEW NIL))
					    ,(SECOND FORM)))
				   (SECOND FORM)))
	     (WINDOW (COND ((INSTANCEP FLAVOR-OR-WINDOW)
			    (ADD-TO-PREVIOUSLY-SELECTED-WINDOWS FLAVOR-OR-WINDOW T T)
			    FLAVOR-OR-WINDOW)
			   ((FIND-WINDOW-OF-FLAVOR FLAVOR-OR-WINDOW))
			   ((TYPEP SELECTED-WINDOW FLAVOR-OR-WINDOW) NIL)
			   (T
			    (LET ((OTHER-FLAVOR (FOURTH FORM)))
			      (UNLESS (NULL OTHER-FLAVOR)	;Not allowed to create.
				(MAKE-WINDOW (IF (EQ OTHER-FLAVOR T)
						 FLAVOR-OR-WINDOW
						 OTHER-FLAVOR)
					     :ACTIVATE-P T)))))))
	(WHEN (AND WINDOW START-PROCESS)
	  (SEND-IF-HANDLES WINDOW :PRESTART-PROCESS))))
||#

(defmethod (activity-frame-acceptable-p compatible-activity) (frame)
  (and create-p (symbolp flavor) (typep frame flavor)))

(compile-flavor-methods compatible-activity)


;;; This flavor is for activities that are implemented as programs.
;;; DEFINE-PROGRAM-FRAMEWORK automatically defines the activity.
(defflavor program-activity
	(program-name)
	(basic-activity)
  (:initable-instance-variables program-name)
  (:required-init-keywords :program-name))

(defgeneric program-name (activity &rest ignore)
  "Returns the program name that is invoked to create a frame for the activity."
  (:method (program-activity) program-name))

(defmethod (select-activity program-activity) (&key console superior
						    force-create beep-if-only-one-selected)
  (find-frame-for-activity console superior
			   #'(lambda (window)
			       (and (typep window 'dw::program-frame)
				    (eql (dw::program-name (send window :program))
					program-name)))
			   #'(lambda (&rest init-keywords)
			       (apply #'tv:make-window 'dw::program-frame
				      :program program-name
				      init-keywords))
			   :select t
			   :force-create force-create
			   :beep-if-only-one-selected beep-if-only-one-selected))

(defmethod (activity-frame-acceptable-p program-activity) (frame)
  (and (typep frame 'dw:program-frame)
       (eq (dw:program-name (send frame :program)) program-name)))

(compile-flavor-methods program-activity)


;;; We need another kind of activity object, one that can decide at run time which of
;;; several PROGRAM-ACTIVITY objects to use, and select the right one.  For instance,
;;; you may want to use different program-frame configurations depending on the size of
;;; the screen.  This setup should be incorporated later into DEFINE-PROGRAM-FRAMEWORK.
(defflavor program-choice-activity
	(choice-predicate)
	(program-activity)
  (:initable-instance-variables choice-predicate)
  (:required-init-keywords :choice-predicate))

(defmethod (program-name program-choice-activity) (&key superior)
  (funcall choice-predicate superior))

;;; The choosing is done at selection time, so that it is based on run-time conditions
(defmethod (select-activity program-choice-activity)
	   (&key console superior force-create beep-if-only-one-selected)
  (let* ((program-name-to-use
	   (funcall choice-predicate
		    (or superior (sys:console-screen (or console sys:*console*))))))
    (typecase program-name-to-use
      (string
	(tv:notify nil program-name-to-use))
      (null)
      (t
	(find-frame-for-activity console superior
				 #'(lambda (window)
				     (and (typep window 'dw::program-frame)
					  (eql (dw::program-name (send window :program))
					       program-name-to-use)))
				 #'(lambda (&rest init-keywords)
				     (apply #'tv:make-window 'dw::program-frame
					    :program program-name-to-use
					    init-keywords))
				 :select t
				 :force-create force-create
				 :beep-if-only-one-selected beep-if-only-one-selected)))))

;;; For program-choice activities, do the same sort of thing that
;;; TV:ADD-SELECT-KEY does.  CHOICE-PREDICATE must return a symbolic program
;;; like those generated by DEFINE-PROGRAM-FRAMEWORK, e.g., DDEX::DOC-EX.
(defun tv:add-dispatching-select-key (char program-name name choice-predicate
				      &optional clobber-p)
  (when (define-activity 'program-choice-activity
			 :program-name program-name :name name :description name
			 :clobber-p clobber-p
			 :choice-predicate choice-predicate)
    (set-select-key-activity char name :clobber-p clobber-p)))

(compile-flavor-methods program-choice-activity)



;;; Here is where we manage the mapping of the strings that name activities and the activity
;;; instances.  User programs only see the names, never the underlying activity instance.
;;; This is so that redefinition of an activity can work.

(defvar *activity-table* (make-hash-table :test #'string-equal :size 32))

(defun define-activity (flavor &rest args &key clobber-p name names &allow-other-keys)
  (when name (pushnew name names))
  (when (let ((conflicts nil))
	  (dolist (name names)
	    (let ((old (gethash name *activity-table*)))
	      (when old
		(let ((sfn (activity-source-file-name old)))
		  (when (and sfn
			     (neq (send sfn :translated-pathname)
				  (and fs:fdefine-file-pathname
				       (send fs:fdefine-file-pathname :translated-pathname))))
		    (push (cons name sfn) conflicts))))))
	  (or zl:inhibit-fdefine-warnings fs:this-is-a-patch-file
	      (eq clobber-p t)
	      (every #'(lambda (conflict)
			 (or 
			   (and (stringp clobber-p) (string-equal conflict clobber-p))
			   (yes-or-no-p "Redefine ~A (previously defined by ~A)? "
					(car conflict) (cdr conflict))))
		     conflicts)))
    (si:with-rem-keywords (args args '(:clobber-p))
      (let ((activity (apply #'make-instance flavor args)))
	(dolist (name names)
	  (setf (gethash name *activity-table*) activity))
	t))))

(defun lookup-activity (activity-name &key (error-p t))
  (or
    (cond ((si:some-string activity-name)
	   (gethash activity-name *activity-table*))
	  ((typep activity-name 'basic-activity)
	   activity-name)
	  (t (error "the activity name must be a string or an activity")))
      (if error-p
	  (error "Activity ~A not found." activity-name)
	  nil)))

;;; Useful for putting in a site initialization file if you're willing to give up
;;; the disk space for the time to select the first time; or a user's init file if
;;; your willing to give up the time when logging in for later.
(defun tv:precreate-activities (activity-names-or-select-key-characters
				&key (start-process nil))
  (dolist (activity-name activity-names-or-select-key-characters)
    (block nil
      (etypecase activity-name
	(string)
	(character
	  (setf activity-name (sys:select-key-activity activity-name))))
      (when activity-name
	(let ((activity (lookup-activity activity-name)))
	  (when activity
	    (precreate-activity activity :start-process start-process)))))))



;;; Here is where we manage the Select key mappings.

(defvar *select-key-table* (make-hash-table :test #'char-equal :size 20))

(defun select-key-activity (char)
  (setf char (char-upcase (make-char char)))
  (let ((name (gethash char *select-key-table*)))
    (and name
	 (lookup-activity name)
	 name)))

(defun set-select-key-activity (char activity-name &key clobber-p)
  (setf char (char-upcase (make-char char)))
  (when (or (eq clobber-p t)
	    (let ((old (gethash char *select-key-table*)))
	      (or (null old)
		  (string-equal old activity-name)
		  (and (stringp clobber-p) (string-equal old clobber-p))
		  sys:inhibit-fdefine-warnings
		  fs:this-is-a-patch-file
		  (yes-or-no-p "Change Select-~C from ~A to ~A? " char old activity-name))))
    (setf (gethash char *select-key-table*) activity-name)
    t))

(defun tv:add-select-key (char flavor name &optional (create-p t) clobber-p &rest more-names)
  (when (define-activity 'compatible-activity
			 :names (list* name more-names) :description name
			 :clobber-p clobber-p
			 :flavor flavor :create-p create-p)
    (set-select-key-activity char name :clobber-p clobber-p)))

(defvar firewall:*select-keys-enabled* t)		;T, or a list of select keys enabled

(defun tv:select-key-enabled-p (&optional ch)
  (console-select-key-enabled-p *console* ch))

(compiler:make-obsolete
  tv:select-key-enabled-p "use SYS:CONSOLE-SELECT-KEY-ENABLED-P instead")

;; For compatibility.
(defvar tv:*select-keys* nil)
(compiler:make-obsolete tv:*select-keys*
			"This variable is no longer used.  Use TV:ADD-SELECT-KEY instead."
			defvar)



;;; This routine replaces TV:ADD-TO-SYSTEM-MENU-PROGRAMS-COLUMN for activities.

(defun tv:add-activity-to-system-menu-programs-column (name)
  (let* ((item `(,name
		 :funcall-with-self ,#'(lambda (menu)
					 (select-activity name
							  :superior (tv:sheet-screen menu)))
		 :documentation ,(activity-description name)))
	 (old (assoc name tv:*system-menu-programs-column* :test #'string-equal)))
    (if old
	(setf (cdr old) (cdr item))
	(setq tv:*system-menu-programs-column*
	      (sort (copy-list (list* item tv:*system-menu-programs-column*))
		    #'string-lessp :key #'car)))))



(define-presentation-type sys:activity-name ()
   :expander 'string
   :history t
   :parser ((stream &key type initially-display-possibilities)
	    (values
	      (dw:completing-from-suggestions (stream :force-complete t
						      :partial-completers '(#\space)
						      :type type
						      :initially-display-possibilities
						      initially-display-possibilities)
		(maphash #'(lambda (name activity)
			     activity
			     (dw::suggest name name))
			 *activity-table*)))))

(define-presentation-to-command-translator si:com-select-activity (sys:activity-name)
  (activity &key window)
  `(si:com-select-activity ,activity ,(tv:sheet-screen window)))

(defun find-default-activity (stream)
  stream
  nil)

(define-presentation-type user-visible-screen ()
   :expander `(and tv:basic-screen
		   (satisfies screen-user-visible-p))
   :history t)

(defun screen-user-visible-p (screen)
  (send screen :user-visible))

(cp:define-command (si:com-select-activity :command-table "Activities"
					   :provide-output-destination-keyword nil)
    ((activity 'sys:activity-name :prompt "activity name"
	       ;; default to last previous (a la c-m-L)
	       :default (find-default-activity *terminal-io*)
	       :documentation "Activity (program) to interact with next")
     (superior 'user-visible-screen
	       :prompt "on sheet" :default (tv:sheet-screen *terminal-io*)))
   (sys:select-activity activity :superior superior)
   (tv:await-window-exposure))
