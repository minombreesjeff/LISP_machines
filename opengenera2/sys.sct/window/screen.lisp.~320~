;;;-*- Mode:LISP; Package:TV; Base:8 -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Array drawing primitives moved to SYS:WINDOW;DRAW.
;;; Screen drawing primitives moved to SYS:WINDOW;SCREEN-DRAW.
;;; MAIN-SCREEN flavor to SYS:WINDOW;MAIN-SCREEN.
;;; Screen initialization to SYS:WINDOW;SCREEN-INIT.

;;; Generic screens

(DEFCONST *BLINKER-INTERVAL* 1000000.)

(DEFMETHOD (SCREEN-HAS-FOCUS-P BASIC-SCREEN :DEFAULT) () T)

(DEFMETHOD (SCREEN-HAS-BLINKER-TIMER-P BASIC-SCREEN :DEFAULT) () T)

(DEFMETHOD (SCREEN-PERMIT-FAST-TRACKING-P BASIC-SCREEN :DEFAULT) () T)

(DEFMETHOD (SCREEN-BLINKER-PROCESS-TOP-LEVEL BASIC-SCREEN) ()
  (LET ((NEXT-INTERVAL *BLINKER-INTERVAL*))	;At most a second from now.
    (WITH-SCREEN-CONTROLLER-LOCK (SELF)		;Blinkers require screen-controller-lock
      (LET* ((THIS-TIME (SYS:%MICROSECOND-CLOCK))
	     (DELTA-TIME (ROUND (SYS:%32-BIT-DIFFERENCE THIS-TIME LAST-BLINKER-TIME)
				(ROUND 1000000. 60.))))
	;; If there is an error, allow user to skip this time.  If the process is aborted
	;; instead, let the timer be stopped.  The screen may be permanently broken.
	(CATCH-ERROR-RESTART ((ERROR) "Skip blinking the blinkers this time")
	  ;; DELTA-TIME and INTERVAL are in 60ths
	  ;; THIS-TIME and LAST-BLINKER-TIME are in microseconds
	  ;; NEXT-INTERVAL is in microseconds
	  (LET ((INTERVAL (SHEET-BLINK-BLINKERS SELF DELTA-TIME)))
	    (WHEN INTERVAL
	      ;; Screen may have reason to do it sooner.
	      (SETF NEXT-INTERVAL (MIN NEXT-INTERVAL (* INTERVAL 16666.)))))
	  ;; Check on the fast-tracking mouse cursor
	  (LET* ((MOUSE (SHEET-MOUSE SELF))
		 (SHEET (WHEN MOUSE (MOUSE-SHEET MOUSE))))
	    (WHEN (AND SHEET (EQ SELF (SHEET-SCREEN SHEET)))
	      (MOUSE-CHECK-FAST-TRACKING MOUSE DELTA-TIME))))
	(SETF LAST-BLINKER-TIME THIS-TIME)))
    ;; Finish before rescheduling a blink.  Don't just force-output, so that if
    ;; blinking takes longer than the interval we don't post more than one in the
    ;; network.  Do this before rescheduling, so that we don't start another process
    ;; while waiting for the sync mark.
    (SEND SELF :FINISH-BLINKERS)
    (PROCESS:RESET-TIMER-RELATIVE-TIMER-UNITS BLINKER-TIMER NEXT-INTERVAL)))


(DEFMETHOD (SCREEN-BLINKER-PROCESS-PREDICATE BASIC-SCREEN) ()
  (AND (PROCESS:TIMER-EXPIRED-P BLINKER-TIMER)
       (PROCESS:MAKE-PROCESS-PRIORITY :DEADLINE 500000. :PREEMPTIVE NIL)))

(DEFMETHOD (:KEEP-MOUSE-VISIBLE BASIC-SCREEN) ()
  (LET* ((MOUSE (SHEET-MOUSE SELF))
	 (SHEET (MOUSE-SHEET MOUSE)))
    (WHEN (AND SHEET (EQ SELF (SHEET-SCREEN SHEET)))
      (MOUSE-UNLOCKED-CHECK-FAST-TRACKING MOUSE SELF 6))))


(DEFMETHOD (SCREEN-START-BLINKER-TIMER BASIC-SCREEN) ()
  (LET ((BLINKER-NAME (FORMAT nil "Blinkers for ~A" NAME )))
    (SETF BLINKER-PROCESS
	  (PROCESS:MAKE-PROCESS
	    BLINKER-NAME :SIMPLE-P T
	    :PRIORITY (PROCESS:MAKE-PROCESS-PRIORITY :DEADLINE 500000. :PREEMPTIVE NIL)
	    :FLAGS '(:SYSTEM-PROCESS T :NO-RUN-LIGHT T :NO-KBD-ARREST T)
	    :TOP-LEVEL-WHOSTATE "Blinker" :WARM-BOOT-ACTION NIL))
    (SETF BLINKER-TIMER
	  (PROCESS:CREATE-TIMER-WAKEUP BLINKER-PROCESS :NAME BLINKER-NAME))
    (PROCESS:PRESET-SIMPLE-PROCESS BLINKER-PROCESS
				   #'SCREEN-BLINKER-PROCESS-TOP-LEVEL `(,SELF)
				   #'SCREEN-BLINKER-PROCESS-PREDICATE `(,SELF))))

(DEFMETHOD (:INIT BASIC-SCREEN :BEFORE) (IGNORE)
  (SETQ SCREEN SELF)
  (SETF BLINKER-PROCESS NIL)
  (SETF BLINKER-TIMER NIL)
  (WHEN (SCREEN-HAS-BLINKER-TIMER-P SELF)
    (SCREEN-START-BLINKER-TIMER SELF))
  NIL)


(DEFMETHOD (HASTEN-BLINKER-TIME BASIC-SCREEN) (&OPTIONAL (DELAY 0))
  (WHEN BLINKER-TIMER
    (UNLESS (PROCESS:TIMER-EXPIRES-BY-RELATIVE-TIMER-UNITS BLINKER-TIMER DELAY)
      (PROCESS:RESET-TIMER-RELATIVE-TIMER-UNITS BLINKER-TIMER DELAY))))

;; This code removes any windows which are inferiors of this screen from 
;; the previously-selected-windows list.  This keeps "dead" screens from being
;; called back to life by the select key.
(DEFMETHOD (:REMOVE-FROM-PREVIOUSLY-SELECTED-WINDOWS BASIC-SCREEN) ()
  (WITHOUT-INTERRUPTS
    (WHEN (NOT (VARIABLE-BOUNDP SAVED-PREVIOUSLY-SELECTED-WINDOWS))
      (SETF SAVED-PREVIOUSLY-SELECTED-WINDOWS
	    (REMOVE-FROM-PREVIOUSLY-SELECTED-WINDOWS-IF
	      #'(LAMBDA (WINDOW) (EQ (SEND WINDOW :SCREEN) SELF))
	      (SHEET-CONSOLE SELF))))
    SAVED-PREVIOUSLY-SELECTED-WINDOWS))

;; This code restores the approximate set of previously selected windows
;; that were present the last time the screen was activated.
(DEFMETHOD (:RESTORE-PREVIOUSLY-SELECTED-WINDOWS BASIC-SCREEN) ()
  (WHEN (AND (VARIABLE-BOUNDP SAVED-PREVIOUSLY-SELECTED-WINDOWS)
	     (NOT (CL:GETF PROPERTY-LIST :DONT-CHANGE-PREVIOUSLY-SELECTED-WINDOWS)))
    (LET ((PSW SAVED-PREVIOUSLY-SELECTED-WINDOWS))
      (VARIABLE-MAKUNBOUND SAVED-PREVIOUSLY-SELECTED-WINDOWS)
      (MAPC #'(LAMBDA (WINDOW)
		(ADD-TO-PREVIOUSLY-SELECTED-WINDOWS WINDOW T T))
	    PSW))))

(DEFMETHOD (:ACTIVATE BASIC-SCREEN) ()
  (LOCK-SHEET (SELF)
    (WITHOUT-INTERRUPTS
      (SI:PUSH* SELF ALL-THE-SCREENS)))
  NIL)
 
(DEFMETHOD (:EXPOSE BASIC-SCREEN :BEFORE) (&REST IGNORE)
  (SEND SELF :ACTIVATE)
  NIL)

(DEFMETHOD (:EXPOSE BASIC-SCREEN :AFTER) (&REST IGNORE)
  (SEND SELF :RESTORE-PREVIOUSLY-SELECTED-WINDOWS)
  (WHEN BLINKER-PROCESS
    (WITH-SCREEN-CONTROLLER-LOCK (SELF)
      (WHEN (NOT (PROCESS:ACTIVE-P BLINKER-PROCESS))
	(PROCESS:RESET BLINKER-PROCESS)
	(PROCESS:ENABLE BLINKER-PROCESS)
	(PROCESS:RESET-TIMER-RELATIVE-TIMER-UNITS BLINKER-TIMER 0)))))

(DEFMETHOD (:DEEXPOSE BASIC-SCREEN :BEFORE) (&REST IGNORE)
  ;; If we are deexposed, deexpose the associated who line too
  (WHEN (AND (INSTANCEP WHO-SCREEN)
	     (SHEET-EXPOSED-P WHO-SCREEN))
    (SEND WHO-SCREEN :DEEXPOSE))
  ;; Don't let inferiors stay on previously-selected-windows, since they
  ;; aren't exposable/selectable now.
  (SEND SELF :REMOVE-FROM-PREVIOUSLY-SELECTED-WINDOWS)
  (WHEN BLINKER-PROCESS
    (WITH-SCREEN-CONTROLLER-LOCK (SELF)
      (PROCESS:RESET-AND-RELEASE-RESOURCES BLINKER-PROCESS)
      (PROCESS:CLEAR-TIMER BLINKER-TIMER))))
  
(DEFMETHOD (:DEACTIVATE BASIC-SCREEN :BEFORE) (&REST IGNORE)
  (WHEN (AND EXPOSED-P
	     (SEND SELF :APPROPRIATE-HARDWARE-P))
    (SEND SELF :DEEXPOSE NIL)
    (SEND SELF :SET-VIDEO-ON NIL))
  (WHEN (MEMQ WHO-SCREEN TV:ALL-THE-SCREENS)
    (SEND WHO-SCREEN :DEACTIVATE))
  NIL)

(DEFMETHOD (:DEACTIVATE BASIC-SCREEN) ()
  (SHEET-SET-ALL-EXPOSED-FLAGS EXPOSED-INFERIORS 0)
  (SETQ ALL-THE-SCREENS (DELQ SELF ALL-THE-SCREENS))
  (WHEN BLINKER-PROCESS
    (PROCESS:KILL BLINKER-PROCESS))
  NIL)

(DEFMETHOD (SHEET-CLEAR-LOCKS-AND-RESOURCES BASIC-SCREEN :BEFORE) ()
  (WHEN SCREEN-LOCK (PROCESS:RESET-LOCK SCREEN-LOCK)))

(DEFMETHOD (:SCREEN-SELECT BASIC-SCREEN :AFTER) (&OPTIONAL (SET-VIDEO-ON T))
  SET-VIDEO-ON
  (LET* ((MS (SHEET-MOUSE SELF))
	 (M (WHEN MS (MOUSE-SHEET MS))))
    (WHEN (AND (INSTANCEP M)
	       (NOT (EQ SELF (SHEET-SCREEN M)))
	       (EQ T (SEND SELF :GET :SET-MOUSE-SHEET-WHEN-SELECTED)))
      (MOUSE-SET-SHEET SELF)))
  NIL)

(DEFMETHOD (:VIDEO BASIC-SCREEN) ()
  (CL:GETF PROPERTY-LIST :VIDEO))

(DEFMETHOD (:GET BASIC-SCREEN) (INDICATOR)
  (CL:GETF PROPERTY-LIST INDICATOR))

(DEFMETHOD (:PUTPROP BASIC-SCREEN) (VALUE INDICATOR)
  (CL:SETF (CL:GETF PROPERTY-LIST INDICATOR) VALUE))

(DEFMETHOD (:REMPROP BASIC-SCREEN) (INDICATOR)
  (CL:REMF PROPERTY-LIST INDICATOR))

;;; These are like the SI:OUTPUT-STREAM ones, because of the ones on SHEET.
(DEFMETHOD (:FORCE-OUTPUT BASIC-SCREEN) () )
(DEFMETHOD (:FINISH BASIC-SCREEN) () )
(DEFMETHOD (:FINISH-BLINKERS BASIC-SCREEN) () )


;;;  Stubs for screens which don't really do these protocols...

;;
;; Control dummies
;;

(DEFMETHOD (:CHROMA-KEY-MODES BASIC-SCREEN :DEFAULT) ()
  NIL)

(DEFMETHOD (:PIXEL-WIDTH BASIC-SCREEN :DEFAULT) ()
  0)


(DEFMETHOD (:SET-PIXEL-WIDTH BASIC-SCREEN :DEFAULT) (&OPTIONAL IGNORE IGNORE)
  0)

(DEFMETHOD (:WRAP BASIC-SCREEN :DEFAULT) (&OPTIONAL IGNORE)
  (VALUES T T))

(DEFMETHOD (:SET-WRAP BASIC-SCREEN :DEFAULT) (IGNORE IGNORE &OPTIONAL IGNORE)
  (VALUES T T))

(DEFMETHOD (:VIDEO-ON BASIC-SCREEN :DEFAULT) (&OPTIONAL IGNORE)
  T)

(DEFMETHOD (:SET-VIDEO-ON BASIC-SCREEN :DEFAULT) (IGNORE &OPTIONAL IGNORE)
  T)

(DEFMETHOD (:BOW-MODE BASIC-SCREEN :DEFAULT) (&OPTIONAL IGNORE)
  NIL)

(DEFMETHOD (:SET-BOW-MODE BASIC-SCREEN :DEFAULT) (IGNORE &OPTIONAL IGNORE)
  NIL)

(DEFMETHOD (:VISIBLE-SIZE BASIC-SCREEN :DEFAULT) (&optional without-line-index-pan-zoom)
  (ignore without-line-index-pan-zoom)
  (SEND SELF :INSIDE-SIZE))

(DEFMETHOD (:APPROPRIATE-HARDWARE-P BASIC-SCREEN :DEFAULT) ()
  T)

(DEFMETHOD (:HARDWARE-DESCRIPTION BASIC-SCREEN :DEFAULT) () 
  :BITMAP)

;; Shadowed by MAIN-SCREEN but not by color screens, usually.
(DEFMETHOD (:BEEP BASIC-SCREEN :DEFAULT) (&OPTIONAL IGNORE)
  NIL)

(DEFMETHOD (:PAN-AND-ZOOM-P BASIC-SCREEN :DEFAULT) ()
 "Return NIL, pan and zoom are not supported by this hardware"
  NIL)

(DEFMETHOD (:LINE-INDEX-TABLE-IMAGE BASIC-SCREEN :DEFAULT) ()
 "(dummy)"
  NIL)

(DEFMETHOD (:LINE-INDEX-TABLE BASIC-SCREEN :DEFAULT) ()
  "(dummy)"
  NIL)

(DEFMETHOD (:LINE-PAN-ZOOM BASIC-SCREEN :DEFAULT) ()
  NIL)

(DEFMETHOD (:LINE-PAN-ZOOM-IMAGE BASIC-SCREEN :DEFAULT) ()
  NIL)

(DEFMETHOD (:CURSOR BASIC-SCREEN :DEFAULT) ()
  NIL)

(DEFMETHOD (:CURSOR-IMAGE BASIC-SCREEN :DEFAULT) ()
  NIL)

(DEFMETHOD (:COLOR-MAP BASIC-SCREEN :DEFAULT) ()
  NIL)

(DEFMETHOD (:COLOR-MAP-DESCRIPTION BASIC-SCREEN :DEFAULT) ()
  NIL)

;;; Most screens can be seen by the "user"
(DEFMETHOD (:USER-VISIBLE BASIC-SCREEN :DEFAULT) () T)

;;; default methods for screens
(DEFMETHOD (:ACCEPT-POP-UP-NOTIFICATIONS BASIC-SCREEN :DEFAULT) () NIL)

(DEFMETHOD (:SETUP-HARDWARE BASIC-SCREEN :DEFAULT) ()
  NIL)

(DEFMETHOD (:FIGURE-USABLE-COLOR-PARAMETERS BASIC-SCREEN :DEFAULT)
       (WRITE-MASK DATA ALU &OPTIONAL TYPE ARRAY SCR-ARRAY)
  ARRAY WRITE-MASK
  (COLOR:DEFAULT-FIGURE-USABLE-COLOR-PARAMETERS -1 DATA ALU TYPE :DEFAULT SCR-ARRAY))

(DEFMETHOD (:INTERLACE BASIC-SCREEN :DEFAULT) (&OPTIONAL CONT)
  CONT
  NIL)

(DEFMETHOD (:VERTICAL-SYNC-P BASIC-SCREEN :DEFAULT) ()
  T)

(DEFMETHOD (:GET-VERTICAL-SYNC-WITH-TIMEOUT BASIC-SCREEN :DEFAULT) ()
  T)

(DEFMETHOD (SCREEN-RASTER-HEIGHT BASIC-SCREEN :DEFAULT) ()
  HEIGHT)

(DEFMETHOD (:FILL-MODE-ARRAY BASIC-SCREEN :DEFAULT) (IGNORE)
  NIL)

(DEFMETHOD (:PACKED-PIXEL-MODE-ARRAYS BASIC-SCREEN :DEFAULT) (IGNORE)
  NIL)

(DEFMETHOD (:EXTERNAL-OVERLAY-ARRAY BASIC-SCREEN :DEFAULT) (IGNORE)
  NIL)

(DEFMETHOD (:PIXEL-MODE-ARRAY BASIC-SCREEN :DEFAULT) (ARRAY)
  ARRAY)

(DEFMETHOD (:USEFUL-BITS-PER-PIXEL BASIC-SCREEN :DEFAULT) ()
  (SEND SELF :BITS-PER-PIXEL))

(DEFMETHOD (:PIXEL-ASPECT-RATIO BASIC-SCREEN :DEFAULT) () 1.0)

(DEFMETHOD (:CONSOLE BASIC-SCREEN :DEFAULT) () NIL)

(DEFMETHOD (SCREEN-BRIGHTNESS BASIC-SCREEN :DEFAULT) () 1)

(DEFMETHOD ((CL:SETF SCREEN-BRIGHTNESS) BASIC-SCREEN :DEFAULT) (VALUE) VALUE)

(DEFMETHOD (SCREEN-OPEN-ALL-CONFLICTING-BLINKERS BASIC-SCREEN :DEFAULT) (LEFT TOP RIGHT BOTTOM)
  LEFT TOP RIGHT BOTTOM
  NIL)

(DEFMETHOD (SCREEN-GENERA-GRAPHICS-COMPATIBILITY BASIC-SCREEN :DEFAULT) () T)

(DEFMETHOD ((CL:SETF SCREEN-GENERA-GRAPHICS-COMPATIBILITY) BASIC-SCREEN :DEFAULT) (IGNORE) )

(DEFMETHOD (SCREEN-FOLLOW-DRAWABLE-INDIRECTION BASIC-SCREEN :DEFAULT)
	   (DRAWABLE X-OFFSET Y-OFFSET)
  (VALUES DRAWABLE X-OFFSET Y-OFFSET))

(DEFMETHOD (SCREEN-PERMITS-BIT-SAVE-ARRAYS BASIC-SCREEN :DEFAULT) () NIL)


(DEFMETHOD (:GET-COLOR-NAMED TV:BASIC-SCREEN) (NAME)
  (COND ((EQ NAME :BLACK) COLOR:*BLACK*)
	((EQ NAME :WHITE) COLOR:*WHITE*)
	(T (FERROR "NO COLOR NAMED ~S IS KNOWN TO THIS SCREEN" NAME))))


(DEFMETHOD (:COMPUTE-COLOR-ALU TV:BASIC-SCREEN) (&REST ARGS &AUX CL)
  (COND ((NULL (CDDR ARGS))
	 (COND ((AND (SETQ CL (CADR ARGS))
		     (FIXP (CADR ARGS))))
	       ((AND (INSTANCEP CL)
		     (SEND CL :OPERATION-HANDLED-P :RGB)))
	       ((SETQ CL (SEND SELF :GET-COLOR-NAMED (CADR ARGS)))))
	 (COND ((LISTP CL) (LEXPR-SEND SELF ':COMPUTE-RGB-ALU (CAR ARGS) CL))
	       ((FIXP CL) (SEND SELF ':COMBINE-ALU-AND-DATA (CAR ARGS) CL))
	       ((INSTANCEP CL)
		(MULTIPLE-VALUE-BIND (R G B)
		    (SEND CL :RGB)
		  (SEND SELF :COMPUTE-RGB-ALU (CAR ARGS) R G B)))
	       ((AND CL (SYMBOLP CL))
		(SEND SELF :COMPUTE-COLOR-ALU (CAR ARGS) CL))
	       (CL (SEND SELF ':COMPUTE-RGB-ALU (CAR ARGS) CL CL CL))
	       (T (FERROR "INVALID ARGS TO COMPUTE-COLOR-ALU"))))
	(T (LEXPR-SEND SELF ':COMPUTE-RGB-ALU ARGS))))


(DEFMETHOD (:COMBINE-ALU-AND-DATA TV:BASIC-SCREEN) (ALU DAT &OPTIONAL (PLANE-MASK -1))
  (COND ((INSTANCEP ALU)
	 (SEND ALU ':SET-FILL-DATA DAT)
	 (SEND ALU :SET-PLANE-MASK PLANE-MASK)
	 ALU
	 )
	(T (MAKE-INSTANCE 'COLOR:GENERAL-SC-COLOR-ALU
			  ':ARRAY ':DEFAULT
			  ':FILL-DATA DAT
			  ':PLANE-MASK PLANE-MASK
			  ':PIXEL-MASK -1
			  ':ALU ALU)))
	)


(DEFMETHOD (:COMPUTE-RGB-ALU TV:BASIC-SCREEN) (ALU R G B &OPTIONAL INV (PERM 0))

  ;; INVERT THE SENSE OF COLOR INTENSITY IF REQUESTED
  (COND
    ((LISTP INV)
     (AND (FIRST INV) (SETQ R (- 1.0 R)))
     (AND (SECOND INV) (SETQ G (- 1.0 G)))
     (AND (THIRD INV) (SETQ B (- 1.0 B))))
    ((EQ INV T)
	 (SETQ R (- 1.0 R))
	 (SETQ G (- 1.0 G))
	 (SETQ B (- 1.0 B))))

  ;; PERMUTE THE COLORS IF REQUESTED
  (UNLESS (ZEROP PERM)
    (MULTIPLE-VALUE-BIND (DIV REM) (FLOOR PERM 3)
      (SELECTOR REM EQL 
	(1 (PSETQ R G G R))
	(2 (PSETQ R B B R)))
      (SELECTOR DIV EQL
	(1 (PSETQ G B B G)))))

  (SEND SELF ':COMBINE-ALU-AND-DATA ALU (SEND SELF ':COMPUTE-RGB-DATA R G B))
  )


(DEFMETHOD (:COMPUTE-RGB-DATA TV:BASIC-SCREEN) (R G B)
  (LET ((BPP  (SEND SELF :BITS-PER-PIXEL)))
    (IF ( BPP 24.)
	(DPB (MIN 255 (MAX 0 (FLOOR (* B 255.0))))
	     (BYTE 8 16.)
	     (DPB (MIN 255 (MAX 0 (FLOOR (* G 255.0))))
		  (BYTE 8 8)
		  (MIN 255 (MAX 0 (FLOOR (* R 255.0))))))
	(LET ((INTENSITY (// (SQRT (+ (* R R)(* G G)(* B B))) (SQRT 3.0)))
	      (MASK (LSH 1 (SEND SELF :BITS-PER-PIXEL))))
	  (MIN (1- MASK) (MAX 0 (FLOOR (* INTENSITY MASK))))))))



;;; Font descriptors and errors.
(DEFMETHOD (:PARSE-FONT-DESCRIPTOR BASIC-SCREEN) (FD)
  (SCREEN-PARSE-FONT-DESCRIPTOR FD 'FONTS:CPT-FONT))

(DEFFLAVOR FONT-NOT-FOUND (FONT-NAME) (ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT FONT-NOT-FOUND) (STREAM)
  (FORMAT STREAM "No font ~A found." FONT-NAME))

(DEFMETHOD (:PROCEED FONT-NOT-FOUND :DIFFERENT-FONT) (&OPTIONAL NEW-FONT)
  "Specify a different font to use instead"
  (WHEN (AND (NULL NEW-FONT)
	     (OR (NOT (BOUNDP FONT-NAME))
		 (FQUERY () "~A is now loaded,~
do you wish to specify a different font to use instead? " FONT-NAME)))
    (SETQ NEW-FONT (PKG-BIND "FONTS"
		     (ACCEPT 'SYMBOL :PROMPT "Font to use instead"))))
  (VALUES :DIFFERENT-FONT NEW-FONT))

(COMPILE-FLAVOR-METHODS FONT-NOT-FOUND)

(DEFUN SCREEN-PARSE-FONT-DESCRIPTOR (FD TYPE &OPTIONAL DONT-LOAD-P)
  (WHEN (AND (TYPEP FD 'FONT) (BOUNDP (FONT-NAME FD)))
    (SETQ FD (FONT-NAME FD)))
  (COND ((SYMBOLP FD)
	 ;; Name of font -- find appropriate font
	 (LET ((FONT (GET FD TYPE)))
	   (IF (NULL FONT)
	       (IF (BOUNDP FD)
		   (SYMEVAL FD)
		   (IF DONT-LOAD-P
		       (SIGNAL-PROCEED-CASE ((NEW-FONT) 'FONT-NOT-FOUND :FONT-NAME FD)
			 (:DIFFERENT-FONT (SCREEN-PARSE-FONT-DESCRIPTOR NEW-FONT TYPE)))
		       (CONDITION-CASE ()
			   (FED:FIND-AND-LOAD-FONT FD)
			 (FED:FONT-NOT-FOUND ))
		       (SCREEN-PARSE-FONT-DESCRIPTOR FD TYPE T)))
	       (IF (SYMBOLP FONT)
		   (SCREEN-PARSE-FONT-DESCRIPTOR FONT TYPE)
		   FONT))))
	((TYPEP FD 'FONT) FD)
	(T (FERROR NIL "Illegal font descriptor ~A" FD))))

(defvar *margin-size* 100)

(defmethod (center-remote-screen-mouse basic-screen :default)
	   (remote-screen x y &optional warp)
  
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")  ;given a new x and y in end-user coordinates, possibly adjust mouse offsets
0  1;and warp the remote screen to keep the tracking in bounds 

0  (let ((ms (or (mouse-sheet (sheet-mouse self)) self)))

    (cond ((and adjust-mouse-offsets (neq remote-screen self))

	   1;try to place the mouse in the center of the remote screen
0	   (multiple-value-bind (sx sy) (send remote-screen :inside-size)

	     (let* ((new-x-offset mouse-x-offset)
		    (new-y-offset mouse-y-offset)
		    (min-offset (- *margin-size*)))
	       (multiple-value-bind (ix iy not-found)
		   (sheet-calculate-offsets ms self nil)
		 (unless not-found

		   (let ((old-x-offset new-x-offset)
			 (old-y-offset new-y-offset))

		     (let ((remote-x (- (+ x ix ) new-x-offset))
			   (lx (if (eq self ms)
				   (sheet-inside-right self)
				   (sheet-width self)))
			   (minx (ash sx -2)))

		       (when (or (< remote-x minx)
				 (> remote-x (- sx minx)))
			 (let* ((max-x-offset (+ *margin-size* (- lx sx)))
				(average-offset (ash (+ min-offset max-x-offset) -1))
				(next-x (+ new-x-offset (- remote-x average-offset))))
			   (setq new-x-offset
				 (if (> max-x-offset min-offset)
				     (max min-offset (min max-x-offset next-x))
				     (min min-offset (max max-x-offset next-x))
				     ))
			   )))

		     (let ((remote-y (- (+ y iy) new-y-offset))
			   (ly (if (eq self ms)
				   (sheet-inside-bottom self)
				   (sheet-height self)))
			   (miny (ash sy -2)))
		       (when (or (< remote-y miny)
				 (> remote-y (- sy miny)))
			 (let* ((max-y-offset (+ *margin-size* (- ly sy)))
				(average-offset (ash (+ min-offset max-y-offset) -1))
				(next-y (+ new-y-offset (- remote-y average-offset))))
			   (setq new-y-offset
				 (if (> max-y-offset min-offset)
				     (max min-offset (min max-y-offset next-y))
				     (min min-offset (max max-y-offset next-y))
				     )))))
		     (when (or warp
			       (not (eql old-x-offset new-x-offset))
			       (not (eql old-y-offset new-y-offset)))
		       (setq mouse-x-offset new-x-offset)
		       (setq mouse-y-offset new-y-offset)
		       (remote-screen-warp-mouse remote-screen remote-screen
						 (- (+ x ix) new-x-offset)
						 (- (+ y iy) new-y-offset))
		       )))))

	     ))
	  (warp
	   (multiple-value-bind (ix iy not-found)
	       (sheet-calculate-offsets ms self nil)

	     (unless not-found
	       (remote-screen-warp-mouse  remote-screen remote-screen
					  (- (+ ix x) mouse-x-offset)
					  (- (+ iy y) mouse-y-offset)))
	     )))))



(DEFMETHOD (REMOTE-SCREEN-WARP-MOUSE BASIC-SCREEN :DEFAULT) (sheet x y)
  (let ((console-screen (cli::console-screen (tv:sheet-console sheet))))
    (center-remote-screen-mouse self console-screen x y t))
  )

(defmethod (SCREEN-HAS-REMOTE-BITMAPS screen-microcoded-graphics-mixin) ()
  nil)

(defmethod ((cl:setf screen-adjust-mouse-offsets) basic-screen) (to)
  (setq adjust-mouse-offsets to)
  (if (null to)
      (setq mouse-x-offset 0
	    mouse-y-offset 0)
      (let* ((console-screen (cli::console-screen (tv:sheet-console self)))
	     (mouse (sheet-mouse self))
	     (x (mouse-x mouse))
	     (y (mouse-y mouse)))
	(center-remote-screen-mouse self console-screen x y nil))
      ))




;;; Some mixins for screens...

;;; A mixin that causes inferiors to be scaled when the size of the window changes.
;;; TIME-STAMP is (as for any sheet), the time-stamp for comparison with this sheet's superior.
;;; CURRENT-TIME-STAMP is the stamp which propagates down into our inferiors.  If
;;; an inferior's TIME-STAMP is EQ to our CURRENT-TIME-STAMP, then the inferior is
;;; up to date.  Otherwise we compare the two stamps and resolve the differences.
;;; This comparison happens to the active inferiors when our stamp changes and
;;; to any newly-activated inferior.
(DEFFLAVOR SCALE-INFERIORS-MIXIN (CURRENT-TIME-STAMP) ()
  (:REQUIRED-FLAVORS SHEET)
  (:GETTABLE-INSTANCE-VARIABLES CURRENT-TIME-STAMP))

(DEFMETHOD (SCALE-INFERIORS-MIXIN-SCALE-INFERIOR SCALE-INFERIORS-MIXIN)
	   (INFERIOR INF-TIME-STAMP)
  (UNLESS (EQ CURRENT-TIME-STAMP INF-TIME-STAMP)
    ;; Hasn't had edges set in the current time slice, so set them
    (LET* ((WIDTH-LAST-TIME (SHEET-TIME-STAMP-INSIDE-WIDTH INF-TIME-STAMP))
	   (HEIGHT-LAST-TIME (SHEET-TIME-STAMP-INSIDE-HEIGHT INF-TIME-STAMP))
	   (TOP-LAST-TIME (SHEET-TIME-STAMP-TOP-MARGIN-SIZE INF-TIME-STAMP))
	   (LEFT-LAST-TIME (SHEET-TIME-STAMP-LEFT-MARGIN-SIZE INF-TIME-STAMP))
	   (NEW-LEFT (+ (ROUND (* (- (SHEET-X-OFFSET INFERIOR) LEFT-LAST-TIME)
				  (SHEET-INSIDE-WIDTH))
			       WIDTH-LAST-TIME)
			LEFT-MARGIN-SIZE))
	   (NEW-TOP (+ (ROUND (* (- (SHEET-Y-OFFSET INFERIOR) TOP-LAST-TIME)
				 (SHEET-INSIDE-HEIGHT))
			      HEIGHT-LAST-TIME)
		       TOP-MARGIN-SIZE))
	   (NEW-WIDTH (ROUND (* (SHEET-WIDTH INFERIOR) (SHEET-INSIDE-WIDTH))
			     WIDTH-LAST-TIME))
	   (NEW-HEIGHT (ROUND (* (SHEET-HEIGHT INFERIOR) (SHEET-INSIDE-HEIGHT))
			      HEIGHT-LAST-TIME))
	   NEW-RIGHT NEW-BOTTOM
	   (OPTIONS (ASSQ SELF *DEFAULT-WINDOW-SIZE-ALIST*)))
      ;; SET-DEFAULT-WINDOW-SIZE can override those proportional edges
      ;; but only if INFERIOR currently conforms to it
      (AND OPTIONS
	   (SETQ OPTIONS (ASSQ (TYPEP INFERIOR) (CDR OPTIONS)))
	   (LET* ((LEFT-SPEC (GET OPTIONS :LEFT))
		  (RIGHT-SPEC (GET OPTIONS :RIGHT))
		  (TOP-SPEC (GET OPTIONS :TOP))
		  (BOTTOM-SPEC (GET OPTIONS :BOTTOM))
		  (WIDTH-SPEC (OR (GET OPTIONS :WIDTH)
				  (AND LEFT-SPEC RIGHT-SPEC (- RIGHT-SPEC LEFT-SPEC))))
		  (HEIGHT-SPEC (OR (GET OPTIONS :HEIGHT)
				   (AND TOP-SPEC BOTTOM-SPEC (- BOTTOM-SPEC TOP-SPEC)))))
	     (WHEN (EQL (SHEET-WIDTH INFERIOR) WIDTH-SPEC)
	       (SETQ NEW-WIDTH WIDTH-SPEC))
	     (WHEN (EQL (SHEET-HEIGHT INFERIOR) HEIGHT-SPEC)
	       (SETQ NEW-HEIGHT HEIGHT-SPEC))
	     (WHEN (EQL (+ (SHEET-X-OFFSET INFERIOR) (SHEET-WIDTH INFERIOR)) RIGHT-SPEC)
	       (SETQ NEW-LEFT (- (IF (= RIGHT-SPEC (+ WIDTH-LAST-TIME
						      (SHEET-INSIDE-LEFT)))
				     (SHEET-INSIDE-RIGHT) RIGHT-SPEC)
				 NEW-WIDTH)))
	     (WHEN (EQL (SHEET-X-OFFSET INFERIOR) LEFT-SPEC)
	       (SETQ NEW-LEFT LEFT-SPEC))
	     (WHEN (EQL (+ (SHEET-Y-OFFSET INFERIOR) (SHEET-HEIGHT INFERIOR)) BOTTOM-SPEC)
	       (SETQ NEW-TOP (- (IF (= BOTTOM-SPEC (+ HEIGHT-LAST-TIME
						      (SHEET-INSIDE-TOP)))
				    (SHEET-INSIDE-BOTTOM) BOTTOM-SPEC)
				NEW-HEIGHT)))
	     (WHEN (EQL (SHEET-Y-OFFSET INFERIOR) TOP-SPEC)
	       (SETQ NEW-TOP TOP-SPEC))))
      ;; Stay inside the superior's inside edges (:VERIFY doesn't check when deexposed)
      (WHEN (< NEW-LEFT (SHEET-INSIDE-LEFT))
	(SETQ NEW-LEFT (SHEET-INSIDE-LEFT)))
      (WHEN (< NEW-TOP (SHEET-INSIDE-TOP))
	(SETQ NEW-TOP (SHEET-INSIDE-TOP)))
      (SETQ NEW-RIGHT (+ NEW-LEFT NEW-WIDTH)
	    NEW-BOTTOM (+ NEW-TOP NEW-HEIGHT))
      (WHEN (> NEW-RIGHT (SHEET-INSIDE-RIGHT))
	(SETQ NEW-RIGHT (SHEET-INSIDE-RIGHT)
	      NEW-LEFT (MAX (- NEW-RIGHT NEW-WIDTH) (SHEET-INSIDE-LEFT))))
      (WHEN (> NEW-BOTTOM (SHEET-INSIDE-BOTTOM))
	(SETQ NEW-BOTTOM (SHEET-INSIDE-BOTTOM)
	      NEW-TOP (MAX (- NEW-BOTTOM NEW-HEIGHT) (SHEET-INSIDE-TOP))))
      ;; Verify that these edges are okay with the window
      (COND ((NOT (SEND INFERIOR :SET-EDGES NEW-LEFT NEW-TOP NEW-RIGHT NEW-BOTTOM :VERIFY))
	     ;; Won't go, try not to change size
	     (SETQ NEW-WIDTH (SHEET-WIDTH INFERIOR)
		   NEW-HEIGHT (SHEET-HEIGHT INFERIOR))
	     ;; Still stay inside superior
	     (WHEN (> (SETQ NEW-RIGHT (+ NEW-WIDTH NEW-LEFT)) (SHEET-INSIDE-RIGHT))
	       (SETQ NEW-RIGHT (SHEET-INSIDE-RIGHT)
		     NEW-LEFT (MAX (- NEW-RIGHT NEW-WIDTH) (SHEET-INSIDE-LEFT))))
	     (WHEN (> (SETQ NEW-BOTTOM (+ NEW-HEIGHT NEW-TOP)) (SHEET-INSIDE-BOTTOM))
	       (SETQ NEW-BOTTOM (SHEET-INSIDE-BOTTOM)
		     NEW-TOP (MAX (- NEW-BOTTOM NEW-HEIGHT) (SHEET-INSIDE-TOP))))
	     (OR (SEND INFERIOR :SET-EDGES NEW-LEFT NEW-TOP NEW-RIGHT NEW-BOTTOM :VERIFY)
		 ;; Won't go, don't change size at all
		 (SETQ NEW-LEFT NIL))))
      (WHEN (AND NEW-LEFT
		 (= (SHEET-X-OFFSET INFERIOR) NEW-LEFT)
		 (= (SHEET-Y-OFFSET INFERIOR) NEW-TOP)
		 (= (+ NEW-LEFT (SHEET-WIDTH INFERIOR)) NEW-RIGHT)
		 (= (+ NEW-TOP (SHEET-HEIGHT INFERIOR)) NEW-BOTTOM))
	(SETQ NEW-LEFT NIL))			;Speed bum, no change required
      (WHEN NEW-LEFT
	(SEND INFERIOR :SET-EDGES NEW-LEFT NEW-TOP NEW-RIGHT NEW-BOTTOM)))))

(DEFWHOPPER (:CHANGE-OF-SIZE-OR-MARGINS SCALE-INFERIORS-MIXIN) (&REST ARGS)
  (DELAYING-SCREEN-MANAGEMENT
    (LET ((OLD-EXP-INFS (REVERSE EXPOSED-INFERIORS)))	;make a copy, because it can change
      (DOLIST (I OLD-EXP-INFS)
	(SEND I :DEEXPOSE))
      (LEXPR-CONTINUE-WHOPPER ARGS)
      (SEND SELF :UPDATE-CURRENT-TIMESTAMP)
      (SHEET-RESOLVE-INFERIOR-TIME-STAMPS SELF)
      (DOLIST (I OLD-EXP-INFS)
	(SEND I :EXPOSE)))))

;;; Stuff formerly used by screen hardcopy.
#||
(DEFVAR MAIN-SCREEN-BUFFER-IN-2D NIL)

(DEFUN INITIALIZE-2D-SCREEN-BUFFER ()
  (LET ((DIMENSIONS (RASTER-WIDTH-AND-HEIGHT-TO-MAKE-ARRAY-DIMENSIONS
		      (FLOOR (SHEET-WIDTH MAIN-SCREEN) (SHEET-BITS-PER-PIXEL MAIN-SCREEN))
		      (+ (SHEET-HEIGHT MAIN-SCREEN) (SHEET-HEIGHT WHO-LINE-SCREEN))))
	(ARRAY-TYPE (SHEET-ARRAY-TYPE MAIN-SCREEN)))
    (IF MAIN-SCREEN-BUFFER-IN-2D
	(SI:CHANGE-INDIRECT-ARRAY MAIN-SCREEN-BUFFER-IN-2D
				  ARRAY-TYPE DIMENSIONS (SCREEN-BUFFER MAIN-SCREEN) NIL)
	(SETQ MAIN-SCREEN-BUFFER-IN-2D
	      (MAKE-ARRAY DIMENSIONS
			  :TYPE ARRAY-TYPE
			  :DISPLACED-TO (SCREEN-BUFFER MAIN-SCREEN))))))

(DEFVAR MAIN-SCREEN-AND-WHO-LINE NIL)

;; With margins of left and top, display width by height of main screen buffer, starting in
;; top left corner of main-screen
(DEFUN PORTION-OF-MAIN-SCREEN-BUFFER (LEFT TOP WIDTH HEIGHT)
  (LET ((ARRAY-TYPE (SHEET-ARRAY-TYPE MAIN-SCREEN))
	(OFFSET (+ (* (- (SHEET-TOP-MARGIN-SIZE MAIN-SCREEN) TOP)
		      (SHEET-WIDTH MAIN-SCREEN))
		   (FLOOR (- (SHEET-LEFT-MARGIN-SIZE MAIN-SCREEN) LEFT)
			  (SHEET-BITS-PER-PIXEL MAIN-SCREEN)))))
    (INITIALIZE-2D-SCREEN-BUFFER)
    (IF MAIN-SCREEN-AND-WHO-LINE
	(SI:CHANGE-INDIRECT-ARRAY MAIN-SCREEN-AND-WHO-LINE
				  ARRAY-TYPE (RASTER-WIDTH-AND-HEIGHT-TO-MAKE-ARRAY-DIMENSIONS
					       WIDTH HEIGHT)
				  MAIN-SCREEN-BUFFER-IN-2D OFFSET)
	(SETQ MAIN-SCREEN-AND-WHO-LINE
	      (MAKE-RASTER-ARRAY WIDTH HEIGHT
				 :TYPE ARRAY-TYPE
				 :DISPLACED-TO MAIN-SCREEN-BUFFER-IN-2D
				 :DISPLACED-INDEX-OFFSET OFFSET
				 :DISPLACED-CONFORMALLY 'T)))
    MAIN-SCREEN-AND-WHO-LINE))

;; Get main-screen, who-line, and some margins.
;; Margins nil:			Just the main-screen and the who-line window
;; Margins :center		A little bit around each end.
;; Margins 't			Try to get *everything*
(DEFUN WHOLE-SCREEN (&KEY (MARGINS :CENTER))
  (COND ((NULL MARGINS)
	 (PORTION-OF-MAIN-SCREEN-BUFFER 0 0
					(SHEET-INSIDE-WIDTH MAIN-SCREEN)
					(+ (SHEET-INSIDE-HEIGHT MAIN-SCREEN)
					   (SHEET-INSIDE-HEIGHT WHO-LINE-SCREEN))))
	((EQ MARGINS :CENTER)	; Pure hack. Heuristicate.
	 (PORTION-OF-MAIN-SCREEN-BUFFER 32. 0
					(+ 64 (SHEET-INSIDE-WIDTH MAIN-SCREEN))
					(+ (SHEET-INSIDE-HEIGHT MAIN-SCREEN)
					   (SHEET-INSIDE-HEIGHT WHO-LINE-SCREEN)
					   4)))
	(T
	 (PORTION-OF-MAIN-SCREEN-BUFFER (SHEET-LEFT-MARGIN-SIZE MAIN-SCREEN) 4
					(SHEET-WIDTH MAIN-SCREEN)
					(+ (SHEET-INSIDE-HEIGHT MAIN-SCREEN)
					   (SHEET-INSIDE-HEIGHT WHO-LINE-SCREEN)
					   8)))))
||#


(DEFUN BEEP (&OPTIONAL BEEP-TYPE (STREAM TERMINAL-IO))
  (IF (OPERATION-HANDLED-P STREAM :BEEP)
      (SEND STREAM :BEEP BEEP-TYPE)
      (CLI::CONSOLE-BEEP SYS:*CONSOLE*)))

(DEFUN BLACK-ON-WHITE (&OPTIONAL (SCREEN DEFAULT-SCREEN))
  (SEND SCREEN :SET-BOW-MODE T))

(DEFUN WHITE-ON-BLACK (&OPTIONAL (SCREEN DEFAULT-SCREEN))
  (SEND SCREEN :SET-BOW-MODE NIL))

(DEFUN COMPLEMENT-BOW-MODE (&OPTIONAL (SCREEN DEFAULT-SCREEN))
  (SEND SCREEN :SET-BOW-MODE (NOT (SEND SCREEN :BOW-MODE))))



;;; Mixin which supports a screen which passes
;;; control messages to its parent.  Who line screen's use
;;; it to pass on messages to their real screen


(DEFMETHOD (:INIT SLAVE-SCREEN-MIXIN :BEFORE) (IGNORE)
  (SETF SCREEN-LOCK (SCREEN-LOCK PARENT-SCREEN)))

(DEFWHOPPER (:EXPOSE SLAVE-SCREEN-MIXIN) (&REST ARGS)
  (UNLESS (SEND PARENT-SCREEN :EXPOSED-P) (SEND PARENT-SCREEN :EXPOSE))
  (WHEN (SEND PARENT-SCREEN :EXPOSED-P)
    (LEXPR-CONTINUE-WHOPPER ARGS)))

(defmacro def-pass-to-parent (flavor &rest methods)
  `(progn
     ,@(loop for m in methods
	     collect
	       `(defmethod (,m ,flavor) (&rest args)
		  ,(if (keywordp m)
		       `(lexpr-send parent-screen ,m args)
		       `(cl:apply #',m parent-screen args)
		       )))))

(DEF-PASS-TO-PARENT slave-screen-mixin
  :INTERLACE :VERTICAL-SYNC-P :GET-VERTICAL-SYNC-WITH-TIMEOUT
  :CONTROL :CONTROL-IMAGE :NEW-CONTROL :COPY-CONTROL-IMAGE :MAKE-CONTROL-IMAGE
  SCREEN-RASTER-HEIGHT)


;;; Defaults in place of interesting remote screen methods.




;;;

(DEFMETHOD (%SCREEN-ALLOCATE-SHEET-TEMPORARY-BIT-ARRAY BASIC-SCREEN) (SHEET WIDTH HEIGHT)
  SHEET WIDTH HEIGHT
  NIL)

(DEFMETHOD (%SCREEN-DEALLOCATE-SHEET-TEMPORARY-BIT-ARRAY BASIC-SCREEN) (SHEET PIXMAP)
  SHEET PIXMAP
  NIL)

(DEFMETHOD (VERIFY-DRAWABLE BASIC-SCREEN) (SHEET PIXMAP DIRECTION)
  SHEET PIXMAP DIRECTION
  NIL)

(DEFMETHOD (%SCREEN-PAGE-IN-SHEET-TEMPORARY-BIT-ARRAY BASIC-SCREEN) (SHEET PIXMAP DIRECTION)
  SHEET PIXMAP DIRECTION
  NIL)

(DEFMETHOD (%SCREEN-PAGE-OUT-SHEET-TEMPORARY-BIT-ARRAY BASIC-SCREEN) (SHEET PIXMAP)
  SHEET PIXMAP
  NIL)

;;;

(DEFMETHOD (:%DRAW-MULTIPLE-LINES BASIC-SCREEN) (SHEET ALU LINES DRAW-END-POINT)
  (LOOP FOR INDEX BELOW (ARRAY-ACTIVE-LENGTH LINES) BY 4 DO
    (SEND SELF :%DRAW-LINE (AREF LINES INDEX) (AREF LINES (1+ INDEX))
			   (AREF LINES (+ INDEX 2)) (AREF LINES (+ INDEX 3))
			   ALU DRAW-END-POINT SHEET)))

(DEFMETHOD (:%DRAW-MULTIPLE-RECTANGLES BASIC-SCREEN) (SHEET ALU RECTS)
  (LOOP FOR INDEX BELOW (ARRAY-ACTIVE-LENGTH RECTS) BY 4 DO
    (SEND SELF :%DRAW-RECTANGLE (- (AREF RECTS (+ INDEX 2)) (AREF RECTS INDEX))
				(- (AREF RECTS (+ INDEX 3)) (AREF RECTS (1+ INDEX)))
				(AREF RECTS INDEX) (AREF RECTS (1+ INDEX))
				ALU SHEET)))

;
; Principle implmentation for local screens
;
(DEFMETHOD (%WITH-BIT-ARRAY-OR-STREAM BASIC-SCREEN :DEFAULT) (&REST ARGS)
  ;non-remote screens prefer the bit array variation
  (CL:APPLY #'%WITH-BIT-ARRAY SELF ARGS))

(DEFMETHOD (WAIT-REMOTE-SCREEN-IDLE BASIC-SCREEN :DEFAULT) (&OPTIONAL IGNORE) NIL)

