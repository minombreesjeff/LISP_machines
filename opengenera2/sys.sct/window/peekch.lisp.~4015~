;;; -*- Mode: LISP;  Package: CHAOS;  Base: 8 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Chaosnet peek functions

(TV:DEFINE-PEEK-MODE PEEK-HOSTAT #/H "Hostat"
		     "Show the status of all hosts on the Chaosnet.") 

(DEFUN PEEK-HOSTAT (&REST IGNORE)
  (LOOP DO (HOSTAT)
	   (FORMAT T "~&Done.")
	   (LET ((CHAR (SEND TERMINAL-IO ':TYI)))
	     (UNLESS (CHAR-EQUAL CHAR #\SPACE)
	       (SEND TERMINAL-IO ':UNTYI CHAR)
	       (RETURN))))
  NIL)

(DEFUN PEEK-CHAOS-PACKET-ITEM (PKT &OPTIONAL (INDENT 0))
  "Returns an item that describes a chaosnet packet.  Mouseable subfields are:
   The host:  Left: Causes info about the host to displayed inferior to the packet.
	      Middle: Causes a static hostat to be displayed inferior to the packet.
  	      Right (menu): Typeout Hostat, Supdup, Telnet, Qsend

Sample output:
Pkt [to ! from] <name> (number){, transmitted <n> times (at <time>)}{, being retransmitted}{, released}{, forwarded <n> times}
    <op> (<number>), <n> bytes, number <n>, acking <n>, source idx <n>, dest idx <n>
    Words from <n>: <wordn> ... <wordn+m>
    String: <string>

Packet: to AI (2026), transmitted 27 times (at 1231232), being retransmitted
 CLS (11), 432 bytes, number 3422, acking 3221, source idx 177777, dest idx 177777
 Words from 0: 123123 12371 1227 272727 272626
 String: 'Now is the time for all good men'

Packet: from MC (1440), released, forwarded 17 times
 DAT (201), 100 bytes, number 432, acking 102, source idx 123451, dest idx 123441
 Words from 0: 123123 64532
 String: 'Yow, I am having fun making up packet strings!'

"
  (LET* ((TO-US (AND (ZEROP (PKT-TIMES-TRANSMITTED PKT))
		     (MEMQ (PKT-DEST-ADDRESS PKT) (SEND *LOCAL-HOST* ':CHAOS-ADDRESSES))))
	 (OTHER-ADDRESS (IF TO-US
			    (PKT-SOURCE-ADDRESS PKT)
			    (PKT-DEST-ADDRESS PKT)))
	 (OTHER-HOST (NET:GET-HOST-FROM-ADDRESS OTHER-ADDRESS ':CHAOS)))
    (LIST ()
      (LIST '(:PRE-PROCESS-FUNCTION PEEK-CHAOS-PACKET-INSERT-HOSTAT)
	(TV:SCROLL-PARSE-ITEM
	  ':LEADER 4
	  `(:MOUSE-ITEM (NIL :KBD (SEND :PEEK-HOST-MENU ,OTHER-HOST TV:ITEM 0 ,INDENT)
			     :DOCUMENTATION "Menu of useful things to do to this host.")
	    :STRING ,(FORMAT NIL "~V@TPacket ~:[to~;from~] ~@[~A ~](~O)"
			     INDENT TO-US OTHER-HOST OTHER-ADDRESS))
	  (AND (NOT TO-US)
	       `(:FUNCTION ,#'PKT-TIMES-TRANSMITTED (,PKT)
			   NIL (", transmitted ~D times")))
	  (AND (NOT TO-US)
	       `(:FUNCTION ,#'PKT-TIME-TRANSMITTED (,PKT) NIL (" (at ~O)")))
	  (AND TO-US
	       (FORMAT NIL ", forwarded ~D times" (PKT-FWD-COUNT PKT)))))

      ;; Second line
      (LET ((OP (PKT-OPCODE PKT)))
       (TV:SCROLL-PARSE-ITEM
	(FORMAT NIL
		"~V@T~A (~O), ~O bytes, number ~O, acking ~O, source idx ~O, dest idx ~O"
		INDENT
		(IF ( OP DAT-OP)
		    "Data"
		    (NTH OP OPCODE-LIST))
		OP
		(PKT-NBYTES PKT)
		(PKT-NUM PKT) (PKT-ACK-NUM PKT)
		(PKT-SOURCE-INDEX-NUM PKT) (PKT-DEST-INDEX-NUM PKT))))
      (TV:SCROLL-PARSE-ITEM (FORMAT NIL "~V@T" INDENT) (PEEK-CHAOS-PKT-WORDS PKT 0 6))
      (TV:SCROLL-PARSE-ITEM (FORMAT NIL "~V@TString: " INDENT) (PEEK-CHAOS-PKT-STRING PKT)))))

(DEFUN PEEK-CHAOS-PKT-WORDS (PKT START NUMBER &AUX STRING)
  "Returns a string consisting of words from the packet."
  (SETQ STRING (FORMAT NIL "Words from ~O: " START))
  (DO ((I START (1+ I))
       (LEN (ARRAY-LENGTH PKT)))
      ((OR ( I (+ START NUMBER)) ( I LEN))
       STRING)
    (SETQ STRING
	  (STRING-APPEND STRING
			 (FORMAT NIL "~6O" (AREF PKT (+ FIRST-DATA-WORD-IN-PKT I)))
			 " "))))

;;; Boy, is this piece of shit ad hoc!!
(DEFUN PEEK-CHAOS-PKT-STRING (PKT &OPTIONAL COUNT)
  "Returns a 'safe' string as far as the scrolling stuff is concerned"
  (DO ((STRING (MAKE-ARRAY 100 ':TYPE 'ART-STRING ':FILL-POINTER 0))
       (PKT-STRING (PKT-STRING PKT))
       (CHAR)
       (I 0 (1+ I))
       (LEN (STRING-LENGTH (PKT-STRING PKT))))
      ((OR ( I LEN) (AND COUNT ( I COUNT)))
       STRING)
      (SETQ CHAR (AREF PKT-STRING I))
      (IF (AND (GRAPHIC-CHAR-P CHAR) (CHAR-NOT-EQUAL CHAR #/))
	  (ARRAY-PUSH-EXTEND STRING CHAR)
	  (ARRAY-PUSH-EXTEND STRING #/)
	  (IF (CHAR-NOT-EQUAL CHAR #/)
	      (ARRAY-PUSH-EXTEND STRING (CODE-CHAR (LOGIOR 100 (LOGAND (CHAR-CODE CHAR) 77))))
	      (ARRAY-PUSH-EXTEND STRING #/)))))

(DEFUN PEEK-CHAOS-CONN (CONN)
  "Format is:

Host <name> (<number>), <state>, local idx <n>, foreign idx <n>
Windows: local <n>, foreign offered <n>, foreign adjusted <n> (<n> available)
Received: pkt <n> (time <n>), read pkt <n>, ack pkt <n>, <n> queued
Sent: pkt <n>, ack for pkt <n>, <n> queued
"
  (LIST ()
	(TV:SCROLL-PARSE-ITEM "")
	(LIST '(:PRE-PROCESS-FUNCTION PEEK-CHAOS-CONN-INSERT-HOSTAT)
	      (TV:SCROLL-PARSE-ITEM
		':LEADER 3
		(LET ((PEEK-CHAOS-HOST (LIST -1 NIL NIL)))
		  (DECLARE (SPECIAL PEEK-CHAOS-HOST))
		  `(:MOUSE-ITEM
		     (NIL :KBD (SEND :PEEK-HOST-MENU ,(LOCF (SECOND PEEK-CHAOS-HOST)) TV:ITEM)
			  :DOCUMENTATION "Menu of useful things to do to this host.")
		     :FUNCTION ,(CLOSURE '(PEEK-CHAOS-HOST)
					 #'(LAMBDA (CONN)
					     (DECLARE (SPECIAL PEEK-CHAOS-HOST))
					     (UNLESS (= (FIRST PEEK-CHAOS-HOST)
							(PROG2 (SETF (FIRST PEEK-CHAOS-HOST)
								     (FOREIGN-ADDRESS CONN))
							       (FIRST PEEK-CHAOS-HOST)))
					       (COND ((ZEROP (FIRST PEEK-CHAOS-HOST))
						      (SETF (SECOND PEEK-CHAOS-HOST) NIL)
						      (SETF (THIRD PEEK-CHAOS-HOST) ""))
						     (T
						      (SETF (SECOND PEEK-CHAOS-HOST)
							    (FOREIGN-HOST-OBJECT CONN))
						      (SETF (THIRD PEEK-CHAOS-HOST)
							    (FORMAT NIL "Host ~@[~A ~](~O), "
								    (SECOND PEEK-CHAOS-HOST)
								    (FIRST PEEK-CHAOS-HOST))))))
					     (THIRD PEEK-CHAOS-HOST)))
		     (,CONN) NIL))
		`(:MOUSE-ITEM
		   (NIL :KBD (:EXECUTE (NIL :EVAL (PEEK-CLOSE-CONN ',CONN)))
			:DOCUMENTATION "Forcibly close this connection.")
		   :FUNCTION ,#'STATE (,CONN) NIL)
		`(:FUNCTION ,#'CONTACT-NAME (,CONN) NIL (", for ~A"))
		`(:FUNCTION ,#'LOCAL-INDEX-NUM (,CONN) NIL (", local idx ~O"))
		`(:FUNCTION ,#'FOREIGN-INDEX-NUM (,CONN) NIL (", foreign idx ~O"))))
	(TV:SCROLL-PARSE-ITEM
	  `(:FUNCTION ,#'LOCAL-WINDOW-SIZE (,CONN) NIL ("Windows: local ~D., "))
	  `(:FUNCTION ,#'OFFERED-FOREIGN-WINDOW-SIZE (,CONN) NIL ("foreign offered ~D., "))
	  `(:FUNCTION ,#'FOREIGN-WINDOW-SIZE (,CONN) NIL ("foreign adjusted ~D., "))
	  `(:FUNCTION ,#'WINDOW-AVAILABLE (,CONN) NIL ("(~D. available)")))
	(LIST `(:PRE-PROCESS-FUNCTION PEEK-CHAOS-CONN-RECEIVED-PKTS :CONNECTION ,CONN)
	      (TV:SCROLL-PARSE-ITEM
		':LEADER 1
		':MOUSE-SELF '(NIL :EVAL (TV:PEEK-MOUSE-CLICK 'SELF 0)
				   :DOCUMENTATION
				   "Insert//remove display of packets on receive list.")
		`(:FUNCTION ,#'PKT-NUM-RECEIVED (,CONN) NIL ("Received: pkt ~O"))
		`(:FUNCTION ,#'TIME-LAST-RECEIVED (,CONN) NIL (" (time ~O), "))
		`(:FUNCTION ,#'PKT-NUM-READ (,CONN) NIL ("read pkt ~O, "))
		`(:FUNCTION ,#'PKT-NUM-ACKED (,CONN) NIL ("ack pkt ~O, "))
		`(:FUNCTION ,#'READ-PKTS-LENGTH (,CONN) NIL ("~D. queued"))))
	(LIST `(:PRE-PROCESS-FUNCTION PEEK-CHAOS-CONN-SEND-PKTS :CONNECTION ,CONN)
	      (TV:SCROLL-PARSE-ITEM
		':LEADER 1
		':MOUSE-SELF '(NIL :EVAL (TV:PEEK-MOUSE-CLICK 'SELF 0)
				   :DOCUMENTATION
				   "Insert//remove display of packets on transmit list.")
		`(:FUNCTION ,#'PKT-NUM-SENT (,CONN) NIL ("Sent: pkt ~O, "))
		`(:FUNCTION ,#'SEND-PKT-ACKED (,CONN) NIL ("ack for pkt ~O, "))
		`(:FUNCTION ,#'SEND-PKTS-LENGTH (,CONN) NIL ("~D. queued"))
		(AND *ADAPTIVE-RETRANSMISSION-ENABLED*
		     `(:FUNCTION ,#'(LAMBDA (CONN)
				      (// (LSH (ROUND-TRIP-TIME CONN) *ROUND-TRIP-TIME-LSH*) 60.0))
				 (,CONN) NIL (", ~3F second measured round trip time")))))))

(DEFUN PEEK-CLOSE-CONN (CONN)
  (IF (TV:MOUSE-Y-OR-N-P (FORMAT NIL "Close ~A to ~A"
				 CONN (CHAOS:FOREIGN-HOST-OBJECT CONN)))
      (CLOSE-CONN CONN "Manual close from PEEK")))

(DEFMETHOD (:PEEK CHAOS-NETWORK) ()
  (LIST ()
	(TV:PEEK-HIDDEN-DATA
	  "Insert//remove connection list."
	  (TV:SCROLL-MAINTAIN-LIST #'(LAMBDA () *CONN-LIST*)
				   #'PEEK-CHAOS-CONN)
	  '(:FUNCTION (LAMBDA () (LENGTH *CONN-LIST*)) () NIL ("  ~D active connections:")))
	(TV:SCROLL-PARSE-ITEM "")
	(TV:PEEK-HIDDEN-DATA
	  "Insert//remove meters."
	  (LIST ()
		(TV:SCROLL-PARSE-ITEM "")
		(TV:SCROLL-MAINTAIN-LIST #'(LAMBDA () *CHAOS-METERS*)
					 #'TV:PEEK-DISPLAY-COUNTER))
	  "  Meters:")
	(TV:SCROLL-PARSE-ITEM "")
	(TV:PEEK-HIDDEN-DATA
	  "Insert//remove routing table."
	  (LIST ()
		(TV:SCROLL-PARSE-ITEM "")
		(TV:SCROLL-PARSE-ITEM "Subnet	    Route		Cost")
		(TV:SCROLL-MAINTAIN-LIST
		  #'(LAMBDA () 0)
		  #'(LAMBDA (SUBNET)
		      (TV:SCROLL-PARSE-ITEM
			`(:STRING ,(FORMAT NIL "~O" SUBNET) 8)
			`(:FUNCTION PEEK-CHAOS-ROUTING-GATEWAY-NUMBER (,SUBNET) 8.)
			`(:FUNCTION PEEK-CHAOS-ROUTING-GATEWAY-NAME (,SUBNET) 16.)
			`(:FUNCTION AREF (,*ROUTING-TABLE-COST* ,SUBNET) NIL ("~D."))))
		  NIL
		  #'(LAMBDA (SUBNET)
		      (LET ((N-SUBNETS (ARRAY-LENGTH *ROUTING-TABLE-COST*)))
			;; Find next subnet to which we have a route
			(LOOP UNLESS (< SUBNET N-SUBNETS)
			      RETURN (DECF SUBNET)
			      UNTIL (OR (NOT (FIXP (AREF *ROUTING-TABLE* SUBNET)))
					(< (AREF *ROUTING-TABLE-COST* SUBNET)
					   MAXIMUM-ROUTING-COST))
			      DO (INCF SUBNET))
			;; See whether it is the last
			(VALUES SUBNET (1+ SUBNET)
				(LOOP FOR SUBNET FROM (1+ SUBNET) BELOW N-SUBNETS
				      NEVER (OR (NOT (FIXP (AREF *ROUTING-TABLE* SUBNET)))
						(< (AREF *ROUTING-TABLE-COST* SUBNET)
						   MAXIMUM-ROUTING-COST))))))))
	  "  Routing table:")))

(DEFUN PEEK-CHAOS-ROUTING-GATEWAY-NUMBER (SUBNET)
  (IF (LOOP FOR INTERFACE IN NETI:*INTERFACES*
	       AS ADDR = (SEND INTERFACE ':PROTOCOL-ADDRESS *LOCAL-CHAOSNET*)
	       THEREIS (AND ADDR (= SUBNET (LDB (BYTE 8. 8.) ADDR))))
      ""
      (FORMAT NIL "~6O" (AREF *ROUTING-TABLE* SUBNET))))

(DEFUN PEEK-CHAOS-ROUTING-GATEWAY-NAME (SUBNET &AUX HOST)
  (COND ((LOOP FOR INTERFACE IN NETI:*INTERFACES*
	       AS ADDR = (SEND INTERFACE ':PROTOCOL-ADDRESS *LOCAL-CHAOSNET*)
	       THEREIS (AND ADDR (= SUBNET (LDB (BYTE 8. 8.) ADDR))))
	 "direct")
	((ZEROP (SETQ HOST (AREF *ROUTING-TABLE* SUBNET)))
	 "No route")
	((SETQ HOST (NET:GET-HOST-FROM-ADDRESS HOST ':CHAOS))
	 (SEND HOST ':NAME))
	(T "Unknown")))

(DEFMETHOD (:PEEK-HOST-MENU-CHOICES CHAOS-NETWORK) (HOST)
  (AND (SEND HOST ':NETWORK-TYPEP ':CHAOS)	;just to make sure
       ;; These only apply to hosts on the chaosnet
       `(("Hostat One" :VALUE (,SELF HOSTAT-ONE)
	  :DOCUMENTATION
	  "Show Hostat for selected host in typeout window.")
	 ("Hostat All" :VALUE (,SELF HOSTAT-ALL)
	  :DOCUMENTATION "Show Hostat for all hosts in typeout window.")
	 ("Insert Hostat" :VALUE (,SELF HOSTAT-INSERT)
	  :DOCUMENTATION
	  "Insert static Hostat for selected host in the display.")
	 ("Remove Hostat" :VALUE (,SELF HOSTAT-REMOVE)
	  :DOCUMENTATION "Remove static Hostat."))))

(DEFMETHOD (:DO-PEEK-HOST-MENU-CHOICE CHAOS-NETWORK)
	   (PEEK-INSTANCE CHOICE HOST ITEM
			  &OPTIONAL (OFFSET 0) &REST ADDITIONAL-STUFF)
  (SELECTQ CHOICE
    (HOSTAT-ONE (HOSTAT-INTERNAL HOST))
    (HOSTAT-ALL (HOSTAT-INTERNAL))
    ((HOSTAT-INSERT HOSTAT-REMOVE)
     (SETF (ARRAY-LEADER ITEM (+ TV:SCROLL-ITEM-LEADER-OFFSET OFFSET))
	   (EQ CHOICE 'HOSTAT-INSERT))
     (SETF (ARRAY-LEADER ITEM (+ TV:SCROLL-ITEM-LEADER-OFFSET OFFSET 1)) HOST)
     (DOTIMES (I (LENGTH ADDITIONAL-STUFF))
       (SETF (ARRAY-LEADER ITEM (+ TV:SCROLL-ITEM-LEADER-OFFSET OFFSET I 2))
	     (NTH I ADDITIONAL-STUFF)))
     (SEND PEEK-INSTANCE ':SET-NEEDS-REDISPLAY T))))

(DEFUN PEEK-CHAOS-CONN-INSERT-HOSTAT (ITEM &AUX HOST)
  "A pre-process function to insert/remove a hostat from the display."
  (COND ((ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM)) TV:SCROLL-ITEM-LEADER-OFFSET)
	 ;; Want a hostat, make sure it's there and for the right host
	 (IF (AND (EQ (SETQ HOST (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM))
					       (1+ TV:SCROLL-ITEM-LEADER-OFFSET)))
		      (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM))
				    (+ TV:SCROLL-ITEM-LEADER-OFFSET 2)))
		  (CDDR ITEM))
	     NIL
	     (RPLACD (CDR ITEM)
		     (PEEK-CHAOS-HOSTAT HOST 1))
	     (SETF (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM))
				 (+ TV:SCROLL-ITEM-LEADER-OFFSET 2)) HOST)))
	(T (RPLACD (CDR ITEM) NIL)
	   (SETF (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM))
			       (+ TV:SCROLL-ITEM-LEADER-OFFSET 2)) NIL))))

(DEFUN PEEK-CHAOS-PACKET-INSERT-HOSTAT (ITEM &AUX HOST SI)
  "A pre-process function to insert/remove a hostat from the display."
  (COND ((ARRAY-LEADER (SETQ SI (FIRST (TV:SCROLL-ITEMS ITEM))) TV:SCROLL-ITEM-LEADER-OFFSET)
	 ;; Want a hostat, make sure it's there and for the right host
	 (IF (AND (EQ (SETQ HOST (ARRAY-LEADER SI (1+ TV:SCROLL-ITEM-LEADER-OFFSET)))
		      (ARRAY-LEADER SI (+ TV:SCROLL-ITEM-LEADER-OFFSET 3)))
		  (CDDR ITEM))
	     NIL
	     (RPLACD (CDR ITEM)
		     (PEEK-CHAOS-HOSTAT HOST
					(1+ (ARRAY-LEADER SI
							  (+ TV:SCROLL-ITEM-LEADER-OFFSET 2)))))
	     (SETF (ARRAY-LEADER SI (+ TV:SCROLL-ITEM-LEADER-OFFSET 3)) HOST)))
	(T (RPLACD (CDR ITEM) NIL)
	   (SETF (ARRAY-LEADER SI (+ TV:SCROLL-ITEM-LEADER-OFFSET 3)) NIL))))

(DEFVAR *PEEK-HOSTAT-LIST*)
(DEFVAR *PEEK-HOSTAT-STRING*)
(DEFVAR *PEEK-HOSTAT-INDENT*)

(DEFUN PEEK-CHAOS-HOSTAT (HOST *PEEK-HOSTAT-INDENT* &OPTIONAL PKT
			  &AUX (*PEEK-HOSTAT-LIST* NIL) (*PEEK-HOSTAT-STRING* NIL))
  (COND ((OR PKT (SETQ PKT (GET-HOST-STATUS-PACKET HOST)))
	 (PEEK-HOSTAT-STREAM ':TYO #\CR)
	 (HOSTAT-HEADING 'PEEK-HOSTAT-STREAM)
	 (HOSTAT-FORMAT-ANS (PKT-SOURCE-ADDRESS PKT) PKT 'PEEK-HOSTAT-STREAM)
	 ;; Parse the strings into scroll items, removing any blank lines
	 (SETQ *PEEK-HOSTAT-LIST* (NREVERSE *PEEK-HOSTAT-LIST*))
	 (DO ((L *PEEK-HOSTAT-LIST* (CDR L)))
	     ((NULL L) (LIST* () *PEEK-HOSTAT-LIST*))
	   (IF (STRING-SEARCH-NOT-CHAR #/  (CAR L))
	       (RPLACA L (TV:SCROLL-PARSE-ITEM (CAR L)))
	       (SETQ *PEEK-HOSTAT-LIST* (DELQ (CAR L) *PEEK-HOSTAT-LIST*)))))
	(T (NCONS (TV:SCROLL-PARSE-ITEM "Host data unavailable")))))

(DEFUN PEEK-HOSTAT-STREAM (OP &OPTIONAL ARG1 &REST REST)
  (SELECTQ OP
    (:WHICH-OPERATIONS '(:TYO :READ-CURSORPOS :SET-CURSORPOS))
    (:TYO
     (COND ((CHAR= ARG1 #\CR)
	    (AND *PEEK-HOSTAT-STRING*
		 (PUSH *PEEK-HOSTAT-STRING* *PEEK-HOSTAT-LIST*))
	    (SETQ *PEEK-HOSTAT-STRING* (MAKE-ARRAY 50. ':TYPE 'ART-STRING ':FILL-POINTER 0))
	    (PEEK-HOSTAT-STREAM ':SET-CURSORPOS *PEEK-HOSTAT-INDENT*))
	   (T
	    (ARRAY-PUSH-EXTEND *PEEK-HOSTAT-STRING* ARG1))))
    (:READ-CURSORPOS (STRING-LENGTH *PEEK-HOSTAT-STRING*))
    (:SET-CURSORPOS
     (LET ((SPACES (- ARG1 (STRING-LENGTH *PEEK-HOSTAT-STRING*))))
       (AND (> SPACES 0)
	    (DOTIMES (I SPACES) (PEEK-HOSTAT-STREAM ':TYO #\SPACE)))))	      
    (T (STREAM-DEFAULT-HANDLER 'PEEK-HOSTAT-STREAM OP ARG1 REST))))



(DEFMETHOD (:SERVER-CONNECTION-MENU-CHOICES CHAOS-NETWORK) ()
  '(("Close" :VALUE :CLOSE
     :DOCUMENTATION "Close connection forcibly.")
    ("Insert Detail" :VALUE :DETAIL
     :DOCUMENTATION
     "Insert detailed info about network connection.")
    ("Remove Detail" :VALUE :UNDETAIL
     :DOCUMENTATION
     "Remove detailed info from Peek display.")))

(DEFMETHOD (:DO-SERVER-CONNECTION-MENU-CHOICE CHAOS-NETWORK)
	   (PEEK-INSTANCE CHOICE CONN ITEM)
  (SELECTQ CHOICE
    (:CLOSE      (PEEK-CLOSE-CONN CONN))
    (:DETAIL     (PROGN (STORE-ARRAY-LEADER CONN ITEM (+ 4 TV:SCROLL-ITEM-LEADER-OFFSET))
			(STORE-ARRAY-LEADER T ITEM (+ 5 TV:SCROLL-ITEM-LEADER-OFFSET))))
    (:UNDETAIL   (PROGN (STORE-ARRAY-LEADER NIL ITEM (+ 4 TV:SCROLL-ITEM-LEADER-OFFSET))
			(STORE-ARRAY-LEADER NIL ITEM (+ 5 TV:SCROLL-ITEM-LEADER-OFFSET))))
    )
  (SEND PEEK-INSTANCE ':SET-NEEDS-REDISPLAY T))




(DEFUN PEEK-CHAOS-CONN-RECEIVED-PKTS (ITEM &OPTIONAL (INDENT 0) &AUX CONN)
  "Show/unshow the received pkts of the connection"
  (OR (SETQ CONN (GET (LOCF (TV:SCROLL-FLAGS ITEM)) ':CONNECTION))
      (FERROR NIL "~S has no associated connection, can't display packets." ITEM))
  (COND ((NOT (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM)) TV:SCROLL-ITEM-LEADER-OFFSET))
	 ;; Want to leave state alone
	 )
	((CDR (TV:SCROLL-ITEMS ITEM))
	 ;; Remove display
	 (RPLACD (TV:SCROLL-ITEMS ITEM) NIL))
	(T
	 ;; Add display
	 (RPLACD (TV:SCROLL-ITEMS ITEM)
		 (NCONS
		   (TV:SCROLL-MAINTAIN-LIST `(LAMBDA () ',(READ-PKTS CONN))
					 `(LAMBDA (X)
					    (PEEK-CHAOS-PACKET-ITEM X ,(+ INDENT 2)))
					 NIL
					 #'(LAMBDA (STATE)
					     (PROG ()
					       (RETURN (VALUES STATE (PKT-LINK STATE)
							       (MEMQ (PKT-LINK STATE)
								     '(NIL T)))))))))))
  (SETF (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM)) TV:SCROLL-ITEM-LEADER-OFFSET) NIL))

(DEFUN PEEK-CHAOS-CONN-SEND-PKTS (ITEM &OPTIONAL (INDENT 0) &AUX CONN)
  "Show/unshow the send pkts of the connection"
  (UNLESS (SETQ CONN (GET (LOCF (TV:SCROLL-FLAGS ITEM)) ':CONNECTION))
    (FERROR NIL "~S has no associated connection, can't display packets." ITEM))
  (COND ((NOT (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM)) TV:SCROLL-ITEM-LEADER-OFFSET))
	 ;; Want to leave state alone
	 )
	((CDR (TV:SCROLL-ITEMS ITEM))
	 ;; Remove display
	 (RPLACD (TV:SCROLL-ITEMS ITEM) NIL))
	(T
	 ;; Add display
	 (RPLACD (TV:SCROLL-ITEMS ITEM)
		 (NCONS
		   (TV:SCROLL-MAINTAIN-LIST `(LAMBDA () (SEND-PKTS ',CONN))
					 `(LAMBDA (X)
					    (PEEK-CHAOS-PACKET-ITEM X ,(+ INDENT 2)))
					 NIL
					 #'(LAMBDA (STATE)
					     (PROG ()
					       (RETURN (VALUES STATE (PKT-LINK STATE)
							       (MEMQ (PKT-LINK STATE)
								     '(NIL T)))))))))))
    (SETF (ARRAY-LEADER (FIRST (TV:SCROLL-ITEMS ITEM)) TV:SCROLL-ITEM-LEADER-OFFSET) NIL))


#+3600
(DEFMETHOD (:PEEK NETI:3600-ETHERNET-INTERFACE) ()
  (APPEND (TV:PEEK-NETWORK-INTERFACE SELF)
    (LIST
      (TV:SCROLL-PARSE-ITEM "")
      (TV:SCROLL-PARSE-ITEM "Microcoded interface meters")
      (TV:SCROLL-MAINTAIN-LIST #'(LAMBDA () NETI:*MICROCODED-INTERFACE-METERS*)
			       #'TV:PEEK-DISPLAY-COUNTER))))

#+CADR
(DEFMETHOD (:PEEK NETI:UNIBUS-INTERFACE) ()
  (APPEND (TV:PEEK-NETWORK-INTERFACE SELF)
    (LIST (TV:SCROLL-MAINTAIN-LIST #'(LAMBDA ()
				       '(:ABORT-COUNT :LOST-COUNT
					 :OTHER-DISCARD-COUNT :BAD-BIT-COUNT-COUNT
					 :BAD-CRC-1-COUNT :BAD-CRC-2-COUNT :BAD-DEST-COUNT))
				   `(LAMBDA (MESSAGE)
				      (TV:PEEK-DISPLAY-COUNTER-INTERNAL
					MESSAGE ',SELF))))))
