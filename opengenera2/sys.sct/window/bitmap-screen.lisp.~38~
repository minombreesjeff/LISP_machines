;;; -*- Mode: LISP; Syntax: Zetalisp; Package: TV; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; A screen type that uses an arbitrary bitmap as its bits, not
;;; necessarily tied to any special hardware.
(defflavor bitmap-screen-mixin ()
	   (essential-set-edges)
  (:required-flavors basic-screen)
  (:default-init-plist
    :superior nil
    :expose-p t
    :bits-per-pixel nil
    :property-list nil)
  (:init-keywords :expose-p))

(defmethod (screen-has-blinker-timer-p bitmap-screen-mixin) () nil)

(defflavor hardware-bitmap-screen-mixin () (bitmap-screen-mixin)
  (:required-flavors screen)
  (:default-init-plist
    :buffer nil))

(defmethod (screen-raster-height bitmap-screen-mixin) ()
  height)

;;; Dummies so color protocols work ok.
(defmethod (:control bitmap-screen-mixin) ()
  nil)
(defmethod (:new-control bitmap-screen-mixin) (&optional ignore)
  nil)
(defmethod (:copy-control-image bitmap-screen-mixin) (&rest ignore)
  nil)
(defmethod (:control-image bitmap-screen-mixin) ()
  nil)
(defmethod (:make-control-image bitmap-screen-mixin) (&rest ignore)
  nil)

;;; Never visible at all.
(defmethod (:visible-size bitmap-screen-mixin :default) (&optional without-line-index-pan-zoom)
  (ignore without-line-index-pan-zoom)
  (values 0 0))

;;;Use this to copy to a real screen.
(defmethod (:bitblt-to-sheet bitmap-screen-mixin) (alu w h x y sh sx sy)
  (let* ((x (+ (max x 0) (sheet-inside-left)))
	 (y (+ (max y 0) (sheet-inside-top)))
	 (w (min (abs w) (- (sheet-inside-right) x)))
	 (h (min (abs h) (- (sheet-inside-bottom) y))))
    (send sh :bitblt alu w h tv:screen-array x y sx sy)
    ))

(defmethod (:status bitmap-screen-mixin) ()
  (if exposed-p :exposed :deexposed))

(defmethod (:set-status bitmap-screen-mixin) (new-status)
  (cl:ecase new-status
    (:selected nil) ;can't select
    ((:exposed :exposed-in-superior)
     (send self :expose))
    ((:deexposed :dectivated)
     (send self :deexpose)
     )))
 
(defwhopper (:init bitmap-screen-mixin) (plist)
  
  (setq screen self		;; I am my own screen
	superior nil)		;; and I have no superior!
  (continue-whopper plist)
  (when (get plist :expose-p)
    (send self :expose)))

(defmethod (:init hardware-bitmap-screen-mixin :before) (ignore)
  
  (if buffer
      (unless bits-per-pixel (setq bits-per-pixel (array-element-size buffer)))
      
      (setq buffer (make-sheet-bit-array self width height))
      )
  
  (when (and (arrayp buffer)
	     (= 2 (array-#-dims buffer)))
    (multiple-value-bind (w h)
	(decode-raster-array buffer)
      (unless width (setq width w))
      (unless height (setq height h))))
  )


(defmethod (:create-screen-array hardware-bitmap-screen-mixin) (w h array)

  (let* ((conformally (and (arrayp array) (= (array-#-dims array) 2))))
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")    ;make the raster array, but don't set the associated sheet yet
0    (make-raster-array
      w h
      :type (sheet-array-type self)
      :named-structure-symbol 'sheet-raster
      :leader-length sheet-raster-leader-length
      :displaced-to array
      :displaced-conformally conformally
      :displaced-index-offset (if conformally 0 nil))
    ))

(defmethod (:adjust-screen-array hardware-bitmap-screen-mixin) (array new-pointer)

  (when (and (arrayp new-pointer)
	     (= 2 (array-#-dims new-pointer)))
    (multiple-value-bind (owidth oheight)
	(decode-raster-array new-pointer)
      (grow-bit-array new-pointer width
		      height width
		      owidth oheight
		      erase-aluf)))

  (send screen :inferior-screen-array-adjusted self array width height new-pointer 0 0)

  (when (eq array screen-array)
    (adjust-inferior-screen-arrays self array 0 0))
  )

(defflavor color-bitmap-mixin () (multi-bit-screen-mixin))

(defmethod (:figure-usable-color-parameters color-bitmap-mixin)
       (write-mask data alu &optional type array scr-array)
  (color:default-figure-usable-color-parameters write-mask data alu type array scr-array))

(defmethod (:hardware-control-locs color-bitmap-mixin) ()
  nil)


(defflavor bitmap-mixin () ())

(defmethod (roving-bitmap-p bitmap-mixin) () nil)

(defmethod (:activate bitmap-mixin) ()
  nil)
(defmethod (:deactivate bitmap-mixin) ()
  nil)

(defmethod (:print-self bitmap-mixin) (stream ignore slashify-p)
  (si:printing-random-object (self stream :no-pointer)	;Do %POINTER explicitly
    (format stream "~A " (send self :name))
    (when slashify-p
      (format stream "~D,~D x ~D,~A ~\si:address\"
	    (send self :width)
	    (send self :height)
	    (send self :bits-per-pixel)
	    (if (roving-bitmap-p self) " adjustable size " " fixed size ")
	    (%pointer self))
    )))



;;;; with-output-to-bitmap, with-output-to-bitmap-stream

;;; These allow an arbitrary imaging area, by intercepting graphics messages and moving
;;; the bitmap so that transformed output coordinates are always positive.  In this way,
;;; they work sort of like the viewport part of dynamic windows, with the history being
;;; the total bitmap.


(defflavor roving-bitmap-mixin
	((x-adjust nil)
	 (y-adjust nil)
	 (allocated-left nil)
	 (allocated-top nil)
	 (allocated-right nil)
	 (allocated-bottom nil)
	 (adjust-p t))
	()
  (:required-flavors graphics-mixin bitmap-screen-mixin))

(defmethod (roving-bitmap-p roving-bitmap-mixin) () adjust-p)

(defwhopper (:change-of-size-or-margins roving-bitmap-mixin) (&rest args)
  ;catch user specified set-size
  (let ((val (lexpr-continue-whopper args)))
    (when adjust-p
      (setq x-adjust nil
	    y-adjust nil))
    val))


(defmethod (:convert-to-absolute-coordinates roving-bitmap-mixin) (x y ignore)
  (when adjust-p
    (incf x x-adjust)
    (incf y y-adjust))
  (values x y))

(defmethod (:convert-to-relative-coordinates roving-bitmap-mixin) (x y ignore)
  (when adjust-p
    (decf x x-adjust)
    (decf y y-adjust))
  (values x y))


(defmethod (:reset roving-bitmap-mixin)
	   (&key (for-stream nil)
		 (graphics-transform (if for-stream
					 (graphics::stream-transform for-stream)
					 graphics:*identity-transform*))
		 width height bits-per-pixel fixed-size)
  (ignore for-stream width height bits-per-pixel)
  (send self :clear-window)
  (graphics::drawing-state-initialize (graphics::get-drawing-state self) graphics-transform)
  (setq x-adjust nil
	y-adjust nil
	adjust-p (not fixed-size)))	;Cannot do this in :init because of :draw-rectangle in :expose.

(defmethod (:bitmap-and-edges roving-bitmap-mixin) ()
  (declare (values bitmap origin-x origin-y left top right bottom))
  (if (and x-adjust y-adjust)
      (values screen-array x-adjust y-adjust
	      allocated-left allocated-top allocated-right allocated-bottom)
      ;; Nothing ever output
      (values screen-array 0 0 0 0 0 0)))


(defmethod (:assure-room-for-output roving-bitmap-mixin) (left top right bottom)
  ;; This is the amount of room we leave outside the drawn in area if we
  ;; are ever forced to resize, since that's a slow operation.  Perhaps this should
  ;; be a fraction of the current size?
  (when adjust-p
    (let ((space-margin 100))

      (letf ((adjust-p nil))			;In case of :draw-rectangle while sizing.
	(cond ((not x-adjust)			;First time, nothing drawn yet
	       (let ((need-width (- right left))
		     (need-height (- bottom top)))
		 (when (or (> need-width width) (> need-height height))
		   (send self :set-size (if (> need-width width)
					    (+ need-width space-margin space-margin)
					    width)
			 (if (> need-height height)
			     (+ need-height space-margin space-margin)
			     height)))
		 ;; Distribute available extra space evenly around the drawn area, except
		 ;; don't move the origin away from (0,0) unless we have to
		 (let ((x-origin (- left (floor (- width need-width) 2)))
		       (y-origin (- top (floor (- height need-height) 2))))
		   (setq x-adjust (if (minusp left) x-origin (max x-origin 0))
			 y-adjust (if (minusp top) y-origin (max y-origin 0)))))
	       (setq allocated-left left
		     allocated-top top
		     allocated-right right
		     allocated-bottom bottom)
	       )
	      (t

	       (let* ((a-left allocated-left)
		      (a-top allocated-top)
		      (a-bottom allocated-bottom)
		      (a-right allocated-right)
		      (x-a x-adjust)
		      (y-a y-adjust)
		      (test-left (min left x-a))
		      (test-top (min top y-a))
		      (new-left (min left a-left))
		      (new-top (min top a-top))
		      (new-right (max right a-right))
		      (new-bottom (max bottom a-bottom)))

		 (when (or ( x-a test-left)
			   ( y-a test-top)
			   (< (+ x-a width) new-right)
			   (< (+ y-a height) new-bottom))
		   ;; Need a bigger area.  Must save the old bits.  This is true even if just
		   ;; moving the right and bottom, since the window system set-size will erase
		   ;; the old bits in the process of farting around with exposure.
		   
		   (let* ((need-width (- new-right new-left))
			  (need-height (- new-bottom new-top))
			  (allocated-width (- a-right a-left))
			  (round-to (// 32. (si:array-element-byte-size tv:screen-array)))
			  (rounded-width (* (ceiling allocated-width round-to) round-to))
			  (allocated-height (- a-bottom a-top)))

		     (with-temporary-sheet-bit-raster
		       (save self rounded-width allocated-height)
		       (with-screen-controller-lock (screen)
			 (sheet-is-prepared (self)
			   (sheet-bitblt alu-seta
					 allocated-width allocated-height
					 nil
					 (- a-left x-adjust)
					 (- a-top y-adjust)
					 save 0 0)))

		       (send self :set-size
			     (if (> need-width width)
				 (+ need-width space-margin space-margin)
				 width)
			     (if (> need-height height)
				 (+ need-height space-margin space-margin)
				 height))

		       ;; don't move the origin away from (0,0) unless we have to
		       (let ((x-origin (- new-left 
					  (floor (- width need-width) 2)))
			     (y-origin (- new-top
					  (floor (- height need-height) 2))))

			 (setq x-adjust (if (minusp new-left) x-origin (max x-origin 0))
			       y-adjust (if (minusp new-top) y-origin (max y-origin 0))))

		       (send self :clear-window)
		       (with-screen-controller-lock (screen)
			 (sheet-is-prepared (self)
			   (sheet-bitblt alu-seta allocated-width allocated-height
					 save 0 0
					 nil
					 (- a-left x-adjust)
					 (- a-top y-adjust))))
		       )))

		 (setq allocated-left new-left
		       allocated-top new-top
		       allocated-right new-right
		       allocated-bottom new-bottom)))))
      )

	       ))

#||
(defvar rects nil)
(defun test-roving-bitmap
       (&key (n 10)
	(rects )
	(window)
	(max-size (if window
		      (// (min (send window :inside-width)(send window :inside-height)) 2)
		      200)))
  (let* ((rectangles (or rects
	   (loop repeat n
		 with half-size = (// max-size 2)
		 as left = (- (random max-size) half-size)
		 as top = (- (random max-size) half-size)
		 as right = (+ (random max-size) left)
		 as bottom = (+ (random max-size) top)
		 collect (list left top right bottom))))
	 (errors 0))
    (setq tv:rects rectangles)
    (destructuring-bind (minl mint maxr maxb) (first rectangles)
      (multiple-value-bind (bitmap left top right bottom)
	  (with-output-to-bitmap (s)
	    (loop for (left top right bottom) in rectangles
		  do (setq minl (min minl left))
		     (setq mint (min mint top))
		     (setq maxb (max maxb bottom))
		     (setq maxr (max maxr right))
		     (graphics:draw-rectangle left top right bottom
					      :stream s
					      :alu tv:alu-xor)))
	(when (and window (> (- maxr minl) 0)(> (- maxb mint) 0))
	  (send window :clear-window)
	  (send window :bitblt tv:alu-seta (- right left)(- bottom top) bitmap 0 0 0 0)
	  (loop for (r-l r-t r-r r-b) in rectangles do
	    (graphics:draw-rectangle (- r-l left)(- r-t top)(- r-r left)(- r-b top)
				     :stream window
				     :alu tv:alu-xor))
	  (unless (eql (- maxr minl)(- right left))
	    (incf errors)
	    (format t "width should be ~A is ~A" (- maxr minl)(- right left)))
	  (unless (eql (- maxb mint)(- bottom top))  
	    (incf errors)
	    (format t "height should be ~A is ~A" (- maxb mint)(- bottom top)))

	  (tv:with-bit-array
	    window :input
	    #'(lambda (raster index span)
		(let ((raster raster))
		  (declare (sys:array-register-1d raster))
		  (Loop repeat (- maxb mint) 
			as idx from index by span
			do
		    (loop repeat (- maxr minl)
			  as i from idx
			  as v = (aref raster i)
			  unless (zerop v) do (incf errors) (dbg))
			finally (unless (zerop errors) (ferror "~D errors" errors))
				)))
	    :x-offset (tv:sheet-inside-left window)
	    :y-offset (tv:sheet-inside-top window)
	    :width (- maxr minl)
	    :height (- maxb mint))
	  )))))

||#

;;; Prevent line exceptions, always.
(defmethod (:tyo roving-bitmap-mixin :before) (char)
  (multiple-value-bind (x y)
      (send self :read-cursorpos)
    (send self :assure-room-for-output x y
	  (+ x (send self :character-width char)) (+ y tv:current-line-height))))

(defmethod (:string-out roving-bitmap-mixin :before) (string &optional start end)
  (multiple-value-bind (x y)
      (send self :read-cursorpos)
    (multiple-value-bind (nil nil max-x nil total-height)
	(send self :string-length string start end nil nil x)
    (send self :assure-room-for-output x y max-x (+ y total-height)))))

(defmethod (:end-of-line-exception roving-bitmap-mixin) ()
  (cl:cerror "Continue anyway"
	     "The bitmap stream should never get this exception."))

(defmethod (:end-of-page-exception roving-bitmap-mixin) ()
  (cl:cerror "Continue anyway"
	     "The bitmap stream should never get this exception."))

(defwhopper (:set-cursorpos roving-bitmap-mixin) (x y &optional (unit :pixel))
  (cl:ecase unit
    (:pixel )
    (:character
      (when x (setq x (* x tv:char-width)))
      (when y (setq y (* y tv:line-height)))))
  (multiple-value-bind (ox oy)
      (send self :read-cursorpos)
    (unless x (setq x ox))
    (unless y (setq y oy)))
  (send self :assure-room-for-output x y x (+ y tv:current-line-height))
  (multiple-value (x y) (send self :convert-to-relative-coordinates x y nil))
  (continue-whopper x y :pixel))

(defwhopper (:read-cursorpos roving-bitmap-mixin) (&optional (unit :pixel))
  (multiple-value-bind (x y)
      (continue-whopper :pixel)
    (cl:ecase unit
      (:pixel )
      (:character
	(setq x (floor x tv:char-width)
	      y (floor y tv:line-height))))
    (when x-adjust
      (multiple-value (x y) (send self :convert-to-absolute-coordinates x y nil)))
    (values x y)))

(defmethod (:increment-cursorpos roving-bitmap-mixin) (dx dy &optional (unit :pixel))
  (multiple-value-bind (x y)
      (send self :read-cursorpos unit)
    (incf x dx) (incf y dy)
    (send self :set-cursorpos x y unit)))

;;; Allow use of the grapher, since we can move the cursor anyplace on an infinite plane.
(defmethod (:real-set-cursorpos roving-bitmap-mixin) () t)

(defmethod (:string-out-explicit-within-boxes roving-bitmap-mixin) (string box ignore)
  (multiple-value-bind (left top right bottom)
      (dw:box-edges box)
    (send self :assure-room-for-output left top right bottom)
    (dw::coordinate-convert-points self :relative :inside left top right bottom)
    (incf left tv:left-margin-size)
    (incf right tv:left-margin-size)
    (incf top tv:top-margin-size)
    (tv:prepare-sheet (self)
      (dw::do-delimited-substrings ((string) (char start-index end-index))
          (unless (= start-index end-index)
	    ;; Beats me why only the -INTERNAL version takes a style argument.
	    (setq left (send self :string-out-explicit-internal string
			     left top right
			     tv:char-aluf start-index end-index
			     tv:default-style)))
	(#\Tab
	 (incf left (tv:next-tab-distance left)))
	(#\Backspace
	 (setq left (max (- left tv:char-width) tv:left-margin-size))))))
  string)

(defresource bitmap-stream (&key (width 1024) (height 512) (bits-per-pixel 1))
  :constructor (make-instance (if (= bits-per-pixel 1) 'roving-bitmap 'roving-color-bitmap)
			      :bits-per-pixel bits-per-pixel
			      :width width :height height))


(defun allocate-bitmap-stream (&rest args
			       &key for-stream host-allowed 
			       width height bits-per-pixel fixed-size
			       &allow-other-keys)
  (declare (arglist &key for-stream host-allowed
			 width height bits-per-pixel graphics-transform))
  (let ((screen (and for-stream (send-if-handles for-stream :screen))))
    (si:with-rem-keywords (some-args args '(:host-allowed))
      (when screen
	(unless fixed-size
	  (unless width
	    (when (setq width (send-if-handles for-stream :width))
	      (setf (cl:getf some-args :width) width)))
	  (unless height
	    (when (setq height (send-if-handles for-stream :height))
	      (setf (cl:getf some-args :height) height))))
	(unless bits-per-pixel
	  (setq bits-per-pixel (send screen :bits-per-pixel))
	  (setf (cl:getf some-args :bits-per-pixel) bits-per-pixel)))
      (or (and screen host-allowed
	       (lexpr-send-if-handles screen :screen-allocate-bitmap-stream some-args))
	  (let ((bitmap-stream (cl:apply #'allocate-resource 'bitmap-stream
					 :allow-other-keys t some-args)))
	    (lexpr-send bitmap-stream :reset some-args)
	    bitmap-stream)))))


(defmethod (deallocate-bitmap-stream roving-bitmap-mixin) ()
  (deallocate-resource 'bitmap-stream self))

(defmacro with-output-to-bitmap-stream ((&optional stream &rest args) &body body)
  (declare (arglist (&optional stream &key for-stream host-allowed
					   width height bits-per-pixel graphics-transform)
		    &body body))
  (dw::format-output-macro-default-stream stream)
  `(let ((,stream (allocate-bitmap-stream . ,args)))
     (unwind-protect
	 (progn . ,body)
       (deallocate-bitmap-stream ,stream))))

(defun stream-bits-per-pixel (for-stream)
  (or (and for-stream
	   (let ((screen (send-if-handles for-stream :screen)))
	     (and screen (send screen :bits-per-pixel))))
      1))

(defmacro with-output-to-bitmap ((&optional stream &rest args) &body body)
  (declare (arglist (&optional stream &key for-stream host-allowed
					   width height bits-per-pixel graphics-transform)
		    &body body)
	   (values raster left top right bottom))
  (dw::format-output-macro-default-stream stream)
  `(with-output-to-bitmap-stream (,stream . ,args)
     (progn . ,body)
     (bitmap-stream-copy-bitmap ,stream)))

(defun bitmap-stream-copy-bitmap (stream)
  (declare (values raster left top right bottom))
  (multiple-value-bind (bitmap origin-x origin-y left top right bottom)
      (send stream :bitmap-and-edges)
    (let ((copy (graphics::make-raster-array-with-correct-width (- right left) (- bottom top)
		  :element-type (let ((depth (send stream :bits-per-pixel)))
				  (if (= depth 32)
				      'cl:fixnum
				      `(cl:unsigned-byte ,depth))))))
      (when (and (> right left) (> bottom top))
	(with-screen-controller-lock ((sheet-screen stream))
	  (sheet-is-prepared (stream)
	    (sheet-bitblt tv:alu-seta (- right left) (- bottom top)
			  bitmap (- left origin-x) (- top origin-y)
			  copy 0 0 stream))))
      (values copy left top right bottom))))

(defflavor bitmap-color-map-mixin
	((map-mode)
	 (map-segment-number 0)
	 (color-map-image)
	 (map-source 0)
	 (init-color-map :init-managed-color-map)
	 )
	(color:managed-map-mixin)
  :initable-instance-variables
  (:conc-name "BITMAP-")
  (:settable-instance-variables map-segment-number map-source color-map-image)
  (:required-flavors tv:bitmap)
  )

(defmethod (:color-map bitmap-color-map-mixin) ()
  color-map-image)

(defmethod (:make-color-map-image bitmap-color-map-mixin) ()
  (make-raster-array 256 4 :type 'art-fixnum))

(defmethod (:read-color-map-image bitmap-color-map-mixin)
	   (idx &optional (seg map-segment-number) (map color-map-image))
  (let ((val (raster-aref map idx seg)))
    (values (ldb (byte 10 0) val)
	    (ldb (byte 10 10) val)
	    (ldb (byte 10 20) val))))

(defmethod (:write-color-map-image bitmap-color-map-mixin)
	   (idx r g b &optional (segn map-segment-number) (map color-map-image))
  (multiple-value-bind (or og ob) (send self :read-color-map-image idx segn map)
    (setf (raster-aref map idx segn)
	  (dpb b (byte 10 20)
	       (dpb g (byte 10 10)
		    r)))
    (values or og ob)))

(defmethod (:write-color-map bitmap-color-map-mixin) (&rest args)
  (lexpr-send self :write-color-map-image args))

(defmethod (:read-color-map bitmap-color-map-mixin) (&rest args)
  (lexpr-send self :read-color-map-image args))

(defmethod (:new-color-map bitmap-color-map-mixin) (&rest args)
  (ignore args))
	
(defmethod (:init bitmap-color-map-mixin :after) (plist)
  (setq color-map-image (send self :make-color-map-image))
  (send self :putprop :color :video)
  (send self ':set-map-mode
	(let ((mode (get plist ':map-mode)))
	  (if (or (null mode) (eq mode :default))
	      (send self :default-map-mode)
	      mode))
	(get plist ':segment-number)
	(get plist ':map-source)
	(get plist ':overlay-source)
	(send self ':control-image))
  (send self init-color-map))

(defmethod (:standardize-color-map bitmap-color-map-mixin) ()
  (send self init-color-map))

(defmethod (:default-map-mode bitmap-color-map-mixin) ()
  (if (> tv:bits-per-pixel 24.)
      :24-bit
      (if ( tv:bits-per-pixel 8)
	  :8-bit
	  :none)))

(defmethod (:map-mode bitmap-color-map-mixin) (&optional ignore)
  (values map-mode
	  map-segment-number
	  (* map-source 8)
	  (min tv:bits-per-pixel
	       (selectq map-mode (:8-bit 8) (:24-bit 32) (t tv:bits-per-pixel)))
	  0 0))

(defmethod (:set-map-mode bitmap-color-map-mixin)
	   (&optional new-map-mode new-map-segment new-map-source new-overlay-position ignore)
  new-overlay-position
  (multiple-value-bind (a b c d e f)
      (send self :map-mode)
    (when new-map-mode
      (if (member new-map-mode '(:none :8-bit :24-bit))
	  (setq map-mode new-map-mode)
	  (ferror "~a isn't a value map mode" new-map-mode)))
    (when new-map-segment
      (if ( 0 new-map-segment 3)
	  (setq map-segment-number new-map-segment)
	  (ferror "~a isn't a valid map segment number" new-map-segment)))
    (when new-map-source
      (if (and (zerop (\ new-map-source 8))
	       ( 0 new-map-source (1- tv:bits-per-pixel)))
	  (setq map-source new-map-source)
	  (ferror "~a isn't a valid map-source" new-map-source)))
    (values a b c d e f)))

(defmethod (:map-modes bitmap-color-map-mixin) ()
  '(:none :8-bit :24-bit))

(defmethod (:color-map-description bitmap-color-map-mixin) (&optional ignore)
  (when (neq map-mode :none)
    (values 256. 4 (if (eq map-mode :24-bit) :independent :dependent) :none)))

(defmethod (:pixel-positions bitmap-color-map-mixin) (&optional cont)
  (let ((map-mode  (if (memq cont (send self :map-modes)) cont (send self :map-mode cont))))
    (selectq map-mode
      (:8-bit (values (loop for i from 0 below bits-per-pixel by 8 collect i) '(0)))
      ((:none :24-bit) (values '(0) '(0)))
      (t (ferror "unexpected map mode ~A" map-mode)))))


;;;; Instantiable flavors

(defflavor bitmap () (bitmap-mixin graphics-mixin stream-mixin
		      hardware-bitmap-screen-mixin single-bit-screen-mixin screen)
  (:default-init-plist :blinker-p nil :bits-per-pixel 1))


(defflavor color-bitmap () (color-bitmap-mixin bitmap)
  (:default-init-plist :blinker-p nil :bits-per-pixel nil))

(defflavor color-bitmap-with-color-map () (bitmap-color-map-mixin color-bitmap)
  (:default-init-plist :bits-per-pixel  8))

(defflavor roving-bitmap () (roving-bitmap-mixin bitmap))

(defflavor roving-color-bitmap ((real-screen nil)) (roving-bitmap-mixin color-bitmap))

(defmethod (:reset roving-color-bitmap :after)
	   (&key (for-stream nil)
	    &allow-other-keys)
  (setq real-screen (and for-stream (send-if-handles for-stream :screen))))

(defmethod (:color-map roving-color-bitmap) ()
  (and real-screen (send-if-handles real-screen :color-map)))

(defmethod (:compute-rgb-alu roving-color-bitmap) (&rest args)
  (lexpr-send real-screen :compute-rgb-alu args))

(compile-flavor-methods bitmap color-bitmap roving-bitmap roving-color-bitmap)

(compile-flavor-methods color-bitmap-with-color-map)
