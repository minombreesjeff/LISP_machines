;;; -*- Mode: LISP; Package: CLI; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;*********************************************************************
;;; This function will decode either a source or destination array.
;;;    INPUT:
;;;       ARRAY-PTR        Array to be decoded
;;;       NEEDED?           If T then decode array, otherwise return defaults.
;;;       FORCE-1D?         Decode as a 1D array, used for array functions
;;; 
;;;    RETURNS:
;;;       BEG-ADDR         Beginning locative of first word to be processed 
;;;       BEG-BITPOS       Bit position offset within first word 
;;;       ROW-LENGTH       Row length in elements of each row or Length for 1d arrays
;;;       ROW-SPAN         Row length in words of each row 
;;;       HEIGHT           Number of rows to process, 1 if 1d array
;;;       BITS-PER-ELT     Number of bits per element, log 2

(defun bitblt-decode-array (array-ptr needed?)
  (declare (values beg-addr beg-bitpos row-length row-span height bits-per-elt valid-height))
  (when (not needed?) 
    (return-from bitblt-decode-array
      (values NIL 0 #o1000000 0 #o1000000 1)))	;Same values as microcode version
  (si:check-arg array-ptr (type-member array-ptr dtp-array) "an array")
  (setf (%block-register 1) array-ptr)
  (let* (beg-addr length
	 (beg-bitpos 0)				;Default value
	 (array-hdr (%pointer (%block-read 1 :cycle-type %memory-header)))
	 (byte-packing (%logldb array-byte-packing array-hdr))
	 (bits-per-elt (- 5 byte-packing)))
    ;; Check for short-prefix or other than 2 dimensions
    (compiler:%error-when (or (zerop (%logldb array-long-prefix-bit array-hdr))
			      ( (%logldb array-long-dimensions-field array-hdr) 2))
      (error 'array-wrong-number-of-dimensions :function 'bitblt-decode-array 
	     :array array-ptr :dimensions-expected 2 
	     :dimensions-given (array-rank array-ptr)))
    (let* ((array-length  (%block-read 1))
	   (index-offset  (%block-read 1))
	   (data-location (%block-read 1))
	   (height        (%block-read 1))
	   (row-span      (%block-read 1))
	   (row-length    (%block-read 1 :prefetch nil))
	   (valid-height height))
      (cond ((or (type-member data-location dtp-locative)
		 (type-member data-location dtp-physical-address)
		 (type-member data-location dtp-fixnum))
	     (setf length array-length)
	     (setf beg-addr data-location))
	    (T
	     (compiler:%error-unless (type-member data-location dtp-array)
               (error "BITBLT-DECODE-ARRAY encountered a malformed array"))
	     ;; Indirect array lookup
	     (multiple-value-bind (control address alength)
		 (si:displaced-array-register-values
		   0 array-hdr array-length index-offset data-location)
	       (setq beg-addr address
		     length alength
		     beg-bitpos (%fixnum-mod (lsh (ldb array-register-byte-offset control)
						  bits-per-elt) 32))
	       ;; Check to see the target array actually has enough data to cover N rows
	       (when (< length array-length)
		 (setq valid-height (floor length row-span))))))
      (setf row-span (lsh row-span bits-per-elt))	;convert to bits
      (compiler:%error-when (plusp (%fixnum-mod row-span 32))
        (error 'bitblt-array-fractional-word-width :array array-ptr))
      (values beg-addr beg-bitpos row-length
	      (%fixnum-ceiling row-span 32)
	      height bits-per-elt valid-height))))

;;;*********************************************************************
;;; Boundary checking code
;;;

;;; Error flavors not shared with A machine
 
(DEFFLAVOR BITBLT-ROW-OUT-OF-BOUNDS (ROW HEIGHT) (ERROR)
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT BITBLT-ROW-OUT-OF-BOUNDS) (STREAM)
  (FORMAT STREAM "BITBLT attempted to access row ~S of the destination array,
which is outside the bounds of 0 to ~S" ROW (1- HEIGHT)))

(DEFFLAVOR BITBLT-COLUMN-OUT-OF-BOUNDS (COLUMN WIDTH) (ERROR)
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT BITBLT-COLUMN-OUT-OF-BOUNDS) (STREAM)
  (FORMAT STREAM "BITBLT attempted to access column ~S of the destination array,
which is outside the bounds of 0 to ~S" COLUMN (1- WIDTH)))

;I guess COMPILE-FLAVOR-METHODS for these would be kind of useless, since
;the machine was working for months before anyone noticed the flavors
;weren't defined, and even then it wasn't by trying to signal them
;But let's do it anyway.  This file is loaded after all of the system
;conditions and their combined methods, so it should work.
(COMPILE-FLAVOR-METHODS BITBLT-ROW-OUT-OF-BOUNDS BITBLT-COLUMN-OUT-OF-BOUNDS)

(DEFMACRO BOUNDS-CHECK-PARAMETERS (WIDTH HEIGHT TO-X TO-Y)
  `(COND ((OR (< ,TO-Y 0) ( ,TO-Y D-VALID-HEIGHT))
	  (ERROR 'BITBLT-ROW-OUT-OF-BOUNDS ':ROW ,TO-Y ':HEIGHT D-VALID-HEIGHT))
	 ((> (+ ,TO-Y ,HEIGHT) D-VALID-HEIGHT)
	  (ERROR 'BITBLT-ROW-OUT-OF-BOUNDS ':ROW (+ ,TO-Y ,HEIGHT -1) ':HEIGHT D-VALID-HEIGHT))
	 ((OR (< ,TO-X 0) ( ,TO-X D-ROW-LENGTH))
	  (ERROR 'BITBLT-COLUMN-OUT-OF-BOUNDS
		 ':COLUMN (LSH ,TO-X (- D-BITS-PER-ELT))
		 ':WIDTH (LSH D-ROW-LENGTH (- D-BITS-PER-ELT))))
	 ((> (+ ,TO-X ,WIDTH) D-ROW-LENGTH)
	  (ERROR 'BITBLT-COLUMN-OUT-OF-BOUNDS
		 ':COLUMN (1- (LSH (+ ,TO-X  ,WIDTH) (- D-BITS-PER-ELT)))
		 ':WIDTH (LSH D-ROW-LENGTH (- D-BITS-PER-ELT))))))

(DEFMACRO BOUNDS-CHECK-POINT (X Y &OPTIONAL EXCLUSIVE-P)
  `(IF ,EXCLUSIVE-P
       (COND ((OR (< ,Y 0) (>= ,Y D-VALID-HEIGHT))
	      (ERROR 'BITBLT-ROW-OUT-OF-BOUNDS ':ROW ,Y ':HEIGHT D-VALID-HEIGHT))
	     ((OR (< ,X 0) (>= ,X D-ROW-LENGTH))
	      (ERROR 'BITBLT-COLUMN-OUT-OF-BOUNDS ':COLUMN ,X ':WIDTH D-ROW-LENGTH)))
       (COND ((OR (< ,Y 0) (> ,Y D-VALID-HEIGHT))
	      (ERROR 'BITBLT-ROW-OUT-OF-BOUNDS ':ROW ,Y ':HEIGHT D-VALID-HEIGHT))
	     ((OR (< ,X 0) (> ,X D-ROW-LENGTH))
	      (ERROR 'BITBLT-COLUMN-OUT-OF-BOUNDS ':COLUMN ,X ':WIDTH D-ROW-LENGTH)))))
;;;*********************************************************************
;;; BITBLT-Decoding macros used to support non BITBLT operations such as 
;;;   line-drawing and triangle-drawing
;;;
;;;    BITBLT-LOOP-CALL - prepare parameters and call bitblt inner loop 

;;; This macro supports both the normal B&W bitblt and the color Bitblt-Unpacked.
;;; It performs argument type- and bounds-checking, decodes the source and destination arrays,
;;; and provides special handling for reversed heights.

(defmacro with-bitblt-environment ((alu width height from-array from-x from-y
					to-array to-x to-y color?)
				   &body body)
  `(LET ((SOURCE-DEPENDENT-ALU? (SOURCE-DEPENDENT-ALU-P ,alu ,color?)))
       (MULTIPLE-VALUE-BIND (S-BEG-ADDR S-BEG-BITPOS S-ROW-LENGTH S-ROW-SPAN
			     S-HEIGHT S-BITS-PER-ELT S-VALID-HEIGHT)
	   (BITBLT-DECODE-ARRAY ,from-array SOURCE-DEPENDENT-ALU?)
	 (MULTIPLE-VALUE-BIND (D-BEG-ADDR D-BEG-BITPOS D-ROW-LENGTH D-ROW-SPAN
			       D-HEIGHT D-BITS-PER-ELT D-VALID-HEIGHT)
	     (BITBLT-DECODE-ARRAY ,to-array T)
	   (IGNORE S-BITS-PER-ELT)
	   (CHECK-TYPE ,width FIXNUM)
	   (CHECK-TYPE ,height FIXNUM)
	   ;; Convert FROM/TO-X, S/D-ROW-LENGTH to bits along with WIDTH below
	   ;; Need to consider if IDRAW functions are similarly affected.
	   ;; This is being done to allow vector-bitblt to work on non-art1b arrays
	   (WHEN (PLUSP D-BITS-PER-ELT)
	     (SETQ ,TO-X (LSH ,TO-X D-BITS-PER-ELT)
		   D-ROW-LENGTH (LSH D-ROW-LENGTH D-BITS-PER-ELT)))

	   ;; Handle negative starting coordinates using wrap-around

	   (WHEN SOURCE-DEPENDENT-ALU?		;Source dependent bounds checking
	     (WHEN (PLUSP S-BITS-PER-ELT)
	       (SETQ ,FROM-X (LSH ,FROM-X S-BITS-PER-ELT)
		     S-ROW-LENGTH (LSH S-ROW-LENGTH S-BITS-PER-ELT)))
	     (UNLESS (AND ( 0 ,FROM-X)
			  (< ,FROM-X S-ROW-LENGTH))
	       (SETQ ,FROM-X (MOD ,FROM-X S-ROW-LENGTH)))
	     (UNLESS (AND ( 0 ,FROM-Y)
			  (< ,FROM-Y S-HEIGHT))
	       (SETQ ,FROM-Y (MOD ,FROM-Y S-HEIGHT))))

	   (LET* ((,width (LSH ,width D-BITS-PER-ELT))	;IMPACT??
		  (ABS-WIDTH (ABS ,width))
		  (ABS-HEIGHT (ABS ,height))
		  (S-ROW-WORD-LENGTH (SYS:%FIXNUM-CEILING S-ROW-LENGTH 32))
		  (SOURCE-WRAPAROUND? NIL))

	     (WHEN SOURCE-DEPENDENT-ALU?
	       (WHEN (AND (> S-HEIGHT S-VALID-HEIGHT)
			  (> (+ ,FROM-Y ABS-HEIGHT) S-VALID-HEIGHT))
		 (ERROR 'BITBLT-ROW-OUT-OF-BOUNDS
			:ROW (+ ,FROM-Y ABS-HEIGHT -1) :HEIGHT S-VALID-HEIGHT))
	       (SETF SOURCE-WRAPAROUND? (LET ((H? (> (+ ,FROM-X ABS-WIDTH)
						     (SYS:%FIXNUM-MULTIPLY
						       S-ROW-WORD-LENGTH
						       32)))
					      (V? (> (+ ,FROM-Y ABS-HEIGHT) S-HEIGHT)))
					  (IF V?
					      (IF H? T :VERTICAL)
					      (IF H? :HORIZONTAL NIL)))))
	     
	     (UNLESS (OR (ZEROP ,width) (ZEROP ,height))
	       (bounds-check-parameters abs-width abs-height ,to-x ,to-y)
	       ;; Height-backwards is easy since it doesn't affect the innermost loop
	       (WHEN (MINUSP ,height)
		 (SETQ ,height (- ,height)
		       ,from-y (MOD (+ ,from-y ,height -1) S-HEIGHT)
		       ,to-y (+ ,to-y ,height -1)
		       S-ROW-SPAN (- S-ROW-SPAN)
		       D-ROW-SPAN (- D-ROW-SPAN)))
	       ,@body))))))

;;; This macro sets up the alu inner loop function cell once and 
;;; assigns it to a given variable so that it can be referred to locally
;;; rather than as a global array reference lookup.
;;; 
;;;    INPUT:
;;;       Variant        Selects which inner loop code is called, one of the following:
;;;                         :FORWARDS, :FORWARDS-WRAP, :BACKWARDS, :SINGLE
;;;       ALU            Variable representing the alu 
;;;       ALU-inner-loop Variable containing precomputed alu-function array element
;;;                        looked up using the WITH-ALU-INNER-LOOP
;;;                        to avoid repeated lookup of the function within graphics primitives

(defmacro with-alu-inner-loop ((variant alu alu-inner-loop) &body body)
  ;; Change BITBLT-INNER-LOOP-FUN call into a compile time call when real imachine available
  `(LET ((,alu-inner-loop (BITBLT-INNER-LOOP-FUN ,variant ,alu)))
     ,@body))

;;; This macro completes setup of parameters to the bitblt inner-loop function
;;; and invokes the function via the *bitblt-inner-loops* array. This must be used
;;; within a WITH-BITBLT-DECODING (ArrayFns) form or a WITH-BITBLT-ENVIRONMENT form which 
;;; provides the decoding variables expected by this macro. WITH-IDRAWING-ENVIRONMENT
;;; contains the WITH-BITBLT-DECODING form.
;;; 
;;;  INPUT:
;;;     Variant        Selects which inner loop code is called, one of the following:
;;;                       :FORWARDS, :FORWARDS-WRAP, :BACKWARDS, :SINGLE
;;;     Uses-Source?   Boolean indicating that the source parameters are needed or not
;;;                    This is T when source is NEVER used as is the case with lines/triangles
;;;     ALU            Variable representing the alu
;;;     Width          Variable representing width - 
;;;                    for :SINGLE case in BIT-funs, use D-ROW-LENGTH, otherwise WIDTH
;;; 
;;;  OPTIONS:
;;;     S-X, S-Y       Source x,y offset variables 
;;;                      only optional for :SINGLE or no source case 
;;;     D-X, D-Y       Destination x,y offset variables
;;;                      only optional for :SINGLE
;;;     ALU-inner-loop Variable containing precomputed alu-function array element
;;;                      looked up using the WITH-ALU-INNER-LOOP
;;;                      to avoid repeated lookup of the function within graphics primitives
;;;     Extra-Args     Additional args needed for the :xxx-WRAP cases require

;;; NOTE: BITBLT-SINGLE-ROW in ArrayFNS is a hardcoded :SINGLE Uses-Source=T version 
;;;    of this macro and should be changed to reflect significant modifications of this code.

(defmacro bitblt-loop-call (variant uses-source? alu width
				    &optional s-x s-y d-x d-y alu-inner-loop
				    &rest extra-args)
  (let ((single-call (equal variant :single)))

    ;; Setup local variables needed below
    ;; S-BITPOS is only needed when source is expected to be used
    ;;   It may or may not require using S-X but if defined needs to work with null source
    ;; D-BITPOS may or may not use D-X
    ;; BIT-OFFSET is only needed when source is used 

    `(LET* (,@(if uses-source?
		  `((S-BITPOS ,(if single-call
				   `(IF S-BEG-ADDR 
					(SYS:%FIXNUM-MOD
					  ,(if s-x `(+ S-BEG-BITPOS ,s-x) `S-BEG-BITPOS) 32)
					0)
				   `(SYS:%FIXNUM-MOD
				      ,(if s-x `(+ S-BEG-BITPOS ,s-x) `S-BEG-BITPOS) 32)))))
	    (D-BITPOS (SYS:%FIXNUM-MOD ,(if d-x `(+ D-BEG-BITPOS ,d-x) `D-BEG-BITPOS) 32))
	    ,@(if uses-source? `((BIT-OFFSET (- D-BITPOS S-BITPOS))))
	    (WORD-WIDTH (- (SYS:%FIXNUM-FLOOR (+ ,width D-BITPOS) 32)
			   (IF (ZEROP D-BITPOS) 0 1)))
	    (FIRST-COLUMN-MASK (IF (ZEROP D-BITPOS) 0 (LSH -1 D-BITPOS)))
	    (LAST-COLUMN-MASK (LSH -1 (- (SYS:%FIXNUM-MOD (+ ,width D-BITPOS) 32) 32))))

       ;; First and last columns are one and the same

       (WHEN (MINUSP WORD-WIDTH)
	 (SETQ WORD-WIDTH 0
	       LAST-COLUMN-MASK (LOGAND FIRST-COLUMN-MASK LAST-COLUMN-MASK)
	       FIRST-COLUMN-MASK 0))

       ;; Dispatch to inner loop dependent on particular memory reference patterns
       ;; Function cell called can be a variable for cases when the inner loop is 
       ;;     called repeatedly such as drawing y-major lines in %draw-line-internal
       ;; The :SINGLE case does not take s-row-span, d-row-span or height args as 
       ;;     it will only process a single row
       ;; BIT-OFFSET can be replaced with D-BITPOS when no source is needed

       (FUNCALL ;,(if single-call 'BL-FUNCALL-SIMPLE 'BL-FUNCALL)	;Debugging only
	        ,(if alu-inner-loop
		     alu-inner-loop
		     `(BITBLT-INNER-LOOP-FUN ,variant ,alu))
		(ldb (byte 4 0) ,alu)
		,@(if single-call
		      `(,(if uses-source?
			   `(IF S-BEG-ADDR
				(%POINTER-PLUS S-BEG-ADDR
					    ,(if (and s-x s-y)
						 `(+ (* ,s-y (ABS S-ROW-SPAN))
						     (SYS:%FIXNUM-FLOOR
						       (+ S-BEG-BITPOS ,s-x) 32))
						 `(SYS:%FIXNUM-FLOOR S-BEG-BITPOS 32)))))
			(%POINTER-PLUS D-BEG-ADDR
				    ,(if (and d-y d-x)
					 `(+ (* ,d-y (ABS D-ROW-SPAN))
					     (SYS:%FIXNUM-FLOOR (+ D-BEG-BITPOS ,d-x) 32))
					 `(SYS:%FIXNUM-FLOOR D-BEG-BITPOS 32))))

		      `(,(if uses-source?
			     `(IF S-BEG-ADDR
				  (%POINTER-PLUS S-BEG-ADDR (+ (* ,s-y (ABS S-ROW-SPAN))
							       (SYS:%FIXNUM-FLOOR
								 (+ S-BEG-BITPOS ,s-x) 32)))))
			,(if uses-source? `S-ROW-SPAN)
			(%POINTER-PLUS D-BEG-ADDR (+ (* ,d-y (ABS D-ROW-SPAN))
						  (SYS:%FIXNUM-FLOOR
						    (+ D-BEG-BITPOS ,d-x) 32)))
			D-ROW-SPAN
			HEIGHT))
		,(if uses-source? `BIT-OFFSET `D-BITPOS)
		WORD-WIDTH
		FIRST-COLUMN-MASK
		LAST-COLUMN-MASK
		;;SOURCE-OVERHANG?, dest-only == nil
		,(if uses-source?
		     `(> (SYS:%FIXNUM-MOD (+ ,width D-BITPOS) 32)
			 (SYS:%FIXNUM-MOD BIT-OFFSET 32)))
		,@extra-args))))

;;;*********************************************************************
;;; Debugging code

(defvar *bitblt-record-loop-call* nil)
(defvar *bitblt-loop-call* nil)

(defun bl-funcall (bb-fun ALU S-ROW-ADDRESS S-ROW-SPAN D-ROW-ADDRESS D-ROW-SPAN
			  HEIGHT BIT-OFFSET WORD-WIDTH
			  FIRST-COLUMN-MASK LAST-COLUMN-MASK
			  SOURCE-OVERHANG?
			  &optional S-COL-WORD S-WIDTH-WORDS S-ROW S-HEIGHT)
  (cond (s-col-word 
	  (if *bitblt-record-loop-call*
	      (setq *bitblt-loop-call*
		    (list (si:compiled-function-name-for-debugging bb-fun) ALU 
			  (si:%pointer S-ROW-ADDRESS) S-ROW-SPAN	
			  (si:%pointer D-ROW-ADDRESS) D-ROW-SPAN
			  HEIGHT BIT-OFFSET WORD-WIDTH
			  FIRST-COLUMN-MASK LAST-COLUMN-MASK
			  SOURCE-OVERHANG?
			  S-COL-WORD S-WIDTH-WORDS S-ROW S-HEIGHT)))
	  (funcall bb-fun ALU S-ROW-ADDRESS S-ROW-SPAN D-ROW-ADDRESS D-ROW-SPAN
		   HEIGHT BIT-OFFSET WORD-WIDTH
		   FIRST-COLUMN-MASK LAST-COLUMN-MASK
		   SOURCE-OVERHANG?
		   S-COL-WORD S-WIDTH-WORDS S-ROW S-HEIGHT))
	(t
	  (if *bitblt-record-loop-call*
	      (setq *bitblt-loop-call*
		    (list (si:compiled-function-name-for-debugging bb-fun) ALU 
			  (si:%pointer S-ROW-ADDRESS) S-ROW-SPAN	
			  (si:%pointer D-ROW-ADDRESS) D-ROW-SPAN
			  HEIGHT BIT-OFFSET WORD-WIDTH
			  FIRST-COLUMN-MASK LAST-COLUMN-MASK
			  SOURCE-OVERHANG?)))
	  (funcall bb-fun ALU S-ROW-ADDRESS S-ROW-SPAN D-ROW-ADDRESS D-ROW-SPAN
		   HEIGHT BIT-OFFSET WORD-WIDTH
		   FIRST-COLUMN-MASK LAST-COLUMN-MASK
		   SOURCE-OVERHANG?))))

(defun bl-funcall-simple (bb-fun ALU S-ROW-ADDRESS D-ROW-ADDRESS
				 BIT-OFFSET WORD-WIDTH
				 FIRST-COLUMN-MASK LAST-COLUMN-MASK
				 SOURCE-OVERHANG?)
  (if *bitblt-record-loop-call*
      (setq *bitblt-loop-call*
	    (list (si:compiled-function-name-for-debugging bb-fun) ALU 
		  (si:%pointer S-ROW-ADDRESS)
		  (si:%pointer D-ROW-ADDRESS)
		  BIT-OFFSET WORD-WIDTH
		  FIRST-COLUMN-MASK LAST-COLUMN-MASK
		  SOURCE-OVERHANG?)))
  (funcall bb-fun ALU S-ROW-ADDRESS D-ROW-ADDRESS
	   BIT-OFFSET WORD-WIDTH
	   FIRST-COLUMN-MASK LAST-COLUMN-MASK
	   SOURCE-OVERHANG?))

;;; The following is the hardcoded call setup for XOR-MOUSE-CURSOR in I-WIRED-CONSOLE
;;; - Major changes to the basic loop calling technology would affect it.
;;;
;;;      (let* ((d-beg-bitpos (wired-mouse-screen-buffer-bit-offset wired-mouse))
;;;  	        (d-row-span   (wired-mouse-screen-locations-per-line wired-mouse))
;;;	        (d-bitpos (sys:%fixnum-mod (+ d-beg-bitpos x) 32))
;;;	        (word-width (- (sys:%fixnum-floor (+ width d-bitpos) 32)
;;;			      (if (zerop d-bitpos) 0 1)))
;;;	        (first-column-mask (if (zerop d-bitpos) 0 (lsh -1 d-bitpos)))
;;;	        (last-column-mask (lsh -1 (- (sys:%fixnum-mod (+ width d-bitpos) 32) 32))))
;;;	(when (minusp word-width)
;;;	  (setq word-width 0
;;;		last-column-mask (logand first-column-mask last-column-mask)
;;;		first-column-mask 0))
;;;	(cli::bb-both-forwards
;;;	  boole-xor				;skip first word as array-header
;;;	  (%pointer-plus (wired-mouse-cursor-pattern wired-mouse) 1)
;;;	  1 
;;;	  (%pointer-plus (wired-mouse-screen-buffer-address wired-mouse)
;;;			   (+ (* y d-row-span) (sys:%fixnum-floor (+ d-beg-bitpos x) 32)))
;;;	    d-row-span height d-bitpos word-width first-column-mask last-column-mask
;;;	    (> (sys:%fixnum-mod (+ width d-bitpos) 32) d-bitpos))
;;;	nil)

;;;*********************************************************************
;;; I-Machine BitBLT main driver
;;;

;;; This function is the main driver which sets up the BitBLT operation and then 
;;; invokes the appropriate inner loop function according to whether or not the 
;;; operation is forwards or backwards, source-wrapping or not, and which ALU operation 
;;; is being performed. Currently only performs 1-bit pixel arrays.

(defun TV:2d-array-blt (alu nrows ncolumns
		     from-array from-row from-column
		     to-array to-row to-column)
  ;; column major order for Release 6, row major after array switchover
  (bitblt alu        #-row-major nrows    ncolumns    #+row-major nrows
	  from-array #-row-major from-row from-column #+row-major from-row
	  to-array   #-row-major to-row   to-column   #+row-major to-row))

(defun TV:bitblt (alu width height from-array from-x from-y to-array to-x to-y)
  (check-type alu (integer 0 15))
  (with-bitblt-environment (alu width height from-array from-x from-y to-array to-x to-y nil)

    (ignore d-height)
    ;; Source-wraparound case.  Backwards width is illegal.
    ;; Consider case of source-wraparound that is vertical only - add to for/backwards case ? 

    (if source-wraparound?
	(macrolet ((wrap-call (direction)
		     `(BITBLT-LOOP-CALL ,direction T ALU ABS-WIDTH
					FROM-X FROM-Y TO-X TO-Y NIL
					(SYS:%FIXNUM-FLOOR FROM-X 32)	        ;S-COL-WORD
					S-ROW-WORD-LENGTH	;S-WIDTH-WORDS
					FROM-Y	;S-ROW
					S-HEIGHT)))
	  (if (or (plusp width) (< (sys:%fixnum-floor s-row-length 32) 2))
	      (wrap-call :forwards-wrap)	; Forwards wrap case or 1-word backwards case
	      (wrap-call :backwards-wrap))	; Backwards wrap case
	  )
	;; Normal case without wraparound.
	(if (and (minusp width) source-dependent-alu?)
	    (bitblt-loop-call :backwards t alu abs-width from-x from-y to-x to-y)
	    (bitblt-loop-call :forwards t alu abs-width from-x from-y to-x to-y)))
    nil)
  )

;This only works when WIDTH and HEIGHT are positive (i.e. normal-direction transfer)

(defun TV:bitblt-clipped (alu width height from-raster from-x from-y to-raster to-x to-y)
  (multiple-value-bind (to-width to-height)
      (decode-raster-array to-raster)
    (when (minusp to-x)
      (incf width to-x)
      (decf from-x to-x)
      (setq to-x 0))
    (let ((tem (- to-width (+ to-x width))))
      (when (minusp tem)
	(incf width tem)))
    (when (minusp to-y)
      (incf height to-y)
      (decf from-y to-y)
      (setq to-y 0))
    (let ((temp (- to-height (+ to-y height))))
      (when (minusp temp)
	(incf height temp)))
    (when (and (plusp width) (plusp height))
      (bitblt alu width height from-raster from-x from-y to-raster to-x to-y))))
;;;*********************************************************************
;;; Unpacked BITBLT routines for simple color operations.
;;;
;; Some restrictions:
;;  Width may not be negative, since there's no backward case, and besides, who needs that
;;   when the source and destination don't overlap (which they shouldn't here).
;;  From-array must be an ART-1B array.
;;  Column wraparound cases take longer, cause there's no wraparound test in the microcode.
;;   We cut it up into columns and do multiple transfers.
;;
;;   Do not give this function a width that wraps around the source array. (???)

(defun TV:bitblt-masked (alu width height from-array from-x from-y to-array to-x to-y)
  (check-type alu (integer 0 15))
  (with-bitblt-environment (alu width height from-array from-x from-y to-array to-x to-y nil)

    (ignore d-height)
    ;; Source-wraparound case.  Backwards width is illegal.
    ;; Consider case of source-wraparound that is vertical only - add to for/backwards case ? 

    (if source-wraparound?
	(let ((alu (logior alu color:%extended-alu color:%shift-alu)))
	  (macrolet ((wrap-call (direction)
		     `(BITBLT-LOOP-CALL ,direction T ALU ABS-WIDTH
					FROM-X FROM-Y TO-X TO-Y NIL
					(SYS:%FIXNUM-FLOOR FROM-X 32)	;S-COL-WORD
					S-ROW-WORD-LENGTH	;S-WIDTH-WORDS
					FROM-Y	;S-ROW
					S-HEIGHT)))
	  (if (or (plusp width) (< (sys:%fixnum-floor s-row-length 32) 2))
	      (wrap-call :forwards-wrap)	; Forwards wrap case or 1-word backwards case
	      (error "bitblt masked+backward+wrap is not supported"))	; Backwards wrap case
	  ))
	  ;; Normal case without wraparound.
	  (if (and (minusp width) source-dependent-alu?)
	      (error "bitblt masked+backwards is not supported")
	      (if source-dependent-alu?
		  (let ((alu (logior alu color:%extended-alu color:%shift-alu)))
		    (bitblt-loop-call :forwards t   alu abs-width from-x from-y to-x to-y))
		  (multiple-value-bind (alu tv:bitblt-unpacking-constant tv:bitblt-unpacking-mask)
		      (color:combine-alu-and-data alu -1 tv:bitblt-unpacking-mask)
		    (bitblt-loop-call :forwards nil alu abs-width nil nil to-x to-y))
	      ))))
    nil)

(defun TV:bitblt-unpacked (alu width height from-array from-x from-y to-array to-x to-y)

  (if (or (not (minusp alu))
	  (eql 1 (array-element-byte-size to-array)))

      ;; Ordinary (non-unpacking alu) BITBLT.  
      (if ( tv:bitblt-unpacking-mask -1)
	  (tv:bitblt-masked alu width height from-array from-x from-y to-array to-x to-y)
	  (bitblt alu width height from-array from-x from-y to-array to-x to-y))

      ;; See if we're going to wrap around the source.  Do it in columns if so.
      (let ((alu-code (logand (logior #xF color:%folded-fill-alu) alu))
	    (extended-opcode (ldb color:%%extended-alu-opcode alu)))

      (selector extended-opcode =
	((0 1)
	 (let ((templated? (zl:bit-test color::%template-alu alu))
	       (negative-template? (zl:bit-test color:%template-complement-alu alu)))
	   (unless (zerop extended-opcode)
	     (setq alu-code (logior color:%extended-alu
				    (%logdpb extended-opcode color:%%extended-alu-opcode
					      alu-code ))))
	   (color:%draw-masked-bits-internal
	     width height
	     from-array from-x from-y
	     to-array to-x to-y
	     alu-code
	     tv:bitblt-unpacking-constant
	     tv:bitblt-unpacking-mask
	     negative-template? (not templated?))
	   ))
	(2 ;shift alus
	  (let* ((shift-byte (ldb (byte 2 1) alu-code))
		 (shift-function (if (zerop (ldb (byte 1 0) alu-code))
				     #'color:%copy-32b-8b-internal
				     #'color:%copy-8b-32b-internal
				     )))
	    (funcall shift-function width height
		     from-array from-x from-y
		     to-array to-x to-y
		     tv:alu-seta shift-byte
		     tv:bitblt-unpacking-mask)
	  ))
	(t (error "Unimplemented opcode ~A" extended-opcode)))
	)))

;;;*********************************************************************

(DEFVAR *VECTOR-BITBLT-FROM-ARRAY* (MAKE-RASTER-ARRAY 2048. 1 :DISPLACED-TO ""))
(DEFVAR *VECTOR-BITBLT-TO-ARRAY* (MAKE-RASTER-ARRAY 2048. 1 :DISPLACED-TO ""))

;;; The SUBST below simulates this sufficiently for the purposes of this function
;;; and should run faster since it checks for fewer variants

;;;(defun vector-bitblt-change-indirect-array (array displaced-p)
;;;  (si:change-indirect-array array (sys:array-type-field from-array)
;;;			       `(,(array-length from-array) 1)
;;;			       from-array 0))

(defsubst vector-bitblt-change-indirect-array (indirect-array from-array)
  (with-block-registers (1)
    (setf (%block-register 1) from-array)
    (let* ((header (%fixnum (%block-read 1 :cycle-type %memory-header)))
	   (length (if (ldb-test array-long-prefix-bit header)
		       (%block-read 1)
		       (ldb array-short-length-field header)))
	   (index-length 1_30.))
      (setf (%block-register 1) indirect-array)
      (si:prepare-for-block-write)
      (%block-write
	1
	(%set-tag 
	  (%logdpb (ldb array-type-field header)
		   array-type-field
		   (%fixnum (%block-read 1 :cycle-type %memory-header :no-increment t)))
	  (dpb %header-type-array %%q-cdr-code-within-tag dtp-header-i)))
      (%block-write 1 length)
      (%block-write 1 0)
      (%block-write 1 from-array)
      (%block-write 1 1)
      (%block-write 1 index-length)
      (%block-write 1 length)
      (%block-write 1 1))))

#|
(defun TV:vector-bitblt (alu size from-array from-index to-array to-index)
  (without-interrupts
    (vector-bitblt-change-indirect-array *vector-bitblt-from-array* from-array)
    (vector-bitblt-change-indirect-array *vector-bitblt-to-array* to-array)
;    (array-register-event)			Unsure what package - SYS, SI, etc. 
    (bitblt alu size 1
	    *vector-bitblt-from-array* from-index 0 *vector-bitblt-to-array* to-index 0)))
|#

(defun TV:vector-bitblt-fakeout (alu size from-array from-index to-array to-index)
  (without-interrupts
    (macrolet ((with-2d-array ((source-var var) &body body)
		 `(progn
		    (vector-bitblt-change-indirect-array ,var ,source-var)
		    ,@body)))
      (with-2d-array (from-array *vector-bitblt-from-array*)
        (with-2d-array (to-array *vector-bitblt-to-array*)
	  (bitblt alu size 1
		  *vector-bitblt-from-array* from-index 0
		  *vector-bitblt-to-array* to-index 0))))))

(defun TV:vector-bitblt-stack (alu size from-array from-index to-array to-index)
  (macrolet ((with-2d-array ((source-var var) &body body)
	       `(with-stack-list (stack-array-length
				   1
				   (dpb 0 (byte 5 0) (+ (zl:array-length ,source-var) 31.)))
		  (with-stack-array (,var stack-array-length
				     :type (sys:array-type-field ,source-var)
				     :displaced-to ,source-var)
		    ,@body))))
    (with-2d-array (from-array from-array-2d)
      (with-2d-array (to-array to-array-2d)
        (bitblt alu size 1 from-array-2d from-index 0 to-array-2d to-index 0)))))

;;; Meter this to see if a combination of resources and the without-interrupts version 
;;; would make more sense and be more efficient. Consider a hybrid of without-interrupts
;;; for small arrays and resources for larger arrays to avoid holding the without interrupts
;;; for longer than the low level device interrupts can tolerate...
;;; Look into a complete rewrite of this as a simple 1D array blaster

(defun tv:vector-bitblt (alu size from-array from-index to-array to-index)
  (tv:vector-bitblt-fakeout alu size from-array from-index to-array to-index))

