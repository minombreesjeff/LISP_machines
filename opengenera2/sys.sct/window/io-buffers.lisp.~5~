;;; -*- Mode: LISP; Package: TV; Base: 8; Syntax: Zetalisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; This file contains IO buffers

(DEFSTRUCT (IO-BUFFER :ARRAY-LEADER :NAMED (:CONSTRUCTOR NIL)
		      (:SIZE-SYMBOL IO-BUFFER-LEADER-SIZE))
  IO-BUFFER-FILL-POINTER			;Fill pointer, unused
  IO-BUFFER-SIZE				;Size of IO buffer (max index + 1)
						; All ptr's are mod this
  IO-BUFFER-INPUT-POINTER			;Index in which data is next stored
  IO-BUFFER-OUTPUT-POINTER			;Index from which data is next to be taken
						; If out ptr = inp ptr, then the buffer
						; is empty.  If inp ptr + 1 = out ptr, then
						; the buffer is full (This wastes a location
						; when the buffer is full)
						;Actual pointer manipulation should be done
						; with interrupts disabled.
  IO-BUFFER-INPUT-FUNCTION			;If non-NIL, function to be run on inputing
						; data
  IO-BUFFER-OUTPUT-FUNCTION			;If non-NIL, function to be run when taking
						; data out
  IO-BUFFER-STATE				;NIL means ok to put data in
						;T means data may not be put in or taken out
						;:INPUT means data may only be put in
						;:OUTPUT means data may only be taken out
  IO-BUFFER-PLIST				;Property list used to hold various bits of
						; information about the buffer (e.g. whether
						; in super image mode)
  IO-BUFFER-LAST-INPUT-PROCESS			;The last process that did input to here
  IO-BUFFER-LAST-OUTPUT-PROCESS			;The last process that did output from here
  )

(DEFSUBST IO-BUFFER-EMPTY-P (BUFFER)
  (= (IO-BUFFER-INPUT-POINTER BUFFER)
     (IO-BUFFER-OUTPUT-POINTER BUFFER)))

(DEFSUBST IO-BUFFER-FULL-P (BUFFER)
  ;; Always leave room for at least one unget to be done
  (= (\ (+ (IO-BUFFER-INPUT-POINTER BUFFER) 2) (IO-BUFFER-SIZE BUFFER))
     (IO-BUFFER-OUTPUT-POINTER BUFFER)))

(DEFSUBST IO-BUFFER-NOT-EMPTY-P (BUFFER)
  (NOT (IO-BUFFER-EMPTY-P BUFFER)))

(DEFSUBST IO-BUFFER-NOT-FULL-P (BUFFER)
  (NOT (IO-BUFFER-FULL-P BUFFER)))

(DEFSELECT ((:PROPERTY IO-BUFFER NAMED-STRUCTURE-INVOKE))
  (:PRINT-SELF (BUFFER STREAM &REST IGNORE)
   (SI:PRINTING-RANDOM-OBJECT (BUFFER STREAM :TYPEP)
     (COND ((IO-BUFFER-EMPTY-P BUFFER)
	    (PRINC "empty, " STREAM))
	   (T (FORMAT STREAM "~D entr~:@P, "
		      (LET ((DIFF (- (IO-BUFFER-INPUT-POINTER BUFFER)
				     (IO-BUFFER-OUTPUT-POINTER BUFFER))))
			(IF (< DIFF 0)
			    (+ DIFF (IO-BUFFER-SIZE BUFFER))
			    DIFF)))))
     (FORMAT STREAM "State: ~A" (IO-BUFFER-STATE BUFFER)))))

(DEFUN MAKE-IO-BUFFER (SIZE &OPTIONAL IN-FUN OUT-FUN PLIST STATE &AUX BUFFER)
  "Create a new IO buffer of specified size"
  (SETQ BUFFER (MAKE-ARRAY SIZE
			   ':LEADER-LENGTH IO-BUFFER-LEADER-SIZE
			   ':NAMED-STRUCTURE-SYMBOL 'IO-BUFFER))
  (SETF (IO-BUFFER-FILL-POINTER BUFFER) 0)
  (SETF (IO-BUFFER-SIZE BUFFER) SIZE)
  (SETF (IO-BUFFER-INPUT-POINTER BUFFER) 0)
  (SETF (IO-BUFFER-OUTPUT-POINTER BUFFER) 0)
  (SETF (IO-BUFFER-INPUT-FUNCTION BUFFER) IN-FUN)
  (SETF (IO-BUFFER-OUTPUT-FUNCTION BUFFER) OUT-FUN)
  (SETF (IO-BUFFER-STATE BUFFER) STATE)
  (SETF (IO-BUFFER-PLIST BUFFER) PLIST)
  BUFFER)

(DEFUN MAKE-DEFAULT-IO-BUFFER ()
  (MAKE-IO-BUFFER 100 NIL 'KBD-DEFAULT-OUTPUT-FUNCTION))

(DEFUN IO-BUFFER-PUT (BUFFER ELT &OPTIONAL NO-HANG-P WHOSTATE (WAKEUP T))
  "Store a new element in an IO buffer"
  (UNLESS WHOSTATE
    (SETQ WHOSTATE "Buffer Full"))
  (DO ((INHIBIT-SCHEDULING-FLAG T T)
       (IGNORE-P)
       (INPUT-POINTER)
       (IN-FUN (IO-BUFFER-INPUT-FUNCTION BUFFER)))
      (())
    (flet ((wakeup-io-buffer-waiter (buffer)
	     (dolist (console *consoles*)
	       (when (eql buffer (console-system-io-buffer console))
		 (let ((proc
			 ;; try to keep this up-to-date
			 (or (let ((selected (console-selected-io-buffer console)))
			       (and selected
				    (io-buffer-last-output-process selected)))
			     (let ((selected (console-selected-window console)))
			       (and selected
				    ;; try send-if-handles only as a last resort.
				    (send-if-handles selected :process))))))
		   (let ((old-proc (io-buffer-last-output-process buffer)))
		     (when old-proc
		       (process:process-wakeup old-proc)))
		   (when proc
		     (setf (io-buffer-last-output-process buffer) proc)))))
	     (let ((waiter (io-buffer-last-output-process buffer)))
	       (when waiter (process:process-wakeup waiter)))))
      (COND ((OR (NULL (IO-BUFFER-STATE BUFFER))
	       (EQ (IO-BUFFER-STATE BUFFER) ':INPUT))
	   (COND (IN-FUN
		  ;; Call function with INHIBIT-SCHEDULING-FLAG turned on and bound.
		  ;; Since this function may change the state of the buffer either directly
		  ;; or indirectly, loop in order to check the state.  Set the function to
		  ;; NIL, though, so it won't be run again
		  (MULTIPLE-VALUE (ELT IGNORE-P)
		    (FUNCALL IN-FUN BUFFER ELT))
		  (WHEN WAKEUP
		    (wakeup-io-buffer-waiter buffer))
		  (AND IGNORE-P (RETURN T))
		  (SETQ IN-FUN NIL))
		 (T
		  (COND ((NOT (IO-BUFFER-FULL-P BUFFER))
			 (SETF (IO-BUFFER-LAST-INPUT-PROCESS BUFFER) CURRENT-PROCESS)
			 (SETQ INPUT-POINTER (IO-BUFFER-INPUT-POINTER BUFFER))
			 (ASET ELT BUFFER INPUT-POINTER)
			 (SETF (IO-BUFFER-INPUT-POINTER BUFFER)
			       (\ (1+ INPUT-POINTER) (IO-BUFFER-SIZE BUFFER)))
			 (WHEN WAKEUP
			   (wakeup-io-buffer-waiter buffer))
			 (RETURN T))
			(NO-HANG-P (RETURN NIL))
			(T
			  (SETQ INHIBIT-SCHEDULING-FLAG NIL)
			  (PROCESS-WAIT WHOSTATE #'IO-BUFFER-NOT-FULL-P BUFFER))))))
	  (NO-HANG-P (RETURN NIL))
	  (T
	   (SETQ INHIBIT-SCHEDULING-FLAG NIL)
	   (PROCESS-WAIT "Buffer State" #'(LAMBDA (BUF)
					    (OR (NULL (IO-BUFFER-STATE BUF))
						(EQ (IO-BUFFER-STATE BUF) ':INPUT)))
			 BUFFER))))))

(DEFUN IO-BUFFER-GET (BUFFER &OPTIONAL (NO-HANG-P NIL) (WHOSTATE "Buffer Empty")
				       (PROCESS *CURRENT-PROCESS*))
  "Get an element from an IO buffer.  First value is ele, second is T if got one, else NIL"
  (WHEN PROCESS
    (SETF (IO-BUFFER-LAST-OUTPUT-PROCESS BUFFER) PROCESS))
  (DO ((INHIBIT-SCHEDULING-FLAG T T)
       (ELT)
       (IGNORE-P)
       (OUTPUT-POINTER)
       (OUT-FUN (IO-BUFFER-OUTPUT-FUNCTION BUFFER)))
      (())
    (COND ((OR (NULL (IO-BUFFER-STATE BUFFER))
	       (EQ (IO-BUFFER-STATE BUFFER) ':OUTPUT))
	   (COND ((NOT (IO-BUFFER-EMPTY-P BUFFER))
		  (let ((wakeup (and (io-buffer-full-p buffer)
				     (io-buffer-last-input-process buffer))))
		    (SETQ OUTPUT-POINTER (IO-BUFFER-OUTPUT-POINTER BUFFER))
		    (SETQ ELT (AREF BUFFER OUTPUT-POINTER))
		    (SETF (IO-BUFFER-OUTPUT-POINTER BUFFER)
			  (\ (1+ OUTPUT-POINTER) (IO-BUFFER-SIZE BUFFER)))
		    (multiple-value-prog1
		      (COND ((AND OUT-FUN
				  ;; Call function with INHIBIT-SCHEDULING-FLAG on and bound.
				  ;; If element is to be ignored, loop back, else return element
				  (PROG2
				    (MULTIPLE-VALUE (ELT IGNORE-P)
				      (FUNCALL OUT-FUN BUFFER ELT))
				    IGNORE-P)))
			    (T (RETURN (VALUES ELT T))))
		      (when wakeup (PROCESS:process-wakeup wakeup)))))
		 (NO-HANG-P (RETURN (VALUES NIL NIL)))
		 (T
		  (SETQ INHIBIT-SCHEDULING-FLAG NIL)
		  (PROCESS-WAIT WHOSTATE #'IO-BUFFER-NOT-EMPTY-P BUFFER))))
	  (NO-HANG-P (RETURN (VALUES NIL NIL)))
	  (T
	   (SETQ INHIBIT-SCHEDULING-FLAG NIL)
	   (PROCESS-WAIT "Buffer State" #'(LAMBDA (BUF)
					    (OR (NULL (IO-BUFFER-STATE BUF))
						(EQ (IO-BUFFER-STATE BUF) ':OUTPUT)))
			 BUFFER)))))

(DEFUN IO-BUFFER-UNGET (BUFFER ELT)
  "Return ELT to the IO-BUFFER by backing up the pointer.  ELT should be the last thing
read from the buffer."
  (WITHOUT-INTERRUPTS
    (LET ((OUTPUT-POINTER (1- (IO-BUFFER-OUTPUT-POINTER BUFFER))))
      (AND (< OUTPUT-POINTER 0)
	   (SETQ OUTPUT-POINTER (1- (IO-BUFFER-SIZE BUFFER))))
      (OR (EQL ELT (AREF BUFFER OUTPUT-POINTER))
	  (FERROR NIL
	    "Attempt to un-get something different than last element gotten from IO-BUFFER"))
      (SETF (IO-BUFFER-OUTPUT-POINTER BUFFER) OUTPUT-POINTER))))

(DEFUN IO-BUFFER-CLEAR (BUFFER)
  "Clears out an IO buffer"
  (WITHOUT-INTERRUPTS
    (SETF (IO-BUFFER-INPUT-POINTER BUFFER) 0)
    (SETF (IO-BUFFER-OUTPUT-POINTER BUFFER) 0)
    T))

(DEFUN IO-BUFFER-INPUT-WAIT (BUFFER &OPTIONAL WHOSTATE FUNCTION &REST ARGUMENTS)
  ;; Update for correct wakeups.
  (SETF (IO-BUFFER-LAST-OUTPUT-PROCESS BUFFER) CURRENT-PROCESS)
  (FLET ((WAIT-PREDICATE (BUFFER FUNCTION &REST ARGUMENTS)
	   (OR (NOT (IO-BUFFER-EMPTY-P BUFFER))
	       (AND FUNCTION (NOT (NULL (APPLY FUNCTION ARGUMENTS)))))))
    ;; The crock here with process:verify-function is because there's no way to communicate
    ;; down through all the levels that you're willing to block rather than wait.  After
    ;; things work, I'll clean up the protocol for passing such information through.
    (IF (OR (NULL FUNCTION) (EQL FUNCTION 'PROCESS::VERIFY-FUNCTION))
	(CL:APPLY #'PROCESS:PROCESS-BLOCK WHOSTATE
		  #'WAIT-PREDICATE BUFFER (FIRST ARGUMENTS) (CL:REST ARGUMENTS))
	(CL:APPLY #'PROCESS:PROCESS-BLOCK-AND-POLL-WAIT-FUNCTION WHOSTATE
		  ;; Assume that all the more common events will generate wakeups, so poll
		  ;; infrequently, less than twice a second.
		  0.75
		  #'WAIT-PREDICATE BUFFER FUNCTION ARGUMENTS))))

(DEFUN PROCESS-TYPEAHEAD (IO-BUFFER FUNCTION)
  (DO ((INPUT-POINTER (IO-BUFFER-INPUT-POINTER IO-BUFFER))
       (CH))
      ((= INPUT-POINTER (IO-BUFFER-OUTPUT-POINTER IO-BUFFER)))
    (AND (SETQ CH (FUNCALL FUNCTION (IO-BUFFER-GET IO-BUFFER T)))
	 (IO-BUFFER-PUT IO-BUFFER CH T))))
