;;; -*- Mode: LISP;  Package: FS;  Base: 8 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Chaosnet FILE JOB peek functions

(DEFMETHOD (:PROCESS-RUN-FS-MENU TV:BASIC-PEEK) (&REST ARGS)
  (LEXPR-FUNCALL #'PROCESS-RUN-FUNCTION "Peek File System Menu" SELF ARGS))


(DEFMETHOD (:DIRECT-ACCESS-STREAMS QFILE-ACCESS-PATH) ()
  (LOOP FOR STREAM IN OPEN-STREAMS
	WHEN (SEND STREAM ':GET ':DIRECT)
	COLLECT STREAM))

(DEFMETHOD (:PEEK-FILE-SYSTEM QFILE-ACCESS-PATH) ()
  (LIST ()
	(TV:SCROLL-MAINTAIN-LIST 
	  #'(LAMBDA () (SEND SELF :DIRECT-ACCESS-STREAMS))
	  #'(LAMBDA (X) (SEND X ':PEEK-FILE-SYSTEM 2)))
	(TV:SCROLL-MAINTAIN-LIST
	  #'(LAMBDA () HOST-UNITS)
	  #'PEEK-FILE-SYSTEM-HOST-UNIT)))

(DEFMETHOD (:PEEK-FILE-SYSTEM-P QFILE-ACCESS-PATH) ()
  (NOT (NULL HOST-UNITS)))

(DEFUN PEEK-FILE-SYSTEM-HOST-UNIT (UNIT &OPTIONAL (INDENT 2))
  "Generate a scroll item describing a host unit"
  (LIST ()
    (TV:SCROLL-PARSE-ITEM ':MOUSE `(NIL :FUNCALL-WITH-SELF
					,#'(LAMBDA (PEEK)
					     (SEND PEEK :PROCESS-RUN-FS-MENU
						   ':HOST-UNIT-MENU UNIT))
				    :DOCUMENTATION "Menu of things to do to this host unit")
			  (FORMAT NIL "~V@THost unit ~A, control connection in " INDENT UNIT)
			  `(:FUNCTION ,#'(LAMBDA ()
					   (LET ((CONN (HOST-UNIT-CONTROL-CONNECTION UNIT)))
					     (IF CONN (GET-PNAME (CHAOS:STATE CONN))
						 "NONEXISTENT-STATE")))))
    (TV:SCROLL-MAINTAIN-LIST #'(LAMBDA () (PEEK-FILE-SYSTEM-HOST-UNIT-NEXT-STREAM
					   (NCONS (HOST-UNIT-DATA-CONNECTIONS UNIT)) T))
			     #'(LAMBDA (STREAM)
				(FUNCALL STREAM ':PEEK-FILE-SYSTEM (1+ INDENT)))
			     NIL
			     #'(LAMBDA (STATE &AUX NS STREAM)
				 (MULTIPLE-VALUE (NS STREAM)
				   (PEEK-FILE-SYSTEM-HOST-UNIT-NEXT-STREAM STATE))
				 (VALUES STREAM NS
					 (NULL (PEEK-FILE-SYSTEM-HOST-UNIT-NEXT-STREAM
						 NS T)))))))

(DEFUN PEEK-FILE-SYSTEM-HOST-UNIT-NEXT-STREAM (STATE &OPTIONAL DONT-STEP &AUX STREAM FLAG NS)
  "Returns new state and next stream.  If DONT-STEP is specified, returns the current
state if there is a stream available, else NIL"
  (SETQ FLAG (CDR STATE))
  (DO ((S (CAR STATE) (CDR S)))
      ((NULL S) (SETQ NS NIL))
    (SETQ NS S)
    (AND (NULL FLAG) (SETQ STREAM (DATA-STREAM (CAR S) ':INPUT))
	 (NEQ STREAM T) (RETURN (SETQ FLAG T)))
    (SETQ FLAG NIL)
    (AND (SETQ STREAM (DATA-STREAM (CAR S) ':OUTPUT))
	 (NEQ STREAM T) (RETURN (SETQ NS (CDR NS)))))
  (AND (NOT (SYMBOLP STREAM))
       (VALUES (IF DONT-STEP
		   STATE
		   (RPLACA STATE NS)
		   (RPLACD STATE FLAG))
	       STREAM)))

(DEFMETHOD (:HOST-UNIT-MENU TV:BASIC-PEEK) (UNIT)
  (LET ((TERMINAL-IO TV:TYPEOUT-WINDOW)
	(PEEK SELF))
    (TV:MENU-CHOOSE `(("Reset" :EVAL
		       (IF (TV:MOUSE-Y-OR-N-P
			     (FORMAT NIL "Reset ~A to ~A?" ',UNIT
				     (HOST-UNIT-ACCESS-PATH ',UNIT)))
			   (FUNCALL ',UNIT ':RESET))
		       :DOCUMENTATION "Reset the host unit (kill Chaos connection)")
		      ("Describe" :EVAL  (SEND ',PEEK ':FORCE-KBD-INPUT '(DESCRIBE ,UNIT))
		       :DOCUMENTATION "Describe the host unit.")
		      ("Inspect" :EVAL (INSPECT ',UNIT)
		       :DOCUMENTATION "Inspect the host unit."))
		    (FORMAT NIL "Operation on host unit for ~A:"
			    (HOST-UNIT-ACCESS-PATH UNIT)))))

;;; New NFILE stuff, here instead of SYS: IO; NFILE-USER because of ordering
;;; dependencies when loading the inner system at world-build time.

;;; Usual Fit of Pique

(DEFMETHOD (:DIRECT-ACCESS-STREAMS NFILE-ACCESS-PATH) ()
  (LOOP FOR STREAM IN OPEN-STREAMS
	WHEN (SEND STREAM ':GET ':DIRECT)
	COLLECT STREAM))

(DEFMETHOD (:PEEK-FILE-SYSTEM NFILE-ACCESS-PATH) ()
  (LIST ()
	(TV:SCROLL-MAINTAIN-LIST 
	  #'(LAMBDA () (SEND SELF :DIRECT-ACCESS-STREAMS))
	  #'(LAMBDA (X) (SEND X :PEEK-FILE-SYSTEM 2)))
	(TV:SCROLL-MAINTAIN-LIST
	  #'(LAMBDA () SERVER-UNITS)
	  #'PEEK-NFILE-SERVER-UNIT)))

(DEFMETHOD (:PEEK-FILE-SYSTEM-P NFILE-ACCESS-PATH) ()
  (NOT (NULL SERVER-UNITS)))

(DEFUN PEEK-NFILE-SERVER-UNIT (UNIT &OPTIONAL (INDENT 2))
  (SEND UNIT ':PEEK-SERVER-UNIT INDENT))

(DEFMETHOD (:PEEK-SERVER-UNIT NFILE-SERVER-UNIT) (&OPTIONAL (INDENT 2))
  "Generate a scroll item describing a server unit"
  (LIST ()
	(TV:SCROLL-PARSE-ITEM
	  `(:MOUSE
	    (NIL :FUNCALL-WITH-SELF
		 ,#'(LAMBDA (PEEK) (SEND PEEK :PROCESS-RUN-FS-MENU
					 ':NFILE-SERVER-UNIT-MENU SELF))
		 :DOCUMENTATION "Menu of things to do to this server unit")
	    :FUNCTION
	    ,#'(LAMBDA () (FORMAT NIL "~V@XServer unit ~A" INDENT SELF)))
	  `(:MOUSE
	    (NIL :FUNCALL-WITH-SELF
		 ,#'(LAMBDA (PEEK)
		      (WHEN CONTROL-STREAM
			(SEND PEEK :PROCESS-RUN-FS-MENU
			      ':NFILE-CHANNEL-NETSTREAM-MENU CONTROL-STREAM)))
		 :DOCUMENTATION "Menu of things to do to control stream")
	    :FUNCTION
	    ,#'(LAMBDA ()
		 (IF CONTROL-STREAM
		     (FORMAT NIL ", over ~S" CONTROL-STREAM)
		     "")))
	  `(:FUNCTION ,#'(LAMBDA ()
			   (FORMAT NIL " (~A)"
				   (IF (SEND SELF :TEST-CONTROL-STREAM)
				       "Connected"
				       "Disconnected")))))
	(TV:SCROLL-MAINTAIN-LIST
	  #'(LAMBDA () DATA-CHANNELS)
	  #'(LAMBDA (DATA-CHANNEL)
	      (SEND SELF :PEEK-DATA-CHANNEL DATA-CHANNEL (1+ INDENT))))))

(DEFMETHOD (:PEEK-DATA-CHANNEL NFILE-SERVER-UNIT) (CHANNEL INDENT)
  (LIST ()
	(TV:SCROLL-PARSE-ITEM
	   (FORMAT NIL "~V@X" INDENT)
	   `(:MOUSE
	      (NIL :FUNCALL-WITH-SELF
		   ,#'(LAMBDA (PEEK)
			(SEND PEEK :PROCESS-RUN-FS-MENU ':NFILE-CHANNEL-MENU CHANNEL))
		   :DOCUMENTATION "Menu of interesting things to do to this channel")
	      :FUNCTION
	      ,#'(LAMBDA ()
		   (FORMAT NIL "Channel ~A (~:)"
			   (DATA-CHAN-HANDLE CHANNEL) (DATA-CHAN-DIRECTION CHANNEL))))
	  `(:FUNCTION ,#'(LAMBDA ()
			   (IF (DATA-CHAN-UNSAFE CHANNEL) " UNSAFE " " ")))
	  `(:MOUSE
	    (NIL :FUNCALL-WITH-SELF
		 ,#'(LAMBDA (PEEK)
		      (LET ((NET-STREAM (DATA-CHAN-NET-STREAM CHANNEL)))
			(WHEN NET-STREAM
			  (SEND PEEK :PROCESS-RUN-FS-MENU
				':NFILE-CHANNEL-NETSTREAM-MENU NET-STREAM))))
		 :DOCUMENTATION "Menu of interesting things to do to this network stream.")
	    :FUNCTION
	    ,#'(LAMBDA ()
		 (LET ((STREAM (DATA-CHAN-NET-STREAM CHANNEL)))
		   (FORMAT NIL "Stream ~S (~A)"
			   STREAM (IF (SEND STREAM ':CONNECTED-P)
				      "Connected"
				      "Disconnected"))))))
	(TV:SCROLL-MAINTAIN-LIST
	  #'(LAMBDA () (LIST (DATA-CHAN-FILE-STREAM CHANNEL)))
	  #'(LAMBDA (STREAM)
	     (COND ((NULL STREAM) NIL)
		   ((EQ STREAM 'T)
		    (TV:SCROLL-PARSE-ITEM
		      (FORMAT NIL "~VX  In allocating (T) state." INDENT)))
		   ((EQ STREAM 'DIRECTORY)
		    (TV:SCROLL-PARSE-ITEM
		      (FORMAT NIL "~VX  In DIRECTORY state." INDENT)))
		   (T (SEND STREAM ':PEEK-FILE-SYSTEM (+ 2 INDENT))))))))


(DEFMETHOD (:NFILE-SERVER-UNIT-MENU TV:BASIC-PEEK) (UNIT)
  (LET ((TERMINAL-IO TV:TYPEOUT-WINDOW)
	(PEEK SELF))
    (TV:MENU-CHOOSE `(("Reset" :EVAL
		       (IF (TV:MOUSE-Y-OR-N-P
			     (FORMAT NIL "Reset ~A to ~A?" ',UNIT
				     (SEND ',UNIT ':ACCESS-PATH)))
			   (FUNCALL ',UNIT ':RESET))
		       :DOCUMENTATION "Reset the server unit (kill network connection)")
		      ("Describe" :EVAL  (SEND ',PEEK ':FORCE-KBD-INPUT '(DESCRIBE ,UNIT))
		       :DOCUMENTATION "Describe the server unit.")
		      ("Inspect" :EVAL (INSPECT ',UNIT)
		       :DOCUMENTATION "Inspect the server unit."))
		    (FORMAT NIL "Operation on server unit for ~A:"
			    (SEND UNIT ':ACCESS-PATH)))))


(DEFMETHOD (:NFILE-CHANNEL-NETSTREAM-MENU TV:BASIC-PEEK) (STREAM)
  (LET ((TERMINAL-IO TV:TYPEOUT-WINDOW)
	(PEEK SELF))
    (TV:MENU-CHOOSE `(("Close Abort" :EVAL
		       (IF (TV:MOUSE-Y-OR-N-P
			     (FORMAT NIL "Abort ~A to ~A?" ',STREAM
				     ',(SEND STREAM ':FOREIGN-HOST)))
			   (SEND ',STREAM ':CLOSE-WITH-REASON "Manual CLOSE from PEEK"
				 T))
		       :DOCUMENTATION "Forcibly close this stream (destroying the channel).")
		      ("Describe" :EVAL  (SEND ',PEEK ':FORCE-KBD-INPUT '(DESCRIBE ,STREAM))
		       :DOCUMENTATION "Describe the network stream.")
		      ("Inspect" :EVAL (INSPECT ',STREAM)
		       :DOCUMENTATION "Inspect the network stream."))
		    (FORMAT NIL "Operation on ~A" STREAM))))


(DEFMETHOD (:NFILE-CHANNEL-MENU TV:BASIC-PEEK) (CHANNEL)
  (LET* ((TERMINAL-IO TV:TYPEOUT-WINDOW)
	 (PEEK SELF)
	 (DESCRIP (FORMAT NIL "Channel ~A (~:)"
			  (DATA-CHAN-HANDLE CHANNEL) (DATA-CHAN-DIRECTION CHANNEL)))
	 (STREAM (DATA-CHAN-NET-STREAM CHANNEL)))
    (TV:MENU-CHOOSE `(("Abort connection" :EVAL
		       (IF (TV:MOUSE-Y-OR-N-P
			     (FORMAT NIL "Abort ~A to ~A?" ',DESCRIP
				     ',(SEND STREAM ':FOREIGN-HOST)))
			   (SEND ',STREAM ':CLOSE-WITH-REASON "Manual CLOSE from PEEK"
				 T))
		       :DOCUMENTATION "Reset the data channel (kill network connection)")
		      ("Describe" :EVAL  (SEND ',PEEK ':FORCE-KBD-INPUT '(DESCRIBE ,CHANNEL))
		       :DOCUMENTATION "Describe the data channel.")
		      ("Inspect" :EVAL (INSPECT ',CHANNEL)
		       :DOCUMENTATION "Inspect the channel.")
		      ("Make Unsafe"
		       :EVAL (SETF (DATA-CHAN-UNSAFE ',CHANNEL) ':PEEK)
		       :DOCUMENTATION "Mark the channel as needing resynchronization"))
		    (FORMAT NIL "Operation on channel ~A:" DESCRIP))))
