;; -*- Mode: Lisp; Base: 10; Package: Mailer; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defvar *chaos-mail-debug-flag* nil "Trace CHAOS-MAIL operation")

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")log-chaos-mail-debugging-event0 (log process-id herald format-string &rest format-args)
  (declare (special *mailer-log*))
  (when *chaos-mail-debug-flag*
    (let ((log (cond (log)
		     ((and (variable-boundp su:*log*) su:*log*))
		     ((and (variable-boundp *mailer-log*) *mailer-log*))
		     (t nil))))
      (cl:apply
	'su:debug-with-log-or-trace-output log process-id herald format-string format-args))))


(defflavor chaos-mail-server-timeout
	(host
	 operation
	 (reply-control)
	 (reply-args)
	 timeout)
	(mailer-timeout)
  :initable-instance-variables)

(defmethod (dbg:report chaos-mail-server-timeout) (stream)
  (format stream "CHAOS-MAIL timed out~@[ after ~A~] while serving host ~A:~@
		  ~4@T~A~@[: ~~?~~]"
	  (and timeout (time:seconds-to-interval-string (floor timeout 60)))
	  (send host :mail-name)
	  operation
	  reply-control reply-args))

(compile-flavor-methods chaos-mail-server-timeout)


(define-server :chaos-mail (:medium :byte-stream
			    :who-line t
			    :no-eof t
			    :reject-unless-trusted nil
			    :stream (stream :accept-p nil)
			    :flavor chaos-mail-server
			    :error-disposition :notify))

(defflavor chaos-mail-server
	()
	(neti:byte-stream-server))

(defun-in-flavor (chaos-mail-received-line chaos-mail-server) ()
  (format nil "Received: from ~A by ~A~@[ via ~A~] with CHAOS-MAIL~~@[ id ~~D~~]; ~A~%"
	  (send (send self :foreign-host) :mail-name) (send *local-host* :mail-name)
	  (send self :network)
	  (with-output-to-string (string)
	    (zwei:print-date (cl:get-universal-time) string :rfc822 t nil t t))))

(defun chaos-mail-remove-crs (error)
  (let ((string (format nil "~A" error)))
    (loop for i = (string-search-char #\cr string)
	  while i
	  do (setf (aref string i) #\space))
    string)) 

;; Must add code to handle READ-ON-CLOSED-CONNECTION, LOS-RECEIVED-STATE, and HOST-DOWN
;; conditions.

(defmethod (:server-top-level chaos-mail-server) ()
  (let ((stream (send self :stream))
	(accepted nil))
    (unwind-protect
	(progn
	  (when net:*system-secured*
	    (neti:login-server :chaos-mail (send self :foreign-host)
			       *local-mailer-user-id*
			       nil
			       :no-password-required t))
	  (condition-case (error)
	       (flet ((chaos-mail-reply (stream format-string &rest format-args)
			(condition-case ()
			     (with-stream-timeout (stream :output *network-reception-timeout*)
			       (format stream "~?~%" format-string format-args)
			       (send stream :force-output)
			       (cl:apply #'log-chaos-mail-debugging-event nil nil "sent"
					 format-string format-args))
			   (neti:protocol-timeout
			     (log-chaos-mail-debugging-event nil nil "send"
							     "~&Timed out sending reply: ~?"
							     format-string format-args)
			     (error 'chaos-mail-server-timeout :host (send self :foreign-host)
							       :operation "Sending reply"
							       :reply-control format-string
							       :reply-args format-args
							       :timeout
							         *network-reception-timeout*))
			   )))
		 (with-local-mailer (mailer)
		   (send stream :accept)
		   (setf accepted t)
		   (send mailer :start-message `(:route ((:object ,(send self :foreign-host)))
						 :return-path-from-header t))
		   (loop with line
			 with eof
			 do
		     (multiple-value (line eof)
		       (condition-case ()
			    (with-stream-timeout (stream :input *network-reception-timeout*)
			      (send stream :line-in))
			  (neti:protocol-timeout (values nil nil))))
		     (cond (eof
			    (error 'sys:end-of-file :stream stream))
			   ((null line)
			    (log-chaos-mail-debugging-event nil nil "read"
							    "~&Timed out reading recipient")
			    (error 'chaos-mail-server-timeout :host (send self :foreign-host)
							      :operation "Reading recipient"
							      :timeout
							        *network-reception-timeout*))
			   ((string-equal line "") (return))
			   (t
			    (log-chaos-mail-debugging-event nil nil "rcvd" "~&~A" line)
			    (condition-case (error)
				 (let ((recipient (zwei:parse-one-address line)))
				   (unless (get (locf recipient) :host)
				     (setf (get (locf recipient) :host) `(:object
									   ,*local-host*)))
				   (send mailer :verify-recipient recipient))
			       (mailer-temporary-error
				 (chaos-mail-reply stream
						   "%~A" (chaos-mail-remove-crs error)))
			       ((mailer-error zwei:parse-error sys:unknown-host-name)
				(chaos-mail-reply stream
						  "-~A" (chaos-mail-remove-crs error)))
			       (:no-error
				 (chaos-mail-reply stream "+Recipient accepted"))))))
		   (let (success)
		     (condition-case (error)
			  (send mailer :receive-message (chaos-mail-received-line) stream)
			(mailer-temporary-error
			  (chaos-mail-reply stream "%~A" (chaos-mail-remove-crs error)))
			(mailer-error
			  (chaos-mail-reply stream "-~A" (chaos-mail-remove-crs error)))
			(:no-error
			  (setq success t)
			  (chaos-mail-reply stream "+Message delivered")))
		     (send stream :finish)
		     (send stream :close :abort)
		     (when success
		       (send mailer :finish-message)))))
	     (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Ignore all problems with the other side.
0	     ((remote-network-error end-of-file))
	     2;; Let the other side know right away if we can't accept the message.
0	     (mailer-error
	       (if accepted
		   (send stream :close-with-reason (format nil "~A" error) t)
		   (send stream :reject (format nil "~A" error))))))
      (when net:*system-secured*
	(neti:logout-server :chaos-mail (send self :foreign-host))))))

(compile-flavor-methods chaos-mail-server)



;; User side

;; Errors

(defflavor chaos-mail-error
	(host
	 command-type
	 command-data
	 reply)
	(mailer-error)
  :initable-instance-variables)

(defmethod (:report chaos-mail-error) (stream)
  (format stream "CHAOS-MAIL error from host ~A:~@
		  ~4@TSent ~A~@[: ~A~]~@
		  ~:[~4@TNo reply received~;~
		     ~4@TReceived reply: ~~:*~A~~]"
	  (send host :mail-name)
	  (cl:ecase command-type
	    (:recipient "recipient")
	    (:data "message body"))
	  command-data
	  reply))

(defflavor chaos-mail-temporary-error
	()
	(chaos-mail-error mailer-temporary-error))

(compile-flavor-methods chaos-mail-temporary-error)

(defflavor chaos-mail-transaction-timeout
	()
	(chaos-mail-error mailer-timeout))

(defmethod (dbg:report chaos-mail-transaction-timeout) (stream)
  (format stream "CHAOS-MAIL timed out~@[ after ~A~] while using host ~A:~@
		  ~4@T~:[Sending~;Waiting for reply to~] ~A~@[: ~A~]"
	  (and timeout (time:seconds-to-interval-string (floor timeout 60)))
	  (send host :mail-name)
	  (eq direction :input)
	  (cl:ecase command-type
	    (:recipient "recipient")
	    (:data "message body"))
	  command-data))

(compile-flavor-methods chaos-mail-transaction-timeout)

(defflavor chaos-mail-permanent-error
	()
	(chaos-mail-error mailer-permanent-error))

(compile-flavor-methods chaos-mail-permanent-error)

;; Flavors

(defflavor chaos-mail-user
	(stream
	 string-from-header-type)
	(mail-access-path)
  (:initable-instance-variables stream))

(defun-in-flavor (chaos-mail-user-check-reply chaos-mail-user) (command-type 
								&optional command-data
									  (timeout timeout))
  (multiple-value-bind (reply eof)
      (condition-case ()
	   (with-stream-timeout (stream :input timeout)	2;Handle timeouts below...
0	     (send stream :line-in))
	 (neti:protocol-timeout (values nil nil)))
    (cond (eof
	   (error 'sys:end-of-file :stream stream))
	  ((null reply)
	   (log-chaos-mail-debugging-event nil nil "read" "~&Timed out waiting for reply")
	   (error 'chaos-mail-transaction-timeout :direction :input
						  :host (send stream :foreign-host)
						  :command-type command-type
						  :command-data command-data
						  :timeout timeout))
	  ((zerop (string-length reply))
	   (log-chaos-mail-debugging-event nil nil "rcvd" "~&Null reply")
	   (error 'chaos-mail-permanent-error :host (send stream :foreign-host)
					      :command-type command-type
					      :command-data command-data
					      :reply nil))
	  (t
	   (log-chaos-mail-debugging-event nil nil "rcvd" "~&~A" reply)
	   (selector (aref reply 0) char-equal
	     (#/+ nil)
	     (#/% (error 'chaos-mail-temporary-error :host (send stream :foreign-host)
						     :command-type command-type
						     :command-data command-data
						     :reply reply))
	     (otherwise
	      (error 'chaos-mail-permanent-error :host (send stream :foreign-host)
						 :command-type command-type
						 :command-data command-data
						 :reply reply)))))))

(defmethod (:start-message chaos-mail-user) (&rest ignore)
  (unless stream (ferror "Chaos mail is not reusable."))
  (setf string-from-header-type
	(if (all-mail-addresses-forward-between-hosts-p
	      (send stream :foreign-host)
	      (second (send si:*user* :mail-address)))
	    :local-default-host
	    :host)))

(defmethod (:verify-recipient chaos-mail-user) (recipient)
  (let ((recipient-string (zwei:string-from-header recipient string-from-header-type)))
    (when (string-search-char #\cr recipient-string)
      (ferror "Chaos mail does not permit Return to appear in recipient names."))
    (condition-case ()
	 (with-stream-timeout (stream :output timeout)	2;Handle timeouts below...
0	   (send stream :line-out recipient-string)
	   (log-chaos-mail-debugging-event nil nil "sent" "~&~A" recipient-string)
	   (send stream :force-output))
       (neti:protocol-timeout
	 (log-chaos-mail-debugging-event nil nil "send" "~&Sending recipient")
	 (error 'chaos-mail-transaction-timeout :direction :output
						:host (send stream :foreign-host)
						:command-type :recipient
						:command-data recipient-string
						:timeout timeout)))
    (chaos-mail-user-check-reply :recipient recipient-string)))

(defmethod (:receive-message chaos-mail-user) (trace-line source-stream &optional body-stream)
  (multiple-value-bind (transmission-timeout processing-timeout)
      (compute-receive-message-timeout timeout stream source-stream body-stream
						      count-of-verified-recipients)
    (condition-case ()
	 (with-stream-timeout (stream :output transmission-timeout)	2;Handle timeouts below.
0	   (send stream :tyo #\Return)
	   (when trace-line (format stream trace-line nil))
	   (copy-message-streams source-stream body-stream stream)
	   (log-chaos-mail-debugging-event nil nil "sent" "~&Message body")
	   (send stream :eof))
       (neti:protocol-timeout
	 (log-chaos-mail-debugging-event nil nil "send" "~&Timed out sending message body")
	 (error 'chaos-mail-transaction-timeout :direction :output
						:host (send stream :foreign-host)
						:command-type :data
						:command-data nil
						:timeout transmission-timeout)))
    (chaos-mail-user-check-reply :data nil processing-timeout))
  (send stream :close :abort)
  (setf stream nil))

(defmethod (:close chaos-mail-user) (&optional ignore)
  (when stream
    (send stream :close :abort)
    (setf stream nil)))

(compile-flavor-methods chaos-mail-user)

;;;

(define-protocol :chaos-mail (:mail-to-user :chaos)
  (:desirability .7)
  (:invoke (path)
   (chaos-mail-user-internal path)))

(define-protocol :chaos-mail (:store-and-forward-mail :chaos)
  (:desirability .7)
  (:invoke (path)
   (chaos-mail-user-internal path)))

(defun chaos-mail-user-internal (path)
  (lexpr-funcall #'make-instance 'chaos-mail-user :stream (get-connection-for-service path)
		 (neti:service-access-path-args path)))

;;; Hosts are notorious for screwing up on this, unix in particular
;;; avoid them (like the common cold more than like the plague).
(defmethod (:protocol-desirability host :chaos-mail) () .5)

(defmethod (:protocol-desirability tenex-family-host-mixin :chaos-mail) () 1)
(defmethod (:protocol-desirability host-its-mixin :chaos-mail) () 1)
(defmethod (:protocol-desirability host-lispm-mixin :chaos-mail) () 1)



;;; EXPAND-MAILING-LIST protocol (used by T(w)enex)

(defflavor expand-mailing-list-user (stream) (mail-access-path)
  (:initable-instance-variables stream))

(defmethod (:close expand-mailing-list-user) (&optional ignore)
  (when stream
    (send stream :close :abort)
    (setf stream nil)))

(defmethod (:expand-recipient expand-mailing-list-user) (recipient &optional collect-errors)
  (send stream :line-out (zwei:string-from-header recipient :host))
  (send stream :force-output)
  (let ((reply (send stream :line-in)))
    (selectq (aref reply 0)
      (#/+ nil)
      (otherwise
	(error 'chaos-mail-permanent-error :host (send stream :foreign-host) :reply reply))))
  (let ((zwei:*default-host-when-parsing* (send stream :foreign-host)))
    (zwei:parsing-hosts
      (loop as line = (send stream :line-in)
	    until (equal line "")
	    collect (condition-case-if collect-errors (.error.)
			 (zwei:parse-one-address line)
		       (zwei:parse-error .error.))))))

(compile-flavor-methods expand-mailing-list-user)

(define-protocol :expand-mailing-list (:expand-mail-recipient :byte-stream)
  (:invoke (path)
   (make-instance 'expand-mailing-list-user :stream (get-connection-for-service path))))

(chaos:add-contact-name-for-protocol :expand-mailing-list)
