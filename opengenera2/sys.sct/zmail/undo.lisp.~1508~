;;; Lisp Machine mail reader -*- Mode:LISP; Package:ZWEI; Base: 8 -*- 
;;; Zmail undo system.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-UNDO
				"Offer to undo the last undoable command."
				(NO-MSG-OK)
  (LET (ENTRY)
    (LOOP WHILE *UNDO-HISTORY*
	  DO (POP *UNDO-HISTORY* ENTRY)
	  UNTIL (NOT (SEND ENTRY :CHECK-FOR-KILLED-MSGS)))
    (WHEN (NULL ENTRY)
      (BARF "There are no commands to undo."))
    (LET ((NAME (SEND ENTRY :NAME)))
      (UNLESS (TYPEIN-LINE-ACTIVATE		;GDFAS
		(FQUERY () "Undo ~A? " NAME))
	(ABORT-CURRENT-COMMAND))
      (SEND ENTRY :UNDO)
      (TYPEIN-LINE "~A undone." NAME))
    (PUSH ENTRY *REDO-HISTORY*))
  (COMPUTE-CURRENT-MSG-STATE)
  DIS-TEXT)

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-REDO
				"Offer to redo the last undone command."
				(NO-MSG-OK)
  (LET (ENTRY)
    (LOOP WHILE *REDO-HISTORY*
	  DO (POP *REDO-HISTORY* ENTRY)
	  UNTIL (NOT (SEND ENTRY :CHECK-FOR-KILLED-MSGS)))
    (WHEN (NULL ENTRY)
      (BARF "There are no commands to redo."))
    (LET ((NAME (SEND ENTRY :NAME)))
      (UNLESS (TYPEIN-LINE-ACTIVATE (FQUERY () "Redo ~A? " NAME))
	(ABORT-CURRENT-COMMAND))
      (SEND ENTRY :REDO)
      (TYPEIN-LINE "~A redone." NAME))
    (PUSH ENTRY *UNDO-HISTORY*))
  (COMPUTE-CURRENT-MSG-STATE)
  DIS-TEXT)

(DEFFLAVOR UNDO-ENTRY (NAME) ()
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  (:REQUIRED-METHODS :UNDO :REDO :CHECK-FOR-KILLED-MSGS))

(DEFUN ZMAIL-UNDO-SAVE-OR-MULTIPLE (FLAVOR &REST OPTIONS)
  (IF *CURRENT-UNDO*
      (LEXPR-SEND *CURRENT-UNDO* ':SAVE-MULTIPLE-UNDO OPTIONS)
      (LEXPR-FUNCALL #'ZMAIL-UNDO-SAVE FLAVOR OPTIONS)))

(DEFUN ZMAIL-UNDO-SAVE (FLAVOR &REST OPTIONS)
  (COND ((TYPEP FLAVOR 'UNDO-ENTRY)
	 (SETQ *REDO-HISTORY* (DELQ FLAVOR *REDO-HISTORY*))
	 (SETQ *UNDO-HISTORY* (CONS FLAVOR (DELQ FLAVOR *UNDO-HISTORY*))))
	(T
	 (LET ((ENTRY (MAKE-INSTANCE FLAVOR)))
	   (PUSH ENTRY *UNDO-HISTORY*)
	   (LEXPR-SEND ENTRY ':SAVE-UNDO OPTIONS)))))

(DEFUN MSG-PUT-UNDOABLY (MSG PROP INDICATOR)
  (ZMAIL-UNDO-SAVE-OR-MULTIPLE 'UNDO-SINGLE ':MSG MSG ':INDICATOR INDICATOR)
  (MSG-PUT MSG PROP INDICATOR))

(DEFFLAVOR SINGLE-MSG-UNDO-MIXIN (MSG) ()
  (:REQUIRED-METHODS :SAVE-UNDO))

(DEFMETHOD (:CHECK-FOR-KILLED-MSGS SINGLE-MSG-UNDO-MIXIN) ()
  (EQ (MSG-PARSED-P MSG) ':KILLED))

(DEFMETHOD (:UNDO SINGLE-MSG-UNDO-MIXIN :AFTER) ()
  (SEND *SUMMARY-WINDOW* :NEED-TO-REDISPLAY-MSG MSG))

(DEFMETHOD (:REDO SINGLE-MSG-UNDO-MIXIN :AFTER) ()
  (SEND *SUMMARY-WINDOW* :NEED-TO-REDISPLAY-MSG MSG))

(DEFFLAVOR MULTIPLE-MSG-UNDO-MIXIN (MSGS) ()
  (:REQUIRED-FLAVORS UNDO-ENTRY)
  (:REQUIRED-METHODS :SAVE-MULTIPLE-UNDO)
  (:INIT-KEYWORDS :ESTIMATED-LENGTH))

(DEFMETHOD (:INIT MULTIPLE-MSG-UNDO-MIXIN :AFTER) (PLIST)
  (SETQ MSGS (MAKE-ARRAY (OR (GET PLIST ':ESTIMATED-LENGTH) 100)
			 ':FILL-POINTER 0)))

(DEFMETHOD (:ADD-MSG MULTIPLE-MSG-UNDO-MIXIN) (MSG &REST OTHER-ARRAYS)
  (LET ((INDEX (FILL-POINTER MSGS)))
    (UNLESS (ARRAY-PUSH MSGS MSG)
      (ARRAY-PUSH-EXTEND MSGS MSG)
      (DOLIST (ARRAY OTHER-ARRAYS)
	(ADJUST-ARRAY-SIZE ARRAY (ARRAY-LENGTH MSGS))))
    INDEX))

(DEFMETHOD (:UNDO MULTIPLE-MSG-UNDO-MIXIN) ()
  (LOOP FOR MSG BEING THE ARRAY-ELEMENTS OF MSGS USING (INDEX I)
	WHEN MSG DO (SEND SELF ':UNDO-1 MSG I))
  (SEND *SUMMARY-WINDOW* ':NEED-FULL-REDISPLAY))

(DEFMETHOD (:REDO MULTIPLE-MSG-UNDO-MIXIN) ()
  (LOOP FOR MSG BEING THE ARRAY-ELEMENTS OF MSGS USING (INDEX I)
	WHEN MSG DO (SEND SELF ':REDO-1 MSG I))
  (SEND *SUMMARY-WINDOW* ':NEED-FULL-REDISPLAY))

(DEFMETHOD (:CHECK-FOR-KILLED-MSGS MULTIPLE-MSG-UNDO-MIXIN) ()
  (LET ((OK 0))
    (LOOP FOR MSG BEING THE ARRAY-ELEMENTS OF MSGS USING (INDEX I)
	  WHEN (EQ (MSG-PARSED-P MSG) ':KILLED)
	  DO (ASET NIL MSGS I)
	  ELSE DO (INCF OK))
    (ZEROP OK)))

(DEFFLAVOR SYMMETRICAL-REDO-UNDO-MIXIN () ())

(DEFMETHOD (:REDO SYMMETRICAL-REDO-UNDO-MIXIN) ()
  (SEND SELF ':UNDO))

(DEFFLAVOR UNDO-SINGLE
	(INDICATOR VALUE)
	(SYMMETRICAL-REDO-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-SINGLE) (&KEY ((:MSG THE-MSG) NIL)
					  ((:INDICATOR THE-INDICATOR) NIL))
  (SETQ MSG THE-MSG INDICATOR THE-INDICATOR)
  (SETQ NAME (STRING-DOWNCASE INDICATOR))
  (SETQ VALUE (MSG-GET MSG INDICATOR)))

(DEFMETHOD (:UNDO UNDO-SINGLE) ()
  (SWAPF VALUE (MSG-GET MSG INDICATOR)))

(DEFFLAVOR UNDO-ADD-HEADER-TO-MSG
	(INDICATOR VALUE)
	(SYMMETRICAL-REDO-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-ADD-HEADER-TO-MSG) (&KEY ((:NAME THE-NAME) "add header")
						     ((:MSG THE-MSG) NIL)
						     ((:INDICATOR THE-INDICATOR) NIL))
  (SETQ NAME THE-NAME MSG THE-MSG INDICATOR THE-INDICATOR)
  (SETQ VALUE (MSG-GET MSG INDICATOR)))

(DEFMETHOD (:UNDO UNDO-ADD-HEADER-TO-MSG) ()
  (LET ((OLD (MSG-GET MSG INDICATOR)))
    (ADD-HEADER-TO-MSG MSG INDICATOR VALUE ':DELETE-IF-EMPTY T)
    (SETQ VALUE OLD)))

(DEFFLAVOR UNDO-SET-DEFAULT-CHARACTER-STYLE
	(PRIOR-DEFAULT-CHARACTER-STYLE)
	(SYMMETRICAL-REDO-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-SET-DEFAULT-CHARACTER-STYLE)
	   (&KEY ((:NAME THE-NAME) "set default character style")
		 ((:MSG THE-MSG) NIL))
  (SETQ NAME THE-NAME
	MSG THE-MSG
	PRIOR-DEFAULT-CHARACTER-STYLE (MSG-DEFAULT-CHARACTER-STYLE MSG)))

(DEFMETHOD (:UNDO UNDO-SET-DEFAULT-CHARACTER-STYLE) ()
  (LET ((CURRENT-DEFAULT-CHARACTER-STYLE (MSG-DEFAULT-CHARACTER-STYLE MSG)))
    (ADD-HEADER-TO-MSG MSG :DEFAULT-CHARACTER-STYLE PRIOR-DEFAULT-CHARACTER-STYLE
			   :DELETE-IF-EMPTY T)
    (WHEN (EQ MSG *MSG*)
      (SET-WINDOW-DEFAULT-CHARACTER-STYLE *MSG-WINDOW* PRIOR-DEFAULT-CHARACTER-STYLE))
    (SETQ PRIOR-DEFAULT-CHARACTER-STYLE CURRENT-DEFAULT-CHARACTER-STYLE)))

(DEFFLAVOR UNDO-MULTIPLE
	(NAME INDICATOR VALUES)
	(SYMMETRICAL-REDO-UNDO-MIXIN MULTIPLE-MSG-UNDO-MIXIN UNDO-ENTRY)
  (:GETTABLE-INSTANCE-VARIABLES NAME)
  (:INITABLE-INSTANCE-VARIABLES NAME INDICATOR))

(DEFMETHOD (:INIT UNDO-MULTIPLE :AFTER) (IGNORE)
  (SETQ VALUES (MAKE-ARRAY (ARRAY-LENGTH MSGS))))

(DEFMETHOD (:SAVE-MULTIPLE-UNDO UNDO-MULTIPLE) (&KEY MSG
						     ((:INDICATOR THE-INDICATOR) INDICATOR))
  (UNLESS (EQ THE-INDICATOR INDICATOR)
    (FERROR "Trying to undo save for wrong indicator."))
  (LET ((INDEX (SEND SELF ':ADD-MSG MSG VALUES)))
    (ASET (MSG-GET MSG INDICATOR) VALUES INDEX)))

(DEFMETHOD (:UNDO-1 UNDO-MULTIPLE) (MSG INDEX)
  (SWAPF (AREF VALUES INDEX) (MSG-GET MSG INDICATOR)))

(DEFFLAVOR UNDO-MOVE-MIXIN ((NAME "move to file")) ()
  (:REQUIRED-FLAVORS UNDO-ENTRY))

(DEFMETHOD (:UNDO-INTERNAL UNDO-MOVE-MIXIN) (MSG COPY SAVED-INDICATORS-LOC UNDO-P)
  (LOOP FOR INDICATOR IN '(DELETED FILED)
	DO (SWAPF (MSG-GET MSG INDICATOR) (GET SAVED-INDICATORS-LOC INDICATOR)))
  (MSG-PUT COPY UNDO-P 'DELETED)
  (SEND *SUMMARY-WINDOW* :NEED-TO-REDISPLAY-MSG COPY))

(DEFFLAVOR UNDO-MOVE
	(COPY INDICATORS-ALREADY-THERE)
	(SINGLE-MSG-UNDO-MIXIN UNDO-MOVE-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-MOVE) (&KEY ((:MSG THE-MSG) NIL)
					((:COPY THE-COPY) NIL))
  (SETQ MSG THE-MSG COPY THE-COPY)
  (SETQ INDICATORS-ALREADY-THERE (LOOP FOR INDICATOR IN '(DELETED FILED)
				       AS VALUE = (MSG-GET MSG INDICATOR)
				       WHEN VALUE
				         COLLECT INDICATOR AND COLLECT VALUE)))

(DEFMETHOD (:UNDO UNDO-MOVE) ()
  (SEND SELF ':UNDO-INTERNAL MSG COPY (LOCF INDICATORS-ALREADY-THERE) T))

(DEFMETHOD (:REDO UNDO-MOVE) ()
  (SEND SELF ':UNDO-INTERNAL MSG COPY (LOCF INDICATORS-ALREADY-THERE) NIL))

(DEFFLAVOR UNDO-MULTIPLE-MOVE
	(COPIES INDICATORS-ALREADY-THERE)
	(MULTIPLE-MSG-UNDO-MIXIN UNDO-MOVE-MIXIN UNDO-ENTRY))

(DEFMETHOD (:INIT UNDO-MULTIPLE-MOVE :AFTER) (IGNORE)
  (SETQ COPIES (MAKE-ARRAY (ARRAY-LENGTH MSGS))
	INDICATORS-ALREADY-THERE (MAKE-ARRAY (ARRAY-LENGTH MSGS))))

(DEFMETHOD (:SAVE-MULTIPLE-UNDO UNDO-MULTIPLE-MOVE) (&KEY MSG COPY)
  (LET ((INDEX (SEND SELF ':ADD-MSG MSG COPIES INDICATORS-ALREADY-THERE)))
    (ASET COPY COPIES INDEX)
    (ASET (LOOP FOR INDICATOR IN '(DELETED FILED)
		AS VALUE = (MSG-GET MSG INDICATOR)
		WHEN VALUE
		  COLLECT INDICATOR AND COLLECT VALUE)
	  INDICATORS-ALREADY-THERE INDEX)))

(DEFMETHOD (:UNDO-1 UNDO-MULTIPLE-MOVE) (MSG INDEX)
  (SEND SELF ':UNDO-INTERNAL MSG (AREF COPIES INDEX)
	(LOCF (AREF INDICATORS-ALREADY-THERE INDEX)) T))

(DEFMETHOD (:REDO-1 UNDO-MULTIPLE-MOVE) (MSG INDEX)
  (SEND SELF ':UNDO-INTERNAL MSG (AREF COPIES INDEX)
	(LOCF (AREF INDICATORS-ALREADY-THERE INDEX)) NIL))

(DEFFLAVOR UNDO-REARRANGE (SEQUENCE OLD-ARRAY) (SYMMETRICAL-REDO-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-REARRANGE) (&KEY ((:NAME THE-NAME) "rearrangement")
					     ((:SEQUENCE THE-SEQUENCE) NIL))
  (SETQ NAME THE-NAME
	SEQUENCE THE-SEQUENCE)
  (LET ((ARRAY (SEND SEQUENCE ':ARRAY)))
    (SETQ OLD-ARRAY (MAKE-ARRAY (ARRAY-ACTIVE-LENGTH ARRAY)))
    (COPY-ARRAY-CONTENTS ARRAY OLD-ARRAY)))

(DEFMETHOD (:UNDO UNDO-REARRANGE) ()
  (LET ((ARRAY (SEND SEQUENCE ':ARRAY)))
    (LOOP FOR I BELOW (ARRAY-ACTIVE-LENGTH ARRAY)
	  DO (SWAPF (AREF ARRAY I) (AREF OLD-ARRAY I))))
  (SEQUENCE-REARRANGED SEQUENCE))

(DEFMETHOD (:CHECK-FOR-KILLED-MSGS UNDO-REARRANGE) ()
  (OR (NOT (MEMQ SEQUENCE *SEQUENCE-LIST*))
      ( (ARRAY-LENGTH OLD-ARRAY)
	 (ARRAY-ACTIVE-LENGTH (SEND SEQUENCE ':ARRAY)))))

(DEFFLAVOR UNDO-REMOVE ((NAME "remove") COLLECTION INDEX) (SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-REMOVE) (&KEY ((:MSG THE-MSG) NIL)
					  ((:COLLECTION THE-COLLECTION) NIL)
					  ((:INDEX THE-INDEX) NIL))
  (SETQ MSG THE-MSG COLLECTION THE-COLLECTION INDEX THE-INDEX))

(DEFMETHOD (:UNDO UNDO-REMOVE) ()
  (SEND COLLECTION ':ADD-MSG MSG INDEX)
  (SEND *SUMMARY-WINDOW* ':NEED-FULL-REDISPLAY))

(DEFMETHOD (:REDO UNDO-REMOVE) ()
  (REMOVE-MSG COLLECTION MSG INDEX))

(DEFMETHOD (:CHECK-FOR-KILLED-MSGS UNDO-REMOVE) ()
  (OR (NOT (MEMQ COLLECTION *SEQUENCE-LIST*))
      (EQ (MSG-PARSED-P MSG) ':KILLED)))

(DEFFLAVOR UNDO-EDIT
	((NAME "edit") TEXT)
	(SYMMETRICAL-REDO-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-EDIT) (&KEY ((:MSG THE-MSG) NIL)
					((:NAME NEW-NAME) "edit"))
  (SETQ NAME NEW-NAME
	MSG THE-MSG
	TEXT (UNDO-EDIT-COPY-MSG-INTERVAL MSG)))

(DEFMETHOD (:UNDO UNDO-EDIT) ()
  (LET ((NEW-COPY (UNDO-EDIT-COPY-MSG-INTERVAL MSG)))
    (DELETE-INTERVAL (MSG-INTERVAL MSG))
    (INSERT-INTERVAL (MSG-END-BP MSG) TEXT)
    (SETQ TEXT NEW-COPY))
  (MSG-PUT MSG NIL 'REFORMATTED)		;the message is no longer reformatted
  (MSG-PUT MSG NIL 'ORIGINAL-HEADERS-INTERVAL)	;and the old original headers are also bogus
  (REPARSE-MSG MSG)
  (WHEN (EQ MSG *MSG*)
    (RECENTER-WINDOW *WINDOW* :START (MSG-START-BP *MSG*))))

(DEFUN UNDO-EDIT-COPY-MSG-INTERVAL (MSG)
  (LET ((MSG-INTERVAL-COPY (CREATE-INTERVAL)))
    (FLET ((COPY-SECTION (IGNORE START-BP &OPTIONAL END-BP IN-ORDER-P)
	     (DECLARE (SYS:DOWNWARD-FUNCTION))
	     (INSERT-INTERVAL (INTERVAL-LAST-BP MSG-INTERVAL-COPY)
			      START-BP END-BP IN-ORDER-P)))
      (MAP-OVER-MSG-INTERVALS MSG #'COPY-SECTION :USE-ORIGINAL-HEADER T))
    MSG-INTERVAL-COPY))

(DEFFLAVOR UNDO-KEYWORDS ((NAME "keywords") KEYWORDS)
	   (SYMMETRICAL-REDO-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-KEYWORDS) (&KEY ((:MSG THE-MSG)))
  (SETQ MSG THE-MSG KEYWORDS (MSG-GET MSG 'KEYWORDS)))

(DEFMETHOD (:UNDO UNDO-KEYWORDS) ()
  (LET ((NEW-KEYWORDS (MSG-GET MSG 'KEYWORDS)))
    (CHANGE-MSG-KEYWORDS MSG KEYWORDS NEW-KEYWORDS)
    (SETQ KEYWORDS NEW-KEYWORDS)))

(DEFFLAVOR UNDO-MULTIPLE-KEYWORDS ((NAME "keywords") KEYWORDS)
	   (SYMMETRICAL-REDO-UNDO-MIXIN MULTIPLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:INIT UNDO-MULTIPLE-KEYWORDS :AFTER) (IGNORE)
  (SETQ KEYWORDS (MAKE-ARRAY (ARRAY-LENGTH MSGS))))

(DEFMETHOD (:SAVE-MULTIPLE-UNDO UNDO-MULTIPLE-KEYWORDS) (&KEY MSG)
  (LET ((INDEX (SEND SELF ':ADD-MSG MSG KEYWORDS)))
    (ASET (MSG-GET MSG 'KEYWORDS) KEYWORDS INDEX)))

(DEFMETHOD (:UNDO-1 UNDO-MULTIPLE-KEYWORDS) (MSG INDEX)
  (LET ((NEW-KEYWORDS (MSG-GET MSG 'KEYWORDS)))
    (CHANGE-MSG-KEYWORDS MSG (AREF KEYWORDS INDEX) NEW-KEYWORDS)
    (ASET NEW-KEYWORDS KEYWORDS INDEX)))

(DEFFLAVOR UNDO-ENCRYPTION ((NAME "encryption") ENCRYPTED TEXT)
  (SYMMETRICAL-REDO-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-ENCRYPTION) (&KEY ((:NAME THE-NAME) "encryption") ((:MSG THE-MSG)))
  (SETQ NAME THE-NAME
	MSG THE-MSG)
  (MULTIPLE-VALUE-BIND (START-BP END-BP)
      (MSG-BODY-INTERVAL MSG)
    (SETQ TEXT (COPY-INTERVAL START-BP END-BP T)))
  (SETQ ENCRYPTED (MSG-GET MSG :ENCRYPTED)))

(DEFMETHOD (:CHECK-FOR-KILLED-MSGS UNDO-ENCRYPTION) ()
  (OR (EQ (MSG-PARSED-P MSG) ':KILLED)
      (NEQ (NOT ENCRYPTED) (NOT (NULL (MSG-GET MSG ':ENCRYPTED))))))

(DEFMETHOD (:UNDO UNDO-ENCRYPTION) ()
  (MULTIPLE-VALUE-BIND (START-BP END-BP)
      (MSG-BODY-INTERVAL MSG)
    (LET ((NEW-TEXT (COPY-INTERVAL START-BP END-BP T))
	  (NEW-ENCRYPTED (MSG-GET MSG :ENCRYPTED)))
      (DELETE-INTERVAL START-BP END-BP T)
      (INSERT-INTERVAL END-BP TEXT)
      (ADD-HEADER-TO-MSG MSG :ENCRYPTED ENCRYPTED :DELETE-IF-EMPTY T)
      (UPDATE-MSG-CHARACTER-TYPE-MAPPINGS MSG)
      (SETQ TEXT NEW-TEXT ENCRYPTED NEW-ENCRYPTED))))

(DEFFLAVOR UNDO-CONCATENATE ((NAME "concatenate") TEXT HEADERS-BEFORE DELETEDS)
	   (SYMMETRICAL-REDO-UNDO-MIXIN MULTIPLE-MSG-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN
	    UNDO-ENTRY))

(DEFMETHOD (:INIT UNDO-CONCATENATE :AFTER) (IGNORE)
  (SETQ DELETEDS (MAKE-ARRAY (ARRAY-LENGTH MSGS))))

(DEFMETHOD (:SAVE-UNDO UNDO-CONCATENATE) (&KEY ((:MSG THE-MSG) NIL))
  (SETQ MSG THE-MSG)
  (SETQ TEXT (MULTIPLE-VALUE-BIND (START-BP END-BP)
		 (MSG-BODY-INTERVAL MSG)
	       (COPY-INTERVAL START-BP END-BP T))
	HEADERS-BEFORE (LOOP FOR INDICATOR IN '(FONT-ALIST REFERENCES MSG-IDS
						:INCLUDED-MSGS :INCLUDED-REFERENCES)
			     COLLECT INDICATOR COLLECT (MSG-GET MSG INDICATOR))))

(DEFMETHOD (:SAVE-MULTIPLE-UNDO UNDO-CONCATENATE) (&KEY ((:MSG THIS-MSG))
							(INDICATOR 'DELETED))
  (UNLESS (EQ INDICATOR 'DELETED)
    (FERROR "Wrong indicator given."))
  (LET ((INDEX (SEND SELF ':ADD-MSG THIS-MSG DELETEDS)))
    (SETF (AREF DELETEDS INDEX) (MSG-GET THIS-MSG 'DELETED))))

(DEFMETHOD (:UNDO UNDO-CONCATENATE) ()
  (MULTIPLE-VALUE-BIND (START-BP END-BP)
      (MSG-BODY-INTERVAL MSG)
    (LET ((NEW-TEXT (COPY-INTERVAL START-BP END-BP T)))
      (DELETE-INTERVAL START-BP END-BP T)
      (INSERT-INTERVAL END-BP TEXT)
      (SETQ TEXT NEW-TEXT)))
  (WITH-MSG-REDISPLAY-DELAYED
    (UPDATE-MSG-CHARACTER-TYPE-MAPPINGS MSG)
    (LOOP FOR INDICATOR IN '(REFERENCES MSG-IDS)
	  DO (SWAPF (MSG-GET MSG INDICATOR) (GET (LOCF HEADERS-BEFORE) INDICATOR)))
    (LOOP FOR INDICATOR IN '(:INCLUDED-MSGS :INCLUDED-REFERENCES)
	  DO (LET ((OLD-VALUE (MSG-GET MSG INDICATOR)))
	       (ADD-HEADER-TO-MSG MSG INDICATOR (GET (LOCF HEADERS-BEFORE) INDICATOR)
				  :DELETE-IF-EMPTY T)
	       (SETF (GET (LOCF HEADERS-BEFORE) INDICATOR) OLD-VALUE))))
  (LOOP FOR A-MSG BEING THE ARRAY-ELEMENTS OF MSGS USING (INDEX I)
	DO (SWAPF (MSG-GET A-MSG 'DELETED) (AREF DELETEDS I)))
  (SEND *SUMMARY-WINDOW* :NEED-FULL-REDISPLAY))

(DEFFLAVOR UNDO-DRAFT-MSG ((NAME "sending message") DRAFT-MSG) (UNDO-ENTRY)
  (:INITABLE-INSTANCE-VARIABLES DRAFT-MSG))

(DEFMETHOD (:CHECK-FOR-KILLED-MSGS UNDO-DRAFT-MSG) ()
  (AND (SEND DRAFT-MSG ':OPERATION-HANDLED-P ':SENT-P)
       (NOT (SEND DRAFT-MSG ':SENT-P))))

(DEFMETHOD (:SAVE-UNDO UNDO-DRAFT-MSG) (&KEY ((:DRAFT-MSG NEW-DRAFT-MSG) DRAFT-MSG))
  (SETQ DRAFT-MSG NEW-DRAFT-MSG))

(DEFMETHOD (:UNDO UNDO-DRAFT-MSG) ()
  (REVOKE-MSG-INTERNAL :DRAFT-MSGS (LIST DRAFT-MSG)))

(DEFMETHOD (:REDO UNDO-DRAFT-MSG) ()
  (SEND DRAFT-MSG ':TRANSMIT))

(DEFFLAVOR UNDO-REFORMAT ((NAME "reformat headers"))
	   (SYMMETRICAL-REDO-UNDO-MIXIN SINGLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-REFORMAT) (&KEY ((:MSG THE-MSG) NIL))
  (SETQ MSG THE-MSG))

(DEFMETHOD (:UNDO UNDO-REFORMAT) ()
  (IF (MSG-GET MSG 'REFORMATTED)
      (UNREFORMAT-HEADERS MSG)
      (REFORMAT-HEADERS MSG))
  (WHEN (EQ MSG *MSG*)
    (RECENTER-WINDOW *WINDOW* ':START (MSG-START-BP *MSG*))))

(DEFFLAVOR UNDO-MULTIPLE-REFORMAT ((NAME "reformat headers"))
	   (SYMMETRICAL-REDO-UNDO-MIXIN MULTIPLE-MSG-UNDO-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-MULTIPLE-UNDO UNDO-MULTIPLE-REFORMAT) (&KEY MSG)
  (SEND SELF :ADD-MSG MSG))

(DEFMETHOD (:UNDO-1 UNDO-MULTIPLE-REFORMAT) (MSG IGNORE)
  (IF (MSG-GET MSG 'REFORMATTED)
      (UNREFORMAT-HEADERS MSG)
      (REFORMAT-HEADERS MSG))
  (WHEN (EQ MSG *MSG*)
    (RECENTER-WINDOW *WINDOW* :START (MSG-START-BP *MSG*))))

(DEFFLAVOR UNDO-UNDIGESTIFY-MIXIN
	((NAME "undigestify"))
	()
  (:REQUIRED-FLAVORS UNDO-ENTRY))

(DEFMETHOD (:UNDO-INTERNAL UNDO-UNDIGESTIFY-MIXIN) (MSG UNDIGESTED-MSGS)
  (DOLIST (OTHER-MSG UNDIGESTED-MSGS)
    (UNLESS (EQ (MSG-PARSED-P OTHER-MSG) :KILLED)
      (MSG-PUT OTHER-MSG T 'DELETED)))
  (ADD-HEADER-TO-MSG MSG :REFERENCES NIL :DELETE-IF-EMPTY T)
  (SEND *SUMMARY-WINDOW* :NEED-FULL-REDISPLAY))

(DEFMETHOD (:REDO-INTERNAL UNDO-UNDIGESTIFY-MIXIN) (MSG UNDIGESTED-MSGS)
  (DOLIST (OTHER-MSG UNDIGESTED-MSGS)
    (UNLESS (EQ (MSG-PARSED-P OTHER-MSG) :KILLED)
      (MSG-PUT OTHER-MSG NIL 'DELETED)))
  (ADD-HEADER-TO-MSG MSG :REFERENCES
		     (LOOP FOR MSG IN UNDIGESTED-MSGS COLLECT (CDAR (GET-MSG-IDS MSG))))
  (SEND *SUMMARY-WINDOW* :NEED-FULL-REDISPLAY))

(DEFFLAVOR UNDO-UNDIGESTIFY
	(UNDIGESTED-MSGS)
	(SINGLE-MSG-UNDO-MIXIN UNDO-UNDIGESTIFY-MIXIN UNDO-ENTRY))

(DEFMETHOD (:SAVE-UNDO UNDO-UNDIGESTIFY) (&KEY ((:MSG THE-MSG) NIL)
					       ((:UNDIGESTED-MSGS THE-UNDIGESTED-MSGS) NIL))
  (SETQ MSG THE-MSG
	UNDIGESTED-MSGS THE-UNDIGESTED-MSGS))

(DEFMETHOD (:UNDO UNDO-UNDIGESTIFY) ()
  (SEND SELF :UNDO-INTERNAL MSG UNDIGESTED-MSGS))

(DEFMETHOD (:REDO UNDO-UNDIGESTIFY) ()
  (SEND SELF :REDO-INTERNAL MSG UNDIGESTED-MSGS))

(DEFFLAVOR UNDO-MULTIPLE-UNDIGESTIFY
	(UNDIGESTED-MSGS-ARRAY)
	(MULTIPLE-MSG-UNDO-MIXIN UNDO-UNDIGESTIFY-MIXIN UNDO-ENTRY))

(DEFMETHOD (:INIT UNDO-MULTIPLE-UNDIGESTIFY :AFTER) (IGNORE)
  (SETF UNDIGESTED-MSGS-ARRAY (MAKE-ARRAY (ARRAY-LENGTH MSGS))))

(DEFMETHOD (:SAVE-MULTIPLE-UNDO UNDO-MULTIPLE-UNDIGESTIFY) (&KEY MSG UNDIGESTED-MSGS)
  (LET ((INDEX (SEND SELF :ADD-MSG MSG UNDIGESTED-MSGS)))
    (SETF (AREF UNDIGESTED-MSGS-ARRAY INDEX) UNDIGESTED-MSGS)))

(DEFMETHOD (:UNDO-1 UNDO-MULTIPLE-UNDIGESTIFY) (MSG INDEX)
  (SEND SELF :UNDO-INTERNAL MSG (AREF UNDIGESTED-MSGS-ARRAY INDEX)))

(DEFMETHOD (:REDO-1 UNDO-MULTIPLE-UNDIGESTIFY) (MSG INDEX)
  (SEND SELF :REDO-INTERNAL MSG (AREF UNDIGESTED-MSGS-ARRAY INDEX)))

(DEFUN CLEAR-ZMAIL-HISTORIES ()
  (DOLIST (H '(*ADDRESS-HISTORY* *ZMAIL-JUNK-MINI-BUFFER-HISTORY*))
    (SEND (SYMEVAL H) ':RESET))
  (SETQ *UNDO-HISTORY* NIL *REDO-HISTORY* NIL))

(ADD-INITIALIZATION "Reset Zmail histories"
		    '(CLEAR-ZMAIL-HISTORIES)
		    '(BEFORE-COLD))
