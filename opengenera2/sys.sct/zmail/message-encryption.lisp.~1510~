;;; -*-  Mode: LISP; Package: ZWEI; Base: 8 -*-
;;; Encryption routines
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Header interface.

0(DEFINE-HEADER-TYPE-TYPE :ENCRYPTED (:HEADER)
  (:PARSE-FUNCTION PARSE-ENCRYPTED-HEADER)
  (:PRINT-FUNCTION PRINT-ENCRYPTED-HEADER))

(DEFINE-HEADER-TYPE :ENCRYPTED "Encrypted" :ENCRYPTED)

(DEFUN PARSE-ENCRYPTED-HEADER (TYPE START-LINE START-INDEX END-LINE)
  (MULTIPLE-VALUE (START-LINE START-INDEX)
    (PARSE-ONE-HEADER-INTERNAL START-LINE START-INDEX END-LINE))
  (PARSING-HEADERS (PARSE-ERROR)
    (LET* ((END-INDEX (STRING-SEARCH-CHAR #\SP START-LINE START-INDEX))
	   (METHOD (ENCRYPTION-HEADER-NAME-TYPE START-LINE START-INDEX END-INDEX)))
      (LIST TYPE METHOD))))

(DEFUN PRINT-ENCRYPTED-HEADER (STREAM ENCRYPTION-TYPE NAME IGNORE IGNORE)
  (PRINTING-HEADERS (STREAM NAME ENCRYPTION-TYPE :MULTIPLE-VALUES :SEPARATE-FIELDS)
    (FORMAT STREAM "~A" (ENCRYPTION-TYPE-HEADER-NAME ENCRYPTION-TYPE))))

(DEFMETHOD (:EXPANSION-KEYWORD TRANSMISSION-TEMPLATE :STANDARD-ENCRYPTED) (PLIST)
  (LET ((FIELD (SEND (GET PLIST :DRAFT-MSG) :HEADER-FIELD :ENCRYPTED)))
    (WHEN FIELD
      (LET ((ENV (ENCRYPT:ENCRYPTION-METHOD-MESSAGE-ENVELOPE FIELD)))
	(WHEN ENV
	  (SEND SELF :ADD-TEXT PLIST ENV)))
      (SEND SELF :ADD-HEADER PLIST :ENCRYPTED FIELD))))

(DEFFLAVOR UNKNOWN-ENCRYPTION-METHOD (STRING START-INDEX END-INDEX) (PARSE-ERROR)
  (:INITABLE-INSTANCE-VARIABLES))

(DEFMETHOD (:REPORT UNKNOWN-ENCRYPTION-METHOD) (STREAM)
  (FORMAT STREAM "Unknown encryption method ~A in ~S"
	  (SUBSTRING STRING START-INDEX END-INDEX) STRING))

(DEFMETHOD (:POSITION-AND-REPORT UNKNOWN-ENCRYPTION-METHOD) (STREAM)
  (FORMAT STREAM "Unknown encryption method ~A" (SUBSTRING STRING START-INDEX END-INDEX))
  (VALUES STRING START-INDEX))

(DEFUN ENCRYPTION-HEADER-NAME-TYPE (STRING &OPTIONAL (START 0) END)
  (OR (ENCRYPT:ENCRYPTION-METHOD-FROM-MESSAGE-HEADER-NAME STRING START END)
      (ERROR 'UNKNOWN-ENCRYPTION-METHOD :STRING STRING :START-INDEX START :END-INDEX END)))

(DEFUN ENCRYPTION-TYPE-HEADER-NAME (TYPE)
  (ENCRYPT:ENCRYPTION-METHOD-MESSAGE-HEADER-NAME TYPE))

1;;; Commands.

0(DEFCOM-FOR-ZMAIL COM-ENCRYPT-TEXT "Encrypt the text of the current draft." ()
  (RESEPARATE-HEADER-AND-TEXT)
  (LET ((METHOD (GET-ENCRYPTION-METHOD-FROM-USER "draft"
						 (PARSE-HEADERS-INTERVAL *HEADER-INTERVAL*))))
    (LET ((ENCRYPTED-INTERVAL (ENCRYPT-INTERVAL METHOD *REPLY-INTERVAL*)))
      (WITH-UNDO-SAVE ("encrypt"
		       ;; Specify BP's, rather than just interval, so change gets recorded
		       (INTERVAL-FIRST-BP *REPLY-INTERVAL*)
		       (INTERVAL-LAST-BP *REPLY-INTERVAL*)
		       T)
	(DELETE-INTERVAL (INTERVAL-FIRST-BP *REPLY-INTERVAL*)
			 (INTERVAL-LAST-BP *REPLY-INTERVAL*) T)
	(INSERT-INTERVAL (INTERVAL-LAST-BP *REPLY-INTERVAL*) ENCRYPTED-INTERVAL)))
    (LET ((BP (ADD-HEADER-FIELD :ENCRYPTED T NIL NIL)))
      (INSERT BP (ENCRYPTION-TYPE-HEADER-NAME METHOD)))
    (MUST-REDISPLAY *HEADER-WINDOW* DIS-TEXT)
    (MUST-REDISPLAY *REPLY-WINDOW* DIS-TEXT)
    DIS-TEXT))

(DEFCOM-FOR-ZMAIL COM-DECRYPT-TEXT "Decrypt the text of the current draft." ()
  (RESEPARATE-HEADER-AND-TEXT)
  (LET ((METHOD (CL:GETF (PARSE-HEADERS-INTERVAL *HEADER-INTERVAL*) :ENCRYPTED)))
    (UNLESS METHOD
      (BARF "This draft is not encrypted."))
    (LET ((DECRYPTED-INTERVAL (DECRYPT-INTERVAL METHOD *REPLY-INTERVAL*)))
      (WITH-UNDO-SAVE ("decrypt"
		       ;; Specify BP's, rather than just interval, so change gets recorded
		       (INTERVAL-FIRST-BP *REPLY-INTERVAL*)
		       (INTERVAL-LAST-BP *REPLY-INTERVAL*)
		       T)
	(DELETE-INTERVAL (INTERVAL-FIRST-BP *REPLY-INTERVAL*)
			 (INTERVAL-LAST-BP *REPLY-INTERVAL*) T)
	(INSERT-INTERVAL (INTERVAL-LAST-BP *REPLY-INTERVAL*) DECRYPTED-INTERVAL)))
    (ADD-HEADER-FIELD :ENCRYPTED T T NIL)
    (MUST-REDISPLAY *HEADER-WINDOW* DIS-TEXT)
    (MUST-REDISPLAY *REPLY-WINDOW* DIS-TEXT)
    DIS-TEXT))

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-ENCRYPT-MSG
  "Encrypt the current message."
				()
  (ENCRYPT-MSG *MSG*)
  DIS-TEXT)

(DEFUN ENCRYPT-MSG (MSG)
  (ASSURE-MSG-PARSED MSG)
  (LET ((METHOD (GET-ENCRYPTION-METHOD-FROM-USER "message" (MSG-STATUS MSG))))
    (ZMAIL-UNDO-SAVE 'UNDO-ENCRYPTION :MSG MSG)
    (MULTIPLE-VALUE-BIND (BODY-START-BP BODY-END-BP)
	(MSG-BODY-INTERVAL MSG)
      (LET ((ENVELOPE (ENCRYPT:ENCRYPTION-METHOD-MESSAGE-ENVELOPE METHOD))
	    (ENCRYPTED-INTERVAL (ENCRYPT-INTERVAL METHOD BODY-START-BP BODY-END-BP T)))
	(DELETE-INTERVAL BODY-START-BP BODY-END-BP T)
	(WHEN ENVELOPE
	  (INSERT (MSG-END-BP MSG) ENVELOPE))
	(INSERT-INTERVAL (MSG-END-BP MSG) ENCRYPTED-INTERVAL)))
    (ADD-HEADER-TO-MSG MSG :ENCRYPTED METHOD)
    (UPDATE-MSG-CHARACTER-TYPE-MAPPINGS MSG)))

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-DECRYPT-MSG
  "Decrypt the current message.
With an argument, the text is stored back into the message."
				(NUMERIC-ARG-OK)
  (DECRYPT-MSG *MSG* *NUMERIC-ARG-P*)
  (IF *NUMERIC-ARG-P*
      DIS-TEXT
      DIS-NONE))

(DEFUN DECRYPT-MSG (MSG REPLACE-TEXT)
  (LET ((METHOD (GET (ASSURE-MSG-PARSED MSG) :ENCRYPTED)))
    (UNLESS METHOD
      (BARF "This message isn't encrypted."))
    (MULTIPLE-VALUE-BIND (BODY-START-BP BODY-END-BP)
	(MSG-BODY-INTERVAL MSG)
      (LET ((DECRYPTED-INTERVAL (DECRYPT-INTERVAL METHOD BODY-START-BP BODY-END-BP T)))
	(IF REPLACE-TEXT
	    (BLOCK INSTALL-DECRYPTION
	      (ZMAIL-UNDO-SAVE 'UNDO-ENCRYPTION :NAME "decryption" :MSG MSG)
	      (DELETE-INTERVAL BODY-START-BP BODY-END-BP T)
	      (INSERT-INTERVAL (MSG-END-BP MSG) DECRYPTED-INTERVAL)
	      (ADD-HEADER-TO-MSG MSG :ENCRYPTED NIL :DELETE-IF-EMPTY T)
	      (UPDATE-MSG-CHARACTER-TYPE-MAPPINGS MSG))
	    (BLOCK SHOW-DECRYPTION
	      (DW:WITH-OUTPUT-RECORDING-DISABLED (STANDARD-OUTPUT)
		(STREAM-OUT-INTERVAL STANDARD-OUTPUT (MSG-START-BP MSG) BODY-START-BP T)
		(STREAM-OUT-INTERVAL STANDARD-OUTPUT DECRYPTED-INTERVAL)
		(KILL-INTERVAL DECRYPTED-INTERVAL))))))))

1;;; Returns a decrypted copy of the text.
0(DEFUN MSG-DECRYPTED-BODY-INTERVAL (MSG)
  (LET ((METHOD (GET (ASSURE-MSG-PARSED MSG) :ENCRYPTED)))
    (UNLESS METHOD
      (BARF "This message is not encrypted."))
    (MULTIPLE-VALUE-BIND (BODY-START-BP BODY-END-BP)
	(MSG-BODY-INTERVAL MSG)
      (DECRYPT-INTERVAL METHOD BODY-START-BP BODY-END-BP T))))

(DEFINE-ZMAIL-GLOBAL *LAST-ENCRYPTION-METHOD* NIL)

(DEFUN GET-ENCRYPTION-METHOD-FROM-USER (OBJECT HEADERS)
  (WHEN (CL:GETF HEADERS :ENCRYPTED)
    (BARF "This ~A is already encrypted." OBJECT))
  1;; Kludge that knows how encryption methods are remembered.
0  (SETQ *LAST-ENCRYPTION-METHOD* 
	(IF (= (LENGTH ENCRYPT::*ENCRYPTION-METHODS-ALIST*) 1)
	    (TV:MENU-EXECUTE-NO-SIDE-EFFECTS (FIRST ENCRYPT::*ENCRYPTION-METHODS-ALIST*))
	    (TYPEIN-LINE-ACCEPT 'ENCRYPT:ENCRYPTION-METHOD
				:PROMPT "Select an encryption technique"
				:DEFAULT *LAST-ENCRYPTION-METHOD*)))
  *LAST-ENCRYPTION-METHOD*)
