;;; Lisp Machine mail reader -*- Base: 8; Mode: LISP; Package: ZWEI -*- 
;;; Command loop and primitives for Zmail
;;; Definitions are in DEFS
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; The command loops
(DEFFLAVOR ZMAIL-FRAME-MIXIN
	(*GLOBAL-MODE-LINE-WINDOW*)		;Local version of mode line
	()
  (:REQUIRED-FLAVORS TOP-LEVEL-EDITOR TV:CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER)
  (:SPECIAL-INSTANCE-VARIABLES *GLOBAL-MODE-LINE-WINDOW*)	;only to defeat idiot warning
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :EDIT))		;..

(DEFUN-IN-FLAVOR (CREATE-ZMAIL-WINDOW ZMAIL-FRAME-MIXIN) (NAME &OPTIONAL PROFILE-P)
  (LET* ((SHEET (SEND SELF :GET-PANE NAME))
	 (INTERVAL-NAME (ZMAIL-WINDOW-INTERVAL-NAME SHEET))
	 (WINDOW (SEND SHEET :ZWEI-WINDOW))
	 (INTERVAL (IF PROFILE-P
		       (MAKE-INSTANCE 'ZMAIL-PROFILE-INTERVAL
				      :PATHNAME (ZMAIL-PROFILE-PATHNAME :LISP))
		     (MAKE-INSTANCE 'ZMAIL-INTERVAL :NAME INTERVAL-NAME))))
    (LET ((LINE (CREATE-LINE 'ART-STRING 0 INTERVAL)))
      (SETF (INTERVAL-FIRST-BP INTERVAL) (CREATE-BP LINE 0 :NORMAL INTERVAL))
      (SETF (INTERVAL-LAST-BP INTERVAL) (CREATE-BP LINE 0 :MOVES INTERVAL)))
    (SET-WINDOW-INTERVAL WINDOW INTERVAL)
    (VALUES WINDOW INTERVAL)))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;; Creating a TOP-LEVEL-EDITOR may do a PKG-GOTO to the package associated with the editor's
;;; initial interval.  Therefore, we must restore the standard binding of the package via
;;; another PKG-GOTO.  We can't simply PKG-GOTO the package in force at the time as it may
;;; be a local binding from executing the (INITIALIZE-ZMAIL) initialization when first loading
;;; Zmail into a world.  Therefore, we remember the setting in SI:*STANDARD-BINDINGS*.  (There
;;; ought to be a macro that does this for us.)
0(DEFWHOPPER (:INIT ZMAIL-FRAME-MIXIN) (&REST ARGS)
  (LET ((STANDARD-PACKAGE (SECOND (ASSQ 'CL:*PACKAGE* SI:*STANDARD-BINDINGS*))))
    (LEXPR-CONTINUE-WHOPPER ARGS)
    (PKG-GOTO STANDARD-PACKAGE)))

(DEFMETHOD (:INIT ZMAIL-FRAME-MIXIN :AFTER) (IGNORE)
  (SETQ *GLOBAL-MODE-LINE-WINDOW* (SEND SELF ':GET-PANE 'MODE-LINE-WINDOW)))

(DEFMETHOD (:MODE-LINE-WINDOW ZMAIL-FRAME-MIXIN) ()
  *GLOBAL-MODE-LINE-WINDOW*)

(DEFFLAVOR ZMAIL-COMMAND-LOOP-MIXIN
	((*COMTAB* *STANDARD-COMTAB*)		;For the mode comtab to indirect to
	 (BACKGROUND-IO-BUFFER			;For communication from the background process
	   (TV:MAKE-IO-BUFFER 100))		;to the foreground process.
	 )
	()
  (:REQUIRED-METHODS :TOP-LEVEL-TAG :PROCESS-COMMAND-CHAR :PROCESS-SPECIAL-COMMAND)
  (:REQUIRED-FLAVORS TOP-LEVEL-EDITOR)
  (:GETTABLE-INSTANCE-VARIABLES BACKGROUND-IO-BUFFER)
  (:SPECIAL-INSTANCE-VARIABLES *COMTAB*)
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :COMMAND-LOOP :EDIT))

(DEFWHOPPER (:EDIT ZMAIL-COMMAND-LOOP-MIXIN) ()
  (LET ((*COMMAND-ALIST* `(,@*ZMAIL-EDITOR-COMMAND-ALIST* ,@*COMMAND-ALIST*)))
    (CONTINUE-WHOPPER)))

(DEFVAR *CURRENT-ZMAIL-COMMAND-LOOP*)

(DEFWHOPPER (:COMMAND-LOOP ZMAIL-COMMAND-LOOP-MIXIN) ()
  (MULTIPLE-VALUE-BIND (TERMINAL-IO STANDARD-INPUT STANDARD-OUTPUT QUERY-IO)
      (SEND SELF :TERMINAL-STREAMS)
    (DECLARE (SPECIAL STANDARD-INPUT))		;Might be declared instance-variable
    (CONDITION-BIND ((UNKNOWN-SPECIAL-COMMAND #'ZMAIL-COMMAND-LOOP-UNKNOWN-SPECIAL-COMMAND)
		     (FS:LOGIN-REQUIRED 'SELECT-QUERY-IO-WHEN-GETTING-USER-ID))
      (LET ((*CURRENT-COMMAND-LOOP* SELF)
	    (*CURRENT-ZMAIL-COMMAND-LOOP* SELF))
	(SI:WITH-PROCESS-INTERACTIVE-PRIORITY ()
	  (CONTINUE-WHOPPER))))))

;; *LAST-COMMAND-CHAR* should be either a character or a list when this function returns.

(DEFUN ZMAIL-INPUT (IO-BUFFER)
  (LABELS ((INPUT-WAIT ()
	     (DECLARE (SYS:DOWNWARD-FUNCTION))
	     (TV:IO-BUFFER-NOT-EMPTY-P IO-BUFFER)))
    (SI:WITH-PROCESS-INTERACTIVE-PRIORITY ()
      (LOOP DO (SETQ *LAST-COMMAND-CHAR*
		     (LET ((*COMTAB* (SEND *CURRENT-COMMAND-LOOP* :MOUSE-GESTURE-COMTAB)))
		       (EDITOR-INPUT :ANY-TYI 'COMMAND
				     :NOTIFICATION T
				     :INPUT-WAIT #'INPUT-WAIT)))
	    UNTIL (OR (CHARACTERP *LAST-COMMAND-CHAR*)
		      (LISTP *LAST-COMMAND-CHAR*)
		      (AND (EQ *LAST-COMMAND-CHAR* T)
			   (SETQ *LAST-COMMAND-CHAR* (TV:IO-BUFFER-GET IO-BUFFER T))))))))

1;;; *ZMAIL-STANDALONE-COMTAB* exists soley to allow Mouse-Left in the editor windows of
;;; Zmail's profile editor and Zmail's filter and universe definition frames to invoke
;;; the editor on said windows.  It is not useable for any other purpose and, in particular,
;;; should (2 0 (NIL 0) (NIL :BOLD-ITALIC NIL) "CPTFONTBI")never1 be used as the *COMTAB* or *MODE-COMTAB* of an editor.  Also, it should
;;; 2never1 be used as the target of another comtab's indirection.
0(DEFVAR *ZMAIL-STANDALONE-COMTAB* (CREATE-COMTAB "Zmail standalone"))

(DEFMETHOD (:MOUSE-GESTURE-COMTAB ZMAIL-COMMAND-LOOP-MIXIN) () *ZMAIL-STANDALONE-COMTAB*)

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR ZMAIL-STANDALONE-EDIT
                             (BP "Edit" *ZMAIL-STANDALONE-COMTAB*
				 :BLANK-AREA T
				 :GESTURE :SELECT
				 :TESTER ((BP &KEY WINDOW)
					  (OR BP
					      (SEND-IF-HANDLES WINDOW :ZWEI-WINDOW))))
			     (BP &KEY WINDOW)
  `(ZMAIL-STANDALONE-EDIT ,(OR BP (MOUSE-BP (SEND WINDOW :ZWEI-WINDOW)))))

;;; Invoke the editor on a pane in one of Zmail's non-message frames --
;;;    We must rebind *COMTAB* as, in order to get here, *COMTAB* will be bound to
;;;    *ZMAIL-STANDALONE-COMTAB* which is a useless comtab for editing.
(DEFUN ZMAIL-STANDALONE-EDIT (BP)
  (UNWIND-PROTECT
      (LET ((TERMINAL-IO (WINDOW-TYPEOUT-WINDOW *WINDOW*)))
	(LETF (((SYMEVAL-IN-INSTANCE *CURRENT-COMMAND-LOOP* '*TYPEOUT-WINDOW*) TERMINAL-IO))
	  (WITH-SPECIAL-INSTANCE-VARS-BOUND-OUTSIDE-INSTANCE ((*COMTAB* *MODE-COMTAB*))
	    (MOVE-BP (WINDOW-POINT *WINDOW*) BP)
	    (MUST-REDISPLAY *WINDOW* DIS-BPS)
	    (SEND *CURRENT-COMMAND-LOOP* :EDIT))))
    (SEND *CURRENT-COMMAND-LOOP* :SELECT-RELATIVE))
  DIS-NONE)

(DEFMETHOD (:COMMAND-LOOP ZMAIL-COMMAND-LOOP-MIXIN :BEFORE) ()
  (TV:PROCESS-TYPEAHEAD TV:IO-BUFFER
			#'(LAMBDA (CH)
			    (IF (AND (LISTP CH)
				     (MEMQ (CAR CH) '(REDISPLAY SELECT-WINDOW
						      CONFIGURATION-CHANGED)))
				NIL CH))))

(DEFMETHOD (:COMMAND-LOOP ZMAIL-COMMAND-LOOP-MIXIN) ()
  (*CATCH (SEND SELF :TOP-LEVEL-TAG)
    (DO ((LAST-COMMAND-RESULT))
	(NIL)
      (*CATCH 'RETURN-TO-COMMAND-LOOP
	(CATCH-ERROR-RESTART ((ERROR SYS:ABORT) "Return to the Zmail Command Loop")
	  (WHEN (*CATCH 'TOP-LEVEL
		  (CATCH-ZWEI-COMMAND-LOOP
		    (PROG1
		      NIL
		      (SEND SELF :REDISPLAY
			    (EQ LAST-COMMAND-RESULT :REDISPLAY-PRESERVE-TYPEIN))
		      (TICK)
		      (ZMAIL-INPUT BACKGROUND-IO-BUFFER)
		      (SETQ LAST-COMMAND-RESULT
			    (COND ((LISTP *LAST-COMMAND-CHAR*)
				   (LEXPR-SEND SELF
					       :PROCESS-SPECIAL-COMMAND *LAST-COMMAND-CHAR*))
				  (T
				   (SEND SELF :PROCESS-COMMAND-CHAR *LAST-COMMAND-CHAR*)))))))
	    (SEND *TYPEOUT-WINDOW* :MAKE-COMPLETE)))))))

(DEFUN ZMAIL-COMMAND-LOOP-UNKNOWN-SPECIAL-COMMAND (CONDITION)
  (WHEN (MEMQ (SEND CONDITION ':COMMAND-TYPE)
	      (SEND *CURRENT-ZMAIL-COMMAND-LOOP* ':PROCESS-SPECIAL-COMMAND
		    ':WHICH-OPERATIONS))
    (SEND STANDARD-INPUT ':UNTYI *LAST-COMMAND-CHAR*)
    (*THROW 'RETURN-TO-COMMAND-LOOP NIL)))

(DEFMETHOD (:REDISPLAY ZMAIL-COMMAND-LOOP-MIXIN) (&OPTIONAL PRESERVE-TYPEIN)
  (CONDITION-BIND ((SI:CHARACTER-STYLE-ERROR
		     #'(LAMBDA (CONDITION) (SYS:PROCEED CONDITION :USE-UNDEFINED-STYLE))))
    (REDISPLAY-ALL-WINDOWS)
    (UNLESS PRESERVE-TYPEIN
      (SEND *TYPEIN-WINDOW* :COMMAND-LOOP-REDISPLAY))))

(DEFWHOPPER (:PROCESS-SPECIAL-COMMAND ZMAIL-COMMAND-LOOP-MIXIN) (&REST ARGS)
  (SI:WITH-PROCESS-NON-INTERACTIVE-PRIORITY ()
    (LEXPR-CONTINUE-WHOPPER ARGS)))

(DEFSELECT ZMAIL-COMMAND-LIST-DEFAULT
  ((SUMMARY-EXECUTE :TYPEOUT-EXECUTE :EXECUTE) (FUNCTION &REST ARGS)
    (APPLY FUNCTION ARGS))			(3 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");Request from typeout or summary menus.
0  ((REDISPLAY CONFIGURATION-CHANGED) (&REST IGNORE)
    :REDISPLAY-PRESERVE-TYPEIN)
  (:MOUSE-BUTTON (IGNORE WINDOW IGNORE IGNORE)
    (WHEN (OR (EQ WINDOW *TYPEIN-WINDOW*) (EQ WINDOW *MODE-LINE-WINDOW*))
      3;; Clicking in the typein or mode line window0 3should just beep --
0      3;;    However, by the time we get this blip, the typein window has already been
0      3;;    "selected" by the window system.  Thus, we must reselect the current window
0      3;;    to shut off the typein window's cursor and restart the current window's cursor.
0      (SELECT-WINDOW *WINDOW*))
    (BEEP)
    DIS-NONE)
  ((:MENU MODE-LINE SUMMARY-MOUSE) (&REST IGNORE)
   3;; These "blips" are normally handled by the appropriate command function --
   ;;     However, an occasional mouse glitch (i.e., two clicks instead of one) will cause
   ;;     these blips to be seen by a mode that doesn't expect them so we'll just beep.
0   (BEEP)
   DIS-NONE)
  (SCROLL (WINDOW NLINES TYPE)			3;Scroll bar command.
0    (PROCESS-SCROLL-COMMAND WINDOW NLINES TYPE)
    (REDISPLAY WINDOW :NONE)
    DIS-NONE)
  (SELECT-WINDOW (WINDOW)			3;Select window blip.
0    (IF (EQ WINDOW *WINDOW*)
	:REDISPLAY-PRESERVE-TYPEIN
	DIS-NONE))
  (PRESENTATION-COMMAND (VALUE NAME)
   (TYPEIN-LINE "")
   (SCL:WITH-CHARACTER-FACE (:ITALIC *TYPEIN-WINDOW*)
     (OUTPUT-PRESENTATION-COMMAND-NAME NAME *TYPEIN-WINDOW*))
   (WITH-SPECIAL-INSTANCE-VARS-BOUND-OUTSIDE-INSTANCE
       ((*COMTAB* (SEND *CURRENT-COMMAND-LOOP* :MOUSE-GESTURE-COMTAB)))
     (NOT (APPLY (FIRST VALUE) (REST1 VALUE))))
   DIS-NONE)
  (SI:INPUT-EDITOR (GESTURE &REST IGNORE)
   (BARF "~:C is not defined in this context." GESTURE))
  (DW::(WINDOW-WAKEUP-SELECT WINDOW-WAKEUP-EXPOSE
	WINDOW-WAKEUP-REFRESH WINDOW-WAKEUP-REDISPLAY
	WINDOW-WAKEUP-VIEWPORT-POSITION-CHANGED)
    (&REST IGNORE)
   DIS-NONE)
  (:EXECUTE-AS-COMMAND (FUNCTION &REST ARGS)
   (WITH-SPECIAL-INSTANCE-VARS-BOUND-OUTSIDE-INSTANCE
         ((*COMTAB* (SEND *CURRENT-COMMAND-LOOP* :MOUSE-GESTURE-COMTAB))
	  (*CURRENT-COMMAND*))
     (MULTIPLE-VALUE-BIND (VALUE LINE INDEX)
	 (SI:WITH-PROCESS-NON-INTERACTIVE-PRIORITY ()
	   (APPLY FUNCTION ARGS))
       (MUST-REDISPLAY *WINDOW* VALUE LINE INDEX)
       DIS-NONE))))

(DEFWHOPPER (:PROCESS-COMMAND-CHAR ZMAIL-COMMAND-LOOP-MIXIN) (CHAR)
  (WITH-BACKGROUND-PROCESS-SLEEPING
    (SI:WITH-PROCESS-NON-INTERACTIVE-PRIORITY ()
      (CONTINUE-WHOPPER CHAR))))

(DEFMETHOD (:PROCESS-COMMAND-CHAR ZMAIL-COMMAND-LOOP-MIXIN) (CHAR)
  (SELECTQ CHAR
    (#\REFRESH
     (SEND SELF ':REFRESH))
    (#/c-R
     (UNWIND-PROTECT
      (LET*-INSTANCE-VARIABLES ((*TYPEOUT-WINDOW* (WINDOW-TYPEOUT-WINDOW *WINDOW*)))
	(LET ((TERMINAL-IO *TYPEOUT-WINDOW*))
	  (SEND SELF ':EDIT)))
      (SEND SELF ':SELECT NIL)))
    (#\BREAK
     (COM-ZMAIL-BREAK))
    (#\ABORT
     (*THROW (SEND SELF ':TOP-LEVEL-TAG) NIL))
    (OTHERWISE
     (BARF))))

(DEFMETHOD (:TERMINAL-STREAMS ZMAIL-COMMAND-LOOP-MIXIN) ()
  (SEND *ZMAIL-WINDOW* :TERMINAL-STREAMS))

(DEFFLAVOR ZMAIL-COMMAND-LOOP-MIXIN-WITH-SUMMARY () ()
  (:REQUIRED-FLAVORS ZMAIL-COMMAND-LOOP-MIXIN))

(DEFMETHOD (:REDISPLAY ZMAIL-COMMAND-LOOP-MIXIN-WITH-SUMMARY) (&OPTIONAL PRESERVE-TYPEIN)
  (CONDITION-BIND ((SI:CHARACTER-STYLE-ERROR
		     #'(LAMBDA (CONDITION) (SYS:PROCEED CONDITION :USE-UNDEFINED-STYLE))))
    (UNLESS (REDISPLAY-ALL-WINDOWS)		3;Returns 1t3 if suppressed by typeahead.
0      (UNLESS PRESERVE-TYPEIN
	(SEND *TYPEIN-WINDOW* :COMMAND-LOOP-REDISPLAY))
      (SI:WITH-PROCESS-NON-INTERACTIVE-PRIORITY ()
3	;; Redisplaying the summary window can be fairly compute bound if we have to parse
	;; several new messages to add them to the summary window.  Therefore, we'll run
	;; summary window redisplay at our normal priority.
0	(WHEN (TV:SHEET-EXPOSED-P *SUMMARY-WINDOW*)
	  (SEND *SUMMARY-WINDOW* :REDISPLAY-AS-NECESSARY))))))

;;; This is the flavor that does it all, really, instance variables here should just change
;;; defaults.
(DEFFLAVOR ZMAIL-FRAME 
       ((*MODE-LINE-LIST* '("Zmail " *ZMAIL-SEQUENCE-NAME* *CURRENT-MSG-NAME*
			    (*CURRENT-MSG-KEYWORDS-STRING* "  " *CURRENT-MSG-KEYWORDS-STRING*)
			    (*MACRO-LEVEL* "  Macro-level: " *MACRO-LEVEL*)
			    (*MODE-LINE-MORE-ABOVE-BELOW* "  " *MODE-LINE-MORE-ABOVE-BELOW*)))
	(*MAJOR-MODE* (MODE-OF-FLAVOR 'TEXT-MODE))	;The default inside ZMAIL
	)
       (OWN-STANDARD-INPUT-EDITOR-MIXIN TOP-LEVEL-EDITOR BASIC-ZMAIL
	ZMAIL-FRAME-MIXIN ZMAIL-COMMAND-LOOP-MIXIN-WITH-SUMMARY ZMAIL-COMMAND-LOOP-MIXIN
	TV:STREAM-MIXIN TV:PROCESS-MIXIN
	TV:INITIALLY-INVISIBLE-MIXIN TV:CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER
	TV:SELECT-MIXIN		;Here so BASIC-FRAME's :SELECT method applies
	TV:BORDERS-MIXIN ZWEI-MACRO-MIXIN)
  (:DEFAULT-INIT-PLIST :BORDER-MARGIN-WIDTH 0
		       1;; Allow debugging of Zmail initialization problems...
0		       :STANDARD-INPUT STANDARD-INPUT
		       1;; Kludge to allow Select-M to create a new Zmail frame again...
0		       :IO-BUFFER (TV:MAKE-IO-BUFFER 400 NIL 'TV:KBD-DEFAULT-OUTPUT-FUNCTION))
  :SPECIAL-INSTANCE-VARIABLES
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :COMMAND-LOOP :EDIT :INIT
					      :RESET-HARDCOPY-WHO-LINE-DOCUMENTATION
					      :RESET-USER :SAVE-ALL-FILES
					      :SAVE-ALL-FILES-QUERY :SAVE-ALL-FILES-EXECUTE
					      FUNCALL-IN-ZMAIL-INSTANCE))

(DEFVAR *MSG-WINDOW-CONFIGURATIONS* '(:MSG :BOTH :FILTERING-COMMANDS :MSG-NO-MENU))

(DEFVAR *SUMMARY-WINDOW-CONFIGURATIONS* '(:BOTH :SUMMARY :FILTERING-COMMANDS
					  :CALENDAR :FILTER))

(DEFVAR *MULTI-WINDOW-SENDING-CONFIGURATIONS* '(:REPLY :SEND))

(DEFMETHOD (:INIT ZMAIL-FRAME :BEFORE) (PLIST &AUX MONTH YEAR
					      START-DAY START-MONTH START-YEAR)
  (PUTPROP PLIST T :SAVE-BITS)			;Things depend on working like this
  (SETQ TV:PROCESS '(ZMAIL-PROCESS-TOP-LEVEL :SPECIAL-PDL-SIZE #o6000
					     :REGULAR-PDL-SIZE #o40000))
  (LET (DAY DAY-OF-THE-WEEK)
    (MULTIPLE-VALUE (NIL NIL NIL DAY MONTH YEAR DAY-OF-THE-WEEK)
      (TIME:GET-TIME))
    (MULTIPLE-VALUE (START-DAY START-MONTH START-YEAR)
      (TIME:INCREMENT-DATE DAY MONTH YEAR (- DAY-OF-THE-WEEK))))
  (SETQ TV:PANES `((MODE-LINE-WINDOW MODE-LINE-PANE :NUMBER-OF-MINI-BUFFER-LINES 3
						    :BLINKER-DESELECTED-VISIBILITY :OFF
						    :SAVE-BITS :DELAYED)
		   (MSG-WINDOW ZMAIL-WINDOW :INTERVAL-NAME "Message"
					    :BLINKER-DESELECTED-VISIBILITY NIL)
		   (HEADER-WINDOW ZMAIL-WINDOW :INTERVAL-NAME "Headers")
		   (REPLY-WINDOW ZMAIL-WINDOW :INTERVAL-NAME "Mail")
		   (SUMMARY-WINDOW ZMAIL-SUMMARY-SCROLL-WINDOW)
		   (FILTER-WINDOW ZMAIL-FILTER-FRAME)
		   (UNIVERSE-WINDOW UNIVERSE-DEFINITION-FRAME)
		   (PROFILE-WINDOW ZMAIL-PROFILE-FRAME)
		   (PROFILE-EDITOR-WINDOW ZMAIL-WINDOW :INTERVAL-NAME "Profile"
						       :BLINKER-DESELECTED-VISIBILITY :OFF)
		   (COMMAND-MENU ZMAIL-MAIN-COMMAND-MENU-PANE
				 :COLUMNS 5 :ITEM-LIST ,*ZMAIL-COMMAND-ALIST*)
		   (CALENDAR-COMMAND-MENU ZMAIL-MAIN-COMMAND-MENU-PANE
					  :COLUMNS 5
					  :ITEM-LIST ,*ZMAIL-CALENDAR-COMMAND-ALIST*)
		   (NO-FILTER-COMMAND-MENU ZMAIL-MAIN-COMMAND-MENU-PANE
					   :COLUMNS 6
					   :ITEM-LIST ,*ZMAIL-NO-FILTER-COMMAND-ALIST*)
		   (FILTER-COMMAND-MENU ZMAIL-MAIN-COMMAND-MENU-PANE
					:COLUMNS 5
					:ITEM-LIST ,*ZMAIL-FILTER-COMMAND-ALIST*)
		   (BUTTONS-FRAME TV:BUTTONS-FRAME
				  :PANES ((UNIVERSE-BUTTON TV:MEDIUM-BUTTON-PANE
							   :NAME "Just current message"
							   :DOCUMENTATION
							     ,*UNIVERSE-BUTTON-DOCUMENTATION*)
					  (FILTER-BUTTON TV:MEDIUM-BUTTON-PANE
							 :NAME "All"
							 :DOCUMENTATION
							   ,*FILTER-BUTTON-DOCUMENTATION*)))
		   (YEAR-WINDOW YEAR-FRAME-PANE :YEAR ,YEAR)
		   (MONTH-WINDOW MONTH-FRAME-PANE :MONTH ,MONTH :YEAR ,YEAR)
		   (WEEK-WINDOW WEEK-FRAME-PANE :START-DAY ,START-DAY
						:START-MONTH ,START-MONTH
						:START-YEAR ,START-YEAR)
		   (FOUR-WEEKS-WINDOW SEVERAL-WEEKS-FRAME-PANE :START-DAY ,START-DAY
							       :START-MONTH ,START-MONTH
							       :START-YEAR ,START-YEAR)
		   ))
  (SETQ TV:SUBSTITUTIONS `((STANDARD-MODE-LINE . (MODE-LINE-WINDOW :ASK :PANE-SIZE))
			   (STANDARD-HEADER . (HEADER-WINDOW :FUNCALL
							     USER-OPTION-CONSTRAINT-FRACTION
							     *HEADER-WINDOW-NLINES*
							     :LINES))
			   (STANDARD-COMMAND-MENU . (COMMAND-MENU :ASK :PANE-SIZE))
			   (STANDARD-CALENDAR-COMMAND-MENU
			     . (CALENDAR-COMMAND-MENU :ASK :PANE-SIZE))
			   )
	
	TV:CONSTRAINTS '((:MSG . ((COMMAND-MENU MSG-WINDOW MODE-LINE-WINDOW)
				  (STANDARD-MODE-LINE STANDARD-COMMAND-MENU)
				  ((MSG-WINDOW :EVEN))))
			 (:MSG-NO-MENU . ((MSG-WINDOW MODE-LINE-WINDOW)
					  (STANDARD-MODE-LINE)
					  ((MSG-WINDOW :EVEN))))
			 (:BOTH . ((SUMMARY-WINDOW COMMAND-MENU MSG-WINDOW MODE-LINE-WINDOW)
				   (STANDARD-MODE-LINE
				     STANDARD-COMMAND-MENU
				     (SUMMARY-WINDOW :FUNCALL
						     USER-OPTION-CONSTRAINT-FRACTION
						     *SUMMARY-WINDOW-FRACTION*
						     :LINES))
				   ((MSG-WINDOW :EVEN))))
			 (:SUMMARY . ((SUMMARY-WINDOW COMMAND-MENU MODE-LINE-WINDOW)
				      (STANDARD-MODE-LINE STANDARD-COMMAND-MENU)
				      ((SUMMARY-WINDOW :EVEN))))
			 (:SEND . ((HEADER-WINDOW REPLY-WINDOW MODE-LINE-WINDOW)
				   (STANDARD-MODE-LINE STANDARD-HEADER)
				   ((REPLY-WINDOW :EVEN))))
			 (:REPLY . ((MSG-WINDOW HEADER-WINDOW REPLY-WINDOW MODE-LINE-WINDOW)
				    (STANDARD-MODE-LINE STANDARD-HEADER
							(MSG-WINDOW :ASK :PANE-SIZE-FOR-TEXT))
				    ((REPLY-WINDOW :EVEN))))
			 (:FILTERING-COMMANDS . ((SUMMARY-WINDOW NO-FILTER-COMMAND-MENU
								 BUTTONS-FRAME
								 FILTER-COMMAND-MENU
								 MSG-WINDOW MODE-LINE-WINDOW)
						 (STANDARD-MODE-LINE
						   (NO-FILTER-COMMAND-MENU :ASK :PANE-SIZE)
						   (FILTER-COMMAND-MENU :ASK :PANE-SIZE)
						   (SUMMARY-WINDOW
						     :FUNCALL USER-OPTION-CONSTRAINT-FRACTION
						     *SUMMARY-WINDOW-FRACTION*
						     :LINES))
						 ((BUTTONS-FRAME :ASK :PANE-SIZE))
						 ((MSG-WINDOW :EVEN))))
			 (:FILTER . ((SUMMARY-WINDOW FILTER-WINDOW)
				     ((SUMMARY-WINDOW
					:FUNCALL USER-OPTION-CONSTRAINT-FRACTION
					(OR *FILTER-SUMMARY-WINDOW-FRACTION*
					    *SUMMARY-WINDOW-FRACTION*)
					:LINES))
				     ((FILTER-WINDOW :EVEN))))
			 (:UNIVERSE . ((UNIVERSE-WINDOW)
				       ((UNIVERSE-WINDOW :EVEN))))
			 (:PROFILE . ((PROFILE-WINDOW PROFILE-EDITOR-WINDOW MODE-LINE-WINDOW)
				      (STANDARD-MODE-LINE (PROFILE-WINDOW 0.425s0))
				      ((PROFILE-EDITOR-WINDOW :EVEN))))
			 (:CALENDAR . ((SUMMARY-WINDOW CALENDAR-COMMAND-MENU MSG-WINDOW
						       MODE-LINE-WINDOW)
				       (STANDARD-MODE-LINE STANDARD-CALENDAR-COMMAND-MENU
							   (SUMMARY-WINDOW
							     :FUNCALL
							     USER-OPTION-CONSTRAINT-FRACTION
							     *SUMMARY-WINDOW-FRACTION*
							     :LINES))
				       ((MSG-WINDOW :EVEN))))
			 (:YEAR . ((YEAR-WINDOW CALENDAR-COMMAND-MENU
						MSG-WINDOW MODE-LINE-WINDOW)
				   (STANDARD-MODE-LINE STANDARD-CALENDAR-COMMAND-MENU
						       (YEAR-WINDOW :ASK :PANE-SIZE))
				   ((MSG-WINDOW :EVEN))))
			 (:MONTH . ((MONTH-WINDOW CALENDAR-COMMAND-MENU
						  MSG-WINDOW MODE-LINE-WINDOW)
				    (STANDARD-MODE-LINE
				      STANDARD-CALENDAR-COMMAND-MENU
				      (MONTH-WINDOW :ASK :PANE-SIZE))
				    ((MSG-WINDOW :EVEN))))
			 (:FOUR-WEEKS . ((FOUR-WEEKS-WINDOW CALENDAR-COMMAND-MENU
							    MSG-WINDOW MODE-LINE-WINDOW)
					 (STANDARD-MODE-LINE
					   STANDARD-CALENDAR-COMMAND-MENU
					   (FOUR-WEEKS-WINDOW :ASK :PANE-SIZE))
					 ((MSG-WINDOW :EVEN))))
			 (:WEEK . ((WEEK-WINDOW CALENDAR-COMMAND-MENU
						MSG-WINDOW MODE-LINE-WINDOW)
				   (STANDARD-MODE-LINE
				     STANDARD-CALENDAR-COMMAND-MENU
				     (WEEK-WINDOW .65s0))
				   ((MSG-WINDOW :EVEN))))
			 )
	TV:CONFIGURATION *DEFAULT-INITIAL-WINDOW-CONFIGURATION*
	TV:SELECTED-PANE 'MSG-WINDOW))

;;; A constraint that is evaluated each time around
(DEFUN USER-OPTION-CONSTRAINT-FRACTION (NODE REMAINING-WIDTH REMAINING-HEIGHT
					TOTAL-WIDTH TOTAL-HEIGHT STACKING
					FRACTION &OPTIONAL LINES)
  REMAINING-WIDTH REMAINING-HEIGHT
  (SETQ FRACTION (EVAL FRACTION))
  (COND ((FLOATP FRACTION)
	 (SETQ FRACTION (* FRACTION
			   (SELECTQ STACKING
			     (:VERTICAL TOTAL-HEIGHT)
			     (:HORIZONTAL TOTAL-WIDTH)))))
	(LINES
	 (SETQ FRACTION (* FRACTION (SEND (TV:CONSTRAINT-DATA NODE) ':LINE-HEIGHT)))))
  ;; Fake out totally losing modularity of frame code
  (TV:CONSTRAINT-ROUND FRACTION (IF LINES '(1 :LINES) NIL) NODE))

;;; This must go off before TOP-LEVEL-EDITOR or EDITOR, which require that there be a window
(DEFMETHOD (:INIT BASIC-ZMAIL :AFTER) (IGNORE)
  (MULTIPLE-VALUE (*MSG-WINDOW* *MSG-INTERVAL*)
    (CREATE-ZMAIL-WINDOW 'MSG-WINDOW))
  (SETQ *WINDOW* *MSG-WINDOW*))

(DEFMETHOD (:INIT ZMAIL-FRAME :AFTER) (IGNORE)
  (SETQ STANDARD-INPUT (MAKE-MACRO-STREAM (MAKE-RECORDING-STREAM SELF 100.)))
  (SETQ *HEADER-WINDOW* (SEND (SEND SELF :GET-PANE 'HEADER-WINDOW) :ZWEI-WINDOW)
	*REPLY-WINDOW* (SEND (SEND SELF :GET-PANE 'REPLY-WINDOW) :ZWEI-WINDOW))
  (SETQ *PROFILE-EDITOR-WINDOW* (CREATE-ZMAIL-WINDOW 'PROFILE-EDITOR-WINDOW T)
	*PROFILE-EDITOR* (CREATE-PROFILE-EDITOR *PROFILE-EDITOR-WINDOW*))
  (SETQ *SUMMARY-WINDOW* (SEND SELF :GET-PANE 'SUMMARY-WINDOW)
	*SUMMARY-WINDOW-PSEUDO-ZWEI-WINDOW* (CREATE-WINDOW *SUMMARY-WINDOW*))
  (SET-WINDOW-INTERVAL *SUMMARY-WINDOW-PSEUDO-ZWEI-WINDOW* *MSG-INTERVAL*)
  (SETQ *FILTER-WINDOW* (SEND SELF :GET-PANE 'FILTER-WINDOW)
	*UNIVERSE-WINDOW* (SEND SELF :GET-PANE 'UNIVERSE-WINDOW)
	*PROFILE-WINDOW* (SEND SELF :GET-PANE 'PROFILE-WINDOW)
	*COMMAND-MENU* (SEND SELF :GET-PANE 'COMMAND-MENU)
	*CALENDAR-COMMAND-MENU* (SEND SELF :GET-PANE 'CALENDAR-COMMAND-MENU)
	*MONTH-WINDOW* (SEND SELF :GET-PANE 'MONTH-WINDOW)
	*FOUR-WEEKS-WINDOW* (SEND SELF :GET-PANE 'FOUR-WEEKS-WINDOW)
	*WEEK-WINDOW* (SEND SELF :GET-PANE 'WEEK-WINDOW)
	*YEAR-WINDOW* (SEND SELF :GET-PANE 'YEAR-WINDOW)
	*KEYWORD-WINDOW* (TV:MAKE-WINDOW 'POP-UP-ZMAIL-MULTIPLE-MENU
					 :NEW-FUNCTION 'MULTIPLE-MENU-NEW-KEYWORD
					 :SUPERIOR SELF)
	*MOVE-SEQUENCE-MENU* (TV:MAKE-WINDOW 'CLICK-REMEMBERING-POP-UP-MENU
					     :COLUMNS 2 :ITEM-LIST NIL
					     :SUPERIOR SELF)
	*ZMAIL-MAP-COMMAND-MENU* (TV:MAKE-WINDOW 'ZMAIL-DYNAMIC-MOMENTARY-COMMAND-MENU
						 :COLUMNS 2
						 :ITEM-LIST-POINTER '*ZMAIL-MAP-COMMAND-ALIST*
						 :SUPERIOR SELF)
	*SELECT-SEQUENCE-MENU* (TV:MAKE-WINDOW 'CLICK-REMEMBERING-POP-UP-MENU
					       :COLUMNS 2 :ITEM-LIST NIL
					       :SUPERIOR SELF)
	*FILTER-SELECTION-FRAME* (TV:MAKE-WINDOW 'FILTER-SELECTION-FRAME
						 :SAVE-BITS :DELAYED
						 :SUPERIOR SELF)
	*UNIVERSE-SELECTION-MENU* (TV:MAKE-WINDOW 'TV:MULTIPLE-ITEM-LIST-MENU
						  :LABEL "Select the universe:"
						  :SUPERIOR SELF)
	*OVERLYING-WINDOW* (TV:MAKE-WINDOW 'DW::DYNAMIC-WINDOW-PANE
					   :MARGIN-COMPONENTS `DW:((MARGIN-RAGGED-BORDERS )
								   (MARGIN-SCROLL-BAR )
								   (MARGIN-WHITE-BORDERS
								     :THICKNESS 2))
					   :SUPERIOR SELF
					   :IO-BUFFER TV:IO-BUFFER)
	*POP-UP-MINI-BUFFER-EDITOR* (MAKE-EDITOR-FOR-TEMPORARY-MINI-BUFFER SELF TV:IO-BUFFER)
	)
  (SETQ *WINDOW-LIST* (LIST *REPLY-WINDOW* *MSG-WINDOW* *HEADER-WINDOW* *MINI-BUFFER-WINDOW*))
  (SETQ *ZMAIL-BACKGROUND-PROCESS* (SI:MAKE-PROCESS "Zmail background"
						    :PRIORITY -1	; try to improve
						    :QUANTUM 10.	; foreg. response
						    :SPECIAL-PDL-SIZE #o6000
						    :REGULAR-PDL-SIZE #o30000))
  (CL:SETF *ZMAIL-BACKGROUND-PROCESS-LOCK* (LOCF (CAR (LIST NIL)))
	   *ZMAIL-BACKGROUND-REQUEST-QUEUE* (LOCF (CAR (LIST NIL)))
	   *ZMAIL-BACKGROUND-PRELOAD-QUEUE* (LOCF (CAR (LIST NIL)))
	   *ZMAIL-BACKGROUND-MAIL-CHECK-QUEUE* (LOCF (CAR (LIST NIL))))
  (PROCESS-PRESET *ZMAIL-BACKGROUND-PROCESS*
    'ZMAIL-BACKGROUND SELF *ZMAIL-BACKGROUND-PROCESS-LOCK* *ZMAIL-BACKGROUND-REQUEST-QUEUE*
			   *ZMAIL-BACKGROUND-PRELOAD-QUEUE*
			   *ZMAIL-BACKGROUND-MAIL-CHECK-QUEUE*)
  NIL)

;;; Allows patches, etc. to execute a function within the Zmail frame with the appropriate
;;; special instance variable bindings...
(DEFMETHOD (FUNCALL-IN-ZMAIL-INSTANCE ZMAIL-FRAME) (FUNCTION &REST ARGS)
  (DECLARE (SYS:DOWNWARD-FUNARG FUNCTION))
  (CL:APPLY FUNCTION ARGS))

;Unlink from data structure so this frame and all its parts can get garbage collected
(DEFMETHOD (:KILL ZMAIL-FRAME :AFTER) ()
  (SEND *PROFILE-EDITOR* :KILL)
  (SEND *UNIVERSE-WINDOW* :KILL)
  (SEND *OVERLYING-WINDOW* :KILL)
  (SEND *POP-UP-MINI-BUFFER-EDITOR* :KILL)
  (SEND *FILTER-WINDOW* :KILL)
  (SEND *ZMAIL-BACKGROUND-PROCESS* :KILL))

;;; Position all the needed windows for this operation
(DEFMETHOD (:SET-WINDOW-CONFIGURATION ZMAIL-FRAME)
	   (NEW-CONFIGURATION &OPTIONAL STARTING-WINDOW
			      &AUX EXPOSE-P SELECT-P
				   (*CURRENT-COMMAND-LOOP* SELF))
  (SETQ *WINDOW-CONFIGURATION* NEW-CONFIGURATION)
  ;; Remember if selected window is anywhere in our hierarchy
  (SETQ SELECT-P (DO SHEET TV:SELECTED-WINDOW (SEND SHEET :SUPERIOR) (NULL SHEET)
		   (AND (EQ SELF SHEET) (RETURN T))))
  (TV:DELAYING-SCREEN-MANAGEMENT
    (AND (SETQ EXPOSE-P TV:EXPOSED-P)		;Make things look less spastic
	 (SEND SELF :DEEXPOSE :DEFAULT :NOOP))
    (SEND SELF :SET-CONFIGURATION NEW-CONFIGURATION)
    (COND ((MEMQ NEW-CONFIGURATION *MSG-WINDOW-CONFIGURATIONS*)
	   (SETQ STARTING-WINDOW *MSG-WINDOW*))
	  ((MEMQ NEW-CONFIGURATION *CALENDAR-WINDOW-CONFIGURATIONS*)
	   (SETQ STARTING-WINDOW *MSG-WINDOW*))	; all calendar displays include the msg window
	  ((EQ NEW-CONFIGURATION :SUMMARY)
	   (SETQ STARTING-WINDOW *SUMMARY-WINDOW-PSEUDO-ZWEI-WINDOW*))
	  ((EQ NEW-CONFIGURATION :FILTER)
	   (SEND *FILTER-WINDOW* :INITIALIZE)
	   (SETQ STARTING-WINDOW (SYMEVAL-IN-INSTANCE *FILTER-WINDOW* '*EDITOR-WINDOW*)))
	  ((EQ NEW-CONFIGURATION :UNIVERSE)
	   (SEND *UNIVERSE-WINDOW* :INITIALIZE)
	   (SETQ STARTING-WINDOW (SYMEVAL-IN-INSTANCE *UNIVERSE-WINDOW* '*EDITOR-WINDOW*)))
	  ((EQ NEW-CONFIGURATION :PROFILE)
	   (SEND *PROFILE-WINDOW* :INITIALIZE)
	   (SETQ STARTING-WINDOW *PROFILE-EDITOR-WINDOW*)))
    (WHEN (MEMQ NEW-CONFIGURATION *SUMMARY-WINDOW-CONFIGURATIONS*)
	 (SEND *SUMMARY-WINDOW* :SET-LABEL (STRING-APPEND *SUMMARY-WINDOW-LABEL*)))
    (WHEN STARTING-WINDOW			;Select this pane when :SELECT sent below
      (SETQ TV:SELECTED-PANE (WINDOW-SHEET STARTING-WINDOW)))
    (AND EXPOSE-P
	 (NOT TV:SELECTED-WINDOW)	;User has not molested things in the meantime
	 (IF SELECT-P (SEND SELF :SELECT NIL) (SEND SELF :EXPOSE))))
  (COND (STARTING-WINDOW
	 ;;This won't happen in MAKE-WINDOW-CURRENT, but they may have changed due to a
	 ;;different *GLOBAL-MODE-LINE-WINDOW*.
	 (AND (EQ STARTING-WINDOW *WINDOW*)
	      (MULTIPLE-VALUE (*MODE-LINE-WINDOW* *TYPEIN-WINDOW* *MINI-BUFFER-WINDOW*)
		(WINDOW-MODE-LINE-WINDOWS STARTING-WINDOW)))
	 (MAKE-WINDOW-CURRENT STARTING-WINDOW)
	 (WHEN (EQ NEW-CONFIGURATION :SUMMARY)	; it's not a real window after all ...
	   (SETQ *WINDOW-LIST* (DELQ STARTING-WINDOW *WINDOW-LIST*)))
	 ;; this must be done even if MAKE-WINDOW-CURRENT is blocked
	 (SETQ *TYPEOUT-WINDOW* (WINDOW-TYPEOUT-WINDOW STARTING-WINDOW)
	       TERMINAL-IO *TYPEOUT-WINDOW*)
	 (AND SELECT-P
	      (NOT TV:SELECTED-WINDOW)	;User has not molested things in the meantime
	      (SEND SELF :SELECT NIL)))
	(T
	 (MULTIPLE-VALUE (*MODE-LINE-WINDOW* *TYPEIN-WINDOW* *MINI-BUFFER-WINDOW*)
	   (WINDOW-MODE-LINE-WINDOWS *WINDOW*)))))

(DEFMETHOD (:CHANGE-OF-SIZE-OR-MARGINS ZMAIL-FRAME :AFTER) (&REST IGNORE)
  (SEND *OVERLYING-WINDOW* ':FULL-SCREEN))

;;; Don't inquire of the selected-pane
(DEFMETHOD (:NAME-FOR-SELECTION ZMAIL-FRAME) ()
  TV:NAME)

;;; Turn off the blinker while just reading mail
;;; even though the msg-window is the selected-pane
(DEFMETHOD (:POINT-BLINKER-VISIBILITY ZMAIL-FRAME) (WINDOW)
  (COND ((AND (EQ WINDOW *MSG-WINDOW*)
	      (EQ (TV:BLINKER-DESELECTED-VISIBILITY (WINDOW-POINT-BLINKER WINDOW)) NIL))
	 NIL)
	((EQ (WINDOW-SHEET WINDOW) TV:SELECTED-WINDOW)
	 ':BLINK)
	(T
	 (TV:BLINKER-DESELECTED-VISIBILITY (WINDOW-POINT-BLINKER WINDOW)))))

;;; Make the mode line correct when inside reply edit
(DEFMETHOD (:SET-INTERVAL ZMAIL-FRAME :AFTER) (INTERVAL)
  (WHEN (ZMAIL-INTERVAL-P INTERVAL)
    (SETQ *ZMAIL-INTERVAL-NAME* (SEND INTERVAL ':NAME)))
  (WHEN (MEMQ *WINDOW-CONFIGURATION* *MULTI-WINDOW-SENDING-CONFIGURATIONS*)
    ;; Do this again to make auto fill mode toggle correctly.
    (TURN-ON-MODE *MAJOR-MODE*)))

;;; Called by the macro stream system
(DEFMETHOD (:READ-MACRO-LINE ZMAIL-FRAME) (PROMPT &AUX )
  (LET*-INSTANCE-VARIABLES ((*CURRENT-COMMAND* 'READ-MACRO-LINE)
			    (*NUMERIC-ARG-P* NIL)
			    (*NUMERIC-ARG* 1))
    (TYPEIN-LINE-READLINE PROMPT)))

;;; Don't allow switching to windows not in the current configuration.
(DEFWHOPPER (:MAKE-WINDOW-CURRENT ZMAIL-FRAME) (WINDOW &OPTIONAL (SELECT-P T))
  (UNLESS (LET ((SHEET (WINDOW-SHEET WINDOW)))
	    (AND (RASSQ SHEET TV:INTERNAL-PANES)
		 (NOT (MEMQ SHEET TV:EXPOSED-PANES))))
    (CONTINUE-WHOPPER WINDOW SELECT-P)))

3;;; Required to make the profile editor work with new multi-process Zmacs.
0(DEFMETHOD (:UPDATE-LABELS ZMAIL-FRAME) ()
  )

;;; Initialization and outside functions
(DEFVAR *ZMAIL-USER* NIL)			;USER-ID that last used this Zmail
(DEFVAR *SAVED-TEMPLATES* NIL)			;Templates before the user logged in.
(DEFVAR *ZMAIL-USER-MAIL-ADDRESS* NIL)		;Cached mail-address to speed summary gen.

(DEFSUBST ZMAIL-USER-MAIL-ADDRESS ()
  (OR *ZMAIL-USER-MAIL-ADDRESS*
      (SETQ *ZMAIL-USER-MAIL-ADDRESS* (SEND SI:*USER* :MAIL-ADDRESS))))

(DEFUN INITIALIZE-ZMAIL ()
  (WHEN (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
    (WHEN (LOOP FOR W FIRST TV:SELECTED-WINDOW THEN (SEND W :SUPERIOR)
		WHILE W
		THEREIS (EQ W *ZMAIL-WINDOW*))
      (FERROR "Can't initialize Zmail from an inferior of the Zmail frame!  ~
	       Do it from a Lisp Listener."))
    (SEND *ZMAIL-WINDOW* :KILL))
  (MAPC #'(LAMBDA (ITEM)
	    (SET (CAR ITEM) (EVAL (CDR ITEM))))
	*ZMAIL-INIT-INITIALIZATION-LIST*)
  (SETQ *ZMAIL-WINDOW* (TV:MAKE-WINDOW 'ZMAIL-FRAME :NAME "Main Zmail Window"))
  (INITIALIZE-ZMAIL-COMTABS (SYMEVAL-IN-INSTANCE *ZMAIL-WINDOW* '*MODE-COMTAB*)
			    (SYMEVAL-IN-INSTANCE *ZMAIL-WINDOW* '*MODE-CONTROL-X-COMTAB*))
  (SETQ *ZMAIL-PATHNAME-DEFAULTS* (FS:MAKE-PATHNAME-DEFAULTS))
  (SETQ *SAVED-TEMPLATES* *TEMPLATES*)		;Remember the templates
  (RESET-ZMAIL-USER T)
  (RESET-ZMAIL-BACKGROUND :FORCE-LOCKS T)
  (SEND *ZMAIL-WINDOW* :ACTIVATE))		;Now ok to call it up

(ADD-INITIALIZATION "INITIALIZE-ZMAIL" '(INITIALIZE-ZMAIL) () '*ZMAIL-SYSTEM-INITIALIZATIONS*)

(TV:ADD-SELECT-KEY #/M '(SETUP-ZMAIL-FRAME) "Zmail" NIL "Zmail" "Mail")

(TV:ADD-ACTIVITY-TO-SYSTEM-MENU-PROGRAMS-COLUMN "Zmail")

;; For color console, augment logic for selecting ZMAIL so the
;; initial zmail frame will be switched to the other screen if
;; a world is re-booted on a different screen.   We do this because
;; there is a unique zmail frame, and things get very unhappy if
;; there are two of them.
;; (this is new code)
(DEFUN SETUP-ZMAIL-FRAME ()
  (UNLESS (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
    (INITIALIZE-ZMAIL))
  (TV:SET-WINDOW-ON-USABLE-SCREEN *ZMAIL-WINDOW* TV:DEFAULT-SCREEN NIL)
  (UNLESS (TV:WINDOW-IS-SELECTABLE *ZMAIL-WINDOW*)
    (INITIALIZE-ZMAIL))
  (WHEN (TV:WINDOW-IS-SELECTABLE *ZMAIL-WINDOW*)
    *ZMAIL-WINDOW*))

;;; Top level function
(DEFUN ZMAIL (&OPTIONAL SAVED-MAIL-PATHNAME)
  (IF (NETI:REMOTE-TERMINAL-P)
      (FORMAT T "~&Zmail can currently only be used from the main console.~%")
    (WHEN (OR (EQ SAVED-MAIL-PATHNAME :RELOAD)
	      (EQ SAVED-MAIL-PATHNAME 'RELOAD))
      (INITIALIZE-ZMAIL)
      (SETQ SAVED-MAIL-PATHNAME NIL))
    (FS:FORCE-USER-TO-LOGIN)
    (START-ZMAIL *ZMAIL-WINDOW* SAVED-MAIL-PATHNAME)
    (SEND *ZMAIL-WINDOW* :SELECT)
    (TV:AWAIT-WINDOW-EXPOSURE)
    T))

;;; Starts Zmail -- Actually, this method doesn't do the real work as it may be invoked in
;;; the wrong process.  Instead, we push an :EXECUTE blip onto Zmail's input buffer which
;;; invokes SELECT-SEQUENCE-IF-NEEDED (defined in MAIL-FILES) to do the real work.
(DEFMETHOD (START-ZMAIL ZMAIL-FRAME) (PATHNAME)
  (WHEN (EQ PATHNAME T)
    ;; Forget any existing sequences and read new mail for the default mail file.
    (SETQ *SEQUENCE-LIST* NIL
	  *DEFAULT-BUFFER* NIL
	  PATHNAME NIL))
  (COMMAND-BUFFER-PUSH `(:EXECUTE SELECT-SEQUENCE-IF-NEEDED ,PATHNAME)))

3;;; Non-0NIL3 => Zmail should wait until someone logs into the machine.
0(DEFVAR *ZMAIL-MUST-WAIT-FOR-LOGIN* NIL)

3;;; Non-0NIL3 => Zmail was reset by a warm boot --
;;;    Used by the sequence locking primitives' 1unwind-protect3 clauses to recognize that
;;;    their locks have been forcibly reset.
0(DEFVAR-RESETTABLE *ZMAIL-RESET-DURING-WARM-BOOT* NIL T)

3;;; This is the initial function for the 0Zmail3 window.
0(DEFUN ZMAIL-PROCESS-TOP-LEVEL (WINDOW)
  (CL:LOOP
     3;; Do not suddenly demand to be logged in when our process is reset at logout time.
0     (PROCESS-WAIT "Await Selection or Login"
       #'(LAMBDA ()
	   (OR (LOOP FOR ACTIVE-WINDOW = TV:SELECTED-WINDOW THEN (SEND ACTIVE-WINDOW :SUPERIOR)
		     WHILE ACTIVE-WINDOW
		     THEREIS (EQ ACTIVE-WINDOW WINDOW))
	       (NOT *ZMAIL-MUST-WAIT-FOR-LOGIN*))))
     3;; Process has finished being reset -- Special treatment of locks, etc. no longer apply.
0     (SETF *ZMAIL-RESET-DURING-WARM-BOOT* NIL)
     3;; Force the user to login and enter the command loop.
0     (SI:WITH-COMMAND-LOOP-VARIABLE-BINDINGS
       (WHEN (EQ SI:*USER* SI:*NOT-LOGGED-IN-USER*)
	 (LET ((TERMINAL-IO (SEND (SEND WINDOW :GET-PANE 'MSG-WINDOW) :TYPEOUT-WINDOW)))
	   (SEND TERMINAL-IO :OUTPUT-HOLD-EXCEPTION)
	   (TV:WINDOW-CALL-RELATIVE (TERMINAL-IO)
	     (FS:FORCE-USER-TO-LOGIN))))
       (WHEN (NULL *ZMAIL-USER*)
	 (SEND WINDOW :NULL-STARTUP-SETUP))
       (SEND WINDOW :COMMAND-LOOP)
       (SEND WINDOW :BURY))))

(DEFVAR *NULL-STARTUP-MSG-INTERVAL* (CREATE-INTERVAL "Type the HELP key for help.
To read your mail, click Left on /"Get inbox/".
To send a message, click Left on /"Mail/".
To send a bug report, click Middle on /"Mail/"."))

(DEFMETHOD (:NULL-STARTUP-SETUP ZMAIL-FRAME) ()
  (SET-MSG-INTERVAL *NULL-STARTUP-MSG-INTERVAL*)
  (SETQ *ZMAIL-SEQUENCE-NAME* "No current message sequence"
	*CURRENT-MSG-NAME* NIL
	*CURRENT-MSG-KEYWORDS-STRING* NIL))

;;; Portion of resetting Zmail which must be done with access to instance variables.
(DEFMETHOD (:RESET-USER ZMAIL-FRAME) (OLD-SUMMARY-WINDOW-FRACTION FORCE-RESET)
  (LET ((*CURRENT-ZMAIL-COMMAND-LOOP* *ZMAIL-WINDOW*)
	(*CURRENT-COMMAND-LOOP* *ZMAIL-WINDOW*))
    (DOLIST (TEMPLATE (PROG1 *TEMPLATES* (SETQ *TEMPLATES* *SAVED-TEMPLATES*)))
      (UNLESS (MEMQ TEMPLATE *TEMPLATES*)	; remove the user-defined templates
	(UPDATE-COMMAND-DOCUMENTATION-ASSOCIATED-WITH-OPTION (SEND TEMPLATE :NAME) NIL)))
    (SELECT-SEQUENCE NIL T)
    (DOLIST (COMMAND *ZMAIL-WHO-LINE-DOCUMENTATION-SYMBOLS*)
      (UPDATE-COMMAND-WHO-LINE-DOCUMENTATION COMMAND NIL))
    (SEND *PROFILE-EDITOR* :RESET-PROFILE)
    (SEND *YEAR-WINDOW* :RESET-CALENDAR)
    (SEND *MONTH-WINDOW* :RESET-CALENDAR)
    (SEND *WEEK-WINDOW* :RESET-CALENDAR)
    (SEND *FOUR-WEEKS-WINDOW* :RESET-CALENDAR)
    (LET ((TERMINAL-IO TERMINAL-IO))
      (SET-MAIN-WINDOW-CONFIGURATION *DEFAULT-INITIAL-WINDOW-CONFIGURATION*
	(OR FORCE-RESET ( *SUMMARY-WINDOW-FRACTION* OLD-SUMMARY-WINDOW-FRACTION))))))

(DEFUN RESET-ZMAIL-USER (&OPTIONAL FORCE-RESET)
  (LET ((OLD-SUMMARY-WINDOW-FRACTION *SUMMARY-WINDOW-FRACTION*))
    (IF (AND (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
	     (LOOP FOR W FIRST TV:SELECTED-WINDOW THEN (SEND W :SUPERIOR)
		   WHILE W
		   THEREIS (EQ W *ZMAIL-WINDOW*)))
	(PROGN
	  (BEEP)
	  (FORMAT ERROR-OUTPUT
		  "~&WARNING:  ~You are logging out from within Zmail.  ~
			         Zmail will not be reset.~@
				 Your Zmail customizations will remain in ~
				 effect for whoever next uses this machine.~~%"))
      ;; Not running inside Zmail so it's OK to reset.
      (WHEN (OR FORCE-RESET			;caller demands we reset even if ZMail unused
		(NOT (NULL *ZMAIL-USER*)))
	(RESET-USER-OPTIONS *ZMAIL-USER-OPTION-ALIST*)
	(RESET-USER-OPTIONS *ZMAIL-HARDCOPY-OPTION-ALIST*)
	(DOLIST (ITEM *ZMAIL-GLOBAL-INITIALIZATION-LIST*)
	  (SET (CAR ITEM) (CDR ITEM)))
	(WHEN (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
	  (LET ((ZMAIL-PROCESS (SYMEVAL-IN-INSTANCE *ZMAIL-WINDOW* 'TV:PROCESS)))
	    (WHEN (TYPEP ZMAIL-PROCESS 'SI:PROCESS)
	      (SEND ZMAIL-PROCESS :RESET)))
	  (SEND *ZMAIL-WINDOW* :RESET-USER OLD-SUMMARY-WINDOW-FRACTION FORCE-RESET)
	  (TV:SHEET-FORCE-ACCESS (*ZMAIL-WINDOW*)
	    (SEND *ZMAIL-WINDOW* :REFRESH))
	  (SETQ *ZMAIL-USER-MAIL-ADDRESS* NIL
		*ZMAIL-USER* NIL))))))

3;;; Reset 0Zmail3 on logout only if it was actually used during the session.
0(DEFUN RESET-ZMAIL-ON-LOGOUT ()
  (SETF *ZMAIL-MUST-WAIT-FOR-LOGIN* T)
  (RESET-ZMAIL-USER)
  (WHEN (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
    (RESET-ZMAIL-BACKGROUND)))

(ADD-INITIALIZATION "Reset Zmail" '(RESET-ZMAIL-ON-LOGOUT) '(LOGOUT))

3;;; Let 0Zmail3 run after a user logs in.
0(DEFUN ENABLE-ZMAIL-ON-LOGIN ()
  (SETF *ZMAIL-MUST-WAIT-FOR-LOGIN* NIL))

(ADD-INITIALIZATION "Enable Zmail" '(ENABLE-ZMAIL-ON-LOGIN) '(LOGIN))

3;;; Reset 0Zmail3 after a warm boot.
0(DEFUN RESET-ZMAIL-AFTER-WARM-BOOT ()
  (WHEN (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
    (RESET-ZMAIL-SEQUENCE-LOCKS)
    (RESET-ZMAIL-BACKGROUND :FORCE-LOCKS T)
    (SETF *ZMAIL-RESET-DURING-WARM-BOOT* T)))

(ADD-INITIALIZATION "Reset Zmail" '(RESET-ZMAIL-AFTER-WARM-BOOT) '(:WARM))


(DEFVAR *ZMAIL-PROFILE-LOADING-LOCK-CELL* ()
  "Lock cell to prevent two loadings of the ZMAIL profile")

(DEFUN SET-ZMAIL-USER (&OPTIONAL IN-BACKGROUND-P)
  (SI:WITH-LOCK-HELD (*ZMAIL-PROFILE-LOADING-LOCK-CELL* :WHOSTATE "Profile Lock")
    (WHEN (NOT (EQUAL *ZMAIL-USER* USER-ID))
      (LOAD-ZMAIL-PROFILE :BACKGROUND IN-BACKGROUND-P
			  :RESET NIL
			  :LOAD T				     
			  :UPDATE-CONFIGURATION T
			  :PROFILE-EDITOR NIL))))

(DEFMETHOD (:SET-ZMAIL-USER BASIC-ZMAIL) (&OPTIONAL SILENT)
  (SET-ZMAIL-USER SILENT))

(DEFINE-ZMAIL-BACKGROUND-REQUEST SET-ZMAIL-USER () ()
  (WHEN (NULL *ZMAIL-USER*)
    (SEND *ZMAIL-WINDOW* :NULL-STARTUP-SETUP))
  (TRAP-BACKGROUND-ERRORS (ERROR "Error preloading Zmail INIT file; ~
				  remaining preload requests have been cancelled")
			  ()
       (SETF (LOCATION-CONTENTS *ZMAIL-BACKGROUND-PRELOAD-QUEUE*) NIL)
    (SEND *ZMAIL-WINDOW* :SET-ZMAIL-USER T))
  (ZMAIL-BACKGROUND-REQUEST-COMPLETE))

(DEFUN LOAD-ZMAIL-PROFILE (&KEY ((:BACKGROUND IN-BACKGROUND-P))
				((:RESET RESET-P))
				((:LOAD LOAD-P))
				((:UPDATE-CONFIGURATION UPDATE-CONFIGURATION-P))
				((:PROFILE-EDITOR IN-PROFILE-EDITOR-P)))
  (LET ((SILENT-P IN-BACKGROUND-P)
	(OLD-FRACT *SUMMARY-WINDOW-FRACTION*)
	(OLD-CMWSOM *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*))
    (WHEN RESET-P
      (RESET-USER-OPTIONS *ZMAIL-USER-OPTION-ALIST*)
      (RESET-USER-OPTIONS *ZMAIL-HARDCOPY-OPTION-ALIST*))
    (UNLESS IN-PROFILE-EDITOR-P
      (SETQ *SAVED-TEMPLATES* *TEMPLATES*))
    (UNLESS SILENT-P
      (TYPEIN-LINE ""))
    (WHEN LOAD-P
      (BLOCK LOAD-INIT-FILE
	(LET ((PATHNAME (ZMAIL-PROFILE-PATHNAME)))
	  (ERROR-RESTART (ERROR "Retry loading ~A" PATHNAME)
	    (CATCH-ERROR-RESTART (ERROR "Skip loading ~A" PATHNAME)
	      (WITH-OPEN-STREAM
		(STREAM (CONDITION-CASE-IF (NOT IN-BACKGROUND-P) (ERROR)
			     (CONDITION-CASE ()
				  (FS:OPEN-FILE-SEARCH
				    ('LOAD *ZMAIL-PATHNAME-DEFAULTS*)
				    (FS:LOAD-TYPE-LIST PATHNAME T)
				    :CHARACTERS :DEFAULT)
				(FS:MULTIPLE-FILE-NOT-FOUND
				  (RETURN-FROM LOAD-INIT-FILE)))
			   (FS:FILE-ERROR
			     (BEEP)
			     (TYPEIN-LINE "Warning:  Unable to load init file: ~A"
					  ERROR)
			     (RETURN-FROM LOAD-INIT-FILE))))
		(UNLESS SILENT-P
		  (TYPEIN-LINE "Loading init file ~A" (SEND STREAM :TRUENAME)))
		(FS:LOAD-STREAM STREAM "ZWEI" T)))))))
    (FIXUP-OPTIONS-FROM-INIT-FILE)
    (COMPUTE-DONT-REPLY-TO-OPTION)
    (INVERT-CONFIGURATION-OPTIONS '(:NEW) '(:FILTERING-COMMANDS))
    (CLEANUP-DANGEROUS-COMMAND-OPTIONS IN-PROFILE-EDITOR-P)
    (SETQ *HARDCOPY-DEVICE* NIL)		; no longer stored in profile
    (COMPLETE-HARDCOPY-OPTIONS *DEFAULT-HARDCOPY-OPTIONS* T)
    (USING-HARDCOPY-OPTIONS (*DEFAULT-HARDCOPY-OPTIONS*)
      (COMPLETE-HARDCOPY-OPTIONS *LAST-HARDCOPY-OPTIONS* T))
    (LET-IF IN-PROFILE-EDITOR-P
	    ;; Let documentation updating functions know that they are being
	    ;; invoked from the profile editor but that, as all options are being
	    ;; reset, they should not ask any questions.
	    ((*EXPLICIT-OPTION-UPDATE* T)
	     (*RESET-OPTIONS-FROM-PROFILE-EDITOR* T))
      (UPDATE-ALL-COMMANDS-ASSOCIATED-WITH-OPTIONS-DOCUMENTATION))
    (WHEN UPDATE-CONFIGURATION-P
      (IF IN-BACKGROUND-P
	  (QUEUE-ZMAIL-BACKGROUND-RESPONSE CONFIG-CHANGED OLD-FRACT OLD-CMWSOM)
	(SET-MAIN-WINDOW-CONFIGURATION *DEFAULT-INITIAL-WINDOW-CONFIGURATION*
				       ( *SUMMARY-WINDOW-FRACTION* OLD-FRACT))
	(WHEN (NEQ *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY* OLD-CMWSOM)
	  (SEND *ZMAIL-WINDOW* :UPDATE-CALENDAR-WINDOWS-FOR-NEW-START-OF-WEEK))))
    (UNLESS IN-PROFILE-EDITOR-P
      (TURN-ON-USER-MODES)
      (SEND *PROFILE-EDITOR* :NEW-USER)
      (SETQ *ZMAIL-USER-MAIL-ADDRESS* NIL)
      (SETQ *ZMAIL-USER* USER-ID))))

(DEFINE-ZMAIL-BACKGROUND-RESPONSE CONFIG-CHANGED (OLD-FRACT OLD-CMWSOM) ()
  (SET-MAIN-WINDOW-CONFIGURATION *DEFAULT-INITIAL-WINDOW-CONFIGURATION*
				 ( *SUMMARY-WINDOW-FRACTION* OLD-FRACT))
  (WHEN (NEQ *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY* OLD-CMWSOM)
    (SEND *ZMAIL-WINDOW* :UPDATE-CALENDAR-WINDOWS-FOR-NEW-START-OF-WEEK)))

(DEFUN UPDATE-COMMAND-DOCUMENTATION-ASSOCIATED-WITH-OPTION (OPTION &OPTIONAL (TELL-WHO-LINE T)
									     RECURSIVE)
  (DOLIST (COMMAND (GET OPTION 'DOCUMENTATION-ASSOCIATED-COMMANDS))
    (UPDATE-COMMAND-WHO-LINE-DOCUMENTATION COMMAND TELL-WHO-LINE RECURSIVE)))

(DEFUN UPDATE-ALL-COMMANDS-ASSOCIATED-WITH-OPTIONS-DOCUMENTATION ()
  (DOLIST (OPTION-ITEM *ZMAIL-USER-OPTION-ALIST*)
    (UPDATE-COMMAND-DOCUMENTATION-ASSOCIATED-WITH-OPTION (FIRST OPTION-ITEM)))
  (DOLIST (OPTION *OPTIONS-NOT-IN-ALIST*)
    (UPDATE-COMMAND-DOCUMENTATION-ASSOCIATED-WITH-OPTION OPTION)))

;;; Invoked whenever the user's default hardcopy printer changes.
(DEFMETHOD (:RESET-HARDCOPY-WHO-LINE-DOCUMENTATION ZMAIL-FRAME) ()
  (UPDATE-COMMAND-DOCUMENTATION-ASSOCIATED-WITH-OPTION '*LAST-HARDCOPY-OPTIONS*))

;;; Make up for things that don't have a printed representation, but which write-user-options
;;; dumps as strings anyway.
(DEFUN FIXUP-OPTIONS-FROM-INIT-FILE ()
  (LOOP FOR (SYMBOL NIL TYPE) IN *ZMAIL-USER-OPTION-ALIST* DOING
    (SELECTQ TYPE
      (:ADDRESS-LIST
       (LOOP FOR ADDRESS IN (SYMEVAL SYMBOL)
	     DO (LET ((TEM (GETL (LOCF ADDRESS) '(:USER))))
		  (WHEN (AND TEM (STRINGP (CADR TEM)))
		    (SETF (CADR TEM) (NET:FIND-OBJECT-NAMED ':USER (CADR TEM)))))
		(LET ((TEM (GETL (LOCF ADDRESS) '(:HOST))))
		  (WHEN (AND TEM (EQ (CAADR TEM) ':OBJECT) (STRINGP (CADADR TEM)))
		    (SETF (CADADR TEM) (NET:PARSE-HOST (CADADR TEM)))))))
      (:PATHNAME-LIST
       (LOOP FOR LIST ON (SYMEVAL SYMBOL)
	     DO (WHEN (STRINGP (CAR LIST))
		  (SETF (CAR LIST)
			(FS:MERGE-PATHNAMES (CAR LIST) *ZMAIL-PATHNAME-DEFAULTS*)))))
      (:PATHNAME-OR-NIL
       (WHEN (STRINGP (SYMEVAL SYMBOL))
	 (SET SYMBOL (FS:MERGE-PATHNAMES (SYMEVAL SYMBOL) *ZMAIL-PATHNAME-DEFAULTS*))))
      )))

;;; For compatibility with Release 6, we must use the old names for configuration options.
(DEFUN INVERT-CONFIGURATION-OPTIONS (OLD-SETTINGS NEW-SETTINGS)
  (LOOP FOR OPTION IN `(*DEFAULT-INITIAL-WINDOW-CONFIGURATION*
			*DEFAULT-MAIL-WINDOW-CONFIGURATION*
			*CONFIGURE-MIDDLE-MODE*)
	AS VALUE = (SYMEVAL OPTION)
	WHEN (MEMQ VALUE OLD-SETTINGS)
	  DO (SET OPTION (NTH (FIND-POSITION-IN-LIST VALUE OLD-SETTINGS) NEW-SETTINGS))))

(DEFUN CLEANUP-DANGEROUS-COMMAND-OPTIONS (FROM-PROFILE-EDITOR)
3  ;; Compatibility with profiles generated during Release 7.2 development.
0  (COND ((EQ *ASK-BEFORE-EXECUTING-DANGEROUS-ZMAIL-COMMANDS* T)
	 (SETQ *ASK-BEFORE-EXECUTING-DANGEROUS-ZMAIL-COMMANDS* :ALL))
	((EQ *ASK-BEFORE-EXECUTING-DANGEROUS-ZMAIL-COMMANDS* NIL)
	 (SETQ *ASK-BEFORE-EXECUTING-DANGEROUS-ZMAIL-COMMANDS* :SELECTIVE
	       *SELECTED-DANGEROUS-ZMAIL-COMMANDS* '(COM-ZMAIL-MAP-OVER))))
  (SETQ *SELECTED-DANGEROUS-ZMAIL-COMMANDS* (CL:REMOVE-DUPLICATES
					      (SUBLIS '((COM-ZMAIL-EXPUNGE
							  . COM-ZMAIL-EXPUNGE-SEQUENCE)
							(COM-ZMAIL-SAVE
							  . COM-ZMAIL-SAVE-ALL-MAIL-FILES))
						      *SELECTED-DANGEROUS-ZMAIL-COMMANDS*)))
  (LABELS ((SHOW-OPTION (OPTION)
	     (REMPROP OPTION 'TV:NOT-SITE-KEYWORDS-RESTRICTION))
	   (HIDE-OPTION (OPTION)
	     (PUTPROP OPTION T 'TV:NOT-SITE-KEYWORDS-RESTRICTION)))
    (SELECTQ *ASK-BEFORE-EXECUTING-DANGEROUS-ZMAIL-COMMANDS*
      (:ALL
       (HIDE-OPTION '*SELECTED-DANGEROUS-ZMAIL-COMMANDS*)
       (SHOW-OPTION '*TOO-MANY-MSGS-QUERY-THRESHOLD*))
      (:SELECTIVE
       (SHOW-OPTION '*SELECTED-DANGEROUS-ZMAIL-COMMANDS*)
       (IF (MEMQ 'COM-ZMAIL-MAP-OVER *SELECTED-DANGEROUS-ZMAIL-COMMANDS*)
	   (SHOW-OPTION '*TOO-MANY-MSGS-QUERY-THRESHOLD*)
	   (HIDE-OPTION '*TOO-MANY-MSGS-QUERY-THRESHOLD*)))
      (:NONE
       (HIDE-OPTION '*SELECTED-DANGEROUS-ZMAIL-COMMANDS*)
       (HIDE-OPTION '*TOO-MANY-MSGS-QUERY-THRESHOLD*)))
    (UNLESS FROM-PROFILE-EDITOR
      (SEND *PROFILE-WINDOW* :SEND-PANE
	    'CHOOSE-WINDOW :SET-VARIABLES (TV:PRUNE-USER-OPTION-ALIST
					    *ZMAIL-USER-OPTION-ALIST*)
					  T))))

(DEFVAR *ZMAIL-PROFILE-HOST* NIL)

(DEFUN ZMAIL-PROFILE-PATHNAME (&OPTIONAL (CANONICAL-TYPE NIL) (HOST *ZMAIL-PROFILE-HOST*))
  (FS:INIT-FILE-PATHNAME "ZMAIL" CANONICAL-TYPE (OR HOST FS:USER-LOGIN-MACHINE)))

(DEFUN CHECK-FOR-ZMAIL-TYPEOUT-WINDOW-TYPEOUT ()
  (LET ((*COMTAB* (SEND *CURRENT-COMMAND-LOOP* :MOUSE-GESTURE-COMTAB)))
    (CHECK-FOR-TYPEOUT-WINDOW-TYPEOUT)))

;;; This is the main command loop for the program
(DEFMETHOD (:COMMAND-LOOP ZMAIL-FRAME) ()
  (*CATCH (SEND SELF ':TOP-LEVEL-TAG)
    (DO ((*ZMAIL-COMMAND-BUTTON* NIL NIL))
	(NIL)
      (SETQ *LAST-COMMAND-TYPE* *CURRENT-COMMAND-TYPE*
	    *CURRENT-COMMAND-TYPE* NIL
	    *NUMERIC-ARG* 1
	    *NUMERIC-ARG-P* NIL
	    *NUMERIC-ARG-N-DIGITS* 0
	    *MARK-STAYS* NIL
	    *MINI-BUFFER-COMMAND* NIL)
      (*CATCH 'RETURN-TO-COMMAND-LOOP
	(WHEN (*CATCH 'TOP-LEVEL
		(CATCH-ERROR-RESTART ((ERROR SYS:ABORT) "Return to Zmail Top Level")
		  (CATCH-ZWEI-COMMAND-LOOP
		    (PROG ()
			  (SEND SELF ':REDISPLAY)
			  (TICK)
		       GETCHAR
			  (WHEN *SEQUENCE* (SEND *SEQUENCE* ':CERTIFY-FOR-SELECTION))
			  (ZMAIL-INPUT BACKGROUND-IO-BUFFER)
		       GOTCHAR
			  (LET ((DEGREE (IF (LISTP *LAST-COMMAND-CHAR*)
					    (LEXPR-SEND SELF ':PROCESS-SPECIAL-COMMAND
							*LAST-COMMAND-CHAR*)
					    (SEND SELF ':PROCESS-COMMAND-CHAR
						  *LAST-COMMAND-CHAR*))))
			    (COND ((EQ DEGREE ':ARGUMENT)
				   (LET ((CH (READ-ARGUMENT-TYPEAHEAD-CHARACTER)))
				     (COND ((NOT (NULL CH))
					    (SETQ *LAST-COMMAND-CHAR* CH)
					    (GO GOTCHAR))))
				   (TYPEIN-LINE "Arg: ~A" (FORMAT-ARGUMENT *NUMERIC-ARG-P*
									   *NUMERIC-ARG*))
				   (SEND *TYPEIN-WINDOW* ':MAKE-COMPLETE)
				   (GO GETCHAR))
				  ((EQ DEGREE ':REDISPLAY-PRESERVE-TYPEIN)
				   (SEND SELF ':REDISPLAY T)
				   (GO GETCHAR)))
			    (MUST-REDISPLAY *WINDOW* DEGREE))
			  (CHECK-FOR-ZMAIL-TYPEOUT-WINDOW-TYPEOUT)
		       NIL))))
	  (SEND *TYPEOUT-WINDOW* ':MAKE-COMPLETE))))))

(DEFMETHOD (:MOUSE-GESTURE-COMTAB ZMAIL-FRAME) () *ZMAIL-COMTAB*)

;;; Process a top-level ZMAIL command
(DEFWHOPPER (:PROCESS-COMMAND-CHAR ZMAIL-FRAME) (CHAR)	; this will make foreground
  (WITH-BACKGROUND-PROCESS-SLEEPING		        ; command flag be set
    (CONTINUE-WHOPPER CHAR)))

(DEFMETHOD (:PROCESS-COMMAND-CHAR ZMAIL-FRAME) (CH)
  (SETQ *ZMAIL-COMMAND-BUTTON* ':KBD)
  (ZMAIL-COMMAND-EXECUTE (COMMAND-LOOKUP CH *ZMAIL-COMTAB*)))

(DEFUN ZMAIL-COMMAND-EXECUTE (*CURRENT-COMMAND*)
  (COMMAND-EXECUTE *CURRENT-COMMAND* *LAST-COMMAND-CHAR*))

(DEFMETHOD (:TOP-LEVEL-TAG ZMAIL-FRAME) () 'EXIT-TOP-LEVEL)

(DEFMETHOD (:PROCESS-SPECIAL-COMMAND ZMAIL-FRAME) (&REST ARGS)
  (WITH-BACKGROUND-PROCESS-SLEEPING		; this will make foreground
    (APPLY #'ZMAIL-COMMAND-LIST ARGS)))		; command flag be set

(DEFSELECT (ZMAIL-COMMAND-LIST ZMAIL-COMMAND-LIST-DEFAULT)
  (:MENU (ITEM CH WINDOW)			;Request from the main menu
    (SET-COMMAND-BUTTON CH)
    (ZMAIL-COMMAND-EXECUTE (SEND WINDOW ':EXECUTE-NO-SIDE-EFFECTS ITEM)))
  (:MOUSE-BUTTON (IGNORE WINDOW IGNORE IGNORE)
    (IF (OR (EQ WINDOW *TYPEIN-WINDOW*) (EQ WINDOW *MODE-LINE-WINDOW*))
	3;; Clicking in the typein or mode line window0 3should just beep --
0	3;;    However, by the time we get this blip, the typein window has already been
0	3;;    "selected" by the window system.  Thus, we must reselect the current window
0	3;;    to shut off the typein window's cursor and restart the current window's cursor.
0	(PROGN
	  (SELECT-WINDOW *WINDOW*)
	  (BEEP)
	  DIS-NONE)
      (SEND STANDARD-INPUT :UNTYI *LAST-COMMAND-CHAR*)
      (COMMAND-WITH-UNIVERSE-OR-FILTER)))
  (SUMMARY-MOUSE (ITEM IGNORE CHAR &AUX (MSG (CADR ITEM)))
    (SET-COMMAND-BUTTON CHAR)			;Clicking on mouse in summary window
    (ZMAIL-SUMMARY-MOUSE MSG))
  (MODE-LINE (COMMAND BUTTON)
    (SET-COMMAND-BUTTON BUTTON)
    (ZMAIL-COMMAND-EXECUTE COMMAND))
  (BACKGROUND (RESPONSE)
    (EXECUTE-BACKGROUND-RESPONSE RESPONSE)
    DIS-NONE)
  )

;;; Background response to allow a background action to say something of interest.
(DEFINE-ZMAIL-BACKGROUND-RESPONSE TYPEIN-LINE-DURABLE (MESSAGE &REST FORMAT-ARGS)
     (:PRINT-FORMAT "~?"
      :PRINT-FORMAT-ARGS (MESSAGE FORMAT-ARGS))
  (CL:APPLY #'TYPEIN-LINE-DURABLE MESSAGE FORMAT-ARGS))

3;;; Print in the overlying window.
0(DEFUN WITH-OVERLYING-WINDOW-INTERNAL (CONTINUATION)
  (DECLARE (SYS:DOWNWARD-FUNARG CONTINUATION))
  (LET ((*EDITOR-ALREADY-KNOWS* T))
    (SEND *OVERLYING-WINDOW* :CLEAR-HISTORY)
    (TV:WINDOW-CALL-RELATIVE (*OVERLYING-WINDOW* :DEACTIVATE)
      (LET ((TERMINAL-IO *OVERLYING-WINDOW*)
	    (*TYPEOUT-WINDOW* *OVERLYING-WINDOW*)
	    (*TYPEIN-WINDOW* *OVERLYING-WINDOW*))
	(TV:WITH-NOTIFICATION-MODE (:ALWAYS-POP-UP *OVERLYING-WINDOW*)
	  (FUNCALL CONTINUATION *OVERLYING-WINDOW*)
	  (FORMAT *OVERLYING-WINDOW*
		  "~&Type any character to return to the normal configuration: ")
	  (LOOP AS CHAR = (SYS:READ-CHARACTER *OVERLYING-WINDOW*)
		DOING
	    (SELECTOR CHAR CHAR-EQUAL
	      (#\SCROLL
	       (CP::SCROLL-WINDOW-COMMAND-INTERNAL :SCREEN +1 :Y *OVERLYING-WINDOW*))
	      (#\META-SCROLL
	       (CP::SCROLL-WINDOW-COMMAND-INTERNAL :SCREEN -1 :Y *OVERLYING-WINDOW*))
	      ((#\END #\SPACE)
	       (RETURN NIL))
	      (OTHERWISE
		(SEND STANDARD-INPUT :UNTYI CHAR)
		(RETURN NIL)))))))))

;;; Background stuff

(DEFUN RESET-ZMAIL-BACKGROUND (&KEY FORCE-LOCKS)
  (SETQ *ZMAIL-RUNNING-FOREGROUND-COMMAND* NIL
	*ZMAIL-BACKGROUND-P* NIL)
  (LABELS ((RESET-ZMAIL-BACKGROUND-LOCK ()
	     (SETF (LOCATION-CONTENTS *ZMAIL-BACKGROUND-PROCESS-LOCK*) NIL))
	   (CLEANUP-ZMAIL-BACKGROUND-REQUESTS ()
	     (SI:WITH-LOCK-HELD ((LOCATION-CONTENTS *ZMAIL-BACKGROUND-PROCESS-LOCK*)
				 :WHOSTATE "Background Lock")
	       (DOLIST (SEQUENCE *SEQUENCE-LIST*)
		 (WHEN (SEQUENCE-BUFFER-P SEQUENCE)
		   (ABORT-MAIL-FILE-IO SEQUENCE)))
	       (FLUSH-ZMAIL-BACKGROUND-REQUESTS-INTERNAL *ZMAIL-BACKGROUND-REQUEST-QUEUE*)
	       (FLUSH-ZMAIL-BACKGROUND-REQUESTS-INTERNAL *ZMAIL-BACKGROUND-PRELOAD-QUEUE*)
	       (FLUSH-ZMAIL-BACKGROUND-REQUESTS-INTERNAL *ZMAIL-BACKGROUND-MAIL-CHECK-QUEUE*))
	     ))
    (WHEN FORCE-LOCKS
      (FUNCALL-IN-ZMAIL-INSTANCE *ZMAIL-WINDOW* #'RESET-ZMAIL-BACKGROUND-LOCK))
    (FUNCALL-IN-ZMAIL-INSTANCE *ZMAIL-WINDOW* #'CLEANUP-ZMAIL-BACKGROUND-REQUESTS)))

(DEFUN-IN-FLAVOR (MAYBE-RESET-ZMAIL-BACKGROUND-PROCESS BASIC-ZMAIL) (REASON)
  (WHEN (PROCESS:FLUSHED-P *ZMAIL-BACKGROUND-PROCESS*)
    (PROCESS:RESET *ZMAIL-BACKGROUND-PROCESS*))
  (PROCESS:ENABLE-RUN-REASON *ZMAIL-BACKGROUND-PROCESS* REASON))

(DEFMETHOD (:SELECT ZMAIL-FRAME :AFTER) (&OPTIONAL IGNORE)
  (MAYBE-RESET-ZMAIL-BACKGROUND-PROCESS SELF))

(DEFVAR *BACKGROUND-MOUSE-SPEED-THRESHOLD* 2.5s0)

(DEFVAR *ZMAIL-BACKGROUND-KBD-DELAY* (* 60. 5)
  "Minimum idle time before the Zmail background process is allowed to run.")

(DEFVAR *MINIMUM-BACKGROUND-RESPONSE-BUFFER-UNUSED-FRACTION* 0.25
  "Minimum free slots in response queue as a percentage to allow the background to run.")

(DEFVAR *MINIMUM-BACKGROUND-RESPONSE-BUFFER-UNUSED-ENTRIES* 12.
  "Minimum free slots in response queue as an absolute value to allow the background to run.")

;;; This is the top level of the background process
(DEFUN ZMAIL-BACKGROUND (*FOREGROUND-WINDOW*
			 *ZMAIL-BACKGROUND-PROCESS-LOCK* *ZMAIL-BACKGROUND-REQUEST-QUEUE*
			 *ZMAIL-BACKGROUND-PRELOAD-QUEUE* *ZMAIL-BACKGROUND-MAIL-CHECK-QUEUE*
			 &AUX (*ZMAIL-BACKGROUND-P* T))
  (LOOP DOING
    (ZMAIL-BACKGROUND-LOOP-BODY *ZMAIL-BACKGROUND-PROCESS-LOCK*
				*ZMAIL-BACKGROUND-REQUEST-QUEUE*
				*ZMAIL-BACKGROUND-PRELOAD-QUEUE*)))

(DEFUN ZMAIL-BACKGROUND-LOOP-BODY (LOCK REQUEST-QUEUE-POINTER PRELOAD-QUEUE-POINTER)
  ;; Try not to interfere with mousing commands.
  (LET ((MOUSE (TV:SHEET-MOUSE *FOREGROUND-WINDOW*)))
    (WHEN MOUSE
      (DO ()
	  ((< (TV:MOUSE-SPEED MOUSE) *BACKGROUND-MOUSE-SPEED-THRESHOLD*))
	(CL:SLEEP 10. :SLEEP-REASON "Mouse Wait"))))
  (WHEN (AND *HANG-BACKGROUND-PROCESS-WHEN-DEEXPOSED* (NULL (CAR PRELOAD-QUEUE-POINTER)))
    ;; Only run when main window is exposed or a preload is in progress
    (ZMAIL-BACKGROUND-WAIT-FOR-EXPOSURE))
  ;; To avoid the possibility of deadlocks due to full buffer while background locked,
  ;; and to avoid the background getting grossly ahead of the foreground (thus causing
  ;; it to run continuously), we set a limit, and wait if we have that many or more
  ;; when we're about to lock resources.
  (LET* ((BUFFER (SEND *FOREGROUND-WINDOW* :BACKGROUND-IO-BUFFER))
	 (MINIMUM-FREE (MAX *MINIMUM-BACKGROUND-RESPONSE-BUFFER-UNUSED-ENTRIES*
			    (CEILING (* *MINIMUM-BACKGROUND-RESPONSE-BUFFER-UNUSED-FRACTION*
					(TV:IO-BUFFER-SIZE BUFFER)))))
	 (MAXIMUM-USED (- (TV:IO-BUFFER-SIZE BUFFER) MINIMUM-FREE)))
    (PROCESS-WAIT "Foreground" #'ZMAIL-FOREGROUND-IO-WAIT BUFFER MAXIMUM-USED))
  (SI:WITH-LOCK-HELD ((LOCATION-CONTENTS LOCK) :WHOSTATE "Background Lock")
    (ZMAIL-BACKGROUND-PERFORM REQUEST-QUEUE-POINTER PRELOAD-QUEUE-POINTER))
  (UNLESS (OR *ZMAIL-RUNNING-FOREGROUND-COMMAND* *INHIBIT-BACKGROUND-MAIL-CHECKS*)
    ;; Only check for new mail while the foreground isn't busy
    (ZMAIL-BACKGROUND-CHECK-FOR-NEW-MAIL))
  (LET* ((REQUEST-STATE (CAR REQUEST-QUEUE-POINTER))
	 (PRELOAD-STATE (CAR PRELOAD-QUEUE-POINTER))
	 (INTERVAL (IF (OR REQUEST-STATE PRELOAD-STATE) 1. 30.)))
    (PROCESS:PROCESS-BLOCK-AND-POLL-WAIT-FUNCTION
      "Zmail Background"
      (MAX 1 (MIN INTERVAL (SCL:// *ZMAIL-BACKGROUND-KBD-DELAY* 60s0)))
      'PROCESS::VERIFY-FUNCTION
      #'ZMAIL-BACKGROUND-PAUSE (TIME) (* INTERVAL 60.)
			       REQUEST-STATE REQUEST-QUEUE-POINTER
			       PRELOAD-STATE PRELOAD-QUEUE-POINTER)))

(DEFINE-ZMAIL-BACKGROUND-REQUEST HANG-WHEN-DEEXPOSED (&OPTIONAL (FLAG T))
     (:PRINT-FORMAT "~:[Hang~;Run~] when deexposed" :PRINT-FORMAT-ARGS (FLAG))
  (SETQ *HANG-BACKGROUND-PROCESS-WHEN-DEEXPOSED* FLAG)
  (ZMAIL-BACKGROUND-REQUEST-COMPLETE))

(DEFUN ZMAIL-FOREGROUND-IO-WAIT (BUFFER MAXIMUM-USED)
  (WITHOUT-INTERRUPTS
    (LET ((CURRENTLY-USED
	    (MOD (- (+ (TV:IO-BUFFER-INPUT-POINTER BUFFER) (TV:IO-BUFFER-SIZE BUFFER))
		    (TV:IO-BUFFER-OUTPUT-POINTER BUFFER))
		 (TV:IO-BUFFER-SIZE BUFFER))))
      (< CURRENTLY-USED MAXIMUM-USED))))

(DEFUN ZMAIL-BACKGROUND-PAUSE (START-TIME INTERVAL
			       OLD-REQUEST-STATE REQUEST-QUEUE-POINTER
			       OLD-PRELOAD-STATE PRELOAD-QUEUE-POINTER)
  (AND (NOT (STOP-ZMAIL-BACKGROUND-FOR-FOREGROUND-P))
       (> (TIME-DIFFERENCE (TIME) TV:KBD-LAST-ACTIVITY-TIME) *ZMAIL-BACKGROUND-KBD-DELAY*)
       (OR ( (TIME-DIFFERENCE (TIME) START-TIME) INTERVAL)
	   (NEQ (CAR REQUEST-QUEUE-POINTER) OLD-REQUEST-STATE)
	   (NEQ (CAR PRELOAD-QUEUE-POINTER) OLD-PRELOAD-STATE))))

;;; Return non-NIL if the background process must stop in order to allow a foreground
;;; command to execute -- Certain foreground commands (e.g., draft composition) explicitly
;;; allow background requests to continue execution.
(DEFUN STOP-ZMAIL-BACKGROUND-FOR-FOREGROUND-P ()
  (AND *ZMAIL-RUNNING-FOREGROUND-COMMAND*
       (NEQ *ZMAIL-RUNNING-FOREGROUND-COMMAND* :REQUESTS-ALLOWED)))

;; Wait for exposure (or until we're allowed to run anyway).
(DEFUN ZMAIL-BACKGROUND-WAIT-FOR-EXPOSURE ()
  (PROCESS-WAIT "Expose" #'(LAMBDA ()
			     (OR (TV:SHEET-EXPOSED-P *ZMAIL-WINDOW*)
				 (NOT *HANG-BACKGROUND-PROCESS-WHEN-DEEXPOSED*)))))

;;; Execute the next appropriate background/preload request -- Preference is given to
;;; ordinary background requests over preload requests.
(DEFUN ZMAIL-BACKGROUND-PERFORM (REQUEST-QUEUE-POINTER PRELOAD-QUEUE-POINTER)
  (LET ((CURRENT-REQUEST (FIRST (LOCATION-CONTENTS REQUEST-QUEUE-POINTER)))
	(CURRENT-PRELOAD-REQUEST (FIRST (LOCATION-CONTENTS PRELOAD-QUEUE-POINTER))))
    (COND (CURRENT-REQUEST
	   (ZMAIL-BACKGROUND-PERFORM-REQUEST CURRENT-REQUEST REQUEST-QUEUE-POINTER))
	  (CURRENT-PRELOAD-REQUEST
	   (ZMAIL-BACKGROUND-PERFORM-REQUEST CURRENT-PRELOAD-REQUEST PRELOAD-QUEUE-POINTER))))
  )

;;; Check for new mail and notify the user when found --
;;;   Our MAIL-CHECK-QUEUE contains a background request for each inbox that should
;;;   be checked for new mail.  Thus, all we have to do is process all the requests in
;;;   the queue in the standard manner.
(DEFUN ZMAIL-BACKGROUND-CHECK-FOR-NEW-MAIL ()
  (WHEN (AND (TV:SHEET-EXPOSED-P *ZMAIL-WINDOW*)	;Only if Zmail's running ...
	     (NOT (STOP-ZMAIL-BACKGROUND-FOR-FOREGROUND-P)))
    (LOOP FOR MAIL-CHECK-REQUEST IN (LOCATION-CONTENTS *ZMAIL-BACKGROUND-MAIL-CHECK-QUEUE*)
	  DOING
      (ZMAIL-BACKGROUND-PERFORM-REQUEST MAIL-CHECK-REQUEST *ZMAIL-BACKGROUND-MAIL-CHECK-QUEUE*)
      )))

;;; Execute a single background request.
(DEFUN ZMAIL-BACKGROUND-PERFORM-REQUEST (REQUEST QUEUE-POINTER)
  (LET ((REQUEST-DISPOSITION (EXECUTE-BACKGROUND-REQUEST REQUEST)))
    (CL:ECASE REQUEST-DISPOSITION
      (:COMPLETE
	(SETF (LOCATION-CONTENTS QUEUE-POINTER) (DELQ REQUEST
						      (LOCATION-CONTENTS QUEUE-POINTER))))
      (:INCOMPLETE))))

;;; Put a request onto the queue for execution by the background
(DEFUN QUEUE-ZMAIL-BACKGROUND-REQUEST-INTERNAL (QUEUE-POINTER TYPE &REST REQUEST-ARGUMENTS)
  (LET ((REQUEST (MAKE-BACKGROUND-INSTANCE TYPE REQUEST-ARGUMENTS
					   'ZMAIL-BACKGROUND-REQUEST-FLAVOR
					   'ZMAIL-BACKGROUND-REQUEST-REQUEST-ARGUMENTS
					   "request")))
      (PUSH REQUEST (CAR QUEUE-POINTER))
      (UNLESS *ZMAIL-BACKGROUND-P*
	(PROCESS:PROCESS-WAKEUP *ZMAIL-BACKGROUND-PROCESS*))))

;;; Put a response from the background onto the queue for processing by the foreground
(DEFUN QUEUE-ZMAIL-BACKGROUND-RESPONSE-INTERNAL (TYPE &REST RESPONSE-ARGUMENTS)
  (LET ((RESPONSE (MAKE-BACKGROUND-INSTANCE TYPE RESPONSE-ARGUMENTS
					   'ZMAIL-BACKGROUND-RESPONSE-FLAVOR
					   'ZMAIL-BACKGROUND-RESPONSE-RESPONSE-ARGUMENTS
					   "response")))
    (TV:IO-BUFFER-PUT
      (SEND *FOREGROUND-WINDOW* :BACKGROUND-IO-BUFFER) `(BACKGROUND ,RESPONSE))))

(DEFUN MAKE-BACKGROUND-INSTANCE (NAME ARGUMENTS FLAVOR-PROPERTY ARGLIST-PROPERTY TYPE)
  (LET ((FLAVOR (GET NAME FLAVOR-PROPERTY))
	(ARGLIST (GET NAME ARGLIST-PROPERTY)))
    (CL:ASSERT (NOT (NULL FLAVOR)) () "~A is not a defined Zmail background ~A." NAME TYPE)
    (LET* ((BINDINGS (LT:MATCH-ARGS-TO-LAMBDA-LIST ARGLIST ARGUMENTS :RETURN-BINDINGS T))
	   (INIT-OPTIONS (LOOP WITH FLAVOR-KEYWORDS = (FLAVOR:FLAVOR-ALLOWED-INIT-KEYWORDS
							FLAVOR)
			       FOR (SYMBOL . VALUE) IN BINDINGS
			       AS INIT-KEYWORD = (CL:MEMBER
						   SYMBOL FLAVOR-KEYWORDS
						   :TEST
						     #'(LAMBDA (A B)
							 (STRING-EQUAL (CL:SYMBOL-NAME A)
								       (CL:SYMBOL-NAME B))))
			       COLLECT (FIRST INIT-KEYWORD)
			       IF (AND (LISTP VALUE) (EQ (FIRST VALUE) 'LIST))
				 COLLECT (COPYLIST (REST1 VALUE))
			       ELSE
				 COLLECT VALUE)))
      (CL:APPLY #'MAKE-INSTANCE FLAVOR INIT-OPTIONS))))

;;; Flush one or more background requests from the queue.
(DEFUN FLUSH-ZMAIL-BACKGROUND-REQUESTS (SEQUENCE &REST REQUEST-TYPES)
  (DECLARE (VALUES LIST-OF-FLUSHED-REQUESTS))
  (CL:APPLY #'FLUSH-ZMAIL-BACKGROUND-REQUESTS-INTERNAL *ZMAIL-BACKGROUND-REQUEST-QUEUE*
						       SEQUENCE REQUEST-TYPES))

(DEFUN FLUSH-ZMAIL-BACKGROUND-REQUESTS-INTERNAL (QUEUE-POINTER &OPTIONAL SEQUENCE
							       &REST REQUEST-TYPES)
  (DECLARE (VALUES LIST-OF-FLUSHED-REQUESTS))
  (LET ((SPECIFIC-REQUEST-TYPES
	  (LOOP FOR REQUEST-TYPE IN REQUEST-TYPES
		AS REQUEST-FLAVOR = (GET REQUEST-TYPE 'ZMAIL-BACKGROUND-REQUEST-FLAVOR)
		DO (CL:ASSERT (NOT (NULL REQUEST-FLAVOR)) ()
			      "~S is not a defined Zmail background request." REQUEST-TYPE)
		COLLECT REQUEST-FLAVOR)))
    (WITHOUT-INTERRUPTS
      (LOOP FOR REQUEST IN (LOCATION-CONTENTS QUEUE-POINTER)
	    AS REQUEST-TYPE = (CL:TYPE-OF REQUEST)
	    AS REQUEST-SEQUENCE = (IF (USES-SEQUENCE REQUEST)
				      (ZMAIL-BACKGROUND-REQUEST-SEQUENCE REQUEST))
	    AS REQUEST-MATCHES = (AND (IF SEQUENCE
					  (EQ SEQUENCE REQUEST-SEQUENCE)
					T)
				      (IF SPECIFIC-REQUEST-TYPES
					  (MEMQ REQUEST-TYPE SPECIFIC-REQUEST-TYPES)
					T))
	    IF REQUEST-MATCHES
	      DO (FLUSH-BACKGROUND-REQUEST REQUEST)
	      AND COLLECT REQUEST INTO FLUSHED-REQUESTS
	    ELSE
	      COLLECT REQUEST INTO NEW-QUEUE-CONTENTS
	    FINALLY
	      (SETF (LOCATION-CONTENTS QUEUE-POINTER) NEW-QUEUE-CONTENTS)
	      (RETURN (NREVERSE FLUSHED-REQUESTS))))))

;;; Requeue a background request that was earlier flushed
(DEFUN REQUEUE-ZMAIL-BACKGROUND-REQUEST (REQUEST)
  (CL:CHECK-TYPE REQUEST ZMAIL-BASIC-BACKGROUND-REQUEST "a Zmail background request")
  (PUSH REQUEST (LOCATION-CONTENTS *ZMAIL-BACKGROUND-REQUEST-QUEUE*))
  (PROCESS:PROCESS-WAKEUP *ZMAIL-BACKGROUND-PROCESS*))

(DEFUN LOCK-BACKGROUND-PROCESS ()
  (UNLESS (EQ CURRENT-PROCESS (CAR *ZMAIL-BACKGROUND-PROCESS-LOCK*))
    (PROCESS-LOCK *ZMAIL-BACKGROUND-PROCESS-LOCK* NIL "Background Lock")
    (LET ((BUFFER (SEND STANDARD-INPUT :SEND-IF-HANDLES :BACKGROUND-IO-BUFFER)))
      (WHEN BUFFER
	;; Process any responses from the backgroud
	(LOOP FOR RESPONSE = (TV:IO-BUFFER-GET BUFFER T)
	      WHILE RESPONSE
	      DO (EXECUTE-BACKGROUND-RESPONSE (SECOND RESPONSE)))))
    T))


;;; Preloading support

(DEFUN PRELOAD-ZMAIL (&REST FILES)
  (ZMAIL-BACKGROUND-PRELOAD *ZMAIL-WINDOW* `((:SET-ZMAIL-USER) . ,FILES)))

(DEFMETHOD (ZMAIL-BACKGROUND-PRELOAD BASIC-ZMAIL) (REQUESTS)
  (LABELS ((QUEUE-PRELOAD-REQUEST (TYPE &REST REQUEST-ARGUMENTS)
	     (LET ((REQUEST
		     (MAKE-BACKGROUND-INSTANCE TYPE REQUEST-ARGUMENTS
					       'ZMAIL-BACKGROUND-REQUEST-FLAVOR
					       'ZMAIL-BACKGROUND-REQUEST-REQUEST-ARGUMENTS
					       "request")))
	       (SETF (LOCATION-CONTENTS *ZMAIL-BACKGROUND-PRELOAD-QUEUE*)
		     (NCONC
		       (LOCATION-CONTENTS *ZMAIL-BACKGROUND-PRELOAD-QUEUE*) (NCONS REQUEST)))))
	   (CANONICALIZE-FILE (FILE)
	     (CL:ETYPECASE FILE
	       ((AND LIST (NOT NULL))
		 3;; Presume it's 1(quote pathname)3 because the user was a bit confused.
0		 (CANONICALIZE-FILE (SECOND FILE)))
	       ((OR STRING CL:PATHNAME)
		(FS:MERGE-PATHNAMES FILE *ZMAIL-PATHNAME-DEFAULTS*))))
	   (PROCESS-REQUEST (REQUEST)
	     (SCL:DESTRUCTURING-BIND (TYPE &REST ARGS) REQUEST
	       (CL:CASE TYPE
		 (:SET-ZMAIL-USER
		   (QUEUE-PRELOAD-REQUEST 'SET-ZMAIL-USER))
		 ((:EDIT-MAIL-FILE :LOAD-FILE :FIND-FILE)
		  (SCL:DESTRUCTURING-BIND (FILE &REST IGNORE) ARGS
		    (QUEUE-PRELOAD-REQUEST 'PRELOAD-MAIL-FILE (CANONICALIZE-FILE FILE))))
		 (:EDIT-ALL-MAIL-FILES
		   (QUEUE-PRELOAD-REQUEST 'PRELOAD-ALL-MAIL-FILES))
		 ((:EXAMINE-MAIL-FILE :EXAMINE-FILE)
		  (SCL:DESTRUCTURING-BIND (FILE &REST IGNORE) ARGS
		    (QUEUE-PRELOAD-REQUEST 'PRELOAD-MAIL-FILE
					   (CANONICALIZE-FILE FILE) :DISABLE-SAVES T)))
		 (:HANG-WHEN-DEEXPOSED
		   (SCL:DESTRUCTURING-BIND (&OPTIONAL (FLAG T) &REST IGNORE) ARGS
		     (QUEUE-PRELOAD-REQUEST 'HANG-WHEN-DEEXPOSED FLAG)))))))
    (DOLIST (REQUEST REQUESTS)
      (CL:TYPECASE REQUEST
	(NULL)
	(LIST
	  (PROCESS-REQUEST REQUEST))
	((OR STRING CL:PATHNAME)
	 (QUEUE-PRELOAD-REQUEST 'PRELOAD-MAIL-FILE (CANONICALIZE-FILE REQUEST)))
	(OTHERWISE
	  (PROCESS-REQUEST (LIST REQUEST)))))))

(DEFMETHOD (ZMAIL-BACKGROUND-PRELOAD BASIC-ZMAIL :AFTER) (&OPTIONAL IGNORE)
  (MAYBE-RESET-ZMAIL-FOREGROUND-PROCESS SELF CURRENT-PROCESS)
  (MAYBE-RESET-ZMAIL-BACKGROUND-PROCESS CURRENT-PROCESS))

(DEFMETHOD (MAYBE-RESET-ZMAIL-FOREGROUND-PROCESS ZMAIL-FRAME) (REASON)
  (TV:MAYBE-RESET-WINDOW-PROCESS SELF TV:PROCESS :REASON REASON :SELECT T))

3;;; Multiple reader/single writer locking primitives --
;;;    When locked for writing, the lock contains the process holding the lock.
;;;    When locked for reading, the lock contains a list of 1cons3es.  Each 1cons3 is
;;;       a stack list in the process which grabbed the lock whose 1car3 is the
;;;       process.

;;; Lock for reading -- It's OK for the process to be holding the lock for writing.
0(DEFUN LOCK-SINGLE-LOCK-FOR-READING (LOCK STACK-CELL &OPTIONAL (WHOSTATE "Read lock"))
  (DECLARE (VALUES . (LOCKED)))
  (CL:CHECK-TYPE LOCK (CL:SATISFIES LOCATIVEP) "a locative")
  (CL:CHECK-TYPE STACK-CELL (NOT ATOM) "a stack CONS")
  (CL:CHECK-TYPE WHOSTATE STRING)
  (SETF (CAR STACK-CELL) CURRENT-PROCESS)
  (LOOP DOING
    (WITHOUT-INTERRUPTS
      (LET ((CURRENT-VALUE (LOCATION-CONTENTS LOCK)))
	(IF (EQ CURRENT-VALUE CURRENT-PROCESS)
	    (RETURN-FROM LOCK-SINGLE-LOCK-FOR-READING (VALUES NIL))
	    (WHEN (CL:LISTP CURRENT-VALUE)
	      3;; Unlocked or held by several readers.
0	      (SETF (CDR STACK-CELL) CURRENT-VALUE)
	      (WHEN (STORE-CONDITIONAL LOCK CURRENT-VALUE STACK-CELL)
		(RETURN-FROM LOCK-SINGLE-LOCK-FOR-READING (VALUES T)))))))
    (PROCESS-WAIT WHOSTATE
      #'(LAMBDA (LOCK) (OR (EQ (LOCATION-CONTENTS LOCK) CURRENT-PROCESS)
			   (CL:LISTP (LOCATION-CONTENTS LOCK))))
      LOCK)))

3;;; Unlock for reading --
;;;    We can't use 1store-conditional3 because we can't get the locative of the 1cdr3 of a 1cons3.
0(DEFUN UNLOCK-SINGLE-LOCK-FOR-READING (LOCK STACK-CELL)
  (CL:CHECK-TYPE LOCK (CL:SATISFIES LOCATIVEP) "a locative")
  (CL:CHECK-TYPE STACK-CELL (NOT ATOM) "a stack CONS")
  (WITHOUT-INTERRUPTS
    (LET ((PRIOR-CELL
	    (LOOP FOR PRIOR-CELL = LOCK THEN NEXT-CELL
		  AS NEXT-CELL = (CDR PRIOR-CELL)
		  DO (CL:ASSERT (OR (NOT (NULL NEXT-CELL)) *ZMAIL-RESET-DURING-WARM-BOOT*) ()
				"Not among readers in (UNLOCK-SINGLE-LOCK-FOR-READING ~S ~S)."
				LOCK STACK-CELL)
		  WHEN (EQ NEXT-CELL STACK-CELL)
		    RETURN PRIOR-CELL)))
      (WHEN PRIOR-CELL
	(SETF (CDR PRIOR-CELL) (CDR STACK-CELL)))))	3;Splice us out of the list of readers.
0  (SETF (CDR STACK-CELL) NIL))			3;Prevent a second call from suceeding.

;;; Lock for writing -- Convert a read lock into a write lock if we're the only reader.
0(DEFUN LOCK-SINGLE-LOCK-FOR-WRITING (LOCK &OPTIONAL (WHOSTATE "Write lock"))
  (DECLARE (VALUES . (LOCKED PREVIOUS-LOCK-VALUE)))
  (CL:CHECK-TYPE LOCK (CL:SATISFIES LOCATIVEP) "a locative")
  (CL:CHECK-TYPE WHOSTATE STRING)
  (LABELS ((LOCKABLE-P (LOCK CURRENT-PROCESS &OPTIONAL (CURRENT-VALUE NIL CVP))
	     (DECLARE (SYS:DOWNWARD-FUNCTION))
	     (LET ((CURRENT-VALUE (IF CVP CURRENT-VALUE (LOCATION-CONTENTS LOCK))))
	       (OR (NULL CURRENT-VALUE)
		   (AND (ZL:LISTP CURRENT-VALUE)
			(EQ (CAR CURRENT-VALUE) CURRENT-PROCESS)
			(NULL (CDR CURRENT-VALUE)))))))
    (LOOP DOING
      (WITHOUT-INTERRUPTS
	(LET ((CURRENT-VALUE (LOCATION-CONTENTS LOCK)))
	  (IF (EQ CURRENT-VALUE CURRENT-PROCESS)
	      (RETURN-FROM LOCK-SINGLE-LOCK-FOR-WRITING (VALUES NIL NIL))
	    (WHEN (LOCKABLE-P LOCK CURRENT-PROCESS CURRENT-VALUE)
	      (WHEN (STORE-CONDITIONAL LOCK CURRENT-VALUE CURRENT-PROCESS)
		(RETURN-FROM LOCK-SINGLE-LOCK-FOR-WRITING (VALUES T CURRENT-VALUE)))))))
      (PROCESS-WAIT WHOSTATE #'LOCKABLE-P LOCK CURRENT-PROCESS))))

3;;; Unlock for writing.
0(DEFUN UNLOCK-SINGLE-LOCK-FOR-WRITING (LOCK PREVIOUS-LOCK-VALUE)
  (CL:CHECK-TYPE LOCK (CL:SATISFIES LOCATIVEP) "a locative")
  (CL:ASSERT (OR (STORE-CONDITIONAL LOCK CURRENT-PROCESS PREVIOUS-LOCK-VALUE)
		 *ZMAIL-RESET-DURING-WARM-BOOT*)
	     ()
	     "Current process doesn't hold write lock in (UNLOCK-SINGLE-LOCK-FOR-WRITING ~S)."
	     LOCK))

3;;; Lock several locks for writing --
;;;    Converts read locks into write locks if we're the only reader.  Does not return
;;;    until we hold the write lock on all locks.
0(DEFUN LOCK-MULTIPLE-LOCKS-FOR-WRITING (LOCK-ARRAY LOCKED-ARRAY PREVIOUS-LOCK-VALUE-ARRAY
					&OPTIONAL (WHOSTATE "Multiple write locks"))
  (CL:CHECK-TYPE LOCK-ARRAY (CL:SATISFIES LOCATIVE-ARRAY-P) "an array of locatives")
  (CL:CHECK-TYPE LOCKED-ARRAY CL:ARRAY)
  (CL:CHECK-TYPE PREVIOUS-LOCK-VALUE-ARRAY CL:ARRAY)
  (CL:CHECK-TYPE WHOSTATE STRING)
  (LABELS ((LOCKABLE-P (LOCK CURRENT-PROCESS)
	     (LET ((CURRENT-VALUE (LOCATION-CONTENTS LOCK)))
	       (OR (NULL CURRENT-VALUE)
		   (EQ CURRENT-VALUE CURRENT-PROCESS)
		   (AND (ZL:LISTP CURRENT-VALUE)
			(EQ (CAR CURRENT-VALUE) CURRENT-PROCESS)
			(NULL (CDR CURRENT-VALUE))))))
	   (ALL-LOCKABLE-P (LOCK-ARRAY CURRENT-PROCESS)
	     (DECLARE (SYS:DOWNWARD-FUNCTION))
	     (LOOP FOR LOCK BEING THE ARRAY-ELEMENTS OF LOCK-ARRAY
		   ALWAYS (LOCKABLE-P LOCK CURRENT-PROCESS)))
	   (LOCK-ONE-LOCK (LOCK)
	     (LET ((CURRENT-VALUE (LOCATION-CONTENTS LOCK)))
	       (IF (EQ CURRENT-VALUE CURRENT-PROCESS)
		   (RETURN-FROM LOCK-ONE-LOCK (VALUES NIL NIL))
		 (IF (STORE-CONDITIONAL LOCK CURRENT-VALUE CURRENT-PROCESS)
		     (RETURN-FROM LOCK-ONE-LOCK (VALUES T CURRENT-VALUE))
		   (CL:ASSERT NIL ()
			      "~S changed state while WITHOUT-INTERRUPTS ~
			       in (LOCK-MULTIPLE-LOCKS-FOR-WRITING ~S ~S ~S)"
			      LOCK LOCK-ARRAY LOCKED-ARRAY PREVIOUS-LOCK-VALUE-ARRAY))))))
    (LOOP DOING
      (WITHOUT-INTERRUPTS
	(WHEN (ALL-LOCKABLE-P LOCK-ARRAY CURRENT-PROCESS)
	  (LOOP FOR I FROM 0 BELOW (ARRAY-LENGTH LOCK-ARRAY)
		DO (MULTIPLE-VALUE-BIND (LOCKED PREVIOUS-LOCK-VALUE)
		       (LOCK-ONE-LOCK (AREF LOCK-ARRAY I))
		     (SETF (AREF LOCKED-ARRAY I) LOCKED)
		     (SETF (AREF PREVIOUS-LOCK-VALUE-ARRAY I) PREVIOUS-LOCK-VALUE)))
	  (RETURN-FROM LOCK-MULTIPLE-LOCKS-FOR-WRITING (VALUES))))
      (PROCESS-WAIT WHOSTATE #'ALL-LOCKABLE-P LOCK-ARRAY CURRENT-PROCESS))))

3;;; Unlock several locks for writing.
0(DEFUN UNLOCK-MULTIPLE-LOCKS-FOR-WRITING (LOCK-ARRAY LOCKED-ARRAY PREVIOUS-LOCK-VALUE-ARRAY)
  (CL:CHECK-TYPE LOCK-ARRAY (CL:SATISFIES LOCATIVE-ARRAY-P) "an array of locatives")
  (CL:CHECK-TYPE LOCKED-ARRAY CL:ARRAY)
  (CL:CHECK-TYPE PREVIOUS-LOCK-VALUE-ARRAY CL:ARRAY)
  (LOOP FOR I FROM 0 BELOW (ARRAY-LENGTH LOCK-ARRAY)
	WHEN (AREF LOCKED-ARRAY I)
	  DO (UNLOCK-SINGLE-LOCK-FOR-WRITING (AREF LOCK-ARRAY I)
					     (AREF PREVIOUS-LOCK-VALUE-ARRAY I))
	     (SETF (AREF LOCKED-ARRAY I) NIL)))

(DEFUN LOCATIVE-ARRAY-P (ARRAY)
  (AND (ARRAYP ARRAY)
       (LOOP FOR ELEMENT BEING THE ARRAY-ELEMENTS OF ARRAY
	     ALWAYS (LOCATIVEP ELEMENT))))

3;;; Zmail sequence locking primitives.

;;; Lock a single sequence.
0(DEFUN LOCK-SEQUENCE-INTERNAL (SEQUENCE LOCK-TYPE CODE)
  (DECLARE (SYS:DOWNWARD-FUNARG CODE))
  (CL:ECASE LOCK-TYPE
    (:WRITE
      (LET ((LOCK (LOCF (SEQUENCE-LOCK SEQUENCE)))
	    (LOCKED NIL)
	    (PREVIOUS-LOCK-VALUE NIL))
	(UNWIND-PROTECT
	    (BLOCK UNDER-LOCK
	      (MULTIPLE-VALUE (LOCKED PREVIOUS-LOCK-VALUE)
		(LOCK-SINGLE-LOCK-FOR-WRITING LOCK "Collection write lock"))
	      (FUNCALL CODE))
	  (WHEN LOCKED
	    (UNLOCK-SINGLE-LOCK-FOR-WRITING LOCK PREVIOUS-LOCK-VALUE)))))
    (:READ
      (WITH-STACK-LIST* (STACK-CELL NIL NIL)
	(LET ((LOCK (LOCF (SEQUENCE-LOCK SEQUENCE)))
	      (LOCKED NIL))
	  (UNWIND-PROTECT
	      (BLOCK UNDER-LOCK
		(MULTIPLE-VALUE (LOCKED)
		  (LOCK-SINGLE-LOCK-FOR-READING LOCK STACK-CELL "Collection read lock"))
		(FUNCALL CODE))
	    (WHEN LOCKED
	      (UNLOCK-SINGLE-LOCK-FOR-READING LOCK STACK-CELL))))))))

3;;; Lock a buffer and its inboxes.
0(DEFUN LOCK-BUFFER-AND-INBOXES-INTERNAL (BUFFER LOCK-TYPE CODE)
  (DECLARE (SYS:DOWNWARD-FUNARG CODE))
  (CL:ECASE LOCK-TYPE
    (:WRITE
      (STACK-LET* ((BUFFER-COUNT
		     (1+ (LENGTH (FILE-MAIL-BUFFER-INBOXES-BEING-INSERTED BUFFER))))
		   (LOCK-ARRAY (MAKE-ARRAY BUFFER-COUNT))
		   (LOCKED-ARRAY (MAKE-ARRAY BUFFER-COUNT :INITIAL-VALUE NIL))
		   (PREVIOUS-LOCK-VALUE-ARRAY (MAKE-ARRAY BUFFER-COUNT
							  :INITIAL-VALUE NIL)))
	(SETF (AREF LOCK-ARRAY 0) (LOCF (SEQUENCE-LOCK BUFFER)))
	(LOOP FOR INBOX-BUFFER IN (FILE-MAIL-BUFFER-INBOXES-BEING-INSERTED BUFFER)
	      FOR I FROM 1
	      DO (SETF (AREF LOCK-ARRAY I) (LOCF (SEQUENCE-LOCK INBOX-BUFFER))))
	(UNWIND-PROTECT
	    (BLOCK UNDER-LOCK
	      (LOCK-MULTIPLE-LOCKS-FOR-WRITING LOCK-ARRAY LOCKED-ARRAY
					       PREVIOUS-LOCK-VALUE-ARRAY
					       "Buffer and inboxes locks")
	      (FUNCALL CODE))
	  (UNLOCK-MULTIPLE-LOCKS-FOR-WRITING LOCK-ARRAY LOCKED-ARRAY
					     PREVIOUS-LOCK-VALUE-ARRAY))))))
3;;; Lock an inbox and its parent buffer.
0(DEFUN LOCK-INBOX-AND-BUFFER-INTERNAL (INBOX LOCK-TYPE CODE)
  (DECLARE (SYS:DOWNWARD-FUNARG CODE))
  (CL:ECASE LOCK-TYPE
    (:WRITE
      (STACK-LET ((LOCK-ARRAY (MAKE-ARRAY 2))
		  (LOCKED-ARRAY (MAKE-ARRAY 2 :INITIAL-VALUE NIL))
		  (PREVIOUS-LOCK-VALUE-ARRAY (MAKE-ARRAY 2 :INITIAL-VALUE NIL)))
	(SETF (AREF LOCK-ARRAY 0) (LOCF (SEQUENCE-LOCK INBOX)))
	(SETF (AREF LOCK-ARRAY 1) (LOCF (SEQUENCE-LOCK (INBOX-BUFFER-PARENT-BUFFER INBOX))))
	(UNWIND-PROTECT
	    (BLOCK UNDER-LOCK
	      (LOCK-MULTIPLE-LOCKS-FOR-WRITING LOCK-ARRAY LOCKED-ARRAY
					       PREVIOUS-LOCK-VALUE-ARRAY
					       "Inbox and buffer locks")
	      (FUNCALL CODE))
	  (UNLOCK-MULTIPLE-LOCKS-FOR-WRITING LOCK-ARRAY LOCKED-ARRAY
					     PREVIOUS-LOCK-VALUE-ARRAY))))))

3;;; Unlock all sequences after a warm boot.
0(DEFUN RESET-ZMAIL-SEQUENCE-LOCKS ()
  (LABELS ((RESET-SEQUENCE-LOCKS ()
	     (DOLIST (SEQUENCE *SEQUENCE-LIST*)
	       (SETF (SEQUENCE-LOCK SEQUENCE) NIL)
	       (WHEN (TYPEP SEQUENCE 'FILE-MAIL-BUFFER)
		 (DOLIST (INBOX-BUFFER (FILE-MAIL-BUFFER-INBOXES-BEING-INSERTED SEQUENCE))
		   (SETF (SEQUENCE-LOCK INBOX-BUFFER) NIL))))))
    (FUNCALL-IN-ZMAIL-INSTANCE *ZMAIL-WINDOW* #'RESET-SEQUENCE-LOCKS)))
