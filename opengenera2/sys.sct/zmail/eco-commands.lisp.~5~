;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: ZWEI; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(define-zmail-top-level-command com-zmail-make-encoded-ECO-file
    "Encode a file (presumably a quasi-distribution-tape) and put the result in another file."
    (no-sequence-ok)
  (let* ((input (accept-defaulted-pathname "Encode file for ECO" (default-pathname)))
	 (output (accept-defaulted-pathname
		   "Pathname of result" (send input :new-type :encode) :direction :write)))
    (with-open-file (i input
		       :direction :input
		       :characters :default)
      (with-open-file (o output
			 :direction :output)
	(cli::encode-data-as-ascii i o))))
  dis-none)

(defvar *mail-ECO-encoded-file* nil)

(define-zmail-top-level-command com-zmail-mail-eco
    "Encode a file, if necessary, and put encoded ASCII into a message draft."
    (no-sequence-ok)
  (let ((eco-file (accept-defaulted-pathname "Get ECO material from file" (default-pathname))))
    (with-open-file (i eco-file
		     :direction :input
		     :characters :default)
      (condition-case ()
	   (cli::read-encoded-file-preamble i)
	 (error
	   (beep)
	   (format t "The file ~A has not been encoded~@
                ~2T for mail ECO transmission.  Please name a file for the encoded result."
	     eco-file)
	   (let ((output (accept-defaulted-pathname
			   "Pathname for encoded output" (send eco-file :new-type :encode)
			   :direction :write)))
	     (with-open-file (i eco-file
			      :direction :input
			      :characters :default)
	       (with-open-file (o output
				:direction :output)
		 (cli::encode-data-as-ascii i o)))
	     (setq eco-file output)))))
    (let ((*mail-eco-encoded-file* eco-file))
      (compose-from-template 'mail-eco-mail-template))))

(defvar *ECO-greeting* "        *** Software ECO Distribution ***
     by electronic mail, from Symbolics, Inc.

>> To restore this distribution, please use the Zmail command

        m-X Decode ECO

   It will save the decoded distribution in the file named in the 
   encoded body.  It will also offer to do Restore Distribution from
   this file. 
")

(defvar *ECO-delimiter*
	"  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
")

;; Mostly copied from Compatible Mail Template
(deftemplate mail-eco-mail-template
  (:type :compatible-mail)
  (:name "ECO mail")
  (:documentation "Mail an ECO with compatible special variable user options.")
  (:read-only)
  (:header-field :to (prompt-for-addresses "To:"))
  (:header-field :subject "Software ECO Distribution")
  (:text (string-append *eco-greeting* *eco-delimiter*
			(with-output-to-string (s)
			  (with-open-file (i *mail-eco-encoded-file*
					     :direction :input :characters :default)
			    (si:stream-copy-until-eof i s)))
			*eco-delimiter*))			  
  (:starting-point :reply)) 

(eval-when (compile load)
  (compiler:function-defined 'dis:open-input-distribution-tape-access-path)
  (compiler:function-defined 'dis:restore-distribution-from-tape))

(define-zmail-top-level-command com-zmail-decode-eco
    "Decode a message as a Software ECO Distribution, into the file named in the encoded body.
Offer to do Restore Distribution on this file."
    ()
  (flet ((bad-eco-barf (&optional error)
	   (barf "This message does not appear to be a valid Software ECO Distribution~@[:~@
                  ~2T~~A~~]." error)))
    (let ((encoded-start-bp (search (msg-start-bp *msg*) *eco-delimiter*))
	  (pathname nil)
	  (restore-dist nil))
      (unless encoded-start-bp
	(bad-eco-barf))
      (let ((encoded-end-bp (search encoded-start-bp *eco-delimiter*)))
	(unless encoded-end-bp
	  (bad-eco-barf "Could not find a pair of encoded-ECO delimiters"))
	(setq encoded-end-bp (search encoded-end-bp *eco-delimiter* t))	;back over it
	(condition-case (error)
	     (progn
	       (setq pathname (with-interval-stream (s encoded-start-bp encoded-end-bp t)
				(cli::read-encoded-file-preamble s)))
	       (format query-io "~&The decoded ECO will be stored in ~A." pathname)
	       (setq restore-dist
		     (yes-or-no-p "Should I do a :Restore Distribution from that file, too? "))
	       (setq pathname
		     (with-interval-stream (s encoded-start-bp encoded-end-bp t)
		       (cli::decode-data-from-ascii s))))
	   (cli::ascii-decoding-data-error (bad-eco-barf error)))
	(format t "~&Decoded ECO stored in ~A." pathname)
	(if restore-dist
	    (progn (format t "~&Restoring distribution from ~A." pathname)
		   ;;--- This awful kludge [let - flet - letf] is made necessary by
		   ;;--- insufficient smarts in the released version of
		   ;;--- dis:open-input-distribution-tape-access-path.  Be sure to change
		   ;;--- it to do this dwimification in the next release. -- Dodds 5/02/88
		   (let ((old-open-input-distribution-tape-access-path
			   #'dis:open-input-distribution-tape-access-path))
		     (flet ((new-open-input-distribution-tape-access-path (&optional
									    use-disk path)
			      (when (and (null path) (typep use-disk 'fs:pathname))
				(setq path use-disk
				      use-disk t))
			      (funcall old-open-input-distribution-tape-access-path
				       use-disk path)))
		       (letf ((#'dis:open-input-distribution-tape-access-path
			       #'new-open-input-distribution-tape-access-path))
			 (dis:restore-distribution-from-tape :use-disk pathname))))
		   (format t "~&Distribution restored.  Do :Load Patches to ~
                              install the ECO in the running world."))
	  (format t "~&Don't forget to :Restore Distribution :Use Disk Yes,~@
                     ~2Tusing the file ~A,~@
                     ~2Tthen :Load Patches to install the ECO in the running world."
	    pathname)))))
  dis-none)
