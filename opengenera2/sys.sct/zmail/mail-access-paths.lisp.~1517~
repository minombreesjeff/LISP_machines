D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: Lisp; Base: 10; Package: Mailer; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;; This is the basic generic mailing code.
;;; It provides minimal mail services even when you are not running the full mailer.

;;; Macro used when invoking mail service on any host.
0(defmacro (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")with-mailer0 ((mailer mailer-access-path &rest mailer-access-path-args
						  &key (cache-unavailability t)
						       timeout)
		       &body body)
  (si:with-rem-keywords (real-mailer-access-path-args mailer-access-path-args
						      '(:cache-unavailability))
    `(with-stack-list (mailer-access-path-args ,@(copylist real-mailer-access-path-args))
       (invoke-mailer (lambda (,mailer)
			,@body)
		      ,mailer-access-path
		      mailer-access-path-args
		      ,cache-unavailability
		      ,timeout))))

1;;; Macro to use when invoking mail service on the local host.
0(defmacro2 with-local-mailer0 ((mailer &rest mailer-access-path-args) &body body)
  `(fs:with-automatic-login-to-sys-host
     (fs:force-user-to-login)
     (with-mailer (,mailer (find-local-mail-service) :cache-unavailability nil
						     :timeout nil
						     ,@mailer-access-path-args)
       ,@body)))

1;;; Compatibility stub ...
0(defmacro2 with-mailer-with-cached-unavailability0 ((mailer timeout mailer-access-path
							  &rest mailer-access-path-args)
						  &body body)
  `(with-mailer (,mailer ,mailer-access-path ,@mailer-access-path-args :timeout ,timeout)
     ,@body))


1;;; Login ID to be used when receiving mail for the local host.
0(cl:defparameter 2*local-mailer-user-id*0 "MAIL-DELIVERY")

1;;; Incoming mailer connections may not go idle for more than five minutes.
0(cl:defparameter 2*network-reception-timeout*0 (* 5 60 60)
  "Maximum time to wait for a new mailer command from the foreign host.")

1;;; Each outgoing mailer transaction must be completed within five minutes.
0(cl:defparameter 2*network-delivery-timeout*0 (* 5 60 60)
  "Maximum time to wait for a response from the foreign host to any mailer command.")


1;;; Invoke a mailer with appropriate timeouts and 2unwind-protect1ion.
0(defun 2invoke-mailer0 (function mailer-access-path mailer-access-path-args
			       cache-unavailability timeout)
  (declare (sys:downward-funarg function))
  (let ((mailer))
    (unwind-protect-case (aborted)
	(progn
	  (with-stream-timeout (nil :connect timeout
				    'mailer-connection-timeout :timeout timeout
							       :access-path mailer-access-path)
	    (setf mailer (if (and cache-unavailability timeout)
			     (neti:invoke-service-access-path-with-cached-unavailability
			       mailer-access-path timeout mailer-access-path-args)
			     (net:invoke-service-access-path mailer-access-path
							     mailer-access-path-args))))
	  (su:with-access-path-logging (mailer)
	    (unwind-protect
		(multiple-value-prog1
		  (funcall function mailer)
		  (setf aborted nil))
	      (when mailer
		(send mailer :close aborted)))))
      (:always
	(when mailer
	  (send mailer :close :abort))))))

1;;; This function decides what local service to really use.
0(defun2 find-local-mail-service0 ()
  (or (find-local-service :store-and-forward-mail)
      (let ((advertised-services (send *local-host* :get :service)))
	(when (null (assq :store-and-forward-mail advertised-services))
	  (find-local-service :mail-to-user)))
      (ferror "No usable local mail service provided.")))

(defun2 find-local-service0 (service)
  (let ((path (condition-case ()
		   (neti:find-path-to-service-on-host service *local-host*)
		 (host-does-not-support-service nil))))
    (when (and path
	       (eq (first (first (neti:medium-implementation-path
				   (neti:medium-description-implementation
				     (neti:service-access-path-medium path)))))
		   :local))
      path)))


1;;; Errors

0(defflavor 2mailer-error
0	()
	(sys:network-error)
  :abstract-flavor)

(defflavor 2mailer-temporary-error
0	()
	(mailer-error)
  :abstract-flavor)

(defflavor2 mailer-permanent-error
0	()
	(mailer-error)
  :abstract-flavor)

(defflavor 2mailer-protocol-error
0	()
	(mailer-permanent-error)
  :abstract-flavor)

(defflavor 2mailer-timeout
0	(stream
	 direction
	 timeout)
	(mailer-temporary-error no-action-mixin)
  :abstract-flavor
  :initable-instance-variables)

(defflavor 2mailer-connection-timeout
0	(access-path)
	(mailer-timeout)
  :initable-instance-variables)

(defmethod 2(dbg:report mailer-connection-timeout)0 (report-stream)
  (format report-stream "Timed out~@[ after ~A~] while trying to connect to ~A."
	  (and timeout (time:seconds-to-interval-string (floor timeout 60)))
	  (neti:service-access-path-host access-path)))

(compile-flavor-methods mailer-connection-timeout)

(defflavor2 mailer-unknown-recipient
0	(recipient)
	(mailer-permanent-error)
  :initable-instance-variables)

(defmethod2 (:report mailer-unknown-recipient)0 (stream)
  (format stream "Recipient ~A is not defined on this host."
	  (zwei:string-from-header recipient :host)))

(compile-flavor-methods mailer-unknown-recipient)

(defflavor 2mailer-no-recipients
0	(tried-to-verify-recipients)
	(mailer-protocol-error)
  :initable-instance-variables
  (:required-init-keywords :tried-to-verify-recipients))

(defmethod 2(dbg:report mailer-no-recipients)0 (stream)
  (format stream "No ~:[~;valid ~]recipients for this message." tried-to-verify-recipients))

(compile-flavor-methods mailer-no-recipients)

(defstruct (2recipient-and-status0 (:conc-name ras-))
  (recipient nil)
  (status :not-attempted))			1; (3 0 (NIL 0) (NIL :BOLD-ITALIC NIL) "CPTFONTBI"):not-attempted1, 3:completed-OK1, or an error object

0(defflavor 2mailer-incomplete-delivery-error
0	(recipient-and-status-list)
	(mailer-error)
  :initable-instance-variables
  :gettable-instance-variables)

(defmethod (:report 2mailer-incomplete-delivery-error0) (stream)
  (loop for ras in recipient-and-status-list
	for ras-status = (ras-status ras)
	unless (eq ras-status :completed-OK)
	  do (format stream "~&Error delivering message to recipient ~A:~%    ~~A~"
		     (ras-recipient ras) ras-status)))

(compile-flavor-methods 2mailer-incomplete-delivery-error0) 


1;;; Mail Access Paths

0(defflavor 2mail-access-path
0	((count-of-recipients 0)		1;# of recipients we tried to verify.
0	 (count-of-verified-recipients 0)	1;# of recipients that we did verify.
0	 (return-path nil)
	 (timeout nil))				1;No single operation should take longer
0	(su:access-path-log-mixin)
  :abstract-flavor
1  ;; Minimum set of messages that must be sent (in this order)0 1to deliver a message.
0  (:required-methods :start-message :verify-recipient :receive-message :finish-message :close)
  (:initable-instance-variables timeout)
  (:gettable-instance-variables count-of-recipients count-of-verified-recipients))

(defmethod2 (:reset mail-access-path :default)0 () (send self :close :abort))

(defmethod2 (:start-message mail-access-path :before)0 (&optional sender)
  (cl:setf count-of-recipients 0
	   count-of-verified-recipients 0
	   return-path sender))

(defwhopper2 (:verify-recipient mail-access-path)0 (recipient)
  (incf count-of-recipients)
  (when (stringp recipient)
    (setf recipient (zwei:parse-one-address recipient)))
  (continue-whopper recipient)
  (incf count-of-verified-recipients))

1;;; If the address can't be parsed, just return it.
0(defwhopper2 (:expand-recipient mail-access-path)0 (recipient &optional collect-errors)
  (when (stringp recipient)
    (setq recipient (condition-case-if collect-errors (.error.)
			 (zwei:parse-one-address recipient)
		       (zwei:parse-error .error.))))
  (if (typep recipient 'error)
      (ncons recipient)
      (continue-whopper recipient collect-errors)))

(defmethod2 (:expand-recipient mail-access-path)0 (recipient &optional collect-errors)
  (ignore collect-errors)
  (ncons recipient))

(defmethod 2(:need-return-path mail-access-path)0 () nil)

(defwhopper2 (:receive-message mail-access-path)0 (trace-line stream &optional body-stream)
  (cond ((zerop count-of-recipients)
	 (error 'mailer-no-recipients :tried-to-verify-recipients nil))
	((zerop count-of-verified-recipients)
	 1;; Can't signal 2mailer-no-recipients1 here because it would probably cause
	 ;; an abnormal termination of the transaction which could leave the remote
	 ;; mailer hanging if it strictly obeys certain protocols.
0	 (copy-message-streams stream body-stream #'si:null-stream))
	(t
	 (continue-whopper trace-line stream body-stream))))

(defmethod2 (:finish-message mail-access-path)0 ())

(defun2 copy-message-streams0 (header-stream body-stream output-stream)
  (stream-copy-until-eof header-stream output-stream)
  (when body-stream
    (stream-copy-until-eof body-stream output-stream)))

1;;; Compute how long a foreign host will take to receive and process a message --
;;;    This function is used by 2:receive-message1 messages to compute two timeouts based
;;;    on the overall timeout being used for a connection -- (1) The transmission timeout
;;;    estimates how long it will take to actually transmit the possibly lengthy message
;;;    text to the foreign host.  (2) The processing timeout estimates how long it will
;;;    take the foreign host to actually process the message once it has been transmitted
;;;    and return its reply on the success/failure of said processing to us.
0(defun2 compute-receive-message-timeout0 (timeout connection-stream source-stream body-stream
								  verified-recipient-count)
  (declare (values transmission-timeout processing-timeout))
  (if timeout
      (values
	1;; Transmission time should also be dependent on the nature of our connection to the
	;; foreign host.  However, as we don't yet have the appropriate mechanisms to do so,
	;; we'll just allow 1/60th second for each character which gives us enough time to
	;; retransmit each "segment" of the message once at 1200 baud.
0	(flet ((stream-transmission-time (data-stream)
		 (if (and data-stream
			  (operation-handled-p data-stream :length))
		     (- (send data-stream :length)
			(or (send-if-handles data-stream :read-position) 0))
		     0)))
	  (+ timeout
	     (stream-transmission-time source-stream)
	     (stream-transmission-time body-stream)))
	1;; Some hosts (e.g., certain Unix machines at Symbolics) may take an appreciable
	;; amount of time to actually deliver the message to each recipient once the message
	;; body has been transmitted.  Therefore, how long the Mailer must wait for a
	;; response after the body is transmitted should depend on the number of recipients
	;; involved.
0	(let* ((foreign-host (send connection-stream :foreign-host))
	       (per-recipient-time
		 (or (send foreign-host :get 'recipient-processing-time)
		     (get (send foreign-host :system-type) 'recipient-processing-time)
		     60)))			1;One second per recipient global default.
0	  (+ timeout
	     (* per-recipient-time (or verified-recipient-count 1)))))
      (values nil nil)))

1;;; Define the nominal recipient processing time for the specified host --
;;;    This form should be used in the Mailer's 0Options.lisp1 file as needed.
0(defun 2define-host-recipient-processing-time0 (host processing-time)
  (let ((host (net:parse-host host))
	(processing-time (time:parse-interval-or-never processing-time)))
    (if processing-time
	(send host :putprop (* processing-time 60) 'recipient-processing-time)
	(send host :remprop 'recipient-processing-time))))



1;;; Tries real hard to return an Internet-style name for this host.
0(defmethod2 (:mail-name host)0 ()
  (let ((primary-name (send self :primary-name)))
    (or 
1      ;; Case 1: If the host has an Internet Domain Name, use it.
0      (send self :get :internet-domain-name)
      (unless (stringp primary-name)
	(or 
1	  ;; Case 2: If the host "belongs" in a namespace with an Internet Domain Name,
	  ;;         and that namespace is not the DIAL namespace (which is known to
	  ;;         have a bogus Internet Domain Name) then make a name from the
	  ;;         primary name and the Internet Domain Name of said namespace.
0	  (let ((primary-name-namespace (send primary-name :namespace)))
	    (when (not (neti:ns-eq primary-name-namespace dial:*dialnet-namespace*))
	      (let ((namespace-domain-name (send primary-name-namespace :internet-domain-name)))
		(when namespace-domain-name
		  (format nil "~A.~A" (send primary-name :string) namespace-domain-name)))))
1	  ;; Case 3: If the host is in the DOMAIN namespace, use the name known by
	  ;;	     the domain system.
0	  (when (eq (send primary-name :namespace) neti:*domain-namespace*)
	    (send primary-name :string))))
1      ;; Case 4: Use an emergency "address-style" name of [n.n.n.n], where the 4 octets
      ;;         of "n"s are an Internet address.
0      (loop for (network address) in (send self :address)
	    when (eq (send network :type) :internet)
	      do (return (format nil "[~A]" address))
	    finally (return nil))
1      ;; Case 5: Give up and just use the primary name.
0      (if (stringp primary-name)
	  primary-name
	  (send primary-name :string)))))

1;;; Is an address equivalent on these two hosts?

0(defun2 all-mail-addresses-forward-between-hosts-p0 (host-1 host-2)
  (let ((site-1 (send host-1 :site)))
    (and site-1
	 (neti:ns-eq site-1 (send host-2 :site))
	 (neti:all-mail-addresses-forward-at-site site-1))))

(defun2 find-namespace-from-domain0 (name)
  (let ((neti:*inhibit-validity-checking* t))
    (or (find-object-from-property-list :namespace :internet-domain-name name)
	(find-object-named :namespace (neti:intern-global-name (string-append name)) nil))))


1;;; Return the first hop for an address without trying to convert it into a host object.
0(defun 2address-first-hop-raw0 (address)
  (declare (values host host-string route path))
  (labels ((pick-apart-host (host)
	     (cl:case (first host)
	       (:object
		 (values (second host) nil nil nil))
	       (:single
		 (values nil (second host) nil nil))
	       (:path
		 (let ((first-hop (first (last host))))
		   (if (stringp first-hop)
		       (values nil first-hop nil host)
		       (multiple-value-bind (true-host true-host-string)
			   (pick-apart-host first-hop)
			 (values true-host true-host-string nil host)))))
	       (:domain
		 (values nil (format nil "~{~A~@{.~A~}~}" (cl:rest host)) nil nil))
	       (otherwise
		 (values nil nil nil nil)))))
    (multiple-value-bind (type value)
	(cl:get-properties address '(:route :user :host))
      (cl:case type
	(:route
	  (multiple-value-bind (host host-string)
	      (pick-apart-host (first value))
	    (values host host-string value nil)))
	(:user
	  1;; User objects are only generated by the local mail access paths.
0	  (values *local-host* nil nil nil))
	(:host
	  (pick-apart-host value))
	(otherwise
	  (values nil nil nil nil))))))

1;;; Finds the true first hop for an address if possible.
0(defun 2address-first-hop0 (address 1&optional0 locally)
  (declare (values host host-string route path))
  (multiple-value-bind (host host-string route path)
      (address-first-hop-raw address)
    (if host
	(values host nil route path)
	(multiple-value-bind (hosts valid)
	    (neti:find-domain-mail-hosts host-string locally)
	  (if valid
	      (values (first hosts) nil route path)
	      (values nil host-string route path))))))
