;;; Lisp Machine mail reader -*- Base: 8; Mode: LISP; Package:ZWEI -*- 
;;; These are the frames used by filtering and their commands
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


;;; Universe definition user-interface.
(DEFFLAVOR BASIC-UNIVERSE-DEFINITION-FRAME
	(*EDITOR-WINDOW*
	 *EDITOR-INTERVAL*
	 *EDITOR-STREAM*
	 *EDITOR-INSERT-BP*)
	()
  (:REQUIRED-FLAVORS ZMAIL-FRAME-MIXIN)
  :SPECIAL-INSTANCE-VARIABLES
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :COMMAND-LOOP :INITIALIZE :SET-UNIVERSE))

(GLOBALLY-DECLARE-FLAVOR-INSTANCE-VARIABLES BASIC-UNIVERSE-DEFINITION-FRAME)

(DEFFLAVOR UNIVERSE-DEFINITION-FRAME
       ((*MAJOR-MODE* (MODE-OF-FLAVOR 'LISP-MODE))
	(*MODE-LINE-LIST* '("Zmail " "Universe"))
	(*COMTAB* *STANDALONE-COMTAB*)
	)
       (TOP-LEVEL-EDITOR BASIC-UNIVERSE-DEFINITION-FRAME
	ZMAIL-FRAME-MIXIN ZMAIL-COMMAND-LOOP-MIXIN
	TV:STREAM-MIXIN TV:BORDERS-MIXIN
	TV:PANE-MIXIN TV:ITEM-LIST-PANE-KLUDGE TV:FRAME-WITH-XOR-BUTTONS
	TV:SELECT-MIXIN TV:CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER TV:MINIMUM-WINDOW)
  :SPECIAL-INSTANCE-VARIABLES
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :COMMAND-LOOP :INITIALIZE :SET-UNIVERSE))

(DEFMETHOD (:INIT UNIVERSE-DEFINITION-FRAME :BEFORE) (IGNORE)
  (SETQ TV:PANES `((UNION-BUTTON TV:BUTTON-PANE :NAME "Union"
				 :DOCUMENTATION "Set union of several universes.")
		   (INTERSECTION-BUTTON TV:BUTTON-PANE :NAME "Intersection"
						       :DOCUMENTATION
						    "Set intersection of several universes.")
		   (NOT-BUTTON TV:BUTTON-PANE :NAME "Not"
					      :DOCUMENTATION
					      "Set of all messages not in a universe.")
		   (CLOSE-BUTTON TV:BUTTON-PANE :NAME "Close"
					        :DOCUMENTATION
						"Move to next higher Union or Intersection.")
		   (BUFFER-MENU ZMAIL-COMMAND-MENU-PANE
				   :ITEM-LIST NIL :LABEL "Buffers:")
		   (COLLECTION-MENU ZMAIL-COMMAND-MENU-PANE
				    :ITEM-LIST NIL :LABEL "Collections:")
		   (UNIVERSE-MENU ZMAIL-COMMAND-MENU-PANE
				  :ITEM-LIST NIL :LABEL "Universes:")
		   (NAME-BUTTON TV:BIG-BUTTON-PANE :NAME "Name" :BORDERS 3
				:DOCUMENTATION 
"L,M: Specify a new name for this universe.  R: Menu of existing universes to edit.")
		   (EDITOR-WINDOW ZMAIL-WINDOW :INTERVAL-NAME "Universe Definition"
					       :BORDERS (2 2 2 1) :SAVE-BITS NIL
					       :CHARACTER-HEIGHT 10.
					       :BLINKER-DESELECTED-VISIBILITY :OFF)
		   (MODE-LINE-WINDOW MODE-LINE-PANE :NUMBER-OF-MINI-BUFFER-LINES 2
						    :MORE-P NIL :BORDERS (2 1 2 2)
						    :BLINKER-DESELECTED-VISIBILITY :OFF)
		   (DONE-BUTTON TV:BUTTON-PANE :NAME "Done"
				:DOCUMENTATION "Use this universe definition.")
		   (ABORT-BUTTON TV:BUTTON-PANE :NAME "Abort"
				 :DOCUMENTATION "Abort this command."))
	TV:CONSTRAINTS
	      `((ONLY . ( (WHOLE-THING)
			  ((WHOLE-THING :HORIZONTAL (:EVEN)
			    (WHOLE)
			    ((WHOLE TV:WHITE-INCLUDE-WHITESPACE	;Vert
			      (0.95) (:EVEN)
			      (OPERATIONS MENUS NAME EDITOR CONTROLS)
			      ((OPERATIONS TV:FLOATING-BUTTONS
				(UNION-BUTTON INTERSECTION-BUTTON NOT-BUTTON CLOSE-BUTTON)))
			      ((NAME TV:SINGLE-PANE-IN-WHITESPACE NAME-BUTTON))
			      ((CONTROLS TV:FLOATING-BUTTONS
				(DONE-BUTTON ABORT-BUTTON)))
			      ((EDITOR TV:WHITE-INCLUDE-WHITESPACE	;Horiz
				(:ASK-WINDOW SELF :EDITOR-SIZE) (:EVEN)
				(EDITORS)
				((EDITORS :VERTICAL (0.8)
				  (EDITOR-WINDOW MODE-LINE-WINDOW)
				  ((MODE-LINE-WINDOW :ASK :PANE-SIZE))
				  ((EDITOR-WINDOW :EVEN))))))
			      ;; This comes last since it can afford a scroll bar
			      ((MENUS TV:FLOATING-MENUS
				(:ASK-WINDOW SELF :MENUS-SIZE)
				(BUFFER-MENU COLLECTION-MENU UNIVERSE-MENU))))))))))))

(DEFMETHOD (:MENUS-SIZE UNIVERSE-DEFINITION-FRAME) (&REST ARGS)
  (MAX (LEXPR-SEND SELF ':SEND-PANE 'BUFFER-MENU ':PANE-SIZE ARGS)
       (LEXPR-SEND SELF ':SEND-PANE 'COLLECTION-MENU ':PANE-SIZE ARGS)
       (LEXPR-SEND SELF ':SEND-PANE 'UNIVERSE-MENU ':PANE-SIZE ARGS)))

(DEFMETHOD (:EDITOR-SIZE UNIVERSE-DEFINITION-FRAME) (&REST IGNORE)
  (+ (SEND (SEND SELF ':GET-PANE 'MODE-LINE-WINDOW) ':HEIGHT)
     (LET ((EDITOR-WINDOW (SEND SELF ':GET-PANE 'EDITOR-WINDOW)))
       (+ (SEND EDITOR-WINDOW ':TOP-MARGIN-SIZE)
	  (SEND EDITOR-WINDOW ':BOTTOM-MARGIN-SIZE)
	  (* 10. (SEND EDITOR-WINDOW ':LINE-HEIGHT))))))

(DEFMETHOD (:NOTIFICATION-CELL UNIVERSE-DEFINITION-FRAME) ()
  (SEND (SEND SELF :ALIAS-FOR-SELECTED-WINDOWS) :NOTIFICATION-CELL))

(DEFMETHOD (:NOTIFICATION-MODE UNIVERSE-DEFINITION-FRAME) ()
  (SEND (SEND SELF :ALIAS-FOR-SELECTED-WINDOWS) :NOTIFICATION-MODE))

(DEFMETHOD (:SET-UNIVERSE UNIVERSE-DEFINITION-FRAME) (OLD-UNIVERSE-NAME)
  (DELETE-INTERVAL *INTERVAL*)
  (INSERT-FORM-INTO-EDITOR-WINDOW (GET-UNIVERSE-DEFINITION OLD-UNIVERSE-NAME))
  (SEND SELF ':SET-PANES-NAME 'NAME-BUTTON (STRING OLD-UNIVERSE-NAME)))

(DEFMETHOD (:INIT BASIC-UNIVERSE-DEFINITION-FRAME :AFTER) (IGNORE)
  (MULTIPLE-VALUE (*EDITOR-WINDOW* *EDITOR-INTERVAL*)
    (CREATE-ZMAIL-WINDOW 'EDITOR-WINDOW))
  (SETQ *WINDOW* *EDITOR-WINDOW*)
  (SETQ *WINDOW-LIST* (NCONS *WINDOW*))
  (SETQ *EDITOR-STREAM* (OPEN-INTERVAL-STREAM *EDITOR-INTERVAL*))
  (SETQ *EDITOR-INSERT-BP* (COPY-BP (POINT) ':MOVES)))

(DEFMETHOD (:INITIALIZE UNIVERSE-DEFINITION-FRAME) (&AUX NEW-NAME CHANGED-P)
  (SETQ NEW-NAME (GENERATE-UNIQUE-NAME *UNIVERSE-LIST*))
  (MULTIPLE-VALUE-BIND (BUFFERS-ALIST COLLECTIONS-ALIST UNLOADED-FILES-ALIST)
      (GET-SEQUENCE-ALISTS T)
    (SETQ CHANGED-P (SEND SELF :SET-PANES-ITEM-LIST 'BUFFER-MENU
			  `(,@(SORTCAR `(,@(TV:MAKE-MENU-ITEM-LIST BUFFERS-ALIST
								   "Include this mail file.")
					 ,@(TV:MAKE-MENU-ITEM-LIST UNLOADED-FILES-ALIST
								   "Include this mail file."))
				       #'STRING-LESSP)
			    ("Default buffer" :VALUE DEFAULT
						:STYLE (:SWISS :BOLD-ITALIC :NORMAL)
						:DOCUMENTATION "The default buffer."))))
    (SETQ CHANGED-P (OR (SEND SELF :SET-PANES-ITEM-LIST 'COLLECTION-MENU
			      (TV:MAKE-MENU-ITEM-LIST COLLECTIONS-ALIST
						      "Include this collection."))
			CHANGED-P))
    (SETQ CHANGED-P (OR (SEND SELF :SET-PANES-ITEM-LIST 'UNIVERSE-MENU
			      `(,@(TV:MAKE-MENU-ITEM-LIST *UNIVERSE-LIST*
							      "Include this universe.")
				("Current sequence" :VALUE CURRENT
						     :STYLE (:SWISS :BOLD-ITALIC :NORMAL)
						     :DOCUMENTATION "The current sequence.")
				("Loaded files" :VALUE LOADED
						 :STYLE (:SWISS :BOLD-ITALIC :NORMAL)
						 :DOCUMENTATION "All mail files loaded.")))
			CHANGED-P))
    (WHEN CHANGED-P (SEND SELF :SET-CONFIGURATION 'ONLY)))
  (SEND SELF :TURN-OFF-ACCENTS)
  (SEND SELF :SET-PANES-NAME 'NAME-BUTTON NEW-NAME)
  (DELETE-INTERVAL *EDITOR-INTERVAL*)
  (TURN-ON-MODE *MAJOR-MODE*)
  (INSERT-FORM-INTO-EDITOR-WINDOW
    `(DEFINE-UNIVERSE ,(INTERN NEW-NAME) ()) -1)
  (MUST-REDISPLAY *EDITOR-WINDOW* DIS-ALL)
  (TYPEIN-LINE ""))

(DEFMETHOD (:GET-UNIVERSE UNIVERSE-DEFINITION-FRAME) (&OPTIONAL (NEAR-MODE '(:MOUSE))
								OLD-UNIVERSE-NAME)
  (WHEN OLD-UNIVERSE-NAME
    (LET ((FORM (GET-UNIVERSE-DEFINITION OLD-UNIVERSE-NAME)))
      (DELETE-INTERVAL *INTERVAL*)
      (INSERT-FORM-INTO-EDITOR-WINDOW FORM)
      (SEND SELF ':SET-PANES-NAME 'NAME-BUTTON (STRING OLD-UNIVERSE-NAME))))
  ;; Some domain specific knowledge here
  (WHEN (EQ (CAR NEAR-MODE) ':WINDOW)
    (LET ((MIN-BOTTOM (+ (TV:SHEET-INSIDE-TOP TV:SUPERIOR) TV:HEIGHT))
	  (BROTHER (CADR NEAR-MODE)))
      (AND (< (SEND BROTHER ':Y-OFFSET) MIN-BOTTOM)	;If we won't fit on top
	   ( MIN-BOTTOM (- (TV:SHEET-INSIDE-BOTTOM TV:SUPERIOR)	;and moving will help
			    (SEND BROTHER ':HEIGHT)))
	   (SEND BROTHER ':SET-POSITION (SEND BROTHER ':X-OFFSET) MIN-BOTTOM))))
  (TV:EXPOSE-WINDOW-NEAR SELF NEAR-MODE)
  (SEND SELF :SELECT NIL)
  (SEND SELF ':COMMAND-LOOP))

(DEFMETHOD (:TOP-LEVEL-TAG UNIVERSE-DEFINITION-FRAME) ()
  'EXIT-UNIVERSE-DEFINITION)

(DEFMETHOD (:PROCESS-SPECIAL-COMMAND UNIVERSE-DEFINITION-FRAME) (&REST ARGS)
  (APPLY #'ZMAIL-UNIVERSE-COMMAND-LIST ARGS))

(DEFSELECT (ZMAIL-UNIVERSE-COMMAND-LIST ZMAIL-COMMAND-LIST-DEFAULT)
  (:MENU (ITEM IGNORE WINDOW &AUX WINDOW-NAME)
   (SETQ WINDOW-NAME (SEND (SEND WINDOW ':SUPERIOR) ':PANE-NAME WINDOW))
   (SETQ ITEM (SEND WINDOW ':EXECUTE-NO-SIDE-EFFECTS ITEM))
   (COND ((EQ WINDOW-NAME 'UNIVERSE-MENU)
	  (UNLESS (MEMQ ITEM '(LOADED CURRENT))
	    (SETQ ITEM `(,ITEM))))
	 ((TYPEP ITEM 'SEQUENCE)
	  (SETQ ITEM (IF (SEQUENCE-BUFFER-P ITEM)
			 (SEND (SEND ITEM :PATHNAME) :STRING-FOR-READABLE-PRINTING)
		       (SEND ITEM :NAME))))
	 ((TYPEP ITEM 'FS:PATHNAME) (SETQ ITEM (SEND ITEM :STRING-FOR-READABLE-PRINTING))))
   (INSERT-FORM-INTO-EDITOR-WINDOW ITEM))
  (:MOUSE-BUTTON (CH WINDOW IGNORE IGNORE &AUX WINDOW-NAME)
   (COND
     ((NOT (OPERATION-HANDLED-P WINDOW :SET-ACCENT))
      (SEND WINDOW :BEEP)
      (WHEN (OR (EQ WINDOW *TYPEIN-WINDOW*) (EQ WINDOW *MODE-LINE-WINDOW*))
	(SEND *UNIVERSE-WINDOW* :SELECT NIL)))
     (T
      (UNLESS (NULL (SETQ WINDOW-NAME (SEND (SEND WINDOW ':SUPERIOR) ':PANE-NAME WINDOW)))
	(UNWIND-PROTECT
	    (SELECTQ WINDOW-NAME
	      (ABORT-BUTTON
	       (*THROW 'EXIT-UNIVERSE-DEFINITION NIL))
	      (DONE-BUTTON
	       (LET ((FORM (READ-FROM-EDITOR-WINDOW)))
		 (IF (AND FORM (NEQ FORM '*EOF*))
		     (LET ((UNIVERSE
			     (CONDITION-CASE (ERR)
				 (EVAL FORM)
			       (ERROR (BEEP)
				      (TYPEIN-LINE
					(FORMAT NIL "Bad universe definition: ~~A~" ERR))
				      NIL))))
		       (WHEN UNIVERSE (*THROW 'EXIT-UNIVERSE-DEFINITION UNIVERSE)))
		   (BEEP)
		   (TYPEIN-LINE "Read error transcribing editor window."))))
	      (NAME-BUTTON
	       (READ-NEW-NAME WINDOW CH *UNIVERSE-LIST* #'GET-UNIVERSE-DEFINITION "universe"))
	      (CLOSE-BUTTON
	       (EDITOR-WINDOW-CLOSE-BUTTON))
	      (OTHERWISE
	       (INSERT-FORM-INTO-EDITOR-WINDOW `(,(SELECTQ WINDOW-NAME
						    (NOT-BUTTON ')
						    (UNION-BUTTON ')
						    (INTERSECTION-BUTTON ')))
					       -1)))
	  (SEND WINDOW ':SET-ACCENT NIL))))))
  )

;;; Cosmogony
(DEFUN DEFINE-NEW-UNIVERSE (&OPTIONAL OLD-UNIVERSE-NAME
			    &AUX (OLD-CONFIGURATION *WINDOW-CONFIGURATION*))
  (PKG-BIND "ZWEI"
    (UNWIND-PROTECT
	(PROGN
	  (SEND *ZMAIL-WINDOW* :SET-WINDOW-CONFIGURATION :UNIVERSE)
	  (WHEN OLD-UNIVERSE-NAME
	    (SEND *UNIVERSE-WINDOW* ':SET-UNIVERSE OLD-UNIVERSE-NAME))
	  (SEND *UNIVERSE-WINDOW* :SELECT NIL)
	  (SEND *UNIVERSE-WINDOW* ':COMMAND-LOOP))
      (SEND *ZMAIL-WINDOW* ':SET-WINDOW-CONFIGURATION OLD-CONFIGURATION))))

(DEFPROP DEFINE-UNIVERSE "Universe" SI:DEFINITION-TYPE-NAME)



;;; Universe flavors.  A Universe is a generalization of a mail sequence.
;;; The basic protocol is that a universe takes a :MAP-OVER-UNIVERSE message, which
;;; tests each message with a filter-function and filter-arg, and if that returns true,
;;; calls a processing-function on the message and a processing-arg.
;;; In addition, messages can be looked up by reference with the :GET-MSGS-FROM-REFERENCE
;;; message.

;;; The basic defaults....  

(DEFMETHOD (:CERTIFY-FOR-SELECTION SEQUENCE :BEFORE) ()
  (SEND SELF ':EXPUNGE-IF-NEEDED))

(DEFMETHOD (:CERTIFY-FOR-SELECTION SEQUENCE) ()
  NIL)

(DEFMETHOD (:PREPARE-UNIVERSE SEQUENCE :BEFORE) (&OPTIONAL IGNORE)
  (SEND SELF ':EXPUNGE-IF-NEEDED))

(DEFMETHOD (:EXPUNGE-IF-NEEDED SEQUENCE) ()
  (WHEN (OR (NULL EXPUNGE-TICK)			;Aborted from
	    (< EXPUNGE-TICK *BUFFER-EXPUNGE-TICK*))	;Not updated
    (EXPUNGE-SEQUENCE SELF NIL)))		;Clean up the mess

(DEFMETHOD (:PREPARE-UNIVERSE MSG-BUFFER) (&OPTIONAL IGNORE)
  (ASSURE-MAIL-BUFFER-FULLY-LOADED SELF))	;Will expunge if needed

(DEFMETHOD (:CERTIFY-FOR-SELECTION MSG-BUFFER) ()	;Explicitly do not prepare
  (SEND SELF ':EXPUNGE-IF-NEEDED))

(DEFMETHOD (:EXPUNGE-IF-NEEDED MSG-BUFFER) ()
  (WHEN (NULL EXPUNGE-TICK)			;Aborted from
    (EXPUNGE-SEQUENCE SELF NIL)))		;Clean up the mess

(DEFMETHOD (:MAP-OVER-UNIVERSE SEQUENCE :BEFORE) (&REST IGNORE)
  (SEND SELF ':PREPARE-UNIVERSE))

(DEFMETHOD (:GET-MSGS-BY-REFERENCE SEQUENCE :BEFORE) (&REST IGNORE)
  (SEND SELF ':PREPARE-UNIVERSE))

(DEFMETHOD (:GET-REFERENCING-MSGS SEQUENCE :BEFORE) (&REST IGNORE)
  (SEND SELF ':PREPARE-UNIVERSE))

(DEFMETHOD (:GET-REFERENCED-MSGS SEQUENCE :BEFORE) (&REST IGNORE)
  (SEND SELF ':PREPARE-UNIVERSE))

;;; :RELEASE-UNIVERSE says to deallocate the universe, if it is a resource.
;;; Defaultly, they're not.
(DEFMETHOD (:RELEASE-UNIVERSE SEQUENCE) ()
  ())

;;; Naming....
(DEFMETHOD (:STRING-FOR-TEMPORARY SEQUENCE) ()
  NAME)

(DEFMETHOD (:STRING-FOR-TEMPORARY MSG-BUFFER) ()
  (STRING-APPEND #/[ NAME #/]))

(DEFMETHOD (:STRING-FOR-TEMPORARY COLLECTION) ()
  FULL-NAME)

;;; The basics are to hack each message.
(DEFMETHOD (:MAP-OVER-UNIVERSE SEQUENCE)
	   (FILTER-FUNCTION FILTER-ARG PROCESSING-FUNCTION PROCESSING-ARG)
  (DOMSGS (MSG SELF)
    (WHEN (FUNCALL FILTER-FUNCTION MSG FILTER-ARG)
      (FUNCALL PROCESSING-FUNCTION MSG PROCESSING-ARG))))

(DEFMETHOD (:SIMPLE-P SEQUENCE) () T)

;;; Newer DO-UNIVERSE interface
(DEFMETHOD (:MAP-OVER-MSGS SEQUENCE :BEFORE) (FUNCTION &KEY NO-PREPARE &ALLOW-OTHER-KEYS)
  (IGNORE FUNCTION)
  (UNLESS NO-PREPARE
    (SEND SELF :PREPARE-UNIVERSE)))

(DEFMETHOD (:MAP-OVER-MSGS SEQUENCE) (FUNCTION &REST OPTIONS)
  (LEXPR-FUNCALL #'MAP-OVER-SEQUENCE-MSGS SELF FUNCTION OPTIONS))

(DEFUN MAP-OVER-SEQUENCE-MSGS (SEQUENCE FUNCTION &KEY (START 0) END (FROM-END NIL)
						      (PARSING T) (NOTE-PROGRESS NIL)
						      (PROGRESS-NOTE NIL) (NO-PREPARE NIL))
  (IGNORE NO-PREPARE)
  (LET* ((ARRAY (SEQUENCE-ARRAY SEQUENCE))
	 (LIMIT (OR END (SEQUENCE-NMSGS SEQUENCE)))
	 (NMSGS-TO-MAP-OVER (- LIMIT START)))
    (LABELS ((DO-MSG (INDEX COUNT)
	       (WHEN NOTE-PROGRESS
		 (TV:NOTE-PROGRESS COUNT NMSGS-TO-MAP-OVER PROGRESS-NOTE))
	       (FUNCALL FUNCTION (AREF ARRAY INDEX)))
	     (DO-SEQUENCE ()
	       (IF FROM-END
		   (LOOP FOR COUNT FROM 0 REPEAT NMSGS-TO-MAP-OVER
			 FOR INDEX DOWNFROM (1- LIMIT)
			 DO
		     (DO-MSG INDEX COUNT))
		   (LOOP FOR COUNT FROM 0 REPEAT NMSGS-TO-MAP-OVER
			 FOR INDEX FROM START
			 DO
		     (DO-MSG INDEX COUNT))))
	     (DO-SEQUENCE-1 ()
	       (IF PARSING
		   (PARSING-HOSTS
		     (DO-SEQUENCE))
		   (DO-SEQUENCE)))
	     (DO-SEQUENCE-2 ()
	       (IF (AND NOTE-PROGRESS (NOT PROGRESS-NOTE))
		   (TV:NOTING-PROGRESS ((FORMAT NIL (IF (EQ NOTE-PROGRESS 'T)
							"Mapping over ~A."
							NOTE-PROGRESS)
						SEQUENCE)
					NOTE)
		     (SETQ PROGRESS-NOTE NOTE)
		     (DO-SEQUENCE-1))
		   (DO-SEQUENCE-1))))
      (DO-SEQUENCE-2))))

;;;  Flavor for handling being selected as the current universe in Experimental mode.
(DEFFLAVOR HAIRY-MAPPING-MIXIN () ())

(DEFMETHOD (:SIMPLE-P HAIRY-MAPPING-MIXIN) () NIL)

;;; How to print flavors.
(DEFFLAVOR UNIVERSE-PRINTING-MIXIN () ()
  (:REQUIRED-FLAVORS SEQUENCE))

(DEFMETHOD (:PRINT-SELF UNIVERSE-PRINTING-MIXIN) (STREAM IGNORE SLASHIFY-P)
  (IF SLASHIFY-P
      (SI:PRINTING-RANDOM-OBJECT (SELF STREAM :TYPEP :NO-POINTER)
	(PRINC NAME STREAM))
    (SEND STREAM ':STRING-OUT NAME)))

;;; Generic methods for universes which are the union of other universes (static or dynamic).
;;; The protocol is for the :COMPONENTS message to return a list of subuniverses to map over.
(DEFFLAVOR GENERIC-MULTIPLE-UNIVERSE ()
	   (UNIVERSE-PRINTING-MIXIN SEQUENCE)
  (:REQUIRED-METHODS :COMPONENTS))

(DEFMETHOD (:MAP-OVER-UNIVERSE GENERIC-MULTIPLE-UNIVERSE)
	   (FILTER-FUNCTION FILTER-ARG PROCESSING-FUNCTION PROCESSING-ARG)
  (DOLIST (UNIVERSE (SEND SELF ':COMPONENTS))
    (SEND UNIVERSE ':MAP-OVER-UNIVERSE
	  FILTER-FUNCTION FILTER-ARG PROCESSING-FUNCTION PROCESSING-ARG)))

(DEFMETHOD (:MAP-OVER-MSGS GENERIC-MULTIPLE-UNIVERSE) (FUNCTION &REST OPTIONS)
  (DOLIST (UNIVERSE (SEND SELF :COMPONENTS))
    (LEXPR-SEND UNIVERSE :MAP-OVER-MSGS FUNCTION OPTIONS)))

(DEFMETHOD (:GET-MSGS-FROM-REFERENCE GENERIC-MULTIPLE-UNIVERSE) (REF)
  (LOOP FOR UNIVERSE IN (SEND SELF ':COMPONENTS)
	APPEND (SEND UNIVERSE ':GET-MSGS-FROM-REFERENCE REF)))

(DEFMETHOD (:GET-REFERENCING-MSGS GENERIC-MULTIPLE-UNIVERSE) (MSG)
  (LOOP FOR U IN (SEND SELF ':COMPONENTS)
	APPEND (SEND U ':GET-REFERENCING-MSGS MSG)))

(DEFMETHOD (:GET-REFERENCED-MSGS GENERIC-MULTIPLE-UNIVERSE) (MSG)
  (LOOP FOR U IN (SEND SELF ':COMPONENTS)
	APPEND (SEND U ':GET-REFERENCED-MSGS MSG)))

(DEFMETHOD (:GET-FIRST-REFERENCING-MSG GENERIC-MULTIPLE-UNIVERSE) (REF)
  (LOOP FOR U IN (SEND SELF ':COMPONENTS)
	FOR MSG = (SEND U ':GET-FIRST-REFERENCING-MSG REF)
	WHEN MSG RETURN MSG))

(DEFMETHOD (SEQUENCE-NMSGS GENERIC-MULTIPLE-UNIVERSE) ()
  (LOOP FOR UNIVERSE IN (SEND SELF :COMPONENTS)
	SUM (SEQUENCE-NMSGS UNIVERSE)))

(DEFMETHOD (SEQUENCE-ARRAY GENERIC-MULTIPLE-UNIVERSE) ()
  (LET* ((ARRAY-CONTENTS (CL:APPLY
			   'CL:CONCATENATE 'LIST
					   (LOOP FOR UNIVERSE IN (SEND SELF :COMPONENTS)
						 COLLECT (SEQUENCE-ARRAY UNIVERSE))))
	 (NMSGS (LENGTH ARRAY-CONTENTS)))
    (SETF ARRAY (CL:MAKE-ARRAY NMSGS :INITIAL-CONTENTS ARRAY-CONTENTS
				     :FILL-POINTER NMSGS
				     :AREA *ZMAIL-MSG-AREA*)))
  ARRAY)

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Any use of these universes by a set operation universe will force the recomputation
;;; of the set universe's contents on each call to (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB"):prepare-universe1.
0(DEFMETHOD (:MODIFICATION-TICK GENERIC-MULTIPLE-UNIVERSE) ()
  (TICK))

;;; A universe which simply forwards to another universe.  Used as a building block.
;;; We define the :FOLLOW-INDIRECTION protocol, which allows us to show the user the
;;; most direct universe when he selects a universe in Experimental mode.
(DEFFLAVOR INDIRECT-UNIVERSE-MIXIN ((UNIVERSE NIL)) (GENERIC-MULTIPLE-UNIVERSE)
  (:REQUIRED-FLAVORS SEQUENCE)
  (:INITABLE-INSTANCE-VARIABLES UNIVERSE))

(DEFMETHOD (:COMPONENTS INDIRECT-UNIVERSE-MIXIN :BEFORE) ()
  (IF (NULL UNIVERSE)
      (SEND SELF ':PREPARE-UNIVERSE)))

(DEFMETHOD (:COMPONENTS INDIRECT-UNIVERSE-MIXIN) ()
  (NCONS UNIVERSE))

(DEFMETHOD (:FOLLOW-INDIRECTION INDIRECT-UNIVERSE-MIXIN) ()
  (SEND SELF ':PREPARE-UNIVERSE)
  (SEND UNIVERSE ':FOLLOW-INDIRECTION))

(DEFMETHOD (:FOLLOW-INDIRECTION SEQUENCE) ()
  SELF)

(DEFMETHOD (:INITIALIZE INDIRECT-UNIVERSE-MIXIN :BEFORE) (&REST IGNORE)
  (SETQ NAME (SEND UNIVERSE :NAME)))

(DEFMETHOD (:INITIALIZE INDIRECT-UNIVERSE-MIXIN :AFTER) (&REST IGNORE)
  (SEND SELF :PREPARE-UNIVERSE))

(DEFMETHOD (SEQUENCE-ARRAY INDIRECT-UNIVERSE-MIXIN) ()
  (SEND SELF :PREPARE-UNIVERSE)
  (SEQUENCE-ARRAY UNIVERSE))

1;;; Override the method supplied by 2generic-multiple-universe1 --
;;;    Someday, we'll fixup the flavor hierarchy of universes
;;;    in order to eliminate this type of idiocy.
0(DEFMETHOD (SEQUENCE-NMSGS INDIRECT-UNIVERSE-MIXIN) ()
  (FILL-POINTER (SEQUENCE-ARRAY SELF)))

1;;; Only for recomputation of set universes when our underlying universe changes.
0(DEFMETHOD (:MODIFICATION-TICK INDIRECT-UNIVERSE-MIXIN) ()
  (SEND SELF :PREPARE-UNIVERSE)
  (SEND UNIVERSE :MODIFICATION-TICK))

;;; A universe consisting of a mail file specified by name.  We don't have to have
;;; the file loaded until we actually want to map over it.
(DEFFLAVOR MAIL-FILE-UNIVERSE (MAIL-FILE-NAME (DISABLE-SAVES NIL))
	   (HAIRY-MAPPING-MIXIN INDIRECT-UNIVERSE-MIXIN UNIVERSE-PRINTING-MIXIN SEQUENCE)
  (:INITABLE-INSTANCE-VARIABLES MAIL-FILE-NAME
				(:DISABLE-SAVES-P DISABLE-SAVES)))

(DEFMETHOD (:PREPARE-UNIVERSE MAIL-FILE-UNIVERSE) (&OPTIONAL IGNORE)
  (WHEN (NULL UNIVERSE)
    (SETQ UNIVERSE (GET-MAIL-BUFFER-FROM-NAME MAIL-FILE-NAME T DISABLE-SAVES))))

;;; Computed universe with modification ticks.  Works by building an array
;;; which must be updated if the universes it depends on change.
(DEFFLAVOR DYNAMIC-UNIVERSE-MIXIN
	(FROM-UNIVERSES MODIFICATION-TICK (EXPANDED-TICK-ALIST NIL)) ()
  (:REQUIRED-FLAVORS SEQUENCE))

(DEFMETHOD (MAKE-INSTANCE DYNAMIC-UNIVERSE-MIXIN :AFTER) (&REST IGNORE)
  (SETF MODIFICATION-TICK -1))			1;Force an update the first time.

0(DEFUN-IN-FLAVOR (PREPARE-COMPONENTS DYNAMIC-UNIVERSE-MIXIN) ()
  (DOLIST (UNIVERSE FROM-UNIVERSES)
    (LET ((UNIVERSE-AND-TICK (ASSQ UNIVERSE EXPANDED-TICK-ALIST)))
      (SEND UNIVERSE :PREPARE-UNIVERSE (CDR UNIVERSE-AND-TICK))
      (IF (NULL UNIVERSE-AND-TICK)
	  (PUSH (CONS UNIVERSE (SEND UNIVERSE :MODIFICATION-TICK)) EXPANDED-TICK-ALIST)
	  (SETF (CDR UNIVERSE-AND-TICK) (SEND UNIVERSE :MODIFICATION-TICK))))))

(DEFMETHOD (:MAP-OVER-UNIVERSE DYNAMIC-UNIVERSE-MIXIN :BEFORE) (&REST IGNORE)
  (PREPARE-COMPONENTS))

(DEFMETHOD (:MAP-OVER-MSGS DYNAMIC-UNIVERSE-MIXIN :BEFORE) (FUNCTION
							     &KEY NO-PREPARE &ALLOW-OTHER-KEYS)
  (IGNORE FUNCTION)
  (UNLESS NO-PREPARE
    (PREPARE-COMPONENTS)))

(DEFWHOPPER (:PREPARE-UNIVERSE DYNAMIC-UNIVERSE-MIXIN) (&OPTIONAL TICK)
  (WHEN (LOOP FOR UNIVERSE IN FROM-UNIVERSES
	      THEREIS (< MODIFICATION-TICK (SEND UNIVERSE :MODIFICATION-TICK)))
    (SETF (SEQUENCE-NMSGS SELF) 0)		1;Flush whatever might have been there before.
0    (CONTINUE-WHOPPER TICK)
    (SETF MODIFICATION-TICK (TICK))))

;;; The basic composite universe types.  NOT, INTERSECTION, UNION,
(DEFFLAVOR NOT-UNIVERSE (FROM-UNIVERSE)
	   (HAIRY-MAPPING-MIXIN DYNAMIC-UNIVERSE-MIXIN UNIVERSE-PRINTING-MIXIN SEQUENCE)
  (:INITABLE-INSTANCE-VARIABLES FROM-UNIVERSE))

(DEFMETHOD (MAKE-INSTANCE NOT-UNIVERSE :AFTER) (&REST IGNORE)
  (SETF FROM-UNIVERSES (LIST FROM-UNIVERSE)))

(DEFMETHOD (:PREPARE-UNIVERSE NOT-UNIVERSE) (&OPTIONAL IGNORE)
  (DOLIST (MF *SEQUENCE-LIST*)
    (WHEN (SEQUENCE-BUFFER-P MF)
      (UNLESS (EQ MF FROM-UNIVERSE)
      	(DO-UNIVERSE (MSG MF)
	  (UNLESS (MSG-IN-SEQUENCE-P MSG FROM-UNIVERSE)
	    (ARRAY-PUSH-EXTEND ARRAY MSG)))))))

(DEFFLAVOR INTERSECTION-UNIVERSE (FROM-UNIVERSES)
	   (HAIRY-MAPPING-MIXIN DYNAMIC-UNIVERSE-MIXIN UNIVERSE-PRINTING-MIXIN SEQUENCE)
  (:INITABLE-INSTANCE-VARIABLES FROM-UNIVERSES))

(DEFMETHOD (:INIT INTERSECTION-UNIVERSE :AFTER) (PLIST)
  (IGNORE PLIST)
  (WHEN (NULL FROM-UNIVERSES)			1;Intersection of no args is everything.
0    (SETQ FROM-UNIVERSES (COPYLIST *SEQUENCE-LIST*))))

(DEFMETHOD (:PREPARE-UNIVERSE INTERSECTION-UNIVERSE) (&OPTIONAL IGNORE)
  1;; Move the smaller universe to the start of the list for speed.
0  (SETQ FROM-UNIVERSES (SORT FROM-UNIVERSES #'(LAMBDA (SEQ1 SEQ2)
						(< (SEQUENCE-NMSGS SEQ1)
						   (SEQUENCE-NMSGS SEQ2)))))
  (DO-UNIVERSE (MSG (FIRST FROM-UNIVERSES) :NO-PREPARE T)
    (WHEN (LOOP FOR MF IN (REST1 FROM-UNIVERSES)
		ALWAYS (MSG-IN-SEQUENCE-P MSG MF))
      (ARRAY-PUSH-EXTEND ARRAY MSG))))

(DEFFLAVOR UNION-UNIVERSE (FROM-UNIVERSES)
	   (HAIRY-MAPPING-MIXIN DYNAMIC-UNIVERSE-MIXIN UNIVERSE-PRINTING-MIXIN SEQUENCE)
  (:INITABLE-INSTANCE-VARIABLES FROM-UNIVERSES))

(DEFMETHOD (:PREPARE-UNIVERSE UNION-UNIVERSE) (&OPTIONAL IGNORE)
  (DOLIST (UNIVERSE FROM-UNIVERSES)
    (DO-UNIVERSE (MSG UNIVERSE :NO-PREPARE T)
      (ARRAY-PUSH-EXTEND ARRAY MSG)))
  (CL:DELETE-DUPLICATES ARRAY :FROM-END T))

;;; The basis for various universes which are defined to indirect through a global variable.
(DEFFLAVOR VARIABLE-UNIVERSE (VARIABLE)
	   (GENERIC-MULTIPLE-UNIVERSE UNIVERSE-PRINTING-MIXIN SEQUENCE)
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:COMPONENTS VARIABLE-UNIVERSE) ()
  (NCONS (SYMEVAL VARIABLE)))

;;; The "default mail file" universe.
(DEFFLAVOR DEFAULT-BUFFER-UNIVERSE () (HAIRY-MAPPING-MIXIN GENERIC-MULTIPLE-UNIVERSE)
  (:DEFAULT-INIT-PLIST :NAME "Default Buffer"))

(DEFMETHOD (:STRING-FOR-TEMPORARY DEFAULT-BUFFER-UNIVERSE) ()
  (SEND (CAR (SEND SELF :COMPONENTS)) :STRING-FOR-TEMPORARY))

(DEFMETHOD (:COMPONENTS DEFAULT-BUFFER-UNIVERSE) ()
  (LIST (COND (*DEFAULT-BUFFER*)
	      (*ZMAIL-STARTUP-FILE-NAME*
		(GET-BUFFER-FROM-PATHNAME *ZMAIL-STARTUP-FILE-NAME* T))
	      (T				;same default as STARTUP-MAIL-FILE
		(GET-BUFFER-FROM-PATHNAME
		  (CAR (SEND (FS:USER-HOMEDIR (SECOND (SEND SI:*USER* ':MAIL-ADDRESS)))
			     ':POSSIBLE-MAIL-FILE-PATHNAMES))
		  T)))))

;;; The currently selected sequence.
(DEFFLAVOR CURRENT-UNIVERSE () (HAIRY-MAPPING-MIXIN VARIABLE-UNIVERSE)
  (:DEFAULT-INIT-PLIST :NAME "Current sequence" :VARIABLE '*SEQUENCE*))

(DEFMETHOD (:STRING-FOR-TEMPORARY CURRENT-UNIVERSE) ()
  (SEND (SYMEVAL VARIABLE) ':STRING-FOR-TEMPORARY))

;;; All the loaded mail files.
(DEFFLAVOR LOADED-UNIVERSE () (HAIRY-MAPPING-MIXIN GENERIC-MULTIPLE-UNIVERSE)
  (:DEFAULT-INIT-PLIST :NAME "Loaded files"))

;;; We only have to look at the buffers, collections only duplicate messages.
(DEFMETHOD (:COMPONENTS LOADED-UNIVERSE) ()
  (LOOP FOR MF IN *SEQUENCE-LIST*
	WHEN (SEQUENCE-BUFFER-P MF)
	  COLLECT MF))

(DEFMETHOD (:STRING-FOR-TEMPORARY LOADED-UNIVERSE) ()
  "[*]")

;;; All loaded mail files referenced by any messages in the current sequence --
;;;    This rather obscure universe is the proper default universe for the reference
;;;    commands (e.g., Select Conversations by Reference) as it will allow those commands
;;;    to find the conversation when used in collections generated by filters such as Recent.
(DEFFLAVOR REFERENCED-BUFFERS-OF-CURRENT-SEQUENCE-UNIVERSE ()
	   (HAIRY-MAPPING-MIXIN GENERIC-MULTIPLE-UNIVERSE)
  (:DEFAULT-INIT-PLIST :NAME "Referenced buffers of current sequence"))

(DEFMETHOD (:COMPONENTS REFERENCED-BUFFERS-OF-CURRENT-SEQUENCE-UNIVERSE) ()
  (WHEN *SEQUENCE*
    (IF (SEQUENCE-BUFFER-P *SEQUENCE*)
	`(,*SEQUENCE*)
      (SI:ELIMINATE-DUPLICATES
	(LOOP FOR MSG BEING THE MSGS IN *SEQUENCE*
	      WHEN (MSG-BUFFER MSG)
		COLLECT (MSG-BUFFER MSG))))))

(DEFMETHOD (:STRING-FOR-TEMPORARY REFERENCED-BUFFERS-OF-CURRENT-SEQUENCE-UNIVERSE) ()
  (FORMAT NIL "[*~:[~; ~A~]]" *SEQUENCE*
			      (WHEN *SEQUENCE* (SEND *SEQUENCE* :STRING-FOR-TEMPORARY))))

;;; Various kinds of "Temporary" universes.  These want to be resources.

(DEFFLAVOR RESOURCE-UNIVERSE-MIXIN () ()
  (:REQUIRED-METHODS :INITIALIZE))

(DEFMETHOD (:RELEASE-UNIVERSE RESOURCE-UNIVERSE-MIXIN) ()
  (DEALLOCATE-RESOURCE (TYPEP SELF) SELF))

;;; A universe consisting of a single message!
(DEFFLAVOR SINGLE-MSG-UNIVERSE (MSG (NAME NIL))
	   (HAIRY-MAPPING-MIXIN RESOURCE-UNIVERSE-MIXIN SEQUENCE)
  :INITABLE-INSTANCE-VARIABLES)

(DEFRESOURCE SINGLE-MSG-UNIVERSE (MSG &OPTIONAL NAME)
  :CONSTRUCTOR (MAKE-INSTANCE 'SINGLE-MSG-UNIVERSE ':MSG MSG ':NAME NAME)
  :INITIALIZER (SEND OBJECT ':INITIALIZE ':MSG MSG ':NAME NAME))

(DEFMETHOD (:INITIALIZE SINGLE-MSG-UNIVERSE) (&REST LIST)
  (LET ((PLIST (LOCF LIST)))
    (SETQ NAME (GET PLIST ':NAME))
    (SETQ MSG (GET PLIST ':MSG))))

;;; We prepare by making it look like a mail file with one message.
(DEFMETHOD (:PREPARE-UNIVERSE SINGLE-MSG-UNIVERSE) (&OPTIONAL IGNORE)
  (SETF (FILL-POINTER ARRAY) 1)
  (SETF (AREF ARRAY 0) MSG))

(DEFMETHOD (:SET-MSG SINGLE-MSG-UNIVERSE) (NEW-MSG)
  (SETQ MSG NEW-MSG)
  (SETQ NAME (MSG-SUMMARY-LINE MSG)))

(DEFMETHOD (:STRING-FOR-TEMPORARY SINGLE-MSG-UNIVERSE) ()
  (STRING-APPEND #/$ NAME #/$))

1;;; Mixin for universes whose contents somehow depends on the current message.
0(DEFFLAVOR CURRENT-MSG-DEPENDENT-UNIVERSE-MIXIN
	((LAST-*SEQUENCE* NIL)
	 (LAST-*MSG* NIL))
	()
  (:REQUIRED-FLAVORS INDIRECT-UNIVERSE-MIXIN))

1;;; Universe changes whenever we're the current sequence and the current message has changed.
0(DEFMETHOD (:MODIFICATION-TICK CURRENT-MSG-DEPENDENT-UNIVERSE-MIXIN) ()
  (PROG1
    (IF (COND ((NEQ LAST-*SEQUENCE* *SEQUENCE*)
	       (OR (EQ LAST-*SEQUENCE* UNIVERSE) (EQ *SEQUENCE* UNIVERSE)))
	      ((EQ *SEQUENCE* UNIVERSE)
	       (NEQ LAST-*MSG* *MSG*))
	      (T NIL))
	(TICK)
	(SEND UNIVERSE :MODIFICATION-TICK))
    (SETQ LAST-*SEQUENCE* *SEQUENCE*
	  LAST-*MSG* *MSG*)))

;;; The rest of the selected mail file.
(DEFFLAVOR REST-OF-SEQUENCE-UNIVERSE ((EXCLUSIVE NIL))
	   (HAIRY-MAPPING-MIXIN RESOURCE-UNIVERSE-MIXIN
	    CURRENT-MSG-DEPENDENT-UNIVERSE-MIXIN INDIRECT-UNIVERSE-MIXIN SEQUENCE)
  :INITABLE-INSTANCE-VARIABLES)

(DEFRESOURCE REST-OF-SEQUENCE-UNIVERSE (SEQUENCE &OPTIONAL EXCLUSIVE)
  :CONSTRUCTOR (MAKE-INSTANCE 'REST-OF-SEQUENCE-UNIVERSE
			      :UNIVERSE SEQUENCE :EXCLUSIVE EXCLUSIVE
			      :NAME (FORMAT NIL "Rest of ~A" (SEND SEQUENCE :NAME)))
  :INITIALIZER (SEND OBJECT :INITIALIZE :UNIVERSE SEQUENCE :EXCLUSIVE EXCLUSIVE))

(DEFMETHOD (:INITIALIZE REST-OF-SEQUENCE-UNIVERSE) (&REST LIST &AUX (PLIST (LOCF LIST)))
  (SETQ UNIVERSE (GET PLIST :UNIVERSE)
	NAME (FORMAT NIL "Rest of ~A" (SEND UNIVERSE :NAME))
	EXCLUSIVE (GET PLIST :EXCLUSIVE)))

(DEFMETHOD (:STRING-FOR-TEMPORARY REST-OF-SEQUENCE-UNIVERSE) ()
  (STRING-APPEND #/ (SEND UNIVERSE ':STRING-FOR-TEMPORARY)))

(DEFUN-IN-FLAVOR (SEQUENCE-START REST-OF-SEQUENCE-UNIVERSE) ()
  (COND ((NEQ UNIVERSE *SEQUENCE*) 0)
	(EXCLUSIVE (1+ *MSG-NO*))
	(T *MSG-NO*)))

(DEFMETHOD (SEQUENCE-ARRAY REST-OF-SEQUENCE-UNIVERSE) ()
  (LET* ((ARRAY-CONTENTS (CL:SUBSEQ (SEQUENCE-ARRAY UNIVERSE)
				    (SEQUENCE-START) (SEQUENCE-NMSGS UNIVERSE)))
	 (NMSGS (CL:LENGTH ARRAY-CONTENTS)))
    (SETF ARRAY (CL:MAKE-ARRAY NMSGS :INITIAL-CONTENTS ARRAY-CONTENTS
				     :FILL-POINTER NMSGS
				     :AREA *ZMAIL-MSG-AREA*)))
  ARRAY)

(DEFMETHOD (:MAP-OVER-UNIVERSE REST-OF-SEQUENCE-UNIVERSE)
	   (FILTER-FUNCTION FILTER-ARG PROCESSING-FUNCTION PROCESSING-ARG)
  (LOCK-SEQUENCE (UNIVERSE :READ)
    (SEND UNIVERSE :PREPARE-UNIVERSE)
    (LOOP WITH MARRAY = (SEQUENCE-ARRAY UNIVERSE)
	  FOR INDEX FROM (SEQUENCE-START) BELOW (FILL-POINTER MARRAY)
	  FOR MSG = (AREF MARRAY INDEX)
	  DO (WHEN (FUNCALL FILTER-FUNCTION MSG FILTER-ARG)
	       (FUNCALL PROCESSING-FUNCTION MSG PROCESSING-ARG)))))

(DEFMETHOD (:MAP-OVER-MSGS REST-OF-SEQUENCE-UNIVERSE) (FUNCTION &REST OPTIONS)
  (LEXPR-SEND UNIVERSE :MAP-OVER-MSGS FUNCTION :START (SEQUENCE-START) OPTIONS))

;;; The inverse of above.
(DEFFLAVOR BEGINNING-OF-SEQUENCE-UNIVERSE ((FROM-END NIL))
	   (HAIRY-MAPPING-MIXIN RESOURCE-UNIVERSE-MIXIN
	    CURRENT-MSG-DEPENDENT-UNIVERSE-MIXIN INDIRECT-UNIVERSE-MIXIN SEQUENCE)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFRESOURCE BEGINNING-OF-SEQUENCE-UNIVERSE (SEQUENCE &OPTIONAL FROM-END)
  :CONSTRUCTOR (MAKE-INSTANCE 'BEGINNING-OF-SEQUENCE-UNIVERSE
			      :UNIVERSE SEQUENCE
			      :FROM-END FROM-END
			      :NAME (FORMAT NIL "Beginning of ~A" (SEND SEQUENCE :NAME)))
  :INITIALIZER (SEND OBJECT :INITIALIZE :UNIVERSE SEQUENCE
					:FROM-END FROM-END))

(DEFMETHOD (:INITIALIZE BEGINNING-OF-SEQUENCE-UNIVERSE) (&REST LIST &AUX (PLIST (LOCF LIST)))
  (SETQ UNIVERSE (GET PLIST :UNIVERSE)
	NAME (FORMAT NIL "Beginning of ~A" (SEND UNIVERSE :NAME))
	FROM-END (GET PLIST :FROM-END)))

(DEFMETHOD (:STRING-FOR-TEMPORARY BEGINNING-OF-SEQUENCE-UNIVERSE) ()
  (STRING-APPEND #/ (SEND UNIVERSE ':STRING-FOR-TEMPORARY)))

(DEFUN-IN-FLAVOR (SEQUENCE-END BEGINNING-OF-SEQUENCE-UNIVERSE) ()
  (IF (EQ UNIVERSE *SEQUENCE*) *MSG-NO* (SEQUENCE-NMSGS UNIVERSE)))

(DEFMETHOD (SEQUENCE-ARRAY BEGINNING-OF-SEQUENCE-UNIVERSE) ()
  (LET* ((ARRAY-CONTENTS (CL:SUBSEQ (SEQUENCE-ARRAY UNIVERSE) 0 (SEQUENCE-END)))
	 (NMSGS (CL:LENGTH ARRAY-CONTENTS)))
    (SETF ARRAY (CL:MAKE-ARRAY NMSGS :INITIAL-CONTENTS (IF FROM-END
							   (CL:REVERSE ARRAY-CONTENTS)
							   ARRAY-CONTENTS)
				     :FILL-POINTER NMSGS
				     :AREA *ZMAIL-MSG-AREA*)))
  ARRAY)

(DEFMETHOD (:MAP-OVER-UNIVERSE BEGINNING-OF-SEQUENCE-UNIVERSE)
	   (FILTER-FUNCTION FILTER-ARG PROCESSING-FUNCTION PROCESSING-ARG)
  (LOCK-SEQUENCE (UNIVERSE :READ)
    (SEND UNIVERSE :PREPARE-UNIVERSE)
    (LET* ((MARRAY (SEQUENCE-ARRAY UNIVERSE))
	   (BOTTOM 0)
	   (TOP (1- (SEQUENCE-END)))
	   (INCR +1))
      (WHEN FROM-END
	(SWAPF BOTTOM TOP)
	(SETQ INCR -1))
      (LOOP FOR INDEX FIRST BOTTOM THEN (+ INDEX INCR)
	    AS MSG = (AREF MARRAY INDEX)
	    DO (WHEN (FUNCALL FILTER-FUNCTION MSG FILTER-ARG)
		 (FUNCALL PROCESSING-FUNCTION MSG PROCESSING-ARG))
	    UNTIL (= INDEX TOP)))))

(DEFMETHOD (:MAP-OVER-MSGS BEGINNING-OF-SEQUENCE-UNIVERSE) (FUNCTION &REST OPTIONS)
  (LEXPR-SEND UNIVERSE :MAP-OVER-MSGS FUNCTION :END (SEQUENCE-END) :FROM-END FROM-END OPTIONS))

;;; All mail files, either loaded or on *OTHER-MAIL-FILE-NAMES*
(DEFFLAVOR ALL-MAIL-FILE-UNIVERSE () (HAIRY-MAPPING-MIXIN GENERIC-MULTIPLE-UNIVERSE SEQUENCE)
  (:DEFAULT-INIT-PLIST :NAME "All files"))

;;; Get the components which aren't loaded yet.  We get them last so we don't have
;;; to load them if we don't end up using them.
(DEFMETHOD (:COMPONENTS-UNLOADED ALL-MAIL-FILE-UNIVERSE) ()
  (MULTIPLE-VALUE-BIND (IGNORE IGNORE UNLOADED-FILES)
      (GET-SEQUENCE-ALISTS)
    (LOOP FOR (NIL . PATHNAME) IN UNLOADED-FILES
	  COLLECT (LOAD-OR-CREATE-MAIL-FILE PATHNAME))))

(DEFMETHOD (:COMPONENTS ALL-MAIL-FILE-UNIVERSE) ()
  (NCONC (SEND *LOADED-FILES-INDIRECT-UNIVERSE* ':COMPONENTS)
	 (SEND SELF ':COMPONENTS-UNLOADED)))

(DEFFLAVOR WILDCARD-FILE-UNIVERSE (PATHNAME DISABLE-SAVES)
	   (HAIRY-MAPPING-MIXIN GENERIC-MULTIPLE-UNIVERSE)
  (:INITABLE-INSTANCE-VARIABLES PATHNAME
				(:DISABLE-SAVES-P DISABLE-SAVES)))

(DEFRESOURCE WILDCARD-FILE-UNIVERSE (PATHNAME DISABLE-SAVES-P)
  :CONSTRUCTOR (MAKE-INSTANCE 'WILDCARD-FILE-UNIVERSE :PATHNAME PATHNAME
						      :DISABLE-SAVES-P DISABLE-SAVES-P)
  :INITIALIZER (SEND OBJECT :INITIALIZE :PATHNAME PATHNAME :DISABLE-SAVES-P DISABLE-SAVES-P))

(DEFMETHOD (:INIT WILDCARD-FILE-UNIVERSE :AFTER) (IGNORE)
  (SETQ NAME (STRING PATHNAME)))

(DEFMETHOD (:INITIALIZE WILDCARD-FILE-UNIVERSE) (&KEY ((:PATHNAME PATH)) DISABLE-SAVES-P)
  (SETQ PATHNAME PATH
	NAME (STRING PATH)
	DISABLE-SAVES DISABLE-SAVES-P))

(DEFMETHOD (:COMPONENTS WILDCARD-FILE-UNIVERSE) ()
  (LET ((DIRECTORY-LIST (FS:DIRECTORY-LIST PATHNAME :FAST :SORTED))
	(NEWEST-CHECK (EQ (SEND PATHNAME :VERSION) :NEWEST)))
    (WHEN (NULL DIRECTORY-LIST)
      (BARF "No files match ~A." PATHNAME))
    (LOOP FOR (FILE) IN DIRECTORY-LIST
	  WHEN FILE
	    DO (WHEN (OR NEWEST-CHECK
			 (EQ FILE (PROBEF (SEND FILE :NEW-VERSION :NEWEST))))
		 (SETQ FILE (SEND FILE :NEW-VERSION :NEWEST)))
	    AND COLLECT (MAKE-INSTANCE 'MAIL-FILE-UNIVERSE :MAIL-FILE-NAME FILE
							   :DISABLE-SAVES-P DISABLE-SAVES))))

(DEFMETHOD (:STRING-FOR-TEMPORARY WILDCARD-FILE-UNIVERSE) ()
  (STRING-APPEND #/[ NAME #/]))

;;; user-interface syntax for creating universes.

(DEFPROP DEFINE-UNIVERSE "Universe" SI:DEFINITION-TYPE-NAME)
(DEFMACRO DEFINE-UNIVERSE (UNIVERSE IGNORE &OPTIONAL EXPANSION)
  (CHECK-EXPANSION EXPANSION NIL)
  `(LOCAL-DECLARE ((SYS:FUNCTION-PARENT ,UNIVERSE DEFINE-UNIVERSE))
     (CHECK-EXPANSION ',EXPANSION T)
     (RECORD-SOURCE-FILE-NAME ',UNIVERSE 'DEFINE-UNIVERSE)
     (UNLESS (MEMQ ',UNIVERSE *UNIVERSE-LIST*)
       (SETQ *UNIVERSE-LIST* (NCONC *UNIVERSE-LIST* (NCONS ',UNIVERSE))))
     (DEFPROP ,UNIVERSE ,EXPANSION UNIVERSE-DEFINITION)
     (PUTPROP ',UNIVERSE
	      (EXPAND-UNIVERSE-DESCRIPTION ',EXPANSION (STRING ',UNIVERSE)) 'UNIVERSE)
     ',UNIVERSE))

(DEFUN GET-UNIVERSE-DEFINITION (UNIVERSE)
  `(DEFINE-UNIVERSE ,UNIVERSE ()
     ,(GET UNIVERSE 'UNIVERSE-DEFINITION)))

;;; Macro-expand-time error checking.
(DEFUN CHECK-EXPANSION (EXPANSION &OPTIONAL (CHECK-SUBUNIVERSES-DEFINED T))
  (COND ((NULL EXPANSION)
	 (FERROR NIL "Missing expansion or component: not a valid universe."))
	((STRINGP EXPANSION))
	((MEMQ EXPANSION '(DEFAULT CURRENT LOADED)))
	((AND (SYMBOLP EXPANSION)
	      (OR (NOT CHECK-SUBUNIVERSES-DEFINED)
		  (GET EXPANSION 'UNIVERSE))))
	((NLISTP EXPANSION)
	 (FERROR NIL "~S is not a valid universe component" EXPANSION))
	((NULL (CDR EXPANSION))
	 (OR (SYMBOLP (CAR EXPANSION))
	     (FERROR NIL "~S is not a valid universe component" EXPANSION)))
	((EQ (CAR EXPANSION) ')
	 (OR (= (LENGTH EXPANSION) 2)
	     (FERROR NIL "~S wrong number of argument to " EXPANSION)))
	((NOT (MEMQ (CAR EXPANSION) '( )))
	 (FERROR NIL "~S is not a known set operator" (CAR EXPANSION)))
	(T
	 (DOLIST (EXP (CDR EXPANSION))
	   (CHECK-EXPANSION EXP)))))

;;; This takes a universe description and returns a universe object.
(DEFUN EXPAND-UNIVERSE-DESCRIPTION (UNIVERSE &OPTIONAL NAME)
  (WHEN (NULL NAME)
    (SETQ NAME (WITH-OUTPUT-TO-STRING (STR)
		 (PRIN1 UNIVERSE STR))
	  NAME (NSUBSTRING NAME 0 (MIN 100 (STRING-LENGTH NAME)))))
  (COND ((TYPEP UNIVERSE 'SEQUENCE) UNIVERSE)
	((SYMBOLP UNIVERSE)
	 (SELECTQ UNIVERSE
	   (DEFAULT *DEFAULT-INDIRECT-UNIVERSE*)
	   (CURRENT *CURRENT-INDIRECT-UNIVERSE*)
	   (LOADED *LOADED-FILES-INDIRECT-UNIVERSE*)
	   (OTHERWISE (EXPAND-UNIVERSE-DESCRIPTION (OR (GET UNIVERSE 'UNIVERSE)
						       (FERROR "~S is not a valid universe"
							       UNIVERSE))
						   (STRING UNIVERSE)))))
	((STRINGP UNIVERSE)
	 (MAKE-INSTANCE 'MAIL-FILE-UNIVERSE :MAIL-FILE-NAME UNIVERSE :NAME NAME))
	((LISTP UNIVERSE)
	 (SELECTQ (FIRST UNIVERSE)
	   ( (MAKE-INSTANCE 'NOT-UNIVERSE
			     :FROM-UNIVERSE (EXPAND-UNIVERSE-DESCRIPTION (SECOND UNIVERSE))
			     :NAME NAME))
	   ( (MAKE-INSTANCE 'UNION-UNIVERSE
			     :FROM-UNIVERSES (MAPCAR #'EXPAND-UNIVERSE-DESCRIPTION
						     (CDR UNIVERSE))
			     :NAME NAME))
	   ( (MAKE-INSTANCE 'INTERSECTION-UNIVERSE
			     :FROM-UNIVERSES (MAPCAR #'EXPAND-UNIVERSE-DESCRIPTION
						     (CDR UNIVERSE))
			     :NAME NAME))
	   (DEFAULT *DEFAULT-INDIRECT-UNIVERSE*)
	   (CURRENT *CURRENT-INDIRECT-UNIVERSE*)
	   (LOADED *LOADED-FILES-INDIRECT-UNIVERSE*)
	   (OTHERWISE (EXPAND-UNIVERSE-DESCRIPTION (OR (GET (FIRST UNIVERSE) 'UNIVERSE)
						       (FERROR "~S is not a valid universe"
							       (FIRST UNIVERSE)))
						   (STRING (FIRST UNIVERSE))))))
	(T (FERROR "~S is not a valid universe" UNIVERSE))))


1;;; Gets a universe from the user by poping up a menu.  It returns NIL if the user
;;; selects the "Abort" option from the menu.  The caller should supply documentation
;;; for that option.
0(DEFUN GET-UNIVERSE-FUNCTION (&OPTIONAL (NEAR-MODE '(:MOUSE))
					(LABEL "Select the universe:")
					(ABORT-DOCUMENTATION "Abort this command.")
			      &AUX CHOICE DISABLE-SAVES-P UNIVERSE NAME)
  (DECLARE (VALUES UNIVERSE NAME))
  (SEND *UNIVERSE-SELECTION-MENU* :SET-LABEL LABEL)
  (MULTIPLE-VALUE-BIND (BUFFERS-ALIST COLLECTIONS-ALIST UNLOADED-FILES-ALIST)
      (GET-SEQUENCE-ALISTS T)
    (SEND *UNIVERSE-SELECTION-MENU* :SET-ITEM-LISTS
	  `(,@(TV:MAKE-MENU-ITEM-LIST BUFFERS-ALIST "Use the messages in this file's buffer."
				      '(NIL :BOLD NIL))
	    ,@(TV:MAKE-MENU-ITEM-LIST UNLOADED-FILES-ALIST
				      "Read or create this file and then use its messages."))
	  (TV:MAKE-MENU-ITEM-LIST COLLECTIONS-ALIST "Use the messages in this collection.")
	  `(,@(TV:MAKE-MENU-ITEM-LIST *UNIVERSE-LIST* "Use the messages in this universe.")
	    ,@(IF *UNIVERSE-LIST* '(("" :NO-SELECT T)))
	    ;; "Built-in" universes
	    ("Read//create file" :VALUE :FIND-FILE
				 :STYLE (:SWISS :ITALIC :NORMAL)
				 :DOCUMENTATION
				   "Read or create a file and then use its messages.")
	    ("Examine file" :VALUE :EXAMINE-FILE
			    :STYLE (:SWISS :ITALIC :NORMAL)
			    :DOCUMENTATION
  "Read an existing file (which will reject attempts to be saved) and then use its messages.")
	    ("All files" :VALUE :ALL
			 :STYLE (:SWISS :ITALIC :NORMAL)
			 :DOCUMENTATION
  "Read or create any files not highlighted in this menu and then use the messages in all the files of the menu.")
	    ("Loaded files" :VALUE :LOADED
			    :STYLE (:SWISS :ITALIC :NORMAL)
			    :DOCUMENTATION
			      "Use the messages in the highlighted files of this menu.")
	    ("New universe" :VALUE :NEW-UNIVERSE
			    :STYLE (:SWISS :ITALIC :NORMAL)
			    :DOCUMENTATION
  "Define a new universe using set operations on existing universes and then use its messages.")
	    ,@(IF *SEQUENCE*
		  '(("Rest of current sequence" :VALUE :REST
						:STYLE (:SWISS :ITALIC :NORMAL)
						:DOCUMENTATION
		       "Use the messages starting with the current message in this sequence.")
		    ("Beginning of current sequence" :VALUE :BEGINNING
						     :STYLE (:SWISS :ITALIC :NORMAL)
						     :DOCUMENTATION
			    "Use the messages before the current message in this sequence.")
		    ("Referenced buffers" :VALUE :REFERENCED-BUFFERS
					  :STYLE (:SWISS :ITALIC :NORMAL)
					  :DOCUMENTATION
  "Use the messages in any file which contains at least one message from the current sequence.")))
	    ("Abort" :VALUE :ABORT
		    :STYLE (:SWISS :ITALIC :NORMAL)
		    :DOCUMENTATION ,ABORT-DOCUMENTATION))))
  (MACROLET ((WITH-MENUS-PROTECTED (&BODY BODY)
	       `(UNWIND-PROTECT
		    (PROGN
		      ,@BODY)
		  (WHEN (AND (LISTP NEAR-MODE) (EQ (FIRST NEAR-MODE) :WINDOW))
		    (SEND (SECOND NEAR-MODE) :EXPOSE))))
	     (WITH-MENUS-DEACTIVATED (&BODY BODY)
	       `(WITH-MENUS-PROTECTED
		  (SEND *UNIVERSE-SELECTION-MENU* :DEACTIVATE)
		  (WHEN (AND (LISTP NEAR-MODE) (EQ (FIRST NEAR-MODE) :WINDOW))
		    (SEND (SECOND NEAR-MODE) :DEACTIVATE))
		  ,@BODY)))
    (WITH-MENUS-PROTECTED
      (UNWIND-PROTECT
	  (TV:SAVING-MOUSE-POSITION *UNIVERSE-SELECTION-MENU*
	    (TV:EXPOSE-WINDOW-NEAR *UNIVERSE-SELECTION-MENU* NEAR-MODE)
	    (SETQ CHOICE (SEND *UNIVERSE-SELECTION-MENU* :CHOOSE))
	    (WHEN CHOICE
	      (SEND *UNIVERSE-SELECTION-MENU* :EXECUTE CHOICE))
	    (SET-COMMAND-BUTTON (SEND *UNIVERSE-SELECTION-MENU* :LAST-BUTTONS))
	    (WHEN (MEMQ CHOICE '(:FIND-FILE :EXAMINE-FILE))
	      (SETQ DISABLE-SAVES-P (EQ CHOICE :EXAMINE-FILE)
		    CHOICE (CATCH-ZWEI-COMMAND-LOOP
			     (SELECT-BUFFER-FIND-FILE *UNIVERSE-SELECTION-MENU*
						      (IF DISABLE-SAVES-P "Examine file"
									  "Read file"))))
	      (WHEN (EQ CHOICE T) (SETQ CHOICE :ABORT)))
	    (WHEN (OR (STRINGP CHOICE) (TYPEP CHOICE 'FS:PATHNAME))
	      (SETQ CHOICE (IF (AND (TYPEP CHOICE 'FS:PATHNAME) (SEND CHOICE :WILD-P))
			       (ALLOCATE-RESOURCE
				 'WILDCARD-FILE-UNIVERSE CHOICE DISABLE-SAVES-P)
			     (WITH-MENUS-DEACTIVATED
			       (LOAD-OR-CREATE-MAIL-FILE CHOICE
							 :NEAR '(:MOUSE)
							 :SELECT-FORMAT-AND-OPTIONS
						           (EQ *ZMAIL-COMMAND-BUTTON* :RIGHT)
							   :OPTIONS `(:DISABLE-SAVES
								       ,DISABLE-SAVES-P))))))
	    (COND ((OR (NULL CHOICE) (EQ CHOICE :ABORT))
		   (SETQ UNIVERSE NIL
			 NAME "None"))
		  ((EQ CHOICE :ALL)
		   (SETQ UNIVERSE *ALL-INDIRECT-UNIVERSE*))
		  ((EQ CHOICE :LOADED)
		   (SETQ UNIVERSE *LOADED-FILES-INDIRECT-UNIVERSE*))
		  ((EQ CHOICE :REST)
		   (SETQ UNIVERSE (ALLOCATE-RESOURCE 'REST-OF-SEQUENCE-UNIVERSE *SEQUENCE*)))
		  ((EQ CHOICE :BEGINNING)
		   (SETQ UNIVERSE (ALLOCATE-RESOURCE
				    'BEGINNING-OF-SEQUENCE-UNIVERSE *SEQUENCE*)))
		  ((EQ CHOICE :REFERENCED-BUFFERS)
		   (SETQ UNIVERSE *REFERENCED-BUFFERS-INDIRECT-UNIVERSE*))
		  ((EQ CHOICE :NEW-UNIVERSE)
		   (WITH-MENUS-DEACTIVATED
		     (SETQ UNIVERSE (DEFINE-NEW-UNIVERSE))
		     (WHEN UNIVERSE (SETQ NAME (STRING UNIVERSE)
					  UNIVERSE (EXPAND-UNIVERSE-DESCRIPTION UNIVERSE)))))
		  ((SYMBOLP CHOICE)
		   (SETQ UNIVERSE (EXPAND-UNIVERSE-DESCRIPTION CHOICE)
			 NAME (STRING CHOICE)))
		  (T
		   (SETQ UNIVERSE CHOICE)))
	    (UNLESS NAME
	      (WHEN UNIVERSE
		(SETQ NAME (SEND UNIVERSE :NAME))))
	    (TV:RESTORE-MOUSE-POSITION-IF-NECESSARY)
	    (VALUES UNIVERSE NAME))
	(SEND *UNIVERSE-SELECTION-MENU* :DEACTIVATE)))))

;; Menu command case.  How to handle each kind of universe in Experimental mode.

(DEFMETHOD (:COMMAND SEQUENCE) (COMMAND FILTER-FUNCTION FILTER-ARG)
  (EXPAND-AND-CALL COMMAND SELF FILTER-FUNCTION FILTER-ARG T))

(DEFMETHOD (:COMMAND SINGLE-MSG-UNIVERSE) (COMMAND &REST IGNORE)
  (FUNCALL COMMAND))

(DEFMETHOD (:COMMAND HAIRY-MAPPING-MIXIN) (COMMAND FILTER-FUNCTION FILTER-ARG)
  (EXPAND-AND-CALL COMMAND SELF FILTER-FUNCTION FILTER-ARG NIL))

(DEFUN EXPAND-AND-CALL (COMMAND UNIVERSE FILTER-FUNCTION FILTER-ARG SIMPLE-SEQUENCE-P)
  (LET ((MAP-COMMAND (GET COMMAND 'ASSOCIATED-MAP-COMMAND))
	(ALL-COMMAND (GET COMMAND 'ASSOCIATED-ALL-COMMAND)))
    (COND ((AND SIMPLE-SEQUENCE-P ALL-COMMAND (EQ FILTER-FUNCTION 'MSG-TRUE-FILTER))
	   ;; Mapping over All in a sequence, just use that sequence.
	   (EXPAND-AND-CALL-INTERNAL ALL-COMMAND UNIVERSE))
	  (MAP-COMMAND
	   ;; Explicit version that does mapping itself
	   (FUNCALL MAP-COMMAND UNIVERSE FILTER-FUNCTION FILTER-ARG))
	  (ALL-COMMAND
	   (EXPAND-AND-CALL-INTERNAL
	     ALL-COMMAND
	     (MAKE-COLLECTION-FROM-FILTER UNIVERSE FILTER-FUNCTION FILTER-ARG
					  ;; If this is an actual sequence, cannot use its
					  ;; ARRAY, but can for hairy-mapping universes.
					  (IF SIMPLE-SEQUENCE-P
					      (MAKE-SEQUENCE 'COLLECTION)
					      UNIVERSE))))
	  (T
	   (BARF "That command does not take a filter argument")))))

(DEFUN EXPAND-AND-CALL-INTERNAL (COMMAND SEQUENCE)
  (LET ((*SEQUENCE* SEQUENCE)
	(*MSG* ':NO-SELECT))
    (FUNCALL COMMAND))
  ;; The command will have had this inhibited by :NO-SELECT.
  (COMPUTE-CURRENT-MSG-STATE))

;;; The basic Experimental mode command loop.
;;; ---This does not look at the background buffer, nor does it receive notifications
(DEFUN COMMAND-WITH-UNIVERSE-OR-FILTER (&AUX BUTTON-FRAME UNIVERSE-BUTTON FILTER-BUTTON
					UNIVERSE)
  (SETQ BUTTON-FRAME (SEND *ZMAIL-WINDOW* ':GET-PANE 'BUTTONS-FRAME)
	UNIVERSE-BUTTON (SEND BUTTON-FRAME ':GET-PANE 'UNIVERSE-BUTTON)
	FILTER-BUTTON (SEND BUTTON-FRAME ':GET-PANE 'FILTER-BUTTON)
	UNIVERSE (ALLOCATE-RESOURCE 'SINGLE-MSG-UNIVERSE *MSG*))
  (UNWIND-PROTECT
    (DO ((FILTER-FUNCTION 'MSG-TRUE-FILTER)
	 (FILTER-ARG NIL)
	 (CHAR))
	(NIL)
      (SETQ CHAR (EDITOR-INPUT :ANY-TYI T :NOTIFICATION NIL))
      (SETQ *LAST-COMMAND-CHAR* CHAR)
      (COND ((AND (LISTP CHAR)
		  (EQ (FIRST CHAR) ':MENU))
	     (LET ((COMMAND (SEND (FOURTH CHAR) ':EXECUTE-NO-SIDE-EFFECTS (SECOND CHAR))))
	       (SET-COMMAND-BUTTON (THIRD CHAR))
	       (DO () ((NEQ COMMAND 'COM-ZMAIL-OTHER-COMMANDS))
		 (SETQ COMMAND (CHOOSE-OTHER-COMMAND)))
	       (RETURN (SEND UNIVERSE ':COMMAND COMMAND FILTER-FUNCTION FILTER-ARG))))
	    ((AND (LISTP CHAR)
		  (EQ (FIRST CHAR) ':MOUSE-BUTTON))
	     (LET ((WINDOW (THIRD CHAR)))
	       (WHEN (OR (EQ WINDOW UNIVERSE-BUTTON) (EQ WINDOW FILTER-BUTTON))
		 (SET-COMMAND-BUTTON (SECOND CHAR))
		 (UNWIND-PROTECT
		   (CATCH-ZWEI-COMMAND-LOOP
		     (COND ((EQ WINDOW UNIVERSE-BUTTON)
			    (SETQ UNIVERSE
			      (GET-UNIVERSE-OR-FILTER-FOR-COMMAND
				'GET-UNIVERSE-FUNCTION-FOR-COMMAND WINDOW BUTTON-FRAME
				'*LAST-COMMAND-UNIVERSE* NIL '*LAST-COMMAND-UNIVERSE-NAME*
				*SEQUENCE* NIL (AND *SEQUENCE* (SEND *SEQUENCE* ':NAME))))
			    (SETQ UNIVERSE (SEND UNIVERSE ':FOLLOW-INDIRECTION)))
			   ((EQ WINDOW FILTER-BUTTON)
			    (MULTIPLE-VALUE (FILTER-FUNCTION FILTER-ARG)
			      (GET-UNIVERSE-OR-FILTER-FOR-COMMAND
				'GET-FILTER-FUNCTION-FOR-COMMAND WINDOW BUTTON-FRAME
				'*LAST-COMMAND-FILTER-FUNCTION*
				'*LAST-COMMAND-FILTER-ARG* '*LAST-COMMAND-FILTER-NAME*
				NIL NIL NIL))
			    (COND ((TYPEP UNIVERSE 'SINGLE-MSG-UNIVERSE)
				   (SETQ UNIVERSE *SEQUENCE*)
				   (SEND BUTTON-FRAME ':CHANGE-BUTTONS UNIVERSE-BUTTON
					 (SEND *SEQUENCE* ':NAME)))))))
		   (SEND WINDOW ':SET-ACCENT NIL)))))
	    (T
	     (SEND STANDARD-INPUT ':UNTYI CHAR)
	     (RETURN DIS-NONE))))
    (SEND BUTTON-FRAME ':CHANGE-BUTTONS UNIVERSE-BUTTON "Just current message"
					FILTER-BUTTON "All")))

;;; Select a universe or filter, and change the buttons and mouse documentation
;;; if we actually change anything.
(DEFUN GET-UNIVERSE-OR-FILTER-FOR-COMMAND (FUNCTION WINDOW SUPERIOR
					   FUNVAR ARGVAR NAMVAR MIDFUN MIDARG MIDNAM
					   &AUX FV AV NAME)
  (COND ((EQ *ZMAIL-COMMAND-BUTTON* ':LEFT)
	 (SETQ FV (OR (SYMEVAL FUNVAR) (BARF "There is no default for this yet."))
	       AV (SYMEVAL ARGVAR)
	       NAME (SYMEVAL NAMVAR)))
	(T
	 (IF (NEQ *ZMAIL-COMMAND-BUTTON* ':MIDDLE)
	     (MULTIPLE-VALUE (FV AV NAME)
	       (FUNCALL FUNCTION))
	     (OR MIDFUN (BARF))
	     (SETQ FV MIDFUN AV MIDARG NAME MIDNAM))
	 (OR FV (ABORT-CURRENT-COMMAND))
	 (SET FUNVAR FV)
	 (WHEN ARGVAR (SET ARGVAR AV))
	 (SET NAMVAR NAME)
	 (UPDATE-COMMAND-WHO-LINE-DOCUMENTATION FUNCTION)))
  (SEND SUPERIOR ':CHANGE-BUTTONS WINDOW NAME)
  (VALUES FV AV))

(DEFINE-ZMAIL-GLOBAL *LAST-COMMAND-UNIVERSE* NIL)
(DEFINE-ZMAIL-GLOBAL *LAST-COMMAND-UNIVERSE-NAME* NIL)

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION GET-UNIVERSE-FUNCTION-FOR-COMMAND
				       *UNIVERSE-BUTTON-DOCUMENTATION*)

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION-UPDATER GET-UNIVERSE-FUNCTION-FOR-COMMAND (STRING)
  (FORMAT STRING
	  "Change universe for next command: ~@[L: ~A; ~]M: Current mail file; R: menu."
	  *LAST-COMMAND-UNIVERSE-NAME*))

(DEFUN GET-UNIVERSE-FUNCTION-FOR-COMMAND ()
  (MULTIPLE-VALUE-BIND (UNIVERSE UNIVERSE-NAME)
      (GET-UNIVERSE-FUNCTION)
    (VALUES UNIVERSE NIL UNIVERSE-NAME)))

;;; The Survey command.  Here because Why Not?

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION COM-ZMAIL-SURVEY
  "Survey messages in typeout window:  L: all messages; M: current message's conversation; R: filter.")

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-SURVEY
				"Survey a set of messages in the typeout window.

[Survey(L)] surveys all messages in the current sequence.
[Survey(M)] surveys the messages in the current message's conversation.
[Survey(R)] surveys the messages selected by a filter chosen from the menu offered."
				(NO-MSG-OK)
  (MULTIPLE-VALUE-BIND (UNIVERSE FILTER-FUNCTION FILTER-ARG)
      (SELECTQ *ZMAIL-COMMAND-BUTTON*
	((:KBD :LEFT)
	 (VALUES *CURRENT-INDIRECT-UNIVERSE* 'MSG-TRUE-FILTER NIL))
	(:MIDDLE
	 (VALUES (MSG-CONVERSATION-COLLECTION *MSG* T) 'MSG-TRUE-FILTER NIL))
	(:RIGHT
	 (MULTIPLE-VALUE-BIND (UNIVERSE FILTER-FUNCTION FILTER-ARG)
	     (GET-FILTER-FUNCTION (RECTANGLE-NEAR-COMMAND-MENU))
	   (VALUES UNIVERSE FILTER-FUNCTION FILTER-ARG))))
    (SURVEY-FROM-FILTER UNIVERSE FILTER-FUNCTION FILTER-ARG)))

(DEFPROP COM-ZMAIL-SURVEY SURVEY-FROM-FILTER ASSOCIATED-MAP-COMMAND)

(DEFUN SURVEY-FROM-FILTER (UNIVERSE FILTER-FUNCTION FILTER-ARG &AUX *TYPEOUT-WINDOW*)
  (IF (SEND *SUMMARY-WINDOW* ':EXPOSED-P)
      (SETQ *TYPEOUT-WINDOW* (SEND *SUMMARY-WINDOW* ':TYPEOUT-WINDOW))
      (SETQ *TYPEOUT-WINDOW* (WINDOW-TYPEOUT-WINDOW *WINDOW*))
      (SEND *TYPEOUT-WINDOW* ':LINE-OUT *SUMMARY-WINDOW-LABEL*))
  (SURVEY-FROM-FILTER-1 UNIVERSE FILTER-FUNCTION FILTER-ARG))

1;;; Surveys a universe applying a specified filter --
;;;    When displaying messages that match the filter, the message number is displayed
;;;    relative to the current sequence or is left blank if the message isn't in the
;;;    current sequence.
0(DEFUN SURVEY-FROM-FILTER-1 (UNIVERSE FILTER-FUNCTION FILTER-ARG)
  (SEND *TYPEOUT-WINDOW* :OUTPUT-HOLD-EXCEPTION)	1;Make sure properly typeout exposed.
0  (TV:WINDOW-CALL-RELATIVE (*TYPEOUT-WINDOW*)		1;For 0**MORE**1 blinking.
0    (LET ((*COMTAB* *ZMAIL-COMTAB*))		1;For mouse-sensitivity at 0**MORE**1 breaks.
0      (DO-UNIVERSE (MSG UNIVERSE
			:NOTE-PROGRESS "Surveying ~A")
	(WHEN (FUNCALL FILTER-FUNCTION MSG FILTER-ARG)
	  (LET ((STATUS (ASSURE-MSG-PARSED MSG)))
	    (TRUNCATED-SENSITIVE-FORMAT MSG 'MSG *TYPEOUT-WINDOW*
					"~\ZWEI:ARROW\~:[~3@T~;~:*~3D~]~C~A~%"
					(EQ MSG *MSG*)
					(LET ((N (LOCATE-MSG-IN-SEQUENCE MSG *SEQUENCE* NIL)))
					  (WHEN N (1+ N)))
					(STATUS-LETTER STATUS) (MSG-SUMMARY-LINE MSG)))))
      (SEND *TYPEOUT-WINDOW* :LINE-OUT "Done.")))
  (CHECK-FOR-ZMAIL-TYPEOUT-WINDOW-TYPEOUT)
  DIS-NONE)

(SCL:DEFINE-PRESENTATION-TYPE MSG ()
   :NO-DEFTYPE T
   :PRINTER ((MSG STREAM)
	     (LET* ((CURRENT-INDEX (LOCATE-MSG-IN-SEQUENCE MSG *SEQUENCE* NIL))
		    (MSG-BUFFER (MSG-BUFFER MSG))
		    (BUFFER-INDEX (LOCATE-MSG-IN-SEQUENCE MSG MSG-BUFFER NIL)))
	       (COND (CURRENT-INDEX
		      (FORMAT STREAM "message #~D" (1+ CURRENT-INDEX)))
		     (BUFFER-INDEX
		      (FORMAT STREAM "message #~D in ~A"
			      (1+ BUFFER-INDEX) (SEQUENCE-NAME MSG-BUFFER)))
		     (T
		      (FORMAT STREAM "this expunged message"))))))

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* SUMMARY-LINE "Conversation"
;			  SELECT-MSG-CONVERSATION-COLLECTION NIL
;			  "Select this message's conversation.")

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SELECT-MSG-CONVERSATION-COLLECTION
			     (MSG "Select conversation containing" *ZMAIL-COMTAB*)
			     (MSG)
  `(SELECT-MSG-CONVERSATION-COLLECTION ,MSG))

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* SUMMARY-LINE "Select"
;			  SELECT-MSG-AND-POSSIBLY-BUFFER T
;			  "Select this message.")

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SELECT-MSG-AND-POSSIBLY-BUFFER
			     (MSG "Select" *ZMAIL-COMTAB*
				  :GESTURE :SELECT
				  :TESTER ((MSG &REST IGNORE)
					   (NEQ (MSG-PARSED-P MSG) :KILLED)))
			     (MSG)
  `(TYPEOUT-SELECT-MSG-AND-POSSIBLY-BUFFER ,MSG))

(DEFUN TYPEOUT-SELECT-MSG-AND-POSSIBLY-BUFFER (MSG)
  (MUST-REDISPLAY *MSG-WINDOW* (SELECT-MSG-AND-POSSIBLY-BUFFER MSG)))

(DEFUN MSG-CONVERSATION-COLLECTION (THE-MSG &OPTIONAL TEMPORARY-P)
  (LOOP WITH COLLECTION = (GET-RECYCLED-COLLECTION "<Conversation>")
	WITH ARRAY = (SEND COLLECTION :ARRAY)
	FOR MSG IN (SORT (FIND-MSGS-FROM-REFERENCES (COPYLIST (MSG-REFERENCES THE-MSG))
						    THE-MSG
						    (SELECT-UNIVERSE-FOR-REFERENCES NIL NIL)
						    T T)
			 #'MSG-DATE-SORT-LESSP)
	DO (ARRAY-PUSH-EXTEND ARRAY MSG)
	FINALLY
	  (WHEN TEMPORARY-P
	    (SETQ *SEQUENCE-LIST* (DELQ COLLECTION *SEQUENCE-LIST*)))
	  (RETURN COLLECTION)))

(DEFUN SELECT-MSG-CONVERSATION-COLLECTION (THE-MSG)
  (SELECT-SEQUENCE (MSG-CONVERSATION-COLLECTION THE-MSG)))
