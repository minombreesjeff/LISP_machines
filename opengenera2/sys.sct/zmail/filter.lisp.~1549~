;;; Lisp Machine mail reader -*- Package: ZWEI; Base: 8; Mode: LISP; Syntax: Zetalisp; -*- 
;;; These are the frames used by filtering and their commands
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION-UPDATER COM-ZMAIL-SELECT-SEQUENCE (STRING)
  (FORMAT STRING "Create//Select sequence: ~@[L: ~A; ~]M: filter; R: menu."
	  (DOLIST (MF *SEQUENCE-LIST*)
	    (OR (EQ MF *SEQUENCE*)
		(RETURN (SEND MF ':NAME))))))

(ASSOCIATE-OPTION-WITH-COMMAND-DOCUMENTATION *SEQUENCE-LIST* COM-ZMAIL-SELECT-SEQUENCE)
(ASSOCIATE-OPTION-WITH-COMMAND-DOCUMENTATION *SEQUENCE* COM-ZMAIL-SELECT-SEQUENCE)

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-SELECT-SEQUENCE
				"Selects a message sequence.
Keyboard:  Asks for a sequence name in the minibuffer.
Mouse-Left:  Selects the previously selected sequence.
Mouse-Middle:  Creates a new collection by filtering.
Mouse-Right:  Displays a menu of existing sequences, unloaded mail files,
  and special actions such as Read/Create file, Mark Survey, etc."
				(NO-SEQUENCE-OK NUMERIC-ARG-OK)
  (SET-ZMAIL-USER)
  (SELECT-SEQUENCE
    (CL:ECASE *ZMAIL-COMMAND-BUTTON*
      (:RIGHT
	(GET-SELECT-SEQUENCE))
      (:MIDDLE
	(GET-FILTER-COLLECTION))
      (:LEFT
	(OR (PREVIOUS-SEQUENCE)
	    (BARF "This is the only sequence.")))
      (:KBD
	(LET ((CHOICE (TYPEIN-LINE-ACCEPT 'SEQUENCE-OR-UNLOADED-MAIL-FILE
					  :PROMPT "Select sequence"
					  :DEFAULT (PREVIOUS-SEQUENCE))))
	  (CL:ETYPECASE CHOICE
	    (SEQUENCE CHOICE)
	    (FS:PATHNAME (LOAD-OR-CREATE-MAIL-FILE CHOICE))))))))

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-SELECT-PREVIOUS-SEQUENCE
				"Selects a previously selected message sequence.
Without a numeric argument, selects the previous sequence.
With a zero argument, displays a list of possible sequences and asks for
  a sequence name in the minibuffer.
With a positive argument, selects the Nth previous sequence.
With a negative argument, selects the Nth least recently selected sequence."
				(NO-SEQUENCE-OK NUMERIC-ARG-OK)
  (SET-ZMAIL-USER)
  (SELECT-SEQUENCE
    (COND ((NOT *NUMERIC-ARG-P*)
	   (OR (PREVIOUS-SEQUENCE)
	       (BARF "This is the only sequence.")))
	  ((ZEROP *NUMERIC-ARG*)
	   (LET ((CHOICE (TYPEIN-LINE-ACCEPT 'SEQUENCE-OR-UNLOADED-MAIL-FILE
					     :PROMPT "Select sequence"
					     :DEFAULT (PREVIOUS-SEQUENCE)
					     :INITIALLY-DISPLAY-POSSIBILITIES T)))
	     (CL:ETYPECASE CHOICE
	       (SEQUENCE CHOICE)
	       (FS:PATHNAME (LOAD-OR-CREATE-MAIL-FILE CHOICE)))))
	  (T
	   (IF (> (ABS *NUMERIC-ARG*) (LENGTH *SEQUENCE-LIST*))
	       (BARF "There are only ~D sequences." (LENGTH *SEQUENCE-LIST*))
	       (FIRST (ROTATE-TOP-OF-LIST *SEQUENCE-LIST* *NUMERIC-ARG*)))))))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; For compatibility with old 0INIT1 files.
0(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-SELECT
				"Selects a message sequence.
Mouse-Left:  Selects the previously selected sequence.
Mouse-Middle:  Creates a new collection by filtering.
Mouse-Right:  Displays a menu of existing sequences, unloaded mail files,
  and special actions such as Read/Create file, Mark Survey, etc.
Keyboard:  Without a numeric argument, selects the previous sequence.
	   With a zero argument, displays a list of possible sequences
	     an asks for a sequence name in the minibuffer.
	   With a positive argument, selects the Nth previous sequence.
	   With a negative argument, selects the Nth least recently 
	     selected sequence."
				(NO-SEQUENCE-OK NUMERIC-ARG-OK)
  (IF (EQ *ZMAIL-COMMAND-BUTTON* :KBD)
      (COM-ZMAIL-SELECT-PREVIOUS-SEQUENCE)
      (COM-ZMAIL-SELECT-SEQUENCE)))

(DEFUN PREVIOUS-SEQUENCE ()
  (DOLIST (SEQUENCE *SEQUENCE-LIST*)
    (WHEN (NEQ SEQUENCE *SEQUENCE*)
      (RETURN SEQUENCE))))

(DEFUN GET-SELECT-SEQUENCE (&OPTIONAL BUFFER-ONLY-P LOAD-VIA-BACKGROUND)
  (LET ((MENU (GET-SELECT-SEQUENCE-MENU BUFFER-ONLY-P NIL)))
    (UNWIND-PROTECT
	(TV:SAVING-MOUSE-POSITION MENU
	  (TV:EXPOSE-WINDOW-NEAR MENU (RECTANGLE-NEAR-COMMAND-MENU))
	  (DO ((SEQUENCE)
	       (DISABLE-SAVES-P NIL NIL))
	      (NIL)
	    (SETQ SEQUENCE (LET ((TV:*RESTORE-MOUSE-POSITION-AFTER-MENU-SELECTION* NIL))
			     (SEND MENU :CHOOSE)))
	    (SET-COMMAND-BUTTON (SEND MENU :LAST-BUTTONS))
	    (SELECTQ SEQUENCE
	      (:ABORT
	       (ABORT-CURRENT-COMMAND))
	      (:FILTER
	       (SEND MENU :DEACTIVATE)
	       (SETQ SEQUENCE (GET-FILTER-COLLECTION)))
	      (:MARKING
	       (SEND MENU :DEACTIVATE)
	       (SETQ SEQUENCE (MAKE-COLLECTION-BY-MARKING)))
	      ((:FIND-FILE :EXAMINE-FILE)
	       (SETQ DISABLE-SAVES-P (EQ SEQUENCE :EXAMINE-FILE))
	       (SETQ SEQUENCE (SELECT-BUFFER-FIND-FILE MENU
						       (IF DISABLE-SAVES-P "Examine file"
									   "Read file")))))
	    (WHEN (OR (STRINGP SEQUENCE) (TYPEP SEQUENCE 'FS:PATHNAME))
	      (SEND MENU :DEACTIVATE)
	      (SETQ SEQUENCE (LOAD-OR-CREATE-MAIL-FILE SEQUENCE
						       :NEAR '(:MOUSE)
						       :USE-BACKGROUND LOAD-VIA-BACKGROUND
						       :SELECT-FORMAT-AND-OPTIONS
						         (EQ *ZMAIL-COMMAND-BUTTON* :RIGHT)
						       :OPTIONS `(:DISABLE-SAVES
								   ,DISABLE-SAVES-P))))
	    (WHEN SEQUENCE
	      (TV:RESTORE-MOUSE-POSITION-IF-NECESSARY)
	      (RETURN SEQUENCE))))
      (SEND MENU :DEACTIVATE))))

(DEFUN GET-SELECT-SEQUENCE-MENU (BUFFER-ONLY-P LABEL)
  (MULTIPLE-VALUE-BIND (BUFFERS-ALIST COLLECTIONS-ALIST UNLOADED-FILES-ALIST)
      (GET-SEQUENCE-ALISTS T)
    (LET* ((SPECIAL-ACTIONS `(("Read//Create file" :VALUE :FIND-FILE
						   :STYLE (:SWISS :ITALIC :NORMAL)
						   :DOCUMENTATION
  "Read or create a file.  L: format from file type; R: select file format (and attributes if new).")
			      ("Examine file" :VALUE :EXAMINE-FILE
					      :STYLE (:SWISS :ITALIC :NORMAL)
					      :DOCUMENTATION
  "Read an existing file but reject attempts to save it.  L: format from file type; R: select file format.")
			      ,@(UNLESS BUFFER-ONLY-P
				  '(("Mark survey" :VALUE :MARKING
						   :STYLE (:SWISS :ITALIC :NORMAL)
						   :DOCUMENTATION
				"Select a collection made by clicking on the summary window.")
				    ("Filter" :VALUE :FILTER
					      :STYLE (:SWISS :ITALIC :NORMAL)
					      :DOCUMENTATION
					      "Select a collection made by filtering.")))
			      ("Abort" :VALUE :ABORT
				       :STYLE (:SWISS :ITALIC :NORMAL)
				       :DOCUMENTATION "Abort this command.")))
	   (BUFFER-FILES-MENU-ITEMS `(,@(TV:MAKE-MENU-ITEM-LIST BUFFERS-ALIST
								"Select this buffer."
								'(NIL :BOLD NIL))
				      ,@(TV:MAKE-MENU-ITEM-LIST UNLOADED-FILES-ALIST
  "Read or create this file.  L: format from file type; R: select file format (and attributes if new).")))
	   (COLLECTIONS-MENU-ITEMS (TV:MAKE-MENU-ITEM-LIST COLLECTIONS-ALIST
							   "Select this collection.")))
      (MULTIPLE-VALUE-BIND (MENU-ITEMS N-COLUMNS)
	  (IF BUFFER-ONLY-P
	      (TV:APPEND-ITEM-LISTS BUFFER-FILES-MENU-ITEMS SPECIAL-ACTIONS)
	    (TV:APPEND-ITEM-LISTS BUFFER-FILES-MENU-ITEMS
				  `(,@COLLECTIONS-MENU-ITEMS
				    ,@(IF ( (LENGTH COLLECTIONS-MENU-ITEMS) 0)
					  '(("" :NO-SELECT T)))
				    ,@SPECIAL-ACTIONS)))
	(SEND *SELECT-SEQUENCE-MENU* :SET-GEOMETRY N-COLUMNS)
	(UNLESS (EQUAL MENU-ITEMS (SEND *SELECT-SEQUENCE-MENU* :ITEM-LIST))
	  (SEND *SELECT-SEQUENCE-MENU* :SET-ITEM-LIST MENU-ITEMS))
	(SEND *SELECT-SEQUENCE-MENU* :SET-LABEL LABEL)
	*SELECT-SEQUENCE-MENU*))))

(DEFUN SELECT-BUFFER-FIND-FILE (NEAR-WINDOW &OPTIONAL (PROMPT "Read file"))
  (MAYBE-CALL-POP-UP-MINI-BUFFER-EDITOR NEAR-WINDOW
    #'ACCEPT-DEFAULTED-PATHNAME PROMPT (DEFAULT-UNLOADED-MAIL-FILE)))

(DEFUN SELECT-BUFFER-FROM-PATHNAME (PATHNAME &KEY (NEAR '(:KBD)))
  (SELECT-SEQUENCE (LOAD-OR-CREATE-MAIL-FILE PATHNAME :NEAR NEAR)))

(DEFUN GET-FILTER-COLLECTION ()
  (MULTIPLE-VALUE-BIND (UNIVERSE FILTER-FUNCTION FILTER-ARG)
      (GET-FILTER-FUNCTION)
    (MAKE-COLLECTION-FROM-FILTER UNIVERSE FILTER-FUNCTION FILTER-ARG)))

(DEFUN MAKE-COLLECTION-FROM-FILTER (UNIVERSE FILTER-FUNCTION FILTER-ARG &OPTIONAL COLLECTION)
  (WHEN (NULL COLLECTION)
    (MULTIPLE-VALUE-BIND (NAME FULL-NAME)
	(GENERATE-COLLECTION-NAME UNIVERSE FILTER-FUNCTION FILTER-ARG)
      (SETQ COLLECTION (GET-RECYCLED-COLLECTION NAME FULL-NAME))))
  (LET ((ARRAY (SEND COLLECTION :ARRAY)))
    (DO-UNIVERSE (MSG UNIVERSE :NOTE-PROGRESS "Searching ~A.")
       (WHEN (FUNCALL FILTER-FUNCTION MSG FILTER-ARG)
	 (ARRAY-PUSH-EXTEND ARRAY MSG))))
  COLLECTION)

(DEFUN (COM-ZMAIL-SELECT ASSOCIATED-MAP-COMMAND) (UNIVERSE FILTER-FUNCTION FILTER-ARG)
  (SELECT-SEQUENCE (IF (AND (EQ FILTER-FUNCTION 'MSG-TRUE-FILTER)
			    (SEND UNIVERSE ':SIMPLE-P))
		       UNIVERSE
		     (MAKE-COLLECTION-FROM-FILTER UNIVERSE FILTER-FUNCTION FILTER-ARG))))

(DEFCONST *MAX-NAME-LENGTH* 50.)
(DEFUN GENERATE-COLLECTION-NAME (UNIVERSE FILTER-FUNCTION FILTER-ARG
				     &AUX FULL-NAME NAME ADDED-NAME)
  (SETQ FULL-NAME (SEND UNIVERSE ':STRING-FOR-TEMPORARY)
	NAME FULL-NAME
	ADDED-NAME (FILTER-FUNCTION-COLLECTION-NAME FILTER-FUNCTION FILTER-ARG))
  (DO ((I 0)
       (LEN (STRING-LENGTH NAME))
       (MAXL (MAX (- *MAX-NAME-LENGTH* (STRING-LENGTH ADDED-NAME) 4) 0)))
      (( (- LEN I) MAXL)
       (OR (ZEROP I)
	   (SETQ NAME (STRING-APPEND "<...>" (SUBSTRING NAME I)))))
    (IF (SETQ I (STRING-SEARCH-SET '(#/> #/) #/} #/] #/) NAME I))
	(SETQ I (1+ I))
	(SETQ I LEN)))
  (LET ((SAME (EQ FULL-NAME NAME)))
    (SETQ NAME (STRING-APPEND NAME ADDED-NAME)
	  FULL-NAME (IF SAME NAME (STRING-APPEND FULL-NAME ADDED-NAME))))
  (VALUES NAME FULL-NAME))

(DEFUN FILTER-FUNCTION-COLLECTION-NAME (FILTER-FUNCTION FILTER-ARG
					&OPTIONAL (CHECK-OPPOSITE T))
  (LET* ((NAME-FUNCTION (GET FILTER-FUNCTION 'FILTER-FUNCTION-COLLECTION-NAME-FUNCTION))
	 (OPPOSITE-FUNCTION (AND CHECK-OPPOSITE
				 (NULL NAME-FUNCTION)
				 (GET FILTER-FUNCTION 'FILTER-FUNCTION-OPPOSITE-FUNCTION))))
    (COND (NAME-FUNCTION
	   (FUNCALL NAME-FUNCTION FILTER-ARG))
	  (OPPOSITE-FUNCTION
	   (STRING-APPEND #/~
			  (FILTER-FUNCTION-COLLECTION-NAME OPPOSITE-FUNCTION FILTER-ARG NIL)))
	  (T
	   (STRING-APPEND #/< FILTER-FUNCTION #/>)))))

(DEFUN GET-RECYCLED-COLLECTION (NAME &OPTIONAL (FULL-NAME NAME))
  ;; Make sure the name is unique
  (DO ((ORIGINAL-NAME NAME)
       (COUNT 1 (1+ COUNT)))
      ((NOT (GET-MAIL-BUFFER-FROM-NAME NAME)))
    (SETQ NAME (FORMAT NIL "~A-~D" ORIGINAL-NAME COUNT)))
  (MAKE-NEW-COLLECTION NAME FULL-NAME))
  
(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-MARK-SURVEY
				"Create a collection by marking summary lines.
Mark messages by clicking on them in the summary window or by keyboard commands.
HELP gives a full description of commands; 
END finishes and selects the collection; ABORT aborts." ()
  (SELECT-SEQUENCE (MAKE-COLLECTION-BY-MARKING))
  DIS-TEXT)

(DEFVAR *ZMAIL-MARK-SURVEY-TYPEIN-PROMPT*
  "~:|Mark messages for a collection by clicking on them in the summary window or by keyboard~@
   commands.  ~C gives a full description of commands;  ~C finishes and selects the~@
   collection;  ~C aborts.")

(DEFVAR *ZMAIL-MARK-SURVEY-HELP-TEXT*
 "
You are marking messages to make a new collection, either by mouse clicks
  on the summary window, or by keyboard commands.  The commands are:

    Mouse-L   Space      Toggle marking of current message for inclusion in the collection.
              c-M        Mark all messages for inclusion in the collection.
              c-sh-M     Unmark all messages for inclusion in the collection.

              c-N        Move summary cursor forward to next message.
              c-sh-N     Toggle marking of current message and move cursor to next message.
              c-P        Move summary cursor backward to previous message.
              c-sh-P     Toggle marking of current message and move cursor to previous message.

              c-V, 
               c-m-V     Scroll summary window forward.   [Use the summary window scroll bars]
              m-V,
               c-m-sh-V  Backward scroll summary window.  [ to scroll with the mouse.        ]

              Help       Print this text.
    Mouse-M   Abort      Abort the mark survey operation.
    Mouse-R   End        Finish marking and select the marked collection.
")

(DEFUN MAKE-COLLECTION-BY-MARKING ()
  (UNLESS *SEQUENCE*
    (BARF "There is no current sequence."))
  (LET ((OLD-CONFIG *WINDOW-CONFIGURATION*)
	(OLD-DOC (SEND *SUMMARY-WINDOW* :WHO-LINE-OVERRIDE-DOCUMENTATION-STRING))
	(*MODE-LINE-LIST* `("Zmail " "Marking " *ZMAIL-SEQUENCE-NAME*
			    ,(FORMAT NIL "  ~C to finish; ~C to abort." #\END #\ABORT)
			    (*MACRO-LEVEL* "  Macro-level: " *MACRO-LEVEL*)))
	(NMSGS (SEND *SEQUENCE* :NMSGS))
	(ARRAY (SEND *SEQUENCE* :ARRAY))
	*MARK-SURVEY-MSG-LIST*
	*MARK-SURVEY-CURRENT-MSG-NO*
	ERROR)
    (LABELS ((MARK-ALL-MESSAGES ()
	       (SETQ *MARK-SURVEY-MSG-LIST* NIL)
	       (DO-UNIVERSE (MSG *SEQUENCE*)
		 (PUTPROP (ASSURE-MSG-PARSED MSG) T 'MARKED)
		 (PUSH MSG *MARK-SURVEY-MSG-LIST*)
		 (SEND *SUMMARY-WINDOW* :NEED-TO-REDISPLAY-MSG MSG)))
	     (UNMARK-ALL-MESSAGES (&OPTIONAL FORCE-REDISPLAY)
	       (DO-UNIVERSE (MSG *SEQUENCE* :PARSING NIL :NO-PREPARE T)
		 (LET ((STATUS (LOCF (MSG-STATUS MSG))))
		   (WHEN (GETL STATUS '(MARKED))
		     (PUTPROP STATUS NIL 'MARKED)
		     (WHEN FORCE-REDISPLAY
		       (SEND *SUMMARY-WINDOW* :NEED-TO-REDISPLAY-MSG MSG)))))
	       (SETQ *MARK-SURVEY-MSG-LIST* NIL))
	     (SET-*MARK-SURVEY-CURRENT-MSG* (MSG)
	       (UNLESS (EQ MSG *MARK-SURVEY-CURRENT-MSG*)
		 (SETQ *MARK-SURVEY-CURRENT-MSG* MSG)
		 (SETQ *MARK-SURVEY-CURRENT-MSG-NO* (MSG-DISPLAYED-INDEX MSG))
		 (SEND *SUMMARY-WINDOW* :SET-CURRENT-MSG MSG)))
	     (TOGGLE-MSG-MARKED-STATE (MSG)
	       (LET ((STATUS (ASSURE-MSG-PARSED MSG)))
		 (IF (PUTPROP STATUS (NOT (GET STATUS 'MARKED)) 'MARKED)
		     (PUSH MSG *MARK-SURVEY-MSG-LIST*)
		   (SETQ *MARK-SURVEY-MSG-LIST* (DELQ MSG *MARK-SURVEY-MSG-LIST*)))
		 (SEND *SUMMARY-WINDOW* :NEED-TO-REDISPLAY-MSG MSG)))
	     (MOVE-MARK-SURVEY-CURRENT-MSG (N)
	       (LET ((NEW-NO (MAX 0 (MIN (1- NMSGS) (+ N *MARK-SURVEY-CURRENT-MSG-NO*)))))
		 (SET-*MARK-SURVEY-CURRENT-MSG* (AREF ARRAY NEW-NO)))))
      (UNWIND-PROTECT
	  (PROGN
	    (SEND *SUMMARY-WINDOW* :SET-WHO-LINE-OVERRIDE-DOCUMENTATION-STRING
		  "L: Complement marked state of message;  M: Abort;  R: Finish and select")
	    (TYPEIN-LINE *ZMAIL-MARK-SURVEY-TYPEIN-PROMPT* #\Help #\End #\Abort)
	    (UNMARK-ALL-MESSAGES)
	    (SET-*MARK-SURVEY-CURRENT-MSG* *MSG*)
	    (SEND *SUMMARY-WINDOW* :NEED-TO-REDISPLAY-MSG *MSG*)
	    (UNLESS (MEMQ OLD-CONFIG *SUMMARY-WINDOW-CONFIGURATIONS*)
	      (SEND *ZMAIL-WINDOW* :SET-WINDOW-CONFIGURATION :SUMMARY))
	    (LOOP NAMED MARK-FROM-SUMMARY
		  DO (REDISPLAY-MODE-LINE)
		     (SEND *SUMMARY-WINDOW* :REDISPLAY-AS-NECESSARY)
		  FOR CH = (SEND STANDARD-INPUT :ANY-TYI)
		  DO
	      (COND ((AND (LISTP CH) (EQ (FIRST CH) 'SUMMARY-MOUSE)
			  (SELECTOR (FOURTH CH) CL:EQUALP
			    (#\Mouse-L T)
			    (#\Mouse-M
			     (SETQ CH #\ABORT)
			     NIL)
			    (#\Mouse-R
			     (SETQ CH #\End)
			     NIL)
			    (OTHERWISE NIL)))
		     (SET-*MARK-SURVEY-CURRENT-MSG* (CADADR CH))
		     (TOGGLE-MSG-MARKED-STATE *MARK-SURVEY-CURRENT-MSG*))
		    ((AND (LISTP CH)
			  (MEMQ (FIRST CH)
				'(SELECT-WINDOW
				  DW::WINDOW-WAKEUP-SELECT
				  DW::WINDOW-WAKEUP-EXPOSE
				  DW::WINDOW-WAKEUP-REFRESH
				  DW::WINDOW-WAKEUP-REDISPLAY
				  DW::WINDOW-WAKEUP-VIEWPORT-POSITION-CHANGED))))
		    ((OR (LISTP CH) (EQUAL CH #\End))
		     (UNLESS (EQUAL CH #\End) (SEND STANDARD-INPUT :UNTYI CH))
		     (IF *MARK-SURVEY-MSG-LIST*
			 (LET ((COLLECTION
				 (GET-RECYCLED-COLLECTION
				   (STRING-APPEND (SEND *SEQUENCE* :NAME) "<Marked>"))))
			   (LET ((ARRAY (SEND COLLECTION :ARRAY)))
			     (DOLIST (MSG (NREVERSE *MARK-SURVEY-MSG-LIST*))
			       (ARRAY-PUSH-EXTEND ARRAY MSG)))
			   (RETURN-FROM MARK-FROM-SUMMARY COLLECTION))
		       (SETQ ERROR "No messages marked.")
		       (RETURN-FROM MARK-FROM-SUMMARY NIL)))
		    ((EQUAL CH #\Space)
		     (TOGGLE-MSG-MARKED-STATE *MARK-SURVEY-CURRENT-MSG*))
		    ((EQUAL CH #\c-M)
		     (MARK-ALL-MESSAGES))
		    ((EQUAL CH #\c-sh-M)
		     (UNMARK-ALL-MESSAGES T))
		    ((EQUAL CH #\c-N)
		     (MOVE-MARK-SURVEY-CURRENT-MSG 1))
		    ((EQUAL CH #\c-sh-N)
		     (TOGGLE-MSG-MARKED-STATE *MARK-SURVEY-CURRENT-MSG*)
		     (MOVE-MARK-SURVEY-CURRENT-MSG 1))
		    ((EQUAL CH #\c-P)
		     (MOVE-MARK-SURVEY-CURRENT-MSG -1))
		    ((EQUAL CH #\c-sh-P)
		     (TOGGLE-MSG-MARKED-STATE *MARK-SURVEY-CURRENT-MSG*)
		     (MOVE-MARK-SURVEY-CURRENT-MSG -1))
		    ((MEM #'EQUAL CH '(#\c-m-V #\c-V))
		     (SCROLL-SUMMARY-WINDOW-INTERNAL :RELATIVE 1 :SCREENS)
		     (LET ((TOP-ITEM-DISTANCE
			     (- (SYS:EVAL-IN-INSTANCE *SUMMARY-WINDOW* 'TV:TOP-ITEM)
				*MARK-SURVEY-CURRENT-MSG-NO*)))
		       (WHEN (PLUSP TOP-ITEM-DISTANCE)
			 (MOVE-MARK-SURVEY-CURRENT-MSG TOP-ITEM-DISTANCE))))
		    ((MEM #'EQUAL CH '(#\c-m-sh-V #\m-V))
		     (SCROLL-SUMMARY-WINDOW-INTERNAL :RELATIVE -1 :SCREENS)
		     (LET ((BOTTOM-ITEM-DISTANCE
			     (- (SYS:EVAL-IN-INSTANCE *SUMMARY-WINDOW* 'TV:BOTTOM-ITEM)
				*MARK-SURVEY-CURRENT-MSG-NO*)))
		       (WHEN (MINUSP BOTTOM-ITEM-DISTANCE)
			 (MOVE-MARK-SURVEY-CURRENT-MSG BOTTOM-ITEM-DISTANCE))))
		    ((EQUAL CH #\Help)
		     (FORMAT T *ZMAIL-MARK-SURVEY-HELP-TEXT*)
		     (WHEN (EQ *WINDOW-CONFIGURATION* :SUMMARY)
		       (SEND STANDARD-INPUT :ANY-TYI)))	1;Wait for signal to proceed.
0		    ((MEM #'EQUAL CH '(#\Abort #/c-]))
		     (ABORT-CURRENT-COMMAND))
		    (T
		     (BEEP)))))
	(SEND *SUMMARY-WINDOW* :SET-WHO-LINE-OVERRIDE-DOCUMENTATION-STRING OLD-DOC)
	(UNMARK-ALL-MESSAGES)
	(SETQ *MARK-SURVEY-CURRENT-MSG* NIL)
	(TYPEIN-LINE "~:|")
	(SEND *TYPEOUT-WINDOW* :MAKE-COMPLETE)
	(SEND *SUMMARY-WINDOW* :SET-CURRENT-MSG *MSG*)
	(SEND *SUMMARY-WINDOW* :NEED-FULL-REDISPLAY)
	(UNLESS (EQ OLD-CONFIG *WINDOW-CONFIGURATION*)
	  (SEND *ZMAIL-WINDOW* :SET-WINDOW-CONFIGURATION OLD-CONFIG)
	  (SEND *ZMAIL-WINDOW* :REDISPLAY))
	(WHEN ERROR (BARF ERROR))))))

(DEFINE-ZMAIL-GLOBAL *LAST-GOTO-FILTER-FUNCTION* NIL)
(DEFINE-ZMAIL-GLOBAL *LAST-GOTO-FILTER-ARG* NIL)

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION-UPDATER COM-ZMAIL-GOTO (STRING)
  (APPEND-TO-ARRAY STRING "Select message by ")
  (COND (*LAST-GOTO-FILTER-FUNCTION*
	 (APPEND-TO-ARRAY STRING "L: searching: ")
	 (APPEND-TO-ARRAY STRING (FILTER-FUNCTION-COLLECTION-NAME *LAST-GOTO-FILTER-FUNCTION*
								  *LAST-GOTO-FILTER-ARG*))
	 (APPEND-TO-ARRAY STRING "; ")))
  (APPEND-TO-ARRAY STRING "M: popping point pdl; R: searching using any filter."))

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-GOTO
  "Search for a message fitting a particular filter.
Left default to last filter used.  Middle gives a menu of recent messages.
Right to specify the filter."
				()
  (IF (EQ *ZMAIL-COMMAND-BUTTON* :MIDDLE)
      (COM-ZMAIL-MOUSE-POINT-PDL)
    (USING-RESOURCE (DEFAULT-UNIVERSE REST-OF-SEQUENCE-UNIVERSE *SEQUENCE* T)
      (LET ((UNIVERSE DEFAULT-UNIVERSE)
	    (FILTER-FUNCTION *LAST-GOTO-FILTER-FUNCTION*)
	    (FILTER-ARG *LAST-GOTO-FILTER-ARG*))
	(IF (NEQ *ZMAIL-COMMAND-BUTTON* :RIGHT)
	    (UNLESS FILTER-FUNCTION (BARF "There is no default for this command yet."))
	  (MULTIPLE-VALUE (UNIVERSE FILTER-FUNCTION FILTER-ARG)
	    (GET-FILTER-FUNCTION-1
	      UNIVERSE (SEND UNIVERSE :NAME) (RECTANGLE-NEAR-COMMAND-MENU)))
	  (SETQ *LAST-GOTO-FILTER-FUNCTION* FILTER-FUNCTION
		*LAST-GOTO-FILTER-ARG* FILTER-ARG)
	  (UPDATE-COMMAND-WHO-LINE-DOCUMENTATION 'COM-ZMAIL-GOTO))
	(SELECT-MSG-FROM-FILTER UNIVERSE FILTER-FUNCTION FILTER-ARG)))))

(DEFUN SELECT-MSG-FROM-FILTER (UNIVERSE FILTER-FUNCTION FILTER-ARG)
  (DO-UNIVERSE (MSG UNIVERSE
		    :NOTE-PROGRESS "Searching ~A.")
    (WHEN (FUNCALL FILTER-FUNCTION MSG FILTER-ARG)
      (RETURN-FROM SELECT-MSG-FROM-FILTER (SELECT-MSG-AND-POSSIBLY-BUFFER MSG))))
  (BARF "No more messages of type ~A in ~A."
	(FILTER-FUNCTION-COLLECTION-NAME FILTER-FUNCTION FILTER-ARG)
	UNIVERSE))

(DEFUN (COM-ZMAIL-NEXT ASSOCIATED-MAP-COMMAND) (UNIVERSE FILTER-FUNCTION FILTER-ARG)
  (IF (SEND UNIVERSE :SIMPLE-P)
      (USING-RESOURCE (REST-UNIVERSE REST-OF-SEQUENCE-UNIVERSE UNIVERSE T)
	(SELECT-MSG-FROM-FILTER REST-UNIVERSE FILTER-FUNCTION FILTER-ARG))
    (SELECT-MSG-FROM-FILTER UNIVERSE FILTER-FUNCTION FILTER-ARG)))

(DEFUN (COM-ZMAIL-PREVIOUS ASSOCIATED-MAP-COMMAND) (UNIVERSE FILTER-FUNCTION FILTER-ARG)
  (IF (SEND UNIVERSE :SIMPLE-P)
      (USING-RESOURCE (BEGINNING-UNIVERSE BEGINNING-OF-SEQUENCE-UNIVERSE UNIVERSE T)
	(SELECT-MSG-FROM-FILTER BEGINNING-UNIVERSE FILTER-FUNCTION FILTER-ARG))
    (SELECT-MSG-FROM-FILTER UNIVERSE FILTER-FUNCTION FILTER-ARG)))

(DEFVAR *SYSTEM-FILTER-ALIST* 
  '(("Answered" :VALUE ANSWERED :DOCUMENTATION "Messages to which replies have been sent.")
    ("Current" :BUTTONS (:CURRENT :CURRENT-ON-DAY NIL)
	       :DOCUMENTATION "Messages current on a given day.  L: Today; M: Ask for day.")
    ("Digest" :VALUE :DIGEST :DOCUMENTATION "Messages which are in digest format.")
    ("Deleted" :VALUE DELETED :DOCUMENTATION "Messages marked as deleted.")
    ("Expired" :VALUE :EXPIRED :DOCUMENTATION "Messages that have expired.")
    ("Filed" :VALUE FILED :DOCUMENTATION "Messages that have been moved into another file.")
    ("Recent" :VALUE RECENT :DOCUMENTATION "Messages read in since last expunge.")
    ("Search" :VALUE :SEARCH :DOCUMENTATION "Messages containing a given string.")
    ("Unseen" :VALUE UNSEEN :DOCUMENTATION "Messages never displayed before.")))

(DEFVAR *FILTER-SELECTION-ADDITIONAL-SYSTEM-FILTERS-ALIST*
  '(("Author" :VALUE :SENDER :DOCUMENTATION "Messages sent by a given address.")
    ("Author//Recipient" :VALUE :SENDER-OR-RECIPIENT
			 :DOCUMENTATION "Messages sent or received by a given address.")
    ("Date" :BUTTONS (:BEFORE-DATE :ON-DATE :AFTER-DATE)
	    :DOCUMENTATION "Messages relative to a given date.  L: Before; M: On; R: After.")
    ("Recipient" :VALUE :RECIPIENT :DOCUMENTATION "Messages received by a given address.")
    ("Subject" :BUTTONS (:SUBJECT-SEARCH :SUBJECT-MATCH NIL)
	       :DOCUMENTATION "Messages with a given subject.  L: Search; M: Exact match.")))

(DEFVAR *HEADER-FILTER-MENU-ALIST*
  '(("Author" :VALUE :SENDER :DOCUMENTATION "Messages sent by a given address.")
    ("Author//Recipient" :VALUE :SENDER-OR-RECIPIENT
			 :DOCUMENTATION "Messages sent or received by a given address.")
    ("Recipient" :VALUE :RECIPIENT :DOCUMENTATION "Messages received by a given address.")
    ("Subject" :VALUE :SUBJECT
	       :DOCUMENTATION "Messages whose subject contains a given string.")
    ("Other" :VALUE :OTHER
	     :STYLE (:SWISS :BOLD-ITALIC :NORMAL)
	     :DOCUMENTATION "Messages with a given string in an arbitrary header field.")))

(DEFVAR *DATE-FILTER-MENU-ALIST*
  '(("Before" :VALUE :BEFORE :DOCUMENTATION "Messages sent before a specific date and time.")
    ("On" :VALUE :ON :DOCUMENTATION "Messages sent on a specific date.")
    ("After" :VALUE :AFTER :DOCUMENTATION "Messages sent after a specific date and time.")))

(DEFFLAVOR ZMAIL-COMMAND-MENU-PANE
	()
	TV:(WHITESPACE-PANE-MIXIN PANE-MIXIN COMMAND-MENU-MIXIN BASIC-MENU
	    TOP-LABEL-MIXIN BORDERS-MIXIN BASIC-SCROLL-BAR MINIMUM-WINDOW)
  (:DEFAULT-INIT-PLIST :COLUMNS 1 :BORDERS 2 :LABEL NIL
		       :DEFAULT-STYLE '(:SWISS :BOLD :NORMAL)))

(DEFFLAVOR FILTER-SELECTION-FRAME () (TV:TEMPORARY-WINDOW-MIXIN
				      TV:STREAM-MIXIN TV:BORDERS-MIXIN
				      TV:ITEM-LIST-PANE-KLUDGE TV:FRAME-WITH-XOR-BUTTONS
				      TV:CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER
				      TV:MINIMUM-WINDOW))
(DEFMETHOD (:INIT FILTER-SELECTION-FRAME :BEFORE) (IGNORE)
  (SETQ TV:PANES `((UNIVERSE-BUTTON TV:BIG-BUTTON-WITH-TOP-OUTSIDE-LABEL-PANE
				    :LABEL "Universe:"
				    :DOCUMENTATION 
		      "Give a menu of universes, sequences, and universe creation techniques.")
		   (NOT-BUTTON TV:BUTTON-PANE :NAME "Not"
					      :DOCUMENTATION "Toggle negation of filter.")
		   (KEYWORD-MENU ZMAIL-COMMAND-MENU-PANE :ITEM-LIST NIL :LABEL "Keywords:")
		   (SYSTEM-FILTER-MENU ZMAIL-COMMAND-MENU-PANE
		     :ITEM-LIST ,`(("All" :VALUE :ALL
					  :STYLE (:SWISS :BOLD-ITALIC :NORMAL)
					  :DOCUMENTATION "All messages in this universe.")
				   ,@(CL:SORT
				       (CL:CONCATENATE 'LIST
					 *SYSTEM-FILTER-ALIST*
					 *FILTER-SELECTION-ADDITIONAL-SYSTEM-FILTERS-ALIST*)
				       #'STRING-LESSP :KEY #'FIRST)))
		   (USER-FILTER-MENU ZMAIL-COMMAND-MENU-PANE :ITEM-LIST NIL :LABEL "Filters:")
		   (ABORT-BUTTON TV:BUTTON-PANE :NAME "Abort"
						:DOCUMENTATION "Abort this command."))
	TV:CONSTRAINTS
	      (LIST (FILTER-SELECTION-FRAME-MAKE-CONSTRAINT 'WITH T)
		    (FILTER-SELECTION-FRAME-MAKE-CONSTRAINT 'WITHOUT NIL))))

(DEFUN FILTER-SELECTION-FRAME-MAKE-CONSTRAINT (NAME UNIVERSE-P)
  `(,NAME . ((WHOLE-THING)
	     ((WHOLE-THING :HORIZONTAL (:EVEN)
	       (WHOLE)
	       ((WHOLE TV:WHITE-INCLUDE-WHITESPACE	;Vert
		 (0.95) (:EVEN)
		 (,@(AND UNIVERSE-P '(UNIVERSAL)) MENUS CONTROLS)
		 ,@(AND UNIVERSE-P
			'(((UNIVERSAL TV:SINGLE-PANE-IN-WHITESPACE UNIVERSE-BUTTON))))
		 ((CONTROLS TV:SINGLE-PANE-IN-WHITESPACE ABORT-BUTTON))
		 ((MENUS TV:WHITE-INCLUDE-WHITESPACE	;Horiz
			 (:ASK-WINDOW SELF :MENUS-SIZE) (:EVEN)
			 (KEYWORD-MENUX SYSTEM-FILTER-AND-BUTTON USER-FILTER-MENUX)
			 ((KEYWORD-MENUX TV:SINGLE-PANE-IN-WHITESPACE KEYWORD-MENU))
			 ((USER-FILTER-MENUX TV:SINGLE-PANE-IN-WHITESPACE USER-FILTER-MENU))
			 ((SYSTEM-FILTER-AND-BUTTON TV:PANES-IN-WHITESPACE
			   (:ASK-WINDOW SYSTEM-FILTER-MENU :PANE-SIZE)
			   (NOT-BUTTON SYSTEM-FILTER-MENU))))))))))))

(DEFMETHOD (:MENUS-SIZE FILTER-SELECTION-FRAME) (&REST ARGS)
  (MAX (LEXPR-SEND SELF ':SEND-PANE 'KEYWORD-MENU ':PANE-SIZE ARGS)
       (// (* (+ (LEXPR-SEND SELF ':SEND-PANE 'NOT-BUTTON ':PANE-SIZE ARGS)
		 (LEXPR-SEND SELF ':SEND-PANE 'SYSTEM-FILTER-MENU ':PANE-SIZE ARGS))
	      12.) 10.)
       (LEXPR-SEND SELF ':SEND-PANE 'USER-FILTER-MENU ':PANE-SIZE ARGS)))

(DEFMETHOD (:COMPUTE-GEOMETRY FILTER-SELECTION-FRAME) (UNIVERSE-NAME
						       KEYWORD-ALIST USER-FILTER-ALIST)
  (LET* ((MAX-WIDTH TV:(- (SHEET-INSIDE-WIDTH SUPERIOR) LEFT-MARGIN-SIZE RIGHT-MARGIN-SIZE))
	 (MAX-HEIGHT TV:(- (SHEET-INSIDE-HEIGHT SUPERIOR) TOP-MARGIN-SIZE BOTTOM-MARGIN-SIZE))
	 (NEW-CONFIGURATION (IF UNIVERSE-NAME 'WITH 'WITHOUT))
	 (FILTERS-CHANGED
	   (SEND SELF :SET-PANES-ITEM-LIST 'USER-FILTER-MENU USER-FILTER-ALIST))
	 (KEYWORDS-CHANGED (SEND SELF :SET-PANES-ITEM-LIST 'KEYWORD-MENU KEYWORD-ALIST))
	 (FRAME-CHANGED (OR (NEQ NEW-CONFIGURATION TV:CONFIGURATION)
			    FILTERS-CHANGED
			    KEYWORDS-CHANGED
			    (< MAX-WIDTH (TV:SHEET-INSIDE-WIDTH))
			    (< MAX-HEIGHT (TV:SHEET-INSIDE-HEIGHT)))))
    (WHEN UNIVERSE-NAME
      (SEND SELF :SET-PANES-NAME 'UNIVERSE-BUTTON UNIVERSE-NAME))
    (WHEN FRAME-CHANGED
      (LET ((NEW-WIDTH (MIN MAX-WIDTH
			    (// (* (MAX (SEND SELF :SEND-PANE 'UNIVERSE-BUTTON
						   :PANE-SIZE MAX-WIDTH MAX-HEIGHT
							      NIL NIL :HORIZONTAL)
					(+ (SEND SELF :SEND-PANE 'KEYWORD-MENU
						      :PANE-SIZE MAX-WIDTH MAX-HEIGHT
								 NIL NIL :HORIZONTAL)
					   (SEND SELF :SEND-PANE 'SYSTEM-FILTER-MENU
						      :PANE-SIZE MAX-WIDTH MAX-HEIGHT
								 NIL NIL :HORIZONTAL)
					   (SEND SELF :SEND-PANE 'USER-FILTER-MENU
						      :PANE-SIZE MAX-WIDTH MAX-HEIGHT
								 NIL NIL :HORIZONTAL))
					(SEND SELF :SEND-PANE 'ABORT-BUTTON
						   :PANE-SIZE MAX-WIDTH MAX-HEIGHT
							      NIL NIL :HORIZONTAL))
				   15.) 10.)))
	    (NEW-HEIGHT (MIN MAX-HEIGHT
			     (// (* (+ (SEND SELF :SEND-PANE 'UNIVERSE-BUTTON
						  :PANE-SIZE MAX-WIDTH MAX-HEIGHT
							     NIL NIL :VERTICAL)
				       (SEND SELF :MENUS-SIZE MAX-WIDTH MAX-HEIGHT
							      NIL NIL :VERTICAL)
				       (SEND SELF :SEND-PANE 'ABORT-BUTTON
						  :PANE-SIZE MAX-WIDTH MAX-HEIGHT
							     NIL NIL :VERTICAL))
				    12.) 10.))))
	(UNLESS (AND (= NEW-WIDTH (TV:SHEET-INSIDE-WIDTH))
		     (= NEW-HEIGHT (TV:SHEET-INSIDE-HEIGHT)))
	  (SEND SELF :SET-INSIDE-SIZE NEW-WIDTH NEW-HEIGHT))
	(SEND SELF :SET-CONFIGURATION NEW-CONFIGURATION)))))

(DEFUN GET-FILTER-FUNCTION (&OPTIONAL (NEAR-MODE '(:MOUSE)))
  (DECLARE (VALUES UNIVERSE FILTER-FUNCTION FILTER-ARG))
  (OR *SEQUENCE* (BARF "There is no current sequence"))
  (GET-FILTER-FUNCTION-1 *SEQUENCE* (SEND *SEQUENCE* ':NAME) NEAR-MODE))

(DEFUN GET-FILTER-FUNCTION-1 (UNIVERSE NAME NEAR-MODE &AUX FILTER-FUNCTION FILTER-ARG NOT-P)
  (DECLARE (VALUES UNIVERSE FILTER-FUNCTION FILTER-ARG))
  (WHEN *KEYWORD-ALIST-SORT-PREDICATE*		; make it pretty
    (SETQ *KEYWORD-ALIST*
	  (SORTCAR *KEYWORD-ALIST*		;compensate for old spazz in predicate alist
		   (EVAL (EVAL *KEYWORD-ALIST-SORT-PREDICATE*)))))
  (WHEN *FILTER-ALIST-SORT-PREDICATE*
    (SETQ *USER-FILTER-ALIST* (CL:SORT *USER-FILTER-ALIST*
				       (EVAL *FILTER-ALIST-SORT-PREDICATE*)
				       :KEY #'FIRST)))
  (SEND *FILTER-SELECTION-FRAME* :COMPUTE-GEOMETRY NAME
	(APPEND '(("Any" :VALUE ANY
		   :STYLE (:SWISS :BOLD-ITALIC :NORMAL)
		   :DOCUMENTATION "Messages with any keyword on them."))
		*KEYWORD-ALIST*
		NIL)				;Use a copy of the keyword-alist.
	(APPEND *USER-FILTER-ALIST*
		'(("New filter" :VALUE :NEW-FILTER
		   :STYLE (:SWISS :BOLD-ITALIC :NORMAL)
		   :DOCUMENTATION "Define and use a new filter."))))
  (SEND *FILTER-SELECTION-FRAME* :TURN-OFF-ACCENTS)
  (UNWIND-PROTECT
    (TV:SAVING-MOUSE-POSITION *FILTER-SELECTION-FRAME*
      (TV:EXPOSE-WINDOW-NEAR *FILTER-SELECTION-FRAME* NEAR-MODE)
      (LOOP AS CHAR = (SEND *FILTER-SELECTION-FRAME* :ANY-TYI) DOING
	(IF (NLISTP CHAR)
	    (TV:BEEP)
	    (SELECTQ (FIRST CHAR)
	      (:MOUSE-BUTTON
	       (LET* ((WINDOW (THIRD CHAR))
		      (WINDOW-NAME (SEND *FILTER-SELECTION-FRAME* :PANE-NAME WINDOW)))
		 (UNLESS (NULL WINDOW-NAME)
		   (UNWIND-PROTECT
		       (SELECTQ WINDOW-NAME
			 (ABORT-BUTTON (ABORT-CURRENT-COMMAND))
			 (NOT-BUTTON)
			 (UNIVERSE-BUTTON
			  (MULTIPLE-VALUE-BIND (NEW-UNIVERSE NEW-NAME)
			      (GET-UNIVERSE-FUNCTION
				`(:WINDOW ,*FILTER-SELECTION-FRAME*)
				"Select the universe in which to apply the filter:"
				"Resume selecting a filter without changing the universe.")
			    (AND NEW-UNIVERSE
				 (SETQ UNIVERSE NEW-UNIVERSE
				       NAME NEW-NAME)))
			  (SEND *FILTER-SELECTION-FRAME* :SET-PANES-NAME
				'UNIVERSE-BUTTON NAME))
			 (OTHERWISE (FERROR NIL "~S is not a known window" (THIRD CHAR))))
		     (SEND WINDOW :SET-ACCENT (AND (EQ WINDOW-NAME 'NOT-BUTTON)
						   (SETQ NOT-P (NOT NOT-P))))))))
	      (:MENU
	       (SETQ FILTER-ARG (SEND (FOURTH CHAR) :EXECUTE-NO-SIDE-EFFECTS (SECOND CHAR)))
	       (SELECTQ (SEND *FILTER-SELECTION-FRAME* :PANE-NAME (FOURTH CHAR))
		 (KEYWORD-MENU
		  (SETQ FILTER-FUNCTION
		    (SELECTQ FILTER-ARG
		      (ANY
		       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-KEYWORDS-P NOT-P))
		      (OTHERWISE
		       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-KEYWORD-P NOT-P)))))
		 (SYSTEM-FILTER-MENU
		  (SETQ FILTER-FUNCTION
		    (SELECTQ FILTER-ARG
		      (:ALL (FILTER-PREDICATE-OR-OPPOSITE 'MSG-TRUE-FILTER NOT-P))
		      (:SEARCH
		       (SEND *FILTER-SELECTION-FRAME* :DEACTIVATE)
		       (MULTIPLE-VALUE-BIND (FUN KEY)
			   (ZMAIL-GET-FILTER-SEARCH-FUNCTION-AND-ARG NOT-P)
			 (SETQ FILTER-ARG KEY)
			 FUN))
		      ((:RECIPIENT :SENDER :SENDER-OR-RECIPIENT)
		       (SEND *FILTER-SELECTION-FRAME* :DEACTIVATE)
		       (LET ((PROMPT (SELECTQ FILTER-ARG
				       (:RECIPIENT "Recipient")
				       (:SENDER "Author")
				       (:SENDER-OR-RECIPIENT "Author//Recipient")))
			     (FUNCTION))
			 (MULTIPLE-VALUE (FUNCTION FILTER-ARG)
			   (CHOOSE-OR-READLINE-ADDRESS FILTER-ARG PROMPT NOT-P))
			 FUNCTION))
		      ((:SUBJECT-SEARCH :SUBJECT-MATCH)
		       (SEND *FILTER-SELECTION-FRAME* :DEACTIVATE)
		       (IF (EQ FILTER-ARG :SUBJECT-MATCH)
			   (LET ((SUBJ (CHOOSE-MSG-OR-READLINE "Subject match")))
			     (SETQ FILTER-ARG
				   (IF (STRINGP SUBJ)
				       SUBJ
				       (SUBJECT-TO-STRING (GET-MSG-SUBJECT-CLEVERLY SUBJ))))
			     (SETQ *ZMAIL-FIND-DEFAULT* FILTER-ARG)  ;force right filter name
			     (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-SUBJECT-STRING NOT-P))
			   (MULTIPLE-VALUE-BIND (FUN KEY)
			       (ZMAIL-GET-FILTER-SUBJECT-SEARCH-FUNCTION-AND-ARG NOT-P)
			     (SETQ FILTER-ARG KEY)
			     FUN)))
		      ((:BEFORE-DATE :ON-DATE :AFTER-DATE)
		       (SEND *FILTER-SELECTION-FRAME* :DEACTIVATE)
		       (LET ((DATE (CHOOSE-MSG-OR-READLINE
				     (SELECTQ FILTER-ARG
				       (:BEFORE-DATE "Before date")
				       (:AFTER-DATE "After date")
				       (:ON-DATE "On date")))))
			 (IF (STRINGP DATE)
			     (SETQ DATE (BARF-ON-ERRORS (TIME:PARSE-ERROR)
					  (TIME:PARSE-UNIVERSAL-TIME DATE 0 NIL NIL)))
			   (SETQ DATE (MSG-GET-DATE DATE)))
			 (WHEN (AND NOT-P (MEMQ FILTER-ARG '(:BEFORE-DATE :AFTER-DATE)))
			   (SETQ NOT-P NIL
				 FILTER-ARG (IF (EQ FILTER-ARG :BEFORE-DATE)
						:AFTER-DATE :BEFORE-DATE)))
			 (PROG1
			   (SELECTQ FILTER-ARG
			     (:BEFORE-DATE 'MSG-BEFORE-DATE-P)
			     (:AFTER-DATE 'MSG-AFTER-DATE-P)
			     (:ON-DATE (FILTER-PREDICATE-OR-OPPOSITE 'MSG-ON-DATE-P NOT-P)))
			   (SETQ FILTER-ARG DATE))))
		      ((:CURRENT :CURRENT-ON-DAY)
		       (SEND *FILTER-SELECTION-FRAME* :DEACTIVATE)
		       (LET ((DATE (SELECTQ FILTER-ARG
				     (:CURRENT
				      (TIME:GET-UNIVERSAL-TIME))
				     (:CURRENT-ON-DAY
				      (PROMPT-FOR-REMINDER-DAY)))))
			 (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
			     (TIME:DECODE-UNIVERSAL-TIME DATE)
			   (SETQ FILTER-ARG (LIST DATE DAY MONTH YEAR))))
		       (FILTER-PREDICATE-OR-OPPOSITE 'REMINDER-MSG-VALID-ON-DAY-P NOT-P))
		      (:EXPIRED
		       (SETQ FILTER-ARG (TIME:GET-UNIVERSAL-TIME))
		       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-EXPIRED-P NOT-P))
		      (:DIGEST
		       (SETQ FILTER-ARG NIL)
		       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-DIGEST-P NOT-P))
		      (OTHERWISE
		       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-ATTRIBUTE-P NOT-P)))))
		 (USER-FILTER-MENU
		  (WHEN (EQ FILTER-ARG :NEW-FILTER)
		    (SEND *FILTER-SELECTION-FRAME* :DEACTIVATE)
		    (SETQ FILTER-ARG (DEFINE-NEW-FILTER))
		    (OR FILTER-ARG (ABORT-CURRENT-COMMAND)))
		  (SETQ FILTER-FUNCTION (FILTER-PREDICATE-OR-OPPOSITE 'MSG-FITS-FILTER-P
								      NOT-P)))
		 (OTHERWISE (FERROR "~S is not a known window" (THIRD CHAR))))
	       (WHEN FILTER-FUNCTION
		 (TV:RESTORE-MOUSE-POSITION-IF-NECESSARY)
		 (RETURN NIL)))))))
    (SEND *FILTER-SELECTION-FRAME* :DEACTIVATE))
  (VALUES UNIVERSE FILTER-FUNCTION FILTER-ARG))

(DEFUN ZMAIL-GET-FILTER-SEARCH-FUNCTION-AND-ARG (&OPTIONAL NOT-P)
  (DECLARE (VALUES FUN KEY))
  (MULTIPLE-VALUE-BIND (FUN KEY)
      (ZMAIL-READ-FIND-SEARCH-STRING "Messages containing string")
    (VALUES (SELECTQ FUN
	      ((ZMAIL-BOYER-SEARCH SEARCH)
	       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-SEARCH-STRING NOT-P))
	      (FSM-SEARCH
	       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-FSM-SEARCH-STRING NOT-P))
	      (FSM-EXPR-SEARCH
	       (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-FSM-EXPR-SEARCH-STRING NOT-P)))
	    KEY)))
(DEFUN ZMAIL-GET-FILTER-SUBJECT-SEARCH-FUNCTION-AND-ARG (&OPTIONAL NOT-P)
  (DECLARE (VALUES FUN KEY))
  (LET ((*TYPE* :SUBJECT))
    (DECLARE (SPECIAL *TYPE*))
    (MULTIPLE-VALUE-BIND (FUN KEY)
	(ZWEI:WITH-ZMAIL-SUMMARY-WHO-LINE-DOCUMENTATION
	  "Replace minibuffer contents with subject of this message."
	  (CONDITION-BIND ((UNKNOWN-SPECIAL-COMMAND
			     #'ZMAIL-FILTER-MINI-BUFFER-UNKNOWN-SPECIAL-COMMAND))
	    (ZMAIL-READ-FIND-SEARCH-STRING "Subject search (use mouse to yank msg subject)")))
      (VALUES (SELECTQ FUN
		((ZMAIL-BOYER-SEARCH SEARCH)
		 (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-SUBJECT-SEARCH-STRING NOT-P))
		(FSM-SEARCH
		 (SETQ KEY (LIST KEY NIL))
		 (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-SUBJECT-FSM-SEARCH-STRING NOT-P))
		(FSM-EXPR-SEARCH
		 (FILTER-PREDICATE-OR-OPPOSITE 'MSG-HAS-SUBJECT-FSM-SEARCH-STRING NOT-P)))
	      KEY))))

(DEFUN FILTER-PREDICATE-OR-OPPOSITE (PREDICATE NOT-P)
  (IF NOT-P (GET PREDICATE 'FILTER-FUNCTION-OPPOSITE-FUNCTION) PREDICATE))

;;; Some built-in filters
(DEFMACRO DEFINE-MSG-PREDICATE-AND-OPPOSITE (PREDICATE-NAME OPPOSITE-NAME ARGLIST &BODY BODY)
  `(LOCAL-DECLARE ((SYS:FUNCTION-PARENT ,PREDICATE-NAME DEFINE-MSG-PREDICATE-AND-OPPOSITE))
     (RECORD-SOURCE-FILE-NAME ',PREDICATE-NAME 'DEFINE-MSG-PREDICATE-AND-OPPOSITE)
     (DEFUN ,PREDICATE-NAME ,ARGLIST
       . ,BODY)
     (DEFPROP ,PREDICATE-NAME ,OPPOSITE-NAME FILTER-FUNCTION-OPPOSITE-FUNCTION)
     (DEFUN ,OPPOSITE-NAME ,ARGLIST
       (NOT (PROGN . ,BODY)))
     (DEFPROP ,OPPOSITE-NAME ,PREDICATE-NAME FILTER-FUNCTION-OPPOSITE-FUNCTION)))

(DEFPROP DEFINE-MSG-PREDICATE-AND-OPPOSITE "Zmail message predicate" SI:DEFINITION-TYPE-NAME)

(DEFMACRO DEFINE-MSG-PREDICATE-COLLECTION-NAME (PREDICATE-NAME (KEY) &BODY BODY)
  `(LOCAL-DECLARE ((SYS:FUNCTION-PARENT ,PREDICATE-NAME DEFINE-MSG-PREDICATE-COLLECTION-NAME))
     (RECORD-SOURCE-FILE-NAME ',PREDICATE-NAME 'DEFINE-MSG-PREDICATE-COLLECTION-NAME)
     (DEFUN (:PROPERTY ,PREDICATE-NAME FILTER-FUNCTION-COLLECTION-NAME-FUNCTION) (,KEY)
       ,@BODY)))

(DEFPROP DEFINE-MSG-PREDICATE-COLLECTION-NAME "Zmail message predicate collection name"
					      SI:DEFINITION-TYPE-NAME)


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-HAS-KEYWORDS-P MSG-DOES-NOT-HAVE-KEYWORDS-P
				   (MSG IGNORE)
  (NOT (NULL (MSG-GET MSG 'KEYWORDS))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-HAS-KEYWORDS-P (IGNORE)
  "{*}")


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-HAS-KEYWORD-P MSG-DOES-NOT-HAVE-KEYWORD-P (MSG KEYWORD)
  (MEMQ KEYWORD (MSG-GET MSG 'KEYWORDS)))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-HAS-KEYWORD-P (KEYWORD)
  (STRING-APPEND #/{ (CAR (RASSQ KEYWORD *KEYWORD-ALIST*)) #/}))


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-TRUE-FILTER MSG-FALSE-FILTER (IGNORE IGNORE)
  T)

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-TRUE-FILTER (IGNORE)
  "<*>")


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-HAS-ATTRIBUTE-P MSG-DOES-NOT-HAVE-ATTRIBUTE-P
				  (MSG ATTRIBUTE)
  (NOT (NULL (MSG-GET MSG ATTRIBUTE))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-HAS-ATTRIBUTE-P (ATTRIBUTE)
  (STRING-APPEND #/< (NAME-FROM-MENU-VALUE ATTRIBUTE *SYSTEM-FILTER-ALIST*) #/>))

(DEFINE-MSG-PREDICATE-AND-OPPOSITE UNDELETED-MSG-HAS-ATTRIBUTE-P
				   UNDELETED-MSG-DOES-NOT-HAVE-ATTRIBUTE-P
				  (MSG ATTRIBUTE)
  (LET ((STATUS (ASSURE-MSG-PARSED MSG)))
    (AND (NULL (GET STATUS 'DELETED))
	 (NOT (NULL (GET STATUS ATTRIBUTE))))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME UNDELETED-MSG-HAS-ATTRIBUTE-P (ATTRIBUTE)
  (STRING-APPEND #\< (NAME-FROM-MENU-VALUE ATTRIBUTE *SYSTEM-FILTER-ALIST*) #\>))

(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-FITS-FILTER-P MSG-DOES-NOT-FIT-FILTER-P (MSG FILTER)
  (NOT (NULL (FUNCALL (OR (GET FILTER 'FILTER-FUNCTION)
			  (FERROR NIL "~S is not the name of a filter" FILTER))
		      MSG))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-FITS-FILTER-P (FILTER)
  (STRING-APPEND #/< FILTER #/>))

(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-DIGEST-P MSG-NOT-DIGEST-P (MSG &OPTIONAL IGNORE)
  (DIGEST-MSG-P MSG))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-DIGEST-P (IGNORE)
  "<Digest>")

(DEFMACRO DEFINE-MSG-SEARCH-FILTER-PREDICATES (PREDICATE-NAME OPPOSITE-NAME MATCH-FUNCTION)
  `(LOCAL-DECLARE ((SYS:FUNCTION-PARENT ,PREDICATE-NAME DEFINE-MSG-SEARCH-FILTER-PREDICATES))
     (RECORD-SOURCE-FILE-NAME ',PREDICATE-NAME 'DEFINE-MSG-SEARCH-FILTER-PREDICATES)
     (DEFINE-MSG-PREDICATE-AND-OPPOSITE ,PREDICATE-NAME ,OPPOSITE-NAME (MSG KEY)
       (NOT (NULL (,MATCH-FUNCTION (MSG-START-BP MSG) KEY NIL NIL NIL (MSG-END-BP MSG)))))
     (DEFINE-MSG-PREDICATE-COLLECTION-NAME ,PREDICATE-NAME (IGNORE)
       (STRING-APPEND "(Search: " (16B-STRING-NAME-STRING *ZMAIL-FIND-DEFAULT*) ")"))))

(DEFPROP DEFINE-MSG-SEARCH-FILTER-PREDICATES "Zmail message search predicate"
	 SI:DEFINITION-TYPE-NAME)

(DEFINE-MSG-SEARCH-FILTER-PREDICATES MSG-HAS-SEARCH-STRING
				     MSG-DOES-NOT-HAVE-SEARCH-STRING
				     ZMAIL-BOYER-SEARCH)

(DEFINE-MSG-SEARCH-FILTER-PREDICATES MSG-HAS-FSM-SEARCH-STRING
				     MSG-DOES-NOT-HAVE-FSM-SEARCH-STRING
				     FSM-SEARCH)

(DEFINE-MSG-SEARCH-FILTER-PREDICATES MSG-HAS-FSM-EXPR-SEARCH-STRING
				     MSG-DOES-NOT-HAVE-FSM-EXPR-SEARCH-STRING
				     FSM-EXPR-SEARCH)


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-HAS-RECIPIENT-FIELD MSG-DOES-NOT-HAVE-RECIPIENT-FIELD
				  (MSG FIELD)
  (LOOP FOR (TYPE HEADER) ON (CDR (ASSURE-MSG-PARSED MSG)) BY 'CDDR
	     THEREIS (AND (HEADER-TYPE-TYPEP TYPE ':RECIPIENT)
			  (MSG-HEADER-RECIPIENT-MATCH HEADER FIELD))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-HAS-RECIPIENT-FIELD (FIELD)
  (STRING-APPEND "(Recipient: " FIELD #/)))


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-HAS-FROM-FIELD MSG-DOES-NOT-HAVE-FROM-FIELD (MSG FIELD)
  (MSG-HEADER-RECIPIENT-MATCH (MSG-GET MSG ':FROM) FIELD))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-HAS-FROM-FIELD (FIELD)
  (STRING-APPEND "(From: " FIELD #/)))

(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-HAS-SENDER-FIELD
				   MSG-DOES-NOT-HAVE-SENDER-FIELD
				   (MSG FIELD)
  (LOOP FOR (TYPE HEADER) ON (LOCATION-CONTENTS (ASSURE-MSG-PARSED MSG)) BY 'CDDR
	THEREIS (AND (HEADER-TYPE-TYPEP TYPE :SENDER)
		     (MSG-HEADER-RECIPIENT-MATCH HEADER FIELD))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-HAS-SENDER-FIELD (FIELD)
  (STRING-APPEND "(Author: " FIELD #/)))

(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-HAS-SENDER-OR-RECIPIENT-FIELD
				  MSG-DOES-NOT-HAVE-SENDER-OR-RECIPIENT-FIELD
				  (MSG FIELD)
  (LOOP FOR (TYPE HEADER) ON (CDR (ASSURE-MSG-PARSED MSG)) BY 'CDDR
	THEREIS (AND (HEADER-TYPE-TYPEP TYPE ':SENDER-OR-RECIPIENT)
		     (MSG-HEADER-RECIPIENT-MATCH HEADER FIELD))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-HAS-SENDER-OR-RECIPIENT-FIELD (FIELD)
  (STRING-APPEND "(Author//Recipient: " FIELD #/)))

(DEFMACRO DEFINE-SUBJECT-FILTER-PREDICATES (PREDICATE-NAME OPPOSITE-NAME MATCH-FUNCTION
					    &KEY USE-CANONICAL-SUBJECT)
  `(LOCAL-DECLARE ((SYS:FUNCTION-PARENT ,PREDICATE-NAME DEFINE-SUBJECT-FILTER-PREDICATES))
     (RECORD-SOURCE-FILE-NAME ',PREDICATE-NAME 'DEFINE-SUBJECT-FILTER-PREDICATES)
     (DEFINE-MSG-PREDICATE-AND-OPPOSITE ,PREDICATE-NAME ,OPPOSITE-NAME (MSG KEY)
       (LET ((SUBJECT ,(IF USE-CANONICAL-SUBJECT
			   `(MSG-GET-CANONICAL-SUBJECT MSG)
			   `(MSG-GET-REAL-SUBJECT MSG))))
	 (AND SUBJECT
	      (NOT (NULL (,MATCH-FUNCTION KEY SUBJECT))))))
     (DEFINE-MSG-PREDICATE-COLLECTION-NAME ,PREDICATE-NAME (IGNORE)
       (STRING-APPEND "(Subject: " (16B-STRING-NAME-STRING *ZMAIL-FIND-DEFAULT*) #/)))))

(DEFPROP DEFINE-SUBJECT-FILTER-PREDICATES "Zmail message subject predicate"
	 SI:DEFINITION-TYPE-NAME)

(DEFINE-SUBJECT-FILTER-PREDICATES MSG-HAS-SUBJECT-STRING
				  MSG-DOES-NOT-HAVE-SUBJECT-STRING
				  STRING-EQUAL
				  :USE-CANONICAL-SUBJECT T)

(DEFINE-SUBJECT-FILTER-PREDICATES MSG-HAS-SUBJECT-SEARCH-STRING
				  MSG-DOES-NOT-HAVE-SUBJECT-SEARCH-STRING
				  ZMAIL-BOYER-STRING-SEARCH)

(DEFINE-SUBJECT-FILTER-PREDICATES MSG-HAS-SUBJECT-FSM-SEARCH-STRING
				  MSG-DOES-NOT-HAVE-SUBJECT-FSM-SEARCH-STRING
				  FSM-STRING-SEARCH)


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-EXPIRED-P MSG-NOT-EXPIRED-P (MSG &OPTIONAL NOW)
  (UNLESS NOW
    (SETQ NOW (TIME:GET-UNIVERSAL-TIME)))
  (LET ((EXPIRATION-DATE (MSG-GET MSG :EXPIRATION-DATE)))
    (COND ((NULL EXPIRATION-DATE) NIL)
	  ((LISTP EXPIRATION-DATE) (> NOW (FIRST (LAST EXPIRATION-DATE))))
	  (T (> NOW EXPIRATION-DATE)))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-EXPIRED-P (IGNORE)
  "<Expired>")


(DEFUN MSG-BEFORE-DATE-P (MSG DATE)
  (LET ((MDATE (MSG-GET-DATE MSG)))
    (AND MDATE (< MDATE DATE))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-BEFORE-DATE-P (DATE)
  (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
      (TIME:DECODE-UNIVERSAL-TIME DATE)
    (FORMAT NIL "<Before ~D ~A ~D>" DAY (TIME:MONTH-STRING MONTH ':SHORT) YEAR)))


(DEFUN MSG-AFTER-DATE-P (MSG DATE)
  (LET ((MDATE (MSG-GET-DATE MSG)))
    (AND MDATE ( MDATE DATE))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-AFTER-DATE-P (DATE)
  (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
      (TIME:DECODE-UNIVERSAL-TIME DATE)
    (FORMAT NIL "<After ~D ~A ~D>" DAY (TIME:MONTH-STRING MONTH ':SHORT) YEAR)))


(DEFINE-MSG-PREDICATE-AND-OPPOSITE MSG-ON-DATE-P MSG-NOT-ON-DATE-P (MSG DATE)
  (LET ((MDATE (MSG-GET-DATE MSG)))
    (AND MDATE
	 ( DATE MDATE)
	 (> (+ DATE 86400.) MDATE))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME MSG-ON-DATE-P (DATE)
  (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
      (TIME:DECODE-UNIVERSAL-TIME DATE)
    (FORMAT NIL "<On ~D ~A ~D>" DAY (TIME:MONTH-STRING MONTH ':SHORT) YEAR)))

(DEFFLAVOR BASIC-ZMAIL-FILTER
	(*EDITOR-WINDOW*
	 *EDITOR-INTERVAL*
	 *EDITOR-STREAM*
	 *EDITOR-INSERT-BP*
	 *SUMMARY-WINDOW*)
	()
  (:REQUIRED-FLAVORS ZMAIL-FRAME-MIXIN)
  :SPECIAL-INSTANCE-VARIABLES
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :COMMAND-LOOP :INITIALIZE :SET-FILTER))

(GLOBALLY-DECLARE-FLAVOR-INSTANCE-VARIABLES BASIC-ZMAIL-FILTER)

(DEFFLAVOR ZMAIL-FILTER-FRAME
       ((*MAJOR-MODE* (MODE-OF-FLAVOR 'LISP-MODE))
	(*MODE-LINE-LIST* '("Zmail " "Filter"))
	(*COMTAB* *STANDALONE-COMTAB*)
	)
       (TOP-LEVEL-EDITOR BASIC-ZMAIL-FILTER
	ZMAIL-FRAME-MIXIN ZMAIL-COMMAND-LOOP-MIXIN-WITH-SUMMARY ZMAIL-COMMAND-LOOP-MIXIN
	TV:STREAM-MIXIN TV:BORDERS-MIXIN
	TV:PANE-MIXIN TV:ITEM-LIST-PANE-KLUDGE TV:FRAME-WITH-XOR-BUTTONS
	TV:SELECT-MIXIN TV:CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER TV:MINIMUM-WINDOW)
  :SPECIAL-INSTANCE-VARIABLES
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :COMMAND-LOOP :INITIALIZE :SET-FILTER))

(DEFMETHOD (:INIT ZMAIL-FILTER-FRAME :BEFORE) (IGNORE)
  (SETQ TV:PANES `((NOT-BUTTON TV:BUTTON-PANE :NAME "Not"
					      :DOCUMENTATION "Negate a clause.")
		   (AND-BUTTON TV:BUTTON-PANE :NAME "And"
			       :DOCUMENTATION "Logical and of several clauses.")
		   (OR-BUTTON TV:BUTTON-PANE :NAME "Or"
					     :DOCUMENTATION "Logical or of several clauses.")
		   (CLOSE-BUTTON TV:BUTTON-PANE :NAME "Close"
					        :DOCUMENTATION
  "Add clauses to the next higher AND or OR.")
		   (SAMPLE-BUTTON TV:BUTTON-PANE :NAME "Sample"
					         :DOCUMENTATION
  "Show messages matching the filter as so far defined.  R: Menu of universes to search.")
		   (DONE-BUTTON TV:BUTTON-PANE :NAME "Done"
					       :DOCUMENTATION "Use this filter definition.")
		   (ABORT-BUTTON TV:BUTTON-PANE :NAME "Abort"
					        :DOCUMENTATION "Abort this command.")
		   (DOCUMENTATION-BUTTON TV:BUTTON-PANE :NAME "Documentation"
					 :DOCUMENTATION "Add documentation for filter.")
		   (KEYWORD-COMMAND-MENU ZMAIL-COMMAND-MENU-PANE
					 :ITEM-LIST NIL :LABEL "Keywords:")
		   (USER-FILTER-MENU ZMAIL-COMMAND-MENU-PANE
				     :ITEM-LIST NIL :LABEL "Filters:")
		   (SYSTEM-FILTER-MENU ZMAIL-COMMAND-MENU-PANE
				       :ITEM-LIST ,*SYSTEM-FILTER-ALIST*)
		   (HEADER-FILTER-MENU ZMAIL-COMMAND-MENU-PANE
				       :ITEM-LIST ,*HEADER-FILTER-MENU-ALIST*)
		   (DATE-FILTER-MENU ZMAIL-COMMAND-MENU-PANE
				     :ITEM-LIST ,*DATE-FILTER-MENU-ALIST*)
		   (NAME-BUTTON TV:BIG-BUTTON-PANE :NAME "Name"
						   :BORDERS 3
						   :DOCUMENTATION
  "L,M: Specify a new name for this filter.  R: Menu of existing filters to edit.")
		   (EDITOR-WINDOW ZMAIL-WINDOW :INTERVAL-NAME "Filter Definition"
					       :BORDERS (2 2 2 1) :SAVE-BITS NIL
					       :BLINKER-DESELECTED-VISIBILITY :OFF)
		   (MODE-LINE-WINDOW MODE-LINE-PANE :NUMBER-OF-MINI-BUFFER-LINES 2
						    :MORE-P NIL :BORDERS (2 1 2 2)
						    :BLINKER-DESELECTED-VISIBILITY :OFF))
	TV:CONSTRAINTS
	       `((ONLY . ( (WHOLE-THING)
			   ((WHOLE-THING TV:WHITE-INCLUDE-WHITESPACE	;Horiz
			     (0.9) (:EVEN)
			     (MENUS FORM)
			     ((FORM TV:WHITE-INCLUDE-WHITESPACE	;Vert
			       (0.625) (:EVEN)
			       (NAMEX EDITORSS)
			       ((NAMEX TV:SINGLE-PANE-IN-WHITESPACE NAME-BUTTON))
			       ((EDITORSS :HORIZONTAL (0.85)
				 (EDITORS)
				 ((EDITORS :VERTICAL (:EVEN)
				   (EDITOR-WINDOW MODE-LINE-WINDOW)
				   ((MODE-LINE-WINDOW :ASK :PANE-SIZE))
				   ((EDITOR-WINDOW :EVEN))))))))
			     ((MENUS TV:WHITE-INCLUDE-WHITESPACE	;Vert
			       (0.95) (:EVEN)
			       (CONDITIONALS CONTROLS EXTRAS SYSTEM-MENUS USER-MENUS)
			       ((CONDITIONALS TV:FLOATING-BUTTONS
				 (NOT-BUTTON AND-BUTTON OR-BUTTON CLOSE-BUTTON)))
			       ((CONTROLS TV:FLOATING-BUTTONS
				 (SAMPLE-BUTTON DONE-BUTTON ABORT-BUTTON)))
			       ((EXTRAS TV:FLOATING-BUTTONS
				 (DOCUMENTATION-BUTTON)))
			       ((SYSTEM-MENUS TV:FLOATING-MENUS
				 (:ASK-WINDOW SYSTEM-FILTER-MENU :PANE-SIZE-WITH-WHITESPACE)
				 (SYSTEM-FILTER-MENU HEADER-FILTER-MENU DATE-FILTER-MENU)))
			       ((USER-MENUS TV:FLOATING-MENUS
				 (:ASK-WINDOW SELF :USER-MENUS-SIZE)
				 (KEYWORD-COMMAND-MENU USER-FILTER-MENU))))))))))))

(DEFMETHOD (:INIT BASIC-ZMAIL-FILTER :AFTER) (IGNORE)
  (MULTIPLE-VALUE (*EDITOR-WINDOW* *EDITOR-INTERVAL*)
    (CREATE-ZMAIL-WINDOW 'EDITOR-WINDOW))
  (SETQ *WINDOW* *EDITOR-WINDOW*)
  (SETQ *WINDOW-LIST* (NCONS *WINDOW*))
  (SETQ *EDITOR-STREAM* (OPEN-INTERVAL-STREAM *EDITOR-INTERVAL* NIL NIL))
  (SETQ *EDITOR-INSERT-BP* (COPY-BP (POINT) ':MOVES)))

(DEFMETHOD (:INIT ZMAIL-FILTER-FRAME :AFTER) (IGNORE)
  (SET-COMTAB *MODE-COMTAB* (LIST #/c-H (COMMAND-LOOKUP #/c-H *SEARCH-MINI-BUFFER-COMTAB*))))

(DEFMETHOD (:USER-MENUS-SIZE ZMAIL-FILTER-FRAME) (&REST ARGS)
  (MAX (LEXPR-SEND SELF ':SEND-PANE 'KEYWORD-COMMAND-MENU ':PANE-SIZE-WITH-WHITESPACE ARGS)
       (LEXPR-SEND SELF ':SEND-PANE 'USER-FILTER-MENU ':PANE-SIZE-WITH-WHITESPACE ARGS)))

(DEFMETHOD (:NOTIFICATION-CELL ZMAIL-FILTER-FRAME) ()
  (SEND (SEND SELF :ALIAS-FOR-SELECTED-WINDOWS) :NOTIFICATION-CELL))

(DEFMETHOD (:NOTIFICATION-MODE ZMAIL-FILTER-FRAME) ()
  (SEND (SEND SELF :ALIAS-FOR-SELECTED-WINDOWS) :NOTIFICATION-MODE))

(DEFMETHOD (:INITIALIZE ZMAIL-FILTER-FRAME) (&AUX NEW-NAME CHANGED-P)
  (SETQ NEW-NAME (GENERATE-UNIQUE-NAME *USER-FILTER-ALIST*))
  (SETQ *SUMMARY-WINDOW* (SEND TV:SUPERIOR :GET-PANE 'SUMMARY-WINDOW))
  (WHEN *KEYWORD-ALIST-SORT-PREDICATE*		; make it pretty
    (SETQ *KEYWORD-ALIST*
	  (SORTCAR *KEYWORD-ALIST*		;compensate for old spazz in predicate alist
		   (EVAL (EVAL *KEYWORD-ALIST-SORT-PREDICATE*)))))
  (WHEN *FILTER-ALIST-SORT-PREDICATE*
    (SETQ *USER-FILTER-ALIST* (CL:SORT *USER-FILTER-ALIST*
				       (EVAL *FILTER-ALIST-SORT-PREDICATE*)
				       :KEY #'FIRST)))
  (SETQ CHANGED-P (SEND SELF :SET-PANES-ITEM-LIST 'KEYWORD-COMMAND-MENU
			     (APPEND '(("Any" :VALUE ANY
					:STYLE (:SWISS :BOLD-ITALIC :NORMAL)
					:DOCUMENTATION "Messages with any keyword on them."))
				     *KEYWORD-ALIST*
				     NIL)))
  (SETQ CHANGED-P (OR (SEND SELF :SET-PANES-ITEM-LIST
				 'USER-FILTER-MENU (COPYLIST *USER-FILTER-ALIST*))
		      CHANGED-P))
  (AND CHANGED-P (SEND SELF :SET-CONFIGURATION 'ONLY))
  (SEND SELF :TURN-OFF-ACCENTS)
  (SEND SELF :SET-PANES-NAME 'NAME-BUTTON NEW-NAME)
  (DELETE-INTERVAL *EDITOR-INTERVAL*)
  (TURN-ON-MODE *MAJOR-MODE*)			;Indent for LISP.
  (INSERT-FORM-INTO-EDITOR-WINDOW
    `(DEFINE-FILTER ,(INTERN NEW-NAME) (MSG)) -1)
  (MUST-REDISPLAY *EDITOR-WINDOW* DIS-ALL)
  (TYPEIN-LINE ""))

(DEFMETHOD (:SET-FILTER ZMAIL-FILTER-FRAME) (OLD-FILTER-NAME)
  (LET ((FORM (GET-FILTER-DEFINITION OLD-FILTER-NAME)))
    (DELETE-INTERVAL *INTERVAL*)
    (INSERT-FORM-INTO-EDITOR-WINDOW FORM)
    (SEND SELF ':SET-PANES-NAME 'NAME-BUTTON (STRING OLD-FILTER-NAME))))

(DEFMETHOD (:TOP-LEVEL-TAG ZMAIL-FILTER-FRAME) () 'EXIT-FILTER-DEFINITION)

(DEFMETHOD (:PROCESS-SPECIAL-COMMAND ZMAIL-FILTER-FRAME) (&REST ARGS)
  (APPLY #'ZMAIL-FILTER-COMMAND-LIST ARGS))

(DEFSELECT (ZMAIL-FILTER-COMMAND-LIST ZMAIL-COMMAND-LIST-DEFAULT)
  (:MENU (ITEM IGNORE WINDOW &AUX WINDOW-NAME ITEM-NAME)
   (SETQ WINDOW-NAME (SEND (TV:SHEET-SUPERIOR WINDOW) ':PANE-NAME WINDOW)
	 ITEM-NAME (IF (ATOM ITEM) ITEM (CAR ITEM))
	 ITEM (SEND WINDOW ':EXECUTE-NO-SIDE-EFFECTS ITEM))
   (SELECTQ WINDOW-NAME
     (KEYWORD-COMMAND-MENU
      (INSERT-FORM-INTO-EDITOR-WINDOW (IF (EQ ITEM 'ANY)
					  'KEYWORDS
					  `(MEMQ ',ITEM KEYWORDS))))
     (USER-FILTER-MENU
      (INSERT-FORM-INTO-EDITOR-WINDOW `(MSG-FITS-FILTER-P MSG ',ITEM)))
     (OTHERWISE
      (INSERT-FILTER ITEM-NAME ITEM))))
  (:MOUSE-BUTTON (CH WINDOW IGNORE IGNORE &AUX WINDOW-NAME)
   (COND
     ((NOT (OPERATION-HANDLED-P WINDOW :SET-ACCENT))
      (SEND WINDOW :BEEP)
      (WHEN (OR (EQ WINDOW *TYPEIN-WINDOW*) (EQ WINDOW *MODE-LINE-WINDOW*))
	(SEND *FILTER-WINDOW* :SELECT NIL)))
     (T
      (UNLESS (NULL (SETQ WINDOW-NAME (SEND (TV:SHEET-SUPERIOR WINDOW) ':PANE-NAME WINDOW)))
	(UNWIND-PROTECT
	    (SELECTQ WINDOW-NAME
	      (ABORT-BUTTON
	       (*THROW 'EXIT-FILTER-DEFINITION NIL))
	      (DONE-BUTTON
	       (*THROW 'EXIT-FILTER-DEFINITION (GET-AND-COMPILE-FILTER)))
	      (SAMPLE-BUTTON
	       (LET ((UNIVERSE *SEQUENCE*))
		 (AND (MOUSE-CHAR-P CH)
		      (CHAR-MOUSE-EQUAL CH #\MOUSE-3-1)
		      (SETQ UNIVERSE
			    (GET-UNIVERSE-FUNCTION
			      `(:WINDOW ,WINDOW)
			      "Select the universe to sample the filter's current definition:"
			      "Resume defining the filter without sampling its definition.")))
		 (OR UNIVERSE (ABORT-CURRENT-COMMAND))
		 (SURVEY-FROM-FILTER UNIVERSE #'MSG-FITS-FILTER-P (GET-AND-COMPILE-FILTER)))
	       (CHECK-FOR-ZMAIL-TYPEOUT-WINDOW-TYPEOUT))
	      (NAME-BUTTON
	       (READ-NEW-NAME WINDOW CH *USER-FILTER-ALIST* #'GET-FILTER-DEFINITION "filter"))
	      (CLOSE-BUTTON
	       (EDITOR-WINDOW-CLOSE-BUTTON))
	      (DOCUMENTATION-BUTTON
	       (INSERT-DOCUMENTATION-INTO-EDITOR-WINDOW
		 (READLINE-FROM-EDITOR-WINDOW "Documentation for this filter:")))
	      (OTHERWISE
	       (INSERT-FORM-INTO-EDITOR-WINDOW `(,(SELECTQ WINDOW-NAME
						    (NOT-BUTTON 'NOT)
						    (AND-BUTTON 'AND)
						    (OR-BUTTON 'OR)))
					       -1)))
	  (SEND WINDOW ':SET-ACCENT NIL))))))
  (SUMMARY-MOUSE (ITEM IGNORE IGNORE &AUX (MSG (CADR ITEM)))	;Mouse in summary window
   (EXTRACT-FILTERS-FROM-MSG MSG))
  ((:TYPEOUT-EXECUTE SUMMARY-EXECUTE) (&REST IGNORE)
    (BARF)))

(DEFUN INSERT-FILTER (NAME TYPE)
  (MACROLET ((WITH-TYPE (TYPE &BODY FORMS)
	       `(LET ((*TYPE* ,TYPE))
		  (DECLARE (SPECIAL *TYPE*))
		  (WITH-ZMAIL-SUMMARY-WHO-LINE-DOCUMENTATION
		    (IF *TYPE*
			(FORMAT NIL "Replace minibuffer contents with ~:(~A~) ~
				     taken from this message."
				*TYPE*)
			"")
		    ,@FORMS))))
    (INSERT-FORM-INTO-EDITOR-WINDOW
      (WITH-TYPE TYPE
	(CONDITION-BIND ((UNKNOWN-SPECIAL-COMMAND
			   #'ZMAIL-FILTER-MINI-BUFFER-UNKNOWN-SPECIAL-COMMAND))
	  (SELECTQ TYPE
	    ((DELETED UNSEEN ANSWERED RECENT FILED)
	     `(GET STATUS ',TYPE))
	    (:EXPIRED
	      `(MSG-EXPIRED-P MSG))
	    ((:CURRENT :CURRENT-ON-DAY)
	     `(MSG-CURRENT-P MSG))
	    (:DIGEST
	      `(MSG-DIGEST-P MSG))
	    (:SEARCH
	      (WITH-TYPE NIL
		(LET ((KEY (READ-SEARCH-KEY-FROM-EDITOR-WINDOW "String to search for:")))
		  `(SEARCH-WITHIN-MSG ,KEY))))
	    ((:RECIPIENT :SENDER :SENDER-OR-RECIPIENT :SUBJECT :OTHER)
	     (WITH-TYPE NIL
	       (WHEN (EQ TYPE :OTHER)
		 (MULTIPLE-VALUE (NAME TYPE)
		   (READ-HEADER-NAME-FROM-EDITOR-WINDOW "Header field to be searched"))))
	     (WITH-TYPE TYPE
	       (LET ((SUPERTYPE-FIELD (MEMQ TYPE '(:RECIPIENT :SENDER :SENDER-OR-RECIPIENT))))
		 (MULTIPLE-VALUE-BIND (KEY RAW-STRING)
		     (READ-SEARCH-KEY-FROM-EDITOR-WINDOW (STRING-APPEND NAME #/:))
		   (IF (ZEROP (STRING-LENGTH RAW-STRING))
		       (IF SUPERTYPE-FIELD
			   (BARF "A search string must be given for ~A." NAME)
			   `(NOT (NULL (GET STATUS ,TYPE))))
		       `(,(IF (OR SUPERTYPE-FIELD (HEADER-TYPE-TYPEP TYPE :ADDRESS))
			      'MSG-HEADER-ADDRESS-SEARCH 'MSG-HEADERS-SEARCH)
			 ,(IF SUPERTYPE-FIELD TYPE `'(,TYPE))
			 ,KEY))))))
	    ((:ON :BEFORE :AFTER)
	     (WITH-TYPE :DATE
	       (MULTIPLE-VALUE-BIND (DATE RELATIVE-P)
		   (BARF-ON-ERRORS (TIME:PARSE-ERROR)
		     (READ-DATE-AND-TIME-FROM-EDITOR-WINDOW-1 (NOT (EQ TYPE :ON))
							      "~A date~:[~; and time~]:"
							      NAME
							      (NOT (EQ TYPE :ON))))
		 (IF (NOT RELATIVE-P)
		     `(,(SELECTQ TYPE
			  (:ON 'MSG-SAME-DATE)
			  (:BEFORE 'MSG-DATE-LESSP)
			  (:AFTER 'MSG-DATE-GREATERP))
		       ,DATE)
		     `(,(SELECTQ TYPE
			  (:ON 'MSG-SAME-RELATIVE-DATE)
			  (:BEFORE 'MSG-RELATIVE-DATE-LESSP)
			  (:AFTER 'MSG-RELATIVE-DATE-GREATERP))
		       ,DATE
		       ,(FORMAT-CURRENT-DATE-FOR-FILTER))))))
	    ))))))

(DEFVAR DEFAULT-LISP-SYNTAX-FOR-BUFFER-IO :COMMON-LISP)

(DEFUN INSERT-FORM-INTO-EDITOR-WINDOW (FORM &OPTIONAL (NCHARS 0) &AUX BP (POINT (POINT)))
  (SEND *EDITOR-STREAM* ':SET-BP *EDITOR-INSERT-BP*)
  (LET ((READTABLE (INITIALIZE-SHARPSIGN-DOUBLEQUOTE-READTABLE-FOR-SYNTAX
		     (OR (SEND *EDITOR-INTERVAL* :GET :SYNTAX)
			 DEFAULT-LISP-SYNTAX-FOR-BUFFER-IO))))
    (GPRINT:PRINT-OBJECT FORM NIL *EDITOR-STREAM*))
  (SETQ BP (SEND *EDITOR-STREAM* ':READ-BP))
  (MOVE-BP POINT (COND ((= NCHARS 0) BP)
		       ((< NCHARS 0) (FORWARD-CHAR BP NCHARS))
		       (T (FORWARD-CHAR POINT NCHARS))))
  (DO ((N)
       (FLAG NIL))
      (FLAG)
    (DELETE-BACKWARD-OVER *WHITESPACE-CHARS* POINT)
    (SETQ FLAG T
	  N (LET ((BP (FORWARD-SEXP POINT -1 NIL 1)))
	      (IF BP (COUNT-LIST-ELEMENTS BP) 0)))
    (COND ((ZEROP N))
	  ((= N 1) (INSERT-MOVING POINT #\SP))
	  ((MEMQ (RELEVANT-FUNCTION-NAME POINT NIL NIL) '(NOT ))
	   (MOVE-BP POINT (FORWARD-CHAR POINT 1))
	   (SETQ FLAG NIL))
	  (T (LET ((*NUMERIC-ARG-P* NIL) (*NUMERIC-ARG* 1))
	       (COM-INDENT-NEW-LINE)))))
  (MUST-REDISPLAY *WINDOW* DIS-TEXT)
  (MOVE-BP *EDITOR-INSERT-BP* POINT))

(DEFUN INSERT-DOCUMENTATION-INTO-EDITOR-WINDOW (STRING &AUX BP)
  (SETQ BP (OR (FORWARD-LIST (INTERVAL-FIRST-BP *EDITOR-INTERVAL*) 1 NIL -1 T) (BARF)))
  (SETQ BP (OR (FORWARD-SEXP BP 3) (BARF)))
  (SETQ BP (FORWARD-OVER *WHITESPACE-CHARS* BP))
  (AND (= (LIST-SYNTAX (BP-CHAR BP)) LIST-DOUBLE-QUOTE)
       (DELETE-INTERVAL BP (FORWARD-OVER '(#\CR) (FORWARD-SEXP BP 1 T))))
  (SEND *EDITOR-STREAM* ':SET-BP BP)
  (FORMAT *EDITOR-STREAM* "~S~%" STRING)
  (SETQ BP (SEND *EDITOR-STREAM* ':READ-BP))
  (INDENT-LINE BP (INDENT-FOR-LISP BP))
  (MUST-REDISPLAY *WINDOW* DIS-TEXT))

(DEFUN READ-SEARCH-KEY-FROM-EDITOR-WINDOW (PROMPT)
  (DECLARE (VALUES KEY RAW-STRING))
  (UNWIND-PROTECT
      (LET* ((RAW-STRING (GET-EXTENDED-SEARCH-16B-STRING PROMPT))
	     (REAL-STRING (MAKE-ARRAY (STRING-LENGTH RAW-STRING)
				      :TYPE 'ART-FAT-STRING
				      :FILL-POINTER (STRING-LENGTH RAW-STRING)))
	     (FUNCTION (PARSE-EXTENDED-SEARCH-16B-STRING RAW-STRING)))
	(COPY-ARRAY-CONTENTS RAW-STRING REAL-STRING)
	(VALUES	(IF (EQ FUNCTION 'SEARCH)
		    REAL-STRING
		    `(MAKE-EXTENDED-SEARCH-STRING ,REAL-STRING))
		RAW-STRING))
    (SEND *ZMAIL-WINDOW* :SELECT NIL)))

(DEFUN MAKE-EXTENDED-SEARCH-STRING (STRING)
  (LET ((EXTENDED-SEARCH-STRING (MAKE-16B-STRING)))
    (SETF (16B-STRING-LENGTH EXTENDED-SEARCH-STRING) (STRING-LENGTH STRING))
    (COPY-ARRAY-CONTENTS STRING EXTENDED-SEARCH-STRING)
    EXTENDED-SEARCH-STRING)) 

(DEFUN READLINE-FROM-EDITOR-WINDOW (&REST PROMPT)
  (UNWIND-PROTECT
    (APPLY #'TYPEIN-LINE-READLINE PROMPT)
    (SEND *ZMAIL-WINDOW* ':SELECT NIL)))

(SCL:DEFINE-PRESENTATION-TYPE HEADER-NAME ()
   :EXPANDER 'CL:KEYWORD
   :PRINTER ((HEADER-NAME STREAM)
	     (CL:WRITE-STRING
	       (LET ((ELEM (ASSQ HEADER-NAME *HEADER-TYPE-ALIST*)))
		 (IF ELEM
		     (OR (HEADER-TYPE-ELEM-PRETTY-NAME ELEM)
			 "Not a real header field")
		     (STRING-CAPITALIZE-WORDS (STRING HEADER-NAME) T T)))
	       STREAM))
   :PARSER ((STREAM)
	    (MULTIPLE-VALUE-BIND (NAME SUCCESS STRING)
		(DW::COMPLETE-FROM-SEQUENCE *HEADER-TYPE-ALIST* STREAM
					    :NAME-KEY
					      #'(LAMBDA (ELEM)
						  (DECLARE (SYS:DOWNWARD-FUNCTION))
						  (OR (HEADER-TYPE-ELEM-PRETTY-NAME ELEM)
						      "Not a real header field"))
					    :VALUE-KEY #'HEADER-TYPE-ELEM-NAME
					    :ALLOW-ANY-INPUT T)
	      (IF SUCCESS
		  NAME
		  (INTERN (STRING-UPCASE STRING) SI:PKG-KEYWORD-PACKAGE)))))

(DEFUN READ-HEADER-NAME-FROM-EDITOR-WINDOW (PROMPT)
  (UNWIND-PROTECT
      (LET ((TYPE (TYPEIN-LINE-ACCEPT 'HEADER-NAME :PROMPT PROMPT)))
	(VALUES (SCL:PRESENT-TO-STRING TYPE 'HEADER-NAME)
		TYPE))
    (SEND *ZMAIL-WINDOW* :SELECT NIL)))

(DEFUN FORMAT-DATE-FOR-FILTER (STRING &OPTIONAL INCLUDE-TIME)
  (DECLARE (VALUES . (TIME-STRING RELATIVE-P)))
  (MULTIPLE-VALUE-BIND (TIME RELATIVE-P)
      (TIME:PARSE-UNIVERSAL-TIME STRING 0 NIL NIL)	;Parse it, assuming not in future
    (IF (ERRORP TIME) (BARF TIME))
    (IF (AND RELATIVE-P
	     (Y-OR-N-P "Do you want that time relative to when the filter is run? "))
	(VALUES STRING RELATIVE-P)
	(MULTIPLE-VALUE-BIND (SECONDS-OR-ERRMES MINUTES HOURS DAY MONTH YEAR)
	    (TIME:DECODE-UNIVERSAL-TIME TIME)
	  (AND ( YEAR 1900.) (< YEAR 2000.)
	       (SETQ YEAR (- YEAR 1900.)))
	  (FORMAT-DATE-FOR-FILTER-INTERNAL SECONDS-OR-ERRMES MINUTES HOURS DAY MONTH YEAR
					   INCLUDE-TIME)))))

(DEFUN FORMAT-DATE-FOR-FILTER-INTERNAL
       (SECONDS MINUTES HOURS DAY MONTH YEAR &OPTIONAL INCLUDE-TIME)
  (FORMAT NIL "~D-~A-~D~:[ ~D:~2,48D~:[:~2,48D~]~]"
	  DAY (TIME:MONTH-STRING MONTH ':SHORT)
	  YEAR (AND (ZEROP HOURS) (ZEROP MINUTES) (ZEROP SECONDS) (NOT INCLUDE-TIME))
	  HOURS MINUTES (ZEROP SECONDS) SECONDS))

(DEFUN FORMAT-CURRENT-DATE-FOR-FILTER ()
  (MULTIPLE-VALUE-BIND (SECONDS-OR-ERRMSG MINUTES HOURS DAY MONTH YEAR)
      (TIME:DECODE-UNIVERSAL-TIME (TIME:GET-UNIVERSAL-TIME))
    (IF (ERRORP SECONDS-OR-ERRMSG)
	(BARF SECONDS-OR-ERRMSG)
	(FORMAT-DATE-FOR-FILTER-INTERNAL SECONDS-OR-ERRMSG MINUTES HOURS DAY MONTH YEAR))))

(DEFUN READ-DATE-AND-TIME-FROM-EDITOR-WINDOW-1 (INCLUDE-TIME &REST PROMPT)
  (UNWIND-PROTECT
    (LET ((STRING (APPLY #'TYPEIN-LINE-READLINE PROMPT)))
      (FORMAT-DATE-FOR-FILTER STRING INCLUDE-TIME))
    (SEND *ZMAIL-WINDOW* ':SELECT NIL)))	;No activity system

(DEFUN READ-DATE-FROM-EDITOR-WINDOW (&REST PROMPT)
  (LEXPR-FUNCALL #'READ-DATE-AND-TIME-FROM-EDITOR-WINDOW-1 NIL PROMPT))

(DEFUN READ-DATE-AND-TIME-FROM-EDITOR-WINDOW (&REST PROMPT)
  (LEXPR-FUNCALL #'READ-DATE-AND-TIME-FROM-EDITOR-WINDOW-1 T PROMPT))

(DEFUN ZMAIL-FILTER-MINI-BUFFER-UNKNOWN-SPECIAL-COMMAND (CONDITION &AUX MSG STRING)
  (DECLARE (SPECIAL *TYPE*))
  (COND ((EQ (SEND CONDITION ':COMMAND-TYPE) 'SUMMARY-MOUSE)
	 (SETQ MSG (CADAR (SEND CONDITION ':REST)))
	 (SETQ STRING (MSG-HEADER-FILTER-STRING MSG *TYPE*))
	 (DELETE-INTERVAL *INTERVAL*)
	 (INSERT-MOVING (POINT) STRING)
	 (MUST-REDISPLAY *WINDOW* DIS-TEXT)
	 (*THROW 'ZWEI-COMMAND-LOOP T))))

(DEFUN MSG-HEADER-FILTER-STRING (MSG TYPE &AUX STATUS PROP)
  (SETQ STATUS (ASSURE-MSG-PARSED MSG))
  (SETQ PROP (IF (MEMBER TYPE '(:SENDER :RECIPIENT :SENDER-OR-RECIPIENT))
		 (CL:REMOVE-DUPLICATES
		   (LOOP FOR (HTYPE HEADER) ON (CDR STATUS) BY 'CDDR
			 WHEN (HEADER-TYPE-TYPEP HTYPE TYPE)
			   APPEND HEADER)
		   :TEST #'(LAMBDA (X Y)
			     (STRING-EQUAL (CANONICALIZE-RECIPIENT-FILTER-STRING X)
					   (CANONICALIZE-RECIPIENT-FILTER-STRING Y))))
		 (GET STATUS TYPE)))
  (COND ((NULL PROP) (BARF))
	((EQ TYPE ':DATE)
	 (OR PROP (BARF))
	 (WHEN (LISTP PROP) (SETQ PROP (CAR PROP)))
	 (MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS DAY MONTH YEAR)
	     (TIME:DECODE-UNIVERSAL-TIME PROP)
	   (AND ( YEAR 1900.) (< YEAR 2000.)
		(SETQ YEAR (- YEAR 1900.)))
	   (FORMAT NIL "~D-~A-~D ~D:~2,48D:~2,48D" DAY (TIME:MONTH-STRING MONTH ':SHORT) YEAR
		   HOURS MINUTES SECONDS)))
	((STRINGP PROP) PROP)
	((NULL (CDR PROP))
	 (CANONICALIZE-RECIPIENT-FILTER-STRING (CAR PROP)))
	(T
	 (UNWIND-PROTECT
	   (PROGN
	     (PRINT-TYPEOUT-FILTER (FIRST
				     (ITEM-FROM-MENU-VALUE TYPE *HEADER-FILTER-MENU-ALIST*))
				   'MINI-BUFFER-STRING
				   (MAPCAR #'CANONICALIZE-RECIPIENT-FILTER-STRING PROP))
	     (SCL:ACCEPT 'MINI-BUFFER-STRING :STREAM *TYPEOUT-WINDOW*))
	   (SEND *TYPEOUT-WINDOW* ':MAKE-COMPLETE)))))

(DEFUN CANONICALIZE-RECIPIENT-FILTER-STRING (STRING)
  (COND ((STRINGP STRING) STRING)
	((NULL (CDR STRING)) (CAR STRING))
	(T (STRING-FROM-HEADER STRING ':SHORT))))

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* MINI-BUFFER-STRING "Insert" STRING T
;			  "Insert this string.")

(SCL:DEFINE-PRESENTATION-TYPE MINI-BUFFER-STRING ()
  :EXPANDER 'STRING)

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR MINI-BUFFER-STRING
						  (MINI-BUFFER-STRING "Insert" *ZMAIL-COMTAB*
								      :GESTURE :SELECT)
						  (STRING)
  `(INSERT-FORM-INTO-EDITOR-WINDOW ,STRING))

(DEFUN EDITOR-WINDOW-CLOSE-BUTTON (&AUX (*NUMERIC-ARG* 1) (*NUMERIC-ARG-P* NIL)
				   (*LAST-COMMAND-CHAR* #/m-/)))
  (MUST-REDISPLAY *WINDOW* (COM-MOVE-OVER-/)))
  (MOVE-BP *EDITOR-INSERT-BP* (POINT)))

(DEFUN READ-FROM-EDITOR-WINDOW (&AUX (FORM '*EOF*))
  (SEND *EDITOR-STREAM* ':SET-BP (INTERVAL-FIRST-BP *EDITOR-INTERVAL*))
  (LET ((READTABLE (INITIALIZE-SHARPSIGN-DOUBLEQUOTE-READTABLE-FOR-SYNTAX
		     (OR (SEND *EDITOR-INTERVAL* :GET :SYNTAX)
			 DEFAULT-LISP-SYNTAX-FOR-BUFFER-IO))))
    (CONDITION-CASE (ERR)
        (SETQ FORM (READ *EDITOR-STREAM*))
      (SYS:END-OF-FILE (BARF "Unbalanced parentheses"))
      (SYS:READ-ERROR NIL)))
  FORM)

(DEFUN GET-AND-COMPILE-FILTER (&AUX FILTER-PROP FILTER)
  (SETQ *TYPEOUT-WINDOW* (WINDOW-TYPEOUT-WINDOW *WINDOW*)
	TERMINAL-IO *TYPEOUT-WINDOW*)
  (SEND *TYPEOUT-WINDOW* ':MAKE-COMPLETE)
  (SETQ FILTER-PROP (EVAL (READ-FROM-EDITOR-WINDOW)))
  (OR (AND (EQ (CAR FILTER-PROP) ':PROPERTY)
	   (EQ (CADDR FILTER-PROP) 'FILTER-FUNCTION))
      (BARF "Does not look like a filter definition"))
  (SETQ FILTER (CADR FILTER-PROP))
  (LET ((TICK COMPILER:NEW-COMPILER-WARNINGS-TICK))
    (COMPILE FILTER-PROP)
    (AND ( TICK COMPILER:NEW-COMPILER-WARNINGS-TICK)
	 (NOT (Y-OR-N-P "Ok? " *TYPEOUT-WINDOW*))	;If there are warning messages,
	 (ABORT-CURRENT-COMMAND)))			;user has chance to not exit
  FILTER)

(DEFUN READ-NEW-NAME (NAME-BUTTON CHAR CHOICE-LIST DEFINITION-ACCESS-FUNCTION WHAT
		      &AUX STRING)
  (COND ((AND (MOUSE-CHAR-P CHAR) (CHAR-MOUSE-EQUAL CHAR #\MOUSE-1-1))	;Left button: new one
	 (SETQ STRING (READLINE-FROM-EDITOR-WINDOW "New name:"))
	 (LET ((BP (FORWARD-OVER *BLANKS* (FORWARD-ATOM (INTERVAL-FIRST-BP *INTERVAL*)))))
	   (SETQ BP (DELETE-INTERVAL BP (FORWARD-SEXP BP) T))
	   (PRIN1 (INTERN STRING) (OPEN-INTERVAL-STREAM BP)))
	 (MUST-REDISPLAY *WINDOW* DIS-TEXT))
	(T
	 (WHEN (NULL CHOICE-LIST)
	   (BARF "No ~As already defined to edit." WHAT))
	 (SETQ STRING (TV:MENU-CHOOSE CHOICE-LIST (FORMAT NIL "Existing ~A to edit" WHAT)
				      `(:WINDOW ,NAME-BUTTON)))
	 (OR STRING (ABORT-CURRENT-COMMAND))
	 (DELETE-INTERVAL *INTERVAL*)
	 (INSERT-FORM-INTO-EDITOR-WINDOW (FUNCALL DEFINITION-ACCESS-FUNCTION STRING))
	 (SETQ STRING (STRING STRING))))
  (SEND (TV:SHEET-SUPERIOR NAME-BUTTON) ':SET-PANES-NAME 'NAME-BUTTON STRING))

(DEFVAR *FILTER-DEFINITION-SUMMARY-DOCUMENTATION* "Select filters based on this message.")

(DEFUN DEFINE-NEW-FILTER (&OPTIONAL OLD-FILTER-NAME)
  (LET ((OLD-CONFIGURATION *WINDOW-CONFIGURATION*)
	(OLD-DOC (SEND *SUMMARY-WINDOW* :WHO-LINE-OVERRIDE-DOCUMENTATION-STRING)))
    (PKG-BIND "ZWEI"
      (UNWIND-PROTECT
	  (WITH-EXTENDED-SEARCH-DISPLAY
	    (SEND *SUMMARY-WINDOW* :SET-WHO-LINE-OVERRIDE-DOCUMENTATION-STRING
		  *FILTER-DEFINITION-SUMMARY-DOCUMENTATION*)
	    (SEND *ZMAIL-WINDOW* :SET-WINDOW-CONFIGURATION :FILTER)
	    (WHEN OLD-FILTER-NAME
	      (SEND *FILTER-WINDOW* :SET-FILTER OLD-FILTER-NAME))
	    (SEND *FILTER-WINDOW* :SELECT NIL)
	    (SEND *FILTER-WINDOW* :COMMAND-LOOP))
	(SEND *SUMMARY-WINDOW* :SET-WHO-LINE-OVERRIDE-DOCUMENTATION-STRING OLD-DOC)
	(SEND *ZMAIL-WINDOW* :SET-WINDOW-CONFIGURATION OLD-CONFIGURATION)))))

(DEFUN GENERATE-UNIQUE-NAME (LIST &OPTIONAL (NAME "Noname"))
  (DO ((I 1 (1+ I))
       (STRING))
      (NIL)
    (SETQ STRING (FORMAT NIL "~A-~D" NAME I))
    (OR (MEM #'(LAMBDA (X Y)
		 (IF (NOT (ATOM Y))
		     (SETQ Y (CAR Y)))
		 (STRING-EQUAL X Y))
	     STRING LIST)
	(RETURN STRING))
    (RETURN-ARRAY STRING)))

(DEFUN EXTRACT-FILTERS-FROM-MSG (MSG)
  (CL:LOOP
     (PRINT-MSG-TYPEOUT-FILTERS MSG)
     (CL:LOOP
	(CONDITION-BIND ((SI:CHARACTER-STYLE-ERROR
			  #'(LAMBDA (CONDITION) (SYS:PROCEED CONDITION :USE-UNDEFINED-STYLE))))
	  (REDISPLAY-ALL-WINDOWS))
	(LET* ((CH (LET ((*COMTAB* (SEND *CURRENT-COMMAND-LOOP* :MOUSE-GESTURE-COMTAB)))
		     (EDITOR-INPUT :ANY-TYI 'COMMAND)))
	       (TYPE (IF (LISTP CH) (FIRST CH) 'CHARACTER)))
	  (CL:CASE TYPE
	    (SUMMARY-MOUSE
	      (SETQ MSG (SECOND (SECOND CH)))
	      (RETURN))
	    (PRESENTATION-COMMAND
	      (CL:APPLY (FIRST (SECOND CH)) (CL:REST (SECOND CH))))
	    (OTHERWISE
	      (UNLESS (EQL CH #\Space)
		(SEND STANDARD-INPUT :UNTYI CH))
	      (SEND *TYPEOUT-WINDOW* :MAKE-COMPLETE)
	      (RETURN-FROM EXTRACT-FILTERS-FROM-MSG (VALUES))))))))
(DEFUN PRINT-MSG-TYPEOUT-FILTERS (MSG &OPTIONAL TYPE PROMPT INCLUDE-SITE)
  (LET ((*TYPEOUT-WINDOW* (SEND *SUMMARY-WINDOW* :TYPEOUT-WINDOW))
	(STATUS (ASSURE-MSG-PARSED MSG)))
    (IF TYPE
	(LET ((PRESENTATION-TYPE (CL:ECASE TYPE
				   (:RECIPIENT 'RECIPIENT-FIELD)
				   (:SENDER 'SENDER-FIELD)
				   (:SENDER-OR-RECIPIENT 'SENDER-OR-RECIPIENT-FIELD))))
	  (PRINT-MSG-TYPEOUT-FILTERS-1 PROMPT PRESENTATION-TYPE STATUS TYPE INCLUDE-SITE))
      (PRINT-MSG-TYPEOUT-FILTERS-1 "Authors: " 'SENDER-FIELD STATUS :SENDER INCLUDE-SITE)
      (PRINT-MSG-TYPEOUT-FILTERS-1 "Recipients: " 'RECIPIENT-FIELD STATUS
				   :RECIPIENT INCLUDE-SITE)
      (PRINT-TYPEOUT-FILTER "Subject: " 'SUBJECT-FIELD (GET-MSG-SUBJECT-CLEVERLY MSG NIL)))))

(DEFUN PRINT-MSG-TYPEOUT-FILTERS-1 (NAME TYPE STATUS TYPE-TYPE INCLUDE-SITE)
  (PRINT-TYPEOUT-FILTER
    NAME TYPE
    (LOOP FOR (TYPE HEADER) ON (CDR STATUS) BY 'CDDR
	  WHEN (HEADER-TYPE-TYPEP TYPE TYPE-TYPE)
	  NCONC (LOOP FOR RCPT IN HEADER
		      UNLESS (GETL (LOCF RCPT) '(:INFERIORS))
			COLLECT (IF INCLUDE-SITE
				    (STRING-FROM-HEADER RCPT :SHORT)
				    (GET (LOCF RCPT) :NAME))))))

(DEFUN PRINT-TYPEOUT-FILTER (NAME TYPE ELEMENTS)
  (WHEN ELEMENTS
    (SEND *TYPEOUT-WINDOW* ':FRESH-LINE)
    (SEND *TYPEOUT-WINDOW* ':STRING-OUT NAME)
    (IF (OR (NLISTP ELEMENTS) (NULL (CDR ELEMENTS)))	;Only one element
	(SCL:PRESENT (IF (LISTP ELEMENTS) (CAR ELEMENTS) ELEMENTS) TYPE
		     :STREAM *TYPEOUT-WINDOW*)
	(SCL:FORMAT-ITEM-LIST ELEMENTS :STREAM *TYPEOUT-WINDOW* :PRESENTATION-TYPE TYPE))))

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* RECIPIENT-FIELD "Use"
;			  INSERT-RECIPIENT-FIELD T
;			  "Use this recipient field.")

(SCL:DEFINE-PRESENTATION-TYPE RECIPIENT-FIELD ()
  :EXPANDER 'CL:STRING)

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR INSERT-RECIPIENT-FIELD
						  (RECIPIENT-FIELD
						    "Select messages to"
						    *ZMAIL-STANDALONE-COMTAB*
						    :GESTURE :SELECT)
						  (FIELD)
  `(INSERT-RECIPIENT-FIELD ,FIELD))

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR
  INSERT-SENDER-OR-RECIPIENT-FROM-RECIPIENT-FIELD (RECIPIENT-FIELD
						    "Select messages from//to"
						    *ZMAIL-STANDALONE-COMTAB*
						    :GESTURE :SELECT-AND-ACTIVATE)
						  (FIELD)
  `(INSERT-SENDER-OR-RECIPIENT-FIELD ,FIELD))

(DEFUN INSERT-RECIPIENT-FIELD (FIELD)
  (INSERT-FORM-INTO-EDITOR-WINDOW `(MSG-HEADER-ADDRESS-SEARCH ':RECIPIENT ,FIELD)))
(SCL:DEFINE-PRESENTATION-TYPE SENDER-FIELD ()
   :EXPANDER 'CL:STRING)

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR INSERT-SENDER-FIELD
						  (SENDER-FIELD
						    "Select messages from"
						    *ZMAIL-STANDALONE-COMTAB*
						    :GESTURE :SELECT)
						  (FIELD)
  `(INSERT-SENDER-FIELD ,FIELD))

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR INSERT-SENDER-OR-RECIPIENT-FROM-SENDER-FIELD
						  (SENDER-FIELD
						    "Select messages from//to"
						    *ZMAIL-STANDALONE-COMTAB*
						    :GESTURE :SELECT-AND-ACTIVATE)
			     (FIELD)
  `(INSERT-SENDER-OR-RECIPIENT-FIELD ,FIELD))

(DEFUN INSERT-SENDER-FIELD (FIELD)
  (INSERT-FORM-INTO-EDITOR-WINDOW `(MSG-HEADER-ADDRESS-SEARCH :SENDER ,FIELD)))

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* SENDER-OR-RECIPIENT-FIELD "Use"
;			  INSERT-SENDER-OR-RECIPIENT-FIELD T
;			  "Use this recipient field.")

(SCL:DEFINE-PRESENTATION-TYPE SENDER-OR-RECIPIENT-FIELD ()
  :EXPANDER 'CL:STRING)

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR INSERT-SENDER-OR-RECIPIENT-FIELD
						  (SENDER-OR-RECIPIENT-FIELD
						    "Select messages from//to"
						    *ZMAIL-STANDALONE-COMTAB*
						    :GESTURE :SELECT)
			     (FIELD)
  `(INSERT-SENDER-OR-RECIPIENT-FIELD ,FIELD))

(DEFUN INSERT-SENDER-OR-RECIPIENT-FIELD (FIELD)
  (INSERT-FORM-INTO-EDITOR-WINDOW
    `(MSG-HEADER-ADDRESS-SEARCH ':SENDER-OR-RECIPIENT ,FIELD)))

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* SUBJECT-FIELD "Search"
;			  INSERT-SUBJECT-FIELD-SEARCH T
;			  "Select messages whose subject contains this subject.")

(SCL:DEFINE-PRESENTATION-TYPE SUBJECT-FIELD ()
  :EXPANDER 'CL:STRING)

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR INSERT-SUBJECT-FIELD-SEARCH
						  (SUBJECT-FIELD
						    "Select messages whose subject contains"
						    *ZMAIL-STANDALONE-COMTAB*
						    :GESTURE :SELECT)
						  (FIELD)
  `(INSERT-SUBJECT-FIELD-SEARCH ,FIELD))

(DEFUN INSERT-SUBJECT-FIELD-SEARCH (FIELD)
  (INSERT-FORM-INTO-EDITOR-WINDOW `(MSG-HAS-SUBJECT-SEARCH-STRING MSG ,FIELD)))

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* SUBJECT-FIELD "Exact"
;			  INSERT-SUBJECT-FIELD-EXACT-MATCH NIL
;			  "Select messages with exactly this subject.")

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR INSERT-SUBJECT-FIELD-EXACT-MATCH
						  (SUBJECT-FIELD
						    "Select messages with the subject"
						    *ZMAIL-STANDALONE-COMTAB*
						    :GESTURE :SELECT-AND-ACTIVATE)
						  (FIELD)
  `(INSERT-SUBJECT-FIELD-EXACT-MATCH ,FIELD))

(DEFUN INSERT-SUBJECT-FIELD-EXACT-MATCH (FIELD)
  (INSERT-FORM-INTO-EDITOR-WINDOW `(MSG-HAS-SUBJECT-STRING MSG ,FIELD)))

(DEFUN CHOOSE-MSG-OR-READLINE (PROMPT &OPTIONAL DEFAULT HISTORY &AUX RESULT)
  (WITH-ZMAIL-SUMMARY-WHO-LINE-DOCUMENTATION
    "Select a message with the mouse."
    (*CATCH 'CHOOSE-MSG-OR-READLINE
      (CONDITION-BIND ((UNKNOWN-SPECIAL-COMMAND
			 #'CHOOSE-MSG-OR-READLINE-UNKNOWN-SPECIAL-COMMAND))
	(SETQ RESULT (TYPEIN-LINE-HISTORY-READLINE
		       HISTORY DEFAULT T
		       "~A:~@[ (Default: ~A)~]~:[ (Or select message with mouse)~]"
		       PROMPT DEFAULT
		       (NOT (MEMQ *WINDOW-CONFIGURATION* *SUMMARY-WINDOW-CONFIGURATIONS*)))))
      RESULT)))

(DEFUN CHOOSE-MSG-OR-READLINE-UNKNOWN-SPECIAL-COMMAND (CONDITION)
  (WHEN (EQ (SEND CONDITION :COMMAND-TYPE) 'SUMMARY-MOUSE)
    (*THROW 'CHOOSE-MSG-OR-READLINE (CADAR (SEND CONDITION :REST)))))

(DEFUN CHOOSE-OR-READLINE-ADDRESS (TYPE PROMPT &OPTIONAL NOT-P INCLUDE-SITE DEFAULT)
  (LET* ((FUNCTION (CL:ECASE TYPE
		     (:RECIPIENT 'MSG-HAS-RECIPIENT-FIELD)
		     (:SENDER 'MSG-HAS-SENDER-FIELD)
		     (:SENDER-OR-RECIPIENT 'MSG-HAS-SENDER-OR-RECIPIENT-FIELD)))
	 (ARGUMENT (CHOOSE-MSG-OR-READLINE PROMPT DEFAULT *ADDRESS-HISTORY*)))
    (IF (STRINGP ARGUMENT)
	(VALUES (FILTER-PREDICATE-OR-OPPOSITE FUNCTION NOT-P) ARGUMENT)
      (LET* ((MSG ARGUMENT)
	     (STATUS (ASSURE-MSG-PARSED MSG))
	     (ONLY-CHOICE))
	(IF (LOOP NAMED LOOK-FOR-ONLY-CHOICE
		  FOR (FIELD-TYPE FIELD-VALUE) ON (LOCATION-CONTENTS STATUS) BY 'CDDR
		  WHEN (HEADER-TYPE-TYPEP FIELD-TYPE TYPE)
		    DO (LOOP FOR ADDRESS IN FIELD-VALUE
			     UNLESS (GETL (LOCF ADDRESS) '(:INFERIORS))
			       IF ONLY-CHOICE
				 DO (RETURN-FROM LOOK-FOR-ONLY-CHOICE NIL)
			       ELSE
				 DO (IF INCLUDE-SITE
					(SETF ONLY-CHOICE (STRING-FROM-HEADER ADDRESS :SHORT))
					(SETF ONLY-CHOICE (GET (LOCF ADDRESS) :NAME))))
		  FINALLY
		    (RETURN-FROM LOOK-FOR-ONLY-CHOICE T))
	    (IF (TV:MOUSE-Y-OR-N-P (FORMAT NIL "Use ~A for ~(~A~)?" ONLY-CHOICE PROMPT))
		(VALUES (FILTER-PREDICATE-OR-OPPOSITE FUNCTION NOT-P) ONLY-CHOICE)
		(ABORT-CURRENT-COMMAND))
	    (GET-FILTERS-FROM-MSG MSG NOT-P TYPE
				  (STRING-APPEND (STRING-PLURALIZE PROMPT) ": ") INCLUDE-SITE))
	))))
(DEFUN GET-FILTERS-FROM-MSG (MSG NOT-P &OPTIONAL TYPE PROMPT INCLUDE-SITE)
  (PRINT-MSG-TYPEOUT-FILTERS MSG TYPE PROMPT INCLUDE-SITE)
  (LET* ((BLIP (DW:WITH-PRESENTATION-INPUT-CONTEXT ('((OR RECIPIENT-FIELD SENDER-FIELD
							  SENDER-OR-RECIPIENT-FIELD
							  SUBJECT-FIELD))
						    :STREAM STANDARD-INPUT)
						   (BLIP)
		    (LET ((CHAR (SYS:READ-CHARACTER STANDARD-INPUT
						    :PRESENTATION-CONTEXT T)))
		      (IGNORE CHAR)
		      (BARF))
		  (T BLIP)))
	 (VALUE (DW:PRESENTATION-BLIP-OBJECT BLIP))
	 (FUNCTION (FILTER-PREDICATE-OR-OPPOSITE
		     (DW:PRESENTATION-BLIP-ECASE BLIP
		       (RECIPIENT-FIELD 'MSG-HAS-RECIPIENT-FIELD)
		       (SENDER-FIELD 'MSG-HAS-SENDER-FIELD)
		       (SENDER-OR-RECIPIENT-FIELD 'MSG-HAS-SENDER-OR-RECIPIENT-FIELD)
		       (SUBJECT-FIELD
			 (SETQ *ZMAIL-FIND-DEFAULT* VALUE)
			 'MSG-HAS-SUBJECT-STRING))
		     NOT-P)))
    (VALUES FUNCTION VALUE)))

(DEFUN EXTRACT-SUBJECT-STRING-CLEVERLY (SUBJECT)
  (LET ((START 0) (END (STRING-LENGTH SUBJECT)) COLON)
    (LOOP DO
      (SETQ START (OR (STRING-SEARCH-NOT-SET *WHITESPACE-CHARS* SUBJECT START END) END))
      (SETQ END
	    (LET ((POS (STRING-REVERSE-SEARCH-NOT-SET *WHITESPACE-CHARS* SUBJECT END START)))
	      (IF POS (1+ POS) START)))
      (COND ((%STRING-EQUAL SUBJECT START "Re:" 0 3)
	     (INCF START 3))
	    ((AND ( (- END START) 2)
		  (EQL (AREF SUBJECT START) #/[)
		  (EQL (AREF SUBJECT (1- END)) #/])
		  (SETQ COLON (STRING-SEARCH-CHAR #/: SUBJECT START END))
		  (NOT (STRING-SEARCH-SET *WHITESPACE-CHARS* SUBJECT START COLON)))
	     (SETQ START (1+ COLON))
	     (DECF END))
	    (T
	     (RETURN (IF (AND (= START 0) (= END (STRING-LENGTH SUBJECT)))
			 SUBJECT (SUBSTRING SUBJECT START END))))))))

#|| ;Test case for EXTRACT-SUBJECT-STRING-CLEVERLY

(DEFUN TEST-EXTRACT-SUBJECT-STRING-CLEVERLY (&KEY VERBOSE) 
  (LET ((LOSERS '()))
    (DOLIST (TEST '(;; Minimal case -- test array bounds checking
		    ("" "")
		    ;; Obvious non-matches
		    ("foo" "foo")
		    ;; Partial matches
		    ("[" "[")
		    ("]" "]")
		    ("[foo: x] y" "[foo: x] y")
		    ("[who knows: the answer]" "[who knows: the answer]")
		    ("Help me! [1]" "Help me! [1]")
		    ("Help me! [Urgent]" "Help me! [Urgent]")
		    ("Re Mi Fa So La" "Re Mi Fa So La")
		    ;; Finally some real cases
		    ("  foo  " "foo")
		    ("[fred: i know]" "i know")
		    ("[fred: i know] " "i know")
		    ("[Fred@A.B.C:      ]" "")
		    ("Re: Mi Fa So La" "Mi Fa So La")
		    ("Re: Re: Re: Mi Fa So La" "Mi Fa So La")
		    ("Re: Mi Fa So La " "Mi Fa So La")
		    ("Re:   x y z" "x y z")
		    ("[JDoe@X.Y.Z: Re:  Foo]" "Foo")
		    ("[Fred: Re: [JDoe@X.Y.Z: Re:  Foo]]" "Foo")
		    ("Re: [Fred: Re: [JDoe@X.Y.Z: Re:  Foo]]" "Foo")
		    ("Re: [Fred: Regarding [JDoe@X.Y.Z: Re:  Foo]]"
		     "Regarding [JDoe@X.Y.Z: Re:  Foo]")))
      (LET ((RESULT (EXTRACT-SUBJECT-STRING-CLEVERLY (CAR TEST))))
	(WHEN VERBOSE
	  (FORMAT T "~&~S  ~S ~60T;~:[Wrong~;Right~]~%"
		  (CAR TEST) RESULT (STRING-EQUAL RESULT (CADR TEST))))
	(UNLESS (STRING-EQUAL RESULT (CADR TEST))
	  (PUSH (LIST (CAR TEST) :RESULT RESULT :SHOULD-BE (CADR TEST)) LOSERS))))
    (IF LOSERS `(:FAILURE ,@LOSERS) :SUCCESS)))

||#


(DEFUN GET-MSG-SUBJECT-CLEVERLY (MSG &OPTIONAL (ERROR-P T))
  (LET ((SUBJECT (MSG-GET MSG :SUBJECT)))
    (COND ((LISTP SUBJECT)
	   (LOOP FOR STRING IN SUBJECT
		 COLLECT (EXTRACT-SUBJECT-STRING-CLEVERLY STRING)))
	  ((STRINGP SUBJECT)
	   (EXTRACT-SUBJECT-STRING-CLEVERLY SUBJECT))
	  ((NOT (NULL SUBJECT))
	   (BARF "This message has an invalid subject field."))
	  (ERROR-P
	   (BARF "This message has no subject.")))))

(DEFUN SUBJECT-TO-STRING (SUBJECT)
  (COND ((STRINGP SUBJECT) SUBJECT)
	((= (LENGTH SUBJECT) 1) (FIRST SUBJECT))
	(T
	 (LOOP FOR STRING IN (REST1 SUBJECT)
	       WITH RESULT = (FIRST SUBJECT)
	       DOING (SETQ RESULT (STRING-APPEND RESULT #\Return STRING))
	       FINALLY
		 (RETURN RESULT)))))

(DEFUN MAKE-COLLECTION-FROM-FILTER-FROM-MSG (MSG)
  (MULTIPLE-VALUE-BIND (FILTER-FUNCTION FILTER-ARG)
      (GET-FILTERS-FROM-MSG MSG NIL)
    (MAKE-COLLECTION-FROM-FILTER *SEQUENCE* FILTER-FUNCTION FILTER-ARG)))

1;;; Filter definition components.

0(DEFUN MACRO-EXPAND-SEARCH-KEY (KEY &AUX FUNCTION (DEFAULT-CONS-AREA WORKING-STORAGE-AREA))
  (DECLARE (VALUES FUNCTION KEY))
  (COND ((AND (LISTP KEY) (EQ (FIRST KEY) 'MAKE-EXTENDED-SEARCH-STRING))
	 (MULTIPLE-VALUE (FUNCTION KEY)
	   (PARSE-EXTENDED-SEARCH-16B-STRING (MAKE-EXTENDED-SEARCH-STRING (SECOND KEY)))))
	((TYPEP KEY '16B-STRING)
	 (MULTIPLE-VALUE (FUNCTION KEY)
	   (PARSE-EXTENDED-SEARCH-16B-STRING KEY)))
	((STRINGP KEY)
	 (SETQ FUNCTION 'SEARCH))
	(T
	 (FERROR NIL "~S not a valid search key" KEY)))
  (VALUES FUNCTION KEY))

(DEFMACRO SEARCH-WITHIN-MSG (KEY)
  (MULTIPLE-VALUE-BIND (FUNCTION KEY)
      (MACRO-EXPAND-SEARCH-KEY KEY)
    `(,FUNCTION (MSG-START-BP MSG) ',KEY NIL NIL NIL (MSG-END-BP MSG))))

;;; Old style macro, may be in people's init files
(DEFMACRO MSG-HEADER-SEARCH (TYPE KEY)
  (IF (AND (LISTP TYPE) (EQ (CAR TYPE) 'QUOTE))
      (SETQ TYPE (CADR TYPE))
      (FERROR "This usage is too complicated to be expanded compatibly"))
  (LET ((EXP `(MSG-HEADERS-SEARCH '(,TYPE) ,KEY)))
    #|
    (COMPILER:WARN '(:OBSOLETE T)
		   "~S is an obsolete macro; use ~S instead."
		   'MSG-HEADER-SEARCH EXP)
    |#
    EXP))

(DEFMACRO MSG-HEADERS-SEARCH (TYPES KEY)
  (MULTIPLE-VALUE-BIND (FUNCTION KEY)
      (MACRO-EXPAND-SEARCH-KEY KEY)
    (SETQ FUNCTION (SELECTQ FUNCTION
		     (SEARCH 'STRING-SEARCH)
		     (FSM-EXPR-SEARCH 'FSM-STRING-SEARCH)
		     (FSM-SEARCH
		      (SETQ KEY (LIST KEY NIL))
		      'FSM-STRING-SEARCH)))
    `(MSG-HEADERS-SEARCH-INTERNAL STATUS ,TYPES #',FUNCTION ',KEY)))

(DEFUN MSG-HEADERS-SEARCH-INTERNAL(2 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB") 0(STATUS TYPES FUNCTION KEY)
  (CL:LABELS ((SEARCH (FIELD)
		      (CL:TYPECASE FIELD
			(CL:CONS 
			  (LOOP FOR STRING IN FIELD
				THEREIS (SEARCH STRING)))
			(T (FUNCALL FUNCTION KEY FIELD)))))
    (LOOP FOR TYPE IN TYPES
	  AS HEADER = (GET STATUS TYPE)
	  THEREIS (AND HEADER
		       (IF (LISTP HEADER)
			   (SEARCH HEADER)
			   (FUNCALL FUNCTION KEY HEADER))))))

#| old one, replaced by JCMa's patch

(DEFUN MSG-HEADERS-SEARCH-INTERNAL (STATUS TYPES FUNCTION KEY)
  (LOOP FOR TYPE IN TYPES
	AS HEADER = (GET STATUS TYPE)
	THEREIS (AND HEADER
		     (IF (LISTP HEADER)
			 (LOOP FOR STRING IN HEADER
			       THEREIS (FUNCALL FUNCTION KEY STRING))
			 (FUNCALL FUNCTION KEY HEADER)))))

|#

;;; Old style macro, may be in people's init files
(DEFMACRO MSG-HEADER-RECIPIENT-SEARCH (TYPE KEY)
  (COND ((AND (LISTP TYPE) (EQ (CAR TYPE) 'QUOTE))
	 (AND (SYMBOLP (CADR TYPE))
	      (SETQ TYPE `'(,(CADR TYPE)))))
	((EQ TYPE '*RECIPIENT-TYPE-HEADERS*)
	 (SETQ TYPE `':RECIPIENT))
	(T
	 (FERROR "This usage is too complicated to be expanded compatibly")))
  (LET ((EXP `(MSG-HEADER-ADDRESS-SEARCH ,TYPE ,KEY)))
    #|
    (COMPILER:WARN '(:OBSOLETE T)
		   "~S is an obsolete macro; use ~S instead."
		   'MSG-HEADER-RECIPIENT-SEARCH EXP)
    |#
    EXP))

1;;; Acceptable key syntax should be documented.
0(DEFMACRO MSG-HEADER-ADDRESS-SEARCH (TYPES KEY)
  (MULTIPLE-VALUE-BIND (ORIGINAL-FUNCTION ORIGINAL-KEY)
      (MACRO-EXPAND-SEARCH-KEY KEY)
    (MULTIPLE-VALUE-BIND (ACTUAL-FUNCTION ACTUAL-KEY)
	(COND ((EQ ORIGINAL-FUNCTION 'FSM-SEARCH)
	       (VALUES 'MSG-HEADER-RECIPIENT-FSM-SEARCH ORIGINAL-KEY))
	      ((EQ ORIGINAL-FUNCTION 'FSM-EXPR-SEARCH)
	       (VALUES 'MSG-HEADER-RECIPIENT-FSM-EXPR-SEARCH ORIGINAL-KEY))
	      ((AND (CHAR-EQUAL (AREF ORIGINAL-KEY 0) #/)
		    (CHAR-EQUAL (AREF ORIGINAL-KEY (1- (STRING-LENGTH ORIGINAL-KEY))) #/))
	       (VALUES 'MSG-HEADER-RECIPIENT-PARTIAL-MATCH
		       (SUBSTRING ORIGINAL-KEY 1 (1- (STRING-LENGTH ORIGINAL-KEY)))))
	      ((CHAR-EQUAL (AREF ORIGINAL-KEY 0) #/)
	       (VALUES 'MSG-HEADER-RECIPIENT-PARTIAL-MATCH-RIGHT
		       (SUBSTRING ORIGINAL-KEY 1)))
	      ((CHAR-EQUAL (AREF ORIGINAL-KEY (1- (STRING-LENGTH ORIGINAL-KEY))) #/)
	       (VALUES 'MSG-HEADER-RECIPIENT-PARTIAL-MATCH-LEFT
		       (SUBSTRING ORIGINAL-KEY 0 (1- (STRING-LENGTH ORIGINAL-KEY)))))
	      (T
	       (VALUES 'MSG-HEADER-RECIPIENT-MATCH ORIGINAL-KEY)))
      `(MSG-HEADER-ADDRESS-SEARCH-INTERNAL STATUS ,TYPES #',ACTUAL-FUNCTION ',ACTUAL-KEY))))

(DEFUN MSG-HEADER-ADDRESS-SEARCH-INTERNAL (STATUS TYPES FUNCTION KEY)
  (LOOP FOR (TYPE HEADER) ON (LOCATION-CONTENTS STATUS) BY 'CDDR
	THEREIS (AND (IF (LISTP TYPES) (MEMQ TYPE TYPES) (HEADER-TYPE-TYPEP TYPE TYPES))
		     (FUNCALL FUNCTION HEADER KEY))))

(DEFUN MSG-HEADER-RECIPIENT-FSM-SEARCH (RECIPIENTS KEY)
  (LOOP FOR RECIPIENT IN RECIPIENTS
	AS (TYPE VALUE) = (GETL (LOCF RECIPIENT) '(:ORIGINAL-STRING :INTERVAL))
	THEREIS
	  (SELECTQ TYPE
	    (:ORIGINAL-STRING
	      (FSM-STRING-SEARCH `(,KEY) VALUE))
	    (:INTERVAL
	      (FSM-SEARCH (FIRST VALUE) KEY NIL NIL NIL (SECOND VALUE))))))

(DEFUN MSG-HEADER-RECIPIENT-FSM-EXPR-SEARCH (RECIPIENTS KEY)
  (LOOP FOR RECIPIENT IN RECIPIENTS
	AS (TYPE VALUE) = (GETL (LOCF RECIPIENT) '(:ORIGINAL-STRING :INTERVAL))
	THEREIS
	  (SELECTQ TYPE
	    (:ORIGINAL-STRING
	      (FSM-STRING-SEARCH KEY VALUE))
	    (:INTERVAL
	      (FSM-EXPR-SEARCH (FIRST VALUE) KEY NIL NIL NIL (SECOND VALUE))))))

(DEFUN MSG-HEADER-RECIPIENT-PARTIAL-MATCH (RECIPIENTS KEY)
  (LOOP FOR RECIPIENT IN RECIPIENTS
	AS NAME = (CL:GETF RECIPIENT :NAME)
	THEREIS (AND NAME
		     (STRING-SEARCH KEY NAME))))

(DEFUN MSG-HEADER-RECIPIENT-PARTIAL-MATCH-LEFT (RECIPIENTS KEY)
  (LOOP WITH KEY-LENGTH = (STRING-LENGTH KEY)
	FOR RECIPIENT IN RECIPIENTS
	AS NAME = (CL:GETF RECIPIENT :NAME)
	THEREIS (AND NAME
		     (%STRING-EQUAL NAME 0
				    KEY 0
				    KEY-LENGTH))))

(DEFUN MSG-HEADER-RECIPIENT-PARTIAL-MATCH-RIGHT (RECIPIENTS KEY)
  (LOOP WITH KEY-LENGTH = (STRING-LENGTH KEY)
	FOR RECIPIENT IN RECIPIENTS
	AS NAME = (CL:GETF RECIPIENT :NAME)
	THEREIS (AND NAME
		     ( (STRING-LENGTH NAME) KEY-LENGTH)
		     (%STRING-EQUAL NAME (- (STRING-LENGTH NAME) KEY-LENGTH)
				    KEY 0
				    KEY-LENGTH))))

(DEFUN MSG-HEADER-RECIPIENT-MATCH (RECIPIENTS KEY)
  (COND ((STRING-SEARCH-CHAR #/@ KEY)
	 (STACK-LET* ((NAME-END (STRING-SEARCH-CHAR #/@ KEY))
		      (NAME-KEY (MAKE-ARRAY NAME-END
					    :TYPE (ARRAY-TYPE KEY)
					    :DISPLACED-TO KEY
					    :DISPLACED-INDEX-OFFSET 0))
		      (HOST-START (1+ NAME-END))
		      (HOST-KEY (MAKE-ARRAY (- (STRING-LENGTH KEY) HOST-START)
					    :TYPE (ARRAY-TYPE KEY)
					    :DISPLACED-TO KEY
					    :DISPLACED-INDEX-OFFSET HOST-START)))
	   (LOOP FOR RECIPIENT IN RECIPIENTS
		 AS NAME = (CL:GETF RECIPIENT :NAME)
		 AS HOST = (CL:GETF RECIPIENT :HOST)
		 THEREIS (AND NAME
			      (STRING-EQUAL NAME NAME-KEY)
			      HOST
			      (STRING-EQUAL (STRING-FROM-HOST HOST :HOST) HOST-KEY)))))
	((STRING-SEARCH-SET '(#\! #\%) KEY)
	 (LOOP FOR RECIPIENT IN RECIPIENTS
	       AS NAME = (CL:GETF RECIPIENT :NAME)
	       THEREIS (AND NAME
			    (STRING-EQUAL NAME KEY))))
	(T
	 (LOOP FOR RECIPIENT IN RECIPIENTS
	       AS TRUENAME = (ADDRESS-TRUENAME RECIPIENT)
	       THEREIS (AND TRUENAME
			    (STRING-EQUAL TRUENAME KEY))))))

1;;; Determine the true local name of an address modulo 0"!"1 and 0"%"1 routing.
0(DEFUN ADDRESS-TRUENAME (ADDRESS)
  (OR (CL:GETF ADDRESS :TRUENAME)
      1;; A null (3 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB"):truename1 property means that we should just use the 3:name1 property.
0      (AND (CL:GET-PROPERTIES ADDRESS '(:TRUENAME))
	   (CL:GETF ADDRESS :NAME))
      1;; Haven't computed the 3:truename1 yet.
0      (MULTIPLE-VALUE-BIND (IGNORE NAME NAME-PLACE)
	  (CL:GET-PROPERTIES ADDRESS '(:NAME))
	(WHEN NAME
	  (LET ((FIRST-%-POS (SCL:STRING-SEARCH "%" NAME))
		(LAST-!-POS  (SCL:STRING-SEARCH "!" NAME :FROM-END T)))
	    (MULTIPLE-VALUE-BIND (TRUENAME IS-NAME)
		(COND ((AND (NULL FIRST-%-POS) (NULL LAST-!-POS))
		       (VALUES NAME T))
		      ((AND FIRST-%-POS LAST-!-POS (OR (> LAST-!-POS FIRST-%-POS)
						       (= FIRST-%-POS (1+ LAST-!-POS))))
		       (VALUES NAME T))
		      (T
		       (SUBSTRING NAME (IF LAST-!-POS (1+ LAST-!-POS) 0) FIRST-%-POS)))
	      (SETF (REST2 NAME-PLACE) `(:TRUENAME ,(IF IS-NAME NIL TRUENAME)
					 ,@(REST2 NAME-PLACE)))
	      TRUENAME))))))

(DEFMACRO MSG-HEADER-RECIPIENT-EQUAL (TYPE KEY)
  `(LET ((.RECIPIENTS. (GET STATUS ,TYPE)))
     (AND (NULL (CDR .RECIPIENTS.))
	  (MSG-HEADER-RECIPIENT-MATCH .RECIPIENTS. ',KEY))))

(DEFPROP DEFINE-FILTER "Filter" SI:DEFINITION-TYPE-NAME)

(DEFMACRO DEFINE-EXPR-FILTER (FILTER-NAME ARGLIST &BODY FILTER-BODY &ENVIRONMENT ENV)
  `(DEFPROP ,FILTER-NAME ,(SI:DIGEST-LAMBDA `(LAMBDA ,ARGLIST ,@FILTER-BODY) ENV
					    `(:PROPERTY ,FILTER-NAME FILTER-FUNCTION) NIL)
	    EXPR-FILTER-FUNCTION))

(DEFMACRO DEFINE-FILTER (FILTER-NAME (MSG) &BODY BODY)
  (LET ((DOCUMENTATION))
    (IF (STRINGP (CAR BODY))
	(SETQ DOCUMENTATION (CAR BODY)
	      BODY (CDR BODY)))
    (LET* ((KEYWORDP
	     (BLOCK FORM-REFERENCES-KEYWORDS-P
	       (LT:MAPFORMS (LAMBDA (FORM KIND IGNORE IGNORE)
			      (AND (CL:MEMBER KIND 'LT:(SET SYMEVAL))
				   (NOT (CL:MEMBER FORM LT:*MAPFORMS-BOUND-VARIABLES*))
				   (EQ FORM 'KEYWORDS)
				   (RETURN-FROM FORM-REFERENCES-KEYWORDS-P T)))
			    `(PROGN . ,BODY) :BOUND-VARIABLES NIL)
	       NIL))
	   (STATUSP
	     (OR KEYWORDP
		 (BLOCK FORM-REFERENCES-STATUS-P
		   (LT:MAPFORMS (LAMBDA (FORM KIND IGNORE IGNORE)
				  (AND (CL:MEMBER KIND 'LT:(SET SYMEVAL))
				       (NOT (CL:MEMBER FORM LT:*MAPFORMS-BOUND-VARIABLES*))
				       (EQ FORM 'STATUS)
				       (RETURN-FROM FORM-REFERENCES-STATUS-P T)))
				`(PROGN . ,BODY) :BOUND-VARIABLES NIL)
		   NIL)))
	   (ARGLIST `(,MSG
		      ,@(WHEN (OR STATUSP KEYWORDP) `(&AUX))
		      ,@(WHEN STATUSP '(STATUS))
		      ,@(WHEN KEYWORDP '(KEYWORDS))))
	   (FILTER-BODY `((DECLARE (SYS:FUNCTION-PARENT ,FILTER-NAME DEFINE-FILTER))
			  ,@(WHEN STATUSP
			      `((SETQ STATUS (ASSURE-MSG-PARSED ,MSG))))
			  ,@(WHEN KEYWORDP
			      '((SETQ KEYWORDS (GET STATUS 'KEYWORDS))))
			  NIL			;Make empty body never true
			  . ,BODY)))
      `(PROGN
	 (DEFINE-FILTER-1 ',FILTER-NAME ',DOCUMENTATION)
	 (DEFINE-EXPR-FILTER ,FILTER-NAME ,ARGLIST ,@FILTER-BODY)
	 (DEFUN (:PROPERTY ,FILTER-NAME FILTER-FUNCTION) ,ARGLIST ,@FILTER-BODY)))))

1;;; Add a new filter-name with optional mouse documentation.
0(DEFUN DEFINE-FILTER-1 (FILTER DOCUMENTATION)
  (RECORD-SOURCE-FILE-NAME FILTER 'DEFINE-FILTER)
  (WHEN DOCUMENTATION
    (SETQ DOCUMENTATION `(:DOCUMENTATION ,DOCUMENTATION)))
  (LET ((ALIST-ENTRY (ASSQ FILTER *USER-FILTER-ALIST*))
	(ALIST-DATA `(:VALUE ,FILTER ,@DOCUMENTATION)))
    (IF ALIST-ENTRY
	(SETF (CDR ALIST-ENTRY) ALIST-DATA)
      (SETQ *USER-FILTER-ALIST* (NCONC *USER-FILTER-ALIST* (NCONS `(,FILTER ,@ALIST-DATA))))
      (WHEN *FILTER-ALIST-SORT-PREDICATE*
	(SETQ *USER-FILTER-ALIST* (CL:SORT *USER-FILTER-ALIST*
					   (EVAL *FILTER-ALIST-SORT-PREDICATE*)
					   :KEY #'FIRST))))))

(DEFUN GET-FILTER-DEFINITION (FILTER)
  (LET ((DEF (GET FILTER 'FILTER-FUNCTION))
	(DOC (GET (ASSQ FILTER *USER-FILTER-ALIST*) :DOCUMENTATION)))
    (WHEN (ATOM DEF)
      (SETQ DEF (OR (GET FILTER 'EXPR-FILTER-FUNCTION)
		    (SEND *PROFILE-EDITOR* :GET-EXPR-DEFINITION
			  FILTER 'DEFINE-FILTER 'EXPR-FILTER-FUNCTION 'FILTER-FUNCTION))))
    (SETQ DEF (SI:UNDIGEST DEF))
    (UNLESS (AND DEF
		 (NOT (ATOM DEF))
		 (FLET ((CHECK (FORM)
			  (AND (EQ (FIRST DEF) 'LAMBDA)
			       (NOT (ATOM FORM))
			       (EQ (FIRST FORM) 'DECLARE)
			       (NOT (ATOM (SECOND FORM)))
			       (EQ (FIRST (SECOND FORM)) 'SYS:FUNCTION-PARENT)
			       (EQ (SECOND (SECOND FORM)) FILTER)
			       (EQ (THIRD (SECOND FORM)) 'ZWEI:DEFINE-FILTER))))
		   (OR (AND (EQ (FIRST DEF) 'NAMED-LAMBDA)
			    (NOT (ATOM (SECOND DEF)))
			    (EQ (FIRST (FIRST (SECOND DEF))) ':PROPERTY)
			    (EQ (SECOND (FIRST (SECOND DEF))) FILTER))
		       (CHECK (THIRD DEF))
		       (CHECK (FOURTH DEF)))))
      (BARF "~A has an unrecognizable definition." FILTER))
    (DESTRUCTURING-BIND (NIL ARGLIST . BODY) DEF
      (MULTIPLE-VALUE-BIND (DECLARATIONS SPECIALS BODY BODY-DOC)
	  (SI:PARSE-BODY-DECLARATIONS BODY NIL)
	(FLET ((FLUSH-LEADING-NULLS ()
		 (LOOP WHILE BODY
		       WHILE (NULL (FIRST BODY))
		       DO (POP BODY))))
	  (FLUSH-LEADING-NULLS)
	  (WHEN (AND (EQ (FIRST (FIRST BODY)) 'BLOCK)
		     (EQ (SECOND (FIRST BODY)) FILTER))
	    (SETQ BODY (REST2 (FIRST BODY))))
	  (STACK-LET ((TEST-FORMS `((SETQ STATUS (ASSURE-MSG-PARSED ,(FIRST ARGLIST))
					  KEYWORDS (GET STATUS (QUOTE KEYWORDS)))
				    (SETQ STATUS (ASSURE-MSG-PARSED ,(FIRST ARGLIST)))
				    (SETQ KEYWORDS (GET STATUS (QUOTE KEYWORDS))))))
	    (LOOP WHILE (CL:MEMBER (FIRST BODY) TEST-FORMS :TEST #'CL:EQUAL)
		  DO (POP BODY)))
	  (FLUSH-LEADING-NULLS))
	(SETQ DECLARATIONS (CL:REMOVE-IF #'(LAMBDA (DECLARATION)
					     (MEMQ (FIRST DECLARATION)
						   '(SYS:FUNCTION-NAME SYS:FUNCTION-PARENT)))
					 DECLARATIONS)
	      DOC (COND ((AND DOC BODY-DOC) (STRING-APPEND DOC BODY-DOC))
			(DOC)
			(BODY-DOC)))
	(WHEN SPECIALS
	  (SETQ DECLARATIONS (APPEND DECLARATIONS `(SPECIAL ,@SPECIALS))))
	`(DEFINE-FILTER ,FILTER (,(FIRST ARGLIST))
	   ,@(WHEN DECLARATIONS
	       `((DECLARE ,@DECLARATIONS)))
	   ,@(IF DOC `(,DOC))
	   ,@BODY)))))

(DEFUN MACRO-EXPAND-DATE (DATE &AUX UNIVERSAL-TIME
				    (DEFAULT-CONS-AREA WORKING-STORAGE-AREA)
				    RELATIVE-P)
  (OR (STRINGP DATE)
      (FERROR NIL "~S is not a valid date" DATE))
  (MULTIPLE-VALUE (UNIVERSAL-TIME RELATIVE-P)
    (TIME:PARSE-UNIVERSAL-TIME DATE 0 NIL NIL))
  (AND (ERRORP UNIVERSAL-TIME) (FERROR NIL "~A in ~S" UNIVERSAL-TIME DATE))
  (VALUES UNIVERSAL-TIME RELATIVE-P))


;; Currently the "NOW" argument to MACRO-EXPAND-RELATIVE-DATE is useless.
;; However, if anything special is to be done with things like "A week after
;; my birthday" or "January", besides forcing them to be absolute, the current
;; date is required.

(DEFUN MACRO-EXPAND-RELATIVE-DATE (DATE NOW &REST OTHERS
				   &AUX (DEFAULT-CONS-AREA WORKING-STORAGE-AREA)
				   RELATIVE-P)
  (MULTIPLE-VALUE (DATE RELATIVE-P)
    (MACRO-EXPAND-DATE DATE))
  (SETQ OTHERS (COPYLIST OTHERS))
  (IF (EQ RELATIVE-P ':RELATIVE)
      `(- (TIME:GET-UNIVERSAL-TIME)
	  ,(- (TIME:GET-UNIVERSAL-TIME) DATE)	;Relative:  Compute offset from now
	  ,@OTHERS)
      `(- (TIME:GET-UNIVERSAL-TIME)
	  ,(- (MACRO-EXPAND-DATE NOW) DATE)	;Absolute:  Compute offset from then
	  ,@OTHERS)))


(DEFMACRO MSG-SAME-DATE (DATE)
  (SETQ DATE (MACRO-EXPAND-DATE DATE))
  `(LET ((.DATE. (MSG-STATUS-GET-DATE STATUS)))
     (AND (NOT (NULL .DATE.))
	  ( ',DATE .DATE.)
	  (> ',(LET ((DEFAULT-CONS-AREA WORKING-STORAGE-AREA))
		 (+ DATE 86400.))
	     .DATE.))))

(DEFMACRO MSG-SAME-RELATIVE-DATE (DATE NOW)
  `(LET ((.DATE. (MSG-STATUS-GET-DATE STATUS)))
     (AND (NOT (NULL .DATE.))
	  ( ,(MACRO-EXPAND-RELATIVE-DATE DATE NOW) .DATE.)
	  (> ,(MACRO-EXPAND-RELATIVE-DATE DATE NOW -86400.) .DATE.))))
  
(DEFMACRO MSG-DATE-LESSP (DATE)
  `(LET ((.DATE. (MSG-STATUS-GET-DATE STATUS)))
     (AND (NOT (NULL .DATE.))
	  (< .DATE. ',(MACRO-EXPAND-DATE DATE)))))

(DEFMACRO MSG-RELATIVE-DATE-LESSP (DATE NOW)
  `(LET ((.DATE. (MSG-STATUS-GET-DATE STATUS)))
     (AND (NOT (NULL .DATE.))
	  (< .DATE. ,(MACRO-EXPAND-RELATIVE-DATE DATE NOW)))))

(DEFMACRO MSG-DATE-GREATERP (DATE)
  `(LET ((.DATE. (MSG-STATUS-GET-DATE STATUS)))
     (AND (NOT (NULL .DATE.))
	  ( .DATE. ',(MACRO-EXPAND-DATE DATE)))))

(DEFMACRO MSG-RELATIVE-DATE-GREATERP (DATE NOW)
  `(LET ((.DATE. (MSG-STATUS-GET-DATE STATUS)))
     (AND (NOT (NULL .DATE.))
	  ( .DATE. ,(MACRO-EXPAND-RELATIVE-DATE DATE NOW)))))

(DEFINE-ZMAIL-GLOBAL *LAST-COMMAND-FILTER-FUNCTION* NIL)
(DEFINE-ZMAIL-GLOBAL *LAST-COMMAND-FILTER-ARG* NIL)
(DEFINE-ZMAIL-GLOBAL *LAST-COMMAND-FILTER-NAME* NIL)

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION GET-FILTER-FUNCTION-FOR-COMMAND
				       *FILTER-BUTTON-DOCUMENTATION*)

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION-UPDATER GET-FILTER-FUNCTION-FOR-COMMAND (STRING)
  (FORMAT STRING "Change filter for next command: ~@[L: ~A; ~]R: menu."
	  *LAST-COMMAND-FILTER-NAME*))

(DEFUN GET-FILTER-FUNCTION-FOR-COMMAND (&AUX FUN ARG)
  (MULTIPLE-VALUE (NIL FUN ARG)
    (GET-FILTER-FUNCTION-1 NIL NIL '(:MOUSE)))
  (VALUES FUN ARG (FILTER-FUNCTION-COLLECTION-NAME FUN ARG)))

1;;; Reconstruct Zmail's filter selection and filter definition frames --
;;;    Invoke this method on the Zmail frame after changing the set of acceptable filter
;;;    specifiers to insure that Zmail displays the new set.
0(DEFMETHOD (RECONSTRUCT-FILTER-FRAMES ZMAIL-FRAME) ()
  (WHEN (TYPEP *FILTER-SELECTION-FRAME* 'FILTER-SELECTION-FRAME)
    (SEND *FILTER-SELECTION-FRAME* :SEND-PANE 'SYSTEM-FILTER-MENU
	  :SET-ITEM-LIST     `(("All" :VALUE :ALL
				:STYLE (:SWISS :BOLD-ITALIC :NORMAL)
				:DOCUMENTATION "All messages in this universe.")
			       ,@(CL:SORT
				   (CL:CONCATENATE 'LIST
				     *SYSTEM-FILTER-ALIST*
				     *FILTER-SELECTION-ADDITIONAL-SYSTEM-FILTERS-ALIST*)
				   #'STRING-LESSP :KEY #'FIRST)))
    (SEND *FILTER-SELECTION-FRAME* :COMPUTE-GEOMETRY NIL NIL NIL))
  (WHEN (TYPEP *FILTER-WINDOW* 'ZMAIL-FILTER-FRAME)
    (SEND *FILTER-WINDOW*
	  :SEND-PANE 'SYSTEM-FILTER-MENU :SET-ITEM-LIST *SYSTEM-FILTER-ALIST*)
    (SEND *FILTER-WINDOW*
	  :SEND-PANE 'HEADER-FILTER-MENU :SET-ITEM-LIST *HEADER-FILTER-MENU-ALIST*)
    (SEND *FILTER-WINDOW*
	  :SEND-PANE 'DATE-FILTER-MENU :SET-ITEM-LIST *DATE-FILTER-MENU-ALIST*)
    (SEND *FILTER-WINDOW* :SET-CONFIGURATION 'ONLY))
  T)
