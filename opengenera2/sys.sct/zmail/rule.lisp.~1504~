;;; -*- Mode: LISP; Base: 8;  Package: ZWEI -*-
;;; Rule processing system
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; This is a filter alist.  The CDR is a plist of action and argument.
;;; For example ((USELESS-FILTER :DELETE T) (IMPORTANT-FILTER :KEYWORDS (:P1)))
(DEFINE-ZMAIL-GLOBAL *RULES-ALIST* NIL)

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-RUN-RULES-MSG "Run rules over current message."
  ()
  (UNLESS (RUN-RULES-MSG *MSG* *TYPEIN-WINDOW*)
    (TYPEIN-LINE "No rules satisified."))
  DIS-NONE)

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-RUN-RULES-ALL "Run rules over current sequence."
  ()
  (DOMSGS (MSG *SEQUENCE*)
    (RUN-RULES-MSG MSG))
  DIS-NONE)

(DEFUN RUN-RULES-MSG (MSG &OPTIONAL (TRACE-STREAM STANDARD-OUTPUT))
  (LOOP FOR (FILTER . ACTIONS) IN *RULES-ALIST*
	WITH (TOLD-P DID-SOMETHING-P)
	WHEN (MSG-FITS-FILTER-P MSG FILTER)
	  DO (SETQ DID-SOMETHING-P T)
	     (WHEN TRACE-STREAM
	       (IF TOLD-P
		   (STRING-OUT "; " TRACE-STREAM)
		 (FORMAT TRACE-STREAM "~&~A fits ~A: " (MSG-DESCRIPTION MSG) FILTER)
		 (SETQ TOLD-P T)))
	     (LOOP FOR (KEY ARG) ON ACTIONS BY 'CDDR
		   WHEN TRACE-STREAM
		     DO (FUNCALL (GET KEY 'DOCUMENT-RULE-FUNCTION) TRACE-STREAM MSG ARG)
		   DO (FUNCALL (GET KEY 'RULE-FUNCTION) MSG ARG))
	FINALLY (WHEN TOLD-P (FORMAT TRACE-STREAM ".~%"))
		(RETURN DID-SOMETHING-P)))

(DEFUN (:RUN-RULES INSERT-INBOX-HOOK) (BUFFER ARRAY START END)
  BUFFER
  (LOOP FOR I FROM START BELOW END
	AS MSG = (AREF ARRAY I)
	UNLESS (MSG-GET MSG ':DELETED)
	  DO (RUN-RULES-MSG MSG)))

;;;; Rule functions
(DEFUN (:DELETE RULE-FUNCTION) (MSG IGNORE)
  (ZMAIL-DELETE-MSG MSG))

(DEFUN (:DELETE DOCUMENT-RULE-FUNCTION) (STREAM IGNORE IGNORE)
  (STRING-OUT "deleting it" STREAM))

(DEFUN (:ADD-KEYWORDS RULE-FUNCTION) (MSG KEYWORDS)
  (LET* ((OLD-KEYWORDS (MSG-GET MSG 'KEYWORDS))
	 (NEW-KEYWORDS OLD-KEYWORDS))
    (DOLIST (ADD KEYWORDS)
      (PUSH* ADD NEW-KEYWORDS))
    (CHANGE-MSG-KEYWORDS MSG NEW-KEYWORDS OLD-KEYWORDS)))

(DEFUN (:ADD-KEYWORDS DOCUMENT-RULE-FUNCTION) (STREAM IGNORE KEYWORDS)
  (FORMAT STREAM "adding keywords ~A" (STRING-FROM-KEYWORDS KEYWORDS)))

(DEFUN (:REMOVE-KEYWORDS RULE-FUNCTION) (MSG KEYWORDS)
  (LET* ((OLD-KEYWORDS (MSG-GET MSG 'KEYWORDS))
	 (NEW-KEYWORDS OLD-KEYWORDS))
    (DOLIST (REM KEYWORDS)
      (SETQ NEW-KEYWORDS (REMQ REM NEW-KEYWORDS)))
    (CHANGE-MSG-KEYWORDS MSG NEW-KEYWORDS OLD-KEYWORDS)))

(DEFUN (:REMOVE-KEYWORDS DOCUMENT-RULE-FUNCTION) (STREAM IGNORE KEYWORDS)
  (FORMAT STREAM "removing keywords ~A" (STRING-FROM-KEYWORDS KEYWORDS)))

(DEFUN (:MOVE-TO-FILE RULE-FUNCTION) (MSG FILENAME)
  (SEND (GET-BUFFER-FROM-PATHNAME FILENAME T) ':ADD-MSG MSG))

(DEFUN (:MOVE-TO-FILE DOCUMENT-RULE-FUNCTION) (STREAM IGNORE FILENAME)
  (FORMAT STREAM "moving to ~A" FILENAME))

;;; Send an automatic reply, forward or remail, etc.
(DEFUN (:COMPOSE RULE-FUNCTION) (MSG TEMPLATE)
  (COMPOSE-FROM-TEMPLATE TEMPLATE ':MSGS (LIST MSG)))

(DEFUN (:COMPOSE DOCUMENT-RULE-FUNCTION) (STREAM IGNORE TEMPLATE)
  (FORMAT STREAM "sending mail using ~A" TEMPLATE))

;;; Old rule system (filter alist processing).  Probably not used much any more.
(DEFUN MAKE-COLLECTION-OF-RECENT-MSGS (&AUX COLLECTION NEW-ARRAY ARRAY)
  (SETQ COLLECTION (MAKE-SEQUENCE 'COLLECTION ':NAME "Recent")
	NEW-ARRAY (SEND COLLECTION ':ARRAY)
	ARRAY (SEND *SEQUENCE* ':ARRAY))
  (DO ((I 0 (1+ I))
       (NMSGS (ARRAY-ACTIVE-LENGTH ARRAY))
       (MSG))
      (( I NMSGS))
    (SETQ MSG (AREF ARRAY I))
    (IF (GET (LOCF (MSG-STATUS MSG)) 'RECENT)	;Cannot be recent if not parsed
	(ARRAY-PUSH-EXTEND NEW-ARRAY MSG)
	(RETURN T)))				;Can stop when find first non-recent
  COLLECTION)

;;; Quick processing of a set of messages
(DEFUN PROCESS-FILTER (FILTER &REST OPTIONS &AUX NAME NAME-BEFORE NAME-AFTER)
  (MULTIPLE-VALUE (FILTER NAME NAME-BEFORE NAME-AFTER)
    (PARSE-FILTER-SPEC FILTER))
  (LEXPR-FUNCALL #'PROCESS-FILTER-1 'MSG-FITS-FILTER-P FILTER
		 NAME NAME-BEFORE NAME-AFTER OPTIONS)
  (COMPUTE-CURRENT-MSG-STATE))

(DEFUN PARSE-FILTER-SPEC (FILTER &AUX NAME NAME-BEFORE NAME-AFTER)
  (DECLARE (VALUES FILTER NAME NAME-BEFORE NAME-AFTER))
  (IF (ATOM FILTER)
      (SETQ NAME FILTER NAME-AFTER NAME)
      (SETQ NAME (CADR FILTER) FILTER (CAR FILTER))
      (IF (ATOM NAME)
	  (SETQ NAME-AFTER NAME)
	  (SETQ NAME-BEFORE (CAR NAME) NAME-AFTER (CADR NAME)
		NAME (OR NAME-BEFORE NAME-AFTER))))
  (VALUES FILTER NAME NAME-BEFORE NAME-AFTER))

(DEFUN PROCESS-FILTER-1 (FILTER FILTER-ARG NAME NAME-BEFORE NAME-AFTER
				&REST OPTIONS
				&AUX (UNIVERSE *SEQUENCE*) (LAST-P T)
				     (COUNT-P ':ENGLISH) (SURVEY-P T)
				     (TYPE-P ':ASK) (DELETE-P NIL) (KEYWORDS NIL) (SAVE-P NIL)
				     (MARKING-FUNCTION NIL) (NOT-IF-MARKED-P NIL)
				     COLLECTION ARRAY NMSGS N-ALREADY-MARKED PRONOUN)
  (WITH-OVERLYING-WINDOW (STREAM)
    (LET ((TERMINAL-IO STREAM)
	  (STANDARD-INPUT SI:SYN-TERMINAL-IO)
	  (STANDARD-OUTPUT SI:SYN-TERMINAL-IO)
	  (QUERY-IO SI:SYN-TERMINAL-IO))
      (TV:DOPLIST (OPTIONS VAL KEY)
	(SELECTQ KEY
	  (:UNIVERSE
	   (SETQ UNIVERSE VAL))
	  (:COUNT-P
	   (SETQ COUNT-P VAL))
	  (:SURVEY-P
	   (SETQ SURVEY-P VAL))
	  (:TYPE-P
	   (SETQ TYPE-P VAL))
	  (:DELETE-P
	   (SETQ DELETE-P VAL))
	  (:SAVE-P
	   (SETQ SAVE-P VAL))
	  (:KEYWORDS
	   (SETQ KEYWORDS VAL))
	  (:MARKING-FUNCTION
	   (SETQ MARKING-FUNCTION VAL))
	  (:NOT-IF-MARKED-P
	   (SETQ NOT-IF-MARKED-P VAL))
	  (:LAST-P
	   (SETQ LAST-P VAL))
	  (OTHERWISE
	   (FERROR NIL "Unknown keyword: ~S" KEY))))
      (SETQ COLLECTION (MAKE-SEQUENCE 'COLLECTION ':NAME NAME))
      (MAKE-COLLECTION-FROM-FILTER UNIVERSE FILTER FILTER-ARG COLLECTION)
      (SETQ ARRAY (SEND COLLECTION ':ARRAY)
	    NMSGS (ARRAY-ACTIVE-LENGTH ARRAY)
	    N-ALREADY-MARKED 0)
      (WHEN MARKING-FUNCTION
	(DO ((I 0 (1+ I))
	     (MSG))
	    (( I NMSGS))
	  (SETQ MSG (AREF ARRAY I))
	  (WHEN (AND (NOT (FUNCALL MARKING-FUNCTION MSG))
		     NOT-IF-MARKED-P)		;Already done once
	    (REMOVE-MSG COLLECTION MSG I)
	    (SETQ N-ALREADY-MARKED (1+ N-ALREADY-MARKED)
		  NMSGS (1- NMSGS)
		  I (1- I)))))
      (WHEN COUNT-P
	(LET ((BASE (IF (EQ COUNT-P T) 10. COUNT-P)))
	  (FORMAT T "~&~@(~A~) ~@[~A ~]message~P~@[ ~A~]~
			~:[ (not counting ~A message~:P already done)~].~%"
		  NMSGS NAME-BEFORE NMSGS NAME-AFTER
		  (ZEROP N-ALREADY-MARKED) N-ALREADY-MARKED)))
      (UNLESS (ZEROP NMSGS)
	(SETQ PRONOUN (IF (= NMSGS 1) "it" "them"))
	(WHEN (OR (EQ SURVEY-P T)
		  (AND (EQ SURVEY-P ':ASK)
		       (SETQ SURVEY-P (FQUERY NIL "Survey ~A? " PRONOUN))))
	  (SEND STANDARD-OUTPUT ':FRESH-LINE)
	  (DO ((I 0 (1+ I))
	       (MSG) (STATUS))
	      (( I NMSGS))
	    (SETQ MSG (AREF ARRAY I)
		  STATUS (ASSURE-MSG-PARSED MSG))
	    (UNWIND-PROTECT
		(PROGN (SETF (TV:SHEET-TRUNCATE-LINE-OUT-FLAG TERMINAL-IO) 1)
		       (FORMAT T " ~3D~C~A"
			       (1+ I) (STATUS-LETTER STATUS) (MSG-SUMMARY-LINE MSG)))
	      (SETF (TV:SHEET-TRUNCATE-LINE-OUT-FLAG TERMINAL-IO) 0))
	    (SEND STANDARD-OUTPUT ':TYO #\CR)))
	(WHEN (OR (EQ TYPE-P T)
		  (AND (EQ TYPE-P ':ASK)
		       (SETQ TYPE-P (FQUERY NIL "Type ~A? " PRONOUN))))
	  (ZMAIL-TYPE-MSG-SEQUENCE COLLECTION :MARK-SEEN T))
	(WHEN (OR (EQ DELETE-P T)
		  (AND (EQ DELETE-P ':ASK)
		       (SETQ DELETE-P (FQUERY NIL "Delete ~A? " PRONOUN))))
	  (DO I 0 (1+ I) ( I NMSGS)
	      (MSG-PUT (AREF ARRAY I) T 'DELETED)))
	(WHEN (NOT DELETE-P)
	  (WHEN KEYWORDS
	    (DO ((KEYS KEYWORDS (CDDR KEYS))
		 (KEY-P) (KEYWORDS))
		((NULL KEYS))
	      (SETQ KEY-P (CAR KEYS)
		    KEYWORDS (CADR KEYS))
	      (COND ((EQ KEY-P ':ASK)
		     (FORMAT T "~&Add keyword~P" (LENGTH KEYWORDS))
		     (DOLIST (KEY KEYWORDS)
		       (SEND STANDARD-OUTPUT ':TYO #\SP)
		       (SEND STANDARD-OUTPUT ':STRING-OUT
			     (OR (CAR (RASSQ KEY *KEYWORD-ALIST*))
				 (STRING KEY))))
		     (SEND  STANDARD-OUTPUT ':STRING-OUT "? ")
		     (SETQ KEY-P (Y-OR-N-P))))
	      (WHEN KEY-P
		(DOMSGS (MSG COLLECTION)
		  (LET* ((OLD-KEYWORDS (MSG-GET MSG 'KEYWORDS))
			 (NEW-KEYWORDS (DO ((L KEYWORDS (CDR L))
					    (NL (REVERSE OLD-KEYWORDS)))
					   ((NULL L) (NREVERSE NL))
					 (OR (MEMQ (CAR L) NL)
					     (PUSH (CAR L) NL)))))
		    (CHANGE-MSG-KEYWORDS MSG NEW-KEYWORDS OLD-KEYWORDS))))))
	  (WHEN (OR (EQ SAVE-P T)
		    (AND (EQ SAVE-P ':ASK)
			 (SETQ SAVE-P (FQUERY NIL "Save ~A? " PRONOUN))))
	    (SETQ *SEQUENCE-LIST* (NCONC *SEQUENCE-LIST* (NCONS COLLECTION))))))
      (WHEN LAST-P
	(FORMAT T "~&Type any character to flush:")
	(SEND STANDARD-INPUT ':TYI)))))

(DEFUN PROCESS-FILTER-ALIST (SEQUENCE ALIST &OPTIONAL MENU-P)
  (PROCESS-FILTER-ALIST-1 SEQUENCE ALIST MENU-P)
  (COMPUTE-CURRENT-MSG-STATE))

(DEFUN PROCESS-FILTER-ALIST-1 (SEQUENCE ALIST &OPTIONAL MENU-P &AUX LIST MARK-P)
  (DOMSGS (MSG SEQUENCE)
    (MSG-PUT MSG NIL 'PROCESSED))
  (IF MENU-P
      (DO ((AL ALIST (CDR AL))
	   (L NIL)
	   (FILTER) (NAME) (ITEM))
	  ((NULL AL) (SETQ LIST (NREVERSE L)))
	(SETQ FILTER (CAR AL))
	(SETQ NAME (IF (ATOM (CAR FILTER)) (STRING (CAR FILTER)) (CADR FILTER)))
	(AND (LISTP NAME) (SETQ NAME (CAR NAME)))
	(SETQ ITEM `(,NAME :VALUE ,FILTER))
	(AND (EQ (IF (ATOM (CAR FILTER)) (CAR FILTER) (CAAR FILTER)) 'NOT-PROCESSED)
	     (SETQ MARK-P T
		   ITEM (NCONC ITEM '((:FONT FONTS:HL12I)))))
	(PUSH ITEM L))
      (SETQ LIST ALIST)
      (DO ((AL ALIST (CDR AL))
	   (FILTER))
	  ((NULL AL))
	(SETQ FILTER (CAAR AL))
	(AND (EQ (IF (ATOM FILTER) FILTER (CAR FILTER)) 'NOT-PROCESSED)
	     (SETQ MARK-P T))))
  (AND MARK-P (SETQ MARK-P 'MARK-MSG-AS-PROCESSED))
  (DO ((ITEM) (FILTER) (NAME) (NAME-BEFORE) (NAME-AFTER) (FILTER-ARG))
      (NIL)
    (SETQ ITEM (IF MENU-P (TV:MENU-CHOOSE LIST) (POP LIST)))
    (AND (NULL ITEM) (RETURN T))
    (MULTIPLE-VALUE (FILTER NAME NAME-BEFORE NAME-AFTER)
      (PARSE-FILTER-SPEC (CAR ITEM)))
    (IF (EQ FILTER 'NOT-PROCESSED)
	(SETQ FILTER 'MSG-DOES-NOT-HAVE-ATTRIBUTE-P
	      FILTER-ARG 'PROCESSED)
      (PSETQ FILTER 'MSG-FITS-FILTER-P
	     FILTER-ARG FILTER))
    (LEXPR-FUNCALL #'PROCESS-FILTER-1 FILTER FILTER-ARG NAME NAME-BEFORE NAME-AFTER
		   ':UNIVERSE SEQUENCE ':MARKING-FUNCTION MARK-P ':LAST-P (NULL LIST)
		   (CDR ITEM))
    (FORMAT T "~2&")))

;;; Return T if processed for the first time
(DEFUN MARK-MSG-AS-PROCESSED (MSG &AUX (STATUS (ASSURE-MSG-PARSED MSG)))
  (AND (NOT (GET STATUS 'PROCESSED))
       (PUTPROP STATUS T 'PROCESSED)))
