;;; -*- Mode: LISP; Package: KBIN; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;;; Format definition

;;; Commands are 16-bits, high byte is first level dispatch.
;;; First level opcodes > 200 are immediate numbers in the range -40000 to +77777
;;; First level opcodes 100 to 200 are immediate table fetches.
;;; First level opcodes 24 to 100 are permanent table fetches.

(defvar *kbin-first-level-command-table*
	(zl:make-array #o400 ':initial-value 'kbin-illegal-opcode))

(defprop define-kbin-first-level-opcode defconstant zwei:definition-function-spec-type)
(defmacro define-kbin-first-level-opcode (name value &optional count)
  `(progn 'compile
     (defconstant ,name ,value)
     (add-kbin-first-level-opcode ',name ,value ,(or count 1))))

(defun add-kbin-first-level-opcode (name value count)
  (loop repeat count
	for index from value
	do (setf (aref *kbin-first-level-command-table* index) name)))

(defconstant *min-immediate-integer* (lsh #o-100 8))
(defconstant *max-immediate-integer* (1- (lsh #o100 8)))
(defconstant %immediate-integer-byte (byte (+ 8 7) 0))
(define-kbin-first-level-opcode kbin-immediate-integer #o200 #o200)
(defconstant *immediate-table-fetch-max-index* (1- (lsh #o100 8)))
(define-kbin-first-level-opcode kbin-immediate-table-fetch #o100 #o100)
(defconstant *immediate-permanent-table-fetch-max-index* (1- (lsh #o54 8)))
(define-kbin-first-level-opcode kbin-immediate-permanent-table-fetch #o24 #o54)
(define-kbin-first-level-opcode kbin-command 1)
(define-kbin-first-level-opcode kbin-temporary-command 2)
(define-kbin-first-level-opcode kbin-permanent-command 3)
(define-kbin-first-level-opcode kbin-immediate-string 4)
(define-kbin-first-level-opcode kbin-immediate-temporary-string 5)
(define-kbin-first-level-opcode kbin-immediate-permanent-string 6)
(define-kbin-first-level-opcode kbin-immediate-list 7)
(define-kbin-first-level-opcode kbin-immediate-temporary-list 8)
(define-kbin-first-level-opcode kbin-immediate-permanent-list 9)
(define-kbin-first-level-opcode kbin-immediate-line 10)
(define-kbin-first-level-opcode kbin-immediate-fat-line 11)	;Obsolete

;; Maps from level one opcode to version which stores either TEMPORARILY or PERMANENTLY
(defvar *level-one-table-codes*
	`((,kbin-command ,kbin-temporary-command ,kbin-permanent-command)
	  (,kbin-immediate-list ,kbin-immediate-temporary-list ,kbin-immediate-permanent-list)
	  (,kbin-immediate-string ,kbin-immediate-temporary-string
	   ,kbin-immediate-permanent-string)))

(defsubst level-1 (opcode)
  (ldb (byte 8 8) opcode))

(defsubst level-2 (opcode)
  (ldb (byte 8 0) opcode))

