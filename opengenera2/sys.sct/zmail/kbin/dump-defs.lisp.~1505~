;;; -*- Lowercase: Yes; Mode: LISP; Syntax: Common-lisp; Package: KBIN -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; The variables with the hash tables...

;;; The first two of these hash tables map from object to index in the load table
;;; in which it is stored.
(defvar *kbin-dump-table*)			;Objects kept EQ on a per-message basis
(defvar *kbin-permanent-dump-table*)		;Objects kept EQ on a more global basis
;; This maps from an object to its unique copy.
(defvar *kbin-equal-dump-table*)		;Objects EQified if EQUAL.

;;; OK, we're not handling multiple requests for something to be permanent
;;; and/or temporary.  I guess if we ask for it in a different table, we should
;;; force a store in the earlier table and set the new.

(defsubst set-dump-table (table-name object)
  (when *next-object-table*
    (set-dump-table-internal table-name object))
  (setq *next-object-table* table-name
	*next-object-table-object* object))

(defun set-dump-table-internal (table-name object)
  (if (eq object *next-object-table-object*)
      (error "Attempt to dump ~S into ~A table twice." object table-name)
    (error "Attempt to dump ~S into ~A table when ~S is still pending."
	   object table-name *next-object-table-object*)))

;;; This scheme really should be upgraded to store back the "compacted" object
;;; where it came from.

;;; In any event, this is the macro which is used when an object is worthy of
;;; compaction.  We check for having dumped an EQUAL object elsewhere, and
;;; if we have, we use that.  Otherwise, we enter it into the permanent
;;; table.  If we haven't seen it before, kbin-enter-permanent-dump-table-equal
;;; will also copy it into a ZMAIL area (default is *zmail-header-area*) if needed.

#||
(defmacro kbin-dump-permanent-equal ((stream &optional area)
				     (object-var object-ref)
				     &body body)
  (let ((stream-var (make-symbol "STREAM"))
	(index-var (make-symbol "INDEX"))
	(in-table-p-var (make-symbol "IN-TABLE-P")))
    (unless object-var
      (setq object-var (make-symbol "OBJECT")))
    (when area
      (setq body `((dumping-into-area (,stream-var ,area ,object-var) ,@body))))
    (multiple-value-bind (vars vals stores store-form access-form)
	(get-setf-method object-ref)
      stores store-form				;We don't use these
      (let ((lt:*simple-variables* `(,stream-var ,object-var ,@vars)))
	(lt:let*-subst `(,stream-var ,@vars ,object-var)
		       `(,stream ,@vals ,access-form )
	 `(multiple-value-bind (,in-table-p-var ,index-var)
	      (kbin-enter-permanent-dump-table-equal
		,stream-var ,object-var
		(when *compact-while-dumping*
		  #'(lambda (new-object)
		      (declare (sys:downward-function))
		      (setq ,object-var new-object)
		      (setf ,access-form new-object)))
		,@(when area `(,area)))
	    (unless ,in-table-p-var
	      (set-dump-table :permanent ,object-var)
	      (multiple-value-prog1
		(progn ,@body)
		(let ((table *kbin-permanent-load-table*))
		  (if (location-boundp (locf (aref table ,index-var)))
		      (permanent-dump-error ,index-var ,object-var)
		    (when ( ,index-var (zl:array-length table ))
		      (setq *kbin-permanent-load-table*
			    (setq table
				  (grow-load-table table (+ index (truncate index 2))))))
		    (setf (aref table ,index-var) ,object-var)))))))))))
||#

(defmacro kbin-dump-permanent-equal ((stream &optional area)
				     (object-var object-ref)
				     &body body
				     &environment env)
  (unless object-var
    (setq object-var (make-symbol "OBJECT")))
  (let ((area-spec
	  (when area
	    (let ((opcode (second (assoc area *zmail-area-table*))))
	      (if opcode
		  `(',area ,opcode)
		`(,area)))))
	(new-object-var (make-symbol "NEW-OBJECT")))
    (multiple-value-bind (vars vals stores store-form access-form)
	(get-setf-method object-ref env)
      stores store-form				;We don't use these
      (let ((lt:*simple-variables* `(,@vars)))
	(lt:let*-subst `(,@vars ,object-var) `(,@vals ,access-form)
	 `(kbin-dump-permanent-equal-internal
	    ,stream ,object-var
	    (when *compact-while-dumping*
	      #'(lambda (,new-object-var)
		  (declare (sys:downward-function))
		  (setq ,object-var ,new-object-var)
		  (setf ,access-form ,new-object-var)))
	    #'(lambda ()
		(declare (sys:downward-function))
		,@body)
	    ,@area-spec)
	 env)))))


;;; Body is how to dump this object.  First, enter it into the temporary
;;; table.  If it is already there, just dump a reference to it instead
;;; of performing the body.

#||
(defmacro kbin-dump-temporary ((stream object) &body body)
  (let ((stream-var (make-symbol "STREAM"))
	(object-var (make-symbol "OBJECT"))
	(index-var (make-symbol "INDEX")))
    `(let ((,stream-var ,stream)
	   (,object-var ,object)
	   (,index-var *kbin-table-index*))
       (unless (kbin-enter-dump-table ,stream-var ,object-var)
	 (set-dump-table :temporary ,object-var)
	 (multiple-value-prog1
	   (progn ,@body)
	   (let ((table *kbin-load-table*))
	     (if (location-boundp (locf (aref table ,index-var)))
		 (temporary-dump-error ,index-var ,object-var)
	       (when ( ,index-var (zl:array-length table))
		 (setq *kbin-load-table*
		       (setq table
			     (grow-load-table table (+ index (truncate index 2))))))
	       (setf (aref table ,index-var) ,object-var))))))))
||#


(defmacro kbin-dump-temporary ((stream object) &body body)
  `(kbin-dump-temporary-internal ,stream ,object
				 #'(lambda ()
				     ,@body)))

;;; Body is how to dump this object.  First, enter it into the permanent
;;; table.  If it is already there, just dump a reference to it instead
;;; of performing the body.

#||
(defmacro kbin-dump-permanent ((stream object) &body body)
  (let ((stream-var (make-symbol "STREAM"))
	(object-var (make-symbol "OBJECT"))
	(index-var (make-symbol "INDEX")))
    `(let ((,stream-var ,stream)
	   (,object-var ,object)
	   (,index-var *kbin-permanent-table-index*))
       (unless (kbin-enter-permanent-dump-table ,stream-var ,object-var)
	 (set-dump-table :permanent ,object-var)
	 (multiple-value-prog1
	   (progn ,@body)
	   (let ((table *kbin-permanent-load-table*))
	     (if (location-boundp (locf (aref table ,index-var)))
		 (permanent-dump-error ,index-var ,object-var)
	       (when ( ,index-var (zl:array-length table))
		 (setq *kbin-permanent-load-table*
		       (setq table
			     (grow-load-table table (+ index (truncate index 2))))))
	       (setf (aref table ,index-var) ,object-var))))))))
||#

(defmacro kbin-dump-permanent ((stream object) &body body)
  `(kbin-dump-permanent-internal ,stream ,object
				 #'(lambda ()
				     ,@body)))

;;; Dump a plist.  PLIST-TYPE is a string describing this plist, for
;;; error messages.  This is a loop, with (IND VAL) getting successive
;;; indicators and values.  The macro takes care of dumping the indicators.
(defmacro kbin-dump-plist ((stream object plist-type)
			   (ind val &optional val-location)
			   &body body)
  (let ((stream-var (make-symbol "STREAM"))
	(object-var (make-symbol "OBJECT"))
	(rest-of-list (make-symbol "REST-OF-LIST")))
    (unless ind
      (setq ind (make-symbol "IND")))
    `(let ((,stream-var ,stream)
	   (,object-var ,object))
       (kbin-dump-list-init ,stream-var ,object-var ,plist-type *msg-self*)
       (command-body
	 (loop for ,rest-of-list on ,object-var by 'cddr
	       for (,ind ,val) = ,rest-of-list
	       ,@(when val-location
		   `(for ,val-location = (locf (second ,rest-of-list))))
	       do
	   (ignore ,val)
	   ,@(when val-location
	       `((ignore ,val-location)))
	   (kbin-dump-symbol ,stream-var ,ind)
	   (progn ,@body))))))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Conditional property list dumping.
0(defmacro kbin-dump-plist-case ((stream object plist-type)
				(ind val &optional val-location)
				&body clauses)
  (let ((stream-var (make-symbol "STREAM"))
	(object-var (make-symbol "OBJECT"))
	(plist-length-var (make-symbol "PLIST-LENGTH"))
	(rest-of-list (make-symbol "REST-OF-LIST"))
	(actual-indicators)
	(actual-clauses))
    (dolist (clause clauses)
      (destructuring-bind (indicators . forms) clause
	(cond ((and (atom indicators) (neq indicators 'otherwise))
	       (push indicators actual-indicators))
	      ((neq indicators 'otherwise)
	       (setq actual-indicators (append actual-indicators indicators))))
	(if (eq indicators 'otherwise)
	    (push clause actual-clauses)
	  (push `(,indicators (kbin-dump-symbol ,stream-var ,ind) ,@forms) actual-clauses))))
    `(let* ((,stream-var ,stream)
	    (,object-var ,object)
	    (,plist-length-var (loop for (,ind) on ,object-var by 'cddr
				     when (member ,ind ',actual-indicators)
				       sum 2)))
       (kbin-dump-list-init ,stream-var ,object-var ,plist-type *msg-self* ,plist-length-var)
       (loop for ,rest-of-list on ,object-var by 'cddr
	     for (,ind ,val) = ,rest-of-list
		 ,@(when val-location
		     `(for ,val-location = (locf (second ,rest-of-list))))
	     do
	 (ignore ,val)
	 ,@(when val-location
	     `((ignore ,val-location)))
	 (case ,ind
	   ,@(nreverse actual-clauses))))))

(defmacro kbin-dump-list-x ((stream object-ref &optional area)
			    (val &optional val-location)
			    &body body)
  (let* ((stream-var (make-symbol "STREAM"))
	 (object-var (make-symbol "OBJECT"))
	 (rest-of-list (make-symbol "REST-OF-LIST"))
	 (body `((kbin-dump-list-init ,stream-var ,object-var)
		 (command-body
		   (loop for ,rest-of-list on ,object-var
			 ,@(when val
			     `(for (,val) = ,rest-of-list))
			 ,@(when val-location
			     `(for ,val-location = (locf (first ,rest-of-list))))
			 do (progn ,@body))))))
    (if area
      `(let ((,stream-var ,stream))
	 (dump-into-area (,stream-var ,area)
			 (,object-var ,object-ref)
	   ,@body))
      `(let ((,stream-var ,stream)
	     (,object-var ,object-ref))
	 ,@body))))

;;; Copies something into *zmail-header-area*

(defmacro msg-areaf (form &optional area &environment env)
  (multiple-value-bind (vars vals stores store-form access-form)
      (get-setf-method form env)
    (let* ((object-var (make-symbol "OBJECT"))
	   (area-var (make-symbol "AREA"))
	   (copy-form `(copy-into-zmail-area-1 ,object-var ,@(when area `(,area-var))))
	   (lt:*simple-variables* `(,object-var ,area-var ,@vars)))
      (lt:let*-subst `(,area-var ,@vars ,object-var)
		     `(,(or area '*zmail-header-area*) ,@vals ,access-form)
       `(if (or (not *compact-while-dumping*)
		(typep ,object-var '(or symbol fixnum single-float character))
		(let ((object-area (sys:%area-number ,object-var)))
		  (or (null object-area)
		      (= object-area ,area-var))))
	    ,object-var
	  ,(lt:let*-subst `(,@stores)
			  `(,copy-form)
			 store-form
			 env))
       env))))

(sys:defvar-resettable *delayed-line-setups* nil)
(sys:defvar-resettable *delay-line-setups* nil)

(defmacro with-line-setups-delayed ((stream &optional force-p) &body body)
  (let ((stream-var (make-symbol "STREAM"))
	(old-flag (make-symbol "OLD-FLAG")))
    (if force-p
	`(let-if ,force-p ((*delay-line-setups* nil)
			   (*delayed-line-setups* nil))
	   (with-line-setups-delayed (,stream)
	     ,@body))
      `(let* ((,stream-var ,stream)
	      (,old-flag *delay-line-setups*)
	      (*delay-line-setups* t))
	 (let-if (not ,old-flag)
		 ((*delayed-line-setups* *delayed-line-setups*))
	   (multiple-value-prog1
	     (progn ,@body)
	     ;; If old-flag, someone outside will take care of it.
	     (unless ,old-flag
	       (when *delayed-line-setups*
		 (clean-up-delayed-line-setups ,stream-var)))))))))

;;; Wrap this around code that dumps the arguments to a command.
;;; This is for the sake of indentation in the command history.

(defmacro command-body (&body body)
  (debugify (setq body `(let ((*indent-level* (1+ *indent-level*)))
			   ,@body)))
  body)

(sys:defvar-resettable *dumping-area* '*zmail-header-area*)

;;; These macros coordinate moving things into specific areas while dumping
;;; with consing them in the right area while loading.
(defmacro dump-into-area ((stream area)
			  (new-object reference)
			  &body body)
  (let ((stream-var (MAKE-SYMBOL "STREAM")))
    ;; AREA is constrained to be the name of an area, not a general variable.
    (unless new-object
      (setq new-object (make-symbol "NEW-OBJECT")))
    `(let ((,stream-var ,stream)
	   (,new-object (msg-areaf ,reference ,area)))
       (dumping-into-area (,stream-var ,area ,new-object)
			  ,@body))))

;;; Assert that what's about to be dumped should be consed in a specific
;;; area.
;;; This should actually work by defering putting out the command
;;; until we actually are about to dump something other than a fetch!

(defmacro dumping-into-area ((stream area new-object) &body body)
  (let* ((old-area (make-symbol "OLD-AREA"))
	 (opcode (second (assoc area *zmail-area-table*))))
    (if opcode
	`(let ((,old-area *dumping-area*)
	       (*dumping-area* ',area)
	       (*indent-level* *indent-level*))
	   (unless (eq *dumping-area* ,old-area)
	     (kbin-dump-opcode ,stream ,opcode ,new-object)
	     (incf *indent-level*))
	   ,@body)
      (let ((opcode (make-symbol "OPCODE")))
	`(let ((,old-area *dumping-area*))
	   (multiple-value-bind (*dumping-area* ,opcode)
	       (lookup-area-opcode ,area)
	     (let ((*indent-level* *indent-level*))
	       (unless (eq *dumping-area* ,old-area)
		 (kbin-dump-opcode ,stream ,opcode ,new-object)
		 (incf *indent-level*))
	       ,@body)))))))
