;;; -*- Mode: LISP; Package: KBIN; Lowercase: Yes; Syntax: Common-lisp-*- 
;;; Replacement Binary mail file format.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;; Buffer definition

(add-mail-buffer-flavor 'kbin-buffer "KBin" "Fast binary pre-parsed format")

(defvar *kbin-buffer-dump-table-size-factor* 18.)
(defvar *kbin-buffer-dump-table-size-minimum* 300.)

(defmethod (:dump-table-size-estimate kbin-buffer) ()
  (+ *kbin-buffer-dump-table-size-minimum*
     (* *kbin-buffer-dump-table-size-factor*
	(max (send self :nmsgs) 50.))))

(defmethod (:format-name kbin-buffer) () "KBIN")

(defmethod (:default-canonical-type kbin-buffer) () :kbin)

(defmethod (:mail-file-reparsable-p kbin-buffer) () t)

(defmethod (zwei:make-instance kbin-buffer :after) (&rest ignore)
  (setq zwei:property-list-hash-table nil))

(defmethod (zwei:possible-mail-file-options kbin-buffer) ()
  '(:append :reverse-new-mail :mail :owner :sort :delete-expired
    :keywords :keywords-string    
    :summary-window-format :reformat-template))

(defmethod (zwei:settable-mail-file-options kbin-buffer) ()
  '(:append :reverse-new-mail :mail :owner :sort :delete-expired
    :summary-window-format :reformat-template))

(defun-in-flavor (update-keywords-string-property kbin-buffer) ()
  (let ((keyword-pairs (send self :get :keywords)))
    (if keyword-pairs
	(loop with keywords-string = (make-array 32 :element-type 'string-char
						    :fill-pointer 0)
	      for keyword-pair in keyword-pairs
	      for first = t then nil
	      unless first
		do (vector-push-extend #\, keywords-string)
	      do (zl:append-to-array keywords-string (car keyword-pair))
	      finally
		(send self :putprop keywords-string :keywords-string))
      (send self :remprop :keywords-string))))

(defmethod (zwei:update-options-in-file kbin-buffer) ()
  (update-keywords-string-property)
  (unless (loop with property-list = (send self :property-list)
		for option in (zwei:possible-mail-file-options self)
		always (or (eq option :keywords-string)
			   (equal (getf property-list option)
				  (getf zwei:original-options option))))
    (mung-node zwei:header-interval)
    (zwei:mark-sequence-modified self :hard t)))

(defmethod (zwei:msg-file-element-type kbin-buffer) (&key ((:pathname pathname-override)))
  (ignore pathname-override)
  '(unsigned-byte 16.))

;;; Open a KBIN file for reading/writing -- Setup appropriate loaders or dumpers.
(defmethod (zwei:open-mail-file kbin-buffer :after) (&key direction)
  (cl:ecase direction
    (:input
      (flet ((object-loader (loader str)
	       (ignore loader)
	       (kbin-next-value str)))
	(send *string-loader* :prepare-loader :object-loader #'object-loader
					      :stream zwei:stream)))
    (:output
      (if (not (variable-boundp *kbin-permanent-dump-table*))
	  (setq *kbin-permanent-dump-table*
		(make-hash-table :test 'eq :rehash-size 2.0
				 :size (send self :dump-table-size-estimate)))
	(send *kbin-permanent-dump-table* :clear-hash))
      (setq *kbin-permanent-table-index* 0)
      (if (not (variable-boundp *kbin-equal-dump-table*))
	  (setq *kbin-equal-dump-table*
		(make-hash-table :test 'equal :rehash-size 2.0
				 :size (send self :dump-table-size-estimate)))
	(send *kbin-equal-dump-table* :clear-hash))
      (unless (variable-boundp *kbin-dump-table*)
	(setq *kbin-dump-table*
	      (make-hash-table :test 'eq :rehash-size 2.0 :size #o400)))
      (setq *kbin-table-index* 0)
      (setq *next-object-table* nil)
      (setq *next-object-table-object* nil)
      (flet ((object-dumper (object dumper str)
	       (ignore dumper)
	       (kbin-xdump-object str (locf object))))
	(send *string-dumper* :prepare-dumper :object-dumper #'object-dumper
					      :dump-leader :length-only
					      :use-fill-pointer t
					      :stream zwei:stream)))))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Verify that we're reading a KBIN file and load its properties.
0(defmethod (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(zwei:verify-msg-file-format-and-load-header kbin-buffer)0 ()
  (zwei:check-msg-file-element-type)
  (let ((file-properties (kbin-load-file-property-list zwei:stream self)))
    (loop for (type value) on file-properties by 'cddr
	  do (send self :putprop value type)))
  1;; Ensure that all keywords used in this buffer are known in 2zwei:*keyword-alist*1 and
  ;; that all the 2cons1es in the 2:keywords1 property are actually from 2zwei:*keyword-alist*
1  ;; as required by 2zwei:change-msg-keywords1.
0  (loop for keyword-pair in (send self :get :keywords)
	as canonical-keyword-pair = (rassoc (cdr keyword-pair) zwei:*keyword-alist*)
	when (null canonical-keyword-pair)
	  do (setf zwei:*keyword-alist* (nconc zwei:*keyword-alist* (ncons keyword-pair))
		   canonical-keyword-pair keyword-pair)
	collect canonical-keyword-pair into new-keywords-property
	finally
	  (send self :putprop (remove-duplicates new-keywords-property :from-end t) :keywords))
  )

(defmethod (zwei:read-next-msg kbin-buffer) ()
  (declare (values . (msg more-msgs-available)))
  (kbin-load-one-msg zwei:stream (or tick *tick*) self))

(defflavor kbin-wrong-number-of-msgs-loaded
	(loaded-msg-count pathname dumped-msg-count)
	(zwei:zmail-file-error)
  :initable-instance-variables)

(defmethod (dbg:report kbin-wrong-number-of-msgs-loaded) (stream)
  (format stream
	  "Only ~D message~:P were loaded from KBIN file ~A but ~D message~:P were dumped."
	  loaded-msg-count pathname dumped-msg-count))

(compile-flavor-methods kbin-wrong-number-of-msgs-loaded)

(defmethod (:add-msg kbin-buffer :after) (msg &optional at-index)
  (ignore msg at-index)
  (incf added-msgs-count))

(defmethod (zwei:finish-loading-mail-file kbin-buffer :before) (&key display-totals)
  (ignore display-totals)
  (when (> *dumped-msg-count* -1)
    1;; Consistency check -- Did we read as many messages as we dumped?
0    (let ((loaded-msg-count (- (zwei:sequence-nmsgs self)
			       (or zwei:total-msgs-from-inboxes 0)
			       added-msgs-count)))
      (unless (= *dumped-msg-count* loaded-msg-count)
	(error 'kbin-wrong-number-of-msgs-loaded :format-string nil
						 :loaded-msg-count loaded-msg-count
						 :pathname (truename zwei:stream)
						 :dumped-msg-count *dumped-msg-count*)))))

(defmethod (zwei:finish-loading-mail-file kbin-buffer :after) (&key display-totals)
  (ignore display-totals)
  (when (< *format-version-read* 7)
    1;; File was saved before 2:keywords-string1 property was properly constructed.
0    (update-keywords-string-property))
  (unless (= *format-version-read* *kbin-format-version*)
    (zwei:mark-sequence-modified self :hard t)))

(defmethod 2(zwei:save-mail-file-header kbin-buffer)0 (mail-file-saving-state)
  (ignore mail-file-saving-state)
  (kbin-dump-file-property-list zwei:stream
				(send self :dump-table-size-estimate)
				(loop for (property value) on (send self :property-list)
							   by 'cddr
				      with possible = (zwei:possible-mail-file-options self)
				      when (member property possible)
					collect property and collect value)
				1;; It's safe to dump the number of messages as any operation
				;; that would change the count will first abort this save.
0				(zwei:sequence-nmsgs self)))

(defmethod (zwei:save-msg kbin-buffer) (msg mail-file-saving-state)
  (ignore mail-file-saving-state)
  ;; Any indicator whose value is a node must come after any properties which
  ;; might include lines inside that node.  This is to save putting every possible
  ;; line into the hash table.  Fortunately, ORIGINAL-HEADERS-INTERVAL is the only
  ;; such indicator now. --MMcM
  ;; Actually, the above is only because the system keeps temporary BP's permanently.
  ;; This probably saves a tiny bit of storage, but could be fixed if the above
  ;; restriction got to be a pain.  (It saves two words per address, not per use of each
  ;; address)
  (let ((stat (assure-msg-parsed msg)))
    (loop as tem = (zl:getl stat '(original-headers-interval))
	  while (and (cadr tem) (cddr tem))	;Some interval and more indicators after that.
	  do (remprop stat (car tem))
	     (nconc (cdr stat) (zl:firstn 2 tem))))
  (kbin-dump-msg zwei:stream msg))

(defmethod (zwei:finish-saving-mail-file kbin-buffer :before) (&rest ignore)
  (when zwei:stream
    (kbin-dump-opcode zwei:stream kbin-end-of-file))
  ;; Can be called without actually ever having opened the stream which is where these
  ;; instances are created.  We could conditionalize this on whether there's a stream
  ;; but this way is more robust.
  (when (variable-boundp *kbin-dump-table*)
    (send *kbin-dump-table* :clear-hash))
  (when (variable-boundp *kbin-equal-dump-table*)
    (send *kbin-equal-dump-table* :clear-hash))
  (when (variable-boundp *kbin-permanent-dump-table*)
    (send *kbin-permanent-dump-table* :clear-hash)))

(defmethod (zwei:abort-saving-mail-file kbin-buffer :after) (&rest ignore)
  (when (variable-boundp *kbin-dump-table*)
    (send *kbin-dump-table* :clear-hash))
  (when (variable-boundp *kbin-equal-dump-table*)
    (send *kbin-equal-dump-table* :clear-hash))
  (when (variable-boundp *kbin-permanent-dump-table*)
    (send *kbin-permanent-dump-table* :clear-hash)))

(defmethod (zwei:update-msg-options-in-file kbin-buffer) (msg)
  (ignore msg)
  (zwei:mark-sequence-modified self :hard t))

(defmethod (zwei:recent-is-msg-option-in-file-p kbin-buffer) ()
  t)

(compile-flavor-methods kbin-buffer)

1;;; Actual worker code for the 2upgrade-loaded-kbin-files1 macro.
0(defun upgrade-loaded-kbin-files-internal (include-other-formats msg-update-code)
  (declare (sys:downward-funarg msg-update-code))
  (labels ((upgrade-loaded-files ()
	     (dolist (sequence zwei:*sequence-list*)
	       (let ((is-kbin-file (typep sequence 'kbin-buffer)))
		 (when (and (zwei:sequence-buffer-p sequence)
			    (or (and include-other-formats (not is-kbin-file))
				(and is-kbin-file
				     (< (symbol-value-in-instance sequence
								  '*format-version-read*)
					*kbin-format-version*))))
		   (format t "~&Upgrading ~A ... " (zwei:sequence-name sequence))
		   (zwei:do-universe (msg sequence :no-prepare t
						   :note-progress "Fixing messages in ~A.")
		     (funcall msg-update-code msg))
		   (format t "done.~%")
		   (when is-kbin-file
		     (zwei:mark-sequence-modified sequence :hard t)))))))
    (when (and (variable-boundp zwei:*zmail-window*) (not (null zwei:*zmail-window*)))
      (zwei:funcall-in-zmail-instance zwei:*zmail-window* #'upgrade-loaded-files))))

(zwei:define-zmail-top-level-command com-zmail-reparse-all-loaded-messages
  "Force the message headers of all messages in loaded mail files to be reparsed.
With a numeric argument, consider only loaded KBIN files."
				(zwei:numeric-arg-ok)
  (when (cl:yes-or-no-p "This will reparse headers in all loaded ~:[mail~;KBIN~] files.~
		       ~%Are you sure you want to do this? "
			zwei:*numeric-arg-p*)
    ;; Kludge to force all KBIN files to update by pretending we're in a new KBIN version.
    ;; Replace with something cleaner if such a thing ever becomes available.
    (let ((*kbin-format-version* (1+ *kbin-format-version*)))
      (upgrade-loaded-kbin-files (:include-other-formats (not zwei:*numeric-arg-p*))
	(zwei:reparse-msg msg)))
    zwei:dis-text))
