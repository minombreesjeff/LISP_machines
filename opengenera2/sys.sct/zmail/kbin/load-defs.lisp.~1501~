;;; -*- Mode: LISP; Syntax: Common-lisp; Package: KBIN; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defsubst kbin-next-byte (stream)
  (send stream ':tyi t))

(defsubst kbin-load-table-fetch (index)
  (debugify
    (when *load-command-history*
      (command-history-push `("Fetch" ,index)
			    (aref *kbin-load-table* index)
			    *load-command-history*)))
  (aref *kbin-load-table* index))

(defsubst kbin-load-permanent-table-fetch (index)
  (debugify
    (when *load-command-history*
      (command-history-push `("Permanent Fetch" ,index)
			    (aref *kbin-permanent-load-table* index)
			    *load-command-history*)))
  (aref *kbin-permanent-load-table* index))

(defsubst check-for-effect (name expected-value)
  (let* ((code (symbol-value name))
	 (index (ldb (byte 8 0) code))
	 (actual-value (if ( (ldb (byte 8 8) code) kbin-command)
			   nil
			 (aref *kbin-second-level-command-for-effect* index))))
    (unless (eq actual-value expected-value)
      (error "~S is declared for ~:[value~;effect~],~@
	     but is being defined as being for ~:[value~;effect~]."
	     name actual-value expected-value))))

(defprop define-with-command-history defun zwei:definition-function-spec-type)
(defmacro define-with-command-history (name arglist &body body)
  (debugify (setq body `((let-if *load-command-history*
				 ((*indent-level* (1+ *indent-level*)))
			   ,@body))))
  `(defun ,name ,arglist
     ,@body))

(defmacro with-table-entry (type &body body)
  (multiple-value-bind (index table-fun-args)
      (ecase type
	(:temporary (values '*kbin-table-index* nil))
	(:permanent (values '*kbin-permanent-table-index* '(t))))
    `(let ((index (prog1 ,index (incf ,index)))
	   (value (progn ,@body)))
       (kbin-enter-load-table value index ,@table-fun-args)
       value)))

(defprop define-kbin-load defun zwei:definition-function-spec-type)
(defmacro define-kbin-load (name arglist &body body)
  (check-for-effect name nil)
  `(define-with-command-history ,name ,arglist
     ,@body))

(defprop define-kbin-load-for-value defun zwei:definition-function-spec-type)
(defmacro define-kbin-load-for-value (name arglist &body body)
  `(define-kbin-load ,name ,arglist
     (with-table-entry :temporary ,@body)))

(defprop define-kbin-load-for-permanent-value defun zwei:definition-function-spec-type)
(defmacro define-kbin-load-for-permanent-value (name arglist &body body)
  `(define-kbin-load ,name ,arglist
     (with-table-entry :permanent ,@body)))

(defprop define-kbin-load-for-effect defun zwei:definition-function-spec-type)
(defmacro define-kbin-load-for-effect (name arglist &body body)
  (check-for-effect name t)
  `(define-with-command-history ,name ,arglist
     (progn ,@body)
     *no-value-marker*))

(defvar *area* *zmail-header-area*)		;Area to use for consing real structure.

(defvar *rel-6-strings* nil)			;Release 6 strings in need of conversion.
