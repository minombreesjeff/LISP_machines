;;; -*- Mode: LISP; Package: KBIN; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


(defvar *load-command-history* nil)		;History of commands seen while loading
(defvar *load-table-history* nil)		;History of temporary objects while loading
(defvar *permanent-load-table-history* nil)	;History of permanent objects while loading
(defvar *dump-command-history* nil)		;History of commands dumped
(defvar *dump-table-history* nil)		;History of temporary objects dumped
(defvar *permanent-dump-table-history* nil)	;History of permanent objects dumped

(defvar *indent-level* 0)			;Nesting level, for display.

(defun make-command-history (depth)
  (make-array (list depth 3) :leader-list '(nil 0)))

(defmacro invoke-kbin-load-command (fun &rest args)
  `(if *load-command-history*
       (command-history-push ,fun (funcall ,fun ,@args) *load-command-history*)
     (funcall ,fun ,@args)))

;;; Push a command function onto the history.

(defun command-history-push (fun value history)
  (when history
    (unless (member fun '(kbin-command kbin-temporary-command kbin-permanent-command))
      (when ( (array-leader history 1) (array-dimension history 0))
	(setf (array-leader history 1) 0))
      (let ((loc (array-leader history 1)))
	(incf (array-leader history 1))
	(setf (aref history loc 0) fun)
	(setf (aref history loc 1) value)
	(setf (aref history loc 2) *indent-level*))))
  value)

;;; This resets a history back to 0.

(defun command-history-reset (history)
  (setf (array-leader history 1) 0)
  (let ((a history))
    (declare (sys:array-register-1d a))
    (loop for i below (zl:array-length a)
	  do (setf (sys:%1d-aref a i) nil))))

;;; Given an opcode, push the command onto the history.

(defun command-history-push-op (op value history)
  (if (null history)
      value
    (command-history-push (decode-kbin-opcode op) value history)))


(defun decode-kbin-opcode (op)
  (let ((fun (aref *kbin-first-level-command-table* (ldb (byte 8 8) op))))
    (flet ((second-level-fun (op)
	     (aref *kbin-second-level-command-table* (ldb (byte 8 0) op))))
      (case fun
	(kbin-command
	  (setq fun (second-level-fun op)))
	(kbin-temporary-command
	  (setq fun `("temporary" ,(second-level-fun op) ,(1- *kbin-table-index*))))
	(kbin-permanent-command
	  (setq fun `("permanent" ,(second-level-fun op) ,(1- *kbin-permanent-table-index*))))
	(otherwise
	  (setq fun `(,fun ,(ldb (byte 8 0) op))))))
    fun))

;;; Displayes a command history.

(defun display-command-history (&optional (history *load-command-history*))
  (if (null history)
      (format t "~&There is no command history.")
    (loop initially (send *standard-output* :fresh-line)
	  with size = (array-dimension history 0)
	  with *print-base* = 10.
	  with dummy-string = (make-array 1000. :element-type 'string-char :fill-pointer 0)
	  for i from (array-leader history 1)
	  for idx = (mod i size)
	  for command = (aref history idx 0)
	  for value = (aref history idx 1)
	  repeat size
	  when command
	    do (setf (fill-pointer dummy-string) 0)
	       (with-output-to-string (stream dummy-string)
		 (send stream :string-out *spaces* 0 (aref history idx 2))
		 (typecase command
		   (list
		     (send stream :string-out (string (first command)))
		     (send stream :tyo #\Space)
		     (prin1 (second command) stream)
		     (when (third command)
		       (send stream :tyo #\Space)
		       (prin1 (third command) stream)))
		   (number
		     (prin1 command stream))
		   (otherwise
		     (send stream :string-out (string command))))
		 (send stream :string-out "  ")
		 (if (eq value *no-value-marker*)
		     (send stream :string-out "(no value)")
		   (prin1 value stream)))
	       (send *standard-output* :line-out dummy-string)))
  (values))

(defun clear-command-history-trace ()
  (setq *load-table-history* nil
	*load-command-history* nil
	*permanent-load-table-history* nil
	*dump-command-history* nil
	*dump-table-history* nil
	*permanent-dump-table-history* nil))

(defun command-history-trace (&key (load t) (dump t))
  (clear-command-history-trace)
  (when load
    (setq *load-table-history* (make-command-history 500.))
    (setq *load-command-history* (make-command-history 5000.))
    (setq *permanent-load-table-history* (make-command-history 1000.)))
  (when dump
    (setq *dump-table-history* (make-command-history 500.))
    (setq *dump-command-history* (make-command-history 5000.))
    (setq *permanent-dump-table-history* (make-command-history 1000.))))



(eval-when (eval compile load)
;;; If *DEBUGIFY* is T, then we compile in extra checking code.
;;; Probably it should be left T, but if there's a significant
;;; performance impact in doing the extra checks or having the
;;; extra code to page in, it's easy to change.

(defvar *debugify* t)

(defmacro debugify (&body forms)
  (when *debugify*
    `(progn ,@forms)))
)
