D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-lisp; Package: ZWEI; Base: 10; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;; Very fast parser of date/time strings conforming to 0RFC8221 based on 0RWK1's initial version.
;;;
;;;    The syntax of an acceptable date/time string according to RFC822 is
;;;
;;;       0date-time  =  [ day "," ] date time
1;;;
;;;       0day        =  "Mon" / "Tue" / "Wed" / "Thu" / "Fri" / "Sat" / "Sun"
1;;;
;;;       0date       =  1*2DIGIT month 2DIGIT
1;;;
;;;       0month      =  "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun"
1;;;		      0/ "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec"
1;;;
;;;	  0time       =  hour zone
1;;;
;;;	  0hour       =  2DIGIT ":" 2DIGIT [ ":" 2DIGIT ]
1;;;
;;;	  0zone       =  "UT"  / "GMT"
1;;;0		      / "EST" / "EDT" / "CST" / "CDT" / "MST" / "MDT" / "PST" / "PDT"
1;;;0		      / 1ALPHA
1;;;0		      / ( ( "+" / "-" ) 4DIGIT )
1;;;
;;;    This function supports the following extensions to the above syntax which
;;;    enables us to parse just about all date/time strings we're likely to see:
;;;       (1) Long forms of the day and month names are permitted.
;;;       (2) The comma after the day name is optional.
;;;       (3) Hyphens (-) may be used to separate the date, month, and year.
;;;       (4) The year may be either 2 or 4 digits.
;;;       (5) All timezones defined in (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")time:*timezones*1 are permitted.
;;;
;;;    If the date/time string can't be parsed even with the above extensions to RFC822,
;;;    we call 2time:parse-universal-time1 on the string and let it take its best stab at it.
;;;

;;; Cache of previously seen date strings.
0(defvar 2*date-cache*0 (cl:make-hash-table :test #'string-equal))

(defvar 2*day-of-week-table*0 (cl:make-hash-table :test #'string-equal
						:initial-contents '("Monday" 0
								    "Mon" 0
								    "Tuesday" 1
								    "Tue" 1
								    "Wednesday" 2
								    "Wed" 2
								    "Thursday" 3
								    "Thu" 3
								    "Friday" 4
								    "Fri" 4
								    "Saturday" 5
								    "Sat" 5
								    "Sunday" 6
								    "Sun" 6)))
(defvar 2*month-table*0 (cl:make-hash-table :test #'string-equal
					  :initial-contents '("January" 1
							      "Jan" 1
							      "February" 2
							      "Feb" 2
							      "March" 3
							      "Mar" 3
							      "April" 4
							      "Apr" 4
							      "May" 5
							      "June" 6
							      "Jun" 6
							      "July" 6
							      "Jul" 7
							      "August" 8
							      "Aug" 8
							      "September" 9
							      "Sep" 9
							      "October" 10
							      "Oct" 10
							      "November" 11
							      "Nov" 11
							      "December" 12
							      "Dec" 12)))

1;;; Compute the contents of 2*timezone-table*1 from 2time:*timezones*1.
0(defun 2timezone-table-contents0 ()
  (let ((contents))
    (dolist (timezone-entry time:*timezones*)
      (scl:destructuring-bind (offset first-zone second-zone military-zone) timezone-entry
	(when (and first-zone (not (string-equal "ZP" first-zone 0 0 2 2)))
	  (push (list first-zone offset) contents))
	(when (and second-zone (not (string-equal "ZP" second-zone 0 0 2 2)))
	  (push (list second-zone offset) contents))
	(when (characterp military-zone)
	  (push (list (string military-zone) offset) contents))))
    (cl:reduce #'append
	       (cl:remove-duplicates (nreverse contents) :key #'first :test #'string-equal))))

(defvar 2*timezone-table*0 (cl:make-hash-table :test #'string-equal
					     :initial-contents (timezone-table-contents)))

1;;; The actual parser.
0(defun 2parse-rfc822-date-time0 (string &optional (start 0) end)
  (unless end
    (setq end (string-length string)))
  (macrolet ((punt ()
	       '(return-from parse-rfc822-date-time
		  (time:parse-universal-time string start end nil nil nil t nil nil)))
	     (token-string ()
	       `(make-array 0 :type string-data-type
			      :displaced-to string :displaced-index-offset start
			      :adjustable t))
	     (with-tokens (&body body)
	       `(stack-let* ((string-data-type (sys:array-type string))
			     (day-of-week-string (token-string))
			     (day-of-month-string (token-string))
			     (month-string (token-string))
			     (year-string (token-string))
			     (hour-string (token-string))
			     (minute-string (token-string))
			     (second-string (token-string))
			     (timezone-string (token-string)))
		  ,@body))
	     (set-token (token)
	       `(si:change-indirect-array ,token string-data-type
					  (- token-end token-start) string token-start))
	     (token-p (token)
	       `(plusp (string-length ,token))))
    (with-tokens
      (let ((current-point start)
	    token-start
	    token-end
	    delimiter)
	(labels ((skip-comment ()
		   (do ((depth 1)
			(next-char (or (and (< (1+ current-point) end)
					    (string-search-set '(#\( #\) #\\)
							       string (1+ current-point) end))
				       end)
				   (or (string-search-set '(#\( #\) #\\)
							  string (1+ current-point) end)
				       end)))
		       (( (1+ current-point) end)
			(setf current-point end))
		     (cond (( next-char end)
			    (return-from skip-comment (setf current-point end)))
			   ((char-equal (aref string next-char) #\()
			    (incf depth)
			    (setf current-point next-char))
			   ((char-equal (aref string next-char) #\))
			    (decf depth)
			    (setf current-point next-char)
			    (when (zerop depth)
			      (return-from skip-comment (incf current-point))))
			   ((char-equal (aref string next-char) #\\)
			    (setf current-point (1+ next-char))))))
		 (skip-whitespace ()
		   (cl:loop
		      (cond (( current-point end)
			     (return-from skip-whitespace nil))
			    ((char-equal (aref string current-point) #\()
			     (skip-comment))
			    ((cl:member (aref string current-point) '(#\Space #\Tab #\Return)
					:test #'char-equal)
			     (setf current-point (or (string-search-not-set
						       '(#\Space #\Tab #\Return)
						       string current-point end)
						     end)))
			    (t
			     (return-from skip-whitespace current-point)))))
		 (next-token (&optional punt-if-present)
		   (setf token-start (skip-whitespace))
		   (cond (punt-if-present
			  (if token-start
			      (punt)
			      (return-from next-token)))
			 (t
			  (when (null token-start)
			    (punt))))
		   (cl:setf token-end (string-search-set '(#\Space #\Tab #\Return #\(
							   #\: #\, #\- #\+)
							 string token-start end)
			    current-point (or token-end end))
		   (cond ((null token-end)
			  (cl:setf token-end end
				   delimiter nil))
			 ((cl:member (aref string token-end) '(#\: #\, #\- #\+)
				     :test #'char-equal)
			  (incf current-point)
			  (setf delimiter (aref string token-end)))
			 (t
			  (setf delimiter nil)))))
	  1;; First token is either the day of the week or the day of the month.
0	  (next-token)
	  (if (digit-char-p (aref string token-start))
	      1;; It's the day of the month.
0	      (if (and (or (null delimiter)
			   (char-equal delimiter #\-))
		       (< (- token-end token-start) 3))
		  (set-token day-of-month-string)
		  (punt))
	    1;; It's the day of week followed by an optional comma ...
0	    (if (or (null delimiter)
		    (char-equal delimiter #\,))
		(set-token day-of-week-string)
		(punt))
	    1;; ... and the 2nd token is the day of the month.
0	    (next-token)
	    (if (and (or (null delimiter)
			 (char-equal delimiter #\-))
		     (< (- token-end token-start) 3))
		(set-token day-of-month-string)
		(punt)))
	  1;; Next token is the month of the year.
0	  (next-token)
	  (if (or (null delimiter)
		  (char-equal delimiter #\-))
	      (set-token month-string)
	      (punt))
	  1;; Next token is the year.
0	  (next-token)
	  (if (and (digit-char-p (aref string token-start))
		   (null delimiter)
		   (or (= (- token-end token-start) 2)
		       (= (- token-end token-start) 4)))
	      (set-token year-string)
	      (punt))
	  1;; Next token is the hour and must be followed by a colon.
0	  (next-token)
	  (if (and (digit-char-p (aref string token-start))
		   delimiter
		   (char-equal delimiter #\:)
		   (< (- token-end token-start) 3))
	      (set-token hour-string)
	      (punt))
	  1;; Next token is the minute.
0	  (next-token)
	  (if (and (digit-char-p (aref string token-start))
		   (or (null delimiter)
		       (cl:member delimiter '(#\: #\- #\+) :test #'char-equal))
		   (< (- token-end token-start) 3))
	      (set-token minute-string)
	      (punt))
	  (when (and delimiter (char-equal delimiter #\:))
	    1;; If the minute was terminated by a colon, the next token is the second.
0	    (next-token)
	    (if (and (digit-char-p (aref string token-start))
		     (or (null delimiter)
			 (cl:member delimiter '(#\- #\+) :test #'char-equal))
		     (< (- token-end token-start) 3))
		(set-token second-string)
		(punt)))
	  1;; Last token is the timezone.
0	  (when (null delimiter)
	    (next-token))			1;Might be the + or -.
0	  (when (and delimiter (cl:member delimiter '(#\+ #\-) :test #'char-equal))
	    (let ((prior-delimiter delimiter))
	      (next-token)
	      (if (alpha-char-p (aref string token-start))
		  (unless (char-equal prior-delimiter #\-)
		    (punt))
		  (decf token-start))))
	  (if (if (cl:member (aref string token-start) '(#\+ #\-) :test #'char-equal)
		  (= (- token-end token-start) 5)
		  (< (- token-end token-start) 5))
	      (set-token timezone-string)
	      (punt))
	  1;; Shouldn't be anything else.
0	  (next-token t)))
      1;; Syntax appears correct to some level -- Try the semantics.
0      (sys:with-stack-array (date-string (- (+ (si:array-index-offset year-string)
					       (string-length year-string))
					    (si:array-index-offset day-of-month-string))
					 :type string-data-type
					 :displaced-to string
					 :displaced-index-offset (si:array-index-offset
								   day-of-month-string))
	(condition-case ()
	     (let ((cached-date (gethash date-string *date-cache*)))
	       (unless cached-date
		 (let ((day-of-week (if (token-p day-of-week-string)
1					;; Optional day of week was supplied.
0					(or (gethash day-of-week-string *day-of-week-table*)
					    (punt))
					nil))
		       (day-of-month (cl:parse-integer day-of-month-string :sign-allowed nil))
		       (month (or (gethash month-string *month-table*) (punt)))
		       (year (cl:parse-integer year-string :sign-allowed nil)))
		   (cl:setf
		     cached-date (cl:encode-universal-time 0 0 0 day-of-month month
							   (time:canonicalize-year year)
							   0)
		     (gethash (sys:copy-if-necessary date-string) *date-cache*) cached-date)
		   (when day-of-week
		     (multiple-value-bind (ignore ignore ignore ignore ignore ignore
					   real-day-of-week)
			 (cl:decode-universal-time cached-date 0)
		       (unless (= day-of-week real-day-of-week)
			 (punt))))))
	       (let* ((hour (cl:parse-integer hour-string :sign-allowed nil))
		      (minute (cl:parse-integer minute-string :sign-allowed nil))
		      (second (if (token-p second-string)
				  (cl:parse-integer second-string :sign-allowed nil)
				  0))
		      (timezone (if (alpha-char-p (aref timezone-string 0))
				    (or (gethash timezone-string *timezone-table*) (punt))
				    (let ((raw-value (- (cl:parse-integer timezone-string))))
				      (multiple-value-bind (hours minutes)
					  (truncate raw-value 100)
					(+ hours (/ minutes 60.0))))))
		      (offset-from-date (+ (floor (* timezone 3600)) (* hour 3600)
					   (* minute 60) second)))
		 (+ cached-date offset-from-date)))
	   (error
	     (punt)))))))
