;; -*- Mode: Lisp; Base: 10; Package: Mailer; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;; Receive mail for immediate delivery to the local file system.  To do: Merge this with
;; the forwarding server, to produce a server which either forwards or accepts for local
;; delivery.  (If the directory has a certain property, then accept the mail.  Otherwise,
;; forward.)

(defflavor lmfs-mailer-not-store-and-forward () (mailer-permanent-error))

(defmethod (:report lmfs-mailer-not-store-and-forward) (stream)
  (format stream "The store-and-forward mailer is not running."))

(defflavor lmfs-mailer-no-mail-service () (mailer-permanent-error))

(defmethod (:report lmfs-mailer-no-mail-service) (stream)
  (format stream "This host does not offer mail service."))

(defflavor lmfs-mailer-not-local (recipient) (mailer-permanent-error)
  :initable-instance-variables)

(defmethod (:report lmfs-mailer-not-local) (stream)
  (format stream "The recipient ~A is not local."
	  (zwei:string-from-header recipient :host)))

(defflavor lmfs-mailer-unknown-recipient () (mailer-unknown-recipient)
  :initable-instance-variables)

(defmethod (:report lmfs-mailer-unknown-recipient) (stream)
  (format stream "The recipient ~S does not have a directory on this host."
	  (zwei:string-from-header recipient :host)))

(defflavor lmfs-mailer-mailbox-busy (recipient) (mailer-temporary-error)
  :initable-instance-variables)

(defmethod (:report lmfs-mailer-mailbox-busy) (stream)
  (format stream "Mailbox ~S is busy." (zwei:string-from-header recipient :host)))

(defflavor lmfs-mailer-no-more-room (recipient) (mailer-temporary-error)
  :initable-instance-variables)

(defmethod (:report lmfs-mailer-no-more-room) (stream)
  (format stream "File system partition containing mailbox ~S is full."
	  (zwei:string-from-header recipient :host)))

(defflavor lmfs-mailer-local-error (contained-error) (mailer-permanent-error)
  :initable-instance-variables)

(defmethod (:report lmfs-mailer-local-error) (stream)
  (format stream "Local error: ~A" contained-error))

(compile-flavor-methods lmfs-mailer-not-local lmfs-mailer-unknown-recipient 
			lmfs-mailer-mailbox-busy lmfs-mailer-local-error
			lmfs-mailer-no-mail-service lmfs-mailer-not-store-and-forward
			lmfs-mailer-no-more-room)

;;;

(defstruct (lmfs-mailer-delivery-memo (:conc-name lmdm-))
  (recipient nil)
  (pathname nil)
  (stream nil)
  (status :not-attempted))

(defflavor lmfs-mailer
	((lmfs-mailer-delivery-memos nil))
	(mail-access-path))

(defmethod (:start-message lmfs-mailer) (&rest ignore)
  (let ((my-services (send net:*local-host* :service)))
    (unless (assq :mail-to-user my-services)
      (error 'lmfs-mailer-no-mail-service)))
  (setf lmfs-mailer-delivery-memos nil))

(defmethod (:verify-recipient lmfs-mailer) (recipient)
  (unless (or (null (cl:getf recipient :host))
	      (eq *local-host* (address-first-hop recipient)))
    (error 'lmfs-mailer-not-local :recipient recipient))
  (let ((pathname (get (locf recipient) :file)))
    (when (null pathname)
      (let ((name (get (locf recipient) :name)))
	(condition-case (error)
	     (setq pathname (cond ((string-search-set '(#\@ #\%) name)
				   (error 'lmfs-mailer-not-local :recipient recipient))
				  ((string-search-set '(#/. #/>) name)
				   (let* ((default (fs:default-pathname nil net:*local-host*))
					  (true-pathname (fs:parse-pathname name nil default)))
				     (unless (eq net:*local-host* (send true-pathname :host))
				       (error 'lmfs-mailer-not-local :recipient recipient))
				     true-pathname))
				  (t
				   (fs:make-pathname :host net:*local-host*
						     :directory (list name) :name "MAIL"
						     :type :text :version :newest))))
	   (fs:pathname-error
	     (error 'lmfs-mailer-local-error :contained-error error)))))
    D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Check for0 DNF1 errors etc.
0    (condition-case (error)
	 (when (loop for lmdm in lmfs-mailer-delivery-memos
		     never (eq pathname (lmdm-pathname lmdm)))
	   (let ((output-stream (open pathname
				      :direction :output
				      :element-type (flavor:funcall-handler
						      (zwei:native-inbox-format pathname)
						      'zwei:msg-file-element-type
						      :pathname pathname)
				      :if-exists :append
				      :if-does-not-exist :create)))
	     (push (make-lmfs-mailer-delivery-memo recipient recipient
						   pathname pathname
						   stream output-stream)
		   lmfs-mailer-delivery-memos)))
       (fs:file-open-for-output
	 (error 'lmfs-mailer-mailbox-busy :recipient recipient))
       (fs:directory-not-found
	 (error 'lmfs-mailer-unknown-recipient :recipient recipient))
       (fs:no-more-room
	 (error 'lmfs-mailer-no-more-room :recipient recipient))
       (fs:file-error
	 (error 'lmfs-mailer-local-error :contained-error error))
       (:no-error
	 nil))))

(defresource text-buffer ()
  :constructor (make-array 100. :type 'art-string :fill-pointer 0))

;; Broadcast streams would be nice, but error recovery is much more difficult.
(defmethod (:receive-message lmfs-mailer) (trace-line stream &optional body-stream)
  (let ((error-should-be-signalled nil))
    (using-resource (text text-buffer)
      (setf (fill-pointer text) 0)
      (with-output-to-string (string text)
	(let ((rps (zwei:string-from-header return-path :route)))
	  (when rps
	    (format string "Return-path: ~A~%" rps)))
	(when trace-line (format string trace-line nil))
	(copy-message-streams stream body-stream string))
      (loop for done first 0 then (1+ idx)
	    for idx = (string-search-char #/ text done)
	    while idx
	    do (array-push-extend text #/.)
	       (loop for i downfrom (1- (fill-pointer text)) above idx
		     do (setf (aref text i) (aref text (1- i))))
	       (setf (aref text idx) #/^)
	       (setf (aref text (1+ idx)) #/_))
      (loop for lmdm in lmfs-mailer-delivery-memos
	    for output-stream = (lmdm-stream lmdm)
	    do (condition-case (error)
		    (progn
		      (send output-stream :string-out text)
		      (send output-stream :fresh-line)
		      (send output-stream :line-out "")
		      (send output-stream :close))
		  (fs:no-more-room
		    (setf (lmdm-status lmdm)
			  (make-instance 'lmfs-mailer-no-more-room :recipient (lmdm-recipient lmdm)))
		    (setf error-should-be-signalled t))
		  (error
		    (setf (lmdm-status lmdm)
			  (make-instance 'lmfs-mailer-local-error :contained-error error))
		    (setf error-should-be-signalled t))
		  (:no-error
		    (setf (lmdm-status lmdm) :completed-OK)))))
    (when error-should-be-signalled
      (signal 'mailer-incomplete-delivery-error
	      :recipient-and-status-list (loop for lmdm in lmfs-mailer-delivery-memos
					       collect (make-recipient-and-status
							 recipient (lmdm-recipient lmdm)
							 status (lmdm-status lmdm)))))))

(defun-in-flavor (abort-close-and-clear-delivery-memos lmfs-mailer) ()
  (loop for lmdm in lmfs-mailer-delivery-memos
	for stream = (lmdm-stream lmdm)
	do (send stream :close :abort))
  (setf lmfs-mailer-delivery-memos nil))

(defmethod (:finish-message lmfs-mailer) ()
  (abort-close-and-clear-delivery-memos))

(defmethod (:close lmfs-mailer) (&optional abort-p)
  (ignore abort-p)
  (abort-close-and-clear-delivery-memos))

(compile-flavor-methods lmfs-mailer)

(net:define-protocol :lmfs-mailer (:mail-to-user :local)
  (:invoke (path)
   (lexpr-funcall #'make-instance 'lmfs-mailer (neti:service-access-path-args path))))
