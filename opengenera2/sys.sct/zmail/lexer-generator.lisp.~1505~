;;; General use parser -*- Syntax: Zetalisp; Base: 8; Mode: LISP; Package: ZWEI-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; FSM readtable lexer support

;;; This returns the next lexeme from the string
(DEFUN READ-LEXEME (RDTBL START-STRING START-INDEX END-STRING END-INDEX
		    &AUX CH CODE STATE FSM PROPNAME STRING INDEX VALUE)
  (SETQ PROPNAME (SI:RDTBL-READ-FUNCTION-PROPERTY RDTBL)
	FSM (SI:RDTBL-FSM RDTBL)
	STATE (SI:RDTBL-STARTING-STATE RDTBL)
	STRING START-STRING
	INDEX START-INDEX)
  (MULTIPLE-VALUE (CH CODE STRING INDEX)
    (LEXEME-WHITE-TYI RDTBL STRING INDEX END-STRING END-INDEX))
  (SETQ STATE (AREF FSM STATE CODE))
  (IF (NOT (NUMBERP STATE))
      (LET ((FLAG (CAR STATE))
	    (ACTION (CDR STATE)))
	(SELECTQ FLAG
	  (SINGLE
	   (IF CH
	       (MULTIPLE-VALUE-BIND (STRING INDEX)
		   (LEXEME-UNTYI CH STRING INDEX)
		 (SETQ VALUE (LIST ACTION CH (LIST STRING INDEX))))
	       (SETQ VALUE (LIST ACTION CH (LIST STRING INDEX)))))
	  (START
	   (MULTIPLE-VALUE (STRING INDEX)
	     (LEXEME-UNTYI CH STRING INDEX))
	   (MULTIPLE-VALUE (VALUE STRING INDEX)
	     (FUNCALL (GET ACTION PROPNAME) ACTION RDTBL STRING INDEX
		      END-STRING END-INDEX)))
	  (OTHERWISE
	   (ERROR 'GARBAGE-IN-FSM ':TYPE FLAG))))
      (MULTIPLE-VALUE (START-STRING START-INDEX)
	(LEXEME-UNTYI CH STRING INDEX))
      (DO () (NIL)
	(MULTIPLE-VALUE (CH CODE STRING INDEX)
	  (LEXEME-TYI RDTBL STRING INDEX END-STRING END-INDEX))
	(SETQ STATE (AREF FSM STATE CODE))
	(AND (NOT (NUMBERP STATE))
	     (LET ((FLAG (CAR STATE))
		   (ACTION (CDR STATE)))
	       (SELECTQ FLAG
		 (UNTYI
		  (AND CH
		       (MULTIPLE-VALUE (STRING INDEX)
			 (LEXEME-UNTYI CH STRING INDEX))))
		 (OTHERWISE
		  (ERROR 'GARBAGE-IN-FSM ':TYPE FLAG ':STRING STRING ':INDEX INDEX)))
	       (SETQ VALUE (FUNCALL (GET ACTION PROPNAME) ACTION RDTBL
				    START-STRING START-INDEX STRING INDEX))
	       (RETURN)))))
  (VALUES VALUE STRING INDEX))

(DEFMETHOD (:POSITION-AND-REPORT GARBAGE-IN-FSM) (STREAM)
  (SEND SELF ':REPORT STREAM)
  (VALUES STRING INDEX))

(DEFMETHOD (:REPORT GARBAGE-IN-FSM) (STREAM)
  (FORMAT STREAM "~S was found in the FSM." TYPE))

(DEFMACRO RDTBL-LIMITED-BITS (RDTBL CHAR-CODE)
  `(LET ((CHAR-CODE ,CHAR-CODE))
     (IF (< CHAR-CODE (SI:RDTBL-LIMIT ,RDTBL))
	 (SI:RDTBL-BITS ,RDTBL CHAR-CODE)
       (SI:OUT-OF-BOUNDS-RDTBL-BITS ,RDTBL CHAR-CODE))))

(DEFMACRO RDTBL-LIMITED-CODE (RDTBL CHAR-CODE)
  `(LET ((CHAR-CODE ,CHAR-CODE))
     (IF (< CHAR-CODE (SI:RDTBL-LIMIT ,RDTBL))
	 (SI:RDTBL-CODE ,RDTBL CHAR-CODE)
       (SI:OUT-OF-BOUNDS-RDTBL-CODE ,RDTBL CHAR-CODE))))

(DEFUN LEXEME-WHITE-TYI (RDTBL STRING INDEX END-STRING END-INDEX)
  (DO ((CH) (CODE))
      (NIL)
    (MULTIPLE-VALUE (CH CODE STRING INDEX)
      (LEXEME-TYI RDTBL STRING INDEX END-STRING END-INDEX))
    (AND (OR (NULL CH)
	     (NOT (BIT-TEST 1 (RDTBL-LIMITED-BITS RDTBL (CHAR-CODE CH)))))
	 (RETURN (VALUES CH CODE STRING INDEX)))))

;;; This will work with ZWEI lines over multiple line regions or regular strings
;;; since the EOF check will happen before the LINE-NEXT attempt.
(DEFUN LEXEME-TYI (RDTBL STRING INDEX END-STRING END-INDEX)
  (DECLARE (VALUES CH CODE STRING INDEX))
  (COND ((AND (EQ STRING END-STRING) (= INDEX END-INDEX))
	 (VALUES NIL (SI:RDTBL-EOF-CODE RDTBL) STRING INDEX))
	((= INDEX (ARRAY-ACTIVE-LENGTH STRING))
	 (VALUES #\CR (SI:RDTBL-CODE RDTBL (CHAR-CODE #\CR)) (LINE-NEXT STRING) 0))
	(T
	 (LET* ((CH (AREF STRING INDEX)))
	   (VALUES CH (RDTBL-LIMITED-CODE RDTBL (CHAR-CODE CH)) STRING (1+ INDEX))))))

(DEFUN LEXEME-UNTYI (IGNORE STRING INDEX)
  (IF (ZEROP INDEX)
      (LET ((LINE (LINE-PREVIOUS STRING)))
	(VALUES LINE (ARRAY-ACTIVE-LENGTH LINE)))
      (VALUES STRING (1- INDEX))))

(DEFUN LEXEME-SLASH-TYI (RDTBL STRING INDEX END-STRING END-INDEX &AUX CH CODE)
  (MULTIPLE-VALUE (CH CODE STRING INDEX)
    (LEXEME-TYI RDTBL STRING INDEX END-STRING END-INDEX))
  (IF (OR (NULL CH) (NOT (BIT-TEST 2 (RDTBL-LIMITED-BITS RDTBL (CHAR-CODE CH)))))
      (VALUES CH CODE STRING INDEX)
      (MULTIPLE-VALUE (CH NIL STRING INDEX)
	(LEXEME-TYI RDTBL STRING INDEX END-STRING END-INDEX))
      (AND (NULL CH) (ERROR 'EOF-AFTER-SLASH ':STRING STRING))
      (VALUES CH (SI:RDTBL-SLASH-CODE RDTBL) STRING INDEX)))

(DEFMETHOD (:POSITION-AND-REPORT EOF-AFTER-SLASH) (STREAM)
  (FORMAT STREAM "The end was reached just after a slash character.")
  (VALUES STRING (STRING-LENGTH STRING)))

(DEFMETHOD (:REPORT EOF-AFTER-SLASH) (STREAM)
  (FORMAT STREAM "The end of ~S came just after a slash character." STRING))

(DEFUN RDTBL-LEXER (RDTBL START-STRING START-INDEX END-STRING END-INDEX)
  (LOOP WITH STRING = START-STRING
	AND INDEX = START-INDEX
	AND TEM
	DO (MULTIPLE-VALUE (TEM STRING INDEX)
	     (READ-LEXEME RDTBL STRING INDEX END-STRING END-INDEX))
	COLLECT TEM
	UNTIL (EQ (CAR TEM) 'EOF)))
(DEFUN LEX-SUBSTRING (TYPE IGNORE START-STRING START-INDEX END-STRING END-INDEX)
  (VALUES (LET ((START (LIST START-STRING START-INDEX))
		(END (LIST END-STRING END-INDEX)))
	    (IF (EQ START-STRING END-STRING)
		(LIST TYPE (SUBSTRING START-STRING START-INDEX END-INDEX) START END)
		(LIST TYPE (STRING-INTERVAL START END T) START END)))
	  END-STRING
	  END-INDEX))
(DEFUN LEX-QUOTED-STRING (TYPE RDTBL START-STRING START-INDEX END-STRING END-INDEX)
  (MULTIPLE-VALUE-BIND (DELIMITER IGNORE STRING INDEX)
      (LEXEME-TYI RDTBL START-STRING START-INDEX END-STRING END-INDEX)
    (MULTIPLE-VALUE-BIND (UNQUOTED-STRING)
	(DO ((SLASH-CODE (SI:RDTBL-SLASH-CODE RDTBL))
	     (CH) (CODE)
	     (UNQUOTED-STRING (MAKE-ARRAY 10 :TYPE 'ART-FAT-STRING :FILL-POINTER 0)))
	    (NIL)
	  (MULTIPLE-VALUE (CH CODE STRING INDEX)
	    (LEXEME-SLASH-TYI RDTBL STRING INDEX END-STRING END-INDEX))
	  (WHEN (NULL CH)
	    (ERROR 'EOF-IN-MIDDLE-OF-STRING :STRING STRING :START-INDEX START-INDEX))
	  (WHEN (AND (CHAR= CH DELIMITER) (NEQ CODE SLASH-CODE))
	    (SETQ END-STRING STRING
		  END-INDEX INDEX)
	    (RETURN UNQUOTED-STRING))
	  (ARRAY-PUSH-EXTEND UNQUOTED-STRING CH))
      (VALUES
	(LIST TYPE UNQUOTED-STRING (LIST START-STRING START-INDEX) (LIST END-STRING END-INDEX))
	END-STRING
	END-INDEX))))

(DEFMETHOD (:POSITION-AND-REPORT EOF-IN-MIDDLE-OF-SPECIAL-TOKEN) (STREAM)
  (FORMAT STREAM
	  "The end of the string was reached before the end of the ~A that started here."
	  (SEND SELF ':TOKEN-NAME))
  (VALUES STRING START-INDEX))

(DEFMETHOD (:REPORT EOF-IN-MIDDLE-OF-SPECIAL-TOKEN) (STREAM)
  (FORMAT STREAM "~&In ~S,~%~VT
The end of the string was reached before the end of the ~A that started here."
	  STRING (LOOP FOR COUNT FROM 4	;"In /""
		       FOR INDEX FROM 0 BELOW START-INDEX
		       AS CHAR = (AREF STRING INDEX)
		       WHEN (MEM #'CHAR-EQUAL CHAR '(#/" #//))
		       DO (INCF COUNT)		;Two places for these
		       ELSE WHEN (CHAR-EQUAL CHAR #\CR) DO (SETQ COUNT 0)
		       FINALLY (RETURN COUNT))
	  (SEND SELF ':TOKEN-NAME)))

(DEFMETHOD (:TOKEN-NAME EOF-IN-MIDDLE-OF-STRING) () "string")



;;; Lexer routines, fsm defined in ZMAIL; LEX733
(DEFVAR RFC733)

(DEFPROP ATOM LEX-SUBSTRING RFC733)
(DEFPROP AT-ATOM LEX-SUBSTRING RFC733)
(DEFPROP QUOTED-STRING LEX-QUOTED-STRING RFC733)

(DEFUN (COMMENT RFC733) (TYPE RDTBL START-STRING START-INDEX END-STRING END-INDEX
			 &AUX STRING INDEX)
  (MULTIPLE-VALUE (NIL NIL STRING INDEX)
    (LEXEME-TYI RDTBL START-STRING START-INDEX END-STRING END-INDEX))
  (DO ((TEM)) (NIL)
    (MULTIPLE-VALUE (TEM STRING INDEX)
      (READ-LEXEME RDTBL STRING INDEX END-STRING END-INDEX))
    (SELECTQ (CAR TEM)
      (CLOSE (RETURN))
      (EOF (ERROR 'EOF-IN-MIDDLE-OF-COMMENT ':STRING STRING ':START-INDEX START-INDEX))))
  (LEX-SUBSTRING TYPE RDTBL START-STRING START-INDEX STRING INDEX))

(DEFMETHOD (:TOKEN-NAME EOF-IN-MIDDLE-OF-COMMENT) () "comment")

(DEFUN RFC733-LEXER (STRING &OPTIONAL (START 0) END)
  (OR END (SETQ END (STRING-LENGTH STRING)))
  (RDTBL-LEXER RFC733 STRING START STRING END))
