;;; -*- Mode: LISP; Package: ZWEI; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(DEFSTRUCT (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID :LIST :CONC-NAME)
  PATHNAME
  INFO
  FILE-TICK)

(DEFFLAVOR DIRECTORY-MAIL-BUFFER () (FILE-MAIL-BUFFER))

(ADD-MAIL-BUFFER-FLAVOR 'DIRECTORY-MAIL-BUFFER "Directory" "Messages in individual files")

(DEFMETHOD (:FORMAT-NAME DIRECTORY-MAIL-BUFFER) () "Directory")

(DEFMETHOD (:MAIL-FILE-REPARSABLE-P DIRECTORY-MAIL-BUFFER) () T)

(DEFMETHOD (POSSIBLE-MAIL-FILE-OPTIONS DIRECTORY-MAIL-BUFFER) ()
  '(:DIRECTORY-MAIL-FILE :VERSION :APPEND :REVERSE-NEW-MAIL :MAIL :OWNER :SORT
    :DELETE-EXPIRED :KEYWORDS :KEYWORDS-STRING :SUMMARY-WINDOW-FORMAT :REFORMAT-TEMPLATE))

(DEFMETHOD (SETTABLE-MAIL-FILE-OPTIONS DIRECTORY-MAIL-BUFFER) ()
  '(:APPEND :REVERSE-NEW-MAIL :MAIL :OWNER :SORT :DELETE-EXPIRED
    :SUMMARY-WINDOW-FORMAT :REFORMAT-TEMPLATE))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; The default value for (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB"):directory-mail1 is2 t1 and for 2:version1 is 2*highest-babyl-version*1.
0(DEFMETHOD (DEFAULT-MAIL-FILE-OPTION-VALUE DIRECTORY-MAIL-BUFFER) (OPTION)
  (CL:CASE OPTION
    (:DIRECTORY-MAIL-FILE (VALUES T T))
    (:VERSION (VALUES *HIGHEST-BABYL-VERSION* T))
    (OTHERWISE (VALUES NIL NIL))))

(DEFINE-NOT-SETTABLE-MAIL-FILE-OPTION :DIRECTORY-MAIL-FILE)

(DEFUN (:|*MAIL FILE DIRECTORY*| BABYL-OPTION-PARSER) (&REST IGNORE)
  '(:DIRECTORY-MAIL-FILE T))

(DEFUN (:DIRECTORY-MAIL-FILE BABYL-OPTION-PRINTER) (STREAM &REST IGNORE)
  (FORMAT STREAM "*Mail file directory*"))

(DEFMETHOD (UPDATE-OPTIONS-IN-FILE DIRECTORY-MAIL-BUFFER) ()
  1;; Cause any pathnames that happen to get parsed without hosts to be for here.
0  (FS:SET-DEFAULT-PATHNAME PATHNAME *ZMAIL-PATHNAME-DEFAULTS*)
  (LET ((PLIST (SEND SELF :PROPERTY-LIST-LOCATION)))
    1;; 2:directory-mail-file1 option must be first.
0    (WHEN (OR (NEQ (FIRST (LOCATION-CONTENTS PLIST)) :DIRECTORY-MAIL-FILE)
	      (NEQ (SECOND (LOCATION-CONTENTS PLIST)) T))
      (SI:NREMPROP PLIST :DIRECTORY-MAIL-FILE)
      (PUTPROP PLIST T :DIRECTORY-MAIL-FILE))
    (UPDATE-BABYL-OPTIONS-IN-FILE SELF PLIST
				  (BP-LINE (INTERVAL-FIRST-BP HEADER-INTERVAL))
				  (BP-LINE (INTERVAL-LAST-BP HEADER-INTERVAL)))))

;;; Read the options section of a directory mail file --
;;;    Our MAKE-INSTANCE and/or TRANSFORM-INSTANCE method has already supplied default values.
(DEFMETHOD (VERIFY-MSG-FILE-FORMAT-AND-LOAD-HEADER DIRECTORY-MAIL-BUFFER) ()
  (CHECK-MSG-FILE-ELEMENT-TYPE)
  (LET ((FIRST-LINE (SEND STREAM :LINE-IN)))
    (SEND STREAM :SET-POINTER 0)
    (IF (STRING-EQUAL FIRST-LINE "*Mail file directory*")
	(LET ((FILE-PROPERTIES (PARSE-DIRECTORY-OPTIONS STREAM HEADER-INTERVAL)))
	  (LOOP FOR (TYPE VALUE) ON FILE-PROPERTIES BY 'CDDR
		DO (SEND SELF :PUTPROP VALUE TYPE)))
      (ERROR 'WRONG-MAIL-FILE-FORMAT :BUFFER SELF
				     :APPARENT-FORMAT (ACTUAL-MAIL-FILE-FORMAT PATHNAME
									       STREAM)
				     :FORMAT-STRING NIL))))

(DEFUN PARSE-DIRECTORY-OPTIONS (STREAM INTERVAL)
  (FS:SET-DEFAULT-PATHNAME (SEND STREAM :PATHNAME) *ZMAIL-PATHNAME-DEFAULTS*)
  (LET ((END-LINE (BP-LINE (INTERVAL-LAST-BP INTERVAL))))
    (LOOP WITH (LINE EOF)
	  DO (MULTIPLE-VALUE (LINE EOF) (SEND STREAM :LINE-IN LINE-LEADER-SIZE))
	  UNTIL (OR EOF (ZEROP (LINE-LENGTH LINE)))
	  DO (INSERT-LINE-WITH-LEADER LINE END-LINE)
	  APPEND (LOOP FOR (IND VAL) ON (OPTION-FROM-STRING LINE) BY 'CDDR
		       WHEN (GETL (LOCF OPTIONS) `(,IND))
			 DO (PUTPROP (LOCF OPTIONS) VAL IND)
		       ELSE APPEND (LIST IND VAL))
	    INTO OPTIONS
	  FINALLY
	    (RETURN OPTIONS))))

;;; Read the next message --
;;;    For directory mail files, the buffer's stream is open to a file which contains a single
;;;    line per message in the mail file.  The contents of the line is the pathname of a file
;;;    which holds the actual message content.  All that we do at READ-NEXT-MSG time is
;;;    construct a message with a FILE-ID property that identifies the actual file.  A whopper
;;;    on the :PARSE-MSG method will actually read the message.
(DEFMETHOD (READ-NEXT-MSG DIRECTORY-MAIL-BUFFER) ()
  (DECLARE (VALUES . (MSG MORE-MSGS-AVAILABLE-P)))
  (LET ((FILE-TICK (OR TICK *TICK*)))
    (MULTIPLE-VALUE-BIND (LINE EOF)
	(SEND STREAM :LINE-IN)
      (IF (AND EOF (EQUAL LINE ""))
	  (VALUES NIL NIL)
	(LET ((MSG-PATHNAME (FS:MERGE-PATHNAMES LINE *ZMAIL-PATHNAME-DEFAULTS*))
	      (MSG (MAKE-EMPTY-MSG :TICK FILE-TICK :FATTENED-P NIL)))
	  (PUSH MSG-PATHNAME (SEND SELF :GET :MSG-PATHNAMES))
	  (CL:SETF (MSG-BUFFER MSG) SELF
		   (MSG-STATUS MSG) (LIST 'FILE-ID (MAKE-DIRECTORY-MAIL-BUFFER-MSG-FILE-ID
						     PATHNAME MSG-PATHNAME
						     FILE-TICK FILE-TICK)))
	  (VALUES MSG (NOT EOF)))))))

;;; Actually load the message before trying to parse it ...
(DEFMETHOD (PARSE-MSG DIRECTORY-MAIL-BUFFER :BEFORE) (MSG STAT)
  (LET ((FILE-ID (GET STAT 'FILE-ID)))
    (WHEN (NULL FILE-ID)
      (FERROR "No file-id yet?"))
    (WHEN (NULL (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-INFO FILE-ID))
      (WITH-OPEN-FILE (MSG-STREAM (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-PATHNAME FILE-ID))
	(STREAM-INTO-BP MSG-STREAM (MSG-REAL-END-BP MSG))
	(SETF (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-INFO FILE-ID) (SEND MSG-STREAM :INFO))
	(SETF (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-FILE-TICK FILE-ID)
	      (NODE-TICK (MSG-REAL-INTERVAL MSG))))))
  (LET ((START-LINE (BP-LINE (MSG-REAL-START-BP MSG))))
    (PARSE-MSG-NEW-BABYL-STATUS-LINE START-LINE STAT)
    (MOVE-BP (MSG-START-BP MSG) (LINE-NEXT START-LINE) 0))
  )

(DEFMETHOD (UPDATE-MSG-OPTIONS-IN-FILE DIRECTORY-MAIL-BUFFER) (MSG &AUX MSG-STATUS BP LINE)
  (SETQ MSG-STATUS (ASSURE-MSG-PARSED MSG)
        BP (MSG-REAL-START-BP MSG)
	LINE (BP-LINE BP))
  (SETF (LINE-LENGTH LINE) 0)
  (UPDATE-MSG-NEW-BABYL-STATUS-LINE LINE MSG-STATUS)
  (MUNG-BP-LINE-AND-INTERVAL BP)
  (MARK-SEQUENCE-MODIFIED SELF :HARD T))

(DEFMETHOD (RECENT-IS-MSG-OPTION-IN-FILE-P DIRECTORY-MAIL-BUFFER) ()
  (IF (< (SEND SELF :GET :VERSION) 5)
      NIL
    (ASSOC "recent" *SAVED-INTERNAL-PROPERTIES-ALIST*)))

(DEFMETHOD (SAVE-MAIL-FILE-HEADER DIRECTORY-MAIL-BUFFER :AFTER) (MAIL-FILE-SAVING-STATE)
  (IGNORE MAIL-FILE-SAVING-STATE)
  (SEND STREAM :TYO #\CR))

(DEFMETHOD (SAVE-MSG DIRECTORY-MAIL-BUFFER) (MSG MAIL-FILE-SAVING-STATE)
  (LET ((FILE-ID (GET (LOCF (MSG-STATUS MSG)) 'FILE-ID)))
    (WHEN (NULL FILE-ID)
      (SETQ FILE-ID (MAKE-DIRECTORY-MAIL-BUFFER-MSG-FILE-ID
		      PATHNAME (SEND SELF :ALLOCATE-NEXT-PATHNAME)
		      FILE-TICK -1))
      (PUTPROP (LOCF (MSG-STATUS MSG)) FILE-ID 'FILE-ID))
    (WHEN (> (NODE-TICK (MSG-REAL-INTERVAL MSG))
	     (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-FILE-TICK FILE-ID))
      (WITH-OPEN-FILE (MSG-STREAM (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-PATHNAME FILE-ID)
				  :DIRECTION :OUTPUT)
	(MSG-BUFFER-SAVE-MSG-TEXT MSG MSG-STREAM (MFSS-FORMAT-SLOT MAIL-FILE-SAVING-STATE))
	(CLOSE MSG-STREAM)
	(SETF (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-INFO FILE-ID) (SEND MSG-STREAM :INFO)))
      (SETF (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-FILE-TICK FILE-ID) (TICK)))
    (SEND STREAM :LINE-OUT
	  (SEND (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-PATHNAME FILE-ID) :STRING-FOR-DIRED))))

(DEFMETHOD (:ALLOCATE-NEXT-PATHNAME DIRECTORY-MAIL-BUFFER) ()
  (LET ((UID (LET ((CACHE (SEND SELF :GET :PATHNAME-UID-CACHE)))
	       (UNLESS (AND CACHE (> (SECOND CACHE) (FIRST CACHE)))
		 (LET ((UID-PATHNAME (SEND PATHNAME :NEW-PATHNAME :NAME "UID"
					   :TYPE :LISP :VERSION :NEWEST)))
		   (WHEN (NULL CACHE)
		     (LET ((LOWER (WITH-OPEN-FILE-CASE (UID-STREAM UID-PATHNAME)
				    (FS:FILE-NOT-FOUND
				      1)
				    (:NO-ERROR
				     (PARSE-NUMBER (SEND UID-STREAM :LINE-IN))))))
		       (SETQ CACHE (LIST LOWER 0))
		       (SEND SELF :PUTPROP CACHE :PATHNAME-UID-CACHE)))
		   (LET ((UPPER (+ (FIRST CACHE) 200.)))
		     (SETF (SECOND CACHE) UPPER)
		     (WITH-OPEN-FILE (UID-STREAM UID-PATHNAME :DIRECTION :OUTPUT)
		       (FORMAT UID-STREAM "~D~%" UPPER)))))
	       (PROG1 (FIRST CACHE) (INCF (FIRST CACHE))))))
    (SEND PATHNAME :NEW-PATHNAME :NAME (FORMAT NIL "~D" UID) :TYPE "MSG" :VERSION :NEWEST)))

(DEFMETHOD (FINISH-SAVING-MAIL-FILE DIRECTORY-MAIL-BUFFER :AFTER) (&REST IGNORE)
  (LET ((MSG-PATHNAMES (LOOP FOR MSG BEING THE MSGS IN SELF
			     COLLECT (DIRECTORY-MAIL-BUFFER-MSG-FILE-ID-PATHNAME
				       (GET (LOCF (MSG-STATUS MSG)) 'FILE-ID)))))
    (DOLIST (OLD-PATHNAME (SEND SELF :GET :MSG-PATHNAMES))
      (UNLESS (MEMQ OLD-PATHNAME MSG-PATHNAMES)
	(CONDITION-CASE ()
	     (DELETEF OLD-PATHNAME)
	   (FS:FILE-NOT-FOUND))))		1;It's OK if the file is already deleted.
0    (SEND SELF :PUTPROP MSG-PATHNAMES :MSG-PATHNAMES)))

(DEFMETHOD (:NEW-MSG-HEADER-AREA DIRECTORY-MAIL-BUFFER) ()
  #\CR)
