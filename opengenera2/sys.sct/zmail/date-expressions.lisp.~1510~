;;;-*- Mode:LISP; Package:TIME; Base:10. -*-
;;; Periodic day specifications
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Lacking:	DAY-OF-WEEK-IN-MONTH AFTER BEFORE ALTERNATE
;;;		Other calendar systems: Lunar, Hebrew, French rev., Mayan?
;;;		A decent parser

(DEFUN MONTH-START-DAY-OF-WEEK (MONTH YEAR)
  (DATE-DAY-OF-THE-WEEK 1 MONTH YEAR))

(DEFUN MONTH-NUMBER-OF-WEEKS (MONTH YEAR &OPTIONAL (START-ON-MONDAY T))
  (// (+ (MONTH-LENGTH MONTH YEAR)
	 (\ (+ (MONTH-START-DAY-OF-WEEK MONTH YEAR)
	       (IF START-ON-MONDAY 0 1))
	    7)
	 6)
      7))

;;; Date expression matching
;;; Methods are :TEST day month year => T/NIL
;;;		:SEARCH day month year => day month year []
;;;		:REVERSE-SEARCH day month year => day month year [<]
(DEFMACRO DEFINE-DATE-EXPRESSION (NAME PATTERN &BODY BODY)
  `(PROGN 'COMPILE
     ,(AND PATTERN
	   `(DEFUN (,NAME DATE-EXPRESSION-MACRO) (EXPR)
	      (CANONICALIZE-DATE-EXPRESSION EXPR ',PATTERN)))
     (DEFSELECT ((,NAME DATE-EXPRESSION-FUNCTION) DEFAULT-DATE-EXPRESSION-FUNCTION)
       . ,BODY)))

(DEFMACRO DATE-= (DAY-1 MONTH-1 YEAR-1 DAY-2 MONTH-2 YEAR-2)
  `(AND (= ,DAY-1 ,DAY-2)
	(= ,MONTH-1 ,MONTH-2)
	(= ,YEAR-1 ,YEAR-2)))

(DEFMACRO DATE-< (DAY-1 MONTH-1 YEAR-1 DAY-2 MONTH-2 YEAR-2)
  `(COND ((> ,YEAR-1 ,YEAR-2) NIL)
	 ((< ,YEAR-1 ,YEAR-2) T)
	 ((> ,MONTH-1 ,MONTH-2) NIL)
	 ((< ,MONTH-1 ,MONTH-2) T)
	 ((> ,DAY-1 ,DAY-2) NIL)
	 ((< ,DAY-1 ,DAY-2) T)
	 (T NIL)))

(DEFMACRO DATE-> (DAY-1 MONTH-1 YEAR-1 DAY-2 MONTH-2 YEAR-2)
  `(COND ((< ,YEAR-1 ,YEAR-2) NIL)
	 ((> ,YEAR-1 ,YEAR-2) T)
	 ((< ,MONTH-1 ,MONTH-2) NIL)
	 ((> ,MONTH-1 ,MONTH-2) T)
	 ((< ,DAY-1 ,DAY-2) NIL)
	 ((> ,DAY-1 ,DAY-2) T)
	 (T NIL)))

(DEFSELECT DEFAULT-DATE-EXPRESSION-FUNCTION
  (:TEST (EXPR DAY MONTH YEAR)
    (MULTIPLE-VALUE-BIND (NEXT-DAY NEXT-MONTH NEXT-YEAR)
	(DATE-EXPRESSION-INVOKE EXPR ':SEARCH DAY MONTH YEAR)
      (DATE-= DAY MONTH YEAR NEXT-DAY NEXT-MONTH NEXT-YEAR)))
  (:SEARCH (EXPR DAY MONTH YEAR)
    (DO ()
	((DATE-EXPRESSION-INVOKE EXPR ':TEST DAY MONTH YEAR))
      (MULTIPLE-VALUE (DAY MONTH YEAR)
	(INCREMENT-DATE DAY MONTH YEAR)))
    (VALUES DAY MONTH YEAR))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR)
    (DO () (NIL)
      (MULTIPLE-VALUE (DAY MONTH YEAR)
	(INCREMENT-DATE DAY MONTH YEAR -1))
      (AND (DATE-EXPRESSION-INVOKE EXPR ':TEST DAY MONTH YEAR)
	   (RETURN T)))
    (VALUES DAY MONTH YEAR)))

;;; Logical expressions

(DEFMACRO DEFINE-RECURSIVE-DATE-EXPRESSION (NAME &BODY BODY)
  `(PROGN 'COMPILE
     (DEFPROP ,NAME RECURSIVE-DATE-EXPRESSION-MACRO DATE-EXPRESSION-MACRO)
     (DEFINE-DATE-EXPRESSION ,NAME NIL . ,BODY)))

(DEFUN MACRO-EXPAND-DATE-EXPRESSION (EXPR)
  (DO ((FUN) (NEXPR))
      ((NULL (SETQ FUN (GET (CAR EXPR) 'DATE-EXPRESSION-MACRO))) EXPR)
    (SETQ NEXPR (FUNCALL FUN EXPR))
    (AND (EQUAL NEXPR EXPR) (RETURN EXPR))
    (SETQ EXPR NEXPR)))

(DEFUN RECURSIVE-DATE-EXPRESSION-MACRO (EXPR)
  (CONS (CAR EXPR)
	(MAPCAR 'MACRO-EXPAND-DATE-EXPRESSION (CDR EXPR))))

;;; (NOT EXPR)
(DEFINE-RECURSIVE-DATE-EXPRESSION NOT
  (:TEST (EXPR DAY MONTH YEAR)
    (SETQ EXPR (CADR EXPR))
    (NOT (DATE-EXPRESSION-INVOKE EXPR ':TEST DAY MONTH YEAR))))

;;; (AND EXPR-1 EXPR-2 ...)
(DEFINE-RECURSIVE-DATE-EXPRESSION AND
  (:TEST (EXPR DAY MONTH YEAR)
    (DO ((L (CDR EXPR) (CDR L)))
	((NULL L) T)
      (OR (DATE-EXPRESSION-INVOKE (CAR L) ':TEST DAY MONTH YEAR)
	  (RETURN NIL))))
  (:SEARCH (EXPR DAY MONTH YEAR)
    ;; Search each expression foward until they all agree on the day
    (DO ((NEXT-YEAR) (NEXT-MONTH) (NEXT-DAY))
	((DO ((L (CDR EXPR) (CDR L)))
	     ((NULL L) T)
	   (MULTIPLE-VALUE (NEXT-DAY NEXT-MONTH NEXT-YEAR)
	     (DATE-EXPRESSION-INVOKE (CAR L) ':SEARCH DAY MONTH YEAR))
	   (COND ((NOT (DATE-= DAY MONTH YEAR NEXT-DAY NEXT-MONTH NEXT-YEAR))
		  (SETQ YEAR NEXT-YEAR
			MONTH NEXT-MONTH
			DAY NEXT-DAY)
		  (RETURN NIL))))
	 (VALUES DAY MONTH YEAR))))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR)
    (DO ((LAST-YEAR) (LAST-MONTH) (LAST-DAY))
	((DO ((L (CDR EXPR) (CDR L)))
	     ((NULL L) T)
	   (MULTIPLE-VALUE (LAST-DAY LAST-MONTH LAST-YEAR)
	     (DATE-EXPRESSION-INVOKE (CAR L) ':REVERSE-SEARCH DAY MONTH YEAR))
	   (COND ((NOT (DATE-= DAY MONTH YEAR LAST-DAY LAST-MONTH LAST-YEAR))
		  (SETQ YEAR LAST-YEAR
			MONTH LAST-MONTH
			DAY LAST-DAY)
		  (RETURN NIL))))
	 (VALUES DAY MONTH YEAR)))))

;;; (OR EXPR-1 EXPR-2 ...)
(DEFINE-RECURSIVE-DATE-EXPRESSION OR
  (:TEST (EXPR DAY MONTH YEAR)
    (DO ((L (CDR EXPR) (CDR L)))
	((NULL L) NIL)
      (AND (DATE-EXPRESSION-INVOKE (CAR L) ':TEST DAY MONTH YEAR)
	   (RETURN T))))
  (:SEARCH (EXPR DAY MONTH YEAR &AUX NEXT-DAY NEXT-MONTH NEXT-YEAR)
    (MULTIPLE-VALUE (NEXT-DAY NEXT-MONTH NEXT-YEAR)
      (DATE-EXPRESSION-INVOKE (CADR EXPR) ':SEARCH DAY MONTH YEAR))
    (DO ((L (CDDR EXPR) (CDR L)))
	((NULL L))
      (MULTIPLE-VALUE-BIND (D M Y)
	  (DATE-EXPRESSION-INVOKE (CAR L) ':SEARCH DAY MONTH YEAR)
	(AND (DATE-< D M Y NEXT-DAY NEXT-MONTH NEXT-YEAR)
	     (SETQ NEXT-YEAR Y
		   NEXT-MONTH M
		   NEXT-DAY D))))
    (VALUES NEXT-DAY NEXT-MONTH NEXT-YEAR))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR &AUX LAST-DAY LAST-MONTH LAST-YEAR)
    (MULTIPLE-VALUE (LAST-DAY LAST-MONTH LAST-YEAR)
      (DATE-EXPRESSION-INVOKE (CADR EXPR) ':REVERSE-SEARCH DAY MONTH YEAR))
    (DO ((L (CDDR EXPR) (CDR L)))
	((NULL L))
      (MULTIPLE-VALUE-BIND (D M Y)
	  (DATE-EXPRESSION-INVOKE (CAR L) ':REVERSE-SEARCH DAY MONTH YEAR)
	(AND (DATE-> D M Y LAST-DAY LAST-MONTH LAST-YEAR)
	     (SETQ LAST-YEAR Y
		   LAST-MONTH M
		   LAST-DAY D))))
    (VALUES LAST-DAY LAST-MONTH LAST-YEAR)))

;;; Periodic expressions
;;; (DAILY) is always true
(DEFINE-DATE-EXPRESSION DAILY ()
  (:TEST (&REST IGNORE) T))

(DEFINE-DATE-EXPRESSION DAY-OF-THE-WEEK (DAY-OF-THE-WEEK)
  (:TEST (EXPR DAY MONTH YEAR &AUX DAY-OF-THE-WEEK)
    (SETQ DAY-OF-THE-WEEK (DATE-DAY-OF-THE-WEEK DAY MONTH YEAR))
    (= (CADR EXPR) DAY-OF-THE-WEEK))
  (:SEARCH (EXPR DAY MONTH YEAR &AUX DAY-OF-THE-WEEK)
    (SETQ DAY-OF-THE-WEEK (DATE-DAY-OF-THE-WEEK DAY MONTH YEAR))
    (AND ( (CADR EXPR) DAY-OF-THE-WEEK)
	 (MULTIPLE-VALUE (DAY MONTH YEAR)
	   (INCREMENT-DATE DAY MONTH YEAR (MOD (- (CADR EXPR) DAY-OF-THE-WEEK) 7))))
    (VALUES DAY MONTH YEAR))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR &AUX DAY-OF-THE-WEEK)
    (SETQ DAY-OF-THE-WEEK (DATE-DAY-OF-THE-WEEK DAY MONTH YEAR))
    (MULTIPLE-VALUE (DAY MONTH YEAR)
      (INCREMENT-DATE DAY MONTH YEAR (- (MOD (- (CADR EXPR) DAY-OF-THE-WEEK) 7) 7)))
    (VALUES DAY MONTH YEAR)))

(DEFUN DATE-DAY-OF-THE-WEEK (DAY MONTH YEAR)
  (LET ((UT (ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR)))
    (MULTIPLE-VALUE-BIND (NIL NIL NIL NIL NIL NIL DAY-OF-THE-WEEK)
      (DECODE-UNIVERSAL-TIME UT)
      DAY-OF-THE-WEEK)))

(DEFUN INCREMENT-DATE (DAY MONTH YEAR &OPTIONAL (NDAYS 1) &AUX LEN)
  (SETQ DAY (+ DAY NDAYS))
  (DO () (( DAY (SETQ LEN (MONTH-LENGTH MONTH YEAR))))
    (SETQ DAY (- DAY LEN)
	  MONTH (1+ MONTH))
    (AND (> MONTH 12)
	 (SETQ MONTH 1
	       YEAR (1+ YEAR))))
  (DO () (( DAY 1))
    (SETQ MONTH (1- MONTH))
    (AND (ZEROP MONTH)
	 (SETQ MONTH 12
	       YEAR (1- YEAR)))
    (SETQ DAY (+ DAY (MONTH-LENGTH MONTH YEAR))))
  (VALUES DAY MONTH YEAR))

(DEFINE-DATE-EXPRESSION DAY-OF-MONTH (DAY)
  (:TEST (EXPR DAY IGNORE IGNORE)
    (= DAY (CADR EXPR)))
  (:SEARCH (EXPR DAY MONTH YEAR &AUX TARGET)
    (SETQ TARGET (CADR EXPR))
    (UNLESS (= DAY TARGET)
      (DO () (NIL)
	(WHEN (MINUSP TARGET)
	  (SETQ DAY (+ TARGET (MONTH-LENGTH MONTH YEAR)))
	  (RETURN T))
	(WHEN (> DAY TARGET)
	  (SETQ MONTH (1+ MONTH))
	  (WHEN (> MONTH 12)
	    (SETQ MONTH 1
		  YEAR (1+ YEAR))))
	(SETQ DAY TARGET)
	(WHEN ( 1 DAY (MONTH-LENGTH MONTH YEAR))
	  (RETURN T))))
    (VALUES DAY MONTH YEAR))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR &AUX TARGET)
    (SETQ TARGET (CADR EXPR))
    (COND ((MINUSP TARGET)
	   (SETQ DAY (+ TARGET (MONTH-LENGTH MONTH YEAR))))
	  ((> DAY TARGET)
	   (SETQ DAY TARGET))			;Must exist this month
	  (T
	   (DO () (NIL)
	     (SETQ MONTH (1- MONTH))
	     (WHEN (ZEROP MONTH)
	       (SETQ MONTH 12
		     YEAR (1- YEAR)))
	     (SETQ DAY TARGET)
	     (WHEN ( DAY (MONTH-LENGTH MONTH YEAR))
	       (RETURN T)))))
    (VALUES DAY MONTH YEAR)))

(DEFINE-DATE-EXPRESSION MONTH (MONTH)
  (:TEST (EXPR IGNORE MONTH IGNORE)
    (= MONTH (CADR EXPR)))
  (:SEARCH (EXPR DAY MONTH YEAR &AUX TARGET)
    (COND (( MONTH (SETQ TARGET (CADR EXPR)))
	   (AND (> MONTH TARGET)
		(SETQ YEAR (1+ YEAR)))
	   (SETQ DAY 1
		 MONTH TARGET)))
    (VALUES DAY MONTH YEAR))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR &AUX TARGET)
    (SETQ TARGET (CADR EXPR))
    (IF (AND (= MONTH TARGET) (> DAY 1))
	(SETQ DAY (1- DAY))
	(AND (< MONTH TARGET)
	     (SETQ YEAR (1- YEAR)))
	(SETQ MONTH TARGET)
	(SETQ DAY (MONTH-LENGTH MONTH YEAR)))
    (VALUES DAY MONTH YEAR)))

(DEFINE-DATE-EXPRESSION DAY-AND-MONTH (MONTH DAY)
  (:TEST (EXPR DAY MONTH IGNORE)
    (AND (= MONTH (SECOND EXPR))
	 (= DAY (THIRD EXPR))))
  (:SEARCH (EXPR DAY MONTH YEAR &AUX TARGET-DAY TARGET-MONTH)
    (SETQ TARGET-MONTH (SECOND EXPR)
	  TARGET-DAY (THIRD EXPR))
    (OR (AND (= DAY TARGET-DAY) (= MONTH TARGET-MONTH))
	(DO ((FLAG (OR (> MONTH TARGET-MONTH)
		       (AND (= MONTH TARGET-MONTH)
			    (> DAY TARGET-DAY)))
		   T))
	    (NIL)
	  (AND FLAG (SETQ YEAR (1+ YEAR)))
	  (SETQ DAY TARGET-DAY
		MONTH TARGET-MONTH)
	  (AND ( DAY (MONTH-LENGTH MONTH YEAR))
	       (RETURN T))))
    (VALUES DAY MONTH YEAR))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR &AUX TARGET-DAY TARGET-MONTH)
    (SETQ TARGET-MONTH (SECOND EXPR)
	  TARGET-DAY (THIRD EXPR))
    (DO ((FLAG (OR (< MONTH TARGET-MONTH)
		   (AND (= MONTH TARGET-MONTH)
			(< DAY TARGET-DAY)))
	       T))
	(NIL)
      (AND FLAG (SETQ YEAR (1- YEAR)))
      (SETQ DAY TARGET-DAY
	    MONTH TARGET-MONTH)
      (AND ( DAY (MONTH-LENGTH MONTH YEAR))
	   (RETURN T)))
    (VALUES DAY MONTH YEAR)))

(DEFINE-DATE-EXPRESSION DAY-OF-YEAR (MONTH DAY YEAR)
  (:TEST (EXPR DAY MONTH YEAR)
    (AND (= MONTH (SECOND EXPR))
	 (= DAY (THIRD EXPR))
	 (= YEAR (FOURTH EXPR))))
  (:SEARCH (EXPR DAY MONTH YEAR &AUX TARGET-DAY TARGET-MONTH TARGET-YEAR)
   DAY MONTH YEAR
    (SETQ TARGET-MONTH (SECOND EXPR)
	  TARGET-DAY (THIRD EXPR)
	  TARGET-YEAR (FOURTH EXPR))
    (VALUES TARGET-DAY TARGET-MONTH TARGET-YEAR))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR &AUX TARGET-DAY TARGET-MONTH TARGET-YEAR)
   DAY MONTH YEAR
    (SETQ TARGET-MONTH (SECOND EXPR)
	  TARGET-DAY (THIRD EXPR)
	  TARGET-YEAR (FOURTH EXPR))
    (VALUES TARGET-DAY TARGET-MONTH TARGET-YEAR)))

(DEFINE-DATE-EXPRESSION DAY-OF-WEEK-IN-MONTH (MONTH DAY-OF-THE-WEEK OFFSET)
  (:TEST (EXPR DAY MONTH YEAR)
    (AND (= MONTH (SECOND EXPR))
	 (= (DATE-DAY-OF-THE-WEEK DAY MONTH YEAR) (THIRD EXPR))
	 (IF (= (FOURTH EXPR) -1)		;LAST
	     (> (+ DAY 7) (MONTH-LENGTH MONTH YEAR))
	     (= (// (1- DAY) 7) (1- (FOURTH EXPR))))))
  )

(DEFINE-DATE-EXPRESSION DAY-OF-WEEK-IN-ANY-MONTH (DAY-OF-THE-WEEK OFFSET)
  (:TEST (EXPR DAY MONTH YEAR)
    (AND (= (DATE-DAY-OF-THE-WEEK DAY MONTH YEAR) (SECOND EXPR))
	 (IF (= (THIRD EXPR) -1)		;LAST
	     (> (+ DAY 7) (MONTH-LENGTH MONTH YEAR))
	     (= (// (1- DAY) 7) (1- (THIRD EXPR))))))
  )

;;; This one isn't very useful, but see...
(DEFINE-DATE-EXPRESSION HOLIDAY ()
  (:TEST (EXPR DAY MONTH YEAR)
   EXPR
   (NOT (NULL (HOLIDAYS-FOR-DAY DAY MONTH YEAR)))))

(DEFUN (MONDAY-OR-HOLIDAY DATE-EXPRESSION-MACRO) (EXPR)
  (LET ((HOLIDAY (SECOND EXPR)))
    `(OR (AND ,HOLIDAY (NOT (DAY-OF-THE-WEEK 5)) (NOT (DAY-OF-THE-WEEK 6)))
	 (AND (PLUS ,HOLIDAY 1) (DAY-OF-THE-WEEK 0))
	 (AND (PLUS ,HOLIDAY 2) (DAY-OF-THE-WEEK 0)))))

(DEFVAR *DEFAULT-WORK-HOLIDAYS*
	'(OR (MONDAY-OR-HOLIDAY (NEW-YEARS-DAY))
	     (WASHINGTONS-BIRTHDAY)
	     (MEMORIAL-DAY)
	     (MONDAY-OR-HOLIDAY (INDEPENDENCE-DAY))
	     (LABOR-DAY)
	     (COLUMBUS-DAY)
	     (THANKSGIVING)
	     (PLUS (THANKSGIVING) 1)
	     (MINUS (CHRISTMAS) 1)
	     (MONDAY-OR-HOLIDAY (CHRISTMAS))
	     (MINUS (NEW-YEARS-DAY) 1)))

;;; This one is more useful.
(DEFUN (WORK-HOLIDAY DATE-EXPRESSION-MACRO) (EXPR)
  (LET* ((A-SITE-NAME (SECOND EXPR))
	 (SITE (NET:FIND-OBJECT-NAMED :SITE A-SITE-NAME))
	 (EXPR (SEND SITE :USER-GET :WORK-HOLIDAYS))
	 (PACKAGE (PKG-FIND-PACKAGE "TIME"))
	 (IBASE 10.) (BASE 10.))
    (OR (AND EXPR (READ-FROM-STRING EXPR)) *DEFAULT-WORK-HOLIDAYS*)))


(DEFVAR *HOLIDAY-LIST* NIL)

(DEFSTRUCT (HOLIDAY-CACHE :ARRAY-LEADER :NAMED :CONC-NAME
			  (:MAKE-ARRAY (:DIMENSIONS '(31. 12.))))
  ()				;Fill pointer
  YEAR)

(DEFVAR *HOLIDAY-CACHE-LIST* NIL)

;;; What holidays are celebrated today?
(DEFUN HOLIDAYS-FOR-DAY (DAY MONTH YEAR)
  (LET ((CACHE (LOOP FOR CACHE IN *HOLIDAY-CACHE-LIST*
		     WHEN (= YEAR (HOLIDAY-CACHE-YEAR CACHE))
		     RETURN CACHE)))
    (WHEN (NULL CACHE)
      (SETQ CACHE (MAKE-HOLIDAY-CACHE YEAR YEAR))
      (LOOP FOR HOLIDAY IN *HOLIDAY-LIST*
	    AS EXPR = (MACRO-EXPAND-DATE-EXPRESSION (LIST HOLIDAY))
	    DO (MULTIPLE-VALUE-BIND (NEXT-DAY NEXT-MONTH NEXT-YEAR)
		   (DATE-EXPRESSION-INVOKE EXPR ':SEARCH 1 1 YEAR)
		 (WHEN (CL:EQUALP YEAR NEXT-YEAR)
		   (PUSH HOLIDAY (AREF CACHE (1- NEXT-DAY) (1- NEXT-MONTH))))))
      (PUSH CACHE *HOLIDAY-CACHE-LIST*))
    (AREF CACHE (1- DAY) (1- MONTH))))
(DEFUN PRINT-CURRENT-DATE-AND-HOLIDAYS (&OPTIONAL (STREAM STANDARD-OUTPUT))
  (WHEN TIME:*TIMEBASE-INITIALIZED*
    (MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK)
	(GET-TIME)
      (LET ((HOLIDAYS (HOLIDAYS-FOR-DAY DAY MONTH YEAR)))
	(WHEN HOLIDAYS
	  (DOLIST (HOLIDAY HOLIDAYS)
	    (PRINC (GET HOLIDAY 'HOLIDAY-PRETTY-NAME) STREAM)
	    (PRINC ", " STREAM))))
      (PRINT-DATE SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK STREAM))))

(DEFMACRO DEFINE-FIXED-HOLIDAY (NAME PRETTY-NAME MONTH DAY)
  `(PROGN 'COMPILE
     (DEFUN (:PROPERTY ,NAME DATE-EXPRESSION-MACRO) (IGNORE)
       `(DAY-AND-MONTH ,',MONTH ,',DAY))
     (DEFPROP ,NAME ,PRETTY-NAME HOLIDAY-PRETTY-NAME)
     (SI:PUSH* ',NAME *HOLIDAY-LIST*)))
(DEFINE-FIXED-HOLIDAY NEW-YEARS-DAY "New Year's Day" JANUARY 1)
(DEFINE-FIXED-HOLIDAY MARTIN-LUTHER-KINGS-BIRTHDAY "Martin Luther King's Birthday" JANUARY 15)
(DEFINE-FIXED-HOLIDAY GROUNDHOG-DAY "Groundhog Day" FEBRUARY 2)
(DEFINE-FIXED-HOLIDAY VALENTINES-DAY "Valentine's Day" FEBRUARY 14)
(DEFINE-FIXED-HOLIDAY TRADITIONAL-WASHINGTONS-BIRTHDAY "Traditional Washington's Birthday"
		      FEBRUARY 22)
(DEFINE-FIXED-HOLIDAY LEAP-DAY "Leap Day" FEBRUARY 29)
(DEFINE-FIXED-HOLIDAY SAINT-PATRICKS-DAY "St. Patrick's Day" MARCH 17)
(DEFINE-FIXED-HOLIDAY VERNAL-EQUINOX "Vernal Equinox" MARCH 21)	;Not right
(DEFINE-FIXED-HOLIDAY GONDORIAN-NEW-YEAR "Gondorian New Year" MARCH 25)
(DEFINE-FIXED-HOLIDAY APRIL-FOOLS-DAY "April Fools Day" APRIL 1)
(DEFINE-FIXED-HOLIDAY MAY-DAY "May Day" MAY 1)
(DEFINE-FIXED-HOLIDAY SUMMER-SOLSTICE "Summer Solstice" JUNE 21)	;ditto
(DEFINE-FIXED-HOLIDAY INDEPENDENCE-DAY "Independence Day" JULY 4)
(DEFINE-FIXED-HOLIDAY BASTILLE-DAY "Bastille Day" JULY 14)
(DEFINE-FIXED-HOLIDAY DIURNAL-EQUINOX "Diurnal Equinox" SEPTEMBER 21)	;ditto
(DEFINE-FIXED-HOLIDAY HALLOWEEN "Hallowe'en" OCTOBER 31)
(DEFINE-FIXED-HOLIDAY ALL-SAINTS-DAY "All Saints Day" NOVEMBER 1)
(DEFINE-FIXED-HOLIDAY GUY-FAWKES-DAY "Guy Fawkes Day" NOVEMBER 5)
(DEFINE-FIXED-HOLIDAY VETERANS-DAY "Veterans Day" NOVEMBER 11)
(DEFINE-FIXED-HOLIDAY WINTER-SOLSTICE "Winter Solstice" DECEMBER 21)	;ditto
(DEFINE-FIXED-HOLIDAY CHRISTMAS "Christmas" DECEMBER 25)

(DEFMACRO DEFINE-RELATIVE-HOLIDAY (NAME PRETTY-NAME MONTH DAY-OF-THE-WEEK NTH)
  `(PROGN 'COMPILE
     (DEFUN (:PROPERTY ,NAME DATE-EXPRESSION-MACRO) (IGNORE)
       `(DAY-OF-WEEK-IN-MONTH ,',MONTH ,',DAY-OF-THE-WEEK ,',NTH))
     (DEFPROP ,NAME ,PRETTY-NAME HOLIDAY-PRETTY-NAME)
     (SI:PUSH* ',NAME *HOLIDAY-LIST*)))
(DEFINE-RELATIVE-HOLIDAY WASHINGTONS-BIRTHDAY "Washington's Birthday" FEBRUARY MONDAY THIRD)
(DEFINE-RELATIVE-HOLIDAY PATRIOTS-DAY "Patriots Day" APRIL MONDAY THIRD)
(DEFINE-RELATIVE-HOLIDAY MEMORIAL-DAY "Memorial Day" MAY MONDAY LAST)
(DEFINE-RELATIVE-HOLIDAY LABOR-DAY "Labor Day" SEPTEMBER MONDAY FIRST)
(DEFINE-RELATIVE-HOLIDAY COLUMBUS-DAY "Columbus Day" OCTOBER MONDAY SECOND)
(DEFINE-RELATIVE-HOLIDAY THANKSGIVING "Thanksgiving" NOVEMBER THURSDAY FOURTH)

(DEFMACRO DEFINE-PASCHAL-HOLIDAY (NAME PRETTY-NAME OFFSET)
  `(PROGN 'COMPILE
     (DEFUN (:PROPERTY ,NAME DATE-EXPRESSION-MACRO) (IGNORE)
       `(PASCHAL-HOLIDAY ,',OFFSET))
     (DEFPROP ,NAME ,PRETTY-NAME HOLIDAY-PRETTY-NAME)
     (SI:PUSH* ',NAME *HOLIDAY-LIST*)))
(DEFINE-PASCHAL-HOLIDAY MARDI-GRAS "Mardi Gras" -47.)
(DEFINE-PASCHAL-HOLIDAY EASTER "Easter Sunday" 0)
(DEFINE-DATE-EXPRESSION PASCHAL-HOLIDAY (OFFSET)
  (:TEST (EXPR DAY MONTH YEAR &AUX EDAY EMONTH EYEAR)
    (MULTIPLE-VALUE (EMONTH EDAY)
      (EASTER-INTERNAL YEAR))
    (MULTIPLE-VALUE (EDAY EMONTH EYEAR)
      (INCREMENT-DATE EDAY EMONTH YEAR (CADR EXPR)))
    (DATE-= EDAY EMONTH EYEAR DAY MONTH YEAR))
  (:SEARCH (EXPR DAY MONTH YEAR)
    (DO ((OFFSET (CADR EXPR))
	 (EDAY) (EMONTH)
	 (EYEAR YEAR (1+ YEAR)))
	(NIL)
      (MULTIPLE-VALUE (EMONTH EDAY)
	(EASTER-INTERNAL EYEAR))
      (MULTIPLE-VALUE (EDAY EMONTH EYEAR)
	(INCREMENT-DATE EDAY EMONTH EYEAR OFFSET))
      (OR (DATE-< EDAY EMONTH EYEAR DAY MONTH YEAR)
	  (RETURN (VALUES EDAY EMONTH EYEAR)))))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR)
    (DO ((OFFSET (CADR EXPR))
	 (EDAY) (EMONTH)
	 (EYEAR YEAR (1- YEAR)))
	(NIL)
      (MULTIPLE-VALUE (EMONTH EDAY)
	(EASTER-INTERNAL EYEAR))
      (MULTIPLE-VALUE (EDAY EMONTH EYEAR)
	(INCREMENT-DATE EDAY EMONTH EYEAR OFFSET))
      (AND (DATE-< EDAY EMONTH EYEAR DAY MONTH YEAR)
	   (RETURN (VALUES EDAY EMONTH EYEAR))))))
;;; Compute easter for the given year
(DEFUN EASTER-INTERNAL (YEAR &AUX G C X Z D E N)
  (DECLARE (VALUES MONTH DAY))
  (WHEN (< YEAR 1000.)				;Complete and utter braindamage
    (INCF YEAR 1900.))
  (SETQ G (1+ (\ YEAR 19))
	C (1+ (// YEAR 100))
	X (- (// (* C 3) 4) 12)
	Z (- (// (+ (* C 8) 5) 25) 5)
	D (- (// (* YEAR 5) 4) (+ X 10))
	E (MOD (- (+ (* G 11) 20 Z) X) 30))
  (AND (OR (AND (= E 25) (> G 11))
	   (= E 24))
       (SETQ E (1+ E)))
  (SETQ N (- 44 E))
  (AND (< N 21)
       (SETQ N (+ N 30)))
  (SETQ N (- (+ N 7) (\ (+ D N) 7)))
  (IF (> N 31)
      (VALUES 4 (- N 31))
      (VALUES 3 N)))


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Standard/Daylight Savings Time Switch "Holidays" --
;;;    Of course, these aren't real holidays but this is the only way to get them to appear
;;;    in the calendar windows without lots of unwanted, special case coding.
0(DEFMACRO DEFINE-DST-SWITCH-HOLIDAY (NAME PRETTY-NAME DST-P)
  `(LOCAL-DECLARE ((SYS:FUNCTION-PARENT ,NAME DEFINE-DST-DATE-EXPRESSION))
     (RECORD-SOURCE-FILE-NAME ',NAME 'DEFINE-DST-SWITCH-HOLIDAY)
     (DEFUN (:PROPERTY ,NAME DATE-EXPRESSION-MACRO) (IGNORE)
       `(DST-SWITCH-DAY ,',DST-P))
     (DEFPROP ,NAME ,PRETTY-NAME HOLIDAY-PRETTY-NAME)
     (CL:PUSHNEW ',NAME *HOLIDAY-LIST*)))

(DEFINE-DST-SWITCH-HOLIDAY SPRINGFORWARD-DAY "To Daylight Time" T)

(DEFINE-DST-SWITCH-HOLIDAY FALLBACK-DAY "To Standard Time" NIL)

1;;; Date expression for a day which switches from/to Daylight Savings Time.
0(DEFINE-DATE-EXPRESSION DST-SWITCH-DAY (DST-P)
  (:TEST (DATE-EXPR DAY MONTH YEAR)
   (LET ((DST-P (SECOND DATE-EXPR)))
     (MULTIPLE-VALUE-BIND (DST-SWITCHES NEW-DST-P)
	 (DST-SWITCH-ON-DAY-P DAY MONTH YEAR)
       (AND DST-SWITCHES (EQ DST-P NEW-DST-P)))))
  (:SEARCH (DATE-EXPR DAY MONTH YEAR)
   (LET ((DST-P (SECOND DATE-EXPR))
	 (IS-LEAP-YEAR (LEAP-YEAR-P (CANONICALIZE-YEAR YEAR 1900))))
     (DOTIMES (IGNORE (IF IS-LEAP-YEAR 366 365))
       (MULTIPLE-VALUE-BIND (DST-SWITCHES NEW-DST-P)
	   (DST-SWITCH-ON-DAY-P DAY MONTH YEAR)
	 (WHEN (AND DST-SWITCHES (EQ DST-P NEW-DST-P))
	   (RETURN (VALUES DAY MONTH YEAR))))
       (MULTIPLE-VALUE (DAY MONTH YEAR)
	 (INCREMENT-DATE DAY MONTH YEAR)))))
  (:REVERSE-SEARCH (DATE-EXPR DAY MONTH YEAR)
   (LET ((DST-P (SECOND DATE-EXPR))
	 (IS-LEAP-YEAR (LEAP-YEAR-P (CANONICALIZE-YEAR YEAR 1900))))
     (DOTIMES (IGNORE (IF IS-LEAP-YEAR 366 365))
       (MULTIPLE-VALUE-BIND (DST-SWITCHES NEW-DST-P)
	   (DST-SWITCH-ON-DAY-P DAY MONTH YEAR)
	 (WHEN (AND DST-SWITCHES (EQ DST-P NEW-DST-P))
	   (RETURN (VALUES DAY MONTH YEAR))))
       (MULTIPLE-VALUE (DAY MONTH YEAR)
	 (INCREMENT-DATE DAY MONTH YEAR -1))))))

1;;; Determines if a switch between Standard Time and Daylight Savings Time occurs on the
;;; given date and, if so, in which direction the switch takes place.
0(DEFUN DST-SWITCH-ON-DAY-P (DAY MONTH YEAR)
  (LET ((INITIAL-DST-P (DAYLIGHT-SAVINGS-TIME-P 0 DAY MONTH YEAR))
	(FINAL-DST-P (DAYLIGHT-SAVINGS-TIME-P 23 DAY MONTH YEAR)))
    (VALUES (NEQ INITIAL-DST-P FINAL-DST-P) FINAL-DST-P)))


(DEFUN (DATE DATE-EXPRESSION-MACRO) (EXPR)
  (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
      (TIME:PARSE (SECOND EXPR))
    `(DAY-OF-YEAR ,MONTH ,DAY ,YEAR)))

(DEFINE-DATE-EXPRESSION PLUS
  (:TEST (EXPR DAY MONTH YEAR)
   (PLUS-MINUS-DATE-EXPRESSION-INTERNAL EXPR DAY MONTH YEAR :TEST))
  (:SEARCH (EXPR DAY MONTH YEAR)
   (PLUS-MINUS-DATE-EXPRESSION-INTERNAL EXPR DAY MONTH YEAR :SEARCH))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR)
   (PLUS-MINUS-DATE-EXPRESSION-INTERNAL EXPR DAY MONTH YEAR :REVERSE-SEARCH)))

(DEFINE-DATE-EXPRESSION MINUS
  (:TEST (EXPR DAY MONTH YEAR)
   (PLUS-MINUS-DATE-EXPRESSION-INTERNAL EXPR DAY MONTH YEAR :TEST -1))
  (:SEARCH (EXPR DAY MONTH YEAR)
   (PLUS-MINUS-DATE-EXPRESSION-INTERNAL EXPR DAY MONTH YEAR :SEARCH -1))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR)
   (PLUS-MINUS-DATE-EXPRESSION-INTERNAL EXPR DAY MONTH YEAR :REVERSE-SEARCH -1)))

(DEFUN PLUS-MINUS-DATE-EXPRESSION-INTERNAL (EXPR-1 DAY MONTH YEAR OP &OPTIONAL (PROD 1))
  (DESTRUCTURING-BIND (IGNORE EXPR INTERVAL) EXPR-1
    (SETQ INTERVAL (COMPUTE-PLUS-MINUS-INTERVAL INTERVAL PROD))
    (SETQ EXPR (MACRO-EXPAND-DATE-EXPRESSION EXPR))
    (MULTIPLE-VALUE-BIND (OFFSET-DAY OFFSET-MONTH OFFSET-YEAR)
	(COMPUTE-PLUS-MINUS-OFFSET DAY MONTH YEAR (- INTERVAL))
      (MULTIPLE-VALUE (DAY MONTH YEAR)
	(DATE-EXPRESSION-INVOKE EXPR OP OFFSET-DAY OFFSET-MONTH OFFSET-YEAR)))
    (COMPUTE-PLUS-MINUS-OFFSET DAY MONTH YEAR INTERVAL)))

(DEFUN COMPUTE-PLUS-MINUS-INTERVAL (INTERVAL &OPTIONAL (PROD -1))
  (WHEN (STRINGP INTERVAL)
    (SETQ INTERVAL (// (OR (TIME:PARSE-INTERVAL-OR-NEVER INTERVAL) 0)
		       (* 60. 60. 24.))))
  (* INTERVAL PROD))

(DEFUN COMPUTE-PLUS-MINUS-OFFSET (DAY MONTH YEAR INTERVAL)
  (MULTIPLE-VALUE-BIND (NIL NIL NIL NEW-DAY NEW-MONTH NEW-YEAR)
      (TIME:DECODE-UNIVERSAL-TIME (+ (TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR)
				     (* INTERVAL 60. 60. 24.)))
    (VALUES NEW-DAY NEW-MONTH (+ NEW-YEAR 1900.))))

(DEFINE-DATE-EXPRESSION EVERY (INTERVAL FIRST-DATE-EXPR END-DATE-EXPR)
  (:TEST (EXPR DAY MONTH YEAR)
    (MULTIPLE-VALUE-BIND (NDAYS FIRST-DAY FIRST-MONTH FIRST-YEAR END-DAY END-MONTH END-YEAR)
	(EVERY-EXPRESSION-DECOMPOSE EXPR)
      (LOOP WITH TEST-DAY = FIRST-DAY
	    WITH TEST-MONTH = FIRST-MONTH
	    WITH TEST-YEAR = FIRST-YEAR
	    DO (COND ((DATE-= TEST-DAY TEST-MONTH TEST-YEAR DAY MONTH YEAR) (RETURN T))
		     ((DATE-> TEST-DAY TEST-MONTH TEST-YEAR DAY MONTH YEAR) (RETURN NIL))
		     (T (MULTIPLE-VALUE (TEST-DAY TEST-MONTH TEST-YEAR)
			  (INCREMENT-DATE TEST-DAY TEST-MONTH TEST-YEAR NDAYS))))
	    UNTIL (DATE-< END-DAY END-MONTH END-YEAR TEST-DAY TEST-MONTH TEST-YEAR))))
  (:SEARCH (EXPR DAY MONTH YEAR)
    (MULTIPLE-VALUE-BIND (NDAYS FIRST-DAY FIRST-MONTH FIRST-YEAR END-DAY END-MONTH END-YEAR)
	(EVERY-EXPRESSION-DECOMPOSE EXPR)
      (LOOP WITH TEST-DAY = FIRST-DAY
	    WITH TEST-MONTH = FIRST-MONTH
	    WITH TEST-YEAR = FIRST-YEAR
	    WHEN (DATE-< END-DAY END-MONTH END-YEAR TEST-DAY TEST-MONTH TEST-YEAR)
	      RETURN (VALUES DAY MONTH YEAR)	; no date in the interval occurs late enough
	    IF (DATE-< TEST-DAY TEST-MONTH TEST-YEAR DAY MONTH YEAR)
	      DO (MULTIPLE-VALUE (TEST-DAY TEST-MONTH TEST-YEAR)
		   (INCREMENT-DATE TEST-DAY TEST-MONTH TEST-YEAR NDAYS))
	    ELSE
	      RETURN (VALUES TEST-DAY TEST-MONTH TEST-YEAR))))
  (:REVERSE-SEARCH (EXPR DAY MONTH YEAR)
    (MULTIPLE-VALUE-BIND (NDAYS FIRST-DAY FIRST-MONTH FIRST-YEAR END-DAY END-MONTH END-YEAR)
	(EVERY-EXPRESSION-DECOMPOSE EXPR)
      (IF (DATE-< DAY MONTH YEAR FIRST-DAY FIRST-MONTH FIRST-YEAR)
	  (VALUES DAY MONTH YEAR)		; no date in the interval occurs early enough
	(LOOP WITH TEST-DAY = FIRST-DAY
	      WITH TEST-MONTH = FIRST-MONTH
	      WITH TEST-YEAR = FIRST-YEAR
	      IF (OR (DATE-> TEST-DAY TEST-MONTH TEST-YEAR DAY MONTH YEAR)
		     (DATE-< END-DAY END-MONTH END-YEAR TEST-DAY TEST-MONTH TEST-YEAR))
		RETURN (INCREMENT-DATE TEST-DAY TEST-MONTH TEST-YEAR (- NDAYS))
	      ELSE
		DO (MULTIPLE-VALUE (TEST-DAY TEST-MONTH TEST-YEAR)
		     (INCREMENT-DATE TEST-DAY TEST-MONTH TEST-YEAR NDAYS)))))))

(DEFUN EVERY-EXPRESSION-DECOMPOSE (EXPR)
  (DECLARE (VALUES NDAYS FIRST-DAY FIRST-MONTH FIRST-YEAR END-DAY END-MONTH END-YEAR))
  (DESTRUCTURING-BIND (IGNORE INTERVAL FIRST-DATE END-DATE) EXPR
    (LET ((NDAYS (COMPUTE-PLUS-MINUS-INTERVAL INTERVAL 1))
	  (FIRST-DATE (MACRO-EXPAND-DATE-EXPRESSION FIRST-DATE))
	  (END-DATE (WHEN END-DATE (MACRO-EXPAND-DATE-EXPRESSION END-DATE))))
      (MULTIPLE-VALUE-BIND (FIRST-DAY FIRST-MONTH FIRST-YEAR)
	  (DATE-EXPRESSION-INVOKE FIRST-DATE :SEARCH 1 1 1901.)
	(MULTIPLE-VALUE-BIND (END-DAY END-MONTH END-YEAR)
	    (IF END-DATE
		(DATE-EXPRESSION-INVOKE END-DATE :REVERSE-SEARCH 1 1 2001.)
	      (VALUES 1 1 2001.))
	  (VALUES NDAYS
		  FIRST-DAY FIRST-MONTH
			    (IF (< FIRST-YEAR 1000.) (+ FIRST-YEAR 1900.) FIRST-YEAR)
		  END-DAY END-MONTH (IF (< END-YEAR 1000.) (+ END-YEAR 1900.) END-YEAR)))))))

(DEFUN CANONICALIZE-DATE-EXPRESSION (EXPR PATTERN)
  (CONS (CAR EXPR)
	(LOOP FOR X IN (CDR EXPR)
	      FOR PAT IN PATTERN
	      COLLECT (FUNCALL
			(SELECTQ PAT
			  (YEAR #'CANONICALIZE-DATE-EXPRESSION-YEAR)
			  (MONTH #'CANONICALIZE-DATE-EXPRESSION-MONTH)
			  (DAY-OF-THE-WEEK #'CANONICALIZE-DATE-EXPRESSION-DAY-OF-THE-WEEK)
			  ((DAY OFFSET) #'CANONICALIZE-DATE-EXPRESSION-NUMBER)
			  (OTHERWISE #'(LAMBDA (X) X)))
			X))))

(DEFUN CANONICALIZE-DATE-EXPRESSION-YEAR (YEAR)
  (IF (< YEAR 1000) (+ YEAR 1900) YEAR))

(DEFUN CANONICALIZE-DATE-EXPRESSION-MONTH (MONTH)
  (AND (SYMBOLP MONTH)
       (GET MONTH 'MONTH)
       (SETQ MONTH (GET MONTH 'VALUE)))
  MONTH)

(DEFUN CANONICALIZE-DATE-EXPRESSION-DAY-OF-THE-WEEK (DAY-OF-THE-WEEK)
  (AND (SYMBOLP DAY-OF-THE-WEEK)
       (GET DAY-OF-THE-WEEK 'DAY-OF-THE-WEEK)
       (SETQ DAY-OF-THE-WEEK (GET DAY-OF-THE-WEEK 'VALUE)))
  DAY-OF-THE-WEEK)

(DEFUN CANONICALIZE-DATE-EXPRESSION-NUMBER (NUMBER)
  (COND ((NOT (SYMBOLP NUMBER)))
	((EQ NUMBER 'LAST) (SETQ NUMBER -1))
	((GET NUMBER 'FIXNUM-STRING) (SETQ NUMBER (GET NUMBER 'VALUE))))
  NUMBER)



(DEFUN EXPAND-DATE-EXPRESSION-IF-VALID (DATE-EXPRESSION)
  (DECLARE (VALUES . (EXPANDED-DATE-EXPRESSION)))
  (AND (LISTP DATE-EXPRESSION)
       (SETQ DATE-EXPRESSION (MACRO-EXPAND-DATE-EXPRESSION DATE-EXPRESSION))
       (GET (CAR DATE-EXPRESSION) 'DATE-EXPRESSION-FUNCTION)
       DATE-EXPRESSION))
(DEFUN CONFIRM-DATE-EXPRESSION (EXPR)
  (LET ((EXPANDED-EXPR (MACRO-EXPAND-DATE-EXPRESSION EXPR)))
    (IF (GET (CAR EXPANDED-EXPR) 'DATE-EXPRESSION-FUNCTION)
	(MULTIPLE-VALUE-BIND (NIL NIL NIL TODAY THIS-MONTH THIS-YEAR)
	    (GET-TIME)
	  (SETQ THIS-YEAR (+ THIS-YEAR 1900))
	  (MULTIPLE-VALUE-BIND (NEXT-DAY NEXT-MONTH NEXT-YEAR)
	      (DATE-EXPRESSION-INVOKE EXPANDED-EXPR :SEARCH TODAY THIS-MONTH THIS-YEAR)
	    (FQUERY NIL "Next occurrence is ~A, ~D ~A ~D, ok? "
		    (DAY-OF-THE-WEEK-STRING (DATE-DAY-OF-THE-WEEK NEXT-DAY NEXT-MONTH
								  NEXT-YEAR))
		    NEXT-DAY (MONTH-STRING NEXT-MONTH) NEXT-YEAR)))
      (FORMAT T "Invalid date expression: ~S" EXPR)
      NIL)))

;;; Test function
(COMMENT

(DEFUN CTEST ()
  (DO ((EXPR)
       (TODAY) (THIS-MONTH) (THIS-YEAR)
       (DAY) (MONTH) (YEAR)
       (DOW))
      (NIL)
    (TERPRI)
    (SETQ EXPR (READ))
    (AND (SYMBOLP EXPR) (RETURN NIL))
    (SETQ EXPR (MACRO-EXPAND-DATE-EXPRESSION EXPR))
    (MULTIPLE-VALUE (NIL NIL NIL TODAY THIS-MONTH THIS-YEAR)
      (GET-TIME))
    (SETQ THIS-YEAR (+ THIS-YEAR 1900))
    (MULTIPLE-VALUE (DAY MONTH YEAR)
      (DATE-EXPRESSION-INVOKE EXPR ':SEARCH TODAY THIS-MONTH THIS-YEAR))
    (SETQ DOW (DATE-DAY-OF-THE-WEEK DAY MONTH YEAR))
    (FORMAT T "~&~A, ~D ~A ~D~%"
	    (DAY-OF-THE-WEEK-STRING DOW) DAY (MONTH-STRING MONTH) YEAR)))

;;; So I can trace...
(DEFUN TEST-DATE-EXPRESSION-INVOKE (EXPR MESSAGE &REST ARGS)
  (LEXPR-FUNCALL (GET (CAR EXPR) 'DATE-EXPRESSION-FUNCTION) MESSAGE EXPR ARGS))

;;; Test :SEARCH.

(DEFUN CSTEST (&OPTIONAL (START "now") END)
  (LOOP WITH START-TIME = (PARSE-UNIVERSAL-TIME START)
	WITH END-TIME = (IF END
			    (PARSE-UNIVERSAL-TIME END)
			  (+ START-TIME #.(PARSE-INTERVAL-OR-NEVER "1 year")))
	FOR EXPR = (PROMPT-AND-READ :EXPRESSION "Expression: ")
	UNTIL (NULL EXPR)
	FOR MEXPR = (MACRO-EXPAND-DATE-EXPRESSION EXPR)
	DO (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
	       (DECODE-UNIVERSAL-TIME START-TIME)
	     (WHEN (< YEAR 1000.)
	       (INCF YEAR 1900.))
	     (LOOP WITH (DOW TIME)
		   WITH ONE-DAY = #.(PARSE-INTERVAL-OR-NEVER "1 day")
		   DO (MULTIPLE-VALUE (DAY MONTH YEAR)
			(TEST-DATE-EXPRESSION-INVOKE MEXPR :SEARCH DAY MONTH YEAR))
		   UNTIL (SEND STANDARD-INPUT :TYI-NO-HANG)
		   DO (SETQ DOW (DATE-DAY-OF-THE-WEEK DAY MONTH YEAR))
		      (FORMAT T "~&~A, ~D ~A ~D~%"
			      (DAY-OF-THE-WEEK-STRING DOW)
			      DAY (MONTH-STRING MONTH) YEAR)
		      (SETQ TIME (+ ONE-DAY (ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR)))
		      (MULTIPLE-VALUE (NIL NIL NIL DAY MONTH YEAR)
			(DECODE-UNIVERSAL-TIME TIME))
		      (WHEN (< YEAR 1000.)
			(INCF YEAR 1900.))
		   UNTIL ( TIME END-TIME)))))
	
)
