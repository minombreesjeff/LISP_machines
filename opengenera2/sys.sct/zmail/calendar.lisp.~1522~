;;; -*- Mode: LISP; Base: 8;  Package: ZWEI -*-
;;; Calendar / Reminder subsystem
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;; Commands

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-SET-EXPIRATION-DATE
				"Set the expiration date on this message."
				()
  (LET ((DATE (PROMPT-FOR-EXPIRATION-DATE (MSG-STATUS *MSG*))))
    (ADD-HEADER-TO-MSG *MSG* :EXPIRATION-DATE DATE
			     :DELETE-IF-EMPTY T
			     :UNDO-SAVE "Set Expiration date"))
  DIS-TEXT)

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-SET-START-DATE
				"Set the start date on this message."
				()
  (LET ((DATE (PROMPT-FOR-REMINDER-DATE-TIME)))
    (ADD-HEADER-TO-MSG *MSG* :START-DATE DATE 
			     :DELETE-IF-EMPTY T
			     :UNDO-SAVE "Set Start date"))
  DIS-TEXT)

(DEFINE-COMMAND-WHO-LINE-DOCUMENTATION-UPDATER COM-COMPOSE-REMINDER (STRING)
  (AND (FIND-TEMPLATE 'LEFT-REMINDER-TEMPLATE T)	;While loading
       (FORMAT STRING "Compose a new reminder: L: ~A; M: ~A; R: menu."
	       (SEND (FIND-TEMPLATE 'LEFT-REMINDER-TEMPLATE) ':MENU-NAME)
	       (SEND (FIND-TEMPLATE 'MIDDLE-REMINDER-TEMPLATE) ':MENU-NAME))))

(ASSOCIATE-TEMPLATE-WITH-COMMAND-DOCUMENTATION LEFT-REMINDER-TEMPLATE COM-COMPOSE-REMINDER)
(ASSOCIATE-TEMPLATE-WITH-COMMAND-DOCUMENTATION MIDDLE-REMINDER-TEMPLATE COM-COMPOSE-REMINDER)

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-COMPOSE-REMINDER "Compose a new reminder.
Click left composes a once only reminder.  You will be prompted for a start date
and an end date.
Click middle composes a periodic reminder.  You will be prompted for an expression for
the period.  Currently, this is a list.  Examples of simple valid period expressions:
/(DAY-OF-THE-WEEK FRIDAY)
/(DAY-OF-MONTH FIRST)
/(MONTH MARCH)
/(DAY-AND-MONTH APRIL 2)
/(DAY-OF-WEEK-IN-MONTH NOVEMBER MONDAY SECOND)
/(BASTILLE-DAY)
/(MARDI-GRAS)
/(AND (DAY-OF-THE-WEEK FRIDAY) (DAY-OF-MONTH 13.))
You will be asked to confirm the next occurrence of your period expression.
You are also prompted for an expiration date." (NO-MSG-OK)
  (LET ((TEMPLATE (SELECTQ *ZMAIL-COMMAND-BUTTON*
		    (:KBD 'KBD-REMINDER-TEMPLATE)
		    (:LEFT 'LEFT-REMINDER-TEMPLATE)
		    (:MIDDLE 'MIDDLE-REMINDER-TEMPLATE)
		    (OTHERWISE (CHOOSE-TEMPLATE-FOR-COMMAND ':REMINDER)))))
    (COMPOSE-FROM-TEMPLATE TEMPLATE)))

;;; Interface from clicking on a day
(DEFUN ADD-REMINDER-ON-DAY (DATE)
  (COMPOSE-FROM-TEMPLATE 'REMINDER-ON-DAY-TEMPLATE ':DATE DATE))

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-SURVEY-REMINDERS "Survey reminders for day." ()
  (LET ((DATE (PROMPT-FOR-REMINDER-DAY)))
    (SURVEY-REMINDERS-FOR-DAY DATE))
  DIS-NONE)

;;;; Template functions
(DEFINE-TEMPLATE-TYPE REMINDER-TEMPLATE :REMINDER () (COMPOSITION-TEMPLATE))

(DEFMETHOD (:EXPANSION-KEYWORD REMINDER-TEMPLATE :START-DATE-FROM-COMMAND)
	   (PLIST &OPTIONAL START-TIME)
  (SETQ START-TIME (EVAL START-TIME))
  (LET (SECS MINS HOURS DAY MONTH YEAR)
    (SETF (LIST DAY MONTH YEAR) (GET PLIST ':DATE))
    (SETQ SECS (OR START-TIME 0)
	  MINS (// SECS 60.)
	  SECS (\ SECS 60.)
	  HOURS (// MINS 60.)
	  MINS (\ MINS 60.))
    (SEND SELF ':ADD-HEADER PLIST ':START-DATE
	  (LIST (LIST (TIME:ENCODE-UNIVERSAL-TIME SECS MINS HOURS DAY MONTH YEAR)
		      (NOT (NULL START-TIME)))))))

(DEFINE-TEMPLATE-TYPE LOCAL-REMINDER-TEMPLATE :LOCAL-REMINDER ()
		      (REMINDER-TEMPLATE LOCAL-MAIL-TEMPLATE))

;;;; Filter interface

(DEFUN MAKE-COLLECTION-OF-REMINDERS-FOR-DAY (UNIVERSAL-TIME)
  (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
      (TIME:DECODE-UNIVERSAL-TIME UNIVERSAL-TIME)
    (MAKE-COLLECTION-FROM-FILTER *SEQUENCE* #'REMINDER-MSG-VALID-ON-DAY-P
				 (LIST UNIVERSAL-TIME DAY MONTH YEAR))))

(DEFINE-MSG-PREDICATE-AND-OPPOSITE REMINDER-MSG-VALID-ON-DAY-P
				   REMINDER-MSG-NOT-VALID-ON-DAY-P
				   (MSG DATE-DAY-MONTH-YEAR)
  (LET ((STATUS (ASSURE-MSG-PARSED MSG)))
    ;; All properties that are present must be matched.
    ;; And there must been at least one of :REMINDER-PERIOD or :START-DATE.
    (LOOP WITH MATCHED-P = NIL
	  FOR INDICATOR IN '(:EXPIRATION-DATE :REMINDER-PERIOD :START-DATE)
	  AS PROP = (GET STATUS INDICATOR)
	  WHEN PROP
	    DO (IF (SELECTQ INDICATOR
		     (:START-DATE
		      (< (FIRST (FIRST (LAST PROP)))
			 (+ (FIRST DATE-DAY-MONTH-YEAR) (* 24. 60. 60.))))
		     (:REMINDER-PERIOD
		      (LET ((EXPR (GET STATUS 'EXPANDED-REMINDER-PERIOD)))
			(WHEN (NULL EXPR)
			  (SETQ EXPR (TIME:EXPAND-DATE-EXPRESSION-IF-VALID PROP))
			  (PUTPROP STATUS EXPR 'EXPANDED-REMINDER-PERIOD))
			(AND EXPR
			     (TIME:DATE-EXPRESSION-INVOKE EXPR
							  :TEST (SECOND DATE-DAY-MONTH-YEAR)
								(THIRD DATE-DAY-MONTH-YEAR)
								(FOURTH DATE-DAY-MONTH-YEAR)))
			))
		     (:EXPIRATION-DATE
		      (< (FIRST DATE-DAY-MONTH-YEAR)
			 (IF (LISTP PROP) (FIRST (LAST PROP)) PROP))))
		   (WHEN (MEMQ INDICATOR '(:REMINDER-PERIOD :START-DATE))
		     (SETQ MATCHED-P T))
		 (RETURN NIL))
	  FINALLY (RETURN MATCHED-P))))

(DEFINE-MSG-PREDICATE-COLLECTION-NAME REMINDER-MSG-VALID-ON-DAY-P (DATE)
  (FORMAT NIL "<Reminders: ~D ~A ~D>"
	  (SECOND DATE) (TIME:MONTH-STRING (THIRD DATE) ':SHORT) (FOURTH DATE)))

;;;; Some prompting functions

(DEFVAR *CHOOSE-REMINDER-TYPE-OPTIONS*
  '(:CHOICES (((T "Periodic.") #/P)
	      ((NIL "Once only.") #/O))))

(DEFVAR *PERIOD-EXPRESSION-EXAMPLES*
  'TIME:(((DAY-OF-THE-WEEK FRIDAY) . "[Any Friday]")
	 ((DAY-OF-MONTH FIRST) . "[The 1st of every month]")
	 ((MONTH MARCH) . "[Any day in March]")
	 ((DAY-AND-MONTH APRIL 2) . "[April 2nd in any year]")
	 ((DAY-OF-YEAR NOV 6 1953.) . "[An specific date]")
	 ((DAY-OF-WEEK-IN-MONTH NOVEMBER MONDAY SECOND) . "[The 2nd Monday in November]")))

(DEFUN REMINDER-PERIOD-SPECIFICATION-HELP (STREAM IGNORE)
  (FORMAT STREAM "~2&A reminder period specification is a Lisp expression.")
  (SCL:INDENTING-OUTPUT (STREAM 2)
    (FORMAT STREAM "~2&Examples of simple period specifications include:~%  ")
    (SCL:FORMATTING-TABLE (STREAM :INTER-COLUMN-SPACING 40.)
      (DOLIST (EXAMPLE *PERIOD-EXPRESSION-EXAMPLES*)
	(SCL:FORMATTING-ROW (STREAM)
	  (SCL:FORMATTING-CELL (STREAM)
	    (SCL:PRESENT (CAR EXAMPLE) 'SYS:EXPRESSION :STREAM STREAM))
	  (SCL:FORMATTING-CELL (STREAM)
	    (FORMAT STREAM "~A" (CDR EXAMPLE)))))))
  (FORMAT STREAM "~2&More complex expressions may be created by combining simple expressions~@
		  using the logical operators AND, OR, and NOT.~@
		  ~2&For example, ~@\PRESENTATION\ is any February 9th~@
		  that does not fall on a Monday."
	  'TIME:(AND (DAY-AND-MONTH FEB 9.) (NOT (DAY-OF-THE-WEEK MONDAY)))
	  'SYS:EXPRESSION)
  (FORMAT STREAM "~2&You will be asked to confirm the next occurrence of your specification.")
  )

(DEFUN PROMPT-FOR-REMINDER-PERIOD ()
  (LOOP AS FORM
	   = (PKG-BIND "TIME"
	       (DW:WITH-ACCEPT-HELP ((:SUBHELP #'REMINDER-PERIOD-SPECIFICATION-HELP))
		 (TYPEIN-LINE-ACCEPT
		   '((AND SYS:EXPRESSION
			  ((CL:SATISFIES TIME:EXPAND-DATE-EXPRESSION-IF-VALID)))
		     :DESCRIPTION "a reminder period specification")
		   :PROMPT (FORMAT NIL "Reminder period specification [terminate with ~:C]"
				 #\End))))
	WHEN (TIME:CONFIRM-DATE-EXPRESSION FORM)
	  RETURN FORM))

(DEFUN PROMPT-FOR-REMINDER-TIME ()
  (LET ((UNIVERSAL-TIME (TYPEIN-LINE-ACCEPT
			  `((OR TIME:UNIVERSAL-TIME NULL)
			    :DESCRIPTION ,(FORMAT NIL "a time of day or type ~:C for none"
						  #\Return))
			  :PROMPT "Time of day [default None]"
			  :DEFAULT NIL)))
    (WHEN (NUMBERP UNIVERSAL-TIME)
      (MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS)
	  (TIME:DECODE-UNIVERSAL-TIME UNIVERSAL-TIME)
	(+ SECONDS (* (+ MINUTES (* HOURS 60.)) 60.))))))

(SCL:DEFINE-PRESENTATION-TYPE REMINDER-DATE-TIME ()
   :PARSER ((STREAM)
	    (VALUES
	      (SI:WITH-PARSE-FERROR (TIME:PARSE-ERROR)
		  (LET ((TOKEN (DW:READ-STANDARD-TOKEN STREAM)))
		    (MULTIPLE-VALUE-BIND (TIME IGNORE TIME-SPECIFIED)
			(TIME:PARSE-UNIVERSAL-TIME TOKEN 0 NIL T NIL T)
		      `((,TIME ,TIME-SPECIFIED)))))
	      'REMINDER-DATE-TIME))
   :PRINTER ((TIME STREAM)
	     (WHEN (ATOM TIME)
	       (SETQ TIME `((,TIME NIL))))
	     (DESTRUCTURING-BIND ((TIME TIME-SPECIFIED)) TIME
	       (COND ((NULL TIME)
		      (CL:WRITE-STRING "never" STREAM))
		     (TIME-SPECIFIED
		      (MULTIPLE-VALUE-BIND (IGNORE MINUTE HOUR DAY MONTH YEAR)
			  (TIME:DECODE-UNIVERSAL-TIME TIME)
			(FORMAT STREAM "~D ~A ~D ~2,'0D:~2,'0D" DAY
								(TIME:MONTH-STRING MONTH)
								(TIME:CANONICALIZE-YEAR YEAR)
								HOUR
								MINUTE)))
		     (T
		      (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE DAY MONTH YEAR)
			  (TIME:DECODE-UNIVERSAL-TIME TIME)
			(FORMAT STREAM "~D ~A ~D" DAY
						  (TIME:MONTH-STRING MONTH)
						  (TIME:CANONICALIZE-YEAR YEAR)))))))
   :DESCRIPTION "a date or date and time for the reminder")

(DEFUN PROMPT-FOR-REMINDER-DATE-TIME ()
  (TYPEIN-LINE-ACCEPT 'REMINDER-DATE-TIME
		      :PROMPT "Date or date and time for reminder"))

(DEFUN PROMPT-FOR-EXPIRATION-DATE (&OPTIONAL HEADERS)
  (LET* ((DEFAULT-DATE
	  (WHEN HEADERS
	    (LET ((START-DATE (GET (LOCF HEADERS) :START-DATE)))
	      (WHEN START-DATE
		(MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
		    (TIME:DECODE-UNIVERSAL-TIME (FIRST (FIRST (LAST START-DATE))))
		  (TIME:ENCODE-UNIVERSAL-TIME 0 0 0 (1+ DAY) MONTH YEAR))))))
	 (DEFAULT-STRING
	   (IF (NULL DEFAULT-DATE)
	       "none"
	       (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR)
		   (TIME:DECODE-UNIVERSAL-TIME DEFAULT-DATE)
		 (FORMAT NIL "~D ~A ~D" DAY (TIME:MONTH-STRING MONTH) YEAR))))
	 (EXPIRATION-DATE
	   (TYPEIN-LINE-ACCEPT `((SCL:TOKEN-OR-TYPE (:NONE)
						    ((TIME:UNIVERSAL-TIME)
						     ,@(WHEN DEFAULT-DATE
							 `(:BASE-TIME ,DEFAULT-DATE))))
				 :DESCRIPTION "an expiration date or none")
			       :PROMPT (FORMAT NIL "Expiration date [default ~A]"
					       DEFAULT-STRING)
			       :DEFAULT (IF (NULL DEFAULT-DATE) :NONE DEFAULT-DATE)
			       :DISPLAY-DEFAULT NIL)))
    (IF (EQ EXPIRATION-DATE :NONE)
	NIL
	EXPIRATION-DATE)))

(DEFUN PROMPT-FOR-REMINDER-DAY ()
  (TYPEIN-LINE-ACCEPT `((TIME:UNIVERSAL-TIME) :DESCRIPTION "a date")
		      :PROMPT "Reminders for day [default today]"
		      :DEFAULT  (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE DAY MONTH YEAR)
				    (TIME:GET-TIME)
				  (TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR))
		      :DISPLAY-DEFAULT NIL))	;We display a more meaningful default.

;;;; Display functions

(DEFUN SURVEY-REMINDERS-FOR-DAY (DATE &OPTIONAL DAY MONTH YEAR DAY-OF-THE-WEEK)
  (UNLESS MONTH
    (MULTIPLE-VALUE (NIL NIL NIL DAY MONTH YEAR DAY-OF-THE-WEEK)
      (TIME:DECODE-UNIVERSAL-TIME DATE)))
  (SETQ YEAR (TIME:CANONICALIZE-YEAR YEAR))
  (FORMAT T "~&Reminders for ~A, ~D ~A ~D~%"
	  (TIME:DAY-OF-THE-WEEK-STRING DAY-OF-THE-WEEK) DAY (TIME:MONTH-STRING MONTH) YEAR)
  (DOLIST (HOL (TIME:HOLIDAYS-FOR-DAY DAY MONTH YEAR))
    (FORMAT T "~&~2@T~A~%" (GET HOL 'TIME:HOLIDAY-PRETTY-NAME)))
  (AND *SEQUENCE*
       (SURVEY-FROM-FILTER-1 *SEQUENCE* #'REMINDER-MSG-VALID-ON-DAY-P
			     (LIST DATE DAY MONTH YEAR))))

(DEFUN (:REMINDER-DATE-AND-TIME SUMMARY-PRINTER) (LINE IGNORE IGNORE STATUS)
  (IF (NULL STATUS)
      (APPEND-TO-ARRAY LINE " Date Time  ")
    (LET* ((PROP (GETL STATUS '(:REMINDER-TIME :START-DATE)))
	   SECS MINS HOURS DAY MONTH)
      (SELECTQ (FIRST PROP)
	(:REMINDER-TIME
	 (LET ((PROP (SECOND PROP)))
	   (UNLESS (NULL PROP)
	     (SETQ SECS (IF (LISTP PROP) (FIRST (LAST PROP)) PROP)
		   MINS (// SECS 60.)
		   SECS (\ SECS 60.)
		   HOURS (// MINS 60.)
		   MINS (\ MINS 60.)))))
	(:START-DATE
	 (LET ((ELEM (FIRST (LAST (SECOND PROP)))) S M H)
	   (MULTIPLE-VALUE (S M H DAY MONTH)
	     (TIME:DECODE-UNIVERSAL-TIME (FIRST ELEM)))
	   (WHEN (SECOND ELEM) (SETQ SECS S MINS M HOURS H)))))
      (COND ((NOT (NULL DAY))
	     (FORMAT LINE "~2D-~A" DAY (TIME:MONTH-STRING MONTH :SHORT)))
	    ((GET STATUS ':REMINDER-PERIOD)
	     (APPEND-TO-ARRAY LINE " (...)"))
	    (T
	     (APPEND-TO-ARRAY LINE *SPACES* 0 6)))
      (IF HOURS (FORMAT LINE " ~2,'0D:~2,'0D " HOURS MINS)
	(APPEND-TO-ARRAY LINE *SPACES* 0 7)))))

;;; Reminder specific headers

(DEFINE-HEADER-TYPE-TYPE :DATE-EXPRESSION (:HEADER)
  (:PARSE-FUNCTION PARSE-DATE-EXPRESSION-HEADER)
  (:PRINT-FUNCTION PRINT-DATE-EXPRESSION-HEADER))

(DEFINE-HEADER-TYPE :REMINDER-PERIOD "Reminder-period" :DATE-EXPRESSION)

(DEFUN PARSE-DATE-EXPRESSION-HEADER (TYPE START-LINE START-INDEX END-LINE)
  (MULTIPLE-VALUE (START-LINE START-INDEX)
    (PARSE-ONE-HEADER-INTERNAL START-LINE START-INDEX END-LINE))
  (PARSING-HEADERS (SYS:READ-ERROR TIME:PARSE-ERROR)
    (LIST TYPE
	  (LET ((DATE-EXPR (SCL:WITH-STANDARD-IO-ENVIRONMENT
			     (PKG-BIND "TIME"
			       (READ-FROM-STRING START-LINE 'SI:NO-EOF-OPTION START-INDEX)))))
	    (IF (TIME:EXPAND-DATE-EXPRESSION-IF-VALID DATE-EXPR)
		DATE-EXPR
	      (SIGNAL 'TIME:PARSE-ERROR :FORMAT-STRING "Invalid date expression: ~S"
					:FORMAT-ARGS `(,DATE-EXPR)))))))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Only standard header field printer which doesn't use (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")printing-headers1 macro --
;;;    The value of the date expression header should always be a list of expressions even
;;;    if there's only one expression.  However, I don't want to make such an incompatible
;;;    change at this time so I'm leaving this function alone...
0(DEFUN PRINT-DATE-EXPRESSION-HEADER (STREAM EXP NAME IGNORE IGNORE)
  (SCL:WITH-STANDARD-IO-ENVIRONMENT
    (PKG-BIND "TIME"
      (FORMAT STREAM "~A: ~S~%" NAME EXP))))

(DEFINE-HEADER-TYPE-TYPE :TIME-ONLY (:HEADER)
  (:PARSE-FUNCTION PARSE-TIME-ONLY-HEADER)
  (:PRINT-FUNCTION PRINT-TIME-ONLY-HEADER))

(DEFINE-HEADER-TYPE :REMINDER-TIME "Reminder-time" :TIME-ONLY)

(DEFUN PARSE-TIME-ONLY-HEADER (TYPE START-LINE START-INDEX END-LINE)
  (MULTIPLE-VALUE (START-LINE START-INDEX)
    (PARSE-ONE-HEADER-INTERNAL START-LINE START-INDEX END-LINE))
  (PARSING-HEADERS (TIME:PARSE-ERROR)
    (MULTIPLE-VALUE-BIND (SECS MINS HOURS)
	(TIME:PARSE START-LINE START-INDEX NIL T NIL T)
      (LIST TYPE (+ SECS (* (+ MINS (* HOURS 60.)) 60.))))))

(DEFUN PRINT-TIME-ONLY-HEADER (STREAM SECONDS NAME IGNORE IGNORE)
  (PRINTING-HEADERS (STREAM NAME SECONDS :MULTIPLE-VALUES :SEPARATE-FIELDS)
    (LET* ((MINUTES (// SECONDS 60.))
	   (HOURS (// MINUTES 60.))
	   (MINUTES (\ MINUTES 60.)))
      (FORMAT STREAM "~2,'0D:~2,'0D" HOURS MINUTES))))

(DEFINE-HEADER-TYPE-TYPE :DATE-AND-OPTIONAL-TIME (:HEADER)
  (:PARSE-FUNCTION PARSE-DATE-AND-OPTIONAL-TIME-HEADER)
  (:PRINT-FUNCTION PRINT-DATE-AND-OPTIONAL-TIME-HEADER))

(DEFINE-HEADER-TYPE :START-DATE "Start-date" :DATE-AND-OPTIONAL-TIME)

(DEFUN PARSE-DATE-AND-OPTIONAL-TIME-HEADER (TYPE START-LINE START-INDEX END-LINE)
  (MULTIPLE-VALUE (START-LINE START-INDEX)
    (PARSE-ONE-HEADER-INTERNAL START-LINE START-INDEX END-LINE))
  (PARSING-HEADERS (TIME:PARSE-ERROR)
    (MULTIPLE-VALUE-BIND (TIME NIL TIME-P)
	(TIME:PARSE-UNIVERSAL-TIME START-LINE START-INDEX)
      `(,TYPE ((,TIME ,TIME-P))))))

(DEFUN PRINT-DATE-AND-OPTIONAL-TIME-HEADER (STREAM DATE NAME EXPANSION IGNORE)
  (LET* ((PLIST (LOCF EXPANSION))
	 (DATE-FORMAT (GET PLIST :DATE-FORMAT))
	 (FORCE-NUMERIC-TIMEZONE (GET PLIST :FORCE-NUMERIC-TIMEZONE)))
    (PRINTING-HEADERS (STREAM NAME DATE :MULTIPLE-VALUES :SEPARATE-FIELDS)
      (IF (NUMBERP DATE)
	  (PRINT-DATE DATE STREAM DATE-FORMAT T T FORCE-NUMERIC-TIMEZONE)
	  (SCL:DESTRUCTURING-BIND (DATE &OPTIONAL INCLUDES-TIME &REST IGNORE) DATE
	    (PRINT-DATE DATE STREAM DATE-FORMAT INCLUDES-TIME T FORCE-NUMERIC-TIMEZONE))))))

;;; There are two "flavors" of day arrays used in Zmail.
;;;
;;;    DAYS-ARRAY-WITH-PANES is used by those modes (month, 4 weeks, week) which display
;;;       days of the week with sufficient room to include the reminders in the display.
;;;       These modes actually have a separate window pane for each day whose contents is
;;;       updated as needed.
;;;
;;;    DAYS-WITH-HIGHLIGHTING is used by year mode which displays all 12 months in a year
;;;       and, therefore, only has enough room to show the actual date for each day.  For
;;;       this mode, Zmail can only highlight (by XOR) a given date if it has any reminders.

(DEFMACRO DAYS-ARRAY-END-DAY (ARRAY)
  `(ARRAY-LEADER ,ARRAY 0))

(DEFMACRO DAYS-ARRAY-START-DAY (ARRAY)
  `(ARRAY-LEADER ,ARRAY 1))

(DEFMACRO DAYS-ARRAY-PANE-NAME (ARRAY INDEX)
  `(AREF ,ARRAY ,INDEX 0))

(DEFMACRO DAYS-ARRAY-HIGHLIGHTED-P (ARRAY INDEX)
  `(AREF ,ARRAY ,INDEX 0))

(DEFMACRO DAYS-ARRAY-DATE (ARRAY INDEX)
  `(AREF ,ARRAY ,INDEX 1))

(DEFMACRO DAYS-ARRAY-MSGS (ARRAY INDEX)
  `(AREF ,ARRAY ,INDEX 2))

(DEFUN MAKE-DAYS-ARRAY-WITH-PANES (NDAYS)
  (DECLARE (VALUES ARRAY PANES-NAMES))
  (LET ((ARRAY (MAKE-ARRAY `(,NDAYS 3) :LEADER-LENGTH 2)))
    (SETF (DAYS-ARRAY-START-DAY ARRAY) 0)
    (SETF (DAYS-ARRAY-END-DAY ARRAY) NDAYS)
    (LOOP FOR I FROM 0 BELOW NDAYS
	  AS PANE-NAME = (INTERN (FORMAT NIL "DAY-~D" I))
	  COLLECT PANE-NAME INTO PANES-NAMES
	  DO (SETF (DAYS-ARRAY-PANE-NAME ARRAY I) PANE-NAME)
	  FINALLY (RETURN (VALUES ARRAY PANES-NAMES)))))

(DEFUN MAKE-DAYS-ARRAY-WITH-HIGHLIGHTING (NDAYS)
  (LET ((ARRAY (MAKE-ARRAY `(,NDAYS 3) :LEADER-LENGTH 2)))
    (SETF (DAYS-ARRAY-START-DAY ARRAY) 0)
    (SETF (DAYS-ARRAY-END-DAY ARRAY) NDAYS)
    ARRAY))

;;;; Windows

(DEFFLAVOR YEAR-FRAME
	((YEAR NIL) ITEM-BLINKER)
	(TV:BORDERED-CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER)
  (:DEFAULT-INIT-PLIST :SAVE-BITS ':DELAYED)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:INIT YEAR-FRAME :BEFORE) (IGNORE)
  (SETQ TV:PANES (LOOP FOR MONTH IN '(MONTH-1 MONTH-2 MONTH-3 MONTH-4 MONTH-5 MONTH-6
				      MONTH-7 MONTH-8 MONTH-9 MONTH-10 MONTH-11 MONTH-12)
		       FOR I FROM 1
		       COLLECT `(,MONTH MONTH-IN-YEAR-PANE :MONTH ,I :YEAR ,YEAR)))
  (SETQ TV:CONSTRAINTS '((ONLY . ((FIRST-4 SECOND-4 THIRD-4)
				  ((FIRST-4 :HORIZONTAL (:EVEN)
					    (MONTH-1 MONTH-2 MONTH-3 MONTH-4)
					    ((MONTH-1 :EVEN)
					     (MONTH-2 :EVEN)
					     (MONTH-3 :EVEN)
					     (MONTH-4 :EVEN)))
				   (SECOND-4 :HORIZONTAL (:EVEN)
					     (MONTH-5 MONTH-6 MONTH-7 MONTH-8)
					     ((MONTH-5 :EVEN)
					      (MONTH-6 :EVEN)
					      (MONTH-7 :EVEN)
					      (MONTH-8 :EVEN)))
				   (THIRD-4 :HORIZONTAL (:EVEN)
					    (MONTH-9 MONTH-10 MONTH-11 MONTH-12)
					    ((MONTH-9 :EVEN)
					     (MONTH-10 :EVEN)
					     (MONTH-11 :EVEN)
					     (MONTH-12 :EVEN)))))))))
(DEFMETHOD (:INIT YEAR-FRAME :AFTER) (IGNORE)
  (SETQ ITEM-BLINKER (TV:MAKE-BLINKER SELF 'TV:HOLLOW-RECTANGULAR-BLINKER ':VISIBILITY NIL)))

(DEFMETHOD (:SET-YEAR YEAR-FRAME) (NEW-YEAR)
  (UNLESS (EQL NEW-YEAR YEAR)
    (LOOP FOR (NIL . PANE) IN TV:INTERNAL-PANES
	  DO (SEND PANE :SET-MONTH-AND-YEAR (SEND PANE :MONTH) NEW-YEAR))
    (SETQ YEAR NEW-YEAR)))

(DEFMETHOD (:RESET-CALENDAR YEAR-FRAME) ()
  (SETQ YEAR NIL))

(DEFMETHOD (:UPDATE-WINDOW-FOR-NEW-START-OF-WEEK YEAR-FRAME) ()
  (WHEN YEAR
    (LOOP FOR (NIL . PANE) IN TV:INTERNAL-PANES
      DO (SEND PANE :SET-MONTH-AND-YEAR (SEND PANE :MONTH) YEAR))
    (SEND SELF :UPDATE-MSGS-FROM-SEQUENCE *SEQUENCE* *MSG*)))

(DEFMETHOD (:UPDATE-MSGS-FROM-SEQUENCE YEAR-FRAME) (SEQUENCE MSG)
  (DOLIST (PANE TV:INTERNAL-PANES)
    (SEND (CDR PANE) ':UPDATE-MSGS-FROM-SEQUENCE SEQUENCE MSG)))

(DEFMETHOD (:NEED-TO-REDISPLAY-MSG YEAR-FRAME) (MSG)
  (DOLIST (PANE TV:INTERNAL-PANES)
    (SEND (CDR PANE) ':NEED-TO-REDISPLAY-MSG MSG)))

(DEFFLAVOR YEAR-FRAME-PANE () (TV:PANE-MIXIN YEAR-FRAME))

(DEFMETHOD (:PANE-SIZE YEAR-FRAME-PANE) (REM-WIDTH REM-HEIGHT IGNORE IGNORE STACKING)
  (SELECTQ STACKING
    (:HORIZONTAL REM-WIDTH)
    (:VERTICAL (MIN REM-HEIGHT
		    (+ 16 (* 27. (+ (FONT-CHAR-HEIGHT FONTS:TVFONT) 2)))))))

(DEFFLAVOR MONTH-IN-YEAR-FAKE-PRESENTATION (WINDOW) (DW:PRESENTATION)
  (:INITABLE-INSTANCE-VARIABLES WINDOW)
  :READABLE-INSTANCE-VARIABLES)
(DEFMETHOD (SET-PRESENTATION MONTH-IN-YEAR-FAKE-PRESENTATION) (NEW-OBJECT NEW-TYPE)
  (SETQ DW::OBJECT NEW-OBJECT
	DW::TYPE NEW-TYPE))
(DEFMETHOD (DW::PRESENTATION-MOUSE-SENSITIVE-BOXES MONTH-IN-YEAR-FAKE-PRESENTATION)
	   (&REST IGNORE)
  (MULTIPLE-VALUE-BIND (LEFT TOP WIDTH HEIGHT)
      (SEND WINDOW :PRESENTATION-BOX)
    `((,LEFT ,TOP ,(+ LEFT WIDTH) ,(+ TOP HEIGHT)))))

(COMPILE-FLAVOR-METHODS MONTH-IN-YEAR-FAKE-PRESENTATION)
;;; Display a single month within the year
(DEFFLAVOR MONTH-IN-YEAR-PANE
	(MONTH YEAR START-DOW TOTAL-DAYS DAYS-ARRAY
	 CURRENT-OBJECT CURRENT-TYPE MIY-FPT-1 MIY-FPT-2)
	(TV:PANE-MIXIN DW::DYNAMIC-MOUSE-MIXIN TV:LINE-TRUNCATING-MIXIN TV:WINDOW)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  (:DEFAULT-INIT-PLIST :DEFAULT-STYLE '(:FIX :ROMAN :SMALL)
		       :CHARACTER-HEIGHT 9. :CHARACTER-WIDTH 24.
		       :LABEL NIL :MORE-P NIL :BLINKER-P NIL))

(DEFUN-IN-FLAVOR (INITIALIZE-MONTH-IN-YEAR-PARAMETERS MONTH-IN-YEAR-PANE) ()
  (SETQ START-DOW (TIME:MONTH-START-DAY-OF-WEEK MONTH YEAR)
	TOTAL-DAYS (TIME:MONTH-LENGTH MONTH YEAR))
  (LOOP FOR DAY FROM 0 BELOW TOTAL-DAYS
	AS DATE = (1+ DAY)
	DO (SETF (DAYS-ARRAY-DATE DAYS-ARRAY DAY)
		 `(,(TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DATE MONTH YEAR) ,DATE ,MONTH
		   ,(TIME:CANONICALIZE-YEAR YEAR)))
	   (SETF (DAYS-ARRAY-HIGHLIGHTED-P DAYS-ARRAY DAY) NIL)
	   (SETF (DAYS-ARRAY-MSGS DAYS-ARRAY DAY) NIL))
  (SETF (DAYS-ARRAY-START-DAY DAYS-ARRAY) 0)
  (SETF (DAYS-ARRAY-END-DAY DAYS-ARRAY) TOTAL-DAYS))

(DEFMETHOD (:INIT MONTH-IN-YEAR-PANE :AFTER) (IGNORE)
  (SETQ CURRENT-OBJECT NIL
	CURRENT-TYPE NIL
	MIY-FPT-1 (MAKE-INSTANCE 'MONTH-IN-YEAR-FAKE-PRESENTATION :WINDOW SELF)
	MIY-FPT-2 (MAKE-INSTANCE 'MONTH-IN-YEAR-FAKE-PRESENTATION :WINDOW SELF))
  (SETQ DAYS-ARRAY (MAKE-DAYS-ARRAY-WITH-HIGHLIGHTING 31.))
  (SETF (DAYS-ARRAY-END-DAY DAYS-ARRAY) -1)	;dates in this month aren't defined yet
  (WHEN YEAR
    (INITIALIZE-MONTH-IN-YEAR-PARAMETERS)))

;;; This is a little bit overconservative
(DEFMETHOD (:VERIFY-NEW-EDGES MONTH-IN-YEAR-PANE) (IGNORE IGNORE NW NH)
  (COND ((AND ( NW (+ TV:LEFT-MARGIN-SIZE TV:RIGHT-MARGIN-SIZE (* 24. TV:CHAR-WIDTH)))
	      ( NH (+ TV:TOP-MARGIN-SIZE TV:BOTTOM-MARGIN-SIZE (* 9. TV:LINE-HEIGHT))))
	 NIL)
	(T "Data won't fit into month window")))

(DEFUN-IN-FLAVOR (MONTH-IN-YEAR-PANE-DRAW MONTH-IN-YEAR-PANE) (&AUX (DAY 1) DAYS)
  (UNLESS (NULL YEAR)
    (FUNCALL-SELF ':CLEAR-WINDOW)
    (FORMAT SELF "~4@T~A ~D~%~%~5@T~:[S  ~]M  T  W  T  F  S~:[  S~]~%"
	    (TIME:MONTH-STRING MONTH) (TIME:CANONICALIZE-YEAR YEAR)
	    *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
	    (NOT *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*))
    (LET ((NORMALIZED-START-DOW (\ (+ START-DOW (IF *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
						    0 1))
				   7)))
      (FORMAT SELF "~V@T  1" (* (1+ NORMALIZED-START-DOW) 3))
      (DOTIMES (IGNORE (- 6 NORMALIZED-START-DOW))
	(FORMAT SELF "~3D" (SETQ DAY (1+ DAY))))
      (SETQ DAYS (- TOTAL-DAYS (- 7 NORMALIZED-START-DOW))))
    (DO () (())
      (FORMAT SELF "~%~3@T")
      (AND (< DAYS 7) (RETURN))
      (SETQ DAYS (- DAYS 7))
      (FORMAT SELF "~3D~3D~3D~3D~3D~3D~3D"
	      (+ DAY 1) (+ DAY 2) (+ DAY 3) (+ DAY 4) (+ DAY 5) (+ DAY 6)
	      (SETQ DAY (+ DAY 7))))
    (DOTIMES (IGNORE DAYS)
      (FORMAT SELF "~3D" (SETQ DAY (1+ DAY))))))

(DEFUN-IN-FLAVOR (MONTH-IN-YEAR-XOR-DAYS MONTH-IN-YEAR-PANE) ()
  (LOOP FOR DAY FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	AS HIGHLIGHTED-P = (NOT (NULL (DAYS-ARRAY-MSGS DAYS-ARRAY DAY)))
	WHEN (NEQ HIGHLIGHTED-P (DAYS-ARRAY-HIGHLIGHTED-P DAYS-ARRAY DAY))
	  DO (SETF (DAYS-ARRAY-HIGHLIGHTED-P DAYS-ARRAY DAY) HIGHLIGHTED-P)
	     (SEND SELF :XOR-DAY DAY)))

(DEFMETHOD (:REFRESH MONTH-IN-YEAR-PANE :AFTER) (&OPTIONAL IGNORE)
  (UNLESS TV:RESTORED-BITS-P
    (MONTH-IN-YEAR-PANE-DRAW)
    (LOOP FOR DAY FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	  DO (SETF (DAYS-ARRAY-HIGHLIGHTED-P DAYS-ARRAY DAY) NIL))
    (MONTH-IN-YEAR-XOR-DAYS)))

(DEFMETHOD (:SET-MONTH-AND-YEAR MONTH-IN-YEAR-PANE) (NEW-MONTH NEW-YEAR)
  (SETQ MONTH NEW-MONTH
	YEAR NEW-YEAR)
  (INITIALIZE-MONTH-IN-YEAR-PARAMETERS)
  (TV:SHEET-FORCE-ACCESS (SELF)
    (MONTH-IN-YEAR-PANE-DRAW)))
(DEFMETHOD (:DISPLAYED-PRESENTATION-AT-POSITION MONTH-IN-YEAR-PANE) (X Y &REST IGNORE)
  (MULTIPLE-VALUE (CURRENT-OBJECT CURRENT-TYPE)
    (IF (NULL YEAR)
	(VALUES NIL NIL)
      (LET ((X (1- (// (- (+ X (TV:SHEET-INSIDE-LEFT)) TV:LEFT-MARGIN-SIZE) TV:CHAR-WIDTH 3)))
	    (Y (// (- (+ Y (TV:SHEET-INSIDE-TOP)) TV:TOP-MARGIN-SIZE) TV:LINE-HEIGHT))
	    M D)
	(IF (AND ( Y 3) ( X 6)
		 ( (SETQ M (- (1+ (* (- Y 3) 7))
			       (\ (+ START-DOW (IF *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
						   0 1))
				  7)))
		    TOTAL-DAYS))
	    (IF (AND ( X 0)
		     (PLUSP (SETQ D (+ M X)))
		     ( D TOTAL-DAYS))
		(VALUES `(,D ,MONTH ,YEAR) 'DAY)
	      (VALUES `(,(MAX 1 M) ,MONTH ,YEAR ,(MIN (+ M 6) TOTAL-DAYS))
		      'WEEK-CONTAINING-DAY))
	  (VALUES `(,MONTH ,YEAR) 'MONTH)))))
  (WHEN CURRENT-OBJECT
    (SWAPF MIY-FPT-1 MIY-FPT-2)
    (SET-PRESENTATION MIY-FPT-1 CURRENT-OBJECT CURRENT-TYPE)
    MIY-FPT-1))
(DEFUN-IN-FLAVOR (MONTH-IN-YEAR-DAYS-AREA MONTH-IN-YEAR-PANE) (START-DAY
								&OPTIONAL (END-DAY START-DAY))
  (LET ((X (+ (\ (+ START-DOW (IF *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY* 0 1)) 7)
	      (1- START-DAY))))
    (VALUES (* TV:CHAR-WIDTH (+ 4 (* 3 (\ X 7))))
	    (1- (* TV:LINE-HEIGHT (+ 3 (// X 7))))
	    (* TV:CHAR-WIDTH (1- (* 3 (1+ (- END-DAY START-DAY)))))
	    TV:LINE-HEIGHT)))
(DEFMETHOD (:PRESENTATION-BOX MONTH-IN-YEAR-PANE) ()
  (DECLARE (VALUES LEFT TOP WIDTH HIEGHT))
  (FLET ((DAY-AREA (START-DAY &OPTIONAL (END-DAY START-DAY))
	   (MULTIPLE-VALUE-BIND (LEFT TOP WIDTH HEIGHT)
	       (MONTH-IN-YEAR-DAYS-AREA START-DAY END-DAY)
	     (VALUES (+ LEFT TV:LEFT-MARGIN-SIZE) (+ TOP TV:TOP-MARGIN-SIZE) WIDTH HEIGHT))))
    (WHEN CURRENT-OBJECT
      (CL:ECASE CURRENT-TYPE
	(DAY
	  (DAY-AREA (FIRST CURRENT-OBJECT)))
	(WEEK-CONTAINING-DAY
	  (DAY-AREA (FIRST CURRENT-OBJECT) (FOURTH CURRENT-OBJECT)))
	(MONTH
	  (VALUES (+ (* 4 TV:CHAR-WIDTH) TV:LEFT-MARGIN-SIZE)
		  TV:TOP-MARGIN-SIZE
		  (* TV:CHAR-WIDTH (1- (* 7 3)))
		  (* TV:LINE-HEIGHT
		     (+ 3 (// (+ TOTAL-DAYS
				 (\ (+ START-DOW (IF *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
						     0 1))
				    7)
				 6)
			      7)))))))))

(DEFMETHOD (:UPDATE-MSGS-FROM-SEQUENCE MONTH-IN-YEAR-PANE) (SEQUENCE IGNORE)
  (LOOP FOR DAY FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	DO (SETF (DAYS-ARRAY-MSGS DAYS-ARRAY DAY) NIL))
  (WHEN (AND SEQUENCE *SHOW-REMINDERS-IN-YEAR-MODE*)
    (DO-UNIVERSE (MSG SEQUENCE
		      :NOTE-PROGRESS (FORMAT NIL "Finding reminders for ~A ~D in ~A"
					     (TIME:MONTH-STRING MONTH)
					     (TIME:CANONICALIZE-YEAR YEAR)
					     SEQUENCE))
      (YEAR-REMINDER-MSG-COLLECT-DAYS MSG DAYS-ARRAY)))
  (MONTH-IN-YEAR-XOR-DAYS))

(DEFUN YEAR-REMINDER-MSG-COLLECT-DAYS (MSG ARRAY)
  (LOOP FOR DAY FROM (DAYS-ARRAY-START-DAY ARRAY) BELOW (DAYS-ARRAY-END-DAY ARRAY)
	WHEN (REMINDER-MSG-VALID-ON-DAY-P MSG (DAYS-ARRAY-DATE ARRAY DAY))
	  DO (PUSH MSG (DAYS-ARRAY-MSGS ARRAY DAY))))

(DEFMETHOD (:XOR-DAY MONTH-IN-YEAR-PANE) (DAY)
  (MULTIPLE-VALUE-BIND (LEFT TOP WIDTH HEIGHT)
      (MONTH-IN-YEAR-DAYS-AREA (1+ DAY))
    (SEND SELF ':DRAW-RECTANGLE WIDTH HEIGHT LEFT TOP :FLIP)))

(DEFMETHOD (:NEED-TO-REDISPLAY-MSG MONTH-IN-YEAR-PANE) (MSG)
  (WHEN (AND MSG *SHOW-REMINDERS-IN-YEAR-MODE*)
    (LOOP FOR DAY FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	  AS NEW-MSG-VALID-P = (REMINDER-MSG-VALID-ON-DAY-P MSG
							   (DAYS-ARRAY-DATE DAYS-ARRAY DAY))
	  AS OLD-MSG-VALID-P = (NOT (NULL (MEMQ MSG (DAYS-ARRAY-MSGS DAYS-ARRAY DAY))))
	  WHEN (NEQ OLD-MSG-VALID-P NEW-MSG-VALID-P)
	    DO (IF NEW-MSG-VALID-P
		   (PUSH MSG (DAYS-ARRAY-MSGS DAYS-ARRAY DAY))
		 (SETF (DAYS-ARRAY-MSGS DAYS-ARRAY DAY)
		       (DELQ MSG (DAYS-ARRAY-MSGS DAYS-ARRAY DAY)))))
    (MONTH-IN-YEAR-XOR-DAYS)))
(SCL:DEFINE-PRESENTATION-TYPE WEEK-CONTAINING-DAY ()
   1;; Not that we'll ever actually try to 2accept1 one of these, but ...
0   :PARSER ((STREAM)
	    (VALUES
	      (SI:WITH-PARSE-FERROR (TIME:PARSE-ERROR)
		(LET ((TOKEN (DW:READ-STANDARD-TOKEN STREAM)))
		  (MULTIPLE-VALUE-BIND (TIME IGNORE IGNORE)
		      (TIME:PARSE-UNIVERSAL-TIME TOKEN 0 NIL T NIL T)
		    (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE DAY MONTH YEAR)
			(TIME:DECODE-UNIVERSAL-TIME TIME)
		      `(,DAY ,MONTH ,YEAR ,DAY)))))
	      'WEEK-CONTAINING-DAY))
   :PRINTER ((TIME STREAM)
	     (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE DAY MONTH YEAR)
		 (IF (LISTP TIME)
		     (VALUES NIL NIL NIL (FIRST TIME) (SECOND TIME) (THIRD TIME))
		   (TIME:DECODE-UNIVERSAL-TIME TIME))
	       (MULTIPLE-VALUE-BIND (DAY MONTH YEAR)
		   (TIME:INCREMENT-DATE DAY MONTH YEAR
					(- (\ (+ (TIME:DATE-DAY-OF-THE-WEEK DAY MONTH YEAR)
						 (IF *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
						     0 1))
					      7)))
		 (FORMAT STREAM "the week of ~D ~A ~D" DAY
						       (TIME:MONTH-STRING MONTH)
						       (TIME:CANONICALIZE-YEAR YEAR)))))
   :DESCRIPTION "a day in the desired week")
(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SET-CONTAINING-WEEK-CONFIGURATION
						  (WEEK-CONTAINING-DAY
						    "Select configuration for"
						    *ZMAIL-COMTAB* :GESTURE :SELECT)
						  (WEEK-CONTAINING-DAY)
  (SCL:DESTRUCTURING-BIND (DAY MONTH YEAR IGNORE)
     WEEK-CONTAINING-DAY
    `(SET-CONTAINING-WEEK-CONFIGURATION ,DAY ,MONTH ,YEAR)))
(DEFUN SET-CONTAINING-WEEK-CONFIGURATION (DAY MONTH YEAR)
  (MULTIPLE-VALUE-BIND (DAY MONTH YEAR)
      (TIME:INCREMENT-DATE DAY MONTH YEAR
			   (- (\ (+ (TIME:DATE-DAY-OF-THE-WEEK DAY MONTH YEAR)
				    (IF *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY* 0 1))
				 7)))
    (SEND *WEEK-WINDOW* :SET-WEEK DAY MONTH YEAR)
    (SET-MAIN-WINDOW-CONFIGURATION :WEEK)
    (POST-SETUP-FOR-CALENDAR-CONFIGURATION :WEEK)))

(DEFFLAVOR MOUSE-SENSITIVE-LABEL-FAKE-PRESENTATION (WINDOW) (DW:PRESENTATION)
  (:INITABLE-INSTANCE-VARIABLES WINDOW)
  :READABLE-INSTANCE-VARIABLES)

(DEFMETHOD (SET-PRESENTATION MOUSE-SENSITIVE-LABEL-FAKE-PRESENTATION) (NEW-OBJECT NEW-TYPE)
  (SETQ DW::OBJECT NEW-OBJECT
	DW::TYPE NEW-TYPE))

(DEFMETHOD (DW::PRESENTATION-MOUSE-SENSITIVE-BOXES MOUSE-SENSITIVE-LABEL-FAKE-PRESENTATION)
	   (&REST IGNORE)
  (MULTIPLE-VALUE-BIND (LEFT TOP)
      (SEND WINDOW :LABEL-POSITION)
    (MULTIPLE-VALUE-BIND (WIDTH HEIGHT)
	(SEND WINDOW :LABEL-SIZE)
      `((,LEFT ,TOP ,(+ LEFT WIDTH) ,(+ TOP HEIGHT))))))

(COMPILE-FLAVOR-METHODS MOUSE-SENSITIVE-LABEL-FAKE-PRESENTATION)

(DEFFLAVOR MOUSE-SENSITIVE-LABEL-MIXIN
	(MSL-FPT-1 MSL-FPT-2)
	()
  (:REQUIRED-FLAVORS DW::DYNAMIC-MOUSE-MIXIN TV:ESSENTIAL-LABEL-MIXIN)
  (:REQUIRED-METHODS :LABEL-OBJECT :LABEL-PRESENTATION-TYPE))

(DEFMETHOD (MAKE-INSTANCE MOUSE-SENSITIVE-LABEL-MIXIN) (&REST IGNORE)
  (SETQ MSL-FPT-1 (MAKE-INSTANCE 'MOUSE-SENSITIVE-LABEL-FAKE-PRESENTATION :WINDOW SELF)
	MSL-FPT-2 (MAKE-INSTANCE 'MOUSE-SENSITIVE-LABEL-FAKE-PRESENTATION :WINDOW SELF)))

(DEFWHOPPER (:DISPLAYED-PRESENTATION-AT-POSITION MOUSE-SENSITIVE-LABEL-MIXIN) (X Y &REST OTHER)
  (MULTIPLE-VALUE-BIND (LF TP RT BT)
      (IF TV:LABEL (TV:COMPUTE-LABEL-POSITION) (VALUES 0 0 0 0))
    (LET ((RX (+ X (TV:SHEET-INSIDE-LEFT)))
	  (RY (+ Y (TV:SHEET-INSIDE-TOP))))
      (COND ((AND ( LF RX) (> RT RX) ( TP RY) (> BT RY))
	     (SWAPF MSL-FPT-1 MSL-FPT-2)
	     (SET-PRESENTATION MSL-FPT-1 (SEND SELF :LABEL-OBJECT)
					 (SEND SELF :LABEL-PRESENTATION-TYPE))
	     MSL-FPT-1)
	    (T
	     (LEXPR-CONTINUE-WHOPPER X Y OTHER))))))

(DEFMETHOD (:LABEL-POSITION MOUSE-SENSITIVE-LABEL-MIXIN) ()
  (IF TV:LABEL (TV:COMPUTE-LABEL-POSITION) (VALUES 0 0 0 0)))

(DEFFLAVOR DAY-SUPERIOR-FRAME-MIXIN
	(DAYS-ARRAY
	 (CURRENT-MSG NIL))
	()
  (:GETTABLE-INSTANCE-VARIABLES CURRENT-MSG)
  (:REQUIRED-FLAVORS TV:BASIC-FRAME))

(DEFMETHOD (:INIT DAY-SUPERIOR-FRAME-MIXIN :AFTER) (IGNORE)
  (LOOP FOR I FROM 0 BELOW (ARRAY-DIMENSION-N 1 DAYS-ARRAY)
	AS PANE = (SEND SELF :GET-PANE (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I))
	DO (SETF (DAYS-ARRAY-MSGS DAYS-ARRAY I) (SEND PANE :ITEMS))))

(DEFMETHOD (:NEED-TO-REDISPLAY-MSG DAY-SUPERIOR-FRAME-MIXIN) (MSG &AUX OLD-CURRENT-MSG)
  (SETQ OLD-CURRENT-MSG CURRENT-MSG
	CURRENT-MSG MSG)
  (LOOP FOR I FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	AS PANE = (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I)
	DO (AND OLD-CURRENT-MSG (NEQ MSG OLD-CURRENT-MSG)
		(SEND SELF ':SEND-PANE PANE ':REDISPLAY-MSG OLD-CURRENT-MSG))
	   (AND (NOT (NULL MSG))
		(SEND SELF ':SEND-PANE PANE
		      (IF (REMINDER-MSG-VALID-ON-DAY-P MSG (DAYS-ARRAY-DATE DAYS-ARRAY I))
			  ':ADD-MSG ':DELETE-MSG)
		      MSG))))

(DEFMETHOD (:UPDATE-MSGS-FROM-SEQUENCE DAY-SUPERIOR-FRAME-MIXIN) (SEQUENCE MSG)
  (SETQ CURRENT-MSG MSG)
  (LOOP FOR I FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	DO (LOOP WITH MSGS = (DAYS-ARRAY-MSGS DAYS-ARRAY I)
		 FOR I FROM 0 BELOW (FILL-POINTER MSGS)
		 WHEN (NOT (STRINGP (AREF MSGS I)))
		   RETURN (SETF (FILL-POINTER MSGS) I)))
  (WHEN SEQUENCE
    (DO-UNIVERSE (MSG SEQUENCE
		      :NOTE-PROGRESS "Finding reminders in ~A")
      (REMINDER-MSG-COLLECT-DAYS MSG DAYS-ARRAY)))
  (LOOP FOR I FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	AS PANE = (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I)
	AND ARRAY = (DAYS-ARRAY-MSGS DAYS-ARRAY I)
	DO (STABLE-SORT ARRAY #'MSG-START-TIME-LESSP)
	   (LET ((PANE-WINDOW (SEND SELF :GET-PANE PANE)))
	     (SEND PANE-WINDOW :SET-ITEMS ARRAY)
	     (SEND PANE-WINDOW :DECIDE-IF-SCROLLING-NECESSARY))))

(DEFUN MSG-START-TIME-LESSP (M1 M2)
  (< (MSG-START-TIME-LESSP-INTERNAL M1)
     (MSG-START-TIME-LESSP-INTERNAL M2)))

(DEFUN MSG-START-TIME-LESSP-INTERNAL (MSG)
  (IF (TYPEP MSG 'MSG)
      (LET ((TIME-PROP (GETL (ASSURE-MSG-PARSED MSG) '(:REMINDER-TIME :START-DATE))))
	(SCL:DESTRUCTURING-BIND (&OPTIONAL TYPE VALUE &REST IGNORE) TIME-PROP
	  (COND ((NULL TYPE) -2)
		((EQ TYPE :REMINDER-TIME)
		 (COND ((NULL VALUE) -1)
		       ((LISTP VALUE) (FIRST (LAST VALUE)))
		       (T VALUE)))
		(T
		 (FLET ((EXTRACT-TIME (DATE-AND-OPTIONAL-TIME)
			  (SCL:DESTRUCTURING-BIND (DATE &OPTIONAL INCLUDES-TIME &REST IGNORE)
						  DATE-AND-OPTIONAL-TIME
			    (IF INCLUDES-TIME
				(MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS)
				    (TIME:DECODE-UNIVERSAL-TIME DATE)
				  (+ SECONDS (* (+ MINUTES (* HOURS 60.)) 60.)))
			      -1))))
		   (COND ((NULL VALUE) -1)
			 ((LISTP VALUE) (EXTRACT-TIME (FIRST (LAST VALUE))))
			 (T -1)))))))		1;Improperly constructed 2:start-date1?
0    -3))

(DEFUN REMINDER-MSG-COLLECT-DAYS (MSG ARRAY)
  (LOOP FOR I FROM (DAYS-ARRAY-START-DAY ARRAY) BELOW (DAYS-ARRAY-END-DAY ARRAY)
	WHEN (REMINDER-MSG-VALID-ON-DAY-P MSG (DAYS-ARRAY-DATE ARRAY I))
	DO (OR (DAYS-ARRAY-MSGS ARRAY I)
	       (SETF (DAYS-ARRAY-MSGS ARRAY I) (MAKE-ARRAY 10. ':FILL-POINTER 0)))
	   (ARRAY-PUSH-EXTEND (DAYS-ARRAY-MSGS ARRAY I) MSG)))

(DEFFLAVOR DAY-IN-PERIOD-PANE
	((DAY NIL) MONTH YEAR (DAY-OBJECT NIL))
	(TV:PANE-MIXIN TV:BORDERS-MIXIN TV:TOP-LABEL-MIXIN
	 TV:TEXT-SCROLL-WINDOW TRUNCATING-MOUSE-SENSITIVE-ITEMS
	 BASIC-MOUSE-SENSITIVE-ITEMS-TO-DYNAMIC-MOUSE-KLUDGE
	 MOUSE-SENSITIVE-LABEL-MIXIN ARROW-PRINTING-MIXIN TV:WINDOW)
  (:DEFAULT-INIT-PLIST :MORE-P NIL :BLINKER-P NIL
		       :SCROLL-BAR-ALWAYS-DISPLAYED T)
  (:REQUIRED-METHODS :LABEL-FOR-DAY :STRING-FOR-MSG))

;;; This should go in another flavor, but there isn't one
(DEFMETHOD (:DELETE-ITEM DAY-IN-PERIOD-PANE :BEFORE) (ITEM-NO)
  (WHEN (< ITEM-NO TV:(+ TOP-ITEM (SHEET-NUMBER-OF-INSIDE-LINES)))
    (LET ((ITEM-Y (+ (TV:SHEET-INSIDE-TOP) (* TV:LINE-HEIGHT (- ITEM-NO TV:TOP-ITEM)))))
      (SETQ TV:ITEM-LIST (LOOP FOR ITEM IN TV:ITEM-LIST
			       UNLESS (= (FOURTH ITEM) ITEM-Y)
			       COLLECT ITEM
			       AND DO (WHEN (> (FOURTH ITEM) ITEM-Y)
					(DECF (FOURTH ITEM) TV:LINE-HEIGHT)
					(DECF (SIXTH ITEM) TV:LINE-HEIGHT)))))))

(DEFMETHOD (:SET-DAY DAY-IN-PERIOD-PANE) (NEW-DAY NEW-MONTH NEW-YEAR)
  (SETQ DAY NEW-DAY MONTH NEW-MONTH YEAR NEW-YEAR
	DAY-OBJECT (WHEN DAY `(,DAY ,MONTH ,YEAR)))
  (SEND SELF :SET-LABEL (WHEN DAY (SEND SELF :LABEL-FOR-DAY))))
(DEFMETHOD (:LABEL-OBJECT DAY-IN-PERIOD-PANE) ()
  DAY-OBJECT)
(DEFMETHOD (:LABEL-PRESENTATION-TYPE DAY-IN-PERIOD-PANE) ()
  (WHEN DAY-OBJECT
    'DAY))
(SCL:DEFINE-PRESENTATION-TYPE DAY ()
   :PARSER ((STREAM)
	    (VALUES
	      (SI:WITH-PARSE-FERROR (TIME:PARSE-ERROR)
		(LET ((TOKEN (DW:READ-STANDARD-TOKEN STREAM)))
		  (MULTIPLE-VALUE-BIND (TIME IGNORE IGNORE)
		      (TIME:PARSE-UNIVERSAL-TIME TOKEN 0 NIL T NIL T)
		    (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE DAY MONTH YEAR)
			(TIME:DECODE-UNIVERSAL-TIME TIME)
		      `(,DAY ,MONTH ,YEAR)))))
	      'DAY))
   :PRINTER ((TIME STREAM)
	     (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE DAY MONTH YEAR)
		 (IF (LISTP TIME)
		     (VALUES NIL NIL NIL (FIRST TIME) (SECOND TIME) (THIRD TIME))
		   (TIME:DECODE-UNIVERSAL-TIME TIME))
	       (FORMAT STREAM "~D ~A ~D" DAY
					 (TIME:MONTH-STRING MONTH)
					 (TIME:CANONICALIZE-YEAR YEAR))))
   :DESCRIPTION "a day")
(SCL:DEFINE-PRESENTATION-TRANSLATOR DAY-TO-UNIVERSAL-TIME (DAY TIME:UNIVERSAL-TIME)
				    (DAY)
  (DESTRUCTURING-BIND (DAY MONTH YEAR) DAY
    (TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR)))
(SCL:DEFINE-PRESENTATION-TRANSLATOR DAY-TO-REMINDER-DATE-TIME (DAY REMINDER-DATE-TIME)
				    (DAY)
  (DESTRUCTURING-BIND (DAY MONTH YEAR) DAY
    `((,(TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR) NIL))))
(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SHOW-REMINDERS
						  (DAY "Show reminders for" *ZMAIL-COMTAB*
						       :GESTURE :SELECT)
						  (DAY)
  (DESTRUCTURING-BIND (DAY MONTH YEAR) DAY
    `(SURVEY-REMINDERS-FOR-DAY ,(TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR))))
(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR ADD-REMINDER
						  (DAY "Add reminder on" *ZMAIL-COMTAB*
						       :GESTURE :DESCRIBE)	1;Compatability
0						  (DAY)
  `(ADD-REMINDER-ON-DAY ,DAY))
(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SET-CURRENT-MSG-START-DATE
						  (DAY "Set current message start date to"
						       *ZMAIL-COMTAB*
						       :TESTER ((&REST IGNORE)
								(AND (VARIABLE-BOUNDP *MSG*)
								     *MSG*)))
						  (DAY)
  `(SET-MSG-START-DATE ,*MSG* ,@DAY))
(DEFUN SET-MSG-START-DATE (MSG DAY MONTH YEAR)
  (LET* ((START-TIME (PROMPT-FOR-REMINDER-TIME))
	 (SECS (OR START-TIME 0))
	 (MINS (// SECS 60.))
	 (SECS (\ SECS 60.))
	 (HOURS (// MINS 60.))
	 (MINS (\ MINS 60.))
	 (START-DATE `((,(TIME:ENCODE-UNIVERSAL-TIME SECS MINS HOURS DAY MONTH YEAR)
			,(NOT (NULL START-TIME)))))
	 (EXPIRATION-DATE (PROMPT-FOR-EXPIRATION-DATE `(:START-DATE ,START-DATE))))
    (WITH-MSG-REDISPLAY-DELAYED
      (ADD-HEADER-TO-MSG MSG :START-DATE START-DATE :DELETE-IF-EMPTY T)
      (ADD-HEADER-TO-MSG MSG :EXPIRATION-DATE EXPIRATION-DATE :DELETE-IF-EMPTY T)))
  DIS-TEXT)

;(TV:ADD-TYPEOUT-ITEM-TYPE *ZMAIL-TYPEOUT-ITEM-ALIST* CALENDAR-MSG "Select"
;			  ZMAIL-SELECT-MSG T "Select this reminder.")

(DEFMETHOD (:PRINT-ITEM DAY-IN-PERIOD-PANE) (MSG &REST IGNORE)
  ;; Current message is displayed in bold and holidays are displayed in italics
  (LET ((STYLE (COND ((EQ MSG (IF (VARIABLE-BOUNDP *MSG*) *MSG* NIL)) '(NIL :BOLD NIL))
		     ((STRINGP MSG) '(NIL :ITALIC NIL))
		     (T '(NIL NIL NIL)))))
    (SCL:WITH-CHARACTER-STYLE (STYLE SELF)
      ;(TRUNCATED-SENSITIVE-FORMAT MSG (CL:TYPE-OF MSG) SELF
      (SEND SELF :TRUNCATED-ITEM (CL:TYPE-OF MSG) MSG
				  "~\ZWEI:ARROW\~A"
				  (EQ MSG (SEND TV:SUPERIOR :CURRENT-MSG))
				  (IF (STRINGP MSG) MSG (SEND SELF :STRING-FOR-MSG MSG))))))

(DEFMETHOD (:REDISPLAY-MSG DAY-IN-PERIOD-PANE) (MSG)
  (LOOP FOR I FROM TV:TOP-ITEM BELOW (FILL-POINTER TV:ITEMS)
	WHEN (EQ MSG (AREF TV:ITEMS I))
	DO (SEND SELF ':SET-CURSORPOS 0 (- I TV:TOP-ITEM) ':CHARACTER)
	   (SEND SELF ':CLEAR-REST-OF-LINE)
	   (SEND SELF ':PRINT-ITEM MSG (- I TV:TOP-ITEM) I)))

(DEFMETHOD (:ADD-MSG DAY-IN-PERIOD-PANE) (MSG)
  (LET* ((LENGTH (FILL-POINTER TV:ITEMS))
	 (PRESENT-INDEX (LOOP FOR I FROM 0 BELOW LENGTH
			      WHEN (EQ (AREF TV:ITEMS I) MSG)
				RETURN I)))
    (SYS:WITH-STACK-ARRAY (ARRAY (IF PRESENT-INDEX LENGTH (1+ LENGTH)))
      (COPY-ARRAY-CONTENTS TV:ITEMS ARRAY)
      (UNLESS PRESENT-INDEX
	(SETF (AREF ARRAY LENGTH) MSG))
      (STABLE-SORT ARRAY #'MSG-START-TIME-LESSP)
      (COND ((NOT (LOOP FOR I FROM 0 BELOW LENGTH
			ALWAYS (EQ (AREF ARRAY I) (AREF TV:ITEMS I))))
	     1;; Order of messages has changed -- Complete redisplay is necessary.
0	     (WHEN (NULL PRESENT-INDEX)
	       (INCF (FILL-POINTER TV:ITEMS)))
	     (COPY-ARRAY-CONTENTS ARRAY TV:ITEMS)
	     (SEND SELF :SET-ITEMS TV:ITEMS)
	     (SEND SELF :DECIDE-IF-SCROLLING-NECESSARY))
	    ((NULL PRESENT-INDEX)
	     1;; Simply adding a new message.
0	     (SEND SELF :INSERT-ITEM (LOOP FOR I FROM 0 BELOW (1+ LENGTH)
					   WHEN (EQ (AREF ARRAY I) MSG)
					     RETURN I)
		   MSG)
	     (SEND SELF :DECIDE-IF-SCROLLING-NECESSARY))
	    (T
	     1;; No real changes.
0	     (SEND SELF :REDISPLAY-MSG MSG))))))

(DEFMETHOD (:DELETE-MSG DAY-IN-PERIOD-PANE) (MSG)
  (LOOP FOR I FROM 0 BELOW (FILL-POINTER TV:ITEMS)
	WHEN (EQ MSG (AREF TV:ITEMS I))
	RETURN (SEND SELF ':DELETE-ITEM I))
  (SEND SELF ':DECIDE-IF-SCROLLING-NECESSARY))

;;; Decide whether scrolling should be enabled because not all items fit, and turn
;;; on a scroll bar if so.  This is only needed because scroll-bar-always-displayed
;;; is stupid.
(DEFVAR *DECIDE-SCROLLING-RECURSION* NIL)

(DEFMETHOD (:DECIDE-IF-SCROLLING-NECESSARY DAY-IN-PERIOD-PANE) ()
  (UNLESS *DECIDE-SCROLLING-RECURSION*
    (LET ((*DECIDE-SCROLLING-RECURSION* T))
      (IF (> (FILL-POINTER TV:ITEMS) (TV:SHEET-NUMBER-OF-INSIDE-LINES))
	  (UNLESS (SEND SELF :SCROLL-BAR-IN-MARGIN ':LEFT)
	    (SEND SELF :ADD-SCROLL-BAR '(:LEFT 2)))
	  (WHEN (SEND SELF :SCROLL-BAR-IN-MARGIN ':LEFT)
	    (SEND SELF :REMOVE-SCROLL-BAR ':LEFT))))))

(DEFMETHOD (:CHANGE-OF-SIZE-AND-MARGINS DAY-IN-PERIOD-PANE :AFTER) (&REST IGNORE)
  (SEND SELF ':DECIDE-IF-SCROLLING-NECESSARY))

(DEFFLAVOR BASIC-SEVERAL-WEEKS-FRAME
	((NUMBER-OF-WEEKS 5))
	(DAY-SUPERIOR-FRAME-MIXIN TV:BORDERED-CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER)
  (:DEFAULT-INIT-PLIST :SAVE-BITS ':DELAYED)
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:INIT BASIC-SEVERAL-WEEKS-FRAME :BEFORE) (IGNORE)
  (MULTIPLE-VALUE (DAYS-ARRAY TV:PANES)
    (MAKE-DAYS-ARRAY-WITH-PANES (* 6 7)))
  (SETQ TV:PANES `((HEADER ,(SEND SELF ':HEADER-PANE-FLAVOR))
		   . ,(LOOP FOR I FROM 0 BELOW (* 6 7)
			    AS PANE = (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I)
			    COLLECT `(,PANE DAY-IN-SEVERAL-WEEKS-PANE))))
  (SETQ TV:CONSTRAINTS (LOOP FOR NWEEKS FROM 4 TO 6
			     FOR CNAME IN '(4-WEEKS 5-WEEKS 6-WEEKS)
			     COLLECT (LOOP FOR I FROM 0 BELOW NWEEKS
					   AS LEVEL = (GENSYM)
					   COLLECT LEVEL INTO LEVELS
					   COLLECT `(,LEVEL :HORIZONTAL (:EVEN)
						     . ,(LOOP FOR J FROM (* I 7) REPEAT 7
							      AS PANE = (DAYS-ARRAY-PANE-NAME
									  DAYS-ARRAY J)
							      COLLECT PANE INTO PANES
							      COLLECT `(,PANE :EVEN)
							        INTO CONSTRS
							      FINALLY (RETURN `(,PANES
										,CONSTRS))))
					     INTO CONSTRS
					   FINALLY (RETURN `(,CNAME . ((HEADER . ,LEVELS)
								       ((HEADER 2 :LINES))
								       ,CONSTRS)))))))

(DEFMETHOD (:SETUP-INTERNAL BASIC-SEVERAL-WEEKS-FRAME)
	   (DAY MONTH YEAR TOTAL-DAYS &AUX START-DOW)
  (SETQ START-DOW (TIME:DATE-DAY-OF-THE-WEEK DAY MONTH YEAR))
  (UNLESS *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
    (SETQ START-DOW (\ (1+ START-DOW) 7)))
  (SETF (DAYS-ARRAY-START-DAY DAYS-ARRAY) START-DOW)
  (SETF (DAYS-ARRAY-END-DAY DAYS-ARRAY) (+ START-DOW TOTAL-DAYS))
  ;; First clear out any old stuff.
  (LOOP AS I FROM 0 BELOW (ARRAY-DIMENSION-N 1 DAYS-ARRAY)
	DO (SETF (DAYS-ARRAY-DATE DAYS-ARRAY I) NIL)
	   (LET ((ITEMS (DAYS-ARRAY-MSGS DAYS-ARRAY I)))
	     (SETF (FILL-POINTER ITEMS) 0)))
  ;; Then fill in information for days in range
  (LOOP FOR I FROM (DAYS-ARRAY-START-DAY DAYS-ARRAY) BELOW (DAYS-ARRAY-END-DAY DAYS-ARRAY)
	DO (SETF (DAYS-ARRAY-DATE DAYS-ARRAY I)
		 `(,(TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR)
		   ,DAY ,MONTH ,(TIME:CANONICALIZE-YEAR YEAR)))
	   (LET ((ITEMS (DAYS-ARRAY-MSGS DAYS-ARRAY I))
		 (HOLIDAYS (TIME:HOLIDAYS-FOR-DAY DAY MONTH YEAR)))
	     (DOLIST (HOL HOLIDAYS)
	       (ARRAY-PUSH-EXTEND ITEMS (GET HOL 'TIME:HOLIDAY-PRETTY-NAME))))
	   (MULTIPLE-VALUE (DAY MONTH YEAR)
	     (TIME:INCREMENT-DATE DAY MONTH YEAR)))
  ;; Then inform the panes
  (LOOP AS I FROM 0 BELOW (ARRAY-DIMENSION-N 1 DAYS-ARRAY)
	DO (LET ((PANE (SEND SELF ':GET-PANE (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I))))
	     (DESTRUCTURING-BIND (NIL DAY MONTH YEAR) (DAYS-ARRAY-DATE DAYS-ARRAY I)
	       (SEND PANE ':SET-DAY DAY MONTH (AND YEAR (- YEAR 1900.))))
	     (SEND PANE ':SET-ITEMS (DAYS-ARRAY-MSGS DAYS-ARRAY I))
	     (SEND PANE ':SET-BORDERS (LIST
					(IF (AND ( (\ I 7) 0)
						 (OR (< I (DAYS-ARRAY-START-DAY DAYS-ARRAY))
						     (> I (DAYS-ARRAY-END-DAY DAYS-ARRAY))))
					    0 1)
					1
					(IF (AND ( (\ I 7) 6)
						 (LET ((J (1+ I)))
						   (OR (< J
							  (DAYS-ARRAY-START-DAY DAYS-ARRAY))
						       (> J
							  (DAYS-ARRAY-END-DAY DAYS-ARRAY))))
						 )
					    0 1)
					1))
	     (SEND PANE ':DECIDE-IF-SCROLLING-NECESSARY)))
  (NTH (- NUMBER-OF-WEEKS 4) '(4-WEEKS 5-WEEKS 6-WEEKS)))

(DEFFLAVOR BASIC-SEVERAL-WEEKS-FRAME-PANE () ()
  (:REQUIRED-FLAVORS TV:PANE-MIXIN BASIC-SEVERAL-WEEKS-FRAME))

(DEFMETHOD (:PANE-SIZE BASIC-SEVERAL-WEEKS-FRAME-PANE)
	   (REM-WIDTH REM-HEIGHT IGNORE IGNORE STACKING)
  (SELECTQ STACKING
    (:HORIZONTAL REM-WIDTH)
    (:VERTICAL (MIN (// (* REM-HEIGHT 3) 4)	;Don't hog more than 75%
		    (+ (* TV:LINE-HEIGHT 2)
		       (* NUMBER-OF-WEEKS (// (TV:SHEET-INSIDE-WIDTH) 7)))))))

(DEFFLAVOR BASIC-SEVERAL-WEEKS-HEADER-PANE () (TV:PANE-MIXIN TV:WINDOW)
  (:DEFAULT-INIT-PLIST :LABEL NIL :MORE-P NIL :BLINKER-P NIL)
  (:REQUIRED-METHODS :HEADER-STRING))

(DEFUN-IN-FLAVOR (SEVERAL-WEEKS-HEADER-PANE-DRAW BASIC-SEVERAL-WEEKS-HEADER-PANE) ()
  (FUNCALL-SELF ':CLEAR-WINDOW)
  (LET ((STRING (SEND SELF ':HEADER-STRING)))
    (UNLESS (NULL STRING)
      (SEND SELF ':DISPLAY-CENTERED-STRING STRING)
      (SEND SELF ':INCREMENT-CURSORPOS 0 1 ':CHARACTER)
      (LOOP WITH IW = (TV:SHEET-INSIDE-WIDTH)
	    FOR I BELOW 7
	    FOR ID FROM (IF *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY* 0 6)
	    FOR LEFT FIRST 0 THEN RIGHT
	    AS RIGHT = (// (* IW (1+ I)) 7)
	    DO (SEND SELF ':DISPLAY-CENTERED-STRING (TIME:DAY-OF-THE-WEEK-STRING (\ ID 7))
		     LEFT RIGHT)))))

(DEFMETHOD (:REFRESH BASIC-SEVERAL-WEEKS-HEADER-PANE :AFTER) (&OPTIONAL IGNORE)
  (UNLESS TV:RESTORED-BITS-P
    (SEVERAL-WEEKS-HEADER-PANE-DRAW)))

(DEFFLAVOR DAY-IN-SEVERAL-WEEKS-PANE () (DAY-IN-PERIOD-PANE))

(DEFMETHOD (:LABEL-FOR-DAY DAY-IN-SEVERAL-WEEKS-PANE) ()
  (FORMAT NIL "~D" DAY))

(DEFMETHOD (:STRING-FOR-MSG DAY-IN-SEVERAL-WEEKS-PANE) (MSG)
  (OR (MSG-GET MSG ':SHORT-SUBJECT)
      (MSG-GET MSG ':SUBJECT)
      (MSG-FIRST-TEXT-LINE MSG)))

(DEFFLAVOR SEVERAL-WEEKS-FRAME
	((START-DAY NIL) (START-MONTH NIL) (START-YEAR NIL)
	 (NUMBER-OF-WEEKS 4))
	(BASIC-SEVERAL-WEEKS-FRAME)
  (:DEFAULT-INIT-PLIST :SAVE-BITS ':DELAYED)
  (:INITABLE-INSTANCE-VARIABLES START-DAY START-MONTH START-YEAR)
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:HEADER-PANE-FLAVOR SEVERAL-WEEKS-FRAME) ()
  'SEVERAL-WEEKS-HEADER-PANE)

(DEFMETHOD (:INIT SEVERAL-WEEKS-FRAME :BEFORE) (IGNORE)
  (SETQ TV:CONFIGURATION (NTH (- NUMBER-OF-WEEKS 4) '(4-WEEKS 5-WEEKS 6-WEEKS))))

(DEFMETHOD (:INIT SEVERAL-WEEKS-FRAME :AFTER) (IGNORE)
  (AND START-DAY START-MONTH START-YEAR
       (SEND SELF ':SET-START-DAY-INTERNAL)))

(DEFMETHOD (:SET-START-DAY SEVERAL-WEEKS-FRAME) (DAY MONTH YEAR)
  (UNLESS (AND (EQL DAY START-DAY) (EQL MONTH START-MONTH) (EQL YEAR START-YEAR))
    (SETQ START-DAY DAY START-MONTH MONTH START-YEAR YEAR)
    (SEND SELF :SET-START-DAY-INTERNAL)))

(DEFMETHOD (:RESET-CALENDAR SEVERAL-WEEKS-FRAME) ()
  (SETQ START-DAY NIL START-MONTH NIL START-YEAR NIL))

(DEFMETHOD (:UPDATE-WINDOW-FOR-NEW-START-OF-WEEK SEVERAL-WEEKS-FRAME) ()
  (WHEN (AND START-DAY START-MONTH START-YEAR)
    (SEND SELF :SET-START-DAY-INTERNAL)
    (SEND SELF :UPDATE-MSGS-FROM-SEQUENCE *SEQUENCE* *MSG*)))

(DEFMETHOD (:SET-START-DAY-INTERNAL SEVERAL-WEEKS-FRAME) ()
  (SEND SELF ':SEND-PANE 'HEADER ':SET-START-DAY START-DAY START-MONTH START-YEAR
						 (* NUMBER-OF-WEEKS 7))
  (SEND SELF ':SETUP-INTERNAL START-DAY START-MONTH START-YEAR (* NUMBER-OF-WEEKS 7)))

(DEFFLAVOR SEVERAL-WEEKS-FRAME-PANE () (BASIC-SEVERAL-WEEKS-FRAME-PANE
					TV:PANE-MIXIN SEVERAL-WEEKS-FRAME))

(DEFFLAVOR SEVERAL-WEEKS-HEADER-PANE
	((START-DAY NIL) START-MONTH START-YEAR NUMBER-OF-DAYS)
	(BASIC-SEVERAL-WEEKS-HEADER-PANE)
  (:DEFAULT-INIT-PLIST :LABEL NIL :MORE-P NIL :BLINKER-P NIL))

(DEFMETHOD (:HEADER-STRING SEVERAL-WEEKS-HEADER-PANE) ()
  (UNLESS (NULL START-DAY)
    (MULTIPLE-VALUE-BIND (END-DAY END-MONTH END-YEAR)
	(TIME:INCREMENT-DATE START-DAY START-MONTH START-YEAR (1- NUMBER-OF-DAYS))
      (FORMAT NIL "~D ~A ~D through ~D ~A ~D"
	      START-DAY (TIME:MONTH-STRING START-MONTH) (TIME:CANONICALIZE-YEAR START-YEAR)
	      END-DAY (TIME:MONTH-STRING END-MONTH) (TIME:CANONICALIZE-YEAR END-YEAR)))))

(DEFMETHOD (:SET-START-DAY SEVERAL-WEEKS-HEADER-PANE) (DAY MONTH YEAR NDAYS)
  (SETQ START-DAY DAY START-MONTH MONTH START-YEAR YEAR NUMBER-OF-DAYS NDAYS)
  (TV:SHEET-FORCE-ACCESS (SELF)
    (SEVERAL-WEEKS-HEADER-PANE-DRAW)))

(DEFFLAVOR MONTH-FRAME
	((MONTH NIL) (YEAR NIL))
	(BASIC-SEVERAL-WEEKS-FRAME)
  (:DEFAULT-INIT-PLIST :SAVE-BITS ':DELAYED)
  (:INITABLE-INSTANCE-VARIABLES MONTH YEAR)
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:HEADER-PANE-FLAVOR MONTH-FRAME) ()
  'MONTH-HEADER-PANE)

(DEFMETHOD (:INIT MONTH-FRAME :BEFORE) (IGNORE)
  (AND MONTH YEAR (SETQ NUMBER-OF-WEEKS (TIME:MONTH-NUMBER-OF-WEEKS MONTH YEAR)
			TV:CONFIGURATION (NTH (- NUMBER-OF-WEEKS 4)
					      '(4-WEEKS 5-WEEKS 6-WEEKS)))))

(DEFMETHOD (:INIT MONTH-FRAME :AFTER) (IGNORE)
  (AND MONTH YEAR (SEND SELF ':SET-MONTH-INTERNAL)))

(DEFMETHOD (:SET-MONTH MONTH-FRAME) (NEW-MONTH NEW-YEAR)
  (UNLESS (AND (EQL MONTH NEW-MONTH) (EQL YEAR NEW-YEAR))
    (SETQ MONTH NEW-MONTH YEAR NEW-YEAR)
    (LET ((CONFIG (SEND SELF :SET-MONTH-INTERNAL)))
      (UNLESS (EQ CONFIG (SEND SELF :CONFIGURATION))
	(SEND SELF :SET-CONFIGURATION CONFIG)))))

(DEFMETHOD (:RESET-CALENDAR MONTH-FRAME) ()
  (SETQ YEAR NIL MONTH NIL))

(DEFMETHOD (:UPDATE-WINDOW-FOR-NEW-START-OF-WEEK MONTH-FRAME) ()
  (WHEN (AND YEAR MONTH)
    (LET ((CONFIG (SEND SELF :SET-MONTH-INTERNAL)))
      (UNLESS (EQ CONFIG (SEND SELF :CONFIGURATION))
	(SEND SELF :SET-CONFIGURATION CONFIG)))
    (SEND SELF :UPDATE-MSGS-FROM-SEQUENCE *SEQUENCE* *MSG*)))

(DEFMETHOD (:SET-MONTH-INTERNAL MONTH-FRAME) ()
  (SEND SELF ':SEND-PANE 'HEADER ':SET-MONTH MONTH YEAR)
  (SETQ NUMBER-OF-WEEKS (TIME:MONTH-NUMBER-OF-WEEKS MONTH YEAR
						    *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*))
  (SEND SELF ':SETUP-INTERNAL 1 MONTH YEAR (TIME:MONTH-LENGTH MONTH YEAR)))

(DEFFLAVOR MONTH-FRAME-PANE () (BASIC-SEVERAL-WEEKS-FRAME-PANE TV:PANE-MIXIN MONTH-FRAME))

(DEFFLAVOR MONTH-HEADER-PANE ((MONTH NIL) YEAR) (BASIC-SEVERAL-WEEKS-HEADER-PANE)
  (:DEFAULT-INIT-PLIST :LABEL NIL :MORE-P NIL :BLINKER-P NIL))

(DEFMETHOD (:HEADER-STRING MONTH-HEADER-PANE) ()
  (UNLESS (NULL MONTH)
    (FORMAT NIL "~A ~D" (TIME:MONTH-STRING MONTH) (TIME:CANONICALIZE-YEAR YEAR))))

(DEFMETHOD (:SET-MONTH MONTH-HEADER-PANE) (NEW-MONTH NEW-YEAR)
  (SETQ MONTH NEW-MONTH YEAR NEW-YEAR)
  (TV:SHEET-FORCE-ACCESS (SELF)
    (SEVERAL-WEEKS-HEADER-PANE-DRAW)))

(DEFFLAVOR WEEK-FRAME
	((START-DAY NIL) (START-MONTH NIL) (START-YEAR NIL))
	(DAY-SUPERIOR-FRAME-MIXIN TV:BORDERED-CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER)
  (:DEFAULT-INIT-PLIST :SAVE-BITS ':DELAYED)
  (:INITABLE-INSTANCE-VARIABLES START-DAY START-MONTH START-YEAR)
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:INIT WEEK-FRAME :BEFORE) (IGNORE)
  (MULTIPLE-VALUE (DAYS-ARRAY TV:PANES)
    (MAKE-DAYS-ARRAY-WITH-PANES 7))
  (SETQ TV:PANES (LOOP FOR I FROM 0 BELOW 7
		       AS PANE = (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I)
		       COLLECT `(,PANE DAY-IN-WEEK-PANE)))
  (SETQ TV:CONSTRAINTS (LOOP FOR I FROM 0 BELOW 7
			     AS PANE = (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I)
			     COLLECT PANE INTO PANES
			     COLLECT `(,PANE :EVEN)
			     INTO CONSTRS
			     FINALLY (RETURN `((ONLY . (,PANES ,CONSTRS)))))))

(DEFMETHOD (:INIT WEEK-FRAME :AFTER) (IGNORE)
  (AND START-DAY START-MONTH START-YEAR
       (SEND SELF ':SET-WEEK-INTERNAL)))

(DEFMETHOD (:SET-WEEK WEEK-FRAME) (NEW-START-DAY NEW-START-MONTH NEW-START-YEAR)
  (UNLESS (AND (EQL NEW-START-DAY START-DAY) (EQL NEW-START-MONTH START-MONTH)
	       (EQL NEW-START-YEAR START-YEAR))
    (SETQ START-DAY NEW-START-DAY START-MONTH NEW-START-MONTH START-YEAR NEW-START-YEAR)
    (SEND SELF :SET-WEEK-INTERNAL)))

(DEFMETHOD (:SET-WEEK-INTERNAL WEEK-FRAME) ()
  (LOOP FOR I FROM 0 BELOW 7
	WITH DAY = START-DAY AND MONTH = START-MONTH AND YEAR = START-YEAR
	DO (SETF (DAYS-ARRAY-DATE DAYS-ARRAY I)
		 `(,(TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR)
		   ,DAY ,MONTH ,(TIME:CANONICALIZE-YEAR YEAR)))
	AS ITEMS = (DAYS-ARRAY-MSGS DAYS-ARRAY I)
	DO (SETF (FILL-POINTER ITEMS) 0)
	   (LET ((HOLIDAYS (TIME:HOLIDAYS-FOR-DAY DAY MONTH YEAR)))
	     (DOLIST (HOL HOLIDAYS)
	       (ARRAY-PUSH-EXTEND
		 ITEMS (GET HOL 'TIME:HOLIDAY-PRETTY-NAME))))
	AS PANE = (SEND SELF ':GET-PANE (DAYS-ARRAY-PANE-NAME DAYS-ARRAY I))
	DO (SEND PANE ':SET-DAY DAY MONTH YEAR)
	   (SEND PANE ':SET-ITEMS ITEMS)
	   (SEND PANE ':DECIDE-IF-SCROLLING-NECESSARY)
	   (MULTIPLE-VALUE (DAY MONTH YEAR)
	     (TIME:INCREMENT-DATE DAY MONTH YEAR))))

(DEFMETHOD (:RESET-CALENDAR WEEK-FRAME) ()
  (SETQ START-DAY NIL START-MONTH NIL START-YEAR NIL))

(DEFFLAVOR WEEK-FRAME-PANE () (TV:PANE-MIXIN WEEK-FRAME))

(DEFFLAVOR DAY-IN-WEEK-PANE () (DAY-IN-PERIOD-PANE))

(DEFMETHOD (:LABEL-FOR-DAY DAY-IN-WEEK-PANE) ()
  (FORMAT NIL "~A, ~D ~A ~D"
	  (TIME:DAY-OF-THE-WEEK-STRING (TIME:DATE-DAY-OF-THE-WEEK DAY MONTH YEAR))
	  DAY (TIME:MONTH-STRING MONTH) (TIME:CANONICALIZE-YEAR YEAR)))

(DEFMETHOD (:STRING-FOR-MSG DAY-IN-WEEK-PANE) (MSG)
  (MSG-SUMMARY-LINE MSG))

(SCL:DEFINE-PRESENTATION-TYPE MONTH ()
   :PARSER ((STREAM &KEY DEFAULT)
	    (SI:WITH-PARSE-FERROR (TIME:PARSE-ERROR)
	      (LET* ((MONTH-STRING (DW:READ-STANDARD-TOKEN STREAM))
		     (SOMETHING-TYPED (PLUSP (STRING-LENGTH MONTH-STRING))))
		(MULTIPLE-VALUE-BIND (TIME IGNORE IGNORE)
		    (COND (SOMETHING-TYPED
			   (TIME:PARSE-UNIVERSAL-TIME (STRING-APPEND "1 " MONTH-STRING)
						      0 NIL T NIL T))
			  (DEFAULT
			   (IF (LISTP DEFAULT)
			       (TIME:ENCODE-UNIVERSAL-TIME 0 0 0 1
							   (FIRST DEFAULT) (SECOND DEFAULT))
			       DEFAULT))
			  (T
			   (LET ((TIME:*TIME-BEING-PARSED* ""))
			     (DECLARE (SPECIAL TIME:*TIME-BEING-PARSED*))
			     (TIME:BARF "No month was specified."))))
		  (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE IGNORE MONTH YEAR)
		      (TIME:DECODE-UNIVERSAL-TIME TIME)
		    `(,MONTH ,YEAR))))))
   :PRINTER ((TIME STREAM)
	     (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE IGNORE MONTH YEAR)
		 (IF (LISTP TIME)
		     (VALUES NIL NIL NIL NIL (FIRST TIME) (SECOND TIME))
		   (TIME:DECODE-UNIVERSAL-TIME TIME))
	       (FORMAT STREAM "~A ~D" (TIME:MONTH-STRING MONTH)
				      (TIME:CANONICALIZE-YEAR YEAR))))
   :DESCRIPTION "a month")

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SET-MONTH-CONFIGURATION
						  (MONTH
						    "Select configuration for the month of"
						    *ZMAIL-COMTAB* :GESTURE :SELECT)
						  (MONTH)
  (DESTRUCTURING-BIND (MONTH YEAR) MONTH
    `(SET-MONTH-CONFIGURATION ,MONTH ,YEAR)))
(DEFUN SET-MONTH-CONFIGURATION (MONTH YEAR)
  (SEND *MONTH-WINDOW* :SET-MONTH MONTH YEAR)
  (SET-MAIN-WINDOW-CONFIGURATION :MONTH)
  (POST-SETUP-FOR-CALENDAR-CONFIGURATION :MONTH))

(DEFUN SETUP-FOR-CALENDAR-CONFIGURATION (CONFIG)
  (LABELS ((ACCEPT-DATE (PROMPT DAY MONTH YEAR)
	     (LET* ((DEFAULT-DATE (TIME:ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR))
		    (DATE (TYPEIN-LINE-ACCEPT '((TIME:UNIVERSAL-TIME) :DESCRIPTION "a date")
					      :PROMPT (FORMAT NIL "~A [default ~D ~A ~D]"
							      PROMPT DAY
							      (TIME:MONTH-STRING MONTH :SHORT)
							      (TIME:CANONICALIZE-YEAR YEAR))
					      :DEFAULT DEFAULT-DATE
					      :DISPLAY-DEFAULT NIL)))
	       (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE DAY MONTH YEAR)
		   (TIME:DECODE-UNIVERSAL-TIME DATE)
		 (VALUES DAY MONTH YEAR)))))
    (SELECTQ CONFIG
      (:YEAR
       (MULTIPLE-VALUE-BIND (NIL NIL NIL NIL NIL YEAR)
	   (TIME:GET-TIME)
	 (SELECTQ *ZMAIL-COMMAND-BUTTON*
	   (:LEFT)
	   (:MIDDLE (INCF YEAR))
	   ((:RIGHT :KBD)
	    (LET* ((DEFAULT-YEAR (TIME:CANONICALIZE-YEAR YEAR))
		   (NEW-YEAR (TYPEIN-LINE-ACCEPT '((OR ((CL:INTEGER 0. 99.))
						       ((CL:INTEGER 1900. 2100.)))
						   :DESCRIPTION
						   "a year between 1900 and 2100, inclusive")
						 :PROMPT (FORMAT NIL
								 "Show what year [default ~D]"
								 DEFAULT-YEAR)
						 :DEFAULT DEFAULT-YEAR
						 :DISPLAY-DEFAULT NIL)))
	      (SETQ YEAR (IF ( NEW-YEAR 99.) NEW-YEAR (- NEW-YEAR 1900.))))))
	 (SEND *YEAR-WINDOW* :SET-YEAR YEAR)))
      (:MONTH
       (LET ((TIME (TIME:GET-UNIVERSAL-TIME)))
	 (MULTIPLE-VALUE-BIND (NIL NIL NIL NIL MONTH YEAR)
	     (TIME:DECODE-UNIVERSAL-TIME TIME)
	   (SELECTQ *ZMAIL-COMMAND-BUTTON*
	     (:LEFT)
	     (:MIDDLE
	      (INCF MONTH)
	      (WHEN (> MONTH 12.) (SETQ MONTH 1 YEAR (1+ YEAR))))
	     ((:RIGHT :KBD)
	      (LET ((MONTH-AND-YEAR (TYPEIN-LINE-ACCEPT 'MONTH
							:PROMPT "Show what month"
							:DEFAULT TIME)))
		(SETQ MONTH (FIRST MONTH-AND-YEAR)
		      YEAR (SECOND MONTH-AND-YEAR)))))
	   (SEND *MONTH-WINDOW* :SET-MONTH MONTH YEAR))))
      (:FOUR-WEEKS
       (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR DAY-OF-THE-WEEK)
	   (TIME:GET-TIME)
	 (UNLESS *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
	   (SETQ DAY-OF-THE-WEEK (\ (1+ DAY-OF-THE-WEEK) 7)))
	 (MULTIPLE-VALUE (DAY MONTH YEAR)
	   (TIME:INCREMENT-DATE DAY MONTH YEAR (- DAY-OF-THE-WEEK)))
	 (SELECTQ *ZMAIL-COMMAND-BUTTON*
	   (:LEFT)
	   (:MIDDLE
	    (MULTIPLE-VALUE (DAY MONTH YEAR)
	      (TIME:INCREMENT-DATE DAY MONTH YEAR -21.)))
	   ((:RIGHT :KBD)
	    (MULTIPLE-VALUE (DAY MONTH YEAR)
	      (ACCEPT-DATE "Show four weeks starting" DAY MONTH YEAR))))
	 (SEND *FOUR-WEEKS-WINDOW* :SET-START-DAY DAY MONTH YEAR)))
      (:WEEK
       (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH YEAR DAY-OF-THE-WEEK)
	   (TIME:GET-TIME)
	 (UNLESS *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY*
	   (SETQ DAY-OF-THE-WEEK (\ (1+ DAY-OF-THE-WEEK) 7)))
	 (MULTIPLE-VALUE (DAY MONTH YEAR)
	   (TIME:INCREMENT-DATE DAY MONTH YEAR (- DAY-OF-THE-WEEK)))
	 (SELECTQ *ZMAIL-COMMAND-BUTTON*
	   (:LEFT)
	   (:MIDDLE
	    (MULTIPLE-VALUE (DAY MONTH YEAR)
	      (TIME:INCREMENT-DATE DAY MONTH YEAR 7)))
	   ((:RIGHT :KBD)
	    (MULTIPLE-VALUE (DAY MONTH YEAR)
	      (ACCEPT-DATE "Show week starting" DAY MONTH YEAR))))
	 (SEND *WEEK-WINDOW* :SET-WEEK DAY MONTH YEAR)))
       )))

(DEFUN POST-SETUP-FOR-CALENDAR-CONFIGURATION (CONFIG)
  (LET ((WINDOW (SELECTQ CONFIG 
		  (:YEAR *YEAR-WINDOW*)
		  (:MONTH *MONTH-WINDOW*)
		  (:FOUR-WEEKS *FOUR-WEEKS-WINDOW*)
		  (:WEEK *WEEK-WINDOW*))))
    (WHEN WINDOW
      (SEND WINDOW ':UPDATE-MSGS-FROM-SEQUENCE *SEQUENCE* *MSG*))))

(DEFUN MAYBE-REDISPLAY-CALENDAR-MSG (MSG)
  (LET ((WINDOW (SELECTQ *WINDOW-CONFIGURATION*
		  (:YEAR *YEAR-WINDOW*)
		  (:MONTH *MONTH-WINDOW*)
		  (:FOUR-WEEKS *FOUR-WEEKS-WINDOW*)
		  (:WEEK *WEEK-WINDOW*))))
  (WHEN WINDOW
    (SEND WINDOW ':NEED-TO-REDISPLAY-MSG MSG))))

(DEFUN MAYBE-REDISPLAY-CALENDAR-SEQUENCE ()
  (POST-SETUP-FOR-CALENDAR-CONFIGURATION *WINDOW-CONFIGURATION*))

;;; Invoked by the profile editor if *CALENDAR-MODE-WEEK-STARTS-ON-MONDAY* has changed to
;;; force "redrawing of the appropriate windows
(DEFMETHOD (:UPDATE-CALENDAR-WINDOWS-FOR-NEW-START-OF-WEEK ZMAIL-FRAME) ()
  (SEND *YEAR-WINDOW* :UPDATE-WINDOW-FOR-NEW-START-OF-WEEK)
  (SEND *MONTH-WINDOW* :UPDATE-WINDOW-FOR-NEW-START-OF-WEEK)
  (SEND *FOUR-WEEKS-WINDOW* :UPDATE-WINDOW-FOR-NEW-START-OF-WEEK))
1;;; Force all calendar windows to be completely recomputed --
;;;    Intended only for use by patches which cause major upheavals to the calendar system.
0(DEFMETHOD (:RECOMPUTE-CALENDAR-WINDOWS ZMAIL-FRAME) ()
  (LET ((YEAR (SEND *YEAR-WINDOW* :YEAR)))
    (SEND *YEAR-WINDOW* :RESET-CALENDAR)
    (WHEN YEAR
      (SEND *YEAR-WINDOW* :SET-YEAR YEAR)))
  (LET ((YEAR (SEND *MONTH-WINDOW* :YEAR))
	(MONTH (SEND *MONTH-WINDOW* :MONTH)))
    (SEND *MONTH-WINDOW* :RESET-CALENDAR)
    (WHEN (AND YEAR MONTH)
      (SEND *MONTH-WINDOW* :SET-MONTH MONTH YEAR)))
  (LET ((YEAR (SEND *FOUR-WEEKS-WINDOW* :START-YEAR))
	(MONTH (SEND *FOUR-WEEKS-WINDOW* :START-MONTH))
	(DAY (SEND *FOUR-WEEKS-WINDOW* :START-DAY)))
    (SEND *FOUR-WEEKS-WINDOW* :RESET-CALENDAR)
    (WHEN (AND YEAR MONTH DAY)
      (SEND *FOUR-WEEKS-WINDOW* :SET-START-DAY DAY MONTH YEAR)))
  (LET ((YEAR (SEND *WEEK-WINDOW* :START-YEAR))
	(MONTH (SEND *WEEK-WINDOW* :START-MONTH))
	(DAY (SEND *WEEK-WINDOW* :START-DAY)))
    (SEND *WEEK-WINDOW* :RESET-CALENDAR)
    (WHEN (AND YEAR MONTH DAY)
      (SEND *WEEK-WINDOW* :SET-WEEK DAY MONTH YEAR))))
