;;; Lisp Machine mail reader -*- Base: 8; Mode: LISP; Package: ZWEI -*-
;;; Digest mailing list handling
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;; Making digests

(DEFINE-TEMPLATE-TYPE DIGEST-TEMPLATE :DIGEST () (MSG-TEMPLATE-MIXIN COMPOSITION-TEMPLATE)
  )

(DEFMETHOD (:EXPANSION-KEYWORD DIGEST-TEMPLATE :PREAMBLE)
	   (PLIST FORMAT-STRING &REST FORMAT-ARGS)
  (DECLARE (SPECIAL PLIST))
  (LET ((TEXT (WITH-OUTPUT-TO-STRING (STREAM)
		(LEXPR-FUNCALL #'FORMAT STREAM FORMAT-STRING (LOOP FOR ARG IN FORMAT-ARGS
								   COLLECT (EVAL ARG)))
		(DOTIMES (IGNORE 70.) (SEND STREAM ':TYO #/-))
		(SEND STREAM ':TYO #\CR))))
    (SEND SELF ':ADD-TEXT PLIST TEXT)))

(DEFMETHOD (:EXPANSION-KEYWORD DIGEST-TEMPLATE :POSTAMBLE)
	   (PLIST FORMAT-STRING &REST FORMAT-ARGS)
  (DECLARE (SPECIAL PLIST))
  (LET ((TEXT (WITH-OUTPUT-TO-STRING (STREAM)
		(LEXPR-FUNCALL #'FORMAT STREAM FORMAT-STRING (LOOP FOR ARG IN FORMAT-ARGS
								   COLLECT (EVAL ARG)))
		(LET ((WIDTH (SEND STREAM ':READ-CURSORPOS)))
		  (SEND STREAM ':TYO #\CR)
		  (DOTIMES (IGNORE WIDTH) (SEND STREAM ':TYO #/*)))
		(SEND STREAM ':TYO #\CR))))
    (SEND SELF ':ADD-TEXT PLIST TEXT)))

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-CONSTRUCT-DIGEST
  "Compose a digest message from all the messages in the current sequence."
  ()
  (LET ((TEMPLATE (CHOOSE-TEMPLATE-FOR-COMMAND ':DIGEST NIL "Digest template")))
    (COMPOSE-FROM-TEMPLATE TEMPLATE ':MSGS (LIST-SEQUENCE *SEQUENCE*))))

(DEFTEMPLATE NORMAL-DIGEST-INCLUSION-TEMPLATE
  (:TYPE :REFORMAT)
  (:HEADERS-FROM-ORIGINAL-EXCEPT :VIA :SENDER :CC :TO :MAIL-FROM :MESSAGE-ID
				 :IN-REPLY-TO :RECEIVED :RETURN-PATH :FCC
				 :RESENT-TO :RESENT-FROM :RESENT-DATE :RESET-MESSAGE-ID))

(FORMAT:DEFFORMAT DIGEST-TOPICS (:NO-ARG) (IGNORE)
  (DECLARE (SPECIAL PLIST))
  (LET ((SUBJECTS (SI:ELIMINATE-DUPLICATES (LOOP FOR MSG IN (GET PLIST ':MSGS)
						 AS SUBJECT = (MSG-GET MSG ':SUBJECT)
						 WHEN (LISTP SUBJECT)
						 APPEND SUBJECT
						 ELSE WHEN SUBJECT COLLECT SUBJECT)
					   #'STRING-EQUAL)))
    (DOLIST (SUBJECT SUBJECTS)
      (SEND FORMAT:*FORMAT-OUTPUT* ':STRING-OUT SUBJECT)
      (SEND FORMAT:*FORMAT-OUTPUT* ':TYO #\CR))))

#|
(DEFTEMPLATE INFO-MAC-ARCHIVES-TEMPLATE
  (:TYPE :DIGEST)
  (:NAME "Info-Mac-Archives")
  (:AVAILABLE-FOR-COMMANDS :DIGEST)
  (:HEADER-FIELD :FROM "The Moderators <Info-Mac-Request@SUMEX-AIM.Stanford.EDU>")
  (:HEADER-FIELD :REPLY-TO "Info-Mac@SUMEX-AIM.Stanford.EDU")
  (:HEADER-FIELD :SUBJECT "Info-Mac-Archives Digest V1 #?")
  (:PREAMBLE "Info-Mac-Archives Digest    ~\DATIME\       Volume 1 : Issue ?

Today's Topics:

      ~~\ZWEI:DIGEST-TOPICS\~
The Info-Mac newsgroup is moderated by Bill Lipa.

The Info-Mac archives are available (by using FTP, account anonymous,
any password) in the info-mac directory on sumex-aim.stanford.edu
[36.44.0.6].  Help files and indices are in info-machelp.

Please send articles and binaries to info-mac@sumex-aim.stanford.edu.
Send administrative mail to info-mac-request@sumex-aim.stanford.edu.
")
  (:TEXT-FROM-MSGS :TEMPLATE 'NORMAL-DIGEST-INCLUSION-TEMPLATE
		   :BEGIN-LINE "
"
		   :SEPARATOR-LINE "
------------------------------

"
		   :END-LINE "
------------------------------

")
  (:POSTAMBLE "End of Info-Mac-Archives Digest"))
|#

;;;; Exploding digests

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-UNDIGESTIFY
  "Make a lot of little messages out of this one digest message."
  ()
  (UNDIGESTIFY-MSG *MSG*)
  DIS-TEXT)

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-UNDIGESTIFY-ALL-MSGS
  "Split all digests in this sequence into their component messages."
				()
  (UNDIGESTIFY-SEQUENCE *SEQUENCE*)
  DIS-TEXT)

(DEFINE-ZMAIL-GLOBAL *UNDIGESTIFY-INTO-COLLECTION* NIL)

(DEFUN UNDIGESTIFY-MSG (MSG &OPTIONAL (INTO-COLLECTION *UNDIGESTIFY-INTO-COLLECTION*))
  (MULTIPLE-VALUE-BIND (SUCCESS NAME TO START-BP END-BP MATCH-P)
      (DIGEST-MSG-P MSG)
    (UNLESS SUCCESS				;Find out what went wrong
      (UNLESS NAME
	(BARF "This message does not appear to be a digest."))
      (UNLESS MATCH-P
	(BARF "This message claims to be a ~A digest but is not properly formatted." NAME))
      (UNLESS START-BP
	(BARF "Cannot find the start of the actual messages in this ~A digest." NAME))
      (UNLESS END-BP
	(BARF "Cannot find the end of the actual messages in this ~A digest." NAME)))
    (LET ((MSGS (LOOP FOR START-BP = START-BP THEN BP
		      AS BP = (SEARCH START-BP "
------------------------------
" NIL NIL NIL END-BP)
		      AS MSG-START-BP = (FORWARD-OVER *WHITESPACE-CHARS* START-BP)
		      AS MSG-END-BP = (IF BP
					  (IBP (BACKWARD-OVER
						 *WHITESPACE-CHARS* (BEG-LINE BP -1)))
					END-BP)
		      WHEN (BP-< MSG-START-BP MSG-END-BP)
		      COLLECT
			(MAKE-NEW-MSG-FROM-INTERVAL MSG-START-BP MSG-END-BP T)
		      WHILE BP)))
      (WITH-MSG-REDISPLAY-DELAYED
	(ZMAIL-UNDO-SAVE-OR-MULTIPLE 'UNDO-UNDIGESTIFY :MSG MSG :UNDIGESTED-MSGS MSGS)
	(WHEN INTO-COLLECTION
	  (LET ((COLLECTION (GET-RECYCLED-COLLECTION (FORMAT NIL "~A digest" NAME))))
	    (SEND COLLECTION :ADD-MSG MSG)
	    (SELECT-SEQUENCE COLLECTION)))
	(LET ((BUFFER (MSG-BUFFER MSG)))
	  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; We must be certain that any pending input is completed before inserting the
0	  1;; undigested messages into the mail buffer.  Otherwise, we'll could cause new
0	  1;; mail to be parsed improperly as the background request's range will be
0	  1;; invalidated.
0	  (COMPLETE-MAIL-FILE-IO BUFFER :IGNORE-SAVES T)
	  (LET* ((COLLECTION (AND (NEQ BUFFER *SEQUENCE*) *SEQUENCE*))
		 (BUFFER-INDEX (LOCATE-MSG-IN-SEQUENCE MSG BUFFER))
		 (COLLECTION-INDEX (AND COLLECTION (MSG-IN-SEQUENCE-P MSG COLLECTION))))
	    (DOLIST (MSG MSGS)
	      (INCF BUFFER-INDEX)
	      (SEND BUFFER :ADD-MSG MSG BUFFER-INDEX)
	      (WHEN COLLECTION-INDEX
		(INCF COLLECTION-INDEX)
		(SEND COLLECTION :ADD-MSG MSG COLLECTION-INDEX))
	      (UPDATE-MSG-CHARACTER-TYPE-MAPPINGS MSG)
	      (CONDITION-CASE (WARN)
		   (ADD-HEADER-TO-MSG MSG :TO TO)
		 (BARF (TYPEIN-LINE "Warning: ~A~%" WARN))))
	    (ADD-HEADER-TO-MSG MSG :REFERENCES
			       (LOOP FOR MSG IN MSGS COLLECT (CDAR (GET-MSG-IDS MSG))))
	    (SEQUENCE-REARRANGED BUFFER)
	    (WHEN COLLECTION
	      (SEQUENCE-REARRANGED COLLECTION))))))))

(DEFUN UNDIGESTIFY-SEQUENCE (SEQUENCE)
  (CHECK-FOR-TOO-MANY-MSGS "undigestify as many as" SEQUENCE)
  (LET ((N-DIGESTS 0)
	(SEQUENCE-MSGS (CL:COERCE (SEQUENCE-ARRAY SEQUENCE) 'LIST)))
    (WITH-MULTIPLE-UNDO (UNDO-MULTIPLE-UNDIGESTIFY)
      (TV:DOLIST-NOTING-PROGRESS (MSG SEQUENCE-MSGS
				      (FORMAT NIL "Undigestifying messages in ~A" SEQUENCE))
	(WHEN (DIGEST-MSG-P MSG)
	  (INCF N-DIGESTS)
	  (UNDIGESTIFY-MSG MSG))))
    (IF (= N-DIGESTS 0)
	(BARF "No digests found in ~A." SEQUENCE)
	(TYPEIN-LINE "~D digest~:P found in ~A." N-DIGESTS SEQUENCE))))

(DEFUN DIGEST-MSG-P (MSG)
  (DECLARE (VALUES SUCCESS NAME TO START-BP END-BP MATCH-P))
  (LET* ((TO (MSG-GET MSG :TO))
	 (SUBJECT (MSG-GET MSG :SUBJECT))
	 (NAME (OR (WHEN SUBJECT
		     (LET* ((SUBJECT (IF (LISTP SUBJECT) (FIRST SUBJECT) SUBJECT))
			    (DIGEST-INDEX (STRING-SEARCH " Digest" SUBJECT)))
		       (WHEN (AND DIGEST-INDEX (PLUSP DIGEST-INDEX))
			 (SUBSTRING SUBJECT 0 DIGEST-INDEX))))
		   (MULTIPLE-VALUE-BIND (IGNORE TO IGNORE)
		       (CL:GET-PROPERTIES (FIRST TO) '(:DISTRIBUTION-LIST
							:PERSONAL-NAME :NAME))
		     TO))))
    (LET ((REPLY-TO (MSG-GET MSG :REPLY-TO)))
      (WHEN REPLY-TO
	(SETQ TO REPLY-TO)))
    (MULTIPLE-VALUE-BIND (START-BP END-BP)
	(MSG-BODY-INTERVAL MSG)
      (SETQ START-BP (FORWARD-OVER *WHITESPACE-CHARS* START-BP END-BP))
      (LET ((MATCH-P (LOOKING-AT START-BP NAME)))
	(LET* ((BP (SEARCH START-BP
			   "-----------------------------------------------------------------"
			   NIL NIL NIL END-BP))
	       (LINE (WHEN BP (BP-LINE BP))))
	  (WHEN (AND LINE
		     (SETF (BP-INDEX BP) 0)
		     (SETQ BP (FORWARD-OVER '(#\Space #\Tab #\Back-Space) BP END-BP)
			   BP (FORWARD-OVER '(#\-) BP END-BP)
			   BP (FORWARD-OVER '(#\Space #\Tab #\Back-Space) BP END-BP))
		     (= (BP-INDEX BP) (LINE-LENGTH LINE)))
	    (SETQ START-BP (CREATE-BP (LINE-NEXT (BP-LINE BP)) 0))))
	(SETQ END-BP (SEARCH END-BP "
------------------------------
" T NIL NIL START-BP))
	(VALUES (AND NAME START-BP END-BP MATCH-P)
		NAME TO START-BP END-BP MATCH-P)))))

(DEFUN MAKE-NEW-MSG-FROM-INTERVAL (START-BP &OPTIONAL END-BP IN-ORDER-P)
  (LET ((MSG (MAKE-EMPTY-MSG)))
    (INSERT-INTERVAL (MSG-END-BP MSG) START-BP END-BP IN-ORDER-P)
    MSG))
