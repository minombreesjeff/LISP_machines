;;; -*- Base: 10; Mode: LISP; Syntax: Zetalisp -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; This file contains a bunch of different configurations for a single
;;; constraint frame.  Compile the buffer, and then run the function
;;; TEST with no arguments.  [Hint:  Call it from a small Lisp Listener
;;; so that when you create the frame, it doesn't have to overlap the
;;; Lisp Listener.]


;;; The actual flavor definition.  You can make your defflavor form be
;;; short by making the constraint frame language be the value of some
;;; variable.

(DEFFLAVOR TEST-FRAME ()
	   (TV:BORDERED-CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER)
  :SETTABLE-INSTANCE-VARIABLES
  (:DEFAULT-INIT-PLIST
   :PANES
	`((DISPLAY-PANE TV:WINDOW-PANE 
			:BLINKER-P NIL
			:LABEL "Display pane")
	  (PICTURE-MENU-PANE TV:COMMAND-MENU-PANE
				 :LABEL "Picture Menu Operations"
				 :ITEM-LIST NIL)
	  (OTHER-MENU-PANE TV:COMMAND-MENU-PANE
			    :LABEL "Other Menu Operations"
			    :ITEM-LIST NIL)
	  (INPUT-PANE TV:WINDOW-PANE
		      :LABEL "Input pane")
	  (OTHER-DISPLAY-PANE TV:WINDOW-PANE
			    :LABEL "Other display pane"
			    :BLINKER-P NIL))
	:CONFIGURATIONS                  
	
	`((SIMPLEST (:LAYOUT (SIMPLEST :COLUMN DISPLAY-PANE INPUT-PANE))
		    (:SIZES (SIMPLEST (DISPLAY-PANE :EVEN) (INPUT-PANE :EVEN))))

	  (LESS-SIMPLE (:LAYOUT (LESS-SIMPLE :COLUMN DISPLAY-PANE INPUT-PANE))
		       (:SIZES (LESS-SIMPLE (DISPLAY-PANE 0.66)
					    :THEN
					    (INPUT-PANE :EVEN))))

	  (EVEN-SPLIT (:LAYOUT (EVEN-SPLIT :COLUMN
					   OTHER-MENU-PANE
					   OTHER-DISPLAY-PANE
					   PICTURE-MENU-PANE))
		      (:SIZES (EVEN-SPLIT (OTHER-MENU-PANE :EVEN)
					  (PICTURE-MENU-PANE :EVEN)
					  (OTHER-DISPLAY-PANE :EVEN))))

	  (UNEVEN-SPLIT (:LAYOUT (UNEVEN-SPLIT :COLUMN
					       OTHER-MENU-PANE
					       OTHER-DISPLAY-PANE
					       PICTURE-MENU-PANE))
			(:SIZES (UNEVEN-SPLIT (OTHER-DISPLAY-PANE 0.5)
					      :THEN
					      (OTHER-MENU-PANE :EVEN)
					      (PICTURE-MENU-PANE :EVEN))))

	  (BUGGY (:LAYOUT (BUGGY :COLUMN OTHER-MENU-PANE PICTURE-MENU-PANE OTHER-DISPLAY-PANE))
		 (:SIZES (BUGGY (OTHER-MENU-PANE 0.33)
				:THEN
				(PICTURE-MENU-PANE 0.33)
				:THEN
				(OTHER-DISPLAY-PANE 0.33))))

	  (1-DUMMY-PANE (:LAYOUT (1-DUMMY-PANE :COLUMN MENU-PANES DISPLAY-PANE)
				 (MENU-PANES :ROW
					     OTHER-MENU-PANE
					     OTHER-DISPLAY-PANE
					     PICTURE-MENU-PANE))
			(:SIZES (MENU-PANES (OTHER-MENU-PANE :EVEN)
					    (PICTURE-MENU-PANE :EVEN)
					    (OTHER-DISPLAY-PANE :EVEN))
				(1-DUMMY-PANE (MENU-PANES 0.25)
					      :THEN
					      (DISPLAY-PANE :EVEN))))

	  (2-DUMMY-PANES (:LAYOUT (2-DUMMY-PANES :COLUMN MENU-PANES DISPLAY-GROUP)
				  (MENU-PANES :ROW
					      OTHER-MENU-PANE
					      OTHER-DISPLAY-PANE
					      PICTURE-MENU-PANE)
				  (DISPLAY-GROUP :ROW DISPLAY-PANE INPUT-PANE))
			 (:SIZES (MENU-PANES (OTHER-DISPLAY-PANE :EVEN)
					     (PICTURE-MENU-PANE :EVEN)
					     (OTHER-MENU-PANE :EVEN))
				 (DISPLAY-GROUP (INPUT-PANE 0.4)
						:THEN
						(DISPLAY-PANE :EVEN))
				 (2-DUMMY-PANES (MENU-PANES 0.25)
						:THEN
						(DISPLAY-GROUP :EVEN))))

	  (REAL-1 (:LAYOUT (REAL-1 :COLUMN TOP-THING BOTTOM-THING)
			   (BOTTOM-THING :ROW INPUT-PANE OTHER-DISPLAY-PANE)
			   (TOP-THING :ROW DISPLAY-PANE MENU-PANES)
			   (MENU-PANES :COLUMN PICTURE-MENU-PANE OTHER-MENU-PANE))
		  (:SIZES (BOTTOM-THING (INPUT-PANE 0.75) :THEN (OTHER-DISPLAY-PANE :EVEN))
			  (MENU-PANES (PICTURE-MENU-PANE :EVEN) (OTHER-MENU-PANE :EVEN))
			  (TOP-THING (DISPLAY-PANE 0.75) :THEN (MENU-PANES :EVEN))
			  (REAL-1 (BOTTOM-THING 0.25) :THEN (TOP-THING :EVEN))))

	  (REAL-2 (:LAYOUT (REAL-2 :COLUMN MENU-PANES DISPLAY-PANE INPUT-PANE)
			   (MENU-PANES :ROW OTHER-MENU-PANE PICTURE-MENU-PANE OTHER-DISPLAY-PANE))
		  (:SIZES (MENU-PANES (OTHER-MENU-PANE :EVEN)
				      (PICTURE-MENU-PANE :EVEN)
				      (OTHER-DISPLAY-PANE :EVEN))
			  (REAL-2 (INPUT-PANE 0.1)
				  :THEN
				  (MENU-PANES 0.25)
				  :THEN
				  (DISPLAY-PANE :EVEN))))

	  (REAL-3 (:LAYOUT (REAL-3 :COLUMN DISPLAY-GROUP INPUT-PANE)
			   (DISPLAY-GROUP :ROW DISPLAY-PANE MENU-PANES)
			   (MENU-PANES :COLUMN
				       OTHER-MENU-PANE
				       PICTURE-MENU-PANE
				       OTHER-DISPLAY-PANE))
		  (:SIZES (MENU-PANES (OTHER-MENU-PANE :EVEN)
				      (PICTURE-MENU-PANE :EVEN)
				      (OTHER-DISPLAY-PANE :EVEN))
			  (DISPLAY-GROUP (DISPLAY-PANE 0.75) :THEN (MENU-PANES :EVEN))
			  (REAL-3 (INPUT-PANE 0.12) :THEN (DISPLAY-GROUP :EVEN))))

	  (BLANKS (:LAYOUT (BLANKS :COLUMN MENU-PANES DISPLAY-PANE)
			   (MENU-PANES :ROW BLANK-PANE-1 BLANK-PANE-2 BLANK-PANE-3)
			   (BLANK-PANE-1 :FILL :BLACK)
			   (BLANK-PANE-2 :FILL :WHITE)
			   (BLANK-PANE-3 :FILL ,TV:33%-GRAY))
		  (:SIZES (MENU-PANES (BLANK-PANE-1 :EVEN)
				      (BLANK-PANE-2 :EVEN)
				      (BLANK-PANE-3 :EVEN))
		   (BLANKS (MENU-PANES 0.25) :THEN (DISPLAY-PANE :EVEN))))

	  ;; The following configurations don't have pictures in the
	  ;; Intermediate Lisp Programming course notes yet.
	  
	  (EVEN-ROW (:LAYOUT (EVEN-ROW :ROW INPUT-PANE OTHER-DISPLAY-PANE))
		    (:SIZES (EVEN-ROW (INPUT-PANE :EVEN)
				      (OTHER-DISPLAY-PANE :EVEN))))

	  (UNEVEN-ROW (:LAYOUT (UNEVEN-ROW :ROW INPUT-PANE OTHER-DISPLAY-PANE))
		      (:SIZES (UNEVEN-ROW (INPUT-PANE .4)
					  :THEN
					  (OTHER-DISPLAY-PANE :EVEN))))

	  (FIXED-SIZE-PANE-1 (:LAYOUT (FIXED-SIZE-PANE-1 :COLUMN
							 DISPLAY-PANE
							 INPUT-PANE))
			     (:SIZES (FIXED-SIZE-PANE-1 (INPUT-PANE 4 :LINES)
							:THEN
							(DISPLAY-PANE :EVEN))))
	  
	  (FIXED-SIZE-PANE-2 (:LAYOUT (FIXED-SIZE-PANE-2 :COLUMN
							 DISPLAY-PANE
							 INPUT-PANE))
			     (:SIZES (FIXED-SIZE-PANE-2 (INPUT-PANE 100.)
							:THEN
							(DISPLAY-PANE :EVEN))))

	  (FIXED-SIZE-PANE-3 (:LAYOUT (FIXED-SIZE-PANE-3 :ROW
							 INPUT-PANE
							 DISPLAY-PANE))
			     (:SIZES (FIXED-SIZE-PANE-3 (INPUT-PANE 30. :CHARACTERS)
							:THEN
							(DISPLAY-PANE :EVEN))))

	  (GOOD-USE-OF-BLANKS (:LAYOUT (GOOD-USE-OF-BLANKS :COLUMN
							   BLANK-AREA-1
							   WINDOW-ROW-1
							   BLANK-AREA-2
							   WINDOW-ROW-2
							   BLANK-AREA-3)
				       (BLANK-AREA-1 :FILL ,TV:25%-GRAY)
				       (BLANK-AREA-2 :FILL ,TV:25%-GRAY)
				       (BLANK-AREA-3 :FILL ,TV:25%-GRAY)
				       (BLANK-AREA-4 :FILL ,TV:25%-GRAY)
				       (BLANK-AREA-5 :FILL ,TV:25%-GRAY)
				       (BLANK-AREA-6 :FILL ,TV:25%-GRAY)
				       (BLANK-AREA-7 :FILL ,TV:25%-GRAY)
				       (WINDOW-ROW-1 :ROW
						      BLANK-AREA-4
						      INPUT-PANE
						      BLANK-AREA-5)
				       (WINDOW-ROW-2 :ROW
						      BLANK-AREA-6
						      DISPLAY-PANE
						      BLANK-AREA-7))
			      (:SIZES (GOOD-USE-OF-BLANKS
					(WINDOW-ROW-1 .3) (WINDOW-ROW-2 .4)
					:THEN
					(BLANK-AREA-1 :EVEN)
					(BLANK-AREA-2 :EVEN)
					(BLANK-AREA-3 :EVEN))
				      (WINDOW-ROW-1 (INPUT-PANE .5)
						    (BLANK-AREA-4 .1)
						    :THEN
						    (BLANK-AREA-5 :EVEN))
				      (WINDOW-ROW-2 (DISPLAY-PANE .5)
						    (BLANK-AREA-7 .1)
						    :THEN
						    (BLANK-AREA-6 :EVEN))))

	  ;; This layout just shows all the possible gray values.  Yes,
	  ;; it's kludgey, because the value of tv:*gray-arrays* isn't
	  ;; just a list of arrays, it's a list of all valid arguments
	  ;; to tv:set-screen-deexposed-gray.
	  (DIFFERENT-GRAYS (:LAYOUT
			    (DIFFERENT-GRAYS
			      :COLUMN
			      ,@(LOOP FOR I FROM 1 BELOW (LENGTH TV:*GRAY-ARRAYS*)
				      COLLECT
				      (INTERN (STRING-APPEND "BLANK-AREA-"
							     (FORMAT NIL "~D" I)))))
			    ,@(LOOP FOR I FROM 1 BELOW (LENGTH TV:*GRAY-ARRAYS*)
				    COLLECT
				    `(,(INTERN (STRING-APPEND "BLANK-AREA-"
							     (FORMAT NIL "~D" I)))
				      :FILL
				      ,(EVAL (NTH I TV:*GRAY-ARRAYS*)))))
			   (:SIZES (DIFFERENT-GRAYS
				     ,@(LOOP FOR I FROM 1 BELOW (LENGTH TV:*GRAY-ARRAYS*)
					     COLLECT
					     `(,(INTERN (STRING-APPEND "BLANK-AREA-"
							     (FORMAT NIL "~D" I)))
					       :EVEN)))))
	  
	  )
	:CONFIGURATION 'SIMPLEST))



(COMPILE-FLAVOR-METHODS TEST-FRAME)


(DEFUN TEST (&OPTIONAL (W (TV:MAKE-WINDOW 'TEST-FRAME
					  :EDGES-FROM :MOUSE
					  :EXPOSE-P T)))
  (LET ((CONSTRAINTS (LOOP FOR THING IN (SEND W :CONSTRAINTS)
			   COLLECT (CAR THING))))
    (SEND W :EXPOSE)
    (SEND *TERMINAL-IO* :CLEAR-WINDOW)
    (LOOP NAMED OUTER
	  DO
	  (LOOP FOR C IN CONSTRAINTS DO
		(SEND W :SET-CONFIGURATION C)
		(PRINT C)
		(WHEN (NOT (Y-OR-N-P "Keep going?"))
		  (RETURN-FROM OUTER))))
    W))