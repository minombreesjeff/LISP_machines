;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;;  This sample program (Life) illustrates several principles of using Flavors.
;;;  Because Flavors is intended to help organize large, complex programs,
;;;  it's difficult to exercise all (or even most) of the features of 
;;;  Flavors in a small demonstration program.    However, this program 
;;;  does illustrate the following aspects of Flavors:
;;;      Using defflavor, defgeneric, defmethod, and make-instance;
;;;      Writing a method for make-instance;
;;;      Constructing a flavor from component flavors;
;;;      Using :and type of method combination 
;;;      Using message-passing (send) when necessary to use old interfaces;
;;;      Integrating flavors with other Lisp data structures (arrays).

;;;  Note that this example program is intended to illustrate Flavors,
;;;  and is not attempting to run Life in the fastest possible way. 

;;;  Life is a game that simulates a community of beings (cells).   The
;;;  rules of Life indicate whether a given cell will live or die in the 
;;;  next generation, depending on its environment.    If the cell is too
;;;  crowded by its neighbors, or too isolated from other cells, it dies.
;;;  Otherwise the environment is deemed acceptable, and the cell lives. 
;;;  Specifically:
;;;     Cells live in a two-dimensional array.   
;;;     A cell typically has eight neighbors, those adjacent to it. 
;;;     Cells on the border of the array have less than eight neighbors.  
;;;     If an empty cell has exactly 3 live neighbors, a cell is born there.
;;;     If an empty cell has any other number of live neighbors, no cell is born.
;;;     If a live cell has 2 or 3 live neighbors, it stays alive.
;;;     If a live cell has any other number of live neighbors, it dies.

;;;  Three flavors are used to represent the Life cells:  cell, box, and 
;;;  box-with-cell.   The cell flavor is flexible enough that you could use
;;;  it in another program that used a different type of displays.   The 
;;;  box flavor is used to display the Life game-board on the screen.  
;;;  box-with-cell combines those two flavors.  

;;;  The function play-life-game runs Life.   It initializes a community by
;;;  using a random-number generator to determine if a cell should be
;;;  alive or dead to start.   It makes a window to use for display. 
;;;  It displays its initial set-up and iterates through n generations.
;;;  Its usage is:   (play-life-game)     - default is 3 generations
;;;            or:   (play-life-game n)   - n is an integer 
 

;;; This array is used for storing cells and box-with-cells.
(defvar *game-board*   nil
   "array for the Life game.")
(defvar *number-boxes-on-axis*  30 
  "number of boxes on each axis of gameboard")

;;; This window is used for displaying the *game-board*
(defvar *game-window*  (tv:make-window 'tv:window	
				       :blinker-p nil
				       :label "Game of Life")
  "Window for display.")			

;;; The following numbers make a nice display:
(defvar *x-top-left-corner* 250
   "x coordinate of top left corner of display")
(defvar *y-top-left-corner* 100
  "y coordinate of top left corner of display")
(defvar *side-length* 15
  "length of each box for display")
(defvar *board-length*  (* *side-length* *number-boxes-on-axis*)
  "length of gameboard for display")
(defvar *cell-radius* 6
  "radius of circle to draw live cells")


;;; A cell is a functional cell of the Life game.  It stores 
;;; its status and next-status (:alive or :dead), and a list of 
;;; its neighbors.   The x and y instance variables give the
;;; coordinates of this cell in the array *game-board*.  

(defflavor cell (x y status next-status neighbors) ()
  (:documentation "Functional unit of the Life game.")
  (:initable-instance-variables x y status))

;;; A box is good for being displayed on the screen.

(defflavor box (box-x box-y box-x-center box-y-center side-length)
	   ()
  (:initable-instance-variables box-x box-y side-length))

;;; A box-with-cell is a box that contains a functional Life cell.
;;; The cell component provides the necessary methods for playing Life.
;;; The box component makes it easy to display the game-board. 
;;; box-with-cell has default initial values for our game. 

(defflavor box-with-cell ()			;no instance vars
	   (box cell)				;two components 
  (:default-init-plist :side-length *side-length*
		       :status (if (evenp (random 2)) ':alive ':dead))
  (:required-methods aliveness count-live-neighbors
		     get-next-status change-status
		     draw-outline))
 
;;; The generic functions are defined here: 

(defgeneric aliveness (cell-unit)
  "Returns 1 if the cell-unit is currently alive, 0 otherwise.")

(defgeneric count-live-neighbors (cell-unit)
   "Returns the number of live neighbors of a cell-unit.")
 
(defgeneric find-neighbors (cell-unit)
   "Calculates and stores the 8 neighbors of a cell-unit.")

(defgeneric get-next-status (cell-unit)
  "Applies rules of the Life game, using count-live-neighbors.
   If overcrowded or too isolated, returns :dead.    
   If the environment is fine, returns :alive.")

(defgeneric draw-outline (box-unit)
  "Draws the outline of the given box-unit.")

(defgeneric draw-contents (box-with-cell)
  "Draws the cell contained in a box-with-cell. 
   Live cells appear as filled-in circles; dead cells are invisible.")
 
(defgeneric change-status (cell-unit)
   "When applied to a cell, updates it to next-status.
    When applied to a box-with-cell, checks to see if
    the status changed.   If so, redisplays the contents."
   (:method-combination :and :most-specific-last))

;;; when a new instance of box-with-cell is made, this method 
;;; does some further initialization of the new box, depending on the 
;;; fact that box-x and box-y are initialized. 

(defmethod (make-instance box-with-cell) (&rest ignore)
  (setq box-x-center (round (+ box-x (* .5 *side-length*))))
  (setq box-y-center (round (+ box-y (* .5 *side-length*)))))

;;; The definitions of methods are below:

(defmethod (aliveness cell) ()
  (if (eq status ':alive) 1 0))

;;; the neighbors of a cell are its 8 adjacent cells
;;; because there is a border of dead cells, in this implementation
;;; every box-with-cell has 8 neighbors.   

(defmethod (find-neighbors cell) ()
  (setq neighbors (list 
		    (aref *game-board* x (1- y))
		    (aref *game-board* x (1+ y))
		    (aref *game-board* (1- x) y)
		    (aref *game-board* (1+ x) y)
		    (aref *game-board* (1- x) (1- y))
		    (aref *game-board* (1- x) (1+ y))
		    (aref *game-board* (1+ x) (1- y))
		    (aref *game-board* (1+ x) (1+ y)))))

;;; aliveness returns 1 if cell is alive, 0 otherwise
;;; map it to the cell's neighbors, and get a list of 0's and 1's
;;; use reduce to add up the elements of that list for sum of live neighbors

(defmethod (count-live-neighbors cell) ()
  (reduce #'+ (map 'list #'aliveness neighbors)))

;;; Applies the rules of Life to the given cell, figuring out if
;;; the cell will be alive or dead in the next generation.  
;;; Stores the result in next-status.   

(defmethod (get-next-status cell) ()
  (let ((number-live-neighbors (count-live-neighbors self)))
    (setq next-status 
	  (cond ((eq ':dead status)		;empty cell
		 (if (= number-live-neighbors 3)
		     ':alive
		     ':dead))
		(t				;live cell 
		 (if (or (= number-live-neighbors 2)
			 (= number-live-neighbors 3))
		     ':alive
		     ':dead))))))

;;; The following method is inherited by box-with-cell, 
;;; combined with the :and type of method combination.  
;;; The return value is important because it determines
;;; whether or not the box-with-cell needs to be redisplayed: 

(defmethod (change-status cell) ()
  (if (eq status next-status) 
      nil				;returns nil if no change
      (setq status next-status)))	;returns non-nil if status changed

(defmethod (change-status box-with-cell) ()
  (draw-contents self))

(defmethod (draw-contents box-with-cell) ()
  (if (= (aliveness self) 1)
      ;; draw a circle to represent an alive cell
      (send *game-window* :draw-filled-in-circle
	    box-x-center box-y-center *cell-radius*)
      ;; erase a circle if the cell is dead
      (send *game-window* :draw-filled-in-circle
	    box-x-center box-y-center *cell-radius* tv:alu-andca)))
  
;;; The method for the generic function draw-outline uses message-passing
;;; to invoke methods associated with the window system.   There is no
;;; difficulty in writing programs that use both generic functions and 
;;; message-passing.   

(defmethod (draw-outline box) ()
  (send *game-window* :draw-line 
	box-x box-y 
	(+ box-x side-length) box-y)
  (send *game-window* :draw-line	      
	box-x box-y 
        box-x (+ box-y side-length))
  (send *game-window* :draw-line
	(+ box-x side-length) box-y 
	(+ box-x side-length) (+ box-y side-length))
  (send *game-window* :draw-line
	box-x (+ box-y side-length) 
	(+ box-x side-length) (+ box-y side-length)))
 
;;; play-life-game is the top-level function that plays the Life game. 
 
(defun play-life-game (&optional (generations 10))
  (send *game-window* :select)
  (send *game-window* :clear-window)
  (set-up-game-board)
  (iterate-game-board #'find-neighbors)		;find neighbors of cells
  (iterate-game-board #'draw-outline)		;display grid of game-board
  (iterate-game-board #'draw-contents)		;display initial set-up 
  (loop repeat generations
	do
    (iterate-game-board #'get-next-status)	;compute next-status of cells
     (iterate-game-board #'change-status))	;update for next generation 
  (sleep 2)					;keep display visible for 2 seconds
  (send *game-window* :bury))

;;; *game-board* is a 2-dimensional array:
;;;   outer border contains dead cells (easier to compute live neighbors)
;;;   outer border is not displayed
;;;   inner part contains box-with-cells (initialized randomly dead or alive)

(defun set-up-game-board ()
  (setq *game-board* (make-array (list (+ *number-boxes-on-axis* 2)
				       (+ *number-boxes-on-axis* 2))))

  ;; initialize the border with dead cells 
  (loop for x-pos from 0 to (1+ *number-boxes-on-axis*)	
	do					
      (setf (aref *game-board* x-pos 0)		
	    (make-instance 'cell :status ':dead))
      (setf (aref *game-board* x-pos (1+ *number-boxes-on-axis*))
	    (make-instance 'cell :status ':dead)))
  (loop for y-pos from 0 to (1+ *number-boxes-on-axis*)	
	do					
      (setf (aref *game-board* 0 y-pos)	
	    (make-instance 'cell :status ':dead))
      (setf (aref *game-board* (1+ *number-boxes-on-axis*) y-pos)
	    (make-instance 'cell :status ':dead)))
 
  ;; now initialize the inner part of the array with box-with-cells
  (loop for x-pos from 1 to *number-boxes-on-axis*	;access inner part
	  for x-offset from 0 by *side-length*
	do					
    (loop for y-pos from 1 to *number-boxes-on-axis*
	  for y-offset from 0 by *side-length*
	  do
      (setf (aref *game-board* x-pos y-pos)	;fill up with box-with-cells
	    (make-instance 'box-with-cell 
			       :x x-pos	
			       :y y-pos
			       :box-x (+ *x-top-left-corner* x-offset)
			       :box-y (+ *y-top-left-corner* y-offset))))))

;;; iterate-game-board accesses the inner part of *game-board* and 
;;; applies operation to each box-with-cell.   Any operation that can be
;;; used on a single cell or box-with-cell can be used.   For example: 
;;;    draw-outline, draw-contents, get-next-status, change-status 
;;;    find-neighbors 

(defun iterate-game-board (operation)
  (loop for y from 1 to *number-boxes-on-axis*	;nested loop accesses the
	do					;inner part of *game-board*
    (loop for x from 1 to *number-boxes-on-axis*
	  do
      (funcall operation (aref *game-board* x y)))))


(compile-flavor-methods cell box box-with-cell)
