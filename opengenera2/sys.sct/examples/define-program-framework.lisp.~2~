;;; -*- Mode: lisp; Syntax: common-lisp; Package: user; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; avv-pane-test shows the use of an :accept-values pane

(dw:define-program-framework avv-pane-test
  :pretty-name "Test"
  :select-key #\a
  :command-definer t
  :state-variables ((half-life 2400)
		    (log-file #p"local:>log.file")
		    (start-time 2732241600))	;default is 8/1/86 00:00:00
  :command-table (:inherit-from '("colon full command"
				  "standard arguments"
				  "standard scrolling"
				  "accept-values-pane")
		  :kbd-accelerator-p nil)
  :panes ((title :title :redisplay-string "Test Frame")
	  (AVV :accept-values
	       :accept-values-function 'Redisplay-AVV
	       ;; Allow room for growth.
	       :height-in-lines 5
	       ;; Need to override the default so :height-in-lines can take effect.
	       :size-from-output nil
	       :margin-components
	       '((dw:margin-scroll-bar :visibility :if-needed)
		 (dw:margin-label
		   :string "AVV Should Be Here"
		   :Style (:swiss :italic :normal))))
	  (display :display)	
	  (listener :listener)))

(defmethod (Redisplay-AVV avv-pane-test) (Stream)
  (setq half-life (accept 'integer :default half-life :prompt "Half Life"
			  :stream stream))
  (setq log-file (accept 'pathname :prompt "Log File" :default log-file
			 :stream stream))
  (setq start-time (accept 'time:universal-time :prompt "Start time"
			   :default start-time :stream stream)))

(define-avv-pane-test-command (com-show-state)
    ()
   (format t "~&Half life = ~A, Log file = ~A, time = ~\\time\\"
	   half-life log-file start-time))

;;; Example of a program that uses an :accept-values pane, using the
;;; default :accept-values-function.  Every state variable to appear in
;;; the :accept-values pane must have an explicit initial value, prompt,
;;; and presentation type.  The command table must inherit from
;;; "accept-values-pane".
(dw:define-program-framework accept-two
  :select-key #\a
  :command-definer t
  :command-table (:inherit-from '("colon full command"
				  "standard arguments"
				  "input editor compatibility"
				  "accept-values-pane")
		  :kbd-accelerator-p nil)
  :state-variables ((first-month 200.0 "First month" single-float)
		    (second-month 50.0 "Second month" single-float)
		    (third-month 100.0 "Third month" single-float))
  :panes ((title :title :height-in-lines 1 :redisplay-after-commands nil)
	  (accept-values :accept-values
			 :accept-values-function 'dw::accept-values-program-state-variables
			 :size-from-output t
			 :redisplay-after-commands t)
	  (display :display)
	  (interactor :interactor :height-in-lines 4))
  :configurations
  '((dw::main
      (:layout
	(dw::main :column title accept-values display interactor))
      (:sizes
	(dw::main
	  (title 1 :lines)
	  (accept-values :ask-window self :size-for-pane accept-values)
	  (interactor 4 :lines)
	  :then (display :even))))))

(define-accept-two-command (summarize-data) ()
  (let ((sum (+ first-month second-month third-month)))
    (format t "Quarterly total = ~S.~%Monthly average = ~A.~2%" sum (/ sum 3))))

;
;;; Calculator program.  This program makes use of some advanced features of 
;;; dw:define-program-framework, and several ancillary functions that are 
;;; undocumented.  It needs these functions to create a unique kind of command
;;; menu, namely, the calculator keyboard itself.
; 
(dw:define-program-framework calculator
  :select-key #\+
  :command-definer define-calculator-command
  :command-table (:inherit-from nil :kbd-accelerator-p t)
  ;; Provide :echo-stream ignore option to dw:default-command-top-level function
  ;; to suppress echoing of digit and arithmetic commands.
  :top-level (dw:default-command-top-level :echo-stream ignore)
  ;; Set up value and keyboard display panes.  The keyboard display pane will
  ;; be used as a command menu -- clicking on a keyboard item executes a command.
  :panes ((value :display :redisplay-function 'calculator-display-value
			  :incremental-redisplay t
			  :default-style '(:fix :roman :large)
			  :height-in-lines 1)
	  (keyboard :display :redisplay-function 'calculator-draw-keyboard
			     :redisplay-after-commands nil
			     :more-p nil))
  :label-pane nil
  :size-from-pane keyboard
  :state-variables ((current-value 0.0)			;The current value displayed.
		    (value-stack nil)			;The stack of pushed values.
		    (entry-state 'new)			;State controlling meaning of digits.
		    )
  )

;;; Redisplay function for value pane.
(defmethod (calculator-display-value calculator) (stream)
  (dw:redisplayable-format stream "~F" current-value))

;;; Keyboard layout
(defvar *calc-keyboard-layout* '(("7" "8" "9" "+")
				 ("4" "5" "6" "-")
				 ("1" "2" "3" "*")
				 ("Enter" "0" "." "/")))

;;; Redisplay function for keyboard pane.
(defun calculator-draw-keyboard (program stream)
  ;; Bind values (command-menu item-list, internal presentation type of items)
  ;; returned by dw:program-command-menu-item-list to make use of the keyboard
  ;; display pane as the program's command-menu pane.  The command-menu item-list
  ;; is the same as *calc-keyboard-layout*.
  (multiple-value-bind (item-list presentation-type)
      (dw:program-command-menu-item-list program)
    (formatting-table (stream :inter-row-spacing 5 :inter-column-spacing 10)
      (dolist (sublist *calc-keyboard-layout*)
	(formatting-row (stream)
	  (dolist (name sublist)
	    (unless (member name item-list :test #'equal)
	      (error "The item ~S was in the layout but not a defined menu item." name))
	    (formatting-cell (stream :align :center)
	      (dw:with-output-as-presentation (:object name :type presentation-type
					       :stream stream
					       :single-box t :allow-sensitive-inferiors nil)
		(surrounding-output-with-border (stream :shape :oval)
		  (with-character-size ((if (> (string-length name) 1)
					    :large :very-large)
					stream
					:bind-line-height t)
		    (write-string name stream)))))))))))

;;; Define a program command shared by the digit commands, that is,
;;; define what happens when the user clicks on a keyboard digit.  
;;; The digit commands expand to com-digit via the macros 
;;; define-digit-command and define-digit-commands, below.
(define-calculator-command (com-digit) ((value 'number))
  (cond ((eq entry-state 'new)
	 ;; Digit means start building a new number.
	 (push current-value value-stack)
	 (setq current-value (float value)
	       entry-state 'continue))
	((eq entry-state 'new-no-push)
	 ;; Digit means start building a new number but don't push.
	 (setq current-value (float value)
	       entry-state 'continue))
	((eq entry-state 'continue)
	 ;; Digit means continue building the number.
	 (setq current-value (+ (* current-value 10.0) value)))
	((numberp entry-state)
	 ;; Digits means continue building fraction part of the number.
	 (incf current-value (* entry-state value))
	 (setq entry-state (* .1 entry-state)))))

;;; Put the digit commands on single-key accelerators and make them
;;; execute com-digit, above.
(defmacro define-digit-command (num)
  `(progn
     ;; Because we're not using a regular command-menu pane, we need to generate 
     ;; our own command handler.  See below for more on dw:define-command-menu-handler.
     (dw:define-command-menu-handler (,(format nil "~D" num) calculator (:top-level))
				     ()
       (cp:build-command 'com-digit ',num))
     ;; Put the digit comnmands on single-key accelerators.
     (cp:define-command-accelerator ,(intern (format () "COM-~D" num)) calculator
				    ,(digit-char num) () ()
       (cp:build-command 'com-digit ',num))))

(defmacro define-digit-commands ()
  `(progn . ,(loop for n from 0 to 9 collect `(define-digit-command ,n))))

(define-digit-commands)

;;; We need a separate decimal-point command.
(define-calculator-command (com-decimal-point :menu-accelerator "." :keyboard-accelerator #\.)
			   ()
  (when (eq entry-state 'new)
    (push current-value value-stack))
  (when (zl:memq entry-state '(new new-no-push))
    (setq current-value 0.0))
  (when (not (numberp entry-state))
    (setq entry-state .1)))

;;; Just as we created a common digit command for all digits, here we 
;;; create a common arithmetic command for the four arithmetic operators.
(define-calculator-command (com-arithmetic )
			   ((fun 'sys:function-spec))
  (setq current-value (funcall fun (or (pop value-stack) 0.0) current-value))
  (setq entry-state 'new))

(defmacro define-arithmetic-command (fun)
  `(progn
     ;; Because we're not using a regular command-menu pane, we need to generate 
     ;; our own command handler.  See below for more on dw:define-command-menu-handler.
     (dw:define-command-menu-handler (,(string fun) calculator (:top-level))
				     ()
       (cp:build-command 'com-arithmetic ',fun))
     ;; Put these commands on single keys also.
     (cp:define-command-accelerator ,(intern (format () "COM-~S" fun)) calculator
				    ,(character fun) () ()
       (cp:build-command 'com-arithmetic ',fun))))

(define-arithmetic-command +)
(define-arithmetic-command -)
(define-arithmetic-command *)
(define-arithmetic-command /)

;;; Finally, we need an Enter command.
(define-calculator-command (com-enter :menu-accelerator "Enter"
				      :keyboard-accelerator #\Return)
			   ()
  (push current-value value-stack)
  (setq entry-state 'new-no-push))



#||
dw:define-command-menu-handler (command-name command-table menu-levels
&key (gesture :left) (documentation t)) arglist body

command-name   string to appear in command menu
command-table  command-table (for example, calculator)
menu-levels    list of menu-levels in which this string should appear,
                for example, (:top-level)
gesture        a gesture that should invoke this handler, default is :left
documentation  What should appear in the mouse documentation line.  If T, the
	        unparsed command appears there.
arglist        a spec for the arguments that the handler body might want to operate
                on.  If you're not interested in any, the arglist should be NIL.
                The arguments that you could be interested in are MENU-LEVEL, WINDOW, 
		ARGUMENTS, and GESTURE, which are all supplied as keywords.  Typically,
		you'd use NIL.
body           a form that returns the internal representation of a command,
                for example, (cp:build-command 'com-foo ...)


(dw:define-command-menu-handler ("Show" file-editor (:top-level) :documentation T) ()
  (cp:build-command 'com-show-file (fs:default-pathname)))

The above example means that, when you click left on "Show" in the top-level
"file-editor" command-menu, the com-show-file command should be run with an 
argument of the default pathname.  "Show File" of that pathname shows up in 
the mouse documentation line.
||#