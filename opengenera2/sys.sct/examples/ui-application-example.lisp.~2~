;;; -*- Mode: lisp; Syntax: common-lisp; Package: user; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; For discussion of the code included in this file,
;;; see the User Interface Application Example chapter
;;; in Programming the User Interface, Volume A.

;;;
;;; EMPLOYEE-EDITOR PROGRAM
;;;


;;; Create an employee flavor, and a couple of methods.
(defflavor employee (first-name last-name (retired-p nil))
	   ()
  :readable-instance-variables
  :writable-instance-variables
  :initable-instance-variables)

(defvar *employee-list* nil) 

(defmethod (make-instance employee) (&rest ignored)
  (push self *employee-list*))

(defmethod (employee-name employee) ()
  (format nil "~a ~a" first-name last-name))

(make-instance 'employee :first-name "Fred" :last-name "Flintstone")
(make-instance 'employee :first-name "Barney" :last-name "Rubble")


;;; Now, we create a presentation type based on the employee flavor
(define-presentation-type employee (() &key abbreviate)
   :no-deftype t				; there's already a flavor, so don't try to
						;	define a type
   :history t					; give us our own type history
   :parser ((stream &key type initially-display-possibilities)
	    (values (dw:completing-from-suggestions
	      (stream	:initially-display-possibilities
			initially-display-possibilities
			:partial-completers '(#\space)
			:type type)
	      (loop for emp in *employee-list*
		    do (dw:suggest (employee-name emp) emp)))))
   :printer ((object stream &key acceptably)
	     (when acceptably (write-char #\" stream))
	     (cond (abbreviate (write-string (employee-last-name object) stream))
		   (t (write-string (employee-name object) stream)))
	     (when acceptably (write-char #\" stream)))
   :description "an employee")


;;; A translating mouse handler for inputting employee objects as strings.
(define-presentation-translator employee-to-string
   (employee string				;from employee to string
	     :gesture :select			;handler is on :select (click-left) gesture
	     :documentation "This employee's name") 
   (employee)
  (employee-name employee))


;;; A side-effecting handler for retiring an employee.  This is dangerous, because it makes 
;;; changes that your program's command loop is unaware of.  Below, after creating a 
;;; program framework definition, we re-implement this as a program command and 
;;; presentation-to-command translator combo.
(define-presentation-action retire-employee
   (employee t					;acts on employees in any (t) input context
	     :gesture :middle			;handler is on :middle (click-middle) gesture
	     :tester ((employee)		;handler only active on unretired employees
		      (not (employee-retired-p employee)))
	     :documentation "Retire this employee")
   (employee)
  (setf (employee-retired-p employee) t))


;;; Show current employee data in a tabular format.
(defun format-employees-list (stream)
  (fresh-line stream)
  (formatting-table (stream)
    (formatting-column-headings (stream :underline-p t)
      (with-character-face (:italic stream)
	(formatting-cell (stream) "name")
	(formatting-cell (stream) "retired?")))
    (loop for employee in *employee-list*
	  do
      (formatting-row (stream)
	(formatting-cell (stream)
	  (present employee `employee
		   :stream stream))
	(formatting-cell (stream)
	  (format stream "~:[no~;yes~]"
		  (employee-retired-p employee)))))))


;;; Now, let's use Frame-Up to generate a program definition.
(dw:define-program-framework employee-editor	;the name of our program
  :select-key #\*				;it's available on SELECT *
  :command-definer t				;creates define-employee-editor-command macro
  :command-table (:inherit-from 'nil :kbd-accelerator-p 'nil)	;no inherited commands
  :state-variables nil				;no state variables
  :panes					;we created four panes
  ((pane-1 :title :size-from-output nil :redisplay-string nil 
	   :redisplay-function nil :height-in-lines 1
	   :redisplay-after-commands nil)
   (pane-3 :display)
   (pane-2 :command-menu :equalize-column-widths nil
	   :center-p nil :columns nil :rows nil
           :menu-level :top-level)
   (pane-4 :interactor :typeout-window nil :height-in-lines 4))
  :configurations				;and this is how we laid them out
  '((dw::main (:layout (dw::main :column pane-1 pane-3 pane-2 pane-4))
	      (:sizes
		(dw::main (pane-1 1 :lines) (pane-2 :ask-window self :size-for-pane pane-2)
			  (pane-4 4 :lines) :then (pane-3 :even))))))


;;; Define a program command to display the formatted table created above
(define-employee-editor-command
  (com-show-employees :menu-accelerator t)	; put the command into the program's 
  ()						;     command menu
  (format-employees-list *standard-output*))

;;; Define a program command to change an employee's retired status.
(define-employee-editor-command
  (com-change-employee-status :menu-accelerator "Change Status")	; put this command
  ((employee 'employee				; into command menu as "Change Status" 
	     :confirm t
	     :prompt "employee"))
  (setf (employee-retired-p employee) (not (employee-retired-p employee)))
  (fresh-line)
  (present employee 'employee)
  (write-string "'s status changed."))

;;; Put the Change Employee Status command on a presentation-to-command translator 
(define-presentation-to-command-translator change-employee-status
					   (employee)
  (employee)
  `(com-change-employee-status ,employee))

