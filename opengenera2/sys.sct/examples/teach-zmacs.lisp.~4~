;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************


;;; If you change the location of the original, all you need to do to
;;; update this file is change the value of the variable *ORIGINAL*.

(defparameter *original* "SYS:EXAMPLESD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :EXTRA-CONDENSED NIL) "CPTFONTCC");0TEACH-ZMACS-MASTER.TEXT")

(defparameter *msg* "
You are already editing a copy of the Zmacs tutorial.
Would you like to continue the tutorial from where you left off? ")

(defvar zwei:text-mode-hook)


;;; Teach Zmacs CP command.
(cp:define-command (com-teach-zmacs :command-table "user"
				    :provide-output-destination-keyword nil) ()
  (let* ((copy (fs:merge-pathnames "teach-zmacs-copy.text" (fs:user-homedir)))
	 (savehook (if (boundp 'zwei:text-mode-hook) zwei:text-mode-hook nil))
	 (zwei:text-mode-hook nil))		; This just temporary.
    (cond ((and (editing-tz-p) (y-or-n-p *msg*))
	   (ed copy))
	  (t (format t "~&Loading a new copy of the tutorial...")
	     (copy-file *original* copy)	; Otherwise copy the original to their
	     (ed copy)))			; directory and edit it.
    (when savehook (setf zwei:text-mode-hook savehook))  ;; If it wasn't bound, leave it so.
    ))


;;; Is the user editing a copy of Teach Zmacs already?
(defun editing-tz-p ()
  (loop for buffer in zwei:*zmacs-buffer-list* do
    (when (string-search "teach-zmacs-copy.text" (send buffer :name))
      (return t))))


;;; Press — to move to next section.
(zwei:define-keyboard-macro tz-move-to-next-section (nil)
  #\c-n #\c-s #\return "-----" #\c-a #\c-p #\c-0 #\c-l)
(zwei:command-store (zwei:make-macro-command ':tz-move-to-next-section)
		    #\triangle zwei:*zmacs-comtab*)


;;; Press • to move to previous section.
(zwei:define-keyboard-macro tz-move-to-previous-section (nil)
  #\c-r #\return "-----" #\c-a #\c-0 #\c-l)
(zwei:command-store (zwei:make-macro-command ':tz-move-to-previous-section)
		    #\square zwei:*zmacs-comtab*)

(format t "~2%Use the ~'bTeach Zmacs~ Command Processor command to start the Zmacs tutorial.~2%")
