;;; -*- Mode: LISP; Syntax: Zetalisp; Package: USER; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************


;;; Print characters in the character set,
;;; alternating roman and some other font.

(defun font-catalog-page (font &optional (printer hardcopy:*default-text-printer*))
  (setq printer (hardcopy:get-hardcopy-device printer))
  (with-open-stream (stream (hardcopy:make-hardcopy-stream
			      printer))
    (let ((fix-font (send stream :maybe-add-font "FIX9"))
	  (catalog-font (send stream :maybe-add-font font)))
      (flet ((send-to-stream-in-font (new-font message &rest args)
	       (send stream :set-font new-font)
	       (lexpr-send stream message args))
	     (draw-line (from-x from-y to-x to-y)
	       (send stream :set-cursorpos from-x from-y)
	       (multiple-value-bind (x y)
		   ;; Note: :SHOW-LINE takes outside coordinates while
		   ;; :SET-CURSORPOS takes inside coordinates.
		   (send stream :un-relative-coordinates to-x to-y)
		 (send stream :show-line x y))))
	(multiple-value-bind (x-size y-size) (send stream :inside-size)
	  (decf x-size) (decf y-size)		;Leave room for drawing box
	  (let* ((line-height-0 (send stream :convert-to-device-units
				      1 :character :vertical))
		 (line-height-both (* 2 line-height-0))
		 (x 10)
		 (y (- y-size (* 1.3 line-height-both)))
		 (max-x x)
		 (device-units-rounded?
		   ;;If the device units are bigger than 0.01 inch, assume they
		   ;;are flonums
		   (> (send stream :convert-to-device-units 2540. :micas :vertical)
		      100.0)))
	    (labels
	      ((round-device-units (y)
		 (if device-units-rounded? (round y) y))
	       (draw-box ()
		 (decf y line-height-0)
		 (draw-line 0     y      0     y-size)
		 (draw-line 0	y      max-x y)
		 (draw-line max-x y      max-x y-size)
		 (draw-line 0	y-size max-x y-size)
		 (send stream :set-cursorpos 0 (- y line-height-both))
		 (send-to-stream-in-font
		   fix-font
		   :string-out (format nil "Font ~A catalog" font)))
	       (new-page ()
		 (send stream :new-page)
		 (setq x 10 y (- y-size line-height-both)
		       max-x x))
	       (new-line ()
		 (setq y (round-device-units
			   (- y (* 1.3 line-height-both))))
		 (setq max-x (max x max-x))
		 (setq x 10)
		 (when (< y line-height-both)
		   (draw-box)
		   (new-page)))
	       (new-character (character)
		 (send stream :set-cursorpos x y)
		 (send-to-stream-in-font fix-font :tyo character)
		 (send stream :set-cursorpos x (+ y line-height-0))
		 (send-to-stream-in-font catalog-font :tyo  character)
		 (incf x (+ (max (send-to-stream-in-font fix-font :character-width character)
				 (send-to-stream-in-font catalog-font :character-width character))
			    10))
		 (when (> x (- x-size 10)) (new-line))))
	      (setq y (round-device-units y))
	      (loop for char from 32 below 127
		    and character = (code-char char)
		    do
		(new-character character)
		    when (= 15 (mod char 16))
		      do (new-line))
	      (draw-box))))))))
