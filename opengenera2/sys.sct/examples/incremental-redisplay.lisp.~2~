;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************


;;; Examples of incremental redisplay

(defvar *l*)

;; Run this to show redisplayer, do-redisplay, redisplayable-present
;; The function waits for a character to be input before redisplaying
(defun redisplay-test-1 ()
  (fresh-line)
  (setq *l* (copy-list '("Old Top" "Old Middle" "Old Bottom")))
  (let ((displayer (dw:redisplayer ()
		     (dolist (thing *l*)
		       (dw:redisplayable-present thing 'string :unique-id thing)
		       (terpri)))))
    (dw:do-redisplay displayer)
    (read-char)
    (push "New Top" *l*)
    (dw:do-redisplay displayer)
    (read-char)
    (pop (cddr *l*))
    (dw:do-redisplay displayer)
    (read-char)
    displayer))

;; Run this to show with-redisplayable-output, redisplayable-format
(defun redisplay-test-2 (&optional (stream *standard-output*))
  (redisplay-test-2-internal
    (dw:redisplayer ()
      (dolist (thing *l*)
	(dw:with-redisplayable-output (:unique-id thing)
	  (dw:redisplayable-format t "~S: " thing)
	  (dw:redisplayable-present (eval thing) 'expression))
	(terpri)))
    stream))

;; Run this to show independently-redisplayable-format.
(defun redisplay-test-2a (&optional (stream *standard-output*))
  (redisplay-test-2-internal
    (dw:redisplayer ()
      (dolist (thing *l*)
	(dw:with-redisplayable-output (:unique-id thing)
	  (dw:independently-redisplayable-format t "~S: ~S~%"
						 thing (eval thing)))))
    stream))

;; This is an internal function for the two above.
;; It sets up *L* and runs redisplayer, which looks
;; at *L* to decide what output to do.
(defun redisplay-test-2-internal (displayer stream)
  (fresh-line)
  (setq *l* (loop for (symbol . value) in '((*a* . a)
					    (*bb* . b)
					    (*c* . cc))
		  do (set symbol value)
		  collect symbol))
  (dw:do-redisplay displayer stream)
  (read-char)
  (set '*@* 'ddd) (push '*@* (cddr *l*))
  (dw:do-redisplay displayer stream)
  (read-char)
  (set '*c* 'not-c)
  (dw:do-redisplay displayer stream)
  (read-char)
  (pop (cdr *l*))
  (dw:do-redisplay displayer stream)
  (read-char)
  displayer)

