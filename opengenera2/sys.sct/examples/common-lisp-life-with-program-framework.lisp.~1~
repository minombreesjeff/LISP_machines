;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************


;;; this is the "base" version of this program - it tries to be the
;;; minimimal starting point from which other versions grow
 
(dw:define-program-framework life
  :select-key #\square
  :command-definer t
  :command-table
     (:inherit-from '("colon full command" 
		      "standard arguments" 
		      "input editor compatibility")
      :kbd-accelerator-p 'nil)
  :state-variables ((number-cells-on-axis 30)
		    (game-board (make-game-board 30))
		    (next-game-board (make-game-board 30)))
  :panes ((title :title
	    :default-character-style '(:swiss :bold :large)
	    :redisplay-string "Life")
	  (display :display
	    :more-p nil)
	  (listener :listener))
  :configurations
     '((main
	 (:layout
	   (main :column title display listener))
	 (:sizes
	   (main (title 1 :lines) (listener 10 :lines) 
		 :then (display :even))))))


;;; note that dw:define-program-framework defined the macro define-life-command

;;; note the arglist is like the non-program-framework command Play Life
;;; but the default is one

(define-life-command (com-step)
    ((generations '((integer 1 *))
		  :prompt "Number of generations"
		  :default 1))
   (step-generation self generations))

;;; maybe this should be called Randomize

(define-life-command (com-initialize)
    ()
   (initialize-board-with-cells self game-board)
   (display-game-board self))



;;; modify so that number-cells-on-axis becomes an argument
;;; instead of the old global variable

(defun make-game-board (number-cells-on-axis)
  (make-array (list (+ 2 number-cells-on-axis)
		    (+ 2 number-cells-on-axis))
	      :initial-element 0))	; cells dead at start
 
;;; now a method

(defmethod (step-generation life) (&optional (generations 1))
  (do ((i 0 (+ i 1)))
      ((= i generations))
    (calculate-next-board self)
    (display-game-board self)))

;;; just like previous version, except for changing global variable 
;;; *number-cells-on-axis* to state variable number-cells-on-axis
;;; Note that this macro can be used only in methods of life

(defmacro do-over-board ((x y) &body body)
  `(do ((,y 1 (+ 1 ,y)))
       ((= ,y number-cells-on-axis))
     (do ((,x 1 (+ 1 ,x)))
	 ((= ,x number-cells-on-axis))
       ,@body)))

;;; now a method

(defmethod (initialize-board-with-cells life) (board)
  (do-over-board (x y)
    (setf (aref board x y) (random 2))))

;;; now a method,
;;; also changed output from the destination *standard-output*
;;; to the destination of the display-pane

(defmethod (display-game-board life) ()
  (let ((pane (send dw:*program-frame* :get-pane 'display)))
    (graphics:with-room-for-graphics
       (pane (+ 10 (* 5 number-cells-on-axis)))
      (do-over-board (x y)
	(let ((cell-status (aref game-board x y)))
	  (cond ((= 0 cell-status))
		((= 1 cell-status)
		 (let ((xdraw (* x 5)) (ydraw (* y 5)))
		   (graphics:draw-rectangle 
		     xdraw ydraw (+ xdraw 5) (+ ydraw 5)
		     :stream pane)))
		(t (error "Unrecognized cell status."))))))))


;;; just like previous version, except that it is a method,
;;; and the names of global variables are changed to the
;;; state variables

(defmethod (calculate-next-board life) ()
  (do-over-board (x y)
    ;; For each cell, count the number of live neighbors, and apply
    ;; the Life rules to see whether cell should live or die in the
    ;; next generation.
    (let* ((live-neighbors 
	     (+ (aref game-board x (1- y))
		(aref game-board x (1+ y))
		(aref game-board (1- x) y)
		(aref game-board (1+ x) y)
		(aref game-board (1- x) (1- y))
		(aref game-board (1- x) (1+ y))
		(aref game-board (1+ x) (1- y))
		(aref game-board (1+ x) (1+ y))))
	   (next-status
	     (cond ((= 0 (aref game-board x y))	;dead cell
		    (if (= live-neighbors 3) 1 0))
		   (t				;live cell
		    (if (or (= live-neighbors 2) 
			    (= live-neighbors 3)) 
			1 0)))))
      (setf (aref next-game-board x y) next-status)))
  ;; Switch next and current boards
  (rotatef game-board next-game-board))

