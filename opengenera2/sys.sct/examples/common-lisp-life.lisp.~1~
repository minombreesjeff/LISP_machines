;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (SAGE:SANS-SERIF-BODY SAGE::TYPEWRITER :NORMAL) "CPTFONT");;; Both *game-board* and *next-game-board* are 2-d arrays that store
;;; the state of the Life game board.  They both have an outer border
;;; composed of dead cells, which makes it convenient to compute the
;;; number of live neighbors.  The inner part contains cells that are
;;; initialized randomly dead or alive.  A live cell has the value 1; a
;;; dead cell has the value 0.

;;; This variable controls the size of the Life game board. 
(defvar *number-cells-on-axis*  30
  "Number of cells on each axis of game board")

(defun make-game-board ()
  (make-array (list (+ 2 *number-cells-on-axis*)
		    (+ 2 *number-cells-on-axis*))
0	      1:initial-element 0))0              1; all dead cells to start

;;; *game-board* stores the current state of the Life game board
(defvar *game-board* (make-game-board))

;;; *next-game-board* stores the upcoming state of the Life game board
(defvar *next-game-board* (make-game-board))

(defmacro do-over-board ((x y) &body body)
  `(do ((,y 1 (+ 1 ,y)))
       ((= ,y *number-cells-on-axis*))
     (do ((,x 1 (+ 1 ,x)))
	 ((= ,x *number-cells-on-axis*))
       ,@body)))

(defun initialize-board-with-cells (board)
  "Initialize inner part of the array with cells.
Cells are randomly chosen to be alive or dead."
  (do-over-board (x y)
    (setf (aref board x y)
	  (random 2))))

(defun display-game-board ()
  0(format t "~2%")
1  (do-over-board (x y)
    (when (= x 1) (terpri))
    (let ((cell-status (aref *game-board* x y)))
      (cond ((= 0 cell-status) (format t " "))
	    ((= 1 cell-status) (format t "0O1"))
	    (t (error "Unrecognized cell status."))))))

(defun play-life-game (&optional (generations 0101))
  (initialize-board-with-cells *game-board*)
0  1(display-game-board)0                          1;display 0th generation
  (step-generation generations))

(defun step-generation (&optional (generations 1))
  0(dotimes (ignore generations)
1    (calculate-next-board)
    (display-game-board)))

(defun calculate-next-board ()
  (do-over-board (x y)
    ;; For each cell, count the number of live neighbors, and apply
    ;; the Life rules to see whether cell should live or die in the
    ;; next generation.
    (let* ((live-neighbors 
	     (+ (aref *game-board* x (1- y))
		(aref *game-board* x (1+ y))
		(aref *game-board* (1- x) y)
		(aref *game-board* (1+ x) y)
		(aref *game-board* (1- x) (1- y))
		(aref *game-board* (1- x) (1+ y))
		(aref *game-board* (1+ x) (1- y))
		(aref *game-board* (1+ x) (1+ y))))
	   (next-status
0	     1(cond ((= 0 (aref *game-board* x y))0	1;dead cell
		    (if (= live-neighbors 3) 1 0))
0		   1(t0				1;live cell
		     (if (or (= live-neighbors 2) 
			     (= live-neighbors 3)) 
			 1 0)))))
      (setf (aref *next-game-board* x y) next-status)))
  ;; Switch next and current boards
  (rotatef *game-board* *next-game-board*))