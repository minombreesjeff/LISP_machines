;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; A simple example of conditional AVV display.
;;; This reads one of a set of possibilities and then reads a second
;;; value whose type depends on the first.
(defun choose-display-method ()
  (fresh-line)
  (let ((redisplay-type 'none)
	(redisplay-option nil))
    (dw:accepting-values ()
      (setq redisplay-type (accept '((alist-member
				       :alist (("None" :value none
						:documentation "No automatic redisplay")
					       ("String" :value string
						:documentation "Specify a string to display")
					       ("Function" :value function
						:documentation "Specify a function to call to generate output"))))
				   :prompt "Redisplay method"
				   :default redisplay-type))
      ;; conditionally read the second value
      (ecase redisplay-type
	(none
	  (setq redisplay-option nil))
	(string
	  (setq redisplay-option (accept 'string :prompt "Redisplay string"
					 :default nil)))
	(function
	  (setq redisplay-option (accept 'sys:function-spec
					 :prompt "Redisplay function"
					 :default nil))))
      (values redisplay-type redisplay-option))))

;;; This function reads a rows of numbers, always prompting for the value
;;; for one more row (sort of like options in the namespace editor).
(defun read-rows-of-numbers ()
  (let ((item-list nil))
    (fresh-line)
    ;; This uses :resynchronize-every-pass because of the particularly
    ;; complex redisplay.
    (dw:accepting-values (t :resynchronize-every-pass t)
      (let ((cache (make-array (length item-list)
			       :fill-pointer t
			       :initial-contents item-list)))
	;; read all the existing rows
	(loop for count below (length cache)
	      for item = (elt cache count)
	      ;; plus one more at the end
	      finally (let ((last (accept '((sequence integer))
					  :prompt (format nil "Numbers in row ~D" (1+ count))
					  :default nil)))
			(when last
			  (vector-push-extend last cache)))
	      do
	  (let ((new-item (accept '((sequence integer))
				  :prompt (format nil "Numbers in row ~D" (1+ count))
				  :default item)))
	    (setf (elt cache count)
		  new-item)))
	(setq item-list (coerce cache 'list))))
    item-list))

;;; this example demonstrates the use of command buttons in the cells of a table

(defun eight-puzzle (&optional array (s *standard-output*))
  (assert (or (null array) (and (arrayp array) (= (array-rank array) 2))))
  (when (null array)  ;initialize an array with a random setup
    (setq array (make-array '(3 3)))
    (let ((1d (make-array '(9) :displaced-to array)))
      (loop for val from 1 to 8 do
	(let ((index (random 9)))
	  (loop until (null (aref 1d index)) do (setq index (mod (1+ index) 9)))
	  (setf (aref 1d index) val)))))
  (dw:accepting-values (s)
    (formatting-table (s)
      (loop for r below 3 do
	(formatting-row (s)
	  (loop for c below 3
		for val = (aref array r c) do
	    (formatting-cell (s)
	      (cond ((null val)
		     (dw:with-redisplayable-output (:stream s :unique-id (+ (* r 3) c) :cache-value val)
		       (princ #\space s)))
		    ((and ( r 0) (null (aref array (1- r) c)))
		     (dw:accept-values-command-button (s :query-identifier (+ (* r 3) c)
							 :who-line-documentation-string "Move this up")
						      (princ val s)
		       (rotatef (aref array r c) (aref array (1- r) c))))
		    ((and ( r 2) (null (aref array (1+ r) c)))
		     (dw:accept-values-command-button (s :query-identifier (+ (* r 3) c)
							 :who-line-documentation-string "Move this down")
						      (princ val s)
		       (rotatef (aref array r c) (aref array (1+ r) c))))
		    ((and ( c 0) (null (aref array r (1- c))))
		     (dw:accept-values-command-button (s :query-identifier (+ (* r 3) c)
							 :who-line-documentation-string "Move this left")
						      (princ val s)
		       (rotatef (aref array r c) (aref array r (1- c)))))
		    ((and ( c 2) (null (aref array r (1+ c))))
		     (dw:accept-values-command-button (s :query-identifier (+ (* r 3) c)
							 :who-line-documentation-string "Move this right")
						      (princ val s)
		       (rotatef (aref array r c) (aref array r (1+ c)))))
		    (T
		     (dw:with-redisplayable-output (:stream s :unique-id (+ (* r 3) c) :cache-value val)
		       (princ val s))))))))))
  array)

