;;; -*- Mode: Lisp; Base: 8;  Package: SYSTEM-INTERNALS; Lowercase: yes -*-

;;;; File system primitives
;;; This desperately wants to use LMFS defstorage, so that the damn things
;;; can be displayed.

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defmacro deffepblock (name &body definition)
  `(progn
     ,@(loop for elem in definition
	     with fields = nil
	     for index from 0
	     when (atom elem)
	       collect `(defsubst ,elem (array)
			  (aref array ',index))
		 into defs
	       and do (push elem fields)
	     else when (atom (car elem))
		    collect (selectq (cadr elem)
			      (:string
			       (let ((start-index index)
				     (end-index (+ index (// (caddr elem) 4))))
				 (setq index (1- end-index))
				 (push (car elem) fields)
				 `(defsubst ,(car elem) (array)
				    (string-from-word-array array ',start-index ',end-index))))
			      (:unsigned
			       (push (car elem) fields)
			       `(defsubst ,(car elem) (array)
				  (unsigned-aref array ',index)))
			      ((:undefined :included)
			       (incf index (1- (caddr elem)))
			       ''nil)
			      (otherwise
			       (ferror "Unknown option ~S" elem)))
		      into defs
	     else nconc (loop for (name ppss) in elem
			      do (push name fields)
			      collect `(defsubst ,name (array)
					 (ldb ,ppss (aref array ',index))))
		    into defs
	     finally (return `((defprop ,name ,(nreverse fields) fepblock-fields)
			       ,@defs)))))

(defmacro make-fep-string (string)
  (when (> (string-length string) 4)
    (ferror "Only 4 characters can fit in a 32-bit word: string ~A is too long." string))
  (let ((const 0))
    (loop for i below (string-length string)
	  as char = (aref string i)
	  do (setq const `(dpb (char-code ',char) (byte 8 ,(* i 8)) ,const)))
    const))

(defun unsigned-aref (array index)
  (logand (aref array index) (1- 1_32.)))

(defun unsigned-aset (val array index)
  (aset (if (ldb-test (byte 1 37) val) (- (- 1_32. val)) val) array index))

(cl:defsetf unsigned-aref (array index) (store)
  `(unsigned-aset ,store ,array ,index))

(defun string-from-word-array (array starting-word ending-word)
  ;; Yes, Virginia, this conses two strings.
  (let ((string (make-array (* (- ending-word starting-word) 4) :type 'art-string)))
    (loop named top
	  for windex from starting-word below ending-word
	  with sindex = 0
	  do (loop for word = (aref array windex) then (lsh word -8)
		   repeat 4
		   do (aset (code-char (ldb (byte 8 0) word)) string sindex)
		      (incf sindex)))
    (string-right-trim '(#,(code-char 0)) string)))

(defun string-to-word-array (string array starting-word ending-word)
  (loop for windex from starting-word below ending-word
	with sindex = 0 and slength = (string-length string)
	do (setf (aref array windex)
		 (loop while (< sindex slength)
		       repeat 4
		       for lsh upfrom 0 by 8
		       sum (lsh (ldb (byte 8 0) (char-code (aref string sindex))) lsh)
		       do (incf sindex)))))

(cl:defsetf string-from-word-array (array starting-word ending-word) (val)
  `(string-to-word-array ,val ,array ,starting-word ,ending-word))
