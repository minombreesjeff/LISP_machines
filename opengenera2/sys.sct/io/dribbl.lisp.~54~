;;; -*- Syntax: Zetalisp; base: 8;mode: lisp; package: system-internals; lowercase: t-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;This binds STANDARD-OUTPUT and STANDARD-INPUT and enters a new read-eval-print
;loop.  SETQ'ing them would be global for all processes and would leave you
;totally shafted if the file connection broke.
;[This comment is obsolete.  STANDARD-INPUT and STANDARD-OUTPUT are usually
;bound per-process.  -CWH]

(defun inside-dribble? ()
  (typep standard-output 'dribble-stream))

(defun dribble-start (pathname &optional editor-p (concatenate-p t) (debugger-p nil))
  "Copy input and output to a file, or an editor buffer with second arg of T"
  (cond ((inside-dribble?)
	 (format t "~&Output is already being recorded.~%")
	 (values))
	(t (setq pathname
		 (fs:merge-pathnames pathname
				     (fs:default-pathname nil nil :text)))
	   (prog1
	     (with-open-stream
	       (dribble-stream
		 (make-instance 'dribble-stream
				:tv-stream terminal-io
				:file-stream
				(if (not editor-p)
				    (open pathname ':direction ':output ':error ':reprompt)
				    (zwei:make-file-buffer-stream pathname concatenate-p))))
	       (format t "~&Output is now being recorded.~%")
	       (let ((standard-input  dribble-stream)
		     (standard-output dribble-stream)
		     (error-output    dribble-stream)
		     (query-io        dribble-stream)
		     (trace-output    dribble-stream))
		 (let-if debugger-p
			 ((debug-io dribble-stream))
		  (catch 'dribble-end
		   ;; Do what LISP-COMMAND-LOOP does, but without re-binding streams to syn streams
		   ;; terminal-io and debug-io remain attached to the terminal, the others get filed
		   (lisp-command-loop-internal "Dribbling Lisp Listener")))))
	     (format t "~&Output is no longer being recorded.~%")))))

(defun dribble-end ()
  (cond ((not (inside-dribble?))
	 (format t "~&Output is not currently being recorded.~%")
	 (values))
	(t (throw 'dribble-end (send standard-output :close)))))


(defflavor dribble-stream
	((in-input-editor nil)
	 (rubout-handler-buffer (make-array 100. :type 'art-fat-string :fill-pointer 0))
	 file-stream
	 tv-stream
	 (which-operations nil))		     
	()
  (:initable-instance-variables file-stream tv-stream)
  (:required-init-keywords :file-stream :tv-stream))

(defmethod (:tyo dribble-stream) (&rest args)
  (lexpr-send tv-stream :tyo args)
  (lexpr-send file-stream :tyo args))

(defmethod (:string-out dribble-stream) (&rest args)
  (lexpr-send tv-stream :string-out args)
  (lexpr-send file-stream :string-out args))

(defmethod (:line-out dribble-stream) (&rest args)
  (lexpr-send tv-stream :line-out args)
  (lexpr-send file-stream :line-out args))

(defmethod (:fresh-line dribble-stream) (&rest args)
  (lexpr-send file-stream :fresh-line args)
  (lexpr-send tv-stream :fresh-line args))

(defmethod (:tyi dribble-stream) (&rest args)
  (unwind-protect-case ()
      (let ((ch (lexpr-send tv-stream :tyi args)))
	(when (and in-input-editor
		   (characterp ch))
	  (array-push-extend rubout-handler-buffer ch))
	ch)
    (:abort (setf (fill-pointer rubout-handler-buffer) 0))))

(defmethod (:any-tyi dribble-stream) (&rest args)
  (unwind-protect-case ()
      (let ((ch (lexpr-send tv-stream :any-tyi args)))
	(when (and in-input-editor
		   (characterp ch))
	  (array-push-extend rubout-handler-buffer ch))
	ch)
    (:abort (setf (fill-pointer rubout-handler-buffer) 0))))

(defmethod (:untyi dribble-stream) (ch)
  (when (and in-input-editor
	     (plusp (fill-pointer rubout-handler-buffer))
	     (characterp ch))
    (decf (fill-pointer rubout-handler-buffer)))
  (send tv-stream :untyi ch))

(defmethod (:replace-input dribble-stream) (n-chars string &optional (begin 0) end &rest args)
  (when in-input-editor
    (setf string (string string))
    (let ((chars (cond ((fixp n-chars) n-chars)
		       ((stringp n-chars) (string-length n-chars))
		       ((null n-chars) (fill-pointer rubout-handler-buffer)))))		   
      (setf (fill-pointer rubout-handler-buffer)
	    (max 0 (- (fill-pointer rubout-handler-buffer)
		      chars))))
    (array-push-portion-extend rubout-handler-buffer string begin end))
  (lexpr-send tv-stream :replace-input n-chars string begin end args))

;;; Just doing tv-stream version would send back to incorrect self.
(defmethod (:replace-input-since dribble-stream) (location &rest args)
  (lexpr-send self :replace-input (- (send tv-stream :read-location) location) args))

(defwhopper (:input-editor dribble-stream) (read-function &rest read-args)
  (let ((*input-editor-stream* self))
    (lexpr-continue-whopper read-function read-args))) 

(defmethod (:input-editor dribble-stream) (&rest args)
  (setf (fill-pointer rubout-handler-buffer) 0)
  (multiple-value-prog1
    (letf ((in-input-editor t))
      (lexpr-send tv-stream :input-editor args))
    (send file-stream :string-out rubout-handler-buffer)))

(defmethod (:close dribble-stream) (&optional abort-p)
  (send file-stream :close abort-p)
  (send-if-handles file-stream :truename))

(defmethod (:unclaimed-message dribble-stream) (op &rest args)
  (lexpr-send tv-stream op args))

(defwhopper (:which-operations dribble-stream) ()
  (or which-operations
      (setq which-operations (append (continue-whopper)
				     (send tv-stream :which-operations)))))

(defwhopper (:operation-handled-p dribble-stream) (operation)
  (or (operation-handled-p tv-stream operation)
      (continue-whopper operation)))

(defmethod (:send-if-handles dribble-stream) (operation &rest args)
  (when (send self :operation-handled-p operation)
    (lexpr-send self operation args)))

;;; Have to establish contour around whole thing
(defmethod (:print dribble-stream) (object &rest args)
  (lexpr-funcall #'si:print-with-sensitivity self object args))

(defmethod (:output-as-presentation dribble-stream)
	   (continuation xstream &rest args)
  (lexpr-send tv-stream :output-as-presentation continuation xstream args))

(defmethod (:output-as-presentation-1 dribble-stream)
	   (continuation continuation-args &rest args)
  (lexpr-send tv-stream :output-as-presentation-1 continuation continuation-args args))

;;; Now that this is operation-handled-p, we need to get it right.
(defmethod (dw::accept-1 dribble-stream) (presentation-type &rest args)
  (declare (dbg:invisible-frame :accept-internals))
  (lexpr-funcall #'dw::accept-2 presentation-type args))

(compile-flavor-methods dribble-stream)



#||
(local-declare ((special *tv-stream* *file-stream* *rubout-handler-buffer*))
(defun make-dribble-stream (*tv-stream* *file-stream*)
  (let ((*rubout-handler-buffer* (make-array 100.
					     ':type 'art-string
					     ':fill-pointer 0)))
    (closure '(*tv-stream* *file-stream* *rubout-handler-buffer*)
	     'dribble-stream-io)))

(defun dribble-stream-io (op &rest args)
  (selectq op
    ((:tyo :string-out :line-out :fresh-line)
     (lexpr-funcall *tv-stream* op args)
     (lexpr-funcall *file-stream* op args))
    ((:tyi :any-tyi)
     (prog ()
	   (catch (if rubout-handler 'input-editor-rescan 'dummy-tag)
	     (let ((ch (funcall *tv-stream* op)))
	       (if (and rubout-handler (fixp ch))
		   (array-push-extend *rubout-handler-buffer* ch))
	       (return ch)))
	   ;;get here if someone threw to input-editor-rescan
	   ;;reset our buffer and continue the throw
	   (setf (fill-pointer *rubout-handler-buffer*) 0)
	   (send *tv-stream* :force-rescan)))
    (:untyi
     (if (and rubout-handler (> (fill-pointer *rubout-handler-buffer*) 0))
	 (array-pop *rubout-handler-buffer*))
     (send *tv-stream* op (car args)))
    (:input-editor
     (setf (fill-pointer *rubout-handler-buffer*) 0)	;reset the buffer
     (multiple-value-prog1
       (lexpr-funcall *tv-stream* op args)
       (funcall *file-stream* ':string-out *rubout-handler-buffer*)))
    ((:dribble-end :close)
     (close *file-stream*)
     (send-if-handles *file-stream* ':truename))
    (:increment-cursorpos
     (cond ((eq (caddr args) ':character)
	    (dotimes (y-increment (cadr args))
	      (funcall *file-stream* ':tyo #\return))
	    (dotimes (x-increment (car args))
	      (funcall *file-stream* ':tyo #\sp))))
     (lexpr-funcall *tv-stream* op args))
    (otherwise
     (lexpr-funcall *tv-stream* op args))))
);local-declare
||#
