;;; -*- Mode: LISP; Package: SI; Base: 8; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Mini chaosnet program. 
;;; For no good reason it knows chaos packet opcodes non-symbolicly

(defvar mini-destination-address)
(defvar mini-routing-address)
(defvar mini-ether-address)
(defvar mini-packet-index)
(defvar mini-packet)
(defvar mini-packet-max)
(defvar mini-packet-string)
(defvar mini-open-p)
(defvar mini-packet-opcode)
(defvar mini-eof-seen)
(defvar mini-open-file)
(defvar mini-unique-id)
(defvar mini-local-index)
(defvar mini-remote-index)
(defvar mini-packet-number-in)
(defvar mini-packet-number-out)

;;; At compile time record the various data for accessing file computer
(defmacro remember-access-path ()
  (let* ((host (funcall (funcall si:fdefine-file-pathname ':translated-pathname) ':host))
	 (address (send host ':chaos-address))
	 (subnet (ldb (byte 10 10) address)))
    `(setq mini-destination-address ,address
	   mini-routing-address ,(if (= chaos:my-subnet subnet)
				     address
				     (aref chaos:*routing-table* subnet)))))

(remember-access-path)

;; 16 bit increment
(defmacro inc-16 (x)
  `(logand 177777 (1+ ,x)))

(defmacro incf-16 (x)
  `(setf ,x (inc-16 ,x)))

;;;
;;; later, the 3600 side of the house probably wants to use the protocol
;;; defined for IMACH's, too...  Later...
;;;
(defsubst mini-packet-available ()
  #+3600 (neq neti:%net-received-list -1)
  #+IMACH (neti:epacket-listen))

;;; Contact name<space>user<space>password
(defvar mini-contact-name "MINI LISPM ")
 
(defun mini-init ()
  (neti:mini-interface-reset-and-enable)
  (setq mini-open-p nil
	mini-packet nil)
  (unless (variable-boundp mini-local-index)
    (setq mini-local-index (logand 177777 (sys:%microsecond-clock))))
  (unless (variable-boundp mini-packet-string)
    (setq mini-packet-string
	  (make-array 750			;Maximum packet length
		      ':type 'art-string
		      ':displaced-to ""
		      ':displaced-index-offset
		      (+ (* #+3600 (1- neti:software-epacket-size)
			    #+imach (1- neti:epacket-header-size)
			    #||
			    (%pointer-difference
			      (locf (neti:epacket-duplicate-first-word epacket))
			      (aloc epacket 0))
			    ||#
			    4)
			 (* (1+ 10) 2)))))
  nil)

(defun mini-open-connection ()
  (unless (variable-boundp mini-local-index)
    (mini-init))
  (setq mini-open-p nil)
  (mini-free-packet)
  (loop until (neti:mini-resolve-chaos-address mini-routing-address)
	for epacket = (neti:packet-ether-packet
			(neti:sub-packet-packet (mini-allocate-packet)))
	do (neti:mini-request-chaos-resolution epacket mini-routing-address)
	   (mini-get-next-packet 500000)	;1/2 second
	   (mini-free-packet))
  (incf-16 mini-local-index)
  (setq mini-remote-index 0
	mini-packet-number-in 0
	mini-packet-number-out 1)
  (loop repeat 10
	do (mini-transmit-string 1 mini-contact-name)
	   (wait-for-open)
	if mini-open-p
	do (return t)
	finally (mini-error "RFC failure")))


(defun ether-mini-open-file (filename binary-p)
  (setq mini-open-file filename
	mini-eof-seen nil
	mini-packet-index 0
	mini-packet-max -1)
  (when (or (not (variable-boundp mini-open-p))
	    (not mini-open-p))
    (mini-open-connection))
  (loop if (not (mini-packet-available))
	do (mini-transmit-string (if binary-p 201 200) filename)
	for opcode = (mini-get-next-packet)
	do (selectq opcode
	     ((2 14)
	      (mini-free-packet)
	      (mini-send-status))	;OPN or EOF left over
	     ((202 203)				;Won or lost
	      (incf-16 mini-packet-number-in)
	      (incf-16 mini-packet-number-out)
	      (let* ((length (logand 7777 (aref mini-packet 1)))
		     (cr (string-search-char #\CR mini-packet-string
					     0 length)))
		;; Before pathnames and time parsing is loaded truename
		;; stored as strings, time is actual bignum (Can't use
		;; QFILE any more, must use NFILE
		(setq mini-unique-id
		      (cons (substring mini-packet-string 0 cr)
			    (let ((b1 (char-code (aref mini-packet-string (+ cr 1))))
				  (b2 (char-code (aref mini-packet-string (+ cr 2))))
				  (b3 (char-code (aref mini-packet-string (+ cr 3))))
				  (b4 (char-code (aref mini-packet-string (+ cr 4)))))
			      (make-32-bit-number (dpb b2 (byte 8 8) b1)
						  (dpb b4 (byte 8 8) b3))))))
	      (mini-free-packet)
	      (mini-send-status)		;Ack this packet
	      (if (= opcode 202)
		  (return t)
		  (mini-error "Mini open failed ~S ~S" mini-unique-id filename)))
	     (otherwise
	      (mini-free-packet))))
  (if binary-p
      #'mini-binary-stream
      #'mini-ascii-stream))

(deff mini-open-file 'ether-mini-open-file)

;Stream which does only 16-bit TYI
(defun mini-binary-stream (operation &optional arg1 arg2 arg3 arg4)
  (selectq operation
    (:which-operations '(:tyi :untyi :tyipeek :string-in :read-input-buffer :element-type))
    ((:tyi :tyipeek)
     (cond (mini-eof-seen nil)
	   ((< mini-packet-index mini-packet-max)
	    (prog1 (aref mini-packet mini-packet-index)
		   (when (eq operation ':tyi)
		     (incf mini-packet-index))))
	   (t					;Need new packet
	    (mini-get-data-packet t)		;Get next packet
	    (selectq mini-packet-opcode
	      (14				;EOF
	       (mini-free-packet)
	       (mini-send-status)		;Acknowledge the EOF
	       (setq mini-eof-seen t)
	       nil)				;and tell caller
	      (300				;Data
	       (mini-binary-stream operation))	;Recursive call
	      (otherwise
	       (mini-error "Unrecognized opcode received" operation))))))
    (:untyi (decf mini-packet-index)
	    (aset arg1 mini-packet mini-packet-index))
    (:read-input-buffer
     (if (and ( mini-packet-index mini-packet-max)
	      (not (let ((tem (mini-binary-stream :tyi)))
		     (when tem
		       (mini-binary-stream :untyi tem)
		       t))))
	 nil					;EOF
       (values mini-packet mini-packet-index mini-packet-max)))
    ;; This is needed by FASLOAD
    (:string-in
     (unless arg3 (setq arg3 0))
     (unless arg4 (setq arg4 (array-active-length arg2)))
     (loop for index from arg3 below arg4
	   do (aset (mini-binary-stream ':tyi) arg2 index)))
    (:element-type '(cl:unsigned-byte 16.))
    (otherwise
     (mini-stream-default-handler 'mini-binary-stream operation arg1))))

(defun mini-ascii-stream (operation &optional arg1 &rest rest)
  (selectq operation
    (:which-operations '(:tyi :untyi :tyipeek :read-input-buffer))
    ((:tyi :tyipeek)
     (cond (mini-eof-seen nil)
	   ((< mini-packet-index mini-packet-max)
	    (prog1 (aref mini-packet-string mini-packet-index)
		   (when (eq operation ':tyi)
		     (incf mini-packet-index))))
	   (t					;Need new packet
	    (mini-get-data-packet nil)		;Get next packet
	    (selectq mini-packet-opcode
	      (14				;EOF
	       (mini-free-packet)
	       (mini-send-status)		;Acknowledge the EOF
	       (setq mini-eof-seen t)
	       (when arg1
		 (mini-error "EOF"))		;EOF option
	       nil)				;and tell caller
	      (200				;Data
	       (mini-ascii-stream operation))	;Recursive call
	      (otherwise
	       (mini-error "Unrecognized opcode received" operation))))))
    (:untyi (decf mini-packet-index)
	    (aset arg1 mini-packet-string mini-packet-index))
    (:read-input-buffer
     (if (and ( mini-packet-index mini-packet-max)
	      (not (let ((tem (mini-ascii-stream :tyi)))
		     (when tem
		       (mini-ascii-stream :untyi tem)
		       t))))
	 nil					;EOF
       (values mini-packet-string mini-packet-index mini-packet-max)))
    (otherwise
     (lexpr-funcall #'mini-stream-default-handler 'mini-ascii-stream operation arg1 rest))))

(defun mini-stream-default-handler (function operation arg1 &rest rest)
  (selectq operation
    (:advance-input-buffer
     (setq mini-packet-index (or arg1 mini-packet-max)))
    (:close
     (loop until mini-eof-seen
	   do (funcall function ':tyi)))
    (:info
     mini-unique-id)
    (:generic-pathname-and-plist
     (let ((plist (assoc mini-open-file *cold-loaded-file-property-lists*)))
       (unless plist
	 (setq plist (list mini-open-file nil nil))
	 (push plist *cold-loaded-file-property-lists*))
       (values mini-open-file (locf (second plist))
	       mini-open-file (locf (third plist)))))
    (:truename
     (car mini-unique-id))
    (otherwise
     (stream-default-handler function operation arg1 rest))))

(defun mini-allocate-packet ()
  (loop for packet = (neti:allocate-packet-buffer nil)
	when packet
	return (neti:mini-packet-chaos-packet packet)
	when (mini-packet-available)
	do (mini-get-next-packet 1)
	   (mini-free-packet)))

(defun mini-free-packet ()
  (when mini-packet
    (neti:deallocate-packet-buffer mini-packet)
    (setq mini-packet nil)))

(defun mini-send-status ()
  (let ((pkt (mini-allocate-packet)))
    (aset mini-packet-number-in pkt 10)		;Receipt
    (aset 1 pkt 11)				;Window size
    (mini-transmit-packet pkt 7 4)))		;STS

(defun mini-transmit-string (opcode string)
  (let ((pkt (mini-allocate-packet)))
    (change-mini-packet-string pkt)
    (copy-array-contents string mini-packet-string)
    (mini-transmit-packet pkt opcode (array-active-length string))))

(defun mini-transmit-packet (packet opcode length)
  (aset (lsh opcode 8) packet 0)
  (aset length packet 1)
  (aset mini-destination-address packet 2)
  (aset mini-remote-index packet 3)
  (aset chaos:my-address packet 4)
  (aset mini-local-index packet 5)
  (aset mini-packet-number-out packet 6)	;Packet number
  (aset mini-packet-number-in packet 7)		;Ack number
  (neti:mini-transmit-chaos-packet packet mini-routing-address))

(defun mini-get-next-packet (&optional (timeout 5000000))
  (when mini-packet
    (mini-error "MINI-PACKET about to be lost"))
  (let ((start (sys:%microsecond-clock)))
    (loop do
      (unless (mini-packet-available)
	(process-wait "Mini"
	  #'(lambda (start timeout)
	      (or (mini-packet-available)
		  (not (<= 0
			   (sys:%32-bit-difference (sys:%microsecond-clock) start)
			   timeout))))
	  start timeout))
      (unless (mini-packet-available)
	(setf mini-packet-opcode nil)
	(return))
      (setq mini-packet (neti:mini-receive-next-chaos-pkt))
      (when (and mini-packet
		 (= (aref mini-packet 2) chaos:my-address)
		 (= (aref mini-packet 3) mini-local-index))
	(setq mini-packet-opcode (lsh (aref mini-packet 0) -8))
	(change-mini-packet-string mini-packet)
	(return))
      (mini-free-packet)))
  (selectq mini-packet-opcode
    ((3 11)					;CLS or LOS
     (let ((msg (make-array (logand 7777 (aref mini-packet 1)) ':type 'art-string))
	   (source-address (aref mini-packet 4))
	   (source-index (aref mini-packet 5)))
       (copy-array-contents mini-packet-string msg)
       (mini-free-packet)
       (mini-error "connection ~A by ~O[~O]: ~S"
		   (if (= mini-packet-opcode 3) "closed" "broken")
		   source-address source-index msg))))
  mini-packet-opcode)

(defun mini-get-data-packet (binary-p)
  (when mini-packet
    (mini-free-packet)
    (mini-send-status))				;Ack the previous packet
  (loop	for opcode = (mini-get-next-packet) do
    (selectq opcode
      ((2 7)					;OPN
       (mini-free-packet))
      ((14 202 203 200 300)			;EOF, win, lose, Data, data
       (when (= (aref mini-packet 6)
		(inc-16 mini-packet-number-in))
	 (incf-16 mini-packet-number-in)	;Another packet in
	 (let ((data-length (logand 7777 (aref mini-packet 1))))
	   (if binary-p
	       (setq mini-packet-max (+ 10 (// data-length 2))
		     mini-packet-index 10)
	       (setq mini-packet-index 0
		     mini-packet-max data-length)))
	 (return opcode))
       (mini-free-packet)
       (when mini-open-p
	 (mini-send-status)))
      (otherwise
       (mini-free-packet)
       (when mini-open-p
	 (mini-send-status))))))

(defun wait-for-open ()
  (let ((opcode (mini-get-next-packet)))
    (when (eql opcode 2)			;Open
      (setq mini-remote-index (aref mini-packet 5)
	    mini-packet-number-in (aref mini-packet 6))
      (mini-free-packet)
      (incf-16 mini-packet-number-out)
      (mini-send-status)
      (setq mini-open-p t))))

(defun change-mini-packet-string (packet)
  (unless (arrayp packet)
    (mini-error "change-mini-packet-string on ~s" packet))
  (setq packet (si:array-indirect-to packet))
  (setf (array-indirect-pointer mini-packet-string) packet)
  (array-register-event)
  nil)

;; Really ends up calling ferror-cold-load
(defun mini-error (&rest args)
  (setq mini-open-p nil)
  (lexpr-funcall #'ferror args))
