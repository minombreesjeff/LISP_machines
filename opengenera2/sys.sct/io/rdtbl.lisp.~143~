;;; -*- Mode: LISP; Package: SYSTEM-INTERNALS; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DECLARE (ERROR '|If you are compiling this, and not using RTC, you are losing|))

;;; Explanation of negative character codes:
;;;  These represent "abstract" characters; the first two are non-character things
;;;  we can read from the stream, while the remainder stand for character classes
;;;  that the user can assign to characters without making a new readtable.
;;;  These negative numbers do not appear anywhere in the readtable that results
;;;  from compiling this file.
;;;  See the SAVE-SYNTAX option at the end of this file.
;;;	-1	Any character slashified
;;;	-2	End-of-file
;;;	-3	Break: a token separator that can't be ignored
;;;	-4	Single-character token
;;;	-5	Whitespace: a token separator that can be thrown away
;;;	-6	Macro: a macro-character, also a token separator
;;;	-7	Alphabetic
;;;	-8	Single-character dot: A token separator except when used as a decimal point
;;;	-9	Non-terminating macro: a macro-character but not a token separator

;;; Note: -8 (single-character dot) doesn't work, or rather doesn't do what you want,
;;; according to Bawden

;;; Explanation of RDTBL-CODE
;;;  Each character is mapped into a code that is then used along with the current
;;;  state as an index into the finite-state-machine transition table.  The mapping
;;;  of characters to codes makes the FSM smaller since some characters have the same
;;;  code (the FSM doesn't need to distinguish among them).

;;; Explanation of RDTBL-BITS
;;;  The readtable also contains a 16-bit bit mask for each character, describing
;;;  its various attributes.  These are used by both READ and PRINT.
;;;  See the BITS option at the end of this file.
;;;	   1	Whitespace
;;;	   2	Character quote (/)
;;;	   4	Circlecross for octal character escapes ()
;;;	  10	String quote (")
;;;	  20	Symbol quote (|)
;;;	  40	Digit scale (^)
;;;	 100	Bit scale (_)
;;;	 200	Decimal point (.)
;;;	 400	Plus sign (+)
;;;	1000	Minus sign (-)
;;;	2000	Digit (or extended digit, i.e. letter)

;;; Character class definitions

(MAC  NUMBER '(// #/0 #/1 #/2 #/3 #/4 #/5 #/6 #/7 #/8 #/9)
      EXTENDED-NUMBER (CONS '// (DO ((I (CHAR-CODE #/A) (1+ I))	;For IBASE > 10.
				     (J (CHAR-CODE #/a) (1+ J))
				     (L (CDR NUMBER) (LIST* (CODE-CHAR I) (CODE-CHAR J) L)))
				    ((> I (CHAR-CODE #/Z)) L)))
      ONE #/1
      PLUS-MINUS '(// #/+ #/-)
      PLUS #/+
      DOT #/.
      RATIO-CHAR #/\
      ;; All exponent characters defined by Common Lisp
      EXPONENT '(// #/E #/e #/S #/s #/F #/f #/D #/d #/L #/l)
      ;; Exponent characters that imply particular precisions
      FF #+CADR '(// #/F #/f #/D #/d #/L #/l)
         #-CADR '(// #/S #/s #/F #/f)
      #+CADR SS #+CADR '(// #/S #/s)
      #-CADR DD #-CADR '(// #/D #/d #/L #/l)
      LSH-SCALE '(// #/_ #/^)
      SHARP-SIGN #/#
      OPEN #/(
      CLOSE #/)
      STRING-START-CHAR #/"
      QUOTED-SYMBOL-START-CHAR #/|
      SEMICOLON #/;
      COLON #/:
      CRLF #\CR
      NULL '(//)
;     ALPHA-BETA-EPSILON '(// #/ #/ #/ #/ #/ˆ)
      INFINITY #/
      SLASHIFIED-CHAR -1				;SLASHIFIED CHARS TO BE MAPED TO -1.
      EOF-CHAR -2					;EOF IS MAPPED TO -2.
      SINGLE-CHARACTER-DOT -8		;Still acts as a decimal point.
      DECIMAL-POINT '(// #/. -8)	;All decimal points
      WHITE-SPACE-CHAR '(// #\SP #\TAB #\LINE #\PAGE #\CR -5)	;-5 IS WHITESPACE SYNTAX
      BREAK (NCONC '(// #/( #/) #/' #/` #/, #/" #/| #/; -2 -3	;-3 IS BREAK SYNTAX
			-4 -6 -8)
		   (CDR WHITE-SPACE-CHAR))
      MACRO-CHARACTER '(// #/' #/, #/; #/` -6 -9)	;-6 IS MACRO SYNTAX, -9 NON-TERM
      STANDALONE-CHAR '(// -4 -8)			;-4 IS SINGLE SYNTAX
      ANY (CONS '// (NCONC (DO ((I -9 (1+ I))		;Magic number -9 is biggest syntax code used 
				(X NIL (CONS I X)))
			       ((ZEROP I) X))
			   (DO ((I 0 (1+ I))
				(X NIL (CONS (CODE-CHAR I) X)))
			       ((= I RDTBL-ARRAY-SIZE) X))))
      ANY-BUT-EOF (DELETE -2 ANY))

;;; Begin token-recognizer FSM definitions

;;; A readtable definition looks like (DEF name regular-expression type).
;;; "name" is the name of the kind of token.  It has a function to process the
;;;   string, on its property list, OR it is a symbol to be returned.
;;; "regular-expression" is a regular expression.
;;; "type" is a symbol indicating what to do with the last character
;;; recognized by the regular expression.

(DEF STRING
     STRING-START-CHAR
     LAST-CHAR)

(DEF QUOTED-SYMBOL
     QUOTED-SYMBOL-START-CHAR
     LAST-CHAR)

;;; Numbers

;Integers in base 10 or below
(DEF INTEGER
     (! (U NULL PLUS-MINUS)
	(+ NUMBER)
	(U (- BREAK DECIMAL-POINT)
	   (! DECIMAL-POINT BREAK)
	   (! (U NULL DECIMAL-POINT)
	      LSH-SCALE
	      (U NULL PLUS)
	      (+ NUMBER)
	      (U (- BREAK DECIMAL-POINT)
		 (! DECIMAL-POINT BREAK)))))
     UNTYI-FUNCTION)

;Tokens that can be either floating-point numbers, integers in bases larger than 10,
;or symbols, depending on the settings of various flags.  Special cases where the
;exponent implies a particular precision go first, like all special cases of other syntaxes.
#+CADR
(DEF SMALL-FLONUM-OR-EXTENDED-INTEGER
     (! (U NULL PLUS-MINUS)
	(+ NUMBER)
	SS
	(+ NUMBER)
	BREAK)
     UNTYI-FUNCTION) 

#-CADR
(DEF DOUBLE-OR-EXTENDED-INTEGER
     (! (U NULL PLUS-MINUS)
	(+ NUMBER)
	DD
	(+ NUMBER)
	BREAK)
     UNTYI-FUNCTION) 

(DEF NORMAL-FLONUM-OR-EXTENDED-INTEGER
     (! (U NULL PLUS-MINUS)
	(+ NUMBER)
	FF
	(+ NUMBER)
	BREAK)
     UNTYI-FUNCTION)

(DEF FLONUM-OR-EXTENDED-INTEGER
     (! (U NULL PLUS-MINUS)
	(+ NUMBER)
	EXPONENT
	(+ NUMBER)
	BREAK)
     UNTYI-FUNCTION)

;Special cases of floating-point numbers where the exponent implies a particular precision
#+CADR
(DEF SMALL-FLONUM
     (! (U NULL PLUS-MINUS)
	(* NUMBER)
	(U (! DECIMAL-POINT
	      (+ NUMBER)
	      SS
	      (U NULL PLUS-MINUS)
	      (+ NUMBER))
	   (! NUMBER
	      (U NULL DECIMAL-POINT)
	      SS
	      (U NULL PLUS-MINUS)
	      (+ NUMBER)))
	BREAK)
     UNTYI-FUNCTION)

#-CADR
(DEF DOUBLE
     (! (U NULL PLUS-MINUS)
	(* NUMBER)
	(U (! DECIMAL-POINT
	      (+ NUMBER)
	      DD
	      (U NULL PLUS-MINUS)
	      (+ NUMBER))
	   (! NUMBER
	      (U NULL DECIMAL-POINT)
	      DD
	      (U NULL PLUS-MINUS)
	      (+ NUMBER)))
	BREAK)
     UNTYI-FUNCTION)

(DEF NORMAL-FLONUM
     (! (U NULL PLUS-MINUS)
	(* NUMBER)
	(U (! DECIMAL-POINT
	      (+ NUMBER)
	      FF
	      (U NULL PLUS-MINUS)
	      (+ NUMBER))
	   (! NUMBER
	      (U NULL DECIMAL-POINT)
	      FF
	      (U NULL PLUS-MINUS)
	      (+ NUMBER)))
	BREAK)
     UNTYI-FUNCTION)

(DEF FLONUM
     (! (U NULL PLUS-MINUS)
	(* NUMBER)
	(U (! DECIMAL-POINT
	      (+ NUMBER)
	      (U NULL
		 (! EXPONENT
		    (U NULL PLUS-MINUS)
		    (+ NUMBER))))
	   (! NUMBER
	      (U NULL DECIMAL-POINT)
	      EXPONENT
	      (U NULL PLUS-MINUS)
	      (+ NUMBER)))
	BREAK)
     UNTYI-FUNCTION)

#-CADR
(DEF SINGLE-FLOATING-INFINITY
     (! PLUS-MINUS
	ONE
	FF
	INFINITY
	BREAK)
     UNTYI-FUNCTION)

#-CADR
(DEF DOUBLE-FLOATING-INFINITY
     (! PLUS-MINUS
	ONE
	DD
	INFINITY
	BREAK)
     UNTYI-FUNCTION)

(DEF FLOATING-INFINITY
     (! PLUS-MINUS
	ONE
	EXPONENT
	INFINITY
	BREAK)
     UNTYI-FUNCTION)

;Tokens that could be integers in bases larger than 10 or symbols depending on flags.
;Special cases of this that could also be floating-point have been handled above.
(DEF EXTENDED-INTEGER
     (! (U NULL PLUS-MINUS)
	(+ EXTENDED-NUMBER)
	(U BREAK
	   (! LSH-SCALE
	      (U NULL PLUS)
	      (+ EXTENDED-NUMBER)
	      (U (- BREAK DECIMAL-POINT)
		 (! DECIMAL-POINT BREAK)))))
     UNTYI-FUNCTION)

;Last kind of number: ratio of two integers
(DEF RATIO
     (! (U NULL PLUS-MINUS)
	(+ NUMBER)
	RATIO-CHAR
	(+ NUMBER)
	BREAK)
     UNTYI-FUNCTION)

;;; Non-numeric tokens

(DEF SHARP-SLASH
     (! SHARP-SIGN
	(U NULL #||(+ ALPHA-BETA-EPSILON)||# (+ NUMBER))
	SLASHIFIED-CHAR)
     LAST-CHAR)

(DEF SHARP-THING
     (! SHARP-SIGN
	(U NULL #||(+ ALPHA-BETA-EPSILON)||# (+ NUMBER))
	(- ANY-BUT-EOF (U #|| ALPHA-BETA-EPSILON ||# NUMBER)))
     LAST-CHAR)

(DEF SHARP-EOF
     (! SHARP-SIGN
	(U NULL #||(+ ALPHA-BETA-EPSILON)||# (+ NUMBER))
	EOF-CHAR)
     LAST-CHAR)

(DEF LIST OPEN LAST-CHAR)

(DEF CONSING-DOT
     (! DOT BREAK)
     UNTYI-QUOTE)

;Symbol or an error depending on a flag
(DEF MULTI-DOT-TOKEN
     (! DOT (+ DOT) BREAK)
     UNTYI-FUNCTION)

(DEF CLOSE CLOSE NO-UNTYI-QUOTE)

(DEF EOF EOF-CHAR NO-UNTYI-QUOTE)

(DEF MACRO-CHAR
     MACRO-CHARACTER
     LAST-CHAR)

;Single-character symbol
(DEF SC-SYMBOL
     STANDALONE-CHAR
     NO-UNTYI-FUNCTION)

(DEF PACKAGE-PREFIX
     (! (* (- ANY-BUT-EOF (U COLON BREAK)))
	COLON)
     LAST-CHAR)

;;;We have to rule out prefixes of integers and flonums so that the
;;;single-character-dot doesn't cause "123." to read in as a symbol named
;;;"123" followed by a symbol named ".".
(DEF SYMBOL
     (- (! (+ (- ANY-BUT-EOF (- BREAK DECIMAL-POINT)))
	   BREAK)
	(! (U NULL PLUS-MINUS)
	   (+ NUMBER)
	   (U DECIMAL-POINT
	      (! (U NULL DECIMAL-POINT)
		 LSH-SCALE
		 (U NULL PLUS)
		 (+ NUMBER)
		 DECIMAL-POINT))))
     UNTYI-FUNCTION)

;;; Options to RTC

(OPT WHITE-SPACE-CHAR (CDR WHITE-SPACE-CHAR))
(OPT MACRO-ALIST '((#/' . XR-QUOTE-MACRO)
		   (#/; . XR-COMMENT-MACRO)
		   (#/` . XR-BACKQUOTE-MACRO)
		   (#/, . XR-COMMA-MACRO)))
(OPT /#-MACRO-ALIST '((#/' . XR-/#/'-MACRO)
		      (#/\ . XR-/#/\-MACRO)
		      (#/^ . XR-/#/^-MACRO)
		      (#/, . XR-/#/,-MACRO)
		      (#/. . XR-/#/.-MACRO)
		      (#/Q . XR-/#/Q-MACRO)
		      (#/M . XR-/#/M-MACRO)
		      (#/N . XR-/#/N-MACRO)
		      (#/+ . XR-/#/+-MACRO)
		      (#/- . XR-/#/--MACRO)
		      (#/B . XR-/#/B-MACRO)
		      (#/C . XR-/#/C-MACRO)
		      (#/O . XR-/#/O-MACRO)
		      (#/R . XR-/#/R-MACRO)
		      (#/X . XR-/#/X-MACRO)
		      (#/: . XR-/#/:-MACRO)
		      (#/| . XR-/#/|-MACRO)
		      (#/ . INFIX-READ)))
(OPT READ-FUNCTION-PROPERTY 'STANDARD-READ-FUNCTION)
(OPT SLASH #//)
(OPT CIRCLECROSS #/)
(OPT SLASHIFIED-CHAR SLASHIFIED-CHAR)
(OPT EOF-CHAR EOF-CHAR)
(OPT A-BREAK-CHAR -3)					;For the reader to use.
(OPT MAKE-SYMBOL '(SC-SYMBOL))				;Who makes symbols
(OPT MAKE-SYMBOL-BUT-LAST '(SYMBOL			;and how.
			    EXTENDED-INTEGER))
(OPT BITS '((#/" 10)					;Bits to be ored into readtable.
	    (#/| 20)
	    (#/^ 40)
	    (#/_ 100)
	    (#/. 200)
	    (#/+ 400)
	    (#/- 1000)
	    (NUMBER 2000)
	    (EXTENDED-NUMBER 2000)))
(OPT SAVE-SYNTAX '(SINGLE -4				;Placed in plist of readtable
		   SLASH #//				; with syntax bits replacing
		   CIRCLECROSS #/			; character numbers.
		   WHITESPACE -5
		   MACRO -6
		   BREAK -3
		   ALPHABETIC -7
		   DOUBLEQUOTE #/"
		   VERTICALBAR #/|
		   DIGITSCALE #/^
		   BITSCALE #/_
		   SINGLE-CHARACTER-DOT -8
		   NON-TERMINATING-MACRO -9
		   ))
(OPT TRANSLATIONS '(((#/a  #/z)  (#/A  #/Z))))		;Translations may be pairs of
							;intervals (inclusive) or just chars

(OPT PROPERTY '(:READ-MULTI-DOT-SYMBOLS T))		;Allow ... as a symbol

(END READTABLE)						;The symbol whose value cell will
							;be loaded with the readtable
