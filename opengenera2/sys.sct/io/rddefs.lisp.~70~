;;; Definitions for the -*-Package:SYSTEM-INTERNALS; Mode:LISP; Base:8-*- machine reader
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; WARNING! if you change anything in this file be sure and look in
;;; LMIO;RTCMAC > as well. Not only might you have to recompile READ and PRINT,
;;; but you may have to recompile LMIO;RTC >,
;;; and you may have to recompile LMIO;RDTBL > (using RTC).
;;; Sorry, Alan, this defstruct needs colons which means it probably won't work in Maclisp

(DEFSTRUCT (RDTBL :ARRAY-LEADER
                  (:CONSTRUCTOR MAKE-RDTBL)
		  (:MAKE-ARRAY (:LENGTH (RDTBL-ARRAY-DIMS) :TYPE 'ART-16B))
		  (:DEFAULT-POINTER RDTBL)
		  (:SIZE-MACRO RDTBL-SIZE))
	   RDTBL-FSM					;sacred
	   RDTBL-NAMED-STRUCTURE-SYMBOL
	   RDTBL-N-STATES
	   RDTBL-N-BUCKETS
	   RDTBL-STARTING-STATE
	   RDTBL-SLASH-CODE
	   RDTBL-EOF-CODE
	   RDTBL-BREAK-CODE
	   RDTBL-MACRO-ALIST
	   RDTBL-READ-FUNCTION-PROPERTY
	   RDTBL-PLIST
           RDTBL-DEFINITION
	   RDTBL-MAKE-SYMBOL
	   RDTBL-MAKE-SYMBOL-BUT-LAST
           RDTBL-SLASH
           RDTBL-WHITESPACE
           RDTBL-CIRCLECROSS
	   (PTTBL-SPACE			#\SP	)
	   (PTTBL-NEWLINE		#\CR	)
	   (PTTBL-CONS-DOT 		" . "	)
	   (PTTBL-MINUS-SIGN 		#/-	)
	   (PTTBL-DECIMAL-POINT 	#/.	)
	   (PTTBL-SLASH 		#//	)
	   (PTTBL-PRINLEVEL 		"**"	)
	   (PTTBL-PRINLENGTH 		" ...)"	)
	   (PTTBL-OPEN-RANDOM 		"#<"	)
	   (PTTBL-CLOSE-RANDOM 		">"	)
	   (PTTBL-OPEN-PAREN 		#/(	)
	   (PTTBL-CLOSE-PAREN 		#/)	)
	   (PTTBL-OPEN-QUOTE-STRING 	#/"	)
	   (PTTBL-CLOSE-QUOTE-STRING	#/"	)
	   (PTTBL-OPEN-QUOTE-SYMBOL 	#/|	)
	   (PTTBL-CLOSE-QUOTE-SYMBOL 	#/|	)
	   (PTTBL-PACKAGE-CHAR 		#/:	)
	   RDTBL-/#-MACRO-ALIST
	   (PTTBL-INTERNAL-PACKAGE-PREFIX "::"  )
	   (PTTBL-UNINTERNED-PREFIX	"#:"	)
	   (PTTBL-RATIO			#/\	)
	   )


(DEFSUBST READTABLE-APPROPRIATE-FILE-SYNTAX (RDTBL)
  (CL:GETF (RDTBL-PLIST RDTBL) 'APPROPRIATE-FILE-SYNTAX))

(DEFSUBST READTABLE-NAME (RDTBL)
  (CL:GETF (RDTBL-PLIST RDTBL) 'NAME))

(DEFSELECT ((:PROPERTY READTABLE NAMED-STRUCTURE-INVOKE))
  (:PRINT-SELF (READTABLE STREAM IGNORE IGNORE)
	       (SI:PRINTING-RANDOM-OBJECT (READTABLE STREAM)
		 (WHEN (READTABLE-APPROPRIATE-FILE-SYNTAX READTABLE)
		   (LET* ((REAL-SYNTAX (LISP-SYNTAX-FROM-KEYWORD
					 (READTABLE-APPROPRIATE-FILE-SYNTAX READTABLE)))
			  (SYNTAX-NAME (IF REAL-SYNTAX (LISP-SYNTAX-EXTERNAL-NAME REAL-SYNTAX)
					   (READTABLE-APPROPRIATE-FILE-SYNTAX READTABLE))))
		     (FORMAT STREAM "~A " SYNTAX-NAME)))
		 (FORMAT STREAM "READTABLE")
		 (WHEN (READTABLE-NAME READTABLE)
		   (FORMAT STREAM " ~A" (READTABLE-NAME READTABLE))))))

(DEFVAR RDTBL-ARRAY-SIZE 240)

(DEFMACRO RDTBL-ARRAY (&OPTIONAL (P 'RDTBL))
	  P)

(DEFMACRO RDTBL-ARRAY-DIMS ()
	  `',(LIST 3 RDTBL-ARRAY-SIZE))

(DEFMACRO RDTBL-BITS (RDTBL CHAR-CODE)
	    `(AREF ,RDTBL 0 ,CHAR-CODE))

(DEFMACRO RDTBL-CODE (RDTBL CHAR-CODE)
	    `(AREF ,RDTBL 1 ,CHAR-CODE))

(DEFMACRO RDTBL-TRANS (RDTBL CHAR-CODE)
	    `(AREF ,RDTBL 2 ,CHAR-CODE))

(DEFMACRO RDTBL-LIMIT (RDTBL)
  `(ARRAY-DIMENSION-N 2 ,RDTBL))

#-NEW-FORMAT-READTABLE
(DEFMACRO OUT-OF-BOUNDS-RDTBL-BITS (RDTBL CHAR-CODE)
  RDTBL CHAR-CODE
  0)
;;`(RDTBL-BITS ,RDTBL (1- RDTBL-ARRAY-SIZE)))

#-NEW-FORMAT-READTABLE
(DEFMACRO OUT-OF-BOUNDS-RDTBL-CODE (RDTBL CHAR-CODE)
  RDTBL CHAR-CODE
  `(RDTBL-CODE ,RDTBL (1- RDTBL-ARRAY-SIZE)))
;;`(%1d-aref ,RDTBL (+ 1 (* 3 (CHAR-CODE #/A)))))

#+NEW-FORMAT-READTABLE
(DEFMACRO OUT-OF-BOUNDS-RDTBL-BITS (RDTBL CHAR-CODE)
	    `(RDTBL-DEFAULT-BITS ,RDTBL))

#+NEW-FORMAT-READTABLE
(DEFMACRO OUT-OF-BOUNDS-RDTBL-CODE (RDTBL CHAR-CODE)
	    `(RDTBL-DEFAULT-CODE ,RDTBL))

(COMMENT

(DEFVAR XR-CHARACTER-NAME-ARRAY (MAKE-ARRAY 400 ':INITIAL-VALUE NIL))

(DEFVAR XR-MOUSE-CHARACTER-NAME-ARRAY (MAKE-ARRAY 400 ':INITIAL-VALUE NIL))

(DEFVAR XR-CHARACTER-NAME-HASH-TABLE
	(MAKE-INSTANCE 'CASE-INSENSITIVE-EQUAL-HASH-TABLE ':SIZE 300.))

(DEFMACRO MOUSE-CHAR-INDEX (BUTTON N-CLICKS) `(+ ,BUTTON (* ,N-CLICKS 3)))

(DEFUN XR-INITIALIZE-CHARACTER-NAMES (NAMES MOUSE-NAMES)
  (SEND XR-CHARACTER-NAME-HASH-TABLE ':CLEAR-HASH)
  (FILL-ARRAY XR-CHARACTER-NAME-ARRAY NIL NIL)
  (FILL-ARRAY XR-MOUSE-CHARACTER-NAME-ARRAY NIL NIL)
  (DOLIST (X NAMES)
    (LET* ((CODE (CAR X))
	   (CHAR (CODE-CHAR CODE))
	   (GOOD-NAME (CADR X)))
      (WHEN (LISTP GOOD-NAME)
	;; The good name is machine-dependent
	(LET ((LIST GOOD-NAME))
	  (SETQ GOOD-NAME (GET (LOCF LIST) 'SYMBOLICS))
	  (LOOP FOR (NIL NAME) ON LIST BY 'CDDR
		DO (SEND XR-CHARACTER-NAME-HASH-TABLE ':PUT-HASH NAME CHAR))))
      (ASET GOOD-NAME XR-CHARACTER-NAME-ARRAY CODE)
      (OR (NULL GOOD-NAME)
	  (SEND XR-CHARACTER-NAME-HASH-TABLE ':PUT-HASH GOOD-NAME CHAR))
      (DOLIST (OTHER-NAME (CDDR X))
	(SEND XR-CHARACTER-NAME-HASH-TABLE ':PUT-HASH OTHER-NAME CHAR))))
  (DOLIST (X MOUSE-NAMES)
    (LET* ((BUTTON (CAAR X))
	   (N-CLICKS (CADAR X))
	   (MOUSE-CHAR (MAKE-MOUSE-CHAR BUTTON N-CLICKS))
	   (GOOD-NAME (CADR X)))
      (ASET GOOD-NAME XR-MOUSE-CHARACTER-NAME-ARRAY (MOUSE-CHAR-INDEX BUTTON N-CLICKS))
      (OR (NULL GOOD-NAME)
	  (SEND XR-CHARACTER-NAME-HASH-TABLE ':PUT-HASH GOOD-NAME MOUSE-CHAR))
      (DOLIST (OTHER-NAME (CDDR X))
	(SEND XR-CHARACTER-NAME-HASH-TABLE ':PUT-HASH OTHER-NAME MOUSE-CHAR)))))

(DEFUN XR-NAME-FROM-CHARACTER (CHAR)
  (IF (MOUSE-CHAR-P CHAR)
      (AREF XR-MOUSE-CHARACTER-NAME-ARRAY (MOUSE-CHAR-INDEX (CHAR-MOUSE-BUTTON CHAR)
							    (CHAR-MOUSE-N-CLICKS CHAR)))
      (AREF XR-CHARACTER-NAME-ARRAY (CHAR-CODE CHAR))))

(DEFUN XR-CHARACTER-FROM-NAME (NAME &OPTIONAL (START 0) END &AUX HASH-STRING)
  (OR (STRINGP NAME) (SETQ NAME (STRING NAME)))
  (IF (AND (ZEROP START)
	   (OR (NULL END)
	       (= (ARRAY-ACTIVE-LENGTH NAME) END)))
      (SEND XR-CHARACTER-NAME-HASH-TABLE ':GET-HASH NAME)
      (PROG1 (SEND XR-CHARACTER-NAME-HASH-TABLE ':GET-HASH
		   (SETQ HASH-STRING (SUBSTRING NAME START END)))
	     (RETURN-ARRAY HASH-STRING))))

;; Preferred name for FORMAT to use should be first, or () if it should
;; just use the character, or (machine name machine name...) if the preferred
;; name is machine-dependent.  Note that all machine's character names are
;; available to all other machines, but the preferred name for each machine
;; is the one that is written on its keyboard.

(XR-INITIALIZE-CHARACTER-NAMES
      '((0	"Center-Dot")
	(1	"Down-Arrow"
		"Downarrow"
		"Arrow-Down")
	(2	"Alpha")
	(3	"Beta")
	(4	"And-sign"
		"And")
	(5	"Not-sign"
		"Not")
	(6	"Epsilon")
	(7	"Pi")
	(10	"Lambda")
	(11	"Gamma")
	(12	"Delta")
	(13	"Up-Arrow"
		"Uparrow"
		"Arrow-Up")
	(14	"Plus-Minus"
		"Plus-Or-Minus"
		"Plus-Minus-sign"
		"Plus-Or-Minus-sign")
	(15	"Circle-Plus")
	(16	"Infinity")
	(17	"Partial-Delta"
		"Partial")
	(20	"Left-Horseshoe"
		"Left-Lump"
		"Subset")
	(21	"Right-Horseshoe"
		"Right-Lump")
	(22	"Up-Horseshoe"
		"Up-Lump"
		"Intersection")
	(23	"Down-Horseshoe"
		"Down-Lump"
		"Union")
	(24	"Universal-Quantifier"
		"For-All"
		"All")
	(25	"Existential-Quantifier"
		"There-Exists"
		"Exists")
	(26	"Circle-X"
		"Circle-Cross"
		"Circle-Times")
	(27	"Double-Arrow"
		"Doublearrow")
	(30	"Left-Arrow"
		"Leftarrow"
		"Arrow-Left")
	(31	"Right-Arrow"
		"Rightarrow"
		"Arrow-Right")
	(32	"Not-Equals"
		"Not-Equal")
	(33	"Lozenge"
		"Diamond")
	(34	"Less-Or-Equal"
		"Less-Or-Equals"
		"Less-Than-Or-Equal"
		"Less-Than-Or-Equals"
		"Less-Or-Equal-sign"
		"Less-Or-Equals-sign"
		"Less-Than-Or-Equal-sign"
		"Less-Than-Or-Equals-sign")
	(35	"Greater-Or-Equal"
		"Greater-Or-Equals"
		"Greater-Than-Or-Equal"
		"Greater-Than-Or-Equals"
		"Greater-Or-Equal-sign"
		"Greater-Or-Equals-sign"
		"Greater-Than-Or-Equal-sign"
		"Greater-Than-Or-Equals-sign")
	(36	"Equivalence"
		"Equivalence-sign")
	(37	"Or-sign"
		"Or")
	(40	"Space"
		"SP")
	(50     () "Open" "Open-parenthesis")
	(51	() "Close" "Close-parenthesis")
	(53	()
		"Plus-sign"
		"Plus")
	(55	()
		"Minus-sign"
		"Minus")
	(74	()
		"Less-sign"
		"Less-Than-sign"
		"Less"
		"Less-Than")
	(75	()
		"Equal-sign"
		"Equals-sign"
		"Equal"
		"Equals")
	(76	()
		"Greater-sign"
		"Greater-Than-sign"
		"Greater"
		"Greater-Than")
	(177	"Integral"
		"Integral-sign")
	(200	"Null"
		"Null-Character")
	(201	(symbolics "Suspend" CADR "Break")
		"BRK")
	(202	"Clear-Input"
		"Clear"
		"CLR")
	(203	(symbolics NIL CADR "Call"))
	(204	(symbolics "Function" CADR "Terminal"))
	(205	"Macro"			;untypeable on 3600
		"Backnext"
		"Back-Next")
	(206	"Help")
	(207	"Rubout")
	(210	(symbolics "Back-Space" CADR "Overstrike")
		"Backspace"
		"Over-Strike"
		"BS")
	(211	"Tab")
	(212	"Line"
		"LF"
		"Line-Feed"
		"Linefeed")
	(213	(symbolics "Refresh" CADR "Clear-Screen"))
	(214	"Page"
		"FF"
		"Form"
		"Form-Feed"
		"Formfeed")
	(215	"Return"
		"CR"
		"Carrage-Return"
		"Newline")
	(216	"Quote")		;untypeable on 3600
	(217	"Hold-Output")		;untypeable on 3600
	(220	"Stop-Output")		;untypeable on 3600
	(221	"Abort")
	(222	"Resume")
	(223	"Status")		;untypeable on 3600
	(224	"End")
	(225	(symbolics "Square" CADR "Roman-I")
		"Roman-1"
		"Roman-One")
	(226	(symbolics "Circle" CADR "Roman-II")
		"Roman-2"
		"Roman-Two")
	(227	(symbolics "Triangle" CADR "Roman-III")
		"Roman-3"
		"Roman-Three")
	(230	"Roman-IV"		;untypeable on 3600
		"Roman-IIII"
		"Roman-4"
		"Roman-Four")
	(231	"Hand-Up"		;untypeable on 3600
		"Up-Hand")
	(232	(symbolics "Scroll" CADR "Hand-Down")
		"Down-Hand")
	(233	"Hand-Left"		;untypeable on 3600
		"Left-Hand")
	(234	"Hand-Right"		;untypeable on 3600
		"Right-Hand")
	(235	(symbolics "Select" CADR "System"))
	(236	"Network")
	(237	(symbolics "Escape" CADR "Altmode")
		"Alt-Mode"
		"Alt"			;Maclisp's #\ALT is our lozenge
		"ESC")
	(240	"Complete")		;Labelled Delete on LM-2 keyboard
					; but the preferred name is Complete, the keyboard
					; is just considered to be mis-labelled.
	(241	(symbolics "Symbol-Help"	;Symbol/Help and Symbol/Shift/Help on 3600
		 CADR "Top-Help"))	;Top/Help, Greek/Help, and Front/Help on LM-2
	)
; The format of each mouse-char entries
; is ((BUTTON N-CLICKS) PREFERRED-NAME OTHER-NAME-1 OTHER-NAME-2 ....))
      '(((0 0)	"Mouse-L"
		"Mouse-L-1"
		"Mouse-1-1")
	((1 0)	"Mouse-M"
		"Mouse-M-1"
		"Mouse-2-1")
	((2 0)	"Mouse-R"
		"Mouse-R-1"
		"Mouse-3-1")
	((0 1)	"Mouse-L-2"
		"Mouse-1-2")
	((1 1)	"Mouse-M-2"
		"Mouse-2-2")
	((2 1)	"Mouse-R-2"
		"Mouse-3-2")
	((0 2)	"Mouse-L-3"
		"Mouse-1-3")
	((1 2)	"Mouse-M-3"
		"Mouse-2-3")
	((2 2)	"Mouse-R-3"
		"Mouse-3-3")
	))

)

;; Stuff below here rather than in READ since it is needed by machine dependent files as well

; A macro for aiding in the printing of random objects.
; This macro generates a form which:
;   1.  Uses the print-table to find the things in which to enclose your randomness.
;   2.  (by default) includes the virtual address in the printed representation.
;   3.  Obeys PRINT-READABLY
; Options are	:NO-POINTER to suppress the pointer
;		:TYPEP princs the typep of the object first.

; Example:
; (defstruct hacker ((:print-function hacker-printer) :conc-name)
;   name)
;  (defun hacker-printer (hacker stream ignore)
;     (SYS:PRINTING-RANDOM-OBJECT (HACKER STREAM :TYPEP)
;	(PRIN1 (HACKER-NAME HACKER) STREAM))))
; ==> #<HACKER "MMcM" 6172536765>

(DEFMACRO PRINTING-RANDOM-OBJECT ((OBJECT STREAM . OPTIONS) &BODY BODY)
  (DECLARE (ARGLIST (OBJECT STREAM . |Either of: :NO-POINTER or :TYPEP|) &BODY BODY))
  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;--- the following don't work. Too bad.
0  ;; (cl:check-type options (cl:sequence (cl:member :no-pointer :typep)))
  (MAPC #'(LAMBDA (OPTION)
	     (CL:CHECK-TYPE OPTION (CL:MEMBER :NO-POINTER :TYPEP)))
	OPTIONS)
  `(PRINTING-RANDOM-OBJECT-INTERNAL
     ,OBJECT ,STREAM
     ,(NULL (MEMQ :NO-POINTER OPTIONS))
     ,(NOT (NULL (MEMQ :TYPEP OPTIONS)))
     ,(AND BODY `#'(LAMBDA () ,@BODY))))

(DEFMACRO FUTURE-COMMON-LISP:PRINT-UNREADABLE-OBJECT
	  ((OBJECT STREAM &KEY TYPE IDENTITY) &BODY BODY)
  `(SI:PRINTING-RANDOM-OBJECT-INTERNAL ,OBJECT ,STREAM ,IDENTITY ,TYPE
				       ,(AND BODY `#'(LAMBDA () ,@BODY))))
