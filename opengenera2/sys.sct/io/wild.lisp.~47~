;;; -*- Mode: Lisp; Syntax: Zetalisp; Package: FS; Base: 8 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Match a string pattern possibly containing *'s against a datum.  Each * matches 0
;;; to any number of characters.  WILDCARD-MATCH is a predicate.  Although
;;; chiefly accessed via :PATHNAME-MATCH, LMFS uses it internally, when absolutely
;;; necessary during directory listing.
(DEFUN WILDCARD-MATCH (WILD-STRING STRING &OPTIONAL (START 0) (END (STRING-LENGTH STRING)))
  (OR (EQ WILD-STRING ':WILD)
      (EQUAL WILD-STRING "*")
      (LOOP WITH WILD-LENGTH = (STRING-LENGTH WILD-STRING)
	    FOR COMPARE-INDEX = START THEN (+ COMPARE-INDEX (- STAR-INDEX MATCH-INDEX))
	    FOR MATCH-INDEX = 0 THEN (1+ STAR-INDEX)
	    FOR STAR-INDEX = (STRING-SEARCH-CHAR #/* WILD-STRING MATCH-INDEX)
	    WHEN (NULL STAR-INDEX)			;Rest must match
	      RETURN (LET* ((WILD-LEFT  (- WILD-LENGTH MATCH-INDEX))
			    (STARTCMP (IF (ZEROP MATCH-INDEX)
					  COMPARE-INDEX
					  (- END WILD-LEFT))))
		       (AND (= (- END STARTCMP) WILD-LEFT)
			    ( STARTCMP START)
			    (%STRING-EQUAL WILD-STRING MATCH-INDEX
					   STRING STARTCMP
					   (- WILD-LENGTH MATCH-INDEX))))
	    ALWAYS (IF (ZEROP MATCH-INDEX)		;No star to the left
		       (%STRING-EQUAL WILD-STRING MATCH-INDEX STRING COMPARE-INDEX
				      (- STAR-INDEX MATCH-INDEX))
		       (SETQ COMPARE-INDEX
			     (STRING-SEARCH WILD-STRING STRING COMPARE-INDEX END
					    MATCH-INDEX STAR-INDEX))))))

(DEFMETHOD (:WILD-P PATHNAME) ()
  (COND ((SEND SELF ':DEVICE-WILD-P)	':DEVICE)
	((SEND SELF ':DIRECTORY-WILD-P)	':DIRECTORY)
	((SEND SELF ':NAME-WILD-P)	':NAME)
	((SEND SELF ':TYPE-WILD-P)	':TYPE)
	((SEND SELF ':VERSION-WILD-P)	':VERSION)))

(DEFMETHOD (:COMPONENT-WILD-P PATHNAME) (COMPONENT)
  (OR (EQ COMPONENT ':WILD)
      (AND (STRINGP COMPONENT)
	   (STRING-SEARCH-CHAR #/* COMPONENT))))

(DEFMETHOD (:DEVICE-WILD-P PATHNAME :DEFAULT) ()
  (SEND SELF ':COMPONENT-WILD-P DEVICE))

(DEFMETHOD (:DIRECTORY-WILD-P PATHNAME :DEFAULT) ()
  (SEND SELF ':WILD-DIRECTORY-P DIRECTORY))

(DEFMETHOD (:NAME-WILD-P PATHNAME :DEFAULT) ()
  (SEND SELF ':COMPONENT-WILD-P NAME))

(DEFMETHOD (:TYPE-WILD-P PATHNAME :DEFAULT) ()
  (SEND SELF ':COMPONENT-WILD-P TYPE))

(DEFMETHOD (:VERSION-WILD-P PATHNAME :DEFAULT) ()
  (SEND SELF ':COMPONENT-WILD-P VERSION))

;;; The following function (and its 5 callers) are used by functions which want to ensure that
;;; a given component will fit into whatever sized sack the underlying filesystem sets aside
;;; for it.  This would be a simple STRING-LENGTH except that *s could be standing in for zero
;;; characters so that a component of "*foo*" should be allowed even if the filesystem insists
;;; that the component be no more than four (or three, even) characters long.
;;; If a filesystem (DG's AOS comes to mind) uses a character other than * to mean match zero
;;; or more occurences, it needs its own function.
(DEFUN PATHNAME-COMPONENT-MIN-LENGTH (COMPONENT)
  (IF (STRINGP COMPONENT)
      (LOOP FOR STARS UPFROM 0
	    FOR I = (STRING-SEARCH-EXACT-CHAR #/* COMPONENT)
		    THEN (STRING-SEARCH-EXACT-CHAR #/* COMPONENT (1+ I))
	    UNTIL (NULL I)
	    FINALLY (RETURN (- (STRING-LENGTH COMPONENT) STARS)))
      0))

(DEFMETHOD (:DEVICE-MIN-LENGTH PATHNAME :DEFAULT) ()
  (PATHNAME-COMPONENT-MIN-LENGTH DEVICE))

(DEFMETHOD (:DIRECTORY-MIN-LENGTH PATHNAME :DEFAULT) ()
  (PATHNAME-COMPONENT-MIN-LENGTH DIRECTORY))

(DEFMETHOD (:NAME-MIN-LENGTH PATHNAME :DEFAULT) ()
  (PATHNAME-COMPONENT-MIN-LENGTH NAME))

(DEFMETHOD (:TYPE-MIN-LENGTH PATHNAME :DEFAULT) ()
  (PATHNAME-COMPONENT-MIN-LENGTH TYPE))

(DEFMETHOD (:VERSION-MIN-LENGTH PATHNAME :DEFAULT) ()
  (PATHNAME-COMPONENT-MIN-LENGTH VERSION))

(DEFMETHOD (:PATHNAME-MATCH PATHNAME) (OTHER-PATHNAME &OPTIONAL (MATCH-HOST T))
  (OR (EQ SELF OTHER-PATHNAME)
      (AND (EQ (TYPEP SELF) (TYPEP OTHER-PATHNAME))
	   (OR (NOT MATCH-HOST)
	       (SEND SELF :HOST-MATCH	HOST	  (SEND OTHER-PATHNAME :HOST)))
	   (SEND SELF :DEVICE-MATCH	DEVICE	  (SEND OTHER-PATHNAME :DEVICE))
	   ;; must send messages to self because message returns pathnames with - whereas
	   ;; internal variables have pathnames with _
	   (SEND SELF :DIRECTORY-MATCH	(SEND SELF :DIRECTORY)
		 (SEND OTHER-PATHNAME :DIRECTORY))
	   (SEND SELF :NAME-MATCH	(SEND SELF :NAME)
		 (SEND OTHER-PATHNAME :NAME))
	   (SEND SELF :TYPE-MATCH	(SEND SELF :TYPE)
		 (SEND OTHER-PATHNAME :TYPE))
	   (PATHNAME-VERSION-MATCH 
	     SELF
	     (SEND SELF :VERSION) (SEND OTHER-PATHNAME :VERSION)
	     (SEND SELF :VC-BRANCH) (SEND OTHER-PATHNAME :VC-BRANCH)
	     (SEND SELF :VC-VERSION) (SEND OTHER-PATHNAME :VC-VERSION)))))

(DEFMETHOD (:COMPONENT-MATCH PATHNAME) (WILD-COMPONENT OTHER-COMPONENT)
  (IF (EQ OTHER-COMPONENT ':WILD)
      (SETQ OTHER-COMPONENT "*"))
  (OR (EQ WILD-COMPONENT ':WILD)
      (EQUAL WILD-COMPONENT "*")
      (EQUAL WILD-COMPONENT OTHER-COMPONENT)
      (AND (STRINGP OTHER-COMPONENT)
	   (STRINGP WILD-COMPONENT)
	   (WILDCARD-MATCH WILD-COMPONENT OTHER-COMPONENT))))

(DEFMETHOD (:HOST-MATCH PATHNAME) (HOST1 HOST2)
  (EQ HOST1 HOST2))

(DEFMETHOD (:DEVICE-MATCH PATHNAME :DEFAULT) (WILD-DEVICE OTHER-DEVICE)
  (SEND SELF ':COMPONENT-MATCH WILD-DEVICE OTHER-DEVICE))

(DEFMETHOD (:DIRECTORY-MATCH PATHNAME :DEFAULT) (WILD-DIRECTORY OTHER-DIRECTORY)
  (OR (EQ WILD-DIRECTORY ':WILD)
      (EQUAL WILD-DIRECTORY "*")
      (EQUAL WILD-DIRECTORY OTHER-DIRECTORY)
      (PROGN (WHEN (STRINGP WILD-DIRECTORY)
	       (SETQ WILD-DIRECTORY (LIST WILD-DIRECTORY)))
	     (WHEN (STRINGP OTHER-DIRECTORY)
	       (SETQ OTHER-DIRECTORY (LIST OTHER-DIRECTORY)))
	     (OR (AND (NULL WILD-DIRECTORY) (NULL OTHER-DIRECTORY))
		 (AND WILD-DIRECTORY
		      (PROGN
			(IF (EQ WILD-DIRECTORY ':ROOT) (SETQ WILD-DIRECTORY NIL))
			(IF (EQ OTHER-DIRECTORY ':ROOT) (SETQ OTHER-DIRECTORY NIL))
			(COND ((NULL OTHER-DIRECTORY)
			       (MEMBER WILD-DIRECTORY '(NIL (:WILD-INFERIORS))))
			      ((NULL WILD-DIRECTORY) NIL)
			      (T
			       (LOOP FOR (WILD-C . WT) ON WILD-DIRECTORY
				     FOR OTHER ON OTHER-DIRECTORY
				     AS (OTHER-C . OT) = OTHER
				     WHEN (EQ WILD-C ':WILD-INFERIORS)
				     RETURN (OR (NULL WT)
						(LOOP FOR TAIL ON OTHER
						      THEREIS
						      (SEND SELF ':DIRECTORY-MATCH WT TAIL)))
				     ALWAYS
				     (AND (OR (AND WT OT)
					      (NOT (OR WT OT))
					      (AND (NOT OT) (EQUAL WT '(:WILD-INFERIORS))))
					  (SEND SELF ':COMPONENT-MATCH
						WILD-C OTHER-C)))))))))))

(DEFMETHOD (:NAME-MATCH PATHNAME :DEFAULT) (WILD-NAME OTHER-NAME)
  (SEND SELF ':COMPONENT-MATCH WILD-NAME OTHER-NAME))

(DEFMETHOD (:TYPE-MATCH PATHNAME :DEFAULT) (WILD-TYPE OTHER-TYPE)
  (SEND SELF ':COMPONENT-MATCH WILD-TYPE OTHER-TYPE))

(DEFMETHOD (PATHNAME-VERSION-MATCH PATHNAME :DEFAULT)
	   (WILD-VERSION OTHER-VERSION
			 WILD-VC-BRANCH OTHER-VC-BRANCH
			 WILD-VC-VERSION OTHER-VC-VERSION)
  (OR (MEMBER WILD-VERSION '(:WILD "*"))
      (AND (EQUAL WILD-VERSION OTHER-VERSION)
	   (SEND SELF :COMPONENT-MATCH WILD-VC-BRANCH OTHER-VC-BRANCH)
	   (OR (MEMBER WILD-VC-VERSION '(:WILD "*"))
	       (EQUAL WILD-VC-VERSION OTHER-VC-VERSION)))))

;;; SELF is the source wildcard pathname.  SOURCE-PATHNAME is the source truename.
;;; WILD-PATHNAME is the destination wildcard pathname.  Return the destination truename.
(DEFMETHOD (:TRANSLATE-WILD-PATHNAME PATHNAME) (WILD-PATHNAME SOURCE-PATHNAME)
  (LET ((PATTERN (IF (MEMQ VERSION '(:NEWEST :OLDEST))
		     (SEND SELF :NEW-VERSION :WILD)
		     SELF)))
    (UNLESS (SEND PATTERN :PATHNAME-MATCH SOURCE-PATHNAME)
      (FERROR "Attempt to translate pathname ~A, but it doesn't match the pattern.~@
	     The translation was ~A  ~A."
	      SOURCE-PATHNAME SELF WILD-PATHNAME)))  
  (LET ((SAME-SYNTAX-P (EQ (SEND (SEND SELF :HOST) :SYSTEM-TYPE)
			   (SEND (SEND WILD-PATHNAME :HOST) :SYSTEM-TYPE))))
    (MULTIPLE-VALUE-BIND (SOURCE-CANONICAL-TYPE SOURCE-ORIGINAL-TYPE)
	(SEND SOURCE-PATHNAME :CANONICAL-TYPE)
      (MULTIPLE-VALUE-BIND (DEV DIR NAM TYP VRS A-VC-BRANCH A-VC-VERSION)
	  (SEND SELF :TRANSLATE-WILD-INTERNAL WILD-PATHNAME
		(SEND SOURCE-PATHNAME :DEVICE)
		(SEND SOURCE-PATHNAME :DIRECTORY)
		(SEND SOURCE-PATHNAME (IF SAME-SYNTAX-P :RAW-NAME :NAME))
		(SEND SOURCE-PATHNAME (IF SAME-SYNTAX-P :RAW-TYPE :TYPE))
		(SEND SOURCE-PATHNAME :VERSION)
		SOURCE-CANONICAL-TYPE SOURCE-ORIGINAL-TYPE
		(SEND SOURCE-PATHNAME :VC-BRANCH)
		(SEND SOURCE-PATHNAME :VC-VERSION)
		SAME-SYNTAX-P
		)
	(SEND WILD-PATHNAME :NEW-PATHNAME :DEVICE DEV :DIRECTORY DIR
	      (IF SAME-SYNTAX-P :RAW-NAME :NAME) NAM (IF SAME-SYNTAX-P :RAW-TYPE :TYPE) TYP
	      :VERSION VRS
	      :VC-BRANCH A-VC-BRANCH
	      :VC-VERSION A-VC-VERSION
	      )))))


(DEFMETHOD (:TRANSLATE-WILD-INTERNAL PATHNAME) (WILD-PATHNAME SOURCE-DEVICE SOURCE-DIRECTORY
							      SOURCE-NAME
							      SOURCE-TYPE
							      SOURCE-VERSION
							      SOURCE-CANONICAL-TYPE
							      SOURCE-ORIGINAL-TYPE
							      &OPTIONAL
							      SOURCE-VC-BRANCH
							      SOURCE-VC-VERSION
							      SAME-SYNTAX-P
							      )
  (DECLARE (VALUES DEVICE DIRECTORY NAME TYPE VERSION VC-BRANCH VC-VERSION))
  (LET ((SOURCE-TYPE-1 (SEND WILD-PATHNAME :TYPE-FOR-NEW-CANONICAL-TYPE
			   SOURCE-CANONICAL-TYPE SOURCE-ORIGINAL-TYPE T)))	
    (MULTIPLE-VALUE-BIND (SELF-CANONICAL-TYPE SELF-ORIGINAL-TYPE)
	(SEND SELF :CANONICAL-TYPE)
      (LET ((SELF-TYPE (SEND WILD-PATHNAME :TYPE-FOR-NEW-CANONICAL-TYPE
			     SELF-CANONICAL-TYPE SELF-ORIGINAL-TYPE T)))
	(IF (OR (EQ TYPE :WILD)
		(NOT (SEND SELF :WILD-TYPE-P TYPE)))
	    (SETQ SELF-TYPE (SEND WILD-PATHNAME :CASE-TYPE SELF-TYPE)
		  SOURCE-TYPE-1 (SEND WILD-PATHNAME :CASE-TYPE SOURCE-TYPE-1))
	  (SETQ SELF-TYPE (SEND SELF :TYPE)
		SOURCE-TYPE-1 SOURCE-TYPE))
	(MULTIPLE-VALUE-BIND (TR-VERSION TR-VC-BRANCH TR-VC-VERSION)
	    (PATHNAME-TRANSLATE-WILD-VERSION
	      WILD-PATHNAME
	      (SEND SELF :VERSION) (SEND WILD-PATHNAME :VERSION) SOURCE-VERSION
	      (SEND SELF :VC-BRANCH) (SEND WILD-PATHNAME :VC-BRANCH) SOURCE-VC-BRANCH
	      (SEND SELF :VC-VERSION) (SEND WILD-PATHNAME :VC-VERSION) SOURCE-VC-VERSION)
	(VALUES (SEND WILD-PATHNAME :TRANSLATE-WILD-DEVICE
		      (SEND SELF :DEVICE)
		      (SEND WILD-PATHNAME :DEVICE)
		      SOURCE-DEVICE)
		(SEND WILD-PATHNAME :TRANSLATE-WILD-DIRECTORY
		      (SEND SELF :DIRECTORY)
		      (SEND WILD-PATHNAME :DIRECTORY)
		      SOURCE-DIRECTORY)
		(LET ((MESSAGE (IF SAME-SYNTAX-P :RAW-NAME :NAME)))
		  (SEND WILD-PATHNAME :TRANSLATE-WILD-NAME
			(SEND SELF MESSAGE)
			(SEND WILD-PATHNAME MESSAGE)
			SOURCE-NAME))
		(IF SAME-SYNTAX-P
		    (SEND WILD-PATHNAME :TRANSLATE-WILD-TYPE
			  (SEND SELF :RAW-TYPE)
			  (SEND WILD-PATHNAME :RAW-TYPE)
			  SOURCE-TYPE)
		    (SEND WILD-PATHNAME :TRANSLATE-WILD-TYPE
			  SELF-TYPE
			  (SEND WILD-PATHNAME :TYPE)
			  SOURCE-TYPE-1))
		TR-VERSION TR-VC-BRANCH TR-VC-VERSION)))))) 

;;; KLUDGE WARNING --- Binding this variable non-NIL suppresses the feature
;;; where a target wildcard carries the entire matched component when that 
;;; target wildcard is * alone.  That feature makes wildcard mapping non-invertible.
;;; Although convenient in user interfaces, that feature is for this reason
;;; intolerable when dealing with logical pathname translations, which must be
;;; invertible.   For justification for making it a variable, talk to
;;; ALPHABETIC-CASE-AFFECTS-STRING-COMPARISON.

(DEFVAR *SUPPRESS-TARGET-WILD-TOTAL-MATCH* NIL)

(DEFMETHOD (:TRANSLATE-WILD-PATHNAME-REVERSIBLE PATHNAME) (WILD-PATHNAME SOURCE-PATHNAME)
  (LET ((*SUPPRESS-TARGET-WILD-TOTAL-MATCH* T))
    (SEND SELF ':TRANSLATE-WILD-PATHNAME WILD-PATHNAME SOURCE-PATHNAME)))

;; This assumes that the wild components are really wild,
;; and that the source pathname really does match the wild pathnames.
(DEFUN TRANSLATE-PATHNAME-COMPONENT (SOURCE-WILD DESTINATION-WILD SOURCE)
  ;; Check for the most common case of source and destination being :WILD first.
  (STORE-CONDITIONAL (LOCF SOURCE-WILD) ':WILD "*")
  (STORE-CONDITIONAL (LOCF DESTINATION-WILD) ':WILD "*")
  (STORE-CONDITIONAL (LOCF SOURCE) :WILD "*")
  (COND ((AND (%STRING-EQUAL DESTINATION-WILD 0 "*" 0 NIL)	;SPECIAL CASE * TARGET = TAKE ALL
	      (NOT *SUPPRESS-TARGET-WILD-TOTAL-MATCH*))
						;(would otherwise have to be both source
						;and dest = *).  
	 (IF (EQUAL SOURCE "*")
	     :WILD
	     SOURCE))
	((NOT (STRINGP SOURCE))			;Not clear what to do for :UNSPECIFIC etc
	 SOURCE)
	(T (LET ((TRANSLATED (TRANSLATE-WILD-STRING SOURCE-WILD DESTINATION-WILD SOURCE)))
	     (IF (EQUAL TRANSLATED "*")
		 :WILD
		 TRANSLATED)))))

(DEFMETHOD (:TRANSLATE-WILD-DEVICE PATHNAME) (SW DW S)
  (IF (NOT (SEND SELF ':WILD-DEVICE-P DW)) DW
      (TRANSLATE-PATHNAME-COMPONENT SW DW S)))

(DEFMETHOD (:TRANSLATE-WILD-DIRECTORY PATHNAME) (SW DW S)
  (COND ((NOT (SEND SELF ':WILD-DIRECTORY-P DW))
	 DW)
        ;; This clause was broken (consequent missing) for over a year, nobody
	;; invoked it.  It tries to implement "wholly-wild target pattern takes all",
	;; rule 2 in FILES 1.6, (Release 5) extended for directories.  But I (BSG)
	;; don't think it's such a hot idea, and since nobody missed it, we'll comment
	;; it out and patch it out.  11/21/84
;	((AND (NOT *SUPPRESS-TARGET-WILD-TOTAL-MATCH*)
;	      (OR (EQ DW ':WILD)
;		  (EQUAL DW '(:WILD-INFERIORS))))
;	 S)
	((AND (SYMBOLP SW)
	      (NEQ SW ':WILD))
	 S)					;nil, unspecific, newest? This is not clear
	((AND (ATOM SW) (ATOM DW) (ATOM S))
	 (TRANSLATE-PATHNAME-COMPONENT SW DW S))
	(T (IF (EQ S ':WILD) (SETQ S '(:WILD)))
	   (OR (SEND SELF ':DIRECTORY-MATCH SW S)
	       (FERROR "Directory component ~S doesn't really match ~S." S SW))
	   (IF (EQ SW ':ROOT) (SETQ SW NIL))
	   (IF (EQ DW ':ROOT) (SETQ DW NIL))
	   (IF (EQ S ':ROOT) (SETQ S NIL))
	   (IF (STRINGP SW) (SETQ SW (LIST SW)))	;yucch!
	   ;; Attempt interface between hierarchical and non-hierarchical systems.
	   ;; * on a non-hierarchical system is ambigious as to whether it should match
	   ;; * or ** on a hierarchical one.
	   (IF (EQ SW ':WILD)
	       (IF (LISTP DW)
		   (SETQ SW (IF (MEMQ ':WILD-INFERIORS DW)
				'(:WILD-INFERIORS)
				'(:WILD)))))
	   (IF (EQ DW ':WILD)
	       (IF (LISTP SW)
		   (SETQ DW (IF (MEMQ ':WILD-INFERIORS SW)
				'(:WILD-INFERIORS)
				'(:WILD)))))
	   (IF (STRINGP DW) (SETQ DW (LIST DW)))
	   (IF (STRINGP S) (SETQ S (LIST S)))
	   (OR (TRANSLATE-WILD-LIST SELF SW DW S) ':ROOT))))

(DEFMETHOD (:TRANSLATE-WILD-NAME PATHNAME) (SW DW S)
  (IF (NOT (SEND SELF ':WILD-NAME-P DW)) DW
    (TRANSLATE-PATHNAME-COMPONENT SW DW S)))

(DEFMETHOD (:TRANSLATE-WILD-TYPE PATHNAME) (SW DW S)
  (IF (NOT (SEND SELF ':WILD-TYPE-P DW)) DW
    (TRANSLATE-PATHNAME-COMPONENT SW DW S)))

(DEFMETHOD (PATHNAME-TRANSLATE-WILD-VERSION PATHNAME)
	   (SW-VERSION DW-VERSION S-VERSION
		       SW-VC-BRANCH DW-VC-BRANCH S-VC-BRANCH
		       SW-VC-VERSION DW-VC-VERSION S-VC-VERSION)
  SW-VERSION SW-VC-VERSION
  (IF (SEND SELF :WILD-VERSION-P DW-VERSION)
      (VALUES (IF (EQ S-VERSION :UNSPECIFIC)
		  :NEWEST
		  S-VERSION)
	      S-VC-BRANCH
	      S-VC-VERSION)
      (VALUES (IF (EQ DW-VERSION :UNSPECIFIC)
		  :NEWEST
		  DW-VERSION)
	      (IF (NOT (SEND SELF :WILD-VC-BRANCH-P DW-VC-BRANCH))
		  DW-VC-BRANCH
		  (TRANSLATE-PATHNAME-COMPONENT SW-VC-BRANCH DW-VC-BRANCH S-VC-BRANCH))
	      (COND ((NOT (SEND SELF :WILD-VC-VERSION-P DW-VC-VERSION))
		     DW-VC-VERSION)
		    (T
		     (IF (EQ S-VC-VERSION :UNSPECIFIC)
			 :NEWEST
			 S-VC-VERSION))))))

(DEFMETHOD (:WILD-DEVICE-P PATHNAME) (DEV)
  (SEND SELF ':COMPONENT-WILD-P DEV))

(DEFMETHOD (:WILD-DIRECTORY-P PATHNAME) (COMPONENT)
  (IF (ATOM COMPONENT)
      (SEND SELF ':COMPONENT-WILD-P COMPONENT)
      (LOOP FOR SUB-COMPONENT IN COMPONENT
	    THEREIS (OR (SEND SELF ':COMPONENT-WILD-P SUB-COMPONENT)
			(EQ SUB-COMPONENT ':WILD-INFERIORS)))))

(DEFMETHOD (:WILD-NAME-P PATHNAME) (NAM)
  (SEND SELF ':COMPONENT-WILD-P NAM))

(DEFMETHOD (:WILD-TYPE-P PATHNAME) (TYP)
  (SEND SELF ':COMPONENT-WILD-P TYP))

(DEFMETHOD (:WILD-VERSION-P PATHNAME) (VERS)
  (SEND SELF ':COMPONENT-WILD-P VERS))

(DEFMETHOD (:WILD-VC-VERSION-P PATHNAME) (B)
  (SEND SELF ':COMPONENT-WILD-P B))

(DEFMETHOD (:WILD-VC-BRANCH-P PATHNAME) (B)
  (SEND SELF ':COMPONENT-WILD-P B)) 

(DEFUN TRANSLATE-WILD-STRING (WILD1 WILD2 STRING &KEY WILD-HEURISTIC CONSTANT-HEURISTIC)
  (LET* ((OUTSIZE (+ (STRING-LENGTH WILD2) (STRING-LENGTH STRING)))	;worst case
	 (OUTSTR (MAKE-ARRAY OUTSIZE :TYPE 'ART-STRING :FILL-POINTER 0))
	 (OUTPOS 0))
    (LABELS ((OUTPUT (STRING &OPTIONAL (START 0) END)
	       ;; This tries to be faster than WITH-OUTPUT-TO-STRING.
	       (LET ((STR STRING)
		     (OUT OUTSTR))
		 (DECLARE (SYS:ARRAY-REGISTER STR OUT))
		 (LOOP FOR I FROM START BELOW (OR END (STRING-LENGTH STR))
		       DO (WHEN ( OUTPOS OUTSIZE)
			    (LET* ((NEW-SIZE (FLOOR (* OUTSIZE 1.61)))
				   (NEW-ARRAY (MAKE-ARRAY NEW-SIZE
							  :TYPE 'ART-STRING
							  :FILL-POINTER 0)))
			      (LOOP FOR I BELOW OUTSIZE
				    DO (SETF (AREF NEW-ARRAY I) (AREF OUTSTR I)))
			      (SETQ OUTSTR NEW-ARRAY
				    OUTSIZE NEW-SIZE)
			      ;; Call self recursively, since we can't SETQ the array-register
			      (RETURN (OUTPUT STRING I END))))
			  (SETF (AREF OUT OUTPOS) (AREF STR I))
			  (INCF OUTPOS))))
	     (HEURISTIC-OUT (FUN STR &OPTIONAL (START 0) END)
	       (IF FUN
		   (OUTPUT (FUNCALL FUN (SUBSTRING STR START END)))
		 (OUTPUT STR START END))))
      (MACROLET ((WILD-HEURSTIC-OUT (STR &OPTIONAL (START 0) END)
		   `(HEURISTIC-OUT WILD-HEURISTIC ,STR ,START ,END))
		 (CONSTANT-HEURSTIC-OUT (STR &OPTIONAL (START 0) END)
		   `(HEURISTIC-OUT CONSTANT-HEURISTIC ,STR ,START ,END)))
	;; Use WILD-HEURISTIC-OUT to output pieces of STRING matching a '*';
	;; Use CONSTANT-HEURSTIC-OUT to output pieces of WILD2.
	(DO ((I1 0) (I2 0 (1+ J2)) (J2) (K1) (IS 0 JS) (JS) (W1L (STRING-LENGTH WILD1))
	     (J1 (STRING-SEARCH-CHAR #/* WILD1) K1))
	    ((NULL J1)
	     (LOOP WHILE (SETQ J2 (STRING-SEARCH-CHAR #/* WILD2 I2))
		   DO (CONSTANT-HEURSTIC-OUT WILD2 I2 J2)
		      (SETQ I2 (1+ J2)))	;skip over star
	     (CONSTANT-HEURSTIC-OUT WILD2 I2))
	  ;; Star in in-pattern at J1. Find I1J1 piece (lefthand key) in data.
	  ;; J1 could be NIL.
	  (OR JS (%STRING-EQUAL STRING 0 WILD1 0 J1)	;First time, must be at 0.
	      (FERROR "Beginning of pattern ~S doesn't match string ~S." WILD1 STRING))
	  ;;Lefthand key (first at 0,then former RH key) described by I1J1.
	  ;;Find Righthand key (chunk AFTER star in in-pattern)
	  (SETQ IS (+ IS (- J1 I1)))		;Skip over matched LH key in STRING.
	  (SETQ K1 (STRING-SEARCH-CHAR #/* WILD1 (SETQ I1 (1+ J1))))
	  ;;May or may not find *. K1 may be NIL.  Find righthand key in STRING.
	  (SETQ JS				;IS is end of LH key, JS will be start RH key
		(COND ((= I1 W1L) NIL)		;in-pattern ends in *, pick up all of STRING
		      ((STRING-SEARCH WILD1 STRING IS NIL I1 K1))	;find RH key
		      (T (FERROR "Pattern ~S does not match string ~S." WILD1 STRING))))
	  ;;Ok, right hand key found.  So ISJS hunk of STRING goes into next star of WILD2.
	  (SETQ J2 (STRING-SEARCH-CHAR #/* WILD2 I2))	;J2 will be NIL if no more stars in W2
	  (CONSTANT-HEURSTIC-OUT WILD2 I2 J2)	;Output stuff up to star or end.
	  (OR J2 (RETURN NIL))			;Done if no star in WILD2 left.
	  ;;Star was found.  So skip over the star in WILD2 in DO reiterate.
	  (WILD-HEURSTIC-OUT STRING IS JS)))		;Copy the ISJS hunk
      (SETF (FILL-POINTER OUTSTR) OUTPOS)
      OUTSTR)))

(DEFMACRO PUSH-SUBLIST (P1 P2 PLACE &ENVIRONMENT ENV)
  (ONCE-ONLY (P1 P2 &ENVIRONMENT ENV)
    `(LOOP UNTIL (EQ ,P1 ,P2)
	   DO (PUSH (POP ,P1) ,PLACE))))

;;; This algorithm was derived by translating TRANSLATE-WILD-STRING from strings to lists.
;;;
;;; It has bugs.  I think my TRANSLATE-WILD-LIST-GENERAL fixes them, but let's not
;;; break the system by changing it right now.  TRANSLATE-WILD-LIST-GENERAL is needed
;;; for TOPS20 pathname translation.
(DEFUN TRANSLATE-WILD-LIST (SELF WILD1 WILD2 DATUM &AUX O)
  (FLET ((FIND-NEXT-WILD-COMPONENT (L)
	   (LOOP FOR P ON L
		 AS C = (CAR P)
		 WHEN (OR (EQ C ':WILD-INFERIORS)
			  (SEND SELF :COMPONENT-WILD-P C))
		   RETURN P)))
    (DO ((I1 WILD1) (I2 WILD2 (CDR J2)) (J2) (K1) (ID DATUM JD) (JD)
	 (J1 (FIND-NEXT-WILD-COMPONENT WILD1) K1))
	((NULL J1)
	 (LOOP WHILE (SETQ J2 (FIND-NEXT-WILD-COMPONENT I2))
	       IF (AND J2 (NEQ (CAR J2) ':WILD-INFERIORS))
	       DO (FERROR "Invalid wild directory mapping: ~S ~S" WILD1 WILD2)
	       DO (PUSH-SUBLIST I2 J2 O)
	       (SETQ I2 (CDR J2)))			;skip over star
	 (PUSH-SUBLIST I2 NIL O)
	 (NREVERSE O))
      ;; Star in in-pattern at J1. Find I1J1 piece (lefthand key) in data. J1 could be NIL.
      (OR JD
	  (LOOP FOR P1 ON WILD1
		AND PS ON DATUM
		UNTIL (EQ P1 J1)
		ALWAYS (EQUAL (CAR P1) (CAR PS)))	;First time, must be at 0.
	  (FERROR "Beginning of directory pattern ~S doesn't match datum ~S." WILD1 DATUM))
      ;;Lefthand key (first at 0,then former RH key) described by I1J1.
      ;;Find Righthand key (chunk AFTER star in in-pattern)
      (LOOP WITH P1 = I1
	    UNTIL (EQ P1 J1)
	    UNLESS (EQUAL (POP P1) (POP ID))
	    DO (FERROR "Directory component ~S doesn't really match pattern ~S."
		       DATUM WILD1))
      (SETQ K1 (FIND-NEXT-WILD-COMPONENT (SETQ I1 (CDR J1))))
      ;;May or may not find *. K1 may be NIL.  Find righthand key in DATUM.
      (SETQ JD					;ID is end of LH key, JD will be start RH key
	    (COND ((NULL I1) NIL)		;in-pattern ends in *, pick up all of DATUM
		  ((NEQ (CAR J1) ':WILD-INFERIORS) ;forced-existence component.
		   (CDR ID))
		  ((SUBLIST-SEARCH ID I1 K1))	;find RH key
		  (T (FERROR "Directory pattern ~S does not match datum ~S." WILD1 DATUM))))
      ;;Ok, right hand key found.  So IDJD hunk of DATUM goes into next star of WILD2.
      (SETQ J2 (FIND-NEXT-WILD-COMPONENT I2))	;J2 will be NIL if no more stars in W2
      (PUSH-SUBLIST I2 J2 O)			;Output stuff up to star or end.
      ;;Make sure non-:WILD-INFERIORS wildnesses match each other
      (COND ((AND (MEMQ (CAR J1) '(:WILD-INFERIORS NIL))
		  (MEMQ (CAR J2) '(:WILD-INFERIORS NIL))))	;no problem.
	    ((AND (SEND SELF ':COMPONENT-WILD-P (CAR J1))
		  (SEND SELF ':COMPONENT-WILD-P (CAR J2)))
	     (OR ID (FERROR "Must-match directory component missing: ~S" DATUM))
	     (SETQ ID (CONS (TRANSLATE-PATHNAME-COMPONENT (CAR J1) (CAR J2) (CAR ID))
			    JD)))
	    (T (FERROR "Incompatible admixtures of single component and recursive wildcards:~@
		       ~S vs. ~S." WILD1 WILD2)))
      (OR J2 (RETURN (NREVERSE O)))		;Done if no star in WILD2 left.
      ;;Star was found.  So skip over the star in WILD2 in DO reiterate.
      (PUSH-SUBLIST ID JD O))))		;Copy the IDJD hunk

(DEFUN SUBLIST-SEARCH (DATA PATTERN-START PATTERN-END)
  (LOOP FOR P ON DATA
	WHEN (LOOP FOR (CD . TD) ON P
		   AND PP ON PATTERN-START
		   FOR (CP . TP) ON PP
		   UNTIL (EQ PP PATTERN-END)
		   ALWAYS (AND (IF TP TD T)
			       (EQUAL CD CP)))
	RETURN P))

;; CONSTANT-HEURISTIC gets called on any individual piece taken from the TO list.
;; WILD-HEURISTIC gets called on any individual piece taken from the DATUM list.
;;   (The above two may be smaller than a component, in the event of FOO*BAR.)
;; WILD-COMPONENT-HEURISTIC gets called on an entire component being translated (i.e. being
;;   taken at least partly from the DATUM list).  This overrides WILD-HEURISTIC; you have
;;   a choice of operating on the subcomponent that matches the "*" in "FOO*BAR" or on
;;   the result of the translation.
;; TRANSLATE is a function to call to perform the actual translation.

(DEFUN TRANSLATE-WILD-LIST-GENERAL (FROM TO DATUM &KEY
				    CONSTANT-HEURISTIC WILD-HEURISTIC
				    WILD-COMPONENT-HEURISTIC TRANSLATE)
  (LET ((PATHNAME (MAKE-PATHNAME :HOST "SYS"))
	(OUTPUT))
    (MACROLET ((OUTPUT (DATUM)
		 `(PUSH ,DATUM OUTPUT)))
      (LABELS ((OUTPUT-WILD (DATUM)
		 (IF WILD-HEURISTIC
		     (OUTPUT (FUNCALL WILD-HEURISTIC DATUM))
		   (OUTPUT DATUM)))
	       (OUTPUT-CONSTANT (DATUM)
		 (IF CONSTANT-HEURISTIC
		     (OUTPUT (FUNCALL CONSTANT-HEURISTIC DATUM))
		   (OUTPUT DATUM)))
	       (TRANSLATE (FROM TO DAT)
		 (IF TRANSLATE
		     (FUNCALL TRANSLATE DAT FROM TO)
		   (TRANSLATE-WILD-STRING
		     FROM TO DAT
		     :WILD-HEURISTIC (AND (NOT WILD-COMPONENT-HEURISTIC)
					  WILD-HEURISTIC)
		     :CONSTANT-HEURISTIC (AND (NOT WILD-COMPONENT-HEURISTIC)
					      CONSTANT-HEURISTIC))))
	       (NO-MATCH (DAT PAT)
		 (FERROR "~S does not match the pattern ~S in ~S : ~S"
			 PAT DAT DATUM FROM))
	       (WILD-INFERIORS-FAILURE (LOSER)
		 (FERROR ":WILD-INFERIORS matched with ~S in ~S -> ~S"
			 LOSER FROM TO))
	       (RAN-OUT-OF-DATA (TAIL)
		 (FERROR "Ran out of data matching ~S : ~S~@
			     data from remaining pattern is ~S."
			    DATUM FROM TAIL))
	       (FIND-NEW-MATCH (PAT DATLIST)
		 (LOOP FOR DATL ON DATLIST
		       FOR DAT = (CAR DATL)
		       UNTIL (SEND PATHNAME :COMPONENT-MATCH PAT DAT)
		       FINALLY (RETURN DATL))))
	;; We loop over all the FROM pattern
	;; but the primary dimension of the state-machine space is indexed by the TO pattern
	;; because that specifies the output.
	;; Whenever we go to output something from the DATUM, check that we haven't run off
	;; the end.
	(LOOP WITH TP = TO			;To Pointer
	      WITH DP = DATUM			;Datum Pointer
	      WITH FP = FROM			;From Pointer
	      FOR FC = (CAR FP)			;From Component
	      FOR TC = (CAR TP)			;To Component
	      FOR DC = (CAR DP)			;Datum Component
	      WHILE FP
	      DO
	  (LABELS ((ADVANCE-ALL ()
		     (POP FP)
		     (POP TP)
		     (POP DP))
		   (CHECK-DP ()
		     (UNLESS DP
		       (RAN-OUT-OF-DATA FP)))
		   (DO-PIECE-1 ()
		     (CHECK-DP)
		     (IF (NOT (SEND PATHNAME :COMPONENT-MATCH FC DC))
				(NO-MATCH DC FC)
			      (LET ((OUT (TRANSLATE FC TC DC)))
				(WHEN WILD-COMPONENT-HEURISTIC
				  (SETQ OUT (FUNCALL WILD-COMPONENT-HEURISTIC OUT)))
				(OUTPUT OUT))
				(ADVANCE-ALL)))
		   (DO-PIECE ()
		     (IF (SEND PATHNAME :COMPONENT-WILD-P TC)
			 (SELECTQ FC
			   (:WILD-INFERIORS (WILD-INFERIORS-FAILURE :WILD))
			   (:WILD (SETQ FC "*")
			    (DO-PIECE-1))
			   (OTHERWISE
			    (DO-PIECE-1)))
		       ;; Constant string, just advance the TO pattern
		       (OUTPUT-CONSTANT TC)
		       (POP TP))))
	    (IF (NULL TP)
		;; No more output specified, just check the pattern
		(IF (NULL DP)
		    (UNLESS (LOOP FOR C IN FP
				  ALWAYS (EQ C :WILD-INFERIORS))
		      (RAN-OUT-OF-DATA FP))
		  (SELECTQ FC
		    (:WILD (POP TP) (POP DP))
		    (:WILD-INFERIORS
		     (POP FP)
		     (SETQ FC (CAR FP))
		     (SETQ DP (FIND-NEW-MATCH FC DP)))
		    (OTHERWISE (UNLESS (SEND PATHNAME :COMPONENT-MATCH FC DC)
				 (NO-MATCH DC FC))
			       (POP FP)
			       (POP DP))))
	      ;; Output the data
	      (SELECTQ TC
		(:WILD
		 (SELECTQ FC
		   (:WILD (CHECK-DP)
		    (OUTPUT-WILD DC)
		    (ADVANCE-ALL))
		   (:WILD-INFERIORS (WILD-INFERIORS-FAILURE :WILD))
		   (NIL (CHECK-DP)
			(IF (NULL DC)
			    (OUTPUT-WILD NIL)
			  (NO-MATCH DC FC))
			(ADVANCE-ALL))
		   (OTHERWISE
		    (DO-PIECE))))
		(:WILD-INFERIORS
		 (SELECTQ FC
		   (:WILD-INFERIORS
		    (POP FP)
		    (SETQ FC (CAR FP))
		    (POP TP)
		    (SETQ TC (CAR TP))
		    (LOOP WITH END = (FIND-NEW-MATCH FC DP)
			  FOR TEMP ON DP
			  FOR TEMPC = (CAR TEMP)
			  UNTIL (EQ TEMP END)
			  DO (OUTPUT-WILD TEMPC)
			  FINALLY (SETQ DP END)))
		   (OTHERWISE (WILD-INFERIORS-FAILURE FC))))
		(NIL
		 (OUTPUT-CONSTANT TC)
		 (POP TP))
		(OTHERWISE			;String
		 (DO-PIECE)))))))
      (NREVERSE OUTPUT))))

(DEFUN WILDCARD-MAP (WILDCARD-PATHNAME FUNCTION &REST OTHER-ARGS-FOR-FUNCTION)
  (LOOP FOR (P) IN (CDR (DIRECTORY-LIST WILDCARD-PATHNAME ':FAST))
	COLLECT (LEXPR-FUNCALL FUNCTION P OTHER-ARGS-FOR-FUNCTION)))

(DEFUN WILDCARD-MAP-SEND (WILDCARD-PATHNAME MESSAGE &REST ARGS-TO-MESSAGE)
  (LOOP FOR (P) IN (CDR (DIRECTORY-LIST WILDCARD-PATHNAME ':FAST))
	COLLECT (LEXPR-SEND P MESSAGE ARGS-TO-MESSAGE)))

(DEFUN WILDCARD-MAP-TRANSLATED
       (WILDCARD-PATHNAME TRANSLATION-WILDCARD FUNCTION &REST OTHER-ARGS-FOR-FUNCTION)
  (SETQ WILDCARD-PATHNAME
	(MERGE-PATHNAMES WILDCARD-PATHNAME (SEND WILDCARD-PATHNAME ':NEW-TYPE ':WILD) ':WILD))
  (SETQ TRANSLATION-WILDCARD (MERGE-PATHNAMES TRANSLATION-WILDCARD WILDCARD-PATHNAME))
  (LOOP FOR (P) IN (CDR (DIRECTORY-LIST WILDCARD-PATHNAME ':FAST))
	COLLECT (LEXPR-FUNCALL
		  FUNCTION P
		  (SEND WILDCARD-PATHNAME ':TRANSLATE-WILD-PATHNAME TRANSLATION-WILDCARD P)
		  OTHER-ARGS-FOR-FUNCTION)))

(DEFUN WILDCARD-MAP-SEND-TRANSLATED
       (WILDCARD-PATHNAME TRANSLATION-WILDCARD MESSAGE &REST ARGS-TO-MESSAGE)
  (SETQ WILDCARD-PATHNAME
	(MERGE-PATHNAMES WILDCARD-PATHNAME (SEND WILDCARD-PATHNAME ':NEW-TYPE ':WILD) ':WILD))
  (SETQ TRANSLATION-WILDCARD (MERGE-PATHNAMES TRANSLATION-WILDCARD WILDCARD-PATHNAME))
  (LOOP FOR (P) IN (CDR (DIRECTORY-LIST WILDCARD-PATHNAME ':FAST))
	COLLECT (LEXPR-SEND
		  P MESSAGE
		  (SEND WILDCARD-PATHNAME ':TRANSLATE-WILD-PATHNAME TRANSLATION-WILDCARD P)
		  ARGS-TO-MESSAGE)))


(DEFUN TEST-WILD-TRANSLATE (S D I)
  (SETQ S (PARSE-PATHNAME S))
  (SETQ D (PARSE-PATHNAME D NIL S))
  (SETQ I (PARSE-PATHNAME I NIL S))
  (SEND S ':TRANSLATE-WILD-PATHNAME D I))
