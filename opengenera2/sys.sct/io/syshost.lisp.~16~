;;; -*- Mode: LISP; Package: FILE-SYSTEM; Base: 8; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Logical translations for logical host SYS

;;; This is the master canonical list of SYS host translations for the districution site.
;;; If you change this list, you should also change the file
;;; SYS:SITE;SYS.TRANSLATIONS at SCRC.  The two lists should be kept the same,
;;; although it doesn't fundamentally matter.
;;; Further, all directories should be subdirectories of >sys, since this
;;; will be referring to the customer's disk.

(defmacro define-distribution-sys-translations ()
  (let* ((sys-host (fs:get-pathname-host "SYS"))
	 (default-host (send (send (default-pathname "SYS:SYS;") :translated-pathname) :host))
	 (host-table (cl:make-hash-table :size 8)))
    (setf (gethash default-host host-table)
	  (list "DIS-SYS-HOST"
		:chaos-address (format nil "~O" (send default-host :chaos-address))))
    `(progn
       (defconst *sys-host-translations*
		 ',(loop for (logical physical) in (send sys-host :translations)
			 for host = (send physical :host)
			 for chaos = (send host :chaos-address)
			 for dis-host = (and chaos
					     (first (scl:modify-hash
						      host-table
						      host
						      #'(lambda (host entry found-p)
							  (unless found-p
							    (setf entry
								  (list
								    (if (eq net:*local-site* neti:*distribution-site*)
									(send host :name-as-file-computer)
									(string-append
									  "DIS-"
									  (send host :name-as-file-computer)
									  "-HOST"))
								    :chaos-address
								    (format nil "~O" (send host :chaos-address)))))
							  entry))))
			 when dis-host
			   collect
			     (list (neti:pathname-directory-only-string logical)
				   (string-append
				     dis-host
				     ":"
				     (neti:pathname-directory-only-string physical)))))
       (defconst *sys-host-physical-hosts*
		 ',(cli::maptable host-table #'(lambda (ignore entry) entry) 'list)))))

(define-distribution-sys-translations)



;;; This form specifies how to translate certain difficult logical pathnames,
;;; above and beyond the translations specified by SYS.TRANSLATIONS.  See
;;; LOGPATH for how to interpret this (should be documented by Rel 6.0).
;;; This variable is referenced by QLD.  To patch this information,
;;; put (fs:set-logical-pathname-host "SYS" :rules *sys-translation-rules*)
;;; after the defconst.

;;; When adding translations, be sure to put less-wild patterns *BEFORE*
;;; more-wild ones.  See SYS: IO; LOGPATH for more info.

(defconst *sys-translation-rules*
  '((:vms
     ("SYS: NETWORK; NAMESPACE-EDITOR.*.*" :vms-new-pathname :name "NAMSPACED") 
     ("SYS: NETWORK; DISTRIBUTION.*.*" :vms-new-pathname :name "DISTRIBUT") 
     ("SYS: NETWORK; CLASS-DEFINITIONS.*.*" :vms-new-pathname :name "CLASSDEFN") 
     ("SYS: L-COMPILER; SYSDEF-SUPPORT.*.*" :vms-new-pathname :name "SYSDFSUPT") 
     ("SYS: ZMAIL; TEMPLATE-LIBRARY.*.*" :vms-new-pathname :name "TEMPLTLIB")
     ("SYS: SITE; PUBLIC-DIALNET-REGISTRY.*.*" :site-directory :name "PUBDIALRG")
     ("SYS: SITE; USERS-GROUP-DIALNET-REGISTRY.*.*" :site-directory :name "UGRDIALRG")
     ("SYS: SITE; PRIVATE-DIALNET-REGISTRY.*.*" :site-directory :name "PRVDIALRG")
     ("SYS: L-UCODE; *-MIC.MIC.*" :vms-microcode)
     ("SYS: L-UCODE; *-MIC.SYM.*" :vms-microcode)
     ("SYS: L-UCODE; *-MIC.ERR.*" :vms-microcode)
     ("SYS: L-UCODE; *-MIC.LOG.*" :vms-microcode)
     ("SYS: FONTS; LGP-1; *.BFD.*" :vms-font
      (("DANG-MATH" "DANGM")
       ("GHELVETICA" "GHLVT")
       ("HELVETICA" "HELVT")
       ("TIMESROMAN" "TIMSR")
       ("XGP-VGV" "XGPVV")))
     ("SYS: FONTS; NLGP1; *.BFD.*" :vms-font
      (("CENTURYSCHOOLBOOK" "CNTSB")))
     ("SYS: SITE; **; *.*.*" :site-directory)
     ("SYS: **; *.*.*" :vms-heuristicate)
     )
    (:vms4
     ("SYS: SITE; **; *.*.*" :site-directory ((#/- #/_)))
     ("SYS: **; *.*.*" :vms-heuristicate ((#/- #/_))))
    (:vms4.4
     ("SYS: SITE; **; *.*.*" :site-directory)
     ("SYS: **; *.*.*" :vms-heuristicate))
    (:unix
     ("SYS: SITE; PUBLIC-DIALNET-REGISTRY.*.*" :site-directory :name "PUBDIALRG")
     ("SYS: SITE; USERS-GROUP-DIALNET-REGISTRY.*.*" :site-directory :name "UGRDIALRG")
     ("SYS: SITE; PRIVATE-DIALNET-REGISTRY.*.*" :site-directory :name "PRVDIALRG")
     ("SYS: L-UCODE; *-MIC.MIC.*" :unix-microcode)
     ("SYS: L-UCODE; *-MIC.SYM.*" :unix-microcode)
     ("SYS: L-UCODE; *-MIC.ERR.*" :unix-microcode)
     ("SYS: L-UCODE; *-MIC.LOG.*" :unix-microcode)
     ("SYS: FONTS; LGP-1; *.BFD.*" :unix-font
      (("DANG-MATH" "DANGMT")
       ("GHELVETICA" "GHELVT")
       ("HELVETICA" "HELVET")
       ("TIMESROMAN" "TIMESR")
       ("XGP-VGV" "XGPVGV")
       ))
     ("SYS: FONTS; NLGP1; *.BFD.*" :unix-font
      (("CENTURYSCHOOLBOOK" "CNTSBK")))
     ;; Yes, **; works here for Unix, since this rule simulates :WILD-INFERIORS, rather
     ;; than actually using it.
     ("SYS: SITE; **; *.*.*" :site-directory)
     )
    (:unix42
     ;; Yes, **; works here for Unix, since this rule simulates :WILD-INFERIORS, rather
     ;; than actually using it.
     ("SYS: SITE; **; *.*.*" :site-directory))
    (:lispm
     ("SYS: SITE; **; *.*.*" :site-directory))
    (:tops-20
     ("SYS: SITE; **; *.*.*" :site-directory))
    (:macintosh
     ("SYS: SITE; **; *.*.*" :site-directory))
    (:iso9660
     ("SYS: SITE; **; *.*.*" :site-directory)
     ("SYS: **; *.*.*" :iso9660-heuristicate))
      )
   )



(defun setup-distribution-sys-host ()
  (mapc #'(lambda (entry)
	    (add-file-computer (apply #'neti:make-distribution-host entry)))
	*sys-host-physical-hosts*)
  (set-logical-pathname-host "SYS"
			     :rules *sys-translation-rules*
			     :translations *sys-host-translations*))

