;;; -*- Syntax: Common-Lisp; Mode: LISP; Package: System-internals; Lowercase: T; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Flavors which handle the mechanics of encapsulation.
;;; Everything is built on D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")indirect-stream-mixin0.  Streams normally
;;; include one of 1indirect-input-stream-mixin0 or 1indirect-output-stream-mixin0.
;;; These sort of hide the fact of their being multiple levels of stream
;;; from the user of the stream.

;;;(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI") General methods, for both input and output.

0(cl:defparameter *default-indirect-stream-methods-not-to-pass-on*
		 '(:next-input-buffer
		    :read-input-buffer
		    :get-output-buffer
		    :next-output-buffer
		    :send-output-buffer
		    :advance-input-buffer
		    :advance-output-buffer
		    :discard-output-buffer))

(defflavor basic-indirect-stream-mixin
	((stream)
	 (process current-process)
	 (methods-not-to-pass-on *default-indirect-stream-methods-not-to-pass-on*)
	 (which-operations nil)
	 (si:string-for-wholine ""))
	()	
  (:initable-instance-variables stream)
  (:gettable-instance-variables stream)
  (:settable-instance-variables si:string-for-wholine)
  (:writable-instance-variables (si:indirect-stream-stream stream)
				(fs:file-data-stream-process process))
  (:required-flavors stream))

(defmethod (:rename basic-indirect-stream-mixin :after) (new-pathname)
  (setq si:string-for-wholine (send new-pathname :string-for-wholine)))
  
;;; Try to be informative when we print the stream.
(defmethod (:print-self basic-indirect-stream-mixin) (str ignore ignore)
  (printing-random-object (self str :typep)
    (cond ((not (variable-boundp methods-not-to-pass-on))
	   (princ "<uninitialized>" str))
	  ((or (not (variable-boundp stream)) (not stream))
	   (princ "<disconnected>" str))
	  (t
	   (let ((path (send-if-handles stream :pathname)))
	     (if path
		 (format str "\"~A\"" path)
		 (princ stream str)))))))

(defmethod (:unclaimed-message basic-indirect-stream-mixin) (op &rest arglist)
  (when (or (not (variable-boundp stream))
	    (not stream)
	    (member op methods-not-to-pass-on))
    (error "~A does not support ~S" self op))
  (lexpr-send stream op arglist)) 

(defwhopper-subst (:send-if-handles basic-indirect-stream-mixin) (op &rest args)
  (or (lexpr-continue-whopper op args)
      (and (variable-boundp stream)
	   stream
	   (not (member op methods-not-to-pass-on))
	   (lexpr-send-if-handles stream op args)))) 

(defwhopper-subst (:which-operations basic-indirect-stream-mixin) ()
  (or which-operations
      (if stream
	  (setf which-operations
		(cl:union (continue-whopper)
			  (when (and (variable-boundp stream) stream)
			    (cl:set-difference 
			      (send stream :which-operations)
			      methods-not-to-pass-on))))
	(continue-whopper)))) 

(defwhopper-subst (:operation-handled-p basic-indirect-stream-mixin) (op)
  (or (continue-whopper op)
      (and (variable-boundp stream)
	   stream
	   (not (member op methods-not-to-pass-on))
	   (send stream :operation-handled-p op)))) 

(defwhopper-subst (get-handler-for basic-indirect-stream-mixin) (op)
  (or (continue-whopper op)
      (and (variable-boundp stream)
	   stream
	   (not (member op methods-not-to-pass-on))
	   (get-handler-for stream op)))) 

;;; This has to be passed along.  Only the guy below knows the answer.
(defmethod (fs:%file-stream-file-element-type basic-indirect-stream-mixin) ()
  (fs:%file-stream-file-element-type stream))

(defmethod (:truename basic-indirect-stream-mixin) ()
  (send-if-handles stream :truename))

(defmethod (:pathname basic-indirect-stream-mixin) ()
  (send-if-handles stream :pathname))

(defmethod (:info basic-indirect-stream-mixin) ()
  (send-if-handles stream :info))

(defmethod (:length basic-indirect-stream-mixin) ()
  (send-if-handles stream :length))

(defmethod (:close basic-indirect-stream-mixin) (&optional abortp)
  (send stream :close abortp))

(defmethod (:finish basic-indirect-stream-mixin) ()
  (send stream :finish))

(defmethod (:eof basic-indirect-stream-mixin) ()
  (send self :force-output)
  (send stream :eof))

;; Always delete the stream from FS:ALL-OPEN-STREAMS even if you abort from the close.
(defwrapper (:close basic-indirect-stream-mixin) (ignore body)
  `(unwind-protect
       ,body
     (fs:delete-open-stream self)))

(defmethod (:who-line-information basic-indirect-stream-mixin) (&aux count length percent)
  (setq count (send-if-handles self :read-pointer))
  (and (setq length (send-if-handles self :length))
       (not (zerop length))
       (not (null count))
       (setq percent (floor (* 100. count) length)))
  (values (or (send-if-handles stream :translated-pathname) (send stream :pathname))
	  (send self :direction) count percent))

;;; See STREAM for the explanation of this. We pass the predicate along,
;;; as we pass the hook-operation along.
(defmethod (stream-supports-set-pointer-0 basic-indirect-stream-mixin) ()
  (stream-supports-set-pointer-0 stream))

;;;
;;; Given an indirect stream, kill it off, and return the inner stream
;;;
(defmethod (unencapsulate-stream basic-indirect-stream-mixin) ()
  (fs:delete-open-stream self)
  (fs:add-open-stream stream)
  stream)


(defflavor indirect-stream-mixin (stream)
	   (basic-indirect-stream-mixin stream)
  (:initable-instance-variables stream)
  (:gettable-instance-variables stream)
  (:required-flavors stream))

(defmethod (:set-pointer indirect-stream-mixin) (pointer)
  (send stream :set-pointer pointer))

(defmethod (:read-pointer indirect-stream-mixin) ()
  (send stream :read-pointer))

;This is to avoid totally fucking the compiler warnings system
(defmethod (:whole-file-p indirect-stream-mixin) ()
  (compiler:compiling-whole-file-p stream))


2;;; Mixin for input streams.

0(defflavor indirect-input-stream-mixin ((input-buffer-p nil)
					(input-buffer nil)
					input-buffer-start
					input-buffer-end
					(unread-byte-tank nil))
	   (input-stream indirect-stream-mixin))

(defmethod (make-instance indirect-input-stream-mixin) (&rest ignore)
  (when stream
    (setq input-buffer-p (operation-handled-p stream :read-input-buffer))))

(defmethod ((cl:setf indirect-stream-stream) indirect-input-stream-mixin :after) (ignore)
  (when stream
    (setq input-buffer-p (operation-handled-p stream :read-input-buffer)))
  (setq input-buffer nil unread-byte-tank nil))

(defmethod (:reset indirect-input-stream-mixin :after) ()
  (setq input-buffer-p (and stream (operation-handled-p stream :read-input-buffer)))
  (if (and stream
	   (eq (send-if-handles stream :status) :open))
      (send self :set-pointer 0)
    (setq input-buffer nil
	  unread-byte-tank nil)))

2;;; If we're going to move the pointer, all buffering is invalidated.
0(defmethod (:set-pointer indirect-input-stream-mixin :before) (pointer)
  (ignore pointer)
  (setq unread-byte-tank nil)
  (setq input-buffer nil))

1;;; *** This isn't right.  
;;; *** 2Input in the byte tank is only there as part of an escape sequence.
1;;; *** 2Ignore it; we would have to input more characters for it to be available.
1;;; *** 2This still has problems; what if we ask a lower level, and it tells us we
1;;; *** 2have input, but it's only part of an escape sequence?  The solution to this
1;;; *** 2involves very hairy use of coroutine streams to process any pending escapes
1;;; *** 2while never giving up control, so we can 1:listen2 and return 1nil2 if we ever
1;;; *** 2run out of input.

0(defmethod (:listen indirect-input-stream-mixin) ()
  (send stream :listen))

(defmethod (:read-byte indirect-input-stream-mixin) (&optional eof)
  (send stream :tyi eof))			2;Should be 1:READ-BYTE

2;;; Get an input buffer from our encapsulated stream.  Not called 1:read-input-buffer2,
;;; since the returned input buffer has bytes, not characters, so we cannot give it out.

0(defmethod (:read-input-buffer-1 indirect-input-stream-mixin) (&optional eof no-hang-p)
  (when unread-byte-tank
    (ferror "There was an attempt to read an input buffer when there are un-read bytes."))
  (send stream :read-input-buffer eof no-hang-p))

(defmethod (:advance-input-buffer-1 indirect-input-stream-mixin) (idx)
  (send stream :advance-input-buffer idx))

(defmethod (:input-wait indirect-input-stream-mixin)
	   (&rest arglist)
  (declare (arglist &optional whostate function &rest arguments))
  (lexpr-send stream :input-wait arglist))

;;; Returns a second value, of the stream this answer is valid for.
;;; This is so we can cache the which-operations info.
(defmethod (read-pointer-handled-p indirect-input-stream-mixin) ()
  (when stream
    (values (operation-handled-p stream :read-pointer) stream)))

(defmethod (:read-pointer-1 indirect-input-stream-mixin) ()
  (send stream :read-pointer))

(defmethod (:set-pointer-1 indirect-input-stream-mixin) (pointer)
  (send stream :set-pointer pointer))


(defflavor array-input-stream-mixin (array (seen nil)) ())

(defmethod (:next-input-buffer array-input-stream-mixin) (&optional ignore)
  (unless seen
    (setq seen t)
    (values array 0 (array-active-length array))))

(defmethod (:discard-input-buffer array-input-stream-mixin) (buffer)
  (cl:assert (eq buffer array)))

(defmethod (:element-type array-input-stream-mixin) () (cl:array-element-type array))

(defmethod (:reset array-input-stream-mixin) (new-array)
  (setq array new-array
	seen nil))

(defflavor binary-array-input-stream ()
	   (array-input-stream-mixin
	    si:input-pointer-remembering-mixin si:buffered-input-binary-stream))

(defmethod (:reset binary-array-input-stream :after) (ignore)
  (setq si:stream-input-buffer nil))

(defmethod (:length binary-array-input-stream) ()
  (array-active-length array))

(compile-flavor-methods binary-array-input-stream)

(defresource binary-array-input-stream ()
  :constructor (make-instance 'binary-array-input-stream))

2;;; Mixin for output streams.

0(defflavor indirect-output-stream-mixin ()
	   (output-stream indirect-stream-mixin))

2;;; Stub until we fix up the stream protocol.
0(defmethod (:write-char indirect-output-stream-mixin) (char)
  (send self :tyo char))

(defmethod (:write-byte indirect-output-stream-mixin) (byte)
  (send stream :tyo byte))

(defmethod (:get-output-buffer-1 indirect-output-stream-mixin) ()
  (send-if-handles stream :get-output-buffer))

(defmethod (:advance-output-buffer indirect-output-stream-mixin) (idx)
  (send stream :advance-output-buffer idx))

(defmethod (:force-output indirect-output-stream-mixin) ()
  (send stream :force-output))

(defflavor 8bit-array-output-stream-mixin
	((array (make-array 400 :fill-pointer 0 :type 'art-8b)))
	()
  (:gettable-instance-variables array))

(defmethod (:reset 8bit-array-output-stream-mixin) ()
  (send self :discard-current-output-buffer)
  (cl:setf (fill-pointer array) 0))

(defmethod (:new-output-buffer 8bit-array-output-stream-mixin) ()
  (let ((length (array-length array)))
    (if (> length (fill-pointer array))
	(values array (fill-pointer array) length)
      (setq array (adjust-array-size array (ceiling (* length 3/2))))
      (values array (fill-pointer array) (array-length array)))))

(defmethod (:send-output-buffer 8bit-array-output-stream-mixin) (ignore new-index
									&optional ignore)
  (setf (fill-pointer array) new-index))

(defmethod (:discard-output-buffer 8bit-array-output-stream-mixin) (ignore)
  nil)

(defmethod (:array-as-string 8bit-array-output-stream-mixin) ()
  (make-array (fill-pointer array) :type 'art-string :displaced-to array))

(defmethod (:byte-size 8bit-array-output-stream-mixin) ()
  8)

(defmethod (:element-type 8bit-array-output-stream-mixin) ()
  '(cl:unsigned-byte 8))

(defflavor 8bit-array-output-stream ()
	   (8bit-array-output-stream-mixin buffered-output-binary-stream))

(compile-flavor-methods 8bit-array-output-stream)

(defresource 8bit-array-output-stream ()
  :constructor (make-instance '8bit-array-output-stream)
  :initializer (send object :reset))

2;;; Output bytes to a buffered character stream.

0(defflavor 8bit-to-buffered-character-output-stream-mixin
	((indirect-array
	   (make-array 0 :type 'art-8b :displaced-to "" :displaced-index-offset 512.))
	 indirect-array-offset)
	(basic-indirect-stream-mixin))

(defmethod (:new-output-buffer 8bit-to-buffered-character-output-stream-mixin) ()
  (multiple-value-bind (buffer start end)
      (send stream :get-output-buffer)
    (change-indirect-array indirect-array 'art-8b (- end start) buffer start)
    (setq indirect-array-offset start)
    (values indirect-array 0 (- end start))))

(defmethod (:send-output-buffer 8bit-to-buffered-character-output-stream-mixin)
	   (ignore new-index &optional ignore)
  (send stream :advance-output-buffer (+ new-index indirect-array-offset)))

(defmethod (:discard-output-buffer 8bit-to-buffered-character-output-stream-mixin) (ignore)
  nil)

(defmethod (:element-type 8bit-to-buffered-character-output-stream-mixin) ()
  '(cl:unsigned-byte 8))

(defmethod (:byte-size 8bit-to-buffered-character-output-stream-mixin) ()
  8)

2;;; What about unbuffered streams, like those with translations?
;;; They support string-out and tyo, and that's all for these purposes.
;;; Indirect streams are completely unprepared to handle an unbuffered stream
;;; down below, so we have to simulate buffering for them. Feh.

0(defflavor 8bit-to-unbuffered-character-output-stream-mixin
	((buffer (make-array 1024. :type 'sys:art-8b))	;why not a big buffer?
	 (indirect nil)
	 (buffer-out nil))
	(basic-indirect-stream-mixin))

(defmethod (make-instance 8bit-to-unbuffered-character-output-stream-mixin) (&rest ignore)
  (setq indirect (make-array 1024. :type 'sys:art-string :displaced-to buffer)))

(defmethod (:new-output-buffer 8bit-to-unbuffered-character-output-stream-mixin) ()
  (when buffer-out
    (error ":NEW-OUTPUT-BUFFER before disposing of the last buffer."))
  (setq buffer-out t)
  (values buffer 0 (cl:length buffer)))

(defmethod (:send-output-buffer 8bit-to-unbuffered-character-output-stream-mixin)
	   (a-buffer new-index &optional ignore)
  (unless (eq a-buffer buffer)
    (error ":SEND-OUTPUT-BUFFER of a buffer other than the one handed out."))
  (unless buffer-out
    (error ":SEND-OUTPUT-BUFFER when there is no outstanding output buffer."))
  (send stream :string-out indirect 0 new-index)
  (setq buffer-out nil))

(defmethod (:discard-output-buffer 8bit-to-unbuffered-character-output-stream-mixin)
	   (a-buffer)
  (unless (eq a-buffer buffer)
    (error ":SEND-OUTPUT-BUFFER of a buffer other than the one handed out."))
  (unless buffer-out
    (error ":SEND-OUTPUT-BUFFER when there is no outstanding output buffer."))
  (setq buffer-out nil))

(defmethod (:element-type 8bit-to-unbuffered-character-output-stream-mixin) ()
  'string-char)


(defflavor 8bit-to-buffered-character-output-stream ()
	   (8bit-to-buffered-character-output-stream-mixin buffered-output-binary-stream))

(defflavor 8bit-to-unbuffered-character-output-stream ()
	   (8bit-to-unbuffered-character-output-stream-mixin buffered-output-binary-stream))

(compile-flavor-methods 8bit-to-buffered-character-output-stream
			8bit-to-unbuffered-character-output-stream)

(defflavor character-to-8bit-input-stream-mixin
	((indirect-array
	   (make-array 0 :type 'art-8b :displaced-to "" :displaced-index-offset 512.))
	 indirect-array-offset)
	(basic-indirect-stream-mixin)
  (:required-flavors si:buffered-input-binary-stream))

(defmethod (:next-input-buffer character-to-8bit-input-stream-mixin) (&optional no-hang-p)
  (multiple-value-bind (buffer start-index stop-index)
      (send stream :read-input-buffer nil no-hang-p)
    (if (not buffer)
	(values nil nil nil t)
      (let ((size (- stop-index start-index)))
	(change-indirect-array indirect-array 'art-8b size buffer start-index)
	(setq indirect-array-offset start-index)
	(values indirect-array 0 size nil)))))

(defmethod (:discard-input-buffer character-to-8bit-input-stream-mixin) (buffer)
  (unless (or (not stream-input-buffer) (eq buffer stream-input-buffer))
    (ferror "~S being discarded, but ~S is the current input buffer"
	    buffer stream-input-buffer))
  (send stream :advance-input-buffer (+ indirect-array-offset stream-input-index)))

(defmethod (:set-pointer character-to-8bit-input-stream-mixin) (new-index)
  (unless (zerop new-index)
    (error ":set-pointer only works for an argument of 0 for ~
             character-to-8bit-input-stream-mixin"))
  (setq stream-input-buffer nil
	stream-input-index 0)			;defeat :advance-input-buffer just above
  (send stream :set-pointer new-index))

(defmethod (:element-type character-to-8bit-input-stream-mixin) ()
  '(cl:unsigned-byte 8))

(defmethod (:byte-size character-to-8bit-input-stream-mixin) ()
  8)


(defflavor character-to-8bit-input-stream ()
	   (character-to-8bit-input-stream-mixin buffered-input-binary-stream))

(compile-flavor-methods character-to-8bit-input-stream)


(defflavor buffered-character-to-8bit-input-stream ()
	   (character-to-8bit-input-stream-mixin buffered-input-binary-stream))

(defflavor unbuffered-character-to-8bit-input-stream
	((our-buffer (make-array 1024. :type 'art-8b))
	 (indirect nil)
	 (buffer-in nil))
	(character-to-8bit-input-stream-mixin buffered-input-binary-stream))

(defmethod (make-instance unbuffered-character-to-8bit-input-stream) (&rest ignore)
  (setq indirect (make-array 1024. :type 'art-string :displaced-to our-buffer)))

(defmethod (:next-input-buffer unbuffered-character-to-8bit-input-stream) (&optional no-hang-p)
  (ignore no-hang-p)
  (when buffer-in
    (error ":NEXT-INPUT-BUFFER before exhausting last input buffer."))
  (multiple-value-bind (n-bytes eof)
      (send stream :string-in nil indirect)
    (if (and eof (or (null n-bytes) (= n-bytes 0)))
	(values nil nil nil t)
      (values our-buffer 0 n-bytes nil))))

(defmethod (:discard-input-buffer unbuffered-character-to-8bit-input-stream) (buffer)
  (unless (or (not our-buffer) (eq buffer our-buffer))
    (ferror "~S being discarded, but ~S is the current input buffer"
	    buffer our-buffer))
  (setq buffer-in nil))

(compile-flavor-methods buffered-character-to-8bit-input-stream
			unbuffered-character-to-8bit-input-stream)


(defflavor buffered-character-to-8bit-stream ()
	   (character-to-8bit-input-stream-mixin
	    8bit-to-buffered-character-output-stream-mixin
	    buffered-binary-stream))

(compile-flavor-methods buffered-character-to-8bit-stream)

(defflavor unbuffered-character-to-8bit-stream ()
	   (character-to-8bit-input-stream-mixin
	    8bit-to-unbuffered-character-output-stream-mixin
	    buffered-binary-stream))

(compile-flavor-methods unbuffered-character-to-8bit-stream)

(defflavor 8bit-to-string-char-input-stream-mixin
	((indirect-array
	   (cl:make-array 0 :element-type 'cl:string-char :displaced-to (cl:make-array 0 :element-type '(cl:unsigned-byte 8)) :displaced-index-offset 512.))
	 indirect-array-offset)
	(basic-indirect-stream-mixin)
  (:required-flavors si:buffered-input-character-stream))

(defmethod (:next-input-buffer 8bit-to-string-char-input-stream-mixin) (&optional no-hang-p)
  (multiple-value-bind (buffer start-index stop-index)
      (send stream :read-input-buffer nil no-hang-p)
    (if (not buffer)
	(values nil nil nil t)
      (let ((size (- stop-index start-index)))
	(change-indirect-array indirect-array 'art-string size buffer start-index)
	(setq indirect-array-offset start-index)
	(values indirect-array 0 size nil)))))

(defmethod (:discard-input-buffer 8bit-to-string-char-input-stream-mixin) (buffer)
  (unless (or (not stream-input-buffer) (eq buffer stream-input-buffer))
    (ferror "~S being discarded, but ~S is the current input buffer"
	    buffer stream-input-buffer))
  (send stream :advance-input-buffer (+ indirect-array-offset stream-input-index)))

(defmethod (:set-pointer 8bit-to-string-char-input-stream-mixin) (new-index)
  (unless (zerop new-index)
    (error ":set-pointer only works for an argument of 0 for ~
             8bit-to-string-char-input-stream-mixin"))
  (setq stream-input-buffer nil
	stream-input-index 0)			;defeat :advance-input-buffer just above
  (send stream :set-pointer new-index))

(defmethod (:element-type 8bit-to-string-char-input-stream-mixin) ()
  'cl:string-char)

(defflavor 8bit-to-string-char-input-stream
	()
	(8bit-to-string-char-input-stream-mixin
	 buffered-input-character-stream))

(defflavor 8bit-to-string-char-ascii-translating-input-stream
	()
	(8bit-to-string-char-input-stream-mixin
	 ascii-translating-buffered-input-stream-mixin
	 buffered-input-character-stream))

(compile-flavor-methods 8bit-to-string-char-input-stream)
(compile-flavor-methods 8bit-to-string-char-ascii-translating-input-stream)



;;;
;;
