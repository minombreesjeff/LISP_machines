;;; -*- Syntax: Zetalisp; Mode: LISP; Package: SYSTEM-INTERNALS; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Iterator macrology.  Maybe very temporary.

; I will probably rewrite the following macrology.  Or explicitly expand the functions
; that use it.
#||
(DEFMACRO ITERATE-OVER (ITERATOR-CALL YIELDING ITERAND-LIST DO &BODY BODY)
  `(,(CAR ITERATOR-CALL) (LAMBDA (,@ITERAND-LIST) ,@BODY) ,@(CDR ITERATOR-CALL)))

(DEFMACRO DEFITERATOR (ITERATOR-NAME ARGLIST YIELDS YIELDLIST &BODY BODY)
  "YIELDS and YIELDLIST only exist for documentation purposes."
  `(DEFUN ,ITERATOR-NAME (ITERATOR-BODY ,@ARGLIST)
     (MACROLET ((YIELD (&REST ITERANDS) (FUNCALL ITERATOR-BODY  ,@ITERANDS)))
       ,@BODY)))
||#

(DEFMACRO ITERATE-OVER (ITERATOR-CALL YIELDING ITERAND-LIST DO &BODY BODY)
  (IGNORE YIELDING DO)
  ; compare yielding clause with yieldlist, if exists.  If shorter, lambda with ignore. = OK
  ; greater, signal error.
  (LET ((BLOCK-NAME (gensym)))
    `(MACROLET ((BREAK () `(RETURN-FROM ,',BLOCK-NAME 'ABNORMAL-TERMINATION))
		(CONTINUE-ITERATOR () `(RETURN-FROM ,',BLOCK-NAME 'CONTINUE-ITERATOR))
		(RETURN-VALUE (VALUE) `(RETURN-FROM ,',BLOCK-NAME ,VALUE)))
       (,(CAR ITERATOR-CALL)
	(LAMBDA (,@ITERAND-LIST)
	  (BLOCK ,BLOCK-NAME ,@BODY 'CONTINUE-ITERATOR))
	,@(CDR ITERATOR-CALL)))))

; Hmm, should allow a keyword, to specify whether the iterator could be a macro rather
; than a function call.

; Can allow parallel iteration of iterators that only have one YIELD form.
(DEFMACRO DEFITERATOR (ITERATOR-NAME ARGLIST YIELDS YIELDLIST &BODY BODY)
  "YIELDS and YIELDLIST only exist for documentation purposes."
  (IGNORE YIELDS)
  (PUTPROP ITERATOR-NAME YIELDLIST 'YIELDLIST)
  (LET ((BLOCK-NAME (GENSYM)))
    `(DEFUN ,ITERATOR-NAME (ITERATOR-BODY ,@ARGLIST)
       (DECLARE (SYS:DOWNWARD-FUNARG ITERATOR-BODY))
       (BLOCK ,BLOCK-NAME
	 (MACROLET ((YIELD (&REST ITERANDS)
		      `(LET ((RETURNED (FUNCALL ITERATOR-BODY ,@ITERANDS)))
			 (SELECTQ RETURNED
			   (ABNORMAL-TERMINATION (RETURN-FROM ,',BLOCK-NAME (VALUES)))
			   (CONTINUE-ITERATOR)
			   (OTHERWISE (RETURN-FROM ,',BLOCK-NAME RETURNED))))))
	   ,@BODY)
	 (RETURN-FROM ,BLOCK-NAME (VALUES))))))

;;; End iterator crap

; This successively yields all subexpressions of expression, along with a
; closure that allows you to alter the value of that subexpression in
; EXPRESSION.  This side effects EXPRESSION.
;
; If RECURSE is non-nil, then subexpressions is called recursively on
; any subexpression that it yields.  If RECURSE is non-nil, and
; AVOID-OBJECTS is provided, SUBEXPRESSIONS does not yield any object
; that is an element of the list AVOID-OBJECTS.
;
; Some subexpressions might be returned more than once, but
; this detects circular structures, and won't infinitely recurse.  If
; you alter a subexpression, its descendants are not yielded.
; Note that ACCESSOR is a downward funarg, so you can't save it away
; anywhere.  You may just use it if you want to alter the value of
; subexpression.
;
; If you alter the value of a subexpression, that subexpression is not 
; walked over.
;
; An example:
;(ITERATE-OVER (SUBEXPRESSIONS '(1 2 (3 4 5) (6 (7 8) (9 10))) :RECURSE 'T)
;	      YIELDING (SUBEXPRESSION REPLACE-VALUE) DO
;  (WHEN (EQUAL SUBEXPRESSION '(3 4 5))
;    (REPLACE-VALUE '(91 (92 (93 94) 95)))))
; would iterate over:
; 1, 2, (3 4 5), (6 (7 8) (9 10)), 6, ((7 8) (9 10)), (7 8), 7, (8), 8, ((9 10)), (9 10),
; 9, (10), 10.
(DEFITERATOR SUBEXPRESSIONS (EXPRESSION &KEY RECURSE AVOID-OBJECTS)
	     YIELDS (SUBEXPRESSION ACCESSOR)
  (LET ((ALTERED NIL))
    (FLET
      ((YIELD-DESCENDANTS (EXPRESSION ACCESSOR RECURSE OBJECTS-SEEN)
	 (DECLARE (SYS:DOWNWARD-FUNARG ACCESSOR))
	 (UNLESS (MEMQ EXPRESSION OBJECTS-SEEN)
	   (WITH-STACK-LIST* (OBJECTS-SEEN EXPRESSION OBJECTS-SEEN)
	     (YIELD EXPRESSION ACCESSOR)
	     (IF ALTERED
		 (SETQ ALTERED NIL)
		 (WHEN RECURSE
		   (ITERATE-OVER (SUBEXPRESSIONS EXPRESSION :RECURSE 'T
							    :AVOID-OBJECTS OBJECTS-SEEN)
				 YIELDING (CHILD ACCESSOR) DO
		     (YIELD CHILD ACCESSOR))))))))

      (MACROLET
	((YIELD-VALUE-AND-ACCESSOR (EXPR &KEY AND-RECURSE)	; EXPR must be SETFable
	   (IF AND-RECURSE
	      `(YIELD-DESCENDANTS ,EXPR
				  (LAMBDA (NEW-VALUE) (SETF ,EXPR NEW-VALUE)(SETQ ALTERED 'T))
				  RECURSE AVOID-OBJECTS)
	      `(UNLESS (MEMQ ,EXPR AVOID-OBJECTS)
		 (PUSH ,EXPR AVOID-OBJECTS)
		 (YIELD ,EXPR (LAMBDA (NEW-VALUE)
				(DECLARE (SYS:DOWNWARD-FUNCTION))
				(SETQ ALTERED 'T)
				(SETF ,EXPR NEW-VALUE)))
		 ;; if this particular node was altered, we want to act as if it were on
		 ;; AVOID-OBJECTS, and avoid recursing
		 (NOT ALTERED)))))
	(COND
	  ((LISTP EXPRESSION)
	   ; explicitly do tail recursion to inhibit stack growth when getting
	   ; subexpressions of long list
	   (LOOP FOR SUBEXPRESSION = EXPRESSION THEN (CDR SUBEXPRESSION)
		 DO (YIELD-VALUE-AND-ACCESSOR (CAR SUBEXPRESSION) :AND-RECURSE 'T)
		 WHILE (AND (LISTP (CDR SUBEXPRESSION))
			    (YIELD-VALUE-AND-ACCESSOR (CDR SUBEXPRESSION)))
		 FINALLY (YIELD-VALUE-AND-ACCESSOR (CDR SUBEXPRESSION) :AND-RECURSE 'T)))
	  ((ARRAYP EXPRESSION)
	   ; The leader always may have values.
	   (WHEN (ARRAY-HAS-LEADER-P EXPRESSION)
	     (LOOP FOR INDEX FROM 0 BELOW (ARRAY-LEADER-LENGTH EXPRESSION) DO
	       (YIELD-VALUE-AND-ACCESSOR (ARRAY-LEADER EXPRESSION INDEX) :AND-RECURSE 'T)))
	   ; If doesn't have objects, then don't bother tracing down this array
	   (WHEN (MEMQ (ARRAY-TYPE EXPRESSION) '(ART-Q ART-Q-LIST))
	     (SELECT (ARRAY-#-DIMS EXPRESSION)
	       ; Damn, should we ignore fill-pointers?
	       (1 (LOOP FOR ELT BEING THE ARRAY-ELEMENTS OF EXPRESSION
				USING (INDEX INDEX)
			DO
		    (IGNORE ELT)
		    (YIELD-VALUE-AND-ACCESSOR (AREF EXPRESSION INDEX) :AND-RECURSE 'T)))
	       (OTHERWISE
		(LOOP FOR 1D-INDEX FROM 0 BELOW (ARRAY-LENGTH EXPRESSION)
		      DO (YIELD-VALUE-AND-ACCESSOR
			   (%1D-AREF EXPRESSION 1D-INDEX) :AND-RECURSE 'T))))))
	  ((CL:LOCALLY (DECLARE (CL:NOTINLINE CL:TYPEP))
		       ;; this needs to load before CLOS is loaded
		       (CL:TYPEP EXPRESSION 'CLOS:STRUCTURE-OBJECT))
	   (DOLIST (SLOT (CLOS:CLASS-SLOTS (CLOS:CLASS-OF EXPRESSION)))
	     (LET ((SLOT-NAME (CLOS:SLOT-DEFINITION-NAME SLOT)))
	       (WHEN (CLOS:SLOT-BOUNDP EXPRESSION SLOT-NAME)
		 (YIELD-VALUE-AND-ACCESSOR (CLOS:SLOT-VALUE EXPRESSION SLOT-NAME)
					   :AND-RECURSE 'T)))))
	  (T ;; I'll have to understand %find-structure-extent before I write this, but I'm
	   ;; not certain that it's possible to get here with a self-referencing structure.
	   #||(multiple-value-bind (nil start-of-object length)
		  (%find-structure-extent expression)) ||#))))))

