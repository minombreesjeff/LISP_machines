;;; -*- Mode: LISP; Base: 8; Package: ZWEI -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;This is the part of the history mechanism shared by the editor and other
;parts of the system.  The file sys:ZWEI;HISTORY contains more editor-
;specific parts of this.

;Note that this references some symbol macros defined in ZWEI.
;The cold load gives the necessary interim definition.

;Normally the elements of a history are strings; the editor's yank commands
; require that elements be either strings or intervals.
;The basic history facilities require only that elements not be NIL, and
; that a flavor of history be used that understands how to print and compare elements.

(DEFFLAVOR HISTORY
	((NAME "Unnamed")			;Name of context this is the history of
	 (LIST NIL)				;List of history elements
	 (MAXIMUM-LENGTH NIL)			;NIL means no bound on length
	 (CURRENT-LENGTH 0)			;= (length list)
	 (ROTATION 0)				;m-Y state
	 (YANK-POSITION 0)			;c-Y  m-Y communication
	 (TEMPORARY-ELEMENT NIL))		;Can be bound to temporary front of list
	()
  (:GETTABLE-INSTANCE-VARIABLES NAME MAXIMUM-LENGTH ROTATION YANK-POSITION)
  (:SETTABLE-INSTANCE-VARIABLES ROTATION)
  (:INITABLE-INSTANCE-VARIABLES NAME MAXIMUM-LENGTH)
  (:REQUIRED-METHODS				;Each flavor of history supplies these
	:PRINT-ELEMENT				;Print an element (for yank menu)
	:EQUAL-ELEMENTS				;Compare two elements
	:MATCH-ELEMENT				;Match a substring against an element
	:CANONICALIZE-DEFAULT))			;Convert a default (or NIL) to an element

;In the above, YANK-POSITION is initialized to zero rather than NIL or unbound
;because in the minibuffer m-Y can be typed before c-m-Y accidentally and the
;command does not detect the error.
;Furthermore there might be other errors allowing you to get into m-Y before
;successfully completing a c-Y (one has been fixed in the source).
;--- It would be better to fix the command, but I can't see how.  243.291.

(DEFMETHOD (:PRINT-SELF HISTORY) (STREAM IGNORE SLASHIFY-P)
  (IF SLASHIFY-P
      (SI:PRINTING-RANDOM-OBJECT (SELF STREAM :TYPEP)
	(SEND STREAM ':STRING-OUT NAME))
      (SEND STREAM ':STRING-OUT NAME)))

(DEFMETHOD (:STRING-FOR-PRINTING HISTORY) () NAME)

(DEFMETHOD (:PRINT-HEADING HISTORY) (STREAM)
  (FORMAT STREAM "~&~A history:~%" NAME))

;;; Higher-level operations
;;; Menu-display, however, is not provided by these since it depends on
;;; the caller's display environment.  The caller should filter out numeric
;;; arguments of zero.

;This is the guts of c-Y or c-m-Y
;Returns an element or NIL if it can't find one
(DEFMETHOD (:YANK HISTORY) (&OPTIONAL (N NIL))
  (LOOP FOR NN FROM (COND ((NULL N) ROTATION)
			  ((PLUSP N) (IF *HISTORY-ROTATE-IF-NUMERIC-ARG* (+ N ROTATION -1)
					 (1- N)))
			  ((MINUSP N) (IF *HISTORY-ROTATE-IF-NUMERIC-ARG* (+ N ROTATION)
					  N))
			  (T (FERROR "Zero should have been handled at a higher level")))
	AS FIXUP-P = T THEN NIL DO
    (MULTIPLE-VALUE-BIND (ELEMENT POSITION)
	(SEND SELF ':ELEMENT NN FIXUP-P)
      (COND ((NULL ELEMENT)
	     (RETURN NIL))
	    ((OR N (SEND SELF ':ELEMENT-VISIBLE ELEMENT))
	     (SETQ YANK-POSITION POSITION)
	     (RETURN ELEMENT))))))

;This is the guts of c-sh-Y or c-m-sh-Y
;Returns NIL if it fails to find anything
;--- Should this use extended-search rather than plain string matching?? ---
(DEFMETHOD (:YANK-MATCHING HISTORY) (STRING &OPTIONAL (N NIL) (MATCH-PREDICATE :MATCH-ELEMENT))
  (LOOP FOR NN FROM (COND ((NULL N) ROTATION)
			  ((PLUSP N) (IF *HISTORY-ROTATE-IF-NUMERIC-ARG* (+ N ROTATION -1)
					 (1- N)))
			  ((MINUSP N) (IF *HISTORY-ROTATE-IF-NUMERIC-ARG* (+ N ROTATION)
					  N))
			  (T (FERROR "Zero should have been handled at a higher level")))
	AS FIXUP-P = T THEN NIL DO
    (MULTIPLE-VALUE-BIND (ELEMENT POSITION)
	(SEND SELF ':ELEMENT NN FIXUP-P)
      (COND ((NULL ELEMENT)
	     (RETURN NIL))
	    ((AND (SEND SELF MATCH-PREDICATE STRING ELEMENT)
		  (OR N (SEND SELF ':ELEMENT-VISIBLE ELEMENT)))
	     (SETQ YANK-POSITION POSITION)
	     (RETURN ELEMENT))))))

(defmacro D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")map-history-elements0 ((history element-var idx-var &rest options)
				&body body)
  (declare (arglist (history element-var idx-var
			     &key start-idx offset match-string
			     cutoff-length)
		    &body body))
  `(send ,history :map-history-elements-internal
	 (zl:named-lambda map-history-elements (,element-var ,idx-var)
	   (declare (sys:downward-function))
	   ,@body)
	 ,@options))

(defmethod 1(:map-history-elements-internal history)
0	   (continuation &key start-idx offset cutoff-length
			      match-string (match-predicate :match-element))
  (declare (sys:downward-funarg continuation))
  (setq start-idx (cond ((null start-idx) 0)
			((not (minusp start-idx))
			 (if *history-rotate-if-numeric-arg* (+ start-idx rotation -1)
			     (1- start-idx)))
			(t
			 (if *history-rotate-if-numeric-arg* (+ start-idx rotation)
			     start-idx))))
  (loop for r from (+ (or start-idx rotation) (or offset 0))
	with length = (send self :length)
	repeat (if cutoff-length (min length cutoff-length) length)
	unless (< -1 r length)
	  do (if *history-yank-wraparound* (setq r (mod r length)) (return nil))
	as element = (send self :element r)
	when (or (null match-string) (send self match-predicate match-string element))
	  do (funcall continuation element r)))

;This is the guts of m-Y (having already figured out that the last command
; was a yanking command and which history it used).
;Returns NIL if it fails to find anything different.
;If STRING is supplied, only consider things that match that string.
(defmethod 1(:yank-next history)0 (&optional (n 1) string (predicate :match-element))
  (when (zerop n) 
    (ferror "Zero should have been handled at a higher level"))
  (let ((old-element (send self :element yank-position)))
    (block find-it
      (map-history-elements (self element idx :start-idx (1+ yank-position) :offset n
				  :match-string string :match-predicate predicate)
	(unless (send self :equal-elements element old-element)
	  (setq rotation (setq yank-position idx))
	  (return-from find-it element))))))

;This allows m-Y to work after doing a "random access" yank from the mouse
(DEFMETHOD (:NOTE-ELEMENT-YANKED HISTORY) (ELEMENT)
  (LOOP FOR N FROM 0
	AS ELEMENT1 = (SEND SELF ':ELEMENT N)
	UNTIL (NULL ELEMENT1)
	WHEN (EQ ELEMENT ELEMENT1)
	  RETURN (SETQ YANK-POSITION N)))

(defmethod 1(:note-element-index-yanked history)0 (n)
  (setq yank-position n))


;;; One possible implementation of menu display, callable if numeric arg = 0

;; Display a "menu" onto an ordinary stream, or one with mouse-sensitive items.  Typeout
;; is terminated if :LISTEN sees some input.  If MAXIMUM-LENGTH is a number, then the
;; number of lines displayed will be the smaller of MAXIMUM-LENGTH and the number of lines
;; in the window.  If MAXIMUM-LENGTH is NIL, then the entire history is displayed.
(DEFCONST *DISPLAY-HISTORY-PRINT-LEVEL* 6)
(DEFCONST *DISPLAY-HISTORY-PRINT-LENGTH* 6)

(DEFUN DISPLAY-HISTORY-MENU (STREAM HISTORY MAXIMUM-LENGTH
			     &OPTIONAL META-Y IGNORE STRING (STARTING-POSITION 0))
  (LETF ((CL:*PRINT-LEVEL* *DISPLAY-HISTORY-PRINT-LEVEL*)
	 (CL:*PRINT-LENGTH* *DISPLAY-HISTORY-PRINT-LENGTH*))
    (LET ((CURRENT-LENGTH (SEND HISTORY ':LENGTH))
	  (SCANNED-LENGTH 0)
	  (ROTATION (COND (META-Y (SEND HISTORY ':YANK-POSITION))
			  (*HISTORY-ROTATE-IF-NUMERIC-ARG* (SEND HISTORY ':ROTATION))
			  (T 0))))
      (IGNORE ROTATION)
      (SEND HISTORY ':PRINT-HEADING STREAM)
      (COND ((NULL MAXIMUM-LENGTH)
	     (SETQ MAXIMUM-LENGTH CURRENT-LENGTH))
	    ((EQ MAXIMUM-LENGTH T)
	     (SETQ MAXIMUM-LENGTH *HISTORY-MENU-LENGTH*)
	     (MULTIPLE-VALUE-BIND (IGNORE HEIGHT)
		 (SEND TERMINAL-IO ':SIZE-IN-CHARACTERS)
	       ;; 3 allows for the heading line, the parenthesized footing line,
	       ;; and the blank line that the cursor gets left on.
	       (AND (< (- HEIGHT 3) MAXIMUM-LENGTH)
		    (SETQ MAXIMUM-LENGTH (- HEIGHT 3))))))
      (let ((elts-displayed 0)
	    (max-displayed-index 0))
	;; Print elements with negative rotated positions.  First pass just counts them
	(block display-them
	  (let ((previous nil))
	    (map-history-elements (history element index :match-string string)
	      (incf scanned-length)
	      (when (and ( index starting-position)
			 (or (null previous)
			     (not (send history :equal-elements element previous))))
		(incf elts-displayed)
		(dw::maxf max-displayed-index index)
		(send history :display-history-menu-element stream
		      (1+ index) index))
	      (when (> elts-displayed maximum-length) (return-from display-them (values)))
	      (when (listen-for-blip-other-than stream 'redisplay 'select-window)
		(return-from display-them (values)))
	      (setq previous element))))
	(IF (ZEROP CURRENT-LENGTH)
	    (FORMAT STREAM "(History is empty.)")
	    (IF STRING
		(COND ((zerop elts-displayed)
		       (FORMAT STREAM "(No items of history match.)"))
		      ((= SCANNED-LENGTH CURRENT-LENGTH)
		       (FORMAT STREAM "(End of matching items in history.)"))
		      (T
		       (SCL:PRESENT (LIST HISTORY META-Y STRING max-displayed-index)
				    'DISPLAY-REST-OF-HISTORY
				    :STREAM STREAM)))
		(COND ((zerop elts-displayed)
		       (FORMAT STREAM "(No items of history displayed.)"))
		      ((= SCANNED-LENGTH CURRENT-LENGTH)
		       (FORMAT STREAM "(End of history.)"))
		      (T
		       (DW:WITH-OUTPUT-AS-PRESENTATION (:STREAM STREAM
							:OBJECT (LIST HISTORY META-Y
								      STRING max-displayed-index)
							:TYPE 'DISPLAY-REST-OF-HISTORY)
			 (FORMAT STREAM "(~D more item~:P in history.)"
				 (- CURRENT-LENGTH max-displayed-index)))))))
	(SEND STREAM ':TYO #\NEWLINE)))))

;;; Old definition, kept around 6/20/87 because I'm sure I'll need it for
;;; comparison purposes when the bug reports start coming in.  -- Doughty
;(DEFUN DISPLAY-HISTORY-MENU (STREAM HISTORY MAXIMUM-LENGTH
;			     &OPTIONAL META-Y IGNORE STRING (STARTING-POSITION 0))
;  (LET ((CURRENT-LENGTH (SEND HISTORY ':LENGTH))
;	(SCANNED-LENGTH 0)
;	(ROTATION (COND (META-Y (SEND HISTORY ':YANK-POSITION))
;			(*HISTORY-ROTATE-IF-NUMERIC-ARG* (SEND HISTORY ':ROTATION))
;			(T 0)))
;	(FLAG NIL))
;    (SEND HISTORY ':PRINT-HEADING STREAM)
;    (COND ((NULL MAXIMUM-LENGTH)
;	   (SETQ MAXIMUM-LENGTH CURRENT-LENGTH))
;	  ((EQ MAXIMUM-LENGTH T)
;	   (SETQ MAXIMUM-LENGTH *HISTORY-MENU-LENGTH*)
;	   (MULTIPLE-VALUE-BIND (IGNORE HEIGHT)
;	       (SEND TERMINAL-IO ':SIZE-IN-CHARACTERS)
;	     ;; 3 allows for the heading line, the parenthesized footing line,
;	     ;; and the blank line that the cursor gets left on.
;	     (AND (< (- HEIGHT 3) MAXIMUM-LENGTH)
;		  (SETQ MAXIMUM-LENGTH (- HEIGHT 3))))))
;    (BLOCK DISPLAY-HISTORY-MENU
;      ;; Print elements with negative rotated positions.  First pass just counts them
;      (LOOP FOR I IN (NREVERSE (LOOP FOR I DOWNFROM (1- ROTATION) TO 0
;				     WITH COUNT = (// MAXIMUM-LENGTH 3)
;				     WITH PREVIOUS = NIL
;				     AS ELEMENT = (SEND HISTORY ':ELEMENT I)
;				     DO (INCF SCANNED-LENGTH)
;				     WHEN (OR (NULL PREVIOUS)
;					      (NOT (SEND HISTORY ':EQUAL-ELEMENTS
;								 ELEMENT PREVIOUS)))
;				       WHEN (OR (NULL STRING)
;						(SEND HISTORY ':MATCH-ELEMENT STRING ELEMENT))
;					 COLLECT I
;					 AND DO (SETQ PREVIOUS ELEMENT)
;						(DECF COUNT)
;				     WHILE (PLUSP COUNT)))
;	    DO (UNLESS (< I STARTING-POSITION)
;		 (SEND HISTORY ':DISPLAY-HISTORY-MENU-ELEMENT STREAM (- I ROTATION) I)
;		 (DECF MAXIMUM-LENGTH))
;	       (SETQ FLAG T)
;	  WHEN (LISTEN-FOR-BLIP-OTHER-THAN STREAM 'REDISPLAY 'SELECT-WINDOW)
;	    DO (RETURN-FROM DISPLAY-HISTORY-MENU NIL))
;      ;; Print elements with positive rotated positions
;      (LOOP FOR I FROM (IF META-Y (1+ ROTATION) ROTATION) WHILE (PLUSP MAXIMUM-LENGTH)
;	    FOR J FROM 1
;	    WITH PREVIOUS = NIL
;	    AS ELEMENT = (SEND HISTORY ':ELEMENT I) UNTIL (NULL ELEMENT)
;	    DO (INCF SCANNED-LENGTH)
;	    WHEN (OR (NULL PREVIOUS)
;		     (NOT (SEND HISTORY ':EQUAL-ELEMENTS ELEMENT PREVIOUS)))
;	      WHEN (OR (NULL STRING)
;		       (SEND HISTORY ':MATCH-ELEMENT STRING ELEMENT))
;		DO (UNLESS (< I STARTING-POSITION)
;		     (SEND HISTORY :DISPLAY-HISTORY-MENU-ELEMENT STREAM J I)
;		     (DECF MAXIMUM-LENGTH))
;		   (SETQ PREVIOUS ELEMENT)
;		   (SETQ FLAG T)
;	    WHEN (LISTEN-FOR-BLIP-OTHER-THAN STREAM 'REDISPLAY 'SELECT-WINDOW)
;	      DO (RETURN-FROM DISPLAY-HISTORY-MENU NIL)))
;    (IF (ZEROP CURRENT-LENGTH)
;	(FORMAT STREAM "(History is empty.)")
;	(IF STRING
;	    (COND ((NOT FLAG)
;		   (FORMAT STREAM "(No items of history match.)"))
;		  ((= SCANNED-LENGTH CURRENT-LENGTH)
;		   (FORMAT STREAM "(End of matching items in history.)"))
;		  (T
;		   (SCL:PRESENT (LIST HISTORY META-Y STRING SCANNED-LENGTH)
;				'DISPLAY-REST-OF-HISTORY
;				:STREAM STREAM)))
;	    (COND ((NOT FLAG)
;		   (FORMAT STREAM "(No items of history displayed.)"))
;		  ((= SCANNED-LENGTH CURRENT-LENGTH)
;		   (FORMAT STREAM "(End of history.)"))
;		  (T
;		   (DW:WITH-OUTPUT-AS-PRESENTATION (:STREAM STREAM
;					      :OBJECT (LIST HISTORY META-Y
;							    STRING SCANNED-LENGTH)
;					      :TYPE 'DISPLAY-REST-OF-HISTORY)
;		     (FORMAT STREAM "(~D more item~:P in history.)"
;			     (- CURRENT-LENGTH SCANNED-LENGTH)))))))
;    (SEND STREAM ':TYO #\NEWLINE)))

(DEFUN LISTEN-FOR-BLIP-OTHER-THAN (STREAM &REST BLIP-TYPES)
  (LOOP WHILE (SEND-IF-HANDLES STREAM ':LISTEN)
	AS CH = (SEND STREAM ':ANY-TYI)
	UNLESS (AND (LISTP CH) (MEMQ (CAR CH) BLIP-TYPES))
	  DO (SEND STREAM ':UNTYI CH)
	     (RETURN T)))

(DEFUN DISPLAY-REST-OF-HISTORY (THING)
  (FUNCALL DW::*HELP-DISPLAYER*
	   (LAMBDA (STREAM)
	     (DECLARE (SYS:DOWNWARD-FUNCTION))
	     (DISPLAY-HISTORY-MENU STREAM (FIRST THING) NIL
				   (SECOND THING) NIL (THIRD THING) (FOURTH THING)))
	   STANDARD-OUTPUT)
  NIL)

;;; Methods that manipulate the history list

(DEFVAR *CLIM-KILL-RING-SAVE* NIL)

(DEFMETHOD (:PUSH HISTORY) (ELEMENT &OPTIONAL (NOTIFY-CLIM T))
  (WHEN (AND NOTIFY-CLIM
	     *CLIM-KILL-RING-SAVE*
	     (EQ SELF *KILL-HISTORY*))
    (FUNCALL *CLIM-KILL-RING-SAVE* ELEMENT NIL))
  (WITHOUT-INTERRUPTS				;Interlock against other :push / :element
    (COND ((EQL CURRENT-LENGTH MAXIMUM-LENGTH)
	   (LET ((CONS (LAST LIST)))
	     (RPLACA CONS ELEMENT)
	     (RPLACD CONS (NBUTLAST LIST))
	     (SETQ LIST CONS)))
	  (T
	   (PUSH ELEMENT LIST)
	   (INCF CURRENT-LENGTH)))
    (SETQ ROTATION 0 TEMPORARY-ELEMENT NIL)))

(DEFMETHOD (:REPLACE-TOP HISTORY) (ELEMENT &OPTIONAL (NOTIFY-CLIM T))
  (WHEN (AND NOTIFY-CLIM
	     *CLIM-KILL-RING-SAVE*
	     (EQ SELF *KILL-HISTORY*))
    (FUNCALL *CLIM-KILL-RING-SAVE* ELEMENT T))
  (SETF (CAR LIST) ELEMENT))

(DEFMETHOD (:POP HISTORY) ()
  (WHEN (AND CURRENT-LENGTH (PLUSP CURRENT-LENGTH))
    (WITHOUT-INTERRUPTS
      (DECF CURRENT-LENGTH)
      (PROG1 (CAR LIST)
	     (SETQ LIST (CDR LIST))))))

(DEFMETHOD (:FUNCALL-WITH-DEFAULT HISTORY) (ELEMENT FUNCTION &REST ARGS)
  (SETQ ROTATION 0)
  (LETF ((TEMPORARY-ELEMENT ELEMENT))
    (APPLY FUNCTION ARGS)))

(DEFMETHOD (:ELEMENT HISTORY) (N &OPTIONAL FIXUP-P &AUX (DELTA 0))
  (DECLARE (VALUES ELEMENT INDEX))
  (WITHOUT-INTERRUPTS				;Interlock against other :push / :element
    (BLOCK NIL
      (WHEN TEMPORARY-ELEMENT
	(WHEN (OR (ZEROP N) (AND FIXUP-P (MINUSP N)))
	  (RETURN (VALUES TEMPORARY-ELEMENT 0)))
	(DECF N)
	(INCF DELTA))
      (COND ((MINUSP N) (VALUES (AND FIXUP-P (FIRST LIST)) DELTA))
	    ((< N CURRENT-LENGTH) (VALUES (NTH N LIST) (+ N DELTA)))
	    (FIXUP-P (VALUES (CAR (LAST LIST)) (+ CURRENT-LENGTH -1 DELTA)))
	    (T NIL)))))

(DEFMETHOD (:LENGTH HISTORY) ()
  (IF TEMPORARY-ELEMENT (1+ CURRENT-LENGTH) CURRENT-LENGTH))

(DEFMETHOD (:SET-MAXIMUM-LENGTH HISTORY) (N)
  (AND (NOT (NULL N))
       (< N CURRENT-LENGTH)
       (SETQ LIST (FIRSTN N LIST)
	     CURRENT-LENGTH N))
  (SETQ MAXIMUM-LENGTH N))

(DEFMETHOD (:RESET HISTORY) ()
  (SETQ LIST NIL CURRENT-LENGTH 0 ROTATION 0 TEMPORARY-ELEMENT NIL))

;;; Methods that know the form of an element.
;;; These default methods assume that elements are either stringish or
;;; associations from strings to objects of some sort.

(DEFMETHOD (:PRINT-ELEMENT HISTORY) (ELEMENT STREAM)
  (AND (LISTP ELEMENT) (SETQ ELEMENT (CAR ELEMENT)))
  (PRINC ELEMENT STREAM))

(DEFMETHOD (:EQUAL-ELEMENTS HISTORY) (ELEMENT1 ELEMENT2)
  (SI:CASE-SENSITIVE-EQUAL ELEMENT1 ELEMENT2))

(DEFMETHOD (:MATCH-ELEMENT HISTORY) (STRING ELEMENT)
  (AND (LISTP ELEMENT) (SETQ ELEMENT (CAR ELEMENT)))
  (STRING-SEARCH STRING ELEMENT))

(DEFMETHOD (:CANONICALIZE-DEFAULT HISTORY) (ELEMENT)
  ELEMENT)

(DEFMETHOD (:ELEMENT-VISIBLE HISTORY) (ELEMENT)
  ELEMENT ;ignored
  T)

;;; Default interfacing to mouse items

(DEFMETHOD (:HISTORY-ELEMENT-PRESENTATION-TYPE HISTORY) (IGNORE) 'SI:HISTORY-AND-ELEMENT)
(DEFMETHOD (:HISTORY-AND-ELEMENT HISTORY) (ELEMENT) (CONS SELF ELEMENT))

(DEFMETHOD (:DISPLAY-HISTORY-MENU-ELEMENT HISTORY) (STREAM NUMBER INDEX)
  (LET ((ELEMENT (SEND SELF :ELEMENT INDEX)))
    (DW:WITH-OUTPUT-AS-PRESENTATION (:STREAM STREAM
				     :OBJECT (SEND SELF :HISTORY-AND-ELEMENT ELEMENT)
				     :TYPE (SEND SELF :HISTORY-ELEMENT-PRESENTATION-TYPE
						 ELEMENT))
      (IF (OR *HISTORY-ROTATE-IF-NUMERIC-ARG* (ZEROP ROTATION))
	  (FORMAT STREAM "~3D: " NUMBER)
	  (FORMAT STREAM "~:[ ~;~]~3D: " (= INDEX ROTATION) NUMBER))
      (SEND SELF :PRINT-ELEMENT ELEMENT STREAM)))
  (SEND STREAM ':TYO #\CR))

;;; Specific kinds of histories

;;; Elements are strings, but they print in abbreviated form
;;; so the history menu is easier to read.
(DEFFLAVOR ABBREVIATING-HISTORY () (HISTORY))

(DEFMETHOD (:PRINT-ELEMENT ABBREVIATING-HISTORY) (ELEMENT STREAM &AUX N)
  (AND (LISTP ELEMENT) (SETQ ELEMENT (CAR ELEMENT)))
  (COND ((AND (STRINGP ELEMENT)
	      (OR (> (SETQ N (STRING-LENGTH ELEMENT)) 60.) (STRING-SEARCH-CHAR #\CR ELEMENT)))
	 ;; Strip blank lines
	 (LET ((I (STRING-SEARCH-NOT-SET '(#\SP #\TAB #\CR) ELEMENT)))
	   (SETQ I (1+ (OR (AND I (STRING-REVERSE-SEARCH-CHAR #\CR ELEMENT I)) -1)))
	   (UNLESS (ZEROP I)
	     (SEND STREAM ':STRING-OUT "...")
	     (SEND STREAM ':DISPLAY-LOZENGED-STRING "Return"))
	   ;; Print at most two partial lines
	   (LET* ((J (STRING-SEARCH-CHAR #\CR ELEMENT I))
		  (K (OR (AND J (STRING-SEARCH-CHAR #\CR ELEMENT (1+ J))) N)))
	     (OR J (SETQ J N))
	     (SEND STREAM ':STRING-OUT ELEMENT I (+ I (MIN (- J I) 30.)))
	     (WHEN (> (- J I) 30.)
	       (SEND STREAM ':STRING-OUT "..."))
	     (WHEN (< J N)
	       (SEND STREAM ':DISPLAY-LOZENGED-STRING "Return")
	       (SEND STREAM ':STRING-OUT ELEMENT (1+ J) (+ J (MIN (- K J 1) 30.) 1))
	       (WHEN (< K N)
		 (SEND STREAM ':STRING-OUT "..."))))))
	(T (PRINC ELEMENT STREAM))))

;;; Define this here so that it will indicate that all of editor is missing.

(DEFVAR *ZMACS-NEEDS-INITIALIZATION* T)		;T means initialize ZMACS on next entry.

;;; Kill ring stuff

(DEFUN KILL-RING-PUSH (&REST STRINGS)
  (LET ((INTERVAL (APPLY #'STRINGS-INTO-KILL-RING-INTERVAL STRINGS)))
    (SEND *KILL-HISTORY* :PUSH INTERVAL)
    INTERVAL))

(DEFUN OPEN-KILL-RING-STREAM ()
  (IF *ZMACS-NEEDS-INITIALIZATION*
      (LET ((STRING  (CL:MAKE-STRING 100)))
	(SYS:MAKE-LEXICAL-CLOSURE (CLI::MAKE-STRING-OUTPUT-ENVIRONMENT
				    :STRING STRING :INDEX 0 :END 100)
				  #'(LAMBDA (ENVIRONMENT OP &OPTIONAL ARG1 &REST ARGS)
				      (SELECTQ OP
					(:CLOSE
					  (ZL:ADJUST-ARRAY-SIZE (CLI::SOS-STRING ENVIRONMENT)
								(CLI::SOS-INDEX ENVIRONMENT))
					  (KILL-RING-PUSH (CLI::SOS-STRING ENVIRONMENT)))
					(OTHERWISE
					  (LEXPR-FUNCALL #'CLI::STRING-OUTPUT-STREAM
							 ENVIRONMENT OP ARG1 ARGS))))))
      (LET ((INTERVAL (CREATE-INTERVAL NIL NIL (MAKE-INSTANCE 'KILL-RING-INTERVAL))))
	(SEND *KILL-HISTORY* :PUSH INTERVAL)
	(INTERVAL-STREAM INTERVAL))))

;;; In case the editor is not loaded.  True initializations are done by DEFGLOBALS there.

(SETQ *KILL-HISTORY* (MAKE-INSTANCE 'HISTORY ':NAME "Kill"))
(SETQ *KILL-HISTORY-USER* NIL)
(SET '*HISTORY-MENU-LENGTH* 20.)
(SET '*HISTORY-YANK-WRAPAROUND* T)
(SET '*HISTORY-ROTATE-IF-NUMERIC-ARG* NIL)

;;; This will do until the editor is loaded.
(FSET 'STRINGS-INTO-KILL-RING-INTERVAL #'STRING-APPEND)
