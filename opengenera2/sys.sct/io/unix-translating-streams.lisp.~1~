;;; -*- Mode: LISP; Syntax: Common-lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun si:make-translation-table (chars)
  (let ((table (cl:make-array 256 :element-type '(cl:unsigned-byte 8))))
    (dotimes (octet 256)
      (setf (aref table octet) octet))
    (loop for (char octet) in chars do
      (cl:rotatef (aref table (char-code char)) (aref table octet)))
    table))

(cl:defparameter si:*unix-translation-table*
		 (si:make-translation-table '((#\Bs #o010)
					      (#\Tab #o011)
					      (#\Cr #o012)	;UNIX likes it this way
					      (#\Ff #o014)
					      (#\Line #o015)	;Might as well be symmetric
					      (#\Rubout #o177))))

(defflavor unix-translating-buffered-input-stream-mixin
	((uti-buffer nil)
	 (uti-string nil))
	()
  :abstract-flavor
  (:required-flavors si:character-stream si:buffered-input-stream))


(defwhopper (:next-input-buffer unix-translating-buffered-input-stream-mixin)
	    (&optional no-wait-p)
  (multiple-value-bind (buffer start end)
      (continue-whopper no-wait-p)
    (setf uti-buffer buffer)
    (when (null buffer) (return-from :next-input-buffer nil))
    (let ((octets (- end start)))
      (when (or (null uti-string)
		(< (length uti-string) octets))
	(setf uti-string (make-array octets :element-type 'string-char)))
      (let ((buffer buffer) (string uti-string) (table si:*unix-translation-table*) (i1 start))
	(declare (sys:array-register buffer string table))
	(dotimes (i2 octets)
	  (setf (aref string i2) (code-char (aref table (aref buffer i1))))
	  (incf i1))
	(values string 0 octets)))))


(defwhopper (:discard-input-buffer unix-translating-buffered-input-stream-mixin) (ignore)
  (continue-whopper uti-buffer))


;;;

(defflavor unix-translating-buffered-output-stream-mixin
	((uto-string nil) (uto-buffer nil) (uto-buffer-start nil))
	()
  :abstract-flavor
  (:required-flavors si:character-stream si:buffered-output-stream))


(defwhopper (:new-output-buffer unix-translating-buffered-output-stream-mixin) ()
  (multiple-value-bind (buffer start end)
      (continue-whopper)
    (let ((length (- end start)))
      (unless (and uto-string ( (length uto-string) length))
	(setq uto-string (make-string (* 512 (sys:%fixnum-ceiling length 512))
				      :element-type 'character)))
      (setq uto-buffer buffer uto-buffer-start start)
      (values uto-string 0 length))))


(defwhopper (:send-output-buffer unix-translating-buffered-output-stream-mixin)
	    (string end eor)
  (let ((string string) (buffer uto-buffer) (table si:*unix-translation-table*))
    (declare (sys:array-register string buffer table))
    (loop for i below end
	  for j upfrom uto-buffer-start
	  for char = (aref string i)
	  unless (zerop (si:char-char-set-index char))
	    do (error "~C is not in the standard character set" char)
	  do (setf (aref buffer j) (aref table (char-code char)))))
  (continue-whopper (shiftf uto-buffer nil) (+ (shiftf uto-buffer-start nil) end) eor))

(defwhopper (:discard-output-buffer unix-translating-buffered-output-stream-mixin) (ignore)
  (setq uto-buffer-start nil)
  (continue-whopper (shiftf uto-buffer nil)))

(defflavor 8bit-binary-stream-associated-unix-character-input-stream
	(stream)
	(si:unbuffered-line-input-mixin si:character-stream si:input-stream)
  (:initable-instance-variables stream)
  (:documentation "Stream that hangs off of a binary stream but will read Unix characters."))

(defmethod (:tyi 8bit-binary-stream-associated-unix-character-input-stream) (&optional eof)
  (let ((ch (send stream :tyi eof)))
    (and ch (code-char (aref si:*unix-translation-table* ch)))))

(defmethod (:untyi 8bit-binary-stream-associated-unix-character-input-stream) (ch)
  (send stream :untyi (aref si:*unix-translation-table* (char-code ch))))

(defmethod (:listen 8bit-binary-stream-associated-unix-character-input-stream) ()
  (send stream :listen))

(defmethod (:unclaimed-message 8bit-binary-stream-associated-unix-character-input-stream)
	   (message &rest args)
  (apply stream message args))

(defflavor 8bit-binary-stream-associated-unix-character-output-stream
	(stream)
	(si:line-output-stream-mixin si:character-stream si:output-stream)
  (:initable-instance-variables stream))

(defmethod (:unclaimed-message 8bit-binary-stream-associated-unix-character-output-stream)
	   (message &rest args)
  (apply stream message args))

(defmethod (:force-output 8bit-binary-stream-associated-unix-character-output-stream) ()
  (send stream :force-output))

(defmethod (:string-out 8bit-binary-stream-associated-unix-character-output-stream)
	   (string &optional (start 0) end)
  (unless end (setq end (length string)))
  (let ((length (- end start)))
    (sys:with-stack-array (binary-array length :element-type '(unsigned-byte 8))
      (declare (sys:array-register binary-array))
      (let ((string string) (table si:*unix-translation-table*) (i1 start))
	(declare (sys:array-register string table))
	(dotimes (i2 length)
	  (setf (aref binary-array i2) (aref table (char-code (aref string i1))))
	  (incf i1))
	(send stream :string-out binary-array)))))

(defmethod (:tyo 8bit-binary-stream-associated-unix-character-output-stream) (ch)
  (send stream :tyo (aref si:*unix-translation-table* (char-code ch))))

(defflavor 8bit-binary-stream-associated-unix-character-stream
	(stream)
	(si:bidirectional-stream
	 8bit-binary-stream-associated-unix-character-input-stream
	 8bit-binary-stream-associated-unix-character-output-stream)
  (:initable-instance-variables stream)
  (:constructor unix-character-stream (stream)))

(compile-flavor-methods 
  8bit-binary-stream-associated-unix-character-output-stream
  8bit-binary-stream-associated-unix-character-input-stream
  8bit-binary-stream-associated-unix-character-stream)

(defflavor unsigned-byte-8-with-unix-character-input-mixin
	((binary-stream-character-stream nil))
	(si:unsigned-byte-8-stream)
  )

(defmethod (si:thin-character-stream unsigned-byte-8-with-unix-character-input-mixin) ()
  (unless binary-stream-character-stream
    (setq binary-stream-character-stream
	  (make-instance '8bit-binary-stream-associated-unix-character-input-stream
			 :stream self)))
  binary-stream-character-stream)

(defflavor unsigned-byte-8-with-unix-character-output-mixin
	((binary-stream-character-stream nil))
	(si:unsigned-byte-8-stream)
  )

(defmethod (si:thin-character-stream unsigned-byte-8-with-unix-character-output-mixin) ()
  (unless binary-stream-character-stream
    (setq binary-stream-character-stream
	  (make-instance '8bit-binary-stream-associated-unix-character-output-stream
			 :stream self)))
  binary-stream-character-stream)

(defflavor unsigned-byte-8-with-unix-character-io-mixin
	((binary-stream-character-stream nil))
	(si:unsigned-byte-8-stream)
  )

(defmethod (si:thin-character-stream unsigned-byte-8-with-unix-character-io-mixin) ()
  (unless binary-stream-character-stream
    (setq binary-stream-character-stream
	  (make-instance '8bit-binary-stream-associated-unix-character-stream
			 :stream self)))
  binary-stream-character-stream)

