;;; -*- Mode: LISP; Syntax: Common-lisp; Package: CLI; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor iso9660-pathname-mixin ()
	   (fs:upper-case-only-underscore-mixin fs:no-device-mixin
	    fs:meaningful-root-mixin fs:hierarchical-directory-mixin)
  (:required-flavors fs:pathname))

(defun valid-iso9660-string-p (string)
  (every #'(lambda (char)
	     (let ((code (char-code char)))
	       (or (<= (char-code #\A) code (char-code #\Z))
		   (<= (char-code #\0) code (char-code #\9))
		   (eql code (char-code #\_))
		   (eql code (char-code #\*)))))
	 string))

(defmethod (:valid-directory-component-p iso9660-pathname-mixin) (nam level)
  (and (< level 7)
       (typecase nam
	 (symbol (member nam '(nil :wild :wild-inferiors)))
	 (string (and (<= (- (length nam) (count #\* nam)) 31)
		      (valid-iso9660-string-p nam))))))

(defmethod (:valid-name-p iso9660-pathname-mixin) (nam)
  (typecase nam
    (symbol (member nam '(nil :wild)))
    (string (valid-iso9660-string-p nam))))

(defmethod (:valid-type-p iso9660-pathname-mixin) (typ)
  (typecase typ
    (symbol (member typ '(nil :wild :directory)))
    (string (valid-iso9660-string-p typ))))

(defmethod (:valid-version-p iso9660-pathname-mixin) (ver)
  (typecase ver
    (symbol (member ver '(nil :wild :newest :oldest :unspecific)))
    ((integer 1 32767) t)))

(defwhopper (:validate iso9660-pathname-mixin) ()
  (loop
    (continue-whopper)
    (cond ((eq fs:type :directory)
	   (setf fs:version :unspecific)
	   (unless (and (stringp fs:name) (< 31 (- (length fs:name) (count #\* fs:name))))
	     (return))
	   (signal-proceed-case ((new-value) 'fs:invalid-pathname-component
				 :pathname self :component :name :component-value fs:name
				 :component-description "name component")
	     (:new-component
	       (setf fs:name (send self :uncase-name (send self :case-name new-value)))
	       (send self :decache-cached-strings))))
	  (t
	   (when (eq fs:version :unspecific)
	     (setf fs:version :newest))
	   (unless (< 30 (+ (if (stringp fs:name) (- (length fs:name) (count #\* fs:name)) 0)
			    (if (stringp fs:type) (- (length fs:type) (count #\* fs:type)) 0)))
	     (return))
	   (signal-proceed-case ((nam typ) 'iso9660-name-and-type-too-long :pathname self)
	     (:new-name-and-type
	       (setf fs:name (send self :uncase-name (send self :case-name nam)))
	       (setf fs:type (send self :uncase-type (send self :case-type typ)))
	       (send self :decache-cached-strings))))))
  nil)

;;;

(defflavor iso9660-name-and-type-too-long (pathname)
	   (fs:pathname-error)
  :initable-instance-variables)

(defmethod (dbg:report iso9660-name-and-type-too-long) (stream)
  (format stream "Name and type together are more than 31 characters in ~A" pathname))

(defmethod (dbg:proceed iso9660-name-and-type-too-long :new-name-and-type)
	   (&optional (name (accept '(or (member :wild nil) string)
				    :prompt "New name" :default (send pathname :raw-name)))
		      (type (accept '(or (member :wild nil :directory) string)
				    :prompt "New type" :default (send pathname :raw-type))))
  (values :new-name-and-type name type))

(defmethod (:document-proceed-type iso9660-name-and-type-too-long :new-name-and-type) (stream)
  (format stream "Supply a new name and type"))

(compile-flavor-methods iso9660-name-and-type-too-long)

;;;

(defun-in-flavor (iso9660-directory-string iso9660-pathname-mixin) ()
  (case fs:directory
    ((:root) ">")
    ((nil) "")
    (otherwise
     (with-output-to-string (s)
       (let ((dir fs:directory))
	 (cond ((eq (first dir) :relative)
		(setf dir (rest dir))
		(loop while (eq (first dir) :up) do
		  (send s :tyo #\<)
		  (setf dir (rest dir))))
	       (t
		(send s :tyo #\>)))
	 (dolist (component dir)
	   (send s :string-out (case component
				 ((:wild) "*")
				 ((:wild-inferiors) "**")
				 ((nil) "")
				 (otherwise component)))
	   (send s :tyo #\>)))))))

(defun-in-flavor (iso9660-pathname-fname-string iso9660-pathname-mixin) (&optional suppress-newest)
  (with-output-to-string (s)
    (send s :string-out (case fs:name
			  ((:wild) "*")
			  ((nil) "")
			  (otherwise fs:name)))
    (when fs:type
      (send s :tyo #\.)
      (send s :string-out (case fs:type
			    ((:wild) "*")
			    ((:directory) "[DIRECTORY]")
			    (otherwise fs:type))))
    (when (and fs:version
	       (not (eq fs:type :directory))
	       (not (and suppress-newest (eq fs:version :newest))))
      (send s :tyo #\;)
      (format s "~D" (case fs:version
		       ((:wild) "*")
		       ((:newest) "NEWEST")
		       ((:oldest) "OLDEST")
		       (otherwise fs:version))))))

(defun-in-flavor (iso9660-pathname-pname-string iso9660-pathname-mixin) ()
  (string-append (iso9660-directory-string)
		 (if (and (null fs:name) (null fs:type) (null fs:version))
		     ""
		     (iso9660-pathname-fname-string))))

(defmethod (:string-for-printing iso9660-pathname-mixin) ()
  (string-append (send fs:host :name-as-file-computer)
		 ":"
		 (iso9660-pathname-pname-string))) 

(defmethod (:string-for-readable-printing iso9660-pathname-mixin) ()
  (send self :string-for-printing))

(defmethod (:string-for-editor iso9660-pathname-mixin) ()
  (string-append
    (iso9660-pathname-fname-string t)
    " " (iso9660-directory-string) " " (send fs:host :name-as-file-computer) ":")) 

(defmethod (:string-for-host iso9660-pathname-mixin) (&optional ignore)
  (iso9660-pathname-pname-string)) 

(defmethod (:string-for-dired iso9660-pathname-mixin) ()
  (iso9660-pathname-fname-string))

(defmethod (:string-for-directory iso9660-pathname-mixin) ()
  (let ((str (iso9660-directory-string)))
    (substring str 0 (1- (string-length str)))))

;;;

(defun iso9660-parse-directory-relative (s start end real-start real-end)
  (if (string-search-char #\< s :start start :end real-end)
      (fs:parse-pathname-error "Embedded <? - ~A" (substring s real-start real-end)))
  (loop with cx = start
	for x = (string-search-char #\> s :start cx :end end)
	for temp-end = (or x end)
	collect (cond ((= cx temp-end)
		       (fs:parse-pathname-error
			 "Null directory components not allowed: ~A"
			 (substring s real-start real-end)))
		      ((string-equal s "*" :start1 cx :end1 temp-end) :wild)
		      ((string-equal s  "**" :start1 cx :end1 temp-end) :wild-inferiors)
		      ((string-equal s "" :start1 cx :end1 temp-end) nil)
		      (t (string-upcase (substring s cx temp-end))))
	while x
	do (setq cx (1+ x))))

(defun iso9660-parse-directory (s start end real-end)
  (cond ((= start end) :root)
	((char-equal (aref s start) #\<)
	 `(:relative
	    ,@(loop with nup = 0
		    with cx = start
		    when ( cx end) return (loop repeat nup collect :up)
		    while (char-equal (aref s cx) #\<)
		    do (incf cx) (incf nup)
		    finally (return (nconc (loop repeat nup collect :up)
					   (iso9660-parse-directory-relative
					     s cx end start real-end))))))
	((char-equal (aref s start) #\>)
	 (iso9660-parse-directory-relative s (1+ start) end start real-end))
	(t (cons :relative (iso9660-parse-directory-relative s start end start real-end)))))

(defmethod (:parse-namestring iso9660-pathname-mixin) (ignore namestring &optional (start 0) end
						     &aux vdindex tdindex pdindex apdindex)
  (or end (setq end (string-length namestring)))
  ;; Take off leading and trailing spaces
  (setq start (or (string-search-not-char #\sp namestring :start start :end end) start))
  (setq end (1+ (or (string-search-not-char #\sp namestring :from-end t :end end :start start) (1- end))))
  ;; Figure out where if at all the various delimited fields are
  (setq pdindex (string-search-char #\> namestring :end end :start start :from-end t)
	apdindex pdindex
	tdindex (string-search-char #\. namestring :end end :start (or pdindex start) :from-end t)
	vdindex (string-search-char #\; namestring :end end :start (or tdindex pdindex start) :from-end t)
	)
  (unless pdindex
    (setq pdindex (string-search-char #\< namestring :end end :start start :from-end t))
    (if pdindex (setq apdindex (1+ pdindex))))
  (when (and tdindex vdindex (= tdindex vdindex))
    (setq tdindex (string-search-char #\. namestring :end vdindex :start start :from-end t))
    (if (and tdindex pdindex (< tdindex pdindex))
	(fs:parse-pathname-error "Directory names may not have types: ~A" namestring))
    (if (null tdindex) (setq tdindex vdindex vdindex nil)))
  (if (and vdindex tdindex (< vdindex tdindex))
      (fs:parse-pathname-error "Type and version out of order: ~A" namestring))

  ;Now actually extract the various fields and parse the version
  (let ((t-dir (and apdindex (iso9660-parse-directory namestring start apdindex end)))
	(t-name (string-upcase (substring namestring (1+ (or pdindex (1- start))) (or tdindex vdindex end))))
	(t-type (and tdindex (string-upcase (substring namestring (1+ tdindex) (or vdindex end)))))
	(t-version
	  (and vdindex
	       (let ((vstart (1+ vdindex)))
		 (cond ((and (> end vstart)
			     (char-equal #\* (aref namestring vstart)))
			:wild)
		       ((string-equal namestring "NEWEST" :start1 vstart :end1 end)
			:newest)
		       ((string-equal namestring "OLDEST" :start1 vstart :end1 end)
			:oldest)
		       ((string-equal namestring "" :start1 vstart :end1 end)
			nil)
		       ((null (string-search-not-set "0123456789" namestring :start vstart :end end))
			(parse-integer namestring :start vstart :end end :sign-allowed nil))
		       ;; Let :VALID-VERSION cause complaint.
		       (t (substring namestring vstart end)))))))
    ;; Convert wild names
    (setq t-name
	  (selector t-name string-equal
	    ("" (if t-type "" nil))
	    ("" nil)
	    ("*" :wild)
	    (otherwise t-name)))
    (setq t-type
	  (and t-type
	       (selector t-type string-equal
		 ("" nil)
		 ("*" :wild)
		 ("[DIRECTORY]" :directory)
		 (otherwise t-type))))
    ;; May we have the envelope with the answer, please?
    (values :unspecific t-dir t-name t-type t-version)))

;;;

(defmethod (:directory-pathname-as-file iso9660-pathname-mixin) ()
  (cond ((eq fs:directory :root)
	 (error "Can't address root as a file."))
	(t
	 (let ((nam (car (last fs:directory)))
	       (dir (butlast fs:directory)))
	   (send self :new-pathname
		 :raw-directory (or dir :root)
		 :raw-name (if (stringp nam)
			       nam
			       (ecase nam
				 ((:wild) :wild)))
		 :raw-type :directory :version :unspecific)))))

(defmethod (:pathname-as-directory iso9660-pathname-mixin) ()
  (send self :new-pathname
	:raw-directory (append (if (eq fs:directory :root) nil fs:directory) (list fs:name))
	:raw-name nil :raw-type nil :version nil))

(defmethod (:patch-file-name iso9660-pathname-mixin)
	   (system-name same-directory-p patom &optional major-version minor-version)
  (let ((sname (if (eq same-directory-p :explicit) patom system-name)))
    (flet ((shorten (sname length)
	     (if (> (length sname) length)
		 (subseq sname 0 length)
		 sname)))
      (cond (minor-version
	     (format nil "~A-~D-~D" (shorten sname 13) major-version minor-version))
	    (major-version
	     (format nil "~A-~D" (shorten sname 13) major-version))
	    (t (shorten sname 13))))))

;;;

(defflavor iso9660-pathname ()
	   (iso9660-pathname-mixin fs:active-pathname-mixin fs:remote-pathname))

(defmethod (:system-type iso9660-pathname) () :iso9660)

(compile-flavor-methods iso9660-pathname)



(defflavor file-host-iso9660-mixin
	((unit 0)
	 (host net:*local-host*))
	()
  :initable-instance-variables
  :gettable-instance-variables
  (:required-flavors fs:active-pathname-host))

(defmethod (:pathname-flavor file-host-iso9660-mixin) () 'iso9660-pathname)

(defwhopper (fs:pathname-host-get-pathname file-host-iso9660-mixin)
	    (device directory name type version others vc-branch vc-version)
  (continue-whopper device directory name type
		    (cond ((eq type :directory)
			   :unspecific)
			  ((eq version :unspecific)
			   :newest)
			  (t version))
		    others vc-branch vc-version))

(defmethod (:name file-host-iso9660-mixin) ()
  (format nil "~:[~A|~;~*~]CDROM~D"
	  (neti:local-host-p host) (send host :name-as-file-computer) unit))

(defmethod (:system-type file-host-iso9660-mixin) () :iso9660)

(defmethod (:name-as-file-computer file-host-iso9660-mixin) (&optional include-host)
  (if (and (not (neti:local-host-p host)) include-host)
      (string-append (send host :short-name) "|" (send self :short-name))
      (send self :short-name)))

(defun parse-iso9660-unit-number (string index)
  (loop with sum = 0 finally (return sum)
	for i from index below (string-length string)
	do
    (setq sum (+ (* sum 10.) (or (digit-char-p (aref string i)) (return nil))))))

(defmethod (:pathname-host-namep file-host-iso9660-mixin) (name)
  (let ((idx (string-search "CDROM" name :from-end t)))
    (and (not (null idx))
	 (eql unit (parse-iso9660-unit-number name (+ idx 5)))
	 (if (zerop idx)
	     (neti:local-host-p host)		;CDROMn = local|CDROMn
	     (and (char-equal (aref name (1- idx)) #\|)
		  (send host :pathname-host-namep (substring name 0 (1- idx))))))))

(defmethod (:file-access-path file-host-iso9660-mixin) (&optional pathname operation dont-create)
  ;;++ Some types of access might want to look at the pathname to check.
  ;;could send a message to see whether access path works for pathname operation combo?
  (when (and (null fs:file-access-paths) (not dont-create))
    (push
      (if (neti:local-host-p host)
	  (make-instance 'iso9660-file-access-path :host self :unit unit)
	  ;;need our own file connection.
	  (loop for service-access-path in (net:find-paths-to-service-on-host :file host)
		finally (error 'fs:host-not-accessible-for-file :host host
			       :pathname pathname :operation operation)
		as flavor = (get (neti:protocol-name
				   (neti:service-access-path-protocol service-access-path))
				 'iso9660-file-access-path-flavor)
		when flavor
		  return
		    (make-instance flavor :host host :unit unit
				   :service-access-path service-access-path)))
      fs:file-access-paths))
  (car fs:file-access-paths))

(defmethod (:peek-server-info file-host-iso9660-mixin) ()
  (list "Server for ISO 9660 CD-ROM on unit ~D" (send self :unit)))

;;;

(defflavor iso9660-file-host () (file-host-iso9660-mixin net:no-device-host-mixin
				 fs:active-pathname-host net:basic-host))

(compile-flavor-methods iso9660-file-host)

(fs:define-secondary-file-system (cdrom) (host unit)
  (make-instance 'iso9660-file-host :host host :unit unit))



;;; Code for user end of remote ISO9660 access via NFILE.

(defprop :nfile remote-iso9660-nfile-access-path iso9660-file-access-path-flavor)

(defflavor remote-iso9660-nfile-access-path (unit iso9660-host)
	   (fs:lmfs-nfile-access-path)
  (:initable-instance-variables unit))

(defmethod (make-instance remote-iso9660-nfile-access-path) (&rest ignore)
  (setq iso9660-host
	(fs:get-pathname-host (format nil "~A|CDROM~D"
				      (send fs:host :name-as-file-computer) unit))))

(defmethod (:print-self remote-iso9660-nfile-access-path) (stream ignore slashify)
  (if slashify
      (si:printing-random-object (self stream :typep)
	(princ self stream))
      (format stream "~A, ISO 9660 CD-ROM unit ~D, using New File." (send fs:host :short-name) unit)))

;; Access path methods shadowing normal NFile ones, to give kludgey impression of host.

(defmethod (:pathname-for-this-host-p remote-iso9660-nfile-access-path) (pathname)
  (neti:ns-eq (send pathname :host) iso9660-host))

;; This is the one that makes it work.... these are :APPEND combined at :LOGIN time.
(defmethod (:login-command-parameters remote-iso9660-nfile-access-path) ()
  (list :file-system `(:iso9660 ,unit)))

(defmethod (:parse-truename remote-iso9660-nfile-access-path) (pathname)
  (fs:parse-pathname pathname iso9660-host))

(defmethod (:sample-pathname remote-iso9660-nfile-access-path) ()
  (send iso9660-host :sample-pathname))

(compile-flavor-methods remote-iso9660-nfile-access-path)
