D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-lisp; Package: SYSTEM-INTERNALS; Base: 10; Lowercase: Yes; Fonts: CPTFONT,CPTFONTI,CPTFONTCB-*-

(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;; Definitions for string dumping and loading.
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defresource string-transition-table (&optional (length 1000.) (type 'art-fixnum))
  :constructor (make-array length :type type :fill-pointer 0)
  :initializer (progn (ignore length type) (setf (fill-pointer object) 0)))

(defconst dump-string-simple-opcode 1)
(defconst dump-string-code-escape-opcode 2)
(defconst dump-string-update-opcode 3)
(defconst dump-string-general-opcode 4)

(defconstant *font-escape-char* #\)
(defconstant *font-escape-code* (char-code *font-escape-char*))

1;;; (nnn bits (char-set-name offset) (family face size) default-font)

0(defstruct (char-type-spec :list :conc-name)
  type
  bits
  char-set
  style
  default-font)

(defstruct (char-type-spec-char-set :list :conc-name (:but-first char-type-spec-char-set))
  name
  offset)

(defstruct (char-type-spec-style :list :conc-name (:but-first char-type-spec-style))
  family
  face
  size
  )

(defsubst char-type (char)
  (char-ldb-internal %%char-all-but-subindex char))

(defconstant %%char-type-char-set (byte 0. 8.) "Region of a char-type containing the character set.")
(defconstant %%char-type-style (byte 8. 8.) "Region of a char-type containing the style index.")
(defconstant %%char-type-bits (byte 16. 4.) "Region of a char-type containing the bits.")


(defvar-standard *transparent-tyo* nil nil nil)

(defvar *escape-format-version* 2)
1;;; The first character must be the escape character.
;;; The second character must not be something which is otherwise legal after the
;;; escape character.
;;; The following byte is the version number.
0(defvar *fat-password* "D,#TD1PsT"
  "Password which appears in files to denote the beginning of fatness.")

1;;; Message saying epsilon is now the escape character.  Follows the password and version.
0(defvar *fat-password-message* "[Begin using 006 escapes]")

1;;; Name this constant so that it can be used in more than one place.
0(defconstant fat-unpassword-character #\pi)

1;;; List of input streams which may be reread as uninterpreted characters if an error occurs.
0(defvar-standard *retry-without-escape-processing* nil nil nil)

1;;; List of possible user responses to an escape decoding error.
0(cl:defparameter *escape-error-query-handler-choices*
  '((:define-type-as-undefined-style "Undefined")
    (:use-type-zero "Default")
    (:return-invalid-diagram "Diagram")
    (:insert-escape-sequence "Insert")
    (:continue-processing "Continue")
    (:retry-file-as-string-char-file "Reread")))

1;;; Simple proceed options in their preferred order
0(cl:defparameter *escape-error-simple-proceed-options*
  '(:define-type-as-undefined-style :return-invalid-diagram :insert-escape-sequence
				    :continue-processing))
