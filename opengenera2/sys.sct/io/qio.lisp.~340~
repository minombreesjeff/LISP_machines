;;; -*- Package:SYSTEM-INTERNALS; Mode:LISP; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Machine independent pre-flavor character i/o functions.
;;; This file is in the cold load.

; Naming conventions:
;   Symbols whose names end in "-INPUT", "-OUTPUT", or "-IO" should
;      normally be BOUND to streams; which of the three you use depends on
;      what directions the stream normally supports.
;   Symbols whose names end in "-STREAM" are DEFINED as streams.


; Synonyms.
; MAKE-SYN-STREAM takes a symbol, and returns a stream which will forward all operations
;   to the binding of the symbol.  After (SETQ BAR (MAKE-SYN-STREAM 'FOO)), one says
;   that BAR is SYNned to FOO.


; The initial environment.
;   The initial binding of streams (set up by LISP-REINITIALIZE) is
;      as follows:
;   TERMINAL-IO     - This is how to get directly to the user's terminal.  It is set
;                     up to go to the TV initially.  Other places it might go are to
;                     the SUPDUP server, etc.  In SI:INITIAL-PROCESS, it is bound to
;                     TV:INITIAL-LISP-LISTENER.
;   STANDARD-INPUT  - This is initially bound to the value of SI:SYN-TERMINAL-IO.
;   STANDARD-OUTPUT - This is initially bound to the value of SI:SYN-TERMINAL-IO.
;		      STANDARD-INPUT and STANDARD-OUTPUT are the default streams for
;		      READ, PRINT and other things.  When a file is being read by READFILE
;		      or by the Lisp compiler, STANDARD-INPUT is bound to the file stream
;		      so that READ will take input from the file.  STANDARD-OUTPUT can
;		      be redirected from TERMINAL-IO when the session is being scripted.
;   ERROR-OUTPUT    - This is where error messages should be sent.  This is initially
;                     bound to the value of SI:SYN-TERMINAL-IO.
;   DEBUG-IO	    - This is what the debugger uses.  This is initially
;                     bound to the value of SI:SYN-TERMINAL-IO.
;   QUERY-IO        - This is for unexpected user queries of the form "Do you really want
;		      to ...".  This is initially bound to the value of SI:SYN-TERMINAL-IO.
;   TRACE-OUTPUT    - Output produced by TRACE goes here.  This is initially bound to
;		      the value of SI:SYN-TERMINAL-IO.

;;; Support for WITH-OPEN-STREAM
(DEFUN CLOSE-OPEN-STREAM (STREAM ABORT)
  (WHEN (AND STREAM (NOT (ERRORP STREAM)))
    ;; Use WITHOUT-ABORTS to provide a more specific message.  Otherwise the user is
    ;; just told that the cleanup form that called this would not be completed.
    (WITHOUT-ABORTS (CLOSE-OPEN-STREAM
		      "A cleanup form is closing the stream ~S.~@
	  Aborting before the cleanup is complete could leave the stream open indefinitely."
	  ;--- Could also leave the stream somehow half-closed, but it's probably more
	  ;--- confusing than helpful to say that.
			STREAM)
	(SEND STREAM ':CLOSE ABORT))))

;;; This could be a resource, but on the theory it is only used in the
;;; :string-line-in/:line-out case, we can waste a little space if there
;;; is more than one process doing a STREAM-COPY-UNTIL-EOF
(DEFVAR *STREAM-COPY-UNTIL-EOF-TEMP-BUFFER* NIL)

(DEFUN STREAM-COPY-UNTIL-EOF (FROM-STREAM TO-STREAM &OPTIONAL (LEADER-SIZE NIL)
			      &KEY (INCLUDE-DIAGRAMS T))
  "Copy from one stream to another, until EOF on the from-stream.
The default is to use the most efficient mode, but the third argument
may be used to force use of :LINE-IN//:LINE-OUT mode, especially useful
when the to-stream is an editor interval stream.  If you use this to
copy binary files, note that you had better open the streams with
appropriate host-dependent byte sizes, and that if the from-stream
supports :LINE-IN but not :READ-INPUT-BUFFER you will probably lose."
  
  (LET ((DIAGRAMS (AND (SEND-IF-HANDLES TO-STREAM :CAN-ACCEPT-DIAGRAMS-AS-LINES)
		       (NOT (NULL (OPERATION-HANDLED-P
				    FROM-STREAM :SET-RETURN-DIAGRAMS-AS-LINES))))))
    
    (COND ((AND (NOT LEADER-SIZE)
		(NOT DIAGRAMS)
		(OPERATION-HANDLED-P FROM-STREAM :READ-INPUT-BUFFER)
		(OPERATION-HANDLED-P TO-STREAM :STRING-OUT))
	   D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; If it can go, this mode is the most efficient by far.
0	   (CL:LOOP
	      (MULTIPLE-VALUE-BIND (BUFFER OFFSET LIMIT)
		  (SEND FROM-STREAM :READ-INPUT-BUFFER)
		(WHEN (NULL BUFFER)
		  (SEND TO-STREAM :FORCE-OUTPUT)
		  (RETURN NIL))
		(SEND TO-STREAM :STRING-OUT BUFFER OFFSET LIMIT)
		(SEND FROM-STREAM :ADVANCE-INPUT-BUFFER))))
	  
	  ((AND (NOT LEADER-SIZE)
		(OPERATION-HANDLED-P FROM-STREAM :STRING-LINE-IN)
		(OPERATION-HANDLED-P TO-STREAM :LINE-OUT)
		(NOT		     1;copying from an interval is faster using (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB"):line-in
0		  (SEND-IF-HANDLES FROM-STREAM :LINE-IN-MORE-EFFICIENT-THAN-STRING-LINE-IN-P))
		)
1	   ;; Not as good, but better than 2:line-in1/2:line-out
0	   (WHEN DIAGRAMS (SEND FROM-STREAM :SET-RETURN-DIAGRAMS-AS-LINES T))
	   (LOOP WITH LINE = (OR (WITHOUT-INTERRUPTS
				   (PROG1 *STREAM-COPY-UNTIL-EOF-TEMP-BUFFER*
					  (SETQ *STREAM-COPY-UNTIL-EOF-TEMP-BUFFER* NIL)))
				 (MAKE-ARRAY 128. :TYPE 'ART-FAT-STRING :FILL-POINTER 0))
		 AS EOF = (MULTIPLE-VALUE-BIND (LENGTH EOF NEOL DIAGRAM)
			      (SEND FROM-STREAM :STRING-LINE-IN NIL LINE 0 128.)
			    (IF (INSTANCEP DIAGRAM)
				(WHEN INCLUDE-DIAGRAMS
				  (SEND TO-STREAM :LINE-OUT DIAGRAM))
				(SEND TO-STREAM (IF (OR NEOL EOF) :STRING-OUT :LINE-OUT)
				      LINE 0 LENGTH))
			    EOF)
		 UNTIL EOF
		 FINALLY
		   (SETQ *STREAM-COPY-UNTIL-EOF-TEMP-BUFFER* LINE)
		   (SEND TO-STREAM :FORCE-OUTPUT)
		   (RETURN NIL)))
	  
	  ((AND (OPERATION-HANDLED-P FROM-STREAM :LINE-IN)
		(OPERATION-HANDLED-P TO-STREAM :LINE-OUT))
	   1;; Not as good, but better than 2:tyi1/2:tyo
0	   (WHEN DIAGRAMS (SEND FROM-STREAM :SET-RETURN-DIAGRAMS-AS-LINES T))
	   (CL:LOOP
	      (MULTIPLE-VALUE-BIND (LINE EOF)
		  (SEND FROM-STREAM :LINE-IN LEADER-SIZE)
		(COND ((AND DIAGRAMS (INSTANCEP LINE))	1;It's really a diagram.
0		       (SEND TO-STREAM :LINE-OUT LINE))
		      ((NOT EOF)
		       (SEND TO-STREAM :LINE-OUT LINE))
		      (T
		       (SEND TO-STREAM :STRING-OUT LINE)
		       (SEND TO-STREAM :FORCE-OUTPUT)
		       (RETURN NIL))))))
	  
	  1;; This always wins, but is incredibly slow.
0	  (T
	   (CL:LOOP
	      (LET ((CHAR (SEND FROM-STREAM :TYI)))
		(COND (CHAR
		       (SEND TO-STREAM :TYO CHAR))
		      (T
		       (SEND TO-STREAM :FORCE-OUTPUT)
		       (RETURN NIL)))))))))


(DEFSUBST READ-FROM-STRING (STRING &OPTIONAL (EOF-OPTION 'NO-EOF-OPTION) (START 0) END
				             (PRESERVE-WHITESPACE READ-PRESERVE-DELIMITERS))
  (DECLARE (VALUES CONTENTS END-CHAR-POSITION))
  (CL:READ-FROM-STRING STRING (EQ EOF-OPTION 'NO-EOF-OPTION) EOF-OPTION
		       :START START :END END :PRESERVE-WHITESPACE PRESERVE-WHITESPACE))
