;;; -*- Mode: LISP; Package: SYSTEM-INTERNALS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor basic-indenting-stream
	((stream nil)
	 (indentation 0)
	 (beginning-of-line-p nil)
	 (which-operations nil)
	 (supports-cursor nil))
	()
  (:initable-instance-variables stream)
  (:gettable-instance-variables indentation))

(defconst *unadvertized-indenting-stream-messages* 
  '(:size-in-characters :read-cursorpos :set-cursorpos :visible-cursorpos-limits))

(defmethod (:which-operations basic-indenting-stream) ()
  (or which-operations
      (let ((new-operations (send stream ':which-operations)))
	(setq which-operations
	      ;; Don't bother eliminating duplicates
	      (append (cl:remove-if #'(lambda (op)
					(memq op *unadvertized-indenting-stream-messages*))
				    (flavor::flavor-all-generics
				      (%instance-flavor self)))
		      new-operations)))))

(defmethod (:init basic-indenting-stream :after) (ignore)
  (when stream
    (setf supports-cursor (send stream :operation-handled-p :increment-cursorpos))))

(defmethod (:setup basic-indenting-stream) (new-stream new-indentation)
  (setq new-stream (si:follow-syn-stream new-stream))
  (unless (eq new-stream stream)
    (setq supports-cursor (send new-stream :operation-handled-p :increment-cursorpos)
	  which-operations nil
	  stream new-stream))
  (setq indentation new-indentation)
  (setq beginning-of-line-p nil))

(defmethod (:set-indentation basic-indenting-stream) (val)
  (setq beginning-of-line-p nil)
  (setq indentation val))

;; These two messages don't require consing up a WHICH-OPERATIONS, so don't do it.
(defmethod (:operation-handled-p basic-indenting-stream) (op)
  (if (memq op *unadvertized-indenting-stream-messages*)
      (send stream :operation-handled-p op)
    (or ;;--- Could be faster?
	(memq op (flavor::flavor-all-generics (%instance-flavor self)))
	(send stream ':operation-handled-p op))))

(defmethod (:send-if-handles basic-indenting-stream) (op &rest msg)
  (cond ((memq op '(:read-cursorpos :set-cursorpos :size-in-characters))
	 (when (send stream :operation-handled-p op)
	   (lexpr-send self op msg)))
	((memq op (flavor::flavor-all-generics (%instance-flavor self)))	;---faster?
	 (lexpr-send self op msg))
	(t (lexpr-funcall stream ':send-if-handles op msg))))

(defmethod (:indent-relative basic-indenting-stream) (n)
  (setq beginning-of-line-p nil)
  (incf indentation n))

;; Convert indentation (as a number of spaces) into appropriate units
;; There ought to be a better way to do this!
(defun-in-flavor (indentation-in-unit basic-indenting-stream) (unit)
  (selectq unit
    ;; :character is the unit that the instance variable indentation is measured in
    ((:character) indentation)
    ;; nil means the device's default unit.  This is the unit that :read-cursorpos (etc.)
    ;; default to when no unit is specified, and is also the unit that :char-width
    ;; uses.  :read-cursorpos and :char-width with no arguments use a consistent
    ;; unit on all streams, but there is no way to find out what that unit is!
    ((nil) (* indentation (send stream :char-width)))
    ;; For other units, such as :pixel, :device, :or micas, there is no way to get
    ;; a correct answer for all streams.  The safest thing seems to be to assume
    ;; that such a unit is equal to the default unit; this will work for windows,
    ;; and also for remote terminals and files (where :pixel equals :character).
    (otherwise (* indentation (send stream :char-width)))))

;; The cursor position on this stream is relative to its own left margin,
;; not relative to the left margin of the underlying stream.

(defmethod (:read-cursorpos basic-indenting-stream) (&optional unit)
  (multiple-value-bind (x y) (if unit (send stream :read-cursorpos unit)
				 (send stream :read-cursorpos))
    (values (- x (indentation-in-unit unit)) y)))

(defmethod (:set-cursorpos basic-indenting-stream) (x y &optional unit)
  (when x
    (incf x (indentation-in-unit unit)))
  (if unit (send stream :set-cursorpos x y unit)
      (send stream :set-cursorpos x y)))

(defmethod (:with-character-style basic-indenting-stream) (&rest args)
  (lexpr-send stream :with-character-style args))

(defmethod (:output-as-presentation basic-indenting-stream) (&rest args)
  (lexpr-send stream :output-as-presentation args))

(defmethod (:output-as-presentation-1 basic-indenting-stream) (&rest args)
  (lexpr-send stream :output-as-presentation-1 args))

(defmethod (:print basic-indenting-stream) (&rest args)
  (lexpr-funcall #'print-with-sensitivity self args))

(defmethod (:gprint basic-indenting-stream) (object suggested-format xstream)
  (send-if-handles stream :gprint object suggested-format xstream))

(defmethod (:size-in-characters basic-indenting-stream) ()
  (multiple-value-bind (width height)
      (send stream :size-in-characters)
    (values (- width indentation) height)))

(defmethod (:visible-cursorpos-limits basic-indenting-stream) (&optional unit)
  (multiple-value-bind (left top right bottom)
      (if unit (send stream :visible-cursorpos-limits unit)
	  (send stream :visible-cursorpos-limits))
    (let ((offset (indentation-in-unit unit)))
      (values (max 0 (- left offset)) top (- right offset) bottom))))

(defmethod (:unclaimed-message basic-indenting-stream) (op &rest args)
  (lexpr-send stream op args))

;; This one gets supplied by the stream mixins to the interactive stream,
;; but we really want to ask the underlying stream.
(defmethod (:interactive basic-indenting-stream) ()
  (send stream :interactive))

(defun-in-flavor (indenting-newline basic-indenting-stream) (spaces)
  (if supports-cursor
      (send stream :increment-cursorpos spaces 0 :character)
      (dotimes (i spaces)
	(declare (ignore i))
	(send stream :tyo #\sp)))
  (setf beginning-of-line-p indentation))

(defun-in-flavor (indenting-string-out basic-indenting-stream) (buffer start end)
  (when (null end)
    (setf end (array-active-length buffer)))
  (loop for from first start then (1+ cr-pos)
	for cr-pos = (string-search-char #\cr buffer from end)
	while cr-pos
	do (send stream :string-out buffer from cr-pos)
	   (send stream :tyo #\cr)
	   (indenting-newline indentation)
	finally (when (> end from)
		  (send stream :string-out buffer from end)
		  (setf beginning-of-line-p nil))))

;;; The real output stuff

(defflavor unbuffered-indenting-stream
	()
	(basic-indenting-stream
	 si:line-output-stream-mixin si:character-stream si:output-stream)
  )

(defmethod (:tyo unbuffered-indenting-stream) (ch &rest args)
  (cond ((char= ch #\cr)
	 (send stream :tyo #\cr)
	 (indenting-newline indentation))
	(t (lexpr-send stream ':tyo ch args)
	   (setq beginning-of-line-p nil))))

(defmethod (:string-out unbuffered-indenting-stream) (string &optional (from 0) to)
  (indenting-string-out string from to))

(defmethod (:line-out unbuffered-indenting-stream) (string &optional (from 0) to)
  (send self :string-out string from to)
  (send self :tyo #\cr))

(defmethod (:fresh-line unbuffered-indenting-stream) ()
  (cond ((or (null beginning-of-line-p)
	     (> beginning-of-line-p indentation))
	 (send self :tyo #\cr)
	 t)
	((= beginning-of-line-p indentation)
	 nil)
	(t (indenting-newline (- indentation beginning-of-line-p))
	   nil)))

(compile-flavor-methods unbuffered-indenting-stream)

;;;

(defflavor buffered-indenting-stream
	((buffer (make-array 100 :type 'art-string))
	 (buffer-length 100))
	(basic-indenting-stream si:buffered-output-character-stream)
  )

(defmethod (:new-output-buffer buffered-indenting-stream) ()
  (values buffer 0 buffer-length))

(defmethod (:discard-output-buffer buffered-indenting-stream) (ignore) )

(defmethod (:send-output-buffer buffered-indenting-stream) (ignore end ignore)
  (indenting-string-out buffer 0 end))

(compile-flavor-methods buffered-indenting-stream)

;;;

(defresource indenting-stream ()
  :constructor (make-instance 'unbuffered-indenting-stream))

(defun make-stream-indentable (stream &optional new-indentation)
  (declare (values stream deallocate-resource))
  (cond ((send stream ':operation-handled-p ':indent-relative)
	 (and new-indentation (send stream ':indent-relative new-indentation))
	 (values stream nil))
	(t (let ((indenting-stream (allocate-resource 'indenting-stream)))
	     (send indenting-stream ':setup stream (or new-indentation 0))
	     (values indenting-stream indenting-stream)))))
