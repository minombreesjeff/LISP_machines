;;; -*- Mode: LISP; Package: GPrint; Syntax: Common-Lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; This software is based on ideas published by Richard C. Waters
;;; His aid is gratefully acknowledged

;;;The Common Lisp circular printer.


#+LispM
(defresource objects-table ()
  :constructor (make-hash-table :test #'eq)
  :initializer (clrhash object))

(defvar *objects-table* #-LispM (make-hash-table :test #'eq))


(defvar *print-circle-stream*)
(defvar *duplicate-number*)
(defconstant first-time-mark t
  "Value recorded in objects table when an object is first seen.")


(proclaim '(inline immediate-object-p))
(defun immediate-object-p (x)
  #-LispM
  ;;Can't make any assumptions
  nil
  #+LispM
  (not (sys:%pointerp x))
  )


(proclaim '(inline interned-symbol-p))
(defun interned-symbol-p (x)
  (and (symbolp x) (or (not (null (symbol-package x)))
		       ;;If *print-gensym* is NIL, gensyms are treated like
		       ;; interned symbols.
		       (null *print-gensym*))))

(proclaim '(inline print-simple-object))
(defun print-simple-object (x)
  (write x :stream *print-circle-stream* :circle nil))

(proclaim '(inline write-a-string))
(defun write-a-string (s)
  (write-string s *print-circle-stream*))

(proclaim '(inline write-a-character))
(defun write-a-character (c)
  (write-char c *print-circle-stream*))

(proclaim '(inline write-a-decimal-integer))
(defun write-a-decimal-integer (i)
  (format *print-circle-stream* "~D" i))


(proclaim '(inline node-recorded-p))
(defun node-recorded-p (x)
  (gethash x *objects-table*))

(proclaim '(inline record-in-nodes-table))
(defun record-in-nodes-table (x)
  (setf (gethash x *objects-table*) first-time-mark))

(proclaim '(inline duplicate-entry-p))
(defun duplicate-entry-p (entry)
  (integerp entry))

(proclaim '(inline record-in-duplicates-table))
(defun record-in-duplicates-table (x)
  #-LispM
  (unless (duplicate-entry-p (gethash x *objects-table*))
    (setf (gethash x *objects-table*) (incf *duplicate-number*)))
  #+LispM
  (send *objects-table* :modify-hash x
	#'(lambda (x entry exists-p)
	    x exists-p
	    (if (duplicate-entry-p entry)
		entry
		(incf *duplicate-number*))))
  )

(proclaim '(inline find-in-duplicates-table))
(defun find-in-duplicates-table (x)
  (gethash x *objects-table*))

(proclaim '(inline printed-duplicate-entry-p))
(defun printed-duplicate-entry-p (entry)
  ;;A negative entry has been printed already
  (minusp entry))

(proclaim '(inline set-printed-duplicate-entry))
(defun set-printed-duplicate-entry (object entry)
  ;;Negate an entry to indicate that it has been printed
  (setf (gethash object *objects-table*) (- entry)))


(proclaim '(inline print-pointer-to-label))
(defun print-pointer-to-label (label)
  ;;Negate the pointer to get the original positive label
  (format *print-circle-stream* "#~D#" (- label)))

(proclaim '(inline print-label))
(defun print-label (label)
  (format *print-circle-stream* "#~D=" label))


(proclaim '(inline print-zero-rank-array))
(defun print-zero-rank-array (a level)
  (write-a-string "#0A ")
  (print-node (aref a) (1+ level)))


(defmacro with-circular-printer-tables (&body body)
  `(let ((*duplicate-number* 0))
     #-LispM
     (unwind-protect
       (progn ,@body)
       (clrhash *objects-table*))
     #+LispM
     (using-resource (*objects-table* objects-table)
       ,@body)
  ))

;;;The entry point

(defun print-circle (object &optional (stream *standard-output*))
  (or (send-if-handles stream :print-circle object)
      (labels ((print-circle-stream (op &rest args)
		 (declare (sys:downward-function))
		 (when (and (eq op ':send-if-handles)
			    (eq (car args) ':print-circle))
		   (setq op (pop args)))
		 (case op
		   (:print-circle
		     (print-with-labels-and-pointers (first args))
		     t)
		   (otherwise (apply stream op args)))))
	(let ((*print-circle-stream* #'print-circle-stream)
	      (*actual-print-length* (or *print-length* most-positive-fixnum))
	      (*actual-print-level* (or *print-level* most-positive-fixnum)))
	  (with-circular-printer-tables
	    (find-duplicates object)
	    (print-with-labels-and-pointers object)
	    object)))))

(defun find-duplicates (x)
  (examine-node x 0))

(defun record-one-node-and-return-true-if-duplicate (x)
  #-LispM
  (if (node-recorded-p x)
      (progn (record-in-duplicates-table x)
	     t)
      (progn (record-in-nodes-table x)
	     nil))
  #+LispM
  (duplicate-entry-p 
    (send *objects-table* :modify-hash x
			  #'(lambda (x old-entry exists-p)
			      x
			      ;;If we haven't seen it before, mark it first-time
			      (cond ((null exists-p) first-time-mark)
				    ;;If we've seen it before, assign it a duplicate index
				    ((eq old-entry first-time-mark) (incf *duplicate-number*))
				    ;;Otherwise it already has a duplicate index
				    (t old-entry))))))

(defun examine-node (x level)
  (let ((depth-exceeded-p (>= level *actual-print-level*)))
    (typecase x
      (cons
	(unless (or depth-exceeded-p (<= *actual-print-length* 0))
	  (labels ((really-examine-list ()
		     (declare (sys:downward-function))
		     (do ((tail x (cdr tail))
			  (length 1 (1+ length)))
			 ((> length *actual-print-length*))
		       (cond ((atom tail)
			      (when tail (examine-node tail (1+ level)))
			      (return-from really-examine-list nil))
			     ((record-one-node-and-return-true-if-duplicate tail)
			      (return-from really-examine-list nil)))
		       (examine-node (first tail) (+ level 1))))
		   (continue (new-exp)
		     (declare (sys:downward-function))
		     (examine-node new-exp level)))
	    (if (or (not scl:*print-abbreviate-quote*)
		    (not (symbolp (car x))))
		(really-examine-list)
		(si:print-with-quote-abbreviated
		  x #'ignore #'continue #'really-examine-list))
	    )))
      (array
	(unless (record-one-node-and-return-true-if-duplicate x)
	  (let ((nss (named-structure-p x)))
	    (if nss
		(unless depth-exceeded-p
		  (examine-named-structure x nss level))
		(when (and *print-array*
			   (null depth-exceeded-p))
		  (let ((rank (array-rank x)))
		    (case rank
		      ;;Zero rank arrays don't exists yet, (aref x) gives a compiler warning.
		      (0 #|(examine-node (aref x))|#)
		      (1 (dotimes (i (length x))
			   (when (>= i *actual-print-length*)
			     (return nil))
			   (examine-node (aref x i) (+ level 1))))
		      (t (examine-multidimensional-array x rank level)))))))))
      (instance
	(unless (record-one-node-and-return-true-if-duplicate x)
	  (unless depth-exceeded-p
	    (examine-instance x level))))
      (symbol (unless (interned-symbol-p x)
		(record-one-node-and-return-true-if-duplicate x)))
      (t nil))))

(defun examine-multidimensional-array (array rank level)
  (let ((limits (array-dimensions array))
	(indices (make-list rank)))
    (examine-multidimensional-array-dimension array indices limits indices level)))

(defun examine-multidimensional-array-dimension (array indices limits-tail indices-tail level)
  (unless (>= level *actual-print-level*)
    (dotimes (i (first limits-tail))
      (when (>= i *actual-print-length*)
	(return nil))
      (setf (first indices-tail) i)
      (if (null (rest limits-tail))
	  (examine-node (apply #'aref array indices) (+ level 1))
	  (examine-multidimensional-array-dimension array
						    indices
						    (rest limits-tail)
						    (rest indices-tail)
						    (+ level 1))))))

(defun examine-named-structure (structure name level)
  (if (and (get name 'si:named-structure-invoke)
	   (member :print-self (si:named-structure-invoke structure :which-operations)))
      (let ((initial-print-escape *print-escape*))
	(labels ((examine-components-stream (op &rest args)
		   (declare (sys:downward-function))
		   (when (and (eq op ':send-if-handles)
			      (member (car args) '(:string-out :tyo :print :gprint)))
		     (setq op (pop args)))
		   (case op
		     ((:print :gprint)
		      ;; If prin1 of a named-structure includes princ of itself in its
		      ;; printed representation, the princ is usually going to appear
		      ;; differently and so should not count as a duplicate.  This is
		      ;; a heuristic but it works better with this in than with it out.
		      (unless (and (eq (first args) structure)
				   initial-print-escape
				   (not *print-escape*))
			(examine-node (first args) level))
		      t)
		     (:which-operations '(:string-out :tyo :print :gprint))
		     (otherwise nil))))
	  (let ((*print-circle* nil))
	    (named-structure-invoke
	      structure
	      :print-self
	      #'examine-components-stream
	      (1+ level) *print-escape*))))
      (when *PRINT-STRUCTURE-CONTENTS*
	(let ((description (get name 'si:defstruct-description)))
	  (when (and description
		     (si:print-common-lisp-p))
	    (loop for (slot . plist) in (si:defstruct-description-slot-alist description)
		  repeat *actual-print-length*
		  do (ignore slot)
		     (examine-node
		       (eval
			 `(,(si:defstruct-slot-description-ref-macro-name plist) ',structure))
		       (1+ level))))))))

(defun examine-instance (instance level)
  (let ((initial-print-escape *print-escape*))
    (labels ((examine-components-stream (op &rest args)
	       (declare (sys:downward-function))
	       (when (and (eq op ':send-if-handles)
			  (member (car args) '(:string-out :tyo :print :gprint)))
		 (setq op (pop args)))
	       (case op
		 ((:print :gprint)
		  ;; If prin1 of an instance includes princ of itself in its
		  ;; printed representation, the princ is usually going to appear
		  ;; differently and so should not count as a duplicate.  This is
		  ;; a heuristic but it works better with this in than with it out.
		  (unless (and (eq (first args) instance)
			       initial-print-escape
			       (not *print-escape*))
		    (examine-node (first args) level))
		  t)
		 (:which-operations '(:string-out :tyo :print :gprint))
		 (otherwise nil))))
      (let ((*print-circle* nil))
	(send instance :print-self #'examine-components-stream (1+ level) *print-escape*)))))

(defun print-with-labels-and-pointers (x)
  (print-node x 0))

(defun print-node (x level)
  (if (or (immediate-object-p x)
	  (interned-symbol-p x))
      (print-simple-object x)
      (let ((entry (find-in-duplicates-table x)))
	(if (duplicate-entry-p entry)
	    (if (printed-duplicate-entry-p entry)
		(print-pointer-to-label entry)
		(progn (set-printed-duplicate-entry x entry)
		       (print-label entry)
		       (print-node-recursively x level)))
	    (print-node-recursively x level)))))

(defun print-node-recursively (x level)
  (let ((depth-exceeded-p (>= level *actual-print-level*)))
    (typecase x
      (cons
	(if depth-exceeded-p
	    (write-a-character #\#)
	    (if (<= *actual-print-length* 0)
		(write-a-string "(...)")
		(labels ((really-print-list ()
			   (declare (sys:downward-function))
			   (progn (write-a-character #\()
				  (print-node (first x) (+ level 1))
				  (print-cons-tail (rest x) level)))
			 (continue (new-exp)
			   (declare (sys:downward-function))
			   (print-node new-exp level)))
		  (if (or (not scl:*print-abbreviate-quote*)
			  (not (symbolp (car x))))
		      (really-print-list)
		      (si:print-with-quote-abbreviated x *print-circle-stream*
						       #'continue
						       #'really-print-list))
		  ))))
      (array
	(let ((nss (named-structure-p x)))
	  (cond
	    (nss
	     (if depth-exceeded-p
		 (write-a-character #\#)
		 (print-named-structure-circularly x nss level)))
	    ((or (stringp x)
		 (bit-vector-p x)
		 (not *print-array*))
	     (print-simple-object x))
	    (depth-exceeded-p (write-a-character #\#))
	    (t (let ((rank (array-rank x)))
		 (case rank
		   (0 (print-zero-rank-array x level))
		   (1 (if (<= *actual-print-length* 0)
			  (write-a-string "#(...)")
			  (progn (write-a-string "#(")
				 (dotimes (i (length x))
				   (unless (= i 0)
				     (write-a-character #\Space))
				   (when (>= i *actual-print-length*)
				     (write-a-string "...")
				     (return))
				   (print-node (aref x i) (+ level 1)))
				 (write-a-character #\)))))
		   (t (print-multidimensional-array x rank level))))))))
      (instance
	(if depth-exceeded-p
	    (write-a-character #\#)
	    (let ((*actual-print-level* (1- *actual-print-level*)))
	      (send x :print-self *print-circle-stream* level *print-escape*))))
      (t (print-simple-object x)))))

(defun print-cons-tail (tail level)
  (loop for length from 1
	for tail = tail then (cdr tail)
	when (null tail)
	  return (write-a-character #\))
	when (or (atom tail)
		 (duplicate-entry-p (find-in-duplicates-table tail)))
	  return (progn (write-a-string " . ")
			(print-node tail (+ level 1))
			(write-a-character #\)))
	when (>= length *actual-print-length*)
	  return (write-a-string " ...)")
	do
	(write-a-character #\Space)
	(print-node (first tail) (+ level 1))))

(defun print-multidimensional-array (array rank level)
  (let ((limits (array-dimensions array))
	(indices (make-list rank)))
    (write-a-character #\#)
    (write-a-decimal-integer rank)
    (write-a-character #\A)
    (print-multidimensional-array-dimension array indices limits indices level)))

(defun print-multidimensional-array-dimension (array indices limits-tail indices-tail level)
  (if (>= level *actual-print-level*)
      (write-a-character #\#)
      (if (<= *actual-print-length* 0)
	  (write-a-string "(...)")
	  (progn
	    (write-a-character #\()
	    (dotimes (i (first limits-tail))
	      (unless (= i 0)
		(write-a-character #\Space))
	      (when (>= i *actual-print-length*)
		(write-a-string "...")
		(return))
	      (setf (first indices-tail) i)
	      (if (null (rest limits-tail))
		  (print-node (apply #'aref array indices) (+ level 1))
		  (print-multidimensional-array-dimension array
							  indices
							  (rest limits-tail)
							  (rest indices-tail)
							  (+ level 1))))
	    (write-a-character #\))))))

(defun print-named-structure-circularly (structure name level)
  (if (and (get name 'si:named-structure-invoke)
	   (member :print-self (si:named-structure-invoke structure :which-operations)))
      (let ((*actual-print-level* (1- *actual-print-level*)))
	(si:named-structure-invoke structure :print-self *print-circle-stream*
				   level *print-escape*))
      (if *PRINT-STRUCTURE-CONTENTS*
	  (let ((description (get name 'si:defstruct-description)))
	    (if (and description (si:print-common-lisp-p))
		(progn
		  (write-a-string "#S(")
		  (print-node name (1+ level))
		  (if (<= *actual-print-length* 0)
		      (write-a-string " ...)")
		      (loop for i from 0
			    for (slot . plist) in
				(si:defstruct-description-slot-alist description)
			    do (progn 
				 (write-a-character #\space)
				 (when (>= i *actual-print-length*)
				   (write-a-string "...")
				   (return (values)))
				 (print-node (intern (si:get-pname slot)
						     si:pkg-keyword-package)
					     (1+ level))
				 (write-a-character #\space)
				 (print-node
				   (eval
				     `(,(si:defstruct-slot-description-ref-macro-name
					  plist)
				       ',structure))
				   (1+ level)))
			    finally (write-a-character #\)))))
		(si:printing-random-object (structure *print-circle-stream*)
		  (write-a-string (si:get-pname name)))))
	  (si:printing-random-object (structure *print-circle-stream* :typep)))))

