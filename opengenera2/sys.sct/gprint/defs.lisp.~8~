;;; -*- Mode: LISP; Package: GPrint; Syntax: Common-Lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; This software is based on ideas published by Richard C. Waters
;;; His aid is gratefully acknowledged

;;; Main DEFS file for GPRINT.

;;; This is a new implementation of GPRINT for the Lisp Machine.
;;; Started by DLW 1/16-20/83.  Work resumed 2/10/83.
;;; Converted to Common Lisp by Eric Benson 3/84

;;; Note: the redo/continue feature is not implemented and may never be.
;;; The following things are being dropped in the recoding:
;;;   Variables gabbreved, gtruncated.
;;;   Functions gredo, gcontinue.

;;; User-bindable parameter settings.

;;;  The following two are actually internal variables; the external ones are
;;;   *print-level* and *print-length*
(zl:defvar-resettable *actual-print-length* #o77777777 #o77777777
		      "Maximum length of lists to print.")
(zl:defvar-resettable *actual-print-level* #o77777777 #o77777777
		      "Maximum level of lists to print.")

(defvar *print-start-line* 0 "First line to print.")
(defvar *print-end-line* #o7777777 "Last line to print.")
(defvar *miser-width* 40. "Miser mode starts when there fewer than this columns left")
(defvar *overriding-left-indent* nil "If non-NIL, controls left indentation")
(defvar *overriding-line-length* nil "If non-NIL, controls line length, includes indent")

(defvar *print-out-level*)			;level of nesting at print-out

;;; Inspector interface.
(zl:defvar-standard *inspecting* nil nil nil nil
		    "Inspector notification function, if using inspector, else NIL.")
(defvar *locative* nil "Locative to be passed to inspector notification function.")

;;; The special variable used in the generated code for go-in and start-sub.
(defvar *value*)

;;; The queue.
(defstruct (queue
	     (:conc-name nil)
	     (:type :grouped-array)
	     (:default-pointer *queue*)
	     (:size-symbol *queue-size*)
	     (:copier nil))
  
  queue-type		;Queued command, e.g. :start, :end, :princ, :newline, etc.
  queue-object		;Argument to that command.
  queue-size)		;Size of printed rep, in chars.

;;; :start and :end delimit structures.  The queue-object is ignored.
;;; :princ and :prin1 print objects.  :special is like :princ, but the thing
;;;    being printed is not counted for purposes of prinlevel or prinlength.
;;; :space's object is a number of spaces to be printed (if not at end of line).
;;; :newline's object :always, :normal, :block, :miser, or :initial.
;;; :tab's object it the amount to tab, or NIL if the system should estimate it.
;;; :ind's object is the amount to indent, or NIL to figure it from next item in substruct.
;;; :eval's object is to be evaluated.
;;; :sensitivity-expression-start, :sensitivity-expression-end, :sensitivity-ellipsis-start,
;;; :sensitivity-ellipsis-end allow *inspecting* function to see what's happening.
;;; The queue-size for :princ, :prin1, :special and :space is just the size.  queue-size
;;; is ignored for :ind, :end, :tab, :eval, :newline/:always,:normal,:miser.
;;; For :start, it's NIL until we know the total size of the substructure.
;;; For :newline/:block, it's NIL until we look slightly ahead.

(defvar *queue* nil "The queue")
(defvar *queue-in* 0 "Input pointer for the queue; points to next entry to use")
(defvar *queue-out* 0 "Output pointer for the queue; points to last entry used")
(defvar *queue-max* 0 "Highest value reached by *queue-in*")

;;; The enqueueing stack.
(defstruct (enqueue-stack
	     (:conc-name nil)
	     (:type :grouped-array)
	     (:default-pointer *eqs*)
	     (:size-symbol *eqs-size*)
	     (:copier nil))
  eqs-queue-ptr		;Pointer to queue entry for this :start, or -1 if gone.
  eqs-level		;Level of list structure, for prinlevel checks.
  eqs-length		;Length of list structure, for prinlength checks.
  eqs-saved-size)	;Saved value of *enqueued-size* when this is pushed.

(defvar *eqs* nil "The enqueue stack")
(defvar *eqs-ptr* 0 "Pointer to enqueueing stack; points to last used entry")

;;; The dequeuing stack.
(defstruct (dequeue-stack
	     (:conc-name nil)
	     (:type :grouped-array)
	     (:default-pointer *dqs*)
	     (:size-symbol *dqs-size*)
	     (:copier nil))
  dqs-tab-size		;The tab-stop setting for this structure.
  dqs-pending-indent)	;The indentation of this substructure.

(defvar *dqs* nil "The dequeue stack")
(defvar *dqs-ptr* 0 "Pointer to dequeueing stack; points to last used entry")

;;; Internal state variables for "enqueue", "print-out", and close friends.
(defvar *enqueued-size* 0 "Total size of stuff in the queue")
(defvar *dequeued-size* 0 "Total size of stuff that's been printed already")
(defvar *depth* 0 "Positive when we're inside a list that fits on one line")
(defvar *went-up* nil "If true, there has been a :end on this line already")
(defvar *pending* nil "Pending spaces from :space and :tab to be printed")
(defvar *pending-newline* nil "If true, there's a pending newline to be printed")
(defvar *line-number* 0 "The current line number; inc'ed when we output a newline")
(defvar *free* 0 "The number of free character positions left on this line")
(defvar *line-length* 0 "The length of a line")
(defvar *left-margin* 0 "Always start every line with this many spaces")
(defvar *total-line-length* 0 "The total length of a line including *left-margin*")
(defvar *stream* nil "Output stream for the printer")
(defvar *pending-sensitivity-type* nil  "Pending start of presentation")
(defvar *pending-sensitivity-object* nil "Object associated with pending presentation")

;;; Define macros to push and pop queues.
(defmacro defqueue (push-macro pop-macro queue-var pointer-var size-var)
  `(progn (defmacro ,push-macro ()
	    `(progn
	       (incf ,',pointer-var ,',size-var)
	       (when (> (+ ,',pointer-var ,',size-var) (length ,',queue-var))
		 (adjust-array ,',queue-var (+ (length ,',queue-var)
					       (max (* #o20 ,',size-var)
						    (floor (length ,',queue-var) 3)))))))
	  (defmacro ,pop-macro ()
	    `(progn
	       (decf ,',pointer-var ,',size-var)
	       (when (minusp ,',pointer-var)
		 (error "Too many }s in formatting string"))))))

(defqueue push-queue pop-queue *queue* *queue-in* *queue-size*)
(defqueue push-eqs pop-eqs *eqs* *eqs-ptr* *eqs-size*)
(defqueue push-dqs pop-dqs *dqs* *dqs-ptr* *dqs-size*)
