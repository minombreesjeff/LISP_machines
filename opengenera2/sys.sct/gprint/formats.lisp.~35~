;;; -*- Mode: LISP; Package: GPrint; Syntax: Common-Lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; This software is based on ideas published by Richard C. Waters
;;; His aid is gratefully acknowledged

;;; This file contains the functions to do various specific formats.

;;; NOTES: defflavor defprop package-declare
;;; Really hook into &body.  Write Smatt's install-format?
;;; Problems with grinding parser.lisp:
;;;  defvar loses.  deftokens seem to use tblocks?
;;;  loop syntax loses in tokenize and quote-param.
;;;   LOOP pretty much fixed, still not perfect EB 3/84
;;;  In find-first, two cond clauses are put on one line.
;;;  selectq in process-token is bad - should be fixed now.
;;;   PROG is not entirely satisfactory, e.g. label at the end, long labels.
;;;   Calls to &KEY functions should be formatted differently

;;; Typical functions herein take an argument, and call gformat.  A few of the functions
;;; in front are called specially by the dispatcher.  If a symbol has a formatter
;;; property, it should be such a function, and the dispatcher will call it.

(defun format-function (x)
  (gformat "(*_<*->)" x)) 

(defun format-tblock (x)
  (gformat "(1<TB$format-tblock ~>)" x))

(defun format-1tblock (x)
  (gformat "(1<TB*~>)" x))

(defun format-block (x)
  (gformat "(1<$format-block ,>)" x))

(defun format-1block (x)
  (gformat "(1<*,>)" x))

;; Used when *print-pretty* is :data
(defun format-data (x)
  (gformat "(1<$format-data ,>)" x))

(defun format-miser (x)
  (gformat "(1<$format-miser ->)" x))

(defun format-1miser (x)
  (gformat "(1<*->)" x))

(defun format-lambda-combination (x)
  (gformat "(1*-<*,>)" x))

(defun format-setq (x)
  (gformat "(*_<*+1,*+-1!>)" x))
(defprop setq format-setq formatter)
(defprop psetq format-setq formatter)
(defprop setf format-setq formatter)
(defprop login-setq format-setq formatter)

(defun format-quote (starting x)
  (if (and (consp (cdr x)) (null (cddr x)))	;If it's a well-formed (quote x)
      (gformat "{0S[I*]}" starting x)
      (format-function x)))
(defun (quote formatter) (x) (format-quote "'" x))
(defun (function formatter) (x) (format-quote "#'" x))

(defun (defselect formatter) (x) 
  (gformat "(2*_$format-1block <!(2*_$format-block <!*>)>)" x))

(defun (progw formatter) (x)
  (gformat "(2*_<*!>)" x))

(defun (progv formatter) (x)
  (gformat "(*_*-*+-5<!*>)" x))

(defun (multiple-value-bind formatter) (x)
  (gformat "(4*_$format-1block !*+-2<!*>)" x))

;;; si:displaced forms are left behind by displacing macros.
(defun (si:displaced formatter) (x)
  (gformat "*" (cadr x)))

(defun (:property defun formatter) (x)
  (cond ((or (cdr (last x)) ; dotted list is not a definition
	     (< (length x) 3)) ; and neither is a two-list
	 (format-1block x))
	((or (member (cadr x) '(expr fexpr macro))
	     (and (consp (cddr x))
		  (member (caddr x) '(expr fexpr macro))))
	 (gformat "(2*_*_*_$format-block !<-*>)" x))
	(t (format-definition x))))

(defun (:property future-common-lisp:defun formatter) (x)
  (cond ((or (cdr (last x)) ; dotted list is not a definition
	     (< (length x) 3)) ; and neither is a two-list
	 (format-1block x))
	((or (member (cadr x) '(expr fexpr macro))
	     (and (consp (cddr x))
		  (member (caddr x) '(expr fexpr macro))))
	 (gformat "(2*_*_*_$format-block !<-*>)" x))
	(t (format-definition x))))

(defun format-definition (x)
  (gformat "(2*_* _$format-block !<-*>)" x))

(defprop macro format-definition formatter)
(defprop defmacro format-definition formatter)
(defprop defmethod format-definition formatter)

(defun format-method-qualifiers ()
  (loop until (listp (car *value*))
	do (gformat "_* " (pop *value*))))

(defun (clos:defmethod formatter) (x)
  (gformat "(2*_* &format-method-qualifiers _$format-block !<-*>)" x))

(defun (lambda formatter) (x)
  (gformat "(2*_$format-block <-*>)" x))

(defun (zl:named-lambda formatter) (x)
  (gformat "(*~*,$format-block +-12<-*>)" x))

(defun (zl:named-subst formatter) (x)
  (gformat "(*~*,$format-block +-11 <-*>)" x))

(defun (let formatter) (x)
  (gformat "(2*~$format-bind-list <-*>)" x))

(defun (let* formatter) (x)
  (gformat "(2*~$format-bind-list <-*>)" x))

(defun format-bind-list (list)
  (cond ((or (atom list) (cdr (last list)))	;dotted
	 (gformat "*" list))
	((or (loop for x in list always (symbolp x))
	     ;; Extra case to do this for ",X" in backquoted exprs.	
	     (loop for x in list thereis (and (not (atom x)) (cdr (last x)))))
	 (gformat "(1<*,>)" list))
	(t (gformat "(1(1$format-block <,*>) <-$\"!(1$format-block <,*>)\" >)" list))))

(defun (cond formatter) (x)
  (gformat "(*_<$format-cond-internal ->)" x))

(defun format-cond-internal (list)
  (if (eq (car list) t)
      (gformat "(*_<*->)" list)
      (gformat "(1<*->)" list)))

(defvar *was-tag* nil "True if the last prog element printed was a tag.")

(defun (prog formatter) (list)
  (cond ((and (listp (cdr list)) (cadr list) (symbolp (cadr list)))
	 (format-named-prog list))
	(T (format-prog list))))

(defun (prog* formatter) (list)
  (cond ((and (listp (cdr list)) (cadr list) (symbolp (cadr list)))
	 (format-named-prog list))
	(T (format-prog list))))

(defun (tagbody formatter) (x)
  (let ((*was-tag* nil))
    (gformat "(*_<%format-prog-internal >)" x)))

(defun format-prog (x)
  (let ((*was-tag* nil))
    (gformat "(*_$format-bind-list <%format-prog-internal >)" x)))

(defun format-named-prog (x)
  (let ((*was-tag* nil))
    (gformat "(*~*_$format-bind-list <%format-prog-internal >)" x)))

(defun format-prog-internal (item)
  (when (or (not *was-tag*) (atom item))
    (gformat "!"))
  (cond ((atom item)
	 (setq *was-tag* t)
	 (gformat "~#*~" (- -1 (flatsize item)) item))
	(t
	 (setq *was-tag* nil)
	 (gformat "*" item))))

(defun format-do (x)
  (let ((*was-tag* nil))
    (gformat "(*_(1<$format-1block !>)!(1<*->)+-2
			   <%format-prog-internal >)" x)))
(defprop do format-do formatter)
(defprop do* format-do formatter)

(defun format-do-named (x)
  (let ((*was-tag* nil))
    (gformat "{2'('*~*_{0(1<$format-1block !>)!(1<*->)}[<%format-prog-internal >]')'}"
	      (nth 0 x) (nth 1 x) (nth 2 x) (nth 3 x) (nthcdr 4 x))))
(defprop do-named format-do-named formatter)
(defprop do*-named format-do-named formatter)

(defun format-special-form-0 (list) (gformat "(2*!<*->)" list))
(defun format-special-form-1 (list) (gformat "(2*_*!<*->)" list))
(defun format-special-form-2 (list) (gformat "(2*_*_*!<*->)" list))
(defun format-special-form-3 (list) (gformat "(2*_*_*_*!<*->)" list))
(defun format-special-form-4 (list) (gformat "(2*_*_*_*_*!<*->)" list))
(defun format-special-form-5 (list) (gformat "(2*_*_*_*_*_*!<*->)" list))
(defun format-special-form-6 (list) (gformat "(2*_*_*_*_*_*_*!<*->)" list))
(defun format-special-form-7 (list) (gformat "(2*_*_*_*_*_*_*_*!<*->)" list))

(defprop dolist format-special-form-1 formatter)
(defprop dotimes format-special-form-1 formatter)
(defprop when format-special-form-1 formatter)
(defprop unless format-special-form-1 formatter)

(defvar *immediately-preceding-keyword*)

(defun (loop formatter) (x)
  (if (= (length x) 1)
      ;; just loop
      (gformat "(*)" x)
      (let ((*immediately-preceding-keyword* t))
	(gformat "(*_. %format-loop-tail )" x))))

(defun format-loop-tail (tail)
  (gformat "{[< %format-loop-element >]}" tail))

(defun format-loop-element (item)
  (if (or (si:loop-tassoc item si:loop-keyword-alist)
	  (si:loop-tassoc item si:loop-iteration-keyword-alist))
      (progn (if (eq *immediately-preceding-keyword* t)
		 (gformat "}{# *_" (+ (flatsize item) 1) item)
		 (gformat "}-{# *_" (+ (flatsize item) 1) item))
	     (setf *immediately-preceding-keyword* item))
      (progn (if *immediately-preceding-keyword*
		 (gformat "*" item)
		 (gformat "-*" item))
	     (setf *immediately-preceding-keyword* nil))))

;;; AND and OR: Stack vertically unless only two long and
;;; one or the other is an atom or the second is a GO.
(defun format-and-or (x)
  (cond ((cdr (last x))
	 (format-1block x))
	((and (= (length x) 3)
	      (simple-p (second x))
	      (simple-p (third x)))
	 (format-function x))
	(t
	 (gformat  "(*_<*!>)" x))))

(defun simple-p (x)
  (or (nlistp x)
      (eq (car x) 'go)
      (eq (car x) 'quote)))

(defprop and format-and-or formatter)
(defprop or format-and-or formatter)

(defun (condition-case formatter) (x)
  (gformat "(4*_$format-block !*+-2<!*>)" x))

(defun (condition-call formatter) (x)
  (gformat "(4*_$format-block !*+-2<!*>)" x))

(defun (condition-case-if formatter) (x)
  (gformat "(4*_*_$format-block !*+-2<!*>)" x))

(defun (condition-call-if formatter) (x)
  (gformat "(4*_*_$format-block !*+-2<!*>)" x))

(defun format-property-list (x)
  (gformat "(1<*+2,*+-2!>)" x))
(defun format-association-list (x)
  (gformat "(1<(*' . '.*)!>)" x))

(defun format-structure-contents (x)
  (gformat "'#S'(*_<*+2,*+-2!>)" x))

(defvar *standard-formatters*
  `((:code nil)
    (:data *data-formatter*)
    (:plist *property-list-formatter*)
    (:alist *association-list-formatter*)
    ))


(defvar-resettable *gprint-backquote-depth* 0)

(defvar *readable-backquote-formatters*
	'((bq bq-formatter)
	  (comma comma-formatter)
	  (comma-atsign comma-atsign-formatter)
	  (comma-dot comma-dot-formatter)
	  (dot-comma dot-comma-formatter)))

;;; Backquoted structures.
(defun format-backquote (key list &optional (depth-change 0))
  (let ((*gprint-backquote-depth* (+ *gprint-backquote-depth* depth-change)))
    (gformat "{0S[I.*]}" key list)))
(defun format-backquote-space (key list &optional (depth-change 0))
  (let ((*gprint-backquote-depth* (+ *gprint-backquote-depth* depth-change)))
    (gformat "{0S~[I.*]}" key list)))

(defun bq-formatter (x)
  (format-backquote "`" x 0))
(defun comma-formatter (x)
  ;; don't inadvertantly print ,@ or ,.
  (if (and (cdr x)
	   (symbolp (cdr x))
	   (let ((sym (cdr x)))
	     (or (let ((name (symbol-name sym)))
		   (and (plusp (string-length name))
			(or (char-equal (schar name 0) #\@)
			    (char-equal (schar name 0) #\.))))
		 (let* ((pkg (symbol-package sym))
			(name (and pkg (si:pkg-name pkg))))
		   (and name
			(plusp (string-length name))
			(or (char-equal (schar name 0) #\@)
			    (char-equal (schar name 0) #\.)))))))
      (format-backquote-space "," x -1)
      (format-backquote "," x -1)))
(defun comma-atsign-formatter (x)
  (format-backquote ",@" x -1))
(defun comma-dot-formatter (x)
  (format-backquote ",." x -1))
(defun dot-comma-formatter (x)
  (format-backquote ".," x -1))

(defun (si:xr-bq-cons formatter) (obj)
  (format-backquote "`" (cons 'bq (unbackquotify obj)) 1))
(defun (si:xr-bq-list formatter) (obj)
  (format-backquote "`" (cons 'bq (unbackquotify obj)) 1))
(defun (si:xr-bq-list* formatter) (obj)
  (format-backquote "`" (cons 'bq (unbackquotify obj)) 1))
(defun (si:xr-bq-append formatter) (obj)
  (format-backquote "`" (cons 'bq (unbackquotify obj)) 1))
(defun (si:xr-bq-nconc formatter) (obj)
  (format-backquote "`" (cons 'bq (unbackquotify obj)) 1))

;;; Convert the backquote form to a list resembling what the user typed in,
;;; with "calls" to grind-comma, etc., representing the commas.
(defun unbackquotify (exp)
  (cond ((or (numberp exp) (eq exp t) (null exp) (stringp exp)) exp)
	((symbolp exp) `(comma . ,exp))
	((eq (si:%data-type exp) sys:dtp-logic-variable)
	 ;;--- Someday this might want to be more general
	 `(comma . ,exp))
	((atom exp) exp)
	((eq (car exp) 'quote) (cadr exp))
	((eq (car exp) 'si:xr-bq-cons)
	 (cons (unbackquotify (cadr exp))
	       (unbackquotify-segment (cddr exp) nil)))
	((eq (car exp) 'si:xr-bq-list)
	 (mapcar #'unbackquotify (cdr exp)))
	((eq (car exp) 'si:xr-bq-list*)
	 (nconc (mapcar #'unbackquotify (butlast (cdr exp)))
		(unbackquotify-segment (last exp) nil)))
	((eq (car exp) 'si:xr-bq-append)
	 (mapcon #'(lambda (l) (unbackquotify-segment l t))
		 (cdr exp)))
	((eq (car exp) 'si:xr-bq-nconc)
	 (mapcon #'(lambda (l) (unbackquotify-segment l nil))
		 (cdr exp)))
	(t `(comma . ,exp))))

;;; Convert a thing in a backquote-form which should appear as a segment, not an element.
;;; The argument is the list whose car is the segment-form,
;;; and the value is the segment to be appended into the resulting list.
;;; COPY-P means APPEND (rather than NCONC) is being used to insert the segment.
(defun unbackquotify-segment (loc copy-p)
  (cond ((null (cdr loc))
	 (let ((tem (unbackquotify (car loc))))
	   (cond ((and (listp tem) (eq (car tem) 'comma))
		  (list `(dot-comma . ,(cdr tem))))
		 (t tem))))
	((and (listp (car loc))
	      (eq (caar loc) 'quote)
	      (listp (cadar loc)))
	 (copy-list (cadar loc)))
	(t (list (cons (if copy-p 'comma-atsign 'comma-dot)
		       (car loc))))))

;;; Zwei interface

(defparameter *body-special-formatters* '(format-special-form-0 format-special-form-1
					  format-special-form-2 format-special-form-3
					  format-special-form-4 format-special-form-5
					  format-special-form-6 format-special-form-7))

(defun define-formats-from-zwei ()
  (flet ((do-one (function indentation)
	   (when (and (listp indentation)
		      (= (length indentation) 2)
		      (= (second indentation) 1)
		      (null (get function 'formatter)))
	     (setf (get function 'formatter)
		   (nth (first indentation) *body-special-formatters*)))))
    (if (listp zwei:*lisp-indentation-offset-hash-table*)
	;; Editor not loaded.
	(loop for (name . indentation) in zwei:*lisp-indentation-offset-hash-table* do
	  (do-one name indentation))
	(send zwei:*lisp-indentation-offset-hash-table* :map-hash #'do-one))))

(define-formats-from-zwei)

(defun format-array (array)
  (let ((rank (array-rank array)))
    (case rank
      (0 (gformat "'#0A'_*" (aref array)))
      (1 (gformat "'#(' {0 %format-vector-contents } ')'" array))
      (t (let ((*print-base* 10.))
	   (gformat "'#' * 'A'" rank)
	   (format-multidimensional-array array rank))))))

(defun format-vector-contents (vector)
  (let ((print-length (or *print-length* 999999999))
	(limit (- (length vector) 1))
	(q-p (null (sys:array-bits-per-element (sys:array-type-field vector)))))
    (when (>= limit 0)
      (dotimes (i (min limit print-length))
	(with-sensitivity ((and q-p (locf (aref vector i))))
	  (gformat "*" (aref vector i)))
	(gformat ","))
      (if (> print-length limit)
	  (with-sensitivity ((and q-p (locf (aref vector limit))))
	    (gformat "*" (aref vector limit)))
	  (gformat "'...'")))))

(defun format-multidimensional-array (array rank)
  (let ((limits (array-dimensions array))
	(indices (make-list rank)))
    (format-multidimensional-array-dimension array indices limits indices)))

(defun format-multidimensional-array-dimension (array indices limits-tail indices-tail)
  (gformat "'(' {0")
  (dotimes (i (first limits-tail))
    (setf (first indices-tail) i)
    (when (> i 0)
      (if (null (rest limits-tail))
	  (gformat ",")
	  (gformat "-")))
    (if (null (rest limits-tail))
	(gformat "*" (apply #'aref array indices))
	(format-multidimensional-array-dimension array
						   indices
						   (rest limits-tail)
						   (rest indices-tail))))
  (gformat "} ')'"))

;; So that (#:EVAL-AT-LOAD-TIME-MARKER (FOO 1)) prints as #,(FOO 1)
(defun format-eval-at-load-time-marker (list)
  ;; This is faster than (= (LENGTH LIST) 2) 
  (when (and (cl:consp (cdr list))
	     (null (cddr list))
	     (eq (car list) compiler:eval-at-load-time-marker))
    (gprint:gformat "'#,' * " (cadr list))
    t))
(cl:pushnew 'format-eval-at-load-time-marker gprint:*overriding-list-formatters*)


;;; Grind the definition of a function as a function-defining form.
;;; Son of grindef
(defun grind-function-definition (function-spec &optional (stream *standard-output*)
							  (expand-encapsulations t))
  (let* ((definition (fdefinition function-spec))
	 (function (or (special-form-p definition) (macro-function definition) definition))
	 tem)
    ;; If function is encapsulated, get what is inside it
    (loop while expand-encapsulations
	  while (and (not (symbolp function))
		     (setq tem (assoc 'si:encapsulated-definition (debugging-info function))))
	  ;;--- This isn't really right, calls residue of old grinder
	  do (funcall (get (caddr tem) 'si:encapsulation-grind-function)
		      function-spec function
		      (- (or *overriding-line-length*
			     (send-if-handles stream :size-in-characters)
			     95.)
			 *left-margin*
			 5)
		      stream nil)
;--- Might be a useful feature to implement
;	     (and (eq (caddr tem) 'si:rename-within)
;		  (setq grind-renaming-alist
;			(cadr (assoc 'si:renamings (debugging-info function)))))
	     (unless (fdefinedp (cadr tem)) (return-from grind-function-definition nil))
	     (setq definition (fdefinition (cadr tem)))
	     (setq function (or (special-form-p definition) (macro-function definition)
				definition)))
    ;; If it's compiled, try to find an interpreted version
    (when (and (compiled-function-p function)
	       (setq tem (cadr (assoc ':interpreted-definition (debugging-info function)))))
      (when (eq definition function)
	(setq definition tem))
      (setq function tem)
      (write-string ";Compiled" stream)
      (terpri stream))
    ;; If there wasn't anything but an encapsulation?
    (and (listp function-spec)
	 (eq (first function-spec) ':within)
	 (eq definition (third function-spec))
	 (return-from grind-function-definition nil))
    ;; Prettyprint an expression that would define it
    (print-object
            (cond ((nlistp definition) `(deff ,function-spec ',definition))
		  ((special-form-p definition)
		   (write-string ";Special-form interpreter function" stream)
		   (terpri stream)
		   (if (compiled-function-p function)
		       `(deff ,function-spec ',definition)
		       `(defun ,function-spec . ,(convert-lambda-to-defun (si:undigest function)))))
		  ((macro-function definition)
		   (write-string ";Macro-expander function" stream)
		   (terpri stream)
		   (if (compiled-function-p function)
		       `(deff ,function-spec ',definition)
		       `(macro ,function-spec . ,(convert-lambda-to-defun (si:undigest function)))))
		  ((not (si:interpreted-lambda-p (setf definition (si:undigest definition))))
		   `(fdefine ',function-spec ',definition))
		  ((and (listp function-spec) (eq (car function-spec) 'flavor:method))
		   (setq tem (convert-lambda-to-defun definition))
		   ;; Remove OPERATION, SELF, and SELF-MAPPING-TABLE
		   ;; Leave the magic DECLARE I guess.
		   (setq tem (cons (#+3600 cdddar #+imach cddar tem) (cdr tem)))
		   `(defmethod ,(cdr function-spec) . ,tem))
		  (t
		   `(defun ,function-spec . ,(convert-lambda-to-defun definition))))
	    ':code
	    stream)
    (terpri stream)))

(defun convert-lambda-to-defun (lambda-exp)
  (cond ((atom lambda-exp)
	 lambda-exp)
	((si:interpreted-lambda-p lambda-exp)
	 (si:interpreted-lambda-lambda-list-and-body lambda-exp))
	(t
	 (cdr lambda-exp))))
