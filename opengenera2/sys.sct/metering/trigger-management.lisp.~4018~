;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#||

;; These functions were moved into the System system, so they'd be accessible from macros.

;; they are in the file SYS:METERING;METERING-DEFINITIONS.LISP

(defmacro with-triggering-events-consistent (&body body)
  `(si:with-lock-held (*triggering-events-synchronizer*)
     ,@body))





(defun trigger-name-equal (name1 name2)
  (flet ((string-ops-ok (name)
	   (or (stringp name) (symbolp name) (characterp name))))
    (let ((name1-is-ok-for-strings (string-ops-ok name1))
	  (name2-is-ok-for-strings (string-ops-ok name2)))
      (if (and name1-is-ok-for-strings name2-is-ok-for-strings)
	  (string-equal name1 name2)
	  (if (or name1-is-ok-for-strings name2-is-ok-for-strings)
	      nil
	      (equalp name1 name2))))))

(defun find-trigger (name)
  (declare (values trigger variable-name found))
  (let ((descriptor
	  (car
	    (or (member name *triggering-events* :key #'first)
		(member name *triggering-events* :key #'first :test #'trigger-name-equal)
		(member name *triggering-events*
			:key #'(lambda (entry)
				 (trigger-name (second entry)))
			:test #'trigger-name-equal)))))
    (values (second descriptor) (third descriptor) (not (null descriptor)))))



(defun find-metered-function-trigger (function-desc)
  (declare (values trigger function-name types descriptor))
  (multiple-value-bind (trigger function-name types descriptor)
      (find-encapsulated-function-trigger function-desc)
    (if (member 'meter types)
	(values trigger function-name types descriptor)
	(values nil nil nil nil))))

(defvar *valid-conditions* '(si:gc-safe si:wired))
(defvar *condition-cautions* `((si:gc-safe "can be executed inside a transport trap")
			       (si:wired "executed on AUX stack")))
(defvar *valid-metering-encapsulation-types* '(meter region))

(defun get-conditions-from-types (types)
  (loop for type in types
	when (member type *valid-conditions*)
	  collect type))

(defun get-encapsulation-types-from-types (types)
  (loop for type in types
	when (member type *valid-metering-encapsulation-types*)
	  collect type))

(defun find-encapsulated-function-trigger (function-desc)
  (declare (values trigger function-name types descriptor))
  (when (fdefinedp function-desc)
    (let ((def (fdefinition (si:unencapsulate-function-spec function-desc))))
      (loop for (function-name trigger types descriptor) in *encapsulated-functions* do
	(when (eq def (fdefinition (si:unencapsulate-function-spec function-name)))
	  (return (values trigger function-name types descriptor)))))))

(defun parse-trigger (trigger-descriptor &key (if-not-exists :error))
  (or (and (symbolp trigger-descriptor)
	   (or (find-trigger trigger-descriptor)
	       (find-encapsulated-function-trigger trigger-descriptor)
	       (parse-trigger
		 (substitute #\space #\- (string trigger-descriptor)
			     :test #'char-equal)
		 :if-not-exists if-not-exists)))
      (and (stringp trigger-descriptor)
	   (or 
	     (find-trigger trigger-descriptor)
	     (ignore-errors
	       (find-encapsulated-function-trigger (read-from-string trigger-descriptor)))))
      (and (listp trigger-descriptor)
	   (or (and (member (car trigger-descriptor) '(:function function))
		    (find-encapsulated-function-trigger (cadr trigger-descriptor)))
	       (and (functionp trigger-descriptor)
		    (find-encapsulated-function-trigger trigger-descriptor))
	       (and (sys:validate-function-spec trigger-descriptor)
		    (ignore-errors
		      (find-encapsulated-function-trigger trigger-descriptor)))))
      (and (typep trigger-descriptor 'basic-trigger)
	   trigger-descriptor)
      (and (compiled-function-p trigger-descriptor)
	   (find-encapsulated-function-trigger
	     (si:function-name
	       (fdefinition
		 (si:unencapsulate-function-spec
		   (si:function-name trigger-descriptor))))))
      (if (eq if-not-exists :error)
	  (error "Invalid trigger descriptor ~S" trigger-descriptor)
	  if-not-exists)))

;;

(defun register-trigger (name variable-name trigger)
  (unless *triggering-events-synchronizer*
    (error "Attempt to register a metering trigger without lock held."))
  (let ((old-trigger (find-trigger name)))
    (when old-trigger
      (if (eq (trigger-name old-trigger) name)
	  (progn
	    (when *metering-enabled*
	      (cl:warn '(:bad-style 't) "Attempt to register triggering event ~A, which is already registered. Will replace after copying old information." name)
	      (let ((old-control (trigger-control old-trigger)))
		(control-trigger nil old-trigger)
		(when (and (not (trigger-control trigger)) old-control)
		  (cl:warn '(:bad-style 't)
			   "Copying old control ~S to new trigger." old-control)
		  (control-trigger old-control trigger)))
	      (let ((old-collector-description (trigger-collector-description old-trigger)))
		(collect-data-from-trigger old-trigger nil)
		(ignore-errors
		  (when (and (not (trigger-collector-description trigger)) old-collector-description)
		    (cl:warn '(:bad-style 't)
			     "Will try to copy old collector ~S to new trigger."
			     old-collector-description)
		    (collect-data-from-trigger trigger old-collector-description)))))
	    (setf *triggering-events*
		  (delete name *triggering-events* :key #'car :test #'trigger-name-equal)))
	  (cl:warn '(:bad-style 't)
		   "Registering metering event ~S, which might be confused with ~S"
		   name (trigger-name old-trigger)))))
  (push (list name trigger variable-name) *triggering-events*)
  (setf (symbol-value variable-name) trigger))

(defun register-triggering-event (name variable-name trigger)
  (with-triggering-events-consistent
    (register-trigger name variable-name trigger)))

;; No-op for the time being
(defun ensure-reasonable-trigger-name (name) name)

(defun find-trigger-variable-name (name type arglist &optional description)
  (let* ((partial-definition (listp type))
	 (legal-partial-definition nil)
	 (initial-final (if (and partial-definition
				 (let ((i-f (cdr type)))
				   (and i-f
					(listp i-f)
					(or (eql (car i-f) :initial)
					    (eql (car i-f) :final)))))
			    (progn
			      (setf legal-partial-definition 't)
			      (second type))
			    :final))
	 (type (if partial-definition (car type) type)))
    (unless (member type '(trigger metering-region metering-interval
				   restricted-trigger restricted-metering-region
				   restricted-metering-interval))
      (cl:warn '(:error 't) "Type ~A is not a valid trigger type" type))
    ;; If name already exists then arglist must match.
    ;; Otherwise, if new, register it, and create instance, and variable to hold it.
    (with-triggering-events-consistent
      (multiple-value-bind (trigger trigger-variable name-found)
	  (find-trigger name)
	;; before we check for agreement, make sure the names are EQ.
	(if (and name-found (eq name (trigger-name trigger)))
	    (unless (and (typep trigger type)
			 (equal arglist (if (eql initial-final :initial)
					    (trigger-initial-values trigger)
					    (trigger-values trigger))))
	      (if (and legal-partial-definition
		       (eql (if (eql initial-final :initial)
				(trigger-initial-values trigger)
				(trigger-values trigger))
			    :unbound))
		  (if (eql initial-final :initial)
		      (set-trigger-initial-values trigger arglist)
		      (set-trigger-values trigger arglist))
		  (cl:warn
		    '(:error 't)
		    "The trigger named ~A is already registered, and is incompatible.~% arglist: ~S ~% arglist provided: ~S ~%(~S '~S) and try this again if you want to override previous definition."
		    name (trigger-values trigger)
		    arglist 'undefine-metering-point name)))
	    (setf trigger-variable
		  (ensure-reasonable-trigger-name name))
	    (setf trigger
		  (if legal-partial-definition
		      (make-instance type
				     :name name
				     :description description
				     :type 'user-defined
				     :variable-name trigger-variable
				     :initial-values (if (eql initial-final :initial)
							 arglist
							 :unbound)
				     :values (if (eql initial-final :final)
						 arglist
						 :unbound))
		      (make-instance type
				     :name name
				     :description description
				     :type 'user-defined
				     :variable-name trigger-variable
				     :values arglist)))
	    (register-trigger name trigger-variable trigger))
	trigger-variable))))

(defun undefine-metering-point (name)
  (let ((trigger (parse-trigger name :if-not-exists nil)))
    (if trigger
      (remove-trigger trigger)
      (format *error-output* "No trigger named ~A was found." name))
    (or trigger name)))

(defun remove-trigger (name)
  (with-triggering-events-consistent
    (if (null name)
	(loop for entry in *triggering-events*
	      collect (car entry)
	      finally (setf *triggering-events* nil))
	(let ((trigger-list (if (listp name) name (ncons name))))
	  (loop for trigger-desc in trigger-list
		as trigger = (parse-trigger trigger-desc :if-not-exists nil)
		when trigger 
		  collect (trigger-name trigger)
		do (if (eq (trigger-type trigger) 'function)
		       (unmeter-function (trigger-name trigger))
		       (setf *triggering-events*
			     (delete trigger *triggering-events*
				     :key #'second :test #'trigger-name-equal))))))))
||#

(defun map-over-all-triggers (function &rest args)
  (declare (sys:downward-funarg function))
  (loop for (name trigger variable-name) in *triggering-events* do
    (apply function name trigger 'trigger args))
  (loop for (function-name trigger types descriptor) in *encapsulated-functions* do
    (when (member 'meter types)
      (apply function function-name trigger 'function args))))

(defun instantiate-all-triggers ()
  (loop for entry in *triggering-events* do
    (destructuring-bind (name trigger variable-name) entry
      (when (and trigger (listp trigger) (null (symbol-value variable-name)))
	(destructuring-bind (type name2 description
				  trigger-variable2
				  initial-arglist
				  final-arglist)
	    trigger
	  (ignore name2)
	  (let ((new-trigger (make-instance type
					    :name name
					    :description description
					    :type 'user-defined
					    :variable-name trigger-variable2
					    :initial-values initial-arglist
					    :values final-arglist)))
	    (setf (second entry) new-trigger)
	    (setf (symbol-value variable-name) new-trigger)))))))
       


(defun unregister-encapsulated-function (official-function-desc)
  (let* ((entry (find (fdefinition (si:unencapsulate-function-spec official-function-desc))
		      *encapsulated-functions*
		      :key #'(lambda (entry)
			       (fdefinition (si:unencapsulate-function-spec (car entry))))))
	 (trigger (second entry))
	 (descriptor (fourth entry)))
    (when entry
      (deallocate-resource
	(typecase trigger
	  (wired-metering-region 'function-metering-wired-regions)
	  (restricted-metering-region 'function-metering-restricted-regions)
	  (t 'function-metering-regions))
	trigger descriptor))
    (setf *encapsulated-functions* (delete entry *encapsulated-functions*))))

#||
;; these have also been moved to the same file


(defun append-cautions-from-conditions (trigger types)
  (when (and (typep trigger 'restricted-metering-region)
	     (intersection types *valid-conditions*))
    (let* ((cautions
	     (loop for condition in types
		   when (member condition *valid-conditions*)
		   collect (or (second
				 (find condition *condition-cautions*))
			       (format nil "~S" condition))))
	   (caution-string (if (= (length cautions) 1)
			       (car cautions)
			       (apply #'string-append
				      (cons (car cautions)
					    (loop for caution in (cdr cautions)
						  append (list ", " caution)))))))
      (setf (trigger-caution-about-generator trigger) caution-string)
      (setf (trigger-caution-about-collector trigger) caution-string))))

||#

(defun register-encapsulated-function (trigger function-name types descriptor)
  (unregister-encapsulated-function function-name)
  (append-cautions-from-conditions trigger types)
  (push (list function-name trigger types descriptor) *encapsulated-functions*))

(defun change-encapsulated-function-types (function-desc types)
  (multiple-value-bind (trigger function-name old-types descriptor)
      (find-encapsulated-function-trigger function-desc)
    (ignore old-types)
    (if (get-encapsulation-types-from-types types)
	(register-encapsulated-function trigger function-name types descriptor)
	(unregister-encapsulated-function function-name))))

(defun function-metered-p (function-desc)
  (let* ((spec1 (si:unencapsulate-function-spec function-desc 'si:meter))
	 (spec2 (si:unencapsulate-function-spec spec1 '(si:meter))))
     (neq spec1 spec2)))



(defstruct (trigger-constructor-entry (:conc-name tce-))
  (name nil)
  (function nil)
  (typed-arglist nil)
  (automatic-name nil))

(defvar *trigger-constructors* nil)

(defun get-trigger-constructors ()
  *trigger-constructors*)

(defun find-trigger-constructor (type)
  (find type *trigger-constructors* :key #'tce-name))

(defun decode-trigger-constructor (tce)
  (declare (arglist . (trigger-constructor))
	   (values . (type function typed-lambda-list constructs-name)))
  (values (tce-name tce) (tce-function tce) (tce-typed-arglist tce) (tce-automatic-name tce)))

(defun register-trigger-constructor (type function typed-lambda-list automatic-name)
  (setf *trigger-constructors* (delete type *trigger-constructors* :key #'tce-name))
  (push
    (make-trigger-constructor-entry :name type
				    :function function
				    :typed-arglist typed-lambda-list
				    :automatic-name automatic-name)
    *trigger-constructors*))
