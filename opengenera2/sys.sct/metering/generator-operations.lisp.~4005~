;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmethod (get-form-to-add generator-type) (v1 v2)
  (list form-to-add v1 v2))

(defmethod (get-form-to-subtract-offset generator-type) (v1 v2)
  (list form-to-subtract-offset v1 v2))

(defmethod (get-form-to-compute-change generator-type) (v1 v2)
  (list form-to-compute-change v1 v2))

(defmethod (get-form-to-accumulate-overhead generator-type) (v1 v2)
  (list form-to-accumulate-overhead v1 v2))

(defmethod (get-null-value generator-type) ()
  null-value)

(defmethod (change-computable? generator-type) ()
  (not (null form-to-compute-change)))

;;; There is additional structure to the ALTERS i.v.; It is a two element list, where the
;;; first element is a list of classes that this generator definitely affects (like time),
;;; and the second is a list of possibilities (for example, page-faults).
(defmethod (generator-definitely-alters generator) ()
  (car alters))

(defmethod (generator-possibly-alters generator) ()
  (second alters))

(defmethod (compute-change-of-data generator) (value1 value2)
  (get-form-to-compute-change (get-generator-type type) value1 value2))

(defmethod (compute-difference-of-data generator) (form1 form2)
  (get-form-to-subtract-offset (get-generator-type type) form1 form2))

(defmethod (compute-sum-of-data generator) (form1 form2)
  (get-form-to-add (get-generator-type type) form1 form2))

(defmethod (compute-initial-values? generator) ()
  (change-computable? (get-generator-type type)))

(defmethod (accumulate-overhead generator) (form1 form2)
  (get-form-to-accumulate-overhead (get-generator-type type) form1 form2))

(defmethod (generator-computation-type generator) (&optional generator-value)
  (if (and generator-value (functionp computation-type))
      (funcall computation-type generator-value)
      computation-type))

(defmethod (get-null-value generator) ()
  (get-null-value (get-generator-type type)))

(defmacro check-iv-value (name legal-values)
  `(unless (member ,name ',legal-values)
     (error "Illegal value for ~S: ~S, must be one of: ~S" ',name ,name ',legal-values)))

(defmethod (make-instance generator-value :after) (&rest init-plist)
  (when (getf init-plist :uid) (setf uid-exists t))
  (setf description (make-generator-code-description :generator-value self))
  (initialize-description (find-flavor-class
			    (generator-computation-type generator self))
			  description))

(defmethod (make-instance computable-generator-value :after) (&rest init-plist)
  (ignore init-plist)
  (check-iv-value inclusive (:inclusive :exclusive))
  (check-iv-value report (:report-overhead :report-value))
  (check-iv-value overhead (:overhead :no-overhead)))

(defmethod (make-instance non-computable-generator-value :after) (&rest init-plist)
  (ignore init-plist)
  (check-iv-value time (:initial :final)))

(defmethod (make-instance constant-generator-value :after) (&rest init-plist)
  (ignore init-plist)
  (check-iv-value time (:initial :final :both)))

(defmethod (initialize-description computable-generator-value) (description)
  (setf (generator-code-description-initial description) 't)
  (setf (generator-code-description-final description) 't))

(defmethod (initialize-description non-computable-generator-value) (description)
  (ignore description))

(defmethod (initialize-description constant-generator-value) (description)
  (ignore description))

(defun safe-intern-new-symbol (symbol suffix)
  (let ((new-name (string-append (string symbol) (string suffix))))
    (condition-case ()
	 (intern new-name (symbol-package symbol))
       (sys:package-locked
	 (intern new-name *package*)))))

(defmethod (specific-name computable-generator-value) (base-name)
  (when (eq report :report-overhead)
    (setf base-name (safe-intern-new-symbol base-name "-OVERHEAD")))
  (when (eq inclusive :exclusive)
    (setf base-name (safe-intern-new-symbol  base-name "-EXCLUSIVE")))
  base-name)

(defmethod (specific-name non-computable-generator-value) (base-name)
  (when (eq time :initial)
    (setf base-name (safe-intern-new-symbol base-name "-INITIAL")))
  base-name)

(defmethod (specific-name constant-generator-value) (base-name)
  base-name)

(defwhopper-subst (generator-value-name generator-value-instance) ()
  (or (continue-whopper)
      (specific-name self (generator-value-name generator-value))))

(defmethod (generator-value-name generator-value) ()
  (generator-name generator))

(defmethod (index-value computable-generator-value) ()
  (+ (* 1 (if (eq inclusive :inclusive) 0 1))
     (* 2 (if (eq overhead :no-overhead) 0 1))
     (* 4 (if (eq report :report-value) 0 1))))

(defmethod (index-value non-computable-generator-value) ()
  (+ (* 1 (if (eq time :initial) 0 1))))

(defmethod (index-value constant-generator-value) ()
  (case time
    (:final 0)
    (:initial 1)
    (:both 2)))

(defmethod (unparse computable-generator-value) (&optional terse)
  (if terse
      (let ((l nil))
	(unless (eq inclusive :inclusive)
	  (push inclusive l))
	(unless (eq overhead :no-overhead)
	  (push overhead l))
	(unless (eq report :report-value)
	  (push report l))
	l)
      (list inclusive overhead report)))

(defmethod (unparse non-computable-generator-value) (&optional terse)
  (unless (and terse (eq time :final))
    (list time)))

(defmethod (unparse constant-generator-value) (&optional terse)
  (unless (and terse (eq time :final))
    (list time)))

(defmethod (report-initial? computable-generator-value) ()
  't)

(defmethod (report-initial? non-computable-generator-value) ()
  (eq time :initial))

(defmethod (report-initial? constant-generator-value) ()
  (member time '(:initial :both)))

(defmethod (report-final? computable-generator-value) ()
  't)

(defmethod (report-final? non-computable-generator-value) ()
  't)

(defmethod (report-final? constant-generator-value) ()
  (member time '(:final :both)))

(defun computable? (generator-value)
  (typep generator-value 'computable-generator-value))

(defmethod (copy generator-value) ()
  (make-instance (type-of self)
		 :generator generator
		 :args (copy-list args)
		 :description (copy-generator-code-description description)
		 :values (loop for value in values collect (copy value))))

(defmethod (copy generator-value-instance) ()
  (make-instance (type-of 'self) :generator-value generator-value :name name))

(defmethod (copy computable-generator-value) ()
  (make-instance (type-of 'self)
		 :generator-value generator-value
		 :name name
		 :inclusive inclusive
		 :overhead overhead
		 :report report))

(defmethod (get-keyword-values computable-generator-value) ()
  (values 
    `(&key ((inclusive :inclusive) . (inclusive-generator-value-option "Include meters of callees"))
	   ((report :report-value) . (report-generator-value-option "Report value"))
	   ((overhead :no-overhead) . (overhead-generator-value-option "Include metering overhead in value")))
    (list :inclusive inclusive :report report :overhead overhead)))

(defmethod (copy non-computable-generator-value) ()
  (make-instance (type-of 'self)
		 :generator-value generator-value
		 :name name
		 :time time))

(defmethod (get-keyword-values non-computable-generator-value) ()
  (values
    `(&key ((time :final) . (time-generator-value-option "Time to compute value")))
    (list :time time)))

(defmethod (copy constant-generator-value) ()
  (make-instance (type-of 'self)
		 :generator-value generator-value
		 :name name
		 :time time))

(defmethod (get-keyword-values constant-generator-value) ()
  (values
    `(&key ((time :final) . (constant-time-generator-value-option "Time to report value")))
    (list :time time)))

(defmethod (presentation-type generator-value-instance) ()
  (generator-presentation-type
    (generator-value-generator generator-value)))

(defun get-new-typed-lambda-list (lambda-list argument-types)
  (loop with argument-description = argument-types
	for arg in lambda-list
	collect (if (member arg si:lambda-list-keywords)
		    arg
		    (let ((argument-type (car argument-description))
			  (arg-name (if (listp arg) (car arg) arg)))
		      (setf argument-description (cdr argument-description))
		      (unless (equalp arg-name (first argument-type))
			(format t "~&~S doesn't match ~S (in ~S and ~S)"
				arg-name argument-type lambda-list argument-types))
		      (cons arg
			    (cdr argument-type))))))

(defmethod (generator-typed-lambda-list generator) ()
  (or typed-lambda-list
      (setf typed-lambda-list
	    (get-new-typed-lambda-list lambda-list argument-types))))





