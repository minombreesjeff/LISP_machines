;;; -*- Mode: LISP; Base: 10; Syntax: Common-lisp; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defun parse-process (p)
  (if (process:process-p p)
      p
      (if (or (symbolp p) (stringp p))
	  (block find-it
	    (process:map-over-all-processes
	      #'(lambda (test-p)
		  (when (string-equal p (process:process-name test-p))
		    (return-from find-it test-p))))
	    (when (stringp p)
	      (error "Bad process descriptor ~S.  Does not evaluate to a process" p)))
	  (or (ignore-errors (parse-process (eval p)))
	      (error "Bad process descriptor ~S.  Does not evaluate to a process" p)))))

(defun get-valid-process (form)
  (let ((process (parse-process form)))
    process))

(defun add-metered-process (process control)
  (without-interrupts
    (when (zerop (process::process-metering-info-exists process))
      (unless (si:process-metering-info process)
	(setf (si:process-metering-info process) (process::make-process-metering-info)))
      (setf (process::process-metering-info-exists process) 1))
    (pushnew control (process::pmi-switches (si:process-metering-info process)))))

(defun remove-metered-process (process control)
  (without-interrupts
    (when (si:process-metering-info process)
      (setf (process::pmi-switches (si:process-metering-info process))
	    (delete control (process::pmi-switches (si:process-metering-info process)))))
    (unless (or (zerop (process::process-metering-info-exists process))
		(null (si:process-metering-info process))
		(process::pmi-switches (si:process-metering-info process)))
      (setf (process::process-metering-info-exists process) 0))))

