;;; -*- Syntax: Common-Lisp; Package: METERING; Base: 10; Mode: LISP -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor collect-backtrace-node
	((caller nil)
	 (this-function nil)
	 (callees nil)
	 (data nil))
	(complex-collector-mixin basic-collector)
  (:conc-name node-)
  :initable-instance-variables
  :ordered-instance-variables
  :writable-instance-variables
  (:default-init-plist :area metering-collector-area))
(defvar *backtrace-node-cache-chunk-size* 100)

(defcollector collect-backtrace
	      ((function entry-p)
	       ((function metering-function "Frame in call tree" :value)
		(entry-p boolean "Entry to function" :constant)))
	      ((current-position nil)
	       (node-cache (make-array *backtrace-node-cache-chunk-size*
				       :fill-pointer 0 :area metering-collector-area))
	       (resets 0)
	       (reset-from-source nil))
  (collect-backtrace-node)
  (:hierarchical 't)
  (:initable-instance-variables reset-from-source)
  ;; only :writable to be available to open-coded collect-data.  Other modifications are
  ;; illegal.
  (:default-init-plist :area metering-collector-area)
  (:writable-instance-variables resets current-position))

(defmethod (make-instance collect-backtrace :after) (&rest init-options)
  (ignore init-options)
  (setf data (funcall make-component))
  (setf current-position self))

(defmethod (depth-first-tree-walk-over-backtrace collect-backtrace) (function)
  (stack-let ((temp-stack (make-array 100 :fill-pointer 0))
	      (frame-pointer 0))
    (flet
      ((push-node (backtrace prev-ptr)
	 (vector-push-extend prev-ptr temp-stack)
	 (map-over-descendant-collectors
	   backtrace
	   #'(lambda (ignore callee) (vector-push-extend callee temp-stack)))))
      (push-node self frame-pointer)
      (loop as top-of-stack = (fill-pointer temp-stack)
	    until (= top-of-stack 1) do
	(if (= top-of-stack (1+ frame-pointer))
	    (progn
	      (setf (fill-pointer temp-stack) frame-pointer)
	      (setf frame-pointer (aref temp-stack frame-pointer)))
	    (let* ((new-frame-pointer (1- (fill-pointer temp-stack)))
		   (this-node (vector-pop temp-stack)))
	      (push-node this-node frame-pointer)
	      (setf frame-pointer new-frame-pointer)
	      (funcall function this-node)))))))

(defmethod (reset collect-backtrace) ()
  (let ((reduce-size nil))
    (depth-first-tree-walk-over-backtrace
      self
      #'(lambda (node)
	  (unless (or (eq node self) reduce-size)
	    (vector-push-extend node node-cache))
	  (setf reduce-size (not reduce-size))
	  (if (listp callees)
	      (setf (node-callees node) nil)
	      (clrhash (node-callees node)))
	  (decompose-components (node-data node)
				#'(lambda (component description)
				    (ignore description)
				    (reset-collector component)))))
    ;; have to clear out callees from top-most node.
    (if (listp callees)
	(setf callees nil)
	(clrhash callees))
    (setf current-position self)
    (incf resets)))

(defmethod (complete-data-p collect-backtrace-node)() t)

(defun fill-backtrace-node-cache (cache constructor)
  (when (zerop (fill-pointer cache))
    (loop repeat *backtrace-node-cache-chunk-size* do
      (vector-push-extend (make-instance 'collect-backtrace-node
					 :caller nil
					 :this-function nil
					 :top-level nil
					 :make-component constructor
					 :data (funcall constructor))
			  cache))))

(defsubst get-backtrace-caller (function node constructor cache)
  (let ((callees (node-callees node)))
    (if (or (listp callees)
	    (when (zerop (send callees :filled-entries))
	      (setf (node-callees node) nil)
	      't))
	(or (find function callees :key 'node-this-function)
	    (let ((new-node (or (vector-pop cache nil)
				(progn (fill-backtrace-node-cache cache constructor)
				       (vector-pop cache nil)))))
	      (setf (node-this-function new-node) function)
	      (setf (node-caller new-node) node)
	      (push new-node (node-callees node) :area metering-cons-area)
	      new-node))
	;; hide the downward-function declaration so that the EVACUABLE-CLOSURE stuff works.
	(flet ((cli::modify-hash (table key function) (cli::modify-hash table key function)))
	  (cli::modify-hash callees
			    function
			    #'(lambda (ignore value key-exists-p)
				(if key-exists-p
				    value
				    (let ((new-node (or (vector-pop cache nil)
							(progn (fill-backtrace-node-cache cache constructor)
							       (vector-pop cache nil)))))
				      (setf (node-this-function new-node) function)
				      (setf (node-caller new-node) node)
				      new-node))))))))

(defmethod (collect-data collect-backtrace) (function entry-p &rest args)
  (if entry-p
      (setf current-position (get-backtrace-caller function current-position make-component node-cache))
      (progn
	(apply #'collect-data (node-data current-position) args)
	(setf current-position (or (node-caller current-position) self)))))

(defmethod (collect-data-for-value collect-backtrace) (function entry-p &rest args)
  (ignore args)
  (if entry-p
      (progn
	(setf current-position
	      (get-backtrace-caller function current-position make-component node-cache))
	(node-data current-position))
      (multiple-value-prog1
	(node-data current-position)
	(setf current-position (or (node-caller current-position) self)))))

(defmethod (get-form-to-collect-data collect-backtrace) (instance &key args for-value)
  (declare (values form instance bindings))
  (if (eq instance ':constant)
      (let ((instance-name (gensym))
;	    (reset-from-source (gensym))
	    (constructor (gensym))
	    (node-cache (gensym))
	    (function (first args))
	    (entry-p (second args)))
	(if (< (length args) 2)
	    (error "Bad arglist to COLLECT-BACKTRACE.  Requires (FUNCTION ENTRY-P &REST ARGS) which doesn't match ~S" args)
	    (if (constantp entry-p)
		(if (null entry-p)
		    (values `(let ((current-position
				     (collect-backtrace-current-position ,instance-name)))
			       (setf (collect-backtrace-current-position ,instance-name)
				     (or (node-caller current-position)
					 ,instance-name))
			       ,(if for-value
				    `(node-data current-position)
				    `(collect-data
				       (node-data current-position)
				       ,@(cddr args))))
			    instance-name
			    nil)
		    (values `(let ((current-position
				     (get-backtrace-caller
				       ,function
				       (collect-backtrace-current-position ,instance-name)
				       ,constructor
				       ,node-cache)))
			       (setf (collect-backtrace-current-position ,instance-name)
				     current-position)
			       ,(if for-value
				    `(node-data current-position)
				    `(collect-data
				       (node-data current-position)
				       ,@(cddr args))))
			    instance-name
			    `((,constructor
			       (si:eval-in-instance ,instance-name 'make-component))
			      (,node-cache
			       (si:eval-in-instance ,instance-name 'node-cache)))))
		(error "Bad argument to COLLECT-BACKTRACE: ~S. ENTRY-P must be a constant." entry-p))))
		    
      (values `(,(if for-value 'collect-data-for-value 'collect-data) ,instance ,@args)
	      nil
	      nil)))

(defmethod (map-over-component-collectors collect-backtrace) (function &rest args)
  (ignore function args)
  (values))

(defmethod (map-over-component-collectors collect-backtrace-node) (function &rest args)
  (apply function nil data args))

(defmethod (map-over-descendant-collectors collect-backtrace-node) (function &rest args)
  (if (listp callees)
      (loop for node in callees do
	(apply function (node-this-function node) node args))
      (maphash #'(lambda (key value)
		   (apply function key value args))
	       callees)))

(defmethod (ncomponents collect-backtrace-node) ()
  (if (listp callees)
      (length callees)
      (send callees :filled-elements)))

(setf (collector-type-sample-instance
	(find-collector-type 'collect-backtrace))
      (make-data-collector 'collect-backtrace :component-description '()))

