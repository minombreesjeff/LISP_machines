;;; -*- Mode: LISP; Base: 10; Package: METERING; Syntax: Common-lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun display-metering-status (&optional verbose)
  (format t "~&The metering utility is ~A" (if *metering-enabled* "enabled" "disabled"))
  (when si:*page-trace-array*
    (format t "~&~A style page-tracing is enabled"
	    (if *new-page-fault-metering*
		"New release 7"
		"Standard release 6")))
  (map-over-all-triggers
    #'(lambda (name trigger type)
	(let ((control (trigger-control trigger)))
	  (when (or verbose
		    (and control (control-scope control)
			 (trigger-collector-description trigger)))
	    (if (eq type 'function)
		(format t "~&Function ~A (controlled by ~S): ~&    " name control)
		(format t "~&~A (controlled by ~S): ~&    " name control))
	    (when (and control (control-scope control) (not (eq (control-scope control) 't)))
	      (format t "When ~S ~%      " (control-scope control)))
	    (let ((values (get-trigger-values trigger)))
	      (if (trigger-collector-description trigger)
		  (format t "collect ")
		  (format t "yields "))
	      (when values
		(format t "~S " values)
		(when (trigger-collector-description trigger)
		  (format t "~&      into ")))
	      (when (trigger-collector-description trigger)
		(format t "~S" (trigger-collector-description trigger))))))))
  (values))

(defun metering-status (&optional verbose)
  (display-metering-status verbose))

(defun show-trigger-code (trigger)
  (labels ((get-real-function-source (fun)
	     (when fun
	       (loop for fspec = (si:function-name (if (si:lexical-closure-p fun)
						       (si:lexical-closure-function fun)
						       fun))
			       then (si:function-parent fspec)
		     while (si:function-parent fspec)
		     finally (return fspec)))))
    (let* ((trigger (parse-trigger trigger))
	   (gen-p (trigger-generator-description trigger))
	   (gen-func (get-real-function-source (trigger-generator-function trigger)))
	   (collector-p (trigger-collector-description trigger))
	   (coll-func-1 (get-real-function-source (trigger-initial-collector-function trigger)))
	   (coll-func (get-real-function-source (trigger-collector-function trigger))))
      (when gen-p
	(format t "~&~%Generator function:~&")
	(maphash #'(lambda (ignore value)
		     (when (if (listp (first value))
			       (member gen-func (first value))
			       (eq gen-func (first value)))
		       (format t "~&~S" (second value))))
		 (get-function-cache 'create-generator-function)))
      (when collector-p
	(when coll-func-1
	  (format t "~&~%Initial collector function:~&")
	  (maphash #'(lambda (ignore value)
		       (when (if (listp (first value))
				 (member coll-func-1 (first value))
				 (eq coll-func-1 (first value)))
			 (format t "~&~S" (second value))))
		   *collector-function-cache*))
	(when coll-func
	  (format t "~&~%Collector function:~&")
	  (maphash #'(lambda (ignore value)
		       (when (if (listp (first value))
				 (member coll-func (first value))
				 (eq coll-func (first value)))
			 (format t "~&~S" (second value))))
		   *collector-function-cache*))))))
