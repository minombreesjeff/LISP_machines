;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun set-control-switch-on (control)
  (let ((control (parse-control control)))
    (switch-on control)
    control))

(defun set-control-switch-off (control &key all)
  (let ((control (parse-control control)))
    (switch-off control all)
    control))

(defun set-scope-of-control (control scope-and-extent)
  (let ((control (parse-control control)))
    (set-scope control scope-and-extent)
    control))

(defun control-trigger (control trigger)
  (let ((trigger (parse-trigger trigger))
	(control (parse-control control)))
    ;; verify that they are compatible?
    (set-control-of-trigger trigger control)
    control))
;; trigger is a trigger specification.
;; collector can be either a collector-description, or a collector-function-description
;; If it is a collector-description it conforms to the description at the top of 
;; collector-description.lisp, or it is an atom, of typep basic-collector, which is
;; shorthand for:   `((,collector NAME ,(Triggers generated args)))
;; If it is a collector-function spec, then it is
;; (1) a function
;; (2) a function-spec
;; or (3) a collector-type : construct one and treat it like the atom collector-description 
;; above.
(defun collect-data-from-trigger (trigger collector &key override wired initial)
  (let* ((trigger (parse-trigger trigger))
	 (collector (and collector
			 (if (and (atom collector)
				  (not (parse-collector-function collector)))
			     `((,collector name ,@(if initial
						      (get-initial-trigger-values trigger)
						      (get-trigger-values trigger))))
			     collector)))
	 (collector-func (if (null collector)
			     collector
			     (or (and (not wired)
				      (parse-collector-function collector :construct 't))
				 (make-collector-function
				   nil
				   (if initial
				       (get-initial-trigger-values trigger)
				       (get-trigger-values trigger))
				   collector
				   (trigger-name trigger)
				   wired)))))
    (when (and initial (not (typep trigger 'metering-region)))
      (error "There is no initial-data to collect when trigger is not a region."))
    (apply (if initial #'set-trigger-initial-collector #'set-trigger-collector)
	   trigger collector-func collector
	   (when override '(:override 't)))))


(defun compute-differences-across-region (trigger compute-differences)
  (let ((trigger (parse-trigger trigger)))
    (if (typep trigger 'metering-region)
	(setf (trigger-compute-differences trigger) (not (null compute-differences)))
	(error "Trigger ~A is not a metering region, so computing differences isn't a viable option" trigger))
    (not (null compute-differences))))

(defun generate-data-at-trigger (trigger generator-description
				 &key initial-collector-arglist
				 final-collector-arglist override wired)
  (let* ((trigger (parse-trigger trigger))
	 (generator (and generator-description
			 (or (multiple-value-bind (gen desc)
				 (parse-generator-function generator-description
							   (trigger-type-of-trigger trigger)
							   :construct nil)
			       (setq generator-description (or desc generator-description))
			       gen)
			     (multiple-value-bind (gen desc)
				 (construct-generator-function
				   generator-description
				   (trigger-values trigger)
				   (trigger-type-of-trigger trigger)
				   :initial-collector-arglist initial-collector-arglist
				   :final-collector-arglist final-collector-arglist
				   :wired wired
				   :initial-trigger-values (trigger-initial-values trigger))
			       (setq generator-description (or desc generator-description))
			       gen)))))
    (attach-generator-description-to-trigger (unless (equal generator generator-description)
					       generator-description)
					     trigger)
    (apply #'set-trigger-generator trigger generator generator-description
	   :initial-collector-arglist initial-collector-arglist
	   :final-collector-arglist final-collector-arglist
	   (when override '(:override 't)))
    (get-trigger-values trigger)))

(defun named-trigger-values (trigger value-names)
  (set-trigger-value-names trigger value-names)
  value-names)

(defun meter-conditionally (trigger filter &key override initial-filter)
  (let ((trigger (parse-trigger trigger)))
    (apply #'set-trigger-filter1 trigger filter (when override '(:override 't)))
    (if (typep trigger 'metering-interval)
	(apply #'set-trigger-filter3
	       trigger
	       (if initial-filter initial-filter filter)
	       (when override '(:override 't)))
	(when initial-filter
	  (format *error-output*
		  ":INITIAL-FILTER is only valid if ~S is of type METERING-INTERVAL, not ~S"
		  trigger (type-of trigger))))
    (not (null filter))))

(defun filter-data-from-trigger (trigger filter &key initial)
  (let ((trigger (parse-trigger trigger)))
    (if initial
	(progn
	  (unless (typep trigger 'metering-region)
	    (error "There is no initial-data to filter when trigger is not a region."))
	  (set-trigger-initial-filter2 trigger filter))
	(set-trigger-filter2 trigger filter)))
  (not (null filter)))

(defun display-collector (collector &optional (stream *standard-output*))
  (display (parse-collector collector) stream))

(defun reset-collector (collector)
  (reset (parse-collector collector)))

;;

;; meter-function is the hook that makes it seem as if you could (meter-form some-function)
(defun meter-function (function &optional controller conditions)
  (let* ((function (si:get-defined-function-spec
		     (if (or (compiled-function-p function) (si:lexical-closure-p function))
			 (sys:function-name function)
			 function)))
	 (controller (and controller (parse-control controller)))
	 (conditions (and conditions (if (listp conditions) conditions (ncons conditions))))
	 (created-trigger nil)
	 (storage-category-entry (assoc 'si:storage-category (debugging-info function))))
    (when (and storage-category-entry
	       (eql (si:decode-storage-category-debugging-info-entry storage-category-entry)
		    :wired)
	       (not (member 'si:wired conditions)))
      (cerror "Add 'SI:WIRED to CONDITIONS"
	      "~S is a wired function, but 'SI:WIRED is not one of the specified conditions ~@[(~S)~]"
	      function conditions)
      (push 'si:wired conditions))
    (multiple-value-bind (trigger function-name types descriptor)
	(find-encapsulated-function-trigger function)
      ;; if trigger already exists for function, and has same controlling switch,
      ;; then we're OK.  Otherwise, clear it.
      (unless (and (member 'meter types)
		   (subsetp conditions types))
	(unless (member 'meter types) (setq created-trigger t))
	(let ((types (remove-duplicates (append (cons 'meter types) conditions))))
	  (if trigger
	      (change-encapsulated-function-types function-name types)
	      (progn
		(multiple-value-setq (trigger descriptor)
		  (allocate-resource (if conditions
					 (if (member 'si:wired conditions)
					     'function-metering-wired-regions
					     'function-metering-restricted-regions)
					 'function-metering-regions)))
		(setf (trigger-name trigger) function)
		(register-encapsulated-function trigger function types descriptor)))
	  (encapsulate-function function trigger types)))
      (control-trigger (or controller
			   (trigger-control trigger)
			   *control-metered-functions*)
		       trigger)
      (values trigger created-trigger))))

(defun make-function-into-region (function &optional region conditions)
  (let* ((function (si:get-defined-function-spec
		     (if (or (compiled-function-p function) (si:lexical-closure-p function))
			 (sys:function-name function)
			 function)))
	 (storage-category-entry (assoc 'si:storage-category (debugging-info function))))
    (when (and storage-category-entry 
	       (eql (si:decode-storage-category-debugging-info-entry storage-category-entry)
		    :wired)
	       (not (member 'si:wired conditions)))
      (cerror "Add 'SI:WIRED to CONDITIONS"
	      "~S is a wired function, but 'SI:WIRED is not one of the specified conditions ~@[(~S)~]"
	      function conditions)
      (push 'si:wired conditions))
    (multiple-value-bind (trigger function-name types descriptor)
	(find-encapsulated-function-trigger function)
      (if (not (and (member 'region types)
		    (subsetp conditions types)))
	  (let ((types (remove-duplicates (append (cons 'region types) conditions))))
	    (if trigger
		(change-encapsulated-function-types function-name types)
		(progn
		  (multiple-value-setq (trigger descriptor)
		    (allocate-resource (if conditions
					   (if (member 'si:wired conditions)
					       'function-metering-wired-regions
					       'function-metering-restricted-regions)
					   'function-metering-regions)))
		  (setf (trigger-name trigger) function)
		  (register-encapsulated-function trigger function types descriptor)))
	    ;; we have to set up the active-region before we encapsulate the function
	    ;; in case it gets called in an inconsistent state.
	    (setf (trigger-active-region trigger)
		  (or region (register-region trigger nil nil nil)))
	    (encapsulate-function function trigger types))
      ;; region had better be equal to trigger-active-region
      ;; maybe we should check and warn here?
      (setf (trigger-active-region trigger)
	    (or region (register-region trigger nil nil nil)))))))

(defun unencapsulate-function-for-region (function)
  (let ((function (si:get-defined-function-spec
		    (if (or (compiled-function-p function) (si:lexical-closure-p function))
			(sys:function-name function)
			function))))
    (multiple-value-bind (trigger function-name types ignore)
	(find-encapsulated-function-trigger function)
      (when (and trigger (member 'region types))
	(let ((types (delete 'region types)))
	  (encapsulate-function function trigger types)
	  (change-encapsulated-function-types function-name types))))))

(defun unmeter-function (&optional function-specifier)
  (if (null function-specifier)
      (loop for (function-name trigger types) in *encapsulated-functions*
	    when (member 'meter types)
	    collect function-name
	    when (member 'meter types)
	    do (setq types (delete 'meter types))
	       (change-encapsulated-function-types function-name types)
	       (encapsulate-function function-name trigger types))
      (let ((function-list
	      (cond
		((symbolp function-specifier) (ncons function-specifier))
		((and (listp function-specifier) (eq (car function-specifier) :function))
		 (ncons (second function-specifier)))
		((listp function-specifier) function-specifier)
		(t (error "FUNCTION ~S must be either a symbol or a list."
			   function-specifier)))))
	(loop for function-desc in function-list do
	  (let ((function-desc (si:get-defined-function-spec function-desc)))
	    (multiple-value-bind (trigger function-name types ignore)
		(find-metered-function-trigger function-desc)
	      (setq types (delete 'meter types))
	      (if (null trigger)
		  (if (function-metered-p function-name)
		      (format t "~&~S is metered, but was not found on list of metered functions" function-desc)
		      (format t "~&~S is not metered." function-desc))
		  (change-encapsulated-function-types function-name types)
		  (encapsulate-function function-name trigger types))
	    ;; do this regardless.
	    (encapsulate-function function-desc trigger types)))))))
(defun show-metering-status ()
  (map-over-all-triggers
    #'(lambda (name trigger type)
	(let ((control (trigger-control trigger)))
	  (when (and control
		     (control-scope control)
		     (trigger-collector-description trigger))
	    (format t "~&While ~S (controlled by ~A) ~A ~A yields ~S (collector of type ~S)"
		    (control-scope control)
		    (or (control-name control) control)
		    type
		    name
		    (trigger-generated-values trigger)
		    (trigger-collector-description trigger)))))))

(defvar *number-of-times-to-try-computing-fudge-factors* 3)

;; must be one of :PROMPT, :RETRY, or :IGNORE
(defvar *inconsistent-fudge-factors-action* #-vlm :PROMPT #+vlm :IGNORE)

(define-presentation-type inconsistent-fudge-factors-action ()
   :expander '((alist-member
		 :alist
		 (("Retry once" :value :retry-once
		   :documentation
		   "Retry the computation once, and then re-prompt if it fails.")
		  ("Retry" :value :retry
		   :documentation
		   "Continue retrying the computation until the measurements are consistent.")
		  ("Ignore" :value :ignore
		   :documentation
		   "Use the (possibly inconsistent) values computed so far.")))))

(defvar *inconsistent-fudge-factors-description* 
	"~%While trying to measure the overhead of the metering tools:~@
         The computed error was larger than expected.")
(defvar *compute-fudge-factor-warning-threshold* 10.)

(defun display-function-call-fudge-factors (&optional (stream *standard-output*))
  (format stream "~&Values of fudge factors for metering all function calls:")
  (format stream "~&    Caller: ~D microseconds on entry and " *function-entry-fudge-factor-1*)
  (format stream "~&            ~D microseconds on exit" *function-exit-fudge-factor-2*)
  (format stream "~&            within an error of ~D microseconds."
	  (float *function-caller-fudge-factor-error*))
  (format stream "~&    Callee: ~D microseconds on entry and " *function-entry-fudge-factor-2*)
  (format stream "~&            ~D microseconds on exit" *function-exit-fudge-factor-1*)
  (format stream "~&            within an error of ~D microseconds."
	  (float *function-callee-fudge-factor-error*))
  (format stream "~&    Total fudge of ~D microseconds per function call with an error of ~D microseconds"
	  (+ *FUNCTION-entry-fudge-factor-1*
	     *function-entry-fudge-factor-2*
	     *function-exit-fudge-factor-1*
	     *function-exit-fudge-factor-2*)
	  (float *function-fudge-factor-error*)))

(defun enable-metering-utility ()
  (setq *metering-enabled* 't)
  (setq *metering-globally-enabled* 't)
  ;; fix up all triggers that weren't really created, because the metering utility wasn't
  ;; loaded yet.
  (with-triggering-events-consistent (instantiate-all-triggers))
  (initializations '*metering-enable-initializations* 't))

(defun clear-trigger (trigger)
  (let ((trigger (parse-trigger trigger)))
    (collect-data-from-trigger trigger nil)
    (meter-conditionally trigger nil)
    (filter-data-from-trigger trigger nil)
    (generate-data-at-trigger trigger nil)
    (when (typep trigger 'metering-region)
      (collect-data-from-trigger trigger nil :initial 't)
      (filter-data-from-trigger trigger nil :initial 't)
      (compute-differences-across-region trigger 't))
    (when (typep trigger 'metering-interval)
      (setf (trigger-interval-depth trigger) 0))))

(defun reinitialize-metering (&optional (clear-caches nil) (reset-completely nil))
  (setf metering:*metering-overhead-accounted* nil)
  (unmeter-function)
  (map-over-all-triggers
    #'(lambda (ignore trigger &rest ignore)
	(collect-data-from-trigger trigger nil)
	(when (typep trigger 'metering-region)
	  (collect-data-from-trigger trigger nil :initial 't))
	(generate-data-at-trigger trigger nil)
	(when (trigger-control trigger)
	  (set-scope-of-control (trigger-control trigger) nil)
	  (switch-off (trigger-control trigger) 't))))
  (loop for c in *standard-controls* do
    (set-scope-of-control c nil))
  (loop for r being the hash-elements of active-regions collect r
	do (let ((controls (region-controls r)))
	     (setf (region-count r) 0)
	     (setf (region-lock r) nil)
	     (loop for c in controls 
		   do (remove-active-region r c))))
  ;; go through resources
  (loop for resource in '(function-metering-regions function-metering-restricted-regions) do
    (si:map-resource
      resource
      #'(lambda (trigger busy ignore)
	  (when busy
	    (encapsulate-function (trigger-name trigger) trigger nil)
	    (change-encapsulated-function-types (trigger-name trigger) nil))))
    (si:clear-resource resource))
  ;; go through encapsulated functions
  (loop for (function-name trigger types descriptor) in *encapsulated-functions* do
    (encapsulate-function function-name trigger nil))
  (setf *encapsulated-functions* nil)
  
  (when clear-caches
    (clrhash *collector-function-cache*)
    (reset-function-cache 'create-component-constructor)
    (reset-function-cache 'create-generator-function)
    (reset-function-cache 'create-control-scope-testing-function))
  (when reset-completely
    (when clear-caches
      (clrhash *region-encapsulation-table*)
      (clrhash active-regions)
      (clrhash known-regions))))

(defun disable-metering-utility ()
  (setq *metering-globally-enabled* nil)
  (setq *metering-enabled* nil))

(defun reset-metering-utility (&optional (clear-caches nil) (reset-completely nil))
  (disable-metering-utility)
  (reinitialize-metering clear-caches reset-completely))

;; dumb, brute force, temporary hack.
(defun report-on-all-active-collectors (&optional (stream *standard-output*))
  (let ((collectors nil))
    (map-over-all-triggers
      #'(lambda (ignore trigger &rest ignore)
	  (let ((collector-description (trigger-collector-description trigger)))
	    (when collector-description
	      (loop for collector in (get-list-of-collectors collector-description) do
		(pushnew collector collectors))))))
    (loop for collector in collectors do
      (display collector stream))))

