;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; The format of a generator description is a list of generator slots.
;;; A generator slot is either an atom, (in which case we assume it is a generator name
;;;	with no args, and no keywords), or a list.
;;;	If it is a list, then the car of the list is the generator name, and the next elts
;;;	of the list are arguments to the generator, until we reach the atom :KEYWORDS.
;;;	After :KEYWORDS each elt of the list is a description of a generator value.
;;;	A "description of a generator value" is a list of all the generator keywords for
;;;	that value.  For example: (:EXCLUSIVE :OVERHEAD :REPORT-OVERHEAD).
;;;	If the list consists of a single keyword, you can use the atom itself instead.
;;;	For example: :EXCLUSIVE.
;;; example:
;;;    `(CURRENT-PROCESS
;;;       (TOTAL-CONSING :KEYWORDS
;;;		         (:EXCLUSIVE :OVERHEAD)
;;;		         (:EXCLUSIVE :REPORT-OVERHEAD))
;;;       (REAL-TIME :KEYWORDS
;;;		     :INCLUSIVE
;;;		     (:INCLUSIVE :REPORT-OVERHEAD)
;;;		     (:EXCLUSIVE :OVERHEAD))
;;;       (FUNCTION FRAME-POINTER))

;;; This gets interpreted into a list of generator-values.  Each slot turns into one 
;;; generator-value.  The values i.v. contains one generator-value-instance for each list
;;; (i.e. for each "description of a generator value")

(defun get-generator-from-slot (slot)
  (if (listp slot)
      (car slot)
      (if (typep slot 'generator-value)
	  (generator-value-generator slot)
	  slot)))
(defvar *generator-top-level-keywords* '(:keywords :uid))

(defun get-arglist-from-slot (slot)
  (if (listp slot)
      (loop for arg in (cdr slot)
	    until (member arg *generator-top-level-keywords*)
	    collect arg)
      (if (typep slot 'generator-value)
	  (generator-value-args slot)
	  nil)))
;; this does not include :KEYWORDS, which is treated specially.
(defun get-top-level-keywords-from-slot (slot)
  (if (listp slot)
      (loop with flag = nil
	    for arg in (cdr slot)
	    when flag
	      collect (progn (setf flag nil) arg)
	    until (eql arg :keywords)
	    when (member arg *generator-top-level-keywords*)
	      collect (progn (setf flag t) arg))
      (if (typep slot 'generator-value)
	  (generator-value-top-level-keywords slot)
	  nil)))
(defvar *keyword-init-mappings*
	`(((:exclusive :inclusive) :inclusive 'inclusive-generator-value-option)
	  ((:report-overhead :report-value) :report 'report-generator-value-option)
	  ((:overhead :no-overhead) :overhead 'overhead-generator-value-option)
	  ((:initial :final :both) :time 'time-generator-value-option)))

(defsubst get-init-keyword (keyword)
  (loop for mapping in *keyword-init-mappings*
	do (when (member keyword (car mapping))
	     (return (second mapping)))
	   finally (return keyword)))

;; If no keywords, as if one description with only the defaults.
;; returns an init-plist.
(defun get-value-descriptions-from-slot (slot)
  (or (when (listp slot)
	(loop for keywords in (loop for args on (cdr slot)
				   do (when (equal (car args) :KEYWORDS)
					(return (cdr args))))
	      collect
	      (loop for keyword in (if (listp keywords) keywords (ncons keywords))
		    append (if (and (listp keyword) (= (length keyword) 2))
			       keyword
			       `(,(get-init-keyword keyword) ,keyword)))))
      `(())))

(defvar *generator-keyword-list*
	'(:exclusive		;; When trigger allows, subtract out value of descendants
	   :inclusive		;; (default) inclusive values in metering-region.
	  ;; When there is an initial-collector, do we report values that don't change
	  ;; over the course of the region or interval? 
	  :initial		;; Yes, report both at the beginning and end.
	  :initial-only		;; Yes, but *don't* report this value at the end.
	  :final		;; (default) no, only report changing values at the beginning.
	  :overhead		;; measure the way this value alters due to metering, and
	  			;; subtract that out.
	  :report-value		;; (default) as opposed to :report-overhead.  
	  :report-overhead	;; report the overhead computation.  When this is specified,
	  			;; the value itself isn't generated - just the overhead.
	  :report))		;; generate the value itself, but if overhead is being
				;; computed, report that too.

(defvar *default-generator-keyword-list*
	'(:inclusive :final :report-value))
;; A list of keyword supersets.  The CAR of each entry renders any elts of the cdr
;; unnecessary.  So, for example, if we see the keyword :report, we can ignore :report-value
;; and :report-overhead.
(defvar *generator-keyword-supersets* '((:report :report-value :report-overhead)))
(defvar *related-generator-keywords*
	'((:exclusive (:inclusive))
	  (:inclusive (:exclusive))	
	  (:initial (:final :initial-only))
	  (:final (:initial :initial-only))
	  (:initial-only (:initial :final))
	  (:overhead)
	  (:report-value (:report-overhead :report))
	  (:report-overhead (:report-value :report))
	  (:report (:report-value :report-overhead))))

(defsubst get-related-keywords (key) (cadr (assoc key *related-generator-keywords*)))

(defun get-generator-keywords-from-slot (slot)
  (when (listp slot)
    (remove-if #'(lambda (item)
		   (not (member item *generator-keyword-list*)))
	       (cdr slot))))

(defvar *types-supporting-exclusive-generators* '(metering-interval))
(defvar *types-without-initial-values* '(trigger))

(defun exclusive? (slot &optional (type 'metering-interval))
  (and (member type *types-supporting-exclusive-generators*)
       (listp slot)
       (member :exclusive (cdr slot))
       (compute-initial-values? (get-generator-from-slot slot))))

;; it can be both, you know.
(defun inclusive? (slot &optional (type 'metering-interval))
  (or (not (exclusive? slot type))
      ;; If it is exclusive, then slot *must* be a list, so we can take the #'cdr of slot.
      (member :inclusive (cdr slot))))

(defun report-initial-value? (slot &optional (type 'metering-interval))
  (and (not (member type *types-without-initial-values*))
       (or (and (listp slot) (or (member :initial (cdr slot))
				 (member :initial-only (cdr slot))))
	   (compute-initial-values? (get-generator-from-slot slot)))))

(defun report-final-value? (slot &optional (type 'metering-interval))
  (ignore type)
  (not (and (listp slot) (member :initial-only (cdr slot)))))

(defun report-value? (keywords)
  (or (not (member :report-overhead keywords))
      (member :report keywords)
      (member :report-value keywords)))

(defun report-overhead? (keywords)
  (or (member :report-overhead keywords) (member :report keywords)))

(defun compute-overhead? (keywords)
  (member :overhead keywords))

(defun get-form-from-slot (slot type)
  (if (typep slot 'generator-value)
      (apply #'get-form-to-generate-data
	     (generator-value-generator slot) type (generator-value-args slot))
      (if (listp slot)
	  (apply #'get-form-to-generate-data
		 (car slot)
		 type
		 (remove-if #'(lambda (item)
				(member item *generator-keyword-list*))
			    (cdr slot)))
	  (get-form-to-generate-data slot type))))

(defun get-overhead-from-slot (slot type)
  (if (typep slot 'generator-value)
      (apply #'get-form-to-generate-overhead
	     (generator-value-generator slot) type (generator-value-args slot))
      (if (listp slot)
	  (apply #'get-form-to-generate-overhead
		 (car slot)
		 type
		 (remove-if #'(lambda (item)
				(member item *generator-keyword-list*))
			    (cdr slot)))
	  (get-form-to-generate-overhead slot type))))
(defun update-generator-description-from-value (value description)
  (when (report-initial? value)
    (setf (generator-code-description-initial description) 't))
  (when (report-final? value)
    (setf (generator-code-description-final description) 't)))
(defun update-generator-description (instance-description description)
  (when (member :exclusive instance-description)
    (setf (generator-code-description-exclusive description) 't)
    (when (or (member :report-overhead instance-description)
	      (member :overhead instance-description))
      (setf (generator-code-description-exclusive-overhead description) 't)))
  (when (member :report-overhead instance-description)
    (setf (generator-code-description-overhead-change description) 't))
  (when (or (member :overhead instance-description)
	    (member :report-overhead instance-description))
    (setf (generator-code-description-overhead description) 't))
  (when (member :initial instance-description)
    (setf (generator-code-description-initial description) 't))
  (when (member :final instance-description)
    (setf (generator-code-description-final description) 't)))

(defun finish-generator-description (description variable-names make-uid)
  (let* ((gen (generator-value-generator
		  (generator-code-description-generator-value description)))
	 (name (generator-name gen)))
    (setf (generator-code-description-overhead-delta description)
	  (generator-code-description-overhead description))
    (setf (generator-code-description-overhead description)
	  (and (generator-code-description-overhead description)
	       (not (special-computation-for-overhead? gen))))
    (setf (generator-code-description-basic-name description)
	  (funcall make-uid name "" variable-names))
    (when (generator-code-description-exclusive description)
      (setf (generator-code-description-exclusive-name description)
	    (funcall make-uid name 'exclusive variable-names)))
    (when (generator-code-description-exclusive-overhead description)
      (setf (generator-code-description-exclusive-overhead-name description)
	    (funcall make-uid name 'exclusive-overhead variable-names)))
    (when (generator-code-description-overhead-delta description)
      (setf (generator-code-description-overhead-name description)
	    (funcall make-uid name 'overhead variable-names)))))

(defun construct-generators-from-slots (generator-list &optional wire)
  (declare (values generators value-names))
  (let ((arg-names (ncons nil))
	(variable-names (ncons nil))
	(uid 1))
    (flet ((make-unique-name (prefix suffix existing-names)
	     ;;; prefix must be a symbol, or ""
	     (let* ((suffix-string (string suffix))
		    (name (cond ((equalp prefix "") suffix)
				((equalp suffix "") prefix)
				(t (safe-intern-new-symbol
				     prefix (string-append "-" suffix-string))))))
	       (when (member name existing-names)
		 (setf name (safe-intern-new-symbol
			      name (string-append "-" (format nil "~D" uid))))
		 (incf uid))
	       (setf (cdr existing-names) (cons name (cdr existing-names)))
	       name)))
      (values 
	(loop for slot in generator-list
	      collect
		(let* ((generator (or (parse-generator (get-generator-from-slot slot))
				      (error "No generator named ~S found."
					     (get-generator-from-slot slot))))
		       (other-keywords (get-top-level-keywords-from-slot slot))
		       (generator-value
			 (apply
			   #'make-instance
			   'generator-value
			   :args (get-arglist-from-slot slot)
			   :top-level-keywords other-keywords
			   :generator generator
			   other-keywords)))
		  (when (and wire (not (generator-wirable generator)))
		    (error "Generator ~A (~S) is not wirable."
			   (generator-name generator) generator))
		  (multiple-value-bind (values description)
		      (loop with description = (generator-value-description generator-value)
			    for instance-description in
				(get-value-descriptions-from-slot slot)
			    do (update-generator-description instance-description description)
			    collect
			      (let* ((value (apply #'make-instance
						   (generator-computation-type
						     generator generator-value)
						   :generator-value generator-value
						   instance-description))
				     (name (generator-value-name value)))
				(update-generator-description-from-value value description)
				(setf (generator-value-name value)
				      (make-unique-name name "" arg-names))
				value)
			      into values
			    finally
			      (return
				(values
				  values
				  (progn
				    (finish-generator-description
				      description variable-names #'make-unique-name)
				  description))))
		    (setf (generator-value-values generator-value) values)
		    (setf (generator-value-description generator-value) description)
		    generator-value)))
	arg-names))))

(defun interpret-generator-list (generator-list lambda-list &optional wire)
  (declare (values full-generator-list rest-arg-name))
  (loop for g in generator-list do
    (when (listp g)
      (loop with arglist (get-arglist-from-slot g)
	    for arg in arglist do
	(unless (or (member arg lambda-list) (constantp arg))
	  (error
	    "~S depends on argument~P ~S, but ~S was not found in the lambda list: ~S"
	    (car g) (length arglist) arglist arg lambda-list)))))
  (let* ((rest-arg-name nil)
	 (full-generator-list
	   (construct-generators-from-slots
	     (append generator-list
		     ;; collect all arguments not referenced by any generator.
		     (loop with rest-arg-next = nil
			   for arg in lambda-list
			   unless (or (member arg si:lambda-list-keywords)
				      rest-arg-next
				      (loop for g in generator-list
					    thereis (member
						      arg (get-arglist-from-slot g))))
			     collect `(identity ,arg)
			   do (when rest-arg-next
				(setq rest-arg-name arg))
			      (if (eq arg '&rest)
				  (setq rest-arg-next 't)
				  (setq rest-arg-next nil))))
	     wire)))
    (values (sort-generators-by-precedence full-generator-list)
	    rest-arg-name)))

;; the description is really independent of the trigger, but for UI reasons it pays
;; to have the generator-values know about the trigger.
(defun attach-generator-description-to-trigger (description trigger)
  (loop for slot in description
	do (setf (generator-value-trigger slot) trigger)))

;; unlike most parse-xxx's, this doesn't error on invalid input.  It is intended as an 
;; internal interface, and if it fails, the caller is supposed to try again, using more
;; information.
;; It is intended mainly to provide compatibility to old style of GENERATE-DATA-AT-TRIGGER.
(defun parse-generator-function (generator-function-descriptor &optional (type 'trigger)
				 &key (recurse 't) construct)
  (or (and (typep generator-function-descriptor 'compiled-function)
	   generator-function-descriptor)
      (and (symbolp generator-function-descriptor)
	   (fdefinedp generator-function-descriptor)
	   (fdefinition generator-function-descriptor))
      (and (listp generator-function-descriptor)
	   recurse
	   (let ((l (length generator-function-descriptor)))
	     (or (and (= l 2)
		      (eq type 'metering-interval)
		      (let ((initial-f (first generator-function-descriptor))
			    (final-f  (second generator-function-descriptor)))
			(and 
			  (ignore-errors
			    (parse-generator-function initial-f type
						      :recurse nil :construct construct))
			  (ignore-errors 
			    (parse-generator-function final-f type
						      :recurse nil :construct construct))))
		      generator-function-descriptor)
		 (and construct
		      (or (= l 2) (= l 4) (= l 6) (= l 8))
		      (listp (first generator-function-descriptor))
		      (listp (second generator-function-descriptor))
		      (or (< l 3)
			  (member (third generator-function-descriptor) '(:name :type :wire)))
		      (or (< l 5)
			  (member (fifth generator-function-descriptor) '(:name :type :wire)))
		      (or (< l 7)
			  (member (seventh generator-function-descriptor)
				  '(:name :type :wire)))
		      (ignore-errors
			(apply
			  #'make-generator-function generator-function-descriptor))))))))

(defun construct-generator-function (generator-list list-of-trigger-args type
				     &key wired
				     initial-collector-arglist final-collector-arglist
				     initial-trigger-values)
  (let ((lambda-list (append list-of-trigger-args (if (member 'args list-of-trigger-args)
						      `(&rest ,(gensym))
						      '(&rest args)))))
    ;; someday soon, more heuristicating...
    (make-generator-function lambda-list generator-list
			     :type type :wire wired
			     :initial-collector-arglist initial-collector-arglist
			     :final-collector-arglist final-collector-arglist
			     :initial-trigger-values initial-trigger-values)))

