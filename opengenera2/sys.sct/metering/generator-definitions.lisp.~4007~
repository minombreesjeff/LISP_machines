;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor generator-type
	(name
	 description
	 (form-to-add nil)
	 (form-to-subtract-offset nil)
	 (form-to-compute-change nil)
	 (null-value nil)
	 (form-to-accumulate-overhead nil)
	 (presentation-type nil))
	()
  :initable-instance-variables
  (:readable-instance-variables name description presentation-type))

(defflavor generator
	(name
	 description
	 (class nil)   ; 'TIME, 'PAGING, 'CONSING, 'DISK-ACTIVITY, or NIL
	 (precedence nil)
	 (alters nil)  ; list of classes
	 (results nil)
	 (form-to-calculate nil)
	 (lambda-list nil)
	 (argument-types nil)
	 (type :integer)
	 (presentation-type nil)
	 (constantp nil)
	 (computation-type nil)
	 (wirable nil)
	 (typed-lambda-list nil)
	 (recursive-value nil)
	 (recursive-overhead-value nil)
	 (overhead-computation nil)
	 (needs-temporary-stack nil)
	 (arg-matcher #'identity))
	()
  :initable-instance-variables
  (:init-keywords :force)
  (:readable-instance-variables name description class results type presentation-type
				lambda-list argument-types constantp 
				recursive-value recursive-overhead-value needs-temporary-stack
				arg-matcher
				wirable))

(defflavor generator-value
	(generator
	 (trigger nil)
	 (args nil)
	 (description nil)
	 (values nil)
	 (top-level-keywords nil)
	 (uid-exists nil)
	 (uid nil))
	()
  :writable-instance-variables
  :initable-instance-variables)

(defflavor generator-value-instance
	((generator-value nil)
	 (name nil))
	()
  (:conc-name generator-value-)
  (:required-init-keywords :generator-value)
  :writable-instance-variables
  :initable-instance-variables)

(defflavor computable-generator-value
	((inclusive :inclusive)		; :inclusive or :exclusive
	 (overhead :no-overhead)	; :no-overhead or :overhead 
	 (report :report-value))	; :report-value or :report-overhead
	(generator-value-instance)
  (:conc-name generator-value-)
  :readable-instance-variables
  :initable-instance-variables)

(defflavor constant-generator-value
	((time :final))		; :both, :initial, or :final.
	(generator-value-instance)
  :initable-instance-variables
  (:conc-name generator-value-))

(defflavor non-computable-generator-value
	((time :final))  ; :initial or :final
	(generator-value-instance)
  (:conc-name generator-value-)
  :initable-instance-variables)

(defstruct (generator-code-description)
  (generator-value nil)
  (overhead nil)
  (overhead-name nil)
  (overhead-change nil)
  (exclusive nil)
  (exclusive-name nil)
  (exclusive-overhead nil)
  (exclusive-overhead-name nil)
  (initial nil)
  (final nil)
  (basic-name nil)
  (overhead-delta nil))

;;; a mapping between flavors and sample-instance's where we store "class variables"

(defvar *class-variables* (make-hash-table :size 10))

(defun register-flavor-class-variables (flavor-name sample-instance)
  (setf (gethash flavor-name *class-variables*) sample-instance))

(register-flavor-class-variables
  'computable-generator-value
  (make-instance 'computable-generator-value
		 :generator-value nil))

(register-flavor-class-variables
  'non-computable-generator-value
  (make-instance 'non-computable-generator-value
		 :generator-value nil))

(register-flavor-class-variables
  'constant-generator-value
  (make-instance 'constant-generator-value
		 :generator-value nil))

