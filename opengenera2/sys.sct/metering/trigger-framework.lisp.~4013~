;;; -*- Package: METERING; Base: 10; Mode: LISP; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; definition of basic-trigger is now  in metering-definitions.

(defflavor trigger
	()
	(basic-trigger))


(defflavor metering-region
	((initial-collector-description nil))
	(basic-trigger)
  (:readable-instance-variables initial-collector-description)
  (:writable-instance-variables initial-collector-description)
  (:conc-name trigger-))

(defflavor metering-interval
	()
	(metering-region)
  (:conc-name trigger-))


;; For triggers that occur during process switch, or at page fault time, or
;; any other family of restrictions that you want.
(defflavor use-with-caution-mixin
	((caution-about-generator nil)
	 (caution-about-collector nil))
	()
  (:required-flavors basic-trigger)
  :readable-instance-variables
  :writable-instance-variables
  (:conc-name trigger-)
  (:initable-instance-variables caution-about-generator caution-about-collector))

(defwhopper (set-trigger-generator use-with-caution-mixin)
	    (data-generator generator-description
			    &key override initial-collector-arglist final-collector-arglist)
  (if (or override (null caution-about-generator) (null data-generator))
      (continue-whopper data-generator generator-description
			:initial-collector-arglist initial-collector-arglist
			:final-collector-arglist final-collector-arglist)
      (error "Caution: The generator is ~A. Use :override to set generator."
	     caution-about-generator)))

(defwhopper (set-trigger-collector use-with-caution-mixin)
	    (data-collector collector-specs &key override)
  (if (or override (null caution-about-collector) (null data-collector))
      (continue-whopper data-collector collector-specs)
      (error "Caution: The collector is ~A. Use :override to set collector."
	     caution-about-collector)))

(defwhopper (set-trigger-initial-collector use-with-caution-mixin)
	    (data-collector collector-specs &key override)
  (if (or override (null caution-about-collector) (null data-collector))
      (continue-whopper data-collector collector-specs)
      (error "Caution: The collector is ~A. Use :override to set collector."
	     caution-about-collector)))

(defwhopper (set-trigger-filter1 use-with-caution-mixin) (filter &key override initial-filter)
  (if (or override (null caution-about-generator) (null filter))
      (if initial-filter
	  (continue-whopper filter :initial-filter initial-filter)
	  (continue-whopper filter))
      (error "Caution: The filter is ~A. Use :override to set filter."
	     caution-about-generator)))

(defmethod (generator-restricted? use-with-caution-mixin) ()
  caution-about-generator)

(defmethod (collector-restricted? use-with-caution-mixin) ()
  caution-about-collector)


(defflavor restricted-trigger
	()
	(use-with-caution-mixin trigger))

(defflavor restricted-metering-region
	()
	(use-with-caution-mixin metering-region))

(defflavor restricted-metering-interval
	()
	(use-with-caution-mixin metering-interval))
(defflavor restricted-control-trigger-mixin
	((control-restrictions nil)
	 (turn-control-on nil)
	 (turn-control-off nil)
	 (check-for-control-state nil)
	 (control-setup nil)
	 (control-cleanup nil)
	 (activate-control nil)
	 (deactivate-control nil))
	()
  (:required-flavors basic-trigger)
  (:readable-instance-variables control-restrictions)
  (:conc-name trigger-)
  (:initable-instance-variables control-restrictions 
	 turn-control-on turn-control-off check-for-control-state
	 control-setup control-cleanup activate-control deactivate-control))

(defmethod (set-trigger-filter1 restricted-control-trigger-mixin :before) (filter)
  (when (and filter (member :DISABLE-CHECKING control-restrictions))
    (error "Trigger ~S cannot use filter functions." self)))

(defflavor wired-trigger-mixin
	((control-variable nil))
	(restricted-control-trigger-mixin use-with-caution-mixin)
  (:required-flavors basic-trigger)
  :initable-instance-variables
  :readable-instance-variables
  (:conc-name trigger-)
  (:default-init-plist :area wired-metering-area :control-restrictions '(:DISABLE-CHECKING))
  (:required-init-keywords :control-variable))

(defmethod (make-instance wired-trigger-mixin :after) (&rest init-plist)
  (ignore init-plist)
  (setf caution-about-generator (or caution-about-generator "executed on AUX stack"))
  (setf caution-about-collector (or caution-about-collector "executed on AUX stack")))


(defflavor special-case-trigger
	()
	(restricted-control-trigger-mixin restricted-trigger))

(defflavor wired-metering-region
	()
	(wired-trigger-mixin metering-region))

(defflavor restricted-control-interval
	()
	(restricted-control-trigger-mixin metering-interval))

(defun trigger-type-of-trigger (trigger)
  (if (typep trigger 'metering-interval)
      'metering-interval
      (if (typep trigger 'metering-region)
	  'metering-region
	  'trigger)))




(defmethod (sys:print-self basic-trigger) (stream level slashify)
  (si:printing-random-object (self stream :typep :no-pointer)
    (if (eq type 'user-defined)
	(prin1 name stream)
	;; TYPE can never be a list; just as well.
	(if (and (or (symbolp name) (stringp name) (characterp name))
		 (string-equal type name))
	    (si:print-object type level slashify stream)
	    (with-stack-list (l type name)
	      (si:print-object l level slashify stream))))))

(defmethod (present-self basic-trigger) (stream)
  (if (eq type 'user-defined)
      (prin1 name stream)
      ;; TYPE can never be a list; just as well.
      (prin1 type stream)
      (princ #\space stream)
      (unless (and (or (symbolp name) (stringp name) (characterp name))
		   (string-equal type name))
	(prin1 name stream))))

