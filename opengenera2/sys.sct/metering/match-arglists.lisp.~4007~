;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun compatible-function-call (caller-name caller-arglist
				 callee-name number-of-hidden-args callee
				 &optional error-p)
  (let* ((args-info (if (numberp callee) callee (args-info callee)))
	 (min-num-args (- (ldb si:%%arg-desc-min-args args-info) number-of-hidden-args))
	 (rest-args (ldb si:%%arg-desc-rest-arg args-info))
	 (max-num-args (- (ldb si:%%arg-desc-max-args args-info) number-of-hidden-args))
	 (number-of-caller-args (length caller-arglist))
	 (compatible (if (zerop rest-args)
			 ( min-num-args number-of-caller-args max-num-args)
			 ( min-num-args number-of-caller-args))))
    (if error-p
	(if compatible
	    't
	    (let ((callee-arglist
		    (if (numberp callee)
			(if rest-args
			    (format nil "at least ~D args" min-num-args)
			    (if (= min-num-args max-num-args)
				(format nil "~D args" min-num-args)
				(format nil "between ~D and ~D args"
					min-num-args max-num-args)))
			(arglist callee))))
	      (error "Function ~A does not match ~A.  ~A uses an arglist of ~S, while ~A expects ~S"
		     caller-name callee-name
		     caller-name caller-arglist
		     callee-name callee-arglist)))
	compatible)))

;; The trigger yields the arguments in TRIGGER-ARGS.  The generator takes the arguments in
;; GENERATOR-ARGLIST.  The generator can have an &rest arguments and use :PASS-THROUGH in
;; generator-values.  This function replaces :PASS-THROUGH in generator-values with the 
;; trigger arguments that were covered by the &rest arg.
;; The optional argument, GENERATOR-DESCRIPTION, is used to provide the names of the values
;; returned by the function.  Otherwise, the names of the declared values are used.  (Since
;; this function was cached, the names will not be meaningful without GENERATOR-DESCRIPTION.)
(defun combine-generator-arglist (trigger-args generator-arglist generator-values
				  &optional generator-description &key initial
				  user-specified-arglist)
  (let* ((value-names (or user-specified-arglist
			  (loop for g in generator-description
				append (loop for val in (generator-value-values g)
					     when (or (not initial) (report-initial? val)) 
					       collect (generator-value-name val)))))
	 ;; set up so we can always have a pointer into this list.
	 (results (cons nil
			(loop for old-name in generator-values
			      for new-names = value-names then (cdr new-names)
			      as new-name = (car new-names)
			      collect (or new-name old-name)))))
    ;; :pass-through is only legal as the last value returned.
    (when (eq (car (last results)) :pass-through)
      ;; There must be a &rest arg if :pass-through is legal, so subtract them off.
      ;; generator-args is the number of trigger args that the generator *explicitly*
      ;; handles.
      (let ((generator-args (- (length generator-arglist) 2))
	    ;; get the cons cell just before :pass-through.
	    (replacement-point (loop for last-valid-arg on results
				     as rest-args = (second last-valid-arg)
				     when (eq rest-args :PASS-THROUGH)
				       do (return last-valid-arg)))
	    (n-trigger-args (length trigger-args)))
	(if (zerop generator-args)
	    ;; we pass through the entire list.
	    (setf (cdr replacement-point) (copy-list trigger-args))
	    (if (= generator-args n-trigger-args)
		;; no pass-through here, since we deal with all of them.
		(setf (cdr replacement-point) nil)
		(if (> generator-args n-trigger-args)
		    (error "Argument mismatch between trigger and generator")
		    (loop with tail
			  repeat generator-args
			  for rest on trigger-args
			  do (setq tail rest)
			  finally
			    (setf (cdr replacement-point) (copy-list (cdr tail)))))))))
    (cdr results)))
