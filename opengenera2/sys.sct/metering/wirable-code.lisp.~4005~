;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#||
Now inside sys:metering;metering-definitions.lisp, in case you were wondering.

si:(defun wire-function-for-metering (fcn)
     (let ((cca (compiled-function-cca fcn)))
       (loop for i from (defstorage-size compiled-function)
	     repeat (compiled-function-table-size cca)
	     as p = (%make-pointer-offset dtp-locative cca i) do
	 (when (%pointer-type-p (%p-data-type p))
	   (select (%p-data-type p)
	     ((dtp-nil dtp-symbol))		;Leave as constants
	     ((dtp-array))			;Probably an error message string
	     ((dtp-compiled-function)		;:INTERNAL
	      ;; avoid infinite recursion
	      (unless (eq (cdr p) fcn)
		(%p-store-contents p (wire-function-for-metering (cdr p)))))
	     ((dtp-locative)			;Symbol cell reference
	      (cond ((or (< (%p-pointer p) %wired-virtual-address-high)
			 ( (%p-pointer p) a-memory-virtual-address)))
		    ((= (%p-data-type (cdr p)) dtp-one-q-forward)
		     (%p-store-contents p (%p-contents-as-locative (cdr p))))
		    ((memq (compiler:disassemble-decode-locative (cdr p))
			   (cdr (assq 'not-wired (debugging-info fcn)))))
		    ((structure-wired-p (cddr p)))
		    (t (fsignal "Reference to unwired ~S from ~S; proceed to leave it"
				(compiler:disassemble-decode-locative (cdr p)) fcn))))
	     (otherwise
	      (unless (structure-wired-p (cdr p))
		  (fsignal "~S unknown external reference in ~S; proceed to leave it"
			   (cdr p) fcn)))))))
     (unless (structure-wired-p fcn)
       (wire-structure fcn))
     fcn)
||#

(defun make-closure-wirable-if-needed (wire func)
  (if wire
      `(if (si:lexical-closure-p ,func)
	   (let* ((env (copy-list (si:lexical-closure-environment ,func)
				  wired-metering-area))
		  (function (si:lexical-closure-function ,func))
		  (new-closure
		    (let ((zl:*default-cons-area* wired-metering-area))
		      (si:make-lexical-closure env function))))
	     (si:wire-structure env)
	     (si:wire-function-for-metering function)
	     (si:wire-structure new-closure)
	     new-closure)
	   (si:wire-function-for-metering ,func))
      func))

(defun unwire-closure (closure)
  (when (si:lexical-closure-p closure)
    (si:unwire-structure (si:lexical-closure-environment closure))
    ;; don't touch function itself.
    (si:unwire-structure closure)))
