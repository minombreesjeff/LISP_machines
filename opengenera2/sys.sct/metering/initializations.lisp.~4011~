;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; initialization lists are defined in DEFS.LISP

;; METERING-COLD-INITIALIZATIONS: builds up data structures.
;; METERING-INITIALIZATIONS: wires things, and creates controls
;; METERING-WARM-INITIALIZATIONS: (so far) just sets up the PC-METERING stuff.
;; METERING-LOAD-INITIALIZATIONS: (1) Notifies system we're loaded, (2) converts things
;; 				  that depended on *METERING-SYSTEM-IS-LOADED*.
;; METERING-ENABLE-INTIIALIZATIONS:  Things that can wait until the first time you really
;;				  enable metering.

(defun compile-metering-initializations ()
  (mapc #'si:compile-initializations
	'(*metering-initializations*
	  *metering-cold-initializations*
	  *metering-warm-initializations*
	  *metering-load-initializations*
	  *metering-enable-initializations*)))

(add-initialization 'reset-metering 
		    '(compile-metering-initializations)
		    `(:before-cold))

(si:define-gc-optimization compile-metering-initializations :layered-ids-release
  (:documentation "Compile metering initialization lists")
  (:order :first (:before si:cache-function-currency))
  (:before-flip (ignore)
    (compile-metering-initializations)))

;; until you enable metering the first time, why pay the overhead of all these
;; initializations? 
(add-initialization 'initialize-initializations
		    `(progn

 (add-initialization 'metering-initializations
		     '(initializations '*metering-cold-initializations* t)
		     `(:before-cold :first))

 (add-initialization 'metering-initializations
		     '(initializations '*metering-initializations* t)
		     `(:cold))

 (add-initialization 'metering-initializations
		     '(initializations '*metering-initializations* t)
		     '(:once))

 (add-initialization 'reset-metering
		     `(progn
			(reset-metering-utility)
			(set-page-tracing-type :rel6)
			(initializations '*metering-warm-initializations* t))
		     '(:warm))
 
 )
 ()
 '*metering-enable-initializations*)

