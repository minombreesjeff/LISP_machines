;;; -*- Mode: LISP; Base: 10; Syntax: Common-lisp; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;The name of this file is parse-extent, even though it reall means to be parse-scope.

;;Damn, what a waste.  This currently converts everything to an OR of ANDs,
;;then NOTs, then restrictions, then .... 

;; But all I really need, is a way to move ANDs and ORs outside of
;; EXTENTS and RESTRICTIONS.  Damn.  What a waste!

#||
(defun compare-rle (form &optional (expected-result form))
  (let ((result (simplify-description-of-scope form)))
    (if (equal expected-result result)
	'T
	(format t "~&Actual: ~S" result)
	NIL)))
(and 
(compare-rle '(or (and x y) (and (not x) (not y))))

(compare-rle '(not (or (not (and a b c)) (not (and d e f)))) '(and a b c d e f))
(compare-rle '(not (or (not (and a b c)) (not (and d e (or f g)))))
	     '(or (and a b c d e f) (and a b c d e f g) (and a b c d e g)))

(compare-rle '(not (and d e (or f g))) '(or (not d) (not e) (and (not f) (not g))))
(compare-rle '(or (not (and a b c)) (not (and d e (or f g))))
	     '(or (not a) (not b) (not c) (not d) (not e) (and (not f) (not g))))

(compare-rle '(or (and (:in-process (:region (or 'foo 'bar)) p)
		       :switch
		       (:process (or p q)))
		  (and (:in-process (:region 'foo) p)
		       (:process r)))
	     '(or (and (:within (:region 'foo) (:process p))
		       :switch
		       (:process p))
		  (and (:within (:region 'bar) (:process p))
		       :switch
		       (:process p))
		  (and (:within (:region 'foo) (:process p))
		       :switch
		       (:process q))
		  (and (:within (:region 'bar) (:process p))
		       :switch
		       (:process q))
		  (and (:within (:region 'foo) (:process p))
		       (:process r))))

;;; when we remove canonicalization it will be:
#||
'(or (and (or (:within (:region 'foo) (:process p))
	      (:within (:region 'bar) (:process p)))
	  :switch
	  (or (:process p) (:process q)))
     (and (:within (:region 'foo) (:process p))
	  (:process r)))
||#


(compare-rle '(or (:process p)
		  (and (:process p)
		       (:region 'foo))
		  (not (:region 'foo))
		  (and (:process q)
		       (:in-process (:region 'foo) p)))
	     '(or (:process p)
		  (not (:region 'foo))
		  (and (:process q)
		       (:within (:region 'foo) (:process p)))))

(compare-rle '(or (:process p)
		  (and (:process p)
		       (:region 'foo))
		  (:region 'foo)
		  (and (:process q)
		       (:in-process (:region 'foo) p)))
	     '(or (:process p) (:region 'foo)))

(compare-rle '(or (:process p)
		  (and (not (:process p))
		       (:region 'bar))
		  (:region 'foo)
		  (and (:process q)
		       (:in-process (:region 'foo) p)))
	     '(or (:process p) (:region 'bar) (:region 'foo)))

(compare-rle '(or (:process p)
		  (and (not (:process p))
		       (:region 'foo))
		  (not (:region 'foo))
 		  (and (:process q)
		       (:in-process (:region 'foo) p)))
	     't)

(compare-rle '(:within (:region 'foo) (or (not (:process p)) (:region 'bar)))
	     `(or (and (:region 'foo)
		       (not (:within (:region 'foo) (:process p))))
		  (:within (:region 'foo) (:region 'bar))))

)

||#

(defun simplify-description-of-scope (form)
  (simplify-logical-expression (canonicalize-scope form)))

(defvar *logical-operators* '(and or not))
(defvar *valid-restrictions*
	'(:in-process :within :within-process :within-region :within-metering-region))
(defvar *operators-allowed-outside-scope* (append *logical-operators* *valid-restrictions*))
(defvar *valid-scopes-with-expressions* '(:process :region :count :relative-count))
(defvar *valid-scopes-without-expressions* '(:always :global :switch :switch-count))
(defvar *valid-scopes* (append *valid-scopes-without-expressions*
				*valid-scopes-with-expressions*))
;;bound to 't when canonicalizing restricted subforms (like the third part of a restriction
(defvar *simple-forms-only* nil)
(defvar *canonicalizer-map* `((not . canonicalize-not-form)
			      (and . canonicalize-and-form)
			      (or . canonicalize-or-form)
			      (:count . canonicalize-count-form)
			      (:relative-count . canonicalize-count-form)))
(defvar *commutative-operators* '(and or))
(defvar *EXISTANCE-PREDICATES* `((:REGION . IDENTITY)
				 (:PROCESS . TRUE)))

(defun canonicalize-scope (form)
  (let* ((operator (when (listp form) (car form)))
	 (canonicalizer (cdr (assoc operator *canonicalizer-map*))))
    (if canonicalizer
	(funcall (fdefinition canonicalizer) form)
	(cond
	  ((member operator *valid-restrictions*)
	   (if *simple-forms-only*
	       (error "You cannot have restrictions in the restriction clause of another restriction: ~S"
		      form)
	       (canonicalize-restriction form)))
	  ((member operator *valid-scopes-with-expressions*)
	   (canonicalize-scope-internal form))
	  ((member operator *valid-scopes-without-expressions*)
	   (error "~S cannot be the car of an expression" operator))
	  ((macro-function operator)
	   (canonicalize-scope (macroexpand-1 form)))
	  (t form)))))


(defmacro reduce-logical-expression (operator form &key (reverse? 't) (destructive 't))
  `(let ((form1 (,(if destructive 'delete-duplicates 'remove-duplicates)
		 ,(if reverse? `(nreverse ,form) form)
		 :test #'equal :from-end 't)))
     (if (= (length form1) 1)
	 (car form1)
	 (cons ,operator form1))))

(defsubst negation? (form) (and (listp form) (eq (car form) 'not)))

(defmacro collapse-subform-into-form (sub-form operator form higher-operators
				      &body when-nesting-order-violated)
  `(let ((clause (canonicalize-scope ,sub-form)))
     (let ((conditional (when (listp clause) (car clause))))
       (if (eq conditional ,operator)
	   (loop for sub-clause in (cdr clause)
		 do (push sub-clause ,form))
	   (push clause ,form))
       ,@(when higher-operators
	   `((when (member conditional ,higher-operators)
	       ,@when-nesting-order-violated))))))

(defun canonicalize-or-form (form)
  (loop with new-form = nil
	for sub-form in (cdr form)
	do (collapse-subform-into-form sub-form 'or new-form nil nil)
	finally
	  (return (reduce-logical-expression 'or new-form))))

;; takes an arbitrary form whose car is AND, and canonicalizes it.
(defun canonicalize-and-form (form)
  (flet ((spread (and-clauses)
	   (let ((collection nil))
	     (labels ((turn-and-or-to-or-and (new-list unseen-list)
			(if (null unseen-list)
			    (push (reduce-logical-expression 'and new-list
							     :reverse? nil :destructive nil)
				  collection)
			    (let ((clause (car unseen-list)))
			      (if (and (listp clause) (eq (car clause) 'or))
				  (loop for sub-clause in (cdr clause)
					do (turn-and-or-to-or-and
					     (if (and (listp sub-clause)
						      (eq (car sub-clause) 'and))
						 (append (cdr sub-clause)
							 new-list)
						 (cons sub-clause new-list))
					     (cdr unseen-list)))
				  (turn-and-or-to-or-and (cons clause new-list)
							 (cdr unseen-list)))))))
	       (turn-and-or-to-or-and nil and-clauses)
	       collection))))
    (loop with new-form = nil
	  with or-seen = nil
	  for sub-form in (cdr form)
	  do (collapse-subform-into-form sub-form 'and new-form '(or)
	       (setq or-seen 't))
	  finally
	    (return (if or-seen
			(reduce-logical-expression 'or (spread new-form))
			(reduce-logical-expression 'and new-form))))))

;; takes an arbitrary form whose car is NOT, and canonicalizes it.
(defun canonicalize-not-form (form)
  (unless  (and (listp form) (= (length form) 2))
    (error "Invalid (NOT <form>): ~S" form))
  (let* ((form (canonicalize-scope (cadr form)))
	 (operator (when (listp form) (car form))))
    (macrolet ((negate-subforms (form)
		 `(loop for clause in (cdr ,form)
		       collect (if (negation? clause)
				   (cadr clause)
				   (list 'not clause)))))
      (cond ((eq operator 'not)
	     (cadr form))
	    ((eq operator 'and)
	     (cons 'or (negate-subforms form)))
	    ((eq operator 'or)
	     (canonicalize-and-form (cons 'and (negate-subforms form))))
	    (t (list 'not form))))))

(defun canonicalize-count-form (form)
  (unless (and (listp form)
	       ( 2 (length form) 3)
	       (integerp (second form))
	       (or (null (third form)) (integerp (third form))))
    (error "Invalid (:COUNT END &OPTIONAL START): ~S" form))
  (list (first form) (second form) (or (third form) 0)))

;; e.g. (:in-process (expr) p)
(defun canonicalize-restriction (form)
  (unless (= (length form) 3)
    (error "Invalid restriction form: Must be (~A <expr> <restriction>): ~S"
	       (car form) form))
  (let ((restriction-type (car form))
	(expr (canonicalize-scope (second form)))
	(restriction (third form)))
    
    ;; deal with syntactic sugar
    (let ((*simple-forms-only* 't))
      (case restriction-type
	((:in-process :within-process)
	 (setq restriction-type :within
	       restriction (canonicalize-scope (list :process restriction))))
	((:within-region :within-metering-region)
	 (setq restriction-type :within
	       restriction (canonicalize-scope (list :region restriction))))
	(otherwise
	  (setq restriction (canonicalize-scope restriction)))))
    
    (labels ((walk-list-replacing (restriction-type expr restriction)
	       (let ((expr-operator (when (listp expr) (car expr)))
		     (restriction-operator (when (listp restriction) (car restriction))))
		 (cond ((member expr-operator '(and or))
			(cons expr-operator
			      (loop for clause in (cdr expr)
				    collect (walk-list-replacing
					      restriction-type clause restriction))))
		       ((member restriction-operator '(and or))
			(cons restriction-operator
			      (loop for clause in (cdr restriction)
				    collect (walk-list-replacing
					      restriction-type expr clause))))
		       (t (if (negation? expr)
			      (let ((expr (cadr expr)))
				(if (negation? restriction)
				    (let ((restriction (cadr restriction)))
				      `(and (or ,expr ,restriction)
					    (not (,restriction-type ,expr ,restriction))))
				    `(and ,(FUNCALL (CDR (ASSOC (CAR RESTRICTION)
								*EXISTANCE-PREDICATES*))
						    RESTRICTION)
					  (not (,restriction-type ,expr ,restriction)))))
			      (if (negation? restriction)
				  (let ((restriction (cadr restriction)))
				    `(and ,expr
					  (not (,restriction-type ,expr ,restriction))))
				  (list restriction-type expr restriction))))))))
      (let ((form (walk-list-replacing restriction-type expr restriction)))
	(if (neq (car form) restriction-type)
	    (canonicalize-scope form)
	    form)))))

(defun canonicalize-scope-internal (form)
  (unless (= (length form) 2)
    (error "Invalid scope form: Must be (~A <expr>): ~S" (car form) form))
  (let ((scope (car form))
	(expr (canonicalize-scope (second form))))
    (labels ((walk-list-replacing (form scope)
	       (let ((operator (when (listp form) (car form))))
		 (if (member operator *logical-operators*)
		     (cons operator
			   (loop for clause in (cdr form)
				 collect (walk-list-replacing clause scope)))
		     (if (member operator *valid-restrictions*)
			 (list operator
			       (walk-list-replacing (canonicalize-scope (second form)) scope)
			       (third form))
			 (list scope form))))))
      (walk-list-replacing expr scope))))
  


(defun set-equal (a b)
  (and (= (length a) (length b))
       (subsetp a b :test #'equalp)))

(defun commutative-equal (a b)
  (and (listp a)
       (listp b)
       (eq (car a) (car b))
       (set-equal a b)))

(defun simplify-logical-expression (canonical-expr
				    &optional (assumption 't)
				    (truths '(t :always))
				    (falsehoods '(nil))
				    &key simple)
  (declare (values simplified-expression implications contradictions))
  (cond ((and (constantp canonical-expr)
	      (not (member canonical-expr *valid-scopes-without-expressions*)))
	 (values (not (null canonical-expr)) nil nil))
	((member canonical-expr truths :test #'equalp)
	 (values 't nil nil))
	((member canonical-expr falsehoods :test #'equalp)
	 (values nil nil nil))
	(t (if (and (not simple) (listp canonical-expr))
	       (let ((operator (car canonical-expr))
		     (clauses (cdr canonical-expr)))
		 (cond
		   ((and (member operator *commutative-operators*)
			 (member canonical-expr truths :test #'commutative-equal))
		    (values 't nil nil))
		   ((and (member operator *commutative-operators*)
			 (member canonical-expr falsehoods :test #'commutative-equal))
		    (values nil nil nil))
		   ((eq operator 'and)
		    (simplify-logical-and clauses assumption truths falsehoods))
		   ((eq operator 'or)
		    (simplify-logical-or clauses assumption truths falsehoods))
		   ((eq operator 'not)
		    (simplify-logical-not clauses assumption truths falsehoods))
		   ((member operator *valid-restrictions*)
		    (simplify-restriction operator clauses assumption truths falsehoods))
		   (t (evaluate-clause-in-context
			canonical-expr assumption truths falsehoods))))
	       (if assumption
		   (values canonical-expr (ncons canonical-expr) nil)
		   (values canonical-expr nil (ncons canonical-expr)))))))


;; You only reach here if there isn't an obvious truth value associated with this
;; clause. Otherwise you would have been caught in a higher case.
;; This is used for special case evaluation like :process, or :count.
(defun evaluate-clause-in-context (clause assumption truths falsehoods)
  (declare (values value implications contradictions))
  (ignore falsehoods)
  (let* ((is-a-list (listp clause))
	 (type-of-clause (and is-a-list (car clause)))
	 (implications nil)
	 (contradictions nil))
    (values
      (cond
	((and is-a-list
	      (eq type-of-clause :process)
	      (member :process truths :key #'(lambda (x) (and (listp x) (car x)))))
	 (values nil nil nil))
	((and is-a-list
	      (eq type-of-clause :count)
	      (or (member :count truths :key #'(lambda (x) (and (listp x) (car x))))
		  (member :count falsehoods :key #'(lambda (x) (and (listp x) (car x))))))
	 (multiple-value-bind (low-true high-true)
	     (and (member :count truths :key #'(lambda (x) (and (listp x) (car x))))
		  (loop for true-clause in truths
			when (and (listp true-clause)
				  (eq :count (car true-clause)))
			  minimize (second true-clause) into high
			  and maximize (third true-clause) into low
			finally (return (values low high))))
	   (let* ((low-bound (third clause))
		  (high-bound (second clause))
		  (clipped-low-bound (if low-true (max low-true low-bound) low-bound))
		  (clipped-high-bound (if high-true (min high-true high-bound) high-bound))
		  (false-regions
		    (loop with new-list = nil
			  for false-clause in
			      (sort (remove-if-not #'(lambda (item)
						       (and (listp item)
							    (eq (car item) :count)))
						   falsehoods)
				    #'(lambda (entry1 entry2)
					(or (< (third entry1) (third entry2))
					    (and (= (third entry1) (third entry2))
						 (> (second entry1) (second entry2))))))
			  do
		      (let ((low (third false-clause))
			    (high (second false-clause)))
			(when low-true
			  (when ( low low-true high) (setf low-true high))
			  (when ( low high-true high) (setf high-true low)))
			(when (or (null low-true)
				  ( low-true low high-true)
				  ( low-true high high-true))
			  (push (cons (if low-true (max low-true low) low)
				      (if high-true (min high-true high) high))
				new-list))
			(when ( low clipped-low-bound high)
			  (setf clipped-low-bound high))
			(when ( low clipped-high-bound high)
			  (setf clipped-high-bound low)))
		      ;; keep sorted order.
			  finally (return (nreverse new-list)))))
	     (cond ((and low-true ( low-bound low-true high-true high-bound))
		    (values t nil nil))
		   ((and low-true (or (> clipped-low-bound high-true)
				      (< clipped-high-bound low-true)))
		    (values nil nil nil))
		   ((loop for false-region in false-regions
			  thereis ( (car false-region) clipped-low-bound
				     clipped-high-bound (cdr false-region)))
		    (values nil nil nil))
		   (t (let ((new-clause (list :count clipped-high-bound clipped-low-bound)))
			(setf implications (when assumption (ncons new-clause)))
			(setf contradictions (unless assumption (ncons new-clause)))
			(when (and (not (zerop clipped-low-bound))
				   (if low-true
				       ( clipped-low-bound low-true)
				       (and (= (caar false-regions) 0)
					    ( clipped-low-bound (cdar false-regions)))))
			  (setf new-clause (list :count clipped-high-bound 0)))
			new-clause))))))
	((and is-a-list
	      (eq type-of-clause :relative-count)
	      (or (eq t (evaluate-clause-in-context
			  (list :count (third clause) 0) assumption truths falsehoods))
		  (null (evaluate-clause-in-context
			  (list :count (second clause) 0) assumption truths falsehoods))))
	 (values nil nil nil))
	(t (setq implications (when assumption (ncons clause)))
	   (setq contradictions (unless assumption (ncons clause)))
	   clause))
      implications
      contradictions)))

(defun simplify-logical-not (clauses &optional assumption true-clauses false-clauses)
  (declare (values simplified-expression implications contradictions))
  (multiple-value-bind (simple-expr new-truths new-falsehoods)
      (simplify-logical-expression (car clauses) (not assumption) true-clauses false-clauses)
    (cond ((eq simple-expr 't)
	   (values nil nil nil))
	  ((eq simple-expr nil)
	   (values 't nil nil))
	  ((and (listp simple-expr) (eq (car simple-expr) 'not))
	   (values (cadr simple-expr) true-clauses false-clauses))
	  (t (if assumption
		 (values (list 'not simple-expr)
			 new-truths
			 (cons simple-expr new-falsehoods))
		 (values (list 'not simple-expr)
			 (cons simple-expr new-truths)
			 new-falsehoods))))))
 
(defun simplify-logical-or (clauses &optional assumption true-clauses false-clauses)
  (declare (values simplified-expression implications contradictions))
  (loop with expr
	with new-true-clauses
	with new-false-clauses
	for clause in clauses
	do (multiple-value-bind (value new-truths new-falsehoods)
	       (simplify-logical-expression clause nil
					    (append new-true-clauses true-clauses)
					    (append new-false-clauses false-clauses))
	     ;; if clause is true, the whole OR is true.
	     (when (or (eq value 't) (eq value :both))
	       (setq expr 't)
	       (loop-finish))
	     ;; if clause is false, just skip it.  Don't need to ever evaluate it.
	     (when value (push value expr))
	     (setq new-true-clauses (append new-truths new-true-clauses))
	     (setq new-false-clauses (append new-falsehoods new-false-clauses)))
	finally (let ((simple-or (cond ((eq expr 't) 't)
				       ((null expr) nil)
				       ((= (length expr) 1) (car expr))
				       ('t (cons 'or (reverse expr))))))
		  (return
		    (if assumption
			(values simple-or (ncons simple-or) nil)
			(values simple-or
				new-true-clauses
				(cons simple-or new-false-clauses)))))))

(defun simplify-logical-and (clauses &optional assumption true-clauses false-clauses)
  (declare (values simplified-expression implications contradictions))
  (loop with new-clauses
	with new-true-clauses
	with new-false-clauses
	for clause in clauses
	do (multiple-value-bind (value new-truths new-falsehoods)
	       (simplify-logical-expression clause 't
					    (append new-true-clauses true-clauses)
					    (append new-false-clauses false-clauses))
	     (when (null value)
	       (setq new-clauses :false)
	       (loop-finish))
	     (unless (or (eq value 't) (eq value :both))
	       (push value new-clauses))
	     (setq new-true-clauses (append new-truths new-true-clauses))
	     (setq new-false-clauses (append new-falsehoods new-false-clauses)))
	   
	finally (let ((simple-and (cond ((eq new-clauses :false) nil)
					((null new-clauses) 't)
					((= (length new-clauses) 1) (car new-clauses))
					(t (cons 'and (reverse new-clauses))))))
		  (return
		    (if assumption
			(values simple-and
				(cons simple-and new-true-clauses)
				new-false-clauses)
			(values simple-and nil (ncons simple-and)))))))

(defun simplify-restriction (operator clauses &optional assumption true-clauses false-clauses)
  (declare (values simplified-expression implications contradictions))
  (let* ((clause (first clauses))
	 (restriction (second clauses))
	 (self-evaluation
	   (simplify-logical-expression clause assumption `(t :always ,restriction) '(nil))))
    (cond #||
	  ((eq self-evaluation 't)
	   ;; the restriction implies the clause, so we only have to check the restriction
	   (simplify-logical-expression restriction assumption true-clauses false-clauses))
	  ||#
	  ((eq self-evaluation nil)
	   ;; self contradictory, can never be true.
	   (values nil nil nil))
	  ((eq (simplify-logical-expression
		 restriction assumption `(t :always ,clause) '(nil))
	       't)
	   ;; the clause implies the restriction, so we only have to check the clause.
	   (simplify-logical-expression clause assumption true-clauses false-clauses))
	  ((null (simplify-logical-expression clause assumption true-clauses false-clauses))
	   ;; If the clause is false, a restriction can't make it true.
	   (values nil nil nil))
	  (t (multiple-value-bind (simple-expr new-truths new-falsehoods)
		 (simplify-logical-expression
		   (cons operator clauses) assumption true-clauses false-clauses :simple 't)
	       (when (and assumption
			  (neq (simplify-logical-expression
				 clause assumption
				 (append new-truths true-clauses)
				 (append new-falsehoods false-clauses))
			       't))
		 (push clause new-truths))
	       (values simple-expr new-truths new-falsehoods))))))
    
;;; syntactic sugar

(defmacro in-function (function-spec &optional (process (si:process-name si:current-process)))
  `(and (:process ,process)
	(:within (:region #',function-spec) (:process ,process))))

(defmacro restrict-scope-to-process
	  (scope &optional (process (si:process-name si:current-process)))
  `(and (:process ,process)
	(:within ,scope (:process ,process))))

(defmacro once (scope)
  `(and ,scope (:relative-count 0 0)))

(defmacro try-once (scope)
  `(and (:count 0 0) ,scope))

