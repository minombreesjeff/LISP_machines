;;; -*- Mode: LISP; Base: 10; Package: METERING; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *control-restrictions*
	`((:disable-checking "check arbitrary lisp code every time it is metered.")))

(defun explain-control-restriction (restriction)
  (second (find restriction *control-restrictions* :key #'first)))

;; This sets the scope and extent of the specified control

;; (the way to completely reset a control is to (SET-SCOPE SELF NIL))
(defmethod (set-scope basic-control) (scope-and-extent)
  (unless (and scope-and-extent (equal scope scope-and-extent))
    (let ((old-scope scope))
      (clear-scope self)
      (multiple-value-bind (function needed-processes depends-on-user-code)
	  (generate-code-for-control scope-and-extent self)
	(when (and depends-on-user-code
		   (loop for restriction in restrictions
			 thereis (eq (second restriction) :disable-checking)))
	  (clear-scope self)
	  (error "A trigger, ~S, controlled by ~A, cannot check arbitrary lisp code every time it is metered."
		 (loop for restriction in restrictions do
		   (when (eq (second restriction)
			     :disable-checking)
		     (return (car restriction))))
		 name))
	(when (not (eql (not (null old-scope)) (not (null scope-and-extent))))
	  ;; run deactivate actions.
	  (if scope-and-extent
	      (loop for actions in special-actions
		    as activate = (special-action-activate actions) do
		(when activate (funcall activate)))
	      (loop for actions in special-actions
		    as deactivate = (special-action-deactivate actions) do
		(when deactivate (funcall deactivate)))))
	(setf testing-function function)
	(setf scope (copy-tree scope-and-extent))
	(setf processes needed-processes)
	(loop for process in needed-processes do
	  (add-metered-process process self)))
      (enable-metering self scl:*current-process*)
      (not (null state)))))

(defmethod (set-scope per-process-control-mixin) (scope-and-extent)
  (unless (and scope-and-extent (equal scope scope-and-extent))
    (let ((old-scope scope))
      (clear-scope self)
      (multiple-value-bind (function needed-processes depends-on-user-code)
	  (generate-code-for-control scope-and-extent self :code-for-per-process 't)
	(when (and depends-on-user-code
		   (loop for restriction in restrictions
			 thereis (eq (second restriction) :disable-checking)))
	  (clear-scope self)
	  (error "A trigger, ~S, controlled by ~A, cannot check arbitrary lisp code every time it is metered."
		 (loop for restriction in restrictions do
		   (when (eq (second restriction)
			     :disable-checking)
		     (return (car restriction))))
		 name))
	(when (not (eql (not (null old-scope)) (not (null scope-and-extent))))
	  ;; run deactivate actions.
	  (if scope-and-extent
	      (loop for actions in special-actions
		    as activate = (special-action-activate actions) do
		(when activate (funcall activate)))
	      (loop for actions in special-actions
		    as deactivate = (special-action-deactivate actions) do
		(when deactivate (funcall deactivate)))))
	(setf testing-function function)
	(setf scope (copy-tree scope-and-extent))
	(setf processes needed-processes))
      (setf per-process-state (copy-list (loop for p in processes collect (cons p nil))))
      #||
      ;; known to be done in whopper.  We need to wait, because the per-process-actions
      ;; have to be done before we can enable metering in these processes.
      (enable-metering self *current-process*)
      ||#
      (not (null state)))))
;; This probably wants to be seperated out of the per-process-control mixin.
;; The per-process-bindings-mixin?  Who knows..  anyway I've left it as a whopper rather than
;; folding it into the method so that it will be easy to move to another flavor later.
(defwhopper (set-scope per-process-control-mixin) (scope-and-extent)
  (unless (and scope-and-extent (equal scope scope-and-extent))
    (let ((old-processes processes)
	  (old-special-actions per-process-actions))
      (continue-whopper scope-and-extent)
      (loop for p in old-processes
	    do (unless (member p processes)
		 (remove-metered-process p self)
		 (loop for action in old-special-actions
		       do (funcall (third action) p))))
      (loop for p in processes
	    do (unless (member p old-processes)
		 (unless (and (not (process-simple-p p))
			      (process-stack-group p))
		   (add-metered-process p self))
		 (loop for action in per-process-actions
		       do (funcall (second action) p))))
      ;; OK.  Now it is safe.
      (enable-metering self *current-process*)
      (not (null state)))))
;;
(defmethod (set-scope process-switch-control) (scope-and-extent)
  (unless (and scope-and-extent (equal scope scope-and-extent))
    (let ((old-scope scope))
      (clear-scope self)
      (multiple-value-bind (function needed-processes)
	  (generate-code-for-control scope-and-extent self :code-for-process-switch 't)
	(when (not (eql (not (null old-scope)) (not (null scope-and-extent))))
	  ;; run deactivate actions.
	  (if scope-and-extent
	      (loop for actions in special-actions
		    as activate = (special-action-activate actions) do
		(when activate (funcall activate)))
	      (loop for actions in special-actions
		    as deactivate = (special-action-deactivate actions) do
		(when deactivate (funcall deactivate)))))
	(setf testing-function function)
	(enable-metering self nil)
	(setf scope (copy-tree scope-and-extent))
	(setf processes needed-processes)
	(loop for process in needed-processes do
	  (setf (process::trigger-metering-on-process-switch process) 1))))))



;; Here is the way a trigger asks its control if it is OK to meter *now*. 

(defmethod (metering-enabled? basic-control) (&rest ignore)
  ;; we assume that the following is done in-line:
  #||
  (let ((state (control-state ctl)))
    (or (eq state 't)
	(and state (metering-enabled? ctl))))
  ||#
  ;; we know state is not 't or nil.  For basic-control that means it must be :check.
  (not (null (funcall testing-function *current-process* 't))))

(defmethod (metering-enabled? process-switch-control) (&rest procs)
  ;; we assume that the in-line stuff is the same as above. (except we also check the
  ;; bits in the process-metering-flags to see if we even need to call this guy.
  (not (null (funcall testing-function (if (equal procs '(nil)) nil procs) 't))))
  
(defmethod (metering-enabled? per-process-control-mixin) (&rest ignore)
  ;; state has a different meaning in per-process.  T means on for all process, nil means
  ;; off for all processes, :check means check for all processes. :process means it
  ;; depends on which process, so we do that first.
  (if (eq state :process)
      (let* ((proc *current-process*)
	     (pstate (state-in-process proc)))
	(or (eq pstate 't)
	    (and pstate (not (null (funcall testing-function proc 't))))))
      ;; state must be :check
      (not (null (funcall testing-function *current-process* 't)))))
  


;;;;
;; User says "turn on" and "turn off".  This has to be fed in to the scope and extent
;; specification previously established.
;;;;

; user switch for this control
(defmethod (switch-on basic-control) ()
  (when switch
    (enter-region switch)))

; user switch for this control
(defmethod (switch-off basic-control) (&optional all)
  (when switch
    (when all
      ;;;    (si:with-process-lock ((locf (region-lock switch)) "metering region lock")
      ;;; kill previous line because of simple-process screw.
      (si:without-interrupts
	(when (plusp (region-count switch))
	  (setf (region-count switch) 1))))
    (exit-region switch)))

;;;;
;; We've entered (or exited) a metering region that affects this control.  See if it
;; changed the state of the control
;;;;

(defun enter-region (region)
  (if region
      (progn
	(loop for restriction in (region-restrictions region) do
	  (when (and (let ((proc (region-within-process restriction)))
		       (or (null proc)
			   (eql *current-process* proc)))
		     (let ((reg (region-within-region restriction)))
		       (or (null reg)
			   (plusp (region-count reg))))
		     (incf-region-count restriction))
	    (loop for switch in (region-controls restriction)
		  do (enable-metering switch *current-process*))))
	(when (incf-region-count region)
	  (loop for switch in (region-controls region)
		do (enable-metering switch *current-process*))))
      (when *metering-enabled*
	(let ((*metering-enabled* nil))
	  (cerror "Proceed without special action"
		  "Null region entered.  This is a bug in the metering system.  Please report this bug.")))))

(defun exit-region (region)
  (if region
      (progn
	(loop for restriction in (region-restrictions region) do
	  (when (and (let ((proc (region-within-process restriction)))
		       (or (null proc)
			   (eql *current-process* proc)))
		     (let ((reg (region-within-region restriction)))
		       (or (null reg)
			   (plusp (region-count reg))))
		     (decf-region-count restriction))
	    (loop for switch in (region-controls restriction)
		  do (enable-metering switch *current-process*))))
	(when (decf-region-count region)
	  (loop for switch in (region-controls region)
		do (enable-metering switch *current-process*))))
      (when *metering-enabled*
	(let ((*metering-enabled* nil))
	  (cerror "Proceed without special action"
		  "Null region exited.  This is a bug in the metering system.  Please report this bug.")))))

;;;;
;; The hooks for the scheduler to see if the state has changed because of a process switch.
;;;;

(defmethod (enter-process basic-control) (process)
  (enable-metering self process))

(defmethod (exit-process basic-control) (process)
  (ignore process)
  (enable-metering self nil))

;;; GC hook next.


;; used by trigger code.  On our end (the CONTROL), this is mainly for bookkeeping and 
;; display.  CONTROLs, despite their name, are passive objects, and don't check to make
;; sure a trigger is a client or not.  A control is fickle, and promiscuous.  It will
;; disclose its state to anyone who asks.

(defsubst special-action-turn-on (actions) (second actions))
(defsubst special-action-turn-off (actions) (third actions))
(defsubst special-action-check (actions) (fourth actions))
(defsubst special-action-activate (actions) (fifth actions))
(defsubst special-action-deactivate (actions) (sixth actions))

(defmethod (add-trigger-to-control basic-control)
	   (trigger &optional restriction-list turn-on-action turn-off-action check-action
		    ignore ignore activate-action deactivate-action)
  (pushnew trigger triggers)
  (loop for restriction in restriction-list
	do (push (list trigger restriction) restrictions))
  (when (or turn-on-action turn-off-action check-action activate-action deactivate-action)
    (push (list trigger
		(or turn-on-action #'ignore)
		(or turn-off-action #'ignore)
		(or check-action #'ignore)
		(or activate-action #'ignore)
		(or deactivate-action #'ignore))
	  special-actions)
    ;; the following is a misguided attempt to optimize speed in access of these lists.
    ;; this is the wrong way to do it, but it is a good *superstitious* thing to do.
    (setf special-actions (copy-tree special-actions))))


(defmethod (add-trigger-to-control per-process-control-mixin :after)
	   (trigger &optional restriction-list turn-on-action turn-off-action check-action
		    setup-action cleanup-action activate-action deactivate-action)
  (ignore restriction-list turn-on-action turn-off-action check-action activate-action deactivate-action)
  (when (or setup-action cleanup-action)
    (push (list trigger
		(or setup-action #'ignore)
		(or cleanup-action #'ignore))
	  per-process-actions)
    (when setup-action
      (loop for p in processes
	    do (funcall setup-action p)))))


(defmethod (controls-trigger? basic-control) (trigger)
  (not (null (member trigger triggers))))

(defmethod (remove-trigger-from-control basic-control) (trigger)
  (setf triggers (delete trigger triggers))
  (setf restrictions (delete trigger restrictions :key #'car))
  (let ((action (find trigger special-actions :key #'car)))
    (when action
      (funcall (third action) 't)
      (setf special-actions (copy-tree (delete action special-actions)))))
  (unless (or keep triggers)
    (set-scope self nil)))

(defmethod (remove-trigger-from-control per-process-control-mixin) (trigger)
  (setf triggers (delete trigger triggers))
  (setf restrictions (delete trigger restrictions :key #'car))
  (let ((action (find trigger special-actions :key #'car)))
    (when action
      (loop for process in processes
	    do (funcall (third action) process))
      (setf special-actions (delete action special-actions))))
  (let ((action (find trigger per-process-actions :key #'car)))
    (when action
      (loop for process in processes
	    do (funcall (third action) process))
      (setf per-process-actions (delete action per-process-actions))))
  (unless (or keep triggers)
    (set-scope self nil)))



(defmethod (clear-scope basic-control) ()
  (setf testing-function #'false)
  (enable-metering self nil)
  (loop for region in regions do (remove-active-region region self))
  (setf regions nil)
  (setf scope nil)
  (setf state nil)
  (without-interrupts
    (loop for process in processes do (remove-metered-process process self))
    (setf processes nil)))

(defmethod (clear-scope per-process-control-mixin) ()
  (setf testing-function #'false)
  (enable-metering self nil)
  (loop for region in regions do (remove-active-region region self))
  (setf regions nil)
  (setf scope nil)
  (setf state nil)
  (without-interrupts
    (loop for p in processes do (remove-metered-process p self))
    (setf processes nil)))

(defmethod (clear-scope process-switch-control) ()
  (setf testing-function #'false)
  (enable-metering self nil)
  (loop for region in regions do (remove-active-region region self))
  (setf regions nil)
  (setf scope nil)
  (setf state nil)
  (without-interrupts
    (loop for process in processes do
      (setf (process::trigger-metering-on-process-switch process) 0))
    (setf processes nil)))

;; an internal method called by enter region and ilk.

(defmethod (enable-metering basic-control) (process)
  (multiple-value-bind (value needs-to-check)
      (funcall testing-function process nil)
    (without-interrupts
      (if needs-to-check
	  (progn
	    (loop for action in special-actions
		  do (funcall (fourth action) process value))
	    (setq state ':check))
	  (progn
	    (if value
		(when (null state) 
		  (loop for action in special-actions
			do (funcall (second action) process)))
		(unless (null state)
		  (loop for action in special-actions
			do (funcall (third action) process))))
	    (setq state (not (null value))))))))

(defmethod (enable-metering per-process-control-mixin) (p)
  ;; needless to say, we assume that the number of processes will be small.
  (multiple-value-bind (value needs-to-check depends-on-process)
      (funcall testing-function nil nil)
    (let ((new-state (if needs-to-check ':check (not (null value)))))
      (if depends-on-process
	  (progn
	    ;; see discussion of race condition below.
	    (setf state :process)
	    (loop for process in processes
		  as sg = (process-stack-group process) do
	      (if (and sg (zl:typep sg :stack-group))
		  (multiple-value-bind (value needs-to-check)
		      (funcall testing-function process nil)
		    (without-interrupts
		      (let ((old-pstate (state-in-process process))
			    (pstate-cell (per-process-state-cell process)))
			(if needs-to-check
			    (unless (eq old-pstate :check)
			      (loop for action in special-actions
				    do (funcall (fourth action) process value)))
			    (if value
				(when (null old-pstate)
				  (loop for action in special-actions
					do (funcall (second action) process)))
				(unless (null old-pstate)
				  (loop for action in special-actions
					do (funcall (third action) process)))))
			(let ((new-pstate (if needs-to-check ':check (not (null value)))))
			  (setf (cdr pstate-cell) new-pstate)
			  (unless (eq new-state new-pstate)
			    (setf new-state :process))))))
		  ;; If there's no stack, then metering can't be turned on.
		  (without-interrupts
		    (setf (cdr (per-process-state-cell process)) nil)
		    (unless (eq new-state nil) (setf new-state :process)))))
	    (when (and new-state
		       (null p)
		       process::*in-process-dispatcher*
		       (process-simple-p process::%real-current-process)
		       (member process::%real-current-process processes))
	      ;; in the scheduler, but losing our stack-group
	      (loop for action in special-actions do
		;; %%real-current-process had better be pointing to the %current-stack-group.
		(funcall (third action) process::%real-current-process))
	      (setf (cdr (per-process-state-cell process::%real-current-process)) nil))
	    (setf state new-state))
	  (let ((real-new-state new-state))
	    (unless (eq state new-state)
	      ;; We have to be careful here that metering traps or
	      ;; functions don't see inconsistent state.  We set the
	      ;; global state of the control to :PROCESS, because we
	      ;; can't atomically change all the process states, and
	      ;; they *must* reflect the actual state of metering.  One
	      ;; tricky thing happens here: when we set the per-process
	      ;; state to 'T, we do so before calling the special
	      ;; action, but when we set the pstate to NIL, we do it
	      ;; *after* the special action.  This is because if a
	      ;; metering trap sees that metering should be disabled, it
	      ;; might shut itself off, so it needs a positive state.
	      ;; When we are shutting off metering, if we get a trap
	      ;; *WHILE* we are shutting it, we don't want the trap
	      ;; handler to complain "I shouldn't be going off" until we
	      ;; actually shut it down, so we wait until the
	      ;; metering-point is *really* disabled.
	      (setf state :process)
	      (loop for process in processes 
		    as sg = (process-stack-group process) do
		(if (and sg (zl:typep sg :stack-group))
		    (without-interrupts
		      (let ((old-pstate (state-in-process process)))
			(cond 
			  ((eq :check new-state)
			   (cond
			     ((eq :check old-pstate))
			     ((null old-pstate)
			      (setf (cdr (per-process-state-cell process)) :check)
			      (loop for action in special-actions
				    do (funcall (fourth action) process value)))
			     (t (loop for action in special-actions
				      do (funcall (fourth action) process value))
				(setf (cdr (per-process-state-cell process)) :check))))
			  (new-state
			   (unless (eq 't old-pstate)
			     (setf (cdr (per-process-state-cell process)) new-state)
			     (loop for action in special-actions
				   do (funcall (second action) process))))
			  ((null new-state)
			   (unless (null old-pstate)
			     (loop for action in special-actions
				   do (funcall (third action) process))
			     (setf (cdr (per-process-state-cell process)) nil))))))
		    (without-interrupts
		      (unless (null new-state) (setf real-new-state :process))
		      (setf (cdr (per-process-state-cell process)) nil)))))
	    (when (and new-state
		       (null p)
		       process::*in-process-dispatcher*
		       (process-simple-p process::%real-current-process)
		       (member process::%real-current-process processes))
	      ;; in the scheduler, but losing our stack-group
	      (loop for action in special-actions do
		;; %%real-current-process had better be pointing to the %current-stack-group.
		(funcall (third action) process::%real-current-process))
	      (setf (cdr (per-process-state-cell process::%real-current-process)) nil))
	    (setf state real-new-state))))))

(defmethod (enable-metering process-switch-control) (process)
  (multiple-value-bind (value needs-to-check)
      (funcall testing-function nil nil)
    (without-interrupts
      (if needs-to-check
	  (progn
	    (loop for action in special-actions
		  do (funcall (fourth action) process value))
	    (setq state ':check))
	  (if value
	      (when (null state) 
		(loop for action in special-actions
		      do (funcall (second action) process)))
	      (unless (null state)
		(loop for action in special-actions
		      do (funcall (third action) process)))
	      (setq state (not (null value))))))))

;; since we know this can be optimized to the following function, why don't we???
#||
(defmethod (enable-metering process-switch-control) (ignore)
  (multiple-value-bind (value needs-to-check)
      (funcall testing-function nil nil)
    (setq state (if needs-to-check ':check (not (null value))))))
||#

(add-initialization 'default-control
		    '(make-instance 'basic-control :name 'default-control :keep 't)
		    ()
		    '*metering-initializations*)

#||
(make-instance 'basic-control :name 'default-control :keep 't)
||#
