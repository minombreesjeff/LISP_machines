;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *setup-page-tracing* nil)

(add-initialization 'setup-page-trace-array
		    '(setq *setup-page-tracing*
			   (let ((array
				   (or *setup-page-tracing*
				       (make-array 10
						   :leader-length 2
						   :area wired-metering-area))))
			     (si:wire-structure array)
			     array))
		    ()
		    '*metering-initializations*)
(defun set-page-tracing-type (type)
  (ecase type
    ((:rel6 :dang :trace)
     (when metering:*new-page-fault-metering*
       (si:page-trace nil)
       (setf metering:*new-page-fault-metering* nil)))
    ((:rel7 :metering)
     (setq si:*page-trace-in-progress* 0)
     (si:page-trace *setup-page-tracing*)
     (setf metering:*new-page-fault-metering* 't))))

(defun turn-on-page-fault-metering (ignore)
   (setq si:*enable-metering-on-page-fault* 't))

(defun turn-off-page-fault-metering (ignore)
   (setq si:*enable-metering-on-page-fault* nil))

(defflavor page-fault-trigger
	()
	(wired-trigger-mixin restricted-trigger)
  (:area-keyword :area)
  (:default-init-plist
   :area wired-metering-area
   :type 'page-fault
   :control-variable 'si:*enable-metering-on-page-fault*
   :turn-control-on #'turn-on-page-fault-metering
   :turn-control-off #'turn-off-page-fault-metering
   :caution-about-generator "executed on AUX stack"
   :caution-about-collector "executed on AUX stack"))

(defmethod (make-instance page-fault-trigger) (&rest init-options)
  (ignore init-options)
  (si:wire-structure self))

(add-initialization 'make-page-fault-trigger
		    '(if si:*page-fault-metering-trigger*
			 (si:wire-structure si:*page-fault-metering-trigger*)
			 (register-triggering-event
			   'si:page-fault
			   'si:*page-fault-metering-trigger*
			   (make-instance 'page-fault-trigger
					  :name "Page Fault"
					  ;;; triggers a metering event whenever 
					  :description "any page fault occurs"
					  :variable-name 'si:*page-fault-metering-trigger*
					  :values '(si:trace-type si:vma)
					  :value-types `(metering-pf-type metering-vma))))
		    ()
		    '*metering-initializations*)

(add-initialization 'make-page-fault-end-trigger
		    '(if si:*page-fault-end-metering-trigger*
			 (si:wire-structure si:*page-fault-end-metering-trigger*)
			 (register-triggering-event
			   'si:page-fault-end
			   'si:*page-fault-end-metering-trigger*
			   (make-instance 'page-fault-trigger
					  :name "Page Fault End"
					  ;;; triggers a metering event whenever 
					  :description "a page fault is completed"
					  :variable-name 'si:*page-fault-end-metering-trigger*
					  :values '(si:starting-time si:faulting-pc)
					  :value-types '(metering-microseconds metering-pc))))
		    ()
		    '*metering-initializations*)

(defvar *page-fault-control* (make-instance 'basic-control :name "Page Fault" :keep t))

(add-initialization "control page-fault trigger"
		    '(unless (trigger-control si:*page-fault-metering-trigger*)
		       (control-trigger *page-fault-control* 'si:page-fault))
		    ()
		    '*metering-initializations*)

(add-initialization "control page-fault-end trigger"
		    '(unless (trigger-control si:*page-fault-end-metering-trigger*)
		       (control-trigger *page-fault-control* 'si:page-fault-end))
		    ()
		    '*metering-initializations*)

