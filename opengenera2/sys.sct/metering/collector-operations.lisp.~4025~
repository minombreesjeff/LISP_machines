;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmethod (get-form-to-collect-data basic-collector-type) (instance &key args for-value)
  (get-form-to-collect-data
    (or sample-instance
	(setf sample-instance
	      (if (subtypep name 'complex-collector-mixin)
		  (make-data-collector name :component-description nil)
		  (make-data-collector name))))
    instance :args args :for-value for-value))

(defmethod (get-form-to-collect-wired-data basic-collector-type)
	   (instance &key args for-value)
  (get-form-to-collect-wired-data
    (or sample-instance
	(setf sample-instance 
	      (if (subtypep name 'complex-collector-mixin)
		  (make-data-collector name :component-description nil)
		  (make-data-collector name))))
    instance :args args :for-value for-value))

(defmethod (hierarchical-p basic-collector-type) ()
  (subtypep name 'complex-collector-mixin))

(defmethod (hierarchical-p basic-collector) ()
  (typep self 'complex-collector-mixin))

(defmethod (get-form-to-collect-data basic-collector) (instance &key args for-value)
  (declare (values form instance bindings))
  (if for-value
      (error "Don't know how to generate a form for value, on a basic collector.")
      (if (eq instance ':constant)
	  (let ((instance-name (gensym)))
	    (values `(collect-data ,instance-name ,@args) instance-name nil))
	  (values `(collect-data ,instance ,@args) nil nil))))
(defmethod (get-data-components complex-collector-mixin) (&rest keys)
  (apply #'collect-data-for-value self keys))
(defmethod (reset basic-collector) ())
(defmethod (complete-data-p basic-collector) () nil)
(defmethod (collector-empty-p basic-collector) () nil)
(defmethod (collector-empty-p complex-collector-mixin) () (zerop (ncomponents self)))
(defmethod (compact-results basic-collector) () self)
(defmethod (compact-results-description basic-collector) () 'self)
(defmethod (display basic-collector) (&optional (stream *standard-output*) &key label)
  (ignore stream label))
(define-presentation-type metering-results (() &key (description-p t))
   :printer ((object stream)
	     (let ((descript (compact-results-description object)))
	       (if (eq descript 'self)
		   (princ object stream)
		   (if description-p
		       (format stream "~A: ~S" descript (compact-results object))
		       (format stream "~S" (compact-results object)))))))

(define-presentation-action display-metering-results
   (metering-results t
     :documentation "Display expanded metering results"
     :gesture :describe
     :priority 100
     :context-independent 't)
   (mr &key window)
  (si:with-ie-typeout-if-appropriate (window)
    (display mr window)))

(defvar *infinite-component-description* (circular-list nil))

(defun decompose-components (component-block function &optional component-description)
  (declare (sys:downward-funarg function))
  (when component-block
    (if (arrayp component-block)
	(loop for component being the array-elements of component-block
	      for description in (or component-description *infinite-component-description*)
	      do
	  (funcall function component description))
	(funcall function component-block (car component-description)))))

(defun decompose-component-description (collector function &optional component-description)
  (declare (sys:downward-funarg function))
  (unless (or (typep collector 'instantiated-complex-collector-mixin)
	      (and component-description (typep collector 'complex-collector-mixin)))
    (error "~S must be a hierarchical collector" collector))
  (when (and component-description
	     (typep collector 'instantiated-complex-collector-mixin)
	     (not (equal component-description (collector-component-description collector))))
    (cerror "Component-Description ~S does not match the description from collector ~S, (~S)"
	    "Use description from collector"
	    component-description collector (collector-component-description collector))
    (setf component-description nil))
  (loop for description in (or component-description
			       (collector-component-description collector)) do
    (funcall function (first description) (second description))))

(defsubst collector-components-size (components)
  (if components
      (if (arrayp components)
	  (length components)
	  1)
      0))

(defun get-entries-from-components (components function)
  (declare (sys:downward-funarg function))
  (decompose-components
    components
    #'(lambda (component ignore)
	(get-entries component function))))

;; internal function used by other routines to display the components of a collector
;; with format controlled by FORMAT, and otherwise using defaults gotten from DESCRIPTION.
(defun display-components (stream components description format)
  (flet ((output (descendant stream slot &optional entry-format)
	   (if (and format entry-format (or (listp format) (functionp format)))
	       (dw:with-output-as-presentation (:single-box 't
						:stream stream
						:object descendant
						:type 'metering-results)
		 (if (functionp format)
		     (funcall format descendant stream (third slot))
		     (let ((outputter (second entry-format)))
		       (if (stringp outputter)
			   (apply #'format stream outputter
				  (loop for fun in (cddr entry-format)
					collect (funcall fun descendant)))
			   (funcall outputter stream descendant)))))
	       (progn
		 (when entry-format
		   (cerror "Ignore format, and output default summary"
			   "Invalid FORMAT (~S) passed to DISPLAY-COMPONENTS"
			   entry-format))
		 (if (eq (compact-results-description descendant) 'self)
		     (display-short-form descendant stream :label slot)
		     (format stream "~A: ~@\\presentation\\ "
			     (car slot) descendant 'metering-results))))))
    (if (and format (listp format) (not (functionp format)))
	(loop for component in format
	      do (output (get-component-from-components
			   (first component) components description)
			 stream
			 (find-slot-in-component-description
			   (first component) description)
			 component))
	(decompose-components components
			      #'(lambda (component slot)
				  (output component stream slot format))
			      description))))


(defmethod (display complex-collector-mixin) (&optional (stream *standard-output*) &key label)
  (format stream "~&")
  (when (if (listp label) (car label) label)
    (format stream "~A:" (if (listp label) (car label) label)))
  (map-over-component-collectors
    self
    #'(lambda (key components)
	(when key
	  (format stream "~&~\\presentation\\ ==> " key))
	(sys:with-indentation (stream 4)
	  (decompose-components
	    components
	    #'(lambda (component slot-description)
		(if (eq (compact-results-description component) 'self)
		    (display-short-form component stream :label slot-description)
		    (format stream "~A: ~@\\presentation\\ "
			    (car slot-description) component 'metering-results)))
	    (third label)))))
  (map-over-descendant-collectors
    self
    #'(lambda (key descendant)
	(unless (eq descendant self)
	  (when key
	    (format stream "~&~\\presentation\\ ==> " key))
	  (sys:with-indentation (stream 4)
	    (display-short-form descendant stream :label label))))))
(defwhopper (display instantiated-complex-collector-mixin)
	    (&optional (stream *standard-output*) &key label)
  (with-stack-list (slot-description label :component-description component-description)
    (continue-whopper stream :label slot-description)))
(defmethod (display-short-form basic-collector)
	   (&optional (stream *standard-output*) &key label)
  (display self stream :label label))
(defmethod (display-short-form instantiated-collector-mixin)
	   (&optional (stream *standard-output*) &key label)
  (display self stream :label (or label name)))
(defmethod (wire-for-aux-stack basic-collector) ()
  (error "You cannot wire this collector for the aux stack."))
(defmethod (get-form-to-collect-wired-data basic-collector) (instance &key args for-value)
  (declare (values form instance bindings))
  (ignore instance args for-value)
  (error "Don't know how to collect wired data for this collector."))
(defgeneric get-entries (collector mapping-function)
  (declare (sys:downward-funarg mapping-function)))
(defmethod (get-entries basic-collector) (mapping-function)
  (ignore mapping-function)
  )
(defmethod (get-entries complex-collector-mixin) (mapping-function)
  (map-over-all-component-collectors
    self
    #'(lambda (key component)
	(get-entries
	  component
	  #'(lambda (&rest args)
	      (apply mapping-function key args))))))
(defmethod (optimize-combine basic-collector) (combinee)
  (ignore combinee)
  nil)
(defmethod (combine basic-collector) (combinee)
  (get-entries combinee
	       #'(lambda (&rest args)
		   (apply 'collect-data self args))))
(defwhopper (combine basic-collector) (combinee)
  (if #||(eq (get-handler-for self 'combine)
	  (get-handler-for combinee 'combine))||#
      (eql (type-of self) (type-of combinee))
      (continue-whopper combinee)
      (or (optimize-combine self combinee)
	  (get-entries combinee
		       #'(lambda (&rest args)
			   (apply 'collect-data self args))))))
(defwhopper (combine instantiated-complex-collector-mixin) (combinee)
  (unless (or (not (typep combinee 'instantiated-complex-collector-mixin))
	      (canonicalized-component-description-equal
		template
		(si:eval-in-instance combinee 'template)))
    (error "Can't COMBINE two hierarchical collectors whose component-descriptions don't match."))
  (continue-whopper combinee))
(defmethod (combine complex-collector-mixin) (combinee)
  (stack-let ((c (make-array 20 :fill-pointer 0)))
    (map-over-component-collectors
      combinee
      #'(lambda (key combinee-components)
	  (setf (fill-pointer c) 0)
	  (let ((components (collect-data-for-value self key))
		(size (collector-components-size combinee-components)))
	    (with-stack-list (comps components combinee-components)
	      (loop for comp in comps do
		(decompose-components
		  comp #'(lambda (component ignore)
			   (vector-push-extend component c)))))
	    (loop for i from 0 below size do
	      (combine (aref c i) (aref c (+ i size)))))))))
(defgeneric map-over-component-collectors (collector function &rest args)
  (declare (sys:downward-funarg function)))
(defmethod (map-over-component-collectors complex-collector-mixin) (function &rest args)
  (ignore function args))
(defgeneric map-over-descendant-collectors (collector function &rest args)
  (declare (sys:downward-funarg function)))
(defmethod (map-over-descendant-collectors complex-collector-mixin) (function &rest args)
  (apply function nil self args))
(defun map-over-descendant-components (collector function &rest args)
  (declare (sys:downward-funarg function))
  (map-over-descendant-collectors
    collector
    #'(lambda (key descendant)
	(map-over-component-collectors
	  descendant
	  #'(lambda (inner-key components)
	      (apply function (or key inner-key) components args))))))
;; Since this can be called on arbitrarily complex structures, and since we don't want 
;; to constantly have stack overflows, we hand code tail recursion here.
;; The way we do it is to trap the first recursive call, and save the arguments.
;; any other calls are carried out normally.
;; If, at the end of the function we have a cached call, we clear the cache, and set up
;; our own arguments to be the cached arguments, and loop to the beginning of our function
(defgeneric map-over-all-component-collectors (collector function &rest args)
  (declare (sys:downward-funarg function)))
(defmethod (map-over-all-component-collectors complex-collector-mixin) (function &rest args)
  (labels
    ((walk (collector keys-so-far)
       (let ((need-to-recurse nil)
	     (component-to-recurse-on nil)
	     (key-list nil))
	 (flet ((apply-or-recurse (new-key-list component)
		  (if (typep component 'complex-collector-mixin)
		      (if need-to-recurse
			  (walk component new-key-list)
			  (setq need-to-recurse 't
				component-to-recurse-on component
				;; copy top-level cons, since that will go away when
				;; the LAMBDA passed to m-o-c-c returns.
				key-list (cons (car new-key-list) (cdr new-key-list))))
		      (apply function new-key-list component args))))
	   (loop do (map-over-descendant-components
		      collector
		      #'(lambda (key components)
			  (stack-let ((key-list (cons key keys-so-far)))
			    (decompose-components
			      components
			      #'(lambda (component ignore)
				  (apply-or-recurse key-list component))))))
		 until (null need-to-recurse)
		 do (setq collector component-to-recurse-on
			  need-to-recurse nil
			  keys-so-far key-list))))))
    (walk self nil)))
(defwhopper (wire-for-aux-stack wirable-collector-mixin) ()
  (unless wired-p
    (continue-whopper)
    (setf wired-p 't)))
(defwhopper (unwire wirable-collector-mixin) ()
  (when wired-p
    (continue-whopper)
    (setf wired-p nil)))
(defmethod (wire-for-aux-stack trivially-wirable-collector-mixin) ()
  (si:wire-structure self))
(defmethod (unwire trivially-wirable-collector-mixin) ()
  (si:unwire-structure self))
(defvar *construct-wired-code* nil)
(defun safe-constant-reference (constant-name)
  (if *construct-wired-code*
      (eval constant-name)
      constant-name))
(defun safe-instance-reference (flavor-name instance-name instance)
  (if *construct-wired-code*
      `(inline-instance-ref ,flavor-name ,instance-name ,instance)
      `(,(intern (string-append (string flavor-name) "-" (string instance-name))
		 (symbol-package flavor-name))
	,instance)))
(defmethod (get-form-to-collect-wired-data trivially-wirable-collector-mixin)
	   (instance &key args for-value)
  (declare (values form instance bindings))
  (let ((*construct-wired-code* 't))
    (get-form-to-collect-data self instance :args args :for-value for-value)))
(defwhopper-subst (collect-data multiple-process-collector-mixin) (name &rest args)
  (si:without-interrupts (lexpr-continue-whopper name args)))
(defwhopper-subst (get-form-to-collect-data multiple-process-collector-mixin)
		  (instance &key args for-value)
  (multiple-value-bind (form instance bindings)
      (lexpr-continue-whopper instance :args args :for-value for-value)
    (values `(si:without-interrupts ,form) instance bindings)))
(defwhopper-subst (collect-data multiple-process-lock-collector-mixin) (name &rest args)
  (process:with-lock (lock)
    (lexpr-continue-whopper name args)))
(defwhopper-subst (get-form-to-collect-data multiple-process-lock-collector-mixin)
		  (instance &key args for-value)
  (multiple-value-bind (form instance bindings)
      (lexpr-continue-whopper instance :args args :for-value for-value)
    (if (eq instance ':constant)
	(let ((instance-name (gensym "INSTANCE")))
	  (values `(process:with-lock
		     ((multiple-process-lock-collector-mixin-lock ,instance-name))
		     ,form)
		  instance-name 
		  bindings))
	(values `(process:with-lock
		   ((multiple-process-lock-collector-mixin-lock ,instance))
		   ,form)
		instance
		bindings))))

;;; Don't need to worry about synchronization for wired forms...

;;

(defun get-component-from-components (component components collector)
  (unless (or (listp collector)
	      (typep collector 'instantiated-complex-collector-mixin))
    (error "~S must be an instantiated hierarchical collector" collector))
  (let* ((description (if (listp collector)
			  collector
			  (collector-component-description collector)))
	 (slot (find-slot-in-component-description component description))
	 (entry-size (length description))
	 (index (position slot description)))
    (unless slot
      (error "~S must be a component name, (or unique component type) of the collector; those components are: ~S"
	     component description))
    (unless (= (collector-components-size components) entry-size)
      (error "~S is not a components block of ~S." components collector))
    (if (arrayp components)
	(aref components index)
	components)))

(defun get-component-extractor-from-components (component components collector)
  (unless (or (listp collector)
	      (typep collector 'instantiated-complex-collector-mixin))
    (error "~S must be an instantiated hierarchical collector" collector))
  (let* ((description (if (listp collector)
			  collector
			  (collector-component-description collector)))
	 (slot (find-slot-in-component-description component description))
	 (entry-size (length description))
	 (index (position slot description)))
    (unless slot
      (error "~S must be a component name, (or unique component type) of the collector; those components are: ~S"
	     component description))
    (unless (or (null components)
		(= (collector-components-size components) entry-size))
      (error "~S is not a components block of ~S." components collector))
    (if (if components (arrayp components) (> (length description) 1))
	#'(lambda (components) (aref components index))
	#'(lambda (components) components))))

(defun combine-components (components1 components2)
  (if (arrayp components1)
      (if (and (arrayp components2) (= (length components1) (length components2)))
	  (loop for c1 being the array-elements of components1
		for c2 being the array-elements of components2 do
	    (combine c1 c2))
	  (error "components ~S and ~S are not compatible, and therefore can't be combined."
		 components1 components2))
      (if (arrayp components2)
	  (error "components ~S and ~S are not compatible, and therefore can't be combined."
		 components1 components2)
	  (combine components1 components2))))

(defun get-components-from-recursive-node (node)
  (let ((components nil)
	(count 0))
    (map-over-component-collectors node
				   #'(lambda (ignore component-block)
				      (incf count)
				      (setf components component-block)))
    (when (> count 1)
      (cerror "Return a component-block picked at random."
	      "This collector has more than one component-collector."))
    components))

(defun compute-inclusive-from-exclusive-data
       (collector exclusive-inclusive-pairs &key other-combination-function progress-note-p)
  (tv:noting-progress-if progress-note-p ("Computing Inclusives from Exclusives")
    (let ((combiners
	    (loop for (exclusive inclusive) in exclusive-inclusive-pairs
		  collect (list (get-component-extractor-from-components
				  exclusive nil collector)
				(get-component-extractor-from-components
				  inclusive nil collector))))
	  (count 0)
	  (total-nodes 0)
	  (node-data-so-far nil))
      ;; first a quick tree-walk to compute the total nodes
      (let ((stack (make-array 100 :fill-pointer 0)))
	(metering:map-over-descendant-collectors
	  collector
	  #'(lambda (ignore descendant)
	      (incf total-nodes)
	      (vector-push-extend descendant stack)))
	(loop as node = (vector-pop stack nil)
	      while node 
	      do (metering:map-over-descendant-collectors
		   node
		   #'(lambda (ignore descendant)
		       (incf total-nodes)
		       (vector-push-extend descendant stack)))))
      ;; collector had better have descendants.
      ;; list of exclusive inclusive-counterpart pairs are names of components.
      (let ((initial-sub-nodes nil))
	(map-over-descendant-collectors collector #'(lambda (ignore sub-node)
						      (push sub-node initial-sub-nodes)))
	(push (list nil initial-sub-nodes initial-sub-nodes) node-data-so-far))
      (loop while node-data-so-far
	    for (components-to-accumulate-into sub-nodes all-sub-nodes)
		=  (first node-data-so-far) do
	(if (null sub-nodes)
	    (progn
	      (when components-to-accumulate-into
	
		(loop for (exclusive inclusive) in combiners
		      as inclusive-component = (funcall inclusive components-to-accumulate-into)
		      do
		  (combine inclusive-component (funcall exclusive components-to-accumulate-into))
		  (loop for sub-node in all-sub-nodes
			do
		    (ignore exclusive)
		    (combine inclusive-component 
			     (funcall inclusive
				      (get-components-from-recursive-node sub-node)))))
		(when other-combination-function
		  (funcall other-combination-function
			   components-to-accumulate-into all-sub-nodes)))
	      (incf count)
	      (when progress-note-p (tv:note-progress count total-nodes))
	      (pop node-data-so-far))
	    (let* ((sub-node (first sub-nodes))
		   (components (get-components-from-recursive-node sub-node))
		   (sub-sub-nodes nil))
	      (map-over-descendant-collectors
		sub-node
		#'(lambda (ignore sub-sub-node)
		    (push sub-sub-node sub-sub-nodes)))
	      (pop (second (first node-data-so-far)))
	      (push (list components sub-sub-nodes sub-sub-nodes) node-data-so-far)))))))

(defun construct-matching-components
       (original-description modified-description original-components)
  ;; first assume that there's a 1-1 correspondence between the original and
  ;; modified description.
  (if (> (length original-description) 1)
      (progn
	(if (and (listp modified-description) (every 'listp modified-description))
	    (progn
	      (loop for (key . make-collector-args) in modified-description do
		(unless (assoc key original-description)
		  (cerror "Ignore this field"
			  "Field named ~S not found in the original collector; must be one of ~S"
			  key
			  (map 'list 'car original-description))))
	      (loop for (key . rest) in original-description
		    for i from 0 do 
		(let ((modification (assoc key modified-description)))
		  (ignore rest)
		  (when modification
		    (setf (aref original-components i)
			  (apply 'make-data-collector
				 (append (cdr modification)
					 '(:top-level nil))))))))
	    ;; If it's not a list of lists, apply make-data-collector of modified-description
	    ;; for *each* slot.
	    (loop for i from 0 below (length original-description) do
	      (setf (aref original-components i)
		    (if (listp modified-description)
			(apply 'make-data-collector
			       (append modified-description '(:top-level nil)))
			(make-data-collector modified-description :top-level nil)))))
	original-components)
      (if (listp modified-description)
	  (apply 'make-data-collector
		 (append (if (and (= (length modified-description) 1)
				  (listp (car modified-description)))
			     (car modified-description)
			     modified-description)
			 '(:top-level nil)))
	  (make-data-collector modified-description :top-level nil))))

;;; Each filter entry consists of up to four elements
;; (1) the name of the filter
;; (2) a function that can be applied to a component to determine if it "matches" a filter
;; (3) (optional) a component-description of the component in the filter.
(defun sort-collector-values
       (collector function &optional
	(component (car (first (collector-component-description collector))))
	&key (predicate #'>) (extractor #'total) description
	filters sort-filters-p)
  (unless (typep collector 'complex-collector-mixin)
    (error "~S must be a hierarchical collector" collector))
  (unless (or description (typep collector 'instantiated-complex-collector-mixin))
    (error "No component description has been provided."))
  (let* ((description (or description
			  (collector-component-description collector)))
	 (slot (find-slot-in-component-description component description))
	 (size (ncomponents collector))
	 (entry-size (length description))
	 (index (position slot description)))
    (unless (or slot (eq :key component))
      (error "~S must be a component name, (or unique component type) of the collector; those components are: ~S"
	     component description))
    (stack-let ((component-list (make-array (* size 3) :fill-pointer 0))
		(filtered-entries (make-array (length filters))))
      (loop with constructor = (si:eval-in-instance collector 'make-component)
	    for filter-entry in filters
	    for i below (length filters) do
	(setf (aref filtered-entries i)
	      (destructuring-bind (ignore ignore &optional component-description)
		  filter-entry
		(if (null component-description)
		    (funcall constructor)
		    ;; component-description
		    (construct-matching-components
		      description component-description (funcall constructor))))))
      (map-over-descendant-collectors
	collector
	#'(lambda (key descendant)
	    (map-over-component-collectors
	      descendant
	      (if filters
		  (if (eql component :key)
		      #'(lambda (selector components)
			  (declare (sys:downward-function)) 
			  (loop for (filter-key filter-function) in filters
				for i from 0 do
			    (when (funcall filter-function selector components)
			      (combine-components (aref filtered-entries i) components)
			      (return (values)))
				finally
				  (vector-push (or key selector) component-list)
				  (vector-push components component-list)
				  (vector-push descendant component-list)))
		      #'(lambda (selector components)
			  (declare (sys:downward-function)) 
			  (loop for (filter-key filter-function) in filters
				for i from 0 do
			    (when (funcall filter-function selector components)
			      (combine-components (aref filtered-entries i) components)
			      (return (values)))
				finally
				  (vector-push components component-list)
				  (vector-push (or key selector) component-list)
				  (vector-push descendant component-list))))
		  (if (eql component :key)
		      #'(lambda (selector components)
			  (declare (sys:downward-function)) 
			  (vector-push (or key selector) component-list)
			  (vector-push components component-list)
			  (vector-push descendant component-list))
		      #'(lambda (selector components)
			  (declare (sys:downward-function)) 
			  (vector-push components component-list)
			  (vector-push (or key selector) component-list)
			  (vector-push descendant component-list)))))))
      (when (and filters sort-filters-p)
	(loop for filtered-entry being the array-elements of filtered-entries
	      for (key filter) in filters do
	  (funcall (if (eql component :key)
		       #'(lambda (selector components)
			   (declare (sys:downward-function))
			   (vector-push selector component-list)
			   (vector-push components component-list)
			   (vector-push collector component-list))
		       #'(lambda (selector components)
			   (declare (sys:downward-function))
			   (vector-push components component-list)
			   (vector-push selector component-list)
			   (vector-push collector component-list)))
		   key filtered-entry)))
      (zl:sort-grouped-array
	component-list 3 (if (and (not (eql component :key))
				  (> entry-size 1))
			     #'(lambda (entry1 entry2)
				 (declare (sys:downward-function))
				 (funcall predicate
					  (funcall extractor (aref entry1 index))
					  (funcall extractor (aref entry2 index))))
			     #'(lambda (entry1 entry2)
				 (declare (sys:downward-function))
				 (funcall predicate
					  (funcall extractor entry1)
					  (funcall extractor entry2)))))
      (let ((key-offset (if (eql :key component) 0 1))
	    (components-offset (if (eql :key component) 1 0)))
	(loop for i from 0 below (floor (length component-list) 3)
	      as base = (+ i i i)
	      do (funcall function
			  (aref component-list (+ key-offset base))
			  (aref component-list (+ components-offset base))
			  (aref component-list (+ 2 base)))
		 finally
		   (when (and filters (null sort-filters-p))
		     (loop for filtered-entry being the array-elements of filtered-entries
			   for (key filter) in filters do
		       (funcall function key filtered-entry collector))))))))

#||
;; eventually this will call get-entries on collector, and build a collector-function to
;; fill up the new-collector
(defun convert-collector (collector new-collector-description)
  (if (typep collector 'complex-collector-mixin)
  (let ((component-description
	(new-collector (make-data-collector
			 
		:component-description (collector-component-description backtrace)
		:template (collector-template backtrace)
		:make-component (collector-make-component backtrace)))
	
    (map-over-all-component-collectors
      backtrace
      #'(lambda (key components)
	  (let ((new-components (collect-data hash (second key))))
	    (loop for )))))))))
||#

(defvar *known-metering-functions*
	`(enter-region exit-region
          enter-process exit-process
	  apply-in-region funcall-in-region
	  metering-enabled? 
	  turn-off-meter-bit turn-on-meter-bit turn-on-meter-bit-check
	  (flavor::D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:FIX :ROMAN :NORMAL) "CPTFONT")defun-in-flavor per-process-state-cell per-process-control-mixin)
0	  1(0flavor::1defun-in-flavor state-in-process per-process-control-mixin)
0	  (flavor:method enable-metering per-process-control-mixin)
	  bootstrap-trigger-generator-function
	  bootstrap-region-generator-function
	  bootstrap-interval-generator-function
	  patch-bootstrap-trigger-generator-function
	  patch-bootstrap-region-generator-function
	  patch-bootstrap-interval-generator-function))

(defun filter-metering-functions  (function)
  (let ((name (sys:function-name function)))
    (or (member name *known-metering-functions* :test #'equal)
	(when (si:validate-function-spec name)
	  (let ((parent (sys:function-parent name)))
	    (or (member parent *known-metering-functions* :test #'equal)
		(block find-known-control-function
		  (maphash #'(lambda (key value)
			       (declare (sys:downward-function))
			       (ignore key)
			       (when (equal parent (sys:function-name (car value)))
				 (return-from find-known-control-function 't)))
			   (get-function-cache 'create-control-scope-testing-function))
		  nil)))))))

(defun filter-metering-functions-2 (selector components)
  (ignore components)
  (filter-metering-functions selector))

;;
;; Generally useful hacks built on top of collector operations.
;;

(defun sort-collector-output
       (collector &optional (component
			      (car (first (collector-component-description (parse-collector collector)))))
	(stream *standard-output*)
	&key (predicate #'>) (key #'total)
	(print-key-name #'identity)
	description
	(key-name-column-width 30)
	component-format
	(filters `((metering-utility-functions filter-metering-functions-2)))
	threshold-percentage
	threshold-value)
  (setf collector (parse-collector collector))
  (unless (typep collector 'complex-collector-mixin)
    (error "~S must be a hierarchical collector" collector))
  (unless (or description (typep collector 'instantiated-complex-collector-mixin))
    (error "No component description has been provided."))
  (let* ((description (or description
			  (collector-component-description collector)))
	 (extractor (unless (eq component :key)
		      (get-component-extractor-from-components
			component nil (or description collector)))))
    (when (and component-format (listp component-format) (not (functionp component-format)))
      (loop for format-description in component-format do
	(unless (find-slot-in-component-description
		  (first format-description) description)
	  (format *error-output*
		  "~&~S does not refer to a component of ~S.  It will be ignored."
		  format-description collector))))
    (when threshold-percentage
      (let* ((total-to-test-by
	      (let ((total-it-up (funcall extractor
					  (funcall (collector-make-component collector)))))
		(map-over-descendant-components
		  collector
		  #'(lambda (selector components)
		      (combine total-it-up
			       (if (eq component :key)
				   selector
				   (funcall extractor components)))))
		(funcall key total-it-up)))
	    (threshold (/ (* total-to-test-by threshold-percentage) 100.)))
	(push `(below-threshold-percentage
		 ,#'(lambda (selector components)
		      (not (funcall predicate
				    (funcall key (if (eq component :key)
						     selector
						     (funcall extractor components)))
				    threshold))))
	      filters)))
    (when threshold-value
      (push `(below-threshold-value
	       ,#'(lambda (selector components)
		    (not (funcall predicate
				  (funcall key (if (eq component :key)
						   selector
						   (funcall extractor components)))
				  threshold-value))))
	    filters))
    (sort-collector-values
      collector
      #'(lambda (selector components node)
	  (dw:with-output-as-presentation (:single-box 't :stream stream :object selector :type (type-of selector))
	    (format stream "~&~A"  
		    (funcall print-key-name selector))
	    (when (> (send stream :read-cursorpos :character)
		     key-name-column-width)
	      (fresh-line stream))
	    (format stream "~v,0T" key-name-column-width))
	  (sys:with-indentation (stream 2)
	    (display-components stream components description component-format)
	    (unless (eq node collector)
	      (sort-collector-output
		node component stream :predicate predicate :key key
		:print-key-name print-key-name
		:description description
		:key-name-column-width key-name-column-width
		:component-format component-format
		:filters filters))))
      component
      :predicate predicate
      :extractor key
      :description description
      :filters filters)))

;; a modified version that seems a little prettier, and works better with descendants.
(defun sort-collector-output-2
       (collector &optional (component
			      (car (first (collector-component-description (parse-collector collector)))))
	(stream *standard-output*)
	&key (predicate #'>) (key #'total)
	(print-key-name #'identity)
	description
	component-format
	indented-component-format
	(filters `((metering-utility-functions filter-metering-functions-2)))
	threshold-percentage
	threshold-value)
  (setf collector (parse-collector collector))
  (unless (typep collector 'complex-collector-mixin)
    (error "~S must be a hierarchical collector" collector))
  (unless (or description (typep collector 'instantiated-complex-collector-mixin))
    (error "No component description has been provided."))
  (let* ((description (or description
			  (collector-component-description collector)))
	 (extractor (unless (eq component :key)
		      (get-component-extractor-from-components
			component nil (or description collector))))
	 (max-depth 0))
    (labels ((count-depth (collector depth)
	       (map-over-descendant-collectors
		 collector
		 #'(lambda (key descendant)
		     (when (> depth max-depth) (setf max-depth depth))
		     (when key (count-depth descendant (1+ depth)))))))
	(count-depth collector 0))
    (when (and component-format (listp component-format) (not (functionp component-format)))
      (loop for format-description in component-format do
	(unless (find-slot-in-component-description
		  (first format-description) description)
	  (format *error-output*
		  "~&~S does not refer to a component of ~S.  It will be ignored."
		  format-description collector))))
    (when threshold-percentage
      (let* ((total-to-test-by
	      (let ((total-it-up (funcall extractor
					  (funcall (collector-make-component collector)))))
		(map-over-descendant-components
		  collector
		  #'(lambda (selector components)
		      (combine total-it-up
			       (if (eq component :key)
				   selector
				   (funcall extractor components)))))
		(funcall key total-it-up)))
	    (threshold (/ (* total-to-test-by threshold-percentage) 100.)))
	(push `(below-threshold-percentage
		 ,#'(lambda (selector components)
		      (not (funcall predicate
				    (funcall key (if (eq component :key)
						     selector
						     (funcall extractor components)))
				    threshold))))
	      filters)))
    (when threshold-value
      (push `(below-threshold-value
	       ,#'(lambda (selector components)
		    (not (funcall predicate
				  (funcall key (if (eq component :key)
						   selector
						   (funcall extractor components)))
				  threshold-value))))
	    filters))
    (labels ((display-branch (collector depth)
	       (sort-collector-values
		 collector
		 #'(lambda (selector components node)
		     (fresh-line stream)
		     (display-components stream components description component-format)
		     (if indented-component-format
			 (progn
			   (format stream "~5D ~v@T" depth depth)
			   (display-components
			     stream components description indented-component-format)
			   (format stream "~v@T" (+ max-depth depth)))
			 (format stream "~5D ~v@T" depth (+ depth depth)))
		     (dw:with-output-as-presentation (:single-box 't :stream stream :object selector :type (type-of selector))
		       (format stream "~S" (funcall print-key-name selector)))
		     (unless (eq node collector)
		       (display-branch node (1+ depth))))
		 component
		 :predicate predicate
		 :extractor key
		 :description description
		 :filters filters)))
      (display-branch collector 0))))
