;;; -*- Mode: LISP; Package: METERING; Base: 10; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun turn-on-pc-metering (ignore)
  (meter:start-monitor nil))

(defun turn-off-pc-metering (ignore)
  (meter:stop-monitor))

(defun ensure-pc-array (ignore)
  (unless meter:*pc-monitor-array*
    (meter:make-pc-array (* 32. sys:page-size))))

(add-initialization
  "Register PC metering event"
  '(when (meter:pc-metering-supported-p)
     (register-triggering-event
       'pc-metering
       '*pc-metering-trigger*
       (make-instance 'special-case-trigger
		      :name "PC Metering"
		 ;;; triggers a metering event whenever 
		      :description "Samples PC during a task"
		      :type 'pc-metering
		      :variable-name '*pc-metering-trigger*
		      :values '(sample-pc)
		      :value-types `(metering-pc)
		      :control-setup #'ensure-pc-array
		      :turn-control-on #'turn-on-pc-metering
		      :turn-control-off #'turn-off-pc-metering
		      :caution-about-generator "only system supplied (in micro-code)"
		      :caution-about-collector "only system supplied (in micro-code)"
		      :control-restrictions '(:disable-checking)))

     (control-trigger (make-instance 'basic-control :name "PC Metering" :keep t)
		      'pc-metering))
  ()
  '*metering-load-initializations*)

(defcollector pc-metering-histogram
	      ()
	      ((size nil))
  ()
  (:init-options-and-types (&key ((size nil)
				  ((null-or-type integer)
				   :description "an integer or None"
				   :default nil
				   :provide-default 't)
				  "Number of pages PC array occupies")))
  :initable-instance-variables)

(setf (collector-type-sample-instance
	(find-collector-type 'pc-metering-histogram))
      (make-data-collector 'pc-metering-histogram :size nil))

(defmacro with-pc-metering-consistent (&body body)
  `(without-interrupts
     (let ((pc-metering-state meter:*current-pc-metering-mode*))
       (unwind-protect
	   (progn
	     (when pc-metering-state (meter:stop-monitor))
	     ,@body)
	 (when pc-metering-state (meter:start-monitor nil))))))

(defmethod (make-instance pc-metering-histogram :after) (&rest init-plist
							       &key size &allow-other-keys)
  (when size
    (with-pc-metering-consistent
      (meter:make-pc-array (* size sys:page-size)))))

;;;

(defvar *pc-metering-histogram*
	(when (meter:pc-metering-supported-p)
	  (make-data-collector 'pc-metering-histogram :size nil :name "PC array")))

(add-initialization "Collect PC metering"
		    '(when (meter:pc-metering-supported-p)
		       (si:set-in-instance (parse-trigger 'pc-metering)
					   'collector-function
					   #'ignore)
		       (si:set-in-instance (parse-trigger 'pc-metering)
					   'collector-description
					   `((,*pc-metering-histogram*))))
		    ()
		    '*metering-warm-initializations*)

(defmethod (set-size pc-metering-histogram) (size)
  (when (numberp size)
    (with-pc-metering-consistent
      (meter:make-pc-array (* size sys:page-size)))))

(defmethod (reset pc-metering-histogram) ()
  (with-pc-metering-consistent
    (when meter:*pc-monitor-array*
      (SI:FILL-ARRAY METER:*PC-MONITOR-ARRAY* NIL 0)
      (SETQ SYS:%PC-TABLE-MISSES 0))))
(defmacro pointer-min (p1 p2)
  `(if (sys:%pointer-lessp ,p1 ,p2) ,p1 ,p2))

(defmacro si:check-noncontiguous-memory-scan
	  (identifier-symbol current-address &aux (cur-addr (gensym)))
  (unless (zl:memq identifier-symbol si:*scanning-through-memory-valid-identifiers*)
    (compiler:warn nil "Can't lexically find identifier-symbol ~S" identifier-symbol))
  (multiple-value-bind (scan-behind scan-limit scan-whack
			scan-mark scan-ahead-start scan-ahead-limit)
      (si:decode-scanning-through-memory-identifier identifier-symbol)
    `(let ((,cur-addr ,current-address))
       (when (si:%pointer- ,cur-addr ,scan-mark)
	 (setq ,scan-mark (dpb 0 si:%%vma-word-offset ,cur-addr))
	 (si:page-out-words ,scan-behind
			    (sys:%pointer-difference
			      (pointer-min ,scan-ahead-limit ,scan-mark)
			      ,scan-behind)
			    :write-modified :deferred)
	 (if (si:%pointer-> ,scan-mark ,scan-ahead-start)
	     (progn
	       (setq ,scan-behind (sys:%pointer ,scan-mark)
		     ,scan-mark (sys:%pointer-plus ,scan-mark ,scan-whack)
		     ,scan-ahead-start (sys:%pointer ,scan-ahead-limit)
		     ,scan-ahead-limit (pointer-min
					 ,scan-limit
					 (sys:%pointer
					   (sys:%pointer-plus
					     (sys:%pointer-plus ,scan-mark ,scan-whack)
					     ,scan-whack))))
	       (si:page-in-words ,scan-behind
				 (sys:%pointer-difference
				   (pointer-min ,scan-limit
						(sys:%pointer-plus ,scan-mark ,scan-whack))
				   ,scan-behind)
				 :hang-p nil))
	     (progn
	       (si:page-in-words
		 ,scan-ahead-start
		 (sys:%pointer-difference ,scan-ahead-limit ,scan-ahead-start)
		 :hang-p nil)
	       (setq ,scan-behind (sys:%pointer ,scan-mark)
		     ,scan-mark (sys:%pointer-plus ,scan-mark ,scan-whack)
		     ,scan-ahead-start (sys:%pointer ,scan-ahead-limit)
		     ,scan-ahead-limit (pointer-min ,scan-limit
						    (sys:%pointer-plus
						      (sys:%pointer-plus ,scan-mark
									 ,scan-whack)
						      ,scan-whack)))))))))
(DEFUN MAP-OVER-FUNCTIONS-IN-BUCKET (BUCKET FUNCTION &REST ARGS)
  (MULTIPLE-VALUE-BIND (START-ADDRESS END-ADDRESS)
      (METER:RANGE-OF-BUCKET BUCKET)
    (LOOP WITH ADDRESS = START-ADDRESS
	  WITH MULTIPLE-REGIONS-P = (NOT (EQL (SYS:%REGION-NUMBER START-ADDRESS)
					      (SYS:%REGION-NUMBER END-ADDRESS)))
	  FOR LAST-REGION FIRST NIL THEN REGION
	  UNTIL (SI:%POINTER- ADDRESS END-ADDRESS)
	  FOR REGION = (SYS:%REGION-NUMBER ADDRESS)
	  FOR FIRST-TIME FIRST T THEN NIL
	  WHEN REGION
	  DO (COND ((OR (AND (NOT (EQL REGION LAST-REGION))
			     (OR (LDB-TEST SYS::%%REGION-STACK (SYS:REGION-BITS REGION))
				 ( (LDB SYS:%%REGION-REPRESENTATION-TYPE
					 (SYS:REGION-BITS REGION))
				    SYS:%REGION-REPRESENTATION-TYPE-STRUCTURE)
				 (AND MULTIPLE-REGIONS-P
				      (LET ((AREA (SI:REGION-AREA REGION)))
						;Anything wired
					(NOT (OR (EQL AREA SYS:WIRED-CONTROL-TABLES)
						;Anything safeguareded
						 (EQL AREA SYS:SAFEGUARDED-OBJECTS-AREA)
						;Anything else
						 (EQL AREA SYS:COMPILED-FUNCTION-AREA)))))))
			(SI:%POINTER-
			  ADDRESS (SYS:%POINTER-PLUS (SYS:REGION-ORIGIN REGION)
						     (SYS:REGION-FREE-POINTER REGION))))
		    (SETQ ADDRESS (SI:%POINTER-PLUS (SYS:REGION-ORIGIN REGION)
						    (SYS:REGION-LENGTH REGION))))
		   (T (WHEN FIRST-TIME
			(SETQ ADDRESS (SYS:%POINTER (SYS:%FIND-STRUCTURE-LEADER ADDRESS))))
		      (LET* ((OBJECT (SYS:%FIND-STRUCTURE-HEADER ADDRESS))
			     (SIZE (SI:%STRUCTURE-TOTAL-SIZE OBJECT))
			     (OBJECT-ADDRESS (SYS:%POINTER OBJECT)))
			(WHEN (AND (SI:%POINTER-< OBJECT-ADDRESS END-ADDRESS)
				   (SI:%POINTER- OBJECT-ADDRESS ADDRESS))
			  (WHEN (OR (COMPILED-FUNCTION-P OBJECT)
				    #+3600
				    (AND (ARRAYP OBJECT)
					 (EQ (SYS:ARRAY-TYPE OBJECT) 'SI:ART-16B)))
			    (APPLY FUNCTION OBJECT ARGS)))
			(IF (SI:%POINTER-< (SYS:%POINTER OBJECT) ADDRESS)
			    (INCF ADDRESS)
			    (SETQ ADDRESS (SI:%POINTER-PLUS ADDRESS SIZE))))))
	  ELSE DO
	     (SETQ ADDRESS (DPB (1+ (LDB SYS:%%VMA-QUANTUM-NUM ADDRESS))
				SYS:%%VMA-QUANTUM-NUM 0)))))

(DEFUN LIST-N-FUNCTIONS-IN-BUCKET (N BUCKET &AUX FUNCTIONS)
  (LET ((COUNT 0))
    (MAP-OVER-FUNCTIONS-IN-BUCKET
      BUCKET
      #'(LAMBDA (FUN LIST-LOC)
	  (WHEN (OR (NULL N) (< COUNT N))
	    (LET ((NAME (METER:FUNCTION-NAME-WITH-ESCAPES FUN)))
	      (WHEN NAME
		(PUSH NAME (CDR LIST-LOC)))))
	  (INCF COUNT))
      (LOCF FUNCTIONS))
    (VALUES (NREVERSE FUNCTIONS) COUNT)))
(DEFUN FUNCTION-LIST (&OPTIONAL (LENGTH NIL) (THRESHOLD 0))
  (SI:SCANNING-THROUGH-MEMORY ALL-FUNCTIONS (SYS:%PC-TABLE-OFFSET
					      (sys:%pointer
						(sys:%pointer-plus
						  SYS:%PC-TABLE-OFFSET
						  (* SYS:%PC-TABLE-LENGTH
						     (EXPT 2 SYS:%PC-TABLE-PC-ROTATION))))
					      #o20)
    (LOOP WITH BUCKET = 0 AND OUTPUT = NIL
	AND TOTAL = SYS:%PC-TABLE-MISSES AND IGNORED-SAMPLES = 0
	WHILE (< BUCKET SYS:%PC-TABLE-LENGTH)
	FOR SAMPLES = (AREF METER:*PC-MONITOR-ARRAY* BUCKET)
	  WHEN (PLUSP SAMPLES)
	DO (PROGN 
	     (SI:CHECK-NONCONTIGUOUS-MEMORY-SCAN ALL-FUNCTIONS (METER:RANGE-OF-BUCKET BUCKET))
	     (MULTIPLE-VALUE-BIND (FUNCTIONS REAL-LENGTH)
		 (LIST-N-FUNCTIONS-IN-BUCKET LENGTH BUCKET)
	       ;; Single function case, the threshold is on the per function basis....
	       (COND ((= REAL-LENGTH 1)
		      (MULTIPLE-VALUE-BIND (IGNORE END-BUCKET)
			  (METER:FUNCTION-RANGE (CATCH 'FUNCTION
					    ;; get the actual function, not the name
					    (MAP-OVER-FUNCTIONS-IN-BUCKET
					      BUCKET
					      #'(LAMBDA (FUN)
						  (WHEN (METER:FUNCTION-NAME-WITH-ESCAPES FUN)
						    (THROW 'FUNCTION FUN))))))
			(UNLESS (= (LENGTH (LIST-N-FUNCTIONS-IN-BUCKET 1 END-BUCKET)) 1)
			  (SETQ END-BUCKET (MAX (1- END-BUCKET) BUCKET)))
			(LOOP FOR I FROM (1+ BUCKET) TO END-BUCKET
			      DO (INCF SAMPLES (AREF METER:*PC-MONITOR-ARRAY* I)))
			(IF (> SAMPLES THRESHOLD)
			    (PUSH (LIST* SAMPLES BUCKET (1+ END-BUCKET) 1 FUNCTIONS) OUTPUT)
			    (INCF IGNORED-SAMPLES SAMPLES))
			(SETQ BUCKET (1+ END-BUCKET))))
		     ;; Not significant
		     (( SAMPLES THRESHOLD)
		      (INCF IGNORED-SAMPLES SAMPLES)
		      (INCF BUCKET))
		     (T
		      (PUSH (LIST* SAMPLES BUCKET (1+ BUCKET) REAL-LENGTH FUNCTIONS) OUTPUT)
		      (INCF BUCKET)))))
	ELSE DO (INCF BUCKET)
	DO (INCF TOTAL SAMPLES)
	FINALLY
	   (RETURN (LIST* (LIST TOTAL SYS:%PC-TABLE-MISSES IGNORED-SAMPLES)
			  (NREVERSE OUTPUT))))))

(DEFMACRO PERCENTAGE (X)
  `(round (* 100.0 ,X)))

;; After you transition from a non-zero to a zero bucket, print out the last VAddr of the last
;; bucket.
(DEFMETHOD (DISPLAY PC-METERING-HISTOGRAM) (&OPTIONAL (STREAM 'T))
  (LET* ((FUNCTION-LIST (FUNCTION-LIST 5.))
	 (TOTAL (CAAR FUNCTION-LIST))
	 (IGNORED-SAMPLES (+ (CADAR FUNCTION-LIST)
			     (CADDAR FUNCTION-LIST))))
    (FORMAT stream "~&Total samples: ~D, Ignored samples: ~D, Listed samples: ~D (~2D%)"
	    TOTAL IGNORED-SAMPLES (- TOTAL IGNORED-SAMPLES)
	    (if (zerop total)
		0
		(PERCENTAGE (/ (FLOAT (- TOTAL IGNORED-SAMPLES)) TOTAL))))
    (FORMAT stream "~&    Address (Bucket)   ~21T%~29TFunction(s)")
    (LOOP WITH TOT = (FLOAT TOTAL)
	  FOR (SAMPLES START END LENGTH . FUNCTIONS) IN (CDR FUNCTION-LIST)
	  FOR PERC = (IF (ZEROP TOT) 0. (PERCENTAGE (/ (FLOAT SAMPLES) TOT)))
	  AS ADDR = (METER:RANGE-OF-BUCKET START)
	  UNLESS (ZEROP PERC)
	  WHEN (= LENGTH 1)
	  DO (FORMAT STREAM "~&~11O (~D): ~21T(~2D%)~29T~S" addr START PERC (CAR FUNCTIONS))
	  ELSE
	   DO (FORMAT STREAM
		      "~&~11O (~D): ~21T(~2D%) {~2D functions}~29T" ADDR START PERC LENGTH)
	      (LOOP FOR F IN FUNCTIONS
		    FOR COUNT FROM 0
		    FOR COMMA = NIL THEN T
		    WHEN (= COUNT 3)
		    DO (FORMAT STREAM " ...")
		       (RETURN)
		    DO (FORMAT STREAM "~:[~;, ~]~S" COMMA F))
	  FINALLY (FORMAT STREAM "~%"))))

(defmethod (collect-data pc-metering-histogram) (name &rest args)
  (ignore name args)
  (error "Only the pc metering microcode can add data to a pc-metering-histogram."))

(defmethod (get-form-to-collect-data pc-metering-histogram) (instance &key args for-value)
  (ignore instance args for-value)
  (if (and (null args) (null for-value) (eq instance :constant))
      (values nil (gensym) nil)
      (error "Only the pc metering microcode can add data to a pc-metering-histogram.")))

(defun pc-monitor-all-functions ()
  (with-pc-metering-consistent
    (reset *pc-metering-histogram*)
    (meter:monitor-all-functions)
    (send *terminal-io* :fresh-line)))

(defun pc-monitor-between-addresses (&optional (start-range 0) (end-range 1_28.))
  (with-pc-metering-consistent
    (reset *pc-metering-histogram*)
    (meter:setup-monitor start-range end-range)
    (send *terminal-io* :fresh-line)))

(defun pc-monitor-between-buckets (&optional
				   (start-bucket 0)
				   (end-bucket (array-total-size meter:*pc-monitor-array*)))
  (with-pc-metering-consistent
    (reset *pc-metering-histogram*)
    (meter:expand-range start-bucket end-bucket)
    (send *terminal-io* :fresh-line)))
  

#||
(defun test-pc-meter-time (count)
  (user:measure-time-of-form count (:no-ints 't)
    (meter:start-monitor nil)
    (meter:stop-monitor)))
||#

;; automatically zero in on peaks. when we get a chance.
;; the following is stolen from DCP.
#+3600
(defun pc-monitor-auto-expand-range ()
  (declare (sys:array-register array))
  (multiple-value-bind (intervals total-drops)
      (loop for drops being the array-elements of meter:*pc-monitor-array*
		using (sequence array) (index bucket)
	    for state = :start then new-state
	    as new-state = (if (zerop drops) :zero :drops)
	    as data = (if (neq state new-state) (list bucket bucket 0) data)
	    sum drops into total-drops
	    when (neq state new-state)
	      collect data into intervals
	    do (setf (second data) bucket)
	       (incf (third data) drops)
	    finally (return (values intervals total-drops)))
    (setq intervals (colapse-intervals intervals))
    (multiple-value-bind (low high)
	(choose-buckets-from-intervals intervals total-drops)
      (when (and low high)
	(format t "~%Expanding from ~D to ~D~%" low high)
	(pc-monitor-between-buckets low high)))))
#+3600
(defun colapse-intervals (intervals)
  (block block
    (tagbody
      loop
      ;; trim beginning and end (destructively)
      (if (zerop (third (car intervals)))
	  (setq intervals (cdr intervals)))
      (if (zerop (third (car (last intervals))))
	  (setq intervals (nbutlast intervals)))    
      (multiple-value-bind (count-zero min-zero max-zero min-pos)
	  (loop for (start stop drops) in intervals
		as diff = (- stop start)
		when (zerop drops)
		  sum 1 into count-zero
		  and minimize diff into min-zero
		  and maximize diff into max-zero
		else minimize drops into min-pos
		finally (return (values count-zero min-zero max-zero min-pos)))
	(when (or (< count-zero 10.) (= min-zero max-zero))
	  (return-from block))
	(setq intervals (if ( min-zero min-pos)
			    (delete-if #'(lambda (x) (and (zerop (third x))
						       (= (- (second x) (first x)) min-zero)))
				    intervals)
			  (delete-if #'(lambda (x) (and (not (zerop (third x)))
						     (= (third x) min-pos)))
				  intervals)))
	;; recombine
	(loop with int = intervals
	      while (cdr int)
	      as ((start1 stop1 drops1) (start2 stop2 drops2)) = int
	      when (eq (zerop drops1) (zerop drops2))
		do (setf (second (first int)) stop2)
		   (incf (third (first int)) drops2)
		   (setf (cdr int) (cddr int))
	      else do (setf int (cdr int)))	
	(go loop))))
  (delete-if #'(lambda (x) (zerop (third x))) intervals))
#+3600
(defun validate-vmas-as-structures (start-vma limit-vma)
  (declare (values start-vma limit-vma))
  (flet ((validate (vma)
	   (let ((region (si:%region-number vma)))
	     (and region
		  (let ((bits (sys:region-bits region)))
		    (and 
		      ( (ldb sys:%%region-space-type bits)
			 sys:%region-space-free)
		      (= (ldb sys:%%region-representation-type bits)
			 sys:%region-representation-type-structure))))))
	 (within-region (vma)
	   (let ((region (si:%region-number vma)))
	     (min vma (+ (sys:region-origin region) (sys:region-free-pointer region)))))
	 (down-to-quantum (vma)
	   (logand vma (lognot (1- sys:%address-space-quantum-size)))))
    ;; increase start-vma
    (loop until ( start-vma limit-vma)
	  until (validate start-vma)
	  do (setq start-vma (down-to-quantum (+ start-vma sys:%address-space-quantum-size))))
    ;; decrease limit-vma
    (loop until ( limit-vma start-vma)
	  until (validate (1- limit-vma))
	  do (setq limit-vma (down-to-quantum (1- limit-vma)))
	     finally (setq limit-vma (within-region (1- limit-vma))))
    (and (< start-vma limit-vma)
	 (values start-vma limit-vma))))
#+3600
(defun choose-buckets-from-intervals (intervals total-drops)
  (multiple-value-bind (almost extra-width)
      (loop for interval in intervals
	    as (start stop drops) = interval
	    as start-vma = (meter:range-of-bucket start)
	    as limit-vma = (multiple-value-bind (nil end) (meter:range-of-bucket stop) end)
	    do (multiple-value-setq (start-vma limit-vma)
		 (validate-vmas-as-structures start-vma limit-vma))
	    as (first-fun last-fun)
	       = (flet ((vma-reasonable-function-name (vma)
			  (let ((object (si:%find-structure-header vma))
				(cl:*print-pretty* nil))	;--- format nil broken
			    (cond ((stringp object)
				   (if (> (string-length object) 30.)
				       (format nil "~A ..." (substring object 0 25.))
				       object))
				  ((arrayp object)
				   (format nil "~S" object))
				  ((functionp object)
				   (format nil "~S" (sys:function-name object)))
				  (t "???")))))
		   (list (if start-vma (vma-reasonable-function-name start-vma) "???")
			 (if limit-vma (vma-reasonable-function-name (1- limit-vma)) "???")))
	    collect (list interval
			  (format nil "~5D (~8O) to ~5D (~8O) (~1,2$%) -- "
				  start start-vma stop limit-vma (/ (* drops 100.0) total-drops))
			  first-fun
			  last-fun)
	      into almost
	    maximize (+ (string-length first-fun)
			4
			(string-length last-fun))
	      into extra-width
	    finally (return (values almost extra-width)))
    (let* ((item-list (loop for (interval most fun1 fun2) in almost
			    collect `(,(format nil "~A~V@<~A to ~A~>"
					       most extra-width fun1 fun2)
				      :value ,interval
				      :style (:fix :roman :normal))))
	   (choices (send (tv:make-window
			    'tv:momentary-multiple-menu
			    :item-list item-list)
			  :choose)))
      (and choices
	   (loop for (start stop) in choices
		 minimize start into min-start
		 maximize stop into max-stop
		 finally (return (values min-start max-stop)))))))
