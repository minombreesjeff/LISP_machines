;;; -*- Mode: LISP; Base: 10; Syntax: Common-lisp; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#||

;; Now defined inside sys:metering;metering-definitions. so that the system can open-code
;; (control-state <foo>)

(defflavor basic-control
	((name nil)
	 (state nil)
	 (processes nil)
	 (regions nil)
	 (switch nil)
	 (switch-mode :region)
	 (extent :global)		;; global, per-process, others?
	 (testing-function #'ignore)
	 (triggers nil)
	 (keep 't)
	 (scope nil)
	 (restrictions nil)		;; list of (<trigger> :disable-checking)
	 				;; :disable-checking is the only one so far, but there
	 				;; might be others.
	 (special-actions nil))		;; list of (<trigger>
					;;          <closure-for-turn-on-metering>
					;;          <closure-for-turn-off-metering>
					;;          <closure-for-maybe-turn-on-metering>)
	()
  (:readable-instance-variables state name scope extent)
  (:initable-instance-variables name keep)
  (:writable-instance-variables regions switch)
  (:conc-name control-)
  :ordered-instance-variables)
||#

(defmethod (make-instance basic-control :after) (&rest init-plist)
  (ignore init-plist)
  (setf name (format nil "~A" name))
  (when keep
    (register-control name self)))

(defflavor per-process-control-mixin
	((per-process-state nil)
	 (per-process-actions nil))
	()
  (:readable-instance-variables per-process-state per-process-actions)
  (:writable-instance-variables per-process-state per-process-actions)
  (:required-instance-variables extent)
  (:required-flavors basic-control)
  (:conc-name control-))

(defmethod (make-instance per-process-control-mixin :after) (&rest init-plist)
  (ignore init-plist)
  (setf extent :per-process))

(defsubst-in-flavor (per-process-state-cell per-process-control-mixin) (process)
  (assoc process per-process-state))

(defsubst-in-flavor (state-in-process per-process-control-mixin) (process)
  (declare (values state per-process-state-cell))
  (if (eq state :process)
      (let ((state-cell (per-process-state-cell process)))
	(values (cdr state-cell) state-cell))
      (values state nil)))

(defflavor per-process-control
	()
	(per-process-control-mixin basic-control))

(defflavor process-switch-control () (basic-control))


