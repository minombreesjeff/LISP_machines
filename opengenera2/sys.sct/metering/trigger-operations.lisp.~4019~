;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmethod (meter trigger) (.first-realtime. &rest args)
  (when (and collector-function (or (null filter1) (apply filter1 args)))
    (apply generator-function collector-function .first-realtime. args)))

(defmethod (meter metering-region) (.first-realtime. form &rest args)
  (if (or (null filter1) (apply filter1 args))
      (apply generator-function
	     form initial-collector-function collector-function
	     compute-differences
	     .first-realtime. args)
      (funcall form #'ignore)))

(defmethod (meter metering-interval) (form)
  ;; should never be called.
  (ignore form))

(defmethod (meter-begin metering-interval) (.first-realtime. &rest args)
  (when (or (null filter3) (apply filter3 args))
    (if initial-generator-function
	(apply initial-generator-function initial-collector-function .first-realtime. args)
	(when initial-collector-function
	  (apply initial-collector-function args)))))

(defmethod (meter-end metering-interval) (.first-realtime. &rest args)
  (when (or (null filter1) (apply filter1 args))
    (apply generator-function
	   compute-differences
	   collector-function .first-realtime. args)))



(defmethod (set-control-of-trigger basic-trigger) (new-control)
  (when (and new-control
	     (not (eq (control-extent new-control) control-extent)))
      (error
	"The trigger ~S has a ~A extent, but control ~S is for triggers with an extent of ~A"
	self control-extent new-control (control-extent new-control)))
  (when control
    (remove-trigger-from-control control self))
  (setf control new-control)
  (when new-control
    (add-trigger-to-control control self)))

(defmethod (set-control-of-trigger restricted-control-trigger-mixin) (new-control)
  (when (and new-control
	     (not (eq (control-extent new-control) control-extent)))
      (error
	"The trigger ~S has a ~A extent, but control ~S is for triggers with an extent of ~A"
	self control-extent new-control (control-extent new-control)))
  (when control
    (remove-trigger-from-control control self))
  (setf control new-control)
  (when new-control
    (add-trigger-to-control control self
			    control-restrictions
			    turn-control-on turn-control-off
			    (unless (member :disable-checking control-restrictions)
			      (or check-for-control-state
				  #'(lambda (arg1 ignore)
				      (funcall turn-control-on arg1))))
			    control-setup control-cleanup
			    activate-control deactivate-control)))

;;
(defmethod (set-trigger-collector basic-trigger) (data-collector collector-specs)
  (if data-collector
      (if (and generated-values generator-description)
	  (unless (compatible-function-call
		    nil generated-values nil 0 data-collector)
	    (when (compatible-function-call
		    name values collector-specs 0 data-collector 't)
	      (cl:warn
		'(:bad-style 't)
		"Collector matches trigger, not generator, therefore removing generator")
	      ;; since we are blowing away the generator, we must nullify filter2, which
	      ;; is based on the generator.
	      (when filter2
		(setf (car filter2) nil))
	      (set-trigger-generator self nil nil)))
	  (compatible-function-call
	    name values collector-specs 0 data-collector 't))
      (when collector-specs
	(warn '(:bad-style 't)
	      "There is no collector, so setting collector description to nil")
	(setf collector-specs nil)))
  (setf collector-description collector-specs)
  (setf collector-function (or (when data-collector
				 (if (and filter2 (car filter2))
				     (create-filtered-collector (car filter2) data-collector)
				     data-collector))
			       #'ignore)))

(defmethod (set-trigger-initial-collector metering-region) (data-collector collector-specs)
  (if data-collector
      (if (and initial-generated-values generator-description)
	  (unless (compatible-function-call
		    nil (get-initial-trigger-values self) nil 0 data-collector)
	    (when (compatible-function-call
		    name initial-values collector-specs 0 data-collector 't)
	      (cl:warn
		'(:bad-style 't)
		"Collector matches trigger, not generator, therefore removing generator")
	      ;; since we are blowing away the generator, we must nullify initial filter2,
	      ;; which is based on the generator.
	      (when filter2
		(setf (cadr filter2) nil))
	      (set-trigger-generator self nil nil)))
	  (compatible-function-call
	    name (get-initial-trigger-values self) collector-specs 0 data-collector 't))
      (when collector-specs
	(warn '(:bad-style 't)
	      "There is no collector, so setting collector description to nil")
	(setf collector-specs nil)))
  (setf initial-collector-description collector-specs)
  (setf initial-collector-function
	(when data-collector
	  (if (and filter2 (cadr filter2))
	      (create-filtered-collector (cadr filter2) data-collector)
	      data-collector))))



(si:defwiredfun bootstrap-trigger-generator-function
	     (continuation .first-realtime. &rest trigger-args)
  (declare (sys:downward-funarg continuation))
  (ignore .first-realtime.)
  (apply continuation trigger-args))

(add-initialization "wire trigger generator function"
		    `(si:wire-function-for-metering #'bootstrap-trigger-generator-function)
		    ()
		    '*metering-initializations*)

(defmethod (set-trigger-generator basic-trigger)
	   (data-generator generator-specs
			   &key override initial-collector-arglist final-collector-arglist)
  (ignore override initial-collector-arglist)
  (let ((generated-arglist nil))
    (if (null data-generator)
	(when generator-specs
	  (cl:warn '(:bad-style 't)
		   "Setting description to NIL since there is no data generator.")
	  (setq generator-specs nil))
	(multiple-value-bind (args generator-values)
	    (arglist data-generator)
	  (setf generated-arglist
		(combine-generator-arglist values args generator-values generator-specs
					   :user-specified-arglist final-collector-arglist))
	  (when
	    (and
	      ;; error if doesn't match.  (The generator takes a continuation, and
	      ;; .first-realtime. not mentioned in the arg-list)
	      (compatible-function-call name values data-generator 2 data-generator 't)
	      (or collector-description (car filter2))
	      (not (and (car filter2)
			(compatible-function-call nil generated-arglist nil 0 (car filter2))))
	      (not (and
		     collector-description
		     (compatible-function-call
		       nil generated-arglist nil 0 collector-function))))
	    (setf collector-description nil)
	    (when filter2
	      (setf (car filter2) nil))
	    (setf collector-function #'ignore)
	    (cl:warn
	      '(:bad-style 't)
	      "Generator yields more values than collector expects.  Removing collector and filter2"))))
    (setf generator-description generator-specs)
    (setf generated-values (and generated-arglist
				  (combine-generator-arglist values
							      (arglist data-generator)
							      generated-arglist
							      generator-specs
							      :user-specified-arglist
							      final-collector-arglist)))
    (setf generator-function (or data-generator #'bootstrap-trigger-generator-function))))

(si:defwiredfun bootstrap-region-generator-function
       (form collect-initial-values collect-final-values compute-differences .first-realtime. &rest args)
  (declare (sys:downward-funarg collect-initial-values collect-final-values))
  (ignore .first-realtime. compute-differences)
  (when collect-initial-values
    ;; avoid recursive metering
    (let ((*metering-enabled* nil))
      (apply collect-initial-values args)))
  (flet ((gen-function-conclusion (.first-realtime. &rest args)
	   (declare (sys:downward-function))
	   (ignore .first-realtime.)
	   (let ((*metering-enabled* nil))
	     (apply collect-final-values args))))
    (funcall form #'gen-function-conclusion)))

(add-initialization "wire region generator function"
		    `(si:wire-function-for-metering #'bootstrap-region-generator-function)
		    ()
		    '*metering-initializations*)

(defmethod (set-trigger-generator metering-region)
	   (data-generator generator-specs
			   &key override initial-collector-arglist final-collector-arglist)
  (ignore override)
  (let ((generated-arglist nil)
	(initial-generated-arglist nil))
    (if (null data-generator)
	(when generator-specs
	  (cl:warn '(:bad-style 't)
		   "Setting description to NIL since there is no data generator.")
	  (setq generator-specs nil))
	(unless ( 5 (ldb si:%%arg-desc-min-args (args-info data-generator))
		   (+ 5 (length initial-values)))
	  (error "Invalid generator function: the top level of the generator should be
        (LAMBDA (FORM COLLECT-INITIAL-VALUES COLLECT-FINAL-VALUES COMPUTE-CHANGES-FLAG .FIRST-REALTIME.))."))
	(let (generator-args-info)
	  (ignore generator-args-info)
	  #||
	  ;; this can't be used, because the generator will do random things with the last N
	  ;; args, which I don't know how to cobble up to avoid errors. 
	  (apply data-generator
		   #'(lambda (continuation)
		       (declare (sys:downward-function))
		       (setq generator-args-info (args-info continuation)))
		   nil
		   #'ignore
		   nil
		   0
		   (make-list (length initial-values)))
	  ||#
	  (multiple-value-bind (args generator-values)
	      (arglist data-generator)
	    (setf generated-arglist
		  (combine-generator-arglist values args generator-values generator-specs
					     :user-specified-arglist final-collector-arglist))
	    (setf initial-generated-arglist
		  (combine-generator-arglist
		    initial-values args
		    (cdr (assoc 'initial-values (debugging-info data-generator)))
		    generator-description
		    :initial 't
		    :user-specified-arglist initial-collector-arglist)))
	  (when
	    (and
	      ;; one more argument - .FIRST-REALTIME.
	      #||
	      ;; We can't do this once we allow initial-trigger-values, since we can't legally
	      ;; get our hands on the continuation.
	      (compatible-function-call name values data-generator 1 generator-args-info 't)
	      ||#
	      (or collector-description (car filter2))
	      (not (and (car filter2)
			(compatible-function-call nil generated-arglist nil 0 (car filter2))))
	      (not (and collector-description
			(compatible-function-call
			  nil generated-arglist nil 0 collector-function))))
	    (setf collector-description nil)
	    (when filter2
	      (setf (car filter2) nil))
	    (setf collector-function #'ignore)
	    (cl:warn
	      '(:bad-style 't)
	      "Generator yields more values than collector expects.  Removing collector and filter2"))))
  (setf generator-description generator-specs)
  (setf generated-values generated-arglist)
  (setf initial-generated-values initial-generated-arglist)
  (setf generator-function (or data-generator #'bootstrap-region-generator-function))))


(si:defwiredfun bootstrap-interval-generator-function (ignore collect-final-values .first-realtime. &rest args)
  (ignore .first-realtime.)
  (let ((*metering-enabled* nil))
    (apply collect-final-values args)))

(add-initialization "wire interval generator function"
		    `(si:wire-function-for-metering #'bootstrap-interval-generator-function)
		    ()
		    '*metering-initializations*)

;;; avoid error checking for now -- just get it working....
(defmethod (set-trigger-generator metering-interval)
	   (data-generator generator-specs
			   &key override initial-collector-arglist final-collector-arglist)
  (ignore override)
  (if (null data-generator)
      (when generator-specs
	(cl:warn '(:bad-style 't)
		 "Setting description to NIL since there is no data generator.")
	(setq generator-specs nil))
      (if (not (and (listp data-generator) (= (length data-generator) 2)))
	  (error "Metering Intervals require 2 generator functions.  One for the preamble
and one for the conclusion.")
	  (let ((generator1 (car data-generator))
		(generator2 (second data-generator)))
	    (unless (compatible-function-call
		      name initial-values generator1 2 generator1)
	      (error
		"Invalid generator function: the top level of the generator preamble should be
        (LAMBDA (COLLECT-INITIAL-VALUES .FIRST-REALTIME. ...))."))
	    (when
	      (and 
		(compatible-function-call
		  name values generator1 3 (args-info generator2) 't)
		(or collector-function (car filter2))
		(not
		  (and (car filter2)
		       (compatible-function-call nil generated-values nil 0 (car filter2))))
		(not (and
		       collector-function
		       (compatible-function-call
			 nil generated-values nil ;4
			 0 collector-function))))
	      (setf collector-description nil)
	      (when filter2
		(setf (car filter2) nil))
	      (setf collector-function #'ignore)
	      (cl:warn
		'(:bad-style 't)
		"Generator yields different values than collector expects.  Removing collector and filter2")))))
  ;; not generator1 and generator2 so that it will work with  data-generator = NIL.
  (setf initial-generator-function (car data-generator))
  (setf generator-description generator-specs)
  (setf generated-values (and generator-specs
			      (multiple-value-bind (args generator-values)
				  (arglist (car data-generator))
				(combine-generator-arglist
				  values args generator-values generator-specs
				  :user-specified-arglist final-collector-arglist))))
  (setf initial-generated-values
	(and generator-specs
	     (combine-generator-arglist
	       initial-values (arglist (car data-generator))
	       (cdr (assoc 'initial-values (debugging-info (car data-generator))))
	       generator-description
	       :initial 't
	       :user-specified-arglist
	       initial-collector-arglist)))

  (setf generator-function
	(or (second data-generator) #'bootstrap-interval-generator-function)))


;; still needs error checking.
(defmethod (set-trigger-filter1 basic-trigger) (filter)
  (when filter
    (compatible-function-call name values
			      filter 0 filter 't))
  (setf filter1 filter))

(defmethod (set-trigger-filter1 metering-region) (filter)
  (when filter
    (compatible-function-call name values filter 0 filter 't)
    #||
    (let ((num-args (ldb si:%%arg-desc-min-args (args-info filter))))
      (unless (zerop num-args)
	(error
	  "The filter for metering a region conditionally should not take any arguments."
)))
    ||#)
  (setf filter1 filter))

(defmethod (set-trigger-filter1 metering-interval) (filter)
  (when filter
    (compatible-function-call name values
			      filter 0 filter 't))
  (setf filter1 filter))

(defmethod (set-trigger-filter3 metering-interval) (filter)
  (when filter
    (compatible-function-call name initial-values
			      filter 0 filter 't))
  (setf filter3 filter))

(defun create-filtered-collector (filter collector)
  (flet ((filtered-collector (&rest args)
	   (when (apply filter args)
	     (apply collector args))))
    #'filtered-collector))

(defun filtered-collector-p (object)
  (and (si:lexical-closure-p object)
       (equal (sys:function-name object)
	      '(:internal create-filtered-collector 0 filtered-collector))
       (ignore-errors (symbol-value-in-closure object 'filter))
       (ignore-errors (symbol-value-in-closure object 'collector))))

(defun remove-filter-from-collector-function (collector)
  (if (filtered-collector-p collector)
      (symbol-value-in-closure collector 'collector)
      collector))

;; filter2 is a list for regions and intervals, the car being final (most common),
;; cadr being initial
(defmethod (set-trigger-filter2 basic-trigger) (filter)
  ;; check for compatibility
  (when filter
    (if (and generated-values generator-description)
	(unless (compatible-function-call nil generated-values filter 0 filter)
	  (when (compatible-function-call name values filter 0 filter 't)
	    (cerror "Set filter but remove generator."
		    "Filter ~S doesn't match generator values for trigger ~S." filter name)
	    (set-trigger-generator self nil nil)))
	(compatible-function-call name values filter 0 filter 't)))
  ;; now install
  (unless filter2 (setf filter2 (list nil nil)))
  (let* ((raw-collector-function (remove-filter-from-collector-function collector-function))
	 (new-collector-function (if filter
				     (create-filtered-collector filter raw-collector-function)
				     raw-collector-function)))
    (without-interrupts
      (setf (car filter2) filter)
      (setf collector-function new-collector-function)))
  (not (null filter)))

(defmethod (set-trigger-initial-filter2 metering-region) (filter)
  (when filter
    (if (and initial-generated-values generator-description)
	(unless (compatible-function-call
		  nil (get-initial-trigger-values self) filter 0 filter)
	  (when (compatible-function-call name initial-values filter 0 filter 't)
	    (cerror "Set filter but remove generator."
		    "Filter ~S doesn't match initial generator values for trigger ~S."
		    filter name)
	    (set-trigger-generator self nil nil)))
	(compatible-function-call name (get-initial-trigger-values self) filter 0 filter 't)))
  ;; now install
  (unless filter2 (setf filter2 (list nil nil)))
  (let* ((raw-collector-function
	   (remove-filter-from-collector-function initial-collector-function))
	 (new-collector-function (if filter
				     (create-filtered-collector filter raw-collector-function)
				     raw-collector-function)))
    (without-interrupts
      (setf (second filter2) filter)
      (setf initial-collector-function new-collector-function)))
  (not (null filter)))



(defmethod (get-trigger-values basic-trigger) ()
  (or generated-values values))
(defmethod (get-initial-trigger-values metering-region) ()
  (if initial-generator-function initial-generated-values initial-values))
(defmethod (get-initial-trigger-values metering-interval) ()
  (if initial-generator-function initial-generated-values initial-values))
(defmethod (set-trigger-value-names basic-trigger) (names)
  (if (and (= (list-length generated-values) (list-length names))
	   (loop for name in names always (symbolp name)))
      (set generated-values names)
      (error "~S must be a list of symbols, exactly matching in form ~S"
	     names generated-values)))

(defmethod (get-presentation-type basic-trigger) (value-name)
  (and (member value-name values)
       (nth (position value-name values) value-types)))
