;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Actual meat of creating a metering point.
(defmacro define-metering-point
	  ((name &optional description warn-about-duplicates?
		 &key (env '(:process :scheduler))
		 conditions)
	   arglist &body forms)
  (ignore warn-about-duplicates?)
  (let ((number-of-args (length arglist)))
    (unless (= (length forms) number-of-args)
      (error "There are only ~D forms, but ~D arguments that need values"
	     (length forms)
	     number-of-args))
    (let* ((trigger-type (if conditions 'restricted-trigger 'trigger))
	   (trigger-variable-name
	     (find-trigger-variable-name name trigger-type arglist description))
	   (controlling-switch (gensym))
	   (start-time (gensym))
	   (test-trigger-variable-name (gensym))
	   (update-overhead
	     `(unless (or ancestor-collecting-overhead? (not .significant-time.))
		,(cond
		   ((and (member :process env) (member :scheduler env))
		    `(if process::*in-process-dispatcher*
			 (si:incf* si:*scheduler-metering-overhead*
				   (sys:%32-bit-difference (sys:%microsecond-clock)
							   ,start-time))
			 (si:incf* (metering:process-metering-overhead process::%real-current-process)
				   (sys:%32-bit-difference (sys:%microsecond-clock)
							   ,start-time))))
		   ((member :process env)
		    `(si:incf* (metering:process-metering-overhead process::%real-current-process)
			       (sys:%32-bit-difference (sys:%microsecond-clock) ,start-time)))
		   ((member :scheduler env)
		    `(si:incf* si:*scheduler-metering-overhead*
			       (sys:%32-bit-difference (sys:%microsecond-clock)
						       ,start-time)))))))
      (when conditions
	(append-cautions-from-conditions (eval trigger-variable-name) conditions))
      `(progn
	 (locally
	   (declare (special ,trigger-variable-name))

	   (let ((,start-time (sys:%microsecond-clock))
	     ;; A wart on the side of the compiler:  Why isn't there a better way to determine
	     ;; whether a form is being compiled into a file or not?
	     ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			  COMPILER:*BINARY-OUTPUT-STREAM*)
		 `((dummy
		     ',(cons
			 COMPILER:EVAL-AT-LOAD-TIME-MARKER
			 `(let ((,test-trigger-variable-name
				 (find-trigger-variable-name ',name ',trigger-type ',arglist ',description)))
			    (when (not (eql ,test-trigger-variable-name ',trigger-variable-name))
			      (if (variable-boundp ,trigger-variable-name)
				  (warn (:bad-style 't)
					"This function contains a metering point that is incompatible with the current world.~\
It probably won't work to meter this.   Recompiling will fix this.")
				  (setq ,trigger-variable-name ,test-trigger-variable-name)))))))))
	     (declare (inline metering:process-metering-overhead))
     ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			  COMPILER:*BINARY-OUTPUT-STREAM*)
	 `((ignore dummy)))
	 (when (and *metering-enabled*
		    (not *metering-overhead-accounted*)
		    ,trigger-variable-name
		    (trigger-control ,trigger-variable-name))
	   (let* ((ancestor-collecting-overhead? *metering-overhead-accounted*)
		  (*metering-overhead-accounted* 't)
		  (,controlling-switch (trigger-control ,trigger-variable-name))
		  (.significant-time. nil)
		  ;; avoid recursive metering.
		  (*metering-enabled* nil))
	     (when (and ,controlling-switch
			(let ((state (control-state ,controlling-switch)))
			  (or (eq state 't)
			      (and state 
				   (setq .significant-time. t)
				   (metering-enabled? ,controlling-switch)))))
	       (setq .significant-time. t)
	       ;; maybe we should evaluate the forms in a let, so we can meter them also?
	       (when (and (trigger-collector-function ,trigger-variable-name)
			  (or (null (trigger-filter1 ,trigger-variable-name))
			      (funcall (trigger-filter1 ,trigger-variable-name)
				       ,@forms)))
		 (funcall (trigger-generator-function ,trigger-variable-name)
			  (trigger-collector-function ,trigger-variable-name)
			  ,start-time
			  ,@forms)))
	     ,update-overhead))))))))

(defsubst funcall-in-region (region closure)
  (declare (dbg:error-reporter))
  (unwind-protect
      (progn
	(enter-region region)
	(funcall closure))
    (exit-region region)))

(defmacro funcall-in-region-1 (region closure 
			     &optional
			     (accounted metering::*metering-overhead-accounted*)
			     (wired nil))
  `(let ((.region. ,region))
     (unwind-protect
	 (progn
	   (enter-region .region.)
	   (,(if wired 'metering:aux-stack-bind 'let)
	    ((metering::*metering-overhead-accounted* ,accounted))
	    (funcall ,closure)))
       (exit-region .region.))))

(defsubst apply-in-region (region closure args)
  (declare (dbg:error-reporter))
  (unwind-protect
      (progn
	(enter-region region)
	(apply closure args))
    (exit-region region)))

(defmacro apply-in-region-1 (region closure args
			     &optional
			     (accounted metering::*metering-overhead-accounted*)
			     (wired nil))
  `(let ((.region. ,region))
     (unwind-protect
	 (progn
	   (enter-region .region.)
	   (,(if wired 'metering:aux-stack-bind 'let)
	    ((metering::*metering-overhead-accounted* ,accounted))
	    (apply ,closure ,args)))
       (exit-region .region.))))

;; always patch the ZWEI:DEFINDENTATION when you patch this function
(defmacro meter-form
	  ((name &optional description warn-about-duplicates?
		 &key (env '(:process :scheduler))
		 conditions)
	   arglist
	   form
	   &body values-to-pass-on)
  (ignore warn-about-duplicates?)
  (let ((number-of-args (length arglist))
	(start-time (gensym))
	(continuation (gensym))
	(trigger-type (if conditions 'restricted-metering-region 'metering-region))
	(ancestor-collecting-overhead? (gensym)))
    (unless (= (length values-to-pass-on) number-of-args)
      (error "There are only ~D forms, but ~D arguments that need values"
	     (length values-to-pass-on)
	     number-of-args))
    (let ((trigger-variable-name
	    (find-trigger-variable-name
	      name trigger-type arglist description))
	  (test-trigger-variable-name (gensym))
	  (update-overhead
	    `(unless (or ,ancestor-collecting-overhead? (not .significant-time.))
	       ,(cond
		  ((and (member :process env) (member :scheduler env))
		   `(if process::*in-process-dispatcher*
			(si:incf* si:*scheduler-metering-overhead*
				  (sys:%32-bit-difference (sys:%microsecond-clock)
							  ,start-time))
			(si:incf* (metering:process-metering-overhead process::%real-current-process)
				  (sys:%32-bit-difference (sys:%microsecond-clock)
							  ,start-time))))
		  ((member :process env)
		   `(si:incf* (metering:process-metering-overhead process::%real-current-process)
			      (sys:%32-bit-difference (sys:%microsecond-clock) ,start-time)))
		  ((member :scheduler env)
		   `(si:incf* si:*scheduler-metering-overhead*
			      (sys:%32-bit-difference (sys:%microsecond-clock)
						      ,start-time)))))))
      (when conditions
	(append-cautions-from-conditions (eval trigger-variable-name) conditions))
      `(progn
	 ;; To do: figure out when we can avoid the closure - i.e. volume of code isn't too
	 ;; high.  walk the code, macroexpand all, check size?
	 (locally
	   (declare (special ,trigger-variable-name))
	   (let ((,start-time (sys:%microsecond-clock))
	     ;; A wart on the side of the compiler:  Why isn't there a better way to determine
	     ;; whether a form is being compiled into a file or not?
	     ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			  COMPILER:*BINARY-OUTPUT-STREAM*)
		 `((dummy
		     ',(cons
			 COMPILER:EVAL-AT-LOAD-TIME-MARKER  
			 `(let ((,test-trigger-variable-name
				 (find-trigger-variable-name
				   ',name ',trigger-type ',arglist ',description)))
			    (when (not (eql ,test-trigger-variable-name ',trigger-variable-name))
			      (if (variable-boundp ,trigger-variable-name)
				  (warn (:bad-style 't)
					"This function contains a metering point that is incompatible with the current world.~\
It probably won't work to meter this.   Recompiling will fix this.")
				  (setq ,trigger-variable-name ,test-trigger-variable-name)))
			    ,test-trigger-variable-name))))))
	     (declare (inline metering:process-metering-overhead))
	     ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			  COMPILER:*BINARY-OUTPUT-STREAM*)
		 `((ignore dummy)))
	     (if (and *metering-enabled*
		      ,trigger-variable-name
		      (or (trigger-control ,trigger-variable-name)
			  (trigger-active-region ,trigger-variable-name)))
		 (let* ((,ancestor-collecting-overhead? *metering-overhead-accounted*)
			(*metering-overhead-accounted* 't)
			(controlling-switch (trigger-control ,trigger-variable-name))
			(region (trigger-active-region ,trigger-variable-name))
			(.significant-time. region)
			#||(*metering-enabled* nil)||#)
		   ;; we use nested FLET's rather than a single LABELS so that we don't
		   ;; shadow the symbol CLOSURE-OF-FORM inside ,form.
		   (multiple-value-prog1
		     (flet ((closure-of-form ()
			      (declare (sys:downward-function))
			      (let ((*metering-overhead-accounted*
				      ,ancestor-collecting-overhead?))
				,update-overhead
				,form)))
		       (if (and controlling-switch
				(not ,ancestor-collecting-overhead?)
				(let ((state (control-state controlling-switch)))
				  (or (eq state 't)
				      (and state 
					   (setq .significant-time. t)
					   (metering-enabled? controlling-switch)))))
			   (flet ((metered-closure-of-form (,continuation)
				    (declare (sys:downward-function))
				    (unwind-protect
					(if region
					    (funcall-in-region region #'closure-of-form)
					    (let ((*metering-overhead-accounted*
						    ,ancestor-collecting-overhead?))
					      ,update-overhead
					      ,form))
				      (setf ,start-time
					    (sys:%microsecond-clock))
				      (when (or (null (trigger-filter1 ,trigger-variable-name))
						(funcall (trigger-filter1 ,trigger-variable-name)
							 ,@values-to-pass-on))
					(funcall ,continuation
						 ,start-time ,@values-to-pass-on)))))
			     (setq .significant-time. t)
			     (funcall (trigger-generator-function ,trigger-variable-name)
				      #'metered-closure-of-form
				      (trigger-initial-collector-function
					,trigger-variable-name)
				      (trigger-collector-function ,trigger-variable-name)
				      (trigger-compute-differences ,trigger-variable-name)
				      ,start-time))
			   (multiple-value-prog1
			     (if region 
				 (funcall-in-region region #'closure-of-form)
				 (closure-of-form))
			     (setf ,start-time
				   (sys:%microsecond-clock)))))
		     ,update-overhead))
		   ,form)))))))

(zwei:defindentation (meter-form 2 3 3 1))

(defmacro make-metering-stack (size)
  `(make-array ,size :fill-pointer 0 :leader-length 2 :leader-list (list 0 0)
	       :adjustable 't))
(defmacro metering-stack-frame-pointer (stack) `(array-leader ,stack 1))
(defmacro metering-stack-pointer (stack) `(array-leader ,stack 0))

(defmacro push-new-stack-frame (stack &rest initial-data &environment env)
  (once-only (stack &environment env)
    `(progn
       (vector-push-extend (metering-stack-frame-pointer ,stack) ,stack)
       (setf (metering-stack-frame-pointer ,stack) (1- (metering-stack-pointer ,stack)))
       ,@(loop for data in initial-data collect `(vector-push-extend ,data ,stack)))))

(defsubst pop-frame (stack &optional old-stack-pointer)
  (declare (ignore old-stack-pointer))
  (let ((old-fp (metering-stack-frame-pointer stack)))
    (setf (metering-stack-frame-pointer stack) (or (aref stack old-fp) 0))
    (setf (metering-stack-pointer stack) (or old-fp 0)))
  )

(defmacro start-metering-interval
	  ((name &optional description warn-about-duplicates?
		 &key (env '(:process :scheduler))
		 conditions)
	   arglist
	   &body forms)
  (ignore warn-about-duplicates?)
  (let ((number-of-args (length arglist))
	(start-time (gensym))
	(trigger-type (if conditions
			  '(restricted-metering-interval :initial)
			  '(metering-interval :initial)))
	(ancestor-collecting-overhead? (gensym)))
    (unless (= (length forms) number-of-args)
      (error "There are only ~D forms, but ~D arguments that need values"
	     (length forms)
	     number-of-args))
    (let ((trigger-variable-name
	    (find-trigger-variable-name
	      name trigger-type arglist description))
	  (trigger (gensym))
	  (test-trigger-variable-name (gensym))
	  (update-overhead
	    `(unless (or ,ancestor-collecting-overhead? (not .significant-time.))
	       ,(cond
		  ((and (member :process env) (member :scheduler env))
		   `(if process::*in-process-dispatcher*
			(si:incf* si:*scheduler-metering-overhead*
				  (sys:%32-bit-difference (sys:%microsecond-clock)
							  ,start-time))
			(si:incf* (metering:process-metering-overhead process::%real-current-process)
				  (sys:%32-bit-difference (sys:%microsecond-clock)
							  ,start-time))))
		  ((member :process env)
		   `(si:incf* (metering:process-metering-overhead process::%real-current-process)
			      (sys:%32-bit-difference (sys:%microsecond-clock) ,start-time)))
		  ((member :scheduler env)
		   `(si:incf* si:*scheduler-metering-overhead*
			      (sys:%32-bit-difference (sys:%microsecond-clock)
						      ,start-time)))))))
      (when conditions
	(append-cautions-from-conditions (eval trigger-variable-name) conditions))
      `(progn
	 (locally
	   (declare (special ,trigger-variable-name))
	   (let* ((,start-time (sys:%microsecond-clock))
		  ;; A wart on the side of the compiler:  Why isn't there a better way to
		  ;; determine whether a form is being compiled into a file or not?
		  ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			       COMPILER:*BINARY-OUTPUT-STREAM*)
		      `((dummy
			  ',(cons
			      COMPILER:EVAL-AT-LOAD-TIME-MARKER  
			      `(let ((,test-trigger-variable-name
				      (find-trigger-variable-name
					',name ',trigger-type ',arglist ',description)))
				 (when (not (eql ,test-trigger-variable-name ',trigger-variable-name))
				   (if (variable-boundp ,trigger-variable-name)
				       (warn (:bad-style 't)
					     "This function contains a metering point that is incompatible with the current world.~\
It probably won't work to meter this.   Recompiling will fix this.")
				       (setq ,trigger-variable-name ,test-trigger-variable-name)))
				 ,test-trigger-variable-name)))))
		   (,ancestor-collecting-overhead? *metering-overhead-accounted*)
		   (*metering-overhead-accounted* 't)
		   (,trigger ,trigger-variable-name)
		   (.significant-time. nil))
	     (declare (inline metering:process-metering-overhead))
	     ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			  COMPILER:*BINARY-OUTPUT-STREAM*)
		 '((ignore dummy)))
	      (when (and *metering-enabled* (not ,ancestor-collecting-overhead?)
			 ,trigger (trigger-control ,trigger))
		(let ((*metering-enabled* nil))
		  (when (and (or *metering-stack*
				 (process-meter-stack process::%real-current-process))
			     (let ((control (trigger-control ,trigger)))
			       (and control
				    (let ((state (control-state control)))
				      (or (eq state 't)
					  (and state
					       (setq .significant-time. t)
					       (metering-enabled? control)))))))
		    (setq .significant-time. t)
		    (when (or (null (trigger-filter3 ,trigger))
			      (funcall (trigger-filter3 ,trigger) ,@forms))
		      (incf (trigger-interval-depth ,trigger))
		      (if (trigger-initial-generator-function ,trigger)
			  (let ((*metering-stack* (or *metering-stack*
						      (process-meter-stack process::%real-current-process))))
			    (push-new-stack-frame *metering-stack*)
			    (funcall (trigger-initial-generator-function ,trigger)
				     (trigger-initial-collector-function ,trigger)
				     ,start-time ,@forms))
			  (when (trigger-initial-collector-function ,trigger)
			    (funcall (trigger-initial-collector-function ,trigger)
				     ,@forms)))))))
	      ,update-overhead)
	   (values))))))

(defmacro end-metering-interval 
	  ((name &optional description warn-about-duplicates?
		 &key (env '(:process :scheduler))
		 conditions)
	   arglist
	   &body forms)
  (ignore warn-about-duplicates?)
  (let ((number-of-args (length arglist))
	(start-time (gensym))
	(trigger-type (if conditions
			  '(restricted-metering-interval :final)
			  '(metering-interval :final)))
	(ancestor-collecting-overhead? (gensym)))
    (unless (= (length forms) number-of-args)
      (error "There are only ~D forms, but ~D arguments that need values"
	     (length forms)
	     number-of-args))
    (let ((trigger-variable-name
	    (find-trigger-variable-name
	      name trigger-type arglist description))
	  (trigger (gensym))
	  (test-trigger-variable-name (gensym))
	  (update-overhead
	    `(unless (or ,ancestor-collecting-overhead? (not .significant-time.))
	       ,(cond
		  ((and (member :process env) (member :scheduler env))
		   `(if process::*in-process-dispatcher*
			(si:incf* si:*scheduler-metering-overhead*
				  (sys:%32-bit-difference (sys:%microsecond-clock)
							  ,start-time))
			(si:incf* (metering:process-metering-overhead process::%real-current-process)
				  (sys:%32-bit-difference (sys:%microsecond-clock)
							  ,start-time))))
		  ((member :process env)
		   `(si:incf* (metering:process-metering-overhead process::%real-current-process)
			      (sys:%32-bit-difference (sys:%microsecond-clock) ,start-time)))
		  ((member :scheduler env)
		   `(si:incf* si:*scheduler-metering-overhead*
			      (sys:%32-bit-difference (sys:%microsecond-clock)
						      ,start-time)))))))
      (when conditions
	(append-cautions-from-conditions (eval trigger-variable-name) conditions))
      `(progn
	 (locally
	   (declare (special ,trigger-variable-name))
	   (let* ((,start-time (sys:%microsecond-clock))
		  ;; A wart on the side of the compiler:  Why isn't there a better way to
		  ;; determine whether a form is being compiled into a file or not?
		  ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			       COMPILER:*BINARY-OUTPUT-STREAM*)
		      `((dummy
			  ',(cons
			      COMPILER:EVAL-AT-LOAD-TIME-MARKER  
			      `(let ((,test-trigger-variable-name
				      (find-trigger-variable-name
					',name ',trigger-type ',arglist ',description)))
				 (when (not (eql ,test-trigger-variable-name ',trigger-variable-name))
				   (if (variable-boundp ,trigger-variable-name)
				       (warn (:bad-style 't)
					     "This function contains a metering point that is incompatible with the current world.~\
It probably won't work to meter this.   Recompiling will fix this.")
				       (setq ,trigger-variable-name ,test-trigger-variable-name)))
				 ,test-trigger-variable-name)))))
		  (,ancestor-collecting-overhead? *metering-overhead-accounted*)
		  (*metering-overhead-accounted* 't)
		  (,trigger ,trigger-variable-name)
		  (.significant-time. nil))
	     (declare (inline metering:process-metering-overhead))
	     ,@(when (AND (VARIABLE-BOUNDP COMPILER:*BINARY-OUTPUT-STREAM*)
			  COMPILER:*BINARY-OUTPUT-STREAM*)
		 '((ignore dummy)))
	     (let ((stack (or *metering-stack* (process-meter-stack process::%real-current-process))))
		(when stack
		  ;; avoid recursive metering.
		  (if (and *metering-enabled*
			   (not ,ancestor-collecting-overhead?)
			   ,trigger
			   (let ((control (trigger-control ,trigger)))
			     (and control
				  #+ignore
				  (let ((state (control-state control)))
				    (or (eq state 't)
					(and state
					     (metering-enabled? control))))
				  #-ignore
				  (control-state control))))
		      (let ((*metering-enabled* nil))
			(setq .significant-time. t)
			(when (or (null (trigger-filter1 ,trigger))
				  (funcall (trigger-filter1 ,trigger) ,@forms))
			  (let ((*metering-stack* stack))
			    (funcall (trigger-generator-function ,trigger)
				     (trigger-compute-differences ,trigger)
				     (trigger-collector-function ,trigger)
				     ,start-time ,@forms)))
			(pop-frame stack))
		      ;; cleanup is necessary, regardless of state of metering.
		      (pop-frame stack))
		  (when ,trigger
		    (decf (trigger-interval-depth ,trigger)))))
	      ,update-overhead)
	   (values))))))

(zwei:defindentation (end-metering-interval 2 3 3 1))


;;;; The rest of this stuff are used by the cold-load, so I'm keeping them seperate.

#||

;;+++ I don't think this is needed anymore, but I'm not going to delete it until after the
;; first successful world build

;;; Note that METERING:METERING-ENABLED? and METERING:METER will be undefined when the
;;; scheduler is compiled, and so, will generate warnings.
si:(defmacro meter-process-switch (from-process to-process)
  (let ((start-time (gensym)))
    `(let ((,start-time (sys:%microsecond-clock)))
       (and metering:*metering-enabled* *process-switch-metering-trigger*
	    (let ((control (metering:trigger-control *process-switch-metering-trigger*)))
	      (when
		(and control
		     (let ((state (metering:control-state control)))
		       (or (eq state 't)
			   (and state
				;; if to-process is null that means we are switching to the
				;; scheduler idle-loop.  We are known to have checked that
				;; from-process is not null, before ever checking this macro
				,(if (null to-process)
				     `(trigger-metering-on-process-switch? ,from-process)
				     `(or (trigger-metering-on-process-switch? ,to-process)
					  (and ,from-process
					       (trigger-metering-on-process-switch?
						 ,from-process))))
				(metering:metering-enabled?
				  control ,from-process ,to-process)))))
		(let ((metering:*metering-enabled* nil))
		  (metering:meter *process-switch-metering-trigger*
				  ,start-time
				  ,from-process
				  ,to-process))))))))

||#

;;Needed by paging.  STORAGE.LISP

si:(defmacro without-metering-on-aux-stack (&body body)
  `(unwind-protect
       (progn
	 (setq metering:*metering-enabled* nil)
	 ,@body)
     (setq metering:*metering-enabled* 't)))

si:(defmacro metering::inline-instance-ref (flavor iv instance)
  (let* ((flavor-def (flavor:find-flavor flavor t 'compile))
	 (offset
	   (1+ (scl:position
		 iv #---ignore (cl:getf (flavor::flavor-plist flavor-def)
					:ordered-instance-variables)
		    ;; This doesn't appear to get properly composed at compile time --SWM
		    #+++ignore (flavor::flavor-all-ordered-instance-variables flavor-def)))))
    `(si:%p-contents-offset (si:%make-pointer si:dtp-locative (si:%pointer ,instance))
			    ,offset)))

;; special form of metering point for use on the aux stack.  This is not an exported 
;; interface.
si:(defmacro metering::define-wired-metering-point
	     ((name trigger-variable control-variable &optional description)
	      arglist &body forms)
     ;; this is only here for symmetry.
     (ignore name description)
     (let ((number-of-args (length arglist))
	   (generator-function (gensym))
	   (collector-function (gensym))
	   (start-time (gensym)))
       (unless (= (length forms) number-of-args)
	 (error "There are only ~D forms, but ~D arguments that need values"
		(length forms)
		number-of-args))
       `(progn
	  (cl:locally
	    (declare (special ,trigger-variable ,control-variable))
	    (let ((,start-time (sys:%microsecond-clock)))
	      (when (and metering:*metering-enabled* ,control-variable ,trigger-variable)
		;; avoid recursive metering.
		(without-metering-on-aux-stack
		  (let ((,generator-function (metering::inline-instance-ref
					       metering::basic-trigger
					       metering::generator-function
					       ,trigger-variable))
			(,collector-function (metering::inline-instance-ref
					       metering::basic-trigger
					       metering::collector-function
					       ,trigger-variable)))
		    (when (and ,generator-function ,collector-function)
		      (funcall ,generator-function ,collector-function ,start-time ,@forms))))))))))
 
