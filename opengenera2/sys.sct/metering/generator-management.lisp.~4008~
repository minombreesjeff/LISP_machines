;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *generator-types* (make-hash-table :size 10 :test #'equal))

(defmethod (make-instance generator-type :after) (&rest init-plist)
  (ignore init-plist)
  (setf (gethash name *generator-types*) self))

(defun get-generator-type (type-name)
  (gethash type-name *generator-types*))

(defun generator-types ()
  (loop for type being the hash-elements of *generator-types*
	collect type))

(defun generator-type-names ()
  (loop for type being the hash-elements of *generator-types*
	collect (generator-type-name type)))

;;;
;;;

(defvar *generators* (make-hash-table :size 10 :test #'equal))

(defmethod (make-instance generator :after) (&rest init-plist)
  (block outer-body
    (if (member :force init-plist)
	(setf (gethash name *generators*) self)
	(let ((old-version (gethash name *generators*)))
	  (if old-version
	      (progn
		(format *query-io* "~&A generator named ~A already exists:" name)
		(describe old-version 't)
		(if (y-or-n-p "Are you sure you want to redefine it?")
		    (setf (gethash name *generators*) self)
		    (return-from outer-body (values))))
	      (let ((confusing-versions (loop for g in (get-generators)
					      when (string-equal (string name)
								 (string (generator-name g)))
						collect g)))
		(if confusing-versions
		    (progn
		      (format
			*query-io* "~&A different generator named ~S already exists:" name)
		      (describe old-version 't)
		      (if (y-or-n-p "Adding a new one with such a similar name might cause confusion. Are you sure you want to define it?")
			  (setf (gethash name *generators*) self)
			  (return-from outer-body (values))))
		    (setf (gethash name *generators*) self))))))
    (flet ((gentemp-in-appropriate-package (name)
	     (gentemp "T"
		      (or (and (symbolp name)
			       (let ((pkg (symbol-package name)))
				 (and pkg
				      (not (si:pkg-locked pkg))
				      pkg)))
			  (pkg-find-package "METERING")))))
      (setf recursive-value (gentemp-in-appropriate-package name))
      (proclaim `(special ,recursive-value))
      (set recursive-value 0)
      (setf recursive-overhead-value (gentemp-in-appropriate-package name))
      (proclaim `(special ,recursive-overhead-value))
      (set recursive-overhead-value 0))
    self))

(defun get-generators ()
  (loop for generator being the hash-elements of *generators*
	collect generator))

(defun get-generator-names ()
  (loop for generator being the hash-elements of *generators*
	collect (generator-name generator)))

(defun find-generator-named (name)
  (gethash name *generators*))

(defun parse-generator (descriptor &optional dont-recurse)
  (or (and (typep descriptor 'generator)
	   descriptor)
      (and (or (stringp descriptor) (symbolp descriptor) (characterp descriptor))
	   (or (find-generator-named descriptor)
	       (loop with name = (string descriptor)
		     for generator being the hash-elements of *generators*
		     when (string-equal (string (generator-name generator))
					name)
		       return generator)))
      (and (or (symbolp descriptor) (listp descriptor)) dont-recurse
	   (ignore-errors (parse-generator (eval descriptor) 't)))
      (error "~S does not describe a valid metering data generator." descriptor)))

;;;
;;;


(defun find-flavor-class (flavor-name)
  (or (gethash flavor-name *class-variables*)
      (setf (gethash flavor-name *class-variables*) (make-instance flavor-name))))


;;; generator types.

(make-instance 'generator-type :name :integer :description "A numerical quantity"
	       :form-to-add '+ :form-to-compute-change '- :form-to-subtract-offset '-
	       :form-to-accumulate-overhead '+
	       :null-value 0
	       :presentation-type 'integer)

(make-instance 'generator-type :name :time :description "Units of time."
	       :form-to-add '+
	       :form-to-compute-change 'time-difference
	       :form-to-subtract-offset 'si:%32-bit-difference
	       :form-to-accumulate-overhead 'si:%32-bit-plus
	       :null-value 0
	       :presentation-type 'metering-microseconds)

(make-instance 'generator-type :name :internal-time :description "Units of time."
	       :form-to-add 'si:%32-bit-plus
	       :form-to-compute-change 'si:%32-bit-difference
	       :form-to-subtract-offset 'si:%32-bit-difference
	       :form-to-accumulate-overhead 'si:%32-bit-plus
	       :null-value 0
	       :presentation-type 'metering-microseconds)

(make-instance 'generator-type :name :values 
	       :description "Arbitrary values, symbols, or lists"
	       :null-value nil
	       :presentation-type 'sys:expression)
