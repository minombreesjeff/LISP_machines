;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;; Patch file for METERING-SUBSTRATE version 444.1
;;; Reason: Variable METERING:*INCONSISTENT-FUDGE-FACTORS-ACTION*:  default to :ignore on VLM
;;; Function METERING:COMPUTE-FUDGE-FACTOR:  don't even try on VLM
;;; Written by Reti, 10/07/98 09:59:56
;;; while running on Sour Cream from FEP0:>even-more.ilod.1
;;; with System 452.22, CLOS 439.0, RPC 443.1, Embedding Support 435.0,
;;; MacIvory Support 447.0, UX Support 443.0, Development Utilities 439.0,
;;; Old TV 436.0, Zwei 436.0, Utilities 445.0, RPC Development 438.0,
;;; MacIvory Development 434.0, UX Development 442.0, Server Utilities 442.0,
;;; Serial 435.0, Hardcopy 446.0, Zmail 442.1, SCSI 430.0, Tape 444.3, LMFS 442.1,
;;; NSage 440.0, Extended Help 441.0, CL Developer 428.0,
;;; Documentation Database 440.12, IP-TCP 452.6, IP-TCP Documentation 422.0,
;;; CLX 450.0, X Remote Screen 448.3, X Documentation 421.1, NFS Client 442.0,
;;; NFS Documentation 423.1, Serial Networks 7.0, Serial Networks Documentation 8.0,
;;; DNA 438.0, Metering 444.0, Metering Substrate 444.0, Conversion Tools 436.0,
;;; Hacks 440.0, Mac Dex 432.0, HyperCard/MacIvory 432.0, Statice Runtime 466.1,
;;; Statice Browser 466.0, Statice 466.0, Statice Server 466.2,
;;; Statice Documentation 426.0, CLIM 72.0, Genera CLIM 72.0, CLX CLIM 72.0,
;;; PostScript CLIM 72.0, CLIM Documentation 72.0, CLIM Demo 72.0,
;;; Symbolics Concordia 444.0, Essential Image Substrate 433.0,
;;; Image Substrate 440.4, Experimental Graphic Editing Documentation 431.0,
;;; Graphic Editing 441.0, Graphic Editor 440.0, Bitmap Editor 441.0,
;;; Postscript 436.0, Concordia Documentation 431.0, Lock Simple 435.1,
;;; Producer 420.0, Version Control 405.0, Compare Merge 404.0,
;;; VC Documentation 401.0, Symbolics In-House 444.0,
;;; Symbolics In-House Documentation 425.0, SCRC 442.0, Weather User 425.0,
;;; Logical Pathnames Translation Files NEWEST, HTTP Server 67.91,
;;; Showable Procedures 36.3, Binary Tree 34.0, W3 Presentation System 7.1,
;;; FrameThrower XL Interface 14.0, FrameThrower 14.0, SGD Book Design 10.0,
;;; Color System Documentation 10.0, Genera Extensions 16.0, Graphics Support 431.0,
;;; Color 427.1, Experimental Alpha AXP Assembler 8.0,
;;; Experimental Alpha AXP Emulator Support 8.5,
;;; Experimental Alpha AXP Translator Support 8.2, Experimental Alpha AXP OSF VLM 8,
;;; Images 431.2, Fortran Runtime 434.0, Compiler Tools Package 434.0,
;;; Compiler Tools Runtime 434.0, Fortran Package 434.0, C Runtime 438.0,
;;; C Packages 436.0, Minimal Lexer Runtime 439.0, Lexer Package 438.0,
;;; Syntax Editor Runtime 434.0, Basic-NS 36.35, Schematic-NS 36.7, VLSI-NS 36.29,
;;; DRC 36.8, Spice 36.0, HP 36.0, NS-Tutorial 36.5, Compose 36.6, NS-Routers 36.2,
;;; Gate-Array-NS 36.0, LSI-Logic-Support 36.0, PALCompiler 36.23, PCB-NS 36.1,
;;; NS-DOC 36.4, Tw42 36.0, Timberwolf 36.1, vlsi-hacks 36.2, Fortran 434.0,
;;; Compiler Tools Development 435.0, Compiler Tools Debugger 434.0,
;;; Fortran Doc 427.0, Experimental Minima Developer 49.6,
;;; Experimental Minima Kernel 32.32, Experimental Minima Debugger 29.38,
;;; Experimental IFEP Compiler 52.3, Experimental Minima Documentation 21.0,
;;; Experimental Alpha AXP Translator 8.0, Experimental VLM Development 1.0, C 440.0,
;;; Lexer Runtime 438.0, Lalr 1 434.0, Context Free Grammar 439.0,
;;; Context Free Grammar Package 439.0, C Library Headers 434, C Documentation 426.0,
;;; Syntax Editor Support 434.0, LL-1 support system 438.0, CD-ROM Mastering 51.20,
;;; cold load 1, Ivory Revision 4A (FPA enabled), IFEP 325,
;;; FEP0:>I325-loaders.flod(8), FEP0:>I325-info.flod(8), FEP0:>I325-debug.flod(8),
;;; FEP0:>I325-lisp.flod(8), FEP0:>I325-KERNEL.FEP(9), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Macintosh System Software 8.0, 1152x802 Screen with Genera fonts,
;;; Machine serial number 30538, Macintosh, Apple Extended Keyboard II,
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Eo tools (from S:>Reti>eo-tools.lisp.23).


#+(OR MINIMA-RUNTIME MINIMA-DEVELOPER) (IN-PACKAGE "COMMON-LISP-USER")


(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "SYS:METERING;COMMANDS.LISP.4036"
  "SYS:METERING;FUNCTION-CALL-METERING.LISP.4060")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:METERING;COMMANDS.LISP.4036")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10; Lowercase: Yes -*-")

;; must be one of :PROMPT, :RETRY, or :IGNORE
(defvar *inconsistent-fudge-factors-action* #-vlm :PROMPT #+vlm :IGNORE)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:METERING;FUNCTION-CALL-METERING.LISP.4060")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING; Lowercase: Yes -*-")

;;; replace sys:meter-function-entry with metering:metering-function-entry-handler
	   
;; display-results: NIL 	       	only show warnings
;;		    :SILENT		print nothing whatsoever
;;		    :COMPUTATIONS	print every gory detail.
;;		    <anything else>	same as nil, but also show summaries.

(defun compute-fudge-factor (&optional (count 2500.) (display-results nil))
  (declare (values exact-fudge-factors integer-values consistent-p))
  #+(or 3600 (and imach (not vlm)))
  (let* ((flag-value 0)
	 (silent (eq display-results :SILENT))
	 (display-results (and (not silent) display-results))
	 (inconsistencies nil))
    (tv:noting-progress ("Computing metering fudge factors.")
    (clear-trigger 'all-function-calls)
    (when display-results
      (format t "~&Clearing old fudge-factors.  Setting to 0."))
    (setf *function-entry-fudge-factor-1* 0)
    (setf *function-entry-fudge-factor-2* 0)
    (setf *function-exit-fudge-factor-1* 0)
    (setf *function-exit-fudge-factor-2* 0)
    (setf *function-trap-fudge-denominator* 0)
    (setf *function-entry-fudge-fraction* 0)
    (setf *function-exit-fudge-fraction* 0)
    (setf *function-fudge-factor-error* 0)
    (setf *function-caller-fudge-factor-error* 0)
    (setf *function-callee-fudge-factor-error* 0)
    (flet
      ((equal-within (a b tolerance)
	 (< (abs (- a b)) (if (integerp tolerance) tolerance (min 2 (* tolerance (max a b))))))
       (trap-on-exit ()
	 #+3600
	 (setf (sys:frame-meter-bit (si:%stack-frame-pointer)) flag-value)
	 #+imach
	 (let ((start-time (sys:%microsecond-clock)))
	   (flet ((do-it (value)
		    (let* ((our-fp (sys:%stack-frame-pointer))
			   (fp (sys:%pointer-plus
				 our-fp
				 (- (ldb sys:%%cr.caller-frame-size
					 (sys:%read-internal-register
					   sys:%register-control-register))))))
		      (unless (zerop value)
			(si:%funcall-in-aux-stack #'storage::set-trap-on-exit-flag
						  fp our-fp si:%current-stack-group 1)
			(setf (sys:%logldb si:%%cr.call-trace (cli::%saved-control-register))
			      1)))))
	     (do-it flag-value))
	   (si:incf* *internal-trap-time*
		     (sys:%32-bit-difference (sys:%microsecond-clock) start-time))))
       (compute-in-env (descript function preamble cleanup trigger traps-per-call)
	 (when (eq display-results :computations)
	   (format t "~&~%~S" descript))
	 (multiple-value-bind (elapsed measured ntraps adjusted)
	     (compute-histograms-for-fcm
	       function preamble cleanup trigger count display-results traps-per-call)
	   (ignore elapsed measured ntraps)
	   adjusted))
       (turn-on-both ()
	 (set-scope-of-control 'all-function-calls `(:process ,si:*current-process*)))
       (turn-off-both () (set-scope-of-control 'all-function-calls nil))
       #+imach
       (trigger-metering ()
	 (setf (sys:%logldb si:%%cr.call-trace (cli::%saved-control-register))
	       1))
       (turn-on-first ()
	 (set-scope-of-control 'all-function-calls
			       `(and (:process ,si:*current-process*)
				     *force-control-to-evaluate-scope*)))
       (turn-on-flag () (setf flag-value 1))
       (turn-off-second ()
	 #+imach
	 (let* ((fp (sys:%stack-frame-pointer))
		(caller-fp (sys:%pointer-plus fp
					      (- (ldb sys:%%cr.caller-frame-size
						      (sys:%read-internal-register
							sys:%register-control-register))))))
	   (si:%funcall-in-aux-stack
	     #'storage::set-trap-on-exit-flag caller-fp fp si:%current-stack-group 0))
	 (setf flag-value 0)))

      ;; first, figure out the total fudge needed, and balance between entry and exit.
      (let* ((unaccounted-total
	       (compute-in-env
		 "Using both" #'empty-proc #'turn-on-both #'turn-off-both
		 #+3600 #'sys:%meter-on #+imach #'trigger-metering 2))
	     (unaccounted-entry
	       (compute-in-env "Just first" #'empty-proc #'turn-on-first #'turn-off-both
		 #+3600 #'sys:%meter-on #+imach #'trigger-metering 1))
	     (unaccounted-exit
	       (compute-in-env
		 "Just second" #'trap-on-exit #'turn-on-flag #'turn-off-second 
		 #'turn-on-flag 1))
	     (discrepancy (- (+ unaccounted-exit unaccounted-entry) unaccounted-total)))

	;; are the results self-consistent?
	(unless (equal-within unaccounted-total (+ unaccounted-exit unaccounted-entry) 1)
	  (setq inconsistencies 't)
	  (unless silent
	    (format *error-output*
		    "~&The total fudge-factor (~D usecs) is not within a microsecond of ~
the sum of entry fudge-factor (~D usecs) and the exit fudge-factor (~D usecs). ~
Try running (COMPUTE-FUDGE-FACTOR COUNT) with a higher value of COUNT than ~D."
		    unaccounted-total unaccounted-entry unaccounted-exit count))
	  ;; make sure that the numbers we eventually use don't add up to more than
	  ;; unaccounted total.  We're guessing here, but unaccounted-total is more
	  ;; important than the breakdown between entry and exit.
	  (when (plusp discrepancy)
	    (if (and (< (floor discrepancy 2) unaccounted-entry)
		     (< (floor discrepancy 2) unaccounted-exit))
		(progn
		  (decf unaccounted-entry (floor discrepancy 2))
		  (decf unaccounted-exit (ceiling discrepancy 2)))
		(if (< unaccounted-entry unaccounted-exit)
		    (progn
		      (setf unaccounted-entry 0)
		      (setf unaccounted-exit unaccounted-total))
		    (progn
		      (setf unaccounted-exit 0)
		      (setf unaccounted-entry unaccounted-total))))))

	(let ((entry-ff1 0)
	      (entry-ff2 unaccounted-entry)
	      (exit-ff1 unaccounted-exit)
	      (exit-ff2 0))
	  (set-factors-and-fixup-fractions entry-ff1 entry-ff2 exit-ff1 exit-ff2)

	  ;; calibrate between caller and callee, and see if we can get a handle on the
	  ;; expected error.
	  (multiple-value-bind (internal-results incl-results)
	      (calibrate-fudge-factor count display-results "Using the fudge factors")
	    (let ((callee-error (get-histogram-bounds internal-results))
		  (callee-adjust 0))
	      ;; adjust between caller and callee
	      (if (minusp callee-error)
		  (let* ((adjust (abs callee-error))
			 (adjust-entry (min (/ adjust 2) entry-ff2))
			 (adjust-exit (min exit-ff1 (- adjust adjust-entry))))
		    (when (eq display-results :computations)
		      (format t "~&Adjusting entry by ~D, and exit by ~D"
			      adjust-entry adjust-exit))
		    (setf callee-adjust (+ adjust-entry adjust-exit))
		    (incf callee-error callee-adjust)
		    (decf entry-ff2 adjust-entry)
		    (incf entry-ff1 adjust-entry)
		    (decf exit-ff1 adjust-exit)
		    (incf exit-ff2 adjust-exit)
		    (set-factors-and-fixup-fractions entry-ff1 entry-ff2 exit-ff1 exit-ff2))
		(progn
		  (setq inconsistencies 't)
		  (unless silent
		    (format *error-output*
			    "~&Charging all of the fudge factors to the callee, and none to the caller, resulted in an ~@
exclusive time of ~F useconds for an empty function call.      This is possible, but hard
to believe."
			    (reasonable-average internal-results)))))

	      ;; compute potential errors

	      ;; assume the internal time of the empty-proc should be around 0.
	      (setq *function-callee-fudge-factor-error*
		    (max (float (abs callee-error))
			 ;; the 1- is to allow for the low being 1 off of the average,
			 ;; even though the average is close to 1 (say .99), probabilistically
			 ;; we'd still probably get at least a single 0 entry.  So we can't
			 ;; include that as part of the error.
			 (1- (abs (+ (reasonable-average internal-results) callee-adjust)))))

	      ;; assume that most of the cost of calling the empty-proc is function-call
	      ;; overhead
	      (multiple-value-bind (avg h)
		  (mempty-proc :count-limit count)
		(ignore avg)
		(let ((too-short? (- (get-histogram-bounds h)
				     (1- (+ (get-histogram-bounds incl-results)
					    callee-adjust)))))
		  ;; only *think* it's an error, if the time with fudge is *shorter* than
		  ;; the define-metering-function case.
		  (setq *function-caller-fudge-factor-error*
			(max too-short?
			     (- (reasonable-average incl-results) (reasonable-average h))
			     0))))
	      (setf *function-fudge-factor-error*
		    (max (abs discrepancy)
			 (+ *function-callee-fudge-factor-error*
			    *function-caller-fudge-factor-error*)))))
	  
	  (when display-results
	    (format t "~&~%Error ranges: For callee: ~S for caller: ~S total: ~S"
		    *function-callee-fudge-factor-error* *function-caller-fudge-factor-error*
		    *function-fudge-factor-error*))
	    
	  (when (or (minusp entry-ff2) (minusp entry-ff1)
		    (minusp exit-ff2) (minusp exit-ff1))
	    (if silent
		(progn
		  ;; don't bother printing wimpy retry suggestion.
		  (setq inconsistencies t)
		  (format *error-output*
			  "~&The computed fudge factors, ~D, ~D, ~D, and ~D are not valid.~
~%It's a very good idea to try to run COMPUTE-FUDGE-FACTOR again.~%"
			  entry-ff2 entry-ff1 exit-ff2 exit-ff1))
		(setq inconsistencies 't)))
	    
	  (when (and inconsistencies (not silent))
	    (format *error-output*
		    "~&~%There were some internal inconsistencies in the computations.
You might try running (COMPUTE-FUDGE-FACTOR) again, to get slightly better numbers."))

	  (set-factors-and-fixup-fractions entry-ff1 entry-ff2 exit-ff1 exit-ff2)
						   
	  (when (eq display-results :computations)
	    (format t "~&~%~%Check for overhead values of system traps with fudge factors.")
	    (format t "~&~%Both")
	    (flet ((test-it ()
	    (compute-histograms-for-fcm
	      #'empty-proc #'turn-on-both #'turn-off-both #+3600 #'sys:%meter-on #+imach #'trigger-metering count display-results 2)))
	      (funcall #'test-it))
	    (format t "~&~%First")
	    (compute-histograms-for-fcm
	      #'empty-proc #'turn-on-first #'turn-off-both #+3600 #'sys:%meter-on #+imach #'trigger-metering count display-results 1)
	    (format t "~&~%Second")
	    (compute-histograms-for-fcm
	      #'trap-on-exit #'turn-on-flag #'turn-off-second #'turn-on-flag count display-results 1)
	    (format t "~%~%"))
	  (values (list entry-ff1 entry-ff2 exit-ff1 exit-ff2)
		  (list *function-entry-fudge-factor-1* *function-entry-fudge-factor-2*
			*function-entry-fudge-fraction*
			*function-exit-fudge-factor-1* *function-exit-fudge-factor-2*
			*function-exit-fudge-fraction*
			*function-callee-fudge-factor-error*
			*function-caller-fudge-factor-error* *function-fudge-factor-error*)
		  (not inconsistencies))))))))

