;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;; management
;;;

(defun find-collector-type (type-name)
  (gethash type-name *collector-type-table*))

(defun canonicalize-interlocking-type (type)
  (loop for entry in *valid-interlocking-types* do
    (when (member type entry :test 'string-equal)
      (return (car entry)))
    finally (return *default-interlocking-type*)))

(defun find-interlocking-collector (basic-collector-type interlocking)
  (let* ((interlocking (canonicalize-interlocking-type interlocking))
	 (key  (cons interlocking basic-collector-type)))
    (multiple-value-bind (type exists ignore)
	(gethash key *interlocked-collector-types*)
      (if exists
	  type
	  (let ((new-name (intern (string-append (string basic-collector-type)
					 "-INTERLOCKED-"
					 (string interlocking))
				  (symbol-package basic-collector-type))))
	    (setf (gethash key *interlocked-collector-types*)
		  (eval 
		    `(defflavor ,new-name
			     ()
			     ,(list basic-collector-type
				    (second
				      (assoc interlocking *interlocking-components*))))))
	    (setf (gethash new-name *collector-type-table*)
		  (get-collector-type basic-collector-type))
	    new-name)))))


(defun make-data-collector
       (type &rest init-args &key wired (top-level 't) interlocking area &allow-other-keys)
  (declare (arglist type &rest init-args &key wired (top-level 't) interlocking &allow-other-keys))
  (let* ((type (if (symbolp type)
		   type
		   (collector-type-name (get-collector-type type 't))))
	 (constructor (get type 'make-collector))
	 (area (or area (when wired wired-metering-area)))
	 (new-data-collector
	   (if constructor
	       (apply constructor (si:rem-keywords init-args '(:wired)))
	       (let* ((basic-collector-type
			(or (if top-level
				(get type 'make-toplevel-collector)
				(get type 'make-component-collector))
			    type))
		      (collector-type
			(if interlocking
			    (find-interlocking-collector basic-collector-type interlocking)
			    basic-collector-type)))
		 (apply #'make-instance
			collector-type
			(append (si:rem-keywords init-args '(:wired :interlocking :area))
				(when area (list :area area))))))))
    (when wired
      (wire-for-aux-stack new-data-collector))
    (when top-level
      (setf (collector-init-options new-data-collector) (copy-list init-args)))
    new-data-collector))

(defmethod (make-instance basic-collector-type :after) (&rest ignore)
  #||
  (setf sample-instance
	(if (and (flavor:find-flavor name)
		 (member 'complex-collector-mixin
			 (flavor::flavor-all-components (flavor::find-flavor name))))
	    (make-data-collector name :component-description nil)
	    (make-data-collector name)))
  ||#
  (si:without-interrupts 
    (setf uid *collector-type-uid-counter*)
    (incf *collector-type-uid-counter*)))

;; collectors can be registered either under the name of a string or a symbol.
;; For lookup, if you pass in a string, it looks for a string first, then
;; matches symbols.  If there is a unique symbol w/ that pname, it gives it to you.
;; If duplicates, it issues warning.
;; If you pass in a symbol, first it looks for an exact symbol match, then for a string and
;; other symbols with the same pname.  If it is unambiguous, it returns it, otherwise it
;; warns about ambiguouty.
(defvar *known-collectors* (make-hash-table :test #'string-equal))
(defvar *known-collectors-2* (make-hash-table))

(defun register-collector (name collector)
  (if (stringp name)
      (setf (gethash (string name) *known-collectors*) collector)
      (setf (gethash name *known-collectors-2*) collector)))

(defun remove-registered-collector (name)
  (if (find-collector-named name)
      (if (stringp name)
	  (setf (gethash (string name) *known-collectors*) nil)
	  (setf (gethash name *known-collectors-2*) nil))
      (error "~S is not the name of a registered collector" name)))

(defun find-collector-named (name)
  (let ((name-string (string name)))
    (if (stringp name)
	(gethash name-string *known-collectors*)
	(gethash name *known-collectors-2*))))

(defun get-collectors ()
  (append
    (loop for collector being the hash-elements of *known-collectors*
	  when collector
	    collect collector)
    (loop for collector being the hash-elements of *known-collectors-2*
	  when collector
	    collect collector)))

(defun get-collector-names ()
  (append
    (loop for collector being the hash-elements of *known-collectors*
			with-key key
	  when collector
	    collect key)
    (loop for collector being the hash-elements of *known-collectors-2*
			with-key key
	  when collector
	    collect key)))

(defun find-collector-named-like (name)
  (let* ((similar-names nil)
	 (name-string (string name))
	 (name-match (find-collector-named name-string)))
    (maphash #'(lambda (key value)
		 (ignore value)
		 (when (string-equal (string key) name-string)
		   (push key similar-names)))
	     *known-collectors-2*)
    (when name-match (push name-match similar-names))
    (cond ((= (length similar-names) 1)
	   (find-collector-named (car similar-names)))
	  ((null similar-names) nil)
	  (t (cerror "Choose one of ~S" "Ambiguous name ~S" similar-names name)
	     (find-collector-named (accept 'symbol))))))
	       
(defun parse-collector (descriptor &optional dont-recurse)
  (or (and (typep descriptor 'basic-collector)
	   descriptor)
      (and (symbolp descriptor)
	   (or (find-collector-named descriptor)
	       (find-collector-named-like descriptor)))
      (and (or (stringp descriptor) (characterp descriptor))
	   (or (find-collector-named (string descriptor))
	       (find-collector-named-like (string descriptor))))
      (and (or (symbolp descriptor) (listp descriptor))
	   (not dont-recurse)
	   (ignore-errors (parse-collector (eval descriptor) 't)))
      (error "~S does not describe a named, instantiated, data collector" descriptor)))


;;;
;;;
;;;

(defmethod (make-instance instantiated-collector-mixin :after)
	   (&rest init-options &key (top-level 't) &allow-other-keys)
  (ignore init-options)
  (when name
    (register-collector name self))
  (setf name (if top-level
		 (format nil "~A" (or name (gensym)))
		 name)))

(defmethod (make-instance instantiated-complex-collector-mixin :after)
	   (&rest init-options &key (top-level 't) &allow-other-keys)
  (ignore init-options)
  (setf template
	(or template (canonicalize-component-description component-description)))
  (setf make-component
	(or make-component
	    (if template
		(create-component-constructor
		  (normalize-component-description component-description))
		#'ignore)))
  (setf component-description (if top-level
				  (progn
				    (valid-component-description component-description 't)
				    (order-component-description component-description))
				  component-description)))


(defmacro defcollector (collector-name typed-lambda-list instance-variables component-flavors &rest options)
  (if (symbolp collector-name)
      (flet ((find-entry-by-type (entry) (if (listp entry) (car entry) entry)))
	(let* ((init-options (find :init-options-and-types options :key #'find-entry-by-type))
	       (hierarchical-p (find :hierarchical options :key #'find-entry-by-type))
	       (required-ivs
		 (when hierarchical-p
		   (find :required-instance-variables options :key #'find-entry-by-type)))
	       (wirable (find :wirable options :key #'find-entry-by-type))
	       (default-inits (find :default-init-plist options :key #'find-entry-by-type))
	       (component-flavors-component
		 (append (ncons collector-name)
			 (when hierarchical-p '(complex-collector-mixin))
			 '(basic-collector)))
	       (component-flavors-top
		 (append (ncons collector-name)
			 (when (and wirable (or (not (listp wirable)) (second wirable)))
			   '(wirable-collector-mixin))
			 (when hierarchical-p
			   `(instantiated-complex-collector-mixin complex-collector-mixin))
			 '(instantiated-collector-mixin basic-collector)))
	       (options (flet ((processed-option? (item)
				 (member item
					 (list
					   init-options hierarchical-p required-ivs wirable))))
			  (append (remove-if #'processed-option? options)
				  '((:area-keyword :area))
				  ;; This is the only IV in complex-collector-mixin, and
				  ;; basic-collector, so allow flavors to use it.
				  (when hierarchical-p
				    (ncons 
				      (append (list :required-instance-variables
						    'make-component)
					      (cdr required-ivs)))))))
	       (top-default-inits (when (or wirable default-inits)
				    (if (and wirable (null (getf (cdr default-inits) :area)))
					(if (and default-inits (listp default-inits))
					    (list* :default-init-plist
						   :area
						   'wired-metering-area
						   (cdr default-inits))
					    '(:default-init-plist :area wired-metering-area))
					default-inits)))
	       (collector-toplevel-name
		 (or (get collector-name 'make-toplevel-collector)
		     (setf (get collector-name 'make-toplevel-collector)
			   (gentemp (string collector-name)))))
	       (collector-component-name
		 (or (get collector-name 'make-component-collector)
		     (setf (get collector-name 'make-component-collector)
			   (gentemp (string collector-name))))))
	  `(progn
	     (defflavor ,collector-name ,instance-variables ,component-flavors
	       ,@options ,@(when default-inits (ncons default-inits)))
	     (defflavor ,collector-toplevel-name () ,component-flavors-top
	       ,@(when top-default-inits (ncons top-default-inits)))
	     (setf (get ',collector-name 'make-toplevel-collector)
		   ',collector-toplevel-name)
	     (defflavor ,collector-component-name () ,component-flavors-component)
	     (setf (get ',collector-name 'make-component-collector)
		   ',collector-component-name)
	     (eval-when (load)
	       (let ((ct (make-instance 'basic-collector-type :name ',collector-name
					:typed-lambda-list ',(get-new-typed-lambda-list
							       (car typed-lambda-list)
							       (second typed-lambda-list))
					:init-options ',(second init-options))))
		 (setf (gethash ',collector-name *collector-type-table*) ct)
		 (setf (gethash ',collector-toplevel-name *collector-type-table*) ct)
		 (setf (gethash ',collector-component-name *collector-type-table*) ct))))))
	(error "Invalid collector name ~S.  Collector name must be a symbol."
	       collector-name)))
