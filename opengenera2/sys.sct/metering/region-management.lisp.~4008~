;;; -*- Mode: LISP; Base: 10; Syntax: Common-lisp; Package: METERING; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun get-valid-trigger-region (form control &key force)
  (let ((trigger-region (parse-trigger form :if-not-exists nil)))
    (if (and trigger-region (typep trigger-region 'metering-region))
	(progn
	  (when (eq (trigger-type trigger-region) 'function)
	    (make-function-into-region (trigger-name trigger-region)))
	  trigger-region)
	(if (and force (or (and (listp form) (member (car form) '(:function function)))
			   (functionp form)))
	    (progn
	      (make-function-into-region (if (functionp form) form (cadr form)))
	      (let ((trigger-region (parse-trigger form)))
		(register-region trigger-region nil nil control)
		trigger-region))
	    (error "Bad region descriptor ~S.  Does not evaluate to a metering region"
		   form)))))

(defvar known-regions (make-hash-table :test #'equal))
(defvar active-regions (make-hash-table :test #'equal))

(defun get-key-from-region (region)
  (cond ((typep region 'basic-control) region)
	((typep region 'basic-trigger) (trigger-name region))
	;; probably should error here!
	(t region)))

(defun make-region-known (inner-region within-process within-region)
  (let ((known-region
	  (modify-hash known-regions
		       (list (get-key-from-region inner-region) within-process within-region)
		       #'(lambda (ignore value key-exists-p)
			   (declare (sys:downward-function))
			   (if key-exists-p
			       value
			       (make-region :inner-region inner-region
					    :within-process within-process
					    :within-region within-region))))))
    (unless (eq (region-inner-region known-region) inner-region)
      (setf (region-inner-region known-region) inner-region))
    known-region))

(defun register-region (region within-process within-region control)
  (when (and within-region
	     (or (null within-process)
		 (neq within-process (region-within-process within-region))))
    (error "Cannot restrict region ~S to be within Process ~S and region ~S, because region ~S is restricted to process ~S"
	   region within-process within-region (region-within-process within-region)))
  (let ((return-value nil))
    (modify-hash
      active-regions
      (list region within-process within-region)
      #'(lambda (ignore value key-exists-p)
	  (declare (sys:downward-function))
	  (setq return-value 
		(if key-exists-p
		    value
		    (make-region-known region within-process within-region)))
	  (when within-region
	    (unless key-exists-p
	      (pushnew return-value (region-dependents within-region))))
	  return-value))
    (when control
      (pushnew return-value (control-regions control))
      (pushnew control (region-controls return-value)))
    (if (and (null within-process) (null within-region))
	;; damn bulls%^#@ so that it compiles!!
	(let ((frob
		(if (typep region 'basic-control)	; Don't blow up on :switch
		    (setf (control-switch region) return-value)
		    (setf (trigger-active-region region) return-value))))
	  frob)
	(let ((superior (register-region region nil nil nil)))
	  (pushnew return-value (region-restrictions superior))))
    return-value))

(defun region-registered? (region)
  (gethash (list (region-inner-region region)
		 (region-within-process region)
		 (region-within-region region))
	   active-regions))

(defun remove-region (region)
  (let ((within-process (region-within-process region))
	(within-region (region-within-region region)))
      (unregister-region (region-inner-region region) within-process within-region)
      (setf (region-count region) 0)
      (if (and (null within-process) (null within-region))
	  (deactivate-region region)
	  (when within-region
	    (remove-dependent-region region within-region))
	  (remove-restricted-region
	    region (register-region (region-inner-region region) nil nil nil)))))

(defun remove-region-if-necessary (region)
  (when (and (null (region-restrictions region))
	     (null (region-controls region))
	     (null (region-dependents region)))
    (remove-region region)))

(defun remove-active-region (region control)
  (when control
    (setf (region-controls region) (delete control (region-controls region)))
    (setf (control-regions control) (delete region (control-regions control))))
  (remove-region-if-necessary region))

(defun remove-restricted-region (restricted-region unrestricted-region)
  (setf (region-restrictions unrestricted-region)
	(delete restricted-region (region-restrictions unrestricted-region)))
  (remove-region-if-necessary unrestricted-region))

(defun remove-dependent-region (dependent-region superior-region)
  (setf (region-dependents superior-region)
	(delete dependent-region (region-dependents superior-region)))
  (remove-region-if-necessary superior-region))

(defun deactivate-region (region)
  (let ((trigger (region-inner-region region)))
    (unless (typep trigger 'basic-control)
      (setf (trigger-active-region trigger) nil)
      (when (eq (trigger-type trigger) 'function)
	(unencapsulate-function-for-region (trigger-name trigger))))))

(defun unregister-region (inner-region within-process within-region)
  (with-stack-list (key inner-region within-process within-region) 
    (remhash key active-regions)))

(defsubst incf-region-count (region)
  (declare (values changed?))
;  (si:with-process-lock ((locf (region-lock region)) "metering region lock")
  (si:without-interrupts
    (prog1 (zerop (region-count region)) (incf (region-count region)))))

(defsubst decf-region-count (region)
  (declare (values changed?))
;  (si:with-process-lock ((locf (region-lock region)) "metering region lock")
  (si:without-interrupts
    (decf (region-count region))
    (zerop (region-count region))))

