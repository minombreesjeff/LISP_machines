;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>



(defflavor call-tree-metering-run
	((total-process-time nil))
	(call-tree-metering-mixin all-function-metering-mixin basic-metering-run)
  (:readable-instance-variables (metering-run-total-process-time total-process-time)))

(defmethod (metering-run-type call-tree-metering-run) () :call-tree)

(defmethod (metering-run-parameters call-tree-metering-run) () `())

(defmethod (describe-run call-tree-metering-run) (stream)
  (ignore stream))

;;; used by some of the /root subfields
(defmethod (metering-run-root-total-process-time call-tree-metering-run) ()
  (if root
      (total (get-component-from-components
	       'inclusive-process-time
	       (metering:get-components-from-recursive-node
		 root)
	       (metering:collector-component-description collector)))
      total-process-time))
      
(defmethod (define-collector call-tree-metering-run) ()
  (make-data-collector
    'metering:collect-backtrace
    :name nil
    :component-description '((entries metering:counter)
			     (inclusive-time metering:modal-histogram :entries 20)
			     (inclusive-process-time metering:modal-histogram :entries 20)
			     (exclusive-consing metering:standard-deviation)
			     (inclusive-consing metering:sum)
			     (exclusive-time metering:modal-histogram :entries 20)
			     (exclusive-process-time metering:modal-histogram :entries 20)
			     (exclusive-pfs metering:collect-simple-averages)
			     (exclusive-pfs-time metering:modal-histogram :entries 20)
			     (inclusive-pfs-time metering:sum)
			     (inclusive-callees metering:sum)
			     (exclusive-callees metering:sum))))

(defmethod (initialize-display call-tree-metering-run :after) (ignore)
  (unless display-initialized
    (let ((callees (metering:get-component-extractor-from-components
		     'exclusive-callees nil collector))
	  (entries (metering:get-component-extractor-from-components 'entries nil collector)))
      (metering:compute-inclusive-from-exclusive-data
	collector '((exclusive-consing inclusive-consing)
		    (entries inclusive-callees))
	:other-combination-function
	#'(lambda (components descendants)
	    (loop for descendant in descendants do
	      (combine (funcall callees components)
		       (funcall entries
				(metering:get-components-from-recursive-node descendant)))))
	:progress-note-p t))
    (let ((extractor (metering:get-component-extractor-from-components
		       'inclusive-consing nil collector))
	  (incl-process-time-extractor (metering:get-component-extractor-from-components
					 'inclusive-process-time nil collector)))
      (setf total-consing 0)
      (setf total-process-time 0)
      (map-over-descendant-collectors
	collector
	#'(lambda (ignore subcollector)
	    (incf total-consing
		  (total
		    (funcall extractor
			     (metering:get-components-from-recursive-node subcollector))))
	    (incf total-process-time
		  (total
		    (funcall incl-process-time-extractor
			     (metering:get-components-from-recursive-node subcollector)))))))))
 
(defmethod (set-trigger call-tree-metering-run) ()
  (collect-data-from-trigger
    'all-function-calls
    `(((,collector function 't)))
    :initial 't)  
  (metering:collect-data-from-trigger
    'metering:all-function-calls
    `(((,collector function nil)
       (entries)
       (inclusive-time inclusive-time)
       (inclusive-process-time (- inclusive-time other-process-time))
       (exclusive-time exclusive-time)
       (exclusive-consing exclusive-consing)
       (exclusive-pfs exclusive-pfs)
       (inclusive-pfs-time inclusive-pfs-time)
       (exclusive-pfs-time exclusive-pfs-time)))))

(define-sorting-options :call-tree
 `(("Total Inclusive Process time" inclusive-process-time total ,#'> ,#'metering-run-total-process-time)
   ("Average Inclusive Process time" inclusive-process-time average ,#'> ,#'metering-run-total-process-time)
   ("Total Inclusive time" inclusive-time total ,#'> ,#'metering-run-total-time)
   ("Average Inclusive time" inclusive-time average ,#'> ,#'metering-run-total-time)
   ("Total Inclusive Paging System time" Inclusive-pfs-time total ,#'>
    ,#'(lambda (run)
	 (total-for-field run 'inclusive-pfs-time)))
   ("Average Inclusive Paging System time" Inclusive-pfs-time
    average ,#'> ,#'(lambda (run)
		      (total-for-field run 'inclusive-pfs-time)))
   ("Total Inclusive Consing" inclusive-consing total ,#'> ,#'metering-run-total-consing)))


;;; the output fields for call-tree

(define-output-field entries :call-tree
  :header "Calls"
  :documentation "Calls to this function with this backtrace"
  :sub-field-descriptions
  ((:header "Count"
     :documentation "Number of times this function was called with this backtrace" 
     :width (5 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~5D" (total field))))
   (:header "Incl Count"
    :documentation "Inclusive number of function calls made by this node and all its callees"
    :width (5 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (ignore field)
      (format stream "~5D"
	      (total (get-component-from-components
			  'inclusive-callees entry
			  (metering-run-field-descriptions run)))))))
  :current-sub-field-names ("Count"))

(define-output-field inclusive-time :call-tree
  :header "Incl Time"
  :documentation
  "The time spent in this node and in all of its descendants.
This time includes time spent in other processes.  It is the time you 
would get if you measured the time between the start and end of this 
function on a wall clock."
  :sub-field-descriptions
  ((:header "Total" :documentation "Total inclusive time (in microseconds) spent in this node"
	    :width (14 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~14D" (total field))))
   (:header "Avg" :documentation "Average (inclusive) time per call spent in this node"
	    :width (10 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~10,2F" (average field))))
   (:header "RAvg" :documentation "Reasonable average (inclusive) time per call spent in this node
This is the average of samples that fell in the main mode of the histogram, only."
	    :width (10 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~10,2F" (metering::reasonable-average field))))
   (:header "%Run"
    :documentation
    "Percentage of total time (for entire run) spent in this node (inclusively)"
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-time run)))))
   (:header "/Run"
    :documentation
    "Bar graph of percentage of total time for run spent in this node (inclusively)"
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run)
		 100)))
   (:header "%Root"
    :documentation
    "Percentage of the inclusive time of the root spent inclusively in this node."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-root-total-time run)))))
   (:header "/Root"
    :documentation
    "Bar graph of percentage of total time for the root spent inclusively in this node."
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-time run)
		 100)))
   (:header "Dist"
    :documentation
    "A graph of the distribution of the (inclusive) time per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-distribution stream field 50)))
   (:header "WDist"
    :documentation
    "A graph of the weighted distribution of the (inclusive) time per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-weighted-distribution stream field 50)))
   (:header "Error"
    :documentation
    "The probable error of the total inclusive time spent in this node.  The total inclusive 
time is accurate only to within +/- this value."
    :width (11 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~11D"
		(floor (+ (* (- callees calls) metering:*function-fudge-factor-error*)
			  (* calls metering:*function-callee-fudge-factor-error*)))))))
   (:header "Avg Error"
    :documentation
    "The probable error per-call of the inclusive time spent in this node.  The average
inclusive time is accurate only to within +/- this value."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~7,2F"
		(float (+ (/ (* (- callees calls) metering:*function-fudge-factor-error*)
			     calls)
			  metering:*function-callee-fudge-factor-error*))))))
   (:header "Error%"
    :documentation
    "The percentage error of the inclusive time spent in this node.  The inclusive
time is accurate only to within +/- this percentage."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~6,2,2F%"
		(float (/ (+ (* (- callees calls) metering:*function-fudge-factor-error*)
			     (* calls metering:*function-callee-fudge-factor-error*))
			  (total field)))))))
   (:header "Error/"
    :documentation
    "Bar graph of the percentage error of the inclusive time spent in this node."
    :width (25 :pixel)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(bar-graph stream
		   (+ (* (- callees calls) metering:*function-fudge-factor-error*)
		      (* calls metering:*function-callee-fudge-factor-error*))
		   (total field)
		   25)))))
  :current-sub-field-names ("Total" "/Run"))

(define-output-field inclusive-process-time :call-tree
  :header "Incl Process Time"
  :documentation
  "The time spent in this node and all of its descendants in this process only"
  :sub-field-descriptions
  ((:header "Total" :documentation "Total inclusive time (in microseconds) spent in this node in this process"
	    :width (14 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~14D" (total field))))
   (:header "Avg" :documentation "Average (inclusive) time per call spent in this node in this process"
	    :width (10 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~10,2F" (average field))))
   (:header "RAvg" :documentation "Reasonable average (inclusive) time per call spent in this node in this process.
This is the average of samples that fell in the main mode of the histogram, only."
	    :width (10 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~10,2F" (metering::reasonable-average field))))
   (:header "%Run"
    :documentation
    "Percentage of total time in this process (for entire run) spent in this node (inclusively)"
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field) (metering-run-total-process-time run)))))
   (:header "/Run"
    :documentation
    "Bar graph of percentage of total time spent in this process (for entire run) spent in
this node (inclusively)"
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-process-time run)
		 100)))
   (:header "%Root"
    :documentation
    "Percentage of the inclusive time of the root spent inclusively in this node."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field) (metering-run-root-total-process-time run)))))
   (:header "/Root"
    :documentation
    "Bar graph of percentage of total time for the root spent inclusively in this node."
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-process-time run)
		 100)))
   (:header "%Incl"
    :documentation
    "Percentage of the total inclusive time in this node spent in this process."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (total
			(metering:get-component-from-components
			  'inclusive-time
			  entry
			  (metering-run-field-descriptions run)))))))
   (:header "/Incl"
    :documentation
    "Bar graph of percentage of the total inclusive time in this node spent in this process."
    :width (25 :pixel)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (bar-graph stream 
		 (total field)
		 (total (metering:get-component-from-components
			  'inclusive-time
			  entry
			  (metering-run-field-descriptions run)))
		 25)))
   (:header "Dist"
    :documentation
    "A graph of the distribution of the (inclusive) time per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-distribution stream field 50)))
   (:header "WDist"
    :documentation
    "A graph of the weighted distribution of the (inclusive) time per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-weighted-distribution stream field 50)))
   (:header "Error"
    :documentation
    "The probable error of the total inclusive time spent in this node.  The total inclusive 
time is accurate only to within +/- this value."
    :width (11 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~11D"
		(floor (+ (* (- callees calls) metering:*function-fudge-factor-error*)
			  (* calls metering:*function-callee-fudge-factor-error*)))))))
   (:header "Avg Error"
    :documentation
    "The probable error per-call of the inclusive time spent in this node.  The average
inclusive time is accurate only to within +/- this value."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~7,2F"
		(float (+ (/ (* (- callees calls) metering:*function-fudge-factor-error*)
			     calls)
			  metering:*function-callee-fudge-factor-error*))))))
   (:header "Error%"
    :documentation
    "The percentage error of the inclusive time spent in this node.  The inclusive
time is accurate only to within +/- this percentage."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~6,2,2F%"
		(float0 (+ (* (- callees calls) metering:*function-fudge-factor-error*)
			   (* calls metering:*function-callee-fudge-factor-error*))
			(total field))))))
   (:header "Error/"
    :documentation
    "Bar graph of the percentage error of the inclusive time spent in this node."
    :width (25 :pixel)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(bar-graph stream
		   (+ (* (- callees calls) metering:*function-fudge-factor-error*)
		      (* calls metering:*function-callee-fudge-factor-error*))
		   (total field)
		   25)))))
  :current-sub-field-names ("Total" "/Run" "Error%"))

(define-output-field exclusive-time :call-tree
  :header "Excl Time"
  :documentation
  "The time spent in this node of the call tree (does not include its descendants)"
  :sub-field-descriptions
  ((:header "Total" :documentation "Total time (in microseconds) spent in this node."
	    :width (12 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~12D" (total field))))
   (:header "Avg" :documentation "Average (exclusive) time per call spent in this node"
	    :width (10 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~10,2F" (average field))))
   (:header "RAvg" :documentation "Reasonable average (exclusive) time per call spent in this node.
This is the average of samples that fell in the main mode of the histogram, only."
	    :width (10 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~10,2F" (metering:reasonable-average field))))
   (:header "/Run"
    :documentation "Bar graph of the percentage of the total time for the run spent exclusively in this node."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run) 
		 50)))
   (:header "%Run"
    :documentation "Percentage of total time (for entire run) spent in this node (exclusively)"
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field) (metering-run-total-time run)))))
   (:header "/Root"
    :documentation
    "Bar graph of the percentage of the total time for the root spent exclusively in this node."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-time run)
		 50)))
   (:header "%Root"
    :documentation
    "Percentage of the inclusive time of the root spent exclusively in this node."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field) (metering-run-root-total-time run)))))
   (:header "Dist"
    :documentation
    "A graph of the distribution of the (exclusive) time per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-distribution stream field 50)))
   (:header "WDist"
    :documentation
    "A graph of the weighted distribution of the (exclusive) time per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-weighted-distribution stream field 50)))
   (:header "/Incl"
    :documentation "Bar graph of percentage of exclusive/inclusive time for this node"
    :width (30 :pixel)
    :write-function
    (lambda (stream field run entry ignore)
      (bar-graph stream
		 (total field)
		 (total
		   (get-component-from-components
		     'inclusive-time entry
		     (metering-run-field-descriptions run)))
		 30)))
   
   (:header "%Incl"
    :documentation "Percentage of inclusive time (for this node) spent in this node (exclusively)"
    :width (7 :character)
    :write-function
    (lambda (stream field run entry ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (total
			(get-component-from-components
			  'inclusive-time entry
			  (metering-run-field-descriptions run)))))))
   (:header "/Incl Process"
    :documentation "Bar graph of percentage of exclusive/inclusive time for this node"
    :width (60 :pixel)
    :write-function
    (lambda (stream field run entry ignore)
      (bar-graph stream
		 (total field)
		 (total
		   (get-component-from-components
		     'inclusive-process-time entry
		     (metering-run-field-descriptions run)))
		 60)))
   
   (:header "%Incl Process"
    :documentation "Percentage of inclusive time (for this node) spent in this node (exclusively)"
    :width (7 :character)
    :write-function
    (lambda (stream field run entry ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (total
			(get-component-from-components
			  'inclusive-process-time entry
			  (metering-run-field-descriptions run)))))))
   (:header "Error"
    :documentation
    "The probable error of the total exclusive time spent in this node.  The total exclusive 
time is accurate only to within +/- this value."
    :width (9 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~9D"
		(floor (+ (* callees metering:*function-caller-fudge-factor-error*)
			  (* calls metering:*function-callee-fudge-factor-error*)))))))
   (:header "Avg Error"
    :documentation
    "The probable error per-call of the exclusive time spent in this node.  The average
exclusive time is accurate only to within +/- this value."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~7,2F"
		(float (+ (/ (* callees metering:*function-caller-fudge-factor-error*) calls)
			  metering:*function-callee-fudge-factor-error*))))))
   (:header "Error%"
    :documentation
    "The percentage error of the exclusive time spent in this node.  The exclusive
time is accurate only to within +/- this percentage."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~6,2,2F%"
		(float0  (+ (* callees metering:*function-caller-fudge-factor-error*)
			    (* calls metering:*function-callee-fudge-factor-error*))
			 (total field))))))
   (:header "Error/"
    :documentation
    "Bar graph of the percentage error of the exclusive time spent in this node."
    :width (25 :pixel)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(bar-graph stream
		   (+ (* callees metering:*function-caller-fudge-factor-error*)
		      (* calls metering:*function-callee-fudge-factor-error*))
		   (total field)
		   25)))))
  :current-sub-field-names ("Total" "%Run"))

(define-output-field exclusive-consing :call-tree
  :header "Excl Consing"
  :documentation
  "Number of words consed in this node excluding all of its descendants"
  :sub-field-descriptions
  ((:header "Total"
    :documentation "Total number of words consed in this node excluding all its callees"
    :width (6 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~6D" (total field))))
   (:header "Avg"
    :documentation "Average (exclusive) words consed per call of this function"
    :width (8 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~8,2F" (average field))))
   (:header "/Run"
    :documentation "Bar graph of percentage of total consing done exclusively in this node."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-consing run) 
		 50)))
   (:header "%Run"
    :documentation
    "Percentage of total consing (for entire run) done in this node (exclusively)."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field)
			(metering-run-total-consing run))))))
   (:header "/Root"
    :documentation
    "Bar graph of percentage of the total consing of the root done in this node (exclusively)."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-consing run) 
		 50)))
   (:header "%Root"
    :documentation "Percentage of total consing (for root) done in this node (exclusively)."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field)
			(metering-run-root-total-consing run)))))))
  :current-sub-field-names ("Total"))

(define-output-field inclusive-consing :call-tree
  :header "Incl Consing"
  :documentation
  "Number of words consed in this node and all of its descendants."
  :sub-field-descriptions
  ((:header "Total"
    :documentation "Total number of words consed in this function and all its callees."
    :width (6 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~6D" (total field))))
   (:header "/Run"
    :documentation "Bar graph of percentage of total consing done inclusively in this node."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-consing run) 
		 50)))
   (:header "%Run"
    :documentation "Percentage of total consing (for entire run) done in this node (inclusively)."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-consing run)))))
   (:header "/Root"
    :documentation "Bar graph of percentage of the total consing of the root done in this node."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-consing run) 
		 50)))
   (:header "%Root"
    :documentation "Percentage of total consing (for root) done in this node (inclusively)."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-root-total-consing run)))))
   (:header "Avg" :documentation "Average consing done (inclusively) in this node"
	    :width (10 :character)
	    :write-function
	    (lambda (stream field run entry &rest ignore)
	      (format stream "~10,2F"
		      (float0 (total field)
			      (total (get-component-from-components
				       'entries entry
				       (metering-run-field-descriptions run))))))))
  :current-sub-field-names ("Total"))

(define-output-field exclusive-pfs :call-tree
  :header "PFs"
  :documentation
  "Page faults exclusively for this node of the call tree (does not include its descendants)"
  :sub-field-descriptions
  ((:header "#" :documentation "The count of exclusive page faults"
	     :width (4 :character)
	     :write-function (lambda (stream field &rest ignore)
			       (format stream "~4D" (total field))))
    (:header "Avg" :documentation "The average number of exclusive page faults per call"
	     :width (4 :character)
	     :write-function (lambda (stream field &rest ignore)
			       (format stream "~4,2F" (average field)))))
  :current-sub-field-names ("#"))

(define-output-field exclusive-pfs-time :call-tree
  :header "Excl PS time"
  :documentation
  "Page system overhead (in microseconds) exclusively for this node of the call tree.
The time is measured with a quantum of 1024 microseconds."
  :sub-field-descriptions
  ((:header "Total"
     :documentation
     "Page system overhead (in microseconds) exclusively for this node of the call tree.
The time is measured with a quantum of 1024 microseconds."
     :width (8 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~8D" (total field))))
    (:header "Avg"
     :documentation
     "Average time of paging system overhead for this node exclusive of paging overhead of its descendants."
     :width (6 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~6,2F" (average field))))
    (:header "Dist"
     :documentation "A graph of the distribution of the (exclusive) page system overhead per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
     :width (50 :pixel)
     :write-function
     (lambda (stream field &rest ignore)
       (graph-histogram-distribution stream field 50)))
    (:header "WDist"
     :documentation "A graph of the weighted distribution of the (exclusive) page system overhead per call spent in this node.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
     :width (50 :pixel)
     :write-function
     (lambda (stream field &rest ignore)
	       (graph-histogram-weighted-distribution stream field 50)))
    (:header "%Excl"
     :documentation
     "The percentage of exclusive time of this node spent in the paging system."
     :width (7 :character)
     :write-function
     (lambda (stream field run entry ignore)
       (format stream "~6,2,2F%"
	       (/  (total field)
		  (total
		    (get-component-from-components
		      'exclusive-time entry
		      (metering-run-field-descriptions run)))))))
    (:header "/Excl"
     :documentation
     "A bar graph of (exclusive) paging system time as a percentage of exclusive function time."
     :width (50 :pixel)
     :write-function
     (lambda (stream field run entry ignore)
       (bar-graph stream
		  (total field)
		  (total
		    (get-component-from-components
		      'exclusive-time entry
		      (metering-run-field-descriptions run)))
		  50))))
  :current-sub-field-names ("Total" "/Excl"))

(define-output-field inclusive-pfs-time :call-tree
  :header "Incl PS time"
  :documentation
  "Page system overhead for this process (in microseconds) inclusively for this node of the call tree.
The time is measured with a quantum of 1024 microseconds.
This time has been derived from the exclusive PS time."
  :sub-field-descriptions
  ((:header "Total"
    :documentation
    "Page system overhead (in microseconds) inclusively for this node of the call tree.
The time is measured with a quantum of 1024 microseconds.
This time has been derived from the exclusive PS time."
    :width (8 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~8D" (total field))))
   (:header "/Run"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of the total run time."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run)
		 50)))
   (:header "%Run"
    :documentation
    "The percentage of the total run time spent in the paging system while inclusively in this function."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field)
			(metering-run-total-time run))))))
   (:header "/Root"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of the total time of the root."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run)
		 50)))
   (:header "%Root"
    :documentation
    "The percentage of the roots total time spent in the paging system while inclusively in this function."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field)
			(metering-run-total-time run))))))
   (:header "/Incl"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of inclusive per-process function time."
    :width (30 :pixel)
    :write-function
    (lambda (stream field run entry ignore)
      (bar-graph stream
		 (total field)
		 (total
		   (get-component-from-components
		     'inclusive-process-time entry
		     (metering-run-field-descriptions run)))
		 30)))
   (:header "%Incl"
    :documentation
    "The percentage of inclusive time spent in the paging system while in this process."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field)
			(total
			  (get-component-from-components
			    'inclusive-process-time entry
			    (metering-run-field-descriptions run)))))))))
  :current-sub-field-names ("Total" "/Incl"))

(define-output-field nil (:call-tree :statistical-call-tree)
  :header "Function"
  :documentation "The function at this level of the call tree.  
The single character before the function name describes the node:
     a leaf node
    a fully open non-leaf node
    a partially open non-leaf node
    a closed non-leaf node"
  :sub-field-descriptions
  ((:header ""
     :documentation "The function at this level of the call tree and the depth of the tree"
     :width nil
     :write-function
     (lambda (stream field run entry key)
	 (ignore field run entry)
	 ;;; the key is the node
	 (let ((function (metering:node-this-function (ct-node-collector key))))
	   (when function
	     (let ((depth (ct-node-depth key)))
	       (format stream "~3d " depth)
	       (loop repeat (max (- depth (call-tree-zero-indentation-depth run))
				 0)
		     do (write-string "| " stream))
	       (format stream "~c " (case (node-status key)
				      (:leaf #\center-dot)
				      (:open #\down-arrow)
				      (:closed #\right-arrow)
				      (:partial #\double-arrow)))
	       (with-output-as-presentation (:stream stream
					     :object function :type 'sys:function)
		 (write-string (ct-node-function-name key) stream))))))))
  :current-sub-field-names (""))



(define-default-output-fields :call-tree
			      "Calls" "Incl Process Time" "Excl Time" 
			      "Incl PS time" "Function")
