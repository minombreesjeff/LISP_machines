;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar
  *all-page-fault-type-descriptions*
  `((:replace "Replace" ,sys:%page-trace-replace "Page replaced by another page")
    (:write "Write" ,sys:%page-trace-write "Write to paging file")
    (:fetch "Fetch" ,sys:%page-trace-fetch "Fetch from paging file")
    (:prefetch "Prefetch" ,sys:%page-trace-prefetch "Prefetch from paging file")
    (:prefetch-mark "Prefetch Mark" ,sys:%page-trace-prefetch-mark
		    "Prefetch from paging file, setting mark (sequential:region)  region)")
    (:fetch-load "Fetch Load" ,sys:%page-trace-fetch-load "Fetch from load file")
    (:prefetch-load "Prefetch Load" ,sys:%page-trace-prefetch-load "Prefetch from load file")
    (:prefetch-load-mark "Prefetch Load Mark" ,sys:%page-trace-prefetch-load-mark
			 "Prefetch from load file, setting mark (sequential region)")
    (:create-page "Create Page" ,sys:%page-trace-create-page
		  "Page allocation from %ALLOCATE-MEMORY")
    (:flushable-page-fault "Flushable Page Fault" ,sys:%page-trace-flushable-page-fault
			   "Reference to a resident page marked flushable")
    (:prefetched-page-fault "Prefetched Page Fault" ,sys:%page-trace-prefetched-page-fault
			    "Reference to a prefetched page")
    (:flush "Flush" ,sys:%page-trace-flush-frame "Page marked as replaceable")))

(defvar *page-fault-menu-items*
	(loop for (nil string value doc) in *all-page-fault-type-descriptions*
	      collect `(,string :value ,value :documentation ,doc)))

(defvar *page-fault-type-array*
	(make-array 16 :initial-element "an invalid type of page fault"))

(defun fill-page-fault-type-array (array)
  (loop for (nil string index) in *all-page-fault-type-descriptions*
	do (setf (aref array index) string)))

(fill-page-fault-type-array *page-fault-type-array*)

(defvar *all-page-fault-types*
	(loop for (nil nil index) in *all-page-fault-type-descriptions*
	      collect index))

(define-presentation-type metering-pf-type ()
   :parser ((stream &key initially-display-possibilities original-type)
	    (values (dw:complete-from-sequence *all-page-fault-type-descriptions*
					       stream
					       :name-key #'second
					       :value-key #'third
					       :partial-completers `(#\space)
					       :type original-type
					       :initially-display-possibilities
					       initially-display-possibilities)))
   :choose-displayer ((stream pf-type query-identifier &key original-type)
		      (accept-values-choose-from-sequence stream
							  *all-page-fault-types*
							  pf-type query-identifier
							  :key #'third
							  :type original-type))
   :printer ((object stream)
	     (if (numberp object)
		 (princ (aref *page-fault-type-array* object)
			stream)
		 (format stream "an invalid type of page fault")))   
   :description "A type of page fault")

(defvar *page-trace-display-batching-factor* 15.)



(defflavor unpacked-event
	((visible-p t)
	 (tick 0)
	 (superior nil))
	()
  (:conc-name event-)
  (:initable-instance-variables superior)
  (:writable-instance-variables visible-p tick superior))

(defflavor artificial-structure-page-fault-event
	((parsed-events nil))
	(unpacked-event)
  (:conc-name event-)
  :readable-instance-variables
  :initable-instance-variables)

(defmethod (make-instance artificial-structure-page-fault-event) (&rest ignore)
  (when parsed-events
    (loop for event being the array-elements of parsed-events do
      (setf (event-superior event) self))))

;;; Unpacked-page-fault-event's

(defflavor unpacked-page-fault-event
	(pf-type
	 vma					; integer
	 area					; *String-area*
	 space-type				; new, old
	 representation-type			; list struct
	 object-string				; cached before possible flip pr-rep of obj
	 )
	(unpacked-event)
  (:conc-name event-)
  :readable-instance-variables
  (:initable-instance-variables pf-type vma))

(defparameter *page-fault-types-that-print-object*
	      `(,si:%page-trace-fetch ,si:%page-trace-fetch-load
		,si:%page-trace-prefetched-page-fault ,si:%page-trace-flushable-page-fault))

;;; this better happen with the appropriate print limiting bindingsn
(defmethod (make-instance unpacked-page-fault-event) (&rest ignore)
  (multiple-value-setq (area space-type representation-type) (address-area-info vma))
  (cond ((eq space-type 'stack)
	 (setf object-string "Stack Object"))
	((eq space-type 'free)
	 (setf object-string "Free"))
	(t (condition-case ()
		(let* ((vma-pointer (sys:%make-pointer sys:dtp-locative vma))
		       (object (sys:%find-structure-header vma-pointer)))
		  (setf object-string
			(with-output-to-string (s)
			  (present object 'sys:expression :stream s))))
	      (error (setf object-string
			   (format nil "#<Error printing object ~\\si:address\\>" vma)))))))

(defflavor unpacked-page-fault-main-event
	(start-time
	 duration
	 faulting-pc
	 function
	 cca
	 n-visible-sub-events
	 (local-tick 0)
	 sub-events)
	(unpacked-event)
  (:conc-name event-)
  :readable-instance-variables
  (:writable-instance-variables local-tick)
  (:initable-instance-variables start-time duration faulting-pc sub-events))

(DEFMETHOD (MAKE-INSTANCE UNPACKED-PAGE-FAULT-MAIN-EVENT) (&REST IGNORE)
  (MULTIPLE-VALUE-SETQ (FUNCTION FAULTING-PC) (SI:DISASSEMBLE-DECODE-PC FAULTING-PC))
  (WHEN (ARRAYP FUNCTION)
    (SETQ FUNCTION (OR #+3600 (SI:LOOKUP-MICROCODE-ESCAPE-ROUTINE FUNCTION)
		       #+(AND IMACH IVORY-REV-1)
		       (AND (EQL FUNCTION
				 (SYS:%FIND-STRUCTURE-HEADER
				   SI:*RETURN-KLUDGE-0-HELPER-CONTINUATION*))
			    "Fault in RETURN-KLUDGE")
		       FUNCTION)))
  (loop for sub-event in sub-events
	do (setf (event-superior sub-event) self)))

(defmethod (event-height artificial-structure-page-fault-event) (line-height)
  (loop for event being the array-elements of parsed-events
	when (event-visible-p event)
	  sum (event-height event line-height)))

(defmethod (event-height unpacked-page-fault-main-event) (line-height)
  (+ (* (1+ n-visible-sub-events) line-height) 2))

(defmethod (number-of-visible-sub-events artificial-structure-page-fault-event) ()
  (loop for event being the array-elements of parsed-events
	when (event-visible-p event)
	  sum (number-of-visible-sub-events event)))

(defmethod (number-of-visible-sub-events unpacked-page-fault-main-event) ()
  (1+ n-visible-sub-events))

(defmethod (visible-sub-events unpacked-page-fault-main-event) (visible-pf-types)
  (let ((any-changed nil))
    (setf n-visible-sub-events 0)
    (loop for sub-event in sub-events
	  for old-visible-p = (event-visible-p sub-event)
	  if (member (event-pf-type sub-event) visible-pf-types)
	    do (setf (event-visible-p sub-event) t)
	       (incf n-visible-sub-events)
	       (unless (eql old-visible-p t)
		 (setf any-changed t))
	  else do (setf (event-visible-p sub-event) nil)
		  (unless (eql old-visible-p nil)
		    (setf any-changed t)))
    (when any-changed (incf-event-tick self))
    n-visible-sub-events))

(defmethod (toggle-sub-events-visibility unpacked-page-fault-main-event) (visible-pf-types)
  (if (loop for sub-event in sub-events
	    for old-visible-p = (event-visible-p sub-event)
	    always (eql (event-visible-p sub-event)
			(not (null (member (event-pf-type sub-event) visible-pf-types)))))
      ;; visibility was according to filter -> open all
      (progn
	(setf n-visible-sub-events 0)
	(loop for sub-event in sub-events
	      do (setf (event-visible-p sub-event) t)
		 (incf n-visible-sub-events))
	(incf-event-tick self))
      ;; use filter
      (visible-sub-events self visible-pf-types)))

(defmethod (incf-sub-event-ticks unpacked-page-fault-main-event) ()
  (loop for sub-event in sub-events
	do (incf (event-tick sub-event))))

(defmethod (event-function-name unpacked-page-fault-main-event) ()
  (cond ((null function) nil)
	((arrayp function) "")			;this is used to sort
	(t (dbg:lframe-function-name (dbg:find-language-for-function function)
				     function t))))

(defmethod (main-eventp unpacked-page-fault-main-event) () t)
(defmethod (main-eventp unpacked-page-fault-event) () nil)

(defmethod (incf-event-tick unpacked-event) ()
  (incf tick)
  (when superior (incf-event-tick superior)))

;;;  stolen from dla - page-trace.lisp
;;; Given an address, returns three values: area-name, space-type, representation-type
(defun address-area-info (address)
  (let (area region name-of-area space-type representation-type)
    (if (or (null (setq area (si:%area-number address)))
	    (null (setq region (si:%region-number address)))
	    ( (si:%pointer-difference address
				       (si:region-origin region))
	       (si:region-free-pointer region)))
	;; should only happen for -1 = free memory (if you left gc on)
	;; call it free memory even if it is allocated to some area, but not yet allocated
	;; to objects, to avoid blowing out later in %find-structure-extent.
	(setq name-of-area 'not-in-any-area
	      space-type 'free
	      representation-type 'free)
	;; normal case
	(setq name-of-area (sys:area-name area)
	      space-type (select (ldb sys:%%region-space-type
				      (sys:region-bits (sys:%region-number address)))
			   (sys:%region-space-free 'free)
			   (sys:%region-space-old 'old)
			   (sys:%region-space-new 'new)
			   (sys:%region-space-copy 'copy)
			   (sys:%region-space-weak 'weak)
			   (sys:%region-space-stack 'stack)
			   #+IMach (sys:%region-space-control-stack 'control-stack)
			   #+IMach (sys:%region-space-structure-stack 'structure-stack)
			   (otherwise 'misc))
	      representation-type (select (ldb si:%%region-representation-type
					       (sys:region-bits (si:%region-number address)))
				    (si:%region-representation-type-list 'list)
				    (si:%region-representation-type-structure 'struct)
				    (otherwise 'unknown))))
    (values name-of-area space-type representation-type)))

(define-presentation-type unpacked-page-fault-main-event ()
      :no-deftype t
      :description "a main page fault event"
      :printer ((event stream) (format stream "~A ~A"
				       (event-start-time event)
				       (event-function event))))

(define-mi-command (com-open-sub-faults) ((event 'unpacked-page-fault-main-event))
   (toggle-sub-events-visibility current-run event))

(define-presentation-to-command-translator open-event
  (unpacked-page-fault-main-event :gesture :left
		  :documentation "Open all subevents of this main page fault event.")
  (main-event)
  `(com-open-sub-faults ,main-event))

(defmethod (display-event artificial-structure-page-fault-event)
	   (stream run pixel-location
		   entry-number
		   header-tick char-width
		   line-height top bottom)
  (let* ((original-entry-number entry-number)
	 (event-pixel-bottom (+ pixel-location (event-height self line-height)))
	 (cache-value (clipped-cache-value pixel-location event-pixel-bottom
					   top bottom tick)))
    (dw:with-redisplayable-output (:stream stream
				   :unique-id self
				   :cache-value cache-value
				   :cache-test #'clipped-cache-test)
      (if (eq cache-value :clipped)
	  (progn (write-char #\space stream)
		 (terpri stream)
		 (send stream :set-cursorpos
		       (send stream :read-cursorpos :pixel) event-pixel-bottom :pixel))
	  (let ((pixel-location pixel-location)
		(entry-number entry-number))
	    (loop for event being the array-elements of parsed-events 
		  when (event-visible-p event)
		    do 
		      (multiple-value-setq (pixel-location entry-number)
			(display-event event
				       stream run pixel-location
				       entry-number
				       header-tick char-width
				       line-height top bottom))))))
    (values event-pixel-bottom (+ original-entry-number (number-of-visible-sub-events self)))))

(defmethod (display-event unpacked-page-fault-main-event) (stream run pixel-location
								  entry-number
								  header-tick char-width
								  line-height top bottom)
  (let* ((event-pixel-bottom (+ pixel-location (event-height self line-height)))
	 (cache-value (clipped-cache-value pixel-location event-pixel-bottom
					   top bottom tick)))
    (dw:with-redisplayable-output (:stream stream
				   :unique-id self
				   :cache-value cache-value
				   :cache-test #'clipped-cache-test)
      (if (eq cache-value :clipped)
	  (progn (write-char #\space stream)
		 (terpri stream)
		 (send stream :set-cursorpos
		       (send stream :read-cursorpos :pixel) event-pixel-bottom :pixel))
	  (dw:with-output-as-presentation (:stream stream :object self
						   :type 'unpacked-page-fault-main-event
						   :single-box t)
	    (let ((entry-number entry-number)
		  max-x)
	      (dw:with-redisplayable-output (:stream stream
					     :unique-id self
					     :cache-value local-tick)
		(write-char #\space stream)
		(loop for first first t then nil
		      for field in (metering-run-output-fields run)
		      unless first
			do (format stream "~v@t" *number-of-inter-field-spaces*)
		      do (write-sub-fields field stream run self nil char-width)))
	      (setf max-x (send stream :read-cursorpos))
	      (terpri stream)
	      (incf entry-number)
	      (loop for sub-event in sub-events
		    when (event-visible-p sub-event)
		      do (display-event sub-event stream run entry-number header-tick
					char-width)
			 (terpri stream)
			 (incf entry-number))
	      (dw:with-redisplayable-output (:stream stream
					     :unique-id 'line
					     :cache-value local-tick)
		(if *graphics-stream-p*
		    (multiple-value-bind (x y) (send stream :read-cursorpos)
		      (graphics:with-room-for-graphics (stream nil :fresh-line nil
							       :move-cursor nil)
			(graphics:draw-line 0 0 max-x 0 :stream stream :dashed t
					    :dash-pattern #(6 2) :thickness 0))
		      (send stream :set-cursorpos x (+ y 2)))
		    (format stream "~v@{-~}~%" max-x t)))))))
    (values event-pixel-bottom
	    (+ entry-number (number-of-visible-sub-events self)))))

(defmethod (display-event unpacked-page-fault-event) (stream run entry-number
							     header-tick char-width)
  (ignore entry-number header-tick)
  (dw:with-redisplayable-output (:stream stream
				 :unique-id self
				 :cache-value tick)
    (write-char #\space stream)
    (loop for first first t then nil
	  for field in (metering-run-output-fields run)
	  unless first
	    do (format stream "~v@t" *number-of-inter-field-spaces*)
	  do (write-sub-fields field stream run self nil char-width))))



(defflavor page-trace-metering-run
	(start-time
	 parsed-events
	 (displayed-events nil)
	 (invalidate-display-structure t)
	 (displayed-pf-types (list sys:%page-trace-fetch sys:%page-trace-fetch-load))
	 (display-empty-events t)
	 sort-by
	 (duration-threshold nil)
	 (redisplay-tick 0)
	 n-entries
	 (n-printable-entries nil)
	 old-gc-status
	 (initially-flush-all-pages nil))
	(basic-metering-run)
  (:initable-instance-variables initially-flush-all-pages))

(defmethod (make-instance page-trace-metering-run :after) (&rest ignore)
  (setf sort-by (first (sorting-options-for-metering-type (metering-run-type self)))))

(defmethod (metering-run-type page-trace-metering-run) () :page-fault)
									    
(defmethod (metering-run-parameters page-trace-metering-run) ()
  `(:initially-flush-all-pages ,initially-flush-all-pages))

(defmethod (clean-up-run-is-dead page-trace-metering-run) ()
  (setf parsed-events nil
	displayed-events nil
	displayed-pf-types nil))

(defmethod (force-redisplay page-trace-metering-run)  (&optional (only-to-leaves nil))
  (loop for event being the array-elements of parsed-events
	do (incf-event-tick event)
	   (unless only-to-leaves
	     (incf (event-local-tick event))
	     (incf-sub-event-ticks event)))
  (incf redisplay-tick))

(defmethod (force-recalculation page-trace-metering-run)  ()
  (setf n-printable-entries nil)
  (incf redisplay-tick))

(defmethod (do-pre-metering-stuff page-trace-metering-run) ()
  (when initially-flush-all-pages
    #-VLM (si:flush-all-main-memory-pages))
  (setf old-gc-status si:gc-on)
  (si:gc-off)
  (setf start-time (si:%microsecond-clock)))

(defvar *page-trace-event-collector*
	(make-data-collector 'metering:event-trace
		       :circular nil
		       :size 10000
		       :area metering:wired-metering-area))

(defmethod (define-collector page-trace-metering-run) ()
  *page-trace-event-collector*)

;;; this only returns one of the two triggers - but they both have the same
;;; control
(defmethod (metering-run-trigger page-trace-metering-run) () 'si:page-fault)

(defmethod (set-trigger page-trace-metering-run) ()
  (collect-data-from-trigger 'si:page-fault
			     `((,collector
				#+3600 (si:%logdpb si:trace-type (byte 4 28.) si:vma)
				#+imach (si:%set-tag si:vma
						     (dpb si:trace-type (byte 4 0)
							  si:dtp-packed-instruction-60))))
			     :override t :wired t)
  (collect-data-from-trigger 'si:page-fault-end
			     `((,collector
				#+3600
				(si:%logdpb si:%page-trace-end (byte 4 28.)
					    (si:%32-bit-difference end-time
								   si:starting-time))
				#+imach
				(si:%set-tag (si:%32-bit-difference end-time si:starting-time)
					     (dpb si:%page-trace-end (byte 4 0)
						  si:dtp-packed-instruction-60))
				si:faulting-pc
				si:starting-time))
			     :wired t
			     :override t))

(defmethod (set-generators page-trace-metering-run) ()
  (clear-trigger 'si:page-fault)
  (clear-trigger 'si:page-fault-end)
  (generate-data-at-trigger 'metering:page-fault-end
			    `((metering:real-time :keywords ((:name end-time))))
			    :override t
			    :wired t))

(defmethod (set-scope page-trace-metering-run) ()
  (let ((region-spec (parse-region region)))
    (metering:set-page-tracing-type :metering)
    (set-scope-of-control
      'si:page-fault
      `(and :switch
	    (:process ,process)
	    ,@(if region-spec
		  `((:within (and (:region ,region-spec)
				  (not (:region #'dbg:debugger-top-level)))
		     (:process ,process)))
		  `((not (:within (:region #'dbg:debugger-top-level)
			  (:process ,process)))))))))

(defmethod (clear-scope page-trace-metering-run) ()
  (set-scope-of-control 'si:page-fault nil))

(defmethod (finalize-run page-trace-metering-run) (abort-p)
  ;;; grovel over data
  (unless abort-p
    (adjust-collector self))
  (metering:reset-collector collector)
  (metering:unwire collector)
  (setf collector nil)
  ;; this has to be done after we have grovel over the goodies saving the objects
  (apply #'si:gc-on :query-p nil old-gc-status))

(defmethod (fixup-display-events page-trace-metering-run) ()
  (let* ((total (length parsed-events))
	 (batch-factor *page-trace-display-batching-factor*)
	 (total-depth (if (eql total 0) 0 (floor (log total batch-factor)))))
    (tv:noting-progress ("Rebuilding Display Structure")
      (labels ((collect (depth index)
		 (declare (values display-event new-index))
		 (decf depth)
		 (let* ((i index)
			(events
			  (if (plusp depth)
			      (loop repeat batch-factor
				    while (< i total)
				    collect (multiple-value-bind (event new-index)
						(collect depth i)
					      (setf i new-index)
					      (tv:note-progress i total)
					      event))
			      (loop for event being the array-elements of parsed-events
					from index 
				    repeat batch-factor
				    collect event
				    do (incf i)))))
		   (values (make-instance 'artificial-structure-page-fault-event
					  :parsed-events
					  (make-array (length events) :initial-contents events))
			   i))))
	(let ((events
		(loop with index = 0
		      while (< index total)
		      collect (multiple-value-bind (event new-index)
				  (collect total-depth index)
				(setf index new-index)
				(tv:note-progress index total)
				event))))
	  (setf displayed-events (make-array (length events) :initial-contents events))
	  (setf invalidate-display-structure nil))))))

(defmethod (adjust-collector page-trace-metering-run) ()
  (setf parsed-events (make-array 100 :fill-pointer 0))
  (setf n-entries 0)
  ;;; seperate loop to count them up - for the note progress
  ;;; too bad the collector doesn't know this number
  (get-entries collector
	       #'(lambda (&rest ignore)
		   (incf n-entries)))			      
  (let ((*print-structure-contents* nil)
	(*print-pretty* nil)
	(*print-array* nil)
	(*print-length* 3)
	(*print-level* 3)
	(*print-string-length* 30)
	(dw::*abbreviate-function-specs* t)
	(entry-number 0))
    (tv:noting-progress ("Parsing Page Faults Events")
      (let ((sub-events nil)
	    (run-start start-time))
	(get-entries collector
		     #'(lambda (name-or-data &rest args)
			 (tv:note-progress entry-number n-entries)
			 (incf entry-number)
			 (let ((pf-type #+3600 (si:%logldb (byte 4 28.) name-or-data)
					#+IMACH (ldb (byte 4 0) (si:%tag name-or-data))))
			   (if (eql pf-type si:%page-trace-end)
			       (progn
				 (vector-push-extend
				   (make-instance 'unpacked-page-fault-main-event
						  :start-time (time-difference (second args)
									       run-start)
						  :faulting-pc (first args)
						  :duration
						  #+3600 (ldb (byte 28. 0) name-or-data)D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") 
0						  #+IMACH (si:%fixnum name-or-data)
						  :sub-events (reverse sub-events))
				   parsed-events)
				 (setf sub-events nil))
			       (push (make-instance 'unpacked-page-fault-event
							 ;;; decompress
						    :pf-type pf-type
						    :vma
						    #+3600 (ldb (byte 28. 0) name-or-data)1 
0						    #+IMACH (si:%fixnum name-or-data))
				     sub-events)))))))
    (fixup-display-events self)))

(define-sorting-options
  :page-fault
  `(("Start Time" start-time ,#'event-start-time ,#'< nil)
    ("Duration" durations ,#'event-duration ,#'> nil)
    ("Function name" :key ,#'event-function-name ,#'sort-function-name nil)))

;;; this is a crude merge of alist-member and subset
(define-presentation-type alist-subset-1 ((&rest alist) &key (highlighting-test #'eq))
   :choose-displayer ((stream object query-identifier &key original-type)
		      (flet ((print-item (alist-element stream)
			       (let ((style (and (consp alist-element)
						 (consp (cdr alist-element))
						 (getf (cdddr alist-element) :style))))
				 (with-character-style (style stream)
				   (write-string (dw::token-element-string alist-element)
						 stream)))))
			(accept-values-choose-from-sequence
			  stream alist object query-identifier
			  :type original-type
			  :multiple-choices t
			  :id-test highlighting-test
			  :printer #'print-item
			  :key #'tv:menu-execute-no-side-effects
			  :select-action #'(lambda (new list)
					     (if (member new list :test highlighting-test)
						 (remove new list :test highlighting-test)
						 (adjoin new list :test highlighting-test))))))
   :describer ((stream &key plural-count)
	       (flet ((print-item (alist-element stream)
		      (let ((style (and (consp alist-element)
					(consp (cdr alist-element))
					(getf (cdddr alist-element) :style))))
			(with-character-style (style stream)
			  (write-string (dw::token-element-string alist-element)
					stream)))))
		 (dw::presentation-string-pluralize "a subset" stream plural-count)
	       ;; You have to be moby, moby sick to ASK for two subsets of the alist,
	       ;; and how could it ever figure out the boundary?  But printing the
	       ;; description is not pointless.
	       (write-string " of the items " stream)
	       (dw::write--and--sequence alist stream #'print-item)))			     
   :printer ((set stream &key acceptably)
	     (flet ((print-item (object stream)
		      (let* ((alist-element (dw::item-from-menu-value object
								      set
								      :test highlighting-test))
			     (style (and (consp alist-element)
					 (consp (cdr alist-element))
					 (getf (cdddr alist-element) :style))))
			(with-character-style (style stream)
			  (write-string (dw::token-element-string alist-element)
					stream)))))
	       (cond ((and (null set) (not acceptably))
		      (write-string "no alist selected" stream))
		     (t (format-textual-list set #'print-item :stream stream
					     :separator (if acceptably ", " " "))))))
   :parser ((stream &key initially-display-possibilities)
	    (values
	      (delete-duplicates
		(accept `((or null
			      ((parse-error-wall
				 ((sequence ((alist-member :alist ,(copy-list alist)))))))))
			:stream stream :prompt nil
			:initially-display-possibilities initially-display-possibilities)))))

(defmethod (change-parameters page-trace-metering-run) (stream)
  (let ((old-sort-by sort-by))
    (dw:accepting-values (stream :label "Change Display Parameters")
      (setq sort-by (accept `(sorting-option ,(metering-run-type self))
			    :default sort-by
			    :prompt "Sort the output by"
			    :stream stream)
	    duration-threshold
	    (accept '(null-or-type integer)
		    :default duration-threshold
		    :prompt
		    "Value (in microseconds) of page fault duration below which data isn't shown"
		    :stream stream)    
	    displayed-pf-types (accept `(alist-subset-1 . ,*page-fault-menu-items*)
				       :default displayed-pf-types
				       :prompt "Which types of page faults should be displayed"
				       :stream stream)
	    display-empty-events
	    (accept 'boolean :default display-empty-events
		    :prompt "Display events whose subevents have all been filtered"
		    :stream stream)))
    (unless (eql sort-by old-sort-by)
      (setf invalidate-display-structure t))
    (force-recalculation self)))

(defmethod (process-selector-information page-trace-metering-run) ()
  (setf n-printable-entries 0)
  (tv:noting-progress ("Filter Results")
    (loop for i from 0
	  for event being the array-elements of parsed-events
	  do (tv:note-progress i n-entries)
	  if (or (null duration-threshold)
		 (> (event-duration event) duration-threshold))
	    do (let ((visible-sub-events (visible-sub-events event displayed-pf-types)))
		 (if (or display-empty-events
			 (not (zerop visible-sub-events)))
		     (progn (incf n-printable-entries (1+ visible-sub-events))
			    (setf (event-visible-p event) t))
		     (setf (event-visible-p event) nil)))
	  else do (setf (event-visible-p event) nil)))
  (tv:noting-progress ("Sort Results")
    (sort parsed-events
	  (sorting-option-predicate sort-by)
	  :key (sorting-option-extractor sort-by)))
  (when invalidate-display-structure
    (fixup-display-events self)))
							    
(defmethod (display-metering-results page-trace-metering-run) (stream header-char-width)
  (ignore header-char-width)
  (when (null n-printable-entries)
    (process-selector-information self))
  (let ((*print-structure-contents* nil)
	(*print-pretty* nil)
	(*print-array* nil)
	(*print-length* 3)
	(*print-level* 3)
	(*print-string-length* 30)
	(dw::*abbreviate-function-specs* t))
    (multiple-value-bind (ignore top ignore bottom)
	(send-if-handles stream :visible-cursorpos-limits :pixel)
      (with-redisplayable-output (:stream stream :unique-id self :cache-value redisplay-tick)
	(dw:with-output-truncation (stream :horizontal t)
	  (let ((char-width (send stream :char-width))
		(line-height (send stream :line-height)))
	    (tv:noting-progress ("Meter Printout")
	      (if (zerop n-entries)
		  (display-no-data-message self stream)
		  (loop with pixel-location = 0
			with entry-number = 0
			for event being the array-elements of displayed-events
			when (event-visible-p event)
			  do (tv:note-progress entry-number n-printable-entries)
			     (multiple-value-setq  (pixel-location entry-number)
			       (display-event event stream
					      self pixel-location entry-number header-tick
					      char-width line-height
					      top bottom)))))))))))

(defmethod (toggle-sub-events-visibility page-trace-metering-run) (event)
  (toggle-sub-events-visibility event displayed-pf-types)
  (incf redisplay-tick))



(define-output-field nil :page-fault
  :header "Start"
  :documentation
  "The starting time (in seconds) of this page fault."
  :sub-field-descriptions
  ((:header "Time"
     :documentation "The starting time (in seconds) of this page fault."
     :width (11 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (when (main-eventp event)
	 (format stream "~11,6,-6F" (event-start-time event))))))
  :current-sub-field-names ("Time"))

(define-output-field nil :page-fault
  :header "Total"
  :documentation
  "The total time (in microseconds) spent processing this page fault."
  :sub-field-descriptions
  ((:header "Time"
     :documentation "The total time spent processing this page fault."
     :width (7 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (when (main-eventp event)
	 (format stream "~7D" (event-duration event))))))
  :current-sub-field-names ("Time"))

(define-output-field nil :page-fault
  :header "Fault Type"
  :documentation "The type of page fault."
  :sub-field-descriptions
  ((:header "Name"
     :documentation "The type of page fault."
     :width (21 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (unless (main-eventp event)
	 (format stream "~21<~@\\presentation\\~>"
		 (event-pf-type event) 'metering-pf-type)))))
  :current-sub-field-names ("Name"))

(define-output-field nil :page-fault
  :header "VMA"
  :documentation "The virtual memory address of the fault."
  :sub-field-descriptions
  ((:header "Address"
     :documentation "The virtual memory address (in octal) of the fault."
     :width (12 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (unless (main-eventp event)
	 (format stream "~12<~\\si:address\\~>" (event-vma event)))))
    (:header "Page"
     :documentation "The page number (in octal) of the fault."
     :width (7 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (unless (main-eventp event)
	 (format stream "~7O" (ldb si:%%vma-page-num (event-vma event))))))
    (:header "Area Name"
     :documentation "The area of the fault."
     :width (28 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (unless (main-eventp event)
	 (format stream "~28<~A~>" (event-area event)))))
    (:header "Space"
     :documentation "The space type of the fault."
     :width (6 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (unless (main-eventp event)
	 (format stream "~6<~A~>" (event-space-type event)))))
    (:header "Rep"
     :documentation "The space type of the fault."
     :width (6 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (unless (main-eventp event)
	 (format stream "~6<~A~>" (event-representation-type event))))))
  :current-sub-field-names ("Area Name" "Address" "Page" "Rep"))

(define-output-field nil :page-fault
  :header "Function/Object"
  :documentation
  "The function in which the page fault occurred.
Or the object on the which the page fault occurred."
  :sub-field-descriptions
  ((:header "PC"
     :documentation
     "The relative PC at which the fault occurred."
     :width (6 :character)
     :write-function
     (lambda (stream ignore ignore event ignore)
       (when (main-eventp event)
	 (format stream "~6O" (event-faulting-pc event)))))
    (:header "Object"
     :documentation "The function or object on which the fault occurred."
     :width nil
     :write-function
     (lambda (stream ignore ignore event ignore)
       (condition-case ()
	    (if (main-eventp event)
		(let ((function (event-function event)))
		  (when function
		    (present function (type-of function) :stream stream)))
		(when (member (event-pf-type event)
			      *page-fault-types-that-print-object*)
		  (let ((object (si:%find-structure-header (event-vma event))))
		    (with-output-as-presentation (:object object :type (type-of object)
							  :stream stream
							  :allow-sensitive-inferiors nil
							  :single-box t)
		      (format stream "~A" (event-object-string event))))))
	  (error (format stream "#<Error printing object ~\\si:address\\>"
			 (if (main-eventp event)
			     (event-faulting-pc event)
			     (event-vma event))))))))
  :current-sub-field-names ("PC" "Object"))

(define-default-output-fields :page-fault "Start" "Total" "Fault Type" "VMA"
			      "Function/Object")

;;; old code - still some stuff in here
#||
(define-mi-command (com-display-page-fault-meters :menu-accelerator t)
    ((collector `((mi-collector :page-fault)))
     &key
     (trace 'boolean :default nil :mentioned-default t))
   (with-output-to-history ()
     (with-character-style ('(:fix :roman :normal))
       (fresh-line)
       (save-collector-viewport collector)
       (display-collector-info collector *standard-output*)
       (fresh-line)
       (formatting-table (*standard-output*)
	 (formatting-column-headings ()
	   (formatting-cell () (write-string "Name"))
	   (formatting-cell () (write-string "Value")))
	 (loop for type in '#.(list si:%PAGE-TRACE-REPLACE
				   si:%PAGE-TRACE-WRITE
				   si:%PAGE-TRACE-FETCH
				   si:%PAGE-TRACE-PREFETCH
				   si:%PAGE-TRACE-PREFETCH-MARK
				   si:%PAGE-TRACE-FETCH-LOAD
				   si:%PAGE-TRACE-PREFETCH-LOAD
				   si:%PAGE-TRACE-PREFETCH-LOAD-MARK
				   si:%PAGE-TRACE-CREATE-PAGE
				   si:%PAGE-TRACE-FLUSHABLE-PAGE-FAULT
				   si:%PAGE-TRACE-PREFETCHED-PAGE-FAULT
				   si:%PAGE-TRACE-FLUSH-FRAME)
	       do
	   (when (plusp (aref (page-fault-collector-page-faults-by-type collector) type))
	     (formatting-row ()
	       (formatting-cell () (present type 'metering:metering-pf-type))
	       (formatting-cell ()
		 (format t "~D" (aref (page-fault-collector-page-faults-by-type collector)
				      type))))))
	 (formatting-row ()
	   (formatting-cell () (write-string "Total"))
	   (formatting-cell () (format t "~D"
				       (page-fault-collector-total-page-faults collector))))
	 (formatting-row ()
	   (formatting-cell () (write-string "Total (- flushes)"))
	   (formatting-cell ()
	     (format t "~D"
		     (- (page-fault-collector-total-page-faults collector)
			(aref (page-fault-collector-page-faults-by-type collector)
			      si:%PAGE-TRACE-FLUSH-FRAME))))))
       (when trace
	 (fresh-line)
	 (display-page-fault-meters collector *standard-output*)))))
||#


