;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor statistical-call-tree-metering-run
	((total-process-time nil))
	(statistical-function-metering-mixin call-tree-metering-mixin basic-metering-run)
  (:readable-instance-variables (metering-run-total-process-time total-process-time)))

(defmethod (metering-run-type statistical-call-tree-metering-run) () :statistical-call-tree)
											    
(defmethod (define-collector statistical-call-tree-metering-run) ()
  (make-data-collector 'metering:collect-backtrace
		       :name nil
		       :component-description
		       '((inclusive-time metering:standard-deviation)
			 (exclusive-time metering:standard-deviation)
			 (inclusive-process-time metering:sum)
			 (exclusive-process-consing metering:standard-deviation)
			 (inclusive-process-consing metering:sum)
			 (exclusive-process-time metering:standard-deviation)
			 (inclusive-process-pfs metering:sum)
			 (exclusive-process-pfs metering:standard-deviation)
			 (inclusive-process-pfs-time metering:sum)
			 (exclusive-process-pfs-time metering:standard-deviation))))

(define-collector-function create-statistical-call-tree-collector (node)
  (flet ((real-collector (stack-trace exclusive-time exclusive-process-time
				      exclusive-process-consing
				      exclusive-process-pfs exclusive-process-pfs-time)
	   (metering:define-collector-type
	     (node metering:collect-backtrace
		   :component-description
		   ((inclusive-time metering:standard-deviation)
		    (exclusive-time metering:standard-deviation)
		    (inclusive-process-time metering:sum)
		    (exclusive-process-consing metering:standard-deviation)
		    (inclusive-process-consing metering:sum)
		    (exclusive-process-time metering:standard-deviation)
		    (inclusive-process-pfs metering:sum)
		    (exclusive-process-pfs metering:standard-deviation)
		    (inclusive-process-pfs-time metering:sum)
		    (exclusive-process-pfs-time metering:standard-deviation))))
	   (loop for functions on stack-trace
		 as function = (first functions)
		 if (cdr functions)
		   ;; push in
		   do (metering:collect node function 't)
		      ;; on last frame push in and collect data
		 else do (metering:with-collector (node function 't)
			   (metering:collect exclusive-time exclusive-time)
			   (metering:collect exclusive-process-time exclusive-process-time)
			   (metering:collect exclusive-process-consing
					     exclusive-process-consing)
			   (metering:collect exclusive-process-pfs exclusive-process-pfs)
			   (metering:collect exclusive-process-pfs-time exclusive-process-pfs-time))
			 ;; reset stack to top.
			 (setf (metering:collect-backtrace-current-position node) node)
			 (return (values)))))
    #'real-collector))


(defmethod (sample-data-and-trigger-metering statistical-call-tree-metering-run)
	   (process-to-watch)
  (let ((root-p (cond ((and (eq what-to-meter :functions) metered-functions)
		       (if (= (length metered-functions) 1)
			   (let ((real-function (fdefinition (car metered-functions))))
			     #'(lambda (function)
				 (declare (sys:downward-function))
				 (eql function real-function)))
			   #'(lambda (function)
			       (declare (sys:downward-function))
			       (member function real-metered-functions))))
		      ((and (eq what-to-meter :enabled)
			    (parse-trigger region :if-not-exists nil))
		       #'(lambda (function)
			   (member 'meter-form
				   (second (assoc ':macros-expanded
						  (debugging-info function))))))
		      (t 'ignore)))
	(metering-enabled (let ((state (metering::control-state
					 *control-statistical-metering*)))
			    (or (eq state 't)
				(and state
				     (metering::metering-enabled?
				       *control-statistical-metering*)))))
	(tentative-root nil))
    #+3600
    (labels ((get-backtrace (fp backtrace)
	       (if (or (null fp) (not metering-enabled))
		   (progn
		     ;; as soon as you get the goodies turn back on the scheduler
		     (setq si:inhibit-scheduling-flag nil)
		     (metering:end-metering-interval (statistically-sampling-trigger)
						     (trigger-data)
			 (or tentative-root backtrace))
		     (metering:start-metering-interval (statistically-sampling-trigger)
						       (trigger-data)
		       nil))
		   (let ((function (sys:frame-function fp)))
		     (if (or (not (functionp function))
			     (member function functions-to-ignore))
			 (get-backtrace (si:frame-previous-frame fp) backtrace)
			 (stack-let* ((func (sys:frame-function fp))
				      (backtrace (cons func backtrace)))
			   (when (funcall root-p func)
			     (setf tentative-root backtrace))
			   (get-backtrace (si:frame-previous-frame fp) backtrace)))))))
      ;; disable process switching so we get a stable view
      ;; known to be re-enabled inside get-backtrace...
      (let* ((si:inhibit-scheduling-flag 't) 
	     (sg (process-stack-group process-to-watch))
	     (fp (if (eq sg si:%current-stack-group)
		     ;; This is exceedingly useless... but this avoids a
		     ;;  nasty blowout.
		     (si:%stack-frame-pointer)
		     (when (and sg (zl:typep sg :stack-group))
		       (si:sg-frame-pointer sg)))))
	(get-backtrace fp nil)))
    #+IMACH
    (stack-let* ((si:inhibit-scheduling-flag 't)
		 (sg (process-stack-group process-to-watch))
		 (backtrace
		   (when sg (zl:make-array 200 :fill-pointer 0 :type 'si:art-q-list))))
      (when (and metering-enabled sg (zl:typep sg :stack-group))
	(dbg:map-over-frames-in-stack
	  sg
	  #'(lambda (fp cr function)
	      (ignore fp cr)
	      (when (and (functionp function) (not (member function functions-to-ignore)))
		(when (funcall root-p function) (setf tentative-root (fill-pointer backtrace)))
		(vector-push-extend function backtrace)))))
      (setq si:inhibit-scheduling-flag nil)
      (metering:end-metering-interval (statistically-sampling-trigger)
				      (trigger-data)
	  (when (and sg (zl:typep sg :stack-group))
	    (if tentative-root
		(nthcdr (- (length backtrace) tentative-root) (g-l-p (nreverse backtrace)))
		(g-l-p (nreverse backtrace)))))
      (metering:start-metering-interval (statistically-sampling-trigger)
					(trigger-data)
	nil))))

(defmethod (set-trigger statistical-call-tree-metering-run) ()
  (collect-data-from-trigger
    'statistically-sampling-trigger
    (create-statistical-call-tree-collector collector)))

(defmethod (finalize-run statistical-call-tree-metering-run) (abort-p)
  (unless abort-p
    (tv:noting-progress ("Computing Inclusives from Exclusives")
      (metering:compute-inclusive-from-exclusive-data
	collector '((exclusive-time inclusive-time)
		    (exclusive-process-time inclusive-process-time)
		    (exclusive-process-consing inclusive-process-consing)
		    (exclusive-process-pfs-time inclusive-process-pfs-time)
		    (exclusive-process-pfs inclusive-process-pfs))))))

;;; *** this needs to be fixed ***
(defmethod (find-real-roots statistical-call-tree-metering-run) ()
  (declare (values new-roots successp))
  (let ((roots nil))
    (labels ((find-roots (collector test-function)
	       (map-over-descendant-collectors
		 collector
		 #'(lambda (function sub-collector)
		     (if (funcall test-function function)
			 (push sub-collector roots)
			 (find-roots sub-collector test-function))))))
      (cond ((parse-trigger region :if-not-exists nil)
	     (find-roots collector
			 #'(lambda (function)
			     (member 'meter-form
				     (second (assoc ':macros-expanded
						    (debugging-info function))))))
	     (values roots t))
	    ((functionp region)
	     (let ((real-function (fdefinition region)))
	       (find-roots collector
			   #'(lambda (function)
			       (eql function real-function)))
	       (values roots t)))
	    (t nil)))))

(defmethod (initialize-display statistical-call-tree-metering-run :after) (mi)
  (ignore mi)
  (unless display-initialized
    ;;; splice out uninteresting nodes
    (multiple-value-bind (roots splicep)
	(find-real-roots self)
      (when (and splicep roots)
	(let ((callees (metering:node-callees collector)))
	  (if (listp callees)
	      (setf (metering:node-callees collector) nil)
	      (clrhash callees))
	  (loop for root in roots
		do (if (listp callees)
		       (push root (metering:node-callees collector))
		       (setf (gethash (metering:node-this-function root) callees)
			     root))
		   (setf (metering:node-caller root) collector)))))
    (let ((consing-extractor (metering:get-component-extractor-from-components
			       'inclusive-process-consing nil collector))
	  (time-extractor (metering:get-component-extractor-from-components
			    'inclusive-process-time nil collector)))
      (setf total-consing 0
	    total-process-time 0)
      (map-over-descendant-collectors
	collector
	#'(lambda (ignore subcollector)
	    (let ((components (metering:get-components-from-recursive-node subcollector)))
	      (incf total-process-time
		    (total (funcall time-extractor components)))
	      (incf total-consing
		    (total (funcall consing-extractor components)))))))))

;;; used by some of the /root subfields
(defmethod (metering-run-root-total-process-time statistical-call-tree-metering-run) ()
  (if root
      (total (get-component-from-components
	       'inclusive-process-time
	       (metering:get-components-from-recursive-node
		 root)
	       (metering:collector-component-description collector)))
      total-process-time))

;;; this is used by /root fields
(defmethod (metering-run-root-total-process-consing statistical-call-tree-metering-run) ()
  (if root
      (total (get-component-from-components
	       'inclusive-process-consing
	       (metering:get-components-from-recursive-node
		 root)
	       (metering:collector-component-description collector)))
      total-consing))

(define-sorting-options :statistical-call-tree
 `(("Total Inclusive Process Time"
    inclusive-process-time total ,#'> ,#'metering-run-total-process-time)
   ("Total Inclusive Time" inclusive-time total ,#'> ,#'metering-run-total-time)
   ("Total Inclusive Process Consing"
    inclusive-process-consing total ,#'> ,#'metering-run-total-consing)
   ("Total Inclusive Process Paging System Time" inclusive-process-pfs-time total ,#'>
    ,#'(lambda (run) (total-for-field run 'inclusive-process-pfs-time)))
   ("Total Inclusive Process Page Faults" inclusive-process-pfs total ,#'>
    ,#'(lambda (run) (total-for-field run 'inclusive-process-pfs)))))
									     

;;; output fields some are in call-tree-metering-run

(define-output-field inclusive-time (:statistical-call-tree)
  :header "Incl Time"
  :documentation
  "The total of the time spent in this node of the call tree and of all its descendants"
  :sub-field-descriptions
  ((:header "Total" :documentation "Total inclusive time (in microseconds) spent in this node"
	    :width (14 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~14D" (total field))))
   (:header "Avg" :documentation "Average (inclusive) time per call spent in this node"
	    :width (10 :character)
	    :write-function
	    (lambda (stream field &rest ignore)
	      (format stream "~10,2F" (average field))))
   (:header "/Run"
    :documentation
    "Bar graph of percentage of total time for run spent in this node (inclusively)"
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run)
		 100)))    
   (:header "%Run"
    :documentation
    "Percentage of total time (for entire run) spent in this node (inclusively)"
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-time run)))))
   (:header "/Root"
    :documentation
    "Bar graph of percentage of total time for the root spent inclusively in this node."
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-time run)
		 100)))    
   (:header "%Root"
    :documentation
    "Percentage of the inclusive time of the root spent inclusively in this node."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-root-total-time run))))))
  :current-sub-field-names ("Total"))

(define-output-field inclusive-process-time :statistical-call-tree
  :header "Incl Process Time"
  :documentation
  "The time spent in this node of the call tree and of all its descendants while in the metered process."
  :sub-field-descriptions
  ((:header "Total"
    :documentation "Total time (in microseconds) spent in this node while in the metered process."
    :width (14 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~14D" (total field))))
   (:header "/Run"
    :documentation
    "Bar graph of percentage of total process time for run spent in this node and its descendants."
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-process-time run)
		 100)))
   (:header "%Run"
    :documentation
    "Percentage of total process time (for run) spent in this node and its descendants."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field) (metering-run-total-process-time run))))))
   (:header "/Root"
    :documentation
    "Bar graph of percentage of total process time of root spent in this node and its descendants."
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-process-time run)
		 100)))
   (:header "%Root"
    :documentation
    "Percentage of total process time (of root) spent in this node and its descendants."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field) (metering-run-root-total-process-time run))))))
   (:header "/Incl"
    :documentation
    "Bar graph of percentage of inclusive time for this node spent in the metered process."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run entry ignore)
      (bar-graph stream
		 (total field)
		 (total
		   (get-component-from-components
		     'inclusive-time entry
		     (metering-run-field-descriptions run)))
		 50)))
   (:header "%Incl"
    :documentation
    "Percentage of inclusive time for this node spent in the metered process."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field)
			(total
			  (get-component-from-components
			    'inclusive-time entry
			    (metering-run-field-descriptions run)))))))))
  :current-sub-field-names ("Total" "/Run" "%Incl"))
							
;;; this should also be on :call-tree
(define-output-field inclusive-process-pfs :statistical-call-tree
  :header "Incl PFs"
  :documentation
  "Page faults for this node of the call tree and all of its descendants)."
  :sub-field-descriptions
  ((:header "#" :documentation "The count of inclusive page faults."
	     :width (2 :character)
	     :write-function (lambda (stream field &rest ignore)
			       (format stream "~2D" (total field)))))
  :current-sub-field-names ("#"))

;;; this should also be on :call-tree
(define-output-field inclusive-process-pfs-time :statistical-call-tree
  :header "Incl PS time"
  :documentation
  "Page system overhead (in microseconds) inclusively for this node of the call tree while in the metered process.
The time is measured with a quantum of 1024 microseconds."
  :sub-field-descriptions
  ((:header "Total"
    :documentation
    "Page system overhead (in microseconds) inclusively for this node of the call tree while in the metered process.
The time is measured with a quantum of 1024 microseconds."
    :width (8 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~8D" (total field))))
   (:header "/Run"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of the per-process run time."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-process-time run)
		 50)))
   (:header "%Run"
    :documentation
    "The percentage of the per-process run time spent in the paging system while inclusively in this function."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-process-time run)))))
   (:header "/Root"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of the per-process time of the root."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-process-time run)
		 50)))
   (:header "%Root"
    :documentation
    "The percentage of the roots per-process time spent in the paging system while inclusively in this function."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-root-total-process-time run)))))
   (:header "/Incl"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of per-process inclusive function time."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run entry ignore)
      (bar-graph stream
		 (total field)
		 (total
		   (get-component-from-components
		     'inclusive-process-time entry
		     (metering-run-field-descriptions run)))
		 50)))
   (:header "%Incl"
    :documentation
    "The percentage of per-process inclusive function time spent in the paging system."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (total
			(get-component-from-components
			  'inclusive-process-time entry
			  (metering-run-field-descriptions run)))))))
   (:header "/Total Run"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of the total run time."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run)
		 50)))
   (:header "%Total Run"
    :documentation
    "The percentage of the total run time spent in the paging system while inclusively in this function."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-time run)))))
   (:header "/Total Root"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of the total time of the root."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run &rest ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-time run)
		 50)))
   (:header "%Total Root"
    :documentation
    "The percentage of the roots total time spent in the paging system while inclusively in this function."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-root-total-time run)))))
   (:header "/Incl Total"
    :documentation
    "A bar graph of (inclusive) paging system time as a percentage of inclusive function time."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run entry ignore)
      (bar-graph stream
		 (total field)
		 (total
		   (get-component-from-components
		     'inclusive-time entry
		     (metering-run-field-descriptions run)))
		 50)))
   (:header "%Incl Total"
    :documentation
    "The percentage of inclusive function time spent in the paging system."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (total
			(get-component-from-components
			  'inclusive-time entry
			  (metering-run-field-descriptions run))))))))
  :current-sub-field-names ("Total" "/Incl"))

(define-output-field inclusive-process-consing :statistical-call-tree
  :header "Incl Consing"
  :documentation
  "The number of words consed in this process for this node of the call tree and all of its descendants."
  :sub-field-descriptions
  ((:header "Total"
    :documentation
    "Total number of words consed in this process for this node including all descendants."
    :width (8 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~8D" (total field))))
   (:header "/Run"
    :documentation
    "Bar graph of percentage of total consing for run done in this node and its descendants."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-consing run)
		 50)))
   (:header "%Run"
    :documentation
    "Percentage of total consing (for run) done in this node and its descendants."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field) (metering-run-total-consing run))))))
   (:header "/Root"
    :documentation
    "Bar graph of percentage of total consing or root done in this node and its descendants."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-root-total-process-consing run)
		 50)))
   (:header "%Root"
    :documentation
    "Percentage of total consing (of root) done in this node and its descendants."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float (/ (total field) (metering-run-root-total-process-consing run)))))))
  :current-sub-field-names ("Total"))

;;; this could be shared with statistical-function-call...
(define-output-field exclusive-time :statistical-call-tree
  :header "Samples"
  :documentation
  "The number of samples while exclusively in this function."
  :sub-field-descriptions
  ((:header "Count"
     :documentation
     "The number of samples while exclusively in this function."
     :width (8 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~8D" (metering::stdev-count field)))))
  :current-sub-field-names ("Count"))

(define-default-output-fields :statistical-call-tree
			      "Incl Process Time" "Incl Time"
			      "Incl PFs" "Incl PS time" "Function")
