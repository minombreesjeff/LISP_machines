;;; -*- Mode: LISP; Syntax: Common-lisp; Package: mi; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; 2) More tree like display - how is still unknown
;;; 6) Where should more detailed information be printed? - in place, or in another pane
;;; if it is in place what about the columns? currently the print at the bottom following the
;;; general dw expansion paradigm which seems in appropriate in this special purpose displayer
;;; window (?)

0(defflavor call-tree-metering-mixin
	((table ())				; hash from compiled-function to
						;other information
						;paths to follow
	 (threshold-component :sorting-component)
	 (node-threshold .8)			;show nodes this fraction of parent
	 (total-node-threshold .2)		;show nodes this fraction of total
	 (match-functions nil)			;strings to match
	 (functions nil)			;functions to match
	 (max-depth nil)			;how deep to display from a root.
	 (root nil)
	 (zero-indentation-depth 0)
	 (hoist-stack nil)
	 (last-recalculation-tick -1)
	 (recalculation-tick 0)
	 (parameter-tick 0)
	 total-time				;total time for the collector.
	 total-consing
	 number-of-nodes-displayed
	 sort-by)
	()
  (:conc-name ctr-)
  (:required-flavors basic-metering-run)
  (:initable-instance-variables node-threshold total-node-threshold threshold-component
				functions match-functions max-depth sort-by)
  (:readable-instance-variables table (metering-run-total-time total-time)
				(metering-run-total-consing total-consing)
				(call-tree-zero-indentation-depth zero-indentation-depth)
				threshold-component
				sort-by)
  (:writable-instance-variables node-threshold total-node-threshold match-functions
				functions number-of-nodes-displayed))

(defmethod (make-instance call-tree-metering-mixin :after) (&rest ignore)
  (setf sort-by
	(first (sorting-options-for-metering-type (metering-run-type self)))))

(defmethod (describe-run call-tree-metering-mixin) (stream)
  (format stream "~&~'iTotal time for run:~ ~16D microseconds~
                  ~&~'iTotal consing for run:~ ~16D words"
	  total-time total-consing))

(defmethod (get-entries-for-key call-tree-metering-mixin) (key)
  (ct-node-components key))

(defmethod (metering-run-key-type call-tree-metering-mixin) () 'call-tree-node)

(defmethod (clean-up-run-is-dead call-tree-metering-mixin) ()
  (setf table nil))

(defmethod (call-tree-root-node call-tree-metering-mixin) ()
  (and root (gethash root table)))
				  


(defmethod (force-recalculation call-tree-metering-mixin) ()
  (incf recalculation-tick))

(defmethod (initialize-display call-tree-metering-mixin) (mi)
  (ignore mi)
  (unless display-initialized
    (setq table (make-hash-table :size 40 :locking nil))
    (build-nodes self)
    (top-collector-total-time self)))

1;;; should only force recalculation if anything changed
0(defmethod (change-parameters call-tree-metering-mixin) (stream)
  (dw:accepting-values (stream :label "Change Display Parameters")
    (setq sort-by (accept `(sorting-option ,(metering-run-type self))
			  :default sort-by
			  :prompt "Sort the output by"
			  :stream stream))    
    (setq threshold-component
	  (accept `(token-or-type (("Use same component as sorting" . :sorting-component))
				  (sorting-option ,(metering-run-type self)))
		  :default threshold-component
		  :prompt "Filter the output by"
		  :stream stream))
    (let ((new-threshold (accept '(null-or-type ((number 0 100)))
				 :default (and node-threshold (* 100 node-threshold))
				 :provide-default t
				 :prompt "Node Threshold with respect to caller %"
				 :stream stream)))
      (setq node-threshold
	    (if new-threshold (/ new-threshold 100) new-threshold)))
    (let ((new-threshold (accept '(null-or-type number)
				 :default (and total-node-threshold
					       (* 100 total-node-threshold))
				 :provide-default t
				 :prompt "Node Threshold with respect to total %"
				 :stream stream)))
      (setq total-node-threshold
	    (if new-threshold (/ new-threshold 100) new-threshold)))
    (setq max-depth (accept '(null-or-type integer)
			    :default max-depth
			    :provide-default t
			    :prompt "Maximum Tree Depth"
			    :stream stream))
    (setq match-functions (accept '(null-or-type (sequence string))
				  :default match-functions
				  :provide-default t
				  :prompt "Match Functions"
				  :stream stream)))
  (force-recalculation self))


;;; *** each node doesn't need it's own pointer to call-tree?
;;;     which slots are (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")really0 needed
;;;     generally I'd like to pare down this flavor ***
(defflavor call-tree-node
	(call-tree
	 superior
	 collector
	 subcollectors
	 (components nil)
	 function-name
	 (interesting-p nil)
	 (inferior-count 0)
	 (inferior-tick 0)
	 (tick 0))
	()
  (:conc-name ct-node-)
  (:initable-instance-variables)
  :readable-instance-variables
  (:writable-instance-variables interesting-p tick inferior-tick inferior-count)
  (:locatable-instance-variables subcollectors)
  (:constructor make-call-tree-node (call-tree collector superior)))

(defmethod (make-instance call-tree-node) (&rest ignore)
  (setq function-name
	(let ((*print-pretty* nil))		;bug with abbreviating inserting #\newline's
	  (with-output-to-string (s)
	    (present (metering:node-this-function collector) '((function) :abbreviate-p t
							       :language-specific t)
		     :stream s))))
  (setq components (metering:get-components-from-recursive-node collector)))

(defmethod (ct-node-compute-subcollectors call-tree-node) ()
  (unless (variable-boundp subcollectors)
    (setq subcollectors nil)
    (map-over-descendant-collectors collector
				    #'(lambda (ignore sc) (push sc subcollectors)))
    (setq subcollectors
	  (let* ((sort-by (ctr-sort-by call-tree))
		 (sorting-function (sorting-option-predicate sort-by))
		 (extractor-function (sorting-option-extractor sort-by))
		 (field-extractor (get-component-extractor-from-components
				    (sorting-option-field sort-by)
				    nil (metering-run-collector call-tree))))
	    (flet ((key (collector)
		     (funcall extractor-function
			      (funcall field-extractor
				       (metering:get-components-from-recursive-node
					 collector)))))			  
	      (sort subcollectors sorting-function
		    :key #'key)))))
  subcollectors)



(defmethod (component-for-thresholds call-tree-metering-mixin) ()
  (if (eq threshold-component :sorting-component)
      sort-by threshold-component))

(defmethod (force-redisplay call-tree-metering-mixin) (&optional (only-to-leaves nil))
  (maphash #'(lambda (collector node)
	       (ignore collector)
	       (unless only-to-leaves (incf (ct-node-tick node)))
	       (incf (ct-node-inferior-tick node)))
	   table))

;;; this no longer builds all the nodes see
(defmethod (build-nodes call-tree-metering-mixin) ()
  (setf (gethash collector table) (make-call-tree-node self collector1 nil0))1)

0(defmethod (top-total-for-field call-tree-metering-mixin) (field)
  (let ((entry-extractor (and (member 'entries
				      (metering-run-field-descriptions self)
				      :key #'first)
			      (metering:get-component-extractor-from-components
				'entries nil (metering-run-field-descriptions self))))
	(field-extractor (metering:get-component-extractor-from-components
				    field
				    nil (metering-run-field-descriptions self)))
	(total 0))
    (labels ((compute-collector-total-for-field (collector)
	       (let ((components (metering:get-components-from-recursive-node collector)))
		 (if (or (null components)	;the top
			 (and entry-extractor
			      (zerop (total (funcall entry-extractor components)))))
		     (map-over-descendant-collectors
		       collector
		       #'(lambda (ignore subcollector)
			   (compute-collector-total-for-field subcollector)))
		     (incf total
			   (total (funcall field-extractor components)))))))
      (compute-collector-total-for-field collector))
    total))

(defmethod (total-for-field call-tree-metering-mixin) (field)
  (if root
      (total (get-component-from-components
	       field
	       (metering:get-components-from-recursive-node root)
	       (metering:collector-component-description collector)))
      (top-total-for-field self field)))

;;; this is still wrong because there might be open nodes that were called once.
(defmethod (top-collector-total-time call-tree-metering-mixin) ()
  (setq total-time (top-total-for-field self 'inclusive-time)))

(defmethod (collector-total-for-field call-tree-metering-mixin) (subcollector field)
  (let ((node (gethash subcollector table)))
    (total (get-component-from-components
	     field
	     (if node 
		 (ct-node-components node)
		 (metering:get-components-from-recursive-node subcollector))
	     (metering:collector-component-description collector)))))

(defmethod (collector-total-time call-tree-metering-mixin) (subcollector)
  (let ((node (gethash subcollector table)))
    (total (get-component-from-components
	     'inclusive-time
	     (if node 
		 (ct-node-components node)
		 (metering:get-components-from-recursive-node
		   subcollector))
	     (metering:collector-component-description collector)))))





(defmethod (map-over-collectors call-tree-metering-mixin) (start-collector function)
  (declare (sys:downward-funarg function))
  (labels ((do-map (parent-collector depth)
	     (map-over-descendant-collectors
	       parent-collector
	       #'(lambda (key collector)
		   ;; call with function, this collector, depth, and parent collector
		   (funcall function key collector depth parent-collector)
		   (do-map collector (1+ depth))))))
    (do-map start-collector 0)))

1;;; If the user clicks on an option, we forget everything we know and restart from
;;; the top.  
0(defmethod (process-selector-information call-tree-metering-mixin) ()
  (let* ((count-extractor (and (member 'entries
				       (metering-run-field-descriptions self)
				       :key #'first)
			       (metering:get-component-extractor-from-components
				 'entries nil (metering-run-field-descriptions self))))
	 (real-threshold-component (component-for-thresholds self))
	 (threshold-field (sorting-option-field real-threshold-component)))
    (tv:noting-progress ("Meter Filter Print Out")
      (maphash #'(lambda (collector node)
		   (ignore collector)
		   (variable-makunbound (ct-node-subcollectors node))
		   (setf (ct-node-interesting-p node) nil)
		   (incf (ct-node-tick node))
		   (incf (ct-node-inferior-tick node)))
	       table)
      (setf number-of-nodes-displayed 0)
      (labels ((match-functions (function this-collector depth superior-node)
		 (unless (and max-depth (> depth max-depth))
		   (let ((node (gethash this-collector table)))
		     (setf function (or function (metering:node-this-function this-collector)))
		     (let* ((string (if node
					(ct-node-function-name node)
					(let ((*print-pretty* nil))
					  (with-output-to-string (s)
					    (present function
						     '((function) :abbreviate-p t
						       :language-specific t)
						     :stream s)))))
			    (match-local (find-if #'(lambda (mf) (string-search mf string))
						  match-functions))
			    (match-below nil))
		       (map-over-descendant-collectors
			 this-collector
			 #'(lambda (function sc)
			     (setf match-below
				   (or (match-functions function sc (1+ depth)
							(if node
							    (list node)
							    (cons this-collector
								  superior-node)))
				       match-below))))
		       (when (or match-local match-below)
			 (let ((node (if (listp superior-node)
					 (let ((path (reverse superior-node)))
					   (loop for node first (first path)
							  then (ensure-node node subcollector)
						 for subcollector in (rest path)
						 finally
						   (return
						     (values
						       (ensure-node node this-collector)))))
					 ;; root case
					 superior-node)))
			   (unless (ct-node-interesting-p node)
			     (incf number-of-nodes-displayed)
			     (setf (ct-node-interesting-p node) t))
			   (update-inferior-count node))
			 t)))))
	       (process-thresholds (this-collector total-cut-off collector-total depth node)
		 (unless (and max-depth (> depth max-depth))
		   (let ((collector-cut-off (and node-threshold
						 (* node-threshold collector-total))))
		     (map-over-descendant-collectors
		       this-collector
		       #'(lambda (ignore sc)
			   (let ((sc-total
				   (collector-total-for-field self sc threshold-field)))
			     (when (or (and (null total-node-threshold)
					    (null node-threshold))
				       (and total-node-threshold
					    (> sc-total total-cut-off))
				       (and node-threshold
					    (> sc-total collector-cut-off))
				       ; this heuristic doesn't work if we have an open node
				       ; that finished at least one collection.
				       (and count-extractor
					    (zerop
					      (total
						(funcall
						  count-extractor
						  (metering:get-components-from-recursive-node
						    sc))))))
			       (let ((sub-node (ensure-node node sc)))
				 (unless (ct-node-interesting-p sub-node)
				   (incf number-of-nodes-displayed)
				   (setf (ct-node-interesting-p sub-node) t))
				 (process-thresholds sc total-cut-off sc-total (1+ depth)
						     sub-node))))))))
		 (update-inferior-count node)))
	(let ((root-total (total-for-field self threshold-field)))
	  (process-thresholds collector
			      (and total-node-threshold (* total-node-threshold root-total))
			      root-total
			      1
			      (gethash collector table)))
	(when match-functions
	  (match-functions nil collector 1
			   (gethash collector table)))))))	;this is normally superior node



(defmethod (display-metering-results call-tree-metering-mixin) (stream header-char-width)
  (ignore header-char-width)
  (when ( recalculation-tick last-recalculation-tick)
    (process-selector-information self)
    (setq last-recalculation-tick recalculation-tick))
  (let ((*print-pretty* nil))
    (tv:noting-progress ("Meter Printout")
      (with-output-truncation (stream :horizontal t)
	(if (metering:collector-empty-p collector)
	    (with-redisplayable-output (:stream stream :unique-id self :cache-value collector)
	      (display-no-data-message self stream))
	    (let ((display-root (or root collector)))
	      (multiple-value-bind (ignore top ignore bottom)
		  (send-if-handles stream :visible-cursorpos-limits :character)
		(redisplay-from-collector self display-root (gethash display-root table)
					  stream 0 0
					  (if root
					      (1+ (ct-node-inferior-count
						    (gethash root table)))
					      number-of-nodes-displayed)
					  top bottom))))))))

(defvar *levels-of-call-tree-within-a-redisplay-piece* 5)

(defmethod (redisplay-from-collector call-tree-metering-mixin)
	   (subcollector node stream depth count total-count top bottom)
  (when (neq subcollector collector)
    (display-one-node self subcollector node stream depth count total-count top bottom)
    (incf count))
  (let ((cache-value (clipped-cache-value count (+ count (ct-node-inferior-count node))
					  top bottom (ct-node-inferior-tick node))))
    (if (zerop (mod depth *levels-of-call-tree-within-a-redisplay-piece*))
	;; if the tick has tocked, do the folks downstairs.
	(dw:with-redisplayable-output (:stream stream :unique-id node
					       :cache-value cache-value
					       :cache-test #'clipped-cache-test)
	  (if (eq cache-value :clipped)
	      (progn (write-char #\space stream)
		     (loop repeat (ct-node-inferior-count node)
			   do (terpri stream)))
	      (loop with position = count
		    for sc in (ct-node-compute-subcollectors node)
		    as sc-node = (gethash sc table)
		    do (when (and sc-node (ct-node-interesting-p sc-node))
			 (redisplay-from-collector self sc sc-node stream (1+ depth) position
						   total-count top bottom)
			 (incf position (+ (ct-node-inferior-count sc-node) 1))))))
	(loop with position = count
	      for sc in (ct-node-compute-subcollectors node)
	      as sc-node = (gethash sc table)
	      do (when (and sc-node (ct-node-interesting-p sc-node))
		   (redisplay-from-collector self sc sc-node stream (1+ depth) position
					     total-count top bottom)
		   (incf position (+ (ct-node-inferior-count sc-node) 1)))))))

;;; not sure about this parser
(define-presentation-type call-tree-node (())
   :no-deftype t
   :parser ((stream)
	    (let ((function (accept 'function :stream stream :prompt nil))
		  (rs (and *program* (mi-current-run *program*))))
	      (unless rs
		(sys:parse-ferror "Sorry, can't read a call tree node outside MI."))
	      (let ((node
		      (block search
			(maphash #'(lambda (key value)
				     (when (eq (metering:node-this-function key)
					       function)
				       (return-from search value)))
				 (ctr-table rs))
			nil)))
		(unless node (sys:parse-ferror "Function ~\\presentation\\ not in this call tree."))
		(values node 'call-tree-node))))
   :history t
   :description "a call tree node"
   :printer ((node stream) (present (ct-node-function-name node) 'sys:function-spec
				    :stream stream)))

(defmethod (display-one-node call-tree-metering-mixin) (subcollector node stream
								     depth count total-count
								     top bottom)
  (ignore depth total-count)
  (let ((char-width (send stream :char-width)))
    (tv:note-progress count total-count)
    (let ((cache-value (clipped-cache-value count count
					    top bottom (ct-node-tick node))))
      (dw:with-redisplayable-output (:stream stream :unique-id subcollector
					  :cache-value cache-value
					  :cache-test #'clipped-cache-test)
	(write-char #\space stream)
	(unless (eq cache-value :clipped)
	    (with-output-as-presentation (:stream stream :object node :type 'call-tree-node
						  :single-box t)
	      (loop for first first t then nil
		    for field in output-fields
		    unless first do (format stream "~v@t" *number-of-inter-field-spaces*)
		    do (write-sub-fields field
					 stream self
					 (ct-node-components node) node char-width)))))
      (terpri stream))))

(defmethod (ct-node-depth call-tree-node) ()
  (loop for depth from -1
	for node first self then (ct-node-superior node)
	when (null node)
	  return depth))


;;; hoisting

;;; this is used by /root fields
(defmethod (metering-run-root-total-time call-tree-metering-mixin) ()
  (if root
      (collector-total-time self root)
      total-time))

;;; this is used by /root fields
(defmethod (metering-run-root-total-consing call-tree-metering-mixin) ()
  (if root
      (total (get-component-from-components
	       'inclusive-consing
	       (metering:get-components-from-recursive-node
		 root)
	       (metering:collector-component-description collector)))
      total-consing))

(defmethod (hoist-node call-tree-metering-mixin) (node)
  (push (cons root zero-indentation-depth) hoist-stack)
  (set-indentation-depth self (ct-node-depth node))
  (setf root (ct-node-collector node)))

(defmethod (dehoist call-tree-metering-mixin) (number-of-levels)
  (when root
    (let (previous-hoist-element)
      (cond ((eq number-of-levels :all-the-way)
	     (setf previous-hoist-element (first (last hoist-stack)))
	     (setf hoist-stack nil))
	    ((and (integerp number-of-levels)
		  (> number-of-levels 0))
	     (setf number-of-levels (min number-of-levels (length hoist-stack)))
	     (let ((previous-history (nthcdr (1- number-of-levels) hoist-stack)))
	       (setf previous-hoist-element (car previous-history))
	       (setf hoist-stack (Cdr previous-history))))
	    (t nil))		       
      (when previous-hoist-element
	(setf root (car previous-hoist-element))
	(set-indentation-depth self (cdr previous-hoist-element))))))

(define-mi-command (com-hoist-node) ((run 'basic-metering-run :default current-run)
				     (node 'call-tree-node))
   (hoist-node run node)
   (send (get-program-pane 'results) :set-viewport-position nil 0))

(define-presentation-to-command-translator
  hoist
   (call-tree-node :gesture :super-meta-left
		   :documentation ((node)
				   (let ((run (ct-node-call-tree node)))
				     (if (and run
					      (let ((root-node (call-tree-root-node run)))
						(and root-node
						     (eq root-node node))))
					 "DeHoist this node"
					 "Hoist this node"))))		   
   (node)
  (let ((run (ct-node-call-tree node)))
    (if (and run
	     (let ((root-node (call-tree-root-node run)))
	       (and root-node
		    (eq root-node node))))
	`(com-dehoist ,run)
	`(com-hoist-node ,run ,node))))

(define-mi-command (com-dehoist) ((run 'basic-metering-run :default current-run)
				  &key (number-of-levels '(token-or-type
							    (("All the way" . :all-the-way))
							    (integer (0)))
							 :default 1))
   (dehoist run number-of-levels))

(cp:define-command-accelerator dehoist-accelerator "Metering-Interface" (#\c-m-u) ()
			       (numeric-arg-p numeric-arg)
  `(com-dehoist
     ,(mi-current-run dw:*program*)
     ,@(case numeric-arg-p
	 ((nil :sign) nil)
	 (:infinity `(:number-of-levels :all-the-way))
	 ((:digits :control-u)
	  (if (zerop numeric-arg)
	      `(:number-of-levels :all-the-way)
	      `(:number-of-levels ,numeric-arg)))
	 (otherwise nil))))	     





(defmethod (node-status call-tree-node) ()
  (let ((leaf? t)
	(all-sub-nodes-open? t)
	(all-sub-nodes-closed? t))
    (metering:map-over-descendant-collectors
      (ct-node-collector self)
      #'(lambda (ignore c)
	  (let ((ctn (gethash c (ctr-table call-tree))))
	    (setq leaf? nil)
	    (if (and ctn (ct-node-interesting-p ctn))
		(setq all-sub-nodes-closed? nil)
		(setq all-sub-nodes-open? nil)))))
    (if leaf?
	:leaf
	(if all-sub-nodes-open?
	    :open
	    (if all-sub-nodes-closed?
		:closed
		:partial)))))

(defmethod (ensure-node call-tree-node) (subcollector)
  (let ((node (gethash subcollector (ctr-table call-tree))))
    (unless node
      (setf node (make-call-tree-node call-tree subcollector self))
      (setf (gethash subcollector (ctr-table call-tree))
	    node))
    node))
	  
(defmethod (open-node call-tree-node) ()
  (unless interesting-p
    (incf (ctr-number-of-nodes-displayed call-tree))
    (setf inferior-count 0)
    (setf interesting-p t))  
  (incf tick))

(defmethod (update-inferior-count call-tree-node) ()
  (setf inferior-count 0)
  (loop for subcollector in (ct-node-compute-subcollectors self)
	for node = (gethash subcollector (ctr-table call-tree))
	when (and node (ct-node-interesting-p node))
	  do (incf inferior-count (1+ (ct-node-inferior-count node)))))

(defmethod (incf-inferior-tick-upward call-tree-node) ()
  (incf inferior-tick)
  (update-inferior-count self)
  (when superior
    (incf-inferior-tick-upward superior)))

(defmethod (close-node call-tree-node) ()
  (when interesting-p
    (decf (ctr-number-of-nodes-displayed call-tree)))
  (setf interesting-p nil)
  (incf tick))

(defmethod (open-ladder-below call-tree-node) (fraction)
  (let* ((threshold-info (component-for-thresholds call-tree))
	 (threshold-field (sorting-option-field threshold-info))
	 (extractor (metering:get-component-extractor-from-components
		      threshold-field nil (metering-run-field-descriptions call-tree)))
	 (total (* (total (funcall extractor components)) fraction)))
    (loop with any-changed? = nil
	  for sc in (ct-node-compute-subcollectors self)
	  for sc-total = (total (funcall extractor
					 (block out
					   (map-over-component-collectors
					     sc #'(lambda (ignore components)
						    (return-from out components))))))
	  when (> sc-total total)
	    do (let ((sub-node (ensure-node self sc)))
		 (unless (ct-node-interesting-p sub-node)
		   (open-node sub-node)
		   (setf any-changed? t))
		 (open-ladder-below sub-node fraction))
	  ;;; at the bottom-most node walk up fixing inferior counts, ticks
	  finally (if any-changed?
		      (incf tick)
		      (incf-inferior-tick-upward self)))))

(defmethod (set-indentation-depth call-tree-metering-mixin) (depth)
  (setf zero-indentation-depth (max depth 0))
  (force-redisplay self))

(define-mi-command (com-open-ladder-below-node) ((node 'call-tree-node)
						 (percent '(number 0 100)
							  :prompt
							  "Percentage node must be of parent"
							  :default 80))
   (open-ladder-below node (/ percent 100.0)))

(define-presentation-to-command-translator
  open-ladder
  (call-tree-node :gesture :super-left
		  :documentation "Open all descendant nodes with large percentage of their parent's inclusive time")
  (c-t-node)
  `(com-open-ladder-below-node ,c-t-node))

(define-mi-command (show-node-children) ((node 'call-tree-node))
   (metering:map-over-descendant-collectors
     (ct-node-collector node)
     #'(lambda (ignore c)
	 (open-node (ensure-node node c))))
   (incf (ct-node-tick node))
   (incf-inferior-tick-upward node))

1;;; this version hides all the inferiors so that when you re-open they don't out of the blue
;;; appear (?)
0(define-mi-command (hide-node-children)
    ((node 'call-tree-node))
   (labels ((hide-inferiors (node)
	      (map-over-descendant-collectors
		(ct-node-collector node)
		#'(lambda (ignore c)
		    (let ((ctn (gethash c (ctr-table (ct-node-call-tree node)))))
		      (when (and ctn (ct-node-interesting-p ctn))
			(close-node ctn)
			(hide-inferiors ctn)))))))
     (hide-inferiors node)
     (incf (ct-node-tick node))
     (incf-inferior-tick-upward node)))

(define-presentation-to-command-translator
  show-or-hide-children
  (call-tree-node :gesture :select
		  :documentation
		  ((c-t-node)
		   (let ((any-hidden nil))
		     (when (ctr-table (ct-node-call-tree c-t-node))
		       (map-over-descendant-collectors
			 (ct-node-collector c-t-node)
			 #'(lambda (ignore c)
			     (let ((ctn (gethash c (ctr-table (ct-node-call-tree c-t-node)))))
			       (when (or (null ctn) (null (ct-node-interesting-p ctn)))
				 (setq any-hidden t))))))
		     (if any-hidden "Show Children" "Hide Children")))
		  :tester ((node)
			   (block any
			     (map-over-descendant-collectors
			       (ct-node-collector node)
			       #'(lambda (ignore ignore)
				   (return-from any t)))
			     nil)))
  (c-t-node)
  (let ((any-hidden nil))
    (when (ctr-table (ct-node-call-tree c-t-node))
      (map-over-descendant-collectors
	(ct-node-collector c-t-node)
	#'(lambda (ignore c)
	    (let ((ctn (gethash c (ctr-table (ct-node-call-tree c-t-node)))))
	      (when (or (null ctn) (null (ct-node-interesting-p ctn)))
		(setq any-hidden t))))))
    (if any-hidden
	`(show-node-children ,c-t-node)
	`(hide-node-children ,c-t-node))))

(define-presentation-to-command-translator
  hide-children
   (call-tree-node :gesture :shift-left
		   :documentation "Hide Children"
		   :tester ((node) (member (node-status node) '(:open :partial))))
   (node)
  `(hide-node-children ,node))

;; *** used to not incf node-tick if status hadn't changed - but now open node always incfs ***
(define-mi-command (hide-all-but-path-to-node) ((node 'call-tree-node))
   (let ((collector (metering-run-collector (ct-node-call-tree node)))
	 path)     
     (loop for current-node first node then (ct-node-superior current-node)
	   while current-node
	   do (push current-node path))
     (labels ((mark-path-clear-non-path (node path)
		(incf (ct-node-inferior-tick node))
		(let ((this-collector (ct-node-collector node)))
		  (map-over-descendant-collectors
		    this-collector
		    #'(lambda (ignore c)
			(let ((inferior-node (gethash c (ctr-table (ct-node-call-tree node)))))
			  (cond ((null inferior-node))
				((eq inferior-node (first path))
				 (open-node inferior-node)
				 (when (rest path)
				   (mark-path-clear-non-path inferior-node (rest path))))
				;; don't clear other top level nodes
				((eql this-collector collector) nil)
				((ct-node-interesting-p inferior-node)
				 (close-node inferior-node)
				 (mark-path-clear-non-path inferior-node nil))
				(t nil))))))))
       (mark-path-clear-non-path (first path) (rest path))
       (incf-inferior-tick-upward node))))

(define-mi-command (com-hide-node) ((node 'call-tree-node))
   (labels ((hide-inferiors (node)
	      (map-over-descendant-collectors
		(ct-node-collector node)
		#'(lambda (ignore c)
		    (let ((ctn (gethash c (ctr-table (ct-node-call-tree node)))))
		      (when (and ctn (ct-node-interesting-p ctn))
			(close-node ctn)
			(hide-inferiors ctn)))))))
     (let* ((superior (ct-node-superior node))
	    (old-superior-status (node-status superior)))
       (unless (eql (ct-node-collector superior)
		    (metering-run-collector (ct-node-call-tree node)))
	 (hide-inferiors node)
	 (close-node node)
	 (incf (ct-node-tick node))
	 (when (neq (node-status superior) old-superior-status)
	   (incf (ct-node-tick superior)))
	 (incf-inferior-tick-upward node)))))

(define-presentation-to-command-translator
  hide-node
  (call-tree-node :gesture :delete
		  :documentation "Hide this node"
		  :tester ((node)
			   (and (ct-node-superior node)
				(not
				  (eql (ct-node-collector (ct-node-superior node))
				       (metering-run-collector (ct-node-call-tree node)))))))
  (c-t-node)
  `(com-hide-node ,c-t-node))

(define-mi-command (com-show-all-node-descendants) ((node 'call-tree-node))
   (labels ((open-children (node)
	      (metering:map-over-descendant-collectors
		(ct-node-collector node)
		#'(lambda (ignore c)
		    (let ((sub-node (ensure-node node c)))
		      (open-node sub-node)
		      (open-children sub-node))))
	      (incf (ct-node-inferior-tick node))
	      (update-inferior-count node)))
     (open-children node)
     (incf (ct-node-tick node))
     (incf-inferior-tick-upward node)))

(define-presentation-to-command-translator show-all-node-descendants
   (call-tree-node :gesture :super-control-left
		   :documentation "Show all of this node's descendants")
   (c-t-node)
  `(com-show-all-node-descendants ,c-t-node))

(define-presentation-to-command-translator
  prune-path
  (call-tree-node :gesture :meta-left
		  :documentation "Hide all but path to this node")
  (c-t-node)
  `(hide-all-but-path-to-node ,c-t-node))

;;; *** this should be restricted to call-tree-mixin - does that just work? ***
(define-mi-command (com-set-indentation-depth) ((run 'basic-metering-run)
						(depth '(integer 0)))
   (set-indentation-depth run depth))

(define-presentation-to-command-translator
  set-depth
   (call-tree-node :gesture :super-meta-middle
		   :documentation "Set the zero indentation depth from this node")
   (c-t-node)
  `(com-set-indentation-depth
     ,(ct-node-call-tree c-t-node)
     ,(ct-node-depth c-t-node)))


(compile-flavor-methods call-tree-node)
