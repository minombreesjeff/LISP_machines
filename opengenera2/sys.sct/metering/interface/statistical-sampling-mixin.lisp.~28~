;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; this tries to implement generic statistical collection
;;  right now it is only used by statistical-function-metering-mixin
(defflavor statistical-metering-mixin
	((background-process nil)		;this process does the sampling
	 (number-of-samples 0)
	 (sampling-interval (/ 1 30))
	 (metering-stack nil))
	()
  :abstract-flavor
  (:required-flavors basic-metering-run)
  (:conc-name statistical-metering-)
  (:initable-instance-variables sampling-interval)
  (:writable-instance-variables background-process)
  (:required-methods sample-data-and-trigger-metering))

(defmethod (describe-run statistical-metering-mixin) (stream)
  (format stream "~&~'iNumber of Samples:~ ~D" number-of-samples))

(defmethod (metering-run-parameters statistical-metering-mixin) ()
  `(:sampling-interval ,sampling-interval))

(defgeneric sample-data-and-trigger-metering (statistical-run process-being-metered)
  "Must do end-metering-interval and start-metering-interval (in that order) with data")

(defvar *control-statistical-metering*
	(make-instance 'metering:basic-control :name
		       'statistically-sampling-trigger :keep 't))

(defmethod (do-pre-metering-stuff statistical-metering-mixin) ()
  (flet ((background-top-level (process-to-watch run sampling-interval)
	   (send si:*current-process* :set-priority
		 (min 5 (+ 2 (send process-to-watch :priority))))
	   (let ((metering:*metering-stack* (metering:make-metering-stack 20)))
	     (setf metering-stack metering:*metering-stack*)
	     (metering:start-metering-interval (statistically-sampling-trigger) (trigger-data)
	       nil)
	     (unwind-protect
		 (loop doing
		   (incf number-of-samples)
		   (sample-data-and-trigger-metering self process-to-watch)
		   (sleep sampling-interval))
	       (setf (statistical-metering-background-process run) nil)))))
    (setf background-process
	  (process-run-function
	    '(:name "Sample Data") #'background-top-level process self sampling-interval))))

(defmethod (metering-run-trigger statistical-metering-mixin) ()
  'statistically-sampling-trigger)

(defmethod (set-scope statistical-metering-mixin) ()
  (let ((region-spec (parse-region region)))
    (set-scope-of-control
      'statistically-sampling-trigger
      (if region-spec
	  `(and :switch
		(:within (:region ,region-spec)
		 (:process ,process))
		(not (:within (:region #'dbg:debugger-top-level)
		      (:process ,process))))
	  `(and :switch
		(not (:within (:region #'dbg:debugger-top-level)
		      (:process ,process))))))))

(defmethod (clear-scope statistical-metering-mixin) ()
  (set-scope-of-control 'statistically-sampling-trigger nil))

(defmethod (finalize-run statistical-metering-mixin :before) (abort-p)
  (ignore abort-p)
  (when background-process
    (process-kill background-process)
    (setf background-process nil)))

(defmethod (cleanup-for-temporary-disable statistical-metering-mixin) ()
  (setf (metering:metering-stack-pointer metering-stack) 0)
  (setf (metering:metering-stack-frame-pointer metering-stack) 0))


;; this is shared by both statistical-call-tree-metering-run
;;  and statistical-function-call-metering-run
(defflavor statistical-function-metering-mixin
	((functions-to-ignore nil)
	 (real-metered-functions nil))		; the fdefinitions of metered-functions 
	(statistical-metering-mixin)
  :abstract-flavor)

(defvar *ignore-functions-for-statistical-metering*
	(list 'si:stack-group-resume
	      'process::run-process-dispatcher
	      'process::preempt-current-process
	      'process::preemption-being-reenabled
	      #+imach 'si::preempt-request-trap-handler
	      #+(and IMach (not VLM)) 'cli::merlin-low-priority-sequence-break
	      #+(and IMach (not VLM)) 'cli::merlin-high-priority-sequence-break
	      #+(and IMach (not VLM)) 'cli::merlin-ii-low-priority-sequence-break
	      #+(and IMach (not VLM)) 'cli::merlin-ii-high-priority-sequence-break
	      #+(and IMach (not VLM)) 'cli::macivory-high-priority-sequence-break
	      #+(and IMach (not VLM)) 'cli::macivory-low-priority-sequence-break
	      #+VLM 'cli::VLM-high-priority-sequence-break
	      #+VLM 'cli::VLM-low-priority-sequence-break))

(defmethod (do-pre-metering-stuff statistical-function-metering-mixin :before) ()
  (setf functions-to-ignore
	(loop for function-spec in *ignore-functions-for-statistical-metering*
	      collect (fdefinition function-spec)))
    (setf real-metered-functions
	(loop for function-spec in metered-functions
	      collect (fdefinition function-spec))))

(defmethod (set-scope statistical-function-metering-mixin :after) ()
  (set-scope-of-control *per-process-control* `(:process ,process)))

(defmethod (clear-scope statistical-function-metering-mixin :after) ()
  (set-scope-of-control *per-process-control* nil))

(defgenerator (collector-integer-total values :integer (collector)
	      :description "get the total from a collector"
	      :argument-types ((collector metering:basic-collector "Collector" :value))
	      :presentation-type integer)
  `(total ,collector))

(defmethod (set-generators statistical-function-metering-mixin) ()
  ;; per process stuff
  (let ((per-process-trigger (metering:parse-trigger 'process::per-process)))
    (clear-trigger per-process-trigger)
    (control-trigger *per-process-control* per-process-trigger)
    ;; make sure it doesn't overflow
    (metering:reset-collector *process-consing-collector*)
    (compute-differences-across-region per-process-trigger t)
    (generate-data-at-trigger per-process-trigger
			      `((metering:total-consing :keywords
							(:overhead (:name process-consing)))))
    ;; this collect-data-from-trigger is in a set-generators because it isn't
    ;; for the real collector but is necessary to generate the real data 
    (collect-data-from-trigger
      per-process-trigger
      `(((,*process-consing-collector*) (total process-consing)))))
  ;; real stuff
  (clear-trigger 'statistically-sampling-trigger)
  (control-trigger 'statistically-sampling-trigger 'statistically-sampling-trigger)
  (generate-data-at-trigger
    'statistically-sampling-trigger
    `((real-time :keywords ((:name exclusive-time)))
      (process-run-time ,process :keywords ((:name exclusive-process-time)))
      (collector-integer-total ,*process-consing-collector*
			       :keywords ((:name exclusive-process-consing)))
      (process-page-faults ,process :keywords ((:name exclusive-process-pfs)))
      (process-page-fault-disk-time ,process
				    :keywords ((:name exclusive-process-pfs-time))))
    ;; trigger-data is stack-trace
    :final-collector-arglist '(trigger-data
				exclusive-time exclusive-process-time
				exclusive-process-consing
				exclusive-process-pfs exclusive-process-pfs-time)))

