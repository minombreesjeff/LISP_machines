;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(defflavor all-function-metering-mixin
	()
	()
  :abstract-flavor
  (:required-flavors basic-metering-run))

(defvar *n-function-calls* 0)

(defmethod (set-generators all-function-metering-mixin) ()
  (let ((per-process-trigger (metering:parse-trigger 'process::per-process))
	(dispatcher-trigger (progn (metering:meter-function 'process::run-process-dispatcher)
				   (metering:parse-trigger 'process::run-process-dispatcher))))
    ;; stuff for errors based on number of function calls.  This depends on only one metering
    ;; run being active at one time.
    (setf *n-function-calls* 0)

    ;; stuff for generator per-process consing
    (clear-trigger per-process-trigger)
    (control-trigger *per-process-control* per-process-trigger)
    ;; make sure it doesn't overflow
    (metering:reset-collector *process-consing-collector*)
    (compute-differences-across-region per-process-trigger t)
    (generate-data-at-trigger
      per-process-trigger
      `((metering:total-consing :keywords ((:name process-consing)))))
    ;; this collect-data-from-trigger is in a set-generators because it isn't
    ;; for the real collector but is necessary to generate the real data
    (collect-data-from-trigger
      per-process-trigger
      `(((,*process-consing-collector*) (last process-consing)))
      :initial 't)
    (collect-data-from-trigger
      per-process-trigger
      `(((,*process-consing-collector*) (total process-consing))))

    ;; dispatcher stuff
    (clear-trigger dispatcher-trigger)
    (control-trigger *per-process-control* dispatcher-trigger)
    ;; make sure it doesn't overflow
    (metering:reset-collector *total-time-in-other-processes*)
    (compute-differences-across-region dispatcher-trigger t)
    (generate-data-at-trigger
      dispatcher-trigger
      `((metering:real-time :keywords ((:name real-time) :overhead))))
    ;; this collect-data-from-trigger is in a set-generators because it isn't
    ;; for the real collector but is necessary to generate the real data
    (collect-data-from-trigger
      dispatcher-trigger
      `((,*total-time-in-other-processes* real-time))))

  ;; real stuff
  (clear-trigger 'all-function-calls)
  (generate-data-at-trigger
    'all-function-calls
    `(#+3600 (metering:function frame-pointer :keywords (:initial (:name function)))
      #+imach (metering:identity metering:function :keywords (:initial (:name function)))
      (metering:real-time :keywords (:overhead :inclusive (:name inclusive-time))
			  (:overhead :exclusive (:name exclusive-time)))
      (metering:integer-computation
	(metering:total *total-time-in-other-processes*)
	:keywords ((:name other-process-time) :inclusive))
      (metering:integer-computation (incf *n-function-calls*)
				    :keywords ((:name incl-calls) :inclusive)
				    ((:name excl-calls) :exclusive))
      (metering:process-page-fault-disk-time ,process
					     :keywords
					     (:overhead :inclusive (:name inclusive-pfs-time))
					     (:overhead :exclusive (:name exclusive-pfs-time)))
      (metering:process-page-faults ,process
				    :keywords (:overhead :exclusive (:name exclusive-pfs)))
      (per-process-collector-total
	*process-consing-collector* ,process ,(get-generator-code '(metering:total-consing))
	:keywords (:overhead :exclusive (:name exclusive-consing))))
    :final-collector-arglist '(function
				inclusive-time exclusive-time exclusive-consing
				exclusive-pfs inclusive-pfs-time exclusive-pfs-time
				other-process-time incl-calls excl-calls)
    :initial-collector-arglist '(function)))

(defmethod (metering-run-trigger all-function-metering-mixin) () 'metering:all-function-calls)

(defun force-process-switch ()
  (process-run-function
    (list :name "Force process switch" :priority (1+ (send *current-process* :priority)))
    'ignore)
  (process-allow-schedule))

(defmethod (set-scope all-function-metering-mixin :before) ()
  (set-scope-of-control *per-process-control* `(:process ,process))
  (when (eql process *Current-process*)
    (when (or (not process::*preemption-enabled*) si:inhibit-scheduling-flag)
      (cerror "Proceed allowing a process switch."
	      "You have set up the metering run from inside a form with preemption disabled.~
		 ~%In order to correctly initialize this metering run we need to process ~
                 ~%switch at least once."))
    (force-process-switch)))

(defmethod (set-scope all-function-metering-mixin) ()
  (let ((region-spec (parse-region region)))
    (set-scope-of-control
      'metering:all-function-calls
      `(and :switch
	    (:process ,process)
	    ,@(if region-spec
		  `((:within (and (:region ,region-spec)
				  (not (:region #'dbg:debugger-top-level)))
		     (:process ,process)))
		  `((not (:within (:region #'dbg:debugger-top-level)
			  (:process ,process)))))))))

(defmethod (clear-scope all-function-metering-mixin) ()
  (set-scope-of-control *per-process-control* nil)
  (set-scope-of-control 'metering:all-function-calls nil)
  (metering:unmeter-function 'process::run-process-dispatcher))

(defmethod (cleanup-for-temporary-disable all-function-metering-mixin) ()
  (setf (fill-pointer (si:pmi-stack (si:process-metering-info process))) 0))

