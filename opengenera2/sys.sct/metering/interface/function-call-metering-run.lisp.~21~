;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor function-call-metering-run
	((total-process-time nil))
	(function-call-metering-mixin all-function-metering-mixin basic-metering-run)
  (:readable-instance-variables (metering-run-total-process-time total-process-time)))

(defmethod (metering-run-type function-call-metering-run) () :function-call)

(defmethod (metering-run-parameters function-call-metering-run) ()
  `())

(defmethod (define-collector function-call-metering-run) ()
  (metering:make-data-collector
    'metering:collect-hash
    :name nil
    :component-description '((entries metering:counter)
			     (recursion-depth metering:sum)
			     (inclusive-time metering:modal-histogram :entries 20)
			     (inclusive-process-time metering:modal-histogram :entries 20)
			     (exclusive-consing metering:standard-deviation)
			     (exclusive-time metering:modal-histogram :entries 20)
			     (exclusive-pfs metering:collect-simple-averages)
			     (inclusive-pfs-time metering:modal-histogram :entries 20)
			     (exclusive-pfs-time metering:modal-histogram :entries 20)
			     (inclusive-callees metering:sum)
			     (exclusive-callees metering:sum))))

(define-collector-function function-call-initial-collector (collector)
  (metering:define-collector-type
    (collector metering:collect-hash
	       :component-description
	       ((entries metering:counter)
		(recursion-depth metering:sum)
		(inclusive-time metering:modal-histogram :entries 20)
		(inclusive-process-time metering:modal-histogram :entries 20)
		(exclusive-time metering:modal-histogram :entries 20)
		(exclusive-consing metering:standard-deviation)
		(exclusive-pfs metering:collect-simple-averages)
		(inclusive-pfs-time metering:modal-histogram :entries 20)
		(exclusive-pfs-time metering:modal-histogram :entries 20)
		(inclusive-callees metering:sum)
		(exclusive-callees metering:sum))))
  (flet ((real-collector (function)
	   (metering:with-collector (collector function)
	     (metering:collect recursion-depth 1))))
    #'real-collector))

(define-collector-function function-call-collector (collector)
  (metering:define-collector-type
    (collector metering:collect-hash
	       :component-description
	       ((entries metering:counter)
		(recursion-depth metering:sum)
		(inclusive-time metering:modal-histogram :entries 20)
		(inclusive-process-time metering:modal-histogram :entries 20)
		(exclusive-time metering:modal-histogram :entries 20)
		(exclusive-consing metering:standard-deviation)
		(exclusive-pfs metering:collect-simple-averages)
		(inclusive-pfs-time metering:modal-histogram :entries 20)
		(exclusive-pfs-time metering:modal-histogram :entries 20)
		(inclusive-callees metering:sum)
		(exclusive-callees metering:sum))))
  (flet ((real-collector (function inclusive-time exclusive-time 
				   exclusive-consing
				   exclusive-pfs inclusive-pfs-time
				   exclusive-pfs-time other-process-time
				   incl-calls excl-calls)
	   (metering:with-collector (collector function)
	     (metering:collect entries)
	     (metering:collect exclusive-callees excl-calls)
	     (metering:collect exclusive-time exclusive-time)
	     (metering:collect exclusive-pfs exclusive-pfs)
	     (metering:collect exclusive-pfs-time exclusive-pfs-time)
	     (metering:collect recursion-depth -1)
	     (metering:collect exclusive-consing exclusive-consing)
	     (when (zerop (total (metering:collect-component recursion-depth)))
	       (metering:collect inclusive-time inclusive-time)
	       (metering:collect inclusive-process-time (- inclusive-time other-process-time))
	       (metering:collect inclusive-callees incl-calls) 
	       (metering:collect inclusive-pfs-time inclusive-pfs-time)))))
    #'real-collector))
   
(defmethod (set-trigger function-call-metering-run) ()
  (collect-data-from-trigger
    'all-function-calls
    (function-call-initial-collector collector)
    :initial 't)
  (collect-data-from-trigger
    'all-function-calls
    (function-call-collector collector)))

(defmethod (cleanup-for-temporary-disable function-call-metering-run :after) ()
  (let ((extractor (get-component-extractor-from-components 'recursion-depth nil collector))
	(list-of-open-functions
	  (process:without-preemption
	    (loop for frame-pointer
		      first (if (eql *current-process* process)
				(si:%stack-frame-pointer)
				(si:sg-frame-pointer (process-stack-group process)))
		      then (dbg:frame-previous-frame frame-pointer)
		  until (null frame-pointer)
		  collect (dbg:frame-function frame-pointer)))))
    (loop for function in list-of-open-functions
	  do (let ((components (and (metering::member-of-collection collector function)
				    (collect-data-for-value collector function))))
	       (when components
		 (let ((recursion-depth (funcall extractor components)))
		   (collect-data recursion-depth (- (total recursion-depth)))))))))

(defmethod (initialize-display function-call-metering-run :after) (mi)
  (ignore mi)
  (unless display-initialized
    (let ((other-process-components
	    (metering:get-data-components collector #'process::run-process-dispatcher))
	  (sg-resume-components
	    (metering:get-data-components collector #'si:stack-group-resume)))
      (setq total-process-time
	    (- total-time
	       (if other-process-components
		   (total (metering:get-component-from-components
			    'exclusive-time other-process-components collector))
		   0)
	       (if sg-resume-components
		   (total (metering:get-component-from-components
			    'exclusive-time sg-resume-components collector))
		   0))))))


(define-sorting-options
  :function-call
  `(("Total Inclusive Process time" inclusive-process-time total ,#'>
     ,#'metering-run-total-process-time)
    ("Average Inclusive Process time"
     inclusive-process-time average ,#'> ,#'metering-run-total-process-time)
    ("Average Exclusive time" exclusive-time average ,#'> ,#'metering-run-total-time)
    ("Total Exclusive time" exclusive-time total ,#'> ,#'metering-run-total-time)	  
    ("Total Inclusive time" inclusive-time total ,#'> ,#'metering-run-total-time)
    ("Average Inclusive time" inclusive-time average ,#'> ,#'metering-run-total-time)
    ("Average Exclusive Page fault time" exclusive-pfs-time average ,#'>
     ,#'(lambda (run) (total-for-field run 'exclusive-pfs-time)))
    ("Total Exclusive Page fault time" exclusive-pfs-time total ,#'>
      ,#'(lambda (run) (total-for-field run 'exclusive-pfs-time)))
    ("Average Exclusive Consing" exclusive-consing average ,#'>
      ,#'(lambda (run) (total-for-field run 'exclusive-consing)))
    ("Total Exclusive Consing" exclusive-consing total ,#'>
      ,#'(lambda (run) (total-for-field run 'exclusive-consing)))
    ("Function name" :key ,#'sys:function-name ,#'sort-function-name nil)
    ("Total number of calls" entries total ,#'>
      ,#'(lambda (run) (total-for-field run 'entries)))))



;;; output fields

(define-output-field entries :function-call
  :header "Calls"
  :documentation "Calls to this function."
  :sub-field-descriptions
  ((:header "Count"
     :documentation "Number of times this function was called." 
     :width (5 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~5D" (total field))))
   (:header "Incl Count"
    :documentation "Inclusive number of function calls made by this function and all its callees"
    :width (5 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (ignore field)
      (format stream "~5D"
	      (total (get-component-from-components
			  'inclusive-callees entry
			  (metering-run-field-descriptions run)))))))
  :current-sub-field-names ("Count"))

(define-output-field inclusive-time :function-call
  :header "Incl Time"
  :documentation
  "The time spent in this function and all of its callees.
This time includes time spent in other processes.  It is the time you 
would get if you measured the time between the start and end of this 
function on a wall clock."
  :sub-field-descriptions
  ((:header "Total"
    :documentation "The total time (in microseconds) spent in this function and all of its callees."
    :width (14 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~14D" (total field))))
   (:header "%Run"
    :documentation
    "Percentage of total time for the entire run spent in this function (inclusively)."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-time run)))))
   (:header "Avg"
    :documentation
    "Average (inclusive) time (in microseconds) per call spent in this function."
    :width (10 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~10,2F" (average field))))
   (:header "RAvg"
    :documentation
    "Reasonable average (inclusive) time (in microseconds) per call spent in this function.
This is the average of samples that fell in the main mode of the histogram, only."
    :width (10 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~10,2F" (metering:reasonable-average field))))
   (:header "Dist"
    :documentation "A graph of the distribution of the (inclusive) time per call spent in this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-distribution stream field 50)))
   (:header "WDist"
    :documentation "A graph of the weighted distribution of the (inclusive) time per call spent in this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-weighted-distribution stream field 50)))
   (:header "/Run"
    :documentation
    "Bar graph of percentage of total time for the run spent in this function (inclusively)."
    :width (100 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run)
		 100)))
   (:header "Error"
    :documentation
    "The probable error of the total inclusive time spent in this function.  The total
inclusive time is accurate only to within +/- this value."
    :width (11 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~11D"
		(floor (+ (* callees metering:*function-fudge-factor-error*)
			  (* calls metering:*function-callee-fudge-factor-error*)))))))
   (:header "Avg Error"
    :documentation
    "The probable error per-call of the inclusive time spent in this node.  The average
inclusive time is accurate only to within +/- this value."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~7,2F"
		(float (+ (/ (* callees metering:*function-fudge-factor-error*) calls)
			  metering:*function-callee-fudge-factor-error*))))))
   (:header "Error%"
    :documentation
    "The percentage error of the inclusive time spent in this node.  The inclusive
time is accurate only to within +/- this percentage."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~6,2,2F%"
		(float0 (+ (* callees metering:*function-fudge-factor-error*)
			   (* calls metering:*function-callee-fudge-factor-error*))
			(total field))))))
   (:header "Error/"
    :documentation
    "Bar graph of the percentage error of the inclusive time spent in this node."
    :width (25 :pixel)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(bar-graph stream
		   (+ (* callees metering:*function-fudge-factor-error*)
		      (* calls metering:*function-callee-fudge-factor-error*))
		   (total field)
		   25)))))
  :current-sub-field-names ("Total" "/Run"))

(define-output-field inclusive-process-time :function-call
  :header "Incl Process Time"
  :documentation
  "The total of the time spent in this function and of all its callees in this process only"
  :sub-field-descriptions
  ((:header "Total"
    :documentation "The total time (in microseconds) spent in this function and all of its 
callees in this process."
    :width (14 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~14D" (total field))))
   (:header "%Run"
    :documentation
    "Percentage of total time for the entire run spent in this function (inclusively)."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-process-time run)))))
   (:header "Avg"
    :documentation
    "Average (inclusive) time (in microseconds) per call spent in this function in this process."
    :width (10 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~10,2F" (average field))))
   (:header "RAvg"
    :documentation
    "Reasonable average (inclusive) time (in microseconds) per call spent in this function in this process.
This is the average of samples that fell in the main mode of the histogram, only."
    :width (10 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~10,2F" (metering:reasonable-average field))))
   (:header "Dist"
    :documentation "A graph of the distribution of the (inclusive) time per call spent in this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (40 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-distribution stream field 40)))
   (:header "WDist"
    :documentation "A graph of the weighted distribution of the (inclusive) time per call spent in this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (40 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-weighted-distribution stream field 40)))
   (:header "/Run"
    :documentation
    "Bar graph of percentage of total time for the run spent in this function (inclusively)."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-process-time run)
		 50)))
   (:header "Error"
    :documentation
    "The probable error of the total inclusive time spent in this function.  The total
inclusive time is accurate only to within +/- this value."
    :width (11 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~11D"
		(floor (+ (* callees metering:*function-fudge-factor-error*)
			  (* calls metering:*function-callee-fudge-factor-error*)))))))
   (:header "Avg Error"
    :documentation
    "The probable error per-call of the inclusive time spent in this node.  The average
inclusive time is accurate only to within +/- this value."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~7,2F"
		(float (+ (/ (* callees metering:*function-fudge-factor-error*) calls)
			  metering:*function-callee-fudge-factor-error*))))))
   (:header "Error%"
    :documentation
    "The percentage error of the inclusive time spent in this node.  The inclusive
time is accurate only to within +/- this percentage."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~6,2,2F%"
		(float0 (+ (* callees metering:*function-fudge-factor-error*)
			   (* calls metering:*function-callee-fudge-factor-error*))
			(total field))))))
   (:header "Error/"
    :documentation
    "Bar graph of the percentage error of the inclusive time spent in this node."
    :width (25 :pixel)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'inclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(bar-graph stream
		   (+ (* callees metering:*function-fudge-factor-error*)
		      (* calls metering:*function-callee-fudge-factor-error*))
		   (total field)
		   25)))))
  :current-sub-field-names ("Total" "/Run" "Error%"))

(define-output-field exclusive-time :function-call
  :header "Excl Time"
  :documentation
  "The time spent in this function (does not include time spent in its callees)."
  :sub-field-descriptions
  ((:header "Total"
    :documentation "Total time (in microseconds) spent in this function (does not include its callees)."
    :width (12 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~12D" (total field))))
   (:header "%Run"
    :documentation
    "Percentage of total time for the run spent in this function exclusively."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-time run)))))
   (:header "%Process"
    :documentation
    "Percentage of total per-process time for the run spent in this function exclusively."
    :width (7 :character)
    :write-function
    (lambda (stream field run &rest ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (metering-run-total-process-time run)))))
   (:header "%Incl"
    :documentation
    "Percentage of the inclusive time for this function spent in this function exclusively."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry ignore)
      (format stream "~6,2,2F%"
	      (float0 (total field)
		      (total
			(get-component-from-components
			  'inclusive-time entry
			  (metering-run-field-descriptions run)))))))
   (:header "Avg"
    :documentation "Average time (in microseconds) per call spent in this function exclusively."
    :width (10 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~10,2F" (average field))))
   (:header "RAvg"
    :documentation "Reasonable average time (in microseconds) per call spent in this function exclusively.
This is the average of samples that fell in the main mode of the histogram, only."
    :width (10 :character)
    :write-function
    (lambda (stream field &rest ignore)
      (format stream "~10,2F" (metering:reasonable-average field))))
   (:header "Dist"
    :documentation "A graph of the distribution of the (exclusive) time per call spent in this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-distribution stream field 50)))
   (:header "WDist"
    :documentation "A graph of the weighted distribution of the (exclusive) time per call spent in this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
    :width (50 :pixel)
    :write-function
    (lambda (stream field &rest ignore)
      (graph-histogram-weighted-distribution stream field 50)))
   (:header "/Run"
    :documentation "Bar graph of percentage of total time for run spent in this function exclusively."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-time run)
		 50)))
   (:header "/Process"
    :documentation
    "Bar graph of percentage of total per-process time for the run spent in this function exclusively."
    :width (40 :pixel)
    :write-function
    (lambda (stream field run ignore ignore)
      (bar-graph stream
		 (total field)
		 (metering-run-total-process-time run)
		 50)))
   (:header "/Incl"
    :documentation "Bar graph of the percentage of inclusive time (of this function) spent in this function exclusively."
    :width (50 :pixel)
    :write-function
    (lambda (stream field run entry ignore)
      (bar-graph stream
		 (total field)
		 (total
		   (get-component-from-components
		     'inclusive-time entry
		     (metering-run-field-descriptions run)))
		 50)))
   (:header "Error"
    :documentation
    "The probable error of the total exclusive time spent in this function.  The total
exclusive time is accurate only to within +/- this value."
    :width (9 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~9D"
		(floor (+ (* callees metering:*function-caller-fudge-factor-error*)
			  (* calls metering:*function-callee-fudge-factor-error*)))))))
   (:header "Avg Error"
    :documentation
    "The probable error per-call of the inclusive time spent in this node.  The average
inclusive time is accurate only to within +/- this value."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~7,2F"
		(float (+ (/ (* callees metering:*function-caller-fudge-factor-error*) calls)
			  metering:*function-callee-fudge-factor-error*))))))
   (:header "Error%"
    :documentation
    "The percentage error of the inclusive time spent in this node.  The inclusive
time is accurate only to within +/- this percentage."
    :width (7 :character)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(format stream "~6,2,2F%"
		(float0 (+ (* callees metering:*function-caller-fudge-factor-error*)
			   (* calls metering:*function-callee-fudge-factor-error*))
			(total field))))))
   (:header "Error/"
    :documentation
    "Bar graph of the percentage error of the inclusive time spent in this node."
    :width (25 :pixel)
    :write-function
    (lambda (stream field run entry &rest ignore)
      (let ((callees (total (get-component-from-components
			      'exclusive-callees entry
			      (metering-run-field-descriptions run))))
	    (calls (entry-count field)))
	(bar-graph stream
		   (+ (* callees metering:*function-caller-fudge-factor-error*)
		      (* calls metering:*function-callee-fudge-factor-error*))
		   (total field)
		   25)))))
  :current-sub-field-names ("Total" "%Run"))

(define-output-field exclusive-consing :function-call
  :header "Excl Consing"
  :documentation
  "Number of words consed in this function excluding consing in all of its callees."
  :sub-field-descriptions
  ((:header "Total"
     :documentation "Total number of words consed in this function exclusive of its callees."
     :width (6 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~6D" (total field))))
    (:header "Avg"
     :documentation "Average number of words consed per call of this function excluding consing by callees."
     :width (8 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~8,2F" (average field)))))
  :current-sub-field-names ("Total"))

(define-output-field exclusive-pfs :function-call
  :header "PFs"
  :documentation
  "Page faults exclusively for this function (does not include its callees)."
  :sub-field-descriptions
  ((:header "#" :documentation
	     "The total number of page faults while exclusively in this function."
	     :width (4 :character)
	     :write-function (lambda (stream field &rest ignore)
			       (format stream "~4D" (total field))))
    (:header "Avg" :documentation "The average number of exclusive page faults per call"
	     :width (4 :character)
	     :write-function (lambda (stream field &rest ignore)
			       (format stream "~4,2F" (average field)))))
  :current-sub-field-names ("#"))

(define-output-field inclusive-pfs-time :function-call
  :header "Incl PS time"
  :documentation
  "Page system overhead (in microseconds) inclusively for this function.
The time is measured with a quantum of 1024 microseconds."
  :sub-field-descriptions
  ((:header "Total"
     :documentation
     "Total time for the page system while inclusively in this function.
The time is measured with a quantum of 1024 microseconds."
     :width (8 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~8D" (total field))))
    (:header "Avg"
     :documentation
     "Average time for page system while inclusively in this function."
     :width (6 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~6,2F" (average field))))
     (:header "Dist"
     :documentation "A graph of the distribution of the (inclusive) paging system time per call of this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
     :width (50 :pixel)
     :write-function
     (lambda (stream field &rest ignore)
	       (graph-histogram-distribution stream field 50)))
    (:header "WDist"
     :documentation "A graph of the weighted distribution of the (inclusive) paging system per call of this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
     :width (50 :pixel)
     :write-function
     (lambda (stream field &rest ignore)
	       (graph-histogram-weighted-distribution stream field 50)))
    (:header "%Incl"
     :documentation
     "The percentage of inclusive time of this function spent in the paging system."
     :width (7 :character)
     :write-function
     (lambda (stream field run entry ignore)
       (format stream "~6,2,2F%"
	       (/  (total field)
		  (total
		    (get-component-from-components
		      'inclusive-process-time entry
		      (metering-run-field-descriptions run)))))))
    (:header "/Incl"
     :documentation
     "Bar graph of inclusive page system time as a percentage of inclusive function time."
     :width (30 :pixel)
     :write-function
     (lambda (stream field run entry ignore)
       (bar-graph stream
		  (total field)
		  (total
		    (get-component-from-components
		      'inclusive-process-time entry
		      (metering-run-field-descriptions run)))
		  30))))
  :current-sub-field-names ("Total" "/Incl"))

(define-output-field exclusive-pfs-time :function-call
  :header "Excl PS time"
  :documentation
  "Page system overhead (in microseconds) exclusively for this function.
The time is measured with a quantum of 1024 microseconds."
  :sub-field-descriptions
  ((:header "Total"
     :documentation
     "Total time for the page system while exclusively in this function.
The time is measured with a quantum of 1024 microseconds."
     :width (8 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~8D" (total field))))
    (:header "Avg"
     :documentation
     "Average time for page system while exclusively in this function."
     :width (6 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~6,2F" (average field))))
     (:header "Dist"
     :documentation "A graph of the distribution of the (exclusive) paging system time per call of this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
     :width (50 :pixel)
     :write-function
     (lambda (stream field &rest ignore)
	       (graph-histogram-distribution stream field 50)))
    (:header "WDist"
     :documentation "A graph of the weighted distribution of the (exclusive) paging system per call of this function.
The distribution from 0 to twice the average value is displayed.   The average value is
marked by a tick (underneath).  Any overflow is displayed as a separate bar to the right."
     :width (50 :pixel)
     :write-function
     (lambda (stream field &rest ignore)
	       (graph-histogram-weighted-distribution stream field 50)))
    (:header "%Excl"
     :documentation
     "The percentage of exclusive time of this function spent in the paging system."
     :width (7 :character)
     :write-function
     (lambda (stream field run entry ignore)
       (format stream "~6,2,2F%"
	       (/  (total field)
		  (total
		    (get-component-from-components
		      'exclusive-time entry
		      (metering-run-field-descriptions run)))))))
    (:header "/Excl"
     :documentation
     "Bar graph of exclusive page system time as a percentage of exclusive function time."
     :width (50 :pixel)
     :write-function
     (lambda (stream field run entry ignore)
       (bar-graph stream
		  (total field)
		  (total
		    (get-component-from-components
		      'exclusive-time entry
		      (metering-run-field-descriptions run)))
		  50))))
  :current-sub-field-names ("Total" "/Excl"))

(define-output-field nil (:function-call :statistical-function-call)
  :header "Function"
  :documentation "The function itself."
  :sub-field-descriptions
  ((:header ""
     :documentation "The function itself."
     :width nil
     :write-function
     (lambda (stream field run entry function)
       (ignore field run entry)
       (when function
	 (format stream "~@\\presentation\\"
		 function
		 '((function) :abbreviate-p tD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") 0:language-specific t))))))
  :current-sub-field-names (""))

(define-default-output-fields :function-call
			      "Calls" "Incl Process Time"
			      "Excl Time" "Excl Consing"
			      "PFs" "Excl PS time" "Function")
