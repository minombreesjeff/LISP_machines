;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; this is shared by any meter type that is metering function call's
;;; (except pc-metering - it doesn't get times only hits)

(defflavor function-call-metering-mixin
	(sort-by 
	 (total-time nil)
	 (threshold-component :sorting-component)
	 (threshold-percentage 5)
	 (threshold-value nil)
	 sorted-entries
	 (n-printable-entries nil)
	 (redisplay-tick 0))
	()
  (:conc-name fcr-)
  (:required-flavors basic-metering-run)
  (:initable-instance-variables
   sort-by threshold-component threshold-percentage threshold-value)
  (:readable-instance-variables (metering-run-total-time total-time)
   sort-by threshold-component threshold-percentage threshold-value))

(defmethod (make-instance function-call-metering-mixin :after) (&rest ignore)
  (setf sort-by
	(first (sorting-options-for-metering-type (metering-run-type self)))))

(defmethod (metering-run-key-type function-call-metering-mixin) () 'sys:function)

(defmethod (describe-run function-call-metering-mixin) (stream)
  (format stream "~&~'iTotal time for run:~ ~16D microseconds"
	  total-time))

(defmethod (clean-up-run-is-dead function-call-metering-mixin) ()
  (setf sorted-entries nil))

(defmethod (initialize-display function-call-metering-mixin) (mi)
  (ignore mi)
  (unless total-time
    (setf total-time (total-for-field self 'exclusive-time))))

(defmethod (change-parameters function-call-metering-mixin) (stream)
  (let ((real-threshold-component (if (eq threshold-component :sorting-component)
				      sort-by threshold-component)))
    (dw:accepting-values (stream :label "Change Display Parameters")
      (setq sort-by (accept `(sorting-option ,(metering-run-type self))
			    :default sort-by
			    :prompt "Sort the output by"
			    :stream stream))
      (setq threshold-component
	    (accept `(token-or-type (("Use same component as sorting" . :sorting-component))
				    (sorting-option ,(metering-run-type self)))
		    :default threshold-component
		    :prompt "Filter the output by"
		    :stream stream))
      (setq real-threshold-component (if (eq threshold-component :sorting-component)
					 sort-by
					 threshold-component))
      (setq threshold-percentage
	    (accept '(null-or-type ((number 0 100)))
		    :default threshold-percentage
		    :prompt (format nil "Percentage of ~A below which data isn't shown"
				    (sorting-option-name real-threshold-component))
		    :stream stream))
      (setq threshold-value
	    (accept '(null-or-type integer)
		    :default threshold-value
		    :prompt (format nil "Value of ~A below which data isn't shown"
				    (sorting-option-name real-threshold-component))
		    :stream stream)))
    (force-recalculation self)))

;;; since everything gets re-computed anyway
(defmethod (force-redisplay function-call-metering-mixin) (&optional (only-to-leaves nil))
  (ignore only-to-leaves)
  (incf redisplay-tick))

(defmethod (force-recalculation function-call-metering-mixin) ()
  (setf n-printable-entries nil)
  (incf redisplay-tick))

(defmethod (display-metering-results function-call-metering-mixin) (stream header-char-width)
  (ignore header-char-width)
  (when (null n-printable-entries)
    (process-selector-information self))
  (multiple-value-bind (ignore top ignore bottom)
      (send-if-handles stream :visible-cursorpos-limits :character)
    (with-redisplayable-output (:stream stream :unique-id self :cache-value redisplay-tick)
      (dw::with-output-truncation (stream :horizontal t)
	(let ((n-entries (ncomponents collector))
	      (*print-pretty* nil)
	      (dw::*abbreviate-function-specs* t)
	      (char-width (send stream :char-width)))
	  (tv:noting-progress ("Meter Printout")
	    (if (zerop n-entries)
		(display-no-data-message self stream)
		(loop with entry-number = 0
		      for (function components) in sorted-entries
		      do (unless (eq function 'below-threshold-percentage)
			   (incf entry-number)
			   (tv:note-progress entry-number n-printable-entries)
			   (let ((cache-value (clipped-cache-value entry-number entry-number
								   top bottom header-tick)))
			     (dw:with-redisplayable-output
				 (:stream stream
				  :unique-id function
				  :cache-value cache-value
				  :cache-test #'clipped-cache-test)
			       (write-char #\space stream)	;this is necessary for two reasons
			       (unless (eq cache-value :clipped)
				 (loop for first first t then nil
				       for field in output-fields
				       unless first
					 do (format stream "~v@t"
						    *number-of-inter-field-spaces*)
				       do (write-sub-fields field
							    stream self
							    components
							    function
							    char-width)))
			       (terpri stream))))))))))))
  
(defun sort-function-name (fname1 fname2)
  (labels ((get-function-symbol (fspec)
	     (if (and fspec (listp fspec))
		 (get-function-symbol (second fspec))
		 fspec))
	   (compare-fspec-piece (piece1 piece2)
	     (declare (values lt eq))
	     (if (symbolp piece1)
		 (let ((fnm2 (get-function-symbol piece2)))
		   (if (string-lessp piece1 fnm2)
		       (values t nil)
		       (if (string-equal piece1 fnm2)
			   (if (symbolp piece2) (values nil t) (values t nil))
			   (values nil nil))))
		 (if (symbolp piece2)
		     (let ((fnm1 (get-function-symbol piece1)))
		       (if (string-lessp fnm1 piece2)
			   (values t nil)
			   ;; don't bother checking for equal, because ties go to symbols.
			   (values nil nil)))
		     ;;neither of them are symbols now.
		     (if (listp piece1)
			 (let ((fnm1 (get-function-symbol piece1)))
			   (if (listp piece2)
			       (let ((fnm2 (get-function-symbol piece2)))
				 (if (string-lessp fnm1 fnm2)
				     (values t nil)
				     (if (string-equal fnm1 fnm2)
					 (loop for subpiece1 in piece1
					       for subpiece2 in piece2 do
					   (multiple-value-bind (new-lt new-eq)
					       (compare-fspec-piece subpiece1 subpiece2)
					     (cond ((and new-lt (not new-eq))
						    (return (values t nil)))
						   ((and (not new-lt) (not new-eq))
						    (return (values nil nil)))))
					       finally (return (values nil t)))
					 (values nil t))))
			       ;; not a list, and not a symbol? Let piece1 win.
			       (values t nil)))
			 ;; not a list, and not a symbol?  let piece2 win if it's a list.
			 (if (listp piece2)
			     (values nil nil)
			     ;; last try, are they both numbers?
			     (if (and (numberp piece1) (numberp piece2))
				 ( piece1 piece2)
				 (values t nil))))))))
    (multiple-value-bind (lt eq)
	(compare-fspec-piece fname1 fname2)
      (or lt eq))))

(defmethod (component-for-thresholds function-call-metering-mixin) ()
  (if (eq threshold-component :sorting-component) sort-by threshold-component))

(defmethod (process-selector-information function-call-metering-mixin) ()
  (let* ((threshold-field (component-for-thresholds self))
	 (threshold (if threshold-value
		       (if threshold-percentage
			   (max (/ (* threshold-percentage
				      (funcall (sorting-option-total threshold-field) self))
				   100.)
				threshold-value)
			   threshold-value)
		       (if threshold-percentage
			   (/ (* threshold-percentage
				 (funcall (sorting-option-total threshold-field) self))
			      100.)
			   nil)))
	(sort-by-field (sorting-option-field sort-by))
	(component-extractor-function (metering:get-component-extractor-from-components
					(sorting-option-field threshold-field)
					nil (metering-run-field-descriptions self)))
	(extractor-function (sorting-option-extractor threshold-field))
	(last-entry nil)
	(total-entries (metering:ncomponents collector)))
    (flet ((below-threshold (selector components)
	     (declare (sys:downward-function))
	     (ignore selector)
	     (and threshold
		  (not (> (funcall extractor-function
				   (funcall component-extractor-function components))
			  threshold)))))
      (setf n-printable-entries 0
	    sorted-entries nil)
      (tv:noting-progress ("Filter and Sort Results")
	(metering:sort-collector-values
	  collector
	  #'(lambda (function components ignore)
	      (tv:note-progress n-printable-entries total-entries)
	      (let ((new-entry (list (list function components))))
		(if (null last-entry)
		    (setf sorted-entries new-entry)
		    (setf (cdr last-entry) new-entry))
		(setf last-entry new-entry))
	      (unless (eq function 'below-threshold-percentage)
		(incf n-printable-entries)))		
	  sort-by-field
	  :extractor (sorting-option-extractor sort-by)
	  :predicate (sorting-option-predicate sort-by)
	  :filters `(,@(when threshold
			 `((below-threshold-percentage
			     ,#'below-threshold sum))))
	  
	  :sort-filters-p nil)))))

(defmethod (total-for-field function-call-metering-mixin) (field)
  (let ((total 0)
	(extractor (get-component-extractor-from-components field nil collector)))
    (map-over-component-collectors
      collector
      #'(lambda (key value)
	  (ignore key)
	  (incf total
		(total (funcall extractor value)))))
    total))
