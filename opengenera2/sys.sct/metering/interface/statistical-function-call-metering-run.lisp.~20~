;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>



(defflavor statistical-function-call-metering-run
	((total-process-time nil))
	(statistical-function-metering-mixin function-call-metering-mixin basic-metering-run)
  (:readable-instance-variables (metering-run-total-process-time total-process-time))
  (:default-init-plist :sort-by 'exclusive-time))

(defmethod (metering-run-type statistical-function-call-metering-run) ()
  :statistical-function-call)

(defmethod (define-collector statistical-function-call-metering-run) ()
  (make-data-collector 'metering:collect-hash
		       :name nil
		       :component-description
		       '((exclusive-time metering:standard-deviation)
			 (exclusive-process-time metering:standard-deviation)
			 (exclusive-process-pfs metering:standard-deviation)
			 (exclusive-process-pfs-time metering:standard-deviation))))

(defmethod (set-trigger statistical-function-call-metering-run) ()
  (collect-data-from-trigger 'statistically-sampling-trigger
		`(((,collector trigger-data)
		   (exclusive-time exclusive-time)
		   (exclusive-process-time exclusive-process-time)
		   (exclusive-process-pfs exclusive-process-pfs)
		   (exclusive-process-pfs-time exclusive-process-pfs-time)))))

(defmethod (sample-data-and-trigger-metering statistical-function-call-metering-run)
	   (process-to-watch)
  ;; disable process switching so we get a stable view
  ;; known to be re-enabled inside get-backtrace...
  (let* ((si:inhibit-scheduling-flag 't) 
	 (sg (process-stack-group process-to-watch))
	 #+3600
	 (fp (if (eq sg si:%current-stack-group)
		 ;; This is exceedingly useless... but this avoids a
		 ;;  nasty blowout.
		 (si:%stack-frame-pointer)
		 (when (and sg (zl:typep sg :stack-group))
		   (si:sg-frame-pointer sg)))))
    #+3600
    (loop for frame-pointer first fp then (dbg:frame-previous-frame frame-pointer)
	  while frame-pointer
	  do (let ((function (dbg:frame-function frame-pointer)))
	       (unless (or (not (functionp function))
			   (member function functions-to-ignore))
		 ;; as soon as you get the goodies turn back on the scheduler
		 (setq si:inhibit-scheduling-flag nil)
		 (metering:end-metering-interval (statistically-sampling-trigger)
						 (trigger-data)
		   function)
		 (metering:start-metering-interval (statistically-sampling-trigger)
						   (trigger-data)
		   nil)
		 (return (values)))))
    #+IMACH
    (when (and sg (zl:typep sg :stack-group))
      (let ((interesting-function
	      (block find-function
		(dbg:map-over-frames-in-stack
		  sg
		  #'(lambda (fp cr function)
		      (ignore fp cr)
		      (unless (or (not (functionp function))
				  (member function functions-to-ignore))
			(return-from find-function (values function))))))))
	(setq si:inhibit-scheduling-flag nil)
	(metering:end-metering-interval (statistically-sampling-trigger)
					(trigger-data)
	  interesting-function)
	(metering:start-metering-interval (statistically-sampling-trigger)
					  (trigger-data)
	  nil)))
      
    ))

(defmethod (compute-total-process-time statistical-function-call-metering-run) ()
  (setq total-process-time 0)
  (metering:map-over-component-collectors
    collector
    #'(lambda (ignore subcollector)
	(incf total-process-time
	      (total (get-component-from-components
		       'exclusive-process-time
		       subcollector
		       (metering:collector-component-description collector)))))))

(defmethod (initialize-display statistical-function-call-metering-run :after) (mi)
  (ignore mi)
  (unless display-initialized
    (compute-total-process-time self)))


(define-sorting-options :statistical-function-call
 `(("Exclusive time" exclusive-time total ,#'> ,#'metering-run-total-time)
   ("Exclusive Process time"
    exclusive-process-time total ,#'> ,#'metering-run-total-process-time)
   ("Exclusive Process Page Fault time" exclusive-process-pfs-time total ,#'>
    ,#'(lambda (run) (total-for-field run 'exclusive-process-pfs-time)))
   ("Function name" :key ,#'sys:function-name ,#'sort-function-name nil)))
						   
;;; output fields - some are in function-call-metering-run

(define-output-field exclusive-time :statistical-function-call
  :header "Excl Time"
  :documentation
  "The time spent in this function (does not include its callees)."
  :sub-field-descriptions
  ((:header "Total"
     :documentation "Total time (in microseconds) spent in this function (does not include its callees)."
     :width (12 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~12D" (total field))))
    (:header "%Run"
     :documentation
     "Percentage of total time (for entire run) spent exclusively in this function."
     :width (7 :character)
     :write-function
     (lambda (stream field run &rest ignore)
       (format stream "~6,2,2F%"
	       (float (/ (total field)
			 (metering-run-total-time run))))))
    (:header "/Run"
     :documentation
     "Bar graph of percentage of total time for run spent exclusively in this function."
     :width (100 :pixel)
     :write-function
     (lambda (stream field run ignore ignore)
	 (bar-graph stream
		    (total field)
		    (metering-run-total-time run)
		    100))))
  :current-sub-field-names ("Total" "/Run"))

(define-output-field exclusive-process-time :statistical-function-call
  :header "Excl Process Time"
  :documentation
  "The time spent in this function while in the metered process (does not include its callees)."
  :sub-field-descriptions
  ((:header "Total"
     :documentation "Total exclusive time (in microseconds) spent in this function."
     :width (12 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~12D" (total field))))
    (:header "%Run"
     :documentation
     "Percentage of total time for the run spent exclusively in this function."
     :width (7 :character)
     :write-function
     (lambda (stream field run &rest ignore)
       (format stream "~6,2,2F%"
	       (float (/ (total field)
			 (metering-run-total-process-time run))))))
    (:header "%Excl"
     :documentation
     "Percentage of exclusive time for this function spent in the metered process."
     :width (7 :character)
     :write-function
     (lambda (stream field run entry ignore)
       (format stream "~6,2,2F%"
	       (float (/ (total field)
			 (total
			   (get-component-from-components
			     'exclusive-time entry
			     (metering-run-field-descriptions run))))))))
    (:header "/Excl"
     :documentation
     "A bar graph of the percentage of exclusive time for this node spent in the metered process."
     :width (50 :pixel)
     :write-function
     (lambda (stream field run entry ignore)
       (bar-graph stream
		  (total field)
		  (total
		    (get-component-from-components
		      'exclusive-time entry
		      (metering-run-field-descriptions run)))
		  50)))
    (:header "/Run"
     :documentation
     "A bar graph of the percentage of the total run time spent exclusively in this node."
     :width (100 :pixel)
     :write-function
     (lambda (stream field run ignore ignore)
       (bar-graph stream
		  (total field)
		  (metering-run-total-process-time run)
		  100))))
  :current-sub-field-names ("Total" "/Run" "/Excl"))

(define-output-field exclusive-process-pfs :statistical-function-call
  :header "PFs"
  :documentation
  "Page faults exclusively for this function (does not include its callees)"
  :sub-field-descriptions
  ((:header "#" :documentation
	     "The total number of page faults while exclusively in this function."
	     :width (4 :character)
	     :write-function (lambda (stream field &rest ignore)
			       (format stream "~4D" (total field)))))
  :current-sub-field-names ("#"))

(define-output-field exclusive-process-pfs-time :statistical-function-call
  :header "PS time"
  :documentation
  "Page system overhead (in microseconds, in this process) exclusively for this function.
The time is measured with a quantum of 1024 microseconds"
  :sub-field-descriptions
  ((:header "Total"
     :documentation
     "Total time for page faults while exclusively in this function.
The time is measured with a quantum of 1024 microseconds."
     :width (8 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~8D" (total field))))
    (:header "%Excl"
     :documentation
     "The percentage of per-process exclusive time of this function spent in the paging system."
     :width (7 :character)
     :write-function
     (lambda (stream field run entry ignore)
       (format stream "~6,2,2F%"
	       (float0 (total field)
		       (total
			 (get-component-from-components
			   'exclusive-process-time entry
			   (metering-run-field-descriptions run)))))))
    (:header "/Excl"
     :documentation
     "A bar graph of (exclusive) page fault time as a percentage of per-process exclusive function time"
     :width (50 :pixel)
     :write-function
     (lambda (stream field run entry ignore)
       (bar-graph stream
		  (total field)
		  (total
		    (get-component-from-components
		      'exclusive-process-time entry
		      (metering-run-field-descriptions run)))
		  50)))
    (:header "%Total Excl"
     :documentation
     "The percentage of total exclusive time of this function spent in the paging system."
     :width (7 :character)
     :write-function
     (lambda (stream field run entry ignore)
       (format stream "~6,2,2F%"
	       (float0 (total field)
		       (total
			 (get-component-from-components
			   'exclusive-time entry
			   (metering-run-field-descriptions run)))))))
    (:header "/Total Excl"
     :documentation
     "A bar graph of (exclusive) page fault time as a percentage of total exclusive function time"
     :width (50 :pixel)
     :write-function
     (lambda (stream field run entry ignore)
       (bar-graph stream
		  (total field)
		  (total
		    (get-component-from-components
		      'exclusive-time entry
		      (metering-run-field-descriptions run)))
		  50))))
  :current-sub-field-names ("Total" "/Excl"))

(define-output-field exclusive-time :statistical-function-call
  :header "Samples"
  :documentation
  "The number of samples while exclusively in this function."
  :sub-field-descriptions
  ((:header "Count"
     :documentation
     "The number of samples while exclusively in this function."
     :width (8 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~8D" (metering::stdev-count field)))))
  :current-sub-field-names ("Count"))

(define-default-output-fields :statistical-function-call
			      "Excl Time" "Excl Process Time"
			      "PFs" "PS time" "Function")
