;;; -*- Syntax: Common-Lisp; Base: 10; Package: METERING-INTERFACE; Mode: LISP -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun-with-cache get-generator-code (generator-form)
		  (nil (cons (find-generator-named (car generator-form))
			     (cdr generator-form)))
  (let ((generator (find-generator-named (car generator-form))))
    (if generator
	(compile nil `(lambda ()
			,(apply 'metering:get-form-to-generate-data generator 
				'metering:trigger
				(cdr generator-form))))
	(error "No generator named ~S exists. While trying to compile a generator for ~S"
	       (car generator-form) generator-form))))

(defgenerator (integer-computation values :integer (form)
			   :argument-types ((form sys:expression
						  "Arbitrary Lisp expression"
						  :either))
			   :wirable 't
			   :description "integer value produced by arbitrary lisp form")
  form)

(defvar *total-time-in-other-processes*
	(make-data-collector 'metering:sum :name "Time spent in other processes")
  "The collector used to subtract out time spent in other processes .")

;;; value collector
(defcollector value ((arg) ((arg sys:expression)))
  (value)
  (metering:trivially-wirable-collector-mixin)
  (:init-options-and-types (&key ((arg nil) expression "arbitrary value to store")))
  :wirable
  :ordered-instance-variables
  (:conc-name value-)
  :writable-instance-variables
  :initable-instance-variables)

(defmethod (metering:reset value) ()
  (variable-makunbound value))

(defmethod (collector-empty-p value) ()
  (not (variable-boundp value)))

(defmethod (collect-data value) (arg) (setf value arg))

(defmethod (get-form-to-collect-data value) (instance &key args for-value)
  (declare (values form instance bindings))
  (if for-value
      (error "cannot build a hierarchical collector out of VALUE.")
      (if (eq instance ':constant)
	  (let ((instance-name (gensym "INSTANCE")))
	    (values `(setf ,(metering:safe-instance-reference 'value 'value instance-name)
			   ,(car args))
		    instance-name
		    nil))
	  (values `(collect-data ,instance ,(car args)) nil nil))))

(defmethod (get-entries value) (mapping-function)
  (when (variable-boundp value)
    (funcall mapping-function value)))

(defmethod (value-of-value value) ()
  (if (variable-boundp value) value (values)))

(defmethod (display value) (&optional s &key label)
  (format s "~&")
  (when label
    (format s "~A: " (if (listp label) (car label) label)))
  (format s "Value: ~S" value))


;;; per-process collector

(defcollector per-process-collector ()
  ((closure nil))
  (record)
  (:hierarchical t))

(defmethod (make-instance per-process-collector :after) (&rest ignore)
  (unless (and (metering:get-component-extractor-from-components 'total nil self)
	       (metering:get-component-extractor-from-components 'last nil self))
    (error "You must include ~S and ~S in the :COMPONENT-DESCRIPTION" 'total 'last))
  (setf closure
	(let* ((raw-data (metering:record-data self))
	       (total-component
		 (metering:get-component-from-components 'total raw-data self))
	       (last-component
		 (metering:get-component-from-components 'last raw-data self)))
	  #'(lambda ()
	      (values (total total-component) (value-of-value last-component))))))

(defmethod (get-total-and-last per-process-collector) () (funcall closure))

(defmethod (total per-process-collector) () (values (funcall closure)))

(setf (metering:collector-type-sample-instance
	(metering:find-collector-type 'per-process-collector))
      (make-data-collector 'per-process-collector
			   :component-description '((total sum) (last value))))


;;; this computes the current value using the total and last stored in the collector
;;; and if the process is running the current value computed by the closure
;;;
;;; The basic issues is that at process switches the total and last are
;;; updated in the collector.  When the process isn't running the
;;; current total is just stored in the collector.  When the process is running the
;;; current total is the total when the process started (the total stored in the collector)
;;; plus the difference between the current value and
(defgenerator (per-process-collector-total values :integer (collector process closure)
	       :description "get the per-process total stored in a collector"
	       :argument-types
	       ((collector per-process-collector "Collector" :value)
		(process si:process "Process" :value)
		(closure sys:lexical-closure "Computation of current value" :value))
	       :presentation-type integer)
  `(process:without-preemption
     (multiple-value-bind (total last)
	 (get-total-and-last ,collector)
       (+ total
	  (if (and (eql ,process *current-process*) last)
	      (- (funcall ,closure) last) 0)))))



;;; there isn't a control - so make one
(defvar *per-process-control* (make-instance 'metering:basic-control
					     :name 'si:per-process-control
					     :keep t))

(defvar *process-consing-collector*
	(make-data-collector 'per-process-collector :name "Process Consing"
			     :component-description '((total sum) (last value)))
  "The collector used to generate per process consing.  Consing isn't stored in the process.")

;;; this isn't needed in the new scheduler, since you can get the starting 
(defvar *process-ps-time-collector*
	(make-data-collector 'per-process-collector :name "Process PS Time"
			     :component-description '((total sum) (last value)))
  "The collector used to generate per process ps time.")

(defvar *process-pfs-collector*
	(make-data-collector 'per-process-collector :name "Process PFs"
			     :component-description '((total sum) (last value)))
  "The collector used to generate per process page faults.")
