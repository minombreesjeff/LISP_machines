;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: METERING-INTERFACE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; to do:
;;; better accuracy ??
;;; when do you unmake the array

(defflavor pc-metering-run
	((resolution-percentage .5)
	 threshold-percentage
	 (n-printable-entries nil)
	 (total-displayed nil)
	 (sorted-entries nil)
	 (redisplay-tick 0)
	 sort-by
	 (sampling-interval (let ((rate (meter:pc-metering-sampling-rate)))
			      (when rate (/ 1s0 rate)))))
	(basic-metering-run)
  (:initable-instance-variables resolution-percentage sampling-interval))

(defmethod (make-instance pc-metering-run :after) (&rest ignore)
  (setf threshold-percentage resolution-percentage
	sort-by (first (sorting-options-for-metering-type (metering-run-type self)))))

(defmethod (metering-run-type pc-metering-run) () :statistical-program-counter)

(defmethod (metering-run-parameters pc-metering-run) ()
  `(:resolution-percentage ,resolution-percentage
    ,@(when (meter:pc-metering-sampling-rate-control-p)
	`(:sampling-interval ,sampling-interval))))

(defmethod (clean-up-run-is-dead pc-metering-run) ()
  (setf sorted-entries nil))

(defmethod (describe-run pc-metering-run) (stream)
  (format stream "~&~'iResolution:~ ~F%~&~'iTotal displayed:~ ~F%"
	  resolution-percentage total-displayed)
  (when sampling-interval
    (format stream "~&~'iSampling Interval:~ ~F seconds" sampling-interval)))

(defmethod (metering-run-key-type pc-metering-run) () 'sys:function)

(defmethod (do-pre-metering-stuff pc-metering-run) ()
  (unless meter:*pc-monitor-array*
    (meter:make-pc-array (* si:page-size 64.))))

(defmethod (define-collector pc-metering-run) ()
  (make-data-collector 'metering:collect-hash
		       :component-description '((percentage-of-run numeric-sum))))

(defmethod (set-generators pc-metering-run) ()
  (clear-trigger 'pc-metering))

(defmethod (metering-run-trigger pc-metering-run) () 'pc-metering)

(defmethod (set-trigger pc-metering-run) () nil)

(defmethod (set-scope pc-metering-run) ()
  (let ((region-spec (parse-region region)))
    (set-scope-of-control
      'pc-metering
      `(and :switch
	    (:process ,process)
	    ,@(if region-spec
		  `((:within (and (:region ,region-spec)
				  (not (:region #'dbg:debugger-top-level)))
		     (:process ,process)))
		  `((not (:within (:region #'dbg:debugger-top-level)
			  (:process ,process)))))))))

(defmethod (clear-scope pc-metering-run) ()
  (set-scope-of-control 'pc-metering nil))

(defmethod (finalize-run pc-metering-run) (abort-p)
  (ignore abort-p)
;  (meter:unmake-pc-array)
  )

(defmethod (force-redisplay pc-metering-run) (&optional only-to-leaves)
  (ignore only-to-leaves)
  (incf redisplay-tick))

(defmethod (force-recalculation pc-metering-run) ()
  (setf n-printable-entries nil)
  (incf redisplay-tick))

(define-sorting-options :statistical-program-counter
			`(("Exclusive time" percentage-of-run total ,#'> nil)
			  ("Function name"
			   :key ,#'(lambda (func)
				     (dbg:lframe-function-name
				       (dbg:find-language-for-function func)
				       func t))
			   ,#'sort-function-name nil)))

(defmethod (change-parameters pc-metering-run) (stream)
  (dw:accepting-values (stream :label "Change Display Parameters")
    (setq sort-by (accept `(sorting-option ,(metering-run-type self))
			  :default sort-by
			  :prompt "Sort the output by"
			  :stream stream))    
    (setq threshold-percentage (accept '(null-or-type ((number 0 100)))
				       :default threshold-percentage
				       :prompt "Percentage below which data isn't shown"
				       :stream stream)))
  (force-recalculation self))

(defmethod (component-for-thresholds pc-metering-run) () 'percentage-of-run)
  
;;; this is almost exactly the same as function call except for thresholds and total displayed
(defmethod (process-selector-information pc-metering-run) ()
  (let ((sort-by-field (sorting-option-field sort-by))
	(extractor-function (metering:get-component-extractor-from-components
			      (component-for-thresholds self)
			      nil (metering-run-field-descriptions self)))
	(last-entry nil)
	(total-entries (metering:ncomponents collector)))
    (flet ((below-threshold (selector components)
	     (declare (sys:downward-function))
	     (ignore selector)
	     (and threshold-percentage
		  (not (> (metering:total (funcall extractor-function components))
			  threshold-percentage)))))
      (setf n-printable-entries 0
	    total-displayed 0
	    sorted-entries nil)
      (tv:noting-progress ("Filter and Sort Results")
	(metering:sort-collector-values
	  collector
	  #'(lambda (function components ignore)
	      (tv:note-progress n-printable-entries total-entries)
	      (let ((new-entry (list (list function components))))
		(if (null last-entry)
		    (setf sorted-entries new-entry)
		    (setf (cdr last-entry) new-entry))
		(setf last-entry new-entry))
	      (unless (eq function 'below-threshold-percentage)
		(incf total-displayed
		      (total (funcall extractor-function components)))
		(incf n-printable-entries)))
	  sort-by-field
	  :extractor (sorting-option-extractor sort-by)
	  :predicate (sorting-option-predicate sort-by)
	  :filters `(,@(when threshold-percentage
			 `((below-threshold-percentage
			     ,#'below-threshold sum))))
	  :sort-filters-p nil)))))

;;; this is the same as function call
(defmethod (display-metering-results pc-metering-run) (stream header-char-width)
  (ignore header-char-width)
  (when (null n-printable-entries)
    (process-selector-information self))
  (multiple-value-bind (ignore top ignore bottom)
      (send-if-handles stream :visible-cursorpos-limits :character)
    (with-redisplayable-output (:stream stream :unique-id self :cache-value redisplay-tick)
      (dw::with-output-truncation (stream :horizontal t)
	(let ((n-entries (ncomponents collector))
	      (*print-pretty* nil)
	      (dw::*abbreviate-function-specs* t)
	      (char-width (send stream :char-width)))
	  (tv:noting-progress ("Meter Printout")
	    (if (zerop n-entries)
		(display-no-data-message self stream)
		(loop with entry-number = 0
		      for (function components) in sorted-entries
		      do (unless (eq function 'below-threshold-percentage)
			   (incf entry-number)
			   (tv:note-progress entry-number n-printable-entries)
			   (let ((cache-value (clipped-cache-value entry-number entry-number
								   top bottom header-tick)))
		
			     (dw:with-redisplayable-output
				 (:stream stream
				  :unique-id function
				  :cache-value cache-value
				  :cache-test #'clipped-cache-test)
			       (write-char #\space stream)	;this is necessary for two reasons
			       (unless (eq cache-value :clipped)
				 (loop for first first t then nil
				       for field in output-fields
				       unless first
					 do (format stream "~v@t" *number-of-inter-field-spaces*)
				       do (write-sub-fields field
							    stream self
							    components
							    function
							    char-width))
				 (terpri stream)))))))))))))


(define-output-field percentage-of-run :statistical-program-counter
  :header "Excl Time"
  :documentation
  "The time spent in this function (does not include time spent in its callees)."
  :sub-field-descriptions
  ((:header "%Run"
     :documentation
     "Percentage of total time for the run spent exclusively in this function."
     :width (7 :character)
     :write-function
     (lambda (stream field &rest ignore)
       (format stream "~6,2F%"
	       (total field))))
    (:header "/Run"
     :documentation "Bar graph of percentage of total time for run spent exclusively in this function."
     :width (100 :pixel)
     :write-function
     (lambda (stream field &rest ignore) 
       (bar-graph stream
		  (total field) 100.0
		  100))))
  :current-sub-field-names ("%Run" "/Run"))

(define-output-field
  nil (:function-call :statistical-function-call :statistical-program-counter)
  :header "Function"
  :documentation "The function itself."
  :sub-field-descriptions
  ((:header ""
     :documentation "The function itself."
     :width nil
     :write-function
     (lambda (stream field run entry function)
       (ignore field run entry)
       (when function
	 (format stream "~@\\presentation\\"
		 function
		 '((function) :abbreviate-p t :language-specific t))))))
  :current-sub-field-names (""))

(define-default-output-fields :statistical-program-counter
			      "Excl Time" "Function")

(defmethod (apply-function pc-metering-run) (function really-metering
						      explicitly-enable args)
  (if (not really-metering)
      (apply function args)
      (focus-in-on-peaks
	self
	(if explicitly-enable
	    #'(lambda (&rest args)
		(with-metering-enabled (apply function args)))
	    function)
	args)))

(defvar *pc-metering-retry-count* 2)
(defvar *pc-metering-compact-interval* 1000.)

(defmacro with-range-in-bucket (bucket end-bucket &body body)
  `(let ((old-offset sys::%pc-table-offset)
	 (old-length sys::%pc-table-length)
	 (old-rotation sys::%pc-table-pc-rotation))
     (let ((*standard-output* #'si:null-stream))
       (meter:expand-range ,bucket ,end-bucket))
     ,@body
     (setf sys::%pc-table-offset old-offset)
     (setf sys::%pc-table-length old-length)
     (setf sys::%pc-table-pc-rotation old-rotation)
     (setf sys::%pc-table-misses 0)))

(defvar *special-progress-note*)

(defmethod (focus-in-on-peaks pc-metering-run) (function args)
  (let* ((cutoff-fraction (/ (float resolution-percentage) 100.0))
	 (number-of-iterations 0))
    (labels ((focus (expected-fraction &optional (depth 0))
	       (let (best-delta best-peaks best-data)
		 (loop for current-peaks = nil
		       for current-data = nil
		       for retry below *pc-metering-retry-count*
		       do (metering:reset-collector metering:*pc-metering-histogram*)
			  (apply function args)
			  (incf number-of-iterations)
			  (tv:format-progress-note
			    nil
			    "Focusing in on PC buckets. Depth:~3D Repeats: ~3D"
			    depth number-of-iterations)
			  (let* ((hits (loop for bucket from 0 
					     while (< bucket sys:%pc-table-length)
					     sum (aref meter:*pc-monitor-array* bucket)))
				 (total (+ sys:%pc-table-misses hits))
				 (delta (abs (- (if (zerop total) 0 (float (/ hits total)))
						expected-fraction)))
				 (peak-start nil)
				 (peak-end nil)
				 (peak-fraction 0))
			    (flet ((record-current-peak ()
				     (when peak-start
				       (push (list peak-fraction peak-start peak-end)
					     current-peaks)
				       (setf peak-fraction 0
					     peak-start nil
					     peak-end nil)))
				   (record-current-data (function fraction)
				     (when function
				       (if (eql function (first (car current-data)))
					   (incf (second (car current-data)) fraction)
					   (push (list function fraction) current-data)))))
			      (unless (and best-delta
					   (> delta best-delta))
				(loop for bucket from 0 below sys:%pc-table-length
				      as samples = (aref meter:*pc-monitor-array* bucket)
				      when (plusp samples)
					do (when (and peak-start
						      (> (abs (- bucket peak-start))
							 *pc-metering-compact-interval*))
					     (record-current-peak))
					   (let ((fraction (/ (float samples) total)))
					     (if (meter:single-function-in-bucket bucket)
						 (progn
						   (record-current-peak)
						   (record-current-data
						     (first
						       (meter:list-functions-in-bucket bucket))
						     fraction))
						 (progn
						   (when ( fraction cutoff-fraction)
						     (if (null peak-start)
							 (setf peak-start bucket
							       peak-end bucket)
							 (setf peak-end
							       (max peak-end bucket))))
						   (when peak-start
						     (incf peak-fraction fraction)))))
				      finally (record-current-peak))
				(setf best-peaks current-peaks
				      best-delta delta
				      best-data current-data)
				#|| (format t "~%~D repeat ~D exp ~D ~D"
					    depth retry expected-fraction
					    delta) ||#
				(when (< best-delta cutoff-fraction)
				  (return (values)))))))
		 (loop for (function fraction) in best-data do
		   (collect-data collector function (* fraction 100.)))
		 (loop with number-of-peaks = (length best-peaks)
		       for peak-number from 0
		       for (fraction start end) in best-peaks
		       do (when (zerop depth)
			    (tv:note-progress peak-number number-of-peaks))
			  (with-range-in-bucket
			    start
			    end
			    (multiple-value-prog1
			      (focus fraction (1+ depth))))))))
      (let ((*standard-output* #'si:null-stream))
	(when (and sampling-interval (meter:pc-metering-sampling-rate-control-p))
	  (meter:set-pc-metering-sampling-rate (/ 1 sampling-interval)))
	(meter:monitor-all-functions))
      (tv:noting-progress-alterable-note ("Focusing in on PC buckets. Depth:  0 Repeats:  0")
	(focus 1)))
    number-of-iterations))


;; new collector

(defcollector numeric-sum ((&rest args) ((args number "Value(s) to sum" :value)))
  ((total 0))
  ())

(defmethod (reset numeric-sum) ()
  (setf total 0))

(defmethod (collector-empty-p numeric-sum) () (zerop total))

(defmethod (collect-data numeric-sum) (&rest args)
 (incf total (if (and args (null (cdr args)))
		 (car args)
		 (apply '+ args))))


(defmethod (total numeric-sum) () total)

(defmethod (display numeric-sum) (&optional (s t) &key label)
  (if label
      (format s "~&~A h" (if (listp label) (car label) label))
      (format s "~&H"))
  (format s "as a total of ~D" (total self)))

(defmethod (compact-results numeric-sum) () (total self))

(defmethod (compact-results-description numeric-sum) () 'TOTAL)

(defmethod (get-entries numeric-sum) (mapping-function)
  (funcall mapping-function (total self)))

(defmethod (combine numeric-sum) (combinee)
  (incf total (total combinee)))

(defmethod (optimize-combine numeric-sum) (combinee)
  (when (operation-handled-p combinee 'total)
    (incf total (total combinee))
    t))


