;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *generator-function-cache* (make-hash-table :test #'equal))

(defun canonicalize-generator-value-descriptions (values-list)
  (sort values-list #'< :key #'index-value))

(defun canonicalize-generator-description (lambda-list generator-list
					   initial-collector-arglist
					   final-collector-arglist
					   initial-trigger-values)
  (declare (values canonicalized-lambda-list canonicalized-generator-list
		   canonicalized-initial-collector-arglist
		   canonicalized-final-collector-arglist
		   canonicalized-initial-lambda-list))
  (let* ((mapping
	   (loop with counter = 0
		 for arg in lambda-list
		 when (not (or (member arg si:lambda-list-keywords) (constantp arg)))
		   collect (progn (incf counter) (cons arg counter))))
	 (canonicalized-initial-lambda-list
	   (loop for arg in initial-trigger-values
		 when (not (member arg si:lambda-list-keywords))
		   collect
		     (let ((val (if (constantp arg) arg (cdr (assoc arg mapping)))))
		       (unless (or val (null arg))
			 (error
			   "The initial trigger value ~S was not a member of the final trigger values ~S"
			   arg lambda-list))
		       val)))
	 ;; should probably canonicalize this to truncate all args not actually
	 ;; used by generators, and putting an &rest arg in place.
	 (canonicalized-lambda-list
	   (loop with counter = 0
		 for arg in lambda-list
		 when (not (or (member arg si:lambda-list-keywords) (constantp arg)))
		   collect (progn (incf counter) (ncons counter))
		 else collect arg))
	 (canonicalized-generator-list
	   (loop for descriptor in generator-list
		 collect
		 (append
		   (cons (generator-value-generator descriptor)
			 (loop for arg in
				   (generator-value-args descriptor)
			       collect
			       (let ((mapped-value (cdr (assoc arg mapping))))
				 (or mapped-value arg))))
		   (let ((other-keywords (get-top-level-keywords-from-slot descriptor)))
		     (loop for arg in other-keywords
			   collect
			     (let ((mapped-value (cdr (assoc arg mapping))))
			       (or mapped-value arg))))
		   (loop for gen-value in (canonicalize-generator-value-descriptions
					    (copy-list 
					      (generator-value-values descriptor)))
			 collect (unparse gen-value)))))
	 (mapping2
	   (loop with counter = 0
		 for g in generator-list
		 append (loop for value in (canonicalize-generator-value-descriptions
					    (copy-list
					      (generator-value-values g)))
			      collect (progn (incf counter)
					     (cons (generator-value-name value) counter)))))
	 (canonicalized-initial-collector-arglist
	   (loop for arg-name in
		     (or initial-collector-arglist
			 (loop for g in generator-list
			       append
				 (loop for value in
					   (canonicalize-generator-value-descriptions
					     (copy-list
					       (generator-value-values g)))
				       when (report-initial? value)
					 collect (generator-value-name value))))
		 collect (or (cdr (assoc arg-name mapping2)) arg-name)))
	 (canonicalized-final-collector-arglist
	   (loop for arg-name in
		     (or final-collector-arglist
			 (loop for g in generator-list
			       append
				 (loop for value in (canonicalize-generator-value-descriptions
						      (copy-list
							(generator-value-values g)))
				       when (report-final? value)
					 collect (generator-value-name value))))
		 collect (or (cdr (assoc arg-name mapping2)) arg-name))))
    (values canonicalized-lambda-list canonicalized-generator-list
	    canonicalized-initial-collector-arglist
	    canonicalized-final-collector-arglist
	    canonicalized-initial-lambda-list)))
