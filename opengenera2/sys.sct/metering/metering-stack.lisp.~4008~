;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This breaks my heart.  There *MUST* be a better way.  (Actually, I can think of a few
;;; but time constraints don't allow me to implement them before release 7)

(defresource metering-stacks ()
  :constructor (make-array 1000 :fill-pointer 0 :leader-length 2 :leader-list (list 0 0)
			   :area metering-area :adjustable 't)
  :initializer (progn (setf (metering-stack-pointer object) 0)
		      (setf (metering-stack-frame-pointer object) 0)))

#|

;; layout of metering stack.

Fill-pointer
 V  0  +-----------------+
 V  1  |                 |
 V  2
 V  3
 V ...
 V
 V  
 V  k  |  previous SP    |<==============<\
 V k+1 +-----------------+                ^
 V k+2 |      var 1      |                ^
 V k+3 |      var 2      |                ^
 V     |      var 3      |                ^
 V     |      ...        |                ^
 V     |      ...        |                ^
 V     |      var n      |                ^
 V     | totals of var 1 |                ^  (these totals only show up when (var k) is being
 V     | totals of var 2 |                ^  metered "exclusively")
 V     | totals of var 3 |                ^
 V     |      ...        |                ^
 V     |      ...        |                ^
 V     | totals of var n |                ^
 V     |-----------------|                ^
 \>===>|  previous SP => |>==============>/ 
       +-----------------+

|#

(defvar *number-of-frames-to-grow-stack* 25.)

(defmacro ensure-stack-frame (stack stack-frame-size &environment env)
  (once-only (stack-frame-size &environment env)
    `(let* ((stack-ptr (metering-stack-pointer ,stack))
	    (new-stack-ptr (+ ,stack-frame-size stack-ptr))
	    (stack-length (array-total-size ,stack)))
       (if (< new-stack-ptr stack-length)
	   (setf (metering-stack-pointer ,stack) new-stack-ptr)
	   (adjust-array ,stack (+ stack-length (* *number-of-frames-to-grow-stack*
						   ,stack-frame-size))
			 :fill-pointer new-stack-ptr))
       new-stack-ptr)))

#|| 

;; move to metering-macros.
(defsubst pop-frame (stack &optional old-stack-pointer)
  (let ((old-sp (or old-stack-pointer (aref stack (fill-pointer stack)))))
    (setf (fill-pointer stack) (or old-sp 0))))

||#
