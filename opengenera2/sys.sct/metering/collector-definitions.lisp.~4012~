;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor basic-collector-type
	((name nil)
	 (uid nil)
	 (typed-lambda-list nil)
	 (sample-instance nil)
	 ;; Find out the arglist for make-data-collector of this type.
	 ;; This doesn't include :name, and :component-description, or anything
	 ;; common to all elements of this type.  It is a User Interface list,
	 ;; consisting of those things you want accessible from the metering window
	 ;;  when creating a collector of this type.
	 (init-options nil))
	()
  :READABLE-instance-variables
  (:writable-instance-variables sample-instance)
  (:conc-name collector-type-)
  (:initable-instance-variables name typed-lambda-list init-options))

(defflavor basic-collector
	()
	()
  (:init-keywords :top-level))

(defflavor instantiated-collector-mixin
	((triggers nil)
	 (name nil)
	 (init-options nil))
	;; Is Benson gone yet?  Can I remove this?
	(flavor:property-list-mixin)
  (:required-flavors basic-collector)
  (:conc-name collector-)
  (:writable-instance-variables name init-options)
  (:initable-instance-variables name))

(defflavor complex-collector-mixin
	((make-component nil))
	()
  (:conc-name collector-)
  (:required-flavors basic-collector)
  :readable-instance-variables
  :initable-instance-variables
  (:required-methods map-over-component-collectors ncomponents))

(defflavor instantiated-complex-collector-mixin
	((component-description nil)
	 (template nil))
	(complex-collector-mixin instantiated-collector-mixin)
  (:conc-name collector-)
  (:required-flavors basic-collector)
  :readable-instance-variables
  :initable-instance-variables
  (:required-init-keywords :component-description))
(defflavor wirable-collector-mixin
	((wired-p nil))
	()
  (:area-keyword :area)
  (:required-flavors instantiated-collector-mixin)
  (:default-init-plist :area wired-metering-area))

(defflavor trivially-wirable-collector-mixin ()
	   ()
  (:required-flavors basic-collector)
  (:area-keyword :area)
  (:default-init-plist :area metering-area))

(defflavor multiple-process-collector-mixin () () (:required-flavors basic-collector))
(defflavor multiple-process-lock-collector-mixin
	((lock (process:make-lock "Collector Lock")))
	()
  (:readable-instance-variables lock)
  (:required-flavors basic-collector))

;; management.

(defvar *collector-type-uid-counter* 1)
(defvar *collector-type-table* (make-hash-table))

(setf (gethash 'basic-collector *collector-type-table*)
      (make-instance 'basic-collector-type :name 'basic-collector))

(setf (gethash 'lisp-escape *collector-type-table*)
      (make-instance 'basic-collector-type :name 'lisp-escape))

(defvar *interlocked-collector-types* (make-hash-table :test 'equal))
(defvar *valid-interlocking-types*
	'((:scheduler scheduler without-interrupts)
	  (:lock lock locking)))
(defvar *interlocking-components* '((:scheduler multiple-process-collector-mixin)
				    (:lock multiple-process-lock-collector-mixin)))

(defvar *default-interlocking-type* :lock)


