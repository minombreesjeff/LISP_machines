;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;This definition needs to be in the compile time environment of PROCES.LISP and STORAGE.LISP,
;; so that the ordered-instance-variable accessors will be open-coded!

(defflavor basic-trigger
	(name
	 (description nil)
	 type				;'(user-defined function page-fault ...)
	 variable-name
	 (control nil)
	 (control-extent :global)
	 values
	 (value-types nil)		; optional: presentation type of values. for UI
					; coolness
	 (generated-values nil)
	 (initial-values nil)
	 (initial-generated-values nil)
	 generator-function
	 (collector-function #'ignore)
	 (initial-generator-function )
	 (initial-collector-function nil)
	 ;; active region is really only part of metering-region, but because of
	 ;; ordered-instance-variable complications, it needs to be here.
	 (active-region nil)
	 (generator-description nil)
	 (collector-description nil)
	 (filter1 nil)
	 (filter2 nil)
	 (filter3 nil)
	 source-locators
	 (compute-differences 't)
	 (interval-depth 0)
	 spare-slot-1
	 spare-slot-2)
	()
  (:initable-instance-variables name description type variable-name
				control control-extent
				values initial-values value-types)
  (:readable-instance-variables name type variable-name description
				values initial-values
				generated-values initial-generated-values value-types
				control control-extent active-region
				generator-description collector-description
				collector-function generator-function
				initial-generator-function initial-collector-function
				filter1 filter2 filter3)
  (:writable-instance-variables control name compute-differences interval-depth
				generated-values initial-generated-values
				generator-description collector-description
				collector-function generator-function
				initial-generator-function initial-collector-function
				spare-slot-1 spare-slot-2)
  (:conc-name trigger-)
  (:init-keywords :compute-differences)
  (:required-init-keywords :name :variable-name :values)
  :ordered-instance-variables)

(defflavor basic-control			;
	((name nil)
	 (state nil)
	 (processes nil)
	 (regions nil)
	 (switch nil)
	 (switch-mode :region)
	 (extent :global)		;; global, per-process, others?
	 (testing-function #'ignore)
	 (triggers nil)
	 (keep 't)
	 (scope nil)
	 (restrictions nil)		;; list of (<trigger> :disable-checking)
	 				;; :disable-checking is the only one so far, but there
	 				;; might be others.
	 (special-actions nil))		;; list of (<trigger>
					;;          <closure-for-turn-on-metering>
					;;          <closure-for-turn-off-metering>
					;;          <closure-for-maybe-turn-on-metering>)
	()
  (:readable-instance-variables state name scope extent)
  (:initable-instance-variables name keep)
  (:readable-instance-variables state name scope extent testing-function special-actions)
  (:writable-instance-variables regions switch testing-function special-actions triggers)
  (:conc-name control-)
  :ordered-instance-variables)

;; this is needed by encapsulate.  Moved here from SYS:METERING;WIRABLE-CODE.LISP so it
;; is in the SYSTEM system.
si:(defun wire-function-for-metering (fcn)
     (let ((cca (compiled-function-cca fcn)))
       (loop for i from (defstorage-size compiled-function)
	     repeat
	       #+3600 (compiled-function-table-size cca)
	       ;; on IMACH constants aren't in reference-table, they're in the
	       ;; instructions themselves.
	       #+IMACH (- (cca-total-size cca)
			  (cca-suffix-size cca)
			  (defstorage-size compiled-function))
	     as p = (%make-pointer-offset dtp-locative cca i) do
	 (when (%pointer-type-p (%p-data-type p))
	   (select (%p-data-type p)
	     ((dtp-nil dtp-symbol))		;Leave as constants
	     ((dtp-array))			;Probably an error message string
	     ((dtp-compiled-function)		;:INTERNAL
	      ;; avoid infinite recursion
	      (unless (eq (cdr p) fcn)
		(%p-store-contents p (wire-function-for-metering (cdr p)))))
	     ((dtp-locative)			;Symbol cell reference
	      (cond ((let ((ptr (%p-pointer p))
			   (pht-index))
		       (or (%pointer-lessp ptr %wired-virtual-address-high)
			   #+3600
			   (%pointer- (%p-pointer p) a-memory-virtual-address)
			   (= %vma-equals-pma (storage:extract-vpn ptr))
			   (not (setq pht-index (pht-lookup (storage:extract-vpn ptr))))
			   (= %mmpt-status-wired
			      (storage::mmpt-status
				(mmpt-lookup (storage::pht-ppn pht-index)))))))
		    ((= (%p-data-type (cdr p)) dtp-one-q-forward)
		     (%p-store-contents p (%p-contents-as-locative (cdr p))))
		    ((memq (compiler:disassemble-decode-locative (cdr p))
			   (cdr (assq 'not-wired (debugging-info fcn)))))
		    ((multiple-value-bind (category disabled wired safeguard unsafeguard)
			 (si:decode-storage-category-debugging-info (debugging-info fcn))
		       (ignore category wired)
		       (or disabled
			   (memq (compiler:disassemble-decode-locative (cdr p)) safeguard)
			   (memq (compiler:disassemble-decode-locative (cdr p))
				 unsafeguard))))
		    ((structure-wired-p (cddr p)))
		    (t (fsignal "Reference to unwired ~S from ~S; proceed to leave it"
				(compiler:disassemble-decode-locative (cdr p)) fcn))))
	     (otherwise
	      (unless (structure-wired-p (cdr p))
		  (fsignal "~S unknown external reference in ~S; proceed to leave it"
			   (cdr p) fcn)))))))
     (unless (structure-wired-p fcn)
       (wire-structure fcn))
     fcn)

;; 

(eval-when (compile)
  (compiler:function-defined 'metering:clear-trigger)
  (compiler:function-defined 'metering:collect-data-from-trigger)
  (compiler:function-defined 'metering:compute-differences-across-region)
  (compiler:function-defined 'metering:control-trigger)
  (compiler:function-defined 'metering:enable-metering-utility)
  (compiler:function-defined 'metering:enter-process)
  (compiler:function-defined 'metering:enter-region)
  (compiler:function-defined 'metering:exit-process)
  (compiler:function-defined 'metering:exit-region)
  (compiler:function-defined 'metering:generate-data-at-trigger)
  (compiler:function-defined 'metering:get-entries)
  (compiler:function-defined 'metering:make-data-collector)
  (compiler:function-defined 'metering:meter-function)
  (compiler:function-defined 'metering:metering-enabled?)
  (compiler:function-defined 'metering:remove-trigger)
  (compiler:function-defined 'metering:reset-collector)
  (compiler:function-defined 'metering:set-scope-of-control)
  (compiler:function-defined 'metering:set-trigger-generator)
  (compiler:function-defined 'metering:unmeter-function))



;;
;; this is stuff needed by macros used by the system system.  It should be loaded before
;; the scheduler, (the earliest known client).

(defvar *metering-globally-enabled* nil)
(defvar *sched-communicate-metering-enabled* nil)
(defvar *sched-communicate-metering-accounted* nil)

(defvar *metering-system-is-loaded* nil)

(setf (get 'initial-values 'si:debug-info) 't)

(defvar wired-metering-area)

;; any metering done on the aux stack uses this for REAL-TIME overhead.
(si:defwiredvar metering::%aux-stack-metering-overhead 0)
;; trigger management
(defvar *triggering-events* nil)

(defvar *triggering-events-synchronizer* (process:make-lock "Triggering Event Lock"))
(si:defwiredvar *enable-metering-on-function-calls* nil)

(si:defwiredvar *trigger-for-all-function-calls* nil)

(si:defwiredvar *enable-function-metering-during-scavenge* nil)

(si:defwiredvar *wired-metering-control* nil)
(defvar *bad-meter-bit-traps* nil)

(defvar *encapsulated-functions* nil)

;; fudge factors for function call metering.
(defvar *function-entry-fudge-factor-1* 0)

(defvar *function-entry-fudge-factor-2* 0)

(defvar *function-exit-fudge-factor-1* 0)

(defvar *function-exit-fudge-factor-2* 0) 

(defvar *function-entry-fudge-fraction* 0)

(defvar *function-exit-fudge-fraction* 0)

(defvar *function-trap-fudge-denominator* 0)

(defmacro with-triggering-events-consistent (&body body)
  `(process:with-lock (*triggering-events-synchronizer*)
     ,@body))


(defun trigger-name-equal (name1 name2)
  (flet ((string-ops-ok (name)
	   (or (stringp name) (symbolp name) (characterp name))))
    (let ((name1-is-ok-for-strings (string-ops-ok name1))
	  (name2-is-ok-for-strings (string-ops-ok name2)))
      (if (and name1-is-ok-for-strings name2-is-ok-for-strings)
	  (string-equal name1 name2)
	  (if (or name1-is-ok-for-strings name2-is-ok-for-strings)
	      nil
	      (equalp name1 name2))))))


(defun find-trigger (name)
  (declare (values trigger variable-name found))
  (let ((descriptor
	  (car
	    (or (member name *triggering-events* :key #'first)
		(member name *triggering-events* :key #'first :test #'trigger-name-equal)))))
    (values (second descriptor) (third descriptor) (not (null descriptor)))))

(defvar *valid-conditions* '(si:gc-safe si:wired))

(defvar *condition-cautions* `((si:gc-safe "can be executed inside a transport trap")
			       (si:wired "executed on AUX stack")))

(defvar *valid-metering-encapsulation-types* '(meter region))


(defun get-conditions-from-types (types)
  (loop for type in types
	when (member type *valid-conditions*)
	  collect type))


(defun get-encapsulation-types-from-types (types)
  (loop for type in types
	when (member type *valid-metering-encapsulation-types*)
	  collect type))


(defun find-encapsulated-function-trigger (function-desc)
  (declare (values trigger function-name types descriptor))
  (when (fdefinedp function-desc)
    (let ((def (fdefinition (si:unencapsulate-function-spec function-desc))))
      (loop for (function-name trigger types descriptor) in *encapsulated-functions* do
	(when (eq def (fdefinition (si:unencapsulate-function-spec function-name)))
	  (return (values trigger function-name types descriptor)))))))


(defun parse-trigger (trigger-descriptor &key (if-not-exists :error))
  (or (and (symbolp trigger-descriptor)
	   (or (find-trigger trigger-descriptor)
	       (find-encapsulated-function-trigger trigger-descriptor)
	       (parse-trigger
		 (substitute #\space #\- (string trigger-descriptor)
			     :test #'char-equal)
		 :if-not-exists if-not-exists)))
      (and (stringp trigger-descriptor)
	   (or 
	     (find-trigger trigger-descriptor)
	     (ignore-errors
	       (find-encapsulated-function-trigger (read-from-string trigger-descriptor)))))
      (and (listp trigger-descriptor)
	   (or (and (member (car trigger-descriptor) '(:function function))
		    (find-encapsulated-function-trigger (cadr trigger-descriptor)))
	       (and (functionp trigger-descriptor)
		    (find-encapsulated-function-trigger trigger-descriptor))
	       (and (sys:validate-function-spec trigger-descriptor)
		    (ignore-errors
		      (find-encapsulated-function-trigger trigger-descriptor)))))
      (and (typep trigger-descriptor 'basic-trigger)
	   trigger-descriptor)
      (and (compiled-function-p trigger-descriptor)
	   (find-encapsulated-function-trigger
	     (si:function-name
	       (fdefinition
		 (si:unencapsulate-function-spec
		   (si:function-name trigger-descriptor))))))
      (if (eq if-not-exists :error)
	  (error "Invalid trigger descriptor ~S" trigger-descriptor)
	  if-not-exists)))

(defun find-metered-function-trigger (function-desc)
  (declare (values trigger function-name types descriptor))
  (multiple-value-bind (trigger function-name types descriptor)
      (find-encapsulated-function-trigger function-desc)
    (if (member 'meter types)
	(values trigger function-name types descriptor)
	(values nil nil nil nil))))


(defun register-trigger (name variable-name trigger)
  (let ((old-trigger (find-trigger name)))
    (when old-trigger
      (if (and *metering-system-is-loaded* (eq (trigger-name old-trigger) name))
	  (progn
	    (when (or *metering-enabled* *metering-system-is-loaded*)
	      (cl:warn '(:bad-style 't) "Attempt to register triggering event ~A, which is already registered. Will replace after copying old information." name)
	      (let ((old-control (trigger-control old-trigger)))
		(control-trigger nil old-trigger)
		(when (and (not (trigger-control trigger)) old-control)
		  (cl:warn '(:bad-style 't)
			   "Copying old control ~S to new trigger." old-control)
		  (control-trigger old-control trigger)))
	      (let ((old-collector-description (trigger-collector-description old-trigger)))
		(collect-data-from-trigger old-trigger nil)
		(ignore-errors
		  (when (and (not (trigger-collector-description trigger)) old-collector-description)
		    (cl:warn '(:bad-style 't)
			     "Will try to copy old collector ~S to new trigger."
			     old-collector-description)
		    (collect-data-from-trigger trigger old-collector-description)))))
	    (setf *triggering-events*
		  (delete name *triggering-events* :key #'car :test #'trigger-name-equal)))
	  (cl:warn '(:bad-style 't)
		   "Registering metering event ~S, which might be confused with ~S"
		   name (if *metering-system-is-loaded* (trigger-name old-trigger) old-trigger)))))
  (push (list name trigger variable-name) *triggering-events*)
  (setf (symbol-value variable-name)
	(if (or *metering-enabled* *metering-system-is-loaded* (typep trigger 'basic-trigger))
	    trigger
	    (and (boundp variable-name) (symbol-value variable-name)))))


(defun register-triggering-event (name variable-name trigger)
  (with-triggering-events-consistent
    (register-trigger name variable-name trigger)))


;; No-op for the time being
(defun ensure-reasonable-trigger-name (name) name)

(defun find-trigger-variable-name (name type arglist &optional description)
  (let* ((partial-definition (listp type))
	 (legal-partial-definition nil)
	 (initial-final (if (and partial-definition
				 (let ((i-f (cdr type)))
				   (and i-f
					(listp i-f)
					(or (eql (car i-f) :initial)
					    (eql (car i-f) :final)))))
			    (progn
			      (setf legal-partial-definition 't)
			      (second type))
			    :final))
	 (type (if partial-definition (car type) type)))
    (unless (member type '(trigger metering-region metering-interval
				   restricted-trigger restricted-metering-region
				   restricted-metering-interval))
      (error "Type ~A is not a valid trigger type" type))
    ;; If name already exists then arglist must match.
    ;; Otherwise, if new, register it, and create instance, and variable to hold it.
    (with-triggering-events-consistent
      (multiple-value-bind (trigger trigger-variable name-found)
	  (find-trigger name)
	;; before we check for agreement, make sure the names are EQ.
	(if (and name-found
		 (if (and (typep trigger 'basic-trigger) *metering-system-is-loaded*)
		     (eq name (trigger-name trigger))
		     (and (listp trigger) (eq name (second trigger)))))
	    (if (typep trigger 'basic-trigger)
		(unless (and (typep trigger type)
			     (equal arglist (if (eql initial-final :initial)
						(trigger-initial-values trigger)
						(trigger-values trigger))))
		  (if (and legal-partial-definition
			   (eql (if (eql initial-final :initial)
				    (trigger-initial-values trigger)
				    (trigger-values trigger))
				:unbound))
		      (if (eql initial-final :initial)
			  (set-trigger-initial-values trigger arglist)
			  (set-trigger-values trigger arglist))
		      (error
			"The trigger named ~A is already registered, and is incompatible.~% arglist: ~S ~% arglist provided: ~S ~%(~S '~S) and try this again if you want to override previous definition."
			name (trigger-values trigger)
			arglist 'undefine-metering-point name)))
		(unless (and (listp trigger)
			     (eql type (first trigger))
			     (equal arglist (if (eql initial-final :initial)
						(fifth trigger)
						(sixth trigger))))
		  (if (and legal-partial-definition
			   (eql (if (eql initial-final :initial)
				    (fifth trigger)
				    (sixth trigger))
				:unbound))
		      (if (eql initial-final :initial)
			  (setf (fifth trigger) arglist)
			  (setf (sixth trigger) arglist))
		      (error
			"The trigger named ~A is already registered, and is incompatible.~% arglist: ~S ~% arglist provided: ~S ~%(~S '~S) and try this again if you want to override previous definition."
			name (sixth trigger)
			arglist 'undefine-metering-point name))))
	    (setf trigger-variable
		  (ensure-reasonable-trigger-name name))
	    (setf trigger
		  (if legal-partial-definition
		      (if (or *metering-enabled* *metering-system-is-loaded*)
			  (make-instance type
					 :name name
					 :description description
					 :type 'user-defined
					 :variable-name trigger-variable
					 :initial-values (if (eql initial-final :initial)
							     arglist
							     :unbound)
					 :values (if (eql initial-final :final)
						     arglist
						     :unbound))
			  (list type name description
				trigger-variable
				(if (eql initial-final :initial) arglist :unbound)
				(if (eql initial-final :final) arglist :unbound)))
		      (if (or *metering-enabled* *metering-system-is-loaded*)
			  (make-instance type
					 :name name
					 :description description
					 :type 'user-defined
					 :variable-name trigger-variable
					 :values arglist)
			  (list type name description trigger-variable nil arglist))))
	    (register-trigger name trigger-variable trigger))
	trigger-variable))))


(defun undefine-metering-point (name)
  (let ((trigger (parse-trigger name :if-not-exists nil)))
    (if trigger
      (remove-trigger trigger)
      (format *error-output* "No trigger named ~A was found." name))
    (or trigger name)))


(defun remove-trigger (name)
  (with-triggering-events-consistent
    (if (null name)
	(loop for entry in *triggering-events*
	      collect (car entry)
	      finally (setf *triggering-events* nil))
	(let ((trigger-list (if (listp name) name (ncons name))))
	  (loop for trigger-desc in trigger-list
		as trigger = (parse-trigger trigger-desc :if-not-exists nil)
		when trigger 
		  collect (trigger-name trigger)
		do (if (eq (trigger-type trigger) 'function)
		       (unmeter-function (trigger-name trigger))
		       (setf *triggering-events*
			     (delete trigger *triggering-events*
				     :key #'second :test #'trigger-name-equal))))))))




(defmethod (make-instance basic-trigger :after) (&rest init-plist)
  (ignore init-plist)
  ;; don't do this if this is only a partially declared trigger.
  (unless (eql values ':UNBOUND)
    (setf value-types (or value-types (make-list (length values) :initial-element t))))
  (set-trigger-generator self nil nil))

(defmethod (set-trigger-values basic-trigger) (new-values)
  (setf values new-values)
  (setf value-types (or value-types (make-list (length values) :initial-element t))))

;; for symmetry.  Not really needed.
(defmethod (set-trigger-initial-values basic-trigger) (new-values)
  (setf initial-values new-values))


;; so that even triggers w/o this instance variable can return a value without blowing up.

(defmethod (trigger-caution-about-generator basic-trigger) ()
  nil)

(defmethod ((setf trigger-caution-about-generator) basic-trigger) (value)
  value)

(defmethod (trigger-caution-about-collector basic-trigger) ()
  nil)

(defmethod ((setf trigger-caution-about-collector) basic-trigger) (value)
  value)

(defmethod (trigger-control-restrictions basic-trigger) ()
  nil)



(defun append-cautions-from-conditions (trigger types)
  (when (and (instancep trigger)
	     (si:typep-flavor trigger 'restricted-metering-region)
	     (intersection types *valid-conditions*))
    (let* ((cautions
	     (loop for condition in types
		   when (member condition *valid-conditions*)
		   collect (or (second
				 (find condition *condition-cautions*))
			       (format nil "~S" condition))))
	   (caution-string (if (= (length cautions) 1)
			       (car cautions)
			       (apply #'string-append
				      (cons (car cautions)
					    (loop for caution in (cdr cautions)
						  append (list ", " caution)))))))
      (setf (trigger-caution-about-generator trigger) caution-string)
      (setf (trigger-caution-about-collector trigger) caution-string))))



(defun relocate-metering-stack-pointers ()
  (when (and *current-process* *metering-system-is-loaded*)
    (let ((stack (metering:process-meter-stack *current-process*)))
      (when stack
	(let ((fast-stack stack))
	  (declare (sys:array-register fast-stack))
	  (loop for i below (metering-stack-pointer fast-stack) do
	    (setf (aref fast-stack i) (follow-cell-forwarding (aref fast-stack i) t))))))))
