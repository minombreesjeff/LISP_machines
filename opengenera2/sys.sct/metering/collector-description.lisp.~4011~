;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: METERING; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; A collector descriptor is the description that is used to describe how the values generated
;; by a trigger are collected by some collector-function.
;; this is designed for the convenience of the user.  

;; a collector descriptor can be either 
;;     1) an atom - a collector that takes no arguments.
;; or  2) a list whose car is an atom - the car is the collector and the cdr is the list
;;                                      of arguments
;; or  3) a list whose car is another list
;;				      - The car of the descriptor is a collector descriptor
;;				        that YIELDS an array of collectors.  
;;				        the cdr of the descriptor is a list, which we parse
;;				        recursively, that describes each collector yielded
;;				        by the car.

;; Then there is the parsed collector-description

;; A component-description is the description of the structure of a hierarchical collector.
;; for each component there is one entry: the name of the component, the type of collector,
;; and args passed to make-data-collector to construct that component.  (one of those args
;; might be :component-description, of course.)

;; there are three versions of this: ordered, normalized, and canonicalized.


;;;
;;; Collector-descriptors:

(defun get-collector-from-descriptor (descriptor)
  (if (atom descriptor)
      descriptor
      (let ((collector (car descriptor)))
	(if (atom collector)
	    collector
	    (if (atom (car collector))
		(car collector)
		(error
		  "Badly formed hierarchical collector description.  ~%
The collector type ~S must be an atom.~%
In ~S"
		  (car collector) descriptor))))))

(defun get-collector-type-from-descriptor (descriptor)
  (get-collector-type (get-collector-from-descriptor descriptor) 't))

(defun get-collector-arglist-from-descriptor (descriptor)
  (if (atom descriptor)
      nil
      (if (atom (car descriptor))
	  (cdr descriptor)
	  (cdar descriptor))))

(defun nested-collector (collector-description)
  (and (listp collector-description)
       (listp (car collector-description))
       (car collector-description)))

;;
;; Converts from a collector-descriptor to a parsed-collector-descriptor.
;;
;; a parsed-collector-descriptor is the same thing as a collector-descriptor except that
;; a descriptor can no longer be an atom.  A collector with no arguments is represented as
;; a list with one element.
;; also, in place of a slot-identifier for the collector, there is now a list of three 
;; elements: the type of the collector, the slot-identifier (as above), and the index 
;; into the components of its parent you are immediately descended from,
(defun convert-collector-description (description &optional component-description)
  (flet ((get-type (type-description component-description)
	   (if component-description
	       (let ((slot (find-slot-in-component-description
			     type-description component-description)))
		 (if slot
		     (list (second slot)
			   type-description
			   (if (= (length component-description) 1)
			       nil
			       (position slot component-description)))
		     (error "~S doesn't match any components in ~S"
			    type-description component-description)))
	       (list (or (get-collector-type type-description nil)
			 (get-collector-type (parse-collector type-description) 't))
		     type-description nil)))
	 (get-component-description (type-description component-description)
	   (if component-description
	       (let ((slot (find-slot-in-component-description
			     type-description component-description)))
		 (if (< (length slot) 3)
		     (error
		       "Collector description ~S, which is hierarchical, maps to slot ~S, which isn't hierarchical"
		       description slot)
		     (third slot)))
	       (let ((type-description (parse-collector type-description)))
		 (if (typep type-description 'instantiated-complex-collector-mixin)
		     (collector-component-description type-description)
		     (if (typep type-description 'instantiated-collector-mixin)
			 (error "Collector ~S must be hierarchical" type-description)
			 (error
			   "~S appears in a place that requires an instantiated collector"
			   type-description)))))))
    (labels ((convert-code (forms component-description)
	       (let ((top-level-collectors nil))
	       (flet ((convert (form)
			(lt:copyforms
			  #'(lambda (subform kind usage)
			      (ignore usage)
			      (cond
				((or (constantp subform) (eql kind 'lt:quote))
				 (values subform 't))
				((and (listp subform)
				      (member
					(car subform)
					'(collect collect-component collect-for-value)))
				 (values
				   `(,(car subform)
				     ,(progn
					(unless component-description
					  (when (ignore-errors
						  (parse-collector (second subform)))
					    (push (second subform) top-level-collectors)))
					(get-type (second subform) component-description))
				     ,@(loop for form in (cddr subform)
					     collect
					       (multiple-value-bind (b tlc)
						   (convert-code (ncons form)
								 component-description)
						 (setf top-level-collectors
						       (append top-level-collectors tlc))
						 b)))
				   ;; stop COPYFORMS from recursing anymore;
				   ;; we do it ourselves. (see the recursive call to
				   ;; convert-code)
				   t))
				((and (listp subform)
				      (eql (car subform) 'with-collector)
				      (listp (second subform)))
				 (let* ((type-description (second subform))
					(slot-id (car type-description))
					(sub-components-desc
					       (get-component-description
						 slot-id component-description)))
				   (values
				     `(,(car subform)
				       (,(progn
					   (unless component-description
					     (when (ignore-errors
						     (parse-collector slot-id))
					       (push slot-id top-level-collectors)))
					   (get-type slot-id component-description))
					,@(cdr type-description))
				       ,@(loop for sub-descriptor in (cddr subform)
					       collect
					       (multiple-value-bind (b tlc)
						 (convert-code
						   (ncons sub-descriptor)
						   sub-components-desc)
						 (setf top-level-collectors
						       (append top-level-collectors tlc))
						 b)))
				     't)))
				(t subform)))
			  form)))
		 (values (cons 'progn (loop for form in forms collect (convert form)))
			 top-level-collectors))))
	     (convert-shorthand (description component-description)
	       (if (atom description)
		   (ncons (get-type description component-description))
		   (let ((collector (car description)))
		     (if (atom collector)
			 (if (eql collector 'lisp-escape)
			     (multiple-value-bind (body top-level-collectors)
				 (convert-code (cdr description) component-description)
			       (list (list (get-collector-type collector)
					   (or top-level-collectors collector) nil)
				     body))
			     (cons (get-type collector component-description)
				   (cdr description)))
			 (let* ((slot-id (car collector))
				(sub-components-desc (get-component-description
						       slot-id component-description)))
			   (cons
			     (cons (get-type slot-id component-description) (cdr collector))
			     (loop for sub-descriptor in (cdr description)
				   collect (convert-shorthand
					     sub-descriptor sub-components-desc)))))))))
      (convert-shorthand description component-description))))

;; 
(defun nested-parsed-collector-description (description)
  (and (not (atom (caar description)))
       (caar description)))

(defun get-collector-from-parsed-collector-description (description)
  (let ((collector-spec (if (nested-parsed-collector-description description)
			    (second (caar description))
			    (second (car description)))))
    (when collector-spec
      (if (listp collector-spec)
	  (loop for spec in collector-spec collect (parse-collector spec))
	  (parse-collector collector-spec)))))

(defun get-collector-type-from-parsed-collector-description (description)
  (get-collector-type
    (first
      (if (nested-parsed-collector-description description)
	  (caar description)
	  (car description)))))

(defun get-arglist-from-parsed-collector-description (description)
  (if (nested-parsed-collector-description description)
      (cdar description)
      (cdr description)))

;; some type checking for validity.
(defun get-list-of-collectors (descriptions)
  (flet
    ((collect-instantiated-collector (descriptor)
       (get-collector-from-parsed-collector-description descriptor)))
    (loop for d in descriptions
	  as c = (collect-instantiated-collector d)
	  when (listp c) append c else collect c)))

;;
;; converts from a parsed-collector description to a canonicalized collector description
;;
(defun canonicalize-type-entry (description)
  (cons (first description) (third description)))

;; assumes that descriptions are already sorted.
(defun canonicalize-description (lambda-list descriptions)
  (let ((arg-counter 0)
	(temp-counter 0)
	(mappings nil))
    (labels
      ((create-new-arg (arg)
	 (let ((new-arg (intern (string-append "ARG-" (format nil "~D" arg-counter))
				(pkg-find-package "METERING"))))
	   (push (cons arg new-arg) mappings)
	   (incf arg-counter)
	   new-arg))
       (create-new-temp (temp)
	 (let ((new-temp (intern (string-append "TEMP-" (format nil "~D" temp-counter))
				 (pkg-find-package "METERING"))))
	   (push (cons temp new-temp) mappings)
	   (incf temp-counter)
	   new-temp))
       (fixup-arg-list (lambda-list)
	 (loop for arg in lambda-list
	       collect
		 (let ((mapping (assoc arg mappings)))
		   (if (constantp arg)
		       arg
		       (if mapping
			   (cdr mapping)
			   (lt:copyforms
			     #'(lambda (subform kind usage)
				 (ignore usage)
				 (if (or (constantp subform) (eql kind 'lt:quote))
				     (values subform 't)
				     (or (cdr (assoc subform mappings))
					 (if (and (symbolp subform)
						  (null (symbol-package subform)))
					     (values (create-new-temp subform) 't)
					     subform))))
			     arg))))))
       (canonicalize-random-code (code)
	 (lt:copyforms
	   #'(lambda (subform kind usage)
	       (ignore usage)
	       (cond ((or (constantp subform) (eql kind 'lt:quote))
		      (values subform 't))
		     ((cdr (assoc subform mappings)))
		     ((and (symbolp subform) (null (symbol-package subform)))
		      (values (create-new-temp subform) 't))
		     ((and (listp subform)
			   (member (car subform)
				   '(collect collect-component collect-for-value)))
		      (values
			(list* (car subform) (canonicalize-type-entry (second subform))
			       (loop for form in (cddr subform)
				     collect (canonicalize-random-code form)))
			't))
		     ((and (listp subform)
			   (eql (car subform) 'with-collector))
		      (values
			(list* (car subform)
			       (list
				 (canonicalize-type-entry (car (second subform)))
				 (loop for form in (cdadr subform)
				       collect (canonicalize-random-code form)))
			       (loop for form in (cddr subform)
				     collect (canonicalize-random-code form)))
			't))
		      (t subform)))
	   code))
       (recombine-description (description)
	 (if (nested-parsed-collector-description description)
	     (cons
	       (cons (canonicalize-type-entry (caar description))
		     (fixup-arg-list (cdar description)))
	       (loop for sub-description in (cdr description)
		     collect (recombine-description sub-description)))
	     (if (eql (first (car description)) (get-collector-type 'lisp-escape))
		 (cons (canonicalize-type-entry (car description))
		       (canonicalize-random-code (second description)))
		 (cons (canonicalize-type-entry (car description))
		       (fixup-arg-list (cdr description)))))))
      (let ((new-lambda-list (loop for arg in lambda-list
				   collect
				     (if (or (constantp arg)
					     (member arg si:lambda-list-keywords))
					 arg
					 (ncons (create-new-arg arg))))))
	(list new-lambda-list
	      (loop for description in descriptions
		    collect (recombine-description description)))))))



;;;
;;; component-descriptions

;; valid component-description

(defun valid-component-description (desc &optional error-p)
  (loop with names
	for (name type . args) in desc
	always
	  (and (or (symbolp name)
		   (when error-p
		     (error "~S must be a valid component name" name)))
	       (or (symbolp type)
		   (typep type 'basic-collector-type)
		   (when error-p
		     (error "~S must be a valid collector type" type)))
	       (if (member name names)
		   (when error-p
		     (error "The name ~S appears twice as the name of a component" name))
		   (push name names))
	       (let ((component (member :component-description args)))
		 (or (not component)
		     (valid-component-description (second component) error-p))))))

(defun collector-component-lessp (comp1 comp2 &key (descendants #'third) (type #'second) args)
  (let ((ct1 (funcall type comp1))
	(ct2 (funcall type comp2)))
    (or (collector-type-lessp  ct1 ct2)
	(and (eql ct1 ct2)
	     (or (dictionary-order-lessp
		   (funcall descendants comp1)
		   (funcall descendants comp2)
		   :predicate
		   #'(lambda (arg1 arg2)
		       (collector-component-lessp
			 arg1 arg2 :descendants descendants :type type :args args)))
		 (and args
		      (< (length (funcall args comp1)) (length (funcall args comp2)))))))))

(defun sort-component-description (component-desc)
  (sort component-desc
	#'(lambda (arg1 arg2)
	    (collector-component-lessp
	      arg1 arg2
	      :type #'(lambda (entry) (get-collector-type (second entry) 't))
	      :descendants #'(lambda (entry)
			       (second (member :component-description (cddr entry))))
	      :args #'cddr))))

;; converts it to an ordered list of the form ((type . init-options) (type . init-options))
(defun canonicalize-component-description (component-desc)
  (loop for (name type . args) in (sort-component-description component-desc)
	collect `(,(get-collector-type type 't)
		  ,@(let ((descendants (member :component-description args)))
		      (if descendants
			  (append (list :component-description
					(canonicalize-component-description
					  (second descendants)))
				  (delete (second descendants)
					  (remove :component-description args)))
			  args)))))

(defun canonicalized-component-description-equal (template-1 template-2)
  (and (= (length template-1) (length template-2))
       (loop for (type1 . args1) in template-1
	     for (type2 . args2) in template-2
	     always (let ((descendants1? (first args1))
			  (descendants2? (first args2)))
		      (and (eql descendants1? descendants2?)
			   (if (eql descendants1? :component-description)
			       ;; if it is hierarchical, we don't care about the
			       ;; top level, just about the components.
			       (canonicalized-component-description-equal
				 (second args1) (second args2))
			       (or (subtypep type1 type2)
				   (subtypep type2 type1))))))))

;; converts it to an ordered-list of the form ((name type . init-options) ...)
(defun normalize-component-description (component-desc)
  (loop for (name type . args) in (sort-component-description component-desc)
	collect `(,name
		  ,type
		  ,@(let ((descendants (member :component-description args)))
		      (if descendants
			  (append (list :component-description
					(normalize-component-description
					  (second descendants)))
				  (delete (second descendants)
					  (remove :component-description args)))
			  args)))))

(defun order-component-description (component-desc)
  (loop for (name type . args) in (sort-component-description component-desc)
	collect
	  `(,name
	    ,(get-collector-type type)
	    ,@(let ((descendants (member :component-description args)))
		(when descendants
		  (ncons (order-component-description (second descendants))))))))

(defun find-slot-in-component-description (name specification &optional error-p)
  (or (find name specification :key #'car)
      (when (= 1 (count name specification :key #'second))
	(find name specification :key #'second))
      (when (= 1 (count (get-collector-type name) specification :key #'second))
	(find (get-collector-type name) specification :key #'second))
      (when (member name specification :key #'second)
	(and error-p
	     (error "~S is ambigous; it might refer to ~S or ~S"
		    name (find name specification :key #'second)
		    (find name specification :key #'second :from-end 't))))
      (and error-p
	   (error "~S does not refer to a slot in ~S" name specification))))

(defun compatible-collector-description? (component-desc arg-desc)
  (flet ((find-descendants (specification)
	   (third specification)))
    (loop for component in component-desc
	  always
	    (if (atom component)
		(find-slot-in-component-description component arg-desc)
		(let ((collector (car component)))
		  (if (listp collector)
		      (let* ((valid-spec (find-slot-in-component-description
					   (car collector) arg-desc))
			     (new-spec (find-descendants valid-spec)))
			(when (and valid-spec new-spec)
			  (compatible-collector-description? (cdr component) new-spec)))
		      (find-slot-in-component-description collector arg-desc)))))))

;; takes the component-description and the template for a *single* component, and 
;; recursively combines them to return a description acceptable to :COMPONENT-DESCRIPTION 
;; to MAKE-DATA-COLLECTOR
(defun combine-component-description (description template)
  (let ((args (cdr template)))
    (if (> (length description) 2)
	`(:component-description
	   ,(loop for component in (second args)
		  for descript in (third description)
		  collect `(,(first descript)
			    ,(collector-type-name (car template))
			    ,@(combine-component-description descript component)))
	   ,@(cddr args))
	args)))

(defun get-collector-init-options (collector &optional component-descriptor)
  (let ((options (collector-init-options collector)))
    (if component-descriptor
	(if (typep collector 'complex-collector-mixin)
	    (labels ((find-component-in-template (name description template)
		       (let* ((id (if (listp name) (car name) name))
			      (descendants (if (listp name) (cdr name) nil))
			      (index (position id description :key #'car)))
			 (if index
			     (if (null descendants)
				 (combine-component-description (nth index description)
								(nth index template))
				 (find-component-in-template
				   descendants
				   (third (nth index description))
				   (second
				     (member :component-description
					     (nth index template)))))
			     (error "Slot ~A not found in ~A" name description)))))
	      (find-component-in-template component-descriptor
					  (collector-component-description collector)
					  (collector-template collector)))
	    (error "A simple collector cannot have any components"))
	options)))

