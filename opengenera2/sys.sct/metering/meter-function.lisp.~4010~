;;; -*- Package: METERING; Base: 10; Mode: LISP; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(setq *control-metered-functions*
      (make-instance 'basic-control :name "Metered Functions"
		     :keep 't))

(defresource function-metering-regions ()
  :constructor (make-instance
		 'metering-region 
		 :name ""
		 :control nil
		 :description "meter around a function"
		 :type 'function
		 :variable-name nil
		 :values '(frame-pointer function arglist values aborted-p)
		 :initial-values '(frame-pointer function arglist)
		 :value-types `(metering-stack-frame-pointer
				 metering-function
				 (sequence sys:expression)
				 (sequence sys:expression)
				 boolean))
  :initializer (progn
		 (control-trigger nil object)
		 (clear-trigger object))
  :deinitializer (progn
		   (control-trigger nil object)
		   (clear-trigger object)))

(defresource function-metering-restricted-regions ()
  :constructor (make-instance
		 'restricted-metering-region 
		 :name ""
		 :control nil
		 :description "meter around a function"
		 :type 'function
		 :variable-name nil
		 :values '(frame-pointer function arglist values aborted-p)
		 :initial-values '(frame-pointer function arglist)
		 :value-types `(metering-stack-frame-pointer
				 metering-function
				 (sequence sys:expression)
				 (sequence sys:expression)
				 boolean))
  :initializer (progn
		 (control-trigger nil object)
		 (clear-trigger object))
  :deinitializer (progn
		   (control-trigger nil object)
		   (clear-trigger object)))

(add-initialization 'setup-controls-for-metering-wired-functions
		    '(setq *wired-metering-control*
			   (or *wired-metering-control*
			       (let ((array
				       (make-array 10 :fill-pointer 0 :area wired-metering-area)))
				 (si:wire-structure array)
				 array)))
		    ()
		    '*metering-initializations*)

(defun make-control-on-function (trigger-offset-list)
  (flet ((turn-control-on (ignore)
	   (setf (aref *wired-metering-control*
		       (car trigger-offset-list))
		 't)))
    (macrolet ((fork-closure (closure)
		 (make-closure-wirable-if-needed 't closure)))
      (fork-closure #'turn-control-on))))

(defun make-control-off-function (trigger-offset-list)
  (flet ((turn-control-off (ignore)
	   (setf (aref *wired-metering-control*
		       (car trigger-offset-list))
		 nil)))
    (macrolet ((fork-closure (closure)
		 (make-closure-wirable-if-needed 't closure)))
      (fork-closure #'turn-control-off))))

(defresource function-metering-wired-regions ()
  :constructor
  (progn
    (when ( (fill-pointer *wired-metering-control*)
	     (array-total-size *wired-metering-control*) )
      (cerror "Increase limit by 5"
	      "The current (arbitrary) limit for simultaneously wired metering functions is ~D. This exceeds that limit."
	      (array-total-size *wired-metering-control*))
      (adjust-array *wired-metering-control*
		    (+ 5 (array-total-size *wired-metering-control*))
		    :initial-element nil))
    (let* ((placeholder (ncons nil))
	   (trigger
	     (make-instance
	       'wired-metering-region
	       :name ""
	       :control nil
	       :description "meter around a function"
	       :type 'function
	       :variable-name nil
	       :values '(frame-pointer function arglist values)
	       :initial-values '(frame-pointer function arglist)
	       :value-types `(metering-stack-frame-pointer
			       metering-function
			       (sequence sys:expression)
			       (sequence sys:expression))
	       :turn-control-on (make-control-on-function placeholder)
	       :turn-control-off (make-control-off-function placeholder)
	       :control-variable (prog1 (fill-pointer *wired-metering-control*)
					(vector-push nil *wired-metering-control*))
	       :area wired-metering-area)))
      (setf (car placeholder) (trigger-control-variable trigger))
      (si:wire-structure trigger)
      trigger))
  :initializer (progn
		 (clear-trigger object)
		 (control-trigger nil object))
  :deinitializer (progn
		   (clear-trigger object)
		   (control-trigger nil object)))

(register-trigger-constructor
  'meter-function
  'meter-function
  `((function . (sys:function-spec "Function to be metered")))
  't)
