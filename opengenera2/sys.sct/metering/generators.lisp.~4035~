;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;;; generators.

(defflavor identity-generator-value
	()
	(non-computable-generator-value))

(defmethod (generator-value-name identity-generator-value) ()
  (or name
      (let* ((args (generator-value-args generator-value))
	     (parent-name (if (and (listp args) (car args) (atom (car args)))
			      (car args)
			      'identity)))
	(specific-name self parent-name))))

(defmethod (presentation-type identity-generator-value) ()
  (let ((args (generator-value-args generator-value))
	(trigger (generator-value-trigger generator-value)))
    (if (and trigger (listp args) (car args) (atom (car args)))
	(get-presentation-type trigger (car args))
	'sys:expression)))

(defflavor computation-generator-value-mixin
	((type nil)
	 (computation-name nil))
	(generator-value-instance)
  :initable-instance-variables)

(defflavor computable-computation-generator-value
	()
	(computation-generator-value-mixin computable-generator-value))

(defflavor non-computable-computation-generator-value
	()
	(computation-generator-value-mixin non-computable-generator-value))

(defwhopper (copy computation-generator-value-mixin) ()
  (let ((new-copy (continue-whopper)))
    (si:set-in-instance new-copy 'type type)
    (si:set-in-instance new-copy 'computation-name computation-name)
    new-copy))

(defmethod (generator-value-name computation-generator-value-mixin) ()
  (or name
      (let* ((args (generator-value-args generator-value))
	     (parent-name
	       (if (and (listp args) (second args) (atom (second args)))
		   (second args)
		   (labels ((find-first-atom (form level)
			      (when (plusp level)
				(if (atom form)
				    form
				    (find-first-atom (car form) (1- level))))))
		     (or (and (first args) (find-first-atom (first args) 3))
			 'computation)))))
	(specific-name self parent-name))))

(defmethod (presentation-type computation-generator-value-mixin) ()
  (unless type
    (setf type (or (third (generator-value-args generator-value))
		   ;; fourth, not third, because &OPTIONAL is an elt of the lambda-list.
		   (second (fourth (generator-lambda-list
				     (generator-value-generator generator-value)))))))
  (or (fourth (generator-value-args generator-value))
      (and type (generator-type-presentation-type
		  (get-generator-type type)))
      'sys:expression))

(defun find-computation-generator-computation-type (generator-value)
  (if (change-computable?
	(get-generator-type
	  (or (third (generator-value-args generator-value))
	      ;; fourth, not third, because &OPTIONAL is an elt of the lambda-list.
	      (second (fourth (generator-lambda-list
				(generator-value-generator generator-value)))))))
      'computable-computation-generator-value
      'non-computable-computation-generator-value))

(defgenerator (identity values :values (value)
			:argument-types ((value sys:expression "Any value" :value))
			:description "yields its argument"
			:special-type identity-generator-value
			:wirable 't)
  value)

(defgenerator (computation values :values (form
					    &optional
					    (name 'computation)
					    (generator-type :values)
					    type)
			   :argument-types ((form sys:expression
						  "Arbitrary Lisp expression"
						  :either)
					    (name symbol
						  "Name of the computation"
						  :constant)
					    (generator-type generator-type
							    "Type of computation"
							    :constant)
					    (type dw:presentation-type
						  "Presentation-type of the result"
						  :either))
			   :special-type find-computation-generator-computation-type
			   :wirable 't
			   :description "value produced by arbitrary lisp form")
  (ignore name type generator-type)
  form)

(register-flavor-class-variables
  'identity-generator-value
  (make-instance 'identity-generator-value
		 :generator-value nil))

(register-flavor-class-variables
  'computable-computation-generator-value
  (make-instance 'computable-computation-generator-value
		 :generator-value nil))

(register-flavor-class-variables
  'non-computable-computation-generator-value
  (make-instance 'non-computable-computation-generator-value
		 :generator-value nil))

(defgenerator (real-time-in-useconds time :time ()
				     :description "real time in micro-seconds"
				     :wirable 't)
  (si:fixnum-microsecond-time-for-scheduler))

;; In any generator function, .first-realtime. is defined to be the value of
;; sys:%microsecond-clock at the earliest possible time on entry to the metering 
;; code.  Read it once, and invalidate it.
(defgenerator (real-time time :internal-time ()
			 :description "real time in microseconds"
			 :overhead ((if #+3600 (si:%auxiliary-stack-p) #+IMACH nil
					metering:%aux-stack-metering-overhead
					(if process::*in-process-dispatcher*
					    si:*scheduler-metering-overhead*
					    process::*current-process-metering-overhead*)))
			 :wirable t)
  (or .first-realtime. (sys:%microsecond-clock)))

;;; this should also use the .FIRST-REALTIME. hack, but only one generator can use it at a 
;;; time now, because of bogosity in the code.
;;; The overhead here is completely bogus when there is a process-switch during metering.
;;; To-be-fixed eventually.  
(defgenerator (process-run-time time :internal-time
				(&optional (process '*current-process*))
				:description "cpu microseconds in process")
  `(without-interrupts
     (if (eql ,process process::%real-current-process)
	 (if process::*in-process-dispatcher*
	     (or .first-realtime. (sys:%microsecond-clock))
	     (sys:%32-bit-plus
	       ;; catch a process-switch in between reading the %microsecond-clock and
	       ;; looking at last-microsecond-time-run.  Can't happen now, but can
	       ;; happen when we use .FIRST-REALTIME.
	       (max (sys:%32-bit-difference
		      (or .first-realtime. (sys:%microsecond-clock))
		      (si:process-microsecond-time-scheduled process::%real-current-process))
		    0)
	       (si:process-process-usecond-time-1 process::%real-current-process)))
	 (si:process-process-usecond-time-1 ,process))))

;;?
;;(defgenerator (real-time-in-milliseconds time :time ()
;;					 :description "real time in micro-seconds")
;;  (si:millisecond-time))

(defgenerator (current-process values :values () :presentation-type si:process :wirable t)
  si:*current-process*)

;; trigger: actual-function => meter => gen-func
;; metering-interval : function => trap => meter => gen-func
;; metering-region In preamble or conclusion???
(defun get-frame-pointer ()
  (case *generator-function-type*
    (trigger
      #+3600
      `(sys:frame-previous-frame (si:%stack-frame-pointer))
      #+IMACH
      `(SI:%POINTER-PLUS
		    (SI:%STACK-FRAME-POINTER)
		    (- (LDB SI:%%CR.CALLER-FRAME-SIZE
			    (SI:%READ-INTERNAL-REGISTER SI:%REGISTER-CONTROL-REGISTER)))))
    (metering-interval
      #+3600
      `(sys:frame-previous-frame
	 (sys:frame-previous-frame
	   (sys:frame-previous-frame
	     (si:%stack-frame-pointer))))
      #+IMACH
      `(LET* ((PFP (SI:%POINTER-PLUS
		     (SI:%STACK-FRAME-POINTER)
		     (- (LDB SI:%%CR.CALLER-FRAME-SIZE
			     (SI:%READ-INTERNAL-REGISTER SI:%REGISTER-CONTROL-REGISTER)))))
	      (PPFP
		(SI:%POINTER-PLUS
		  PFP
		  (- (LDB SI:%%CR.CALLER-FRAME-SIZE
			  (SI:FRAME-CALLER-CONTROL-REGISTER (SI:%STACK-FRAME-POINTER)))))))
	 (SI:%POINTER-PLUS PPFP
			   (- (LDB SI:%%CR.CALLER-FRAME-SIZE
				   (SI:FRAME-CALLER-CONTROL-REGISTER PFP))))))
    (t
      (error
	"can't automatically determine FP of metering-region.  To be fixed soon."))))

(defgenerator (caller stack-frames :values
		      (&optional (fp (get-frame-pointer))
				 (nth-caller 1))
		      :description "get caller of current frame"
		      :argument-types
		      ((fp metering-stack-frame-pointer "Frame pointer" :value)
		       (nth-caller integer "Number of stack frames" :constant))
		      :presentation-type metering-function)
  (setq fp (or fp (get-frame-pointer)))
  #+3600
  ;; new, simpler version
  (if (= nth-caller 1)
      `(dbg:frame-function (dbg:frame-previous-frame ,fp))
      `(loop with frame = ,fp
	     repeat ,nth-caller
	     while frame do
	 (setf frame (sys:frame-previous-frame frame))
	     finally (return (when frame (sys:frame-function frame)))))
  #+imach
  (if (= nth-caller 1)
      ;; eventually we can optimize this more.
      `(dbg:frame-function (dbg:frame-previous-frame ,fp))
      `(let ((count nil)
	     (old-fp ,fp))
	 (block calling-function
	   (dbg:map-over-frames-in-stack
	     si:%current-stack-group
	     #'(lambda (fp ignore function)
		 (when (and (not count)
			    (eql fp old-fp))
		   (setf count 0))
		 (when count
		   (when (= count ,nth-caller)
		     (return-from calling-function function))
		   (incf count))))))))

(defgenerator (page-faults paging :integer ())
  si:*count-page-fetches*)

(defgenerator (page-fault-disk-time paging :integer ()
				    :presentation-type metering-milliseconds
				    :description
				    "number of milliseconds spent handling page faults")
  si:*ms-time-page-fault*)

(defgenerator (process-page-faults paging :integer
				   (&optional (process '*current-process*)))
  `(process:process-page-fault-count ,process))

(defgenerator (process-page-fault-disk-time
		paging :integer
		(&optional (process '*current-process*))
		:presentation-type metering-milliseconds
		:description
		"number of milliseconds spent handling page faults in PROCESS")
  ;; use low, so it doesn't cons
  `(process::process-disk-wait-time-low ,process))

(defgenerator (total-consing consing :integer ())
  (si:without-interrupts
    (+ si:total-cons-work-done
       (- si:*cons-work-done* (si:%structure-cache-length) (si:%list-cache-length)))))

(defgenerator (function stack-frames :values (&optional (fp (get-frame-pointer)))
			:description "get function of current-frame"
			:argument-types ((fp metering-stack-frame-pointer
					     "Frame pointer"
					     :value))
			:presentation-type metering-function)
  `(dbg:frame-function ,fp))

;; need to make this *much* better!
(defvar *metering-stack-frames-to-ignore*
	'(#'(flavor:method meter trigger)
	  #'(flavor:method meter metering-region)
	  #'(flavor:method meter metering-interval)
	  #'(flavor:method meter-begin metering-interval)
	  #'(flavor:method meter-end metering-interval)
	  #'metering:funcall-in-region
	  #'metering:apply-in-region))

#+3600
(defgenerator (stack-trace stack-frames :values
			   (&optional (frame-pointer (get-frame-pointer))
				      (nframes 3))
			   :description "Get a stack trace going back NFRAMES"
			   :argument-types ((frame-pointer metering-stack-frame-pointer
							   "Frame pointer"
							   :value)
					    (nframes integer
						     "Number of frames"
						     :constant))
			   :presentation-type metering-stack-trace
			   :temporary-data 't)
  (setq frame-pointer (or frame-pointer (get-frame-pointer)))
  `(loop with count = 0
	 with trace = (si:make-stack-array ,nframes :fill-pointer 0 :type 'sys:art-q-list)
	 for fp = ,frame-pointer then (sys:frame-previous-frame fp)
	 while ,(if nframes
		    `(and fp (or (null ,nframes) (< count ,nframes)))
		    'fp)
	 as fn = (sys:frame-function fp)
	 when (not (assoc 'dbg:error-reporter (debugging-info fn)))
	   do (progn (incf count) (vector-push fn trace))
	 finally (return (g-l-p trace))))

#+imach
(defgenerator (stack-trace stack-frames :values
			   (&optional (frame-pointer (get-frame-pointer))
				      (nframes 3))
			   :description "Get a stack trace going back NFRAMES"
			   :argument-types ((frame-pointer metering-stack-frame-pointer
							   "Frame pointer"
							   :value)
					    (nframes integer
						     "Number of frames"
						     :constant))
			   :presentation-type metering-stack-trace
			   :temporary-data 't)
  (setq frame-pointer (or frame-pointer (get-frame-pointer)))
  `(let ((count 0)
	 (trace (si:make-stack-array ,nframes :fill-pointer 0 :type 'sys:art-q-list))
	 (start-frame ,frame-pointer)
	 (start-frame-seen nil))
     (block stack-trace
       (dbg:map-over-frames-in-stack
	 si:%current-stack-group
	 #'(lambda (fp ignore fn)
	     (ignore fp)
	     (cond
	       (start-frame-seen
		(when ( count ,nframes)
		  (return-from stack-trace))
		(when (not (assoc 'dbg:error-reporter (debugging-info fn)))
		  (progn (incf count) (vector-push fn trace))))
	       (t (when (eql fp start-frame) (setq start-frame-seen t)))))))
       (g-l-p trace)))
