;;; -*- Mode: LISP; Package: METERING; Base: 10; Syntax: Common-lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *lost-regions* nil)
(defvar *lost-controls* nil)

(defun check-consistency (&optional (fixup :ask) (verbose 't))
  (trace-from-triggers fixup verbose)
  (trace-from-regions fixup verbose)
;  (trace-from-encapsulated-functions fixup verbose)
;  (trace-from-controls fixup verbose)
; (trace-from-processes fixup verbose)
  #|  (loop for region in *lost-regions* do ())|#
  (format t "~&Lost regions: ~S" *lost-regions*))

(defun display-problem (verbose format-ctl-string &rest format-args)
  (when verbose
    (format t "~&")
    (apply #'format t format-ctl-string format-args)))

(defun determine-action (fixup course-of-action)
  (if (eq fixup :ask)
      (y-or-n-p course-of-action)
      (when fixup
	(format t "~&")
	(format t course-of-action))
      fixup))

(defun verify-trigger (trigger)
  (declare (values valid legal suggested-alternative))
  (if (typep trigger 'basic-trigger)
      (let ((alternate-trigger (or (and
				     (eq (trigger-type trigger) 'function)
				     (ignore-errors
				       (parse-trigger `(:function ,(trigger-name trigger)))))
				   (ignore-errors
				     (parse-trigger (trigger-name trigger))))))
	(values (eq trigger alternate-trigger) 't alternate-trigger))
      (values nil nil nil)))

(defun verify-region (region)
  (declare (values valid legal suggested-alternative))
  (if (typep region 'region)
      (let ((alternate-region (region-registered? region)))
	(values (eq alternate-region region) 't alternate-region))
      (values nil nil nil)))

(defun verify-control (control)
  (declare (values valid legal suggested-alternative))
  (if (typep control 'basic-control)
      (let ((alternate (ignore-errors (parse-control (control-name control)))))
	(values (eq alternate control) 't alternate))
      (values nil nil nil)))

(defun trace-from-triggers (fixup verbose)
  (map-over-all-triggers
    #'(lambda (name trigger type)
	(trace-from-trigger name trigger type fixup verbose 't))))

(defun trace-from-trigger (name trigger type fixup verbose confidence)
  (declare (values valid suggested-alternative))
  (ignore confidence)
  (flet ((complain (ctl-string &rest format-args)
	   (apply #'display-problem verbose ctl-string format-args)))
    (macrolet ((attempt (course-of-action &body body)
		 `(if (determine-action fixup ,course-of-action)
		      (prog1 't ,@body)
		      nil)))
      (when (typep trigger 'metering-region)
	(let ((region (trigger-active-region trigger)))
	  (when region
	    (if (eq trigger (region-inner-region region))
		(unless (and (null (region-within-region region))
			     (null (region-within-process region)))
		  (complain
		    "Trigger ~s points to a restricted active region ~S" trigger region))
		(complain "Trigger ~s points to active region ~S, which does not point back to this trigger"
			  trigger region)
		(attempt "Clear trigger's pointer to active region"
			 (setf (trigger-active-region trigger) nil)))))
	(let ((region (trigger-active-region trigger)))
	  (when region
	    (multiple-value-bind (valid legal alternate)
		(verify-region region)
	      (macrolet ((replace-region (new-region)
			   `(progn
			      (pushnew region *lost-regions*)
			      (setf (trigger-active-region trigger) ,new-region)
			      (setq region ,new-region))))
		(unless valid
		  (if legal
		      (progn
			(complain
			  "Trigger ~S points to an unregistered region, ~S" trigger region)
			(if alternate
			    (attempt
			      (format nil "replace it with ~S, which is registered" alternate)
			      (replace-region alternate))
			    (or (attempt "register region"
					 (setf (gethash (list (region-inner-region region)
							      (region-within-process region)
							      (region-within-region region))
							active-regions)
					       region)
					 (trace-from-region region fixup verbose nil))
				(attempt "Clear trigger's pointer to active region"
					 (replace-region nil)))))
		      (progn
			(complain "Trigger ~S points to an invalid region, ~S" trigger region)
			(attempt "Clear trigger's pointer to active region"
				 (replace-region nil)))))))
	  (when (and region (eq type 'function))
	    (let ((descriptor
		    (car (member trigger *encapsulated-functions* :key #'second))))
	      (multiple-value-bind (trigger-2 name types)
		  (find-encapsulated-function-trigger name)
		(when (neq trigger trigger-2)
		  (when trigger-2
		    (complain
		      "If you try to PARSE-TRIGGER the description of ~S you get ~S"
		      trigger trigger-2))
		  (setq types (and descriptor (third descriptor))))
		(when (not (member 'region types))
		  (complain
		    "Trigger ~S points to an active region, but function ~S is only encapsulated for ~S"
		    trigger name types)
		  (or (attempt "encapsulate it for region, also"
			       (change-encapsulated-function-types
				 name (cons 'region types))
			       (encapsulate-function name trigger (cons 'region types)))
		      (attempt "Clear trigger's pointer to active region"
			       (setf (trigger-active-region trigger) nil)
			       (pushnew region *lost-regions*)))))))
	  (when (and region (not (verify-region region)))
	    (trace-from-region region fixup verbose nil)))))

      (let ((control (trigger-control trigger)))
	(when control
	  (multiple-value-bind (valid legal alternate)
	      (verify-control control)
	    (unless valid
	      (if legal
		  (when alternate
		    (complain "The control for ~S is ~S, which is not a known control."
			      trigger control)
		    (attempt
		      (format nil "Replace with ~S, a known control with the same name."
			      alternate)
		      (control-trigger alternate trigger)
		      (pushnew control *lost-controls*)
		      (setf control alternate)))
		  (complain "The control for ~S is ~S, which is not a legal control."
			    trigger control)
		  (attempt "Remove the control from the trigger."
			   (control-trigger nil trigger)
			   (setf control nil)))))
	  (when (and control
		     (multiple-value-bind (ignore legal) (verify-control control) legal))
	    (unless (controls-trigger? control trigger)
	      (complain "~S believes it is controlled by ~S, which has no record of the trigger."
			trigger control)
	      (or (attempt "Update control to control trigger."
			   (control-trigger control trigger))
		  (attempt "Remove the control from the trigger."
			   (control-trigger nil trigger))))
	    (unless (verify-control control)
	      (trace-from-control control fixup verbose nil))))))))

(defun trace-from-regions (fixup verbose)
  (maphash
    #'(lambda (ignore region)
	(trace-from-region region fixup verbose 't))
    active-regions))

(defun trace-from-region (region fixup verbose confidence)
  (ignore region confidence fixup)
  (flet ((complain (ctl-string &rest format-args)
	   (apply #'display-problem verbose ctl-string format-args)))
    (macrolet ((attempt (course-of-action &body body)
		 `(if (determine-action fixup ,course-of-action)
		      (prog1 't
			     ,@body)
		      nil)))
      (ignore #'complain)
      )))

(defun trace-from-control (control fixup verbose confidence)
  (ignore control fixup verbose confidence)
  )

