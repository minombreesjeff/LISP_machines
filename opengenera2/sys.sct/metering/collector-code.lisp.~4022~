;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun get-collector-type-from-name (type-name)
  (modify-hash *collector-type-table*
	       type-name
	       #'(lambda (ignore value key-exists-p)
		   (if key-exists-p
		       value
		       (make-instance 'basic-collector-type :name type-name)))))

(defun get-collector-types ()
  (let ((types nil))
    (maphash #'(lambda (key type)
		 (unless (string-equal key "BASIC-COLLECTOR")
		   (pushnew type types)))
	     *collector-type-table*)
    types))

(defun get-collector-type (collector-or-type-name &optional error-p)
  (cond
    ((typep collector-or-type-name 'basic-collector-type) collector-or-type-name)
    ((typep collector-or-type-name 'basic-collector)
     ;; we know it is supposed to exist.
     (get-collector-type-from-name (type-of collector-or-type-name)))
    ((or (symbolp collector-or-type-name)
	 (stringp collector-or-type-name)
	 (characterp collector-or-type-name))
     (or (find-collector-type collector-or-type-name)
	 (and error-p
	      (error "Can't find collector type from ~S" collector-or-type-name))))
    (t (error "Can't find collector type from ~S" collector-or-type-name))))

(defun collector-type-lessp (ct1 ct2)
  (< (collector-type-uid ct1) (collector-type-uid ct2)))

(defun dictionary-order-lessp
       (list1 list2 &key (equality-predicate #'eql) (predicate #'<))
  (loop for elt1 in list1
	for elt2 in list2
	do (cond ((null elt1) (return 't))
		 ((null elt2) (return nil))
		 ((funcall predicate elt1 elt2) (return 't))
		 ((funcall equality-predicate elt1 elt2))
		 (t (return nil)))
	finally (return nil)))

(defun collector-descriptor-lessp (descriptor1 descriptor2 order-of-args)
  (flet ((predicate (arg1 arg2)
	   (collector-descriptor-lessp arg1 arg2 order-of-args))
	 (arg-order (arg1 arg2)
	   (if (eql arg1 arg2)
	       nil
	       (cond ((constantp arg1)
		      (or (not (constantp arg2))
			  (< (si:equal-hash arg1) (si:equal-hash arg2))))
		     ((constantp arg2) nil)
		     (t (loop for arg in order-of-args do
			  (cond ((eql arg arg1) (return 't))
				((eql arg arg2) (return nil)))
			      finally (< (si:equal-hash arg1) (si:equal-hash arg2))))
		     ((constantp arg2) nil)
		     (t (loop for arg in order-of-args do
			  (cond ((eql arg arg1) (return 't))
				((eql arg arg2) (return nil)))
			      finally (< (si:equal-hash arg1) (si:equal-hash arg2))))))))
    (let ((ct1 (get-collector-type-from-parsed-collector-description descriptor1))
	  (ct2 (get-collector-type-from-parsed-collector-description descriptor2)))
      (or (collector-type-lessp ct1 ct2)
	  (and (eql ct1 ct2)
	       (not (and (nested-parsed-collector-description descriptor2)
			 (not (nested-parsed-collector-description descriptor1))))
	       (or (and (nested-parsed-collector-description descriptor1)
			(not (nested-parsed-collector-description descriptor2)))
		   (if (nested-parsed-collector-description descriptor1)
		       (dictionary-order-lessp
			 descriptor1 descriptor2 :predicate #'predicate)
		       (dictionary-order-lessp
			 (get-arglist-from-parsed-collector-description descriptor1)
			 (get-arglist-from-parsed-collector-description descriptor2)
			 :predicate #'arg-order))))))))


(defun sort-collector-list (list-of-collectors order-of-args)
  ;; depth first sort of hierarchical collector descriptions.
  (sort (loop for descriptor in list-of-collectors
	      collect (if (nested-parsed-collector-description descriptor)
			  (cons (car descriptor)
				(sort-collector-list (cdr descriptor) order-of-args))
			  descriptor))
	#'(lambda (c1 c2) (collector-descriptor-lessp c1 c2 order-of-args))))

(defun test-canonicalization (description lambda-list)
  (let ((converted-description (loop for descript in description
				     collect (convert-collector-description descript))))
    (format t "~&Converted-description: ~S" converted-description)
    (let ((sorted-list (sort-collector-list converted-description lambda-list)))
      (format t "~&Sorted: ~S" sorted-list)
      (format t "~&Canonicalized: ~S" (canonicalize-description lambda-list sorted-list))
      (format t "~&Collector list: ~S" (get-list-of-collectors sorted-list)))))



;; takes a description of a collector function, and returns a function that takes
;; a list of instances of collectors and returns a collector-function.  Whew! Got that?

;; lambda-list 		will be the eventual lambda-list of the collector function.
;; collector-list	is a list of entries describing each collector that will be
;; 			used in the collector function.
;;			Each can be a collector descriptor.  See description above.
(defun make-collector-function (name lambda-list collector-descriptions
				&optional trigger-name wired)
  (let* ((collector-descriptions
	   (sort-collector-list
	     (loop for descript in collector-descriptions
		       collect (convert-collector-description descript))
	     lambda-list))
	 (collectors (get-list-of-collectors collector-descriptions))
	 (c-function (create-collector-function
		       name lambda-list collector-descriptions wired trigger-name))
	 (safely-wired nil))
    ;; return closure.
    (unwind-protect
	(progn
	  (when wired
	    (mapcar #'wire-for-aux-stack collectors))
	  (setf safely-wired 't))
      (unless safely-wired
	(loop for c in collectors do (ignore-errors (unwire c)))))
    (apply c-function (or trigger-name name) collectors)))

(defun arg-is-rest-arg? (arg)
  (and (listp arg) (eq (car arg) '&rest)))

(defun normalize-args (args rest-arg)
  (ignore rest-arg)
  args
  #+metering-arg-processing
  (if (null rest-arg)
      args
      (loop for arg in args
	    collect (if (eql arg (second rest-arg))
			`(&rest ,arg)
			arg))))

(defun normalize-code (description &optional (form :constant) wired)
  (labels
    ((basic-form (form type-description)
       (if (cdr type-description)
	   `(aref ,form ,(cdr type-description))
	   form))
     (get-collector-form (form type-description args for-value)
       (if wired
	   (get-form-to-collect-wired-data
	     type-description form :args args :for-value for-value)
	   (get-form-to-collect-data
	     type-description form :args args :for-value for-value)))
     (walk-code (forms &optional (form :constant))
       (let ((bindings nil)
	     (instances nil))
	 (flet ((convert (code-fragment)
		  (lt:copyforms
		    #'(lambda (subform kind usage)
			(ignore usage)
			(cond
			  ((or (constantp subform) (eql kind 'lt:quote))
			   (values subform 't))
			  ((and (listp subform)
				(eq (car subform) 'collect-component))
			   (if (eq form :constant)
			       (error "Tried to COLLECT-COMPONENT when not within a hierarchical collector")
			       (values (basic-form form (second subform)) 't)))
			  ((and (listp subform)
				(or (eq (car subform) 'collect)
				    (eq (car subform) 'collect-for-value)))
			   (multiple-value-bind (args ninstances nbindings)
			       (walk-code (cddr subform) form)
			     (setf instances (append instances ninstances))
			     (multiple-value-bind (new-form instance-name new-bindings)
				 (get-collector-form
				   (basic-form form (second subform))
				   (first (second subform))
				   args (eq (car subform) 'collect-for-value))
			       (push instance-name instances)
			       (setf bindings (append bindings nbindings new-bindings))
			       (values new-form 't))))
			  ((and (listp subform)
				(eq (car subform) 'with-collector))
			   (multiple-value-bind (args ninstances1 nbindings1)
			       (walk-code (cdadr subform) form)
			     (multiple-value-bind (components ninstances nbindings)
				 (walk-code (cdddr subform) 'components)
			       (setf instances (append instances ninstances1 ninstances))
			       (multiple-value-bind (new-form instance-name new-bindings)
				   (get-collector-form
				     (basic-form form (second subform))
				     (first (second subform))
				     args 't)
				 (push instance-name instances)
				 (setf bindings
				       (append bindings nbindings1 nbindings new-bindings))
				 (values `(let ((components ,new-form)) ,@components)
					 't)))))
			  (t subform)))
			code-fragment)))
	   (values
	     (loop for form in forms collect (convert form))
	     instances
	     bindings)))))
    (walk-code description form)))

;; split can be a single arg, the &rest arg, or a list of arguments
;; spread must be the &rest arg.  Therefore only one.

(defvar *collector-function-cache* (make-hash-table :test #'equal))

(defun-with-cache create-collector-function
		  (name lambda-list descriptions &optional wired trigger-name)
		  (*collector-function-cache* (list (not (null (or trigger-name name)))
						    (not (null wired))
						    (canonicalize-description
						      lambda-list descriptions)))
  (let ((rest-arg (member '&rest lambda-list))
	(name-for-use (gensym (if (or (stringp name) (and name (symbolp name)))
				  (string name)
				  "COLLECTOR-FUNCTION")))
	(collector-form
	  (if wired #'get-form-to-collect-wired-data #'get-form-to-collect-data)))
    (ignore trigger-name)
    (labels ((get-form-and-bindings (descriptor &optional (form :constant))
	       (let* ((hierarchical (not (atom (caar descriptor))))
		      (collector (if hierarchical (caar descriptor) (car descriptor)))
		      (call (if hierarchical (car descriptor) descriptor))
		      (type (car collector))
		      (slot-n (cdr collector))
		      (arg-bindings nil)
		      (args (loop for arg in (cdr call)
				  collect
				  (if (or (symbolp arg) (constantp arg))
				      arg
				      (let ((tempname (gentemp "COLLECTOR-ARG-")))
					(push (list tempname arg) arg-bindings)
					tempname))))
		      (form-1 (if (eq form ':constant)
				  ':constant
				  (if slot-n
				      `(aref ,form ,slot-n)
				      form))))
		 (if (not hierarchical)
		     (if (eql type (get-collector-type 'lisp-escape))
			 (normalize-code (cdr descriptor) form wired)
		       (multiple-value-bind (form instance bindings)
			   (funcall collector-form type form-1
				    :for-value nil
				    :args (normalize-args args rest-arg))
			 (values (list 'let arg-bindings form) instance bindings)))
		     (multiple-value-bind (form instance-name bindings)
			 (funcall collector-form type form-1
				  :for-value 't :args (normalize-args args rest-arg))
		       (values
			 (if (cdr descriptor)
			     `(let ,arg-bindings
				(let ((components ,form))
				 ,@(when (> (length (cdr descriptor)) 1)
				     '((declare (sys:array-register components))))
				 ,@(loop for component in (cdr descriptor)
					 collect
					   (get-form-and-bindings component 'components))))
			     (if arg-bindings
				 (list 'let arg-bindings form)
				 form))
			 instance-name
			 bindings))))))
      (loop with forms
	    with instances
	    with bindings = (and name-for-use `((name ,name-for-use)))
	    for d in (second (canonicalize-description nil descriptions))
	    do (multiple-value-bind (new-form instance-name new-bindings)
		   (get-form-and-bindings d)
		 (push new-form forms)
		 (if (listp instance-name)
		     (setf instances (append instance-name instances))
		     (push instance-name instances))
		 (setf bindings (append bindings new-bindings)))
	    finally
	      (return
		(let* ((collector-func-definition
			 `(flet ((collector-function ,lambda-list
				   ,@(when bindings
				       `((declare (compiler:evacuable-downward-closures))))
				   ,@(let ((args (loop for arg in lambda-list
						       unless (member arg si:lambda-list-keywords)
							 collect arg)))
				       (when args
					 `((ignore ,@args))))
				   ,@forms))
			    ,(make-closure-wirable-if-needed wired '#'collector-function)))
		       (collector-func-source-code
			 `(lambda ,(cons name-for-use (reverse instances))
			    (ignore ,name-for-use ,@instances)
			    ,(if bindings
				 `(let* ,bindings
				    ,@(and name-for-use '((ignore name)))
				    ,collector-func-definition)
				 collector-func-definition))))
		  (values
		    (prog1
		      (compile (or name (prog1 (gensym "COLLECTOR-FUNCTION") (gensym "G")))
			       collector-func-source-code)
		      (gensym "G"))
		    collector-func-source-code)))))))

(defvar *default-component-cache-size* 100.)
(defvar *component-constructor-to-cache-table* (make-hash-table :size 2))

;; a descriptor looks like (NAME TYPE (:COMPONENT-DESCRIPTION cd) ...)
(defun-with-cache create-component-constructor (description)
		  (nil (canonicalize-component-description description))
  (flet ((get-form (descriptor)
	   `(,@(or (let ((fun (get (second descriptor) 'make-collector)))
		     (and fun (ncons fun)))
		   ;; Known to be a valid collector, so MAKE-COMPONENT-COLLECTOR must exist.
		   `(make-instance ',(get (second descriptor) 'make-component-collector)))
	     ,@(loop for arg in (if (eq (third descriptor) :component-description)
				    (cddddr descriptor)
				    (cddr descriptor))
		     collect (if (constantp arg) arg `',arg))
	     ,@(when (eq (third descriptor) :component-description)
		 `(:make-component ,(create-component-constructor (fourth descriptor))))
	     ;; if we're consing components, then this isn't wirable.
	     :area metering-collector-area 
	     ;; and if we're wirable, the earlier :area keyword in the
	     ;; user-provided description will override the value we
	     ;; just put in at the end of the arglist.
	     :top-level nil)))
    (if (null description)
	(values #'ignore nil)
	(let* ((description (normalize-component-description description))
	       (form (if (= (length description) 1)
			 (get-form (car description))
			 `(let ((array (make-array ,(length description)
						   :area metering-collector-area)))
			    (declare (sys:array-register array))
			    ,@(loop for descriptor in description
				    for i from 0
				    collect
				      `(setf (aref array ,i)
					     ,(get-form descriptor)))
			    array))))
	  (values
	    (let ((constructor-name (gensym "COMPONENT-CONSTRUCTOR")))
	      (compile constructor-name
		       `(lambda ()
			  (let ((cache (make-array *default-component-cache-size*
						   :fill-pointer 0
						   :area metering-area)))
			    (flet ((constructor ()
				     (or (vector-pop cache nil)
					 (loop repeat *default-component-cache-size* do
					   (vector-push-extend (progn ,form) cache)
					       finally (return (vector-pop cache nil))))))
			      (values #'constructor cache)))))
	      (gensym "G")
	      (multiple-value-bind (constructor cache)
		  (funcall (fdefinition constructor-name))
		(setf (gethash constructor *component-constructor-to-cache-table*) cache)
		constructor))
	    form)))))

(defun parse-collector-function (collector-function-descriptor &key construct)
  (or (and (functionp collector-function-descriptor)
	   collector-function-descriptor)
      (and construct
	   (symbolp collector-function-descriptor)
	   (find-collector-type collector-function-descriptor)
	   (make-collector-function
	     nil
	     '(&rest args)
	     `((,(make-data-collector collector-function-descriptor) args))))
      (and (symbolp collector-function-descriptor)
	   (fdefinedp collector-function-descriptor)
	   (fdefinition collector-function-descriptor))))

