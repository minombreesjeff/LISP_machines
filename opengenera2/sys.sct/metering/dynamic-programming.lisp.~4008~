;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; funcall can be made with any old arguments, may need to be copied, 
;; may need to be canonicalized

(defun reset-function-cache (function-with-cache)
  (let* ((function-with-cache (fdefinition
				(si:unencapsulate-function-spec function-with-cache)))
	 (cache (ignore-errors (symbol-value-in-closure function-with-cache 'cache))))
    (if (and (si:lexical-closure-p function-with-cache)
	     cache)
	(clrhash cache)
	(error "~S is not a function with cached arguments.")))
  nil)

(defun get-function-cache (function-with-cache)
  (let* ((function-with-cache (fdefinition
				(si:unencapsulate-function-spec function-with-cache)))
	 (cache (ignore-errors (symbol-value-in-closure function-with-cache 'cache))))
    (if (and (si:lexical-closure-p function-with-cache)
	     cache)
	cache
	(error "~S is not a function with cached arguments."))))

(defun list-of-args-from-lambda-list (lambda-list)
  (labels ((get-args (lambda-list args)
	     (if (null lambda-list)
		 args
		 (let ((arg (car lambda-list)))
		   (if (member arg si:lambda-list-keywords)
		       (if (eq '&rest arg)
			   (get-args (cddr lambda-list)
				     (cons `(copy-list ,(cadr lambda-list)) args))
			   (get-args (cdr lambda-list) args))
		       (get-args (cdr lambda-list)
				 (cons (if (symbolp arg) arg (car arg)) args)))))))
    (reverse (get-args lambda-list nil))))

;; Come down hard on the SPACE side, of the space-time tradeoff.
(defmacro defun-with-cache (function-name lambda-list (hash-table-args hash-form) &body body)
  #+3600
  (eval-when (load)
    (when (fdefinedp function-name)
      (ignore-errors (reset-function-cache (fdefinition function-name)))))
  ;; our only default.  EQ is probably wrong.
  (let ((construct-hash-table (if (listp hash-table-args)
				  (progn
				    (unless (member :test hash-table-args)
				      (setf hash-table-args
					    (append '(:test #'equal) hash-table-args)))
				    `(make-hash-table ,@hash-table-args))
				  hash-table-args))
	(top-level-name (gensym)))
    `(progn
       (defun ,top-level-name ()
	 (flet ((cli::modify-hash (table key function) (cli::modify-hash table key function)))
	   (let ((cache ,construct-hash-table))
	     (labels ((,function-name ,lambda-list
		       (declare (compiler:evacuable-downward-closures))
		       (values-list
			 (cli::modify-hash cache
					   ,hash-form
					   #'(lambda (ignore value key-exists-p)
					       (if key-exists-p
						   value
						   (multiple-value-list (progn ,@body))))))))
	       #',function-name))))
	 (deff ,function-name (,top-level-name)))))

#||
(defun fibn (i) 
  (cond ((zerop i) 1)
	((= i 1) 1)
	(t (+ (fibn (- i 2)) (fibn (1- i))))))

(defun fibn1 (i)
  (cond ((zerop i) 1)
	((= i 1) 1)
	(t (let ((oldest 1)
		 (second-oldest 1))
	     (loop for n from 1 below i do
	       (let ((sum (+ oldest second-oldest)))
		 (setf oldest second-oldest)
		 (setf second-oldest sum))
	       finally (return second-oldest))))))

(defun-with-cache fibn2 (i) (nil i)
  (cond ((zerop i) 1)
	((= i 1) 1)
	(t (+ (fibn2 (- i 2)) (fibn2 (1- i))))))

(defun-with-cache construct-generator
		  (name generator-args generator-description generator-body)
		  (nil (list generator-args generator-description))
  (compile name generator-body))

(defun-with-cache Ackerman (x y) (nil (list x y))
  (cond ((zerop y) 0)
	((zerop x) (+ y y))
	((= y 1) 2)
	(t (let ((new-y (ackerman x (1- y))))
	     (Ackerman (1- x) new-y)))))
		     

||#

#||

;;; if modify-hash would let you modify the key, too, then we could have a more cons-ervative
;;; implementation -- i.e. it wouldn't cons on lookup.
(defmacro defun-with-cache (function-name lambda-list (hash-table-args hash-form) &body body) 
  (when (fdefinedp function-name)
    (ignore-errors (reset-function-cache (fdefinition function-name))))
  ;; our only default.  EQ is probably wrong.
  (unless (member :test hash-table-args)
    (setf hash-table-args (append '(:test #'equal) hash-table-args)))
  (let ((top-level-name (gensym)))
    `(progn
       (defun ,top-level-name ()
	 (let ((cache (make-hash-table ,@hash-table-args)))
	   (labels ((,function-name ,lambda-list
		     ;;	D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")Look, Ma, no consing!
0		     (stack-let ((args hash-form))
		       (cli::modify-hash cache
					 ,hash-form
					 #'(lambda (key value key-exists-p)
					     (declare (sys:downward-function))
					     (if key-exists-p
						 (values value key)
						 ;; 1Dad: except when necessary, son0.
						 (values (progn ,@body) ,hash-form)))))))
	     #',function-name)))
       (deff ,function-name (,top-level-name)))))

||#
