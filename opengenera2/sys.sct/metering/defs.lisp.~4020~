;;; -*- Mode: LISP; Syntax: Common-lisp; Package: METERING; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#||
;; moved to metering-definitions to be part of the SYSTEM system
(defvar wired-metering-area)
||#
(defvar metering-area)
(defvar metering-cons-area si:working-storage-area)
(make-area :name 'wired-metering-area :gc :static)
(make-area :name 'metering-area :gc :static)
(add-initialization 'make-areas
		    `(unless (and (variable-boundp metering-cons-area)
				  metering-cons-area
				  (eq (si:area-name metering-cons-area) 'metering-cons-area))
		       (setf metering-cons-area nil)
		       (make-area :name 'metering-cons-area :gc :ephemeral :n-levels 2))
		    ()
		    '*metering-enable-initializations*)
;; A fourth metering area.  Let's recap the conventions
;; WIRED-METERING-AREA: if something will be wired permanently, or it is wired at cons 
;;     time, then we allocate it in this area, to keep all wired objects as localized 
;;     as possible.  
;; METERING-AREA: if something might want to be wired, or wants to be wired temporarily,
;;     but isn't now, we allocate it in this area
;; METERING-CONS-AREA: in the (we hope rare) event that things are consed while metering,
;;     we cons them here because we want to interfere with working storage area as little
;;     as possible.
;; METERING-COLLECTOR-AREA: Like metering-cons-area but for long-lived objects.  
(defvar metering-collector-area (make-area :name 'metering-collector-area :gc :dynamic))

;; moved to sys:metering;metering-definitions.lisp so it can be in the System system
;(setf (get 'initial-values 'si:debug-info) 't)

;; See SYS:METERING;INITIALIZATIONS.LISP.NEWEST for an explanation of
;; these initialization-lists
(defvar *metering-initializations* nil)
(defvar *metering-warm-initializations* nil)
(defvar *metering-cold-initializations* nil)
(defvar *metering-load-initializations* nil)
(defvar *metering-enable-initializations* nil)

(setf (get '*metering-initializations* 'si:initialization-list) 't)
(setf (get '*metering-warm-initializations* 'si:initialization-list) 't)
(setf (get '*metering-cold-initializations* 'si:initialization-list) 't)
(setf (get '*metering-load-initializations* 'si:initialization-list) 't)
(setf (get '*metering-enable-initializations* 'si:initialization-list) 't)

;; these two have to be done before any other initializations, because if other code
;; sees *metering-system-is-loaded* non-null, then they assume that all triggers have
;; been instantiated.
(add-initialization 'loaded-p
		    '(setf *metering-system-is-loaded* 't)
		    ()
		    '*metering-load-initializations*)

(add-initialization "We're here"
		    `(progn
		       (with-triggering-events-consistent (instantiate-all-triggers)))
		    ()
		    '*metering-load-initializations*)

;; metering of any sort whatsoever only happens when metering:*metering-enabled* is 't
;(si:defwiredvar *metering-enabled* nil)
;; This was really defined in metering-cold.lisp

;; any metering done on the aux stack uses this for REAL-TIME overhead.
;(si:defwiredvar metering:%aux-stack-metering-overhead 0)

#||

;; all of these were moved to sys:metering;metering-definitions.lisp so it can be
;; in the System system

;; trigger management
(defvar *triggering-events* nil)
(defvar *triggering-events-synchronizer* nil)
(defvar *encapsulated-functions* nil)

||#
(defvar *metered-functions* nil)
(defvar *standard-controls* nil)

(defvar *control-metered-functions* nil)

(defvar *force-control-to-evaluate-scope* nil)
(defvar *function-fudge-factor-error* 0)
(defvar *function-caller-fudge-factor-error* 0)
(defvar *function-callee-fudge-factor-error* 0)

#||
(si:defwiredvar *enable-metering-on-function-calls* nil)
(si:defwiredvar *trigger-for-all-function-calls* nil)
(si:defwiredvar *enable-function-metering-during-scavenge* nil)
(si:defwiredvar *wired-metering-control* nil)

(defvar *metering-stack*)	;; bound in any process doing either exclusive, or 
				;; all-function-call metering

;; fudge factors for function call metering.
(defvar *function-entry-fudge-factor-1* 0)
(defvar *function-entry-fudge-factor-2* 0)
(defvar *function-exit-fudge-factor-1* 0)
(defvar *function-exit-fudge-factor-2* 0) 

(defvar *function-entry-fudge-fraction* 0)
(defvar *function-exit-fudge-fraction* 0)

(defvar *function-trap-fudge-denominator* 0)
||#
