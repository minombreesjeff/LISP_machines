;-*- Lowercase: Yes; Mode:LISP; Package:TAPE; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Tapex tapes are written at 1600 bpi.  Every record is 4096 bytes long.
;;; There are "logical files" separated by file marks.  A double file
;;; mark ends a tape.  Each logical file is a header record followed by
;;; as many records as it takes to express the bytes of the file.  The
;;; header record contains the file's "pathname", followed by a 200 octal
;;; character.  The rest of the header record is ignored.  The data of 
;;; each file starts at the beginning of the first record after the header
;;; record and continues until a 200 octal character, after which the
;;; remainder of the record containing it, and all records until the 
;;; next file mark are ignored.  

;;; The "pathname" is some description of the file.  There is no standard
;;; on how this is expressed.  The tapex program on the Lisp Machine
;;; queries for each file.  The file data is in (non-Lisp Machine)
;;; ASCII, which is to say tabs are octal 11, lines end in CR/LF (15/12)
;;; sequences.  There is no definition about how Lisp Machine extended
;;; characters are represented.  It cannot work for other than ASCII files.

(defconst *tapex-reclen* 4096.)
(defconst *tapex-chars* '(#O11 #O12 #O14 #O15 #O200 #O0))
(defvar *tapex-defaults* nil)

(defun tapex ()
  (selectq
    (fquery '(:choices (((:read "Read in a tapex tape") #/R)
			((:write "Write files to tape") #/W)
			((:list  "List the files on a tapex tape") #/L)))
	    "Read, Write, or List? ")
    (:read  (tapex-reader))
    (:list  (tapex-lister))
    (:write (tapex-writer))))


(defun tapex-reader ()
  (or *tapex-defaults* (setq *tapex-defaults* (fs:user-homedir)))
  (with-open-stream (stream (tape:make-stream ':record-length *tapex-reclen*))
    (do () (())
      (let ((path (make-array '100. ':type 'art-string ':leader-length 1)))
	(store-array-leader 0 path 0)
	
	(let ((c (send stream ':tyi)))
	  (if (null c) (return nil))
	  (array-push-extend path c))
	(loop for c = (send stream ':tyi)
	      until (= c 200)
	      do (array-push-extend path c))
	(send stream ':clear-input)
	(let ((pathname (prompt-and-read
			  `(:pathname-or-nil :default ,*tapex-defaults*)
			  "File ~A. New pathname? (” to SKIP this file)~%(default  ~A): "
			  path *tapex-defaults*)))
	  (when pathname
	    (with-open-file (outstr (setq *tapex-defaults* pathname) ':direction ':output)
	      (format t "~&Creating ~A." (send outstr ':truename))
	      (do () (())
		(multiple-value-bind (buf curx remaining)
		    (send stream ':get-input-buffer)
		  (if (null buf) (return nil))
		  (let ((interestx
			  ;; string-search-set would be fine, but our arg is not a string
			  (loop repeat remaining for i  upfrom curx
				for ch = (aref buf i)
				when (dolist (c *TAPEX-CHARS*) (if (= c ch) (return t)))
				return i)))
		    (cond (interestx		;found one
			   (unless (= curx interestx)
			     (send outstr ':string-out buf curx interestx))
			   (send stream ':advance-input-buffer interestx))
			  (t
			   (unless (zerop remaining)
			     (send outstr ':string-out buf curx (+ curx remaining)))
			   (send stream ':advance-input-buffer)))
		    (let ((c (send stream ':tyi)))
		      (if (or (null c) (= c 200) (= c 0))
			  (return))
		      (selectq c
			(#O15             ())	;throw away cr
			(#O12             (send outstr ':tyo #\CR))
			(#O14		  (send outstr ':tyo #\FORM))
			(#O11		  (send outstr ':tyo #\TAB))
			(t		  (send outstr ':tyo c)))))))))
	      (send stream ':skip-file))))))

(defconst *INVERSE-TAPEX-CHARS* '(#\TAB #\CR #\FORM))

;;; Remember that final eof is written by close op, not us.
(defun tapex-writer ()
  (or *tapex-defaults* (setq *tapex-defaults* (fs:user-homedir)))
  (with-open-stream (stream (tape:make-stream
			      ':direction ':output ':record-length *tapex-reclen*
			      ':pad-char #O200 ':minimum-record-length ':full))
    (do () (())
      (let ((pathname
	      (prompt-and-read `(:pathname-or-nil :default ,*tapex-defaults*)
			       "~&Filename? (” to end, default ~A) " *tapex-defaults*)))
	(unless pathname (return nil))
	(with-open-file (instr (setq *tapex-defaults* pathname))
	  (format t "~&Dumping ~A." (send instr ':truename))
	  (send stream ':string-out (send (send instr ':truename)
					  ':string-for-host))
	  (send stream ':tyo #O200)
	  (send stream ':force-output)		;end the record
	  (do () (())
	    (multiple-value-bind (buf curx remaining)
		(send instr ':get-input-buffer)
	      (if (null buf) (return nil))
	      (let ((interestx
		      (string-search-set *INVERSE-TAPEX-CHARS*
					 buf curx (+ curx remaining))))
		(cond ((null interestx)
		       (if (not (zerop remaining))
			   (send stream ':string-out buf curx (+ curx remaining)))
		       (send instr ':advance-input-buffer))
		      ;; found one
		      (t
		       (if (not (= curx interestx))
			   (send stream ':string-out buf curx interestx))
		       (send instr ':advance-input-buffer interestx)))
		
		(let ((c (send instr ':tyi)))
		  (if (null c) (return))
		  (selectq c
		    (#\CR             (send stream ':tyo #O15)
				      (send stream ':tyo #O12))
		    (#\TAB	      (send stream ':tyo #O11))
		    (#\FORM           (send stream ':tyo #O14))
		    (t		      (send stream ':tyo c)))))))
	  (send stream ':tyo #O200)
	  (send stream ':eof))))))


(defun tapex-lister ()
  (with-open-stream (stream (tape:make-stream ':record-length *tapex-reclen*))
    (do ((path (make-array '100. ':type 'art-string ':leader-list '(0)))) (nil)
      (store-array-leader 0 path 0)		;have to do each time
      (let ((c (funcall stream ':tyi)))
	(if (null c) (return nil))
	(array-push-extend path c))
      (loop for c = (send stream ':tyi)
	    until (= c 200)
	    do (array-push-extend path c))
      (funcall stream ':clear-input)
      (format t "~&~A" path)
      (funcall stream ':skip-file))))

(defun read-lmi-tape (&optional root-node load-all skip-until &aux (eofob (ncons ':eof)))
  "Root-node is a pathname, if given, all loaded will be tree-subappended to.
load-all says don't even ask to load.
Skip-until is an LMI directory as list structure.  It will skip all until it gets there."
  (if root-node
      (setq root-node (fs:parse-pathname root-node)))
  (with-open-stream (stream (tape:make-stream :record-length *tapex-reclen*))
    (let ((path-default (or root-node (fs:user-homedir)))
	  (last-dir nil)
	  (load-this-dir nil)
	  (load-this-dir-auto nil))
      (do () (())
	(let ((what (let ((package pkg-keyword-package))
		      (read stream eofob))))
	  (cond ((eq what eofob)
		 (if (not (y-or-n-p "Read more tape? "))
		     (return nil))
		 (send stream :clear-eof))
		((neq what :LMFL)
		 (ferror "Don't know what a ~S is." what))
		(t
		 (let* ((plist (let ((package pkg-keyword-package))
				 (read stream)))
			(dir (get (locf plist) :directory))
			(first-time-dir nil))

		   (when (not (equal dir last-dir))
		     (format t "~&LMI dir ~A" dir)
		     (setq first-time-dir t)
		     (when skip-until
		       (when (equal dir skip-until)
			 (setq skip-until nil)))
		     (setq load-this-dir
			   (and (not skip-until)
				(or load-all
				    (cl:y-or-n-p "Load stuff from LMI dir ~A? " dir))))
		     (setq load-this-dir-auto nil)
		     (setq last-dir dir))
					   
		   ;(if load-this-dir
		   ;   (display-lmi-plist plist))

		   (let* ((dft (send path-default
				     :new-pathname
				     :directory
				     (if root-node
					 (append (if (eq (send root-node :directory)
							 :root)
						     nil
						     (send root-node :directory))
						 (if (listp dir)
						     dir
						     (list dir)))
					 (send path-default :directory))
				     :name (get (locf plist) :name)
				     :type (let ((type (get (locf plist) :type)))
					     (if (equal type "patch-directory")
						 "patch-dir"
						 type))
				     :version (get (locf plist) :version)))
			  (path (if load-this-dir-auto
				    dft
				    (and load-this-dir
					 (prompt-and-read
					   `(:pathname-or-nil :default ,dft)
					   "~&New path? (default ~A) (END to skip) "  dft)))))
		     (if (null path)
			 (send stream :skip-file)

			 (setq path-default (send path
						  :new-pathname
						  :name nil :type nil :version :newest))
			 (when first-time-dir
			   (setq load-this-dir-auto
				 (cl:y-or-n-p
				   "Load all files from LMI dir ~A into ~A? " dir
				   path-default)))

			 (condition-case (ignore)
			     (fs:create-directories-recursively path)
			   (fs:directory-already-exists))
							 
			 (with-open-file (outstr path  :direction :output)
			   (format t "~&Creating ~A." (send outstr :truename))
			   (send stream :clear-input)
			   (do () (())
			     (multiple-value-bind (buf curx end)
				 (send stream :get-input-buffer)
			       (if (null buf)
				   (return nil)	;AHA THERE WERE NO PADS!!!!
				   (setq end (+ end curx)))	;like this better
			       (let ((zerx (loop for index downfrom (1- end) to curx
						 when ( (aref buf index) 0)
						   return index)))
				 (cond ((= zerx (1- end))
					(send outstr :string-out buf curx end)
					(send stream :advance-input-buffer end))
				       (t (send outstr :string-out buf curx (1+ zerx))
					  (send stream :advance-input-buffer end)
					  (send stream :skip-file)
					  (return nil))))))))))))))))) 
		  
(defun display-lmi-plist (plist)
  (tv:doplist (plist prop ind)
    (format t "~&~A:~30t~A"
	    (string-capitalize-words ind)	;he clobbers
	    (selectq ind
	      (:AUTHOR         prop)
	      (:CREATION-DATE  (time:print-universal-time prop nil))
	      ((:VERSION :BYTE-SIZE)
	                       (format nil "~D" prop))
	      (T               prop))))) 



(defvar inspect-tape-array nil)

;;;Formerly inspect-remote-tape
(defun scan-tape (&optional tape-host) (inspect-tape ':brief tape-host))

(defconst *inspect-tape-length* (* 13. 4 sys:page-size))

(defun inspect-tape (&optional brief tape-spec)
  (if (null inspect-tape-array)
      (setq inspect-tape-array (make-array *inspect-tape-length* ':type 'art-8b)))
  (with-open-stream (stream (tape:make-stream
			      ':spec tape-spec	;can be host, too.
			      ':record-length *inspect-tape-length* ':input-stream-mode nil
			      ':no-bot-prompt t ':norewind t))
    (unless (send stream ':bot-p)
      (when (y-or-n-p "Rewind? ")
	(send stream ':rewind)
	(send stream ':await-rewind)))
    (if (eq (send stream :device-type) ':cart)
	(inspect-cart-tape stream brief)
	(inspect-standard-tape stream brief))))

(defun inspect-standard-tape (stream brief)
  (loop unless brief do (send terminal-io ':clear-window)
	for rstat = (send stream ':record-status nil)
	do
    (cond ((eq rstat ':eof)
	   (send stream ':clear-eof)
	   (format t "~&At EOF."))
	  ((errorp rstat)
	   (send stream ':clear-error)
	   (format t "~&Read failed: ~A" rstat))
	  ((numberp rstat)
	   (format t "~&Read ~D bytes." rstat)
	   (unless brief
	     (send stream ':string-in nil inspect-tape-array)
	     (8bit-dump inspect-tape-array (// (+ rstat 3) 4)))
	   (send stream ':discard-current-record))
	  (t (format t "~&Record status = ~S ?" rstat)))
    until (eq (inspect-tape-eor stream brief) ':stop)))

(defun inspect-tape-eor (stream brief)
  (send terminal-io :fresh-line)
  (if brief
      (if (send terminal-io :listen)
	  (let ((c (send standard-input :tyi)))
	    (or (char-equal c #\SP)
		(send standard-input :untyi c))
	    :stop))
      (let ((x (send standard-input :tyi)))
	(selector x char-equal
	  (#\Space)
	  (#\F (send stream :skip-file))
	  (otherwise (send standard-input :untyi x)
		     (irt-command stream))))))


(defun inspect-cart-tape (stream brief)
  (let* ((charbuf (make-array 8 :type art-string :fill-pointer 0)))	 
    (loop do
      (let ((tyi (send stream :tyi)))
	(cond ((null tyi)
	       (format t "~&At EOF.")
	       (send stream ':skip-file))
	      (brief
	       (send stream :untyi tyi)
	       (format t "~&~D byte~:P."
		       (loop summing
			       (multiple-value-bind (buf start end)
				   (send stream :read-input-buffer)
				 (unless buf
				   (loop-finish))
				 (send stream :advance-input-buffer end)
				 (- end start)))))
	      (t
	       (send stream :untyi tyi)
	       (send standard-output :clear-window)
	       (loop for byte = (send stream :tyi)
		     while byte
		     as address upfrom 0
		     when (zerop (mod address 8))
		       do (format t "~4O  " address)
		     do (format t "~3,'0O " byte)
		     unless ( #o40 byte #o176)
		       do (setq byte (char-code #/ ))
		     do (array-push charbuf (code-char byte))
		     when (zerop (mod (1+ address) 8))
		       do (format t "  ~A~%" charbuf)
			  (setf (fill-pointer charbuf) 0)
			  (when (send standard-input :listen)
			    (stream-copy-until-eof stream #'si:null-stream))))))
	  until (eq (inspect-tape-eor stream brief) ':stop))))

(defun irt-collect-number (&optional (stream standard-input))	;2,3 = 7th, 4,5 = Lexington &c
  (if (and (not tv:rubout-handler)		;Perhaps token-list?
	   (send stream ':operation-handled-p ':rubout-handler))
      (send stream ':rubout-handler '((:full-rubout :full-rubout))
	    #'irt-collect-number stream)
      (loop with accum = nil
	    with mflag = nil
	    for char = (send stream ':tyi)
	    when (memq char '(#/+ #/-))
	    do (if mflag (ferror "Sign only valid once, at beginning"))
	       (setq mflag (if (char-equal char #/-) -1 1))
	    else when (cl:char-lessp #/0 char #/9)
	    do (setq accum (+ (* (or accum 0) 10.) (- (char-code char) (char-code #/0))))
	       (setq mflag (or mflag 1))
	    else do (return (values char (* (or mflag 1) (or accum 1)))))))

(defun irt-command (stream)			;...
  (multiple-value-bind (char arg)
      (irt-collect-number)
    (unless (eq arg ':full-rubout)
      (if (zerop arg) (setq arg 1))
      (selector char char-equal
	(#/f (send stream ':skip-file arg))
	(#/s (send stream ':space-records arg))
	(#/r (send stream ':rewind))
	(#/b (send stream ':space-records (- arg)))
	(t (format t "~&F = space file, S = space record, R = rewind, B = backspace record.~@
	   Space to flush: ")
	   (tyi))))))				;and 7 = Flushing

(defun 8bit-dump (sv n)				;copped from lmfs;commands lisp
  (dotimes (i n)
    (if (send terminal-io ':listen) (return nil))
    (let ((a (* 4 i)))
      (let ((a1 (aref sv (+ a 3)))
	    (a2 (aref sv (+ a 2)))
	    (a3 (aref sv (+ a 1)))
	    (a4 (aref sv (+ a 0))))
	(format t "~%~4O F: ~11,'0O H: ~6O ~6O B: ~3O ~3O ~3O ~3O C: ~C~C~C~C"
	      i
	      (8bit-dump-poly a1 a2 a3 a4)
	      (8bit-dump-poly a3 a4)
	      (8bit-dump-poly a1 a2)
	      a4 a3 a2 a1
	      a4 a3 a2 a1)))))

(defun 8bit-dump-poly (&rest numbers)
  (loop with sum = 0
	for num in numbers
	do
	(setq sum (+ (* sum 256.) num))
	finally (return sum)))

(defun copy-tape (&optional source-host-or-spec destination-host-or-spec)
  (with-open-stream (from (tape:make-stream
			    :direction ':input
			    :spec source-host-or-spec
			    :input-stream-mode nil :prompt "source tape"
			    :record-length 16384.))
    (with-open-stream (to (tape:make-stream
			    :spec destination-host-or-spec
			    :direction ':output :prompt "output tape"
			    :record-length 16384.))
      (flet ((cartp (stream) (eq (send stream :device-type) ':cart)))
	(let ((cartp-from (cartp from))
	      (cartp-to (cartp to))
	      (do-it t)
	      (recs 0) (bytes 0) (max 0))
	  (unless (eq cartp-from cartp-to)
	    (setq do-it
		  (if cartp-from
		      (fquery format:yes-or-no-quietly-p-options
			      "You are trying to copy from cartridge tape to industry ~
			       standard tape.~&The results may not be meaningful.  Do you ~
			       still want to perform this copy? ")
		      (fquery format:yes-or-no-p-options
			      "You are trying to copy from industry standard tape to ~
			      cartridge tape.~&There is almost no chance that the results ~
			      will be meaningful.~@
			      Do you still want to perform this copy? "))))
	  (when do-it
	    (flet ((copy-and-count (in out)
			(loop summing
				(multiple-value-bind (buf start end)
				    (send in :read-input-buffer)
				  (unless buf (loop-finish))
				  (send out :string-out buf start end)
				  (send in :advance-input-buffer end)
				  (- end start)))))
	      (let ((prevstat nil))
		(block copy
		  (flet ((process (status)
			    (cond ((or (eq status ':cart) (numberp status))
				   (incf recs)
				   (let ((bytec (copy-and-count from to)))
				     (incf bytes bytec)
				     (setq max (max bytec max)))
				   (unless cartp-from
				     (send from :discard-current-record))
				   (send to :force-output))
				  ((neq status ':eof)
				   (ferror "Unknown tape state? ~S" status))
				  ((eq prevstat ':eof)
				   (return-from copy nil))
				  (t (if cartp-from	;this asymmetry is too subtle for me.
					 (send from :skip-file)
					 (send from :clear-eof))
				     (send to :eof)))
			    (setq prevstat status)))
		    (if cartp-from
			(loop as tyi = (send from :tyi) do
			  (process (if (null tyi)
				       ':eof
				       (send from :untyi tyi)
				       ':cart)))
			(loop doing (process (send from :record-status))))))))
	    (format t "~&Copied.  ~D record~:P, ~D total byte~:P. ~
	    Largest record was ~D byte~:P."
		    recs bytes max)))))))



(defconst *distributed-fep-overlays* '("INFO"
				       "LOADERS"
				       "LISP"
				       "DEBUG"
				       "TESTS"
				       "DISK"
				       ))

(defconst *undistributed-fep-overlays* '("REL7"
					 "LCONS"
					 "RDBG"
					 ))

(defun write-fep-overlay-flods-to-cart (overlay-prefix
					&optional (tape-spec "LOCAL:CART")
					&rest private-flods)
  "Writes the standard FEP overlay files to a cart tape and also writes private overlays.
   OVERLAY-PREFIX is a string similar to /"V125/".
   A PRIVATE-FLOD is a string or symbol, such as /"LOADERS/".
   Catenating these two with a dash produces /"V125-LOADERS/" which is
   looked up on SYS:N-FEP;."
  (let* ((dft (default-tape-spec
		':host net:local-host
		':device "CART"))
	 (tape-spec (or (parse-tape-spec tape-spec)
			(prompt-and-read `(tape-spec :default ,dft)
					 "Cart tape spec ~A: " dft))))
    (if (not (string-equal (send tape-spec :device) "CART"))
	(ferror "Tape must be a cart tape."))
    (with-open-stream (cart (tape:make-stream
			      :direction ':output
			      :spec tape-spec))
      (flet ((write-overlay (name complain-if-not-found)
	       (let ((pathname (fs:parse-pathname (string-append "SYS:N-FEP;"
								 overlay-prefix "-" name
								 ".FLOD"))))
		 (with-open-file-case (flod pathname
					    :direction :input
					    :characters nil
					    :byte-size 8)
		   (fs:file-not-found
		     (when complain-if-not-found
		       (format t "~&Note: The overlay flod ~A was not found.~%"
			 pathname)))
		   (:no-error
		     (format t "~&Writing ~A (~A) to cart tape ... "
		       pathname (send flod :truename))
		     (stream-copy-until-eof flod cart)
		     (send cart :write-eof)
		     (format t "done.~%"))))))
	(dolist (name *distributed-fep-overlays*)
	  (write-overlay name t))
	(dolist (name *undistributed-fep-overlays*)
	  (write-overlay name nil))
	(dolist (name private-flods)
	  (write-overlay name t)))
      (send cart :write-eof))))
