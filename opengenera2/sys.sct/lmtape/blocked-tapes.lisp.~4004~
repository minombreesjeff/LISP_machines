;;; -*- Mode: LISP; Syntax: Common-lisp; Package: Tape; Base: 10.; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; This is a protocol for tape streams that are viewing tapes as
;;; blocked.  A person could claim that this should be the lowest level
;;; protocol and the stream simulation for TD80 should be on top of it,
;;; and a post-release 7 release may implement this very idea.  When
;;; using tapes in this model, full-blown tape specs are a bad thing,
;;; since they allow users to specify things that are under format
;;; control.

;;;--- There needs to be some sorting out of init keywords to insure that
;;;--- the user does not supply parameters that are inconsistent with
;;;--- the use of this interface.

(defgeneric blocked-stream-minimum-block-length (blocked-tape-stream)
  "The minimum size block that will be written. By default, as required by the
hardware. It can be set to force longer records. Note that some tape formats
may have a block-length, which can be less than this minimum."
  (declare (values minimum-block-bytes)))

(defgeneric (cl:setf blocked-stream-minimum-block-length) (blocked-tape-stream block-length)
  )

(defgeneric blocked-stream-hardware-minimum-block-length (blocked-tape-stream)
  "The minimum size block that can be written by thw hardware."
  (declare (values minimum-block-bytes)))


(defgeneric blocked-stream-pad-character (blocked-tape-stream)
  "The character used to pad blocks out to blocked-stream-minimum-block-length.
This is a lisp-machine character."
  (declare (values pad-character)))

(defgeneric (cl:setf blocked-stream-pad-character) (blocked-tape-stream new-pad-character)
  )

(defgeneric blocked-stream-maximum-block-length (blocked-tape-stream)
  "The maximum length block that can be written.")

(defgeneric blocked-stream-write-block (blocked-tape-stream block &key (start 0) end)
  "Supplies a block of data to be written to the tape. The block will be padded with
blocked-stream-pad-character to reach a length of blocked-stream-minimum-block-length."
  )

(defgeneric blocked-stream-read-block (blocked-tape-stream block &key (start 0) end)
  "Reads a block of data from the tape.  If the array has a fill pointer, it
will be updated to reflect the data read. The index one past the last byte stored
will be returned."
  (declare (values next-index remaining-block-length))
  )

(defgeneric blocked-stream-read-block-length (blocked-tape-stream)
  "Returns the length of the next block to be returned.")

(defflavor blocked-stream-mixin ()())

(defflavor blocked-cart-tape-stream-mixin
	((minimum-block-length 0)
	 (pad-character #\null)
	 (length-buffer (make-array 5 :type 'sys:art-8b))
	 zero-blocks-are-EOF)
	(blocked-stream-mixin)
  (:initable-instance-variables zero-blocks-are-EOF)
  (:default-init-plist :zero-blocks-are-EOF nil)
  (:writable-instance-variables
   (blocked-cart-stream-zero-blocks-are-EOF zero-blocks-are-EOF)
   (blocked-stream-minimum-block-length minimum-block-length)
   (blocked-stream-pad-character pad-character)))

(defmethod (blocked-stream-hardware-minimum-block-length blocked-cart-tape-stream-mixin) ()
  0)

(defflavor blocked-cart-tape-input-stream-mixin
	((blocked-stream-state 'interblock)
	 (current-block-length 0)
	 (left-in-current-block 0))
	()
  (:required-flavors blocked-cart-tape-stream-mixin))

(defmethod (blocked-stream-maximum-block-length blocked-cart-tape-stream-mixin) ()
  99999.)

;;; Just like ANSI tapes, we limit block length to 5 decimal digits.

(defun-in-flavor (read-block-length blocked-cart-tape-input-stream-mixin) ()
  (unless (eq blocked-stream-state 'interblock)
    (error "READ-BLOCK-LENGTH when not between blocks. A bug."))
  (send self :string-in t length-buffer)
  (setq current-block-length (cl:parse-integer (ascii-to-string length-buffer)
					       :junk-allowed nil
					       :sign-allowed nil))
  (setq left-in-current-block current-block-length)
  (if (and zero-blocks-are-eof (zerop current-block-length))
      (signal 'end-of-file :stream self
	      :format-string "(simulated) end of file mark.")
      (setq blocked-stream-state 'block)))

(defmethod (blocked-stream-read-block-length blocked-cart-tape-input-stream-mixin) ()
  (cl:ecase blocked-stream-state
    (interblock (read-block-length) current-block-length)
    (block left-in-current-block)))

(defmethod (blocked-stream-read-block blocked-cart-tape-input-stream-mixin)
	   (block &key (start 0) end)
  (let* ((end (or end (array-length block)))
	 (space (- end start)))
    (when (eq blocked-stream-state 'interblock)
      (read-block-length))
    (let ((read-this-time (min space left-in-current-block)))
      (when (plusp left-in-current-block)
	(send self :string-in t block start (+ read-this-time start))
	(decf left-in-current-block read-this-time))
      (when (cl:array-has-fill-pointer-p block)
	(setf (fill-pointer block) (+ read-this-time start)))
      (when (zerop left-in-current-block)
	(setq blocked-stream-state 'interblock))
      (values (+ read-this-time start) left-in-current-block))))

(defmethod (:rewind blocked-cart-tape-input-stream-mixin :after) (&rest ignore)
  (setq blocked-stream-state 'interblock))

;;; ---Don't ever set zero-blocks-are-eof T and then use stream protocol messages
;;; ---to talk to the stream... Perhaps we need multiple flavors here.
(defwhopper (:skip-file blocked-cart-tape-input-stream-mixin) (&optional (n 1))
  (if (null zero-blocks-are-eof)
      (continue-whopper n)
      ;; its up to us.
      (unless (plusp n)
	(error "Cart tapes cannot move backwards, so :SKIP-FILE can only handle positive~
                amounts."))
      (when (eq blocked-stream-state 'block)
	(sys:with-stack-array (dummy left-in-current-block :type 'sys:art-8b)
	  (blocked-stream-read-block self dummy)))
      ;; now, loop looking for the zero length blocks
      (sys:with-stack-array (dummy 99999. :type 'sys:art-8b)
	(loop with eofs = 0 until (= eofs n)
	      as block-length = (blocked-stream-read-block self dummy)
	      when (zerop block-length) do (incf eofs)))))


(defflavor blocked-cart-tape-output-stream-mixin
	()
	()
  (:required-flavors blocked-cart-tape-stream-mixin))

(defmethod (blocked-stream-write-block blocked-cart-tape-output-stream-mixin)
	   (block &key (start 0) end)
  (let* ((end (or end (array-active-length block)))
	 (length (- end start)))
    (when (and (zerop length) zero-blocks-are-eof)
      (error "This zero length block would be an EOF mark on read."))
    (setq length-buffer (string-to-ascii (format nil "~5,'0D" length)))
    (send self :string-out length-buffer)
    (send self :string-out block start end)))

(defwhopper (:write-eof blocked-cart-tape-output-stream-mixin) (&optional (n 1))
  (if (null zero-blocks-are-eof)
      (continue-whopper n)
      (letf ((zero-blocks-are-eof nil))
	(sys:with-stack-array (dummy 0 :type 'sys:art-8b)
	  (loop repeat n do
	    (blocked-stream-write-block self dummy))))))

(defmethod (blocked-cart-writing-real-file-marks blocked-cart-tape-output-stream-mixin)
	   (continuation)
  (letf ((zero-blocks-are-eof nil))
    (funcall continuation self)))

(defmacro blocked-cart-stream-writing-real-file-marks ((stream) &body body)
  `(blocked-cart-writing-real-file-marks
     #'(lambda (,stream)
	 ,@body)))


;;; half-inch (true-record) support.

(defflavor blocked-half-inch-tape-stream-mixin
	((minimum-block-length 0)
	 (pad-character #\Null))
	(blocked-stream-mixin)     ;in case they get something in 
  (:writable-instance-variables
    (blocked-stream-minimum-block-length minimum-block-length)
   (blocked-stream-pad-character pad-character))
  (:initable-instance-variables))

(defmethod (blocked-stream-hardware-minimum-block-length blocked-half-inch-tape-stream-mixin)
	   ()
  0)						;for lack of a protocol ...

(defflavor blocked-half-inch-tape-input-stream-mixin
	((blocked-stream-state 'interblock)
	 (current-block-length 0)
	 (left-in-current-block 0))
	())

(defmethod (blocked-stream-maximum-block-length blocked-half-inch-tape-input-stream-mixin)
	   ()
  99999.)					;probably wrong, but it needs research.

(defun-in-flavor (setup-block blocked-half-inch-tape-input-stream-mixin) ()
  (let ((rs (send self :record-status)))
	(cond ((numberp rs)
	       (setq current-block-length (setq left-in-current-block rs))
	       (setq blocked-stream-state 'block))
	      ((eq rs ':eof)
	       (signal 'end-of-file :stream self)))))

(defmethod (blocked-stream-read-block-length blocked-half-inch-tape-input-stream-mixin) ()
  (cl:ecase blocked-stream-state
    (interblock (setup-block) current-block-length)
    (block left-in-current-block)))

(defmethod (blocked-stream-read-block blocked-half-inch-tape-input-stream-mixin)
	   (block &key (start 0) end)
  (let* ((end (or end (array-length block)))
	 (space (- end start)))
    (when (eq blocked-stream-state 'interblock)
      (setup-block))
    (let ((read-this-time (min space left-in-current-block)))
      (send self :string-in t block start (+ read-this-time start))
      (when (cl:array-has-fill-pointer-p block)
	(setf (fill-pointer block) (+ read-this-time start)))
      (decf left-in-current-block read-this-time)
      (when (zerop left-in-current-block)
	(send self :discard-current-record))
      (values (+ read-this-time start) left-in-current-block))))
      
(defmethod (:rewind blocked-half-inch-tape-input-stream-mixin :after) (&rest ignore)
  (setq blocked-stream-state 'interblock))


(defflavor blocked-half-inch-tape-output-stream-mixin
	()
	())

(defmethod (blocked-stream-write-block blocked-half-inch-tape-output-stream-mixin)
	   (block &key (start 0) end)
  (let ((end (or end (array-active-length block))))
    (send self :string-out block start end)
    (send self :force-output)))
