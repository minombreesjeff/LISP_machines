;;; -*- Mode:LISP; Package:TAPE; Base:8.; Lowercase: T -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;;

;;; The user end of the remote tape protocol.  Supposed to present the same
;;; interface as the local tape streams created by tapestr (tape:open-tape).

(defflavor protocol-error (host stream message)
	   (tape-error)
  (:initable-instance-variables))

(defmethod (:report protocol-error) (rstream)
  (format rstream "Remote tape protocol violation on ~S by ~A:~%~A" stream host message))

(defvar *trace-rtape* nil)			;Sets flag at instance creation time.

;;; Remote tape protocol op definitions.

(defconst rtape-LOGIN-op 1)			;USERNAME[ PASSWORD]
(defconst rtape-MOUNT-op 2)			;DIRECTION REEL DRIVE BLOCKSIZE DENSITY
(defconst rtape-PROBE-op 3)			;2 byte UID
(defconst rtape-READ-op 4)			;# of blocks, decimal ASCII, or forever
(defconst rtape-WRITE-op 5)			;data
(defconst rtape-REWIND-op 6)			;
(defconst rtape-REWIND-SYNC-op 7)		;
(defconst rtape-OFFLINE-op 8)			;
(defconst rtape-FILE-op 9)			;# of file marks, decimal ASCII
(defconst rtape-BLOCK-op 10.)			;# of blocks to skip, decimal ASCII
;(defconst rtape-READABORT-op 11.)		;obsolete
(defconst rtape-WRITE-EOF-op 12.)		;
(defconst rtape-CLOSE-op 13.)
(defconst rtape-SET-CART-MAX-BYTES-TO-WRITE-op 14.) ; nothing to remove limit,
						; decimal ascii number of bytes.

(defconst rtape-LOGIN-RESPONSE-op 33.)		;nothing, or CODE Human-readable message
(defconst rtape-DATA-op 34.)			;data
(defconst rtape-EOF-op 35.)			;
(defconst rtape-STATUS-op 36.)			;see below...

(defconst *rtape-op-names*
	  '("Login" "Mount" "Probe" "Read" "Write" "Rewind" "Rewind Sync"
	    "Offline" "File" "Block" "11" "Write EOF" "Close"
	    "Set Cart Max Bytes to Write"))

(defconst *rtape-response-names*
	    '("Login Response" "Data" "EOF" "Status"))
(lmfs:defstorage (rtape-status :constructor)		
    (version                   fixnum-bytes 1)	;currently, 1
    (probe-uid	               fixnum-bytes 2)	;0 for unsolicited, or ID from PROBE cmd
    (number-of-blocks-read     fixnum-bytes 3)	;meaningful after a READ
    (number-of-objects-skipped fixnum-bytes 3)	;??
    (writes-discarded	       fixnum-bytes 3)	;meaningful when WRITE encounters error/eot
    (last-opcode	       fixnum-bytes 1)	;other than PROBE
    (density		       fixnum-bytes 2)	;number, in bits per inch
    (retries		       fixnum-bytes 2)	;??
    (actual-drive-name	       short-char-with-length 16.)	;8-bit field len+16 char
    (flags being flag				;
	    solicited				;t = solicited
	    bot-p				;tape is now at bottape
	    past-eot				;tape is now past eot
	    eof					;eof encountered in read
	    not-logged-in-err			;can't do anything cause you didn't LOGIN
	    mounted				;tape is mounted
	    explanatory-string-follows		;human-readable string follows status
	    hard-error				;unrecoverable error.
	    soft-errors-encountered
	    offline
	    no-records				;ignore record boundaries
	    can-limit-cart-write		;understands SET-CART-WRITE etc.
	    writes-discarded-valid		;server fills in writes-discarded correctly
	    ))		;understands SET-CART-WRITE etc.

(defresource rtape-status-buffer ()
  :constructor
  (make-rtape-status))


(defflavor remote-tape-mixin
	(
	  ;; User options
	  (no-read-ahead nil)
	  (no-bot-prompt nil)
	  (reel "")
	  (buffer-size 4096.)
	  (record-length 4096.)
	  (norewind nil)
	  (density 1600.)

          ;; Internal vars
	  (open nil)
	  (target-stream nil)
	  (status nil)
	  status-string
	  (uidg 0)
	  direction
	  (unit nil)
	  (host)					;so you can ask...
	  (spec nil)
	  tracing)
	()
  (:init-keywords :stream :lock-reason
   :pad-char :minimum-record-length :minimum-record-length-granularity
   :service-access-path)
  (:functions remote-tape-mixin-probe remote-tape-mixin-login rtape-protocol-error)
  (:default-init-plist :tracing *trace-rtape*)
  (:initable-instance-variables
   host direction unit no-read-ahead reel buffer-size record-length density norewind
   tracing no-bot-prompt)
  (:gettable-instance-variables unit host)
  (:settable-instance-variables tracing))

(defun get-user-id-and-password (host)
  (let ((id (or (cdr (assq host *host-user-id-alist*)) user-id))
	(password nil))
    (loop until (and id password) 
	  do (multiple-value (id password) (fs:file-get-user-id-and-password host id)))
    (rplacd (or (assq host *host-user-id-alist*)
		(car (setq *host-user-id-alist* (cons (cons host id) *host-user-id-alist*))))
	    id)
    (values id password)))

(defun-in-flavor (remote-tape-mixin-login remote-tape-mixin) (&aux op)
  (loop do
	(multiple-value-bind (uid password)
	    (get-user-id-and-password host)
	  (send self ':command rtape-LOGIN-op
		(if (or (null password) (equal password ""))
		    uid
		    (format nil "~A ~A" uid password)))
	  (setq op (send target-stream ':opcode))
	  (if tracing
	      (format error-output "~&Receive op ~A, len ~D, in login"
		      (rtape-command-name op) (send target-stream ':record-length)))
	  (if ( op rtape-LOGIN-RESPONSE-op)
	      ;;NETWORK LOSSAGE?
	      (rtape-protocol-error "Login response expected, but ~A received."
				    (rtape-command-name op)))
	  (if (zerop (send target-stream ':record-length))	;won
	      (return (send target-stream ':discard-current-record)))
	  (format error-output "~&Login at host ~A failed: " host)
	  (stream-copy-until-eof target-stream standard-output)
	  (send target-stream ':discard-current-record))))

(defun-in-flavor (remote-tape-mixin-probe remote-tape-mixin) (&optional skip)
  (incf uidg)
  (send self ':command-bytes rtape-PROBE-op (ldb (byte 8. 0) uidg) (ldb (byte 8. 8.) uidg))
  ;; There should be nothing in input queue but unsolicited status or our answer.
  (loop for opcode = (send target-stream ':opcode)
	when tracing
	  do (format error-output "~&Receive op ~A, len ~D at probe time."
		     (rtape-command-name opcode) (send target-stream ':record-length))
	when (= opcode rtape-STATUS-op)
          do (send self ':process-status)
	     (if (= (rtape-status-probe-uid status) uidg) (loop-finish))
	else
	  do (cond (skip (send target-stream ':discard-current-record))
		   (t (rtape-protocol-error
			"Opcode ~A found in input while waiting for probe"
			(rtape-command-name opcode))))))

(defun-in-flavor (remote-tape-mixin-initiate-mount remote-tape-mixin) ()
  (cond ((and (stringp unit) (string-equal "" (string-trim " " unit)))
	 (setq unit nil)))			;undo choose-variable-values pleaser
  (send self ':command rtape-MOUNT-op
	(format nil "~A ~A ~D ~D ~D~:[~; NOREWIND~]"
		(selectq direction
		  (:bidirectional "BOTH")
		  (:input "READ")
		  (:output "WRITE"))
		(or reel "")
		(or unit "")
		(or record-length "")
		(or density "")
		norewind))
  (remote-tape-mixin-probe))

(defun-in-flavor (remote-tape-mixin-complete-mount remote-tape-mixin) ()
  (setq unit (if (zerop (rtape-status-actual-drive-name-length status))
		 "???"
		 (rtape-status-actual-drive-name status)))
  (format query-io "~&Tape ~:[~*~;~A ~]mounted on drive ~A."
	  (and reel (not (string-equal reel ""))) reel unit)
  (remote-tape-post-mount self))

(defgeneric remote-tape-post-mount (remote-tape-stream)
  (:method-combination :progn)
  (:method (remote-tape-mixin) nil))


(defun-in-flavor (remote-tape-mixin-mount remote-tape-mixin) ()
  (loop do    (remote-tape-mixin-initiate-mount)
	until (and (null (rtape-status-hard-error status)) (rtape-status-mounted status))
	finally (remote-tape-mixin-complete-mount)
	do (error 'mount-error ':reel reel ':message (or status-string "(No further info)"))))

(defprop rtape-hard-error t :error-reporter)
(defun-in-flavor (rtape-hard-error remote-tape-mixin) (&optional string &rest ignore)
  (error 'transfer-error ':reel reel
	 ':message (format nil "~@[~A: ~]~@[~A~]" string status-string)))

(defprop rtape-protocol-error t :error-reporter)
(defun-in-flavor (rtape-protocol-error remote-tape-mixin) (&rest format-args)
  (error 'protocol-error ':host host ':stream self
	 ':message (lexpr-funcall #'format nil format-args)))

(defwhopper (:init remote-tape-mixin) (&rest args)
  ;; Output mixin :before :init needs this
  (setq buffer-size (or buffer-size record-length 4096.))
  (setq record-length (or record-length buffer-size))
  (unwind-protect
    (lexpr-continue-whopper args)
    (or open (send self ':close ':abort))))

(defmethod (:init remote-tape-mixin :before) (&optional plist)
  (if (eq direction ':both) (setq direction ':bidirectional))
  (unless host
    (setf host (neti:service-access-path-host (or (get plist :service-access-path)
						  (ferror "Host must be specified.")))))
  (if (and reel (string-search-char #\SP reel))
      (error 'mount-error ':message
	     (format nil "The reel name (~S) may not have spaces in it."
		     (string reel))))
  (setq density (or density 1600.))		;standard optional arg screw.
  (setq target-stream
	(make-instance 'si:record-stream-8-bit-io-stream
		       ':block-size record-length
		       ':target-stream
		       (or (get plist ':stream)
			   (net:get-connection-for-service (get plist :service-access-path)
							   :characters nil)))))

(defmethod (:init remote-tape-mixin :after) (&rest ignore)
  (error-restart-loop (mount-error "Retry mount at ~A" (send self ':host-name))
    (setq status (allocate-resource 'rtape-status-buffer))
    (remote-tape-mixin-probe)
    (if (rtape-status-not-logged-in-err status)
	(remote-tape-mixin-login))
    (remote-tape-mixin-mount)
    (unless no-bot-prompt
      (send self ':check-ready)
      (unless (send self ':bot-p)
	(when (fquery
		format:yes-or-no-quietly-p-options
		"~&Drive ~A is not at beginning-of-tape.  Shall I rewind it? " unit)
	  (send self ':rewind)
	  (send self ':await-rewind))))
    (return (setq open t))))

(defmethod (:tape-spec remote-tape-mixin) ()
  (or spec
      (setq spec
	    (make-tape-spec ':host host
			    ':density density
			    ':reel reel
			    ':record-length record-length
			    ':device unit))))
	  

;;;********** BIG KLUDGE ********* CART-P KLUDGE *********
(defmethod (tape-stream-can-reverse-skip-p remote-tape-mixin) ()
  (not (rtape-status-no-records status)))
	  
(defmethod (:process-status remote-tape-mixin) ()
  (send target-stream ':string-in "Unexpected EOF" status)
  (setq status-string nil)
  (when (rtape-status-explanatory-string-follows status)
    (setq status-string
	  (with-output-to-string (x)
	    (loop for c = (send target-stream :tyi)
		  while c
		  do (send x :tyo (code-char c))))))
  (unless (rtape-status-version status)
    (rtape-protocol-error "Bad status version: ~D." (rtape-status-version status)))
  (if tracing (send self ':display-status))
  (send target-stream ':discard-current-record))

(defmethod (:host-name remote-tape-mixin) ()
  (send host ':name))

(defmethod (:display-status remote-tape-mixin) ()
  (display-rtape-status status status-string)
  self)

;;;********** BIG KLUDGE ********* CART-P KLUDGE *********
(defmethod (:device-type remote-tape-mixin) ()
  (if (rtape-status-no-records status)
      ':cart
      ':half-inch))

(defmethod (:command remote-tape-mixin) (op &optional string)
  (if tracing
      (cond ((= op rtape-WRITE-op)
	     (format error-output
		     "~&Send WRITE command, ~D data bytes" (rtape-command-name op)
		     (array-active-length string)))
	    ((= op rtape-MOUNT-op)
	     (format error-output "~&Send Mount command, ~S" string))
	    (t (format error-output "~&Send ~A command, ~:[no data.~;data ~S~]"
		       (rtape-command-name op) string (listarray string)))))
  (if string
      (send target-stream ':write-string-record op string)
      (send target-stream ':write-record-bytes op))
  (send target-stream ':real-force-output))

(defmethod (:command-bytes remote-tape-mixin) (op &rest data)
  (if tracing
      (format error-output
	      "~&Send ~A command~@[, data bytes ~S~]" (rtape-command-name op) data))
  (lexpr-send target-stream ':write-record-bytes op data)
  (send target-stream ':real-force-output))

(defmethod (:command-n remote-tape-mixin) (op n)
  (if tracing (format error-output "~&Send ~A command, count = ~D" (rtape-command-name op) n))
  (send target-stream ':write-string-record op (format nil "~D" n))
  (send target-stream ':real-force-output))

(defmethod (:bot-p remote-tape-mixin) ()
  (remote-tape-mixin-probe)
  (rtape-status-bot-p status))

(defmethod (:check-ready remote-tape-mixin) ()
  (loop with was-offline = nil
	for first-time = t then nil
	do (remote-tape-mixin-probe)
	until (not (rtape-status-offline status))
	finally (return was-offline)
	do (setq was-offline t)
	   (format query-io "~&Tape drive ~@[~A ~]is ~:[still ~]unready.~@
	   Type any character to retry when ready: " unit first-time)
	   (or (send query-io ':send-if-handles ':any-tyi)
	       (send query-io ':tyi))
	   (send query-io ':send-if-handles ':fresh-line)))

(defmethod (:offline-status-check remote-tape-mixin) ()	;expect status already read
  (cond ((rtape-status-offline status)
	 (signal 'offline-condition ':message status-string)
	 (send self ':check-ready)
	 (or (rtape-status-hard-error status) (setf (rtape-status-hard-error status) t))
	 (or status-string (setq status-string "Drive went offline.")))))

(defmethod (:backspace remote-tape-mixin) ()
  (send self ':space-records -1))

(defmethod (:space-records remote-tape-mixin) (&optional (n 1))
  (send self ':before-nondata-op)
  (send self ':command-n rtape-BLOCK-op n))

(defmethod (:set-offline remote-tape-mixin) ()
  (send self ':before-nondata-op)		;server hacks eot & rew
  (send self ':command-bytes rtape-OFFLINE-op))

(defmethod (:await-rewind remote-tape-mixin) ()
  (send self ':before-nondata-op)
  (send self ':command-bytes rtape-REWIND-SYNC-op))

(defmethod (:rewind remote-tape-mixin) ()
  (send self ':before-nondata-op)
  (send self ':command-bytes rtape-REWIND-op))

(defmethod (:before-nondata-op remote-tape-mixin) () )

;;;after, not before.  Stream stuff should flush output buffers first.
(defmethod (:close remote-tape-mixin :after) (&optional abort)
  (cond ((neq open ':closed)
	 (setq open ':closed)
	 (or abort (send self ':command-bytes rtape-CLOSE-op))))
  (when status
    (without-interrupts
      (deallocate-resource 'rtape-status-buffer status)
      (setq status nil)))
  )

(defflavor remote-tape-output-mixin
	((pad-char nil)
	 (minimum-record-length 64.)
	 (minimum-record-length-granularity nil)
	  
	 rto-index
	 (padbuf nil)
	 (rto-buf nil)
	 (writing nil)
	 (file-position nil)
	 writes-discarded)
	()
  (:required-flavors remote-tape-mixin si:buffered-output-stream)
  (:initable-instance-variables
   pad-char minimum-record-length minimum-record-length-granularity))
(defmethod (remote-tape-post-mount remote-tape-output-mixin) ()
  (when (rtape-status-writes-discarded-valid status)
    (setf file-position 0)
    (setf writes-discarded 0)))

(defwhopper (:tape-spec remote-tape-output-mixin) ()
  (let ((xspec (continue-whopper)))		;will be same one every time, but so what.
    (send xspec ':set-granularity minimum-record-length-granularity)
    (send xspec ':set-minimum-record-length minimum-record-length)
    xspec))
(defun-in-flavor (remote-tape-output-mixin-write-record remote-tape-output-mixin)
		 (string start end &aux (len (- end start)) pad-to)
  (let ((no-records (rtape-status-no-records status)))
    (cond ((and 
	     ;;What hath not records, thou shalt not pad to the end of a record.
	     ;;Unfortunately, the LMFS dumper has already scrod some tapes this way....
	     (not no-records)
	     (or minimum-record-length minimum-record-length-granularity)
	     (> (setq pad-to
		      (compute-tape-padding len minimum-record-length
					    minimum-record-length-granularity))
		len))
	   ;;If there is padding, and the record is not full length, pad it.
	   (send target-stream ':string-out string start end)
	   (send target-stream ':string-out padbuf 0 (- pad-to len))
	   (if tracing
	       (format error-output
		       "~&Send Write Data ~D byte~:P, (padded from ~D)" pad-to len))
	   (send target-stream ':end-record rtape-WRITE-op))
	  (t
	   ;;Much more efficient than :string-out...
	   (when tracing
	     (format error-output "~&Send Write data ~D byte~:P" len))
	   (send target-stream ':write-record rtape-WRITE-op string start end)))
    (setf writing t)
    (when (not (null file-position))
      (incf file-position (if no-records len 1)))))

;;; Stream protocol guys

(defmethod (:init remote-tape-output-mixin :before) (&rest ignore)
  (multiple-value (minimum-record-length-granularity pad-char minimum-record-length)
    (decode-tape-padding-parameters
      record-length minimum-record-length-granularity pad-char minimum-record-length)))

(defmethod (:init remote-tape-output-mixin :after) (&rest ignore)
  (setq rto-buf (allocate-resource 'si:record-stream-buf 'art-8b record-length))
  (let ((padlen (or minimum-record-length minimum-record-length-granularity)))
    (when padlen
      (setq padbuf
	    (allocate-resource 'si:record-stream-buf 'art-8b padlen))
      (dotimes (i padlen) (aset pad-char padbuf i))))
  (setq rto-index 0))

(defmethod (:close remote-tape-output-mixin :after) (&optional abort)
  (when padbuf
    (without-interrupts
      (deallocate-resource 'si:record-stream-buf padbuf)
      (setq padbuf nil)))
  (when rto-buf
    (without-interrupts
      (deallocate-resource 'si:record-stream-buf rto-buf)
      (setq rto-buf nil)))
  (when target-stream
    (send target-stream ':close abort)))	;multiclose should be ok
(defmethod (:clear-output remote-tape-output-mixin) ()
  (when (not (null file-position))
    (decf file-position writes-discarded)
    (setf writes-discarded 0)))
(defmethod (tape-stream-file-position remote-tape-output-mixin) ()
  (when (not (null file-position))
    (send self :force-output)
    file-position))
(defmethod (:new-output-buffer remote-tape-output-mixin) ()
  (when (send target-stream ':listen)		;is there stuff?
    (send self ':write-error-status t))
  (when (and (not (null file-position))
	     (plusp writes-discarded))
    (error "You can't write without clearing pending output."))
  (if ( rto-index buffer-size)
      (send self ':send-current-output-buffer nil))
  (values rto-buf rto-index buffer-size))

(defmethod (:discard-output-buffer remote-tape-output-mixin) (arg-buf)
  (or (eq arg-buf rto-buf)
      (ferror "I didn't give you this buffer ~S" arg-buf)))

(defmethod (:send-output-buffer remote-tape-output-mixin) (arg-buf arg-end ignore)
  (or (eq arg-buf rto-buf)
      (ferror "I didn't give you this buffer ~S" arg-buf))
  (or (= rto-index arg-end) (remote-tape-output-mixin-write-record rto-buf rto-index arg-end))
  (setq rto-index 0)) 
;;; More-or-less tape-specific guys

(defmethod (:before-nondata-op remote-tape-output-mixin :before) ()
  (send self ':send-current-output-buffer nil)
  (when writing
    (send self :write-error-status t))
  (when (not (null file-position))
    (setf file-position 0)))

(defmethod (:write-eof remote-tape-output-mixin) (&optional (n 1))
  (send self ':eof n))

(defmethod (:eof remote-tape-output-mixin) (&optional (n 1))
  (send self ':before-nondata-op)
  (loop repeat n
	do (send self ':command-bytes rtape-WRITE-EOF-op)))

(defmethod (:clear-error remote-tape-output-mixin) (&rest ignore))

(defmethod (:write-record remote-tape-output-mixin) (string &optional (start 0)
							    (end (string-length string)))
  (send self ':send-current-output-buffer nil)
  (or (= start end)
      (remote-tape-output-mixin-write-record string start end)))

(defmethod (:close remote-tape-output-mixin :before) (&optional abort)
  abort
  ;(or abort (send self ':write-error-status t))) ;what's he gonna do about it?
    ;;Bigger problem is how to reset it, but what good would that do anyway?
  )

(defmethod (:write-error-status remote-tape-output-mixin) (&optional (error-p nil))
  (send self :force-output)
  (let ((was-writing (cl:shiftf writing nil)))
    (remote-tape-mixin-probe ':skip)
    (when (and (not (null file-position)) was-writing)
      (setf writes-discarded (rtape-status-writes-discarded status)))
    (send self ':offline-status-check)
    (condition-case-if (not error-p) (err)
	 (cond ((rtape-status-past-eot status)
		(error 'end-of-tape ':reel reel))
	       ((rtape-status-hard-error status)
		(rtape-hard-error "on writing" ':fatal))
	       (t nil))
       (end-of-tape ':end-of-tape)
       (tape-error err))))


;;;; Input

(defflavor remote-tape-input-mixin
	( (rti-error-message nil)
	  target-stream
	  (rti-got-buffer nil)
	  (rti-state ':no-data-yet)
	  (input-stream-mode t)
	  (read-running nil)
	  rti-reclen
	  rti-start
	  rti-limit
	  tracing)				;should be same as remote-tape-mixin
	()
  (:required-flavors remote-tape-mixin si:buffered-input-stream)
  (:settable-instance-variables input-stream-mode)
  (:initable-instance-variables input-stream-mode))

(defun-in-flavor (remote-tape-input-mixin-get-more-state
	      remote-tape-input-mixin) ()
  (loop for op = (send target-stream ':opcode)
	do
	(if tracing
	    (format error-output "~&Receive Op ~A len ~D"
		    (rtape-command-name op)
		    (send target-stream ':record-length)))
	(select op
	  (rtape-EOF-op
	   (send target-stream ':discard-current-record)
	   (return (setq rti-state ':eof read-running nil)))
	  (rtape-DATA-op
	   (setq rti-reclen (send target-stream ':record-length))
	   (return (setq rti-state ':reading)))
	  (rtape-STATUS-op
	   (setq read-running nil rti-state ':error)
	   (send self ':process-status)	;he discards record
	   (if (rtape-status-past-eot status)
	       (return (setf rti-state :end-of-tape)))
	   (if (rtape-status-hard-error status)
	       (return (setq rti-state ':error))))
	  (t (rtape-protocol-error
	       "Unexpected opcode ~D. in remote-tape-input-mixin-get-more-state." op)))))

(defun-in-flavor (remote-tape-input-mixin-nonzeroify-state
	      remote-tape-input-mixin) ()
  (loop do
	(selectq rti-state
	  (:reading
	     (cond ((plusp rti-reclen) (return nil)))
	     ;;Logical record over; run it out..
	     (send target-stream ':read-until-eof)
	     (send target-stream ':clear-eof)
	     (cond (input-stream-mode (remote-tape-input-mixin-get-more-state))
		   (t (setq rti-state ':eob))))
	  ((:eof :eob :error :end-of-tape) (return nil))
	  (:no-data-yet (send self ':keep-reading)
			(remote-tape-input-mixin-get-more-state))
	  (:closed (ferror "Stream is closed: ~S" self)))))

;;; Stream protocol

(defmethod (:next-input-buffer remote-tape-input-mixin) (&rest ignore) ;nohang-hack later
  (remote-tape-input-mixin-nonzeroify-state)
  (selectq rti-state
    ((:eof :eob) nil)
    ((:end-of-tape) (error 'end-of-tape :reel reel))
    (:error (send self ':offline-status-check)
	    (rtape-hard-error "on input"))
    (:reading
     (multiple-value (rti-got-buffer rti-start rti-limit)
       (send target-stream ':read-input-buffer))
     (or rti-got-buffer
	 (ferror "We seemed to think there was more data record, ~
		  but ~S disagreed." target-stream))
     (values rti-got-buffer rti-start rti-limit))))

(defmethod (:discard-input-buffer remote-tape-input-mixin) (arg-buf)
  (or (eq arg-buf rti-got-buffer)
      (ferror "This isn't the buffer I gave you: ~S" arg-buf))
  (send target-stream ':advance-input-buffer rti-limit)
  (decf rti-reclen (- rti-limit rti-start))
  (setq rti-got-buffer nil))

(defmethod (:close remote-tape-input-mixin :before) (&optional abort)
  (cond ((neq rti-state ':closed)
	 (send self ':discard-current-record)	;get act WRT target stream together.
	 (if (and read-running (not abort))
	     (send self ':read-abort)))))

(defmethod (:close remote-tape-input-mixin :after) (&optional abort)
  (if rti-got-buffer (send self ':discard-input-buffer rti-got-buffer))
  (or (eq rti-state ':closed) (and target-stream (send target-stream ':close abort)))
  (setq rti-state ':closed))

(defmethod (:skip-file remote-tape-input-mixin) (&optional (n 1))
  (selectq rti-state
    (:no-data-yet )
    (:eof (ferror "EOF not cleared at skip-file time?"))
    (:error (send self ':clear-error))
    (t (send self ':discard-current-record)))
  ;;Now we should be all synchronized
  (cond (read-running
	 (send self ':read-abort)
	 (if (rtape-status-eof status) (decf n))))
  (cond (( n 0) (send self ':command-n rtape-FILE-op n))))

(defmethod (:read-abort remote-tape-input-mixin) ()
  (setq read-running nil rti-state ':no-data-yet)
  (remote-tape-mixin-probe ':skip))		;probe will stop read

(defmethod (:keep-reading remote-tape-input-mixin) ()
  (cond ((not read-running)
	 (send self ':command-bytes rtape-READ-op)
	 (setq read-running t))))

(defmethod (:before-nondata-op remote-tape-input-mixin :before) ()
  (send self ':discard-current-record)
  (if read-running (send self ':read-abort))
  (setq rti-state ':no-data-yet))

(defmethod (:clear-eof remote-tape-input-mixin) ()
  (if (eq rti-state ':eof)
      (setq rti-state ':no-data-yet)))


(defmethod (:clear-error remote-tape-input-mixin :after) ()
  (if (eq rti-state ':error)
      (setq rti-state ':no-data-yet)))

;;;This is for compatibility only
(defmethod (:clear-input remote-tape-input-mixin) ()
  (or (rtape-status-no-records status)		;allow LMFS dumper via cartridge tapes
      (send self ':discard-current-record)))

(defmethod (:discard-current-record remote-tape-input-mixin) ()
  (send self ':discard-current-input-buffer)
  (selectq rti-state
    ((:eof :eob :end-of-tape) (setq rti-state ':no-data-yet))
    (:no-data-yet)
    (:error (send self ':clear-error))
    (t (setq rti-reclen 0 rti-state ':no-data-yet)
       (send target-stream ':discard-current-record))))

(defmethod (:record-status remote-tape-input-mixin) (&optional (error-p t))
  (if input-stream-mode
      (ferror ":RECORD-STATUS on ~S not valid in input stream mode." self))
  (if (eq rti-state ':no-data-yet) (remote-tape-input-mixin-nonzeroify-state))
  (selectq rti-state
    (:eof ':eof)
    (:end-of-tape (error 'end-of-tape :reel reel))
    (:error
     (send self ':offline-status-check)
     (or status-string (setq status-string
			     (format nil "Tape Error. (No error description supplied by ~A)"
				     (send self ':host-name))))
     (condition-case-if (not error-p) (err)
	 (rtape-hard-error)
       (tape-error err)))
    (:eob (ferror "Record status call only valid at beginning of record."))
    (t rti-reclen)))


(defflavor remote-cart-tape-stream-mixin (max-bytes-to-write)
	   ()
  (:required-flavors remote-tape-mixin)
  (:initable-instance-variables (:cart-max-bytes-to-write max-bytes-to-write))
  (:writable-instance-variables (cart-max-bytes-to-write max-bytes-to-write)))

(defmethod (remote-tape-post-mount remote-cart-tape-stream-mixin) ()
  (when (and (rtape-status-can-limit-cart-write status)
	     max-bytes-to-write)
    (send self :command rtape-SET-CART-MAX-BYTES-TO-WRITE-op
	  (format nil "~D" max-bytes-to-write))))

(defwhopper (:tape-spec remote-cart-tape-stream-mixin) ()
  (let ((ts (continue-whopper)))
    (send ts :set-cart-max-bytes-to-write max-bytes-to-write)
    ts))



(defflavor remote-cart-tape-input-stream ()
	   (blocked-cart-tape-input-stream-mixin
	    blocked-cart-tape-stream-mixin
	    remote-cart-tape-stream-mixin
	    remote-tape-input-mixin
	    remote-tape-mixin
	    si:buffered-input-binary-stream
	    si:unsigned-byte-8-with-character-input-mixin
	    si:unsigned-byte-8-stream))

(defflavor remote-cart-tape-output-stream ()
	   (blocked-cart-tape-output-stream-mixin
	    blocked-cart-tape-stream-mixin
	    remote-cart-tape-stream-mixin
	    remote-tape-output-mixin
	    remote-tape-mixin
	    si:buffered-output-binary-stream
	    si:unsigned-byte-8-with-character-output-mixin
	    si:unsigned-byte-8-stream))

(defflavor remote-cart-tape-io-stream ()
	   (blocked-cart-tape-input-stream-mixin
	    blocked-cart-tape-output-stream-mixin
	    blocked-cart-tape-stream-mixin
	    remote-cart-tape-stream-mixin
	    remote-tape-input-mixin
	    remote-tape-output-mixin
	    remote-tape-mixin
	    si:buffered-binary-stream
	    si:unsigned-byte-8-with-character-io-mixin
	    si:unsigned-byte-8-stream))

(defflavor remote-half-inch-tape-input-stream ()
	   (blocked-half-inch-tape-input-stream-mixin
	    blocked-half-inch-tape-stream-mixin
	    remote-tape-input-mixin
	    remote-tape-mixin
	    si:buffered-input-binary-stream
	    si:unsigned-byte-8-with-character-input-mixin
	    si:unsigned-byte-8-stream))

(defflavor remote-half-inch-tape-output-stream ()
	   (blocked-half-inch-tape-output-stream-mixin
	    blocked-half-inch-tape-stream-mixin
	    remote-tape-output-mixin
	    remote-tape-mixin
	    si:buffered-output-binary-stream
	    si:unsigned-byte-8-with-character-output-mixin
	    si:unsigned-byte-8-stream))

(defflavor remote-half-inch-tape-io-stream ()
	   (blocked-half-inch-tape-input-stream-mixin
	    blocked-half-inch-tape-output-stream-mixin
	    blocked-half-inch-tape-stream-mixin
	    remote-tape-input-mixin
	    remote-tape-output-mixin
	    remote-tape-mixin
	    si:buffered-binary-stream
	    si:unsigned-byte-8-with-character-io-mixin
	    si:unsigned-byte-8-stream))

(cl:defparameter *remote-tape-half-inch-to-cart-flavors*
		 '((remote-half-inch-tape-io-stream remote-cart-tape-io-stream)
		   (remote-half-inch-tape-output-stream remote-cart-tape-output-stream)
		   (remote-half-inch-tape-input-stream remote-cart-tape-input-stream)))

;;; The following semi-kludge depends on the complete initable-instance-variable
;;; and instance-variable coherence between the two kinds of streams.
;;; Were that not to be the case, it would require messier hair.

(defmethod (change-to-cart-stream-if-needed remote-tape-mixin) ()
  (when (eq (send self :device-type) ':cart)
    (let ((target-flavor-name (second
				(cl:assoc (flavor::flavor-name (sys:%instance-flavor self))
					  *remote-tape-half-inch-to-cart-flavors*))))
      (when target-flavor-name
	(change-instance-flavor self target-flavor-name)))))

(compile-flavor-methods
  remote-cart-tape-input-stream
  remote-cart-tape-output-stream
  remote-cart-tape-io-stream
  remote-half-inch-tape-input-stream
  remote-half-inch-tape-output-stream
  remote-half-inch-tape-io-stream)


(net:define-protocol :rtape (:tape :byte-stream)
  (:desirability .9)
  (:invoke (path)
   (let* ((args (neti:service-access-path-args path))
	  (stream
	    (cl:apply
	      #'make-instance
	      (selectq (cl:getf args ':direction)
		(:bidirectional 'remote-half-inch-tape-io-stream)
		(:input 'remote-half-inch-tape-input-stream)
		(:output 'remote-half-inch-tape-output-stream)
		(t (ferror "Unknown direction - ~S" (get (locf args) ':direction))))
	      :allow-other-keys t
	      :service-access-path path
	      args)))
     (change-to-cart-stream-if-needed stream)
     (when (eq ':cart (send stream :device-type))
       (setf (cart-max-bytes-to-write stream) (cl:getf args ':cart-max-bytes-to-write)))
     stream)))

(defun display-rtape-status (statbuf &optional msg (stream error-output))
  (format stream "~&Rtape status v~D, last probe UID=~D."
	  (rtape-status-version statbuf)
	  (rtape-status-probe-uid statbuf))
  (format stream "~&~D Block~:P read, ~D object~:P skipped, ~D write~:P discarded."
	  (rtape-status-number-of-blocks-read statbuf)
	  (rtape-status-number-of-objects-skipped statbuf)
	  (rtape-status-writes-discarded statbuf))
  (format stream "~&Last opcode ~D (~A), Density ~D, retries ~D."
	  (rtape-status-last-opcode statbuf)
	  (rtape-command-name (rtape-status-last-opcode statbuf))
	  (rtape-status-density statbuf)
	  (rtape-status-retries statbuf))
  (format stream "~&Actual drive name: ~A" (rtape-status-actual-drive-name statbuf))
  (format stream "~&Flags:~:[~; solicited~]~:[~; BOT~]~:[~; past-EOT~]~:[~; EOF~]~
	    ~:[~; not-logged-in~]~:[~; mounted~]~:[~; hard-error~]~:[~; soft-error~]~
	    ~:[~; offline~]~:[~; writes-discarded-valid~]"
	  (rtape-status-solicited statbuf)
	  (rtape-status-bot-p statbuf)
	  (rtape-status-past-eot statbuf)
	  (rtape-status-eof statbuf)
	  (rtape-status-not-logged-in-err statbuf)
	  (rtape-status-mounted statbuf)
	  (rtape-status-hard-error statbuf)
	  (rtape-status-soft-errors-encountered statbuf)
	  (rtape-status-offline statbuf)
	  (rtape-status-writes-discarded-valid statbuf))
  (if msg (format stream "~&Message: ~A" msg)))

(defun rtape-command-name (op)
  (if ( op 32.)
      (rtape-command-name-1 (- op 32.) *rtape-response-names*)
      (rtape-command-name-1 op *rtape-op-names*)))

(defun rtape-command-name-1 (op tbl)
  (if (or ( op 0)
	  (> op (1+ (length tbl))))
      (format nil "Unknown-op-~D" op)
      (nth (1- op) tbl)))
