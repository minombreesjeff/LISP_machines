;;;-*- Mode:LISP; Package:TAPE; Lowercase:T; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;; Tape error flavors and machine independent local tape support.

(defflavor tape-error ((message nil) (reel nil)
		       tape-name)
	   (error)  ;Most general kind of tape error
  (:initable-instance-variables message reel)
  (:gettable-instance-variables)
  :abstract-flavor)

(defmethod (:init tape-error :before) (&rest ignore)
  (if (equal reel "") (setq reel nil))
  (setq tape-name (if reel
		      (string-append "reel " reel)
		      "tape")))

(defflavor tape-device-error () ()
  (:required-flavors tape-error)
  :abstract-flavor)

(defmethod (:report tape-device-error) (stream)
  (format stream "Hard tape error~@[ on reel ~A~]: ~A" reel message))

(defflavor transfer-error ()(tape-device-error tape-error))

(defflavor offline-mixin () ()
  (:required-instance-variables message)
  (:default-init-plist :message "Drive has gone offline."))

(defmethod (:proceed offline-mixin :recover-offline) (&rest ignore)
  "Recover after having put drive back on line"
  ':recover-offline)

(defflavor offline-condition (message) (offline-mixin condition)
  (:gettable-instance-variables)
  (:initable-instance-variables))

(defmethod (:report offline-condition) (stream)
  (send stream ':string-out message))


(defflavor mount-error () (tape-error))

(defmethod (:report mount-error) (stream)
  (format stream "Cannot mount ~A: ~A" tape-name (send self ':message)))

(defflavor offline-at-mount () (offline-mixin  mount-error))

(defflavor cart-offline-at-mount ()
	   (tape:offline-at-mount))

(defmethod (:proceed cart-offline-at-mount :recover-offline) (&rest ignore)
  "Recover after having put a cartridge tape in the drive"
  ':recover-offline)

(defflavor no-ring-at-mount () (mount-error)
  (:default-init-plist :message "There is no write-permit ring; one is required."))

(defmethod (:proceed no-ring-at-mount :proceed-ring) (&rest ignore)
  "Retry mount after having put a ring in the tape"
  ':retry-ring)

(defflavor cart-no-write-permit-at-mount ()
	   (tape:no-ring-at-mount)
  (:default-init-plist :message "The cartridge is not enabled for writing."))

(defmethod (:proceed cart-no-write-permit-at-mount :proceed-ring) (&rest ignore)
  "Retry mount after enabling write on cartridge"
  ':retry-ring)

(defflavor no-such-unit ((device) (unit) (host))
	   (tape:mount-error)
  (:initable-instance-variables))

(defmethod (:report no-such-unit) (stream)
  (format stream "Cannot find unit~@[ ~D~]~@[ for ~A tape~]~@[ on host ~A~]."
	  unit device host))

(defflavor unit-not-provided ()
	   (no-such-unit))

(defmethod (:report unit-not-provided) (stream)
  (format stream
	  "No unit was specified~@[ for ~A tape~]~@[ on host ~A~].  One must be supplied."
	  device host))

(defflavor wrong-kind-of-tape ((device) (unit) (host))
	   (tape:mount-error)
  :initable-instance-variables
  :readable-instance-variables)

(defmethod (:report wrong-kind-of-tape) (stream)
  (format stream "The tape mounted does not appear to be written by a Symbolics application."))

(defflavor end-of-tape () (tape-device-error tape-error))

(defmethod (:report end-of-tape) (stream)
  (format stream "End of ~A encountered." tape-name))

(compile-flavor-methods transfer-error mount-error offline-condition end-of-tape
			offline-at-mount no-ring-at-mount
			cart-offline-at-mount cart-no-write-permit-at-mount
			no-such-unit unit-not-provided wrong-kind-of-tape)


;; QIC-100 format cartridge tape constants.

(defconstant QIC-100-block-size		8192.)

(defconstant number-of-QIC-100-header-blocks-reserved 10.)

;;This is so large because of braindammage in FEP-Tape, and perhaps other clients.
;;If you make the following constant smaller, multiple reel sets will stop working.
(defconstant number-of-QIC-100-blocks-reserved-for-safety-margin 138.)

(defconstant minimum-number-of-blocks-on-QIC-100-tape 4810.)


;;; Some utilities...

(defprop signal-mount-error t :error-reporter)
(defun signal-mount-error (&rest format-args)
  (error 'mount-error ':message (lexpr-funcall #'format nil format-args)))

(defprop decode-tape-padding-parameters t :error-reporter)
(defun decode-tape-padding-parameters (length granularity char minimum)
  (declare (values minimum-granularity pad-char minimum-length))
  (if (and char (null minimum))
      (setq minimum ':full))
  (if (eq minimum ':full)
      (setq minimum length granularity length))
  (if (and char (null granularity))
      (setq granularity ':full))
  (if (eq granularity ':full)
      (setq granularity length))
  (if (and minimum (> minimum length))
      (signal-mount-error
	"Minimum record length ~D is greater than maximum ~D." minimum length))
  (when granularity
    (if (> granularity length)
	(signal-mount-error
	  "Record length granularity ~D may not be greater than record length ~D."
	  granularity length))
    (unless (zerop (\ length granularity))
      (signal-mount-error "Record length ~D not a multiple of minimum granularity ~D."
			  length granularity))
    (setq minimum (compute-tape-padding minimum nil granularity)))
  (if (null char)
      (setq char 0))
  (values granularity char minimum))


(defun compute-tape-padding (len minimum granularity)
  (if (null minimum)
      (setq minimum granularity))
  (if granularity
      (max minimum 
	   (* granularity
	      (// (+ len granularity -1)
		  granularity)))
      minimum))
(defgeneric tape-drive-device (tape-drive)
  "Return the device name for a local tape drive.")
(defgeneric tape-drive-device-match (tape-drive test-device)
  "Return T if the device name supplied belongs to this drive.")
(defgeneric tape-drive-make-stream (tape-drive &rest args)
  "Return a tape stream appropriate to this drive.")
(defgeneric tape-stream-can-reverse-skip-p (tape-stream)
  "NIL if the stream is incapable of spacing backwards (like QIC-11).")
(defflavor basic-tape-drive () ()
  :abstract-flavor
  (:required-methods tape-drive-device tape-drive-device-match tape-drive-make-stream))
(sys:defvar-resettable *tape-drives-cached* nil)
(defvar *cached-tape-drives* nil)

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Find all tape drives connected to the local host.
0(defun find-tape-drives (&optional force)
  (declare (values list-of-tape-drives))
  (when (and *tape-drives-cached* (null force))
    (return-from find-tape-drives *cached-tape-drives*))
  (setf *cached-tape-drives* (local-tape-drives))
  (setf *tape-drives-cached* t)
  *cached-tape-drives*)
#+IMACH
(defun local-tape-drives ()
  (sys:system-case
    ((MacIvory Merlin Zora Domino)
     (cli::find-scsi-tape-drives))
    (otherwise nil)))

#+3600
(defun local-tape-drives ()
  (append (local-cart-tape-drives) (local-half-inch-tape-drives)))
