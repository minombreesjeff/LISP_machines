 ;-*- Mode:LISP; Package:SYSTEM-INTERNALS; Base:8; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


(defresource record-stream-buf (type length)
  :constructor (make-array length :type type)
  :initial-copies 0
  :matcher (and ( (array-dimension-n 1 object) length)	;array-length?
		(eq (array-type object) type)))

(defflavor record-stream-output-mixin
	((rs-buf nil)				;the buffer
	 (target-stream nil)			;the target stream
	 (rs-index)				;index of next byte to go into buf
	 (opcode nil)
	 array-type
	 block-size)
	()
  (:required-flavors buffered-output-stream)
  (:settable-instance-variables opcode)
  (:initable-instance-variables target-stream array-type block-size block-size)
  (:default-init-plist :block-size 4096. :array-type 'art-8b))

(defun-in-flavor (record-stream-output-op-and-len
	      record-stream-output-mixin) (op len)
  (or op (ferror "Opcode not specified"))
  (send target-stream :tyo op)
  (loop for byteno from (cond ((> len (1- 1_15.))
			       (send target-stream :tyo #16r80)
			       3)
			      (t 1))
	    downto 0
	as bytespec = (byte 8 (* byteno 8))
	do (send target-stream :tyo (ldb bytespec len))))

(defmethod (:init record-stream-output-mixin :before) (&rest ignore)
  (or target-stream
      (ferror "No target stream given."))
  (loop for msg in '(:string-out :tyo)
	unless (send target-stream :operation-handled-p msg)
	do (ferror "~S doesn't support ~S" target-stream msg)))

(defmethod (:init record-stream-output-mixin :after) (&rest ignore)
  (loop for c being the array-elements of "RECORD STREAM VERSION 1"
	do (send target-stream :tyo (char-code c))
	finally (send target-stream :tyo (char-code #\cr)))
  (send target-stream :force-output)
  (setq rs-index 0)
  (setq rs-buf (allocate-resource 'record-stream-buf array-type block-size)))

(defmethod (:new-output-buffer record-stream-output-mixin) ()
  (if ( rs-index block-size)
      (ferror "Attempt to output data past block size of ~D." block-size))
  (values rs-buf rs-index block-size))

(defmethod (:discard-output-buffer record-stream-output-mixin) (arg-buf)
  (or (eq arg-buf rs-buf)
      (ferror "I didn't give you this buffer ~S" arg-buf)))

(defmethod (:send-output-buffer record-stream-output-mixin) (arg-buf arg-end explicit)
  (or (eq arg-buf rs-buf)
      (ferror "I didn't give you this buffer ~S" arg-buf))
  (setq rs-index arg-end)
  (when explicit
    (send self :send-real-output-buffer)))

(defmethod (:new-block-size record-stream-output-mixin) (size)
  (or (zerop rs-index) (ferror "Can't change block size with data in buffer."))
  (deallocate-resource 'record-stream-buf rs-buf)
  (setq rs-buf (allocate-resource 'record-stream-buf array-type (setq block-size size))))

(defmethod (:end-record record-stream-output-mixin) (&optional (arg-opcode opcode))
  (setq opcode arg-opcode)
  (send self :send-current-output-buffer nil)
  (send self :send-real-output-buffer))

(defmethod (:send-real-output-buffer record-stream-output-mixin) ()
  (when opcode
    (record-stream-output-op-and-len opcode rs-index)
    (send target-stream :string-out rs-buf 0 rs-index)
    (setq rs-index 0 opcode nil)))

(defmethod (:write-string-record record-stream-output-mixin)
	   (op string &optional
	       (start 0) (end (string-length string)))
  (with-indirect-array (array 'art-8b (string-thin string) start end)
    (send self :write-record op array 0 (- end start))))

(defmethod (:write-record record-stream-output-mixin) (op array &optional
							  (first 0) 
							  (end (array-active-length array)))
  (record-stream-output-op-and-len (or op opcode) (- end first))
  (send target-stream :string-out array first end))

(defmethod (:write-record-bytes record-stream-output-mixin) (op &rest bytes)
  (record-stream-output-op-and-len (or op opcode) (length bytes))
  (loop for b in bytes do (send target-stream :tyo b)))

(defmethod (:clear-error record-stream-output-mixin) (&rest ignore))

(defmethod (:eof record-stream-output-mixin) ()
  (send self :force-output)
  (send target-stream :eof))

(defmethod (:close record-stream-output-mixin :after) (&optional abort)
  ;;buffered-output-stream has already forced output.
  (when (not (null rs-buf))
    (or abort (if (and opcode (plusp rs-index))
		  (send self :send-real-output-buffer)))
    (or abort (send target-stream :force-output))
    (send target-stream :close abort)
    (deallocate-resource 'record-stream-buf rs-buf)
    (setq rs-buf nil)))

(defmethod (:real-force-output record-stream-output-mixin) ()
  (if opcode (send self :force-output))
  (send target-stream :force-output))

(defflavor record-stream-input-mixin
	((target-stream nil)
	 (rs-state ':closed)
	 (rs-got-buffer)			;target's input buffer
	 (in-opcode nil)
	 rs-limit				;where target buffer ends
	 rs-count)				;how many left in block
	()
  (:initable-instance-variables target-stream)
  (:required-flavors buffered-input-stream))

(defmethod (:init record-stream-input-mixin :before) (&rest ignore)
  (or target-stream
      (ferror "No target stream given."))
  (loop for msg in '(:string-in :read-input-buffer :advance-input-buffer)
	unless (send target-stream :operation-handled-p msg)
	do (ferror "~S doesn't support ~S." target-stream msg))
  (setq rs-state ':no-data-yet))

(defmethod (:init record-stream-input-mixin :after) (&rest ignore)
  (return-array
    (let ((ary (make-array 100. :type 'art-string :leader-list '(0))))
      (record-stream-input-mixin-funny-string-collect ary target-stream)
      (if (not (and (string-search "Record Stream" ary)
		    (string-search "Version 1" ary)))
	  ;;NETWORK LOSSAGE here
	  (ferror "This stream ~S does not contain record-stream data."
		  target-stream))
      ary)))
	       
(defun record-stream-input-mixin-funny-string-collect (s stream)
  (store-array-leader 0 s 0)
  (loop repeat 100.
	as c = (send stream :tyi)
	unless c return nil
	as cc = (code-char c)
	if (char= cc #\CR)
	return nil
	finally (return nil)
	do (array-push s cc)))

(defmethod (:listen record-stream-input-mixin) ()
  (selectq rs-state
    (:eob (ferror ":LISTEN ill-defined at end-of-block."))
    (:no-data-yet (send target-stream :listen))
    (:reading (cond ((plusp rs-count) t)
		    (t (ferror ":LISTEN ill-defined at 0 count."))))
    (t (ferror "Invalid state ~S at :LISTEN." rs-state))))

(defmethod (:next-input-buffer record-stream-input-mixin) (&optional (no-hang-p nil))
  (loop with xmuch = 0
	and start = 0
	initially (if (and no-hang-p (not (send self :listen)))
		      (return nil))
	do
	(selectq rs-state
	  (:eob    (return nil))
	  (:no-data-yet (send self :set-rs-params))
	  (:reading
	     (cond ((plusp rs-count)
		    (or rs-got-buffer
			(multiple-value (rs-got-buffer start rs-limit)
			  (send target-stream :read-input-buffer "Premature EOF")))
		    
		    (setq xmuch (min rs-count (- rs-limit start)))
		    (decf rs-count xmuch)
		    (setq rs-limit (+ start xmuch))
		    (return (values rs-got-buffer start rs-limit)))	;state stays reading
		   (t (if rs-got-buffer (send self :discard-input-buffer rs-got-buffer))
		      (setq rs-state ':eob))))
	  ;;Hack NETWORK LOSSAGE HERE
	  (:closed (ferror "Stream closed - ~S" self))
	  (t (ferror "Invalid state: ~S" rs-state)))))

(defmethod (:set-rs-params record-stream-input-mixin) ()
  (setq in-opcode (send target-stream :tyi))
  ;;Hack NETWORK LOSSAGE here
  (or in-opcode (ferror "Unexpected EOF on ~S" target-stream))
  (setq rs-got-buffer nil)
  (setq rs-count
	(loop with testbyte = (send target-stream :tyi)
	      for bytepos from (cond ((null testbyte)
				      (ferror "Premature EOF on ~S" target-stream))
				     ((bit-test #16r80 testbyte) 3)
				     (t (send target-stream :untyi testbyte)
					1))
	      downto 0
	      summing (lsh (or (send target-stream :tyi)
			       (ferror "Unexpected EOF on ~S during block-length for ~S"
				       target-stream self))
			   (* 8 bytepos))))
  (setq rs-state ':reading))

(defun-in-flavor (record-stream-input-paramable-state record-stream-input-mixin) ()
  (selectq rs-state
    (:reading)
    ((:eob :no-data-yet) (send self :set-rs-params))
    (t (ferror "Illegal state: ~S" rs-state))))

(defmethod (:opcode record-stream-input-mixin) ()
  (record-stream-input-paramable-state)
  in-opcode)

(defmethod (:record-length record-stream-input-mixin) ()
  (record-stream-input-paramable-state)
  rs-count)

(defmethod (:discard-current-record record-stream-input-mixin) ()
  (send self :read-until-eof)
  (send self :clear-eof))

(defmethod (:discard-input-buffer record-stream-input-mixin) (arg-buf)
  (or (eq arg-buf rs-got-buffer)
      (ferror "This isn't the buffer I gave you: ~S" arg-buf))
  (send target-stream :advance-input-buffer rs-limit)
  (setq rs-got-buffer nil))

(defmethod (:close record-stream-input-mixin :after) (&optional abort)
  (if rs-got-buffer (send self :discard-input-buffer rs-got-buffer))
  (unless (eq rs-state ':closed)
    (send target-stream :close abort)
    (setq rs-state ':closed)))

(defmethod (:clear-eof record-stream-input-mixin) ()
  (if (eq rs-state ':eob)
      (setq rs-state ':no-data-yet)))



(defflavor record-stream-8-bit-output-stream ()
	   (record-stream-output-mixin
	    buffered-output-binary-stream
	    si:unsigned-byte-8-stream)
  (:default-init-plist :array-type 'art-8b))

(defflavor record-stream-8-bit-input-stream ()
	   (record-stream-input-mixin
	    buffered-input-binary-stream
	    si:unsigned-byte-8-stream))

(defflavor record-stream-8-bit-io-stream ()
	   (record-stream-input-mixin record-stream-output-mixin
	    buffered-binary-stream
	    si:unsigned-byte-8-stream))


(compile-flavor-methods
  record-stream-8-bit-output-stream
  record-stream-8-bit-input-stream
  record-stream-8-bit-io-stream)
