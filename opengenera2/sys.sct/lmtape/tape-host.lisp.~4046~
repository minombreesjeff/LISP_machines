;;; -*- Mode: LISP; Base: 8; Package: TAPE; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
(defconst *tape-spec-keywords*			;an IBM joke
	  '((:host "machine")
	    (:device "dev" "unit")
	    (:reel "volume" "vol")
	    (:density "dens" "den")
	    (:number-of-buffers "buffers" "bufs" "buffs" "n-buffers" "n-bufs" "n-buffs")
	    (:cart-max-bytes-to-write "cart-max-bytes-to-write")
	    ;; You can screw you own programs!
	    (:record-length "length" "len" "reclen" "recsize")
	    (:granularity "gran")
	    (:minimum-record-length "minimum" "minimum-length" "minimum-record" "minrec"
	     "minreclen")))

(eval-when (compile load eval)

(defvar *tape-spec-vars*
	  '(host device reel density record-length number-of-buffers granularity
		 minimum-record-length
		 cart-max-bytes-to-write))

(defconst *numeric-tape-keywords* '(:density :number-of-buffers :record-length :granularity
					     :cart-max-bytes-to-write
				    :minimum-record-length))

(defvar *tape-spec-var-keywords-and-setters* nil))


(defmacro iterate-over-tape-spec-vars ((var kwd) &body (form) &environment env)
  (or kwd (setq kwd (gensym)))
  (let ((vars (list var kwd)))
    `(progn . ,(loop for tape-var in *tape-spec-vars*
		     collect (progv vars (list
					   tape-var
					   (or (second
						 (assq tape-var
						       *tape-spec-var-keywords-and-setters*))
					       (intern (get-pname tape-var)
						       pkg-keyword-package)))
			       (eval form env))))))

(eval-when (compile load eval)
  (setq *tape-spec-var-keywords-and-setters*
	(copytree				;get it compact
	  (loop for x in *tape-spec-vars*
		collect (list x
			      (intern (get-pname x) pkg-keyword-package)
			      (intern (string-append "SET-" x) pkg-keyword-package))))))

(defflavor tape-spec
	#.(loop for x in *tape-spec-vars* collect `(,x nil))
	()
  (:gettable-instance-variables)
  (:settable-instance-variables)
  (:initable-instance-variables))



(defmacro tape-spec-maybe-print-colon (flag &body body)
  `(when ,flag
     (cond ((not printed-colon)
	    (tyo #/: stream)
	    (tyo #\SP stream)
	    (setq printed-colon t))
	   (t (tyo #/, stream)
	      (tyo #\SP stream)))
     . ,body)) 

(defconst *tape-spec-chars-need-quoting* '(#/, #/" #/: #/=))

(defmethod (:print-self tape-spec) (stream ignore slashp)
  (if slashp (format stream "#<TAPE-SPEC for "))
  (when host
    (princ (if (eq host net:local-host)
	       "Local"
	       (send host :name))
	   stream))
  (let ((printed-colon nil))
    (tape-spec-maybe-print-colon device
      (format stream (if (string-search-set *tape-spec-chars-need-quoting* device)
			 "~S" "~A")
	      device))
    (tape-spec-maybe-print-colon reel
      (format stream "reel=")
      (format stream (if (string-search-set *tape-spec-chars-need-quoting* reel)
			 "~S" "~A")
	      reel))
    (tape-spec-maybe-print-colon density
      (format stream "den=~D" density))
    (tape-spec-maybe-print-colon cart-max-bytes-to-write
      (format stream "cart-max-bytes-to-write=~D" cart-max-bytes-to-write))
    (tape-spec-maybe-print-colon number-of-buffers
      (format stream "buffers=~D" number-of-buffers))
    (tape-spec-maybe-print-colon record-length
      (format stream "reclen=~D" record-length))
    (tape-spec-maybe-print-colon granularity
      (format stream "granularity=~D" granularity))
    (tape-spec-maybe-print-colon minimum-record-length
      (format stream "minrec=~D" minimum-record-length)))	;c/b :FULL, too.
  (if slashp
      (format stream " ~\si:address\>" (%pointer self))))

(defmethod (:copy tape-spec) (ts2)
  (iterate-over-tape-spec-vars (variable keyword)
    `(setq ,variable (send ts2 ,keyword))))


(defmethod (:merge tape-spec) (ts2)
  (iterate-over-tape-spec-vars (variable keyword)
    `(if (member
	   (setq ,variable
		 (or ,variable (send ts2 ,keyword)))
	   '("" :unspecific))
	 (setq ,variable nil))))

(defmethod (:filter tape-spec) (keywords)
  (iterate-over-tape-spec-vars (variable keyword)
    `(unless (memq ',keyword keywords)
       (setq ,variable nil))))  

(defun filter-tape-spec (tape-spec &rest keywords)
  (let ((new-spec (copy-tape-spec tape-spec) ))
    (send new-spec ':filter keywords)
    new-spec))

(defun copy-tape-spec (spec)
  (check-arg spec (typep spec 'tape-spec) "a tape specification")
  (let ((new-spec (make-instance 'tape-spec)))
    (send new-spec ':copy spec)
    new-spec))

(defun merge-tape-specs (s1 &optional s2)
  (setq s1 (parse-tape-spec s1))		;really "canonicalize", like fs:parse-pathnm
  (setq s2 (if s2
	       (parse-tape-spec s2)
	       (default-spec)))
  (cond ((null s1) (copy-tape-spec s2))
	(t 
	 (let ((snew (copy-tape-spec s1)))
	   (send snew ':merge s2)
	   (unless (or (null (send s1 ':host))
		       (eq (send s1 ':host) (send s2 ':host)))
	     (send snew ':set-device (send s1 ':device))
	     (if (member (send s1 ':device) '("" :unspecific))
		 (send s1 ':set-device nil)))
 	   snew))))

(defun parse-tape-spec (spec)
  (when spec					;NIL merges nicely
    (argument-typecase spec
      (tape-spec spec)
      (net:basic-host (make-instance 'tape-spec ':host (canonicalize-tape-host spec)))
      (:symbol (send (make-instance 'tape-spec) ':parse (string spec)))
      (:string (send (make-instance 'tape-spec) ':parse spec)))))


(defmethod (:parse tape-spec) (spec)
  (check-arg spec stringp "a string")
  (setq spec (string-trim '(#\TAB #\SPACE) spec))
  (loop with len = (string-length spec)
	with processed = nil
	with scanx = 0
	with endx and delim and nextx
	for default-delim = #/: then #/,
	for quoted-token = nil
	until (or (null scanx) ( scanx len))
	do (setq scanx (string-search-not-set '(#\SPACE #\TAB) spec scanx))
	while scanx
	do 

	(loop for tries upfrom 0
	      do
	      ;; Search for end of field
	      (setq endx (string-search-set
			   '(#/: #\SPACE #\TAB #/; #/( #/) #/, #/= #/") spec scanx)
		    delim (if (null endx) default-delim (aref spec endx))
		    nextx endx)
	      while (memq delim '(#\TAB #\SPACE #/"))
	      do
	      ;; Search for next delimiter
	      (setq nextx (string-search-not-set '(#\SPACE #\TAB) spec endx))
	      (setq delim (if (null endx)
			      default-delim
			      (aref spec nextx)))
	      while (char-equal delim #/")	;quoted mumble, c/b device or silly keyword
	      do
	      (if (> tries 0)
		  (parse-tape-spec-error spec "Bogus adjacent quoted strings!?"))
	      (multiple-value (quoted-token scanx)
		(read-quoted-string spec endx)))
	
	(selector delim char-equal
	  (#/, (if (memq ':device processed)
		   (parse-tape-spec-error spec "Duplicate device given"))
	   (setq device (if quoted-token (canonicalize-tape-device quoted-token)
			    (if (equal nextx scanx)	;c/b nil
				""
				(canonicalize-tape-device
				  (substring spec scanx endx)))))
	   (push ':device processed)
	   (setq scanx (and nextx (1+ nextx))))
	  (#/: (if (memq ':host processed)
		   (parse-tape-spec-error spec "Duplicate host given"))
	   (setq host (canonicalize-tape-host
			(or quoted-token (substring spec scanx endx))
			t))
	   (push ':host processed)
	   (setq scanx (and nextx (1+ nextx))))
	  (#/= (let ((indicator (if quoted-token
				    (look-up-tape-spec-keyword quoted-token nil nil)
				    (look-up-tape-spec-keyword spec scanx endx))))
		 (when (memq indicator processed)
		   (parse-tape-spec-error
		     spec
		     (format nil "~A multiply specified." indicator)))
		 (push indicator processed)
		 (let ((vstartx (string-search-not-set '(#\SPACE #\TAB) spec
						       (1+ nextx)))
		       val vendx)
		   (when vstartx
		     (when (char= #/" (aref spec vstartx))
		       (multiple-value (val vstartx)
			 (read-quoted-string spec vstartx)))
		     (setq vendx (string-search-char #/, spec vstartx))
		     (when (null val)
		       (setq val (string-trim '(#\SP #\TAB)
					      (substring spec vstartx vendx)))))
		   (if (or (null vstartx) (equal val "()"))
		       (setq val ""))
		   (when (memq indicator *numeric-tape-keywords*)
		     (unless (or (null val) (equal val "")
				 (and (eq indicator ':minimum-record-length)
				      (string-equal val "full")
				      (setq val ':full)))
		       (let ((pv (parse-number val 0 nil 10. t)))
			 (if pv
			     (setq val pv)
			     (parse-tape-spec-error
			       spec
			       (format nil "Non-numeric value, ~S, for keyword ~S."
				       val indicator))))))
		   (let ((set-spec (cl:find indicator *tape-spec-var-keywords-and-setters*
					    :key #'second)))
		     (unless set-spec
		       (error "Indicator ~S not understood in tape spec parse?"
			      indicator))
		     (scl:destructuring-bind (ignore indicator set-message)
			set-spec
		       (send self set-message 
			     (selectq indicator
			       (:host (unless (equal val "")
					(canonicalize-tape-host val t)))
			       (:device (if (equal val "")
					    val
					    (canonicalize-tape-device val)))
			       (otherwise val)))))
		   (setq scanx (and vendx (1+ vendx))))))
	  (t (parse-tape-spec-error
	       spec
	       (format nil "Syntax error: bad delimiter /"~C/" in context." delim)))))
  self)

(defun look-up-tape-spec-keyword (spec scanx endx)
  (if (null scanx)				;spec is entire
      (setq scanx 0))
  (loop for strings in *tape-spec-keywords*
	for sym = (car strings)
	when (loop for string in strings
		   thereis (string-equal spec string scanx 0 endx))
	return sym
	finally (parse-tape-spec-error
		  spec
		  (format nil "Unknown keyword: ~A" (substring spec scanx endx)))))

(defun read-quoted-string (spec vstartx)
  (condition-case ()
      ;;No security hole, guaranteed we have a quoted string.
      (read-from-string spec "eof" vstartx)
    (sys:end-of-file 
      (parse-tape-spec-error
	spec "Quoted string ends in middle of string." nil))))



(defflavor no-such-device (device host)
	   (mount-error)
  (:initable-instance-variables))

(defflavor tape-spec-parse-error (spec)
	   (tape-error parse-error)
  (:initable-instance-variables))

(defflavor device-not-provided ()
	   (no-such-device))

(defflavor no-tape-here ()
	   (no-such-device))

(defmethod (:report no-such-device) (stream)
  (send stream ':string-out (send self ':message)))

(defmethod (:message no-such-device) ()
  (format nil "No tape device ~S on host ~A." device host))

(defmethod (:report tape-spec-parse-error) (stream)
  (format stream "Error in tape spec ~A: ~A" spec (send self :message)))

(defmethod (:message device-not-provided) ()
  (format nil "No device was supplied for tape on host ~A.  One must be supplied." host))

(defmethod (:message no-tape-here) ()
  (format nil"There is no magnetic tape hardware on host ~A." host))

(compile-flavor-methods no-such-device tape-spec-parse-error device-not-provided
			no-tape-here)




(defprop parse-tape-spec-error t :error-reporter)
(defun parse-tape-spec-error (spec string &optional (correct-input t))
  (error 'tape-spec-parse-error
	 ':spec spec
	 ':message string
	 ':correct-input correct-input))

(defvar *default-tape-spec* nil)


(defvar *test-server* nil)

(defvar *test-server-recurse-flag* nil)
(defun make-stream (&key
		    (direction :input)		; :INPUT, :OUTPUT, :BIDIRECTIONAL,
						;although older forms are accepted.

		    spec			;A (coercible to) tape spec.  If given,
						;overrides :host, :unit, :reel,
						;:record-length, :min-r-l-granularity,
						;:min-rec-len., :number-of-buffers, :density.

		    prompt			;String used if prompting necessary.

		    no-bot-prompt		;Normally, we query if tape not at BOT.
						;If this selected, we don't.

;;;            These next 9 parameters are used to produce a default tape spec, if
;;;	       :spec is not given.  If :host is given, we assume, for compatibility,
;;;	       that the program has extracted all this info out of the user, trying
;;;	       to simulate the new tape system, and we don't prompt.

		    host			;Host. :local and "local" are acceptable, too.

		    device			;Drive identifier.  Numbers accepted.
						;NIL/unsupplied = don't care.
		    reel			;String, server may need.  This is
						;:gettable from stream.
		    record-length		;Record length
		    
		    density			;Number, whatever server likes.

		    cart-max-bytes-to-write	;simulate EOT at this point

		    (minimum-record-length nil min-r-l-supplied-p)
						;Pad any smaller than this.
		    minimum-record-length-granularity	;Pad to this boundary.
						;:FULL accepted for this and above
		    number-of-buffers		;Useful to control performance for both
						;kinds of tape.

;;;           End of tape spec parameters.

		    norewind			;Don't rewind when done.
		    
		    no-read-ahead		;Suppress all read-ahead.

		    pad-char			;What char to pad with, dft 0.

		    buffer-size			;Internal, not useful.

		    (input-stream-mode t)	;If NIL, reading gives EOF at each record end

		    lock-reason			;What to say "Tape in use by ~A"...

		    local			;old compatibility

		    unit			;ditto, for device.
		    background			;for server, = "never prompt"

		    &aux other)

  ;; Old compatibility kludges
  (setq device (or device unit))

  (when local
    (if (and host (neq host net:local-host))
	(ferror "Can't be local and remote at once."))
    (setq host net:local-host))

  (setq direction
	(loop for equivalences
		  in '((:input :read :in) (:output :write :out) (:bidirectional :both))
	      when (memq direction equivalences) return (car equivalences)
	      finally (ferror "Unknown direction for tape - ~S" direction)))

  (setq spec
	(if spec
	    (parse-tape-spec spec)
	    (make-tape-spec
	      :density density
	      :host host
	      :device device
	      :cart-max-bytes-to-write cart-max-bytes-to-write
	      :number-of-buffers number-of-buffers
	      :reel reel
	      :record-length record-length
	      :minimum-record-length minimum-record-length
	      :granularity minimum-record-length-granularity)))

  ;;; When to query.
  ;;; If we don't know the host, better query.
  ;;; But if this is local, and there's other than :cart, we'd better query unless
  ;;; we know the device, unless this is the server, where it should err later if
  ;;; ambiguous, rather than prompt.  Maybe use default-condition signallers?

  (when (or (null (send spec :host))
	    (and (eq (send spec :host) net:local-host)
		 (null (send spec :device))
		 (not background)
		 (< 1 (length (find-tape-drives)))))
	     
    (let ((dft (merge-tape-specs spec)))
      (setq spec
	    (scl:accept 'tape-spec :default dft
			:prompt
			(format nil "Type ~:[tape host or spec~;host or spec for ~:*~A~]"
				prompt)))))

  (setq host (send spec :host)
	cart-max-bytes-to-write (send spec :cart-max-bytes-to-write)
	density (or (send spec :density) 1600.)	;Odd place, but....
	device (send spec :device)
	number-of-buffers (send spec :number-of-buffers)
	reel (send spec :reel)
	record-length (or (send spec :record-length) record-length)	;this is odd too
	minimum-record-length
	(or (send spec :minimum-record-length)
	    minimum-record-length
	    (if (not min-r-l-supplied-p)
		(if pad-char
		    :full
		    (min (or record-length buffer-size 64.) 64.))))	;odder yet

	minimum-record-length-granularity (send spec :granularity))

  (do ((find-tape-drives t t)) (nil)
    (catch-error-restart-if (eq host net:local-host)
			    (no-tape-here "Look again for a tape drive, then retry tape mount")
      (catch-error-restart (error "Retry tape mount with different host or parameters (menu)")
	(setq *default-tape-spec* spec)
	(return
	  (cond ((or (neq host net:local-host)
		     (and *test-server* (not *test-server-recurse-flag*)))
		 (let-globally-if *test-server*	;must be (not *flag*) if we're here...
				  ((*test-server-recurse-flag* t))
		   (lexpr-funcall 'net:invoke-service-on-host :tape host
				  :direction direction :unit device
				  :no-read-ahead no-read-ahead
				  :pad-char pad-char
				  :buffer-size buffer-size :density density
				  :record-length record-length :reel reel
				  :no-bot-prompt no-bot-prompt
				  :norewind norewind
				  :host host
				  :minimum-record-length minimum-record-length
				  :minimum-record-length-granularity
				  minimum-record-length-granularity
				  :cart-max-bytes-to-write
				  (send spec :cart-max-bytes-to-write)
				  (if (memq direction '(:input :bidirectional))
				      (list :input-stream-mode input-stream-mode)))))
		((not (tape-exists-p))
		 (error 'no-tape-here :host net:local-host))
		((null device)
		 (error 'device-not-provided  :host net:local-host))
		#+imach
		((equal device "CART")
		 (tape-drive-make-stream
		   (first (find-tape-drives))
		   :direction direction
		   :no-read-ahead no-read-ahead :pad-char pad-char
		   :input-stream-mode input-stream-mode
		   :record-length record-length :buffer-size buffer-size
		   :norewind norewind :reel reel :no-bot-prompt no-bot-prompt
		   :lock-reason (or lock-reason "local machine")
		   :minimum-record-length minimum-record-length
		   :minimum-record-length-granularity
		   minimum-record-length-granularity
		   :number-of-buffers number-of-buffers
		   :background background
		   :density density
		   :cart-max-bytes-to-write cart-max-bytes-to-write))
		((dolist (tape-drive (find-tape-drives))
		   (when (tape-drive-device-match tape-drive device)
		     (return (tape-drive-make-stream
			       tape-drive
			       :direction direction
			       :no-read-ahead no-read-ahead :pad-char pad-char
			       :input-stream-mode input-stream-mode
			       :record-length record-length :buffer-size buffer-size
			       :norewind norewind :reel reel :no-bot-prompt no-bot-prompt
			       :lock-reason (or lock-reason "local machine")
			       :minimum-record-length minimum-record-length
			       :minimum-record-length-granularity
			       minimum-record-length-granularity
			       :number-of-buffers number-of-buffers
			       :background background
			       :density density
			       :cart-max-bytes-to-write cart-max-bytes-to-write)))))
		(t (error 'no-such-device :device device :host net:local-host)))))
      ;;Placate choose-variable-values
      (setq other host)
      (tv:choose-variable-values
	`(,@(and prompt (list (string-append "For " prompt) ""))	
	  "(Blank = Don't care//any)"
	  (,(locf host) "Host" :assoc
	   ,(let ((hosts (nconc (cl:sort (loop for h in (likely-tape-hosts host)
					       collect (cons (printable-tape-host h) h))
					 #'string-lessp :key #'first)
				(ncons (cons "Other" "Other")))))
	      (or (rassq host hosts) (setq host "Other"))
	      hosts))
	  (,(locf other) "(/"Other/" value of above)" :host-or-local)
	  (,(locf reel) "Reel name" :string-or-nil)
	  (,(locf device) "Tape drive or unit" :string-or-nil)
	  (,(locf density) "Density" :assoc
	   (("6250" . 6250.)
	    ("3200" . 3200.)
	    ("1600" . 1600.)
	    ("800" . 800.) ("556" . 556.) ("200" . 200.)))
	  (,(locf record-length) "Record Length" :decimal-number)
	  )
	:label "Tape parameters"
	:margin-choices
	'("Retry mount" ("Abort program" . ((signal 'abort)))))
      (setf find-tape-drives nil)
      (setq host (if (equal host "Other") other host)))
    (when find-tape-drives 
      (find-tape-drives t))))

(defun default-spec ()
  (or *default-tape-spec* (default-default-tape-spec)))
(defun default-default-tape-spec ()
  (let ((host (default-host)))
    (make-tape-spec :host host :device (default-tape-unit-number host))))
		      
(defun make-tape-spec (&key host device reel density number-of-buffers record-length
		       cart-max-bytes-to-write
			  granularity minimum-record-length)
  (make-instance 'tape-spec
      ':host (canonicalize-tape-host host t)
      ':device (canonicalize-tape-device device)
      ':reel reel
      ':density density
      :cart-max-bytes-to-write cart-max-bytes-to-write
      ':number-of-buffers number-of-buffers
      ':record-length record-length
      ':granularity granularity
      ':minimum-record-length minimum-record-length))


;;; For now we only support the Pertec FS2001.
(defvar *tape-model-alist* '(("pertec-fs2001" 6250.)))

;;; Determine the default tape unit number for the given host from the namespace.
(defun default-tape-unit-number (host)
  (or (loop for (type option-list) in (send host :get :peripheral) doing
	(when (eq type :tape)
	  (return (loop for (option value) in option-list doing
		    ;; There used to be some nifty error-checking code here, but we really have
		    ;; no right to restrict the values, since the host might not be a Lispm
		    (when (eq option :unit)
		      (return value))))))
      (and (eq host net:*local-host*)
	   (let ((tapes (find-tape-drives)))
	     (and (not (null tapes))
		  (tape-drive-device (first tapes)))))
      (and (typep host 'net:host)
	   (cl:string-equal (send host :machine-type) "Sun" :end1 3)
	   "st0")
      "Cart"))

;;; Determine the default tape density for the local host from the namespace.
(defun default-tape-density (host)
  (let ((default-default-tape-density 1600.)	;If we find nothing in the namespace.
	(peripheral-list (send host :get :peripheral)))

    (dolist (peripheral peripheral-list)
      (when (eql (car peripheral) :tape)
	(let ((option-list (cadr peripheral)))
	  (dolist (option option-list)

	    ;; When we find the :MODEL option, derive and remember the default density.
	    (when (eql (car option) :model)
	      (let ((model-density (cadr (assoc (cadr option) *tape-model-alist*))))
		(unless (null model-density)
		  (setq default-default-tape-density model-density))))

	    ;; When we find the :DEFAULT-DENSITY option, we've got what we're after.
	    (when (eql (car option) :default-density)
	      (return-from default-tape-density
		(condition-case ()		;Handle garbage in the namespace gracefully.
		     (cl:parse-integer (cadr option))
		   (ferror default-default-tape-density))))))))

    default-default-tape-density))		;No :DEFAULT-DENSITY specified - use default.


(defun default-tape-spec (&key host
			  (device nil device-p)
			  (reel nil reel-p)
			  cart-max-bytes-to-write
			  (density nil density-p)
			  number-of-buffers record-length
			  granularity minimum-record-length spec)

  (if (and reel (stringp reel)) (setq reel (string-trim '(#\SP #\TAB) reel)))
  (if (equal reel "") (setq reel nil))

  (let ((tentative-answer
	  (merge-tape-specs
	    (make-tape-spec
	      ':host host
	      ':device device
	      ':reel reel
	      ':density density
	      ':cart-max-bytes-to-write cart-max-bytes-to-write
	      ':number-of-buffers number-of-buffers
	      ':record-length record-length
	      ':granularity granularity
	      ':minimum-record-length minimum-record-length)
	    (if spec
		(merge-tape-specs spec (default-spec))
		(default-spec)))))

    ;; Try not to carry REEL around, otherwise menus can't set it NIL.
    (if reel-p (send tentative-answer ':set-reel reel))

    ;; If we weren't explicity told about DEVICE and DENSITY, try to derive them from
    ;; the namespace.
    (let ((tentative-host (send tentative-answer ':host)))
      (unless device-p
	(send tentative-answer ':set-device (default-tape-unit-number tentative-host)))
      (unless density-p
	(send tentative-answer ':set-density (default-tape-density tentative-host))))

    tentative-answer))
(defun default-host ()
  (cond ((tape-exists-p) net:*local-host*)	;all 3600's have cart HORSE-SHIT!
	;; If we're embedded in a Unix system, assume it has a drive.  Bogus, but we
	;; certainly don't have one...
	((and (variable-boundp net:*emb-host*)
	      (eq (send net:*emb-host* :system-type) :unix42))
	 net:*emb-host*)
	((car (find-tape-service-hosts)))
	(t net:*local-host*)))				;Beats us.

(defun printable-tape-host (host)		;MUST be canonical.
  (cond ((null host) "???")
	((stringp host) host)
	((eq host net:local-host) "Local")
	((instancep host) (send host ':name))
	(t (string host))))

(defun canonicalize-tape-host (host &optional error-p)		;not nil
  (if (stringp host)
      (setq host (string-trim '(#\SP #\TAB) host)))
  (if (equal host "")
      (setq host nil))
  (when (not (null host))
    (cond ((or (eq host ':local)
	       (equal host "local"))
	   net:local-host)
	  ((si:parse-host host (not error-p)))
	  (t (format error-output "/"~A/" is not a known host." host)
	     nil))))

(defun canonicalize-tape-device (device)
  (if (stringp device) (setq device (string-trim '(#\SP #\TAB) device)))
  (cond ((equal device "") nil)
	((numberp device) (format nil "~D" device))
	((stringp device) device)
	((null device) nil)
	((symbolp device) (get-pname device))
	(t (ferror "Can't understand ~S, a ~S, as a tape device designator."
		   device (typep device)))))

(defvar *host-user-id-alist* nil)

(defun tape-host-initialize ()
  (setq *host-user-id-alist* nil)
  (setq *default-tape-spec* nil))

(add-initialization "TAPE-HOST" '(tape-host-initialize))	;warm/cold

(defun host= (h1 h2)
  (or (equal h1 h2)
      (progn (setq h1 (si:parse-host h1 t))
	     (and h1 (eq (si:parse-host h2 t) h1)))))

(defun likely-tape-hosts (&optional suggested-host)
  (let ((hosts (find-tape-service-hosts)))
    (or (null suggested-host)
	(mem #'host= suggested-host hosts)
	(push suggested-host hosts))
    #|
    (or (null *default-tape-host*)
	(mem #'host= *default-tape-host* hosts)
	(push *default-tape-host* hosts))
    |#
    (setq hosts (del #'host= si:local-host hosts))
    (cond ((tape-exists-p)			;works either machine
	   (or (mem #'host= net:local-host hosts)
	       (push net:local-host hosts))))
    hosts))

(defun find-tape-service-hosts ()
  (let ((sys-host (send (fs:get-pathname-host "sys") ':default-host)))
    (flet ((desirability (host)
	     (+ (if (eq (send host :system-type) ':lispm) 8 0)
		(if (eq (send host :machine-type) :|3600|) 4 0)
		(if (eq host sys-host) 2 0))))
       (sort (neti:searching-one-site (net:*local-site*)
	       (net:find-objects-from-property-list
		 ':host ':site net:*local-site* ':service '((:tape :* :*))))
	     #'(lambda (h1 h2)
		 (> (desirability h1) (desirability h2)))))))

(define-presentation-type tape-spec ()
   :no-deftype t
   :history t
   :parser ((stream)
	    (dw:with-accept-help
		((:subhelp (lambda (stream string-so-far)
			     (ignore string-so-far)
			     (tape-spec-help stream))))
	      (let ((loc (send stream :read-location))
		    (spec))
		(loop named improve-spec
		      as token =
			 (dw::with-accept-activation-chars ('(#\Complete))
			   (dw:read-standard-token stream))
		      do
		  (when (equal token "")
		    (error 'dw:input-not-of-required-type :type 'tape-spec :string ""))
		  (si:with-parse-ferror (unknown-host-name)
		    (setq spec (merge-tape-specs token))	;its all visible.
		    (dw::presentation-replace-input
		      stream loc (cl:with-output-to-string (x) (princ spec x))))
		  (unless (dw::compare-char-for-accept
			    (dw::peek-char-for-accept stream)
			    #\Complete)
		    (return-from improve-spec spec))))))
   :printer ((object stream) (princ object stream))
   :description "a tape spec")

(defun read-tape-spec (&optional (stream standard-input) default)
  (scl:accept 'tape-spec :stream stream
	      :default (or default
			   (dw:presentation-type-default 'tape-spec)
			   (default-tape-spec)
			   )))


(define-prompt-and-read-type tape-spec
			     (default)
			     ("a tape spec~@[, with default ~A~]" default)
  (read-tape-spec query-io default))

(defprop tape-spec
	 (tv:princ-or-nil read-tape-spec nil nil nil "Enter a tape spec.")
	 tv:choose-variable-values-keyword)

(defvar *tape-spec-help-1* 
"You are required to type a tape spec.  A tape spec specifies what tape drive
on what host will be used.  Various other options, such as density and granularity
may be supplied to override program- or default- derived values for these parameters.
If you type a carriage return alone, the supplied default will be used.
The simplest tape spec is simply a host name, meaning the default drive on that machine.
Sample tape specs:
  Hostname					;use default device
  Hostname:0
  :cart						;use that device on default host
  ,density=1600
  :1,density=1600
  density=1600					;= sign implies it's not a host
  record-length=4096,granularity=		;missing parameter turns off default value
  device=cart,host=Hostname			;Alternate locutions
")

(defvar *tape-spec-help-2* "
Trailing colon implies preceding token was a host.
First token after a colon is a device if not followed by an =.
Quotation marks (/"/") are necessary to quote strings containing commas, colons, =, etc.

You can yank the default tape spec and edit it with c-m-Y.
")

(defun tape-spec-help (stream)
  (princ *tape-spec-help-1* stream)
  (tape-spec-option-help stream)
  (princ *tape-spec-help-2* stream))

(defun tape-spec-option-help (stream)
  (format stream "~%Known alterable parameters and short names:~%")
  (loop for opts in *tape-spec-keywords* do
	(setq opts (mapcar #'string-downcase opts))
	(format stream "~&  ~A~12T" (car opts))
	(format:print-list stream "~A" (cdr opts))))

(defun initialize-tape-user-interface ()
  (find-tape-service-hosts)
  (dw::push-for-presentation-type (dw::find-accept-history 'tape-spec)
				  (default-tape-spec)
				  'tape-spec))

(add-initialization "Local tape hosts"
		    '(initialize-tape-user-interface)
		    nil
		    'neti:commonly-used-property-lists)
(defun tape-exists-p ()
  (not (null (find-tape-drives))))
;;Kind of heuristic until we fix RTAPE.  It will always be heuristic
;;for QIC-11 drives since they don't use formatted cartridges, and do
;;read-after-write error correction.
(defun get-cart-guaranteed-capacity (host unit &optional (assume-nine-track nil))
  (let* ((host (si:parse-host host))
	 (machine-type (if (neti:ns-eq host net:*local-host*)
			   (si:machine-model)
			   (send host :machine-type)))
	 (unit (or (and (numberp unit) unit)
		   (and (stringp unit) (digit-char-p (aref unit 0)) (sys:parse-number unit))
		   unit)))
    (cond
      ;; Check for a TAPE-CAPACITIES user property on the host object --
      ;; If it's present, it's either the capacity (in megabytes) or
      ;; an ALIST of tape unit and capacity (again, in megabytes).
      ;; If the ALIST is used, the keyword :DEFAULT can be used to specify
      ;; the capacity for units not explicitly listed in the ALIST.
      ((let* ((property (send host :user-get :tape-capacities))
	      (parsed-property (and property (read-from-string property))))
	 (when parsed-property
	   (multiple-value-bind (capacity)
	       (flet ((convert (token)
			(if (numberp token)
			    token
			    (sys:parse-number token 0 nil 10. t))))
		 (if (atom parsed-property)
		     (convert parsed-property)
		     (let ((token (or (cl:assoc unit parsed-property :test #'cl:equalp)
				      (cl:assoc :default parsed-property))))
		       (and token
			    (convert (second token))))))
	     (and capacity
		  (* capacity 1024. 1024.))))))
      ((cl:member  machine-type '(:XL400 :XL1200 :XL1201 :MB400
					 :MacIvory :|MacIvory model 1|
					 :|MacIvory model 2| :|MacIvory model 3|))
       (* QIC-100-block-size
	  (- minimum-number-of-blocks-on-QIC-100-tape
	     (+ number-of-QIC-100-header-blocks-reserved
		;;safty factor which theoretically shouldn't be necessary,
		;;except some clients like to write up to 128 blocks past
		;;the end of the tape.
		number-of-QIC-100-blocks-reserved-for-safety-margin))))
      (t
       ;;Should be one of the 36xx machines.  If not, we might as well use
       ;;the conservative 36xx numbers.
       (if assume-nine-track
	   +cart-9track-max-length+
	   +cart-4track-max-length+)))))
