;; -*- Mode: Lisp; Package: Mailer; Base: 10.; Syntax: ZetaLisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Mailer utility routines

;; Macros

0(defmacro (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")setf-nconc0 (field item) `(setf ,field (nconc ,field (ncons ,item))))

(defmacro 2set-time0 (field) `(setf ,field (time:get-universal-time)))

(defmacro 2define-interval0 (name interval)
  `(defvar ,name (time:parse-interval-or-never ,interval)))

(defmacro 2define-interval-600 (name interval)
  `(defvar ,name (parse-interval-60 ,interval)))

(defmacro 2define-forwarded-messages0 ((flavor variable) &body messages)
  `(eval-when (eval load)
     . ,(loop for message in messages
	      collect `(defmethod (,message ,flavor) (&rest forwarded-args)
			 (lexpr-send ,variable ',message forwarded-args)))))

1;; Initializations which happen at special times

0(defun 2add-variable0 (symbol value variable-list)
  (let ((entry (assq symbol (symeval variable-list))))
    (if entry
	(setf (cadr entry) value)
	(setf-nconc (symeval variable-list) (list symbol value)))))

(defun 2initialize-variable-list0 (variable-list)
  (loop for (symbol value) in variable-list do
	(set symbol (eval value))))

(defun 2define-variable0 (symbol value variable-list)
  `(progn 'compile
	  (defvar ,symbol ,value)
	  (add-variable ',symbol ',value ',variable-list)))

(defvar 2environment-variables0 nil)
(defun 2initialize-environment0 () (initialize-variable-list environment-variables))
(defmacro 2defenv0 (symbol value) (define-variable symbol value 'environment-variables))

(defvar 2option-variables0 nil)
(defmacro 2define-option0 (symbol value) (define-variable symbol value 'option-variables))

(defvar2 option-computations0 nil)

(defun2 add-option-computation0 (form)
  (eval form)
  (unless (member form option-computations)
    (setf-nconc option-computations form)))



1;; Dates and Times

0(defun 2parse-interval-600 (interval) (* 60. (time:parse-interval-or-never interval)))

(defun2 print-header0 (stream recipients &optional (subject nil) user host)
  (unless user
    (setq user (first (send si:*user* :mail-address))))
  (unless host
    (setq host (second (send si:*user* :mail-address))))
  (labels ((2header-host-name0 (host)
	     (let ((parse-host (parse-host host t)))
	       (if parse-host
		   (send parse-host :mail-name)
		   host)))
	   (2print-header-recipient0 (stream recipient)
	     (if (listp recipient)
		 (format stream "<~A@~A>" (car recipient) (header-host-name (cdr recipient)))
		 (format stream "~A" recipient))))
    (cl:write-string "Date: " stream)
    (zwei:print-date (cl:get-universal-time) stream :rfc822)
    (format stream "~%From: <~A@~A>~@
                   ~@[Subject: ~A~%~]~
                      Message-ID: ~A~@
                      To: "
	    user (header-host-name host) subject (zwei:generate-standard-message-id))
    (if (atom recipients)
	(print-header-recipient stream recipients)
	(loop for list on recipients do
	  (print-header-recipient stream (car list))
	  (if (cdr list) (send stream :string-out ", "))))
    (format stream "~2%")))

(defun2 discard-line0 (stream) (discard-to-string stream #.(format nil "~%")))
(defun2 discard-to-blank-line0 (stream) (discard-to-string stream #.(format nil "~2%")))

1;; Searches for a string in a stream, and discards all input up to and including that
;; string.  Returns T if it read up to the string.  Returns NIL if it reached the end of
;; the file.  If the stream supports :READ-INPUT-BUFFER natively, this is the most
;; efficient way.  Otherwise, we should use a :TYI/:TYO loop.  This doesn't handle
;; the case of the string being broken across buffer boundaries.

0(defun2 discard-to-string0 (stream string &aux buffer index limit)
  (loop with length = (string-length string)
	do (multiple-value (buffer index limit) (send stream :read-input-buffer))
	while buffer
	do (setq index (string-search string buffer index limit))
	   (send stream :advance-input-buffer (if index (+ index length) nil))
	until index
	finally (return (if buffer t nil))))

1;; Copy from one stream to another using :LINE-IN and :LINE-OUT operations, until either a
;; blank line or EOF is seen.  If a blank line is seen, return T.  Otherwise, return NIL.

0(defun2 stream-copy-to-blank-line0 (from-stream to-stream &optional leader-size)
  (do ((line) (eof))
      (nil)
    (multiple-value (line eof)
      (funcall from-stream :line-in leader-size))
    (if eof (return nil))
    (if (zerop (fill-pointer line)) (return t))
    (send to-stream :line-out line)))

1;; These are for local delivery to LMFS file systems only.

0(defun2 get-recipient-home-directory0 (name)
  (fs:make-pathname :host *local-host* :directory :root
		    :raw-name name :type :directory :version :newest))

(defun2 get-recipient-mail-file0 (name)
  (fs:make-pathname :host *local-host* :raw-directory (list name)
		    :raw-name "mail" :raw-type "text" :version :newest))

1;; This cache is used only to speed up recipient verification during mail receipt.  When
;; local delivery is taking place, the file system is looked at directly, and the cache is
;; updated if it is invalid.  Clear the cache before a disk save since the band may
;; be moved to another machine with a different file system.  PROBE-RECIPIENT-CACHE
;; is about 10 times faster than PROBE-RECIPIENT-DIRECT.

0(defvar2 probe-recipient-cache0 (make-equal-hash-table :size 200.))

(defun2 probe-recipient-cache0 (name)
  (let ((cache (send probe-recipient-cache :get-hash name))
	(probe))
    (cond (cache)
	  (t (setq probe (su:probe-path :file (get-recipient-home-directory name)))
	     (if probe (send probe-recipient-cache :put-hash name t))
	     probe))))

(defun2 probe-recipient-direct0 (name)
  (let ((cache (send probe-recipient-cache :get-hash name))
	(probe (su:probe-path :file (get-recipient-home-directory name))))
    (if (neq cache probe)
	(send probe-recipient-cache :put-hash name probe))
    probe))

(add-initialization "Clear recipient cache" '(send probe-recipient-cache :clear-hash)
		    '(:before-cold))

1;; The implications of FS:NO-MORE-ROOM, FS:DIRECTORY-NOT-FOUND, FS:CREATION-FAILURE,
;; FS:FILE-LOCKED, FS:NOT-AVAILABLE being signalled while inside this function need to be
;; thought about, and handled at a higher level.  These have to be translated into
;; generic protocol errors.

;; FS:FILE-OPEN-FOR-OUTPUT may be signalled while inside this function.  It is up to the
;; caller to provide any necessary locking.

0(defun2 append-to-mail-file0 (mail-file function &rest args)
  (with-open-file (stream mail-file :direction :output :element-type 'cl:string-char
				    :if-exists :append :if-does-not-exist :create)
    (lexpr-funcall function stream args)
    (send stream :fresh-line)
    (send stream :line-out "")))


1;; Don't call the full parser for the simple case

0(defun2 parse-address0 (string)
  (if (string-search-set '(#\space #\tab #\. #\, #\@ #\%) string)
      (zwei:parse-one-address string)
      `(:name ,string)))

1;;; Recipient structure

0(defflavor2 recipient
0	(address				;Zmail form of recipient
	 printed-representation			;String form
	 host					;Host object that is first step to host
	 )
	()
  :gettable-instance-variables
  (:settable-instance-variables host)
  :initable-instance-variables)

(defmethod2 (:print-self recipient)0 (stream ignore slashify-p)
  (if slashify-p
      (printing-random-object (self stream :typep)
	(send stream :string-out printed-representation))
      (send stream :string-out printed-representation)))

(defmethod2 (:init recipient)0 (ignore)
  (unless (or (variable-boundp address) (variable-boundp printed-representation))
    (ferror "Neither address nor printed representation specified."))
  (cond ((not (variable-boundp address))
	 (setq address (parse-address printed-representation)))
	((not (variable-boundp printed-representation))
	 (setq printed-representation (zwei:string-from-header address :short))))
  (unless (variable-boundp host)
    (multiple-value-bind (host-object host-string)
	(address-first-hop address t)
      (setq host (parse-mailer-host (or host-object host-string)
				    :host-must-exist nil
				    :host-must-have-mail-service nil)))))

(defmethod2 (:name recipient)0 ()
  (get (locf address) :name))

(defmethod2 (:file recipient)0 ()
  (get (locf address) :file))

(defun2 make-recipient0 (&rest args)
  (lexpr-funcall #'make-instance 'recipient args))

1;;; Canonicalize a Zmail address before converting it into a Mailer recipient --
;;;    Strip away the local host as long as it's the first hop to the address.
;;;    Finally, if the address is still local, handle 0"%"1 and 0"@"1 in the mailbox
;;;    part of the address.

0(defun2 canonicalize-address-for-recipient0 (address)
  (declare (values address host))
  (let ((address-copied nil))
    (macrolet ((copy-address-if-necessary ()
		 `(unless address-copied
		    (cl:setf address (copytree address)
			     address-copied t)))
	       (stop-if-not-local ()
		 `(unless (neti:ns-eq host *local-host*)
		    (return (values address host))))
	       (make-local ()
		 `(cl:setf (cl:getf address :host) `(:object ,*local-host*))))
      (let ((user (cl:getf address :user)))
	(when user
	  (copy-address-if-necessary)
	  (scl:destructuring-bind (name host) (send user :mail-address)
	    (cl:setf (cl:getf address :name) name
		     (cl:getf address :host) `(:object ,host)
		     (cl:getf address :personal-name) (send user
							    :personal-name-first-name-first))
	    (cl:remf address :user))))
      (loop doing
	(multiple-value-bind (host host-string route path)
	    (address-first-hop address t)
	  (cond (host-string
		 1;; Couldn't convert the first hop into a host so we can do nothing more here.
0		 (return (values address host-string)))
		((and host (or path route))
		 1;; Know the first hop and it came from a route or path --
		 ;;    Strip the first hop if it's local and then try again.
0		 (stop-if-not-local)
		 (copy-address-if-necessary)
		 (if route
		     (let ((new-route (cl:rest route)))
		       (if (null new-route)
			   (cl:remf address :route)
			   (cl:setf (cl:getf address :route) new-route)))
		     (let ((new-path (butlast path)))
		       (if (null (cl:rest path))
			   (cl:remf address :host)
			   (cl:setf (cl:getf address :host) new-path)))))
		((and (not (neti:ns-eq host *local-host*))
		      (cl:getf address :host-defaulted))
		 1;; Host in the address was defaultly specified --
		 ;;    Must be local as this address attribute is never transmitted.
0		 (copy-address-if-necessary)
		 (make-local))
		((null host)
		 1;; No host in the address at all -- Must be local.
0		 (copy-address-if-necessary)
		 (make-local))
		((and (not (neti:ns-eq host *local-host*))
		      (all-mail-addresses-forward-between-hosts-p *local-host* host)
		      (multiple-value-bind (recipient local?)
			  (mailbox-get (cl:getf address :name))
			(and recipient (not local?))))
		 1;; First hop didn't come from a route or path but it's a host in our
		 ;; mail area and the actual recipient is a globally defined name --
		 ;;   Treat this as a local address.
0		 (copy-address-if-necessary)
		 (make-local))
		(t
		 1;; First hop is a host -- Perform optimizations if appropriate.
0		 (stop-if-not-local)
		 (let* ((name (cl:getf address :name))
			(routing-char-index (string-reverse-search-set "%@" name)))
		   (when (null routing-char-index)
		     (return (values address host)))
		   (let ((new-host (zwei:parse-domain-or-host name (1+ routing-char-index))))
		     (copy-address-if-necessary)
		     (cl:setf (cl:getf address :name) (substring name 0 routing-char-index)
			      (cl:getf address :host) new-host))))))))))
