D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; -*- Mode: Lisp; Package: Mailer; Base: 10.; Syntax: ZetaLisp; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;; Directories and Files

;; These locations should be in the mailer parameters file.

0(defenv(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") home-location0 (or (send neti:*local-host* :user-get :mail-pathname)
			  #-VLM "Local:>mail>"
			  #+VLM "HOST://var//lib//symbolics//mailer.sct//"))

(defenv 2home-directory0 (su:new-pathname (fs:parse-pathname home-location) "" "" 1))
(defenv 2file-host0 (send home-directory :host))

(defenv 2static-directory0   (su:new-directory home-directory "Static"))
(defenv 2logs-directory0	   (su:new-directory home-directory "Static"))	1;Compatible with 7.1.
0(defenv 2dynamic-directory0  (su:new-directory home-directory "Dynamic"))
(defenv 2hardcopy-directory0 (su:new-directory home-directory "Hardcopy"))

(defenv 2*log-file-maximum-size*0 su:*log-file-default-maximum-size*)
(defenv 2*log-file-generation-retention-count*0 su:*log-file-default-generation-retention-count*)

(defun 2set-mailer-log-directory0 ()
  (declare (special *mailer-log*))
  (when (and (variable-boundp *mailer-log*)
	     *mailer-log*)
    (cl:setf (su:log-file-directory *mailer-log*) logs-directory
	     (su:log-file-maximum-size *mailer-log*) *log-file-maximum-size*
	     (su:log-file-generation-retention-count *mailer-log*) *log-file-generation-retention-count*)))

(add-option-computation '(set-mailer-log-directory))

(defun 2create-directories0 ()
  (su:create-server-directory home-directory)
  (su:create-server-directory static-directory)
  (unless (eq static-directory logs-directory)
    (su:create-server-directory logs-directory))
  (su:create-server-directory dynamic-directory)
  (su:create-server-directory hardcopy-directory))

(defprop 2directory0 "Directory setup" herald)

(defun2 (directory cold-boot)0 ()
  (su:log-event :normal "Probing for home directory ~A" (su:directory-string home-directory))
  (if (su:probe-path :directory home-directory)
      (progn
	(su:check-server-directory static-directory)
	(su:check-server-directory logs-directory)
	(su:check-server-directory dynamic-directory)
	(su:check-server-directory hardcopy-directory)
	(unless (eq logs-directory static-directory)
	  1;; Different directory for logs --
0	  1;;    2su:open-log-file1 won't expunge the static directory for us so do it now.
0	  (su:expunge-server-directory static-directory t))
	(su:expunge-server-directory dynamic-directory t)
	(su:expunge-server-directory hardcopy-directory t))
      (create-directories)))

(defun 2(directory warm-boot)0 ()
  (su:log-event :normal "Using home directory ~A" (su:directory-string home-directory)))

1;; Breathing room

0(defvar 2breathing-room-amount0 200000.)
(defenv 2breathing-room-pathname0 (su:new-pathname dynamic-directory "Breathing" "Room"))

(defun 2allocate-breathing-room0 (note?)
  (if (su:probe-path :file breathing-room-pathname)
      (when note?
	(su:log-event :normal "~D bytes are allocated to ~A"
		      breathing-room-amount breathing-room-pathname))
      (condition-case (error)
	   (su:allocate-server-file breathing-room-pathname breathing-room-amount)
	 (fs:no-more-room
	   (su:log-event :normal "Not enough room to start the mailer")
	   (throw 'foreground-abort error)))))

(defun 2(breathing-room cold-boot)0 ()
  (allocate-breathing-room nil))

(defun 2(breathing-room warm-boot)0 ()
  (allocate-breathing-room t))

(defprop 2breathing-room0 "Space setup" herald)
