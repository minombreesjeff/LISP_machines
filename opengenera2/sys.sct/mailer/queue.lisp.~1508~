D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; -*- Mode: Lisp; Package: Mailer; Base: 10.; Syntax: ZetaLisp; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;; Queues

;; This flavor implements FIFO queues of objects which support the :LINK and :SET-LINK
;; messages.  The :SET-LINK message must accept any object as its argument, and
;; must remember that object.  The :LINK message must return NIL for an object which
;; has never been in any queue.  Otherwise, it must return whatever was the argument
;; to the last :SET-LINK message.  These messages have the following interpretation:
;;
;;  :LINK returns NIL		The object is not in any queue
;;  :LINK returns non-NIL	The object is in some queue
;;  :SET-LINK of NIL		The object is being removed from the queue
;;  :SET-LINK of non-NIL	The object is being entered into a queue.

;; Queues have as components a head, a tail, and a length.  The purpose of the tail is to
;; make adding objects to the end of the queue fast.  The purpose of the length is to make
;; determining the length of the queue fast.  The head points to the first object in the
;; queue and the tail points to the last object in the queue.  The object at the head
;; of the queue points to the next object in the queue, and so on.  The last object in
;; the queue points to the queue itself.  There are two reasons for treating the last
;; object this way.  (1) We can easily determine if an object is in any queue by
;; seeing what is returned by the :LINK message to that object.  (2) Given an object
;; in a queue, we can find the queue that it is in by following the links to an object
;; of type queue.  Queues of queues are not allowed.

0(defflavor (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")queue
0	(name state head tail length processes)
	()
  (:gettable-instance-variables name state head length)
  (:initable-instance-variables name state))

(defmethod 2(:print-self0 2queue)0 (stream ignore slashify-p)
  (if slashify-p
      (printing-random-object (self stream)
	(format stream "~A (~[empty~;1 entry~:;~:*~D entries~])" NAME LENGTH))
      (send stream :string-out name)))

(defmethod 2(:init0 2queue0 2:after)0 (ignore)
  (without-interrupts
    (setf head nil)
    (setf tail nil)
    (setf length 0)
    (setf processes nil)))

(defmethod 2(:register-interested-process queue)0 (process)
  (cl:pushnew process processes))

(defmethod 2(:enqueue0 2queue)0 (object)
  (let ((link nil))
    (without-interrupts
      (setq link (send object :link))
      (unless link
	(send object :set-link self)
	(incf length)
	(cond ((null tail)
	       (setf tail object)
	       (setf head object)
	       (dolist (process processes)
		 (when (process-active-p process)
		   (process:wakeup process))))
	      (t
	       (send tail :set-link object)
	       (setf tail object)))))
    (when link
      (su:log-event :problem "Attempt to enter ~A into ~A, which is already in some queue"
		    object self))))

1;; Attempting to dequeue a message from an empty queue is not an error.  This is more
;; convenient, since then it is not necessary to atomically check if the queue is full and
;; then dequeue.

0(defmethod 2(:dequeue0 2queue)0 ()
  (let ((object nil))
    (without-interrupts
      (when head
	(setq object head)
	(setf head (send object :link))
	(send object :set-link nil)
	(decf length)
	(cond ((eq head self)
	       (setf head nil)
	       (setf tail nil)))))
    object))

(defmethod 2(:print-summary0 2queue)0 (stream)
  (dw:with-redisplayable-output (:stream stream
				 :unique-id self)
    (dw:redisplayable-format stream "~A:~20T" self)
    (dw:with-redisplayable-output (:stream stream
				   :cache-value length)
      (format stream "~[Empty~;1 entry, ~:;~:*~D entries, beginning with ~]" length))
    (dw:with-redisplayable-output (:stream stream
				   :cache-value head)
      (when (plusp length)
	(princ head stream))))
  (terpri stream))

(defmethod 2(:warm-boot0 2queue)0 ()
  (su:log-event :normal "~A ~[is empty~;has 1 entry, ~A~:;has ~:*~D entries, beginning with ~A~]"
	self length head))

(defmethod 2(:cold-boot0 2queue)0 ()
  (when head
    (su:log-event :normal "Clearing ~A" self)
    (loop while (send self :dequeue))))

(compile-flavor-methods 2queue0)

(defvar 2*queues*0 nil)

(defun2 make-queue0 (name state)
  (let ((queue (make-instance 'queue :name name :state state)))
    (setf-nconc *queues* queue)
    queue))

(defun 2map-queues0 (operation &rest args)
  (dolist (queue *queues*)
    (lexpr-send queue operation args)))

(defun 2queue-summary0 (&optional (stream standard-output))
  (flet ((psuedo-queue-summary (id name count)
	   (dw:with-redisplayable-output (:stream stream
					  :unique-id id)
	     (dw:redisplayable-format stream "~A queue:~20T" name)
	     (dw:with-redisplayable-output (:stream stream
					    :cache-value count)
	       (format stream "~[Empty~;1 entry~:;~:*~D entries~]" count)))
	   (terpri stream)))
    (let ((active-queue-count 0)
	  (retransmit-queue-count 0))
      (map-messages #'(lambda (message in-use? ignore)
			(when in-use?
			  (cl:case (send message :state)
			    ((:foreground-process :delivery-process :slow-delivery-process)
			     (incf active-queue-count))
			    (retransmit
			      (incf retransmit-queue-count))))))
      (psuedo-queue-summary 'active-queue "Active" active-queue-count)
      (map-queues :print-summary stream)
      (psuedo-queue-summary 'retransmit-queue "Retransmit" retransmit-queue-count))))

(defvar 2incoming-queue0 (make-queue "Incoming queue" 'incoming-queue))
(defvar 2outgoing-queue0 (make-queue "Outgoing queue" 'outgoing-queue))
(defvar 2slow-queue0 (make-queue "Slow queue" 'slow-queue))

(defprop 2queue0 "Queue setup" herald)

(defun 2(queue cold-boot)0 () (map-queues :cold-boot))
(defun 2(queue warm-boot)0 () (map-queues :warm-boot))
