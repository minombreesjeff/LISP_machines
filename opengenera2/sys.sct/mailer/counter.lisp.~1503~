D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; -*- Mode: Lisp; Package: Mailer; Base: 10.; Syntax: ZetaLisp; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;; Counters

0(defflavor (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")counter0 (name
		    up-count
		    week-count
		    day-count
		    hour-count
		    day-of-week
		    date
		    hour)
	   ()
  (:initable-instance-variables name)
  (:gettable-instance-variables up-count week-count day-count hour-count))

1;; Change printing format to be U=23 W=23 D=16 H=4?

0(defvar 2display-counter-name0 t)

(defmethod 2(:init0 2counter0 2:after)0 (ignore)
  (send self :reset))

(defun-in-flavor 2(decode-time-for-counter counter)0 ()
  (let ((now (cl:get-universal-time)))
    (multiple-value-bind (ignore ignore hour ignore ignore ignore day-of-week ignore timezone)
	(cl:decode-universal-time now)
      (values day-of-week
	      (floor (- now (* timezone 3600)) 86400)
	      hour))))

(defmethod 2(:reset0 2counter)0 ()
  (cl:setf up-count 0
	   week-count 0
	   day-count 0
	   hour-count 0)
  (multiple-value (day-of-week date hour) (decode-time-for-counter)))

(defmethod 2(:host-up0 2counter)0 ()
  (setf up-count 0))

(defun-in-flavor2 (counter-update counter)0 ()
  (multiple-value-bind (new-day-of-week new-date new-hour)
      (decode-time-for-counter)
    (cond ((or (< new-day-of-week day-of-week) ( (- new-date date) 7))
	   1;; New calendar week.
0	   (cl:setf week-count 0
		    day-count 0
		    hour-count 0))
	  (( date new-date)
	   1;; New day.
0	   (cl:setf day-count 0
		    hour-count 0))
	  (( hour new-hour)
	   1;; New hour.
0	   (cl:setf hour-count 0)))
    (cl:setf day-of-week new-day-of-week
	     date new-date
	     hour new-hour)))

(defmethod 2(:increment0 2counter)0 (&optional (amount 1))
  (counter-update)
  (incf   up-count amount)
  (incf week-count amount)
  (incf  day-count amount)
  (incf hour-count amount))

(defun-in-flavor2 0(2print-counter0 counter) (stream show-name show-counts show-pointer)
  (when show-name
    (send stream :string-out name)
    (cond (show-counts (send stream :string-out ": "))
	  (show-pointer (send stream :tyo #\space))))
  (when show-counts
    (format stream "Up = ~D, Week = ~D, Day = ~D, Hour = ~D"
	    up-count week-count day-count hour-count)
    (if show-pointer (send stream :tyo #\space)))
  (when show-pointer
    (format stream "~O" (%pointer self))))

(defmethod 2(:print-self0 2counter)0 (stream ignore slashify-p)
  (counter-update)
  (if slashify-p
      (printing-random-object (self stream :no-pointer)
	(print-counter stream display-counter-name t display-counter-name))
      (send stream :string-out name)))

(defun 2counter-summary-header0 (stream header)
  (format stream "~3X ~A=Up  Week   Day  Hour" header))

(defmethod 2(:print-summary0 2counter)0 (stream)
  (counter-update)
  (format stream "~3X~5D ~5D ~5D ~5D" up-count week-count day-count hour-count))

(defmethod 2(:print-full0 2counter)0 (stream)
  (counter-update)
  (print-counter stream t t nil)
  (send stream :tyo #\newline))

(compile-flavor-methods2 counter0)

(defun 2make-counter0 (name) (make-instance 'counter :name name))
