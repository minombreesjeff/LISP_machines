;; -*- Mode: Lisp; Package: Mailer; Base: 10.; Syntax: ZetaLisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Routing

;; Some terminology:
;;   DIRECT means that we can open a mail connection directly to any host on this network.
;;   SLOW means that communication to any host on this network is slow.
;;   DEFERRED means that it costs money to open connections on this network.

0(defun(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") network-direct-p0 (network)
  (not (null (neti:network-assoc network (send *local-host* :network-addresses)))))

(defsubst 2network-indirect-p0 (network)
  (not (network-direct-p network)))

(defun 2network-slow-p0 (network)
  (get (send network :type) 'slow))

(defsubst 2network-fast-p0 (network)
  (not (network-slow-p network)))

(defun 2network-deferred-p0 (network)
  (get (send network :type) 'deferred-delivery))

(defsubst 2network-immediate-p0 (network)
  (not (network-deferred-p network)))

(defun2 local-host-on-slow-network-p0 ()
  (loop for (network) in (send *local-host* :address)
	thereis (network-slow-p network)))

(defprop :dial t deferred-delivery)
(defprop :x25 t deferred-delivery)	1	;0 1Make TELENET as bad as DIAL

0(defprop :dial t slow)

1;; Returns T if NETWORK1 is better than NETWORK2.  The preferred order is:
;;   1) immediate, direct, fast
;;   2) immediate, direct, slow
;;   3) immediate, indirect, fast
;;   4) immediate, indirect, slow
;;   5) deferred, direct, fast
;;   6) deferred, direct, slow
;;   7) deferred, indirect, fast
;;   8) deferred, indirect, slow

0(defun2 network-better-path-p0 (network1 network2)
  (or (not network2)
      (let ((nip1 (network-immediate-p network1))
	    (nip2 (network-immediate-p network2)))
	(if (neq nip1 nip2)             ; XOR of values being T means one is better than the other.
	    nip1			; T if network1 is better, NIL if network2 is better.
	    (let ((ndp1 (network-direct-p network1))
		  (ndp2 (network-direct-p network2)))
	      (if (neq ndp1 ndp2)	; same hack for direct vs. indirect.
		  ndp1
		  (let ((nfp1 (network-fast-p network1))
			(nfp2 (network-fast-p network2)))
		    (if (neq nfp1 nfp2)	; same hack for fast vs. slow.
			nfp1
			;; All other things being equal, we arbitrarily choose network1.
			;; Maybe this should be random?
			t))))))))

1;; Determine the best route to a host for a single connection.  Values returned:
;;   NETWORK      -- best network to use to get to mail service on this host
;;   MAIL-SERVICE -- best mail service provided by this host
;;   DIRECT-P     -- can open a connection to a host on this network directly
;;   IMMEDIATE-P  -- mail connections to this network can be opened immediately
;;   FAST-P	  -- this is a high-speed network
;; Examine the list of services as well as the list of addresses since mail service may
;; not be provided on the best network.

;; Improvements to be made:
;;   1) Do a graph-walk to deal with networks which require more than one hop to get to.
;;   2) Look at all hosts we are trying to send to and minimize the number of connections.
;; Should really say (NETI:PROTOCOL-BASE-MEDIUM-NAME (NETI:FIND-PROTOCOL-NAMED PROTOCOL))
;; instead of just :BYTE-STREAM.

0(defun2 host-best-path0 (host)
  (declare (values network mail-service direct-p immediate-p fast-p))
  (multiple-value-bind (best-network best-mail-service)
      (host-best-path-service-finder host)
    (if best-network
	(let* ((direct-p (network-direct-p best-network))
	       (immediate-p
		 (if direct-p
		     (network-immediate-p best-network)
		     ;; Immediate if first step immediate
		     (loop for gateway in (network-mail-gateways best-network)
			   thereis (send (parse-mailer-host gateway) :immediate-p))))
	       (fast-p (network-fast-p best-network)))
	  (values best-network best-mail-service direct-p immediate-p fast-p))
	(values nil nil nil nil nil))))

(defun2 host-best-path-service-finder0 (host)
  (let ((best-network nil)
	(best-mail-service nil)
	(addresses (send host :address))
	(services (send host :network-services)))
    (loop for (network) in addresses do
      (let ((mail-service
	      (loop for (service medium protocol) in services do
		(when (memq service '(:mail-to-user :store-and-forward-mail))
		  (let ((possible-medium
			  (send network :possible-medium-for-protocol protocol :byte-stream)))
		    (when (or (eq medium possible-medium)
			      (not (network-direct-p network)))
		      (return service))))
		    finally
		      (return nil))))
	(when (and
		1;; Don't replace a non-NIL best service with a NIL one.
0		(not (and best-mail-service (null mail-service)))
		1;; New network must be better than the old.
0		(network-better-path-p network best-network)
		1;; New network must be direct, or indirect and guaranteed reachable.
0		(or (network-direct-p network)
		    (loop for gateway in (network-mail-gateways network)
			  thereis (not (neti:ns-eq gateway host)))))
	  (setf best-network network)
	  (setf best-mail-service mail-service))))
    (values best-network best-mail-service)))

1;; Mail Server Hosts

;; NETWORK-MAIL-GATEWAYS returns a list of those hosts which are on a given network and
;; also on a local network, and which run mail servers.  The list is ordered by which
;; operating systems we would prefer to send to.  We should look at the site and hardware
;; as well.  Prefer the local site over a foreign site.  Prefer 3600 over LM-2, KL-10 over
;; KA-10, 2060 over 2020, VAX over PDP11.

;; Cache is a list of NETWORK-MAIL-GATEWAYS-ENTRY structures.

0(defvar2 network-mail-gateways0 nil)

(define-option 2network-bad-gateways0 nil)

(defun2 parse-network-bad-gateways0 ()
  (setq network-bad-gateways 
	(loop for host in network-bad-gateways
	      do (setq host (if (listp host)
				(condition-case (hst)
				    (net:parse-host (car host))
				  (network-error 
				    (su:log-event :normal "Error parsing bad host ~A: ~A" (car host) hst))
				  (:no-error
				   (cons hst
					 (loop for net in (cdr host)
					       do (setq net (condition-case (error)
								(net:find-object-named
								  :network net)
							      (network-error
								(su:log-event :normal
					      "Error parsing network ~A for bad host ~A: ~A"
								  net hst error))))
					       when net collect net))))
				(condition-case (error)
				    (net:parse-host host)
				  (network-error
				    (su:log-event :normal "Error parsing bad host ~A: ~A" host error)
				    nil))))
	      when host collect host)))

(add-option-computation '(parse-network-bad-gateways))

(defstruct (2network-mail-gateways-entry0 :list :conc-name)
  network
  namespaces-and-timestamps
  gateways
  )

(defun2 network-mail-gateways0 (network)
  (let ((entry (neti:network-assoc network network-mail-gateways))
	(network-search-rules (send network :search-rules)))
    (if (and entry
	     (let ((namespaces-and-timestamps
		     (network-mail-gateways-entry-namespaces-and-timestamps entry)))
	       (loop for namespace in network-search-rules
		     always (let ((timestamp-entry (neti:ns-assq namespace
								 namespaces-and-timestamps)))
			      (and timestamp-entry
				   (= (second timestamp-entry)
				      (send namespace :validation-timestamp)))))))
1	;; The cache is valid, no namespaces have changed.
0	(network-mail-gateways-entry-gateways entry)
	(let ((namespaces-and-timestamps
		(loop for namespace in network-search-rules
		      collect (list namespace (send namespace :validation-timestamp))))
	      (gateways (let ((neti:*namespace-search-list* network-search-rules))
			  (with-stack-list (address network :*)
			    (with-stack-list (address address)
			      (find-objects-from-property-list
				:host
				:service '((:store-and-forward-mail :* :*))
				:address address))))))
1	  ;; Remove those hosts which are known to be bad gateways.
0	  (when network-bad-gateways
	    (setq gateways (loop for host in gateways
				 unless (loop for bad-host in network-bad-gateways
					      thereis (if (listp bad-host)
							  (and (neti:ns-eq (car bad-host) host)
							       (neti:network-member
								 network (cdr bad-host)))
							  (neti:ns-eq host bad-host)))
				 collect host)))
1	  ;; Now select only those hosts that are reachable.
	  ;; (Something will need changing to be able to use more than one intermediate
	  ;;  store-and-forward mailer.)
0	  (let ((services (loop for host in gateways
				as serv = (neti:find-paths-to-service-on-host
					    :store-and-forward-mail host t)
				when serv collect (first serv))))
	    (setq services (sort services #'neti:service-access-path-desirability-greaterp))
	    (setq gateways (loop for serv in services
				 collect (neti:service-access-path-host serv))))
	  (when (null entry)
	    (setq entry (make-network-mail-gateways-entry network network))
	    (push entry network-mail-gateways))
	  (alter-network-mail-gateways-entry
	    entry
	    namespaces-and-timestamps namespaces-and-timestamps
	    gateways gateways)
	  gateways))))
