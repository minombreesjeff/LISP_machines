;; -*- Mode: Lisp; Package: Mailer; Syntax: Zetalisp; Base: 10.; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Mailer debugging tools.

0(defmacro (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")with-debugging-enabled0 ((&key (include-protocol-debugging t)) &body body)
  `(with-debugging-enabled-internal ,include-protocol-debugging
     #'(lambda ()
	 (declare (sys:downward-function))
	 ,@body)))

(defun 2with-debugging-enabled-internal0 (include-protocol-debugging function)
  (declare (sys:downward-funarg function))
  (with-log-output-to-user ("Debug" t)
    (letf-if *mailer-log*
	     (((su:log-debugging *mailer-log*) t))
      (letf ((*smtp-debug-flag* include-protocol-debugging)
	     (*chaos-mail-debug-flag* include-protocol-debugging))
	(funcall function)))))

(defun2 enable-debugging0 (&key (include-protocol-debugging t))
  (if *mailer-log*
      (with-log-output-to-user ("Debug")
	(su:log-event :normal "Enabling debugging log entries~
			       ~:[ (excluding protocol specific entries)~]"
		      include-protocol-debugging)
	(setf (su::log-debugging *mailer-log*) t)
	(setf *smtp-debug-flag* include-protocol-debugging)
	(setf *chaos-mail-debug-flag* include-protocol-debugging))
      (dw:command-error "Can't enable debugging without starting the Mailer at least once.")))

(defun2 disable-debugging0 ()
  (when *mailer-log*
    (with-log-output-to-user ("Debug")
      (su:log-event :normal "Disabling debugging log entries")
      (setf *smtp-debug-flag* nil)
      (setf *chaos-mail-debug-flag* nil)
      (setf (su::log-debugging *mailer-log*) nil))))



(defun 2test-local-mailer-driver0 (protocol function)
  (declare (sys:downward-funarg function))
  (let* ((paths
	   (append (find-paths-to-service-on-host :store-and-forward-mail net:*local-host*)
		   (find-paths-to-service-on-host :mail-to-user net:*local-host*)))
	 (mailer-access-path
	   (or (dolist (path paths)
		 (when (and (eq protocol (neti:protocol-name
					   (neti:service-access-path-protocol path)))
			    #+ignore		1;2:chaos-mail1 and 2:smtp1 aren't local protocols.
0			    (eq :local (neti:medium-name
					 (neti:medium-implementation-medium
					   (neti:medium-description-implementation
					     (neti:service-access-path-medium path))))))
		   (return path)))
	       (dw:command-error "No local access path using ~A protocol." protocol))))
    (with-debugging-enabled ()
      (with-mailer (mailer mailer-access-path)
	(funcall function mailer mailer-access-path)))))

(defun 2test-local-mailer0 (&optional (protocol :local-store-and-forward-mail))
  (test-local-mailer-driver protocol
			  #'(lambda (mailer mailer-access-path)
			      (sys:standard-value-let ((cl:*package* (cl:find-package :mailer))
						       )
				(cl:break "~S via ~S" mailer mailer-access-path)))))

(defun 2send-test-message0 (&optional (protocol :local-store-and-forward-mail))
  (let ((dcs zwei:*zmail-default-default-character-style*)
	(from `(:name ,(send si:*user* :lispm-name)))
	(subject "")
	(to))
    (dw:accepting-values ()
      (cl:setf from (accept 'zwei:address :prompt "From" :default from)
	       subject (accept 'string :prompt "Subject" :default subject)
	       to (accept '(cl:sequence zwei:address) :prompt "To" :default to)))
    (unless from
      (dw:command-error "From field must be specified."))
    (unless to
      (dw:command-error "To field must be specified."))
    (flet ((default-host (list)
	     (loop for address in list
		   if (cl:getf address :host)
		     collect address
		   else
		     do (setf (cl:getf address :host) `(:object ,net:*local-host*))
		     and
		       collect (nconc address '(:host-defaulted t)))))
      (cl:setf from (default-host (list from))
	       to (default-host to)))
    (multiple-value-bind (text)
	(zwei:qsend-get-message to cl:*query-io* "")
      (multiple-value-bind (full-text)
	  (with-output-to-string (full-text)
	    (using-resource (saving-stream si:epsilon-encoding-output-stream full-text
					   :flavor 'zwei:zmail-msg-saving-stream)
	      (multiple-value-bind (character-type-mappings)
		  (multiple-value-bind (subject-mappings)
		      (zwei:compute-interval-character-type-mappings subject nil t
								     saving-stream dcs)
		    (multiple-value-bind (text-mappings diagrams-present)
			(zwei:compute-interval-character-type-mappings text nil t
								       saving-stream dcs)
		      (or (nconc subject-mappings text-mappings)
			  (when diagrams-present
			    (list (zwei:character-type-mapping-for-type-0 dcs))))))
		(zwei:output-headers-and-text
		  full-text
		  `(:saving-stream ,saving-stream
		    :text ,text
		    :headers (:date ,(cl:get-universal-time)
			      :from ,from
			      ,@(when (not (string-equal subject ""))
				  `(:subject ,subject))
			      :to ,to
			      :message-id ,(zwei:generate-standard-message-id)
			      ,@(when character-type-mappings
				  `(:character-type-mappings ,character-type-mappings
				    :fonts ,(zwei:fonts-from-character-type-mappings
					      dcs character-type-mappings))))
		    :header-format :include-personal)))))
	(test-local-mailer-driver protocol
	  #'(lambda (mailer mailer-access-path)
	      (ignore mailer-access-path)
	      (send mailer :start-message (first from))
	      (dolist (recipient to)
		(send mailer :verify-recipient recipient))
	      (with-input-from-string (message-text full-text)
		(send mailer :receive-message nil message-text))
	      (send mailer :finish-message)))))))



(defun2 probe-directories0 ()
  (su:log-event :normal "Probing directories of local recipients")
  (mailbox-map
    #'(lambda (key value local?)
	(let (file)
	  (when (and (not (listp value))
		     (setq file (send value :file)))
	    (condition-case ()
		(su:probe-path :file file)
	      (fs:directory-not-found
		(su:log-event :disaster "Some directory in ~A, from the ~:[~;local ~]mailbox /"~A/", does not exist.~%~A"
		      file local? key
		      (with-output-to-string (standard-output)
			(fs:create-directories-recursively file)))
		)))))))

