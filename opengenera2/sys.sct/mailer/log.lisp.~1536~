D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; -*- Mode: Lisp; Package: Mailer; Base: 10.; Syntax: ZetaLisp; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


1;; Logs

0(defvar(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") *mailer-log*0 nil)

(dw:define-program-framework 2mailer-log-program
0  :pretty-name "Store-and-Forward Mailer"
  :command-definer define-mailer-log-command
  :command-table (:inherit-from ()
				:kbd-accelerator-p nil)
  :top-level (mailer-log-program-top-level :window-wakeup mailer-log-window-wakeup-handler
					   :dispatch-mode :command-preferred
					   :prompt "Mailer: "
					   :blank-line-mode :return-nil)
  :configurations `((main
		      (:layout
			(statuses :row process-status queue-status)
			(statuses-and-listener :column statuses listener)
			(command-statuses-and-listener :row command-menu statuses-and-listener)
			(main :column title log command-statuses-and-listener))
		      (:sizes
			(statuses
			  (process-status 0.6)
			  :then
			  (queue-status :even))
			(statuses-and-listener
			  (statuses 0.35)
			  :then
			  (listener :even))
			(command-statuses-and-listener
			  (command-menu 0.25)
			  :then
			  (statuses-and-listener :even))
			(main
			  (title 1 :lines)
			  (log 0.5)
			  :then
			  (command-statuses-and-listener :even)))))
  :panes ((title :title)
	  (log :display
	       :more-p nil
	       :end-of-page-mode :scroll
	       :deexposed-typeout-action :permit
	       :margin-components
	       '((dw:margin-borders)
		 (dw:margin-scroll-bar)
		 (dw:margin-white-borders :thickness 2)
		 (dw:margin-label
		   :string "Log"
		   :style (:sans-serif :italic :normal))))
	  (process-status :display
			  :redisplay-function 'redisplay-mailer-log-process-status
			  :redisplay-after-commands t
			  :incremental-redisplay t
			  :more-p nil
			  :margin-components
			  '((dw:margin-borders)
			    (dw:margin-white-borders :thickness 2)
			    (dw:margin-label
			      :string "Processes"
			      :style (:sans-serif :italic :normal))))
	  (queue-status :display
			:redisplay-function 'redisplay-mailer-log-queue-status
			:redisplay-after-commands t
			:incremental-redisplay t
			:more-p nil
			:margin-components
			'((dw:margin-borders)
			  (dw:margin-white-borders :thickness 2)
			  (dw:margin-label
			    :string "Queues"
			    :style (:sans-serif :italic :normal))))
	  (listener :listener
		    :more-p nil
		    :margin-components
		    '((dw:margin-ragged-borders)
		      (dw:margin-scroll-bar)
		      (dw:margin-white-borders :thickness 2)))
	  (command-menu :command-menu
			:margin-components
			'((dw:margin-borders)
			  (dw:margin-scroll-bar)
			  (dw:margin-white-borders)
			  (dw:margin-label
			    :string "Commands"
			    :style (:sans-serif :italic :normal))
			  (dw:margin-whitespace :margin :left :thickness 10))))
  :state-variables ((log-monitor)))

(defun 2mailer-log-program-top-level0 (program &rest options)
  (declare (dbg:bug-report-recipient-system "Mailer"))
  (cl:apply 'dw:default-command-top-level program options))

(defmethod2 (redisplay-mailer-log-process-status mailer-log-program)0 (stream)
  (process-summary stream))

(defmethod2 (redisplay-mailer-log-queue-status mailer-log-program)0 (stream)
  (queue-summary stream))

(scl:define-presentation-type 2log-frame-update0 ()
   :expander 'dw::window-wakeup)

(defun 2log-frame-update0 ()
  (when (and *mailer-log* (mailer-log-frame *mailer-log*))
    (send (send (mailer-log-frame *mailer-log*) :get-pane 'listener)
	  :force-kbd-input (dw::make-presentation-blip :presentation-type 'log-frame-update
						       :object *mailer-log*)
			   t)))

(su:add-background-task su:*background-task-queue*
			"Log frame update" 'log-frame-update "10 seconds")

(defun 2mailer-log-window-wakeup-handler0 (blip)
  (dw:presentation-blip-case blip
    (log-frame-update
      (let ((frame (mailer-log-frame *mailer-log*)))
	(send frame :redisplay-pane 'process-status)
	(send frame :redisplay-pane 'queue-status)))
    (otherwise
      (dw::default-window-wakeup-handler blip))))

(defflavor 2mailer-log
0	(program
	 frame)
	su:(log-interactive-mixin
	    log-hosts-mixin log-file-mixin log-monitor-mixin basic-log)
  (:initable-instance-variables program frame)
  (:writable-instance-variables program frame))

(defmethod2 (su:server-description mailer-log)0 (open-reason)
  (multiple-value-bind (major minor status)
      (sct:get-system-version 'mailer)
    (setq status (second (assq status sct:system-status-alist)))
    (format nil "~:[~*~;~A ~]Mailer~:[~*~;~:* ~D.~D~] ~A ~A with file host ~A"
	  (and status (not (equal status ""))) status major minor open-reason
	  (send net:*local-host* :mail-name) (send file-host :mail-name))))

(compile-flavor-methods 2mailer-log0)


(define-option 2notify-hosts 0nil)

(defun 2parse-notify-hosts0 ()
  (when *mailer-log*
    (su:remove-all-hosts-to-notify *mailer-log*)
    (dolist (host notify-hosts)
      (su:add-host-to-notify *mailer-log* host))))

(add-option-computation '2(parse-notify-hosts)0)


(defun 2initialize-log-monitor-early0 ()
  (when *mailer-log*
    (su:forcibly-unlock-log *mailer-log*))
  (let* ((frame (if *mailer-log*
		    (mailer-log-frame *mailer-log*)
		    (or (dw::find-program-window 'mailer-log-program :create-p nil)
			(let ((frame (dw::find-program-window 'mailer-log-program)))
			  (send frame :set-save-bits t)	1;Make it "come to life".
0			  frame)
			(progn
			  (tv:notify nil "Creating mailer log frame failed.")
			  (return-from initialize-log-monitor-early nil))
			)))
	 (program (send frame :program))
	 (log-pane (send frame :get-pane 'log)))
    (if (null *mailer-log*)
	(setq *mailer-log* (make-instance 'mailer-log
					  :frame frame
					  :program program
					  :window log-pane
					  :directory logs-directory
					  :maximum-size *log-file-maximum-size*
					  :generation-retention-count
					    *log-file-generation-retention-count*))
      (cl:setf (mailer-log-frame *mailer-log*) frame
	       (mailer-log-program *mailer-log*) program
	       (su:log-monitor-window *mailer-log*) log-pane))
    (setf (mailer-log-program-log-monitor program) *mailer-log*))
  1;; Now that there's a frame available and the Mailer is coming to life (or is already alive),
  ;; let's be certain the the Server Utilities background process is active so the frame will
  ;; be poked every 2 minutes to update its status panes.
0  (su::verify-background-process-active))


(defun 2initialize-log-file0 (initialization-reason)
  (letf (((su:log-herald *mailer-log*) "Log File setup"))
1    ;; If any log file is left around, close it.
0    (su:close-log-file *mailer-log* t)
    (su:open-log-file *mailer-log* initialization-reason)))

(defun 2(log-file cold-boot)0 ()
  (initialize-log-file "cold booted on"))

(defun 2(log-file warm-boot)0 ()
  (initialize-log-file "warm booted on"))

1;; Don't allow the window system to gratuitously create new windows for us.

0(defun 2log-select0 ()
  (if *mailer-log*
      (mailer-log-frame *mailer-log*)
      (dw::find-program-window 'mailer-log-program)))

(tv:add-select-key #\o '(log-select) "Mailer" nil) 

1;; For use by mailer "commands"

0(defmacro 2with-log-output-to-user0 (options &body body)
  (declare (arglist . ((herald &optional print?) &body body)))
  (let ((herald (if (listp options) (first options) options))
	(print? (if (listp options) (second options) t)))
    `(with-log-output-to-user-internal ,herald ,print?
       (lambda () ,@body))))

(defun 2with-log-output-to-user-internal0 (herald print? body)
  (declare (sys:downward-funarg body))
  (let ((su:*log* *mailer-log*))
    (if *mailer-log*
	(letf (((su:log-process-id  *mailer-log*) "!"))
	  (letf-if herald
		   (((su:log-herald  *mailer-log*) herald))
	    (letf-if print? (((su:log-interactive-typeout *mailer-log*) t))
	      (funcall body))))
	(funcall body))))

(defun 2tell0 (format-string &rest args)
  (with-log-output-to-user nil			1;No herald.
0    (cl:apply #'su:log-event :normal format-string args)))

1;; The Mailer "commands"

0(define-mailer-log-command (2com-start-mailer0 :menu-accelerator "Start Mailer")
			   ()
   (start-mailer))

(define-mailer-log-command (2com-halt-mailer0 :menu-accelerator "Halt Mailer")
			   ()
   (halt-mailer))

(define-mailer-log-command (2com-suspend-mailer0 :menu-accelerator "Suspend Mailer")
    ()
   (suspend-mailer))

(define-mailer-log-command (2com-resume-mailer0 :menu-accelerator "Resume Mailer")
    ()
   (resume-mailer))

(define-mailer-log-command (2com-summarize-mailer-processes
0			     :menu-accelerator "Summarize Mailer Processes")
			   ()
  (process-summary))

(define-mailer-log-command (2com-summarize-mailer-queues
0			     :menu-accelerator "Summarize Mailer Queues")
			   ()
  (queue-summary))

(define-mailer-log-command (2com-probe-hosts0 :menu-accelerator "Probe Hosts")
    ((hosts '(token-or-type (:all) (cl:sequence ((mailer-host) :network-hosts nil)))
	    :prompt "host(s) or All" :default :all :confirm t))
   (probe-hosts-internal hosts))

(define-mailer-log-command (2com-clear-log-history0 :menu-accelerator "Clear Log History")
    ()
   (send (dw:get-program-pane 'log) :clear-history)
   (send (dw:get-program-pane 'listener) :clear-history))

(define-mailer-log-command (2com-switch-log-files0 :menu-accelerator "Switch Log Files")
    ()
   (with-log-output-to-user "Switch logs"
     (cond (log-monitor
	    (su:close-log-file log-monitor)
	    (su:open-log-file log-monitor "running on"))
	   (t
	    (dw:command-error "No log file open yet.")))))

(define-mailer-log-command (2com-disable-debugging 0:menu-accelerator "Disable Debugging")
    ()
   (disable-debugging))

(define-mailer-log-command (2com-enable-debugging0 :menu-accelerator "Enable Debugging")
    (&key (protocol-debugging 'boolean :default t
			      :documentation
			        "Include protocol specific (SMTP, etc.) debugging log entries")
	  )
   (enable-debugging :include-protocol-debugging protocol-debugging))

(define-mailer-log-command (2com-resolve-hosts0 :menu-accelerator "Resolve Hosts")
    ((hosts '(token-or-type (:all)
			    (cl:sequence ((mailer-host :resolved-hosts nil) :network-hosts nil)
					 ))
	    :prompt "host(s) or All" :default :all :confirm t))
   (resolve-hosts-internal hosts))

#-VLM
(define-mailer-log-command (2com-reload-(3 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB")subnet-file
0			     :menu-accelerator "Reload Subnet File")
    ()
   (reload-dialnet-registry))

(define-mailer-log-command (2com-update-mailbox-table0 :menu-accelerator "Update Mailbox Table")
    ()
   (update-mailbox-table))

(define-mailer-log-command (2com-update-options0 :menu-accelerator "Update Options")
    ()
   (update-options))


1;;; No particular reason why this goes here, except it gets called from all over.

0;;; Interestingly enough, none of the four callers I can find ever specifies STATE.  --- Foner 11-Apr-90.
(defun 2note-connection-error0 (host error &optional state)
  (4 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");; Note that the order of these clauses is important!
0  (typecase error
    (dial:dial-peer-unsynchronized-during-connection
      (su:log-event :normal "~A" error))
    (end-of-file
      (su:log-event :normal "Premature EOF from ~A~@[ while in state ~A~]" host state))
    (connection-refused
      (su:log-event :normal "Connection to ~A refused~@[:~%~4@T~~A~~]" host error))
    (connection-error
      (su:log-event :normal "Unable to connect to ~A" host))
    (connection-closed
      (su:log-event :normal "Connection closed by ~A~@[ while in state ~A~]~@[:~%~4@T~~A~~]"
		    host state error))
    (connection-lost
      (su:log-event :normal "Connection to ~A lost~@[ while in state ~A~]~@[:~%~4@T~~A~~]"
		    host state error))
    (host-stopped-responding
      (su:log-event :normal "~A has stopped responding~@[ while in state ~A~]" host state))
    (neti:protocol-timeout
      (su:log-event :normal "Protocol timeout waiting for ~A~@[ while in state ~A~]"
		    host state))
    (dial:modem-not-responding
      (su:log-event :normal "Modem did not respond while connecting to ~A" host))
    (dial:modem-error
      (su:log-event :normal "Modem error while connecting to ~A~@[:~%~4@T~~A~~]" host error))
    (error
      (su:log-event :problem "Connection error of type ~A~@[ while in state ~A~]:~%~4@T~~A~"
		    (typep error) state error))))

(defun 2flush-mailer-log0 ()
  (cl:assert (not (foreground-active)) () "You have to halt the mailer first.")
  (when *mailer-log*
    (let ((frame (mailer-log-frame *mailer-log*)))
      (when frame
	(send frame :kill)))
    (setq *mailer-log* nil))
  'its-dead-jim)
