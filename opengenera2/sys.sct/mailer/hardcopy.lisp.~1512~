;;; -*- Mode: Lisp; Package: Mailer; Base: 10.; Syntax: ZetaLisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Hardcopy mail delivery

;;; (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(hardcopy-new-mail)
1;;;    Print all mail which has arrived since the last printing, for all users who receive
;;;    hardcopy mail.

;;; 2(hardcopy-last-mail)
1;;;    Reprint the mail which was just printed, for all users who receive hardcopy mail.
;;;    Useful if there was some problem with the printer.

;;; 2(hardcopy-all-mail)
1;;;    Print all of the saved hardcopy mail, for all users who receive hardcopy mail.

;;; 2(hardcopy-new-mail-for-user user)
1;;; 2(hardcopy-last-mail-for-user user)
1;;; 2(hardcopy-all-mail-for-user user)
1;;;    Like the above, except for a single user only.

;;; The 0Store-and-Forward Mailer1 program includes a 0Hardcopy Mail1 CP command which serves
;;; as the interface to the above functions.

;;; Basic Operation --
;;; 
;;;    Once a day, or however frequently hardcopy mail is to be delivered, someone should
;;;    invoke the 0Hardcopy Mail1 command in the 0Store-and-Forward Mailer1 program with its
;;;    default argument settings.  Any new mail will be printed on the default hardcopy
;;;    device and can then be delivered as appropriate.
;;;
;;;    If the mail doesn't print succesfully, use the 0:Quantity Last1 keyword argument to
;;;    0Hardcopy Mail1 to specify that the last set of messages should be reprinted.  (If
;;;    the mail for only a few users is lost as opposed to everyone, give the user names
;;;    as arguments to 0Hardcopy Mail1 in place of its default of 0All1.)

;;; To add a new hardcopy recipient, add the name to the 2(deliver-hardcopy ...)1 form in the
;;; file 0>Mail>Static>Mailboxes.text1.

;;; To do:
;;; * Option for printing mail for all users as a single hardcopy request, rather than
;;;   queueing one request per user.

0(defun2 get-recipient-hardcopy-mail-file0 (name &optional (version :newest))
  (su:new-pathname hardcopy-directory name "Mail" version))

1;;; Accept a 2version1 argument to allow 2hardcopy-map1 to use this function.
0(defun 2get-hardcopy-files-for-user0 (user &optional (version :wild))
  (cl:remove-if #'null
		(fs:directory-list (get-recipient-hardcopy-mail-file user version)
				   :sorted :fast)
		:key #'first))

(defun2 hardcopy-to-stream0 (mail-file hardcopy-stream starting-number)
  (with-open-file (mail-stream mail-file :direction :input :element-type 'cl:string-char)
    1;; Skip the first line if it's blank as someone might read and write this file
    ;; in 0Zmail1 thinking it to be an 0Rmail1 file.  (The first line of 0Rmail1 files may be
    ;; blank, 2:append1, or ordinary text.)
0    (let ((first-char (send mail-stream :tyi)))
      (unless first-char (ferror "Attempt to hardcopy an empty mail file"))
      (when (not (char-equal first-char #\newline)) (send mail-stream :untyi first-char)))
    (loop with heading-character-style = (or (send-if-handles hardcopy-stream
							      :heading-character-style)
					     si:*null-style*)
	  for message-number from starting-number do
	  (unless (send mail-stream :listen) (return message-number))
	  (scl:with-character-style (heading-character-style hardcopy-stream)
	    (format hardcopy-stream "~2&~20X----- Message ~D -----~2%" message-number))
	  (loop with index do
		(multiple-value-bind (buffer begin end)
		    (send mail-stream :read-input-buffer)
		  (setq index (string-search-char #\ buffer begin end))
		  (cond ((not index)
			 (send hardcopy-stream :string-out buffer begin end)
			 (send mail-stream :advance-input-buffer))
			(t (send hardcopy-stream :string-out buffer begin index)
			   (incf index 2)
			   (cond (( index end)
				  (send mail-stream :advance-input-buffer index))
				 (t (send mail-stream :advance-input-buffer)
				    (send mail-stream :tyi)))
			   (return))))))))

1;;; 2stream-or-device1 can be a hardcopy device or a stream to allow testing without a printer.
0(defun2 hardcopy-to-device0 (user mail-files stream-or-device description-string
							    &rest description-args)
  (let ((called-with-stream (and stream-or-device (operation-handled-p stream-or-device :tyo)))
	(title (cl:apply 'format nil description-string description-args))
	(heading-info nil))
    (tell "Printing ~:A ... " title)
    (flet ((new-page-hook (stream page-number)
	     (hardcopy:hardcopy-print-page-heading stream heading-info page-number nil)))
      (with-open-stream
	(hardcopy-stream (if called-with-stream
			     stream-or-device
			     (hardcopy:make-hardcopy-stream
			       (or stream-or-device hardcopy:*default-text-printer*)
			       :recipient user
			       :title title
			       :data-creation-date (time:get-universal-time)
			       :new-page-hook #'new-page-hook)))
	(setf heading-info (hardcopy-internals::concoct-heading-info hardcopy-stream))
	(condition-bind ((hardcopy:hardcopy-outside-of-bounding-box
			   #'hardcopy:simple-formatter-exception-interceptor))
	  (if (nlistp mail-files)
	      (hardcopy-to-stream mail-files hardcopy-stream 1)
	      (loop for (mail-file) in mail-files
		    for starting-number = 1 then next-number
		    for next-number = (hardcopy-to-stream mail-file hardcopy-stream
							  starting-number))))))))

(defun2 hardcopy-last-mail-for-user0 (user &optional stream-or-device
						   description-string &rest description-args)
  (with-log-output-to-user ("Hardcopy last mail" (null description-string))
    (let ((mail-files (get-hardcopy-files-for-user user))
	  (mail-file))
      (cond ((null (cdr mail-files))
	     (tell "Can't find the last printed mail file for ~A." user))
	    (t 
	     1;; Find the second to the last file in the sorted directory list.
0	     (loop for files on mail-files do
	       (when (null (cddr files))
		 (setq mail-file (caar files))
		 (return)))
	     (if description-string
		 (cl:apply
		   'hardcopy-to-device user mail-file stream-or-device
				       description-string description-args)
		 (hardcopy-to-device user mail-file stream-or-device
				     "Last printed mail for ~A" user)))))))

(define-option2 hardcopy-mail-retention-count0 3)

(defun2 hardcopy-new-mail-for-user0 (user &optional stream-or-device)
  (with-log-output-to-user ("Hardcopy new mail")
    (let ((newest-pathname (get-recipient-hardcopy-mail-file user)))
      (cond ((zerop (get (fs:file-properties newest-pathname) :length-in-bytes))
	     (tell "No new mail for ~A." user))
	    (t 
	     1;; We must insure that the proper GRC is set before creating the file to ensure
	     ;; that we won't accidently delete something that we shouldn't.
0	     (fs:change-file-properties newest-pathname t
					:generation-retention-count
					  hardcopy-mail-retention-count)
	     1;; Create a new file for the mailer to append to before doing anything.
0	     (su:create-server-file newest-pathname nil t)
	     1;; Hardcopy the second newest file.
0	     (hardcopy-last-mail-for-user user stream-or-device "New mail for ~A" user))))))

(defun2 hardcopy-all-mail-for-user0 (user &optional stream-or-device)
  (with-log-output-to-user ("Hardcopy all mail")
    (let ((mail-files (get-hardcopy-files-for-user user)))
      (when (and mail-files
		 (zerop (get (fs:file-properties (caar (last mail-files))) :length-in-bytes)))
	(nbutlast mail-files))
      (if (null mail-files)
	  (tell "No mail for ~A." user)
	  (hardcopy-to-device user mail-files stream-or-device "Mail for ~A" user)))))

(defun2 hardcopy-map0 (function &rest arguments)
  (let ((mail-files (get-hardcopy-files-for-user :wild :newest)))
    (loop for (mail-file) in mail-files
	  for name = (send mail-file :raw-name) do
	  (lexpr-funcall function name arguments))))

(defun2 hardcopy-new-mail0 (&optional stream-or-device)
  (hardcopy-map #'hardcopy-new-mail-for-user stream-or-device))

(defun2 hardcopy-last-mail0 (&optional stream-or-device)
  (hardcopy-map #'hardcopy-last-mail-for-user stream-or-device))

(defun2 hardcopy-all-mail0 (&optional stream-or-device)
  (hardcopy-map #'hardcopy-all-mail-for-user stream-or-device))

(defun2 show-hardcopy-mail0 ()
  (with-log-output-to-user ("Hardcopy mail users")
    (hardcopy-map #'(lambda (user) (tell "~A" user)))))

(scl:define-presentation-type 2hardcopy-mail-user0 ()
   :expander 'string
   :parser ((stream &key type original-type initially-display-possibilities)
	    (values
	      (dw:completing-from-suggestions (stream :type type
						      :initially-display-possibilities
						        initially-display-possibilities)
		(hardcopy-map #'(lambda (name) (dw:suggest name name))))
	      original-type))
   :describer ((stream &key plural-count)
	       (dw::presentation-string-pluralize "a user" stream plural-count)
	       (cl:write-string " whose mail is hardcopied" stream)))

(define-mailer-log-command (2com-hardcopy-mail0 :menu-accelerator "Hardcopy Mail")
    ((users '((scl:token-or-type (:all) ((cl:sequence hardcopy-mail-user))))
	    :prompt "for user(s)"
	    :default :all)
     &key (quantity '((scl:alist-member
			:alist (("New" :value :new
				       :documentation
				         "Any messages which have not yet been printed.")
				("Last" :value :last
					:documentation "Last set of messages printed.")
				("All" :value :all
				       :documentation "All messages."))))
		    :prompt "of mail"
		    :documentation "Quantity of mail to be printed for each user."
		    :default :new
		    :mentioned-default :last)
	  (printer 'sys:printer
		   :prompt "printer name"
		   :default hardcopy:*default-text-printer*
		   :documentation "Name of printer on which to do hardcopy"))
   (if (eq users :all)
       (cl:case quantity
	 (:new (hardcopy-new-mail printer))
	 (:last (hardcopy-last-mail printer))
	 (:all (hardcopy-all-mail printer)))
       (dolist (user users)
	 (cl:case quantity
	   (:new (hardcopy-new-mail-for-user user printer))
	   (:last (hardcopy-last-mail-for-user user printer))
	   (:all (hardcopy-all-mail-for-user user printer))))))

(defun2 hardcopy-test0 ()
  (hardcopy-internals::get-window-hardcopy-device)
  (hardcopy-new-mail hardcopy-internals::*window-hardcopy-device*))
