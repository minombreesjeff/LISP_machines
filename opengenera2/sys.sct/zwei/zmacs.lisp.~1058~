;;; -*- Syntax: Zetalisp; Mode: LISP; Package: ZWEI; Base: 8; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file provides the initial simple buffer/file stuff for ZWEI.
;;; It uses the utility file stuff in ZWEI; FILES.
;;; Some of the section specific functions are in ZWEI; SECTIO.

;;;; Utility functions.

(DEFCOM COM-EDIT-ZMACS-COMMAND
	"Finds the source for the function installed on a key.
You can press any key combination or enter an extended command name.  Use a
numeric argument to edit the function that implements a prefix command (like
m-X or c-X).  " ()
  (PROMPT-LINE "Edit the command for this key: ")
  (PROMPT-LINE-ACTIVATE
    (DO ((COMTAB *COMTAB*)
	 (KEY)
	 (COMMAND NIL NIL))
	(NIL)
      (SETQ KEY (EDITOR-INPUT :ANY-TYI 'COMMAND))
      (COND ((CHARACTERP KEY)
	     (PROMPT-LINE-MORE "~:@C" KEY)
	     (SETQ COMMAND (COMMAND-LOOKUP KEY COMTAB)))
	    ((AND (LISTP KEY) (EQ (FIRST KEY) 'PRESENTATION-COMMAND))
	     (COND ((EQ (FIRST (SECOND KEY)) 'COMPATIBLE-COMTAB-LOOKUP-PROCESSOR)
		    (SETQ KEY (SECOND (SECOND KEY)))
		    (PROMPT-LINE-MORE "~:@C" KEY)
		    (SETQ COMMAND (COMMAND-LOOKUP KEY COMTAB)))
		   (T
		    (OUTPUT-PRESENTATION-COMMAND-NAME (THIRD KEY) *MODE-LINE-WINDOW*)
		    (SETQ COMMAND (FIRST (SECOND KEY))))))
	    ((AND (LISTP KEY)
		  (MEMQ (FIRST KEY) '(:TYPEOUT-EXECUTE :EXECUTE :EXECUTE-AS-COMMAND)))
	     (SETQ COMMAND (SECOND KEY)))
	    (T
	     (BEEP)				;Ignore random blips
	     (GO SKIP)))
      (COND ((AND (PREFIX-COMMAND-P COMMAND) (NOT *NUMERIC-ARG-P*))
	     (SETQ COMTAB (SYMEVAL-IN-CLOSURE COMMAND 'COMTAB))
	     (SEND *MODE-LINE-WINDOW* ':TYO #\SP))
	    ((MEMQ COMMAND '(NIL :UNDEFINED))
	     (BARF "~:@C is not a defined key." KEY))
	    ((AND (SYMBOLP COMMAND) (NOT (FBOUNDP COMMAND)))
	     (BARF "~S is not implemented." COMMAND))
	    ((SYS:LEXICAL-CLOSURE-P COMMAND)
	     (RETURN (EDIT-DEFINITION (SYS:FUNCTION-NAME (SYS:CLOSURE-FUNCTION COMMAND)))))
	    (T
	     (IF (AND (MEMQ COMMAND '(MAKE-EXTENDED-COMMAND-INTERNAL
				      COM-EXTENDED-COMMAND COM-ANY-EXTENDED-COMMAND))
		      (NOT *NUMERIC-ARG-P*))
		 (LET ((ANS (SELECTQ COMMAND
			      (COM-EXTENDED-COMMAND
			       (GET-EXTENDED-COMMAND "Edit extended command:" *COMTAB*))
			      (COM-ANY-EXTENDED-COMMAND
			       (GET-ANY-EXTENDED-COMMAND "Edit command:")))))
		   (SETQ COMMAND ANS))
		 (AND (CLOSUREP COMMAND)
		      (SETQ COMMAND (SI:FUNCTION-NAME (CLOSURE-FUNCTION COMMAND))))
		 (CATCH 'MODE-LINE-OVERFLOW
		   (FORMAT *MODE-LINE-WINDOW* " (~S)" COMMAND)))
	     (RETURN (EDIT-DEFINITION COMMAND))))
      SKIP))
  DIS-NONE)


(DEFCOM COM-MINI-VISITED-FILE
	"Evaluates a form, supplying the current default pathname as an argument.
It puts a Lisp form /"frame/" into the minibuffer, using the pathname as an
argument.  You end the form by pressing END.  The result of the evaluation is
displayed at the bottom of the screen.  It normally creates the filename
string using *PATHNAME-DEFAULTS*.  With a numeric arg, it uses
*AUX-PATHNAME-DEFAULTS* instead. " ()
  (EVALUATE-MINI-BUFFER
    (FORMAT NIL "( /"~A/")"
	    (DEFAULT-PATHNAME (IF *NUMERIC-ARG-P*
				  *AUX-PATHNAME-DEFAULTS* *PATHNAME-DEFAULTS*)))
    1))

(DEFUN INITIALIZE-ZMACS-COMTABS ()
  (SETQ *ZMACS-CONTROL-X-COMTAB* (CREATE-SPARSE-COMTAB "Zmacs Control-X"))
  (SET-COMTAB *ZMACS-CONTROL-X-COMTAB*
	      '(#\c-F COM-FIND-FILE
		#\c-R COM-FIND-FILE-IN-READ-ONLY-MODE
		#\c-V COM-VISIT-FILE
		#/B COM-SELECT-BUFFER
		#\c-W COM-WRITE-FILE
		#\c-S COM-SAVE-FILE
		#\c-B COM-LIST-BUFFERS
		#/K COM-KILL-BUFFER
		#/A COM-APPEND-TO-BUFFER
		#/1 COM-ONE-WINDOW
		#/2 COM-TWO-WINDOWS
		#/3 COM-VIEW-TWO-WINDOWS
		#/4 COM-MODIFIED-TWO-WINDOWS
		#/^ COM-GROW-WINDOW
		#/O COM-OTHER-WINDOW
		#/M COM-MAIL
		#/D COM-R-DIRED
		#/V COM-SHOW-BUFFER
		#/8 COM-TWO-WINDOWS-SHOWING-REGION
		#\c-m-L COM-SELECT-DEFAULT-PREVIOUS-BUFFER
		#\c-sh-B COM-EDIT-BUFFERS
		#\c-m-B COM-KILL-OR-SAVE-BUFFERS))
  (SET-COMTAB-INDIRECTION *ZMACS-CONTROL-X-COMTAB* *STANDARD-CONTROL-X-COMTAB*)
  (SETQ *ZMACS-COMTAB*
	(SET-COMTAB "Zmacs"
		    '(#\c-m-V COM-SCROLL-OTHER-WINDOW
		      #\c-m-sh-V COM-SCROLL-OTHER-WINDOW-BACKWARD
		      #\c-/; COM-INDENT-FOR-COMMENT
		      #\m-/; COM-INDENT-FOR-COMMENT
		      #\c-m-/; COM-KILL-COMMENT
		      #\m-N COM-DOWN-COMMENT-LINE
		      #\m-~ COM-NOT-MODIFIED
		      #\m-/. COM-EDIT-DEFINITION-AND-OTHER-DEFINITIONS 
		      #\c-/. COM-NEXT-POSSIBILITY
		      #\c-m-L COM-SELECT-PREVIOUS-BUFFER
		      #\c-m-~ COM-SET-READ-ONLY
		      #\m-shift-E COM-EVALUATE-CHANGED-DEFINITIONS-OF-BUFFER
		      #\m-shift-C COM-COMPILE-CHANGED-DEFINITIONS-OF-BUFFER)
		    (MAKE-COMMAND-ALIST
		     '(COM-REVERT-BUFFER COM-REFIND-FILE COM-REFIND-ALL-FILES
		       COM-VISIT-TAG-TABLE
		       COM-SET-READ-ONLY COM-NOT-MODIFIED COM-RELEASE-LOCKS
		       COM-SHOW-ZMACS-CONTEXT
		       COM-LIST-BUFFERS COM-SAVE-FILE-BUFFERS
		       COM-KILL-SOME-BUFFERS
		       COM-KILL-BUFFER COM-KILL-OR-SAVE-BUFFERS COM-SPLIT-SCREEN
		       COM-LIST-DEFINITIONS COM-LIST-TAG-TABLES COM-SELECT-TAG-TABLE
		       COM-EDIT-DEFINITION
		       COM-EDIT-FILE
		       COM-SET-DEFAULT-FILE-NAME COM-RENAME-BUFFER
		       COM-SET-VISITED-FILE-NAME COM-FIND-FILES-IN-TAG-TABLE
		       COM-TAGS-SEARCH COM-TAGS-QUERY-REPLACE COM-NEXT-FILE
		       COM-TAGS-FIND-PATTERN COM-TAGS-FIND-SYMBOLS-IN-REGION
		       COM-EDIT-CALLERS COM-LIST-CALLERS
		       COM-MULTIPLE-EDIT-CALLERS COM-MULTIPLE-LIST-CALLERS
		       COM-EDIT-CALLERS-IN-PACKAGE COM-LIST-CALLERS-IN-PACKAGE
		       COM-MULTIPLE-EDIT-CALLERS-IN-PACKAGE COM-MULTIPLE-LIST-CALLERS-IN-PACKAGE
		       COM-EDIT-CALLERS-IN-SYSTEM COM-LIST-CALLERS-IN-SYSTEM
		       COM-MULTIPLE-EDIT-CALLERS-IN-SYSTEM COM-MULTIPLE-LIST-CALLERS-IN-SYSTEM
		       COM-LIST-MATCHING-SYMBOLS COM-FUNCTION-APROPOS COM-SECTIONIZE-BUFFER
		       COM-LIST-METHODS COM-EDIT-METHODS
		       COM-LIST-COMBINED-METHODS COM-EDIT-COMBINED-METHODS
		       COM-CLEANUP-FLAVOR
		       COM-INSERT-CLEANUP-FLAVOR-FORMS ; lisp mode?
		       COM-UPDATE-ATTRIBUTE-LIST COM-EDIT-ZMACS-COMMAND
		       COM-COMPILE-FILE COM-LOAD-FILE COM-BUG COM-REPORT-BUG
		       COM-REPARSE-ATTRIBUTE-LIST
		       COM-SET-DEFAULT-CHARACTER-STYLE
		       COM-UPPERCASE-CODE-IN-BUFFER COM-LOWERCASE-CODE-IN-BUFFER
		       COM-EDIT-DIRECTORY
		       COM-DIRED
		       COM-REAP-FILE ;Retained for compatibility
		       COM-CLEAN-FILE COM-CLEAN-DIRECTORY COM-SHOW-FILE-PROPERTIES
		       COM-SET-FILE-PROPERTIES
		       COM-CHANGE-FILE-PROPERTIES ;Obsolete synonym for COM-SET-FILE-PROPERTIES
		       COM-MAIL
		       COM-FIND-FILE-IN-FUNDAMENTAL-MODE COM-FIND-FILE-IN-READ-ONLY-MODE
		       COM-COMPILER-WARNINGS COM-EDIT-FILE-WARNINGS COM-EDIT-COMPILER-WARNINGS
		       COM-LOAD-COMPILER-WARNINGS
		       COM-SELECT-SYSTEM-AS-TAG-TABLE COM-SELECT-ALL-BUFFERS-AS-TAG-TABLE
		       COM-SELECT-SOME-BUFFERS-AS-TAG-TABLE COM-SELECT-SOME-FILES-AS-TAG-TABLE
		       COM-MULTIPLE-QUERY-REPLACE-FROM-BUFFER
		       COM-TAGS-MULTIPLE-QUERY-REPLACE
		       COM-TAGS-MULTIPLE-QUERY-REPLACE-FROM-BUFFER
		       ;COM-ZTOP-MODE COM-SELECT-LAST-ZTOP-BUFFER
		       COM-SET-BACKSPACE COM-SET-TAB-WIDTH
		       COM-SET-NOFILL
		       COM-SET-PATCH-FILE ; reasonable because it applies outside of lisp.
		       COM-SHOW-BUFFER
		       COM-INSERT-BUFFER COM-PRINT-MODIFICATIONS
		       COM-COMPILE-CHANGED-DEFINITIONS
		       COM-COMPILE-CHANGED-DEFINITIONS-OF-BUFFER
		       COM-COMPILE-CHANGED-DEFINITIONS-OF-TAG-TABLE
		       COM-EVALUATE-CHANGED-DEFINITIONS
		       COM-EVALUATE-CHANGED-DEFINITIONS-OF-BUFFER
		       COM-LIST-CHANGED-DEFINITIONS COM-EDIT-CHANGED-DEFINITIONS
		       COM-LIST-CHANGED-DEFINITIONS-OF-BUFFER
		       COM-EDIT-CHANGED-DEFINITIONS-OF-BUFFER
		       COM-LIST-DUPLICATE-DEFINITIONS
		       COM-EDIT-INSTALLED-DEFINITION
		       COM-KILL-DEFINITION
		       COM-SOURCE-COMPARE COM-SOURCE-COMPARE-MERGE
		       COM-SOURCE-COMPARE-INSTALLED-DEFINITION
		       COM-SOURCE-COMPARE-MERGE-INSTALLED-DEFINITION
		       COM-SOURCE-COMPARE-SAVED-DEFINITION
		       COM-SOURCE-COMPARE-MERGE-SAVED-DEFINITION
		       COM-SOURCE-COMPARE-NEWEST-DEFINITION
		       COM-SOURCE-COMPARE-MERGE-NEWEST-DEFINITION
		       COM-ADD-PATCH COM-FINISH-PATCH COM-ABORT-PATCH COM-REVOKE-PATCH
		       COM-EDIT-PATCH-COMMENT COM-ADD-PATCH-COMMENT
		       COM-START-PATCH COM-START-PRIVATE-PATCH
		       COM-DECLARE-SYSTEM-FOR-PRIVATE-PATCH
		       COM-SET-PATCH-AUTHOR COM-SET-PATCH-REVIEWER
		       COM-ADD-PATCH-CHANGED-DEFINITIONS COM-RESUME-PATCH
		       COM-ADD-PATCH-CHANGED-DEFINITIONS-OF-BUFFER
		       COM-ADD-PATCH-CHANGED-DEFINITIONS-OF-TAG-TABLE		       
		       COM-SHOW-PATCHES COM-SELECT-PATCH
		       COM-RECOMPILE-PATCH COM-RELOAD-PATCH
		       COM-ADD-PATCH-UNDEFINE-FUNCTION
		       COM-ADD-PATCH-CLEANUP-FLAVOR
		       COM-EDIT-SYSTEM-FILES COM-EDIT-PATCH-FILE
		       COM-DOCUMENT-CHANGES COM-COMPARE-WINDOWS
		       COM-SORT-VIA-KEYBOARD-MACROS COM-EDIT-TAB-STOPS
		       ))))
  (SET-COMTAB *ZMACS-COMTAB* ()
	      '(("Execute CP Command" . COM-EXECUTE-CP-COMMAND)
		("Edit CP Command" . COM-EDIT-CP-COMMAND)))
  (SET-COMTAB-INDIRECTION *ZMACS-COMTAB* *STANDARD-COMTAB*)
  (SET-COMTAB *ZMACS-COMTAB*
	      (LIST #\c-X (MAKE-EXTENDED-COMMAND *ZMACS-CONTROL-X-COMTAB*)))
  (SET-COMTAB *ZMACS-COMTAB*
	      (LIST #\Mouse-R
	       (MAKE-MENU-COMMAND '(COM-ARGLIST COM-EDIT-DEFINITION
				    COM-LIST-CALLERS COM-LIST-DEFINITIONS COM-LIST-BUFFERS
				    COM-KILL-OR-SAVE-BUFFERS COM-SPLIT-SCREEN
				    COM-COMPILE-REGION COM-INDENT-REGION
				    COM-CHANGE-TYPEIN-STYLE COM-CHANGE-STYLE-REGION
				    COM-UPPERCASE-REGION COM-LOWERCASE-REGION
				    COM-MOUSE-INDENT-RIGIDLY COM-MOUSE-INDENT-UNDER))))
  (SETQ *PATCH-COMMENT-COMTAB*
	(SET-COMTAB "Patch Comment Editor"
		    '(#\ABORT COM-STANDALONE-ABORT)))
  (SET-COMTAB-INDIRECTION *PATCH-COMMENT-COMTAB* *STANDALONE-COMTAB*))

(DEFUN ZMACS-COMMAND-IN-PROGRESS (PROCESS)
  (LET ((SG (PROCESS-STACK-GROUP PROCESS)))
    (COND ((NULL SG)
	   NIL)
	  ((> (SYMEVAL-IN-STACK-GROUP 'DBG:*DEBUGGER-LEVEL* SG) 0)
	   :DEBUGGER)
	  (T
	   (SYMEVAL-IN-STACK-GROUP '*CURRENT-COMMAND* SG)))))

(DEFUN ZMACS-COMMAND-MESSAGE-NAME (COMMAND)
  (OR (IF (OR (SYS:DYNAMIC-CLOSURE-P COMMAND)
	      (SYS:LEXICAL-CLOSURE-P COMMAND))
	  (LET ((FUNCTION (SYS:FUNCTION-NAME
			    (SYS:CLOSURE-FUNCTION COMMAND))))
	    (WHEN (AND (LISTP FUNCTION)
		       (EQ (FIRST FUNCTION) ':INTERNAL))
	      (SETQ FUNCTION (SECOND FUNCTION)))
	    (SELECTQ FUNCTION
	      (MAKE-MENU-COMMAND "menu")
	      (MAKE-EXTENDED-COMMAND-INTERNAL
	       "command-escape-prefix")
	      (MAKE-MACRO-COMMAND "keyboard-macro")))
	(COMMAND-NAME COMMAND T))
      "unknown"))

(DEFCOM COM-SHOW-ZMACS-CONTEXT
	"Describe the context of the current Zmacs process.
With a numeric argument, describe the context of all Zmacs processes." ()
  (LABELS ((SHOW (COMMAND-LOOP)
	     (LET* ((PROCESS (SEND COMMAND-LOOP :PROCESS))
		    (SG (PROCESS-STACK-GROUP PROCESS)))
	       (MACROLET ((SYMBOL (SYMBOL)
			    `(SYMEVAL-IN-STACK-GROUP ',SYMBOL SG)))
		 (LET* ((COMMAND (ZMACS-COMMAND-IN-PROGRESS PROCESS))
			(COMMAND-NAME (ZMACS-COMMAND-MESSAGE-NAME COMMAND))
			(BUFFER (SYMBOL *INTERVAL*))
			(DEFS-BUFFER (SYMBOL *ZMACS-DEFINITIONS-BUFFER*))
			(POSS-BUFFER (SYMBOL *ZMACS-POSSIBILITIES-BUFFERS*))
			)
		   (FORMAT T
		       "~&Editor process ~A is ~
			~:[awaiting input~*~;executing a ~A command~].~
			~%  Its currently selected buffer is ~A.~
			~:[~*~*~;~%  Its current definitions buffer is ~A, editing ~S.~]~
			~:[~*~;~%  Its current possibilities buffer is ~A.~]"
		     PROCESS COMMAND COMMAND-NAME
		     (IF (TYPEP BUFFER 'FILE-BUFFER) (SEND BUFFER :PATHNAME) BUFFER)
		     DEFS-BUFFER DEFS-BUFFER
		     (AND DEFS-BUFFER (CAR (SYMEVAL-IN-INSTANCE
					     DEFS-BUFFER 'FUNCTION-SPECS)))
		     POSS-BUFFER (CAR POSS-BUFFER)))))))
    (IF *NUMERIC-ARG-P*
	(MAPC #'SHOW *ZMACS-COMMAND-LOOPS*)
      (SHOW *ZMACS-COMMAND-LOOP*))
    (WHEN *CURRENT-PATCH*
      (IF (PRIVATE-PATCH-P *CURRENT-PATCH*)
	  (FORMAT T "~&The currently selected patch is the private patch ~A"
	    (SEND (PATCH-STATE-BUFFER *CURRENT-PATCH*) :PATHNAME))
	(FORMAT T "~&The currently selected patch is for ~A ~D.~D"
	  (PATCH-STATE-SYSTEM *CURRENT-PATCH*)
	  (PATCH-STATE-MAJOR-VERSION *CURRENT-PATCH*)
	  (PATCH-STATE-MINOR-VERSION *CURRENT-PATCH*))))
    (WHEN *ZMACS-TAG-TABLE-BUFFER*
      (FORMAT T "~&The currently selected tag table is ~A, comprised of the "
	*ZMACS-TAG-TABLE-BUFFER*)
      (SEND *ZMACS-TAG-TABLE-BUFFER* ':HEADER-DESCRIPTION-1 STANDARD-OUTPUT T)))
  DIS-NONE)

;; Normal user function, calls ZED unless already inside the editor.
(DEFUN ED (&OPTIONAL THING)
  (COND ((NOT *INSIDE-ZMACS*)			;Outside, enter the editor
	 (ZED THING))
	((ZEROP DBG:*DEBUGGER-LEVEL*)
	 (WHEN THING
	   (SEND *ZMACS-COMMAND-LOOP* :EDIT-THING THING))
	 (THROW 'TOP-LEVEL T))			;Throw out of recursive edits
	((NOT *ENFORCE-SINGLE-ZMACS-PROCESS*)
	 (CL:ECASE
	   (LET-IF (AND (NOT DBG:*INSIDE-DISPLAY-DEBUGGER*)
			(VARIABLE-BOUNDP *TYPEOUT-WINDOW*)
			*TYPEOUT-WINDOW*)
		   ((QUERY-IO *TYPEOUT-WINDOW*))
	     (LET ((PTYPE `((CL:MEMBER :REUSE :OTHER :SKIP)))
		   (HELP-TEXT
		     (FORMAT NIL "You are being asked for an action to ~
				  take with respect to the busy editor:~@
				  ~2TReuse the editor, losing the state of the Debugger.~@
				  ~2TOther editor: find or create another editor.~@
				  ~2TSkip this attempt to use the editor.")))
	       (FORMAT QUERY-IO
		   "~&You are already running inside the editor; reusing it will lose the ~
		      state of the Debugger.")
	       (DW:WITH-ACCEPT-HELP
		   (((:SUBHELP :OVERRIDE) HELP-TEXT))
		 (SCL:ACCEPT PTYPE))))
	   (:SKIP
	     (RETURN-FROM ED NIL))
	   (:REUSE
	     (WHEN THING
	       (SEND *ZMACS-COMMAND-LOOP* :EDIT-THING THING))
	     (PROCESS:RESET *CURRENT-PROCESS*))
	   (:OTHER
	     (ZED THING NIL T))))
	((Y-OR-N-P "You are already running inside the editor.
If you edit that you will lose the state of the Debugger.
OK to go ahead? ")					;Right process, but in debugger
	 (WHEN THING
	   (SEND *ZMACS-COMMAND-LOOP* :EDIT-THING THING))
	 (PROCESS:RESET *CURRENT-PROCESS*))))	;Will see command in I/O buffer

(SI:DEFINE-FILE-EDITOR ED
  :PRETTY-NAME "Zmacs"
  :FILE-FILTER 'SI:TEXT-FILE-P
  :FILE-FILTER-DESCRIPTION "text file"
  :CONTEXT-FILTER #'(LAMBDA () (NOT (SYS:REMOTE-TERMINAL-P)))
  :CONTEXT-FILTER-DESCRIPTION "on the main screen"
  :PERMIT-MULTIPLE T
  :SOURCE-FILTER 'SI:TEXT-OR-SOURCE)

(DEFPROP ZED "Enter Editor" COMMAND-NAME)   ;ZED is bound as *CURRENT-COMMAND* by EDIT-THING

;;; This is the normal top-level function, it takes the optional name of a thing to munge
(DEFUN ZED (&OPTIONAL THING COMMAND-LOOP ALREADY-QUERIED-P)
  (WHEN (NETI:REMOTE-TERMINAL-P)
    (FORMAT T "~&Zmacs can currently only be used from the main console.~%")
    (RETURN-FROM ZED NIL))
  (FLET ((VALIDATE-COMMAND-LOOP (COMMAND-LOOP)
	   (LET ((PROCESS (SEND COMMAND-LOOP :PROCESS)))
	     (UNWIND-PROTECT
		 (PROGN
		   (UNLESS (EQ PROCESS *CURRENT-PROCESS*)
		     (PROCESS:ENABLE-ARREST-REASON PROCESS 'ZED))
		   (LOOP DOING
		     (LET ((COMMAND (ZMACS-COMMAND-IN-PROGRESS PROCESS)))
		       (WHEN (NULL COMMAND)
			 (RETURN))
		       (CL:ECASE
			 (LET-IF (AND (NOT DBG:*INSIDE-DISPLAY-DEBUGGER*)
				      (VARIABLE-BOUNDP *TYPEOUT-WINDOW*)
				      *TYPEOUT-WINDOW*)
				 ((QUERY-IO *TYPEOUT-WINDOW*))
			   (PROG1
			     (IF ALREADY-QUERIED-P
				 (IF
				   (YES-OR-NO-P
				     "Do you really want to create another editor window? ")
				   :OTHER :SKIP)
			       (LET ((PTYPE
				       `((CL:MEMBER
					   :REUSE :WAIT
					   ,@(AND (NULL *ENFORCE-SINGLE-ZMACS-PROCESS*)
						  (LIST :OTHER))
					   :SKIP)))
				     (HELP-TEXT
				       (FORMAT NIL
					       "You are being asked for an action to ~
					take with respect to the busy editor:~@
					~2TReuse the editor, ~
					   ~:[terminating the command being executed~;~
					      losing the state of the Debugger~].~@
					~2TWait for the ~:[command~;Debugger~] to ~
					   finish.~:[~@
					~2TOther editor: find or create another ~
					   editor.~]~@
					~2TSkip this attempt to use the editor."
					       (EQ COMMAND :DEBUGGER)
					       (EQ COMMAND :DEBUGGER)
					       *ENFORCE-SINGLE-ZMACS-PROCESS*)))
				 (LET ((COMMAND-NAME
					 (ZMACS-COMMAND-MESSAGE-NAME COMMAND)))
				   (FORMAT QUERY-IO
					   "~2&The editor is currently ~
				       ~:[executing ~:[a~;an~] ~A command~;~
					  waiting in the Debugger~2*~]; ~
					reusing it will lose the~@
					state of the ~:[command~;Debugger~]."
					   (EQ COMMAND :DEBUGGER)
					   (MEM #'CHAR-EQUAL
						(AREF (STRING COMMAND-NAME) 0)
						'(#/a #/e #/i #/o #/u))
					   COMMAND-NAME
					   (EQ COMMAND :DEBUGGER)))
				 (DW:WITH-ACCEPT-HELP
				     (((:SUBHELP :OVERRIDE) HELP-TEXT))
				   (SCL:ACCEPT PTYPE))))
			     (SEND-IF-HANDLES QUERY-IO :MAKE-COMPLETE)))
			 (:SKIP (RETURN-FROM ZED NIL))
			 (:REUSE (RETURN-FROM VALIDATE-COMMAND-LOOP T))
			 (:OTHER (RETURN-FROM VALIDATE-COMMAND-LOOP NIL))
			 (:WAIT 
			   (FORMAT QUERY-IO "~&Waiting for Zmacs to go idle...")
			   (PROCESS:DISABLE-ARREST-REASON PROCESS 'ZED)
			   (PROCESS-WAIT "Zmacs idle"
			     #'(LAMBDA (P)
				 (NULL (ZMACS-COMMAND-IN-PROGRESS P)))
			     PROCESS)
			   ;; This process can't possibly be ourselves...
			   (PROCESS:ENABLE-ARREST-REASON PROCESS 'ZED)))))
		   ;; Stop the ZMACS window process for now, to avoid timing screws.
		   ;; It will start up again when we reset it.
		   (UNLESS (EQ PROCESS *CURRENT-PROCESS*)
		     (PROCESS:FLUSH PROCESS)))
	       (PROCESS:DISABLE-ARREST-REASON PROCESS 'ZED)))))
    (LET ((CONSOLE (DW::STREAM-CONSOLE TERMINAL-IO)))
      (SETQ *ZMACS-CALLER-WINDOW* (SYS:CONSOLE-SELECTED-WINDOW CONSOLE))
      (WHEN (NULL COMMAND-LOOP)
	(SETF COMMAND-LOOP
	      (BLOCK FIND-COMMAND-LOOP
		(LET ((PREVIOUS-COMMAND-LOOP
			(LET ((PREVIOUS-ZMACS
				(CLI::FIND-FRAME-FOR-ACTIVITY CONSOLE NIL
							      #'(LAMBDA (WINDOW)
								  (TYPEP WINDOW 'ZMACS-FRAME))
							      NIL
							      :SELECT NIL :SELECTED-OK NIL)))
			  (AND PREVIOUS-ZMACS (SEND PREVIOUS-ZMACS :COMMAND-LOOP)))))
		  (WHEN (AND PREVIOUS-COMMAND-LOOP
			     (VALIDATE-COMMAND-LOOP PREVIOUS-COMMAND-LOOP))
		    (RETURN-FROM FIND-COMMAND-LOOP PREVIOUS-COMMAND-LOOP))
		  (DOLIST (COMMAND-LOOP *ZMACS-COMMAND-LOOPS*)
		    (LET ((ZWF (WINDOW-FRAME (SYMEVAL-IN-INSTANCE COMMAND-LOOP '*WINDOW*))))
		      ;; Don't find a Zmacs frame which lives on another console
		      ;; (for example, don't bring up an editor on a color console
		      ;; when the user is currently using the B+W console).
		      (WHEN (AND (NOT (EQ COMMAND-LOOP PREVIOUS-COMMAND-LOOP))
				 (NOT (EQ ZWF *ZMACS-CALLER-WINDOW*))
				 (TYPEP ZWF 'ZMACS-FRAME)
				 (EQ (TV:SHEET-CONSOLE ZWF) CONSOLE)
				 (VALIDATE-COMMAND-LOOP COMMAND-LOOP))
			(RETURN-FROM FIND-COMMAND-LOOP COMMAND-LOOP))))
		  (WHEN (OR (NULL PREVIOUS-COMMAND-LOOP)
			    (Y-OR-N-P "Create a new Zmacs frame? "))
		    (RETURN-FROM FIND-COMMAND-LOOP
		      (SEND (TV:MAKE-WINDOW 'ZMACS-FRAME) :COMMAND-LOOP)))
		  (RETURN-FROM ZED NIL)))))
	
      (WHEN (MEMQ THING '(RELOAD :RELOAD))
	(SETQ *ZMACS-NEEDS-INITIALIZATION* T)
	(MAKUNBOUND '*TICK*))
      ;; Now we can safely do things like initialize
      (INITIALIZE-ZMACS-IF-NECESSARY)
      (SEND COMMAND-LOOP :MINI-BUFFER-ACCIDENTALLY-SELECTED-KLUDGE)
      ;; And select something according to our argument.
      (WHEN (AND THING (NOT (MEMQ THING '(RELOAD :RELOAD))))
	(SEND COMMAND-LOOP :EDIT-THING THING))
      ;; Now start the ZMACS process up again and select the appropriate windows.
      (LET ((PROCESS (SEND COMMAND-LOOP :PROCESS)))
	(UNWIND-PROTECT
	    (PROGN
	      (UNLESS (EQ PROCESS *CURRENT-PROCESS*)
		(PROCESS:ENABLE-ARREST-REASON PROCESS 'ZED))
	      (SEND (WINDOW-FRAME (SYMEVAL-IN-INSTANCE COMMAND-LOOP '*WINDOW*)) :SELECT))
	  (PROCESS:RESET PROCESS :IF-CURRENT-PROCESS NIL)
	  (PROCESS:DISABLE-ARREST-REASON PROCESS 'ZED)))
      ;; Some people operate their Lisp Listeners in Terminal-4-T mode with input
      ;; notifications turned on.  This prevents them from getting obnoxious beeps.
      (TV:AWAIT-WINDOW-EXPOSURE))))

(DEFUN EDIT-FUNCTIONS (FUNCTIONS)
  (ED (CONS 'MULTIPLE-FUNCTIONS FUNCTIONS)))

;; Called in ZYMURG
(DEFUN INITIALIZE-ZMACS-IF-NECESSARY (&AUX WINDOW)
  (WHEN *ZMACS-NEEDS-INITIALIZATION*
    (TV:DELAYING-SCREEN-MANAGEMENT
      (SETQ *ZMACS-BUFFER-HISTORY* NIL)		;Needed by mini-buffer creation.
      (UNLESS (VARIABLE-BOUNDP *TICK*)
	(INITIALIZE-ZWEI-GLOBALS))
      (INITIALIZE-ZMACS-COMTABS)
      (WHEN *ZMACS-WINDOW-PROCESS*
	(FLUSH-PROCESS-WINDOWS *ZMACS-WINDOW-PROCESS*)
	(SETQ *ZMACS-WINDOW-PROCESS* NIL))
      (SETQ *ZMACS-BUFFER-LIST* NIL)
      (SETQ *ZMACS-BUFFER-ALIST* NIL)
      (SETQ *ZMACS-BUFFER-HISTORY* (LIST-IN-AREA *ZMACS-BUFFER-AREA*))
      (SETQ *ZMACS-COMPLETION-AARRAY* (SI:MAKE-AARRAY 1000. :NAME "editor completion table"))
      (SETQ SI:*READ-FORM-COMPLETION-ALIST* :ZMACS)
      ;; No need to precreate a buffer anymore as creating the Zmacs frame will do that bit.
      (SETQ *ZMACS-MAIN-FRAME* (TV:MAKE-WINDOW 'ZMACS-FRAME
					       :IO-BUFFER NIL :ACTIVATE-P T :SAVE-BITS T))
      (SETQ WINDOW (SEND *ZMACS-MAIN-FRAME* :EDITOR-WINDOW))
      (SEND *ZMACS-MAIN-FRAME* :CREATE-WINDOW 'ZMACS-WINDOW-PANE)
      (CREATE-OVERLYING-WINDOW WINDOW)
      ;; The top-level values for these reflect the original Zmacs
      (SETQ *ZMACS-WINDOW-PROCESS* (SEND *ZMACS-MAIN-FRAME* :PROCESS)
	    *ZMACS-COMMAND-LOOP* (SEND *ZMACS-MAIN-FRAME* :COMMAND-LOOP))
      (MULTIPLE-VALUE (NIL *ZMACS-STREAM*)
	(SEND *ZMACS-COMMAND-LOOP* :TERMINAL-STREAMS))
      ;; This causes the pane to become exposed relative to the frame, which means the
      ;; :START-DELAYED-SELECT message will not cause it to become selected when the
      ;; editor starts running.
      (SEND (WINDOW-SHEET WINDOW) :EXPOSE)
      ;; The following variable is part of the speller, so it has not
      ;; yet been declared special.  It needs to be reset or else the
      ;; speller will appear to "go dead".
      (LOCAL-DECLARE ((SPECIAL *AUTOMATICALLY-READ-DICTIONARIES*))
	(SETQ *AUTOMATICALLY-READ-DICTIONARIES* T))
      (SETQ *ZMACS-NEEDS-INITIALIZATION* NIL))))

(ADD-INITIALIZATION "INITIALIZE-ZMACS-IF-NECESSARY" '(INITIALIZE-ZMACS-IF-NECESSARY)
		    '(:NORMAL) '*EDITOR-INITIALIZATION-LIST*)

(DEFMETHOD (:EDIT-THING ZMACS-TOP-LEVEL-EDITOR) (THING)
  (TV:IO-BUFFER-PUT TV:IO-BUFFER `(:EXECUTE EDIT-THING ,THING)
		    T "ZMACS Command" NIL))

(COMPILER:FUNCTION-DEFINED 'EDIT-SAGE-DEFINITION-INTERNAL)	; Forward ref: Concordia
(COMPILER:FUNCTION-DEFINED 'EDIT-ADA-SECTION)	; Forward reference: Ada
(DEFUN EDIT-THING (THING)
  (LET (TEM)
    (MACROLET ((BINDING-CURRENT-COMMAND-NAME ((NAME) &BODY BODY)
		 `(LET ((*CURRENT-COMMAND* ',NAME))
		    ,@BODY)))
      (BINDING-CURRENT-COMMAND-NAME (ZED)
	(COND ((EQ THING T)
	       (MAKE-BUFFER-CURRENT (MAKE-BUFFER 'NON-FILE-BUFFER)))
	      ((OR (STRINGP THING) (TYPEP THING 'FS:PATHNAME))
	       (BINDING-CURRENT-COMMAND-NAME (COM-FIND-FILE)
		 (FIND-DEFAULTED-FILE THING)))
	      ((AND (LISTP THING) (OR (STRINGP (CAR THING)) (TYPEP (CAR THING) 'FS:PATHNAME)))
	       (BINDING-CURRENT-COMMAND-NAME (COM-FIND-FILE)
		 (FIND-MULTIPLE-DEFAULTED-FILES THING)))
	      ((AND (LISTP THING) (EQ (CAR THING) 'MULTIPLE-FUNCTIONS))
	       (BINDING-CURRENT-COMMAND-NAME (COM-EDIT-DEFINITION)
		 (SETUP-MULTIPLE-FUNCTIONS-TO-BE-EDITED
		   (COPYLIST (CDR THING)) ':START-EDITING)))
	      ((AND (LISTP THING) (EQ (CAR THING) 'DIRECTORY))
	       (BINDING-CURRENT-COMMAND-NAME (COM-DIRED)
		 (DIRECTORY-EDIT (CDR THING))))	;the CAR of which had better be a pathname
	      ((AND (LISTP THING) (EQ (CAR THING) 'EDIT-SAGE-DEFINITION))
	       (EDIT-SAGE-DEFINITION-INTERNAL (SECOND THING) (THIRD THING)))
	      ((AND (LISTP THING) (EQ (CAR THING) 'FUNCTION-AT-BP))
	       (BINDING-CURRENT-COMMAND-NAME (COM-EDIT-DEFINITION)
		 ;; The list is (function-at-bp function-name bp definition-type)
		 (EDIT-DEFINITION (CADR THING) (LIST (CADDDR THING)) T)
		 ;; Don't use a joke BP in a stale source locator.
		 (LET ((BP (CADDR THING)))
		   (WHEN (VALIDATE-BP-FOR-CURRENT-SECTION BP)
		     (MOVE-POINT BP)))
		 ;; Need to force redisplay after moving the point
		 (MUST-REDISPLAY *WINDOW* DIS-ALL)))
	      ((AND (LISTP THING) (EQ (FIRST THING) 'EDIT-DEFINITION))
	       (BINDING-CURRENT-COMMAND-NAME (COM-EDIT-DEFINITION)
		 (EDIT-DEFINITION (SECOND THING) (THIRD THING) T)))
	      ((AND (LISTP THING) (TYPEP (CAR THING) 'ZWEI:SECTION-NODE))
	       ;; ADA is forced to use section nodes, alas we know they are stable
	       (PUSH-POSSIBILITIES-BUFFER
		 :START-EDITING :ADA-SECTION-NODES :SET-SECTION-NODES THING))
	      ((AND (LISTP THING) (EQ (FIRST THING) 'BUFFER-AT-POSITION))
	       (MAKE-BUFFER-CURRENT (SECOND THING))
	       (MOVE-POINT (THIRD THING))
	       (MUST-REDISPLAY *WINDOW* DIS-ALL))
	      ((OR (SYS:CLOSUREP THING) (SYS:LEXICAL-CLOSURE-P THING))
	       (EDIT-THING (SYS:CLOSURE-FUNCTION THING)))
	      ((SYS:VALIDATE-FUNCTION-SPEC THING)	;function spec, :method, or :handler
	       (BINDING-CURRENT-COMMAND-NAME (COM-EDIT-DEFINITION)
		 (EDIT-DEFINITION (SYMBOL-FROM-STRING THING NIL T) NIL T)))
	      ;; This is like calling MAKE-BUFFER-CURRENT when outside of Zmacs
	      ((TYPEP THING 'BUFFER)
	       (MAKE-BUFFER-CURRENT THING))
	      ((AND (MAJOR-MODE-FROM-KEYWORD :ADA :SILENT)
		    (TYPEP THING 'ZWEI:SECTION-NODE)
		    (EQ (MAJOR-MODE-FROM-KEYWORD :ADA :SILENT)
			(SEND (BP-TOP-LEVEL-NODE (SEND THING :FIRST-BP)) :MAJOR-MODE)))
	       ;; Boy, this is gross.  Maybe there is a better way...
	       (EDIT-ADA-SECTION THING))
	      ((INSTANCEP THING)		;instance, so edit its flavor
	       (BINDING-CURRENT-COMMAND-NAME (COM-EDIT-DEFINITION)
		 (EDIT-DEFINITION (SYMBOL-FROM-STRING (TYPEP THING) NIL T) '(DEFFLAVOR) T)))
	      ;; Last ditch effort for functions and closures
	      ;; If the returned function name is not eq to the passed thing, then
	      ;; it must be a compiled function or closure
	      ((AND (SETQ TEM (SI:FUNCTION-NAME THING))
		    (NEQ TEM THING))		;compiled function, closure
	       (BINDING-CURRENT-COMMAND-NAME (COM-EDIT-DEFINITION)
		 (EDIT-DEFINITION (SYMBOL-FROM-STRING TEM NIL T) '(DEFUN) T)))
	      (T (BARF "Don't know what to do with ~S" THING)))))))

(DEFMETHOD (:ADD-WINDOW ZMACS-TOP-LEVEL-EDITOR) (WINDOW)
  (PUSH* WINDOW *WINDOW-LIST*))

(DEFMETHOD (:FIND-BUFFER-NAMED ZMACS-EDITOR) (NAME &OPTIONAL CREATE-P
						   &REST CREATE-OPTIONS)
  (MAKE-BUFFER-CURRENT (FIND-BUFFER-NAMED NAME CREATE-P CREATE-OPTIONS)))

(DEFUN LOAD-FILE-INTO-ZMACS (PATHNAME &OPTIONAL SELECT-P)
  (LET (BUFFER)
    (CATCH-ZWEI-COMMAND-LOOP
      (MULTIPLE-VALUE (NIL BUFFER)
	(SEND *ZMACS-COMMAND-LOOP* ':FIND-FILE-FROM-OUTSIDE
	      PATHNAME STANDARD-OUTPUT (NOT (VARIABLE-BOUNDP *WINDOW*)) SELECT-P)))
    (VALUES NIL BUFFER)))

(DEFMETHOD (:FIND-FILE-FROM-OUTSIDE ZMACS-EDITOR) (PATHNAME STREAM BIND-P &OPTIONAL SELECT-P)
  (LET* ((*WINDOW* (IF (AND BIND-P (NOT (VARIABLE-BOUNDP *WINDOW*)))
		       ;; Don't try too hard to bind *WINDOW* to NIL,
		       ;; since this method magically binds special IVs
		       NIL *WINDOW*))
	 (*TYPEOUT-WINDOW* (IF BIND-P STREAM *TYPEOUT-WINDOW*))
	 (*TYPEIN-WINDOW* (IF BIND-P STREAM *TYPEIN-WINDOW*))
	 (*INTERVAL* (IF BIND-P NIL *INTERVAL*))
	 (*NUMERIC-ARG-P* (IF BIND-P NIL *NUMERIC-ARG-P*))
	 (*CURRENT-COMMAND-LOOP* SELF))
    (FIND-FILE PATHNAME SELECT-P)))

(DEFMETHOD (:FIND-FILE ZMACS-EDITOR) (PATHNAME)
  (FIND-FILE PATHNAME NIL :QUERY))

(DEFMETHOD (:FIND-EMPTY-FILE ZMACS-EDITOR) (PATHNAME &AUX BUFFER)
  (MULTIPLE-VALUE (NIL BUFFER)
    (FIND-FILE PATHNAME NIL :QUERY))
  (DELETE-INTERVAL BUFFER))

(DEFMETHOD (:SAVE-FILE ZMACS-EDITOR) (PATHNAME &OPTIONAL CONFIRM &AUX BUFFER)
  (SETQ BUFFER (FIND-BUFFER-NAMED PATHNAME))
  (LET*-INSTANCE-VARIABLES ((*WINDOW* NIL)
			    (*TYPEOUT-WINDOW* STANDARD-OUTPUT)
			    (*TYPEIN-WINDOW* STANDARD-OUTPUT)
			    (*NUMERIC-ARG-P* NIL))
    (SAVE-BUFFER-IF-NECESSARY BUFFER CONFIRM)))

(DEFMETHOD (POINT-PDL-PURGE-INTERNAL ZMACS-EDITOR) (BUFFER)
  ;; in lieu of locking on the list of editors
  (WITHOUT-INTERRUPTS
    (LOOP FOR EDITOR IN *ZMACS-COMMAND-LOOPS*
	  DO (WITHOUT-INTERRUPTS		;In lieu of locking on the editor
	       (POINT-PDL-PURGE-ONE-BUFFER EDITOR BUFFER)))))

(DEFMETHOD (POINT-PDL-PURGE-ONE-BUFFER ZMACS-EDITOR :AFTER) (BUFFER)
  ;; Since we can't asynchronously switch buffers and expect it to notice,
  ;; the least we can do is mark it read-only.
  (WHEN (EQL BUFFER *INTERVAL*)
    (SEND *INTERVAL* :SET-READ-ONLY)))
