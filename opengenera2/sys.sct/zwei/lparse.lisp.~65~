;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; The purpose of this file is parsing and moving over units of Lisp code.
;; We avoid having to parse all the text that we move over each time we move
;; by remembering information about each line that we parse and using
;; that information the next time we parse across that line.
;; This information is stored on the LINE-CONTENTS-PLIST of the line
;; as the LISP-PARSE-LINE property, and its form is the same as the value
;; returned by LISP-PARSE-LINE (q.v.).  LINE-CONTENTS-PLIST is cleared
;; out whenever the contents of the line are changed.  Thus, if there is
;; any remembered information available, it has to be valid.

;; Useful functions include:
;; FORWARD-SEXP which is the normal way to move across or up list structure;
;; LISP-PARSE-FROM-DEFINITION which can tell you whether a given line
;;   starts inside a string or not;
;; LISP-BP-SYNTACTIC-CONTEXT which tells you whether a given char is
;;   inside a string, slashified, or in a comment;
;; LISP-FIND-COMMENT-START which can tell you whether a line contains
;;   a comment, and, if so, where in the line it starts;
;; LISP-FIND-COMMENT-START-AND-END which does that
;;   and also says where the comment starter ends.

;; If *LISP-PARSE-PREPARSED-FLAG* is T, LISP-PARSE-FROM-DEFINITION assumes that the
;; lines all already have memoized parsings which are consistent and accurate.

;; LISP-PARSE-LINE.
;; Scan a line, parsing as Lisp code to learn the information
;; useful for scanning quickly over the line as part of parsing a
;; multi-line s-expression.
;; If START-IN-STRING is non-nil, it should be #/" or #/|,
;; and signifies that the start of the line is within such a grouping.
;; START-INDEX and END-INDEX delimit the part of the line to be scanned.
;; The value is a number or a list.  If it is a number, it is the
;; total change in paren depth across the line (positive means open-parens).
;; If it is a list, the first element is the total change in depth,
;; the second is the smallest depth encountered in the line
;; (for the obscure case of lines looking like " ...) (... "),
;; the third is copied from START-IN-STRING, and the fourth
;; is like START-IN-STRING but applies to the end of the line instead of the start.
;; Elements of the list which are nil can be left out entirely.
;; If the value is just a number, you can assume that the minimum depth
;; was equal to (MIN 0 total-change-in-depth).
(DEFUN LISP-PARSE-LINE (LINE START-IN-STRING 
			&OPTIONAL (START-INDEX 0) (END-INDEX (LINE-LENGTH LINE)))
  (LET* ((LINE LINE)
	 (SYNTAX-TABLE *MODE-LIST-SYNTAX-TABLE*)
	 (SYNTAX-TABLE-LENGTH (ARRAY-LENGTH SYNTAX-TABLE)))
    (DECLARE (SYS:ARRAY-REGISTER LINE SYNTAX-TABLE))
    (DO ((DEPTH 0) (MINDEPTH 0) (IN-STRING START-IN-STRING)
	 (INDEX START-INDEX (1+ INDEX))
	 (CH) (SYNTAX))
	(( INDEX END-INDEX)
	 (COND ((OR IN-STRING START-IN-STRING)
		(LIST DEPTH MINDEPTH START-IN-STRING IN-STRING))
	       (( MINDEPTH (MIN 0 DEPTH)) DEPTH)
	       (T (LIST DEPTH MINDEPTH))))
      (SETQ CH (AREF LINE INDEX))
      (COND ((= (SETQ SYNTAX (CHAR-SYNTAX* CH SYNTAX-TABLE SYNTAX-TABLE-LENGTH)) LIST-SLASH)
	     (SETQ INDEX (1+ INDEX)))		;This one a / => skip over next char.
	    (IN-STRING				;In a string, the opening char can close it.
	     (AND (CHAR-EQUAL CH IN-STRING)	;Aside from that and slashes, nothing matters.
		  (SETQ IN-STRING NIL)))
	    ((OR (= SYNTAX LIST-DOUBLE-QUOTE) (= SYNTAX LIST-VERTICAL-BAR))	  
	     (SETQ IN-STRING CH))
	    ((= SYNTAX LIST-OPEN)		;Open
	     (SETQ DEPTH (1+ DEPTH)))
	    ((= SYNTAX LIST-CLOSE)		;Close
	     (SETQ DEPTH (1- DEPTH))
	     (SETQ MINDEPTH (MIN DEPTH MINDEPTH)))
	    ((= SYNTAX LIST-COMMENT)		; ; starts comment
	     (SETQ INDEX END-INDEX))))))	; No need to scan through it!


;; This is just like LISP-PARSE-LINE except that it is memoized.
;; It remembers its parsing of a line as the LISP-PARSE-LINE propety
;; in the LINE-CONTENTS-PLIST of the line.
;; Memoizing is only done when the entire line is being parsed.
;; Because START-IN-STRING is remembered as part of the value,
;; we can tell whether the remembered value is for the same
;; setting of START-IN-STRING as we are now using.
;; The LINE-CONTENTS-PLIST of a line is cleared when the line is munged.
;; Thus, if we have a remembered value, we know it matches the current contents.

(DEFVAR *%SUPPRESS-LISP-PARSE-LINE-MEMOIZATION* NIL)

(DEFUN LISP-PARSE-LINE-MEMOIZED (LINE START-IN-STRING
				 &OPTIONAL (START-INDEX 0) (END-INDEX (LINE-LENGTH LINE))
				 &AUX TEM)
  (COND ((AND (ZEROP START-INDEX)
	      (= END-INDEX (LINE-LENGTH LINE))
	      ;; If we are parsing the whole string,
	      ;; and there is a remembered value for this string,
	      (SETQ TEM
		    (AND (NOT *%SUPPRESS-LISP-PARSE-LINE-MEMOIZATION*)
			 (GET (LOCF (LINE-CONTENTS-PLIST LINE)) 'LISP-PARSE-LINE)))
	      ;; and it used the same START-IN-STRING as we are using now,
	      ;; then just return it.
	      (EQUAL START-IN-STRING
		     (AND (LISTP TEM) (CADDR TEM)))))
	;; Otherwise, reparse the line
	(T (SETQ TEM (LISP-PARSE-LINE LINE START-IN-STRING START-INDEX END-INDEX))
	   ;; and, if we are parsing the entire line, remember the result.
	   (WHEN (AND (NOT *%SUPPRESS-LISP-PARSE-LINE-MEMOIZATION*)
		      (ZEROP START-INDEX)
		      (= END-INDEX (LINE-LENGTH LINE)))
	     ;; Since the result is being remembered put it, and the property list,
	     ;; in a non-ephemeral area.  Almost all line parsings are performed when
	     ;; a file is read in and sectionized and never change thereafter.
	     (LET ((DEFAULT-CONS-AREA *LINE-AREA*))
	       (WHEN (LISTP TEM)
		 (SETQ TEM (COPYLIST TEM)))
;--- Since only one buffer can share a line with the encached file, its ok to
;--- play with the property list without copying the line.
;	       (SETQ LINE (MUNG-LINE-PROPERTIES LINE))		; copy-on-write as needed.
	       (PUTPROP (LOCF (LINE-CONTENTS-PLIST LINE)) TEM 'LISP-PARSE-LINE)))))
  TEM)

;; Parse and remember down to LINE from the start of the DEFUN containing LINE.
;; Returns the proper START-IN-STRING for parsing LINE.
(DEFUN LISP-PARSE-FROM-DEFINITION (LINE &OPTIONAL DEFINITION-BEG &AUX TEM)
  (COND ((NULL LINE) NIL)
	(*LISP-PARSE-PREPARSED-FLAG*
	  (AND (SETQ LINE (LINE-PREVIOUS LINE))  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI"); we only do this within a hard section.
0	       (LISTP (SETQ TEM (GET (LOCF (LINE-CONTENTS-PLIST LINE)) 'LISP-PARSE-LINE)))
	       (CADDDR TEM)))
	(T
	  (OR DEFINITION-BEG
	      (SETQ DEFINITION-BEG (FORWARD-DEFINITION (BEG-OF-LINE LINE) -1 T)))
	  (DO ((LINE1 (BP-LINE DEFINITION-BEG) (LINE-NEXT-IN-BUFFER LINE1))
	       (START-INDEX (BP-INDEX DEFINITION-BEG) 0)
	       (IN-STRING))
	      ((EQ LINE LINE1) IN-STRING)
	    (SETQ TEM (LISP-PARSE-LINE-MEMOIZED LINE1 IN-STRING START-INDEX))
	    (SETQ IN-STRING
		  (AND (LISTP TEM) (CADDDR TEM))))))) 

;; Describe the syntactic context of a spot identified by BP.
;; The first value is non-NIL if that spot is in a string.
;; The second is non-NIL if that spot is slashified.
;; The third is non-NIL if that spot is in a comment.
(DEFUN LISP-BP-SYNTACTIC-CONTEXT (BP &OPTIONAL (START-BP (FORWARD-DEFINITION BP -1 T)))
  (DECLARE (VALUES IN-STRING SLASHIFIED IN-COMMENT))
  (LET* ((LINE (BP-LINE BP))
	 (END-IDX (BP-INDEX BP))
	 (SYNTAX-TABLE *MODE-LIST-SYNTAX-TABLE*)
	 (SYNTAX-TABLE-LENGTH (ARRAY-LENGTH SYNTAX-TABLE)))
    (DECLARE (SYS:ARRAY-REGISTER LINE SYNTAX-TABLE))
    (DO ((I (COND ((EQ (BP-LINE BP) (BP-LINE START-BP)) (BP-INDEX START-BP)) (T 0))
	    (1+ I))
	 ;; Start of line is not slashified, and may be in a string.
	 (SLASH NIL)
	 (IN-STRING (LISP-PARSE-FROM-DEFINITION (BP-LINE BP) START-BP))
	 (CH))
	(( I END-IDX)
	 (RETURN (VALUES IN-STRING SLASH NIL)))
      ;; Now scan through the line parsing till we reach the spot.
      (SETQ CH (AREF LINE I))			; this used to be (CHAR-CODE *)
      (COND (SLASH
	     (SETQ SLASH NIL))
	    (T
	     (SELECT (CHAR-SYNTAX* CH SYNTAX-TABLE SYNTAX-TABLE-LENGTH)
	       (LIST-SLASH
		(SETQ SLASH T))
	       ;; Once we reach the start of a comment, we know the answer, so exit.
	       (LIST-COMMENT
		(OR IN-STRING (RETURN (VALUES NIL NIL T))))
	       ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
		(COND ((NOT IN-STRING)
		       (SETQ IN-STRING CH))
		      ((CHAR-EQUAL CH IN-STRING)	;used to be =, then EQL
		       (SETQ IN-STRING NIL))))))))))

;; Help parse lists backwards.
;; Given a line, and the status at the end of that line (IN-STRING and DEPTH),
;; look backward for the line following that containing the beginning of the list.
;; Return that line, and the in-string and depth for the end of that line.
(DEFUN LISP-BACKWARD-LIST-AUX (LINE IN-STRING DEPTH &OPTIONAL STOP-LINE &AUX DEFINITION-BEG)
  ;; First, make sure everything from the start of this defun is all parsed.
  ;; That way, each line's LISP-PARSE-LINE property is set up for
  ;; the correct setting of START-IN-STRING - which is a setting we
  ;; would have no simple way of computing on our backwards scan,
  ;; due to the losing interaction of comments with strings.
  (LISP-PARSE-FROM-DEFINITION (LINE-NEXT-IN-BUFFER LINE)
			 (SETQ DEFINITION-BEG (FORWARD-DEFINITION (BEG-OF-LINE LINE) -1 T)))
  (DO ((LINE LINE (LINE-PREVIOUS-IN-BUFFER LINE)) (TEM)
       ;; Paren depth of end of previous line.
       (PREVIOUS-DEPTH)
       ;; Minimum paren depth reached moving back over this line.
       (MIN-DEPTH))
      ((OR (EQ LINE STOP-LINE) (EQ LINE (BP-LINE DEFINITION-BEG))
	   (NULL (LINE-PREVIOUS-IN-BUFFER LINE)))
       (RETURN (VALUES LINE IN-STRING DEPTH)))
    ;; To move back to end of previous line, get parsing info on this line.
    (SETQ TEM (GET (LOCF (LINE-CONTENTS-PLIST LINE)) 'LISP-PARSE-LINE))
    ;; Depth changes count negatively when scanned backwards.
    (COND ((NUMBERP TEM) (SETQ PREVIOUS-DEPTH (- DEPTH TEM) MIN-DEPTH PREVIOUS-DEPTH))
	  (TEM (SETQ PREVIOUS-DEPTH (- DEPTH (CAR TEM))
		     ;; An explicit minimum depth is relative to the depth at start of line.
		     MIN-DEPTH (+ PREVIOUS-DEPTH (CADR TEM)))))
    (AND ( MIN-DEPTH 0) (RETURN (VALUES LINE IN-STRING DEPTH)))
    (SETQ DEPTH PREVIOUS-DEPTH
	  IN-STRING (AND (LISTP TEM) (CADDR TEM)))))

;; Return the index in LINE at which the comment starts, or NIL if no comment.
;; Knows how to check for strings, even strings which started on lines above this one.
(DEFUN LISP-FIND-COMMENT-START (LINE &OPTIONAL BEG-INDEX END-INDEX)
  (OR BEG-INDEX (SETQ BEG-INDEX 0))
  (OR END-INDEX (SETQ END-INDEX (LINE-LENGTH LINE)))
  (LET* ((LINE LINE)
	 (SYNTAX-TABLE *MODE-LIST-SYNTAX-TABLE*)
	 (SYNTAX-TABLE-LENGTH (ARRAY-LENGTH SYNTAX-TABLE)))
    (DECLARE (SYS:ARRAY-REGISTER LINE SYNTAX-TABLE))
    (DO ((INDEX 0 (1+ INDEX)) (CH) (SYNTAX)
	 (IN-STRING (LISP-PARSE-FROM-DEFINITION LINE)))
	(( INDEX END-INDEX) NIL)
      (SETQ CH (AREF LINE INDEX))		; was (CHAR-CODE *)
      (SETQ SYNTAX (CHAR-SYNTAX* CH SYNTAX-TABLE SYNTAX-TABLE-LENGTH))
      (COND ((= SYNTAX LIST-SLASH) (SETQ INDEX (1+ INDEX)))
	    (IN-STRING (AND (CHAR-EQUAL CH IN-STRING) (SETQ IN-STRING NIL)))	;EQL was =
	    ((CL:MEMBER SYNTAX `(#.LIST-DOUBLE-QUOTE #.LIST-VERTICAL-BAR)) (SETQ IN-STRING CH))
	    ((= SYNTAX LIST-COMMENT) (RETURN INDEX))))))

;; Find the start and end indices of the comment starter on LINE.
;; This is useful as the value of *COMMENT-START*.
;; BEGIN-ALSO is only relevant when inside a string.
(DEFUN LISP-FIND-COMMENT-START-AND-END (LINE &OPTIONAL BEGIN-ALSO)
  (LET* ((BEG-INDEX (COND ((EQ LINE (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)))
			   (BP-INDEX (INTERVAL-FIRST-BP *INTERVAL*)))
			  (T 0)))
	 (END-INDEX (COND ((EQ LINE (BP-LINE (INTERVAL-LAST-BP *INTERVAL*)))
			   (BP-INDEX (INTERVAL-LAST-BP *INTERVAL*)))
			  (T (LINE-LENGTH LINE))))
	 (INDEX (LISP-FIND-COMMENT-START LINE BEG-INDEX END-INDEX)))
    (WHEN (NULL INDEX)
      (AND BEGIN-ALSO
	   (LET ((BP (END-OF-LINE LINE)))
	     (WHEN (LISP-BP-SYNTACTIC-CONTEXT BP)	;Inside a string at end of line
	       (SETQ BP (FORWARD-UP-STRING BP -1))
	       (SETQ INDEX (STRING-SEARCH *COMMENT-BEGIN* LINE BEG-INDEX END-INDEX))))))
    (WHEN (NOT (NULL INDEX))
      (LET* ((LINE LINE)
	     (SYNTAX-TABLE *MODE-LIST-SYNTAX-TABLE*)
	     (SYNTAX-TABLE-LENGTH (ARRAY-LENGTH SYNTAX-TABLE)))
	(DECLARE (SYS:ARRAY-REGISTER LINE SYNTAX-TABLE))
	(LET ((I2 ;; Now find the end.  Skip over the semicolons and the spaces after them.
		(DO ((I1 INDEX (1+ I1)))
		    ((OR (= I1 END-INDEX)
			 ( (CHAR-SYNTAX* (AREF LINE I1) SYNTAX-TABLE SYNTAX-TABLE-LENGTH)
			    LIST-COMMENT))
		     I1))))
	  (VALUES INDEX (BP-INDEX (FORWARD-OVER *BLANKS* (CREATE-BP LINE I2)))))))))

;; Starting from the start of LINE at depth DEPTH inside a list,
;; find the line at which that list ends,
;; and return it and the in-string and depth at the start of that line.
(DEFUN LISP-FORWARD-LIST-AUX (LINE IN-STRING DEPTH &OPTIONAL STOP-LINE)
  (DO ((LINE LINE (LINE-NEXT-IN-BUFFER LINE)) (TEM)
       ;; Holds paren depth of start of next line.
       (NEXT-DEPTH)
       ;; Minimum paren depth reached during this line.
       (MIN-DEPTH))
      ((OR (EQ LINE STOP-LINE) (NULL (LINE-NEXT-IN-BUFFER LINE)))
       (RETURN (VALUES LINE IN-STRING DEPTH)))
    (SETQ TEM (LISP-PARSE-LINE-MEMOIZED LINE IN-STRING))
    (COND ((NUMBERP TEM) (SETQ NEXT-DEPTH (+ TEM DEPTH) MIN-DEPTH NEXT-DEPTH))
	  (T (SETQ NEXT-DEPTH (+ (CAR TEM) DEPTH)
		   MIN-DEPTH (+ (CADR TEM) DEPTH))))
    (AND ( MIN-DEPTH 0) (RETURN (VALUES LINE IN-STRING DEPTH)))
    (SETQ DEPTH NEXT-DEPTH
	  IN-STRING (AND (LISTP TEM) (CADDDR TEM)))))

;;; STOP-BP is place to give up, for preventing long futile searches
;;; MOVE-OVER-SINGLEQUOTES-P if T means that a backward motion should
;;; move back over any singlequote-like characters before the open-paren,
;;; and forward motion should move over them after a string, for the sake of
;;; #| ... |# comments.
;;; NO-UP-P means do not move over a ) to a higher level, note that NO-UP-P
;;; implies not FIXUP-P, since the fixup case of NO-UP-P would be the normal
;;; behaviour.
;;; If it succeeds, returns a BP
;;; If it fails, returns three values: NIL, nesting level, and state symbol
;;; Remove PASS-ITEM-BOUNDARY parameter 18 jun 87 (widzinski)
;;; PASS-ITEM-BOUNDARY permits this to go past a hard section boundary,
;;; or whetever *INTERVAL* says.
;;;+++ there needs to be a protocol for asking if a bp is at an item boundary, plus
;;;+++ or minus whitespace, to be used with PASS-ITEM-BOUNDARY to decide 
;;;+++ how far to go.

(DEFUN FORWARD-SEXP (BP &OPTIONAL (TIMES 1) FIXUP-P
		     (LEVEL 0) STOP-BP (MOVE-OVER-SINGLEQUOTES-P T) NO-UP-P)
  (LET ((CH)
	(STRCH))
    (COND ((ZEROP TIMES) (COPY-BP BP))
	  ((PLUSP TIMES)
	   (LET ((STATE 'NORMAL)		;STATE is NORMAL, STRING or ALPHABETIC.
		 (TIME 0)
		 (LAST-BP (OR STOP-BP (INTERVAL-LAST-BP *INTERVAL*))))
	     (CHARMAP-PER-LINE (BP LAST-BP (IF (OR FIXUP-P
						   (AND (EQ STATE 'ALPHABETIC)
							( LEVEL 0)
							(= (1+ TIME) TIMES)))
					       (COPY-BP LAST-BP)
					       (VALUES NIL LEVEL STATE)))	;fail
			       ;; Per-line forms
			       ;; If at start of line and inside some parens,
			       ;; skip over some lines using memoized LISP-PARSE-LINE info.
			       ;; This is an invisible speed-up for the rest of this loop.
			       ((COND ((AND (ZEROP *FIRST-INDEX*) (> LEVEL 0))
				       (MULTIPLE-VALUE (LINE STRCH LEVEL)
					 (LISP-FORWARD-LIST-AUX LINE
								(AND (EQ STATE 'STRING) STRCH)
								LEVEL *LAST-LINE*))
				       (SETQ STATE (COND (STRCH 'STRING) (T 'NORMAL)))
				       (SETQ *THIS-IS-THE-LAST-LINE*
					     (EQ LINE *LAST-LINE*)))))
	       RESTART
	       (LET ((SYNTAX (LIST-SYNTAX (SETQ CH (CHARMAP-CHAR)))))	;was CHARMAP-CH-CHAR
		 (SELECTQ STATE
		   (ALPHABETIC
		    (SELECT SYNTAX
		      (LIST-ALPHABETIC)
		      (LIST-SINGLE-QUOTE)
		      (LIST-SLASH
		       (CHARMAP-INCREMENT (IF FIXUP-P (COPY-BP LAST-BP) NIL)))
		      (LIST-COLON
		       (SETQ STATE 'NORMAL))
		      (OTHERWISE
		       (WHEN ( LEVEL 0)
			 (WHEN ( (SETQ TIME (1+ TIME)) TIMES)
			   (CHARMAP-RETURN (CHARMAP-BP-BEFORE))))
		       (SETQ STATE 'NORMAL)
		       (GO RESTART))))
		   (STRING
		    (SELECT SYNTAX
		      ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
		       (WHEN (CHAR-EQUAL CH STRCH)	;was =, then EQL
			 (WHEN ( LEVEL 0)
			   (WHEN ( (SETQ TIME (1+ TIME)) TIMES)
			     (LET ((BP (CHARMAP-BP-AFTER)))
			       (WHEN MOVE-OVER-SINGLEQUOTES-P
				 (LOOP DOING
				   (WHEN (NULL BP)
				     (WHEN FIXUP-P (SETQ BP (COPY-BP LAST-BP)))
				     (RETURN))
				   (WHEN (OR (BP-= BP LAST-BP)	;was BP-CH-CHAR
					     ( (LIST-SYNTAX (BP-CHAR BP)) LIST-SINGLE-QUOTE))
				     (RETURN))
				   (IBP BP)))
			       (CHARMAP-RETURN BP))))
			 (SETQ STATE 'NORMAL)))
		      (LIST-SLASH
		       (CHARMAP-INCREMENT (IF FIXUP-P (COPY-BP LAST-BP) NIL)))))
		   (NORMAL
		    (SELECT SYNTAX
		      (LIST-ALPHABETIC
		       (SETQ STATE 'ALPHABETIC))
		      (LIST-DELIMITER)
		      (LIST-SLASH
		       (CHARMAP-INCREMENT (IF FIXUP-P (COPY-BP LAST-BP) NIL))
		       (SETQ STATE 'ALPHABETIC))
		      (LIST-COMMENT
		       (SETQ INDEX *LAST-INDEX*))
		      ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
		       (SETQ STATE 'STRING STRCH CH))
		      (LIST-SINGLE-QUOTE)
		      (LIST-CLOSE
		       (SETQ LEVEL (1- LEVEL))
		       (COND ((AND NO-UP-P (< LEVEL 0))
			      (CHARMAP-RETURN (VALUES NIL LEVEL STATE)))
			     (( LEVEL 0)
			      (WHEN ( (SETQ TIME (1+ TIME)) TIMES)
				(CHARMAP-RETURN (CHARMAP-BP-AFTER)))))
		       (SETQ STATE 'NORMAL))
		      (LIST-OPEN
		       (SETQ LEVEL (1+ LEVEL)))
		      (LIST-COLON))))))))
	  (T
	   (LET ((STATE 'NORMAL)
		 (TIME 0)
		 NEW-LINE-FLAG OINDEX
		 (FIRST-BP (OR STOP-BP (INTERVAL-FIRST-BP *INTERVAL*))))
	     (RCHARMAP-PER-LINE (BP FIRST-BP
				    (IF (OR FIXUP-P
					    (AND (OR (AND (EQ STATE 'ALPHABETIC) ( LEVEL 0))
						     (AND (EQ STATE
							      'SKIP-LEADING-SINGLE-QUOTES)
							  ( LEVEL 1)))
						 (= (1- TIME) TIMES)))
					(COPY-BP FIRST-BP)
					(VALUES NIL LEVEL STATE)))
				;; Per-line forms.  Work like those for forward case.
				((WHEN (AND (NOT *FIRST-LINE-P*) (> LEVEL 0))
				   (MULTIPLE-VALUE (LINE STRCH LEVEL)
				     (LISP-BACKWARD-LIST-AUX LINE
							     (AND (EQ STATE 'STRING) STRCH)
							     LEVEL *LAST-LINE*))
				   (SETQ STATE (COND (STRCH 'STRING) (T 'NORMAL)))
				   (SETQ *THIS-IS-THE-LAST-LINE* (EQ LINE *LAST-LINE*)))
				 (SETQ NEW-LINE-FLAG T))
	       ;; When we arrive on a line, skip back to start of any comment on that line.
	       RESTART
	       (SETQ OINDEX INDEX)
	       (AND (PROG1 NEW-LINE-FLAG (SETQ NEW-LINE-FLAG NIL))
		    (NOT *FIRST-LINE-P*)
		    (SETQ INDEX (OR (LISP-FIND-COMMENT-START LINE *LAST-INDEX*) INDEX)))
	       (COND ((AND (= (LIST-SYNTAX (RCHARMAP-CHAR-BEFORE)) LIST-SLASH)
			   (DO ((SL NIL (NOT SL))	;was RCHARMAP-CH-CHAR-BEFORE
				(BP (FORWARD-CHAR (RCHARMAP-BP-BEFORE) -1)
				    (FORWARD-CHAR BP -1)))
			       ((OR (NULL BP)
				    ( (LIST-SYNTAX (BP-CHAR BP)) LIST-SLASH))	;was BP-CH-CHAR
				SL)))
		      ;; Odd number of preceding slashes means non-special character
		      (RCHARMAP-DECREMENT NIL)
		      (AND (EQ STATE 'NORMAL)
			   (SETQ STATE 'ALPHABETIC)))
		     (T				;was RCHARMAP-CH-CHAR
		      (LET ((SYNTAX (LIST-SYNTAX (SETQ CH (RCHARMAP-CHAR)))))
			(SELECTQ STATE
			  (ALPHABETIC
			   (UNLESS (OR (= SYNTAX LIST-ALPHABETIC)
				       (= SYNTAX LIST-COLON)
				       (AND (= SYNTAX LIST-SINGLE-QUOTE)
					    MOVE-OVER-SINGLEQUOTES-P)) 
			     (WHEN ( LEVEL 0)
			       (WHEN ( (SETQ TIME (1- TIME)) TIMES)
				 (SETQ INDEX OINDEX)
				 (RCHARMAP-RETURN (RCHARMAP-BP-AFTER))))
			     (SETQ STATE 'NORMAL)
			     (GO RESTART)))
			  (STRING
			   (SELECT SYNTAX
			     ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
			      (WHEN (CHAR-EQUAL CH STRCH)	;was =, then EQL
				(WHEN ( LEVEL 0)
				  (WHEN ( (SETQ TIME (1- TIME)) TIMES)
				    (RCHARMAP-RETURN
				      (IF MOVE-OVER-SINGLEQUOTES-P
					  (BACKWARD-LEADING-SINGLE-QUOTES (RCHARMAP-BP-BEFORE)
									  FIRST-BP)
					  (RCHARMAP-BP-BEFORE)))))
				(SETQ STATE 'NORMAL)))))
			  (NORMAL
			   (SELECT SYNTAX
			     (LIST-ALPHABETIC
			      (SETQ STATE 'ALPHABETIC))
			     ((LIST-SLASH LIST-COLON)
			      ;; Crock.
			      (SETQ STATE 'ALPHABETIC))
			     ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
			      (SETQ STATE 'STRING STRCH CH))
			     (LIST-CLOSE
			      (SETQ LEVEL (1+ LEVEL)))
			     (LIST-OPEN
			      (SETQ LEVEL (1- LEVEL))
			      (COND ((AND NO-UP-P (< LEVEL 0) (NOT FIXUP-P))
				     (RCHARMAP-RETURN (VALUES NIL LEVEL STATE)))
				    (( LEVEL 0)
				     (WHEN ( (SETQ TIME (1- TIME)) TIMES)
				       (RCHARMAP-RETURN
					 (IF MOVE-OVER-SINGLEQUOTES-P
					     (BACKWARD-LEADING-SINGLE-QUOTES
					       (RCHARMAP-BP-BEFORE) FIRST-BP)
					     (RCHARMAP-BP-BEFORE)))))))
			     ;;(LIST-COLON)
			     ))))))))))))

;; After moving back past a sexp, move back past any singlequote-syntax chars
;; preceding the sexp.  We accept a BP to the beginning of the sexp,
;; and return a bp to the first singlequote of those that precede it.
;; We also accept a BP not to move back past.
;; We check for slashification of the singlequotes.
(DEFUN BACKWARD-LEADING-SINGLE-QUOTES (BP FIRST-BP)
  (CREATE-BP (BP-LINE BP)
	     (DO ((INDEX (BP-INDEX BP) (1- INDEX))
		  (STOP-INDEX (COND ((EQ (BP-LINE BP) (BP-LINE FIRST-BP)) (BP-INDEX FIRST-BP))
				    (T 0)))
		  (LINE (BP-LINE BP))
		  (SYNTAX) (SLASH-PARITY-ODD))
		 ((= INDEX STOP-INDEX) STOP-INDEX)
	       (SETQ SYNTAX (LIST-SYNTAX (AREF LINE (1- INDEX))))
	       (COND ((= SYNTAX LIST-SINGLE-QUOTE))
		     ;; We have found all the singlequotes.
		     ;; INDEX is the index of the first singlequote.
		     ((= SYNTAX LIST-SLASH)
		      ;; Don't worry about slashes if there weren't any singlequotes.
		      (AND (= INDEX (BP-INDEX BP))
			   (RETURN INDEX))
		      ;; Count the parity of slashes here.
		      (DO ((INDEX1 INDEX (1- INDEX1)))
			  ((= INDEX1 STOP-INDEX))
			(COND ((= (LIST-SYNTAX (AREF LINE (1- INDEX1))) LIST-SLASH)
			       (SETQ SLASH-PARITY-ODD (NOT SLASH-PARITY-ODD)))
			      (T (RETURN NIL))))
		      ;; If odd # of slashes, the first singlequote doesn't count as one.
		      (RETURN (COND (SLASH-PARITY-ODD (+ 1 INDEX))
				    ;; If even # of slashes, the first singlequote counts.
				    (T INDEX))))
		     (T (RETURN INDEX))))))

(DEFUN FORWARD-UP-LIST-OR-STRING (BP &OPTIONAL (TIMES 1) FIXUP-P (SINGLE-QUOTES-P T))
  (IF (LISP-BP-SYNTACTIC-CONTEXT BP)
      (FORWARD-UP-STRING BP (MINUSP TIMES))
      (FORWARD-SEXP BP TIMES FIXUP-P 1 NIL SINGLE-QUOTES-P)))

(DEFUN FORWARD-UP-STRING (BP ARG)
  (DO ((BP BP (SEARCH-SET BP '(#/" #/|) ARG)))
      ((OR (NULL BP)
	   (NOT (LISP-BP-SYNTACTIC-CONTEXT BP)))
       BP)))

;;; For things with a standard interface, like KILL-COMMAND-INTERNAL
(DEFUN FORWARD-SEXP-NO-UP (BP &OPTIONAL (TIMES 1) FIXUP-P)
  (FORWARD-SEXP BP TIMES FIXUP-P 0 NIL T T))

;;; For checking parentheses while writing out a buffer.
(DEFUN STREAM-COPY-UNTIL-EOF-CHECKING-PARENTHESES (INSTREAM OUTSTREAM)
  (WHEN (SEND-IF-HANDLES OUTSTREAM :CAN-ACCEPT-DIAGRAMS-AS-LINES)
    (SEND INSTREAM :SET-RETURN-DIAGRAMS-AS-LINES T))
  (LOOP WITH (LINE EOF IN-STRING WARNED)
	WITH INDENTATION = 0
	DO (MULTIPLE-VALUE (LINE EOF)
	     (SEND INSTREAM ':LINE-IN))
	   (WHEN (STRINGP LINE)
	     (LET ((VALUE (IF (ARRAY-HAS-LEADER-P LINE)
			      (LISP-PARSE-LINE-MEMOIZED LINE IN-STRING)
			      (LISP-PARSE-LINE LINE IN-STRING 0 (ARRAY-ACTIVE-LENGTH LINE)))))
	       (COND ((ATOM VALUE) (INCF INDENTATION VALUE))
		     (T (COND ((AND (MINUSP (+ INDENTATION (CADR VALUE)))
				    (NOT WARNED))
			       (WARN-ABOUT-UNBALANCED-PARENTHESES INSTREAM)
			       (SETQ WARNED T)))
			(INCF INDENTATION (CAR VALUE))
			(SETQ IN-STRING (CADDDR VALUE))))))
	WHEN (AND (MINUSP INDENTATION)
		  (NOT WARNED))
	  DO (WARN-ABOUT-UNBALANCED-PARENTHESES INSTREAM)
	     (SETQ WARNED T)
	UNTIL EOF
	DO (SEND OUTSTREAM ':LINE-OUT LINE)
	FINALLY (SEND OUTSTREAM ':STRING-OUT LINE)
		(COND ((NOT WARNED)
		       (COND ((NOT (ZEROP INDENTATION))
			      (WARN-ABOUT-UNBALANCED-PARENTHESES INSTREAM))
			     ((NOT (NULL IN-STRING))
			      (WARN-ABOUT-ENDING-IN-STRING INSTREAM)))))))

;;--- Maybe someday these can do something smarter?
(DEFUN WARN-ABOUT-UNBALANCED-PARENTHESES (STREAM)
  (OR (FQUERY FORMAT:YES-OR-NO-P-OPTIONS
	      "~A appears to have unbalanced parentheses.  Proceed anyway? "
	      (SEND STREAM ':PATHNAME))
      (THROW 'SAVE-BUFFER NIL)))

(DEFUN WARN-ABOUT-ENDING-IN-STRING (STREAM)
  (OR (FQUERY FORMAT:YES-OR-NO-P-OPTIONS
	      "~A appears to end in the middle of a string.  Proceed anyway? "
	      (SEND STREAM ':PATHNAME))
      (THROW 'SAVE-BUFFER NIL)))
