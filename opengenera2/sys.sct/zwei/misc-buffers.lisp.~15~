;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Miscellanous special purpose buffers.

;Buffer used to hold source-compare of two files
(DEFINE-SPECIAL-BUFFER-TYPE SOURCE-COMPARE-BUFFER (NAMES)
			    (SPECIAL-PURPOSE-BUFFER)
			    :SOURCE-COMPARE "Source-Compare"
	:SETTABLE-INSTANCE-VARIABLES
	(:BUFFER-INIT-OPTIONS :SET-NAMES))

;Source-compare buffers are reusable when they are for the same two files
(DEFMETHOD (:REUSABLE SOURCE-COMPARE-BUFFER) (SETS)
  (LET ((NEW-NAMES (GET (LOCF SETS) ':SET-NAMES)))
    (OR (AND (EQUAL (FIRST NEW-NAMES) (FIRST NAMES))
	     (EQUAL (SECOND NEW-NAMES) (SECOND NAMES)))
	(AND (EQUAL (FIRST NEW-NAMES) (SECOND NAMES))
	     (EQUAL (SECOND NEW-NAMES) (FIRST NAMES))))))

;Contents comes from typeout; delete previous contents when told to revert
(DEFMETHOD (:REVERT SOURCE-COMPARE-BUFFER) ()
  (DELETE-INTERVAL SELF))

;;; SRCCOM'ing
(COMPILER:FUNCTION-DEFINED 'SRCCOM:SOURCE-COMPARE-FILES)     ; Forward references: Utilities
(COMPILER:FUNCTION-DEFINED 'SRCCOM:FILE-NAME)
(COMPILER:FUNCTION-DEFINED 'SRCCOM:FILE-STREAM)
(DEFCOM COM-SOURCE-COMPARE "Compares two files or buffers, prompting for type and name.
The result of the comparison appears on the screen.
A numeric argument is decoded to modify source-compare behavior:
  an argument of 2 causes case and style to be ignored
                 4 causes leading whitespace to be ignored
                 6 cause both case, style, and whitespace to be ignored" ()
  (LET ((FILE-1 NIL) (BUFFER-1 NIL)
	(FILE-2 NIL) (BUFFER-2 NIL)
	NAME TYPE DEFAULT)
    (UNWIND-PROTECT
      (PROGN
	(MULTIPLE-VALUE (FILE-1 NAME TYPE DEFAULT BUFFER-1)
	  (GET-BUFFER-OR-FILE-FILE "Compare"))
	(MULTIPLE-VALUE (FILE-2 NIL NIL NIL BUFFER-2)
	  (GET-BUFFER-OR-FILE-FILE (LIST "Compare ~A ~A with" TYPE NAME) DEFAULT))
	(WITH-INTERVAL-READ-LOCKED (BUFFER-1)
	  (WITH-INTERVAL-READ-LOCKED (BUFFER-2)
	    (SRCCOM:SOURCE-COMPARE-FILES
	      FILE-1 FILE-2
	      (MAKE-TYPEOUT-BUFFER-STREAM ':SOURCE-COMPARE
					  ':SET-NAMES (LIST (SRCCOM:FILE-NAME FILE-1)
							    (SRCCOM:FILE-NAME FILE-2)))
	      T
	      :IGNORE-CASE-AND-STYLE (BIT-TEST #o2 *NUMERIC-ARG*)
	      :IGNORE-WHITESPACE (BIT-TEST #o4 *NUMERIC-ARG*)))))
      (AND FILE-1 (SEND (SRCCOM:FILE-STREAM FILE-1) ':CLOSE))
      (AND FILE-2 (SEND (SRCCOM:FILE-STREAM FILE-2) ':CLOSE))))
  DIS-NONE)

(COMPILER:FUNCTION-DEFINED 'SRCCOM:CREATE-FILE)	; Forward references: Utilities
(COMPILER:FUNCTION-DEFINED 'SRCCOM:MAKE-SRCCOM-FILE)
(DEFUN GET-BUFFER-OR-FILE-FILE (PROMPT &OPTIONAL DEFAULT)
  (DECLARE (VALUES FILE NAME TYPE DEFAULT BUFFER))
  (LET ((PROMPT-STRING (IF (ATOM PROMPT) PROMPT (FIRST PROMPT)))
	(PROMPT-ARGS (AND (LISTP PROMPT) (REST1 PROMPT)))
	(MODE))
    (FLET ((GET-DEFINITION (BUFFER &OPTIONAL MENTION-BUFFER-NAME)
	     (ZWEI:DEFINITION-REGION-BPS (BP1 BP2 DEFINITION)
	       (LET ((NAME (FORMAT NIL "of ~A~:[~*~; in ~A~]"
				   DEFINITION MENTION-BUFFER-NAME (NAMED-BUFFER-NAME BUFFER))))
		 (VALUES 
		   (SRCCOM:MAKE-SRCCOM-FILE
		     :FILE-NAME NAME
		     :FILE-TYPE "Definition"
		     :FILE-STREAM (OPEN-INTERVAL-STREAM BP1 BP2)
		     :FILE-MAJOR-MODE (SEND (SEND BUFFER :GET :MAJOR-MODE) :MAJOR-MODE-KEYWORD)
		     :FILE-BP-TABLE (MAKE-ARRAY 100. :FILL-POINTER 0))
		   NAME
		   "Definition"))))
	   (GET-REGION (BUFFER)
	     (LET ((NAME (FORMAT NIL "in ~A" (NAMED-BUFFER-NAME BUFFER))))
	       (MULTIPLE-VALUE-PROG1
		 (ZWEI:REGION (BP1 BP2)
		   (VALUES
		     (SRCCOM:MAKE-SRCCOM-FILE
		       :FILE-NAME NAME
		       :FILE-TYPE "Region"
		       :FILE-STREAM (OPEN-INTERVAL-STREAM BP1 BP2)
		       :FILE-MAJOR-MODE (SEND (SEND BUFFER :GET :MAJOR-MODE)
					      :MAJOR-MODE-KEYWORD)
		       :FILE-BP-TABLE (MAKE-ARRAY 100. :FILL-POINTER 0))
		     NAME
		     "Region"))
		 (SETF (WINDOW-MARK-P *WINDOW*) NIL)))))
      (CL:ECASE (SETQ MODE 
		      (FQUERY-WITH-MINI-BUFFER-HISTORY
			'(:CHOICES (((:BUFFER     "Buffer")        #/B)
				    ((:DEFINITION "Definition")    #/D)
				    ((:FILE       "File")          #/F)
				    ((:CONTROL-Y  "Last Kill")     #/K #/c-Y)
				    ((:META-Y     "Previous Kill") #/P #/m-Y)
				    ((:REGION     "Region")        #/R)))
			"~? quantity "
			PROMPT-STRING PROMPT-ARGS))
	(:DEFINITION
	  (GET-DEFINITION *INTERVAL*))
	((:CONTROL-Y :META-Y)
	 (LET ((NAME (IF (EQ MODE :CONTROL-Y) "for c-Y" "for m-Y")))
	   (VALUES
	     (SRCCOM:MAKE-SRCCOM-FILE
	       :FILE-NAME NAME
	       :FILE-TYPE "Kill Ring Entry"
	       :FILE-STREAM (OPEN-INTERVAL-STREAM
			      (SEND *KILL-HISTORY* :ELEMENT (IF (EQ MODE :CONTROL-Y) 0 1)))
	       ;; Strictly, there is no major mode for a kill ring element, but let's
	       ;; make the best guess we can by using the guy's current mode.
	       :FILE-MAJOR-MODE (SEND (SEND *INTERVAL* ':GET ':MAJOR-MODE)
				      ':MAJOR-MODE-KEYWORD))
	     NAME
	     "Kill Ring Entry")))
	(:FILE
	  (LET ((PATHNAME (ACCEPT-DEFAULTED-PATHNAME
			    (LIST "~? ~A" PROMPT-STRING PROMPT-ARGS "File")
			    (OR DEFAULT (PATHNAME-DEFAULTS))
			    ;; Don't force version to Newest, e.g., user might be in Dired
			    ;; getting the default from line point is on, might not be newest.
			    :SPECIAL-VERSION NIL :MERGE-IN-SPECIAL-VERSION NIL)))
	    (BARF-ON-ERRORS (FS:FILE-LOOKUP-ERROR)
			    (VALUES (SRCCOM:CREATE-FILE PATHNAME) PATHNAME "File" PATHNAME))))
	(:BUFFER
	  (LET* ((BUFFER (READ-BUFFER-NAME (LIST "~? ~A" PROMPT-STRING PROMPT-ARGS "Buffer")
					   *INTERVAL*))
		 (NAME (NAMED-BUFFER-NAME BUFFER)))
	    (VALUES (SRCCOM:MAKE-SRCCOM-FILE
		      :FILE-NAME NAME
		      :FILE-TYPE "Buffer"
		      :FILE-STREAM (OPEN-INTERVAL-STREAM BUFFER NIL NIL)
		      :FILE-MAJOR-MODE (SEND (SEND BUFFER ':GET ':MAJOR-MODE)
					     ':MAJOR-MODE-KEYWORD)
		      :FILE-BP-TABLE (MAKE-ARRAY 100. :FILL-POINTER 0)
		      :PRESENTATION-TYPE 'ZWEI:BUFFER
		      :PRESENTATION-OBJECT BUFFER)
		    NAME
		    "Buffer"
		    (SEND BUFFER ':SEND-IF-HANDLES ':PATHNAME)
		    BUFFER)))
	(:REGION
	  (IF (WINDOW-MARK-P *WINDOW*)
	      (GET-REGION *INTERVAL*)
	      (LET* ((BUFFER (READ-BUFFER-NAME (LIST "~? ~A" PROMPT-STRING PROMPT-ARGS
						     "Region in buffer")
					       *INTERVAL*)))
		(UNWIND-PROTECT
		    (ZWEI:WITH-BUFFER-CURRENT BUFFER
		      (SETF (WINDOW-MARK-P *WINDOW*) NIL)
		      (CONTROL-R :IF-ERROR :RETRY
				 :IF-ABORT :THROW
				 :MODE-LINE-LIST
				 `("[Select Region or Definition in "
				   ZWEI:*ZMACS-BUFFER-NAME*
				   "   (End finishes, Abort aborts)]")
				 :COMTAB *STANDARD-COMTAB*)
		      (IF (WINDOW-MARK-P *WINDOW*)
			  (GET-REGION BUFFER)
			  (GET-DEFINITION BUFFER T)))
		  (SETF (WINDOW-MARK-P *WINDOW*) NIL)))))))))

(COMPILER:FUNCTION-DEFINED 'SRCCOM:FILE-STREAM)	; Forward references: Utilities
(COMPILER:FUNCTION-DEFINED 'SRCCOM:SOURCE-COMPARE-AUTOMATIC-MERGE-RECORDING)
(DEFCOM COM-SOURCE-COMPARE-MERGE
	"Compare two files or buffers and merge the differences into the specified buffer.
Numeric argument is decoded bit-wise to modify source-compare behavior:
  bit 1 (2) causes case and style to be ignored
  bit 2 (4) causes leading whitespace to be ignored" ()
  (LET (FILE-1 FILE-2 NAME-1 NAME-2 TYPE-1 BUFFER-1 BUFFER-2 DEFAULT OUTPUT-BUFFER)
    (UNWIND-PROTECT
	(PROGN
	  (MULTIPLE-VALUE (FILE-1 NAME-1 TYPE-1 DEFAULT BUFFER-1)
	    (GET-BUFFER-OR-FILE-FILE "Merge"))
	  (MULTIPLE-VALUE (FILE-2 NAME-2 NIL NIL BUFFER-2)
	    (GET-BUFFER-OR-FILE-FILE (LIST "Merge ~A ~A with" TYPE-1 NAME-1) DEFAULT))
	  (SETQ OUTPUT-BUFFER (READ-BUFFER-NAME "Put merged version into buffer"
						(OR BUFFER-1 BUFFER-2) T))
	  (MAKE-BUFFER-CURRENT OUTPUT-BUFFER)
	  (WITH-INTERVAL-READ-LOCKED (BUFFER-1)
	    (WITH-INTERVAL-READ-LOCKED (BUFFER-2)
	      ;; Fortunately a single process can hold both a read and a write lock
	      ;; on the same buffer...
	      (WITH-INTERVAL-WRITE-LOCKED (OUTPUT-BUFFER)
		(LET ((INTERVAL (CREATE-INTERVAL))
		      MARKS)
		  (SETQ MARKS (SRCCOM:SOURCE-COMPARE-AUTOMATIC-MERGE-RECORDING
				FILE-1 FILE-2 (OPEN-INTERVAL-STREAM INTERVAL)
				:IGNORE-CASE-AND-STYLE (BIT-TEST #o2 *NUMERIC-ARG*)
				:IGNORE-WHITESPACE (BIT-TEST #o4 *NUMERIC-ARG*)))
		  (REPLACE-INTERVALS OUTPUT-BUFFER INTERVAL)
		  (SOURCE-COMPARE-MERGE-QUERY MARKS)
		  (TYPEIN-LINE "Done.  Resectionizing the buffer.")
		  (REPARSE-ATTRIBUTE-LIST-INTERNAL OUTPUT-BUFFER
						   (OPEN-INTERVAL-STREAM OUTPUT-BUFFER NIL T))
		  (SECTIONIZE-BUFFER OUTPUT-BUFFER))
		;; If one input is a file, and the other is the output buffer, and
		;; the file is the one in the buffer, then update the buffer's file-info
		;; as if it had been read in from the file.
		(IF BUFFER-1 (PSETQ BUFFER-1 BUFFER-2 BUFFER-2 BUFFER-1
				    NAME-1 NAME-2 NAME-2 NAME-1
				    FILE-1 FILE-2 FILE-2 FILE-1))
		(AND (NULL BUFFER-1) (EQ BUFFER-2 OUTPUT-BUFFER)
		     (EQ NAME-1 (SEND BUFFER-2 ':PATHNAME))
		     (SEND BUFFER-2 ':SET-FILE-INFO
			   (SEND (SRCCOM:FILE-STREAM FILE-1) ':INFO)))))))
      (AND FILE-1 (SEND (SRCCOM:FILE-STREAM FILE-1) ':CLOSE))
      (AND FILE-2 (SEND (SRCCOM:FILE-STREAM FILE-2) ':CLOSE))))
  DIS-NONE)

;;; Destructive insertion
;;--- This can't work on version-control buffers, can it?
(DEFUN REPLACE-INTERVALS (OLD-INTERVAL NEW-INTERVAL)
  (DELETE-INTERVAL OLD-INTERVAL)
  (LET ((FIRST-BP (INTERVAL-FIRST-BP NEW-INTERVAL))
	(LAST-BP (INTERVAL-LAST-BP NEW-INTERVAL)))
    (DOLIST (BP (LINE-BP-LIST (BP-LINE (INTERVAL-FIRST-BP OLD-INTERVAL))))
      (MOVE-BP BP (IF (EQ (BP-STATUS BP) ':MOVES) LAST-BP FIRST-BP)))
    (MOVE-BP (INTERVAL-FIRST-BP OLD-INTERVAL) FIRST-BP)
    (MOVE-BP (INTERVAL-LAST-BP OLD-INTERVAL) LAST-BP)
    (LET ((INFS (NODE-INFERIORS NEW-INTERVAL)))
      (SETF (NODE-INFERIORS OLD-INTERVAL) INFS)
      (DOLIST (INF INFS)
	(SETF (NODE-SUPERIOR INF) OLD-INTERVAL)))
    (DO ((LINE (BP-LINE FIRST-BP) (LINE-NEXT LINE))
	 (END-LINE (BP-LINE LAST-BP)))
	(NIL)
      (AND (EQ (LINE-NODE LINE) NEW-INTERVAL)
	   (SETF (LINE-NODE LINE) OLD-INTERVAL))
      (AND (EQ LINE END-LINE) (RETURN NIL)))))


;;; Source compare operations on definitions.

(DEFCOM COM-SOURCE-COMPARE-INSTALLED-DEFINITION
"Compares the current definition with the source for the installed version."
	()
  (SOURCE-COMPARE-INSTALLED-DEFINITION 'SOURCE-COMPARE-SECTION-NODES)
  DIS-NONE)

(DEFCOM COM-SOURCE-COMPARE-MERGE-INSTALLED-DEFINITION
"Compares the current definition with the source for the installed version, merging results.
It merges the result of the source compare into the current definition."
	()
  (SOURCE-COMPARE-INSTALLED-DEFINITION 'SOURCE-COMPARE-MERGE-SECTION-NODES)
  DIS-NONE)

(DEFCOM COM-SOURCE-COMPARE-SAVED-DEFINITION
"Compares the current definition with the source for the newest version on disk."
	()
  (SOURCE-COMPARE-SAVED-DEFINITION 'SOURCE-COMPARE-SECTION-NODES)
  DIS-NONE)

(DEFCOM COM-SOURCE-COMPARE-MERGE-SAVED-DEFINITION
"Compares and merges the current definition with the source for the newest version on disk.
It merges the result of the source compare into the current definition."
	()
  (SOURCE-COMPARE-SAVED-DEFINITION 'SOURCE-COMPARE-MERGE-SECTION-NODES)
  DIS-NONE)

(DEFCOM COM-SOURCE-COMPARE-NEWEST-DEFINITION
"Compares the current definition with the newest version in the normal source file
for this definition, regardless of patch files."
	()
  (SOURCE-COMPARE-NEWEST-DEFINITION 'SOURCE-COMPARE-SECTION-NODES)
  DIS-NONE)

(DEFCOM COM-SOURCE-COMPARE-MERGE-NEWEST-DEFINITION
"Compares and merges the current definition with the newest version in the normal source file
for this definition, regardless of patch files.
It merges the result of the source compare into the current definition."
	()
  (SOURCE-COMPARE-NEWEST-DEFINITION 'SOURCE-COMPARE-MERGE-SECTION-NODES)
  DIS-NONE)

(DEFUN SOURCE-COMPARE-INSTALLED-DEFINITION (COMPARE-SECTION-NODES-FUNCTION)
  (MULTIPLE-VALUE-BIND (FSPEC TYPE NODE)
      (SEND (SEND *INTERVAL* :MAJOR-MODE) :DEFINITION-AROUND-BP (POINT))
    (LET* ((INSTALLED-BUFFER (SOURCE-COMPARE-GET-INSTALLED-BUFFER FSPEC TYPE))
	   (INSTALLED-NODE (GET-SECTION-NODE-IN-BUFFER FSPEC TYPE INSTALLED-BUFFER)))
      (WITH-NODE-READ-LOCKED (NODE)
	(WITH-NODE-READ-LOCKED (INSTALLED-NODE)
	  (COND ((EQ INSTALLED-NODE NODE)
		 (TYPEOUT-LINE "You seem to be pointing at the installed definition for ~A.~%"
			       FSPEC)
		 (WHEN (AND (SEND *INTERVAL* ':SEND-IF-HANDLES ':PATHNAME)
			    (LET ((NODE-TICK (NODE-TICK *INTERVAL*)))
			      (AND (NUMBERP NODE-TICK)	;Can be :READ-ONLY
				   (> NODE-TICK (SEND *INTERVAL* ':SAVE-TICK)))))
		   (TYPEOUT-LINE "The definition has been modified since the last time ~
				you wrote the file though.~%")
		   (WHEN (LET ((QUERY-IO STANDARD-OUTPUT))
			   (FQUERY '(:FRESH-LINE NIL)
			       "Would you like to compare the current version with ~
                                   the saved version? "))
		     (TYPEOUT-LINE "~%")
		     (SOURCE-COMPARE-SECTION-NODE-WITH-SAVED INSTALLED-NODE
							     COMPARE-SECTION-NODES-FUNCTION))))
		(T
		 (FUNCALL COMPARE-SECTION-NODES-FUNCTION
			  (COERCE-TO-SECTION-NODE NODE FSPEC TYPE)
			  INSTALLED-NODE)))))
      (TYPEIN-LINE "Done."))))

;;--- Needs work!!  (SEND MAYBE-INSTALLED-NODE :SUPERIOR) = NIL for VC nodes
(DEFUN SOURCE-COMPARE-GET-INSTALLED-BUFFER (FSPEC TYPE)
  (LET (INSTALLED-PATHNAME INSTALLED-TRUENAME MAYBE-INSTALLED-NODE)
    (LOOP WITH NEWEST-COMPILE-TICK = -1
	  FOR (NODE-TYPE NODE) IN (SI:FUNCTION-SPEC-GET FSPEC 'ZMACS-BUFFERS)
	  FOR NODE-COMPILE-TICK = (SEND NODE :COMPILE-TICK)
	  DO (IF (AND (EQ NODE-TYPE TYPE)
		      (>  NODE-COMPILE-TICK NEWEST-COMPILE-TICK))
		 (SETQ NEWEST-COMPILE-TICK NODE-COMPILE-TICK
		       MAYBE-INSTALLED-NODE NODE)))
    (COND ((AND MAYBE-INSTALLED-NODE
		(> (SEND MAYBE-INSTALLED-NODE :COMPILE-TICK)
		   (OR (SEND (SEND MAYBE-INSTALLED-NODE :SUPERIOR)
			     :SEND-IF-HANDLES :READ-TICK)
		       -1)))
	   ;; Found a definition which has clearly been compiled since the file
	   ;; was loaded. Take that as being the installed definition. Keep in
	   ;; mind that you can't be sure about any of this since you can't tell
	   ;; if the original file was reloaded after the definition was done
	   ;; the buffer.
	   (SEND MAYBE-INSTALLED-NODE :SUPERIOR))
	  ((NOT (AND (SETQ INSTALLED-PATHNAME (SI:GET-INSTALLED-SOURCE-FILE-NAME FSPEC TYPE))
		     (SETQ INSTALLED-TRUENAME (FILE-LOADED-TRUENAME INSTALLED-PATHNAME))))
	   ;; There is no record of where the definition came from. This means that
	   ;; even if we could find a definition, we couldn't decide if it was the
	   ;; installed one, lose.
	   (BARF "Can't find the Installed Definition for ~A." FSPEC))
	  (T
	   (LET ((*REVERT-FILE-NOT-FOUND-IS-AN-ERROR* T)
		 (MAYBE-INSTALLED-BUFFER (FIND-BUFFER-NAMED (FS:MERGE-PATHNAMES
							      INSTALLED-PATHNAME
							      INSTALLED-TRUENAME))))
	     (IF (AND MAYBE-INSTALLED-BUFFER
		      (NOT (ATOM (SEND MAYBE-INSTALLED-BUFFER :SEND-IF-HANDLES :FILE-INFO)))
		      (EQ (CAR (SEND MAYBE-INSTALLED-BUFFER :FILE-INFO)) INSTALLED-TRUENAME))
		 MAYBE-INSTALLED-BUFFER
		 (MULTIPLE-VALUE-BIND (NIL BUFFER)
		     (FIND-FILE INSTALLED-TRUENAME NIL)
		   BUFFER)))))))

(DEFUN SOURCE-COMPARE-SAVED-DEFINITION (COMPARE-SECTION-NODES-FUNCTION)
  (MULTIPLE-VALUE-BIND (FSPEC TYPE NODE)
      (SEND (SEND *INTERVAL* :MAJOR-MODE) :DEFINITION-AROUND-BP (POINT))
    (SOURCE-COMPARE-SECTION-NODE-WITH-SAVED (COERCE-TO-SECTION-NODE NODE FSPEC TYPE)
					    COMPARE-SECTION-NODES-FUNCTION)
    (TYPEIN-LINE "Done.")))

(DEFUN SOURCE-COMPARE-SECTION-NODE-WITH-SAVED (CURRENT-NODE COMPARE-SECTION-NODES-FUNCTION)
  (LET* ((FSPEC (SECTION-NODE-FUNCTION-SPEC CURRENT-NODE))
	 (TYPE (SECTION-NODE-DEFINITION-TYPE CURRENT-NODE))
	 (SAVED-TRUENAME (SEND (SEND (INTERVAL-BUFFER CURRENT-NODE) ':PATHNAME) ':TRUENAME))
	 (SAVED-SECTION-NODE (GET-SECTION-NODE-IN-FILE FSPEC TYPE SAVED-TRUENAME NIL T NIL)))
    (COND ((NULL SAVED-SECTION-NODE)
	   (TYPEOUT-LINE "~A does not seem to be defined in the most recently saved version~%~
			  of this file ~A, you may have added it since saving the file."
			 FSPEC (SEND SAVED-TRUENAME ':STRING-FOR-EDITOR)))
	  (T
	   (WITH-NODE-READ-LOCKED (CURRENT-NODE)
	     (WITH-NODE-READ-LOCKED (SAVED-SECTION-NODE)
	       (FUNCALL COMPARE-SECTION-NODES-FUNCTION CURRENT-NODE SAVED-SECTION-NODE)))))))

(DEFUN SOURCE-COMPARE-NEWEST-DEFINITION (COMPARE-SECTION-NODES-FUNCTION)
  (MULTIPLE-VALUE-BIND (FSPEC TYPE NODE)
      (SEND (SEND *INTERVAL* :MAJOR-MODE) :DEFINITION-AROUND-BP (POINT))
    (LET* ((PATHNAME (SI:GET-SOURCE-FILE-FULL-NAME FSPEC TYPE))
	   (NEWEST-NODE
	     (IF PATHNAME
		 (GET-SECTION-NODE-IN-FILE FSPEC TYPE
					   (SEND PATHNAME ':NEW-VERSION ':NEWEST))
	       ;; If it was newly defined by a patch file, the source file was not
	       ;; recorded.  But if the source file has already been read into
	       ;; the editor, we can find it.
	       (LET ((ZMACS-BUFFERS-PROPERTY (SI:FUNCTION-SPEC-GET FSPEC 'ZMACS-BUFFERS)))
		 (LOOP FOR (NODE-TYPE NODE) IN ZMACS-BUFFERS-PROPERTY
		       WHEN (AND (EQ NODE-TYPE TYPE)
				 (NOT (SEND (INTERVAL-BUFFER NODE) ':GET ':PATCH-FILE))
				 (SETQ PATHNAME (SEND (INTERVAL-BUFFER NODE)
						      ':SEND-IF-HANDLES ':PATHNAME))
				 (MEMQ (SEND PATHNAME ':VERSION) '(:NEWEST :UNSPECIFIC)))
			 RETURN NODE
		       FINALLY
			 (BARF "Cannot find original source file for ~S ~S.
Perhaps it is only defined by patch files?" TYPE FSPEC))))))
      (WITH-NODE-READ-LOCKED (NODE)
	(WITH-NODE-READ-LOCKED (NEWEST-NODE)
	  (FUNCALL COMPARE-SECTION-NODES-FUNCTION
		   (COERCE-TO-SECTION-NODE NODE FSPEC TYPE)
		   NEWEST-NODE)))))
  (TYPEIN-LINE "Done."))

;;; This is a kludge.  I admit it.
(DEFUN COERCE-TO-SECTION-NODE (NODE FSPEC TYPE)
  (IF (TYPEP NODE 'SECTION-NODE)
      NODE
      (MAKE-INSTANCE 'SECTION-NODE
		     :FIRST-BP (INTERVAL-FIRST-BP NODE)
		     :LAST-BP (INTERVAL-LAST-BP NODE)
		     :SUPERIOR *INTERVAL*
		     :FUNCTION-SPEC FSPEC
		     :DEFINITION-TYPE TYPE
		     :DEFINITION-LINE (BP-LINE (INTERVAL-FIRST-BP NODE)))))

;;; These functions are suitable for use as the COMPARE-SECTION-NODES-FUNCTION argument
;;; to the workhorse source compare definition functions. They take two section nodes
;;; as arguments and either compare or compare merge them.
(COMPILER:FUNCTION-DEFINED 'SRCCOM:SOURCE-COMPARE-FILES)	; Forward reference: Utilities
(DEFUN SOURCE-COMPARE-SECTION-NODES (NODE-1 NODE-2)
  (LET* ((FILE-1 (MAKE-SOURCE-COMPARE-FILE-FROM-SECTION-NODE NODE-1))
	 (FILE-2 (MAKE-SOURCE-COMPARE-FILE-FROM-SECTION-NODE NODE-2))
	 (STREAM (MAKE-TYPEOUT-BUFFER-STREAM
		   ':SOURCE-COMPARE
		   ':SET-NAMES (LIST (NAMED-BUFFER-NAME (INTERVAL-BUFFER NODE-1))
				     (NAMED-BUFFER-NAME (INTERVAL-BUFFER NODE-2))))))
    (SRCCOM:SOURCE-COMPARE-FILES FILE-1 FILE-2 STREAM T
				 :IGNORE-CASE-AND-STYLE (BIT-TEST #o2 *NUMERIC-ARG*)
				 :IGNORE-WHITESPACE (BIT-TEST #o4 *NUMERIC-ARG*))))

	;; Forward reference: Utilities
(COMPILER:FUNCTION-DEFINED 'SRCCOM:SOURCE-COMPARE-AUTOMATIC-MERGE-RECORDING)
(DEFUN SOURCE-COMPARE-MERGE-SECTION-NODES (NODE-1 NODE-2)
  (LET*
    ((*INTERVAL* (INTERVAL-BUFFER NODE-1))
     (FILE-1 (MAKE-SOURCE-COMPARE-FILE-FROM-SECTION-NODE NODE-1))
     (FILE-2 (MAKE-SOURCE-COMPARE-FILE-FROM-SECTION-NODE NODE-2))
     (RELEVANT-NODE-1 (SECTION-NODE-RELEVANT-INTERVAL-FOR-SOURCE-COMPARE NODE-1))
     (RELEVANT-FIRST-BP (LET ((DUMMY (NODE-FIRST-BP RELEVANT-NODE-1)))
			  (CREATE-BP (BP-LINE DUMMY) (BP-INDEX DUMMY) ':NORMAL)))
     (RELEVANT-LAST-BP  (LET ((DUMMY (NODE-LAST-BP RELEVANT-NODE-1)))
			  (CREATE-BP (BP-LINE DUMMY) (BP-INDEX DUMMY) ':NORMAL)))
     (RECORDING-STREAM (OPEN-INTERVAL-STREAM (FORWARD-CHAR RELEVANT-LAST-BP 1 T)))
     MARKS)
    (WITH-UNDO-SAVE ("Source Compare Merge" RELEVANT-FIRST-BP RELEVANT-LAST-BP T)
      (SETQ MARKS (SRCCOM:SOURCE-COMPARE-AUTOMATIC-MERGE-RECORDING
		    FILE-1 FILE-2 RECORDING-STREAM
		    :IGNORE-CASE-AND-STYLE (BIT-TEST #o2 *NUMERIC-ARG*)
		    :IGNORE-WHITESPACE (BIT-TEST #o4 *NUMERIC-ARG*)))
      (DELETE-INTERVAL RELEVANT-FIRST-BP RELEVANT-LAST-BP)
      (SOURCE-COMPARE-MERGE-QUERY MARKS))
    (MUST-REDISPLAY *WINDOW* DIS-TEXT)
    (REDISPLAY *WINDOW*)
    (CHECK-INTERVAL-SECTIONS NODE-1)))

;;; This function converts a section node into a data structure that the source compare
;;; code can understand. Specifically it takes advantage of source compare's ability to
;;; compare streams.
(COMPILER:FUNCTION-DEFINED 'SRCCOM:MAKE-SRCCOM-FILE)	; Forward reference: Utilities
(DEFUN MAKE-SOURCE-COMPARE-FILE-FROM-SECTION-NODE (NODE)
  (LET ((*INTERVAL* (INTERVAL-BUFFER NODE)))
    (SRCCOM:MAKE-SRCCOM-FILE
      :FILE-NAME (FORMAT NIL "in ~A" (SEND *INTERVAL* :NAME))
      :FILE-TYPE (SEND NODE ':DEFINITION-NAME)
      :FILE-STREAM (OPEN-INTERVAL-STREAM
		     (SECTION-NODE-RELEVANT-INTERVAL-FOR-SOURCE-COMPARE NODE))
      :FILE-MAJOR-MODE (SEND (SEND *INTERVAL* :MAJOR-MODE) ':MAJOR-MODE-KEYWORD)
      :FILE-BP-TABLE (MAKE-ARRAY 100. :FILL-POINTER 0))))


;;; This gets the part of the definition interval we are really interested in, especially
;;; for patch files whose definition intervals include extra stuff at the beginning and
;;; ends.
(DEFUN SECTION-NODE-RELEVANT-INTERVAL-FOR-SOURCE-COMPARE (SECTION-NODE)
  (DEFINITION-INTERVAL (CREATE-BP (SEND SECTION-NODE ':DEFINITION-LINE) 0) 1 T T))

(DEFUN SOURCE-COMPARE-MERGE-QUERY (MARKS
				   &AUX (ENABLE-CHANGE-RECORDING *ENABLE-CHANGE-RECORDING*)
					(*ENABLE-CHANGE-RECORDING* NIL))
  (MUST-REDISPLAY *WINDOW* DIS-TEXT)
  (UNWIND-PROTECT
    (DO ((MARK) (DO-THE-REST)) ((NULL MARKS))
      (POP MARKS MARK)
      (UNWIND-PROTECT
	(LET ((BP1 (FIRST MARK))
	      (BP2 (SECOND MARK))
	      (BP3 (THIRD MARK))
	      (BP4 (FOURTH MARK))
	      (BP5 (FIFTH MARK))
	      (BP6 (SIXTH MARK)))
	  (COND ((NOT DO-THE-REST)
		 (DO-NAMED ONE-MARK
			   ((REDISPLAY-P T REDISPLAY-NEXT-P)
			    (REDISPLAY-NEXT-P NIL NIL)
			    (DO-IT NIL NIL))
			   (NIL)
		   (COND (REDISPLAY-P
			  (MOVE-POINT BP1)
			  (MUST-REDISPLAY *WINDOW* DIS-BPS)
			  (LET ((*CENTERING-FRACTION* 0.10S0))
			    (RECENTER-WINDOW *WINDOW* ':ABSOLUTE))))
		   (REDISPLAY *WINDOW* ':POINT)
		   (SELECTQ
		     (PROMPT-LINE-ACTIVATE
		       (FQUERY
			 ;; It would be nice if the user could click the mouse on the source
			 ;; he wanted to keep.  I think that worked in Release 4, but it's
			 ;; been broken ever since, so I removed the vestiges of the code.
			 '(:CHOICES (((#/1 "First source") #/1)
				     ((#/2 "Second source") #/2)
				     ((#/* "Both sources") #/*)
				     ((#/I "Both sources and *** lines") #/I #/i)
				     ((#\SPACE "Both sources, no query") #\SPACE)
				     ((#/! "Do the rest") #/!)	; queries more
				     ((#\CONTROL-R "Edit instead") #\CONTROL-R)
				     ((#\RUBOUT "Neither source") #\RUBOUT))
			   :HELP-FUNCTION SRCCOM-FIRST-QUESTION-HELP
			   :FRESH-LINE T)
			 "~&Specify which version to keep: "))
		     (#/1 (SETQ DO-IT 1))
		     (#/2 (SETQ DO-IT 2))
		     (#/* (SETQ DO-IT '*))
		     (#\SP (RETURN NIL))
		     (#\RUBOUT
		      (DELETE-INTERVAL BP2 BP5 T)
		      (RETURN))
		     (#/I (MOVE-BP BP1 BP2)
			  (MOVE-BP BP3 BP4)
			  (MOVE-BP BP5 BP6)
			  (RETURN))
		     (#/!
		      (DO () (NIL)
			(SELECTQ
			  (PROMPT-LINE-ACTIVATE
			    (FQUERY
			      '(:CHOICES (((#/1 "Rest from first source") #/1)
					  ((#/2 "Rest from second source") #/2)
					  ((#/* "Rest from both sources") #/*)
					  ((#/I "Leave rest of indicators") #/I #/i)
					  ((#\RUBOUT "Whatever aborting means") #\RUBOUT)))
			      "What to do with remaining differences: "))
			  (#\C-G (BARF))
			  (#/1
			   (SETQ DO-THE-REST 1)
			   (RETURN-FROM ONE-MARK))
			  (#/2
			   (SETQ DO-THE-REST 2)
			   (RETURN-FROM ONE-MARK))
			  (#/*
			   (SETQ DO-THE-REST '*)
			   (RETURN-FROM ONE-MARK))
			  (#/I
			   (SETQ DO-THE-REST 'I)
			   (RETURN-FROM ONE-MARK))
			  (#\RUBOUT (RETURN))
			  (#\HELP
			   (TYPEIN-LINE
			     "1 - rest from file #1, 2 - rest from file #2,~@
			      * - rest from both, I leave indicators, RUBOUT abort")))))
		     (#\C-R
		      (LET ((*ENABLE-CHANGE-RECORDING* ENABLE-CHANGE-RECORDING))
			(CONTROL-R)
			(RECORD-ACCUMULATED-CHANGES-BP (POINT)))
		      (SETQ REDISPLAY-NEXT-P T))
		     (#\FF
		      (MUST-REDISPLAY *WINDOW* DIS-ALL))
		     (#\C-L
		      (MUST-REDISPLAY *WINDOW* (COM-RECENTER-WINDOW)))
		     (#\HELP
		      (TYPEIN-LINE "1 - file #1, 2 - file #2, * - both, ~@
				    SPACE - both without query, RUBOUT - neither, ~@
				    ! - rest of 1 or 2, I leave indicator, c-R - edit"))
		     (OTHERWISE
		      (BEEP)))
		   (AND DO-IT
			(LET (OK CONTROL-R-P)
			  (SELECTQ DO-IT
				(* (MULTIPLE-VALUE (OK CONTROL-R-P)
				     (SOURCE-COMPARE-MERGE-QUERY-1 ENABLE-CHANGE-RECORDING
								   BP1 BP2 BP3 BP4 BP5 BP6)))
				(1 (MULTIPLE-VALUE (OK CONTROL-R-P)
				     (SOURCE-COMPARE-MERGE-QUERY-1 ENABLE-CHANGE-RECORDING
								   BP1 BP2 BP3 BP6)))
				(2 (MULTIPLE-VALUE (OK CONTROL-R-P)
				     (SOURCE-COMPARE-MERGE-QUERY-1 ENABLE-CHANGE-RECORDING
								   BP1 BP4 BP5 BP6))))
			  (SETQ REDISPLAY-NEXT-P CONTROL-R-P)
			  OK)
			(RETURN)))))
	  (COND (DO-THE-REST
		 (SELECTQ DO-THE-REST
		   (* )
		   (1 (DELETE-INTERVAL BP4 BP5 T))
		   (2 (DELETE-INTERVAL BP2 BP3 T))
		   (I (MOVE-BP BP1 BP2)
		      (MOVE-BP BP3 BP4)
		      (MOVE-BP BP5 BP6)))
		 (MUST-REDISPLAY *WINDOW* DIS-TEXT))))
	(FLUSH-SOURCE-COMPARE-MARK MARK)))
    (MAPCAR #'FLUSH-SOURCE-COMPARE-MARK MARKS)))

;;--- This can't work on version-control buffers, can it?
(DEFUN SOURCE-COMPARE-MERGE-QUERY-1 (ENABLE-CHANGE-RECORDING &REST START-AND-END-BPS
				     &AUX INTS (FLAG NIL))
  (SETQ INTS (LOOP FOR (BP1 BP2) ON START-AND-END-BPS BY 'CDDR
		   COLLECT `(,(COPY-INTERVAL BP1 BP2 T)
 			     ,(LOOP WITH LAST-LINE = (BP-LINE BP2)
				    FOR LINE = (BP-LINE BP1) THEN (LINE-NEXT LINE)
				    COLLECTING (COPYLIST (LINE-BP-LIST LINE))
				    UNTIL (EQ LINE LAST-LINE)))))
  (UNWIND-PROTECT
    (PROGN
      (LOOP FOR (BP1 BP2) ON START-AND-END-BPS BY 'CDDR DO
        (SETF (BP-STATUS BP1) ':NORMAL)
        (SETF (BP-STATUS BP2) ':MOVES)
	(DELETE-INTERVAL BP1 BP2 T))
      (MUST-REDISPLAY *WINDOW* DIS-TEXT)
      (REDISPLAY *WINDOW* ':POINT)
      (DO ((CONTROL-R-P NIL)) (NIL)
	(SELECTQ
	  (PROMPT-LINE-ACTIVATE
	    (FQUERY
	      '(:CHOICES (((#\SPACE "Yes, that's right") #\SPACE)
			  ((#\RUBOUT "No, take that back") #\RUBOUT)
			  ((#\CONTROL-R "Edit") #\CONTROL-R))
		:HELP-FUNCTION SRCCOM-SECOND-QUESTION-HELP)
	      "Please confirm the change that has been made: "))
	  (#\C-G (BARF))
	  (#\SP (SETQ FLAG T) (RETURN T))
	  (#\RUBOUT (RETURN (VALUES NIL CONTROL-R-P)))
	  (#\C-R (LET ((*ENABLE-CHANGE-RECORDING* ENABLE-CHANGE-RECORDING))
		   (CONTROL-R)
		   (RECORD-ACCUMULATED-CHANGES-BP (POINT)))
		 (SETQ CONTROL-R-P T)))))
    (UNLESS FLAG
      (LOOP FOR (BP1 BP2) ON START-AND-END-BPS BY 'CDDR
	    FOR (INT INT-BPS-TO-SAVE) IN INTS
	    DO (INSERT-INTERVAL BP2 INT)
	       (LOOP FOR LINE-BPS-TO-SAVE IN INT-BPS-TO-SAVE
		     FOR LINE = (BP-LINE BP1) THEN (LINE-NEXT LINE)
		     DO (LOOP FOR BP-TO-SAVE IN LINE-BPS-TO-SAVE
			      DO (SETF (BP-LINE BP-TO-SAVE) LINE))
			(SETF (LINE-BP-LIST LINE) LINE-BPS-TO-SAVE))
	    FINALLY (MUST-REDISPLAY *WINDOW* DIS-TEXT)))
    (LOOP FOR (BP1 BP2) ON START-AND-END-BPS BY 'CDDR
	  DO (SETF (BP-STATUS BP1) ':MOVES)
	     (SETF (BP-STATUS BP2) ':NORMAL))))

;; The two help functions deliberately direct their output to STANDARD-OUTPUT rather than to
;; their stream argument so that it will appear in the typeout window rather than in the
;; typein window.

(DEFUN SRCCOM-FIRST-QUESTION-HELP (IGNORE)
  (FORMAT T "~&This command prompts you twice for each difference that it detects~@
             in the two sources.  The first time you specify what to do to resolve the~@
             difference.  For example, you can keep one or the other version, both of them,~@
             or neither.  The second time you confirm or reject the change that was made.")
  (FORMAT T "~&~%Option~13,TAction")
  (LOOP FOR (ACTION INPUT) IN FORMAT:FQUERY-CHOICES
	DO
	(TYPECASE ACTION
	  (:LIST
	   (FORMAT T "~&~:C~13,2T~A" INPUT (SECOND ACTION)))	;shows typein and explanation
	  (:SYMBOL
	   (FORMAT T "~&~A" INPUT))))
  (TV:TYPE-A-SPACE-TO-FLUSH STANDARD-OUTPUT)
  (REDISPLAY *WINDOW*))

(DEFUN SRCCOM-SECOND-QUESTION-HELP (IGNORE)
  (FORMAT T "~&The screen now shows the change that was made as a result of your~@
             choice.  Confirming it keeps that change and moves on to the next~@
             difference.  Rejecting it returns to the prior appearance so that~@
             you can make a difference choice.")
  (FORMAT T "~&~%Option~13,TAction")
  (LOOP FOR (ACTION INPUT) IN FORMAT:FQUERY-CHOICES
	DO
	(TYPECASE ACTION
	  (:LIST
	   (FORMAT T "~&~:C~13,2T~A" INPUT (SECOND ACTION)))	;shows typein and explanation
	  (:SYMBOL
	   (FORMAT T "~&~A" INPUT))))
  (TV:TYPE-A-SPACE-TO-FLUSH STANDARD-OUTPUT)
  (REDISPLAY *WINDOW*))

(DEFUN FLUSH-SOURCE-COMPARE-MARK (MARK)
  (LOOP FOR (BP1 BP2) ON MARK BY 'CDDR DO
    (DELETE-INTERVAL BP1 BP2 T))
  (MAPCAR #'FLUSH-BP MARK))


;Description for List Buffers: try to be useful
(DEFMETHOD (:DESCRIPTION SOURCE-COMPARE-BUFFER) ()
  (FORMAT NIL "~A vs ~A" (SHORTEN-NAME (FIRST NAMES)) (SHORTEN-NAME (SECOND NAMES))))

(DEFUN SHORTEN-NAME (NAME &AUX TEM)
  (COND ((TYPEP NAME 'FS:PATHNAME) (SEND NAME ':STRING-FOR-DIRED))
	((AND (STRINGP NAME) (SETQ TEM (STRING-SEARCH-CHAR #\SP NAME)))
	 (LET ((SHORT-NAME (SUBSTRING NAME 0 TEM)))
	   (IF (OR (STRING-EQUAL SHORT-NAME "in")
		   (STRING-EQUAL SHORT-NAME "for")
		   (STRING-EQUAL SHORT-NAME "of"))
	       (LET ((N (STRING-SEARCH-CHAR #\SP NAME 4))) ;really `3 or 4'
		 (IF N (SUBSTRING NAME 0 N) NAME))
	       SHORT-NAME)))
	(T NAME)))


(DEFFLAVOR TAB-STOP-BUFFER () (NON-FILE-BUFFER))

(DEFMETHOD (:REVERT TAB-STOP-BUFFER) ()
  (LET ((*INTERVAL* SELF))
    (DELETE-INTERVAL SELF))
  (INSERT FIRST-BP
	  "                                                                                          
        :       :       :       :       :       :       :       :       :       :       :       :"))

(DEFUN INITIALIZE-TAB-STOP-BUFFER ()
  (SETQ *TAB-STOP-BUFFER* (MAKE-BUFFER 'TAB-STOP-BUFFER ':NAME "*Tab-stops-1*"
				       ':ACTIVATE-P NIL))
  (SEND *TAB-STOP-BUFFER* ':REVERT))

(DEFCOM COM-EDIT-TAB-STOPS "Edits the tab-stop buffer." ()
  (SEND *TAB-STOP-BUFFER* ':ACTIVATE)
  (MAKE-BUFFER-CURRENT *TAB-STOP-BUFFER*)
  DIS-ALL)

(DEFINE-SPECIAL-BUFFER-TYPE WORD-ABBREVS-BUFFER ()
  (SPECIAL-PURPOSE-BUFFER)
  :WORD-ABBREVS "Word-Abbrevs")

(DEFMETHOD (:REVERT WORD-ABBREVS-BUFFER) ()
  (LET ((*INTERVAL* SELF))
    (COM-INSERT-WORD-ABBREVS)))
