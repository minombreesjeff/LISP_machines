;;;-*- Syntax: Zetalisp; Base: 8; Mode: LISP; Package: ZWEI -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Functions in this file know about bps, lines, and intervals.
;;; They use *INTERVAL* for their limit-checking.

(DEFGENERIC INTERVAL-BP-ABSOLUTE-LIMITING-INTERVAL (INTERVAL BP)
  "Given an interval and a BP inside the interval, returns the interval that limits motion.
Normally, this is the interval itself."
  (DECLARE (VALUES INTERVAL))
  (:METHOD (INTERVAL)
	   (IGNORE BP)
	   SELF))

(DEFGENERIC INTERVAL-BP-ITEM-LIMITING-INTERVAL (INTERVAL BP)
  "Given an interval and a BP inside the interval, returns the interval that limits motion
through an item boundary.  If the movement starts from an itme boundary, it may ignore
this limit.  However, any individual item is always limited by this interval."
  (DECLARE (VALUES INTERVAL))
  (:METHOD (INTERVAL)
	   (IGNORE BP)
	   SELF))

(DEFUN BP-LIMIT-AGAINST-*INTERVAL* (BP)
  (INTERVAL-BP-ABSOLUTE-LIMITING-INTERVAL *INTERVAL* BP))

(DEFUN BP-ITEM-LIMIT-AGAINST-*INTERVAL* (BP)
  (INTERVAL-BP-ITEM-LIMITING-INTERVAL *INTERVAL* BP))

;;; Standard motion functions.

(DEFUN FORWARD-CHAR (BP &OPTIONAL (TIMES 1) FIXUP-P
		     (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (COND ((ZEROP TIMES)
	 (COPY-BP BP))
	((> TIMES 0)
	 (DO ((LINE (BP-LINE BP) (LINE-NEXT-IN-BUFFER LINE))
	      (INDEX (BP-INDEX BP) 0)
	      (LAST-LINE (BP-LINE (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
	      (LAST-INDEX (BP-INDEX (INTERVAL-LAST-BP BOUNDING-INTERVAL))))
	     (NIL)				
	   (LET ((LL (LINE-LENGTH LINE))
		 (I (+ INDEX TIMES)))
		(COND ((AND (EQ LINE LAST-LINE)
			    (> I LAST-INDEX))
		       (RETURN (IF FIXUP-P (CREATE-BP LINE LAST-INDEX) NIL)))
		      (( I LL)
		       (RETURN (CREATE-BP LINE I))))
		(SETQ TIMES (- TIMES (- LL INDEX) 1)))))
	(T
	 (SETQ TIMES (- TIMES))
	 (DO ((LINE (BP-LINE BP))
	      (INDEX (- (BP-INDEX BP) TIMES))
	      (LINE-LENGTH (BP-INDEX BP))
	      (FIRST-LINE (BP-LINE (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
	      (FIRST-INDEX (BP-INDEX (INTERVAL-FIRST-BP BOUNDING-INTERVAL))))
	     (NIL)
	   (COND ((AND (EQ LINE FIRST-LINE) (< INDEX FIRST-INDEX))
		  (RETURN (IF FIXUP-P (CREATE-BP FIRST-LINE FIRST-INDEX) NIL)))
		 (( INDEX 0)
		  (RETURN (CREATE-BP LINE INDEX))))
	   (SETQ TIMES (- TIMES LINE-LENGTH 1)
		 LINE (LINE-PREVIOUS-IN-BUFFER LINE)
		 LINE-LENGTH (LINE-LENGTH LINE)
		 INDEX (- LINE-LENGTH TIMES))))))

;;; Move forward TIMES characters, the way a program on ITS would count
;;; characters.  This means that CRs and LFs get counted separately; that
;;; is, a newline counts as two characters.  If the TIMES given would give
;;; a BP between a CR and an LF, which we do not represent, we return the
;;; position just after the newline.
(DEFUN FORWARD-ITS-CHAR (BP &OPTIONAL (TIMES 1) FIXUP-P)
  (LET ((BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
    (COND ((ZEROP TIMES)
	   (COPY-BP BP))
	  ((> TIMES 0)
	   (DO ((LINE (BP-LINE BP) (LINE-NEXT-IN-BUFFER LINE))
		(INDEX (BP-INDEX BP) 0)
		(LAST-LINE (BP-LINE (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
		(LAST-INDEX (BP-INDEX (INTERVAL-LAST-BP BOUNDING-INTERVAL ))))
	       (NIL)
	     (LET ((LL (LINE-LENGTH LINE))
		   (I (+ INDEX TIMES)))
	       (COND ((AND (EQ LINE LAST-LINE)
			   (> I LAST-INDEX))
		      (RETURN (IF FIXUP-P (CREATE-BP LINE LAST-INDEX) NIL)))
		     (( I LL)
		      (RETURN (CREATE-BP LINE I))))
	       (SETQ TIMES (MAX 0 (- TIMES (- LL INDEX) 2))))))
	  (T
	   (SETQ TIMES (- TIMES))
	   (DO ((LINE (BP-LINE BP))
		(INDEX (- (BP-INDEX BP) TIMES))
		(LINE-LENGTH (BP-INDEX BP))
		(FIRST-LINE (BP-LINE (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
		(FIRST-INDEX (BP-INDEX (INTERVAL-FIRST-BP BOUNDING-INTERVAL))))
	       (NIL)
	     (COND ((AND (EQ LINE FIRST-LINE) (< INDEX FIRST-INDEX))
		    (RETURN (IF FIXUP-P (CREATE-BP FIRST-LINE FIRST-INDEX) NIL)))
		   (( INDEX 0)
		    (RETURN (CREATE-BP LINE INDEX))))
	     (SETQ TIMES (MAX 0 (- TIMES LINE-LENGTH 2))
		   LINE (LINE-PREVIOUS-IN-BUFFER LINE)
		   LINE-LENGTH (LINE-LENGTH LINE)
		   INDEX (- LINE-LENGTH TIMES)))))))

(DEFUN FORWARD-LINE (BP &OPTIONAL (TIMES 1) FIXUP-P
		     (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (COND ((ZEROP TIMES) (COPY-BP BP))
	((PLUSP TIMES)
	 (DO ((LAST-LINE (BP-LINE (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
	      (LINE (BP-LINE BP) (LINE-NEXT-IN-BUFFER LINE))
	      (I 0 (1+ I)))
	     (( I TIMES)
	      (CREATE-BP LINE 0))
	   (COND ((EQ LINE LAST-LINE)
		  (RETURN (IF FIXUP-P
			      (CREATE-BP LINE 0)
			      NIL))))))
	(T
	 (DO ((FIRST-LINE (BP-LINE (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
	      (LINE (BP-LINE BP) (LINE-PREVIOUS-IN-BUFFER LINE))
	      (I 0 (1- I)))
	     (( I TIMES)
	      (CREATE-BP LINE (IF (EQ LINE FIRST-LINE)
				  (BP-INDEX (INTERVAL-FIRST-BP BOUNDING-INTERVAL))
				  0)))
	   (COND ((EQ LINE FIRST-LINE)
		  (RETURN (IF FIXUP-P
			      (CREATE-BP LINE
					 (BP-INDEX (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
			      NIL))))))))

;; This is the function for moving from BP forward or backward over lists
;; as opposed to sexps.  That is, atoms are ignored (treated like spaces).
;; Also comments are not treated specially.
;; LEVEL can be positive to move up in the list structure.
;; To move down, supply DOWNP as T and make LEVEL minus the number of levels to move.
;; NO-UP-P means it is an error to move past an ) to a higher level
(DEFUN FORWARD-LIST (BP &OPTIONAL (TIMES 1) FIXUP-P (LEVEL 0) DOWNP NO-UP-P
		     (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (LET* ((ORIGINAL-LEVEL LEVEL)
	 (STRING-MATCH-CHAR #/|)		;kludge for freestanding vertical-bar
	 (STATE 'NORMAL))
    (AND (LISP-BP-SYNTACTIC-CONTEXT BP) (SETQ STATE 'STRING))
    (COND ((ZEROP TIMES) (COPY-BP BP))
	  ((PLUSP TIMES)
	   (LET ((TIME 0)
		 (LAST-BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
	     (CHARMAP (BP LAST-BP (IF FIXUP-P (COPY-BP LAST-BP) NIL))
	       RESTART
	       (LET ((SYNTAX (LIST-SYNTAX (CHARMAP-CHAR))))
		 (SELECTQ STATE
		   (STRING
		    (SELECT SYNTAX
		      ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
		       (WHEN (CHAR-EQUAL STRING-MATCH-CHAR (CHARMAP-CHAR))
			 (SETQ STATE 'NORMAL)))
		      (LIST-SLASH
		       (CHARMAP-INCREMENT (IF FIXUP-P (COPY-BP LAST-BP) NIL)))))
		   (NORMAL
		    (SELECT SYNTAX
		      (LIST-SLASH
		       (CHARMAP-INCREMENT (IF FIXUP-P (COPY-BP LAST-BP) NIL)))
		      ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
		       (SETQ STATE 'STRING
			     STRING-MATCH-CHAR (CHARMAP-CHAR)))
		      (LIST-CLOSE
		       (SETQ LEVEL (1- LEVEL))
		       (COND (DOWNP
			      (COND ((< LEVEL ORIGINAL-LEVEL)
				     (CHARMAP-RETURN (IF FIXUP-P (COPY-BP LAST-BP) NIL)))))
			     ((AND NO-UP-P (< LEVEL 0))
			      (CHARMAP-RETURN NIL))
			     (( LEVEL 0)
			      (IF ( (SETQ TIME (1+ TIME)) TIMES)
				  (CHARMAP-RETURN (CHARMAP-BP-AFTER))))))
		      (LIST-OPEN
		       (COND ((AND ( (SETQ LEVEL (1+ LEVEL)) 0) DOWNP)
			      (IF ( (SETQ TIME (1+ TIME)) TIMES)
				  (CHARMAP-RETURN (CHARMAP-BP-AFTER)))))))))))))
	  (T
	   (LET ((TIME 0)
		 (FIRST-BP (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
	     (RCHARMAP (BP FIRST-BP (IF FIXUP-P (COPY-BP FIRST-BP) NIL))
	       RESTART
	       (OR (= (LIST-SYNTAX (RCHARMAP-CHAR-BEFORE)) LIST-SLASH)
		   (LET ((SYNTAX (LIST-SYNTAX (RCHARMAP-CHAR))))
		     (SELECTQ STATE
		       (STRING
			(SELECT SYNTAX
			  ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
			   (WHEN (CHAR-EQUAL (RCHARMAP-CHAR) STRING-MATCH-CHAR)
			     (SETQ STATE 'NORMAL)))))
		       (NORMAL
			(SELECT SYNTAX
			  ((LIST-DOUBLE-QUOTE LIST-VERTICAL-BAR)
			   (SETQ STATE 'STRING
				 STRING-MATCH-CHAR (RCHARMAP-CHAR)))
			  (LIST-CLOSE
			   (AND ( (SETQ LEVEL (1+ LEVEL)) 0) DOWNP
				(IF ( (SETQ TIME (1- TIME)) TIMES)
				    (RCHARMAP-RETURN (RCHARMAP-BP-BEFORE)))))
			  (LIST-OPEN
			   (SETQ LEVEL (1- LEVEL))
			   (AND NO-UP-P (< LEVEL 0) (RCHARMAP-RETURN NIL))
			   (AND ( LEVEL 0) (NOT DOWNP)
				(IF ( (SETQ TIME (1- TIME)) TIMES)
				    (RCHARMAP-RETURN (RCHARMAP-BP-BEFORE)))))))))))))))) 

;Return true if the line starts a list which it doesn't end, i.e.
;contains an unmatched open paren
(DEFUN LINE-OPENS-PARENS (LINE &OPTIONAL (START-INDEX 0) END-INDEX)
  (LET ((LINE LINE))
    (DECLARE (SYS:ARRAY-REGISTER LINE))
    (DO ((I START-INDEX (1+ I))
	 (LIM (OR END-INDEX (LINE-LENGTH LINE)))
	 (STATE 'NORMAL)
	 (LEVEL 0))
	(( I LIM) (> LEVEL 0))
      (LET ((SYNTAX (LIST-SYNTAX (AREF LINE I))))	;was a cached CHAR-CODE
	(SELECTQ STATE
	  (STRING (SELECT SYNTAX
		    (LIST-DOUBLE-QUOTE (SETQ STATE 'NORMAL))
		    (LIST-SLASH (SETQ I (1+ I)))))
	  (VERTICAL-BAR
	   (SELECT SYNTAX
	     (LIST-VERTICAL-BAR (SETQ STATE 'NORMAL))
	     (LIST-SLASH (SETQ I (1+ I)))))
	  (NORMAL (SELECT SYNTAX
		    (LIST-SLASH (SETQ I (1+ I)))
		    (LIST-COMMENT (RETURN-FROM LINE-OPENS-PARENS (> LEVEL 0)))
		    (LIST-VERTICAL-BAR (SETQ STATE 'VERTICAL-BAR))
		    (LIST-DOUBLE-QUOTE (SETQ STATE 'STRING))
		    (LIST-CLOSE (SETQ LEVEL (MAX (1- LEVEL) 0)))
		    (LIST-OPEN (SETQ LEVEL (1+ LEVEL)))))))))) 


(DEFUN LINE-STARTS-PACKAGE-PREFIX-OR-CONDITIONAL (LINE &OPTIONAL (START-INDEX 0) END-INDEX)
  (LET ((IDX START-INDEX)
	(LIM (OR END-INDEX (LINE-LENGTH LINE)))
	(LINE LINE)
	)
    (DECLARE (SYS:ARRAY-REGISTER LINE))
    (AND (> (- LIM IDX) 1)
	 (IF (= (LIST-SYNTAX (AREF LINE IDX)) LIST-COMMENT)
	     (RETURN-FROM LINE-STARTS-PACKAGE-PREFIX-OR-CONDITIONAL NIL)
	     T)
	 (OR ;; Line starting with #[+/-/|]
	   (AND (CHAR-EQUAL (AREF LINE IDX) #/#)
		(LET ((C (AREF LINE (1+ IDX))))
		  (OR (CHAR-EQUAL C #/+)
		      (CHAR-EQUAL C #/-)
		      (CHAR-EQUAL C #/|))))
	   ;; Line starting with alphabetic characters, followed by a colon, followed
	   ;; by some optional whitespace.
	   (LET ((SEEN-COLON NIL)
		 (WHITESPACE NIL))
	     (AND (DO* ((I IDX (1+ I))
			(SYNTAX (LIST-SYNTAX (AREF LINE I))))
		       (( I LIM) T)
		    (UNLESS 
		      (IF (NOT SEEN-COLON)
			  (SELECTOR SYNTAX =	;was CHAR-CODE
			    (#.LIST-SLASH (INCF I))
			    (#.LIST-COMMENT T)
			    (#.LIST-ALPHABETIC T)
			    (#.LIST-COLON (SETQ SEEN-COLON T)))
			  (MEM #'CHAR-EQUAL (AREF LINE I)
			       D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; the symbol macro reference is bloody expensive.
0			       1;;avoid it unless absolutely necessary.
0			       (OR WHITESPACE (SETQ WHITESPACE *WHITESPACE-CHARS*))))
		      (RETURN NIL)))
		  SEEN-COLON))))))


(DEFUN FORWARD-WORD (BP &OPTIONAL (TIMES 1) FIXUP-P
		     (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP))
		     )
  (COND ((ZEROP TIMES) (COPY-BP BP))
	((PLUSP TIMES)
	 (LET ((STATE NIL)
	       (TIME 0)
	       (LAST-BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
	   (CHARMAP (BP LAST-BP (IF (OR FIXUP-P
					(AND STATE (= (1+ TIME) TIMES)))
				    (COPY-BP LAST-BP)
				    NIL))
	     (LET ((SYNTAX (WORD-SYNTAX (CHARMAP-CHAR))))
	       (SELECTQ STATE
		 (NIL
		  (SELECT SYNTAX
		    (WORD-ALPHABETIC
		     (SETQ STATE T))))
		 (T
		  (SELECT SYNTAX
		    (WORD-DELIMITER
		     (SETQ TIME (1+ TIME))
		     (IF ( TIME TIMES)
			 (CHARMAP-RETURN (CHARMAP-BP-BEFORE))
			 (SETQ STATE NIL))))))))))
	(T
	 (LET ((STATE NIL)
	       (TIME 0)
	       (FIRST-BP (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
	   (RCHARMAP (BP FIRST-BP (IF (OR FIXUP-P
					  (AND STATE (= (1- TIME) TIMES)))
				      (COPY-BP FIRST-BP)
				      NIL))
	     (LET ((SYNTAX (WORD-SYNTAX (RCHARMAP-CHAR))))
	       (SELECTQ STATE
		 (NIL
		  (SELECT SYNTAX
		    (WORD-ALPHABETIC
		     (SETQ STATE T))))
		 (T
		  (SELECT SYNTAX
		    (WORD-DELIMITER
		     (SETQ TIME (1- TIME))
		     (IF ( TIME TIMES)
			 (RCHARMAP-RETURN (RCHARMAP-BP-AFTER))
			 (SETQ STATE NIL))))))))))))

(DEFUN FORWARD-TO-WORD (BP &OPTIONAL (TIMES 1) FIXUP-P (BOUNDING-INTERVAL
							 (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (CATCH 'LOSSAGE
    (COND ((ZEROP TIMES) (COPY-BP BP))
	  ((PLUSP TIMES)
           (LET ((LAST-BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
             (COND ((> TIMES 1)
                    (SETQ BP (FORWARD-WORD BP (1- TIMES) NIL BOUNDING-INTERVAL))
                    (COND ((NULL BP)
                           (THROW 'LOSSAGE (IF FIXUP-P (COPY-BP LAST-BP) NIL))))))
             (CHARMAP (BP LAST-BP (IF FIXUP-P (COPY-BP LAST-BP) NIL))
	       (LET ((SYNTAX (WORD-SYNTAX (CHARMAP-CHAR))))
                 (SELECT SYNTAX
                    (WORD-ALPHABETIC
                     (CHARMAP-RETURN (CHARMAP-BP-BEFORE))))))))
          (T
           (LET ((FIRST-BP (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
             (COND ((< TIMES -1)
                    (SETQ BP (FORWARD-WORD BP (1+ TIMES) NIL BOUNDING-INTERVAL))
                    (COND ((NULL BP)
                           (THROW 'LOSSAGE (IF FIXUP-P (COPY-BP FIRST-BP) NIL))))))
	     (RCHARMAP (BP FIRST-BP (IF FIXUP-P (COPY-BP FIRST-BP) NIL))
	       (LET ((SYNTAX (WORD-SYNTAX (RCHARMAP-CHAR))))
                 (SELECT SYNTAX
                    (WORD-ALPHABETIC
                     (RCHARMAP-RETURN (RCHARMAP-BP-AFTER)))))))))))

(DEFUN FORWARD-DEFINITION (ORIGINAL-BP &OPTIONAL (TIMES 1) FIXUP-P (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* ORIGINAL-BP)))
  (LET ((BP ORIGINAL-BP))
    (COND ((ZEROP TIMES) (COPY-BP BP))
	  ((PLUSP TIMES)
	   (DO-NAMED LUPO
		     ((I 0 (1+ I)))
		     (( I TIMES)
		      BP)
	     (DO () (NIL)
	       (SETQ BP (BEG-LINE BP 1 NIL BOUNDING-INTERVAL))
	       (COND ((NULL BP)
		      (RETURN-FROM LUPO (IF FIXUP-P
					    (COPY-BP (INTERVAL-LAST-BP
						       BOUNDING-INTERVAL))
					    NIL)))
		     ((= (LIST-SYNTAX (BP-CHAR BP)) LIST-OPEN)
		      (RETURN NIL))))))
	  (T
	   (DO-NAMED LUPO
		     ((I 0 (1- I)))
		     (( I TIMES)
		      BP)
	     (DO ((FIRSTP T NIL)) (NIL)
	       (SETQ BP (BEG-LINE BP (IF (AND FIRSTP (NOT (BEG-LINE-P BP)))
					 0
					 -1) NIL BOUNDING-INTERVAL))
	       (COND ((NULL BP)
		      (RETURN-FROM LUPO (IF FIXUP-P
					    (COPY-BP (INTERVAL-FIRST-BP
						       BOUNDING-INTERVAL))
					    NIL)))
		     ((= (LIST-SYNTAX (BP-CHAR BP)) LIST-OPEN)
		      (RETURN NIL)))))))))

(DEFUN FORWARD-PAGE (BP &OPTIONAL (TIMES 1) FIXUP-P)
  (COND ((ZEROP TIMES) (COPY-BP BP))
	((PLUSP TIMES)
	 (LET ((STOP-LINE (BP-LINE (INTERVAL-LAST-BP *INTERVAL*)))
	       (FIRST-LINE (BP-LINE BP)))
	   (COND ((EQ FIRST-LINE STOP-LINE)
		  (AND FIXUP-P (COPY-BP (INTERVAL-LAST-BP *INTERVAL*))))
		 (T (DO ((LINE (LINE-NEXT-IN-BUFFER FIRST-LINE) (LINE-NEXT-IN-BUFFER LINE)))
			((EQ LINE STOP-LINE)
			 (COPY-BP (INTERVAL-LAST-BP *INTERVAL*)))
		      (COND ((AND ( (LINE-LENGTH LINE) 1)
				  (LOOP FOR CHAR IN *PAGE-DELIMITER-LIST*
					THEREIS (CHAR-EQUAL CHAR (AREF LINE 0))))
			     (AND ( (SETQ TIMES (1- TIMES)) 0)
				  (RETURN (CREATE-BP LINE 1))))))))))
	(T
	 (LET ((STOP-LINE (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)))
	       (FIRST-LINE (BP-LINE BP)))
	   (COND ((EQ FIRST-LINE STOP-LINE)
		  (AND FIXUP-P (COPY-BP (INTERVAL-FIRST-BP *INTERVAL*))))
		 (T (DO ((LINE (LINE-PREVIOUS-IN-BUFFER FIRST-LINE)
			       (LINE-PREVIOUS-IN-BUFFER LINE)))
			((EQ LINE STOP-LINE)
			 (AND FIXUP-P (COPY-BP (INTERVAL-FIRST-BP *INTERVAL*))))
		      (COND ((AND ( (LINE-LENGTH LINE) 1)
				  (LOOP FOR CHAR IN *PAGE-DELIMITER-LIST*
					THEREIS (CHAR-EQUAL CHAR (AREF LINE 0))))
			     (AND ( (SETQ TIMES (1+ TIMES)) 0)
				  (RETURN (CREATE-BP LINE 1))))))))))))

(DEFUN FORWARD-INTERVAL (BP &OPTIONAL (TIMES 1) FIXUP-P)
  BP FIXUP-P					;Never out of range
  (COPY-BP (IF (MINUSP TIMES)
	       (INTERVAL-FIRST-BP *INTERVAL*)
	       (INTERVAL-LAST-BP *INTERVAL*))))

(DEFUN FORWARD-PARAGRAPH (BP &OPTIONAL (TIMES 1) FIXUP-P
			  (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP))
			     &AUX BACKWARD-P
				  (FILL-PREFIX-P (PLUSP (STRING-LENGTH *FILL-PREFIX*)))
				  BLANK-P PREV-BLANK-P)
  (AND (MINUSP TIMES) (SETQ TIMES (- TIMES) BACKWARD-P T))
  (COND ((NOT BACKWARD-P)			;Move to the beginning of a line
	 (SETQ BP (BEG-LINE BP)))
	((NOT (BEG-LINE-P BP))
	 (SETQ BP (BEG-LINE BP 1 T)))
	(T
	 (LET ((PREV-BP (BEG-LINE BP -1)))
	   (AND PREV-BP (NOT (LINE-BLANK-P (BP-LINE PREV-BP)))
		(BP-LOOKING-AT-LIST PREV-BP *PAGE-DELIMITER-LIST*)
		(SETQ BP PREV-BP)))))
  (DO ((I 0 (1+ I)))
      ((OR (NULL BP) ( I TIMES)) BP)
    (SETQ BLANK-P T)
    (DO ((FIRST-P (COND ((AND BACKWARD-P (BP-= BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
			 (SETQ BP (BEG-LINE BP))
			 1)			;Count carriage return that wasn't there
			(T 0))
		  (1+ FIRST-P)))
	(NIL)
      (SETQ PREV-BLANK-P BLANK-P BLANK-P NIL)
      (AND (SETQ BLANK-P (BP-AT-PARAGRAPH-DELIMITER BP FILL-PREFIX-P))
	   (NOT PREV-BLANK-P)
	   (OR (> FIRST-P 1)
	       (NOT BACKWARD-P))
	   (RETURN))
      (LET ((NEXT-BP (BEG-LINE BP (IF BACKWARD-P -1 1) NIL BOUNDING-INTERVAL)))
	(UNLESS NEXT-BP
	  (SETQ BP (AND (> FIRST-P 0) (IF BACKWARD-P (INTERVAL-FIRST-BP BOUNDING-INTERVAL)
					  (INTERVAL-LAST-BP BOUNDING-INTERVAL))))
	  (UNLESS (NULL BP)
	    (RETURN-FROM FORWARD-PARAGRAPH BP))
	  (RETURN))
	(SETQ BP NEXT-BP))
      (COND ((AND BACKWARD-P BLANK-P))
	    (FILL-PREFIX-P
	     (OR (LOOKING-AT BP *FILL-PREFIX*) (RETURN)))
	    (T
	     (AND (OR (BP-LOOKING-AT-LIST BP *PARAGRAPH-DELIMITER-LIST*)
		      (BP-LOOKING-AT-LIST BP *PAGE-DELIMITER-LIST*))
		  (NOT (BP-LOOKING-AT-LIST BP *TEXT-JUSTIFIER-ESCAPE-LIST*))
		  (RETURN))))))
  (AND BP BACKWARD-P (NOT (LINE-BLANK-P (BP-LINE BP)))
       (IF FILL-PREFIX-P 
	   (NOT (LOOKING-AT BP *FILL-PREFIX*))
	   (OR (NOT (BP-LOOKING-AT-LIST BP *PARAGRAPH-DELIMITER-LIST*))
	       (BP-LOOKING-AT-LIST BP *TEXT-JUSTIFIER-ESCAPE-LIST*)))
       (SETQ BP (BEG-LINE BP 1 T)))
  (OR BP
      (AND FIXUP-P
	   (COPY-BP (IF BACKWARD-P (INTERVAL-FIRST-BP BOUNDING-INTERVAL)
			(INTERVAL-LAST-BP BOUNDING-INTERVAL))))))

(DEFUN BP-AT-PARAGRAPH-DELIMITER (BP &OPTIONAL FILL-PREFIX-P)
  (OR (LINE-BLANK-P (BP-LINE BP) T (BP-INDEX BP))
      (BP-= BP (INTERVAL-LAST-BP *INTERVAL*))
      (IF FILL-PREFIX-P
	  (NOT (LOOKING-AT BP *FILL-PREFIX*))
	  (AND (BP-LOOKING-AT-LIST BP *TEXT-JUSTIFIER-ESCAPE-LIST*)
	       (OR (BP-LOOKING-AT-LIST BP *PARAGRAPH-DELIMITER-LIST*)
		   (BP-LOOKING-AT-LIST BP *PAGE-DELIMITER-LIST*))))))

(DEFUN FORWARD-OVER-BLANK-OR-TEXT-JUSTIFIER-LINES (BP &OPTIONAL
						   (BOUNDING-INTERVAL
						     (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (DO ((BP BP (BEG-LINE BP 1)))
      ((OR (NULL BP) (NOT (BP-AT-PARAGRAPH-DELIMITER BP)))
       (OR BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))))

(DEFUN FORWARD-ATOM (BP &OPTIONAL (TIMES 1) FIXUP-P
		     (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (ATOM-WORD-SYNTAX-BIND
    (FORWARD-WORD BP TIMES FIXUP-P BOUNDING-INTERVAL)))

(DEFUN FORWARD-SENTENCE (BP &OPTIONAL (TIMES 1) FIXUP-P
			 (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (COND ((ZEROP TIMES) (COPY-BP BP))
	((PLUSP TIMES)
	 (DO ((LAST-BP (INTERVAL-LAST-BP BOUNDING-INTERVAL))
	      (TIME 0 (1+ TIME))
	      (STATE NIL)
	      (FIRST-P T NIL)
	      (CH))
	     ((OR ( TIME TIMES) (NULL BP)) BP)
	   (SETQ BP (FORWARD-OVER (IF FIRST-P '(#\CR) *WHITESPACE-CHARS*) BP))
	   (SETQ BP (CHARMAP (BP LAST-BP (AND (OR STATE FIXUP-P) (COPY-BP LAST-BP)))
		      (SETQ CH (CHARMAP-CHAR))
		      (AND STATE		;If special character last time...
			   (COND ((OR (CHAR= CH #\CR)	;"<cr><cr>" ".<cr>" or ". <cr>" win
				      (AND (EQ STATE 'SP) (CHAR-EQUAL CH #\SP)))   ;".  " wins
				  (CHARMAP-RETURN (COND ((EQ STATE 'DOT)	;".<cr>"
							 (CHARMAP-BP-BEFORE))
							(T (FORWARD-CHAR (CHARMAP-BP-BEFORE)
									 -1)))))
				 ((AND (EQ STATE 'DOT) (CHAR-EQUAL CH #\SP))	;". "
				  (SETQ STATE 'SP))
				 ((AND (EQ STATE 'DOT) (MEM #'CHAR-EQUAL CH
							    '(#/" #/' #/) #/]))))
				 (T (SETQ STATE NIL))))
		      (COND ((CHAR= CH #\CR)	;If at end of line, check for another
			     (SETQ STATE 'CR))	;<cr> next time
			    ((MEM #'CHAR-EQUAL CH '(#/. #/! #/?))
			     (SETQ STATE 'DOT)))))))
	(T
	 (LET* ((PARAGRAPH-BEG (FORWARD-PARAGRAPH BP -1 NIL))
		(START-BP (OR PARAGRAPH-BEG (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
		(FIXUP (IF FIXUP-P START-BP PARAGRAPH-BEG)))
	   (DO ((TIME 0 (1- TIME))
		(STATE NIL)
		(NFROBS)
		(CH))
	       (( TIME TIMES) (FORWARD-OVER *WHITESPACE-CHARS* (FORWARD-CHAR BP NFROBS)))
	     (SETQ BP (BACKWARD-OVER '(#\CR #\SP #/" #/' #/) #/]) BP)
		   STATE NIL			;how was this forgotten?
		   NFROBS 0)
	     (SETQ BP 
		   (RCHARMAP (BP START-BP FIXUP)
			(SETQ CH (RCHARMAP-CHAR))
			(WHEN (MEMQ STATE '(CR SPSP))
			  (DO NIL ((CHAR-NOT-EQUAL CH #\SP))
			    (RCHARMAP-DECREMENT FIXUP)
			    (WHEN (MINUSP INDEX)	;can happen on empty line 
			      (SETQ INDEX 0))		;preceded by, e.g., 3+ spaces
			    (SETQ CH (RCHARMAP-CHAR)))
			  (DO NIL ((NOT (MEM #'CHAR-EQUAL CH '(#/" #/' #/) #/]))))
			    (RCHARMAP-DECREMENT FIXUP)
			    (WHEN (MINUSP INDEX)	;can happen on empty line 
			      (SETQ INDEX 0))		;preceded by, e.g., "<cr>
			    (SETQ CH (RCHARMAP-CHAR)
				  NFROBS (1+ NFROBS)))
			  (AND (OR (MEM #'CHAR-EQUAL CH '(#/. #/! #/?))
				   (AND (CHAR= CH #\CR) (EQ STATE 'CR) (ZEROP NFROBS)))
			       (RCHARMAP-RETURN (RCHARMAP-BP-AFTER)))
			  (SETQ STATE NIL
				NFROBS 0))
			(COND ((EQ STATE 'SP)
			       (SETQ STATE (AND (CHAR-EQUAL CH #\SP) 'SPSP)))
			      ((CHAR-EQUAL CH #\SP)
			       (SETQ STATE 'SP))
			      ((CHAR-EQUAL CH #\CR)
			       (SETQ STATE 'CR)))))
	     (OR BP (RETURN NIL)))))))

;;; Not-so-standard motion functions.

;; Return an interval surrounding the DEFUN that BP is in, or NIL if it fails.
(DEFUN DEFINITION-INTERVAL (BP &OPTIONAL (TIMES 1) FIXUP-P (COMMENTS-P T) (TOP-BLANK-P NIL))
  (LET ((BOUNDING-INTERVAL (BP-ITEM-LIMIT-AGAINST-*INTERVAL* BP))
	(WHITESPACE-CHARS *WHITESPACE-CHARS*))
    (PROG (BP1 BP2 BP3 BP4 SBP)
	  1;; stop going up when you get to the top of the hard section.
0	  (COND ((NULL (SETQ BP1 (FORWARD-DEFINITION BP -1 NIL BOUNDING-INTERVAL)))
		 (SETQ BP1 (BEG-LINE BP 0))
		 (COND ((= (LIST-SYNTAX (BP-CHAR BP1)) LIST-OPEN)
			(GO BUFBEG1))
		       (T (GO BUFBEG)))))
	  (OR (SETQ BP2 (FORWARD-SEXP BP1 1 NIL 0 (NODE-LAST-BP BOUNDING-INTERVAL)))
	      (IF (NOT FIXUP-P) (RETURN NIL)
		  (SETQ BP2 (BEG-LINE (BACKWARD-OVER-COMMENT-LINES
					(FORWARD-DEFINITION
					  BP1 1 T
					  BOUNDING-INTERVAL)
					TOP-BLANK-P
					T
					NIL
					(NODE-FIRST-BP BOUNDING-INTERVAL))
				      -1))))
	  (OR (BP-< (END-LINE BP2) BP)
	      ;; We were in the middle of the defun.
	      (GO FOUND))
	  (SETQ BP BP1)
       BUFBEG
	  (COND ((NULL (SETQ BP1 (FORWARD-DEFINITION BP 1 NIL BOUNDING-INTERVAL)))
		 (AND BP2 (SETQ BP1 (FORWARD-DEFINITION BP2 -1 NIL BOUNDING-INTERVAL))
		      (GO FOUND))		;At end of buffer, take previous
		 (RETURN NIL)))
       BUFBEG1
	  (OR (SETQ BP2 (FORWARD-SEXP BP1)) (RETURN NIL))
       FOUND
	  ;; At this point, BP1 and BP2 surround a "defun".  Now we should grab any
	  ;; comment lines and intervening blank lines before the beginning, and the
	  ;; rest of the last line.
	  (AND (> TIMES 1)
	       (SETQ BP2 (FORWARD-SEXP BP2
				       (1- TIMES) T 0
				       (NODE-LAST-BP BOUNDING-INTERVAL))))
	  (SETQ SBP BP1)			;Save real starting line
       CONTIN
	  (AND COMMENTS-P (SETQ BP1 (BACKWARD-OVER-COMMENT-LINES
				      BP1
				      TOP-BLANK-P
				      NIL
				      NIL
				      (NODE-FIRST-BP BOUNDING-INTERVAL))))
	  (SETQ BP3 (FORWARD-OVER *BLANKS* BP2))
	  (AND BP3 (OR (= (LIST-SYNTAX (BP-CHAR BP3)) LIST-COMMENT)
		       (CHAR= (BP-CHAR BP3) #\CR))	;was BP-CH-CHAR
	       (SETQ BP3 (SETQ BP2 (BEG-LINE BP2 1 T))))
	  ;; Now try to find any extra close-parens because of a LOCAL-DECLARE
	  (SETQ BP3 (FORWARD-OVER '(#/)) BP3))
	  (AND (NOT (BP-= BP2 BP3))
	       (SETQ BP4 (FORWARD-SEXP BP3 (- TIMES) NIL 0 (NODE-FIRST-BP
							     BOUNDING-INTERVAL)))
	       (BP-< BP4 BP1)
	       (SETQ BP1 BP4 BP2 BP3)
	       (GO CONTIN))
	  ;; Now try to find a package prefix or source conditional
	  (SETQ BP3 (BACKWARD-OVER WHITESPACE-CHARS BP1)
		BP4 (FORWARD-ATOM BP3 -1 T BOUNDING-INTERVAL))
	  (COND ((OR (AND (CHAR-EQUAL (BP-CHAR-BEFORE BP3) #/:) (BEG-LINE-P BP4))
		     (AND (LET ((BP5 (BEG-LINE BP4)))
			    (AND (CHAR-EQUAL (BP-CHAR BP5) #/#)
				 (IBP BP5)
				 (MEM #'CHAR-EQUAL (BP-CHAR BP5) '(#/+ #/-))
				 (IBP BP5)
				 (BP-= BP5 BP4)))))
		 (SETQ BP1 BP4)
		 (GO CONTIN)))
	  ;; Now try to find a patch prefix
	  (UNLESS (EQ COMMENTS-P :NO-PATCH-PREFIX)
	    (WHEN (AND (SETQ BP4 (FORWARD-LINE BP3 -1 NIL BOUNDING-INTERVAL))
		       (SETQ BP4 (FORWARD-SEXP BP3 -1 NIL 0 BP4))
		       (ZEROP (BP-INDEX BP4))
		       (OR (STRING-EQUAL (BP-LINE BP4)
					 "(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES")
			   (STRING-EQUAL (BP-LINE BP4)
					 "(SCT:PATCH-SECTION-ATTRIBUTES"))
		       (SETQ BP4 (FORWARD-LINE BP4 -2))
		       (CL:DOTIMES (I 3 NIL)
			 (WHEN (OR (STRING-EQUAL (BP-LINE BP4)
						 "(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)")
				   (STRING-EQUAL (BP-LINE BP4)
						 "(SCT:BEGIN-PATCH-SECTION)"))
			   (RETURN T))
			 (SETQ BP4 (FORWARD-LINE BP4 -1))))
	      ;; Don't (GO CONTIN), there can't be anything relevant before this
	      (SETQ BP1 BP4)))
	  (RETURN (VALUES (CREATE-INTERVAL BP1 BP2) SBP)))))


;; Decide how much text before a defun to include with the defun when marking the defun.
;; It moves over all comment lines and intervening blank lines,
;; and also over one blank line before them (unless TOP-BLANK-P is NIL).
;; It includes all blank lines at the beginning of the interval so
;; as not to leave them orphaned.
;; If there is List structure before the defun that encloses it, e.g.
;; a LOCAL-DECLARE, it gets included unless UP-P is NIL.
;;--- this needs more VC attention.
(DEFMETHOD (:BACKWARD-OVER-COMMENT-LINES MAJOR-MODE :DEFAULT)
	   (BP &OPTIONAL (TOP-BLANK-P T) (UP-P T)
	       (STOP-AT-<PAGE>-P T)
	       (STOP-AT-THIS-BP NIL)
	       &AUX (LAST-GOOD-LINE (BP-LINE BP))
		    ;; Don't use *INTERVAL* for this!
		    (FIRST-GOOD-LINE (OR (AND STOP-AT-THIS-BP (BP-LINE STOP-AT-THIS-BP))
					 (BP-LINE (INTERVAL-FIRST-BP
						    (BP-LIMIT-AGAINST-*INTERVAL* BP))))))
  (DO ((LINE (LINE-PREVIOUS (BP-LINE BP)) (LINE-PREVIOUS LINE)))
      ((NULL LINE)
       (SETQ LAST-GOOD-LINE FIRST-GOOD-LINE))
    (WHEN (AND STOP-AT-<PAGE>-P (> (STRING-LENGTH LINE) 0)
	       (CL:CHAR-EQUAL (CL:CHAR LINE 0) #\Page))
      (SETQ LAST-GOOD-LINE LINE)		;include the Page in the region.
      (RETURN))
    (SELECTQ (MULTIPLE-VALUE-BIND (TYPE IDX)	
		 (LINE-TYPE LINE)
	       (AND (EQ TYPE ':COMMENT)
		    (NOT (ZEROP IDX))
		    (SETQ TYPE ':INDENTED-COMMENT))
	       TYPE)
	(:BLANK)
	(:COMMENT (SETQ LAST-GOOD-LINE LINE))
	((:NORMAL :ATOM)
	 ;; Always include #+/#- lines with the definition
	 (IF (OR (AND UP-P (OR (LINE-OPENS-PARENS LINE)
			       (LINE-STARTS-PACKAGE-PREFIX-OR-CONDITIONAL LINE)))
		 (AND (NOT UP-P) (LINE-STARTS-PACKAGE-PREFIX-OR-CONDITIONAL LINE)))
	     (SETQ LAST-GOOD-LINE LINE)
	     (RETURN)))
        (OTHERWISE (RETURN))))
  (COND ((EQ LAST-GOOD-LINE FIRST-GOOD-LINE))
	((NULL (LINE-PREVIOUS LAST-GOOD-LINE)))
	((AND TOP-BLANK-P
	      (MEMQ (LINE-TYPE (LINE-PREVIOUS LAST-GOOD-LINE))
		    ':(BLANK FORM)))
	 (SETQ LAST-GOOD-LINE (LINE-PREVIOUS LAST-GOOD-LINE))))
  (IF (AND (EQ (LINE-TYPE LAST-GOOD-LINE) ':FORM)
	   (NOT (CHAR-EQUAL (CL:CHAR LAST-GOOD-LINE 0) #\Page))
	   (NEQ TOP-BLANK-P ':FORM-AS-BLANK))
      (END-OF-LINE LAST-GOOD-LINE)
      (BEG-OF-LINE LAST-GOOD-LINE)))

(DEFUN BACKWARD-OVER-COMMENT-LINES (BP &OPTIONAL (TOP-BLANK-P T) (UP-P T)
				    (STOP-AT-<PAGE>-P NIL)
				    (STOP-AT-BP NIL))
  (LET ((MAJOR-MODE (SEND *INTERVAL* :MAJOR-MODE)))
    (SEND MAJOR-MODE
	  ':BACKWARD-OVER-COMMENT-LINES BP TOP-BLANK-P UP-P STOP-AT-<PAGE>-P STOP-AT-BP)))

;; Return a bp to the front of the first non-blank non-comment line after BP.
;; If there is non-blank non-comment data following BP on the same line
;; we return a pointer to that.
;; This is good for finding the next interesting piece of lisp code after a point.
(DEFUN SKIP-OVER-BLANK-LINES-AND-COMMENTS (BP &OPTIONAL FIXUP-P
					   (BOUNDING-INTERVAL
					     (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (SETQ BP (FORWARD-OVER *BLANKS* BP))
  (AND BP (OR (CHAR-EQUAL (BP-CHAR BP) #/;)
	      (CHAR-EQUAL (BP-CHAR BP) #\CR))
       (DO () (NIL)
	 (SETQ BP (BEG-LINE BP 1))
	 (OR BP (RETURN NIL))
	 (SELECTQ (LINE-TYPE (BP-LINE BP))
	   ((:BLANK :COMMENT :FORM))
	   (OTHERWISE (RETURN BP)))))
  (OR BP (AND FIXUP-P (COPY-BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))))

(DEFUN FORWARD-OVER-BLANK-OR-PAGE-LINES (BP &OPTIONAL FIXUP-P
					 (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (DO () (NIL)
    (SELECTQ (LINE-TYPE (BP-LINE BP))
      ((:BLANK :FORM))
      (OTHERWISE (RETURN BP)))
    (SETQ BP (BEG-LINE BP 1))
    (OR BP (RETURN NIL)))
  (OR BP (AND FIXUP-P (COPY-BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))))

(DEFUN BEG-LINE (BP &OPTIONAL (TIMES 0) FIXUP-P
		 (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (COND (( TIMES 0)
	 (DO ((LINE (BP-LINE BP) (OR (LINE-NEXT-IN-BUFFER LINE) LAST-LINE))
	      (I TIMES (1- I))
	      (LAST-LINE (BP-LINE (INTERVAL-LAST-BP BOUNDING-INTERVAL))))
	     (NIL) 
	   (COND ((EQ LINE LAST-LINE)
		  (RETURN (IF (OR ( I 0) FIXUP-P)
			      (CREATE-BP LINE (IF ( I 0) 0
						  (BP-INDEX (INTERVAL-LAST-BP BOUNDING-INTERVAL))))
			      NIL)))
		 (( I 0)
		  (RETURN (CREATE-BP LINE 0))))))
	(T
	 (DO ((LINE (BP-LINE BP) (OR (LINE-PREVIOUS-IN-BUFFER LINE) FIRST-LINE))
	      (I TIMES (1+ I))
	      (FIRST-LINE (BP-LINE (INTERVAL-FIRST-BP BOUNDING-INTERVAL))))
	     (NIL)
	   (COND ((EQ LINE FIRST-LINE)
		  (RETURN (IF (OR ( I 0) FIXUP-P)
			      (CREATE-BP LINE (BP-INDEX (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
			      NIL)))
		 (( I 0)
		  (RETURN (CREATE-BP LINE 0)))))))) 


(DEFUN END-LINE (BP &OPTIONAL (TIMES 0) FIXUP-P
		 (BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
  (COND (( TIMES 0)
	 (DO ((LINE (BP-LINE BP) (OR (LINE-NEXT-IN-BUFFER LINE) LAST-LINE))
	      (I TIMES (1- I))
	      (LAST-LINE (BP-LINE (INTERVAL-LAST-BP BOUNDING-INTERVAL))))
	     (NIL)
	   (COND ((EQ LINE LAST-LINE)
		  (RETURN (IF (OR ( I 0) FIXUP-P)
			      (CREATE-BP LINE (BP-INDEX (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
			      NIL)))
		 (( I 0)
		  (RETURN (CREATE-BP LINE (LINE-LENGTH LINE)))))))
	(T
	 (DO ((LINE (BP-LINE BP) (OR (LINE-PREVIOUS-IN-BUFFER LINE) FIRST-LINE))
	      (I TIMES (1+ I))
	      (FIRST-LINE (BP-LINE (INTERVAL-FIRST-BP BOUNDING-INTERVAL))))
	     (NIL)
	   (COND ((EQ LINE FIRST-LINE)
		  (RETURN (IF (OR ( I 0) FIXUP-P)
			      (CREATE-BP LINE (IF ( I 0) (LINE-LENGTH LINE)
						  (BP-INDEX (INTERVAL-FIRST-BP BOUNDING-INTERVAL))))
			      NIL)))
		 (( I 0)
		  (RETURN (CREATE-BP LINE (LINE-LENGTH LINE))))))))) 

(DEFUN FORWARD-OVER (LIST BP
		     &OPTIONAL (LIMIT-BP (NODE-LAST-BP (BP-LIMIT-AGAINST-*INTERVAL* BP))))
  (CHARMAP (BP LIMIT-BP (CHARMAP-BP-BEFORE))
    (IF (NOT (MEM #'CHAR-EQUAL (CHARMAP-CHAR) LIST))
	(CHARMAP-RETURN (CHARMAP-BP-BEFORE)))))

(DEFUN BACKWARD-OVER (LIST BP
		     &OPTIONAL (LIMIT-BP (NODE-FIRST-BP (BP-LIMIT-AGAINST-*INTERVAL* BP))))
  (RCHARMAP (BP LIMIT-BP (RCHARMAP-BP-AFTER))
    (IF (NOT (MEM #'CHAR-EQUAL (RCHARMAP-CHAR) LIST))
	(RCHARMAP-RETURN (RCHARMAP-BP-AFTER)))))

(DEFUN DELETE-OVER (LIST BP)
  (LET ((OVER (FORWARD-OVER LIST BP)))
    (IF (BP-= BP OVER) BP
	(DELETE-INTERVAL BP OVER T))))

(DEFUN DELETE-BACKWARD-OVER (LIST BP)
  (DELETE-INTERVAL (BACKWARD-OVER LIST BP) BP T))

(DEFUN DELETE-AROUND (LIST BP)
  (DELETE-INTERVAL (BACKWARD-OVER LIST BP) (FORWARD-OVER LIST BP) T))

;;; Make this a variable just in case someone wants to modify it
(DEFVAR *MATCHING-DELIMITER-LIST*
	'((#/( #/) FORWARD-SEXP) (#/" #/" FORWARD-WORD) (#/[ #/] FORWARD-SEXP)
	  (#/{ #/} FORWARD-SEXP) (#/< #/> FORWARD-WORD) (#/* #/* FORWARD-SEXP)
	  (#/ #/ FORWARD-WORD) (#/| #/| FORWARD-SEXP)))

(DEFUN FORWARD-OVER-MATCHING-DELIMITERS (BP &OPTIONAL (TIMES 1) FIXUP-P (LEVEL 0) OPEN CLOSE)
  (LET ((BOUNDING-INTERVAL (BP-LIMIT-AGAINST-*INTERVAL* BP)))
    (COND ((ZEROP TIMES) (COPY-BP BP))
	  ((PLUSP TIMES)
	   (LET ((TIME 0)
		 (LAST-BP (INTERVAL-LAST-BP BOUNDING-INTERVAL)))
	     (IGNORE TIME)
	     (CHARMAP (BP LAST-BP (IF FIXUP-P (COPY-BP LAST-BP) NIL))
	       (LET ((CHAR (CHARMAP-CHAR)))
		 (COND ((NULL OPEN)
			(DO L *MATCHING-DELIMITER-LIST* (CDR L) (NULL L)
			    (COND ((CHAR-EQUAL CHAR (CAAR L))
				   (SETQ OPEN CHAR
					 CLOSE (CADAR L)
					 LEVEL 1)
				   (RETURN)))))
		       ((CHAR-EQUAL CHAR CLOSE)
			(AND ( (SETQ LEVEL (1- LEVEL)) 0)
			     ( (SETQ TIME (1+ TIME)) TIMES)
			     (CHARMAP-RETURN (CHARMAP-BP-AFTER))))
		       ((CHAR-EQUAL CHAR OPEN)
			(SETQ LEVEL (1+ LEVEL))))))))
	  (T
	   (LET ((TIME 0)
		 (FIRST-BP (INTERVAL-FIRST-BP BOUNDING-INTERVAL)))
	     (IGNORE TIME)
	     (RCHARMAP (BP FIRST-BP (IF FIXUP-P (COPY-BP FIRST-BP) NIL))
	       (LET ((CHAR (RCHARMAP-CHAR)))
		 (COND ((NULL OPEN)
			(DO L *MATCHING-DELIMITER-LIST* (CDR L) (NULL L)
			    (COND ((CHAR-EQUAL CHAR (CADAR L))
				   (SETQ CLOSE CHAR
					 OPEN (CAAR L)
					 LEVEL -1)
				   (RETURN)))))
		       ((CHAR-EQUAL CHAR OPEN)
			(AND ( (SETQ LEVEL (1+ LEVEL)) 0)
			     ( (SETQ TIME (1- TIMES)) TIMES)
			     (RCHARMAP-RETURN (RCHARMAP-BP-BEFORE))))
		       ((CHAR-EQUAL CHAR CLOSE)
			(SETQ LEVEL (1- LEVEL)))))))))))
