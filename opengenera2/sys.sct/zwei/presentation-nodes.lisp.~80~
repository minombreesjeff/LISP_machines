;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor basic-presentation-node
	(start-bp
	 end-bp
	 (tick *tick*))
	(dw:presentation)
  :initable-instance-variables
  :writable-instance-variables
  (:conc-name presentation-node-))

dw::
(defmethod (presentation-present-self zwei:basic-presentation-node)
	   (stream &optional verbose)
  (when verbose
    (format stream "Zwei text "))
  (write-char #/" stream)
  (with-character-size (:smaller stream)
    (let* ((string zwei:(bp-line start-bp))
	   (length (fill-pointer string)))
      (let ((start-index zwei:(bp-index start-bp))
	    (end-index zwei:(bp-index end-bp)))
	(when (> start-index 5)
	  (write-string "..." stream))
	(write-string string stream :start (max 0 (- start-index 5)) :end start-index)
	(when (< start-index length)
	  (with-character-face (:bold stream)
	    (write-string string stream :start start-index :end end-index))
	  (when end-index
	    (write-string string stream
			  :start end-index :end (min (+ end-index 5) length))
	    (when (< (+ end-index 5) length)
	      (write-string "..." stream))))))
		       (write-char #/" stream)))

(defflavor presentation-node
	((touched nil))			;this node and its inferiors have been traversed
	(basic-presentation-node)
  :initable-instance-variables
  :writable-instance-variables)

(defmethod (dw::presentation-shares-superiors-boxes basic-presentation-node) (super)
  (dw::presentation-visibly-equal self super))

(defmethod (dw::presentation-visibly-equal basic-presentation-node) (other-node)
  (and (bp-= start-bp (presentation-node-start-bp other-node))
       (bp-= end-bp (presentation-node-end-bp other-node))
       (eq (dw::presentation-anonymous-p self)
	   (dw::presentation-anonymous-p other-node))))

(defflavor raw-presentation-node
	()
	(basic-presentation-node)
  :initable-instance-variables
  :writable-instance-variables)

(defmethod (dw::presentation-anonymous-p raw-presentation-node) () t)

(defmethod (clear-presentation-superior raw-presentation-node) ()
  (variable-makunbound dw::superior))

(defmethod (dw::presentation-superior raw-presentation-node) ()
  (if (variable-boundp dw::superior)
      dw::superior
    (let ((computed nil))
      (catch 'node-too-expensive
	(setq computed (bp-presentation-node dw::object))
	(setq dw::superior computed))
      computed)))

;;; presentation type definitions of zwei:bp moved to sys:zwei;style

(defsubst line-raw-presentation-nodes (line)
  (cl:getf (line-contents-plist line) 'raw-presentation-nodes))

;; Must use LINE-CONTENTS-PLIST.  Even though modification doesn't
;; hurt here, COPY-LINE copies the LINE-PLIST too.
(defun bp-raw-presentation-node
       (bp &optional (buffer (interval-buffer (bp-top-level-node bp))))
  (let ((*interval* buffer)
	(line (bp-line bp))
	(index (bp-index bp)))
    (or (dolist (node (line-raw-presentation-nodes line))
	  (when (= (bp-index (dw::presentation-object node)) index)
	    ;; New lines may have gotten inserted after this one without clearing the cache.
	    (when (= index (line-length line))
	      (unless (line-next-in-buffer line)
		(return nil))
	      (move-bp (presentation-node-end-bp node) (line-next-in-buffer line) 0))
	    (return node)))
	(let ((next-bp (forward-char bp 1 nil)))
	  (when next-bp
	    (let ((node (make-instance 'raw-presentation-node
				       :object bp :type 'bp
				       :start-bp bp :end-bp next-bp)))
	      (push node (line-raw-presentation-nodes line))
	      node))))))

;; Cache of previous answers.
(defsubst line-presentation-nodes (line)
  (cl:getf (line-contents-plist line) 'presentation-nodes))

(defun set-line-interval-presentation-node (line start-index end-index node)
  (push (list start-index end-index node)
	(line-presentation-nodes line)))

(defun clear-line-interval-presentation-nodes (line start-index end-index)
  (setf (line-presentation-nodes line)
	(del-if (lambda (entry)
		  (destructuring-bind (start end nil) entry
		    (not (or (> start end-index)
			     (> end start-index)))))
		(line-presentation-nodes line))))

(defun clear-interval-presentation-nodes (start-bp &optional end-bp in-order-p)
  (get-interval start-bp end-bp in-order-p)
  (loop for line = (bp-line start-bp) then (line-next-in-buffer line)
	with end-line = (bp-line end-bp)
	as start-index = (bp-index start-bp) then 0
	as end-index = (if (eq line end-line) (bp-index end-bp) (line-length line))
	do (clear-line-interval-presentation-nodes line start-index end-index)
	until (eq line end-line)))

(defun clear-all-interval-presentation-nodes (start-bp &optional end-bp in-order-p)
  (get-interval start-bp end-bp in-order-p)
  ;; Note that this clears the nodes on the last line even if the index
  ;; for the last line is zero.  I don't know if that is the right thing.
  (loop for line = (bp-line start-bp) then (line-next-in-buffer line)
	with end-line = (bp-line end-bp)
	do (setf (line-presentation-nodes line) nil)
	   (setf (line-raw-presentation-nodes line) nil)
	until (eq line end-line)))

(defvar *check-for-obsolete-presentation-nodes* t)

(defun bp-presentation-node (bp &optional (buffer (interval-buffer (bp-top-level-node bp)))
			     (cache-only nil))
  (let ((line (bp-line bp))
	(index (bp-index bp)))
    (loop for (start-index end-index node) in (line-presentation-nodes line)
	  ;; Requires that narrowest interval be first
	  do (when (and ( index start-index)
			(< index end-index)
			node
			(let ((tick (presentation-node-tick node)))
			  (or (not *check-for-obsolete-presentation-nodes*)
			      (= tick *tick*)
			      (do ((line (bp-line (presentation-node-start-bp node))
					 (line-next-in-buffer line))
				   (end-line (bp-line (presentation-node-end-bp node))))
				  (nil)
				(when (or ;; If we fell off end, assume failure
					  (not line)
					  (let* ((line-tick (line-tick line))
						 (line-node (line-node line))
						 (node-tick
						   (if line-node (node-tick line-node))))
					    (or
					      ;; If tick is not a number, it might be
					      ;; ZWEI:DELETED.  (Note that :READ-ONLY ticks
					      ;; are supposed to occur in the node, not the
					      ;; line.)  Still, if any other non-number
					      ;; shows up here, let's be tolerant rather than
					      ;; going into the debugger.
					      (not (cl:integerp line-tick))
					      ;; If a line in node has changed, distrust cache
					      (> line-tick tick)
					      ;; This test is anded because we've already
					      ;; passed the line test, and this is just a
					      ;; double check.  It mostly checks for deleted
					      ;; lines, which wouldn't show up on line tests.
					      (and (cl:integerp node-tick)
						   (> node-tick tick)))))
				  (return nil))
				(when (eq line end-line)
				  (setf (presentation-node-tick node) *tick*)
				  (return t))))))
	       (return-from bp-presentation-node node)))
    (unless cache-only
      (let ((node (let ((*mode-list-syntax-table* *list-syntax-table*))
		    ;;--- It would be nice to special-case the situation
		    ;;--- where *INTERVAL* is the mini-buffer and the mouse is
		    ;;--- pointing into the window in which the mini-buffer
		    ;;--- was called from, because in that situation, the
		    ;;--- context of *INTERVAL* is the same as the context
		    ;;--- for BUFFER.
		    (if (and (variable-boundp *interval*)
			     (eq buffer *interval*))
			(send-if-handles buffer :bp-presentation-node bp)
		      ;; Buffer is not current, switch into proper context
		      (let ((*interval* buffer)
			    ;; Don't print any standard-value warnings when
			    ;; the user is just waving his mouse around
			    (error-output 'sys:null-stream))
			(with-evaluation-context-for-buffer (buffer)
			  (send-if-handles buffer :bp-presentation-node bp)))))))
	(unless (loop for (start-index end-index other-node) in (line-presentation-nodes line)
		      do (when (and ( index start-index)
				    (< index end-index))
			   (return (eq node other-node))))
	  (set-line-interval-presentation-node line index (1+ index) node))
	node))))

(defun add-presentation-node (object type start-bp end-bp superior-node
			      &rest other-options)
  (let ((node (lexpr-funcall #'make-instance 'presentation-node
			     :object object :type type :superior superior-node
			     :start-bp start-bp :end-bp end-bp
			     other-options)))
    (when (and start-bp end-bp)
      (let ((start-line (bp-line start-bp))
	    (end-line (bp-line end-bp)))
	(loop for line = start-line then (line-next-in-buffer line)
	      while line			;+++ Kludge to keep from erring out.
	      do (let ((start-index (if (eq line start-line) (bp-index start-bp) 0))
		       (end-index (if (eq line end-line)
				      (bp-index end-bp) (line-length line))))
		   (set-line-interval-presentation-node line start-index end-index node))
	      until (eq line end-line))))
    node))

(defmethod (:bp-presentation-node top-level-node) (bp)
  (send-if-handles (send self :major-mode) :bp-presentation-node bp self))

(defmethod (:presentation-to-pc-translator major-mode :default) ()
  nil)

(defmethod (:bp-presentation-node major-mode :default) (&rest args)
  (let ((other (major-mode-from-keyword *default-language-mode*)))
    (unless (eq self other)
      (lexpr-send-if-handles other :bp-presentation-node args))))

(defmethod (:bp-presentation-node dired-buffer) (bp)
  (let* ((line (bp-line bp))
	 (line-pathname (get (locf (line-plist line)) :pathname)))
    (when line-pathname
      (add-presentation-node line-pathname (cl:type-of line-pathname)
			     (beg-of-line line) (end-of-line line) nil))))

(defmethod (:presentation-to-pc-translator lisp-syntax-mixin) ()
  #'dbg:function-and-pc-from-presentation-node)

(defmethod (:bp-presentation-node lisp-syntax-mixin) (bp buffer)
  (block found-from-compilation
    (let ((node (bp-node bp)))
      (when (typep node 'section-node)
	(let ((fspec (send node :function-spec))
	      (type (send node :definition-type)))
	  (when (and (eq type 'defun) (fdefinedp fspec)
		     ( (node-tick node) (section-node-compile-tick node)))
	    (let* ((f (or (si:valid-function-definition fspec) fspec))
		   ;; We might be able to get this info from the CCA of
		   ;; the compiled-function (if there is any) without doing
		   ;; any uncompression of the debug-info.
		   (correspondences
		     (second (si:debugging-info-user-entry f ':read-correspondences)))
		   (top-form
		     (second (si:debugging-info-user-entry f ':interpreted-form))))
	      (when (and correspondences top-form)
		(clear-interval-presentation-nodes node)
		(add-lisp-presentation-nodes top-form correspondences t)
		(return-from found-from-compilation)))))))
    (flet ((maybe-recompute-nodes (start-bp end-bp)
	     (if (and dw::*skip-expensive-presentation-computations*
		      (neq (bp-line start-bp) (bp-line end-bp)))
		 ;; If need to parse more than a line of lisp, skip it unless really
		 ;; necessary.  [Could punt all lists or try to guess length...]
		 (throw 'node-too-expensive nil)
	       (recompute-lisp-presentation-nodes start-bp end-bp t))))
      (selector (list-syntax (bp-char bp)) =
	(list-delimiter )
	(list-open
	  (let ((close (forward-sexp bp)))
	    (when close
	      (maybe-recompute-nodes bp close))))
	(list-close
	  (let* ((close (forward-char bp 1))
		 (open (forward-sexp close -1)))
	    (when open
	      (maybe-recompute-nodes open close))))
	(otherwise
	  (let* ((line (bp-line bp))
		 (index (bp-index bp))
		 (start-index (do ((i index (1- i)))
				  ((cond (( word-alphabetic
					     (atom-word-syntax (aref line i)))
					  (incf i)
					  t)
					 ((zerop i) t)
					 (t nil))
				   i))))
	    (condition-case (form end-index)
		 (let ((si:*suppress-read-eval* t))
		   (read-from-string line 'si:no-eof-option start-index nil t))
	       (error )
	       (:no-error
		 (add-presentation-node form 'sys:code-fragment
					(create-bp line start-index)
					(create-bp line end-index)
					nil))))))))
  (bp-presentation-node bp buffer t))

(defun recompute-lisp-presentation-nodes (start-bp &optional end-bp in-order-p)
  (get-interval start-bp end-bp in-order-p)
  (clear-interval-presentation-nodes start-bp end-bp t)
  (block not-if-error
    (multiple-value-bind (top-form correspondences)
	(let ((si:xr-correspondences nil)
	      (si:xr-maintain-correspondence t)
	      (si:*suppress-read-eval* t))
	  (condition-case ()
	       (values (using-resource (stream interval-streams start-bp end-bp t)
			 (read stream))
		       si:xr-correspondences)
	     (error (return-from not-if-error nil))))
      (add-lisp-presentation-nodes top-form correspondences (> (length correspondences) 20)))))

;;; presentation type definition of sys:code-fragment moved to sys:zwei;comc.

(defun add-lisp-presentation-nodes (top-form correspondences use-table)
  (if use-table
      (using-resource (list-table si:vanilla-hash-table)
	(using-resource (atom-table si:vanilla-hash-table)
	  (compiler:build-form-correspondence-tables correspondences list-table atom-table)
	  (add-lisp-presentation-nodes-1 top-form correspondences list-table atom-table)))
    (add-lisp-presentation-nodes-1 top-form correspondences nil nil)))

(defun add-lisp-presentation-nodes-1 (top-form correspondences list-table atom-table)
  (labels ((add-parse-node (expression locator superior-node)
	     (multiple-value-bind (start-bp end-bp)
		 (if list-table
		     (compiler:find-form-in-correspondences-tables expression locator
								   list-table atom-table)
		   (compiler:find-form-in-correspondences expression correspondences
							  locator))
	       ;; Total crock.  There isn't a reasonable interface for
	       ;; the ' reader macro to add to the correspondence data
	       ;; structure.  Only really fixed by incremental lisp
	       ;; parsing I guess.
	       (when (and (null start-bp) superior-node)
		 (let ((superior-start-bp (presentation-node-start-bp superior-node))
		       (superior-expression (dw:presentation-object superior-node)))
		   (when (and (not (null superior-start-bp))
			      (listp superior-expression)
			      (memq (first superior-expression) '(quote function))
			      (= (length superior-expression) 2)
			      (eq locator (cdr superior-expression)))
		     (let ((look-for (selectq (first superior-expression)
				       (quote "'")
				       (function "#'"))))
		       (when (looking-at superior-start-bp look-for)
			 (setq start-bp (forward-char superior-start-bp
						      (string-length look-for))
			       end-bp (presentation-node-end-bp superior-node)))))))
	       (let* ((node (and start-bp end-bp
				 (add-presentation-node expression 'sys:code-fragment
							start-bp end-bp superior-node
							:location (and locator
								       (locf (car locator))))))
		      (inferiors (when (listp expression)
				   (loop for list = expression then (cdr list)
					 until (atom list)
					 as an-inf = (add-parse-node (first list) list node)
					 when an-inf
					   collect an-inf))))
		 (when (and node inferiors)
		   (setf (dw:presentation-inferiors node) inferiors))
		 node))))
    (add-parse-node top-form nil nil)))


;; This has to know a whole lot about redisplay, huh?  Also probably real slow.
(defun interval-highlighting-boxes (window start-bp &optional end-bp in-order-p)
  (get-interval start-bp end-bp in-order-p)
  (let* ((sheet (window-sheet window))
	 (vsp (window-vsp window))
	 (start-line (bp-line start-bp))
	 (start-index (bp-index start-bp))
	 (end-line (bp-line end-bp))
	 (end-index (bp-index end-bp)))
    (loop for pline below (window-n-plines window)
	  with state = 'no
	  as box = (let ((line (pline-line window pline)))
		     (when (null line)
		       (loop-finish))		;Is that right?
		     (let* ((pline-from-index (pline-from-index window pline))
			    (from-index (if (eq state 'yes)
					    pline-from-index
					  (when (and (eq line start-line)
						     ( start-index pline-from-index)
						     (< start-index
							(pline-to-index window pline)))
					    (setq state 'yes)
					    start-index))))
		       (when from-index
			 (let* ((pline-to-index (pline-to-index window pline))
				(to-index pline-to-index))
			   (when (eq line end-line)
			     (when ( end-index to-index)
			       (setq state 'done)
			       (setq to-index end-index)))
			   (let* ((top (pline-y window pline))
				  (line-height (pline-height window pline))
				  (bottom (+ top line-height vsp))
				  (left (line-displayed-size sheet line pline-from-index
							     from-index))
				  (left-adjust (tv:sheet-left-margin-size sheet))
				  (top-adjust (tv:sheet-top-margin-size sheet)))
			     (multiple-value-bind (right height baseline)
				 (line-displayed-size sheet line from-index
						      (min to-index (line-length line)) left)
			       (let ((line-baseline (pline-baseline window pline)))
				 (when (eq line start-line)
				   ;; If this is the topmost line, pull down the top.
				   (incf top (- line-baseline baseline)))
				 (when (eq state 'done)
				   ;; Same treatment for bottom
				   (decf bottom (- (- line-height line-baseline)
						   (- height baseline)))))
			       ;; Avoid an ugly box "highlighting a return".
			       (when (and (= from-index (line-length line))
					  (eq (line-next-in-buffer line) end-line)
					  (zerop end-index))
				 (setq right (+ left (tv:sheet-char-width sheet)))
				 (setq state 'done))
			       (list (+ left left-adjust) (+ top top-adjust)
				     (+ right left-adjust) (+ bottom top-adjust))))))))
	  when box collect box
	  until (eq state 'done))))

(defmethod (dw::presentation-mouse-sensitive-boxes basic-presentation-node)
	   (&optional (sheet (window-sheet *window*)))
  (when (and start-bp end-bp)
    (let ((boxes (interval-highlighting-boxes (send sheet :zwei-window) start-bp end-bp t)))
      (when (= (length boxes) 1)
	(decf (fourth (first boxes)) (send sheet :vsp)))
      boxes)))

;; Output the interval turning presentation nodes (gotten from parsing) into presentations.
(defun output-interval-with-presentation-nodes-sensitivity
       (start-bp &optional end-bp in-order-p buffer
	&key (highlighted-presentations nil)
	     (highlighting-mode :bold))		;either :UNDERLINE or a character face
  (get-interval start-bp end-bp in-order-p)
  (when (null buffer)
    (setq buffer (interval-buffer (bp-top-level-node start-bp))))
  (cond ((eq highlighting-mode :underline))
	((keywordp highlighting-mode)
	 (setq highlighting-mode (si:parse-character-style `(nil ,highlighting-mode nil))))
	(t
	 (setq highlighting-mode (si:parse-character-style highlighting-mode))))
  (sys:with-stack-array (presentation-nodes 1000 :fill-pointer 0)
    ;; Collect all of the presentation nodes for this interval
    (map-over-interval-presentation-nodes
      #'(lambda (presentation-node)
	  (when (and (presentation-node-start-bp presentation-node)	;Only if well formed.
		     (presentation-node-end-bp presentation-node))
	    (array-push-extend presentation-nodes presentation-node)))
      start-bp end-bp t buffer)
    (macrolet
      ((bp-= (bp1 bp2)
	 `(and (eq (bp-line ,bp1) (bp-line ,bp2))
	       (= (bp-index ,bp1) (bp-index ,bp2))))
       (line-table-bp-< (bp1 bp2 line-table)
	 `(let ((line1 (bp-line ,bp1))
		(line2 (bp-line ,bp2)))
	    (cond ((eq line1 line2)
		   (< (bp-index ,bp1) (bp-index ,bp2)))
		  (t (< (cl:gethash line1 line-table 19999)
			(cl:gethash line2 line-table 19999)))))))
      (tv:noting-progress ("Sorting source locator correspondences")
	(using-resource (line-table si:vanilla-hash-table)
	  (loop for line = (bp-line start-bp) then (line-next line)
		for line-no from 0
		with end-line = (bp-line end-bp)
		do (setf (gethash line line-table) line-no)
		until (eq line end-line))
	  (si:with-ephemeral-migration-mode :collect
	    ;; Sort the presentation nodes in BP order
	    (sort presentation-nodes
		  #'(lambda (presentation-node-1 presentation-node-2)
		      (if (bp-= (presentation-node-start-bp presentation-node-1)
				(presentation-node-start-bp presentation-node-2))
			  (line-table-bp-< (presentation-node-end-bp presentation-node-1)
					   (presentation-node-end-bp presentation-node-2)
					   line-table)
			  (line-table-bp-< (presentation-node-start-bp presentation-node-1)
					   (presentation-node-start-bp presentation-node-2)
					   line-table))))))))
    (let ((interval-stream (zwei:open-interval-stream start-bp end-bp t))
	  (index 0))
      (labels
	((print-piece (start-bp end-bp)
	   (let ((this-bp start-bp))
	     (loop doing
	       (when ( index (fill-pointer presentation-nodes))
		 (print-interval this-bp end-bp)
		 (return))
	       (let ((next-bp (presentation-node-start-bp (aref presentation-nodes index))))
		 (unless (zwei:bp-< next-bp end-bp)
		   (print-interval this-bp end-bp)
		   (return))
		 (print-interval this-bp next-bp))
	       (setq this-bp (print-next))))
	   nil)
	 (print-next ()
	   (let ((presentation-node (aref presentation-nodes index)))
	     (incf index)
	     (if (not (mem #'dw:presentation-equal
			   presentation-node highlighted-presentations))
		 (print-presentation-node presentation-node)
	       (if (eq highlighting-mode :underline)
		   (scl:with-underlining ()
		     (print-presentation-node presentation-node))
		 (scl:with-character-style (highlighting-mode)
		   (print-presentation-node presentation-node))))
	     (presentation-node-end-bp presentation-node)))
	 (print-presentation-node (presentation-node)
	   (dw:with-output-as-presentation
	       (:object (dw::presentation-object presentation-node)
		:type	(dw::presentation-type presentation-node)
		:form	presentation-node)
	     (print-piece (presentation-node-start-bp presentation-node)
			  (presentation-node-end-bp presentation-node))))
	 (print-interval (start-bp end-bp)
	   (unless (zwei:bp-= start-bp end-bp)
	     (send interval-stream :set-interval start-bp end-bp t)
	     (stream-copy-until-eof interval-stream standard-output))))
	(print-piece start-bp end-bp)))))

(defun map-over-interval-presentation-nodes (function start-bp end-bp in-order-p buffer)
  (get-interval start-bp end-bp in-order-p)
  (labels ((map-internal (presentation-node)
	     (when (null (presentation-node-touched presentation-node))
	       ;; Only map and recurse if we have not touched this branch yet
	       (funcall function presentation-node)
	       (dolist (presentation-node (dw::presentation-inferiors presentation-node))
		 (map-internal presentation-node))
	       (setf (presentation-node-touched presentation-node) t))))
    (let ((*interval* buffer)			;Implicit argument
	  (*mode-list-syntax-table* *list-syntax-table*)	;Should come from mode
	  (start-line (bp-line start-bp))
	  (end-line (bp-line end-bp)))
      ;; First be sure that all the presentation nodes are built, and
      ;; claim that none of the top-level ones have been touched yet
      (loop as line = start-line then (line-next-in-buffer line)
	    do (bp-presentation-node (beg-of-line line) buffer)	;Fill the cache
	       (loop for (nil nil presentation-node) in (line-presentation-nodes line)
		     when presentation-node
		       do (setf (presentation-node-touched presentation-node) nil))
	    until (eq line end-line))
      ;; Now map over the nodes recursively, applying the function
      (loop as line = start-line then (line-next-in-buffer line)
	    do (loop for (nil nil presentation-node) in (line-presentation-nodes line)
		     when presentation-node
		       do (map-internal presentation-node))
	    until (eq line end-line)))))


;; Make up for lack of translator composition
(scl:define-presentation-translator expression-to-function-spec
				    (sys:expression sys:function-spec)
				    (expression &key presentation)
  ;;--- Should get MUST-BE-DEFINED-FUNCTION from INPUT-CONTEXT, but that seems
  ;;--- to uncover far too many bugs in the presentation-type facilities,
  ;;--- so let a few things be sensitive that shouldn't be.
  (values (expression-to-function-spec expression nil nil nil presentation)))

;; Common subroutine for heuristicating expressions into function specs
;; Returns NIL if it doesn't recognize the expression
;; DEFINITION-TYPE returned can be a specific type or NIL
;; MUST-BE-DEFINED-FUNCTION non-NIL => definition-type must be DEFUN, function must be defined
;; MUST-BE-DEFINED-FUNCTION NIL => any valid function spec is acceptable
;; MUST-HAVE-SOURCE non-NIL => source must be findable by m-.
;; ALLOW-PACKAGE-DWIM non-NIL => symbol only has to appear in the completion aarray
;; PRESENTATION (optional) is the presentation of the expression
;; ALLOW-METHODS (optional) non-NIL (default) => can be a message or generic function
;;   name that doesn't have its own source, but does have methods that could be edited.
(defun expression-to-function-spec (expression must-be-defined-function must-have-source
				    allow-package-dwim
				    &optional presentation (allow-methods t))
  (declare (values function-spec definition-type))
  (block nil
    ;;--- Perhaps ALLOW-PACKAGE-DWIM should enable SYMBOL-FROM-STRING type dwim too?
    (unless (si:validate-function-spec expression)
      (let ((tem (extract-abbreviated-function-spec expression presentation)))
	(when tem
	  (return (values tem 'defun))))
      (when (functionp expression)
	(let ((tem (sys:function-name expression)))
	  (unless (eq tem expression)
	    (when (si:validate-function-spec tem)
	      (return (values tem 'defun))))))
      (return nil))
    (when (lisp:typep expression 'clos:method)
      (return (values (clos-internals:function-spec-object expression) 'defun)))
    ;; A defined function is always acceptable even if it doesn't have a source-file-name
    ;; The edit-definition command will deal with function-parent and so forth
    (when (fdefinedp expression)
      (return (values expression 
		      (unless (and (not must-be-defined-function)
                                   (let ((tem (si:function-spec-get
						expression ':source-file-name)))
				     (and (listp tem)
					  (loop for (type) in tem
						thereis (neq type 'defun)))))
			'defun))))
    ;; Kludgey heuristic that works most of the time for DEFUN-IN-FLAVOR
    (when (symbolp expression)
      (let ((tem (get expression 'flavor::flavor-local-functions)))
	(when (and (= (length tem) 1)
		   (fdefinedp (first tem)))
	  (return (values (first tem) 'defun)))))
    (when must-be-defined-function
      (return nil))
    (unless must-have-source
      (return (values expression nil)))
    ;; Look for other types of definitions besides functions
    (let ((tem (si:function-spec-get expression ':source-file-name)))
      (unless (null tem)
	(return (values expression
			(cond ((atom tem) 'defun)
			      ((and (cdr tem) (null (cddr tem))
				    (memq (caar tem) '(defflavor scl:define-presentation-type
							      cl:deftype))
				    (memq (caadr tem) '(defflavor scl:define-presentation-type
							       cl:deftype)))
			       ;; Remove redundant deftype specs
			       (if (eq (caar tem) 'cl:deftype) (caadr tem) (caar tem)))
			      ((cdr tem) nil)			;Ambiguous, return no specific type
			      (t (caar tem)))))))
    (let ((tem (si:function-spec-get expression 'zmacs-buffers)))
      (unless (null tem)
	(return (values expression (if (cdr tem) nil (caar tem))))))
    (when (and allow-methods
	       (cl:typep expression 'sys:generic-function-name))
      (let ((gf (flavor:find-generic-function expression nil)))
	(when (and gf						;Generic function is defined
		   (sys:generic-function-flavors gf))		;and probably has methods
	  (return (values expression (and (not (flavor::generic-function-message-p gf))
					  'defun))))))
    (when (and allow-package-dwim
	       (symbolp expression)
	       (si:aarray-lookup (string expression) *zmacs-completion-aarray* t))
      (return (values expression nil)))
    (return nil)))

(defun extract-abbreviated-function-spec (fspec presentation)
  (when (and (listp fspec)
	     (symbolp (car fspec))
	     (listp (cdr fspec))
	     (symbolp (cadr fspec))
	     (typep presentation 'presentation-node))
    (let ((node (bp-node (presentation-node-start-bp presentation))))
      (when (and (typep node 'section-node)
		 (eq (section-node-definition-type node) 'defun))
	(let ((real-fspec (section-node-function-spec node)))
	  (when (and (listp real-fspec)
		     (memq (first real-fspec) flavor:*source-code-method-types*)
		     (equal (cdr real-fspec) fspec))
	    real-fspec))))))

(define-presentation-to-editor-command-translator edit-instance-variable-accessor
    (flavor:instance-variable-accessor "Edit definition"
				       
				       *zmacs-comtab*
				       :gesture :select)
    (function-spec)
  `(edit-instance-variable-accessor ,function-spec))

(define-presentation-to-editor-command-translator edit-presentation-handler
    (t "Edit handler for this presentation"
       *zmacs-comtab*
       :tester ((ignore &key presentation)
		(dw::presentation-debug-p
		  presentation))
       :menu :presentation-debugging
       :do-not-compose t
       :documentation
       "Edit handler for this presentation"
       :blank-area t)
    (ignore &key presentation window)
  (let ((name (dw::edit-presentation-handler-internal presentation window)))
    (when name
      `(edit-definition ,name (scl:define-presentation-translator)))))


(defflavor presentation-recording-interval-stream
	((this-line-presentation-nodes nil)
	 (current-presentation-node nil)
	 (current-presentation-allow-sensitive-inferiors t))
	(interval-stream))

(defmethod (:output-as-presentation presentation-recording-interval-stream)
	   (continuation xstream &rest object-options
	    &key (object nil) (type t) (check-type dw::*present-checks-type*)
		 (allow-sensitive-inferiors t)
	    &allow-other-keys)
  (dw::check-presentation-type check-type object type)
  (cond ((or (null type)
	     (and (listp type)
		  (eq (first type) 'expression)
		  (not (cl:getf (rest1 type) :escape 't))
		  (stringp object))	;No sensitivity for PRINC of a string
	     (and current-presentation-node
		  (not current-presentation-allow-sensitive-inferiors)))
	 (funcall continuation xstream)
	 nil)
	(t
	 (let* ((start-bp (send self :read-bp))
		(presentation-node (cl:apply #'make-instance 'presentation-node
					     :start-bp start-bp :end-bp start-bp
					     :superior current-presentation-node
					     :allow-other-keys t object-options)))
	   (push (list (bp-index start-bp) nil presentation-node)
		 this-line-presentation-nodes)
	   (letf ((current-presentation-node presentation-node)
		  (current-presentation-allow-sensitive-inferiors
		    allow-sensitive-inferiors))
	     (funcall continuation xstream))
	   (let ((end-bp (send self :read-bp)))
	     (setf (presentation-node-end-bp presentation-node) end-bp)
	     (setf (second (cl:find presentation-node this-line-presentation-nodes
				    :key #'third))
		   (bp-index end-bp)))
	   presentation-node))))

(defmethod (:output-as-presentation-1 presentation-recording-interval-stream)
	   (continuation continuation-args &rest object-options
	    &key (object nil) (type t) (check-type dw::*present-checks-type*)
		 (allow-sensitive-inferiors t)
	    &allow-other-keys)
  (dw::check-presentation-type check-type object type)
  (cond ((or (null type)
	     (and (listp type)
		  (eq (first type) 'expression)
		  (not (cl:getf (rest1 type) :escape 't))
		  (stringp object))	;No sensitivity for PRINC of a string
	     (and current-presentation-node
		  (not current-presentation-allow-sensitive-inferiors)))
	 (apply continuation continuation-args)
	 nil)
	(t
	 (let* ((start-bp (send self :read-bp))
		(presentation-node (cl:apply #'make-instance 'presentation-node
					     :start-bp start-bp :end-bp start-bp
					     :superior current-presentation-node
					     :allow-other-keys t object-options)))
	   (push (list (bp-index start-bp) nil presentation-node)
		 this-line-presentation-nodes)
	   (letf ((current-presentation-node presentation-node)
		  (current-presentation-allow-sensitive-inferiors
		    allow-sensitive-inferiors))
	     (apply continuation continuation-args))
	   (let ((end-bp (send self :read-bp)))
	     (setf (presentation-node-end-bp presentation-node) end-bp)
	     (setf (second (cl:find presentation-node this-line-presentation-nodes
				    :key #'third))
		   (bp-index end-bp)))
	   presentation-node))))

(defwhopper (:string-out presentation-recording-interval-stream)
	    (string &optional (start 0) end)
  (dw::do-delimited-substrings ((string :start start :end end)
				(char substring-start substring-end))
      (continue-whopper string substring-start substring-end)
    (#\return
     (send self :tyo char))))

(defwhopper (:tyo presentation-recording-interval-stream) (char)
  (if (not (char-equal char #\return))
      (continue-whopper char)
      (let ((this-line line))
	(multiple-value-prog1
	  (continue-whopper char)
	  (setf (line-presentation-nodes this-line) this-line-presentation-nodes)
	  (setq this-line-presentation-nodes (loop for entry
						       in this-line-presentation-nodes
						   as (nil end node) = entry
						   when (null end)
						     do (setf (second entry)
							      (line-length this-line))
						     and collect (list 0 nil node)))))))

(defmethod (:print presentation-recording-interval-stream) (&rest args)
  (cl:apply #'si:print-with-sensitivity self args))

(defmethod (:gprint presentation-recording-interval-stream) (object suggested-format xstream)
  (si:gprint-with-sensitivity xstream object suggested-format))

(compile-flavor-methods presentation-recording-interval-stream)
