;;; Self-Documentation. -*- Base: 8;Mode: LISP;Package: ZWEI-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Worry about whether DOCUMENTATION-FUNCTION stuff will get called
;;; with the right streams set up.  

(DEFVAR *COM-DOCUMENTATION-ALIST*
	'((#\C . COM-SELF-DOCUMENT)
	  (#\L . COM-LAST-COMMANDS)
	  (#\D . COM-DESCRIBE-COMMAND)
	  (#\A . COM-APROPOS)
	  (#\U . COM-UNDO)
	  (#\V . COM-VARIABLE-APROPOS)
	  (#\W . COM-WHERE-IS)
	  (#\T . COM-LOAD-AND-RUN-TEACH-ZMACS)))

(DEFCOM COM-DOCUMENTATION
	"Displays information about commands, performs other help functions.
It prompts in the minibuffer for a help option, which is a single character
for requesting more specific help.
 A  Displays all the commands whose names contain a certain substring.  Type the string.
 C  Displays documentation for a command.  Press the command key after the C.
 D  Displays documentation for an extended command.  Type the command name.
 L  Displays the last 60 characters you typed.
 T  Runs a tutorial of Zmacs.
 U  Offers to undo the last change to the buffer.
 V  Displays all the Zmacs variables whose names contain a certain substring.  Type it.
 W  Finds out whether an extended command is bound to a key.  Type the command name.
Using SPACE repeats the most recent HELP command.  " ()
  (DO-NAMED TOP
      ((CHAR 0)
       (*IN-COM-DOC-P* T)
       (*REPEAT-DOC-P* NIL))
      (NIL)
    (TYPEIN-LINE " Help.  Type one of A,C,D~:[~;,L~],T~:[~;,U~],V,W,Space,Help,Abort: "
		 (MEMQ ':PLAYBACK (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
		 (LET ((BUFFER (BP-CHANGE-RECORDING-BUFFER (POINT))))
		   (AND BUFFER (BUFFER-CHANGE-HISTORY BUFFER))))
    (TYPEIN-LINE-ACTIVATE
      (SETQ CHAR (DO ((CHAR (CHAR-UPCASE (EDITOR-INPUT))
			    (CHAR-UPCASE (EDITOR-INPUT))))
		     ((MEMQ CHAR '(#/A #/C #/D #/L #/T #/U #/V #/W #\SP #/? #\HELP)) CHAR)
		   (COND ((CHAR= CHAR #\c-G)
			  (FUNCALL *TYPEIN-WINDOW* ':CLEAR-WINDOW)
			  (BARF))
			 ((OR (CHAR= CHAR #\ABORT)
			      (CHAR= CHAR #\RUBOUT))
			  (SETQ *MARK-STAYS* T)
			  (FUNCALL *TYPEIN-WINDOW* ':CLEAR-WINDOW)
			  (RETURN-FROM TOP DIS-NONE)))
		   (BEEP))))
    (FUNCALL *TYPEIN-WINDOW* ':MAKE-COMPLETE)
    (COND ((CHAR= CHAR #\SP)
	   (SETQ *REPEAT-DOC-P* T)
	   (SETQ CHAR *COM-DOC-LAST-CHAR*))
	  (T (SETQ *COM-DOC-LAST-CHAR* CHAR)))
    (IF (MEMQ CHAR '(#\HELP #/?))
	(FORMAT T "COM-DOCUMENTATION:~%~A~&"
		(GET 'COM-DOCUMENTATION 'DOCUMENTATION))
	(LET ((FUNCTION (CDR (ASSQ CHAR *COM-DOCUMENTATION-ALIST*))))
	  (WHEN FUNCTION
	    ;; This kludge fudges the minibuffer history so that if this command uses
	    ;; the minibuffer and is repeated, we will go straight to it instead of
	    ;; coming back here and asking again for a character to dispatch on.
	    (SETQ *CURRENT-COMMAND* FUNCTION)
	    (RETURN (FUNCALL FUNCTION)))))))

(DEFVAR *TEACH-ZMACS-FILE* "SYS:EXAMPLES;TEACH-ZMACS")

(ZWEI:DEFCOM COM-LOAD-AND-RUN-TEACH-ZMACS
	     "Runs the Teach-Zmacs tutorial (loading it if needed)."  ()
  (BLOCK WIN
    (CONDITION-CASE (CONDITION)
	 (PROGN (UNLESS (CP::COMMAND-TABLE-LOOKUP-COMMAND CP:*COMMAND-TABLE* "Teach Zmacs")
		  ;; Loading this file causes random `helpful' typeout which
		  ;; we don't want to see in this case, so we have to bind
		  ;; STANDARD-OUTPUT to something that will discard it.
		  (LET ((STANDARD-OUTPUT 'SYS:NULL-STREAM))
		    (CL:LOAD *TEACH-ZMACS-FILE* :VERBOSE NIL)))
		(RETURN-FROM WIN T))
       (FS:FILE-ERROR (ZWEI:BARF "The Zmacs tutorial (~A) is missing.~%" *TEACH-ZMACS-FILE*))
       (SYS:ERROR (ZWEI:BARF "Setup failed: ~~A~" CONDITION))))
  (CP:EXECUTE-COMMAND "Teach Zmacs")
  ZWEI:DIS-NONE)

(DEFCOM COM-DOCUMENT-CONTAINING-COMMAND
	"Displays documentation for the command that you are entering." ()
  (LET ((COMMAND (CAAR *MINI-BUFFER-COMMAND-IN-PROGRESS*)))
    ;; Heuristicate minibuffers after the first for m-X
    (AND (MEMQ COMMAND '(COM-EXTENDED-COMMAND COM-ANY-EXTENDED-COMMAND))
	 (CDR *MINI-BUFFER-COMMAND-IN-PROGRESS*)
	 (SETQ COMMAND (OR (CDR (ASSOC (CADR *MINI-BUFFER-COMMAND-IN-PROGRESS*)
				       *COMMAND-ALIST*))
			   COMMAND)))
    (FORMAT T "~%You are typing in the mini-buffer.~@[  The command in progress is~%~A:~]~%"
	    (COMMAND-NAME COMMAND T))
    (PRINT-DOC ':FULL COMMAND)
    (FUNCALL STANDARD-OUTPUT ':FRESH-LINE)
    DIS-NONE))

;;; A command (a COM- symbol) either has "smart" or "normal" handling of
;;; documentation.  All commands should have a COMMAND-NAME property, whose
;;; value is the nice-looking string form of the command's name.
;;; It should also have a DOCUMENTATION property, whose value is the
;;; string which is the full documentation.  If short documentation
;;; (the one-line kind produced by List Commands) is needed, it is just
;;; the first line of the full documentation.

;;; A command with "smart" handling is detected by the presence of
;;; a DOCUMENTATION-FUNCTION property.  The value of this property
;;; should be a function, which is called with three arguments:
;;;    First, the command symbol itself.
;;;    Secondly, the character typed to get this command, or NIL.  If the second
;;;       argument is NIL, that means that the caller does not have any particular
;;;       character in mind (e.g. in List Commands).  The documentation-function
;;;       should be prepared to deal with this case.
;;;    Thirdly, an operation which tells the function what to do.  They are:
;;;       :NAME  Return your name as a string, (e.g. "Self Insert")
;;;       :FULL  Type out full documentation to standard-output.
;;;       :SHORT Type out short documentation to standard-output.

;;; The symbols on the *COMMAND-HOOK* may also want to document
;;; themselves when the user asks for self-documentation.  Any hook
;;; which does should have an HOOK-DOCUMENTATION-FUNCTION property,
;;; whose value is a function of two arguments, the command which the
;;; hook is preceeding, and the character typed.  (The second argument
;;; will never be NIL.) This function will only be called on the user's
;;; request for FULL (not SHORT) documentation. The function should print
;;; out stuff to standard-output.  It may assume the cursor is at the left
;;; edge, and it should leave the cursor there.

(DEFCOM COM-SELF-DOCUMENT "Displays documentation for the command on a given key." (KM)
  (LET (CHAR)
    (TYPEIN-LINE "Document command: ")
    (SETQ CHAR
	  (TYPEIN-LINE-ACTIVATE
	    (EDITOR-INPUT :MOUSE :RETURN)))
    (UNLESS *MINI-BUFFER-COMMAND-IN-PROGRESS*
      (TYPEIN-LINE-MORE "~:@C" CHAR))
    (FUNCALL *MODE-LINE-WINDOW* ':DONE-WITH-MODE-LINE-WINDOW)
    (LET ((TERMINAL-IO *TYPEOUT-WINDOW*)
	  (STANDARD-OUTPUT SI:SYN-TERMINAL-IO))
      (FORMAT T "~&")
      (DOCUMENT-KEY CHAR *COMTAB*)))
  DIS-NONE)

(DEFCOM COM-FQUERY-MINI-BUFFER-DOCUMENT "Displays documentation for FQUERY minibuffer." ()
  (IF (AND (VARIABLE-BOUNDP FORMAT:FQUERY-HELP-FUNCTION)
	   FORMAT:FQUERY-HELP-FUNCTION)
      (FUNCALL FORMAT:FQUERY-HELP-FUNCTION TERMINAL-IO)
      (COM-DOCUMENT-CONTAINING-COMMAND))
  DIS-NONE)

;;; Document the character CHAR in the given COMTAB, in the typeout area.
(DEFUN DOCUMENT-KEY (CHAR COMTAB)
  (FORMAT T "~:@C" CHAR)
  (DOCUMENT-KEY-1 CHAR COMTAB)
  (SEND STANDARD-OUTPUT :FRESH-LINE))

(DEFUN DOCUMENT-KEY-1 (CHAR COMTAB &OPTIONAL PREFIX (COMMAND (COMMAND-LOOKUP CHAR COMTAB T))
					     (INDENTATION 3))
  (SI:WITH-INDENTATION (STANDARD-OUTPUT INDENTATION)
    (COND ((NULL COMMAND)
	   (FORMAT T " is undefined.~%"))
	  ((SYMBOLP COMMAND)
	   (IF (NOT (GET COMMAND 'COMMAND-NAME))
	       (FORMAT T " is ~A, which is not implemented.~%" COMMAND)
	     (FORMAT T " is ~A, implemented by " (COMMAND-NAME COMMAND))
	     (SCL:PRESENT COMMAND 'SYS:FUNCTION-SPEC)
	     (FORMAT T ":~%")
	     (DO L *COMMAND-HOOK* (CDR L) (NULL L)
		 (LET ((DOCFN (GET (CAR L) 'HOOK-DOCUMENTATION-FUNCTION)))
		   (AND DOCFN
			(FUNCALL DOCFN COMMAND CHAR))))
	     (PRINT-DOC ':FULL COMMAND CHAR)))
	  ((LISTP COMMAND)
	   (FORMAT T " is an alias for ~@[~:@C ~]~:@C.~%~@[~:@C ~]~:@C"
		   PREFIX (SETQ CHAR (MAKE-CHAR (SECOND COMMAND) (FIRST COMMAND)))
		   PREFIX CHAR)
	   (DOCUMENT-KEY-1 CHAR COMTAB PREFIX))
	  ((MACRO-COMMAND-P COMMAND)
	   (FORMAT T " is a user defined macro named ~A.
With no argument, run the macro with the repeat count in its definition.
With an argument, ignore the repeat count in its definition and use
the argument instead.~%"
		   (SYMEVAL-IN-CLOSURE COMMAND 'SYMBOL)))
	  ((PREFIX-COMMAND-P COMMAND)
	   (FORMAT T " is an escape-prefix for more commands.
It reads a character (subcommand) and dispatches on it.
Type a subcommand to document (or * for all):~%")
	   (SETQ PREFIX CHAR
		 CHAR (EDITOR-INPUT))
	   (WHEN (ZEROP (CHAR-BITS CHAR))
	     (SETQ CHAR (CHAR-UPCASE CHAR)))
	   (FORMAT T "~%~:@C" PREFIX)
	   (COND ((CHAR-EQUAL CHAR #/*)
		  (FORMAT T " has these subcommands:~%")
		  (DOCUMENT-PREFIX-CHAR-TABLE (GET-PREFIX-COMMAND-COMTAB COMMAND)))
		 (T
		  (FORMAT T " ~:@C" CHAR)
		  (DOCUMENT-KEY-1 CHAR (GET-PREFIX-COMMAND-COMTAB COMMAND) PREFIX))))
	  ((MENU-COMMAND-P COMMAND)
	   (FORMAT T " is a menu command with the following subcommands:~%")
	   (SI:DISPLAY-ITEM-LIST STANDARD-OUTPUT 'ZWEI (GET-MENU-COMMAND-COMMANDS COMMAND)))
	  (T (FORMAT T " is garbage!?~%")))))

(DEFUN DOCUMENT-PREFIX-CHAR-TABLE (COMTAB &AUX KBD)
  (DO ((CT COMTAB (COMTAB-INDIRECT-TO CT)))
      ((ARRAYP (SETQ KBD (COMTAB-KEYBOARD-ARRAY CT)))))
  (DOTIMES (I (ARRAY-DIMENSION-N 2 KBD))
    (DOTIMES (J (ARRAY-DIMENSION-N 1 KBD))
      (PRINT-SHORT-DOC-FOR-TABLE (CODE-CHAR J I) COMTAB 3))))

;;; This prints the documentation on a command.  It is NOT given a command
;;; dispatch table, and so it cannot understand aliases nor command prefixes.
;;; If the caller wants to win with these, he must hack them himself.
;;; The caller may optionally pass the character used to get this command,
;;; which will be passed to any documentation-function to use if it wants.
;;; The caller must do his own "Control-A is COM-FOOBAR:" line.
(DEFUN PRINT-DOC (OP COMMAND &OPTIONAL (CHAR NIL) &AUX DOC)
  (COND ((NULL COMMAND)
	 (FORMAT T "The command is undefined.~%"))
	((SYMBOLP COMMAND)
	 (COND ((GET COMMAND 'DOCUMENTATION-FUNCTION)
		(FUNCALL (GET COMMAND 'DOCUMENTATION-FUNCTION)
			 COMMAND CHAR OP)
		(FORMAT T "~&")
		)
	       ((SETQ DOC (GET COMMAND 'DOCUMENTATION))
		(FORMAT T "~A~&"
			(SELECTQ OP
			  (:FULL DOC)
			  (:SHORT
			   (IF DOC
			       (LET ((FIRST-CR (STRING-SEARCH-CHAR #\CR DOC)))
				 (IF FIRST-CR
				     (NSUBSTRING DOC 0 FIRST-CR)
				     DOC))
			       ""))
			  (OTHERWISE (FERROR NIL "Bad op ~A" OP)))))))
	((PREFIX-COMMAND-P COMMAND)
	 (FORMAT T "The command is an escape-prefix for more commands.~%"))))

(DEFUN COMMAND-NAME (COMMAND &OPTIONAL NO-ERROR-P &AUX FN)
  (CHECK-ARG COMMAND SYMBOLP "a symbol")
  (COND ((SETQ FN (GET COMMAND 'DOCUMENTATION-FUNCTION))
	 (FUNCALL FN COMMAND NIL ':NAME))
	((GET COMMAND 'COMMAND-NAME))
	(NO-ERROR-P NIL)
	(T (FERROR NIL "~S does not have a name" COMMAND))))

(DEFCOM COM-LIST-COMMANDS "Lists names and one-line summaries for all extended commands." ()
  (FORMAT T "~%   Extended commands:~2%")
  (DO ((COMTAB *COMTAB* (COMTAB-INDIRECT-TO COMTAB)))
      ((NULL COMTAB))
    (CL:MAP () #'(LAMBDA (ENTRY)
		   (FORMAT T "~25,5,2A" (CAR ENTRY))
		   (PRINT-DOC ':SHORT (CDR ENTRY))
		   (FORMAT T "~&"))
	    (COMTAB-EXTENDED-COMMANDS COMTAB)))
  (FORMAT T "~%Done.~2%")
  DIS-NONE)

(DEFCOM COM-APROPOS "Lists commands whose names or documentation contain a given string.
It reports whether the command is available on a command key or as an extended
command.  It prompts for a string in the minibuffer.  It searches for the string
in the name of the command, and in the first line of the command's documentation.
With a numeric argument, it only searches in the name of the command.  It does not
ignore leading or trailing spaces in the string; the command name would have to
contain the same spaces in order to match." (KM)
  (MULTIPLE-VALUE-BIND (FUNCTION KEY STRING-TYPED)
      (GET-EXTENDED-SEARCH-STRINGS "Apropos. (Substring:)")
    (FORMAT T "~&")
    (LET ((FOUND-ONE NIL))
      (TV:DOLIST-NOTING-PROGRESS (X *COMMAND-ALIST* "Searching command set")
	(LET ((NAME (COMMAND-NAME (CDR X)))
	      (DOC (GET (CDR X) 'DOCUMENTATION)))
	  (WHEN (OR (FUNCALL FUNCTION KEY NAME)
		    (AND (NOT *NUMERIC-ARG-P*)
			 (NOT (NULL DOC))
			 ;; Search the first line of the documentation.
			 (FUNCALL FUNCTION
				  KEY
				  DOC
				  0
				  (OR (STRING-SEARCH-CHAR #\RETURN DOC) (STRING-LENGTH DOC)))))
	    (SETQ FOUND-ONE T)
	    (FORMAT T "~25,5,2A" NAME)
	    (PRINT-DOC ':SHORT (CDR X))
	    (FORMAT T "~&")
	    (WHERE-IS-INTERNAL (CDR X) 4)
	    (FORMAT T "~2&"))))
      (UNLESS FOUND-ONE
	(FORMAT T "~&Found no matches.  Perhaps you should try a leading substring~@
		   (for instance, /"delet/" will find /"delete/" and /"deleting/")~@
		   and//or a synonym.~%"))
      (PROCESS-SYNONYM-SETS STRING-TYPED FUNCTION KEY))
    (FORMAT T "Done.~2%"))
  DIS-NONE)

(DEFVAR *APROPOS-SYNONYM-SETS*
	'((("insert" "yank" "include" "paste")
	   ("insert" "yank"))
	  (("kill" "delete" "cut" "remove" "flush")
	   ("kill" "delete" "remove" "flush"))
	  (("find" "list" "search" "get" "locate")
	   ("find" "list" "search"))
	  (("move" "copy" "get")
	   ("move" "copy"))
	  (("transpose" "exchange" "interchange" "twiddle" "swap" "switch")
	   ("exchange" "interchange" "swap"))
	  (("switch" "select")
	   ("select"))
	  (("change" "modify" "edit")
	   ("edit" "change" "select"))))

(DEFUN PROCESS-SYNONYM-SETS (STRING-TYPED FUNCTION KEY)
  (LET ((COMPLETE-OUTPUT-SET NIL))
    (DOLIST (SET *APROPOS-SYNONYM-SETS*)
      (DESTRUCTURING-BIND (INPUT-SET OUTPUT-SET) SET
	(WHEN (SCL:SOME (SYS:NAMED-LAMBDA SOME (ITEM) (FUNCALL FUNCTION KEY ITEM))
			INPUT-SET)
	  (SETQ COMPLETE-OUTPUT-SET (APPEND COMPLETE-OUTPUT-SET
					    (CL:REMOVE STRING-TYPED OUTPUT-SET
						       :TEST #'STRING-EQUAL))))))
    (WHEN COMPLETE-OUTPUT-SET
      (CL:FRESH-LINE)
      (SCL:FILLING-OUTPUT ()
	(FORMAT T "Potential synonym~P for ~A ~:[are~;is~] "
	  (LENGTH COMPLETE-OUTPUT-SET) STRING-TYPED (= (LENGTH COMPLETE-OUTPUT-SET) 1))
	(SCL:FORMAT-TEXTUAL-LIST COMPLETE-OUTPUT-SET #'PRINC :CONJUNCTION "and")
	(FORMAT T ".~%")))))

(DEFUN WHERE-IS-INTERNAL (COMMAND LIMIT)
  (LET ((BINDING-COUNT (FIND-COMMAND-ON-KEYS COMMAND LIMIT "  Invoked by: ")))
    (WHEN (EXTENDED-COMMAND-P COMMAND)
      (WHEN (FIND-COMMAND-ON-KEYS 'COM-EXTENDED-COMMAND 1
				  (IF (> BINDING-COUNT 0) ", " "  Invoked by: "))
	(FORMAT T " ~A~%" (EXTENDED-COMMAND-NAME COMMAND))
	(INCF BINDING-COUNT)))
    (UNLESS (> BINDING-COUNT 0)
      (FORMAT T "  Not available in the current context.~%"))))

(DEFCOM COM-WHERE-IS "Lists all characters that invoke a given command.
It reads the command name with completion from the mini-buffer." (KM)
  (LET ((CMD (GET-ANY-EXTENDED-COMMAND "Where is:")))
    (CL:FRESH-LINE)
    (SCL:PRESENT CMD 'EXTENDED-COMMAND-NAME)
    (WHERE-IS-INTERNAL CMD 77777)
    (FORMAT T "~2&"))
  DIS-NONE)

;;;This is needed for a blind search of the character space as done by
;;;FIND-COMMAND-ON-KEYS.  It ought to be in a more general place,
;;;written in a more general way.
;; FOR-COROUTINE-TRAVERSING is for things like FIND-COMMAND-ON-KEYS which
;; traverses the comtabs in linear order.  It is normally NIL for things
;; like MAKE-SET-COMTAB-UNDO-LIST which want to turn #/0 into #/1 instead
;; of #/c-0.
(DEFUN CHAR-SUCCESSOR (CHAR &OPTIONAL FOR-COROUTINE-TRAVERSING)
  (COND ((MOUSE-CHAR-P CHAR)
	 (LET ((BUTTON-MAX #o7)
	       (BITS-MAX #o37)
	       (BITS (CHAR-MOUSE-BITS CHAR))
	       (BUTTON (CHAR-MOUSE-BUTTON CHAR)))
	   (IF FOR-COROUTINE-TRAVERSING
	       (WHEN (> (INCF BITS) BITS-MAX)
		 (SETQ BITS 0)
		 (WHEN (> (INCF BUTTON) BUTTON-MAX)
		   (SETQ BUTTON 0)))
	       (WHEN (> (INCF BUTTON) BUTTON-MAX)
		 (SETQ BUTTON 0)
		 (WHEN (> (INCF BITS) BITS-MAX)
		   (SETQ BITS 0))))
	   (MAKE-MOUSE-CHAR BUTTON BITS)))
	(T
	 (LET ((CODE-MAX #o377)
	       (BITS-MAX #o17)
	       ;; fix when styles are implemented
	       ;;(STYLE 0)			; (CHAR-STYLE-INDEX CHAR)
	       (BITS (CHAR-BITS CHAR))
	       (CODE (CHAR-CODE CHAR)))
	   (IF FOR-COROUTINE-TRAVERSING
	       (WHEN (> (INCF BITS) BITS-MAX)
		 (SETQ BITS 0)
		 (WHEN (> (INCF CODE) CODE-MAX)
		   (SETQ CODE 0)))
	       (WHEN (> (INCF CODE) CODE-MAX)
		 (SETQ CODE 0)
		 (WHEN (> (INCF BITS) BITS-MAX)
		   (SETQ BITS 0))))
	   (CODE-CHAR CODE BITS)))))

;;; Infernal function of COM-APROPOS and COM-WHERE-IS.  Look for COMMAND
;;; in the keyboard dispatch table, and tell the user by printing to
;;; STANDARD-OUTPUT.  Returns the number of keys on which the command
;;; was found.  Stops looking after the LIMITth
;;; occurrence of the key.
(DEFUN FIND-COMMAND-ON-KEYS (COMMAND LIMIT MESSAGE &OPTIONAL (COMTAB *COMTAB*))
  (LOOP FOR CHAR = (CODE-CHAR 0) THEN (CHAR-SUCCESSOR NEXT-CHAR T)
	FOR COUNT FROM 0
	WITH STRING AND NEXT-CHAR AND FOUND-LIST
	WITH CURRENT-COMTAB = COMTAB
	DO (MULTIPLE-VALUE (STRING NEXT-CHAR CURRENT-COMTAB)
	     (KEY-FOR-COMMAND COMMAND CURRENT-COMTAB CHAR COMTAB))
	WHILE STRING
	WHEN (CL:MEMBER NEXT-CHAR FOUND-LIST)
	  DO (DECF COUNT)
	WHEN ( COUNT LIMIT)
	  DO (FORMAT T ", etc.")
	     (LOOP-FINISH)
	UNLESS (CL:MEMBER NEXT-CHAR FOUND-LIST)
	  DO (CL:PUSH NEXT-CHAR FOUND-LIST)
	     (FORMAT T (IF (= COUNT 0) MESSAGE ", "))
	     (PRINC STRING)
	FINALLY (RETURN COUNT)))

;Returns a list of the commands which are in *COMMAND-ALIST* but not reachable
;from the current comtab.
(DEFVAR ALL-COMTABS '(*STANDARD-COMTAB* *STANDARD-CONTROL-X-COMTAB* *COMPLETING-READER-COMTAB*
		      *CONTROL-R-COMTAB* *RECURSIVE-EDIT-COMTAB* *STANDALONE-COMTAB*
		      *ZMACS-COMTAB* *ZMACS-CONTROL-X-COMTAB*))
			;Unfortunately the mode-specific comtab is shared, can't win on those

(DEFUN UNREACHABLE-COMMAND-LIST (&AUX (L (MAPCAR #'CDR *COMMAND-ALIST*)))
  (DOLIST (COMTAB ALL-COMTABS)
    (WHEN (BOUNDP COMTAB)
      (SETQ L (UNREACHABLE-COMMAND-LIST-INTERNAL (SYMEVAL COMTAB) L))))
  (SORT L #'STRING-LESSP))

(DEFUN UNREACHABLE-COMMAND-LIST-INTERNAL (*COMTAB* L &AUX CHAR TEM KBD)
  (DO ((CT *COMTAB* (COMTAB-INDIRECT-TO CT)))
      ((ARRAYP (SETQ KBD (COMTAB-KEYBOARD-ARRAY CT)))))
  (DOTIMES (I (ARRAY-DIMENSION-N 2 KBD))
    (DOTIMES (J (ARRAY-DIMENSION-N 1 KBD))
      (SETQ CHAR (CODE-CHAR J I))
      (SETQ TEM (COMMAND-LOOKUP CHAR *COMTAB* T))
      (COND ((AND TEM (SYMBOLP TEM))
	     (SETQ L (DELQ TEM L)))
	    ((PREFIX-COMMAND-P TEM)
	     (SETQ L (UNREACHABLE-COMMAND-LIST-INTERNAL
		       (GET-PREFIX-COMMAND-COMTAB TEM) L))))))
  (DOLIST (C L)
    (AND (EXTENDED-COMMAND-P C) (SETQ L (DELQ C L))))
  L)

(DEFUN EXTENDED-COMMAND-NAME (SYMBOL &OPTIONAL (STARTING-COMTAB *COMTAB*))
  (DO ((COMTAB STARTING-COMTAB (COMTAB-INDIRECT-TO COMTAB)))
      ((NULL COMTAB))
    (LET ((ENTRY (CL:FIND SYMBOL (COMTAB-EXTENDED-COMMANDS COMTAB) :KEY #'CDR)))
      (WHEN ENTRY
	(RETURN-FROM EXTENDED-COMMAND-NAME (CAR ENTRY))))))

(DEFUN EXTENDED-COMMAND-P (SYMBOL &OPTIONAL (STARTING-COMTAB *COMTAB*))
  (DO ((COMTAB STARTING-COMTAB (COMTAB-INDIRECT-TO COMTAB)))
      ((NULL COMTAB))
    (LET ((ENTRY (CL:FIND SYMBOL (COMTAB-EXTENDED-COMMANDS COMTAB) :KEY #'CDR)))
      (WHEN ENTRY
	(RETURN-FROM EXTENDED-COMMAND-P T)))))

(DEFCOM COM-DESCRIBE-COMMAND "Displays the full documentation for a command.
It reads the command name from the minibuffer with completion and displays
the documentation in the typeout window." (KM)
  (LET ((CMD (GET-ANY-EXTENDED-COMMAND "Describe command:")))
    (CL:FRESH-LINE)
    (SCL:PRESENT CMD 'EXTENDED-COMMAND-NAME)
    (TYO #\Space)
    (SI:WITH-INDENTATION (STANDARD-OUTPUT 3)
      (WHERE-IS-INTERNAL CMD 4)
      (FORMAT T "~&")
      (PRINT-DOC ':FULL CMD))
    (CL:FRESH-LINE))
  DIS-NONE)

(DEFINE-LOCAL-VARIABLE *STANDARD-COMMAND* 'COM-SELF-INSERT)

;;; This command goes on keys which are normally self-inserting.
;;; *STANDARD-COMMAND* is usually COM-SELF-INSERT.
(DEFCOM COM-STANDARD DOCUMENT-STANDARD-COMMAND ()
  (FUNCALL *STANDARD-COMMAND*))

;;; This is the documentation function for *STANDARD-COMMAND*.
(DEFUN DOCUMENT-STANDARD-COMMAND (COMMAND CHAR OP)
  (SELECTQ OP
    (:FULL  (PRINT-DOC ':FULL  *STANDARD-COMMAND* CHAR))
    (:SHORT (PRINT-DOC ':SHORT *STANDARD-COMMAND* CHAR))
    (:NAME  (COMMAND-NAME *STANDARD-COMMAND*))
    (OTHERWISE (FERROR NIL "Unknown operation ~A; ~S ~S" OP COMMAND
		       CHAR))))

;;; This is used for commands which make a table of subcommands, like
;;; the smart doc for bit prefixes and command prefixes (e.g. Control-X).
;;; It takes a char and a table, and an indentation in spaces.  It prints
;;; one or two lines of stuff, with the given indentation.
(DEFUN PRINT-SHORT-DOC-FOR-TABLE (CHAR COMTAB INDENTATION)
  (LET ((X (COMMAND-LOOKUP CHAR COMTAB T)))
    (COND ((NULL X))			;undefined
	  ((LISTP X))			;alias
	  ((MACRO-COMMAND-P X)
	   (FORMAT T "~&~V@T~:C is a user defined macro.~%" INDENTATION CHAR))
	  ((PREFIX-COMMAND-P X)
	   (FORMAT T "~&~V@T~:C reads another character and dispatches.~%"
		   INDENTATION CHAR))
	  ((NOT (SYMBOLP X)))		;??
	  (T
	   (FORMAT T "~&~V@T~:C is ~A:~%~V@T"
		   INDENTATION CHAR (COMMAND-NAME X) (+ 5 INDENTATION))
	   (PRINT-DOC ':SHORT X CHAR)))))

(DEFCOM COM-DOCUMENT-CONTAINING-PREFIX-COMMAND "Describes the current prefix command." ()
  (DECLARE (SPECIAL COMTAB))
  (UNLESS (BOUNDP 'COMTAB)
    (BARF "There is no prefix command currently in operation."))
  (DOCUMENT-PREFIX-CHAR-TABLE COMTAB)
  DIS-NONE)
