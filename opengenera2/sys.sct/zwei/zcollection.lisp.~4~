;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;"collect" changed to "zcollect" so I can patch in code that 
;;uses this without having to resolve all the lisp-designers
;;issues.  --RLB

#|
Language design issues having to do with collections--

Here are the points on which RLB differs with ACW.

(1) RLB wants collections to be named.  ACW permits 
anonymous collections.

(2) RLB wants the collection-name to name the list.  ACW
wants to name the collection.  ACW wants the collection
to be a recognizable lisp object so it can be passed to
subroutines.  RLB fails to address that effectively.
ACW requires you to use some accessor to get at the list.

(3) RLB wants the outer collecting-form to be progn-like,
returning the value of the last form inside.  ACW wants
it to return the collection.

(4) ACW wants ordering like (collect <value> &optional <collection>)
while RLB wants (collect <collection> <value>).  ACW gets
the collection to be optional, supporting his anonymous
collections.  RLB gets to put the (small) collection
name first, and the (potentially large) value later
in the source code.

(5) ACW proposes extensions to other ways of gathering/
accumulating (summing, multiplying, searching).  RLB
hasn't bothered yet, and should, if seriously proposing
this as a language feature.

ACW answers:

RLB's point 2 is for me the most important one.  I consider 
it an unimportant goal for collections to look like lists.
In fact I believe that in practice, one seldom accesses 
the list until the collection is complete.

I completely agree that COLLECTING-INTO should have PROGN
semantics.  Only the anonymous COLLECTING should return the
collection contents.  This covers points 1 and 3.  If
anonymous collections are nixed, it wouldn't bother me all
that much.

For point 4, I don't mind 2-argument COLLECT putting the
collection-name first.  If we have no anonymous collections,
it would be moot, and if we retain anonymous collections, a
trivial cludge will make 1-arg COLLECT work right.

I think we are in substantial agreement on point 5.

|#
#||
;;Example code:

(defun foo ()
  (zcollecting-into (l)
    (dolist (x '(a b a c b d a))
      (zcollect-new l x))
    l))

(zcollecting-into (var (var initial-value) ...)
  ...
  (zcollect var val)
  ...
  (zcollect-new var value :test #'eql)	;like cl:pushnew
  (zcollect-nconc var list)
  (zcollect-reconsider var)	;if something else altered the tail
  ...
  --returns last form--)

(defun gack (l)
  (zcollecting-into (x (l (copylist l)))
    (dotimes (i 3) (zcollect x i))
    (zcollect-nconc l (list 4 5 6))
    (zcollect-nconc l (list 7 8))
    (gack1 l)
;    (zcollect-reconsider l)
    (zcollect l 'last)
    (values x l)))
(defun gack1 (l) (nconc l (list 56)))

;; zcollect-reconsider has no hope.  Consider this example
(defun gack2 ()
  (zcollecting-into (l)
    (gack1 l)
    (zcollect-reconsider l)
    (zcollect l 'last)
    l))
;; basically, if somebody is going to modify the tail of a possibly null
;; list, they better pass it back out so you can SETQ it.  Otherwise,
;; you are in trouble.  --dcp

;; This doesn't work.
;; I guess you need a RRPLACD or something...
;; [Yeah.  I "fixed" ZCOLLECT to take care of it.  It will cost an extra 
;;  push until I hair up an inner walk. Search for ".val." below --RLB]
(DEFUN DLA (N)
  (ZCOLLECTING-INTO (X)
    (ZCOLLECT X (PROGN (ZCOLLECT X (- N)) N))
    X))

||#

;(globalize "ZCOLLECT")
;(globalize "ZCOLLECT-NCONC")
;(globalize "ZCOLLECTING-INTO")

(defmacro zcollect (zcollection-var value)
  (declare (ignore zcollection-var value))
  (error "~a must appear inside a ~a" 'zcollect 'zcollecting-into))

(defmacro zcollect-nconc (zcollection-var list)
  (declare (ignore zcollection-var list))
  (error "~a must appear inside a ~a" 'zcollect-nconc 'zcollecting-into))

(defmacro zcollect-new (zcollection-var value &key (test '#'eql))
  (declare (ignore zcollection-var value test))
  (error "~a must appear inside a ~a" 'zcollect-new 'zcollecting-into))

;;---With sufficient flow analysis I could probably get rid of the need for this.
;;---No you couldn't.  You have no way of knowing if an called function has been redefined.
(defmacro zcollect-reconsider (zcollection-var)
  (declare (ignore zcollection-var))
  (error "~a must appear inside a ~a" 'zcollect-new 'zcollect-reconsider))

(defun find-tail (var vars tail-specs)
  (loop for lvar in vars
	for (tail) in tail-specs
	when (eq lvar var)
	  return tail
	finally (ferror "I see no zcollection named ~s here" var)))

(defmacro zcollecting-into ((&rest zcollection-vars) &body body)
  (let (vars initial-values tail-specs)
    (flet ((specs (var initial-value tail-form)
	     (push var vars)
	     (push initial-value initial-values)
	     (let ((tail-var (make-symbol (string-append var "-zcollection-tail"))))
	       (push `(,tail-var ,tail-form) tail-specs))))
      (dolist (spec zcollection-vars)
	(cond ((symbolp spec)
	       (specs spec nil `(locf ,spec)))
	      ((listp spec)
	       (selector (length spec) =
		 (1 (specs (first spec) nil `(locf ,spec)))
		 (2 (destructuring-bind (var val) spec
		      (specs var val `(if ,var (last ,var) (locf ,var)))))
		 (otherwise (ferror "Ill-formed spec ~s" spec))))
	      (t (ferror "Ill-formed spec ~s" spec)))))
    (setq vars (nreverse vars)			;sure need ZCOLLECTING-INTO here
	  initial-values (nreverse initial-values)
	  tail-specs (nreverse tail-specs))
    `(let ,(loop for var in vars
		 for iv in initial-values
		 collect `(,var ,iv))
       (let ,tail-specs
	 (macrolet ((zcollect (var val)
			      (let ((tail (find-tail var ',vars ',tail-specs)))
				`(let ((.val. (ncons ,val)))
				   (setf (cdr ,tail) .val.)
				   (setf ,tail (cdr ,tail)))))
		    (zcollect-nconc (var val)
				    (let ((tail (find-tail var ',vars ',tail-specs)))
				      `(let ((.val. ,val))
					 (setf (cdr ,tail) .val.)
					 (setf ,tail (last ,tail)))))
		    (zcollect-new (var val &key (test '#'eql))
				  (let ((tail (find-tail var ',vars ',tail-specs)))
				    `(let ((.val. ,val))
				       (unless (cl:member .val. ,var :test ,test)
					 (setf (cdr ,tail) (ncons .val.))
					 (setf ,tail (cdr ,tail))))))
		    (zcollect-reconsider (var)
					 (let ((tail (find-tail var ',vars ',tail-specs)))
					   `(progn
					      (setf ,tail
						    (if ,var (last ,var) (locf ,var)))))))
	   ,@body)))))



