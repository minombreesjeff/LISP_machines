;;; -*- Mode: LISP; Syntax: zetalisp; Package: zwei; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Given a window, prints out its contents for debugging to STANDARD-OUTPUT.
(defun print-window (window)
  (do ((pline 0 (1+ pline))
       (n-plines (window-n-plines window)))
      (( pline n-plines))
    (format t "/#~S Tick=~S  From ~S to ~S  Marking from ~S width ~S.  Text width ~S~%~
               Y position ~D, Baseline ~D, height ~D.~%"
	    pline (pline-tick window pline) (pline-from-index window pline)
	    (pline-to-index window pline) (pline-marking-left window pline)
	    (pline-marking-width window pline) (pline-text-width window pline)
	    (pline-y window pline) (pline-baseline window pline)
	    (pline-height window pline))
    (format t "~S~%" (pline-line window pline))))

;;; Verify that all lines are linked together properly
(defun check-interval-lines (bp1 &optional bp2 in-order-p tick)
  (get-interval bp1 bp2 in-order-p)
  (do ((prev nil line)
       (line (bp-line bp1) (line-next-in-buffer line))
       (last-line (bp-line bp2))
       (prev-1) (bad-pointers-p) (deleted-p) (line-tick))
      (nil)
    (setq prev-1 (if line (line-previous-in-buffer line) last-line)
	  line-tick (and line (line-tick line)))
    (setq bad-pointers-p (neq prev prev-1)
	  deleted-p (and line-tick (eq line-tick 'deleted)))
    (cond ((or bad-pointers-p deleted-p)
	   (format t "~&Line: ~S~%" line)
	   (and bad-pointers-p
		(format t " line previous of line ~S, previous line ~S~%" prev-1 prev))
	   (and (or deleted-p (and tick line-tick (> line-tick tick)))
		(format t " line is ~:[modified~;deleted~]" deleted-p))))
    (and (or (eq prev last-line) (null line))
	 (return (values)))))

(defun check-buffer-lines (buffer)
  (check-interval-lines buffer nil t (send buffer ':send-if-handles ':read-tick)))

;;--- This can't work on version-control buffers.
;; Can it? (No one calls it, it's just debugging)
(defun check-all-buffer-lines ()
  (dolist (buffer *zmacs-buffer-list*)
    (format t "~2&~A:~%" (funcall buffer ':name))
    (check-buffer-lines buffer)))

(defun describe-line (line)
  (describe-defstruct line 'line))

(scl:define-presentation-translator interval-contents
  (interval sys:form :gesture :control-left)
  (interval)
  `(string-interval ',interval))

(dw:define-presentation-translator describe-line
   (string sys:form
    :tester ((string)
	     (and (stringp string)
		  (array-has-leader-p string)
		  (= (array-leader-length string) line-leader-size)))
    :gesture :describe)
   (line)
  `(describe-line ,line))

(defun describe-bp-line (bp)
  (let ((standard-output *typeout-window*)) (describe-line (bp-line bp))))

(define-presentation-to-editor-command-translator describe-bp-line
   (bp "Describe BP line" *standard-comtab*
    :blank-area nil
    :tester ((ignore &key window)
	     (let ((zwei-window (send-if-handles window :zwei-window)))
	       (and zwei-window
		    (disable-for-other-window-tester zwei-window nil))))
    :documentation "Describe line for BP under mouse"
    :gesture :super-middle)
   (bp)
  `(describe-bp-line ,bp))

(cl:setf (dw::mouse-char-for-gesture :super-meta-left) #\super-meta-mouse-l)

(define-presentation-to-editor-command-translator display-bp-top-level-node
   (bp "Display Top Level Node" *standard-comtab*
    :blank-area nil
    :tester ((ignore &key window)
	     (let ((zwei-window (send-if-handles window :zwei-window)))
	       (and zwei-window
		    (disable-for-other-window-tester zwei-window nil))))
    :documentation "Describe top level node for BP under mouse"
    :gesture :super-meta-left)
   (bp)
  `(describe ,(bp-top-level-node bp)))

(define-presentation-to-editor-command-translator display-bp-node
   (bp "Display Node" *standard-comtab* 
    :blank-area nil
    :tester ((ignore &key window)
	     (let ((zwei-window (send-if-handles window :zwei-window)))
	       (and zwei-window
		    (disable-for-other-window-tester zwei-window nil))))
    :documentation "Describe node for BP under mouse"
    :gesture :super-left)
   (bp)
  `(describe ,(bp-node bp)))
