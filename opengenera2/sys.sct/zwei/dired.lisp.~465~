;;;-*- Syntax: Zetalisp; Base: 8; Mode: LISP; Package: ZWEI -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Needed for dired buffers.
(DEFFLAVOR READ-ONLY-NODE-MIXIN ((TICK-BEFORE-READ-ONLY 0)) ()
  (:REQUIRED-FLAVORS NODE)
  :SETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:UPDATE-TICK-BEFORE-READ-ONLY READ-ONLY-NODE-MIXIN) ()
  (SETQ TICK-BEFORE-READ-ONLY TICK))

;;;;Directory editor

(DEFVAR *DIRED-PATHNAME-NAME* NIL)
(DEFVAR *DIRED-MOUSE-COMMAND*)
(DEFVAR *DIRED-FUNCTION-TO-APPLY*)

;; NOERROR is not evaluated.
(DEFMACRO DIRED-LINE-PATHNAME (LINE &OPTIONAL NOERROR)
  (IF NOERROR
      `(GET (LOCF (LINE-PLIST ,LINE)) ':PATHNAME)
      `(OR (GET (LOCF (LINE-PLIST ,LINE)) ':PATHNAME)
	   (BARF "No pathname on this line"))))

(DEFMAJOR COM-DIRED-MODE DIRED-MODE "Dired" "Prepares for editing a directory" ()
  (PROGN (OR (BOUNDP '*DIRED-MOUSE-COMMAND*)
	     (SETQ *DIRED-MOUSE-COMMAND*
		   (MAKE-MENU-COMMAND '(DIRED-SORT-BY-INCREASING-REFERENCE-DATE
					DIRED-SORT-BY-DECREASING-REFERENCE-DATE
					DIRED-SORT-BY-INCREASING-CREATION-DATE
					DIRED-SORT-BY-DECREASING-CREATION-DATE
					DIRED-SORT-BY-INCREASING-FILE-NAME
					DIRED-SORT-BY-DECREASING-FILE-NAME
					DIRED-SORT-BY-INCREASING-SIZE
					DIRED-SORT-BY-DECREASING-SIZE
					DIRED-SORT-BY-INCREASING-PARTITION
					DIRED-SORT-BY-DECREASING-PARTITION
					COM-DIRED-AUTOMATIC
					COM-DIRED-AUTOMATIC-ALL
					COM-DIRED-CHANGE-FILE-PROPERTIES
					COM-DIRED-DESCRIBE-ATTRIBUTE-LIST
					))))
	 (LET ((PATHNAME (SEND *INTERVAL* ':SEND-IF-HANDLES ':PATHNAME)))
	   (AND PATHNAME (SETQ *DIRED-PATHNAME-NAME* (STRING PATHNAME)))))
  (SET-COMTAB *MODE-COMTAB* '(#\SP COM-DOWN-REAL-LINE
			      #/! COM-DIRED-NEXT-UNDUMPED
			      #/@ COM-DIRED-COMPLEMENT-DONT-DELETE
			      #/$ COM-DIRED-COMPLEMENT-NO-REAP-FLAG
			      #/. COM-DIRED-CHANGE-FILE-PROPERTIES
			      #/, COM-DIRED-DESCRIBE-ATTRIBUTE-LIST
			      #/= COM-DIRED-SRCCOM
			      (#/0 10.) COM-NUMBERS
			      #/- COM-NEGATE-NUMERIC-ARG
			      #/? COM-DIRED-HELP
			      #\HELP COM-DIRED-HELP
			      #/A COM-DIRED-APPLY-FUNCTION
			      #/a (0 #/A)
			      #/C COM-DIRED-COPY-FILE
			      #/c (0 #/C)
			      #/D COM-DIRED-DELETE
			      #/d (0 #/D)
			      #\c-D COM-DIRED-DELETE
			      #/E COM-DIRED-EDIT-FILE
			      #/e (0 #/E)
			      #/F COM-DIRED-FORMAT-FILE
			      #/f (0 #/F)
			      #/G COM-DIRED-SET-GENERATION-RETENTION-COUNT
			      #/g (0 #/G)
			      #/H COM-DIRED-AUTOMATIC
			      #/h (0 #/H)
			      #\I COM-DIRED-IMMEDIATE
			      #\i (0 #\I)
			      #/K COM-DIRED-DELETE
			      #/k (0 #/K)
			      #\c-K COM-DIRED-DELETE
			      #/L COM-DIRED-LOAD-FILE
			      #/l (0 #/L)
			      #/N COM-DIRED-NEXT-HOG
			      #/n (0 #/N)
			      #/P COM-DIRED-HARDCOPY-FILE
			      #/p (0 #/P)
			      #/Q COM-DIRED-EXIT
			      #/q (0 #/Q)
			      #/R COM-DIRED-RENAME-FILE
			      #/r (0 #/R)
			      #/U COM-DIRED-UNDELETE
			      #/u (0 #/U)
			      #/V COM-DIRED-SHOW-FILE
			      #/v (0 #/V)
			      #/X COM-EXTENDED-COMMAND
			      #/x (0 #/X)
			      #\RUBOUT COM-DIRED-REVERSE-UNDELETE
			      #\ABORT COM-DIRED-ABORT
			      #\END COM-DIRED-EXIT)
	      '(("Show File Properties" . COM-SHOW-FILE-PROPERTIES)))
  (SET-COMTAB *MODE-COMTAB* (LIST #\MOUSE-3-1 *DIRED-MOUSE-COMMAND*))
  (SETQ *MODE-LINE-LIST* (APPEND *MODE-LINE-LIST* '("        (Q to exit)"))))

;;; This is a synonym for Dired and MUST STAY IN STEP WITH IT.
(DEFCOM COM-EDIT-DIRECTORY "Edits a directory, prompting for a pathname.  (Synonym for Dired.)
It shows a list of the files in the directory, one per line.  You use
single-character commands to specify an action to be taken for the file on
the current line.  The actions include Delete, Edit, and Print.  Use HELP
or ? after entering Dired to see the documentation on the commands.  "()
  (COM-DIRED))

(DEFCOM COM-DIRED "Edits a directory, prompting for a pathname.
It shows a list of the files in the directory, one per line.  You use
single-character commands to specify an action to be taken for the file on
the current line.  The actions include Delete, Edit, and Print.  Use HELP
or ? after entering Dired to see the documentation on the commands.  "()
  (DIRECTORY-EDIT (READ-DIRECTORY-NAME "Edit directory" (DEFAULT-PATHNAME))))

(DEFCOM COM-R-DIRED "Edits directory, using current file or prompting.
The command accepts an argument.
  Arg   Meaning
 none    Edits the directory containing the file in the current buffer.
   1     Edits files with the same name as the current file, taking defaults from current file
   4     Prompts for a directory name.
It shows a list of the files in the directory, one per line.  You use
single-character commands to specify an action to be taken for the file on
the current line.  The actions include Delete, Edit, and Print.  Use HELP
or ? after entering Dired to see the documentation on the commands.  "()
  (LET ((PATHNAME (FUNCALL (DEFAULT-PATHNAME) ':NEW-PATHNAME ':TYPE ':WILD
							     ':VERSION ':WILD)))
    (COND ((NOT *NUMERIC-ARG-P*)
	   (DIRECTORY-EDIT (FUNCALL PATHNAME ':NEW-NAME ':WILD)))
	  ((= *NUMERIC-ARG* 1)
	   (DIRECTORY-EDIT PATHNAME))
	  (T (COM-DIRED)))))

;;; Here is the actual directory editor
(DEFUN DIRECTORY-EDIT (PATHNAME &AUX OPTIONS)
  (WHEN (LISTP PATHNAME)			; communication with ED
    (SETQ OPTIONS (CDR PATHNAME)		; [for future refinement of Dired]
	  PATHNAME (CAR PATHNAME)))
  (IGNORE OPTIONS)
  (SEND *CURRENT-COMMAND-LOOP* ':SELECT-SPECIAL-BUFFER ':DIRED T ':SET-PATHNAME PATHNAME)
  (SETQ *DIRED-PATHNAME-NAME* (FUNCALL PATHNAME ':STRING-FOR-PRINTING))
  (LET ((*SET-ATTRIBUTE-UPDATES-LIST* NIL))
    (COM-DIRED-MODE))
  DIS-TEXT)

(DEFFLAVOR DIRED-NODE-MIXIN ((PATHNAME NIL)) (READ-ONLY-NODE-MIXIN)
  :SETTABLE-INSTANCE-VARIABLES)

(DEFFLAVOR DIRED-NODE () (DIRED-NODE-MIXIN TOP-LEVEL-NODE))

(DEFMETHOD (:POINT DIRED-NODE) () (POINT))

(DEFMETHOD (:REVERT DIRED-NODE-MIXIN) (&AUX DIRECTORY)
  (SETQ TICK ':READ-ONLY)
  (SETQ *STYLE* 0
	*STYLE-NAME* NIL)			;for completeness
  (WITH-READ-ONLY-SUPPRESSED (SELF)
    (WITH-BUFFER-PROTECTED SELF
      (DELETE-INTERVAL SELF)
      (BARF-ON-ERRORS (FS:FILE-OPERATION-FAILURE)
	(SETQ DIRECTORY (FS:DIRECTORY-LIST PATHNAME ':SORTED ':DELETED)))
      ;; Mark all files that are the newest
      (DIRED-COMPUTE-GREATER-THANS (CDR DIRECTORY))
      (LET ((*STREAM* (OPEN-INTERVAL-STREAM FIRST-BP)))
	(DECLARE (SPECIAL *STREAM*))
	(MULTIPLE-VALUE-BIND (TOTAL-BLOCKS DELETED-BLOCKS)
	    (LIST-DIRECTORY-INTERNAL PATHNAME DIRECTORY
				     #'(LAMBDA (STRING FILE)
					 (SEND *STREAM* ':STRING-OUT STRING)
					 (SETF (LINE-PLIST (BP-LINE (SEND *STREAM* ':READ-BP)))
					       (SELECTQ FILE
						 ((NIL) NIL)
						 ((:SWITCH) (LIST ':SWITCH T))
						 (OTHERWISE (CONS ':PATHNAME FILE))))
					 (SEND *STREAM* ':TYO #\CR)))
	  ;; Put the disk space summary after the header line(s).
	  ;; Note: this disk-space summary is not the same as :disk-space-description
	  ;; which comes back from some (TOPS-20) file servers.  This summary is specific
	  ;; to the file spec provided, not general to the whole directory.
	  (INSERT (FORWARD-LINE FIRST-BP
				(1+ (LOOP FOR (PN) IN DIRECTORY
					  WHILE (NULL PN)	;header
					  COUNT T))
				T)
		  (FORMAT NIL "~2@T~:D block~:P in the files listed~
                               ~:[~;, including ~D deleted block~:P~]~%"
			  TOTAL-BLOCKS (> DELETED-BLOCKS 0) DELETED-BLOCKS))
	  ;; Put point on the first line that has a pathname on it
	  (MOVE-BP (SEND SELF ':POINT)
		   (LOOP FOR LINE = (BP-LINE FIRST-BP) THEN (LINE-NEXT LINE) DO
		     (COND ((NULL LINE) (RETURN (BP-LINE LAST-BP)))
			   ((GET (LOCF (LINE-PLIST LINE)) ':PATHNAME) (RETURN LINE))))
		   0)))
      (SEND SELF :PUTPROP 'T :SORTED-UP-BY-NAME))))

(DEFMETHOD (WITH-BUFFER-PROTECTED-INTERNAL DIRED-NODE-MIXIN) (CONTINUATION)
  (LET* ((OLD-BUFFER-P (NOT (BP-= FIRST-BP LAST-BP)))
	 (SAVED-INTERVAL (WHEN OLD-BUFFER-P (COPY-INTERVAL SELF)))
	 (SAVED-SORTED-PROP (WHEN OLD-BUFFER-P (SEND SELF :GET :SORTED-UP-BY-NAME))))
    (UNWIND-PROTECT-CASE ()
	(FUNCALL CONTINUATION)
      (:ABORT
	(WHEN OLD-BUFFER-P
	  ;; Restore the state of the buffer
	  (DELETE-INTERVAL SELF)
	  (INSERT-INTERVAL (INTERVAL-LAST-BP SELF) SAVED-INTERVAL)
	  (SEND SELF :PUTPROP SAVED-SORTED-PROP :SORTED-UP-BY-NAME)
	  (TYPEIN-LINE "The original state of ~A has been restored"
		       (SEND SELF :NAME)))))))


(DEFMETHOD (:BUFFER-INIT-OPTIONS DIRED-NODE-MIXIN) ()
  '(:SET-PATHNAME))

;;; Try to give a useful default for commands like Source Compare when the *Dired-n*
;;; buffer is selected.  The following method gets rid of wildcard components, and
;;; fills them in from the editor's defaults (note that this message must return a
;;; fully-defaulted pathname).
(DEFMETHOD (:DEFAULT-PATHNAME DIRED-NODE-MIXIN) ()
  (OR (GET (LOCF (LINE-PLIST (BP-LINE (POINT)))) ':PATHNAME)
      ;; There is no file on this line, use the argument pathname to Dired, getting
      ;; rid of the wildness.
      (FS:MERGE-PATHNAMES
	(LET ((PN PATHNAME))
	  (WHEN (SEND PN ':NAME-WILD-P)
	    (SETQ PN (SEND PN ':NEW-NAME NIL)))
	  (WHEN (SEND PN ':TYPE-WILD-P)
	    (SETQ PN (SEND PN ':NEW-TYPE NIL)))
	  (WHEN (SEND PN ':VERSION-WILD-P)
	    (SETQ PN (SEND PN ':NEW-VERSION NIL)))
	  PN)
	*PATHNAME-DEFAULTS*)))

(DEFMETHOD (:GENERATE-NAME DIRED-NODE-MIXIN) (SETS)
  (LET ((PN (LOOP FOR (KEY VAL) ON SETS BY #'CDDR
		  WHEN (EQ KEY :SET-PATHNAME)
		    DO (RETURN VAL))))
    (IF (NULL PN)
	(SEND SELF :NAME)			;use default generated name (shouldn't happen)
      (LOOP WITH BASE-NAME = (FORMAT NIL "*Dired* ~A" (SEND PN :STRING-FOR-PRINTING))
	    FOR I FROM 1
	    AS BUFNAM FIRST BASE-NAME THEN (FORMAT NIL "~A (~D)" BASE-NAME I)
	    UNLESS (FIND-BUFFER-NAMED BUFNAM)
	      RETURN (LET ((DEFAULT-CONS-AREA
			     *ZMACS-BUFFER-AREA*))
		       (STRING-APPEND BUFNAM))))))

(DEFCOM COM-DIRED-HELP "Explains Dired commands" ()
  (SEND STANDARD-OUTPUT ':STRING-OUT
"You are in the directory editor.  All commands are single characters.
Many of these commands take an argument to indicate how many times to do
them.  A negative argument means to move backwards through the list of
files.  Mouse-Right shows a menu that operates on the list itself and has
some of the file operating commands as well.
Char    Action
RUBOUT	Cancels the marked action, such as deletion, for the file above the cursor.
 SPACE	Moves to the next file.
   !	Moves to the next file that is not backed up.
   $	Complements the Don't Reap ($) flag.
   ,	Describes the attribute list of this file.  In text files, this is
	the -*- line of the file.  In compiled Lisp files, it includes information
	about the compilation as well.
   .	Changes properties of current file.
   @	Complements the Don't Delete (@) flag.
   =	Compares this file with the newest version (Source Compare).
   A	Marks this file for function application.
   C	Copies this file to someplace else.
   D    Marks the file for deletion (K, c-D, c-K are synonyms).
")
  (WHEN (TYPEP *INTERVAL* 'BUFFER)		;can edit only if Dired under Editor
    (SEND STANDARD-OUTPUT ':STRING-OUT
"   E	Edits the file in a buffer, or runs Dired if the line is subdirectory name.
"))
  (SEND STANDARD-OUTPUT ':STRING-OUT
"   F    Marks the file for formatting and printing on the standard hardcopy device.
   G	Sets and enforces the generation retention count.
  xH	Marks excess versions of the file for deletion (argument means whole directory)
   I    Immediately executes the specified operations (deletions, et al; see Q), then updates
        the buffer with respect to the filesystem, and remains in the directory editor.
   L    Loads the file into Lisp
  xN    Moves to the next file with more than x versions (see File Versions Kept variable).
   P	Marks the file for printing on the standard hardcopy device.
   Q	Exits.  It shows the files marked for deletion and prompts for confirmation.
	The exit display marks files that have special status, using the following marks:
	  :   a link
	  >   most recent version
	  $   file marked for not reaping
	  !   file not backed up
   R	Renames this file to something else.
   U    Marks for undeletion either the file on the current line or on the line above.
   V	Shows (/"views/") the file without creating a buffer (using Show File conventions).
   X	Executes an extended command (same as m-X).
")
  DIS-NONE)

(DEFUN DIRED-MAP-OVER-LINES (N-TIMES FUNCTION)
  (WITH-READ-ONLY-SUPPRESSED (*INTERVAL*)
    (LET ((BP (BEG-LINE (POINT)))
	  (BOTTOM (INTERVAL-LAST-BP *INTERVAL*)))
      (DOTIMES (IGNORE (ABS N-TIMES))
	(AND (MINUSP N-TIMES) (SETQ BP (BEG-LINE BP -1 T)))
	(DIRED-LINE-PATHNAME (BP-LINE BP))
	(AND (BP-= BP BOTTOM) (RETURN))
	(FUNCALL FUNCTION (BP-LINE BP))
	(AND (PLUSP N-TIMES) (SETQ BP (BEG-LINE BP +1 T))))
      (MOVE-POINT BP))
    DIS-TEXT))

(DEFUN DIRED-MAP-OVER-LINES-AND-MARK (N-TIMES CHARACTER)
  (DIRED-MAP-OVER-LINES N-TIMES
			#'(LAMBDA (LINE)
			    (SETQ LINE (MUNG-LINE LINE))
			    (PREPARE-TO-CHANGE (CREATE-BP LINE 0) (CREATE-BP LINE 1))
			    (ASET CHARACTER LINE 0))))
  
(DEFCOM COM-DIRED-DELETE "Marks one or more files for deletion" ()
  (DIRED-MAP-OVER-LINES-AND-MARK *NUMERIC-ARG* #/D))

(DEFCOM COM-DIRED-UNDELETE "Removes deletion mark for one or more files." () 
  (DIRED-MAP-OVER-LINES-AND-MARK (IF (AND (NOT *NUMERIC-ARG-P*)
					  (NOT (MEMQ (BP-CHAR (BEG-LINE (POINT)))
						     '(#/D #/P #/A))))
				     -1
				     *NUMERIC-ARG*)
				 #\SP))

(DEFCOM COM-DIRED-REVERSE-UNDELETE
	"Removes deletion mark for one or more files, backwards." ()
  (SETQ *NUMERIC-ARG* (- *NUMERIC-ARG*))
  (COM-DIRED-UNDELETE))

(DEFCOM COM-DIRED-HARDCOPY-FILE
	"Marks a file to be printed on the standard hardcopy printer." ()
   (DIRED-MAP-OVER-LINES *NUMERIC-ARG*
			 #'(LAMBDA(LINE)
			     (UNLESS (DIRED-PRINTABLE-FILE-P LINE)
			       (BARF "Can't print a file of this type!"))
			     (SETQ LINE (MUNG-LINE LINE))
			     (PREPARE-TO-CHANGE (CREATE-BP LINE 0) (CREATE-BP LINE 1))
			     (ASET #/P LINE 0))))

(DEFCOM COM-DIRED-APPLY-FUNCTION
	"Marks one or more files to have a function applied to them." ()
  (DIRED-MAP-OVER-LINES-AND-MARK *NUMERIC-ARG* #/A))

(DEFUN DIRED-PRINTABLE-FILE-P (LINE &AUX PLIST PATHNAME TYPE BYTE)
  (SETQ PLIST (LOCF (LINE-PLIST LINE))
	PATHNAME (GET PLIST ':PATHNAME)
	TYPE (FUNCALL PATHNAME ':CANONICAL-TYPE))
  (OR (AND (GET TYPE :HARDCOPY-FORMAT-FOR-THIS-CANONICAL-TYPE) T)
      (AND (NOT (OR (AND (SYMBOLP TYPE) (GET TYPE ':BINARY-FILE-BYTE-SIZE))
		    (MEM #'STRING-EQUAL TYPE '("DRW" "WD" "FASL" ":EJ" "TAGS" "OUTPUT"))))
	   (OR (MEMQ (GET PLIST ':BYTE-SIZE) '(7 8))
	       ;; This low bit in word check really only makes sense on a pdp10.
	       (NEQ (SEND (SEND PATHNAME ':HOST) ':MACHINE-TYPE) ':PDP10)
	       (WITH-OPEN-FILE (STREAM PATHNAME :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 9.))
		 (DOTIMES (IGNORE 4) (SETQ BYTE (FUNCALL STREAM ':TYI)))
		 (NOT (BIT-TEST BYTE 1)))))))

(DEFCOM COM-DIRED-NEXT-UNDUMPED "Finds the next file that is not backed up." ()
  (DO ((BP (BEG-LINE (POINT) +1 NIL) (BEG-LINE BP +1 NIL)))
      ((NULL BP) (BARF))
    (AND (GET (LOCF (LINE-PLIST (BP-LINE BP))) ':NOT-BACKED-UP)
	 (RETURN (MOVE-POINT BP))))
  DIS-BPS)

(DEFCOM COM-DIRED-COMPLEMENT-DONT-DELETE "Complements the Don't Delete (@) flag." ()
  (LET* ((LINE (BP-LINE (POINT)))
	 (PLIST (LOCF (LINE-PLIST LINE)))
	 (PATHNAME (GET PLIST ':PATHNAME)))
    (WHEN (NULL PATHNAME) (BARF "No pathname on this line"))
    (LET ((NEW-VALUE (NOT (GET PLIST ':DONT-DELETE))))
      (BARF-ON-ERRORS (FS:FILE-ERROR)
	(FS:CHANGE-FILE-PROPERTIES PATHNAME T ':DONT-DELETE NEW-VALUE))
      (PUTPROP PLIST NEW-VALUE ':DONT-DELETE))
    (UPDATE-DIRED-LINE-FROM-PLIST LINE)))

(DEFCOM COM-DIRED-COMPLEMENT-NO-REAP-FLAG "Complements the Don't Reap ($) flag." ()
  (LET* ((LINE (BP-LINE (POINT)))
	 (PLIST (LOCF (LINE-PLIST LINE)))
	 (PATHNAME (GET PLIST ':PATHNAME)))
    (WHEN (NULL PATHNAME) (BARF "No pathname on this line"))
    (LET ((NEW-VALUE (NOT (GET PLIST ':DONT-REAP))))
      (BARF-ON-ERRORS (FS:FILE-ERROR)
	(FS:CHANGE-FILE-PROPERTIES PATHNAME T ':DONT-REAP NEW-VALUE))
      (PUTPROP PLIST NEW-VALUE ':DONT-REAP))
    (UPDATE-DIRED-LINE-FROM-PLIST LINE)))

;;; Regenerate the specified line from its property list, which presumably has
;;; just been updated.
(DEFUN UPDATE-DIRED-LINE-FROM-PLIST (LINE)
  (LET ((PLIST (LOCF (LINE-PLIST LINE)))
	(STATE (AREF LINE 0)))
    (SETQ LINE (MUNG-LINE LINE))
    (SETF (LINE-LENGTH LINE) 0)
    (WITH-OUTPUT-TO-STRING (S LINE)
      (FUNCALL *DIRECTORY-SINGLE-FILE-LISTER* (CONS (GET PLIST ':PATHNAME) (CDR PLIST)) S))
    (ASET STATE LINE 0)
    (DECF (LINE-LENGTH LINE))			;Don't leave carriage return in line
    (WHEN (AND (EQ LINE (BP-LINE (POINT)))
	       (> (BP-INDEX (POINT)) (LINE-LENGTH LINE)))
      (MOVE-POINT (BP-LINE (POINT)) (LINE-LENGTH LINE)))
    DIS-TEXT))

(DEFCOM COM-DIRED-NEXT-HOG "Finds the next file with superfluous versions.
/"Superfluous/" is defined by the value of the *FILE-VERSIONS-KEPT*
variable (whose default is 2) or by a numeric argument." ()
  (DO* ((HOG (IF *NUMERIC-ARG-P* *NUMERIC-ARG* *FILE-VERSIONS-KEPT*))
	(LINE (BP-LINE (POINT)) (LINE-NEXT LINE))
	(STOP-LINE (BP-LINE (INTERVAL-LAST-BP *INTERVAL*)))
	(PATHNAME (DIRED-LINE-PATHNAME LINE T))
	(NAME (AND PATHNAME (SEND PATHNAME ':NAME)))
	(TYPE (AND PATHNAME (SEND PATHNAME ':TYPE)))
	(SKIP-P PATHNAME)	;Skipping current file (if any)
	FIRST-LINE		;Save first line in this group
	N-VERSIONS)		;Number of versions of current file so far
       ((EQ LINE STOP-LINE)
	(BARF "No more files with more than ~D version~:P." HOG))
     (SETQ PATHNAME (DIRED-LINE-PATHNAME LINE T))
    CHECK-AGAIN
     (COND ((NULL PATHNAME)
	    (SETQ NAME NIL SKIP-P NIL))
	   ((AND NAME
		 (EQUAL NAME (FUNCALL PATHNAME ':NAME))
		 (EQUAL TYPE (FUNCALL PATHNAME ':TYPE)))
	    (WHEN (AND (NOT SKIP-P)
		       (> (SETQ N-VERSIONS (1+ N-VERSIONS)) HOG))
	      (MOVE-POINT FIRST-LINE 0)
	      (RECENTER-WINDOW *WINDOW* ':START (POINT))
	      (RETURN DIS-BPS)))
	   (T (SETQ SKIP-P NIL
		    NAME (SEND PATHNAME ':NAME)
		    TYPE (SEND PATHNAME ':TYPE)
		    N-VERSIONS 0
		    FIRST-LINE LINE)
	      (GO CHECK-AGAIN)))))

(DEFCOM COM-DIRED-SRCCOM
	"Compares the file against the newest version.
With a numeric argument, asks what to compare it against." ()
  (LET ((PATHNAME (DIRED-LINE-PATHNAME (BP-LINE (POINT)))))
    (SRCCOM-FILE PATHNAME
		 (AND *NUMERIC-ARG-P*
		      (FS:MERGE-PATHNAMES
			(ACCEPT-DEFAULTED-PATHNAME
			  "Compare against" (SEND PATHNAME :NEW-VERSION ':NEWEST)
			  :DONT-MERGE-DEFAULT T)
			;; Be sure to merge against the same default that was presented
			;; to the user as the claimed default!
			(SEND PATHNAME :NEW-VERSION ':NEWEST)))
		 :IGNORE-CASE-AND-STYLE (BIT-TEST #o2 *NUMERIC-ARG*)
		 :IGNORE-WHITESPACE (BIT-TEST #o4 *NUMERIC-ARG*)
		 :DELETED T)
    DIS-NONE))

;(TV:ADD-TYPEOUT-ITEM-TYPE *TYPEOUT-COMMAND-ALIST* FILE "Compare" SRCCOM-FILE NIL
;			  "Compares this file with the newest version (SRCCOM).")

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SRCCOM-FILE
						  (FS:PATHNAME "Compare" *ZMACS-COMTAB*)
						  (FILE)
  `(SRCCOM-FILE ,FILE))

(COMPILER:FUNCTION-DEFINED 'SRCCOM:SOURCE-COMPARE)	; Forward reference: Utilities
(DEFUN SRCCOM-FILE (PATHNAME-1 &OPTIONAL PATHNAME-2
		    &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE DELETED)
  (OR PATHNAME-2 (SETQ PATHNAME-2 (SEND PATHNAME-1 ':NEW-VERSION ':NEWEST)))
  (PROMPT-LINE "Comparing ~A with ~A" PATHNAME-1 PATHNAME-2)
  (SRCCOM:SOURCE-COMPARE PATHNAME-1 PATHNAME-2
			 (IF (INSIDE-ZMACS-P)
			     (MAKE-TYPEOUT-BUFFER-STREAM
			       ':SOURCE-COMPARE
			       ':SET-NAMES (LIST PATHNAME-1 PATHNAME-2))
			   STANDARD-OUTPUT)
			 T
			 :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
			 :IGNORE-WHITESPACE IGNORE-WHITESPACE
			 :DELETED DELETED))

;These surely is a better way to do this.  But for now...
(DEFUN INSIDE-ZMACS-P ()
  (TYPEP *INTERVAL* 'NAMED-BUFFER))

(DEFCOM COM-DIRED-SHOW-FILE "Shows the file or directory using Show File conventions." ()
  (LET* ((LINE (BP-LINE (POINT)))
	 (PATHNAME (DIRED-LINE-PATHNAME LINE)))
    (IF (DIRED-LINE-DIRECTORY-P LINE)
	(VIEW-DIRECTORY (FUNCALL (FUNCALL PATHNAME ':PATHNAME-AS-DIRECTORY)
				 ':NEW-PATHNAME ':NAME ':WILD ':TYPE ':WILD ':VERSION ':WILD))
	(VIEW-FILE PATHNAME (GET (LOCF (LINE-PLIST LINE)) ':DELETED))))
  DIS-NONE)

(DEFCOM COM-DIRED-RENAME-FILE "Rename this file to something else." ()
  (LET* ((LINE (BP-LINE (POINT)))
	 (PATHNAME (DIRED-LINE-PATHNAME LINE))
	 (NEW-PATHNAME (ACCEPT-DEFAULTED-PATHNAME
			 `("Rename ~? to" "~A" (,PATHNAME)) PATHNAME
			 :SPECIAL-VERSION NIL :DIRECTION :WRITE :DONT-MERGE-DEFAULT T)))
    (BARF-ON-ERRORS (FS:FILE-OPERATION-FAILURE)
      (MULTIPLE-VALUE (NIL NIL NEW-PATHNAME)
	(RENAME-FILE-INTERNAL PATHNAME NEW-PATHNAME #'TYPEIN-LINE))
      (LET ((NEW-PROPERTIES (FS:FILE-PROPERTIES NEW-PATHNAME)))
	(SETF (LINE-PLIST LINE) (CONS ':PATHNAME NEW-PROPERTIES))
	(UPDATE-DIRED-LINE-FROM-PLIST LINE)
	(ADJUST-SWITCH-LINES-AROUND-DIRED-LINE LINE))))
  DIS-TEXT)

(DEFUN ADJUST-SWITCH-LINES-AROUND-DIRED-LINE (LINE)
  (WITH-READ-ONLY-SUPPRESSED (*INTERVAL*)
    (LET* ((LAST-LINE (BP-LINE (INTERVAL-LAST-BP *INTERVAL*)))
	   (PREVIOUS-LINE (LINE-PREVIOUS LINE))
	   (NEXT-LINE (LINE-NEXT LINE))
	   (PATHNAME (GET (LOCF (LINE-PLIST LINE)) ':PATHNAME))
	   (DEVICE (SEND PATHNAME ':DEVICE))
	   (DIRECTORY (SEND PATHNAME ':DIRECTORY)))
      (COND ((EQ NEXT-LINE LAST-LINE))
	    ;; If next line has a pathname, maybe insert a switch line before it
	    ((SETQ PATHNAME (GET (LOCF (LINE-PLIST NEXT-LINE)) ':PATHNAME))
	     (UNLESS (AND (EQUAL (SEND PATHNAME ':DEVICE) DEVICE)
			  (EQUAL (SEND PATHNAME ':DIRECTORY) DIRECTORY))
	       (INSERT-DIRED-SWITCH-LINE-BEFORE NEXT-LINE)))
	    ;; If next line is a switch line, maybe remove it
	    ((AND (GET (LOCF (LINE-PLIST NEXT-LINE)) ':SWITCH)
		  (SETQ PATHNAME (GET (LOCF (LINE-PLIST (LINE-NEXT NEXT-LINE))) ':PATHNAME)))
	     (WHEN (AND (EQUAL (SEND PATHNAME ':DEVICE) DEVICE)
			(EQUAL (SEND PATHNAME ':DIRECTORY) DIRECTORY))
	       (LET ((BP (CREATE-BP NEXT-LINE 0)))
		 (DELETE-INTERVAL BP (BEG-LINE BP 1 T) T)))))
      (COND ((SETQ PATHNAME (GET (LOCF (LINE-PLIST PREVIOUS-LINE)) ':PATHNAME))
	     ;; If previous line has a pathname, maybe insert a switch in between
	     (UNLESS (AND (EQUAL (SEND PATHNAME ':DEVICE) DEVICE)
			  (EQUAL (SEND PATHNAME ':DIRECTORY) DIRECTORY))
	       (INSERT-DIRED-SWITCH-LINE-BEFORE LINE)))
	    ((NOT (GET (LOCF (LINE-PLIST PREVIOUS-LINE)) ':SWITCH))
	     ;; If previous line is a header line, maybe insert a switch in between
	     (UNLESS (AND (EQUAL (SEND (SEND *INTERVAL* ':PATHNAME) ':DEVICE) DEVICE)
			  (EQUAL (SEND (SEND *INTERVAL* ':PATHNAME) ':DIRECTORY) DIRECTORY))
	       (INSERT-DIRED-SWITCH-LINE-BEFORE LINE)))
	    (T
	     ;; Adjust preceding switch line
	     (LET ((BP (CREATE-BP PREVIOUS-LINE 0)))
	       (DELETE-INTERVAL BP (BEG-LINE BP 1 T) T))
	     (SETQ PATHNAME (OR (GET (LOCF (LINE-PLIST (LINE-PREVIOUS PREVIOUS-LINE)))
				     ':PATHNAME)
				(SEND *INTERVAL* ':PATHNAME)))
	     (UNLESS (AND (EQUAL (SEND PATHNAME ':DEVICE) DEVICE)
			  (EQUAL (SEND PATHNAME ':DIRECTORY) DIRECTORY))
	       (INSERT-DIRED-SWITCH-LINE-BEFORE LINE)))))))

(DEFUN INSERT-DIRED-SWITCH-LINE-BEFORE (LINE)
  (LET* ((PATHNAME (GET (LOCF (LINE-PLIST LINE)) :PATHNAME))
	 (STRING (FORMAT NIL "~A:~A" (SEND (SEND PATHNAME :HOST) :NAME-AS-FILE-COMPUTER)
			 (SEND PATHNAME :STRING-FOR-DIRECTORY)))
	 (LINE1 (CREATE-LINE 'ART-STRING (STRING-LENGTH STRING) *INTERVAL*))
	 (PREV (LINE-PREVIOUS LINE)))
    (COPY-ARRAY-CONTENTS STRING LINE1)
    (SETF (LINE-PLIST LINE1) (LIST ':SWITCH T))
    (COND (PREV
           (SETF (LINE-NEXT PREV) LINE1)
           (SETF (LINE-PREVIOUS LINE1) PREV)))
    (SETF (LINE-NEXT LINE1) LINE)
    (SETF (LINE-PREVIOUS LINE) LINE1)))

(DEFCOM COM-DIRED-DESCRIBE-ATTRIBUTE-LIST "Describes attributes of the current file.
Describes the attribute list of the current file.  The attribute list for a
file containing text is the -*- line.  For compiled files, it is the data
structure that holds the attribute list."
	()
  (LET* ((LINE (BP-LINE (POINT)))
	 (PATHNAME (DIRED-LINE-PATHNAME LINE))
	 	;Be graceful about file-reading errors, and about unknown file formats
	 (PLIST (LET ((SI:*SUPPRESS-VERSION-WARNING* T))
		  (BARF-ON-ERRORS (FS:FILE-OPERATION-FAILURE FERROR)
		    (FS:PATHNAME-ATTRIBUTE-LIST PATHNAME)))))
    (FORMAT T (IF PLIST "~&Attributes for ~A~%" "~&No attributes for ~A~%") PATHNAME)
    (LOOP FOR (PROP VAL) ON PLIST BY 'CDDR DOING
	  (SELECTQ PROP
	    (:MODE (FORMAT T " Major mode is ~A~%" VAL))
	    (:BASE (FORMAT T " Base is ~D.~%" VAL))
	    (:PACKAGE (FORMAT T " Package is ~A~%" VAL))
	    (:SYNTAX (FORMAT T " Syntax is ~A~%" VAL))
	    (:LOWERCASE (AND VAL (FORMAT T " It is lowercase.~%")))
	    (:FONTS (FORMAT T " Fonts: ~{~A~^, ~}~%" (IF (LISTP VAL) VAL (LIST VAL))))
	    (:QFASL-SOURCE-FILE-UNIQUE-ID (FORMAT T " Compiled from ~A~%" VAL))
	    (:COMPILE-DATA (LEXPR-FUNCALL #'FORMAT T
			     " Compiled by ~A using ~A on ~\TIME\ in System ~D.~D~%" VAL))
	    (:PATCH-FILE (AND VAL (FORMAT T " It is a patch file.~%")))
	    (OTHERWISE (FORMAT T " ~A: ~S~%" PROP VAL)))))
  DIS-TEXT)

(DEFCOM COM-DIRED-EDIT-FILE
	"Edits the file in a buffer; or runs Dired if the line is a directory name.
If given a numeric argument while in two-window mode, edits the file in the other window."
	()
  (UNLESS (TYPEP *INTERVAL* 'BUFFER)		;Make sure this is a buffer
    (BARF
      "~&You can't edit from within top-level (DIRED).  Use m-X Dired within the editor."))
  (LET* ((LINE (BP-LINE (POINT)))
	 (PATHNAME (DIRED-LINE-PATHNAME LINE))
	 (OTHER-WINDOW NIL))
    ;; If the file is deleted, we can't edit it.  If it is also newest, proceeding
    ;; would edit the newest undeleted version, which is not this version, which
    ;; is probably not what the user intended.
    (WHEN (GET (LOCF (LINE-PLIST LINE)) :DELETED)
      (BARF "You can't edit this file; it's deleted"))
    ;; If we are pointing at the newest version, don't edit a specific version.
    ;; This makes the right thing happen if the user modifies and saves the file.
    ;; This duplicates what FIND-DEFAULTED-FILE does below, but is faster.
    (WHEN (GET (LOCF (LINE-PLIST LINE)) :NEWEST)
      (SETQ PATHNAME (SEND PATHNAME :NEW-VERSION :NEWEST)))
    (WHEN *NUMERIC-ARG-P*
      (SETQ OTHER-WINDOW (OTHER-WINDOW (AND (NEQ *NUMERIC-ARG-P* ':CONTROL-U)
					    *NUMERIC-ARG*)))
      (WHEN OTHER-WINDOW
	(ROTATE-TO-OTHER-WINDOW OTHER-WINDOW)))
    ;; Edit the file or directory with the appropriate editor
    (COND ((DIRED-LINE-DIRECTORY-P LINE)
	   (DIRECTORY-EDIT (SEND (SEND PATHNAME :PATHNAME-AS-DIRECTORY)
				 :NEW-PATHNAME :NAME :WILD :TYPE :WILD :VERSION :WILD)))
	  (T
	   ;; Edit a file.  Call :FIND-DEFAULTED-FILE so that if this specific version
	   ;; is now the newest version, we will notice that fact.
	   (WHEN (SEND (MAKE-DEFAULTED-PATHNAME (STRING PATHNAME) (PATHNAME-DEFAULTS)) :WILD-P)
	     ;; This case is pretty wierd, but it has been demonstrated that it
	     ;; is possible to create LMFS pathnames that contain asterisks!
	     ;; This check prevents recursion loops at a lower level.
	     (BARF "Wildcard pathnames are not allowed for Dired editing."))
	   (FIND-DEFAULTED-FILE PATHNAME)
	   (LET ((BLURB (IF OTHER-WINDOW 
			    (KEY-FOR-COMMAND 'COM-OTHER-WINDOW)
			    (OR (KEY-FOR-COMMAND 'COM-SELECT-PREVIOUS-BUFFER)
				(LET ((TEM (KEY-FOR-COMMAND 'COM-SELECT-BUFFER)))
				  (AND TEM (STRING-APPEND TEM " Return")))))))
	     (WHEN BLURB
	       (TYPEIN-LINE "Type ~A to return to DIRED" BLURB))
	     DIS-TEXT)))))

;;; Figure out if the file on this line is a directory, preferable without contacting server
;;; It's a directory if the file properties returned by the server said it was one.
;;; Otherwise, it might be a directory if it has the right file type to be a directory
;;; on LMFS, TOPS-20, or VMS, and on some versions of Unix it also might be a directory
;;; if it's a link (a link to a directory doesn't have the :DIRECTORY property).
;;; If it might be a directory, try opening it and see what the server says.
(DEFUN DIRED-LINE-DIRECTORY-P (LINE)
  (LET ((PLIST (LOCF (LINE-PLIST LINE)))
	(PATHNAME (DIRED-LINE-PATHNAME LINE)))
    (OR (GET PLIST :DIRECTORY)
	(AND (OR (GET PLIST :LINK-TO)
		 (STRING-EQUAL (SEND PATHNAME :TYPE) "DIRECTORY")
		 (STRING-EQUAL (SEND PATHNAME :TYPE) "DIR"))	;gag
	     (CONDITION-CASE ()
		  (CLOSE (OPEN PATHNAME))
		(FS:INVALID-OPERATION-FOR-DIRECTORY T)
		(:NO-ERROR NIL))))))

(DEFCOM COM-DIRED-LOAD-FILE
	"Loads the file" ()
  (OR (TYPEP *INTERVAL* 'BUFFER) (BARF))	; makes sure this is a buffer
  (LET* ((LINE (BP-LINE (POINT)))
	 (PATHNAME (DIRED-LINE-PATHNAME LINE)))
    (AND (GET (LOCF (LINE-PLIST LINE)) ':NEWEST)	; was this the newest version in Dired
	 (SETQ PATHNAME (FUNCALL PATHNAME ':NEW-VERSION ':NEWEST)))	; find the newest
    (LOAD PATHNAME)
    (FORMAT T "~&Loading Done.~%")
    DIS-NONE))

;;; This goes through a sorted list of files and puts :NEWEST properties on files
(DEFUN DIRED-COMPUTE-GREATER-THANS (DIRECTORY)
  (DO ((FILES DIRECTORY (CDR FILES))
       (FILE NIL NEXT-FILE)
       (NEXT-FILE)
       (NEWEST-FILE NIL))
      (NIL)
    (SETQ NEXT-FILE (CAR FILES))
    (WHEN FILE
      (WHEN (MEMQ (FUNCALL (CAR FILE) ':VERSION) '(:NEWEST :UNSPECIFIC))
	(SETQ NEWEST-FILE FILE))
      (WHEN (OR (NULL NEXT-FILE)
		(NOT (AND (EQUAL (FUNCALL (CAR FILE) ':NAME)
				 (FUNCALL (CAR NEXT-FILE) ':NAME))
			  (EQUAL (FUNCALL (CAR FILE) ':TYPE)
				 (FUNCALL (CAR NEXT-FILE) ':TYPE)))))
	(PUTPROP (OR NEWEST-FILE FILE) T ':NEWEST)
	(SETQ NEWEST-FILE NIL)))
    (OR FILES (RETURN NIL))))

(DEFCOM COM-DIRED-COPY-FILE "Copy this file to another place.
The numeric argument controls copying of attributes.  With no
numeric argument, creation date and author are copied, and the
mode (binary or character) of copy is determined by the file being copied.
To force mode, or suppress author or creation date copying, 
supply a numeric argument created by adding the values corresponding
to the descriptions below:

 1    Force copy in 16-bit binary mode.
 2    Force copy in character (text) mode.
 3    Force copy in 8-bit binary mode.

 4    Suppress copy of author.

 8    Suppress copy of creation date." ()
 
  (LET (BYTE-SIZE
	(CHARACTERS :DEFAULT)
	(NUMERIC-ARG *NUMERIC-ARG*))		;Bind so command history saves original value
    (IF (NOT ( 1 NUMERIC-ARG 15.))
	(BARF "Invalid numeric argument for file copy: ~D.  Valid range is 1 to 15."
	      NUMERIC-ARG))
    (OR *NUMERIC-ARG-P* (SETQ NUMERIC-ARG 0))
    (IF (AND (BIT-TEST 1 NUMERIC-ARG)
	     (BIT-TEST 2 NUMERIC-ARG))
	(SETQ BYTE-SIZE 8 CHARACTERS NIL)
      (if (BIT-TEST 1 NUMERIC-ARG)
	  (SETQ BYTE-SIZE 16 CHARACTERS NIL)
	(WHEN (BIT-TEST 2 NUMERIC-ARG)
	  (SETQ CHARACTERS T))))
    (LET* ((LINE (BP-LINE (POINT)))
	   (FROM-PATHNAME (DIRED-LINE-PATHNAME LINE))
	   (AUTH (NOT (BIT-TEST 4 NUMERIC-ARG)))
	   (COPY-CREATION-DATE (NOT (BIT-TEST 8. NUMERIC-ARG)))	;great, huh?
	   (TO-PATHNAME (ACCEPT-DEFAULTED-PATHNAME
			  `("Copy file ~? to" "~A" (,FROM-PATHNAME)) FROM-PATHNAME
			  :SPECIAL-VERSION NIL :DIRECTION :WRITE :DONT-MERGE-DEFAULT T)))
      (BARF-ON-ERRORS (FS:FILE-OPERATION-FAILURE)
	  (COPYF FROM-PATHNAME TO-PATHNAME
		 ':CHARACTERS CHARACTERS :BYTE-SIZE BYTE-SIZE
		 ':COPY-CREATION-DATE COPY-CREATION-DATE
		 ':COPY-AUTHOR AUTH ':REPORT-STREAM *TYPEIN-WINDOW*)))
    DIS-NONE))

(DEFCOM COM-DIRED-FORMAT-FILE
	"Marks a file to be formatted and printed on the standard hardcopy printer." ()
   (DIRED-MAP-OVER-LINES *NUMERIC-ARG*
			 #'(LAMBDA (LINE)
			     (UNLESS (DIRED-FORMATTABLE-FILE-P LINE)
			       (BARF "Can't format a file of this type!"))
			     (SETQ LINE (MUNG-LINE LINE))
			     (PREPARE-TO-CHANGE (CREATE-BP LINE 0) (CREATE-BP LINE 1))
			     (ASET #/F LINE 0))))

(DEFUN DIRED-FORMATTABLE-FILE-P (LINE)
  (LET* ((PLIST (LOCF (LINE-PLIST LINE)))
	 (PATHNAME (GET PLIST :PATHNAME))
	 (TYPE (FUNCALL PATHNAME :CANONICAL-TYPE))
	 BYTE)
    ;; cribbed directly from DIRED-PRINTABLE-FILE-P
    (AND (NOT (OR (AND (SYMBOLP TYPE) (GET TYPE :BINARY-FILE-BYTE-SIZE))
		  (MEM #'STRING-EQUAL TYPE
		       '("DIRECTORY" "DRW" "WD" "FASL" ":EJ" "TAGS" "OUTPUT"))))
	 (OR (MEMQ (GET PLIST :BYTE-SIZE) '(7 8))
	     ;; This low bit in word check really only makes sense on a pdp10.
	     (NEQ (SEND (SEND PATHNAME :HOST) :MACHINE-TYPE) :PDP10)
	     (WITH-OPEN-FILE (STREAM PATHNAME :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 9.))
	       (DOTIMES (IGNORE 4) (SETQ BYTE (FUNCALL STREAM :TYI)))
	       (NOT (BIT-TEST BYTE 1)))))))

(COMPILER:FUNCTION-DEFINED 'FORMAT-STREAM)	; Forward reference: Basic Sage
(COMPILER:FUNCTION-DEFINED 'SI:MAKE-INPUT-STREAM-FROM-TRIBUTARIES)	;forward ref: NSage.
(DEFUN DIRED-FORMAT-FILE (LINE)
  (LET ((PATHNAME (DIRED-LINE-PATHNAME LINE T)))
    (DECLARE (SPECIAL HARDCOPY:*DEFAULT-TEXT-PRINTER*))
    (IF (NULL HARDCOPY:*DEFAULT-TEXT-PRINTER*)
	"I don't know how to print files at your site"
	(ERROR-RESTART (ERROR "Retry printing ~A" PATHNAME)
	  (WITH-OPEN-FILE (IN PATHNAME)
	    (FORMAT-STREAM (SI:MAKE-INPUT-STREAM-FROM-TRIBUTARIES
			     :CHARACTERS T
			     :STRING "@begin(text)"
			     :STREAM IN
			     :STRING "@end(text)")
			   HARDCOPY:*DEFAULT-TEXT-PRINTER*
			   IN
			   (STRING PATHNAME)))))))

(DEFUN DIRED-EXIT (&REST ARGS)
  (LEXPR-SEND *CURRENT-COMMAND-LOOP* ':EXIT-SPECIAL-BUFFER ARGS))

(DEFCOM COM-DIRED-ABORT "Aborts Dired, taking no action on the files.
The Dired buffer remains." ()
  (IF *NUMERIC-ARG-P*
      (BEEP)
    (DIRED-EXIT))
  DIS-NONE)

(DEFCOM COM-DIRED-EXIT "Leaves Dired, prompting for confirmation on requested actions.
It shows the files marked for action and requires yes-no confirmation.  You can confirm,
confirm with expungement of deleted files, stop and return to Dired, or quit without action.
Use the HELP key for explanation." ()
  (DIRED-EXECUTE T)) 

(DEFCOM COM-DIRED-IMMEDIATE 
	"Performs requested actions, prompting for confirmation, and updates the buffer.
It shows the files marked for action and requires yes-no confirmation.  You can confirm,
confirm with expungement of deleted files, or take no action.  If actions are confirmed,
the buffer is updated with respect to the (new) state of the filesystem.
Use the HELP key for explanation." ()
  (DIRED-EXECUTE NIL)) 

(DEFUN DIRED-EXECUTE (EXIT-TOO)
  (LOOP WITH CURRENT-INTERVAL = *INTERVAL*
	AND DELETE-FILES
	AND UNDELETE-FILES
	AND HARDCOPY-FILES
	AND FORMATTABLE-FILES
	AND APPLY-FILES
	AND LAST-LINE = (BP-LINE (INTERVAL-LAST-BP *INTERVAL*))
	AND DELETED-P
	;;Each element is a line
	FOR LINE FIRST (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)) THEN (LINE-NEXT LINE)
	UNTIL (EQ LINE LAST-LINE)
	DO (WHEN (DIRED-LINE-PATHNAME LINE T)
	     (SETQ DELETED-P (GET (LOCF (LINE-PLIST LINE)) ':DELETED))
	     (SELECTQ (AREF LINE 0)
	       (#\D (OR DELETED-P (PUSH LINE DELETE-FILES)))
	       (#\SP (AND DELETED-P (PUSH LINE UNDELETE-FILES)))
	       (#\P (PUSH LINE HARDCOPY-FILES))
	       (#\F (PUSH LINE FORMATTABLE-FILES))
	       (#\A (PUSH LINE APPLY-FILES))))
	FINALLY
	  (SETQ DELETE-FILES (NREVERSE DELETE-FILES)
		UNDELETE-FILES (NREVERSE UNDELETE-FILES)
		HARDCOPY-FILES (NREVERSE HARDCOPY-FILES)
		FORMATTABLE-FILES (NREVERSE FORMATTABLE-FILES)
		APPLY-FILES (NREVERSE APPLY-FILES))
	  (CATCH 'RETURN-TO-DIRED
	    (PROGN	 
	      (WHEN (OR DELETE-FILES UNDELETE-FILES
			HARDCOPY-FILES FORMATTABLE-FILES APPLY-FILES)
		(DIRED-LIST-FILES-FOR-OPERATION DELETE-FILES "deleted")
		(DIRED-LIST-FILES-FOR-OPERATION UNDELETE-FILES "undeleted")
		(DIRED-LIST-FILES-FOR-OPERATION HARDCOPY-FILES "printed")
		(DIRED-LIST-FILES-FOR-OPERATION FORMATTABLE-FILES "formatted and printed")
		(DIRED-LIST-FILES-FOR-OPERATION APPLY-FILES "processed by function")
		(MULTIPLE-VALUE-BIND (DO-IT EXPUNGE)
		    (DIRED-FILE-QUERY (AND DELETE-FILES
					   (OR *ALWAYS-OFFER-TO-EXPUNGE*
					       (MEMQ :UNDELETE
						     (SEND (SEND (SEND *INTERVAL* :PATHNAME)
								 :HOST)
							   :ATTRIBUTES))))
				      EXIT-TOO)
		  (WHEN DO-IT
		    (WHEN DELETE-FILES
		      (DIRED-DO-FILE-LIST DELETE-FILES 'DIRED-DELETE-FILE "delete"
					  ':DELETE-MULTIPLE-FILES))
		    (WHEN UNDELETE-FILES
		      (DIRED-DO-FILE-LIST UNDELETE-FILES 'DIRED-UNDELETE-FILE "undelete"
					  ':UNDELETE-MULTIPLE-FILES))
		    (WHEN HARDCOPY-FILES
		      (DIRED-DO-FILE-LIST HARDCOPY-FILES 'DIRED-HARDCOPY-FILE "print"))
		    (WHEN FORMATTABLE-FILES
		      (DIRED-DO-FILE-LIST FORMATTABLE-FILES 'DIRED-FORMAT-FILE
					  "format and print"))
		    (WHEN APPLY-FILES
		      ;;This crock to fake out read-function-name.
		      ;;Mouse would not win particularily.
		      (LET* ((*MINI-BUFFER-REPEATED-COMMAND* '())
			     (*DIRED-FUNCTION-TO-APPLY*
			       (READ-FUNCTION-SPEC "Function to apply"
						   'COMPILER:COMPILE-FILE 'LAMBDA-OK)))
			(DIRED-DO-FILE-LIST APPLY-FILES 'DIRED-APPLY-FUNCTION NIL)))
		    (WHEN EXPUNGE
		      (LOOP FOR LINE IN DELETE-FILES
			    AS DIR = (SEND (GET (LOCF (LINE-PLIST LINE)) ':PATHNAME)
					   ':NEW-PATHNAME ':NAME NIL ':TYPE NIL
					   ':VERSION NIL)
			    UNLESS (MEMQ DIR DIRECTORIES)
			      COLLECT DIR INTO DIRECTORIES
			    FINALLY
			      (IF DIRECTORIES
				  (MAPC #'EXPUNGE-DIRECTORY-INTERNAL DIRECTORIES)
				(TYPEIN-LINE "Nothing deleted; nothing to expunge")))))))
	      (RETURN (IF EXIT-TOO
			  (DIRED-EXIT 
			    T				;Make not modified
			    CURRENT-INTERVAL		;Buffer we're exiting.
			    ;; Whether or not to select another buffer.
			    (SELECTQ
			      (IF (EQ *DIRED-KILL-BUFFER-ON-EXIT* :ASK)
				  (TYPEIN-LINE-Y-OR-N-P "Kill buffer ~A upon exiting? "
							CURRENT-INTERVAL)
				  *DIRED-KILL-BUFFER-ON-EXIT*)
			      (NIL T)
			      (T :KILL)
			      (OTHERWISE T)))
			  ;; If not exiting, get fresh directory listing.
			  (SEND CURRENT-INTERVAL :REVERT)
			  (THROW 'RETURN-TO-DIRED T))))))
  DIS-BPS)

(DEFUN DIRED-LIST-FILES-FOR-OPERATION (FILES OPERATION-NAME)
  (WHEN FILES
    (FORMAT T "~&File~P to be ~A in ~A~2%"
	    (LENGTH FILES) OPERATION-NAME *DIRED-PATHNAME-NAME*)
    (SCL:FORMAT-ITEM-LIST
      FILES :PRINTER (LAMBDA (LINE STREAM)
		       (DECLARE (SYS:DOWNWARD-FUNCTION))
		       (LET ((PLIST (LOCF (LINE-PLIST LINE))))
			 (FORMAT STREAM "~C~C~C~C "
				 (IF (GET PLIST ':DONT-REAP) #/$ #\SP)
				 (IF (GET PLIST ':NOT-BACKED-UP) #/! #\SP)
				 (IF (GET PLIST ':LINK-TO) #/: #\SP)
				 (IF (GET PLIST ':NEWEST) #/> #\SP))
			 (LET ((PATHNAME (GET PLIST :PATHNAME)))
			   (SCL:PRESENT PATHNAME `((,(CL:TYPE-OF PATHNAME)) :FORMAT :DIRED)
					:STREAM STREAM)))))
    (FORMAT T "~2&")))

(DEFUN DIRED-FILE-QUERY (OFFER-EXPUNGE-P OFFER-ABORT-P)
  (SELECTQ (LET ((QUERY-IO *TYPEOUT-WINDOW*))
	     (FQUERY `(:CHOICES (((:YES "Yes.") #/Y #/Space)
				 ,@(WHEN OFFER-EXPUNGE-P
				     '(((:EXPUNGE "Yes, then expunge.") #/E)))
				 ((:NO "No.") #/N #/Rubout)
				 ,@(WHEN OFFER-ABORT-P
				     '(((:ABORT "Abort.") #/Q)
				       ((:ABORT "Abort.") #/X))))
		       :HELP-FUNCTION (DIRED-FILE-QUERY-HELP ,OFFER-EXPUNGE-P ,OFFER-ABORT-P))
		     "OK? "))
    (:YES T)
    (:EXPUNGE (VALUES T T))
    (:NO (THROW 'RETURN-TO-DIRED T))
    (:ABORT NIL)))

(DEFUN DIRED-FILE-QUERY-HELP (STREAM OFFER-EXPUNGE-P OFFER-ABORT-P)
  (FORMAT STREAM "~%Type Y to go ahead~
	          ~:[~;, E to go ahead then expunge~]~
                  , N to return to DIRED with no action~
	          ~:[~;,~% Q or X to abort out of DIRED~]."
	  OFFER-EXPUNGE-P OFFER-ABORT-P))

;; A MULTIPLE-FILE-MESSAGE is assumed to take a first argument of ERROR-P
;; and a second of FILES.  It should return either an error (entire operation failed),
;; NIL (entire operation successful),
;; or a list of values corresponding to individual message values.
;; Note that no one uses this, so probably it doesn't work
(DEFUN DIRED-DO-FILE-LIST (FILES FUNCTION NAME &OPTIONAL MULTIPLE-FILE-MESSAGE
			   &AUX ERR PATHS)
  (COND ((AND MULTIPLE-FILE-MESSAGE
	      (SEND (DIRED-LINE-PATHNAME (CAR FILES) T)
		    ':OPERATION-HANDLED-P MULTIPLE-FILE-MESSAGE))
	 (SETQ PATHS (LOOP FOR FILE IN FILES COLLECTING (DIRED-LINE-PATHNAME FILE T)))
	 (SETQ ERR (SEND (CAR PATHS) MULTIPLE-FILE-MESSAGE
				     NIL	;error-p
				     PATHS))
	 (AND NAME (ERRORP ERR)
	      (DIRED-REPORT-ERROR NAME "files" ERR))
	 (AND NAME ERR
	      (DO ((F PATHS (CDR F))
		   (E ERR (CDR E)))
		  ((NULL E))
		(AND (ERRORP (CAR E))
		     (DIRED-REPORT-ERROR NAME (CAR F) (CAR E))))))
	(T (TV:DOLIST-NOTING-PROGRESS (LINE FILES (FORMAT () "Dired ~a files"
							  (OR NAME "process")))
	     (SETQ ERR (FUNCALL FUNCTION LINE))
	     (AND NAME
		  (ERRORP ERR)
		  (DIRED-REPORT-ERROR NAME (DIRED-LINE-PATHNAME LINE T) ERR))))))

(DEFUN DIRED-REPORT-ERROR (NAME PATH ERR)
  (FORMAT *TYPEOUT-WINDOW* "~&Cannot ~A ~A because "
	  NAME PATH)
  (SEND ERR (IF (SEND ERR ':OPERATION-HANDLED-P ':REPORT-WITHOUT-PATHNAME)
		':REPORT-WITHOUT-PATHNAME ':REPORT)
	    *TYPEOUT-WINDOW*))

(DEFUN DIRED-DELETE-FILE (LINE)
  (LET ((ERROR (DELETEF (DIRED-LINE-PATHNAME LINE T) NIL)))
    (OR (ERRORP ERROR) (PUTPROP (LOCF (LINE-PLIST LINE)) T ':DELETED))
    ERROR))

(DEFUN DIRED-UNDELETE-FILE (LINE)
  (LET ((ERROR (UNDELETEF (DIRED-LINE-PATHNAME LINE T) NIL)))
    (OR (ERRORP ERROR) (PUTPROP (LOCF (LINE-PLIST LINE)) NIL ':DELETED))
    ERROR))

(DEFUN DIRED-APPLY-FUNCTION (LINE)
  (FUNCALL *DIRED-FUNCTION-TO-APPLY* (DIRED-LINE-PATHNAME LINE T)))

(DEFUN DIRED-HARDCOPY-FILE (LINE)
  (DIRED-HARDCOPY-FILE-1 (DIRED-LINE-PATHNAME LINE T)))

(COMPILER:FUNCTION-DEFINED 'HARDCOPY:HARDCOPY-FILE)	; Forward reference: Hardcopy
(DEFUN DIRED-HARDCOPY-FILE-1 (PATHNAME)
  (DECLARE (SPECIAL HARDCOPY:*DEFAULT-TEXT-PRINTER*))
  (IF (NULL HARDCOPY:*DEFAULT-TEXT-PRINTER*)
      "I don't know how to print files at your site"
      (ERROR-RESTART (ERROR "Retry printing ~A" PATHNAME)
	(HARDCOPY:HARDCOPY-FILE PATHNAME HARDCOPY:*DEFAULT-TEXT-PRINTER*))))

(DEFPROP DIRED-SORT-BY-INCREASING-FILE-NAME "Sort by file name (up)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-INCREASING-FILE-NAME "Sort buffer by increasing file name"
	 DOCUMENTATION)
(DEFUN DIRED-SORT-BY-INCREASING-FILE-NAME ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (FS:PATHNAME-LESSP (DIRED-LINE-PATHNAME L1 T)
				     (DIRED-LINE-PATHNAME L2 T)))
	      ;;only case where legit to do multi-verison operations like "H"
	      T))

(DEFPROP DIRED-SORT-BY-DECREASING-FILE-NAME "Sort by file name (down)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-DECREASING-FILE-NAME "Sort buffer by decreasing file name"
	 DOCUMENTATION)
(DEFUN DIRED-SORT-BY-DECREASING-FILE-NAME ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (FS:PATHNAME-LESSP (DIRED-LINE-PATHNAME L2 T)
				     (DIRED-LINE-PATHNAME L1 T)))))


(DEFPROP DIRED-SORT-BY-INCREASING-REFERENCE-DATE "Sort by reference date (up)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-INCREASING-REFERENCE-DATE "Sort buffer by increasing reference date"
	 DOCUMENTATION)
(DEFUN DIRED-SORT-BY-INCREASING-REFERENCE-DATE ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (LET ((P1 (LOCF (LINE-PLIST L1)))
			(P2 (LOCF (LINE-PLIST L2))))
		    (< (OR (GET P1 ':REFERENCE-DATE) -1)
		       (OR (GET P2 ':REFERENCE-DATE) -1))))))

(DEFPROP DIRED-SORT-BY-DECREASING-REFERENCE-DATE "Sort by reference date (down)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-DECREASING-REFERENCE-DATE "Sort buffer by decreasing reference date"
	 DOCUMENTATION)
(DEFUN DIRED-SORT-BY-DECREASING-REFERENCE-DATE ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (LET ((P1 (LOCF (LINE-PLIST L1)))
			(P2 (LOCF (LINE-PLIST L2))))
		    (< (OR (GET P2 ':REFERENCE-DATE) -1)
		       (OR (GET P1 ':REFERENCE-DATE) -1))))))

(DEFPROP DIRED-SORT-BY-INCREASING-CREATION-DATE "Sort by creation date (up)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-INCREASING-CREATION-DATE "Sort buffer by increasing creation date"
	 DOCUMENTATION)
(DEFUN DIRED-SORT-BY-INCREASING-CREATION-DATE ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (LET ((P1 (LOCF (LINE-PLIST L1)))
			(P2 (LOCF (LINE-PLIST L2))))
		    (< (OR (GET P1 ':CREATION-DATE)
			   (GET P1 ':FILE-CREATION-DATE)
			   -1)
		       (OR (GET P2 ':CREATION-DATE)
			   (GET P2 ':FILE-CREATION-DATE)
			   -1))))))

(DEFPROP DIRED-SORT-BY-DECREASING-CREATION-DATE "Sort by creation date (down)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-DECREASING-CREATION-DATE "Sort buffer by decreasing creation date"
	 DOCUMENTATION)
(DEFUN DIRED-SORT-BY-DECREASING-CREATION-DATE ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (LET ((P1 (LOCF (LINE-PLIST L1)))
			(P2 (LOCF (LINE-PLIST L2))))
		    (< (OR (GET P2 ':CREATION-DATE)
			   (GET P2 ':FILE-CREATION-DATE)
			   -1)
		       (OR (GET P1 ':CREATION-DATE)
			   (GET P1 ':FILE-CREATION-DATE)
			   -1))))))

(DEFPROP DIRED-SORT-BY-INCREASING-SIZE "Sort by file size (up)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-INCREASING-SIZE "Sort buffer by increasing file size" DOCUMENTATION)
(DEFUN DIRED-SORT-BY-INCREASING-SIZE ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (< (DIRED-LINE-FILE-SIZE L1) (DIRED-LINE-FILE-SIZE L2)))))

(DEFPROP DIRED-SORT-BY-DECREASING-SIZE "Sort by file size (down)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-DECREASING-SIZE "Sort buffer by decreasing file size" DOCUMENTATION)
(DEFUN DIRED-SORT-BY-DECREASING-SIZE ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (< (DIRED-LINE-FILE-SIZE L2) (DIRED-LINE-FILE-SIZE L1)))))

(DEFPROP DIRED-SORT-BY-INCREASING-PARTITION "Sort by partition ID (up)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-INCREASING-PARTITION "Sort buffer by increasing partition ID"
	 DOCUMENTATION)

(DEFUN DIRED-SORT-BY-INCREASING-PARTITION ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (LET ((P1 (LOCF (LINE-PLIST L1)))
			(P2 (LOCF (LINE-PLIST L2))))
		    (< (OR (GET P1 ':PARTITION-ID)
			   -1)
		       (OR (GET P2 ':PARTITION-ID)
			   -1))))))

(DEFPROP DIRED-SORT-BY-DECREASING-PARTITION "Sort by partition ID (down)" COMMAND-NAME)
(DEFPROP DIRED-SORT-BY-DECREASING-PARTITION "Sort buffer by decreasing partition ID"
	 DOCUMENTATION)

(DEFUN DIRED-SORT-BY-DECREASING-PARTITION ()
  (DIRED-SORT #'(LAMBDA (L1 L2)
		  (LET ((P1 (LOCF (LINE-PLIST L1)))
			(P2 (LOCF (LINE-PLIST L2))))
		    (< (OR (GET P2 ':PARTITION-ID)
			   -1)
		       (OR (GET P1 ':PARTITION-ID)
			   -1))))))

;;; Return size in bits
(DEFUN DIRED-LINE-FILE-SIZE (LINE &AUX PLIST BYTE-SIZE BLOCK-SIZE)
  (SETQ PLIST (LOCF (LINE-PLIST LINE)))
  (COND ((GET PLIST ':LINK-TO) -1)		;Sort links together in this mode
	((AND (SETQ BYTE-SIZE (GET PLIST ':BYTE-SIZE))
	      (NOT (ZEROP BYTE-SIZE))		;don't be fooled by TOPS-20 brain damage
	      (NOT (ZEROP (GET PLIST ':LENGTH-IN-BYTES))))
	 (* BYTE-SIZE (GET PLIST ':LENGTH-IN-BYTES)))
	((SETQ BLOCK-SIZE (GET PLIST ':BLOCK-SIZE))
	 (* BLOCK-SIZE (GET PLIST ':LENGTH-IN-BLOCKS)))
	(T -2)))				;Sort randoms together

(DEFUN DIRED-SORT (PREDICATE &OPTIONAL SORTED-UP-BY-NAME)
  (WITH-READ-ONLY-SUPPRESSED (*INTERVAL*)
    ;; First we have to skip over the header lines in the buffer.  There are usually
    ;; 2 or 3 of them.
    (LOOP WITH LAST-LINE = (BP-LINE (INTERVAL-LAST-BP *INTERVAL*))
	  WITH SWITCH = NIL
	  FOR LINE ON (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)) BY 'LINE-NEXT
	  UNTIL (EQ LINE LAST-LINE)
	  WHEN (CADR (GETL (LOCF (LINE-PLIST LINE)) '(:PATHNAME :SWITCH)))
	    DO ;; Now remove all the switch lines
	       (LOOP FOR LINE1 = LINE THEN (LINE-NEXT LINE1)
		     UNTIL (EQ LINE1 LAST-LINE)
		     WHEN (GET (LOCF (LINE-PLIST LINE1)) ':SWITCH)
		       DO (SETQ SWITCH T)
			  (LET ((BP (CREATE-BP LINE1 0)))
			    (DELETE-INTERVAL BP (BEG-LINE BP 1 T) T))
			  (WHEN (EQ LINE LINE1)
			    (SETQ LINE (LINE-NEXT LINE))))
	       ;; Sort the pathname lines
	       (SORT-LINES-INTERVAL PREDICATE
				    (PROG1 (CREATE-BP LINE 0) (SETQ LINE (LINE-PREVIOUS LINE)))
				    (INTERVAL-LAST-BP *INTERVAL*) T)
	       ;; Put the switch lines back in if any are needed for this dired
	       (WHEN SWITCH
		 (LOOP WITH PATHNAME = (SEND *INTERVAL* ':PATHNAME)
		       WITH LAST-DIRECTORY = (SEND PATHNAME ':DIRECTORY)
		       WITH LAST-DEVICE = (SEND PATHNAME ':DEVICE)
		       DO (SETQ LINE (LINE-NEXT LINE))
		       UNTIL (EQ LINE LAST-LINE)
		       DO (SETQ PATHNAME (GET (LOCF (LINE-PLIST LINE)) ':PATHNAME))
			  (UNLESS (AND (EQUAL (SEND PATHNAME ':DIRECTORY) LAST-DIRECTORY)
				       (EQUAL (SEND PATHNAME ':DEVICE) LAST-DEVICE))
			    (SETQ LAST-DIRECTORY (SEND PATHNAME ':DIRECTORY)
				  LAST-DEVICE (SEND PATHNAME ':DEVICE))
			    (INSERT-DIRED-SWITCH-LINE-BEFORE LINE))))
	       (RETURN)))
  (SEND *INTERVAL* :PUTPROP SORTED-UP-BY-NAME :SORTED-UP-BY-NAME)
  DIS-TEXT)

(DEFUN CHECK-DIRED-SORTED-UP-BY-DATE
       (&OPTIONAL
	(ERROR-STRING
	  "Can't do multiple-version operations unless the files are sorted upward by name."))
  (UNLESS (SEND *INTERVAL* :GET :SORTED-UP-BY-NAME)
    (BARF ERROR-STRING)))

(DEFCOM COM-DIRED-AUTOMATIC "Marks superfluous versions of the file for deletion.
A numeric argument means to process all the files, not just the current
one.  /"Superfluous/" is defined by the value of the *FILE-VERSIONS-KEPT*
variable (whose default is 2).  In addition, it deletes files with types in
the list *TEMP-FILE-TYPE-LIST* (whose default includes Press files).  It does
not delete any files that are marked with Don't Reap ($) or Don't Delete (@)." ()
  (CHECK-DIRED-SORTED-UP-BY-DATE)
  (IF *NUMERIC-ARG-P* (COM-DIRED-AUTOMATIC-ALL)
      ;; Start by making FIRST-LINE and LAST-LINE bracket all of this file,
      ;; and make N-VERSIONS be the number of numeric versions of it
    (LET* ((FIRST-LINE (BP-LINE (POINT)))
	   (LAST-LINE)
	   (STOP-LINE (BP-LINE (INTERVAL-LAST-BP *INTERVAL*)))
	   (N-VERSIONS 0)
	   (PATHNAME (DIRED-LINE-PATHNAME FIRST-LINE)))
      (DO ((LINE FIRST-LINE (LINE-NEXT LINE))
	   (NAME (FUNCALL PATHNAME ':NAME))
	   (TYPE (FUNCALL PATHNAME ':TYPE)))
	  ((EQ LINE STOP-LINE) (SETQ LAST-LINE LINE))
	(SETQ PATHNAME (DIRED-LINE-PATHNAME LINE T))
	(OR (AND PATHNAME			;stop on comment line as well as new name
		 (EQUAL (FUNCALL PATHNAME ':NAME) NAME)
		 (OR (EQUAL (FUNCALL PATHNAME ':TYPE) TYPE)
		     (MEMQ (FUNCALL PATHNAME ':VERSION) '(:NEWEST :UNSPECIFIC))))
	    (RETURN (SETQ LAST-LINE LINE)))
	(AND (NOT (MEMQ (FUNCALL PATHNAME ':VERSION) '(:NEWEST :UNSPECIFIC)))
	     (SETQ N-VERSIONS (1+ N-VERSIONS))))
      ;; Now scan through, assuming we are sorted by increasing
      ;; versions, and mark the oldest versions for deletion.  Files
      ;; with non-numeric versions aren't deleted.  Also mark temp
      ;; types.
      (DO ((LINE FIRST-LINE (LINE-NEXT LINE))
	   (N-TO-DELETE (- N-VERSIONS *FILE-VERSIONS-KEPT*))
	   (PATHNAME) (TYPE) (VERSION))
	  ((EQ LINE LAST-LINE))
	(SETQ PATHNAME (DIRED-LINE-PATHNAME LINE)
	      TYPE (FUNCALL PATHNAME ':TYPE)
	      VERSION (FUNCALL PATHNAME ':VERSION))
	(COND ((OR (AND (NUMBERP VERSION)
			(PLUSP N-TO-DELETE))
		   (MEMBER TYPE *TEMP-FILE-TYPE-LIST*))
	       (OR (LOOP FOR PROT IN '(:DONT-REAP :DONT-DELETE)
			 THEREIS (GET (LOCF (LINE-PLIST LINE)) PROT))
		   (WITH-READ-ONLY-SUPPRESSED (*INTERVAL*)
		     (ASET #/D (MUNG-LINE LINE) 0)))
	       (AND (NOT (MEMQ (FUNCALL PATHNAME ':VERSION) '(:NEWEST :UNSPECIFIC)))
		    (SETQ N-TO-DELETE (1- N-TO-DELETE))))))))
  DIS-TEXT)

(DEFCOM COM-DIRED-AUTOMATIC-ALL "Marks all superfluous files in the directory for deletion.
/"Superfluous/" is defined by the value of the *FILE-VERSIONS-KEPT*
variable (whose default is 2).  In addition, it deletes files with types in
the list *TEMP-FILE-TYPE-LIST* (whose default includes Press files).  It does
not delete any files that are marked with Don't Reap ($) or Don't Delete (@)." ()
  (DO ((LINE (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)) (LINE-NEXT LINE))
       (STOP-LINE (BP-LINE (INTERVAL-LAST-BP *INTERVAL*)))
       (NAME NIL)	;If non-NIL is TYPE being skipped
       (TYPE)
       (*NUMERIC-ARG-P* NIL)
       (PATHNAME)
       (FIRST-FILE-LINE NIL))
      ((EQ LINE STOP-LINE)
       (MOVE-POINT FIRST-FILE-LINE 0))
    (SETQ PATHNAME (DIRED-LINE-PATHNAME LINE T))
   CHECK-THIS
    (COND (PATHNAME
	   (OR FIRST-FILE-LINE (SETQ FIRST-FILE-LINE LINE))
	   (COND ((NULL NAME)
		  (MOVE-POINT LINE 0)
		  (COM-DIRED-AUTOMATIC)
		  (SETQ NAME (FUNCALL PATHNAME ':NAME)
			TYPE (FUNCALL PATHNAME ':TYPE)))
		 ((AND (EQUAL (FUNCALL PATHNAME ':NAME) NAME)
		       (OR (EQUAL (FUNCALL PATHNAME ':TYPE) TYPE)
			   (MEMQ (FUNCALL PATHNAME ':VERSION) '(:NEWEST :UNSPECIFIC)))))
		 (T (SETQ NAME NIL)
		    (GO CHECK-THIS))))))
 DIS-TEXT)

(DEFCOM COM-DIRED-SET-GENERATION-RETENTION-COUNT 
	"Set and enforce generation retention count on this group of files.
Sets it to the numeric argument if supplied, otherwise prompts for a number."
	()
  ;; See if GRC is supported for this kind of file.  Currently it is not for FEP files
  (MULTIPLE-VALUE-BIND (NIL INDICATORS)
      (FS:FILE-PROPERTIES (DIRED-LINE-PATHNAME (BP-LINE (POINT))))
    (UNLESS (LOOP FOR I IN INDICATORS THEREIS (EQ I :GENERATION-RETENTION-COUNT))
      (BARF "Sorry, this file does not support a generation retention count.")))
  (CHECK-DIRED-SORTED-UP-BY-DATE)
  (LET* ((LINE (BP-LINE (POINT)))
	 (PATHNAME (SEND (DIRED-LINE-PATHNAME LINE) ':NEW-VERSION ':NEWEST))
	 (GRC (IF *NUMERIC-ARG-P* *NUMERIC-ARG*
		(TYPEIN-LINE-ACCEPT '((DW::TOKEN-OR-TYPE (:ALL)
							 ((CL:INTEGER 0))))
				    :PROMPT `("Number of generations of ~? to keep"
					      "~A" (,PATHNAME))
				    :PROVIDE-DEFAULT NIL)))
	 (OLD-GRC (GET (LOCF (LINE-PLIST LINE)) ':GENERATION-RETENTION-COUNT)))
    (WHEN (EQ GRC :ALL)
      (SETQ GRC 0))
    (FS:CHANGE-FILE-PROPERTIES PATHNAME T ':GENERATION-RETENTION-COUNT GRC)
    (SETF (GET (LOCF (LINE-PLIST LINE)) ':GENERATION-RETENTION-COUNT) GRC)
    ;; Now loop over all versions of this file and enforce the GRC
    (LOOP FOR LINE = (LOOP FOR LINE = (BP-LINE (POINT)) THEN NEXT-LINE
			   AS NEXT-LINE = (LINE-NEXT LINE)
			   AS NEXT-LINE-FILE = (DIRED-LINE-PATHNAME NEXT-LINE T)
			   UNTIL (NULL NEXT-LINE-FILE)
			   WHILE (EQ (SEND NEXT-LINE-FILE ':NEW-VERSION ':NEWEST) PATHNAME)
			   FINALLY (MOVE-POINT NEXT-LINE 0)
				   (RETURN LINE))
		     THEN (LINE-PREVIOUS LINE)
	  AS FILE = (DIRED-LINE-PATHNAME LINE T)
	  UNTIL (NULL FILE)
	  AS RANK UPFROM 1
	  WHILE (EQ (SEND FILE ':NEW-VERSION ':NEWEST) PATHNAME)
	  ;; FILE is the RANK'th from newest version of the file in question,
	  ;; assuming that the buffer is sorted normally.
	  DO (IF (AND (PLUSP GRC) (> RANK GRC))
		 (OR (CHAR-EQUAL (AREF LINE 0) #/D)
		     (GET (LOCF (LINE-PLIST LINE)) ':DONT-REAP)
		     (GET (LOCF (LINE-PLIST LINE)) ':DONT-DELETE)
		     (WITH-READ-ONLY-SUPPRESSED (*INTERVAL*)
		       (ASET #/D (MUNG-LINE LINE) 0)))
		 (AND (CHAR-EQUAL (AREF LINE 0) #/D)
		      (WITH-READ-ONLY-SUPPRESSED (*INTERVAL*)
			(ASET #\SP (MUNG-LINE LINE) 0)))))
    (TYPEIN-LINE (COND ((OR (NULL OLD-GRC) (ZEROP OLD-GRC))
			"Generation retention count of ~A set to ~*~D.")
		       ((= GRC OLD-GRC) "Generation retention count of ~A is already ~D.")
		       (T "Generation retention count of ~A changed from ~D to ~D."))
		 PATHNAME OLD-GRC GRC))
  DIS-TEXT)

(DEFCOM COM-DIRED-CHANGE-FILE-PROPERTIES "Edits the properties of this file.
It works for files, not for directories.  The properties involved are
deletion, delete protection, and generation retention counts." ()
  (LET* ((LINE (BP-LINE (POINT)))
	 (PLIST (LOCF (LINE-PLIST LINE)))
	 (PATHNAME (GET PLIST ':PATHNAME)))
    (WHEN (NULL PATHNAME) (BARF "No pathname on this line"))
    (LOOP FOR (INDICATOR VALUE) ON (CHANGE-FILE-PROPERTIES (DIRED-LINE-PATHNAME LINE))
				BY 'CDDR
	  DO (PUTPROP PLIST VALUE INDICATOR))
    (UPDATE-DIRED-LINE-FROM-PLIST LINE)))

(DEFFLAVOR STANDALONE-MAIL-OR-DIRED-MIXIN () (TOP-LEVEL-EDITOR))

(DEFMETHOD (:SELECT-SPECIAL-BUFFER STANDALONE-MAIL-OR-DIRED-MIXIN) (TYPE REVERT-P &REST SETS)
  TYPE						;Not used
  (LOOP FOR (KEY VAL) ON SETS BY 'CDDR
	WITH LEGAL-OPTIONS = (SEND *INTERVAL* ':BUFFER-INIT-OPTIONS)
	WHEN (MEMQ KEY LEGAL-OPTIONS)
	  DO (SEND *INTERVAL* KEY VAL))
  (AND REVERT-P (SEND *INTERVAL* ':REVERT)))

(DEFMETHOD (:EXIT-SPECIAL-BUFFER STANDALONE-MAIL-OR-DIRED-MIXIN) (&REST IGNORE)
  (THROW 'EXIT-TOP-LEVEL T))

(DEFFLAVOR DIRED-TOP-LEVEL-EDITOR
       ((*MAJOR-MODE* (MODE-OF-FLAVOR 'DIRED-MODE))
	*DIRED-PATHNAME-NAME*)
       (STANDALONE-MAIL-OR-DIRED-MIXIN TOP-LEVEL-EDITOR)
  (:SPECIAL-INSTANCE-VARIABLES *DIRED-PATHNAME-NAME* *MAJOR-MODE*)
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :DIRED)
  (:DOCUMENTATION :SPECIAL-PURPOSE "The editor for the (DIRED) function"))


(DEFMETHOD (:DIRED DIRED-TOP-LEVEL-EDITOR) (PATHNAME &AUX FRAME)
  (SETQ PATHNAME (FS:MERGE-PATHNAMES
		   PATHNAME
		   (SEND (FS:DEFAULT-PATHNAME) ':NEW-PATHNAME
			 ':NAME ':WILD ':TYPE ':WILD ':VERSION ':WILD)
		   ':WILD))
  (SETQ *INTERVAL* (WINDOW-INTERVAL *WINDOW*))
  (SEND *INTERVAL* :PUTPROP *MAJOR-MODE* :MAJOR-MODE)
  (DIRECTORY-EDIT PATHNAME)
  (MUST-REDISPLAY *WINDOW* DIS-ALL)
  (SETQ FRAME (WINDOW-FRAME *WINDOW*))
  (TV:WINDOW-CALL (FRAME :DEACTIVATE)
    (SEND *TYPEOUT-WINDOW* ':MAKE-COMPLETE)	;Make sure typeout window does not come up
    (TYPEIN-LINE " ")		      ;so it won't hang on FORMAT to unexposed typein window
    (SEND SELF ':EDIT)))

(DEFUN MAKE-DIRED-COMMAND-LOOP (IGNORE &OPTIONAL (SUPERIOR TV:DEFAULT-SCREEN))
  (LET* ((FRAME (TV:MAKE-WINDOW 'ZWEI-FRAME :SUPERIOR SUPERIOR))
	 (WINDOW (SEND FRAME :CREATE-WINDOW 'ZWEI-WINDOW-PANE
		       :MARGIN-COMPONENTS 'DW:((MARGIN-RAGGED-BORDERS :THICKNESS 1)
					       (MARGIN-WHITE-BORDERS )
					       (MARGIN-SCROLL-BAR )
					       (MARGIN-WHITE-BORDERS :THICKNESS 2)
					       (MARGIN-LABEL :STRING "Dired")))))
    (SET-WINDOW-INTERVAL WINDOW (CREATE-INTERVAL NIL NIL 'DIRED-NODE))
    (MAKE-COMMAND-LOOP *STANDARD-COMTAB* WINDOW 'DIRED-TOP-LEVEL-EDITOR)))

(DEFRESOURCE DIRED-COMMAND-LOOP (&OPTIONAL (SUPERIOR TV:DEFAULT-SCREEN))
  :CONSTRUCTOR MAKE-DIRED-COMMAND-LOOP
  :INITIAL-COPIES 0)

(DEFUN DIRED (&OPTIONAL (PATHNAME ""))
  (USING-RESOURCE (*CURRENT-COMMAND-LOOP* DIRED-COMMAND-LOOP)
    (SEND *CURRENT-COMMAND-LOOP* ':DIRED PATHNAME)))

;; Come clean, Mr. Clean File.  `Clean' may be the verb of choice for the
;; UI `in crowd' right now, but I promise you it's just a fad.  `Reap' is a
;; classic verb destined to return from the ashes.  [This function is the 
;; same as Clean File (below) but provides naming consistency with the past.
;; If you edit one of these functions, be sure to edit the other compatibly.]  -kmp 3-Oct-90
(DEFCOM COM-REAP-FILE "Deletes excess versions or temp file types of the specified file.
/"Excess/" is defined by the value of the variable *FILE-VERSIONS-KEPT* or by
a numeric arg.  The temp file types are defined by *TEMP-FILE-TYPE-LIST*.  It
accepts wild cards in the file name specification.  Prompts for confirmation
of files being deleted.  " ()
  (LET ((PATHNAME (READ-DEFAULTED-WILD-PATHNAME "Reap File")))
    (TYPEIN-LINE "") (PROMPT-LINE "")
    (REAP-FILE PATHNAME
	       (IF *NUMERIC-ARG-P* *NUMERIC-ARG* *FILE-VERSIONS-KEPT*)
	       *TYPEOUT-WINDOW* *MODE-LINE-WINDOW* *TYPEIN-WINDOW*))
  (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE)
  DIS-NONE)

;; Get with it, Mr. Reap File.  The UI Police has decided that the name `Reap'
;; is out of vogue, and that's that.  [This function is the same as Reap File (above)
;; but provides naming consistency with CP.  If you edit one of these functions,
;; be sure to edit the other compatibly.]  -kmp 3-Oct-90
(DEFCOM COM-CLEAN-FILE "Deletes excess versions or temp file types of the specified file.
/"Excess/" is defined by the value of the variable *FILE-VERSIONS-KEPT* or by
a numeric arg.  The temp file types are defined by *TEMP-FILE-TYPE-LIST*.  It
accepts wild cards in the file name specification.  Prompts for confirmation
of files being deleted.  " ()
  (LET ((PATHNAME (READ-DEFAULTED-WILD-PATHNAME "Clean File")))
    (TYPEIN-LINE "") (PROMPT-LINE "")
    (REAP-FILE PATHNAME
	       (IF *NUMERIC-ARG-P* *NUMERIC-ARG* *FILE-VERSIONS-KEPT*)
	       *TYPEOUT-WINDOW* *MODE-LINE-WINDOW* *TYPEIN-WINDOW*))
  (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE)
  DIS-NONE)


(DEFUN REAP-FILE (&OPTIONAL (PATHNAME "")
			    (N-TO-KEEP *FILE-VERSIONS-KEPT*)
			    (MAIN-STREAM STANDARD-OUTPUT)
			    (PROMPT-STREAM MAIN-STREAM)
			    (PRINT-EXPUNGED-STREAM MAIN-STREAM))
  (SETQ PATHNAME (FS:MERGE-PATHNAMES
		   PATHNAME
		   (SEND (FS:DEFAULT-PATHNAME) ':NEW-PATHNAME ':TYPE ':WILD ':VERSION ':WILD)
		   ':WILD))
  (CATCH 'MODE-LINE-OVERFLOW
    (FORMAT PROMPT-STREAM "~&Reaping ~A for >~D versions" PATHNAME N-TO-KEEP))
  (REAP-DIRECTORY PATHNAME N-TO-KEEP MAIN-STREAM PRINT-EXPUNGED-STREAM))

(DEFCOM COM-CLEAN-DIRECTORY "Deletes excess versions or temp file types in the specified directory.
/"Excess/" is defined by the value of the variable *FILE-VERSIONS-KEPT* or by
a numeric arg.  The temp file types are defined by *TEMP-FILE-TYPE-LIST*.  It
accepts wild cards in the file name specification.  Prompts for confirmation
of files being deleted.  " ()
  (LET ((PATHNAME (READ-DIRECTORY-NAME "Clean Directory" (DEFAULT-PATHNAME))))
    (TYPEIN-LINE "") (PROMPT-LINE "")
    (CLEAN-DIRECTORY PATHNAME
		     (IF *NUMERIC-ARG-P* *NUMERIC-ARG* *FILE-VERSIONS-KEPT*)
		     *TYPEOUT-WINDOW* *MODE-LINE-WINDOW* *TYPEIN-WINDOW*))
  (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE)
  DIS-NONE)

(DEFUN CLEAN-DIRECTORY (PATHNAME &OPTIONAL (N-TO-KEEP *FILE-VERSIONS-KEPT*)
					   (MAIN-STREAM STANDARD-OUTPUT)
					   (PROMPT-STREAM MAIN-STREAM)
					   (PRINT-EXPUNGED-STREAM MAIN-STREAM))
  (SETQ PATHNAME (FS:MERGE-PATHNAMES
		   PATHNAME
		   (SEND (FS:DEFAULT-PATHNAME) ':NEW-PATHNAME ':TYPE ':WILD ':VERSION ':WILD)
		   ':WILD))
  (CATCH 'MODE-LINE-OVERFLOW
    (FORMAT PROMPT-STREAM "~&Cleaning ~A for >~D versions" PATHNAME N-TO-KEEP))
  (REAP-DIRECTORY PATHNAME N-TO-KEEP MAIN-STREAM PRINT-EXPUNGED-STREAM))

(COMPILER:MAKE-OBSOLETE DIRED-PATHNAME-LESSP "use FS:PATHNAME-LESSP")
(DEFF DIRED-PATHNAME-LESSP 'FS:PATHNAME-LESSP)

(DEFUN REAP-DIRECTORY (PATHNAME N-TO-KEEP MAIN-STREAM PRINT-EXPUNGED-STREAM
		       &KEY (EXPUNGE :ASK) (QUERY-EACH T)
		       &AUX DIRECTORY-LIST HOST)
  (SETQ HOST (SEND PATHNAME ':HOST))
  (SETQ DIRECTORY-LIST (FS:DIRECTORY-LIST PATHNAME ':SORTED))
  (SETQ DIRECTORY-LIST (DELQ (ASSQ NIL DIRECTORY-LIST) DIRECTORY-LIST))
  (DO ((LIST DIRECTORY-LIST (CDR LIST))
       (HEAD NIL)
       (PREV-DEVICE NIL DEVICE) (DEVICE)
       (PREV-DIRECTORY NIL DIRECTORY) (DIRECTORY)
       (PREV-NAME NIL NAME) (NAME)
       (PREV-TYPE NIL TYPE) (TYPE)
       (PATHNAME) (MAYBE-OFFER-EXPUNGE-P) (OFFER-EXPUNGE-P)
       (DELETED-SOME 0))
      (NIL)
    (AND LIST
	 (SETQ PATHNAME (CAAR LIST)
	       DEVICE (FUNCALL PATHNAME ':DEVICE)
	       DIRECTORY (FUNCALL PATHNAME ':DIRECTORY)
	       NAME (FUNCALL PATHNAME ':NAME)
	       TYPE (FUNCALL PATHNAME ':TYPE)))
    (COND ((OR (SETQ MAYBE-OFFER-EXPUNGE-P
		     (OR (NULL LIST)
			 (NOT (EQUAL PREV-DEVICE DEVICE))
			 (NOT (EQUAL PREV-DIRECTORY DIRECTORY))))
	       (NOT (EQUAL PREV-NAME NAME))
	       (AND (NOT (EQUAL PREV-TYPE TYPE))
		    (NEQ (FUNCALL PATHNAME ':VERSION) ':UNSPECIFIC)))
	   (WHEN MAYBE-OFFER-EXPUNGE-P
	     (SETQ OFFER-EXPUNGE-P (NOT (ZEROP DELETED-SOME)))
	     (SETQ DELETED-SOME 0))
	   (WHEN HEAD
	     (LET ((NUM-DELETED
		     (REAP-ONE-FILE HEAD LIST N-TO-KEEP MAIN-STREAM
				    PRINT-EXPUNGED-STREAM
				    MAYBE-OFFER-EXPUNGE-P
				    OFFER-EXPUNGE-P
				    (MEMQ ':UNDELETE (SEND HOST :ATTRIBUTES))
				    :QUERY-EACH QUERY-EACH :EXPUNGE EXPUNGE
				    )))
	       (UNLESS MAYBE-OFFER-EXPUNGE-P
		 (INCF DELETED-SOME NUM-DELETED))))
	   (OR (SETQ HEAD LIST) (RETURN NIL))))))

(DEFUN REAP-ONE-FILE (HEAD TAIL N-TO-KEEP QUERY-IO PRINT-EXPUNGED-STREAM EXPUNGE-TIME
		      DELETED-SOME-PREVIOUSLY
		      UNDELETION-SUPPORTED
		      &KEY (QUERY-EACH T) (EXPUNGE :YES)
		      &AUX (N-VERSIONS 0) DELETE-LIST KEEP-LIST (DELETED-SOME 0))
  (DO LIST HEAD (CDR LIST) (EQ LIST TAIL)
      (SETQ N-VERSIONS (1+ N-VERSIONS)))
  (DO ((LIST HEAD (CDR LIST))
       (N-TO-DELETE (- N-VERSIONS N-TO-KEEP))
       (FILE) (PATHNAME) (VERSION))
      ((EQ LIST TAIL)
       (SETQ DELETE-LIST (NREVERSE DELETE-LIST)
	     KEEP-LIST (NREVERSE KEEP-LIST)))
    (SETQ FILE (CAR LIST)
	  PATHNAME (CAR FILE)
	  VERSION (SEND PATHNAME ':VERSION))
    (IF (AND (OR (AND (NUMBERP VERSION) (PLUSP N-TO-DELETE))
		 (MEMBER (SEND PATHNAME ':CANONICAL-TYPE) ZWEI:*TEMP-FILE-TYPE-LIST*))
	     (NOT (LOOP FOR PROT IN '(:DONT-REAP :DONT-DELETE)
			THEREIS (CL:GETF (CDR FILE) PROT))))
	(PUSH FILE DELETE-LIST)
	(PUSH FILE KEEP-LIST))
    (WHEN (NUMBERP VERSION)
      (DECF N-TO-DELETE)))
  (WHEN DELETE-LIST
    (WHEN KEEP-LIST
      (FORMAT QUERY-IO "~&Keeping the following file~P:  (in ~A)~%"
	      (LENGTH KEEP-LIST) (SEND (CAAR KEEP-LIST) ':STRING-FOR-DIRECTORY))
      (DOLIST (FILE KEEP-LIST)
	(FUNCALL ZWEI:*DIRECTORY-SINGLE-FILE-LISTER* FILE)))
    (FORMAT QUERY-IO "~&Deleting the following file~P:~:[ (in ~A)~]~%"
	    (LENGTH DELETE-LIST) KEEP-LIST
	    (SEND (CAAR DELETE-LIST) ':STRING-FOR-DIRECTORY))
    (DOLIST (FILE DELETE-LIST)
      (FUNCALL ZWEI:*DIRECTORY-SINGLE-FILE-LISTER* FILE))
    (WHEN (OR (NULL QUERY-EACH) (FQUERY () "Ok? "))
      (LOOP FOR (PATHNAME) IN DELETE-LIST
	    DO (CONDITION-CASE (ERR)
		    (PROGN
		      (ZL:DELETEF PATHNAME)
		      (INCF DELETED-SOME))
		 (FS:FILE-OPERATION-FAILURE
		   (FORMAT QUERY-IO "~&Cannot delete ~A because ~A.~%" PATHNAME ERR))))))
  ;; Only offer to expunge when we were told that offering was an option
  (WHEN (AND EXPUNGE-TIME UNDELETION-SUPPORTED (NOT (EQ EXPUNGE :NO)))
    (WHEN (OR DELETED-SOME-PREVIOUSLY (NOT (ZEROP DELETED-SOME)))
      (LET ((PATH (SEND (IF DELETE-LIST (CAAR DELETE-LIST) (CAAR HEAD))
			':NEW-PATHNAME ':NAME ':WILD ':TYPE ':WILD ':VERSION ':WILD)))
	(WHEN (OR (EQ EXPUNGE :YES) (AND (EQ EXPUNGE :ASK)	;don't really need this AND
					 (FQUERY () "Expunge ~A? " PATH)))
	  (FORMAT T "~&Expunging directory ~A." PATH)
	  (ZWEI:EXPUNGE-DIRECTORY-INTERNAL PATH PRINT-EXPUNGED-STREAM)))))
  DELETED-SOME)

(DEFCOM COM-SHOW-FILE-PROPERTIES "Displays all properties of a file." ()
  (LET ((PATHNAME (ACCEPT-DEFAULTED-PATHNAME "Show properties for" (PATHNAME-DEFAULTS)
					   :SPECIAL-VERSION NIL :DIRECTION :DELETED)))
    (VIEW-FILE-PROPERTIES PATHNAME)
    DIS-TEXT))

;;; Note: this is called from tv:tree-edit-common in FSEdit; don't change
;;; this without making sure FSEdit works.
(DEFUN VIEW-FILE-PROPERTIES (PATHNAME)
  (CONDITION-CASE (ATTR)
      (SEND PATHNAME ':PROPERTIES)
    (FS:FILE-OPERATION-FAILURE (SEND ATTR ':REPORT ERROR-OUTPUT))
    (:NO-ERROR
     (FORMAT T "~&Properties for ~A~2%" (CAR ATTR))
     (LOOP FOR (IND PROP) ON (CDR ATTR) BY 'CDDR
	   FINALLY (SEND STANDARD-OUTPUT ':FRESH-LINE)
	   DO
	   (FORMAT T "~&~A~30T" (OR (GET IND 'PRETTY-NAME)
				    (PUTPROP IND
					     (STRING-CAPITALIZE-WORDS IND)
					     'PRETTY-NAME)))
	   (FUNCALL (LOOP FOR ((NIL FCN) . PROPS)
			  IN FS:*KNOWN-DIRECTORY-PROPERTIES*
			  FINALLY (RETURN #'PRINC)
			  WHEN (MEMQ IND PROPS)
			  RETURN (OR FCN #'PRINC))
		    PROP STANDARD-OUTPUT)))))

(DEFUN SET-FILE-PROPERTIES ()
  (LET ((PATHNAME (ACCEPT-DEFAULTED-PATHNAME "Set properties for" (PATHNAME-DEFAULTS)
					     :SPECIAL-VERSION NIL :DIRECTION :DELETED)))
    (CHANGE-FILE-PROPERTIES PATHNAME))
  DIS-NONE)

(DEFCOM COM-CHANGE-FILE-PROPERTIES "Edit the properties of a file or directory.
A Change Variable Values window is presented in which to change or edit any of
its changeable attributes, such as Author or Generation Retention Count.
Changes do not take effect until confirmed; they can be aborted.

The command name `Change File Properties' is obsolete and retained only 
temporarily for init file compatibility. The preferred name is 
`Set File Properties'." ()
  (SET-FILE-PROPERTIES))

(DEFCOM COM-SET-FILE-PROPERTIES "Edit the properties of a file or directory.
A window is presented in which to change or edit any of its changeable 
attributes, such as Author or Generation Retention Count.  Changes do not 
take effect until confirmed; they can be aborted." ()
  (SET-FILE-PROPERTIES))

;;;This fairly bad kludge is to allow CVV to invoke the LMFS ACL editor when a
;;;LMFS ACL is clicked on.  It simply cannot be displayed conventionally, and there
;;;is currently no way to convey, in CVV, auxiliary information to CVV displayers/printers.
;;;The idea is not to provide a great feature, but prevent CVV from exploding.
(DEFVAR *CHANGE-FILE-PROPERTIES-PATHNAME-BEING-EDITED* NIL)


(COMPILER:FUNCTION-DEFINED 'LMFS:READ-LMFS-ACL-CVV)		;forward ref: LMFS.
;;; This is more of the "fairly bad kludge."
(SCL:DEFINE-PRESENTATION-TYPE ENTER-ACL-EDITOR (() &KEY OWN-WINDOW)
   :PRINTER ((THING STREAM)
	     (IGNORE THING)
	     (PRINC "Enter ACL Editor" STREAM))
   :PARSER ((STREAM)
	    (LMFS:READ-LMFS-ACL-CVV OWN-WINDOW)
	    (LET ((START-LOC (SEND STREAM :READ-LOCATION)))
	      (DW::PRESENTATION-REPLACE-INPUT STREAM START-LOC "Enter ACL Editor"
					      :DONT-QUOTE T))))

;;;FSEdit calls this, too...
(DEFUN CHANGE-FILE-PROPERTIES (PATHNAME &KEY (OWN-WINDOW T))
  (MULTIPLE-VALUE-BIND (DIRECTORY INDICATORS)
      (BARF-ON-ERRORS (FS:FILE-OPERATION-FAILURE)
	(FS:FILE-PROPERTIES PATHNAME))
    (SETQ PATHNAME (CAR DIRECTORY))
    (TIME:WITH-LONG-DATE-FORMAT-IF-NEEDED
      (SYS:WITH-DATA-STACK
	(LET* ((N (LENGTH INDICATORS))
	       (OLD-VALUES (SYS:MAKE-STACK-ARRAY N))
	       (VALUES (SYS:MAKE-STACK-ARRAY N)))
	  (LOOP FOR IND IN INDICATORS
		FOR I FROM 0
		DO (SETF (AREF VALUES I) (GET DIRECTORY IND)))
	  (CL:REPLACE OLD-VALUES VALUES)
	  (LET ((BASE 10.) (IBASE 10.) (CL:*PRINT-RADIX* NIL))
	    (LET ((*CHANGE-FILE-PROPERTIES-PATHNAME-BEING-EDITED* PATHNAME))
	      (DW:ACCEPT-VARIABLE-VALUES
		(LOOP FOR IND IN INDICATORS
		      FOR I FROM 0
		      COLLECT
			(MULTIPLE-VALUE-BIND (PROMPT P-T)
			    (PROMPT-AND-PRESENTATION-TYPE-FOR-FILE-PROPERTY IND OWN-WINDOW)
			  (LIST (LOCF (AREF VALUES I)) PROMPT P-T)))
		:OWN-WINDOW OWN-WINDOW
		:PROMPT (FORMAT NIL "Change properties for ~A" PATHNAME))))
	  (LET ((CHANGES (LOOP FOR IND IN INDICATORS
			       FOR I FROM 0
			       FOR OLD = (AREF OLD-VALUES I)
			       AS NEW = (AREF VALUES I)
			       WHEN (AND
				      ;; Again, crock for LMFS ACL editor.
				      ;; Lest this, the latter must return unedited ACL,
				      ;; which CVV has no way of passing it. Sorry, ch-f-props.
				      (NEQ NEW ':DO-NOT-CHANGE-PROPERTY-VALUE)
				      (NOT (EQUAL NEW OLD)))
				 NCONC (LIST IND NEW))))
	    (WHEN CHANGES
	      (LEXPR-FUNCALL #'FS:CHANGE-FILE-PROPERTIES PATHNAME T CHANGES))
	    CHANGES))))))

(COMPILER:FUNCTION-DEFINED 'LMFS:LMFS-ACL-CVV-PROPERTY)	; Forward reference: LMFS
(DEFUN PROMPT-AND-PRESENTATION-TYPE-FOR-FILE-PROPERTY (IND OWN-WINDOW)
  (VALUES
    ;; AVV prompt
    (OR (GET IND 'PRETTY-NAME)
	(SETF (GET IND 'PRETTY-NAME) (STRING-CAPITALIZE-WORDS IND)))
    ;; AVV presentation type
    (LOOP FOR (TYPES . INDS) IN FS:*KNOWN-DIRECTORY-PROPERTIES*
	  WHEN (MEMQ IND INDS)
	    ;; More kludges.
	    RETURN
	      (FLET ((CONVERT-THING (TYPE)
		       (CL:CASE TYPE
			 (:BOOLEAN 'SCL:BOOLEAN)
			 (:SEXP 'SYS:EXPRESSION)
			 (:STRING 'STRING)
			 (:STRING-OR-NIL '((SCL:NULL-OR-TYPE STRING)))
			 (:NUMBER 'SCL:NUMBER)
			 (:NUMBER-OR-NIL '((SCL:NULL-OR-TYPE SCL:NUMBER)))
			 (:DATE 'TIME:UNIVERSAL-TIME)
			 (:DATE-OR-NEVER '((SCL:TOKEN-OR-TYPE (("Never" . NIL))
					     TIME:UNIVERSAL-TIME)))
			 (:TIME-INTERVAL-OR-NEVER 'TIME:TIME-INTERVAL)
			 (:KEYWORD-LIST '((CL:SEQUENCE CL:KEYWORD)))
			 (LMFS:LMFS-ACL-CVV-PROPERTY `((ENTER-ACL-EDITOR)
						       :OWN-WINDOW ,OWN-WINDOW)))))
		
		(CONVERT-THING (THIRD TYPES)))
	  FINALLY (RETURN 'SYS:EXPRESSION))))

(DEFFLAVOR SOURCE-COMPARE-MERGE-TOP-LEVEL-EDITOR () (TOP-LEVEL-EDITOR)
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :SOURCE-COMPARE-MERGE))

(DEFUN MAKE-SOURCE-COMPARE-COMMAND-LOOP (IGNORE)
  (LET* ((FRAME (TV:MAKE-WINDOW 'ZWEI-FRAME))
	 (WINDOW (FUNCALL FRAME ':CREATE-WINDOW 'ZWEI-WINDOW-PANE
			  ':LABEL "Source compare merge")))
    (SET-WINDOW-INTERVAL WINDOW (CREATE-INTERVAL NIL NIL T))
    (MAKE-COMMAND-LOOP *STANDARD-COMTAB* WINDOW
		       'SOURCE-COMPARE-MERGE-TOP-LEVEL-EDITOR)))

(DEFRESOURCE SOURCE-COMPARE-COMMAND-LOOP ()
  :CONSTRUCTOR MAKE-SOURCE-COMPARE-COMMAND-LOOP
  :INITIAL-COPIES 0)

(DEFUN SOURCE-COMPARE-MERGE (PATHNAME-1 PATHNAME-2 OUTPUT-PATHNAME
			     &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE)
  (USING-RESOURCE (*CURRENT-COMMAND-LOOP* SOURCE-COMPARE-COMMAND-LOOP)
    (SEND *CURRENT-COMMAND-LOOP* :SOURCE-COMPARE-MERGE
	  (FS:MERGE-PATHNAMES PATHNAME-1)
	  (FS:MERGE-PATHNAMES PATHNAME-2 PATHNAME-1)
	  (FS:MERGE-PATHNAMES OUTPUT-PATHNAME PATHNAME-2)
	  :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
	  :IGNORE-WHITESPACE IGNORE-WHITESPACE)))

(COMPILER:FUNCTION-DEFINED 'SRCCOM:CREATE-FILE)	; Forward references: Utilities
(COMPILER:FUNCTION-DEFINED 'SRCCOM:SOURCE-COMPARE-AUTOMATIC-MERGE-RECORDING)
(COMPILER:FUNCTION-DEFINED 'SRCCOM:FILE-STREAM)
(DEFMETHOD (:SOURCE-COMPARE-MERGE SOURCE-COMPARE-MERGE-TOP-LEVEL-EDITOR)
	   (PATHNAME-1 PATHNAME-2 OUTPUT-PATHNAME
	    &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE
	    &AUX FRAME FILE-1 FILE-2) 
  (DELETE-INTERVAL *INTERVAL*)
  (MUST-REDISPLAY *WINDOW* DIS-ALL)
  (SETQ FRAME (WINDOW-FRAME *WINDOW*))
  (MULTIPLE-VALUE-BIND (TERMINAL-IO STANDARD-INPUT STANDARD-OUTPUT QUERY-IO)
      (FUNCALL-SELF ':TERMINAL-STREAMS)
    (TV:WINDOW-CALL (FRAME :DEACTIVATE)
      (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE)
      (SELECT-WINDOW *WINDOW*)
      (TV:PROCESS-TYPEAHEAD TV:IO-BUFFER
			    #'(LAMBDA (CH)
				(COND ((NLISTP CH) CH)
				      ((EQ (CAR CH) 'SELECT-WINDOW)
				       (APPLY #'PROCESS-SPECIAL-COMMAND CH)
				       NIL)
				      ((MEMQ (CAR CH) '(CONFIGURATION-CHANGED REDISPLAY))
				       NIL)
				      (T CH))))
      (UNWIND-PROTECT
	(PROGN
	  (SETQ FILE-1 (SRCCOM:CREATE-FILE PATHNAME-1)
		FILE-2 (SRCCOM:CREATE-FILE PATHNAME-2))
	  (LET ((MARKS (SRCCOM:SOURCE-COMPARE-AUTOMATIC-MERGE-RECORDING
			 FILE-1 FILE-2 (OPEN-INTERVAL-STREAM *INTERVAL*)
			 :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
			 :IGNORE-WHITESPACE IGNORE-WHITESPACE)))
	    (SOURCE-COMPARE-MERGE-QUERY MARKS))
	  (WITH-OPEN-FILE (STREAM OUTPUT-PATHNAME ':DIRECTION ':OUTPUT) 
	    (STREAM-OUT-INTERVAL STREAM *INTERVAL*)
	    (CLOSE STREAM)
	    (FUNCALL STREAM ':TRUENAME)))
	(AND FILE-1 (FUNCALL (SRCCOM:FILE-STREAM FILE-1) ':CLOSE))
	(AND FILE-2 (FUNCALL (SRCCOM:FILE-STREAM FILE-2) ':CLOSE))))))

(DEFINE-SPECIAL-BUFFER-TYPE DIRED-BUFFER ()
  (DIRED-NODE-MIXIN SPECIAL-PURPOSE-BUFFER-WITH-TICK)
  :DIRED "Dired"
  (:BUFFER-INIT-OPTIONS :SET-PATHNAME))

(DEFMETHOD (:MODIFIED-P DIRED-BUFFER) (&OPTIONAL (TYPE ':FOR-SAVING))
  (COND ((NEQ TYPE ':FOR-CLEANING)
	 (VALUES NIL ':READ-ONLY))
	((> TICK-BEFORE-READ-ONLY REUSE-TICK)
	 T)
	(T
	 NIL)))

;;; Reusable is for the same set of files.
(DEFMETHOD (:REUSABLE DIRED-BUFFER) (SETS)
  (EQ (GET (LOCF SETS) ':SET-PATHNAME) PATHNAME))


(DEFMETHOD (:DIRECTORY-LISTER ZMACS-EDITOR) (PATHNAME)
  (LET ((BUFFER (SEND SELF ':FIND-SPECIAL-BUFFER ':DIRED T ':SET-PATHNAME PATHNAME)))
    (SEND BUFFER ':PUTPROP (GET-MAJOR-MODE-ATTRIBUTE-FOR-BUFFER ':DIRED) ':MAJOR-MODE)
    (SEND *TYPEOUT-WINDOW* ':FRESH-LINE)
    (DO ((LINE (BP-LINE (INTERVAL-FIRST-BP BUFFER)) (LINE-NEXT LINE))
	 (END-LINE (BP-LINE (INTERVAL-LAST-BP BUFFER))))
	((EQ LINE END-LINE))
      (LET ((PATHNAME (GET (LOCF (LINE-PLIST LINE)) ':PATHNAME)))
	(IF (NULL PATHNAME)
	    (IF (LINE-PREVIOUS LINE)		;First line is buffer
		(SEND *TYPEOUT-WINDOW* ':LINE-OUT LINE)
	      (SCL:PRESENT BUFFER (CL:TYPE-OF BUFFER) :STREAM *TYPEOUT-WINDOW*)
	      (SEND *TYPEOUT-WINDOW* ':TYO #\CR))
	    (SI:PRESENT-DIRECTORY-ELEMENT LINE (CONS PATHNAME (LINE-PLIST LINE))
					  *TYPEOUT-WINDOW*)))))
  (FORMAT T "Done.~%"))

(DEFMETHOD (:VIEW-DIRECTORY ZMACS-EDITOR) (VIEWED-DIRECTORY)
  (LET ((BUFFER (SEND SELF ':FIND-SPECIAL-BUFFER ':DIRED T ':SET-PATHNAME VIEWED-DIRECTORY)))
    (SEND BUFFER ':PUTPROP (GET-MAJOR-MODE-ATTRIBUTE-FOR-BUFFER ':DIRED) ':MAJOR-MODE)
    (PROMPT-LINE "Showing directory ~A" VIEWED-DIRECTORY)
    (VIEW-BUFFER BUFFER)))
