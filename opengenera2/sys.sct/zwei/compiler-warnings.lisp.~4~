;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Compiler Warnings

(DEFINE-SPECIAL-BUFFER-TYPE COMPILER-WARNINGS-BUFFER
			    (PATHNAME-LIST (PRELOAD-FILES-P T))
			    (REUSABLE-POSSIBILITIES-SPECIAL-PURPOSE-BUFFER-MIXIN
			     SPECIAL-PURPOSE-BUFFER)
			    :COMPILER-WARNINGS "Compiler-Warnings"
  (:BUFFER-INIT-OPTIONS :SET-PATHNAME-LIST :SET-PRELOAD-FILES-P)
  :SETTABLE-INSTANCE-VARIABLES)

(DEFFLAVOR COMPILER-WARNINGS-FILE-SUBNODE (PATHNAME) (NODE)
  (:INIT-KEYWORDS :WARNING)
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:INIT COMPILER-WARNINGS-FILE-SUBNODE :BEFORE) (PLIST)
  (SETF `(,PATHNAME . NIL) (GET PLIST ':WARNING)))

(DEFFLAVOR COMPILER-WARNINGS-WARNING-SUBNODE () ()
  (:REQUIRED-FLAVORS POSSIBILITY-SUBNODE)
  (:INIT-KEYWORDS :FUNCTION-AND-TYPE))

(DEFFLAVOR COMPILER-WARNINGS-ANONYMOUS-SUBNODE
	(PATHNAME)
	(COMPILER-WARNINGS-WARNING-SUBNODE POSSIBILITY-SUBNODE)
  (:INIT-KEYWORDS :JUNK))

(DEFFLAVOR COMPILER-WARNING-SINGLE-WARNING-SUBNODE
	(WARNING)
	(NODE)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:SELECT-POSSIBILITY COMPILER-WARNING-SINGLE-WARNING-SUBNODE) ()
  (PROG1 (SEND SUPERIOR :SELECT-POSSIBILITY)
	 (LET ((BP (SEND WARNING :SOURCE-LOCATOR)))
	   (WHEN BP
	     (MOVE-POINT BP)))))

;;; Ignores :FUNCTION-AND-TYPE, since that will be NIL
(DEFMETHOD (:INIT COMPILER-WARNINGS-ANONYMOUS-SUBNODE :BEFORE) (IGNORE)
  (SETQ PATHNAME (SEND SUPERIOR ':PATHNAME)))

(DEFUN PATHNAME-SOURCE-FILE-PATHNAME (PATHNAME)
  (LET ((GENERIC-PATHNAME (SEND PATHNAME :GENERIC-PATHNAME)))	; in case the passed pathname
						;isn't generic yet.
    (OR (FILE-LOADED-TRUENAME PATHNAME)		;the best idea
	(SEND GENERIC-PATHNAME			;the next best, dosen't
						;require that the file be loaded
	      :GET ':QFASL-SOURCE-FILE-UNIQUE-ID)
	(IF (FS:PATHNAME-TYPE GENERIC-PATHNAME) GENERIC-PATHNAME
	    ;; must have been on fs:*known-types*
	    (SEND GENERIC-PATHNAME ':NEW-PATHNAME ':TYPE ':LISP))))) 

(DEFMETHOD (:SELECT-POSSIBILITY COMPILER-WARNINGS-ANONYMOUS-SUBNODE) ()
  (WHEN PATHNAME
    (LET* ((SOURCE-PATHNAME (SEND (PATHNAME-SOURCE-FILE-PATHNAME PATHNAME)
				  :NEW-VERSION ':NEWEST))
	   (BUFFER (FIND-BUFFER-NAMED SOURCE-PATHNAME)))
      (AND (NULL BUFFER)
	   (MULTIPLE-VALUE (NIL BUFFER) (FIND-FILE SOURCE-PATHNAME NIL)))
      (SEND *ZMACS-COMMAND-LOOP* ':SET-INTERVAL BUFFER)
      (MOVE-POINT (INTERVAL-FIRST-BP BUFFER))))
  DIS-TEXT)

(DEFMETHOD (:DESCRIPTION COMPILER-WARNINGS-ANONYMOUS-SUBNODE) (STREAM)
  (FORMAT STREAM "Somewhere in ~A" PATHNAME))

(DEFFLAVOR COMPILER-WARNINGS-FUNCTION-SUBNODE ()
	   (COMPILER-WARNINGS-WARNING-SUBNODE FUNCTION-SPEC-SUBNODE))

(DEFMETHOD (:INIT COMPILER-WARNINGS-FUNCTION-SUBNODE :BEFORE) (PLIST)
  (SETF `(,FUNCTION-SPEC ,DEFINITION-TYPE) (GET PLIST ':FUNCTION-AND-TYPE)))

(DEFMETHOD (:DOCUMENT COMPILER-WARNINGS-BUFFER) (IGNORE)
  (PRINC "Edit warnings for next function."))

(DEFMETHOD (:HEADER-DESCRIPTION COMPILER-WARNINGS-BUFFER) (STREAM)
  (PRINC "Compiler warnings for " STREAM)
  (IF (EQ PATHNAME-LIST T) (PRINC "all files." STREAM)
      (FORMAT:PRINT-LIST STREAM "~A"
			 (IF (MEMQ 'NIL PATHNAME-LIST)
			     (CONS "no file" (REMQ 'NIL PATHNAME-LIST))
			     PATHNAME-LIST))))

(DEFMETHOD (:NEXT-NODE COMPILER-WARNINGS-BUFFER) (&OPTIONAL PEEK-P
						  &AUX FILE-NODE FUNCTION-NODE WARNING-NODE
						       WINDOW-POINT WINDOW-START-BP)
  (LET ((POINT (LOOP FOR WINDOW IN *WINDOW-LIST*
		     WHEN (EQ (WINDOW-INTERVAL WINDOW) SELF)
		       RETURN (WINDOW-POINT WINDOW)
		     FINALLY (RETURN (SEND SELF ':POINT)))))
    (IF (BP-= POINT FIRST-BP)
	(SETQ FILE-NODE (CAR INFERIORS))
	(LET ((NODE (BP-NODE POINT)))
	  (WHEN (TYPEP NODE 'COMPILER-WARNINGS-FILE-SUBNODE)
	    (SETQ NODE (CAR (NODE-INFERIORS NODE))))
	  (WHEN (TYPEP NODE 'COMPILER-WARNINGS-WARNING-SUBNODE)
	    (SETQ NODE (CAR (NODE-INFERIORS NODE))))
	  (WHEN (TYPEP NODE 'COMPILER-WARNING-SINGLE-WARNING-SUBNODE)
	    (LET ((NEXT-NODE (NODE-NEXT NODE)))
	      (SETQ FUNCTION-NODE (NODE-SUPERIOR NODE)
		    FILE-NODE (NODE-SUPERIOR FUNCTION-NODE))
	      (IF (NULL NEXT-NODE)
		  (WHEN (NULL (SETQ FUNCTION-NODE (NODE-NEXT FUNCTION-NODE)))
		    (SETQ FILE-NODE (NODE-NEXT FILE-NODE)))
		  (SETQ WARNING-NODE NEXT-NODE)))))))
  (COND ((NOT (NULL FUNCTION-NODE))
	 (SETQ WINDOW-START-BP (INTERVAL-FIRST-BP FUNCTION-NODE)))
	((NOT (NULL FILE-NODE))
	 (SETQ FUNCTION-NODE (CAR (NODE-INFERIORS FILE-NODE)))
	 (SETQ WINDOW-START-BP (INTERVAL-FIRST-BP FILE-NODE))))
  (WHEN (AND (NULL WARNING-NODE)
	     (NOT (NULL FUNCTION-NODE)))
    (SETQ WARNING-NODE (CAR (NODE-INFERIORS FUNCTION-NODE))))
  (WHEN (AND WARNING-NODE (NOT PEEK-P))
    ;; Make up for lossages in the indenting stream
    (SETQ WINDOW-POINT (BEG-LINE (FORWARD-OVER *WHITESPACE-CHARS*
					       (INTERVAL-FIRST-BP WARNING-NODE))))
    (SETQ WINDOW-START-BP (BEG-LINE (FORWARD-OVER '(#\FF #\TAB #\SP #\CR)
						  WINDOW-START-BP)))
    (SETUP-COMPILER-WARNINGS-WINDOWS SELF WINDOW-POINT WINDOW-START-BP))
  WARNING-NODE)

(DEFVAR *EDIT-COMPILER-WARNINGS-TOP-WINDOW-SIZE* 15.)

(DEFUN SETUP-COMPILER-WARNINGS-WINDOWS (WARNINGS-BUFFER TOP-WINDOW-POINT TOP-WINDOW-START-BP
					&AUX TOP-WINDOW BOTTOM-WINDOW)
  (MULTIPLE-VALUE (TOP-WINDOW BOTTOM-WINDOW)
    (FUNCALL (WINDOW-FRAME *WINDOW*) ':TWO-EDITOR-WINDOWS))
  (AND (EQ TOP-WINDOW *WINDOW*)
       (PSETQ TOP-WINDOW BOTTOM-WINDOW BOTTOM-WINDOW TOP-WINDOW))
  (SPLIT-SCREEN-BETWEEN-TWO-WINDOWS TOP-WINDOW BOTTOM-WINDOW
				    *EDIT-COMPILER-WARNINGS-TOP-WINDOW-SIZE*)
  (SET-WINDOW-BUFFER TOP-WINDOW WARNINGS-BUFFER)
  (RECENTER-WINDOW TOP-WINDOW ':START TOP-WINDOW-START-BP)
  (MOVE-BP (WINDOW-POINT TOP-WINDOW) TOP-WINDOW-POINT)
  (SEND *ZMACS-COMMAND-LOOP* ':MAKE-WINDOW-CURRENT BOTTOM-WINDOW)
  ;; Since FQUERY was used to ask which files to edit, there is typeout in the typeout
  ;; window.  There is also a (REDISPLAY) blip in the typeahead which will suppress the
  ;; kind of redisplay that gets rid of the typeout window if we don't flush it.  This
  ;; is a total crock to make up for the lack of a coherent selection theory, rooted in
  ;; the absence of an activity system.
  (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE)
  (TV:PROCESS-TYPEAHEAD (SEND *ZMACS-COMMAND-LOOP* :IO-BUFFER)
			#'(LAMBDA (CH)
			    (IF (AND (LISTP CH)
				     (MEMQ (CAR CH) '(CONFIGURATION-CHANGED REDISPLAY
						      SELECT-WINDOW)))
				NIL CH)))
  NIL)

(DEFMETHOD (:POPPING-POSSIBILITY COMPILER-WARNINGS-BUFFER) ()
  (MAKE-WINDOW-FULL-SCREEN *WINDOW*))

(DEFMETHOD (:LIST-POSSIBILITIES COMPILER-WARNINGS-BUFFER) (REMAINING-P)
  (IF (NOT REMAINING-P)
      (DOLIST (FILE-NODE INFERIORS)
	(LIST-POSSIBILITIES-IN-FILE-NODE FILE-NODE NIL))
      (LET ((NODE (BP-NODE (SEND SELF ':POINT)))
	    (FIRST-NODE NIL))
	(AND (TYPEP NODE 'COMPILER-WARNINGS-WARNING-SUBNODE)
	     (SETQ FIRST-NODE NODE
		   NODE (NODE-SUPERIOR NODE)))
	(DO ((FILE-NODE NODE (NODE-NEXT FILE-NODE))
	     (FIRST-SUBNODE FIRST-NODE NIL))
	    ((NULL FILE-NODE))
	  (LIST-POSSIBILITIES-IN-FILE-NODE NODE FIRST-SUBNODE)))))

(DEFUN LIST-POSSIBILITIES-IN-FILE-NODE (FILE-NODE STARTING-SUBNODE)
  (FORMAT T "~&Warnings~:[ remaining~] for function in ~A"
	  (NULL STARTING-SUBNODE)
	  (OR (SEND FILE-NODE ':PATHNAME) "no particular file"))
  (LET ((LIST (IF STARTING-SUBNODE
		  (LOOP FOR NODE FIRST STARTING-SUBNODE THEN (NODE-NEXT NODE)
			WHILE NODE COLLECT NODE)
		  (NODE-INFERIORS FILE-NODE))))
    (SCL:FORMAT-ITEM-LIST LIST
			  :PRINTER (LAMBDA (NODE STREAM)
				     (DECLARE (SYS:DOWNWARD-FUNCTION))
				     (DW:WITH-OUTPUT-AS-PRESENTATION (:OBJECT NODE
								:TYPE 'COMPILER-WARNING-NODE)
				       (STRING-OUT (SEND NODE :DEFINITION-NAME) STREAM))))
    (CL:FRESH-LINE)))

(DEFMETHOD (:REVERT COMPILER-WARNINGS-BUFFER) ()
  (DELETE-INTERVAL-AND-FLUSH-INFERIORS SELF)
  (IF (EQ PATHNAME-LIST T)
      (DOLIST (WARN COMPILER:COMPILER-WARNINGS-HISTORY)
	(SORT-WARNINGS-FOR-FILE NIL WARN PRELOAD-FILES-P))
      (DOLIST (PATH PATHNAME-LIST)
	(SORT-WARNINGS-FOR-FILE PATH NIL PRELOAD-FILES-P)))
  (PRINT-COMPILER-WARNINGS (AND (NEQ PATHNAME-LIST T) PATHNAME-LIST)
			   (OPEN-INTERVAL-STREAM LAST-BP LAST-BP T)
			   '(COMPILER-WARNINGS-FILE-SUBNODE :WARNING)
			   '(COMPILER-WARNINGS-FUNCTION-SUBNODE :FUNCTION-AND-TYPE)
			   '(COMPILER-WARNINGS-ANONYMOUS-SUBNODE :JUNK)
			   '(COMPILER-WARNING-SINGLE-WARNING-SUBNODE :WARNING)))

(DEFUN SORT-WARNINGS-FOR-FILE (PATH WARN OK-TO-LOAD)
  (COND ((NULL PATH)
	 (SETQ PATH (CAR WARN)))
	((NULL WARN)
	 (SETQ WARN (ASSQ PATH COMPILER:COMPILER-WARNINGS-HISTORY))))
  (AND PATH WARN
       (LET* ((PATH1 (SEND (PATHNAME-SOURCE-FILE-PATHNAME PATH) :NEW-VERSION ':NEWEST))
	      (BUFFER (FIND-BUFFER-NAMED PATH1)))
	 (AND (NULL BUFFER) OK-TO-LOAD
	      (MULTIPLE-VALUE (NIL BUFFER)
		(FIND-FILE PATH1 NIL)))
	 (UNLESS (NULL BUFFER)
	   (CHECK-INTERVAL-SECTIONS BUFFER)
	   (SORT-ACCORDING-TO-SECTIONIZATION WARN (ZMACS-SECTION-LIST BUFFER))))))

(DEFUN SORT-ACCORDING-TO-SECTIONIZATION (FILE-WARNING FUNCTION-LIST)
  (SETF (CDR FILE-WARNING)
	(STABLE-SORT (CDR FILE-WARNING)
		     #'(LAMBDA (WARN1 WARN2 &AUX FSPEC1 TYPE1 FSPEC2 TYPE2)
			 (SETQ FSPEC1 (CAR WARN1)
			       FSPEC2 (CAR WARN2)
			       TYPE1 (CADR WARN1)
			       TYPE2 (CADR WARN2))
			 (LOOP WHILE (AND FSPEC1 (EQ TYPE1 'DEFUN))
			       WITH (FSPEC TYPE)
			       DO (MULTIPLE-VALUE (FSPEC TYPE) (SYS:FUNCTION-PARENT FSPEC1))
			       WHILE FSPEC
			       DO (SETQ FSPEC1 FSPEC TYPE1 TYPE))
			 (LOOP WHILE (AND FSPEC2 (EQ TYPE2 'DEFUN))
			       WITH (FSPEC TYPE)
			       DO (MULTIPLE-VALUE (FSPEC TYPE) (SYS:FUNCTION-PARENT FSPEC2))
			       WHILE FSPEC
			       DO (SETQ FSPEC2 FSPEC TYPE2 TYPE))
			 (LOOP FOR (FSPEC TYPE) IN FUNCTION-LIST
			       WHEN (AND (EQUAL FSPEC FSPEC1) (EQ TYPE TYPE1))
			       RETURN T
			       WHEN (AND (EQUAL FSPEC FSPEC2) (EQ TYPE TYPE2))
			       RETURN NIL)))))


;; New compiler warnings interface.  Commands:

;; M-X Compiler Warnings puts all the current compiler warnings in a
;; buffer.

;; M-X Edit File Warnings allows you to edit compiler warnings for a
;; particular file.

;; M-X Edit Compiler Warnings allows you to edit compiler warnings for a
;; number of files.  You are asked about all possible files before
;; editing.

;; M-X Load Compiler Warnings is allows you to load a file which
;; contains compiler warnings into the compiler warnings database,
;; probably in order to edit these warnings later.

(DEFCOM COM-COMPILER-WARNINGS
	"Puts the compiler warnings in a buffer and selects that buffer." ()
  (PUSH-POSSIBILITIES-BUFFER ':SELECT-POSSIBILITIES-BUFFER ':COMPILER-WARNINGS
			     ':SET-PATHNAME-LIST T ':SET-PRELOAD-FILES-P NIL)
  DIS-TEXT)

(DEFCOM COM-EDIT-FILE-WARNINGS
	"Prepares to edit any functions in a specified file for which warnings exist.
It prompts for a file name, which can be either a source file or a compiled
file.  It splits the screen, putting a warning message from the warnings
database in the top window.  The bottom window displays the source code whose
compilation caused the message.  If the database does not contain any warnings
for this file, it prompts for the name of a file containing the warnings.  Use
c-. (Next Possibility) to move to a subsequent warning and source function.  After
the last warning, it returns the screen to its previous configuration.  " ()
  (LET* ((INITIAL-PATH (READ-MAJOR-MODE-DEFAULTED-PATHNAME
			 "Edit warnings for file" (DEFAULT-PATHNAME)
			 :SPECIAL-VERSION :NEWEST))
	 (PATH (FUNCALL (FUNCALL INITIAL-PATH ':TRANSLATED-PATHNAME) ':GENERIC-PATHNAME)))
    (OR (LOOP FOR ELEM ON (CDR (ASSQ PATH COMPILER:COMPILER-WARNINGS-HISTORY))
	      THEREIS (CDAR ELEM))
	(LET ((PATH1 (ACCEPT-DEFAULTED-PATHNAME
		       (FORMAT NIL "Read warnings for ~A from" PATH) PATH
		       :SPECIAL-TYPE :CWARNS)))
	  (COMPILER:LOAD-COMPILER-WARNINGS PATH1)
	  (OR (ASSQ PATH COMPILER:COMPILER-WARNINGS-HISTORY)
	      (BARF "No warnings for ~A found in ~A" PATH PATH1))))
    (PUSH-POSSIBILITIES-BUFFER ':START-EDITING ':COMPILER-WARNINGS
			       ':SET-PATHNAME-LIST (NCONS PATH)
			       ':SET-PRELOAD-FILES-P T))
  DIS-TEXT)

(DEFCOM COM-EDIT-COMPILER-WARNINGS
	"Prepares to edit all functions whose compilation caused a warnings message.
It queries whether you want to edit warnings for a particular file, for each
file mentioned in the database.  It splits the screen, putting the warning
message in the top window.  The bottom window displays the source code whose
compilation caused the message.  Use c-. (Next Possibility) to move to a subsequent
warning and source function.  After the last warning, it returns the screen to
its previous configuration.  " ()
  (LOOP WITH NO-WARNINGS = T
	WITH QUERY-IO = *TYPEOUT-WINDOW*
	WITH WARNINGS-TO-EDIT
	WITH WARNINGS-TO-DELETE
	WITH ANSWER = NIL
	FOR ENTRY IN COMPILER:COMPILER-WARNINGS-HISTORY
	DO (WHEN (CDR ENTRY)
	     (SETQ NO-WARNINGS NIL)
	     (SELECTQ (OR ANSWER
			  (FQUERY '(:CHOICES (((:YES "Yes") #/Y #\SPACE)
					      ((:NO "No") #/N)
					      ((:PROCEED "Proceed through all warnings") #/P)
					      ((:DELETE "Delete") #/D)))
				  (IF (CAR ENTRY)
				      "Edit Warnings for ~A ? "
				      "Edit Warnings not associated with any file? ")
				  (CAR ENTRY)))
	       (:YES (PUSH (CAR ENTRY) WARNINGS-TO-EDIT))
	       (:PROCEED (PUSH (CAR ENTRY) WARNINGS-TO-EDIT) (SETQ ANSWER ':YES))
	       (:DELETE (PUSH ENTRY WARNINGS-TO-DELETE))))
	FINALLY (IF NO-WARNINGS (BARF "There are currently no compiler warnings."))
		(LOOP FOR WARNING IN WARNINGS-TO-DELETE
		      DO (SETQ COMPILER:COMPILER-WARNINGS-HISTORY
			       (DELQ WARNING COMPILER:COMPILER-WARNINGS-HISTORY)))
		(AND WARNINGS-TO-EDIT
		     (PUSH-POSSIBILITIES-BUFFER ':START-EDITING ':COMPILER-WARNINGS
						':SET-PATHNAME-LIST
						  (NREVERSE WARNINGS-TO-EDIT)
						':SET-PRELOAD-FILES-P T)))
  DIS-TEXT)

(DEFCOM COM-LOAD-COMPILER-WARNINGS
	"Loads a file containing compiler warning messages into the warnings database.
It prompts for the name of a file that contains the printed representation of compiler
warnings.  It always replaces any warnings already in the database.  " ()
  (COMPILER:LOAD-COMPILER-WARNINGS
    (ACCEPT-DEFAULTED-PATHNAME "Load Compiler Warnings from" (PATHNAME-DEFAULTS)
			       :SPECIAL-TYPE :CWARNS))
  DIS-NONE)
