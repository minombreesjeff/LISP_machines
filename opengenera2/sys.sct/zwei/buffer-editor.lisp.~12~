;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Buffer Editor

;;; NOERROR is not evaluated.
(DEFMACRO EDIT-BUFFERS-LINE-BUFFER (LINE &OPTIONAL NOERROR)
  (IF NOERROR
      `(GET (LOCF (LINE-PLIST ,LINE)) ':BUFFER)
      `(OR (GET (LOCF (LINE-PLIST ,LINE)) ':BUFFER)
	   (BARF "No buffer on this line"))))

(DEFMAJOR COM-EDIT-BUFFERS-MODE EDIT-BUFFERS-MODE "Edit Buffers"
	  "Prepares for editing a list of all buffers" ()
  (SET-COMTAB *MODE-COMTAB* '(#\SP COM-EDIT-BUFFERS-EXIT
			      #/? COM-EDIT-BUFFERS-HELP
			      #\HELP COM-EDIT-BUFFERS-HELP
			      #/D COM-EDIT-BUFFERS-DELETE
			      #/d (0 #/D)
			      #\c-D COM-EDIT-BUFFERS-DELETE
			      #/E COM-EDIT-BUFFERS-EDIT-BUFFER
			      #/e (0 #/E)
			      #/H COM-EDIT-BUFFERS-AUTOMATIC-ALL
			      #/h (0 #/H)
			      #/K COM-EDIT-BUFFERS-DELETE
			      #/k (0 #/K)
			      #\c-K COM-EDIT-BUFFERS-DELETE
			      #/Q COM-EDIT-BUFFERS-EXIT
			      #/q (0 #/Q)
			      #/S COM-EDIT-BUFFERS-SAVE
			      #/s (0 #/S)
			      #/U COM-EDIT-BUFFERS-UNMARK
			      #/u (0 #/U)
			      #/X COM-EXTENDED-COMMAND
			      #/x (0 #/X)
			      #/~ COM-EDIT-BUFFERS-NOT-MODIFIED
			      #/= COM-EDIT-BUFFERS-COMPARE-TO-FILE
			      (#/0 10.) COM-NUMBERS
			      #\RUBOUT COM-EDIT-BUFFERS-REVERSE-UNMARK
			      #\ABORT COM-EDIT-BUFFERS-ABORT
			      #\END COM-EDIT-BUFFERS-EXIT))
  (SETQ *MODE-LINE-LIST* (APPEND *MODE-LINE-LIST* '("     (Space to exit)"))))

(DEFCOM COM-EDIT-BUFFERS
	"Displays a list of all buffers, allowing you to save, delete, or select.
A set of single character subcommands lets you specify various operations for
the buffers.  For example, you can mark buffers to be deleted, saved, or not
modified.  Use HELP to see further explanation.  The buffer is read-only; you
can move around in it by searching and with commands like c-N or c-P." ()
  (LET ((SUBSTRING
	  (AND *NUMERIC-ARG-P* (TYPEIN-LINE-READLINE "Edit buffers matching substring:"))))
    (EDIT-BUFFERS-INTERNAL SUBSTRING)))

(DEFUN EDIT-BUFFERS-INTERNAL (SUBSTRING &KEY FOR-TYPEOUT)
  (SEND *CURRENT-COMMAND-LOOP* ':SELECT-SPECIAL-BUFFER ':EDIT-BUFFERS T
	:SET-APROPOS-STRING SUBSTRING)
  (LET ((*SET-ATTRIBUTE-UPDATES-LIST* NIL))
    (COM-EDIT-BUFFERS-MODE))
  (WHEN FOR-TYPEOUT (HIDE-TYPEOUT-WINDOW))
  DIS-TEXT)

(DEFUN HIDE-TYPEOUT-WINDOW ()
  ;; Added specifically for use with EDIT-BUFFERS-INTERNAL, but really it's more general.
  ;; Maybe it belongs in another file? -kmp 5-Nov-90
  (UNLESS (EQ (SEND *TYPEOUT-WINDOW* :STATUS) :DEACTIVATED)
    (REDISPLAY *WINDOW*)))

(DW:DEFINE-PRESENTATION-TYPE ZMACS-BUFFER-LISTING ()
   :ABBREVIATION-FOR '(OR CONS STRING)
   :PRINTER ((OBJECT STREAM)
	     (FORMAT STREAM
		     (COND ((OR (NULL OBJECT) (STRINGP OBJECT))
			    "Buffers in Zmacs~@[ matching ~S~]")
			   (T
			    "Buffers in Zmacs matching ~{~S~^ or ~}"))
		     OBJECT)))

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR EDIT-BUFFER-LISTING
						  (ZMACS-BUFFER-LISTING "Edit"
									ZWEI:*ZMACS-COMTAB*
									:GESTURE :SELECT)
						  (SUBSTRING)
  `(EDIT-BUFFERS-INTERNAL ,SUBSTRING :FOR-TYPEOUT T))

(DEFINE-SPECIAL-BUFFER-TYPE EDIT-BUFFERS-BUFFER
			    (APROPOS-STRING)
			    (READ-ONLY-NODE-MIXIN SPECIAL-PURPOSE-BUFFER-WITH-TICK)
			    :EDIT-BUFFERS "Edit-Buffers"
  (:SETTABLE-INSTANCE-VARIABLES APROPOS-STRING)
  (:BUFFER-INIT-OPTIONS :SET-APROPOS-STRING))

(DEFMETHOD (:MODIFIED-P EDIT-BUFFERS-BUFFER) (&OPTIONAL IGNORE)
  ;; Always claim to be read-only
  (VALUES NIL ':READ-ONLY))

(DEFMETHOD (:DESCRIPTION EDIT-BUFFERS-BUFFER) ()
  (COND ((OR (NOT APROPOS-STRING) (EQUAL APROPOS-STRING "")) "All Buffers")
	(T
	 (LET ((STRING (DW:PRESENT-TO-STRING APROPOS-STRING 'ZMACS-BUFFER-LISTING)))
	   (IF (CL:STRING-EQUAL STRING "Buffers in Zmacs matching " :END1 26.)
	       (STRING-APPEND "Matching " (SUBSTRING STRING 26.))
	       STRING)))))

(DEFMETHOD (:REVERT EDIT-BUFFERS-BUFFER) ()
  (SETQ TICK ':READ-ONLY)
  (WITH-READ-ONLY-SUPPRESSED (SELF)
    (DELETE-INTERVAL SELF)
    (LET ((*STREAM* (OPEN-INTERVAL-STREAM FIRST-BP FIRST-BP T))
	  (*CURRENT-BUFFER-LINE* NIL)
	  (*FIRST-BUFFER-LINE* NIL))
      (DECLARE (SPECIAL *STREAM* *CURRENT-BUFFER-LINE* *FIRST-BUFFER-LINE*))
      (LIST-BUFFERS-INTERNAL *STREAM*
			     #'(LAMBDA (BUFFER STRING &AUX LINE)
				 (SETQ LINE (BP-LINE (SEND *STREAM* ':READ-BP)))
				 (SETF (LINE-PLIST LINE) (LIST ':BUFFER BUFFER))
				 (AND (EQ BUFFER *INTERVAL*)
				      (SETQ *CURRENT-BUFFER-LINE* LINE))
				 (AND (NULL *FIRST-BUFFER-LINE*)
				      (SETQ *FIRST-BUFFER-LINE* LINE))
				 (SEND *STREAM* ':TYO (COND ((EQ BUFFER *INTERVAL*) #/.)
							    (T #\SP)))
				 (SEND *STREAM* ':STRING-OUT STRING))
			     94. T APROPOS-STRING)
      (MULTIPLE-VALUE-BIND (POINT OTHER-WINDOW-P)
	  (SEND SELF ':POINT)
	(MOVE-BP POINT
		 (OR *CURRENT-BUFFER-LINE* *FIRST-BUFFER-LINE*
		     (LINE-NEXT (LINE-NEXT	; in case no buffers match the apropos-string
				  (BP-LINE (INTERVAL-FIRST-BP (BP-BUFFER-INTERNAL POINT))))))
		 0)
	;; Kludge the case where two windows are both looking at the same edit-buffers
	;; special buffer.
	(WHEN OTHER-WINDOW-P
	  (MOVE-BP SAVED-POINT POINT))))))

(DEFCOM COM-EDIT-BUFFERS-HELP "Explains subcommands for Edit Buffers" ()
  (FORMAT STANDARD-OUTPUT 
"You are in the buffer list editor.  All commands are single characters.
Many of these commands take an argument to indicate how many times to do
them.  A negative argument means to move backwards through the list of
buffers.
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")Char    Action
0Rubout	Unmarks the buffer on the preceding line.
Space	Selects the buffer on the current line, performing any marked actions.
   D	Marks the buffer for deletion (K, c-D, c-K are synonyms).
   E    Immediately selects the buffer at the point for editing, without performing
	any marked actions.  (You can use ~A to return to Edit Buffers.)
   S	Marks the buffer for saving.
   U	Unmarks either the buffer on the current line or the buffer on the line above.
   X	Executes an extended command (same as m-X).
   =	Compares the buffer to its corresponding file.
   ~~	Marks the buffer for setting not modified.
" (KEY-FOR-COMMAND 'COM-SELECT-PREVIOUS-BUFFER *ZMACS-COMTAB*))
  DIS-NONE)

(DEFUN EDIT-BUFFERS-MAP-OVER-LINES (N-TIMES FUNCTION)
  (WITH-READ-ONLY-SUPPRESSED (*INTERVAL*)
    (LET ((BP (BEG-LINE (POINT)))
	  (BOTTOM (INTERVAL-LAST-BP *INTERVAL*)))
      (DOTIMES (IGNORE (ABS N-TIMES))
	(AND (MINUSP N-TIMES) (SETQ BP (BEG-LINE BP -1 T)))
	(EDIT-BUFFERS-LINE-BUFFER (BP-LINE BP))
	(AND (BP-= BP BOTTOM) (RETURN))
	(FUNCALL FUNCTION (BP-LINE BP))
	(AND (PLUSP N-TIMES) (SETQ BP (BEG-LINE BP +1 T))))
      (MOVE-POINT BP))
    DIS-TEXT))
  
(DEFCOM COM-EDIT-BUFFERS-DELETE "Marks one or more buffers for deletion" ()
  (EDIT-BUFFERS-MAP-OVER-LINES *NUMERIC-ARG* 
			       #'(LAMBDA (LINE)
				   (ASET #/D (MUNG-LINE LINE) 0))))

(DEFCOM COM-EDIT-BUFFERS-EDIT-BUFFER "Edits the buffer on the current line." ()
  (LET ((BUFFER (EDIT-BUFFERS-LINE-BUFFER (BP-LINE (POINT)))))
    (COND ((EQ BUFFER *INTERVAL*)
	   (BARF "~A is the current buffer already!" BUFFER))
	  (T
	   (MAKE-BUFFER-CURRENT BUFFER)
	   (TYPEIN-LINE "Press ~A to return to Edit Buffers."
			(KEY-FOR-COMMAND 'COM-SELECT-PREVIOUS-BUFFER *COMTAB*)))))
  DIS-TEXT)

(DEFCOM COM-EDIT-BUFFERS-UNMARK "Removes deletion or save mark for one or more buffers." () 
  (EDIT-BUFFERS-MAP-OVER-LINES (IF (AND (NOT *NUMERIC-ARG-P*)
					(CHAR-EQUAL (BP-CHAR (POINT)) #\SP))
				   -1
				   *NUMERIC-ARG*)
			       #'(LAMBDA (LINE)
				   (ASET #\SP (MUNG-LINE LINE) 0))))

(DEFCOM COM-EDIT-BUFFERS-REVERSE-UNMARK
	"Removes deletion or save mark for one or more buffers, backwards." ()
  (SETQ *NUMERIC-ARG* (- *NUMERIC-ARG*))
  (COM-EDIT-BUFFERS-UNMARK))
  
(DEFCOM COM-EDIT-BUFFERS-SAVE "Marks one or more buffers for saving" ()
  (EDIT-BUFFERS-MAP-OVER-LINES *NUMERIC-ARG* 
			       #'(LAMBDA (LINE)
				   (ASET #/S (MUNG-LINE LINE) 0))))
  
(DEFCOM COM-EDIT-BUFFERS-COMPARE-TO-FILE "Edits the buffer on the current line." ()
  (COMPARE-BUFFER-TO-FILE (EDIT-BUFFERS-LINE-BUFFER (BP-LINE (POINT)))))

(DEFUN COMPARE-BUFFER-TO-FILE (BUFFER &OPTIONAL (BIT-DECODED-ARGUMENT *NUMERIC-ARG*))
  (UNLESS (TYPEP BUFFER 'FILE-BUFFER)
    (BARF "Not a file buffer: ~A" BUFFER))
  (LET ((PATHNAME (SEND-IF-HANDLES BUFFER :PATHNAME)))
    (UNLESS PATHNAME (BARF "No associated filename: ~S" BUFFER))
    (LET ((FILE-1 (SRCCOM:CREATE-FILE PATHNAME))
	  (FILE-2 (SRCCOM:MAKE-SRCCOM-FILE
		    :FILE-NAME (SEND BUFFER :NAME)
		    :FILE-TYPE "Buffer"
		    :FILE-STREAM (OPEN-INTERVAL-STREAM BUFFER NIL NIL)
		    :FILE-MAJOR-MODE (SEND (SEND BUFFER :GET :MAJOR-MODE) :MAJOR-MODE-KEYWORD)
		    :FILE-BP-TABLE (MAKE-ARRAY 100. :FILL-POINTER 0)
		    :PRESENTATION-TYPE 'BUFFER
		    :PRESENTATION-OBJECT BUFFER)))
      (SRCCOM:SOURCE-COMPARE-FILES
	FILE-1 FILE-2
	(IF (VARIABLE-BOUNDP *WINDOW*)
	    (MAKE-TYPEOUT-BUFFER-STREAM ':SOURCE-COMPARE
					':SET-NAMES (LIST (SRCCOM:FILE-NAME FILE-1)
							  (SRCCOM:FILE-NAME FILE-2)))
	    STANDARD-OUTPUT)
	T
	:IGNORE-CASE-AND-STYLE (BIT-TEST #o2 BIT-DECODED-ARGUMENT)
	:IGNORE-WHITESPACE (BIT-TEST #o4 BIT-DECODED-ARGUMENT))
      DIS-NONE)))

(DEFCOM COM-EDIT-BUFFERS-NOT-MODIFIED "Marks one or more buffers for setting not modified." ()
  (EDIT-BUFFERS-MAP-OVER-LINES *NUMERIC-ARG* 
			       #'(LAMBDA (LINE)
				   (ASET #/~ (MUNG-LINE LINE) 0))))

(DEFCOM COM-EDIT-BUFFERS-ABORT "Aborts Edit Buffers, taking no action on the buffers." ()
  (DIRED-EXIT))

(DEFCOM COM-EDIT-BUFFERS-EXIT "Leaves Edit Buffers, taking the appropriate actions." ()
  (DO-NAMED DIRED-EXIT
      ((CURRENT-INTERVAL *INTERVAL*)
       (LINE (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)) (LINE-NEXT LINE))
       (DELETE-BUFFERS NIL)			;Each element is a line
       (SAVE-BUFFERS NIL)
       (NOT-MODIFIED-BUFFERS)
       (LAST-LINE (BP-LINE (INTERVAL-LAST-BP *INTERVAL*))))
      ((EQ LINE LAST-LINE)
       (LET ((CURRENT-BUFFER (EDIT-BUFFERS-LINE-BUFFER (BP-LINE (POINT)) T)))
	 (AND CURRENT-BUFFER (MAKE-BUFFER-CURRENT CURRENT-BUFFER)))
       (DOLIST (SAVE SAVE-BUFFERS)
	 (SAVE-BUFFER SAVE))
       (DOLIST (NOT-MOD NOT-MODIFIED-BUFFERS)
	 (SET-NOT-MODIFIED NOT-MOD T))
       (DOLIST (DELETE DELETE-BUFFERS)
	 (KILL-BUFFER DELETE T))
       (DIRED-EXIT T CURRENT-INTERVAL NIL))
    (LET ((BUFFER (EDIT-BUFFERS-LINE-BUFFER LINE T)))
      (COND (BUFFER
	     (SELECTQ (AREF LINE 0)
	       (#/D (PUSH BUFFER DELETE-BUFFERS))
	       (#\SP )
	       (#/S (PUSH BUFFER SAVE-BUFFERS))
	       (#/~ (PUSH BUFFER NOT-MODIFIED-BUFFERS)))))))
  DIS-BPS)
  
(DEFCOM COM-EDIT-BUFFERS-AUTOMATIC-ALL "Marks modified file buffers for saving." ()
  (LOOP FOR LINE ON (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)) BY 'LINE-NEXT
	WITH LAST-LINE = (BP-LINE (INTERVAL-LAST-BP *INTERVAL*))
	AS LINE-BUFFER = (EDIT-BUFFERS-LINE-BUFFER LINE T)
	UNTIL (EQ LINE LAST-LINE)
        DO (WHEN (AND LINE-BUFFER
		      (SEND LINE-BUFFER ':EDITING-FILE-P)
		      (MEMQ (AREF LINE 1) '(#/+ #/*)))
	     (ASET #/S (MUNG-LINE LINE) 0)))
  DIS-TEXT)

(DEFVAR *SORT-ZMACS-BUFFER-LIST* T)
(DEFCOM COM-LIST-BUFFERS "Prints a list of all the buffers and their associated files.
The lines in the list are mouse-sensitive, offering a menu of operations on
the buffers.  For buffers with associated files, the version number of the
file appears.  For buffers without associated files, the size of the buffer
in lines appears.  For Dired buffers, the pathname used for creating the
buffer appears as the version.  The list of buffers is sorted in order of
last access with the currently selected one at the top.  You can inhibit
sorting by setting *SORT-ZMACS-BUFFER-LIST* to NIL.

With a numeric argument, lists only buffers whose names contain a given string." ()
  (LIST-BUFFERS-INTERNAL *TYPEOUT-WINDOW*
    #'(LAMBDA (BUFFER STRING)
	(DW:WITH-OUTPUT-AS-PRESENTATION (:OBJECT BUFFER :TYPE (CL:TYPE-OF BUFFER))
	  (CL:WRITE-STRING STRING)))
    (SEND *TYPEOUT-WINDOW* ':SIZE-IN-CHARACTERS)
    NIL
    (AND *NUMERIC-ARG-P* (TYPEIN-LINE-READLINE "List buffers matching substring:")))
  DIS-NONE)

(DEFUN LIST-BUFFERS-INTERNAL (STREAM PRINTER WIDTH &OPTIONAL PERIOD-FLAG APROPOS
			      &AUX DESCS MODES MAX-NAME MAX-DESC MAX-MODE BUFS)
  (SETQ BUFS *ZMACS-BUFFER-LIST*)
  (WHEN  *SORT-ZMACS-BUFFER-LIST*		;provide user option for not changing order
    ;; First make each entry in bufs be a cons of its position in the history and
    ;; the buffer (this speeds up the sort -- break even for extra consing about six buffers).
    (SETQ BUFS (LOOP WITH HISTORY-LENGTH = (LENGTH *ZMACS-BUFFER-HISTORY*)
		     FOR BUFFER IN *ZMACS-BUFFER-LIST*
		     WHEN (OR (NULL APROPOS)
			      (IF (ATOM APROPOS)
				  (STRING-SEARCH APROPOS (SEND BUFFER ':NAME))
				  (CL:SOME #'(LAMBDA (S) (STRING-SEARCH S (SEND BUFFER :NAME)))
					   APROPOS)))
		       COLLECT (CONS (OR (FIND-POSITION-IN-LIST BUFFER
								*ZMACS-BUFFER-HISTORY*)
					 HISTORY-LENGTH)
				     BUFFER)))
    (SETQ BUFS (STABLE-SORTCAR (COPYLIST BUFS) #'<))
    ;; Now strip off the index numbers.
    (LOOP FOR NEXT ON BUFS
	  DO (RPLACA NEXT (CDR (CAR NEXT)))))
  
  (OR APROPOS (SETQ *ZMACS-BUFFER-LIST* BUFS))
  (LOOP FOR BUFFER IN BUFS WITH (DESCRIPTION MODE)
	AS NAME = (SEND BUFFER ':NAME)
	UNLESS (AND APROPOS
		    (IF (ATOM APROPOS)
			(NOT (STRING-SEARCH APROPOS NAME))
			(CL:EVERY #'(LAMBDA (S) (NOT (STRING-SEARCH S NAME)))
				  APROPOS)))
	  MAXIMIZE (STRING-LENGTH NAME) INTO NAME-SIZE
	  AND DO (SETQ DESCRIPTION (SEND BUFFER ':DESCRIPTION))
	  AND MAXIMIZE (STRING-LENGTH DESCRIPTION) INTO DESC-SIZE
	  AND COLLECT DESCRIPTION INTO DESC-LIST
	  AND DO (SETQ MODE (CONDITION-CASE ()
				 (SEND (SEND BUFFER ':GET ':MAJOR-MODE) ':MODE-LINE-NAME)
			       (ERROR "<<Error>>")))
	  AND MAXIMIZE (STRING-LENGTH MODE) INTO MODE-SIZE
	  AND COLLECT MODE INTO MODE-LIST
	FINALLY (SETQ MAX-NAME NAME-SIZE
		      DESCS DESC-LIST MAX-DESC DESC-SIZE
		      MODES MODE-LIST MAX-MODE MODE-SIZE))
  (SETQ MAX-NAME (MAX MAX-NAME (STRING-LENGTH "Buffer name:")))
  (SETQ MAX-DESC (MAX MAX-DESC (STRING-LENGTH "File Version:")))
  (SETQ MAX-MODE (MAX MAX-MODE (- (STRING-LENGTH "Major mode:") 2)))
  (LET ((IWIDTH (- WIDTH 6)))			;2 sp, 1 sp, sp open, close
    (UNLESS ( (+ MAX-NAME MAX-DESC MAX-MODE) IWIDTH)
      (SETQ MAX-MODE 11.))
    (UNLESS ( (+ MAX-NAME MAX-DESC MAX-MODE) IWIDTH)
      (SETQ MAX-DESC (min 33. max-desc)))
    (UNLESS ( (+ MAX-NAME MAX-DESC MAX-MODE) IWIDTH)
      (SETQ MAX-NAME (MAX 6 (- IWIDTH (+ MAX-DESC MAX-MODE)))))
    (UNLESS ( (+ MAX-NAME MAX-DESC MAX-MODE) IWIDTH)
      (SETQ MAX-DESC (MAX 3 (- IWIDTH (+ MAX-NAME MAX-MODE)))))
    (UNLESS ( (+ MAX-NAME MAX-DESC MAX-MODE) IWIDTH)
      (SETQ MAX-MODE (MAX 3 (- IWIDTH (+ MAX-NAME MAX-DESC)))))
    
    (LET* ((STAR-FLAG NIL) (PLUS-FLAG NIL) (EQV-FLAG NIL) (CENTER-DOT-FLAG NIL)
	   (EXTRA (MIN 10. (- IWIDTH (+ MAX-NAME MAX-DESC MAX-MODE))))
	   (VERSION-POS (+ 2 MAX-NAME (// EXTRA 2)))
	   (MODE-POS (+ VERSION-POS MAX-DESC (- EXTRA (// EXTRA 2)) 1)))
      (FORMAT STREAM
	      "~&~@\PRESENTATION\:~%  ~A~VT~A~VT~A~2%"
	      APROPOS 'ZMACS-BUFFER-LISTING
	      "Buffer name:" VERSION-POS "File Version:" MODE-POS "Major mode:")
      (LOOP FOR BUFFER IN BUFS
	    AS NAME = (SEND BUFFER ':NAME) DO
	(UNLESS (AND APROPOS
		     (IF (ATOM APROPOS)
			 (NOT (STRING-SEARCH APROPOS NAME))
			 (CL:EVERY #'(LAMBDA (S) (NOT (STRING-SEARCH S NAME)))
				   APROPOS)))
	  (LET* ((DESC (POP DESCS))
		 (MODE (POP MODES))
		 (STRING (WITH-OUTPUT-TO-STRING (STREAM)
			   (MULTIPLE-VALUE-BIND (MODIFIED-P SPECIAL-STATUS)
			       (SEND BUFFER ':MODIFIED-P ':FOR-LISTING)
			     (SEND STREAM ':TYO (COND ((EQ SPECIAL-STATUS ':READ-ONLY)
						       (SETQ EQV-FLAG T) #/)
						      ((MEMQ SPECIAL-STATUS
							     '(:NEW-FILE :NO-FILE))
						       (SETQ PLUS-FLAG T) #/+)
						      (MODIFIED-P
						       (SETQ STAR-FLAG T) #/*)
						      (T
						       #\SP))))
			   (SEND STREAM ':TYO #\SP)
			   (SETQ CENTER-DOT-FLAG (CRAM-STRING-OUT STREAM NAME MAX-NAME
								  CENTER-DOT-FLAG))
			   (FORMAT STREAM "~VT" VERSION-POS)
			   (SETQ CENTER-DOT-FLAG (CRAM-STRING-OUT STREAM DESC MAX-DESC
								  CENTER-DOT-FLAG))
			   (FORMAT STREAM "~VT" MODE-POS)
			   (SETQ CENTER-DOT-FLAG (CRAM-STRING-OUT STREAM
								  (STRING-APPEND #/( MODE #/))
								  (+ MAX-MODE 2)
								  CENTER-DOT-FLAG)))))
	    (FUNCALL PRINTER BUFFER STRING)
	    (TERPRI STREAM))))			;actual line end must come here
      (TERPRI STREAM)				;extra TERPRI to show you that it's finished.
      (LET ((COL 0))
	(SETQ COL (EXPLAIN-LIST-BUFFERS-CHARACTER STREAM COL WIDTH
						  PLUS-FLAG #/+
						  "new file or non-empty non-file buffer"))
	(SETQ COL (EXPLAIN-LIST-BUFFERS-CHARACTER STREAM COL WIDTH
						  STAR-FLAG #/*
						  "modified file"))
	(SETQ COL (EXPLAIN-LIST-BUFFERS-CHARACTER STREAM COL WIDTH
						  EQV-FLAG #/
						  "read-only"))
	(SETQ COL (EXPLAIN-LIST-BUFFERS-CHARACTER STREAM COL WIDTH
						  CENTER-DOT-FLAG #/ 
						  "field truncated"))
	(SETQ COL (EXPLAIN-LIST-BUFFERS-CHARACTER STREAM COL WIDTH
						  PERIOD-FLAG #/.
						  "current buffer"))
	(AND (PLUSP COL) (TERPRI STREAM))))))

(DEFUN CRAM-STRING-OUT (STREAM STRING MAX-SIZE TRUNCATED)
  (let ((string (string-left-trim '(#\space) string)))
    (IF ( (STRING-LENGTH STRING) MAX-SIZE)
	(SEND STREAM ':STRING-OUT STRING)
	(SEND STREAM ':STRING-OUT STRING 0 (- MAX-SIZE 2))
	(SEND STREAM ':TYO #/ )
	(SETQ TRUNCATED T))
    TRUNCATED))

(DEFUN EXPLAIN-LIST-BUFFERS-CHARACTER (STREAM COL WIDTH FLAG CHAR EXPL)
  (WHEN FLAG
    (LET ((DELTA (+ (STRING-LENGTH EXPL) 9)))
      (COND ((PLUSP COL)
	     (COND (( (+ COL DELTA 2) WIDTH)
		    (TERPRI STREAM)
		    (SETQ COL 0))
		   (T
		    (PRINC "  " STREAM)
		    (INCF COL 2)))))
      (FORMAT STREAM "~C means ~A." CHAR EXPL)
      (INCF COL DELTA)))
  COL)

(DEFUN COUNT-LINES-BUFFER (BUFFER &AUX TICK TEM LINES)
  (COND ((AND (NEQ (SETQ TICK (NODE-TICK BUFFER)) ':READ-ONLY)
	      (SETQ TEM (SEND BUFFER ':GET 'LAST-LINE-COUNT))
	      (EQL (CADR TEM) TICK))
	 (CAR TEM))
	(T
	 (SETQ LINES (COUNT-LINES BUFFER)
	       TEM (LIST LINES TICK))
	 (SEND BUFFER ':PUTPROP TEM 'LAST-LINE-COUNT)
	 LINES)))

(COMPILER:FUNCTION-DEFINED 'HARDCOPY-BUFFER)	; Forward reference: Hardcopy
(DEFCOM COM-KILL-OR-SAVE-BUFFERS
 "Offers a menu of all buffers, with choices to save, kill, mark unmodified, or hardcopy.
The buffers are sorted into groups:  modified files first, then never-written 
or non-file buffers, then unmodified files, and read-only buffers last.  Each
group is alphabetically sorted.  The first two groups are pre-marked for saving,
unless a numeric argument is supplied.

Multiple operations may be specified for a single buffer; these are done in 
the correct order." ()
  (LET ((BUFFER-ALIST (DO ((BUFFER-LIST *ZMACS-BUFFER-LIST* (CDR BUFFER-LIST))
			   (RET NIL) (TEM)
			   (BUFFER))
			  ((NULL BUFFER-LIST) RET)
			(SETQ BUFFER (CAR BUFFER-LIST))
			(SETQ TEM (STRING-APPEND
				    "  "
				    ;; Please note that this truncation of the buffer name
				    ;; is a kludge to paper over the non-robustness of
				    ;; TV:MULTIPLE-CHOOSE, which makes no attempt to
				    ;; truncate item names to something that will fit in the
				    ;; Main-screen.  TV:MULTIPLE-CHOOSE should solve this
				    ;; problem in a general way, allowing for the character
				    ;; style used, the number of choices on the line, etc.
				    (IF (> (STRING-LENGTH (SEND BUFFER :NAME)) 100.)
					(SUBSTRING (SEND BUFFER :NAME) 0 99.)
				      (SEND BUFFER :NAME))))
			(MULTIPLE-VALUE-BIND (MODIFIED-P SPECIAL-STATUS)
			    (SEND BUFFER ':MODIFIED-P ':FOR-LISTING)
			  (ASET (COND ((MEMQ SPECIAL-STATUS '(:NEW-FILE :NO-FILE))
				       #/+)
				      ((EQ SPECIAL-STATUS ':READ-ONLY)
				       #/)
				      (MODIFIED-P
				       #/*)
				      (T
				       #\SP))
				TEM 0)
			  (PUSH (LIST BUFFER TEM
				      (IF (AND (NOT *NUMERIC-ARG-P*)
					       (SEND BUFFER ':MODIFIED-P ':FOR-SAVING))
					  '((:SAVE T) :KILL :NOT-MODIFIED :HARDCOPY)
					'(:SAVE :KILL :NOT-MODIFIED :HARDCOPY)))
				RET))))
	CHOICES ABORTED)
    (SETQ BUFFER-ALIST
	  (SORT BUFFER-ALIST #'(LAMBDA (X Y &AUX STR1 STR2 CH1 CH2)
				 (IF (CHAR= (SETQ CH1 (AREF (SETQ STR1 (CADR X)) 0))
					    (SETQ CH2 (AREF (SETQ STR2 (CADR Y)) 0)))
				     (STRING-LESSP STR1 STR2)
				     (< (STRING-SEARCH-CHAR CH1 "*+ ")
					(STRING-SEARCH-CHAR CH2 "*+ "))))))
    (MULTIPLE-VALUE (CHOICES ABORTED)
      (TV:MULTIPLE-CHOOSE "  Buffer" BUFFER-ALIST
			  '((:SAVE "Save" NIL (:NOT-MODIFIED) NIL NIL)
			    (:KILL "Kill" NIL (:NOT-MODIFIED) NIL NIL)
			    (:NOT-MODIFIED "UnMod" NIL (:SAVE) NIL NIL)
			    (:HARDCOPY "Hardcopy" NIL NIL NIL NIL)
			    )))
    ;; Make sure the current buffer gets done last so its message is left on the display.
    (LET ((ELEM (ASSQ *INTERVAL* CHOICES)))
      (AND ELEM (SETQ CHOICES (NCONC (DELQ ELEM CHOICES) (NCONS ELEM)))))
    (LOOP FOR (BUFFER . KEYWORDS) IN CHOICES DOING
      ;; Rather than DOLIST, this does things in the right order.
      (WHEN (MEMQ ':NOT-MODIFIED KEYWORDS)
	(SET-NOT-MODIFIED BUFFER T))
      (WHEN (MEMQ ':SAVE KEYWORDS)
	(SAVE-BUFFER BUFFER))
      (WHEN (MEMQ ':KILL KEYWORDS)
	(KILL-BUFFER BUFFER T))
      (WHEN (MEMQ ':HARDCOPY KEYWORDS)
	(HARDCOPY-BUFFER BUFFER)))
    (TYPEIN-LINE (IF ABORTED "Aborted." "Done.")))
  DIS-NONE)
