;;; -*- Mode: LISP; Package: ZWEI; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Text processing major modes

;;;; Basics
(DEFFLAVOR TEXT-MODE-MIXIN () ()
  (:REQUIRED-FLAVORS MAJOR-MODE))

(DEFMETHOD (:MOUSE-MARK-THING TEXT-MODE-MIXIN) (POINT MARK CHAR LINE CHAR-POS)
  (TEXT-MARK-THING POINT MARK CHAR LINE CHAR-POS))

(DEFMETHOD (:MODE-FORMS TEXT-MODE-MIXIN) ()
  '((SET-CHAR-SYNTAX WORD-ALPHABETIC *MODE-WORD-SYNTAX-TABLE* #/_)
    (SET-CHAR-SYNTAX WORD-ALPHABETIC *MODE-WORD-SYNTAX-TABLE* #/')
    (SET-CHAR-SYNTAX WORD-DELIMITER *MODE-WORD-SYNTAX-TABLE* #/.)
    (SET-COMTAB *MODE-COMTAB* '(#\TAB COM-TAB-TO-TAB-STOP))))

(DEFFLAVOR TEXT-MODE () (TEXT-MODE-MIXIN MAJOR-MODE))

(DEFMETHOD (:MODE-LINE-NAME TEXT-MODE) () "Text")

(DEFMETHOD (:RELEVANT-FUNCTION-NAME TEXT-MODE) (&REST ARGS)
  (LEXPR-FUNCALL #'BOUNDED-RELEVANT-FUNCTION-NAME ARGS))

(DEFUN BOUNDED-RELEVANT-FUNCTION-NAME (&REST ARGS)
  ;; Don't go searching over vast amounts of text for a function-name, since
  ;; it could take a long time.  Instead, limit the search to the single line
  ;; that we are presently on.
  (LET ((LINE (BP-LINE (POINT))))
    (WITH-BOUNDED-INTERVAL (REGION-P (CREATE-BP LINE 0) (CREATE-BP LINE (LINE-LENGTH LINE)))
      (LEXPR-SEND (MAJOR-MODE-FROM-KEYWORD *DEFAULT-LANGUAGE-MODE*) :RELEVANT-FUNCTION-NAME
		  ARGS))))

(DEFMODE COM-TEXT-MODE TEXT-MODE 
  "Sets things up for editing English text.
Puts Tab-To-Tab-Stop on Tab." :TEXT)

;; Include Text and phony Scribe mode
(LOOP FOR A IN '((:MSS . :TEXT)			;Scribe mode doesn't really exist yet
		 (:TEXT . :TEXT))		;This should come last
      DO (PUSH A FS:*FILE-TYPE-MODE-ALIST*))



(DEFMAJOR COM-FEP-COMMAND-MODE FEP-COMMAND-MODE "FEP-Command"
          "Enter a mode for editing FEP commands.
Modifies the delimiter dispatch tables appropriately for FEP command syntax,
makes comment delimiters ( and ).  Tab is Indent Relative.
All tabbing is done with spaces." ()
  (SET-COMTAB *MODE-COMTAB* '(#\TAB COM-INDENT-RELATIVE))
  (SETQ *SPACE-INDENT-FLAG* T)   ;; Make Line call our tabber to indent.
  (SETQ *INDENT-WITH-TABS* NIL)  ;; Tabber should use spaces instead of tabs.
  (SETQ *PARAGRAPH-DELIMITER-LIST* '())
  (SETQ *COMMENT-COLUMN* (* 40. 8.))
  (SETQ *COMMENT-START* "(")
  (SETQ *COMMENT-BEGIN* "(")
  (SETQ *COMMENT-END* ")")
  (SET-CHAR-SYNTAX LIST-ALPHABETIC *MODE-LIST-SYNTAX-TABLE* #/|)
  (SET-CHAR-SYNTAX LIST-ALPHABETIC *MODE-LIST-SYNTAX-TABLE* #/:)
  (SET-CHAR-SYNTAX WORD-DELIMITER  *MODE-WORD-SYNTAX-TABLE* #/>))

(PUSH '(:FEP-COMMAND . :FEP-COMMAND) FS:*FILE-TYPE-MODE-ALIST*)


;;;; Bolio

(DEFFLAVOR BOLIO-SECTION-MIXIN () ()
  (:REQUIRED-FLAVORS MAJOR-MODE))

(DEFMETHOD (:SECTION-NAME-TRIVIAL-P BOLIO-SECTION-MIXIN) () NIL)

(DEFMETHOD (:SECTION-NAME BOLIO-SECTION-MIXIN) (LINE TEMP-BP IGNORE)
  (IF (%STRING-EQUAL LINE 0 ".def" 0 4)
      (GET-TEXT-DEFINITION-NAME TEMP-BP)
      (VALUES NIL NIL NIL T)))

(DEFMETHOD (:DEFINITION-LINE-P BOLIO-SECTION-MIXIN) (LINE)
  (STRING-EQUAL LINE ".def" 0 0 4 4))

(DEFMETHOD (:QUICK-DEFINITION-LINE-P BOLIO-SECTION-MIXIN) (LINE)
  (STRING-EQUAL LINE ".def" 0 0 4 4))

(DEFMETHOD (:MODE-FORMS BOLIO-SECTION-MIXIN) ()
  '((SETQ *COMMENT-START* ".c ")
    (SETQ *COMMENT-BEGIN* ".c ")
    (SETQ *COMMENT-COLUMN* 0)
    (SETQ *PARAGRAPH-DELIMITER-LIST* (APPEND '(#/' #/.) *PARAGRAPH-DELIMITER-LIST*))))

(DEFFLAVOR BOLIO-MODE () (BOLIO-SECTION-MIXIN TEXT-MODE-MIXIN MAJOR-MODE))

(DEFMETHOD (:MODE-LINE-NAME BOLIO-MODE) () "Bolio")

#||
(DEFMETHOD (:MODE-FORMS BOLIO-MODE) ()
  '((SET-COMTAB *MODE-COMTAB* '(;;Next line gets an error, so do it manually
				;;(#/c-m-0 10.) COM-BOLIO-INTO-FONT
				#/c-m-0 COM-BOLIO-INTO-FONT
				#/c-m-1 COM-BOLIO-INTO-FONT
				#/c-m-2 COM-BOLIO-INTO-FONT
				#/c-m-3 COM-BOLIO-INTO-FONT
				#/c-m-4 COM-BOLIO-INTO-FONT
				#/c-m-5 COM-BOLIO-INTO-FONT
				#/c-m-6 COM-BOLIO-INTO-FONT
				#/c-m-7 COM-BOLIO-INTO-FONT
				#/c-m-8 COM-BOLIO-INTO-FONT
				#/c-m-9 COM-BOLIO-INTO-FONT
				#/c-m-: COM-BOLIO-OUTOF-FONT
				#/c-m-* COM-BOLIO-OUTOF-FONT
				#\c-m-SP COM-EXPAND-ONLY))
    (PROGN (TURN-ON-MODE 'WORD-ABBREV-MODE)
	   ;; Set up BOLIO-mode-dependent word abbrevs
	   (PUTPROP (INTERN "ZNIL" *UTILITY-PACKAGE*)	;This stuff loses at top level since
		    "3nil*"			;*UTILITY-PACKAGE* not set up at readin time.
		    '|Bolio-ABBREV|)
	   (PUTPROP (INTERN "ZT" *UTILITY-PACKAGE*)
		    "3t*"
		    '|Bolio-ABBREV|))))
||#

(DEFMODE COM-BOLIO-MODE BOLIO-MODE 
          "Sets things up for editing Bolio source files.
Like Text mode, but also makes c-m-digit and c-m-: and c-m-* do font stuff,
and makes word-abbrevs for znil and zt." :BOLIO)

(DEFCOM COM-BOLIO-INTO-FONT "Insert font-change sequence" (NM)
  (LET ((CHAR (MAKE-CHAR *LAST-COMMAND-CHAR*))
	(POINT (POINT)))
    ;;--- Changed to not copy (BP-LINE POINT) before munging the line,
    ;;--- for copy-on-write
    (INSERT-MOVING POINT #/)
    (INSERT-MOVING POINT CHAR)
    (VALUES DIS-LINE (BP-LINE POINT) (- (BP-INDEX POINT) 2))))

(DEFCOM COM-BOLIO-OUTOF-FONT "Insert font-change sequence" (NM)
  (LET ((POINT (POINT)))
    ;;--- Changed to not copy (BP-LINE POINT) before munging the line,
    ;;--- for copy-on-write
    (INSERT-MOVING POINT #/)
    (INSERT-MOVING POINT #/*)
    (VALUES DIS-LINE (BP-LINE POINT) (- (BP-INDEX POINT) 2))))

;;;; Scribe

;;;--- The way this works isn't right.  You cannot parse scribe backwards; you have to parse
;;;forwards and remember state, like lisp does.
;;; Delimiters do not nest in the way they do in lisp.  Instead, there
;;; is a current close delimiter.  All characters except for that close
;;; delimiter and @ aren't special.  @ followed by an atom, followed by
;;; an open delimiter, pushes a new current close delimiter onto a
;;; stack.  Seeing the current close delimiter pops the stack.  @begin
;;; and @end are different.  @begin(foo) is equivalent to @foo[ and
;;; @end(foo) is then equivalent to ].  The parsing has to understand
;;; this as well.

(DEFFLAVOR SCRIBE-MODE () (TEXT-MODE-MIXIN MAJOR-MODE))

(DEFMETHOD (:MODE-FORMS SCRIBE-MODE) ()
  '((PUSH #/@ *PARAGRAPH-DELIMITER-LIST*)))

(DEFMETHOD (:SECTION-NAME-TRIVIAL-P SCRIBE-MODE) () NIL)

(DEFCONST *SCRIBE-FROBS*
	  '((:SCRIBE-ATOM "Tag" "Equate" "Define" "Label" "String")
	    (:REGULAR "Chapter" "Paragraph" "MajorHeading" "Heading" "Subheading"
	     "Section" "Sec" "Subsection" "Subsec" "Subsubsection" "Subsubsec"
	     "Appendix" "AppendixSection" "PrefaceSection" "Unnumbered")
	    (:SPECIAL "Defmethod" "DefThing" "DefThingX")))

(DEFMETHOD (:SECTION-NAME SCRIBE-MODE) (LINE TEMP-BP IGNORE)
  (LET ((LEN (STRING-LENGTH LINE)))
    (IF (AND (> LEN 1)
	     (CHAR-EQUAL (AREF LINE 0) #/@))
	(LOOP NAMED FROBS
	      FOR (TYPE . FROBS) IN *SCRIBE-FROBS*
	      DO (LOOP FOR STR IN FROBS
		       FOR STRLEN = (STRING-LENGTH STR)
		       WHEN (AND (> LEN (+ 1 STRLEN))
				 (%STRING-EQUAL LINE 1 STR 0 STRLEN)
				 (SCRIBE-OPEN-DELIMITER-P
				   (MAKE-CHAR (AREF LINE (+ 1 STRLEN)))))
		       DO (RETURN-FROM FROBS
			    (SCRIBE-GET-FROB-HAIR TYPE STR LINE
						  (MOVE-BP TEMP-BP LINE (1+ STRLEN)))))
	      FINALLY (RETURN (VALUES NIL NIL NIL T)))
	(VALUES NIL NIL NIL T))))

(DEFMETHOD (:MODE-LINE-NAME SCRIBE-MODE) () "Scribe")

(DEFMETHOD (:MATCHING-CHAR-TO-BLINK SCRIBE-MODE) (BP LIMIT-BP IGNORE)
  (LET ((CLOSE (MAKE-CHAR (BP-CHAR-BEFORE BP))))
    (AND (SCRIBE-CLOSE-DELIMITER-P CLOSE)
	 (SEARCH (FORWARD-CHAR BP -1 T)
		 (SCRIBE-OPENING-DELIMITER CLOSE) T NIL NIL LIMIT-BP))))

(DEFMODE COM-SCRIBE-MODE SCRIBE-MODE
          "Sets things up for editing Scribe MSS files.
Mainly like Text Mode." :SCRIBE)

;;; BP points the the open delimiter.
(DEFUN SCRIBE-GET-FROB-HAIR (TYPE DEFTYPE LINE BP)
  (MULTIPLE-VALUE-BIND (START END ERR)
      (SCRIBE-GET-FROB-HAIR-1 TYPE LINE BP)
    (IF ERR (VALUES NIL NIL NIL T)
      (LET ((STR (SUBSTRING LINE START END)))
	(VALUES (INTERN STR *UTILITY-PACKAGE*)
		DEFTYPE STR NIL)))))

(DEFCONST *SCRIBE-MATCHING-DELIMITERS* "()[]{}<>/"/"''`'")
(DEFCONST *SCRIBE-DELIMITERS* ",()[]{}<>/"'`= //\")

(DEFUN SCRIBE-GET-FROB-HAIR-1 (TYPE LINE BP)
  (DECLARE (VALUES START END ERROR))
  (LET* ((OPEN (BP-CHAR BP))
	 (CLOSE (SCRIBE-CLOSING-DELIMITER OPEN)))
    (IBP BP)					;Point to start of name
    (LET ((START (BP-INDEX BP))
	  (END (LINE-LENGTH LINE)))
      (SELECTQ TYPE
	(:SCRIBE-ATOM
	 (LOOP FOR I FROM START BELOW END
	       WHEN (STRING-SEARCH-CHAR (AREF LINE I) *SCRIBE-DELIMITERS*)
	       RETURN (SETQ END I))
	 (VALUES START END))
	(:REGULAR
	 (SETQ END (OR (STRING-SEARCH-CHAR CLOSE LINE START END) END))
	 (VALUES START END))
	(:SPECIAL
	 (LET ((BP1 (SEARCH BP "Sym=")))
	   (IF (NULL BP1)
	       (VALUES NIL NIL T)
	       (SCRIBE-GET-FROB-HAIR-1 ':REGULAR LINE BP1))))))))

(DEFUN SCRIBE-OPEN-DELIMITER-P (CHAR)
  (LOOP WITH STRING = *SCRIBE-MATCHING-DELIMITERS*
	FOR I BELOW (STRING-LENGTH STRING) BY 2
	THEREIS (CHAR-EQUAL CHAR (AREF STRING I))))

(DEFUN SCRIBE-CLOSING-DELIMITER (CHAR)
  (LOOP WITH STRING = *SCRIBE-MATCHING-DELIMITERS*
	FOR I BELOW (STRING-LENGTH STRING) BY 2
	WHEN (CHAR-EQUAL CHAR (AREF STRING I))
	RETURN (AREF STRING (1+ I))
	FINALLY (FERROR "~C has no Scribe matching delimiter" CHAR)))

(DEFUN SCRIBE-CLOSE-DELIMITER-P (CHAR)
  (LOOP WITH STRING = *SCRIBE-MATCHING-DELIMITERS*
	FOR I FROM 1 BELOW (STRING-LENGTH STRING) BY 2
	THEREIS (CHAR-EQUAL CHAR (AREF STRING I))))

(DEFUN SCRIBE-OPENING-DELIMITER (CHAR)
  (LOOP WITH STRING = *SCRIBE-MATCHING-DELIMITERS*
	FOR I FROM 1 BELOW (STRING-LENGTH STRING) BY 2
	WHEN (CHAR-EQUAL CHAR (AREF STRING I))
	RETURN (AREF STRING (1- I))
	FINALLY (FERROR "~C has no Scribe matching delimiter" CHAR)))
