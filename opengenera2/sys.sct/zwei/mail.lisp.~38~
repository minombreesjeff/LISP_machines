;;;-*- Base: 8; Mode: LISP; Package: ZWEI -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Send mail
(DEFPROP *MODE-LINE-LIST* T MODE-SETTABLE-P)

(DEFMINOR COM-MAIL-MODE MAIL-MODE "Mail" 1 "Setup for mailing" ()
  (SET-COMTAB *MODE-COMTAB* '(#\c-Altmode COM-EXIT-COM-MAIL
			      #\m-Help COM-SHOW-PATCH-MAIL-EXAMPLE
			      #\End COM-EXIT-COM-MAIL
			      #\Abort COM-QUIT-COM-MAIL
			      #\c-Z COM-QUIT-COM-MAIL
			      #\c-] COM-QUIT-COM-MAIL)
	      '(("Add File References" . COM-ADD-FILE-REFERENCES-COM-MAIL)))
  ;; This FORMAT is here to dynamically figure out how to type the character
  (SETQ *MODE-LINE-LIST* `(,@*MODE-LINE-LIST* ,(FORMAT NIL "     ~:@C mails, ~:@C aborts"
						       #\END #\ABORT)))
	;;This makes M-Q and M-[ understand the --Text follows this line-- line.
        ;;Make sure get the global value too.
  (SETQ *PARAGRAPH-DELIMITER-LIST* (CONS #/- (SYMEVAL '*PARAGRAPH-DELIMITER-LIST*))))

(DEFCOM COM-MAIL
	"Initiates composing mail; puts you into a Mail buffer to compose a message draft.

With a nonzero numeric argument, it reselects the last Mail buffer previously
selected, instead of creating a new one.

With a numeric argument of zero, it gives you a menu of existing mail and 
bug-mail-frame drafts in the List Buffers style.  Select one with the mouse to
reselect an existing Mail buffer.

The line containing /"--Text follows this line--/" is the separator between the mail
header fields and the body of the message.  Do not delete it.

All mail headers that can be transmitted by Zmail are recognized.

Use END to send the mail or ABORT to quit without sending.  
If you try to send a draft that already has been sent, you will be prompted
for the inclusion of a Supersedes: header." ()
  (IF (AND *NUMERIC-ARG-P* (ZEROP *NUMERIC-ARG*))
      (SELECT-EXISTING-MAIL-DRAFT)
    (COM-MAIL-INTERNAL (NOT *NUMERIC-ARG-P*))))

(DEFUN SELECT-EXISTING-MAIL-DRAFT ()
  (FLET ((PRINT-BUFFER-LIST (APROPOS)
	   (LIST-BUFFERS-INTERNAL *TYPEOUT-WINDOW*
				  #'(LAMBDA (BUFFER STRING)
				      (DW:WITH-OUTPUT-AS-PRESENTATION
					  (:OBJECT BUFFER :TYPE (CL:TYPE-OF BUFFER))
					(CL:WRITE-STRING STRING)))
				  (SEND *TYPEOUT-WINDOW* ':SIZE-IN-CHARACTERS) NIL APROPOS)))
    (LET ((MAIL-P (LOOP FOR BUFFER IN *ZMACS-BUFFER-LIST*
			AS NAME = (SEND BUFFER :NAME)
			THEREIS (OR (STRING-SEARCH "*Mail-" NAME)
				    (STRING-SEARCH "*Bug-mail-frame-mail-" NAME)))))
      (IF MAIL-P
	  (PRINT-BUFFER-LIST '("*Mail-" "*Bug-Mail-Frame-Mail-"))
	  (TYPEIN-LINE "There are no existing Mail buffers.")))
    DIS-NONE))

;;;Create a buffer, put it in text mode, initialize to the right thing, enter
;;;recursive R, when user exits, write mail request file.
;;;options:  initial-destination is string with name of mailing list, initial-body is string
;;;with initial contents for mail buffer, initial-index is character index into initial-body
;;;for where the point should be (leaving out the index option means "at the end")
(DEFUN COM-MAIL-INTERNAL (RE-INIT-P &KEY INITIAL-TO INITIAL-BODY
					 INITIAL-INDEX BUG-REPORT
					 (SETUP-SUBJECT
					   (IF BUG-REPORT
					       (MEMQ ZWEI:*REQUIRE-SUBJECTS* '(T :INIT :BUG))
					     (MEMQ ZWEI:*REQUIRE-SUBJECTS* '(T :INIT))))
					 INITIAL-SUBJECT INITIAL-OTHER-HEADERS)
  (DECLARE (SPECIAL *ZMAIL-WINDOW*))
  (UNLESS (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
    (BARF "Can't send mail -- Zmail isn't loaded."))
  (FS:FORCE-USER-TO-LOGIN)
  (SEND *CURRENT-COMMAND-LOOP* :SELECT-SPECIAL-BUFFER
	':MAIL RE-INIT-P
	':SET-INITIAL-DESTINATION INITIAL-TO
	':SET-INITIAL-BODY INITIAL-BODY
	':SET-INITIAL-INDEX INITIAL-INDEX
	':SET-BUG-REPORT BUG-REPORT
	':SET-SETUP-SUBJECT SETUP-SUBJECT
	':SET-INITIAL-SUBJECT INITIAL-SUBJECT
	':SET-INITIAL-OTHER-HEADERS INITIAL-OTHER-HEADERS)
  (WHEN (OR RE-INIT-P
	    (TYPEP (SEND *INTERVAL* :GET :MAJOR-MODE)	;if newly created, always
		   'ZWEI:FUNDAMENTAL-MODE))	        ; needs initialization
    (LET ((*SET-ATTRIBUTE-UPDATES-LIST* NIL))
      (COM-TEXT-MODE)))
  (TURN-ON-MODE 'MAIL-MODE)
  DIS-TEXT)

(DEFCOM COM-ADD-FILE-REFERENCES-COM-MAIL "Add a File-References field to the draft message."
	()
  (LET* ((LAST-BUFFER
	   ;; skipping the top buffer, which is just the current (mail)
	   ;; buffer, search down for a file buffer, which is the last
	   ;; file buffer that the user was in.  That is a very likely
	   ;; choice of the file that they want to advertise in the
	   ;; mail.  Note that this ignores TEMPORARY-ELEMENT issues,
	   ;; since we own the minibuffer.
	   (WITHOUT-INTERRUPTS ;; interlock changes
	     (LOOP FOR X FROM 1 TO (SEND *BUFFER-HISTORY* :LENGTH)
		   AS BUF-NAME = (SEND *BUFFER-HISTORY* :ELEMENT X)
		   AS BUF = (FIND-BUFFER-NAMED BUF-NAME)
		   WHEN (TYPEP BUF 'FILE-BUFFER)
		     RETURN BUF
		   FINALLY (RETURN NIL))))
	 (PATHNAME
	   (ACCEPT-DEFAULTED-PATHNAME "Add File-References"
				      (PATHNAME-DEFAULTS *PATHNAME-DEFAULTS*
							 LAST-BUFFER))))
    (SEND *INTERVAL* :ADD-HEADER :FILE-REFERENCES (LIST PATHNAME)))
  DIS-TEXT)

(DEFFLAVOR MAIL-NODE-MIXIN
	((INITIAL-DESTINATION NIL)
	 (INITIAL-BODY NIL)
	 (INITIAL-INDEX NIL)
	 (BUG-REPORT NIL)
	 (SETUP-SUBJECT NIL)
	 (INITIAL-SUBJECT NIL)
	 (INITIAL-OTHER-HEADERS NIL))
	()
  :SETTABLE-INSTANCE-VARIABLES)

(COMPILER:FUNCTION-DEFINED 'PRINT-HEADER)	; Forward reference: Zmail
(DEFMETHOD (:REVERT MAIL-NODE-MIXIN) ()
  (DELETE-INTERVAL SELF)
  (SEND SELF :REMPROP :RECIPIENTS-DONE)
  (SEND SELF :REMPROP :ZMACS-BUFFER)		;in case this is in a bug mail frame
  (SETQ *STYLE* 0
	*STYLE-NAME* NIL)
  (LET ((POINT (SEND SELF :POINT))
	(*ENABLE-CHANGE-RECORDING* NIL))	;not already NIL if outside of Zmacs
    (INSERT-MOVING POINT "To: ")		;point stays here until insertions finished
    (AND INITIAL-DESTINATION (INSERT-MOVING POINT INITIAL-DESTINATION))
    (LET ((BP (COPY-BP POINT))(BP1))
      (WHEN (OR SETUP-SUBJECT INITIAL-SUBJECT)
	(INSERT-MOVING BP "
Subject: ")
	(WHEN INITIAL-SUBJECT
	  (INSERT-MOVING BP INITIAL-SUBJECT)))
      (SETQ BP1 (COPY-BP BP))
      (INSERT-MOVING BP1 #\CR)
      ;;---insert other headers here
      (LOOP FOR (TYPE . HEADER) IN INITIAL-OTHER-HEADERS
	    DO (INSERT-MOVING BP1 (WITH-OUTPUT-TO-STRING (S)
				    (PRINT-HEADER S HEADER TYPE NIL))))
      (INSERT-MOVING BP1 EDITOR-MAIL-TEXT-SEPARATOR)
      (INSERT-MOVING BP1 #\CR)			;bp1 is where headers ended
      (WHEN INITIAL-BODY			;insert any initial body
	(INSERT BP1 INITIAL-BODY))
      ;; Decide where to leave Point
      (COND ((NOT INITIAL-DESTINATION))		;First priority is to fill in To line
	    ((AND SETUP-SUBJECT
		  (NOT INITIAL-SUBJECT))	;Second is to fill in Subject line
	     (MOVE-BP POINT BP))
	    ((AND INITIAL-BODY INITIAL-INDEX)	;Third is to put Point where we were told
	     (MOVE-BP POINT
		      (FORWARD-CHAR (INTERVAL-LAST-BP SELF)
				    (- INITIAL-INDEX (STRING-LENGTH INITIAL-BODY))
				    T)))
	    (T					;Otherwise prepare to enter text of message
	     (MOVE-BP POINT (INTERVAL-LAST-BP SELF)))))))

(DEFMETHOD (:BUFFER-INIT-OPTIONS MAIL-NODE-MIXIN) ()
  '(:SET-INITIAL-DESTINATION :SET-INITIAL-BODY :SET-INITIAL-INDEX :SET-BUG-REPORT
    :SET-SETUP-SUBJECT :SET-INITIAL-SUBJECT :SET-INITIAL-OTHER-HEADERS))


(DEFUN FIND-EDITOR-MAIL-TEXT-SEPARATOR (BP)
  (LOOP WITH SEPARATOR-STRING = (SI:STRING-TRIM-WHITESPACE EDITOR-MAIL-TEXT-SEPARATOR)
	FOR IBP FIRST BP THEN FOUND-BP
	AS FOUND-BP = (SEARCH IBP SEPARATOR-STRING)
	WHILE FOUND-BP
	AS FOUND-LINE = (SI:STRING-TRIM-WHITESPACE (BP-LINE FOUND-BP))
	WHEN (STRING-EQUAL FOUND-LINE SEPARATOR-STRING)
	  DO (RETURN FOUND-BP)))

(COMPILER:FUNCTION-DEFINED 'PRINT-HEADER)	; Forward reference: Zmail
(DEFMETHOD (:ADD-HEADER MAIL-NODE-MIXIN) (TYPE VAL)
  (LET* ((BP1 (SEND SELF :FIRST-BP))
	 (BP2 (BEG-LINE
		(OR (FIND-EDITOR-MAIL-TEXT-SEPARATOR BP1)
		    (BARF "You've messed up the buffer; couldn't find /"~A/" alone on a line."
			  EDITOR-MAIL-TEXT-SEPARATOR)))))
    (INSERT BP2 (WITH-OUTPUT-TO-STRING (STREAM)
		   (PRINT-HEADER STREAM VAL TYPE NIL)))))

(DEFMETHOD (:REFERENCES MAIL-NODE-MIXIN) ()
  (SECOND (FIRST (FIRST (SEND SELF :GET :RECIPIENTS-DONE)))))

(DEFFLAVOR MAIL-NODE () (MAIL-NODE-MIXIN TOP-LEVEL-NODE))

(DEFMETHOD (:POINT MAIL-NODE) () (POINT))

(DEFUN MAIL-EXIT (UPDATE-P)
  (WHEN (TYPEP *CURRENT-COMMAND-LOOP* 'MAIL-TOP-LEVEL-EDITOR)
    ;; give user a chance to read mode-line output before window is buried
    (PROCESS-SLEEP 180. "Info to user"))
  (SEND *CURRENT-COMMAND-LOOP* ':EXIT-SPECIAL-BUFFER UPDATE-P))

(DEFUN SAVE-DRAFT-INTERVAL-IF-TOP-LEVEL-EDITOR ()
  (WHEN (AND (TYPEP *CURRENT-COMMAND-LOOP* 'MAIL-TOP-LEVEL-EDITOR) *ZMACS-MAIN-FRAME*)
    (IF (FIND-EDITOR-MAIL-TEXT-SEPARATOR (INTERVAL-FIRST-BP *INTERVAL*))
	(LET ((ZMACS-BUFFER (SEND *ZMACS-MAIN-FRAME* :CREATE-BUG-MAIL-FRAME-DRAFT *INTERVAL*)))
	  (SEND *INTERVAL* :PUTPROP ZMACS-BUFFER :ZMACS-BUFFER)
	  (TYPEIN-LINE "  Draft saved in Zmacs buffer ~'b~A~" ZMACS-BUFFER))
      (TYPEIN-LINE "  Can't parse this buffer as a message, ~
                    so it is not being saved in a Zmacs buffer."))))

(DEFCOM COM-QUIT-COM-MAIL "Aborts from the *MAIL* buffer, announcing how to continue." ()
  (IF *NUMERIC-ARG-P*
      (BEEP)
    (WHEN (NOT (WINDOW-MARK-P *WINDOW*))
      (IF *MACRO-LEVEL*				;don't abort composition if entering kbd macro
	  (BARF "Aborting to top level.")
	(SAVE-DRAFT-INTERVAL-IF-TOP-LEVEL-EDITOR)
	(TYPEIN-LINE "Quitting, you may continue")
	(COND ((TYPEP *CURRENT-COMMAND-LOOP* 'MAIL-TOP-LEVEL-EDITOR)
	       (TYPEIN-LINE-MORE " with (ZL:MAIL T)"))
	      ((TYPEP *INTERVAL* 'BUG-MAIL-FRAME-MAIL-BUFFER)
	       (TYPEIN-LINE-MORE " by selecting buffer ~A." *INTERVAL*))
	      (T
	       (LET ((STANDARD-OUTPUT *TYPEIN-WINDOW*))
		 (FIND-COMMAND-ON-KEYS 'COM-MAIL 1 " by giving a numeric arg to "))))
	(MAIL-EXIT NIL))))
  DIS-NONE)

;;; Make editor mail respect the same options and conventions as Zmail, re superseding
(COMPILER:FUNCTION-DEFINED 'PROMPT-FOR-MULTI-LINE-HEADER)
(DEFUN QUERY-ADD-SUPERSEDES-AND-COMMENTS (BUFFER)
  (DECLARE (SPECIAL *ADD-SUPERSEDES-AND-COMMENTS-WHEN-RETRANSMITTING*))	;from Zmail
  (BEEP)
  ;; First, give informational message about the message having been sent already
  (LET ((RECIPIENTS-SENT-FORMAT
	  (IF (LOOP FOR (NIL . RECIPIENTS) IN (SEND BUFFER :GET :RECIPIENTS-DONE)
		    NEVER (NOT (EQUAL RECIPIENTS '(:TRANSMITTING))))
	      "This message may have been sent to some recipients"
	    "This message has already been sent")))
    (CL:CASE *ADD-SUPERSEDES-AND-COMMENTS-WHEN-RETRANSMITTING*
      ((:NEVER :SUPERSEDES-ONLY)
       (TYPEOUT-LINE "~2@T(~?;~%~3@Tthis copy of the message will~:[ not~] ~
		                   supersede any prior transmissions.)"
		    RECIPIENTS-SENT-FORMAT NIL
		    (EQ *ADD-SUPERSEDES-AND-COMMENTS-WHEN-RETRANSMITTING* :SUPERSEDES-ONLY)))
      ((:ASK :SUPERSEDES-THEN-ASK :ALWAYS)
       (TYPEOUT-LINE "~@?." RECIPIENTS-SENT-FORMAT)
       (WHEN (NEQ *ADD-SUPERSEDES-AND-COMMENTS-WHEN-RETRANSMITTING* :ASK)
	 (TYPEOUT-LINE "~2@TThis copy of the message will supersede any prior transmissions."))
       )))
  ;; Now, either add Supersedes and Comments fields or ask for permission to do so.
  (LET* ((SUPERSEDE (CL:CASE *ADD-SUPERSEDES-AND-COMMENTS-WHEN-RETRANSMITTING*
		      ((:NEVER) NIL)
		      ((:ASK)
		       (TYPEOUT-YES-OR-NO-P "~2@TDo you want this copy of the message to ~
					   supersede any prior transmissions? "))
		      ((:SUPERSEDES-ONLY :SUPERSEDES-THEN-ASK :ALWAYS) T)))
	 (ADD-COMMENTS (AND SUPERSEDE
			    (CL:CASE *ADD-SUPERSEDES-AND-COMMENTS-WHEN-RETRANSMITTING*
			      ((:NEVER :SUPERSEDES-ONLY) NIL)
			      ((:ASK :SUPERSEDES-THEN-ASK)
			       (TYPEOUT-YES-OR-NO-P "~&~2@TDo you wish to add an explanation ~
					         for this retransmission? "))
			      ((:ALWAYS) T)))))
    (WHEN SUPERSEDE
      (SEND BUFFER :ADD-HEADER :SUPERSEDES (SEND BUFFER :REFERENCES)))
    (WHEN ADD-COMMENTS
      (LET ((NEW-COMMENTS (PROMPT-FOR-MULTI-LINE-HEADER "Comments")))
	(WHEN NEW-COMMENTS
	  (SEND BUFFER :ADD-HEADER :COMMENTS NEW-COMMENTS))))))

(COMPILER:FUNCTION-DEFINED 'SEND-MESSAGE)	; Forward reference: Zmail
(DEFCOM COM-EXIT-COM-MAIL "Transmits mail being composed in the *MAIL* buffer." ()
  (LET* ((BP1 (INTERVAL-FIRST-BP *INTERVAL*))
	 (BP2 (OR (FIND-EDITOR-MAIL-TEXT-SEPARATOR BP1)
		  (BARF "You've messed up the buffer; couldn't find /"~A/" alone on a line."
			EDITOR-MAIL-TEXT-SEPARATOR))))
    (WHEN (SEND *INTERVAL* :GET :RECIPIENTS-DONE)
      (QUERY-ADD-SUPERSEDES-AND-COMMENTS *INTERVAL*)
      (SETQ BP2 (FIND-EDITOR-MAIL-TEXT-SEPARATOR BP1)))
    ;; Call ZMail to do the actual sending in the appropriate manner for this host
    (SEND-MESSAGE BP1 (BEG-LINE BP2) T (BEG-LINE BP2 1 T) (INTERVAL-LAST-BP *INTERVAL*) T)
    ;; get msg-id, recipients list from resulting draft (if any), save in the mail buffer
    (WHEN (FIRST ZWEI:*DUMMY-DRAFT-LIST*)
      (SEND *INTERVAL* :PUTPROP
	    (SEND (FIRST ZWEI:*DUMMY-DRAFT-LIST*) :RECIPIENTS-DONE) :RECIPIENTS-DONE))
    ;; if this is a freestanding mail frame, save the draft in the editor
    (SAVE-DRAFT-INTERVAL-IF-TOP-LEVEL-EDITOR))
  (MAIL-EXIT T))

(DEFFLAVOR MAIL-TOP-LEVEL-EDITOR
       ((*MAJOR-MODE* (MODE-OF-FLAVOR 'TEXT-MODE)))
       (STANDALONE-MAIL-OR-DIRED-MIXIN TOP-LEVEL-EDITOR)
  (:SPECIAL-INSTANCE-VARIABLES *MAJOR-MODE*)  
  (:SPECIAL-INSTANCE-VARIABLE-BINDING-METHODS :MAIL)
(:DOCUMENTATION :SPECIAL-PURPOSE "The editor for the (MAIL) function"))

(DEFMETHOD (:MAIL MAIL-TOP-LEVEL-EDITOR) (INITIAL-DESTINATION INITIAL-BODY PROMPT INITIAL-IDX
					  BUG-REPORT MAKE-SUBJECT INITIAL-SUBJECT
					  &OPTIONAL INITIAL-OTHER-HEADERS
					  &AUX (RE-INIT-P T))
  (AND (EQ INITIAL-DESTINATION T) (SETQ RE-INIT-P NIL INITIAL-DESTINATION NIL))
  (SEND *INTERVAL* :PUTPROP *MAJOR-MODE* :MAJOR-MODE)
  (COM-MAIL-INTERNAL RE-INIT-P
		     :INITIAL-TO (AND INITIAL-DESTINATION (STRING INITIAL-DESTINATION))
		     :INITIAL-BODY (AND INITIAL-BODY (STRING INITIAL-BODY))
		     :INITIAL-INDEX INITIAL-IDX
		     :BUG-REPORT BUG-REPORT
		     :SETUP-SUBJECT MAKE-SUBJECT
		     :INITIAL-SUBJECT INITIAL-SUBJECT
		     :INITIAL-OTHER-HEADERS INITIAL-OTHER-HEADERS)
  (MUST-REDISPLAY *WINDOW* DIS-ALL)
  (TV:WINDOW-CALL ((WINDOW-FRAME *WINDOW*) :DEACTIVATE)
    (SEND *TYPEIN-WINDOW* ':PREPARE-FOR-TYPEOUT)
    (SEND *TYPEIN-WINDOW* ':CLEAR-WINDOW)
    (WHEN PROMPT
      (TYPEIN-LINE PROMPT)
      (SEND *TYPEIN-WINDOW* ':TYPEOUT-STAYS))
    (SEND SELF ':EDIT)))

(DEFFLAVOR BUG-MAIL-FRAME-MIXIN () () )

(DEFMETHOD (:NAME-FOR-SELECTION BUG-MAIL-FRAME-MIXIN) ()
  (SEND SELF :NAME))

(DEFFLAVOR BUG-MAIL-FRAME () (BUG-MAIL-FRAME-MIXIN ZWEI-FRAME))

(DEFRESOURCE MAIL-COMMAND-LOOP (&OPTIONAL (SUPERIOR TV:DEFAULT-SCREEN))
  :CONSTRUCTOR MAKE-MAIL-COMMAND-LOOP
  :INITIAL-COPIES 0)

(DEFUN MAKE-MAIL-COMMAND-LOOP (IGNORE &OPTIONAL (SUPERIOR TV:DEFAULT-SCREEN))
  (LET* ((FRAME (TV:MAKE-WINDOW 'BUG-MAIL-FRAME :SUPERIOR SUPERIOR))
	 (WINDOW (SEND FRAME :CREATE-WINDOW 'ZWEI-WINDOW-PANE
		       :MARGIN-COMPONENTS 'DW:((MARGIN-RAGGED-BORDERS :THICKNESS 1)
					       (MARGIN-WHITE-BORDERS )
					       (MARGIN-SCROLL-BAR )
					       (MARGIN-WHITE-BORDERS :THICKNESS 2)
					       (MARGIN-LABEL :STRING "Mail")))))
    (SET-WINDOW-INTERVAL WINDOW (CREATE-INTERVAL NIL NIL 'MAIL-NODE))
    (MAKE-COMMAND-LOOP *STANDARD-COMTAB* WINDOW 'MAIL-TOP-LEVEL-EDITOR)))

;;; Top level functions for mailing
(DEFUN MAIL (&OPTIONAL INITIAL-DESTINATION INITIAL-BODY PROMPT INITIAL-IDX BUG-REPORT
	               (MAKE-SUBJECT (MEMQ ZWEI:*REQUIRE-SUBJECTS* '(T :INIT)))
		       INITIAL-SUBJECT (RUNNING-IN-INSTIGATING-PROCESS T)
		       SUPERIOR)
  (UNLESS SUPERIOR
    (SETQ SUPERIOR (TV:CONSOLE-DEFAULT-SUPERIOR)))
  ;; If we are reporting a bug that occurred while booting, wait until
  ;; the window system is initialized and the initial herald is fully displayed
  (WHEN (OR (NULL SUPERIOR) (EQ SUPERIOR TV:DEFAULT-SCREEN))
    (PROCESS-WAIT "Window system"
      (LAMBDA () (AND TV:DEFAULT-SCREEN TV:INITIAL-LISP-LISTENER)))
    (SETQ SUPERIOR TV:DEFAULT-SCREEN))
  (IF (NETI:REMOTE-TERMINAL-P)
      (FORMAT T "~&Mail can currently only be used from the main console.~%")
    (LET ((SELECTED-WINDOW (TV:SHEET-SELECTED-WINDOW SUPERIOR)))
      (USING-RESOURCE (*CURRENT-COMMAND-LOOP* MAIL-COMMAND-LOOP SUPERIOR)
	(IF RUNNING-IN-INSTIGATING-PROCESS
	    ;; this is a (BUG) or (MAIL) from a listener; shadow the current activity
	    (TV:WITH-WINDOW-SHADOWED-FOR-SELECTION
	      (SELECTED-WINDOW
		(SEND (WINDOW-SHEET (SYMEVAL-IN-INSTANCE *CURRENT-COMMAND-LOOP* '*WINDOW*))
		      :ALIAS-FOR-SELECTED-WINDOWS))
	      (SEND *CURRENT-COMMAND-LOOP* ':MAIL INITIAL-DESTINATION INITIAL-BODY PROMPT
		    INITIAL-IDX BUG-REPORT MAKE-SUBJECT INITIAL-SUBJECT))
	  ;; this is a separate mail window process; don't shadow anybody for selection
	  (SEND *CURRENT-COMMAND-LOOP* ':MAIL INITIAL-DESTINATION INITIAL-BODY PROMPT
		INITIAL-IDX BUG-REPORT MAKE-SUBJECT INITIAL-SUBJECT))))))

(DEFUN BUG (&OPTIONAL (SYSTEM (OR DBG:*DEFAULT-BUG-REPORT-RECIPIENT-SYSTEM*
				  DBG:*DEFAULT-DEFAULT-BUG-REPORT-RECIPIENT-SYSTEM*))
	    ADDITIONAL-BODY PROMPT
	    POINT-BEFORE-ADDITIONAL-BODY
	    (MAKE-SUBJECT (MEMQ ZWEI:*REQUIRE-SUBJECTS* '(T :INIT :BUG)))
	    INITIAL-SUBJECT
	    (RUNNING-IN-INSTIGATING-PROCESS T)
	    SUPERIOR)
  (MULTIPLE-VALUE-BIND (INITIAL-DESTINATION INITIAL-BODY)
      (PARSE-BUG-ARG SYSTEM)
    (MAIL INITIAL-DESTINATION
	  (IF ADDITIONAL-BODY
	      (STRING-APPEND INITIAL-BODY #\CR ADDITIONAL-BODY)
	      INITIAL-BODY)
	  PROMPT
	  (AND POINT-BEFORE-ADDITIONAL-BODY 
	       (STRING-LENGTH INITIAL-BODY))
	  T
	  MAKE-SUBJECT
	  INITIAL-SUBJECT
	  RUNNING-IN-INSTIGATING-PROCESS
	  SUPERIOR)))

(DEFINE-SITE-VARIABLE *HOST-FOR-BUG-REPORTS* :HOST-FOR-BUG-REPORTS)

;; Forward reference: Zmail
(COMPILER:FUNCTION-DEFINED 'MAILER:ALL-MAIL-ADDRESSES-FORWARD-BETWEEN-HOSTS-P)

(DEFVAR *BUG-REPORT-RECIPIENT-OVERRIDE* NIL)

(DEFUN PARSE-BUG-ARG (SYSTEM &OPTIONAL PRETTY-NAME)
  (LET ((ADDRESSEE-NAME))
    ;; The "system" arg may be a DEFSYSTEM :bug-reports spec, a symbol, or a string.
    ;; A string or symbol may name an SCT:SYSTEM that has a :bug-reports spec.  If not,
    ;; they may look like FOO or "Foo"; or BUG-FOO or "Bug-Foo".  Dwim all of this.
    (WHEN (NLISTP SYSTEM)
      (LET* ((SYS (SCT:FIND-SYSTEM-NAMED SYSTEM NIL T))	; name of a SCT:SYSTEM
	     (BUG-REPORTS (AND SYS (SCT:SYSTEM-BUG-REPORTS SYS)))
	     (SPEC (AND BUG-REPORTS
			(DBG:EXTRACT-BUG-RECIPIENT BUG-REPORTS SYS))))
	(WHEN SPEC
	  (SETQ SYSTEM SPEC)
	  (WHEN (NLISTP SPEC)
	    (SETQ PRETTY-NAME (SCT:SYSTEM-PRETTY-NAME SYS))))))
    (COND ((AND (LISTP SYSTEM) (SYMBOLP (FIRST SYSTEM)))	; modern :bug-reports spec
	   (SETQ ADDRESSEE-NAME (CL:GETF SYSTEM :MAILING-LIST))
	   (UNLESS PRETTY-NAME
	     (SETQ PRETTY-NAME (CL:GETF SYSTEM :NAME))))
	  (SYSTEM				; anything else non-NIL
	   (LET ((BUG-STYLE "Bug-"))
	     (SETQ SYSTEM (STRING SYSTEM))
	     (COND
	       ;; SYSTEM is all uppercase
	       ((STRING= (SI:STRING-UPCASE-IF-NECESSARY SYSTEM) SYSTEM)
		(SETQ BUG-STYLE "BUG-"))
	       ;; SYSTEM is all lowercase
	       ((STRING= (SI:STRING-DOWNCASE-IF-NECESSARY SYSTEM) SYSTEM)
		(IF (STRING-SEARCH-SET "aeiou" SYSTEM)
		    (ASET (CHAR-UPCASE (AREF SYSTEM 0)) SYSTEM 0)
		  ;; SYSTEM is an acronym
		  (SETQ SYSTEM (STRING-UPCASE SYSTEM)))))
	     (COND ((STRING-EQUAL "BUG-" SYSTEM 0 0 4 4)
		    (SETQ ADDRESSEE-NAME SYSTEM)
		    (UNLESS PRETTY-NAME
		      (SETQ PRETTY-NAME (SUBSTRING SYSTEM 4))))
		   (T
		    (SETQ ADDRESSEE-NAME (STRING-APPEND BUG-STYLE SYSTEM))
		    (UNLESS PRETTY-NAME
		      (SETQ PRETTY-NAME SYSTEM)))))))
    (VALUES
      (OR *BUG-REPORT-RECIPIENT-OVERRIDE*
	  (IF SYSTEM
	      (IF (OR (NULL *HOST-FOR-BUG-REPORTS*)
		      (MAILER:ALL-MAIL-ADDRESSES-FORWARD-BETWEEN-HOSTS-P
			(SECOND (SEND SI:*USER* :MAIL-ADDRESS)) *HOST-FOR-BUG-REPORTS*))
		  ADDRESSEE-NAME
		(STRING-APPEND ADDRESSEE-NAME #/@ *HOST-FOR-BUG-REPORTS*))
	    NIL))
      (WITH-OUTPUT-TO-STRING (ST)
	(DBG:BUG-MAIL-PROLOGUE ST :SYSTEM-NAME PRETTY-NAME)))))

(DEFUN DOCUMENT-BUG (COMMAND IGNORE TYPE)
  (SELECTQ TYPE
    (:NAME (GET COMMAND 'COMMAND-NAME))
    ((:FULL :SHORT)
     (FUNCALL STANDARD-OUTPUT :STRING-OUT "Sets up a mail buffer for sending a bug report.")
     (WHEN (EQ COMMAND 'COM-REPORT-BUG)
       (FUNCALL STANDARD-OUTPUT :STRING-OUT "  (Synonym for Bug.)"))
     (WHEN (EQ TYPE ':FULL)
       (FORMAT STANDARD-OUTPUT "
It prompts for a mailing list name, supplying the prefix Bug- for
whatever you type.  The default destination for the bug report is the
mailing list Bug-~A."
	       DBG:*DEFAULT-BUG-RECIPIENT-ROOT-NAME*)))))

;;; This is a synonym for COM-BUG and MUST STAY IN STEP WITH IT.
(DEFCOM COM-REPORT-BUG DOCUMENT-BUG ()
  (COM-BUG))

(DEFCOM COM-BUG DOCUMENT-BUG ()
  (MULTIPLE-VALUE-BIND (DESTINATION INITIAL-BODY)
      (PARSE-BUG-ARG (TYPEIN-LINE-HISTORY-READLINE
		       NIL DBG:*DEFAULT-BUG-RECIPIENT-ROOT-NAME* T 
		       (FORMAT NIL "Report a bug about (default ~A):"
			       DBG:*DEFAULT-BUG-RECIPIENT-ROOT-NAME*)))
    (COM-MAIL-INTERNAL T :INITIAL-TO DESTINATION
			 :INITIAL-BODY INITIAL-BODY
			 :BUG-REPORT T)))

(defcom com-insert-bug-herald
	"Inserts information about the running world into the buffer
in the character style specified by dbg:*character-style-for-bug-mail-prologue*.
With a numeric argument use the buffer's current character style."
	(km)
  (let-if *numeric-arg-p*
	  ((dbg:*character-style-for-bug-mail-prologue* '(nil nil nil)))
    (insert-moving
      (point)
      (with-output-to-string (st)
	(dbg:bug-mail-prologue st))))
  dis-text)

(DEFVAR *DOC-CHANGES-FRAMEWORK*
	"Thing affected: 

Best classification: Lisp | Utilities | LMFS | Zmacs | Zmail | Notes | Operations

Type:  Incompatible  |  New  |  Bugfix//improvement

Visibility:  End-user  |  Application  |  System  |  Primitive//ucode

Effective:  In the source  |  Patch <which>  

Details: 

Why I did it: 

Example: 

Documented before?:  <where>

Any background info:
")

;; If the site has the :ALL-MAIL-ADDRESSES-FORWARD property, then this address is in the
;; current domain.  Otherwise, the same host as the *HOST-FOR-BUG-REPORTS* is used.
(DEFVAR *DOC-CHANGES-DESTINATION* "Doc-Changes")

    ;; Forward reference: Zmail
(COMPILER:FUNCTION-DEFINED 'MAILER:ALL-MAIL-ADDRESSES-FORWARD-BETWEEN-HOSTS-P)
(DEFCOM COM-DOCUMENT-CHANGES
	"Sets up a mail buffer for filing a documentation change notice.
If you change a function, you can use this command to help with
organizing the information about the change and transmitting it to the
people working on the documentation.  By default, it sends the mail to
a mailing list which is the value of ZWEI:*DOC-CHANGES-DESTINATION*." ()
  (LET ((DESTINATION (TYPEIN-LINE-READLINE "Report changes to (default ~A)"
					   *DOC-CHANGES-DESTINATION*)))
    (UNLESS (STRING-SEARCH-NOT-SET '(#\SPACE #\TAB) DESTINATION)
      (SETQ DESTINATION *DOC-CHANGES-DESTINATION*))
    (UNLESS (MAILER:ALL-MAIL-ADDRESSES-FORWARD-BETWEEN-HOSTS-P
	      (SECOND (SEND SI:*USER* :MAIL-ADDRESS)) *HOST-FOR-BUG-REPORTS*)
      (SETQ DESTINATION (STRING-APPEND DESTINATION #/@ *HOST-FOR-BUG-REPORTS*)))
    (TYPEIN-LINE "")
    (SEND *TYPEIN-WINDOW* ':TYPEOUT-STAYS)
    (TYPEIN-LINE "Fill in the blanks, deleting any inappropriate stuff from the lists.")
    (COM-MAIL-INTERNAL T :INITIAL-TO DESTINATION
			 :INITIAL-BODY *DOC-CHANGES-FRAMEWORK*
			 :INITIAL-INDEX
			  (STRING-SEARCH-CHAR #\RETURN *DOC-CHANGES-FRAMEWORK*))))

(DEFINE-SPECIAL-BUFFER-TYPE MAIL-BUFFER
			    ()
			    (MAIL-NODE-MIXIN DESCRIPTION-ENCACHING-SPECIAL-PURPOSE-BUFFER
			     SPECIAL-PURPOSE-BUFFER-WITH-TICK)
			    :MAIL "Mail"
  (:BUFFER-INIT-OPTIONS :SET-INITIAL-DESTINATION :SET-INITIAL-BODY :SET-INITIAL-INDEX
			:SET-BUG-REPORT))

(DEFMACRO MAKE-EMPTY-STRING (LENGTH)
  `(MAKE-ARRAY ,LENGTH ':TYPE 'ART-STRING ':LEADER-LIST '(0)))

(COMPILER:FUNCTION-DEFINED 'PARSE-HEADERS-INTERVAL)	; Forward references: Zmail
(COMPILER:FUNCTION-DEFINED 'SUMMARIZE-RECIPIENTS)
(DEFMETHOD (:DESCRIPTION MAIL-BUFFER) (&AUX (NETI:*INHIBIT-VALIDITY-CHECKING* T))
  (LET ((BP2 (LET ((*INTERVAL* SELF))
	       (SEARCH FIRST-BP "--Text follows this line--"))))
    (IF (NULL BP2) "(Garbage)"
	(LET ((HEADERS (PARSE-HEADERS-INTERVAL FIRST-BP (BEG-LINE BP2) T)))
	  (IF (GET (LOCF HEADERS) 'LOSING-HEADERS)
	      "(Garbage)"
	      (LET ((TO (GET (LOCF HEADERS) ':TO))
		    (SUBJECT (CADR (GETL (LOCF HEADERS) '(:SUBJECT :S :RE))))
		    (STRING (MAKE-ARRAY 50. ':TYPE 'ART-STRING ':FILL-POINTER 0
					':AREA *ZMACS-BUFFER-AREA*))
		    (STRING-FAT-P NIL))
		(FLET ((APPEND-TO-STRING (NEW-STRING)
			 (WHEN (AND (NOT STRING-FAT-P)
				    (STRING-FAT-P NEW-STRING))
			   (LET ((FAT-STRING (MAKE-ARRAY (+ (STRING-LENGTH STRING) 20)
							 :TYPE 'ART-FAT-STRING
							 :FILL-POINTER (FILL-POINTER STRING)
							 :AREA *ZMACS-BUFFER-AREA*)))
			     (COPY-ARRAY-CONTENTS STRING FAT-STRING)
			     (CL:SETF STRING-FAT-P T
				      STRING FAT-STRING)))
			 (APPEND-TO-ARRAY STRING NEW-STRING)))
		  (ARRAY-PUSH STRING #/()
		  (WHEN (NOT (NULL TO))
		    (APPEND-TO-STRING "To: ")
		  (APPEND-TO-STRING (SUMMARIZE-RECIPIENTS TO 45.))
		  (AND SUBJECT (ARRAY-PUSH-EXTEND STRING #\SP)))
		  (WHEN (NOT (NULL SUBJECT))
		    (APPEND-TO-STRING "Re: ")
		    (APPEND-TO-STRING (IF (LISTP SUBJECT) (FIRST SUBJECT) SUBJECT)))
		  (ARRAY-PUSH STRING #/))
		  STRING)))))))

;;; Always keep mail buffers around, even after being sent.
(DEFMETHOD (:REUSABLE MAIL-BUFFER) (IGNORE) NIL)


;;; Buffers created to preserve the drafts from freestanding mail frames ("bug mail frames")

(DEFFLAVOR BUG-MAIL-FRAME-MAIL-NODE-MIXIN (INITIAL-CONTENTS) () :SETTABLE-INSTANCE-VARIABLES)

(COMPILER:FUNCTION-DEFINED 'PRINT-HEADER)
(DEFMETHOD (:REVERT BUG-MAIL-FRAME-MAIL-NODE-MIXIN) ()
  (DELETE-INTERVAL SELF)
  (SETQ *STYLE* 0
	*STYLE-NAME* NIL)
  (LET* ((POINT (SEND SELF :POINT))
	 (BP (COPY-BP POINT))
	 (BP1))
    (WHEN INITIAL-CONTENTS				;insert any initial body
      (INSERT BP INITIAL-CONTENTS))
    ;; Decide where to leave Point: normally at the beginning of the message Text;
    ;; if that can't be found, then at the beginning
    (SETQ BP1 (FIND-EDITOR-MAIL-TEXT-SEPARATOR POINT))
    (WHEN BP1
      (SETQ BP1 (OR (FORWARD-LINE BP1) BP1))
      (MOVE-BP POINT BP1))))

(DEFMETHOD (:BUFFER-INIT-OPTIONS BUG-MAIL-FRAME-MAIL-NODE-MIXIN) ()
  '(:SET-INITIAL-CONTENTS :SET-BUG-REPORT :SET-PROPERTY-LIST))

(DEFINE-SPECIAL-BUFFER-TYPE BUG-MAIL-FRAME-MAIL-BUFFER
			    ()
			    (BUG-MAIL-FRAME-MAIL-NODE-MIXIN MAIL-NODE-MIXIN
			     DESCRIPTION-ENCACHING-SPECIAL-PURPOSE-BUFFER
			     SPECIAL-PURPOSE-BUFFER-WITH-TICK)
			    :BUG-MAIL-FRAME-MAIL "Bug-Mail-Frame-Mail"
  (:BUFFER-INIT-OPTIONS :SET-INITIAL-CONTENTS :SET-BUG-REPORT :SET-PROPERTY-LIST))

(DEFMETHOD (:DESCRIPTION BUG-MAIL-FRAME-MAIL-BUFFER) ()
  (LET ((NETI:*INHIBIT-VALIDITY-CHECKING* T)
	(BP2 (LET ((*INTERVAL* SELF))
	       (SEARCH FIRST-BP "--Text follows this line--"))))
    (IF (NULL BP2) "(Garbage)"
	(LET ((HEADERS (PARSE-HEADERS-INTERVAL FIRST-BP (BEG-LINE BP2) T)))
	  (IF (GET (LOCF HEADERS) 'LOSING-HEADERS)
	      "(Garbage)"
	      (LET ((TO (GET (LOCF HEADERS) ':TO))
		    (SUBJECT (CADR (GETL (LOCF HEADERS) '(:SUBJECT :S :RE))))
		    (STRING (MAKE-ARRAY 50. ':TYPE 'ART-STRING ':FILL-POINTER 0
					':AREA *ZMACS-BUFFER-AREA*))
		    (STRING-FAT-P NIL))
		(FLET ((APPEND-TO-STRING (NEW-STRING)
			 (WHEN (AND (NOT STRING-FAT-P)
				    (STRING-FAT-P NEW-STRING))
			   (LET ((FAT-STRING (MAKE-ARRAY (+ (STRING-LENGTH STRING) 20)
							 :TYPE 'ART-FAT-STRING
							 :FILL-POINTER (FILL-POINTER STRING)
							 :AREA *ZMACS-BUFFER-AREA*)))
			     (COPY-ARRAY-CONTENTS STRING FAT-STRING)
			     (CL:SETF STRING-FAT-P T
				      STRING FAT-STRING)))
			 (APPEND-TO-ARRAY STRING NEW-STRING)))
		  (ARRAY-PUSH STRING #/()
		  (WHEN (NOT (NULL TO))
		    (APPEND-TO-STRING "To: ")
		  (APPEND-TO-STRING (SUMMARIZE-RECIPIENTS TO 45.))
		  (AND SUBJECT (ARRAY-PUSH-EXTEND STRING #\SP)))
		  (WHEN (NOT (NULL SUBJECT))
		    (APPEND-TO-STRING "Re: ")
		    (APPEND-TO-STRING (IF (LISTP SUBJECT) (FIRST SUBJECT) SUBJECT)))
		  (ARRAY-PUSH STRING #/))
		  STRING)))))))

;;; Always keep bug-mail-frame mail buffers around, even after being sent.
(DEFMETHOD (:REUSABLE BUG-MAIL-FRAME-MAIL-BUFFER) (IGNORE) NIL)

