;;; -*- Syntax: Zetalisp; MODE: Lisp; Package: System-internals; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Input editor commands that require ZWEI.

;;; Motion and deletion

(DEFINE-IE-COMMAND FORWARD-UP-PARENTHESES (#\CONTROL-META-CLOSE)
  (IF-ZWEI-LOADED
      (IE-SET-POSITION
	(MULTIPLE-VALUE-BIND (NEW-POS FOUND-P)
	    (IE-APPLY-ZWEI-BP-FUNCTION #'ZWEI:FORWARD-UP-LIST-OR-STRING
	      (IEB-TYPEIN-POINTER) 1)
	  (WHEN (NOT FOUND-P) (BEEP))
	  NEW-POS))
    (BEEP)))

(DEFINE-IE-COMMAND BACKWARD-UP-PARENTHESES (#\CONTROL-META-OPEN #\CONTROL-META-U)
  (IF-ZWEI-LOADED
      (IE-SET-POSITION
	(MULTIPLE-VALUE-BIND (NEW-POS FOUND-P)
	    (IE-APPLY-ZWEI-BP-FUNCTION #'ZWEI:FORWARD-UP-LIST-OR-STRING
	      (IEB-TYPEIN-POINTER) -1)
	  (WHEN (NOT FOUND-P) (BEEP))
	  NEW-POS))
    (BEEP)))

(DEFINE-IE-COMMAND FORWARD-DOWN-PARENTHESES (#\CONTROL-META-D)
  (IF-ZWEI-LOADED
      (IE-SET-POSITION
	(MULTIPLE-VALUE-BIND (NEW-POS FOUND-P)
	    (IE-APPLY-ZWEI-BP-FUNCTION #'ZWEI:FORWARD-LIST
	      (IEB-TYPEIN-POINTER) 1 NIL -1 T)
	  (WHEN (NOT FOUND-P) (BEEP))
	  NEW-POS))
    (BEEP)))

(DEFINE-IE-COMMAND KILL-BACKWARD-UP-LIST ()
  (IF-ZWEI-LOADED
      (LET* ((BP1 (IEB-TYPEIN-POINTER))
	     (BP2 (IE-SEARCH-FORWARD-PARENS BP1)))
	(IE-DELETE-STRING BP1 BP2 T)
	(IE-SET-POSITION
	  (MULTIPLE-VALUE-BIND (NEW-POS FOUND-P)
	      (IE-APPLY-ZWEI-BP-FUNCTION #'ZWEI:FORWARD-UP-LIST-OR-STRING
		(IEB-TYPEIN-POINTER) -1)
	    (WHEN (NOT FOUND-P) (BEEP))
	    NEW-POS))
	(LET ((TBP (IEB-TYPEIN-POINTER)))
	  (IE-DELETE-STRING TBP (IE-SEARCH-FORWARD-PARENS TBP) NIL))
	(IE-YANK-COMMAND ZWEI:*KILL-HISTORY*)
	;; Leave the point at the "same place" it started
	(IE-SET-POSITION
	  (IE-SEARCH-BACKWARD-PARENS (IEB-TYPEIN-POINTER))))
    (BEEP))) 

(DEFINE-IE-COMMAND BEGINNING-OF-DEFINITION (#\CONTROL-META-A)
  (IF-ZWEI-LOADED
      (IE-SET-POSITION
	(MULTIPLE-VALUE-BIND (NEW-POS FOUND-P)
	    (IE-APPLY-ZWEI-BP-FUNCTION #'ZWEI:FORWARD-DEFINITION
	      (IEB-TYPEIN-POINTER) -1)
	  (WHEN (NOT FOUND-P) (BEEP))
	  NEW-POS))
    (BEEP)))

;; Copied from ZWEI:COM-END-OF-DEFINITION
(DEFUN IE-END-OF-DEFINITION (STARTING-BP)
  (MACROLET ((ZBARF () `(RETURN-FROM IE-END-OF-DEFINITION NIL)))
    (LET ((BP (ZWEI:FORWARD-DEFINITION
		STARTING-BP -1 T)))		;Go to front of defun.
      (OR (SETQ BP (ZWEI:FORWARD-SEXP BP))	; and forward over it
	  (ZBARF))
      (SETQ BP (ZWEI:BEG-LINE BP 1 T))
      (COND ((OR (ZWEI:BP-= BP STARTING-BP)	;If we were between defuns,
		 (ZWEI:BP-< BP STARTING-BP))
	     (SETQ BP (ZWEI:END-LINE BP -1 T))
	     (OR (SETQ BP (ZWEI:FORWARD-SEXP (ZWEI:FORWARD-DEFINITION BP 1 T)))
		 (ZBARF))
	     (SETQ BP (ZWEI:BEG-LINE BP 1 T))))	; then move ahead another.
      BP)))

(DEFINE-IE-COMMAND END-OF-DEFINITION (#\CONTROL-META-E)
  (IF-ZWEI-LOADED
      (IE-SET-POSITION
	(MULTIPLE-VALUE-BIND (NEW-POS FOUND-P)
	    (IE-APPLY-ZWEI-BP-FUNCTION #'IE-END-OF-DEFINITION (IEB-TYPEIN-POINTER))
	  (WHEN (NOT FOUND-P) (BEEP))
	  NEW-POS))
    (BEEP)))

(DEFINE-IE-COMMAND EXCHANGE-EXPRESSIONS (#\CONTROL-META-T)
  (IF-ZWEI-LOADED
    (BLOCK EXCHANGE-EXPRESSIONS
      (FLET ((SEARCH-FORWARD-EXPRESSION (PTR)
	       (MULTIPLE-VALUE-BIND (BP FOUND-P)
		   (SI:IE-SEARCH-FORWARD-PARENS PTR)
		 (IF FOUND-P BP (IE-BARF))))
	     (SEARCH-BACKWARD-EXPRESSION (PTR)
	       (MULTIPLE-VALUE-BIND (BP FOUND-P)
		   (SI:IE-SEARCH-BACKWARD-PARENS PTR)
		 (IF FOUND-P BP (IE-BARF)))))
	(LET* ((E2 (SEARCH-FORWARD-EXPRESSION (IEB-TYPEIN-POINTER)))
	       (B2 (SEARCH-BACKWARD-EXPRESSION E2))
	       (B1 (SEARCH-BACKWARD-EXPRESSION B2))
	       (E1 (SEARCH-FORWARD-EXPRESSION B1))
	       (S1 (SUBSTRING INPUT-EDITOR-BUFFER B1 E1))
	       (S2 (SUBSTRING INPUT-EDITOR-BUFFER B2 E2)))
	  ;; Check to make sure we aren't twiddling enclosing expressions.
	  ;; We could be more clever and follow ZWEI's strategy, but the rest of the
	  ;; input-editor commands don't seem to do that, so this probably shouldn't be
	  ;; an exception.
	  (IF ( B1 E1 B2 E2)
	      (PROGN
		(IE-DELETE-STRING B2 E2 NIL)
		(IE-DELETE-STRING B1 E1 NIL)
		(IE-SET-POSITION B1)
		(IE-INSERT-STRING S2)
		(IE-SET-POSITION (+ B2 (- (STRING-LENGTH S2) (STRING-LENGTH S1))))
		(IE-INSERT-STRING S1))
	      (IE-BARF)))))
    (BEEP)))

(DEFINE-IE-COMMAND MAKE-/(/) (#\META-OPEN) :ARGLIST (&OPTIONAL (CH #/OPEN))
  (IF-ZWEI-LOADED
      (LET ((OPEN #/OPEN)
	    (CLOSE #/CLOSE)
	    (MOVER 'ZWEI:FORWARD-SEXP)
	    (POINT (IEB-TYPEIN-POINTER)))
	(DO ((L ZWEI:*MATCHING-DELIMITER-LIST* (CDR L)))
	    ((NULL L))
	  (COND ((OR (CHAR-EQUAL CH (CAAR L)) (CHAR-EQUAL CH (CADAR L)))
		 (SETQ OPEN (CAAR L) CLOSE (CADAR L) MOVER (CADDAR L))
		 (RETURN T))))
	(LET
	  ((BP (IF *NUMERIC-ARG-P*
		   (OR (IF (EQ MOVER 'ZWEI:FORWARD-SEXP)
			   ;; No UP
			   (IE-APPLY-ZWEI-BP-FUNCTION MOVER POINT *NUMERIC-ARG* NIL 0 NIL T T)
			   (IE-APPLY-ZWEI-BP-FUNCTION MOVER POINT *NUMERIC-ARG*))
		       (BEEP))
		   POINT))
	   (POINT POINT)
	   (BACKWARD (MINUSP *NUMERIC-ARG*))
	   (*NUMERIC-ARG* 1))
	  (WHEN BACKWARD (PSETQ BP POINT POINT BP))
	  (IE-SET-POSITION BP)
	  (IE-INSERT-CHAR CLOSE)	  
	  (IE-SET-POSITION POINT)
	  (IE-INSERT-CHAR OPEN))
	(IE-SET-POSITION (1+ POINT)))
    (BEEP)))

;;; Lisp Mode Documentation

;;; This code only knows about symbols.  The only reason for calling VALIDATE-FUNCTION-SPEC
;;; is to filter out NIL.

(DEFUN IE-DESCRIBE-ARGUMENTS-CHECK (SYMBOL &OPTIONAL ARGLIST-FINDER)
  (IF ARGLIST-FINDER
      (MULTIPLE-VALUE-BIND (ARGLIST NIL NIL FOUND-P)
	  (FUNCALL ARGLIST-FINDER SYMBOL)
	;; make this work compatably with previous release, where it used 
	;; to stupidly use the arglist to determine if the arglist was found.
	(OR ARGLIST FOUND-P))
    (AND (VALIDATE-FUNCTION-SPEC SYMBOL)
	 (FDEFINEDP SYMBOL))))

(DEFVAR *DELIMITER-AND-MODE-TO-ARGLIST-FINDER-TABLE* NIL)

(DEFUN FIND-ARGLIST-FINDER (DELIMITER MODE-NAME)
  (LOOP FOR (CHAR MODE FUNCTION) IN *DELIMITER-AND-MODE-TO-ARGLIST-FINDER-TABLE*
	WHEN (AND (CHAR-EQUAL DELIMITER CHAR)
		  (EQL MODE-NAME MODE))
	  RETURN FUNCTION))

(DEFUN-IE IE-READ-FROM-BUFFER (BEGIN END SI:*READER-INTERN*)
  (MULTIPLE-VALUE-BIND (CHAR-SET INDEX)
      (CHAR-CHAR-SET-AND-INDEX (AREF INPUT-EDITOR-BUFFER BEGIN))
    (IF (EQ CHAR-SET *BUFFER-BLIPS-CHARSET*)
	;; If the thing we are reading is a blip, return the blip object
	(LET ((BLIP (NTH INDEX (IEB-BUFFER-BLIPS))))
	  (THIRD (CAR BLIP)))
      (READ-FROM-STRING INPUT-EDITOR-BUFFER 'SI:NO-EOF-OPTION BEGIN END))))

;; Call READ-FROM-STRING instead of INTERN so as to recognize package prefixes.
;; When calling READ-FROM-STRING, try first with PACKAGE bound to the pre-READ value.
;; If that doesn't win, then try with the current value.  When calling ZWEI:PRINT-ARGLIST or
;; FORMAT to print the symbol, always bind to the pre-READ value.  The next two functions
;; are also called by Sage.

(DEFUN-IE IE-RELEVANT-FUNCTION-OR-MESSAGE (ALLOW-MESSAGE PRINT-FUNCTION &REST PRINT-ARGS)
  "PRINT-FUNCTION is called with an arglist-finder, the symbol, message-p iff ALLOW-MESSAGE
is T, the stream, and optional print-args"
  (LET (SYMBOL CHECK
	(MESSAGE-P NIL)
	(ARGLIST-FINDER NIL))
    (DO-NAMED GET-SYMBOL
	      ((BEGIN (IEB-TYPEIN-POINTER))
	       (END)
	       (LEADING-DELIMITER)
	       (READ))
	      (NIL)
      (SETQ BEGIN (IE-APPLY-ZWEI-BP-FUNCTION #'ZWEI:FORWARD-UP-LIST-OR-STRING
		    BEGIN -1))
      (IF (AND BEGIN (< BEGIN (IEB-TYPEIN-POINTER)))	;don't explode
	  (INCF BEGIN)
	(RETURN))
      (SETQ END (IE-SEARCH-CHAR #\SPACE BEGIN))
      (SETQ LEADING-DELIMITER (AREF INPUT-EDITOR-BUFFER
				    (IE-APPLY-ZWEI-BP-FUNCTION #'ZWEI:FORWARD-CHAR BEGIN -1))
	    ARGLIST-FINDER (LET* ((SYNTAX (CURRENT-LISP-SYNTAX))
				  (SYNTAX-NAME (AND SYNTAX (LISP-SYNTAX-NAME-SYMBOL SYNTAX))))
			     (FIND-ARGLIST-FINDER LEADING-DELIMITER SYNTAX-NAME)))
      (CONDITION-CASE (ERROR)
	   (LOOP FOR PKG = PACKAGE THEN *INPUT-EDITOR-PACKAGE* DOING
	     ;; First try looking in the current package.
	     ;; Then try in the toplevel package.
	     (SETQ READ (LET ((PACKAGE PKG))
			  (IE-READ-FROM-BUFFER BEGIN END 'INTERN-SOFT)))
	     (WHEN READ
	       (COND ((IE-DESCRIBE-ARGUMENTS-CHECK READ ARGLIST-FINDER)
		      (SETQ SYMBOL READ CHECK :DEFINED)
		      ;; Look ahead for a function or message name, but only
		      ;; if there are any more tokens in the input buffer.
		      (WHEN (AND (NOT (NULL END))
				 ALLOW-MESSAGE
				 (MEMQ SYMBOL '(SEND LEXPR-SEND FUNCALL LEXPR-FUNCALL
						FUNCALL-SELF LEXPR-FUNCALL-SELF)))
			;; Try to find the message
			(CONDITION-CASE ()
			     (MULTIPLE-VALUE-BIND (MESSAGE POSITION)
				 (IE-READ-FROM-BUFFER END (IEB-TYPEIN-POINTER) 'INTERN-SOFT)
			       (UNLESS (MEMQ SYMBOL '(FUNCALL-SELF LEXPR-FUNCALL-SELF))
				 (MULTIPLE-VALUE (MESSAGE POSITION)
				   (IE-READ-FROM-BUFFER POSITION (IEB-TYPEIN-POINTER)
							'INTERN-SOFT)))
			       (WHEN (OR (KEYWORDP MESSAGE)
					 (AND (LISTP MESSAGE)
					      (EQ (FIRST MESSAGE) 'QUOTE)
					      (SETQ MESSAGE (SECOND MESSAGE))
					      (SYMBOLP MESSAGE)))
				 (WHEN (FLAVOR:FIND-GENERIC-FUNCTION MESSAGE NIL)
				   (SETQ SYMBOL MESSAGE
					 MESSAGE-P T))))
			   (SYS:READ-ERROR)))
		      ;; We have a reasonable symbol, so we must be done
		      (RETURN-FROM GET-SYMBOL))
		     ((NOT CHECK)
		      (SETQ SYMBOL READ CHECK :READ))))
	     (WHEN (EQ PKG *INPUT-EDITOR-PACKAGE*)
	       ;; Haven't found a symbol which is already interned, so make one
	       ;; for purposes of printing an error message.  Try not to intern
	       ;; any symbols which weren't already there.
	       (UNLESS CHECK
		 (SETQ SYMBOL (IE-READ-FROM-BUFFER BEGIN END 'MAKE-SYMBOL)
		       CHECK :READ)
		 (SETF (SYMBOL-PACKAGE SYMBOL) PACKAGE))
	       ;; Exit from the LOOP, but stay inside the DO, since we still
	       ;; need to look for candidates
	       (RETURN)))
	(SYS:READ-ERROR))
      (WHEN (= BEGIN 1) (RETURN))
      (DECF BEGIN 2))
    (UNLESS CHECK (IE-BARF))
    (IE-DISPLAY-INFO (IGNORE IGNORE
		      SYMBOL CHECK PRINT-FUNCTION PRINT-ARGS ALLOW-MESSAGE MESSAGE-P)
      (LET ((PACKAGE *INPUT-EDITOR-PACKAGE*))
	(COND ((EQ CHECK :DEFINED)
	       (IF ALLOW-MESSAGE
		   (LEXPR-FUNCALL PRINT-FUNCTION
				  ARGLIST-FINDER SYMBOL MESSAGE-P SELF PRINT-ARGS)
		 (LEXPR-FUNCALL PRINT-FUNCTION
				ARGLIST-FINDER SYMBOL SELF PRINT-ARGS)))
	      (T (FORMAT SELF "Can't find a definition for ~S." SYMBOL)
		 T))))))

(DEFUN-IE IE-RELEVANT-FUNCTION (PRINT-FUNCTION &REST PRINT-ARGS)
  "PRINT-FUNCTION is called with an arglist-finder, the symbol, the stream, and optional print-args"
  (LEXPR-FUNCALL #'IE-RELEVANT-FUNCTION-OR-MESSAGE NIL PRINT-FUNCTION PRINT-ARGS))

(DEFUN-IE IE-FIND-SYMBOL (INCLUDE-PACKAGE-PREFIX? BARF?)
  (LET* ((*SYNTAX-TABLE* 'ZWEI:*ATOM-WORD-SYNTAX-TABLE*)
	 (BEGIN (IE-SEARCH-BACKWARD-ALPHABETIC (IEB-TYPEIN-POINTER) BARF?)))
    (WHEN BEGIN
      (SETQ BEGIN (1+ (IE-SEARCH-BACKWARD-NON-ALPHABETIC BEGIN)))
      (UNLESS INCLUDE-PACKAGE-PREFIX?
	(LET ((PACKAGE-INDEX (IE-SEARCH-FORWARD (LAMBDA (C) (CHAR-EQUAL C #/:)) BEGIN :NIL)))
	  (IF PACKAGE-INDEX (SETQ BEGIN (1+ PACKAGE-INDEX)))))
      (VALUES BEGIN (IE-SEARCH-FORWARD-NON-ALPHABETIC BEGIN)))))

(DEFUN-IE IE-FIND-COMPOUND-DEFINITION (ALIST DELIMITERS)
  (LET* ((*SYNTAX-TABLE* 'ZWEI:*ATOM-WORD-SYNTAX-TABLE*)
	 (BEGIN (IE-REVERSE-SEARCH-CHAR #/( (IEB-TYPEIN-POINTER)))
	 (END (AND BEGIN (OR (IE-SEARCH-CHAR #/) (1+ BEGIN))
			     (IEB-FILL-POINTER))))
	 (STRING (AND BEGIN (NSUBSTRING INPUT-EDITOR-BUFFER BEGIN END))))
    (WHEN (AND BEGIN
	       (MULTIPLE-VALUE-BIND (NIL POSSIBILITIES)
		   (COMPLETE-STRING STRING ALIST DELIMITERS)
		 POSSIBILITIES))
      (VALUES STRING BEGIN END))))

;; Try to find a symbol in three different ways.  This function should really be named
;; IE-RELEVANT-SYMBOL.
;;
;; 1. If the symbol is typed with a package prefix and there is no whitespace between the
;; colon and the first character of the symbol, then use the specified package.
;;
;; 2. Look in the package which was the value of PACKAGE at the time the input editor was
;; entered.  If no package prefixes were typed in the current input, then this is the same as
;; the current value of package.  This value of package must be saved since the reader may
;; have bound PACKAGE, but the cursor may be over someplace which is not inside that scope.
;; For example, if the value of PACKAGE is User and the user types "(x tv: " and then moves
;; the cursor over the X, we want to look in the User package, not in the TV package.
;;
;; 3. Look in the package which is currently the value of PACKAGE.  Use MAKE-SYMBOL
;; rather than INTERN so that symbols aren't spuriously added to the current package.
;; [Requested by KMP]
;;
;; Note: The new :RESCAN input editor option could do a better job than this algorithm, since
;; it would correspond precisely to the reader state.  That option was added after
;; *INPUT-EDITOR-PACKAGE* was invented.

(DEFUN-IE IE-RELEVANT-VARIABLE (PRINT-FUNCTION &REST PRINT-ARGS)
  (MULTIPLE-VALUE-BIND (BEGIN END)
      (IE-FIND-SYMBOL T T)
    (LET ((SYMBOL
	    (CONDITION-CASE ()
		(LET ((PACKAGE *INPUT-EDITOR-PACKAGE*))
		  (IE-READ-FROM-BUFFER BEGIN END 'INTERN-SOFT))
	      (SYS:READ-ERROR (IE-BARF)))))
      (COND ((NOT (SYMBOLP SYMBOL))
	     (IE-BARF))
	    ((NULL SYMBOL)
	     (SETQ SYMBOL (IE-READ-FROM-BUFFER BEGIN END 'MAKE-SYMBOL))
	     (SETF (SYMBOL-PACKAGE SYMBOL) PACKAGE)))
      (IE-DISPLAY-INFO (IGNORE IGNORE SYMBOL PRINT-FUNCTION PRINT-ARGS)
	(LEXPR-FUNCALL PRINT-FUNCTION SYMBOL SELF PRINT-ARGS)))))

(DEFINE-IE-COMMAND DESCRIBE-ARGUMENTS (#\CONTROL-SHIFT-A)
  (IE-RELEVANT-FUNCTION-OR-MESSAGE T
    #'(LAMBDA (ARGLIST-FINDER SYMBOL MESSAGE-P STREAM)
	(ZWEI:PRINT-ARGLIST (IF MESSAGE-P (FLAVOR:FIND-GENERIC-FUNCTION SYMBOL) SYMBOL)
			    STREAM
			    ARGLIST-FINDER)
	T)))

(DEFINE-IE-COMMAND DESCRIBE-VARIABLE (#\CONTROL-SHIFT-V)
  (IE-RELEVANT-VARIABLE
    #'(LAMBDA (SYMBOL ZWEI:*TYPEIN-WINDOW*)
	(LET ((ZWEI:*TYPEOUT-WINDOW* ZWEI:*TYPEIN-WINDOW*))
	  (COND ((NOT (ZWEI:DESCRIBE-VARIABLE-INTERNAL SYMBOL :SHOW-LONG T))
		 (LET ((PACKAGE *INPUT-EDITOR-PACKAGE*))
		   (ZWEI:TYPEIN-LINE "~S is not a declared variable." SYMBOL))
		 (WHEN ZWEI:*ENABLE-PACKAGE-DWIM*
		   (MAPC #'(LAMBDA (V) (ZWEI:DESCRIBE-VARIABLE-INTERNAL V :SHOW-LONG T))
			 (ZWEI:PACKAGE-LOOKALIKE-SYMBOLS
			   SYMBOL SI:PKG-GLOBAL-PACKAGE
			   ZWEI:*PROPERTIES-THAT-MAKE-VARIABLES-INTERESTING*))))))
	T)))

(DEFINE-IE-COMMAND DOCUMENT-SYMBOL (#\CONTROL-SHIFT-D)
  (IE-RELEVANT-VARIABLE
    #'(LAMBDA (SYMBOL STANDARD-OUTPUT)
	(COM-SHOW-DEFINITION-DOCUMENTATION SYMBOL NIL)
	NIL)))

(DEFINE-IE-COMMAND DESCRIBE-SYMBOL ()
  (IE-RELEVANT-VARIABLE
    #'(LAMBDA (SYMBOL STREAM)
	(LET ((STANDARD-OUTPUT STREAM))
	  (SI:DESCRIBE-SYMBOL SYMBOL))
	NIL)))

(DEFINE-IE-COMMAND DISASSEMBLE-FUNCTION ()
  (IE-RELEVANT-FUNCTION
    #'(LAMBDA (IGNORE SYMBOL STREAM)
	(LET ((STANDARD-OUTPUT STREAM))
	  (COND ((NOT (FBOUNDP SYMBOL))
		 (FORMAT T "~A is not defined." SYMBOL)
		 T)
		((TYPEP (FSYMEVAL SYMBOL) :COMPILED-FUNCTION)
		 (DISASSEMBLE SYMBOL)
		 (VALUES NIL :NONE))
		(T (CL:PPRINT (FSYMEVAL SYMBOL))))))))

;;; Completion

;; I think this is too slow and causes too much paging.
(DEFVAR *COMPLETE-COMPOUND-DEFINITIONS* NIL)

(DEFUN-IE IE-LISP-STRING-TO-COMPLETE (ALIST DELIMITERS)
  (LET (STRING BEGIN END)
    (COND ((AND *COMPLETE-COMPOUND-DEFINITIONS*
		(MULTIPLE-VALUE (STRING BEGIN END)
		  (IE-FIND-COMPOUND-DEFINITION ALIST DELIMITERS)))
	   (VALUES STRING BEGIN END))
	  (T (MULTIPLE-VALUE (BEGIN END) (IE-FIND-SYMBOL NIL NIL))
	     (IF BEGIN
		 (VALUES (NSUBSTRING INPUT-EDITOR-BUFFER BEGIN END)
			 BEGIN
			 END)
		 "")))))

(DEFUN-IE IE-DISPLAY-COMPLETIONS (STRING ALIST DELIMITERS)
  ;; Hack for making c-? in an empty buffer respond more quickly.
  (LET ((*DISPLAY-COMPLETIONS-THRESHOLD* *DISPLAY-COMPLETIONS-THRESHOLD*)
	(LENGTH))
    (WHEN (OR (NOT (EQUAL STRING ""))
	      (NOT *DISPLAY-COMPLETIONS-THRESHOLD*)
	      (< (SETQ LENGTH (FIND-COMPLETION-ALIST-SIZE ALIST))
		 *DISPLAY-COMPLETIONS-THRESHOLD*)
	      (PROG1
		(FQUERY NIL
			"There are ~D possibilities, do you really want to see them all? "
			LENGTH)
		(SETQ *DISPLAY-COMPLETIONS-THRESHOLD* NIL)))
      (MULTIPLE-VALUE-BIND (NIL POSSIBILITIES)
	  (COMPLETE-STRING STRING ALIST DELIMITERS)
	(IF (NULL POSSIBILITIES)
	    (SEND SELF :BEEP)
	    (WITH-IE-HELP-STREAM (HELP-STREAM)
	      (IF (EQ HELP-STREAM SELF)
		  (IE-DISPLAY-INFO (NIL NIL ALIST POSSIBILITIES)
		    (DISPLAY-COMPLETIONS SELF POSSIBILITIES 'ZWEI:COMPLETION NIL
					 (OR (SYMBOLP ALIST) (ARRAYP ALIST))))
		  (DISPLAY-COMPLETIONS help-stream POSSIBILITIES 'ZWEI:COMPLETION NIL
				       (OR (SYMBOLP ALIST) (ARRAYP ALIST))))))))))

;; Used by READ-COMPLETE-STRING.  The entire input buffer, after having whitespace trimmed off
;; the left, is the string to be completed.  If INDEX is NIL, then the buffer is either empty
;; or contains only whitespace.

(DEFINE-IE-COMMAND DISPLAY-COMPLETIONS () :ARGLIST (ALIST DELIMITERS)
  (LET ((INDEX (STRING-SEARCH-NOT-SET *WHITESPACE* INPUT-EDITOR-BUFFER)))
    (IF (NULL INDEX)
	(IE-DISPLAY-COMPLETIONS "" ALIST DELIMITERS)
	(WITH-STACK-ARRAY (LEFT-TRIMMED-STRING (- (IEB-FILL-POINTER) INDEX)
					       :TYPE ART-FAT-STRING
					       :DISPLACED-TO INPUT-EDITOR-BUFFER
					       :DISPLACED-INDEX-OFFSET INDEX)
	  (IE-DISPLAY-COMPLETIONS LEFT-TRIMMED-STRING ALIST DELIMITERS)))))

(DEFINE-IE-COMMAND MOUSE-COMPLETE () :ARGLIST (STRING)
  (IE-DELETE-STRING 0 NIL NIL)
  (IE-INSERT-STRING STRING 0))

;; Used by READ-EXPRESSION

(DEFINE-IE-COMMAND LISP-COMPLETE () :ARGLIST (ALIST DELIMITERS)
  (MULTIPLE-VALUE-BIND (STRING BEGIN END)
      (IE-LISP-STRING-TO-COMPLETE ALIST DELIMITERS)
    (MULTIPLE-VALUE-BIND (COMPLETE-STRING NIL COMPLETED-P)
	(COMPLETE-STRING STRING ALIST DELIMITERS)
      (COND (COMPLETED-P
	     (LET ((TYPEIN-POINTER (IEB-TYPEIN-POINTER)))
	       (IE-DELETE-STRING BEGIN END NIL)
	       (IE-INSERT-STRING COMPLETE-STRING 0)
	       (WHEN (> TYPEIN-POINTER END)
		 (IE-SET-POSITION (+ (IEB-TYPEIN-POINTER)
				     (- TYPEIN-POINTER END))))))
	    (T (IE-BARF))))))

(DEFINE-IE-COMMAND LISP-DISPLAY-COMPLETIONS () :ARGLIST (ALIST DELIMITERS)
  (IE-DISPLAY-COMPLETIONS (IE-LISP-STRING-TO-COMPLETE ALIST DELIMITERS) ALIST DELIMITERS))

(DEFINE-IE-COMMAND LISP-MOUSE-COMPLETE () :ARGLIST (MOUSE-STRING ALIST DELIMITERS)
  (MULTIPLE-VALUE-BIND (STRING BEGIN END)
      (IE-LISP-STRING-TO-COMPLETE ALIST DELIMITERS)
    (WHEN BEGIN
      (MULTIPLE-VALUE-BIND (NIL POSSIBILITIES)
	  (COMPLETE-STRING STRING ALIST DELIMITERS)
	(WHEN (AND (ASSQ MOUSE-STRING POSSIBILITIES)
		   (NOT (STRING-EQUAL STRING MOUSE-STRING)))
	  (IE-DELETE-STRING BEGIN END NIL))))
    (IE-INSERT-STRING MOUSE-STRING 0)))
