;;; -*- Mode:LISP; Package:ZWEI; Base:8 -*-
;;; Zwei commands, see ZWEI;COMA for comments
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Some random file showing commands

(DEFCOM COM-SHOW-DIRECTORY "Lists files in a directory." ()
  (LET ((PATHNAME (READ-DIRECTORY-NAME "Show directory" (DEFAULT-PATHNAME) :ALL-BUT-VERSION)))
    (VIEW-DIRECTORY PATHNAME)))

(DEFCOM COM-SHOW-LOGIN-DIRECTORY "Lists files in the user's home directory." ()
  (VIEW-DIRECTORY (FUNCALL (FS:USER-HOMEDIR) ':NEW-PATHNAME ':NAME ':WILD
							    ':TYPE ':WILD
							    ':VERSION ':WILD)))

;;; Show Mail is now defined in Zmail, in SYS:ZMAIL;COMMANDS

;;; Various Quantities.

(DEFVAR *QUANTITY-MODE-NAME*)

(DEFCOM COM-VARIOUS-QUANTITIES DOCUMENT-VARIOUS-QUANTITIES ()
  (SELECT-WINDOW *WINDOW*)
  (PROG KLUDGE (CH MODE-NAME MODE QUANTITY)
    READ-FIRST-CHAR
      (SETQ CH (READ-ARGUMENT-CHARACTER-WITH-POSSIBLE-PROMPT
		   "~:[~*~;~D ~]~:C: " *NUMERIC-ARG-P* *NUMERIC-ARG* *LAST-COMMAND-CHAR*))
      (COND ((AND (NOT (WHEN (ZMACS-BUFFER-P *INTERVAL*) (SEND *INTERVAL* :READ-ONLY)))
		  (OR (NEQ (COMMAND-LOOKUP CH *COMTAB*) 'COM-STANDARD)
		      (NOT (ZEROP (CHAR-BITS CH)))
		      (CHAR< (SETQ CH (CHAR-UPCASE CH)) #/=)
		      (CHAR> CH #/Z)))
	     ;; Supposed to insert a character (punctuation, control, or octal code)
	     (COND ((DIGIT-CHAR-P CH 8)
		    (FUNCALL *TYPEIN-WINDOW* :TYO CH)
		    (SETQ CH (DIGIT-CHAR-P CH 8))
		    (DO ((I 2 (1- I))
			 (CH1))
			(( I 0))
		      (SETQ CH1 (TYPEIN-LINE-ACTIVATE (FUNCALL STANDARD-INPUT :TYI)))
		      (COND ((DIGIT-CHAR-P CH1 8)
			     (FUNCALL *TYPEIN-WINDOW* :TYO CH1)
			     (SETQ CH (+ (* CH 8) (DIGIT-CHAR-P CH1 8))))
			    (T (OR (CHAR-EQUAL CH1 #\SP)
				   (FUNCALL STANDARD-INPUT :UNTYI CH1))
			       (RETURN NIL))))
		    (SETQ CH (CODE-CHAR CH))))
	     ;; Insert control characters as if this was an Ascii file, for other systems
	     (LET ((*LAST-COMMAND-CHAR* (IF (NOT (ZEROP (CHAR-BITS CH)))
					    (CODE-CHAR (LOGAND 37 (CHAR-CODE CH)))
					    CH)))
	       (SEND *TYPEIN-WINDOW* :MAKE-COMPLETE)
	       (RETURN-FROM KLUDGE (COM-SELF-INSERT))))
	    (T
	     (PROG ()
	       (SETQ CH (CHAR-UPCASE CH))	;Be sure that dispatch will work properly...
	       (SELECTQ CH
		 (#/?
		  (FORMAT *TYPEOUT-WINDOW* "~&~3T")
		  (SI:WITH-INDENTATION (*TYPEOUT-WINDOW* 3)
		    (FORMAT
		      *TYPEOUT-WINDOW*
		      "Type strange character to be inserted, or octal escape, or~@
		       F forward, B backward, D delete, R rubout, T twiddle, Z reverse,~@
		       @ mark region, U uppercase, L lowercase, S save, C copy, = count."))
		  (FORMAT *TYPEOUT-WINDOW* "~2%")
		  (SEND *TYPEOUT-WINDOW* :MAKE-COMPLETE)
		  (RETURN))			;Will loop back to top of PROG KLUDGE
		 (#/F
		  (SETQ MODE-NAME "Forward"
			MODE 'COM-QUANTITY-FORWARD))
		 (#/B
		  (SETQ MODE-NAME "Backward"
			MODE 'COM-QUANTITY-BACKWARD))
		 (#/D
		  (SETQ MODE-NAME "Delete"
			MODE 'COM-QUANTITY-DELETE))
		 (#/R
		  (SETQ MODE-NAME "Rubout"
			MODE 'COM-QUANTITY-RUBOUT))
		 (#/T
		  (SETQ MODE-NAME "Twiddle"
			MODE 'COM-QUANTITY-TWIDDLE))
		 (#/@
		  (SETQ MODE-NAME "Mark"
			MODE 'COM-QUANTITY-MARK))
		 (#/U
		  (SETQ MODE-NAME "Uppercase"
			MODE 'COM-QUANTITY-UPPERCASE))
		 (#/L
		  (SETQ MODE-NAME "Lowercase"
			MODE 'COM-QUANTITY-LOWERCASE))
		 (#/S
		  (SETQ MODE-NAME "Save"
			MODE 'COM-QUANTITY-SAVE))
		 (#/C
		  (SETQ MODE-NAME "Copy"
			MODE 'COM-QUANTITY-COPY))
		 (#/Z
		  (SETQ MODE-NAME "Reverse"
			MODE 'COM-QUANTITY-REVERSE))
		 (#/=
		  (SETQ MODE-NAME "Count"
			MODE 'COM-QUANTITY-COUNT))
		 (OTHERWISE
		  (BARF "Invalid quantity operation /"~:C/"" CH)))
	       (TYPEIN-LINE "")
	    GET-A-QUANTITY
	       (TYPEIN-LINE "~A~:[~*~; ~R~] "
			    MODE-NAME *NUMERIC-ARG-P* *NUMERIC-ARG*)
	       (SETQ CH (CHAR-UPCASE (TYPEIN-LINE-ACTIVATE
				       (FUNCALL STANDARD-INPUT :TYI))))
	       (SELECTQ CH
		 ((#/? #\HELP)
		  (FORMAT *TYPEOUT-WINDOW* "~&~3T")
		  (SI:WITH-INDENTATION (*TYPEOUT-WINDOW* 3)
		    (FORMAT
		      *TYPEOUT-WINDOW*
		      "Type quantity name: C character, W word, S sentence, P paragraph,~@
		       L line, A atom, - S-expression, ( or ) list, D defun,~@
		       ~C page, H whole buffer" #\PAGE))
		  (FORMAT *TYPEOUT-WINDOW* "~2%")
		  (SEND *TYPEOUT-WINDOW* :MAKE-COMPLETE)
		  (GO GET-A-QUANTITY))
		 (#/C
		  (SETQ MODE-NAME "Character"
			QUANTITY 'FORWARD-CHAR))
		 (#/W
		  (SETQ MODE-NAME "Word"
			QUANTITY 'FORWARD-WORD))
		 (#/A
		  (SETQ MODE-NAME "Atom"
			QUANTITY 'FORWARD-ATOM))
		 (#/S
		  (SETQ MODE-NAME "Sentence"
			QUANTITY 'FORWARD-SENTENCE))
		 (#/P
		  (SETQ MODE-NAME "Paragraph"
			QUANTITY 'FORWARD-PARAGRAPH))
		 (#/L
		  (SETQ MODE-NAME "Line"
			QUANTITY 'FORWARD-LINE))
		 (#/-
		  (SETQ MODE-NAME "S-Expression"
			QUANTITY 'FORWARD-SEXP))
		 ((#/( #/))
		  (SETQ MODE-NAME "List"
			QUANTITY 'FORWARD-LIST))
		 (#/D
		  (SETQ MODE-NAME "Defun"
			QUANTITY 'FORWARD-DEFINITION))
		 ((#\PAGE #\c-L)
		  (SETQ MODE-NAME "Page"
			QUANTITY 'FORWARD-PAGE))
		 (#/H
		  (SETQ MODE-NAME "Buffer"
			QUANTITY 'FORWARD-INTERVAL))
		 (OTHERWISE
		  (BARF "Invalid quantity type /"~:C/"" CH)))
	       (TYPEIN-LINE-MORE "~A~P" MODE-NAME *NUMERIC-ARG*)
	       (LET ((*QUANTITY-MODE* QUANTITY)
		     (*QUANTITY-MODE-NAME* MODE-NAME))
		 (RETURN-FROM KLUDGE (FUNCALL MODE))))))
      (GO READ-FIRST-CHAR)))

(DEFUN DOCUMENT-VARIOUS-QUANTITIES (COMMAND CHAR OP)
  (SELECTQ OP
    (:FULL (FORMAT T "~&~
Next character is inserted, unless it is a letter, digit, @, or ?; those are commands.

If a ? follows, documentation is printed then a character is read again.
If a letter or @ follows, it is a Various Quantities command (see below).
If a digit follows, an octal number is read and that character code is inserted.
If a control character follows, the character with the same code as that Ascii
control character is inserted, for files that are used with other computers.
Anything else is inserted in the buffer; thus editor command characters can be Quoted.
A numeric argument is used as a repeat count.

Various Quantities commands are two characters: an operation and a quantity type.

Operations:
  F forward, B backward, D delete, R rubout, T twiddle, Z reverse,
  @ mark region, U uppercase, L lowercase, S save, C copy, = count.

Quantity types:
  C character, W word, S sentence, P paragraph, L line, A atom, - S-expression,
  ( or ) list, D defun, ~C page, H whole buffer.~%" #\PAGE))
    (:SHORT (FORMAT T "Insert following special character or operate on a quantity"))
    (:NAME (GET COMMAND 'COMMAND-NAME))
    (OTHERWISE (FERROR "Unknown operation ~A; ~S ~S" OP COMMAND CHAR))))

(DEFCOM COM-QUANTITY-FORWARD "Moves forward according to the current quantity mode." (KM)
  (MOVE-POINT (OR (FUNCALL *QUANTITY-MODE* (POINT) *NUMERIC-ARG*) (BARF)))
  DIS-BPS)

(DEFCOM COM-QUANTITY-BACKWARD "Moves backward according to the current quantity mode." (KM)
  (MOVE-POINT (OR (FUNCALL *QUANTITY-MODE* (POINT) (- *NUMERIC-ARG*)) (BARF)))
  DIS-BPS)

(DEFCOM COM-QUANTITY-DELETE "Kills forward according to the current quantity mode." ()
  (SETQ *CURRENT-COMMAND-TYPE* 'KILL)
  (WITH-NODE-WRITE-LOCKED ((BP-NODE-TO-LOCK (POINT)))
    (KILL-INTERVAL (POINT)
		   (OR (FUNCALL *QUANTITY-MODE* (POINT) *NUMERIC-ARG*)
		       (BARF))
		   NIL
		   T))
  DIS-TEXT)

(DEFCOM COM-QUANTITY-RUBOUT "Kills backward according to the current quantity mode." ()
  (SETQ *CURRENT-COMMAND-TYPE* 'KILL)
  (WITH-NODE-WRITE-LOCKED ((BP-NODE-TO-LOCK (POINT)))
    (KILL-INTERVAL (POINT)
		   (OR (FUNCALL *QUANTITY-MODE* (POINT) (- *NUMERIC-ARG*))
		       (BARF))
		   NIL
		   NIL))
  DIS-TEXT)

(DEFCOM COM-QUANTITY-TWIDDLE "Exchanges things according to the current quantity mode." ()
  (EXCHANGE-SUBR *QUANTITY-MODE* *NUMERIC-ARG*)
  DIS-TEXT)

(DEFCOM COM-QUANTITY-REVERSE "Reverses things according to the current quantity mode." ()
  (REVERSE-SUBR *QUANTITY-MODE* *NUMERIC-ARG*)
  DIS-TEXT)

(DEFCOM COM-QUANTITY-MARK "Marks according to the current quantity mode." (SM)
  (LET (BP1 BP2)
    (OR (SETQ BP1 (FUNCALL *QUANTITY-MODE* (POINT) *NUMERIC-ARG*))
	(BARF))
    (OR (SETQ BP2 (FUNCALL *QUANTITY-MODE* BP1 (MINUS *NUMERIC-ARG*)))
	(BARF))
    (AND (MINUSP *NUMERIC-ARG*)
	 (SETQ BP2 (PROG1 BP1 (SETQ BP1 BP2))))
    (MOVE-POINT BP1)
    (MOVE-MARK BP2))
  DIS-BPS)

(DEFCOM COM-QUANTITY-UPPERCASE "Uppercases according to the current quantity mode." ()
  (LET ((BP1 (OR (FUNCALL *QUANTITY-MODE* (POINT) *NUMERIC-ARG*) (BARF))))
    (LET ((BP2 (OR (FUNCALL *QUANTITY-MODE* BP1 (- *NUMERIC-ARG*)) (BARF))))
      (UPCASE-INTERVAL BP1 BP2)
      (AND (PLUSP *NUMERIC-ARG*) (MOVE-POINT BP1))))
  DIS-TEXT)

(DEFCOM COM-QUANTITY-LOWERCASE "Lowercases according to the current quantity mode." ()
  (LET ((BP1 (OR (FUNCALL *QUANTITY-MODE* (POINT) *NUMERIC-ARG*) (BARF))))
    (LET ((BP2 (OR (FUNCALL *QUANTITY-MODE* BP1 (- *NUMERIC-ARG*)) (BARF))))
      (DOWNCASE-INTERVAL BP1 BP2)
      (AND (PLUSP *NUMERIC-ARG*) (MOVE-POINT BP1))))
  DIS-TEXT)

(DEFCOM COM-QUANTITY-SAVE "Saves on kill ring according to the current quantity mode." ()
  (LET ((BP1 (OR (FUNCALL *QUANTITY-MODE* (POINT) *NUMERIC-ARG*) (BARF))))
    (LET ((BP2 (OR (FUNCALL *QUANTITY-MODE* BP1 (- *NUMERIC-ARG*)) (BARF))))
      (WITHOUT-INTERRUPTS
	(SEND *KILL-HISTORY* ':PUSH (COPY-INTERVAL BP1 BP2))
	(SETQ *KILL-HISTORY-USER* *CURRENT-COMMAND-LOOP*))
      (MOVE-POINT BP1)))
  DIS-TEXT)

(DEFCOM COM-QUANTITY-COPY "Inserts a copy according to the current quantity mode." ()
  (LET ((BP1 (OR (FUNCALL *QUANTITY-MODE* (POINT) *NUMERIC-ARG*) (BARF))))
    (LET ((BP2 (OR (FUNCALL *QUANTITY-MODE* BP1 (- *NUMERIC-ARG*)) (BARF))))
      (MOVE-POINT (INSERT-INTERVAL BP2 (COPY-INTERVAL BP1 BP2)))))
  DIS-TEXT)

(COMMENT  ;this seems to be a bad idea
(DEFUN QUANTITY-MODE-SET (QUANTITY MODE-NAME)
  (SETQ *QUANTITY-MODE* QUANTITY)
  (COND ((NULL *QUANTITY-MODE-SAVE*)
	 (SETQ *QUANTITY-MODE-SAVE* (MAKE-ARRAY 5))
	 (ASET (COMMAND-LOOKUP 506 *COMTAB*) *QUANTITY-MODE-SAVE* 0)
	 (ASET (COMMAND-LOOKUP 502 *COMTAB*) *QUANTITY-MODE-SAVE* 1)
	 (ASET (COMMAND-LOOKUP 504 *COMTAB*) *QUANTITY-MODE-SAVE* 2)
	 (ASET (COMMAND-LOOKUP 207 *COMTAB*) *QUANTITY-MODE-SAVE* 3)
	 (ASET (COMMAND-LOOKUP 524 *COMTAB*) *QUANTITY-MODE-SAVE* 4)))
  (COND ((EQ QUANTITY 'FORWARD-CHAR)
	 (SETQ *MODE-QUANTITY-NAME* NIL)
	 (COMMAND-STORE (AREF *QUANTITY-MODE-SAVE* 0) 506 *COMTAB*)
	 (COMMAND-STORE (AREF *QUANTITY-MODE-SAVE* 1) 502 *COMTAB*)
	 (COMMAND-STORE (AREF *QUANTITY-MODE-SAVE* 2) 504 *COMTAB*)
	 (COMMAND-STORE (AREF *QUANTITY-MODE-SAVE* 3) 207 *COMTAB*)
	 (COMMAND-STORE (AREF *QUANTITY-MODE-SAVE* 4) 524 *COMTAB*))
	(T
	 (SETQ *MODE-QUANTITY-NAME* MODE-NAME)
	 (COMMAND-STORE 'COM-QUANTITY-FORWARD 506 *COMTAB*)
	 (COMMAND-STORE 'COM-QUANTITY-BACKWARD 502 *COMTAB*)
	 (COMMAND-STORE 'COM-QUANTITY-DELETE 504 *COMTAB*)
	 (COMMAND-STORE 'COM-QUANTITY-RUBOUT 207 *COMTAB*)
	 (COMMAND-STORE 'COM-QUANTITY-TWIDDLE 524 *COMTAB*))))
);end comment

(DEFCOM COM-PREVIOUS-PAGE "Moves to the previous page" (KM)
  (MOVE-POINT (FORWARD-PAGE (POINT) (MINUS *NUMERIC-ARG*) T))
  DIS-BPS)

(DEFCOM COM-NEXT-PAGE "Moves to the next page" (KM)
  (MOVE-POINT (FORWARD-PAGE (POINT) *NUMERIC-ARG* T))
  DIS-BPS)

(DEFCOM COM-MARK-WHOLE "Puts mark at beginning of buffer and point end,
or with a numeric argument, vice versa" (SM)
  (COND (*NUMERIC-ARG-P*
	 (MOVE-POINT (INTERVAL-FIRST-BP *INTERVAL*))
	 (MOVE-MARK (INTERVAL-LAST-BP *INTERVAL*)))
	(T
	 (MOVE-POINT (INTERVAL-LAST-BP *INTERVAL*))
	 (MOVE-MARK (INTERVAL-FIRST-BP *INTERVAL*))))
  DIS-BPS)

(DEFCOM COM-MARK-DEFINITION
	"Puts point and mark around the current definition." ()
  (LET ((INT (DEFINITION-INTERVAL (POINT) *NUMERIC-ARG* NIL T T)))	;including previous blank line
    (OR INT (BARF))
    (MARK-DEFINITION-INTERNAL INT))
  DIS-BPS)

(DEFUN MARK-DEFINITION-INTERNAL (INT)
    (SETF (WINDOW-MARK-P *WINDOW*) T)
    (SETQ *MARK-STAYS* T)
    (POINT-PDL-PUSH (POINT) *WINDOW* NIL NIL)
    (MOVE-POINT (INTERVAL-FIRST-BP INT))
    (MOVE-MARK (INTERVAL-LAST-BP INT)))

(DEFCOM COM-REPOSITION-WINDOW "Tries to get all of current defun in the window.
Wins if the beginning of the current defun can be at the top of the window with
the current position still visible." (KM)
  (LET* ((POINT (POINT))
	 (SHEET (WINDOW-SHEET *WINDOW*))
	 (HEIGHT (TV:SHEET-INSIDE-HEIGHT SHEET))
	 (INT (DEFINITION-INTERVAL (POINT) 1 T T))
	 START-BP END-BP TOP-BP)
    (COND ((NOT (NULL INT))
	   (SETQ START-BP (INTERVAL-FIRST-BP INT)
		 END-BP (INTERVAL-LAST-BP INT))
	   ;; Don't include the blank line after the defun
	   (AND (ZEROP (BP-INDEX END-BP)) (SETQ END-BP (END-LINE END-BP -1 T)))
	   (COND ((AND (PLINE-OF-POINT T *WINDOW* START-BP) ;If start of defun on the screen
		       (NULL (PLINE-OF-POINT T *WINDOW* END-BP))	;and not bottom
		       (MULTIPLE-VALUE-BIND (LINE INDEX)
			   (PUT-POINT-AT-PLINE SHEET (BP-LINE END-BP) (BP-INDEX END-BP)
					       (- HEIGHT
						  (POINT-LINE-HEIGHT SHEET END-BP))
					       (INTERVAL-FIRST-BP *INTERVAL*)
					       (INTERVAL-LAST-BP *INTERVAL*)
					       :PIXEL)
			 (SETQ TOP-BP (CREATE-BP LINE INDEX))
			 ;; And can fit bottom of the defun on as well
			 (NOT (BP-< START-BP TOP-BP)))))
		 ((BP-< START-BP (SETQ TOP-BP (MULTIPLE-VALUE-BIND (LINE INDEX)
						  (PUT-POINT-AT-PLINE SHEET (BP-LINE POINT)
						     (BP-INDEX POINT) HEIGHT
						     (INTERVAL-FIRST-BP *INTERVAL*)
						     (INTERVAL-LAST-BP *INTERVAL*)
						     :PIXEL)
						(CREATE-BP LINE INDEX))))
		  ;; If displaying from the start of the defun would push point off
		  ;; the bottom, complain, and bring in as much as possible anyway.
		  (BEEP))
		 (T
		  (AND (BP-= (WINDOW-START-BP *WINDOW*) START-BP)
		       (SETQ START-BP (INTERVAL-FIRST-BP (DEFINITION-INTERVAL (POINT) 1 T NIL))))
		  (SETQ TOP-BP START-BP)))
	   (RECENTER-WINDOW *WINDOW* ':START TOP-BP))
	  (T (BARF "no defun here")))
    DIS-NONE))

(DEFCOM COM-UPCASE-DIGIT "Up-shifts the previous digit on this or the previous line." ()
  (LET ((BP (COPY-BP (POINT))))
    (RCHARMAP (BP (BEG-LINE (POINT) -1 T) NIL)
      (COND ((MEM #'CHAR-EQUAL (RCHARMAP-CHAR) '(#/0 #/1 #/2 #/3 #/4 #/5 #/6 #/7 #/8 #/9))
	     (RCHARMAP-SET-CHAR (LET ((CHAR (RCHARMAP-CHAR)))
				  (SETF (CHAR-CODE CHAR) (SHIFT-CHARACTER (CHAR-CODE CHAR)))
				  CHAR))
	     (RCHARMAP-RETURN NIL)))))
  DIS-TEXT)

(DEFUN SHIFT-CHARACTER (CHAR)
  (DOTIMES (I 200)
    (AND (= CHAR (AREF SI:KBD-NEW-TABLE 0 I))
	 (RETURN (AREF SI:KBD-NEW-TABLE 1 I)))))

(DEFUN MAKE-RECORDING-STREAM (STREAM LENGTH &AUX ARRAY UNRCHF OPS)
  (DECLARE (SPECIAL STREAM ARRAY UNRCHF OPS))
  (SETQ ARRAY (MAKE-ARRAY LENGTH ':LEADER-LIST (LIST LENGTH 0)))
  (SETQ OPS (COPYLIST (FUNCALL STREAM ':WHICH-OPERATIONS)))
  (MAPC (FUNCTION (LAMBDA (X) (SETQ OPS (DELQ X OPS))))
	'(:TYI :UNTYI :PLAYBACK :RECORD		; Operations I want.
	       :LINE-IN))			; Operations for default handler.
  (SETQ OPS `(:TYI :UNTYI :PLAYBACK :RECORD :SET-STREAM . ,OPS))
  (CLOSURE '(STREAM ARRAY UNRCHF OPS)
	   'RECORDING-STREAM))

(LOCAL-DECLARE ((SPECIAL STREAM ARRAY UNRCHF OPS))
(DEFSELECT (RECORDING-STREAM RECORDING-STREAM-DEFAULT-HANDLER T)
  ((:TYI :ANY-TYI :TYI-NO-HANG :ANY-TYI-NO-HANG) ()
   (COND (UNRCHF
	  (PROG1 UNRCHF (SETQ UNRCHF NIL)))
	 (T (MULTIPLE-VALUE-BIND (CHAR TEM)
		(FUNCALL STREAM SI:**DEFSELECT-OP**)
	      (RECORDING-STREAM ':RECORD CHAR)
	      (VALUES CHAR TEM)))))
  (:LISTEN ()
   (IF UNRCHF T (FUNCALL STREAM ':LISTEN)))
  (:INPUT-WAIT (&REST ARGUMENTS)
   (IF UNRCHF T (LEXPR-SEND STREAM :INPUT-WAIT ARGUMENTS)))
  (:WHICH-OPERATIONS ()
   OPS)
  (:UNTYI (CH)
   (IF (OR RUBOUT-HANDLER (LISTP CH))		;See comment on MACRO-STREAM-IO :UNTYI
       (SEND STREAM :UNTYI CH)
       (SETQ UNRCHF CH)))
  (:RECORD (CH)
  (WHEN (LISTP CH)
     (SELECTQ (CAR CH)
       (:MOUSE-BUTTON (SETQ CH (SECOND CH)))
       (:MOUSE (SETQ CH (THIRD CH)))))
   (WHEN (OR (CHARACTERP CH) (MOUSE-CHAR-P CH))
     (LET ((PTR (ARRAY-LEADER ARRAY 1)))
       (SETQ PTR (\ (1+ PTR) (ARRAY-LEADER ARRAY 0)))
       (STORE-ARRAY-LEADER PTR ARRAY 1)
       (ASET CH ARRAY PTR)))
   (SEND-IF-HANDLES STREAM :RECORD CH))
  (:PLAYBACK ()
   ARRAY)
  (:SET-STREAM (NEW-STREAM)
   (SETQ STREAM NEW-STREAM)))
)

(DEFUN RECORDING-STREAM-DEFAULT-HANDLER (OP &REST REST)
  (DECLARE (SPECIAL STREAM ARRAY UNRCHF OPS))
  (IF (MEMQ OP OPS)
      (LEXPR-FUNCALL STREAM OP REST)
      (STREAM-DEFAULT-HANDLER 'RECORDING-STREAM OP (CAR REST) (CDR REST))))

(DEFCOM COM-LAST-COMMANDS "Describes the last 60 keys pressed.
Prints out descriptions of the last sixty characters typed on the keyboard." (KM)
  (COND ((NOT (MEMQ ':PLAYBACK (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS)))
	 (BARF "Your input was not being recorded; sorry."))
	(T (LET ((A (FUNCALL STANDARD-INPUT ':PLAYBACK)))
	     (LET ((P (ARRAY-LEADER A 1))
		   (L (ARRAY-LEADER A 0)))
	       (SEND STANDARD-OUTPUT ':FRESH-LINE)
	       (DO ((I (\ (1+ P) L) (\ (1+ I) L))
		    (J 0 (1+ J)))
		   (( J L))
		 (LET ((CH (AREF A I)))
		   (COND ((NOT (NULL CH))
			  (FORMAT T "~<~%~:;~:C ~>" CH)))))
	       (SEND STANDARD-OUTPUT ':FRESH-LINE)))))
  DIS-NONE)

(DEFCOM COM-EXIT-CONTROL-R "Exits from a recursive edit" ()
  (THROW 'EXIT-CONTROL-R NIL))

(DEFCOM COM-QUIT "Return from the top-level edit" ()
  (THROW 'EXIT-TOP-LEVEL NIL))

(DEFCOM COM-ABORT-AT-TOP-LEVEL
"Noop.  Notifies you that you're at top level and therefore can't abort.
Turns off the region if there is one." ()
  (WHEN (NOT (WINDOW-MARK-P *WINDOW*))
    (BARF (IF *MACRO-LEVEL* "Aborting to top level." "Already at top level.")))
  DIS-NONE)

(DEFUN BREAK-WINDOW-TAG (&OPTIONAL (LAST-RESORT "ZWEI") &AUX TAG)
  (WHEN (VARIABLE-BOUNDP *WINDOW*)
    (SETQ TAG (LET* ((WNAME (SEND (WINDOW-SHEET *WINDOW*) :NAME))
		     (N (STRING-SEARCH #\SPACE WNAME)))
		(STRING-UPCASE (SUBSTRING WNAME 0 N)))))
  (UNLESS TAG
    (SETQ TAG (STRING-UPCASE LAST-RESORT)))
  TAG)

(DEFCOM COM-BREAK "Enters a lisp break loop.  If a numeric arg is given, 
the ordinary lisp listener standard values are established." ()
  (LET ((*INSIDE-BREAK* T))
    (UNWIND-PROTECT
	(SI:BREAK-INTERNAL (BREAK-WINDOW-TAG "ZMACS") T)
      (SEND *CURRENT-COMMAND-LOOP* ':EXPOSE-MODE-LINE-WINDOW))
    (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE))
  ;; If the user smashed anything important, make sure it gets set
  ;; back to what the buffer believes it should be.
  (SET-EVALUATION-CONTEXT *INTERVAL*)
  DIS-NONE)

(DEFCOM COM-DEBUGGER-BREAK "Enters the debugger loop. If a numeric arg is given, 
the ordinary lisp listener standard values are established." ()
  (LET ((*INSIDE-BREAK* T))
    (UNWIND-PROTECT
	(INHIBIT-STYLE-WARNINGS (DBG))
      (SEND *CURRENT-COMMAND-LOOP* ':EXPOSE-MODE-LINE-WINDOW))
    (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE))
  (SET-EVALUATION-CONTEXT *INTERVAL*)
  DIS-NONE)


; TAB TO TAB STOP stuff.
;This should really be something hairy with the mouse...
; A "tab stop buffer" has two lines: one to indicate characters to fill
;with, and the second to indicate where the tab stops are.  In the second line
;colons and periods are the only significant characters.  Everything else
;is ignored.  If there is a :, fill with spaces, else with contents of 
;the first line.  I dont think this can work reasonably with variable
;width fonts very well, so the initial version, at least, will assume
;that you are using only one fixed width font.

(DEFCOM COM-TAB-TO-TAB-STOP "Tabs to fixed column as specified by the tab-stop buffer." ()
  (LET* ((POINT (POINT))
	 (GOAL (BP-VIRTUAL-INDENTATION POINT))
	 (L2 (LINE-NEXT (BP-LINE (INTERVAL-FIRST-BP *TAB-STOP-BUFFER*))))
	 (CHAR-POS))
    (MULTIPLE-VALUE (NIL CHAR-POS)
      (FUNCALL (WINDOW-SHEET *WINDOW*) ':STRING-LENGTH L2 0 NIL GOAL))
    (AND CHAR-POS
	 (SETQ GOAL (DO ((I 0 (1+ I))
			 (CP CHAR-POS))
			(( I *NUMERIC-ARG*) CP)
		      (SETQ CP (OR (STRING-SEARCH-SET '(#/: #/.) L2 (1+ CP))
				   (LET ((BP (END-OF-LINE L2)))
				     (INSERT BP "       :")
				     (INSERT (END-LINE BP -1) "        ")
				     (SETQ I (1- I))
				     CP)))))
	 (IF (NOT (CHAR-EQUAL (AREF L2 GOAL) #/:))
	     (INSERT-MOVING POINT (NSUBSTRING (LINE-PREVIOUS L2) CHAR-POS GOAL))
	     (INDENT-AT (MOVE-BP POINT (FORWARD-OVER *BLANKS* POINT))
			(BP-VIRTUAL-INDENTATION (CREATE-BP L2 GOAL))))))
  DIS-TEXT)

(DEFCOM COM-COMPILE-AND-EXIT "Compiles the buffer and return from top-level" ()
  (FUNCALL *TYPEOUT-WINDOW* ':MAKE-COMPLETE)
  (LET ((TICK COMPILER:NEW-COMPILER-WARNINGS-TICK))
    (COM-COMPILE-BUFFER)
    (OR (AND ( TICK COMPILER:NEW-COMPILER-WARNINGS-TICK)	;If any compiler messages
	     (NOT (Y-OR-N-P "Exit anyway? " *TYPEOUT-WINDOW*)))
	(THROW 'EXIT-TOP-LEVEL NIL)))
  DIS-NONE)

(DEFCOM COM-EVALUATE-AND-EXIT "Evaluates the buffer and return from top-level" ()
  (COM-EVALUATE-BUFFER)
  (THROW 'EXIT-TOP-LEVEL NIL))

(DEFCOM COM-GRIND-DEFINITION "Grinds the definition of a function into the buffer.
Reads the name of the function from the mini-buffer and inserts its ground definition
at point." ()
  (GPRINT:GRIND-FUNCTION-DEFINITION (READ-FUNCTION-SPEC "Name of function"
							(RELEVANT-FUNCTION-NAME (POINT)))
				    (OPEN-INTERVAL-STREAM (POINT) (POINT) T))
  DIS-TEXT)

(DEFCOM COM-GRIND-EXPRESSION "Grinds the evaluation of a form into the buffer.
Reads a form from the mini-buffer, evals it and inserts the result, ground, at
point." ()
  (LET ((TEM (EVAL (TYPEIN-LINE-ACCEPT 'SYS:FORM :PROMPT "Lisp form"))))
    (GRIND-INTO-BP (POINT) TEM))
  DIS-TEXT)

(DEFCOM COM-DOWN-INDENTED-LINE "Moves to the next line and past any indentation." (KM R)
  (MULTIPLE-VALUE-PROG1
    (DOWN-REAL-LINE *NUMERIC-ARG*)
    (BACK-TO-INDENTATION)))

(DEFCOM COM-UP-INDENTED-LINE "Moves to previous line and after any indentation." (KM -R)
  (MULTIPLE-VALUE-PROG1
    (DOWN-REAL-LINE (- *NUMERIC-ARG*))
    (BACK-TO-INDENTATION)))



(DEFCOM COM-TEXT-JUSTIFIER-CHANGE-FONT-WORD "Puts the previous word in a different font
(this only works for the text justifier R on the PDP-10).
The font to change to is specified with a numeric argument.
No arg means move last font change forward past next word.
A negative arg means move last font change back one word." ()
  (IF (AND *NUMERIC-ARG-P* (PLUSP *NUMERIC-ARG*))
      (LET ((BP1 (OR (FORWARD-WORD (POINT) -1) (BARF)))	;Positive explicit arg,
	    BP2)
	(SETQ BP2 (FORWARD-WORD BP1 1 T))		;Surround previous word
	(MOVE-POINT (INSERT BP2 "*"))
	(SETQ BP1 (INSERT BP1 #/))
	(INSERT BP1 (DIGIT-CHAR *NUMERIC-ARG*)))		;With indicated font change
     (MULTIPLE-VALUE-BIND (BP1 BP2 TYPE)
	  (FIND-FONT-CHANGE (POINT) (INTERVAL-FIRST-BP *INTERVAL*) T)
	(OR BP1 (BARF))					;Find previous font change
	(DELETE-INTERVAL BP1 BP2 T)			;Flush it
	(LET ((BP3 (FORWARD-WORD BP1 (IF (MINUSP *NUMERIC-ARG*) -1 1) T))	;Where it goes
	      BP4 BP5 NTYPE)
	  (COND ((MINUSP *NUMERIC-ARG*)			;Move from 2nd previous
		 (COND ((BP-= BP3 (INTERVAL-FIRST-BP *INTERVAL*)))
		       (T (SETQ BP3 (FORWARD-WORD (FORWARD-WORD BP3 -1 T) 1 T))
			  (IF (LOOKING-AT-BACKWARD (FORWARD-CHAR BP3 -1) #/)
			      (SETQ BP3 (FORWARD-CHAR BP3 -2)))))
		 (MULTIPLE-VALUE (BP4 BP5 NTYPE)
		   (FIND-FONT-CHANGE BP3 BP1 NIL)))	;If moving over another one
		(T (MULTIPLE-VALUE (BP4 BP5 NTYPE)
		     (FIND-FONT-CHANGE BP1 BP3 NIL))
		   (IF NTYPE (SETQ TYPE NTYPE))))
	  (COND (BP4
		 (WITH-BP (BP3A BP3 ':NORMAL)
		   (DELETE-INTERVAL BP4 BP5 T)	;Flush it
		   (IF (NOT (CHAR-EQUAL (AREF TYPE 1) #/*))
		       (SETQ BP3 (INSERT BP3A TYPE))	;put in one moved unless was *
		     (SETQ BP3 BP4))))		;If punting shift, don't move past begining
		(T (SETQ BP3 (INSERT BP3 TYPE))))
	  (MOVE-POINT BP3))))
  DIS-TEXT)

(DEFCOM COM-TEXT-JUSTIFIER-CHANGE-FONT-REGION "Puts the region in a different font 
(this only works for the text justifier R on the PDP-10).
The font to change to is specified with a numeric argument.
Inserts ^F<n> before and ^F* after.
A negative arg removes font changes in or next to region." ()
  (REGION (BP1 BP2)
    (COND ((NOT (MINUSP *NUMERIC-ARG*))
	   (INSERT BP2 "*")
	   (INSERT-MOVING BP1 #/)
	   (INSERT BP1 (DIGIT-CHAR *NUMERIC-ARG*)))
	  (T
	   (SETQ BP1 (FORWARD-CHAR BP1 -2 T))
	   (COND ((LOOKING-AT BP2 #/)
		  (SETQ BP2 (FORWARD-CHAR BP2 2 T)))
		 ((LOOKING-AT-BACKWARD BP2 #/)
		  (SETQ BP2 (FORWARD-CHAR BP2 1 T))))
	   (DO ((BP3)
		(BP2A (COPY-BP BP2 ':NORMAL)))
	       (NIL)
	     (MULTIPLE-VALUE (BP1 BP3)
	       (FIND-FONT-CHANGE BP1 BP2A NIL))
	     (IF (NULL BP1)
		 (RETURN (FLUSH-BP BP2A)))
	     (DELETE-INTERVAL BP1 BP3 T)))))
  DIS-TEXT)

(DEFUN FIND-FONT-CHANGE (BP LIMIT-BP REVERSE-P &AUX BP1 BP2)
  (COND ((SETQ BP1 (SEARCH BP #/ REVERSE-P NIL NIL LIMIT-BP))
	 (IF (NOT REVERSE-P)
	     (SETQ BP2 (FORWARD-CHAR BP1 1)
		   BP1 (FORWARD-CHAR BP1 -1))
	     (SETQ BP2 (FORWARD-CHAR BP1 2)))
	 (VALUES BP1 BP2 (STRING-INTERVAL BP1 BP2 T)))))

(DEFCOM COM-TEXT-JUSTIFIER-UNDERLINE-WORD " Puts underlines around the previous word
(this only works for the text justifier R on the PDP-10)
If there is an underline begin or end near that word, it is moved forward one word.
An argument specifies the number of words, and the direction: positive means forward.
*TEXT-JUSTIFIER-UNDERLINE-BEGIN* is the character that begins underlines and
*TEXT-JUSTIFIER-UNDERLINE-END* is the character that ends it." ()
  (LET ((LIST (LIST *TEXT-JUSTIFIER-UNDERLINE-BEGIN* *TEXT-JUSTIFIER-UNDERLINE-END*))
	(BP (FORWARD-TO-WORD (POINT) 1 T))
	BP1 TYPE)
    (SETQ BP1 (FORWARD-WORD (FORWARD-WORD BP -2 T)))
    (MULTIPLE-VALUE (BP TYPE)
      (SEARCH-SET BP LIST T NIL BP1))
    (IF (NULL BP)
	(LET ((ARG (IF *NUMERIC-ARG-P* *NUMERIC-ARG* -1)))
	  (SETQ BP1 (POINT))
	  (LET ((BP2 (OR (FORWARD-WORD BP1 ARG) (BARF))))
	    (COND ((MINUSP ARG)
		   (MOVE-BP BP1 (FORWARD-WORD BP2 (- ARG)))
		   (INSERT-MOVING BP1 *TEXT-JUSTIFIER-UNDERLINE-END*)
		   (INSERT BP2 *TEXT-JUSTIFIER-UNDERLINE-BEGIN*))
		  (T
		   (INSERT BP2 *TEXT-JUSTIFIER-UNDERLINE-END*)
		   (INSERT BP1 *TEXT-JUSTIFIER-UNDERLINE-BEGIN*)))))
	(DELETE-INTERVAL BP (FORWARD-CHAR BP) T)
	(SETQ BP1 (IF (MINUSP *NUMERIC-ARG*)
		      (FORWARD-WORD (FORWARD-WORD BP (1- *NUMERIC-ARG*) T))
		      (FORWARD-TO-WORD BP (1+ *NUMERIC-ARG*) T)))
	(MULTIPLE-VALUE-BIND (BP2 NTYPE)
	    (SEARCH-SET BP LIST (MINUSP *NUMERIC-ARG*) NIL BP1 )
	  (OR (COND (BP2
		     (DELETE-INTERVAL BP2 (FORWARD-CHAR BP2 (IF (MINUSP *NUMERIC-ARG*) 1 -1)))
		     ( TYPE NTYPE)))
	      (LET ((BP3 (IF (MINUSP *NUMERIC-ARG*)
			     (FORWARD-WORD (FORWARD-WORD BP (1- *NUMERIC-ARG*)))
			     (FORWARD-WORD BP *NUMERIC-ARG*))))
		(MOVE-POINT (INSERT BP3 TYPE)))))))
  DIS-TEXT)

(DEFCOM COM-TEXT-JUSTIFIER-UNDERLINE-REGION "Puts underlines a la R around the region.
A negative argument removes underlines in or next to region.
*TEXT-JUSTIFIER-UNDERLINE-BEGIN* is the character that begins underlines and
*TEXT-JUSTIFIER-UNDERLINE-END* is the character that ends it." ()
  (REGION (BP1 BP2)
    (LET ((LIST (LIST *TEXT-JUSTIFIER-UNDERLINE-BEGIN* *TEXT-JUSTIFIER-UNDERLINE-END*)))
      (IF (MINUSP *NUMERIC-ARG*)
	  (DO ((BP (FORWARD-WORD (FORWARD-WORD BP1 -1 T)))
	       (LIM-BP (FORWARD-WORD BP2 1 T)))
	      (NIL)
	    (OR (SETQ BP (SEARCH-SET BP LIST NIL NIL LIM-BP))
		(RETURN NIL))
	    (DELETE-INTERVAL (FORWARD-CHAR BP -1) BP T))
	  (INSERT BP2 *TEXT-JUSTIFIER-UNDERLINE-END*)
	  (INSERT BP1 *TEXT-JUSTIFIER-UNDERLINE-BEGIN*))))
  DIS-TEXT)

(DEFCOM COM-COPY-FROM-PREVIOUS-LINE "Copies characters from the last non-blank line.
Argument is the number of characters" ()
  (LET* ((POINT (POINT))
	 (BP (DO ((BP (BEG-LINE POINT -1) (BEG-LINE BP -1))
		  (LIM (BP-LINE (INTERVAL-FIRST-BP *INTERVAL*)))
		  (LINE)
		  (IDX (BP-INDEX POINT)))
		 ((EQ (SETQ LINE (BP-LINE BP)) LIM)
		  (BARF))
	       (AND (NOT (LINE-BLANK-P LINE))
		    (> (LINE-LENGTH LINE) IDX)
		    (RETURN (CREATE-BP LINE IDX))))))
    (INSERT-INTERVAL-MOVING POINT (COPY-INTERVAL BP (FORWARD-CHAR BP *NUMERIC-ARG*)))
    (MOVE-POINT POINT))
  DIS-TEXT)

(DEFCOM COM-EDIT-CP-COMMAND "Reads the source of a CP command into an editor buffer.
With no argument, prompts for any command name, and warns if there is an ambiguity.
With a non-zero numeric argument, prompts first for the name a command table 
and then prompts for a command name from that command table.
With an argument of zero, prompts for a command in the current command table." ()
  (IF *NUMERIC-ARG-P*
      (LET ((COMTAB (IF (ZEROP *NUMERIC-ARG*)
			CP:*COMMAND-TABLE*
			(TYPEIN-LINE-ACCEPT 'CP::COMMAND-TABLE
					    :PROMPT "Edit a definition from CP command table"
					    :DEFAULT CP:*COMMAND-TABLE*))))
	(LET ((COMMAND (TYPEIN-LINE-ACCEPT
			 `((CP:COMMAND-NAME :COMMAND-TABLE ,COMTAB))
			 :PROMPT
			 (FORMAT NIL "Edit definition of CP command in command table ~A"
				 COMTAB))))
	  (EDIT-DEFINITION COMMAND `(CP:DEFINE-COMMAND DEFUN) T)))
      (LET* ((COMMAND-NAME (TYPEIN-LINE-ACCEPT '((SCL:TYPE-OR-STRING CP::DEFINED-COMMAND-NAME))
					       :PROMPT "Edit definition of any CP command"))
	     (TABLES (CP::FIND-COMMAND-SYMBOL COMMAND-NAME)))
	(COND ((NULL TABLES)
	       (TYPEIN-LINE "There is no command named ~S in any command table."
			    COMMAND-NAME))
	      ((NULL (CDR TABLES))
	       (EDIT-DEFINITION (CADAR TABLES) '(CP:DEFINE-COMMAND DEFUN) T))
	      (T
	       (CP::SHOW-COMMAND-SYMBOLS-FOUND COMMAND-NAME TABLES)))))
  DIS-NONE)
