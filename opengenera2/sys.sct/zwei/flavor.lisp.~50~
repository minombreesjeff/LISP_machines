;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains flavor-related commands
;;; This file also contains CLOS related commands

(DEFUN READ-FLAVOR-NAME (PROMPT &OPTIONAL (HELP "You are typing the name of a flavor.")
					  (DEFAULT (RELEVANT-FLAVOR-NAME (POINT)))
					  (PRESENTATION-TYPE 'SYS:FLAVOR-NAME))
  (IGNORE HELP)
  (WHEN DEFAULT
    (UNLESS (DW::PTYPEP DEFAULT PRESENTATION-TYPE)	;Why isn't PTYPEP exported?
      (SETQ DEFAULT NIL)))
  (IF DEFAULT
      (TYPEIN-LINE-ACCEPT PRESENTATION-TYPE :PROMPT PROMPT :DEFAULT DEFAULT)
      (TYPEIN-LINE-ACCEPT PRESENTATION-TYPE :PROMPT PROMPT)))

(DEFUN READ-GENERIC-FUNCTION-NAME
   (PROMPT
    &OPTIONAL
    (HELP "You are typing the name of a Flavors generic function or the name of a message.")
    (DEFAULT (RELEVANT-GENERIC-FUNCTION-NAME (POINT) T)))
  (IGNORE HELP)
  (IF DEFAULT
      (TYPEIN-LINE-ACCEPT '((SYS:GENERIC-FUNCTION-NAME :DEFINED T))
			  :PROMPT PROMPT :DEFAULT DEFAULT)
      (TYPEIN-LINE-ACCEPT '((SYS:GENERIC-FUNCTION-NAME :DEFINED T))
			  :PROMPT PROMPT)))

(DEFUN RELEVANT-FLAVOR-NAME (BP &AUX DEF)
  (WHEN (SETQ DEF (DEFINITION-INTERVAL BP 1 NIL NIL NIL))
    (MULTIPLE-VALUE-BIND (FUNCTION-SPEC TYPE)
	(GET-DEFINITION-FUNCTION-SPEC (INTERVAL-FIRST-BP DEF))
      (COND ((AND (EQ TYPE 'DEFUN)
		  (LISTP FUNCTION-SPEC)
		  (MEMQ (CAR FUNCTION-SPEC) FLAVOR::*FDEFINABLE-METHOD-TYPES*))
	     (FLAVOR:METHOD-FLAVOR FUNCTION-SPEC))
	    ((EQ TYPE 'DEFFLAVOR) FUNCTION-SPEC)))))

(DEFUN RELEVANT-GENERIC-FUNCTION-NAME (BP &OPTIONAL MUST-BE-DEFINED &AUX DEF FUNCTION-SPEC)
  (OR (AND (SETQ DEF (DEFINITION-INTERVAL BP 1 NIL NIL NIL))
	   (LISTP (SETQ FUNCTION-SPEC (GET-DEFINITION-FUNCTION-SPEC (INTERVAL-FIRST-BP DEF))))
	   (MEMQ (CAR FUNCTION-SPEC) FLAVOR::*FDEFINABLE-METHOD-TYPES*)
	   (NEQ (CAR FUNCTION-SPEC) 'DEFUN-IN-FLAVOR)
	   (OR (NOT MUST-BE-DEFINED)
	       (FLAVOR:FIND-GENERIC-FUNCTION (FLAVOR:METHOD-GENERIC FUNCTION-SPEC) NIL))
	   (FLAVOR:METHOD-GENERIC FUNCTION-SPEC))
      (RELEVANT-FUNCTION-OR-MESSAGE-NAME (POINT) T)))

(DEFUN RELEVANT-FUNCTION-OR-MESSAGE-NAME (BP &OPTIONAL MUST-BE-GENERIC (DEFINED-P T))
  (DECLARE (VALUES NAME MESSAGE-P BP STRIP-ARGUMENTS))
  (MULTIPLE-VALUE-BIND (FUN BP1 STRIP-ARGUMENTS) (RELEVANT-FUNCTION-NAME BP NIL DEFINED-P)
    (WHEN BP1 (SETQ BP BP1))
    (MULTIPLE-VALUE-BIND (NAME MESSAGE-P BP2)
	(CONDITION-CASE ()
	   (LET ((BP BP))
	     (COND ((MEMQ FUN '(SEND LEXPR-SEND FUNCALL LEXPR-FUNCALL
				FUNCALL-SELF LEXPR-FUNCALL-SELF))
		    ;; Position BP to start of message
		    (WHEN (AND (SETQ BP (FORWARD-LIST BP -1 NIL 1))	;Open parenthesis
			       (SETQ BP (FORWARD-LIST BP 1 NIL 1 T))	;Inside it
			       (SETQ BP (FORWARD-SEXP BP (IF (MEMQ FUN '(FUNCALL-SELF
									  LEXPR-FUNCALL-SELF))
							     1 2)))	;Past instance
			       (SETQ BP (FORWARD-OVER *WHITESPACE-CHARS* BP)))
		      ;; Look for a quote or a colon
		      (COND ((CHAR-EQUAL (BP-CHAR BP) #/')
			     (SETQ BP (FORWARD-CHAR BP 1)))
			    ((CHAR-EQUAL (BP-CHAR BP) #/:))
			    (T			;not constant
			     (RETURN-FROM RELEVANT-FUNCTION-OR-MESSAGE-NAME NIL)))
		      (VALUES (READ-FROM-STRING (STRING-INTERVAL BP (FORWARD-SEXP BP 1 T) T))
			      T BP)))
		   ((MEMQ FUN '(DEFMETHOD DEFWRAPPER DEFWHOPPER DEFWHOPPER-SUBST))
		    (AND (SETQ BP (FORWARD-LIST BP -1 NIL 1))	;Open parenthesis
			 (SETQ BP (FORWARD-LIST BP 2 NIL 2 T))	;Inside method name
			 (SETQ BP1 (FORWARD-SEXP BP 1 NIL))
			 (VALUES (READ-FROM-STRING (STRING-INTERVAL BP BP1 T))
				 (CHAR-EQUAL (BP-CHAR BP) #/:)
				 BP)))))
	 (SYS:READ-ERROR NIL))
      (IF NAME
	  (SETQ BP BP2 STRIP-ARGUMENTS NIL)
	  (SETQ NAME FUN))
      (WHEN (OR (NOT MUST-BE-GENERIC)
		(AND (CL:TYPEP NAME 'FLAVOR:GENERIC-FUNCTION-NAME)
		     (FLAVOR:FIND-GENERIC-FUNCTION NAME NIL)))
	(VALUES NAME MESSAGE-P BP STRIP-ARGUMENTS)))))

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")read-clos-class0 (prompt &optional (help "You are typing the name of a CLOS class.")
				    (default (relevant-CLOS-class-name (point)))
				    (presentation-type 'clos:class))
  (ignore help)
  (when default
    (setq default (clos:find-class default nil)))
  (if default
      (typein-line-accept presentation-type :prompt prompt :default default)
      (typein-line-accept presentation-type :prompt prompt)))
      
(defun1 read-clos-generic-function-name
0   (prompt &optional (help "You are typing the name of a CLOS generic function")
		     (default (relevant-clos-generic-function-name (point) t)))
  (ignore help)
  (if default
      (typein-line-accept '((clos:generic-function-name :defined t))
			  :prompt prompt :default default)
      (typein-line-accept '((clos:generic-function-name :defined t))
			  :prompt prompt)))

(defun1 relevant-CLOS-class-name0 (bp &aux def)
  (when (setq def (definition-interval bp 1 nil nil nil))
    (multiple-value-bind (function-spec type)
	(get-definition-function-spec (interval-first-bp def))
      (cond ((and (eq type 'defun)
		  (listp function-spec)
		  (eq (car function-spec) 'clos:method))
	     (dolist (spec (third function-spec))
	       (unless (or (eq spec t)
			   (listp spec))
		 (return spec))))
	    ((eq type 'clos:defclass) function-spec)) )))

(defun1 relevant-clos-generic-function-name0 (bp &optional must-be-defined
					    &aux def function-spec)
  (macrolet ((validate (gf-name)
	       `(let ((fi (si:valid-function-definition ,gf-name)))
		  (when fi (clos-internals::generic-function-p fi)))))
    (or (and (setq def (definition-interval bp 1 nil nil nil))
	     (listp (setq function-spec
			  (get-definition-function-spec (interval-first-bp def))))
	     (eq (car function-spec) 'clos:method)
	     (or (not must-be-defined)
		 (validate (second function-spec)))
	     (second function-spec))
	(let ((fname (relevant-function-name (point) nil t)))
	  (when (validate fname) fname)))))


(DEFCOM COM-EDIT-METHODS
	"Prepares to edit the methods for a specified generic function or message.
It prompts for the generic function name.  It makes an internal list of the methods from
all flavors for that generic function, and selects the definition for the first one.
Use c-. (Next Possibility) to move to subsequent definitions.
With an argument, prompts for a flavor name instead of a generic function name.
If the argument is negative, only local methods of that flavor are edited." ()
  (LIST-METHODS-INTERNAL "Edit" ':START-EDITING
			 :FOR-FLAVOR-P *NUMERIC-ARG-P*
			 :LOCAL-ONLY   (MINUSP *NUMERIC-ARG*)))

(DEFCOM COM-LIST-METHODS
"Lists the methods of all flavors that handle a particular generic function or message.
It prompts for the generic function name.
With an argument, prompts for a flavor name instead of a generic function name.
If the argument is negative, only local methods of that flavor are edited." ()
  (LIST-METHODS-INTERNAL "List" ':LIST-POSSIBILITIES
			 :FOR-FLAVOR-P *NUMERIC-ARG-P*
			 :LOCAL-ONLY (MINUSP *NUMERIC-ARG*)))

(DEFUN LIST-METHODS-INTERNAL (PROMPT ACTION &KEY FOR-FLAVOR-P LOCAL-ONLY)
  (LET ((PROMPT (FORMAT NIL "~A~:[~; local~] methods ~
			     ~:[for generic function (or message)~;for flavor~]"
			PROMPT (AND FOR-FLAVOR-P LOCAL-ONLY) FOR-FLAVOR-P)))
    (PUSH-POSSIBILITIES-BUFFER ACTION ':METHODS
			       :SET-TYPE (IF FOR-FLAVOR-P
					     (IF LOCAL-ONLY :FLAVOR-LOCAL :FLAVOR-ALL)
					     :GENERIC)
			       :SET-ROOT (IF FOR-FLAVOR-P
					     (READ-FLAVOR-NAME PROMPT)
					     (READ-GENERIC-FUNCTION-NAME PROMPT)))))

(DEFCOM COM-EDIT-COMBINED-METHODS
"Prepares to edit the methods for a specified generic function applied to a specified flavor.
It prompts first for a generic function (or message) name, then for a flavor name.
It selects the first method definition.  Use c-. (Next Possibility) to move to a subsequent
definition.  Error messages appear when the generic function does not have a method for
the flavor and when the flavor requested is not a composed, instantiated flavor." ()
  (LIST-COMBINED-METHODS-INTERNAL "Edit" ':START-EDITING))

(DEFCOM COM-LIST-COMBINED-METHODS
"Lists the methods for a specified generic function applied to a specified flavor.
It prompts first for a generic function (or message) name, then for a flavor name.
It lists the methods in a typeout window.  Use c-. (Next Possibility) to edit them.
Error messages appear when the generic function does not have a method for
the flavor and when the flavor requested is not a composed, instantiated flavor." ()
  (LIST-COMBINED-METHODS-INTERNAL "List" ':LIST-POSSIBILITIES))

(DEFUN LIST-COMBINED-METHODS-INTERNAL (OP ACTION)
  (LET* ((GENERIC (READ-GENERIC-FUNCTION-NAME
		    (FORMAT NIL "~A combined methods for generic function (or message)" OP)))
	 (FLAVOR (READ-FLAVOR-NAME
		   (FORMAT NIL "~A combined methods for ~S ~:[of~;message to~] flavor"
			   OP GENERIC (MESSAGE-P GENERIC))
		   "You are typing the name of a flavor, to see its combined methods")))
    (PUSH-POSSIBILITIES-BUFFER ACTION ':COMBINED-METHOD
			       :SET-GENERIC GENERIC
			       :SET-FLAVOR FLAVOR)))

(DEFUN MESSAGE-P (GENERIC)
  (LET ((GF (FLAVOR:FIND-GENERIC-FUNCTION GENERIC NIL)))
    (IF GF (FLAVOR::GENERIC-FUNCTION-MESSAGE-P GF)
	(FLAVOR::GENERIC-FUNCTION-HEURISTICALLY-MESSAGE GENERIC))))

(DEFUN MAP-OVER-FLAVOR-FUNCTION-SPECS (FLAVOR FUNCTION &KEY LOCAL-ONLY)
  (LET ((FL (FLAVOR:FIND-FLAVOR FLAVOR)))
    (DOLIST (FL (IF LOCAL-ONLY
		    (LIST FL)
		    (MAPCAR #'FLAVOR:FIND-FLAVOR (FLAVOR::FLAVOR-ALL-COMPONENTS FL)))) 
      ;; The next two loops were extracted from ZWEI:CLEANUP-FLAVOR-MAP-OVER-FUNCTION-SPECS.
      ;; -kmp
      (LOOP FOR (GENERIC . METHOD-HOLDERS) IN (FLAVOR::FLAVOR-METHOD-TABLE FL) DO
	(IGNORE GENERIC)
	(LOOP FOR METHOD-HOLDER IN METHOD-HOLDERS DO
	  (WHEN (FLAVOR::METHOD-DEFINED-P METHOD-HOLDER)
	    (LET ((FUNCTION-SPEC (FLAVOR::METHOD-HOLDER-FUNCTION-SPEC METHOD-HOLDER)))
	      (WHEN (MEMQ (FLAVOR:METHOD-TYPE FUNCTION-SPEC)
			  FLAVOR::*SOURCE-CODE-METHOD-TYPES*)
		(FUNCALL FUNCTION FUNCTION-SPEC))))))
      (LOOP FOR (FUNCTION-SPEC) IN (FLAVOR::FLAVOR-LOCAL-FUNCTIONS FL) DO
	(WHEN (FDEFINEDP FUNCTION-SPEC)
	  (FUNCALL FUNCTION FUNCTION-SPEC))))))

(DEFUN CLEANUP-FLAVOR-MAP-OVER-FUNCTION-SPECS (FLAVOR FUNCTION)
  (DECLARE (SYS:DOWNWARD-FUNARG FUNCTION))
  (LET ((BUFFERS NIL))				;To avoid sectionizing twice
    (FLET ((PROCESS (FUNCTION-SPEC)
	     ;; Find the top-level definition enclosing this one
	     (LET ((REAL-FUNCTION-SPEC FUNCTION-SPEC)
		   (REAL-FUNCTION-TYPE 'DEFUN))
	       (LOOP DO (MULTIPLE-VALUE-BIND (PARENT-FUNCTION-SPEC PARENT-FUNCTION-TYPE)
			    (SYS:FUNCTION-PARENT REAL-FUNCTION-SPEC)
			  (IF PARENT-FUNCTION-SPEC
			      (SETQ REAL-FUNCTION-SPEC PARENT-FUNCTION-SPEC
				    REAL-FUNCTION-TYPE PARENT-FUNCTION-TYPE)
			      (RETURN)))
		     WHILE (EQ REAL-FUNCTION-TYPE 'DEFUN))
	       ;; Find a buffer containing this top-level definition
	       (LET* ((FILE (SI:GET-SOURCE-FILE-NAME REAL-FUNCTION-SPEC REAL-FUNCTION-TYPE))
		      (BUFFER (IF FILE
				  ;; If it was defined by a file, we're only interested
				  ;; if that file has been edited in a buffer
				  (FIND-BUFFER-NAMED (NEWEST-TYPED-PATHNAME FILE) NIL)
				  ;; If it was defined in a non-file buffer, guess
				  ;; the most recent section in which it was noticed
				  (LET ((SECTION (CADR (ASSQ REAL-FUNCTION-TYPE
							     (SI:FUNCTION-SPEC-GET
							       REAL-FUNCTION-SPEC
							       'ZMACS-BUFFERS)))))
				    (AND SECTION (INTERVAL-HOME-BUFFER SECTION))))))
		 (COND (BUFFER
			(UNLESS (MEMQ BUFFER BUFFERS)
			  (CHECK-INTERVAL-SECTIONS BUFFER)
			  (PUSH BUFFER BUFFERS))
			;; This method is an orphan if it no longer is in this buffer
			(UNLESS (LOOP FOR SECTION IN (CDR (ASSQ REAL-FUNCTION-TYPE
								(SI:FUNCTION-SPEC-GET
								  REAL-FUNCTION-SPEC
								  'ZMACS-BUFFERS)))
				      THEREIS (EQ (INTERVAL-HOME-BUFFER SECTION) BUFFER))
			  (FUNCALL FUNCTION FUNCTION-SPEC (BUFFER-NAME-FOR-DISPLAY BUFFER))))
		       ((NULL FILE)
			;; Anything defined at top level (not from a file and not from the
			;; editor) has to be assumed to be an orphan.  It could have been
			;; defined from a non-file buffer that has already been resectionized.
			(FUNCALL FUNCTION FUNCTION-SPEC NIL)))))))
      (MAP-OVER-FLAVOR-FUNCTION-SPECS FLAVOR #'PROCESS :LOCAL-ONLY T))))

(DEFCOM COM-CLEANUP-FLAVOR
	"Offer to undefine any methods that no longer have source in editor buffers."
	(KM)
  (LET ((FLAVOR (READ-FLAVOR-NAME "Flavor whose methods are to be cleaned up"
	"Type the name of a flavor whose methods you have been editing.  You will
be offered a chance to undefine (that is, kill) each method that is still defined
in the Lisp world, but that no longer has a source in the file or editor buffer containing
the file from which the method was defined."))
	(FOUND NIL))
    (CLEANUP-FLAVOR-MAP-OVER-FUNCTION-SPECS
      FLAVOR
      #'(LAMBDA (FUNCTION-SPEC FILE)
	  (SETQ FOUND T)
	  (WHEN (FQUERY ()
			(IF FILE "~S has no source in ~A~%Undefine it? "
			    "~S was not defined by a file.~%Undefine it? ")
			FUNCTION-SPEC FILE)
	    (FUNDEFINE FUNCTION-SPEC))))
    (IF FOUND
	(SEND QUERY-IO :MAKE-COMPLETE)	  
	(TYPEIN-LINE "No /"orphan/" methods for flavor ~S found." FLAVOR)))
  DIS-NONE)

(DEFCOM COM-INSERT-CLEANUP-FLAVOR-FORMS
	"Insert FUNDEFINE forms at the current point in the buffer for any methods that
no longer have source in editor buffers."
	()
  (LET ((FLAVOR (READ-FLAVOR-NAME "Flavor whose methods are to be cleaned up"
				  "Type the name of a flavor whose methods you have been 
editing.  For each method that is defined in the Lisp world, but that no longer has a source
in the editor buffer containing the file from which the method was defined,
an FUNDEFINE form will be inserted at the current point."))
	(FOUND NIL))
    (WITH-NODE-WRITE-LOCKED ((BP-NODE-TO-LOCK (POINT)))
      (CLEANUP-FLAVOR-MAP-OVER-FUNCTION-SPECS
	FLAVOR
	#'(LAMBDA (FUNCTION-SPEC FILE)
	    (SETQ FOUND T)
	    (UNLESS (ZEROP (BP-INDEX (POINT)))
	      (INSERT-MOVING-POINT #\RETURN))
	    (INSERT-MOVING-POINT
	      (FSPEC-TO-UNDEFINE-STRING FUNCTION-SPEC))
	    (INSERT-MOVING-POINT (FORMAT NIL (IF FILE " ; from file /"~A/"~%" 
					       " ; not defined in any file~%")
				   FILE)))))
    (UNLESS FOUND
      (TYPEIN-LINE "No /"orphan/" methods for flavor ~S found." FLAVOR)))
  DIS-TEXT)


;;;; Zwei interface to Flavor Examiner

;;; Execute a CP command, typically one that came from clicking on a presentation.
;;; Echo the command name and arguments, so multiple interactions in the typeout
;;; window are easier to read.
;;; Commands assume that the CP has already done a fresh-line before calling them.
(DEFUN EXECUTE-CP-COMMAND (COMMAND)
  (CL:FRESH-LINE)
  (SCL:PRESENT COMMAND 'CP:COMMAND)
  (TERPRI)
  (APPLY #'CP:EXECUTE-COMMAND COMMAND)
  DIS-NONE)

;;; This is a kludge!  Temporary until Zwei uses the CP more intimately
(DEFMACRO EXECUTE-CP-COMMAND-1 (FORM)
  (UNLESS (EQ (FIRST FORM) 'CL:CASE) (ERROR "~S is not a CASE form"))
  `(CL:CASE ,(SECOND FORM)
     ,@(LOOP FOR (KEY FORM) IN (CDDR FORM)
	     COLLECT `(,KEY ,(IF (EQ (CAR FORM) 'VALUES)
				 ``(EXECUTE-CP-COMMAND-2 ,,@(CDR FORM))
				 ``(EXECUTE-CP-COMMAND ,,FORM))))))

;;; This is a kludge too!
(DEFUN EXECUTE-CP-COMMAND-2 (COMMAND PRESENTATION-TYPE &KEY ACTIVATE SUFFIX)
  (IGNORE PRESENTATION-TYPE SUFFIX)
  (UNLESS ACTIVATE
    (SETQ COMMAND (APPEND COMMAND
			  (LIST (TYPEIN-LINE-READLINE "~A:"
						      (SCL:PRESENT-TO-STRING COMMAND
									     'CP:COMMAND))))))
  (EXECUTE-CP-COMMAND COMMAND))

;;; This is kept only because it has better documentation than EDIT-DEFINITION.
(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR EDIT-GENERIC-FUNCTION
	(((SYS:GENERIC-FUNCTION-NAME :DEFINED T))
	 "Edit generic function and methods" *ZMACS-COMTAB*
	 :DOCUMENTATION EDIT-GENERIC-FUNCTION-DOCUMENTATION
	 :GESTURE :SELECT)
	(GENERIC-FUNCTION-NAME)
  `(EDIT-DEFINITION ,GENERIC-FUNCTION-NAME))

(DEFUN EDIT-GENERIC-FUNCTION-DOCUMENTATION (NAME &REST IGNORE)
  (LET ((GF (FLAVOR:FIND-GENERIC-FUNCTION NAME)))
    (COND ((FLAVOR::GENERIC-FUNCTION-EXPLICIT GF)
	   "Edit Flavors generic function definition and methods")
	  ((FLAVOR::GENERIC-FUNCTION-MESSAGE-P GF)
	   "Edit Flavors methods for this message")
	  (T "Edit Flavors methods for this generic function"))))

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR EDIT-CLOS-GENERIC-FUNCTION
	(((CLOS-INTERNALS::GENERIC-FUNCTION-NAME :DEFINED T))
	 "Edit CLOS generic function and methods" *ZMACS-COMTAB*
	 :DOCUMENTATION EDIT-CLOS-GENERIC-FUNCTION-DOCUMENTATION
	 :GESTURE :SELECT)
	(GENERIC-FUNCTION-NAME)
  `(EDIT-DEFINITION ,GENERIC-FUNCTION-NAME))

(DEFUN EDIT-CLOS-GENERIC-FUNCTION-DOCUMENTATION (NAME &REST IGNORE)
  (LET ((GF (SI:VALID-FUNCTION-DEFINITION NAME)))
    (IF (AND GF (CLOS-INTERNALS::GENERIC-FUNCTION-EXPLICITLY-DEFINED-P GF)) 
	"Edit CLOS generic function definition and methods"
	"Edit CLOS methods for this generic function")))


;;; Zwei commands that replicate the CP commands of the flavor examiner

;Simulate what it would be like if m-X was the same as the CP
(DEFUN READ-COMMAND-ARGUMENTS-AND-EXECUTE (COMMAND-NAME)
  (EXECUTE-CP-COMMAND
    (CONS COMMAND-NAME
	  (TYPEIN-LINE-ACCEPT `((CP::COMMAND-ARGUMENTS :COMMAND-NAME ,COMMAND-NAME)
				:READ-INITIAL-DELIMITER NIL)
			      :PROMPT (SCL:PRESENT-TO-STRING COMMAND-NAME 'CP::COMMAND-NAME)
			      ))))

;With a numeric arg, get full CP type arguments, otherwise evaluate ARG-READERS
(DEFMACRO READ-COMMAND-AND-EXECUTE (COMMAND-NAME &REST ARG-READERS)
  `(IF *NUMERIC-ARG-P*
       (READ-COMMAND-ARGUMENTS-AND-EXECUTE ',COMMAND-NAME)
       (EXECUTE-CP-COMMAND `(,',COMMAND-NAME ,,@ARG-READERS))))

;; borrow a CP parser without borrowing the command itself
(DEFUN READ-COMMAND-ARGUMENTS (COMMAND-NAME)
  (TYPEIN-LINE-ACCEPT `((CP::COMMAND-ARGUMENTS :COMMAND-NAME ,COMMAND-NAME)
			:READ-INITIAL-DELIMITER NIL)
		      :PROMPT (SCL:PRESENT-TO-STRING COMMAND-NAME 'CP::COMMAND-NAME)
		      ))

(DEFCOM COM-SHOW-FLAVOR-COMPONENTS
  "Show the construction of a flavor in terms of its component flavors.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-COMPONENTS
			    (READ-FLAVOR-NAME "Show components of flavor")))

(DEFCOM COM-SHOW-FLAVOR-INSTANCE-VARIABLES
  "Show the instance variables of a flavor, sorted alphabetically.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-INSTANCE-VARIABLES
			    (READ-FLAVOR-NAME "Show instance variables of flavor")))

(DEFCOM COM-SHOW-FLAVOR-METHODS
  "Show the methods of a flavor, sorted alphabetically.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-METHODS
			    (READ-FLAVOR-NAME "Show methods of flavor")))

(DEFCOM COM-SHOW-FLAVOR-INITIALIZATIONS
  "Show the initializations of a flavor, sorted alphabetically.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-INITIALIZATIONS
			    (READ-FLAVOR-NAME "Show initializations of flavor")))

(DEFCOM COM-SHOW-FLAVOR-FUNCTIONS
  "Show the DEFUN-IN-FLAVORs and DEFMACRO-IN-FLAVORs of a flavor.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-FUNCTIONS
			    (READ-FLAVOR-NAME "Show functions in flavor")))

(DEFCOM COM-SHOW-FLAVOR-OPERATIONS
  "Show the possible operations on an instance of a flavor.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-OPERATIONS
			    (READ-FLAVOR-NAME "Show operations on an instance of flavor")))

(DEFCOM COM-SHOW-FLAVOR-DEPENDENTS
  "Show the flavors that depend on a flavor.
A numeric argument limits the display to that many levels.
A c-U argument allows options to be specified." (KM)
  (IF (EQ *NUMERIC-ARG-P* :CONTROL-U)
      (READ-COMMAND-ARGUMENTS-AND-EXECUTE 'FLAVOR::COM-SHOW-FLAVOR-DEPENDENTS)
      (EXECUTE-CP-COMMAND `(FLAVOR::COM-SHOW-FLAVOR-DEPENDENTS
			     ,(READ-FLAVOR-NAME "Show dependents of flavor")
			     :LEVELS ,(IF *NUMERIC-ARG-P* *NUMERIC-ARG* ':ALL)))))

(DEFCOM COM-SHOW-FLAVOR-DIFFERENCES
  "Show the differences between two flavors.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-DIFFERENCES
			    (READ-FLAVOR-NAME "First flavor")
			    (READ-FLAVOR-NAME "Second flavor")))

(DEFCOM COM-SHOW-GENERIC-FUNCTION
  "Describe a generic function or a message.
With a numeric argument, allow options to be specified." (KM)
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-GENERIC-FUNCTION
    (READ-GENERIC-FUNCTION-NAME "Describe generic function or message")))

(DEFCOM COM-SHOW-FLAVOR-HANDLER
  "Show the methods that implement a generic function on instances of a particular flavor.
With a numeric argument, allow options to be specified." (KM)
  (LET* ((GENERIC (READ-GENERIC-FUNCTION-NAME "Show handler for generic function or message"))
	 (FLAVOR (READ-FLAVOR-NAME 
		   (FORMAT NIL "Show handler for ~S of an instance of flavor" GENERIC)
		   NIL
		   (RELEVANT-FLAVOR-NAME (POINT))
		   `((FLAVOR::FLAVOR-HANDLING-GENERIC-FUNCTION ,GENERIC)))))
  (READ-COMMAND-AND-EXECUTE FLAVOR::COM-SHOW-FLAVOR-HANDLER GENERIC FLAVOR)))

(DEFUN QUICK-SHOW-FLAVOR-INITIALIZATIONS-AND-DOCUMENTATION (FLAVOR-NAME DOCUMENTATION)
  (MULTIPLE-VALUE-BIND
    (FLAVOR-DEFINED-P INITABLE-IVS OTHER-ALLOWED-KEYWORDS
     REQUIRED-KEYWORDS ALLOW-OTHER-KEYS)
      (FLAVOR::CHECK-INIT-KEYWORDS-INTERNAL FLAVOR-NAME NIL :ENVIRONMENT NIL)
    (IF FLAVOR-DEFINED-P
	(FLET ((PRINT-IT (STREAM)
		 (LET ((CL:*PRINT-PRETTY* :DATA))
		   (SCL:FILLING-OUTPUT (STREAM)
		     (FORMAT STREAM
			     "~&~S~@[ required: ~S~]~@[ optional: ~S~]~:[~*~;&ALLOW-OTHER-KEYS~]"
			     FLAVOR-NAME
			     REQUIRED-KEYWORDS
			     (APPEND
			       (LOOP FOR (KEY) IN INITABLE-IVS
				     COLLECT KEY)
			       OTHER-ALLOWED-KEYWORDS)
			     ALLOW-OTHER-KEYS)
		     (WHEN DOCUMENTATION
		       (LET ((DOC (FLAVOR::FLAVOR-DOCUMENTATION
				    (FLAVOR::FIND-FLAVOR FLAVOR-NAME))))
			 (IF DOC
			     (CL:CASE (LENGTH DOC)
			       (1 (FORMAT STREAM "~&~S: ~A" FLAVOR-NAME (CAR DOC)))
			       (2 (FORMAT STREAM "~&~S: ~S ~A" FLAVOR-NAME
					  (CAR DOC) (CADR DOC)))
			       (OTHERWISE
				 (FORMAT STREAM "~&~S: ~S" FLAVOR-NAME DOC)))
			     (FORMAT STREAM "~&No defflavor documentation for ~S."
				     FLAVOR-NAME))))))))
	  (IF (VARIABLE-BOUNDP *TYPEIN-WINDOW*)
	      (MULTIPLE-VALUE-BIND (WIDTH HEIGHT IGNORE IGNORE)
		  (DW::CONTINUATION-OUTPUT-SIZE #'PRINT-IT *TYPEIN-WINDOW*)
		(IF (AND ( WIDTH (SEND *TYPEIN-WINDOW* :INSIDE-WIDTH))
			 ( HEIGHT (SEND *TYPEIN-WINDOW* :INSIDE-HEIGHT)))
		    (PROGN
		      (TYPEIN-LINE-DURABLE "")
		      (PRINT-IT *TYPEIN-WINDOW*)
		      (SEND-IF-HANDLES *TYPEIN-WINDOW* :TYPEOUT-STAYS))
		    (PRINT-IT *TYPEOUT-WINDOW*)
		    (SEND-IF-HANDLES *TYPEOUT-WINDOW* :TYPEOUT-STAYS)))
	      (PRINT-IT CL:*STANDARD-OUTPUT*)))
	(DEBUGGING-BARF "~S not a defined flavor." FLAVOR-NAME))))

(DEFCOM COM-QUICK-SHOW-FLAVOR-INIT-KEYWORDS-AND-DOCUMENTATION
	"Show init keywords for the flavor name at the point.
With a numeric argument, shows the documentation as well
Uses the typein window if the output will fit, otherwise the typeout window."
	(KM)
  (LET* ((BP1 (FORWARD-ATOM (FORWARD-CHAR (POINT) 1 T) -1 T))
	 (BP2 (FORWARD-ATOM BP1))
	 (FLAVOR-NAME))
    (IF (NULL BP2) (BARF "No flavor name at point"))
    (CONDITION-CASE (ERROR)
	 (WITH-INPUT-FROM-STRING (S (BP-LINE BP1) (BP-INDEX BP1) (BP-INDEX BP2))
	   (SETQ FLAVOR-NAME (READ S)))
       (SYS:READ-ERROR (BARF "No flavor name at point")))
    (UNLESS (SYMBOLP FLAVOR-NAME) (BARF "No flavor name at point"))
    (IF FLAVOR-NAME
	(QUICK-SHOW-FLAVOR-INITIALIZATIONS-AND-DOCUMENTATION FLAVOR-NAME *NUMERIC-ARG-P*)
	(BARF "No flavor at point.")))
  DIS-NONE)

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR SHOW-FLAVOR-INIT-KEYWORDS
	(SYS:FLAVOR-NAME "Flavor Init Keywords" *STANDARD-COMTAB*
	 :GESTURE EDITOR-DESCRIBE
	 :DOCUMENTATION ((FN) (FORMAT NIL "Init keywords of ~S" FN)))
	(FLAVOR-NAME)
  `(QUICK-SHOW-FLAVOR-INITIALIZATIONS-AND-DOCUMENTATION ,FLAVOR-NAME NIL)) 

;;; Zwei commands for CLOS:

(defcom 1com-show-class-superclasses
0	"Show the superclasses of a CLOS class" (KM)
  (read-command-and-execute clos-internals::com-show-class-superclasses
			    (read-clos-class "Show superclasses of class")))

(define-presentation-to-editor-command-translator1 class-show-class-superclasses
0  (clos:class
    "Show Class Superclasses"
    *standard-comtab*
   :gesture nil   ;menu only
   :do-not-compose t
   :documentation "Show the superclasses of this CLOS class")
  (class)
  `(execute-cp-command (clos-internals::com-show-class-superclasses ,class)))

(defcom 1com-show-class-subclasses
0	"Show the subclasses of a CLOS class" (KM)
  (read-command-and-execute clos-internals::com-show-class-subclasses
			    (read-clos-class "Show subclasses of class")))

(define-presentation-to-editor-command-translator1 class-show-class-subclasses
0  (clos:class
    "Show Class Subclasses"
    *standard-comtab*
   :gesture nil   ;menu only
   :do-not-compose t
   :documentation "Show the subclasses of this CLOS class")
  (class)
  `(execute-cp-command (clos-internals::com-show-class-subclasses ,class)))

(defcom 1com-show-class-initargs
0	"Show the initialization arguments of a CLOS class" (KM)
  (read-command-and-execute clos-internals::com-show-class-initargs
			    (read-clos-class "Show initialization arguments of class")))

(define-presentation-to-editor-command-translator1 class-show-class-initargs
0  (clos:class
    "Show Class Initargs"
    *standard-comtab*
   :gesture nil   ;menu only
   :do-not-compose t
   :documentation "Show the initialization arguments of this CLOS class")
  (class)
  `(execute-cp-command (clos-internals::com-show-class-initargs ,class)))

(defcom 1com-show-class-slots
0	"Show the slots of a CLOS class" (KM)
  (read-command-and-execute clos-internals::com-show-class-slots
			    (read-clos-class "Show slots of class")))

(define-presentation-to-editor-command-translator1 class-show-class-slots
0  (clos:class
    "Show Class Slots"
    *standard-comtab*
   :gesture nil   ;menu only
   :do-not-compose t
   :documentation "Show the slots of this CLOS class")
  (class)
  `(execute-cp-command (clos-internals::com-show-class-slots ,class)))

(defcom 1com-show-class-methods
0	"Show the methods for a CLOS class" (KM)
  (read-command-and-execute clos-internals::com-show-class-methods
			    (read-clos-class "Show methods for class")))

(define-presentation-to-editor-command-translator1 class-show-class-methods
0  (clos:class
    "Show Class Methods"
    *standard-comtab*
   :gesture nil   ;menu only
   :do-not-compose t
   :documentation "Show the methods for this CLOS class")
  (class)
  `(execute-cp-command (clos-internals::com-show-class-methods ,class)))

(defcom 1com-show-class-generic-functions
0	"Show the generic functions that operate on a CLOS class" (KM)
  (read-command-and-execute clos-internals::com-show-class-generic-functions
			    (read-clos-class "Show generic functions for class")))

(define-presentation-to-editor-command-translator1 class-show-class-generic-functions
0  (clos:class
    "Show Class Generic-functions"
    *standard-comtab*
   :gesture nil   ;menu only
   :do-not-compose t
   :documentation "Show the generic functions that operate on this CLOS class")
  (class)
  `(execute-cp-command (clos-internals::com-show-class-generic-functions ,class)))

(defcom 1com-show-clos-generic-function
0	"Show some information about a CLOS generic function" (KM)
  (read-command-and-execute
    clos-internals::com-show-clos-generic-function
    (read-clos-generic-function-name "Show CLOS generic function")))

(define-presentation-to-editor-command-translator clos-generic-function-show
  (clos:generic-function-name
    "Show CLOS Generic Function"
    *standard-comtab*
    :gesture nil
    :tester ((gf-name)
	     (and (fdefinedp gf-name)
		  (fdefinition gf-name)
		  (scl:typep (fdefinition gf-name) 'clos:standard-generic-function)))
    :do-not-compose t
    :documentation "Show some information about this CLOS generic function")
						  (gf-name)
  `(execute-cp-command (clos-internals::com-show-clos-generic-function ,gf-name)))

(defcom 1com-show-effective-method
0	"Show the methods that implement a generic function for a particular set of arguments"
	(km)
  (let ((generic-function-name
	  (read-clos-generic-function-name "Show methods for CLOS generic function")))
    (read-command-and-execute
      clos-internals::com-show-effective-method
      generic-function-name
      (scl:accept `((clos-internals::generic-function-specializers-list
		     ,generic-function-name))))))

(define-presentation-to-editor-command-translator
1  class-edit-definition
0  (clos:class 
    "Edit definition"
    *standard-comtab*
    :gesture :select
    :tester ((class) (clos-internals::class-name-proper-p class))
    :do-not-compose t
    :documentation "Edit the definition of this class")
  (class)
  `(edit-definition ,(clos:class-name class) (clos:defclass)))


;;; Special buffers

(DEFFLAVOR ORDERED-FUNCTION-EDITING-SPECIAL-PURPOSE-BUFFER ()
	   (HEADER-DESCRIPTION-1-SUBNODE-SPECIAL-PURPOSE-BUFFER-MIXIN
	    POSSIBILITIES-SPECIAL-PURPOSE-BUFFER))

(DEFINE-SPECIAL-BUFFER-TYPE COMBINED-METHOD-EDITING-BUFFER
			    (FLAVOR GENERIC METHODS METHOD-COMBINATION)
			    (ORDERED-FUNCTION-EDITING-SPECIAL-PURPOSE-BUFFER)
			    :COMBINED-METHOD "Combined-Method"
  (:SETTABLE-INSTANCE-VARIABLES FLAVOR GENERIC)
  (:BUFFER-INIT-OPTIONS :SET-FLAVOR :SET-GENERIC))

(DEFMETHOD (:REVERT COMBINED-METHOD-EDITING-BUFFER :BEFORE) ()
  (CONDITION-CASE (ERROR)
       (LET ((ERROR NIL))
	 (SETQ GENERIC (FLAVOR::STANDARDIZE-GENERIC-FUNCTION-NAME GENERIC))
	 (MULTIPLE-VALUE (NIL METHODS METHOD-COMBINATION ERROR)
	   (FLAVOR:COMPOSE-HANDLER GENERIC FLAVOR))
	 (WHEN ERROR
	   (BARF ERROR))
	 ;; Remove methods incorporated via :inline-methods :recursive
	 (SETQ METHODS (CL:REMOVE GENERIC METHODS :TEST-NOT #'EQ
						  :KEY #'FLAVOR:METHOD-GENERIC)))
     (FLAVOR::GENERIC-FUNCTION-NOT-FOUND
       (BARF ERROR))))

(DEFMETHOD (:DESCRIPTION COMBINED-METHOD-EDITING-BUFFER) ()
  (FORMAT NIL "~S on ~S" GENERIC FLAVOR))

(DEFMETHOD (:HEADER-DESCRIPTION-1 COMBINED-METHOD-EDITING-BUFFER) (STREAM PLURAL)
  (FORMAT STREAM "Combined method~P for ~S ~:[of~;message to~] ~S flavor"
	  PLURAL GENERIC (MESSAGE-P GENERIC) FLAVOR))

(DEFMETHOD (:ADDITIONAL-HEADER-DESCRIPTION COMBINED-METHOD-EDITING-BUFFER) (STREAM)
  (UNLESS (EQUAL METHOD-COMBINATION '(:DAEMON :BASE-FLAVOR-LAST))
    (FORMAT STREAM ",~%combined with ~{~S ~}method combination" METHOD-COMBINATION)))

(DEFMETHOD (:REVERT COMBINED-METHOD-EDITING-BUFFER) ()
  (DOLIST (FSPEC METHODS)
    (SEND SELF ':ADD-NODE
	  (IF (MEMQ (FLAVOR:METHOD-TYPE FSPEC) FLAVOR::*SOURCE-CODE-METHOD-TYPES*)
	      'FUNCTION-SPEC-SUBNODE
	      'INSTANCE-VARIABLE-ACCESSOR-SUBNODE)
	  ':FUNCTION-SPEC FSPEC)))

(DEFFLAVOR FUNCTION-EDITING-SPECIAL-PURPOSE-BUFFER ()
	   (HEADER-DESCRIPTION-1-SUBNODE-SPECIAL-PURPOSE-BUFFER-MIXIN
	    POSSIBILITIES-SPECIAL-PURPOSE-BUFFER))

(DEFINE-SPECIAL-BUFFER-TYPE METHODS-EDITING-BUFFER
			    (TYPE ROOT) (FUNCTION-EDITING-SPECIAL-PURPOSE-BUFFER)
			    :METHODS "Methods"
  :SETTABLE-INSTANCE-VARIABLES
  (:BUFFER-INIT-OPTIONS :SET-TYPE :SET-ROOT))

(DEFMETHOD (:DESCRIPTION METHODS-EDITING-BUFFER) ()
  (CL:ECASE TYPE
    (:GENERIC      (FORMAT NIL "generic ~S"      ROOT))
    (:FLAVOR-LOCAL (FORMAT NIL "flavor ~S local" ROOT))
    (:FLAVOR-ALL   (FORMAT NIL "flavor ~S all"   ROOT))))

(DEFMETHOD (:HEADER-DESCRIPTION-1 METHODS-EDITING-BUFFER) (STREAM PLURAL-P)
  (CL:ECASE TYPE
    (:GENERIC      (FORMAT STREAM "Method~P for generic function ~S" PLURAL-P ROOT))
    (:FLAVOR-LOCAL (FORMAT STREAM "Local method~P for flavor ~S"     PLURAL-P ROOT))
    (:FLAVOR-ALL   (FORMAT STREAM "All method~P for flavor ~S"       PLURAL-P ROOT))))

(DEFMETHOD (:REVERT METHODS-EDITING-BUFFER) ()
  (FLET ((NOTE-ALL-ACCESSORS (FLAVOR &OPTIONAL (FOR-GENERIC :ALL))
	   (LET ((FL (IF (SYMBOLP FLAVOR) (FLAVOR:FIND-FLAVOR FLAVOR) FLAVOR)))
	     (FLET ((NOTE-ACCESSORS (TYPE LIST)
		      (LOOP FOR (GEN VAR) IN LIST DO
			(WHEN (OR (EQ FOR-GENERIC :ALL) (EQ GEN FOR-GENERIC))
			  (SEND SELF :ADD-NODE 'INSTANCE-VARIABLE-ACCESSOR-SUBNODE
				:FUNCTION-SPEC `(,TYPE ,GEN ,FLAVOR ,VAR))))))
	       (NOTE-ACCESSORS 'FLAVOR:READ-INSTANCE-VARIABLE
			       (FLAVOR::FLAVOR-LOCAL-READABLE-INSTANCE-VARIABLES FL))
	       (NOTE-ACCESSORS 'FLAVOR:WRITE-INSTANCE-VARIABLE
			       (FLAVOR::FLAVOR-LOCAL-WRITABLE-INSTANCE-VARIABLES FL))
	       (NOTE-ACCESSORS 'FLAVOR:LOCATE-INSTANCE-VARIABLE
			       (FLAVOR::FLAVOR-LOCAL-LOCATABLE-INSTANCE-VARIABLES FL))))))
    (CL:ECASE TYPE
      (:GENERIC 
	(LET ((GENERIC ROOT) GF FL)
	  (WHEN (SETQ GF (FLAVOR:FIND-GENERIC-FUNCTION GENERIC NIL))
	    (SETQ GENERIC (SYS:GENERIC-FUNCTION-NAME GF))
	    (DOLIST (FLAVOR (SYS:GENERIC-FUNCTION-FLAVORS GF))
	      (WHEN (SETQ FL (FLAVOR:FIND-FLAVOR FLAVOR NIL))
		(NOTE-ALL-ACCESSORS FL GENERIC)
		(DOLIST (MH (CDR (ASSQ GENERIC (FLAVOR::FLAVOR-METHOD-TABLE FL))))
		  (LET ((FUNCTION-SPEC (FLAVOR::METHOD-HOLDER-FUNCTION-SPEC MH)))
		    (UNLESS (EQ (FLAVOR:METHOD-TYPE FUNCTION-SPEC) 'FLAVOR:COMBINED)
		      (SEND SELF :ADD-NODE 'FUNCTION-SPEC-SUBNODE
			    :FUNCTION-SPEC FUNCTION-SPEC)))))))))
      ((:FLAVOR-ALL :FLAVOR-LOCAL)
       (IF (EQ TYPE :FLAVOR-LOCAL)
	   (NOTE-ALL-ACCESSORS ROOT)
	   (MAPC #'NOTE-ALL-ACCESSORS (FLAVOR::FLAVOR-ALL-COMPONENTS
					(FLAVOR:FIND-FLAVOR ROOT))))
       (MAP-OVER-FLAVOR-FUNCTION-SPECS
	 ROOT
	 #'(LAMBDA (FUNCTION-SPEC)
	     (SEND SELF :ADD-NODE 'FUNCTION-SPEC-SUBNODE
		   :FUNCTION-SPEC FUNCTION-SPEC))
	 :LOCAL-ONLY (EQ TYPE :FLAVOR-LOCAL))))))
