;;; Zwei commands, see ZWEI;COMA for comments -*- Base: 8;Mode: LISP; Package: ZWEI-*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFCOM COM-SET-KEY "Install a specified function on a specified key.
If the key is currently holding a command prefix (like Control-X), it will ask
you for another character, so that you can redefine Control-X commands.  However,
with a numeric argument, it will assume you want to redefine Control-X itself,
and will not ask for another character." ()
  (INSTALL-COMMAND-INTERNAL (GET-ANY-EXTENDED-COMMAND "Command to install:")))

(DEFCOM COM-INSTALL-COMMAND "Install a specified function on a specified key.
The name of the function is read from the mini-buffer (the top of the kill ring
contains the name of the current defun), and a character from the echo area.
If the key is currently holding a command prefix (like Control-X), it will ask
you for another character, so that you can redefine Control-X commands.  However,
with a numeric argument, it will assume you want to redefine Control-X itself,
and will not ask for another character." ()
    (DO (NAME) (NIL)
      (SETQ NAME (READ-FUNCTION-SPEC "Name of function to install"
				     (RELEVANT-FUNCTION-NAME (POINT))))
      (AND (OR (FBOUNDP NAME)
	       (FQUERY '(:SELECT T) "~A is not defined, ok to install anyway? " NAME))
	   (RETURN (INSTALL-COMMAND-INTERNAL NAME)))))

(DEFCOM COM-INSTALL-MACRO "Install a specified user macro on a specified key.
The macro should be a /"permanent/" macro, that has a name.
The name of the macro is read from the mini-buffer, and the keystroke on which
to install it is read in the echo area.
If the key is currently holding a command prefix (like Control-X), it will ask
you for another character, so that you can redefine Control-X commands.  However,
with a numeric argument, it will assume you want to redefine Control-X itself,
and will not ask for another character." ()
  (INSTALL-MACRO-INTERNAL NIL))

(DEFCOM COM-INSTALL-MOUSE-MACRO
  "Install a specified user macro on a specified mouse click.
The macro should be a /"permanent/" macro, that has a name.
The name of the macro is read from the mini-buffer, and the mouse click on which
to install it is read in the echo area.
When the mouse is clicked to invoke this macro, point will be moved to the
place where the mouse is pointing before the macro is executed." ()
  (INSTALL-MACRO-INTERNAL T))

(DEFCOM COM-DEINSTALL-MACRO "Deinstall a keyboard macro." ()
  (INSTALL-COMMAND-INTERNAL NIL NIL T))

(DEFUN INSTALL-MACRO-INTERNAL (MOUSE-P)
  (OR (MEMQ ':MACRO-PREVIOUS-ARRAY (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
      (BARF "This stream does not support macros"))
  (LET ((NAME (TYPEIN-LINE-READLINE "Name of macro to install (CR for last macro defined):"))
	(PACKAGE SI:PKG-USER-PACKAGE))
    (IF (EQUAL NAME "")
	(LET ((MAC (SEND STANDARD-INPUT ':MACRO-PREVIOUS-ARRAY)))
	  (UNLESS MAC (BARF "No macros have been defined"))
	  (SETQ NAME (GENSYM))
	  (PUTPROP NAME MAC 'MACRO-STREAM-MACRO))
	(BARF-ON-ERRORS (SYS:READ-ERROR)
	  (SETQ NAME (LET ((SI:*SUPPRESS-READ-EVAL* T))
		       (READ-FROM-STRING NAME))))
	(UNLESS (GET NAME 'MACRO-STREAM-MACRO)
	  (BARF "~A is not a defined macro." NAME)))
    (INSTALL-COMMAND-INTERNAL (MAKE-MACRO-COMMAND NAME MOUSE-P) T NIL MOUSE-P)))

(DEFUN INSTALL-COMMAND-INTERNAL (COMMAND &OPTIONAL REMEMBER-OLD-P DEINSTALL-P MOUSE-ONLY-P
				 &AUX KEY-LIST)
  (PROMPT-LINE (IF DEINSTALL-P "Key to deinstall:" "Key to get it:"))
  (PROMPT-LINE-ACTIVATE
    (DO ((COMTAB *COMTAB*)
	 (KEY (EDITOR-INPUT :MOUSE :RETURN)
	      (EDITOR-INPUT)))
	(NIL)
      (AND MOUSE-ONLY-P (NOT (MOUSE-CHAR-P KEY))
	   (BARF "~:@C is not a mouse character" KEY))
      (WHEN (AND KEY-LIST (ZEROP (CHAR-BITS KEY)))
	(SETQ KEY (CHAR-UPCASE KEY)))
      (PUSH KEY KEY-LIST)
      (PROMPT-LINE-MORE " ~:@C" KEY)
      (LET ((OLD-COMMAND (COMMAND-LOOKUP KEY COMTAB)))
	(COND ((AND (PREFIX-COMMAND-P OLD-COMMAND)
		    (NOT *NUMERIC-ARG-P*))
	       (SETQ COMTAB (SYMEVAL-IN-CLOSURE OLD-COMMAND 'COMTAB)))
	      (T (AND DEINSTALL-P
		      (SETQ COMMAND (MOUSE-MACRO-COMMAND-LAST-COMMAND
				      (COMMAND-LOOKUP KEY COMTAB))))
		 (AND REMEMBER-OLD-P
		      (SET-MOUSE-MACRO-COMMAND-LAST-COMMAND COMMAND
							    (COMMAND-LOOKUP KEY COMTAB)))
		 (SETQ COMTAB
		       (PICK-COMTAB-OR-INDIRECT
			 COMTAB (FORMAT NIL "Install ~A on ~:@C in what comtab"
					(TYPECASE COMMAND
					  (:CLOSURE "macro")
					  (OTHERWISE (GET COMMAND 'COMMAND-NAME)))
					KEY)))
		 (COMMAND-STORE COMMAND KEY COMTAB)
		 (RETURN NIL))))))
  (COND ((NULL COMMAND) (TYPEIN-LINE "No command now"))
	((TYPEP COMMAND :CLOSURE) (TYPEIN-LINE "Macro"))
	(T (TYPEIN-LINE "Command ~S" COMMAND)))
  (TYPEIN-LINE-MORE " installed on")
  (DOLIST (KEY (NREVERSE KEY-LIST))
    (TYPEIN-LINE-MORE " ~:@C" KEY))
  (TYPEIN-LINE-MORE ".")
  DIS-NONE)

;;;Multics EMACS compatible macro commands
(DEFCOM COM-START-KBD-MACRO "Begin defining a keyboard macro.
A numeric argument means append to the previous keyboard macro." (KM)
  (OR (MEMQ ':MACRO-PUSH (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
      (BARF "This stream does not support macros"))
  (FUNCALL STANDARD-INPUT ':MACRO-PUSH (+ 2 *NUMERIC-ARG-N-DIGITS*)
	   (AND *NUMERIC-ARG-P* (FUNCALL STANDARD-INPUT ':MACRO-PREVIOUS-ARRAY)))
  DIS-NONE)

(DEFCOM COM-END-KBD-MACRO "Terminate the definition of a keyboard macro." ()
  (OR (MEMQ ':MACRO-POP (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
      (BARF "This stream does not support macros"))
  (CATCH 'MACRO-LOOP				;In case no macro running
     (FUNCALL STANDARD-INPUT ':MACRO-POP (+ 2 *NUMERIC-ARG-N-DIGITS*)
	                                 (AND (NOT (ZEROP *NUMERIC-ARG*)) *NUMERIC-ARG*)))
  DIS-NONE)

(DEFCOM COM-CALL-LAST-KBD-MACRO "Repeat the last keyboard macro." ()
  (OR (MEMQ ':MACRO-EXECUTE (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
      (BARF "This stream does not support macros"))
  (FUNCALL STANDARD-INPUT ':MACRO-EXECUTE NIL
	   (AND (NOT (ZEROP *NUMERIC-ARG*)) *NUMERIC-ARG*) T)
  DIS-NONE)

(DEFCOM COM-KBD-MACRO-QUERY "Interactive keyboard macro" ()
  (OR (MEMQ ':MACRO-QUERY (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
      (BARF "This stream does not support macros"))
  (FUNCALL STANDARD-INPUT ':MACRO-QUERY (+ 2 *NUMERIC-ARG-N-DIGITS*))
  DIS-NONE)

(DEFCOM COM-SHOW-KEYBOARD-MACRO "Typeout the specified keyboard macro.
The macro should be a /"permanent/" macro, that has a name.
The name of the macro is read from the mini-buffer, just cr means the last
one defined, which can also be temporary." ()
  (OR (MEMQ ':MACRO-PREVIOUS-ARRAY (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
      (BARF "This stream does not support macros"))
  (LET* ((NAME (TYPEIN-LINE-READLINE "Name of macro to show (CR for last macro defined):"))
	 (MAC (IF (EQUAL NAME "")
		  (FUNCALL STANDARD-INPUT ':MACRO-PREVIOUS-ARRAY)
		  (GET (PKG-BIND SI:PKG-USER-PACKAGE
			 (LET ((SI:*SUPPRESS-READ-EVAL* T))
			   (READ-FROM-STRING NAME)))
		       'MACRO-STREAM-MACRO))))
    (UNLESS MAC
      (BARF (IF NAME "~A is not a defined macro." "No macros have been defined yet") NAME))
    (VIEW-KBD-MACRO-1 MAC))
  DIS-NONE)

(DEFUN VIEW-KBD-MACRO-1 (MAC)
  (DO ((I 0 (1+ I))
       (LEN (MACRO-LENGTH MAC))
       (CH))
      ((> I LEN))
    (SETQ CH (AREF MAC I))
    (COND ((ARRAYP CH)
	   (FORMAT T "Push ")
	   (VIEW-KBD-MACRO-1 CH)
	   (FORMAT T "Pop~@[, repeating ~D times~] " (MACRO-DEFAULT-COUNT CH)))
	  (T
	   ;; Decode char with same corrections that MACRO-PUSH-LEVEL does
	   (FORMAT T (SELECTQ CH
		       ((*MOUSE* *MICE*) "Mouse command ~*")
		       ((*SPACE* *RUN*) "Macro query ~*")
		       (NIL "Input ~*")
		       (OTHERWISE "~:C "))
		   CH)))))

(DEFCOM COM-NAME-LAST-KBD-MACRO "Make the last temporary macro permanent.
The new name for the macro is read from the mini-buffer." ()
  (OR (MEMQ ':MACRO-PREVIOUS-ARRAY (FUNCALL STANDARD-INPUT ':WHICH-OPERATIONS))
      (BARF "This stream does not support macros"))
  (LET* ((MAC (OR (FUNCALL STANDARD-INPUT ':MACRO-PREVIOUS-ARRAY)
		  (BARF "There is no previous keyboard macro")))
	 (PACKAGE SI:PKG-USER-PACKAGE)
	 (NAME (TYPEIN-LINE-ACCEPT 'SYMBOL :PROMPT "Name for macro")))
    (PUTPROP NAME MAC 'MACRO-STREAM-MACRO))
  DIS-NONE)

;;; Sorting commands
;;;--- Probably busts across section boundaries.
(DEFCOM COM-SORT-LINES "Sort the lines of the region alphabetically.
With a numeric argument N, sort the lines, comparing them starting at position N." ()
  (REGION (BP1 BP2)
    (WITH-INTERVAL-WRITE-LOCKED (BP1 BP2 T)
      (SORT-LINES-INTERVAL
	(COND ((AND *NUMERIC-ARG-P* (NOT (ZEROP *NUMERIC-ARG*)))
	       (WHEN (< *NUMERIC-ARG* 0)
		 (BARF "Can't sort starting at a negative column"))
	       ;; Capture this `cuz we can access it faster in the funarg
	       (LET ((NUMERIC-ARG (1- *NUMERIC-ARG*)))
		 #'(LAMBDA (X Y) 
		     (LET ((LX (STRING-LENGTH X))
			   (LY (STRING-LENGTH Y)))
		       (IF (< NUMERIC-ARG (MIN LX LY))
			   (STRING-LESSP X Y NUMERIC-ARG NUMERIC-ARG)
			 ;; Pretend there are blanks on the rest of the line
			 ( LX LY))))))
	      (T #'STRING-LESSP))
	BP1 BP2 T)))
  DIS-TEXT)

;;--- Probably busts across section boundaries.
(DEFCOM COM-SORT-PARAGRAPHS "Sort the region alphabetically by paragraphs" ()
  (REGION (BP1 BP2)
    (WITH-INTERVAL-WRITE-LOCKED (BP1 BP2 T)
      (SORT-INTERVAL-FUNCTIONS #'FORWARD-OVER-BLANK-OR-TEXT-JUSTIFIER-LINES
			       #'(LAMBDA (BP) (FORWARD-PARAGRAPH BP 1 T))
			       #'(LAMBDA (BP) BP)
			       #'INTERVAL-WITH-SORT-INTERVAL-LESSP
			       BP1 BP2 T)))
  DIS-TEXT)

(DEFVAR *MAKE-KBD-MACRO-MOVER-COMTAB*)

;;; This returns a function which takes a BP and returns a resultant BP after performing
;;; the given kbd-macro operation.
(DEFUN MAKE-KBD-MACRO-MOVER (PROMPT)
  (COM-START-KBD-MACRO)
  (TYPEIN-LINE "Defining a keyboard macro to ~A~@[; type ~A to finish it~]"
	       PROMPT (KEY-FOR-COMMAND 'COM-END-KBD-MACRO))
  (FUNCALL *TYPEIN-WINDOW* ':TYPEOUT-STAYS)
  (AND (EQ (CATCH 'EXIT-MAKE-KBD-MACRO-MOVER
	     (SEND *CURRENT-COMMAND-LOOP*
		   ':EDIT-WITH-STANDARD-INPUT-AND-COMTAB
		   (LET-CLOSED ((OLD-STANDARD-INPUT STANDARD-INPUT))
		     #'(LAMBDA (OP &REST REST)
			 (MULTIPLE-VALUE-PROG1 (LEXPR-SEND OLD-STANDARD-INPUT OP REST)
			   (WHEN (EQ OP :SEND-IF-HANDLES)
			     (SETQ OP (FIRST REST)))
			   (SELECTQ OP
			     (:MACRO-POP
			      ;;When done recording, exit the recursive edit.
			      (THROW 'EXIT-MAKE-KBD-MACRO-MOVER T))
			     ;;If there is an error, exit, it will throw up
			     ;;further.
			     (:MACRO-ERROR
			      (THROW 'EXIT-MAKE-KBD-MACRO-MOVER ':MACRO-ERROR))))))))
	   ':MACRO-ERROR)
       (THROW 'ZWEI-COMMAND-LOOP T))
  (COND ((NOT (VARIABLE-BOUNDP *MAKE-KBD-MACRO-MOVER-COMTAB*))
	 (SETQ *MAKE-KBD-MACRO-MOVER-COMTAB* (CREATE-SPARSE-COMTAB "Kbd macro mover"))
	 (SETF (COMTAB-KEYBOARD-ARRAY *MAKE-KBD-MACRO-MOVER-COMTAB*)
	       '((#\BLIPS:a/ blip . COM-EXIT-KBD-MACRO-MOVER)))))
  (SET-COMTAB-INDIRECTION *MAKE-KBD-MACRO-MOVER-COMTAB* *COMTAB*)
  (LET-CLOSED ((OLD-MACRO-PREVIOUS-ARRAY (SEND STANDARD-INPUT ':MACRO-PREVIOUS-ARRAY))
	       (STANDARD-INPUT (LET-CLOSED ((OLD-STANDARD-INPUT STANDARD-INPUT))
				 #'(LAMBDA (OP &REST REST)
				     (MULTIPLE-VALUE-PROG1
				         (LEXPR-SEND OLD-STANDARD-INPUT OP REST)
				       (WHEN (EQ OP :SEND-IF-HANDLES)
					 (SETQ OP (FIRST REST)))
				       (WHEN (EQ OP ':MACRO-ERROR)
					 (THROW 'EXIT-KBD-MACRO-MOVER ':MACRO-ERROR)))))))
    (ARRAY-PUSH-EXTEND OLD-MACRO-PREVIOUS-ARRAY #\BLIPS:a/ blip)
    (SETF (MACRO-LENGTH OLD-MACRO-PREVIOUS-ARRAY)
	  (1- (MACRO-POSITION OLD-MACRO-PREVIOUS-ARRAY)))
    #'(LAMBDA (BP &AUX (POINT (POINT)) OLD-POINT)
	(SETQ OLD-POINT (COPY-BP POINT ':NORMAL))
	(MOVE-POINT BP)
	(UNWIND-PROTECT
	  (PROGN
	    (SEND STANDARD-INPUT ':MACRO-EXECUTE OLD-MACRO-PREVIOUS-ARRAY 1)
	    (COND ((EQ (CATCH 'EXIT-KBD-MACRO-MOVER
			 (SEND *CURRENT-COMMAND-LOOP*
			       ':EDIT-WITH-STANDARD-INPUT-AND-COMTAB
			       STANDARD-INPUT
			       *MAKE-KBD-MACRO-MOVER-COMTAB*))
		       ':MACRO-ERROR)
		 (TYPEIN-LINE "Keyboard macro playback terminated by error.")
		 (THROW 'ZWEI-COMMAND-LOOP T)))
	    (COPY-BP POINT))
	  (MOVE-POINT OLD-POINT)
	  (FLUSH-BP OLD-POINT)))))

(DEFUN COM-EXIT-KBD-MACRO-MOVER ()
  (THROW 'EXIT-KBD-MACRO-MOVER T))

;;;--- probably busts across hard section boundaries
(DEFCOM COM-SORT-VIA-KEYBOARD-MACROS
	"Sorts the region, prompting for actions to define the sort keys.
It prompts you to define the sort keys by performing the positioning commands
that define the sort keys.  It prompts for three actions:
 Move to the beginning of the sort key
 Move to the end of the sort key
 Move to the end of the sort record
For each, it records the keystrokes that you use (as keyboard macros) and
plays those back to find and sort the records in the region.  " ()
  (REGION (BP1 BP2)
    (WITH-BP (FIRST-BP BP1 ':NORMAL)
      (WITH-BP (LAST-BP BP2 ':MOVES)
	(SETF (WINDOW-MARK-P *WINDOW*) NIL)
	(MOVE-POINT FIRST-BP)
	(MUST-REDISPLAY *WINDOW* DIS-BPS)
	(LET ((MOVE-TO-KEY-MACRO (MAKE-KBD-MACRO-MOVER "move to the start of the sort key"))
	      (MOVE-OVER-KEY-MACRO (MAKE-KBD-MACRO-MOVER "move over the sort key"))
	      (MOVE-TO-NEXT-MACRO (MAKE-KBD-MACRO-MOVER "move to the end of the record")))
	  (SORT-INTERVAL-FUNCTIONS MOVE-TO-KEY-MACRO MOVE-OVER-KEY-MACRO MOVE-TO-NEXT-MACRO
				   #'INTERVAL-WITH-SORT-INTERVAL-LESSP FIRST-BP LAST-BP T)))))
  (TYPEIN-LINE "Sorted.")	;erase prompt
  DIS-TEXT)

#|
;;; Commands to make it easier to use Command Processor Parsing from Zwei.

(DEFFLAVOR CP-INTERVAL-STREAM () (INTERVAL-STREAM))

(DEFMETHOD (:RESCANNING-P CP-INTERVAL-STREAM) () 'T)

(DEFWHOPPER (:TYI CP-INTERVAL-STREAM) (&OPTIONAL EOF)
  (LET ((CH (CONTINUE-WHOPPER EOF)))
    (COND ((NULL CH) '(:ACTIVATION #\END NIL))
	  ((CP:ACTIVATION-CHARACTER? CH SELF) `(:ACTIVATION ,CH NIL))
	  (T CH))))

(DEFUN CP-INTERVAL-STREAM (FROM-BP &OPTIONAL TO-BP IN-ORDER-P)
  (GET-INTERVAL FROM-BP TO-BP IN-ORDER-P)
  (MAKE-INSTANCE 'CP-INTERVAL-STREAM
		 ':INTERVAL (CREATE-INTERVAL FROM-BP TO-BP T)
		 ':LINE (BP-LINE FROM-BP)
		 ':INDEX (BP-INDEX FROM-BP)
		 ':LAST-LINE (BP-LINE TO-BP)
		 ':LAST-INDEX (BP-INDEX TO-BP)
		 ':STOP-INDEX (LINE-LENGTH (BP-LINE FROM-BP))
		 ':FONT-FLAG 0))

(DEFCOM COM-PARSE-COMMAND-LINE "Parses command beginning at point." ()
  (LET* ((FROM-BP (POINT))
	 (TO-BP (IF (WINDOW-MARK-P *WINDOW*) (MARK) (END-OF-LINE (BP-LINE FROM-BP))))
	 (STREAM (CP-INTERVAL-STREAM FROM-BP TO-BP))
	 (FORM (CONDITION-CASE (E)
		   (LET ((CP:LL-CP-STYLE :COMMAND) (CP:*FULLY-PARSE-CP-INPUT-STRINGS* NIL))
		     (CP:READ-COMMAND-LINE-OR-LISP STREAM))
		 (FERROR E))))
    (COND ((ERRORP FORM)
	   (LEXPR-FUNCALL 'BARF (SEND FORM ':FORMAT-STRING) (SEND FORM ':FORMAT-ARGS)))
	  (T (MOVE-BP TO-BP (SEND STREAM ':READ-BP))
	     (UNDO-SAVE FROM-BP TO-BP T "command translation")
	     (SEND STREAM ':SET-BP TO-BP)
	     (GRIND-TOP-LEVEL FORM NIL STREAM NIL 'SI:DISPLACED NIL)
	     (WITH-BP (END (SEND STREAM ':READ-BP) ':NORMAL)
	       (DELETE-INTERVAL FROM-BP TO-BP 'T)
	       (MOVE-POINT END))))
    DIS-TEXT))
|#
