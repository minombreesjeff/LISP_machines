;;; -*- Mode: LISP; Syntax: ZetaLisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFINE-SPECIAL-BUFFER-TYPE MODIFIED-SECTIONS-BUFFER
			    (SINGLE-BUFFER CRITERION)
			    (HEADER-DESCRIPTION-1-SUBNODE-SPECIAL-PURPOSE-BUFFER-MIXIN
			      REUSABLE-POSSIBILITIES-SPECIAL-PURPOSE-BUFFER-MIXIN
			      SECTION-SUBNODE-SPECIAL-PURPOSE-BUFFER
			      SUBNODE-SPECIAL-PURPOSE-BUFFER)
			    :MODIFIED-SECTIONS "Modified-Sections"
  :SETTABLE-INSTANCE-VARIABLES
  (:FUNCTIONS EDIT-CHANGED-SECTIONS-INTERNAL-1)		;Forward reference
  (:BUFFER-INIT-OPTIONS :SET-SINGLE-BUFFER :SET-CRITERION))

(DEFMETHOD (:DESCRIPTION MODIFIED-SECTIONS-BUFFER) ()
  (IF SINGLE-BUFFER (SEND SINGLE-BUFFER ':NAME) "all buffers"))

(DEFMETHOD (:HEADER-DESCRIPTION-1 MODIFIED-SECTIONS-BUFFER) (STREAM PLURAL-P)
  (FORMAT STREAM "Section~P modified since ~A in ~:[buffer ~A~;all buffers~]"
	  PLURAL-P
	  (SELECTQ CRITERION
	    (:READ "file was read")
	    (:SAVE "file was saved")
	    (:COMPILE (IF (= PLURAL-P 1) "it was compiled" "they were compiled")))
	  (NOT SINGLE-BUFFER) (AND SINGLE-BUFFER (SEND SINGLE-BUFFER ':NAME))))

(DEFMETHOD (:REVERT MODIFIED-SECTIONS-BUFFER) ()
  (IF SINGLE-BUFFER
      (EDIT-CHANGED-SECTIONS-INTERNAL-1 SINGLE-BUFFER)
      (DOLIST (BUFFER *ZMACS-BUFFER-LIST*)
	(AND (SEND (SEND BUFFER ':GET ':MAJOR-MODE) ':COMPILATION-SUPPORTED)
	     (EDIT-CHANGED-SECTIONS-INTERNAL-1 BUFFER)))))


(DEFMETHOD (:LIST-SUBNODES MODIFIED-SECTIONS-BUFFER) (FIRST-NODE)
  (SCL:FORMAT-ITEM-LIST
    (LOOP FOR NODE FIRST FIRST-NODE THEN (NODE-NEXT NODE)
	  AS SECTION = (AND NODE (SEND NODE :SECTION))
	  AS BUFFER = (AND NODE (SEND NODE :BUFFER))
	  AS READ-TICK = (AND BUFFER (SEND-IF-HANDLES BUFFER :READ-TICK))
	  AS PATCH-TICK = (AND SECTION (CL:GETF (SECTION-NODE-PLIST SECTION) 'PATCH-TICK))
	  AS NODE-UNPATCHED = 
	     (AND SECTION
		  READ-TICK
		  (TYPEP SECTION 'SECTION-NODE)
		  (> (NODE-TICK SECTION) READ-TICK)
		  (OR (NOT PATCH-TICK)
		      (> (NODE-TICK SECTION) PATCH-TICK))
		  (NOT (NULL (SECTION-NODE-DEFINITION-LINE SECTION))))
	  WHILE NODE
	  COLLECT (LIST SECTION BUFFER
			(FORMAT NIL "~A~@[ (unpatched)~]"
				(SEND SECTION :DEFINITION-NAME)
				NODE-UNPATCHED)))
    :PRESENTATION-TYPE 'SECTION))

(DEFUN-IN-FLAVOR (EDIT-CHANGED-SECTIONS-INTERNAL-1 MODIFIED-SECTIONS-BUFFER) (BUFFER)
  (CHECK-INTERVAL-SECTIONS BUFFER)
  (LET ((CRITERION-TICK (GET-CRITERION-TICK BUFFER CRITERION))
	(MAJOR-MODE (SEND BUFFER :MAJOR-MODE)))
    (SEND MAJOR-MODE :MODIFIED-SECTIONS SELF BUFFER CRITERION-TICK)))

;;; Given buffer and "criterion", return tick for whole buffer, :COMPILE to
;;; say that each interval is different, or NIL to give up entirely.
(DEFUN GET-CRITERION-TICK (BUFFER CRITERION)
  (SELECTQ CRITERION
    (:READ
     (SEND BUFFER ':SEND-IF-HANDLES ':READ-TICK))
    (:SAVE
     (SEND BUFFER ':SEND-IF-HANDLES ':SAVE-TICK))
    (:COMPILE ':COMPILE)))

(DEFINE-SPECIAL-BUFFER-TYPE DUPLICATE-SECTIONS-BUFFER (BUFFER)
			    (HEADER-DESCRIPTION-1-SUBNODE-SPECIAL-PURPOSE-BUFFER-MIXIN
			      REUSABLE-POSSIBILITIES-SPECIAL-PURPOSE-BUFFER-MIXIN
			      SECTION-SUBNODE-SPECIAL-PURPOSE-BUFFER
			      SUBNODE-SPECIAL-PURPOSE-BUFFER)
			    :DUPLICATE-SECTIONS "Duplicate-Sections"
  :SETTABLE-INSTANCE-VARIABLES
  (:BUFFER-INIT-OPTIONS :SET-BUFFER))

(DEFMETHOD (:DESCRIPTION DUPLICATE-SECTIONS-BUFFER) ()
  (SEND BUFFER :NAME))

(DEFMETHOD (:HEADER-DESCRIPTION-1 DUPLICATE-SECTIONS-BUFFER) (STREAM PLURAL-P)
  (FORMAT STREAM "Duplicate Section~P in buffer ~A" PLURAL-P (SEND BUFFER ':NAME)))

(DEFMETHOD (:REVERT DUPLICATE-SECTIONS-BUFFER) ()
  (CHECK-INTERVAL-SECTIONS BUFFER)		;Incrementally resectionize
  (LET ((INFS (BUFFER-SECTIONS BUFFER)))	;--- needed for version-controlled buffers?
    (WHEN (NULL INFS)
      (BARF "~A doesn't seem to have any definitions in it" (SEND BUFFER ':NAME)))
    (SETQ INFS (LOOP FOR NODE IN INFS
		     COLLECT (CONS (SEND NODE ':DEFINITION-NAME) NODE)))
    (LOOP FOR ((NAM . NODE) . REST) ON INFS
	  WHEN (LOOP FOR (NNA) IN REST
		     THEREIS (EQUAL NNA NAM))
	  DO (SEND SELF :ADD-NODE 'SECTION-SUBNODE :SECTION NODE :BUFFER BUFFER))))


;(TV:ADD-TYPEOUT-ITEM-TYPE *TYPEOUT-COMMAND-ALIST* SECTION "Edit" EDIT-SECTION T
;			  "Edit this section.")

(SCL:DEFINE-PRESENTATION-TYPE SECTION ()
   :PRINTER ((SECTION-AND-BUFFER STREAM)
	     (CL:WRITE-STRING (OR (THIRD SECTION-AND-BUFFER)
				  (SEND (FIRST SECTION-AND-BUFFER) :DEFINITION-NAME))
			      STREAM)))

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR EDIT-SECTION
			     (SECTION "Edit" *ZMACS-COMTAB*
			      :GESTURE :SELECT)
			     (SECTION)
  `(EDIT-SECTION ,SECTION))

(DEFINE-PRESENTATION-TO-EDITOR-COMMAND-TRANSLATOR EDIT-SECTION-1
			     (SECTION "Edit" *ZMACS-COMTAB*
			      :GESTURE :EDIT-FUNCTION)	;Same command on this gesture, too,
			     (SECTION)			; to reduce confusion
  `(EDIT-SECTION ,SECTION))

;;--- Protocol for this typeout item changed
(DEFUN EDIT-SECTION (ITEM)
  (LET ((SECTION (FIRST ITEM))
	(BUFFER (SECOND ITEM)))
    (MAKE-BUFFER-CURRENT BUFFER)
    (RECENTER-WINDOW *WINDOW* ':START (INTERVAL-FIRST-BP SECTION))
    (MOVE-POINT (SECTION-NODE-DEFINITION-OR-FIRST-LINE SECTION) 0)
    NIL))

(DEFCOM COM-LIST-DEFINITIONS
	"Displays the definitions in a specified buffer.
It displays the list as a typeout window.  The individual definition names
are mouse-sensitive.
Without a numeric argument, it displays the definitions in the current
buffer without prompting.
With an argument, it reads a buffer name from the minibuffer." ()
  (LET ((BUFFER
	  (READ-BUFFER-NAME-OR-DEFAULT-WITHOUT-ARG "List definitions in buffer" *INTERVAL*)))
    (CHECK-INTERVAL-SECTIONS BUFFER)		;Incrementally resectionize
    (LET ((INFS (BUFFER-SECTIONS BUFFER)))
      (AND (NULL INFS)
	   (BARF "~A doesn't seem to have any definitions in it" (SEND BUFFER ':NAME)))	
      (FORMAT T "~&Definitions in ")
      (SCL:PRESENT BUFFER)
      (SEND (SEND BUFFER ':GET ':MAJOR-MODE) ':LIST-BUFFER-DEFINITIONS BUFFER INFS)
      DIS-NONE)))

(DEFMETHOD (:LIST-BUFFER-DEFINITIONS MAJOR-MODE :DEFAULT) (BUFFER INFS)
  (SCL:FORMAT-ITEM-LIST (LOOP FOR NODE IN INFS
			      COLLECT (LIST NODE BUFFER))
			:PRESENTATION-TYPE 'SECTION))



(DEFCOM COM-SECTIONIZE-BUFFER "Reparses a buffer to find its definitions.
When the file was first visited, the locations of definitions in the file
were saved for use by m-. (Edit Definition).  This command repeats the process,
to find functions that have since been added to the file.
Without a numeric argument, it sectionizes the current buffer without prompting.
With an argument, it prompts for a buffer name in the minibuffer." ()
  (LET ((BUFFER (READ-BUFFER-NAME-OR-DEFAULT-WITHOUT-ARG "Sectionize Buffer" *INTERVAL*)))
    (WITH-INTERVAL-READ-LOCKED (BUFFER)
      ;;--- (MAKE-BUFFER-CURRENT BUFFER)
      (SECTIONIZE-BUFFER BUFFER)))
  DIS-TEXT)
