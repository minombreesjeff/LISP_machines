;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Multiple-window commands.

(DEFCOM COM-TWO-WINDOWS "Shows two windows, selecting the bottom one.
Splits the frame into two editor windows and selects the bottom one.  With a
numeric argument, it makes the second window point to the same buffer that the
first window does." ()
  (SWITCH-WINDOWS *NUMERIC-ARG-P* 2)
  DIS-NONE)

(DEFCOM COM-VIEW-TWO-WINDOWS "Shows two windows, selecting the top one.
Splits the frame into two editor windows and selects the top one.  With a
numeric argument, it makes the second window point to the same buffer that the
first window does." ()
  (SWITCH-WINDOWS *NUMERIC-ARG-P* 1)
  DIS-NONE)

;;; Note that this is designed to ask the question before doing any display
(DEFCOM COM-MODIFIED-TWO-WINDOWS
	"Selects a buffer, file or definition in the other window.
This combines the functions of splitting the frame and selecting contents for
the second window.  It prompts for the type of contents you want for the
second window.  Then it reads the name of the file, buffer, or definition that you
want to select for that window.  " ()
  (SELECTQ (FQUERY-WITH-MINI-BUFFER-HISTORY
		   '(:CHOICES (((:BUFFER "Buffer") #/B)
			       ((:FILE "File") #/F)
			       ((:DEFINITION "Definition") #/D #/T #/.)
			       ((:JUMP "Jump to register") #/J)))
		   "Select what in the other window? ")
    (:BUFFER
     (LET ((BUFFER (READ-BUFFER-NAME "Select buffer" ':OTHER)))
       (SWITCH-WINDOWS T)
       (MAKE-BUFFER-CURRENT BUFFER)
       DIS-TEXT))
    (:FILE
     (LET ((PATHNAME (ACCEPT-DEFAULTED-PATHNAME "Find file" (PATHNAME-DEFAULTS))))
       (SWITCH-WINDOWS)
       (FIND-FILE PATHNAME T :QUERY))
     (MAYBE-DISPLAY-DIRECTORY ':READ)
     DIS-TEXT)
    (:DEFINITION
     (LET ((FSPECS (READ-FUNCTION-SPECS-TO-EDIT)))
       (SWITCH-WINDOWS)
       (SEND *ZMACS-COMMAND-LOOP* ':SETUP-FUNCTION-SPECS-TO-EDIT FSPECS)
       DIS-TEXT))
    (:JUMP
     (LET ((REG (GET-REGISTER-NAME "Jump to position saved in register: ")))
       (LET ((POSITION (GET REG 'POINT)))
	 (WHEN (NULL POSITION)
	   (BARF "The register ~A doesn't point anywhere." REG))
	 (SWITCH-WINDOWS)
	 (POINT-PDL-MOVE (FIRST POSITION) (SECOND POSITION))
	 DIS-TEXT)))))

(DEFUN SWITCH-WINDOWS (&OPTIONAL CHANGE-INTERVAL (ONE-TO-SELECT 2)
		       &AUX TOP-WINDOW BOTTOM-WINDOW)
  (MULTIPLE-VALUE (TOP-WINDOW BOTTOM-WINDOW)
    (SEND (WINDOW-FRAME *WINDOW*) ':TWO-EDITOR-WINDOWS))
  (WHEN CHANGE-INTERVAL
    (SEND *CURRENT-COMMAND-LOOP* ':SET-WINDOW-INTERVAL BOTTOM-WINDOW *INTERVAL*)
    (MOVE-BP (WINDOW-POINT BOTTOM-WINDOW) (POINT))
    (MUST-REDISPLAY BOTTOM-WINDOW DIS-TEXT))
  (COND ((AND (WINDOW-EXPOSED-P TOP-WINDOW) (WINDOW-EXPOSED-P BOTTOM-WINDOW))
	 (COM-OTHER-WINDOW))
	(T
	 (TWO-WINDOWS TOP-WINDOW BOTTOM-WINDOW)
	 (LET ((WINDOW (IF (= ONE-TO-SELECT 1) TOP-WINDOW BOTTOM-WINDOW)))
	   (IF (EQ WINDOW *WINDOW*) (SELECT-WINDOW WINDOW)
	       (MAKE-WINDOW-CURRENT WINDOW))))))

(DEFCOM COM-ONE-WINDOW
	"Returns editor frame to showing only one window.  
It expands one window to use the whole frame.  With a numeric argument, it
expands the other window to use the whole frame.  Which window is defaultly
expanded is controlled by the variable One Window Default." ()
  (MULTIPLE-VALUE-BIND (TOP-WINDOW BOTTOM-WINDOW)
      (SEND (WINDOW-FRAME *WINDOW*) ':TWO-EDITOR-WINDOWS)
    (LET* ((OTHER-WINDOW (OTHER-WINDOW))
	   (WINDOW
	     (IF *NUMERIC-ARG-P*
		 (SELECTQ *ONE-WINDOW-DEFAULT*
		   (:TOP BOTTOM-WINDOW)
		   (:BOTTOM TOP-WINDOW)
		   (:CURRENT OTHER-WINDOW)
		   (:OTHER *WINDOW*))
	       (SELECTQ *ONE-WINDOW-DEFAULT*
		 (:TOP TOP-WINDOW)
		 (:BOTTOM BOTTOM-WINDOW)
		 (:CURRENT *WINDOW*)
		 (:OTHER OTHER-WINDOW)))))
      (OR WINDOW (BARF "There is only one window"))
      (PREPARE-WINDOW-FOR-REDISPLAY WINDOW)
      (OR (EQ WINDOW *WINDOW*) (MAKE-WINDOW-CURRENT WINDOW))
      (DOLIST (W *WINDOW-LIST*)
	(WHEN (WINDOW-EXPOSED-P W)
	  (UNLESS (EQ W WINDOW)
	    ;; Put the state of each window getting deexposed back into its buffer
	    (LET ((BUFFER (WINDOW-INTERVAL W)))
	      (WHEN (TYPEP BUFFER 'BUFFER)
		(MOVE-BP (BUFFER-SAVED-POINT BUFFER) (WINDOW-POINT W))
		(MOVE-BP (BUFFER-SAVED-MARK BUFFER) (WINDOW-MARK W))
		(MOVE-BP (BUFFER-SAVED-WINDOW-START-BP BUFFER) (WINDOW-START-BP W)))))))
      (MAKE-WINDOW-FULL-SCREEN WINDOW))
    DIS-NONE))
                                               
(DEFCOM COM-OTHER-WINDOW "Moves point to the other window." ()
  (LET ((WINDOW (OTHER-WINDOW (AND *NUMERIC-ARG-P* *NUMERIC-ARG*))))
    (IF WINDOW
	(ROTATE-TO-OTHER-WINDOW WINDOW)
	(MULTIPLE-VALUE (NIL WINDOW)
	  (FUNCALL (WINDOW-FRAME *WINDOW*) ':TWO-EDITOR-WINDOWS))
	(OR (WINDOW-INTERVAL WINDOW) (BARF "Only one window"))
	(MAKE-WINDOW-CURRENT WINDOW)
	(MAKE-WINDOW-FULL-SCREEN WINDOW)))
  DIS-BPS)

(DEFUN ROTATE-TO-OTHER-WINDOW (WINDOW)
  (SETQ *WINDOW-LIST* (NCONC (DELQ *WINDOW* *WINDOW-LIST*) (NCONS *WINDOW*)))
  (MAKE-WINDOW-CURRENT WINDOW))

(DEFCOM COM-SCROLL-OTHER-WINDOW "Scrolls the other window up several lines.
By default, it scrolls the same way as c-V.  With no argument, it scrolls a
full screen.  A numeric argument tells it how many lines to scroll -- a
positive number for the usual direction, a negative number for the reverse
direction.  " (KM)
  (SCROLL-OTHER-WINDOW-INTERNAL NIL)
  DIS-NONE)

(DEFCOM COM-SCROLL-OTHER-WINDOW-BACKWARD "Scrolls the other window down several lines.
By default, it scrolls the same way as m-V.  With no argument, it scrolls a
full screen.  A numeric argument tells it how many lines to scroll -- a
positive number for the usual direction, a negative number for the reverse
direction.  " (KM)
  (SCROLL-OTHER-WINDOW-INTERNAL T)
  DIS-NONE)

(DEFUN SCROLL-OTHER-WINDOW-INTERNAL (BACKWARD)
  (LET ((WINDOW (OTHER-WINDOW)))
    (OR WINDOW (BARF "There is only one window"))
    (PREPARE-WINDOW-FOR-REDISPLAY WINDOW)
    (RECENTER-WINDOW-RELATIVE WINDOW
			      (IF BACKWARD (MINUS *NUMERIC-ARG*) *NUMERIC-ARG*)
			      (IF (MEMQ *NUMERIC-ARG-P* '(:DIGITS :CONTROL-U))
				  :LINE :SCREEN))))

(DEFCOM COM-SCROLL-TYPEOUT-WINDOW
	"Expose and scroll the typeout window forward one screenful."
	()
  (SCROLL-TYPEOUT-WINDOW *NUMERIC-ARG*))

(DEFCOM COM-SCROLL-BACK-TYPEOUT-WINDOW
	"Expose and scroll the typeout window back one screenful."
	()
  (SCROLL-TYPEOUT-WINDOW (- *NUMERIC-ARG*)))

(DEFUN SCROLL-TYPEOUT-WINDOW (N)
  (SEND *TYPEOUT-WINDOW* :OUTPUT-HOLD-EXCEPTION)
  (SEND *TYPEOUT-WINDOW* :MAKE-INCOMPLETE)
  (LET ((RUBOUT-HANDLER NIL))			;Horrible kludge.
    (CP::SCROLL-WINDOW-COMMAND-INTERNAL :SCREEN N :Y *TYPEOUT-WINDOW*))
  DIS-NONE)

(DEFCOM COM-GROW-WINDOW
	"Changes the size of the current window by some number of lines.
Indicate how much to change the size by using a numeric argument.  Expand the
window by using a positive number; shrink the window by using a negative
number.  " (KM)
  (MULTIPLE-VALUE-BIND (TOP-WINDOW BOTTOM-WINDOW)
      (FUNCALL (WINDOW-FRAME *WINDOW*) ':TWO-EDITOR-WINDOWS (WINDOW-SHEET *WINDOW*))
    (OR (WINDOW-EXPOSED-P BOTTOM-WINDOW) (BARF "There is only one window"))
    (PREPARE-WINDOW-FOR-REDISPLAY TOP-WINDOW)
    (PREPARE-WINDOW-FOR-REDISPLAY BOTTOM-WINDOW)
    (LET ((NLINES (IF (EQ *WINDOW* TOP-WINDOW) *NUMERIC-ARG* (- *NUMERIC-ARG*))))
      (GROW-WINDOW TOP-WINDOW BOTTOM-WINDOW NLINES)))
  DIS-NONE)

;;; This tries to find another window to use
;;; If it doesn't find one, it returns NIL
(DEFUN OTHER-WINDOW (&OPTIONAL N)
  (LET ((WINDOWS (LOOP FOR WINDOW IN *WINDOW-LIST*
		       WHEN (WINDOW-EXPOSED-P WINDOW)
		       COLLECT WINDOW)))
    (IF N (NTH (MOD N (LENGTH WINDOWS)) WINDOWS)
	(WHEN (NOT (NULL (CDR WINDOWS)))
	  (SETQ WINDOWS (SORT WINDOWS #'(LAMBDA (W-1 W-2)
					  (< (SEND (WINDOW-SHEET W-1) ':Y-OFFSET)
					     (SEND (WINDOW-SHEET W-2) ':Y-OFFSET)))))
	  (LET ((L (MEMQ *WINDOW* WINDOWS)))
	    (IF (CDR L) (CADR L) (CAR WINDOWS)))))))

;;;--- more work for version control
(DEFCOM COM-TWO-WINDOWS-SHOWING-REGION "Makes two windows on the same buffer.
The top one showing the current region." ()
  (DEFINITION-REGION (BP1 BP2 NIL NIL T)
    (MULTIPLE-VALUE-BIND (TOP-WINDOW BOTTOM-WINDOW)
	(FUNCALL (WINDOW-FRAME *WINDOW*) ':TWO-EDITOR-WINDOWS)
      (SPLIT-SCREEN-BETWEEN-TWO-WINDOWS TOP-WINDOW BOTTOM-WINDOW (COUNT-LINES BP1 BP2 T))
      (SET-WINDOW-INTERVAL TOP-WINDOW *INTERVAL*)
      (RECENTER-WINDOW TOP-WINDOW ':START BP1)
      (MOVE-BP (WINDOW-POINT TOP-WINDOW) BP2)
      (SET-WINDOW-INTERVAL BOTTOM-WINDOW *INTERVAL*)
      (MOVE-BP (WINDOW-POINT BOTTOM-WINDOW) BP1)
      (MAKE-WINDOW-CURRENT BOTTOM-WINDOW)))
  DIS-TEXT)

(DEFVAR *SPLIT-SCREEN-WINDOW-LIST*)

(DEFCOM COM-SPLIT-SCREEN "Makes several windows split among the buffers as specified." ()
  (LET* ((FRAME (WINDOW-FRAME *WINDOW*))
	 (BUFFER-LIST (SPLIT-SCREEN-AMONG-BUFFERS-VIA-MENUS FRAME))
	 WINDOW-LIST)
    (COND (BUFFER-LIST
	   (SETQ WINDOW-LIST (SPLIT-SCREEN-AMONG-BUFFERS-DO-IT FRAME BUFFER-LIST))
	   ;; Arrange for the current buffer to stay current if possible
	   (LET ((N (FIND-POSITION-IN-LIST *INTERVAL* BUFFER-LIST)))
	     (UNLESS (OR (NULL N) (= N 0))
	       (SWAPF (NTH N BUFFER-LIST) (CAR BUFFER-LIST))
	       (SWAPF (NTH N WINDOW-LIST) (CAR WINDOW-LIST))))
	   (DO ((BL BUFFER-LIST (CDR BL)))
	       ((NULL BL))
	     (AND (TYPEP (CAR BL) 'FS:PATHNAME)
		  (MULTIPLE-VALUE-BIND (NIL BUF)
		      (FIND-FILE (CAR BL) NIL :QUERY)
		    (SETF (CAR BL) BUF))))
	   (MAKE-WINDOW-CURRENT (CAR WINDOW-LIST))
	   (MAKE-BUFFER-CURRENT (CAR BUFFER-LIST))
	   (DO ((BL BUFFER-LIST (CDR BL))
		(WL WINDOW-LIST (CDR WL)))
	       ((NULL BL))
	     (SET-WINDOW-BUFFER (CAR WL) (CAR BL))))))
  DIS-TEXT)




(defcom com-compare-windows "Compare two windows, starting at current point in each,
stopping at first difference between them, moving point in each window to that difference.
If there are more than two windows, you can specify which with a numeric arg.
For instance, to compare the top window with the third one down, use 13." ()
  (multiple-value-bind (window1 window2) (get-two-windows-to-compare)
    (let* ((first (window-point window1))
	  (second (window-point window2))
	  (first-buffer (bp-buffer-internal first))
	  (second-buffer (bp-buffer-internal second))
	  (last-bp-1 (interval-last-bp (window-interval window1)))
	  (last-bp-2 (interval-last-bp (window-interval window2))))
      (flet ((linel (line last-bp)
	       (if (eq line (bp-line last-bp))
		   (bp-index last-bp)
		   (line-length line))))
	(flet ((point-pusher ()
		 (point-pdl-push (window-point window1) window1)
		 (point-pdl-push (window-point window2) window2 () T)
		 (must-redisplay window1 dis-bps)
		 (must-redisplay window2 dis-bps))
	       (move-bps-to-point-of-difference (equal-text)
		 (loop with line1 = (bp-line first)
		       with line2 = (bp-line second)
		       with n1 = (linel line1 LAST-BP-1)
		       with n2 = (linel line2 last-bp-2)
		       for i1 from (bp-index first)
		       for i2 from (bp-index second)
		       while (and (< i1 n1) (< i2 n2)
				  (char-equal (aref line1 i1) (aref line2 i2)))
		       finally (progn (move-bp first line1 i1)
				      (move-bp second line2 i2)
				      (typein-line
					(if (and ( i1 n1) ( i2 n2))
					    equal-text
					    "Points moved to location of difference"))
				      (return T)))))
	  (if (not (string-equal (bp-line first) (bp-line second)
				 (bp-index first) (bp-index second)
				 (linel (bp-line first) last-bp-1)
				 (linel (bp-line second) last-bp-2)))
	      (progn
		(point-pusher)
		(move-bps-to-point-of-difference "Failed to find difference"))
	      (let ((line1 (bp-line first))
		    (line2 (bp-line second))
		    (last-line1 (bp-line last-bp-1))
		    (last-index1 (bp-index last-bp-1))
		    (last-line2 (bp-line last-bp-2))
		    (last-index2 (bp-index last-bp-2)))
		(loop INITIALLY (WHEN (OR (EQ LINE1 LAST-LINE1) (EQ LINE2 LAST-LINE2))
				  (RETURN))
		      do (setq line1 (line-next-in-buffer line1 :buffer first-buffer)
			       line2 (line-next-in-buffer line2 :buffer second-buffer))
		      while (and (neq line1 last-line1)
				 (neq line2 last-line2)
				 (string-equal line1 line2)))
		(cond ((and (eq line1 last-line1) (eq line2 last-line2)
			    (string-equal line1 line2 0 0 last-index1 last-index2))
		       (typein-line "No differences encountered."))
		      (T (point-pusher)
			 (IF (OR (EQ LINE1 LAST-LINE1) (EQ LINE2 LAST-LINE2))
			     (TYPEIN-LINE "End of one interval")
			   (move-bp first line1 0)
			   (move-bp second line2 0)
			   (move-bps-to-point-of-difference "End of one interval"))))))))))
    dis-bps)

(defun get-two-windows-to-compare ()
  (let* ((frame-panes (send (window-frame *window*) :exposed-inferiors))
	 (zmacs-windows (loop for pane in frame-panes
			      when (typep pane 'zmacs-window-pane)
				collect (send pane :zwei-window))))
    (unless ( (length zmacs-windows) 2)
      (barf "Really you need split screen with two windows ~
					for this to be useful"))
    (setq zmacs-windows (sort zmacs-windows
			      (lambda (w1 w2)
				(< (send (window-sheet w1) :y-offset)
				   (send (window-sheet w2) :y-offset)))))
    (if *numeric-arg-p*
	(multiple-value-bind (tens units) (floor *numeric-arg* 10.)
	  (decf tens)
	  (decf units)
	  (let ((nwindows (length zmacs-windows)))
	    (unless (and ( 0 tens) (< tens nwindows)
			 ( 0 units) (< units nwindows))
	      (barf "Numeric arg ~d out of range 11 - ~d~d" nwindows nwindows)))
	  (values (nth tens zmacs-windows)
		  (nth units zmacs-windows)))
	(values (first zmacs-windows) (second zmacs-windows)))))
