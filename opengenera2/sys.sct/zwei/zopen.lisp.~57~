;;-*- Syntax: Zetalisp;D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI") 0Base: 8;  mode: lisp; package: zwei; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; This is a new interface for doing I/O from editor streams.  Provides a keyword-oriented
;; inteface to interval streams, from high-level I/O into a named buffer, down to hacking
;; BP's and intervals.

;; Analgous to OPEN for ZMACS buffers.  Takes a interval, buffer name, ZWEI window,
;; or pathname, and returns a bidirectional stream to that buffer.
;;
;; Keyword Options:
;;     KEYWORD	      VALUE	DESCRIPTION
;;
;;   :BUFFER-NAME    <name>     Full name of a buffer (see :CREATE-P)
;;   :PATHNAME       pathname   Something that can be coerced to a pathname by
;;				FS:PARSE-PATHNAME  
;;   :INTERVAL    Zwei-interval A Zwei interval
;;   :WINDOW         object     Zwei "window"
;;
;;   :CREATE-P			What to do when specified buffer doesn't exist
;;		      :WARN	The default.  Tell when creating the buffer
;;		      T		Create without asking
;;		      :ASK	Ask before creating
;;		      :ERROR	Signal an error if buffer doesn't exist
;;		      		provides proceed types for creating or supplying an
;;				alternate
;;
;;   :KILL	       T	Delete all the text first
;;		       NIL
;;   :START			Where to start I/O
;;		      :BEGINNING Start at beginning of buffer.
;;		      :END	Start at end of buffer.
;;		      :APPEND	Same as :END
;;		      a BP	A BP into the buffer
;;              <add> :STRING-SEARCH and friends (where to start, etc.)
;;		      :POINT    Start at point.  Point does not move.
;;		      :MARK	Start at mark.  Mark does not move.
;;		      :REGION   Start and end at point and mark.
;;
;;   :END           		Where to end I/O
;;		      :END      end at the end of the buffer
;;		      :POINT    End at point.
;;		      :MARK	End at mark.
;;		      a BP      A BP into the buffer.
;;				If a BP is supplied for START and END
;;
;;   :ORDERED-P			says if :START and :END are guarenteed in forward order
;;
;;   :DEFAULTS	      		pathname defaults to merge against.  Provided for reprompting
;;				to merge against.
;;
;;   :LOAD-P			If true, load the file into the editor.  Only works from
;;				within ZMACS.
;;   :NO-REDISPLAY    T/NIL	If true, suppress redisplay on exit
;;   :SET-POINT       T/NIL	If true, move point in the buffer on exit.
;;   :BUFFER-MAJOR-MODE a keyword

;; Also, you probably should be able to take a window, and do output to
;; it, with redisplay happening at appropriate points, whenever those
;; might be.

;;; NOTE: If you change this arglist, be sure to update the declaration
;;; on WITH-EDITOR-STREAM.
(DEFUN OPEN-EDITOR-STREAM (&REST ARGS
			   &KEY (CREATE-P ':WARN) (START ':END)
			   (DEFAULTS NIL) (LOAD-P NIL) (KILL NIL)
			   (END NIL) (HACK-FONTS NIL)
			   (ORDERED-P NIL)
			   (BUFFER-NAME NIL) (INTERVAL NIL) (WINDOW NIL) (PATHNAME NIL)
			   (BUFFER-MAJOR-MODE NIL) NO-REDISPLAY
			   SET-POINT
			   INTERVAL-STREAM
			   (INTERVAL-STREAM-FLAVOR 'INTERVAL-STREAM)
			   &AUX STREAM)
  (IGNORE CREATE-P START END DEFAULTS LOAD-P KILL NIL HACK-FONTS ORDERED-P BUFFER-NAME
	  INTERVAL WINDOW PATHNAME BUFFER-MAJOR-MODE NO-REDISPLAY SET-POINT)
  (MULTIPLE-VALUE-BIND (START-BP END-BP)
      (CL:APPLY #'SETUP-OPEN-EDITOR-STREAM ARGS)
    (SETQ STREAM (OR INTERVAL-STREAM (OPEN-INTERVAL-STREAM START-BP END-BP T
							   :FLAVOR INTERVAL-STREAM-FLAVOR)))
    (SEND STREAM ':SET-BP START-BP))
  STREAM)

(DEFUN SETUP-OPEN-EDITOR-STREAM
       (&KEY (CREATE-P ':WARN) (START ':END)
	(DEFAULTS NIL) (LOAD-P NIL) (KILL NIL)
	(END NIL) (HACK-FONTS NIL)
	(ORDERED-P NIL)
	(BUFFER-NAME NIL) (INTERVAL NIL) (WINDOW NIL) (PATHNAME NIL)
	(BUFFER-MAJOR-MODE NIL) NO-REDISPLAY
	SET-POINT
	INTERVAL-STREAM-FLAVOR
	&AUX START-BP END-BP)
  (DECLARE (VALUES START-BP END-BP))
  "finds or makes the buffer, and calculates the bp's for the stream"
  (IGNORE NO-REDISPLAY SET-POINT HACK-FONTS INTERVAL-STREAM-FLAVOR)
						1; handled by with-open-editor-stream
0						1;if at all.
0  ;; If :PATHNAME-P, canonicalize name
  (MULTIPLE-VALUE (INTERVAL BUFFER-NAME WINDOW)
    (FIND-OR-CREATE-BUFFER INTERVAL BUFFER-NAME PATHNAME WINDOW START DEFAULTS
			   CREATE-P LOAD-P
			   (AND BUFFER-MAJOR-MODE `(:MAJOR-MODE ,BUFFER-MAJOR-MODE))))
  (SELECTQ END
    (NIL)
    (:END (SETQ END-BP (SEND INTERVAL ':LAST-BP)
		ORDERED-P T))
    (:POINT (IF (AND (VARIABLE-BOUNDP *WINDOW*)
		     (EQ (WINDOW-INTERVAL *WINDOW*) INTERVAL))
		;; POINT is cached in  the window rather than the buffer
		(SETQ END-BP (WINDOW-POINT *WINDOW*))
		(LET ((POINT (SEND INTERVAL :SEND-IF-HANDLES :SAVED-POINT)))
		  (IF POINT
		      (SETQ END-BP POINT)
		      (CHECK-WINDOW-KEY WINDOW END)
		      (SETQ END-BP (WINDOW-POINT WINDOW))))))
    (:MARK (IF (AND (VARIABLE-BOUNDP *WINDOW*)
		    (EQ (WINDOW-INTERVAL *WINDOW*) INTERVAL))
	       ;; MARK is cached in  the window rather than the buffer
	       (SETQ END-BP (WINDOW-MARK *WINDOW*))
	       (LET ((MARK (SEND INTERVAL :SEND-IF-HANDLES :SAVED-MARK)))
		 (IF MARK
		     (SETQ END-BP MARK)
		     (CHECK-WINDOW-KEY WINDOW END)
		     (SETQ END-BP (WINDOW-MARK WINDOW))))))
    (OTHERWISE
     (IF (LISTP END)
	 (SETQ END-BP (CHECK-BP-FOR-BUFFER END INTERVAL)))))
  (SELECTQ START
    (:POINT (IF (AND (VARIABLE-BOUNDP *WINDOW*)
		     (EQ (WINDOW-INTERVAL *WINDOW*) INTERVAL))
		;; POINT is cached in  the window rather than the buffer
		(SETQ START-BP (WINDOW-POINT *WINDOW*))
		(LET ((POINT (SEND INTERVAL :SEND-IF-HANDLES :SAVED-POINT)))
		  (IF POINT
		      (SETQ START-BP POINT)
		      (CHECK-WINDOW-KEY WINDOW START)
		      (SETQ START-BP (WINDOW-POINT WINDOW))))))
    (:MARK (IF (AND (VARIABLE-BOUNDP *WINDOW*)
		    (EQ (WINDOW-INTERVAL *WINDOW*) INTERVAL))
	       ;; MARK is cached in  the window rather than the buffer
	       (SETQ START-BP (WINDOW-MARK *WINDOW*))
	       (LET ((MARK (SEND INTERVAL :SEND-IF-HANDLES :SAVED-MARK)))
		 (IF MARK
		     (SETQ START-BP MARK)
		     (CHECK-WINDOW-KEY WINDOW START)
		     (SETQ START-BP (WINDOW-POINT WINDOW))))))
    (:REGION
     (CHECK-WINDOW-KEY WINDOW START)
     (IF END
	 (FERROR ":END ~S specified with :START :REGION" END))
     (IF (NOT (WINDOW-MARK-P WINDOW))
	 (BARF "There is no region."))
     (SETQ START-BP (WINDOW-POINT WINDOW)
	   END-BP (WINDOW-MARK WINDOW)))
    (:BEGINNING (SETQ START-BP (SEND INTERVAL ':FIRST-BP)
		      ORDERED-P T))
    ((:END :APPEND) (SETQ START-BP (SEND INTERVAL ':LAST-BP)
			  ORDERED-P T))
    (OTHERWISE
     (IF (LISTP START)
	 (SETQ START-BP (CHECK-BP-FOR-BUFFER START INTERVAL))
	 (FERROR "~S is not a legal value for the :START option to OPEN-EDITOR-STREAM"
		 START))))
  (UNLESS START-BP
    (SETQ START-BP (SEND INTERVAL ':FIRST-BP)
	  ORDERED-P T))
  (UNLESS END-BP
    (SETQ END-BP (SEND  INTERVAL ':LAST-BP)
	  ORDERED-P T))
  (IF (NOT ORDERED-P)
      (ORDER-BPS START-BP END-BP))
  (WHEN KILL
    (DELETE-INTERVAL INTERVAL))
  (VALUES START-BP END-BP))


(defun open-editor-stream-style-checker (form)
  (destructuring-bind (function . keyword-args) form
    (ignore function)
    (when (neq (cl:getf keyword-args :hack-fonts form) form)
      ;I.e. it's there at all, :OBSOLETE-KEYWORD NIL too.
       (compiler:warn '(:obsolete)
		      ":HACK-FONTS is an obsolete keyword argument to OPEN-EDITOR-STREAM."))))

(putprop 'open-editor-stream 'open-editor-stream-style-checker 'compiler:style-checker)


(DEFUN CHECK-WINDOW-KEY (WINDOW KEY)
  (IF (NULL WINDOW)
      (BARF "Cannot determine window to get ~A from" KEY)))


;;; This needs a :create-p :must, that results in an error if a new buffer is not created.

(DEFUN FIND-EDITOR-BUFFER (&KEY (CREATE-P NIL)
			   (DEFAULTS NIL) (LOAD-P NIL)
			   (BUFFER-NAME NIL) (INTERVAL NIL) (WINDOW NIL) (PATHNAME NIL)
			   (BUFFER-MAJOR-MODE NIL))
  "Finds a ZMACS buffer with specified characteristics.
Returns the buffer object."
  (FIND-OR-CREATE-BUFFER INTERVAL BUFFER-NAME PATHNAME WINDOW :BEGINNING DEFAULTS
			 CREATE-P LOAD-P
			 (AND BUFFER-MAJOR-MODE `(:MAJOR-MODE ,BUFFER-MAJOR-MODE))))


;;; DEFMACRO of WITH-OPEN-EDITOR-STREAM moved to SYS:ZWEI;COMC, which has a client.
;;; We should find a better ordering of things later.

(DEFFLAVOR BUFFER-NOT-FOUND ((PATHNAME NIL) (NAME NIL) DEFAULTS CREATE-P LOAD-P) (ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT BUFFER-NOT-FOUND) (STREAM)
  (FORMAT STREAM "The buffer ~:[named~;for pathname~] /"~A/" was not found."
	  (NULL NAME) (OR NAME PATHNAME)))

(DEFMETHOD (:PROCEED BUFFER-NOT-FOUND :CHOOSE-ANOTHER-BUFFER) (&OPTIONAL NEW-NAME)
  (IF (NOT NEW-NAME)
      (SETQ NEW-NAME
	    (COND (NAME (PROMPT-AND-READ ':STRING
			       "Supply another buffer name to use instead of ~A:  " NAME))
		  (T (PROMPT-AND-READ ':PATHNAME
				      "Supply another pathname to use instead of ~A~
				  ~:[~; (Default = ~A)~]:  "
				      NAME DEFAULTS (FS:DEFAULT-PATHNAME DEFAULTS)))))
      (FIND-OR-CREATE-BUFFER NIL (AND NAME NEW-NAME)
				 (AND PATHNAME (FS:PARSE-PATHNAME NEW-NAME))
				 NIL NIL
				 DEFAULTS
				 CREATE-P LOAD-P NIL)))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE BUFFER-NOT-FOUND :CHOOSE-ANOTHER-BUFFER) (STREAM)
  (FORMAT STREAM
	  "Supply another ~:[buffer name~;pathname~] to use instead."
	  (NULL NAME)))

(DEFMETHOD (:PROCEED BUFFER-NOT-FOUND :CREATE-BUFFER) ()
  (FIND-OR-CREATE-BUFFER NIL NAME PATHNAME NIL NIL DEFAULTS T LOAD-P NIL))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE BUFFER-NOT-FOUND :CREATE-BUFFER) (STREAM)
  (IF (NULL NAME)
      (FORMAT STREAM "Create a buffer for file /"~A/"~:[~; and load it from the file~]."
	      PATHNAME LOAD-P)
    (FORMAT STREAM "Create a buffer named /"~A/"." NAME)))

(COMPILE-FLAVOR-METHODS BUFFER-NOT-FOUND)

;; Find a buffer, handling CREATE-P.

(DEFUN FIND-OR-CREATE-BUFFER (INTERVAL NAME PATHNAME WINDOW START DEFAULTS
			      CREATE-P LOAD-P CREATE-OPTIONS)
  (COND (INTERVAL (VALUES INTERVAL (SEND INTERVAL ':SEND-IF-HANDLES ':NAME) WINDOW))
	(NAME
	 (OR (SETQ INTERVAL (FIND-BUFFER-NAMED NAME (EQ CREATE-P T) CREATE-OPTIONS))
	     (SELECTQ CREATE-P
	       (:ASK (IF (FQUERY NIL "There is no ZMACS buffer named /"~A/".  Create it?  "
				 NAME)
			 (MULTIPLE-VALUE (INTERVAL NAME WINDOW)
			   (FIND-OR-CREATE-BUFFER NIL NAME PATHNAME WINDOW START DEFAULTS
						  ':WARN LOAD-P CREATE-OPTIONS))
			 (MULTIPLE-VALUE (INTERVAL NAME WINDOW)
			   (FIND-OR-CREATE-BUFFER NIL NAME PATHNAME WINDOW START DEFAULTS
						  ':ERROR LOAD-P CREATE-OPTIONS))))
	       (:WARN (FORMAT QUERY-IO "~&[Creating ZMACS Buffer /"~A/".]" NAME)
		(MULTIPLE-VALUE (INTERVAL NAME WINDOW)
		  (FIND-OR-CREATE-BUFFER NIL NAME PATHNAME WINDOW START DEFAULTS T
					 LOAD-P CREATE-OPTIONS)))
	       (:ERROR (SETQ NAME
			     (SIGNAL 'BUFFER-NOT-FOUND
				     ':NAME NAME ':DEFAULTS DEFAULTS ':CREATE-P CREATE-P
				     ':LOAD-P LOAD-P))
		(MULTIPLE-VALUE (INTERVAL NAME WINDOW)
		  (FIND-OR-CREATE-BUFFER NIL NAME PATHNAME WINDOW START DEFAULTS T
					 LOAD-P CREATE-OPTIONS)))))
	 (VALUES INTERVAL NAME WINDOW))
	(PATHNAME (VALUES (FIND-BUFFER-WITH-PATHNAME PATHNAME DEFAULTS CREATE-P LOAD-P)
			  NAME WINDOW))
	(WINDOW (VALUES (WINDOW-INTERVAL WINDOW) NAME WINDOW))
	;;--- BP-BUFFER ?? hunoz
	((AND START (LISTP START)) (VALUES (BP-TOP-LEVEL-NODE START) NAME WINDOW))
	(T (FERROR "No buffer name, pathname, window, interval, or BP was supplied"))))

;; Given a pathname or string, get the corresponding buffer, optionally loading
;; and setting defaults

(DEFUN FIND-BUFFER-WITH-PATHNAME (PATHNAME DEFAULTS CREATE-P LOAD-P &AUX BUFFER)
;; fake out FIND-FILE into thinking it's in the editor, since everybody keeps making
  ;; it depend on these things...
  (LET ((*TYPEIN-WINDOW* (IF (VARIABLE-BOUNDP *TYPEIN-WINDOW*)
			     *TYPEIN-WINDOW*
			   QUERY-IO)))
    (SETQ PATHNAME
	  (FS:MERGE-PATHNAMES PATHNAME (OR DEFAULTS FS:*DEFAULT-PATHNAME-DEFAULTS*)))
    (COND (LOAD-P
	   (LET-IF (NOT (VARIABLE-BOUNDP *TYPEIN-WINDOW*))
		   ((*TYPEIN-WINDOW* QUERY-IO)
		    (*TYPEOUT-WINDOW* QUERY-IO))
	     (MULTIPLE-VALUE (NIL BUFFER)
	       (FIND-FILE PATHNAME NIL)))
	   BUFFER)
	  ((FIND-BUFFER-NAMED PATHNAME))
	  (T (SELECTQ CREATE-P
	       (:ASK (IF (FQUERY NIL "There is no ZMACS buffer for file /"~A/".  Create it?  "
				 PATHNAME)
			 (FIND-BUFFER-WITH-PATHNAME PATHNAME DEFAULTS ':WARN LOAD-P)
		       (SIGNAL 'BUFFER-NOT-FOUND ':NAME PATHNAME ':DEFAULTS DEFAULTS
			       ':CREATE-P CREATE-P ':LOAD-P LOAD-P)))
	       (:WARN (FORMAT QUERY-IO "~&[Creating ZMACS Buffer for file /"~A/".]" PATHNAME)
		(FIND-BUFFER-WITH-PATHNAME PATHNAME DEFAULTS T LOAD-P))
	       (:ERROR (SIGNAL 'BUFFER-NOT-FOUND
			       ':PATHNAME PATHNAME ':DEFAULTS DEFAULTS ':CREATE-P CREATE-P
			       ':LOAD-P LOAD-P))
	       (NIL NIL)
	       (OTHERWISE (MAKE-BUFFER 'FILE-BUFFER
				       ':NAME (FUNCALL PATHNAME ':STRING-FOR-EDITOR)
				       ':PATHNAME PATHNAME))))))) 


;; Check to be sure a given BP is in the interval we expect to be hacking

(DEFUN CHECK-BP-FOR-BUFFER (BP BUFFER &OPTIONAL (NODE (BP-NODE BP)))
  (IF (NEQ NODE BUFFER)
      (IF (NULL NODE)
	  (FERROR "~S is not a ZWEI pointer into ~A" BP BUFFER)
	(CHECK-BP-FOR-BUFFER BP BUFFER (NODE-SUPERIOR NODE))))
  BP)
