;;; ZWEI keyboard macros -*- Base: 8; Mode: LISP; Package: ZWEI -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFVAR MACRO-ESCAPE-CHAR #\c-m-FUNCTION)
(DEFVAR MACRO-STREAM)
(DEFVAR MACRO-LEVEL)
(DEFVAR MACRO-UNTYI)
(DEFVAR MACRO-LEVEL-ARRAY)
(DEFVAR MACRO-CURRENT-ARRAY)
(DEFVAR MACRO-PREVIOUS-ARRAY)
(DEFVAR MACRO-READING NIL)
(DEFVAR MACRO-REDIS-LEVEL -1)
(DEFVAR MACRO-OPERATIONS)

(DEFSTRUCT (MACRO-ARRAY :ARRAY-LEADER (:MAKE-ARRAY (:LENGTH 100)))
	   (MACRO-POSITION 0)		;Current position reading or writing
	   (MACRO-LENGTH 0)		;Length of macro
	   MACRO-COUNT			;Current repeat count for macro
	   MACRO-DEFAULT-COUNT		;Initial value of MACRO-COUNT, or NIL if writing
           MACRO-NAME)                  ;Name of macro as a string, or NIL if temporary.

;;; The following structure is used for the MACRO-A command.
;;; It is important that it be a LIST since that is how it is
;;; identified.
(DEFSTRUCT (MACRO-A :LIST)
	   (MACRO-A-NAME '*A*)		;Symbol by which this is recognized.
	   MACRO-A-VALUE		;Current value of the character.
	   MACRO-A-STEP			;Number to increase VALUE by on each step.
	   MACRO-A-INITIAL-VALUE)	;Initial current-value given by user.

(DEFUN MAKE-MACRO-STREAM (STREAM)
  (LET-CLOSED ((MACRO-STREAM STREAM)
	       (MACRO-LEVEL -1)
	       (MACRO-UNTYI NIL)
	       (MACRO-LEVEL-ARRAY (MAKE-ARRAY 20))
	       (MACRO-CURRENT-ARRAY NIL)
	       (MACRO-PREVIOUS-ARRAY NIL)
	       (MACRO-OPERATIONS
		 (LET ((OPS (COPYLIST (FUNCALL STREAM ':WHICH-OPERATIONS))))
		   (MAPC #'(LAMBDA (X) (SETQ OPS (DELQ X OPS)))
			 ;; These operations should be handled by STREAM-DEFAULT-HANDLER,
			 ;; not MACRO-STREAM so that they go back through the correct
			 ;; SELF.
			 '(:LINE-IN :SEND-IF-HANDLES :OPERATION-HANDLED-P
			   :GET-HANDLER-FOR :SEND-IF-HANDLES))
		   `(:MACRO-LEVEL :MACRO-ERROR :MACRO-EXECUTE
		     :MACRO-PUSH :MACRO-POP :MACRO-QUERY :MACRO-PREVIOUS-ARRAY
		     . ,OPS))))
    'MACRO-STREAM-IO))

(DEFSELECT (MACRO-STREAM-IO MACRO-STREAM-DEFAULT-HANDLER T)
  (:WHICH-OPERATIONS ()
   MACRO-OPERATIONS)
  (:UNTYI (CH)
   (IF (OR RUBOUT-HANDLER (LISTP CH))		;Kludge for blips, which sometimes change
						;their internal representation.  The input
						;editor relies on this to get them back in
						;a different form next :TYI.
       (SEND MACRO-STREAM :UNTYI CH)
       (SETQ MACRO-UNTYI CH)))
  ((:TYI :ANY-TYI :TYI-NO-HANG :ANY-TYI-NO-HANG)
   . MACRO-STREAM-IO-TYI)
  (:LISTEN ()
   (OR (MACRO-LISTEN)
       (SEND MACRO-STREAM ':LISTEN)))
  (:INPUT-WAIT (&REST ARGUMENTS)
   (UNLESS (MACRO-LISTEN)
     (MACRO-UPDATE-LEVEL)
     (LEXPR-SEND MACRO-STREAM :INPUT-WAIT ARGUMENTS)))
  (:MACRO-LEVEL ()
   (1+ MACRO-LEVEL))
  (:MACRO-ERROR ()			;Return T if we were playing back.
   (PROG1 (AND MACRO-CURRENT-ARRAY (MACRO-DEFAULT-COUNT MACRO-CURRENT-ARRAY))
	  (MACRO-STOP NIL)))
  (:CLEAR-INPUT ()
   (MACRO-STOP NIL)
   (SETQ MACRO-UNTYI NIL)
   (FUNCALL MACRO-STREAM ':CLEAR-INPUT))
  (:MACRO-EXECUTE (&OPTIONAL ARRAY TIMES DONT-STORE)
    (COND ((OR ARRAY (SETQ ARRAY MACRO-PREVIOUS-ARRAY))
	   (OR DONT-STORE (SETQ ARRAY (MACRO-STORE ARRAY)))
	   (MACRO-PUSH-LEVEL ARRAY)
	   (AND TIMES
		(SETF (MACRO-COUNT ARRAY) TIMES)))
	  (T
	   (BEEP))))
  (:MACRO-PUSH (&OPTIONAL N APPEND-TO)
   (AND MACRO-CURRENT-ARRAY		;Erase the command that caused this to happen
	N
	(SETF (MACRO-POSITION MACRO-CURRENT-ARRAY)
	      (- (MACRO-POSITION MACRO-CURRENT-ARRAY) N)))
   (COND (APPEND-TO
	  (SETF (MACRO-DEFAULT-COUNT APPEND-TO) NIL)
	  (INCF (MACRO-POSITION APPEND-TO))))
   (MACRO-PUSH-LEVEL (MACRO-STORE (OR APPEND-TO T)) (NULL APPEND-TO)))
  (:MACRO-POP (&OPTIONAL N TIMES)
   (AND MACRO-CURRENT-ARRAY
	N
	(SETF (MACRO-POSITION MACRO-CURRENT-ARRAY)
	      (- (MACRO-POSITION MACRO-CURRENT-ARRAY) N)))
   (MACRO-REPEAT TIMES))
  (:MACRO-QUERY (&OPTIONAL N)
   (AND MACRO-CURRENT-ARRAY
	N
	(SETF (MACRO-POSITION MACRO-CURRENT-ARRAY)
	      (- (MACRO-POSITION MACRO-CURRENT-ARRAY) N)))
   (MACRO-STORE '*SPACE*))
  (:MACRO-PREVIOUS-ARRAY ()
   MACRO-PREVIOUS-ARRAY)
  (:RECORD (CH)
   (MACRO-STORE (IF (MOUSE-CHAR-P CH) '*MOUSE* CH))))

(DEFUN MACRO-LISTEN ()
  (OR MACRO-UNTYI
      (AND (NOT MACRO-READING)
	   MACRO-CURRENT-ARRAY
	   (MACRO-DEFAULT-COUNT MACRO-CURRENT-ARRAY)
	   (LOOP FOR ARRAY = MACRO-CURRENT-ARRAY THEN CH
		 FOR INDEX = (MACRO-POSITION MACRO-CURRENT-ARRAY) THEN 0
		 AS CH = (AREF ARRAY INDEX)
		 WHILE (ARRAYP CH)
		 FINALLY (RETURN (NOT (MEMQ CH '(*SPACE* *MOUSE* *MICE* NIL))))))))

(DEFUN MACRO-STREAM-IO-TYI (OP &OPTIONAL IGNORE)
  (COND (MACRO-UNTYI (PROG1 MACRO-UNTYI (SETQ MACRO-UNTYI NIL)))
	(MACRO-READING
	 (MACRO-UPDATE-LEVEL)
	 (FUNCALL MACRO-STREAM OP))
	(T (MACRO-TYI OP))))

(DEFUN MACRO-STREAM-DEFAULT-HANDLER (OP &REST REST)
  (IF (MEMQ OP MACRO-OPERATIONS)
      (LEXPR-FUNCALL MACRO-STREAM OP REST)
      (STREAM-DEFAULT-HANDLER 'MACRO-STREAM-IO OP (CAR REST) (CDR REST))))

(DEFUN MACRO-TYI (&OPTIONAL (OP ':TYI))
  (DO ((CH) (TEM) (NUMARG) (FLAG) (TEM2) (SUPPRESS))
      (())
   (CATCH 'MACRO-LOOP
    (COND ((AND MACRO-CURRENT-ARRAY (SETQ TEM2 (MACRO-DEFAULT-COUNT MACRO-CURRENT-ARRAY)))
	   (SETQ TEM (MACRO-POSITION MACRO-CURRENT-ARRAY)
		 CH (AREF MACRO-CURRENT-ARRAY TEM))
	   (COND ((EQ CH '*SPACE*)
                  (SELECTQ (MACRO-PROMPT-TYI ':TYI T "Keyboard macro query: ")
                   (#\SP
                    (SETQ CH '*IGNORE*))
                   ((#/? #\HELP)
                    (FORMAT *TYPEOUT-WINDOW* "~&You are in an interactive macro.
Space continues on, Rubout skips this one, Period does this one then stops,
! continues without any more questions, ~:C refreshes the screen,
Control-R enters a typein macro level (~:C R exits), anything else exits.
Now type one of these characters: "
			    #\REFRESH MACRO-ESCAPE-CHAR)
		    (SEND *TYPEOUT-WINDOW* :MAKE-COMPLETE)
		    (AND (SETQ CH (FUNCALL MACRO-STREAM ':ANY-TYI))
			 (FUNCALL MACRO-STREAM ':UNTYI CH))
		    (THROW 'MACRO-LOOP NIL))
                   (#\RUBOUT
                    (SETQ TEM (MACRO-LENGTH MACRO-CURRENT-ARRAY)
                          CH '*IGNORE*))
                   (#\c-R
                    (SETQ CH NIL))
		   (#\REFRESH
		    (COM-COMPLETE-REDISPLAY)
		    (MACRO-DISCARD-BLIPS)
		    (THROW 'MACRO-LOOP NIL))
                   (#/. 
                    (SETF (MACRO-DEFAULT-COUNT MACRO-CURRENT-ARRAY) 0)
                    (SETF (MACRO-COUNT MACRO-CURRENT-ARRAY) 0)
                    (SETQ CH '*IGNORE*))
                   (#/!
                    (ASET '*RUN* MACRO-CURRENT-ARRAY TEM)
                    (SETQ CH '*IGNORE*))
                   (OTHERWISE
                    (MACRO-STOP 1)
                    (THROW 'MACRO-LOOP NIL))))
		 ((MEMQ CH '(*MOUSE* *MICE*))
		  (SETQ CH (MACRO-PROMPT-TYI ':ANY-TYI T "Use the mouse: "))
		  (COND ((AND (LISTP CH) (EQ (CAR CH) ':MOUSE-CLICK))
			 (SETF (MACRO-POSITION MACRO-CURRENT-ARRAY) (1+ TEM))
			 (RETURN CH))
			(T
			 (BEEP)
			 (SETQ CH '*IGNORE*)))))
           (COND ((AND (ZEROP TEM)
		       (EQ TEM2 '*REPEAT*)
		       (MEMQ ':MACRO-TERMINATE MACRO-OPERATIONS)
		       (FUNCALL MACRO-STREAM ':MACRO-TERMINATE))
		  (COND (( (SETQ MACRO-LEVEL (1- MACRO-LEVEL)) 0)
			 (SETQ MACRO-CURRENT-ARRAY
			       (AREF MACRO-LEVEL-ARRAY MACRO-LEVEL)))
			(T
			 (SETQ MACRO-CURRENT-ARRAY NIL))))
		 ((< TEM (MACRO-LENGTH MACRO-CURRENT-ARRAY))
		  (SETF (MACRO-POSITION MACRO-CURRENT-ARRAY) (1+ TEM)))
		 ((EQ TEM2 '*REPEAT*)
		  (SETF (MACRO-POSITION MACRO-CURRENT-ARRAY) 0))
		 ((> (SETQ TEM (1- (MACRO-COUNT MACRO-CURRENT-ARRAY))) 0)
		  (SETF (MACRO-COUNT MACRO-CURRENT-ARRAY) TEM)
                  (SETF (MACRO-POSITION MACRO-CURRENT-ARRAY) 0))
		 (( (SETQ MACRO-LEVEL (1- MACRO-LEVEL)) 0)
		  (SETQ MACRO-CURRENT-ARRAY (AREF MACRO-LEVEL-ARRAY MACRO-LEVEL)))
		 (T
		  (SETQ MACRO-CURRENT-ARRAY NIL)))
	   (COND ((CHARACTERP CH) (OR SUPPRESS (RETURN CH)))
                 ((MEMQ CH '(*RUN* *IGNORE*)))
		 ((AND (LISTP CH) (EQ (CAR CH) '*A*))
		  (LET ((X (MACRO-A-VALUE CH)))
		    (SETF (MACRO-A-VALUE CH) (+ X (MACRO-A-STEP CH)))
		    (OR SUPPRESS (RETURN (INT-CHAR X)))))
		 (T (MACRO-PUSH-LEVEL CH))))
	  (T
	   ;; Not-replaying case
	   (MACRO-UPDATE-LEVEL)
	   (COND (FLAG
		  (SETQ CH (MACRO-PROMPT-TYI ':TYI NIL "Keyboard macro command: "))
		  (OR (CHARACTERP CH) (MACRO-BARF))
		  (SETQ CH (CHAR-UPCASE CH))
		  (COND ((DIGIT-CHAR-P CH)
			 (SETQ NUMARG (+ (DIGIT-CHAR-P CH) (* (OR NUMARG 0) 10.))))
			(T
			 (SETQ FLAG NIL)
			 (SELECTQ CH
			   (#/C
			    (SETQ TEM (MACRO-DO-READ "Macro to call: "))
			    (OR (SETQ TEM (GET TEM 'MACRO-STREAM-MACRO)) (MACRO-BARF))
			    (MACRO-STORE TEM)
			    (OR SUPPRESS (MACRO-PUSH-LEVEL TEM)))
			   (#/D
			    (SETQ SUPPRESS MACRO-LEVEL)
			    (MACRO-PUSH-LEVEL (MACRO-MAKE-NAMED-MACRO)))
			   (#/M
			    (MACRO-PUSH-LEVEL (MACRO-STORE (MACRO-MAKE-NAMED-MACRO))))
			   (#/P
			    (MACRO-PUSH-LEVEL (MACRO-STORE)))
			   (#/R
			    (MACRO-REPEAT NUMARG)
			    (AND (EQ SUPPRESS MACRO-LEVEL) (SETQ SUPPRESS NIL)))
			   (#/S
                            (MACRO-STOP NUMARG))
			   (#/T
			    (MACRO-PUSH-LEVEL (MACRO-STORE NIL)))
			   (#/U
			    (MACRO-PUSH-LEVEL NIL))
                           (#\SP
                            (MACRO-STORE '*SPACE*))
			   (#/A
			    (LET ((STR (MACRO-READ-STRING
				         "Initial character (type a one-character string):")))
			      (OR (= (STRING-LENGTH STR) 1) (MACRO-BARF))
			      (LET ((VAL (CHAR-INT (AREF STR 0)))
				    (NUM (MACRO-READ-NUMBER
                                  "Amount by which to increase it (type a decimal number):")))
				(MACRO-STORE (MAKE-MACRO-A MACRO-A-VALUE (+ VAL NUM)
							   MACRO-A-STEP NUM
							   MACRO-A-INITIAL-VALUE VAL))
				(OR SUPPRESS (RETURN (INT-CHAR VAL))))))
                           (#\HELP
			    (FORMAT T "~&Macro commands are:
P push a level of macro, R end and repeat arg times, C call a macro by name,
S stop macro definition, U allow typein now only, T allow typein in expansion too.
/(terminate typein with ~:C R/)
M define a named macro, D define a named macro but don't execute as building.
Space enter macro query, A store an increasing character.
Now type a macro command."
				    MACRO-ESCAPE-CHAR)
			    (SEND *TYPEOUT-WINDOW* :MAKE-COMPLETE)
			    (SETQ FLAG T))
			   (OTHERWISE
			    (MACRO-BARF))))))
		 (T
		  (MULTIPLE-VALUE (CH TEM) (FUNCALL MACRO-STREAM OP))
		  (COND ((EQ CH MACRO-ESCAPE-CHAR)
			 (SETQ FLAG T NUMARG NIL))
			(T
			 (COND ((CHARACTERP CH) (MACRO-STORE CH))
			       ((AND (LISTP CH) (EQ (CAR CH) ':MOUSE-CLICK))
				(MACRO-STORE '*MOUSE*)))
			 (OR SUPPRESS (RETURN (VALUES CH TEM))))))))))))

;; Filter out special-command blips that get in the way
(DEFUN MACRO-DISCARD-BLIPS ()
  (LOOP AS CH = (FUNCALL MACRO-STREAM ':ANY-TYI-NO-HANG)
	UNTIL (NULL CH)
	DO (UNLESS (AND (LISTP CH)
			(MEMQ (CAR CH) '(REDISPLAY SELECT-WINDOW CONFIGURATION-CHANGED
					 DW::WINDOW-WAKEUP-SELECT DW::WINDOW-WAKEUP-EXPOSE
					 DW::WINDOW-WAKEUP-REFRESH DW::WINDOW-WAKEUP-REDISPLAY
					 DW::WINDOW-WAKEUP-VIEWPORT-POSITION-CHANGED
					 )))
	     (FUNCALL MACRO-STREAM ':UNTYI CH)
	     (RETURN NIL))))

;; Read a keyboard-macro command, with prompting in the echo area
(DEFUN MACRO-PROMPT-TYI (STREAM-OP REDISPLAY PROMPT-STRING &REST PROMPT-ARGS)
  (MACRO-DISCARD-BLIPS)
  (COND ((FUNCALL MACRO-STREAM ':LISTEN)
	 (FUNCALL MACRO-STREAM ':TYI))
	(T
	 (WHEN REDISPLAY
	   (REDISPLAY *WINDOW* ':POINT)
	   (REDISPLAY-MODE-LINE))
	 (PROG1 (TV:WINDOW-CALL-RELATIVE (*TYPEIN-WINDOW*)
		  (LEXPR-FUNCALL #'TYPEIN-LINE PROMPT-STRING PROMPT-ARGS)
		  (MACRO-DISCARD-BLIPS)
		  (PROG1 (FUNCALL MACRO-STREAM STREAM-OP)
			 (SEND *TYPEIN-WINDOW* :CLEAR-WINDOW)))
		(MACRO-DISCARD-BLIPS)))))

(DEFUN MACRO-PUSH-LEVEL (MAC &OPTIONAL (RESET-POSITION T))
  (COND (MAC
	  (AND (SYMBOLP MAC) (SETQ MAC (GET MAC 'MACRO-STREAM-MACRO)))
	  (OR (ARRAYP MAC) (MACRO-BARF))))
  (SETQ MACRO-LEVEL (1+ MACRO-LEVEL)
	MACRO-CURRENT-ARRAY MAC)
  (AND ( MACRO-LEVEL (ARRAY-LENGTH MACRO-LEVEL-ARRAY))
       (ADJUST-ARRAY-SIZE MACRO-LEVEL-ARRAY (// (* MACRO-LEVEL 3) 2)))
  (ASET MAC MACRO-LEVEL-ARRAY MACRO-LEVEL)
  (COND (MAC
	  (AND RESET-POSITION (SETF (MACRO-POSITION MAC) 0))
	  (SETF (MACRO-COUNT MAC) (MACRO-DEFAULT-COUNT MAC))
	  (DO ((I 0 (1+ I))
	       (X)
	       (LIM (MACRO-LENGTH MAC)))
	      ((> I LIM))
	    (SETQ X (AREF MAC I))
	    (COND ((EQ '*RUN* X)
		   (ASET '*SPACE* MAC I))
		  ((EQ '*MICE* X)
		   (ASET '*MOUSE* MAC I))
		  ((AND (LISTP X) (EQ (CAR X) '*A*))
		   (SETF (MACRO-A-VALUE X) (MACRO-A-INITIAL-VALUE X)))
		  )))))

(DEFUN MACRO-STORE (&OPTIONAL (THING T))
  (AND (EQ THING T) (SETQ THING (MAKE-MACRO-ARRAY)))
  (AND MACRO-CURRENT-ARRAY (ARRAY-PUSH-EXTEND MACRO-CURRENT-ARRAY THING))
  THING)

(DEFUN MACRO-BARF ()
  (BEEP)
  (THROW 'MACRO-LOOP NIL))

(DEFUN MACRO-REPEAT (ARG &AUX (TEM -1))
  (AND (< MACRO-LEVEL 0) (MACRO-BARF))
  (COND (MACRO-CURRENT-ARRAY
	  (OR ARG (SETQ ARG '*REPEAT*))
	  (SETF (MACRO-DEFAULT-COUNT MACRO-CURRENT-ARRAY) ARG)
	  (SETQ TEM (1- (MACRO-POSITION MACRO-CURRENT-ARRAY)))
	  (SETF (MACRO-LENGTH MACRO-CURRENT-ARRAY) TEM)
	  (SETQ MACRO-PREVIOUS-ARRAY MACRO-CURRENT-ARRAY)))
  (COND ((AND ( TEM 0) (NUMBERP ARG) (> ARG 1))
	 (SETF (MACRO-POSITION MACRO-CURRENT-ARRAY) 0)
	 (SETF (MACRO-COUNT MACRO-CURRENT-ARRAY) (1- ARG)))
	((EQ ARG '*REPEAT*)
	 (SETF (MACRO-POSITION MACRO-CURRENT-ARRAY) 0))
	(( (SETQ MACRO-LEVEL (1- MACRO-LEVEL)) 0)
	 (SETQ MACRO-CURRENT-ARRAY
	       (AREF MACRO-LEVEL-ARRAY MACRO-LEVEL)))
	(T (SETQ MACRO-CURRENT-ARRAY NIL))))

(DEFUN MACRO-MAKE-NAMED-MACRO (&AUX TEM MAC)
  (SETQ TEM (MACRO-DO-READ "Name of macro to define: "))
  (OR (SYMBOLP TEM) (MACRO-BARF))
  (SETQ MAC (MAKE-MACRO-ARRAY))
  (PUTPROP TEM MAC 'MACRO-STREAM-MACRO)
  (SETF (MACRO-NAME MAC) (STRING TEM))
  MAC)

(DEFUN MACRO-READ-STRING (STR &AUX (MACRO-READING T) (MACRO-REDIS-LEVEL -1))
  (IF (MEMQ ':READ-MACRO-LINE MACRO-OPERATIONS)
      (FUNCALL MACRO-STREAM ':READ-MACRO-LINE STR)
      (PRINC STR MACRO-STREAM)
      (READLINE MACRO-STREAM)))

(DEFUN MACRO-DO-READ (STR)
  (INTERN (STRING-UPCASE (STRING-TRIM '(#\SP #\TAB) (MACRO-READ-STRING STR)))
	  PKG-KEYWORD-PACKAGE))

(DEFUN MACRO-READ-NUMBER (STR)
  (LET ((NUM (READ-FROM-STRING (MACRO-READ-STRING STR))))
    (OR (NUMBERP NUM) (MACRO-BARF))
    NUM))

(DEFUN MACRO-STOP (NUM)
  (SETQ MACRO-LEVEL (IF NUM (MAX -1 (- MACRO-LEVEL NUM)) -1)
	MACRO-CURRENT-ARRAY (AND ( MACRO-LEVEL 0)
				 (AREF MACRO-LEVEL-ARRAY MACRO-LEVEL))))

(DEFUN MACRO-UPDATE-LEVEL ()
  (COND ((AND ( MACRO-LEVEL MACRO-REDIS-LEVEL) (MEMQ ':SET-MACRO-LEVEL MACRO-OPERATIONS))
	 (SETQ MACRO-REDIS-LEVEL MACRO-LEVEL)
	 (FUNCALL MACRO-STREAM ':SET-MACRO-LEVEL
		  (AND (NOT (MINUSP MACRO-LEVEL))
		       (FORMAT NIL "~D" (1+ MACRO-LEVEL)))))))

;;; Handy things for saving out macros on disk and editing them
(DEFMACRO DEFINE-KEYBOARD-MACRO (NAME (COUNT) . EXPANSION)
  `(DEFINE-KEYBOARD-MACRO-1 ',NAME ,(OR COUNT 1) ',(COPYLIST EXPANSION)))

(DEFUN DEFINE-KEYBOARD-MACRO-1 (NAME COUNT EXPANSION &AUX MACRO-ARRAY (LEN 0) STRING)
  (SETQ STRING (STRING NAME)
	NAME (INTERN STRING PKG-KEYWORD-PACKAGE))
  (DOLIST (THING EXPANSION)
    (IF (STRINGP THING)
	(SETQ LEN (+ LEN (STRING-LENGTH THING)))
	(SETQ LEN (1+ LEN))))
  (SETQ MACRO-ARRAY (MAKE-MACRO-ARRAY :MAKE-ARRAY (:LENGTH LEN)
				      MACRO-LENGTH (1- LEN)
				      MACRO-DEFAULT-COUNT COUNT
				      MACRO-NAME STRING))
  (DOLIST (THING EXPANSION)
    (IF (STRINGP THING)
	(APPEND-TO-ARRAY MACRO-ARRAY THING)
	(COND ((CHARACTERP THING))
	      ((STRING-EQUAL THING '*INPUT*)
	       (SETQ THING NIL))
	      ((STRING-EQUAL THING '*SPACE*)
	       (SETQ THING '*SPACE*))
	      ((STRING-EQUAL THING '*MOUSE*)
	       (SETQ THING '*MOUSE*))
	      ((STRING-EQUAL THING '*MICE*)
	       (SETQ THING '*MICE*))
	      (T
	       (FERROR NIL "~S is not a known macro expansion element." THING)))
	(ARRAY-PUSH MACRO-ARRAY THING)))
  (PUTPROP NAME MACRO-ARRAY 'MACRO-STREAM-MACRO)
  NAME)

(DEFUN PRINT-KEYBOARD-MACRO-DEFINITION (STREAM NAME &OPTIONAL MACRO-ARRAY)
  (LET ((PACKAGE *EDITOR-PACKAGE*)
	(BASE 'CHARACTER))
    (CL:PPRINT (GET-KEYBOARD-MACRO-DEFINITION NAME MACRO-ARRAY) STREAM)))

(DEFUN GET-KEYBOARD-MACRO-DEFINITION (NAME MACRO-ARRAY)
  (OR MACRO-ARRAY (SETQ MACRO-ARRAY (GET NAME 'MACRO-STREAM-MACRO)))
  (SETQ NAME (INTERN (STRING NAME) *EDITOR-PACKAGE*))
  (DO ((I 0 (1+ I))
       (LEN (1+ (MACRO-LENGTH MACRO-ARRAY)))
       (THING)
       (STATE NIL)
       (LIST NIL)
       (STRING (MAKE-ARRAY 10. ':TYPE 'ART-STRING ':LEADER-LENGTH 1)))
      (( I LEN)
       `(DEFINE-KEYBOARD-MACRO ,NAME () . ,(NREVERSE LIST)))
    (SETQ THING (AREF MACRO-ARRAY I))
    (COND ((OR (SYMBOLP THING) (NOT (ZEROP (CHAR-BITS THING))))
	   (COND (STATE
		  (PUSH (STRING-APPEND STRING) LIST)
		  (SETQ STATE NIL)))
	   (COND ((CHARACTERP THING))
		 ((NULL THING)
		  (SETQ THING '*INPUT*)))
	   (PUSH THING LIST))
	  (T
	   (COND ((NOT STATE)
		  (STORE-ARRAY-LEADER 0 STRING 0)
		  (SETQ STATE T)))
	   (ARRAY-PUSH-EXTEND STRING THING)))))

(DEFUN (CHARACTER SI:PRINC-FUNCTION) (-N STREAM)
  (FORMAT STREAM "~@C" (- -N)))
