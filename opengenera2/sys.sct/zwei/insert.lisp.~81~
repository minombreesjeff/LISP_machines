;;; -*- Mode:LISP; Package:ZWEI; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;  This file contains basic text manipulation functions for ZWEI. 

;;; This file provides the following functions:
;;; INSERT INSERT-INTERVAL DELETE-INTERVAL COPY-INTERVAL

;;; Internal function for inserting and deleting.
(DEFUN SET-LINE-LENGTH (LINE LENGTH)
  (LET ((CURRENT-SIZE (ARRAY-LENGTH LINE)))
    (COND ((> LENGTH CURRENT-SIZE)
	   (ADJUST-ARRAY-SIZE LINE (MAX LENGTH (// (* (MAX CURRENT-SIZE 30.) 13.) 10.)))))
    (SETF (LINE-LENGTH LINE) LENGTH)))

;;; Change the type of an array, used to turn ordinary lines into 16-bit ones
(DEFUN SET-LINE-ARRAY-TYPE (LINE ARRAY-TYPE)
  (LET ((NEW-LINE (CREATE-LINE ARRAY-TYPE (ARRAY-LENGTH LINE) (LINE-NODE LINE))))
    (COPY-ARRAY-CONTENTS-AND-LEADER LINE NEW-LINE)
    (STRUCTURE-FORWARD LINE NEW-LINE)))

;; Insert the STRING at the BP.
(DEFUN INSERT (BP STRING &OPTIONAL (STRING-START 0) STRING-LENGTH)
  (MUNG-BP-INTERVAL BP)
  (PREPARE-TO-INSERT BP (OR (CHARACTERP STRING)
			    (AND (STRINGP STRING) ( (STRING-LENGTH STRING) 1))))
  (INSERT-1 (BP-TOP-LEVEL-NODE BP) BP STRING STRING-START STRING-LENGTH))

(DEFGENERIC INSERT-1 (NODE BP STRING &OPTIONAL (STRING-START 0) STRING-LENGTH)
  (:METHOD (NODE :DEFAULT)
   (INSERT-2 BP STRING STRING-START STRING-LENGTH)))

(DEFUN INSERT-2 (BP STRING &OPTIONAL (STRING-START 0) STRING-LENGTH
	       &AUX LINE INDEX LINE-LENGTH FIRST-NEWLINE FIRST-LINE LAST-LINE MAJOR-MODE)
  ;;; The syntax-directed editors for languages such as C and Pascal are sensitive
  ;;; to changes in this function in ways that other major modes are not.  Please test
  ;;; all modifications to this function in those major modes as well.
  (SETF MAJOR-MODE (AND (VARIABLE-BOUNDP *INTERVAL*) *INTERVAL*
			(SEND *INTERVAL* ':MAJOR-MODE)))
  (SETQ LINE (BP-LINE BP)
	INDEX (BP-INDEX BP)
	LINE-LENGTH (LINE-LENGTH LINE))
  (COND ((STRINGP STRING)
	 (OR STRING-LENGTH (SETQ STRING-LENGTH (ARRAY-ACTIVE-LENGTH STRING)))
	 (SETQ FIRST-NEWLINE (%STRING-SEARCH-CHAR #\CR STRING STRING-START STRING-LENGTH))
	 (COND ((NULL FIRST-NEWLINE)
		;; The string doesn't have any newlines in it.
		(INSERT-WITHIN-LINE LINE INDEX STRING STRING-START STRING-LENGTH))
	       ((AND (LINE-DIAGRAM LINE)		; its a diagram
		     (LET ((DIAGRAM-RESULT
			     (SEND (LINE-DIAGRAM LINE) :EDITOR-INSERT
				   LINE INDEX STRING STRING-START STRING-LENGTH)))
		       (IF (EQ DIAGRAM-RESULT :PERMIT) NIL DIAGRAM-RESULT))))
	       (T
		;; First, construct the "last" line, which is made up of the last
		;; line of the STRING followed by the part of LINE after INDEX.
		;; The copy the first line of STRING into LINE.
		(LET* ((LAST-NEWLINE (STRING-REVERSE-SEARCH-CHAR #\CR STRING
								 STRING-LENGTH STRING-START))
		       (ARRAY-TYPE (IF (STRING-FAT-P STRING) 'ART-FAT-STRING
				       (ARRAY-TYPE LINE)))
		       (LCHARS (- STRING-LENGTH LAST-NEWLINE 1))
		       NEW-LINE-TO-MUNG)
		  (COND ((AND (= LAST-NEWLINE (1- STRING-LENGTH))
			      (ZEROP INDEX))
			 ;;Inserting stuff ending with CR at front of line
			 ;;implies we can just shove down the old line
			 (SETQ LAST-LINE LINE)
			 ;; But then we can't use it as the first line.
			 (SETQ FIRST-LINE (CREATE-LINE ARRAY-TYPE
						       (- FIRST-NEWLINE STRING-START)
						       (BP-NODE BP)))
			 (SETF (LINE-PREVIOUS FIRST-LINE) (LINE-PREVIOUS LINE))
			 (AND (LINE-PREVIOUS LINE)
			      (SETF (LINE-NEXT (LINE-PREVIOUS LINE)) FIRST-LINE))
			 (COPY-ARRAY-PORTION STRING STRING-START FIRST-NEWLINE
					     FIRST-LINE 0 (ARRAY-LENGTH FIRST-LINE))
			 (SETF NEW-LINE-TO-MUNG FIRST-LINE)
			 (WHEN MAJOR-MODE (SEND MAJOR-MODE ':MUNG-LINE LINE))
			 ;; Transfer bps from the front of LINE to FIRST-LINE.
			 (DOLIST (BP (LINE-BP-LIST LINE))
			   (AND (ZEROP (BP-INDEX BP))
				(EQ (BP-STATUS BP) ':NORMAL)
				(MOVE-BP BP FIRST-LINE 0))))
			(T
			 ;; Otherwise, keep the beginning of the line we are inserting in,
			 ;; and make a new line for the tail end of the string.
			 (SETQ FIRST-LINE LINE)
			 (SETQ LAST-LINE (CREATE-LINE ARRAY-TYPE
						      (+ LCHARS (- LINE-LENGTH INDEX))
						      (BP-NODE BP)))
			 ;; Copy the last line of STRING into LAST-LINE.
			 (COPY-ARRAY-PORTION STRING (1+ LAST-NEWLINE) STRING-LENGTH
					     LAST-LINE 0 LCHARS)
			 ;; Copy the part of LINE after INDEX into LAST-LINE
			 (COPY-ARRAY-PORTION LINE INDEX LINE-LENGTH
					     LAST-LINE LCHARS (ARRAY-LENGTH LAST-LINE))
			 ;; Figure out whether LINE is being changed at all.
			 (UNLESS (AND (= FIRST-NEWLINE STRING-START)
				      (= INDEX LINE-LENGTH))
			   (SETQ LINE (MUNG-LINE LINE)))
			 ;; Copy the first line of STRING into LINE.
			 (SET-LINE-LENGTH LINE (+ INDEX (- FIRST-NEWLINE STRING-START)))
			 (OR (NOT (STRING-FAT-P STRING))
			     (STRING-FAT-P LINE)
			     (SET-LINE-ARRAY-TYPE LINE 'ART-FAT-STRING))
			 (COPY-ARRAY-PORTION STRING STRING-START FIRST-NEWLINE
					     LINE INDEX (LINE-LENGTH LINE))
			 (SETF NEW-LINE-TO-MUNG LAST-LINE)
			 ;; Relocate buffer pointers.
			 (DOLIST (BP (LINE-BP-LIST LINE))
			   (LET ((I (BP-INDEX BP)))
			     (COND ((OR (> I INDEX)
					(AND (= I INDEX)
					     (EQ (BP-STATUS BP) ':MOVES)))
				    (MOVE-BP BP LAST-LINE (+ (- I INDEX) LCHARS))))))))
		  (DO ((PREV-LINE FIRST-LINE THIS-LINE)
		       (THIS-LINE)
		       (PREV-NEWLINE FIRST-NEWLINE NEWLINE)
		       (NEWLINE)
		       (THE-LINE-BEYOND (LINE-NEXT LINE)))
		      (NIL)
		    (COND ((= PREV-NEWLINE LAST-NEWLINE)
			   ;; We are at the end.
			   (AND THE-LINE-BEYOND
				(SETF (LINE-PREVIOUS THE-LINE-BEYOND) LAST-LINE))
			   (SETF (LINE-NEXT LAST-LINE) THE-LINE-BEYOND)
			   (SETF (LINE-NEXT PREV-LINE) LAST-LINE)
			   (SETF (LINE-PREVIOUS LAST-LINE) PREV-LINE)
			   (WHEN (AND MAJOR-MODE NEW-LINE-TO-MUNG)
			     (SEND MAJOR-MODE ':MUNG-LINE NEW-LINE-TO-MUNG :NEW-LINE))
			   (RETURN NIL)))
		    (SETQ NEWLINE (%STRING-SEARCH-CHAR #\CR STRING
						       (1+ PREV-NEWLINE) STRING-LENGTH))
		    (LET ((LENGTH (- NEWLINE PREV-NEWLINE 1)))
		      (SETQ THIS-LINE (CREATE-LINE (ARRAY-TYPE STRING) LENGTH (BP-NODE BP)))
		      (COPY-ARRAY-PORTION STRING (1+ PREV-NEWLINE) NEWLINE
					  THIS-LINE 0 LENGTH)
		      (SETF (LINE-NEXT PREV-LINE) THIS-LINE)
		      (SETF (LINE-PREVIOUS THIS-LINE) PREV-LINE)
		      (WHEN MAJOR-MODE (SEND MAJOR-MODE ':MUNG-LINE THIS-LINE :NEW-LINE))))
		  (CREATE-BP LAST-LINE LCHARS)))))
	;; These are for INSERT of a non-string
	((AND (CHARACTERP STRING) (CHAR-EQUAL STRING #\CR))
	 (COND 
	   ;; If the line is a diagram, it gets first crack. It can return :PERMIT
	   ;; to indicate that ordinary insertion is ok with it for this string.
	   ((AND (LINE-DIAGRAM LINE)		; its a diagram
		 (LET ((DIAGRAM-RESULT
			 (SEND (LINE-DIAGRAM LINE) :EDITOR-INSERT LINE INDEX STRING 0 1)))
		   (IF (EQ DIAGRAM-RESULT :PERMIT) NIL DIAGRAM-RESULT))))
	   ((ZEROP INDEX) 
	    ;; Shove down the old line if inserting a CR at its front
	    (SETQ FIRST-LINE (CREATE-LINE 'ART-STRING 0 (BP-NODE BP)))
	    (SETF (LINE-PREVIOUS FIRST-LINE) (LINE-PREVIOUS LINE))
	    (AND (LINE-PREVIOUS LINE)
		 (SETF (LINE-NEXT (LINE-PREVIOUS LINE)) FIRST-LINE))
	    (SETF (LINE-NEXT FIRST-LINE) LINE)
	    (SETF (LINE-PREVIOUS LINE) FIRST-LINE)
	    (WHEN MAJOR-MODE (SEND MAJOR-MODE ':MUNG-LINE FIRST-LINE :NEW-LINE))
	    ;; Transfer bps from the front of LINE to FIRST-LINE.
	    (DOLIST (BP (LINE-BP-LIST LINE))
	      (AND (ZEROP (BP-INDEX BP))
		   (EQ (BP-STATUS BP) ':NORMAL)
		   (MOVE-BP BP FIRST-LINE 0)))
	    (CREATE-BP LINE 0))
	   (T
	    ;; Otherwise, keep the beginning of the line we are inserting in,
	    ;; and make a new line for the tail end of the string.
	    (SETQ LAST-LINE (CREATE-LINE (ARRAY-TYPE LINE) (- LINE-LENGTH INDEX)
					 (BP-NODE BP)))
	    (SETF (LINE-NEXT LAST-LINE) (LINE-NEXT LINE))
	    (AND (LINE-NEXT LINE)
		 (SETF (LINE-PREVIOUS (LINE-NEXT LINE)) LAST-LINE))
	    (SETF (LINE-NEXT LINE) LAST-LINE)
	    (SETF (LINE-PREVIOUS LAST-LINE) LINE)
	    (WHEN MAJOR-MODE (SEND MAJOR-MODE ':MUNG-LINE LAST-LINE :NEW-LINE))
	    ;; Copy the part of LINE after INDEX into LAST-LINE
	    (COPY-ARRAY-PORTION LINE INDEX LINE-LENGTH
				LAST-LINE 0 (ARRAY-LENGTH LAST-LINE))
	    ;; Figure out whether LINE is being changed at all.
	    (UNLESS (= INDEX LINE-LENGTH)
	      (SETQ LINE (MUNG-LINE LINE)))
	    ;; Truncate LINE
	    (SET-LINE-LENGTH LINE INDEX)
	    ;; Relocate buffer pointers.
	    (DOLIST (BP (LINE-BP-LIST LINE))
	      (LET ((I (BP-INDEX BP)))
		(COND ((OR (> I INDEX)
			   (AND (= I INDEX)
				(EQ (BP-STATUS BP) ':MOVES)))
		       (MOVE-BP BP LAST-LINE (- I INDEX))))))
	    (CREATE-BP LAST-LINE 0))))
	;; Insert ordinary character -- code simplified from INSERT-WITHIN-LINE
	((CHARACTERP STRING)
	 (COND ((AND (LINE-DIAGRAM LINE)
		     ;; :PERMIT means that we should go ahead and do it ourselves.
		     (LET ((DIAGRAM-RESULT 
			     (SEND (LINE-DIAGRAM LINE) :EDITOR-INSERT LINE INDEX STRING 0 1)))
		       (IF (EQ DIAGRAM-RESULT :PERMIT) NIL DIAGRAM-RESULT))))	
	       (T
		(SETQ LINE (MUNG-LINE LINE))
		(SET-LINE-LENGTH LINE (1+ LINE-LENGTH))
		(IF (AND (CHAR-FAT-P STRING)
			 (NOT (STRING-FAT-P LINE)))
		    (SET-LINE-ARRAY-TYPE LINE 'ART-FAT-STRING))
		;; Move the characters ahead of the inserting forward.
		(DO ((LF (1- LINE-LENGTH) (1- LF))
		     (LT LINE-LENGTH (1- LT)))
		    ((< LF INDEX))
		  (ASET (AREF LINE LF) LINE LT))
		;; Insert the new characters into the line.
		(ASET STRING LINE INDEX)
		;; Relocate buffer pointers.
		(DOLIST (BP (LINE-BP-LIST LINE))
		  (LET ((I (BP-INDEX BP)))
		    (COND ((OR (> I INDEX)
			       (AND (= I INDEX)
				    (EQ (BP-STATUS BP) ':MOVES)))
			   (SETF (BP-INDEX BP) (1+ I))))))
		(CREATE-BP LINE (1+ INDEX)))))
	((TYPEP STRING 'INTERVAL)
	 (INSERT-INTERVAL BP STRING))
	;; Inserting something random
	(T (INSERT BP (STRING STRING) STRING-START STRING-LENGTH))))

(DEFUN INSERT-MOVING (BP STRING)
  (LET ((NBP (INSERT BP STRING)))
    (MOVE-BP BP NBP)
    NBP))

;; First arg is a BP.  Second is an interval, or second&third are an ordered range.
(DEFUN INSERT-INTERVAL (AT-BP FROM-BP &OPTIONAL TO-BP IN-ORDER-P)
  (INSERT-INTERVAL-1 (BP-TOP-LEVEL-NODE AT-BP)
		     AT-BP FROM-BP TO-BP IN-ORDER-P))

;; This is generic so WT buffers can do their own thing.
(DEFGENERIC INSERT-INTERVAL-1 (NODE AT-BP FROM-BP TO-BP IN-ORDER-P)
  (:METHOD (NODE :DEFAULT)
   (INSERT-INTERVAL-2 AT-BP FROM-BP TO-BP IN-ORDER-P)))

(DEFUN INSERT-INTERVAL-2 (AT-BP FROM-BP TO-BP IN-ORDER-P)
  (LET ((FROM-BUFFER (OR (AND (TYPEP FROM-BP 'INTERVAL) (INTERVAL-BUFFER FROM-BP))
			 (BP-BUFFER FROM-BP)
			 *INTERVAL*)))
    (MUNG-BP-INTERVAL AT-BP)
    (GET-INTERVAL FROM-BP TO-BP IN-ORDER-P)
    (PREPARE-TO-INSERT AT-BP (NOT (BPS-CHARS-FAR-APART FROM-BP TO-BP 1)))
    (IF (EQL (BP-LINE FROM-BP) (BP-LINE TO-BP))
	(INSERT-WITHIN-LINE (BP-LINE AT-BP) (BP-INDEX AT-BP)
			    (BP-LINE FROM-BP) (BP-INDEX FROM-BP) (BP-INDEX TO-BP))
	(INSERT-MULTIPLE-LINES AT-BP FROM-BP TO-BP FROM-BUFFER))))

(DEFUN INSERT-MULTIPLE-LINES (AT-BP FROM-BP TO-BP FROM-BUFFER)
  (LET ((AT-LINE (BP-LINE AT-BP))
	(AT-INDEX (BP-INDEX AT-BP))
	(FROM-LINE (BP-LINE FROM-BP))
	(FROM-INDEX (BP-INDEX FROM-BP))
	(TO-LINE (BP-LINE TO-BP))
	(TO-INDEX (BP-INDEX TO-BP))
	(MAJOR-MODE (AND (VARIABLE-BOUNDP *INTERVAL*) *INTERVAL*
			 (SEND *INTERVAL* ':MAJOR-MODE))))
    (LET ((AT-LINE-LENGTH (LINE-LENGTH AT-LINE))
	  (FROM-LINE-LENGTH (LINE-LENGTH FROM-LINE))
	  (ARRAY-TYPE (IF (STRING-FAT-P TO-LINE) 'ART-FAT-STRING
			  (ARRAY-TYPE AT-LINE)))
	  FIRST-LINE LAST-LINE)

      (COND ((AND (ZEROP TO-INDEX)
		  (ZEROP AT-INDEX))
	     ;;Inserting stuff ending with CR at front of line
	     ;;implies we can just shove down the old line
	     (SETQ LAST-LINE AT-LINE)
	     ;; But then we can't use it as the first line.
	     (SETQ FIRST-LINE (COPY-LINE FROM-LINE (BP-NODE AT-BP) FROM-INDEX))
	     (SETF (LINE-PREVIOUS FIRST-LINE) (LINE-PREVIOUS AT-LINE))
	     (AND (LINE-PREVIOUS AT-LINE)
		  (SETF (LINE-NEXT (LINE-PREVIOUS AT-LINE)) FIRST-LINE))
	     ;; Transfer bps from the front of AT-LINE to FIRST-LINE.
	     (DOLIST (BP (LINE-BP-LIST AT-LINE))
	       (AND (ZEROP (BP-INDEX BP))
		    (EQ (BP-STATUS BP) ':NORMAL)
		    (MOVE-BP BP FIRST-LINE 0))))
	    ((AND (LINE-DIAGRAM AT-LINE)
		  ;; Breaking a diagram line in the middle
		  (LET ((DIAGRAM-RESULT
			  (SEND (LINE-DIAGRAM AT-LINE) :EDITOR-INSERT
				AT-LINE AT-INDEX
				(BP-TOP-LEVEL-NODE FROM-BP) FROM-BP TO-BP)))
		    (IF (EQ DIAGRAM-RESULT :PERMIT) NIL DIAGRAM-RESULT))))
	    (T
	     ;; Otherwise, keep the beginning of the line we are inserting in,
	     ;; and make a new line for the tail end of the string.
	     (SETQ FIRST-LINE AT-LINE)
	     (SETQ LAST-LINE
		   (CREATE-LINE ARRAY-TYPE (+ TO-INDEX (- AT-LINE-LENGTH AT-INDEX))
				(BP-NODE AT-BP)))
	     ;; Copy the first part of TO-LINE into the LAST-LINE.
	     (DO ((TF 0 (1+ TF))
		  (LLT 0 (1+ LLT)))
		 (( TF TO-INDEX))
	       (ASET (AREF TO-LINE TF) LAST-LINE LLT))
	     ;; Figure out whether AT-LINE is being changed at all.
	     (UNLESS (AND (ZEROP FROM-LINE-LENGTH)
			  (= AT-INDEX AT-LINE-LENGTH))
	       (SETQ AT-LINE (MUNG-LINE AT-LINE)))
	     ;; Copy the second part of AT-LINE to LAST-LINE.
	     (DO ((AF AT-INDEX (1+ AF))
		  (LLT TO-INDEX (1+ LLT)))
		 (( AF AT-LINE-LENGTH))
	       (ASET (AREF AT-LINE AF) LAST-LINE LLT))
	     ;; Copy FROM-LINE into AT-LINE.
	     (IF (LINE-DIAGRAM FROM-LINE)
		 (COND ((ZEROP AT-LINE-LENGTH)
			(SETF (LINE-DIAGRAM AT-LINE) (LINE-DIAGRAM FROM-LINE))
			(SETQ AT-LINE (MUNG-LINE AT-LINE)))
		       ((ZEROP AT-INDEX)
			(SETQ FIRST-LINE (COPY-LINE FROM-LINE (BP-NODE AT-BP)))
			(SETF (LINE-PREVIOUS FIRST-LINE) (LINE-PREVIOUS AT-LINE))
			(WHEN (LINE-PREVIOUS AT-LINE)
			  (SETF (LINE-NEXT (LINE-PREVIOUS AT-LINE)) FIRST-LINE))
			;; Transfer bps from the front of AT-LINE to FIRST-LINE.
			(DOLIST (BP (LINE-BP-LIST AT-LINE))
			  (WHEN (AND (ZEROP (BP-INDEX BP))
				     (EQ (BP-STATUS BP) ':NORMAL))
			    (MOVE-BP BP FIRST-LINE 0))))
		       (T
			(BARF "Can't move a diagram into the middle of a line.")))
		 (SET-LINE-LENGTH AT-LINE (+ AT-INDEX (- FROM-LINE-LENGTH FROM-INDEX)))
		 (DO ((FF FROM-INDEX (1+ FF))
		      (AT AT-INDEX (1+ AT))
		      (FAT-P (STRING-FAT-P AT-LINE))
		      (CH))
		     (( FF FROM-LINE-LENGTH))
		   (SETQ CH (AREF FROM-LINE FF))
		   (UNLESS FAT-P
		     (WHEN (CHAR-FAT-P CH)
		       (SET-LINE-ARRAY-TYPE AT-LINE 'ART-FAT-STRING)
		       (SETQ FAT-P T)))
		   (ASET CH AT-LINE AT)))
	     ;; Relocate buffer pointers.
	     (DOLIST (BP (LINE-BP-LIST AT-LINE))
	       (LET ((I (BP-INDEX BP)))
		 (COND ((OR (> I AT-INDEX)
			    (AND (= I AT-INDEX)
				 (EQ (BP-STATUS BP) ':MOVES)))
			(MOVE-BP BP LAST-LINE (+ (- I AT-INDEX) TO-INDEX))))))))
      (DO ((PREV-LINE FIRST-LINE THIS-LINE)
	   (THIS-LINE)
	   (NODE (BP-NODE AT-BP))
	   (THE-LINE-BEYOND (LINE-NEXT AT-LINE))
	   (ORIGINAL-LINE (LINE-NEXT-IN-BUFFER FROM-LINE :BUFFER FROM-BUFFER)
			  (LINE-NEXT-IN-BUFFER ORIGINAL-LINE :BUFFER FROM-BUFFER)))
	  ((EQ ORIGINAL-LINE TO-LINE)
	   (AND THE-LINE-BEYOND
		(SETF (LINE-PREVIOUS THE-LINE-BEYOND) LAST-LINE))
	   (WHEN MAJOR-MODE (SEND MAJOR-MODE ':MUNG-LINE FIRST-LINE :NEW-LINE))
	   (SETF (LINE-NEXT LAST-LINE) THE-LINE-BEYOND)
	   (SETF (LINE-NEXT PREV-LINE) LAST-LINE)
	   (SETF (LINE-PREVIOUS LAST-LINE) PREV-LINE)
	   (WHEN (AND MAJOR-MODE (NEQ FIRST-LINE LAST-LINE))
	     (SEND MAJOR-MODE ':MUNG-LINE LAST-LINE :NEW-LINE)))
	(SETQ THIS-LINE (COPY-LINE ORIGINAL-LINE NODE))
	(SETF (LINE-NEXT PREV-LINE) THIS-LINE)
	(SETF (LINE-PREVIOUS THIS-LINE) PREV-LINE)
	(WHEN MAJOR-MODE (SEND MAJOR-MODE ':MUNG-LINE THIS-LINE :NEW-LINE)))
      (CREATE-BP LAST-LINE TO-INDEX))))

(DEFUN INSERT-INTERVAL-MOVING (BP FIRST-BP &OPTIONAL LAST-BP IN-ORDER-P)
  (LET ((NBP (INSERT-INTERVAL BP FIRST-BP LAST-BP IN-ORDER-P)))
    (MOVE-BP BP NBP)))

(DEFUN INSERT-THING (BP THING &OPTIONAL TO-BP IN-ORDER-P)
  (IF (OR (STRINGP THING) (CHARACTERP THING) (SYMBOLP THING))
      (INSERT BP THING)
      (INSERT-INTERVAL BP THING TO-BP IN-ORDER-P)))

;; Delete the text between FROM-BP and TO-BP.  FROM-BP and TO-BP must be in order.
;; Return a BP to the place from which text was deleted.
;; When deleting an entire NODE, the diagram lines get no chance to complain.
;; Proper top level node structure is used to prevent users from impermissible destruction
;; via this mechanism.  That is, either the diagram lines can indeed be destroyed
;; by a big kill-region, or the buffer should be constructed of hard sections
;; and then the ASSURE-SINGLE-SECTION-INTERVAL will prevent direct uses of this
;; from disturbing the structure.
(DEFUN DELETE-INTERVAL (FROM-BP &OPTIONAL TO-BP IN-ORDER-P)
  (LET ((*ENABLE-CHANGE-RECORDING* 
	  (COND ((AND (NULL TO-BP) (TYPEP FROM-BP 'NODE))
		 ;; Deleting a whole buffer, not by a range of BPs, should forget all about the
		 ;; old contents for paging reasons and because it is no longer meaningful to
		 ;; the new use of the buffer.
		 (DISCARD-CHANGE-HISTORY FROM-BP)
		 NIL)
		(T *ENABLE-CHANGE-RECORDING*))))
    (GET-INTERVAL FROM-BP TO-BP IN-ORDER-P)
    (DELETE-INTERVAL-1 (BP-TOP-LEVEL-NODE FROM-BP) FROM-BP TO-BP)))

;; This is generic so WT buffers can do their own thing.
(DEFGENERIC DELETE-INTERVAL-1 (NODE FROM-BP TO-BP)
  (:METHOD (NODE :DEFAULT)
   (DELETE-INTERVAL-2 FROM-BP TO-BP)))

(DEFUN DELETE-INTERVAL-2 (FROM-BP TO-BP &AUX KEPT-LINE (BUFFER FROM-BP))
  (WHEN (BP-= FROM-BP TO-BP)
    (RETURN-FROM DELETE-INTERVAL-2		;Don't record a change if there isn't any
      (COPY-BP FROM-BP)))
  (ASSURE-SINGLE-SECTION-INTERVAL
    FROM-BP TO-BP T "Sections cannot be deleted this way.")
  (MUNG-BP-INTERVAL FROM-BP)
  (MUNG-NODES-IN-INTERVAL FROM-BP TO-BP T NIL)
  (PREPARE-TO-CHANGE FROM-BP TO-BP 'DELETE)
  (LET ((FROM-LINE (BP-LINE FROM-BP))
	(FROM-INDEX (BP-INDEX FROM-BP))
	(TO-LINE (BP-LINE TO-BP))
	(TO-INDEX (BP-INDEX TO-BP))
	(LINE-TO-CLEAR NIL)
	(BP-TO-RETURN FROM-BP)
	(MAJOR-MODE (AND (VARIABLE-BOUNDP *INTERVAL*) *INTERVAL*
			 (SEND *INTERVAL* :MAJOR-MODE))))
    (COND ((TYPEP BUFFER 'NODE)
	   ;; Deleting a whole buffer (or other node) is a special case; it is
	   ;; permissible to destroy structural diagram lines.
	   ;;    (I think that's already taken care of)
	   ;; Loop over deleted lines, relocating bps and munging nodes.
	   (DO ((LINE FROM-LINE (LINE-NEXT-IN-BUFFER LINE :BUFFER BUFFER))
		(NODE (LINE-NODE FROM-LINE)))
	       ((EQ LINE TO-LINE)
		;; We have reached the TO-LINE, splice out lines.
		(UNLESS (EQ FROM-LINE TO-LINE)
		  (LET ((LINE-BEFORE (LINE-PREVIOUS FROM-LINE)))
		    (SETF (LINE-PREVIOUS TO-LINE) LINE-BEFORE)
		    (COND (LINE-BEFORE
			   (SETF (LINE-NEARBY-LINE-DELETED LINE-BEFORE) *TICK*)
			   (SETF (LINE-NEXT LINE-BEFORE) TO-LINE))))))
	     (OR LINE
		 (FERROR "The BPs ~S and ~S were not in order." FROM-BP TO-BP))
	     (OR (EQ NODE (SETQ NODE (LINE-NODE LINE)))
		 (MUNG-NODE NODE))
	     (SETF (LINE-TICK LINE) 'DELETED)
	     #+++IGNORE (WHEN MAJOR-MODE (SEND MAJOR-MODE ':CLEAR-LINE-TOKEN LINE))
	     (DOLIST (BP (LINE-BP-LIST LINE))
	       (MOVE-BP BP TO-LINE TO-INDEX)))
	   ;; Shorten TO-LINE and relocate its BPs
	   (UNLESS (ZEROP TO-INDEX)
	     (SETQ TO-LINE (MUNG-BP-LINE-AND-INTERVAL TO-BP))
	     (DO ((FROM TO-INDEX (1+ FROM))
		  (TO 0 (1+ TO))
		  (LINE-LENGTH (LINE-LENGTH TO-LINE)))
		 (( FROM LINE-LENGTH)
		  (SET-LINE-LENGTH TO-LINE TO))
	       (SETF (AREF TO-LINE TO) (AREF TO-LINE FROM)))
	     ;; Relocate BPs on the TO-LINE.
	     (DOLIST (BP (LINE-BP-LIST TO-LINE))
	       (MOVE-BP BP TO-LINE (MAX 0 (- (BP-INDEX BP) TO-INDEX))))))
	  ((EQ FROM-LINE TO-LINE)
	   (COND ((= TO-INDEX FROM-INDEX))
		 ((< TO-INDEX FROM-INDEX)
		  (FERROR NIL "The BPs ~S and ~S were not in order." FROM-BP TO-BP))
		 (T
		  (SETQ FROM-LINE (MUNG-LINE FROM-LINE))
		  (SETF (BP-LINE FROM-BP) FROM-LINE)
		  (WHEN (LINE-DIAGRAM FROM-LINE)
		    (SEND (LINE-DIAGRAM FROM-LINE) :EDITOR-DELETE FROM-INDEX TO-INDEX))
		  (LET ((LINE-LENGTH (LINE-LENGTH FROM-LINE))
			(NDEL (- TO-INDEX FROM-INDEX)))
		    (DO ((FL TO-INDEX (1+ FL))
			 (TL FROM-INDEX (1+ TL)))
			(( FL LINE-LENGTH))
		      (ASET (AREF FROM-LINE FL) FROM-LINE TL))
		    (SET-LINE-LENGTH FROM-LINE (- LINE-LENGTH NDEL))
		    ;; Relocate buffer pointers.
		    (DOLIST (BP (LINE-BP-LIST FROM-LINE))
		      (LET ((I (BP-INDEX BP)))
			(COND (( I TO-INDEX)
			       (SETF (BP-INDEX BP) (- I NDEL)))
			      (( I FROM-INDEX)
			       (SETF (BP-INDEX BP) FROM-INDEX)))))))))
	  (T
	   ;; Inform all involved diagram lines before changing anything.
	   (LOOP FOR PREV-LINE = FROM-LINE THEN LINE
		 FOR LINE = FROM-LINE THEN (LINE-NEXT LINE) UNTIL (EQ LINE TO-LINE)
		 ;; If we fell off the end of the line-next chain, but there is
		 ;; in fact a line-next-in-buffer successor, then we must have crossed
		 ;; a "section" boundary, so complain.
		 ;; If there is no line-next-in-buffer, just fall through the rest
		 ;; of the code and blow out referencing NIL or whatever the code
		 ;; used to do before the addition of this WHEN clause.
		 WHEN (AND (NULL LINE)
			   (NOT (NULL (LINE-NEXT-IN-BUFFER PREV-LINE))))
		   DO
		     (BARF "You can't delete across a section boundary")
		 FOR DIAGRAM = (LINE-DIAGRAM LINE)
		 DO (WHEN DIAGRAM
		      (SEND DIAGRAM :EDITOR-DELETE (IF (EQ LINE FROM-LINE) FROM-INDEX 0)
			    (LINE-LENGTH LINE))))
	   (COND ((AND (ZEROP TO-INDEX) (ZEROP FROM-INDEX))
		  ;; If deleting all of from-line and none of to-line,
		  ;; we don't need to touch to-line at all.
		  (SETQ KEPT-LINE TO-LINE)
		  (SETF (LINE-TICK FROM-LINE) 'DELETED)
		  (SETQ BP-TO-RETURN TO-BP)
		  (WHEN MAJOR-MODE (SETQ LINE-TO-CLEAR FROM-LINE)))
		 (T
		  (WHEN (LINE-DIAGRAM TO-LINE)
		    (SEND (LINE-DIAGRAM TO-LINE) :EDITOR-DELETE 0 (LINE-LENGTH TO-LINE)))
		  ;; Copy characters from end of TO-LINE to replace end of FROM-LINE.
		  (SETQ KEPT-LINE FROM-LINE)
		  (MUNG-NODE (LINE-NODE TO-LINE))	;May be in another node
		  (SETF (LINE-TICK TO-LINE) 'DELETED)
		  (WHEN MAJOR-MODE (SETQ LINE-TO-CLEAR TO-LINE))
		  (LET ((TO-LENGTH (LINE-LENGTH TO-LINE)))
		    (UNLESS (AND (= TO-INDEX TO-LENGTH)
				 (= FROM-INDEX (LINE-LENGTH FROM-LINE)))
		      (SETQ FROM-LINE (MUNG-LINE FROM-LINE))
		      (SETF (BP-LINE FROM-BP) FROM-LINE))
		    (SET-LINE-LENGTH FROM-LINE (+ FROM-INDEX (- TO-LENGTH TO-INDEX)))
		    (DO ((FTL TO-INDEX (1+ FTL))
			 (TFL FROM-INDEX (1+ TFL))
			 (FAT-P (STRING-FAT-P FROM-LINE))
			 (CH))
			(( FTL TO-LENGTH))
		      (SETQ CH (AREF TO-LINE FTL))
		      (UNLESS FAT-P
			(WHEN (CHAR-FAT-P CH)
			  (SET-LINE-ARRAY-TYPE FROM-LINE 'ART-FAT-STRING)
			  (SETQ FAT-P T)))
		      (ASET CH FROM-LINE TFL)))))
	   ;; Relocate BPs on the FROM-LINE.
	   (DOLIST (BP (LINE-BP-LIST FROM-LINE))
	     (MOVE-BP BP KEPT-LINE (MIN (BP-INDEX BP) FROM-INDEX)))
	   ;; Relocate BPs on the TO-LINE.
	   (DOLIST (BP (LINE-BP-LIST TO-LINE))
	     (MOVE-BP BP KEPT-LINE
		      (+ FROM-INDEX (MAX 0 (- (BP-INDEX BP) TO-INDEX)))))
	   ;; Loop over intermediate lines, relocating bps and munging nodes.
	   (DO ((LINE (LINE-NEXT FROM-LINE) (LINE-NEXT LINE))
		(NODE (LINE-NODE FROM-LINE)))
	       ((EQ LINE TO-LINE)
		;; We have reached the TO-LINE.
		;; Splice out all lines FROM-LINE to TO-LINE inclusive except KEPT-LINE.
		(LET ((LINE-BEFORE (LINE-PREVIOUS FROM-LINE))
		      (LINE-AFTER (LINE-NEXT TO-LINE)))
		  (SETF (LINE-NEXT KEPT-LINE) LINE-AFTER)
		  (SETF (LINE-PREVIOUS KEPT-LINE) LINE-BEFORE)
		  (COND (LINE-BEFORE
			 (SETF (LINE-NEARBY-LINE-DELETED LINE-BEFORE) *TICK*)
			 (SETF (LINE-NEXT LINE-BEFORE) KEPT-LINE)))
		  (COND (LINE-AFTER
			 (SETF (LINE-NEARBY-LINE-DELETED LINE-AFTER) *TICK*)
			 (SETF (LINE-PREVIOUS LINE-AFTER) KEPT-LINE)))))
	     (OR LINE
		 (FERROR NIL "The BPs ~S and ~S were not in order." FROM-BP TO-BP))
	     (OR (EQ NODE (SETQ NODE (LINE-NODE LINE)))
		 (MUNG-NODE NODE))
	     (SETF (LINE-TICK LINE) 'DELETED)
	     (WHEN MAJOR-MODE (SEND MAJOR-MODE ':CLEAR-LINE-TOKEN LINE))
	     (DOLIST (BP (LINE-BP-LIST LINE))
	       (MOVE-BP BP KEPT-LINE FROM-INDEX)))
	   (WHEN LINE-TO-CLEAR (SEND MAJOR-MODE :CLEAR-LINE-TOKEN LINE-TO-CLEAR))))
    (COPY-BP BP-TO-RETURN)))

;;; This is an internal function of INSERT and INSERT-INTERVAL
(DEFUN INSERT-WITHIN-LINE (LINE INDEX STRING FROM TO)
  (WHEN (LINE-DIAGRAM LINE)
    (LET ((DIAGRAM-RESULT
	    (SEND (LINE-DIAGRAM LINE) :EDITOR-INSERT LINE INDEX STRING FROM TO)))
      (UNLESS (EQ DIAGRAM-RESULT :PERMIT)
	(RETURN-FROM INSERT-WITHIN-LINE DIAGRAM-RESULT))))
  (COND ((EQ STRING LINE)
	 (SETQ STRING (SUBSTRING STRING FROM TO)
	       TO (- TO FROM)
	       FROM 0)))
  (LET ((LINE-LENGTH (LINE-LENGTH LINE))
	(STRING-LENGTH (- TO FROM)))
    (IF (ZEROP STRING-LENGTH)
	;; Don't mung the line if we aren't actually inserting any text.
	(CREATE-BP LINE INDEX)
      ;; Actually have something to insert
      (LET ((NEW-LINE-LENGTH (+ LINE-LENGTH STRING-LENGTH)))
	(SETQ LINE (MUNG-LINE LINE))
	(SET-LINE-LENGTH LINE NEW-LINE-LENGTH)
	(OR (NOT (STRING-FAT-P STRING))
	    (STRING-FAT-P LINE)
	    (SET-LINE-ARRAY-TYPE LINE 'ART-FAT-STRING))
	;; Move the characters ahead of the inserting forward.
	(DO ((LF (1- LINE-LENGTH) (1- LF))
	     (LT (1- NEW-LINE-LENGTH) (1- LT)))
	    ((< LF INDEX))
	  (ASET (AREF LINE LF) LINE LT))
	;; Insert the new characters into the line.
	(COPY-ARRAY-PORTION STRING FROM TO LINE INDEX (+ INDEX STRING-LENGTH))
	;; Relocate buffer pointers.
	(DOLIST (BP (LINE-BP-LIST LINE))
	  (LET ((I (BP-INDEX BP)))
	    (COND ((OR (> I INDEX)
		       (AND (= I INDEX) (EQ (BP-STATUS BP) :MOVES)))
		   (SETF (BP-INDEX BP) (+ I STRING-LENGTH))))))
	(CREATE-BP LINE (+ INDEX STRING-LENGTH))))))

;;; Insert a line BEFORE a line in the interval.
;;; this is used by the interval stream for the case of a line that already looks like
;;; an editor line, such as is gotten from STREAM-COPY-UNTIL-EOF
;;; This is below the level of MUNG-BP-INTERVAL and PREPARE-TO-CHANGE
(DEFUN INSERT-LINE-WITH-LEADER (LINE AT-LINE)
  (LET ((PREV (LINE-PREVIOUS AT-LINE)))
    (COND (PREV
           (SETF (LINE-NEXT PREV) LINE)
           (SETF (LINE-PREVIOUS LINE) PREV))))
  (SETF (LINE-NEXT LINE) AT-LINE)
  (SETF (LINE-PREVIOUS AT-LINE) LINE)
  (SETF (LINE-NODE LINE) (LINE-NODE AT-LINE))
  (SETF (LINE-TICK LINE) *TICK*)
  ;; Now hack the BPs
  (MULTIPLE-VALUE-BIND (TRUE FALSE)
      (SI:SUBDIVIDE-LIST #'(LAMBDA (BP)
			     (AND (ZEROP (BP-INDEX BP))
				  (EQ (BP-STATUS BP) ':NORMAL)))
			 (LINE-BP-LIST AT-LINE))
    (SETF (LINE-BP-LIST AT-LINE) FALSE)
    (SETF (LINE-BP-LIST LINE) TRUE)
    (DOLIST (BP TRUE)
      (SETF (BP-LINE BP) LINE))))

;;; This is an internal function of INSERT-INTERVAL and COPY-INTERVAL
;;; LAST-P is used to distinguish a special case -- when handling the-last-line,
;;; if the to-index is 0, then we aren't really copying the contents, so
;;; we don't copy the plist or diagram info. 
(DEFUN COPY-LINE (LINE NODE &OPTIONAL (FROM 0) (TO (LINE-LENGTH LINE)) LAST-P)
  (LET ((COPYING-WHOLE-LINE-P (AND (ZEROP FROM) (= TO (LINE-LENGTH LINE)) (NULL LAST-P))))
    (FLET ((COPY (TEXT FROM TO NEW-DIAGRAM)
	     (LET* ((LEN (- TO FROM))
		    (NEW-LINE (CREATE-LINE (ARRAY-TYPE TEXT) LEN NODE)))
	       (COPY-ARRAY-PORTION TEXT FROM TO NEW-LINE 0 LEN)
	       (WHEN COPYING-WHOLE-LINE-P
		 (SETF (LINE-PLIST NEW-LINE) (COPYLIST (LINE-PLIST LINE)))
		 (SETF (LINE-DIAGRAM NEW-LINE) NEW-DIAGRAM))
	       NEW-LINE)))
      (IF COPYING-WHOLE-LINE-P
	  ;; Copying the entire line --
	  ;;    If the line has a diagram, ask it how it should be copied.
	  (LET ((DIAGRAM-COPY (AND (LINE-DIAGRAM LINE)
				   (SEND (LINE-DIAGRAM LINE) :EDITOR-COPY))))
	    (IF (STRINGP DIAGRAM-COPY)
		;; Diagram returned new text which will replace original line's content.
		(COPY DIAGRAM-COPY 0 (CL:LENGTH DIAGRAM-COPY) NIL)
		;; Diagram returned itself, another diagram, or NIL.
		(COPY LINE FROM TO DIAGRAM-COPY)))
	  ;; Copying only part of the line.
	  (COPY LINE FROM TO NIL)))))

;;; This takes either an interval or a pair of BPs, and returns
;;; an interval with the same characters.
(DEFUN COPY-INTERVAL (FROM-BP &OPTIONAL TO-BP IN-ORDER-P INTO-INTERVAL)
  (GET-INTERVAL FROM-BP TO-BP IN-ORDER-P)
  (OR INTO-INTERVAL (SETQ INTO-INTERVAL (MAKE-INSTANCE 'NODE)))
  (COPY-INTERVAL-1 (BP-TOP-LEVEL-NODE FROM-BP) FROM-BP TO-BP INTO-INTERVAL))

;; This is generic so WT buffers can do their own thing.
(DEFGENERIC COPY-INTERVAL-1 (NODE FROM-BP TO-BP INTO-INTERVAL)
  (:METHOD (NODE :DEFAULT)
   (COPY-INTERVAL-2 FROM-BP TO-BP INTO-INTERVAL)))

(DEFUN COPY-INTERVAL-2 (FROM-BP TO-BP INTO-INTERVAL)
  (LET ((FROM-LINE (BP-LINE FROM-BP))
	(FROM-INDEX (BP-INDEX FROM-BP))
	(TO-LINE (BP-LINE TO-BP))
	(TO-INDEX (BP-INDEX TO-BP)))
    (COND ((EQ FROM-LINE TO-LINE)
	   (LET ((LEN (- TO-INDEX FROM-INDEX)))
	     ;; when we just have point and mark upon a diagram, treat it as an
	     ;; attempt to copy the diagram line.  There is an argument to be made
	     ;; against this.
	     (LET ((LINE
		     (IF (= FROM-INDEX TO-INDEX)
			 (CREATE-LINE 'ART-STRING 0 INTO-INTERVAL)
			 (COPY-LINE FROM-LINE INTO-INTERVAL FROM-INDEX TO-INDEX NIL))))
	       (SETF (INTERVAL-FIRST-BP INTO-INTERVAL)
		     (CREATE-BP LINE 0 ':NORMAL INTO-INTERVAL))
	       (SETF (INTERVAL-LAST-BP INTO-INTERVAL)
		     (CREATE-BP LINE LEN ':MOVES INTO-INTERVAL)))))
	  (T
	   (LET ((FIRST-LINE
		   (COPY-LINE FROM-LINE INTO-INTERVAL FROM-INDEX))
		 ;; if the last line is a diagram, don't `copy' it. just create
		 ;; a blank line.
		 (LAST-LINE (COPY-LINE TO-LINE INTO-INTERVAL 0 TO-INDEX T)))
	     ;; Copy text from FROM-LINE to FIRST-LINE.
	     (DO ((PREV-LINE FIRST-LINE THIS-LINE)
		  (THIS-LINE)
		  (ORIGINAL-LINE (LINE-NEXT-IN-BUFFER FROM-LINE) (LINE-NEXT-IN-BUFFER ORIGINAL-LINE)))
		 ((EQ ORIGINAL-LINE TO-LINE)
		  (SETF (LINE-NEXT PREV-LINE) LAST-LINE)
		  (SETF (LINE-PREVIOUS LAST-LINE) PREV-LINE)
		  (SETF (INTERVAL-FIRST-BP INTO-INTERVAL)
			(CREATE-BP FIRST-LINE 0 ':NORMAL INTO-INTERVAL))
		  (SETF (INTERVAL-LAST-BP INTO-INTERVAL)
			(CREATE-BP LAST-LINE TO-INDEX ':MOVES INTO-INTERVAL)))
	       (SETQ THIS-LINE (COPY-LINE ORIGINAL-LINE INTO-INTERVAL))
	       (SETF (LINE-NEXT PREV-LINE) THIS-LINE)
	       (SETF (LINE-PREVIOUS THIS-LINE) PREV-LINE))))))
  INTO-INTERVAL)

;;; Copy an interval, into a string if possible (to save storage).
;;; If it won't fit in a string because it contains diagrams, return an interval instead.
;;; An existing string or interval can be specified with :PREPEND or :APPEND,
;;; in this case if it's a string it must have a fill-pointer.
;;; LENGTH and WIDTH of the interval to be copied must be specified (precomputed anyway).
;;; WIDTH is ART-STRING or ART-FAT-STRING.
;;; :AREA and :FILL-POINTER can be specified to control consing a new string; these
;;; are ignored if we cons a new interval instead.
(DEFUN COPY-INTERVAL-INTO-STRING-OR-INTERVAL (FROM-BP TO-BP LENGTH WIDTH &REST OPTIONS)
  (DECLARE (ARGLIST FROM-BP TO-BP LENGTH WIDTH &KEY PREPEND APPEND AREA FILL-POINTER))
  (CL:APPLY #'COPY-INTERVAL-INTO-STRING-OR-INTERVAL-1 (BP-TOP-LEVEL-NODE FROM-BP)
	    FROM-BP TO-BP LENGTH WIDTH OPTIONS))

;; This is generic so WT buffers can do their own thing.
(DEFGENERIC COPY-INTERVAL-INTO-STRING-OR-INTERVAL-1 (NODE FROM-BP TO-BP LENGTH WIDTH
						     &REST OPTIONS)
  (DECLARE (ARGLIST FROM-BP TO-BP LENGTH WIDTH &KEY PREPEND APPEND AREA FILL-POINTER))
  (:METHOD (NODE :DEFAULT)
    (CL:APPLY #'COPY-INTERVAL-INTO-STRING-OR-INTERVAL-2 FROM-BP TO-BP LENGTH WIDTH OPTIONS)))

;; This is the method for things that fit in strings
;; but diagram lines come in at this level of modularity also
(DEFUN COPY-INTERVAL-INTO-STRING-OR-INTERVAL-2 (FROM-BP TO-BP LENGTH WIDTH
						&KEY PREPEND APPEND AREA FILL-POINTER)
  (WITH-INTERVAL-READ-LOCKED (FROM-BP TO-BP T)
    (MACROLET ((FATTER (ARRAY-TYPE-1 ARRAY-TYPE-2)
		 `(,(IF (> ART-FAT-STRING ART-STRING) `> `<) ,ARRAY-TYPE-1 ,ARRAY-TYPE-2))
	       (FATTEST (ARRAY-TYPE-1 ARRAY-TYPE-2)
		 `(,(IF (> ART-FAT-STRING ART-STRING) `MAX `MIN) ,ARRAY-TYPE-1 ,ARRAY-TYPE-2)))
      (LET ((STRING (OR PREPEND APPEND (MAKE-ARRAY LENGTH :TYPE WIDTH :AREA AREA
							  :FILL-POINTER FILL-POINTER)))
	    (INDEX 0))
	(UNLESS (ARRAYP STRING)			;PREPEND or APPEND was an interval
	  (RETURN-FROM COPY-INTERVAL-INTO-STRING-OR-INTERVAL-2
	    (PROGN (INSERT-INTERVAL (IF PREPEND (INTERVAL-FIRST-BP STRING)
				      (INTERVAL-LAST-BP STRING))
				    FROM-BP TO-BP T)
		   STRING)))
	;; If a diagram is present, we have to resort to intervals
	(LINEMAP (FROM-BP TO-BP)
	  (IGNORE *FIRST-INDEX*)
	  (UNLESS (AND *THIS-IS-THE-LAST-LINE* (ZEROP *LAST-INDEX*))
	    (WHEN (LINE-DIAGRAM LINE)
	      (RETURN-FROM COPY-INTERVAL-INTO-STRING-OR-INTERVAL-2
		(LET ((INTO-INTERVAL (COPY-INTERVAL FROM-BP TO-BP T)))
		  (COND (APPEND
			 (INSERT (INTERVAL-FIRST-BP INTO-INTERVAL) APPEND))
			(PREPEND
			 (INSERT (INTERVAL-LAST-BP INTO-INTERVAL) PREPEND)))
		  INTO-INTERVAL)))))
	;; The usual case involves just one or two strings
	(WHEN (OR PREPEND APPEND)
	  ;; Expand length and/or width if necessary
	  (SETQ INDEX (FILL-POINTER STRING))
	  (WHEN (OR (> (+ INDEX LENGTH) (ARRAY-LENGTH STRING))
		    (FATTER WIDTH (SYS:ARRAY-TYPE-FIELD STRING)))
	    (LET ((NEW (MAKE-ARRAY (MAX (+ INDEX LENGTH) (FLOOR (* (ARRAY-LENGTH STRING) 1.5)))
				   :TYPE (FATTEST (SYS:ARRAY-TYPE-FIELD STRING) WIDTH)
				   :FILL-POINTER INDEX
				   :AREA AREA)))
	      (COPY-ARRAY-PORTION STRING 0 INDEX NEW 0 INDEX)
	      (SETQ STRING NEW)))
	  (SETF (FILL-POINTER STRING) (+ INDEX LENGTH))
	  ;; Shift existing contents if PREPEND
	  (WHEN PREPEND
	    (CL:REPLACE STRING STRING :START1 LENGTH :END1 (+ LENGTH INDEX) :END2 INDEX)
	    (SETQ INDEX 0)))
	;; Now copy the data into the string
	(LINEMAP (FROM-BP TO-BP)
	  (COPY-ARRAY-PORTION LINE *FIRST-INDEX* *LAST-INDEX*
			      STRING INDEX (INCF INDEX (- *LAST-INDEX* *FIRST-INDEX*)))
	  (UNLESS *THIS-IS-THE-LAST-LINE*
	    (SETF (AREF STRING INDEX) #\RETURN)
	    (INCF INDEX)))
	(WHEN FILL-POINTER
	  (SETF (FILL-POINTER STRING) INDEX))
	STRING))))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Make a string whose text is that of the interval.
0(DEFUN STRING-INTERVAL (FROM-BP &OPTIONAL TO-BP IN-ORDER-P)
  (GET-INTERVAL FROM-BP TO-BP IN-ORDER-P)
  (LET* ((FROM-LINE (BP-LINE FROM-BP))
	 (FROM-INDEX (BP-INDEX FROM-BP))
	 (TO-LINE (BP-LINE TO-BP))
	 (TO-INDEX (BP-INDEX TO-BP))
	 (STRING (MAKE-ARRAY (COUNT-CHARS FROM-BP TO-BP T T)
			     :TYPE (LOOP FOR LINE FIRST FROM-LINE
						  THEN (LINE-NEXT-IN-BUFFER LINE)
					 UNTIL (EQ LINE TO-LINE)
					 DO (WHEN (STRING-FAT-P LINE)
					      (RETURN (ARRAY-TYPE LINE)))
					 FINALLY (RETURN (IF (ZEROP TO-INDEX)
							     'ART-STRING
							   (ARRAY-TYPE LINE))))))
	 (STRING-INDEX 0))
    (MACROLET ((ADD (CHAR)
		 `(PROGN
		    (SETF (AREF STRING STRING-INDEX) ,CHAR)
		    (INCF STRING-INDEX)))
	       (COPY (LINE &OPTIONAL START END)
		 (LET ((START (OR START 0))
		       (END (OR END `(LINE-LENGTH ,LINE))))
		   `(IF (LINE-DIAGRAM ,LINE)
			(DOLIST (CHAR '#.(CL:COERCE "<Diagram Line>" 'LIST))
			  (ADD CHAR))
		      (DO ((LF ,START (1+ LF)))
			  (( LF ,END))
			(SETF (AREF STRING STRING-INDEX) (AREF ,LINE LF))
			(INCF STRING-INDEX))))))
      (IF (EQ FROM-LINE TO-LINE)
	  (UNLESS (ZEROP TO-INDEX)
	    (COPY FROM-LINE FROM-INDEX TO-INDEX))
	(COPY FROM-LINE FROM-INDEX)
	(ADD #\Return)
	1;; Copy from intermediate lines.
0	(DO ((LINE (LINE-NEXT-IN-BUFFER FROM-LINE) (LINE-NEXT-IN-BUFFER LINE)))
	    ((EQ LINE TO-LINE))
	  (COPY LINE)
	  (ADD #\Return))
	(UNLESS (ZEROP TO-INDEX)
	  (COPY TO-LINE 0 TO-INDEX))))
    STRING))

;;;Insert n copies of a character
(DEFUN INSERT-CHARS (BP CHAR N)
  (COND ((= N 1) (INSERT BP CHAR))
	((< N 1) BP)
	(T
	 (STACK-LET ((STRING (MAKE-ARRAY N :TYPE (IF (CHAR-FAT-P CHAR) 'ART-FAT-STRING
						     'ART-STRING)
					 :INITIAL-VALUE CHAR)))
	   (INSERT BP STRING)))))
