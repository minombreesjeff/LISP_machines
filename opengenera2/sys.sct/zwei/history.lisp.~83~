;;; -*- Mode: LISP; Base: 8; Package: ZWEI -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; History mechanism -- part of the "New Yank System"

;;; The basic parts of this are in SYS:IO;HISTORY-INNER.LISP

;;; Elements are intervals.  This is used for the kill history, for example.
(DEFFLAVOR INTERVAL-HISTORY () (HISTORY))

;Print it briefly, with carriage returns suppressed
(DEFMETHOD (:PRINT-ELEMENT INTERVAL-HISTORY) (ELEMENT STREAM)
  (LET ((*INTERVAL* ELEMENT)
	(*MODE-WORD-SYNTAX-TABLE* *WORD-SYNTAX-TABLE*))
    (SUMMARIZE-INTERVAL (INTERVAL-FIRST-BP ELEMENT) (INTERVAL-LAST-BP ELEMENT)
			T 30. STREAM NIL)))

(DEFMETHOD (:EQUAL-ELEMENTS INTERVAL-HISTORY) (ELEMENT1 ELEMENT2)
  (INTERVAL-EQUAL ELEMENT1 NIL NIL ELEMENT2 NIL NIL T))

(DEFMETHOD (:MATCH-ELEMENT INTERVAL-HISTORY) (STRING ELEMENT)
  (LET ((*INTERVAL* ELEMENT))
    (SEARCH (INTERVAL-FIRST-BP ELEMENT) STRING)))

;;; "Fake" history that uses the buffer visitation history of the current window.
;;; --- Should any other buffers in existence be appended to that? ---
;;; The elements are strings (buffer names).
(DEFFLAVOR BUFFER-HISTORY ((RELEVANT-WINDOW NIL)) (HISTORY))

;The default is NIL, a buffer, or :OTHER meaning the most recent buffer
;other than the one that is selected now.
(DEFMETHOD (:FUNCALL-WITH-DEFAULT BUFFER-HISTORY) (DEFAULT FUNCTION &REST ARGS)
  (SETQ ROTATION 0)
  (LETF ((TEMPORARY-ELEMENT (SEND SELF ':CANONICALIZE-DEFAULT DEFAULT))
	 (RELEVANT-WINDOW *WINDOW*))
    (APPLY FUNCTION ARGS)))

(DEFMETHOD (:CANONICALIZE-DEFAULT BUFFER-HISTORY) (DEFAULT)
  (COND ((EQ DEFAULT ':OTHER)
	 (DOLIST (BUF (WINDOW-BUFFER-HISTORY (SEND SELF ':RELEVANT-WINDOW)))
	   (OR (EQ BUF *INTERVAL*)
	       ;(NOT (MEMQ BUFFER *ZMACS-BUFFER-LIST*))	; ignore killed buffers
	       (RETURN (SEND BUF ':NAME)))))
	((TYPEP DEFAULT 'BUFFER)
	 (SEND DEFAULT ':NAME))
	((LISTP DEFAULT)
	 (SEND (FIRST DEFAULT) :NAME))
	(T DEFAULT)))

(DEFMETHOD (:TYPE BUFFER-HISTORY) () 'BUFFER)

;This kludge is necessary because when this is called from inside the minibuffer
;*WINDOW* has been bound to the wrong window.
(DEFMETHOD (:RELEVANT-WINDOW BUFFER-HISTORY) ()
  (OR RELEVANT-WINDOW
      (AND (BOUNDP '*WINDOW*)
	   *WINDOW*)))

(DEFMETHOD (:PUSH BUFFER-HISTORY) (IGNORE)
  (SETQ ROTATION 0 TEMPORARY-ELEMENT NIL RELEVANT-WINDOW NIL))

(DEFMETHOD (:ELEMENT BUFFER-HISTORY) (N &OPTIONAL FIXUP-P &AUX (DELTA 0))
  (DECLARE (VALUES ELEMENT INDEX))
  (BLOCK NIL
    (WHEN TEMPORARY-ELEMENT
      (WHEN (OR (ZEROP N) (AND FIXUP-P (MINUSP N)))
	(RETURN (VALUES TEMPORARY-ELEMENT 0)))
      (DECF N)
      (INCF DELTA))
    (LET* ((WIN (SEND SELF ':RELEVANT-WINDOW))
	   (L (WHEN WIN (WINDOW-BUFFER-HISTORY WIN))))
      (COND ((NULL L) NIL)
	    ((MINUSP N) (VALUES (AND FIXUP-P (SEND (FIRST L) ':NAME)) DELTA))
	    ((< N (LENGTH L)) (VALUES (SEND (NTH N L) ':NAME) (+ N DELTA)))
	    (FIXUP-P (VALUES (SEND (CAR (LAST L)) ':NAME) (+ (LENGTH L) -1 DELTA)))
	    (T NIL)))))

(DEFMETHOD (:LENGTH BUFFER-HISTORY) ()
  (+ (LENGTH (WINDOW-BUFFER-HISTORY (SEND SELF ':RELEVANT-WINDOW)))
     (IF TEMPORARY-ELEMENT 1 0)))

(DEFMETHOD (:HISTORY-ELEMENT-PRESENTATION-TYPE BUFFER-HISTORY) (BUFFER)
  (CL:TYPE-OF BUFFER))

(DEFMETHOD (:DISPLAY-HISTORY-MENU-ELEMENT BUFFER-HISTORY) (STREAM NUMBER INDEX)
  (IF TEMPORARY-ELEMENT (DECF INDEX))
  (LET ((BUFFER (IF (MINUSP INDEX)
		    (FIND-BUFFER-NAMED TEMPORARY-ELEMENT)
		    (NTH INDEX (WINDOW-BUFFER-HISTORY (SEND SELF ':RELEVANT-WINDOW))))))
    (DW:WITH-OUTPUT-AS-PRESENTATION (:STREAM STREAM
				     :OBJECT BUFFER
				     :TYPE (SEND SELF :HISTORY-ELEMENT-PRESENTATION-TYPE
						 BUFFER))
      (FORMAT STREAM "~3D: ~A" NUMBER (SEND BUFFER :NAME))))
  (SEND STREAM :TYO #\CR))

;;; +++ This should be looping through the history looking for things
;;; +++ that match the type, not just returning the first one off the
;;; +++ history.  What if someone invents a subtype of D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")buffer0?  --RWK
(DEFMETHOD (DW::YANK-FOR-PRESENTATION-TYPE BUFFER-HISTORY) (ACCEPT-TYPE
							     &KEY HISTORY-ELEMENT-CONVERTER)
  (IGNORE HISTORY-ELEMENT-CONVERTER)
  (UNLESS (DW:PRESENTATION-SUBTYPEP-CACHED ACCEPT-TYPE 'BUFFER)
    (FERROR "~S is not a legal type to get from a buffer history." ACCEPT-TYPE))
  (LET ((BUFFER-NAME (SEND SELF :YANK)))
    (WHEN BUFFER-NAME
      (VALUES (FIND-BUFFER-NAMED BUFFER-NAME) 'BUFFER T))))

(DEFMETHOD (DW::PUSH-FOR-PRESENTATION-TYPE BUFFER-HISTORY) (OBJECT TYPE &OPTIONAL STRING)
  (IGNORE TYPE STRING)
  (SEND SELF :PUSH (SEND OBJECT :NAME)))

;;; The mini-buffer command history

;;; This history is used with executing commands, not with yanking commands.
;;; Each element of the history is a list whose first element is a list
;;; of the command function symbol, the numeric-arg-p, the numeric arg,
;;; and if known the key the command came from.
;;; Succeeding elements of an element are strings: the various arguments.
;;; This history never has defaults.

;;; the DEFFLAVOR for MINI-BUFFER-HISTORY has been moved to DEFS.

(SCL:DEFINE-PRESENTATION-TYPE MINI-BUFFER-COMMAND ()
  :PRINTER ((ELEMENT STREAM)
	    (DESTRUCTURING-BIND (NIL (COMMAND . IGNORE) . IGNORE) ELEMENT
	      (SCL:PRESENT COMMAND 'EXTENDED-COMMAND-NAME :STREAM STREAM))))

(DEFMETHOD (:HISTORY-ELEMENT-PRESENTATION-TYPE MINI-BUFFER-HISTORY) (IGNORE)
  'MINI-BUFFER-COMMAND)

(DEFMETHOD (:PRINT-ELEMENT MINI-BUFFER-HISTORY) (ELEMENT STREAM)
  (DESTRUCTURING-BIND ((COMMAND ARG-P ARG KEY) . STRINGS) ELEMENT
    (WHEN ARG-P
      (SEND STREAM ':STRING-OUT (FORMAT-ARGUMENT ARG-P ARG))
      (SEND STREAM ':TYO #\SP))
    ;; KEY-FOR-COMMAND is pretty slow, so try to second-guess it using hint from history
    (COND ((AND (CHARACTERP KEY) (EQ (COMMAND-LOOKUP KEY *COMTAB*) COMMAND))
	   (FORMAT STREAM "~:@C" KEY))
	  ((AND (CHARACTERP KEY)
		(EQ (COMMAND-LOOKUP KEY *ZMACS-CONTROL-X-COMTAB*) COMMAND)
		(PREFIX-COMMAND-P (SETQ ARG (COMMAND-LOOKUP #\c-X *COMTAB*)))
		(EQ (COMMAND-LOOKUP KEY (GET-PREFIX-COMMAND-COMTAB ARG)) COMMAND))
	   (FORMAT STREAM "~:@C ~:@C" #\c-X KEY))
	  (T (SEND STREAM ':STRING-OUT (OR (KEY-FOR-COMMAND COMMAND)
					   (GET COMMAND 'COMMAND-NAME)))))
    (DOLIST (STRING STRINGS)
      (SEND STREAM ':TYO #\SP)      
      (SEND STREAM ':STRING-OUT STRING))))

;A command matches if any one of its argument strings matches.
;But in any case only commands that will work if re-executed count.
;Note that for m-X commands, the "real" command name is the first argument string.
;I decided that matching the command name and/or the key name was not
;desirable, even though one or the other of them appears in the history display.
;Matching the key name is slow, conses a string, and sometimes tries to match against NIL.
(DEFMETHOD (:MATCH-ELEMENT MINI-BUFFER-HISTORY) (STRING ELEMENT)
  (DESTRUCTURING-BIND ((COMMAND ARG-P ARG) . STRINGS) ELEMENT
    ARG-P ARG ;not used
    (AND (OR ;(STRING-SEARCH STRING (KEY-FOR-COMMAND COMMAND))
	     ;(STRING-SEARCH STRING (GET COMMAND 'COMMAND-NAME))
	     (LOOP FOR X IN STRINGS
		   THEREIS (STRING-SEARCH STRING X)))
	 (COMMAND-AVAILABLE COMMAND))))

(DEFMETHOD (:ELEMENT-VISIBLE MINI-BUFFER-HISTORY) (ELEMENT)
  (COMMAND-AVAILABLE (CAAR ELEMENT)))

(DEFMETHOD (:FUNCALL-WITH-DEFAULT MINI-BUFFER-HISTORY) (&REST IGNORE)
  (FERROR "This operation is illegal for the MINI-BUFFER-HISTORY"))

(DEFMETHOD (:CANONICALIZE-DEFAULT MINI-BUFFER-HISTORY) (&REST IGNORE)
  (FERROR "This operation is illegal for the MINI-BUFFER-HISTORY"))

(DEFWRAPPER (:PUSH MINI-BUFFER-HISTORY) ((ELEMENT) . BODY)
  `(WHEN (CAAR ELEMENT)				;Can get NILs from Zmail
     . ,BODY))

(COMPILE-FLAVOR-METHODS HISTORY ABBREVIATING-HISTORY INTERVAL-HISTORY
			BUFFER-HISTORY MINI-BUFFER-HISTORY)

(DEFUN RESET-EDITOR-HISTORIES ()
  (DECLARE (SPECIAL *ZMAIL-WINDOW*))
  (LET ((MESSAGE :RESET))
    (SEND *KILL-HISTORY* MESSAGE)
    (SEND *DEFAULT-HISTORY* MESSAGE)
    (SEND *REPLACE-HISTORY* MESSAGE)
    (SEND *BUFFER-HISTORY* MESSAGE)
    (SEND *PATHNAME-HISTORY* MESSAGE)
    (SEND *SEARCH-HISTORY* MESSAGE)
    (LOOP FOR COMMAND-LOOP IN *ZMACS-COMMAND-LOOPS*
	  DOING (SEND (SYMEVAL-IN-INSTANCE COMMAND-LOOP '*MINI-BUFFER-HISTORY*) MESSAGE))
    ;;--- Have to reset the Zmail command history by hand
    (WHEN (VARIABLE-BOUNDP *ZMAIL-WINDOW*)
      (LET* ((ZMAIL-PROCESS
	       (SEND *ZMAIL-WINDOW* :PROCESS))
	     (COMMAND-LOOP
	       (AND ZMAIL-PROCESS
		    (PROCESS-STACK-GROUP ZMAIL-PROCESS)
		    (SYMEVAL-IN-STACK-GROUP '*CURRENT-COMMAND-LOOP*
					    (PROCESS-STACK-GROUP ZMAIL-PROCESS))))
	     (HISTORY
	       (AND COMMAND-LOOP
		    (SYMEVAL-IN-INSTANCE COMMAND-LOOP '*MINI-BUFFER-HISTORY*))))
	(WHEN HISTORY
	  (SEND HISTORY MESSAGE))))
    (MAPC #'DISCARD-CHANGE-HISTORY *ZMACS-BUFFER-LIST*)
    NIL))

(ADD-INITIALIZATION "Reset editor histories"
		    '(RESET-EDITOR-HISTORIES)
		    '(BEFORE-COLD))

(SI:DEFINE-GC-CLEANUP RESET-EDITOR-HISTORIES ("Reset all editor histories? ")
  (RESET-EDITOR-HISTORIES)
  NIL)
