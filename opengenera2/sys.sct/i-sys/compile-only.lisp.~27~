;;; -*- mode: lisp; syntax: Common-lisp; Package: CLI; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;Artifacts of the compiler:
;;;These primitives work in compiled code but not in interpreted code

(defprop compiler:dont-allow-calls t si:debug-info)

(defun compiled-only-function-error (function)
  (declare (dbg:error-reporter))
  (error "The ~S function may only be called from compiled code." function))

(defun compiled-only-special-form-error (function)
  (declare (dbg:error-reporter))
  (error "The ~S special form may only be called from compiled code." function))

(defmacro def-compiled-only-function (name args &body declarations)
  `(defun ,name ,args
     (declare (compiler:dont-allow-calls))
     ,@declarations
     (declare (ignore ,@(remove-if #'(lambda (x) (member x lambda-list-keywords)) args)))
     (compiled-only-function-error ',name)))

(defmacro def-compiled-only-special-form (name args &body declarations)
  `(si:define-special-form ,name ,args
     (declare (compiler:dont-allow-calls))
     ,@declarations
     ,@(remove-if #'(lambda (x) (member x lambda-list-keywords)) args)
     (compiled-only-function-error ',name)))

;;; Builtins

(def-compiled-only-function %allocate-list-block (area length))

(def-compiled-only-function %allocate-structure-block (area length))

(def-compiled-only-function %jump (pc))

(def-compiled-only-function %restore-binding-stack-level ()
  )

(def-compiled-only-function %save-binding-stack-level (a)
  (declare (compiler:return-type)))

(def-compiled-only-function *-internal (a b)
  )

(def-compiled-only-function *rational-quotient (a b)
  )

(def-compiled-only-function +-internal (a b)
  )

(def-compiled-only-function --internal (a b)
  )

(def-compiled-only-function /-internal (a b)
  )

(def-compiled-only-function ceiling-internal (a b)
  (declare (compiler:return-type (values integer number))))

(def-compiled-only-function dpb-internal (a b c)
  (declare (compiler:return-type integer)))

(def-compiled-only-function floor-internal (a b)
  (declare (compiler:return-type (values integer number))))

(def-compiled-only-function internal-< (a b)
  (declare (side-effects simple reducible)))

(def-compiled-only-function internal-= (a b)
  (declare (side-effects simple reducible)))

(def-compiled-only-function internal-> (a b)
  (declare (side-effects simple reducible)))

(def-compiled-only-function ldb-internal (a b)
  (declare (compiler:return-type integer)))

(def-compiled-only-function logand-internal (a b)
  (declare (compiler:return-type integer)))

(def-compiled-only-function logior-internal (a b)
  (declare (compiler:return-type integer)))

(def-compiled-only-function logtest-internal (a b)
  (declare (compiler:return-type scl:boolean)))

(def-compiled-only-function logxor-internal (a b)
  (declare (compiler:return-type integer)))

(def-compiled-only-function round-internal (a b)
  (declare (compiler:return-type (values integer number))))

(def-compiled-only-function truncate-internal (a b)
  (declare (compiler:return-type (values integer number))))

;; Phase 1 hook and builtin

(compiler:make-obsolete zl:bind "use SYS:%BIND-LOCATION instead")

(def-compiled-only-function %bind-location (pointer value)
  (declare (compiler:return-type)))

;;; Done by phase 1

(def-compiled-only-function %push (value)
  (declare (compiler:return-type)))

(def-compiled-only-function %pop ())

(def-compiled-only-function %unbind ()
  (declare (compiler:return-type)))

;;; Transformed

(def-compiled-only-function %finish-stack-list (n)
  (declare (compiler:return-type cl:cons)))

(def-compiled-only-function %finish-stack-list* (n)
  (declare (compiler:return-type cl:cons)))

;;; Misc.

(def-compiled-only-function %set-cdr-code-1 (location))

(def-compiled-only-function %set-cdr-code-2 (location))

;; Assembled

(def-compiled-only-function %stack-frame-pointer ()
  (declare (compiler:return-type scl:locative)))

(def-compiled-only-function %return-multiple ())

(def-compiled-only-function compiler:%funcall-n ())

(def-compiled-only-function compiler:%lexpr-funcall-n ())

(def-compiled-only-function %saved-continuation-register ()
  (declare (compiler:return-type scl:fixnum)))

(def-compiled-only-function %set-saved-continuation-register (new-value)
  (declare (compiler:return-type scl:fixnum)))

(def-compiled-only-function %saved-control-register ()
  (declare (compiler:return-type scl:fixnum)))

(def-compiled-only-function %saved-control-register-address ()
  (declare (compiler:return-type scl:locative)))

(def-compiled-only-function %set-saved-control-register (new-value)
  (declare (compiler:return-type scl:fixnum)))

;;; Special forms

(def-compiled-only-special-form %finish-function-call
				(function destination n-arguments lexpr)
  (declare lt:(arg-template call quote eval quote)))

(def-compiled-only-special-form %with-binding-stack-level (&body body)
  (declare lt:(arg-template . body)))

(def-compiled-only-special-form %multiple-value-push (form)
  (declare lt:(arg-template eval)))

(def-compiled-only-special-form si:source-locator (source-locator form)
  (declare lt:(arg-template quote eval)))

(def-compiled-only-special-form compiler:%stack-location-internal (n)
  (declare lt:(arg-template quote)))

(def-compiled-only-special-form compiler:%error-if (test function var &rest info)
  )

(def-compiled-only-special-form 1+local (var))

(def-compiled-only-special-form 1-local (var))

(def-compiled-only-special-form cdr-local (var))

(def-compiled-only-special-form si:%label-pc (label)
  (declare lt:(arg-template quote)))

(def-compiled-only-special-form si:%push-pc (label)
  (declare lt:(arg-template quote)))

(def-compiled-only-special-form car-local (x))

(def-compiled-only-special-form %pointer-increment (pointer))

(def-compiled-only-special-form i-lisp-compiler:icase (form quotep pop-test no-pop-test
							    &body clauses))

(def-compiled-only-special-form compiler:load-time-value-1 (&rest form))

(def-compiled-only-function sys:fast-aref-1 (index array-register-control-word))
(def-compiled-only-function sys:fast-aset-1 (value index array-register-control-word))
(def-compiled-only-function sys:%alu (op1 op2))
(def-compiled-only-function sys:%merge-cdr-no-pop (cdr-source cdr-destination-loc))

(def-compiled-only-special-form compiler:%instruction (opcode operand)
  (declare lt:(arg-template quote quote)))

(def-compiled-only-function si:%ensure-n-pushes-without-stack-cache-spill (n))

(def-compiled-only-special-form si:%funcall-in-trap-mode (trap-mode-form function &rest args)
  (declare lt:(arg-template arbitrary (repeat eval))))
