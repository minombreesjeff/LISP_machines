;;; -*- Mode:Lisp; Syntax:Common-Lisp; Package:CLI; Base:10; Lowercase:T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Interrupt Metering

(defwiredvar *interrupt-mode-meters*)
(defwiredvar *interrupt-mode*)
(defwiredvar *interrupt-mode-time*)

(defenumerated *interrupt-modes*
	       (%interrupt-mode-task-0
		 %interrupt-mode-task-1
		 %interrupt-mode-task-2
		 %interrupt-mode-task-3
		 %interrupt-mode-low-priority-sequence-break
		 %interrupt-mode-high-priority-sequence-break
		 %interrupt-mode-preempt))

;;; This function must not use any BAR's.
(defwiredsubst set-interrupt-mode (new-mode)
  (let ((clock (%microsecond-clock))
	(old-mode *interrupt-mode*))
    (when old-mode
      (let ((loc (%pointer-plus *interrupt-mode-meters* old-mode)))
	(%memory-write loc (%32-bit-plus (%memory-read loc)
					 (%32-bit-difference clock *interrupt-mode-time*)))))
    (setf *interrupt-mode* new-mode)
    (setf *interrupt-mode-time* clock)))



(defwiredvar *sequence-break-interval* 25000)
(defwiredvar *interrupt-metering-interval* nil)
(defwiredvar *interrupt-metering-hook* nil)
(defwiredvar *timer-period*)
(defwiredvar *timer-multiple*)
(defwiredvar *timer-phase*)

(defwiredfun enable-periodic-timer (&optional metering-interval metering-hook)
  (system-case
    ((Merlin Zora)
     (stop-82C54-periodic-timer))
    ((Domino)
      (stop-8032-periodic-timer))
    ((VLM)
     (setf (emb-clock-interval) -1))
    ((Embedded)))
  (setf *interrupt-metering-interval* metering-interval)
  (setf *interrupt-metering-hook* metering-hook)
  (system-case
    ((Merlin Zora)
     (setup-periodic-timer)
     (start-82C54-periodic-timer *timer-period*))
    ((Domino)
     (setup-periodic-timer)
     (start-8032-periodic-timer *timer-period*))
    ((VLM)
     (cond (*interrupt-metering-interval*
	     (setf (emb-clock-interval) *interrupt-metering-interval*))
	   ((and si:*new-scheduler-enabled*
		 (or (> (vlm-genera-major-version) 5)
		     (and (= (vlm-genera-major-version) 5)
			  ( (vlm-genera-minor-version) 5))))
	    (setf (emb-clock-interval) -1))
	   (t
	     (setf (emb-clock-interval) *sequence-break-interval*))))
    ((Embedded)
     (setf (emb-clock-interval) *sequence-break-interval*)))
  nil)

(defwiredfun setup-periodic-timer ()
  (let ((sb-interval *sequence-break-interval*))
    (cond ((and (not (null *interrupt-metering-interval*))
		(< *interrupt-metering-interval* 65535))
	   (setf *timer-period* *interrupt-metering-interval*)
	   (setf *timer-multiple* (floor sb-interval *timer-period*)))
	  (t
	   (setf *timer-multiple* (ceiling sb-interval 65535))
	   (setf *timer-period* (floor sb-interval *timer-multiple*)))))
  (setf *timer-phase* *timer-multiple*))

(defwiredfun periodic-timer-function (&optional ignore)
  (si:wired-console-handler)
  (neti:82586-periodic-timer-function)
  (system-case
    (Embedded (neti:emb-ethernet-periodic-timer-function))
    (otherwise nil))
  (storage::wakeup-all-units)
  (setf *timer-phase* *timer-multiple*)
  nil)



;;;; Interrupt tasks

;;; The I-machine architecture provides essentially one interrupt level, the high-priority
;;; I/O level (trap-mode=2).  Because the low priority level (trap-mode=1) is used for
;;; running the wired system code, low priority interrupts are subject to unbounded delays
;;; of many milliseconds, and are therefore useful only for noncritical applications like
;;; long-term timers for the scheduler.
;;;
;;; To provide prompt service for critical interrupts, the processor must not spend long
;;; periods of time at trap mode 2 performing lengthy service of less critical interrupts.
;;; Hence we have the following mechanism, called D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")interrupt tasks0, for deferring all but
;;; the most critical interrupt service until the processor is running at low priority.
;;; Essentially, this is a software simulation of a more extensive hardware interrupt
;;; mechanism.
;;;
;;; Briefly, a high priority interrupt service routine may call enqueue-interrupt-task with
;;; a function, an argument, and a priority.  Immediately after the processor returns to
;;; lower trap mode, all queued interrupt tasks are executed in order of descending
;;; priority (in FIFO order within a given priority).  While the tasks are executing, other
;;; high priority interrupts may be signaled, resulting (maybe) in more enqueued interrupt
;;; tasks; if an interrupt enqueues a higher-priority task than one that's currently
;;; executing, the newer one is executed before returning to the current one.  It is the
;;; responsibility of the various service routines to avoid excessive recursion within
;;; their particular domain.
;;;
;;; For the most part, the only processing that should be done in the interrupt handlers at
;;; trap mode 2 is that needed to clear level-sensitive interrupts, quick critical service
;;; like shutting down the serial chip upon receipt of an XOFF, and whatever processing to
;;; ensure that things are synchronized and don't get overly recursive.  Certainly any kind
;;; of copying between buffers should not be done at trap mode 2.  As a rule of thumb,
;;; anything that takes more than 20-50 microseconds should probably be done as an
;;; interrupt task.  Enqueuing an interrupt task to post a wakeup to a real process will
;;; probably be a common idiom, and having a higher-priority interrupt task enqueue a
;;; lower-priority interrupt task might also be useful.
;;;
;;; In the current implementation, there are only four levels of interrupt task priority,
;;; numbered from 0 to 3, for efficiency reasons.  I think they should be used as follows:
;;;
;;;   Priority 3 -- for short, critical device service that isn't short enough to be
;;;                 done entirely in the interrupt handler.
;;;   Priority 2 -- for high priority simulated DMA (disk I/O buffer management, etc)
;;;   Priority 1 -- for low priority simulated DMA (network I/O buffer management, etc)
;;;   Priority 0 -- for things related more to the unwired system than the wired I/O
;;;                 system, like keyboard&mouse service, sys:sequence-break, posting
;;;                 process wakeups, etc.
;;;
;;; Priority 0 and 1 tasks are handled somewhat differently than the higher priorities.
;;; Priority 0 are executed only when the processor is about to return to emulator mode.
;;; The preempt trap mechanism is used to implement this.  This means that priority 0
;;; tasks will not interrupt non-task code running in extra-stack mode.
;;; Priority 1 tasks will run either before returning to emulator mode or while inside
;;; WIRED-WAIT.
;;;
;;; The current implementation uses two representations for the queue of outstanding
;;; interrupt tasks.  One representation is used when there is only one entry in the queue,
;;; which should be quite common.  When enqueueing an interrupt task, if the queue is empty
;;; then we just block-write the information to this cache, and we similarly block-read it
;;; back when the time comes to execute it.  The more general representation, used when
;;; there are multiple entries in the queue, is four separate threaded lists, one for each
;;; priority level.  Each node in the lists contains three words: the function and argument
;;; of the task, and a link to the next node.  There is a free list of unused nodes.  All
;;; manipulation of these structures is done a trap-mode=2, so locking is not a problem.
;;; If an interrupt task or some other routine running at lower priority wants to enqueue a
;;; task, it must first raise the trap mode.
;;;
;;; In the current incarnation of the code,
;;;    (defwiredfun random-interrupt-handler ()
;;;      (clear-random-interrupt)
;;;      (enqueue-interrupt-task #'aux-process-wakeup *random-process* 0))
;;; should take about 10 microseconds longer in the typical case, and 25-30 microseconds
;;; longer in the general case, than
;;;    (defwiredfun random-interrupt-handler ()
;;;      (clear-random-interrupt)
;;;      (aux-process-wakeup *random-process*))
;;; using an 8 megahertz Ivory.

;;; The priority of the running interrupt task, or -1 if none.
(defwiredvar *interrupt-task-priority*)
;;; A locative to a block of three words used as a quick representation when there's
;;; only one task in the queue.  If the first word is NIL, then there are no entries
;;; in the queue.  If the first word is a compiled function, then the three words are
;;; the function, argument, and priority of the only task in the queue.  If the first
;;; word is anything else, then all tasks are found in the real queue.
(defwiredvar *interrupt-task-cache*)
;;; Locatives to a block of four interrupt task nodes each, each of which is the head or
;;; tail (the last node) of the list of interrupt tasks at that priority.  If there is only
;;; one task for a given priority, the head and tail are the same.  If there are none, the
;;; head is nil, and the tail is garbage.
(defwiredvar *interrupt-task-heads*)
(defwiredvar *interrupt-task-tails*)
;;; A thread through the free interrupt task nodes, or nil if there aren't any.
(defwiredvar *interrupt-task-free-list*)
;;; An array allocated by the cold load generator, the contents of which is used by
;;; initialize-interrupt-tasks to build the interrupt task structures.
(defwiredvar *interrupt-task-storage*)

;;; Called at trap-mode=2 to enqueue a task to be serviced after the processor lowers
;;; the interrupt priority.  Takes about 25 cycles in the simple case, 80 cycles for
;;; the general case, and 130 cycles for the worst case.
(defwiredfun enqueue-interrupt-task (function argument priority)
  (flet ((enqueue-interrupt-task-internal (function argument priority)
	   (let ((node *interrupt-task-free-list*))
	     (when (null node)
	       (gc-interrupt-task-queue)
	       (setf node *interrupt-task-free-list*)
	       (when (null node)
		 ;; There's no better way to deal with this situation; we can't free
		 ;; up space by executing tasks without violating FIFOness.
		 (wired-ferror :fatal "Interrupt task queue is full")))
	     (let* ((head-location (%pointer-plus *interrupt-task-heads* priority))
		   (tail-location (%pointer-plus head-location 4)	;tweak
				  #+ignore
				  (%pointer-plus *interrupt-task-tails* priority)))
	       (setf (%block-register 1) node)
	       (%block-write 1 function)	;initialize interrupt-task function
	       (%block-write 1 argument)	;initialize interrupt-task argument
	       (%memory-write (locf *interrupt-task-free-list*)
			      (%block-read 1 :no-increment t :prefetch nil))
	       (%block-write 1 nil)		;initialize interrupt-task thread
	       (cond ((not (null (location-contents head-location)))
		      ;; If there are already nodes in this list, insert this one at the end
		      (%memory-write (%pointer-plus (location-contents tail-location) 2) node)
		      (%memory-write tail-location node))
		     (t
		      ;; If this will be the only node in the list, make it the head and tail
		      (%memory-write head-location node)
		      (%memory-write tail-location node)))
	       nil))))
    (setf (%block-register 1) *interrupt-task-cache*)
    (let ((f (%block-read 1 :no-increment t :prefetch nil)))
      (typecase f
        (null
	  ;; There are no other tasks in the queue.  Just write this task into the cache.
          (%block-write 1 function)
          (%block-write 1 argument)
          (%block-write 1 priority))
        (compiled-function
	  ;; There's already a single outstanding task.  Switch to the non-abbreviated
	  ;; queue representation.
          (%block-write 1 -1)
	  ;; Add the first task to the queue.
          (enqueue-interrupt-task-internal f (%block-read 1) (%block-read 1))
	  ;; Now add this task.
          (enqueue-interrupt-task-internal function argument priority))
        (integer
	  ;; The queue is already using the nonabbreviated representation.
          (enqueue-interrupt-task-internal function argument priority))))
    ;; priorities 0 and 1 are special in that they use the preempt mechanism.
    (when (<= priority 1)
      (si:%set-immediate-preempt))
    nil))

;; Call this instead of ENQUEUE-INTERRUPT-TASK if you are not running in trap-mode=2.
;; This could be optimized somewhat.
(defwiredfun enqueue-interrupt-task-not-io (function argument priority)
  (%set-trap-mode 2)
  (enqueue-interrupt-task function argument priority)
  ;; Execute all queued interrupt tasks of higher priority than *interrupt-task-priority*.
  (execute-interrupt-tasks)
  nil)

(defwiredfun gc-interrupt-task-queue ()
  (dotimes (priority 4)
    (let ((old-head nil)
	  (head (%memory-read (%pointer-plus *interrupt-task-heads* priority))))
      (loop
	(when (null head) (return))
	(setf (%block-register 1) head)
	(let* ((first-function (%block-read 1))
	       (first-argument (%block-read 1))
	       (subhead-location (%block-register 1))
	       (subhead (%block-read 1 :prefetch nil)))
	  (loop
	    (when (null subhead) (return))
	    (setf (%block-register 1) subhead)
	    (let* ((second-function (%block-read 1))
		   (second-argument (%block-read 1)))
	      (cond ((and (eq first-function second-function)
			  (eq first-argument second-argument))
		     (%memory-write subhead-location
				    (setf subhead 
					  (prog1 (%block-read 1 :prefetch nil :no-increment t)
						 (%block-write 1 *interrupt-task-free-list*)
						 (%memory-write (locf *interrupt-task-free-list*)
								subhead)))))
		    (t
		     (setf subhead-location (%block-register 1))
		     (setf subhead (%block-read 1 :prefetch nil)))))))
	(shiftf old-head head (%memory-read (%pointer-plus head 2))))
      (%memory-write (%pointer-plus *interrupt-task-tails* priority) old-head))))

;;; Called at trap-mode=2 after servicing one or more high priority interrupts.  This
;;; executes all tasks in the interrupt task queue that have priority greater than the
;;; current *interrupt-task-priority*.  Takes approximately 60 cycles overhead to execute
;;; a task for the simple case, and about 100 cycles pre-task overhead for the general
;;; case.  Note: this clobbers BAR 1.
(defwiredfun execute-interrupt-tasks ()
  (let ((task-cache *interrupt-task-cache*)
	(ambient-priority *interrupt-task-priority*)
	(old-interrupt-mode *interrupt-mode*))
    ;; Note: this loop assumes that during the execution of an interrupt task, other
    ;; tasks can be added or removed and the queue can change representations, so it
    ;; has to start from scratch with each iteration.
    (loop do
      (setf (%block-register 1) task-cache)
      (let ((function (or (%block-read 1) (return nil)))	;exit if cache contains nil
	    (argument (%block-read 1))
	    (priority (%block-read 1 :prefetch nil)))
	(typecase function
	  (compiled-function
	    ;; This is the only task in the queue.  If it's not of high enough priority,
	    ;; exit.  Otherwise, remove it from the queue (just clobber the cache to nil)
	    ;; and execute it.
	    (if ( priority ambient-priority)
		(return nil)
	      ;; It's important to clear the cache before executing the task.
	      (%memory-write task-cache nil)
	      ;; Adjust the ambient priority and execute the task at trap mode 1.
	      (%memory-write (locf *interrupt-task-priority*) priority)
	      (unless (eql priority *interrupt-mode*)
		(set-interrupt-mode priority))
	      (%funcall-in-trap-mode (%set-trap-mode trap-mode-extra-stack)
				     function argument)))
	  (integer
	    ;; There are multiple tasks in the queue.  Search for the one with the highest
	    ;; priority and see if it's high enough to be executable.
	    (let ((task-heads *interrupt-task-heads*))
	      (setf (%block-register 1) task-heads)
	      (let ((blue (%block-read 1))
		    (green (%block-read 1))
		    (yellow (%block-read 1))
		    (red (%block-read 1 :prefetch nil)))
		(multiple-value-bind (node priority)
		    (cond (red (values red 3))
			  (yellow (values yellow 2))
			  (green (values green 1))
			  (blue (values blue 0))
			  (t
			   ;; The queue is empty.  End the loop, but also clear the task
			   ;; cache, so we can use the fast representation for the next task.
			   (%memory-write task-cache nil)
			   (return nil)))
		  ;; If the highest priority task in the queue isn't high enough, exit.
		  (when ( priority ambient-priority) (return nil))
		  ;; Dequeue this task node and execute the task.
		  (setf (%block-register 1) node)
		  (let ((function (%block-read 1))
			(argument (%block-read 1)))
		    ;; Pop this node off the task list...
		    (%memory-write (%pointer-plus task-heads priority)
				   (%block-read 1 :no-increment t :prefetch nil))
		    ;; ...and add it to the free list.
		    ;; No need for (si:prepare-for-block-write) due to unmapped address.
		    (%block-write 1 *interrupt-task-free-list*)
		    (%memory-write (locf *interrupt-task-free-list*) node)
		    ;; Adjust the ambient priority and execute the task at trap mode 1.
		    (%memory-write (locf *interrupt-task-priority*) priority)
		    (unless (eql priority *interrupt-mode*)
		      (set-interrupt-mode priority))
		    (%funcall-in-trap-mode (%set-trap-mode trap-mode-extra-stack)
					   function argument)))))))))
    (%memory-write (locf *interrupt-task-priority*) ambient-priority)
    (unless (eql old-interrupt-mode *interrupt-mode*)
      (set-interrupt-mode old-interrupt-mode)))
  nil)

;; This is called by the preempt trap handler and by WIRED-WAIT.
;; This is the only way that level-0 and level-1 interrupt tasks get run.
(defwiredfun execute-interrupt-tasks-not-io (through-level)
  (let ((old-priority *interrupt-task-priority*))
    (unwind-protect
	(progn
	  (%set-trap-mode 2)
	  (setf *interrupt-task-priority* (1- through-level))
	  (execute-interrupt-tasks))
      (setf *interrupt-task-priority* old-priority)))
  nil)



;;;; Initialization

(defwiredfun initialize-interrupts ()
  ;; Create interrupt task structures.
  (let ((address (locf (aref *interrupt-task-storage* 0)))
        (length (array-short-length-field *interrupt-task-storage*)))
    (%block-store-cdr-and-contents address length 0 nil 0)
    ;; Heads and tails should be allocated in this order.
    (setq *interrupt-task-heads* address)	;4 words
    (setq *interrupt-task-tails* (%pointer-plus address 4))	;4 words
    (setq *interrupt-task-cache* (%pointer-plus address 8))	;3 words
    (setq *interrupt-mode-meters* (%pointer-plus address 11))
    (%block-store-cdr-and-contents *interrupt-mode-meters* 7 0 0 0)
    (setq *interrupt-task-free-list* (%pointer-plus address 18))	;3 words (first node)
    ;; Allocate the remaining space for task nodes, and link them together.
    (loop repeat (floor (- length 18) 3)
          for p first (%pointer-plus address 18) then n
          for n first (%pointer-plus p 3) then (%pointer-plus p 3)
          do (%memory-write (%pointer-plus p 2) n)
          finally (%memory-write (%pointer-plus p 2) nil)))
  ;; No interrupt tasks are running.
  (setq *interrupt-task-priority* 1)
  (setf *interrupt-mode* nil)
  ;; Enable interrupts
  (system-case
    ((Merlin Zora) (merlin-initialize-interrupts))
    ((Domino) (domino-initialize-interrupts))
    (otherwise nil))
  (system-case
    ((Embedded) (initialize-emb-signals))
    (otherwise nil))
  nil)



(defwiredvar si:*return-kludge-0-helper-continuation*)	;set up by cold-load generator

(defmacro check-for-hung-instruction (pc)
  `(progn
     (when (= (ldb %%cr.trap-mode (%saved-control-register)) trap-mode-emulator)
       (let ((pc ,pc))
	 ;; Drop back to extra stack mode if not already there.  Assumes we are
	 ;; already at least in extra stack mode.
	 (%set-trap-mode trap-mode-extra-stack)
	 (when (let ((instruction-word
		       (%memory-read pc :cycle-type %memory-raw :set-cdr-next nil)))
		 ;; MEMBER, ASSOC, and RGETF have consecutive opcodes.  The high 4 bits of
		 ;; the opcode are all the same.
		 (if (type-member pc dtp-even-pc)
		     (and ( (%data-type instruction-word) dtp-packed-instruction-60)
			  (< (1- (min ilc:*member-opcode* ilc:*assoc-opcode* ilc:*rgetf-opcode*))
			     (ldb %%packed-instruction-opcode (%fixnum instruction-word))
			     (1+ (max ilc:*member-opcode* ilc:*assoc-opcode*
				      ilc:*rgetf-opcode*))))
		     ;; the opcodes are #x95, #x96, and #x97.  The high 4 bits are the low
		     ;; 4 bits of the data type, the high two bits of the data type are 1s,
		     ;; so the data type we are looking for is 111001, or 71
		     (and (type-member instruction-word dtp-packed-instruction-71)
			  (< (1- (ldb (byte 4. 0.)
				      (min ilc:*member-opcode* ilc:*assoc-opcode*
					   ilc:*rgetf-opcode*)))
			     (ldb (byte 4. 28.) (%fixnum instruction-word))
			     (1+ (ldb (byte 4. 0.)
				      (max ilc:*member-opcode* ilc:*assoc-opcode*
					   ilc:*rgetf-opcode*)))))))
	   ;; We want to revert back to emulator mode here, so an emulated list operation
	   ;; on a very long list doesn't hog the machine and is abortable.  Note, however,
	   ;; that we might be calling this from the high priority interrupt routine, which
	   ;; might have interrupted out of the stack wiring code.  The stack wiring code
	   ;; is not locked and not reentrant, so it is important that a high priority
	   ;; interrupt not do anything that causes a stack-grow or stack-group-switch.
	   ;; At this point, we don't know whether we interrupted out of stack wiring code,
	   ;; except for one reason: stack wiring code doesn't use member, rgetf, or assoc.
	   ;; So we can't lose, but we have to get around stack-wirings sanity-check that
	   ;; we're not in interrupt mode (the revert-to-emulator-mode can call stack-wiring
	   ;; if it finds it actually has to grow the stack).
	   (%set-trap-mode trap-mode-extra-stack)
	   (si:%revert-to-emulator-mode)
	   (return-kludge (rescue-hung-instruction pc)))))
     (si:prepare-for-block-write)
     (%return-kludge-0)))

(defun rescue-hung-instruction (pc #+Ivory-Rev-1 kludges)
  (let* ((instruction-word (%memory-read pc :cycle-type %memory-scavenge :set-cdr-next nil))
	 (instruction
	   (if (type-member pc dtp-even-pc)
	       (ldb %%q-even-instruction (%fixnum instruction-word))
	       (dpb (ldb %%q-odd-instruction-within-tag (%tag instruction-word))
		    %%odd-instruction-tag-component
		    (ldb %%q-odd-instruction-within-pointer
			 (%pointer instruction-word)))))
	 (trap-handler-fp (%pointer-plus (%stack-frame-pointer)
					 (- (ldb %%cr.caller-frame-size
						 (%read-internal-register
						   %register-control-register))))))
    ;; Increment the PC since we will handle the instruction ourselves
    (setf (frame-caller-continuation (%stack-frame-pointer))
	  (select (ldb %%q-cdr-code-within-tag (%tag instruction-word))
	    (sequencing-pc-even+2-odd+3
	     (if (type-member pc dtp-even-pc)
		 (%pointer-plus pc 1)
		 (%make-pointer-offset dtp-even-pc pc 2)))
	    (sequencing-pc+1
	     (if (type-member pc dtp-even-pc)
		 (%make-pointer dtp-odd-pc pc)
		 (%make-pointer-offset dtp-even-pc pc 1)))
	    (sequencing-pc-1
	     (if (type-member pc dtp-even-pc)
		 (%make-pointer-offset dtp-odd-pc pc -1)
		 (%make-pointer dtp-even-pc pc)))))
    (let ((operand (ldb %%packed-instruction-8-bit-operand instruction))
	  (extra-pops 0)
	  (sp (%pointer-plus trap-handler-fp (- #+Ivory-Rev-1 kludges 1))))
      (multiple-value-prog1
	(funcall
	  (select (ldb %%packed-instruction-opcode instruction)
	    (ilc:*member-opcode* #'emulated-member)
	    (ilc:*rgetf-opcode* #'emulated-rgetf)
	    (ilc:*assoc-opcode* #'emulated-assoc))
	  ;; Get the operand
	  (select (ldb %%packed-instruction-addressing-mode instruction)
	    (stack-addressing-mode-frame-pointer
	     (%memory-read
	       (%pointer-plus
		 trap-handler-fp
		 (- operand (ldb %%cr.caller-frame-size (%saved-control-register))))
	       :cycle-type %memory-raw))
	    (stack-addressing-mode-local-pointer
	     (%memory-read
	       (%pointer-plus
		 trap-handler-fp
		 (- (+ operand
		       (ldb %%cr.argument-size
			    (frame-caller-control-register trap-handler-fp)))
		    (ldb %%cr.caller-frame-size (%saved-control-register))))
	       :cycle-type %memory-raw))
	    (stack-addressing-mode-stack-pointer
	     (if (= operand 0)
		 (progn (incf extra-pops)	;SP-POP
			(%memory-read sp :cycle-type %memory-raw))
		 (%memory-read (%pointer-plus sp (- operand 255.))
			       :cycle-type %memory-raw)))
	    (otherwise
	     (error "Illegal addressing mode encountered")))
	  ;; Get the first argumnet
	  (%memory-read (%pointer-plus sp (- extra-pops))
			:cycle-type %memory-raw))
	(si:%funcall-in-aux-stack #'si:pop-great-grandfathers-stack
				  #+Ivory-Rev-1 (- (1+ extra-pops) kludges)
				  #-Ivory-Rev-1 (1+ extra-pops))))))

(defvar *count-emulated-members* 0)
(defvar *count-emulated-rgetfs* 0)
(defvar *count-emulated-assocs* 0)

;; The code for these three functions sure looks gross until you disassemble it.

(defun emulated-member (in-list item)
  (si:incf* *count-emulated-members*)
  (let ((sublist in-list))
    (loop doing
      (compiler:%error-when (null sublist)
	(return-from emulated-member nil))
      (let ((sublist-before sublist))
	(compiler:%error-when (eql (pop sublist) item)
	  (return-from emulated-member sublist-before))))))

(defun emulated-rgetf (in-list key)
  (si:incf* *count-emulated-rgetfs*)
  (let ((sublist in-list))
    (loop doing
      (compiler:%error-when (null sublist)
	(return-from emulated-rgetf (values nil nil)))
      (compiler:%error-when (eql (pop sublist) key)
	(return-from emulated-rgetf
	  (if sublist
	      (values (car sublist) sublist)
	      ;;--- This should be some condition
	      (error "Odd number of elements in list"))))
      (setq sublist (cdr sublist)))))

(defun emulated-assoc (in-list item)
  (si:incf* *count-emulated-assocs*)
  (let ((sublist in-list))
    (loop doing
      (compiler:%error-when (null sublist)
	(return-from emulated-assoc nil))
      (let ((pair (pop sublist)))
	(compiler:%error-when (and pair (eql (car pair) item))
	  (return-from emulated-assoc pair))))))



(defwiredvar *last-interrupt-pc* nil)	;debugging info
(defwiredvar *last-interrupt-fp* nil)	;..
(defwiredvar *last-interrupt-time* nil)	;..

(def-trap-handler high-priority-sequence-break-handler
		  (%high-priority-sequence-break-trap-vector trap-mode-io)
		  (trap-vector-index fault-pc)
  (declare (wired-function)
	   (safeguarded-reference si:stack-overflow-trap-handler)
	   (unsafeguarded-reference rescue-hung-instruction)
	   (ignore trap-vector-index))
  (let ((interrupt-mode *interrupt-mode*))
    (set-interrupt-mode %interrupt-mode-high-priority-sequence-break)
    (let ((unhang (eq fault-pc *last-interrupt-pc*)))
      ;; Save some debugging information
      (setq *last-interrupt-pc* fault-pc
	    *last-interrupt-fp* (%stack-frame-pointer)
	    *last-interrupt-time* (%microsecond-clock))
      (si:saving-registers-for-trap-for-effect
	;; Decache the BAR-points-to-stack-cache bits in BARs 2 and 3, since Ivory can't
	;; handle changing the stack cache out from under a block read.
	(setf (%block-register 2) (%block-register 2))
	(setf (%block-register 3) (%block-register 3))
	(system-case
	  ((merlin-i Zora) (merlin-high-priority-sequence-break))
	  ((merlin-ii) (merlin-ii-high-priority-sequence-break))
	  ((macivory) (macivory-high-priority-sequence-break))
	  ((Domino) (domino-high-priority-sequence-break))
	  ((VLM) (VLM-high-priority-sequence-break))
	  )
	;; Execute all queued interrupt tasks of higher priority than
	;; *interrupt-task-priority*.
	(when (location-contents *interrupt-task-cache*) (execute-interrupt-tasks)))
      (set-interrupt-mode interrupt-mode)
      (cond ((not unhang)
	     (%return-kludge 0))
	    (t
	     (check-for-hung-instruction fault-pc))))))

(defwiredvar *last-low-interrupt-pc* nil)	;debugging info
(defwiredvar *last-low-interrupt-fp* nil)	;..
(defwiredvar *last-low-interrupt-time* nil)	;..

(def-trap-handler low-priority-sequence-break-handler
		  (%low-priority-sequence-break-trap-vector trap-mode-io)
		  (trap-vector-index fault-pc)
  (declare (wired-function)
	   (safeguarded-reference si:stack-overflow-trap-handler)
	   (unsafeguarded-reference rescue-hung-instruction)
	   (ignore trap-vector-index))
  (set-interrupt-mode %interrupt-mode-low-priority-sequence-break)
  (%set-trap-mode trap-mode-extra-stack)
  (let ((unhang (eq fault-pc *last-low-interrupt-pc*)))
    (setq *last-low-interrupt-pc* fault-pc
	  *last-low-interrupt-fp* (%stack-frame-pointer)
	  *last-low-interrupt-time* (%microsecond-clock))
    (si:saving-registers-for-trap-for-effect
      ;; Decache the BAR-points-to-stack-cache bits in BARs 2 and 3, since Ivory can't
      ;; handle changing the stack cache out from under a block read.
      (setf (%block-register 2) (%block-register 2))
      (setf (%block-register 3) (%block-register 3))
      (system-case
	((merlin-i Zora) (merlin-low-priority-sequence-break))
	((merlin-ii) (merlin-ii-low-priority-sequence-break))
	((macivory) (macivory-low-priority-sequence-break))
	((Domino) (domino-low-priority-sequence-break))
	((VLM) (VLM-low-priority-sequence-break))
	))
    ;; Save some debugging information
    (%set-trap-mode trap-mode-io)
    (set-interrupt-mode nil)
    (cond ((not unhang)
	   (%return-kludge 0))
	  (t
	   (check-for-hung-instruction fault-pc)))))



;;;; Support for Signals in Embedded systems

;;; These arrays are created by the cold-load generator
(defwiredvar *emb-signal-handler*)	;Array of functions called at interrupt level
(defwiredvar *emb-signal-argument*)	;Argument passed to the function
(defwiredvar *emb-signal-priority*)	;Interrupt task priority at which to handle this

(defwiredvar *emb-signal-poll-time* 0)	;Last microsecond time that all signals were polled
(defwiredvar *emb-signal-poll-interval* 250000)	;Poll 4 times per second

(defwiredfun send-emb-host-interrupt ()
  ;; Interrupt the host --
  ;;   Duplicate clauses for MacIvory will avoid double dispatches at runtime.
  (system-case
    (MacIvory-1&2
      (write-MacIvory-register 8 0))
    (MacIvory-3
      (write-MacIvory-register 8 0))
    (Solstice
      (let ((comm sys:*emb-communication-area*))
	(when ( (emb-signal-interrupt-vector comm) -1)
	  (post-bus-interrupt (emb-signal-interrupt-vector-level comm)
			      (emb-signal-interrupt-vector-status comm)))))
    (VLM
      (%coprocessor-write -1 sys:%coprocessor-register-host-interrupt))
    (otherwise nil)))

;;; Send a signal to the host system
(defwiredfun send-emb-signal (signal-number)
  (compiler:%error-when (> signal-number 31)
    (wired-ferror :fatal "Bogus signal number ~D" signal-number))
  (when (>= signal-number 0)			; -1 means no signal
    (%funcall-in-trap-mode (%set-trap-mode 2)
      (lambda (signal-number)
	(with-system-block-registers (1)
	  (setf (%block-register 1) (locf (emb-guest-to-host-signals)))
	  (let ((signal-mask (rot 1 signal-number)))
	    ;; Set the desired bit with minimum delay between read and write
	    ;; No need for (si:prepare-for-block-write), since address is physical.
	    (%block-write 1
	      (logior (%block-read 1 :no-increment t :fixnum-only t) signal-mask)))))
      signal-number)
    (send-emb-host-interrupt))
  nil)

;;; Receive signals from the host system
(defwiredfun poll-emb-signals ()
  (with-system-block-registers (1)
    (setf (%block-register 1) (locf (emb-host-to-guest-signals)))
    ;; Copy and clear the word of incoming signals, quickly
    (let ((signal-mask (%block-read 1 :no-increment t :fixnum-only t :prefetch nil)))
      ;; No need for (si:prepare-for-block-write), since address is physical.
      (%block-write 1 0)
      (let ((live-mask (%block-read 1 :no-increment t :fixnum-only t :prefetch nil)))
	;; Periodically poll all active signals to make sure we recover from lost signals
	(unless (%unsigned-lessp (%32-bit-difference (%microsecond-clock)
						     *emb-signal-poll-time*)
				 *emb-signal-poll-interval*)
	  (setq signal-mask live-mask)
	  (setq *emb-signal-poll-time* (%microsecond-clock)))
	;; Scan the incoming signals, enqueueing interrupt tasks to handle them
	(when ( signal-mask 0)
	  (compiler:%error-when (logtest signal-mask (lognot live-mask))
	    (wired-ferror :proceedable-halt "Bad signal word ~16,'0B~16,'0B."
			  (ldb (byte 16 16) signal-mask) (ldb (byte 16 0) signal-mask))
	    (setf signal-mask live-mask))
	  ;; Scan the incoming signals, enqueueing interrupt tasks to handle them
	  (let ((handler *emb-signal-handler*)
		(argument *emb-signal-argument*)
		(priority *emb-signal-priority*))
	    (declare (sys:array-register handler argument priority))
	    (loop for signal-number from 0 until (= signal-mask 0) do
	      (compiler:%error-when (logtest signal-mask 1_0)
	        (enqueue-interrupt-task (aref handler signal-number)
					(aref argument signal-number)
					(aref priority signal-number)))
	      (setq signal-mask (ldb (byte 31 1) signal-mask)))))))))

;;; This is called if an unexpected signal is received
(defwiredfun null-signal-handler (signal-number)
  (wired-ferror :proceedable "Unexpected signal ~D received from host" signal-number))

(defwiredfun initialize-emb-signals ()
  (dotimes (signal-number 32)
    (setf (aref *emb-signal-handler* signal-number) #'null-signal-handler)
    (setf (aref *emb-signal-argument* signal-number) signal-number)
    (setf (aref *emb-signal-priority* signal-number) 0))
  (setf (emb-host-to-guest-signals) 0)
  (setf (emb-live-host-to-guest-signals) 0)
  ;; Enable periodic clock signals so we can recover from lost signals
  (system-case
    ;; Native systems has their own periodic clock on the CPU board.
    ((Native) nil)
    (Embedded
      (setf (emb-clock-interval) 16000)		;1/60 second period will do for a start
      (setf (emb-clock-signal)
	    (install-wired-emb-signal-handler #'emb-clock-signal-handler nil 2)))))

(defwiredfun emb-clock-signal-handler (ignore)
  (compiler:%error-when (not (null *interrupt-metering-hook*))
    (funcall *interrupt-metering-hook*))
  (enqueue-interrupt-task-not-io #'emb-clock-signal-handler-1 nil 1))

(defwiredfun emb-clock-signal-handler-1 (ignore)
  (neti:emb-ethernet-periodic-timer-function)
  (storage::wakeup-all-units)
  (compiler:%error-when (not (zerop (emb-stop-request)))
    (setf (emb-stop-request) 0)
    (setf si:*requesting-lisp-to-stop* t)
    (si:%set-immediate-preempt))
  (si:update-microsecond-clock)
  (process::%wakeup-next-timer-task (sys:%microsecond-clock))
  ;; Be sure to wakeup again in case we go idle before reprogramming the timer.
  #+VLM (sys:%coprocessor-write 1000000. sys:%coprocessor-register-wait-for-event))

;;; Arrange for a signal to be handled at interrupt level
;;; Must be called in extra-stack mode for locking
(defwiredfun install-wired-emb-signal-handler (function argument &optional (priority 0))
  (declare (values signal-number))
  (loop for signal-number from 0 below 32
	do (unless (logtest (rot 1 signal-number) (emb-live-host-to-guest-signals))
	     (setf (emb-live-host-to-guest-signals)
		   (logior (emb-live-host-to-guest-signals) (rot 1 signal-number)))
	     (setf (aref *emb-signal-handler* signal-number) function)
	     (setf (aref *emb-signal-argument* signal-number) argument)
	     (setf (aref *emb-signal-priority* signal-number) priority)
	     (return signal-number))
	finally
	  ;;--- Become more graceful about this later
	  (wired-ferror :fatal "Signal table overflow")))

;;; Arrange for a signal to be handled by a process
;;; This can be called without any concern for locking
(defun install-emb-signal-handler-process (process)
  (declare (values signal-number))
  (si:%funcall-in-aux-stack #'install-wired-emb-signal-handler
			    #'si:aux-process-wakeup process))

;;; Remove a signal handler.  Opposite of above.
;;; Does this need to be wired?
(defwiredfun remove-wired-emb-signal-handler (function &optional argument signal-number)
  ;; sanity check.  
  (when (and signal-number (or (< signal-number 0) (> signal-number 31)))
    (wired-ferror :proceedable "Bogus signal number ~D" signal-number)
    (return-from remove-wired-emb-signal-handler (values)))
  (%set-trap-mode trap-mode-io)			; make sure no traps happen inside here
  ;; try to find the corresponding entry(s)
  (dotimes (index 32)
    (when (and (eq function (aref *emb-signal-handler* index))
	       (or (null argument)
		   (eq argument (aref *emb-signal-argument* index)))
	       (or (null signal-number)
		   (= signal-number index)))
      (setf (aref *emb-signal-handler* index) #'null-signal-handler)
      (setf (aref *emb-signal-argument* index) index)
      (setf (aref *emb-signal-priority* index) 0)
      (setf (emb-live-host-to-guest-signals)
	    (logand (emb-live-host-to-guest-signals)
		    (lognot (rot 1 index)))))))

;;; Similar remover for processes
(defun remove-emb-signal-handler-process (process &optional signal-number)
  (unless process
    (error "PROCESS can't be NIL"))
  (when (and signal-number (or (< signal-number 0) (> signal-number 31)))
    (error "Bogus signal number"))
  (si:%funcall-in-aux-stack #'remove-wired-emb-signal-handler
			    #'si:aux-process-wakeup process signal-number))

