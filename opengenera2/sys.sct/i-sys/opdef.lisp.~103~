;;; -*- Mode: Lisp; Base: 8; Lowercase: T; Syntax: Zetalisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; I-Machine macro-instruction set.

;;; (DEFOPCODE symbolic-opcode opcode-number (n-args n-returned (legal operands)) . options)
;;;   legal operands  {lp fp sp pop signed unsigned 12-bit-immediate-unsigned
;;;                     10-bit-immediate byte relative-pc entry}
;;;   If there is a :FUNCTION property in the options list, the value of the property is
;;;    either the name of the built-in lisp function that corresponds to this instruction,
;;;    or a list of such names, or a list of conses of names and built-in operands.  If
;;;    there is no property, then it is assumed that there is a lisp function with the
;;;    same name as the instruction (in the appropriate SYSTEM package) that has the same
;;;    contract as the instruction.

;;; List manipulation.

(defopcode car 			0 (1 1 (lp fp sp pop)))
(defopcode cdr 			1 (1 1 (lp fp sp pop)))
(defopcode set-to-car 		140 (1 0 (lp fp sp)) :function car-local :tos-unchanged)
(defopcode set-to-cdr 		141 (1 0 (lp fp sp)) :function cdr-local :tos-unchanged)
(defopcode set-to-cdr-push-car 	142 (1 1 (lp fp sp)))
(defopcode rplaca 		200 (2 0 (lp fp sp pop signed)) :needs-tos :clobbers-tos)
(defopcode rplacd 		201 (2 0 (lp fp sp pop signed)) :needs-tos :clobbers-tos)

(defopcode rgetf 		225 (2 2 (lp fp sp pop)) :needs-tos)
(defopcode member 		226 (2 1 (lp fp sp pop)) :needs-tos :function member-fast)
(defopcode assoc 		227 (2 1 (lp fp sp pop)) :needs-tos :function assoc-fast)


;;; AI Instructions

(defopcode dereference          13 (1 1 (lp fp sp pop signed)))
(defopcode unify                237 (2 0 (lp fp sp pop signed)) :needs-tos :clobbers-tos)
(defopcode push-local-logic-variables 103 (1 n (lp fp sp unsigned)))
(defopcode push-global-logic-variable 55 (0 1 ()))
(defopcode logic-tail-test      14 (1 1 (lp fp sp pop signed)))

;;; Binary predicates.

(defopcode eq 		        270 (2 1 (lp fp sp pop signed)) :needs-tos)
(defopcode eq-no-pop 		274 (2 2 (lp fp sp pop signed)) :needs-tos)
(defopcode eql 			263 (2 1 (lp fp sp pop signed)) :needs-tos)
(defopcode eql-no-pop 		267 (2 2 (lp fp sp pop signed)) :needs-tos)
(defopcode equal-number 	260 (2 1 (lp fp sp pop signed)) :needs-tos :needs-lp
				:function internal-=)
(defopcode equal-number-no-pop  264 (2 2 (lp fp sp pop signed)) :needs-tos :needs-lp
	                        :function =-no-pop)
(defopcode greaterp 		262 (2 1 (lp fp sp pop signed)) :needs-tos :needs-lp
				:function internal->)
(defopcode greaterp-no-pop 	266 (2 2 (lp fp sp pop signed)) :needs-tos :needs-lp
	                        :function >-no-pop)
(defopcode lessp 		261 (2 1 (lp fp sp pop signed)) :needs-tos :needs-lp
				:function internal-<)
(defopcode lessp-no-pop 	265 (2 2 (lp fp sp pop signed)) :needs-tos :needs-lp
	                        :function <-no-pop)

(defopcode logtest 		273 (2 1 (lp fp sp pop signed)) :needs-tos
				:function logtest-internal)
(defopcode logtest-no-pop	277 (2 2 (lp fp sp pop signed)) :needs-tos)

(defopcode type-member 		(40 41 42 43) (2 1 (12-bit-unsigned-immediate))
				:function type-member-internal)
(defopcode type-member-no-pop (44 45 46 47) (2 2 (12-bit-unsigned-immediate)))

;;; Unary predicates.

(defopcode endp 		2 (1 1 (lp fp sp pop signed)))
(defopcode plusp 		36 (1 1 (lp fp sp pop signed)) :needs-lp)
(defopcode minusp 		35 (1 1 (lp fp sp pop signed)) :needs-lp)
(defopcode zerop 		34 (1 1 (lp fp sp pop signed)) :needs-lp)

;;; Numeric operations.

(defopcode add 		300 (2 1 (lp fp sp pop unsigned)) :needs-tos :needs-lp
	                :function +-internal)
(defopcode sub 		301 (2 1 (lp fp sp pop unsigned)) :needs-tos :needs-lp
	                :function --internal)
(defopcode unary-minus 	114 (1 1 (lp fp sp pop unsigned)) :needs-lp :function minus)

(defopcode increment 		143 (1 0 (lp fp sp)) :function 1+local :tos-unchanged)
(defopcode decrement 		144 (1 0 (lp fp sp)) :function 1-local :tos-unchanged)

(defopcode multiply 		202 (2 1 (lp fp sp pop signed)) :needs-tos
				:function *-internal)
(defopcode quotient 		203 (2 1 (lp fp sp pop signed)) :needs-tos
	   :function //-internal)

(defopcode ceiling 		204 (2 2 (lp fp sp pop signed)) :needs-tos
	   :function ceiling-internal)
(defopcode floor 		205 (2 2 (lp fp sp pop signed)) :needs-tos
	   :function floor-internal)
(defopcode truncate 		206 (2 2 (lp fp sp pop signed)) :needs-tos
	   :function truncate-internal)
(defopcode round 		207 (2 2 (lp fp sp pop signed)) :needs-tos
	   :function round-internal)

;(defopcode remainder 		210 (2 1 (lp fp sp pop signed)) :needs-tos :function \)
(defopcode rational-quotient 	211 (2 1 (lp fp sp pop signed)) :needs-tos
	   :function *rational-quotient)

(defopcode max 		        213 (2 1 (lp fp sp pop signed)) :needs-tos
	   :function max-internal)
(defopcode min 		        212 (2 1 (lp fp sp pop signed)) :needs-tos
	   :function min-internal)

(defopcode logand 		215 (2 1 (lp fp sp pop signed)) :needs-tos
				:function logand-internal)
(defopcode logior 		217 (2 1 (lp fp sp pop signed)) :needs-tos
				:function logior-internal)
(defopcode logxor 		216 (2 1 (lp fp sp pop signed)) :needs-tos
				:function logxor-internal)

(defopcode ash 		        232 (2 1 (lp fp sp pop signed)) :needs-tos)
(defopcode rot 			220 (2 1 (lp fp sp pop signed)) :needs-tos)
(defopcode lsh 			221 (2 1 (lp fp sp pop signed)) :needs-tos)

(defopcode %32-bit-plus 	302 (2 1 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %32-bit-difference   303 (2 1 (lp fp sp pop unsigned)) :needs-tos)

(defopcode %multiply-double 	222 (2 2 (lp fp sp pop signed)) :needs-tos)

(defopcode %add-bignum-step 	304 (3 2 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %sub-bignum-step 	305 (3 2 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %multiply-bignum-step 306 (2 2 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %divide-bignum-step 	307 (3 2 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %lshc-bignum-step	223 (3 1 (lp fp sp pop signed)) :needs-tos)

;; Takes five operands: the op, x-high, x-low, y-high, and y-low.
;; Returns result-high, result-low, and "exception-p".
#+VLM
(defopcode %double-float-op 	16 (5 3 (lp fp sp pop unsigned)) :needs-tos)

;;; Data movement.

(defopcode push 		100 (1 1 (lp fp sp pop unsigned)))
(defopcode pop 			340 (2 0 (lp fp sp)) :needs-tos)
(defopcode movem 		341 (2 1 (lp fp sp)))

(defopcode push-n-nils 		101 (1 I (unsigned)))

(defopcode push-address 	150 (1 1 (lp fp sp)))
(defopcode set-sp-to-address 	151 (1 0 (lp fp sp)))
(defopcode set-sp-to-address-save-tos 	152 (1 0 (lp fp sp)))
(defopcode push-address-sp-relative 	102 (1 1 (lp fp sp pop unsigned)))

(defopcode stack-blt 		224 (2 0 (lp fp sp pop signed)) :needs-tos)
(defopcode stack-blt-address 	352 (2 0 (lp fp sp)) :needs-tos)

;;; Field-extraction instructions.

(defopcode ldb 			170 (2 1 (byte)) :function ldb-internal)
(defopcode dpb 			370 (3 1 (byte)) :needs-tos :function dpb-internal)
(defopcode char-ldb 		171 (2 1 (byte)))
(defopcode char-dpb 		371 (3 1 (byte)) :needs-tos)
(defopcode %p-ldb 		172 (2 1 (byte)) :function %p-ldb-internal)
(defopcode %p-dpb 		372 (3 0 (byte)) :needs-tos :clobbers-tos
						 :function %p-dpb-internal)
(defopcode %p-tag-ldb 		173 (2 1 (byte)))
(defopcode %p-tag-dpb 		373 (3 0 (byte)) :needs-tos :clobbers-tos)

;;; Array operations.

(defopcode aref-1 		312 (2 1 (lp fp sp pop unsigned)) :needs-tos :function ar-1)
(defopcode aset-1 		310 (3 0 (lp fp sp pop unsigned)) :needs-tos :clobbers-tos
				:function as-1)
(defopcode aloc-1 		313 (2 1 (lp fp sp pop unsigned)) :needs-tos :function ap-1)

(defopcode setup-1d-array 	3 (1 4 (lp fp sp pop signed)))
(defopcode setup-force-1d-array 4 (1 4 (lp fp sp pop signed)))

(defopcode fast-aref-1 		350 (2 1 (lp fp sp)) :needs-tos)
(defopcode fast-aset-1 		351 (3 0 (lp fp sp)) :needs-tos :clobbers-tos)

(defopcode array-leader 	316 (2 1 (lp fp sp pop unsigned)) :needs-tos)
(defopcode store-array-leader 	314 (3 0 (lp fp sp pop unsigned)) :needs-tos :clobbers-tos)

(defopcode aloc-leader 		317 (2 1 (lp fp sp pop unsigned)) :needs-tos
	   :function ap-leader)

;;; Branch instructions.

(defopcode branch 174 (1 0 (relative-pc)) () :unconditional-branch #|:tos-unchanged|#)

(defopcode branch-true 60 (2 0 (relative-pc)) :needs-tos :conditional-branch)
(defopcode branch-true-else-extra-pop 61 (2 0 (relative-pc)) :needs-tos :conditional-branch)
(defopcode branch-true-and-extra-pop 62 (2 0 (relative-pc)) :needs-tos :conditional-branch)
(defopcode branch-true-extra-pop 63 (2 0 (relative-pc)) :needs-tos :conditional-branch)
(defopcode branch-true-no-pop 64 (2 0 (relative-pc)) :needs-tos :conditional-branch)
(defopcode branch-true-and-no-pop 65 (2 0 (relative-pc)) :needs-tos :conditional-branch)
(defopcode branch-true-else-no-pop 66 (2 0 (relative-pc)) :needs-tos :conditional-branch)
(defopcode branch-true-and-no-pop-else-no-pop-extra-pop 67 (2 0 (relative-pc)) :needs-tos
	   :conditional-branch)

(defopcode branch-false 70 (2 0 (relative-pc)) :needs-tos :conditional-branch :invert-branch)
(defopcode branch-false-else-extra-pop 71 (2 0 (relative-pc)) :needs-tos :conditional-branch
	   :invert-branch)
(defopcode branch-false-and-extra-pop 72 (2 0 (relative-pc)) :needs-tos :conditional-branch
	   :invert-branch)
(defopcode branch-false-extra-pop 73 (2 0 (relative-pc)) :needs-tos :conditional-branch
	   :invert-branch)
(defopcode branch-false-no-pop 74 (2 0 (relative-pc)) :needs-tos :conditional-branch
	   :invert-branch)
(defopcode branch-false-and-no-pop 75 (2 0 (relative-pc)) :needs-tos :conditional-branch
	   :invert-branch)
(defopcode branch-false-else-no-pop 76 (2 0 (relative-pc)) :needs-tos :conditional-branch
	   :invert-branch)
(defopcode branch-false-and-no-pop-else-no-pop-extra-pop 77 (2 0 (relative-pc)) :needs-tos
	   :conditional-branch :invert-branch)

(defopcode loop-decrement-tos 175 (2 0 (relative-pc)) :loop)
(defopcode loop-increment-tos-less-than 375 (2 0 (relative-pc)) :needs-tos :loop)

;;; Block instructions.

(defopcode %block-0-read 120 (1 1 (10-bit-immediate)) :function %block-read)
(defopcode %block-1-read 121 (1 1 (10-bit-immediate)))
(defopcode %block-2-read 122 (1 1 (10-bit-immediate)))
(defopcode %block-3-read 123 (1 1 (10-bit-immediate)))

;;; This is the correct way
(defopcode %block-0-read-shift 124 (1 1 (10-bit-immediate)) :function %block-read-shift)
(defopcode %block-1-read-shift 125 (1 1 (10-bit-immediate)))
(defopcode %block-2-read-shift 126 (1 1 (10-bit-immediate)))
(defopcode %block-3-read-shift 127 (1 1 (10-bit-immediate)))

(defopcode %block-0-read-alu 160 (1 0 (lp fp sp)) :function %block-read-alu :tos-unchanged)
(defopcode %block-1-read-alu 161 (1 0 (lp fp sp)) :tos-unchanged)
(defopcode %block-2-read-alu 162 (1 0 (lp fp sp)) :tos-unchanged)
(defopcode %block-3-read-alu 163 (1 0 (lp fp sp)) :tos-unchanged)
(defopcode %block-0-read-test 130 (n 1 (10-bit-immediate)) :function %block-read-test)
(defopcode %block-1-read-test 131 (n 1 (10-bit-immediate)))
(defopcode %block-2-read-test 132 (n 1 (10-bit-immediate)))
(defopcode %block-3-read-test 133 (n 1 (10-bit-immediate)))
(defopcode %block-0-write 30 (1 0 (lp fp sp pop signed)) :function %block-write :tos-unchanged)
(defopcode %block-1-write 31 (1 0 (lp fp sp pop signed)) :tos-unchanged)
(defopcode %block-2-write 32 (1 0 (lp fp sp pop signed)) :tos-unchanged)
(defopcode %block-3-write 33 (1 0 (lp fp sp pop signed)) :tos-unchanged)

;;; Function calling.

(defopcode start-call 10 (1 0 (lp fp sp pop signed)) :start-call)

;;; Note: Logically, these have two operands each
(defopcode finish-call-n 134 (1 0 (10-bit-immediate)) :finish-call :smashes-lp #|:tos-unchanged|#)
(defopcode finish-call-n-apply 135 (1 0 (10-bit-immediate)) :finish-call :smashes-lp #|:tos-unchanged|#)
(defopcode finish-call-tos 136 (2 0 (10-bit-immediate)) :finish-call :smashes-lp #|:tos-unchanged|#)
(defopcode finish-call-tos-apply 137 (2 0 (10-bit-immediate)) :finish-call :smashes-lp #|:tos-unchanged|#)

(defopcode entry-rest-accepted 176 (2 0 (entry)) :clobbers-tos)
(defopcode entry-rest-not-accepted 177 (2 0 (entry)) :clobbers-tos)

;Rev1 only
;(defopcode extended-entry-rest-accepted 166 (2 0 (entry)) :clobbers-tos)
;(defopcode extended-entry-rest-not-accepted 167 (2 0 (entry)) :clobbers-tos)

(defopcode locate-locals 50 (0 0 ()))
(defopcode return-single 115 (1 0 (10-bit-immediate)) :return)
(defopcode return-multiple 104 (1 0 (pop unsigned)) :return)
(defopcode return-kludge 105 (1 0 (pop unsigned)) :return)
(defopcode take-values 106 (1 I (unsigned)))

;;; Binding instructions.

(defopcode bind-locative-to-value 236 (2 0 (lp fp sp pop signed)) :needs-tos :clobbers-tos
	   :function %bind-locative-to-value)
(defopcode bind-locative 5 (1 0 (lp fp sp pop)) :clobbers-tos)
;;; N.B.  UNBIND-N conflicts with the accessor of the N slot of an UNBIND byte-lap,
;;; so we can't let the automatically generated function for this instruction be
;;; UNBIND-N -- Cyphers 870727
(defopcode unbind-n 107 (1 0 (unsigned)) :function unbind-n-internal :tos-unchanged)
(defopcode %restore-binding-stack 6 (1 0 (lp fp sp pop))
	   :function %restore-binding-stack-level)

;;; Catch.

(defopcode catch-open 376 (1 n (unsigned)))	;Pushes either 2 or 3 values
(defopcode catch-close 51 (0 0 ()) :tos-unchanged)

;;; Lexical variables -- each takes 8 opcodes.

;;; Note:  These must all be treated specially because of the lexical variable field
(defopcode push-lexical-var  (20 21 22 23 24 25 26 27) (1 1 (lp fp sp pop)))
(defopcode pop-lexical-var   (240 241 242 243 244 245 246 247) (2 0 (lp fp sp pop)) :clobbers-tos)
(defopcode movem-lexical-var (250 251 252 253 254 255 256 257) (2 1 (lp fp sp pop)))

;;; Instance variables.

(defopcode push-instance-variable 110 (1 1 (unsigned)))
(defopcode pop-instance-variable 320 (2 0 (unsigned)) :clobbers-tos)
(defopcode movem-instance-variable 321 (2 1 (unsigned)))
(defopcode push-address-instance-variable 111 (1 1 (unsigned)))

(defopcode push-instance-variable-ordered 112 (1 1 (unsigned)))
(defopcode pop-instance-variable-ordered 322 (2 0 (unsigned)) :clobbers-tos)
(defopcode movem-instance-variable-ordered 323 (2 1 (unsigned)))	;--- Spec: 0 returned
(defopcode push-address-instance-variable-ordered 113 (1 1 (unsigned)))

(defopcode %instance-ref 324 (2 1 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %instance-set 325 (3 0 (lp fp sp pop unsigned)) :needs-tos :clobbers-tos)
(defopcode %instance-loc 326 (2 1 (lp fp sp pop unsigned)) :needs-tos)


;;; Subprimitives.

(defopcode %ephemeralp 7 (1 1 (lp fp sp pop)))

(defopcode %unsigned-lessp 331 (2 1 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %unsigned-lessp-no-pop 335 (2 2 (lp fp sp pop unsigned)) :needs-tos)

(defopcode %alu 214 (2 1 (lp fp sp pop signed)) :needs-tos)

(defopcode %allocate-list-block 311 (2 1 (lp fp sp pop unsigned)) :needs-tos)
(defopcode %allocate-structure-block 315 (2 1 (lp fp sp pop unsigned)) :needs-tos)

(defopcode %pointer-plus 230 (2 1 (lp fp sp pop signed)) :needs-tos)
(defopcode %pointer-difference 231 (2 1 (lp fp sp pop signed)) :needs-tos)
(defopcode %pointer-increment 145 (1 0 (lp fp sp)) :tos-unchanged)

(defopcode %read-internal-register 154 (1 1 (10-bit-immediate)))
(defopcode %write-internal-register 155 (2 0 (10-bit-immediate)) :clobbers-tos)

(defopcode %coprocessor-read 156 (1 1 (10-bit-immediate)))
(defopcode %coprocessor-write 157 (2 0 (10-bit-immediate)) :clobbers-tos)

(defopcode %memory-read 116 (2 1 (10-bit-immediate)) :function %memory-read-internal)
(defopcode %memory-read-address 117 (2 1 (10-bit-immediate))
	   :function %memory-read-address-internal)

(defopcode %tag 12 (1 1 (lp fp sp pop signed)))
(defopcode %set-tag 327 (2 1 (lp fp sp pop unsigned)) :needs-tos)

(defopcode store-conditional 233 (3 1 (lp fp sp pop signed)) :needs-tos)

(defopcode %memory-write 234 (2 0 (lp fp sp pop signed)) :needs-tos)
(defopcode %p-store-contents 235 (2 0 (lp fp sp pop signed)) :needs-tos :clobbers-tos)

(defopcode %set-cdr-code-1 146 (1 0 (lp fp sp)) :tos-unchanged)
(defopcode %set-cdr-code-2 147 (1 0 (lp fp sp)) :tos-unchanged)

(defopcode %merge-cdr-no-pop 342 (2 1 (lp fp sp)) :needs-tos)

(defopcode %generic-dispatch 52 (0 0 ()) :clobbers-tos)
(defopcode %message-dispatch 53 (0 0 ()) :clobbers-tos)

(defopcode %jump 11 (1 0 (lp fp sp pop)))
(defopcode %check-preempt-request 54 (0 0 ()) :tos-unchanged)

;; Proposed new instruction to work around pipeline screws.  KHS 860625.
(defopcode no-op 56 (0 0 ()) :tos-unchanged)
(defopcode %halt 57 (0 0 ()) :tos-unchanged)

;; Define instruction for breakpoints
(defopcode %proc-breakpoint 15 (0 0 (lp fp sp pop signed)))

;;; For the emulator, see I:>ISoft>emulator>emulator-design.text.
(defopcode %hack 377 (2 1 (10-bit-immediate)))


;;; Full word opcodes (opcode is the data type)
(def-dtp-op dtp-null :illegal-instruction)
(def-dtp-op dtp-monitor-forward :illegal-instruction)
(def-dtp-op dtp-header-p :illegal-instruction)
(def-dtp-op dtp-header-i :illegal-instruction)
(def-dtp-op dtp-external-value-cell-pointer :push-instruction)
(def-dtp-op dtp-one-q-forward :illegal-instruction)
(def-dtp-op dtp-header-forward :illegal-instruction)
(def-dtp-op dtp-element-forward :illegal-instruction)
(def-dtp-op dtp-fixnum :push-instruction)
(def-dtp-op dtp-small-ratio :push-instruction)
(def-dtp-op dtp-single-float :push-instruction)
(def-dtp-op dtp-double-float :push-instruction)
(def-dtp-op dtp-bignum :push-instruction)
(def-dtp-op dtp-big-ratio :push-instruction)
(def-dtp-op dtp-complex :push-instruction)
(def-dtp-op dtp-spare-number :push-instruction)
(def-dtp-op dtp-instance :push-instruction)
(def-dtp-op dtp-list-instance :push-instruction)
(def-dtp-op dtp-array-instance :push-instruction)
(def-dtp-op dtp-string-instance :push-instruction)
(def-dtp-op dtp-nil :push-instruction)
(def-dtp-op dtp-list :push-instruction)
(def-dtp-op dtp-array :push-instruction)
(def-dtp-op dtp-string :push-instruction)
(def-dtp-op dtp-symbol :push-instruction)
(def-dtp-op dtp-locative :push-instruction)
(def-dtp-op dtp-lexical-closure :push-instruction)
(def-dtp-op dtp-dynamic-closure :push-instruction)
(def-dtp-op dtp-compiled-function :push-instruction)
(def-dtp-op dtp-generic-function :push-instruction)
(def-dtp-op dtp-spare-pointer-1 :push-instruction)
(def-dtp-op dtp-spare-pointer-2 :push-instruction)
(def-dtp-op dtp-physical-address :push-instruction)
(def-dtp-op dtp-spare-immediate-1 :push-instruction)
(def-dtp-op dtp-bound-location :illegal-instruction)
(def-dtp-op dtp-character :push-instruction)
(def-dtp-op dtp-logic-variable :illegal-instruction)
(def-dtp-op dtp-gc-forward :illegal-instruction)
(def-dtp-op dtp-even-pc :push-instruction)
(def-dtp-op dtp-odd-pc :push-instruction)
(def-dtp-op dtp-call-compiled-even :start-call)
(def-dtp-op dtp-call-compiled-odd :start-call)
(def-dtp-op dtp-call-indirect :start-call)
(def-dtp-op dtp-call-generic :start-call)
(def-dtp-op dtp-call-compiled-even-prefetch :start-call :prefetch-pointer)
(def-dtp-op dtp-call-compiled-odd-prefetch :start-call :prefetch-pointer)
(def-dtp-op dtp-call-indirect-prefetch :start-call)
(def-dtp-op dtp-call-generic-prefetch :start-call)
(def-dtp-op dtp-packed-instruction-60 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-61 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-62 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-63 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-64 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-65 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-66 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-67 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-70 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-71 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-72 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-73 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-74 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-75 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-76 :illegal-instruction)
(def-dtp-op dtp-packed-instruction-77 :illegal-instruction)

(defsysconstant *vlm-native-instruction-opcode* #o41)


#||
(defun print-opcodes ()
  (fresh-line)
  (formatting-table ()
    (loop for i below #o400
	  as name = (i-lisp-compiler:get-opcode-pretty-name i)
	  as trap-pc = (sys:%memory-read (+ sys:%trap-vector-base
					    sys:%instruction-exception-vector i))
	  as trap = (sys:%find-structure-header trap-pc)
	  doing
      (formatting-row ()
	(formatting-cell (t :align :right) (present i '((integer) :base 8)))
	(formatting-cell () (princ (or name "None")))
	(formatting-cell () (present trap 'sys:compiled-function))))))
||#
