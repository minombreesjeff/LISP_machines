;;; -*-  Mode: LISP; Package: CLI; Base: 10; Lowercase:T; Syntax: Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor ivory-chip-mixin ((chip-revision nil) (fpa-p nil)) ()
  :abstract-flavor
  (:conc-name "IVORY-CHIP-")
  :initable-instance-variables
  :readable-instance-variables)

(defmethod (board-fasd-list ivory-chip-mixin) ()
  `(:fpa-p ,fpa-p :chip-revision ,chip-revision))

(defmethod (:describe ivory-chip-mixin :after) ()
  (format t "~@[, Ivory rev~D~]~:[~;, FPA~]" chip-revision fpa-p))



(defun local-boards ()
  (let ((boards nil))
    (system-case
      ((XL400 XL1200)
       (setf boards (nconc boards (find-xl400-boards))))
      ((MacIvory)
       (setf boards (nconc boards (find-macintosh-boards))))
      ((Merlin Zora)
       (setf boards (nconc boards (find-merlin-boards))))
      ((Domino)
       (setf boards (nconc boards (find-domino-boards))))
      ((VLM)
       (setf boards (nconc boards (find-VLM-boards)))))
    (system-case
      ((Merlin MacIvory Zora Domino)
       (when (fboundp 'find-scsi-boards)
	 (setf boards (nconc boards (find-scsi-boards)))))
      (otherwise nil))
    #-VLM
    (setf boards (nconc boards (find-other-disk-boards)))
    boards))

(defun compute-serial-from-network-addresses ()
  (flet ((fold-into-fixnum (n)
	   (loop with bits = (si:haulong n)
		 with answer = 0
		 repeat (ceiling bits 32)
		 for chunk = (sys:%logldb (byte 32. 0) n)
		 do (setq answer (si::%32-bit-plus answer chunk)
			  n (ash n -32))
		 finally (return answer))))
    (let ((cached (cli::emb-board-serial-number)))
      (if (and cached (not (zerop cached)))
	  cached
	  (setf (cli::emb-board-serial-number)
		(let ((number-from-ethernet
			(loop for interface in neti::*interfaces*
			      for local-address = (send-if-handles interface :local-hardware-address)
			      for numeric-address = (when local-address
						      (loop with answer = 0
							    for byte being the array-elements of local-address
							    for pos from 0 by 8
							    do (setq answer (dpb byte (byte 8 pos) answer))
							    finally (return answer)))
			      sum (or numeric-address 0)))
		      (number-from-host-address
			(let ((addresses (send neti:*local-host* :address)))
			  (if (null addresses)
			      0
			      (let* ((internet-network  (neti::find-object-named :network "INTERNET"))
				     (internet-exists (assoc internet-network addresses)))
				(if internet-exists
				    (loop for (network address-string) in addresses
					  when (eql internet-network network)
					    sum (tcp::parse-internet-address address-string))
				    (or (loop with chaos-network = (neti::find-object-named :network "CHAOS")
					      for (network address-string) in addresses
					      when (eql chaos-network network)
						sum (parse-integer address-string :radix 8))
					0)))))))
		  (fold-into-fixnum
		    (+ number-from-ethernet number-from-host-address))))))))

#+vlm
(add-initialization "Reset VLM serial number" '(setf (cli::emb-board-serial-number) 0)
		    'neti:after-network-initialization-list)

;;; This is supposed to also return a serial number.
(defun si:machine-model ()
  (declare (values model serial-number cpu-major-version cpu-minor-version))
  (system-case
    ((Merlin Zora)
     (with-block-registers (1)
       (setf (%block-register 1) (%make-physical-address #o777400040))
       (let* ((address (%logdpbs (%block-read 1) (byte 8. 0.)
				 (%block-read 1) (byte 8. 8.)
				 (%block-read 1) (byte 8. 16.)
				 (%block-read 1) (byte 8. 24.)
				 0))
	      (serial-number (cond ((= address 0)
				    (setf (%block-register 1)
					  (%make-physical-address #o777400060))
				    (%logdpbs (%block-read 1) (byte 8. 0.)
					      (%block-read 1) (byte 8. 8.)
					      (%block-read 1) (byte 8. 16.)
					      (%block-read 1) (byte 8. 24.)
					      0))
				   (t address))))
	 (values (system-case
		   ((XL400) :|XL400|)
		   ((UX400S) :|UX400S|)
		   ((UX400G) :|UX400G|)
		   ((XL1200) (if (xl1200-is-xl1201-p)
				 :|XL1201|
				 :|XL1200|))
		   ((UX1200S) (if (and serial-number ( serial-number 5000.))
				 :|UX1250S|
				 :|UX1200S|))
		   ((UX1200G) (if (and serial-number ( serial-number 5000.))
				 :|UX1250G|
				 :|UX1200G|))
		   ((Zora) :|MB400|)
		   (otherwise nil))
		 serial-number))))
    (MacIvory
      (values (system-case
		(MacIvory-1&2 (if (>= (emb-board-major-version) 10)
				  :|MacIvory model 2|
				  :|MacIvory model 1|))
		(MacIvory-3 :|MacIvory model 3|)
		(otherwise nil))
	      (emb-board-serial-number)
	      (emb-board-major-version)
	      (emb-board-minor-version)))
    (Domino
      (values (system-case
		(NXP1000 :|NXP1000|)
		(otherwise nil))
	      (let ((sn 0))
		(with-block-registers (1)
		  (setf (%block-register 1) (sys:%make-physical-address #x4100800c))
		  (loop repeat 4 do
		    (let ((val (%block-read 1)))
		      (setf sn (+ (* 100 sn)
				  (* 10 (ldb (byte 4 12) val)) (ldb (byte 4 8) val))))))
		sn)
	      (ldb %%domino-eco-level (read-eco-registers))))
    (VLM
      ;; VLM doesn't have board revision levels yet ...
      (values ':|Virtual Lisp Machine|
	      (let ((serial (emb-board-serial-number)))
		(if (plusp serial)
		    serial
		    (compute-serial-from-network-addresses)))))
    (otherwise :unknown)))

(defun si:microcode-description ()
  (values
    "Ivory"
    (%read-internal-register %register-chip-revision)))

(setq sys:*sysout-timestamp-1* -1)
(setq sys:*sysout-timestamp-2* -1)
(setq sys:*sysout-parent-timestamp-1* -1)
(setq sys:*sysout-parent-timestamp-2* -1)

(defvar si:*boot-unit* 0)

(defun set-boot-unit ()
  (when (plusp (string-length sys:*current-fep-overlays*))
    (setq si:*boot-unit*
	  (send (send (fs:parse-pathname
			(substring sys:*current-fep-overlays*
				   0 (string-search-char #\( sys:*current-fep-overlays*)))
		      :host)
		:unit))))

(add-initialization "Set the Boot Unit" '(set-boot-unit) '(:cold))
