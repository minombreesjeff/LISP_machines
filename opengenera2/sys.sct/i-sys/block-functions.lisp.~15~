;;; -*- Mode: LISP; Syntax: Zetalisp; Base: 10; Package: SYSTEM-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; To be done:

;; %BLOCK-ALU-REDUCE-VECTOR-SCALAR
;; %BLOCK-ALU-CONSTANT+VECTORVECTOR
;; %BLOCK-ALU-VECTOR+VECTORVECTOR

(DEFUN %BLOCK-SEARCH-EQ (OBJECT ADDRESS COUNT &AUX UNROLLED-COUNT)
  (WITH-BLOCK-REGISTERS (1)
    (SETF (%BLOCK-REGISTER 1) ADDRESS)
    (SI:SET-ALU-AND-ROTATE-CONTROL
      :CONDITION %ALU-CONDITION-EQ
      :CONDITION-SENSE %ALU-CONDITION-SENSE-TRUE
      :ENABLE-CONDITION-EXCEPTION 0
      :FUNCTION-CLASS %ALU-FUNCTION-CLASS-BOOLEAN
      :FUNCTION-BITS CL:BOOLE-XOR)
    (%BLOCK-READ-TEST-TAGBODY (SUCCESS :OPERAND-2 OBJECT)
	OUTER-LOOP
	    (UNLESS (PLUSP COUNT) (GO RETURN))
	    (WHEN (< COUNT 8) (GO SLOW-LOOP))
	    (SETQ UNROLLED-COUNT (%FIXNUM-FLOOR COUNT 8))
	FAST-LOOP
	    (PROGN
	      . #.(LOOP REPEAT 8 COLLECT '(%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-SCAVENGE)))
	    ;; Sigh.  No LOOP-DECREMENT-TOS here, since TOS is used.
	    (WHEN (PLUSP (DECF UNROLLED-COUNT)) (GO FAST-LOOP))
	    (WHEN (ZEROP (SETQ COUNT (%FIXNUM-MOD COUNT 8))) (GO RETURN))
	SLOW-LOOP
	    (%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-SCAVENGE)
	    (WHEN (PLUSP (DECF COUNT)) (GO SLOW-LOOP))
	RETURN
	    (RETURN-FROM %BLOCK-SEARCH-EQ NIL)
	SUCCESS
	    (RETURN-FROM %BLOCK-SEARCH-EQ (%BLOCK-REGISTER 1)))))

;; This must currently be called either
;;   -- In a manner which guarantees GC doesn't flip, or
;;   -- In a context which doesn't care.
(DEFUN %BLOCK-SEARCH-DATA-TYPE (DATA-TYPE ADDRESS COUNT &AUX UNROLLED-COUNT)
  (WITH-BLOCK-REGISTERS (1)
    (SETF (%BLOCK-REGISTER 1) ADDRESS)
    (SI:SET-ALU-AND-ROTATE-CONTROL
      :CONDITION %ALU-CONDITION-EQ
      :CONDITION-SENSE %ALU-CONDITION-SENSE-TRUE
      :ENABLE-CONDITION-EXCEPTION 0
      :FUNCTION-CLASS %ALU-FUNCTION-CLASS-BOOLEAN
      :FUNCTION-BITS CL:BOOLE-CLR)
    (%BLOCK-READ-TEST-TAGBODY (SUCCESS :OPERAND-2 (%SET-TAG NIL DATA-TYPE))
	OUTER-LOOP
	    (UNLESS (PLUSP COUNT) (GO RETURN))
	    (WHEN (< COUNT 8) (GO SLOW-LOOP))
	    (SETQ UNROLLED-COUNT (%FIXNUM-FLOOR COUNT 8))
	FAST-LOOP
	    (PROGN
	      . #.(LOOP REPEAT 8 COLLECT '(%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-RAW)))
	    ;; Sigh.  No LOOP-DECREMENT-TOS here, since TOS is used.
	    (WHEN (PLUSP (DECF UNROLLED-COUNT)) (GO FAST-LOOP))
	    (WHEN (ZEROP (SETQ COUNT (%FIXNUM-MOD COUNT 8))) (GO RETURN))
	SLOW-LOOP
	    (%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-RAW)
	    (WHEN (PLUSP (DECF COUNT)) (GO SLOW-LOOP))
	RETURN
	    (RETURN-FROM %BLOCK-SEARCH-DATA-TYPE NIL)
	SUCCESS
	    (RETURN-FROM %BLOCK-SEARCH-DATA-TYPE (%BLOCK-REGISTER 1)))))

;; This must currently be called either
;;   -- In a manner which guarantees GC doesn't flip, or
;;   -- In a context which doesn't care.
(DEFUN %BLOCK-SEARCH-NOT-DATA-TYPE (DATA-TYPE ADDRESS COUNT &AUX UNROLLED-COUNT)
  (WITH-BLOCK-REGISTERS (1)
    (SETF (%BLOCK-REGISTER 1) ADDRESS)
    (SI:SET-ALU-AND-ROTATE-CONTROL
      :CONDITION %ALU-CONDITION-EQ
      :CONDITION-SENSE %ALU-CONDITION-SENSE-FALSE
      :ENABLE-CONDITION-EXCEPTION 0
      :FUNCTION-CLASS %ALU-FUNCTION-CLASS-BOOLEAN
      :FUNCTION-BITS CL:BOOLE-CLR)
    (%BLOCK-READ-TEST-TAGBODY (SUCCESS :OPERAND-2 (%SET-TAG NIL DATA-TYPE))
	OUTER-LOOP
	    (UNLESS (PLUSP COUNT) (GO RETURN))
	    (WHEN (< COUNT 8) (GO SLOW-LOOP))
	    (SETQ UNROLLED-COUNT (%FIXNUM-FLOOR COUNT 8))
	FAST-LOOP
	    (PROGN
	      . #.(LOOP REPEAT 8 COLLECT '(%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-RAW)))
	    ;; Sigh.  No LOOP-DECREMENT-TOS here, since TOS is used.
	    (WHEN (PLUSP (DECF UNROLLED-COUNT)) (GO FAST-LOOP))
	    (WHEN (ZEROP (SETQ COUNT (%FIXNUM-MOD COUNT 8))) (GO RETURN))
	SLOW-LOOP
	    (%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-RAW)
	    (WHEN (PLUSP (DECF COUNT)) (GO SLOW-LOOP))
	RETURN
	    (RETURN-FROM %BLOCK-SEARCH-NOT-DATA-TYPE NIL)
	SUCCESS
	    (RETURN-FROM %BLOCK-SEARCH-NOT-DATA-TYPE (%BLOCK-REGISTER 1)))))

(DEFUN %BLOCK-STORE-TAG-AND-POINTER (ADDRESS COUNT TAG POINTER INCREMENT)
  (DECLARE (WIRED-FUNCTION))
  (WHEN (PLUSP COUNT)
    (LET ((WORD (%SET-TAG POINTER TAG)))
      (WITH-BLOCK-REGISTERS (1)
	(SETF (%BLOCK-REGISTER 1) ADDRESS)
	(SELECT INCREMENT
	  (0 (PREPARE-FOR-BLOCK-WRITE)
	     (UNROLL-BLOCK-FORMS (COUNT 8.)
	       (%BLOCK-WRITE 1 WORD)))
	  (1 (PREPARE-FOR-BLOCK-WRITE)
	     (UNROLL-BLOCK-FORMS (COUNT 8.)
	       (%BLOCK-WRITE 1 WORD)
	       (SETQ WORD (%POINTER-PLUS WORD 1))))
	  (OTHERWISE
	   (PREPARE-FOR-BLOCK-WRITE)
	   (UNROLL-BLOCK-FORMS (COUNT 8.)
	     (%BLOCK-WRITE 1 WORD)
	     (SETQ WORD (%SET-TAG (%POINTER-PLUS WORD INCREMENT) TAG)))))))))

(DEFSUBST %BLOCK-STORE-CDR-AND-CONTENTS (ADDRESS COUNT CDR CONTENTS INCREMENT)
  (%BLOCK-STORE-TAG-AND-POINTER
    ADDRESS COUNT
    (DPB CDR %%Q-CDR-CODE-WITHIN-TAG (%TAG CONTENTS))
    CONTENTS INCREMENT))

(DEFUN %BLOCK-SCAVENGE-COPY (FROM TO COUNT)
  (WHEN (PLUSP COUNT)
    (WITH-BLOCK-REGISTERS (1 2)
      (SETF (%BLOCK-REGISTER 1) FROM)
      (SETF (%BLOCK-REGISTER 2) TO)
      (PREPARE-FOR-BLOCK-WRITE)
      (UNROLL-BLOCK-FORMS (COUNT 8)
	(%BLOCK-WRITE 2 (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :SET-CDR-NEXT NIL))))))

(DEFUN %BLOCK-SCAVENGE-COPY-FIXNUM-ONLY (FROM TO COUNT)
  (WHEN (PLUSP COUNT)
    (WITH-BLOCK-REGISTERS (1 2)
      (SETF (%BLOCK-REGISTER 1) FROM)
      (SETF (%BLOCK-REGISTER 2) TO)
      (PREPARE-FOR-BLOCK-WRITE)
      (UNROLL-BLOCK-FORMS (COUNT 8)
	(%BLOCK-WRITE 2 (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :SET-CDR-NEXT NIL
				       :FIXNUM-ONLY T))))))

(DEFUN %BLOCK-SCAVENGE-COPY-PRESERVE-CDR (FROM TO COUNT)
  (WHEN (PLUSP COUNT)
    (WITH-BLOCK-REGISTERS (1 2 3)
      (SETF (%BLOCK-REGISTER 1) FROM)
      (SETF (%BLOCK-REGISTER 2) TO)
      (SETF (%BLOCK-REGISTER 3) TO)
      ;; This is too much for UNROLL-BLOCK-FORMS...
      (PREPARE-FOR-BLOCK-WRITE)
      (DOTIMES (IGNORE (%FIXNUM-FLOOR COUNT 8))
	(LET*
	  ((A (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE))
	   (B (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE))
	   (C (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE))
	   (D (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE))
	   (E (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE))
	   (F (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE))
	   (G (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :PREFETCH NIL))
	   (H (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :PREFETCH NIL))
	   (AC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL)
				  (LOCF A)))
	   (BC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL)
				  (LOCF B)))
	   (CC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL)
				  (LOCF C)))
	   (DC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL)
				  (LOCF D)))
	   (EC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL)
				  (LOCF E)))
	   (FC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL)
				  (LOCF F)))
	   (GC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
						 :PREFETCH NIL)
				  (LOCF G)))
	   (HC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
						 :PREFETCH NIL)
				  (LOCF H))))
	  (DECLARE (IGNORE AC BC CC DC EC FC GC HC))
	  (%BLOCK-WRITE 3 A)
	  (%BLOCK-WRITE 3 B)
	  (%BLOCK-WRITE 3 C)
	  (%BLOCK-WRITE 3 D)
	  (%BLOCK-WRITE 3 E)
	  (%BLOCK-WRITE 3 F)
	  (%BLOCK-WRITE 3 G)
	  (%BLOCK-WRITE 3 H)))
      (DOTIMES (IGNORE (%FIXNUM-MOD COUNT 8))
	(LET* ((A (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :PREFETCH NIL))
	       (AC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
						     :PREFETCH NIL)
				      (LOCF A))))
	  (DECLARE (IGNORE AC))
	  (%BLOCK-WRITE 3 A))))))

(DEFUN %BLOCK-SCAVENGE-COPY-FIXNUM-ONLY-PRESERVE-CDR (FROM TO COUNT)
  (WHEN (PLUSP COUNT)
    (WITH-BLOCK-REGISTERS (1 2 3)
      (SETF (%BLOCK-REGISTER 1) FROM)
      (SETF (%BLOCK-REGISTER 2) TO)
      (SETF (%BLOCK-REGISTER 3) TO)
      ;; This is too much for UNROLL-BLOCK-FORMS...
      (PREPARE-FOR-BLOCK-WRITE)
      (DOTIMES (IGNORE (%FIXNUM-FLOOR COUNT 8))
	(LET*
	  ((A (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :FIXNUM-ONLY T))
	   (B (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :FIXNUM-ONLY T))
	   (C (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :FIXNUM-ONLY T))
	   (D (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :FIXNUM-ONLY T))
	   (E (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :FIXNUM-ONLY T))
	   (F (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :FIXNUM-ONLY T))
	   (G (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :PREFETCH NIL :FIXNUM-ONLY T))
	   (H (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :PREFETCH NIL :FIXNUM-ONLY T))
	   (AC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
					       :FIXNUM-ONLY T)
				  (LOCF A)))
	   (BC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
					       :FIXNUM-ONLY T)
				  (LOCF B)))
	   (CC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
					       :FIXNUM-ONLY T)
				  (LOCF C)))
	   (DC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
					       :FIXNUM-ONLY T)
				  (LOCF D)))
	   (EC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
					       :FIXNUM-ONLY T)
				  (LOCF E)))
	   (FC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
					       :FIXNUM-ONLY T)
				  (LOCF F)))
	   (GC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
						 :PREFETCH NIL :FIXNUM-ONLY T)
				  (LOCF G)))
	   (HC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
						 :PREFETCH NIL :FIXNUM-ONLY T)
				  (LOCF H))))
	  (DECLARE (IGNORE AC BC CC DC EC FC GC HC))
	  (%BLOCK-WRITE 3 A)
	  (%BLOCK-WRITE 3 B)
	  (%BLOCK-WRITE 3 C)
	  (%BLOCK-WRITE 3 D)
	  (%BLOCK-WRITE 3 E)
	  (%BLOCK-WRITE 3 F)
	  (%BLOCK-WRITE 3 G)
	  (%BLOCK-WRITE 3 H)))
      (DOTIMES (IGNORE (%FIXNUM-MOD COUNT 8))
	(LET* ((A (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-SCAVENGE :PREFETCH NIL :FIXNUM-ONLY T))
	       (AC (%MERGE-CDR-NO-POP (%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT NIL
						     :PREFETCH NIL :FIXNUM-ONLY T)
				      (LOCF A))))
	  (DECLARE (IGNORE AC))
	  (%BLOCK-WRITE 3 A))))))

(COMPILER:MAKE-OBSOLETE %BLOCK-GC-COPY
  "It is provided for 3600 compatibility only.
   Refer to the documentation for more information.
   Also see SI:%BLOCK-SCAVENGE-COPY.")
(DEFUN %BLOCK-GC-COPY (FROM TO COUNT)
  (DECLARE (SAFEGUARDED-FUNCTION))
  (WHEN (PLUSP COUNT)
    (WITHOUT-INTERRUPTS
      (WITH-SYSTEM-BLOCK-REGISTERS (1 2)
	(SETF (%BLOCK-REGISTER 1) FROM)
	(SETF (%BLOCK-REGISTER 2) TO)
	(PREPARE-FOR-BLOCK-WRITE)
	(UNROLL-BLOCK-FORMS (COUNT 8)
	  (%BLOCK-WRITE 2 (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-GC-COPY :SET-CDR-NEXT NIL)))))))

(DEFUN %BLOCK-INCREMENT (LOCATION LENGTH)
  (WHEN (PLUSP LENGTH)
    (WITH-BLOCK-REGISTERS (1 2)
      (SETF (%BLOCK-REGISTER 1) LOCATION)
      (SETF (%BLOCK-REGISTER 2) LOCATION)
      ;; Condition is overflow, exceptions are enabled
      (SET-ALU-AND-ROTATE-CONTROL :FUNCTION-CLASS %ALU-FUNCTION-CLASS-ADDER
				  :FUNCTION-BITS #b0011)
      (PROG ((A 0) (B 0) (C 0) (D 0) (E 0) (F 0) (G 0) (H 0)
	     (COUNT (%FIXNUM-FLOOR LENGTH 8)))
	    (PREPARE-FOR-BLOCK-WRITE)
	    (UNLESS (PLUSP COUNT) (GO SKIP-FAST-LOOP))
	 FAST-LOOP
	    (%BLOCK-READ-ALU 1 A)
	    (%BLOCK-READ-ALU 1 B)
	    (%BLOCK-READ-ALU 1 C)
	    (%BLOCK-READ-ALU 1 D)
	    (%BLOCK-READ-ALU 1 E)
	    (%BLOCK-READ-ALU 1 F)
	    (%BLOCK-READ-ALU 1 G)
	    (%BLOCK-READ-ALU 1 H)
	    (%BLOCK-WRITE 2 A)
	    (%BLOCK-WRITE 2 B)
	    (%BLOCK-WRITE 2 C)
	    (%BLOCK-WRITE 2 D)
	    (%BLOCK-WRITE 2 E)
	    (%BLOCK-WRITE 2 F)
	    (%BLOCK-WRITE 2 G)
	    (%BLOCK-WRITE 2 H)
	    (WHEN (PLUSP (DECF COUNT)) (GO FAST-LOOP))
	 SKIP-FAST-LOOP
	    (SETQ COUNT (%FIXNUM-MOD LENGTH 8))
	    (UNLESS (PLUSP COUNT) (GO RETURN-NIL))
	 SLOW-LOOP
	    (%BLOCK-READ-ALU 1 A)
	    (%BLOCK-WRITE 2 A)
	    (WHEN (PLUSP (DECF COUNT)) (GO SLOW-LOOP))
	 RETURN-NIL
	    (RETURN NIL)))))


;;; Moved here from SYS:STORAGE;DISK-DRIVER ...

(defwiredfun %block-copy-3232 (source destination words)
  (with-block-registers (1 2)
    (setf (%block-register 1) source)
    (setf (%block-register 2) destination)
    (si:prepare-for-block-write)
    (unroll-block-forms (words 8)
      (%block-write 2 (%block-read 1 :cycle-type %memory-scavenge :set-cdr-next nil
                                   :fixnum-only t)))))

(defwiredfun storage::%block-copy-3240 (source destination words)
  (si:saving-registers-for-effect (%register-bar-1 %register-bar-2)
    (setf (%block-register 2) destination)
    (setf (%block-register 1) source)
    (si:prepare-for-block-write)
    (loop repeat (%fixnum-floor words 8) do
      (let ((tags (%block-read 1 :cycle-type %memory-raw :fixnum-only t)))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) tags))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) (rot tags -8)))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) (rot tags -16)))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) (rot tags -24))))
      (let ((tags (%block-read 1 :cycle-type %memory-raw :fixnum-only t)))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) tags))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) (rot tags -8)))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) (rot tags -16)))
        (%block-write 2
          (%set-tag (%block-read 1 :cycle-type %memory-raw :fixnum-only t) (rot tags -24)))))))

(defwiredfun storage::%block-copy-4032 (source destination words)
  (si:saving-registers-for-effect (%register-bar-1 %register-bar-2)
    (setf (%block-register 2) source)
    (setf (%block-register 1) destination)
    (si:prepare-for-block-write)
    (loop repeat (%fixnum-floor words 8) do
      (let ((q0 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
            (q1 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
            (q2 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
            (q3 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
            (q4 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
            (q5 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
            (q6 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil :prefetch nil))
            (q7 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil :prefetch nil)))
        (%block-write 1 (%logdpbs (%tag q3) (byte 8 24)
                                  (%tag q2) (byte 8 16)
                                  (%tag q1) (byte 8 8)
                                  (%tag q0)))
        ;; If the target memory were only 32 bits wide we could not bother with the tags.
        (%block-write 1 (%set-tag q0 dtp-fixnum))
        (%block-write 1 (%set-tag q1 dtp-fixnum))
        (%block-write 1 (%set-tag q2 dtp-fixnum))
        (%block-write 1 (%set-tag q3 dtp-fixnum))
        (%block-write 1 (%logdpbs (%tag q7) (byte 8 24)
                                  (%tag q6) (byte 8 16)
                                  (%tag q5) (byte 8 8)
                                  (%tag q4)))
        ;; If the target memory were only 32 bits wide we could not bother with the tags.
        (%block-write 1 (%set-tag q4 dtp-fixnum))
        (%block-write 1 (%set-tag q5 dtp-fixnum))
        (%block-write 1 (%set-tag q6 dtp-fixnum))
        (%block-write 1 (%set-tag q7 dtp-fixnum))))))

(defwiredfun storage::%block-compare-3240 (source destination words)
  (si:saving-registers-for-value (%register-bar-1 %register-bar-2)
    (setf (%block-register 1) source)
    (setf (%block-register 2) destination)
    (block compare
      (loop repeat (%fixnum-floor words 4) do
        (let ((at (%block-read 1 :cycle-type %memory-raw :fixnum-only t))
              (a0 (%block-read 1 :cycle-type %memory-raw :fixnum-only t))
              (a1 (%block-read 1 :cycle-type %memory-raw :fixnum-only t))
              (a2 (%block-read 1 :cycle-type %memory-raw :fixnum-only t))
              (a3 (%block-read 1 :cycle-type %memory-raw :fixnum-only t :prefetch nil)))
          (let ((q0 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
                (q1 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
                (q2 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil))
                (q3 (%block-read 2 :cycle-type %memory-raw :set-cdr-next nil :prefetch nil)))
            ;; There's no way to compare the cdr codes without bringing the tags down into
            ;; the pointer field, so I think the fastest thing is to do the comparison in the
            ;; 32-bit format.  Might use logxor instead of successive equality tests.
            (unless (and (eq (%logdpbs (%tag q3) (byte 8 24)
                                       (%tag q2) (byte 8 16)
                                       (%tag q1) (byte 8 8)
                                       (%tag q0))
                             at)
                         (eq a0 (%pointer q0))
                         (eq a1 (%pointer q1))
                         (eq a2 (%pointer q2))
                         (eq a3 (%pointer q3)))
              (return-from compare nil)))))
      t)))

(defwiredfun storage::%block-compare-3232 (source destination words)
  (or (zerop words)
      (si:saving-registers-for-value (%register-bar-1 %register-bar-2)
	(setf (%block-register 1) source)
	(setf (%block-register 2) destination)
	(si:set-alu-and-rotate-control
	  :condition %alu-condition-eq
	  :condition-sense %alu-condition-sense-false
	  :enable-condition-exception 0
	  :function-class %alu-function-class-boolean
	  :function-bits cl:boole-xor)
	(let ((count (%fixnum-floor words 8)))
	  (block compare
	    (macrolet ((compare-step ()
			 `(progn (%pop)
				 (%push (%block-read 1 :cycle-type %memory-raw
						       :fixnum-only t))
				 (%block-read-test 2 :cycle-type %memory-raw
						     :fixnum-only t))))
	      (si:%block-read-test-tagbody (miscompare)
		       (compiler:%error-unless (zerop (%fixnum-mod words 8))
			 (incf count)
			 (selector (%fixnum-mod words 8) =
			   (1 (go l7))
			   (2 (go l6))
			   (3 (go l5))
			   (4 (go l4))
			   (5 (go l3))
			   (6 (go l2))
			   (otherwise (go l1))))
		   l0  (compare-step)
		   l1  (compare-step)
		   l2  (compare-step)
		   l3  (compare-step)
		   l4  (compare-step)
		   l5  (compare-step)
		   l6  (compare-step)
		   l7  (compare-step)
		       (when (plusp (decf count))
			 (go l0))
		       (return-from compare t)
		   miscompare
		       (return-from compare nil))))))))
