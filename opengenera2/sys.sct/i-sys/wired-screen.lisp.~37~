;;; -*- Mode: LISP; Syntax: Common-lisp; Package: COMMON-LISP-INTERNALS; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Minimal wired handling for the main screen during initialization.

(defwiredvar *main-console-type*)
(defwiredvar *main-console-slot*)
(defwiredvar *main-console-other-type*)
(defwiredvar *main-console-other-slot*)

(defwiredvar tv:who-line-run-light-loc)
(defwiredvar *min-run-light-offset*)
(defwiredvar *max-run-light-offset*)

(defwiredfun aux-set-who-line-run-light-loc (loc min max)
  (setf tv:who-line-run-light-loc loc)
  (setf *min-run-light-offset* min)
  (setf *max-run-light-offset* max))

(defwiredfun si:run-light-offset (light-number)
  (+ (* 2 light-number) -6))

(defwiredfun si:set-run-light (run-light-number)
  (sys:system-case
    (embedded
      (setf (emb-run-lights) (logior (rot 1 run-light-number) (emb-run-lights))))
    (otherwise nil))
  (sys:system-case
    ((merlin Zora)
     (%p-dpb 1 (byte 1 1) (%make-physical-address #o01200000000)))
    (otherwise))
  #-VLM
  (let ((loc tv:who-line-run-light-loc)
	(offset (si:run-light-offset run-light-number)))
    (typecase loc
      (sys:physical-address
	(%memory-write (%pointer-plus loc offset) -1))
      (fixnum
	(system-case
	  ((VME)
	   (sys:bus-write (%32-bit-plus loc (%fixnum-multiply offset 4)) -1))
	  (otherwise nil)))))
  nil)

(defwiredfun si:clear-run-light (run-light-number)
  (sys:system-case
    (embedded
      (setf (emb-run-lights) (logand (rot -2 run-light-number) (emb-run-lights))))
    (otherwise nil))
  (sys:system-case
    ((merlin Zora)
     (%p-dpb 0 (byte 1 1) (%make-physical-address #o01200000000)))
    (otherwise))
  #-VLM
  (let ((loc tv:who-line-run-light-loc)
	(offset (si:run-light-offset run-light-number)))
    (typecase loc
      (sys:physical-address
	(%memory-write (%pointer-plus loc offset) 0))
      (fixnum
	(system-case
	  ((VME)
	   (sys:bus-write (%32-bit-plus loc (%fixnum-multiply offset 4)) 0))
	  (otherwise nil))))))

(defwiredfun si:get-run-light (run-light-number)
  (sys:system-case
    (embedded
      (logtest (rot 1 run-light-number) (emb-run-lights)))
    (otherwise
      (let ((loc tv:who-line-run-light-loc)
	    (offset (si:run-light-offset run-light-number)))
	(typecase loc
	  (sys:physical-address
	    (eql -1 (%memory-read (%pointer-plus loc offset) :fixnum-only t)))
	  (fixnum
	    (system-case
	      ((VME)
	       (eql -1 (sys:bus-read (%32-bit-plus loc (%fixnum-multiply offset 4)))))
	      (otherwise nil))))))))

(defwiredfun main-console-video-address ()
  (declare (values address width height bits-per-pixel
		   top-margin-size bottom-margin-size left-margin-size right-margin-size))
  (multiple-value-bind (video-memory-base video-memory-width
			video-memory-height video-memory-depth
			x-offset y-offset raster-height raster-width
			left-margin top-margin right-margin bottom-margin)
      (sys:main-screen-parameters)
    video-memory-height				;not used (yet)
    (values
      video-memory-base
      video-memory-width
      (+ x-offset raster-height)
      video-memory-depth
      (+ top-margin y-offset)
      (- bottom-margin y-offset)
      (+ left-margin x-offset)
      (+ (- right-margin x-offset) (- video-memory-width raster-width)))))

(defwiredfun initialize-main-console ()
  ;; Set up the arrays.
  (multiple-value-bind (address width height bits-per-pixel
			top-margin-size bottom-margin-size left-margin-size right-margin-size)
      (main-console-video-address)
    top-margin-size
    (when (not (null address))
      (let* ((locations-per-line (/ (* width bits-per-pixel) 32))
	     (location-width (/ 32. bits-per-pixel))
	     ;; Run bar x position is just to the left of center.
	     (run-x (floor (+ left-margin-size 480) location-width))
	     ;; Run bar y position is the first line of the bottom margin
	     ;; when there is one, otherwise the last line of the screen
	     ;; (CAD buffer has no margins).
	     (run-base (* (- height (max (1- bottom-margin-size) 1)) locations-per-line))
	     (min-light (- (ceiling left-margin-size location-width) run-x))
	     (max-light (- (floor (- width right-margin-size) location-width) run-x))
	     (size (* height locations-per-line)))
	(typecase address
	  (sys:physical-address
	    (%block-store-tag-and-pointer address size dtp-fixnum 0 0)
	    (aux-set-who-line-run-light-loc
	      (%pointer-plus address (+ run-x run-base))
	      min-light max-light))
	  (fixnum
	    (sys:with-bus-mode ()
	      (let ((address (sys:make-bus-address address size)))
		(%block-store-tag-and-pointer address size dtp-fixnum 0 0)))
	    (aux-set-who-line-run-light-loc
	      (%32-bit-plus address (%fixnum-multiply (+ run-x run-base) 4))
	      min-light max-light))))))
  (si:set-run-light sys:process-run-light)
  nil)
