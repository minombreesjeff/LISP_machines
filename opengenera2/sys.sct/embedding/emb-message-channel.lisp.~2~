;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: CLI -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>



;;;; Embedded message channels

(defun allocate-embedded-message-channel (subtype)
  (labels ((initialize-queue (queue)
	     (setf (emb-queue-element-size queue) 4)
	     (setf (emb-queue-queue-size queue) (- 16 (defstorage-size emb-queue)))
	     (setf (emb-queue-signal queue) -1)
	     (setf (emb-queue-take-index queue) 0)
	     (setf (emb-queue-put-index queue) 0)
	     queue))
    (let* ((handle (allocate-emb-buffer (defstorage-size emb-message-channel)))
	   (channel (emb-buf-pma handle)))
      (setf (emb-message-channel-type channel) %emb-channel-type-message)
      (setf (emb-message-channel-unit channel) 0)
      (setf (emb-message-channel-next channel) -1)
      (setf (emb-message-channel-subtype channel) subtype)
      (setf (emb-message-channel-host-state-0 channel) 0)
      (setf (emb-message-channel-host-state-1 channel) 0)

      (let* ((handle (allocate-emb-buffer 32))
	     (queue-0 (emb-buf-pma handle))
	     (queue-1 (%pointer-plus queue-0 16)))
	(setf (emb-message-channel-host-to-guest-queue channel)
	      (pma-to-emb-pointer (initialize-queue queue-0)))
	(setf (emb-message-channel-host-to-guest-supply-queue channel)
	      (pma-to-emb-pointer (initialize-queue queue-1)))
	(setf (emb-message-channel-host-to-guest-impulse channel) 0))
      (let* ((handle (allocate-emb-buffer 32))
	     (queue-0 (emb-buf-pma handle))
	     (queue-1 (%pointer-plus queue-0 16)))
	(setf (emb-message-channel-guest-to-host-queue channel)
	      (pma-to-emb-pointer (initialize-queue queue-0)))
	(setf (emb-message-channel-guest-to-host-return-queue channel)
	      (pma-to-emb-pointer (initialize-queue queue-1)))
	(setf (emb-message-channel-guest-to-host-impulse channel) 0))
      ;; Push the channel on the front of the  embedded channel table.
      (without-interrupts
	(setf (emb-message-channel-next channel) (emb-channel-table))
	(setf (emb-channel-table) (pma-to-emb-pointer channel)))
      channel)))

(defun deallocate-embedded-message-channel (channel)
  (without-interrupts
    (loop for last first nil then c
	  for c first (emb-pointer-to-pma (emb-channel-table))
		then (emb-pointer-to-pma (emb-message-channel-next c))
	  until (null c)
	  do
      (when (eq c channel)
	(if (null last)
	    (setf (emb-channel-table) (emb-message-channel-next channel))
	    (setf (emb-message-channel-next last) (emb-message-channel-next channel)))
	(deallocate-emb-buffer
	  (emb-buf-handle
	    (emb-pointer-to-pma (emb-message-channel-host-to-guest-queue channel))))
	(deallocate-emb-buffer
	  (emb-buf-handle
	    (emb-pointer-to-pma (emb-message-channel-guest-to-host-queue channel))))
	(setf (emb-message-channel-type channel) -1)
	;; The return queues are allocated in the same buffer as the others...
	(deallocate-emb-buffer (emb-buf-handle channel))
	(return nil)))))

;;; util functions for hacking channels

;;; see if a host-to-guest message buffer is pending
(defwiredfun emb-message-channel-input-available-p (channel)
  (or ;; If the return queue is empty, there might be input; we need to prime the queue.
      (emb-queue-empty-p
	(emb-pointer-to-pma (emb-message-channel-host-to-guest-supply-queue channel)))
      (not (emb-queue-empty-p
	     (emb-pointer-to-pma (emb-message-channel-host-to-guest-queue channel))))
      (plusp (emb-message-channel-host-to-guest-impulse channel))))

;;; see if ok to queue an output buffer
(defwiredfun emb-message-channel-output-acceptable-p (channel)
  (and (not (emb-queue-full-p
	      (emb-pointer-to-pma (emb-message-channel-guest-to-host-queue channel))))
       (not (plusp (emb-message-channel-guest-to-host-impulse channel)))))


(defun enqueue-message-channel-buffer (queue buffer)
  (let ((buf-pma (sys:emb-buf-pma buffer)))
    (unless (pma-inside-comm-area buf-pma)
      (error "Bogus outgoing PMA ~S" buf-pma))
    (without-interrupts
      (emb-queue-put queue (pma-to-emb-pointer buf-pma)))))

(defun dequeue-message-channel-buffer (queue)
  (let ((embp (without-interrupts (emb-queue-take queue))))
    (when embp
      (let ((pma (emb-pointer-to-pma embp)))
	(unless (pma-inside-comm-area pma)
	  (error "Bogus incoming PMA ~S" pma))
	(buf-pma-to-handle pma)))))

