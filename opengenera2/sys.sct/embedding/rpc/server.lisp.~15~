;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: RPC; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Lisp server portion of the call layer of RPC

;;; Top function of process that calls the handler - Obsolete
(DEFUN RUN-REMOTE-CALL-HANDLER (HANDLER AGENT TRANSACTION-ID XDR-BLOCK XDR-POINTER XDR-LIMIT
				;;--- The &OPTIONAL is patch-only
				&OPTIONAL MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER)
  (AGENT-RUN-REMOTE-CALL-HANDLER
    AGENT HANDLER TRANSACTION-ID XDR-BLOCK XDR-POINTER XDR-LIMIT
    MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER NIL NIL NIL))


;;; Returns a function or a SUN-style error number
;;; Success: Second value is a non-null list of process options to run in own process
;;; Failure: Second value is the available module version number
(DEFUN FIND-SERVER (MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER)
  (DECLARE (VALUES FUNCTION PROCESS))
  (LET ((MODULE (AND (EQL MODULE-NUMBER *CACHED-REMOTE-MODULE-NUMBER*)
		     *CACHED-REMOTE-MODULE*)))
    (UNLESS (AND MODULE (= (REMOTE-MODULE-NUMBER MODULE) MODULE-NUMBER))
      (IF (SETQ MODULE (GETHASH MODULE-NUMBER *REMOTE-MODULE-TABLE*))
	  (SETQ *CACHED-REMOTE-MODULE* MODULE
		*CACHED-REMOTE-MODULE-NUMBER* MODULE-NUMBER)
	  (RETURN-FROM FIND-SERVER (VALUES 1 0))))		;PROG_UNAVAIL
    (UNLESS (= (REMOTE-MODULE-VERSION MODULE) MODULE-VERSION)	;--- less simpleminded later
      (RETURN-FROM FIND-SERVER (VALUES 2			;PROG_MISMATCH
				       (REMOTE-MODULE-VERSION MODULE))))
    (LET ((HANDLER (FIND-HANDLER MODULE ENTRY-NUMBER)))
      (UNLESS HANDLER
	(RETURN-FROM FIND-SERVER (VALUES 3 MODULE-VERSION)))	;PROC_UNAVAIL
      (VALUES HANDLER (REMOTE-MODULE-PROCESS MODULE)))))

(DEFPARAMETER SERVER-MAXIMUM-DATA-STACK-SIZE-FACTOR 2)

(DEFUN SERVER-TOP-LEVEL (AGENT)
  ;; Let the data stack grow
  (LET* ((SG (SEND *CURRENT-PROCESS* :STACK-GROUP)))
    (SETF (SI:SG-ABSOLUTE-DATA-STACK-LIMIT SG)
	  (MAX (OR (SI:SG-ABSOLUTE-DATA-STACK-LIMIT SG) 0)
	       (CEILING (* SERVER-MAXIMUM-DATA-STACK-SIZE-FACTOR
			   MAXIMUM-VALID-XDR-BLOCK-SIZE)))))
  (WITH-STACK-ARRAY (CREDENTIAL 400
				:ELEMENT-TYPE '(UNSIGNED-BYTE 8)
				:LEADER-LENGTH 3
				:FILL-POINTER 0
				:NAMED-STRUCTURE-SYMBOL 'CALL-CREDENTIAL)
    (WITH-STACK-ARRAY (VERIFIER 400
				:ELEMENT-TYPE '(UNSIGNED-BYTE 8)
				:LEADER-LENGTH 3
				:FILL-POINTER 0
				:NAMED-STRUCTURE-SYMBOL 'CALL-VERIFIER)
      (ERROR-RESTART-LOOP ((ERROR) "Skip executing this remote call")
	(MULTIPLE-VALUE-BIND (XDR-BLOCK XDR-POINTER XDR-LIMIT
			      MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER TRANSACTION-ID
			      CREDENTIAL VERIFIER)
	    (WAIT-FOR-CALL AGENT CREDENTIAL VERIFIER)
	  (MULTIPLE-VALUE-BIND (HANDLER PROCESS)
	      (FIND-SERVER MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER)
	    (COND ((NUMBERP HANDLER)
		   ;; HANDLER is error code, PROCESS is available module version
		   (XDR-REGISTER-SAVE
		     (LET ((REPLY-XDR-BLOCK
			     (XDR-INITIATE-ERROR AGENT XDR-BLOCK PROCESS 0 0
						 HANDLER PROCESS PROCESS)))
		       (UNWIND-PROTECT
			   (XDR-SEND-ERROR AGENT (PROG1 REPLY-XDR-BLOCK
							(SETQ REPLY-XDR-BLOCK NIL)))
			 ;; Cleanup handler
			 (RELEASE-XDR-BLOCK AGENT XDR-BLOCK)
			 (WHEN REPLY-XDR-BLOCK
			   (RELEASE-XDR-BLOCK AGENT REPLY-XDR-BLOCK))))))
		  ((NOT PROCESS)
		   (AGENT-RUN-REMOTE-CALL-HANDLER
		     AGENT HANDLER TRANSACTION-ID XDR-BLOCK XDR-POINTER XDR-LIMIT
		     MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
		     CREDENTIAL VERIFIER NIL))
		  (T
		   (PROCESS-RUN-FUNCTION PROCESS
		     #'(LAMBDA ()
			 ;; Let the data stack grow
			 (LET* ((SG (SEND *CURRENT-PROCESS* :STACK-GROUP)))
			   (SETF (SI:SG-ABSOLUTE-DATA-STACK-LIMIT SG)
				 (MAX (OR (SI:SG-ABSOLUTE-DATA-STACK-LIMIT SG) 0)
				      (CEILING (* SERVER-MAXIMUM-DATA-STACK-SIZE-FACTOR
						  MAXIMUM-VALID-XDR-BLOCK-SIZE)))))
			 (AGENT-RUN-REMOTE-CALL-HANDLER
			   AGENT HANDLER TRANSACTION-ID XDR-BLOCK XDR-POINTER XDR-LIMIT
			   MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
			   CREDENTIAL VERIFIER NIL)))))))))))
