;;; -*- Mode: LISP; Syntax: Common-lisp; Package: RPC; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defsubst load-nth-byte-big-end (from-value size total-size byte-number)
  (sys:%logldb (byte size (- total-size (* (1+ byte-number) size))) from-value))

(defsubst load-nth-byte (from-value size ignore byte-number)
  (sys:%logldb (byte size (* byte-number size)) from-value))

(define-setf-method byte-swap-8 (ref)
  (let ((store (gensym)))
    (values nil nil (list store) `(setf ,ref (byte-swap-8 ,store)) ref)))

(define-setf-method byte-8-reverse-32 (ref)
  (let ((store (gensym)))
    (values nil nil (list store) `(setf ,ref (byte-8-reverse-32 ,store)) ref)))

(defsubst byte-swapped-octet-aref-16 (array index)
  (byte-swap-8 (sys:octet-aref-16 array index)))

(defsubst byte-swapped-octet-aref (array index)
  (byte-8-reverse-32 (sys:octet-aref array index)))

(defsubst byte-swapped-8-aref-16 (array index)
  (dpb (aref array index) (byte 8 8) (aref array (1+ index))))

(defsubst byte-swapped-8-aset-16 (array index value)
  (setf (aref array index) (load-nth-byte-big-end value 8 16 0)
	(aref array (1+ index)) (load-nth-byte-big-end value 8 16 1))
  value) 

(defsetf byte-swapped-8-aref-16 byte-swapped-8-aset-16)

(defsubst byte-swapped-8-aref-24 (array index)
  (dpbs (aref array index) (byte 8 16)
	(aref array (1+ index)) (byte 8 8)
	(aref array (+ index 2)))) 

(defsubst byte-swapped-8-aset-24 (array index value)
  (setf (aref array index) (load-nth-byte-big-end value 8 24 0)
	(aref array (1+ index)) (load-nth-byte-big-end value 8 24 1)
	(aref array (+ index 2)) (load-nth-byte-big-end value 8 24 2))) 

(defsetf byte-swapped-8-aref-24 byte-swapped-8-aset-24)

(defsubst byte-swapped-8-aref-32 (array index)
  (sys:%logdpb (byte-swapped-8-aref-16 array index) (byte 16 16)
	       (byte-swapped-8-aref-16 array (+ index 2)))) 

(defsubst byte-swapped-8-aset-32 (array index value)
  (setf (byte-swapped-8-aref-16 array index) (load-nth-byte-big-end value 16 32 0)
	(byte-swapped-8-aref-16 array (+ index 2)) (load-nth-byte-big-end value 16 32 1))
  value) 

(defsetf byte-swapped-8-aref-32 byte-swapped-8-aset-32)

(defsubst unsigned-8-aref-16 (array index)
  (dpb (aref array (1+ index)) (byte 8 8) (aref array index))) 

(defsubst unsigned-8-aset-16 (array index value)
  (setf (aref array index) (load-nth-byte value 8 16 0)
	(aref array (1+ index)) (load-nth-byte value 8 16 1))
  value) 

(defsetf unsigned-8-aref-16 unsigned-8-aset-16)

(defsubst unsigned-8-aref-32 (array index)
  (sys:%logdpb (unsigned-8-aref-16 array (+ index 2)) (byte 16 16)
	       (unsigned-8-aref-16 array index))) 

(defsubst unsigned-8-aset-32 (array index value)
  (setf (unsigned-8-aref-16 array index) (load-nth-byte value 16 32 0)
	(unsigned-8-aref-16 array (+ index 2)) (load-nth-byte value 16 32 1))
  value) 

(defsetf unsigned-8-aref-32 unsigned-8-aset-32)

(defsubst byte-swap-8 (int16)
  (dpb (ldb (byte 8 0) int16) (byte 8 8) (ldb (byte 8 8) int16))) 

(defsubst byte-8-reverse-32 (int32)
  (sys:%logdpbs (ldb (byte 8 0) int32) (byte 8 24)
		(ldb (byte 8 8) int32) (byte 8 16)
		(ldb (byte 8 16) int32) (byte 8 8)
		(ldb (byte 8 24) int32))) 

(defsubst not-zerop (x) (not (zerop x)))

(define-setf-method not-zerop (ref)
  (let ((store (gensym)))
    (values nil nil (list store) `(setf ,ref (if ,store 1 0)) ref)))

(defsubst memelt (set index)
  (elt set index))

(define-setf-method memelt (set ref)
  (let ((store (gensym)))
    (values nil nil (list store) `(setf ,ref (position ,store ,set)) ref)))

(defsubst enumeration-data (symbols-and-values key)
  (second (assoc key symbols-and-values)))

(define-setf-method enumeration-data (symbols-and-values ref)
  (let ((store (gensym)))
    (values nil nil (list store)
	    `(setf ,ref (first (rassoc ,store ,symbols-and-values :key #'car)))
	    ref)))

(defun bit-set-decode (bits keywords)
  (let ((bit-number 0)
	(result nil))
    (dolist (keyword keywords)
      (when (consp keyword)
	(setq bit-number (second keyword)
	      keyword (first keyword)))
      (when (ldb-test (byte 1 bit-number) bits)
	(push keyword result)))
    (nreverse result)))

(defsubst c-string-length (array index)
  (- (position 0 array :start index) index))

(defun asciz-substring (array index)
  (stack-let ((bytes (make-array (c-string-length array index)
				 :element-type '(unsigned-byte 8)
				 :displaced-to array :displaced-index-offset index)))
    (ascii-to-string bytes)))

(defun pascal-substring (array index)
  (stack-let ((bytes (make-array (aref array index)
				 :element-type '(unsigned-byte 8)
				 :displaced-to array :displaced-index-offset (1+ index))))
    (ascii-to-string bytes)))

;;;

(defsubst byte-swapped-locative-ref-8 (pointer octet-index)
  (sys:%push (sys:%pointer-plus pointer (si:octet-aref-index octet-index 0)))
  (if (not (ldb-test (byte 1 1) octet-index))
      (if (not (ldb-test (byte 1 0) octet-index))
	  (sys:%p-ldb (byte 8 0) (sys:%pop))
	  (sys:%p-ldb (byte 8 8) (sys:%pop)))
      (if (not (ldb-test (byte 1 0) octet-index))
	  (sys:%p-ldb (byte 8 16) (sys:%pop))
	  (sys:%p-ldb (byte 8 24) (sys:%pop)))))

(defsubst byte-swapped-locative-ref-16 (pointer octet-index)
  (sys:%push (sys:%pointer-plus pointer (si:octet-aref-index octet-index 1)))
  (let ((value (if (not (ldb-test (byte 1 1) octet-index))
		   (sys:%p-ldb (byte 16 0) (sys:%pop))
		   (sys:%p-ldb (byte 16 16) (sys:%pop)))))
    (sys:%logdpb value (byte 8 8) (ldb (byte 8 8) value))))

(defsubst byte-swapped-locative-ref-32 (pointer octet-index)
  (let ((value (sys:%p-ldb (byte 32 0)
			   (sys:%pointer-plus pointer (si:octet-aref-index octet-index 2)))))
    (sys:%logdpbs value (byte 8 24)
		  (sys:%logldb (byte 8 8) value) (byte 8 16)
		  (sys:%logldb (byte 8 16) value) (byte 8 8)
		  (sys:%logldb (byte 8 24) value))))

(defsubst (setf byte-swapped-locative-ref-8) (pointer octet-index value)
  (sys:%push value)
  (sys:%push (sys:%pointer-plus pointer (si:octet-aref-index octet-index 0)))
  (if (not (ldb-test (byte 1 1) octet-index))
      (if (not (ldb-test (byte 1 0) octet-index))
	  (sys:%p-dpb (sys:%pop) (byte 8 0) (sys:%pop))
	  (sys:%p-dpb (sys:%pop) (byte 8 8) (sys:%pop)))
      (if (not (ldb-test (byte 1 0) octet-index))
	  (sys:%p-dpb (sys:%pop) (byte 8 16.) (sys:%pop))
	  (sys:%p-dpb (sys:%pop) (byte 8 24.) (sys:%pop))))
  value)

(defsubst (setf byte-swapped-locative-ref-16) (pointer octet-index value)
  (sys:%push (sys:%logdpb value (byte 8 8) (sys:%logldb (byte 8 8) value)))
  (sys:%push (sys:%pointer-plus pointer (si:octet-aref-index octet-index 1)))
  (if (not (ldb-test (byte 1 1) octet-index))
      (sys:%p-dpb (sys:%pop) (byte 16 0) (sys:%pop))
      (sys:%p-dpb (sys:%pop) (byte 16 16) (sys:%pop)))
  value)

(defsubst (setf byte-swapped-locative-ref-32) (pointer octet-index value)
  #+Imach (sys:%memory-write (sys:%pointer-plus pointer (si:octet-aref-index octet-index 2))
			     (sys:%logdpbs value (byte 8 24)
					   (sys:%logldb (byte 8 8) value) (byte 8 16)
					   (sys:%logldb (byte 8 16) value) (byte 8 8)
					   (sys:%logldb (byte 8 24) value)))
  #+3600 (sys:%p-store-tag-and-pointer
	   (sys:%pointer-plus pointer (si:octet-aref-index octet-index 2))
	   sys:dtp-fix
	   (sys:%logdpbs value (byte 8 24)
			 (sys:%logldb (byte 8 8) value) (byte 8 16)
			 (sys:%logldb (byte 8 16) value) (byte 8 8)
			 (sys:%logldb (byte 8 24) value)))
  value)


(defstruct (octet-structure
	     (:constructor make-octet-structure (name fields &key access-type c-name alignment))
	     (:copier nil)
	     )
  name
  fields
  (access-type :octet)
  (c-name nil)
  (alignment nil)
  )

(defstruct (octet-structure-field
	     (:constructor make-octet-structure-field (name type predecessor))
	     )
  name
  type
  predecessor)

(defun define-octet-structure-2 (name &rest args)
  (when (record-source-file-name name 'define-octet-structure)
    (setf (sys:getdecl name 'octet-structure) (apply #'make-octet-structure name args))))

(defun copy-octet-structure-1 (to-array to-start to-end from-array from-start from-end)
  (replace to-array from-array :start1 to-start :end1 to-end
			       :start2 from-start :end2 from-end))

(defun octet-structure-equal-1 (array-1 start-1 end-1 array-2 start-2 end-2)
  (not (mismatch array-1 array-2 :start1 start-1 :end1 end-1 :start2 start-2 :end2 end-2)))
