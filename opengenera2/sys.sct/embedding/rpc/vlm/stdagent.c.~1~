/*-*- Mode: C; Package: C-USER; Search-List: RPC; Tab-width: 4 -*- */
/*>
 *> *****************************************************************************************
 *> ** (c) Copyright 1993-1988 Symbolics, Inc.  All rights reserved.
 *> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
 *>
 *>    The software, data, and information contained herein are proprietary 
 *> to, and comprise valuable trade secrets of, Symbolics, Inc., which intends 
 *> to keep such software, data, and information confidential and to preserve 
 *> them as trade secrets.  They are given in confidence by Symbolics pursuant 
 *> to a written license agreement, and may be used, copied, transmitted, and 
 *> stored only in accordance with the terms of such license.
 *> 
 *> Symbolics, Symbolics 3600, Symbolics 3670 (R), Symbolics 3675 (R), Symbolics
 *> 3630, Symbolics 3640, Symbolics 3645 (R), Symbolics 3650 (R), Symbolics 3653,
 *> Symbolics 3620 (R), Symbolics 3610 (R), Symbolics Common Lisp (R),
 *> Symbolics-Lisp (R), Zetalisp (R), Genera (R), Wheels (R), Dynamic Windows (R),
 *> SmartStore (R), Semanticue (R), Frame-Up (R), Firewall (R), Document Examiner (R),
 *> Delivery Document Examiner, "Your Next Step in Computing" (R), Ivory, MacIvory,
 *> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
 *> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal (R),
 *> Symbolics Prolog, Symbolics Fortran (R), CLOE (R), CLOE Application Generator,
 *> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia, Joshua,
 *> Statice (R), and Minima are trademarks of Symbolics, Inc.
 *> 
 *> RESTRICTED RIGHTS LEGEND
 *>    Use, duplication, and disclosure by the Government are subject to restrictions 
 *> as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data and Computer 
 *> Software Clause at DFAR 52.227-7013.
 *> 
 *>      Symbolics, Inc.
 *>      6 Concord Farms
 *>      555 Virginia Road
 *>      Concord, Massachusetts 01742-2727
 *>      United States of America
 *>      508-287-1000
 *>
 *> *****************************************************************************************
 *>
 */

/* This file is SYS:EMBEDDING;RPC;GENERIC;STDAGENT.C. */

/* Common Support for all transport agents using the standard protocol. */

#include "stdagent.h"

#ifdef RPC_OS_MAC
#include <Files.h>	/* for dirFulErr */
#endif

/* Agent methods */
/* Translated from agent.lisp and stdagent.lisp */
/* These are default methods that can be replaced by more specific agent "flavors" */
/* No attempt at multiprocessing support */
/* No attempt at a modularity that would allow for non-standard protocols */
/* Since these are the "standard" methods, I didn't bother prefixing 
   the names with "Std" */

#ifdef RPC_USE_PROTOTYPES
OSErr AllocateBlock PROTO_ARGS((XDRAgent agent, LongInt size, XDRBlock* ret_block));
static LongInt* DataPointer PROTO_ARGS((XDRAgent agent, XDRBlock block));
static LongInt  DataSize PROTO_ARGS((XDRAgent agent, XDRBlock block));
static OSErr InitiateErrorHandler PROTO_ARGS((XDRAgent agent, LongInt error_number,
					      XDRAgent* ret_agent, XDRBlock* ret_block,
					      LongInt** ret_pointer, LongInt** ret_limit));
static OSErr InitiateCall PROTO_ARGS((XDRAgent agent, LongInt module_number, LongInt module_version,
				      LongInt entry_number, LongInt size, XDRAgent* ret_agent,
				      XDRBlock* ret_block, LongInt** ret_pointer, 
				      LongInt** ret_limit));
static OSErr InitiateError PROTO_ARGS((XDRAgent agent, XDRBlock CallXDRBlock,
				       LongInt ActualModuleVersion, LongInt error_number, LongInt size,
				       XDRBlock* ret_block, LongInt** ret_pointer,
				       LongInt** ret_limit));
static OSErr InitiateReceive PROTO_ARGS((XDRAgent agent, XDRBlock block,
					 LongInt** ret_pointer, LongInt** ret_limit));
static OSErr InitiateReply PROTO_ARGS((XDRAgent agent, LongInt TransactionID, LongInt size,
				       XDRBlock* ret_block, LongInt** ret_pointer,
				       LongInt** ret_limit));
static int   NeverBusy PROTO_ARGS((XDRAgent agent));
static OSErr PollForCall PROTO_ARGS((XDRAgent agent, XDRBlock* ret_block, LongInt** ret_pointer,
				     LongInt** ret_limit, LongInt* ret_module_number,
				     LongInt* ret_module_version, LongInt* ret_entry_number,
				     LongInt* ret_transaction_id));
static OSErr ReleaseBlock PROTO_ARGS((XDRAgent agent, XDRBlock block));
static OSErr RemoteError PROTO_ARGS((XDRAgent agent, LongInt* ret_error_number));
static OSErr SendAsynchronousCall PROTO_ARGS((XDRAgent agent, XDRBlock* in_out_block));
static OSErr SendCallAndWait PROTO_ARGS((XDRAgent agent, XDRBlock* in_out_block));
static OSErr SendError PROTO_ARGS((XDRAgent agent, XDRBlock block));
static OSErr SendReply PROTO_ARGS((XDRAgent agent, XDRBlock block));
static OSErr WaitForReply PROTO_ARGS((XDRAgent agent, LongInt TransactionID, XDRBlock* ret_block));
#endif


/*** Methods for the default implementation of XDRBlocks ***/

/* --- I'm not sure this needs to allocate an extra word, no relocating GC here!! */
OSErr AllocateBlock (agent, size, ret_block)
  XDRAgent agent;
  LongInt size;
  XDRBlock* ret_block;
{
  return(AllocateMemory((size + 1) << 2,           /* exclusive upper bound, bytes */
                        (void **)ret_block));
}

static LongInt* DataPointer (agent, block)
  XDRAgent agent;
  XDRBlock block;
{ 
  return((LongInt*)block);
}

static LongInt DataSize (agent, block)
  XDRAgent agent;
  XDRBlock block;
{
  return((AllocatedSize(block) >> 2) - 1);	/* Match arg to AllocateBlock */
}

static OSErr ReleaseBlock (agent, block)
  XDRAgent agent;
  XDRBlock block;
{
  FreeMemory((void **)&block);
  return (noErr);
}


/*** Methods that implement the standard RPC protocol ***/

/* This is a subroutine, not a method */
static OSErr WaitForReply (agent, TransactionID, ret_block)
  XDRAgent agent;
  LongInt TransactionID;
  XDRBlock* ret_block;
{ short i;

  while(true)
   { BusyWait(true);
	 /* BusyWait called PollRPC, let's see if it found our reply */
	 for(i = 0; i < MAX_PENDING_CALLS; i++)
	   if ( agent->pending_calls[i].call_waiting
			&& agent->pending_calls[i].transaction_id == TransactionID )
		 if ( *ret_block = agent->pending_calls[i].reply_block )
		   { agent->pending_calls[i].call_waiting = FALSE;
			 return(noErr);			/* Got the expected reply */
		   }
		 else goto ok;				/* Keep waiting */
	 /* We aren't in the table */
	 return(dirFulErr);				/* Close enough for C */
	 /* Keep waiting */
   ok: ;
   }
}

static OSErr PollForCall (agent, ret_block, ret_pointer, ret_limit,
						  ret_module_number, ret_module_version, ret_entry_number, 
						  ret_transaction_id)
  XDRAgent agent;
  XDRBlock* ret_block;
  LongInt** ret_pointer;
  LongInt** ret_limit;
  LongInt* ret_module_number;
  LongInt* ret_module_version;
  LongInt* ret_entry_number;
  LongInt* ret_transaction_id;
{ OSErr err;
  XDRBlock block;
  LongInt size;
  short i;
  register RPCCallHeader* h;

  SetupAgentA4(agent);
  *ret_block = NULL;
  err = PollAgent(agent, &block);
  if ( err )
    { RestoreAgentA4();
	  return(err); }
  if ( block != NULL )
    { h = (RPCCallHeader*)XDRDataPointer(agent, block);
      if ( h->RPCMessageType == 0 )             /* Call */
        { /* ---if ( h -> RPCVersion != 2 ) barf; */
		  *ret_block = block;
		  size = XDRDataSize(agent, block);
          *ret_pointer = (LongInt*)h;
          *ret_limit = *ret_pointer + size;
          *ret_module_number = h->ModuleNumber;
          *ret_module_version = h->ModuleVersion;
          *ret_entry_number = h->EntryNumber;
          *ret_transaction_id = h->TransactionID;
          RestoreAgentA4();
          return(noErr);
        }
      else if ( h->RPCMessageType == 1 )	/* Reply */
		{ for(i = 0; i < MAX_PENDING_CALLS; i++)
			if ( agent->pending_calls[i].call_waiting
			     && agent->pending_calls[i].transaction_id == h->TransactionID 
				 && agent->pending_calls[i].reply_block == NULL )
			  { agent->pending_calls[i].reply_block = block;
				RestoreAgentA4();
				return(noErr);
			  };
		};
	  /* Get here for unexpected replies and for garbage blocks */
	  XDRReleaseBlock(agent, block);
	}
  RestoreAgentA4();
  return(noErr);
}

static OSErr InitiateCall (agent, module_number, module_version, entry_number, size,
						   ret_agent, ret_block, ret_pointer, ret_limit)
  XDRAgent agent;
  LongInt module_number, module_version, entry_number, size;
  XDRAgent* ret_agent;
  XDRBlock* ret_block;
  LongInt** ret_pointer;
  LongInt** ret_limit;
{
  XDRBlock block;
  LongInt TransactionID;
  LongInt* pointer;
  LongInt* limit;
  register RPCCallHeader* h;
  OSErr err;

  SetupAgentA4(agent);
  TransactionID = NextTransactionID();

  /* Don't start anything until we think we can finish without waiting */
  while ( XDRAgentBusy(agent) == Blocked )
	BusyWait(true);

  err = XDRAllocateBlock(agent, RPCCallHeaderLength + size, &block);
  if ( err )
    { RestoreAgentA4();
	  return ( err ); }
  pointer = XDRDataPointer(agent, block);
  limit = pointer + RPCCallHeaderLength + size;
  h = (RPCCallHeader*)pointer;

  h->TransactionID = TransactionID;
  h->RPCMessageType = 0;
  h->RPCVersion = 2;
  h->ModuleNumber = module_number;
  h->ModuleVersion = module_version;
  h->EntryNumber = entry_number;
  h->CredentialFlavor = 0;
  h->CredentialLength = 0;
  h->AuthenticationFlavor = 0;
  h->AuthenticationLength = 0;

  *ret_agent = agent;
  *ret_block = block;
  *ret_pointer = pointer + RPCCallHeaderLength;
  *ret_limit = limit;
  RestoreAgentA4();
  return (noErr);
}  

static OSErr InitiateErrorHandler (agent, error_number,
								   ret_agent, ret_block, ret_pointer, ret_limit)
  XDRAgent agent;
  LongInt error_number;
  XDRAgent* ret_agent;
  XDRBlock* ret_block;
  LongInt** ret_pointer;
  LongInt** ret_limit;
{
  LongInt* pointer;
  RPCErrorReplyHeader *h;

  SetupAgentA4(agent);

  if (agent->ErrorBlock == NULL) {
    RestoreAgentA4();
    return(RPC_NO_ERROR);
  }

  pointer = XDRDataPointer(agent, agent->ErrorBlock);
  h = (RPCErrorReplyHeader *) pointer;
  if ((h->AcceptStatus != REMOTE_ERROR) || (h->ErrorCode != error_number)) {
    RestoreAgentA4();
    return(RPC_WRONG_ERROR);
  }

  *ret_agent = agent;
  *ret_block = agent->ErrorBlock;
  *ret_pointer = pointer + RPCErrorReplyHeaderLength;
  *ret_limit = pointer + XDRDataSize(agent, agent->ErrorBlock);
  RestoreAgentA4();
  return (noErr);
}  

static OSErr RemoteError (agent, ret_error_number)
  XDRAgent agent;
  LongInt *ret_error_number;
{
  LongInt* pointer;
  RPCErrorReplyHeader *h;

  SetupAgentA4(agent);

  if (agent->ErrorBlock == NULL) {
    RestoreAgentA4();
    return(RPC_NO_ERROR);
  }

  pointer = XDRDataPointer(agent, agent->ErrorBlock);
  h = (RPCErrorReplyHeader *) pointer;
  if (h->AcceptStatus != REMOTE_ERROR) {
    RestoreAgentA4();
    return(RPC_WRONG_ERROR);
  }

  *ret_error_number = h->ErrorCode;

  RestoreAgentA4();
  return(noErr);
}  

static OSErr SendCallAndWait (agent, in_out_block)
  XDRAgent agent;
  XDRBlock* in_out_block;
{
  XDRBlock block = *in_out_block;
  LongInt TransactionID = ((RPCCallHeader*)XDRDataPointer(agent, block))->TransactionID;
  short i, slot;
  OSErr err;

  SetupAgentA4(agent);
  while ( XDRAgentBusy(agent) == Blocked )
	BusyWait(true);

  err = XDRSendBlock(agent, block);
  if ( err )
    { RestoreAgentA4();
	  return (err); }
  *in_out_block = NULL;

  for(slot = 0; slot < MAX_PENDING_CALLS; slot++)
	if ( agent->pending_calls[slot].call_waiting == FALSE )
	  goto found;
  /* Table is full, discard the oldest entry (should never happen, but let's be robust) */
  /* Age comparison has sign wraparound problems, but it really doesn't matter */
  { LongInt oldest = 0x7FFFFFFF;
	for(i = 0; i < MAX_PENDING_CALLS; i++)
	  if ( agent->pending_calls[i].transaction_id < oldest )
		{ oldest = agent->pending_calls[i].transaction_id;
		  slot = i;
		};
	if ( agent->pending_calls[slot].reply_block )
	  XDRReleaseBlock(agent, agent->pending_calls[slot].reply_block);
  };
found:
  agent->pending_calls[slot].call_waiting = TRUE;
  agent->pending_calls[slot].reply_block = NULL;
  agent->pending_calls[slot].transaction_id = TransactionID;

  err = WaitForReply(agent, TransactionID, in_out_block);
  RestoreAgentA4();
  return (err);
}

static OSErr SendAsynchronousCall (agent, in_out_block)
  XDRAgent agent;
  XDRBlock* in_out_block;
{
  XDRBlock block = *in_out_block;
  OSErr err;

  SetupAgentA4(agent);
  while ( XDRAgentBusy(agent) == Blocked )
	BusyWait(true);

  err = XDRSendBlock(agent, block);
  RestoreAgentA4();
  return (err);
}

static OSErr InitiateReceive (agent, block, ret_pointer, ret_limit)
  XDRAgent agent;
  XDRBlock block;
  LongInt** ret_pointer;
  LongInt** ret_limit;
{
  LongInt* pointer = XDRDataPointer(agent, block);
  LongInt size = XDRDataSize(agent, block);
  LongInt* limit = pointer + size;
  register RPCReplyHeader* h = (RPCReplyHeader*)pointer;
  int ReplyStatus = h->ReplyStatus;
  int AcceptStatus = h->AcceptStatus;

  SetupAgentA4(agent);
  if ( ReplyStatus == 0 && AcceptStatus == 0 ) 
    { *ret_pointer = pointer + RPCReplyHeaderLength;
      *ret_limit = limit;
      RestoreAgentA4();
      return (noErr);
    };

  /* Cache XDR block if error */
  if ((ReplyStatus == 0) && (AcceptStatus != SUCCESS)) {
    if (agent->ErrorBlock != NULL)
      XDRReleaseBlock(agent, agent->ErrorBlock);
    agent->ErrorBlock = block;
  } else
    XDRReleaseBlock(agent, block);

  RestoreAgentA4();
  if ( ReplyStatus != 0 ) return ( RPC_DENIED );
  switch ( AcceptStatus ) {
    case PROG_UNAVAIL: return ( RPC_PROG_UNAVAIL );
    case PROG_MISMATCH: return ( RPC_PROG_MISMATCH );
    case PROC_UNAVAIL: return ( RPC_PROC_UNAVAIL );
    case REMOTE_ERROR: return ( RPC_REMOTE_ERROR );
    case GARBAGE_ARGS: otherwise: return ( RPC_GARBAGE_ARGS );
  };
}

static OSErr InitiateReply (agent, TransactionID, size, ret_block, ret_pointer, ret_limit)
  XDRAgent agent;
  LongInt TransactionID, size;
  XDRBlock* ret_block;
  LongInt** ret_pointer;
  LongInt** ret_limit;
{
  XDRBlock block;
  LongInt* pointer;
  LongInt* limit;
  register RPCReplyHeader* h;
  OSErr err;

  SetupAgentA4(agent);
  err = XDRAllocateBlock(agent, RPCReplyHeaderLength + size, &block);
  if ( err )
    { RestoreAgentA4();
	  return ( err ); }
  pointer = XDRDataPointer(agent, block);
  limit = pointer + RPCReplyHeaderLength + size;
  h = (RPCReplyHeader*)pointer;

  h->TransactionID = TransactionID;
  h->RPCMessageType = 1;
  h->ReplyStatus = 0;
  h->VerificationFlavor = 0;
  h->VerificationLength = 0;
  h->AcceptStatus = SUCCESS;

  *ret_block = block;
  *ret_pointer = pointer + RPCReplyHeaderLength;
  *ret_limit = limit;
  RestoreAgentA4();
  return (noErr);
}

static OSErr SendReply (agent, block)
  XDRAgent agent;
  XDRBlock block;
{ OSErr err;

  SetupAgentA4(agent);
  while ( XDRAgentBusy(agent) == Blocked )
	BusyWait(false);		/* false so async calls will execute in order */

  err = XDRSendBlock(agent, block);
  RestoreAgentA4();
  return(err);
}

static OSErr InitiateError (agent, CallXDRBlock, ActualModuleVersion, error_number, size,
						    ret_block, ret_pointer, ret_limit)
  XDRAgent agent;
  XDRBlock CallXDRBlock;
  LongInt ActualModuleVersion, error_number, size;
  XDRBlock* ret_block;
  LongInt** ret_pointer;
  LongInt** ret_limit;
{
  XDRBlock block;
  LongInt* pointer;
  LongInt* limit;
  register RPCCallHeader* ch = (RPCCallHeader*)XDRDataPointer(agent, CallXDRBlock);
  register RPCErrorReplyHeader* h;
  OSErr err;

  SetupAgentA4(agent);
  err = XDRAllocateBlock(agent, RPCErrorReplyHeaderLength + size, &block);
  if ( err )
    { RestoreAgentA4();
	  return ( err ); }
  pointer = XDRDataPointer(agent, block);
  limit = pointer + RPCErrorReplyHeaderLength + size;
  h = (RPCErrorReplyHeader*)pointer;

  h->TransactionID = ch->TransactionID;
  h->RPCMessageType = 1;
  h->ReplyStatus = 0;
  h->VerificationFlavor = 0;
  h->VerificationLength = 0;
  h->AcceptStatus = REMOTE_ERROR;
  h->LowestModuleVersion = ActualModuleVersion;			/* real value not known */
  h->HighestModuleVersion = ActualModuleVersion;		/* real value not known */
  h->ModuleNumber = ch->ModuleNumber;
  h->ModuleVersion = ch->ModuleVersion;
  h->EntryNumber = ch->EntryNumber;
  h->ActualModuleVersion = ActualModuleVersion;
  h->ErrorCode = error_number;

  *ret_block = block;
  *ret_pointer = pointer + RPCErrorReplyHeaderLength;
  *ret_limit = limit;
  RestoreAgentA4();
  return (noErr);
}

static OSErr SendError (agent, block)
  XDRAgent agent;
  XDRBlock block;
{ OSErr err;

  SetupAgentA4(agent);
  while ( XDRAgentBusy(agent) == Blocked )
	BusyWait(false);		/* false so async calls will execute in order */

  err = XDRSendBlock(agent, block);
  RestoreAgentA4();
  return(err);
}

static int NeverBusy (agent)
  XDRAgent agent;
{ return(NotBusy);
}


/*** Set up the method dispatch table ***/

void Std_XDRAgent_fill_handlers (agent)
  XDRAgent agent;
{ int slot;

  agent->AllocateBlock = AllocateBlock;
  agent->AgentBusy = NeverBusy;
  /* agent->close must be provided by a more specific "flavor" */
  agent->DataPointer = DataPointer;
  agent->DataSize = DataSize;
  agent->ErrorBlock = NULL;
  agent->InitiateCall = InitiateCall;
  agent->InitiateError = InitiateError;
  agent->InitiateErrorHandler = InitiateErrorHandler;
  agent->InitiateReceive = InitiateReceive;
  agent->InitiateReply = InitiateReply;
  /* agent->Poll must be provided by a more specific "flavor" */
  agent->PollForCall = PollForCall;
  agent->ReleaseBlock = ReleaseBlock;
  agent->RemoteError = RemoteError;
  agent->SendAsynchronousCall = SendAsynchronousCall;
  /* agent->SendBlock must be provided by a more specific "flavor" */
  agent->SendCallAndWait = SendCallAndWait;
  agent->SendError = SendError;
  agent->SendReply = SendReply;
  OS_DEPENDENT_XDRAgent_initialization();
 
  for(slot = 0; slot < MAX_PENDING_CALLS; slot++)
	agent->pending_calls[slot].call_waiting = FALSE;

  DefaultXDRAgent = agent;
}

OSErr CloseRPC ()
{
  return (CloseAgent(DefaultXDRAgent));
}
