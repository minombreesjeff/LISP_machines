/*-*- Mode: C; Package: C-USER; Search-List: RPC -*- */
/*>
 *> *****************************************************************************************
 *> ** (c) Copyright 1993-1989 Symbolics, Inc.  All rights reserved.
 *> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
 *>
 *>    The software, data, and information contained herein are proprietary 
 *> to, and comprise valuable trade secrets of, Symbolics, Inc., which intends 
 *> to keep such software, data, and information confidential and to preserve 
 *> them as trade secrets.  They are given in confidence by Symbolics pursuant 
 *> to a written license agreement, and may be used, copied, transmitted, and 
 *> stored only in accordance with the terms of such license.
 *> 
 *> Symbolics, Symbolics 3600, Symbolics 3670 (R), Symbolics 3675 (R), Symbolics
 *> 3630, Symbolics 3640, Symbolics 3645 (R), Symbolics 3650 (R), Symbolics 3653,
 *> Symbolics 3620 (R), Symbolics 3610 (R), Symbolics Common Lisp (R),
 *> Symbolics-Lisp (R), Zetalisp (R), Genera (R), Wheels (R), Dynamic Windows (R),
 *> SmartStore (R), Semanticue (R), Frame-Up (R), Firewall (R), Document Examiner (R),
 *> Delivery Document Examiner, "Your Next Step in Computing" (R), Ivory, MacIvory,
 *> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
 *> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal (R),
 *> Symbolics Prolog, Symbolics Fortran (R), CLOE (R), CLOE Application Generator,
 *> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia, Joshua,
 *> Statice (R), and Minima are trademarks of Symbolics, Inc.
 *> 
 *> RESTRICTED RIGHTS LEGEND
 *>    Use, duplication, and disclosure by the Government are subject to restrictions 
 *> as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data and Computer 
 *> Software Clause at DFAR 52.227-7013.
 *> 
 *>      Symbolics, Inc.
 *>      6 Concord Farms
 *>      555 Virginia Road
 *>      Concord, Massachusetts 01742-2727
 *>      United States of America
 *>      508-287-1000
 *>
 *> *****************************************************************************************
 *>
 */

/* This file is SYS:EMBEDDING;RPC;UNIX;INET-AGENTS.C
 *
 * Internet (TCP and UDP) transport agents for Unix RPC.
 *
 * $Log:	inet-agents.c,v $
 * Revision 2.5.1.2  93/02/01  12:56:11  kaufman
 * Update copyright notices
 * 
 * Revision 2.5.1.1  93/02/01  11:52:04  kaufman
 * Baseline for distributed software
 * 
 * Revision 2.5  93/02/01  11:41:21  kaufman
 * Baseline for Genera 8.3
 * 
 *
 */

#ifndef lint
static char *rcsid = "@(#)$Header: /usr/share/local/symbolics/src/RCS/inet-agents.c,v 2.5.1.2 93/02/01 12:56:11 kaufman Rel $";
#endif

#include <ctype.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/wait.h>
#include <netinet/in.h>
#include <netdb.h>
#include <errno.h>
#include <signal.h>
#include <stdio.h>

#include "RPC.h"
#include "Modules.h"
#include "unix-agent.h"
#include "dgagent.h"

static int registered_modules = 0;
int rpc_inhibit_module_deregistration = 0;

/* Deregister all modules.  Only run in the parent, please, since
 * the interface to the portmapper is so brain damaged. */
deregister_modules ()
{
  extern LongInt ModuleTableSize;
  extern ModuleDefinition *ModuleTable;
  int i;

  if (registered_modules != 0 && rpc_inhibit_module_deregistration == 0)
    for (i = 0; i < ModuleTableSize; i++)
      if (ModuleTable[i].type != NoModule)
	pmap_unset((unsigned LongInt) ModuleTable[i].module_number,
		   (unsigned LongInt) ModuleTable[i].module_version);
}

/* Register all modules with the portmapper */
reregister_modules (af, port, type)
     int af, port, type;
{
  extern LongInt ModuleTableSize;
  extern ModuleDefinition *ModuleTable;
  int i, proto;
  
  if (af == AF_INET) {
    if (type == SOCK_STREAM)
      proto = IPPROTO_TCP;
    else
      proto = IPPROTO_UDP;

    for (i = 0; i < ModuleTableSize; i++)
      if (ModuleTable[i].type != NoModule)
	pmap_set((unsigned LongInt) ModuleTable[i].module_number,
		 (unsigned LongInt) ModuleTable[i].module_version, proto, port);
    registered_modules = 1;
#ifdef __osf__
    atexit(deregister_modules) ;
#else
    on_exit(deregister_modules, NULL);
#endif
  }
}

/* Wait for exited children */
#ifdef __osf__
void sigchld_handler (int sigval)
#else
void sigchld_handler ()
#endif
{
  int cc;
  
  while ((cc = wait3(NULL, WNOHANG, NULL)) > 0)
    if (cc == -1 && errno != ECHILD)
      perror("wait3");
  signal(SIGCHLD, sigchld_handler);
  return;
}

/* This works for both TCP and UDP, but is a little too IP-aware
 * to work for other socket types.  It forks a child for each
 * connection, while the main process keeps listening. */
static open_agent_socket(host_name, af, port, type, listen_p)
     char *host_name;
     int af, port, type, listen_p;
{
  struct sockaddr_in sin;
  struct hostent *host = 0;
  int cc, sock, i;
  unsigned LongInt tmp;

  bzero((char *) &sin, sizeof(sin));
  sin.sin_family = af;
  sin.sin_port = port;

  if (0 == host_name) {
    sin.sin_addr.s_addr = INADDR_ANY;
    sock = socket(af, type, 0);
    if (sock < 0) return(-1);
    cc = bind(sock, (struct sockaddr *)&sin, sizeof (sin));
    if (cc < 0) {
      close(sock);
      return(-1);
    }
    i = sizeof(sin);
    if (!port && getsockname(sock, (struct sockaddr *)&sin, &i) == -1) {
      close(sock);
      return(-1);
    }
    reregister_modules(af, sin.sin_port, type);
    if (listen_p) {
      signal(SIGCHLD, sigchld_handler);
      while (1) {
	cc = listen(sock, 999);	/* I think 5's the real limit */
	if (cc < 0)
	  if (errno == EINTR)
	    continue;
	  else {
	    close(sock);
	    return(-1);
	  }
	i = sizeof(sin);
	cc = accept(sock, (struct sockaddr *)&sin, &i);
	/* accept returns a descriptor for a new socket.
	 * If there was no error, fork a child to handle the new connection. */
	if (cc < 0) {
	  if (errno == EINTR)
	    continue;
	  else {
	    close(sock);
	    return(-1);
	  }
	} else {
	  if ((i = fork()) == -1) {
	    perror("fork");
	    return(-1);
	  } else if (i == 0) {
	    /* Child */
	    rpc_inhibit_module_deregistration = 1;
	    close(sock);
	    sock = cc;
	    break;
	  } else {
	    /* Parent */
	    close(cc);
	  }
	}
      }
    }
  } else {
    sin.sin_addr.s_addr = inet_addr(host_name);
    if (-1 == sin.sin_addr.s_addr) {
      if ((host = gethostbyname(host_name)) != NULL) {
	/* Of course this loses if the first address isn't on the internet. */
	sin.sin_family = host->h_addrtype;
	bcopy(host->h_addr_list[0], (caddr_t)&sin.sin_addr, host->h_length);
      } else if ((tmp = inet_addr(host_name)) != NULL) {
	sin.sin_family = AF_INET;
	bcopy(&tmp, (caddr_t) &sin.sin_addr, sizeof(tmp));
      } else
	return(-1);
    }
    sock = socket(af, type, 0);
    if (sock < 0) return(-1);
    cc = connect(sock, (struct sockaddr *)&sin, sizeof (sin));
    if (cc < 0) {
      close(sock);
      return(-1);
    }
  }
  return(sock);
}

tcp_agent_close (self)
     Unix_XDRAgent *self;
{
  deregister_modules();
  Unix_agent_close(self);
  return(noErr);
}

OSErr tcp_agent_open(host_name, port)
     char *host_name;
     int port;
{
  Unix_XDRAgent *self;
  BS_XDRAgent *BSAgent; 
  int sock, err;

  sock = open_agent_socket(host_name, AF_INET, port, SOCK_STREAM, TRUE);

  if (sock < 0)
    return(errno);

  err = AllocateMemory(sizeof(Unix_XDRAgent), (void **)&self);
  if (err)
    return(err);
  BSAgent = (BS_XDRAgent *) self;
  BSAgent->close = (void *)tcp_agent_close;
  BS_XDRAgent_fill_handlers(BSAgent);
  Unix_XDRAgent_fill_handlers(self);
  self->fd = sock;
  return(noErr);
}


/* UDP agents are datagram agents */

OSErr udp_agent_input (self, count, pointer)
     DG_XDRAgent *self;
     LongInt *count;
     char *pointer;
{
  int cc;
  int fromlen = self->NameLength;

  cc = recvfrom(self->fd, pointer, *count, 0,
		(struct sockaddr *) (pointer + *count), &fromlen);
  if (cc < 0) return(errno);
  return(noErr);
}

OSErr udp_agent_output (self, count, pointer, force)
     DG_XDRAgent *self;
     LongInt *count;
     char *pointer;
{
  int cc;

  /* Can't use sendto() if you've used connect() */
  if (self->ConnectedP == TRUE)
    cc = send(self->fd, pointer, *count, 0);
  else
    cc = sendto(self->fd, pointer, *count, 0,
		(struct sockaddr *) (pointer + *count), self->NameLength);

  if (cc < 0) return(errno);
  return(noErr);
}

udp_agent_close (self)
     DG_XDRAgent *self;
{
  extern int disable_pointer_verification;

  disable_pointer_verification--;
  deregister_modules();
  Unix_agent_close(self);
  return(noErr);
}

OSErr udp_agent_open(host_name, port)
     char *host_name;
     int port;
{
  Unix_XDRAgent *UnixAgent;
  DG_XDRAgent *DGAgent;
  int sock, err;
  extern int disable_pointer_verification;

  sock = open_agent_socket(host_name, AF_INET, port, SOCK_DGRAM, FALSE);

  if (sock < 0)
    return(errno);

  err = AllocateMemory(sizeof(DG_XDRAgent), (void **)&DGAgent);
  if (err)
    return(err);
  UnixAgent = (Unix_XDRAgent *) DGAgent;
  Unix_XDRAgent_fill_handlers(UnixAgent);
  UnixAgent->fd = sock;
  DG_XDRAgent_fill_handlers(DGAgent);
  DGAgent->input = udp_agent_input;
  DGAgent->output = udp_agent_output;
  DGAgent->close = (void*)udp_agent_close;
  DGAgent->NameLength = sizeof(struct sockaddr_in);
  if (host_name != NULL)
    DGAgent->ConnectedP = TRUE;
  disable_pointer_verification++;
  return(noErr);
}
