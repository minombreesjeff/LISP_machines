/* -*- Mode: C -*- */
/*>
 *> *****************************************************************************************
 *> ** (c) Copyright 1993-1988 Symbolics, Inc.  All rights reserved.
 *> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
 *>
 *>    The software, data, and information contained herein are proprietary 
 *> to, and comprise valuable trade secrets of, Symbolics, Inc., which intends 
 *> to keep such software, data, and information confidential and to preserve 
 *> them as trade secrets.  They are given in confidence by Symbolics pursuant 
 *> to a written license agreement, and may be used, copied, transmitted, and 
 *> stored only in accordance with the terms of such license.
 *> 
 *> Symbolics, Symbolics 3600, Symbolics 3670 (R), Symbolics 3675 (R), Symbolics
 *> 3630, Symbolics 3640, Symbolics 3645 (R), Symbolics 3650 (R), Symbolics 3653,
 *> Symbolics 3620 (R), Symbolics 3610 (R), Symbolics Common Lisp (R),
 *> Symbolics-Lisp (R), Zetalisp (R), Genera (R), Wheels (R), Dynamic Windows (R),
 *> SmartStore (R), Semanticue (R), Frame-Up (R), Firewall (R), Document Examiner (R),
 *> Delivery Document Examiner, "Your Next Step in Computing" (R), Ivory, MacIvory,
 *> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
 *> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal (R),
 *> Symbolics Prolog, Symbolics Fortran (R), CLOE (R), CLOE Application Generator,
 *> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia, Joshua,
 *> Statice (R), and Minima are trademarks of Symbolics, Inc.
 *> 
 *> RESTRICTED RIGHTS LEGEND
 *>    Use, duplication, and disclosure by the Government are subject to restrictions 
 *> as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data and Computer 
 *> Software Clause at DFAR 52.227-7013.
 *> 
 *>      Symbolics, Inc.
 *>      6 Concord Farms
 *>      555 Virginia Road
 *>      Concord, Massachusetts 01742-2727
 *>      United States of America
 *>      508-287-1000
 *>
 *> *****************************************************************************************
 *>
 */

/* This file is SYS:EMBEDDING;RPC;GENERIC;RPC.H. */

/* Common definitions for RPC clients and servers */

#ifndef _RPC_
#define _RPC_

#include "RPC-OS.h"

#ifndef NULL
#define NULL ((void *)0)
#endif

#ifndef false
#define false 0
#endif

#ifndef true
#define true 1
#endif

#ifndef __osf__
#define IPPORT_RPC 6259
#else
#define IPPORT_RPC 0x7118	    /* little-endian byte-reversed port#, == 6257 */
#endif

#ifndef RPC_OSERR_
typedef int OSErr;
#define noErr 0
#define dirFulErr 69
#define RPC_OSERR_
#endif

#ifndef STRUCT_POINTER_SIZE
#define STRUCT_POINTER_SIZE
#endif

#ifndef PROTO_ARGS
#define PROTO_ARGS(args) args
#endif

#ifdef RPC_USE_PROTOTYPES
#ifndef __osf__
typedef OSErr (*FunctionPtr) (...);
#else
typedef OSErr (*FunctionPtr) () ;
#endif
#else
typedef OSErr (*FunctionPtr) ();
#endif

#ifndef RPC_EXTERNAL_AGENTS

/* An XDRBlock is just a nonrelocatable block of storage */

typedef void* XDRBlock;

/* Maximum number of outgoing calls that can happen simultaneously */

#define MAX_PENDING_CALLS 20

/* An XDRAgent is a poor man's flavor object */
/* Methods are dispatched indirectly through pointers in the object, using macros
   defined below.  For want of a better order, these are alphabetical */

#ifdef RPC_USE_PROTOTYPES
#define XDRAgent_METHODS \
  OSErr (*AllocateBlock) PROTO_ARGS((struct XDRAgentRecord* agent, LongInt size, \
				     XDRBlock* ret_block)); \
  int   (*AgentBusy) PROTO_ARGS((struct XDRAgentRecord* agent)); \
  OSErr (*close) PROTO_ARGS((struct XDRAgentRecord* agent)); \
  LongInt* (*DataPointer) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock block)); \
  LongInt  (*DataSize) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock block)); \
  OSErr (*InitiateCall) PROTO_ARGS((struct XDRAgentRecord* agent, \
				    LongInt module_number, LongInt module_version, \
				    LongInt entry_number, LongInt size, \
				    struct XDRAgentRecord** ret_agent, \
				    XDRBlock* ret_block, LongInt** ret_pointer, \
				    LongInt** ret_limit)); \
  OSErr (*InitiateError) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock CallXDRBlock, \
				     LongInt ActualModuleVersion, LongInt error_number, \
				     LongInt size, XDRBlock* ret_block, LongInt** ret_pointer, \
				     LongInt** ret_limit)); \
  OSErr (*InitiateErrorHandler) PROTO_ARGS((struct XDRAgentRecord*, LongInt error_number, \
					    struct XDRAgentRecord** ret_agent, \
					    XDRBlock* ret_block, LongInt** ret_pointer, \
					    LongInt** ret_limit)); \
  OSErr (*InitiateReceive) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock ret_block, \
				       LongInt** ret_pointer, LongInt** ret_limit)); \
  OSErr (*InitiateReply) PROTO_ARGS((struct XDRAgentRecord* agent, LongInt TransactionID, \
				     LongInt size, XDRBlock* ret_block, LongInt** ret_pointer, \
				     LongInt** ret_limit)); \
  OSErr (*Poll) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock* ret_block)); \
  OSErr (*PollForCall) PROTO_ARGS((struct XDRAgentRecord* agent, \
				   XDRBlock* ret_block, LongInt** ret_pointer, LongInt** ret_limit, \
				   LongInt* ret_module_number, LongInt* ret_module_version, \
				   LongInt* ret_entry_number, LongInt* ret_transaction_id)); \
  OSErr (*ReleaseBlock) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock block)); \
  OSErr (*RemoteError) PROTO_ARGS((struct XDRAgentRecord* agent, LongInt* ret_error_number)); \
  OSErr (*SendAsynchronousCall) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock* block)); \
  OSErr (*SendBlock) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock block)); \
  OSErr (*SendCallAndWait) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock* block)); \
  OSErr (*SendError) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock block)); \
  OSErr (*SendReply) PROTO_ARGS((struct XDRAgentRecord* agent, XDRBlock block));
#else
#define XDRAgent_METHODS \
  FunctionPtr AllocateBlock; \
  int       (*AgentBusy)(); \
  FunctionPtr close; \
  LongInt*     (*DataPointer)(); \
  LongInt      (*DataSize)(); \
  FunctionPtr InitiateCall; \
  FunctionPtr InitiateError; \
  FunctionPtr InitiateErrorHandler; \
  FunctionPtr InitiateReceive; \
  FunctionPtr InitiateReply; \
  FunctionPtr Poll; \
  FunctionPtr PollForCall; \
  FunctionPtr ReleaseBlock; \
  FunctionPtr RemoteError; \
  FunctionPtr SendAsynchronousCall; \
  FunctionPtr SendBlock; \
  FunctionPtr SendCallAndWait; \
  FunctionPtr SendError; \
  FunctionPtr SendReply;
#endif

#define XDRAgent_DATA \
  OS_DEPENDENT_XDRAgent_DATA \
  XDRBlock  ErrorBlock; \
  struct {					/* Table of outgoing calls awaiting reply */ \
    short call_waiting;				/* Boolean: True if this slot is in use */ \
    LongInt transaction_id;			/* Transaction ID */ \
    XDRBlock reply_block;			/* NULL if waiting, else reply block */ \
  } pending_calls[MAX_PENDING_CALLS];

/* Common to all XDRAgents */

typedef struct XDRAgentRecord {
  XDRAgent_METHODS
  XDRAgent_DATA
  LongInt additional_data[STRUCT_POINTER_SIZE];	/* Depends on the particular flavor of agent */
 } *XDRAgent, XDRAgentRecord;

extern XDRAgent DefaultXDRAgent;		/* Link in an agent that sets this */

/* Entry points to the agent -- alphabetical order by method name */
/* The agent is the first argument, except for RPCInitiateCall and
 * RPCInitiateErrorHandler, which default to DefaultXDRAgent */

#define XDRAllocateBlock(agent, size, ret_block) \
  (*agent->AllocateBlock)(agent, size, ret_block)

#define XDRAgentBusy(agent) \
  (*agent->AgentBusy)(agent)

#define CloseAgent(agent) \
  (*agent->close)(agent)

#define XDRDataPointer(agent, block) \
  (*agent->DataPointer)(agent, block)

#define XDRDataSize(agent, block) \
  (*agent->DataSize)(agent, block)

#define RPCInitiateCall(module_number, module_version, entry_number, size, ret_agent, ret_block, ret_pointer, ret_limit) \
  (*DefaultXDRAgent->InitiateCall)(DefaultXDRAgent, module_number, module_version, \
				      entry_number, size, \
				      ret_agent, ret_block, ret_pointer, ret_limit)

#define RPCInitiateErrorHandler(error_number, ret_agent, ret_block, ret_pointer, ret_limit) \
  (*DefaultXDRAgent->InitiateErrorHandler)(DefaultXDRAgent, error_number, \
					   ret_agent, ret_block, ret_pointer, ret_limit)

#define XDRInitiateError(agent, CallXDRBlock, ActualModuleVersion, error_number, size, block, pointer, limit) \
  (*agent->InitiateError)(agent, CallXDRBlock, ActualModuleVersion, error_number, size, \
			  block, pointer, limit)

#define XDRInitiateReceive(agent, block, pointer, limit) \
  (*agent->InitiateReceive)(agent, block, pointer, limit)

#define XDRInitiateReply(agent, TransactionID, size, block, pointer, limit) \
  (*agent->InitiateReply)(agent, TransactionID, size, block, pointer, limit)

#define PollAgent(agent, ret_block) \
  (*agent->Poll)(agent, ret_block)
 
#define RPCPollForCall(agent, block, pointer, limit, module_number, module_version, entry_number, transaction_id) \
  (*agent->PollForCall)(agent, block, pointer, limit, \
                        module_number, module_version, entry_number, transaction_id)

#define XDRReleaseBlock(agent, block) \
  (*agent->ReleaseBlock)(agent, block)

#define RPCRemoteError(ret_error_number) \
  (*DefaultXDRAgent->RemoteError)(DefaultXDRAgent, ret_error_number)

#define RPCSendAsynchronousCall(agent, block) \
  (*agent->SendAsynchronousCall)(agent, block)

#define XDRSendBlock(agent, block) \
  (*agent->SendBlock)(agent, block)

#define RPCSendCallAndWait(agent, block) \
  (*agent->SendCallAndWait)(agent, block)

#define XDRSendError(agent, block) \
  (*agent->SendError)(agent, block)

#define XDRSendReply(agent, block) \
  (*agent->SendReply)(agent, block)

/* RPC error reporting functions -- These are "simple" functions defined in RPCspprt.c */

#define ReportRPCOpenFailure(err, embeddedP, host) \
  RPCOpenFailureReporter (DefaultXDRAgent, err, embeddedP, host)
extern Boolean RPCOpenFailureReporter PROTO_ARGS((XDRAgent agent, OSErr err, Boolean embeddedP,
						  char* host));

#define ReportRPCCallFailure(fatalP, err, embeddedP, host) \
  RPCCallFailureReporter (DefaultXDRAgent, fatalP, err, embeddedP, host)
extern Boolean RPCCallFailureReporter PROTO_ARGS((XDRAgent agent, Boolean fatalP, OSErr err,
						  Boolean embeddedP, char* host));

/* RPC protocol message headers */

typedef struct {
  LongInt TransactionID;
  LongInt RPCMessageType;		/* 0 */
  LongInt RPCVersion;		/* 2 */
  LongInt ModuleNumber;
  LongInt ModuleVersion;
  LongInt EntryNumber;
  LongInt CredentialFlavor;	/* 0 */
  LongInt CredentialLength;	/* 0 */
  LongInt AuthenticationFlavor;	/* 0 */
  LongInt AuthenticationLength;	/* 0 */
 } RPCCallHeader;

#define RPCCallHeaderLength (sizeof(RPCCallHeader) >> 2)

typedef struct {
  LongInt TransactionID;
  LongInt RPCMessageType;		/* 1 */
  LongInt ReplyStatus;		/* 0 accepted, 1 denied */
  LongInt VerificationFlavor;	/* 0 */
  LongInt VerificationLength;	/* 0 */
  LongInt AcceptStatus;		/* 0 success ... */
 } RPCReplyHeader;

#define RPCReplyHeaderLength (sizeof(RPCReplyHeader) >> 2)

enum accept_stat {
        SUCCESS       = 0, /* RPC executed successfully       */
        PROG_UNAVAIL  = 1, /* remote hasn't exported program  */
        PROG_MISMATCH = 2, /* remote can't support version #  */
        PROC_UNAVAIL  = 3, /* program can't support procedure */
        GARBAGE_ARGS  = 4, /* procedure can't decode params   */
	REMOTE_ERROR  = 5  /* remote error number and args follow (Symbolics extension) */
};

/* Define additional information that is optionally present in error replies */
/* For simplicity, we use the same structure for all error replies */
typedef struct {
  LongInt TransactionID;
  LongInt RPCMessageType;		/* 1 */
  LongInt ReplyStatus;		/* 0 accepted */
  LongInt VerificationFlavor;	/* 0 */
  LongInt VerificationLength;	/* 0 */
  LongInt AcceptStatus;		/* not success ... */
  LongInt LowestModuleVersion;	/* lowest module version available (if PROG_MISMATCH) */
  LongInt HighestModuleVersion;	/* highest module version available (if PROG_MISMATCH) */
  LongInt ModuleNumber;		/* module that was called */
  LongInt ModuleVersion;		/* requested version */
  LongInt EntryNumber;		/* entry that was called */
  LongInt ActualModuleVersion;	/* actual version used */
  LongInt ErrorCode;		/* remote error number or operating system error code */
 } RPCErrorReplyHeader;		/* REMOTE_ERROR => error arguments follow */

#define RPCErrorReplyHeaderLength (sizeof(RPCErrorReplyHeader) >> 2)

#else

extern OSErr XDRAllocateBlock PROTO_ARGS((XDRAgent agent, LongInt size, XDRBlock* ret_block));

extern int XDRAgentBusy PROTO_ARGS((XDRAgent agent));

extern OSErr CloseAgent PROTO_ARGS((XDRAgent agent));

extern LongInt XDRDataPointer PROTO_ARGS((XDRAgent agent, XDRBlock block));

extern LongInt XDRDataSize PROTO_ARGS((XDRAgent agent, XDRBlock block));

extern OSErr RPCInitiateCall PROTO_ARGS((LongInt module_number, LongInt module_version,
                                         LongInt entry_number, LongInt size, XDRAgent* ret_agent,
                                         XDRBlock* ret_block, LongInt** ret_pointer,
                                         LongInt** ret_limit));

extern OSErr XDRInitiateError PROTO_ARGS((XDRAgent agent, XDRBlock CallXDRBlock,
                                          LongInt ActualModuleVersion, LongInt error_number,
                                           LongInt size, XDRBlock* ret_block, LongInt** ret_pointer,
                                           LongInt** ret_limit));

extern OSErr XDRInitiateReceive PROTO_ARGS((XDRAgent agent, XDRBlock* ret_block,
				            LongInt** ret_pointer, LongInt** ret_limit));

extern OSErr XDRInitiateReply PROTO_ARGS((XDRAgent agent, LongInt TransactionID, LongInt size,
			                  XDRBlock* ret_block, LongInt** ret_pointer,
                                          LongInt** ret_limit));

extern OSErr PollAgent PROTO_ARGS((XDRAgent agent, XDRBlock* ret_block));

extern OSErr RPCPollForCall PROTO_ARGS((XDRAgent agent, 
			    XDRBlock* ret_block, LongInt** ret_pointer, LongInt** ret_limit,
			    LongInt* ret_module_number, LongInt* ret_module_version,
			    LongInt* ret_entry_number, LongInt* ret_transaction_id));

extern OSErr XDRReleaseBlock PROTO_ARGS((XDRAgent agent, XDRBlock block));

extern OSErr RPCSendAsynchronousCall PROTO_ARGS((XDRAgent agent, XDRBlock block));

extern OSErr XDRSendBlock PROTO_ARGS((XDRAgent agent, XDRBlock block));

extern OSErr RPCSendCallAndWait PROTO_ARGS((XDRAgent agent, XDRBlock block));

extern OSErr XDRSendError PROTO_ARGS((XDRAgent agent, XDRBlock block));

extern OSErr XDRSendReply PROTO_ARGS((XDRAgent agent, XDRBlock block));

#endif

extern void XDRVerifyPointer PROTO_ARGS((LongInt* pointer, LongInt* limit));

extern OSErr RPCNoValues PROTO_ARGS((XDRAgent agent, LongInt TransactionID));

/* Return values from XDRAgentBusy */

enum {
  NotBusy = 0,		/* agent isn't doing anything */
  IOinProgress = 1,	/* some I/O happening but can accept more */
  Blocked = 2		/* an attempt to send would have to wait */
     };

/* Call this when you need to wait, to invoke or simulate multiprocessing */
/* Note that this accepts incoming calls, just as if each call was serviced
   in its own process  */

extern void BusyWait PROTO_ARGS((Boolean allow_rpc));

/* Interface for linked modules to define themselves */

extern OSErr RegisterModule PROTO_ARGS((LongInt module_number, LongInt module_version,
                                        FunctionPtr handler));
extern OSErr RegisterModuleWithStatic PROTO_ARGS((LongInt module_number, LongInt module_version,
                                                  FunctionPtr handler, Ptr static_pointer));

/* Functions which open the various types of agents */

extern OSErr emb_agent_open PROTO_ARGS((void));
extern OSErr tcp_agent_open PROTO_ARGS((char* host, int port));
extern OSErr reliable_agent_open PROTO_ARGS((XDRAgent agent));
extern OSErr serial_agent_open PROTO_ARGS((void));

/* Other functions that users must call */

extern void  InitializeRPC PROTO_ARGS((void));
extern OSErr initialize_predefined_remote_entries_server PROTO_ARGS((void));
extern void  PollRPC PROTO_ARGS((void));
extern OSErr CloseRPC PROTO_ARGS((void));

/* RPC specific error codes */

#define RPC_DENIED 2000		/* server denied access */
#define RPC_PROG_UNAVAIL 2001	/* remote module not found */
#define RPC_PROG_MISMATCH 2002	/* cannot find correct version of remote module */
#define RPC_PROC_UNAVAIL 2003	/* remote entry not found */
#define RPC_GARBAGE_ARGS 2004	/* procedure can't decode parameters */
#define RPC_REMOTE_ERROR 2005	/* remote error reported, use Lisp if you want to know which */
#define RPC_MODULE_INITIALIZED 2006	/* used by dynamic server loader */
#define RPC_NO_ERROR 2007	/* RPCInitiateErrorHandler(): No remote error pending */
#define RPC_WRONG_ERROR 2008	/* RPCInitiateErrorHandler(): Wrong remote error pending */

/* Nicer interface for memory allocation.  See RPC.C for a little note on naming. */
/* and other routines defined rpcspprt.c */

extern OSErr AllocateMemory PROTO_ARGS((LongInt size, void **result));
extern OSErr FreeMemory PROTO_ARGS((void **pointer));
extern LongInt AllocatedSize PROTO_ARGS((void *pointer));
extern OSErr CopyMemory PROTO_ARGS((void *from, void *to, LongInt size));
extern LongInt SystemClock PROTO_ARGS((void));
extern LongInt NextTransactionID PROTO_ARGS((void));
extern float DecodeFloat PROTO_ARGS((LongInt representation));
extern LongInt EncodeFloat PROTO_ARGS((double value));	/* I'd like the arg to be float, but doesn't work */


#endif
