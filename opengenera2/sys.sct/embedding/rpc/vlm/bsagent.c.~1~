/*-*- Mode: C; Package: C-USER; Search-List: RPC; Tab-width: 4 -*- */
/*>
 *> *****************************************************************************************
 *> ** (c) Copyright 1993-1988 Symbolics, Inc.  All rights reserved.
 *> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
 *>
 *>    The software, data, and information contained herein are proprietary 
 *> to, and comprise valuable trade secrets of, Symbolics, Inc., which intends 
 *> to keep such software, data, and information confidential and to preserve 
 *> them as trade secrets.  They are given in confidence by Symbolics pursuant 
 *> to a written license agreement, and may be used, copied, transmitted, and 
 *> stored only in accordance with the terms of such license.
 *> 
 *> Symbolics, Symbolics 3600, Symbolics 3670 (R), Symbolics 3675 (R), Symbolics
 *> 3630, Symbolics 3640, Symbolics 3645 (R), Symbolics 3650 (R), Symbolics 3653,
 *> Symbolics 3620 (R), Symbolics 3610 (R), Symbolics Common Lisp (R),
 *> Symbolics-Lisp (R), Zetalisp (R), Genera (R), Wheels (R), Dynamic Windows (R),
 *> SmartStore (R), Semanticue (R), Frame-Up (R), Firewall (R), Document Examiner (R),
 *> Delivery Document Examiner, "Your Next Step in Computing" (R), Ivory, MacIvory,
 *> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
 *> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal (R),
 *> Symbolics Prolog, Symbolics Fortran (R), CLOE (R), CLOE Application Generator,
 *> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia, Joshua,
 *> Statice (R), and Minima are trademarks of Symbolics, Inc.
 *> 
 *> RESTRICTED RIGHTS LEGEND
 *>    Use, duplication, and disclosure by the Government are subject to restrictions 
 *> as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data and Computer 
 *> Software Clause at DFAR 52.227-7013.
 *> 
 *>      Symbolics, Inc.
 *>      6 Concord Farms
 *>      555 Virginia Road
 *>      Concord, Massachusetts 01742-2727
 *>      United States of America
 *>      508-287-1000
 *>
 *> *****************************************************************************************
 *>
 */

/* This file is SYS:EMBEDDING;RPC;GENERIC;BSAGENT.C. */

/* Transport agents using a byte stream protocol. */
/* built on top of stdagent.c */

#include "bsagent.h"
#include "error.h"

#ifdef RPC_USE_PROTOTYPES
static OSErr BSSendBlock PROTO_ARGS((BS_XDRAgent* agent, XDRBlock block));
static OSErr BSReceiveBlock PROTO_ARGS((BS_XDRAgent* agent, XDRBlock* ret_block));
static OSErr BSPoll PROTO_ARGS((BS_XDRAgent* agent, XDRBlock* ret_block));
#endif

/* Agent routines */
/* Translated from byte stream agent in stream-agent.lisp */
/* No attempt at multiprocessing support */

static OSErr BSSendBlock (agent, block)
  BS_XDRAgent* agent;
  XDRBlock block;
{
  XDRAgent XDR_agent = (XDRAgent) agent;
  unsigned LongInt n_bytes = XDRDataSize(XDR_agent, block) << 2;
  unsigned char header[4];
  LongInt count;
  OSErr err;
  
  SetupAgentA4(agent);
  header[0] = (n_bytes >> 24) | 0200;
  header[1] = n_bytes >> 16;
  header[2] = n_bytes >> 8;
  header[3] = n_bytes;
  count = 4;
  err = BS_XDRAgent_output(agent, &count, (char*)header, false);
  if ( err == noErr && count != 4) err = rpc_transmission_failed_error;
  if ( err )
    { RestoreAgentA4();
	  return (err); }
  count = n_bytes;
  err = BS_XDRAgent_output(agent, &count, (char*)XDRDataPointer(XDR_agent, block), true);
  if ( err == noErr && count != n_bytes) err = rpc_transmission_failed_error;
  XDRReleaseBlock(XDR_agent, block);
  RestoreAgentA4();
  return (err);
}

/* This has a particular block format wired into it */
static OSErr BSReceiveBlock (agent, ret_block)
  BS_XDRAgent* agent;
  XDRBlock* ret_block;
{
  XDRAgent XDR_agent = (XDRAgent) agent;
  XDRBlock block;
  unsigned LongInt n_bytes;
  unsigned char header[4];
  LongInt count;
  OSErr err;
  
  *ret_block = NULL;
  count = 4;
  err = BS_XDRAgent_input(agent, &count, (char*)header);
  if ( err == noErr && count != 4) err = rpc_transmission_failed_error;
  if ( err ) return (err);
  if ( (header[0] & 0200) == 0 ) Debugger();    /* multi-fragment not implemented */
  n_bytes = ((LongInt)(header[0] & 0177) << 24) + ((LongInt)header[1] << 16) + 
            ((LongInt)header[2] << 8) + header[3];
  err  = XDRAllocateBlock(XDR_agent, n_bytes >> 2, &block);
  if ( err ) return ( err );
  count = n_bytes;
  err = BS_XDRAgent_input(agent, &count, block);
  if ( err == noErr && count != n_bytes) err = rpc_transmission_failed_error;
  if ( err == noErr ) *ret_block = block;
  return (err);
}

static OSErr BSPoll (agent, ret_block)
  BS_XDRAgent* agent;
  XDRBlock* ret_block;
{
  LongInt count;
  OSErr err;
  
  SetupAgentA4(agent);
  *ret_block = NULL;
  err = BS_XDRAgent_listen(agent, &count);
  if ( err == noErr && count >= 4 ) 
    err = BSReceiveBlock(agent, ret_block);
  RestoreAgentA4();
  return(err);
}

void BS_XDRAgent_fill_handlers(agent)
  BS_XDRAgent *agent;
{
  Std_XDRAgent_fill_handlers((XDRAgent)agent);
  /* agent->close must be provided by a more specific "flavor" */
  agent->Poll = (FunctionPtr)BSPoll;
  agent->SendBlock = (FunctionPtr)BSSendBlock;
}
