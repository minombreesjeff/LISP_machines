/*-*- Mode: C; Package: C-USER; Search-List: RPC -*- */
/*>
 *> *****************************************************************************************
 *> ** (c) Copyright 1993-1988 Symbolics, Inc.  All rights reserved.
 *> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
 *>
 *>    The software, data, and information contained herein are proprietary 
 *> to, and comprise valuable trade secrets of, Symbolics, Inc., which intends 
 *> to keep such software, data, and information confidential and to preserve 
 *> them as trade secrets.  They are given in confidence by Symbolics pursuant 
 *> to a written license agreement, and may be used, copied, transmitted, and 
 *> stored only in accordance with the terms of such license.
 *> 
 *> Symbolics, Symbolics 3600, Symbolics 3670 (R), Symbolics 3675 (R), Symbolics
 *> 3630, Symbolics 3640, Symbolics 3645 (R), Symbolics 3650 (R), Symbolics 3653,
 *> Symbolics 3620 (R), Symbolics 3610 (R), Symbolics Common Lisp (R),
 *> Symbolics-Lisp (R), Zetalisp (R), Genera (R), Wheels (R), Dynamic Windows (R),
 *> SmartStore (R), Semanticue (R), Frame-Up (R), Firewall (R), Document Examiner (R),
 *> Delivery Document Examiner, "Your Next Step in Computing" (R), Ivory, MacIvory,
 *> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
 *> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal (R),
 *> Symbolics Prolog, Symbolics Fortran (R), CLOE (R), CLOE Application Generator,
 *> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia, Joshua,
 *> Statice (R), and Minima are trademarks of Symbolics, Inc.
 *> 
 *> RESTRICTED RIGHTS LEGEND
 *>    Use, duplication, and disclosure by the Government are subject to restrictions 
 *> as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data and Computer 
 *> Software Clause at DFAR 52.227-7013.
 *> 
 *>      Symbolics, Inc.
 *>      6 Concord Farms
 *>      555 Virginia Road
 *>      Concord, Massachusetts 01742-2727
 *>      United States of America
 *>      508-287-1000
 *>
 *> *****************************************************************************************
 *>
 */

/* This file is SYS:EMBEDDING;RPC;UNIX;RPCSPPRT.C (short for RPC-SUPPORT).
 *
 * RPC support that needs to be linked into both the RPC program and
 * the dynamically loadable RPC-server user programs.
 * This version is for Unix only, but we keep the conditionals
 * at the front just to minimize differences between the two versions. 
 *
 * If you change this file, please check SYS:EMBEDDING;RPC;GENERIC;RPCSPPRT.C
 *
 * $Log:	rpcspprt.c,v $
 * Revision 2.5.1.2  93/02/01  12:57:03  kaufman
 * Update copyright notices
 * 
 * Revision 2.5.1.1  93/02/01  11:52:56  kaufman
 * Baseline for distributed software
 * 
 * Revision 2.5  93/02/01  11:43:19  kaufman
 * Baseline for Genera 8.3
 * 
 *
 */

#ifndef lint
static char *rcsid = "@(#)$Header: /usr/share/local/symbolics/src/RCS/rpcspprt.c,v 2.5.1.2 93/02/01 12:57:03 kaufman Rel $";
#endif

#include "RPC.h"

/*#define DEBUG_MEMALLOC		/* Enables output for each memory operation */

/* What to do when life gets you down */
#ifndef lose
#define lose Debugger()
#endif

/* Nicer interface for memory allocation.  We cannot just use the ANSI standard names always,
   because sometimes you get a malloc linked in that doesn't have the compatible calling 
   sequence.  So, we invent a whole new set of names that everyone has to define. */

/* We store the size of the block at the beginning of the allocated memory,
   and return an appropriately aligned pointer to the rest of the block. */
#define DECREMENT(ptr) (ptr) = (void *) ((char *) (ptr) - sizeof(long))
#define INCREMENT(ptr) (ptr) = (void *) ((char *) (ptr) + sizeof(long))


OSErr AllocateMemory (size, result)
LongInt size;
void** result;
{
#define MemError abort		/* --- */
  if (NULL == (*result = (void **) malloc((unsigned) size+sizeof(long))))
    return (MemError());
  else {
    *((LongInt *) *result) = size;
#ifdef DEBUG_MEMALLOC
    printf("AllocateMemory: 0x%x at 0x%x\n", *((LongInt *) *result), *result);
#endif
    INCREMENT(*result);
    return (noErr);
  }
}

OSErr FreeMemory (pointer)
void **pointer;
{
  DECREMENT(*pointer);
#ifdef DEBUG_MEMALLOC
  printf("FreeMemory: 0x%x at 0x%x\n", *((LongInt *) *pointer), *pointer);
#endif
  free(*pointer);
  *pointer = NULL;
  return(noErr);
}

LongInt AllocatedSize (pointer)
void *pointer;
{
  DECREMENT(pointer);
  return(*((LongInt *) pointer));
}

#ifdef notdef
OSErr AllocateHandle (size, result)
LongInt size;
Handle* result;
{
  return((Handle *) AllocateMemory(size, result));
}

OSErr FreeHandle (handle)
Handle *handle;
{
  return(FreeMemory((void **) handle));
}
#endif

OSErr CopyMemory (from, to, size)
void *from, *to;
LongInt size;
{
  bcopy((char *)from, (char *)to, size);
  return(noErr);
}


/* Error checking */

int disable_pointer_verification = 0;

void XDRVerifyPointer(pointer, limit)
  LongInt* pointer;
  LongInt* limit;
{
  if ((!disable_pointer_verification && pointer != limit) ||
      (disable_pointer_verification && pointer > limit))
    lose;
}

/* Special case */
OSErr RPCNoValues(agent, TransactionID)
XDRAgent agent;
LongInt TransactionID;
{
  LongInt * the_XDRPointer;
  LongInt * XDRLimit;
  XDRBlock ReplyXDRBlock;
  OSErr system_error_code;
  register LongInt * XDRPointer = the_XDRPointer;

  system_error_code = XDRInitiateReply(agent,
				       TransactionID,
				       (LongInt)0,
				       &ReplyXDRBlock,
				       &the_XDRPointer,
				       &XDRLimit);
  if(system_error_code)return(system_error_code);
  XDRPointer = the_XDRPointer;
  XDRVerifyPointer(XDRPointer, XDRLimit);
  system_error_code = XDRSendReply(agent, ReplyXDRBlock);
  if(system_error_code)return(system_error_code);
}

float DecodeFloat(representation)
  LongInt representation;
{
  return(*(float*)&representation);
}

LongInt EncodeFloat(value)
  double value;			/* even if I declare this float, it still passes double */
{
  float no_really = value;

  return(*(LongInt*)&no_really);
}


/* The bulk-transfer support usually provides this, but bulk-transfer
   goes with emb agents which aren't used in Solstice */

OSErr predefined_remote_entries_server(agent, TransactionID,
                                       entry_number,
                                       block, pointer,
                                       limit) 
XDRAgent agent;
LongInt TransactionID, entry_number;
XDRBlock block;
LongInt * pointer;
LongInt * limit;
{ register FunctionPtr handler;
  switch((int)entry_number) {
#ifdef notdef
    case 1 : handler = begin_bulk_transfer_handler;
    break;
    case 2 : handler = bulk_transfer_handler;
    break;
    case 3 : handler = finish_bulk_transfer_handler;
    break;
    case 4 : handler = abort_bulk_transfer_handler;
    break;
    case 5 : handler = create_rpc_channel_handler;
    break;
#endif
    default : return(RPC_PROC_UNAVAIL);
    };
#ifdef notdef
  /*--- Turn this on if any cases get added above */
  return((*handler)(agent, TransactionID, block, pointer,
                    limit));
#endif
  }


OSErr initialize_predefined_remote_entries_server()
{ int err;
  err = initialize_unix_predefined_remote_entries_server();
  if (err)
    return(err);
  return(RegisterModule((LongInt)0x7f000000, (LongInt)1, predefined_remote_entries_server));
}
