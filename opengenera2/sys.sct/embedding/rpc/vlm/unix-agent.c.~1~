/*-*- Mode: C; Package: C-USER; Search-List: RPC -*- */
/*>
 *> *****************************************************************************************
 *> ** (c) Copyright 1993-1989 Symbolics, Inc.  All rights reserved.
 *> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
 *>
 *>    The software, data, and information contained herein are proprietary 
 *> to, and comprise valuable trade secrets of, Symbolics, Inc., which intends 
 *> to keep such software, data, and information confidential and to preserve 
 *> them as trade secrets.  They are given in confidence by Symbolics pursuant 
 *> to a written license agreement, and may be used, copied, transmitted, and 
 *> stored only in accordance with the terms of such license.
 *> 
 *> Symbolics, Symbolics 3600, Symbolics 3670 (R), Symbolics 3675 (R), Symbolics
 *> 3630, Symbolics 3640, Symbolics 3645 (R), Symbolics 3650 (R), Symbolics 3653,
 *> Symbolics 3620 (R), Symbolics 3610 (R), Symbolics Common Lisp (R),
 *> Symbolics-Lisp (R), Zetalisp (R), Genera (R), Wheels (R), Dynamic Windows (R),
 *> SmartStore (R), Semanticue (R), Frame-Up (R), Firewall (R), Document Examiner (R),
 *> Delivery Document Examiner, "Your Next Step in Computing" (R), Ivory, MacIvory,
 *> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
 *> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal (R),
 *> Symbolics Prolog, Symbolics Fortran (R), CLOE (R), CLOE Application Generator,
 *> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia, Joshua,
 *> Statice (R), and Minima are trademarks of Symbolics, Inc.
 *> 
 *> RESTRICTED RIGHTS LEGEND
 *>    Use, duplication, and disclosure by the Government are subject to restrictions 
 *> as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data and Computer 
 *> Software Clause at DFAR 52.227-7013.
 *> 
 *>      Symbolics, Inc.
 *>      6 Concord Farms
 *>      555 Virginia Road
 *>      Concord, Massachusetts 01742-2727
 *>      United States of America
 *>      508-287-1000
 *>
 *> *****************************************************************************************
 *>
 */

/* This file is SYS:EMBEDDING;RPC;UNIX;UNIX-AGENT.C.
 *
 * RPC support for all agents using Unix file-descriptors.
 *
 * $Log:	unix-agent.c,v $
 * Revision 2.5.1.2  93/02/01  12:57:15  kaufman
 * Update copyright notices
 * 
 * Revision 2.5.1.1  93/02/01  11:53:13  kaufman
 * Baseline for distributed software
 * 
 * Revision 2.5  93/02/01  11:43:57  kaufman
 * Baseline for Genera 8.3
 * 
 *
 */

#ifndef lint
static char *rcsid = "@(#)$Header: /usr/share/local/symbolics/src/RCS/unix-agent.c,v 2.5.1.2 93/02/01 12:57:15 kaufman Rel $";
#endif

#include <sys/ioctl.h>
#include <errno.h>
#include <stdio.h>

#include "unix-agent.h"


OSErr Unix_agent_listen (self, count)
Unix_XDRAgent *self;
LongInt *count;
{
  int cc;

  cc = ioctl(self->fd, FIONREAD, count);
  if (cc < 0) {
    perror("Unix_agent_listen");
    return(errno);
  }
  return(noErr);
}

OSErr Unix_agent_input (self, countp, pointer)
Unix_XDRAgent *self;
LongInt *countp;
char *pointer;
{
  int cc;
  short count = (short)*countp;

  /* Need to loop until we read as much as was requested */
  while (count > 0 && (cc = read(self->fd, pointer, count)) >= 0) {
    count -= cc;
    pointer += cc;
  }
  if (cc < 0) return(errno);
  return(noErr);
}

OSErr Unix_agent_output (self, countp, pointer, force)
Unix_XDRAgent *self;
LongInt *countp;
char *pointer;
{
  int cc;
  short count = (short)*countp;

  /* Need to loop until we write as much as was requested */
  while (count > 0 && (cc = write(self->fd, pointer, count)) >= 0) {
    count -= cc;
    pointer += cc;
  }
  if (cc < 0) return(errno);
  return(noErr);
}

OSErr Unix_agent_close (self)
Unix_XDRAgent *self;
{
  XDRAgent agent = (XDRAgent) self;

  if (agent->ErrorBlock != NULL)
    XDRReleaseBlock(agent, agent->ErrorBlock);

  close(self->fd);
  FreeMemory((void **)&self);
  return(noErr);
}

void Unix_XDRAgent_fill_handlers(agent)
  Unix_XDRAgent *agent;
{
  BS_XDRAgent *BSAgent = (BS_XDRAgent *) agent;

  BSAgent->listen = (void*)Unix_agent_listen;
  BSAgent->input = (void*)Unix_agent_input;
  BSAgent->output = (void*)Unix_agent_output;
  BSAgent->close = (void*)Unix_agent_close;
  /* Make sure this gets filled in appropriately */
  agent->fd = -1;
}

int RPCAgentFileDescriptor ()
{
  
  if (DefaultXDRAgent == NULL)
    return(-1);
  else
    return(((Unix_XDRAgent *)DefaultXDRAgent)->fd);
}
