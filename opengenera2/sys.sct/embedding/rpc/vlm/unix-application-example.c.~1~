/* -*- Mode: C -*- */
/*>
 *>******************************************************************************************
 *>
 *>       Symbolics hereby grants permission to customer to incorporate
 *>       the examples in this file in any work belonging to customer.
 *>
 *>******************************************************************************************
 */


/* This program is useless in itself, it just exists to show how a Unix
   application can use RPC to call on the Ivory to perform a service.
   The example service we use is to retrieve the property list of a symbol.
   No one would really want to do this, but it's simple and avoids obscuring
   the example with unnecessary details.  The name of the symbol, names
   of properties, and values of properties are transmitted back and forth
   as strings.  We're not really supposed to be able to send anything but printing
   Ascii characters through RPC strings, but it's good enough for an example.

   This program goes with unix-plist-server.lisp.  Compile it using
   cc -o plist plist-server.c unix-application-example.c -lsymbolics-rpc
 */


/*** Include Files ***/

#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
#include "RPC.h"

/* Data structure returned from Ivory with a property list in it */
typedef struct {
  LongInt length;
  struct {
    char* indicator;
    char* property;
  } item[STRUCT_POINTER_SIZE];
} Plist;

/*** Required by the RPC library ***/

void BusyWait(allow_rpc)
     int allow_rpc;
{
  int cc = 0, rpc_fd;
  fd_set read;

  /* Set up */
  rpc_fd = RPCAgentFileDescriptor();

  for (; cc == 0;) {

    /* Wait for something interesting to happen
     * We select for input ready on the RPC file descriptor.  In a more
     * complex program, there may be other interesting file descriptors
     * or a timeout here.
     *
     * We ignore EINTR, which means we were interrupted by a signal handler
     * being called, and EWOULDBLOCK, which SunOS has been seen to return
     * inappropriately in this situation.
     */
    FD_ZERO(&read);
    FD_SET(rpc_fd, &read);
    if ((cc = select(rpc_fd+1, &read, NULL, NULL, NULL)) < 0 &&
	errno != EINTR && errno != EWOULDBLOCK) {
      perror("BusyWait select");
      exit(-1);
    }

    /* If there is input pending on the RPC fd, and we're allowed
     * to make recursive calls to the RPC substrate, do so.
     */
    if (cc > 0 && FD_ISSET(rpc_fd, &read) && allow_rpc)
      PollRPC();
  }
}

/*** Top level ***/

main (argc, argv)
     int argc;
     char *argv[];
{
  int i, j, wid;
  char *host, *symbol;
  Plist *plist;

  /* Check arguments */
  if (argc != 3) {
    fprintf(stderr, "usage: %s host symbol\n", argv[0]);
    exit(1);
  }
  host = argv[1];
  symbol = argv[2];

  /* Initialize RPC library */
  InitializeRPC();
  initialize_predefined_remote_entries_server();
  if (tcp_agent_open(host, IPPORT_RPC) != 0) {
    perror("tcp_agent_open");
    exit(1);
  }

  /* Look up the plist */
  if (retrieve_property_list(symbol, &plist)) {
    perror("retrieve");
    exit(1);
  }

  if (plist->length == 0) {
    printf("No properties\n");
  } else {
    for (i = wid = 0; i < plist->length; i++) 
      if ((j = strlen(plist->item[i].indicator)) > wid)
	wid = j;
    wid++;
    for (i = 0; i < plist->length; i++) {
      fputs(plist->item[i].indicator, stdout);
      for (j = strlen(plist->item[i].indicator); j < wid; j++)
	putchar(' ');
      printf("%s\n", plist->item[i].property);
    }
  }

  /* All done */
  CloseRPC();
  exit(0);
}


