;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MACINTOSH-INTERNALS; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Program to make the Macintosh RPC server disgorge its status
;;; The server half of this is linked into the RPC Library
;;; SHOW-MACINTOSH-RPC-SERVER-STATUS is the entry point you should call

(DEFINE-REMOTE-MODULE MACINTOSH-RPC-SERVER-STATUS
		      (:NUMBER #x7F0000FF)
		      (:VERSION 1)
		      (:SERVER :C)
		      (:CLIENT :LISP))

(DEFSTRUCT (MODULE-DEFINITION (:CONC-NAME MDEF-))
  MODULE-NUMBER MODULE-VERSION WHEN-CALLED MODULE-TYPE RESOURCE-FILE)

(DEFINE-REMOTE-TYPE MODULE-DEFINITION ()
  (:ABBREVIATION-FOR
    `(STRUCTURE (:LISP MODULE-DEFINITION)
       (MODULE-NUMBER CARDINAL-32)
       (MODULE-VERSION CARDINAL-32)
       (WHEN-CALLED CARDINAL-32)
       (MODULE-TYPE (MEMBER EMPTY LINKED LOADED LOADED-WITH-STATIC-DATA))
       (RESOURCE-FILE INTEGER-32))))

(DEFINE-REMOTE-ENTRY DISGORGE-MACINTOSH-RPC-SERVER-STATUS MACINTOSH-RPC-SERVER-STATUS
		     (:NUMBER 1)
		     (:ARGUMENTS)
		     (:VALUES 
		       (TRANSACTION-COUNTER CARDINAL-32)
		       (HEAP-SIZE INTEGER-32)
		       (HEAP-FREE INTEGER-32)
		       (NOW CARDINAL-32)
		       (MODULE-TABLE (VECTOR MODULE-DEFINITION)))
  (:C
    (:SERVER
      #{ extern long TransactionCounter;
         long heap_size, heap_free, now;
	 struct { long length;
	 	  struct { unsigned long module_number, module_version, when_called;
			   long module_type, resource_file;
			 } element[500];
		} Table;
	 int i;
	 
	 Table.length = ModuleTableSize;
	 heap_free = FreeMem();
	 heap_size = GetApplLimit() - (Ptr)ApplicZone();
	 now = TickCount();
	 /* Have to copy the data into a different structure because of unions */ 
	 /* Instead I could have written a more imperative define-remote-type */
	 for(i=0; i < ModuleTableSize; i++
	      )
	   { Table.element[i].module_number = ModuleTable[i].module_number;
	     Table.element[i].module_version = ModuleTable[i].module_version;
	     Table.element[i].when_called = ModuleTable[i].when_called;
	     Table.element[i].module_type = ModuleTable[i].type;
	     if ( ModuleTable[i].type == LoadedModule ||
		  ModuleTable[i].type == LoadedModuleWithStaticData )
	       Table.element[i].resource_file = ModuleTable[i].u.loaded.file;
	     else Table.element[i].resource_file = -1;
	   };
	 RPCValues(TransactionCounter, heap_size, heap_free, now, &Table);
       })))

#+IGNORE  ;Don't compile this in the normal course of events
(DEFINE-REMOTE-C-PROGRAM MACINTOSH-RPC-SERVER-STATUS
  (:SERVER (:FILE "RPC-status.c")
	   (:TYPE :LINKED)
	   (:INCLUDE "<Dialogs.h>" "<Memory.h>" "Modules.h")))

(DEFUN SHOW-MACINTOSH-RPC-SERVER-STATUS ()
  (MULTIPLE-VALUE-BIND (TRANSACTION-COUNTER HEAP-SIZE HEAP-FREE NOW MODULE-TABLE)
      (DISGORGE-MACINTOSH-RPC-SERVER-STATUS)
    (FORMAT T "~&RPC Server status:~% outgoing transaction counter = ~:D~%"
	    TRANSACTION-COUNTER)
    (FORMAT T " application heap has ~:D bytes free out of ~:D bytes total~%"
	    HEAP-FREE HEAP-SIZE)
    (FORMAT T " Remote Module table:")
    (LOOP FOR MDEF BEING THE ARRAY-ELEMENTS OF MODULE-TABLE USING (INDEX I)
		    TO (POSITION 'EMPTY MODULE-TABLE
				 :FROM-END T :TEST-NOT #'EQ :KEY #'MDEF-MODULE-TYPE) DO
      (FORMAT T "~%  ~2D: ~:" I (MDEF-MODULE-TYPE MDEF))
      (UNLESS (EQ (MDEF-MODULE-TYPE MDEF) 'EMPTY)
	(LET ((MODULE (GETHASH (MDEF-MODULE-NUMBER MDEF) RPC::*REMOTE-MODULE-TABLE*)))
	  (FORMAT T " module ~@[~S ~]#x~X version ~D "
		  (AND MODULE (RPC::REMOTE-MODULE-NAME MODULE))
		  (MDEF-MODULE-NUMBER MDEF) (MDEF-MODULE-VERSION MDEF)))
	(FORMAT T (IF (ZEROP (MDEF-WHEN-CALLED MDEF)) "(never called)"
		      "last called ~\\time-interval\\ ago")
		(ROUND (- NOW (MDEF-WHEN-CALLED MDEF)) 60))
	(UNLESS (EQ (MDEF-MODULE-TYPE MDEF) 'LINKED)
	  (FORMAT T "~%~6@Tloaded from resource file ~A"
		  (PATHNAME-FROM-FREFNUM (MDEF-RESOURCE-FILE MDEF))))))))

;; Returns the Macintosh string-for-host
(DEFUN PATHNAME-FROM-FREFNUM (FREFNUM)
  (STACK-LET ((FCB (MTB:MAKE-FCBPBREC))
	      (NAME (MTB::MAKE-STR255)))
    (MTB:_PBGetFCBInfo FCB NAME 0 FREFNUM 0)
    (STRING-APPEND (PATHNAME-FROM-DIRID (MTB:FCBPBREC-IOVRefNum FCB 0)
					(MTB:FCBPBREC-IOFCBParID FCB 0))
		   NAME)))

;; Returns the Macintosh string-for-host, with a terminal colon
(DEFUN PATHNAME-FROM-DIRID (VREFNUM DIRID)
  (STACK-LET ((DIRINFO (MTB:MAKE-HFILEINFO))
	      (NAME (MTB::MAKE-STR255)))
    (LET ((DIRS NIL))
      (LOOP UNTIL (< DIRID 2) DO				;2 is the root directory
	(MTB:_PBGetCatInfo DIRINFO NAME VREFNUM -1 DIRID)	;whose name is the volume name
	(PUSH (STRING-APPEND NAME #\:) DIRS)
	(SETQ DIRID (MTB:DIRINFO-ioDrParID DIRINFO 0)))
      (APPLY #'STRING-APPEND DIRS))))
