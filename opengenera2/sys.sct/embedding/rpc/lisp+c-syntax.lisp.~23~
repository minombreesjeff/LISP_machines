;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: RPC -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file defines the #{ ... } syntax for Lisp macros that expand into C code

(DEFVAR *RPC-PACKAGE* *PACKAGE*)

(DEFVAR *LISP+C-READTABLE*
	(LET ((RTB (COPY-READTABLE SI:*COMMON-LISP-READTABLE*)))
	  (SETF (SI:READTABLE-NAME RTB) "Lisp + C")
	  (SETF (SI:READTABLE-APPROPRIATE-FILE-SYNTAX RTB) :LISP+C)
	  (SET-DISPATCH-MACRO-CHARACTER #\# #\{ 'READ-C-TOKEN-LIST RTB)
	  (PUSH RTB SI:*VALID-READTABLES*)
	  RTB))

(DEFVAR *C-READTABLE*)		;defined in file C-READTABLE.LISP

(DEFUN (C-COMMENT SI:STANDARD-READ-FUNCTION) (STREAM SLASH STAR)
  (IF *READ-SUPPRESS*
      (LET ((LAST-CH #\A))
	(MULTIPLE-VALUE-BIND  (CH NUM REAL-CH)
	    (SI:XR-XRTYI STREAM)
	  (IGNORE NUM REAL-CH)
	  (LOOP WHEN (NULL CH)
		  DO (ERROR 'SI:READ-STRING-END-OF-FILE :STREAM STREAM :STRING "")
		     ;; both CH and MATCH are already translated and CH is not null,
		     ;; so CHAR is fine.
		UNTIL (AND (CHAR= LAST-CH #\*) (CHAR= CH #\/))
		DO (SETQ LAST-CH CH)
		   (MULTIPLE-VALUE-SETQ (CH NUM REAL-CH) (SI:XR-XRTYI STREAM))
		FINALLY (RETURN (VALUES NIL)))))
    (LET ((STRING (MAKE-STRING 100))
	  (STRING-LENGTH 100)
	  (STRING-INDEX 2)
	  (LAST-CH #\A))
      (SETF (AREF STRING 0) (AREF SLASH 0))
      (SETF (AREF STRING 1) STAR)
      (MACROLET ((APPEND-CHARACTER (STRING CHAR INDEX LENGTH)
		   `(PROGN
		      (WHEN (CHAR-FAT-P ,CHAR)
			(SETQ ,STRING (SI:ASSURE-FAT-STRING ,STRING)))
		      (SETF (AREF ,STRING ,INDEX) ,CHAR)
		      (INCF ,INDEX)
		      (WHEN (= ,INDEX ,LENGTH)
			(INCF ,LENGTH 40)
			(SETQ ,STRING (SI:ADJUST-ARRAY-SIZE ,STRING ,LENGTH))))))
	(MULTIPLE-VALUE-BIND  (CH NUM REAL-CH)
	    (SI:XR-XRTYI STREAM)
	  (IGNORE NUM)
	  (LOOP WHEN (NULL CH)
		  DO (SI:ADJUST-ARRAY-SIZE STRING STRING-INDEX)
		     (ERROR 'SI:READ-STRING-END-OF-FILE :STREAM STREAM :STRING STRING)
		     ;; both CH and MATCH are already translated and CH is not null,
		     ;; so CHAR is fine.
		DO (APPEND-CHARACTER STRING REAL-CH STRING-INDEX STRING-LENGTH)
		UNTIL (AND (CHAR= LAST-CH #\*) (CHAR= CH #\/))
		DO (SETQ LAST-CH CH)
		   (MULTIPLE-VALUE-SETQ (CH NUM REAL-CH) (SI:XR-XRTYI STREAM))
		FINALLY (SI:ADJUST-ARRAY-SIZE STRING STRING-INDEX)
			(RETURN (VALUES (INTERN STRING) 'SI:SYMBOL))))))))

(DEFUN (SI:SINGLE-WORD-STRING SI:STANDARD-READ-FUNCTION) (STREAM SHOULD-BE-NIL MATCH)
  (IF *READ-SUPPRESS*
      (MULTIPLE-VALUE-BIND  (CH NUM REAL-CH)
	  (SI:XR-XRTYI STREAM)
	(IGNORE NUM REAL-CH)
	(LOOP WHEN (NULL CH)
		DO (ERROR 'SI:READ-STRING-END-OF-FILE :STREAM STREAM :STRING "")
		   ;; both CH and MATCH are already translated and CH is not null,
	           ;; so CHAR is fine.
	      WHILE (CHAR CH MATCH)
	      DO (MULTIPLE-VALUE-SETQ (CH NUM REAL-CH) (SI:XR-XRTYI STREAM))
	      FINALLY (RETURN NIL)))
    (LET ((STRING (MAKE-STRING 100))
	  (STRING-LENGTH 100)
	  (STRING-INDEX 0))
      ;; (:property string :standard-read-function) is style sensitive
      (MACROLET ((APPEND-CHARACTER (STRING CHAR INDEX LENGTH)
		   `(PROGN
		      (WHEN (CHAR-FAT-P ,CHAR)
			(SETQ ,STRING (SI:ASSURE-FAT-STRING ,STRING)))
		      (SETF (AREF ,STRING ,INDEX) ,CHAR)
		      (INCF ,INDEX)
		      (WHEN (= ,INDEX ,LENGTH)
			(INCF ,LENGTH 40)
			(SETQ ,STRING (SI:ADJUST-ARRAY-SIZE ,STRING ,LENGTH))))))
	(IGNORE SHOULD-BE-NIL)			;ignored, no string token
	(APPEND-CHARACTER STRING MATCH STRING-INDEX STRING-LENGTH)	;include delimiter
	(MULTIPLE-VALUE-BIND  (CH NUM REAL-CH)
	    (SI:XR-XRTYI STREAM)
	  (IGNORE NUM)
	  (LOOP WHEN (NULL CH)
		  DO (SI:ADJUST-ARRAY-SIZE STRING STRING-INDEX)
		     (ERROR 'SI:READ-STRING-END-OF-FILE :STREAM STREAM :STRING STRING)
		     ;; both CH and MATCH are already translated and CH is not null,
		     ;; so CHAR is fine.
		DO (APPEND-CHARACTER STRING REAL-CH STRING-INDEX STRING-LENGTH)
		WHILE (CHAR CH MATCH)
		DO (MULTIPLE-VALUE-SETQ (CH NUM REAL-CH) (SI:XR-XRTYI STREAM))
		FINALLY (SI:ADJUST-ARRAY-SIZE STRING STRING-INDEX)
			(RETURN (VALUES (INTERN STRING *RPC-PACKAGE*)
					'SINGLE-WORD-STRING))))))))

;;;; Make a new Lisp syntax ...

(SI:DEFINE-LISP-SYNTAX :Lisp+C
		       :READTABLE       *LISP+C-READTABLE*
		       :PRETTY-NAME     "Lisp+C"
		       :SHORT-NAME      "L+C"
		       :INHERITS-FROM   :COMMON-LISP
		       :DOCUMENTATION   "Common-Lisp syntax plus #{...} construct for C.")


(DEFUN READ-C-TOKEN-LIST (STREAM IGNORE IGNORE)
  (LET ((OLD-PACKAGE *PACKAGE*)
	(OLD-READTABLE *READTABLE*)
	(OLD-BASE *READ-BASE*)
	(*PACKAGE* *RPC-PACKAGE*)
	(*READTABLE* *C-READTABLE*)
	(*READ-BASE* 10)
	(LEVEL 0)				;{ ... } nesting level
	(TOKEN-LISTS NIL)			;backwards list of list-producing expressions
	(CURRENT-LIST NIL))			;list of tokens being built up
    (IF *READ-SUPPRESS*
	(LOOP DOING
	  (MULTIPLE-VALUE-BIND  (CH)		;ignore NUM and REAL-CH
	      (SI:XR-XRTYI STREAM)
	    (WHEN (NULL CH)
	      (ERROR 'SI:READ-STRING-END-OF-FILE :STREAM STREAM :STRING "")
	      ;; both CH and MATCH are already translated and CH is not null,
	      ;; so CHAR is fine.
	      )
	    (COND ((CHAR= CH #\{) (INCF LEVEL))
		  ((CHAR= CH #\}) (WHEN (MINUSP (DECF LEVEL))
				    (RETURN (VALUES NIL))))
		  (T NIL))))
      (LOOP AS TOKEN = (SI:READ-RECURSIVE STREAM) DO
	(COND ((EQ TOKEN '||)
	       ;; Drop in some Lisp code
	       (WHEN CURRENT-LIST
		 (PUSH (LIST 'QUOTE (NREVERSE CURRENT-LIST)) TOKEN-LISTS)
		 (SETQ CURRENT-LIST NIL))
	       (PUSH (LET ((*PACKAGE* OLD-PACKAGE)
			   (*READTABLE* OLD-READTABLE)
			   (*READ-BASE* OLD-BASE))
		       (COND ((CHAR-EQUAL (PEEK-CHAR NIL STREAM) #\)
			      (READ-CHAR STREAM)
			      `(LIST ,(SI:READ-RECURSIVE STREAM)))
			     (T (SI:READ-RECURSIVE STREAM))))
		     TOKEN-LISTS))
	      (T
	       (PUSH TOKEN CURRENT-LIST)
	       (COND ((EQ TOKEN '|{|)
		      (INCF LEVEL))
		     ((EQ TOKEN '|}|)
		      (WHEN (MINUSP (DECF LEVEL))
			(POP CURRENT-LIST)
			(WHEN CURRENT-LIST
			  (PUSH (LIST 'QUOTE (NREVERSE CURRENT-LIST)) TOKEN-LISTS))
			(RETURN (IF (AND TOKEN-LISTS (NULL (CDR TOKEN-LISTS))
					 (LISTP (FIRST TOKEN-LISTS))
					 (EQ (FIRST (FIRST TOKEN-LISTS)) 'QUOTE))
				    (FIRST TOKEN-LISTS)
				  (CONS 'APPEND (NREVERSE TOKEN-LISTS)))))))))))))

(DEFUN WRITE-C-TOKEN-LIST (TOKEN-LIST STREAM)
  (FRESH-LINE STREAM)
  (WRITE-C-TOKEN-LIST-1 TOKEN-LIST STREAM 0))

(DEFUN WRITE-C-TOKEN-LIST-1 (TOKEN-LIST STREAM HPOS)
  (LET* ((INDENTATION 0))
    (FLET ((MAYBE-INDENT (HPOS)
	     (IF (NOT (ZEROP HPOS))
		 HPOS
		 (LOOP REPEAT INDENTATION
		       DO (WRITE-CHAR #\SPACE STREAM))
		 INDENTATION)))
      (LOOP WITH *PRINT-BASE* = 10 WITH *PRINT-RADIX* = NIL
	    WITH INDENTATION-STACK = NIL
	    FOR TOKEN IN TOKEN-LIST
	    AND LAST-TOKEN = NIL THEN TOKEN
	    AND PREV-TOKEN = NIL THEN LAST-TOKEN DO
	(WHEN LAST-TOKEN
	  (COND ((TOKEN-NEWLINE-BETWEEN PREV-TOKEN LAST-TOKEN TOKEN HPOS)
		 (WRITE-CHAR #\NEWLINE STREAM)
		 (SETQ HPOS 0))
		((TOKEN-SPACE-BETWEEN PREV-TOKEN LAST-TOKEN TOKEN HPOS)
		 (WRITE-CHAR #\SPACE STREAM)
		 (INCF HPOS))))
	(ETYPECASE TOKEN
	  (INTEGER
	    (SETQ HPOS (MAYBE-INDENT HPOS))
	    (PRIN1 TOKEN STREAM)
	    (INCF HPOS (CEILING (LOG (1+ (ABS TOKEN)) 10))))
	  (SYMBOL
	    (UNLESS (CHAR= (AREF (SYMBOL-NAME TOKEN) 0) #\#)
	      (SETQ HPOS (MAYBE-INDENT HPOS)))
	    (WRITE-STRING (STRING TOKEN) STREAM)
	    (INCF HPOS (STRING-LENGTH TOKEN)))
	  (STRING
	    (SETQ HPOS (MAYBE-INDENT HPOS))
	    (WRITE-CHAR #\" STREAM) (WRITE-STRING TOKEN STREAM) (WRITE-CHAR #\" STREAM)
	    (INCF HPOS (+ (STRING-LENGTH TOKEN) 2)))
	  (CHARACTER
	    (SETQ HPOS (MAYBE-INDENT HPOS))
	    (WRITE-CHAR TOKEN STREAM)
	    (INCF HPOS)
	    (WHEN (EQL TOKEN #\RETURN)
	      (SETQ TOKEN NIL)
	      (SETQ HPOS 0))))
	(CASE TOKEN
	  ((|{|)     (INCF INDENTATION 2))
	  ((|}|)     (DECF INDENTATION 2))
	  ((|(| |[|) (PUSH INDENTATION INDENTATION-STACK)
	   (SETQ INDENTATION HPOS))
	  ((|)| |]|) (SETQ INDENTATION (OR (POP INDENTATION-STACK) 0))))))))

(FORMAT:DEFFORMAT FORMAT:C-TOKEN-LIST (:ONE-ARG) (TOKEN-LIST IGNORE)
  (WRITE-C-TOKEN-LIST-1 TOKEN-LIST FORMAT:*FORMAT-OUTPUT*
			(SEND FORMAT:*FORMAT-OUTPUT* :READ-CURSORPOS :CHARACTER)))

(DEFUN TOKEN-COMMENT-P (TOKEN)
  (AND (SYMBOLP TOKEN)
       (> (STRING-LENGTH TOKEN) 3)
       (STRING-EQUAL TOKEN "/*" :END1 2)
       (STRING-EQUAL TOKEN "*/" :START1 (- (STRING-LENGTH TOKEN) 2))))

(DEFUN TOKEN-OPERAND-P (TOKEN)
  (OR (AND (SYMBOLP TOKEN)
	   (PLUSP (STRING-LENGTH TOKEN))
	   (ALPHANUMERICP (CHAR (STRING TOKEN) 0)))
      (NUMBERP TOKEN)
      (STRINGP TOKEN)))

;;--- If I really cared about readability of the C code produced
;;--- these next two functions would need a bit more refinement
;;--- Mostly putting in spaces in more situations

(DEFUN TOKEN-NEWLINE-BETWEEN (PREV-TOKEN LAST-TOKEN TOKEN HPOS)
  (IGNORE PREV-TOKEN)
  (OR (AND (EQ LAST-TOKEN '|;|)
	   (OR (NOT (TOKEN-COMMENT-P TOKEN))
	       (> (STRING-LENGTH TOKEN) 25)))
      (TOKEN-COMMENT-P LAST-TOKEN)
      (AND (EQ TOKEN '|{|)
	   (OR (EQ LAST-TOKEN '|)|)
	       (EQ LAST-TOKEN '|struct|)))
      (AND (EQ LAST-TOKEN '|}|) (NEQ TOKEN '|;|))
      (AND (SYMBOLP TOKEN) (> (STRING-LENGTH TOKEN) 2)
	   (EQL (AREF (STRING TOKEN) 0) #\#))
      (AND (EQ LAST-TOKEN '|,|) (> HPOS 50))
      (AND (MEMBER LAST-TOKEN '(|+| |&&| |\|\||))
	   (> HPOS 65))))

(DEFUN TOKEN-SPACE-BETWEEN (PREV-TOKEN LAST-TOKEN TOKEN HPOS)
  (IGNORE HPOS)
  (OR (NOT (OR ;; Don't space after open paren/bracket, certain operators
	       (MEMBER LAST-TOKEN '( |(| |[| |.| |->| |++| |--|))
	       ;; Don't space before close paren/bracket, comma, semicolon, certain operators
	       (MEMBER TOKEN '( |)| |]| |.| |->| |,| |;| |++| |--|))
	       ;; Don't space between a function/array and its arguments/subscript
	       (AND (MEMBER TOKEN '( |(| |[| ))
		    (OR (MEMBER LAST-TOKEN '( |)| |]| ))
			(TOKEN-OPERAND-P LAST-TOKEN)))
	       ;; Don't space after a unary & or * (but do space after a binary one)
	       (AND (MEMBER LAST-TOKEN '( |&| |*| ))
		    (MEMBER PREV-TOKEN '( |(| |[| |)| |]| |=| |;| |,| )))
	       ;; Don't space after a close paren that's probably a cast
	       (AND (EQ LAST-TOKEN '|)|)
		    (OR (TOKEN-OPERAND-P TOKEN)
			(MEMBER TOKEN '( |(| |*| |&|))))))
      ;; Always space after an open brace and before a close brace
      (MEMBER LAST-TOKEN '(|{|))
      (MEMBER TOKEN '(|}|))))
