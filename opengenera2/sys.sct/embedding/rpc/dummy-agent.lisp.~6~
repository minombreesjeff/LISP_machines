;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: RPC; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Dummy transport agent used for debugging, talks between a Lisp program and a C program
;;; running into two processes on the same machine.  This is structured to be a model
;;; of what a real transport agent has to do.

(DEFFLAVOR DUMMY-TRANSPORT-AGENT () (STD-LITTLE-ENDER-ARRAY-TRANSPORT-AGENT))

(DEFRESOURCE DUMMY-TRANSPORT-BLOCKS (SIZE)
  :CONSTRUCTOR (MAKE-ARRAY SIZE :ELEMENT-TYPE 'FIXNUM))

(DEFVAR *DUMMY-CALL-QUEUE* NIL)
(DEFVAR *DUMMY-REPLY-QUEUE* NIL)

(DEFMETHOD (:CLOSE DUMMY-TRANSPORT-AGENT) (&OPTIONAL ABORT-P)
  (IGNORE ABORT-P)
  (SETQ *DUMMY-CALL-QUEUE* NIL *DUMMY-REPLY-QUEUE* NIL)
  NIL)

(DEFMETHOD (HIGH-LATENCY-P DUMMY-TRANSPORT-AGENT) () NIL)

(DEFMETHOD (REMOTE-SYSTEM-TYPE DUMMY-TRANSPORT-AGENT) () :UNKNOWN)

;;; Methods that deal with whole blocks
;;; We put them in a resource as a way of debugging whether the client
;;; code correctly releases blocks at the right times

(DEFMETHOD (ALLOCATE-XDR-BLOCK DUMMY-TRANSPORT-AGENT) (SIZE)
  (ALLOCATE-RESOURCE 'DUMMY-TRANSPORT-BLOCKS (1+ SIZE)))	;allow exclusive upper bound

;;; Don't use the stack, because we pass blocks by reference instead of by copying
(DEFMETHOD (STACK-ALLOCATE-XDR-BLOCK DUMMY-TRANSPORT-AGENT) (SIZE)
  (ALLOCATE-XDR-BLOCK SELF SIZE))

(DEFMETHOD (RELEASE-XDR-BLOCK DUMMY-TRANSPORT-AGENT) (BLOCK)
  (DEALLOCATE-RESOURCE 'DUMMY-TRANSPORT-BLOCKS BLOCK))

(DEFMETHOD (SEND-CALL-STARTING-FUTURE DUMMY-TRANSPORT-AGENT) (BLOCK &OPTIONAL DONT-RELEASE)
  (DECLARE (VALUES FUTURE))
  (LET ((BLOCK (IF DONT-RELEASE (COPY-XDR-BLOCK SELF BLOCK) BLOCK)))
    (PROG1 (AREF BLOCK 0)
	   (WITHOUT-INTERRUPTS
	     (SETQ *DUMMY-CALL-QUEUE* (NCONC *DUMMY-CALL-QUEUE* (NCONS BLOCK)))))))

(DEFMETHOD (WAIT-FOR-FUTURE DUMMY-TRANSPORT-AGENT) (FUTURE &OPTIONAL WHOSTATE)
  (LET ((TRANSACTION-ID FUTURE))
    (LET ((BLOCK NIL))
      (LOOP
	(PROCESS-WAIT (OR WHOSTATE "Remote Call")
	  (LAMBDA ()
	    (FIND TRANSACTION-ID *DUMMY-REPLY-QUEUE*
		  :KEY (LAMBDA (BLOCK) (AREF BLOCK 0)))))
	(WITHOUT-INTERRUPTS
	  (WHEN (SETQ BLOCK (FIND TRANSACTION-ID *DUMMY-REPLY-QUEUE*
				  :KEY (LAMBDA (BLOCK) (AREF BLOCK 0))))
	    (SETQ *DUMMY-REPLY-QUEUE* (DELETE BLOCK *DUMMY-REPLY-QUEUE*))
	    (RETURN BLOCK)))))))

(DEFMETHOD (ABORT-FUTURE DUMMY-TRANSPORT-AGENT)
	   (FUTURE)
  (DECLARE (IGNORE FUTURE)))

(DEFMETHOD (SEND-CALL-AND-WAIT DUMMY-TRANSPORT-AGENT)
	   (BLOCK &OPTIONAL WHOSTATE DONT-RELEASE)
  (LET ((BLOCK (IF DONT-RELEASE (COPY-XDR-BLOCK SELF BLOCK) BLOCK))
	(TRANSACTION-ID (AREF BLOCK 0)))
    (WITHOUT-INTERRUPTS
      (SETQ *DUMMY-CALL-QUEUE* (NCONC *DUMMY-CALL-QUEUE* (NCONS BLOCK))))
    (LOOP
      (PROCESS-WAIT (OR WHOSTATE "Remote Call")
	(LAMBDA ()
	  (FIND TRANSACTION-ID *DUMMY-REPLY-QUEUE*
		:KEY (LAMBDA (BLOCK) (AREF BLOCK 0)))))
      (WITHOUT-INTERRUPTS
	(WHEN (SETQ BLOCK (FIND TRANSACTION-ID *DUMMY-REPLY-QUEUE*
				:KEY (LAMBDA (BLOCK) (AREF BLOCK 0))))
	  (SETQ *DUMMY-REPLY-QUEUE* (DELETE BLOCK *DUMMY-REPLY-QUEUE*))
	  (RETURN BLOCK))))))

(DEFMETHOD (SEND-ASYNCHRONOUS-CALL DUMMY-TRANSPORT-AGENT) (BLOCK &OPTIONAL DONT-RELEASE)
  (WITHOUT-INTERRUPTS
    (SETQ *DUMMY-CALL-QUEUE*
	  (NCONC *DUMMY-CALL-QUEUE*
		 (NCONS (IF DONT-RELEASE (COPY-XDR-BLOCK SELF BLOCK) BLOCK)))))
  NIL)

(DEFMETHOD (WAIT-FOR-CALL DUMMY-TRANSPORT-AGENT) (&OPTIONAL CREDENTIAL VERIFIER)
  (DECLARE (VALUES XDR-BLOCK XDR-POINTER XDR-LIMIT
		   MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER TRANSACTION-ID))
  (LOOP AS BLOCK = (WITHOUT-INTERRUPTS (POP *DUMMY-CALL-QUEUE*))
	WHILE (NULL BLOCK)
	DO (PROCESS-WAIT "Await Remote Call" (LAMBDA () *DUMMY-CALL-QUEUE*))
	FINALLY
	  ;; Decode the header of the call block
	  (LET* ((XDR-AGENT SELF)
		 (XDR-POINTER (XDR-BLOCK-DATA-POINTER SELF BLOCK))
		 (XDR-LIMIT (%POINTER-PLUS XDR-POINTER (XDR-BLOCK-DATA-SIZE SELF BLOCK))))
	    (INITIALIZE-XDR-POINTER)
	    (MULTIPLE-VALUE-BIND (TRANSACTION-ID MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
				  CREDENTIAL VERIFIER)
		(RECEIVE-RPC-CALL-HEADER CREDENTIAL VERIFIER)
	      (RETURN (VALUES BLOCK (READ-XDR-POINTER) XDR-LIMIT
			      MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER TRANSACTION-ID
			      CREDENTIAL VERIFIER))))))

(DEFMETHOD (XDR-SEND-REPLY DUMMY-TRANSPORT-AGENT) (BLOCK &OPTIONAL DONT-RELEASE)
  (LET ((BLOCK (IF DONT-RELEASE (COPY-XDR-BLOCK SELF BLOCK) BLOCK)))
    (WITHOUT-INTERRUPTS
      (PUSH BLOCK *DUMMY-REPLY-QUEUE*))))

(DEFMETHOD (XDR-SEND-ERROR DUMMY-TRANSPORT-AGENT) (BLOCK &OPTIONAL DONT-RELEASE)
  (LET ((BLOCK (IF DONT-RELEASE (COPY-XDR-BLOCK SELF BLOCK) BLOCK)))
    (WITHOUT-INTERRUPTS
      (PUSH BLOCK *DUMMY-REPLY-QUEUE*))))

(COMPILE-FLAVOR-METHODS DUMMY-TRANSPORT-AGENT)

(DEFUN OPEN-DUMMY-AGENT ()
  (SETQ *DEFAULT-TRANSPORT-AGENT* (MAKE-INSTANCE 'DUMMY-TRANSPORT-AGENT)))
