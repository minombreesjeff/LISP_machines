;;; -*- Mode: LISP; Syntax: Lisp+C; Package: USER; Base: 10 -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; This program is useless in itself, it just exists to show how a Unix
;;; application can use RPC to call on the Ivory to perform a service.
;;; The example service we use is to retrieve the property list of a symbol.
;;; No one would really want to do this, but it's simple and avoids obscuring
;;; the example with unnecessary details.  The name of the symbol, names
;;; of properties, and values of properties are transmitted back and forth
;;; as strings.  We're not really supposed to be able to send anything but printing
;;; Ascii characters through RPC strings, but it's good enough for an example.

(RPC:DEFINE-REMOTE-MODULE PLIST-SERVER (:NUMBER #x7F008002) (:VERSION 1)
			  (:CLIENT :C) (:SERVER :LISP))

(RPC:DEFINE-REMOTE-ENTRY RETRIEVE-PROPERTY-LIST PLIST-SERVER (:NUMBER 1)
			 (:ARGUMENTS (SYMBOL RPC:C-STRING))
			 (:VALUES (PLIST (VECTOR (STRUCTURE
						   (INDICATOR RPC:C-STRING)
						   (PROPERTY RPC:C-STRING)))))
  (:LISP
    (:SERVER
      (WITH-STANDARD-IO-ENVIRONMENT
	(LET* ((*PACKAGE* (FIND-PACKAGE "COMMON-LISP-USER"))
	       (*PRINT-ARRAY* NIL)
	       (*PRINT-STRUCTURE-CONTENTS* NIL)
	       (*PRINT-READABLY* NIL)
	       (PLIST (SYMBOL-PLIST (READ-FROM-STRING SYMBOL)))
	       (RESULT (MAKE-ARRAY (/ (LENGTH PLIST) 2))))
	  (LOOP FOR (INDICATOR PROPERTY) ON PLIST BY 'CDDR
		FOR INDEX FROM 0 DO
	    (SETF (AREF RESULT INDEX) (VECTOR (PRIN1-TO-STRING INDICATOR)
					      (PRIN1-TO-STRING PROPERTY))))
	  (RPC:RPC-VALUES RESULT))))))

(RPC:DEFINE-REMOTE-C-PROGRAM PLIST-SERVER
  (:CLIENT (:FILE "unix-plist-server.c")
	   (:INCLUDE "RPC.h")))

 