/* -*- Mode: C; Package: C-USER; Search-list: RPC -*- */


/* Client stubs portion of PLIST-SERVER remote module version 1
   Generated from S:>sys>embedding>rpc>examples>unix-plist-server.lisp.4
   by Tina on Monday the twelfth of October, 1992; 2:41:15 pm */

#include "RPC.h"

typedef struct
{ long length;
  struct
  { char * indicator;
    char * property;
    }
  element[STRUCT_POINTER_SIZE];
  }
* structure_vector;
extern OSErr retrieve_property_list PROTO_ARGS((char * symbol,
                                                structure_vector * plist));
OSErr retrieve_property_list(symbol, ret_plist) 
char * symbol;
structure_vector * ret_plist;
{ long idx_tem_1, length_tem_1, length_tem_2, length_tem_3,
  length_tem_4;
  XDRAgent XDR_Agent;
  XDRBlock XDR_Block;
  long * TheXDRPointer;
  register long * XDRPointer;
  long * XDRLimit;
  OSErr system_error_code;
  
  system_error_code = RPCInitiateCall((long)0x7F008002,
                                      (long)1, (long)1,
                                      (long)((long)(strlen(symbol) +
                                                    7) >> 2),
                                      &XDR_Agent, &XDR_Block,
                                      &TheXDRPointer,
                                      &XDRLimit);
  if(system_error_code)return(system_error_code);
  XDRPointer = TheXDRPointer;
  length_tem_1 = strlen(symbol);
  *(XDRPointer++) = length_tem_1;
  CopyMemory((void *)symbol, (void *)XDRPointer, (long)length_tem_1);
  XDRPointer += (length_tem_1 + 3) >> 2;
  XDRVerifyPointer(XDRPointer, XDRLimit);
  system_error_code = RPCSendCallAndWait(XDR_Agent,
                                         &XDR_Block);
  if(system_error_code)return(system_error_code);
  system_error_code = XDRInitiateReceive(XDR_Agent,
                                         XDR_Block,
                                         &TheXDRPointer,
                                         &XDRLimit);
  if(system_error_code)return(system_error_code);
  XDRPointer = TheXDRPointer;
  length_tem_2 = *(XDRPointer++);
  system_error_code = AllocateMemory((long)(length_tem_2 * sizeof((*ret_plist)->element[idx_tem_1])*4),
                                     (void * *)&(*ret_plist));
  if(system_error_code)return(system_error_code);
  (*ret_plist)->length = length_tem_2;
  for(idx_tem_1 = 0;
      idx_tem_1 < length_tem_2;
      idx_tem_1++)
  { length_tem_3 = *(XDRPointer++);
    system_error_code = AllocateMemory(length_tem_3 + 1,
                                       (void * *)&(*ret_plist)->element[idx_tem_1].indicator);
    if(system_error_code)return(system_error_code);
    CopyMemory((void *)XDRPointer, (void *)(*ret_plist)->element[idx_tem_1].indicator,
               (long)length_tem_3);
    XDRPointer += (length_tem_3 + 3) >> 2;
    ((*ret_plist)->element[idx_tem_1].indicator)[length_tem_3] = 0;
    length_tem_4 = *(XDRPointer++);
    system_error_code = AllocateMemory(length_tem_4 + 1,
                                       (void * *)&(*ret_plist)->element[idx_tem_1].property);
    if(system_error_code)return(system_error_code);
    CopyMemory((void *)XDRPointer, (void *)(*ret_plist)->element[idx_tem_1].property,
               (long)length_tem_4);
    XDRPointer += (length_tem_4 + 3) >> 2;
    ((*ret_plist)->element[idx_tem_1].property)[length_tem_4] = 0;
    };
  XDRVerifyPointer(XDRPointer, XDRLimit);
  XDRReleaseBlock(XDR_Agent, XDR_Block);
  return(noErr);
  }


