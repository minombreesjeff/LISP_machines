;;; -*- Mode: LISP; Syntax: Lisp+c; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;========================================
;;; Macrology and definitions
;;;========================================

(defmacro D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")define-callback-handler-list0 (var-name handler-names)
  (let ((stuff (mapcar #'ncons (cons '#:placeholder-for-zeroth-position handler-names))))
    `(progn
       (defvar ,var-name ',stuff)
       (eval-when (compile)
	 (setq ,var-name ',stuff)))))

;; All the callback handlers must appear in this list,
;; which is how their remote-entry numbers are assigned.
(define-callback-handler-list 1*callback-handlers*
0			      (control-indicator-action
			       control-nonindicator-action
			       window-definition
			       bogus-for-testing
			       quickdraw-textProc
			       quickdraw-lineProc
			       quickdraw-rectProc
			       quickdraw-rRectProc
			       quickdraw-ovalProc
			       quickdraw-arcProc
			       quickdraw-polyProc
			       quickdraw-rgnProc
			       quickdraw-bitsProc
			       quickdraw-commentProc
			       quickdraw-txMeasProc ;;-> Integer
			       quickdraw-getPicProc
			       quickdraw-putPicProc

			       control-definition

			       menu-definition

			       ;;scrap handling - unique to handle
			       text-edit-word-break-proc
			       text-edit-click-Proc
			       ;; TERecal
			       ;; TEDoText

			       modal-dialog-filter
			       dialog-sound-proc
			       dialog-user-item-definition

			       standard-file-dialog-hook
			       standard-file-file-filter
			       ))

(define-callback-handler-list 1*canned-callback-handlers*
0			      (draw-dialog-line
			       ))

;; C client, Lisp serving
(define-remote-module 1callback-handlers
0  (:version 1)
  (:number #x7F0002ED)
  (:server :lisp)
  (:client :c))

;; Lisp client, C serving
(define-remote-module 1callback-handler-locators
0  (:version 1)
  (:number #x7F0002EC)
  (:server :c)
  (:client :lisp))

;;---It would be nice to support something like c-sh-A for callbacks defined by this.
;; To do that, however, would require either a new Zmacs command or defining a Lisp
;; function useful only for its arglist.
;; Perhaps c-arg-types and c-val-types could be as useful there as they are for
;; generating a doc skeleton
(defmacro 1define-mac-callback0 (lisp-name &body clauses)
  (parse-macro-options define-mac-callback clauses () (arguments values)
    (let* ((handler-number (or (position lisp-name *callback-handlers* :key #'first)
			       (error "The handler name ~s was not defined with ~s"
				      lisp-name 'define-callback-handler-list)))
	   (c-handler-name (lisp-name-to-c-name lisp-name))
	   (c-arg-types 
	     (domap 'list ((arg arguments))
	       (destructuring-bind (name c-type) arg
		 (destructuring-bind (sym) (eval c-type)
		   (list name sym)))))
	   (arg-structure
	     (and arguments
		  (let ((fields
			  (reverse
			    ;; The "reverse" is because Mac Pascal pushes args left-to-right
			    ;; onto a stack which grows toward lower addresses.
			    (domap 'list ((arg c-arg-types))
			      (destructuring-bind (name c-type) arg
				(list name
				      (intern (string-upcase c-type)
					      macintosh-internals::*hparse-package*)))))))
		    `(arg-structure ,@fields))))
	   (rpc-arglist
	     (and arg-structure `((_args_ ,arg-structure))))
	   (c-val-types
	     (domap 'list ((val values))
	       (destructuring-bind (name c-type) val
		 (destructuring-bind (sym) (eval c-type)
		   (list name sym)))))
	   (rpc-value-list
	     (domap 'list ((val c-val-types))
	       (destructuring-bind (name c-type) val
		 (list name
		       (intern (string-upcase c-type)
			       macintosh-internals::*hparse-package*)))))
	   (arg-size
	     (if (null arg-structure)
		 0
		 (loop for (nil arg-type) in (rest arg-structure)
		       sum (packed-size-for-c-type arg-type))))
	   (value-size
	     (loop for (nil val-type) in rpc-value-list
		   sum (packed-size-for-c-type val-type)))
	   )
      `(progn
	 (define-remote-entry ,lisp-name callback-handlers
	   (:number ,handler-number)
	   (:arguments
	     (closure-id integer-32)
	     (application-id integer-32)
	     ,@rpc-arglist)
	   (:values ,@rpc-value-list)
	   (:lisp
	     (:server
	       (multiple-value-bind (_handler_ dw:*program*)
		   (find-callback-handler closure-id application-id)
		 ,(let ((form
			  (if arguments
			      ;; See "reverse" above
			      `(apply-to-vector-reverse _handler_ _args_)
			      `(funcall _handler_))))
		    (if values
			`(rpc-values ,form)
			`(progn
			   ,form
			   (rpc-values))))))))
	 (eval-when (compile load eval)
	   ;; This has to be done at compile time so the callback-locator remote
	   ;; entry gets compiled correctly.
	   (note-callback-handler-defined ',lisp-name
					  ',c-handler-name
					  ',arg-size
					  ',value-size
					  '(,c-arg-types ,c-val-types)
					  ))))))

(defun 1note-callback-handler-defined0 (name c-handler-name arg-size value-size c-arg-and-value-types)
  (let ((there (assoc name *callback-handlers*)))
    (if there
	(setf (rest there) (list c-handler-name arg-size value-size c-arg-and-value-types))
	(error "~s is not defined in callback handler list" name))))

(defmacro 1define-mac-canned-callback0 (name &body lisp+c-form)
  (destructuring-bind (lisp+c-form) lisp+c-form
    `(eval-when (compile load eval)
       ;; This has to be done at compile time so the callback-locator remote
       ;; entry gets compiled correctly.
       (note-mac-canned-callback ',name ',(lisp-name-to-c-name name) ,lisp+c-form))))

(defun 1note-mac-canned-callback0 (name c-name c-definition)
  (let ((there
	  (with-restart ()
	    (or (assoc name *canned-callback-handlers*)
		(cerror "Look again (presumably after loading definition)"
			"~s is not defined in canned callback handler list*"
			name)
		(restart)))))
    (setf (rest there) (list c-name c-definition)))
  name)

(defun 1all-mac-canned-callback-definitions0 ()
  (loop for (nil nil definition) in *canned-callback-handlers*
	when definition append definition and append '(#\Return)))

;;---Bum this some, please, perhaps with some %push stuff
(defun 1apply-to-vector-reverse0 (function vector)
  (sys:with-data-stack
    (let ((arglist (make-array (length vector) :type 'sys:art-q-list)))
      (replace arglist vector)
      (nreverse arglist)
      (apply function (g-l-p arglist)))))

(eval-when (eval compile load)
(defun 1packed-size-for-c-type0 (original-type)
  (let ((type (if (eql original-type 'boolean)
		  'macintosh-internals::boolean-kludge
		  original-type)))
    (with-restart ()
      (case type
	((integer-32 cardinal-32 boolean32) 4)
	((integer-16 cardinal-16 boolean16) 2)
	((integer-8 cardinal-8 boolean8) 1)
	((nil) (break "Null"))
	(otherwise
	  (let ((new-type
		  (rpc::REMOTE-TYPE-ABBREVIATION-FOR TYPE original-type)))
	    (cond ((equal new-type type)
		   (break "got back the same"))
		  (T
		   (setq type new-type)
		   (restart)))))))))
);eval-when

#||
;; Here's a tool to get started with the documentation.
(defun 1format-callback-table0 ()
  (let ((lisp-character-style '(nil :bold nil))
	(arg-character-style '(nil :italic nil))
	(decl-character-style '(:fix nil nil))
	(arglist-indent (make-string 6 :initial-element #\space)))
    (flet ((show-types (kind arg-and-type-list)
	     (cond ((null arg-and-type-list)
		    (format T "  ~a: ~'inone~~%" kind arglist-indent))
		   (T
		    (format T "  ~a:~%" kind)
		    (dolist (arg-and-type arg-and-type-list)
		      (destructuring-bind (arg type) arg-and-type
			(format T "~a~v~(~a~)~   ~v~a~~%"
				arglist-indent
				arg-character-style arg
				decl-character-style type)))))))
      (fresh-line)
      (tv:dolist-noting-progress (specs (sort (copy-list *callback-handlers*) #'alphalessp)
					"Formatting callbacks")
	(when (> (length specs) 1)		;skip placeholder
	  (destructuring-bind (lisp-name c-handler-name arg-size value-size
					 (c-arg-types c-value-types))
	      specs
	    (ignore c-handler-name arg-size value-size)
	    (unless (eql lisp-name 'bogus-for-testing)
	      (format T "~v~(~s~)~			~v~a~~%"
		      lisp-character-style lisp-name
		      arg-character-style "Callback")
	      (show-types "Arguments" c-arg-types)
	      (show-types "Values" c-value-types)
	      (terpri) (terpri))))))))
||#

;;;========================================
;;; Constructing the callback interface
;;;========================================

(defvar 1*mac-callback-template*
0	(let ((hex 
		       '#x(
			   ;;#xa9ff		;_Debugger

			     #x4E56 #xFFFC	;link a6,#-4
			     #x2F0C		;move.l a4,-(sp)
			     #x287C 4444 4444	;movea.l #1a4value0,a4

			     ;; C args, right to left
			     #x486E #xFFFC	;pea -4(a6)	;location for return value
			     #x486E 0008	;pea 8(a6)	;addr of last (pascal)arg
			     #x4879 5555 5555	;pea 1appl_id0	;application unique-id
			     #x4879 1111 1111	;pea 1code0	;closure code (not address..)
			     #x4EB9 2222 2222	;jsr @#xxxx	;call the routine
			     #x4FEF 0010	;lea 16(a7),a7	;C caller must remove args

			     ;; Fail to check D0 for RPC errors -- what could we do anyway?
			     #x202E #xFFFC	;move.l -4(a6),d0	;return value
			    ;#x302E #xFFFX	;move.w -4(a6),d0
			     #x285F		;move.l (sp)+,a4
			     #x4E5E		;unlk a6
			     #x205F		;movea.l (a7)+,a0	;return addr
			     #x4FEF 3333	;lea 1argsize0(a7),a7	;remove args
			     #x2E80		;move.l d0,(a7)		;return value
			    ;#x3E80		;move.w d0,(a7)		;return value
			    ;#x1E80		;move.b d0,(a7)
			    ;#x2000		;move.l d0,d0		;noop return value
			     #x4ED0		;jmp (a0)		;return
		     )))
	  (let ((template (make-array (* 2 (length hex))
				      :element-type '(unsigned-byte 8))))
	    (loop for word in hex
		  for i from 0 by 2
		  do (setf (byte-swapped-8-aref-16 template i) word))
	    template)))

(defun 1make-mac-callback-template0 (closure-id application-id mac-address
				   argsize value-size a4-value)
  (let ((template (copy-seq *mac-callback-template*)))
    (flet ((wpos (word)
	     (loop for i below (length template) by 2
		   for w = (byte-swapped-8-aref-16 template i)
		   when (eql w word) return i)))
      (ecase value-size
	(4 )
	(2 (setf (byte-swapped-8-aref-16 template (wpos #x202e))
		 ;; move.w -4(a6),d0
		 #x302e)
	   (setf (byte-swapped-8-aref-16 template (wpos #x2e80))
		 ;; move.w d0,(a7)
		 #x3E80))
	(1 (setf (byte-swapped-8-aref-16 template (wpos #x202e))
		 ;; move.b -4(a6),d0
		 #x102e)
	   (setf (byte-swapped-8-aref-16 template (wpos #x2e80))
		 ;; move.b d0,(a7)
		 #x1E80))
	(0 (setf (byte-swapped-8-aref-16 template (wpos #x2e80))
		 ;; move.l d0,d0
		 #x2000)))
      (setf (byte-swapped-8-aref-32 template (wpos #x1111)) closure-id)
      (setf (byte-swapped-8-aref-32 template (wpos #x2222)) mac-address)
      (setf (byte-swapped-8-aref-16 template (wpos #x3333)) argsize)
      (setf (byte-swapped-8-aref-32 template (wpos #x4444)) a4-value)
      (setf (byte-swapped-8-aref-32 template (wpos #x5555)) application-id)
      template)))

(defun 1get-mac-callback0 (callback-type closure-id application-id)
  (let ((callback-number (position callback-type *callback-handlers* :key #'first)))
    (destructuring-bind (ignore ignore arg-size value-size &rest ignore)
	(nth callback-number *callback-handlers*)
      (multiple-value-bind (routine a4-value) (callback-locator callback-number)
	(assert (and ( routine 0) (evenp routine)))
	(let* ((template (make-mac-callback-template closure-id application-id routine
						     arg-size value-size
						     a4-value))
	       (len (length template))
	       (ptr (_newptr len)))
	  (_write-opaque-bytes-into-pointer ptr len template)
	  ;;(break "Just wrote callback to #x~x" ptr)
	  ptr)))))

;;;========================================
;;; Client interface
;;;========================================


(defvar 1*mac-callback-id-count*0 0)
(defvar 1*mac-callback-correspondences*0 (make-hash-table))
(defvar 1*mac-callback-reverse-correspondences*0 (make-hash-table))

(defun 1find-callback-handler0 (closure-id application-id)
  (declare (values callback-handler remote-program))
  (values (or (gethash closure-id *mac-callback-correspondences*)
	      (named-lambda ignore-and-return-zero (&rest ignore) 0))
	  (macintosh-internals::find-program-from-application-id application-id)))

(defun 1get-canned-callback0 (callback-type)
  (let ((number (with-restart ()
		  (or (position callback-type *canned-callback-handlers* :key #'first)
		      (cerror "Look again (presumably after loading definition)"
			      "Cannot find ~s in *canned-callback-handlers*"
			      callback-type)
		      (restart)))))
    (let ((addr (callback-locator (- number))))
      addr)))

;; Premature termination of the Mac side or the Lisp side could leave
;; callbacks lying around.  It's too dangerous to attempt to clean up
;; the Mac side, however, because _DisposPtr has essentially no error
;; checking, so leave the turds there; but at least clean up the Lisp
;; side.
(defun 1remove-stale-mac-callbacks0 ()
  (maphash
    (named-lambda maphash (mac-callback closure-and-application-ids)
      (destructuring-bind (closure-id application-id) closure-and-application-ids
	(unless (macintosh-internals::find-program-from-application-id application-id)
	  (remhash mac-callback *mac-callback-reverse-correspondences*)
	  (remhash closure-id *mac-callback-correspondences*))))
    *mac-callback-reverse-correspondences*))

(defun 1make-mac-callback0 (callback-type function program)
  (remove-stale-mac-callbacks)
  (let ((application-id
	  (macintosh-internals::rpc-program-application-id (or program dw:*program*))))
    (let ((closure-id (incf *mac-callback-id-count*)))
      (let ((mac-routine (get-mac-callback callback-type closure-id application-id)))
	(setf (gethash closure-id *mac-callback-correspondences*) function)
	(setf (gethash mac-routine *mac-callback-reverse-correspondences*)
	      (list closure-id application-id))
	mac-routine))))

(defun 1remove-mac-callback0 (mac-callback)
  (let ((closure-and-application-ids
	  (gethash mac-callback *mac-callback-reverse-correspondences*)))
    (when closure-and-application-ids
      (destructuring-bind (closure-id application-id) closure-and-application-ids
	(ignore application-id)
	(_disposptr mac-callback)
	(remhash mac-callback *mac-callback-reverse-correspondences*)
	(remhash closure-id *mac-callback-correspondences*)))))

(defmacro 1with-mac-callback-function0 ((var callback-type function &key program) &body body)
  `(let ((,var ()))
     (unwind-protect-try
       (progn (setq ,var (make-mac-callback ',callback-type ,function ,program))
	      ,@body)
       (when ,var (remove-mac-callback ,var)))))

(defmacro 1with-mac-callback0 ((var callback-type &key program)
			     handler-arglist-and-body
			     &body body)
  (destructuring-bind (arglist &body handler) handler-arglist-and-body
    `(with-mac-callback-function (,var ,callback-type
				  (named-lambda mac-callback-handler ,arglist
				    (declare (sys:downward-function))
				    ,@handler)
				  :program ,program)
       ,@body)))

;;;========================================
;;; Defining the actual callbacks
;;;========================================

(define-mac-callback 1control-indicator-action
0  (:arguments )
  (:values ))

(define-mac-callback 1control-nonindicator-action
0  (:arguments
    (theControl #{ControlHandle} )
    (partcode #{short}))
  (:values ))

(define-mac-callback 1bogus-for-testing
0  (:arguments
    (one #{Boolean8})
    (two #{long})
    (three #{WindowPtr}))
  (:values
    (result #{Boolean16})))

(define-mac-callback 1window-definition
0  (:arguments
    (varcode #{short})
    (theWindow #{WindowPtr})
    (message #{short})
    (param #{long}))
  (:values
    (result #{long})))

(define-mac-callback 1quickdraw-textProc
0  (:arguments
    (bytecount #{short})
    (textbuf #{Ptr})
    (numer #{Ptr})				;Point
    (denom #{Ptr}))				;Point
  (:values ))

(define-mac-callback 1quickdraw-lineProc
0  (:arguments
    (newpt #{Ptr}))				;Point
  (:values ))

(define-mac-callback 1quickdraw-rectProc
0  (:arguments
    (verb #{GrafVerb})
    (r #{Ptr}))					;Rect
  (:values ))

(define-mac-callback 1quickdraw-rRectProc
0  (:arguments
    (verb #{GrafVerb})
    (r #{Ptr})					;Rect
    (ovalwidth #{short})
    (ovalheight #{short}))
  (:values ))

(define-mac-callback 1quickdraw-ovalProc
0  (:arguments
    (verb #{GrafVerb})
    (r #{Ptr}))					;Rect
  (:values ))

(define-mac-callback 1quickdraw-arcProc
0  (:arguments
    (verb #{GrafVerb})
    (r #{Ptr})					;Rect
    (startangle #{short})
    (arcangle #{short}))
  (:values ))

(define-mac-callback 1quickdraw-polyProc
0  (:arguments
    (verb #{GrafVerb})
    (poly #{PolyHandle}))
  (:values ))

(define-mac-callback 1quickdraw-rgnProc
0  (:arguments
    (verb #{GrafVerb})
    (rgn #{RgnHandle}))
  (:values ))

(define-mac-callback 1quickdraw-bitsProc
0  (:arguments
    (srcbits #{Ptr})				;BitMap
    (srcrect #{Ptr})				;Rect var parameter?
    (dstrect #{Ptr})				;Rect ditto?
    (mode #{short})
    (maskrgn #{RgnHandle}))
  (:values ))

(define-mac-callback 1quickdraw-commentProc
0  (:arguments
    (kind #{short})
    (datasize #{short})
    (datahandle #{Handle}))
  (:values ))

(define-mac-callback 1quickdraw-txMeasProc
0  (:arguments
    (bytecount #{short})
    (textaddr #{Ptr})
    (numer #{Ptr})				;Point var param?
    (denom #{Ptr})				;Point ditto?
    (info #{Ptr}))				;FontInfo ditto?
  (:values (width #{short})))

(define-mac-callback 1quickdraw-getPicProc
0  (:arguments
    (dataptr #{Ptr})
    (bytecount #{short}))
  (:values ))

(define-mac-callback 1quickdraw-putPicProc
0  (:arguments
    (dataptr #{Ptr})
    (bytecount #{short}))
  (:values ))

(define-mac-callback 1control-definition
0  (:arguments
    (varcode #{short})
    (thecontrol #{ControlHandle})
    (message #{short})
    (param #{long}))
  (:values
    (result #{long})))

(define-mac-callback 1menu-definition
0  (:arguments
    (message #{short})
    (themenu #{MenuHandle})
    (menurect #{Ptr})				;Rect
    (hitpt #{Ptr})				;Point
    (whichItem #{Ptr}))			;var parameter short*
  (:values ))

;;scrap handling - unique to handle
(define-mac-callback 1text-edit-word-break-proc
0  (:arguments
    (text #{Ptr})
    (charpos #{short}))
  (:values
    (result #{Boolean8})))

(define-mac-callback 1text-edit-click-Proc
0  (:arguments )
  (:values
    (result #{Boolean8})))
;; TERecal and TEDoText have weird register-based arg passing

;;---Some day when we program these, this should take a
;;mask of event types to actually pass back to Lisp,
;;returning NIL for the others
(define-mac-callback 1modal-dialog-filter
0  (:arguments
    (thedialog #{DialogPtr})
    (theevent #{Ptr})				;EventRecord
    (itemHit #{Ptr}))				;var parameter short*
  (:values
    (result #{Boolean8})))

(define-mac-callback 1dialog-sound-proc
0  (:arguments
    (soundno #{short}))
  (:values ))

(define-mac-callback 1dialog-user-item-definition
0  (:arguments
    (thewindow #{WindowPtr})
    (itemno #{short}))
  (:values ))

(define-mac-callback 1standard-file-dialog-hook
0  (:arguments
    (item #{short})
    (thedialog #{DialogPtr}))
  (:values
    (result #{short})))
    
(define-mac-callback 1standard-file-file-filter
0  (:arguments
    (paramblock #{Ptr}))			;ParmBlkPtr
  (:values
    (result #{Boolean8})))

(define-mac-canned-callback 1draw-dialog-line
0  #{ pascal void draw_dialog_line (DialogPtr, short);
     pascal void draw_dialog_line (DialogPtr dialog_window, short item_number)
     { Rect r;
       short item_type;
       Handle item_handle;
       Pattern pat;
       register long *ppat;
       PenState ps;
       GetPenState(&ps);
       ppat = (long*)&pat;
       *ppat++ = 0xAA55AA55;
       *ppat = 0xAA55AA55;
       GetDItem(dialog_window, item_number, &item_type,
		&item_handle, &r);
       PenSize(2, 2);
       PenMode(patCopy);
       PenPat(pat);
       MoveTo(r.left, r.top);
       LineTo(r.right, r.bottom);
       SetPenState(&ps);
       }
     })

;;;========================================
;;; Collecting the above definitions
;;;========================================

(define-remote-entry 1callback-locator0 callback-handler-locators
  (:number 1)
  (:arguments
    (callback-type cardinal-16))
  (:values
    (callback-handler ProcPtr)
    (a4-value integer-32))
  (:c
    (:server
      (let ((case-body
	      (loop for (name handler-name) in *callback-handlers*
		    for number from 0
		    when handler-name
		      append #{case number : result = & handler-name; break; }
		    ))
	    (aux-case-body
	      (reduce #'append
		      (nreverse
			(loop for (name handler-name) in *canned-callback-handlers*
			      for number downfrom 0
			      when handler-name
				collect #{case number : result = & handler-name; break; }
				  )))))
	#{ void *result;
	   long a4value;
	   asm {move.l a4,a4value}
	   DefaultXDRAgent = the_XDRAgent;
	   switch (callback_type) {
	     aux-case-body
	     case-body 
	     default: result= NULL;
	     }
	   RPCValues((long)result, a4value);
	   }
	   ))))

#+ignore	;Don't compile this form in the normal course of events.
(define-remote-c-program callback-handlers
  (:client-extern
    (:file "callback-handlers"))
  (:client
    (:file "callback-handlers")))

#+ignore	;Don't compile this form in the normal course of events.
(define-remote-c-program callback-handler-locators
  (:server
    (:type :auto-load-with-static-data)
    (:prefix
      #{       XDRAgent DefaultXDRAgent;
      	       (all-mac-canned-callback-definitions)
        })
    (:include "callback-handlers.h")
    (:file "callback-handler-locators")))
