 ;;; -*- Mode: LISP; Syntax: LISP+C; Package: MACINTOSH-INTERNALS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; RPC toolkit interface

;;;; Some runtime support.

(defun make-included-octet-structure-1 (size array index)
  (make-array size
	      :element-type (array-element-type array)
	      :displaced-to array
	      :displaced-index-offset index))

(defun set-included-octet-structure-1 (size array index value)
  (stack-let ((to-array (make-array size
				    :element-type (array-element-type array)
				    :displaced-to array
				    :displaced-index-offset index)))
    (copy-array-contents value to-array))
  value)

(defsetf make-included-octet-structure-1 set-included-octet-structure-1)

(defun fixed-point-16 (word)
  (* (ldb (byte 16 0) word) (scale-float 1.0 -16)))

(defun fixed-point-2+30 (word)
  (* word (scale-float 1.0 -30)))

(defun un-fixed-point-2+30 (float)
  (round (ash float 30)))

;;;; Some type extensions

(eval-when (eval load compile)

(define-remote-type resource-type ()
  (:abbreviation-for '(rpc::char-vector 4))
  (:size 1)
  (:c (:declare (name)
       #{ ResType name })
      (:send (value)
       #{ send_byte_vector((char *)&value, 4);
       })
      (:receive (into ignore)
       #{ receive_byte_vector((char *)&into, 4);
       })))

(define-remote-type handle-data ()
  (:abbreviation-for 'rpc::byte-vector)
  (:c (:declare (name) #{ Handle name })
      (:size (value) #{ (long)(((GetHandleSize(value ) + 3) >> 2) + 1)})
      (:send (value)
       (let ((length (declare-c-variable 'length #{long})))
	 #{ length = GetHandleSize(value );
	    send_word(length );
	    HLock(value );
	    send_byte_vector(*value , length );
	    HUnlock(value );
	  }))
      (:receive (into stack-p)
       (let ((length (declare-c-variable 'length #{long})))
	 (ignore stack-p)
	 #{ length = receive_word();
	    system_error_code = AllocateHandle(length, &into);
	    if ( system_error_code ) return ( system_error_code );
	    HLock(into );
	    receive_byte_vector(*into , length );
	    HUnlock(into );
	  }))))

(defun (handle-data rpc::callout-initialize) (name)
  #{ name = false;
   }) 

(defun (handle-data rpc::callout-cleanup) (name)
  #{ if ( name ) FreeHandle(&name );
   })

)

;;; This module should probably be of the loadable type, if it ever get enough stuff
;;; in it to be of any size.  Things shouldn't be accessed in it as regularly as the
;;; main console and window drivers.

(define-remote-module rpc-toolkit
  (:number #x7f000127)
  (:version 1)
  (:server :c)
  (:client :lisp))

;;; Use this for defining things that want to go in the rpc-toolkit-server.c file
;;; because they have enough code to warrant editing on the host.  Otherwise, a small
;;; bit of code can be inlined in a define-remote-entry form.
(rpc::define-standard-rpc-output-definer define-rpc-toolkit-entry rpc-toolkit)

;;;; The requests

(define-remote-entry rpc-toolkit-get-resource rpc-toolkit
  (:number 5)
  (:arguments (type resource-type) (id integer-16))
  (:values (data handle-data))
  (:c (:server
	#{ Handle data;
	   data = GetResource(type, id);
	   RPCValues(data);
         })))

(define-remote-entry rpc-toolkit-get-named-resource rpc-toolkit
  (:number 6)
  (:arguments (type resource-type) (name pascal-string))
  (:values (data handle-data))
  (:c (:server
	#{ Handle data;
	   data = GetNamedResource(type, name);
	   RPCValues(data);
         })))

(define-rpc-toolkit-entry rpc-toolkit-get-scrap 10
  ()
  ((result handle-data)))

(define-remote-entry rpc-toolkit-set-scrap rpc-toolkit
  (:number 11)
  (:arguments (length integer-32) (string opaque-bytes))
  (:asynchronous t)
  (:c (:server
	#{ ZeroScrap();
           PutScrap(length, 'TEXT', string);
	 })))

(define-rpc-toolkit-entry rpc-toolkit-set-standard-cursor 12
  ((cursor-id integer-16))
  ())

(define-remote-entry rpc-toolkit-get-font-name rpc-toolkit
  (:number 13)
  (:arguments (number integer-16))
  (:values (name pascal-string))
  (:c (:server
	#{ Str255 name;
	   GetFontName(number, &name);
	   RPCValues(name);
         })))

(define-remote-entry rpc-toolkit-get-font-number rpc-toolkit
  (:number 14)
  (:arguments (name pascal-string))
  (:values (number integer-16))
  (:c (:server
	#{ int number;
	   GetFNum(name, &number);
	   RPCValues(number);
         })))


#+ignore	;Don't compile this form in the normal course of events.
(define-remote-c-program rpc-toolkit
  (:server (:file "toolkit-dispatch")))
