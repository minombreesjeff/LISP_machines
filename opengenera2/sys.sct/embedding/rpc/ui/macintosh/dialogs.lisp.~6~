;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
#||
;; Externals

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")make-dialog-item-maker

0;; specifying the dialog
1set-dialog-face0 
1add-several-dialog-items0 
1in-dialog-cluster
0 1add-dialog-button0 
 1add-dialog-text
0 1add-dialog-check
0 1add-dialog-radio
0 1add-dialog-pict
0 1add-dialog-line

0;; do it
1do-modal-dialog
0||#

(defflavor 1dialog-item-maker
0	((bounds) (title) (proc-id) (go-away) dialog-id
	 items
	 (cluster-id)
	 (canned-callbacks))
	()
  (:constructor 1make-dialog-item-maker0))

(defmethod 1(make-instance dialog-item-maker :after)0 (&rest ignore)
  (setq dialog-id (new-unique-id)
	bounds '(40 40 440 340)
	title ""
	proc-id (mtb:cconstant plainDBox))
  (setq items (make-array 100 :fill-pointer 0))
  )

(defmethod 1(dialog-item-maker-find-canned-callback dialog-item-maker)0 (callback-type)
  ;; save this here so we don't go asking the Mac for it each time
  (or (second (assoc callback-type canned-callbacks))
      (let ((addr (get-canned-callback callback-type)))
	(push (list callback-type addr) canned-callbacks)
	addr)))

(defflavor 1dialog-entry
0	(display-box
	 (cluster)
	 (active T)
	 (presentation)
	 (query-id)
	 (check nil)
	 item-number
	 )
	()
  :initable-instance-variables
  (:readable-instance-variables display-box query-id cluster)
  (:writable-instance-variables item-number)
  )

(defun 1make-dialog-entry0 (type &rest options &key rect &allow-other-keys)
  (si:with-rem-keywords (o options '(:rect))
    (stack-let ((o (list* :display-box (coerce-to-box rect)
			  o)))
      (apply #'make-instance type o))))
	   
(defflavor 1static-text-dialog-item
0	((text ""))
	(dialog-entry)
  :initable-instance-variables
  )
(defflavor 1edit-text-dialog-item
0	((text "")
	 (required)
	 (oversee-cluster))
	(dialog-entry)
  :initable-instance-variables
  )
(defflavor 1button-dialog-item
0	((text ""))
	(dialog-entry)
  :initable-instance-variables
  )
(defflavor 1check-dialog-item
0	((text "")
	 (oversee-cluster)
	 (report))
	(dialog-entry)
  :initable-instance-variables
  )
(defflavor 1radio-dialog-item
0	((text "")
	 (oversee-cluster)
	 (report))
	(dialog-entry)
  :initable-instance-variables
  )
(defflavor 1pict-dialog-item
0	((resid 0))
	(dialog-entry)
  :initable-instance-variables
  )
(defflavor 1icon-dialog-item
0	((resid 0))
	(dialog-entry)
  :initable-instance-variables
  )
(defflavor 1line-dialog-item
0	()
	(dialog-entry)
  :initable-instance-variables
  )
;; UserItems: CDEF resid; Lisp code callback
;; Scroll (ListMgr) items

(defun 1coerce-to-rect0 (thing)
  (flet ((make (left top right bottom)
	   (make-rect :left left :top top :right right :bottom bottom)))
    (etypecase thing
      (vector thing)
      (list (apply #'make thing))
      (dw::box (multiple-value-call #'make (dw::box-edges thing)))
      )))

(defun 1coerce-to-box0 (thing)
  (etypecase thing
    (null nil)
    (list (apply #'dw:make-box thing))
    (dw::box thing)
    (vector
      (dw:make-box (rect-left thing 0)
		   (rect-top thing 0)
		   (rect-right thing 0)
		   (rect-bottom thing 0)))))

(defmethod 1(in-dialog-cluster-1 dialog-item-maker)0 (the-cluster-id continuation)
  (letf ((cluster-id the-cluster-id))
    (funcall continuation)))

(defgeneric 1dialog-item-mac-data0 (dialog-entry dialog-item-maker)
  (declare (values %dialog-item-type dialog-item-data dialog-item-proc)))

(defmethod 1(dialog-item-mac-data static-text-dialog-item)0 (dialog-item-maker)
  (ignore dialog-item-maker)
  (values (2 0 (NIL 0) (NIL NIL :VERY-SMALL) "EINY7")macintosh-internals::0%dialog-item-static-text text))
(defmethod 1(dialog-item-mac-data edit-text-dialog-item)0 (dialog-item-maker)
  (ignore dialog-item-maker)
  (values 2macintosh-internals::0%dialog-item-edit-text text))
(defmethod 1(dialog-item-mac-data button-dialog-item)0 (dialog-item-maker)
  (ignore dialog-item-maker)
  (values (+ 2macintosh-internals::0%dialog-item-control 2macintosh-internals::0%dialog-item-button) text))
(defmethod 1(dialog-item-mac-data check-dialog-item)0 (dialog-item-maker)
  (ignore dialog-item-maker)
  (values (+ 2macintosh-internals::0%dialog-item-control 2macintosh-internals::0%dialog-item-check) text))
(defmethod 1(dialog-item-mac-data radio-dialog-item)0 (dialog-item-maker)
  (ignore dialog-item-maker)
  (values (+ 2macintosh-internals::0%dialog-item-control 2macintosh-internals::0%dialog-item-radio) text))
(defmethod 1(dialog-item-mac-data pict-dialog-item)0 (dialog-item-maker)
  (ignore dialog-item-maker)
  (values 2macintosh-internals::0%dialog-item-picture resid))
(defmethod 1(dialog-item-mac-data line-dialog-item)0 (dialog-item-maker)
  (values 0 ()
	  (dialog-item-maker-find-canned-callback dialog-item-maker 'draw-dialog-line)))

;; These are the ones you are allowed to use

(defmacro 1in-dialog-cluster0 ((dialog-item-maker cluster-id) &body body)
  `(in-dialog-cluster-1 ,dialog-item-maker ,cluster-id
			(named-lambda in-dialog-cluster () ,@body)))

(defmethod 1(add-dialog-button dialog-item-maker)0 (rect title &rest options &key cluster active check query-id)
  (ignore active check query-id)
  (vector-push-extend (apply #'make-dialog-entry 'button-dialog-item
			     :text title
			     :rect rect
			     :cluster (or cluster cluster-id)
			     options)
		      items))

(defmethod 1(add-dialog-text dialog-item-maker)0 (rect text)
  (vector-push-extend (make-dialog-entry 'static-text-dialog-item :rect rect :text text)
		      items))

(defmethod 1(add-dialog-edit dialog-item-maker)0 (rect &rest options &key text query-id required oversee-cluster)
  (ignore text query-id required oversee-cluster)
  (vector-push-extend (apply #'make-dialog-entry 'edit-text-dialog-item
			     :rect rect
			     options)
		      items))

(defmethod 1(add-dialog-check dialog-item-maker)0 (rect title &rest options &key active report cluster oversee-cluster state query-id)
  (ignore active report oversee-cluster state query-id)
  (vector-push-extend (apply #'make-dialog-entry 'check-dialog-item
			     :rect rect
			     :text title
			     :cluster (or cluster cluster-id)
			     options)
		      items))

(defmethod 1(add-dialog-radio dialog-item-maker)0 (rect title &rest options &key active report cluster oversee-cluster state query-id)
  (ignore active report oversee-cluster state query-id)
  (vector-push-extend (apply #'make-dialog-entry 'radio-dialog-item
			     :rect rect
			     :text title
			     :cluster (or cluster cluster-id)
			     options)
		      items))

(defmethod 1(add-dialog-pict dialog-item-maker)0 (rect resource-id &rest options &key active check cluster query-id)
  (ignore active check query-id)
  (vector-push-extend (apply #'make-dialog-entry 'pict-dialog-item
			     :rect rect
			     :resid resource-id
			     :cluster (or cluster cluster-id)
			     options)
		      items))

(defmethod 1(add-dialog-line dialog-item-maker)0 (rect)
  (vector-push-extend (make-dialog-entry 'line-dialog-item
					:rect rect)
		      items))

(defmethod 1(add-several-dialog-items dialog-item-maker)0 (spec-list)
  (flet ((add-several-in-cluster (ignore-self cluster-name &rest items)
	   (ignore ignore-self)
	   (in-dialog-cluster (self cluster-name)
	     (add-several-dialog-items self items))))
    (dolist (spec spec-list)
      (apply
	(ecase (first spec)
	  (:button #'add-dialog-button)
	  (:text #'add-dialog-text)
	  (:edit #'add-dialog-edit)
	  (:check #'add-dialog-check)
	  (:radio #'add-dialog-radio)
	  (:pict #'add-dialog-pict)
	  (:line #'add-dialog-line)
	  (:cluster #'add-several-in-cluster)
	  )
	self (rest spec)))))

(defmethod 1(set-dialog-face dialog-item-maker)0 (&key ((:bounds new-bounds) () bounds-p)
						     ((:title new-title) () title-p)
						     ((:proc-id new-proc-id) () proc-id-p)
						     ((:go-away new-go-away) () go-away-p))
  (when bounds-p (setq bounds new-bounds))
  (when title-p (setq title new-title))
  (when proc-id-p (setq proc-id new-proc-id))
  (when go-away-p (setq go-away new-go-away))
  ())

(defmethod 1(get-mac-dialog-item-list dialog-item-maker)0 ()
  (let ((dialog-items (make-array 200 :element-type '(unsigned-byte 8) :fill-pointer 0))
	(item-index
	  (octet-structure-field-index (2macintosh-internals::0dialog-items-items dialog-items 0))))
    (domap () ((item items))
      (multiple-value-bind (item-type data proc)
	  (dialog-item-mac-data item self)
	(let* ((length (etypecase data
			 (string (string-length data))
			 (number 2)
			 (null 0)))
	       (data-index (octet-structure-field-index
			     (2macintosh-internals::0dialog-item-data dialog-items item-index)))
	       (next-index (+ data-index (* 2 (ceiling length 2))))
	       )
	  (when (> next-index (array-total-size dialog-items))
	    (setq dialog-items (sys:adjust-array-size dialog-items (+ next-index 100))))
	  (setf (fill-pointer dialog-items) next-index)
	  (setf (2macintosh-internals::0dialog-item-type dialog-items item-index) item-type)
	  (let ((item-rect (octet-structure-field-index
			     (2macintosh-internals::0dialog-item-display-rect dialog-items item-index))))
	    (replace dialog-items (coerce-to-rect (dialog-entry-display-box item))
		     :start1 item-rect))
	  (when proc
	    (setf (2macintosh-internals::0dialog-item-handle dialog-items item-index) proc))
	  (setf (2macintosh-internals::0dialog-item-length dialog-items item-index) length)
	  (etypecase data
	    (string
	      (copy-array-portion (string-to-ascii data) 0 length
				  dialog-items data-index (+ data-index length)))
	    (number
	      (setf (byte-swapped-8-aref-16 dialog-items data-index) data))
	    (null ))
	  (setq item-index next-index)
	  )))
    (setf (fill-pointer dialog-items) item-index)
    (setf (2macintosh-internals::0dialog-items-total-length dialog-items 0) item-index
	  (2macintosh-internals::0dialog-items-nitems dialog-items 0) (1- (length items)))
    (loop for i from 1
	  for item being array-elements of items
	  do
      (setf (dialog-entry-item-number item) i))
      (values dialog-items
	      (let ((query-ids (make-array (1+ (length items)))))
		(setf (aref query-ids 0) '#:standin-for-item-zero)
		(loop for i from 1
		      for item being array-elements of items
		      do
		  (setf (aref query-ids i) (dialog-entry-query-id item)))
		query-ids))))

(defun 1decode-dialog-values0 (dialog-values decoder)
  (let ((result ()))
    (flet ((frob (number value)
	     (let ((query-id (aref decoder number)))
	       (when query-id
		 (setq result (list* value query-id result))))))
      (let ((index (octet-structure-field-index
		     (dialog-values-values dialog-values 0))))
	(dotimes (ignore (dialog-values-nvalues dialog-values 0))
	  (let ((number (dialog-value-item-number dialog-values index))
		(type (dialog-value-type dialog-values index)))
	    ;; (format T "~&At index ~d, number ~d, type ~s" index number type)
	    (ecase type
	      (boolean
		(let ((on-p (dialog-value-on-p dialog-values index)))
		  (setq index (+ (octet-structure-field-index
				   (dialog-value-on-p dialog-values index))
				 2))
		  ;; (format T "  value ~s, next index ~s" on-p index)
		  (frob number on-p)))
	      (string
		(let ((string-index
			(octet-structure-field-index
			  (dialog-value-string dialog-values index))))
		  (let ((string-length (aref dialog-values string-index)))
		    (let ((string (make-string string-length)))
		      (dotimes (j string-length)
			(setf (aref string j)
			      (code-char (aref dialog-values (+ j string-index 1)))))
		      (setq index (+ string-index string-length 1))
		      (when (oddp index) (incf index))
		      ;; (format T "  value ~s, next index ~s" string index)
		      (frob number string))))))))))
    (nreverse result)))

(defmacro 1do-dialog-items0 (((number type rect handle data) dialog-items) &body body)
  `(do-dialog-items-1 (named-lambda do-dialog-items (,number ,type ,rect ,handle ,data)
			,@body)
		      ,dialog-items))

(defun 1do-dialog-items-10 (continuation dialog-items)
  (declare (sys:downward-funarg continuation))
  (let ((index (octet-structure-field-index
		 (2macintosh-internals::0dialog-items-items dialog-items 0))))
    (with-rect (display-rect)
      (dotimes (j (2macintosh-internals::0dialog-items-nitems dialog-items 0))
	(let ((type
		(decode-dialog-item-numeric-type
		  (2macintosh-internals::0dialog-item-type dialog-items index)))
	      (handle (2macintosh-internals::0dialog-item-handle dialog-items index))
	      (data-index
		(octet-structure-field-index
		  (2macintosh-internals::0dialog-item-data dialog-items index)))
	      (data-length
		(2macintosh-internals::0dialog-item-length dialog-items index)))
	  (replace display-rect dialog-items
		   :start2 (octet-structure-field-index
			     (2macintosh-internals::0dialog-item-display-rect dialog-items index)))
	  (stack-let ((data (make-array data-length
					:element-type (array-element-type dialog-items)
					:displaced-to dialog-items
					:displaced-index-offset data-index)))
	    (funcall continuation (1+ j) type display-rect handle data))
	  (setq index (+ data-index data-length))
	  (when (oddp index) (incf index)))))))

(defun 1decode-dialog-item-numeric-type0 (type)
  (select type
    (2macintosh-internals::0%dialog-item-static-text :text)
    (2macintosh-internals::0%dialog-item-edit-text :edit)
    (((+ 2macintosh-internals::0%dialog-item-control 2macintosh-internals::0%dialog-item-button)) :button)
    (((+ 2macintosh-internals::0%dialog-item-control 2macintosh-internals::0%dialog-item-check)) :check)
    (((+ 2macintosh-internals::0%dialog-item-control 2macintosh-internals::0%dialog-item-radio)) :radio)
    (2macintosh-internals::0%dialog-item-picture :pict)
    (0 :user)
    (otherwise :unknown)))

(defmethod 1(dialog-item-maker-open-dialog dialog-item-maker)0 (program)
  (let ((bounds (coerce-to-rect bounds)))
    (multiple-value-bind (items value-decoder)
	(mtb::get-mac-dialog-item-list self)
      (macintosh-internals::rpc-program-call
	program #'macintosh-internals::rpc-uims-open-dialog
	dialog-id bounds title proc-id go-away items)
      (let ((rpc-window (dw::remote-program-open-viewer
			  program :picture-p nil
			  :id dialog-id
			  :left (rect-left bounds 0) :top (rect-top bounds 0)
			  :right (rect-right bounds 0) :bottom (rect-bottom bounds 0)
			  :title title
			  :displayer #'ignore)))
	(macintosh-internals::connect-to-existing-window rpc-window)
	(values rpc-window value-decoder)))))

macintosh-internals::
(defmethod 1(connect-to-existing-window mac-rpc-window)0 ()
  (push self (mac-rpc-program-windows program))
  (setq state :active))

(defun 1do-modal-dialog0 (program dialog-items)
  (multiple-value-bind (rpc-window value-decoder)
      (dialog-item-maker-open-dialog dialog-items program)
    ;; Could get window-id as dialog-id within dialog-items
    (let ((dialog-window (macintosh-internals::mac-rpc-window-mac-window rpc-window))
	  (item-rect (make-rect)))
      (_showwindow dialog-window)
      (labels ((do-ditem-hit (item)
		 (multiple-value-bind (item-type item-handle)
		     (_getditem dialog-window item item-rect)
		   (selector item-type =
		     (((+ (cconstant ctrlitem) (cconstant chkctrl)))
		      (let* ((old (_getctlvalue item-handle))
			     (new (if (zerop old) 1 0)))
			(_setctlvalue item-handle new)))
		     (((+ (cconstant ctrlitem) (cconstant radctrl)))
		      (select-radio-button item item-handle))
		     )))
	       (select-radio-button (item item-handle)
		 (dialog-items-select-radio-button dialog-items item item-handle dialog-window)))
	(let ((termination-condition
		(with-mac-callback-function (cb modal-dialog-filter #'modal-dialog-filter
						:program program)
		  (loop
		    (let ((itemhit (_modaldialog cb)))
		      (cconstant-case itemhit
			(ok (return 'ok))
			(cancel (return 'cancel))
			(otherwise
			  (when (> itemhit 1000)
			    (return itemhit))
			  (when (> itemhit 2)
			    (do-ditem-hit itemhit)))))))))
	  (let ((dialog-id (macintosh-internals::mac-rpc-window-id rpc-window)))
	    (let ((dialog-values
		    (2macintosh-internals::0rpc-program-call program #'remote-dialog-values dialog-id)))
	      (2macintosh-internals::0rpc-program-call program #'2macintosh-internals::0rpc-uims-close-window
					     dialog-id)
	      (2macintosh-internals::0rpc-uims-note-window-close-internal rpc-window)
	      (ignore termination-condition)
	      (decode-dialog-values dialog-values value-decoder))))))))

(defun 1modal-dialog-filter0 (dialog-window-ptr event-ptr itemhit-ptr)
  (let ((result
	  (flet ((set-item-hit (new)
		   (write-remote-number :word new :ptr itemhit-ptr)))
	    (with-mac-struct (event eventrecord :ptr event-ptr)
	      (cconstant-case (eventrecord-what event 0)
		(keydown
		  (select (ldb (byte 8 8) (logand (eventrecord-message event 0)
						  (cconstant keycodemask)))
		    ((#x24 ;; Return
		      #x4C ;; Enter
		      #x77);; End
		     (with-rect (rect)
		       (multiple-value-bind (itemtype itemhandle)
			   (_getditem dialog-window-ptr (cconstant ok) rect)
			 (ignore itemtype)
			 (_hilitecontrol itemhandle 1)
			 (set-item-hit (cconstant ok))
			 T)))
		    ((#x72) ;; Help
		     (set-item-hit
		       (+ 1001 (octet-ref-remote-ptr (dialogrecord-editfield dialog-window-ptr 0))))
		     T)
		    ((#x73) ;; Home, labelled "Complete"
		     (set-item-hit
		       (+ 2001
			  (octet-ref-remote-ptr (dialogrecord-editfield dialog-window-ptr 0))))
		     T)
		    (otherwise nil)))
		(nullevent nil)
		(otherwise
		  nil))))))
    result))

(defmethod 1(dialog-items-select-radio-button dialog-item-maker)
0	   (item-number item-handle dialog-ptr)
  (let ((old-value (_getctlvalue item-handle)))
    (if (zerop old-value)
	(let ((item (aref items (1- item-number))))
	  (assert (typep item 'radio-dialog-item))
	  (assert (eql (dialog-entry-item-number item) item-number))
	  (let ((cluster (dialog-entry-cluster item)))
	    (when cluster
	      (with-rect (r)
		(domap () ((victim-item items))
		  (when (eql (dialog-entry-cluster victim-item) cluster)
		    (let ((victim-item-number (dialog-entry-item-number victim-item)))
		      (unless (eql victim-item-number item-number)
			(multiple-value-bind (ignore victim-item-handle)
			    (_getditem dialog-ptr victim-item-number r)
			  (_setctlvalue victim-item-handle 0)))))))))
	  ;; Do this last to provide feedback to user that it is complete
	  (_setctlvalue item-handle 1))
	(_setctlvalue item-handle 0))))


(compile-flavor-methods dialog-item-maker
			dialog-entry
			static-text-dialog-item
			edit-text-dialog-item
			button-dialog-item
			check-dialog-item
			radio-dialog-item
			pict-dialog-item
			icon-dialog-item
			line-dialog-item)
