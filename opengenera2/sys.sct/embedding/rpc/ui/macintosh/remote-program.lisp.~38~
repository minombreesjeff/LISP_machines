;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DYNAMIC-WINDOWS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(export '(remote-program remote-program-quit remote-program-p
	  with-output-to-viewer with-remote-accepting-values
	  define-remote-program-framework
	  ))

(defflavor possibly-remote-program () ()
  (:init-keywords :menu-level-order :remote-system-type)
  (:required-flavors program)
  (:required-methods remote-program-quit remote-program-p))

(defgeneric remote-program-quit (&optional (program *program*))
  (:method-arglist )
  (:function (funcall (flavor:generic remote-program-quit) program)))

(defgeneric remote-program-close-front-viewer (&optional (program *program*))
  (:method-arglist )
  (:function (when (remote-program-p program)
	       (funcall (flavor:generic remote-program-close-front-viewer) program))))

(defgeneric remote-program-close-all-viewers (&optional (program *program*))
  (:method-arglist )
  (:function (when (remote-program-p program)
	       (funcall (flavor:generic remote-program-close-all-viewers) program))))

(defmacro with-output-to-viewer ((&optional stream &rest args) &body body)
  (format-output-macro-default-stream stream)
  `(with-output-to-viewer-1 *program*
			    (named-continuation with-output-to-viewer (,stream)
			      . ,body)
			    . ,args))

(defflavor local-program () (possibly-remote-program))

(defmethod (remote-program-quit local-program) ()
  (send frame :bury))

(defmethod (remote-program-p local-program) nil)

(defmethod (containing-remote-program program) ()
  (console-remote-program (tv:sheet-console frame)))

(defmethod (with-output-to-viewer-1 local-program) (continuation &key title progress-note
								 &allow-other-keys)
  (let ((stream (send (program-frame self) :get-pane 'viewer)))
    (remove-window-typeout-window stream :prompt-p nil)
    (send stream :clear-history)
    (send stream :set-label title)
    (tv:noting-progress-if progress-note
	((if (eq progress-note 't)
	     "Outputting"
	     progress-note))
      (funcall continuation stream))))

(defflavor remote-program (remote-system-type menu-level-order) (possibly-remote-program)
  :initable-instance-variables)

(defmethod (remote-program-p remote-program) () remote-system-type)

(defgeneric remote-program-open-viewer (remote-program &rest args
						       &key (picture-p t)
						       &allow-other-keys)
  )

(defgeneric remote-noting-progress-internal (remote-program progress-note continuation
							    &rest args)
  )

(defmethod (with-output-to-viewer-1 remote-program) (continuation &rest args
								  &key progress-note
								  &allow-other-keys)
  (with-open-stream (stream (apply #'remote-program-open-viewer self args))
    (if progress-note
	(remote-noting-progress-internal self progress-note continuation stream)
	(funcall continuation stream))))

(defprop corresponding-keyboard-accelerator t si:debug-info)
(defprop standard-remote-menu-handler t si:debug-info)

(defvar *remote-program-menu-item-handler-properties*
  '((subcommand-menu-handler :subcommand-menu)
    (corresponding-keyboard-accelerator :keyboard-accelerator)
    (standard-remote-menu-handler :argument-menu)))

(defmethod (remote-program-menu-items remote-program) ()
  (upgrade-program-menu-items-1 self menu-level-order remote-system-type))

(defmethod (upgrade-program-menu-items-1 program)
	   (menu-level-order remote-system-type &aux alist)
  (dolist (cache-entry (cp::command-table-menu-accelerator-cache command-table))
    (let ((menu-level (menu-accelerator-cache-menu-level cache-entry)))
      (when (and (consp menu-level)
		 (eql (first menu-level) remote-system-type))
	(let ((entry (cons (list (string-capitalize-words (second menu-level))
				 :menu-level menu-level)
			   (map 'list #'ncons
				(menu-accelerator-cache-item-list cache-entry)))))
	  (dolist (handler (rest (assoc :left (menu-accelerator-cache-gesture-handler-alist
						cache-entry))))
	    (let* ((item (assoc (command-menu-handler-command-name handler) (rest entry)))
		   (function (command-menu-handler-function handler)))
	      (loop for (debug-prop menu-prop) in *remote-program-menu-item-handler-properties*
		    do
		(let ((debug-entry (si:debugging-info-user-entry function debug-prop)))
		  (when (second debug-entry)
		    (setf (cdr item)
			  (nconc (cdr item) (list menu-prop (second debug-entry)))))))))
	  (push entry alist)))))
  ;; Merge alists, bringing in properties from above, preferring things in user specified
  ;; menu list order.
  (let ((unclaimed alist)
	(preferred (loop for order in menu-level-order
			 collect (if (atom order)	;Canonicalize lists to all levels
				     (ncons (ncons order))
				     (loop for item in order
					   collect (if (atom item) (ncons item)
						       (copy-list item)))))))
    (setq alist nil)
    (dolist (pentry preferred)
      (let ((aentry (find (first (first pentry)) unclaimed :key #'caar :test #'string-equal)))
	(when aentry
	  (setf (rest (first pentry)) (nconc (rest (first pentry)) (rest (first aentry))))
	  (setq unclaimed (delete aentry unclaimed)))
	(let ((unclaimed (rest aentry)))
	  (dolist (pitem (rest pentry))
	    (let ((aitem (assoc (first pitem) unclaimed :test #'string-equal)))
	      (cond (aitem
		     (setf (rest pitem) (nconc (rest pitem) (rest aitem)))
		     (setq unclaimed (delete aitem unclaimed)))
		    ((eq (getf (rest pitem) :disabled 'default) 'default)
		     (setf (getf (rest pitem) :disabled) t)))))
	  (setf (rest pentry) (nconc (rest pentry) unclaimed))))
      (push pentry alist))
    (setq alist (nconc unclaimed alist)))
  (setq alist (nreverse alist))
  ;; Any menus with no active items are themselves inactive by default
  (loop for (level . items) in alist do
    (when (loop for item in items
		always (getf (rest item) :disabled))
      (when (eq (getf (rest level) :disabled 'default) 'default)
	(setf (getf (rest level) :disabled) t))))
  (dolist (entry alist)
    (dolist (item (rest entry))
      (let ((subcommand (getf (rest item) :subcommand-menu)))
	(when subcommand
	  (let ((sentry (find subcommand alist
			      :key #'(lambda (entry) (getf (rest (first entry)) :menu-level))
			      :test #'equal)))
	    (when sentry
	      (setf (getf (rest (first sentry)) :subcommand-menu)
		    (list (getf (rest (first entry)) :menu-level) (first item)))))))))
  alist)

(defmethod (remote-program-call-menu-handler remote-program) (menu-level menu-item)
  (let ((program (selected-program)))
    (when (and program (neq program self)
	       ;; The Macintosh application's DoMenuCommand function special-cases
	       ;; the string "Quit", so we have to do it here also.  If we're running
	       ;; the Genera program, don't look for a Quit command in the selected
	       ;; activity, because the Macintosh "knows" we're quitting the whole shebang.
	       (not (equal menu-item "Quit")))
      (let ((putative-handler (lookup-menu-handler program menu-level menu-item)))
	(when putative-handler					;assume will really handle
	  (return-from remote-program-call-menu-handler
	    (synchronous-call-menu-handler program menu-level menu-item))))))
  (let ((*program* self))
    (call-menu-handler self
		       (get-menu-handler self menu-level menu-item))))

;;; Make command disappear from the menu list by removing it from the command table
(defmethod (remove-command-menu-item remote-program) (command-name remote-menu-level)
  (delete-command-menu-handler command-name name remote-menu-level '(:left))
 )

;;; Make command reappear in the menu list, make sure to bind *package* to the
;;; right package so the command is added correctly in the command table
(defmethod (add-command-menu-item remote-program) (command-name remote-menu-level)
  (add-command-menu-handler command-name name remote-menu-level '(:left)
			    nil (fintern "LEFT-ON-~A-AT-~A-~A-MENU-COMMAND"
					 (string-upcase command-name)
					 (first remote-menu-level) name))
 )

(defmacro with-remote-accepting-values ((&optional stream &rest options) &body body)
  (declare (arglist &optional (stream *query-io*)
		    &key (program *program*)
			 prompt))
  (when (member stream '(t nil))
    (setq stream '*query-io*))
  `(with-remote-accepting-values-1 (named-continuation with-remote-accepting-values
							  (,stream)
				     (let ,(when (eq stream '*query-io*)
					     `((*standard-input* ,stream)
					       (*standard-output* ,stream)))
				       . ,body))
				   . ,options))

(defun standard-remote-menu-handler (command-name
				     &key (program *program*)
					  (command-table (program-command-table program))
				     &allow-other-keys)
  (let ((args (let ((*program* program))
		(with-remote-accepting-values
		  (*standard-input*
		    :prompt (present-to-string command-name
					       `((cp:command-name
						   :command-table ,command-table))))
		  (cp::accept-values-command-arguments-1 command-name)))))
    (cons command-name args)))

(defstruct argument-template
  query-identifier
  prompt
  default provide-default
  presentation-type presentation-type-read
  accept-help)

(defflavor remote-accept-values-stream
	(state argument-templates)
	(si:output-stream si:input-stream))

(defmethod (:tyi remote-accept-values-stream) () nil)
(defmethod (:listen remote-accept-values-stream) () t)
(defmethod (:untyi remote-accept-values-stream) (ignore) )

(defmethod (cp::arg-terminated-p remote-accept-values-stream) (ignore) t)

(defmethod (:tyo remote-accept-values-stream) (char)
  (when (eq state :collecting)
    (unless (stringp (first argument-templates))
      (push (make-array 20 :element-type 'string-char :fill-pointer 0) argument-templates))
    (vector-push-extend char (first argument-templates))))

(defmethod (:fresh-line remote-accept-values-stream) ()
  (when (and (stringp (first argument-templates))
	     (not (char-equal (aref (first argument-templates)
				    (1- (fill-pointer (first argument-templates))))
			      #\newline)))
    (send self :tyo #\return)
    t))

(defmethod (accept-1 remote-accept-values-stream) 
	   (presentation-type &rest options
			      &key (default nil def-p) (default-type presentation-type)
				   (provide-default 'unless-default-is-nil)
				   (prompt nil) (separate-inferior-queries nil)
				   (original-type presentation-type) query-identifier
			      &allow-other-keys)

  (when separate-inferior-queries
    (return-from accept-1
      (apply #'accept-2 presentation-type options)))

  (when (null query-identifier)
    (setq query-identifier (if (stringp prompt)
			       `(**prompt** ,prompt)
			       `(**type** ,presentation-type)
			       )))

  (let (template)
    (ecase state
      (:returning
	(setq template (pop argument-templates))
	(unless (and template
		     (equal query-identifier (argument-template-query-identifier template)))
	  (error "The same question was not asked the second time.  
Conditional queries are not allowed.")))
      (:collecting
	(when (eq provide-default 'unless-default-is-nil)
	  (setq provide-default (or (not (null default))
				    (presentation-type-null-default-provide-default
				      presentation-type))))
	(when (and provide-default (not def-p))
	  (multiple-value-bind (value type found-p)
	      (presentation-type-default presentation-type)
	    (if found-p
		(setq default value default-type type)
		(setq provide-default nil))))
	(setq template (make-argument-template
			 :query-identifier query-identifier
			 :prompt (with-output-to-string (stream)
				   (si:display-prompt-option stream
				     (if (eq prompt :enter-type)
					 #'(lambda (stream ignore)
					     (describe-presentation-type original-type stream))
					 prompt)))
			 :default default :provide-default provide-default
			 :presentation-type presentation-type
			 :presentation-type-read default-type
			 :accept-help (copy-if-necessary *accept-help*)))
	(push template argument-templates)))

    (values (argument-template-default template)
	    (argument-template-presentation-type-read template))))

(defmethod (remote-accept-values-stream-collect-argument-templates remote-accept-values-stream)
	   (continuation)
  (setq argument-templates nil)
  (letf ((argument-templates nil)
	 (state :collecting))
    (funcall continuation self)
    (nreverse argument-templates)))

(defmethod (remote-accept-values-stream-return-argument-templates remote-accept-values-stream)
	   (continuation templates)
  (letf ((argument-templates templates)
	 (state :returning))
    (funcall continuation self)))

(defgeneric remote-program-read-template-arguments (remote-program argument-templates title)
  )

(defun with-remote-accepting-values-1 (continuation &key (program *program*) prompt)
  (unless (remote-program-p program)
    (return-from with-remote-accepting-values-1
      (with-typeout-window-for-accept-values
	(accepting-values (t :prompt prompt)
	  (funcall continuation *query-io*)))))
  (let* ((stream (make-instance 'remote-accept-values-stream))
	 (templates (remote-accept-values-stream-collect-argument-templates stream
									    continuation)))
    (unless (remote-program-read-template-arguments program templates prompt)
      (signal 'abort))
    (remote-accept-values-stream-return-argument-templates stream continuation templates)))

;;; Convert the CVV into booleans, enumerations, or strings, which any dialog management
;;; system should be able to deal with.
(defun argument-templates-into-dialog-list (argument-templates)
  (loop for template in argument-templates
	collect (if (stringp template)
		    template
		    (multiple-value-bind (value enum)
			(argument-template-dialog-value-or-enumeration template)
		      (list* (argument-template-prompt template) value
			     (and enum (ncons enum)))))))

;;; Obviously this needs to be a presentation type method.
(defun argument-template-dialog-value-or-enumeration (argument-template)
  (let ((value (argument-template-default argument-template))
	(type (argument-template-presentation-type argument-template)))
    (flet ((enum (values)
	     (values (1+ (or (position value values) -1))
		     (loop for value in values
			   collect (present-to-string value type)))))
      (case (presentation-type-name type)
	((boolean) value)
	((inverted-boolean) (not value))
	(member (enum (cdar type)))
	(member-sequence (enum (car type)))
	(alist-member
	  (with-presentation-type-arguments (alist-member type)
	    (enum (map 'list #'tv:menu-execute-no-side-effects alist))))
	(otherwise
	  (if (argument-template-provide-default argument-template)
	      (present-to-string value
				 ;; Use type of this default when printing
				 (argument-template-presentation-type-read argument-template)
				 :acceptably t)
	      ""))))))

;;; Take new values from booleans, enumerations, and strings, and parse back into LISP data.
;;; Returns a list of coresponding parsing errors.
(defun argument-templates-update-from-dialog-list (argument-templates dialog-list)
  (loop for template in argument-templates
	for dialog-item in dialog-list
	collect (unless (stringp template)
		  (let ((value (second dialog-item))
			(type (argument-template-presentation-type template)))
		    (condition-case (value)
			 (typecase (second dialog-item)
			   (boolean
			     (if (eq (presentation-type-name type) 'inverted-boolean)
				 (not value) value))
			   (string
			     (multiple-value-bind (value type)
				 (accept-from-string type value)
			       ;; Canonical case, etc.
			       (setf (second dialog-item)
				     (present-to-string value type :acceptably t))
			       value))
			   (otherwise
			     (let ((values 
				     (ecase (presentation-type-name type)
				       (member (cdar type))
				       (member-sequence (car type))
				       (alist-member
					 (with-presentation-type-arguments (alist-member type)
					   (map 'list #'tv:menu-execute-no-side-effects
						alist))))))
			       (and (plusp value) (nth (1- value) values)))))
		       (parse-error
			 value)
		       (:no-error
			 (setf (argument-template-default template) value)
			 nil))))))

(defun argument-template-help (template string stream)
  (let ((type (argument-template-presentation-type template)))
    (write-string "You are being asked to enter " stream)
    (describe-presentation-type type stream nil :help)
    (write-char #\. stream)
    (show-help-for-presentation-type type stream string)))

(defun argument-template-complete (template string) 
  (complete-for-presentation-type (argument-template-presentation-type template) string))

(defvar *remote-program-mixins* '((nil local-program)))

(defmacro define-remote-program-framework (name &body options
						&key (command-definer t)
						     menu-level-order
						     top-level
						     command-table
						     pretty-name (selectable t)
						     inherit-from state-variables)
  (ignore inherit-from state-variables)
  (unless pretty-name
    (setq pretty-name (string-capitalize-words name)))
  `(progn
     ,(when command-definer
	`(defmacro ,(if (eq command-definer 't)
			(fintern "DEFINE-~A-COMMAND" name)
			command-definer)
		   ((name . options) arglist &body body)
	   (declare (zwei:indentation 1 3 2 2)
		    (function-parent ,name define-program-framework))
	   `(define-remote-program-command (,name ,',name ,@options) ,arglist
	      . ,body)))
     (define-remote-program-1 ',name
			      :pretty-name ',pretty-name :selectable ',selectable)
     (define-program-framework ,name
       :command-definer nil
       :top-level ,(or top-level `(default-command-top-level
				    :unknown-accelerator-is-command :alpha))
       :command-table ,(or command-table `(:kbd-accelerator-p t :inherit-from nil))
       :panes ((viewer :display
		       :typeout-window t
		       :margin-components `((margin-ragged-borders )
					    (margin-scroll-bar )
					    (margin-label :string ""
							  :margin :bottom
							  :style (:swiss :italic :normal))
					    (margin-scroll-bar :margin :bottom)
					    (margin-white-borders :thickness 2)))
	       (command-menu :command-menu)
	       (interactor :interactor))
       :other-defflavor-options (:abstract-flavor
				 (:default-init-plist :menu-level-order ,menu-level-order))
       :pretty-name ,pretty-name
       :selectable ,(eq selectable t)		;So far as Select Activity is concerned
       . ,(loop for key in '(:inherit-from :state-variables)
		when (getf options key)
		  collect key and collect (getf options key))
       )))

(defvar *remote-program-names* nil)

(defstruct (remote-program-name-entry (:type list))
  name
  pretty-name
  allowed-remote-system-types
  remote-system-type-combinations
  package)

(defun define-remote-program-1 (name &key pretty-name selectable)
  (when selectable
    (pushnew (make-remote-program-name-entry :name name :pretty-name pretty-name
					     :allowed-remote-system-types selectable
					     :package *package*)	;Remember for later
	     *remote-program-names* :replace t :key #'remote-program-name-entry-name)))

(defun find-remote-program (name &key remote-system-type)
  (let ((entry (find name *remote-program-names*
		     :test #'string-equal
		     :key (etypecase name
			    (symbol #'remote-program-name-entry-name)
			    (string #'remote-program-name-entry-pretty-name)))))
    (when (and entry
	       (or (null remote-system-type)
		   (eq (remote-program-name-entry-allowed-remote-system-types entry) t)
		   (member remote-system-type
			   (remote-program-name-entry-allowed-remote-system-types entry))))
      (let ((subentry (assoc remote-system-type
			     (remote-program-name-entry-remote-system-type-combinations
			       entry))))
	(when (null subentry)
	  (let* ((base-flavor (remote-program-name-entry-name entry))
		 (mixin (second (assoc remote-system-type *remote-program-mixins*)))
		 (*package* (remote-program-name-entry-package entry))
		 (new-flavor (fintern "~A-~A" (or remote-system-type 'local) base-flavor)))
	    (flavor::defflavor-internal new-flavor nil (list mixin base-flavor) nil nil)
	    (push (setq subentry (list remote-system-type new-flavor))
		  (remote-program-name-entry-remote-system-type-combinations entry))))
	(second subentry)))))

;;; Fixup the remote programes already defined
(loop for entry in *remote-program-names*
      collect (append entry (list (symbol-package (first entry)))) into new-entries
      finally (setf *remote-program-names* new-entries))

;;; For predefined combinations.  Requires type in compilation environment.
(defmacro compile-remote-program-combination (base-flavor remote-system-type)
  (let ((mixin (second (assoc remote-system-type *remote-program-mixins*)))
	(new-flavor (fintern "~A-~A" (or remote-system-type 'local) base-flavor)))
    `(progn
       (defflavor ,new-flavor () (,mixin ,base-flavor)
	 )
       (compile-flavor-methods ,new-flavor)
       (compile-remote-program-combination-1 ',base-flavor ',remote-system-type
					     ',new-flavor))))

(defun compile-remote-program-combination-1 (base-flavor remote-system-type new-flavor)
  (let ((entry (assoc base-flavor *remote-program-names*)))
    (pushnew (list remote-system-type new-flavor)
	     (remote-program-name-entry-remote-system-type-combinations entry)
	     :replace t :key #'first)))

(define-presentation-type remote-program-name ((&key remote-system-type))
   :printer ((name stream)
	     (let ((entry (find name *remote-program-names*
				:key #'remote-program-name-entry-name)))
	       (write-string
		 (if entry
		     (remote-program-name-entry-pretty-name entry)
		     (string-capitalize-words name))
		 stream)))
   :parser ((stream &key type)
	    (values
	      (completing-from-suggestions (stream :type type)
		(dolist (entry *remote-program-names*)
		  (when (or (null remote-system-type)
			    (eq (remote-program-name-entry-allowed-remote-system-types entry) t)
			    (member remote-system-type
				    (remote-program-name-entry-allowed-remote-system-types entry)))
		    (suggest (remote-program-name-entry-pretty-name entry)
			     (remote-program-name-entry-name entry)))))))
   :description "a remote program")


(defprop define-remote-program-command cp:define-command zwei:definition-function-spec-type)
(defmacro define-remote-program-command ((command-name program-name
					   &key (menu-accelerator nil)
						(menu-level '(:top-level))
						(menu-documentation t)
						(menu-documentation-include-defaults nil)
						(keyboard-accelerator nil)
						(echo t))
					 arglist &body body)
  `(progn
     (define-program-command (,command-name ,program-name
				 :keyboard-accelerator ,keyboard-accelerator
				 :echo ,echo)
				,arglist
       . ,body)
     ,(when menu-accelerator
	(when (eq menu-accelerator t)
	  (setq menu-accelerator (cp::generate-command-pretty-name command-name)))
	(let* ((standard-menu-levels (remove-if #'consp menu-level))
	       (remote-levels (set-difference menu-level standard-menu-levels)))
	  `(progn
	     ,(when standard-menu-levels
		`(define-standard-menu-accelerator ,command-name ,program-name
		   ,menu-accelerator ,standard-menu-levels
		   ,menu-documentation
		   ,menu-documentation-include-defaults))
	     ,(when remote-levels
		(define-command-menu-handler-internal menu-accelerator program-name
		  remote-levels '(:left) nil nil
		  (if arglist '(&rest args) '(&rest ignore))
		  `((declare (corresponding-keyboard-accelerator ,keyboard-accelerator)
			     (standard-remote-menu-handler ,(not (null arglist))))
		    ,(if arglist
			 `(apply #'standard-remote-menu-handler ',command-name args)
			 `'(,command-name))))))))))
