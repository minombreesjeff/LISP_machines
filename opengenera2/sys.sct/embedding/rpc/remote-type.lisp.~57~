;;; -*- Mode: LISP; Syntax: Lisp+C; Base: 10; Package: RPC -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file supports remote type definitions.  It contains the macro for
;;; defining remote types plus a bunch of support functions, including
;;; useful utilities to be called from the body of that macro and
;;; quasi generic functions that call the quasi methods defined by the macro.

(DEFPROP DEFINE-REMOTE-TYPE "Remote Type" SI:DEFINITION-TYPE-NAME)

;;; define-remote-type creates a remote-type-function property which accepts
;;; arguments type, original-type, operation, language, and additional
;;; operation-specific arguments.  It dispatches on operation and language.
(DEFMACRO DEFINE-REMOTE-TYPE (NAME ARGLIST &BODY OPTIONS)
  (LET ((COMPILER:DEFAULT-WARNING-FUNCTION NAME)
	(COMPILER:DEFAULT-WARNING-DEFINITION-TYPE 'DEFINE-REMOTE-TYPE)
	;; Alists from operations to alists from languages to method bodies
	(METHODS NIL))
    (PARSE-MACRO-OPTIONS DEFINE-REMOTE-TYPE OPTIONS
			 (ABBREVIATION-FOR SIZE PACKED SIGNED)
			 (PROLOGUE LISP C)
      (WHEN SIZE
	(PUSH `(:SIZE (NIL ,SIZE)) METHODS))	;Null language  constant size
      (MACROLET ((LANGUAGE-OPTIONS (LANGUAGE ADDITIONAL-OPTIONS &BODY SPECIAL-PROCESSING)
		   (LET* ((LANGUAGE-NAME (INTERN (STRING LANGUAGE) PKG-KEYWORD-PACKAGE))
			  (OPTIONS-ALLOWED `(,@ADDITIONAL-OPTIONS
					     SIZE SEND ENCODE RECEIVE DECODE 
					     TRANSLATE-ARGUMENT
					     OPTIMIZABLE-COMMON-SUBEXPRESSIONS)))
		     `(PARSE-MACRO-OPTIONS ,(FORMAT NIL "~A options for DEFINE-REMOTE-TYPE"
						    LANGUAGE-NAME)
					   ,LANGUAGE () ,OPTIONS-ALLOWED
			,@(LOOP FOR (OPTION . CODE) IN SPECIAL-PROCESSING
				COLLECT `(WHEN ,OPTION ,@CODE))
			,@(LOOP FOR METHOD IN OPTIONS-ALLOWED
				AS KEYWORD = (INTERN (STRING METHOD) PKG-KEYWORD-PACKAGE)
				COLLECT `(WHEN ,METHOD
					   (UNLESS (AND (LISTP (FIRST ,METHOD))
							(REST ,METHOD)
							(NULL (REST (REST ,METHOD))))
					     (WARN "~S is a malformed ~S ~S sub-option"
						   `(,',KEYWORD ,@,METHOD)
						   ',LANGUAGE-NAME ',KEYWORD))
					   (LET ((ELEM (ASSOC ,KEYWORD METHODS)))
					     (UNLESS ELEM
					       (PUSH (SETQ ELEM (NCONS ,KEYWORD)) METHODS))
					     (PUSH (LIST ',LANGUAGE-NAME
							 `(DESTRUCTURING-BIND
							      (&OPTIONAL ,@(FIRST ,METHOD)
							       &REST IGNORE)
							      ARGS
							    ,@(REST ,METHOD)))
						   (CDR ELEM)))))))))
	(LANGUAGE-OPTIONS LISP (TYPEP PREPROCESS))
	(LANGUAGE-OPTIONS C (DECLARE FREE)))
      ;; Now that all that crap is parsed, generate the code for the quasi methods
      (LET ((BODY (MULTIPLE-VALUE-BIND (BINDINGS ADDITIONAL-FORMS)
		      (SI:TRANSLATE-DESTRUCTURING ARGLIST `(IF (ATOM TYPE) NIL (CDR TYPE))
						  (IF (NULL ARGLIST)
						      `(TYPE-ERROR
							 "Remote type ~S is invalid because ~
						    this type does not accept arguments."
							 TYPE)
						      `(TYPE-ERROR
							 "Remote type ~S is invalid because ~
						    the arguments do not match ~S."
							 TYPE ',ARGLIST)))
		   `(LET* ,BINDINGS
		      ,@ADDITIONAL-FORMS
		      (LET ,(FIRST PROLOGUE)
			,@(REST PROLOGUE)
			(CASE OPERATION		;Unrecognized operation just returns NIL
						;since inheritance is handled by the caller
			  ,@(WHEN ABBREVIATION-FOR
			      `((:ABBREVIATION-FOR ,ABBREVIATION-FOR)))
			  ,@(WHEN PACKED
			      `((:PACKED ,PACKED)))
			  ,@(WHEN SIGNED
			      `((:SIGNED ,SIGNED)))
			  ,@(LOOP FOR (OPERATION . METHODS) IN METHODS
				  COLLECT `((,OPERATION)
					    (CASE LANGUAGE
					      ,@(LOOP FOR (LANGUAGE . CODE) IN METHODS
						      COLLECT `((,LANGUAGE) ,@CODE)))))))))))
	(WHEN UNDO-DECLARATIONS-FLAG
	  (SETF (GETDECL NAME 'REMOTE-TYPE-FUNCTION)
		`(LAMBDA (TYPE ORIGINAL-TYPE OPERATION LANGUAGE &REST ARGS)
		   ,BODY)))
	`(PROGN
	   (RECORD-SOURCE-FILE-NAME ',NAME 'DEFINE-REMOTE-TYPE)
	   (DEFUN (:PROPERTY ,NAME REMOTE-TYPE-FUNCTION) (TYPE ORIGINAL-TYPE OPERATION LANGUAGE
							  &REST ARGS)
	     (DECLARE (SYS:FUNCTION-PARENT ,NAME DEFINE-REMOTE-TYPE))
	     (IGNORE LANGUAGE ARGS)
	     ,BODY))))))

(DEFMACRO TYPE-ERROR (FORMAT-STRING &REST FORMAT-ARGS)
  `(ERROR ,(STRING-APPEND FORMAT-STRING "~:[~%Type ~S was expanded from ~S.~]")
	  ,@FORMAT-ARGS
	  (EQ TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE))

(DEFUN REMOTE-TYPE-FUNCTION (TYPE &OPTIONAL (ORIGINAL-TYPE TYPE) (ERROR-P T))
  (LET ((TYPE-NAME (IF (ATOM TYPE) TYPE (FIRST TYPE))))
    (LET ((TYPE-FUNCTION (AND (SYMBOLP TYPE-NAME)
			      (GETDECL TYPE-NAME 'REMOTE-TYPE-FUNCTION))))
      (UNLESS TYPE-FUNCTION
	(WHEN ERROR-P
	  (TYPE-ERROR "~S is not defined as a remote type name." TYPE-NAME)))
      TYPE-FUNCTION)))

;;; Quasi generic functions for remote types

(DEFUN REMOTE-TYPE-SPECIFIER-P (TYPE)
  (NOT (NULL (REMOTE-TYPE-FUNCTION TYPE TYPE NIL))))

(DEFUN REMOTE-TYPE-ABBREVIATION-FOR (TYPE ORIGINAL-TYPE)
  (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
	   :ABBREVIATION-FOR NIL))

;Unit of packing or NIL
(DEFUN REMOTE-TYPE-PACKED (ORIGINAL-TYPE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS PACKED = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			     :PACKED NIL)
	DO (WHEN PACKED (RETURN PACKED))
	   (WHEN (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			  :SIZE NIL)
	     (RETURN NIL))))

;True if we have to worry about negative numbers for packed values of this type
;This is needed because Symbolics Common Lisp has packed UNSIGNED-BYTE arrays,
;but does not have packed SIGNED-BYTE arrays
(DEFUN REMOTE-TYPE-SIGNED (ORIGINAL-TYPE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS SIGNED = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			     :SIGNED NIL)
	DO (WHEN SIGNED (RETURN SIGNED))))

;Number of XDR words always occupied by a value of this type, or NIL
(DEFUN REMOTE-TYPE-FIXED-SIZE (ORIGINAL-TYPE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS SIZE = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			   :SIZE NIL)
	DO (WHEN SIZE (RETURN SIZE))))

;Lisp or C expression to compute the XDR size given the value
;In C, the second value is a statement -- this is because C isn't a properly
;nested language, so statements can't go inside expressions
(DEFUN REMOTE-TYPE-SIZE-EXPRESSION (ORIGINAL-TYPE LANGUAGE VALUE)
  (DECLARE (VALUES EXPRESSION STATEMENT))
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE) 
	;; First check for fixed size
	AS EXPRESSION = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE)
				 TYPE ORIGINAL-TYPE :SIZE NIL)
	DO (WHEN EXPRESSION
	     ;; Convert constant size to an expression in the appropriate language
	     (RETURN (ECASE LANGUAGE
		       (:LISP EXPRESSION)
		       (:C (LIST EXPRESSION)))))
	   ;; No fixed size, try variable size
	   (MULTIPLE-VALUE-BIND (EXPRESSION STATEMENT)
	       (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
								  :SIZE LANGUAGE VALUE)
	     (WHEN EXPRESSION
	       (RETURN (VALUES EXPRESSION STATEMENT))))
	FINALLY
	  (ERROR "Unable to find a ~A expression for the XDR size of a value of type ~S"
		 LANGUAGE ORIGINAL-TYPE)))

;Get a list of expressions that can be hoisted up to the front of the function,
;when sending this value, and bound to variables
(DEFUN REMOTE-TYPE-OPTIMIZABLE-COMMON-SUBEXPRESSIONS (ORIGINAL-TYPE LANGUAGE VALUE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE) 
	THEREIS (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			 :OPTIMIZABLE-COMMON-SUBEXPRESSIONS LANGUAGE VALUE)))

;Lisp expression to test whether a value is a member of a given remote type
(DEFUN REMOTE-TYPEP (ORIGINAL-TYPE LANGUAGE VALUE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS EXPRESSION = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
				 :TYPEP LANGUAGE VALUE)
	DO (WHEN EXPRESSION (RETURN EXPRESSION))
	FINALLY
	  (ERROR "Unable to find a ~A expression to test membership of a value in type ~S"
		 LANGUAGE ORIGINAL-TYPE)))

;Declare a variable corresponding to the given type without the trailing semicolon.
(DEFUN REMOTE-TYPE-DECLARATION (ORIGINAL-TYPE LANGUAGE NAME)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS DCL = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			  :DECLARE LANGUAGE NAME)
	DO (WHEN DCL (RETURN DCL))
	FINALLY
	  (ERROR "Unable to find a ~A declaration for variables of type ~S"
		 LANGUAGE ORIGINAL-TYPE)))

;Return a list of lists ((name type)...).  This allows a single RPC argument/value
;to be passed as multiple language arguments/values.
(DEFUN REMOTE-TYPE-TRANSLATE-ARGUMENT (ORIGINAL-TYPE LANGUAGE NAME)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS ANS = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			  :TRANSLATE-ARGUMENT LANGUAGE NAME)
	DO (WHEN ANS (RETURN ANS))
	FINALLY
	  ;; Default method is here
	  (RETURN (LIST (LIST NAME ORIGINAL-TYPE)))))

;;;; Now the guts: send and receive methods

;Lisp or C statement to store a value into the XDR block
(DEFUN REMOTE-TYPE-SEND (ORIGINAL-TYPE LANGUAGE VALUE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS EXP = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			  :SEND LANGUAGE VALUE)
	DO (WHEN EXP
	     (RETURN EXP))
	   (SETQ EXP (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			      :ENCODE LANGUAGE VALUE))
	   (WHEN EXP
	     (RETURN (ECASE LANGUAGE
		       (:LISP `(SEND-WORD ,EXP))
		       (:C #{ send_word(EXP); }
			   ))))
	FINALLY
	  (ERROR "Unable to find a ~A XDR-send method for a value of type ~S"
		 LANGUAGE ORIGINAL-TYPE)))

;Lisp or C expression to fetch a value from the XDR block
;In C, the third argument is where to put the value and the fourth is storage-mode
;In Lisp, the value is always just returned, but the fourth argument is storage-mode
(DEFUN REMOTE-TYPE-RECEIVE (ORIGINAL-TYPE LANGUAGE &OPTIONAL INTO STORAGE-MODE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS EXP = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			  :RECEIVE LANGUAGE INTO STORAGE-MODE)
	DO (WHEN EXP
	     (RETURN EXP))
	   (SETQ EXP (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			      :DECODE LANGUAGE (ECASE LANGUAGE
						 (:LISP `VALUE)
						 (:C #{ value }))))
	   (WHEN EXP
	     (RETURN (ECASE LANGUAGE
		       (:LISP (LT:LET-SUBST '(VALUE) '((RECEIVE-WORD)) EXP))
		       (:C #{ INTO = (C-SUBSTITUTE #{ receive_word() }
						     #{value}
						     EXP) ;
			    }))))
	FINALLY
	  (ERROR "Unable to find a ~A XDR-receive method for a value of type ~S"
		 LANGUAGE ORIGINAL-TYPE)))

;C statement to free storage occupied by a C value received with storage-mode = :stack
(DEFUN REMOTE-TYPE-FREE (ORIGINAL-TYPE LANGUAGE VALUE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS EXP = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			  :FREE LANGUAGE VALUE)
	DO (WHEN EXP
	     (RETURN EXP))
	FINALLY (RETURN NIL)))		;not an error if no method defined!

;Returns code to preprocess the variable, or NIL
(DEFUN REMOTE-TYPE-PREPROCESS (ORIGINAL-TYPE LANGUAGE VARIABLE)
  (LOOP FOR TYPE = ORIGINAL-TYPE THEN (REMOTE-TYPE-ABBREVIATION-FOR TYPE ORIGINAL-TYPE)
	UNTIL (NULL TYPE)
	AS EXP = (FUNCALL (REMOTE-TYPE-FUNCTION TYPE ORIGINAL-TYPE) TYPE ORIGINAL-TYPE
			  :PREPROCESS LANGUAGE VARIABLE)
	DO (WHEN EXP
	     (RETURN EXP))
	FINALLY (RETURN NIL)))

;;;; Generation of code for stubs and handlers to interface with the transport medium
;;;; These produce code that only works in the specific environment wrapped around it
;;;; by the routines in REMOTE-CALL

(DEFUN REMOTE-TYPE-SEND-MULTIPLE (LANGUAGE TYPES VALUES INITIATE FINISH &OPTIONAL AS-A-BLOCK)
  (ECASE LANGUAGE
    (:LISP
      (LET* ((VARIABLES (LOOP FOR NIL IN VALUES COLLECT (GENSYM)))
	     (LT:*SIMPLE-VARIABLES* (APPEND LT:*SIMPLE-VARIABLES* VARIABLES))
	     (EXP
	      `(PROGN
		 ,@(LOOP FOR VAR IN VARIABLES AND TYPE IN TYPES
			 WHEN (REMOTE-TYPE-PREPROCESS TYPE LANGUAGE VAR)
			   COLLECT IT)
		 ,(SUBST ;; We wish the Lisp compiler would do constant-folding for +.
			 ;; However to get around the nonsense on CLtL pp.194-5, we have
			 ;; to flatten the expression into a single call to +, so we may
			 ;; as well do the constant folding at the same time.
			 (LOOP WITH CONSTANT = 0
			       FOR VAR IN VARIABLES AND TYPE IN TYPES
			       AS SIZE = (REMOTE-TYPE-SIZE-EXPRESSION TYPE LANGUAGE VAR)
			       NCONC (LABELS ((PROCESS (SIZE)
						(COND ((NUMBERP SIZE)
						       (INCF CONSTANT SIZE)
						       '())
						      ((AND (LISTP SIZE) (EQ (FIRST SIZE) '+))
						       (MAPCAN #'PROCESS (REST SIZE)))
						      ((AND (LISTP SIZE) (EQ (FIRST SIZE) '1+))
						       (INCF CONSTANT 1)
						       (PROCESS (SECOND SIZE)))
						      (T
						       (NCONS SIZE)))))
				       (PROCESS SIZE))
				 INTO TERMS
			       FINALLY (RETURN (IF TERMS
						   `(+ ,@TERMS
						       ,@(UNLESS (ZEROP CONSTANT)
							   `(,CONSTANT)))
						   CONSTANT)))
			 `SIZE
			 INITIATE)
		 (INITIALIZE-XDR-POINTER)
		 ,@(OPTIMIZE-MULTIPLE-SEND-WORDS
		     (LOOP FOR VAR IN VARIABLES AND TYPE IN TYPES
			   COLLECT (REMOTE-TYPE-SEND TYPE LANGUAGE VAR)))
		 (VERIFY-XDR-POINTER T)
		 ,FINISH))
	     ;; Optimize out any common subexpressions
	     (CSES (LOOP FOR VAR IN VARIABLES AND TYPE IN TYPES
			 APPEND (REMOTE-TYPE-OPTIMIZABLE-COMMON-SUBEXPRESSIONS
				  TYPE LANGUAGE VAR))))
	(WHEN CSES
	  (LET* ((TEMPS (LOOP FOR NIL IN CSES COLLECT (GENSYM)))
		 (LT:*SIMPLE-VARIABLES* (APPEND TEMPS LT:*SIMPLE-VARIABLES*)))
	    (SETQ EXP (LT:LET-SUBST TEMPS CSES (LISP-SUBSTITUTE TEMPS CSES EXP)))))
	;; Preserve order of evaluation of the value expressions, evaluate each one only once
	(LT:LET-SUBST VARIABLES VALUES EXP)))
    (:C
      ;; Unlike the Lisp case, this C code does not try to guarantee order of evaluation
      ;; nor to evaluate things only once, so the user must introduce his own temporary
      ;; variables if necessary.  "Simple and elegant."
      (LET* ((SIZE-STMT NIL)
	     (SIZE-EXPR ;; Assume the C compiler will do constant-folding for +
			(OR (LOOP FOR (TYPE . MORE) ON TYPES AND VALUE IN VALUES
				  WITH (EXPRESSION STATEMENT)
				  DO (MULTIPLE-VALUE-SETQ (EXPRESSION STATEMENT)
				       (REMOTE-TYPE-SIZE-EXPRESSION TYPE LANGUAGE VALUE))
				     (SETQ SIZE-STMT (APPEND SIZE-STMT STATEMENT))
				  APPEND EXPRESSION
				  WHEN MORE APPEND #{+})
			    #{0}))
	     (SEND-STMT (C-MACROLET
			  `((|send_word|
			     ,#'(SYS:NAMED-LAMBDA |send_word| (WORD)
				#{ *(XDRPointer++) = WORD }))
			    (|send_word_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_word_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)LENGTH << 2);
				   XDRPointer += LENGTH }))
			    (|send_halfword_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_halfword_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)LENGTH << 1);
				   XDRPointer += (LENGTH + 1) >> 1 }))
			    (|send_signed_halfword_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_signed_halfword_vector|
						  (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)LENGTH << 1);
				   XDRPointer += (LENGTH + 1) >> 1 }))
			    (|send_byte_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_byte_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)LENGTH);
				   XDRPointer += (LENGTH + 3) >> 2 }))
			    (|send_signed_byte_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_signed_byte_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)LENGTH);
				   XDRPointer += (LENGTH + 3) >> 2 }))
			    (|send_char_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_char_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)LENGTH);
				   XDRPointer += (LENGTH + 3) >> 2 }))
			    (|send_bit_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_bit_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)(LENGTH + 7) >> 3);
				   XDRPointer += (LENGTH + 31) >> 5 }))
			    (|send_nibble_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_nibble_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)(LENGTH + 1) >> 1);
				   XDRPointer += (LENGTH + 7) >> 3 })) 
			    (|send_single_float_vector|
			     ,#'(SYS:NAMED-LAMBDA |send_single_float_vector| (VECTOR LENGTH)
				#{ CopyMemory((void *)VECTOR , (void *)XDRPointer,
					      (LongInt)LENGTH << 2);
				   XDRPointer += LENGTH })))
			  (LOOP FOR TYPE IN TYPES AND VALUE IN VALUES
				APPEND (REMOTE-TYPE-SEND TYPE LANGUAGE VALUE)))))
	(IF AS-A-BLOCK
	    #{ { SIZE-STMT
		 (C-SUBSTITUTE SIZE-EXPR #{size} INITIATE)
		 SEND-STMT
		 XDRVerifyPointer(XDRPointer, XDRLimit);
		 FINISH
	       } }
	    #{ SIZE-STMT
	       (C-SUBSTITUTE SIZE-EXPR #{size} INITIATE)
	       SEND-STMT
	       XDRVerifyPointer(XDRPointer, XDRLimit);
	       FINISH
	       } )))))

(DEFUN REMOTE-TYPE-SEND-MULTIPLE-TRANSLATED (LANGUAGE SPECS VALUES INITIATE FINISH
					     &OPTIONAL AS-A-BLOCK)
  (REMOTE-TYPE-SEND-MULTIPLE LANGUAGE
			     (MAPCAR #'SECOND SPECS)		;types
			     (LOOP FOR (NAME TYPE) IN SPECS	;values
				   AS X = (REMOTE-TYPE-TRANSLATE-ARGUMENT TYPE LANGUAGE NAME)
				   COLLECT
				     (IF (CDR X)
					 (CONS 'SPREAD (LOOP FOR NIL IN X
							     COLLECT (POP VALUES)))
					 (POP VALUES)))
			     INITIATE
			     FINISH
			     AS-A-BLOCK))

;;; In Lisp this ignores VARIABLES and returns multiple values
;;; except that STORAGE-MODE = :OVERWRITE means look at VARIABLES
;;; In C this returns a statement that assigns to VARIABLES
;;; In both languages, STORAGE-MODE can be an atom or a list parallel to VARIABLES
(DEFUN REMOTE-TYPE-RECEIVE-MULTIPLE (LANGUAGE TYPES &OPTIONAL VARIABLES STORAGE-MODE)
  (ECASE LANGUAGE
    (:LISP
      `(PROGN
	 (INITIALIZE-XDR-POINTER)
	 (MULTIPLE-VALUE-PROG1
	   (VALUES ,@(LOOP FOR TYPE IN TYPES
			   COLLECT (REMOTE-TYPE-RECEIVE TYPE LANGUAGE (POP VARIABLES)
							(IF (ATOM STORAGE-MODE) STORAGE-MODE
							    (POP STORAGE-MODE)))))
	   (VERIFY-XDR-POINTER NIL))))
    (:C
      (LET ((STMT (C-MACROLET
		    `((|get_receive_pointer|
		       ,#'(SYS:NAMED-LAMBDA |get_receive_pointer| ()
			    #{ XDRPointer }))
		      (|advance_receive_pointer|
		       ,#'(SYS:NAMED-LAMBDA |advance_receive_pointer| (N-WORDS)
			    #{ XDRPointer += N-WORDS }))
		      (|receive_word|
			,#'(SYS:NAMED-LAMBDA |receive_word| ()
			     #{ *(XDRPointer++) }))
		      (|receive_word_vector|
			,#'(SYS:NAMED-LAMBDA |receive_word_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					   (LongInt)LENGTH << 2);
				XDRPointer += LENGTH }))
		      (|receive_halfword_vector|
			,#'(SYS:NAMED-LAMBDA |receive_halfword_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					   (LongInt)LENGTH << 1);
				XDRPointer += (LENGTH + 1) >> 1 }))
		      (|receive_signed_halfword_vector|
			,#'(SYS:NAMED-LAMBDA |receive_signed_halfword_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					   (LongInt)LENGTH << 1);
				XDRPointer += (LENGTH + 1) >> 1 }))
		      (|receive_byte_vector|
			,#'(SYS:NAMED-LAMBDA |receive_byte_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					   (LongInt)LENGTH);
				XDRPointer += (LENGTH + 3) >> 2 }))
		      (|receive_signed_byte_vector|
			,#'(SYS:NAMED-LAMBDA |receive_signed_byte_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					   (LongInt)LENGTH);
				XDRPointer += (LENGTH + 3) >> 2 }))
		      (|receive_char_vector|
			,#'(SYS:NAMED-LAMBDA |receive_char_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					   (LongInt)LENGTH);
				XDRPointer += (LENGTH + 3) >> 2 }))
		      (|receive_single_float_vector|
			,#'(SYS:NAMED-LAMBDA |receive_single_float_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					   (LongInt)LENGTH << 2);
				XDRPointer += LENGTH }))
		      (|receive_nibble_vector|
			,#'(SYS:NAMED-LAMBDA |receive_nibble_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					  (LongInt)(LENGTH + 1) >> 1);
				XDRPointer += (LENGTH + 7) >> 3 }))
		      (|receive_bit_vector|
			,#'(SYS:NAMED-LAMBDA |receive_bit_vector| (VECTOR LENGTH)
			     #{ CopyMemory((void *)XDRPointer, (void *)VECTOR ,
					  (LongInt)(LENGTH + 7) >> 3);
				XDRPointer += (LENGTH + 31) >> 5 })))
		    (LOOP FOR TYPE IN TYPES AND VAR IN VARIABLES
			  APPEND (REMOTE-TYPE-RECEIVE TYPE LANGUAGE VAR
						      (IF (ATOM STORAGE-MODE) STORAGE-MODE
							  (POP STORAGE-MODE)))))))
	#{ STMT
	   XDRVerifyPointer(XDRPointer, XDRLimit);
         } ))))

(DEFUN REMOTE-TYPE-FREE-MULTIPLE (LANGUAGE TYPES VARIABLES)
  (ECASE LANGUAGE
    (:LISP )		;Let the GC do it
    (:C
      (LOOP FOR TYPE IN TYPES AND VAR IN VARIABLES
	    APPEND (REMOTE-TYPE-FREE TYPE LANGUAGE VAR)))))


;;; Utilities for the above

;--- I wonder if the use of a global block register on the Imach is really worth
;--- it, since we aren't actually inlining any of the code that uses it
(DEFMACRO XDR-REGISTER-SAVE (&BODY BODY)
  (FEATURE-CASE
    (:IMACH `(WITH-BLOCK-REGISTERS (2) ,@BODY))
    (3600 `(PROGN ,@BODY))))

(DEFMACRO INITIALIZE-XDR-POINTER ()
  (FEATURE-CASE
    (:IMACH `(SETF (%BLOCK-REGISTER 2) XDR-POINTER))
    (3600 `(SETQ XDR-POINTER (%MAKE-POINTER-OFFSET DTP-LOCATIVE XDR-POINTER -1)))))

(DEFMACRO XDR-BLOCK-WRITE (VALUE)
  (FEATURE-CASE
    (:IMACH `(%BLOCK-WRITE 2 (PROG1 ,VALUE (SI:PREPARE-FOR-BLOCK-WRITE))))
    (3600 `(%P-STORE-CONTENTS-INCREMENT-POINTER ,VALUE XDR-POINTER))))

(DEFMACRO XDR-BLOCK-READ ()
  (FEATURE-CASE
    (:IMACH `(%BLOCK-READ 2 :CYCLE-TYPE %MEMORY-DATA-READ :SET-CDR-NEXT T :FIXNUM-ONLY T))
    (3600 `(%P-CONTENTS-INCREMENT-POINTER XDR-POINTER))))

(DEFMACRO UPDATE-XDR-POINTER (SUBR)
  (FEATURE-CASE
    (:IMACH SUBR)				;(%BLOCK-REGISTER 2) updated by side-effect
    (3600 `(SETQ XDR-POINTER ,SUBR))))		;subroutine returns the new value

(DEFMACRO ADVANCE-XDR-POINTER (N-WORDS &ENVIRONMENT ENV)
  (ONCE-ONLY (N-WORDS &ENVIRONMENT ENV)		;Do side effects on XDR-POINTER in right order
    (FEATURE-CASE
      (:IMACH `(SETF (%BLOCK-REGISTER 2) (%POINTER-PLUS (%BLOCK-REGISTER 2) ,N-WORDS)))
      (3600 `(SETQ XDR-POINTER (%MAKE-POINTER-OFFSET DTP-LOCATIVE XDR-POINTER ,N-WORDS))))))

(DEFMACRO READ-XDR-POINTER ()
  (FEATURE-CASE
    (:IMACH `(%BLOCK-REGISTER 2))
    (3600 `(%MAKE-POINTER-OFFSET DTP-LOCATIVE XDR-POINTER 1))))

(DEFMACRO VERIFY-XDR-POINTER (SEND)
  (FEATURE-CASE
    (:IMACH `(COMPILER:%ERROR-UNLESS (EQ (%BLOCK-REGISTER 2) XDR-LIMIT)
	       (XDR-POINTER-ERROR (%BLOCK-REGISTER 2) XDR-LIMIT ,SEND)))
    (3600 `(COMPILER:%ERROR-UNLESS (EQ (%MAKE-POINTER-OFFSET DTP-LOCATIVE XDR-POINTER 1)
				       XDR-LIMIT)
	       (XDR-POINTER-ERROR XDR-POINTER XDR-LIMIT ,SEND)))))

(DEFMACRO VERIFY-XDR-POINTER-BELOW-LIMIT (N-WORDS SEND)
  (FEATURE-CASE
    (:IMACH `(COMPILER:%ERROR-UNLESS (%POINTER-LESSP ,(IF (EQL N-WORDS 1)
							  `(%BLOCK-REGISTER 2)
							  `(%POINTER-PLUS (%BLOCK-REGISTER 2)
									  (1- ,N-WORDS)))
						     XDR-LIMIT)
	       (XDR-POINTER-ERROR-1 ,SEND)))
    (3600 `(COMPILER:%ERROR-UNLESS (%POINTER-LESSP (%MAKE-POINTER-OFFSET DTP-LOCATIVE
									 XDR-POINTER
									 ,N-WORDS)
						   XDR-LIMIT)
	       (XDR-POINTER-ERROR-1 ,SEND)))))

;;;; Macros used by remote-type send and receive quasi methods

(DEFMACRO SEND-WORD (WORD)
  `(UPDATE-XDR-POINTER (XDR-SEND-WORD XDR-AGENT ,WORD #-IMACH XDR-POINTER XDR-LIMIT)))

(DEFMACRO SEND-WORDS (&REST WORDS)
  `(UPDATE-XDR-POINTER (XDR-SEND-WORDS XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT ,@WORDS)))

(DEFMACRO SEND-WORD-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-WORD-VECTOR XDR-AGENT ,VECTOR
					     #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-HALFWORD-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-HALFWORD-VECTOR XDR-AGENT ,VECTOR
						 #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-SIGNED-HALFWORD-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-SIGNED-HALFWORD-VECTOR XDR-AGENT ,VECTOR
							#-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-BYTE-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-BYTE-VECTOR XDR-AGENT ,VECTOR
					     #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-SIGNED-BYTE-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-SIGNED-BYTE-VECTOR XDR-AGENT ,VECTOR
						    #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-CHAR-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-CHAR-VECTOR XDR-AGENT ,VECTOR
					     #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-BIT-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-BIT-VECTOR XDR-AGENT ,VECTOR
					    #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-NIBBLE-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-NIBBLE-VECTOR XDR-AGENT ,VECTOR
					       #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO SEND-SINGLE-FLOAT-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-SEND-SINGLE-FLOAT-VECTOR XDR-AGENT ,VECTOR
						     #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-WORD ()
  (FEATURE-CASE
    (:IMACH `(XDR-RECEIVE-WORD XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT))
    (3600 `(MULTIPLE-VALUE-SETQ (NIL XDR-POINTER)
	     (XDR-RECEIVE-WORD XDR-AGENT XDR-POINTER XDR-LIMIT)))))

(DEFMACRO RECEIVE-WORD-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-WORD-VECTOR XDR-AGENT ,VECTOR
						#-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-HALFWORD-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-HALFWORD-VECTOR XDR-AGENT ,VECTOR
						    #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-SIGNED-HALFWORD-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-SIGNED-HALFWORD-VECTOR XDR-AGENT ,VECTOR
							   #-IMACH XDR-POINTER XDR-LIMIT
							   ,@ARGS)))

(DEFMACRO RECEIVE-BYTE-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-BYTE-VECTOR XDR-AGENT ,VECTOR
						#-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-SIGNED-BYTE-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-SIGNED-BYTE-VECTOR XDR-AGENT ,VECTOR
						       #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-CHAR-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-CHAR-VECTOR XDR-AGENT ,VECTOR
						#-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-BIT-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-BIT-VECTOR XDR-AGENT ,VECTOR
					       #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-NIBBLE-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-NIBBLE-VECTOR XDR-AGENT ,VECTOR
						  #-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

(DEFMACRO RECEIVE-SINGLE-FLOAT-VECTOR (VECTOR &REST ARGS)
  (DECLARE (ARGLIST VECTOR &OPTIONAL START END))
  `(UPDATE-XDR-POINTER (XDR-RECEIVE-SINGLE-FLOAT-VECTOR XDR-AGENT ,VECTOR
							#-IMACH XDR-POINTER XDR-LIMIT ,@ARGS)))

;; Combine successive calls to SEND-WORD into one call to SEND-WORDS
(DEFUN OPTIMIZE-MULTIPLE-SEND-WORDS (FORMS)
  (SETQ FORMS (LOOP FOR FORM IN FORMS		;First expand PROGN
		    IF (AND (CONSP FORM) (EQ (FIRST FORM) 'PROGN))
		      APPEND (CDR FORM)
		    ELSE COLLECT FORM))
  (LOOP WITH PENDING = NIL WITH RESULT = NIL
	FOR FORM IN FORMS DO
    (COND ((AND (CONSP FORM) (EQ (FIRST FORM) 'SEND-WORD))
	   (PUSH (SECOND FORM) PENDING))
	  (T
	   (COND ((CDR PENDING) (PUSH `(SEND-WORDS ,@(NREVERSE PENDING)) RESULT))
		 (PENDING (PUSH `(SEND-WORD ,(FIRST PENDING)) RESULT)))
	   (SETQ PENDING NIL)
	   (PUSH FORM RESULT)))
	FINALLY
	  (COND ((CDR PENDING) (PUSH `(SEND-WORDS ,@(NREVERSE PENDING)) RESULT))
		(PENDING (PUSH `(SEND-WORD ,(FIRST PENDING)) RESULT)))
	  (RETURN (NREVERSE RESULT))))
