;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: RPC; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Stuff that has to be loaded in order to compile the call and transport layers of RPC

;;; Authentication

(DEFVAR *AUTHENTICATION-TYPES* (LIST :NULL :UNIX :DES))

(DEFINE-REMOTE-TYPE AUTH-NULL ()
  (:ABBREVIATION-FOR `(OPAQUE-BYTES (:LISP AUTH-NULL)))
  (:SIZE 1)
  (:LISP
    (:SEND () `(SEND-WORD 0))
    (:RECEIVE () `(PROGN (ADVANCE-XDR-POINTER (RECEIVE-WORD)) NIL))
    (:TYPEP (VALUE)  `(NULL ,VALUE))))

(DEFINE-REMOTE-TYPE AUTHENTICATION (TYPE)
  (:LISP
    (:SIZE (VALUE)
     `(+ 1 (%FIXNUM-CEILING (VECTOR-LENGTH ,VALUE) 4)))
    (:TYPEP (VALUE)
     (ONCE-ONLY (VALUE &ENVIRONMENT NIL)
       `(AND (VECTORP ,VALUE)
	     (ARRAY-HAS-LEADER-P ,VALUE)
	     (EQ (NAMED-STRUCTURE-SYMBOL ,VALUE) ,TYPE)
	     (EQ (ARRAY-TYPE ,VALUE) 'ART-8B))))
    (:SEND (VALUE)
     (ONCE-ONLY (VALUE &ENVIRONMENT NIL)
       `(PROGN (SEND-WORD (VECTOR-LENGTH ,VALUE))
	       (SEND-BYTE-VECTOR ,VALUE))))
    (:RECEIVE (INTO STORAGE-MODE)
     `(LET* ((SIZE (RECEIVE-WORD))
	     (ARRAY
	       ,(ECASE STORAGE-MODE
		  ((NIL :STACK)
		   `(,(IF (EQ STORAGE-MODE :STACK) 'MAKE-STACK-ARRAY 'MAKE-ARRAY)
		     SIZE
		     :ELEMENT-TYPE '(UNSIGNED-BYTE 8)
		     :LEADER-LENGTH 3
		     :FILL-POINTER SIZE
		     :NAMED-STRUCTURE-SYMBOL ',TYPE))
		  (:OVERWRITE
		    `(LET ((ARRAY ,INTO))
		       (SETF (FILL-POINTER ARRAY) SIZE)
		       (SETF (ARRAY-LEADER ARRAY 1) ',TYPE)
		       ARRAY)))))
	(SETF (ARRAY-LEADER ARRAY 2) XDR-AGENT)
	(RECEIVE-BYTE-VECTOR ARRAY 0 SIZE)
	ARRAY))))

(DEFINE-REMOTE-TYPE NULL-CALL-CREDENTIAL ()
  (:ABBREVIATION-FOR `AUTH-NULL))

(DEFINE-REMOTE-TYPE UNIX-CALL-CREDENTIAL ()
  (:ABBREVIATION-FOR `(AUTHENTICATION UNIX-CALL-CREDENTIAL)))

(DEFINE-REMOTE-TYPE SHORT-CALL-CREDENTIAL ()
  (:ABBREVIATION-FOR `(AUTHENTICATION SHORT-CALL-CREDENTIAL)))

(DEFINE-REMOTE-TYPE DES-CALL-CREDENTIAL ()
  (:ABBREVIATION-FOR `(AUTHENTICATION DES-CALL-CREDENTIAL)))

(DEFINE-REMOTE-TYPE CALL-CREDENTIAL ()
  (:ABBREVIATION-FOR
    `(OR NULL-CALL-CREDENTIAL UNIX-CALL-CREDENTIAL SHORT-CALL-CREDENTIAL DES-CALL-CREDENTIAL)))

(DEFINE-REMOTE-TYPE NULL-CALL-VERIFIER ()
  (:ABBREVIATION-FOR `AUTH-NULL))

(DEFINE-REMOTE-TYPE UNIX-CALL-VERIFIER ()
  (:ABBREVIATION-FOR `(AUTHENTICATION UNIX-CALL-VERIFIER)))

(DEFINE-REMOTE-TYPE SHORT-CALL-VERIFIER ()
  (:ABBREVIATION-FOR `(AUTHENTICATION SHORT-CALL-VERIFIER)))

(DEFINE-REMOTE-TYPE DES-CALL-VERIFIER ()
  (:ABBREVIATION-FOR `(AUTHENTICATION DES-CALL-VERIFIER)))

(DEFINE-REMOTE-TYPE CALL-VERIFIER ()
  (:ABBREVIATION-FOR
    `(OR NULL-CALL-VERIFIER UNIX-CALL-VERIFIER SHORT-CALL-VERIFIER DES-CALL-VERIFIER)))

(DEFINE-REMOTE-TYPE NULL-REPLY-VERIFIER ()
  (:ABBREVIATION-FOR `AUTH-NULL))

(DEFINE-REMOTE-TYPE UNIX-REPLY-VERIFIER ()
  (:ABBREVIATION-FOR `(AUTHENTICATION UNIX-REPLY-VERIFIER)))

(DEFINE-REMOTE-TYPE SHORT-REPLY-VERIFIER ()
  (:ABBREVIATION-FOR `(AUTHENTICATION SHORT-REPLY-VERIFIER)))

(DEFINE-REMOTE-TYPE DES-REPLY-VERIFIER ()
  (:ABBREVIATION-FOR `(AUTHENTICATION DES-REPLY-VERIFIER)))

(DEFINE-REMOTE-TYPE REPLY-VERIFIER ()
  (:ABBREVIATION-FOR
    `(OR NULL-REPLY-VERIFIER UNIX-REPLY-VERIFIER SHORT-REPLY-VERIFIER DES-REPLY-VERIFIER)))

;;; Define the data structure that precedes the arguments in a call block
;;; Some of these fields are "really" unsigned, but for efficiency I'm ignoring that
(DEFINE-REMOTE-TYPE RPC-CALL-HEADER ()
  (:ABBREVIATION-FOR `(STRUCTURE (TRANSACTION-ID INTEGER-32)
				 (RPC-MESSAGE-TYPE INTEGER-32)		;constant 0
				 (RPC-VERSION INTEGER-32)		;constant 2
				 (MODULE-NUMBER INTEGER-32)
				 (MODULE-VERSION INTEGER-32)
				 (ENTRY-NUMBER INTEGER-32)
				 (CREDENTIAL CALL-CREDENTIAL)
				 (VERIFIER CALL-VERIFIER))))

(DEFMACRO RPC-CALL-HEADER-LENGTH (&OPTIONAL CREDENTIAL VERIFIER &ENVIRONMENT ENV)
  `(+ 10
      ,@(AND CREDENTIAL
	     (NCONS (ONCE-ONLY (CREDENTIAL &ENVIRONMENT ENV)
		     `(IF (NULL ,CREDENTIAL)
			  0
			(%FIXNUM-CEILING (VECTOR-LENGTH ,CREDENTIAL) 4)))))
      ,@(AND VERIFIER
	     (NCONS (ONCE-ONLY (VERIFIER &ENVIRONMENT ENV)
		      `(IF (NULL ,VERIFIER)
			   0
			 (%FIXNUM-CEILING (VECTOR-LENGTH ,VERIFIER) 4)))))))

(DEFMACRO SEND-AUTHENTICATION (TYPE VALUE)
  (IF VALUE
      (LET* ((PACKAGE (SYMBOL-PACKAGE TYPE))
	     (CASES `((,(INTERN (STRING-APPEND "UNIX-" TYPE) PACKAGE) 1)
		      (,(INTERN (STRING-APPEND "SHORT-" TYPE) PACKAGE) 2)
		      (,(INTERN (STRING-APPEND "DES-" TYPE) PACKAGE) 3)
		      (OTHERWISE 0))))
	`(LET ((,TYPE ,VALUE))
	   (COND ((NULL ,TYPE)
		  (SEND-WORDS 0 0))
		 (T (SEND-WORD (CASE (ARRAY-LEADER ,TYPE 1) ,@CASES))
		    (SEND-WORD (VECTOR-LENGTH ,TYPE))
		    (SEND-BYTE-VECTOR ,TYPE)))))
    `(SEND-WORDS 0 0)))

(DEFMACRO SEND-RPC-CALL-HEADER
	  (TRANSACTION-ID MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
	   &OPTIONAL CREDENTIAL VERIFIER)
  `(PROGN 
     (SEND-WORDS ,TRANSACTION-ID
		 0				;RPC-MESSAGE-TYPE
		 2				;RPC-VERSION
		 ,MODULE-NUMBER
		 ,MODULE-VERSION
		 ,ENTRY-NUMBER)
     (SEND-AUTHENTICATION CALL-CREDENTIAL ,CREDENTIAL)
     (SEND-AUTHENTICATION CALL-VERIFIER ,VERIFIER)))

(DEFMACRO RECEIVE-AUTHENTICATION (TYPE VALUE)
  (IF VALUE
      (LET* ((PACKAGE (SYMBOL-PACKAGE TYPE))
	     (CASES `((1 ',(INTERN (STRING-APPEND "UNIX-" TYPE) PACKAGE))
		      (2 ',(INTERN (STRING-APPEND "SHORT-" TYPE) PACKAGE))
		      (3 ',(INTERN (STRING-APPEND "DES-" TYPE) PACKAGE)))))
	`(LET* ((FLAVOR (RECEIVE-WORD))
		(SIZE (RECEIVE-WORD)))
	   (IF (OR (ZEROP FLAVOR) (> FLAVOR 3))
	       (PROGN (ADVANCE-XDR-POINTER (%FIXNUM-CEILING SIZE 4)) NIL)
	     ,(IF (MEMBER VALUE '(:STACK :HEAP))
		  `(LET ((,TYPE (,(IF (EQ VALUE :STACK) 'MAKE-STACK-ARRAY 'MAKE-ARRAY)
				 (* 4 (%FIXNUM-CEILING SIZE 4))
				 :ELEMENT-TYPE '(UNSIGNED-BYTE 8)
				 :LEADER-LENGTH 3
				 :FILL-POINTER SIZE
				 :NAMED-STRUCTURE-SYMBOL (CASE FLAVOR ,@CASES))))
		     (SETF (ARRAY-LEADER ,TYPE 2) XDR-AGENT)
		     (RECEIVE-BYTE-VECTOR ,TYPE 0 SIZE)
		     ,TYPE)
		`(LET ((,TYPE ,VALUE))
		   (IF (NULL ,TYPE)
		       (PROGN (ADVANCE-XDR-POINTER (%FIXNUM-CEILING SIZE 4)) NIL)
		     (PROGN
		       (SETF (FILL-POINTER ,TYPE) SIZE)
		       (SETF (ARRAY-LEADER ,TYPE 1) (CASE FLAVOR ,@CASES))
		       (SETF (ARRAY-LEADER ,TYPE 2) XDR-AGENT)
		       (RECEIVE-BYTE-VECTOR ,TYPE 0 SIZE)
		       ,TYPE)))))))
    `(PROGN (RECEIVE-WORD)
	    (ADVANCE-XDR-POINTER (%FIXNUM-CEILING (RECEIVE-WORD) 4))
	    NIL)))

(DEFMACRO RECEIVE-RPC-CALL-HEADER (&OPTIONAL CREDENTIAL VERIFIER)
  (DECLARE (VALUES TRANSACTION-ID MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
		   CREDENTIAL VERIFIER))
  `(VALUES (RECEIVE-WORD)			;TRANSACTION-ID
	   (PROGN (ADVANCE-XDR-POINTER 2)	;RPC-MESSAGE-TYPE, RPC-VERSION
		  (RECEIVE-WORD))		;MODULE-NUMBER
	   (RECEIVE-WORD)			;MODULE-VERSION
	   (RECEIVE-WORD)			;ENTRY-NUMBER
	   (RECEIVE-AUTHENTICATION CALL-CREDENTIAL ,CREDENTIAL)
	   (RECEIVE-AUTHENTICATION CALL-VERIFIER ,VERIFIER)))

(DEFMACRO RECEIVE-REST-OF-RPC-CALL-HEADER (&OPTIONAL CREDENTIAL VERIFIER)
  (DECLARE (VALUES MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER CREDENTIAL VERIFIER))
  `(VALUES (PROGN (RECEIVE-WORD)		;RPC-VERSION
		  (RECEIVE-WORD))		;MODULE-NUMBER
	   (RECEIVE-WORD)			;MODULE-VERSION
	   (RECEIVE-WORD)			;ENTRY-NUMBER
	   (RECEIVE-AUTHENTICATION CALL-CREDENTIAL ,CREDENTIAL)
	   (RECEIVE-AUTHENTICATION CALL-VERIFIER ,VERIFIER)))

;;; Define the data structure that precedes the values in a reply block
;;; Some of these fields are "really" unsigned, but for efficiency I'm ignoring that
(DEFINE-REMOTE-TYPE RPC-REPLY-HEADER ()
  (:ABBREVIATION-FOR `(STRUCTURE (TRANSACTION-ID INTEGER-32)
				 (RPC-MESSAGE-TYPE INTEGER-32)	;constant 1
				 (REPLY-STATUS (MEMBER ACCEPTED DENIED))
				 ;; Following fields assume REPLY-STATUS = ACCEPTED
				 (VERIFIER REPLY-VERIFIER)
				 (ACCEPT-STATUS (MEMBER SUCCESS MODULE-NOT-FOUND
							VERSION-MISMATCH ENTRY-NOT-FOUND
							GARBAGE-ARGUMENTS REMOTE-ERROR))
				 ;; Values follow if ACCEPT-STATUS = SUCCESS, otherwise
				 ;; the fields defined by RPC-ERROR-REPLY-HEADER
				 ;; follow unless we're talking to a non-Symbolics server
				 )))

(DEFMACRO RPC-REPLY-HEADER-LENGTH (&OPTIONAL VERIFIER &ENVIRONMENT ENV)
  `(+ 6
      ,@(AND VERIFIER
	     (NCONS (ONCE-ONLY (VERIFIER &ENVIRONMENT ENV)
		      `(IF (NULL ,VERIFIER)
			   0
			 (%FIXNUM-CEILING (VECTOR-LENGTH ,VERIFIER) 4)))))))

(DEFINE-REMOTE-TYPE RPC-ERROR-REPLY-HEADER ()
  (:ABBREVIATION-FOR
    `(STRUCTURE
       (TRANSACTION-ID INTEGER-32)
       (RPC-MESSAGE-TYPE INTEGER-32)		;constant 1
       (REPLY-STATUS (MEMBER ACCEPTED DENIED))
       ;; Following fields assume REPLY-STATUS = ACCEPTED
       (VERIFIER REPLY-VERIFIER)
       (ACCEPT-STATUS (MEMBER SUCCESS MODULE-NOT-FOUND VERSION-MISMATCH ENTRY-NOT-FOUND
			      GARBAGE-ARGUMENTS REMOTE-ERROR))
       ;; Additional fields if ACCEPT-STATUS  SUCCESS
       ;; Except for the first two these are Symbolics extensions
       (LOWEST-MODULE-VERSION INTEGER-32)	;lowest version available (if PROG_MISMATCH)
       (HIGHEST-MODULE-VERSION INTEGER-32)	;highest version available (if PROG_MISMATCH)
       (MODULE-NUMBER INTEGER-32)		;module that was called
       (MODULE-VERSION INTEGER-32)		;requested version
       (ENTRY-NUMBER INTEGER-32)		;entry that was called
       (ACTUAL-MODULE-VERSION INTEGER-32)	;actual version used
       (ERROR-CODE INTEGER-32)			;remote error number or system error code
       )))					;REMOTE_ERROR => error arguments follow

(DEFMACRO RPC-ERROR-REPLY-HEADER-LENGTH (&OPTIONAL VERIFIER &ENVIRONMENT ENV)
  `(+ 13
      ,@(AND VERIFIER
	     (NCONS (ONCE-ONLY (VERIFIER &ENVIRONMENT ENV)
		      `(IF (NULL ,VERIFIER)
			   0
			 (%FIXNUM-CEILING (VECTOR-LENGTH ,VERIFIER) 4)))))))

(DEFMACRO SEND-RPC-REPLY-HEADER (TRANSACTION-ID &OPTIONAL VERIFIER)
  `(PROGN
     (SEND-WORDS ,TRANSACTION-ID
		 1
		 0)				;ACCEPTED
     (SEND-AUTHENTICATION REPLY-VERIFIER ,VERIFIER)
     (SEND-WORD 0)))				;SUCCESS

(DEFMACRO SEND-RPC-ERROR-REPLY-HEADER
	  (TRANSACTION-ID ACCEPT-STATUS
	   LOWEST-MODULE-VERSION HIGHEST-MODULE-VERSION
	   MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
	   ACTUAL-MODULE-VERSION ERROR-CODE
	   &OPTIONAL VERIFIER)
  `(PROGN
     (SEND-WORDS ,TRANSACTION-ID
		 1
		 0)				;ACCEPTED
     (SEND-AUTHENTICATION REPLY-VERIFIER ,VERIFIER)
     (SEND-WORDS ,ACCEPT-STATUS			;should not equal SUCCESS
		 ,LOWEST-MODULE-VERSION
		 ,HIGHEST-MODULE-VERSION
		 ,MODULE-NUMBER
		 ,MODULE-VERSION
		 ,ENTRY-NUMBER
		 ,ACTUAL-MODULE-VERSION
		 ,ERROR-CODE)))

(DEFMACRO RECEIVE-RPC-REPLY-HEADER (&OPTIONAL VERIFIER)
  (DECLARE (VALUES TRANSACTION-ID REPLY-STATUS ACCEPT-STATUS VERIFIER))
  `(LET (REPLY-STATUS
	 (VERIFIER NIL))
     (VALUES (RECEIVE-WORD)			;TRANSACTION-ID
	     (PROGN (RECEIVE-WORD)		;RPC-MESSAGE-TYPE
		    (SETQ REPLY-STATUS (RECEIVE-WORD)))
	     (AND (= REPLY-STATUS 0)
		  (PROGN
		    (SETQ VERIFIER (RECEIVE-AUTHENTICATION REPLY-VERIFIER ,VERIFIER))	;VERIFICATION-FLAVOR & VERIFICATION-LENGTH
		    (RECEIVE-WORD)))	;ACCEPT-STATUS
	     (AND (= REPLY-STATUS 0) VERIFIER))))

;; Call this after calling RECEIVE-RPC-REPLY-HEADER, to get the rest,
;; after checking that XDR-POINTER hasn't reached XDR-LIMIT
(DEFMACRO RECEIVE-RPC-ERROR-REPLY-HEADER ()
  (DECLARE (VALUES LOWEST-MODULE-VERSION HIGHEST-MODULE-VERSION MODULE-NUMBER MODULE-VERSION
		   ENTRY-NUMBER ACTUAL-MODULE-VERSION ERROR-CODE))
  `(VALUES (RECEIVE-WORD)			;LOWEST-MODULE-VERSION
	   (RECEIVE-WORD)			;HIGHEST-MODULE-VERSION
	   (RECEIVE-WORD)			;MODULE-NUMBER
	   (RECEIVE-WORD)			;MODULE-VERSION
	   (RECEIVE-WORD)			;ENTRY-NUMBER
	   (RECEIVE-WORD)			;ACTUAL-MODULE-VERSION
	   (RECEIVE-WORD)))			;ERROR-CODE

(DEFINE-REMOTE-TYPE RPC-AUTH-ERROR-HEADER ()
  (:ABBREVIATION-FOR
    `(STRUCTURE
       (TRANSACTION-ID INTEGER-32)
       (RPC-MESSAGE-TYPE INTEGER-32)		;constant 1
       (REPLY-STATUS (MEMBER ACCEPTED DENIED))
       (REJECT-STAT INTEGER-32)			;auth-error = 1
       (AUTH-STAT INTEGER-32))))

(DEFMACRO RPC-AUTH-ERROR-HEADER-LENGTH ()
  (REMOTE-TYPE-FIXED-SIZE 'RPC-AUTH-ERROR-HEADER))

(DEFMACRO SEND-RPC-AUTH-ERROR-HEADER (TRANSACTION-ID AUTH-STAT)
  `(SEND-WORDS ,TRANSACTION-ID
	       1				;REPLY
	       1				;REJECTED
	       1				;AUTH-ERROR
	       ,AUTH-STAT))

(DEFUN PRINT-CALL-XDR-BLOCK (XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT STREAM)
  (LET (MODULE-NUMBER MODULE MODULE-VERSION ENTRY-NUMBER ENTRY)
    (LABELS ((PRINT-PREFIX (NAME)
	       (WRITE-CHAR #\SPACE STREAM)
	       (PRINC NAME STREAM)
	       (WRITE-CHAR #\= STREAM))
	     (PRINT-EXPLANATION (EXPLANATION)
	       (WRITE-CHAR #\( STREAM)
	       (PRINC EXPLANATION STREAM)
	       (WRITE-CHAR #\) STREAM)
	       EXPLANATION)
	     (PRINT-WORD (NAME)
	       (PRINT-PREFIX NAME)
	       (PRIN1 (RECEIVE-WORD) STREAM))
	     (FIND-ENTRY ()
	       (AND MODULE
		    (EQL (REMOTE-MODULE-VERSION MODULE) MODULE-VERSION)
		    (FIND ENTRY-NUMBER (REMOTE-MODULE-ENTRIES MODULE)
			  :KEY #'REMOTE-ENTRY-NUMBER))))
      (PRINT-WORD 'RPC-VERSION)
      (SETQ MODULE-NUMBER (PRINT-WORD 'MODULE-NUMBER))
      (SETQ MODULE (GETHASH MODULE-NUMBER *REMOTE-MODULE-TABLE*))
      (WHEN MODULE (PRINT-EXPLANATION (REMOTE-MODULE-NAME MODULE)))
      (SETQ MODULE-VERSION (PRINT-WORD 'MODULE-VERSION))
      (SETQ ENTRY-NUMBER (PRINT-WORD 'ENTRY-NUMBER))
      (SETQ ENTRY (FIND-ENTRY))
      (WHEN ENTRY (PRINT-EXPLANATION (REMOTE-ENTRY-NAME ENTRY)))
      (PRINT-PREFIX 'CREDENTIAL)
      (PRIN1 (MACROLET ((RECEIVE-CALL-CREDENTIAL ()
			  (REMOTE-TYPE-RECEIVE 'CALL-CREDENTIAL :LISP)))
	       (RECEIVE-CALL-CREDENTIAL))
	     STREAM)
      (PRINT-PREFIX 'VERIFIER)
      (PRIN1 (MACROLET ((RECEIVE-CALL-VERIFIER ()
			  (REMOTE-TYPE-RECEIVE 'CALL-VERIFIER :LISP)))
	       (RECEIVE-CALL-VERIFIER))
	     STREAM)
      (WHEN ENTRY
	(LOOP FOR (NAME TYPE) IN (REMOTE-ENTRY-ARGUMENTS ENTRY)
	      UNLESS (FIND NAME (REMOTE-ENTRY-VALUES ENTRY) :KEY #'FOURTH)
		DO (PRINT-PREFIX NAME)
		   (UPDATE-XDR-POINTER
		     (FUNCALL
		       `(LAMBDA (XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT STREAM)
			  (PRIN1 ,(REMOTE-TYPE-RECEIVE TYPE :LISP) STREAM)
			  #-IMACH XDR-POINTER)
		       XDR-AGENT #-IMACH XDR-POINTER
		       XDR-LIMIT STREAM))))))
  #-IMACH XDR-POINTER)

(DEFUN PRINT-REPLY-XDR-BLOCK (XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT STREAM
			      MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
			      &AUX MODULE ENTRY)
  (LABELS ((PRINT-PREFIX (NAME)
	     (WRITE-CHAR #\SPACE STREAM)
	     (PRINC NAME STREAM)
	     (WRITE-CHAR #\= STREAM))
	   (PRINT-EXPLANATION (EXPLANATION)
	     (WRITE-CHAR #\( STREAM)
	     (PRINC EXPLANATION STREAM)
	     (WRITE-CHAR #\) STREAM)
	     EXPLANATION)
	   (PRINT-WORD (NAME)
	     (PRINT-PREFIX NAME)
	     (PRIN1 (RECEIVE-WORD) STREAM))
	   (FIND-ENTRY ()
	     (AND MODULE
		  (EQL (REMOTE-MODULE-VERSION MODULE) MODULE-VERSION)
		  (FIND ENTRY-NUMBER (REMOTE-MODULE-ENTRIES MODULE)
			:KEY #'REMOTE-ENTRY-NUMBER))))
    (CASE (PRINT-WORD 'REPLY-STATUS)
      (0 (PRINT-EXPLANATION 'ACCEPTED)
	 (PRINT-PREFIX 'VERIFIER)
	 (PRIN1 (MACROLET ((RECEIVE-REPLY-VERIFIER ()
			     (REMOTE-TYPE-RECEIVE 'REPLY-VERIFIER :LISP)))
		  (RECEIVE-REPLY-VERIFIER))
		STREAM)
	 (CASE (PRINT-WORD 'ACCEPT-STAT)
	   (0 (PRINT-EXPLANATION 'SUCCESS)
	      (SETQ MODULE (GETHASH MODULE-NUMBER *REMOTE-MODULE-TABLE*))
	      (SETQ ENTRY (FIND-ENTRY))
	      (WHEN ENTRY
		(LOOP FOR (NAME TYPE) IN (REMOTE-ENTRY-VALUES ENTRY)
		      DO (PRINT-PREFIX NAME)
			 (UPDATE-XDR-POINTER
			   (FUNCALL
			     `(LAMBDA (XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT STREAM)
				(PRIN1 ,(REMOTE-TYPE-RECEIVE TYPE :LISP) STREAM)
				#-IMACH XDR-POINTER)
			     XDR-AGENT #-IMACH XDR-POINTER
			     XDR-LIMIT STREAM)))))
	   (1 (PRINT-EXPLANATION 'PROG-UNAVAIL))
	   (2 (PRINT-EXPLANATION 'PROG-MISMATCH)
	      (PRINT-WORD 'LOWEST-MODULE-VERSION)
	      (PRINT-WORD 'HIGHEST-MODULE-VERSION))
	   (3 (PRINT-EXPLANATION 'PROC-UNAVAIL))
	   (4 (PRINT-EXPLANATION 'GARBAGE-ARGS/REMOTE-OPERATING-SYSTEM-ERROR)
	      (UNLESS (ZEROP (%POINTER-DIFFERENCE XDR-LIMIT (READ-XDR-POINTER)))
		(PRINT-WORD 'LOWEST-MODULE-VERSION)
		(PRINT-WORD 'HIGHEST-MODULE-VERSION)
		(PRINT-WORD 'MODULE-NUMBER)
		(PRINT-WORD 'MODULE-VERSION)
		(PRINT-WORD 'ENTRY-NUMBER)
		(PRINT-WORD 'ACTUAL-MODULE-VERSION)
		(PRINT-WORD 'ERROR-CODE)))
	   (5 (PRINT-EXPLANATION 'REMOTE-ERROR)
	      (UNLESS (ZEROP (%POINTER-DIFFERENCE XDR-LIMIT (READ-XDR-POINTER)))
		(PRINT-WORD 'LOWEST-MODULE-VERSION)
		(PRINT-WORD 'HIGHEST-MODULE-VERSION)
		(PRINT-WORD 'MODULE-NUMBER)
		(PRINT-WORD 'MODULE-VERSION)
		(PRINT-WORD 'ENTRY-NUMBER)
		(PRINT-WORD 'ACTUAL-MODULE-VERSION)
		(PRINT-WORD 'ERROR-CODE)))))
      (1 (PRINT-EXPLANATION 'REJECTED)
	 (CASE (PRINT-WORD 'REJECT-STAT)
	   (0 (PRINT-EXPLANATION 'RPC-MISMATCH)
	      (PRINT-WORD 'LOWEST-RPC-VERSION)
	      (PRINT-WORD 'HIGHEST-RPC-VERSION))
	   (1 (PRINT-EXPLANATION 'AUTH-ERROR)
	      (PRINT-EXPLANATION
		(CASE (PRINT-WORD 'AUTH-STAT)
		  (1 'AUTH-BADCRED)
		  (2 'AUTH-REJECTEDCRED)
		  (3 'AUTH-BADVERF)
		  (4 'AUTH-REJECTEDVERF)
		  (5 'AUTH-TOOWEAK))))))))
  #-IMACH XDR-POINTER)

(DEFUN PRINT-XDR-BLOCK
       (XDR-BLOCK XDR-AGENT STREAM &OPTIONAL MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER
	&AUX (*PRINT-PRETTY* NIL)
	(XDR-POINTER (XDR-BLOCK-DATA-POINTER XDR-AGENT XDR-BLOCK))
	(XDR-LIMIT (%POINTER-PLUS XDR-POINTER (XDR-BLOCK-DATA-SIZE XDR-AGENT XDR-BLOCK))))
  (UNLESS (EQ XDR-POINTER XDR-LIMIT)
    (LABELS ((PRINT-PREFIX (NAME)
	       (WRITE-CHAR #\SPACE STREAM)
	       (PRINC NAME STREAM)
	       (WRITE-CHAR #\= STREAM))
	     (PRINT-EXPLANATION (EXPLANATION)
	       (WRITE-CHAR #\( STREAM)
	       (PRINC EXPLANATION STREAM)
	       (WRITE-CHAR #\) STREAM)
	       EXPLANATION)
	     (PRINT-WORD (NAME)
	       (PRINT-PREFIX NAME)
	       (PRIN1 (RECEIVE-WORD) STREAM)))
      (WITH-DATA-STACK
	(XDR-REGISTER-SAVE
	  (INITIALIZE-XDR-POINTER)
	  (CONDITION-CASE (ERROR)
	       (PROGN
		 (PRINC 'TRANSACTION-ID STREAM)
		 (WRITE-CHAR #\= STREAM)
		 (PRIN1 (RECEIVE-WORD) STREAM)
		 (CASE (PRINT-WORD 'RPC-MESSAGE-TYPE)
		   (0 (PRINT-EXPLANATION 'CALL)
		      (UPDATE-XDR-POINTER
			(PRINT-CALL-XDR-BLOCK
			  XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT STREAM)))
		   (1 (PRINT-EXPLANATION 'REPLY)
		      (UPDATE-XDR-POINTER
			(PRINT-REPLY-XDR-BLOCK
			  XDR-AGENT #-IMACH XDR-POINTER XDR-LIMIT STREAM
			  MODULE-NUMBER MODULE-VERSION ENTRY-NUMBER)))))
	     (ERROR
	       (WRITE-CHAR #\! STREAM)
	       (PRIN1 (TYPE-OF ERROR) STREAM)))
	  (LET ((REMAINING (%POINTER-DIFFERENCE XDR-LIMIT (READ-XDR-POINTER))))
	    (UNLESS (ZEROP REMAINING)
	      (FORMAT STREAM " ~A=~D" 'WORDS-REMAINING REMAINING)))))))
  XDR-BLOCK)
