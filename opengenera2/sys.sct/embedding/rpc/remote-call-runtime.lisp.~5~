;;; -*- Mode: LISP; Syntax: Lisp+C; Base: 10; Package: RPC -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Runtime variables

(DEFVAR *DEFAULT-TRANSPORT-AGENT*)	;Whom to call

(DEFVAR *ALL-TRANSPORT-AGENTS* NIL)	;A list of all of them

(DEFVAR *OLD-TRANSPORT-AGENTS*)		;List of ones waiting to be shut down

(DEFVAR *NEXT-TRANSACTION-ID* 0)	;Unique integer generator

;;; Runtime expansion aids for RPC calls

(DEFUN XDR-POINTER-ERROR (XDR-POINTER XDR-LIMIT SEND)
  (DECLARE (DBG:ERROR-REPORTER))
  #+3600 (SETQ XDR-POINTER (%MAKE-POINTER-OFFSET DTP-LOCATIVE XDR-POINTER 1))
  (LET ((FROM (IF SEND "Lisp representation" "External Data Representation"))
	(TO (IF SEND "External Data Representation" "Lisp representation")))
    (ERROR "INTERNAL ERROR: Translation from ~A to ~A~%~A."
	   FROM TO (IF (%POINTER-LESSP XDR-POINTER XDR-LIMIT)
		       "failed to process the entire block of data"
		       "attempted to access past the end of the block"))))

(DEFUN XDR-POINTER-ERROR-1 (SEND)
  (DECLARE (DBG:ERROR-REPORTER))
  (LET ((FROM (IF SEND "Lisp representation" "External Data Representation"))
	(TO (IF SEND "External Data Representation" "Lisp representation")))
    (ERROR "INTERNAL ERROR: Translation from ~A to ~A~@
	    attempted to access past the end of the block"
	   FROM TO)))

;;; The call layer of RPC

;--- Should I put in some sort of prefixing kludge to help with C name conflicts?
;--- e.g. among enumeration tags; could be prefixed by parent variable name


(DEFVAR *ALL-REMOTE-MODULES* NIL)	;List of REMOTE-MODULE objects
(DEFVAR *ALL-GLOBAL-REMOTE-ERRORS* NIL)	;List of REMOTE-ERROR objects

(DEFVAR *REMOTE-MODULE-TABLE* (MAKE-HASH-TABLE))  ;Associate from module number to module

;;; One element cache to speed up FIND-SERVER
(DEFVAR *CACHED-REMOTE-MODULE-NUMBER* NIL)
(DEFVAR *CACHED-REMOTE-MODULE*)

(DEFFLAVOR REMOTE-MODULE
	   (NAME			;Symbol that names the module
	    VARIABLE			;Special variable so stubs can find instance quickly
	    NUMBER			;Identifying number for this remote module
	    VERSION			;Version of this module
	    (SERVER-LANGUAGES NIL)	;List of :LISP, :C etc.
	    (CLIENT-LANGUAGES NIL)	;..
	    (ENTRIES NIL)		;List of REMOTE-ENTRY objects
	    (ERRORS NIL)		;List of REMOTE-ERROR objects
	    (TRANSPORT-AGENT NIL)	;Transport agent, or NIL to use the default
	    (HANDLER-TABLE NIL)		;Array of remote call handler functions
	    PROCESS			;non-NIL => server runs in own process, value=options
					;NIL => in dispatcher process
	    (AUTHENTICATION NIL)	;Types of authentication allowed
	    (ALLOW-UNTRUSTED-ACCESS NIL))	;Allow service to untrusted hosts
	   ()
  :INITABLE-INSTANCE-VARIABLES
  :READABLE-INSTANCE-VARIABLES
  (:WRITABLE-INSTANCE-VARIABLES ENTRIES ERRORS TRANSPORT-AGENT PROCESS)
  (:LOCATABLE-INSTANCE-VARIABLES TRANSPORT-AGENT))

(DEFFLAVOR REMOTE-ENTRY
	   (NAME			;Symbol that names the entry
	    MODULE			;REMOTE-MODULE object that this belongs to
	    NUMBER			;Identifying number for this remote entry
	    ARGUMENTS			;((name type)...)
	    (VALUES NIL)		;((name type)...)
	    (SERVERS NIL)		;((language body [cleanup])...)
	    (ASYNCHRONOUS NIL)		;T if calls don't expect a reply
	    (LISP-OPTIONS NIL)		;An option plist
	    (C-OPTIONS NIL)		;An option plist
	    (AUTHENTICATION NIL)	;Types of authentication allowed
	    (WHOSTATE NIL))		;Wait whostate
	   ()
  :INITABLE-INSTANCE-VARIABLES
  :READABLE-INSTANCE-VARIABLES)

(DEFFLAVOR REMOTE-ERROR
	   (NAME		;Symbol that names the error
	    MODULE		;REMOTE-MODULE object that this belongs to, or NIL if global
	    NUMBER		;Identifying number for this remote error
	    ARGUMENTS		;((name type)...)
	    CONDITION		;Lisp condition to signal
	    REPORT-FUNCTION)	;Function to read the arguments and signal the condition
	   ()
  :INITABLE-INSTANCE-VARIABLES
  :READABLE-INSTANCE-VARIABLES)

;;; Everything else is a method on the agent
(DEFMETHOD (INITIATE-CALL REMOTE-MODULE)
	   (ENTRY-NUMBER ARGUMENT-SIZE &OPTIONAL ENTRY-TRANSPORT-AGENT
			 FOR-FUTURE DONT-STACK-ALLOCATE)
  (DECLARE (VALUES AGENT XDR-BLOCK XDR-POINTER XDR-LIMIT))
  ;; Find the transport agent and have it do the work
  (XDR-INITIATE-CALL (OR ENTRY-TRANSPORT-AGENT TRANSPORT-AGENT *DEFAULT-TRANSPORT-AGENT*)
		     NUMBER VERSION ENTRY-NUMBER ARGUMENT-SIZE
		     NIL NIL FOR-FUTURE DONT-STACK-ALLOCATE))


;;; If ERROR-P is CREATE-IN-ENV, copy it into the compiler environment
;;; picking up any entries and errors already known in the run-time environment
(DEFUN FIND-REMOTE-MODULE (NAME &OPTIONAL (ERROR-P T) (COMPILE-TIME NIL))
  (CHECK-TYPE NAME SYMBOL)
  (CHECK-TYPE ERROR-P (MEMBER T NIL CREATE-IN-ENV))
  (UNLESS UNDO-DECLARATIONS-FLAG (SETQ COMPILE-TIME NIL))
  (OR (AND COMPILE-TIME (COMPILER:FILE-DECLARATION NAME 'REMOTE-MODULE))
      (AND COMPILE-TIME (EQ ERROR-P 'CREATE-IN-ENV)
	   (LET ((MODULE (GET NAME 'REMOTE-MODULE)))
	     (WHEN MODULE
	       (SETQ MODULE (COPY-REMOTE-MODULE MODULE))
	       (COMPILER:FILE-DECLARE NAME 'REMOTE-MODULE MODULE)
	       MODULE)))
      (GET NAME 'REMOTE-MODULE)
      (AND ERROR-P (ERROR "~S has not been defined as the name of a Remote Module." NAME))))

(DEFUN FIND-REMOTE-ENTRY (MODULE NAME &OPTIONAL (ERROR-P T))
  (CHECK-TYPE NAME SYMBOL)
  (CHECK-TYPE ERROR-P (MEMBER T NIL))
  (OR (LOOP FOR ENTRY IN (REMOTE-MODULE-ENTRIES MODULE)
	    DO (WHEN (EQ (REMOTE-ENTRY-NAME ENTRY) NAME)
		 (RETURN ENTRY)))
      (AND ERROR-P
	   (ERROR "~S has not been defined as the name of a Remote Entry in Remote Module ~S."
		  NAME (REMOTE-MODULE-NAME MODULE)))))

(DEFUN FIND-REMOTE-ERROR (MODULE NAME &OPTIONAL (ERROR-P T) (COMPILE-TIME NIL))
  (CHECK-TYPE NAME SYMBOL)
  (CHECK-TYPE ERROR-P (MEMBER T NIL))
  (OR (LOOP FOR ERROR IN (REMOTE-MODULE-ERRORS MODULE)	;Look for a local error first
	    DO (WHEN (EQ (REMOTE-ERROR-NAME ERROR) NAME)
		 (RETURN ERROR)))
      (IF COMPILE-TIME (GETDECL NAME 'REMOTE-ERROR) (GET NAME 'REMOTE-ERROR))	;then a global
      (FIND NAME *ALL-GLOBAL-REMOTE-ERRORS* :KEY #'REMOTE-ERROR-NAME)
      (AND ERROR-P
	   (ERROR "~S has not been defined as the name of a Remote Error in Remote Module ~S."
		  NAME (REMOTE-MODULE-NAME MODULE)))))

;; I assume this isn't called often enough to justify speeding up the search
(DEFUN FIND-REMOTE-ERROR-BY-NUMBER (MODULE ERROR-NUMBER &OPTIONAL (ERROR-P T))
  (OR (AND MODULE (FIND ERROR-NUMBER (REMOTE-MODULE-ERRORS MODULE) :KEY #'REMOTE-ERROR-NUMBER))
      (FIND ERROR-NUMBER *ALL-GLOBAL-REMOTE-ERRORS* :KEY #'REMOTE-ERROR-NUMBER)
      (AND ERROR-P (ERROR "Cannot find remote error number ~D" ERROR-NUMBER))))

(DEFMETHOD (COPY-REMOTE-MODULE REMOTE-MODULE) ()
  (MAKE-INSTANCE 'REMOTE-MODULE :NAME NAME
				:VARIABLE VARIABLE
				:NUMBER NUMBER
				:VERSION VERSION
				:SERVER-LANGUAGES SERVER-LANGUAGES
				:CLIENT-LANGUAGES CLIENT-LANGUAGES
				:ENTRIES (COPY-LIST ENTRIES)
				:ERRORS (COPY-LIST ERRORS)))

(DEFMETHOD (UPDATE-REMOTE-MODULE REMOTE-MODULE) (OLD)
  (SETQ ENTRIES (APPEND (REMOTE-MODULE-ENTRIES OLD) ENTRIES)
	ERRORS (APPEND (REMOTE-MODULE-ERRORS OLD) ERRORS))
  (UNLESS HANDLER-TABLE
    (SETQ HANDLER-TABLE (REMOTE-MODULE-HANDLER-TABLE OLD))))

(DEFUN ADD-REMOTE-MODULE (NAME COMPILE-TIME &REST INITARGS)
  (LET ((MODULE (APPLY #'MAKE-INSTANCE 'REMOTE-MODULE INITARGS)))
    (UNLESS UNDO-DECLARATIONS-FLAG (SETQ COMPILE-TIME NIL))
    (COND (COMPILE-TIME
	   (SETF (GETDECL NAME 'REMOTE-MODULE) MODULE))
	  ((RECORD-SOURCE-FILE-NAME NAME 'DEFINE-REMOTE-MODULE)
	   (LET ((OLD (FIND-REMOTE-MODULE NAME NIL)))
	     (WHEN OLD
	       (UPDATE-REMOTE-MODULE MODULE OLD)))
	   (LET ((OLD (GETHASH (REMOTE-MODULE-NUMBER MODULE) *REMOTE-MODULE-TABLE*)))
	     (WHEN (AND OLD (NEQ (REMOTE-MODULE-NAME OLD) NAME))
	       (WARN "Remote modules ~S and ~S have both been given number ~D (#x~Q)."
		     (REMOTE-MODULE-NAME OLD) NAME (REMOTE-MODULE-NUMBER MODULE)
		     (LAMBDA ()
		       (LET ((*PRINT-BASE* 16) (*PRINT-RADIX* NIL))
			 (PRIN1 (REMOTE-MODULE-NUMBER MODULE)))))))
	   (PUSHNEW MODULE *ALL-REMOTE-MODULES*
		    :KEY #'REMOTE-MODULE-NAME :REPLACE T :LOCALIZE T)
	   (SETQ *CACHED-REMOTE-MODULE-NUMBER* NIL)
	   (SETF (GETHASH (REMOTE-MODULE-NUMBER MODULE) *REMOTE-MODULE-TABLE*) MODULE)
	   (SETF (GET NAME 'REMOTE-MODULE) MODULE)))))

(DEFUN ADD-REMOTE-ENTRY (NAME MODULE-NAME COMPILE-TIME &REST INITARGS)
  (UNLESS UNDO-DECLARATIONS-FLAG (SETQ COMPILE-TIME NIL))
  (LET* ((MODULE (FIND-REMOTE-MODULE MODULE-NAME 'CREATE-IN-ENV COMPILE-TIME))
	 (ENTRY (APPLY #'MAKE-INSTANCE 'REMOTE-ENTRY :MODULE MODULE INITARGS)))
    (WHEN (OR COMPILE-TIME (RECORD-SOURCE-FILE-NAME NAME 'DEFINE-REMOTE-ENTRY))
      ;; The delivery world removes the remote entries and changes the remote-module-entries
      ;; i.v. to the symbol 'REMOVE-FOREIGN-MODULES. Don't both to add the entry to 
      ;; the delivery foreign modules in the delivery world.
      (WHEN (LISTP (REMOTE-MODULE-ENTRIES MODULE))
	(LET ((OLD (FIND (REMOTE-ENTRY-NUMBER ENTRY) (REMOTE-MODULE-ENTRIES MODULE)
			 :KEY #'REMOTE-ENTRY-NUMBER)))
	  (WHEN (AND OLD (NEQ (REMOTE-ENTRY-NAME OLD) NAME))
	    (WARN "Remote entries ~S and ~S~@
		 of remote module ~S have both been given number ~D."
		  (REMOTE-ENTRY-NAME OLD) NAME MODULE-NAME (REMOTE-ENTRY-NUMBER ENTRY))))
	(PUSHNEW ENTRY (REMOTE-MODULE-ENTRIES MODULE)
		 :KEY #'REMOTE-ENTRY-NAME :REPLACE T :LOCALIZE T))
      ENTRY)))

(DEFUN ADD-REMOTE-ERROR (NAME MODULE-NAME COMPILE-TIME &REST INITARGS)
  (UNLESS UNDO-DECLARATIONS-FLAG (SETQ COMPILE-TIME NIL))
  (LET* ((MODULE (AND MODULE-NAME
		      (FIND-REMOTE-MODULE MODULE-NAME 'CREATE-IN-ENV COMPILE-TIME)))
	 (ERROR (APPLY #'MAKE-INSTANCE 'REMOTE-ERROR :MODULE MODULE INITARGS)))
    (WHEN (OR COMPILE-TIME (RECORD-SOURCE-FILE-NAME NAME 'DEFINE-REMOTE-ERROR))
      (LET ((OLD (FIND (REMOTE-ERROR-NUMBER ERROR)
		       (IF MODULE (REMOTE-MODULE-ERRORS MODULE) *ALL-GLOBAL-REMOTE-ERRORS*)
		       :KEY #'REMOTE-ERROR-NUMBER)))
	(WHEN (AND OLD (NEQ (REMOTE-ERROR-NAME OLD) NAME))
	  (WARN "Remote errors ~S and ~S~@
		 ~@[of remote module ~S ~]have both been given number ~D."
		(REMOTE-ERROR-NAME OLD) NAME MODULE-NAME (REMOTE-ERROR-NUMBER ERROR))))
      (IF MODULE
	  (PUSHNEW ERROR (REMOTE-MODULE-ERRORS MODULE)
		   :KEY #'REMOTE-ERROR-NAME :REPLACE T :LOCALIZE T)
	  (PUSHNEW ERROR *ALL-GLOBAL-REMOTE-ERRORS*
		   :KEY #'REMOTE-ERROR-NAME :REPLACE T :LOCALIZE T))
      T)))

(DEFMETHOD (ADD-HANDLER REMOTE-MODULE) (ENTRY-NUMBER FUNCTION)
  (COND ((NULL HANDLER-TABLE)
	 (SETQ HANDLER-TABLE (MAKE-ARRAY (MAX (1+ ENTRY-NUMBER) 20))))
	(( ENTRY-NUMBER (ARRAY-TOTAL-SIZE HANDLER-TABLE))
	 (SETQ HANDLER-TABLE (SYS:ADJUST-ARRAY-SIZE HANDLER-TABLE
						    (MAX (1+ ENTRY-NUMBER)
							 (+ (ARRAY-TOTAL-SIZE HANDLER-TABLE)
							    20))))))
  (SETF (AREF HANDLER-TABLE ENTRY-NUMBER) FUNCTION))

;;; Returns NIL or the function (symbol)
(DEFMETHOD (FIND-HANDLER REMOTE-MODULE) (ENTRY-NUMBER)
  (AND HANDLER-TABLE
       (< ENTRY-NUMBER (ARRAY-TOTAL-SIZE HANDLER-TABLE))
       (AREF HANDLER-TABLE ENTRY-NUMBER)))

(COMPILE-FLAVOR-METHODS REMOTE-MODULE REMOTE-ENTRY REMOTE-ERROR)

(SI:DEFINE-GC-OPTIMIZATION REMOVE-FOREIGN-MODULES SI:SYMBOLICS-SYSTEM-RELEASE
  (:ORDER (:BEFORE SI:GC-SYMBOLS))
  (:DOCUMENTATION "Remove module data if enabled by the :MACIVORY-DELIVERY option.")
  (:BEFORE-FLIP (IGNORE)
   (WHEN (SI:IMMEDIATE-GC-OPTION :MACIVORY-DELIVERY)
     ;; The module objects are needed by the server to find handlers
     ;; (from their number), and by the client for initiating the call
     ;; (from their special variable).
     ;; The entries are not needed, since the handler and client
     ;; functions have already been compiled.
     ;; The errors are needed for clients to get
     ;; find-remote-error-by-number and then
     ;; remote-error-report-function.  This would not be true if there
     ;; were a direct table of the report functions, as there is for the
     ;; handlers.
     (DOLIST (MODULE *ALL-REMOTE-MODULES*)
       (SETF (REMOTE-MODULE-ENTRIES MODULE) 'REMOVE-FOREIGN-MODULES)
       (UNLESS (MEMBER :LISP (REMOTE-MODULE-CLIENT-LANGUAGES MODULE))
	 (SETF (REMOTE-MODULE-ERRORS MODULE) 'REMOVE-FOREIGN-MODULES))))))
