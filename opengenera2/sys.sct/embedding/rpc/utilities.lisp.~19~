;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: RPC -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains miscellaneous utilities for the RPC system

(DEFMACRO PARSE-MACRO-OPTIONS (NAME INPUT ONE-ARG-OPTIONS-ALLOWED MULTI-ARG-OPTIONS-ALLOWED
			       &BODY BODY)
  (LET* ((OPTIONS-ALLOWED (APPEND ONE-ARG-OPTIONS-ALLOWED MULTI-ARG-OPTIONS-ALLOWED))
	 (VARIABLES (LOOP FOR OPTION IN OPTIONS-ALLOWED
			  COLLECT (IF (ATOM OPTION) OPTION (FIRST OPTION))))
	 (DEFAULTS (LOOP FOR OPTION IN OPTIONS-ALLOWED
			 COLLECT (IF (ATOM OPTION) NIL (SECOND OPTION))))
	 (KEYWORDS (LOOP FOR OPTION IN OPTIONS-ALLOWED
			 AND VAR IN VARIABLES
			 COLLECT (IF (AND (NOT (ATOM OPTION)) (CDDR OPTION))
				     (THIRD OPTION)
				     (INTERN (STRING VAR) PKG-KEYWORD-PACKAGE)))))
    `(LET ,(LOOP FOR VAR IN VARIABLES AND VAL IN DEFAULTS
		 COLLECT `(,VAR ,VAL))
       (LOOP FOR .OPTION. IN ,INPUT
	     AS .OPT. = (IF (ATOM .OPTION.) .OPTION. (FIRST .OPTION.))
	     AS .ARGS. = (AND (CONSP .OPTION.) (REST .OPTION.))
	     WITH .DUP. = NIL DO
	 (COND ,@(LOOP FOR VAR IN VARIABLES AND KWD IN KEYWORDS
		       FOR INDEX DOWNFROM (LENGTH ONE-ARG-OPTIONS-ALLOWED)
		       AS ONE-ARG = (PLUSP INDEX)
		       COLLECT `((EQ .OPT. ',KWD)
				 ,@(WHEN ONE-ARG
				     `((UNLESS (AND .ARGS. (NULL (CDR .ARGS.)))
					 (WARN "The option ~S for ~A requires ~
						exactly one argument."
					       .OPT. ',NAME))))
				 (SETQ ,VAR ,(IF ONE-ARG `(FIRST .ARGS.) `.ARGS.))))
	       (T (WARN "~S is not a valid option for ~A;~@
			  Valid options are ~{~S~^, ~}."
			 .OPT. ',NAME ',KEYWORDS)))
	 (WHEN (MEMBER .OPT. .DUP.)
	   (WARN "The option ~S appears more than once in ~A" .OPT. ',NAME))
	 (PUSH .OPT. .DUP.))
       ,@BODY)))

(DEFVAR *KNOWN-LANGUAGES* '(:LISP :C))

;;; Name of a C variable or function corresponding to a Lisp variable or function
(DEFUN LISP-NAME-TO-C-NAME (SYMBOL)
  (LET* ((INPUT (STRING SYMBOL))
	 (OUTPUT (MAKE-STRING (LENGTH INPUT))))
    (LOOP FOR CHAR BEING THE ARRAY-ELEMENTS OF INPUT USING (INDEX I) DO
      (SETF (AREF OUTPUT I)
	    (COND ((ALPHA-CHAR-P CHAR) (CHAR-DOWNCASE CHAR))
		  ((DIGIT-CHAR-P CHAR) CHAR)
		  ((EQL CHAR #\-) #\_)
		  ((EQL CHAR #\_) #\_)
		  (T (ERROR "~C is not a valid character in a C identifier: ~A"
			    CHAR INPUT)))))
    (INTERN OUTPUT *RPC-PACKAGE*)))

(DEFUN C-NAME-TO-LISP-NAME (TOKEN-LIST)
  (UNLESS (= (LENGTH TOKEN-LIST) 1)
    (ERROR "~Q is not a single token"
	   (LAMBDA () (WRITE-C-TOKEN-LIST-1 TOKEN-LIST *STANDARD-OUTPUT* 6))))
  (LET* ((INPUT (STRING (FIRST TOKEN-LIST)))
	 (OUTPUT (MAKE-STRING (LENGTH INPUT))))
    (LOOP FOR CHAR BEING THE ARRAY-ELEMENTS OF INPUT USING (INDEX I) DO
      (SETF (AREF OUTPUT I)
	    (COND ((ALPHA-CHAR-P CHAR) (CHAR-UPCASE CHAR))
		  ((DIGIT-CHAR-P CHAR) CHAR)
		  ((EQL CHAR #\_) #\-)
		  (T (ERROR "~C is not a valid character when translating a C identifier ~
			     to a Lisp symbol: ~A"
			    CHAR INPUT)))))
    (INTERN OUTPUT *PACKAGE*)))

(DEFUN PARENTHESIZE-C-EXPRESSION (TOKEN-LIST)
  (IF (CDR TOKEN-LIST)
      `( |(| ,@TOKEN-LIST |)| )
      TOKEN-LIST))

(DEFUN C-SUBSTITUTE (NEW OLD TOKEN-LIST)
  (CHECK-TYPE NEW LIST)
  (CHECK-TYPE OLD LIST)
  (CHECK-TYPE TOKEN-LIST LIST)
  (UNLESS (= (LENGTH OLD) 1)
    (ERROR "Substitution for an expression with more than one token in it not implemented"))
  (SETQ OLD (FIRST OLD))
  (LOOP FOR TOKEN IN TOKEN-LIST
	IF (EQUAL TOKEN OLD)
	  APPEND NEW
	ELSE COLLECT TOKEN))

(DEFUN C-MACROLET (EXPANDER-ALIST TOKEN-LIST &OPTIONAL RECURSIVE)
  (CHECK-TYPE TOKEN-LIST LIST)
  (LET ((FOUND NIL))
    (PROG1 (LOOP FOR L = TOKEN-LIST THEN (CDR L) UNTIL (NULL L)
		 AS (TOKEN NEXT) = L
		 AS EXPANDER = (SECOND (ASSOC TOKEN EXPANDER-ALIST))
		 IF (AND EXPANDER (EQ NEXT '|(|))
		   APPEND (MULTIPLE-VALUE-BIND (ARGS CLOSE-PARENTHESIS)
			      (COLLECT-C-MACRO-ARGS TOKEN (CDDR L))
			    (SETQ L CLOSE-PARENTHESIS)
			    (PUSHNEW TOKEN FOUND)
			    (C-MACROLET EXPANDER-ALIST (APPLY EXPANDER ARGS) T))
		 ELSE COLLECT TOKEN)
	   (UNLESS RECURSIVE
	     (LOOP FOR (NAME NIL MANDATORY) IN EXPANDER-ALIST DO
	       (WHEN MANDATORY
		 (UNLESS (MEMBER NAME FOUND)
		   (WARN "The body fails to call ~A" NAME))))))))

(DEFUN COLLECT-C-MACRO-ARGS (NAME L)		;returns a list of token lists and advanced L
  (VALUES (LOOP UNTIL (EQ (CAR L) '|)|)
		COLLECT (LOOP AS ITEM = (CAR L) WITH LEVEL = 0
			      WITH TOKENS = NIL DO
			  (COND ((NULL L)
				 (WARN "Unbalanced parentheses in C macro call of ~A" NAME)
				 (SETQ L '(|)|))
				 (RETURN (NREVERSE TOKENS)))
				((AND (EQ ITEM '|,|) (ZEROP LEVEL))
				 (POP L)
				 (RETURN (NREVERSE TOKENS)))
				((AND (EQ ITEM '|)|) (ZEROP LEVEL))
				 (RETURN (NREVERSE TOKENS)))
				((EQ ITEM '|)|)
				 (DECF LEVEL)
				 (PUSH ITEM TOKENS))
				((EQ ITEM '|(|)
				 (INCF LEVEL)
				 (PUSH ITEM TOKENS))
				(T (PUSH ITEM TOKENS)))
			  (POP L)))
	  L))

(DEFUN LISP-MACROLET (EXPANDER-ALIST FORM)
  (LET ((FOUND NIL))
    (PROG1 (LT:COPYFORMS (LAMBDA (SUBFORM KIND USAGE &AUX TEM)
			   (IGNORE USAGE)
			   (COND ((AND (LISTP KIND)
				       (LISTP SUBFORM)
				       (SETQ TEM (ASSOC (CAR SUBFORM) EXPANDER-ALIST)))
				  (PUSHNEW (CAR SUBFORM) FOUND)
				  (FUNCALL (SECOND TEM) SUBFORM))
				 (T
				  SUBFORM)))
			 FORM)
	   (LOOP FOR (NAME NIL MANDATORY) IN EXPANDER-ALIST DO
	     (WHEN MANDATORY
	       (UNLESS (MEMBER NAME FOUND)
		 (WARN "The body fails to call ~S" NAME)))))))

(DEFUN LISP-SUBSTITUTE (NEW-SUBFORMS OLD-SUBFORMS FORM)
  (LT:COPYFORMS (LAMBDA (SUBFORM KIND USAGE &AUX TEM)
		  (IGNORE USAGE)
		  (IF (AND (OR (LISTP KIND) (EQ KIND 'LT:QUOTE) (EQ KIND 'LT:SYMEVAL))
			   (SETQ TEM (POSITION SUBFORM OLD-SUBFORMS :TEST #'EQUAL)))
		      (NTH TEM NEW-SUBFORMS)
		      SUBFORM))
		FORM))

;;; Support for declaring temporary variables in C

;;; Alist keyed by NAME-SEED, values are lists of lists of name and type.
(DEFVAR *C-DECLARATIONS*)

;;; Alist keyed by typedef name, value is type
(DEFVAR *C-TYPEDEFS*)

;;; Declare a temporary variable and return its name as a token list
;;; name-seed is a Lisp symbol, the generated name is seed_tem_n where n is a number
;;; type is a token list for the variable's type
;;; This function does not work for arrays or procedures
(DEFUN DECLARE-C-VARIABLE (NAME-SEED TYPE)
  (LET ((ELEM (ASSOC NAME-SEED *C-DECLARATIONS*)))
    (UNLESS ELEM
      (PUSH (SETQ ELEM (NCONS NAME-SEED)) *C-DECLARATIONS*))
    (LET ((VARIABLE (LISP-NAME-TO-C-NAME (FORMAT NIL "~A_tem_~D" NAME-SEED (LENGTH ELEM)))))
      (NCONC ELEM (NCONS (LIST VARIABLE TYPE)))
      (LIST VARIABLE))))

;;; Declare a typedef, name is a Lisp symbol, type is a token list
(DEFUN DECLARE-C-TYPE (NAME TYPE)
  (LET ((ELEM (ASSOC NAME *C-TYPEDEFS*)))
    (COND ((NULL ELEM) (PUSH (LIST NAME TYPE) *C-TYPEDEFS*))
	  ((EQUAL (SECOND ELEM) TYPE))
	  (T (FLET ((WCTL (CTL) (WRITE-C-TOKEN-LIST CTL *STANDARD-OUTPUT*)))
	       (WARN "C typedef ~S is being defined as both~%~vQ and~%~vQ"
		     NAME TYPE #'WCTL (SECOND ELEM) #'WCTL)))))
  (LIST (LISP-NAME-TO-C-NAME NAME)))

(DEFUN COLLECT-C-DECLARATIONS ()
  ;; First put in the typedefs
  (NCONC
    (LOOP FOR (NAME TYPE) IN (REVERSE *C-TYPEDEFS*)
	  APPEND `(|typedef| ,@TYPE ,(LISP-NAME-TO-C-NAME NAME) |;|))
    ;; Next find all unique types
    (LET ((TYPES NIL))
      (LOOP FOR (NIL . DCLS) IN *C-DECLARATIONS* DO
	(LOOP FOR (NIL TYPE) IN DCLS DO
	  (PUSHNEW TYPE TYPES :TEST #'EQUAL)))
      ;; Then collect the variables of each type
      (LOOP FOR TYPE IN TYPES
	    AS COMMA = NIL
	    AS STAR = (EQ (CAR (LAST TYPE)) '*)
	    APPEND (IF STAR (BUTLAST TYPE) TYPE)
	    APPEND (LOOP FOR (NIL . DCLS) IN *C-DECLARATIONS* APPEND
		     (LOOP FOR (VARIABLE VARIABLE-TYPE) IN DCLS APPEND
		       (WHEN (EQUAL VARIABLE-TYPE TYPE)
			 (PROG1 (APPEND (AND COMMA '(\,)) (AND STAR '(*)) (LIST VARIABLE))
				(SETQ COMMA T)))))
	    COLLECT '\;))))
