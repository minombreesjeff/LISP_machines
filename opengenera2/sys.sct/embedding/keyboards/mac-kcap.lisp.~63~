;;; -*- Mode: LISP; Syntax: Common-lisp; Package: MACINTOSH-INTERNALS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Macintosh keyboard stuff

;;; How the Macintosh keyboard works:
;;; The relevant resources are KCAP, KMAP, and KCHR.

;;; KCAP describes the physical layout and is used by the Key Caps desk accessory.
;;; The format is documented in MACDTS correspondence 9104683, except that they
;;; don't specify what happens when there is more than one shape rectangle, and they
;;; claim that the length field is one less than the exclusive length, when it equal.
;;; The KCAP must be in the Keyboard Layout file in the System folder and the resource id
;;; is the same as the device handler ID of the ADB keyboard.

;;; KMAP is described in TN#160.  Each hardware key code is indexed in the table to
;;; return a virtual key code.  The KMAP resource must be in the system file, and the
;;; resource id is the same as the device handler ID of the ADB keyboard.
;;; The virtual key codes are given in IM V Ch10, except that the description of the arrow
;;; keys is reversed and there is a typo in the right control code.

;;; KCHR is described in TN#160.  The description of dead key processing is a little
;;; confusing.  If a key requires a dead key lookup, you don't get an event until the
;;; second key in the sequence.  If the dead key lookup fails, you don't get an event at all.
;;; Keys that aren't assigned but generate events are mapped to 16.  If the virtual key
;;; code is in the range of 0x37 to 0x3F (exclusive), the corresponding bit in the shift
;;; mask is also updated.  The documentation does not mention the latter right-hand bits.

;;;; KCAP resources.  Format determined empirically, and mostly confirmed by Apple support.

(define-mac-structure key-layout
  (window-rect rect)
  (echo-rect rect)
  (length integer-16)
  (keys (vector key-set length)))		;Doc says this is 1+, not Key Caps doesn't.

(define-mac-structure key-set
  (nrects integer-16)
  (rects (vector point (1+ nrects)))
  (nkeys integer-16)
  (keys (vector key-entry (1+ nkeys))))

(define-mac-structure key-entry
  (mask unsigned-byte)
  (* (* unsigned-byte
	(or-p (boolean-bit 7))
	(code (load-byte 0 7))))
  (dy integer-16)
  (dx integer-16))

(defparameter *mac-virtual-key-layout*
  '((:code #x00 :legend "A")
    (:code #x01 :legend "S")
    (:code #x02 :legend "D")
    (:code #x03 :legend "F")
    (:code #x04 :legend "H")
    (:code #x05 :legend "G")
    (:code #x06 :legend "Z")
    (:code #x07 :legend "X")
    (:code #x08 :legend "C")
    (:code #x09 :legend "V")
    (:code #x0B :legend "B")
    (:code #x0C :legend "Q")
    (:code #x0D :legend "W")
    (:code #x0E :legend "E")
    (:code #x0F :legend "R")
    (:code #x10 :legend "Y")
    (:code #x11 :legend "T")
    (:code #x12 :legend ("!" "1"))
    (:code #x13 :legend ("@" "2"))
    (:code #x14 :legend ("#" "3"))
    (:code #x15 :legend ("$" "4"))
    (:code #x16 :legend ("^" "6"))
    (:code #x17 :legend ("%" "5"))
    (:code #x18 :legend ("+" "="))
    (:code #x19 :legend ("(" "9"))
    (:code #x1A :legend ("&" "7"))
    (:code #x1B :legend ("_" "-"))
    (:code #x1C :legend ("*" "8"))
    (:code #x1D :legend (")" "0"))
    (:code #x1E :legend ("}" "]"))
    (:code #x1F :legend "O")

    (:code #x20 :legend "U")
    (:code #x21 :legend ("{" "["))
    (:code #x22 :legend "I")
    (:code #x23 :legend "P")
    (:code #x24 :legend "return")
    (:code #x25 :legend "L")
    (:code #x26 :legend "J")
    (:code #x27 :legend ("\"" "'"))
    (:code #x28 :legend "K")
    (:code #x29 :legend (":" ";"))
    (:code #x2A :legend ("|" "\\"))
    (:code #x2B :legend ("<" ","))
    (:code #x2C :legend ("?" "/"))
    (:code #x2D :legend "N")
    (:code #x2E :legend "M")
    (:code #x2F :legend (">" "."))
    (:code #x30 :legend "tab")
    (:code #x31 :legend nil :name "Space")
    (:code #x32 :legend ("~" "`"))
    (:code #x33 :legend "delete")		; :keysym "Backspace"?
    (:code #x34 :legend "enter")		; small keyboard
    (:code #x35 :legend "esc" :name "Escape")
    (:code #x37 :legend "command" :name "Command")	; :legend draw-apple-logo
    (:code #x38 :legend "shift")
    (:code #x39 :legend ("caps" "lock"))
    (:code #x3A :legend ("alt" "option") :name "Option")	; :legend draw-xxx
    (:code #x3B :legend "control")
    (:code #x3C :legend "shift" :name "Right Shift")
    (:code #x3D :legend ("alt" "option") :name "Right Option")
    (:code #x3E :legend "control" :name "Right Control")

    (:code #x41 :legend "." :name "numeric .")
    (:code #x42 :legend "")			; ??
    (:code #x43 :legend "*" :name "numeric *")
    (:code #x45 :legend "+" :name "numeric +")
    (:code #x46 :legend ("" "+"))		; ??
    (:code #x47 :legend "clear")
    (:code #x48 :legend ("" "="))		; ??
    (:code #x4B :legend "/" :name "numeric /")
    (:code #x4C :legend "enter" :name "numeric Enter")
    (:code #x4D :legend ("" "/"))		; ??
    (:code #x4E :legend "-" :name "numeric -")
    (:code #x51 :legend "=" :name "numeric =")
    (:code #x52 :legend "0" :name "numeric 0")
    (:code #x53 :legend "1" :name "numeric 1")
    (:code #x54 :legend "2" :name "numeric 2")
    (:code #x55 :legend "3" :name "numeric 3")
    (:code #x56 :legend "4" :name "numeric 4")
    (:code #x57 :legend "5" :name "numeric 5")
    (:code #x58 :legend "6" :name "numeric 6")
    (:code #x59 :legend "7" :name "numeric 7")
    (:code #x5B :legend "8" :name "numeric 8")
    (:code #x5C :legend "9" :name "numeric 9")

    (:code #x60 :legend "F5")
    (:code #x61 :legend "F6")
    (:code #x62 :legend "F7")
    (:code #x63 :legend "F3")
    (:code #x64 :legend "F8")
    (:code #x65 :legend "F9")
    (:code #x67 :legend "F11")
    (:code #x69 :legend "F13")
    (:code #x6B :legend "F14")
    (:code #x6D :legend "F10")
    (:code #x6F :legend "F12")
    (:code #x71 :legend "F15")
    (:code #x72 :legend "help")
    (:code #x73 :legend "home")
    (:code #x74 :legend ("page" "up"))
    (:code #x75 :legend "del")			; :legend ("del" draw-del-legend)
    (:code #x76 :legend "F4")
    (:code #x77 :legend "end")
    (:code #x78 :legend "F2")
    (:code #x79 :legend ("page" "down"))
    (:code #x7A :legend "F1")
    (:code #x7B :legend "")
    (:code #x7C :legend "")
    (:code #x7D :legend "")
    (:code #x7E :legend "")
    (:code #x7F :legend "reset" :name "Reset")	; :legend draw-power-on-legend :inaccessible t
    ))

;;; Note that there are typos on V-192 of Inside Macintosh.  The position of the right and down
;;; arrows are swapped, although the codes are correct.  The code for right control when
;;; not in Device ID 3 mode is 3B, not 36.
(defparameter *mac-virtual-keyboard-table-mapping*
  '((#\a #\A nil #\)				;00 A
    (#\s #\S)					;01 S
    (#\d #\D nil #\ç)				;02 D
    (#\f #\F)					;03 F
    (#\h #\H #\)				;04 H
    (#\g #\G #\ #\â)				;05 G
    (#\z #\Z)					;06 Z
    (#\x #\X)					;07 X
    (#\c #\C)					;08 C
    (#\v #\V)					;09 V
    nil						;0A reserved
    (#\b #\B nil #\)				;0B B
    (#\q #\Q #\)				;0C Q
    (#\w #\W #\)				;0D W
    (#\e #\E #\ #\)				;0E E
    (#\r #\R #\)				;0F R
    (#\y #\Y #\)				;10 Y
    (#\t #\T #\)				;11 T
    (#\1 #\!)					;12 1
    (#\2 #\@)					;13 2
    (#\3 #\#)					;14 3
    (#\4 #\$)					;15 4
    (#\6 #\^)					;16 6
    (#\5 #\%)					;17 5
    (#\= #\+ #\ #\ä)				;18 =
    (#\9 #\()					;19 9
    (#\7 #\&)					;1A 7
    (#\- #\_ #\)				;1B -
    (#\8 #\* nil #\)				;1C 8
    (#\0 #\))					;1D 0
    (#\] #\})					;1E ]
    (#\o #\O #\)				;1F O

    (#\u #\U #\)				;20 U
    (#\[ #\{)					;21 [
    (#\i #\I #\)				;22 I
    (#\p #\P #\ #\)				;23 P
    #\return					;24 Return
    (#\l #\L #\ #\à)				;25 L
    (#\j #\J #\)				;26 J
    (#\' #\" #\ )				;27 '
    (#\k #\K #\)				;28 K
    (#\; #\: nil #\å)				;29 ;
    (#\\ #\|)					;2A \
    (#\, #\< #\)				;2B ,
    (#\/ #\? #\á)				;2C /
    (#\n #\N)					;2D N
    (#\m #\M)					;2E M
    (#\. #\> #\)					;2F .
    #\tab					;30 Tab
    #\space					;31 Space
    (#\` #\~ #\)				;32 `
    #\rubout					;33 Backspace (Delete)
    nil						;34 Enter (small keyboard)
    #\select					;35 Escape
    nil						;36 reserved
    :super					;37 Command
    :left-shift					;38 Shift
    :caps-lock					;39 Caps Lock
    :left-meta					;3A Option
    :left-control				;3B Control
    :right-shift				;3C R. Shift
    :right-meta					;3D R. Option
    :right-control				;3E R. Control
    nil						;3F reserved

    nil						;40 unused
    nil						;41 . (numeric)
    nil						;42  (??)
    #\abort					;43 * (numeric)
    nil						;44 unused
    nil						;45 + (numeric)
    nil						;46  + (??)
    #\clear-input				;47 Clear
    nil						;48  = (??)
    nil						;49 unused
    nil						;4A unused
    #\resume					;4B / (numeric)
    #\scroll					;4C Enter (numeric)
    nil						;4D  / (??)
    nil						;4E - (numeric)
    nil						;4F unused
    nil						;50 unused
    #\suspend					;51 = (numeric)
    nil						;52 0 (numeric)
    nil						;53 1 (numeric)
    nil						;54 2 (numeric)
    nil						;55 3 (numeric)
    nil						;56 4 (numeric)
    nil						;57 5 (numeric)
    nil						;58 6 (numeric)
    nil						;59 7 (numeric)
    nil						;5A unused
    nil						;5B 8 (numeric)
    nil						;5C 9 (numeric)
    nil						;5D unused
    nil						;5E unused
    nil						;5F unused

    nil						;60 F5
    #\square					;61 F6
    #\circle					;62 F7
    nil						;63 F3
    #\triangle					;64 F8
    #\function					;65 F9
    nil						;66 unused
    #\network					;67 F11
    nil						;68 unused
    :local ;command				;69 F13
    nil						;6A unused
    (#1=(:alt :locking :once) #1# #1# #1#)	;6B F14
    nil						;6C unused
    (#\escape #\ #\)				;6D F10
    nil						;6E unused
    #\refresh					;6F F12
    nil						;70 unused
    (#2=(:mode-lock :locking t) #2# #2# #2#)	;71 F15
    (#\help #\help #\symbol-help #\symbol-help) ;72 Help
    #\complete					;73 Home
    #\page					;74 Page Up
    #\backspace					;75 Delete (del)
    nil						;76 F4
    #\end					;77 End
    nil						;78 F2
    #\line					;79 Page Down
    nil						;7A F1
    :hyper					;7B 
    :noop ;mouse-R				;7C 
    :noop ;mouse-M				;7D 
    :symbol					;7E 
    nil						;7F Reset
    ))

(defvar *default-mac-keyboard-table*
	(sys:make-keyboard-table *mac-virtual-keyboard-table-mapping*))

;;; command shift caps-lock option control right-shift right-option right-control
(defvar *default-mac-keyboard-shift-keys* '(#x37 #x38 #x39 #x3A #x3B #x3C #x3D #x3E))
;;; M=, R=
(defvar *default-mac-keyboard-mouse-shift-keys* '((1 #x7D) (2 #x7C)))

(defun convert-kcap-keyboard-layout-1 (name id array start end &rest options)
  (ignore end)					;Could cross check.
  (let ((keys nil))
    (let ((index (octet-structure-field-index (key-layout-keys array start))))
      (loop repeat (key-layout-length array start)
	    do
	(let ((points (loop for point being the octet-structure-field-elements
				of (key-set-rects array index)
			    collect (list (point-x array point)
					  (point-y array point))))
	      (x 0)
	      (y 0))
	  (loop for key being the octet-structure-field-elements
		    of (key-set-keys array index)
		do (incf x (key-entry-dx array key))
		   (incf y (key-entry-dy array key))
		   (push (let ((key (list :code (key-entry-code array key))))
			   (destructuring-bind (rect-size &optional l-stub) points
			     (setf (getf key :edges) (list* x y rect-size))
			     (when l-stub
			       (setf (getf key :l-shape-stub)
				     (if (minusp (second rect-size))
					 (list (first l-stub)
					       (- (second l-stub) (second rect-size))
					       (1- (first rect-size))
					       0)
					 (list (first l-stub)
					       (1- (second rect-size))
					       (1- (first rect-size))
					       (1- (second l-stub)))))))
			   key)
			 keys)
		finally (setq index key)))))
    ;; Make positions relative.  Could use bounding box, but it doesn't seem to be right.
    (let ((min-x 999)
	  (min-y 999))
      (dolist (key keys)
	(destructuring-bind (x y . ignore) (getf key :edges)
	  (minf min-x x)
	  (minf min-y y)))
      (dolist (key keys)
	(destructuring-bind (x y width height) (getf key :edges)
	  (let* ((left (- x min-x))
		 (top (- y min-y))
		 (right (+ left width))
		 (bottom (+ top height)))
	    (when (< right left)
	      (rotatef left right))
	    (when (< bottom top)
	      (rotatef top bottom))
	    (setf (getf key :edges) (list left top (1- right) (1- bottom)))))))
    ;; Merge in known information
    (loop for keys on keys
	  as key = (first keys)
	  do
      (let ((entry (find (getf key :code) *mac-virtual-key-layout*
			 :key #'(lambda (entry) (getf entry :code)))))
	(when entry
	  (dolist (ind '(:name :legend :keysym))
	    (setf (getf key ind) (getf entry ind)))
	  (setf (first keys) key))))
    (loop for (option default) in '((:legend-character-style '(:swiss :italic nil))
				    (:default-mapping-table *default-mac-keyboard-table*)
				    (:default-all-keys-up-shift-keys
				      *default-mac-keyboard-shift-keys*)
				    (:default-mouse-button-shift-keys
				      *default-mac-keyboard-mouse-shift-keys*))
	  do
      (when (eq (getf options option option) option)
	(setf (getf options option) (eval default))))
    (setf (getf options :numeric-id) (%logdpb #x0002 (byte 16 16) id))
    (when (and (null name) (not (getf options :pretty-name)))
      (setf (getf options :pretty-name) (format nil "Macintosh-Unknown-~D" id)))
    (apply #'sys:define-keyboard-layout-2 name (nreverse
						 (delete-duplicates keys
						   :test #'equal
						   :key #'(lambda (key) (getf key :edges))))
	   options)))

(defun convert-kcap-keyboard-layout (file layouts-to-convert)
  (map-over-mac-file file
    #'(lambda (ftype &key type id array start end &allow-other-keys)
	(when (and (eq ftype :resource) (equal type "KCAP"))
	  (let ((entry (assoc id layouts-to-convert))
		(pretty-name (cli::Macintosh-keyboard-type-name id)))
	    (destructuring-bind (&optional ignore name &rest options) entry
	      (if (null pretty-name)
		  (apply #'convert-kcap-keyboard-layout-1 name id array start end options)
		  (apply #'convert-kcap-keyboard-layout-1 name id array start end
			 :pretty-name pretty-name options))))))))

(defparameter *mac-keyboard-layouts-to-convert*
  '((1 :apple)
    (2 :apple-extended :led-shifts (:mode-lock :caps-lock :local))
    (3 :mac-512k)
    (4 :apple-iso)
    (5 :apple-iso-extended :led-shifts (:mode-lock :caps-lock :local))
    (6 :mac-portable)
    (7 :mac-portable-iso)
    (8 :elmer)					D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");Actually the Apple Keyboard II
0    (9 :elmer-iso)				1;Actually the Apple Keyboard II (ISO)
0    (11 :mac-plus)
    (12 :powerbook)
    (13 :powerbook-iso)
    (259 :mac-512k-international)
    ))

(convert-kcap-keyboard-layout #P"SYS:EMBEDDING;MACIVORY;DATA;KEY-LAYOUTS.RSRC"
			      *mac-keyboard-layouts-to-convert*)

#||
(defun draw-kcap-keyboard-layout (array start end)
  (ignore end)
  (multiple-value-bind (top bottom)
      (let ((index (octet-structure-field-index (key-layout-window-rect array start))))
	(values (rect-top array index) (rect-bottom array index)))
    (graphics:with-room-for-graphics (t bottom)
      (graphics:with-graphics-translation (t 0 (- bottom top))
	(graphics:with-graphics-scale (t 1 -1)
	  (let ((index (octet-structure-field-index (key-layout-keys array start))))
	    (loop repeat (key-layout-length array start)
		  do
	      (let ((rects (loop for point being the octet-structure-field-elements
				 of (key-set-rects array index)
				 collect (list (point-x array point)
					       (point-y array point))))
		    (x 0)
		    (y 0))
		(loop for key being the octet-structure-field-elements
			  of (key-set-keys array index)
		      do (incf x (key-entry-dx array key))
			 (incf y (key-entry-dy array key))
			 (flet ((draw-rect (x y width height &rest draw-args)
				  (let* ((left x)
					 (top y)
					 (right (+ x width))
					 (bottom (+ y height)))
				    (when (< right left)
				      (rotatef left right))
				    (when (< bottom top)
				      (rotatef top bottom))
				    (apply #'graphics:draw-rectangle left top
					   (1- right) (1- bottom)
					   draw-args))))
			   (destructuring-bind (width height) (first rects)
			     (draw-rect x y width height :filled nil)
			     (graphics:draw-string
			       (format nil "~2,'0X" (key-entry-code array key))
			       (+ x (/ width 2)) (+ y (/ height 2))
			       :attachment-x :center :attachment-y :center
			       :character-style '(nil nil :small))
			     (dolist (more (rest rects))
			       (draw-rect (+ x (first more) 1) (+ y height)
					  (- width (first more)) (- (second more) height)
					  :stipple stipples:southeast-rain))))
		      finally (setq index key))))))))))
||#

#||
;;; KCHR and KMAP resources.  TN #160.

(define-mac-structure key-chars
  (version integer-16)
  (char-table-indices (vector unsigned-byte 256))
  (char-table-count integer-16)
  (char-tables (vector (vector unsigned-byte 128) char-table-count))
  (dead-key-count integer-16)
  (dead-keys (vector dead-key dead-key-count)))

(define-mac-structure dead-key
  (table-number unsigned-byte)
  (key-code unsigned-byte)
  (completor-count integer-16)
  (completors (vector completor completor-count))
  (no-match-char unsigned-byte)
  (no-match-char2 unsigned-byte))

(define-mac-structure completor
  (char unsigned-byte)
  (substitute unsigned-byte))

(defun find-standard-kchr (from-file &optional (desired-id 0))
  (map-over-mac-file from-file
		     #'(lambda (kind &key array start end type id
				&allow-other-keys)
			 (when (and (eq kind :resource)
				    (string= type "KCHR")
				    (= id desired-id))
			   (return-from find-standard-kchr (subseq array start end))))
		     :progress-note "Searching for old KCHR")
  (error "KCHR ~D not found." desired-id))

;;; Make all dead keys map to either what they would map to if there were no completors,
;;; or the canonical unassigned code otherwise.  This causes you to get events for all
;;; keys right away, but doesn't totally trash the mapping table in case the application
;;; quits without restoring it properly.
(defun remove-completors-from-kchr (kchr)
  (setq kchr (copy-seq kchr))
  (loop for table-index from 0
	for char-table being the octet-structure-field-elements
	    of (key-chars-char-tables kchr 0)
	do (dotimes (key-code 128)
	     (when (zerop (aref kchr (+ char-table key-code)))
	       (let ((replacement #x10))
		 (let ((dead-key (octet-structure-field-index (key-chars-dead-keys kchr 0))))
		   (dotimes (dead-i (key-chars-dead-key-count kchr 0))
		     (when (and (= (dead-key-table-number kchr dead-key) table-index)
				(= (dead-key-key-code kchr dead-key) key-code))
		       (return
			 (setq replacement (dead-key-no-match-char2 kchr dead-key))))
		     (setq dead-key (1+ (octet-structure-field-index
					  (dead-key-no-match-char2 kchr dead-key))))))
		 (setf (aref kchr (+ char-table key-code)) replacement)))))
  (setf (key-chars-dead-key-count kchr 0) 0)
  (subseq kchr 0 (octet-structure-field-index (key-chars-dead-keys kchr 0))))

(defun add-to-kchr-tables (kchr characters)
  (setq kchr (copy-seq kchr))
  (loop for char-table being the octet-structure-field-elements
	    of (key-chars-char-tables kchr 0)
	do
    (let ((shift (selector (aref kchr char-table) =
		   (((ascii-code #\A)) 2)
		   (((ascii-code #\a)) 1)
		   (otherwise 0))))
      (loop for (virtual-code . mappings) in characters do
	(unless (member (aref kchr (+ char-table virtual-code)) '(0 #x10))
	  (error "~X is not empty -- it may be already assigned" virtual-code))
	(setf (aref kchr (+ char-table virtual-code))
	      (if (and (plusp shift) (nth (1- shift) mappings))
		  (ascii-code (nth (1- shift) mappings))
		  #x10)))))
  kchr)

(define-mac-structure key-mapping
  id
  version
  (map (vector unsigned-byte 128))
  exception-count)

;;; The unused Apple virtual codes are:
;;;  40, 44, 49, 4A, 4F, 50, 5A, 5D, 5E, 5F, 66, 68, 6A, 6C, 6E, and 70.
;;; We use 66 and 70 as mouse middle and right respectively.
;;; Dead key codes (KCHR to 0) do not send key down events, although illegal ones (to 10)
;;; do.  We have to be sure to install mappings to 10 for all non-shifting codes (black).
;;; The proprietary shift codes (red legend) are handled specially.
(defparameter *symbolics-to-apple-codes*
  '(#x5F ;unused				;LOCAL         (00 hex1)
0    #x39					;CAPS-LOCK     (01 hex)
    #x7B					;LEFT-HYPER    (02 hex)
    #x3A					;LEFT-META     (03 hex)
    #x3E					;RIGHT-CONTROL (04 hex)
    #x40 ;unused				;RIGHT-SUPER   (05 hex)
    #x4C					;SCROLL        (06 hex)
    #x71					;MODE-LOCK     (07 hex)
    #x35					;SELECT        (08 hex)
    #x7E					;LEFT-SYMBOL   (09 hex)
    #x37					;LEFT-SUPER    (0A hex)
    #x3B					;LEFT-CONTROL  (0B hex)
    #x31					;SPACE-BAR     (0C hex)
    #x3D					;RIGHT-META    (0D hex)
    #x44 ;unused				;RIGHT-HYPER   (0E hex)
    #x77					;END           (0F hex)
    #x06					;Z             (10 hex)
    #x08					;C             (11 hex)
    #x0B					;B             (12 hex)
    #x2E					;M             (13 hex)
    #x2F					;.             (14 hex)
    #x3C					;RIGHT-SHIFT   (15 hex)
    #x49 ;unused				;REPEAT        (16 hex)
    #x43					;ABORT         (17 hex)
    #x38					;LEFT-SHIFT    (18 hex)
    #x07					;X             (19 hex)
    #x09					;V             (1A hex)
    #x2D					;N             (1B hex)
    #x2B					;,             (1C hex)
    #x2C					;/             (1D hex)
    #x4A ;unused				;RIGHT-SYMBOL  (1E hex)
    #x72					;HELP          (1F hex)
    #x33					;RUBOUT        (20 hex)
    #x01					;S             (21 hex)
    #x03					;F             (22 hex)
    #x04					;H             (23 hex)
    #x28					;K             (24 hex)
    #x29	                                ;;             (25 hex)
    #x24					;RETURN        (26 hex)
    #x73					;COMPLETE      (27 hex)
    #x67					;NETWORK       (28 hex)
    #x00					;A             (29 hex)
    #x02					;D             (2A hex)
    #x05					;G             (2B hex)
    #x26					;J             (2C hex)
    #x25					;L             (2D hex)
    #x27					;'             (2E hex)
    #x79					;LINE          (2F hex)
    #x65					;FUNCTION      (30 hex)
    #x0D					;W             (31 hex)
    #x0F					;R             (32 hex)
    #x10					;Y             (33 hex)
    #x22					;I             (34 hex)
    #x23					;P             (35 hex)
    #x6E ;not quite #x1E			;)             (36 hex)
    #x74					;PAGE          (37 hex)
    #x30					;TAB           (38 hex)
    #x0C					;Q             (39 hex)
    #x0E					;E             (3A hex)
    #x11					;T             (3B hex)
    #x20					;U             (3C hex)
    #x1F					;O             (3D hex)
    #x6C ;not quite #x21			;(             (3E hex1)
0    #x75					;BACK-SPACE    (3F hex)
    #x5E ;unused				;:             (40 hex)
    #x13					;2             (41 hex)
    #x15					;4             (42 hex)
    #x16					;6             (43 hex)
    #x1C					;8             (44 hex)
    #x1D					;0             (45 hex)
    #x18					;=             (46 hex)
    #x68 ;not quite #x2A			;1\0             (47 hex)
    #x12					;1             (48 hex)
    #x14					;3             (49 hex)
    #x17					;5             (4A hex)
    #x1A					;7             (4B hex)
    #x19					;9             (4C hex)
    #x1B					;-             (4D hex)
    #x32					;`             (4E hex)
    #x6A ;unused				;|             (4F hex)
    #x6D					;ESCAPE        (50 hex)
    #x6F					;REFRESH       (51 hex)
    #x61					;SQUARE        (52 hex)
    #x62					;CIRCLE        (53 hex)
    #x64					;TRIANGLE      (54 hex)
    #x47					;CLEAR-INPUT   (55 hex)
    #x51					;SUSPEND       (56 hex)
    #x4B					;RESUME        (57 hex)
    ))

(defparameter *new-symbolics-virtual-mappings*
  '((#x5F #x0 )					;local
    (#x5E #x40 #\: #\:)
    (#x68 #x47 #\\ #\{)
    (#x6A #x4F #\| #\})
    (#x6C #x3E #\( #\[)
    (#x6E #x36 #\) #\])))

(defun write-symbolics-keyboard-resources
       (&key (to-file (merge-pathnames "SYS:EMBEDDING;KEYBOARDS;SYMBOLICS-KEYBOARD.RSRC"))
	     (from-file (merge-pathnames "HOST::System"))
	     (resource-id #x27)
	     (scale 20.))
  (write-mac-file to-file ()
    (make-resource-fork
      (append
	(let ((key-buckets nil)
	      kcap)
	  (let ((layout (system-applications::find-keyboard-layout :symbolics)))
	    (loop for apple-code in *symbolics-to-apple-codes*
		  for symbolics-code from 0
		  do (multiple-value-bind (left top right bottom)
			 (system-applications::keyboard-layout-key-edges
			   (system-applications::keyboard-layout-key-for-code
			     layout symbolics-code))
		       (stack-let ((size (list (* scale (- right left))
					       (* scale (- bottom top)))))
			 (let ((bucket (assoc size key-buckets :test #'equal)))
			   (when (null bucket)
			     (setq bucket (list (setq size (copy-list size))))
			     (push bucket key-buckets))
			   (push (list apple-code (* scale left) (* scale top))
				 (rest bucket)))))))
	  (flet ((point-lessp (x y)
		   (if (= (first x) (first y))
		       (< (second x) (second y))
		       (< (first x) (first y)))))
	    (dolist (bucket key-buckets)
	      (setf (rest bucket) (sort (rest bucket) #'point-lessp)))
	    (setq key-buckets (sort key-buckets #'point-lessp :key #'first)))
	  (setq kcap (make-array (+ #+ignore (octet-structure-field-index
					       (key-layout-keys kcap 0))
				    #-ignore 18
				    (loop for (size . keys) in key-buckets
					  sum (+ 8 (* (length keys)
						      (octet-structure-total-size
							(key-entry kcap 0))))))
				 :element-type '(unsigned-byte 8)))
	  (set-rect kcap (octet-structure-field-index (key-layout-window-rect kcap 0))
		    15 60 495 260)
	  (set-rect kcap (octet-structure-field-index (key-layout-echo-rect kcap 0))
		    40 12 450 36)
	  (setf (key-layout-length kcap 0) (length key-buckets))
	  (let ((index #+ignore (octet-structure-field-index (key-layout-keys kcap 0))
		       #-ignore 18))
	    (loop for ((width height) . keys) in key-buckets
		  do
	      (setf (key-set-nrects kcap index) 0)
	      (setf (point-x kcap (octet-structure-field-index (key-set-rects kcap index)))
		    width)
	      (setf (point-y kcap (octet-structure-field-index (key-set-rects kcap index)))
		    height)
	      (setf (key-set-nkeys kcap index) (1- (length keys)))
	      (setq index (octet-structure-field-index (key-set-keys kcap index)))
	      (let ((last-x 0) (last-y 0))
		(loop for (code x y) in keys do
		  (incf x 35) (incf y 50)
		  (setf (key-entry-code kcap index) code)
		  (setf (key-entry-dx kcap index) (- x last-x)
			(key-entry-dy kcap index) (- y last-y))
		  (setq last-x x last-y y)
		  (setq index (octet-structure-total-size (key-entry kcap index))))))
	    (assert (= index (length kcap))))
	  (list (list kcap "KCAP" resource-id)))
	(let ((kmap (make-key-mapping :id resource-id
				      :version 0
				      :exception-count 0))
	      (offset (octet-structure-field-index (key-mapping-map kmap 0))))
	  (loop for apple-code in *symbolics-to-apple-codes*
		for index from offset
		do
	    (setf (aref kmap index) apple-code))
	  (setf (aref kmap (+ #x66 offset)) #x66)	;mouse m
	  (setf (aref kmap (+ #x70 offset)) #x70)	;mouse r
	  (setf (aref kmap (+ #x7F offset)) #x7F)	;power on
	  (list (list kmap "KMAP" resource-id)))
	(let ((kchr (find-standard-kchr from-file)))
	  (setq kchr (add-to-kchr-tables kchr
					 (loop for (virtual hardware . mappings)
					       in *new-symbolics-virtual-mappings*
					       do (unless (eql (nth hardware
								    *symbolics-to-apple-codes*)
							       virtual)
						    (error "mapping inconsistency: ~X ~X"
							   virtual hardware))
					       collect (list* virtual mappings))))
	  (list (list kchr "KCHR" 0 "US + Symbolics")
		(list (remove-completors-from-kchr kchr) "KCHR" 3600 "No completors")))
	;;Some icon?
	))
    :name "Symbolics Keyboard"
    :type "rsrc"
    :author "RSED"))  ;Well, sort of

(defun symbolics-mapping ()
  (fresh-line)
  (let ((skey (system-applications::find-keyboard-layout :symbolics))
	(akey (system-applications::find-keyboard-layout :apple-extended)))
    (labels ((one-code (layout code)
	       (formatting-cell (t :align :center)
		 (let ((key (system-applications::keyboard-layout-key-for-code layout code)))
		   (when key
		     (let ((name (system-applications::keyboard-layout-key-legend key)))
		       (when (symbolp name)
			 (setq name (system-applications::keyboard-layout-key-name key)))
		       (if (listp name)
			   (format t "~{~A~^~%~}" name)
			   (format t "~A" name))))))
	       (formatting-cell (t :align :right)
		 (format t "~2,'0X" code))))
      (formatting-table ()
	(formatting-column-headings ()
	  "Symbolics 
Legend"
	  "Hex
Code"
	  "Apple 
Legend"
	  "Hex
Code")
	(loop for acode in mtb::*symbolics-to-apple-codes*
	      for scode from 0
	      do
	  (formatting-row ()
	    (one-code skey scode)
	    (one-code akey acode)))))))

(defun add-symbolics-as-apple-keyboard ()
  (let* ((slay (system-applications::find-keyboard-layout :symbolics))
	 (alay (system-applications::find-keyboard-layout :apple-extended))
	 (keys (loop for skey in (system-applications::keyboard-layout-keys slay)
		     as akey = (let ((acode (nth (system-applications::keyboard-layout-key-code
						   skey)
						 mtb::*symbolics-to-apple-codes*)))
				 (system-applications::keyboard-layout-key-for-code alay
										    acode))
		     collect
		       (list
			 :name (system-applications::keyboard-layout-key-name skey)
			 :legend (and akey
				      (system-applications::keyboard-layout-key-legend akey))
			 :code (system-applications::keyboard-layout-key-code skey)
			 :edges (multiple-value-list
				  (system-applications::keyboard-layout-key-edges skey))))))
    (system-applications::define-keyboard-layout-2 :symbolics-to-apple keys
						   :pretty-name "Symbolics to Apple")))

(defun keyboard-layout-binary-graphics-encoding (layout &rest args)
  (setq layout (system-applications::find-keyboard-layout layout))
  (graphics:binary-encode-graphics-to-array
    #'(lambda (stream)
	(apply #'system-applications::draw-keyboard-layout layout
	       :stream stream args))))


||#
