;;; -*- Mode: LISP; Syntax: Common-lisp; Package: SYSTEM-APPLICATIONS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Layouts

;;; A keyboard layout is a (read-only) description of the hardware
;;; keyboard.  There is one instance per kind of keyboard.

;;; The symbolic name is usually a keyword, or NIL if no good name exists.
;;; The numeric-id is 16 bits of class/manufacturer and 16 bits within that class.
;;; Negative id's are used for generated layouts that don't really correspond to a known
;;; physical keyboard (such as an unknown set of X keysyms).

;;; Classes: 1 -- Symbolics, 2 -- Apple, 3 -- IBM, 4 -- Sun, 5 -- SGI

(defflavor keyboard-layout
	((symbolic-name nil)
	 (numeric-id -1)
	 keys
	 (pretty-name nil)
	 key-code-limit
	 code-to-key-table
	 edges
	 (legend-character-style nil)
	 (compute-inaccessible-function #'ignore)
	 (original-mapping-table nil)
	 (default-mapping-table nil)
	 (default-all-keys-up-shift-keys nil)
	 (default-mouse-button-shift-keys nil)
	 (led-shifts nil))
	()
  (:readable-instance-variables symbolic-name numeric-id keys pretty-name
				key-code-limit legend-character-style
				default-mapping-table original-mapping-table
				default-all-keys-up-shift-keys default-mouse-button-shift-keys
				led-shifts)
  (:initable-instance-variables symbolic-name numeric-id keys pretty-name
				compute-inaccessible-function legend-character-style
				default-mapping-table
				default-all-keys-up-shift-keys default-mouse-button-shift-keys
				led-shifts)
  (:constructor make-keyboard-layout (symbolic-name keys
				      &key numeric-id pretty-name
					   compute-inaccessible-function legend-character-style
					   default-mapping-table default-all-keys-up-shift-keys
					   default-mouse-button-shift-keys led-shifts)))

(defmethod (sys:print-self keyboard-layout) (stream ignore slash)
  (if slash
      (sys:printing-random-object (self stream :typep)
	(prin1 (or symbolic-name pretty-name) stream))
      (princ pretty-name stream)))

(defmethod (make-instance keyboard-layout) (&rest ignore)	;(&key &allow-other-keys)
  (when (null pretty-name)
    (setq pretty-name (cond (symbolic-name
			     (string-capitalize-words symbolic-name))
			    ((plusp numeric-id)
			     (format nil "Unknown-~D/~D" (sys:%logldb (byte 16 16) numeric-id)
							 (sys:%logldb (byte 16 0) numeric-id)))
			    (t
			     (loop for i from 1
				   as name = (format nil "Unknown-~D" i)
				   unless (find-keyboard-layout name :if-does-not-exist nil)
				     return name)))))
  (setq keys (map 'list #'(lambda (args) (apply #'make-keyboard-layout-key args)) keys)
	key-code-limit (1+ (loop for key in keys maximize (keyboard-layout-key-code key)))
	code-to-key-table (make-array key-code-limit))
  (dolist (key keys)
    (let* ((code (keyboard-layout-key-code key))
	   (old (aref code-to-key-table code)))
      (setf (aref code-to-key-table code)
	    ;; Might have more than one key with same hardware keycode.
	    (typecase old
	      (null key)
	      (cons (cons key old))
	      (otherwise (list key old))))))
  (setq edges (loop for key in keys
		    with (kleft ktop kright kbottom)
		    do (multiple-value-setq (kleft ktop kright kbottom)
			 (keyboard-layout-key-edges key))
		    minimize kleft into left
		    minimize ktop into top
		    maximize kright into right
		    maximize kbottom into bottom
		    finally (return (list left top right bottom)))
	legend-character-style (si:parse-character-style legend-character-style))
  (setq original-mapping-table default-mapping-table))

(defmethod (keyboard-layout-edges keyboard-layout) ()
  (values-list edges))

(defmethod (keyboard-layout-keys-for-code keyboard-layout) (code)
  (let ((keys (and (< code (length code-to-key-table)) (aref code-to-key-table code))))
    (if (and keys (atom keys)) (list keys) keys)))

(defmethod (keyboard-layout-key-for-code keyboard-layout) (code)
  (let ((keys (and (< code (length code-to-key-table)) (aref code-to-key-table code))))
    (if (consp keys) (first keys) keys)))

;;; Keys on the physical keyboard, but intercepted before the device driver sees them.
;;; E.g. LOCAL on Symbolics, Reset on Mac.
(defmethod (compute-inaccessible-keys keyboard-layout) (console)
  (loop for code in (funcall compute-inaccessible-function console)
	append (keyboard-layout-keys-for-code self code)))

;;; There is one layout key per physical key in a keyboard layout.

(defflavor keyboard-layout-key
	(name	;The name of the key, e.g. "A", or "Back Space".
	 legend	;What's engraved on it, which might be an icon.
	 keysym	;What common keycap it maps into according to the X scheme.
	 code	;Key transition code.
	 )
	()
  (:readable-instance-variables name legend keysym code)
  :initable-instance-variables
  (:required-methods keyboard-layout-key-edges keyboard-layout-key-draw)
  )

(defun make-keyboard-layout-key (&key name (legend nil legend-p)
				      keysym code edges l-shape-stub)
  (unless legend-p
    (warn "No legend given for key~@[ code #o~O~]; it will be left blank" code))
  (unless code
    (error "No code given for key~@[ legended ~A~]" legend))
  (cond ((and (stringp legend) (= (string-length legend) 1))
	 (setq legend (aref legend 0)))
	((and (consp legend) (loop for string in legend
				   always (and (stringp string)
					       (= (string-length string) 1))))
	 (setq legend (loop for string in legend
			    collect (aref string 0)))))
  (when (null name)
    (setq name (etypecase legend
		 (string (string-capitalize legend))
		 (character (string legend))
		 (cons (if (every #'characterp legend)
			   (string (first (last legend)))	;Bottom single character
			   (nstring-capitalize (apply #'string-append
						      (loop for (substring . more) on legend
							    collect substring
							    when more collect #\space)))))
		 (null "Unknown"))))

  ;;--- Figure out what to map keysyms into as standard form.  X allows
  ;;one or two keysyms per key, each being a CARD32 (more or less).
  (ignore keysym)

  (if l-shape-stub
      (make-keyboard-layout-polygonal-key name legend keysym code edges
					  (compute-l-shape-polygon edges l-shape-stub))
      (make-keyboard-layout-rectangular-key name legend keysym code edges)))

(defmethod (sys:print-self keyboard-layout-key) (stream ignore slash)
  (if slash
      (sys:printing-random-object (self stream :typep)
	(princ self stream))
      (write-string name stream)))

(defmethod (keyboard-layout-key-redraw keyboard-layout-key) (window presentation transform alu)
  (ignore presentation)				;Cannot use this information
  (keyboard-layout-key-draw self :stream window :transform transform :alu alu))

(defun keyboard-layout-key-transformed-edges (key transform)
  (multiple-value-bind (left top right bottom)
      (keyboard-layout-key-edges key)
    (destructuring-bind (scale-x nil nil scale-y offset-x offset-y)
	transform
      (setq left (round (+ offset-x (* left scale-x)))
	    top (round (+ offset-y (* top scale-y)))
	    right (round (+ offset-x (* right scale-x)))
	    bottom (round (+ offset-y (* bottom scale-y)))))
    (values left top right bottom)))

(defflavor keyboard-layout-rectangular-key
	(edges)
	(keyboard-layout-key)
  (:constructor make-keyboard-layout-rectangular-key (name legend keysym code edges))
  )

(defmethod (keyboard-layout-key-edges keyboard-layout-rectangular-key) ()
  (values-list edges))

(defmethod (keyboard-layout-key-draw keyboard-layout-rectangular-key) (&rest draw-args)
  (destructuring-bind (left top right bottom) edges
    (apply #'graphics:draw-rectangle left top right bottom draw-args)))

(defmethod (keyboard-layout-key-redraw keyboard-layout-rectangular-key)
	   (window presentation transform alu)
  (ignore transform)				;Optimized out for this common case.
  (multiple-value-bind (kleft ktop kright kbottom)
      (dw:box-edges (dw:presentation-displayed-box presentation))
    (incf kleft) (incf ktop)
    (unless (eq alu :flip) (decf kright))	;Looks a little nicer to XOR an edge as well.
    (decf kbottom)
    (send window :draw-rectangle (- kright kleft) (- kbottom ktop) kleft ktop alu)))

(defflavor keyboard-layout-polygonal-key
	(primary-rectangle polygon-points)
	(keyboard-layout-key)
  (:constructor make-keyboard-layout-polygonal-key (name legend keysym code primary-rectangle
						    polygon-points))
  )

(defmethod (keyboard-layout-key-edges keyboard-layout-polygonal-key) ()
  (values-list primary-rectangle))

(defmethod (keyboard-layout-key-draw keyboard-layout-polygonal-key) (&rest draw-args)
  (apply #'graphics:draw-polygon polygon-points :points-are-convex-p t draw-args))

(defun compute-l-shape-polygon (primary-rectangle l-shape-stub)
  (destructuring-bind (rleft rtop rright rbottom) primary-rectangle
    (destructuring-bind (sleft stop sright sbottom) l-shape-stub
      (cond ((zerop sbottom)
	     (cond ((zerop sleft)
		    (list rleft (+ rtop stop)
			  rleft rbottom
			  rright rbottom
			  rright rtop
			  (+ rleft sright) rtop
			  (+ rleft sright) (+ rtop stop)))
		   ((= sright (- rright rleft))
		    (list rleft rtop
			  rleft rbottom
			  rright rbottom
			  rright (+ rtop stop)
			  (+ rleft sleft) (+ rtop stop)
			  (+ rleft sleft) rtop))
		   (t (error "Neither to the right nor to the left"))))
	    ((= stop (- rbottom rtop))
	     (cond ((zerop sleft)
		    (list rleft rtop
			  rleft (+ rtop sbottom)
			  (+ rleft sright) (+ rtop sbottom)
			  (+ rleft sright) rbottom
			  rright rbottom
			  rright rtop))
		   ((= sright (- rright rleft))
		    (list rleft rtop
			  rleft rbottom
			  (+ rleft sleft) rbottom
			  (+ rleft sleft) (+ rtop sbottom)
			  rright (+ rtop sbottom)
			  rright rtop))
		   (t (error "Neither to the right nor to the left"))))
	    (t (error "Neither above nor below"))))))

(defmacro define-keyboard-layout (name &body clauses)
  (multiple-value-bind (keys inaccessible-predicates options)
      (define-keyboard-layout-1 clauses)
    `(progn
       ,(when inaccessible-predicates
	  (let ((function-name (sys:fintern "COMPUTE-~A-INACCESSIBLE-KEYS" name)))
	    (setf (getf options :compute-inaccessible-function) `',function-name)
	    `(defun ,function-name (console)
	       (ignore console)
	       (let ((.result. nil))
		 ,@(loop for (code predicate) in inaccessible-predicates
			 collect `(when ,predicate (push ,code .result.)))
		 (nreverse .result.)))))
       (define-keyboard-layout-2 ',name ',keys . ,options))))

(defun define-keyboard-layout-1 (clauses)
  (declare (values keys inaccessible-predicates options))
  (let ((keys nil)
	(inaccessible-predicates nil)
	(options nil))
    (flet ((do-one-key (&rest options
			&key (left 0) (top 0) (width 1) (height 1) code inaccessible-if
			&allow-other-keys)
	     (when inaccessible-if
	       (push (list code inaccessible-if) inaccessible-predicates))
	     (push (list* :edges (list left top (+ left width) (+ top height))
			  (si:rem-keywords options '(:left :top :width :height
						     :inaccessible-if)))
		   keys)
	     (+ left width)))
      (dolist (clause clauses)
	(ecase (first clause)
	  (:row
	   (destructuring-bind (&key keys (left 0) (top 0)) (rest clause)
	     (dolist (key keys)
	       (setq left (apply #'do-one-key :left left :top top key)))))
	  (:key
	   (apply #'do-one-key (rest clause)))
	  ((:pretty-name :numeric-id :legend-character-style :default-mapping-table
			 :default-all-keys-up-shift-keys :default-mouse-button-shift-keys)
	    (setf (getf options (first clause)) (second clause))))))
    (values (nreverse keys) (sort inaccessible-predicates #'< :key #'first) options)))

(compile-flavor-methods keyboard-layout
			keyboard-layout-rectangular-key keyboard-layout-polygonal-key)

(defvar *keyboard-layouts* nil)

(defun define-keyboard-layout-2 (name keys &rest options
					   &key (numeric-id -1)
					   &allow-other-keys)
  (when (or (null name) (si:record-source-file-name name 'define-keyboard-layout))
    (pushnew (apply #'make-keyboard-layout name keys options) *keyboard-layouts*
	     :replace t
	     :key (cond (name #'keyboard-layout-symbolic-name)
			((plusp numeric-id) #'keyboard-layout-numeric-id)
			(t #'identity)))
							    
    name))

;;; A layout type in the keyboard can be a symbol as a forward reference from the core system
;;; to this facility, or a number from a remote network, etc.
(defun find-keyboard-layout (name &key (if-does-not-exist :error))
  (or (find name *keyboard-layouts*
	    :key (etypecase name
		   (keyboard-layout #'identity)
		   (symbol #'keyboard-layout-symbolic-name)
		   (string #'keyboard-layout-pretty-name)
		   (integer #'keyboard-layout-numeric-id)))
      (ecase if-does-not-exist
	((nil) nil)
	((:error) (error "The keyboard ~S has not been defined" name)))))

(define-presentation-type keyboard-layout ()
   :no-deftype t
   :parser ((stream &key initially-display-possibilities)
	    (values
	      (dw:complete-from-sequence *keyboard-layouts* stream
					 :name-key #'keyboard-layout-pretty-name
					 :initially-display-possibilities
					  initially-display-possibilities
					 :partial-completers '(#\space))))
   )

;;; Separate presentation type safer than adding presentation arguments to existing type.
(define-presentation-type keyboard-layout-key-presentation ((&key keyboard-layout))
   :parser ((stream &key original-type initially-display-possibilities)
	    (values
	      (dw:complete-from-sequence (keyboard-layout-keys keyboard-layout) stream
					 :type original-type
					 :name-key #'keyboard-layout-key-name
					 :initially-display-possibilities
					  initially-display-possibilities
					 :partial-completers '(#\space))))
   :printer ((key stream)
	     (ignore keyboard-layout)
	     (present key 'keyboard-layout-key :stream stream))
   )

;;; There could be a cold load version of this that did numeric lookup.
(defgeneric keyboard-layout-keyboard-options (keyboard-layout)
  (:method-arglist )
  (:function
    (let* ((layout (find-keyboard-layout keyboard-layout))
	   (options (funcall (flavor:generic keyboard-layout-keyboard-options) layout)))
      (unless (getf options :keyboard-table)
	(setf (getf options :keyboard-table)
	      (make-array (list 4 (keyboard-layout-key-code-limit layout)))))
      options)))

(defmethod (keyboard-layout-keyboard-options keyboard-layout) ()
  `(:layout-type ,self
    :keyboard-table ,default-mapping-table
    :all-keys-up-shift-keys ,default-all-keys-up-shift-keys
    :mouse-button-shift-keys ,default-mouse-button-shift-keys
    :led-shift-bits ,(loop for name in led-shifts
			   collect (ash 1 (position name sys:*kbd-mapping-bit-names*)))))

(defun find-settable-keyboard-table (keyboard-layout)
  (keyboard-layout-settable-mapping-table (find-keyboard-layout keyboard-layout)))

(defmethod (keyboard-layout-settable-mapping-table keyboard-layout) ()
  (when (eq original-mapping-table default-mapping-table)
    (setq original-mapping-table (sys:copy-keyboard-table original-mapping-table)))
  default-mapping-table)

;;;; Mappings

(defconstant %%kbd-mapping-index-description-shifts (byte 16 16))
(defconstant %%kbd-mapping-index-description-key-code (byte 16 0))

(defun find-character-mapping-indices (character mapping-table)
  (let* ((bits (char-bits character))
	 (without (if (not (zerop bits))
		      (char-flipcase (make-char character))
		      (make-char character))))
    (loop for shift below (sys:keyboard-table-shift-index-limit mapping-table)
	  nconc (loop for code below (sys:keyboard-table-key-code-limit mapping-table)
		      when (let ((mapping (sys:map-key-to-software-char shift code
									mapping-table)))
			     (typecase mapping
			       (character (char= mapping without))
			       (integer (= mapping (char-code without)))))
			collect
		   (sys:%logdpbs
		     (sys:%logdpbs
		       (ldb sys:%%kbd-mapping-table-index-symbol shift) sys:%%kbd-shifts-symbol
		       (ldb sys:%%kbd-mapping-table-index-shift shift) sys:%%kbd-shifts-shift
		       bits sys:%%kbd-shifts-bits
		       0)
		     %%kbd-mapping-index-description-shifts
		     code %%kbd-mapping-index-description-key-code
		     0)))))

(defun key-code-for-shift (mapping-table bit-number)
  (dotimes (key-code (sys:keyboard-table-key-code-limit mapping-table))
    (when (let ((mapping (sys:map-key-to-software-char 0 key-code mapping-table)))
	    (and (integerp mapping)
		 (ldb-test sys:%%kbd-mapping-special mapping)
		 (= (ldb sys:%%kbd-mapping-bit-number mapping) bit-number)))
      (return key-code))))

(defun mapping-table-differences (table-1 table-2)
  (let ((shift-limit-1 (sys:keyboard-table-shift-index-limit table-1))
	(shift-limit-2 (sys:keyboard-table-shift-index-limit table-2))
	(code-limit-1 (sys:keyboard-table-key-code-limit table-1))
	(code-limit-2 (sys:keyboard-table-key-code-limit table-2)))
    (loop for code below (max code-limit-1 code-limit-2)
	  nconc (loop for shift below (max shift-limit-1 shift-limit-2)
		      as mapping-1 = (and (< shift shift-limit-1)
					  (< code code-limit-1)
					  (sys:map-key-to-software-char shift code
									table-1))
		      as mapping-2 = (and (< shift shift-limit-2)
					  (< code code-limit-2)
					  (sys:map-key-to-software-char shift code
									table-2))
		      unless (sys:keyboard-table-mapping-equal mapping-1 mapping-2)
			collect (list (sys:%logdpbs
					(sys:%logdpbs
					  (ldb sys:%%kbd-mapping-table-index-symbol shift)
					  sys:%%kbd-shifts-symbol
					  (ldb sys:%%kbd-mapping-table-index-shift shift)
					  sys:%%kbd-shifts-shift
					  0)
					%%kbd-mapping-index-description-shifts
					code %%kbd-mapping-index-description-key-code
					0)
				      mapping-1 mapping-2)))))
