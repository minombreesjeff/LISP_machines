;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(sound-manager
0			 :submodules T
			 :type :linked
			 :include ("<Sound.h>")
			 :default-pathname
			 "SYS:EMBEDDING;MACIVORY;TOOLBOX;SOUND-MANAGER;"
			   ;;"kumquat:mac-4:rlb:rui:"
			 )
  (:glue-submodule (sound-manager-glue :linked "sound-manager-link.c"
				       :auto-load "sound-manager-auto.c"))
  ;; This doesn't really need a submodule, but the macrology is broken to not have it...
  (:submodule (sound-manager-1 :file "sound-manager-1.c")
   ;; First the old sound driver routines
   StartSound
   StopSound
   SoundDone
   GetSoundVol
   SetSoundVol
   ;; And the new Sound Manager routines
   SndPlay
   SndNewChannel
   SndAddModifier
   SndDoCommand
   SndDoImmediate
   SndControl
   SndDisposeChannel
   ))



;; First the old sound driver routines
(deftoolkit StartSound sound-manager
  ((synthrec ptr)
   (numbytes integer-32)
   (completionrtn procptr))
  ()
  #{ { StartSound(synthrec, numbytes, completionrtn);
       RPCValues();
       } }
       )

(deftoolkit StopSound sound-manager
   ()
   ()
   #{ { StopSound();
	RPCValues();
	} }
	)

(deftoolkit SoundDone sound-manager
   ()
   ((donep boolean))
   #{ { Boolean donep = SoundDone();
	RPCValues(donep);
	} }
	)

(deftoolkit GetSoundVol sound-manager
   ()
   ((level integer-16))
   #{ { short level;
   
	GetSoundVol(&level);
	RPCValues(level);
	} }
	)

(deftoolkit SetSoundVol sound-manager
   ((level integer-16))
   ()
   #{ { SetSoundVol(level);
	RPCValues();
	} }
	)


;; And the new Sound Manager routines
(deftoolkit SndPlay sound-manager
   ((channel sndchannelptr)
    (sndhdl handle)
    (async boolean))
   ()
   #{ { OSErr err;

	err = SndPlay(channel, sndhdl, async);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit SndNewChannel sound-manager
   ((chan sndchannelptr)
    (synth integer-16)
    (init integer-32)
    (userroutine procptr))
   ((newchan sndchannelptr))
   #{ { OSErr err;
	SndChannelPtr scp = (SndChannelPtr)chan;
	
	err = SndNewChannel( &scp, synth, init, userroutine);
	if (err) TKError(err);
	RPCValues((long)scp);
	} }
	)

(deftoolkit SndAddModifier sound-manager
   ((chan sndchannelptr)
    (modifier procptr)
    (id integer-16)
    (init integer-32))
   ()
   #{ { OSErr err;

	err = SndAddModifier(chan, modifier, id, init);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit SndDoCommand sound-manager
   ((chan sndchannelptr)
    (cmd sndcommand)
    (nowait boolean))
   ()
   #{ { OSErr err;

	err = SndDoCommand(chan, cmd, nowait);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit SndDoImmediate sound-manager
   ((chan sndchannelptr)
    (cmd sndcommand))
   ()
   #{ { OSErr err;

	err = SndDoImmediate(chan, cmd);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit SndControl sound-manager
   ((id integer-16)
    (cmd sndcommand :output cmdout))
   ((cmdout sndcommand))
   #{ { OSErr err;

	err = SndControl(id, cmd);
	if (err) TKError(err);
	RPCValues(cmd);
	} }
	)

(deftoolkit SndDisposeChannel sound-manager
   ((chan sndchannelptr)
    (quitnow boolean))
   ()
   #{ { OSErr err;

	err = SndDisposeChannel(chan, quitnow);
	if (err) TKError(err);
	RPCValues();
	} }
	)



#||
(write-toolkit-submodule-c-program sound-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program sound-manager-glue "blueberry:mac-4:rlb:rui:")
||#

