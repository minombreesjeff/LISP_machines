;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(scsi-manager
0			 :submodules T
			 :type :linked
			 :include ("<SCSI.h>")
			 :default-pathname
			   "sys:embedding;macivory;toolbox;scsi-manager;"
			 )
  (:glue-submodule (scsi-manager-glue :linked "scsi-manager-link.c"
					  :auto-load  "scsi-manager-auto.c"))
  (:submodule (scsi-manager-1 :file "scsi-manager-1.c")
   SCSIReset
   SCSIGet
   SCSISelect
   SCSICmd
   SCSIRead
   SCSIRBlind
   SCSIWrite
   SCSIWBlind
   SCSIComplete
   SCSIStat
   SCSISelAtn
   SCSIMsgIn
   SCSIMsgOut
   
   ))

(deftoolkit1 SCSIReset0 scsi-manager
   ()
   ()
   #{ { OSErr err;

	err = SCSIReset();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSIGet0 scsi-manager
   ()
   ()
   #{ { OSErr err;

	err = SCSIGet();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSISelect0 scsi-manager
   ((targetid integer-16))
   ()
   #{ { OSErr err;

	err = SCSISelect(targetid);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSICmd0 scsi-manager
   ((buffer ptr)
    (count integer-16))
   ()
   #{ { OSErr err;

	err = SCSICmd(buffer, count);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSIRead0 scsi-manager
   ((tibptr ptr))
   ()
   #{ { OSErr err;

	err = SCSIRead(tibptr);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSIRBlind0 scsi-manager
   ((tibptr ptr))
   ()
   #{ { OSErr err;

	err = SCSIRBlind(tibptr);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSIWrite0 scsi-manager
   ((tibptr ptr))
   ()
   #{ { OSErr err;

	err = SCSIWrite(tibptr);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSIWBlind0 scsi-manager
   ((tibptr ptr))
   ()
   #{ { OSErr err;

	err = SCSIWBlind(tibptr);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSIComplete0 scsi-manager
   ((wait integer-32))
   ((stat integer-16)
    (message integer-16))
   #{ { OSErr err;
	short stat, mes;

	err = SCSIComplete(&stat, &mes, wait);
	if (err) TKError(err);
	RPCValues(stat, mes);
	} }
	)

(deftoolkit1 SCSIStat0 scsi-manager
   ()
   ((bits integer-16))
   #{ { short bits = SCSIStat();
	RPCValues(bits);
	} }
	)

(deftoolkit1 SCSISelAtn0 scsi-manager
   ((targetid integer-16))
   ()
   #{ { OSErr err;

	err = SCSISelAtn(targetid);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 SCSIMsgIn0 scsi-manager
   ()
   ((message integer-16))
   #{ { OSErr err;
	short mes;

	err = SCSIMsgIn(&mes);
	if (err) TKError(err);
	RPCValues(mes);
	} }
	)

(deftoolkit1 SCSIMsgOut0 scsi-manager
   ((message integer-16))
   ()
   #{ { OSErr err;

	err = SCSIMsgOut(message);
	if (err) TKError(err);
	RPCValues();
	} }
	)


#||
(write-toolkit-submodule-c-program scsi-manager-1 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program scsi-manager-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program scsi-manager)
||#
