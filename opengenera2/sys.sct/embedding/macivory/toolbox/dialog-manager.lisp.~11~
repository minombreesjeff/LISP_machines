;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(dialog-manager
0			 :submodules T
			 :type :linked
			 :include ("<Dialogs.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;dialog-manager;"
		       )
  (:glue-submodule (dialog-manager-glue :linked "dialog-manager-link.c"
					:auto-load "dialog-manager-auto.c"))
  (:submodule (dialog-manager-1 :file "dialog-manager-1.c")
   ;; Initialization
   InitDialogs
   ErrorSound
   SetDAFont
   ;; Creating and disposing
   NewDialog
   GetNewDialog
   CloseDialog
   DisposDialog
   CouldDialog
   FreeDialog
   )
  (:submodule (dialog-manager-2 :file "dialog-manager-2.c")
   ;; Handling dialog events
   ModalDialog
   IsDialogEvent
   DialogSelect
   DlgCut
   DlgCopy
   DlgPaste
   DlgDelete
   DrawDialog
   UpdtDialog
   )
  (:submodule (dialog-manager-3 :file "dialog-manager-3.c")
   ;; Invoking alerts
   Alert
   StopAlert
   NoteAlert
   CautionAlert
   CouldAlert
   FreeAlert
   )
  (:submodule (dialog-manager-4 :file "dialog-manager-4.c")
   ;; Manipulating items in dialogs and alerts
   ParamText
   GetDItem
   SetDItem
   HideDItem
   ShowDItem
   FindDItem
   GetIText
   SetIText
   SelIText
   GetAlrtStage
   ResetAlrtStage
   ))

;; Initialization
(deftoolkit1 InitDialogs0 dialog-manager
   ((resumeproc procptr))
   ()
   #{ { InitDialogs(resumeproc);
	RPCValues();
	} }
	)

(deftoolkit1 ErrorSound0 dialog-manager
   ((soundproc procptr))
   ()
   #{ { ErrorSound(soundproc);
	RPCValues();
	} }
	)

(deftoolkit1 SetDAFont0 dialog-manager
   ((fontnum integer-16))
   ()
   #{ { SetDAFont(fontnum);
	RPCValues();
	} }
	)

;; Creating and disposing

(deftoolkit1 NewDialog0 dialog-manager
   ((dstorage ptr)
    (boundsrect rect)
    (title str255)
    (visible boolean)
    (procid integer-16)
    (behind windowptr)
    (goawayflag boolean)
    (refcon integer-32)
    (items handle))
   ((dialogptr dialogptr))
   #{ { DialogPtr dptr;

	dptr = NewDialog(dstorage, boundsrect, title, visible, 
			 procid, behind, goawayflag, refcon, items);
	RPCValues((long)dptr);
	} }
	)

(deftoolkit1 GetNewDialog0 dialog-manager
   ((dialogid integer-16)
    (dstorage ptr)
    (behind windowptr))
   ((dialogptr dialogptr))
   #{ { DialogPtr dptr;

	GetNewDialog(dialogid, dstorage, behind);
	RPCValues((long)dptr);
	} }
	)

(deftoolkit1 CloseDialog0 dialog-manager
   ((thedialog dialogptr))
   ()
   #{ { CloseDialog(thedialog);
	RPCValues();
	} }
	)

(deftoolkit1 DisposDialog0 dialog-manager
   ((thedialog dialogptr))
   ()
   #{ { DisposDialog(thedialog);
	RPCValues();
	} }
	)

(deftoolkit1 CouldDialog0 dialog-manager
   ((dialogid integer-16))
   ()
   #{ { CouldDialog(dialogid);
	RPCValues();
	} }
	)

(deftoolkit1 FreeDialog0 dialog-manager
   ((dialogid integer-16))
   ()
   #{ { FreeDialog(dialogid);
	RPCValues();
	} }
	)



;; Handling dialog events

(deftoolkit1 ModalDialog0 dialog-manager
   ((filterproc procptr))
   ((itemhit integer-16))
   #{ { short itemhit;

	ModalDialog(filterproc, &itemhit);
	RPCValues(itemhit);
	} }
	)

(deftoolkit1 IsDialogEvent0 dialog-manager
   ((theevent eventrecord))
   ((deventp boolean))
   #{ { Boolean deventp = IsDialogEvent(theevent);
	RPCValues(deventp);
	} }
	)

(deftoolkit1 DialogSelect0 dialog-manager
   ((theevent eventrecord))
   ((deventp boolean)
    (thedialog dialogptr)
    (itemhit integer-16))
   #{ { short itemhit;
	DialogPtr thedialog;
	Boolean deventp = DialogSelect(theevent, &thedialog, &itemhit);
	RPCValues(deventp, (long)thedialog, itemhit);
	} }
	)

(deftoolkit1 DlgCut0 dialog-manager
   ((thedialog dialogptr))
   ()
   #{ { DlgCut(thedialog);
	RPCValues();
	} }
	)

(deftoolkit1 DlgCopy0 dialog-manager
   ((thedialog dialogptr))
   ()
   #{ { DlgCopy(thedialog);
	RPCValues();
	} }
	)

(deftoolkit1 DlgPaste0 dialog-manager
   ((thedialog dialogptr))
   ()
   #{ { DlgPaste(thedialog);
	RPCValues();
	} }
	)

(deftoolkit1 DlgDelete0 dialog-manager
   ((thedialog dialogptr))
   ()
   #{ { DlgDelete(thedialog);
	RPCValues();
	} }
	)

(deftoolkit1 DrawDialog0 dialog-manager
   ((thedialog dialogptr))
   ()
   #{ { DrawDialog(thedialog);
	RPCValues();
	} }
	)

(deftoolkit1 UpdtDialog0 dialog-manager
   ((thedialog dialogptr)
    (updateregion rgnhandle))
   ()
   #{ { UpdtDialog(thedialog, updateregion);
	RPCValues();
	} }
	)


;; Invoking alerts
(deftoolkit1 Alert0 dialog-manager
   ((alertid integer-16)
    (filterproc procptr))
   ((itemhit integer-16))
   #{ { short itemhit = Alert(alertid, filterproc);
	RPCValues(itemhit);
	} }
	)

(deftoolkit1 StopAlert0 dialog-manager
   ((alertid integer-16)
    (filterproc procptr))
   ((itemhit integer-16))
   #{ { short itemhit = StopAlert(alertid, filterproc);
	RPCValues(itemhit);
	} }
	)

(deftoolkit1 NoteAlert0 dialog-manager
   ((alertid integer-16)
    (filterproc procptr))
   ((itemhit integer-16))
   #{ { short itemhit = NoteAlert(alertid, filterproc);
	RPCValues(itemhit);
	} }
	)

(deftoolkit1 CautionAlert0 dialog-manager
   ((alertid integer-16)
    (filterproc procptr))
   ((itemhit integer-16))
   #{ { short itemhit = CautionAlert(alertid, filterproc);
	RPCValues(itemhit);
	} }
	)

(deftoolkit1 CouldAlert0 dialog-manager
   ((alertid integer-16))
   ()
   #{ { CouldAlert(alertid);
	RPCValues();
	} }
	)

(deftoolkit1 FreeAlert0 dialog-manager
   ((alertid integer-16))
   ()
   #{ { FreeAlert(alertid);
	RPCValues();
	} }
	)


;; Manipulating items in dialogs and alerts
(deftoolkit1 ParamText0 dialog-manager
   ((param0 str255)
    (param1 str255)
    (param2 str255)
    (param3 str255))
   ()
   #{ { ParamText(param0, param1, param2, param3);
	RPCValues();
	} }
	)

(deftoolkit1 GetDItem0 dialog-manager
   ((thedialog dialogptr)
    (itemno integer-16)
    (box rect))
   ((itemtype integer-16)
    (itemhandle handle)
    (outbox rect :overwrite box))
   #{ { short itemtype;
	Handle itemhandle;
	Rect box;
		
	GetDItem(thedialog, itemno, &itemtype, &itemhandle, &box);
	RPCValues(itemtype, (long)itemhandle, &box);
	} }
	)

(deftoolkit1 SetDItem0 dialog-manager
   ((thedialog dialogptr)
    (itemno integer-16)
    (itemtype integer-16)
    (itemhandle handle)
    (box rect))
   ()
   #{ { SetDItem(thedialog, itemno, itemtype, itemhandle, box);
	RPCValues();
	} }
	)

(deftoolkit1 HideDItem0 dialog-manager
   ((thedialog dialogptr)
    (itemno integer-16))
   ()
   #{ { HideDItem(thedialog, itemno);
	RPCValues();
	} }
	)

(deftoolkit1 ShowDItem0 dialog-manager
   ((thedialog dialogptr)
    (itemno integer-16))
   ()
   #{ { ShowDItem(thedialog, itemno);
	RPCValues();
	} }
	)

(deftoolkit1 FindDItem0 dialog-manager
   ((thedialog dialogptr)
    (thept point))
   ((itemno integer-16))
   #{ { short itemno = FindDItem(thedialog, *(Point *)thept);
	RPCValues(itemno);
	} }
	)

(deftoolkit1 GetIText0 dialog-manager
   ((item handle))
   ((text str255))
   #{ { Str255 str;

	GetIText(item, &str);
	RPCValues(str);
	} }
	)

(deftoolkit1 SetIText0 dialog-manager
   ((item handle)
    (text str255))
   ()
   #{ { SetIText(item, text);
	RPCValues();
	} }
	)

(deftoolkit1 SelIText0 dialog-manager
   ((thedialog dialogptr)
    (itemno integer-16)
    (startsel integer-16)
    (endsel integer-16))
   ()
   #{ { SelIText(thedialog, itemno, startsel, endsel);
	RPCValues();
	} }					
	)

(deftoolkit1 GetAlrtStage0 dialog-manager
   ()
   ((stage integer-16))
   #{ { short stage = GetAlrtStage();
	RPCValues(stage);
	} }
	)

(deftoolkit1 ResetAlrtStage0 dialog-manager
   ()
   ()
   #{ { ResetAlrtStage();
	RPCValues();
	} }
	)



#||
(write-toolkit-submodule-c-program dialog-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program dialog-manager-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program dialog-manager-3 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program dialog-manager-4 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program dialog-manager-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program dialog-manager)
||#

