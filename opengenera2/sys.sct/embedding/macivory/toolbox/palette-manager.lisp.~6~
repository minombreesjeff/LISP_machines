;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(palette-manager
0			 :submodules T
			 :type :linked		
			 :include ("<Quickdraw.h>" "<Palettes.h>")
			 :default-pathname
			 "sys:embedding;macivory;toolbox;palette-manager;"
			 )
  (:glue-submodule (palette-manager-glue :linked "palette-manager-link.c"
					 :auto-load "palette-manager-auto.c"))
  (:submodule (palette-manager-1 :file "palette-manager-1.c")
   ;; Initialization and allocation
   InitPalettes
   NewPalette
   GetNewPalette
   DisposePalette
   ;; Interacting with the window manager
   ActivatePalette
   SetPalette
   GetPalette
   )
  (:submodule (palette-manager-2 :file "palette-manager-2.c")
   ;;drawing with color palettes
   PmForeColor
   PmBackColor
   ;; Color table Animation
   AnimateEntry
   AnimatePalette
   ;; Manipulating Palettes
   GetEntryColor
   SetEntryColor
   GetEntryUsage
   SetEntryUsage
   CTab2Palette
   Palette2CTab
   ))



;; Initialization and allocation
(deftoolkit1 InitPalettes0 palette-manager
  ()
  ()
  #{ { InitPalettes();
       RPCValues();
       } }
       )

(deftoolkit1 NewPalette0 palette-manager
   ((entries integer-16)
    (srccolors ctabhandle)
    (srcusage integer-16)
    (srctolerance integer-16))
   ((palettehndl palettehandle))
   #{ { PaletteHandle ph = NewPalette(entries, srccolors, srcusage, srctolerance);
	RPCValues((long)ph);
	} }
	)

(deftoolkit1 GetNewPalette0 palette-manager
   ((paletteid integer-16))
   ((palettehndl palettehandle))
   #{ { PaletteHandle ph = GetNewPalette(paletteid);
	RPCValues((long)ph);
	} }
	)

(deftoolkit1 DisposePalette0 palette-manager
   ((srcpalette palettehandle))
   ()
   #{ { DisposePalette(srcpalette);
	RPCValues();
	} }
	)

;; Interacting with the window manager
(deftoolkit1 ActivatePalette0 palette-manager
   ((srcwindow windowptr))
   ()
   #{ { ActivatePalette(srcwindow);
	RPCValues();
	} }
	)

(deftoolkit1 SetPalette0 palette-manager
   ((dstwindow windowptr)
    (srcpalette palettehandle)
    (cupdates boolean))
   ()
   #{ { SetPalette(dstwindow, srcpalette, cupdates);
	RPCValues();
	} }
	)

(deftoolkit1 GetPalette0 palette-manager
   ((srcwindow windowptr))
   ((palettehndl palettehandle))
   #{ { PaletteHandle ph = GetPalette(srcwindow);
	RPCValues((long)ph);
	} }
	)




;;drawing with color palettes
(deftoolkit1 PmForeColor0 palette-manager
   ((dstentry integer-16))
   ()
   #{ { PmForeColor(dstentry);
	RPCValues();
	} }
	)

(deftoolkit1 PmBackColor0 palette-manager
   ((dstentry integer-16))
   ()
   #{ { PmBackColor(dstentry);
	RPCValues();
	} }
	)

;; Color table Animation
(deftoolkit1 AnimateEntry0 palette-manager
   ((dstwindow windowptr)
    (dstentry integer-16)
    (srcrgb rgbcolor))
   ()
   #{ { AnimateEntry(dstwindow, dstentry, srcrgb);
	RPCValues();
	} }
	)

(deftoolkit1 AnimatePalette0 palette-manager
   ((dstwindow windowptr)
    (srcctab ctabhandle)
    (srcindex integer-16)
    (dstentry integer-16)
    (dstlength integer-16))
   ()
   #{ { AnimatePalette(dstwindow, srcctab, srcindex, dstentry, dstlength);
	RPCValues();
	} }
	)

;; Manipulating Palettes
(deftoolkit1 GetEntryColor0 palette-manager
   ((srcpalette palettehandle)
    (srcentry integer-16)
    (dstrgbin rgbcolor))
   ((rgbout rgbcolor))
   #{ { RGBColor rgb;
   
	GetEntryColor(srcpalette, srcentry, &rgb);
	RPCValues(&rgb);
	} }
	)

(deftoolkit1 SetEntryColor0 palette-manager
   ((dstpalette palettehandle)
    (dstentry integer-16)
    (srcrgbin rgbcolor))
   ()
   #{ { SetEntryColor(dstpalette, dstentry, srcrgbin);
	RPCValues();
	} }
	)

(deftoolkit1 GetEntryUsage0 palette-manager
   ((srcpalette palettehandle)
    (srcentry integer-16))
   ((dstusage integer-16)
    (dsttolerance integer-16))
   #{ { short usage, tolerance;
   
	GetEntryUsage(srcpalette, srcentry, &usage, &tolerance);
	RPCValues(usage, tolerance);
	} }
	)

(deftoolkit1 SetEntryUsage0 palette-manager
   ((dstpalette palettehandle)
    (dstentry integer-16)
    (srcusage integer-16)
    (srctolerance integer-16))
   ()
   #{ { SetEntryUsage(dstpalette, dstentry, srcusage, srctolerance);
	RPCValues();
	} }
	)

(deftoolkit1 CTab2Palette0 palette-manager
   ((srcctab ctabhandle)
    (dstpalette palettehandle)
    (srcusage integer-16)
    (srctolerance integer-16))
   ()
   #{ { CTab2Palette(srcctab, dstpalette, srcusage, srctolerance);
	RPCValues();
	} }
	)

(deftoolkit1 Palette2CTab0 palette-manager
   ((srcpalette palettehandle)
    (destctab ctabhandle))
   ()
   #{ { Palette2CTab(srcpalette, destctab);
	RPCValues();
	} }
	)



#||
(write-toolkit-submodule-c-program palette-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program palette-manager-2 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program palette-manager-glue "blueberry:mac-4:rlb:rui:")
||#

