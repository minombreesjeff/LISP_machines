;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(color-picker
0			 :submodules T
			 :type :linked		
			 :include ("<Quickdraw.h>" "<Picker.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;color-picker;"
			 )
  (:glue-submodule (color-picker-glue :linked "color-picker-link.c"
				      :auto-load "color-picker-auto.c"))
  (:submodule (color-picker-1 :file "color-picker-1.c")
   GetColor
   Fix2SmallFract
   SmallFract2Fix
   CMY2RGB
   RGB2CMY
   HSL2RGB
   RGB2HSL
   HSV2RGB
   RGB2HSV
   )
  )



(deftoolkit1 GetColor0 color-picker
   ((where point)
    (prompt str255)
    (incolor rgbcolor)
    (outcolor rgbcolor))
   ((normalexitp boolean)
    (colorout rgbcolor :overwrite outcolor))
   #{ { Boolean exitp;
	RGBColor rgb;
	exitp = GetColor(*(Point *)where, prompt, incolor, &rgb);
	RPCValues(exitp, &rgb);
	} }
	)

(deftoolkit1 Fix2SmallFract0 color-picker
   ((f fixed))
   ((s smallfract))
   #{ { SmallFract s = Fix2SmallFract(f);
	RPCValues(s);
	} }
	)

(deftoolkit1 SmallFract2Fix0 color-picker
   ((s smallfract))
   ((f fixed))
   #{ { Fixed f = SmallFract2Fix(s);
	RPCValues(f);
	} }
	)

(deftoolkit1 CMY2RGB0 color-picker
   ((ccolor cmycolor)
    (rcolor rgbcolor))
   ((rcolorout rgbcolor :overwrite rcolor))
   #{ { RGBColor rcolor;
   
	CMY2RGB(ccolor, &rcolor);
	RPCValues(&rcolor);
	} }
	)

(deftoolkit1 RGB2CMY0 color-picker
   ((rcolor rgbcolor)
    (ccolor cmycolor))
   ((ccolorout cmycolor :overwrite ccolor))
   #{ { CMYColor cmy;

	RGB2CMY(rcolor, &cmy);
	RPCValues(&cmy);
	} }
	)

(deftoolkit1 HSL2RGB0 color-picker
   ((hcolor hslcolor)
    (rcolor rgbcolor))
   ((rcolorout rgbcolor :overwrite rcolor))
   #{ { RGBColor rcolor;
   
	HSL2RGB(hcolor, &rcolor);
	RPCValues(&rcolor);
	} }
	)

(deftoolkit1 RGB2HSL0 color-picker
   ((rcolor rgbcolor)
    (hcolor hslcolor))
   ((hcolorout hslcolor :overwrite hcolor))
   #{ { HSLColor hsl;
   
	RGB2HSL(rcolor, &hsl);
	RPCValues(&hsl);
	} }
	)

(deftoolkit1 HSV2RGB0 color-picker
   ((hcolor hsvcolor)
    (rcolor rgbcolor))
   ((rcolorout rgbcolor :overwrite rcolor))
   #{ { RGBColor rgb;

	HSV2RGB(hcolor, &rgb);
	RPCValues(&rgb);
	} }
	)

(deftoolkit1 RGB2HSV0 color-picker
   ((rcolor rgbcolor)
    (hcolor hsvcolor))
   ((hcolorout hsvcolor :overwrite hcolor))
   #{ { HSVColor hsv;

	RGB2HSV(rcolor, &hsv);
	RPCValues(&hsv);
	} }
	)



#||
(write-toolkit-submodule-c-program color-picker-1 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program color-picker-glue "blueberry:mac-4:rlb:rui:")
(write-toolkit-module-c-program color-picker)
||#

