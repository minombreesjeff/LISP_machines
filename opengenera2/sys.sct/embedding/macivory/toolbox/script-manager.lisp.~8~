;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(script-manager
0			 :submodules T
			 :type :linked
			 :include ("<Script.h>")
			 :default-pathname
			   "sys:embedding;macivory;toolbox;script-manager;"
			 )
  (:glue-submodule (script-manager-glue :linked "script-manager-link.c"
					  :auto-load  "script-manager-auto.c"))
  (:submodule (script-manager-1 :file "script-manager-1.c")
   FontScript
   IntlScript
   KeyScript
   CharByte
   CharType
   Pixel2Char
   Char2Pixel
   FindWord
   HiliteText
   DrawJust
   MeasureJust
   )
  (:submodule (script-manager-2 :file "script-manager-2.c")
   Transliterate
   Font2Script
   GetScript
   SetScript
   GetEnvirons
   SetEnvirons
   GetDefFontSize
   GetSysFont
   GetAppFont
   GetMBarHeight
   GetSysJust
   SetSysJust
   ))



(deftoolkit1 FontScript0 script-manager
   ()
   ((scriptcode integer-16))
   #{ { short s = FontScript();
	RPCValues(s);
	} }
	)

(deftoolkit1 IntlScript0 script-manager
   ()
   ((scriptcode integer-16))
   #{ { short s = IntlScript();
	RPCValues(s);
	} }
	)

(deftoolkit1 KeyScript0 script-manager
   ((scriptcode integer-16))
   ()
   #{ { KeyScript(scriptcode);
	RPCValues();
	} }
	)

(deftoolkit1 CharByte0 script-manager
   ((textbuf ptr)
    (textoffset integer-16))
   ((chartype integer-16))
   #{ { short ct = CharByte((Ptr)textbuf, textoffset);
	RPCValues(ct);
	} }
	)

(deftoolkit1 CharType0 script-manager
   ((textbuf ptr)
    (textoffset integer-16))
   ((chartype integer-16))
   #{ { short ct = CharType((Ptr)textbuf, textoffset);
	RPCValues(ct);
	} }
	)

(deftoolkit1 Pixel2Char0 script-manager
   ((textbuf ptr)
    (textlen integer-16)
    (slop integer-16)
    (pixelwidth integer-16))
   ((offset integer-16)
    (leftside-p boolean))
   #{ { short offset;
	Boolean ls;

	offset = Pixel2Char((Ptr)textbuf, textlen, slop, pixelwidth, &ls);
	RPCValues(offset, ls);
	} }
	)

(deftoolkit1 Char2Pixel0 script-manager
   ((textbuf ptr)
    (textlen integer-16)
    (slop integer-16)
    (offset integer-16)
    (direction signedbyte))
   ((pixelwidth integer-16))
   #{ { short pw;

	pw = Char2Pixel((Ptr)textbuf, textlen, slop, offset, direction);
	RPCValues(pw);
	} }
	)

(deftoolkit1 FindWord0 script-manager
   ((textptr ptr)
    (textlength integer-16)
    (offset integer-16)
    (leftside Boolean)
    (breaks breaktable)
    (offsetsin offsettable))
   ((offsetsout offsettable :overwrite offsetsin))
   #{ { OffsetTable ot;

	FindWord((Ptr)textptr, textlength, offset, (Boolean)leftside, breaks, ot);
	RPCValues(&ot);
	} }
	)

(deftoolkit1 HiliteText0 script-manager
   ((textptr ptr)
    (textlength integer-16)
    (firstoffset integer-16)
    (secondoffset integer-16)
    (offsetsin offsettable))
   ((offsetsout offsettable :overwrite offsetsin))
   #{ { OffsetTable ot;

	HiliteText((Ptr)textptr, textlength, firstoffset, secondoffset, ot);
	RPCValues(&ot);
	} }
	)

(deftoolkit1 DrawJust0 script-manager
   ((textptr ptr)
    (textlength integer-16)
    (slop integer-16))
   ()
   #{ { DrawJust((Ptr)textptr, textlength, slop);
	RPCValues();
	} }
	)

(deftoolkit1 MeasureJust0 script-manager
   ((textptr ptr)
    (textlength integer-16)
    (slop integer-16)
    (charlocs ptr))
   ()
   #{ { MeasureJust((Ptr)textptr, textlength, slop, (Ptr)charlocs);
	RPCValues();
	} }
	)




(deftoolkit1 Transliterate0 script-manager
   ((srchandle handle)
    (dsthandle handle)
    (target integer-16)
    (srcmask integer-32))
   ((result integer-16))
   #{ { short r = Transliterate((Handle)srchandle, (Handle)dsthandle, target, srcmask);
	RPCValues(r);
	} }
	)

(deftoolkit1 Font2Script0 script-manager
   ((fontnumber integer-16))
   ((scriptcode integer-16))
   #{ { short s = Font2Script(fontnumber);
	RPCValues(s);
	} }
	)

(deftoolkit1 GetScript0 script-manager
   ((script integer-16)
    (verb integer-16))
   ((param integer-32))
   #{ { long sv = GetScript(script, verb);
	RPCValues(sv);
	} }
	)

(deftoolkit1 SetScript0 script-manager
   ((script integer-16)
    (verb integer-16)
    (param integer-32))
   ()
   #{ { OSErr err = SetScript(script, verb, param);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 GetEnvirons0 script-manager
   ((verb integer-16))
   ((param integer-32))
   #{ { long param = GetEnvirons(verb);
	RPCValues(param);
	} }
	)

(deftoolkit1 SetEnvirons0 script-manager
   ((verb integer-16)
    (param integer-32))
   ()
   #{ { OSErr err = SetEnvirons(verb, param);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 GetDefFontSize0 script-manager
   ()
   ((size integer-16))
   #{ { short size = GetDefFontSize();
	RPCValues(size);
	} }
	)

(deftoolkit1 GetSysFont0 script-manager
   ()
   ((fontnum integer-16))
   #{ { short  fn = GetSysFont();
	RPCValues(fn);
	} }
	)

(deftoolkit1 GetAppFont0 script-manager
   ()
   ((fontnum integer-16))
   #{ { short fn = GetAppFont();
	RPCValues(fn);
	} }
	)

(deftoolkit1 GetMBarHeight0 script-manager
   ()
   ((height integer-16))
   #{ { short ht = GetMBarHeight();
	RPCValues(ht);
	} }
	)

(deftoolkit1 GetSysJust0 script-manager
   ()
   ((just integer-16))
   #{ { short just = GetSysJust();
	RPCValues(just);
	} }
	)

(deftoolkit1 SetSysJust0 script-manager
   ((newjust integer-16))
   ()
   #{ { SetSysJust(newjust);
	RPCValues();
	} }
	)


#||
(write-toolkit-submodule-c-program script-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program script-manager-2 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program script-manager-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program script-manager)
||#
