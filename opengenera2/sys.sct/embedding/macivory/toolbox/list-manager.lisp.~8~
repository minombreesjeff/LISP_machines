;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(list-manager
0			 :submodules T
			 :type :linked
			 :include ("<Lists.h>")
			 :default-pathname
			   "sys:embedding;macivory;toolbox;list-manager;"
			 )
  (:glue-submodule (list-manager-glue :linked "list-manager-link.c"
					  :auto-load  "list-manager-auto.c"))
  (:submodule (list-manager-1 :file "list-manager-1.c")
   ;; Creating, Disposing. Adding and Deleting Rows and Columns.
   LNew
   LDispose
   LAddColumn
   LAddRow
   LDelColumn
   LDelRow
   )
  (:submodule (list-manager-2 :file "list-manager-2.c")
   ;; operations on cells
   LAddToCell
   LClrCell
   LGetCell
   LSetCell
   LCellSize
   LGetSelect
   LSetSelect
   )
  (:submodule (list-manager-3 :file "list-manager-3.c")
   ;; Mouse Location
   LClick
   LLastClick
   LFind
   LNextCell
   LRect
   LSearch
   LSize
   )
  (:submodule (list-manager-4 :file "list-manager-4.c")
   LDraw
   LDoDraw
   LScroll
   LAutoScroll
   LUpdate
   LActivate
   ))



;; Creating, Disposing. Adding and Deleting Rows and Columns.
(deftoolkit LNew list-manager
   ((rview rect)
    (databounds rect)
    (csize Point)
    (theProc integer-16)
    (thewindow windowptr)
    (drawit boolean)
    (hasgrow boolean)
    (scrollhoriz boolean)
    (scrollvert boolean))
   ((listhandle listhandle))
   #{ { ListHandle lh;

	lh = LNew(rview, databounds, *(Point *)csize, theproc, thewindow, 
                  drawit, hasgrow, scrollhoriz,scrollvert);
	RPCValues((long)lh);
	} }
	)

(deftoolkit LDispose list-manager
   ((lhandle listhandle))
   ()
   #{ { LDispose(lhandle);
	RPCValues();
	} }
	)

(deftoolkit LAddColumn list-manager
   ((count integer-16)
    (column integer-16)
    (lhandle listhandle))
   ((firstcolumnno integer-16))
   #{ { short i = LAddColumn(count, column, lhandle);
	RPCValues(i);
	} }
	)

(deftoolkit LAddRow list-manager
   ((count integer-16)
    (rownum integer-16)
    (lhandle listhandle))
   ((firstrownum integer-16))
   #{ { short i = LAddRow(count, rownum, lhandle);
	RPCValues(i);
	} }
	)

(deftoolkit LDelColumn list-manager
   ((count integer-16)
    (column integer-16)
    (lhandle listhandle))
   ()
   #{ { LDelColumn(count, column, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LDelRow list-manager
   ((count integer-16)
    (rownum integer-16)
    (lhandle listhandle))
   ()
   #{ { LDelRow(count, rownum, lhandle);
	RPCValues();
	} }
	)




;; operations on cells
(deftoolkit LAddToCell list-manager
   ((dataptr ptr)
    (datalen integer-16)
    (thecell cell)
    (lhandle listhandle))
   ()
   #{ { LAddToCell(dataptr, datalen, *(Cell *)thecell, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LClrCell list-manager
   ((thecell cell)
    (lhandle listhandle))
   ()
   #{ { LClrCell(*(Cell *)thecell, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LGetCell list-manager
   ((dataptr ptr)
    (datalen integer-16)
    (thecell cell)
    (lhandle listhandle))
   ((datalenout integer-16))
   #{ { LGetCell(dataptr, &datalen, *(Cell *)thecell, lhandle);
	RPCValues(datalen);
	} }
	)

(deftoolkit LSetCell list-manager
   ((dataptr ptr)
    (datalen integer-16)
    (thecell cell)
    (lhandle listhandle))
   ()
   #{ { LSetCell(dataptr, datalen, *(Cell *)thecell, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LCellSize list-manager
   ((csize point)
    (lhandle listhandle))
   ()
   #{ { LCellSize(*(Point *)csize, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LGetSelect list-manager
   ((next boolean)
    (thecellin cell)
    (lhandle listhandle))
   ((selectedp boolean)
    (thecellout cell))
   #{ { long tempcell;
	Boolean sel;

	tempcell = *(long *)thecellin;
	sel = LGetSelect(next, &tempcell, lhandle);
	RPCValues(sel, &tempcell);
	} }
	)

(deftoolkit LSetSelect list-manager
   ((setit boolean)
    (thecell cell)
    (lhandle listhandle))
   ()
   #{ { LSetSelect(setit, *(Cell *)thecell, lhandle);
	RPCValues();
	} }
	)




;; Mouse Location
(deftoolkit LClick list-manager
   ((pt Point)
    (modifiers integer-16)
    (lhandle listhandle))
   ((doubleclickp boolean))
   #{ { Boolean click = LClick(*(Point *)pt, modifiers, lhandle);
	RPCValues(click);
	} }
	)

(deftoolkit LLastClick list-manager
   ((lhandle listhandle))
   ((lastcell cell))
   #{ { Cell lc =  LLastClick(lhandle);
	RPCValues(&lc);
	} }
	)

(deftoolkit LFind list-manager
   ((thecell cell)
    (lhandle listhandle))
   ((offset integer-16)
    (len integer-16))
   #{ { short offset, len;

	LFind(&offset, &len, *(Cell *)thecell, lhandle);
	RPCValues(offset, len);
	} }
	)

(deftoolkit LNextCell list-manager
   ((hnext boolean)
    (vnext boolean)
    (thecellin cell)
    (lhandle listhandle))
   ((cellsleftp boolean)
    (thecellout cell))
   #{ { long cellout;
	Boolean b;

	cellout = *(long *)thecellin;
	b = LNextCell(hnext, vnext, &cellout, lhandle);
	RPCValues(b, &cellout);
	} }
	)

(deftoolkit LRect list-manager
   ((cellrectin rect)
    (thecell cell)
    (lhandle listhandle))
   ((cellrectout rect :overwrite cellrectin))
   #{ { Rect r;

	LRect(&r, *(Cell *)thecell, lhandle);
	RPCValues(&r);
	} }
	)

(deftoolkit LSearch list-manager
   ((dataptr ptr)
    (datalen integer-16)
    (searchproc ptr)
    (thecellin cell)
    (lhandle listhandle))
   ((foundp boolean)
    (thecellout cell))
   #{ { long cellout;
	Boolean b;
	
	cellout = *(long *)thecellin;
	b = LSearch(dataptr, datalen, searchproc, &cellout, lhandle);
	RPCValues(b, &cellout);
	} }
	)

(deftoolkit LSize list-manager
   ((listwidth integer-16)
    (listheight integer-16)
    (lhandle listhandle))
   ()
   #{ { LSize(listwidth, listheight, lhandle);
	RPCValues();
	} }
	)




(deftoolkit LDraw list-manager
   ((thecell cell)
    (lhandle listhandle))
   ()
   #{ { LDraw(*(Cell *)thecell, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LDoDraw list-manager
   ((drawit boolean)
    (lhandle listhandle))
   ()
   #{ { LDoDraw(drawit, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LScroll list-manager
   ((dcols integer-16)
    (drows integer-16)
    (lhandle listhandle))
   ()
   #{ { LScroll(dcols, drows, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LAutoScroll list-manager
   ((lhandle listhandle))
   ()
   #{ { LAutoScroll(lhandle);
	RPCValues();
	} }
	)

(deftoolkit LUpdate list-manager
   ((thergn rgnhandle)
    (lhandle listhandle))
   ()
   #{ { LUpdate(thergn, lhandle);
	RPCValues();
	} }
	)

(deftoolkit LActivate list-manager
   ((act boolean)
    (lhandle listhandle))
   ()
   #{ { LActivate(act, lhandle);
	RPCValues();
	} }
	)


#||
(write-toolkit-submodule-c-program list-manager-1 "host:dsk:macivory development:toolbox:list-manager:")
(write-toolkit-submodule-c-program list-manager-2 "host:dsk:macivory development:toolbox:list-manager:")
(write-toolkit-submodule-c-program list-manager-3 "host:dsk:macivory development:toolbox:list-manager:")
(write-toolkit-submodule-c-program list-manager-4 "host:dsk:macivory development:toolbox:list-manager:")

(write-toolkit-submodule-c-program list-manager-glue "host:dsk:macivory development:toolbox:list-manager:")

(write-toolkit-module-c-program list-manager)
||#
