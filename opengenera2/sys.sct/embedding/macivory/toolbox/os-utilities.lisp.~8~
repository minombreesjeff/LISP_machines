;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(os-utilities
0			 :submodules T
			 :type :linked
			 :include ("<OSUtils.h>")
			 :default-pathname
			 "SYS:EMBEDDING;MACIVORY;TOOLBOX;Os-utilities;"
			 )
  (:glue-submodule (os-utilities-glue :linked "os-utilities-link.c"
				      :auto-load "os-utilities-auto.c"))
  (:submodule (os-utilities-1 :file "os-utilities-1.c")
   ;; Pointer and Handle Manipulation
   HandToHand
   PtrToHand
   PtrToXHand
   HandAndHand
   PtrAndHand
   ;; String Comparison
   EqualString
   UprString
   RelString
   )
  (:submodule (os-utilities-2 :file "os-utilities-2.c")
   ;; Date and Time
   ReadDateTime
   GetDateTime
   SetDateTime
   Date2Secs
   Secs2Date
   GetTime
   SetTime
   ;; Parameter RAM Operations
   InitUtil
   GetSysPPtr
   WriteParam
   )
  (:submodule (os-utilities-3 :file "os-utilities-3.c")
   ;; Queue Manipulation
   Enqueue
   Dequeue
   ;; Trap dispatch utilities
   SetTrapAddress
   GetTrapAddress
   NGetTrapAddress
   NSetTrapAddress
   ;; Misc
   Delay
   SysBeep
   Environs
   Restart
   SetUpA5
   RestoreA5
   ;; Wow 32 bit addressing capability !
   GetMMUMode
   SwapMMUMode
   StripAddress
   ))


;; Pointer and Handle Manipulation

(deftoolkit HandToHand os-utilities
  ((handlein handle))
  ((handleout handle))
  #{ { OSErr err;
       Handle h = (Handle)handlein;
  
       err = HandToHand(&h);
       if (err) TKError(err);
       RPCValues((long)h);
       } }
       )

(deftoolkit PtrToHand os-utilities
   ((srcptr ptr)
    (size integer-32))
   ((newhandle handle))
   #{ { OSErr err;
	Handle h;
   
	err = PtrToHand(srcptr, &h, size);
	if (err) TKError(err);
	RPCValues((long)h);
	} }
	)

(deftoolkit PtrToXHand os-utilities
   ((srcptr ptr)
    (dsthndl handle)
    (size integer-32))
   ()
   #{ { OSErr err;

	err = PtrToXHand(srcptr, dsthndl, size);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit HandAndHand os-utilities
   ((ahndl handle)
    (bhndl handle))
   ()
   #{ { OSErr err;
   
	err = HandAndHand(ahndl, bhndl);
	if (err) TKError(err);
	RPCValues();
	} }
	)
	
(deftoolkit PtrAndHand os-utilities
   ((pntr ptr)
    (hndl Handle)
    (size integer-32))
   ()
   #{ { OSErr err;
   
	err = PtrAndHand(pntr, hndl, size);
	if (err) TKError(err);
	RPCValues();
	} }
	)
	
;; String Comparison
(deftoolkit EqualString os-utilities
   ((astr str255)
    (bstr str255)
    (casesens boolean)
    (diacsens boolean))
   ((equalp boolean))
   #{ { Boolean eq = EqualString(astr, bstr, casesens, diacsens);
	RPCValues(eq);
	} }
	)

(deftoolkit UprString os-utilities
   ((stringin str255 :output stringout)
    (diacsens boolean))
   ((stringout str255))
   #{ { UprString(stringin, diacsens);
	RPCValues(stringin);
	} }
	)


(deftoolkit RelString os-utilities
   ((astr str255)
    (bstr str255)
    (casesens boolean)
    (diacsens boolean))
   ((answer integer-16))
   #{ { short ans = RelString(astr, bstr, casesens, diacsens);
	RPCValues(ans);
	} }
	)


;; Date and Time
(deftoolkit ReadDateTime os-utilities
   ()
   ((secs integer-32))
   #{ { OSErr err;
	long secs;
   
	err = ReadDateTime(&secs);
	if (err) TKError(err);
	RPCValues(secs);
	} }
	)
	
(deftoolkit GetDateTime os-utilities
   ()
   ((secs integer-32))
   #{ {	long secs;
   
	GetDateTime(&secs);
	RPCValues(secs);
	} }
	)
	
(deftoolkit SetDateTime os-utilities
   ((secs integer-32))
   ()
   #{ { OSErr err;
   
	err = SetDateTime(secs);
	if (err) TKError(err);
	RPCValues();
	} }
	)
	
(deftoolkit Date2Secs os-utilities
   ((date datetimerec))
   ((secs integer-32))
   #{ { long secs;

	Date2Secs(date, &secs);
	RPCValues(secs);
	} }
	)

(deftoolkit Secs2Date os-utilities
   ((secs integer-32)
    (datein datetimerec))
   ((dateout datetimerec :overwrite datein))
   #{ { DateTimeRec date;

	Secs2Date(secs, &date);
	RPCValues(&date);
	} }
	)

(deftoolkit GetTime os-utilities
   ((datein datetimerec))
   ((dateout datetimerec :overwrite datein))
   #{ { DateTimeRec date;

	GetTime(&date);
	RPCValues(&date);
	} }
	)

(deftoolkit SetTime os-utilities
   ((date datetimerec))
   ()
   #{ { SetTime(date);
	RPCValues();
	} }
	)

;; Parameter RAM Operations
(deftoolkit InitUtil os-utilities
   ()
   ()
   #{ { OSErr err;
   
	err = InitUtil();
	if (err) TKError(err);
	RPCValues();
	} }
	)
	
(deftoolkit GetSysPPtr os-utilities
   ()
   ((syspptr syspptr))
   #{ { SysPPtr sp = GetSysPPtr();
	RPCValues((long)sp);
	} }
	)

(deftoolkit WriteParam os-utilities
   ()
   ()
   #{ { OSErr err;
   
	err = WriteParam();
	if (err) TKError(err);
	RPCValues();
	} }
	)



;; Queue Manipulation
(deftoolkit Enqueue os-utilities
   ((qentry qelemptr)
    (thequeue qhdrptr))
   ()
   #{ { Enqueue(qentry, thequeue);
	RPCValues();
	} }
	)

(deftoolkit Dequeue os-utilities
   ((qentry qelemptr)
    (thequeue qhdrptr))
   ()
   #{ { OSErr err;
   
	err = Dequeue(qentry, thequeue);
	if (err) TKError(err);
	RPCValues();
	} }
	)
	
;; Trap dispatch utilities
(deftoolkit SetTrapAddress os-utilities
   ((trapaddr integer-32)
    (trapnum integer-16))
   ()
   #{ { SetTrapAddress(trapaddr, trapnum);
	RPCValues();
	} }
	)

(deftoolkit GetTrapAddress os-utilities
   ((trapnum integer-16))
   ((trapaddr integer-32))
   #{ { long trapaddr = GetTrapAddress(trapnum);
	RPCValues(trapaddr);
	} }
	)

(deftoolkit NGetTrapAddress os-utilities
   ((trapnum integer-16)
    (traptype integer-16))
   ((trapaddr integer-32))
   #{ { long trapaddr = NGetTrapAddress(trapnum, traptype);
	RPCValues(trapaddr);
	} }
	)
;;; *** traptype is an enum 
(deftoolkit NSetTrapAddress os-utilities
   ((trapaddr integer-32)
    (trapnum integer-16)
    (traptype integer-16))
   ()
   #{ { NSetTrapAddress(trapaddr, trapnum, traptype);
	RPCValues();
	} }
	)

;; Misc
(deftoolkit Delay os-utilities
   ((numticks integer-32))
   ((finalticks integer-32))
   #{ { long finalticks;

	Delay(numticks, &finalticks);
	RPCValues(finalticks);
	} }
	)

(deftoolkit SysBeep os-utilities
   ((duration integer-16))
   ()
   #{ { SysBeep(duration);
	RPCValues();
	} }
	)

(deftoolkit Environs os-utilities
   ()
   ((rom integer-16)
    (machine integer-16))
   #{ { int rom, mach;

	Environs(&rom, &mach);
	RPCValues(rom, mach);
	} }
	)


;; Wow 32 bit addressing capability !

;; this is contrary to the doc in book V, but it seems to work
(deftoolkit GetMMUMode os-utilities
   ()
   ((mode cardinal-8))
   #{ { Byte mode;

	mode = GetMMUMode();
	RPCValues(mode);
	} }
	)

(deftoolkit SwapMMUMode os-utilities
   ((newmode cardinal-8))
   ((oldmode cardinal-8))
   #{ { Byte mode = newmode;

	SwapMMUMode(&mode);
	RPCValues(mode);
	} }
	)

(deftoolkit StripAddress os-utilities
   ((theaddress Ptr))
   ((strippedaddr Ptr))
   #{ { Ptr newaddr = StripAddress(theaddress);
	RPCValues(newaddr);
	} }
	)





#||
(write-toolkit-submodule-c-program os-utilities-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program os-utilities-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program os-utilities-3 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program os-utilities-glue "blueberry:mac-4:rlb:rui:")
||#
