;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; The following routines are defined with the file-manager 
;;; FSRead, FSWrite, PBOpen, PBClose, PBRead, PBWrite

;;; I haven't the slightest idea how to test this stuff

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(device-manager
0			 :submodules T
			 :type :linked
			 :include ("<Devices.h>")
			 :default-pathname
			 "SYS:EMBEDDING;MACIVORY;TOOLBOX;Device-manager;"
			 )
  (:glue-submodule (device-manager-glue :linked "device-manager-link.c"
					:auto-load "device-manager-auto.c"))
  (:submodule (device-manager-1 :file "device-manager-1.c")
   OpenDriver
   CloseDriver
   Control
   Status
   KillIO
   ;; Low level routines - See also file-manager.lisp
   PBControl
   PBStatus
   PBKillIO
   ;; Accessing a drivers control entry
   GetDCtlEntry
   ))



(deftoolkit OpenDriver device-manager
   ((name str255))
   ((refnum integer-16))
   #{ { OSErr err;
	short refnum;
	err = OpenDriver(name, &refnum);
	if (err) TKError(err);
	RPCValues(refnum);
	} }
	)


(deftoolkit CloseDriver device-manager
   ((refnum integer-16))
   ()
   #{ { OSErr err;

	err = CloseDriver(refnum);
	if (err) TKError(err);
	RPCValues();
	} }
	)


(deftoolkit Control device-manager
   ((refnum integer-16)
    (cscode integer-16)
    (csparamptr ptr))
   ()
   #{ { OSErr err;

	err = Control(refnum, cscode, csparamptr);
	if (err) TKError(err);
	RPCValues();
	} }
	)


(deftoolkit Status device-manager
   ((refnum integer-16)
    (cscode integer-16)
    (csparamptr ptr))
   ()
   #{ { OSErr err;

	err = Status(refnum, cscode, csparamptr);
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit KillIO device-manager
   ((refnum integer-16))
   ()
   #{ { OSErr err;

	err = KillIO(refnum);
	if (err) TKError(err);
	RPCValues();
	} }
	)


;; Low level routines - See also file-manager.lisp


(deftoolkit-pb PBControl device-manager
  (:routine #{PBControl})
  (:structure cntrlparam)
  (:arguments
    (completion #{ioCompletion} :cast #{(ProcPtr)})
    (vrefnum #{ioVRefNum})
    (refnum #{ioCRefNum})
    (code #{csCode})
    (param #{csParam})
    )
  (:values ))


(deftoolkit-pb PBStatus device-manager
  (:routine #{PBStatus})
  (:structure cntrlparam)
  (:arguments
    (completion #{ioCompletion} :cast #{(ProcPtr)})
    (vrefnum #{ioVRefNum})
    (refnum #{ioCRefNum})
    (code #{csCode})
    )
  (:values
    (param #{csParam})))

(deftoolkit-pb PBKillIO device-manager
  (:routine #{PBKillIO})
  (:structure cntrlparam)
  (:arguments
    (completion #{ioCompletion} :cast #{(ProcPtr)})
    (refnum #{ioCRefNum})
    )
  (:values
    (param #{csParam})))

;; Accessing a drivers control entry
(deftoolkit GetDCtlEntry device-manager
   ((refnum integer-16))
   ((controlhandle dctlhandle))
   #{ { DCtlHandle ctlhdl =  GetDCtlEntry(refnum);
	RPCValues((long)ctlhdl);
	} }
	)




#||
(write-toolkit-submodule-c-program device-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program device-manager-glue "blueberry:mac-4:rlb:rui:")
||#
