;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#|
(define-remote-type D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")CSpecArray0 ()
  (:abbreviation-for '(vector colorspec 1)))

|#


(define-toolkit-module 1(color-manager
0			 :submodules T
			 :type :linked		
			 :include ( "<Quickdraw.h>")
			 :default-pathname
			 "sys:embedding;macivory;toolbox;color-manager;"
			 )
  (:glue-submodule (color-manager-glue :linked "color-manager-link.c"
				       :auto-load "color-manager-auto.c"))
  (:submodule (color-manager-1 :file "color-manager-1.c")
   ;; color conversion
   Color2Index
   Index2Color
   InvertColor
   RealColor
   GetSubTable
   MakeITable
   )
  (:submodule (color-manager-2 :file "color-manager-2.c")
   ;; Color Table Management
   GetCTSeed
   ProtectEntry
   ReserveEntry
   SetEntries
   RestoreEntries
   SaveEntries
   )
  (:submodule (color-manager-3 :file "color-manager-3.c")
   ;; Operations on Search and Complement Procedures
   AddSearch
   AddComp
   DelSearch
   DelComp
   SetClientID
   ;; error handling
   QDError
   ))



(deftoolkit1 Color2Index0 color-manager
   ((rgb rgbcolor))
   ((index integer-32))
   #{ { long index = Color2Index(rgb);
	RPCValues(index);
	} }
	)

(deftoolkit1 Index2Color0 color-manager
   ((index integer-32)
    (rgbin rgbcolor))
   ((rgbout rgbcolor :overwrite rgbin))
   #{ { RGBColor rgb;
   
	Index2Color(index, &rgb);
	RPCValues(&rgb);
	} }
	)

(deftoolkit1 InvertColor0 color-manager
   ((rgbin rgbcolor))
   ((rgbout rgbcolor :overwrite rgbin))
   #{ { RGBColor rgb;
   
	InvertColor(&rgb);
	RPCValues(&rgb);
	} }
	)

(deftoolkit1 RealColor0 color-manager
   ((color rgbcolor))
   ((realp boolean))
   #{ { Boolean realp = RealColor(color);
	RPCValues(realp);
	} }
	)

(deftoolkit1 GetSubTable0 color-manager
   ((mycolor CTabHandle)
    (itabres integer-16)
    (targettbl ctabhandle))
   ()
   #{ { GetSubTable(mycolor, itabres, targettbl);
	RPCValues();
	} }
	)

(deftoolkit1 MakeITable0 color-manager
   ((colortab ctabhandle)
    (inversetab itabhandle)
    (res integer-16))
   ()
   #{ { MakeITable(colortab, inversetab, res);
	RPCValues();
	} }
	)




(deftoolkit1 GetCTSeed0 color-manager
   ()
   ((seed integer-32))
   #{ { long seed = GetCTSeed();
	RPCValues(seed);
	} }
	)

(deftoolkit1 ProtectEntry0 color-manager
   ((index integer-16)
    (protect boolean))
   ()
   #{ { ProtectEntry(index, protect);
	RPCValues();
	} }
	)

(deftoolkit1 ReserveEntry0 color-manager
   ((index integer-16)
    (reserve boolean))
   ()
   #{ { ReserveEntry(index, reserve);
	RPCValues();
	} }
	)

(deftoolkit1 SetEntries0 color-manager
   ((start integer-16)
    (count integer-16)
    (atable cspecarray))  ;; atable is really a pointer
   ()
   #{ { SetEntries(start, count, atable);
	RPCValues();
	} }
	)

(deftoolkit1 RestoreEntries0 color-manager
   ((srctable ctabhandle)
    (dsttable ctabhandle)
    (selection reqlistrec :output selectionout))
   ((selectionout reqlistrec))
   #{ { RestoreEntries(srctable, dsttable, selection);
	RPCValues(selection);
	} }
	)

(deftoolkit1 SaveEntries0 color-manager
   ((srctable ctabhandle)
    (resulttable ctabhandle)
    (selection reqlistrec :output selectionout))
   ((selectionout reqlistrec))
   #{ { SaveEntries(srctable, resulttable, selection);
	RPCValues(selection);
	} }
	)


;; Operations on Search and Complement Procedures
(deftoolkit1 AddSearch0 color-manager
   ((searchproc procptr))
   ()
   #{ { AddSearch(searchproc);
	RPCValues();
	} }
	)

(deftoolkit1 AddComp0 color-manager
   ((compproc procptr))
   ()
   #{ { AddComp(compproc);
	RPCValues();
	} }
	)

(deftoolkit1 DelSearch0 color-manager
   ((searchproc procptr))
   ()
   #{ { DelSearch(searchproc);
	RPCValues();
	} }
	)

(deftoolkit1 DelComp0 color-manager
   ((compproc procptr))
   ()
   #{ { DelComp(compproc);
	RPCValues();
	} }
	)

(deftoolkit1 SetClientID0 color-manager
   ((id integer-16))
   ()
   #{ { SetClientID(id);
	RPCValues();
	} }
	)

;; error handling
(deftoolkit1 QDError0 color-manager
   ()
   ((qderr integer-16))
   #{ { short qderr = QDError();
	RPCValues(qderr);
	} }
	)



#||
(write-toolkit-submodule-c-program color-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program color-manager-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program color-manager-3 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program color-manager-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program color-manager)
||#
