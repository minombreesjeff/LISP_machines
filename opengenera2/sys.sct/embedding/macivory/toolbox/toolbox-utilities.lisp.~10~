;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(toolbox-utilities
0			 :submodules T
			 :type :linked
			 :include ("<ToolUtils.h>")
			 :default-pathname
			 "SYS:EMBEDDING;MACIVORY;TOOLBOX;Toolbox-utilities;"
			 )
  (:glue-submodule (toolbox-utilities-glue :linked "toolbox-utilities-link.c"
					   :auto-load "toolbox-utilities-auto.c"))
  (:submodule (toolbox-utilities-1 :file "toolbox-utilities-1.c")
   ;; FixedPoint Arithmetic
   FixRatio
   FixMul
   FixRound
   ;; String Manipulation
   NewString
   SetString
   GetString
   GetIndString
   ;; Byte Manipulation
   Munger
   PackBits
   UnpackBits
   )
  (:submodule (toolbox-utilities-2 :file "toolbox-utilities-2.c")
   ;; Bit Manipulation
   BitTst
   BitSet
   BitClr
   ;;Logical Operations
   BitAnd
   BitOr
   BitXor
   BitNot
   BitShift
   ;; Operations on Long Integers
   HiWord
   LoWord
   LongMul
   )
  (:submodule (toolbox-utilities-3 :file "toolbox-utilities-3.c")
   ;; Graphics Utilities
   ScreenRes
   GetIcon
   PlotIcon
   GetPattern
   GetIndPattern
   GetCursor
   ShieldCursor
   GetPicture
   ;; Misc
   DeltaPoint
   SlopeFromAngle
   AngleFromSlope
   )
  (:submodule (toolbox-utilities-4 :file "toolbox-utilities-4.c")
   ;; The new Arithmetic and Conversion functions from Book IV
   FracMul
   FixDiv
   FracDiv
   FracSqrt
   FracCos
   FracSin
   FixATan2
   ;;Conversion
   Long2Fix
   Fix2Long
   Fix2Frac
   Frac2Fix
   Fix2X
   X2Fix
   Frac2X
   X2Frac

   ;; A version of UnpackBits that works by rows
   UnpackBitsByRows   
   ))



(deftoolkit FixRatio toolbox-utilities
   ((numer integer-16)
    (denom integer-16))
   ((fixed fixed))
   #{ { Fixed fxd = FixRatio(numer, denom);
	RPCValues(fxd);
	} }
	)

(deftoolkit FixMul toolbox-utilities
   ((a fixed)
    (b fixed))
   ((answer fixed))
   #{ { Fixed answer = FixMul(a, b);
	RPCValues(answer);
	} }
	)

(deftoolkit FixRound toolbox-utilities
   ((x fixed))
   ((int integer-16))
   #{ { short ans = FixRound(x);
	RPCValues(ans);
	} }
	)

;; String Manipulation
(deftoolkit NewString toolbox-utilities
   ((thestring str255))
   ((strhandle stringhandle))
   #{ { StringHandle str = NewString(thestring);
	RPCValues((long)str);
	} }
	)

(deftoolkit SetString toolbox-utilities
   ((h stringhandle)
    (thestring str255))
   ()
   #{ { SetString(h, thestring);
	RPCValues();
	} }
	)

(deftoolkit GetString toolbox-utilities
   ((stringid integer-16))
   ((strhandle stringhandle))
   #{ { StringHandle str = GetString(stringid);
	RPCValues((long)str);
	} }
	)

(deftoolkit GetIndString toolbox-utilities
   ((stringin str255)
    (strlistid integer-16)
    (index integer-16))
   ((stringout str255 :overwrite stringin))
   #{ { Str255 str;
   
	GetIndString(str, strlistid, index);
	RPCValues(str);
	} }
	)

;; Byte Manipulation
(deftoolkit Munger toolbox-utilities
   ((h handle)
    (offset integer-32)
    (ptr1 ptr)
    (len1 integer-32)
    (ptr2 ptr)
    (len2 integer-32))
   ((answer integer-32))
   #{ { long ans = Munger(h, offset, ptr1, len1, ptr2, len2);
	RPCValues(ans);
	} }
	)

(deftoolkit PackBits toolbox-utilities
   ((srcptrin ptr)
    (dstptrin ptr)
    (srcbytes integer-16))
   ((srcptrout ptr)
    (dstptrout ptr))
   #{ { Ptr srcout, dstout;

	srcout = (Ptr)srcptrin;
	dstout = (Ptr)dstptrin;
	PackBits(&srcout, &dstout, srcbytes);
	RPCValues((long)srcout, (long)dstout);
	} }
	)

(deftoolkit UnpackBits toolbox-utilities
   ((srcptrin ptr)
    (dstptrin ptr)
    (srcbytes integer-16))
   ((srcptrout ptr)
    (dstptrout ptr))
   #{ { Ptr srcout, dstout;

	srcout = (Ptr)srcptrin;
	dstout = (Ptr)dstptrin;
	UnpackBits(&srcout, &dstout, srcbytes);
	RPCValues((long)srcout, (long)dstout);
	} }
	)




;; Bit Manipulation
(deftoolkit BitTst toolbox-utilities
   ((byteptr ptr)
    (bitnum integer-32))
   ((resultp boolean))
   #{ { Boolean res =  BitTst(byteptr, bitnum);
	RPCValues(res);
	} }
	)

(deftoolkit BitSet toolbox-utilities
   ((byteptr ptr)
    (bitnum integer-32))
   ()
   #{ { BitSet(byteptr, bitnum);
	RPCValues();
	} }
	)

(deftoolkit BitClr toolbox-utilities
   ((byteptr ptr)
    (bitnum integer-32))
   ()
   #{ { BitClr(byteptr, bitnum);
	RPCValues();
	} }
	)

;;Logical Operations
(deftoolkit BitAnd toolbox-utilities
   ((value1 integer-32)
    (value2 integer-32))
   ((result integer-32))
   #{ { long res = BitAnd(value1, value2);
	RPCValues(res);
	} }
	)

(deftoolkit BitOr toolbox-utilities
   ((value1 integer-32)
    (value2 integer-32))
   ((result integer-32))
   #{ { long res = BitOr(value1, value2);
	RPCValues(res);
	} }
	)

(deftoolkit BitXor toolbox-utilities
   ((value1 integer-32)
    (value2 integer-32))
   ((result integer-32))
   #{ { long res = BitXor(value1, value2);
	RPCValues(res);
	} }
	)

(deftoolkit BitNot toolbox-utilities
   ((value integer-32))
   ((result integer-32))
   #{ { long res = BitNot(value);
	RPCValues(res);
	} }
	)

(deftoolkit BitShift toolbox-utilities
   ((value integer-32)
    (count integer-16))
   ((result integer-32))
   #{ { long res = BitShift(value, count);
	RPCValues(res);
	} }
	)

;; Operations on Long Integers
(deftoolkit HiWord toolbox-utilities
   ((x integer-32))
   ((hiword integer-16))
   #{ { short hi = HiWord(x);
	RPCValues(hi);
	} }
	)

(deftoolkit LoWord toolbox-utilities
   ((x integer-32))
   ((loword integer-16))
   #{ { short lo = LoWord(x);
	RPCValues(lo);
	} }
	)

(deftoolkit LongMul toolbox-utilities
   ((a integer-32)
    (b integer-32))
   ((answer int64bit))
   #{ { Int64Bit ans;

	LongMul(a, b, &ans);
	RPCValues(&ans);
	} }
	)



;; Graphics Utilities
(deftoolkit ScreenRes toolbox-utilities
   ()
   ((scrnhres integer-16)
    (screenvres integer-16))
   #{ { short h, v;

	ScreenRes(&h, &v);
	RPCValues(h, v);
	} }
	)

(deftoolkit GetIcon toolbox-utilities
   ((iconid integer-16))
   ((iconhandle handle))
   #{ { Handle h = GetIcon(iconid);
	RPCValues((long)h);
	} }
	)

(deftoolkit PlotIcon toolbox-utilities
   ((therect rect)
    (theicon handle))
   ()
   #{ { PlotIcon(therect, theicon);
	RPCValues();
	} }
	)

(deftoolkit GetPattern toolbox-utilities
   ((patid integer-16))
   ((phandle pathandle))
   #{ { PatHandle h = GetPattern(patid);
	RPCValues((long)h);
	} }
	)

(deftoolkit GetIndPattern toolbox-utilities
   ((thepattern pattern)
    (patlistid integer-16)
    (index integer-16))
   ((thepatternout pattern :overwrite thepattern))
   #{ { Pattern pat;

	GetIndPattern(&pat, patlistid, index);
	RPCValues(&pat);
	} }
	)

(deftoolkit GetCursor toolbox-utilities
   ((cursorid integer-16))
   ((chandle curshandle))
   #{ { CursHandle ch = GetCursor(cursorid);
	RPCValues((long)ch);
	} }
	)

(deftoolkit ShieldCursor toolbox-utilities
   ((shieldrect rect)
    (offsetpt point))
   ()
   #{ { ShieldCursor(shieldrect, *(Point *)offsetpt);
	RPCValues();
	} }
	)

(deftoolkit GetPicture toolbox-utilities
   ((picid integer-16))
   ((phandle pichandle))
   #{ { PicHandle ph = GetPicture(picid);
	RPCValues((long)ph);
	} }
	)

;; Misc
(deftoolkit DeltaPoint toolbox-utilities
   ((pta point)
    (ptb point))
   ((longresult integer-32))
   #{ { long res = DeltaPoint(*(Point *)pta, *(Point *)ptb);
	RPCValues(res);
	} }
	)

(deftoolkit SlopeFromAngle toolbox-utilities
   ((angle integer-16))
   ((slope fixed))
   #{ { Fixed sl = SlopeFromAngle(angle);
	RPCValues(sl);
	} }
	)

(deftoolkit AngleFromSlope toolbox-utilities
   ((slope fixed))
   ((angle integer-16))
   #{ { int angle = AngleFromSlope(slope);
	RPCValues(angle);
	} }
	)

(deftoolkit 1UnpackBitsByRows0 toolbox-utilities
   ((srcptrin ptr)
    (dstptrin ptr)
    (rowbytes integer-16)
    (nrows integer-16))
   ((srcptrout ptr)
    (dstptrout ptr))
   #{ { Ptr srcout, dstout;
	short row;

	srcout = (Ptr)srcptrin;
	dstout = (Ptr)dstptrin;
	
	for(row=0; row<nrows; 
	     row++) {
	  UnpackBits(&srcout, &dstout, rowbytes);
	  }
	RPCValues((long)srcout, (long)dstout);
	} }
	)


;; Thew new Arithmetic and Conversion functions from Book IV

;; Say how do we handle the type conversion problems anyway?
;FracMul
;FixDiv
;FracDiv
;FracSqrt
;FracCos
;FracSin
;FixATan2
;;;Conversion
;Long2Fix
;Fix2Long
;Fix2Frac
;Frac2Fix
;Fix2X
;X2Fix
;Frac2X
;X2Frac



#||
(write-toolkit-submodule-c-program toolbox-utilities-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program toolbox-utilities-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program toolbox-utilities-3 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program toolbox-utilities-4 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program toolbox-utilities-glue "blueberry:mac-4:rlb:rui:")
||#
