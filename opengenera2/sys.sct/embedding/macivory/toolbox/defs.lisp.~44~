;;; -*- Mode: LISP; Syntax: Lisp+c; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-remote-error D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")file-os-error0 nil
  (:number -69)
  (:arguments
    (os-code integer-32))
  (:handler
    (signal-mac-os-error os-code))
  )

;; I forget what DCP called these
(defmacro 1with-restart0 ((&optional name) &body body)
  (check-type name symbol)
  (let ((restart-block-name (gensym)))
    `(block ,restart-block-name
       (tagbody
	 ,(or name '.restart.)
	 (return-from ,restart-block-name (progn ,@body))))))

(defmacro 1restart0 (&optional name)
  (check-type name symbol)
  `(go ,(or name '.restart.)))

(defun 1make-str2550 (&optional initial-contents on-data-stack)
  (let ((str (if on-data-stack
		 (sys:make-stack-array 256 :element-type 'string-char :fill-pointer 0)
		 (make-array 256 :element-type 'string-char :fill-pointer 0))))
    (when initial-contents
      (setf (fill-pointer str) (length initial-contents))
      (replace str initial-contents))
    str))

(defmacro 1with-str2550 ((var &optional initial-contents) &body body)
  `(sys:with-data-stack
     (let ((,var (make-str255 ,initial-contents :stack)))
       ,@body)))

;; So stack-let can work
(pushnew '(make-str255 0 1 with-str255) si:*STACK-LET-OPERATIONS*
	 :test #'equal)

(defvar 1*mac-toolkit-managers*0 ())

(defflavor 1mac-toolkit-manager
0	((name)
	 type
	 (submodules ())
	 (glue-submodule)
	 (options ())
	 (include ())
	 entries
	 (default-pathname))
	()
  :initable-instance-variables
  :writable-instance-variables
  )

(defmethod 1(sys:print-self mac-toolkit-manager)0 (stream print-depth slashify-p)
  (ignore print-depth slashify-p)
  (si:printing-random-object (self stream :typep)
    (prin1 name stream)))

(defmacro 1define-mac-toolkit-managers0 (&rest manager-names)
  `(define-mac-toolkit-managers-1 ',manager-names))

(defun 1define-mac-toolkit-managers-10 (manager-names)
  (labels ((manager-name (name)
	     (typecase name
	       (symbol name)
	       (list
		 (second name))))
	   (manager-type (name)
	     (typecase name
	       (symbol nil)
	       (list
		 (case (first name)
		   (unused :unused)))))
	   (manager-has-changed-p (old-manager new-name)
	     (let ((old-name (mac-toolkit-manager-name old-manager))
		   (old-type (if (boundp-in-instance old-manager 'type)
				 (mac-toolkit-manager-type old-manager)
				 :unused)))
	       (or (not (eql (manager-name new-name) old-name))
		   (case old-type
		     (:unused
		       (not (eql (manager-type new-name) :unused)))
		     (otherwise
		       (not (null (manager-type new-name)))))))))
    ;; Verify the syntax of the manager names.
    (dolist (entry manager-names)
      (check-type entry (or symbol
			    (and list (satisfies (lambda (x)
						   (and (member (first x) '(unused))
							(symbolp (second x)))))))
		  "a symbol or (UNUSED symbol)"))
    (let ((losers
	    (loop for old-manager in *mac-toolkit-managers*
		  for new-name in manager-names
		  when (manager-has-changed-p old-manager new-name)
		    nconc (list new-name))))
      (when losers
	(unless fs:this-is-a-patch-file
	  (unless (yes-or-no-p "Redefining Mac Toolkit Manager~a ~{~s to ~s~^, ~}"
			       (if (> (length losers) 2) "s" "")
			       losers)
	    (return-from define-mac-toolkit-managers-1 nil)))))
    (loop for manager-loc on *mac-toolkit-managers*
	  for new-manager-name in manager-names
	  do
      (when (manager-has-changed-p (first manager-loc) new-manager-name)
	(setf (first manager-loc)
	      (make-instance 'mac-toolkit-manager :name (manager-name new-manager-name)
						  :type (manager-type new-manager-name)))))
    (let ((number-of-old-ones (length *mac-toolkit-managers*))
	  (number-of-new-ones (length manager-names)))
      (cond ((> number-of-new-ones number-of-old-ones)
	     (setq *mac-toolkit-managers*
		   (copy-list (nconc *mac-toolkit-managers*
				     (mapcar (lambda (name)
					       (make-instance 'mac-toolkit-manager
							      :name (manager-name name)
							      :type (manager-type name)))
					     (nthcdr number-of-old-ones manager-names))))))
	    ((< number-of-new-ones number-of-old-ones)
	     (setq *mac-toolkit-managers*
		   (nbutlast *mac-toolkit-managers*
			     (- number-of-old-ones number-of-new-ones)))))))
  ())

(defun 1find-mac-toolkit-manager0 (manager-name &key (if-not-found :error))
  (check-type if-not-found (or null (member :error)))
  (with-restart ()
    (let ((manager (find manager-name *mac-toolkit-managers* :key #'mac-toolkit-manager-name)))
      (cond (manager manager)
	    ((null if-not-found) ())
	    (T (cerror "Check again (presumably after loading definition)"
		       "The Mac toolkit manager ~s is undefined" manager-name)
	       (restart))))))

(defun 1find-mac-toolkit-submodule0 (submodule-name &key (if-not-found :error))
  (declare (values submodule manager))
  (check-type if-not-found (or null (member :error)))
  (with-restart ()
    (dolist (manager *mac-toolkit-managers*)
      (let ((submodule (find submodule-name (mac-toolkit-manager-submodules manager)
			     :key #'first)))
	(when submodule
	  (return-from find-mac-toolkit-submodule (values submodule manager))))
      (let ((glue-submodule (mac-toolkit-manager-glue-submodule manager)))
	(when (eql submodule-name (first glue-submodule))
	  (return-from find-mac-toolkit-submodule (values glue-submodule manager)))))
    (when if-not-found
      (cerror "Check again (presumably after loading definition)"
	      "The Mac toolkit submodule ~s is undefined" submodule-name)
      (restart))))

(defun 1find-mac-toolkit-entry0 (entry-name &key (if-not-found :error))
  (declare (values entry submodule manager))
  (check-type if-not-found (or null (member :error)))
  (assert (and (symbolp entry-name) (not (eql (aref (string entry-name) 0) #\_))))
  (with-restart ()
    (dolist (manager *mac-toolkit-managers*)
      (dolist (submodule (mac-toolkit-manager-submodules manager))
	(when (member entry-name (getf (rest submodule) :entries))
	  (return-from find-mac-toolkit-entry (values entry-name submodule manager)))))
    (when if-not-found
      (cerror "Check again (presumably after loading definition)"
	      "The Mac toolkit entry ~s is undefined" entry-name)
      (restart))))

(defun 1define-mac-toolkit-10 (manager-name
			     &key
			     (type () type-p)
			     (options () options-p)
			     (include () include-p)
			     ((:routines entries) () entries-p)
			     (submodules () submodules-p)
			     (glue-submodule () glue-submodule-p)
			     (default-pathname () default-pathname-p))
  (let ((manager (find-mac-toolkit-manager manager-name)))
    (macrolet ((set-it (&rest vals)
		 `(progn
		    ,@(domap 'list ((val vals))
			(let ((val-p (fintern "~a-P" val))
			      (accessor (fintern "MAC-TOOLKIT-MANAGER-~a" val)))
			  `(when ,val-p (setf (,accessor manager) ,val)))))))
      (set-it type options include entries submodules glue-submodule default-pathname)))
  manager-name)

(defun 1mac-toolkit-manager-number0 (manager-name)
  ;; ---Consider maintaining this within the manager instance
  (1+ (position (etypecase manager-name
		  (symbol (find-mac-toolkit-manager manager-name))
		  (mac-toolkit-manager manager-name))
		*mac-toolkit-managers*)))

(defun 1mac-toolkit-entry-number0 (manager-name entry-name)
  (let* ((manager (find-mac-toolkit-manager manager-name))
	 (entries (mac-toolkit-manager-entries manager)))
    (assert (not (null entries)))
    (let ((entry-number (position entry-name entries)))
      (cond (entry-number
	     (1+ entry-number))
	    (T
	     (error "Cannot find entry ~s for Mac toolkit manager ~s"
		    entry-name manager-name))))))

(defun 1lisp-name-for-toolkit-entry-name0 (entry-name)
  (assert (not (eql (aref (string entry-name) 0) #\_)))
  (fintern "_~a" entry-name))
(defun 1toolkit-entry-name-for-lisp-name0 (underscored-lisp-name)
  (check-type underscored-lisp-name symbol)
  (assert (eql (aref (string underscored-lisp-name) 0) #\_))	;---better err msg?
  (intern (subseq (string underscored-lisp-name) 1)))

(defun 1lisp-name-for-toolkit-manager-name0 (manager-name)
  (fintern "_~a" manager-name))

(defmacro 1define-toolkit-module0 ((manager-name &rest options) &body submodules)
  (declare (arglist (manager-name &key version submodules type include file default-pathname)
		    &body submodules))
  (if submodules
      (define-toolkit-submodules-1 manager-name options submodules)
      (define-toolkit-nosubmodules-1 manager-name options submodules)))

(defun 1define-toolkit-nosubmodules-10 (manager-name options routines)
  (destructuring-bind (&key (version 1) type include file) options
    (when (null type)
      (cerror "Assume :TYPE :LINKED"
	      ":TYPE must be specified")
      (setq type :linked))
    (when (null file)
      (error ":FILE must be specified"))
    (let ((module-name (lisp-name-for-toolkit-manager-name manager-name))
	  (module-number (+ #x7F000200 (mac-toolkit-manager-number manager-name))))
      `(progn
	 (export ',(mapcar #'lisp-name-for-toolkit-entry-name routines))
	 (eval-when (eval compile load)
	   (define-mac-toolkit-1 ',manager-name
				 :type ',type
				 :options ',options
				 :include ',include
				 :routines ',routines
				 :submodules ()
				 :glue-submodule ())
	   (define-remote-module ,module-name
				 (:number ,module-number)
	     (:version ,version)
	     (:server :c)
	     (:client :lisp))
	   )))))

(defun 1define-toolkit-submodules-10 (manager-name options submodules)
  (destructuring-bind (&key (version 1) type include ((:submodules ignore)) default-pathname)
      options
    (when (null type)
      (cerror "Assume :TYPE :LINKED"
	      ":TYPE must be specified")
      (setq type :linked))
    (unless (every (lambda (x) (and (consp x)
				    (member (first x) '(:submodule :glue-submodule))))
		   submodules)
      (error "Each submodule must be a list starting with :SUBMODULE or :GLUE-SUBMODULE"))
    (unless (= 1 (count :glue-submodule submodules :key #'first))
      (error "There must be exactly one :GLUE-SUBMODULE"))

    (let* ((glue-submodule
	     (let ((glue-spec (assoc :glue-submodule submodules)))
	       (destructuring-bind ((submodule-name &key file auto-load linked))
		   (rest glue-spec)
		 (when file
		   (warn ":FILE is obsolete: please specify :AUTO-LOAD or :LINKED (or both).  Assuming :LINKED, for ~s"
			 glue-spec))
		 `(,submodule-name :glue-submodule T
		   ,@(and (or linked file) `(:linked ,(or linked file)))
		   ,@(and auto-load `(:auto-load ,auto-load))))))
	   (the-submodules
	     (delete nil
		     (domap 'list ((submodule submodules))
		       (ecase (first submodule)
			 (:glue-submodule )
			 (:submodule
			   (destructuring-bind (ignore (name &key file) &rest entries)
			       submodule
			     (when (null file)
			       (error "Must specify :FILE for ~s" submodule))
			     (unless (every #'symbolp entries)
			       (error "Submodule entries must be symbols ~s" entries))
			     `(,name :file ,file :entries ,entries)))))))
	   (all-entries
	     (reduce #'append (domap 'list ((s the-submodules))
				(getf (rest s) :entries)))))
      (let ((module-name (lisp-name-for-toolkit-manager-name manager-name))
	    (module-number (+ #x7F000200 (mac-toolkit-manager-number manager-name))))
	`(progn
	   (export ',(mapcar #'lisp-name-for-toolkit-entry-name all-entries))
	   (eval-when (eval compile load)
	     (define-mac-toolkit-1 ',manager-name
				   :include ',include
				   :type ',type
				   :options ',options
				   :routines ',all-entries
				   :submodules ',the-submodules
				   :glue-submodule ',glue-submodule
				   :default-pathname ',default-pathname)
	     (define-remote-module ,module-name
				   (:number ,module-number)
	       (:version ,version)
	       (:server :c)
	       (:client :lisp))
	     ))))))

(defmacro 1deftoolkit0 (entry-name manager-name arguments values &body body)
  (declare (zwei:indentation 2 2))
  (declare (arglist entry-name manager-name arguments values &body c-body))
  `(progn
     (compiler:local-declare ((compiler:arglist-types ,@arguments)
			      (compiler:value-types ,@values))
       (define-remote-entry ,(lisp-name-for-toolkit-entry-name entry-name)
			    ,(lisp-name-for-toolkit-manager-name manager-name)
	 (:number ,(mac-toolkit-entry-number manager-name entry-name))
	 (:arguments ,@arguments)
	 (:values ,@values)
	 (:c (:server ,@body))))))

;; You need the :copy argument specifier when the Toolbox routine
;; might scribble beyond the end of the input arg.  Otherwise you
;; can just let it use the stuff in the XDR call block.

(defmacro 1deftoolkit-pb0 (entry-name manager-name &rest clauses)
  (parse-macro-options deftoolkit-pb clauses
		       (routine structure always-synchronous (error-slot #{ioResult}))
		       (arguments values values-with-pb)
    (if (null routine)
	(error "The :ROUTINE option is required")
	(setq routine (eval routine)))
    (when (null structure)
      (error "The :STRUCTURE option is required"))
    (when (and values values-with-pb)
      (error "Only one of :VALUES and :VALUES-WITH-PB is allowed"))
    (cond (values-with-pb
	   (unless (member 'pb values-with-pb)
	     (error "You have to have PB as a value specifier when you use :VALUES-WITH-PB -- ~s" values-with-pb))
	   (unless (member 'pb arguments)
	     (error "You have to have PB as an argument specifier when you use :VALUES-WITH-PB -- ~s" arguments))
	   (setq values values-with-pb))
	  (T (when (member 'pb values)
	       (error "You can't have PB as value without :VALUES-WITH-PB -- ~s" values))
	     (when (member 'pb arguments)
	       (error "You can't have PB as argument without :VALUES-WITH-PB -- ~s" arguments))))
    (let* ((octet-structure (get structure 'rpc::octet-structure))
	   (structure-c-name (and octet-structure (rpc::octet-structure-c-name octet-structure))))
      (when (null octet-structure)
	(error "~s is not defined as octet-structure" structure))
      (flet ((type-for-slot (slot-name)
	       (assert (symbolp slot-name))
	       (case structure
		 (cntrlparam
		   (case slot-name
		     (rpc::|ioCRefNum|
		       (setf slot-name 'rpc::|ioRefNum|))
		     (otherwise)))
		 (otherwise))
	       (let ((field (find slot-name (rpc::octet-structure-fields octet-structure)
				  :key #'rpc::octet-structure-field-name
				  :test #'string-equal)))
		 (when (null field)
		   (error "Cannot find field ~s in structure ~s" slot-name structure))
		 (rpc::octet-structure-field-type field))))
	(multiple-value-bind (local-declarations copy-to-local-copies pb=local-copies pb=args real-args)
	    (compute-deftoolkit-pb-arguments arguments structure #'type-for-slot)
	  (multiple-value-bind (rpc-values-forms real-values)
	      (compute-deftoolkit-pb-values values structure #'type-for-slot)
	    (let ((error-check
		    (when error-slot #{ err = pb.error-slot;
			  if (err) TKError(err);
			  })))
	      `(deftoolkit ,entry-name ,manager-name ,real-args ,real-values
	        #{ { OSErr err;
		    ',structure-c-name pb;
		    ',local-declarations
     
		    ClearMemory((void*)&pb, (long)sizeof(',structure-c-name));
    
		    ',copy-to-local-copies
		    ',pb=local-copies
		    ',pb=args
		    err = ',routine(&pb ',(unless always-synchronous #{, false}));
		    if (err) TKError(err);
		    ',error-check
		    RPCValues(',rpc-values-forms);
		    } }
		    ))))))))

(defun 1compute-deftoolkit-pb-arguments0 (arguments structure type-for-slot)
  (declare (values local-declarations copy-to-local-copies pb=local-copies pb=args real-args))
  (let ((local-declarations)
	(copy-to-local-copies)
	(pb=local-copies)
	(pb=args)
	(real-args))
    (dolist (arg arguments)
      (cond ((eql arg 'pb)
	     (push `(,structure ,structure) real-args))
	    (T
	     (destructuring-bind (name slot &key copy output type cast) arg
	       (setq slot (eval slot))
	       (let ((arg-type
		       (or type
			   (destructuring-bind (slot-name) slot
			     (if (eql slot-name 'rpc::|ioNamePtr|)
				 'pascal-string
				 (funcall type-for-slot slot-name))))))
		 (cond (copy
			(unless (equal slot #{ioNamePtr})
			  ;;---If you relax this, fix (StringPtr)& below
			  (error "Don't know how to locally-declare ~s" arg))
			(when (eql copy 'T)
			  (setq copy (string-append 'local- name)))
			(let ((local-c-name (lisp-name-to-c-name copy)))
			  (push #{Str255 local-c-name;}
				local-declarations)
			  (push #{CopyPString((lisp-name-to-c-name name), local-c-name);}
				copy-to-local-copies)
			  (push #{pb.slot = (StringPtr)&local-c-name;}
				copy-to-local-copies)))
		       ((and (consp arg-type) (eql (first arg-type) 'vector))
			(push #{CopyMemory((void*)(lisp-name-to-c-name name), 
					   pb.slot, 
					   (long)(eval (rpc::octet-structure-field-type-size arg-type '.x. 0)));}
			      pb=args))
		       ((member arg-type '((finfo)) :test #'equal)
			;;---This should obviously look more closely at the octet type
			(push #{CopyMemory((void*)(lisp-name-to-c-name name), 
					   (void*)&pb.slot, 
					   (long)sizeof((rpc::octet-structure-field-type-c-tokens arg-type)));}
			      pb=args))
		       (T
			(push #{pb.slot = (and cast (eval cast))(lisp-name-to-c-name name);}
			      pb=args)))
		 (push `(,name ,arg-type ,@(and output `(:output ,output))) real-args))))))
    (setq local-declarations (reduce #'append (nreverse local-declarations))
	  copy-to-local-copies (reduce #'append (nreverse copy-to-local-copies))
	  pb=local-copies (reduce #'append (nreverse pb=local-copies))
	  pb=args (reduce #'append (nreverse pb=args))
	  real-args (nreverse real-args))
    (values local-declarations copy-to-local-copies pb=local-copies pb=args real-args)))

(defun 1compute-deftoolkit-pb-values0 (values structure type-for-slot)
  (declare (values rpc-values-forms real-values))
  (let ((rpc-values-forms)
	(real-values))
    (dolist (val values)
      (cond ((eql val 'pb)
	     (push `(,(intern (string-append 'result- structure)) ,structure
		     :overwrite ,structure)
		   real-values)
	     (push #{&pb} rpc-values-forms))
	    (T
	     (destructuring-bind (name slot &key overwrite type cast) val
	       (setq slot (eval slot))
	       (let ((value-type
		       (or type
			   (destructuring-bind (slot-name) slot
			     (if (eql slot-name 'rpc::|ioNamePtr|)
				 'pascal-string
				 (funcall type-for-slot slot-name))))))
		 (push `(,name ,value-type ,@(and overwrite `(:overwrite ,overwrite)))
		       real-values))
	       (push (if cast #{(eval cast)pb.slot } #{pb.slot }) rpc-values-forms)))))
    (setq real-values (nreverse real-values)
	  rpc-values-forms (loop for f in (nreverse rpc-values-forms)
				 for first = T then nil
				 unless first append #{,}
				 append f))
    (values rpc-values-forms real-values)))

(dolist (x '(deftoolkit deftoolkit-pb))
  (setf (get x 'si:definition-type-name) "Mac Toolbox Entry")
  
  (setf (get x 'zwei:definition-function-spec-parser) 'find-toolbox-fspec)
  )

(defun 1find-toolbox-fspec0 (bp-after-definer)
  (let ((after-entry-bp (zwei:forward-sexp bp-after-definer)))
    (when after-entry-bp
      (multiple-value-bind (entry error-p)
	  (zwei:read-fspec-item-from-interval bp-after-definer after-entry-bp)
	(if (or error-p (not (symbolp entry))
		(not (eql (symbol-package entry) *package*)))
	    (values nil nil nil t)
	    (values (lisp-name-for-toolkit-entry-name entry)
		    'defun
		    (string entry)	;--- or maybe (zwei:string-interval bp-after-definer after-entry-bp T)
		    nil))))))

(defmacro 1write-toolkit-submodule-c-program0 (submodule-name &optional default-pathname)
  (multiple-value-bind (submodule manager) (find-mac-toolkit-submodule submodule-name)
    (if (getf (rest submodule) :glue-submodule)
	(write-toolkit-glue-submodule-c-program submodule manager default-pathname)
	(write-toolkit-normal-submodule-c-program submodule manager default-pathname))))

(defun 1write-toolkit-glue-submodule-c-program0 (submodule manager default-pathname)
  (destructuring-bind (submodule-name &key linked auto-load glue-submodule) submodule
    (assert glue-submodule)
    (let* ((include (mac-toolkit-manager-include manager))
	   (manager-name (mac-toolkit-manager-name manager))
	   (server-extern-filename (string-append (string-downcase manager-name) ".h"))
	   (server-extern server-extern-filename))
      (flet ((merger (with)
	       (setq linked (merge-pathnames linked with)
		     auto-load (merge-pathnames auto-load with)
		     server-extern (merge-pathnames server-extern with))))
	(when default-pathname
	  (merger default-pathname))
	(let ((module-default-pathname (mac-toolkit-manager-default-pathname manager)))
	  (when module-default-pathname
	    (merger module-default-pathname))))
	`(progn
	   ,(when linked
	      `(define-remote-c-program ,(lisp-name-for-toolkit-manager-name manager-name)
		 (:server-extern
		   (:file ,server-extern)
		   (:include "TKDefs.h" ,@include))
		 (:server
		   (:file ,linked)
		   (:type :linked)
		   (:include "TKDefs.h" ,@include)
		   (:submodule-name ,submodule-name)
		   (:glue-only T)
		   )))
	   ,(when auto-load
	      `(define-remote-c-program ,(lisp-name-for-toolkit-manager-name manager-name)
		 ,@(unless linked
		    `((:server-extern
			(:file ,server-extern)
			(:include "TKDefs.h" ,@include))))
		 (:server
		   (:file ,auto-load)
		   (:type :auto-load)
		   (:include "TKDefs.h"
			     ,@include
			     ,@(when linked (list server-extern-filename)))
		   (:submodule-name ,submodule-name)
		   (:glue-only T)
		   )))))))

(defun 1write-toolkit-normal-submodule-c-program0 (submodule manager default-pathname)
  (destructuring-bind (submodule-name &key file entries glue-submodule) submodule
    (assert (not glue-submodule))
    (let* ((include (mac-toolkit-manager-include manager))
	   (manager-name (mac-toolkit-manager-name manager))
	   (server-extern (string-append (string-downcase manager-name) ".h")))
      (flet ((merger (with)
	       (setq file (merge-pathnames file with))))
	(when default-pathname
	  (merger default-pathname))
	(let ((module-default-pathname (mac-toolkit-manager-default-pathname manager)))
	  (when module-default-pathname
	    (merger module-default-pathname))))
      `(progn
	 (check-and-warn-about-missing-entries ',manager-name ',submodule-name)
	 (define-remote-c-program ,(lisp-name-for-toolkit-manager-name manager-name)
	  (:server
	    (:file ,file)
	    (:type ,(mac-toolkit-manager-type manager))
	    (:include "TKdefs.h" ,@include ,server-extern)
	    (:submodule-name ,submodule-name)
	    (:entries-only ,@(mapcar #'lisp-name-for-toolkit-entry-name entries))))))))

(defmacro 1write-toolkit-module-c-program0 (manager-name &optional default-pathname)
  (let ((manager (find-mac-toolkit-manager manager-name)))
    `(progn
       ,@(domap 'list ((submodule (mac-toolkit-manager-submodules manager)))
	   `(write-toolkit-submodule-c-program ,(first submodule) ,default-pathname))
       (write-toolkit-submodule-c-program ,(first (mac-toolkit-manager-glue-submodule manager))
					  ,default-pathname))))

(defmacro 1deftest0 (name entries-tested arglist &body body)
  `(progn
     (defun ,name ,arglist
       (declare (sys:function-parent ,name deftest))
	 ,@body)
     (note-test ',name ',entries-tested)))

(defvar 1*test-functions*0 ())

(defun 1note-test0 (test-name entries-tested)
  (pushnew (cons test-name (si:coerce-to-list entries-tested
			     (copy-list entries-tested)))
	   *test-functions*
	   :key #'first :replace T))

;; run-tests
;; need a way to tell whether the test succeeded

(defun 1check-and-warn-about-missing-entries0 (manager-name submodule-name)
  (multiple-value-bind (submodule manager)
      (find-mac-toolkit-submodule submodule-name)
    (assert (eql manager-name (mac-toolkit-manager-name manager)))
    (let* ((submodule-entries (getf (rest submodule) :entries))
	   (defined-entries (rpc::remote-module-entries
			      (rpc::find-remote-module (lisp-name-for-toolkit-manager-name manager-name)
						       ;;---compile-time?
						       )))
	   (undefined-submodule-entries
	     (remove-if
	       (lambda (entry)
		 (let ((lisp-entry-name (lisp-name-for-toolkit-entry-name entry)))
		   (find lisp-entry-name defined-entries
			 :key #'rpc::remote-entry-name)))
	       submodule-entries)))
    (when undefined-submodule-entries
      (warn "No remote entry defined for ~Q"
	    (named-lambda special-format ()
	      (format-textual-list undefined-submodule-entries #'prin1 :filled T :conjunction "or"))))
    #+Ignore
    (let ((untested (remove-if (lambda (entry)
				 (some (lambda (tests) (member entry (rest tests)))
				       *test-functions*))
			       (set-difference known-entries losers))))
      (when untested
	(warn "No test functions defined for ~Q"
	      (named-lambda special-format () (format-textual-list untested #'prin1 :filled T))))))))

(compile-flavor-methods mac-toolkit-manager)
