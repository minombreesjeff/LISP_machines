;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(textedit
0			 :submodules T
			 :type :linked
			 :include ("<TextEdit.h>")
			 :default-pathname
			   "sys:embedding;macivory;toolbox;textedit;"
			 )
  (:glue-submodule (textedit-glue :linked "textedit-link.c"
				  :auto-load "textedit-auto.c"))
  (:submodule (textedit-1 :file "textedit-1.c")
   ;; Initialization and allocation
   TEInit
   TENew
   TEDispose
   ;; Acessing the text of an edit record
   TESetText
   TEGetText
   ;; Insertion point and selection range
   TEIdle
   TEClick
   TESetSelect
   TEActivate
   TEDeactivate
   )
  (:submodule (textedit-2 :file "textedit-2.c")
   ;; Editing
   TEKey
   TECut
   TECopy
   TEPaste
   TEDelete
   TEInsert
   ;; Text display and scrolling
   TESetJust
   TEUpdate
   TextBox
   TEScroll
   TESelView
   TEPinScroll
   TEAutoView
   )
  (:submodule (textedit-3 :file "textedit-3.c")
   ;; Scrap handling
   TEFromScrap
   TEToScrap
   TEScrapHandle
   TEGetScrapLen
   TESetScrapLen
   ;; Advanced Routines
   SetWordBreak
   SetClikLoop
   TECalText)
  (:submodule (textedit-4 :file "textedit-4.c")
   ;; Almost missed these from book V
   ;; Cutting and Pasting with style
   TEStylNew
   SetStylHandle
   GetStylHandle
   GetStylScrap
   TEStylInsert
   TEGetOffset
   TEGetPoint
   TEGetHeight
   TEGetStyle
   TEStylPaste
   TESetStyle
   TEReplaceStyle
   ))


;; Initialization and allocation

(deftoolkit1 TEInit0 textedit
   ()
   ()
   #{ { TEInit();
	RPCValues();
	} }
	)

(deftoolkit1 TENew0 textedit
   ((destrect rect)
    (viewrect rect))
   ((handle tehandle))
   #{ { TEHandle handle = TENew(destrect, viewrect);
	RPCValues((long)handle);
	} }
	)

(deftoolkit1 TEDispose0 textedit
   ((hte tehandle))
   ()
   #{ { TEDispose(hte);
	RPCValues();
	} }
	)


;; Acessing the text of an edit record
(deftoolkit1 TESetText0 textedit
   ((text ptr)
    (length integer-32)
    (hte tehandle))
   ()
   #{ { TESetText(text, length, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEGetText0 textedit
   ((hte tehandle))
   ((charshandle charshandle))
   #{ { CharsHandle chndl =  TEGetText(hte);
	RPCValues((long)chndl);
	} }
	)

;; Insertion point and selection range
(deftoolkit1 TEIdle0 textedit
   ((hte tehandle))
   ()
   #{ { TEIdle(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEClick0 textedit
   ((pt point)
    (extend boolean)
    (hte tehandle))
   ()
   #{ { TEClick(*(Point *)pt, extend, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TESetSelect0 textedit
   ((selstart integer-32)
    (selend integer-32)
    (hte tehandle))
   ()
   #{ { TESetSelect(selstart, selend, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEActivate0 textedit
   ((hte tehandle))
   ()
   #{ { TEActivate(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEDeactivate0 textedit
   ((hte tehandle))
   ()
   #{ { TEDeactivate(hte);
	RPCValues();
	} }
	)

;; Editing
;; I guess this guy wants char?
(deftoolkit1 TEKey0 textedit
   ((key char)
    (hte tehandle))
   ()
   #{ { TEKey(key, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TECut0 textedit
   ((hte tehandle))
   ()
   #{ { TECut(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TECopy0 textedit
   ((hte tehandle))
   ()
   #{ { TECopy(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEPaste0 textedit
   ((hte tehandle))
   ()
   #{ { TEPaste(hte);
	RPCValues();
	} }
	)
(deftoolkit1 TEDelete0 textedit
   ((hte tehandle))
   ()
   #{ { TEDelete(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEInsert0 textedit
   ((text ptr)
    (length integer-32)
    (hte tehandle))
   ()
   #{ { TEInsert(text, length, hte);
	RPCValues();
	} }
	)

;; Text display and scrolling

(deftoolkit1 TESetJust0 textedit
   ((just integer-16)
    (hte tehandle))
   ()
   #{ { TESetJust(just, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEUpdate0 textedit
   ((rupdate rect)
    (hte tehandle))
   ()
   #{ { TEUpdate(rupdate, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TextBox0 textedit
   ((text ptr)
    (length integer-32)
    (box rect)
    (just integer-16))
   ()
   #{ { TextBox(text, length, box, just);
	RPCValues();
	} }
	)

(deftoolkit1 TEScroll0 textedit
   ((dh integer-16)
    (dv integer-16)
    (hte tehandle))
   ()
   #{ { TEScroll(dh, dv, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TESelView0 textedit
   ((hte tehandle))
   ()
   #{ { TESelView(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEPinScroll0 textedit
   ((dh integer-16)
    (dv integer-16)
    (hte tehandle))
   ()
   #{ { TEPinScroll(dh, dv, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEAutoView0 textedit
   ((autoview boolean)
    (hte tehandle))
   ()
   #{ { TEAutoView(autoview, hte);
	RPCValues();
	} }
	)




(deftoolkit1 TEFromScrap0 textedit
   ()
   ()
   #{ { OSErr err = TEFromScrap();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 TEToScrap0 textedit
   ()
   ()
   #{ { OSErr err = TEToScrap();
	if (err) TKError(err);
	RPCValues();
	} }
	)


(deftoolkit1 TEScrapHandle0 textedit
   ()
   ((scraphandle handle))
   #{ { Handle scraphndl = TEScrapHandle();
	RPCValues((long)scraphndl);
	} }
	)

(deftoolkit1 TEGetScrapLen0 textedit
   ()
   ((length integer-32))
   #{ { long length = TEGetScrapLen();
	RPCValues(length);
	} }
	)

(deftoolkit1 TESetScrapLen0 textedit
   ((length integer-32))
   ()
   #{ { TESetScrapLen(length);
	RPCValues();
	} }
	)

;; Advanced Routines

(deftoolkit1 SetWordBreak0 textedit
   ((wbrkproc procptr)
    (hte tehandle))
   ()
   #{ { SetWordBreak(wbrkproc, hte);
	RPCValues();
	} }
	)

(deftoolkit1 SetClikLoop0 textedit
   ((clikproc procptr)
    (hte tehandle))
   ()
   #{ { SetClikLoop(clikproc, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TECalText0 textedit
   ((hte tehandle))
   ()
   #{ { TECalText(hte);
	RPCValues();
	} }
	)



;; Cutting and Pasting with style
(deftoolkit1 TEStylNew0 textedit
   ((destrect rect)
    (viewrect rect))
   ((handle tehandle))
   #{ { TEHandle hndl = TEStylNew(destrect, viewrect);
	RPCValues((long)hndl);
	} }
	)

(deftoolkit1 SetStylHandle0 textedit
   ((thehandle testylehandle)
    (hte tehandle))
   ()
   #{ { SetStylHandle(thehandle, hte);
	RPCValues();
	} }
	)

(deftoolkit1 GetStylHandle0 textedit
   ((hte tehandle))
   ((stylehandle testylehandle))
   #{ { TEStyleHandle shndl = GetStylHandle(hte);
	RPCValues((long)shndl);
	} }
	)

(deftoolkit1 GetStylScrap0 textedit
   ((hte tehandle))
   ()
   #{ { GetStylScrap(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEStylInsert0 textedit
   ((text ptr)
    (length integer-32)
    (hst stscrphandle)
    (hte tehandle))
   ()
   #{ { TEStylInsert(text, length, hst, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEGetOffset0 textedit
   ((pt point)
    (hte tehandle))
   ((offset integer-16))
   #{ { short offset = TEGetOffset(*(Point *)pt, hte);
	RPCValues(offset);
	} }
	)

(deftoolkit1 TEGetPoint0 textedit
   ((offset integer-16)
    (hte tehandle))
   ((pt point))
   #{ { Point pt;

	pt = TEGetPoint(offset, hte);
	RPCValues(&pt);
	} }
	)

(deftoolkit1 TEGetHeight0 textedit
   ((endline integer-32)
    (startline integer-32)
    (hte tehandle))
   ((height integer-16))
   #{ { short height = TEGetHeight(endline, startline, hte);
	RPCValues(height);
	} }
	)

(deftoolkit1 TEGetStyle0 textedit
   ((offset integer-16)
    (thestyle textstyle)
    (hte tehandle))
   ((style textstyle :overwrite thestyle)
    (lineheight integer-16)
    (fontascent integer-16))
   #{ { short lineheight, fontascent;
	TextStyle style;

	TEGetStyle(offset, &style, &lineheight, &fontascent, hte);
	RPCValues(&style, lineheight, fontascent);
	} }
	)

(deftoolkit1 TEStylPaste0 textedit
   ((hte tehandle))
   ()
   #{ { TEStylPaste(hte);
	RPCValues();
	} }
	)

(deftoolkit1 TESetStyle0 textedit
   ((mode integer-16)
    (newstyle textstyle)
    (redraw boolean)
    (hte tehandle))
   ()
   #{ { TESetStyle(mode, newstyle, redraw, hte);
	RPCValues();
	} }
	)

(deftoolkit1 TEReplaceStyle0 textedit
   ((mode integer-16)
    (oldstyle textstyle)
    (newstyle textstyle)
    (redraw boolean)
    (hte tehandle))
   ()
   #{ { TEReplaceStyle(mode, oldstyle, newstyle, redraw, hte);
	RPCValues();
	} }
	)

#||
(write-toolkit-submodule-c-program textedit-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program textedit-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program textedit-3 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program textedit-4 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program textedit-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program textedit)
||#						

