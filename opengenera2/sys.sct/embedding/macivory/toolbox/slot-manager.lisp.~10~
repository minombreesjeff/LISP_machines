;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(slot-manager
0			 :submodules T
			 :type :linked
			 :include ("<Slots.h>")
			 :default-pathname
			   "sys:embedding;macivory;toolbox;slot-manager;"
			 )
  (:glue-submodule (slot-manager-glue :linked "slot-manager-link.c"
				      :auto-load  "slot-manager-auto.c"))
  (:submodule (slot-manager-1 :file "slot-manager-1.c")
   ;; Principal Routines
   SRsrcInfo
   SNextsRsrc
   SNextTypesRsrc
   SReadDrvrName
   )
  (:submodule (slot-manager-2 :file "slot-manager-2.c")
   ;; Specialized Routines
   SReadByte
   SReadWord
   SReadLong
   SGetcString
   SGetBlock
   SFindStruct
   SReadStruct
   SReadInfo
   SReadPRAMRec
   SPutPRAMRec
   SReadFHeader
   SCkCardStatus
   SFindDevBase
   SDeleteSRTRec
   SPtrToSlot
   )
  (:submodule (slot-manager-3 :file "slot-manager-3.c")
   InitSDeclMgr
   SPrimaryInit
   SCardChanged
   SExec
   SOffsetData
   SReadPBSize
   SCalcStep
   InitsRsrcTable
   InitPRAMRecs
   SSearchSRT
   SUpdateSRT
   SCalcsPointer
   SGetDriver
   SFindsInfoRecPtr
   SFindsRsrcPtr
   ))



(deftoolkit-pb1 SRsrcInfo0 slot-manager
  (:routine #{SRsrcInfo})
  (:structure SpBlock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spslot #{spSlot})
    (spID #{spID})
    (spextdev #{spExtDev})
    )
  (:values
    (spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    (spIOReserved #{spIOReserved})
    (spRefNum #{spRefNum})
    (spCategory #{spCategory})
    (spCType #{spCType})
    (spDrvrSW #{spDrvrSW})
    (spDrvrHW #{spDrvrHW})
    (spHwDev #{spHwDev})
    ))

(deftoolkit-pb1 SNextsRsrc0 slot-manager
  (:routine #{SNextSRsrc})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    (spExtDev #{spExtDev})
    )
  (:values
    (new-spslot #{spSlot})
    (new-spID #{spID})
    (new-spExtDev #{spExtDev})
    (spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    (spRefNum #{spRefNum})
    (spIOReserved #{spIOReserved})
    (spCategory #{spCategory})
    (spCType #{spCType})
    (spDrvrSW #{spDrvrSW})
    (spDrvrHW #{spDrvrHW})
    (spHwDev #{spHwDev})
    ))

(deftoolkit-pb 1SNextTypesRsrc0 slot-manager
  (:routine #{SNextTypeSRsrc})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    (spExtDev #{spExtDev})
    (spTBMask #{spTBMask})
    (spCategory #{spCategory})
    (spCType #{spCType})
    (spDrvrSW #{spDrvrSW})
    (spDrvrHW #{spDrvrHW})
    (spHwDev #{spHwDev})
    )
  (:values
    (new-spSlot #{spSlot})
    (new-spID #{spID})
    (new-spExtDev #{spExtDev})
    (spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    (spRefNum #{spRefNum})
    (spIOReserved #{spIOReserved})
    (new-spCategory #{spCategory})
    (new-spCType #{spCType})
    (new-spDrvrSW #{spDrvrSW})
    (new-spDrvrHW #{spDrvrHW})
    (new-spHwDev #{spHwDev})
    ))

(deftoolkit-pb1 SReadDrvrName0 slot-manager
  (:routine #{SReadDrvrName})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    (spResult #{spResult})
    )
  (:values
    (spSize #{spSize})
    (spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    )
  )



(deftoolkit-pb1 SReadByte0 slot-manager
  (:routine #{SReadByte})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID})
    )
  (:values
    (spResult #{spResult})
    (spOffsetData #{spOffsetData})
    (spByteLanes #{spByteLanes})
    )
  )

(deftoolkit-pb1 SReadWord0 slot-manager
  (:routine #{SReadWord})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID})
    )
  (:values
    (spResult #{spResult})
    (spOffsetData #{spOffsetData})
    (spByteLanes #{spByteLanes})
    )
  )

(deftoolkit-pb1 SReadLong0 slot-manager
  (:routine #{SReadLong})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID})
    )
  (:values
    (spResult #{spResult})
    (spOffsetData #{spOffsetData})
    (spByteLanes #{spByteLanes})
    (spSize #{spSize})
    )
  )

(deftoolkit-pb1 SGetcString0 slot-manager
  (:routine #{SGetCString})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID})
    )
  (:values
    (spResult #{spResult})
    (spOffsetData #{spOffsetData})
    (spByteLanes #{spByteLanes})
    (spSize #{spSize})
    (spFlags #{spFlags})
    )
  )

(deftoolkit-pb1 SGetBlock0 slot-manager
  (:routine #{SGetBlock})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID})
    )
  (:values
    (spResult #{spResult})
    (spOffsetData #{spOffsetData})
    (spByteLanes #{spByteLanes})
    (spSize #{spSize})
    (spFlags #{spFlags})
    )
  )

(deftoolkit-pb1 SFindStruct0 slot-manager
  (:routine #{SFindStruct})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spID #{spID})
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    )
  (:values
    (new-spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    (spByteLanes #{spByteLanes})
    )
  )

(deftoolkit-pb1 SReadStruct0 slot-manager
  (:routine #{SReadStruct})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spSize #{spSize})
    (spResult #{spResult})
    )
  (:values
    (spByteLanes #{spByteLanes})
    )
  )

(deftoolkit-pb1 SReadInfo0 slot-manager
  (:routine #{SReadInfo})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
   (spSlot #{spSlot})
   (spResult #{spResult})
   )
  (:values
   (spSize #{spSize})
   )
  )


(deftoolkit-pb1 SReadPRAMRec0 slot-manager
  (:routine #{SReadPRAMRec})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
   (spSlot #{spSlot})
   (spResult #{spResult})
   )
  (:values
   (spSize #{spSize})
   )
  )


(deftoolkit-pb1 SPutPRAMRec0 slot-manager
  (:routine #{SPutPRAMRec})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    )
  (:values
    )
  )

(deftoolkit-pb1 SReadFHeader0 slot-manager
  (:routine #{SReadFHeader})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spResult #{spResult})
    )
  (:values
    (spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    (spByteLanes #{spByteLanes})
    (spSize #{spSize})
    (spOffsetData #{spOffsetData})
    )
  )

;;; Not implemented or perhaps mispelled by LSC
;(deftoolkit-pb1 SCkCardStatus0 slot-manager
;  (:routine #{SCkCardStatus})
;  (:structure spblock)
;  (:error-slot nil)
;  (:always-synchronous t)
;  (:arguments
;    (spSlot #{spSlot})
;    )
;  (:values
;    (spResult #{spResult})
;    )
;  )


(deftoolkit-pb1 SFindDevBase0 slot-manager
  (:routine #{SFindDevBase})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    )
  (:values
    (spResult #{spResult})
    )
  )


(deftoolkit-pb1 SDeleteSRTRec0 slot-manager
  (:routine #{SDeleteSRTRec})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    (spExtDev #{spExtDev})
    )
  (:values
    )
  )

(deftoolkit-pb1 SPtrToSlot0 slot-manager
  (:routine #{SPtrToSlot})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    )
  (:values
    (spslot #{spSlot})
    )
  )



;;; Yes this really does take an empty parameter block
(deftoolkit-pb1 InitSDeclMgr0 slot-manager
  (:routine #{InitSDeclMgr})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    )
  (:values
    )
  )


(deftoolkit-pb1 SPrimaryInit0 slot-manager
  (:routine #{SPrimaryInit})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spFlags #{spFlags})
    )
  (:values
    )
  )


(deftoolkit-pb1 SCardChanged0 slot-manager
  (:routine #{SCardChanged})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    )
  (:values
    (spResult #{spResult})
    )
  )


(deftoolkit-pb1 SExec0 slot-manager
  (:routine #{SExec})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID})
    (spsExecPBlk #{spsExecPBlk} :cast #{(Ptr)} :type integer-32)
    )						
  (:values
    (spResult #{spResult})
    )
  )


(deftoolkit-pb1 SOffsetData0 slot-manager
  (:routine #{SOffsetData})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID}))
  (:values
    (spOffsetData #{spOffsetData})
    (spByteLanes #{spByteLanes})
    (spResult #{spResult})
    (spFlags #{spFlags})
    )
  )


(deftoolkit-pb1 SReadPBSize0 slot-manager
  (:routine #{SReadPBSize})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spID #{spID})
    (spFlags #{spFlags})
    )
  (:values
    (spSize #{spSize})
    (spByteLanes #{spByteLanes})
    (spResult #{spResult}))
  )

(deftoolkit-pb  SCalcStep slot-manager
  (:routine #{SCalcStep})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spByteLanes #{spByteLanes})
    (spFlags #{spFlags})
    )
  (:values (spResult #{spResult})))

;;; Another empty parameter block
;(deftoolkit-pb1 InitsRsrcTable0 slot-manager
;  (:routine #{InitsRsrcTable})
;  (:structure spblock)
;  (:error-slot nil)
;  (:always-synchronous t)
;  (:arguments
;    )
;  (:values
;    )
;  )

;
;;;; And again
;(deftoolkit-pb1 InitPRAMRecs0 slot-manager
;  (:routine #{InitPRAMRecs})
;  (:structure spblock)
;  (:error-slot nil)
;  (:always-synchronous t)
;  (:arguments
;    )
;  (:values
;    )
;  )


(deftoolkit-pb1 SSearchSRT0 slot-manager
  (:routine #{SSearchSRT})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    (spExtDev #{spExtDev})
    (spFlags #{spFlags})
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    )
  (:values
    )
  )


(deftoolkit-pb1 SUpdateSRT0 slot-manager
  (:routine #{SUpdateSRT})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    (spExtDev #{spExtDev})
    (spRefNum #{spRefNum})
    (spIOReserved #{spIOReserved})
    )
  (:values
    (spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    (spFlags #{spFlags})
    (spSize #{spSize})
    (spResult #{spResult})
    )
  )


(deftoolkit-pb1 SCalcsPointer0 slot-manager
  (:routine #{SCalcSPointer})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spsPointer #{spsPointer} :cast #{(Ptr)} :type integer-32)
    (spOffsetData #{spOffsetData})
    (spByteLanes #{spByteLanes})
    )
  (:values
    )
  )


(deftoolkit-pb1 SGetDriver0 slot-manager
  (:routine #{SGetDriver})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    (spExtDev #{spExtDev})
    (spsExecPBlk #{spsExecPBlk} :cast #{(Ptr)} :type integer-32)
    )
  (:values
    (spResult #{spResult})
    (spFlags #{spFlags})
    (spSize #{spSize})
    )
  )


(deftoolkit-pb1 SFindsInfoRecPtr0 slot-manager
  (:routine #{SFindSInfoRecPtr})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    )
  (:values
    (spResult #{spResult})
    )
  )


(deftoolkit-pb1 SFindsRsrcPtr0 slot-manager
  (:routine #{SFindSRsrcPtr})
  (:structure spblock)
  (:error-slot nil)
  (:always-synchronous t)
  (:arguments
    (spSlot #{spSlot})
    (spID #{spID})
    )
  (:values
    (spsPointer #{spsPointer} :cast #{(long)} :type integer-32)
    )
  )




#||
(write-toolkit-submodule-c-program slot-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program slot-manager-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program slot-manager-3 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program slot-manager-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program slot-manager) 
||#
