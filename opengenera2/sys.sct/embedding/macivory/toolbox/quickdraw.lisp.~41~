;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(quickdraw-a
0			 :submodules T
			 :type :linked
			 :include ("<Quickdraw.h>")
			 :default-pathname
			 "sys:embedding;macivory;toolbox;quickdraw;"
			 )
  (:glue-submodule (quickdraw-a-glue :linked "quickdraw-a-link.c"
				   :auto-load "quickdraw-a-auto.c"))
  (:submodule (quickdraw-1 :file "quickdraw-1.c")
   ;; GrafPort routines
   InitGraf
   Openport
   InitPort
   ClosePort
   SetPort
   GetPort
   GrafDevice
   SetPortBits
   PortSize
   MovePortTo
   SetOrigin
   SetClip
   GetClip
   ClipRect
   BackPat
   )
  (:submodule (quickdraw-2 :file "quickdraw-2.c")
   ;; Cursor handling
   InitCursor
   SetCursor
   SetCursorFromHandle
   HideCursor
   ShowCursor
   ObscureCursor
   )
  (:submodule (quickdraw-3 :file "quickdraw-3.c")
   ;; Pen and line drawing
   HidePen
   ShowPen
   GetPen
   GetPenState
   SetPenState
   PenSize
   PenMode
   PenPat
   PenNormal
   MoveTo
   Move
   LineTo
   Line
   )
  (:submodule (quickdraw-4 :file "quickdraw-4.c")
   ;; Text Drawing
   TextFont
   TextFace
   TextMode
   TextSize
   SpaceExtra
   DrawChar
   DrawString
   DrawText
   CharWidth
   StringWidth
   TextWidth
   GetFontInfo
   MeasureText
   )
  (:submodule (quickdraw-5 :file "quickdraw-5.c")
   ;; Drawing in Color --see also Book V.
   ForeColor
   BackColor
   ColorBit
   )
  (:submodule (quickdraw-6 :file "quickdraw-6.c")
   ;; Calculations with rectangles
   SetRect
   OffsetRect
   InsetRect
   SectRect
   UnionRect
   PtInRect
   Pt2Rect
   PtToAngle
   EqualRect
   EmptyRect
   ;; Graphic operations on rectangles
   FrameRect
   PaintRect
   EraseRect
   InvertRect
   FillRect
   )
)



(define-toolkit-module 1(quickdraw-b
0			 :submodules T
			 :type :linked
			 :include ("<Quickdraw.h>")
			 :default-pathname
			 "sys:embedding;macivory;toolbox;quickdraw;"
			 )
  (:glue-submodule (quickdraw-b-glue :linked "quickdraw-b-link.c"
				   :auto-load "quickdraw-b-auto.c"))
  (:submodule (quickdraw-7 :file "quickdraw-7.c")
   ;; Graphic operations on ovals
   FrameOval
   PaintOval
   EraseOval
   InvertOval
   FillOval
   ;; Graphic operations on rounded-corner rectangles
   FrameRoundRect
   PaintRoundRect
   EraseRoundRect
   InvertRoundRect
   FillRoundRect
   ;; Graphic operations on arcs and wedges
   FrameArc
   PaintArc
   EraseArc
   InvertArc
   FillArc
   )
  (:submodule (quickdraw-8 :file "quickdraw-8.c")
   ;; calculations with regions
   NewRgn
   OpenRgn
   CloseRgn
   DisposeRgn
   CopyRgn
   SetEmptyRgn
   SetRectRgn
   RectRgn
   OffsetRgn
   InsetRgn
   SectRgn
   UnionRgn
   DiffRgn
   XorRgn
   PtInRgn
   RectInRgn
   EqualRgn
   EmptyRgn
   ;; Graphic operations on regions
   FrameRgn
   PaintRgn
   EraseRgn
   InvertRgn
   FillRgn
   )
  (:submodule (quickdraw-9 :file "quickdraw-9.c")
   ;; Bit transfer operations
   ScrollRect
   CopyBits
   SeedFill
   CalcMask
   CopyMask
   ;; Pictures
   OpenPicture
   PicComment
   ClosePicture
   DrawPicture
   KillPicture
   )
  (:submodule (quickdraw-10 :file "quickdraw-10.c")
   ;; Calculations with polygons
   OpenPoly
   ClosePoly
   KillPoly
   OffsetPoly
   ;; Graphic operations on polygons
   FramePoly
   PaintPoly
   ErasePoly
   InvertPoly
   FillPoly
   )
  (:submodule (quickdraw-11 :file "quickdraw-11.c")
   ;; Calculations with points
   AddPt
   SubPt
   SetPt
   EqualPt
   LocalToGlobal
   GlobalToLocal
   )
  (:submodule (quickdraw-12 :file "quickdraw-12.c")
   ;; Misc
   Random
   GetPixel
   StuffHex
   ScalePt
   MapPt
   MapRect
   MapRgn
   MapPoly
   )
  (:submodule (quickdraw-13 :file "quickdraw-13.c")
   ;; Customizing QuickDraw
   SetStdProcs
   StdText
   StdLine
   StdRect
   StdRRect
   StdOval
   StdArc
   StdPoly
   StdRgn
   StdBits
   StdComment
   StdTxMeas
   StdGetPic
   StdPutPic

   ;; A version of CopyBits that uses the pixmap remote-type
   DrawPixmap
   ))
 




;; GrafPort routines

;;; I guess I'll make this take no args, as the arg is always fixed anyway
;;; thePort is the mac global
(deftoolkit 1InitGraf0 quickdraw-a
   ()
   ()
   #{ { InitGraf(&thePort);
	RPCValues();
	} }
	)


(deftoolkit 1OpenPort0 quickdraw-a
   ((port grafptr))
   ()
   #{ { OpenPort(port);
	RPCValues();
	} }
	)

(deftoolkit 1InitPort0 quickdraw-a
   ((port grafptr))
   ()
   #{ { InitPort(port);
	RPCValues();
	} }
	)

(deftoolkit 1ClosePort0 quickdraw-a
   ((port grafptr))
   ()
   #{ { ClosePort(port);
	RPCValues();
	} }
	)
	
(deftoolkit 1SetPort0 quickdraw-a
   ((port grafptr))
   ()
   #{ { 
	SetPort(port);
	RPCValues();
	
	} }
	)

(deftoolkit 1GetPort0 quickdraw-a
   ()
   ((outport grafptr))
   #{ { GrafPtr inport;

	GetPort(&inport);
	RPCValues((long)inport);
	} }
	)

(deftoolkit 1GrafDevice0 quickdraw-a
   ((device integer-16))
   ()
   #{ { GrafDevice(device);
	RPCValues();
	} }
	)

(deftoolkit 1SetPortBits0 quickdraw-a
   ((bm BitMap))
   ()
   #{ { SetPortBits(bm);
	RPCValues();
	} }
	)

(deftoolkit 1PortSize 0quickdraw-a
   ((width integer-16)
    (height integer-16))
   ()
   #{ { PortSize(width, height);
	RPCValues();
	} }
	)

(deftoolkit 1MovePortTo0 quickdraw-a
   ((leftglobal integer-16)
    (topglobal integer-16))
   ()
   #{ { MovePortTo(leftglobal, topglobal);
	RPCValues();
	} }
	)

(deftoolkit 1SetOrigin 0quickdraw-a
   ((h integer-16)
    (v integer-16))
   ()
   #{ { SetOrigin(h, v);
	RPCValues();
	} }
	)

(deftoolkit 1SetClip0 quickdraw-a
   ((rgn rgnhandle))
   ()
   #{ { SetClip(rgn);
	RPCValues();
	} }
	)

(deftoolkit 1GetClip0 quickdraw-a
   ((rgn rgnhandle))
   ()
   #{ { GetClip(rgn);
	RPCValues();
	} }
	)

(deftoolkit 1ClipRect0 quickdraw-a
   ((r rect))
   ()
   #{ { ClipRect(r);
	RPCValues();
	} }
	)

(deftoolkit 1BackPat0 quickdraw-a
   ((pat pattern))
   ()
   #{ { BackPat(pat);
	RPCValues();
	} }
	)


;; Cursor handling
(deftoolkit 1InitCursor0 quickdraw-a
   ()
   ()
   #{ { InitCursor();
	RPCValues();
	} }
	)
 
(deftoolkit1 SetCursorFromHandle0 quickdraw-a
   ((crsrhandle CursHandle))
   ()
   #{ { SetCursor(*(CursHandle)crsrhandle);
	RPCValues();
	} }
	)

(deftoolkit1 SetCursor0 quickdraw-a
   ((crsrptr CursPtr))
   ()
   #{ { SetCursor(crsrptr);
	RPCValues();
	} }
	)

(deftoolkit 1HideCursor0 quickdraw-a
   ()
   ()
   #{ { HideCursor();
	RPCValues();
	} }
	)

(deftoolkit 1ShowCursor0 quickdraw-a
   ()
   ()
   #{ { ShowCursor();
	RPCValues();
	} }
	)

(deftoolkit 1ObscureCursor0 quickdraw-a
   ()
   ()
   #{ { ObscureCursor();
	RPCValues();
	} }
	)
  

;; Pen and line drawing
(deftoolkit1 HidePen0 quickdraw-a
   ()
   ()
   #{ { HidePen();
	RPCValues();
	} }
	)

(deftoolkit1 ShowPen0 quickdraw-a
   ()
   ()
   #{ { ShowPen();
	RPCValues();
	} }
	)

;;; Don't bother to overwrite the point
(deftoolkit1 GetPen0 quickdraw-a
   ()
   ((outpt point))
   #{ { Point pt;

	GetPen(&pt);
	RPCValues(&pt);
	} }
	)

(deftoolkit1 GetPenState0 quickdraw-a
   ((pnstate penstate))
   ((outpnstate penstate :overwrite pnstate))
   #{ { PenState pnstate;

	GetPenState(&pnstate);
	RPCValues(&pnstate);
	} }
	)

(deftoolkit1 SetPenState0 quickdraw-a
   ((pnstate penstate))
   ()
   #{ { SetPenState(pnstate);
	RPCValues();
	} }
	)

(deftoolkit1 PenSize0 quickdraw-a
   ((width integer-16)
    (height integer-16))
   ()
   #{ { PenSize(width, height);
	RPCValues();
	} }
	)

(deftoolkit1 PenMode0 quickdraw-a
   ((mode integer-16))
   ()
   #{ { PenMode(mode);
	RPCValues();
	} }
	)

(deftoolkit1 PenPat0 quickdraw-a
   ((pat pattern))
   ()
   #{ { PenPat(pat);
	RPCValues();
	} }
 	)

(deftoolkit1 PenNormal0 quickdraw-a
   ()
   ()
   #{ { PenNormal();
	RPCValues();
	} }
	)

(deftoolkit1 MoveTo0 quickdraw-a
   ((h integer-16)
    (v integer-16))
   ()
   #{ { MoveTo(h, v);
	RPCValues();
	} }
	)
(deftoolkit1 Move0 quickdraw-a
   ((dh integer-16)
    (dv integer-16))
   ()
   #{ { Move(dh, dv);
	RPCValues();
	} }
	)
   
(deftoolkit1 LineTo0 quickdraw-a
   ((h integer-16)
    (v integer-16))
   ()
   #{ { LineTo(h, v);
	RPCValues();
	} }
	)


(deftoolkit1 Line0 quickdraw-a
   ((dh integer-16)
    (dv integer-16))
   ()
   #{ { Line(dh, dv);
	RPCValues();
	} }
	)


;; Text Drawing

(deftoolkit1 TextFont0 quickdraw-a
   ((font integer-16))
   ()
   #{ { TextFont(font);
	RPCValues();
	} }
	)

(deftoolkit1 TextFace0 quickdraw-a
   ((face integer-8))
   ()
   #{ { TextFace(face);
	RPCValues();
	} }
	)

;;; Mode must be srcOr, srcXor, or srcBic
(deftoolkit1 TextMode0 quickdraw-a
   ((mode integer-16))
   ()
   #{ { TextMode(mode);
	RPCValues();
	} }
	)

(deftoolkit1 TextSize0 quickdraw-a
   ((size integer-16))
   ()
   #{ {  TextSize(size);
	 RPCValues();
	 } }
	 )


(deftoolkit1 SpaceExtra0 quickdraw-a
   ((extra fixed))
   ()
   #{ { SpaceExtra(extra);
	RPCValues();
	} }
	)

(deftoolkit1 DrawChar0 quickdraw-a
   ((ch character-8))
   ()
   #{ { DrawChar(ch);
	RPCValues();
	} }
	)

(deftoolkit1 DrawString0 quickdraw-a
   ((s pascal-string))
   ()
   #{ { DrawString(s);
	RPCValues();
	} }
	)

(deftoolkit1 DrawText0 quickdraw-a
   ((textbuf Ptr)
    (firstbyte integer-16)
    (bytecount integer-16))
   ()
   #{ { DrawText(textbuf, firstbyte, bytecount);
	RPCValues();
	} }
	)

(deftoolkit1 CharWidth0 quickdraw-a
   ((ch character-8))
   ((width integer-16))
   #{ { short width;

	width = CharWidth(ch);
	RPCValues(width);
	} }
	)

(deftoolkit1 StringWidth0 quickdraw-a
   ((s pascal-string))
   ((width integer-16))
   #{ { short width;

	width = StringWidth(s);
	RPCValues(width);
	} }
	)

(deftoolkit1 TextWidth0 quickdraw-a
   ((textbuf Ptr)
    (firstbyte integer-16)
    (bytecount integer-16))
   ((width integer-16))
   #{ { short width;
   
	width = TextWidth(textbuf, firstbyte, bytecount);
	RPCValues(width);
	} }
	)

(deftoolkit1 GetFontInfo0 quickdraw-a
   ((info fontinfo))
   ((out-info fontinfo :overwrite info))
   #{ { FontInfo info;

	GetFontInfo(&info);
	RPCValues(&info);
	} }
	)

(deftoolkit1 MeasureText0 quickdraw-a
   ((count integer-16)
    (textaddr ptr)
    (charlocs ptr))
   ()
   #{ { MeasureText(count, textaddr, charlocs);
	RPCValues();
	} }
	)


;; Drawing in Color --see also Book V. (where we have to reimplement all
;; this crap all over again !)

(deftoolkit1 ForeColor0 quickdraw-a
   ((color integer-32))
   ()
   #{ { ForeColor(color);
	RPCValues();
	} }
	)

(deftoolkit1 BackColor0 quickdraw-a
   ((color integer-32))
   ()
   #{ { BackColor(color);
	RPCValues();
	} }
	)

(deftoolkit1 ColorBit0 quickdraw-a
   ((whichbit integer-16))
   ()
   #{ { ColorBit(whichbit);
	RPCValues();
	} }
	)



;; Calculations with rectangles

(deftoolkit1 SetRect0 quickdraw-a
   ((r rect)
    (left integer-16)
    (top integer-16)
    (right integer-16)
    (bottom integer-16))
   ((outrect rect :overwrite r))
   #{ { Rect r;

	SetRect(&r, left, top, right, bottom);
	RPCValues(&r);
	} }
	)

(deftoolkit1 OffsetRect0 quickdraw-a
   ((r rect :output outrect)				       
    (dh integer-16)
    (dv integer-16))
   ((outrect rect))
   #{ {
	OffsetRect(r, dh, dv);
	RPCValues(r);
	} }
	)

(deftoolkit1 InsetRect0 quickdraw-a
   ((r rect :output outrect)
    (dh integer-16)
    (dv integer-16))
   ((outrect rect))
   #{ {
	InsetRect(r, dh, dv);
	RPCValues(r);
	} }
	)

(deftoolkit1 SectRect0 quickdraw-a
   ((src1 rect)
    (src2 rect)
    (dstrect rect))
   ((intersect-p boolean)
    (outrect rect :overwrite dstrect))
   #{ { Rect dstrect;
	Boolean intersect_p;
   
	intersect_p = SectRect(src1, src2, &dstrect);
	RPCValues(intersect_p, &dstrect);
	} }
	)

(deftoolkit1 UnionRect0 quickdraw-a
   ((src1 rect)
    (src2 rect)
    (dstrect rect))
   ((outrect rect :overwrite dstrect))
   #{ { Rect dstrect;
   
	UnionRect(src1, src2, &dstrect);
	RPCValues(&dstrect);
	} }
	)

(deftoolkit1 PtInRect0 quickdraw-a
   ((pt point)
    (r rect))
   ((in_rect_p boolean))
   #{ { Boolean in_rect_p;

	in_rect_p = PtInRect(*(Point*)pt, r);
	RPCValues(in_rect_p);
	} }
	)

(deftoolkit1 Pt2Rect0 quickdraw-a
   ((pt1 point)
    (pt2 point)
    (dstrect rect))
   ((outrect rect :overwrite dstrect))
   #{ { Rect dstrect;
   
	Pt2Rect(*(Point*)pt1, *(Point*)pt2, &dstrect);
	RPCValues(&dstrect);
	} }
	)

;;; I'm not bothering to pass in the integer to overwrite.
;;; I'm just returning the integer angle.
(deftoolkit1 PtToAngle0 quickdraw-a
   ((r rect)
    (pt point)
    )
   ((angle integer-16))
   #{ { short angle;
       
       PtToAngle(r, *(Point*)pt, &angle);
       RPCValues(angle);
       } }
       )

(deftoolkit1 EqualRect0 quickdraw-a
   ((rect1 rect)
    (rect2 rect))
   ((equalp boolean))
   #{ { Boolean equalp;

	equalp = EqualRect(rect1, rect2);
	RPCValues(equalp);
	} }
	)

(deftoolkit1 EmptyRect0 quickdraw-a
   ((r rect))
   ((emptyp boolean))
   #{ { Boolean emptyp;
   
       emptyp = EmptyRect(r);
       RPCValues(emptyp);
       } }
       )


;; Graphic operations on rectangles

(deftoolkit1 FrameRect0 quickdraw-a
   ((r rect))
   ()
   #{ { FrameRect(r);
	RPCValues();
	} }
	)

(deftoolkit1 PaintRect0 quickdraw-a
   ((r rect))
   ()
   #{ { PaintRect(r);
	RPCValues();
	} }
	)


(deftoolkit1 EraseRect0 quickdraw-a
   ((r rect))
   ()
   #{ { EraseRect(r);
	RPCValues();
	} }
	)

(deftoolkit1 InvertRect0 quickdraw-a
   ((r rect))
   ()
   #{ { InvertRect(r);
   	RPCValues();
	} }
	)

(deftoolkit1 FillRect0 quickdraw-a
   ((r rect)
    (pat pattern))
   ()
   #{ { FillRect(r, pat);
	RPCValues();
	} }
	)



;; Graphic operations on ovals
(deftoolkit1 FrameOval0 quickdraw-b
   ((r rect))
   ()
   #{ { FrameOval(r);
	RPCValues();
	} }
	)

(deftoolkit1 PaintOval0 quickdraw-b
   ((r rect))
   ()
   #{ { PaintOval(r);
	RPCValues();
	} }
	)

(deftoolkit1 EraseOval0 quickdraw-b
   ((r rect))
   ()
   #{ { EraseOval(r);
	RPCValues();
	} }
	)
   
(deftoolkit1 InvertOval0 quickdraw-b
   ((r rect))
   ()
   #{ { InvertOval(r);
	RPCValues();
	} }
	)

(deftoolkit1 FillOval0 quickdraw-b
   ((r rect)
    (pat pattern))
   ()
   #{ { FillOval(r, pat);
	RPCValues();
	} }
	)

	

;; Graphic operations on rounded-corner rectangles
(deftoolkit1 FrameRoundRect0 quickdraw-b
   ((r rect)
    (ovalwidth integer-16)
    (ovalheight integer-16))
   ()
   #{ { FrameRoundRect(r, ovalwidth, ovalheight);
	RPCValues();
	} }
	)

(deftoolkit1 PaintRoundRect0 quickdraw-b
   ((r rect)
    (ovalwidth integer-16)
    (ovalheight integer-16))
   ()
   #{ { PaintRoundRect(r, ovalwidth, ovalheight);
	RPCValues();
	} }
	)

(deftoolkit1 EraseRoundRect0 quickdraw-b
   ((r rect)
    (ovalwidth integer-16)
    (ovalheight integer-16))
   ()
   #{ { EraseRoundRect(r, ovalwidth, ovalheight);
	RPCValues();
	} }
	)

(deftoolkit1 InvertRoundRect0 quickdraw-b
   ((r rect)
    (ovalwidth integer-16)
    (ovalheight integer-16))
   ()
   #{ { InvertRoundRect(r, ovalwidth, ovalheight);
	RPCValues();
	} }
	)

(deftoolkit1 FillRoundRect0 quickdraw-b
   ((r rect)
    (ovalwidth integer-16)
    (ovalheight integer-16)
    (pat pattern))
   ()
   #{ { FillRoundRect(r, ovalwidth, ovalheight, pat);
	RPCValues();
	} }
	)


;; Graphic operations on arcs and wedges

(deftoolkit1 FrameArc0 quickdraw-b
   ((r rect)
    (startangle integer-16)
    (arcangle integer-16))
   ()
   #{ { FrameArc(r, startangle, arcangle);
	RPCValues();
	} }
	)

(deftoolkit1 PaintArc0 quickdraw-b
   ((r rect)
    (startangle integer-16)
    (arcangle integer-16))
   ()
   #{ { PaintArc(r, startangle, arcangle);
	RPCValues();
	} }
	)

(deftoolkit1 EraseArc0 quickdraw-b
   ((r rect)
    (startangle integer-16)
    (arcangle integer-16))
   ()
   #{ { EraseArc(r, startangle, arcangle);
	RPCValues();
	} }
	)

(deftoolkit1 InvertArc0 quickdraw-b
   ((r rect)
    (startangle integer-16)
    (arcangle integer-16))
   ()
   #{ { InvertArc(r, startangle, arcangle);
	RPCValues();
	} }
	)

(deftoolkit1 FillArc0 quickdraw-b
   ((r rect)
    (startangle integer-16)
    (arcangle integer-16)
    (pat pattern))
   ()
   #{ { FillArc(r, startangle, arcangle, pat);
	RPCValues();
	} }
	)



;; calculations with regions
(deftoolkit1 NewRgn0 quickdraw-b
   ()
   ((rgn rgnhandle))
   #{ { RgnHandle rgn;

	rgn = NewRgn();
	RPCValues((long)rgn);
	} }
	)

(deftoolkit1 OpenRgn0 quickdraw-b
   ()
   ()
   #{ { OpenRgn();
	RPCValues();
	} }
	)

(deftoolkit1 CloseRgn0 quickdraw-b
   ((dstrgn rgnhandle))
   ()
   #{ { CloseRgn(dstrgn);
	RPCValues();
	} }
	)

(deftoolkit1 DisposeRgn0 quickdraw-b
   ((rgn rgnhandle))
   ()
   #{ { DisposeRgn(rgn);
	RPCValues();
	} }
	)

(deftoolkit1 CopyRgn0 quickdraw-b
   ((srcrgn rgnhandle)
    (dstrgn rgnhandle))
   ()
   #{ { CopyRgn(srcrgn, dstrgn);
	RPCValues();
	} }
	)

(deftoolkit1 SetEmptyRgn0 quickdraw-b
   ((rgn rgnhandle))
   ()
   #{ { SetEmptyRgn(rgn);
	RPCValues();
	} }
	)


(deftoolkit1 SetRectRgn0 quickdraw-b
   ((rgn rgnhandle)
    (left integer-16)
    (top integer-16)
    (right integer-16)
    (bottom integer-16))
   ()
   #{ { SetRectRgn(rgn, left, top, right, bottom);
	RPCValues();
	} }
	)

(deftoolkit1 RectRgn0 quickdraw-b
   ((rgn rgnhandle)
    (r rect))
   ()
   #{ { RectRgn(rgn, r);
	RPCValues();
	} }
	)

(deftoolkit1 OffsetRgn0 quickdraw-b
   ((rgn rgnhandle)
    (dh integer-16)
    (dv integer-16))
   ()
   #{ { OffsetRgn(rgn, dh, dv);
	RPCValues();
	} }
	)

(deftoolkit1 InsetRgn0 quickdraw-b
   ((rgn rgnhandle)
    (dh integer-16)
    (dv integer-16))
   ()
   #{ { InsetRgn(rgn, dh, dv);
	RPCValues();
	} }
	)

(deftoolkit1 SectRgn0 quickdraw-b
   ((srcrgna rgnhandle)
    (srcrgnb rgnhandle)
    (dstrgn rgnhandle))
   ()
   #{ { SectRgn(srcrgna, srcrgnb, dstrgn);
	RPCValues();
	} }
	)

(deftoolkit1 UnionRgn0 quickdraw-b
   ((srcrgna rgnhandle)
    (srcrgnb rgnhandle)
    (dstrgn rgnhandle))
   ()
   #{ { UnionRgn(srcrgna, srcrgnb, dstrgn);
	RPCValues();
	} }
	)


(deftoolkit1 DiffRgn0 quickdraw-b
   ((srcrgna rgnhandle)
    (srcrgnb rgnhandle)
    (dstrgn rgnhandle))
   ()
   #{ { DiffRgn(srcrgna, srcrgnb, dstrgn);
	RPCValues();
	} }
	)

(deftoolkit1 XorRgn0 quickdraw-b
   ((srcrgna rgnhandle)
    (srcrgnb rgnhandle)
    (dstrgn rgnhandle))
   ()
   #{ { XorRgn(srcrgna, srcrgnb, dstrgn);
	RPCValues();
	} }
	)

(deftoolkit1 PtInRgn0 quickdraw-b
   ((pt point)
    (rgn rgnhandle))
   ((inrgnp boolean))
   #{ { Boolean inrgnp;
   
	inrgnp = PtInRgn(*(Point*)pt, rgn);
	RPCValues(inrgnp);
	} }
	)

(deftoolkit1 RectInRgn0 quickdraw-b
   ((r rect)
    (rgn rgnhandle))
   ((inrgnp boolean))
   #{ { Boolean inrgnp;

	inrgnp = RectInRgn(r, rgn);
	RPCValues(inrgnp);
	} }
	)

(deftoolkit1 EqualRgn0 quickdraw-b
   ((rgna rgnhandle)
    (rgnb rgnhandle))
   ((equalp boolean))
   #{ { Boolean equalp;
	
	equalp = EqualRgn(rgna, rgnb);
	RPCValues(equalp);
	} }
	)

(deftoolkit1 EmptyRgn0 quickdraw-b
   ((rgn rgnhandle))
   ((emptyp boolean))
   #{ { Boolean emptyp;
   
	emptyp = EmptyRgn(rgn);
	RPCValues(emptyp);
	} }
	)


;; Graphic operations on regions
(deftoolkit1 FrameRgn0 quickdraw-b
   ((rgn rgnhandle))
   ()
   #{ { FrameRgn(rgn);
	RPCValues();
	} }
	)

(deftoolkit1 PaintRgn0 quickdraw-b
   ((rgn rgnhandle))
   ()
   #{ { PaintRgn(rgn);
	RPCValues();
	} }
	)
(deftoolkit1 EraseRgn0 quickdraw-b
   ((rgn rgnhandle))
   ()
   #{ { EraseRgn(rgn);
	RPCValues();
	} }
	)
(deftoolkit1 InvertRgn0 quickdraw-b
   ((rgn rgnhandle))
   ()
   #{ { InvertRgn(rgn);
	RPCValues();
	} }
	)

(deftoolkit1 FillRgn0 quickdraw-b
   ((rgn rgnhandle)
    (pat pattern))
   ()
   #{ { FillRgn(rgn, pat);
	RPCValues();
	} }
	)


;; Bit transfer operations
(deftoolkit1 ScrollRect0 quickdraw-b
   ((r rect)
    (dh integer-16)
    (dv integer-16)
    (updatergn rgnhandle))
   ()
   #{ { ScrollRect(r, dh, dv, updatergn);
	RPCValues();
	} }
	)

(deftoolkit1 CopyBits0 quickdraw-b
   ((srcbits bitmap)
    (dstbits bitmap)
    (srcrect rect)
    (dstrect rect)
    (mode integer-16)
    (maskrgn rgnhandle))
   ()
   #{ { CopyBits(srcbits, dstbits, srcrect, dstrect, mode, maskrgn);
	RPCValues();
	} }
	)

(deftoolkit1 SeedFill0 quickdraw-b
   ((srcptr ptr)
    (dstptr ptr)
    (srcrow integer-16)
    (dstrow integer-16)
    (height integer-16)
    (words integer-16)
    (seedh integer-16)
    (seedv integer-16))
   ()
   #{ { SeedFill(srcptr, dstptr, srcrow, dstrow, height, words, seedh, seedv);
	RPCValues();
	} }
	)
    
(deftoolkit1 CalcMask0 quickdraw-b
   ((srcptr ptr)
    (dstptr ptr)
    (srcrow integer-16)
    (dstrow integer-16)
    (height integer-16)
    (words integer-16))
  ()
  #{ { CalcMask (srcptr, dstptr, srcrow, dstrow, height, words);
       RPCValues();
       } }
       )

(deftoolkit1 CopyMask0 quickdraw-b
  ((srcbits bitmap)
   (maskbits bitmap)
   (dstbits bitmap)
   (srcrect rect)
   (maskrect rect)
   (dstrect rect))
  ()
  #{ { CopyMask(srcbits, maskbits, dstbits, srcrect, maskrect, dstrect);
       RPCValues();
       } }
       )


;; Pictures
(deftoolkit1 OpenPicture0 quickdraw-b
   ((picframe rect))
   ((pichandle pichandle))
   #{ { PicHandle pichdl;

	pichdl = OpenPicture(picframe);
	RPCValues((long)pichdl);
	} }
	)

(deftoolkit1 PicComment0 quickdraw-b
   ((kind integer-16)
    (datasize integer-16)
    (datahandle Handle))
   ()
   #{ { PicComment(kind, datasize, datahandle);
	RPCValues();
	} }
	)

(deftoolkit1 ClosePicture0 quickdraw-b
   ()
   ()
   #{ { ClosePicture();
	RPCValues();
	} }
	)

(deftoolkit1 DrawPicture0 quickdraw-b
   ((mypicture pichandle)
    (dstrect rect))
   ()
   #{ { 
	DrawPicture(mypicture, dstrect);
	RPCValues();
	
	} }
	)

(deftoolkit1 KillPicture0 quickdraw-b
   ((mypicture pichandle))
   ()
   #{ { KillPicture(mypicture);
	RPCValues();
	} }
	)




;; Calculations with polygons

(deftoolkit1 OpenPoly0 quickdraw-b
   ()
   ((handle polyhandle))
   #{ { PolyHandle hndl;

	hndl = OpenPoly();
	RPCValues((long)hndl);
	} }
	)

(deftoolkit1 ClosePoly0 quickdraw-b
   ()
   ()
   #{ { ClosePoly();
	RPCValues();
	} }
	)

(deftoolkit1 KillPoly0 quickdraw-b
   ((poly polyhandle))
   ()
   #{ { KillPoly(poly);
	RPCValues();
	} }
	)

(deftoolkit1 OffsetPoly0 quickdraw-b
   ((poly polyhandle)
    (dh integer-16)
    (dv integer-16))
   ()
   #{ { OffsetPoly(poly, dh, dv);
	RPCValues();
	} }
	)


;; Graphic operations on polygons
(deftoolkit1 FramePoly0 quickdraw-b
   ((poly polyhandle))
   ()
   #{ { FramePoly(poly);
	RPCValues();
	} }
	)

(deftoolkit1 PaintPoly0 quickdraw-b
   ((poly polyhandle))
   ()
   #{ { PaintPoly(poly);
	RPCValues();
	} }
	)

(deftoolkit1 ErasePoly0 quickdraw-b
   ((poly polyhandle))
   ()
   #{ { ErasePoly(poly);
	RPCValues();
	} }
	)

(deftoolkit1 InvertPoly0 quickdraw-b
   ((poly polyhandle))
   ()
   #{ { InvertPoly(poly);
	RPCValues();
	} }
	)

(deftoolkit1 FillPoly0 quickdraw-b
   ((poly polyhandle)
    (pat pattern))
   ()
   #{ { FillPoly(poly, pat);
	RPCValues();
	} }
	)


;; Calculations with points

;;; Don't bother to alter the points, just create new ones.
(deftoolkit1 AddPt0 quickdraw-b
   ((srcpt1 point)
    (srcpt2 point))
   ((outpt point))
   #{ { Point temp1;
	temp1 = *(Point *)srcpt2;
	AddPt(*(Point *)srcpt1, &temp1);
	RPCValues(&temp1);
	} }
	)


(deftoolkit1 SubPt0 quickdraw-b
   ((srcpt1 point)
    (srcpt2 point))
   ((outpt point))
   #{ { Point temp1;
	temp1 = *(Point *)srcpt2;
	SubPt(*(Point *)srcpt1, &temp1);
	RPCValues(&temp1);
	} }
	)

(deftoolkit1 SetPt0 quickdraw-b
   ((h integer-16)
    (v integer-16))
   ((outpt point))
   #{ { Point pt;

	SetPt(&pt, h, v);
	RPCValues(&pt);
	} }
	)

(deftoolkit1 EqualPt0 quickdraw-b
   ((pt1 point)
    (pt2 point))
   ((equalp boolean))
   #{ { Boolean eq;
	    
	eq = EqualPt(*(Point *)pt1, *(Point *)pt2);
	RPCValues(eq);
	} }
	)

(deftoolkit1 LocalToGlobal0 quickdraw-b
   ((pt point))
   ((globalpt point))
   #{ { Point temp1;

	temp1 = *(Point *)pt;
	LocalToGlobal(&temp1);
	RPCValues(&temp1);
	} }
	)


(deftoolkit1 GlobalToLocal0 quickdraw-b
   ((pt point))
   ((localpt point))
   #{ { Point temp1;

	temp1 = *(Point *)pt;
	GlobalToLocal(&temp1);
	RPCValues(&temp1);
	} }
	)
    

;; Misc
(deftoolkit1 Random0 quickdraw-b
   ()
   ((random integer-16))
   #{ { short rndm;

	rndm = Random();
	RPCValues(rndm);
	} }
	)

(deftoolkit1 GetPixel0 quickdraw-b
   ((h integer-16)
    (v integer-16))
   ((onp boolean))
   #{ { Boolean pix;

	pix = GetPixel(h,v);
	RPCValues(pix);
	} }
	)

;;; I can't think offhand of an easy way to test this
(deftoolkit1 StuffHex0 quickdraw-b
   ((thingptr Ptr)
    (s Str255))
   ()
   #{ { StuffHex(thingptr, s);
	RPCValues();
	} }
	)

;;; Don't overwrite the point
(deftoolkit1 ScalePt0 quickdraw-b
   ((pt point)
    (srcrect rect)
    (dstrect rect))
   ((outpt point))
   #{ { Point temp1;

	temp1 = *(Point *)pt;
	ScalePt(&temp1, srcrect, dstrect);
	RPCValues(&temp1);
	} }
	)
    

(deftoolkit1 MapPt0 quickdraw-b
   ((pt point)
    (srcrect rect)
    (dstrect rect))
   ((outpt point))
   #{ { Point temp1;

	temp1 = *(Point *)pt;
	MapPt(&temp1, srcrect, dstrect);
	RPCValues(&temp1);
	} }
	)

   
(deftoolkit1 MapRect0 quickdraw-b
   ((r rect :output newrect)
    (srcrect rect)
    (dstrect rect))
   ((newrect rect))
   #{ { MapRect(r, srcrect, dstrect);
	RPCValues(r);
	} }
	)

(deftoolkit1 MapRgn0 quickdraw-b
   ((rgn rgnhandle)
    (srcrect rect)
    (dstrect rect))
   ()
   #{ { MapRgn(rgn, srcrect, dstrect);
	RPCValues();
	} }
	)

(deftoolkit1 MapPoly0 quickdraw-b
   ((poly polyhandle)
    (srcrect rect)
    (dstrect rect))
   ()
   #{ { MapPoly(poly, srcrect, dstrect);
	RPCValues();
	} }
	)

;; Customizing Quickdraw-b

(deftoolkit1 SetStdProcs0 quickdraw-b
   ((procs qdprocs :output outprocs))
   ((outprocs qdprocs))
   #{ { SetStdProcs(procs);
	RPCValues(procs);
	} }
	)
   
(deftoolkit1 StdText0 quickdraw-b
   ((bytecount integer-16)
    (textbuf ptr)
    (numer point)
    (denom point))
   ()
   #{ { StdText(bytecount, textbuf, *(Point *)numer, *(Point *)denom);
	RPCValues();
	} }
	)
(deftoolkit1 StdLine0 quickdraw-b
   ((newpt point))
   ()
   #{ { StdLine(*(Point *)newpt);
	RPCValues();
	} }
	)
(deftoolkit1 StdRect0 quickdraw-b
   ((verb grafverb)
    (r rect))
   ()
   #{ { StdRect(verb, r);
	RPCValues();
	} }
	)
(deftoolkit1 StdRRect0 quickdraw-b
   ((verb grafverb)
    (r rect)
    (ovalwidth integer-16)
    (ovalheight integer-16))
   ()
   #{ { StdRRect(verb, r, ovalwidth, ovalheight);
	RPCValues();
	} }
	)

(deftoolkit1 StdOval0 quickdraw-b
   ((verb grafverb)
    (r rect))
   ()
   #{ { StdOval(verb, r);
	RPCValues();
	} }
	)

(deftoolkit1 StdArc0 quickdraw-b
   ((verb grafverb)
    (r rect)
    (startangle integer-16)
    (arcangle integer-16))
   ()
   #{ { StdArc(verb, r, startangle, arcangle);
	RPCValues();
	} }
	)
(deftoolkit1 StdPoly0 quickdraw-b
   ((verb grafverb)
    (poly polyhandle))
   ()
   #{ { StdPoly(verb, poly);
	RPCValues();
	} }
	)

(deftoolkit1 StdRgn0 quickdraw-b
   ((verb grafverb)
    (rgn rgnhandle))
   ()
   #{ { StdRgn(verb, rgn);
	RPCValues();
	} }
	)

;;; I think this guy just passes pointers for efficiency, not to overwrite.
;;; But I'm just guessing so I'll return the values anyway. (at least until 
;;; I figure out what its supposed to do
(deftoolkit1 StdBits0 quickdraw-b
   ((srcbits bitmap :output newsrcbits)
    (srcrect rect :output newsrcrect)
    (dstrect rect :output newdstrect)
    (mode integer-16)
    (maskrgn rgnhandle))
   ;;I think this is probably unnecesary
   ((newsrcbits bitmap)
    (newsrcrect rect)
    (newdstrect rect))
   #{ { StdBits(srcbits, srcrect, dstrect, mode, maskrgn);
	RPCValues(srcbits, srcrect, dstrect);
	} }
	)
    
(deftoolkit1 StdComment0 quickdraw-b
   ((kind integer-16)
    (datasize integer-16)
    (datahandle handle))
   ()
   #{ { StdComment(kind, datasize, datahandle);
	RPCValues();
	} }
	)

(deftoolkit1 StdTxMeas0 quickdraw-b
   ((bytecount integer-16)
    (textaddr ptr)
    (numer point)
    (denom point)
    (info fontinfo :output newfontinfo))
   ((width integer-16)
    (newnumer point)
    (newdenom point)
    (newfontinfo fontinfo))
   #{ { short width;
	Point pt1;
	Point pt2;
	
	pt1 = *(Point *)numer;
	pt2 = *(Point *)denom;
	width = StdTxMeas(bytecount,textaddr, &pt1, &pt2, info);
	RPCValues(width, &pt1, &pt2, info);
	} }
	)

(deftoolkit1 StdGetPic0 quickdraw-b
   ((dataptr ptr)
    (bytecount integer-16))
   ()
   #{ { StdGetPic(dataptr, bytecount);
	RPCValues();
	} }
	)

(deftoolkit1 StdPutPic0 quickdraw-b
   ((dataptr ptr)
    (bytecount integer-16))
   ()
   #{ { StdPutPic(dataptr, bytecount);
	RPCValues();
	} }
	) 

(deftoolkit 1DrawPixmap0 quickdraw-b
  ((srcbits pixmap)
    (srcrect rect)
    (dstrect rect)
    (mode integer-16)
    (maskrgn rgnhandle))
   ( )
       #{ { 
	GrafPtr p;
	GetPort(&p);
	CopyBits(srcbits, &(p->portBits), srcrect, dstrect, mode, maskrgn);
	RPCValues();
	} }
	)


#||
;Grafport routines
(write-toolkit-submodule-c-program quickdraw-1 "blueberry:mac-4:rlb:rui:")
 ;Cursor Handling 
(write-toolkit-submodule-c-program quickdraw-2 "blueberry:mac-4:rlb:rui:")
;Pen and Line drawing
(write-toolkit-submodule-c-program quickdraw-3 "kumquat:mac-4:macivory:toolkit:quickdraw:")
;Text drawing
(write-toolkit-submodule-c-program quickdraw-4 "blueberry:mac-4:rlb:rui:") 
 ;Drawing in Color
(write-toolkit-submodule-c-program quickdraw-5 "blueberry:mac-4:rlb:rui:")
;Calculations with rectangles
(write-toolkit-submodule-c-program quickdraw-6 "blueberry:mac-4:rlb:rui:")
;Ovals
(write-toolkit-submodule-c-program quickdraw-7 "blueberry:mac-4:rlb:rui:")
;Regions
(write-toolkit-submodule-c-program quickdraw-8 "blueberry:mac-4:rlb:rui:")
;bit Transfer
(write-toolkit-submodule-c-program quickdraw-9 "blueberry:mac-4:rlb:rui:")
;Calculations with polygons
(write-toolkit-submodule-c-program quickdraw-10 "blueberry:mac-4:rlb:rui:") 
;Calculations with points
(write-toolkit-submodule-c-program quickdraw-11 "blueberry:mac-4:rlb:rui:")
;Misc
(write-toolkit-submodule-c-program quickdraw-12 "blueberry:mac-4:rlb:rui:")
;Customizing Quickdraw
(write-toolkit-submodule-c-program quickdraw-13 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program quickdraw-a-glue "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program quickdraw-b-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program quickdraw-a)
(write-toolkit-module-c-program quickdraw-b)

||#



