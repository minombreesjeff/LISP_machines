;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(resource-manager
0			 :submodules T
			 :type :linked
			 :include ("<Resources.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;resource-manager;"
			 )
  (:glue-submodule (resource-manager-glue
		     :linked "resource-manager-link.c"
		     :auto-load "resource-manager-auto.c"))
  (:submodule (resource-manager-1 :file "resource-manager-1.c")
   ;; Initialization
   InitResources
   RsrcZoneInit
   ;; Opening and closing
   CreateResFile
   OpenResFile
   CloseResFile
   ;; Checking for errors
   ResError
   ;; Setting the current resource file
   CurResFile
   HomeResFile
   UseResFile
   )
  (:submodule (resource-manager-2 :file "resource-manager-2.c")
   ;; Getting resource types
   CountTypes
   Count1Types
   GetIndType
   Get1IndType
   ;; Getting and disposing
   SetResLoad
   CountResources
   Count1Resources
   GetIndResource
   Get1IndResource
   GetResource
   Get1Resource
   GetNamedResource
   Get1NamedResource
   LoadResource
   ReleaseResource
   DetachResource
   )
  (:submodule (resource-manager-3 :file "resource-manager-3.c")
   ;; Getting information
   UniqueID
   Unique1ID
   GetResInfo
   GetResAttrs
   SizeResource
   MaxSizeRsrc
   ;; Modifying
   SetResInfo
   SetResAttrs
   ChangedResource
   AddResource
   RmveResource
   UpdateResFile
   WriteResource
   SetResPurge
   GetResFileAttrs
   SetResFileAttrs
   ;; Advanced
   RsrcMapEntry
   OpenRFPerm
   CurrentResLoad
   ;;;one more from book V
   RGetResource
   )
  (:submodule (resource-manager-4 :file "resource-manager-4.c")
   ;; Entry points that don't screw you by doing UseResFile of a file that's
   ;; late in the resource file search list and therefore removes important
   ;; files (e.g. MacIvory-Support.rsrc) from the search list
   OpenRFPerm-no-use
   Count1Resources-file
   Count1Types-file
   Get1IndResource-file
   Get1IndType-file
   Get1NamedResource-file
   Get1Resource-file
   ))


;; Initialization
(deftoolkit InitResources resource-manager
   ()
   ((result integer-16))
   #{ { OSErr err;
	short result;

	result = InitResources();
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit RsrcZoneInit resource-manager
   ()
   ()
   #{ { 
	RsrcZoneInit();
	RPCValues();
	} }
	)

;; Opening and closing
(deftoolkit CreateResFile resource-manager
   ((name pascal-string))
   ()
   #{ { OSErr err;
	CreateResFile(name);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit OpenResFile resource-manager
   ((name pascal-string))
   ((result integer-16))
   #{ { OSErr err;
	short result;
	result = OpenResFile(name);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit CloseResFile resource-manager
   ((refnum integer-16))
   ()
   #{ { OSErr err;
	CloseResFile(refnum);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

;; Checking for errors
(deftoolkit ResError resource-manager
   ()
   ((result integer-16))			;it's documented as INTEGER, not OsErr
   #{ { 
	short result;
	result = ResError();
	RPCValues(result);
	} }
	)

;; Setting the current resource file
(deftoolkit CurResFile resource-manager
   ()
   ((result integer-16))
   #{ { 
	short result;
	result = CurResFile();
	RPCValues(result);
	} }
	)

(deftoolkit HomeResFile resource-manager
   ((theresource handle))
   ((result integer-16))
   #{ { OSErr err;
	short result;
	result = HomeResFile(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)
   
(deftoolkit UseResFile resource-manager
   ((refnum integer-16))
   ()
   #{ { OSErr err;
	UseResFile(refnum);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

;; Getting resource types
(deftoolkit CountTypes resource-manager
   ()
   ((result integer-16))
   #{ { 
	short result;
	result = CountTypes();
	RPCValues(result);
	} }
	)

(deftoolkit Count1Types resource-manager
   ()
   ((result integer-16))
   #{ { 
	short result;
	result = Count1Types();
	RPCValues(result);
	} }
	)

(deftoolkit GetIndType resource-manager
   ((index integer-16))
   ((result restype))
   #{ { 
	ResType result;
	GetIndType(&result, index);
	RPCValues(&result);
	} }
	)

(deftoolkit Get1IndType resource-manager
   ((index integer-16))
   ((result restype))
   #{ { 
	ResType result;
	Get1IndType(&result, index);
	RPCValues(&result);
	} }
	)

;; Getting and disposing
(deftoolkit SetResLoad resource-manager
   ((load boolean))
   ()
   #{ { 
	SetResLoad(load);
	RPCValues();
	} }
	)

(deftoolkit CurrentResLoad resource-manager
   ()
   ((current boolean))
   #{ { 
	RPCValues(ResLoad);
	} }
	)

(deftoolkit CountResources resource-manager
   ((thetype restype))
   ((result integer-16))
   #{ { 
	short result;
	result = CountResources(*(ResType*)thetype);
	RPCValues(result);
	} }
	)

(deftoolkit Count1Resources resource-manager
   ((thetype restype))
   ((result integer-16))
   #{ { 
	short result;
	result = Count1Resources(*(ResType*)thetype);
	RPCValues(result);
	} }
	)

(deftoolkit GetIndResource resource-manager
   ((thetype restype)
    (index integer-16))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	h = GetIndResource(*(ResType*)thetype, index);
	err = ResError();
	if (err) TKError(err);
	RPCValues((long)h);
	} }
	)

(deftoolkit Get1IndResource resource-manager
   ((thetype restype)
    (index integer-16))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	h = Get1IndResource(*(ResType*)thetype, index);
	err = ResError();
	if (err) TKError(err);
	RPCValues((long)h);
	} }
	)


(deftoolkit GetResource resource-manager
   ((thetype restype)
    (theid integer-16))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	h = GetResource(*(ResType*)thetype, theid);
	err = ResError();
	if (err) TKError(err);
	if (h == NIL) TKError(resNotFound);
	RPCValues((long)h);
	} }
	)

(deftoolkit Get1Resource resource-manager
   ((thetype restype)
    (theid integer-16))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	h = Get1Resource(*(ResType*)thetype, theid);
	err = ResError();
	if (err) TKError(err);
	if (h == NIL) TKError(resNotFound);
	RPCValues((long)h);
	} }
	)

(deftoolkit GetNamedResource resource-manager
   ((thetype restype)
    (name pascal-string))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	h = GetNamedResource(*(ResType*)thetype, name);
	err = ResError();
	if (err) TKError(err);
	RPCValues((long)h);
	} }
	)

(deftoolkit Get1NamedResource resource-manager
   ((thetype restype)
    (name pascal-string))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	h = Get1NamedResource(*(ResType*)thetype, name);
	err = ResError();
	if (err) TKError(err);
	RPCValues((long)h);
	} }
	)

(deftoolkit LoadResource resource-manager
   ((theresource handle))
   ()
   #{ { OSErr err;
	LoadResource(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit ReleaseResource resource-manager
   ((theresource handle))
   ()
   #{ { OSErr err;
	ReleaseResource(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit DetachResource resource-manager
   ((theresource handle))
   ()
   #{ { OSErr err;
	DetachResource(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)


;; Getting information
(deftoolkit UniqueID resource-manager
   ((thetype restype))
   ((result integer-16))
   #{ { OSErr err;
	short result;
	result = UniqueID(*(ResType*)thetype);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit Unique1ID resource-manager
   ((thetype restype))
   ((result integer-16))
   #{ { OSErr err;
	short result;
	result = Unique1ID(*(ResType*)thetype);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit GetResInfo resource-manager
   ((theresource handle)
    (name pascal-string))
   ((theid integer-16)
    (thetype restype)
    (out-name pascal-string :overwrite name))
   #{ { OSErr err;
	Str255 name;
	short theid;
	ResType thetype;
	GetResInfo(theresource, &theid, &thetype, &name);
	err = ResError();
	if (err) TKError(err);
	RPCValues(theid, &thetype, name);
	} }
	)
    
(deftoolkit GetResAttrs resource-manager
   ((theresource handle))
   ((result integer-16))
   #{ { OSErr err;
	short result;
	result = GetResAttrs(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit SizeResource resource-manager
   ((theresource handle))
   ((result integer-32))
   #{ { OSErr err;
	long result;
	result = SizeResource(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit MaxSizeRsrc resource-manager
   ((theresource handle))
   ((result integer-32))
   #{ { OSErr err;
	long result;
	result = MaxSizeRsrc(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

;; Modifying
(deftoolkit SetResInfo resource-manager
   ((theresource handle)
    (theid integer-16)
    (name pascal-string))
   ()
   #{ { OSErr err;
	SetResInfo(theresource, theid, name);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit SetResAttrs resource-manager
   ((theresource handle)
    (attrs integer-16))
   ()
   #{ { OSErr err;
	SetResAttrs(theresource, attrs);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit ChangedResource resource-manager
   ((theresource handle))
   ()
   #{ { OSErr err;
	ChangedResource(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit AddResource resource-manager
   ((thedata handle)
    (thetype restype)
    (theid integer-16)
    (name pascal-string))
   ()
   #{ { OSErr err;
	AddResource(thedata, *(ResType*)thetype, theid, name);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit RmveResource resource-manager
   ((theresource handle))
   ()
   #{ { OSErr err;
	RmveResource(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit UpdateResFile resource-manager
   ((refnum integer-16))
   ()
   #{ { OSErr err;
	UpdateResFile(refnum);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit WriteResource resource-manager
   ((theresource handle))
   ()
   #{ { OSErr err;
	WriteResource(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit SetResPurge resource-manager
   ((install boolean))
   ()
   #{ { OSErr err;
	SetResPurge(install);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit GetResFileAttrs resource-manager
   ((refnum integer-16))
   ((result integer-16))
   #{ { OSErr err;
	short result;
	result = GetResFileAttrs(refnum);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit SetResFileAttrs resource-manager
   ((refnum integer-16)
    (attrs integer-16))
   ()
   #{ { OSErr err;
	SetResFileAttrs(refnum, attrs);
	err = ResError();
	if (err) TKError(err);
	RPCValues();
	} }
	)


;; Advanced
(deftoolkit RsrcMapEntry resource-manager
   ((theresource handle))
   ((result integer-32))
   #{ { OSErr err;
	long result;
	result = RsrcMapEntry(theresource);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit OpenRFPerm resource-manager
   ((filename pascal-string)
    (vrefnum integer-16)
    (permission cardinal-8))
   ((result integer-16))
   #{ { OSErr err;
	short result;
	result = OpenRFPerm(filename, vrefnum, permission);
	err = ResError();
	if (err) TKError(err);
	RPCValues(result);
	} }
	)

(deftoolkit RGetResource resource-manager
   ((thetype restype)
    (theid integer-16))
   ((rhandle handle))
   #{ { OSErr err;
	Handle result;
	result = RGetResource(*(ResType*)thetype, theid);
	err = ResError();
	if (err) TKError(err);
	RPCValues((long)result);
	} }
	)

;;; Entry points that don't screw you by doing UseResFile of a file that's
;;; late in the resource file search list and therefore removes important
;;; files (e.g. MacIvory-Support.rsrc) from the search list


;; If the resfile was already open, OpenRFPerm changes CurResFile, 
;; contrary to IM p.I-115.  This entry point pretends it worked as documented.
;; The only way to tell whether a particular call to OpenRFPerm actually
;; opened the file is to check whether TopMapHndl changed.
(deftoolkit OpenRFPerm-no-use resource-manager
   ((filename pascal-string)
    (vrefnum integer-16)
    (permission cardinal-8))
   ((result integer-16)
    (newly-opened boolean))
   #{ { OSErr err;
	short result;
	short current = CurResFile();
	Handle top = TopMapHndl;
	short newly_opened;
	
	result = OpenRFPerm(filename, vrefnum, permission);
	err = ResError();
	newly_opened = TopMapHndl != top;
	if (!newly_opened) UseResFile(current);
	if (err) TKError(err);
	RPCValues(result, newly_opened);
	} }
	)

(deftoolkit Count1Resources-file resource-manager
   ((thetype restype) (file integer-16))
   ((result integer-16))
   #{ { 
	short result;
	short current = CurResFile();
	OSErr err;
	
	UseResFile(file);
	err = ResError();
	if (err) TKError(err);
	result = Count1Resources(*(ResType*)thetype);
	UseResFile(current);
	RPCValues(result);
	} }
	)

(deftoolkit Count1Types-file resource-manager
   ((file integer-16))
   ((result integer-16))
   #{ { 
	short result;
	short current = CurResFile();
	OSErr err;

	UseResFile(file);
	err = ResError();
	if (err) TKError(err);
	result = Count1Types();
	UseResFile(current);
	RPCValues(result);
	} }
	)

(deftoolkit Get1IndType-file resource-manager
   ((index integer-16) (file integer-16))
   ((result restype))
   #{ { 
	ResType result;
	short current = CurResFile();
	OSErr err;

	UseResFile(file);
	err = ResError();
	if (err) TKError(err);
	Get1IndType(&result, index);
	UseResFile(current);
	RPCValues(&result);
	} }
	)

(deftoolkit Get1NamedResource-file resource-manager
   ((thetype restype)
    (name pascal-string)
    (file integer-16))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	short current = CurResFile();

	UseResFile(file);
	err = ResError();
	if (err) TKError(err);
	h = Get1NamedResource(*(ResType*)thetype, name);
	err = ResError();
	UseResFile(current);
	if (err) TKError(err);
	RPCValues((long)h);
	} }
	)

(deftoolkit Get1Resource-file resource-manager
   ((thetype restype)
    (theid integer-16)
    (file integer-16))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	short current = CurResFile();

	UseResFile(file);
	err = ResError();
	if (err) TKError(err);
	h = Get1Resource(*(ResType*)thetype, theid);
	err = ResError();
	UseResFile(current);
	if (err) TKError(err);
	if (h == NIL) TKError(resNotFound);
	RPCValues((long)h);
	} }
	)

(deftoolkit Get1IndResource-file resource-manager
   ((thetype restype)
    (index integer-16)
    (file integer-16))
   ((result handle))
   #{ { OSErr err;
	Handle h;
	short current = CurResFile();

	UseResFile(file);
	err = ResError();
	if (err) TKError(err);
	h = Get1IndResource(*(ResType*)thetype, index);
	err = ResError();
	UseResFile(current);
	if (err) TKError(err);
	RPCValues((long)h);
	} }
	)

#||
(write-toolkit-submodule-c-program resource-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program resource-manager-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program resource-manager-3 "kumquat:mac-4:macivory:toolkit:resource-manager:")
(write-toolkit-submodule-c-program resource-manager-glue "kumquat:mac-4:macivory:toolkit:resource-manager:")
(write-toolkit-module-c-program resource-manager)
||#


