;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(window-manager
0			 :submodules T
			 :type :linked
			 :include ("<Windows.h>" "<Events.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;window-manager;"
			 )
  (:glue-submodule (window-manager-glue :linked "window-manager-link.c"
					:auto-load "window-manager-auto.c"))
  (:submodule (window-manager-1 :file "window-manager-1.c")
   ;; Initialization and allocation
   InitWindows
   GetWMgrPort
   NewWindow
   GetNewWindow
   CloseWindow
   DisposeWindow
   WindowStructure
   )
  (:submodule (window-manager-2 :file "window-manager-2.c")
   ;; Window display
   SetWTitle
   GetWTitle
   Selectwindow
   HideWindow
   ShowWindow
   ShowHide
   HiliteWindow
   BringToFront
   SendBehind
   FrontWindow
   DrawGrowIcon)
  (:submodule (window-manager-3 :file "window-manager-3.c")
   ;; Mouse Location; Movement and sizing
   FindWindow
   TrackGoAway
   MoveWindow
   DragWindow
   GrowWindow
   SizeWindow
   TrackBox
   ZoomWindow
   )
  (:submodule (window-manager-4 :file "window-manager-4.c")
   ;; Updatge Region Maintenance
   InvalRect
   InvalRgn
   ValidRect
   ValidRgn
   BeginUpdate
   EndUpdate
   )
  (:submodule (window-manager-5 :file "window-manager-5.c")
   ;; Misc
   SetWRefCon
   GetWRefCon
   SetWindowPic
   GetWindowPic
   PinRect
   DragGrayRgn
   )
  (:submodule (window-manager-6 :file "window-manager-6.c")
   ;; Low-level routines
   CheckUpdate
   ClipAbove
   SaveOld
   DrawNew
   PaintOne
   PaintBehind
   CalcVis
   CalcVisBehind
   )
  )

;; Initialization and allocation

(deftoolkit 1InitWindows0 window-manager
   ()
   ()
   #{ InitWindows(); 
      RPCValues();
      }
   )

(deftoolkit 1GetWMgrPort0 window-manager
   ()
   ((wport grafptr))
   #{ { GrafPtr wPort;
	GetWMgrPort(&wPort);
	RPCValues((long)wPort);
	} }
	)
       
;; This is not part of the Mac toolkit.  It's so Lisp programs can inspect
;; the innards of the Mac data structure for the window.
(deftoolkit 1WindowStructure0 window-manager
   ((window-pointer windowptr)
    (Window windowrecord))
   ((out-window windowrecord :overwrite window))
   #{ { RPCValues(window_pointer);
	} }
	)

(deftoolkit 1NewWindow0 window-manager
   ((boundsrect rect)
    (title pascal-string)
    (visible boolean)
    (procid integer-16)
    (behind windowptr)
    (goawayflag boolean)
    (refcon integer-32))
   ((newwindow windowptr))
   #{ { WindowPtr newwindow;
        newwindow = NewWindow(0L, boundsrect, title, visible, procid, behind, goawayflag, refcon);
	RPCValues((long)newwindow);
	
	} }
	)

(deftoolkit 1GetNewWindow0 window-manager
   ((windowID integer-16)
    (behind windowptr))
   ((newwindow windowptr))
   #{ { WindowPtr newwindow;
	newwindow = GetNewWindow(windowid, 0L, behind);
	RPCValues((long)newwindow);
	
	} }
	)

(deftoolkit 1CloseWindow0 window-manager
   ((thewindow windowptr))
   ()
   #{ { CloseWindow(thewindow);
	RPCValues();
	}}
   )

(deftoolkit 1DisposeWindow0 window-manager
   ((thewindow windowptr))
   ()
   #{ { DisposeWindow(thewindow);
	RPCValues();
	} }
	)



;; Window display
(deftoolkit 1SetWTitle0 window-manager
   ((theWindow windowptr)
    (new-title pascal-string))
   ()
   #{ { SetWTitle(thewindow, new_title);
	RPCValues();
	} }
	)

(deftoolkit 1GetWTitle0 window-manager
   ((theWindow windowptr)
    (in-title pascal-string))
   ((out-title pascal-string :overwrite in-title))
   #{ { Str255 title;
	GetWTitle(thewindow, &title);
	RPCValues(title);
	} }
	)

(deftoolkit 1SelectWindow0 window-manager
   ((thewindow windowptr))
   ()
   #{ { SelectWindow(thewindow);
	RPCValues();
	} }
	)

(deftoolkit 1HideWindow0 window-manager
   ((thewindow windowptr))
   ()
   #{ { HideWindow(thewindow);
	RPCValues();
	} }
	)
   
(deftoolkit 1ShowWindow0 window-manager
   ((thewindow windowptr))
   ()
   #{ { ShowWindow(thewindow);
	RPCValues();
	} }
	)

(deftoolkit 1ShowHide0 window-manager
   ((thewindow windowptr)
    (showflag boolean))
   ()
   #{ { ShowHide(thewindow, showflag);
	RPCValues();
	} }
	)

(deftoolkit 1HiliteWindow0 window-manager
   ((thewindow windowptr)
    (fhilite boolean))
   ()
   #{ { HiliteWindow(thewindow, fhilite);
	RPCValues();
	} }
	)

(deftoolkit 1BringToFront0 window-manager
   ((window windowptr))
   ()
   #{ { BringToFront(window);
	RPCValues();
	} }
	)

(deftoolkit 1SendBehind0 window-manager
   ((thewindow windowptr)
    (behindwindow windowptr))
   ()
   #{ { SendBehind(thewindow, behindwindow);
	RPCValues();
	} }
	)

(deftoolkit 1FrontWindow0 window-manager
   ()
   ((window windowptr))
   #{ { WindowPtr window;
	window = FrontWindow();
	RPCValues((long)window);
	} }
	)

(deftoolkit 1DrawGrowIcon0 window-manager
   ((thewindow windowptr))
   ()
   #{ { DrawGrowIcon(thewindow);
	RPCValues();
	} }
	)


 ;; Mouse Location; Movement and sizing
(deftoolkit 1FindWindow0 window-manager
   ((thepoint point))
   ((whichwindow windowptr)
    (kind integer-16))				;inDesk, inMenuBar, etc.
   #{ { WindowPtr whichwindow;
	short kind;
	kind = FindWindow(*(Point *)thepoint, &whichwindow);
	RPCValues((long)whichwindow, kind);
	} }
      )

(deftoolkit 1TrackGoAway0 window-manager
   ((thewindow windowptr)
    (thepoint point))
   ((result boolean))
   #{ { Boolean result;
	result = TrackGoAway(thewindow, *(Point *)thepoint);
	RPCValues(result);
	} }
	)

(deftoolkit 1MoveWindow0 window-manager
   ((thewindow windowptr)
    (hglobal integer-16)
    (vglobal integer-16)
    (front boolean))
   ()
   #{ { MoveWindow(thewindow, hglobal, vglobal, front);
	RPCValues();
	} }
	)

(deftoolkit 1DragWindow0 window-manager
   ((thewindow windowptr)
    (startpt point)
    (boundsrect rect))
   ()
   #{ { DragWindow(thewindow, *(Point *)startpt, boundsrect);
	RPCValues();
	} }
	)

(deftoolkit1 TrackBox0 window-manager
   ((thewindow windowptr)
    (thepoint point)
    (partcode integer-16))
   ((result boolean))
   #{ { 
	Boolean result;
	result = TrackBox(thewindow, *(Point *)thepoint, partcode);
	RPCValues(result);
	}}
	)

(deftoolkit1 ZoomWindow0 window-manager
   ((thewindow windowptr)
    (partcode integer-16)
    (front boolean))
   ()
   #{ { 
	ZoomWindow(thewindow, partcode, front);
	RPCValues();
	}}
	)

 
(deftoolkit 1GrowWindow0 window-manager
   ((thewindow windowptr)
    (startpt point)
    (sizerect rect))
   ((portsize integer-32))
   #{ { long portsize;
	
	portsize = GrowWindow(thewindow, *(Point *)startpt, sizerect);
	RPCValues(portsize);
	} }
	)

(deftoolkit 1SizeWindow0 window-manager
   ((thewindow windowptr)
    (width integer-16)
    (height integer-16)
    (fupdate boolean))
   ()
   #{ { SizeWindow(thewindow, width, height, fupdate);
	RPCValues();
	} }
	)


 ;; Update Region Maintenance

(deftoolkit 1InvalRect0 window-manager
   ((badrect rect))
   ()
   #{ { InvalRect(badrect);
	RPCValues();
	} }
	)

(deftoolkit  1InvalRgn0 window-manager
   ((badrgn rgnhandle))
   ()
   #{ { InvalRgn(badrgn);
	RPCValues();
	} }
	)

(deftoolkit 1ValidRect0 window-manager
   ((goodrect rect))
   ()
   #{ { ValidRect(goodrect);
	RPCValues();
	} }
	)

(deftoolkit 1ValidRgn0 window-manager
   ((goodrgn rgnhandle))
   ()
   #{ { ValidRgn(goodrgn);
	RPCValues();
	} }
	)

(deftoolkit 1BeginUpdate0 window-manager
   ((thewindow windowptr))
   ()
   #{ { BeginUpdate(thewindow);
	RPCValues();
	} }
	)

(deftoolkit 1EndUpdate0 window-manager
   ((thewindow windowptr))
   ()
   #{ { EndUpdate(thewindow);
	RPCValues();
	} }
	)


;;; Misc
(deftoolkit 1SetWRefCon0 window-manager
   ((thewindow windowptr)
    (data integer-32))
   ()
   #{ { SetWRefCon(thewindow, data);
	RPCValues();
	} }
	)

(deftoolkit 1GetWRefCon0 window-manager
   ((thewindow windowptr))
   ((data integer-32))
   #{ { long data;

	data = GetWRefCon(thewindow);
	RPCValues(data);
	} }
	)
    
(deftoolkit 1SetWindowPic0 window-manager
   ((thewindow windowptr)
    (pic pichandle))
   ()
   #{ { SetWindowPic(thewindow, pic);
	RPCValues();
	} }
	)

(deftoolkit1 GetWindowPic0 window-manager
   ((thewindow windowptr))
   ((pic pichandle))
   #{ { PicHandle pic; 

	pic = GetWindowPic(thewindow);
	RPCValues((long)pic);
	} }
	)

(deftoolkit 1PinRect0 window-manager
   ((therect rect)
    (thept point))
   ((nearest_point integer-32))
   #{ {long nearest_point;

      nearest_point = PinRect(therect, *(Point *)thept);
      RPCValues(nearest_point);
      } }
      )

;; *** What do we do with this one? One of its arguments is a pointer to 
;; a procedure to execute continually while the mouse is down ***
(deftoolkit 1DragGrayRgn0 window-manager
   ((thergn rgnhandle)
    (startpt point)
    (limitrect rect)
    (sloprect rect)
    (axis integer-16)
    (actionproc procptr))
   ((point_difference integer-32))
   #{ { long point_difference;

	point_difference = DragGrayRgn(thergn, *(Point *)startpt, limitrect, sloprect, axis, actionproc);
	RPCValues(point_difference);
	} }
	)


;;; Low-level routines

(deftoolkit 1CheckUpdate0 window-manager
   ((theevent eventrecord))
   ((new-event eventrecord :overwrite theevent)
    (found-p boolean))
   #{ { Boolean found_p;
	EventRecord newevent;
   	found_p = CheckUpdate(&newevent);
	RPCValues(found_p, (long)&newevent);
	} }
	)

(deftoolkit 1ClipAbove0 window-manager
   ((window windowpeek))
   ()
   #{ { ClipAbove(window);
	RPCValues();
	} }
	)

(deftoolkit 1SaveOld0 window-manager
   ((window windowpeek))
   ()
   #{ { SaveOld(window);
	RPCValues();
	} }
	)

(deftoolkit 1DrawNew0 window-manager
   ((window windowpeek)
    (update boolean))
   ()
   #{ { DrawNew(window, update);
	RPCValues();
	} }
	)

(deftoolkit 1PaintOne0 window-manager
   ((window windowpeek)
    (clobberedrgn rgnhandle))
   ()
   #{ { PaintOne(window, clobberedrgn);
	RPCValues();
	} }
	)

(deftoolkit 1PaintBehind0 window-manager
  ((startwindow windowpeek)
   (clobberedrgn rgnhandle))
  ()
  #{ { PaintBehind(startwindow, clobberedrgn);
       RPCValues();
       } }
       )

(deftoolkit 1CalcVis0 window-manager
   ((window windowpeek))
   ()
   #{ { CalcVis(window);
	RPCValues();
	} }
	)

(deftoolkit 1CalcVisBehind0 window-manager
   ((startwindow windowpeek)
    (clobberedrgn rgnhandle))
   ()
   #{ { CalcVisBehind(startwindow, clobberedrgn);
	RPCValues();
	} }
	)


#||
(write-toolkit-submodule-c-program window-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program window-manager-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program window-manager-3 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program window-manager-4 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program window-manager-5 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program window-manager-6 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program window-manager-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program window-manager)
||#

