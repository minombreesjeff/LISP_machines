;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module (D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")memory-manager
0			 :submodules T
			 :type :linked
			 :include ("<Memory.h>")
			 :default-pathname
			 "sys:embedding;macivory;toolbox;memory-manager;"
			 )
  (:glue-submodule (memory-manager-glue :linked "memory-manager-link.c"
					:auto-load "memory-manager-auto.c"))
  (:submodule (memory-manager-1 :file "memory-manager-1.c")
   ;; Initialization and allocation
   InitApplZone
   SetApplBase
   InitZone
   GetApplLimit
   SetApplLimit
   MaxApplZone
   MoreMasters
   )
  (:submodule (memory-manager-2 :file "memory-manager-2.c")
   ;; Heap Zone access
   GetZone
   SetZone
   SystemZone
   ApplicZone
   )
  (:submodule (memory-manager-3 :file "memory-manager-3.c")
   ;;Allocating and Releasing Relocatable Blocks
   NewHandle
   DisposHandle
   GetHandleSize
   SetHandleSize
   HandleZone
   RecoverHandle
   ReallocHandle
   )
  (:submodule (memory-manager-4 :file "memory-manager-4.c")
   ;; Allocating and Releasing Nonrelocatable Blocks
   NewPtr
   DisposPtr
   GetPtrSize
   SetPtrSize
   PtrZone
   )
  (:submodule (memory-manager-5 :file "memory-manager-5.c")
   ;; Freeing Space in the Heap
   FreeMem
   MaxMem
   CompactMem
   ResrvMem
   PurgeMem
   EmptyHandle
   NewEmptyHandle
   MaxBlock
   PurgeSpace
   StackSpace
   )
  (:submodule (memory-manager-6 :file "memory-manager-6.c")
   ;; Properties of Relocatable Blocks
   HLock
   HUnlock
   HPurge
   HNoPurge
   ;; From Vol IV
   HSetRBit
   HClrRBit
   HGetState
   HSetState
   ;;Grow Zone Operations
   SetGrowZone
   GZSaveHnd
   )
  (:submodule (memory-manager-7 :file "memory-manager-7.c")
   ;; Misc and Grow Zone function
   BlockMove
   TopMem
   MoveHHi
   MemError
    )
  (:submodule (memory-manager-8 :file "memory-manager-8.c")
   ;; MacIvory related routines
   read-opaque-bytes-from-pointer
   read-opaque-bytes-from-handle
   write-opaque-bytes-into-pointer
   write-opaque-bytes-into-handle
   PtrFromHandle
   )
)


;; Initialization and allocation

;; I don't know how anyone could call this without blowing 
;; RPC out of the water..
(deftoolkit1 InitApplZone0 memory-manager
   ()
   ()
   #{ { InitApplZone();
        RPCValues();
	} }
	)

;; Same with this one. I suppose they could get RPC running in 
;; the system zone.
(deftoolkit1 SetApplBase0 memory-manager
   ((startptr ptr))
   ()
   #{ { SetApplBase(startptr);
        RPCValues();
	
	} }
	)

(deftoolkit1 InitZone0 memory-manager
   ((pgrowzone Procptr)
    (cmoremasters integer-16)
    (limitptr ptr)
    (startptr ptr))
   ()
   #{ { InitZone(pgrowzone, cmoremasters, limitptr, startptr);
        RPCValues();
	
	} }
	)


(deftoolkit1 GetApplLimit0 memory-manager
   ()
   ((myptr ptr))
   #{ { Ptr myptr;

	myptr = GetApplLimit();
        RPCValues((long)myptr);
	
	} }
	)

(deftoolkit1 SetApplLimit0 memory-manager
   ((zonelimit ptr))
   ()
   #{ { OSErr err;

	SetApplLimit(zonelimit);
        err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 MaxApplZone0 memory-manager
   ()
   ()
   #{ { MaxApplZone();
        RPCValues();
	
	} }
	)

(deftoolkit1 MoreMasters0 memory-manager
   ()
   ()
   #{ { OSErr err;

	MoreMasters();
	err = MemError();
	if (err) TKError(err);
        RPCValues();
	
	} }
	) 



;; Heap Zone access
(deftoolkit1 GetZone0 memory-manager
   ()
   ((currentzonethz thz))
   #{ { THz currentzoneptr;

	currentzoneptr = GetZone();
        RPCValues((long)currentzoneptr);
	
	} }
	)

(deftoolkit1 SetZone0 memory-manager
   ((hz thz))
   ()
   #{ { SetZone(hz);
	RPCValues();
	
	} }
	)

(deftoolkit1 SystemZone0 memory-manager
   ()
   ((systemzoneptr thz))
   #{ { THz syszoneptr = SystemZone();
	RPCValues((long)syszoneptr);
	
	} }
	)

(deftoolkit1 ApplicZone0 memory-manager
   ()
   ((appliczoneptr thz))
   #{ { THz applicptr = ApplicZone();
	RPCValues((long)applicptr);
	
	} }
	)



;;Allocating and Releasing Relocatable Blocks
(deftoolkit1 NewHandle0 memory-manager
   ((logicalsize size))
   ((newhandle handle))
   #{ { OSErr err;
	Handle newhandle = NewHandle(logicalsize);
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)newhandle);
	
	} }
	)

(deftoolkit1 DisposHandle0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;
	DisposHandle(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 GetHandleSize0 memory-manager
   ((h handle))
   ((handlesize size))
   #{ { OSErr err;
	Size handlesize = GetHandleSize(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues(handlesize);
	
	} }
	)

(deftoolkit1 SetHandleSize0 memory-manager
   ((h handle)
    (newsize size))
   ()
   #{ { OSErr err;
	SetHandleSize(h, newsize);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 HandleZone0 memory-manager
   ((h handle))
   ((zoneptr thz))
   #{ { OSErr err;
	THz zoneptr = HandleZone(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)zoneptr);
	
	} }
	)

;; Book IV says this returns an error code too
(deftoolkit1 RecoverHandle0 memory-manager
   ((p ptr))
   ((handle handle))
   #{ { OSErr err;
	Handle hndl = RecoverHandle(p);
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)hndl);
	
	} }
	)

(deftoolkit1 ReallocHandle0 memory-manager
   ((h handle)
    (logicalsize size))
   ()
   #{ { OSErr err;

	ReallocHandle(h, logicalsize);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)




;; Allocating and Releasing Nonrelocatable Blocks
(deftoolkit1 NewPtr0 memory-manager
   ((logicalsize size))
   ((newptr ptr))
   #{ { OSErr err;
	Ptr newptr = NewPtr(logicalsize);
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)newptr);
	
	} }
	)

(deftoolkit1 DisposPtr0 memory-manager
   ((p ptr))
   ()
   #{ { OSErr err;

	DisposPtr(p);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 GetPtrSize0 memory-manager
   ((p ptr))
   ((ptrsize size))
   #{ { OSErr err;
	Size ptrsize = GetPtrSize(p);
	err = MemError();
	if (err) TKError(err);
	RPCValues(ptrsize);
	
	} }
	)

(deftoolkit1 SetPtrSize0 memory-manager
   ((p ptr)
    (newsize size))
   ()
   #{ { OSErr err;

	SetPtrSize(p, newsize);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 PtrZone0 memory-manager
   ((p ptr))
   ((zoneptr thz))
   #{ { OSErr err;
	THz zoneptr = PtrZone(p);
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)zoneptr);
	
	} }
	)



;; Freeing Space in the Heap

(deftoolkit1 FreeMem0 memory-manager
   ()
   ((freespace integer-32))
   #{ { long freespace = FreeMem();
	RPCValues(freespace);
	
	} }
	)

(deftoolkit1 MaxMem0 memory-manager
   ()
   ((bytesavail size)
    (zonegrowth size))
   #{ { Size bytesavail, zonegrowth;
   
	bytesavail = MaxMem(&zonegrowth);
	RPCValues(bytesavail, zonegrowth);
	
	} }
	)

(deftoolkit1 CompactMem0 memory-manager
   ((cbneeded size))
   ((cbytesavail size))
   #{ { Size cbytesavail = CompactMem(cbneeded);
	RPCValues(cbytesavail);
	
	} }
	)

(deftoolkit1 ResrvMem0 memory-manager
   ((cbneeded size))
   ()
   #{ { OSErr err;

	ResrvMem(cbneeded);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 PurgeMem0 memory-manager
   ((cbneeded size))
   ()
   #{ { OSErr err;

	PurgeMem(cbneeded);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 EmptyHandle0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	EmptyHandle(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 NewEmptyHandle0 memory-manager
   ()
   ((newhandle handle))
   #{ { OSErr err;
	Handle newhandle = NewEmptyHandle();
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)newhandle);
	
	} }
	)

(deftoolkit1 MaxBlock0 memory-manager
   ()
   ((maxcb integer-32))
   #{ { OSErr err;
	long maxcb = MaxBlock();
	err = MemError();
	if (err) TKError(err);
	RPCValues(maxcb);
	
	} }
	)

(deftoolkit1 PurgeSpace0 memory-manager
   ()
   ((total integer-32)
    (contig integer-32))
   #{ { OSErr err;
	long total, config;
	
	PurgeSpace(&total, &config);
	err = MemError();
	if (err) TKError(err);
	RPCValues(total, config);
	
	} }
	)

(deftoolkit1 StackSpace0 memory-manager
   ()
   ((space integer-32))
   #{ { long space = StackSpace();
	RPCValues(space);
	
	} }
	)




;; Properties of Relocatable Blocks
(deftoolkit1 HLock0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	HLock(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 HUnlock0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	HUnlock(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 HPurge0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	HPurge(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 HNoPurge0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	HNoPurge(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

;; From Vol IV
(deftoolkit1 HSetRBit0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	HSetRBit(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 HClrRBit0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	HClrRBit(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

;;; The doc on this says it returns a signed-byte. I think we can just 
;;; use cardinal 8 and char, but who knows? (No LSC doc)
(deftoolkit1 HGetState0 memory-manager
   ((h handle))
   ((state cardinal-8))
   #{ { OSErr err;
	char state = HGetState(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues(state);
	
	} }
	)
(deftoolkit1 HSetState0 memory-manager
   ((h handle)
    (state cardinal-8))
   ()
   #{ { OSErr err;

	HSetState(h, state);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

;;Grow Zone Operations
(deftoolkit1 SetGrowZone0 memory-manager
   ((growzone procptr))
   ()
   #{ { OSErr err;

	SetGrowZone(growzone);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 GZSaveHnd0 memory-manager
   ()
   ((protectedhandle handle))
   #{ { OSErr err;
	Handle protectedhandle = GZSaveHnd();
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)protectedhandle);
	
	} }
	)




;; Misc and Grow Zone function
(deftoolkit1 BlockMove0 memory-manager
   ((sourceptr ptr)
    (destptr ptr)
    (bytecount size))
   ()
   #{ { OSErr err;

	BlockMove(sourceptr, destptr, bytecount);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 TopMem0 memory-manager
   ()
   ((topmem ptr))
   #{ { OSErr err;
	Ptr top = TopMem();
	err = MemError();
	if (err) TKError(err);
	RPCValues((long)top);
	
	} }
	)

(deftoolkit1 MoveHHi0 memory-manager
   ((h handle))
   ()
   #{ { OSErr err;

	MoveHHi(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues();
	
	} }
	)

(deftoolkit1 MemError0 memory-manager
   ()
   ((err integer-16))
   #{ { OSErr err;

	err = MemError();
	RPCValues(err);
	} }
	)



  
(deftoolkit1 read-opaque-bytes-from-pointer0 memory-manager
   ((ptr Ptr)
    (nbytes integer-32)
    (buffer (opaque-bytes (:c #{unsigned char *}
			      (:length (ignore) #{nbytes})))))
   ((buffer-out (opaque-bytes (:c #{unsigned char *}
				  (:length (ignore) #{nbytes})))
		:overwrite buffer))
   #{ { 
	RPCValues(ptr);
	} } )

(deftoolkit1 read-opaque-bytes-from-handle0 memory-manager
   ((h Handle)
    (nbytes integer-32)
    (buffer (opaque-bytes (:c #{unsigned char *}
			      (:length (ignore) #{nbytes})))))
   ((buffer-out (opaque-bytes (:c #{unsigned char *}
				  (:length (ignore) #{nbytes})))
		:overwrite buffer))
   #{ { OSErr err;
	HLock(h);
	err = MemError();
	if (err) TKError(err);
	RPCValues(*(Handle)h);
	HUnlock(h);
	} }
      )

(deftoolkit1 write-opaque-bytes-into-pointer0 memory-manager
   ((ptr Ptr)
    (nbytes integer-32)
    (buffer (opaque-bytes (:c #{unsigned char *}
			      (:length (ignore) #{nbytes})))))
   ()
   #{ { CopyMemory(buffer, (void *) ptr, nbytes);
	RPCValues();
	} }
	)

(deftoolkit 1write-opaque-bytes-into-handle0 memory-manager
   ((h Handle)
    (nbytes integer-32)
    (buffer (opaque-bytes (:c #{unsigned char *}
			      (:length (ignore) #{nbytes})))))
   ()
   #{ { OSErr err;

	HLock(h);
	err = MemError();
	if (err) TKError(err);
	CopyMemory(buffer, *(Handle)h, nbytes);
	HUnlock(h);
	RPCValues();
	} }
	)

(deftoolkit1 PtrFromHandle0 memory-manager
   ((h Ptr))
   ((pntr integer-32))
   #{ { RPCValues(*(long *)h);
	} }
	)


#||
(write-toolkit-submodule-c-program memory-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program memory-manager-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program memory-manager-3 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program memory-manager-4 "blueberry:mac-4:rlb:rui:") 
(write-toolkit-submodule-c-program memory-manager-5 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program memory-manager-6 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program memory-manager-7 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program memory-manager-8 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program memory-manager-glue "blueberry:mac-4:rlb:rui:")
||#

