;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(file-manager-a
0			 :submodules T
			 :type :linked
			 :include ("<Files.h>" "<OSUtils.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;file-manager;"
			 )
  (:glue-submodule (file-manager-a-glue :linked "file-manager-a-link.c"
					:auto-load "file-manager-a-auto.c"))
  (:submodule (file-manager-0 :file "file-manager-0.c")
   ;; The entries collected here are used by lisp's file access path,
   ;; and commented out where they appear elsewhere.
   Create
   FSClose
   FSDelete
   FSRead
   FSWrite
   PBDirCreate
   PBGetCatInfo
   PBGetFCBInfo
   PBGetFInfo
   PBHGetVInfo
   PBOpen
   PBOpenRF
   PBSetCatInfo
   SetEOF
   SetFPos
   )
  (:submodule (file-manager-1 :file "file-manager-1.c")
   ;; "High-level"
   ;; accessing volumes
   GetVInfo
   GetVRefNum
   GetVol
   SetVol
   FlushVol
   UnmountVol
   Eject
   )
  (:submodule (file-manager-2 :file "file-manager-2.c")
   ;; Accessing files
   FSOpen
   OpenRF
;; FSRead
;; FSWrite
   GetFPos
;; SetFPos
   GetEOF
;; SetEOF
   Allocate
;; FSClose
   )
  (:submodule (file-manager-3 :file "file-manager-3.c")
   ;; Creating and deleting files
;; Create
;; FSDelete

   ;; Changing information about files
   GetFInfo
   SetFInfo
   SetFLock
   RstFLock
   Rename
   )
  (:submodule (file-manager-4 :file "file-manager-4.c")
  ;; "Low-level"
  ;; Initializing the File I/O Queue
  FInitQueue

  ;; Accessing volumes
  PBMountVol
  PBGetVInfo
;  HGetVInfo
  PBSetVInfo
  PBGetVol
  PBHGetVol
  PBSetVol
  PBHSetVol
  PBFlushVol
  PBUnmountVol
  PBOffLine
  PBEject
  )
  (:submodule (file-manager-misc :file "file-manager-misc.c")
   ;; Misc entries
   FSRead-remote
   FSWrite-remote
   )
  )

(define-toolkit-module 1(file-manager-b
0			 :submodules T
			 :type :linked
			 :include ("<Files.h>" "<OSUtils.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;file-manager;"
			 )
  (:glue-submodule (file-manager-b-glue :linked "file-manager-b-link.c"
				      :auto-load "file-manager-b-auto.c"))
  (:submodule (file-manager-5 :file "file-manager-5.c")
   ;; Accessing files
;; PBOpen
   PBHOpen
;; PBOpenRF
   PBHOpenRF
   PBLockRange
   PBUnlockRange
   PBRead
   PBWrite
   PBGetFPos
   PBSetFPos
   PBGetEOF
   PBSetEOF
   PBAllocate
   PBAllocContig
   PBFlushFile
   PBClose
   )
  (:submodule (file-manager-6 :file "file-manager-6.c")
   ;; Creating and deleting files and directories
   PBCreate
   PBHCreate
;; PBDirCreate
   PBDelete
   PBHDelete

   ;; Changing information about files and directories
;; PBGetFInfo
   PBHGetFInfo
   PBSetFInfo
   PBHSetFInfo
   PBSetFLock
   PBHSetFLock
   PBRstFLock
   PBHRstFLock
   PBSetFVers
   PBRename
   PBHRename
   )
  (:submodule (file-manager-7 :file "file-manager-7.c")
   ;; Hierarchical directory routines
;; PBGetCatInfo
;; PBSetCatInfo
   PBCatMove

   ;; Working Directory routines
   PBOpenWD
   PBCloseWD
   PBGetWDInfo

   ;; Even lower level
   GetFSQHdr
   GetVCBQHdr
;; PBGetFCBInfo
   GetDRVQHdr
   )
  (:submodule (file-manager-8 :file "file-manager-8.c")
   ;; Shared Volume HFS calls
   PBHGetVolParms
   PBHGetLogInInfo
   PBHGetDirAccess
   PBHSetDirAccess
   PBHMapID
   PBHMapName
   PBHCopyFile
   PBHMoveRename
   PBHOpenDeny
   PBHOpenRFDeny
   )
  )

(deftoolkit 1GetVInfo0 file-manager-a
  ((drvnum integer-16))
  ((volname pascal-string)
   (vrefnum integer-16)
   (freebytes integer-32))
  #{ { OSErr err;
       Str255 volName;
       short vRefNum;
       long freeBytes;

       err = GetVInfo(drvnum, (StringPtr)&volName, &vRefNum, &freeBytes);
       if (err) TKError(err);

       RPCValues(volName, vRefNum, freeBytes);
       } }
       )

(deftoolkit 1GetVRefNum0 file-manager-a
  ((pathrefnum integer-16))
  ((vrefnum integer-16))
  #{ { OSErr err;
       short vRefNum;

       err = GetVRefNum(pathrefnum, &vRefNum);
       if (err) TKError(err);
       RPCValues(vRefNum);
       }}
       )


(deftoolkit 1GetVol0 file-manager-a
  ()
  ((volname pascal-string)
   (vrefnum integer-16))
  #{ { OSErr err;
       Str255 volName;
       short vRefNum;

       err = GetVol(&volName, &vRefNum);
       if (err) TKError(err);
       RPCValues(volName, vRefNum);
       }}
       )

(deftoolkit 1SetVol0 file-manager-a
  ((volname pascal-string)
   (vrefnum integer-16))
  ()
  #{ { OSErr err;
       err = SetVol((StringPtr)volname, vrefnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1FlushVol0 file-manager-a
  ((volname pascal-string)
   (vrefnum integer-16))
  ()
  #{ { OSErr err;
       err = FlushVol((StringPtr)volname, vrefnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1UnmountVol0 file-manager-a
  ((volname pascal-string)
   (vrefnum integer-16))
  ()
  #{ { OSErr err;
       err = UnmountVol((StringPtr)volname, vrefnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1Eject0 file-manager-a
  ((volname pascal-string)
   (vrefnum integer-16))
  ()
  #{ { OSErr err;
       err = Eject((StringPtr)volname, vrefnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

;; Accessing files

(deftoolkit 1FSOpen0 file-manager-a
  ((filename pascal-string)
   (vrefnum integer-16))
  ((refnum integer-16))
  #{ { OSErr err;
       short refnum;
       err = FSOpen(filename, vrefnum, &refnum);
       if (err) TKError(err);
       RPCValues(refnum);
       }}
       )

(deftoolkit 1FSClose0 file-manager-a
  ((refnum integer-16))
  ()
  #{ { OSErr err;
       err = FSClose(refnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1OpenRF0 file-manager-a
  ((filename pascal-string)
   (vrefnum integer-16))
  ((refnum integer-16))
  #{ { OSErr err;
       short refnum;
       err = OpenRF(filename, vrefnum, &refnum);
       if (err) TKError(err);
       RPCValues(refnum);
       }}
       )

(deftoolkit 1FSRead0 file-manager-a
  ((refnum integer-16)
   (count integer-32)
   (buffer (opaque-bytes (:c #{unsigned char *}
			     (:length (ignore) #{count})))))
  ((result-count integer-32)
   (buffer-out (opaque-bytes (:c #{unsigned char *}
				 ;;The #{count} here is evaluated later than that above,
				 ;;after FSRead has had a chance to fiddle with it.
				 (:length (ignore) #{count})))
	       :overwrite buffer))
  #{ { OSErr err;
       Handle h;
       h = NewHandle((Size)count);
       HLock(h);
       err = FSRead(refnum, &count, *h);
       HUnlock(h);
       if (err) DisposHandle(h);
       if (err) TKError(err);
       HLock(h);
       RPCValues(count, *h);
       HUnlock(h);
       DisposHandle(h);
       } }
       )

(deftoolkit 1FSWrite0 file-manager-a
  ((refnum integer-16)
   (count integer-32)
   (buffer (opaque-bytes (:c #{unsigned char *}
			     (:length (ignore) #{count})))))
  ((result-count (integer-32)))
  #{ { OSErr err;
       err = FSWrite(refnum, &count, buffer);
       if (err) TKError(err);
       RPCValues(count);
       }}
       )

(deftoolkit 1GetFPos0 file-manager-a
  ((refnum integer-16))
  ((filepos integer-32))
  #{ { OSErr err;
       long filepos;
       err = GetFPos(refnum, &filepos);
       if (err) TKError(err);
       RPCValues(filepos);
       }}
       )

(deftoolkit 1SetFPos0 file-manager-a
  ((refnum integer-16)
   (posmode integer-16)
   (posoff integer-32))
  ()
  #{ { OSErr err;
       err = SetFPos(refnum, posmode, posoff);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1GetEOF0 file-manager-a
  ((refnum integer-16))
  ((logeof integer-32))
  #{ { OSErr err;
       long logeof;
       err = GetEOF(refnum, &logeof);
       if (err) TKError(err);
       RPCValues(logeof);
       }}
       )
		 
(deftoolkit 1SetEOF0 file-manager-a
  ((refnum integer-16)
   (logeof integer-32))
  ()
  #{ { OSErr err;
       err = SetEOF(refnum, logeof);
       if (err) TKError(err);
       RPCValues();
       }}
       )
      
(deftoolkit 1Allocate0 file-manager-a
  ((refnum integer-16)
   (allocation integer-32))
  ((actual-allocation integer-32))
  #{ { OSErr err;
       err = Allocate(refnum, &allocation);
       if (err) TKError(err);
       RPCValues(allocation);
       }}
       )

;; Creating and deleting files
(deftoolkit 1Create0 file-manager-a
  ((filename pascal-string)
   (vrefnum integer-16)
   (creator (string 4))
   (filetype (string 4)))
  ()
  #{ { OSErr err;
       err = Create(filename, vrefnum, *(OSType *)creator, *(OSType *)filetype);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1FSDelete0 file-manager-a
  ((filename pascal-string)
   (vrefnum integer-16))
  ()
  #{ { OSErr err;
       err = FSDelete(filename, vrefnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

;; Changing information about files
(deftoolkit 1GetFInfo0 file-manager-a
   ((filename pascal-string)
    (vrefnum integer-16)
    (fndr-info finfo))
   ((outcoming-fndr-info finfo :overwrite fndr-info))
   #{ { OSErr err;
	FInfo finfo;
	err = GetFInfo(filename, vrefnum, &finfo);
	if (err) TKError(err);
	RPCValues(&finfo);
	}}
	)


(deftoolkit 1SetFInfo0 file-manager-a
   ((filename pascal-string)
    (vrefnum integer-16)
    (fndr-info FInfo))
   ()
  #{ { OSErr err;
       err = SetFInfo(filename, vrefnum, fndr_info);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1SetFLock0 file-manager-a
   ((filename pascal-string)
    (vrefnum integer-16))
   ()
  #{ { OSErr err;
       err = SetFLock(filename, vrefnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1RstFLock0 file-manager-a
   ((filename pascal-string)
    (vrefnum integer-16))
   ()
  #{ { OSErr err;
       err = RstFLock(filename, vrefnum);
       if (err) TKError(err);
       RPCValues();
       }}
       )

(deftoolkit 1Rename0 file-manager-a
   ((oldname pascal-string)
    (vrefnum integer-16)
    (newname pascal-string))
   ()
  #{ { OSErr err;
       err = Rename(oldname, vrefnum, newname);
       if (err) TKError(err);
       RPCValues();
       }}
       )


;; "Low-level"
;; Initializing the File I/O Queue
(deftoolkit 1FInitQueue0 file-manager-a
   ()
   ()
   #{ { FInitQueue();
        RPCValues();
      } }
      )

;; Accessing volumes
(deftoolkit 1PBMountVol0 file-manager-a
   ((vrefnum integer-16))
   ((result-vrefnum integer-16))
   #{ { OSErr err;
	volumeParam pb;
	pb.ioVRefNum = vrefnum;
	err = PBMountVol(&pb);
	if (err) TKError(err);
	err = pb.ioResult;
	if (err) TKError(err);
	RPCValues(pb.ioVRefNum);
	} }
	)


(deftoolkit-pb 1PBGetVInfo0 file-manager-a
  (:routine #{PBGetVInfo})
  (:structure volumeparam)
  (:arguments
    pb
    (name #{ioNamePtr} :copy T :output out-name)
    (vrefnum #{ioVRefNum})
    (volindex #{ioVolIndex}))
  (:values-with-pb
    pb
    (out-name #{ioNamePtr})))

(deftoolkit-pb 1PBHGetVInfo0 file-manager-a
  (:routine #{PBHGetVInfo})
  (:structure HVolumeParam)
  (:arguments
    pb
    (name #{ioNamePtr} :copy T :output out-name)
    (vrefnum #{ioVRefNum})
    (volindex #{ioVolIndex}))
  (:values-with-pb
    pb
    (out-name #{ioNamePtr})))

(deftoolkit-pb 1PBSetVInfo0 file-manager-a
  (:routine #{PBSetVInfo})
  (:structure HvolumeParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (creation-date #{ioVCrDate})
    (modification-date #{ioVLsMod})
    (volume-attributes #{ioVAtrb})
    (clump-size #{ioVClpSiz})
    (backup-date #{ioVBkUp})
    (sequence-number #{ioVSeqNum})
    (finder-info #{ioVFndrInfo}))
  (:values ))

(deftoolkit-pb 1PBGetVol0 file-manager-a
  (:routine #{PBGetVol})
  (:structure volumeParam)
  (:arguments
    (name #{ioNamePtr} :output out-name :copy T))
  (:values
    (out-name #{ioNamePtr})
    (vrefnum #{ioVRefNum})))

(deftoolkit-pb 1PBHGetVol0 file-manager-a
  (:routine #{PBHGetVol})
  (:structure WDPBRec)
  (:arguments
    pb
    (name #{ioNamePtr} :output out-name :copy T))
  (:values-with-pb
    pb
    (out-name #{ioNamePtr})))

(deftoolkit-pb 1PBSetVol0 file-manager-a
  (:routine #{PBSetVol})
  (:structure volumeParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum}))
  (:values ))

(deftoolkit-pb 1PBHSetVol0 file-manager-a
  (:routine #{PBHSetVol})
  (:structure WDPBRec)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (wddirid #{ioWDDirID}))
  (:values ))

(deftoolkit-pb 1PBFlushVol0 file-manager-a
  (:routine #{PBFlushVol})
  (:structure volumeParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum}))
  (:values ))

(deftoolkit-pb 1PBUnmountVol0 file-manager-a
  (:routine #{PBUnmountVol})
  (:always-synchronous T)
  (:structure volumeParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum}))
  (:values ))

(deftoolkit-pb 1PBOffLine0 file-manager-a
  (:routine #{PBOffLine})
  (:always-synchronous T)
  (:structure volumeParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum}))
  (:values ))

(deftoolkit-pb 1PBEject0 file-manager-a
  (:routine #{PBEject})
  (:always-synchronous T)
  (:structure volumeParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum}))
  (:values ))

(deftoolkit 1fsread-remote0 file-manager-a
   ((refnum integer-16)
    (into Ptr)
    (len integer-32))
   ((err oserr))
      #{ 
	 OSErr err;
	 long count;
	 count = len;
	 err = FSRead(refnum, &count, into);
	 RPCValues(err);
	 }
	 )

(deftoolkit 1fswrite-remote0 file-manager-a
   ((refnum integer-16)
    (from Ptr)
    (len integer-32))
   ((err oserr))
   #{ 	 OSErr err;
	 long count;
	 count = len;
	 err = FSWrite(refnum, &count, from);
	 RPCValues(err);
	 }
	 )

;; Accessing files
(deftoolkit-pb 1PBOpen0 file-manager-a
  (:routine #{PBOpen})
  (:structure ioparam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (versnum #{ioVersNum})
    (permission #{ioPermssn})
    ;; (misc #{ioMisc})
    )
  (:values
    (refnum #{ioRefNum})))

(deftoolkit-pb 1PBHOpen0 file-manager-b
  (:routine #{PBHOpen})
  (:structure HFileParam)
  (:arguments 
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    ;; The HFS.h definition for HFileParam calls the ioPermssn field "filler1"
    (permission #{filler1})
    ;; ioMisc appears in the ioParam variant, overlaying our
    ;; HFileParam's ioFDirIndex, ioFlAttrib and ioFlVersNum fields
    ;; (misc #{ioMisc})
    (dirid #{ioDirID}))
  (:values
    (refnum #{ioFRefNum})))

(deftoolkit-pb 1PBOpenRF0 file-manager-a
  (:routine #{PBOpenRF})
  (:structure ioparam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (versnum #{ioVersNum})
    (permission #{ioPermssn})
    ;; (misc #{ioMisc})
    )
  (:values
    (refnum #{ioRefNum})))

(deftoolkit-pb 1PBHOpenRF0 file-manager-b
  (:routine #{PBHOpenRF})
  (:structure HFileParam)
  (:arguments 
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    ;; The HFS.h definition for HFileParam calls the ioPermssn field "filler1"
    (permission #{filler1})
    ;; ioMisc appears in the ioParam variant, overlaying
    ;; HFileParam's ioFDirIndex, ioFlAttrib and ioFlVersNum fields
    ;; (misc #{ioMisc})
    (dirid #{ioDirID}))
  (:values
    (refnum #{ioFRefNum})))

(deftoolkit-pb 1PBLockRange0 file-manager-b
  (:routine #{PBLockRange})
  (:structure IOParam)
  (:arguments
    (refnum #{ioVRefNum})
    (reqcount #{ioReqCount})
    (posmode #{ioPosMode})
    (posoffset #{ioPosOffset}))
  (:values ))

(deftoolkit-pb 1PBUnlockRange0 file-manager-b
  (:routine #{PBUnlockRange})
  (:structure IOParam)
  (:arguments
    (refnum #{ioVRefNum})
    (reqcount #{ioReqCount})
    (posmode #{ioPosMode})
    (posoffset #{ioPosOffset}))
  (:values ))

;; Handcoded because of the buffer management
(deftoolkit 1PBRead0 file-manager-b
   ((vrefnum integer-16)
    (refnum integer-16)
    (buffer (opaque-bytes (:c #{unsigned char *}
			      (:length (ignore) #{count}))))
    (count integer-32)
    (posmode integer-16)
    (posoffset integer-32))
   ((actual-count integer-32)
    (out-buffer (opaque-bytes (:c #{unsigned char *}
				  (:length (ignore) #{count})))
		:overwrite buffer)
    (final-mark integer-32))
   #{ {
   	OSErr err;
	Handle h;
	IOParam pb;

	ClearMemory((void*)&pb, (long)sizeof(IOParam));
	h = NewHandle((Size)count);
	HLock(h);
	pb.ioVRefNum = vrefnum;
	pb.ioRefNum = refnum;
	pb.ioBuffer = *h;
	pb.ioReqCount = count;
	pb.ioPosMode = posmode;
	pb.ioPosOffset = posoffset;
	err = PBRead(&pb, false);
	HUnlock(h);
	if (err) DisposHandle(h);
	if (err) TKError(err);
	err = pb.ioResult;
	if (err) DisposHandle(h);
	if (err) TKError(err);
	HLock(h);
	count = pb.ioActCount;
	RPCValues(count, *h, pb.ioPosOffset);
	HUnlock(h);
	DisposHandle(h);
	} }
	)

(deftoolkit-pb 1PBWrite0 file-manager-b
  (:routine #{PBWrite})
  (:structure IOParam)
  (:arguments
    (vrefnum #{ioVRefNum})
    (refnum #{ioRefNum})
    (buffer #{ioBuffer} :type (opaque-bytes (:c #{char *}
						(:length (ignore) #{count}))))
    (count #{ioReqCount})
    (posmode #{ioPosMode})
    (posoffset #{ioPosOffset}))
  (:values
    (actual-count #{ioActCount})
    (new-mark #{ioPosOffset})))

(deftoolkit-pb 1PBGetFPos0 file-manager-b
  (:routine #{PBGetFPos})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum}))
  (:values
    (mark #{ioPosOffset})))

(deftoolkit-pb 1PBSetFPos0 file-manager-b
  (:routine #{PBSetFPos})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum})
    (posmode #{ioPosMode})
    (posoffset #{ioPosOffset}))
  (:values
    (new-mark #{ioPosOffset})))

(deftoolkit-pb 1PBGetEOF0 file-manager-b
  (:routine #{PBGetEOF})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum}))
  (:values
    (eof #{ioMisc} :cast #{(long)} :type integer-32)))

(deftoolkit-pb 1PBSetEOF0 file-manager-b
  (:routine #{PBSetEOF})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum})
    (eof #{ioMisc} :cast #{(Ptr)} :type integer-32))
  (:values ))

(deftoolkit-pb 1PBAllocate0 file-manager-b
  (:routine #{PBAllocate})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum})
    (count #{ioReqCount}))
  (:values
    (actual-count #{ioActCount})))

(deftoolkit-pb 1PBAllocContig0 file-manager-b
  (:routine #{PBAllocContig})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum})
    (count #{ioReqCount}))
  (:values
    (actual-count #{ioActCount})))

(deftoolkit-pb 1PBFlushFile0 file-manager-b
  (:routine #{PBFlushFile})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum}))
  (:values ))

(deftoolkit-pb 1PBClose0 file-manager-b
  (:routine #{PBClose})
  (:structure IOParam)
  (:arguments
    (refnum #{ioRefNum}))
  (:values ))

;; Creating and deleting files and directories
(deftoolkit-pb 1PBCreate0 file-manager-b
  (:routine #{PBCreate})
  (:structure FileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (version-number #{ioFVersNum}))
  (:values ))

(deftoolkit-pb 1PBHCreate0 file-manager-b
  (:routine #{PBHCreate})
  (:structure HFileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (dirid #{ioDirID}))
  (:values ))

(deftoolkit-pb 1PBDirCreate0 file-manager-a
  (:routine #{PBDirCreate})
  (:structure HFileParam)
  (:arguments
    (name #{ioNamePtr} :copy T :output new-name)
    (vrefnum #{ioVRefNum})
    (version-number #{ioFVersNum})
    (dirid #{ioDirID}))
  (:values
    (new-name #{ioNamePtr})
    (new-dirid #{ioDirID})))

(deftoolkit-pb 1PBDelete0 file-manager-b
  (:routine #{PBDelete})
  (:structure FileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (version-number #{ioFVersNum}))
  (:values ))

(deftoolkit-pb 1PBHDelete0 file-manager-b
  (:routine #{PBHDelete})
  (:structure HFileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (dirid #{ioDirID}))
  (:values ))


;; Changing information about files and directories
(deftoolkit-pb 1PBGetFInfo0 file-manager-a
  (:routine #{PBGetFInfo})
  (:structure FileParam)
  (:arguments
    pb
    (name #{ioNamePtr} :copy T :output out-name)
    (vrefnum #{ioVRefNum})
    (version-number #{ioFVersNum})
    (fdirindex #{ioFDirIndex}))
  (:values-with-pb
    pb
    (out-name #{ioNamePtr})))

(deftoolkit-pb 1PBHGetFInfo0 file-manager-b
  (:routine #{PBHGetFInfo})
  (:structure HFileParam)
  (:arguments
    pb
    (name #{ioNamePtr} :copy T :output out-name)
    (vrefnum #{ioVRefNum})
    (fdirindex #{ioFDirIndex})
    (dirid #{ioDirID}))
  (:values-with-pb
    pb
    (out-name #{ioNamePtr})))

(deftoolkit-pb 1PBSetFInfo0 file-manager-b
  (:routine #{PBSetFInfo})
  (:structure FileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (version-number #{ioFVersNum})
    (finder-info #{ioFlFndrInfo})
    (creation-date #{ioFlCrDat})
    (modification-date #{ioFlMdDat}))
  (:values ))

(deftoolkit-pb 1PBHSetFInfo0 file-manager-b
  (:routine #{PBHSetFInfo})
  (:structure HFileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (finder-info #{ioFlFndrInfo})
    (dirid #{ioDirID})
    (creation-date #{ioFlCrDat})
    (modification-date #{ioFlMdDat}))
  (:values ))

(deftoolkit-pb 1PBSetFLock0 file-manager-b
  (:routine #{PBSetFLock})
  (:structure FileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (version-number #{ioFVersNum}))
  (:values ))

(deftoolkit-pb 1PBHSetFLock0 file-manager-b
  (:routine #{PBHSetFLock})
  (:structure HFileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (dirid #{ioDirID}))
  (:values ))

(deftoolkit-pb 1PBRstFLock0 file-manager-b
  (:routine #{PBRstFLock})
  (:structure FileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (version-number #{ioFVersNum}))
  (:values ))

(deftoolkit-pb 1PBHRstFLock0 file-manager-b
  (:routine #{PBHRstFLock})
  (:structure HFileParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (dirid #{ioDirID}))
  (:values ))

(deftoolkit-pb 1PBSetFVers0 file-manager-b
  (:routine #{PBSetFVers})
  (:structure IOParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (version-number #{ioVersNum})
    (new-version-number #{ioMisc} :cast #{(Ptr)} :type integer-32))	;in high byte
  (:values ))

(deftoolkit-pb 1PBRename0 file-manager-b
  (:routine #{PBRename})
  (:structure IOParam)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (version-number #{ioVersNum})
    (new-name #{ioMisc} :type pascal-string :cast #{(Ptr)}))
  (:values ))

;;---The LSC files FileMgr.h and HFS.h make this impossible.
;; the field ioMisc is defined in HIOParam, but ioDirID is in HFileParam
;(deftoolkit-pb 1PBHRename0 file-manager-b
;  (:routine #{PBHRename})
;  (:structure HFileParam)
;  (:arguments
;    (name #{ioNamePtr})
;    (vrefnum #{ioVRefNum})
;    (version-number #{ioFVersNum})
;    (new-name #{ioMisc} :type pascal-string)
;    (dirid #{ioDirID}))
;  (:values ))

;; Hierarchical directory routines
;;Tested by file access path method (:change-properties mac-rpc-file-access-path)
(deftoolkit-pb 1PBGetCatInfo0 file-manager-a
  (:routine #{PBGetCatInfo})
  (:structure HFileInfo)			;DirInfo
  (:arguments
    pb
    (name #{ioNamePtr} :copy T :output out-name)
    (vrefnum #{ioVRefNum})
    (fdirindex  #{ioFDirIndex})
    (dirid #{ioDirID}))
  (:values-with-pb
    pb
    (out-name #{ioNamePtr})))

;;Tested by file access path method (:change-properties mac-rpc-file-access-path)
(deftoolkit 1PBSetCatInfo0 file-manager-a
   ((in-pb HFileInfo)
    (name pascal-string :output out-name))
   ((out-name pascal-string))
   #{ { OSErr err;
	Str255 local_name;
	HFileInfo *pb = (HFileInfo*)in_pb;

	CopyPString(name, local_name);
	pb->ioNamePtr = (StringPtr)&local_name;
	pb->ioCompletion = 0L;

	err = PBSetCatInfo(pb, false);
	if (err) TKError(err);
	err = pb->ioResult;
	if (err) TKError(err);
	RPCValues(local_name);
	} }
	)

(deftoolkit-pb 1PBCatMove0 file-manager-b
  (:routine #{PBCatMove})
  (:structure CMovePBRec)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (newname #{ioNewName} :type pascal-string)
    (newdirid #{ioNewDirID})
    (dirid #{ioDirID}))
  (:values ))


;; Working Directory routines
(deftoolkit-pb 1PBOpenWD0 file-manager-b
  (:routine #{PBOpenWD})
  (:structure WDPBRec)
  (:arguments
    (name #{ioNamePtr})
    (vrefnum #{ioVRefNum})
    (wdprocid #{ioWDProcID})
    (wddirid #{ioWDDirID}))
  (:values
    (new-wdrefnum #{ioVRefNum})))

(deftoolkit-pb 1PBCloseWD0 file-manager-b
  (:routine #{PBCloseWD})
  (:structure WDPBRec)
  (:arguments
    (vrefnum #{ioVRefNum}))
  (:values ))

(deftoolkit-pb 1PBGetWDInfo0 file-manager-b
  (:routine #{PBGetWDInfo})
  (:structure WDPBRec)
  (:arguments
    (name #{ioNamePtr} :copy T :output out-name)
    (vrefnum #{ioVRefNum})
    (wdindex #{ioWDIndex})
    (wdprocid #{ioWDProcID})
    (wdvrefnum #{ioWDVRefNum}))
  (:values
    (out-name #{ioNamePtr})
    (out-vrefnum #{ioVRefNum})
    (out-wdprocid #{ioWDProcID})
    (out-wdvrefnum #{ioWDVRefNum})
    (out-wddirid #{ioWDDirID})))

;; Even lower level
(deftoolkit 1GetFSQHdr0 file-manager-b
   ()
   ((qheader qhdrptr))
   #{ { QHdrPtr ptr;
	ptr = GetFSQHdr();
	RPCValues((long)ptr);
	} }
	)

(deftoolkit 1GetVCBQHdr0 file-manager-b
   ()
   ((qheader qhdrptr))
   #{ { QHdrPtr ptr;
	ptr = GetVCBQHdr();
	RPCValues((long)ptr);
	} }
	)

(deftoolkit-pb 1PBGetFCBInfo0 file-manager-a
  (:routine #{PBGetFCBInfo})
  (:structure fcbpbrec)
  (:arguments
    pb
    (name #{ioNamePtr} :copy T :output out-name)
    (vrefnum #{ioVRefNum})
    (refnum #{ioRefNum})
    (fcb-index #{ioFCBIndx}))
  (:values-with-pb
    pb
    (out-name #{ioNamePtr})))

(deftoolkit 1GetDrvQHdr0 file-manager-b
   ()
   ((qheader qhdrptr))
   #{ { QHdrPtr ptr;
	ptr = GetDrvQHdr();
	RPCValues((long)ptr);
	} }
	)


#||
(write-toolkit-submodule-c-program file-manager-0)
(write-toolkit-submodule-c-program file-manager-1)
(write-toolkit-submodule-c-program file-manager-2)
(write-toolkit-submodule-c-program file-manager-3)
(write-toolkit-submodule-c-program file-manager-4)
(write-toolkit-submodule-c-program file-manager-5)
(write-toolkit-submodule-c-program file-manager-6)
(write-toolkit-submodule-c-program file-manager-7)
(write-toolkit-submodule-c-program file-manager-8)
(write-toolkit-submodule-c-program file-manager-a-glue)
(write-toolkit-submodule-c-program file-manager-b-glue)

(write-toolkit-module-c-program file-manager-a) 
(write-toolkit-module-c-program file-manager-b) 
||#

