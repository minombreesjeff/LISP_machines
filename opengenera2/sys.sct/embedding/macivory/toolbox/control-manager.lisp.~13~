;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(control-manager
0			 :submodules T
			 :type :linked
			 :include ("<Controls.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;control-manager;"
			 )
  (:glue-submodule (control-manager-glue :linked "control-manager-link.c"
					 :auto-load "control-manager-auto.c"))
  (:submodule (control-manager-1 :file "control-manager-1.c")
   ;; Initialization and allocation
   NewControl
   GetNewControl
   DisposeControl
   KillControls
   ;; Control display
   SetCTitle
   GetCTitle
   HideControl
   ShowControl
   DrawControls
   HiliteControl
   UpdtControl
   Draw1Control
   )
  (:submodule (control-manager-2 :file "control-manager-2.c")
   ;;Mouse location
   FindControl
   TrackControl
   TestControl
   ;; Control movement and sizing
   MoveControl
   DragControl
   SizeControl
   ;; Control setting and range
   SetCtlValue
   GetCtlValue
   SetCtlMin
   GetCtlMin
   SetCtlMax
   GetCtlMax
   ;; Misc routines
   SetCRefCon
   GetCRefCon
   SetCtlAction
   GetCtlAction
   ))

;; Initialization and allocation
(deftoolkit NewControl control-manager
   ((thewindow windowptr)
    (boundsrect rect)
    (title pascal-string)
    (visible boolean)
    (value integer-16)
    (min integer-16)
    (max integer-16)
    (procid integer-16)
    (refcon integer-32))
   ((thecontrol controlhandle))
   #{ { 
	ControlHandle h;
	h = NewControl(thewindow, boundsrect, title, visible, value, min, max, procid, refcon);
	RPCValues((long)h);
	} }
	)

(deftoolkit GetNewControl control-manager
   ((controlid integer-16)
    (thewindow windowptr))
   ((thecontrol controlhandle))
   #{ { 
	ControlHandle h;
	h = GetNewControl(controlid, thewindow);
	RPCValues((long)h);
	} }
	)

(deftoolkit DisposeControl control-manager
   ((thecontrol controlhandle))
   ()
   #{ { 
	DisposeControl(thecontrol);
	RPCValues();
	} }
	)

(deftoolkit KillControls control-manager
   ((thewindow windowptr))
   ()
   #{ { 
	KillControls(thewindow);
	RPCValues();
	} }
	)

;; Control display
(deftoolkit SetCTitle control-manager
   ((thecontrol controlhandle)
    (title pascal-string))
   ()
   #{ { 
	SetCTitle(thecontrol, title);
	RPCValues();
	}}
	)

(deftoolkit GetCTitle control-manager
  ((thecontrol controlhandle)
   (string pascal-string))
  ((out-title pascal-string :overwrite string))
   #{ { 
	Str255 title;
	GetCTitle(thecontrol, &title);
	RPCValues(title);
	}}
	)
  
(deftoolkit HideControl control-manager
   ((thecontrol controlhandle))
   ()
   #{ { 
	HideControl(thecontrol);
	RPCValues();
	}}
	)

(deftoolkit ShowControl control-manager
   ((thecontrol controlhandle))
   ()
   #{ { 
	ShowControl(thecontrol);
	RPCValues();
	}}
	)

(deftoolkit DrawControls control-manager
   ((thewindow windowptr))
   ()
   #{ { 
	DrawControls(thewindow);
	RPCValues();
	}}
	)

(deftoolkit HiliteControl control-manager
   ((thecontrol controlhandle)
    (highlight-state integer-16))
   ()
   #{ { 
	HiliteControl(thecontrol, highlight_state);
	RPCValues();
	}}
	)

(deftoolkit UpdtControl control-manager
   ((thewindow windowptr)
    (updatergn rgnhandle))
   ()
   #{ { 
	UpdtControl(thewindow, updatergn);
	RPCValues();
	}}
	)

(deftoolkit Draw1Control control-manager
   ((thecontrol controlhandle))
   ()
   #{ { 
       Draw1Control(thecontrol);
	RPCValues();
	}}
	)

;;Mouse location
(deftoolkit FindControl control-manager
   ((thepoint point)
    (thewindow windowptr))
   ((partcode integer-16)
    (whichcontrol controlhandle))
   #{ { 
	ControlHandle h;
	short partcode;
	partcode = FindControl(*(Point *)thepoint, thewindow, &h);
	RPCValues(partcode, (long)h);
	}}
	)

(deftoolkit TrackControl control-manager
   ((thecontrol controlhandle)
    (startpt point)
    (actionproc procptr))
   ((part-code integer-16))
   #{ { 
	short part;
	/* ---does this want &startpt? No it wants *startpt */
	part = TrackControl(thecontrol, *(Point *)startpt, actionproc);
	RPCValues(part);
	}}
	)

(deftoolkit TestControl control-manager
   ((thecontrol controlhandle)
    (thepoint point))
   ((part-code integer-16))
   #{ { 
	short part;
	part = TestControl(thecontrol, *(Point *)thepoint);
	RPCValues(part);
	}}
	)

;; Control movement and sizing
(deftoolkit MoveControl control-manager
   ((thecontrol controlhandle)
    (h integer-16)
    (v integer-16))
   ()
   #{ { 
	MoveControl(thecontrol, h, v);
	RPCValues();
	}}
	)

(deftoolkit DragControl control-manager
   ((thecontrol controlhandle)
    (startpt point)
    (limitrect rect)
    (sloprect rect)
    (axis integer-16))
   ()
   #{ { 
	DragControl(thecontrol, *(Point *)startpt, limitrect, sloprect, axis);
	RPCValues();
	}}
	)
   
(deftoolkit SizeControl control-manager
   ((thecontrol controlhandle)
    (w integer-16)
    (h integer-16))
   ()
   #{ { 
	SizeControl(thecontrol, w, h);
	RPCValues();
	}}
	)

;; Control setting and range
(deftoolkit SetCtlValue control-manager
   ((thecontrol controlhandle)
    (thevalue integer-16))
   ()
   #{ { 
	SetCtlValue(thecontrol, thevalue);
	RPCValues();
	}}
	)

(deftoolkit GetCtlValue control-manager
   ((thecontrol controlhandle))
   ((value integer-16))
   #{ { 
	short value;
	value = GetCtlValue(thecontrol);
	RPCValues(value);
	}}
	)

(deftoolkit SetCtlMin control-manager
   ((thecontrol controlhandle)
    (thevalue integer-16))
   () 
   #{ { 
	SetCtlMin(thecontrol, thevalue);
	RPCValues();
	}}
	)

(deftoolkit GetCtlMin control-manager
   ((thecontrol controlhandle))
   ((value integer-16))
   #{ { 
	short value;
	value = GetCtlMin(thecontrol);
	RPCValues(value);
	}}
	)

(deftoolkit SetCtlMax control-manager
   ((thecontrol controlhandle)
    (thevalue integer-16))
   () 
   #{ { 
	SetCtlMax(thecontrol, thevalue);
	RPCValues();
	}}
	)

(deftoolkit GetCtlMax control-manager
   ((thecontrol controlhandle))
   ((value integer-16))
   #{ { 
	short value;
	value = GetCtlMax(thecontrol);
	RPCValues(value);
	}}
	)

;; Misc routines
(deftoolkit SetCRefCon control-manager
   ((thecontrol controlhandle)
    (value integer-32))
   ()
   #{ { 
	SetCRefCon(thecontrol, value);
	RPCValues();
	}}
	)

(deftoolkit GetCRefCon control-manager
   ((thecontrol controlhandle))
   ((value integer-32))
   #{ { 
	long value;
	value = GetCRefCon(thecontrol);
	RPCValues(value);
	}}
	)

(deftoolkit SetCtlAction control-manager
   ((thecontrol controlhandle)
    (actionproc procptr))
   ()
   #{ { 
	SetCtlAction(thecontrol, actionproc);
	RPCValues();
	}}
	)

(deftoolkit GetCtlAction control-manager
   ((thecontrol controlhandle))
   ((actionproc procptr))
   #{ { 
	ProcPtr actionproc;
	actionproc = GetCtlAction(thecontrol);
	RPCValues((long)actionproc);
	}}
	)

#||
(write-toolkit-submodule-c-program control-manager-1)
(write-toolkit-submodule-c-program control-manager-2)
(write-toolkit-submodule-c-program control-manager-glue)

(write-toolkit-module-c-program control-manager)
||#

