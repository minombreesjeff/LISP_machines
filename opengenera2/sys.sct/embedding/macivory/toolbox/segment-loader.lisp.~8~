;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(segment-loader
0			 :submodules T
			 :type :linked
			 :include ("<SegLoad.h>")
			 :default-pathname
			   "sys:embedding;macivory;toolbox;segment-loader;"
			 )
  (:glue-submodule (segment-loader-glue :linked "segment-loader-link.c"
					  :auto-load  "segment-loader-auto.c"))
  (:submodule (segment-loader-1 :file "segment-loader-1.c")
   CountAppFiles
   GetAppFiles
   ClrAppFiles
   GetAppParms
   UnloadSeg
   ExitToShell
   Launch
   Debugger
   DebugStr
   ))

(deftoolkit1 CountAppFiles0 segment-loader
   ()
   ((message integer-16)
    (count integer-16))
   #{ { short m, c;

	CountAppFiles(&m, &c);
	RPCValues(m, c);
	} }
	)

(deftoolkit1 GetAppFiles0 segment-loader
   ((index integer-16)
    (thefilein appfile))
   ((thefileout appfile :overwrite thefilein))
   #{ { AppFile af;

	GetAppFiles(index, &af);
	RPCValues(&af);
	} }
	)

(deftoolkit1 ClrAppFiles0 segment-loader
   ((index integer-16))
   ()
   #{ { ClrAppFiles(index);
	RPCValues();
	} }
	)

(deftoolkit1 GetAppParms0 segment-loader
   ()
   ((name str255)
    (aprefnum integer-16)
    (apparam handle))
   #{ { Str255 name;
	short ref;
	Handle param;
	
	GetAppParms(&name, &ref, &param);
	RPCValues(name, ref, (long)param);
	} }
	)

(deftoolkit1 UnloadSeg0 segment-loader
   ((routineaddr ptr))
   ()
   #{ { UnloadSeg(routineaddr);
	RPCValues();
	} }
	)

(deftoolkit1 ExitToShell0 segment-loader
   ()
   ()
   #{ { ExitToShell();
	RPCValues();
	} }
	)

(deftoolkit 1Launch0 segment-loader
  ((name pascal-string)
   (fdflags cardinal-16)
   (launchflags cardinal-32))
  ((result OSErr))
      #{ 
	 OSErr err;
	 {
	   OSErr doLaunch (Str255, unsigned short, unsigned long);
	   err = doLaunch(name, fdflags, launchflags);
	 }
	 RPCValues(err);
	 }
	 )

(deftoolkit 1Debugger0 segment-loader
   ()
   ()
	#{ Debugger();
	   RPCValues();
	   } )

(deftoolkit 1DebugStr0 segment-loader
  ((string pascal-string))
  ( )
	#{
	    DebugStr(string);
	    RPCValues();
	    } )

#||
(write-toolkit-submodule-c-program segment-loader-1 "host:mac-4:macivory development:toolbox:segment-loader:")

(write-toolkit-submodule-c-program segment-loader-glue "host:mac-4:macivory development:toolbox:segment-loader:")

(write-toolkit-module-c-program segment-loader)
||#
