;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Because the version of LSC that I'm using doesn't define the types
;;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")cwindowptr0 and 1cdialogptr0, I have used the equivalent types windowptr 
;;; and dialogptr instead.

;;; This version also fails to define 1GetCWMgrPort. 0I've left it commented out.
#|
(define-remote-type  1cwindowptr0 ()
  (:abbreviation-for 'macintosh-internals::generic-ptr))
(define-remote-type  1cdialogptr0 ()
  (:abbreviation-for 'macintosh-internals::generic-ptr))
|#


(define-toolkit-module 1(color-toolbox
0			 :submodules T
			 :type :linked		
			 :include ("<Quickdraw.h>" "<Controls.h>" "<Dialogs.h>" "<Menus.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;color-toolbox;"
			 )
  (:glue-submodule (color-toolbox-glue :linked "color-toolbox-link.c"
				       :auto-load "color-toolbox-auto.c"))
  (:submodule (color-toolbox-1 :file "color-toolbox-1.c")
   ;; color window manager
   CWindowStructure
   NewCWindow
   GetNewCWindow
   SetWinColor
   GetAuxWin
   GetWVariant
   GetGrayRgn
   GetCWMgrPort
   SetDeskCPat
   )
  (:submodule (color-toolbox-2 :file "color-toolbox-2.c")
   ;; the color control manager
   SetCtlColor
   GetAuxCtl
   GetCVariant
   ;; The one new color dialog command
   NewCDialog
   )
  (:submodule (color-toolbox-3 :file "color-toolbox-3.c")
   ;; the color menu stuff (and all the rest from book V ***should this all go here?)
   InitProcMenu
   DelMCEntries
   GetMCInfo
   SetMCInfo
   DispMCInfo
   GetMCEntry
   MenuChoice
   SetMCEntries
   GetItemCmd
   SetItemCmd
   PopUpMenuSelect
   
   ))


 


(defmacro with-test-cwindow ((var &key (title "Test Window")
				 (top 100)
				 (left 100)
				 (height 400)
				 (width 500))
			    &body body)
  `(let ((,var nil))
     (unwind-protect
	 (progn 
	   (setq ,var (_1new0c1window0 0
				   (macintosh-internals::make-rect
				     :top ,top
				     :left ,left
				     :bottom (+ ,top ,height)
				     :right (+ ,left ,width))
				   ,title
				   T 0 -1 T 0))
	   (_setport ,var)
	   ,@body)
       (when ,var (_1disposewindow0 ,var)))))


;; color window manager
(deftoolkit1 CWindowStructure0 color-toolbox
   ((cwindow-pointer windowptr)
    (cWindow windowrecord))
   ((out-window windowrecord :overwrite cwindow))
   #{ { RPCValues(cwindow_pointer);
	} }
	)

;;; Note that LSC doesn't declare the cwindowptr type
(deftoolkit1 NewCWindow0 color-toolbox
   ((wstorage ptr)
    (boundsrect rect)
    (title pascal-string)
    (visible boolean)
    (procid integer-16)
    (behind windowptr)
    (goawayflag boolean)
    (refcon integer-32))
   ((cwindow windowptr))
   #{ { GrafPtr cw;
   
	cw = NewCWindow(wstorage, boundsrect, title, visible,
			procid, behind, goawayflag, refcon);
	RPCValues((long)cw);
	} }
	)


(deftoolkit1 GetNewCWindow0 color-toolbox
   ((windowid integer-16)
    (wstorage ptr)
    (behind windowptr))
   ((cwindow windowptr))
   #{ { GrafPtr cw;

	cw = GetNewCWindow(windowid, wstorage, behind);
	RPCValues((long)cw);
	} }
	)

(deftoolkit1 SetWinColor0 color-toolbox
   ((thewindow windowptr)
    (newcolortable ctabhandle))
   ()
   #{ { SetWinColor(thewindow, newcolortable);
	RPCValues();
	} }
	)

(deftoolkit1 GetAuxWin0 color-toolbox
   ((thewindow windowptr))
   ((existsp boolean)
    (colortable ctabhandle))
   #{ { Boolean existsp;
	CTabHandle ctab;
	
	existsp = GetAuxWin(thewindow, ctab);
	RPCValues(existsp, (long)ctab);
	} }
	)

(deftoolkit1 GetWVariant0 color-toolbox
   ((whichwindow windowptr))
   ((number integer-16))
   #{ { short num = GetWVariant(whichwindow);
	RPCValues(num);
	} }
	)

(deftoolkit1 GetGrayRgn0 color-toolbox
   ()
   ((rgn rgnhandle))
   #{ { RgnHandle rgn = GetGrayRgn();
	RPCValues((long)rgn);
	} }
	)
 
;;; *** For some reason LSC doesn't define this
;(deftoolkit1 GetCWMgrPort0 color-toolbox
;   ()
;   ((wport cgrafptr))
;   #{ { CGrafPtr wport;
;   
;	GetCWMgrPort(wport);
;	RPCValues((long)wport);
;	} }
;	)

(deftoolkit1 SetDeskCPat0 color-toolbox
   ((deskpixpat pixpathandle))
   ()
   #{ { SetDeskCPat(deskpixpat);
	RPCValues();
	} }
	)




;; the color control manager
(deftoolkit1 SetCtlColor0 color-toolbox
   ((thecontrol controlhandle)
    (newcolortable cctabhandle))
   ()
   #{ { SetCtlColor(thecontrol, newcolortable);
	RPCValues();
	} }
	)

(deftoolkit1 GetAuxCtl0 color-toolbox
   ((thecontrol controlhandle))
   ((owncolortabp boolean)
    (achndl auxctlhndl))
   #{ { Boolean ownp;
	AuxCtlHandle aux;
	ownp = GetAuxCtl(thecontrol, &aux);
	RPCValues(ownp, aux);
	} }
	)

(deftoolkit1 GetCVariant0 color-toolbox
   ((thecontrol controlhandle))
   ((variantnumber integer-16))
   #{ { short var = GetCVariant(thecontrol);
	RPCValues(var);
	} }
	)

;; The one new color dialog command
;;; LSC Doesn't now about the CDialogPtr type
(deftoolkit1 NewCDialog0 color-toolbox
   ((dstorage ptr)
    (boundsrect rect)
    (title str255)
    (visible boolean)
    (procid integer-16)
    (behind windowptr)
    (goawayflag boolean)
    (refcon integer-32)
    (items handle))
   ((dialogptr dialogptr))
   #{ { DialogPtr cdptr;
   
	cdptr = NewCDialog(dstorage, boundsrect, title, visible, procid, behind,
				     goawayflag, refcon, items);
	RPCValues((long)cdptr);
	} }
	)




;; the color menu stuff (and all the rest from book V ***should this all go here?)
(deftoolkit1 InitProcMenu0 color-toolbox
   ((mbresid integer-16))
   ()
   #{ { InitProcMenu(mbresid);
	RPCValues();
	} }
	)

(deftoolkit1 DelMCEntries0 color-toolbox
   ((menuid integer-16)
    (menuitem integer-16))
   ()
   #{ { DelMCEntries(menuid, menuitem);
	RPCValues();
	} }
	)

(deftoolkit1 GetMCInfo0 color-toolbox
   ()
   ((mctable mctablehandle))
   #{ { MCTableHandle mct = GetMCInfo();
	RPCValues((long)mct);
	} }
	)

(deftoolkit1 SetMCInfo0 color-toolbox
   ((menucolortable mctablehandle))
   ()
   #{ { SetMCInfo(menucolortable);
	RPCValues();
	} }
	)

(deftoolkit1 DispMCInfo0 color-toolbox
   ((menucolortable mctablehandle))
   ()
   #{ { DispMCInfo(menucolortable);
	RPCValues();
	} }
	)

(deftoolkit1 GetMCEntry0 color-toolbox
   ((menuid integer-16)
    (menuitem integer-16))
   ((mcentryptr mcentryptr))
   #{ { MCEntryPtr mce = GetMCEntry(menuid, menuitem);
	RPCValues((long)mce);
	} }
	)

(deftoolkit1 MenuChoice0 color-toolbox
   ()
   ((choice integer-32))
   #{ { long choice = MenuChoice();
	RPCValues(choice);
	} }
	)

(deftoolkit1 SetMCEntries0 color-toolbox
   ((numentries integer-16)
    (menucentries mctableptr))
   ()
   #{ { SetMCEntries(numentries, menucentries);
	RPCValues();
	} }
	)

(deftoolkit1 GetItemCmd0 color-toolbox
   ((themene menuhandle)
    (item integer-16))
   ((cmdchar integer-16))
   #{ { short cmdch;

	GetItemCmd(themene, item, &cmdch);
	RPCValues(cmdch);
	} }
	)

(deftoolkit1 SetItemCmd0 color-toolbox
   ((themene menuhandle)
    (item integer-16)
    (cmdchar integer-16))
   ()
   #{ { SetItemCmd(themene, item, cmdchar);
	RPCValues();
	} }
	)

(deftoolkit1 PopUpMenuSelect0 color-toolbox
   ((themenu menuhandle)
    (top integer-16)
    (left integer-16)
    (popupitem integer-16))
   ((choice integer-32))
   #{ { long choice = PopUpMenuSelect(themenu, top, left, popupitem);
	RPCValues(choice);
	} }
	)



#||
(write-toolkit-submodule-c-program color-toolbox-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program color-toolbox-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program color-toolbox-3 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program color-toolbox-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program color-toolbox)
||#

