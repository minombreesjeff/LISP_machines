;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(color-quickdraw
0			 :submodules T
			 :type :linked
			 :include ("<Quickdraw.h>")
			 :default-pathname "sys:embedding;macivory;toolbox;color-quickdraw;"
			 )
  (:glue-submodule (color-quickdraw-glue :linked "color-quickdraw-link.c"
					 :auto-load "color-quickdraw-auto.c"))
  (:submodule (color-quickdraw-1 :file "color-quickdraw-1.c")
   ;; CGrafPort routines
   OpenCPort
   InitCPort
   CloseCPort
   ;; Setting foreground and background colors
   RGBForeColor
   RGBBackColor
   GetForeColor
   GetBackColor
   )
  (:submodule (color-quickdraw-2 :file "color-quickdraw-2.c")
   ;; Pixel Maps
   NewPixMap
   DisposPixMap
   CopyPixMap

;; These have been changed for color 
;   CopyBits
;   CopyMask

   SeedCFill
   CalcCMask
   )
  (:submodule (color-quickdraw-3 :file "color-quickdraw-3.c")
   ;; operations on pixel patterns
   NewPixPat
   DisposPixPat
   GetPixPat
   CopyPixPat
   MakeRGBPat
   PenPixPat
   BackPixPat
   )
  (:submodule (color-quickdraw-4 :file "color-quickdraw-4.c")
   ;; Color drawing
   FillCRect
   FillCOval
   FillCRoundRect
   FillCArc
   FillCRgn
   FillCPoly
   GetCPixel
   SetCPixel
   )
  (:submodule (color-quickdraw-5 :file "color-quickdraw-5.c")
   ;; Color cursors
   GetCCursor
   SetCCursor
   DisposCCursor
   AllocCursor
   ;; Icons
   GetCIcon
   DisposCIcon
   PlotCIcon
   ;; Grafport fields
   SetPortPix
   OpColor
   HiliteColor
   CharExtra
   SetStdCProcs
   ;; Color Tables
   GetCTable
   DisposCTable
   ))
   



(deftoolkit1 OpenCPort0 color-quickdraw
   ((port cgrafptr))
   ()
   #{ { OpenCPort(port);
	RPCValues();
	} }
	)

(deftoolkit1 InitCPort0 color-quickdraw
   ((port cgrafptr))
   ()
   #{ { InitCPort(port);
	RPCValues();
	} }
	)

(deftoolkit1 CloseCPort0 color-quickdraw
   ((port cgrafptr))
   ()
   #{ { CloseCPort(port);
	RPCValues();
	} }
	)

;; Setting foreground and background colors

(deftoolkit1 RGBForeColor0 color-quickdraw
   ((color rgbcolor))
   ()
   #{ { RGBForeColor(color);
	RPCValues();
	} }
	)

(deftoolkit1 RGBBackColor0 color-quickdraw
   ((color rgbcolor))
   ()
   #{ { RGBBackColor(color);
	RPCValues();
	} }
	)

(deftoolkit1 GetForeColor0 color-quickdraw
   ((color rgbcolor))
   ((colorout rgbcolor :overwrite color))
   #{ { RGBColor rgb;
   
	GetForeColor(&rgb);
	RPCValues(&rgb);
	} }
	)

(deftoolkit1 GetBackColor0 color-quickdraw
   ((color rgbcolor))
   ((colorout rgbcolor :overwrite color))
   #{ { RGBColor rgb;

	GetBackColor(&rgb);
	RPCValues(&rgb);
	} }
	)



;; Pixel Maps
(deftoolkit1 NewPixMap0 color-quickdraw
   ()
   ((pixmaphandle pixmaphandle))
   #{ { PixMapHandle ppm = NewPixMap();
	RPCValues((long)ppm);
	} }
	)

(deftoolkit1 DisposPixMap0 color-quickdraw
   ((pm pixmaphandle))
   ()
   #{ { DisposPixMap(pm);
	RPCValues();
	} }
	)

(deftoolkit1 CopyPixMap0 color-quickdraw
   ((srcpm pixmaphandle)
    (dstpm pixmaphandle))
   ()
   #{ { CopyPixMap(srcpm, dstpm);
	RPCValues();
	} }
	)


;; These have been changed for color, do our previous verions still work?
;   CopyBits
;   CopyMask


(deftoolkit1 SeedCFill0 color-quickdraw
   ((srcbits bitmap)
    (dstbits bitmap)
    (srcrect rect)
    (dstrect rect)
    (seedh integer-16)
    (seedv integer-16)
    (matchproc procptr)
    (matchdata integer-32))
   ()
   #{ { SeedCFill(srcbits, dstbits, srcrect, dstrect, seedh, seedv, matchproc, matchdata);
	RPCValues();
	} }
	)

(deftoolkit1 CalcCMask0 color-quickdraw
   ((srcbits bitmap)
    (dstbits bitmap)
    (srcrect rect)
    (dstrect rect)
    (seedrgb rgbcolor)
    (matchproc procptr)
    (matchdata integer-32))
   ()
   #{ { CalcCMask(srcbits, dstbits, srcrect, dstrect, seedrgb, matchproc, matchdata);
	RPCValues();
	} }
	)



;; operations on pixel patterns

(deftoolkit1 NewPixPat0 color-quickdraw
   ()
   ((ppat pixpathandle))
   #{ { PixPatHandle ppat = NewPixPat();
	RPCValues((long)ppat);
	} }
	)

(deftoolkit1 DisposPixPat0 color-quickdraw
   ((ppat pixpathandle))
   ()
   #{ { DisposPixPat(ppat);
	RPCValues();
	} }
	)

(deftoolkit1 GetPixPat0 color-quickdraw
   ((patid integer-16))
   ((ppathandle Pixpathandle))
   #{ { PixPatHandle ppat = GetPixPat(patid);
	RPCValues((long)ppat);
	} }
	)

(deftoolkit1 CopyPixPat0 color-quickdraw
   ((srcpp pixpathandle)
    (dstpp pixpathandle))
   ()
   #{ { CopyPixPat(srcpp, dstpp);
	RPCValues();
	} }
	)

(deftoolkit1 MakeRGBPat0 color-quickdraw
   ((ppat pixpathandle)
    (mycolor rgbcolor))
   ()
   #{ { MakeRGBPat(ppat, mycolor);
	RPCValues();
	} }
	)

(deftoolkit1 PenPixPat0 color-quickdraw
   ((ppat pixpathandle))
   ()
   #{ { PenPixPat(ppat);
	RPCValues();
	} }
	)

(deftoolkit1 BackPixPat0 color-quickdraw
   ((ppat pixpathandle))
   ()
   #{ { BackPixPat(ppat);
	RPCValues();
	} }
	)




;; Color drawing
(deftoolkit1 FillCRect0 color-quickdraw
   ((r rect)
    (ppat pixpathandle))
   ()
   #{ { FillCRect(r, ppat);
	RPCValues();
	} }
	)

(deftoolkit1 FillCOval0 color-quickdraw
   ((r rect)
    (ppat pixpathandle))
   ()
   #{ { FillCOval(r, ppat);
	RPCValues();
	} }
	)

(deftoolkit1 FillCRoundRect0 color-quickdraw
   ((r rect)
    (ovwd integer-16)
    (ovht integer-16)
    (ppat pixpathandle))
   ()
   #{ { FillCRoundRect(r, ovwd, ovht, ppat);
	RPCValues();
	} }
	)

(deftoolkit1 FillCArc0 color-quickdraw
   ((r rect)
    (startangle integer-16)
    (arcangle integer-16)
    (ppat pixpathandle))
   ()
   #{ { FillCArc(r, startangle, arcangle, ppat);
	RPCValues();
	} }
	)

(deftoolkit1 FillCRgn0 color-quickdraw
   ((rgn rgnhandle)
    (ppat pixpathandle))
   ()
   #{ { FillCRgn(rgn, ppat);
	RPCValues();
	} }
	)

(deftoolkit1 FillCPoly0 color-quickdraw
   ((poly polyhandle)
    (ppat pixpathandle))
   ()
   #{ { FillCPoly(poly, ppat);
	RPCValues();
	} }
	)

(deftoolkit1 GetCPixel0 color-quickdraw
   ((h integer-16)
    (v integer-16)
    (cpix rgbcolor))
   ((cpixout rgbcolor :overwrite cpix))
   #{ { RGBColor cpix;

	GetCPixel(h, v, &cpix);
	RPCValues(&cpix);
	} }
	)

(deftoolkit1 SetCPixel0 color-quickdraw
   ((h integer-16)
    (v integer-16)
    (cpix rgbcolor))
   ()
   #{ { SetCPixel(h, v, cpix);
	RPCValues();
	} }
	)



;; Color cursors
(deftoolkit1 GetCCursor0 color-quickdraw
   ((crsrid integer-16))
   ((crsrhndle ccrsrhandle))
   #{ { CCrsrHandle cch = GetCCursor(crsrid);
	RPCValues((long)cch);
	} }
	)

(deftoolkit1 SetCCursor0 color-quickdraw
   ((crsrhndle ccrsrhandle))
   ()
   #{ { SetCCursor(crsrhndle);
	RPCValues();
	} }
	)

(deftoolkit1 DisposCCursor0 color-quickdraw
   ((crsrhndle ccrsrhandle))
   ()
   #{ { DisposCCursor(crsrhndle);
	RPCValues();
	} }
	)

(deftoolkit1 AllocCursor0 color-quickdraw
   ()
   ()
   #{ { AllocCursor();
	RPCValues();
	} }
	)

;; Icons
(deftoolkit1 GetCIcon0 color-quickdraw
   ((id integer-16))
   ((theicon ciconhandle))
   #{ { CIconHandle theicon = GetCIcon(id);
	RPCValues((long)theicon);
	} }
	)

(deftoolkit1 DisposCIcon0 color-quickdraw
   ((theicon ciconhandle))
   ()
   #{ { DisposCIcon(theicon);
	RPCValues();
	} }
	)

(deftoolkit1 PlotCIcon0 color-quickdraw
   ((therect rect)
    (theicon ciconhandle))
   ()
   #{ { PlotCIcon(therect, theicon);
	RPCValues();
	} }
	)

;;; *** Why doesn't Think implement this?
;; Grafport fields
;(deftoolkit1 SetPortPix0 color-quickdraw
;   ((pm pixmaphandle))
;   ()
;   #{ { SetPortPix(pm);
;	RPCValues();
;	} }
;	)

(deftoolkit1 OpColor0 color-quickdraw
   ((color rgbcolor))
   ()
   #{ { OpColor(color);
	RPCValues();
	} }
	)

(deftoolkit1 HiliteColor0 color-quickdraw
   ((color rgbcolor))
   ()
   #{ { HiliteColor(color);
	RPCValues();
	} }
	)

(deftoolkit1 CharExtra0 color-quickdraw
   ((extra fixed))
   ()
   #{ { CharExtra(extra);
	RPCValues();
	} }
	)

(deftoolkit1 SetStdCProcs0 color-quickdraw
   ((cprocs cqdprocs))
   ((newcprocs cqdprocs :overwrite cprocs))
   #{ { CQDProcs cqd;
   
	SetStdCProcs(&cqd);
	RPCValues(&cqd);
	} }
	)

;; Color Tables
(deftoolkit1 GetCTable0 color-quickdraw
   ((ctid integer-16))
   ((ctable ctabhandle))
   #{ { CTabHandle ctab = GetCTable(ctid);
	RPCValues((long)ctab);
	} }
	)

(deftoolkit1 DisposCTable0 color-quickdraw
   ((ctable ctabhandle))
   ()
   #{ { DisposCTable(ctable);
	RPCValues();
	} }
	)



#||
(write-toolkit-submodule-c-program color-quickdraw-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program color-quickdraw-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program color-quickdraw-3 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program color-quickdraw-4 "blueberry:mac-4:rlb:rui:") 
(write-toolkit-submodule-c-program color-quickdraw-5 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program color-quickdraw-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program color-quickdraw)
||#
