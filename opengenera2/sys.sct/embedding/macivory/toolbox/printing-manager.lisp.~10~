;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(printing-manager
0			 :submodules T
			 :type :linked
			 :include ("<PrintTraps.h>")
			 :default-pathname
			 "SYS:EMBEDDING;MACIVORY;TOOLBOX;PRINTING-MANAGER;"
			 )
  (:glue-submodule (printing-manager-glue :linked "printing-manager-link.c"
					  :auto-load "printing-manager-auto.c"))
  (:submodule (printing-manager-1 :file "printing-manager-1.c")
   ;; First the old printing manager stuff
   ;; Initialization and Termination
   PrOpen
   PrClose
   ;; Printing records and dialogs
   PrintDefault
   PrValidate
   PrStlDialog
   PrJobDialog
   PrJobMerge
   ;; Printing
   PrOpenDoc
   PrOpenPage
   PrClosePage
   PrCloseDoc
   PrPicFile
  )
  (:submodule (printing-manager-2 :file "printing-manager-2.c")
   ;; errors
   PrError
   PrSetError
   ;; Low level driver access
   PrDrvrOpen
   PrDrvrClose
   PrCtlCall
   PrDrvrDCE
   PrDrvrVers
   ;; And the new routine in book V
   PrGeneral
   PrCtlCall-with-data
   )
)



;; First the old printing manager stuff
;; Initialization and Termination

(deftoolkit1 PrOpen0 printing-manager
  ()
  ()
  #{ { OSErr err;

       PrOpen();
       err = PrError();
       if (err) TKError(err);
       RPCValues();
       } }
       )

       
(deftoolkit1 PrClose0 printing-manager
  ()
  ()
  #{ { OSErr err;
  
       PrClose();
       err = PrError();
       if (err) TKError(err);
       RPCValues();
       } }
       )

;; Printing records and dialogs
(deftoolkit1 PrintDefault0 printing-manager
   ((hprint thprint))
   ()
   #{ { OSErr err;
   
	PrintDefault(hprint);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrValidate0 printing-manager
   ((hprint thprint))
   ((notvalidp boolean))
   #{ { OSErr err;
	Boolean notvalidp = PrValidate(hprint);
	err = PrError();
	if (err) TKError(err);
	RPCValues(notvalidp);
	} }
	)

(deftoolkit1 PrStlDialog0 printing-manager
   ((hprint thprint))
   ((comfirmedp boolean))
   #{ { OSErr err;
   
	Boolean confirmedp = PrStlDialog(hprint);
	err = PrError();
	if (err) TKError(err);
	RPCValues(confirmedp);
	} }
	)

(deftoolkit1 PrJobDialog0 printing-manager
   ((hprint thprint))
   ((comfirmedp boolean))
   #{ { OSErr err;
   
	Boolean confirmedp = PrJobDialog(hprint);
	err = PrError();
	if (err) TKError(err);
	RPCValues(confirmedp);
	} }
	)

(deftoolkit1 PrJobMerge0 printing-manager
   ((hprintsrc thprint) 
    (hprintdst thprint))
   ()
   #{ { OSErr err;
   
	PrJobMerge(hprintsrc, hprintdst);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)



;; Printing
(deftoolkit1 PrOpenDoc0 printing-manager
   ((hprint thprint)
    (pprport tpprport)
    (piobuf ptr))
   ((theport tpprport))
   #{ { OSErr err;
	TPPrPort port;
	
	port = PrOpenDoc(hprint, pprport, piobuf);
	err = PrError();
	if (err) TKError(err);
	RPCValues((long)port);
	} }
	)

(deftoolkit1 PrOpenPage0 printing-manager
   ((pprport tpprport)
    (ppageframe tprect))
   ()
   #{ { OSErr err;
   
	PrOpenPage(pprport, ppageframe);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrClosePage0 printing-manager
   ((pprport tpprport))
   ()
   #{ { OSErr err;
   
	PrClosePage(pprport);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrCloseDoc0 printing-manager
   ((pprport tpprport))
   ()
   #{ { OSErr err;
   
	PrCloseDoc(pprport);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrPicFile0 printing-manager
   ((hprint thprint)
    (pprport tpprport)
    (piobuf ptr)
    (pdevbuf ptr)
    (prstatus tprstatus))
   ((newprstatus tprstatus :overwrite prstatus))
   #{ { OSErr err;
	TPrStatus stat;

	PrPicFile(hprint, pprport, piobuf, pdevbuf, &stat);
	err = PrError();
	if (err) TKError(err);
	RPCValues(&stat);
	} }
	)



;; errors
(deftoolkit1 PrError0 printing-manager
   ()
   ((error integer-16))
   #{ { OSErr err;
   
	err = PrError();
	RPCValues(err);
	} }
	)

(deftoolkit1 PrSetError0 printing-manager
   ((err integer-16))
   ()
   #{ { PrSetError(err);
	RPCValues();
	} }
	)

;; Low level driver access
(deftoolkit1 PrDrvrOpen0 printing-manager
   ()
   ()
   #{ { OSErr err;
   
	PrDrvrOpen();
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrDrvrClose0 printing-manager
   ()
   ()
   #{ { OSErr err;
   
	PrDrvrClose();
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrCtlCall0 printing-manager
   ((iwhichctl integer-16)
    (lparam1 integer-32)
    (lparam2 integer-32)
    (lparam3 integer-32))
   ()
   #{ { OSErr err;
   
	PrCtlCall(iwhichctl, lparam1, lparam2, lparam3);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrDrvrDCE0 printing-manager
   ()
   ()
   #{ { OSErr err;
   
	PrDrvrDCE();
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrDrvrVers0 printing-manager
   ()
   ((version integer-16))
   #{ { OSErr err;
	short version;
	
	version = PrDrvrVers();
	err = PrError();
	if (err) TKError(err);
	RPCValues(version);
	} }
	)

;; And the new routine in book V
(deftoolkit1 PrGeneral0 printing-manager
   ((pdata ptr))
   ()
   #{ { OSErr err;
   
	PrGeneral(pdata);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

(deftoolkit1 PrCtlCall-with-data0 printing-manager
   ((iwhichctl integer-16)
    (buffer (opaque-bytes))
    (lbufcount integer-32)
    (lparam3 integer-32))
   ()
   #{ { OSErr err;
   
	PrCtlCall(iwhichctl, (long)buffer, lbufcount, lparam3);
	err = PrError();
	if (err) TKError(err);
	RPCValues();
	} }
	)

#||
(write-toolkit-submodule-c-program printing-manager-1 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program printing-manager-2 "blueberry:mac-4:rlb:rui:")
(write-toolkit-submodule-c-program printing-manager-glue "blueberry:mac-4:rlb:rui:")
||#


