;;; -*- Mode: LISP; Syntax: Lisp+C; Package: MAC-TOOLBOX; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Taken from uims.lisp

MACINTOSH-INTERNALS::
(COMPILER-LET ((*PACKAGE* (FIND-PACKAGE "MACINTOSH-INTERNALS")))
(EVAL-WHEN (EVAL LOAD COMPILE)
(define-mac-structure (dialog-values :c-name #{RPCDialogValues} :alignment nil)
  (total-length integer-32)
  (nvalues integer-16)
  (values (vector dialog-value nvalues)))

(define-mac-structure (dialog-value :c-name #{RPCDialogValue} :alignment nil)
  (item-number integer-16)
  (type (member cardinal-16 '(boolean string)))
  (+ ((on-p (boolean integer-16)))
     ((string padded-pascal-string))))

(define-remote-type dialog-items ()
  (:abbreviation-for
    `(opaque-bytes (:c #{RPCDialogItems *} (:length (name) #{name ->total_length})))))

(define-remote-type dialog-values ()
  (:abbreviation-for
    `(opaque-bytes (:c #{RPCDialogValues *} (:length (name) #{name ->total_length})))))
) ;end eval-when
) ;End compiler-let

(define-remote-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")event-comm-c-client
0  (:version 1)
  (:number #x7F0002FE)				;I picked a number ...
  (:server :lisp)
  (:client :c))

(define-remote-module 1event-comm-c-server
0  (:version 1)
  (:number #x7F0002F0)
  (:server :c)
  (:client :lisp))

	 
(defvar 1*event-handling-error*0 ())
(define-remote-entry 1event-occurred0 event-comm-c-client
  (:number 2)
  (:arguments
    (activity-id integer-32)
    (event eventrecord))
  (:values
    ;; This really wanted to be Boolean, but LightspeedC has the bug Apple
    ;; documents on IM V-247.
    (event-handled integer-16)
    )
  (:lisp
    (:server
      (unwind-protect-case ()
	  (rpc-values
	    (condition-case (err)
		 (condition-bind ((error
				    (named-lambda condition-catch (err)
				      (beep)
				      (setq *event-handling-error* err)
				      nil)))
		   (if (activity-event-occurred activity-id event) 1 0))
	       (error 0)))
	(:abort (rpc-values 0))))))

(define-remote-entry 1keyboard0-1events0-1occurred0 event-comm-c-client
  (:number 3)
  (:arguments (activity-id integer-32)
	      (keyboard-events (spread-vector eventrecord)))
  (:values (event-handled integer-16))
  (:lisp
    (:server
      (unwind-protect-case ()
	  (rpc-values
	    (condition-case (err)
		 (condition-bind ((error
				    (named-lambda condition-catch (err)
				      (beep)
				      (setq *event-handling-error* err)
				      nil)))
		   (dotimes (i (length keyboard-events) 1)
		     (unless (activity-event-occurred activity-id (aref keyboard-events i))
		       (return 0))))
	       (error 0)))
	(:abort (rpc-values 0))))))


(define-remote-entry 1request-remote-event-handling0 event-comm-c-server
  (:number 3)
  (:arguments
    (handling boolean))
  (:asynchronous T)
  (:c
    (:server
      #{ 
	 extern Boolean ProcessEventsRemote;
	 ProcessEventsRemote = handling;
	 }
	 )))



(define-remote-entry 1id-mywindow-window0 event-comm-c-server
  (:number 5)
  (:arguments
    (application-id cardinal-32)
    (window-id cardinal-32)
    (type-mask cardinal-16))
  (:values
    (mac-window windowptr))
  (:c
    (:server
      #{
         OSErr err;
	 WindowPtr w;
	 err = IDMyWindowWindow((Application_ID)application_id, (Window_ID)window_id, 
				type_mask, &w);
	 if (err) TKError(err);
	 RPCValues((long)w);
	 }
	 )))

(define-remote-entry 1window-mywindow-id0 event-comm-c-server
  (:number 6)
  (:arguments
    (application-id cardinal-32)
    (window windowptr))
  (:values
    (window-id cardinal-32))
  (:c
    (:server
      #{
         long result = 0L;
	 MyWindowPtr mywindow;
	 mywindow = WindowMyWindow((WindowPtr)window);
	 if (mywindow != NULL) result = mywindow->id;
	 RPCValues(result);
	 }
	 )))

(define-remote-entry 1id-mywindow-scroll-bars0 event-comm-c-server
  (:number 9)
  (:arguments
    (application-id cardinal-32)
    (window-id cardinal-32))
  (:values
    (scrollbarh controlhandle)
    (scrollbarv controlhandle))
  (:c
    (:server
      #{
	 MyApplication *application;
	 MyWindowPtr myWindow;
         OSErr err;
	 ControlHandle sbh=0, sbv=0;

	 if ( (err = IDMyWindow (application_id, window_id, &application, &myWindow) )) {
	    TKError(err);
	    }
	 else if ( Scroll_Window_Type != myWindow->type) {
	    TKError(wrong_type_argument_error);
	    }
	 else {
	    sbh = myWindow->u.w.t.window_type.scrollBarH;
	    sbv = myWindow->u.w.t.window_type.scrollBarV;
	    RPCValues((long)sbh, (long)sbv);
	    }
	 }
	 )))

(define-remote-entry 1remote-dialog-values0 event-comm-c-server
  (:number 11)
  (:arguments
    (application-id cardinal-32)
    (dialog-id cardinal-32))
  (:values
    (values macintosh-internals::dialog-values))
  (:c
    (:server
      #{ 
	 MyApplication *application;
	 DialogPtr dialog;
         OSErr err;
	 RPCDialogValues *values;

	 if ( err = IDMyWindowWindow(application_id, dialog_id, 1 << Dialog_Type, &dialog) )
	   return(err);
	 CheckPointer(dialog);

	 GetDialogValues(dialog, &values);

	 RPCValues(values);
	 FreeMemory((void**)&values);
	 }
	 )))


;; Generic so instances of dw:program can do whatever they want.
;; Function based so I can test stuff RPC service without having to cons up
;; a new program frame each time it restarts.
(defgeneric 1activity-event-occurred0 (activity event &rest event-args)
  (declare (values event-handled))
  (:function
    (values
      (typecase activity
	(number
	  (let ((real-activity (find-activity-from-id activity)))
	    (when real-activity
	      (apply #'activity-event-occurred real-activity event event-args))))
	(instance (apply (flavor:generic activity-event-occurred) activity event event-args))
	(function (apply activity event event-args))
	(otherwise
	  nil)))))

(defvar 1*interested-activities*0 ())

(defun 1find-activity-from-id0 (id)
  (or (macintosh-internals::find-program-from-application-id id)
      (second (assoc id *interested-activities*))
      (second (assoc T *interested-activities*))))

#+ignore	;Don't compile this form in the normal course of events.
(define-remote-c-program event-comm-c-client
 (:client-extern
   (:file "sys:embedding;macivory;toolbox;event-comm;event-comm-c-client")
   (:include "<Events.h>"))
 (:client
   (:file "sys:embedding;macivory;toolbox;event-comm;event-comm-c-client")
   (:include "<Events.h>")))

#+ignore	;Don't compile this form in the normal course of events.
(define-remote-c-program event-comm-c-server
 (:server
   (:file "sys:embedding;macivory;toolbox;event-comm;event-comm-c-server")
   (:type :linked)))
