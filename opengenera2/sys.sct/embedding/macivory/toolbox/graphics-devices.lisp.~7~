;;; -*- Base: 10; Syntax: Lisp+c; Mode: LISP; Package: MAC-TOOLBOX -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-toolkit-module D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(graphics-devices
0			 :submodules T
			 :type :linked
			 :include ("<Quickdraw.h>")
			 :default-pathname
			   "sys:embedding;macivory;toolbox;graphics-devices;"
			 )
  (:glue-submodule (graphics-devices-glue :linked "graphics-devices-link.c"
					  :auto-load  "graphics-devices-auto.c"))
  (:submodule (graphics-devices-1 :file "graphics-devices-1.c")
   NewGDevice
   InitGDevice
   GetGDevice
   SetGDevice
   DisposGDevice
   GetDeviceList
   GetMainDevice
   GetNextDevice
   SetDeviceAttribute
   TestDeviceAttribute
   GetMaxDevice
   ))

(deftoolkit1 NewGDevice0 graphics-devices
   ((refnum integer-16)
    (mode integer-32))
   ((gdhandle gdhandle))
   #{ { GDHandle gdh = NewGDevice(refnum, mode);
	RPCValues((long)gdh);
	} }
	)

(deftoolkit1 InitGDevice0 graphics-devices
   ((gdrefnum integer-16)
    (mode integer-32)
    (gdh gdhandle))
   ()
   #{ { InitGDevice(gdrefnum, mode, gdh);
	RPCValues();
	} }
	)

(deftoolkit1 GetGDevice0 graphics-devices
   ()
   ((gdhandle gdhandle))
   #{ { GDHandle gdh = GetGDevice();
	RPCValues((long)gdh);
	} }
	)

(deftoolkit1 SetGDevice0 graphics-devices
   ((gdh gdhandle))
   ()
   #{ { SetGDevice(gdh);
	RPCValues();
	} }
	)

(deftoolkit1 DisposGDevice0 graphics-devices
   ((gdhandle gdhandle))
   ()
   #{ { DisposGDevice(gdhandle);
	RPCValues();
	} }
	)

(deftoolkit1 GetDeviceList0 graphics-devices
   ()
   ((gdhandle gdhandle))
   #{ { GDHandle gdh = GetDeviceList();
	RPCValues((long)gdh);
	} }
	)

(deftoolkit1 GetMainDevice0 graphics-devices
   ()
   ((gdhandle gdhandle))
   #{ { GDHandle gdh = GetMainDevice();
	RPCValues((long)gdh);
	} }
	)

(deftoolkit1 GetNextDevice0 graphics-devices
   ((gdh gdhandle))
   ((gdhandle gdhandle))
   #{ { GDHandle ngdh = GetNextDevice(gdh);
	RPCValues((long)ngdh);
	} }
	)

(deftoolkit1 SetDeviceAttribute0 graphics-devices
   ((gdh gdhandle)
    (attribute integer-16)
    (value boolean))
   ()
   #{ { SetDeviceAttribute(gdh, attribute, value);
	RPCValues();
	} }
	)

(deftoolkit1 TestDeviceAttribute0 graphics-devices
   ((curdevice gdhandle)
    (attribute integer-16))
   ((value boolean))
   #{ { Boolean val = TestDeviceAttribute(curdevice, attribute);
	RPCValues(val);
	} }
	)

(deftoolkit1 GetMaxDevice0 graphics-devices
   ((globalrect rect))
   ((gdhandle gdhandle))
   #{ { GDHandle gdh = GetMaxDevice(globalrect);
	RPCValues((long)gdh);
	} }
	)


#||
(write-toolkit-submodule-c-program graphics-devices-1 "blueberry:mac-4:rlb:rui:")

(write-toolkit-submodule-c-program graphics-devices-glue "blueberry:mac-4:rlb:rui:")

(write-toolkit-module-c-program graphics-devices)
||#
