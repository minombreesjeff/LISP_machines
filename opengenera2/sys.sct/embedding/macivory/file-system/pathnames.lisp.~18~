;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: MAC-FS; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Macintosh pathnames

(defflavor macintosh-pathname
	()
	(fs:mailbox-pathname-mixin fs:lower-case-preferred-mixin fs:no-version-mixin
	 fs:hierarchical-directory-mixin fs:active-pathname-mixin fs:remote-pathname)
  )

(defparameter *macfs-quote-character* #\Š)

(defparameter *macfs-system-folder-device* #\)

(defun-in-flavor (quote-string macintosh-pathname) (string &optional for-device-p)
  (if (string-search-set (if for-device-p
			     `(,*macfs-quote-character* ,*macfs-system-folder-device* #\* #\)
			     `(,*macfs-quote-character* #\* #\))
			 string)
      (let ((result-string (make-array (string-length string)
				       :fill-pointer 0
				       :element-type 'string-char))
	    (string string))
	(declare (sys:array-register string))
	(dotimes (i (string-length string))
	  (let ((char (aref string i)))
	    (when (or (char-equal char *macfs-quote-character*)
		      (and for-device-p (char-equal char *macfs-system-folder-device*))
		      (char-equal char #\*)
		      (char-equal char #\))
	      (vector-push-extend *macfs-quote-character* result-string))
	    (vector-push-extend char result-string)))
	result-string)
      string))

(defun-in-flavor (unquote-string macintosh-pathname) (string)
  (if (string-search-char *macfs-quote-character* string)
      (let ((quoted-p nil)
	    (result-string (make-array (string-length string)
				       :fill-pointer 0
				       :element-type 'string-char))
	    (string string))
	(declare (sys:array-register string))
	(dotimes (i (string-length string))
	  (let ((char (aref string i)))
	    (cond (quoted-p
		   (vector-push-extend char result-string)
		   (setf quoted-p nil))
		  ((char-equal char *macfs-quote-character*)
		   (setf quoted-p t))
		  (t
		   (vector-push-extend char result-string)))))
	result-string)
      string))

(defun-in-flavor (unquoted-asterisk-p macintosh-pathname) (string)
  (when (string-search-char #\* string)
    (let ((quoted-p nil)
	  (string string))
      (declare (sys:array-register string))
      (dotimes (i (string-length string))
	(let ((char (aref string i)))
	  (cond (quoted-p
		 (setf quoted-p nil))
		((char-equal char *macfs-quote-character*)
		 (setf quoted-p t))
		((char-equal char #\*)
		 (return t))))))))

(defmethod (:valid-device-p macintosh-pathname) (dev)
  (or (member dev '(:unspecific :wild nil))
      (and (stringp dev) 
	   (not (string-search #\: dev)))))

(defmethod (:valid-device macintosh-pathname) (dev)
  (and (send self ':valid-device-p dev)		; ??
       dev))

(defmethod (:valid-directory-component-p macintosh-pathname) (component &rest ignore)
  (if (stringp component)
      (null (string-search #\: component))
      t))

(defmethod (:quote-character macintosh-pathname) () *macfs-quote-character*)

(defmethod (:character-needs-quoting-p macintosh-pathname) (ch)
  (or (char-equal ch *macfs-quote-character*)
      (char-equal ch *macfs-system-folder-device*)	;Doesn't always need it but won't hurt.
      (char-equal ch #\*)
      (char-equal ch #\)))

(defmethod (:component-wild-p macintosh-pathname) (component)
  (or (member component '(:wild :wild-inferiors))
      (and (stringp component)
	   (unquoted-asterisk-p component))))

(defmethod (:valid-name-p macintosh-pathname) (component)
  (if (stringp component)
      (null (string-search #\: component))
      t))

(defmethod (:valid-type-p macintosh-pathname) (component)
  (cond ((stringp component)
	 (null (string-search #\: component)))
	((null component))
	(t					;Is :wild really right?
	 (member component '(:unspecific :wild)))))

(defmethod (:directory-pathname-as-file macintosh-pathname) ()
  (if (eql :root fs:directory)
      ;;for macintosh, device is really the top-level directory.  This
      ;;makes a semi-bogus macintosh pathname (device nil, directory part is device name)
      ;;which gets fixed up other places.
      (fs:default-directory-pathname-as-file (send self :new-device nil) (list fs:device))
      (fs:default-directory-pathname-as-file self fs:directory)))

;;this restores a semi-bogus macintosh pathname to normalcy.
(defmethod (:canonicalize-macintosh-pathname macintosh-pathname) ()
  (if (and (null fs:device) fs:directory (not (eql :root fs:directory)))
      (send self :new-pathname :raw-device (car fs:directory)
	    :directory (or (cdr fs:directory) :root))
      self))

(defun-in-flavor (mac-pathname-fname-string macintosh-pathname) (&optional unquote-p)
  (with-output-to-string (s)
    (let* ((type-string (case fs:type
			  (:wild (and (neq fs:name :wild) "*"))
			  (nil (and fs:name ""))
			  (:unspecific nil)
			  (otherwise (if unquote-p (unquote-string fs:type) fs:type))))
	   (name-string (case fs:name
			  (:wild "*")
			  ((:unspecific nil) (if type-string ""))
			  (otherwise (if unquote-p (unquote-string fs:name) fs:name)))))
      (when name-string
	(write-string name-string s))
      (when type-string
	(write-char #\. s)
	(write-string (if (stringp type-string) 
			  type-string
			  (string-downcase (string type-string)))
		      s)))))

(defmethod (:pathname-as-directory macintosh-pathname) ()
  ;; Watch out for periods in the directory name
  (let ((real-mac-directory-name (mac-pathname-fname-string)))
    ;;if we started with the semi-bogus pathname referring to a top-level device by name,
    ;;put it back.
    (send
      (send self
	    :new-pathname					
	    :raw-directory
	    (if (eq fs:directory :root)
		(list real-mac-directory-name)
		(append fs:directory (list real-mac-directory-name)))
	    :raw-name nil
	    :raw-type nil
	    :version nil)
      :canonicalize-macintosh-pathname)))

;;; Make list-root work for mac pathnames. This is put here to make
;;; up for the fact that the meaningful-root-mixin is not 
;;; in mac pathnames. This method, and root-meaningful-p, make the
;;; tree edit root command in fsedit work for mac-fs hosts.
(defmethod (:list-root mac-fs:macintosh-pathname) (&rest ignore)
  (let ((wildroot (send self ':new-pathname :device :wild ':directory ':root
			':name ':wild ':type ':wild ':version ':wild)))
    (loop for file in (cdr (fs:directory-list wildroot ':no-extra-info ':deleted))
	  collect (cons (if (zl:get file ':directory)
			    (send (car file) ':pathname-as-directory)
			  (car file))
			(cdr file)))))

;;; This doesn't really mean what one might think. 
(defmethod (:root-meaningful-p mac-fs:macintosh-pathname) ()
  nil)

(defmethod (:directory-file-type macintosh-pathname) ()
  :unspecific)

(defun-in-flavor (mac-pathname-directory-string macintosh-pathname) (&optional unquote-p)
  (with-output-to-string (s)
    (flet ((yuh (directory-list)
	     (dolist (component directory-list)
	       (cond ((eq component :up)
		      (error ":UP is not yet supported"))
		     ((null component)
		      (write-char #\ s))
		     ((eq component :wild)
		      (write-char #\* s))
		     ((eq component :wild-inferiors)
		      (write-string "**" s))
		     (t
		      (write-string (if unquote-p (unquote-string component) component) s)))
	       (write-char #\: s))))
      (cond ((eq fs:device nil)
	     ;; do nothing
	     )
	    (t (cond
		 ((eq fs:device ':unspecific)
		  (write-char #\ s))
		 ((eq fs:device ':wild)
		  (write-char #\* s))
		 (t
		  (write-string (if unquote-p (unquote-string fs:device) fs:device) s)))
	       (write-char #\: s)))
      (cond ((eq fs:directory :wild)
	     ;; ---Need a colon or two?
	     (write-string "**" s))
	    ((eq fs:directory ':root)
	     t)
	    ((eq (first fs:directory) :relative)
	     (write-char #\: s)
	     (yuh (rest fs:directory)))
	    (t
	     (yuh fs:directory))))))

(defun-in-flavor (mac-pathname-pname-string macintosh-pathname) (&optional unquote-p)
  (if (and (null fs:device) (null fs:directory))
      (mac-pathname-fname-string unquote-p)
      (string-append (mac-pathname-directory-string unquote-p)
		     (mac-pathname-fname-string unquote-p))))

(defmethod (:string-for-printing macintosh-pathname) ()
  (string-append (send fs:host ':name-as-file-computer) ":" (mac-pathname-pname-string)))

(defmethod (:string-for-host macintosh-pathname) (&optional direction)
  (ignore direction)
  (mac-pathname-pname-string t))

(defmethod (:string-for-editor macintosh-pathname) ()
  (string-append
    (mac-pathname-fname-string)
    " " (mac-pathname-directory-string)
    " " (send fs:host ':name-as-file-computer) ":")) 

(defmethod (:string-for-dired macintosh-pathname) ()
  (mac-pathname-fname-string)) 

(defmethod (:string-for-directory macintosh-pathname) ()
  (mac-pathname-directory-string))

;; If literal-p is T, all special characters other than the directory delimiter (i.e., * Š  )
;; are to be treated as ordinary characters.  We are only called with literal-p set to T
;; when asked to parse a namestring which was given to us by the Macintosh itself.
(defun-in-flavor (parse-macfs-namestring macintosh-pathname) (namestring literal-p
							       &optional (start 0) end)
  (unless end
    (setf end (string-length namestring)))
  (let ((dev nil)
	(directory-list nil)
	(name nil)
	(type nil))
    ;; look for volume first
    ;; ':' ( blank)->nil
    ;; *->wild
    ;; ->unspecific
    ;; name->name
    (let ((first-colon
	    (zl:string-search-char #\: namestring start end)))
      (when
	(and first-colon
	     (not (eql first-colon start)))	; leading colon means no device;
						;  leave dev NIL and go look for dir
	(setq dev (substring namestring start first-colon )
	      start (1+ first-colon))
	(cond (literal-p
	       (setq dev (quote-string dev t)))
	      ((string-equal dev "*")
	       (setq dev ':wild))
	      ((string-equal dev "")
	       (setq dev ':unspecific)))))
    ;;
    (loop while (< start end)
	  for first-directory = t then nil
	  for delimiter = (zl:string-search-char #\: namestring start end)
	  while delimiter
	  as probable-directory = (substring namestring start delimiter)
	  if (string-equal probable-directory "")
	    if first-directory
	      collect :relative into dir-list
	    else
	      do (unless (eq (first dir-list) :relative)
		   (fs:parse-pathname-error
		     ":: can not appear in a Macintosh pathname unless it starts with a :."))
	      and collect :up into dir-list
	  else if literal-p
	    collect (quote-string probable-directory) into dir-list
	  else if (string-equal probable-directory "*")
	    collect :wild into dir-list
	  else if (string-equal probable-directory "**")
	    collect :wild-inferiors into dir-list
	  else if (string-equal probable-directory "")
	    collect nil into dir-list
	  else
	    collect probable-directory into dir-list
	  do (setf start (1+ delimiter))
	  finally
	    (setf directory-list dir-list))
    ;;
    (when (< start end)
      (flet ((normalize (string)
	       (cond (literal-p (quote-string string))
		     ((string-equal string "*") :wild)
		     ((string-equal string "") nil)
		     (t string))))
	(let ((delimiter (zl:string-search-char #\. namestring start end)))
	  (cond ((null delimiter)
		 (cl:setf name (normalize (substring namestring start end))
			  type (if (eq name :wild) :wild :unspecific)))
		(( (1+ delimiter) end)
		 (cl:setf name (normalize (substring namestring start (1+ delimiter)))
			  type (if (eq name :wild) :wild :unspecific)))
		(t
		 (cl:setf name (normalize (substring namestring start delimiter))
			  type (normalize (substring namestring (1+ delimiter) end))))))))
    ;;
    ;; special case kludgery for the case of "host:dsk:*".  In that case, we've ended
    ;; up here with device non-nil, but directory nil.  That's not what we
    ;; want; directory should be :ROOT
    ;;
    (when (and dev (null directory-list))
      (setq directory-list ':root))
    (values dev directory-list name type :unspecific)))

(defmethod (:parse-namestring macintosh-pathname) (host-specified namestring
								  &optional (start 0) end)
  (ignore host-specified)
  (parse-macfs-namestring namestring nil start end))

(defmethod (parse-literal-namestring macintosh-pathname) (namestring &optional (start 0) end)
  (parse-macfs-namestring namestring t start end))

(defmethod (expand-system-folder-device macintosh-pathname) ()
  (if (string-equal fs:device *macfs-system-folder-device*)
      (multiple-value-bind (volume folder)
	  (mtb::get-blessed-volume-and-folder)
	(let ((folder (map 'list #'quote-string folder)))
	  (send self :new-pathname :device (quote-string volume t)
				   :directory (if (atom fs:directory)
						  folder
						  (append folder fs:directory)))))
      self))

(defmethod (device-for-host macintosh-pathname) ()
  (cond ((eq fs:device ':unspecific) "")
	((eq fs:device ':wild) "*")
	(t
	 (unquote-string fs:device))))

(compile-flavor-methods macintosh-pathname)



;;; Macintosh hosts

(defflavor macintosh-host
	()
	(neti:host-msdos-mixin fs:active-pathname-host net:host)
  )

(defprop :macintosh macintosh-host net:host-type-flavor)

(defmethod (:pathname-flavor macintosh-host) ()
  'macintosh-pathname)

(compile-flavor-methods macintosh-host)
