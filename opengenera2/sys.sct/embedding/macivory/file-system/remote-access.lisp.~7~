;;; -*- Mode: LISP; Syntax: Common-lisp; Package: MAC-FS; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Code for user end of remote EMB access via NFILE.

;;(defflavor nfile-access-path () (fs:nfile-access-path))

(defflavor remote-emb-nfile-access-path-mixin 
	(emb-host
	 (host-user-id nil))
	(fs:nfile-access-path)
  ;;(:required-flavors fs:nfile-access-path)
  (:method-combination :login-command-parameters :append))

(defmethod (make-instance remote-emb-nfile-access-path-mixin) (&rest ignore)
  (setq emb-host (fs:add-emb-file-host fs:host)))

(defmethod (:host-user-id remote-emb-nfile-access-path-mixin) ()
  (or host-user-id
      (send si:*user* ':host-user-id fs:host)
      (send si:*user* ':lispm-name)
      (and (not (equal fs:user-id ""))
	   (not (string-search-char #\. fs:user-id))	;No illegal characters
	   (setq host-user-id fs:user-id))))

(defflavor remote-emb-nfile-access-path ()
	   (remote-emb-nfile-access-path-mixin fs:nfile-access-path))

(defprop :nfile remote-emb-nfile-access-path emb-file-access-path-flavor)



(defmethod (:print-self remote-emb-nfile-access-path-mixin) (stream ignore slashify)
  (if slashify
      (si:printing-random-object (self stream :typep)
	(princ self stream))
      (format stream "~A, (HOST), using NFile." (send fs:host ':short-name))))


;; Access path methods shadowing normal NFile ones, to give kludgey impression of host.

(defmethod (:pathname-for-this-host-p remote-emb-nfile-access-path) (pathname)
  (neti:ns-eq (send pathname :host) emb-host))

;; This is the one that makes it work.... these are :APPEND combined at :LOGIN time.
(defmethod (:login-command-parameters remote-emb-nfile-access-path-mixin) ()
  (list ':file-system `(:HOST))
  )

(defmethod (:parse-truename remote-emb-nfile-access-path-mixin) (pathname)
  (fs:parse-pathname pathname emb-host))

(defmethod (:sample-pathname remote-emb-nfile-access-path-mixin) ()
  (send emb-host :sample-pathname))

(compile-flavor-methods remote-emb-nfile-access-path)


;; Attributes of the Macintosh file access path which must be known to all machines.

(defprop :Macintosh (:cant-set-author) fs:attributes)
