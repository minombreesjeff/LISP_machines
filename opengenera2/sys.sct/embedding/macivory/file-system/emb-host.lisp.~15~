;;; -*- Mode: LISP; Base: 10; Package: MAC-FS; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(defflavor active-pathname-host () (fs:active-pathname-host))	; crockery...

;;; a flavor for hosts in which Lispms are embedded.
(defflavor file-host-emb-mixin
	((host net:*local-host*)				; the Lispm
	 pathname-flavor
	 peek-server-info
	 system-type)
	()
  (:initable-instance-variables host)
  :gettable-instance-variables
  (:required-flavors fs:active-pathname-host))

;; Decide which kind of embedding we're dealing with
(defmethod (make-instance file-host-emb-mixin) (&rest ignore)
  (cl:ecase (send host ':machine-type)
    (:macivory
      (setq pathname-flavor 'macintosh-pathname
	    peek-server-info (list "Server for local Macintosh")
	    system-type ':macintosh))
    ((:solstice :ux400 :ux400s :vlm)
      (setq pathname-flavor 'fs:unix42-pathname
	    peek-server-info (list "Server for local Unix")
	    system-type ':unix42))))

;; Patch only.  For running embedded systems.
;(defmethod (flavor:transform-instance file-host-emb-mixin) (&rest ignore)
;  (cl:ecase (send host ':machine-type)
;    (:macivory
;      (setq pathname-flavor 'macintosh-pathname
;	    peek-server-info (list "Server for local Macintosh")
;	    system-type ':macintosh))
;    ((:solstice :ux400 :ux400s)
;      (setq pathname-flavor 'fs:unix42-pathname
;	    peek-server-info (list "Server for local Unix")
;	    system-type ':unix42))))

;(defmethod (:peek-server-info file-host-emb-mixin) ()
;  (list "Server for local Macintosh"))
;
;(defmethod (:pathname-flavor file-host-emb-mixin) () 
;  (cl:ecase (send host ':machine-type)
;    (:macivory 'macintosh-pathname))				; more later...
;  )

(defwhopper (:file-reset file-host-emb-mixin) (&optional forget-p)
  (ignore forget-p)
  (continue-whopper t))

(defmethod (:name file-host-emb-mixin) ()
  (if (neti:local-host-p host)
      "HOST"
      (string-append (send host :name-as-file-computer) "|HOST")))

;(defmethod (:system-type file-host-emb-mixin) () 
;  (cl:ecase (send host ':machine-type)
;    (:macivory ':macintosh))					; more later
;  )

(defmethod (:name-as-file-computer file-host-emb-mixin) (&optional include-host)
  (if (and (neti:local-host-p host) include-host)
      (string-append (send host :short-name) "|" (send self ':short-name))
    (send self ':short-name)))

;; don't know if mac's can do this...
;;  (putprop ':fep '(:undelete) 'attributes)

(defmethod (neti:host-unix-versions-enabled file-host-emb-mixin) (&key directory)
  (and (eq pathname-flavor 'fs:unix42-pathname)
       (or (eq neti:*default-unix-versions-enabled* :all)
	   (and neti:*default-unix-versions-enabled*
		(neti:unix-directory-versions-enabled directory)))))

(defmethod (:pathname-host-namep file-host-emb-mixin) (name)
  (let* ((len (string-length name))
	 (idx (zl:string-reverse-search "HOST" name len)))
    (and (not (null idx))
; ???
;	 (selectq (- len idx)
;	   (3 (and (zerop idx)			;FEP = disk the load map is on
;		   (= unit si:*boot-unit*)))	; but not remotely
;	   (4 (= unit (- (char-code (aref name (1- len))) (char-code #/0)))))
	 (if (zerop idx)
	     (neti:local-host-p host)
	     (and (char-equal (aref name (1- idx)) #\|)
		  (send host ':pathname-host-namep (substring name 0 (1- idx))))))))

(defmethod (:file-access-path file-host-emb-mixin)  (&optional pathname operation dont-create)
  ;;++ Some types of access might want to look at the pathname to check.
  ;;could send a message to see whether access path works for pathname operation combo?
  (when (and (null fs:file-access-paths) (not dont-create))
    (push
      (if (neti:local-host-p host)
	  ;;(make-instance 'mac-rpc-file-access-path ':host self)
	  (make-instance 
	    (or (get (send host ':machine-type)
		     'emb-local-file-access-path-flavor)
		(error "Can't find emb access path flavor for machine type ~A" 
		       (send host ':machine-type)))
	    :host self)
	  ;;need our own file connection.
	  (loop for service-access-path
		    in (net:find-paths-to-service-on-host ':file host)
		finally (error 'fs:host-not-accessible-for-file ':host host
			       ':pathname pathname ':operation operation)
		as flavor = (get (neti:protocol-name
				   (neti:service-access-path-protocol
				     service-access-path))
				 'emb-file-access-path-flavor)	; zzz supply this!
		when flavor
		  return
		    (make-instance flavor :host host
				   :service-access-path service-access-path)))
      fs:file-access-paths))
  (car fs:file-access-paths))

(defmethod (:remove-file-access-path file-host-emb-mixin) (file-access-path)
  (setq fs:file-access-paths (delete file-access-path fs:file-access-paths)))


(defflavor emb-file-host () (file-host-emb-mixin net:no-device-host-mixin
			     active-pathname-host net:basic-host))

(defun get-emb-file-host (on-host)
  (or
    #+IMach
    (sys:system-case
      (Embedded
	;; For embedded systems that know their emb host, just return it
	(when (and (eq on-host net:*local-host*)
		   (boundp 'neti:*emb-host*))
	  neti:*emb-host*))
      (Otherwise nil))
    ;; For embedded systems that register their emb host in the namespace,
    ;; return the registered host.
    (net:parse-host (string-append on-host "|HOST") t)
    ;; For non-embedded systems, or when *emb-host* and the namespace don't help
    (make-instance 'emb-file-host :host on-host)))

;;; this one can only take real host objs, not names
(defun fs:add-emb-file-host (&optional (on-host net:*local-host*))
  ;; need to figure out how to do
  ;; this check safely.  As is, it
  ;; barfs when running as dis-local-host
  ;; when configuring site.
  #+ignore
  (unless (cl:case (send on-host ':machine-type)
	    (:macivory t)
	    (t nil))
    (error "~A is not embedded in anything!" on-host))
  (loop for host in fs:*pathname-host-list*
	when (and (typep host 'emb-file-host)
		  (neti:ns-eq on-host (send host ':host)))
	  return host
	finally (setf host (get-emb-file-host on-host))
		(send host ':maybe-decache-name-as-file-computer)
		(without-interrupts (push host fs:*pathname-host-list*))
		(return host)))

(fs:define-secondary-file-system (host) (host unit)
  ;; need to figure out how to do
  ;; this check safely.  As is, it
  ;; barfs when running as dis-local-host
  ;; when configuring site.
  #+ignore
  (unless (cl:case (send host :machine-type)
	    (:macivory t)
	    (t nil))
    (error "~A is not embedded in anything!" on-host))
  (when (null unit)
    (get-emb-file-host host)))

(compile-flavor-methods emb-file-host)
