;;; -*- Mode: LISP; Syntax: Common-lisp; Package: MACINTOSH-INTERNALS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Mac font resource format.

;;; Type field
(defconstant =qd-font-proportional= #x9000)
(defconstant =qd-font-proportional-with-heights= #x9001)
(defconstant =qd-font-fixed= #xb000)
(defconstant =qd-font-widths-only= #xacb0)

(defvar *default-vsp* 2)

(defstruct (quickdraw-font-family (:conc-name qd-font-family-))
  name
  number
  first-char last-char
  ascent descent leading
  width-max
  width-tables kern-tables
  (extra-widths (make-array 7 :initial-element 0.0))
  bfds)

(define-mac-structure font-style
  (* (subset integer-16 (:bold :italic :underline :outline :shadow :condensed :extended))))

(define-mac-structure font-header
  (font-type cardinal-16)
  (first-char integer-16)
  (last-char integer-16)
  (width-max integer-16)
  (kern-max integer-16)
  (ndescent integer-16)
  (rect-width integer-16)
  (rect-height integer-16)
  (owt-loc integer-16)
  (ascent integer-16)
  (descent integer-16)
  (leading integer-16)
  (row-words integer-16)
  (bit-image (vector integer-16 (* rect-height row-words)))
  (location-table (vector integer-16 (+ (- last-char first-char) 3)))
  (offset-width-table (vector integer-16 (+ (- last-char first-char) 3)))
  )

(define-mac-structure font-offset-width-entry
  (offset integer-8)
  (width integer-8))

;;; Make this alignment nil so we don't choke on variable length component structures
(define-mac-structure (font-family-header :alignment nil)
  (flags (* integer-16
	    (image-height-p (boolean-bit 0))
	    (character-width-p (boolean-bit 1))
	    (fract-enable-ignore (boolean-bit 12))
	    (use-extra-width (boolean-bit 13))
	    (use-fract-width-table (boolean-bit 14))
	    (fixed-width-p (boolean-bit 15))))
  (family-id cardinal-16)
  (first-char integer-16)
  (last-char integer-16)
  (ascent fixed-point-4+12)
  (descent fixed-point-4+12)
  (leading fixed-point-4+12)
  (width-max fixed-point-4+12)
  (width-table-offset integer-32)
  (kern-table-offset integer-32)
  (style-table-offset integer-32)
  (style-properties (vector fixed-point-4+12 9))
  (intl (vector integer-16 2))
  (version-number integer-16)
  (association-table font-family-association-table))

(define-mac-structure font-family-association-table
  (length integer-16)
  (entries (vector font-family-association-entry (1+ length))))

(define-mac-structure font-family-association-entry
  (size integer-16)
  (style integer-16)
  (resource-id integer-16))

(define-mac-structure font-family-character-width-table
  (length integer-16)
  (* (vector font-family-character-width-table-entry (1+ length))))

(define-mac-structure font-family-character-width-table-entry
  (style integer-16)
  (width-table (vector fixed-point-4+12 *)))

(define-mac-structure font-family-kerning-table
  (length integer-16)
  (* (vector font-family-kerning-table-entry (1+ length))))

(define-mac-structure font-family-kerning-table-entry
  (style integer-16)
  (length integer-16)
  (* (vector font-family-kerning-table-pair length)))

(define-mac-structure font-family-kerning-table-pair
  (first-char unsigned-byte)
  (second-char unsigned-byte)
  (offset fixed-point-4+12))

(defflavor mac-font-limit-exceeded () (sys:fatal-error))
(compile-flavor-methods mac-font-limit-exceeded)

(defun read-font-families-from-resource-file (filename)
  (let ((font-resource-alist nil)
	(font-name-alist nil)
	(result nil))
    (map-over-mac-file filename
      #'(lambda (ftype &key array start end name type id &allow-other-keys)
	  (when (eq ftype :resource)
	    (selector type string=
	      ("FONT"
	       (let ((font-number (ldb (byte 8 7) id))
		     (font-size (ldb (byte 6 0) id)))
		 (if (zerop font-size)
		     (push (list font-number name) font-name-alist)
		     (when (null name)
		       (setq name (second (assoc font-number font-name-alist))))
		     (push (list id (bfd-from-font-resource array start end name id
							    font-number font-size))
			   font-resource-alist))))
	      ("NFNT"
	       (push (list id (bfd-from-font-resource array start end name id))
		     font-resource-alist))
	      ("FOND"
	       (push (font-family-from-resource array start end name font-resource-alist)
		     result)))))
      :package "FONTS"
      :progress-note "Converting fonts")
    (nreverse result)))

(defun bfd-from-font-resource (array start end font-name resource-id
			       &optional font-number font-size)
  (with-octet-structure-fields (font-header array start)
			       (font-type first-char last-char width-max kern-max
				rect-height owt-loc ascent descent leading row-words)
    (ignore end)
    (let* ((nchars (1+ last-char))
	   (bfd (fed::make-bfont-descriptor :length nchars :fill-pointer nchars
					    :name (mac-font-name font-name 0 font-size)
					    :line-spacing (+ ascent descent)
					    :baseline ascent
					    :char-width width-max
					    :plist `(:vsp ,leading
						     :resource-id ,resource-id
						     :font-type ,font-type
						     :font-number ,font-number
						     :font-name ,(copy-seq font-name)
						     :font-size ,font-size)))
	   (our-row-words (* 2 (ceiling row-words 2)))	;So bitblt'able
	   (bit-image (make-raster-array (* 16 our-row-words) rect-height
					 :element-type 'bit))
	   (loc-offset (octet-structure-field-index
			 (font-header-location-table array start)))
	   (owt-offset (+ (octet-structure-field-index
			    (font-header-owt-loc array start))
			  (* owt-loc 2))))
      (stack-let* ((image-start (octet-structure-field-index
				  (font-header-bit-image array start)))
		   #+ignore
		   (byte-length (octet-structure-field-size
				  (font-header-bit-image array start)))
		   (byte-image (make-array (* our-row-words rect-height 2)
					   :element-type '(unsigned-byte 8)
					   :displaced-to bit-image)))
	(dotimes (y rect-height)
	  (loop for i from (+ (* y row-words 2) image-start)
		for j from (* y our-row-words 2)
		repeat (* row-words 2)
		do
	    (setf (aref byte-image j) (bit-reverse-8 (aref array i))))))
      (loop for index from 0
	    for code from first-char to (1+ last-char) do
	(let ((width-loc (+ owt-offset (* index 2))))
	  (unless (= (sign-extend-16 (byte-swapped-8-aref-16 array width-loc)) -1)
	    (let* ((start (byte-swapped-8-aref-16 array (+ loc-offset (* index 2))))
		   (end (byte-swapped-8-aref-16 array (+ loc-offset (* (1+ index) 2))))
		   (rwidth (- end start))
		   (bcd (fed::make-bchar-descriptor
			  :char-code code
			  :dimensions (list rect-height (* 32 (ceiling rwidth 32)))
			  :set-width (font-offset-width-entry-width array width-loc)
			  :left-kern (- (+ (font-offset-width-entry-offset array width-loc)
					   kern-max))
			  :top-kern 0
			  :raster-width rwidth
			  :raster-height rect-height)))
	      (when (plusp rwidth)
		(bitblt boole-1 rwidth rect-height bit-image start 0 bcd 0 0))
	      (if (> code last-char)
		  (setf (getf (fed:bfd-plist bfd) :missing-symbol) bcd)
		  (setf (aref bfd code) bcd))))))
      bfd)))

;;; Inverse of bfd-from-font-resource
(defun font-resource-from-bfd (bfd)
  (let ((first-char (position nil bfd :test #'neq))
	(last-char (position nil bfd :test #'neq :from-end t))
	(width-max 0)
	(kern-max 0)
	(rect-width 0)
	(rect-height 0))
    (loop for index from first-char to last-char do
      (let ((bcd (aref bfd index)))
	(when bcd
	  (maxf width-max (fed:bcd-set-width bcd))
	  (maxf kern-max (fed:bcd-left-kern bcd))
	  (incf rect-width (fed:bcd-raster-width bcd))
	  (maxf rect-height (fed:bcd-raster-height bcd)))))
    (incf rect-width (fed:bfd-char-width bfd))

    (let* ((row-words (* (ceiling rect-width 32) 2))
	   (loc-offset (+ (octet-structure-field-index (font-header-bit-image array 0))
			  (* rect-height row-words 2)))
	   (owt-offset (+ loc-offset (* (+ (- last-char first-char) 3) 2)))
	   (bit-image (make-raster-array (* row-words 16) rect-height :element-type 'bit))
	   (array (make-array (+ owt-offset (* (+ (- last-char first-char) 3) 2))
			      :element-type '(unsigned-byte 8))))

      (when (> last-char 255)
	(error 'mac-font-limit-exceeded
	       "The font ~S contains ~D characters, which exceeds~@
		the 256-character limit for Macintosh fonts."
	       (fed:bfd-name bfd) (1+ last-char)))
      (when (> (length array) 32768)
	(error 'mac-font-limit-exceeded
	       "The font ~S has a resource size of ~:D bytes, which~@
		exceeds the 32K-byte size limit for Macintosh fonts."
	       (fed:bfd-name bfd) (length array)))

      (setf (font-header-font-type array 0) =qd-font-proportional=
	    (font-header-first-char array 0) first-char
	    (font-header-last-char array 0) last-char
	    (font-header-width-max array 0) width-max
	    (font-header-kern-max array 0) (- kern-max)
	    (font-header-ndescent array 0) (- (fed:bfd-baseline bfd)
					      (fed:bfd-line-spacing bfd))
	    (font-header-rect-width array 0) rect-width
	    (font-header-rect-height array 0) rect-height
	    (font-header-owt-loc array 0) (/ (- owt-offset
						(octet-structure-field-index
						  (font-header-owt-loc array 0)))
					     2)
	    (font-header-ascent array 0) (fed:bfd-baseline bfd)
	    (font-header-descent array 0) (- (fed:bfd-line-spacing bfd)
					     (fed:bfd-baseline bfd))
	    (font-header-leading array 0) (getf (fed:bfd-plist bfd) :vsp *default-vsp*)
	    (font-header-row-words array 0) row-words)

      (let ((x 0))
	(loop for bindex from first-char to last-char
	      for index from 0
	      do
	  (let ((width-loc (+ owt-offset (* index 2)))
		(bcd (aref bfd bindex))
		(nx x))
	    (if (null bcd)
		(setf (byte-swapped-8-aref-16 array width-loc) -1)
		(setf (font-offset-width-entry-width array width-loc) (fed:bcd-set-width bcd)
		      (font-offset-width-entry-offset array width-loc) (- kern-max
									  (fed:bcd-left-kern
									    bcd)))
		(let ((rheight (fed:bcd-raster-height bcd)))
		  (when (plusp rheight)
		    (bitblt boole-1 (fed:bcd-raster-width bcd) rheight bcd 0 0 bit-image x 0)))
		(setq nx (+ x (fed:bcd-raster-width bcd))))
	    (setf (byte-swapped-8-aref-16 array (+ loc-offset (* (1+ index) 2))) nx)
	    (setq x nx)))
	
	(let ((missing-width (fed:bfd-char-width bfd)))
	  (dotimes (j rect-height)
	    (dotimes (i missing-width)
	      (when (or (= j 0) (= i 0) (= j (1- rect-height)) (= i (1- missing-width)))
		(setf (raster-aref bit-image (+ x i) j) 1))))
	  (incf x missing-width))
	  
	(assert (= x rect-width))
	(setf (byte-swapped-8-aref-16 array (+ loc-offset
					       (* (+ (- last-char first-char) 2) 2)))
	      x))

      (stack-let* ((image-start (octet-structure-field-index (font-header-bit-image array 0)))
		   (image-length (* row-words rect-height 2))
		   (byte-image (make-array (* row-words rect-height 2)
					   :element-type '(unsigned-byte 8)
					   :displaced-to bit-image)))
	(dotimes (i image-length)
	  (setf (aref array (+ i image-start)) (bit-reverse-8 (aref byte-image i)))))

      array)))

;;; Create the font also so that it can be used as a device font.
(defun font-family-from-resource (array start end font-name font-resource-alist)
  (with-octet-structure-fields (font-family-header array start)
			       (family-id first-char last-char ascent descent leading
				width-max width-table-offset kern-table-offset)		     
    (ignore end)
    (setq font-name (copy-seq font-name))
    (let ((font-family (make-quickdraw-font-family :name font-name
						   :number family-id
						   :first-char first-char
						   :last-char last-char
						   :ascent ascent
						   :descent descent
						   :leading leading
						   :width-max width-max)))
      (ignore width-table-offset kern-table-offset)	;Never present
      (replace (qd-font-family-extra-widths font-family)
	       (font-family-header-style-properties array start)
	       :start2 1 :end2 8)
      (let ((bfds nil))
	(loop for index being the octet-structure-field-elements
	      of (font-family-association-table-entries
		   array
		   (octet-structure-field-index
		     (font-family-header-association-table array start)))
	      do
	  (let ((size (font-family-association-entry-size array index))
		(style (font-family-association-entry-style array index))
		(id (font-family-association-entry-resource-id array index)))
	    (let ((bfd (second (assoc id font-resource-alist))))
	      (when bfd
		(let ((name (mac-font-name font-name style size)))
		  (setf (fed:bfd-name bfd) name)
		  (setf (getf (fed:bfd-plist bfd) :font-number) family-id
			(getf (fed:bfd-plist bfd) :font-name) font-name
			(getf (fed:bfd-plist bfd) :font-face) style
			(getf (fed:bfd-plist bfd) :font-size) size)
		  )
		;; Dunno why fonts don't have Space in them sometimes;
		;; I must be missing something.
		(when (null (aref bfd #o40))
		  (setf (aref bfd #o40)
			(fed::make-bchar-descriptor
			  :char-code #o40
			  :dimensions '(0 0)
			  :set-width (fed:bfd-char-width bfd)
			  :raster-width 0
			  :raster-height 0)))
		(push bfd bfds)))))
	(setq bfds (sort bfds #'<
			 :key #'(lambda (bfd) (getf (fed:bfd-plist bfd) :font-size))))
	(setq bfds (stable-sort bfds #'<
				:key #'(lambda (bfd) (getf (fed:bfd-plist bfd) :font-face))))
	(setf (qd-font-family-bfds font-family)  bfds))
      font-family)))

(defun font-family-resource-from-qd-font-family (qd-font-family)
  (let ((array (make-array (+ (octet-structure-field-index
				(font-family-header-association-table array 0))
			      (octet-structure-field-index
				(font-family-association-table-entries array 0))
			      (* (length (qd-font-family-bfds qd-font-family))
				 (octet-structure-total-size
				   (font-family-association-entry array 0))))
			   :element-type '(unsigned-byte 8))))
    (setf (font-family-header-family-id array 0) (qd-font-family-number qd-font-family)
	  (font-family-header-first-char array 0) (qd-font-family-first-char qd-font-family)
	  (font-family-header-last-char array 0) (qd-font-family-last-char qd-font-family)
	  (font-family-header-ascent array 0) (qd-font-family-ascent qd-font-family) 
	  (font-family-header-descent array 0) (qd-font-family-descent qd-font-family)
	  (font-family-header-leading array 0) (qd-font-family-leading qd-font-family)
	  (font-family-header-width-max array 0) (qd-font-family-width-max qd-font-family))
    (let ((association-table (octet-structure-field-index
			       (font-family-header-association-table array 0))))
      (setf (font-family-association-table-length array association-table)
	    (1- (length (qd-font-family-bfds qd-font-family))))
      (loop for entry-index being the octet-structure-field-elements
		of (font-family-association-table-entries array association-table)
	    for bfd in (qd-font-family-bfds qd-font-family)
	    do (setf (font-family-association-entry-size array entry-index)
		     (getf (fed:bfd-plist bfd) :font-size))
	       (setf (font-family-association-entry-style array entry-index)
		     (getf (fed:bfd-plist bfd) :font-face))
	       (setf (font-family-association-entry-resource-id array entry-index)
		     (getf (fed:bfd-plist bfd) :resource-id))))
    (values array "FOND"
	    (qd-font-family-number qd-font-family) (qd-font-family-name qd-font-family)
	    %mac-resource-purgeable)))

(defvar *mac-font-families* nil)

;;;--- Needs work.
(defvar *mac-font-family-alist*
  '((:fix "Monaco" "Courier")			;Yuck, they both look awful.
    (:chicago "Chicago")
    (:dutch "Times")
    (:swiss "Helvetica")))

(defvar *mac-font-size-alist*
  '((:tiny 4 4)
    (:very-small 8 6)
    (:small 10 8)
    (:normal 12 10)
    (:large 14 12)
    (:very-large 20 14)
    (:huge 24 20)))

(defvar *qd-font-face-alist*
  '((:bold 0)
    (:italic 1)
    (:underlined 2)
    (:outlined 3)
    (:shadowed 4)
    (:condensed 5)
    (:extended 6)))

(defun mac-font-name (font-name font-face-code font-size)
  (intern (with-output-to-string (stream)
	    (format stream "MAC-~A" (nsubstitute #\- #\space (string-upcase font-name)))
	    (loop for (key bit) in *qd-font-face-alist* do
	      (when (ldb-test (byte 1 bit) font-face-code)
		(format stream "-~A" key)))
	    (format stream "-~D" font-size))
	  "FONTS"))

(defun load-more-fonts (file)
  (setq *mac-font-families*
	(delete-duplicates (nconc *mac-font-families*
				  (read-font-families-from-resource-file file))
			   :key #'qd-font-family-name :test #'string-equal)))

(defun mac-bfd-for-character-style (character-style character-set)
  (when (eq character-set si:*standard-character-set*)
    (setq character-style (si:parse-character-style character-style))
    (mac-bfd-for-font-internal
      (find (second (assoc (si:cs-family character-style) *mac-font-family-alist*))
	    *mac-font-families* :key #'qd-font-family-name :test #'string-equal)
      (mac-font-size-for-character-style-size (si:cs-size character-style))
      (mac-font-style-for-character-style-face (si:cs-face character-style)))))

(defun mac-font-size-for-character-style-size (style-size)
  (second (assoc style-size *mac-font-size-alist*)))

(defun mac-font-style-for-character-style-face (style-face)
  (let ((value 0)
	(face (string style-face)))
    (loop for (key bit) in *qd-font-face-alist* do
      (when (string-search key face)
	(setf (ldb (byte 1 bit) value) 1)))
    value))

(defun mac-bfd-for-font (font size face)
  (when (= font (cconstant applFont))
    (setq font (cconstant geneva)))
  (mac-bfd-for-font-internal (find font *mac-font-families* :key #'qd-font-family-number)
			     size face))

(defconstant %%font-standin-id (byte 16 0))
(defconstant %%font-standin-size (byte 8 16))
(defconstant %%font-standin-face (byte 8 24))

(defun bfd-or-standin-property (thing indicator)
  (if (integerp thing)
      (case indicator
	(:font-size (ldb %%font-standin-size thing))
	(:font-face (ldb %%font-standin-face thing))
	(:resource-id (ldb %%font-standin-id thing)))
      (getf (fed:bfd-plist thing) indicator 0)))

(defun font-resource-id (font-name size face)
  (condition-case ()
       (let* ((font-number (_GetFNum font-name))
	      (Macs-font-name (_GetFontName font-number)))
	 (when (equalp font-name Macs-font-name)
	   (mtb:with-resource (family "FOND" font-number)
	     (let* ((table-index (octet-structure-field-index
				   (font-family-header-association-table family 0)))
		    (table-length (1+
				    (font-family-association-table-length family table-index)))
		    (entry-size (octet-structure-total-size
				  (font-family-association-entry family 0)))
		    (entry-index (+ table-index
				    (octet-structure-field-index
				      (font-family-association-table-entries family 0)))))
	       (dotimes (ignore table-length)
		 (when (and (= size (font-family-association-entry-size family entry-index))
			    (= face (font-family-association-entry-style family entry-index)))
		   (return (font-family-association-entry-resource-id family entry-index)))
		 (incf entry-index entry-size))))))
     (mtb:mac-os-error-resnotfound nil)))

(defun maybe-replace-font-standin (font-family thing)
  (when (integerp thing)
    (let ((resource-id (or (font-resource-id (qd-font-family-name font-family)
					     (ldb %%font-standin-size thing)
					     (ldb %%font-standin-face thing))
			   (ldb %%font-standin-id thing))))
      (flet ((load-one (type)
	       (mtb:with-resource (font type resource-id)
		 (bfd-from-font-resource font 0 nil
					 (qd-font-family-name font-family) resource-id
					 (qd-font-family-number font-family)
					 (ldb %%font-standin-size thing)))))
	(let ((bfd (condition-case ()
			(load-one "FONT")
		      (mtb:mac-os-error-resnotfound
			(load-one "NFNT")))))
	  (setf (getf (fed:bfd-plist bfd) :font-face) (ldb %%font-standin-face thing))
	  (nsubstitute bfd thing (qd-font-family-bfds font-family))
	  (setq thing bfd)))))
  thing)

(defun mac-bfd-for-font-internal (font-family size face)
  (when (and font-family size)
    ;; Try for exact match.
    (dolist (bfd (qd-font-family-bfds font-family))
      (when (and (= size (bfd-or-standin-property bfd :font-size))
		 (= face (bfd-or-standin-property bfd :font-face)))
	(setq bfd (maybe-replace-font-standin font-family bfd))
	(return-from mac-bfd-for-font-internal
	  bfd)))
    ;; Find the best match and adjust it.
    (let ((best nil)
	  (best-mismatch nil))
      (dolist (bfd (qd-font-family-bfds font-family))
	(when (and best (< size (bfd-or-standin-property bfd :font-size)))
	  (return))
	(let ((bfd-face (bfd-or-standin-property bfd :font-face)))
	  (when (zerop (logandc1 face bfd-face))
	    (let ((mismatch (logandc2 face bfd-face)))
	      (when (or (null best) ( (integer-length (lognot mismatch))
				       (integer-length (lognot best-mismatch))))
		(setq best bfd
		      best-mismatch mismatch))))))
      (when best
	(setq best (maybe-replace-font-standin font-family best))
	(let ((best-size (bfd-or-standin-property best :font-size))
	      (name (string (fed:bfd-name best)))
	      (extra-width 0))
	  (unless (zerop best-mismatch)
	    (dotimes (i 7)
	      (when (ldb-test (byte 1 i) best-mismatch)
		(setq name (string-append name "-" (first (find i *qd-font-face-alist*
								:key #'second))))
		(incf extra-width
		      (* size (aref (qd-font-family-extra-widths font-family) i)))))
	    (setq extra-width (round extra-width)))
	  (setq name (intern (format () "~A-~D" name size) "FONTS"))
	  (setq best (fed::copy-bfd best name))
	  (loop for bcd being the array-elements of best using (index index) do
	    (when bcd
	      ;; Should use virtual width table, if present.  But it never is.
	      (let ((total-width (+ (round (* (fed:bcd-set-width bcd) size) best-size)
				    extra-width)))
		(when (plusp (fed:bcd-raster-width bcd))
		  (when (ldb-test (byte 1 1) best-mismatch)
		    (setq bcd (fed::make-italic-bcd bcd (fed:bfd-baseline best) 1 0)))
		  (when (ldb-test (byte 1 0) best-mismatch)
		    (setq bcd (fed::make-bold-bcd bcd))
		    (incf total-width)))
		(when (and (= index 32.)		; Space has extra width when bold
			   (ldb-test (byte 1 0) best-mismatch)) ;but not a plusp raster width
		  (incf total-width))
		(setf (fed:bcd-set-width bcd) total-width))
	      (setf (aref best index) bcd))))
	(setf (getf (fed:bfd-plist best) :font-face) face
	      (getf (fed:bfd-plist best) :font-size) size)
	best))))

(si:define-gc-optimization install-bfd-standins :layered-system-release
  (:order (:before si:gc-symbols))
  (:documentation "remove Mac font BFDs.")
  (:before-flip (ignore)
   (dolist (font-family *mac-font-families*)
     (setf (qd-font-family-bfds font-family)
	   (loop for bfd in (qd-font-family-bfds font-family)
		 collect (if (integerp bfd) bfd
			     (sys:%logdpbs (getf (fed:bfd-plist bfd) :resource-id)
					   %%font-standin-id
					   (getf (fed:bfd-plist bfd) :font-size 0)
					   %%font-standin-size
					   (getf (fed:bfd-plist bfd) :font-face 0)
					   %%font-standin-face 0)))))))

;;; eql would do, but this one is already compiled for me.
(defvar *inverse-font-bfd-mappings* (make-hash-table :test 'eq :locking :without-interrupts))

(defun mac-font-for-character-style (character-style character-set)
  (setq character-style (si:parse-character-style character-style))	;just in case
  (when (and (eq (si:cs-family character-style) :device-font)
	     )
    (return-from mac-font-for-character-style
      (fed::find-font (si:cs-face character-style))))
  (let ((bfd (mac-bfd-for-character-style character-style character-set)))
    (when bfd
      (let ((font (fed:font-from-bfd bfd)))
	(setf (gethash font *inverse-font-bfd-mappings*)
	      (let ((plist (fed:bfd-plist bfd)))
		(list bfd
		      (getf plist :font-name "")
		      (getf plist :font-face 0)
		      (getf plist :font-size 0))))
	font))))

(defun qd-font-bfd (qd-font)
  (first (gethash qd-font *inverse-font-bfd-mappings*)))

;;; List of family, face, size numbers.
(defun qd-font-parameters (qd-font)
  (rest (gethash qd-font *inverse-font-bfd-mappings*)))

(defun qd-font-char-width (qd-font index)
  (let ((bfd (qd-font-bfd qd-font)))
    (if (null bfd)
	(tv:font-char-width qd-font)
	(fed:bcd-set-width
	  (or (and (< index (fed:bfd-fill-pointer bfd)) (aref bfd index))
	      (getf (fed:bfd-plist bfd) :missing-symbol))))))

(defun qd-font-baseline (qd-font)
  (tv:font-baseline qd-font))

(defun qd-font-line-spacing (qd-font)
  (tv:font-char-height qd-font))

(defun qd-font-vsp (qd-font)
  (or (let ((bfd (qd-font-bfd qd-font)))
	(and bfd (getf (fed:bfd-plist bfd) :vsp)))
      *default-vsp*))

(defun qd-font-nominal-char-width (qd-font)
  (tv:font-char-width qd-font))

(defflavor basic-mac-display-device () (si:display-device))

(defflavor mac-display-device () (basic-mac-display-device))

(defwhopper (:get-mapping mac-display-device) (character-set character-style
							     &optional inquiry-only)
  (let ((spec (continue-whopper character-set character-style t)))
    (when (null spec)
      (setq spec (mac-font-for-character-style character-style character-set))
      (unless (null spec)
	(send self :set-mapping character-set character-style spec)))
    (cond ((not (symbolp spec)) spec)
	  (inquiry-only spec)
	  ((boundp spec) (symbol-value spec))
	  (t
	   (or (qd-font-from-mac-font-symbol spec :if-not-found nil)
	   (condition-case ()
		(fed:find-and-load-font spec)
	      (fed:font-not-found
		(multiple-value-bind (nil new-thing)
		    (signal 'si:no-character-style-mapping :device self
			    :style character-style
			    :character-set character-set
			    :proceed-types
			      (if (si:get-font self character-set
					       si:*undefined-character-style* nil t)
				 '(:replace-entire-style :use-undefined-style :other-font)
				 '(:replace-entire-style :other-font)))
		  (let ((spec (si:get-font self character-set new-thing)))
		    ;; Install so only blow out once.  Hopefully the mapping gets cleared
		    ;; when/if the real thing gets defined.
		    (send self :set-mapping character-set character-style spec)
		    spec)))))))))

(defvar *qd-font-from-mac-font-symbol-table*
	(make-hash-table :test 'eq :locking :without-interrupts))

(defun qd-font-from-mac-font-symbol (symbol &key (if-not-found :error))
  (or (gethash symbol *qd-font-from-mac-font-symbol-table*)
      (let ((font (block found
		    (maphash (sys:named-lambda maphash (font ignore)
			       (when (eql (sys:font-name font) symbol)
				 (return-from found font)))
			     *inverse-font-bfd-mappings*))))
	(setf (gethash symbol *qd-font-from-mac-font-symbol-table*) font)
	(cond (font font)
	      ((eql if-not-found :error)
	       (error "Cannot find font object for Macintosh font ~s" symbol))
	      (T nil)))))

(defflavor genera-fonts-mac-display-device () (basic-mac-display-device))

(defmethod (:get-mapping genera-fonts-mac-display-device)
	   (character-set character-style &optional inquiry-only)
  (si:get-font si:*b&w-screen* character-set character-style nil inquiry-only))

(defmethod (si:display-device-map-over-character-style-translations
	     genera-fonts-mac-display-device)
	   (&rest args)
  (apply #'si:display-device-map-over-character-style-translations si:*b&w-screen* args))

(defflavor small-screen-genera-fonts-mac-display-device ()
	   (si:b&w-screen-display-device basic-mac-display-device))

(compile-flavor-methods mac-display-device genera-fonts-mac-display-device
			small-screen-genera-fonts-mac-display-device)

(si:register-display-device *mac-display-device* mac-display-device
			    "Screen with Macintosh fonts")
(si:register-display-device *genera-fonts-mac-display-device* genera-fonts-mac-display-device
			    "Screen with Genera fonts")
(si:register-display-device *small-screen-genera-fonts-mac-display-device*
			    small-screen-genera-fonts-mac-display-device
			    "Screen with small Genera fonts")

;;; Eventually handle the fact that some fonts are really character sets.
(defun fonted-mac-bytes-to-string-and-character-style (bytes font size style)
  (values (ascii-to-string bytes)
	  (si:intern-character-style
	    (progn font :fix)				;---
	    (cond ((ldb-test (byte 1 5) style) :condensed)
		  ((ldb-test (byte 1 6) style) :extended)
		  (t (nth (ldb (byte 2 0) style) '(:roman :bold :italic :bold-italic))))
	    (loop for (key ksize) in *mac-font-size-alist*
		  when ( ksize size) return key
		  finally (return key)))
	  (loop for (key bit) in *qd-font-face-alist* 
		when (and (ldb-test (byte 1 bit) style)
			  (member key '(:underlined :outlined :shadowed)))
		  collect key)))

#||
(defun write-bfd-files-from-font-file (font-file bfd-file-template)
  (setq bfd-file-template (fs:merge-pathnames bfd-file-template))
  (dolist (family (read-font-families-from-resource-file font-file))
    (format t "~&Writing ~A:~%" (qd-font-family-name family))
    (dolist (bfd (qd-font-family-bfds family))
      (dolist (lost `(:vsp :font-type :font-number :font-name :font-size :font-face
		      :missing-symbol :resource-id))
	(remf (fed:bfd-plist bfd) lost))
      (let ((truename (fed::write-bfd-to-file bfd
					      (send bfd-file-template :new-name
						    (string (fed:bfd-name bfd))))))
	(format t "~&  wrote ~A~%" truename)))))

(defun font-sampler (&optional family-names)
  (with-open-stream (stream (hardcopy:make-hardcopy-stream hardcopy:*default-text-printer*
							   :title "Mac Fonts"))
    (dolist (family *mac-font-families*)
      (when (or (null family-names)
		(member (qd-font-family-name family) family-names :test #'string-equal))
	(format stream "~&Family ~A:~%" (qd-font-family-name family))
	(let ((bfd (let ((bfds (qd-font-family-bfds family)))
		     (or (find 0 bfds :key #'(lambda (bfd)
					       (getf (fed:bfd-plist bfd) :font-face))
				      :from-end t)
			 (first (last bfds))))))
	  (fed:show-font (fed:bfd-name bfd) :bfd bfd :stream stream))
	(send stream :eject-page)))))
||#


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; See Inside Macintosh Volume VI for an explanation of font family ID ranges.

;;; Assign Genera fonts installed in the System File to the top of the Roman script range.
0(defparameter *base-system-file-font-family-id* (- 16000 64))
(defparameter *last-usable-system-file-font-family-id* (+ *base-system-file-font-family-id*
							  64 -1))
(defvar *next-free-system-file-font-family-id*)	1;Value is recorded in 0GENERA-FONTS.BIN

1;;; Genera fonts downloaded to a temporary resource file while Lisp is running.
0(defparameter *base-downloaded-font-family-id* (+ 16384 (* (1- (cconstant smUninterp)) 512)))
(defparameter *last-usable-downloaded-font-family-id* (+ *base-downloaded-font-family-id*
							 512 -1))
(defvar *next-free-downloaded-font-family-id* *base-downloaded-font-family-id*)

(defparameter ResLoad #xA5E)			1;A single byte.

;;; Apple dictates that 0NFNT1 resource IDs be greater than 1023 and not the equal to the ID
;;; of any existing 0FONT1 or0 sfnt1 resources.
0(defun unique-NFNT-id ()
  (stack-let ((old-ResLoad (make-array 1 :element-type '(unsigned-byte 8) :fill-pointer 0)))
    (_read-opaque-bytes-from-pointer ResLoad 1 old-ResLoad)
    (unwind-protect
	(progn
	  (_SetResLoad nil)
	  (loop
	    (let ((id (_UniqueID "NFNT")))
	      (when (and (> id 1023)
			 (null (condition-case ()
				    (_GetResource "FONT" id)
				  (mac-os-error-resnotfound nil)))
			 (null (condition-case ()
				    (_GetResource "sfnt" id)
				  (mac-os-error-resnotfound nil))))
		(return id)))))
      (_SetResLoad (not (zerop (aref old-ResLoad 0)))))))

(defun next-free-font-family-id (for-system-file-p)
  (stack-let ((old-ResLoad (make-array 1 :element-type '(unsigned-byte 8) :fill-pointer 0))
	      (family-name (make-array 256 :element-type 'string-char :fill-pointer 0)))
    (_read-opaque-bytes-from-pointer ResLoad 1 old-ResLoad)
    (unwind-protect
	(macrolet
	    ((search-fonts (next last ignore-genera-fonts-p)
	       `(loop
		  (when (> ,next ,last)
		    (signal 'mac-font-limit-exceeded
			    :format-string "No more unused font family IDs."))
		  (condition-case ()
		       (multiple-value-bind (handle)
			   (_GetResource "FOND" ,next)
			 ,@(if ignore-genera-fonts-p
			       `((_GetResInfo handle family-name)
				 (when (or (and (> (length family-name) 7)
						(string-equal family-name "Genera " :end1 7))
					   (and (> (length family-name) 8)
						(string-equal family-name "%Genera " :end1 8)))
				   1;; Genera fonts are0 1named 0"Genera NAME"1 or 0"%Genera NAME"1.
0				   (return (prog1 ,next
						  (incf ,next)))))
			       `((declare (ignore handle)))))
		     (mac-os-error-resnotfound
		       (return (prog1 ,next
				      (incf ,next)))))
		  (incf ,next))))
	  (_SetResLoad nil)
	  (if for-system-file-p
	      (search-fonts *next-free-system-file-font-family-id*
			    *last-usable-system-file-font-family-id*
			    t)
	      (search-fonts *next-free-downloaded-font-family-id*
			    *last-usable-downloaded-font-family-id*
			    nil)))
      (_SetResLoad (not (zerop (aref old-ResLoad 0)))))))

(defun qd-font-families-for-character-style-family (family bfds-done)
  (let ((standard-faces '(:roman :bold :italic :bold-italic :condensed :bold-extended))
	(funny-faces nil))
    (dolist (device `(,*genera-fonts-mac-display-device*
		      ,*small-screen-genera-fonts-mac-display-device*))
      (dw::map-over-valid-character-style-faces-for-family
	#'(lambda (face)
	    (when (keywordp face)
	      (unless (member face standard-faces)
		(pushnew face funny-faces))))
	family nil :allow-relative nil :device device))
    (let ((result nil))
      (flet ((do-set (faces standard)
	       (multiple-value-bind (families updated-bfds-done)
		   (qd-font-families-for-character-style-family-1 family faces standard
								  bfds-done)
		 (when families
		   (setf result (append result families)
			 bfds-done updated-bfds-done)))))
	(do-set standard-faces t)
	(dolist (face funny-faces)
	  (do-set (list face) nil)))
      (values result bfds-done))))

(defun qd-font-families-for-character-style-family-1 (family faces standard bfds-done)
  (let ((result nil))
    (map nil
	 #'(lambda (charset)
	     (when charset
	       (multiple-value-bind (family updated-bfds-done)
		   (qd-font-family-for-character-style-family charset family faces standard
							      bfds-done)
		 (when family
		   (push family result)
		   (setf bfds-done updated-bfds-done)))))
	 si:*char-set-table*)
    (values (nreverse result) bfds-done)))

(defun qd-font-family-for-character-style-family (charset family faces standard bfds-done)
  (let ((family-name (format nil "%Genera~@[ ~A~] ~A~:[ ~A~]"
			     (send charset :name) family standard (first faces)))
	(family-number nil)
	(bfds nil))
    (labels ((do-face (face)
	       (let ((face-code (if (not standard)
				    0
				    (mac-font-style-for-character-style-face face))))
		 (loop for (size-symbol . point-sizes) in *mac-font-size-alist* do
		   (loop for device in `(,*genera-fonts-mac-display-device*
					 ,*small-screen-genera-fonts-mac-display-device*)
			 and for point-size in point-sizes
			 do
		     (let* ((font (condition-case ()
				       (si:get-font device charset
						    (si:intern-character-style family face
									       size-symbol)
						    nil)
				     (si:character-style-error nil))))
		       (when font
			 (let ((bfd (fed::get-bfd (if (typep font 'tv:font)
						      (tv:font-name font)
						      font))))
			   (unless (member bfd bfds-done)
			     (when (null family-number)
			       (setf family-number (next-free-font-family-id t)))
			     (setf (getf (fed:bfd-plist bfd) :font-number) family-number
				   (getf (fed:bfd-plist bfd) :font-name) family-name
				   (getf (fed:bfd-plist bfd) :font-face) face-code
				   (getf (fed:bfd-plist bfd) :font-size) point-size
				   (getf (fed:bfd-plist bfd) :resource-id) (unique-NFNT-id))
			     (push bfd bfds)
			     (push bfd bfds-done))))))))))
      (map () #'do-face faces))
    (setq bfds (sort bfds #'< :key #'(lambda (bfd)
				       (getf (fed:bfd-plist bfd) :font-face))))
    (setq bfds (stable-sort bfds #'< :key #'(lambda (bfd)
					      (getf (fed:bfd-plist bfd) :font-size))))
    (values
      (when bfds
	(multiple-value-bind (first-char last-char width-max)
	    (loop for bfd in bfds
		  minimize (position nil bfd :test #'neq) into first-char
		  maximize (position nil bfd :test #'neq :from-end t) into last-char
		  maximize (/ (fed:bfd-char-width bfd)
			      (float (getf (fed:bfd-plist bfd) :font-size)))
		    into width-max
		  finally (return (values first-char last-char width-max)))
	  (let* ((biggest (first (last bfds)))
		 (point-size (float (getf (fed:bfd-plist biggest) :font-size)))
		 (ascent (/ (fed:bfd-baseline biggest) point-size))
		 (descent (/ (- (fed:bfd-line-spacing biggest) (fed:bfd-baseline biggest))
			     point-size))
		 (leading (/ (getf (fed:bfd-plist biggest) :vsp *default-vsp*) point-size)))
	    (make-quickdraw-font-family :name family-name :number family-number
					:first-char first-char :last-char last-char
					:ascent (un-fixed-point-4+12 ascent)
					:descent (un-fixed-point-4+12 descent)
					:leading (un-fixed-point-4+12 leading)
					:width-max (un-fixed-point-4+12 width-max)
					:bfds bfds))))
      bfds-done)))

(defun qd-font-family-for-font (font)
  (let* ((family-name (format nil "%~A:~A"
			      (symbol-package (tv:font-name font)) (tv:font-name font)))
	 (point-size (tv:font-raster-height font))
	 (bfd (fed::get-bfd (tv:font-name font)))
	 (first-char (position nil bfd :test #'neq))
	 (last-char (position nil bfd :test #'neq :from-end t))
	 (width-max (/ (fed:bfd-char-width bfd) (float point-size)))
	 (ascent (/ (fed:bfd-baseline bfd) (float point-size)))
	 (descent (/ (- (fed:bfd-line-spacing bfd) (fed:bfd-baseline bfd)) (float point-size)))
	 (leading (/ (getf (fed:bfd-plist bfd) :vsp *default-vsp*) (float point-size))))
    (make-quickdraw-font-family :name family-name :number 0
				:first-char first-char :last-char last-char
				:ascent (un-fixed-point-4+12 ascent)
				:descent (un-fixed-point-4+12 descent)
				:leading (un-fixed-point-4+12 leading)
				:width-max (un-fixed-point-4+12 width-max)
				:bfds (list bfd))))

(defun resources-for-character-styles (families)
  (let ((qd-families (loop with bfds-done
			   for family in families
			   nconc (multiple-value-setq (nil bfds-done)
				   (qd-font-families-for-character-style-family family
										bfds-done)))))
    (values
      (append (loop for qd-family in qd-families
		    nconc (loop for bfd in (qd-font-family-bfds qd-family)
				collect (list (font-resource-from-bfd bfd)
					      "NFNT"
					      (getf (fed:bfd-plist bfd) :resource-id)
					      nil
					      %mac-resource-purgeable)))
	      (loop for qd-family in qd-families
		    collect (multiple-value-list
			      (font-family-resource-from-qd-font-family qd-family))))
      (loop for qd-family in qd-families
	    nconc (loop for bfd in (qd-font-family-bfds qd-family)
			collect (list bfd
				      (or (getf (fed:bfd-plist bfd) :font-name)
					  (qd-font-family-name qd-family))
				      (getf (fed:bfd-plist bfd) :font-face 0)
				      (getf (fed:bfd-plist bfd) :font-size 0)))))))

(defun establish-qd-font-parameters (font-name number face size)
  (establish-qd-font-parameters-1 font-name (rpc-toolkit-get-font-name number) face size))

(defun establish-qd-font-parameters-1 (font-name family face size)
  (let ((font (ignore-errors (fed:find-and-load-font font-name))))
    (when font
      (setf (gethash font *inverse-font-bfd-mappings*) (list nil family face size)))))

(defun write-mac-font-files-for-character-styles
       (&key (families (let ((preferred '(:fix :jess :dutch :swiss)))
			 (append preferred (set-difference si:*valid-families*
							   (append '(:device-font nil)
								   preferred)))))
	     (filename "SYS:EMBEDDING;RPC;UI;MACINTOSH;GENERA-FONTS")
	     (base-family-id *base-system-file-font-family-id*))
  (setq filename (fs:merge-pathnames filename))
  (let ((*next-free-system-file-font-family-id* base-family-id))
    (multiple-value-bind (resources mappings)
	(resources-for-character-styles families)
      (let ((forms (append `((setq *next-free-system-file-font-family-id*
				   ,*next-free-system-file-font-family-id*))
			   (loop for (bfd . params) in mappings
				 collect `(establish-qd-font-parameters-1
					    ',(fed:bfd-name bfd)
					    . ,params)))))
	(values
	  (write-mac-file (send filename :new-type :macintosh-resource) nil
			  (make-resource-fork resources)
			  :name "Genera Fonts" :type "FFIL" :author "DMOV")
	  (sys:dump-forms-to-file (send filename :new-type :bin)
				  forms
				  '(:package :Common-Lisp-User))
	  forms)))))

#||
(defun show-mac-font-file-differences (pathname-1-or-nil pathname-2-or-nil)
  (let (mappings-1 mappings-2)
    (flet ((load-or-get-mapping (pathname-or-nil)
	     (if (null pathname-or-nil)
		 *inverse-font-bfd-mappings*
		 (let ((*inverse-font-bfd-mappings* (make-hash-table :test 'eq)))
		   (load pathname-or-nil)
		   *inverse-font-bfd-mappings*))))
      (setq mappings-1 (load-or-get-mapping pathname-1-or-nil)
	    mappings-2 (load-or-get-mapping pathname-2-or-nil)))
    (flet ((print-entry (pathname-or-nil mappings font entry)
	     (ignore mappings)
	     (format t "~&~A: ~S  " (or pathname-or-nil "World") (sys:font-name font))
	     (if entry
		 (apply #'format t "~A ~O ~D" (rest entry))
		 (format t "None"))))
      (maphash #'(lambda (font entry-1)
		   (let ((entry-2 (gethash font mappings-2)))
		     (unless (equal entry-1 entry-2)
		       (print-entry pathname-1-or-nil mappings-1 font entry-1)
		       (print-entry pathname-2-or-nil mappings-2 font entry-2)
		       (terpri))))
	       mappings-1)
      (maphash #'(lambda (font entry-2)
		   (unless (gethash font mappings-1)
		       (print-entry pathname-1-or-nil mappings-1 font nil)
		       (print-entry pathname-2-or-nil mappings-2 font entry-2)
		       (terpri)))
	       mappings-2))))
||#

1;--- Stuff for Sage

0(pushnew :geneva si:*valid-families*)
(pushnew '(:geneva "Geneva") *mac-font-family-alist* :test #'equal)

(si:define-character-style-families *mac-display-device*
				    si:*standard-character-set*
  ;; it wants to say body = title7 = display = title0 = normal
  ;; heading = title3
  '(:family (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")sage:sans-serif-body
0    (:size
      :normal					;10.5 Century Schoolbook
     (:face :roman (:style :geneva :roman :normal)	;HL12
	    :italic (:style :geneva :italic :normal)	;HL12I
	    :bold (:style :geneva :bold :normal)		;HL12B
	    :bold-italic (:style :geneva :bold-italic :normal)	;HL12BI
	    sage::smallcaps (:style :fix :roman :normal)	;CPTFONT
	    sage::typewriter (:style :fix :roman :normal)	;CPTFONT
	    sage::lisp (:style sage:sans-serif-body :bold :normal)	;HL12B
	    sage::programlanguage (:style :fix :roman :normal)	;CPTFONT
	    sage::keyboardinput (:style :fix :roman :normal)	;CPTFONT
	    symbol (:style :fix :roman :normal)		;yecch.  At least we get "o"
	    )
     :large
     (:face :roman (:style :geneva :roman :large)
	    :italic (:style :geneva :italic :large)
	    :bold (:style :geneva :bold :large)
	    :bold-italic (:style :geneva :bold-italic :large)
	    sage::smallcaps (:style sage:sans-serif-body :roman :normal)
	    sage::typewriter (:style :fix :roman :large)
	    sage::lisp (:style sage:sans-serif-body :bold :large)
	    sage::programlanguage (:style :fix :roman :large)
	    sage::keyboardinput (:style :fix :roman :large)
	    symbol (:style :fix :roman :large)		;yecch.  At least we get "o"
	    )
     :small
     (:face :roman (:style :geneva :roman :small)
	    :italic (:style :geneva :italic :small)
	    :bold (:style :geneva :bold :small)
	    :bold-italic (:style :geneva :bold-italic :small)
	    sage::smallcaps (:style :fix :roman :very-small)
	    sage::typewriter (:style :fix :roman :small)
	    sage::lisp (:style sage:sans-serif-body :bold :small)
	    sage::programlanguage (:style :fix :roman :small)
	    sage::keyboardinput (:style :fix :roman :small)
	    symbol (:style :fix :roman :small)		;yecch.  At least we get "o"
	    )
     sage::smallbody					;8.5 Helvetica
     (:face :roman (:style sage:sans-serif-body :roman :small)
	    :italic (:style sage:sans-serif-body :italic :small)
	    :bold (:style sage:sans-serif-body :bold :small)
	    :bold-italic (:style sage:sans-serif-body :bold-italic :small)
	    sage::smallcaps (:style :fix :roman :small)
	    sage::typewriter (:style :fix :roman :small)
	    sage::lisp (:style sage:sans-serif-body :bold :small)
	    sage::programlanguage (:style :fix :roman :small)
	    sage::keyboardinput (:style :fix :roman :small)
	    symbol (:style :fix :roman :small)		;yecch.  At least we get "o"
	    )
     sage::title2				;10.5 Helvetica Bold
     (:face :roman (:style :geneva :bold :normal)
	    :italic (:style :geneva :bold-italic :normal)
	    :bold (:style :geneva :bold :normal)
	    :bold-italic (:style :geneva :bold-italic :normal)
	    sage::smallcaps (:style :geneva :roman :small)
	    sage::typewriter (:style :fix :roman :normal)
	    sage::lisp (:style :geneva :bold :normal)
	    sage::programlanguage (:style :fix :roman :normal)
	    sage::keyboardinput (:style :fix :roman :normal)
	    symbol (:style :fix :roman :normal)		;yecch.  At least we get "o"
	    )
     sage::title3				;12.5 Helvetica Bold
     (:face :roman (:style :geneva :bold :large)
	    :italic (:style :geneva :bold-italic :large)
	    :bold (:style :geneva :bold :large)
	    :bold-italic (:style :geneva :bold-italic :large)
	    sage::smallcaps (:style :geneva :roman :normal)
	    sage::typewriter (:style :fix :roman :large)
	    sage::lisp (:style :geneva :bold :large) 
	    sage::programlanguage (:style :fix :roman :large)
	    sage::keyboardinput (:style :fix :roman :large)
	    symbol (:style :fix :roman :large)		;yecch.  At least we get "o"
	    )
     sage::title5				;15.5 Helvetica Bold
     (:face :roman (:style :geneva :bold :very-large)
	    :italic (:style :geneva :bold-italic :very-large)
	    :bold (:style :geneva :bold :very-large)
	    :bold-italic (:style :geneva :bold-italic :very-large)
	    sage::smallcaps (:style :geneva :roman :large)
	    sage::typewriter (:style :fix :roman :very-large)
	    sage::lisp (:style :geneva :bold :very-large)
	    sage::programlanguage (:style :fix :roman :very-large) 
	    sage::keyboardinput (:style :fix :roman :very-large)
	    symbol (:style :fix :roman :very-large)		;yecch.  At least we get "o"
	    )
     sage::title6				;10.5 Century Schoolbook roman
     (:face :roman (:style :geneva :bold :normal)
	    :italic (:style :geneva :bold-italic :normal)
	    :bold (:style :geneva :bold :normal)
	    :bold-italic (:style :geneva :bold-italic :normal)
	    sage::smallcaps (:style :geneva :roman :small)
	    sage::typewriter (:style :fix :roman :normal)
	    sage::lisp (:style :geneva :bold :normal)
	    sage::programlanguage (:style :fix :roman :normal)
	    sage::keyboardinput (:style :fix :roman :normal)
	    symbol (:style :fix :roman :normal)		;yecch.  At least we get "o"
	    ))))

;; This is here so that when sage's character faces escape its own environment
;; (like in bug mail or Spell or something) they won't all have to print with lozenges.
(si:define-character-style-families *mac-display-device*
				    si:*standard-character-set*
  ;; it wants to say body = title7 = display = title0 = normal
  ;; heading = title3
  '(:family 2:fix
0    (:size
      :normal					;10.5 Century Schoolbook
     (:face sage::smallcaps (:style :fix :roman :normal)	;CPTFONT
	    sage::typewriter (:style :fix :roman :normal)	;CPTFONT
	    sage::lisp (:style sage:sans-serif-body :bold :normal)	;HL12B
	    sage::programlanguage (:style :fix :roman :normal)	;CPTFONT
	    sage::keyboardinput (:style :fix :roman :normal)	;CPTFONT
	    symbol (:style :fix :roman :normal)		;yecch.  At least we get "o"
	    )
     :large
     (:face sage::smallcaps (:style sage:sans-serif-body :roman :normal)
	    sage::typewriter (:style :fix :roman :large)
	    sage::lisp (:style sage:sans-serif-body :bold :large)
	    sage::programlanguage (:style :fix :roman :large)
	    sage::keyboardinput (:style :fix :roman :large)
	    symbol (:style :fix :roman :large)		;yecch.  At least we get "o"
	    )
     :small
     (:face sage::smallcaps (:style :fix :roman :very-small)
	    sage::typewriter (:style :fix :roman :small)
	    sage::lisp (:style sage:sans-serif-body :bold :small)
	    sage::programlanguage (:style :fix :roman :small)
	    sage::keyboardinput (:style :fix :roman :small)
	    symbol (:style :fix :roman :small)		;yecch.  At least we get "o"
	    )
     sage::smallbody					;8.5 Helvetica
     (:face sage::smallcaps (:style :fix :roman :small)
	    sage::typewriter (:style :fix :roman :small)
	    sage::lisp (:style sage:sans-serif-body :bold :small)
	    sage::programlanguage (:style :fix :roman :small)
	    sage::keyboardinput (:style :fix :roman :small)
	    symbol (:style :fix :roman :small)		;yecch.  At least we get "o"
	    )
     sage::title2				;10.5 Helvetica Bold
     (:face sage::smallcaps (:style :geneva :roman :small)
	    sage::typewriter (:style :fix :roman :normal)
	    sage::lisp (:style :geneva :bold :normal)
	    sage::programlanguage (:style :fix :roman :normal)
	    sage::keyboardinput (:style :fix :roman :normal)
	    symbol (:style :fix :roman :normal)		;yecch.  At least we get "o"
	    )
     sage::title3				;12.5 Helvetica Bold
     (:face sage::smallcaps (:style :geneva :roman :normal)
	    sage::typewriter (:style :fix :roman :large)
	    sage::lisp (:style :geneva :bold :large) 
	    sage::programlanguage (:style :fix :roman :large)
	    sage::keyboardinput (:style :fix :roman :large)
	    symbol (:style :fix :roman :large)		;yecch.  At least we get "o"
	    )
     sage::title5				;15.5 Helvetica Bold
     (:face sage::smallcaps (:style :geneva :roman :large)
	    sage::typewriter (:style :fix :roman :very-large)
	    sage::lisp (:style :geneva :bold :very-large)
	    sage::programlanguage (:style :fix :roman :very-large) 
	    sage::keyboardinput (:style :fix :roman :very-large)
	    symbol (:style :fix :roman :very-large)		;yecch.  At least we get "o"
	    )
     sage::title6				;10.5 Century Schoolbook roman
     (:face sage::smallcaps (:style :geneva :roman :small)
	    sage::typewriter (:style :fix :roman :normal)
	    sage::lisp (:style :geneva :bold :normal)
	    sage::programlanguage (:style :fix :roman :normal)
	    sage::keyboardinput (:style :fix :roman :normal)
	    symbol (:style :fix :roman :very-large)	;yecch.  At least we get "o"
	    ))))

(si:define-character-style-families *mac-display-device*
				    si:*standard-character-set*
  ;; it wants to say body = title7 = display = title0 = normal
  ;; heading = title3
  '(:family 2sage::centuryschoolbook-body
0    (:size
      :normal					;10.5 Century Schoolbook
     (:face :roman (:style :dutch :roman :normal)
	    :italic (:style :dutch :italic :normal)
	    :bold (:style :dutch :bold :normal)
	    :bold-italic (:style :dutch :bold-italic :normal)
	    sage::smallcaps (:style :fix :roman :normal)
	    sage::typewriter (:style :fix :roman :normal)
	    sage::lisp (:style sage::centuryschoolbook-body :bold :normal)
	    sage::programlanguage (:style :fix :roman :normal)
	    sage::keyboardinput (:style :fix :roman :normal)
	    symbol (:style :fix :roman :normal)		;yecch.  At least we get "o"
	    )
     :large
     (:face :roman (:style :dutch :roman :large)
	    :italic (:style :dutch :italic :large)
	    :bold (:style :dutch :bold :large)
	    :bold-italic (:style :dutch :bold-italic :normal)
	    sage::smallcaps (:style :fix :roman :normal)
	    sage::typewriter (:style :fix :roman :normal)
	    sage::lisp (:style sage::centuryschoolbook-body :bold :normal)
	    sage::programlanguage (:style :fix :roman :normal)
	    sage::keyboardinput (:style :fix :roman :normal)
	    symbol (:style :fix :roman :normal)	      ;yecch.  At least we get "o"
	    )
     :small
     (:face :roman (:style :dutch :roman :small)
	    :italic (:style :dutch :italic :small)
	    :bold (:style :dutch :bold :small)
	    :bold-italic (:style :dutch :bold-italic :small)
	    sage::smallcaps (:style :fix :roman :small)
	    sage::typewriter (:style :fix :roman :small)
	    sage::lisp (:style sage::centuryschoolbook-body :bold :small)
	    sage::programlanguage (:style :fix :roman :small)
	    sage::keyboardinput (:style :fix :roman :small)
	    symbol (:style :fix :roman :small)	     ;yecch.  At least we get "o"
	    )
     sage::smallbody					;8.5 Helvetica
     (:face :roman (:style :geneva :roman :small)
	    :italic (:style :geneva :italic :small)
	    :bold (:style :geneva :bold :small)
	    :bold-italic (:style :geneva :bold-italic :small)
	    sage::smallcaps (:style sage::centuryschoolbook-body sage::smallcaps :small)
	    sage::typewriter (:style sage::centuryschoolbook-body sage::typewriter :small)
	    sage::lisp (:style sage::centuryschoolbook-body sage::lisp :small)
	    sage::programlanguage (:style sage::centuryschoolbook-body sage::programlanguage :small)
	    sage::keyboardinput (:style sage::centuryschoolbook-body sage::keyboardinput :small)
	    symbol (:style :fix :roman :small)		 ;yecch.  At least we get "o"
	    )
     sage::title2				;10.5 Helvetica Bold
     (:face :roman (:style :geneva :bold :normal)
	    :italic (:style :geneva :bold-italic :normal)
	    :bold (:style :geneva :bold :normal)
	    :bold-italic (:style :geneva :bold-italic :normal)
	    sage::smallcaps (:style sage::centuryschoolbook-body :roman :small)
	    sage::typewriter (:style sage::centuryschoolbook-body sage::typewriter :normal)
	    sage::lisp (:style sage::centuryschoolbook-body :bold :normal)
	    sage::programlanguage (:style sage::centuryschoolbook-body sage::programlanguage :normal)
	    sage::keyboardinput (:style sage::centuryschoolbook-body sage::keyboardinput :normal)
	    symbol (:style :fix :roman :normal)		 ;yecch.  At least we get "o"
	    )
     sage::title3				;12.5 Helvetica Bold
     (:face :roman (:style :geneva :bold :large)
	    :italic (:style :geneva :bold-italic :large)
	    :bold (:style :geneva :bold :large)
	    :bold-italic (:style :geneva :bold-italic :large)
	    sage::smallcaps (:style sage::centuryschoolbook-body :roman :normal)
	    sage::typewriter (:style sage::centuryschoolbook-body sage::typewriter :large)
	    sage::lisp (:style sage::centuryschoolbook-body sage::lisp :large) 
	    sage::programlanguage (:style sage::centuryschoolbook-body sage::programlanguage :large)
	    sage::keyboardinput (:style sage::centuryschoolbook-body sage::keyboardinput :large)
	    symbol (:style :fix :roman :large)	 ;yecch.  At least we get "o"
	    )
     sage::title5				;15.5 Helvetica Bold
     ;; This would like to use :very-larger or :much-larger or :larger-larger or :larger2 
     (:face :roman (:style :geneva :bold :very-large)
	    :italic (:style :geneva :bold-italic :very-large)
	    :bold (:style :geneva :bold :very-large)
	    :bold-italic (:style :geneva :bold-italic :very-large)
	    sage::smallcaps (:style :geneva :roman :larger)
	    sage::typewriter (:style :fix :roman :very-large)
	    sage::lisp (:style :geneva :bold :very-large)
	    sage::programlanguage (:style :fix :roman :very-large) 
	    sage::keyboardinput (:style :fix :roman :very-large)
	    symbol (:style :fix :roman :very-large)	;yecch.  At least we get "o"
	    )
     sage::title6				;10.5 Century Schoolbook roman
     (:face :roman (:style sage::centuryschoolbook-body :bold :normal)
	    :italic (:style sage::centuryschoolbook-body :bold-italic :normal)
	    :bold (:style sage::centuryschoolbook-body :bold :normal)
	    :bold-italic (:style sage::centuryschoolbook-body :bold-italic :normal)
	    sage::smallcaps (:style sage::centuryschoolbook-body :roman :small)
	    sage::typewriter (:style :fix :roman :normal)
	    sage::lisp (:style sage::centuryschoolbook-body :bold :normal)
	    sage::programlanguage (:style :fix :roman :normal)
	    sage::keyboardinput (:style :fix :roman :normal)
	    symbol (:style :fix :roman :normal)	;yecch.  At least we get "o"
	    ))))

(si:define-character-style-families *mac-display-device*
				    si:*standard-character-set*
  '(:size
     * (:family
	 2sage::serif-body0 (:face :roman (:style :dutch :roman :same)	;TR12
			   :italic (:style :dutch :italic :same)	;TR12I
			   :bold (:style :dutch :bold :same)	;TR12B
			   :bold-italic (:style :dutch :bold-italic :same)	;TR12BI
			   sage::smallcaps (:style :fix :roman :same)	;CPTFONT
			   sage::typewriter (:style :fix :roman :same)	;CPTFONT
			   sage::lisp (:style :dutch :bold :same)	;TR12B
			   sage::programlanguage (:style :fix :roman :same)	;CPTFONT
			   sage::keyboardinput (:style :fix :roman :same)	;CPTFONT
			   ))
     :normal (:family 2sage::serif-body0 (:face symbol (:style :fix :roman :normal)	;yecch.  At least we get "o"
     ))))

;;;; 640x480 pixel screen support
;;;; Genera fonts but one size smaller

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*standard-character-set*
  '(:family :fix
	    (:size :large (:face :roman fonts:cptfont
				 :italic fonts:cptfonti
				 :bold fonts:cptfontcb
				 :bold-italic fonts:cptfontbi
				 :bold-extended fonts:cptfontb
				 :condensed fonts:cptfontc
				 :extra-condensed fonts:cptfontcc)
		   :normal (:face :roman fonts:tvfont
				  :italic fonts:tvfonti
				  :bold fonts:tvfontcb
				  :bold-italic fonts:tvfontbi
				  ;; needed for presentation-inspector
				  :bold-extended fonts:tvfontb
				  :condensed fonts:tvfont
				  :extra-condensed fonts:einy7
				  )
		   :small (:face :roman fonts:einy7
				 :italic fonts:einy7	;can't do much better, 
				 :bold fonts:einy7		;  when it gets this small.
				 :bold-italic fonts:einy7
				 :condensed fonts:einy7
				 :extra-condensed fonts:einy7
				 :bold-extended fonts:einy7
				 :uppercase fonts:5x5)
		   ;; Same as :small, but needed for lozenged strings
		   :very-small (:face :roman fonts:einy7
				      :italic fonts:einy7	;can't do much better, 
				      :bold fonts:einy7		;  when it gets this small.
				      :bold-italic fonts:einy7
				      :condensed fonts:einy7
				      :extra-condensed fonts:einy7
				      :bold-extended fonts:einy7
				      :uppercase fonts:5x5)
		   :very-large (:face :roman fonts:medfnt
				      :italic fonts:medfnti
				      :bold fonts:medfntb
				      :bold-italic fonts:medfntbi))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*standard-character-set*
  '(:family :swiss (:size :large (:face :roman fonts:hl12
					:bold fonts:hl12b
					:italic fonts:hl12i
					:bold-italic fonts:hl12bi
					:condensed-caps fonts:swiss12-ccaps
					:bold-condensed-caps fonts:swiss12b-ccaps
					;; Needed by the presentation inspector
					:bold-extended fonts:hl12b
					:condensed fonts:hl12)
			  :normal (:face :roman fonts:hl10
					 :bold fonts:hl10b
					 :italic fonts:hl10i
					 :bold-italic fonts:hl10bi
					 ;; Needed by the presentation inspector
					 :condensed-caps fonts:hl10
					 :bold-extended fonts:hl10b
					 :bold-condensed-caps fonts:hl10b
					 :condensed fonts:hl10)
			  :small (:face :roman fonts:hl8
					:italic fonts:hl8i
					:bold fonts:hl8b
					:bold-italic fonts:hl8bi
					:condensed-caps fonts:hl10
					:bold-extended fonts:hl10b
					:bold-condensed-caps fonts:hl10b
					:condensed fonts:hl10)
			  :very-small (:face :roman fonts:hl6
					     :italic fonts:hl6
					     :bold fonts:hl6
					     :bold-italic fonts:hl6)
			  :very-large (:face :roman fonts:hl14
					     :italic fonts:hl14i
					     :bold fonts:hl14b
					     :bold-italic fonts:hl14bi
					     ;; Needed by the presentation inspector
					     :bold-extended fonts:hl14b
					     :condensed fonts:hl14))
	    :dutch (:size :small (:face :roman fonts:tr8
					:bold fonts:tr8b
					:italic fonts:tr8i
					:bold-italic fonts:tr8bi)
			  :normal (:face :roman fonts:tr10
					 :bold fonts:tr10b
					 :italic fonts:tr10i
					 :bold-italic fonts:tr10bi)
			  :large (:face :roman fonts:tr12
					:italic fonts:tr12i
					:bold fonts:tr12b
					:bold-italic fonts:tr12bi)
			  :very-large (:face :roman fonts:Dutch14
					     :italic fonts:Dutch14i
					     :bold fonts:Dutch14b
					     :bold-italic fonts:Dutch14bi))
	    :jess (:size	;Menus use :large, but hit :normal with these also
		   :large (:face :roman fonts:jess11
				 :italic fonts:jess11i
				 :bold fonts:jess11b
				 :bold-italic fonts:jess11bi)
		   :normal (:face :roman fonts:jess11	;should be jess9 or jess10
				  :italic fonts:jess11i
				  :bold fonts:jess11b
				  :bold-italic fonts:jess11bi))
	    :eurex (:size
		     :very-large (:face :italic fonts:eurex21i)
		     :huge (:face :italic fonts:eurex21i))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*mouse-character-set*
  '(:family :fix (:size :normal (:face :roman fonts:mouse))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*arrow-character-set*
  '(:family :fix (:size :normal (:face :roman fonts:narrow))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*symbol-character-set*
  '(:family :swiss (:size :normal (:face :roman fonts:symbol12))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*standard-character-set*
  '(:size *
	  (:family tv:choose-variable-values-menu
		   (:face :roman (:style :fix :roman :same)
			  :italic (:style :fix :italic :same)
			  :bold (:style :fix :bold :same)
			  :bold-italic (:style :fix :bold-italic :same)
			  :fix (:style :fix :roman :same)
			  tv:string (:style tv:choose-variable-values-menu :roman :same)
			  tv:name (:style tv:choose-variable-values-menu :roman :same)
			  tv:value (:style tv:choose-variable-values-menu :roman :same)
			  tv:unselected-choice (:style :swiss :roman :smaller)
			  tv:selected-choice (:style :swiss :bold :smaller)))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*standard-character-set*
  '(:family :fix (:size :tiny (:face :roman fonts:tiny
				     :italic fonts:tiny
				     :bold fonts:tiny
				     :bold-italic fonts:tiny))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*standard-character-set*
  '(:family si:standin-for-undefined-styles (:face :roman (:size :normal fonts:boxfont))))

(si:define-character-style-families *small-screen-genera-fonts-mac-display-device*
				    si:*symbol-character-set*
  '(:family si:standin-for-undefined-styles (:face :roman (:size :normal fonts:boxfont))))
