;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: MACINTOSH-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Functions for getting and setting the time on the Macintosh and converting it
;;; to the lispm universal time format.

;;; Mac time is seconds since January 1, 1904 in whatever timezone you are in.  Groan!
0(defparameter (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*mac-time-origin*0 (time:parse-universal-time "1/1/1904 GMT"))


(defun 2universal-time-from-mac-time0 (mac-time)
  (cond
    ((zerop mac-time)
     nil)
    (t
     1;; Fix up the sign, align it with GMT, and add the origin.
0     (setq mac-time
	   (+ (dpb mac-time (byte 32. 0) 0) (* time:*timezone* 60. 60.) *mac-time-origin*))
1     ;; We have to jump through a few hoops since the MAC doesn't know about
     ;; daylight savings time.
0     (multiple-value-bind (nil nil mac-hours mac-day mac-month mac-year)
	 (time:decode-universal-time mac-time time:*timezone*)
       (when (time:daylight-savings-time-p mac-hours mac-day mac-month mac-year)
	 (setq mac-time (- mac-time (* 60. 60.)))))	1;subtract an hour
0     mac-time
     )))

(defun 2mac-time-from-universal-time0 (ut)
1  ;; Since the MAC doesn't understand timezones or daylight savings time, we kludge
0  (multiple-value-bind
    (nil nil mac-hours mac-day mac-month mac-year nil)
      (time:decode-universal-time ut time:*timezone*)
    (when (time:daylight-savings-time-p mac-hours mac-day mac-month mac-year)
      (setq ut (+ ut (* 60. 60.)))))	1;Add one hour
0  1;; Adjust the origin and timezones
0  (- ut *mac-time-origin* (* time:*timezone* 60. 60.)))

#+IMACH
(defun 2macivory-set-calendar-clock-internal 0(universal-time)
1  ;; Since the MAC doesn't understand timezones or daylight savings time, we kludge
0  (multiple-value-bind
    (nil nil mac-hours mac-day mac-month mac-year nil)
      (time:decode-universal-time universal-time time:*timezone*)
    (when (time:daylight-savings-time-p mac-hours mac-day mac-month mac-year)
      (setq universal-time (+ universal-time (* 60. 60.)))))	1;Add one hour
  ;; Reparse the time to account for any changes made above
0  (multiple-value-bind
    (mac-seconds mac-minutes mac-hours mac-day mac-month mac-year mac-day-of-week)
      1;; Use the CL version of decode-universal-time here since the MAC likes years with
0      1;; four digits
0      (decode-universal-time universal-time time:*timezone*)
    (mtb::set-mac-time :year mac-year :month mac-month :day mac-day :hour mac-hours
		       :minute mac-minutes :second mac-seconds
		       :dayofweek mac-day-of-week)))

#+IMACH
(defun 2macivory-read-calendar-clock-internal 0()
  (declare (values secs minutes hours day month year day-of-the-week daylight-savings-p))
  ;; Get-mac-time tries to get the mac time with a timeout
  (let ((mtime (get-mac-time)))
    (when mtime
      (time:decode-universal-time
	(universal-time-from-mac-time mtime) 0 ))))



