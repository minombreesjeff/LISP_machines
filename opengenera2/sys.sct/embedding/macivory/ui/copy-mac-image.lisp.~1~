;;; -*- Mode: LISP; Syntax: Common-lisp; Package: MAC-TOOLBOX; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This functionality properly resides here in Macivory Support, since it is used by
;;; Copy File.

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")copy-mac-image0 (from-file to-file &key report-stream (create-directories :query))
  (setq from-file (fs:merge-pathnames from-file)
	to-file (fs:parse-pathname to-file nil from-file))	;don't merge yet...
  ;;
  ;; Unfortunately, if we are trying to copy and name/type/version
  ;; preserve, we must find the link-opaque truename in order to get the
  ;; target name, and we cannot get it from the open stream if a link was
  ;; involved.
  ;;
  (when (and (member (send from-file :version) '(:newest :oldest))
	     (or (eq (send to-file :version) :wild)
		 (not (or (send to-file :name)
			  (send to-file :type)
			  (send to-file :version)))))
    (setq from-file (fs:link-opaque-truename from-file t)))
  (setq to-file (fs:merge-pathnames to-file from-file :newest))
  ;;wild-merging feature: copying a.b to c.* should give c.b.
  (when (send to-file :wild-p)
    (setq to-file (send from-file :translate-wild-pathname to-file from-file)))
  (when report-stream
    (format report-stream "~&Copying ~A to ~A (~A)" from-file to-file "Macintosh"))
  (let ((source-host (send (fs:parse-pathname from-file) :host))
	(dest-host (send (fs:parse-pathname to-file) :host)))
    (error-restart ((error) "Retry copying ~A to ~A." from-file to-file)
      (with-open-stream (stream-in
			  (apply #'open from-file
				 :direction :input
				 :element-type '(unsigned-byte 8)
				 (when (typep source-host 'mac-fs:emb-file-host)
				   ;; Local or remote (via NFILE) EMB hosts support both forks.
				   '(:super-image t))))
	(fs:with-copyf-create-directories (create-directories)
	  (with-open-stream
	      (stream-out
		(apply #'open to-file
			      :direction :output
			      :element-type '(unsigned-byte 8)
			      (when (typep dest-host 'mac-fs:emb-file-host)
				;; Have to have these at OPEN time or else the Desktop is
				;; not correct.  It does not work to change them later.
				(multiple-value-bind (file-type creator-signature)
				    (if (typep source-host 'mac-fs:emb-file-host)
					(let ((plist (cdr (send stream-in :properties))))
					  (values (getf plist :file-type)
						  (getf plist :creator-signature)))
					;; Need to do it the hard way from the actual data(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI").
0					(stack-let
					    ((header (make-array
						       128 :element-type '(unsigned-byte 8))))
					  (send stream-in :string-in "Premature EOF" header)
					  (send stream-in :rewind)
					  (values (copy-seq
						    (make-array 4 :element-type 'string-char
								:displaced-to header
								:displaced-index-offset 65))
						  (copy-seq
						    (make-array 4 :element-type 'string-char
								:displaced-to header
								:displaced-index-offset 69))
						  )))
				  (list :super-image t
					:file-type file-type
					:creator-signature creator-signature)))))
	    (stream-copy-until-eof stream-in stream-out)
	    (let ((creation-date (send-if-handles stream-in :creation-date)))
	      (when creation-date
		(fs:copy-author-and-creation-date stream-out nil creation-date report-stream)))
	    (close stream-out)
	    (setq to-file (or (send-if-handles stream-out :truename) to-file))
	    (when report-stream
	      (format report-stream "~&Copied ~A to ~A (~A)" from-file to-file "Macintosh"))))
	))))
