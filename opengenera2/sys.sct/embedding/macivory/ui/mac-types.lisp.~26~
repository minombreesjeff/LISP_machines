;;; -*- Mode: LISP; Syntax: LISP+C; Package: MACINTOSH-INTERNALS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Mac specific formats
#|
  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")define-mac-structure0 ((2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")name-and-options 0&body2 fields0)
 Same as 1define-octet-structure0, but with default to 16-bit words and :byte-swapped-8.

Mac specific structure element types
  1fixed-point0 ()
 16 bits of integer plus 16 bits of fraction.
  1fixed-point-4+120 ()
 4 bits of integer plus 12 bits of fraction.

Other useful Mac specific data routines
  1universal-time-from-mac-time0 (2mac-time0)
  1mac-time-from-universal-time0 (2ut0)
  1pack-bits0 (2from-array to-array 0&key2 (start1 0) end1 (bit-reverse-p t)0)
  1unpack-bits0 (2from-array to-array 0&key2 (start1 0) end1 end2 (bit-reverse-p t)0)
 Like PackBits and UnPackBits.  2to-array0 always has a fill pointer.  unpacking stops
with from sequence exhausted or to sequence filled to given mark.
|#

(define-octet-structure-conversion-field-type fixed-point integer-32
  :conversion fixed-point)

(defun fixed-point (long)
  (* long (scale-float 1.0 -16)))

(defun un-fixed-point (float)
  (round (ash float 16)))

(define-setf-method fixed-point (ref)
  (let ((store (gensym)))
    (values nil nil (list store) `(setf ,ref (un-fixed-point ,store)) ref)))

(define-octet-structure-conversion-field-type fixed-point-4+12 integer-16
  :conversion fixed-point-4+12)

(defun fixed-point-4+12 (word)
  (* word (scale-float 1.0 -12)))

(defun un-fixed-point-4+12 (float)
  (round (ash float 12)))

(define-setf-method fixed-point-4+12 (ref)
  (let ((store (gensym)))
    (values nil nil (list store) `(setf ,ref (un-fixed-point-4+12 ,store)) ref)))

(defprop define-mac-structure define-octet-structure zwei:definition-function-spec-type)

(defmacro define-mac-structure (name-and-options &body fields)
  (let ((name name-and-options)
	(options nil))
    (when (consp name-and-options)
      (setf `(,name . ,options) name-and-options))
    `(define-octet-structure (,name
			      ,@options
			      ;; Put these after so that user can override.
1			0      :alignment 2
			      :default-type integer-16
			      :access-type :byte-swapped-8)
       . ,fields)))

(defmacro define-mac-structure-and-fixed-length-remote-type ((name &rest options
								   &key c-name
								   &allow-other-keys)
							     &body fields)
  `(progn
     (define-mac-structure (,name . ,options)
       . ,fields)
     (define-remote-type ,name ()
       (:abbreviation-for
	 `(opaque-bytes (:length ,(octet-structure-total-size (,name .not-array. 0)))
			(:c ',#{,c-name *}))))))

(define-mac-structure (padded-pascal-string :c-name #{unsigned char[]})
  (length unsigned-byte)
  (* (vector unsigned-byte length))
  (* (padding unsigned-byte (mod length 2))))

(DEFINE-MAC-STRUCTURE (POINT :C-NAME '(|Point|) :EXPORT
                              (:STRUCTURE-NAME :ACCESSORS :CONSTRUCTOR))
         Y
         X)
(DEFINE-OCTET-STRUCTURE-FIELD-TYPE POINT NIL (ARRAY INDEX)
				   :DATA
				   `(MAKE-INCLUDED-OCTET-STRUCTURE POINT ,ARRAY ,INDEX))
(DEFINE-REMOTE-TYPE POINT NIL
  (:ABBREVIATION-FOR `(VECTOR CARDINAL-8 ,(OCTET-STRUCTURE-TOTAL-SIZE (POINT .X. 0))))
  (:C (:DECLARE (NAME) (LIST* '|Point| '* NAME))))


(defun set-point (array index x y)
  (setf (point-x array index) x
	(point-y array index) y))

(DEFINE-MAC-STRUCTURE (RECT :C-NAME '(|Rect|) :EXPORT
                              (:STRUCTURE-NAME :ACCESSORS :CONSTRUCTOR))
         (+ (TOP LEFT BOTTOM RIGHT) ((TOP-LEFT POINT) (BOTTOM-RIGHT POINT))))
(DEFINE-OCTET-STRUCTURE-FIELD-TYPE RECT NIL (ARRAY INDEX)
         :DATA
         `(MAKE-INCLUDED-OCTET-STRUCTURE RECT ,ARRAY ,INDEX))
(DEFINE-REMOTE-TYPE RECT NIL
         (:ABBREVIATION-FOR `(VECTOR CARDINAL-8 ,(OCTET-STRUCTURE-TOTAL-SIZE (RECT .X. 0))))
	 (:C (:DECLARE (NAME) (LIST* '|Rect| '* NAME))))


(defun set-rect (array index left top right bottom)
  (setf (rect-left array index) left
	(rect-top array index) top
	(rect-right array index) right
	(rect-bottom array index) bottom))


(define-mac-structure (polygon :c-name #{Polygon})
  (length cardinal-16)
  (bounds rect)
  (points (vector point (/ (- length 10) 4))))

(define-remote-type polygon ()
  (:abbreviation-for `(opaque-bytes (:c #{Polygon *} (:length (name) #{name ->polySize})))))

;--- region?

(define-remote-type region ()
  (:abbreviation-for `(opaque-bytes (:c #{Region *} (:length (name) #{name ->rgnSize})))))

(DEFINE-MAC-STRUCTURE (PATTERN :C-NAME '(RPC::|Pattern|) :EXPORT
                              (:STRUCTURE-NAME :ACCESSORS :CONSTRUCTOR))
         (BITS (VECTOR UNSIGNED-BYTE 8)))
(DEFINE-OCTET-STRUCTURE-FIELD-TYPE PATTERN NIL (ARRAY INDEX)
         :DATA
         `(MAKE-INCLUDED-OCTET-STRUCTURE PATTERN ,ARRAY ,INDEX))
(DEFINE-REMOTE-TYPE PATTERN NIL
         (:ABBREVIATION-FOR `(VECTOR CARDINAL-8 ,(OCTET-STRUCTURE-TOTAL-SIZE (PATTERN .X. 0))))
	 (:C (:DECLARE (NAME) (LIST* 'RPC::|Pattern| '* NAME))))

(define-mac-structure-and-fixed-length-remote-type (cursor :c-name #{Cursor})
  (hot-spot point)
  (bits (vector cardinal-16 16)))

(define-mac-structure-and-fixed-length-remote-type (rgb-color :c-name #{RGBColor})
  red green blue)

(define-mac-structure-and-fixed-length-remote-type (pen-state :c-name #{PenState}
							      :default-index 0)
  (pen-loc point)
  (pen-size point)
  (pen-mode integer-16)
  (pen-pattern pattern))

(define-octet-structure-field-type pascal-string-64 nil (array index)
  :size 64
  :data `(pascal-string-64-from-subarray ,array ,index))

(defun pascal-string-64-from-subarray (array index)
  (let ((len (aref array index)))
    (assert (< len 64))
    (let ((result (make-string len)))
      (dotimes (j len )
	(setf (aref result j) (code-char (aref array (+ j index 1)))))
      result)))

(defun set-pascal-string-64-from-subarray (array index value)
  (setq value (string value))
  (check-type value (vector string-char))
  (let ((len (length value)))
    (assert (< len 64))
    (setf (aref array index) len)
    (dotimes (j len) (setf (aref array (+ j index 1)) (char-code (aref value j)))))
  value)

(defsetf pascal-string-64-from-subarray set-pascal-string-64-from-subarray)

(defun ostype-from-subarray (array index)
  (let ((result (make-string 4)))
    (dotimes (j 4)
      (setf (aref result j) (code-char (aref array (+ j index)))))
    result))

(defun set-ostype-from-subarray (array index value)
  (setq value (string value))
  (check-type value (vector string-char 4))
  (dotimes (j 4) (setf (aref array (+ j index)) (char-code (aref value j))))
  value)

(defsetf ostype-from-subarray set-ostype-from-subarray)

;;; These are now in time-functions
;(defparameter *mac-time-origin* (time:parse-universal-time "1/1/04"))
;
;(defun universal-time-from-mac-time (mac-time)
;  (+ mac-time *mac-time-origin*))
;
;(defun mac-time-from-universal-time (ut)
;  (- ut *mac-time-origin*))

;;;; Bit packing, as per PackBits and UnPackBits, from TN #171.

;;; to-array's have a fill-pointer in all cases.
(defun pack-bits (from-array to-array &key (start1 0) end1 (bit-reverse-p t))
  (let ((different-open nil)
	(run-start 0)
	(index start1)
	(limit (or end1 (length from-array))))
    (macrolet ((force-different (stop)
		 `(when different-open
		    (vector-push-extend (- ,stop run-start 1) to-array)
		    (if bit-reverse-p
			(loop for index from run-start below ,stop do
			  (vector-push-extend (bit-reverse-8 (aref from-array index))
					      to-array))
			(vector-push-portion-extend to-array from-array run-start ,stop))
		    (setq different-open nil))))
      (loop while (< index limit)
	    do (let ((next-run-start index)
		     (first-byte (aref from-array index)))
		 (let ((next-limit (min limit (+ index 128))))
		   (loop do (incf index)
			 while (and (< index next-limit)
				    (= first-byte (aref from-array index)))))
		 (let ((run-length (- index next-run-start)))
		   (cond ((cond ((> run-length 2) t)
				((< run-length 2) nil)
				;; Enter as duplicate if nothing open, else just add two more.
				(t (not different-open)))
			  ;; A run
			  (force-different next-run-start)
			  (vector-push-extend (- 1 run-length) to-array)
			  (vector-push-extend (if bit-reverse-p
						  (bit-reverse-8 first-byte)
						  first-byte)
					      to-array))
			 (t
			  (when (> (+ (- index 1 run-start) run-length) 128)
			    (force-different next-run-start))
			  ;; A singleton
			  (unless different-open
			    (setq run-start next-run-start)
			    (setq different-open t)))))))
      (force-different index))
    index))

(defun unpack-bits (from-array to-array &key (start1 0) end1 end2 (bit-reverse-p t))
  (let ((limit (or end1 (length from-array)))
	(index start1))
    (loop while (and (< index limit)
		     (or (null end2) (< (fill-pointer to-array) end2)))
	  do (let ((count (aref from-array index)))
	       (macrolet ((next-byte ()
			    `(progn
			       (incf index)
			       (if bit-reverse-p
				   (bit-reverse-8 (aref from-array index))
				   (aref from-array index)))))
		 (if (> count 128)
		     ;; run
		     (let ((byte (next-byte)))
		       (dotimes (ignore (1+ (- 256 count)))
			 (vector-push-extend byte to-array)))
		     ;; different substring
		     (dotimes (ignore (1+ count))
		       (vector-push-extend (next-byte) to-array)))))
	     (incf index))
    index))
