;;; -*- Mode: LISP; Syntax: Common-lisp; Package: TCP; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(tcp:add-tcp-port-for-protocol :unix-rexec 512)
(tcp:add-tcp-port-for-protocol :unix-rsh 514)

(net:define-server :unix-rexec (:medium :byte-stream :flavor unix-rexec-server
				:stream (nil :translation :unix)))
(net:define-server :unix-rsh (:medium :byte-stream :flavor unix-rexec-server
				      :stream (nil :translation :unix)))

(defflavor unix-rexec-server () (neti:byte-stream-server))

(defmethod (:server-top-level unix-rexec-server) ()
  (let ((stream (send self :stream))
	(error-stream nil)
	(accepted nil))
    (labels ((parse-c-string ()
	       (stack-let ((string (make-array 20 :element-type 'string-char :fill-pointer 0)))
		 (loop as char = (read-char stream)
		       until (eql char (code-char 0))
		       do (vector-push-extend char string))
		 (copy-seq string)))
	     (reject (format &rest args)
	       (ignore-errors
		 (when (not accepted)
		   (write-char (code-char 1) stream))
		 (apply #'format stream format args)
		 (fresh-line stream)
		 (close stream)
		 (return-from :server-top-level nil))))
      (unwind-protect
	  (condition-case (error)
	       (progn
		 (let ((error-port (let ((string (parse-c-string)))
				     (if (= (length string) 0)
					 0
					 (parse-integer string :sign-allowed nil)))))
		   (if (plusp error-port)
		       (setq error-stream (tcp:open-tcp-stream (send stream :foreign-host)
							       error-port
							       (send stream :local-port)
							       :translation :unix))
		       (setq error-stream stream)))
		 (let ((user-name (parse-c-string))
		       (password (parse-c-string)))
		   (ignore user-name password))
		 (when (not (send self :trusted-p))
		   (reject "Host is not authorized to use this protocol."))
		 (case net:eval-server-on
		   ((nil)
		    (when (not (equal si:user-id ""))
		      (reject "This machine is in use by ~A" si:user-id)))
		   ((:notify)
		    (tv:notify nil "Use of ~A server by ~A"
			       :unix-rexec (neti:host-short-name (send self :foreign-host)))
		    (process-allow-schedule)))
		 (setq si:who-line-just-cold-booted-p nil)
		 (multiple-value-bind (form ptype)
		     (accept-from-string '((cp:command-or-form
					     :dispatch-mode :command-preferred))
					 (parse-c-string))
		   (write-char (code-char 0) stream)
		   (setf accepted t)
		   (let ((*standard-input* stream)
			 (*standard-output* stream)
			 (*query-io* stream)
			 (*error-output* stream)
			 (*debug-io* stream))
		     (eval (if (and ptype (dw:presentation-subtypep ptype 'cp:command))
			       (cp::convert-command-to-form form)
			       form))))
		 (when (not (eq stream error-stream))
		   (finish-output error-stream))
		 (finish-output stream))
	     (sys:remote-network-error )
	     (error
	       (reject "~A" error)))
	(unless (eq error-stream stream)
	  (close error-stream :abort t))))))

(compile-flavor-methods unix-rexec-server)



(defun make-rexec-stream (host command &rest keys &key &allow-other-keys)
  (fs:force-user-to-login)
  (apply #'net:invoke-service-on-host :unix-rexec host command keys))

(net:define-protocol :unix-rexec (:unix-rexec :byte-stream)
  (:invoke (service-access-path)
    (apply #'invoke-unix-rexec-service service-access-path
	   (neti:service-access-path-args service-access-path))))

(defun invoke-unix-rexec-service (service-access-path command
				  &key user-name password (translation :unix))
  (unless (and user-name password)
    (multiple-value-setq (user-name password)
      (tape:get-user-id-and-password (neti:service-access-path-host service-access-path))))
  (with-open-stream (stream (net:get-connection-for-service
			      service-access-path
			      :characters (not (null translation)) :translation translation))
    (let ((char-stream (if (null translation) (unix-character-stream stream) stream)))
      (write-char (code-char 0) char-stream)
      (write-string user-name char-stream)
      (write-char (code-char 0) char-stream)
      (write-string password char-stream)
      (write-char (code-char 0) char-stream)
      (write-string command char-stream)
      (write-char (code-char 0) char-stream)
      (force-output stream)
      (let ((error (char-code (read-char char-stream))))
	(if (zerop error)
	    (shiftf stream nil)
	    ;; Need to signal based on network-error.
	    (error "rexec error ~D: ~A" error
		   (with-output-to-string (msg)
		     (stream-copy-until-eof char-stream msg))))))))

(defun invoke-rexec (host command &key (destination *standard-output*) (source nil))
  (with-open-stream (stream (make-rexec-stream host command))
    (let ((process nil))
      (unwind-protect
	  (progn
	    (when source
	      (setq process (process-run-function "Rexec source"
			      #'(lambda ()
				  (stream-copy-until-eof source stream)
				  (force-output stream)
				  (setq process nil)))))
	    (stream-copy-until-eof stream destination))
	(when process
	  (process:kill process))))))

;;; Rough prototype of something potentially useful.  You pretty much have to use m-Complete
;;; to enter one of these.
(cp:define-command (com-execute-command :command-table "User"
					:provide-output-destination-keyword t)
    ((host 'net:host :prompt "on host")
     (command 'string :prompt "command" :documentation "the remote command")
     &key
     (source '((null-or-type
		 ((cp::cased-subtype
		    ("File" fs:pathname :prompt "file")
		    ("Buffer" zwei:buffer)
		    ("Stream" named-stream)
		    ("Command" cp:command))
		  :keyword-description "the source of input to the remote program")))
	     :default nil :provide-default t
	     :prompt "with input from source"))
   (flet ((do-it (source)
	    (invoke-rexec host command :destination *standard-output* :source source)))
     (cond ((null source)
	    (do-it nil))
	   ((consp source)
	    (let ((command-result (with-output-to-string (*standard-output*)
				    (apply (first command) (rest command)))))
	      ;; Yuck.
	      (with-input-from-string (stream command-result)
		(do-it stream))))
	   (t
	    (with-open-stream (stream (cp::open-destination-stream source :input))
	      (do-it stream))))))
