;;; -*- Mode:LISP; Package: CLI; Base:10; Lowercase: Yes; Syntax: Common-Lisp -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; RMT operations

(defconstant MTWEOF 0)
(defconstant MTFSF 1)
(defconstant MTBSF 2)
(defconstant MTFSR 3)
(defconstant MTBSR 4)
(defconstant MTREW 5)
(defconstant MTOFFL 6)
(defconstant MTNOP 7)
(defconstant MTRETEN 8)
(defconstant MTERASE 9)
(defconstant MTEOM 10)

;;; RMT device types

(defvar *rmt-device-types* (make-array 48))

(defstruct (rmt-device-type)
  name
  status
  )

(defun rmt-define-device-type (number name &rest args)
  (setf (aref *rmt-device-types* number)
	(apply #'make-rmt-device-type :name name args)))

(rmt-define-device-type #x01 "Unibus TS-11")
(rmt-define-device-type #x02 "Massbus TU77, etc.")
(rmt-define-device-type #x03 "Unibus TM-11" :status 'vax-unibus-tm-11-status)

(defun vax-unibus-tm-11-status (drive-status error)
  (declare (ignore drive-status))
  (let ((tape-status nil))
    (when (logtest #X+4000 error) (setf (getf tape-status :eof) t))
    (when (logtest #X+1000 error) (setf (getf tape-status :hard-error) t))
    (when (logtest #X+0400 error) (setf (getf tape-status :eot) t))
    (when (not (logtest #X+0040 error)) (setf (getf tape-status :offline) t))
    (when (logtest #X+0020 error) (setf (getf tape-status :bot) t))
    (when (logtest #X+0004 error) (setf (getf tape-status :write-lock) t))
    (when (logtest #X+0002 error) (setf (getf tape-status :rewinding) t))
    (when (logtest #X+AB98 error)
      (setf (getf tape-status :error)
	    (format nil "~16,4,'0R" (logand error #X+AB98))))
    tape-status))

(rmt-define-device-type #x04 "Massbus TU78")
(rmt-define-device-type #x05 "Unibus GCR")
(rmt-define-device-type #x06 "Multibus CPC")
(rmt-define-device-type #x07 "Multibus Archive")
(rmt-define-device-type #x08 "SCSI Archive")
(rmt-define-device-type #x09 "Xylogics 472")
(rmt-define-device-type #x0A "SCSI Sysgen")
(rmt-define-device-type #x0B "SCSI Emulex MT02")
(rmt-define-device-type #x0C "SCSI generic CCS")
(rmt-define-device-type #x10 "SCSI Sysgen (QIC-11 only)")
(rmt-define-device-type #x11 "SCSI Sysgen (QIC-11/24)")
(rmt-define-device-type #x12 "SCSI default CCS")
(rmt-define-device-type #x13 "SCSI Adaptec")
(rmt-define-device-type #x14 "SCSI Emulex MT02" :status 'sun-scsi-emulex-mt02-status)

(defun sun-scsi-emulex-mt02-status (drive-status error)
  (declare (ignore drive-status error))
  ;;(break)
  nil)

(rmt-define-device-type #x15 "SCSI Archive QIC-150")
(rmt-define-device-type #x16 "SCSI Wangtek QIC-150")
(rmt-define-device-type #x17 "SCSI ADSI")
(rmt-define-device-type #x18 "SCSI generic CCS")
(rmt-define-device-type #x19 "SCSI generic CCS")
(rmt-define-device-type #x1A "SCSI generic CCS")
(rmt-define-device-type #x1B "SCSI generic CCS")
(rmt-define-device-type #x1C "SCSI generic CCS")
(rmt-define-device-type #x1D "SCSI generic CCS")
(rmt-define-device-type #x1E "SCSI generic CCS")
(rmt-define-device-type #x1F "SCSI generic CCS")
(rmt-define-device-type #x20 "SCSI CDC")
(rmt-define-device-type #x21 "SCSI Fujitsu")
(rmt-define-device-type #x22 "SCSI Kennedy")
(rmt-define-device-type #x23 "SCSI HP")
(rmt-define-device-type #x24 "SCSI generic CCS")
(rmt-define-device-type #x25 "SCSI generic CCS")
(rmt-define-device-type #x26 "SCSI generic CCS")
(rmt-define-device-type #x27 "SCSI generic CCS")
(rmt-define-device-type #x28 "SCSI Exabyte")
(rmt-define-device-type #x29 "SCSI generic CCS")
(rmt-define-device-type #x2A "SCSI generic CCS")
(rmt-define-device-type #x2B "SCSI generic CCS")
(rmt-define-device-type #x2C "SCSI generic CCS")
(rmt-define-device-type #x2D "SCSI generic CCS")
(rmt-define-device-type #x2E "SCSI generic CCS")
(rmt-define-device-type #x2F "SCSI generic CCS")

(defflavor rmt-error (error tape:message) (tape:mount-error tape:tape-error)
  :initable-instance-variables)

(defmethod (make-instance rmt-error) (&key &allow-other-keys)
  (when tape:message (setf tape:message (substring tape:message 0))))

(defmethod (dbg:report rmt-error) (stream)
  (format stream "RMT error ~D: ~A" error tape:message))

(defflavor rmt-io-error (saved-status) (rmt-error tape:tape-device-error)
  :initable-instance-variables)

(defmethod (make-instance rmt-io-error) (&key &allow-other-keys)
  (setf saved-status (copy-list saved-status)))

(defmethod (dbg:report rmt-io-error) (stream)
  (format stream "RMT I/O error.  Status = ~A." saved-status))

(defflavor rmt-end-of-tape () (rmt-error tape:end-of-tape))

(defmethod (dbg:report rmt-end-of-tape) (stream)
  (format stream "RMT end of tape."))

(defparameter *rmt-trace-output* nil)
(defparameter *rmt-buffer-size* (* 4 65536))

(defflavor rmt-fixed-stream-mixin
	(device
	 (device-name nil) direction
	 stream char-stream
	 (physical-block-size 512)
	 (tape-status)
	 (error-flag)
	 (end-of-file)
	 (response (make-array 64 :element-type 'string-char :fill-pointer 0))
	 (read-pending nil)
	 (read-remaining 0)
	 (output-buffer)
	 (write-start 0)
	 (write-end 0)
	 (status-observable-p nil)
	 (beginning-of-tape-p nil)
	 (last-operation-was-a-write-p nil)
	 (reel nil)
	 (lock-reason nil)
	 (allow-short-input-records-p nil))
	()
  :abstract-flavor
  (:functions rmt-parse-response really-force-output)
  (:gettable-instance-variables (:unit device)
				reel
				(:tape-use-name lock-reason))
  (:init-keywords :stream :host :input-stream-mode
   :no-bot-prompt :norewind :buffer-size :no-read-ahead :density
   :cart-max-bytes-to-write :record-length
   :pad-char :minimum-record-length :minimum-record-length-granularity)
  (:initable-instance-variables
   stream (:unit device) direction reel lock-reason allow-short-input-records-p))

(defun rmt-trace (format-string &rest format-args)
  (when *rmt-trace-output*
    (apply #'format *rmt-trace-output* format-string format-args)))

(defun-in-flavor (rmt-string-line-in rmt-fixed-stream-mixin) ()
  (setf (fill-pointer response) 0)
  (loop for c = (read-byte stream)
	until (= c #o012)
	do (vector-push-extend (ascii-to-char c) response))
  (rmt-trace "~A~%" response)
  response)

(defun-in-flavor (rmt-read-status rmt-fixed-stream-mixin) ()
  (write-char #\S char-stream)
  (force-output stream)
  (rmt-trace "S")
  (stack-let* ((size (rmt-parse-response))
	       (status8 (make-array size :element-type '(unsigned-byte 8))))
    (send stream :string-in t status8)
    (let* ((bigender (zerop (aref status8 0)))
	   (drive-type (aref status8 (if bigender 1 0)))
	   (device-type (and (< drive-type (length *rmt-device-types*))
			     (aref *rmt-device-types* drive-type))))
      (when (null device-type)
	(error "Drive type #x~2,'0X is not supported." drive-type))
      (setf tape-status
	    (funcall (rmt-device-type-status device-type)
		     (if bigender
			 (neti:put-together-bytes :big status8 2 2)
			 (neti:put-together-bytes :little status8 2 2))
		     (if bigender
			 (neti:put-together-bytes :big status8 4 2)
			 (neti:put-together-bytes :little status8 4 2)))))))

(defun-in-flavor (rmt-parse-response rmt-fixed-stream-mixin) (&optional format &rest args)
  (setq beginning-of-tape-p nil)
  (when format
    (apply #'format char-stream format args)
    (force-output stream)
    (rmt-trace format args))
  (when (not (null read-pending))
    (send self :discard-current-record))
  (rmt-string-line-in)
  (ecase (aref response 0)
    (#\A (parse-integer response :start 1 :sign-allowed nil))
    (#\E (let ((error-number (parse-integer response :start 1 :sign-allowed nil)))
	   (setf error-flag t)
	   (rmt-string-line-in)
	   (cond ((and status-observable-p
		       (= error-number 5)
		       (not (null output-buffer)))
		  (rmt-read-status)
		  (if (getf tape-status :eot)
		      (error 'rmt-end-of-tape)
		      (error 'rmt-io-error :saved-status tape-status)))
		 (t
		  (error 'rmt-error :error error-number :message response)))))))

(defun-in-flavor (rmt-immediate-operation rmt-fixed-stream-mixin) (operation count)
  (setq last-operation-was-a-write-p nil)
  (rmt-parse-response "I~D~%~D~%" operation count))

(defwhopper (make-instance rmt-fixed-stream-mixin) (&rest args)
  (unwind-protect-case ()
      (lexpr-continue-whopper args)
    (:abort (close stream :abort t))))

(defun sun-host-p (host)
  (let ((machine-type (string (send host :machine-type))))
    (and (<= 3 (length machine-type))
	 (string-equal machine-type "SUN" :end1 3))))

(defun dec-axp-host-p (host)
  (let ((machine-type (send host :machine-type)))
    (cond ((not (member machine-type '(:dec-axp :dec-3000-400-axp :dec-3000-500-axp 
						:dec-alpha)))
	   (let* ((machine-type-text (string machine-type))
		  (dec-position (si:string-search-word "DEC" machine-type-text))
		  (axp-position (si:string-search-word "AXP" machine-type-text))
		  (alpha-position (si:string-search-word "ALPHA" machine-type-text)))
	     (and dec-position (or axp-position alpha-position)))))))

(defmethod (make-instance rmt-fixed-stream-mixin :after)
	   (&key no-bot-prompt norewind density &allow-other-keys)
  (declare (ignore no-bot-prompt))
  (setf char-stream (tcp::unix-character-stream stream))
  (setf device-name
	(let ((host (send stream :foreign-host)))
	  (cond ((sun-host-p host)
		 ;; sun drivers don't implement the read-status command, don't
		 ;; bother asking.
		 (setq status-observable-p nil)
		 (format nil "/dev/nr~a" device))
		((dec-axp-host-p host)
		 ;; dec osf/1 on the axp doesn't return any useful data in response
		 ;; to a read-status command so we won't bother to ask it.
		 (setq status-observable-p nil)
		 (unless (string-equal device "mt" :end1 2)
		   (error "Invalid device name ~A" device))
		 (let* ((len (string-length device))
			(density-code (aref device (1- len)))
			(unit (substring device 2 (1- len)))
			(unit-number (sys:parse-number unit 0 nil 10 t)))
		   (unless (and (member density-code '(#\a #\l #\m #\h) :test #'char-equal)
				(numberp unit-number)
				( 0 unit-number 31))
		     (error "Invalid device name ~A" device)))
		 (format nil "/dev/nr~a" device))
		(t
		 ;; assume that other implementations use the vax interpretation of
		 ;; the rmt status codes
		 (setq status-observable-p t)
		 (let* ((npos (1+ (zl:string-reverse-search-not-set "0123456789" device)))
			(unit (parse-integer device :start npos :sign-allowed nil)))
		   (check-type unit (integer 0 3))
		   (format nil "/dev/r~a~d"
			   (substring device 0 npos)
			   (+ unit
			      (if norewind 4 0)
			      (ecase density
				((800) 0)
				((1600) 8)
				((6250) 16)))))))))
  (send self :reopen-device)
  (send self :rewind)
  (send self :await-rewind)
  (setf output-buffer (make-array *rmt-buffer-size* :element-type '(unsigned-byte 8))))

(defmethod (tape:tape-stream-can-reverse-skip-p rmt-fixed-stream-mixin) () nil)

(defmethod (:tape-spec rmt-fixed-stream-mixin) ()
  (tape:make-tape-spec :host (send stream :foreign-host) :device device :reel reel))

(defmethod (:close rmt-fixed-stream-mixin) (&optional abort-p)
  (when stream
    (unless abort-p
      (send self :clear-input)
      (really-force-output)
      (when last-operation-was-a-write-p
	(send self :write-eof)
	(send self :write-eof))
      (format char-stream "C~A~%" device-name)	; Works for write
      (rmt-trace "C~A~%" device-name))
    (close stream :abort abort-p)
    (setf stream nil)))

(defmethod (:await-rewind rmt-fixed-stream-mixin) ())

(defmethod (:bot-p rmt-fixed-stream-mixin) ()
  (if (not status-observable-p)
      beginning-of-tape-p
    (rmt-read-status)
    (getf tape-status :bot)))

(defmethod (:reopen-device rmt-fixed-stream-mixin) ()
  (rmt-parse-response "O~A~%~D~%" device-name
		      (ecase direction (:input 0) (:output 1) (:bidirectional 2)))
  (setf end-of-file nil))

(defmethod (:ready-p rmt-fixed-stream-mixin) ()
  (if (not status-observable-p)
      t
    (rmt-read-status)
    (not (getf tape-status :offline))))

(defmethod (:check-ready rmt-fixed-stream-mixin) ()
  (loop with was-offline = nil
	for first-time = t then nil
	until (send self :ready-p)
	finally (return was-offline)
	do (setq was-offline t)
	(format *query-io* "~&Tape drive ~@[~A ~]is ~:[still ~]unready.~@
	   Type any character to retry when ready: " device first-time)
	(or (send *query-io* :send-if-handles :any-tyi)
	    (send *query-io* :tyi))
	(fresh-line *query-io*)))

(defmethod (:clear-eof rmt-fixed-stream-mixin) ()
  (send self :reopen-device))

(defmethod (:clear-error rmt-fixed-stream-mixin) ()
  (setf error-flag nil))

(defmethod (:clear-input rmt-fixed-stream-mixin) ()
  ;; This should really not be a no-op in the cases where the tape really
  ;; can handle tape marks.  However, somebody who knows more about
  ;; particular vendors' tape drives will have to figure out, for each type
  ;; of drive defined by RMT-DEFINE-DEVICE-TYPE, whether the tape can
  ;; handle tape marks (e.g., is a reel-to-reel tape instead of a cart tape).
  ;; For reel-to-reels, this should do a :discard-current-input-buffer
  ;; (see (flavor:method :clear-input tape:tape-input-stream-mixin)).
  nil)

(defmethod (:device-type rmt-fixed-stream-mixin) () :cart)

(defmethod (:eof rmt-fixed-stream-mixin) ()
  (send self :write-eof))

(defmethod (:record-status rmt-fixed-stream-mixin) (&optional (error-p t))
  (cond ((plusp read-remaining) read-remaining)
	(end-of-file :eof)
	(t (condition-case-if (not error-p) (error)
	       (progn
		 (setq last-operation-was-a-write-p nil)
		 (setf read-remaining (rmt-parse-response "R~D~%" *rmt-buffer-size*))
		 ;; Some remote tape implementations will return fewer than the
		 ;; requested number of bytes before reaching EOF as they return
		 ;; only one tape block at a time.  Other implementations will
		 ;; read the requested number of bytes even when more than one
		 ;; tape block is required to satisfy the request.  Thus, we
		 ;; have an I.V. which specifies the behavior of the RMT implementation
		 ;; that is set when the stream is created based on the type of
		 ;; host at the other end...
		 (when (if allow-short-input-records-p
			   (zerop read-remaining)
			   (< read-remaining *rmt-buffer-size*))
		   (setq end-of-file t))
		 (if (zerop read-remaining) :eof read-remaining))
	     (rmt-error error)))))

(defmethod (:rewind rmt-fixed-stream-mixin) ()
  (really-force-output)
  (when last-operation-was-a-write-p
    (send self :write-eof)
    (send self :write-eof))
  (rmt-immediate-operation MTREW 1)
  (rmt-parse-response "L0~%0~%")
  (setq beginning-of-tape-p t)
  (setq end-of-file nil))

(defmethod (:set-offline rmt-fixed-stream-mixin) ()
  (really-force-output)
  (rmt-immediate-operation MTOFFL 1))

(defmethod (:skip-file rmt-fixed-stream-mixin) (&optional (n 1))
  (if (and end-of-file (plusp n)) (decf n 1))
  (cond ((zerop n) (send self :clear-eof))
	((minusp n) (rmt-immediate-operation MTBSF (- n)))
	((plusp n) (rmt-immediate-operation MTFSF n)))
  (setq end-of-file nil))

(defmethod (:write-eof rmt-fixed-stream-mixin) ()
  (really-force-output)
  (rmt-immediate-operation MTWEOF 1))

(defmethod (:host rmt-fixed-stream-mixin) ()
  (send stream :foreign-host))

(defmethod (:host-name rmt-fixed-stream-mixin) ()
  (string (send stream :foreign-host)))

(defmethod (:write-error-status rmt-fixed-stream-mixin) (&optional ignore)
  (really-force-output))

(defmethod (:next-input-buffer rmt-fixed-stream-mixin) (&optional ignore)
  (if (integerp (send self :record-status))
      (multiple-value-bind (buffer start end)
	  (send stream :read-input-buffer)
	(if (< (+ start read-remaining) end)
	    (progn (setf read-pending (+ start read-remaining))
		   (setf read-remaining 0)
		   (values buffer start read-pending t))
	    (progn (setf read-pending end)
		   (decf read-remaining (- end start))
		   (values buffer start end nil))))
      (values nil nil nil t)))

(defmethod (:discard-input-buffer rmt-fixed-stream-mixin) (ignore)
  (send stream :advance-input-buffer read-pending)
  (setf read-pending nil))

(defun-in-flavor (dump-write-buffer rmt-fixed-stream-mixin) ()
  (when (not (= write-start write-end))
    ;; WARNING---OBS/NBS/UX MACHINE BLOCK SIZE WIRED IN HERE!
    ;; This tricky piece of arithmetic computes the number of 512-byte
    ;; (cart-tape) blocks specified by (- WRITE-END WRITE-START), then
    ;; rounds the number of blocks up to the next even number, then
    ;; finally multiplies by the block size again to get the number of bytes
    ;; to write.  Ordinarily, we wouldn't have to round up the number of
    ;; blocks to be even, if we were only concerned with reading the
    ;; resulting tape on UX or NBS drives, but OBS machines demand that
    ;; the minimum blocking factor be 1024, not 512, so we take pains to
    ;; pad everything we write to be a multiple of 1024 bytes long.
    ;; Failure to do this causes OBS machines to be unable to read
    ;; the otherwise-short blocks that make up LMFS backup dumper
    ;; PRELUDE or DIRECTORY sections.  --- Foner 30-Apr-90.
    (let* ((blocking (if (= physical-block-size 512)
			 1024
			 physical-block-size))
	   (bytes (* blocking
		     (ceiling (- write-end write-start)
			      blocking))))
      (format char-stream "W~D~%" bytes)
      (rmt-trace "W~D~%" bytes)
      (send stream :string-out output-buffer write-start (+ write-start bytes))
      (force-output stream)
      (setf write-start 0)
      (setf write-end 0)
      (setq last-operation-was-a-write-p t)
      (when (< (rmt-parse-response) bytes)
	(error 'rmt-end-of-tape)))))

(defun-in-flavor (really-force-output rmt-fixed-stream-mixin) ()
  (send self :force-output)
  (dump-write-buffer))

(defmethod (:new-output-buffer rmt-fixed-stream-mixin) ()
  (values output-buffer write-end (length output-buffer)))

(defmethod (:send-output-buffer rmt-fixed-stream-mixin) (record length explicit)
  (declare (ignore record explicit))
  ;;(unless explicit (ferror "Record is too long."))
  (setf write-end length)
  (when (= write-end (length output-buffer))
    (dump-write-buffer)))

(defmethod (:discard-output-buffer rmt-fixed-stream-mixin) (ignore))

(defflavor rmt-fixed-stream ()
	   (rmt-fixed-stream-mixin
	    si:unsigned-byte-8-with-character-io-mixin
	    si:buffered-binary-stream))

(defmethod (:discard-current-record rmt-fixed-stream-mixin) ()
  (send self :discard-current-input-buffer)
  (when (plusp read-remaining)
    (rmt-trace "X~D~%" read-remaining)
    (stack-let ((dummy (make-array 1024 :element-type '(unsigned-byte 8))))
      (multiple-value-bind (blocks bytes)
	  (truncate read-remaining 1024)
	(loop repeat blocks do
	  (send stream :string-in t dummy))
	(send stream :string-in t dummy 0 bytes)))
    (setf read-remaining 0)))

(compile-flavor-methods rmt-fixed-stream)

(tcp:add-tcp-port-for-protocol :unix-rexec 512)

(net:define-protocol :unix-rexec (:tape :byte-stream)
  (:desirability .8)
  (:invoke (path)
    (let ((dec-axp-p (dec-axp-host-p (neti:service-access-path-host path))))
      (apply #'make-instance 'rmt-fixed-stream
	     :stream (if dec-axp-p
			 (tcp::invoke-unix-rexec-service path "/usr/sbin/rmt" :translation nil)
			 (tcp::invoke-unix-rexec-service path "/etc/rmt" :translation nil))
	     :allow-short-input-records-p dec-axp-p
	     (neti:service-access-path-args path)))))

;;; Temporary kludge until CLOSE is fixed for Sun remote tape streams to not leave
;;; tape processes lying around.  See also sys:statice;file;darc;tertiary-storage.lisp.
(defmethod (sun-remote-tape-p rmt-fixed-stream-mixin) ()
  (sun-host-p (send stream :foreign-host)))
