;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: PRINT; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Lisp Machine interface to Unix LPD (line printer daemon)

0(defparameter (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*lpd-buffer-size*0 32768)

(defparameter 2*lpd-ack-timeout*0 (* 60 20))

(defflavor 2lpd-mixin
0	()
	(su:access-path-log-mixin)
  :abstract-flavor)

(defflavor 2lpd-ack-error
0	()
	(error)
  :abstract-flavor)

(defflavor 2lpd-ack-remote-error
0	(string
	 (printer nil))
	(lpd-ack-error)
  (:initable-instance-variables string printer)
  (:readable-instance-variables string)
  (:required-init-keywords :string))

(defmethod 2(dbg:report lpd-ack-remote-error)0 (stream)
  (format stream "Remote error: ~S" string)
  ;; As far as I know, LPD never gives any error apart from "" -Mly
  ;; Not true.  I have seen them in cases where there is no such printer,
  ;; When permission is denied due to security lossage, and
  ;; when it can't invert the ip address to a host name. -CJL
  (when (and printer (string-equal string ""))
    ;; Voluminous error message inspired by NFS
    (format stream
	    "~&Something is wrong with the remote printer or with its spooler.~@
		It may be that queuing to it is disabled~@
		or that some remote filesystem problem occurred.~@
		~\\CP:COMMAND\\ may tell you.~@
		The printer log file may, or may not, contain more information."
	    `(print::show-printer-status (,printer)))))

(compile-flavor-methods lpd-ack-remote-error)

(defflavor 2lpd-ack-unexpected-eof
0	()
	(lpd-ack-error))

(defmethod 2(dbg:report lpd-ack-unexpected-eof)0 (stream)
  (format stream "Unexpected end of file waiting for LPD acknowledgement"))

(compile-flavor-methods lpd-ack-unexpected-eof)

(defflavor 2lpd-ack-timeout
0	()
	(lpd-ack-error))

(defmethod 2(dbg:report lpd-ack-timeout)0 (stream)
  (format stream "Timed out waiting for LPD acknowledgement"))

(compile-flavor-methods lpd-ack-timeout)

(defun-in-flavor 2(lpd-get-ack lpd-mixin)0 (stream &optional printer)
  (force-output stream)
  (let ((increment *lpd-ack-timeout*)
	(initial-time (time:time)))
    (send stream :input-wait "LPD Ack"
	  #'(lambda (increment initial-time) (time:time-elapsed-p increment initial-time))
	  increment initial-time)
    (when (and (time:time-elapsed-p increment initial-time)
	       (not (listen stream)))
      (error 'lpd-ack-timeout)))
  (let ((ack (read-byte stream nil :eof)))
    (cond ((eq ack :eof)
	   (error 'lpd-ack-unexpected-eof))
	  ((not (zerop ack))
	   (loop with string = (make-array 80 :element-type 'string-char :fill-pointer 0)
		 with string-stream = (si:thin-character-stream stream)
		 initially
		   (vector-push-extend (code-char (aref si:*unix-translation-table* ack))
				       string)
		 for char = (read-char string-stream nil :eof)
		 until (or (eq char :eof) (eql char #\Return))
		 do (vector-push-extend char string)
		 finally
		   (error 'lpd-ack-remote-error
			  :string (string-trim '(#\return) string)
			  :printer printer))))))

(defun-in-flavor 2(lpd-printer-name lpd-mixin)0 (printer)
  (when (stringp printer) (setq printer (neti:find-object-named :printer printer)))
  (string-downcase (send (send printer :name) :string)))

(defun-in-flavor 2(lpd-host-name lpd-mixin)0 (host)
  (string-downcase (let ((primary-name (send host :primary-name)))
		     (if (stringp primary-name)
			 primary-name
			 (send primary-name :string)))))

;;; * Operations are:
;;; *	\1printer\n
;;; *		check the queue for jobs and print any found.
;;; *	\2printer\n
;;; *		receive a job from another machine and queue it.
;;; *	\3printer [users ...] [jobs ...]\n
;;; *		return the current state of the queue (short form).
;;; *	\4printer [users ...] [jobs ...]\n
;;; *		return the current state of the queue (long form).
;;; *	\5printer person [users ...] [jobs ...]\n
;;; *		remove jobs from the queue.
;;; *	\6printer\n
;;; *		enable queuing on the specified printer queue.
;;; *	\7printer\n
;;; *		disable queuing on the specified printer queue.
;;; *	\8printer\n
;;; *		return the queue status (queuing enabled or disabled).

(defparameter 2*lpd-command-alist*
0	      '(;; toplevel commands
		(:check-queue
		  #.(string-append (code-char #o001) "~A~%"))
		(:receive-job
		  #.(string-append (code-char #o002) "~A~%"))
		(:queue-short-form
		  #.(string-append (code-char #o003) "~A~@{ ~A~}~%"))
		(:queue-long-form 
		  #.(string-append (code-char #o004) "~A~@{ ~A~}~%"))
		(:remove-job 
		  #.(string-append (code-char #o005) "~A ~A~@{ ~A~}~%"))
		(:enable-queueing
		  #.(string-append (code-char #o006) "~A~%"))
		(:disable-queueing
		  #.(string-append (code-char #o007) "~A~%"))
		(:queue-status
		  #.(string-append (code-char #o008) "~A~%"))
		;; receive job commands
		(:abort-reception
		  #.(string-append (code-char #o001) "~%"))
		(:receive-cf-file
		  #.(string-append (code-char #o002) "~D ~A~%"))
		(:receive-df-file
		  #.(string-append (code-char #o003) "~D ~A~%"))
		))

(defun-in-flavor 2(lpd-send-command-noack lpd-mixin)0 (stream command &rest command-args)
  (let ((format-string (second (assoc command *lpd-command-alist*))))
    (unless format-string (error "Unknown UNIX LPD command: ~A" command))
    (apply #'format (si:thin-character-stream stream) format-string command-args)
    (force-output stream)))

(defun-in-flavor 2(lpd-send-command lpd-mixin)0 (stream command &rest command-args)
  (apply #'lpd-send-command-noack stream command command-args)
  (lpd-get-ack stream))

(defvar 2*lpd-privileged-tcp-port-counter*0 768)

(defun-in-flavor 2(lpd-generate-privileged-port-number lpd-mixin)0 ()
  (loop for candidate =
	    (process:with-no-other-processes
	      (setq *lpd-privileged-tcp-port-counter*
		    (+ 768 (mod (1+ *lpd-privileged-tcp-port-counter*) 256))))
	unless (or (tcp:tcp-port-protocol-name candidate)
		   (process:with-no-other-processes
		     (loop for existing-tcb in tcp::*tcb-list*
			   thereis (= candidate (tcp::tcb-local-port existing-tcb)))))
	  thereis candidate))

(defun-in-flavor 2(lpd-with-connection-internal lpd-mixin)0 (host port function)
  (declare (sys:downward-funarg function))
  (let ((stream nil))
    (unwind-protect-case (aborted-p)
	(progn
	  (setq stream
		(tcp:open-tcp-stream host
				     (tcp:protocol-name-tcp-port port)
				     (lpd-generate-privileged-port-number)
				     :direction :io
				     :characters nil
				     :translation :unix))
	  (funcall function stream))
      (:always
	(when stream (close stream :abort aborted-p))))))

(defun-in-flavor 2(lpd-with-lpd-connection-internal lpd-mixin)0 (host function)
  (declare (sys:downward-funarg function))
  (lpd-with-connection-internal host :unix-lpd function))

(defmacro-in-flavor 2(with-lpd-connection lpd-mixin)
0		    ((stream host) &body body)
  `(lpd-with-lpd-connection-internal ,host #'(lambda (,stream) ,@body)))

(zwei:defindentation (with-lpd-connection 1 1))

(defun-in-flavor 2(lpd-response-as-a-string lpd-mixin)0 (stream)
  (string-trim
    '(#\return)
    (with-output-to-string (string-stream)
      (stream-copy-until-eof (si:thin-character-stream stream) string-stream))))

(defun-in-flavor 2(lpd-error-restart-internal lpd-mixin)
0		 (protocol operation host printer entry function)
  (declare (sys:downward-funarg function))
  (error-restart ((error) "Retry ~A ~A for host ~A printer ~S~@[ entry ~S~]"
		  protocol operation host printer entry)
    (funcall function)))

(defmacro-in-flavor 2(lpd-error-restart lpd-mixin)
0		    ((protocol operation host printer &optional entry) &body body)
  `(lpd-error-restart-internal
     ,protocol ,operation ,host ,printer ,entry
     #'(lambda () ,@body)))
  
(zwei:defindentation (lpd-error-restart 1 1))

(defmacro-in-flavor 2(lpd-function-unimplemented lpd-mixin)0 (operation)
  `(error "~S service using the ~S protocol does not implement the ~S operation."
	  (lpd-service-name)
	  ':unix-lpd
	  ',operation))

(defresource 2lpd-buffer0 ()
  :constructor (make-array *lpd-buffer-size*
			   :area sys:permanent-storage-area
			   :element-type '(unsigned-byte 8)
			   :fill-pointer 0)
  :free-list-size 4096
  :initial-copies 0
  :deinitializer (setf (fill-pointer object) 0)
  :clear-for-gc :full-gc)

(defflavor 2lpd-hardcopy-stream-mixin
0	((buffers nil)
	 sap
	 jobnum
	 (length 0))
	()
  (:initable-instance-variables sap)
  (:required-init-keywords :sap)
  (:required-flavors lpd-mixin)
  :abstract-flavor)

(defun-in-flavor 2(lpd-service-name lpd-hardcopy-stream-mixin)0 ()
  :hardcopy)
						
(defvar 2*lpd-jobnum-counter*0 999)

(defun-in-flavor 2(lpd-generate-jobnum lpd-hardcopy-stream-mixin)0 ()
  (without-interrupts
    (let ((new-jobnum-counter (mod (1+ *lpd-jobnum-counter*) 1000)))
      (setq *lpd-jobnum-counter*
	    (if (zerop new-jobnum-counter)
		(random 900)
	      new-jobnum-counter)))))

(defun-in-flavor 2(lpd-stream-printer lpd-hardcopy-stream-mixin)0 ()
  (first (neti:service-access-path-args sap)))  

(defun-in-flavor 2(lpd-send-hardcopy-job lpd-hardcopy-stream-mixin)0 (function)
  (declare (sys:downward-funarg function))
  (let* ((host (neti:service-access-path-host sap))
	 (printer (lpd-stream-printer))
	 (printer-name (lpd-printer-name printer)))
    (lpd-error-restart (:unix-lpd :hardcopy host printer-name)
      (with-lpd-connection (stream (neti:service-access-path-host sap))
	(lpd-send-command-noack stream :receive-job printer-name)
	(lpd-get-ack stream printer)
	(funcall function stream)))))

(defmacro-in-flavor 2(lpd-sending-hardcopy-job lpd-hardcopy-stream-mixin)0 ((stream) &body body)
  `(lpd-send-hardcopy-job #'(lambda (,stream) ,@body)))

(zwei:defindentation (lpd-sending-hardcopy-job 1 1))

(defmethod 2(make-instance lpd-hardcopy-stream-mixin)0 (&rest init-options)
  (declare (ignore init-options))
  (setq jobnum (lpd-generate-jobnum))
  ;; Just to check if we'll get any errors
  (lpd-sending-hardcopy-job (stream)
    stream))

(defmethod 2(:new-output-buffer lpd-hardcopy-stream-mixin)0 ()
  (declare (values array start end))
  (let ((array (if (and (first buffers)
			(< (fill-pointer (first buffers))
			   (array-total-size (first buffers))))
		   (first buffers)
		   (allocate-resource 'lpd-buffer))))
    (values array (fill-pointer array) (array-total-size array))))

(defmethod 2(:send-output-buffer lpd-hardcopy-stream-mixin)0 (array end end-of-record)
  (declare (ignore end-of-record))
  (incf length (- end (fill-pointer array)))
  (setf (fill-pointer array) end)
  (unless (eq array (first buffers))
    (push array buffers)))

(defmethod 2(:discard-output-buffer lpd-hardcopy-stream-mixin)0 (array)
  (unless (eq array (first buffers))
    (deallocate-resource 'lpd-buffer array)))

(defun-in-flavor 2(lpd-file-name lpd-hardcopy-stream-mixin)0 (char)
  (format nil "~CfA~3,'0D~A" char jobnum (lpd-host-name net:*local-host*)))

(defun-in-flavor 2(lpd-send-df-file lpd-hardcopy-stream-mixin)0 (stream)
  (lpd-send-command stream :receive-df-file length (lpd-file-name #\d))
  (loop for buffer in (reverse buffers)	do (send stream :string-out buffer))
  (write-byte 0 stream)
  (lpd-get-ack stream (lpd-stream-printer)))

(defun-in-flavor 2(lpd-file-code-char lpd-hardcopy-stream-mixin)0 ()
  (let ((val (send-if-handles (first (neti:service-access-path-args sap))
			      :user-get :lpd-file-code-char)))
    (if val (character val)
      #\f)))

;;;	 *      file format -- first character in the line is a command
;;;	 *      rest of the line is the argument.
;;;	 *      valid commands are:
;;;	 *
;;;	 *		J -- "job name" on banner page
;;;	 *		C -- "class name" on banner page
;;;	 *              L -- "literal" user's name to print on banner
;;;	 *		T -- "title" for pr
;;;	 *		H -- "host name" of machine where lpr was done
;;;	 *              P -- "person" user's login name
;;;	 *              I -- "indent" amount to indent output
;;;	 *              f -- "file name" name of text file to print
;;;	 *		l -- "file name" text file with control chars
;;;	 *		p -- "file name" text file to print with pr(1)
;;;	 *		t -- "file name" troff(1) file to print
;;;	 *		n -- "file name" ditroff(1) file to print
;;;	 *		d -- "file name" dvi file to print
;;;	 *		g -- "file name" plot(1G) file to print
;;;	 *		v -- "file name" plain raster file to print
;;;	 *		c -- "file name" cifplot file to print
;;;	 *		1 -- "R font file" for troff
;;;	 *		2 -- "I font file" for troff
;;;	 *		3 -- "B font file" for troff
;;;	 *		4 -- "S font file" for troff
;;;	 *		N -- "name" of file (used by lpq)
;;;	 *              U -- "unlink" name of file to remove
;;;	 *                    (after we print it. (Pass 2 only)).
;;;	 *		M -- "mail" to user when done printing
;;;	 *

(defun-in-flavor 2(lpd-cf-file-string lpd-hardcopy-stream-mixin)0 ()
  (with-output-to-string (stream)
    (let ((options (second (neti:service-access-path-args sap))))
      (format stream "H~A~%" (lpd-host-name net:*local-host*))
      (format stream "P~A~%"
	      (or (getf options :requestor-user-id)
		  sys:user-id))
      (format stream "J~A~%"
	      (or (getf options :title)
		  "Some Random Printout")) 
      (format stream "C~(~A~)~%"
	      (or (getf options :requestor-host)
		  (lpd-host-name net:*local-host*)))
      (when (getf options :print-cover-pages t)
	(format stream "L~A~%"
		(or (getf options :recipient)
		    (send si:*user* :personal-name-first-name-first))))
      (format stream "~C~A~%"
	      (lpd-file-code-char)
	      (lpd-file-name #\d))
      (format stream "U~A~%"
	      (lpd-file-name #\d))
      (format stream "N~A~%"
	      (or (getf options :title)
		  "Some Random Printout")))))

(defun-in-flavor 2(lpd-send-cf-file lpd-hardcopy-stream-mixin)0 (stream)
  (let ((string (lpd-cf-file-string)))
    (lpd-send-command stream :receive-cf-file (string-length string) (lpd-file-name #\c))
    (send (si:thin-character-stream stream) :string-out string)
    (write-byte 0 stream)
    (lpd-get-ack stream (lpd-stream-printer))))

(defwhopper 2(:close lpd-hardcopy-stream-mixin)0 (&optional abort)
  (unwind-protect
      (progn
	(continue-whopper abort)
	(unless abort
	  (catch-error-restart (sys:abort "Abort ~A ~A for host ~A printer ~S"
					  :unix-lpd :hardcopy
					  (neti:service-access-path-host sap)
					  (lpd-printer-name (lpd-stream-printer)))
	    (sys:with-aborts-enabled (si:close-open-stream unwind-protect)
	      (lpd-sending-hardcopy-job (stream)
		(lpd-send-df-file stream)
		(lpd-send-cf-file stream))))))
    (loop while buffers
	  do
      (deallocate-resource 'lpd-buffer (pop buffers)))))

(defflavor 2lpd-hardcopy-stream
0	()
	(lpd-hardcopy-stream-mixin
	 lpd-mixin
	 tcp::unsigned-byte-8-with-unix-character-io-mixin
	 si:unsigned-byte-8-stream
	 si:buffered-output-binary-stream)
  )

(compile-flavor-methods lpd-hardcopy-stream)

(tcp:add-tcp-port-for-protocol :unix-lpd 515)

(net:define-protocol 2:unix-lpd0 (:hardcopy :tcp)
  (:desirability 0.3)
  (:invoke (sap) (make-instance 'lpd-hardcopy-stream :sap sap)))

(defflavor 2lpd-printer-queue-control-stream-mixin
0	(sap)
	()
  (:initable-instance-variables sap)
  (:required-init-keywords :sap)
  (:required-flavors lpd-mixin)
  :abstract-flavor)

(defun-in-flavor 2(lpd-service-name lpd-printer-queue-control-stream-mixin)0 ()
  :printer-queue-control)

(defmethod 2(queue-create-entry lpd-printer-queue-control-stream-mixin)
0	   (parameters)
  (declare (values qid)
	   (ignore parameters))
  (lpd-function-unimplemented queue-create-entry))

(defmethod 2(queue-entry-create-data-channel lpd-printer-queue-control-stream-mixin)
0	   ()
  (lpd-function-unimplemented queue-entry-create-data-channel))

(defmethod 2(queue-entry-set-data-channel-request lpd-printer-queue-control-stream-mixin)
0	   (data-channel qid)
  (declare (ignore data-channel qid))
  (lpd-function-unimplemented queue-entry-set-data-channel-request))

(defun-in-flavor 2(lpd-tokenize-lpq-line lpd-printer-queue-control-stream-mixin)0 (line)
  (loop with set = '(#\sp #\return #\tab #\line #\,)
	for lastpos first 0 then pos
	while lastpos
	for startpos = (string-search-not-set set line :start lastpos)
	while startpos
	for pos = (string-search-set set line :start startpos)
	collect (substring line startpos pos)))

(defmethod 2(queue-query lpd-printer-queue-control-stream-mixin)
0	   (request-pattern response-pattern)
  (declare (values request-descriptions unimplemented-responses)
	   (ignore request-pattern response-pattern))
  (let* ((host (neti:service-access-path-host sap))
	 (printer (lpd-printer-name (first (neti:service-access-path-args sap))))
	 (input-string
	   (lpd-error-restart (:unix-lpd 'queue-query host printer)
	     (with-lpd-connection (stream host)
	       (lpd-send-command-noack stream :queue-short-form printer)
	       (lpd-response-as-a-string stream))))
	 (summary-string (make-array (string-length input-string)
				     :element-type 'string-char
				     :fill-pointer 0))
	 (queue-entries nil))
    (with-input-from-string (stream input-string)
      ;; Gross assumption #1:  First snarf all the standard header stuff,
      ;; until we think we recognize something by looking for a line where the
      ;; first four words are "Rank" "Owner" "Job" and "Files" respectively.
      (loop for line = (read-line stream nil :eof)
	    until (eq line :eof)
	    for tokens = (lpd-tokenize-lpq-line line)
	    until (and (> (list-length tokens) 4)
		       (string= (first tokens) "Rank")
		       (string= (second tokens) "Owner")
		       (string= (third tokens) "Job")
		       (string= (fourth tokens) "Files"))
	    do (string-nconc summary-string line #\return))
      ;; Gross Assumption #2:  Now I assume we are now looking at queue
      ;; entries.  Assume second token in line is the owner, the third is
      ;; the job number, and the fourth to last is the name.
      (loop for line = (read-line stream nil :eof)
	    until (eq line :eof)
	    for tokens = (lpd-tokenize-lpq-line line)
	    while (> (list-length tokens) 4)
	    collect
	      (list (third tokens)
		    :recipient (second tokens)
		    :title (format nil "~{~A ~}" (nthcdr 3 tokens))
		    :copies 1
		    :state (if (or (string= (car tokens) "active")
				   (and (> (string-length (car tokens)) 1)
					(char= (aref (car tokens) 0) #\*)))
			       :being-printed
			     :waiting-to-be-printed))
	      into entries
	    finally (setq queue-entries entries)
		    (when (stringp line) (string-nconc summary-string line #\return)))
      ;; If there is anything left, then add it to the summary
      (loop for line = (read-line stream nil :eof)
	    until (eq line :eof)
	    do (string-nconc summary-string line #\return))
      ;; Make sure the summary ends with a blank line if there is a summary
      ;; and there are entries in the queue.
      (unless (or (null queue-entries)
		  (< (string-length summary-string) 2)
		  (and (char= (aref summary-string (- (string-length summary-string) 1))
			      #\return)
		       (char= (aref summary-string (- (string-length summary-string) 2))
			      #\return)))
	(string-nconc summary-string #\return))
      (values (cons (ncons summary-string) queue-entries) '(:queue-entry-time)))))

(defmethod 2(queue-modify-entry lpd-printer-queue-control-stream-mixin)
0	   (qid parameter value)
  (declare (ignore qid parameter value))
  (lpd-function-unimplemented queue-modify-entry))

(defmethod 2(queue-delete-entry lpd-printer-queue-control-stream-mixin)
0	   (qid)
  (let ((host (neti:service-access-path-host sap))
	(printer (lpd-printer-name (first (neti:service-access-path-args sap)))))
    (condition-case (error)
	 (lpd-error-restart (:unix-lpd 'queue-delete-entry host printer qid)
	   (with-lpd-connection (stream host)
	     (lpd-send-command stream :remove-job printer sys:user-id qid)))
       (lpd-ack-remote-error
	 (format t "~&~A~%" (lpd-ack-remote-error-string error))))))

(defmethod 2(queue-query-policies lpd-printer-queue-control-stream-mixin)
0	   ()
  )

(defmethod 2(queue-modify-policy lpd-printer-queue-control-stream-mixin)
0	   (constraint value rejection)
  (declare (ignore constraint value rejection))
  (lpd-function-unimplemented queue-modify-policy))

(defflavor 2lpd-printer-queue-control-stream
0	()
	(lpd-printer-queue-control-stream-mixin
	 lpd-mixin)
  )

(compile-flavor-methods lpd-printer-queue-control-stream)

(net:define-protocol 2:unix-lpd0 (:printer-queue-control :tcp)
  (:desirability 0.3)
  (:invoke (sap) (make-instance 'lpd-printer-queue-control-stream :sap sap)))

(defflavor 2lpd-printer-control-stream-mixin
0	(sap)
	()
  (:initable-instance-variables sap)
  (:required-init-keywords :sap)
  (:required-flavors lpd-mixin)
  :abstract-flavor)

(defun-in-flavor 2(lpd-service-name lpd-printer-control-stream-mixin)0 ()
  :printer-control)

(defmethod 2(printer-query-characteristics lpd-printer-control-stream-mixin)
0	   ()
  (lpd-function-unimplemented printer-query-characteristics))

(defmethod 2(printer-modify-characteristic lpd-printer-control-stream-mixin)
0	   (characteristic value)
  (declare (ignore characteristic value)))

(defmethod 2(printer-restart lpd-printer-control-stream-mixin)
0	   (printer qid extent page-spec)
  (declare (ignore printer qid extent page-spec))
  (lpd-function-unimplemented printer-restart))

(defmethod 2(printer-suspend lpd-printer-control-stream-mixin)
0	   (printer qid urgency extent page-spec disposition reason)
  (declare (ignore printer qid urgency extent page-spec disposition reason))
  (lpd-function-unimplemented printer-suspend))

(defmethod 2(printer-resume lpd-printer-control-stream-mixin)
0	   (printer)
  (declare (ignore printer))
  (lpd-function-unimplemented printer-resume))

(defmethod 2(printer-reset lpd-printer-control-stream-mixin)
0	   (printer qid disposition)
  (declare (ignore printer qid disposition))
  (lpd-function-unimplemented printer-reset))

(defflavor 2lpd-printer-control-stream
0	()
	(lpd-printer-control-stream-mixin
	 lpd-mixin))

(compile-flavor-methods lpd-printer-control-stream)

(net:define-protocol 2:unix-lpd0 (:printer-control :tcp)
  (:desirability 0.3)
  (:invoke (sap) (make-instance 'lpd-printer-control-stream :sap sap)))
