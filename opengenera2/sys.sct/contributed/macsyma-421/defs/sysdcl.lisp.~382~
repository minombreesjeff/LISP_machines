;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10 -*-
;;;>
;;;> **************************************************************************
;;;> The software, data, and information contained herein are proprietary to, 
;;;> and comprise valuable trade secrets of, Macsyma Inc., which intends to 
;;;> keep such software, data, and information confidential and to preserve 
;;;> them as trade secrets.  They are given in confidence by Macsyma Inc. 
;;;> pursuant to a written license agreement, and may be used, copied, 
;;;> transmitted, and stored only in accordance with the terms of such license.
;;;>
;;;> ** Copyright (c) 1982 - 1997 Macsyma Inc.  All rights reserved. 
;;;> ** Portions copyright (c) 1982 Massachusetts Institute of Technology.
;;;> **                        All rights reserved.
;;;>
;;;> Common Lisp Macsyma, PC Macsyma, Lisp Machine Macsyma, and 
;;;> CL-Macsyma are trademarks of Macsyma Inc.
;;;>
;;;> Macsyma (R) and Macsyma Newsletter (R) are registered 
;;;> trademarks of Macsyma Inc.
;;;>
;;;> All product names used herein which are not the trademarks of
;;;> Macsyma Inc. are the trademarks of their respective owners.
;;;>
;;;> Type  describe(trade_secret);  in Macsyma to see other proprietary 
;;;> copyrights and trademarks. 
;;;> 
;;;> Type  describe(acknowledgments);  in Macsyma to see acknowledgments 
;;;> and copyright notices for contributed software. 
;;;> 
;;;> RESTRICTED RIGHTS LEGEND
;;;> Use, duplication, and disclosure by the Government are subject to 
;;;> restrictions as set forth in subdivision (c)(1)(ii) of the Rights in 
;;;> Technical Data and Computer Software Clause at DFAR 52.227-7013.
;;;> 
;;;>      Macsyma Inc.
;;;>      20 Academy Street
;;;>      Suite 201
;;;>      Arlington, Massachusetts 02174
;;;>      United States of America
;;;>      617-646-4550
;;;> 
;;;> **************************************************************************
;;;>
;;;
;;; SYSDCL: The Define-System for Macsyma.
;;;


(in-package :user)
(eval-when (compile load eval)
  #+lispm
  (progn
    (pushnew :rel7   *features*)
    (pushnew :rel7-2 *features*)
    (pushnew :rel7-4 *features*))
  #+(and vax vms)
  (pushnew :dec *features*)
  #+akcl
  (progn
    (pushnew :ibcl *features*)
    #+sparc (pushnew :sun4 *features*)
    )
  )


#+akcl
(setq compiler::*fasd-data* :system-p)

(defmacro define-system (name features &rest modules)
  #+lispm (declare (zwei::indentation 1 1))
  #+lispm `(defsystem ,name ,features
	     (:serial . ,(loop for (key . files) in modules when (neq key :autoload) append files)))
  #-lispm (let (res (default (getf features :default-pathname)))
	    (labels ((mpdef (x) (macsyma-pathnames x default)))
	      (dolist (module modules)
		(typecase module
		  (string (push `(:use ,(mpdef module)) res))
		  (list
		    (let (key)
		      (setf key (pop module))
		      (push `(,key . ,(mapcar #'mpdef module)) res))))))
	    name
	    `(setf *macsyma-files* ',(reverse res))))


(defvar *macsyma-files* nil
  "list of files in system")
(defvar *macsyma-host*
	#-lispm "mac419"
	#+lispm "macsyma" ; dont ask...
  "cloe")

(defvar *pathname-template* 
	;;; (format nil template host dlist name)
	#+lispm "~A:~{~A;~}~A" ; lispm never called...
	#+cloe  "~A\\~{~A\\~}~A"
	#+vms   "~A:[~{~A.~}]~A"
	#+unix  "~A/~{~A/~}~A"
	"how to make a filename...")

(defvar *pathname-type-defaults*
      #+imach '("lisp" "ibin")
      #+cloe  '("lsp"  "fas")
      #+(and unix (not akcl))  '("l"    "o")
      #+(and unix akcl) `("lsp" ,si::*object-file-type*)
      #-(or imach cloe unix) '("lisp" "bin")
      "default filename extensions")

(defvar *force-compile* nil)
(defvar *start-on-name* nil)

(defun compile-p (x)
  (or *force-compile*
      (and (equal *start-on-name* (pathname-name (first x)))
	   (setq *force-compile* t))
      (multiple-value-bind (lisp bin) (values-list x)
	(or (null (probe-file bin))
	    (> (or (file-write-date lisp) 0)
	       (or (file-write-date bin) -1))))))

(defun macsyma-pathname-parts (line &optional (word-char? #'alpha-char-p))
  (let ((in-word 0) to res)
    (setf to (length line))
    (dotimes (i (1+ to))
      (if (or (= i to)
	      (not (funcall word-char? (aref line i))))
	  (when (and in-word
		     (> (- i in-word) 0))
	    (push (subseq line in-word i) res)
	    (setf in-word (or (= i to) nil)))
	  (unless in-word
	    (setf in-word i))))
    (values (reverse res) in-word)))

(defun macsyma-pathnames (string &optional default (template *pathname-template*))
  (setf string  (parse-macsyma-pathname string)
	default (parse-macsyma-pathname default))
  (dotimes (i (length string))
    (and default
	 (elt default i)
	 (null (elt string i))
	 (setf (elt string i)
	       (elt default i))))
  (setf template
	(pathname
	  (apply #'format nil template string)))
  (multiple-value-bind (lisp bin) (values-list *pathname-type-defaults*)
    (list (merge-pathnames template (make-pathname :type lisp))
	  (merge-pathnames template (make-pathname :type bin)))))

(defun parse-macsyma-pathname (string)
  (when string
    (labels ((pathname-ch (x)
	       (or (alpha-char-p x)
		   (digit-char-p x)
		   (member x '(#\- #\_)))))
      (let (host name)
	(multiple-value-bind (list name-p) (macsyma-pathname-parts string #'pathname-ch)
	  (when (find #\: string)
	    (setf host (pop list)))
	  (when name-p
	    (setf name (elt list (1- (length list)))
		  list (subseq list 0 (1- (length list)))))
	  (list #+cloe *macsyma-host*
		#-cloe host
		list
		name))))))

(defun system-operation (&optional (ops '(:compile)) (files *macsyma-files*))
  (dolist (entry files)
    (let (key)
      (setf key (pop entry))
      (when (not (eq key :autoload))
	(dolist (pair entry)
	  (multiple-value-bind (lisp bin) (values-list pair)
	    (dolist (op ops)
	      (case op
		#+akcl
		(:akcl-init
		  (format t "  init_or_load(init_~a, \"o/~a.o\");~%"
			  (pathname-name bin)
			  (pathname-name bin)))
		(:akcl-make
		  (format t "$(MACOBJDIR)/~a.o " (pathname-name bin)))
		(:print
		  (format t "~% ~S ~S" lisp bin))
		(:compile
		  (when (compile-p pair)
		    #-lispm (proclaim '(optimize (safety 0) (space 2) (speed 3)))
		    #-akcl (compile-file lisp :output-file bin)
		    #+akcl (let ((compiler::*cc-optimize*
				   (if (member (pathname-name lisp)
					       (or
					         #+SOLARIS2 '("rat3a" "spgcd" "displa"
							      "suprv" "mlisp" "inmis" "defint")
						 #+AIX '("nrat4" "risch")
						 '())
					       :test #'equal)
				       (or #+SOLARIS2 "-O1"
					   #+AIX ""
					   "-O")
				       (or #+SOLARIS2 "-O" 
					   #+AIX "-O2"
					   "-O"))))
			     (format t "~&~A: ~A~%" lisp compiler::*cc-optimize*)
			     (compile-file lisp :output-file bin 
					   :system-p t
					   :c-file t :data-file t :h-file t))))
		(:load
		  (or #+lispm
		      (zwei:file-loaded-truename (send bin :new-pathname :version :newest))
		      (load bin)))
		(:delete
		  (when (and bin
			     (probe-file bin))
		    (delete-file bin nil)))))))))))

(defun compile-macsyma ()
  (system-operation '(:compile :load)))

(defun load-macsyma ()
  (system-operation '(:load)))

(defun delete-fasls ()
  (system-operation '(:delete)))


#+akcl
(defun akcl-init (&optional (file "inits"))
  (with-open-file (*standard-output* file :direction :output)
    (system-operation '(:akcl-init))))

(define-system :macsyma
  (:pretty-name "Macsyma"
   :maintaining-sites (:macsyma-inc)
   :default-pathname  "macsyma:defs;"
   :journal-directory "macsyma:patch;" ; be explicit
   :patchable t)
  (:use "defs; pkgdcl")				;package declaration
  (:use "base; let")				;destructuring let
  (:use "base; definers")			;defsubst, defdefmacro, defopt, etc.
  #+(or cloe akcl)
  (:use "winfe; mfe"				;MFE interface support
        "winfe; mfestr")
  #+vax
  (:use "base; vaxfix")
  #+lispm
  (:use "base; lmmac")				;lm-specific support
  (:use "base; sysmac")				;general purpose system-dependent macros
  (:use "base; lspmac")				;general purpose system-independent macros
  #+(and vax lucid)
  (:use
    "patch; check-license"
    "patch; bootstrap")
  (:use "base; clpat")				;cl compatibility support
  (:use "base; strmac")				;structure definitions (merge w/ dtpmac?)
  (:use "base; maxmac")				;general purpose macsyma macros
  (:use "base; mforma")
  (:use "base; numer")
  (:use
    "ratfn; ratmac"
    "ratfn; mhayat") ;; misc macros
  (:use "algebra; m_macros")
  (:use "base; mvars") ;; macsyma variables
  (:use "simp; opers") ;; open-codable functions
  (:use
    "system; merror"
    "system; mformt")
  (:use "system; nmpath")
  #+dec (;; parse-macsyma-host compiler bug workaround - rkz - 28-jul-87
   :use "patch; parse_patch.lsp")
  (:use
    "system; marray"
    "system; menu"
    "system; missing")
  (;; commands
   :use "system; comm"
	"system; box"   
	"system; mapf"  
	"system; arrayf")
  (;; evaluator
   :use "system; mlisp"
        "system; mmacro"
	"system; buildq")
  #+(or cloe akcl)
  (:use
    #+cloe "winfe;nfix"
    #+akcl "winfe;wheader"
    #+akcl "winfe;windows"
    #+akcl "winfe;rubout")
  (;; i/o
   :use "system; parser"			;reader, parser
        "system; displa"			;display
        "system; nforma"			; display support
        "system; ldisp"				; display support
        "system; grind")			; display support
  (;; read-eval-print loop (lispm-specific)
   :use #+lispm
        "lispm; lmsup")
  (;; read-eval-print loop (general)
   :use "system; suprv"
	"system; dskfn")
  (;; user-level system stuff
   :use "system; nmfile"
        "system; mutils"
	"system; status")
  (;; simplification
   :use "simp; simp"   
        "ratfn; float"  
	"analysis; csimp"  
	"analysis; plog"   
	"specfn; gamma"  
	"specfn; erf"    
	"solve; coefm"  
	"simp; xthru"  
	"solve; xrtout" 
	"analysis; logarc" 
	"analysis; rpart"
	"system; mtree")
  (:autoload
    "analysis; zero"
    "specfn; hyp"
    "specfn; binoml" )
  (:use "analysis; changv")
  (:use "ratfn; lesfac"
        "ratfn; factor"
	"ratfn; algfac"
	"ratfn; nalgfa"
	"ratfn; ufact")
  (:autoload "ratfn; result")
  (;; rational functions
   :use "ratfn; rat3a" 
        "ratfn; rat3b" 
	"ratfn; rat3d" 
	"ratfn; primfact"  ; primfact needed for primep in rat3c
	"ratfn; rat3c" 
	"ratfn; rat3e" 
	"ratfn; nrat4" 
	"ratfn; modgcd"
	"ratfn; kronec"
	;; "ratfn; fastt" ;; removed by JPG 10/7/96 - obsolete
	"ratfn; ratwt" 
	"ratfn; horner"
	"ratfn; pfrac" 
	"ratfn; ratdif"
	"ratfn; pfet")
  (;; macsyma language compiler macros
   :use "base; transm")
  (;; macsyma language compiler
   :use ;; includes the translator itself and runtime support needed for translated code.
        "transl; transl"
	"transl; trprop")
  (:use "transl; transs"
	"transl; trans1"
	"transl; trans2"
	"transl; trans3"
	"transl; trans4"
	"transl; trans5"
	"transl; transf"
	"transl; troper"
	"transl; trutil"
	"transl; trmode"
	"transl; trdata"
	"transl; trpred"
	"transl; transq"
	"transl; acall" 
	"transl; fcall" 
	"transl; evalw" 
	"transl; mdefun")
  (:autoload "specfn; bessel")
  (:use "specfn; ellipt"
   ; "analysis; intpol"
   ; "integration; rombrg"
   )
  (;; algebraic database
   :use "db; inmis" 
        "db; db")
  (;; algebraic database (cont'd)
   :use "db; compar" ;depends on db
        "db; askp")
  (;; misc files - mostly mathy stuff
   :use ;; misc utilities, commands
        "analysis; diff"
        "simp; sumcon"
	"solve; isolat"
	"simp; facsum"
	"simp; combf"
	"simp; facout"
	"simp; logcon"
	"simp; rtcon"
	"analysis; derivd"
	"analysis; at"
	"system; propfn"
	;; gcd
	"ratfn; spgcd"
	"ratfn; ezgcd"
	;; "ratfn; eez"      ; claims to need newfac above.
	;; integration
	"integration; sinint"
	"integration; sin"
	"integration; risch"
	;; taylor series
	"ratfn; hayat"
	;; definite integration
	"integration; defint")
    (:autoload
      "analysis; residu"
      "ratfn; nisimp"
      "ratfn; pade"
      "algebra; numth"
      "specfn; specfn"				; special functions
      "specfn; combin"
      "specfn; hypgeo"
      "diffeq; laplac"
      "ratfn; pois2"
      ;; "analysis; pseries"
      "analysis; trgred"
      "algebra; sprdet")
    (:use "system; auto")
    (:use
      ;; trigonometry
      "analysis; trig")
    (:use 
      ;; special functions
      ;; matrix algebra
      "algebra; matrnmac"
      "algebra; matintro")
    (:use 
      "algebra; matrix"
      "algebra; macslab"
      "algebra; matrice"
      ;; determinants
      "ratfn; newinv"
      "solve; linnew"
      "ratfn; newdet"
      ;; pattern matching
      "solve; schatc"
      "ratfn; matcom"
      "ratfn; matrun"
      ;; limits 
      "analysis; tlimit"
      "analysis; limit"
      ;; solve
      "solve; solve" 
      "solve; psolve"
      "solve; polyrz"
      ;; "solve; grobner"  ;; moved to library1; - JPG 8/4/92
      ;; "solve; algsys"
      ;; "solve; cpoly"  ;; moved to library1; - JPG 1/25/95
      ;; Miscellaneous
      ;;  These should be further sorted someday!
      ;; "simp; scs"
      "simp; asum"
      "pgms; fortra"
      ;; "pgms; optim"
      "simp; mdot"
      "integration; irinte"
      "analysis; series"
      "ratfn; homog")
  (:use "system; screen")
  #+lispm
  (:use
    "lispm; command-menu"
    "lispm; menu-defs")  ;; Should be integrated with 
                         ;; manual;template-defs somehow. - jpg 6/29/82
  #+(or cloe akcl)
  (:use "winfe; mfemath")
  #+(or cloe akcl)
  (:use
    "winfe;macwin"
    "system; winhelp")
  #-cloe (:use "system;winshow")
  #+(or cloe akcl)
  (:use 
    "system;mfeexpn"
    "system;mfeshow")
  #+lispm
  (:use "system; window")
  #-lispm
  (:use
    "plot; fileplot"
    "plot; nplot"  
    "plot; iffun"
    "plot; plot3d")
  #+(or cloe akcl)
  (:use
    "plot; mfenbcom"
    "plot; mfegscom"
    "plot; mfedefs"
    "plot; mfeattrd"
    "plot; mfebase"
    "plot; mfemac"
    "plot; mfeexpui")
  #+lispm
  (:use
   "plot; pltwin"
   "plot; gstream"
   "plot; draw"
   "plot; plot"  
   "plot; iffun" 
   "plot; plot3d")
  (:use "algebra; set")				;set package, added 4/19/88 jpg
  (:use
    "tools; mtrace"				;trace
    "tools; option"
    "tools; nmudoc")
  (:autoload "tools; primer" "doc; scripts")
  #+lispm
  (:use
    "tools; lmhelp"				; lispm help window
    "tools; edmac"
    "tools; edlm" 
    "tools; edctl"
    "tools; edexp"
    "tools; edbuf"
    "lispm; extensions"
    "lispm; install"
    "lispm; buffer"
    "lispm; tex")
  #+cloe
  (:use "system;cloe") ; cloe specific
  (:use
    "system; medit"				;macsyma editor
    "system; minit")				;initializations
  #+akcl
  (:use "system; akcl")
  )
