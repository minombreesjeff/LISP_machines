;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-

;;; (C) Copyright 1994-97, John C. Mallery
;;;     All Rights Reserved.
;;;


;;;------------------------------------------------------------------- 
;;;
;;; GENERIC SIGNALLING
;;;

(in-package :http)

(define-parameter *status-code-alist*
  '((100 "Continue")                            ;1.1
    (101 "Switching Protocols")                 ;1.1
    (200 "OK")
    (201 "Created")
    (202 "Accepted")
    (203 "Non-Authoritative Information")
    (204 "No Content")
    (205 "Reset Content")                       ;1.1
    (206 "Partial Content")                     ;1.1
    (300 "Multiple Choices")                    ;1.1
    (301 "Moved Permanently" document-moved-permanently)
    (302 "Found" document-moved-temporarily)
    (303 "See Other" document-forwarded)        ;1.1
    (304 "Not Modified")
    (305 "Use Proxy")                           ;1.1
    (306 "Switch Proxy")			;1.1
    (307 "Temporary Redirect")			;1.1
    (400 "Bad Request" bad-syntax-provided)
    (401 "Unauthorized" recoverable-unauthorized-client-access)
    (402 "Payment Required" access-requires-payment)
    (403 "Forbidden" access-forbidden)
    (404 "Not Found" document-not-found)
    (405 "Method Not Allowed" method-not-allowed)
    (406 "Not Acceptable" acceptable-resource-not-found)
    (407 "Proxy Authentication Required" unauthorized-proxy-access)
    (408 "Request Timeout" request-timeout)
    (409 "Conflict" document-put-conflict)
    (410 "Gone" document-gone)
    (411 "Length Required" content-length-required)     ;1.1
    (412 "Precondition Failed" precondition-failed)     ;1.1
    (413 "Request Entity Too Large" request-entity-too-large)   ; 1.1
    (414 "Request URI Too Long" request-uri-too-long)   ; 1.1
    (415 "Unsupported Media Type" unsupported-media-type)       ; 1.1
    (416 "Requested Range Not Satisfiable" invalid-range-request)	; 1.1
    (417 "Expectation Failed")			; 1.1
    (500 "Internal Server Error" server-internal-error)
    (501 "Not Implemented" server-not-implemented)
    (502 "Bad Gateway" bad-gateway)
    (503 "Service Unavailable" service-unavailable)
    (504 "Gateway Timeout" gateway-timeout)
    (505 "HTTP Version Not Supported" http-version-not-supported)	; 1.1
    (506 "Redirection Failed"))			; 1.1
  "An alist of status code number, documentation, and optionally, condition name.")

(define get-condition-for-status-code (code &optional no-error-p)
  (cond ((and (integerp code) (third (assoc code *status-code-alist* :test #'=))))
        (no-error-p nil)
        (t (error "Unknown status code."))))

(define get-string-for-status-code (code &optional no-error-p)
  (cond ((and (integerp code) (second (assoc code *status-code-alist* :test #'=))))
        (no-error-p nil)
        (t (error "Unknown status code."))))

(define client-signal-http-code (url code method &key headers reason version)
  (let ((cond-type (get-condition-for-status-code code t)))
    (cond (cond-type
           (signal cond-type :url url :method method :headers headers
                   :reason reason :version version))
          (t (error "Applying Method ~S to ~A elicited a ~D (~A) in HTTP version ~A. ~:[~;~:*~{~A: ~A~^~}~]"
                    method (url:name-string url) code reason *http-version* headers)))))

(define describe-status-codes (&optional (stream *standard-output*) (print-legend-p t))
  "Describes the HTTP status codes on stream."
  (loop initially (when print-legend-p
		    (format stream "~&~2TCode ~8TDescription ~40TCondition Class~2%"))
	for (code description error-class) in *status-code-alist*
	do (format stream "~&~2T~D~8T~A~:[~;~40T~:*~(~S~)~]" code description error-class)))


;;;------------------------------------------------------------------- 
;;;
;;; NETWORK ERRORS
;;;

(define-condition http-host-stopped-responding
                  (www-utils:host-stopped-responding www-utils:network-error-mixin)
  ((host :initform nil :initarg :host :reader http-host)
   (port :initform 80 :initarg :port :reader http-port))
  (:report (lambda (cond stream)
             (let ((host (http-host cond))
                   (port (http-port cond)))
               (format stream "The host, ~A, stopped responding on port ~D."
                       (host-domain-name host) port)))))

;;;------------------------------------------------------------------- 
;;;
;;; CONDITIONS
;;;

(define-condition http-condition
                  (condition)
  ((close-connection-p :initform nil :initarg :close-connection :reader http-close-connection-p)))

(define close-connection-p (condition)
  "Returns non-null unless CONDITION warrants that the connekction may safely remain open."
  (typecase condition
    (http-condition (http-close-connection-p condition))
    ;;always close connections when error state unkonwn.  1/12/97 -- JCMa.
    (t nil)))

(define-condition http-abort (http-condition) ())

(define-condition reportable-condition
                  (http-condition)
  ((url :initform nil :initarg :url :reader http-url)
   (method :initform nil :initarg :method :reader http-method)
   (status-code :reader status-code)
   (reason :initform nil :initarg :reason :reader http-reason)
   (version :initform *http-version* :initarg :version :reader http-version)
   (headers :initform nil :initarg :headers :reader http-transaction-headers)
   (format-string :initform nil :initarg :format-string :reader format-string)
   (format-args :initform nil :initarg :format-args :reader format-args))
  (:report report-status-message))

(define-condition client-condition (http-condition) ())

(define-condition server-condition (http-condition) ())

(define-condition client-reportable-condition (reportable-condition client-condition) ())

(define-condition bad-syntax-provided
                  (client-reportable-condition)
  ((status-code :initform 400)
   (reason :initform "Bad Request")
   (close-connection-p :initform (default-condition-close-connection-p)
                       :initarg :close-connection :reader http-close-connection-p)))

(define-condition request-missing-host-header
                  (bad-syntax-provided)
  ((reason :initform "Bad Request: Missing Host Header")))

(define-condition unknown-virtual-host
                  (bad-syntax-provided)
  ((reason :initform "Bad Request: Unknown Virtual Host")))

(define-condition bad-range-header-value
                  (bad-syntax-provided)
  ((reason :initform "Bad Request: Ill-Formed Range"))
  (:documentation "Signalled when the value for a range header is ill-formed."))

(define-condition bad-server-response
                  (bad-syntax-provided)
  ((reason :initform "Bad Response: Ill-Formed Server Response")
   (response :initform nil :initarg :response))
  (:documentation "Signalled a server response to an HTTP request is unparsable."))

(define-condition access-control-condition
                  (client-reportable-condition)
  ())

(define-condition unauthorized-access (access-control-condition) ())

(define-condition unauthorized-client-access (unauthorized-access) ())

(define-condition recoverable-unauthorized-client-access
                  (unauthorized-client-access)
  ((authentication-method :initarg :authentication-method :reader http-authentication-method)
   (authentication-realm :initarg :authentication-realm :reader http-authentication-realm)
   (status-code :initform 401)
   (reason :initform "Unauthorized")))

(define-condition unknown-authentication-method
		  (access-control-condition)
  ((authentication-method :initarg :authentication-method :reader http-authentication-method)))

(define-condition client-access-with-stale-nonce (recoverable-unauthorized-client-access) ())

(define-condition access-requires-payment
                  (access-control-condition)
  ((status-code :initform 402)
   (reason :initform "Payment Required")))

(define-condition access-forbidden
                  (access-control-condition)
  ((status-code :initform 403)
   (reason :initform "Access Forbidden")))

(define-condition document-not-found
                  (client-reportable-condition)
  ((status-code :initform 404)
   (reason :initform "Not Found")))

(define-condition too-many-redirects
                  (document-not-found)
  ((reason :initform "Too Many Redirects")
   (n-redirects :initform 0 :initarg :n-redirects))
  (:documentation "Used to signal that the document was not found
because too many redirects were encountered."))

(define-condition method-not-allowed
                  (access-control-condition)
  ((status-code :initform 405)
   (method :initform nil :initarg :method :reader http-method)
   (reason :initform "Method Not Allowed")))

;; needs to send the headers -- JCMa 5/29/1995.
(define-condition acceptable-resource-not-found
                  (access-control-condition)
  ((status-code :initform 406)
   (headers :initform nil :initarg :headers :reader headers)
   (reason :initform "None Acceptable")))

(define-condition unauthorized-proxy-access
                  (unauthorized-access)
  ((status-code :initform 407)
   (reason :initform "Proxy Authentication Required")))

(define-condition request-timeout
                  (access-control-condition)
  ((status-code :initform 408)
   (reason :initform "Request Timeout"))) 

(define-condition document-put-conflict
                  (access-control-condition)
  ((status-code :initform 409)
   (reason :initform "Conflict"))) 

(define-condition document-gone
                  (document-not-found)
  ((status-code :initform 410)
   (reason :initform "Gone")))

(define-condition content-length-required
                  (client-reportable-condition)
  ((status-code :initform 411)
   (reason :initform "Length Required")))

(define-condition precondition-failed
                  (client-reportable-condition)
  ((status-code :initform 412)
   (reason :initform "Precondition Failed")))

(define-condition request-entity-too-large
                  (client-reportable-condition)
  ((status-code :initform 413)
   (reason :initform "Reques Entity Too Large")
   (retry-after :initform nil)))                ; should send a retry after header when non-null

(define-condition request-uri-too-long
                  (bad-syntax-provided)
  ((status-code :initform 414)
   (reason :initform "Request URI Too Long")))

(define-condition unsupported-media-type
                  (client-reportable-condition)
  ((status-code :initform 415)
   (reason :initform "Unsupported Media Type")))

(define-condition invalid-range-request
                  (bad-syntax-provided)
  ((status-code :initform 416)
   (reason :initform "Requested Range Not Valid")))

(define-condition server-reportable-condition
                  (reportable-condition server-condition) ())

(define-condition server-internal-error
                  (server-reportable-condition)
  ((status-code :initform 500)
   (server-error :initform nil :initarg :server-error :reader server-error)))

(define-condition error-computing-response
                  (server-internal-error)
  ((headers :initform nil :initarg :headers :reader http-headers)
   (stack-backtrace :initform nil :initarg :stack-backtrace :reader http-stack-backtrace)))

(define-condition error-handling-post-method
                  (error-computing-response)
  ((form-alist :initform nil :initarg :form-alist :reader http-form-alist)))

(define-condition error-handling-put-method (server-internal-error) ())

(define-condition error-handling-delete-method (server-internal-error) ())

(define-condition server-error
                  (server-reportable-condition)
  ((close-connection-p :initform t :initarg :close-connection  :reader http-close-connection-p)))

(define-condition server-not-implemented
                  (server-error)
  ((status-code :initform 501)))

(define-condition unsupported-method
                  (server-not-implemented)
  ((method :initarg :method :reader http-method)))

(define-condition bad-gateway
                  (server-error)
  ((status-code :initform 502)))

(define-condition service-unavailable
                  (server-error)
  ((status-code :initform 503)))

(define-condition server-overloaded (service-unavailable) ())

(define-condition gateway-timeout
                  (server-error)
  ((status-code :initform 504)))

(define-condition http-version-not-supported
                  (server-error)
  ((status-code :initform 505)))

(define-condition client-timed-out (gateway-timeout) ())

(define-condition redirection (reportable-condition) ())

(define-condition document-moved
                  (redirection)
  ((new-urls  :initarg :new-urls :reader new-urls)
   (target-window :initform nil :initarg :target-window :reader http-target-window)))

(define-condition document-moved-permanently
                  (document-moved)
  ((status-code :initform 301)
   (reason :initform "Document Moved Permanently")))

(define-condition document-moved-temporarily
                  (document-moved)
  ((status-code :initform 302)
   (reason :initform "Document Moved Temporarily")))

(define-condition document-forwarded
                  (document-moved)
  ((status-code :initform 303)
   (reason :initform "See Other")))

;;;------------------------------------------------------------------- 
;;;
;;; 
;;;

(defgeneric report-status-line (http-condition stream)
  (:documentation "Primitive that sends a status line over an HTTP connection."))

(defmethod report-status-line ((condition http-condition) stream)
  (declare (ignore stream))
  (error "The condition, ~S, cannot be reported to the client." condition))

(defmethod report-status-line ((condition reportable-condition) stream)
  (let* ((status-code (status-code condition))
         (reason (or (http-reason condition)
                     (get-string-for-status-code status-code))))
    (send-status-line stream status-code reason)))

(defgeneric report-status-message (http-condition stream &optional format-string format-args)
  (:documentation "Primitive that sends a status body message over an HTTP connection."))

(defmethod report-status-message ((condition http-condition) stream &optional format-string format-args)
  (declare (ignore stream format-string format-args))
  (error "The condition, ~S, cannot be reported to the client." condition))

(define cl-http-signature (&optional (stream *output-stream*))
  "Writes the server signature as an address on STREAM."
  (with-emphasis (:address :stream stream)
    (note-anchor *server-version* :reference *cl-http-home-page-url-string* :stream stream)))

(defun %report-status-message (url reason stream &optional report)
  (with-html-document (:declare-dtd-version-p t :stream stream)
    (with-document-preamble (:stream stream)
      (declare-title reason :stream stream))
    (with-standard-document-body (:stream stream)
      (with-section-heading (reason :stream stream)
        (horizontal-line :stream stream)
        (with-paragraph (:stream stream)
          (cond (report
		 (html:with-verbatim-text (:fresh-line nil :stream stream)
		   (html:write-string-quoting-specials report stream)))
                (url (fast-format stream "~A for URI ~A"
                                  reason (typecase url
                                           (url (url:name-string url))
                                           (t url))))
                (t (let ((mail-url (concatenate 'string "mailto:" (server-mail-address))))
                     (declare (dynamic-extent mail-url))
                     (fast-format stream "~&Error ~D not properly reported.~&Please advise the server maintainer at: "
                                  (server-status *server*))
                     (note-anchor (server-mail-address) :reference mail-url :stream stream)))))
        (horizontal-line :stream stream)
        (cl-http-signature stream)))))

(defmethod report-status-message ((condition reportable-condition) stream &optional format-string format-args)
  (let* ((status-code (status-code condition))
         (reason (or (http-reason condition)
                     (get-string-for-status-code status-code)))
         (url (http-url condition)))
    (unless format-string
      (setq format-string (format-string condition)))
    (unless format-args
      (setq format-args (format-args condition)))
    (if format-string
	(let ((report (apply #'format nil format-string format-args)))
	  (declare (dynamic-extent report))
	  (%report-status-message url reason stream report))
	(%report-status-message url reason stream))))

(defmethod report-status-message ((condition document-moved) stream &optional format-string format-args)
  (let ((new-urls (new-urls condition))
        (reason (http-reason condition)))
    (with-document-preamble (:stream stream)
      (declare-title reason :stream stream))
    (with-document-body (:stream stream)
      (with-section-heading (reason :stream stream)
        (horizontal-line :stream stream)
        format-string format-args               ;ignore
        (with-paragraph (:stream stream)
          (write-string "This document has moved " stream)
          (typecase new-urls
            (cons
              (cond ((cdr new-urls)
                     (loop for urls = new-urls then (cdr urls)
                           for num upfrom 1
                           while urls
                           for label = (with-output-to-string (string)
                                         (write-string "here " string)
                                         (write num :stream string :escape nil :base 10))
                           do (note-anchor label :reference (car urls) :stream stream)
                              (when (cdr urls) (write ", "))))
                    (t (note-anchor "here" :reference (car new-urls) :stream stream))))
            (t (note-anchor "here" :reference new-urls :stream stream)))
          (write-char #\. stream))
        (horizontal-line :stream stream)
        (cl-http-signature stream)))))

(define-generic http-url-string (reportable-condition)
  (:documentation
    "Returns the URL string for REPORTABLE-CONDITION, or null is a URL is unavailable."))

(defmethod http-url-string ((condition reportable-condition))
  (let ((url (http-url condition)))
    (etypecase url
      (null nil)
      (string url)
      (url:url (url:name-string url)))))

;;;------------------------------------------------------------------- 
;;;
;;; REPORT STATUS
;;;

(define-generic report-http-headers (http-condition stream &optional termination-line-p header-plist content-type)
  (:documentation "Top-level methods for sending HTTP headers accompanying REPORT-STATUS."))

(defmethod report-http-headers ((condition condition) stream
                                &optional (termination-line-p t) header-plist (content-type :html))
  (let ((headers `(:date ,(get-universal-time)
                   :server ,*server-version*
                   :connection (:close)
                   ,.(when content-type
                       `(:content-type ,(%mime-content-type-spec content-type)))
                   ,@header-plist)))
    (declare (dynamic-extent headers))
    (write-headers stream headers termination-line-p)))

(defmethod report-http-headers ((condition reportable-condition) stream &optional (termination-line-p t)
                                header-plist (content-type :html)
                                &aux (server *server*))
  (when (http-close-connection-p condition)
    (setf (server-close-connection-p server) t))
  (%write-document-mime-headers stream content-type nil nil nil nil nil nil nil nil nil nil nil
				termination-line-p nil header-plist))

(defmethod report-http-headers :around ((condition method-not-allowed) stream
                                        &optional (termination-line-p t) header-plist content-type)
  (let* ((url (http-url condition))
         (server *server*)
         ;; If the url is an uninterned search URL, we just default to the
         ;; standard methods on the server  8/7/96 -- JCMa.
         (more-headers `(:allow ,(http-methods (or (and url (intern-url url :if-does-not-exist :soft))
                                                   server)
                                               (server-http-version server))
                         ,@header-plist)))
    (declare (dynamic-extent more-headers))
    (case (http-method condition)
      (:put ;; close connection because the server will try to blast data at us. barf.
        (unless (client-http-version-meets-p server :http/1.1)
          (setf (server-close-connection-p server) t))))
    (call-next-method condition stream termination-line-p more-headers content-type)))

(define-generic report-status (http-condition stream)
  (:documentation "Top-level function for reporting a condition over an HTTP connection."))

(defmethod report-status ((condition http-condition) stream)
  (declare (ignore stream))
  (error "The condition, ~S, cannot be reported to the client." condition))

(defmethod report-status ((condition reportable-condition) stream)
  (let* ((server *server*)
         (method (or (server-method server) (http-method condition))))
    (case method
      (:head ;; head never sends a body
        (report-status-line condition stream)
       (report-http-headers condition stream t))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil))
                  (report-status-message condition stream)))
               (t (report-status-line condition stream)
                  (report-http-headers condition stream t)
                  (report-status-message condition stream)))))))

(defmethod report-status ((error url:parsing-error) stream)
  (let* ((url (url:url-string error))
         (reason (get-string-for-status-code 400))
         (server *server*)
         (method (server-method server)))
    (case method
      (:head ;; head never sends a body
        (send-status-line stream 400 reason)
       (report-http-headers error stream t nil nil))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (send-status-line stream 400 reason)
                         (report-http-headers error stream nil))
                  (%report-status-message url reason stream)))
               (t (send-status-line stream 400 reason)
                  (report-http-headers error stream t)
                  (%report-status-message url reason stream)))))))

;; Catch any errors reporting errors.
(defmethod report-status :around ((condition http-condition) stream)
  (handler-case-if (not *debug-server*)
     (call-next-method)
    (error (error) (report-status-unhandled-error error stream (server-request *server*)))))

;; No client present.
(defmethod report-status :around ((condition request-timeout) stream)
  (when (www-utils:live-connection-p stream)
    (call-next-method)))

;; Handles any residual errors not covered by other condition types.
(defmethod report-status-unhandled-error ((error condition) stream request)
  (flet ((report-the-secondary-error (error stream reason)
           (let* ((report-string (report-string error))
                  (report (with-output-to-string (string)
                            (with-paragraph (:stream string)
                              (with-rendition (:bold :stream string)
                                (write-string "Request: " string))
                              (if request (write-string request string) "{Not available}"))
                            (with-paragraph (:stream string)
                              (with-rendition (:bold :stream string)
                                (write-string "Error: " string))
                              (with-verbatim-text (:fresh-line nil :stream stream)
                                (write-string-quoting-specials report-string string))))))
             (declare (dynamic-extent report-string report))
             (%report-status-message nil reason stream report))))
    (let ((reason (get-string-for-status-code 500)))
      (cond ((handler-case (client-http-version-meets-p *server* :http/1.1) (error () nil))
             (%with-chunked-transfer-encoding
               (stream)
               (progn (send-status-line stream 500 reason)
                      (report-http-headers error stream nil))
               (report-the-secondary-error error stream reason)))
            (t (send-status-line stream 500 reason)
               (report-http-headers error stream t)
               (report-the-secondary-error error stream reason))))))

(defmethod report-status-unhandled-error :around ((error condition) stream request)
  (declare (ignore request))
  (when (www-utils:live-connection-p stream)
    (call-next-method))
  (bug-report-error error))

(defmethod report-status ((condition server-internal-error) stream)
  (let* ((error (server-error condition))
         (error-report (and error (report-string error)))
         (server *server*)
         (method (or (server-method server) (http-method condition))))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers error stream t))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers error stream nil))
                  (report-status-message condition stream error-report)))
               (t (report-status-line condition stream)
                  (report-http-headers error stream t)
                  (report-status-message condition stream error-report)))))))

(defmethod report-status :around ((condition server-internal-error) stream)
  stream                                        ;ignore
  (when (www-utils:live-connection-p stream)
    (call-next-method))
  (bug-report-error condition))

;; This is quite inline so that it doesn't waste time when the server is on the edge.
(defmethod report-status ((condition server-overloaded) stream)
  (flet ((report-the-message (stream reason)
           (with-html-document (:declare-dtd-version-p t :stream stream)
             (with-document-preamble (:stream stream)
               (declare-title reason :stream stream))
             (with-standard-document-body (:stream stream)
               (with-section-heading (reason :stream stream)
                 (horizontal-line :stream stream)
                 (with-paragraph (:stream stream)
                   (etypecase *overload-message*
                     (null
                       (write-string "This server is currently operating at capacity and cannot accept your request. Please try again later."
                                     stream))
                     (string (write-string *overload-message* stream))
                     (function (funcall *overload-message* condition stream))
                     (symbol (funcall (fdefinition *overload-message*) condition stream))))
                 (horizontal-line :stream stream)
                 (cl-http-signature stream))))))
    (let* ((status-code (status-code condition))
           (reason (or (http-reason condition)
                       (get-string-for-status-code status-code)))
           (server *server*)
           (method (or (server-method server) (http-method condition))))
      (case method
        (:head ;; head redirects never send a body
          (send-status-line stream status-code reason)
         (report-http-headers condition stream t))
        (t (cond ((client-http-version-meets-p server :http/1.1)
                  (%with-chunked-transfer-encoding
                    (stream)
                    (progn (send-status-line stream status-code reason)
                           (report-http-headers condition stream nil))
                    (report-the-message stream reason)))
                 (t (case method    ;close connection for 1.0 puts
                      (:put (setf (server-close-connection-p server) t)))
                    (send-status-line stream status-code reason)
                    (report-http-headers condition stream t)
                    (report-the-message stream reason))))))))

(defmethod report-status ((condition access-control-condition) stream)
  (let* ((server *server*)
         (method (or (server-method server) (http-method condition))))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers condition stream t nil nil))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil))
                  (report-status-message condition stream)))
               (t (case method ;close connection for 1.0 puts
                    (:put (setf (server-close-connection-p server) t)))
                  (report-status-line condition stream)
                  (report-http-headers condition stream t)
                  (report-status-message condition stream)))))))

(defmethod authentication-header-spec ((condition recoverable-unauthorized-client-access))
  (www-authenticate-header-spec (http-authentication-realm condition) (http-authentication-method condition)))

(defmethod authentication-header-spec ((condition client-access-with-stale-nonce))
  (www-authenticate-header-spec (http-authentication-realm condition) (http-authentication-method condition) :stale t))

(defmethod report-status ((condition recoverable-unauthorized-client-access) stream)
  (let* ((more-headers (authentication-header-spec condition))
         (server *server*)
         (method (or (server-method server) (http-method condition))))
    (declare (dynamic-extent more-headers))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers condition stream t more-headers nil))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil more-headers))
                  (report-status-message condition stream)))
               (t (case method			;close connection for 1.0 puts
                    (:put (setf (server-close-connection-p server) t)))
                  (report-status-line condition stream)
                  (report-http-headers condition stream t more-headers)
                  (report-status-message condition stream)))))))

(defmethod report-status ((condition unsupported-method) stream)
  (let* ((method (http-method condition))
         (url (http-url-string condition))
         (args (list method url)))
    (declare (dynamic-extent args))
    (cond ((client-http-version-meets-p *server* :http/1.1)
           (%with-chunked-transfer-encoding
             (stream)
             (progn (report-status-line condition stream)
                    (report-http-headers condition stream nil))
             (report-status-message condition stream "The ~A method is not supported: ~S" args)))
          (t (report-status-line condition stream)
             (report-http-headers condition stream t)
             (report-status-message condition stream "The ~A method is not supported: ~S" args)))))

;; body section can be sent with MIME multi-part message.
(defmethod report-status ((condition document-moved) stream)
  (let* ((target-window (http-target-window condition))
         (more-headers `(,.(loop for url in (ensure-list (new-urls condition))
                                 collect :location
                                 collect (url:name-string url))
                         ,.(when target-window
                             `(:window-target ,target-window))))
         (method (http-method condition)))
    (declare (dynamic-extent more-headers))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers condition stream t more-headers nil))
      (t (cond ((client-http-version-meets-p *server* :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil more-headers))
                  (report-status-message condition stream)))
               (t (case method ;; close connection for 1.0 PUT
                    (:put (setf (server-close-connection-p *server*) t)))
                  (report-status-line condition stream)
                  (report-http-headers condition stream t more-headers)
                  (report-status-message condition stream)))))))

(declaim (inline handle-url-standard-redirection))

(defun handle-url-standard-redirection (url temporary-p method &optional target-window)
  (check-type target-window (or null string))
  (let ((alternate-urls (url:alternate-urls url)))
    (cond
      ((null alternate-urls)
       (signal 'document-not-found :url url))
      (temporary-p
       (signal 'document-moved-temporarily :url url :method method :new-urls alternate-urls :target-window target-window))
      (t (signal 'document-moved-permanently :url url :method method :new-urls alternate-urls :target-window target-window)))))

(defmethod report-status ((condition precondition-failed) stream)
  (report-status-line condition stream)
  (report-http-headers condition stream t nil nil))

;;;------------------------------------------------------------------- 
;;;
;;; AUTOMATIC BUG REPORTING BY ERROR CLASS
;;;

;; report the bugs in general
(defmethod bug-report-error ((error error))
  (let ((error-type (type-of error)))
    (report-bug *bug-http-server*
                (format nil "HTTP Error: ~S" error-type)
                "~&Log: ~S~&Error: ~S~:[~;~&Error Report: ~:*~A~]~:[~;~&Backtrace: ~:*~A~]"
                (if http:*server*
                    (write-extended-common-logfile-entry http:*server* nil)
                    "NA")
                error-type (report-string error)
                (when *stack-backtraces-in-bug-reports*
                  (stack-backtrace-string error)))))

(defmethod bug-report-error ((condition condition))
  (let ((condition-type (type-of condition)))
    (report-bug *bug-http-server*
                (format nil "HTTP Condition: ~S" condition-type)
                "~&Log: ~S~&Condition: ~S~:[~;~&Condition Report: ~:*~A~]~:[~;~&Backtrace: ~:*~A~]"
                (if http:*server*
                    (write-extended-common-logfile-entry http:*server* nil)
                    "NA")
                condition-type (report-string condition)
                (when *stack-backtraces-in-bug-reports*
                  (stack-backtrace-string condition)))))

(defmethod bug-report-error ((error server-internal-error))
  (let* ((err (or (server-error error) error))
         (error-type (type-of err)))
    (report-bug *bug-http-server*
                (format nil "HTTP Error: ~S" error-type)
                "~&Log: ~S~&Error: ~A~:[~;~&Error Report: ~:*~A~]~:[~;~&Backtrace: ~:*~A~]"
                (if http:*server*
                    (write-extended-common-logfile-entry http:*server* nil)
                    "NA")
                error-type (report-string err)
                (when *stack-backtraces-in-bug-reports*
                  (stack-backtrace-string error)))))

(defmethod bug-report-error ((error error-computing-response))
  (let* ((headers (http-headers error))
         (err (or (server-error error) error))
         (error-type (type-of err))
         (backtrace (http-stack-backtrace error)))
    (report-bug *bug-http-server*
                (format nil "HTTP Error: ~S" error-type)
                "~&Log: ~S~&Error: ~A~:[~;~&Error Report: ~:*~A~]~:[~;~&Headers: ~:*~S~]~:[~;~&Backtrace: ~:*~A~]"
                (if http:*server*
                    (write-extended-common-logfile-entry http:*server* nil)
                    "NA")
                error-type (report-string err) headers backtrace)))

(defmethod bug-report-error ((error error-handling-post-method))
  (let* ((err (or (server-error error) error))
         (error-type (type-of err))
         (backtrace (http-stack-backtrace error))
         (headers (http-headers error))
         (form-alist (http-form-alist error)))
    (report-bug *bug-http-server*
                (format nil "HTTP Error: ~S" error-type)
                "~&Log: ~S~&Error: ~S~:[~;~&Error Report: ~:*~A~]~:[~;~&Headers: ~:*~S~]~
                 ~:[~;~&Form-Alist: ~:*~S~]~:[~;~&Backtrace: ~:*~A~]"
                (if http:*server*
                    (write-extended-common-logfile-entry http:*server* nil)
                    "NA")
                error-type (report-string err)
                headers form-alist backtrace)))
