;;; -*- Mode: LISP; Package: SHOWPROC; Base: 10.; Syntax: Common-Lisp -*-

;;;
;;; (c) Copyright Gavan Duffy, 1991
;;;     All Rights Reserved.
;;;
;;;------------------------------------------------------------------- 
;;;
;;; KEYWORD ORIENTED TOPLEVEL MACRO                 
;;;

(in-package :spt)

(defmacro defshowable-procedure-type (type &key 
				      definition-function
				      doc-string
				      other-btrees
				      zmacs-meta-x-command-string
				      zmacs-key-binding
				      (zmacs-prompt-string "Apropos:")
				      b-tree-var
				      (b-tree-var-type 'defvar)
				      doc-and-arglist-function
				      (function-parent 'defshowable-procedure-type))
  "Defines a showable procedure. TYPE (unquoted) is a special form used like
DEFUN, etc.  PROCEDURE-DEFINING-PROCEDURE is the type of procedure to compile
into, e.g., DEFUN, or DEFMACRO.  ZMACS-META-X-COMMAND-STRING will be the ZMACS
m-x string to type in either LISP mode or RELATUS mode that will mouse
sensitively display the procedures in alphabetical order that include an
apropos substring which will be supplied by the user.  This string will be
used in a ZMACS DEFCOM, ie COM-<string>.  B-TREE-VAR will be the name of a
special variable on to encache the binary-tree of procedure names.
B-TREE-VAR-TYPE is the type of defvar to use, ie., PARSER-DEFVAR.
OTHER-BTREES are the names of other B-TREEs on which you want procedures of
this type encached.  If DOC-AND-ARGLIST-FUNCTION is supplied, it should be a
funcallable function which returns multiple values, the doc-string and the
arglist of the showable procedure type.  This feature is unnecessary for most
applications.  Usually, the system functions DOCUMENTATION and ARGLIST suffice
for retrieval of this information."
  #+genera
  (make-code-to-defshowable-procedure-type
    type definition-function doc-string other-btrees
    b-tree-var b-tree-var-type doc-and-arglist-function
    zmacs-meta-x-command-string zmacs-prompt-string zmacs-key-binding function-parent)
  #-genera
  `(progn (ignore ,doc-string ',other-btrees ,zmacs-meta-x-command-string
		  ',b-tree-var ',b-tree-var-type ,doc-and-arglist-function 
		  ,zmacs-prompt-string ,zmacs-key-binding ',function-parent)
	  (defmacro ,type (name arglist &body body)
	    `(,',definition-function ,name ,arglist . ,body))))
