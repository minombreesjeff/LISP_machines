;;; -*- Package: showproc; Base: 10.; Mode: LISP; Syntax: common-lisp; -*-

;;; (c) Copyright Gavan Duffy, 1984-1991
;;;     All Rights Reserved.
;;;
;;; Full Overhaul.  (C) Copyright John C. Mallery, 1986  All Rights Reserved.
;;;
;;; Rationalization, Derelatusification, common-lispification, 
;;; btreeification, systemization, and new showing and documenting regime
;;; (c) Copyright Gavan Duffy, 1987
;;;     All Rights Reserved.

;;; (C) Enhancements Copyright John C. Mallery, 1988
;;;     All Rights Reserved.

;;; Bug Fixes to broken enhancements
;;; (c) Copyright Gavan Duffy, 1990
;;;     All Rights Reserved.

;;; Full CLOSification and Overhaul
;;; (c) Copyright Gavan Duffy, 1991
;;;     All Rights Reserved

;;; flush some dumb stuff.
;;; (C) Enhancements Copyright 1993, John C. Mallery.
;;;     All Rights Reserved.
;;;

;;; Clean up interning to ensure symbols are upcase.
;;; (C) Enhancements Copyright 1996, John C. Mallery.
;;;     All Rights Reserved.
;;;


(in-package :spt)

(pushnew :showproc *features*)

;;; Here is the general facility for defining special forms which will then be associated
;;; with ZMACS extended commands using apropos substrings.  

;;; Since RELATUS-MODE isn't defined by the time this file is loaded, we can't put these
;;; extended commands on the RELATUS-MODE comtab yet. However, the list of lists
;;; ((<m-x command> . defcom) ...), *DEFCOMS-TO-GIVE-RELATUS*, caches them, so that the 
;;; defcoms may later be inherited by RELATUS-MODE. 

;;; The top level form is DEFINE-SHOWABLE-PROCEDURE-TYPE with arguments:
;;; 
;;; TYPE:  The (unquoted) type of procedure being defined: 
;;;    e.g., DEFPREDICATE, DEFPROCEDURE, etc. 
;;; PROCEDURE-DEFINING-PROCEDURE:  The (unquoted) procedure to expand into,
;;;    e.g., DEFUN, DEFMACRO, DEFSUBST.
;;; DOC-STRING: The documentation string for the special form that implements the TYPE.
;;; OTHER-BTREES:  Optional.  A list of any other B-TREEs you want to encache this TYPE on.
;;;    Defaults to NIL.
;;; ZMACS-META-X-COMMAND:  Optional. The string to invoke after meta-x in ZMACS to show
;;;    instances of the TYPE (you will be prompted for an apropos substring). 
;;;    Defaults to NIL.
;;; B-TREE-VAR:  Optional. The name of a variable which will automagically be defvar'd.  
;;;    It will point to an alphabetized binary tree of the TYPE.  Defaults to NIL
;;; B-TREE-VAR-TYPE:  Optional. The name of the special form you want to use 
;;;    to defvar B-TREE-VAR.  Defaults to DEFVAR.
;;; DOC-AND-ARGLIST-FCN: Optional.  The quoted function which, when given the NAME of
;;;    the procedure defined by the TYPE, will return multiple-values, the doc-string
;;;    and the arglist of the procedure.  This is an advanced feature.  For most
;;;    applications you won't need this.  
;;;
;;; Example:
;;;
;;; (DEFSHOWABLE-PROCEDURE-TYPE DEFPREDICATE
;;;			       :DEFINITION-FUNCTION DEFUN
;;;			       :DOC-STRING "Defines a predicate."
;;;			       :OTHER-BTREES '(*FUNCTIONS*)
;;;			       :ZMACS-META-X-COMMAND-STRING "Show Predicates"
;;;			       :BTREE-VAR *PREDICATES*
;;;			       :BTREE-VAR-TYPE 'MY-DEFVAR)
;;;
;;; This example defines DEFPREDICATE, which will expand into a DEFUN.  DEFPREDICATE's
;;; documentation tells what it does.  In ZMACS, m-x Show Parser Predicates will prompt
;;; for an apropos substring and mouse-sensitively show each DEFPREDICATE with the substring
;;; in its name in the typeout window.  Clicking left on the function name will put it
;;; in ZMACS for you to view or edit.
;;; 
;;; Here's an example where the procedure will share a B-TREE and m-x command
;;; with DEFPREDICATE, but will expand into a macro instead of a defun:
;;;
;;; (DEFSHOWABLE-PROCEDURE-TYPE DEFMACROPREDICATE
;;;		   	        :DEFINITION-FUNCTION DEFMACRO
;;;			        :DOC-STRING "Defines a macro predicate."
;;;			        :OTHER-BTREES '(*PARSER-FUNCTIONS* *PREDICATES*))
;;;
;;; Here's an example that has a special user-defined function for extracting the
;;; doc-string and the arglist.
;;;
;;;
;;; (DEFSHOWABLE-PROCEDURE-TYPE DEFSHIT
;;;			        :DEFINITION-FUNCTION DEFMACRO
;;;			        :DOC-STRING "Defines some shit."
;;;			        :OTHER-BTREES NIL
;;;			        :ZMACS-META-X-COMMAND-STRING "Show some shit"
;;;			        :ZMACS-KEY-BINDING #\HYPER-SUPER-S
;;;			        :BTREE-VAR *SHIT*
;;;			        :BTREE-VAR-TYPE 'DEFVAR
;;;			        :DOC-AND-ARGLIST-FUNCTION #'GET-SHIT)

;;; Why bother to do this?  Isn't this just bells and whistles?  NO! Stop thinking that way!
;;; This kind of organization tightens the debugging loop.  This is a tool, not a toy.

;;; New toplevel form is DEFSHOWABLE-PROCEDURE.  This is a keyword oriented macro that
;;; is more reasonable to use than the eariler interface.   3/6/86 -- JCMa
;;; prompt string for zmacs and keybinding installed   3/6/86 -- JCMa
;;; assciated rountines remodularized.  3/6/86 -- JCMa
;;; Converted to more function-oriented code that compiles, issues no
;;; warnings, and uses a minimal working set.   9/7/86 -- JCMa
;;; Converted to rel7 and naming conventions cleaned up   9/7/86 -- JCMa

;;; Converted to commonlisp, relatus dependencies removed, btrees flavorized  3/23/87 -- Gavan
;;; Conversion of SHOW-FUNCTIONS, DOCUMENT-FUNCTIONS, and friends to generics,
;;; Procedures are now shown or documented as the binary tree is walked. 
;;; This eliminates the consing caused by btree extraction.  --  3/31/87 -- Gavan
;;; Simplify specification of user supplied doc and arglist functions. -- 3/31/87 -- Gavan
;;; Fix misspelled function names.  -- 3/31/87 -- Gavan
;;; Introduce INDEXATION-FUNCTION to reduce the working set some more. -- 3/31/87 -- Gavan

;;; Conversion to 7.2  4/27/88 -- JCMa
;;; package lossage in defcoms fixed   4/27/88 -- JCMa
;;; fat string lossage eliminated  4/27/88 -- JCMa
;;; correct presentation type for function specs  4/27/88 -- JCMa
;;; provide-useful-definition-type-properties   5/1/88 -- JCMa

;;; Conversion to CLOS and 8.0  7/8/91 -- GAVAN

(defmacro with-area (area &body body)
  `(let ((sys:default-cons-area ,area))
     . ,body))

;;;------------------------------------------------------------------- 
;;;
;;;     procedures are encoded on binary trees.
;;;

(defun b-tree-store (procedure-name defining-form tree predicate)
  (let ((object (with-area sys:working-storage-area
		  (make-instance 'showable-procedure		
				 :name procedure-name
				 :defining-form defining-form)))
	(root (if (typep tree 'showable-procedure)
		  tree				
		  (symbol-value tree))))
    (cond ((null root)
	   (set tree object))
	  ((typep root 'showable-procedure)
	   (btree:with-predicate-for-comparing-btree-nodes predicate
	     (set tree (btree:store root object procedure-name predicate))))
	  (t (error "~S is not a binary tree." tree)))))


;;;------------------------------------------------------------------- 
;;;
;;; Extracting the guys and printing them.    
;;;

(defvar *user-supplied-documentation-and-arglist-function* nil)

(defmacro with-user-supplied-documentation-and-arglist-function (function &body body)
  `(let ((*user-supplied-documentation-and-arglist-function* ,function))
     . ,body))

(defmethod show-functions ((self showable-procedure) apropos)
  (btree:apply-to-nodes self
			:test-function #'satisfies-apropos
			:test-arguments `(,apropos)
			:application-function #'present-procedure))

(defmethod satisfies-apropos ((self showable-procedure) apropos)
  (with-slots (btree:name) self
    (or (null apropos)
	(string-search apropos (symbol-name btree:name)))))


;;;------------------------------------------------------------------- 
;;;
;;; PRINTING METHOD
;;;

(defun maybe-strip-arguments (function type arglist &optional (strip-arguments-p t)
			      &aux strip-arguments)
  ;;based on zwei:PRINT-ARGLIST from 7.2
  (if (and (setq strip-arguments
		 (cond ((atom function) nil)
		       ((eq (car function) 'defun-in-flavor) 2)
		       ((member (car function) flavor:*fdefinable-method-types*)
			#+3600 3)))
	   (not (and (listp function)    ;; DEFMACRO-IN-FLAVOR doesn't need anything stripped
		     (eql (car function) 'defun-in-flavor)
		     (eql type 'scl:macro)
		     (null strip-arguments-p))))
      (lt:remove-arguments-from-lambda-list strip-arguments arglist)
      arglist))

(defun print-arglist-internal (list stream)
  (lt:print-lambda-list list stream :brief t :error-p nil))

(defun print-filled-arglist (stream function arglist returns type)
  (scl:filling-output (stream)
    (with-character-style (`(:fix :bold :normal))
      (prin1 (sys:function-name function) stream))
    (cond ((eql type 'si:message)
	   (format stream " (message to ~S)" (first (sys:generic-function-arglist function))))
	  ((not (null type))
	   (format stream " (~@)" type)))
    (format stream ": ")
    (if (or (listp arglist) (null arglist))
	(print-arglist-internal arglist stream)
	(princ "??" stream))
    (when returns
      (when (> (+ (send stream :read-cursorpos :character)
		  (sys:flatsize returns))
	       (send stream :size-in-characters))
	(terpri stream))
      (format stream "  ~:A" returns))
    (when (or (symbolp function) (listp function))
      (let ((inline (si:function-spec-get function 'scl:inline))
	    (ftype  (si:function-spec-get function 'scl:ftype))
	    (function (si:function-spec-get function 'scl:function)))
	(when (eql inline 'scl:inline) (princ " (inline)" stream))
	(when (eql inline 'scl:notinline) (princ " (notinline)" stream))
	(when ftype (format stream " FTYPE: ~A" ftype))
	(when function (format stream " FUNCTION: ~A" function))))))

(defun print-arglist (function-spec type arglist returns &optional (stream *standard-output*))
  (fresh-line stream)
  (print-filled-arglist stream function-spec
			(maybe-strip-arguments function-spec type arglist)
			returns type))

(defparameter foo nil)

(defmethod present-procedure ((self showable-procedure)
			      &optional (stream *standard-output*) line-between-items)
  "Presents the procedure, and formats the arglist and documentation to STREAM.
This is called on all procedures that satisfy the apropos substring."
  (with-slots (btree:name) self
    (labels
      ((default-print-user-entry (stream documentation arglist returns type)
	 ;; allow the user to pass in the type information.  The reference
	 ;; system does this for constraints.
	 (cond (type (when (symbolp type) (setq type (string-capitalize-words type))))
	       ;; Default to the type of the BTREE:NAME, not the DEFINING-FORM.
	       ((symbolp btree:name) (setq type (get btree:name 'si:definition-type-name))))
	 (with-character-style (`(:fix :bold :normal))
	   (fresh-line stream)
	   (present btree:name 'sys:function-spec :stream stream))
	 (when line-between-items (terpri stream))
	 (format
	   stream
	   "~:[~; [~:*~A]~]: ~:[()~;~:*(~{~A~^ ~})~]~:[~; ~:* (~{~A~^ ~})~]~:[~;~&~:*  ~~A~~]"
	   type arglist returns documentation))
       (variable-type (var)
	 (cond ((get btree:name 'si:definition-type-name))
	       ((get var 'defconstant) "Constant")
	       (t "Variable"))))
      ;;main body
      (if *user-supplied-documentation-and-arglist-function*
	  ;; the user gave us a function to call.
	  (multiple-value-bind (documentation arglist returns type printing-function)
	      (funcall *user-supplied-documentation-and-arglist-function* btree:name)
	    (if printing-function
		;; he even gave us a printing function
		(funcall printing-function stream documentation arglist returns type)
		;; just do the usual default.
		(default-print-user-entry stream documentation arglist returns type)))
	  ;; standard method when no user info supplied
	  (cond ;; it a function object of some kind.
	    ((fdefinedp btree:name)
	     (multiple-value-bind (arglist returns type)
		 (arglist btree:name)
	       (when line-between-items (terpri stream))
	       (print-arglist btree:name type arglist returns stream)
	       (format stream "~&  ~~A~" (or (lisp:documentation btree:name) "Undocumented."))))
	    ((symbolp btree:name)
	     (when line-between-items (terpri stream))
	     (format stream "~&~'B~@\\presentation\\~ (~A): ~:[[unbound]~;~S~]~&~:[Undocumented~;~:*~A~]"
		     btree:name 'sys:form (variable-type btree:name) (boundp btree:name)
		     (when (boundp btree:name)
		       (or (symbol-value btree:name) 'nil))
		     (lisp:documentation btree:name 'defvar)))
	    (t (error "Don't know how to display ~S." btree:name)))))))


;;;------------------------------------------------------------------- 
;;;
;;; DOCUMENTING FUNCTIONS TO BUFFERS
;;;

(defmethod document-functions ((self showable-procedure) type &optional apropos)
  "Documents to a buffer the procedures of TYPE, optionally containing an APROPOS substring."
  (let* ((filename (format nil "Document-~A" (string-pluralize (string-capitalize type))))
	 (pathname (zwei:typein-line-accept 'fs:pathname
					    :default (fs:merge-pathname-defaults filename)
					    :prompt "Pathname"))
	 (buffer (send pathname :string-for-editor)))
    (zwei:with-editor-stream (*standard-output* :buffer-name buffer
						:create-p t)
      (format *standard-output*
	      "~&;;; -*- Mode: Fundamental -*- ~
               ~%;;; ~
               ~%;;; Warning:  This file was created under program control by ~A ~
               ~%;;;           on ~A, ~A. ~
               ~%;;; ~
               ~%;;; ~A ~
               ~%;;; ~2%"
	      fs:user-personal-name-first-name-first
	      (time:print-universal-date (time:parse-universal-time "Now") nil)
	      (time:timezone-string)
	      (if apropos
		  (format nil "Documenting ~A containing the substring: ~A."
			  (string-capitalize (string-pluralize type))
			  (string-upcase apropos))
		  (format nil "Documenting all ~A~P." (string-capitalize type))))
      (btree:apply-to-nodes self
			    :test-function #'satisfies-apropos
			    :test-arguments `(,apropos)
			    :application-function #'present-procedure
			    :application-arguments `(,*standard-output* t)))
    (format *query-io* "~&Done.")))


;;;------------------------------------------------------------------- 
;;;
;;;     NOTE: All variables are created with DEFVAR, so that this code will
;;;     not be dependent on Relatus or the Relatus Parser.
;;;

(defvar *defcoms-to-give-relatus* nil
  "These DEFCOMs can be exported to Relatus mode, once it's defined.")

;;; utility functions used below.

(defsubst symbolize (string &optional (pkg *package*))
  (intern (string-upcase (string-thin string)) pkg))

(defun concatenate-string (string &optional pkg)
  "Replaces with hyphens all spaces in a STRING."
  (intern (nstring-upcase (substitute #\- #\space (string-thin string) :test #'char-equal)) pkg))

(defmacro .spt-file-procedure. (procedure defining-form btree)
  `(with-area sys:working-storage-area
     (set ,btree (b-tree-store ,procedure ,defining-form ,btree #'alphalessp))))

(defmacro without-fdefinition-warnings (&body body)
  `(let ((sys:inhibit-fdefine-warnings t))
     . ,body))

(defun make-document-command-string (btree-var)
  (string-trim '(#\*) (symbol-name btree-var)))

;;; Setting up the special variable off which the binary tree will hang.
(defun .spt-define-the-special-var.
       (b-tree-var-type b-tree-var type)
  ;; this kludge shuts up compiler warnings about defvar and eval not
  ;; occuring at toplevel gavan should track down the causes in defproc
  ;; and fix them sometime.  
  ;; The cause is that this invokes DEFVAR and friends inside a DEFUN.
  ;; The fix is to Symbolics  8/2/87 -- Gavan
  `(compiler-let ((compiler:inhibit-style-warnings-switch t))
     (without-fdefinition-warnings
       (,b-tree-var-type ,b-tree-var nil
	,(format nil "A binary tree of all defined ~As." type)))))

;;;Defining macros which will file the procedures of the trees.

(defun .spt-define-the-filing-function. (b-tree-var file-function-name function-parent)
  `(defun ,file-function-name (name defining-form)
     (declare (sys:function-parent ,file-function-name ,function-parent))
     (.spt-file-procedure. name defining-form ',b-tree-var)))

(defun .spt-define-filing-function-for-extra-trees.
       (file-function-name trees function-parent)
  `(defun ,file-function-name (name defining-form)
     (declare (sys:function-parent ,file-function-name ,function-parent))
     (dolist (tree ,trees)
       (.spt-file-procedure. name defining-form tree))))

;;;------------------------------------------------------------------- 
;;;
;;; Retract from btrees 
;;;

(defun .spt-register-tree-for-type. (type tree)
  "Pushes a TREE or TREEs onto TYPE's :SPT-BTREE-VARIABLES property.
The property is used to retract definitions from binary trees."
  (if (listp tree)
      (dolist (var tree)
	(.spt-register-tree-for-type. type var))
      (pushnew tree (get type :spt-btree-variables))))

(defun retract-from-btrees (function-spec &aux trees)
  "Retracts FUNCTION-SPEC of showable-procedure DEFINITION-TYPE from its BTREEs."
  (multiple-value-bind (ignore definition-type)
      (sys:function-parent function-spec)
    (when (and definition-type (setq trees (get definition-type :spt-btree-variables)))
      (dolist (tree trees)
	(retract-from-btree tree function-spec)))))

(defun retract-from-btree (tree function-spec &aux root proc)
  "Retracts FUNCTION-SPEC from TREE."
  (when (and (setq root (symbol-value tree))
	     (setq proc (btree:btree-find root function-spec #'alphalessp)))
    (set tree (btree:retract proc #'alphalessp))))


;;;------------------------------------------------------------------- 
;;;
;;; DEFINING THE PROCEDURE TYPE. 
;;;
;;; The procedure type also dispatches the filing procedures constructed
;;; earlier by the forms above.
;;;


(defvar *additional-procedure-defining-procedures* nil
  "Procedure-definition procedures declared by the application programmer.")

(defun define-procedure-defining-procedure (&key name pretty-description)
  (cond ((null name)
	 (error "The NAME of a procedure-defining procedure must be provided."))
	((not (symbolp name))
	 (error "~S is not a symbol." name))
	((null pretty-description)
	 (error "The PRETTY-DESCRIPTION of a procedure-defining procedure must be provided."))
	((not (stringp pretty-description))
	 (error "~S is not a string."))
	(t (setq *additional-procedure-defining-procedures*
		 (delete name *additional-procedure-defining-procedures* :key #'car))
	   (push (cons name pretty-description)
		 *additional-procedure-defining-procedures*))))

(export 'define-procedure-defining-procedure)

(defun make-definition-type-property (type procedure-defining-procedure)	
  "Comes up with the property declaration to make the editor do the right thing."
  `(defprop ,type ,(case procedure-defining-procedure 
		     ((defun future-common-lisp:defun) "Function")
		     (defmacro "Macro")
		     (defsubst "Subst")
		     (defgeneric "Generic Function")
		     (defvar "Variable")
		     (defconstant "Constant")
		     (defparameter "Parameter")
		     (t (or (cdr (assoc procedure-defining-procedure 
					*additional-procedure-defining-procedures*))
			    (error "~S is not a known procedure-defining procedure. ~
                                 ~%Use DEFINE-PROCEDURE-DEFINING-PROCEDURE to make it one."
				   procedure-defining-procedure))))
	    si:definition-type-name))

(defun provide-useful-definition-type-properties (type definition-function
						  &aux setf-forms kill-definition-property)
  "Create code to install useful properties on defining forms."
  ;; collect the usual interesting properties.
  (setq setf-forms
	(loop for indicator in '(gprint::formatter zwei:definition-function-spec-parser
						   zwei:show-effect-handler
						   si:grind-macro compiler:make-obsolete
						   :undo-function si:definition-type-name
						   zwei:definition-function-spec-type)
	      for val = (get definition-function indicator)
	      when val
		collect `(setf (get ',type ',indicator)
			       ,(cond ((compiled-function-p val)
				       `(function ,(si:function-name val)))
				      ((stringp val) val)
				      (t `(quote ,val)))))

	kill-definition-property (get definition-function 'zwei:kill-definition))
  ;; find the kill definition property and wrap a retract-from-btrees in with it.
  ;; this approach allows functions other fundefine to be used
  (when kill-definition-property
    (push `(setf (get ',type 'zwei:kill-definition)
		 '(lambda (spec)
		    (multiple-value-prog1
		      (,(if (compiled-function-p kill-definition-property)
			    (si:function-name kill-definition-property)
			    kill-definition-property)
		       spec)
		      (setq zwei:*irrelevant-functions* (delete ',type zwei:*irrelevant-functions*))
		      (setq zwei:*irrelevant-defining-forms* (delete ',type zwei:*irrelevant-defining-forms*))
		      (retract-from-btrees spec))))
	  setf-forms))
  ;; these variable make ZMACS do the right think for list callers and friends
  ;; which need to know relevant definitions of interest.  6/9/94 -- JCMa.
  (push `(pushnew ',type zwei:*irrelevant-defining-forms*) setf-forms)
  (push `(pushnew ',type zwei:*irrelevant-functions*) setf-forms)
  setf-forms)

;; sys:function-parent is broken
(defun .insert-function-parent-declaration. (declarations function-parent type)
  "Inserts function parent declaration into declarations if they exist."
  `(declare (sys:function-parent ,type ,function-parent)
	    ,@(cdar declarations)))

;; the version in release 7.0 is still broken
(defun .find-body-declarations. (body env)
  "Separate the declarations from the body. Based on SI:FIND-BODY-DECLARATIONS"
  (declare (values declarations doc-string real-body first-form-already-macro-expanded))
  (loop	with string-seen = nil
	for real-body on body
	for form = (first real-body)
	for expanded-form = form
	while (typecase form
		(list (cond ((eq (first form) 'declare))
			     ((setf expanded-form (macroexpand form env t))
			      (cond ((and (listp expanded-form)
					  (eq (first expanded-form) 'declare)))
				    ((and (stringp expanded-form)
					  (not string-seen)
					  (cdr real-body)
					  (setf string-seen expanded-form)))
				    (t nil)))
			     (t nil)))
		(string (and (not string-seen)
			     (cdr real-body)
			     (setf string-seen expanded-form))))
	unless (stringp expanded-form)
	  collect expanded-form into declarations
	finally (return (values declarations
				(and string-seen `(,string-seen))
				real-body
				(and real-body expanded-form)))))


(defun .spt-define-the-special-form.
       (procedure-defining-procedure type doc-string indexation-function-name function-parent)
  "Defines the special form for defining showable procedures."
  (cond ((member procedure-defining-procedure '(defvar defconstant defparameter) :test #'eq)
	 `(,(make-definition-type-property type procedure-defining-procedure)
	   ,@(provide-useful-definition-type-properties type procedure-defining-procedure)
	   (defmacro ,type (name &body body)
	     ,doc-string
	     (declare (sys:function-parent ,type ,function-parent))
	     `(progn 'compile
		     (,',indexation-function-name ',name)
		     ;; main event
		     (,',procedure-defining-procedure ,name ,@body)))))
	(procedure-defining-procedure
	 `(,(make-definition-type-property type procedure-defining-procedure)
	   ,@(provide-useful-definition-type-properties type procedure-defining-procedure)
	   (defmacro ,type (name lambda-list &body body)
	     ,doc-string
	     (declare (sys:function-parent ,type ,function-parent))
	     (multiple-value-bind (declarations docs real-body)
		 (.find-body-declarations. body nil)
	       `(progn 'compile
		       (,',indexation-function-name ',name)
		       ;; main event
		       (,',procedure-defining-procedure ,name ,lambda-list
			,@docs
			,(.insert-function-parent-declaration. declarations ',type name)
			;;since expanded no need for ,@
			,@real-body)
		       )))))
	(t nil)))

(defun .spt-define-the-indexation-function. (indexation-function-name type file-function-name
					     extra-file-function-name function-parent)
  "Composes a single function to be called at procedure compile time.
The single function defined here does all the bookkeeping work."
  `(defun ,indexation-function-name (name)
     (declare (sys:function-parent ,type ,function-parent))
     ,@(when file-function-name `((,file-function-name name ',type)))
     ,@(when extra-file-function-name `((,extra-file-function-name name ',type)))
     (record-source-file-name name ',type)
     name))

;;;------------------------------------------------------------------- 
;;;
;;; DEFINING THE ZMACS COMMAND TO DOCUMENT PROCEDURE TYPES TO A BUFFER.
;;;

(defvar *string-for-documenting-showproc-show-functions*
	"Explains ~As mouse-sensitively in the display stream.  
  The apropos substring can be used to display only those ~As you are interested in.  
  Mousing left on the ~A will allow you to edit it in a ZMACS buffer."
  "A documentation string used for the procedures which actually
  show the showable procedures.")

;; Creating a function with which to document forms on the binary tree.

(defun .spt-define-document-function.
       (document-to-buffer-function-name type b-tree-var user-supplied-function
	function-parent
	&optional (prompt-string "Apropos"))
  `(defun ,document-to-buffer-function-name ()
     (declare (sys:function-parent ,document-to-buffer-function-name ,function-parent))
     (let ((apropos (string-trim '(#\Space)
				 (zwei:typein-line-accept 'string
							  :prompt ,prompt-string
							  :default nil))))
       (when apropos
	 (if (notany #'characterp apropos) (setq apropos nil)))
       (let ((node (symbol-value ',b-tree-var)))
	 (when node
	   (with-user-supplied-documentation-and-arglist-function ,user-supplied-function
	     (document-functions node ',type apropos)))))))

;;Defining the DEFCOM with which to document procedure types to ZMACS.
(defun .spt-define-zmacs-command-for-documentation.
       (type document-defcom document-to-buffer-function-name)
  (let ((documentation (format nil "Documents the ~As used in Relatus." type)))
    `(zwei:defcom ,document-defcom ,documentation (zwei:km)
       (,document-to-buffer-function-name)
       zwei:dis-none)))


;;;------------------------------------------------------------------- 
;;;
;;; DEFINING THE ZMACS COMMAND TO SHOW PROCEDURE TYPES
;;;

(defun .spt-define-show-function. (show-function-name
				   type b-tree-var user-supplied-function function-parent
				   &optional (prompt-string "Apropos"))
  `(defun ,show-function-name (&optional apropos-substring &aux apropos)
     ,(format nil *string-for-documenting-showproc-show-functions*
	      type type type)
     (declare (sys:function-parent ,show-function-name ,function-parent))
     (or apropos-substring
	 (setq apropos-substring (zwei:typein-line-accept 'string
							  :prompt ,prompt-string
							  :default nil)))
     (when apropos-substring
       (if (notany #'characterp (setq apropos (string-trim " " apropos-substring)))
	   (setq apropos nil)))
     (let ((node (symbol-value ',b-tree-var)))
       (when (typep node 'showable-procedure)
	 (with-user-supplied-documentation-and-arglist-function ,user-supplied-function
	   (show-functions node apropos))))))

(defun .spt-define-zmacs-command-for-showing-function.
       (type defcom show-function-name)
  (let ((documentation (format nil "Displays currently defined ~As." type)))
    `(zwei:defcom ,defcom ,documentation (zwei:km) (,show-function-name) zwei:dis-none)))


;;;------------------------------------------------------------------- 
;;;
;;; INSTALLING ZMACS COMMANDS                 
;;;

(defun install-zmacs-command (comtab command meta-x-string &optional key-binding)
  "Installs a ZMACS command."
  `(zwei:set-comtab
     ,comtab
     ;;key binding
     ,(if key-binding `'(,key-binding ,command) nil)
     ;; meta-x command
     '((,meta-x-string . ,command))))


;;;------------------------------------------------------------------- 
;;;
;;; Pull all this crud together                 
;;;

(defmacro with-info-required-for-showable-procedure-btree-definition
	  (zmacs-meta-x-command-string &body body)
  `(let* ((show-function-name (concatenate-string ,zmacs-meta-x-command-string package))
;;	  (PROCEDURE-STRING (MAKE-DOCUMENT-COMMAND-STRING ,B-TREE-VAR))
	  (document-to-buffer-zmacs-meta-x-command-string
	    (format nil "Document ~A to buffer" ,zmacs-meta-x-command-string))
	  (document-to-buffer-function-name
	    (symbolize
	      (nsubstitute #\- #\Space
			   (string-upcase document-to-buffer-zmacs-meta-x-command-string)
			   :test #'char-equal)
	      package))
	  (defcom (symbolize (format nil "COM-SHOW-~A" show-function-name) package))
	  (document-defcom
	    (symbolize (format nil "COM-DOCUMENT-~A" show-function-name) package)))
     ,@body))

(defun make-code-to-defshowable-procedure-type
       (type procedure-defining-procedure doc-string other-btrees 
	b-tree-var b-tree-var-type doc-and-arglist-fcn
	zmacs-meta-x-command-string prompt-string key-binding function-parent
	&aux file-function-name	extra-file-function-name
	indexation-function-name (package *package*))
  (setq indexation-function-name (symbolize (format nil "INDEX-THE-~A" type) package))
  (and b-tree-var (not (boundp b-tree-var)) (setf (symbol-value-globally b-tree-var) nil))
  (pushnew type zwei:*irrelevant-defining-forms*)
  (pushnew type zwei:*irrelevant-functions*)
  (unless type (error "No special form was defined."))
  (when other-btrees
    (setq extra-file-function-name
	  (symbolize (format nil "FILE-THE-~A-ON-OTHER-TREES" type) package)))
  (when b-tree-var
    (setq file-function-name 
	  (symbolize (format nil "FILE-THE-~A" type) package)))
  (let ((zmacs-show-string (if (search "Show" zmacs-meta-x-command-string
				       :start2 0 :end2 4 :test #'char-equal)
			       zmacs-meta-x-command-string
			       (concatenate 'string "Show " zmacs-meta-x-command-string))))
    `(zl:local-declare ((sys:function-parent ,type ,function-parent))
       ,@(when b-tree-var
	   (with-info-required-for-showable-procedure-btree-definition
	     zmacs-meta-x-command-string
	     `(,`(unless (and (boundp ',b-tree-var) ,b-tree-var)
		   ,(.spt-define-the-special-var. b-tree-var-type b-tree-var type))
	       ,`(.spt-register-tree-for-type. ',type ',b-tree-var)
	       ,(.spt-define-the-filing-function.
		  b-tree-var file-function-name function-parent)
	       ,(.spt-define-show-function.
		  show-function-name type b-tree-var
		  doc-and-arglist-fcn function-parent prompt-string)
	       ,(.spt-define-zmacs-command-for-showing-function.
		  type defcom show-function-name)
	       ,(install-zmacs-command
		  'zwei:*standard-comtab* defcom zmacs-show-string key-binding)
	       ,(.spt-define-document-function.
		  document-to-buffer-function-name type b-tree-var 
		  doc-and-arglist-fcn function-parent prompt-string)
	       ,(.spt-define-zmacs-command-for-documentation.
		  type document-defcom document-to-buffer-function-name)
	       ,(install-zmacs-command
		  'zwei:*standard-comtab*
		  document-defcom document-to-buffer-zmacs-meta-x-command-string))))
       ,(when other-btrees
	  (.spt-define-filing-function-for-extra-trees.
	    extra-file-function-name other-btrees function-parent))
       ;; must come after the definition of the filing functions for regular and extra.
       ,(.spt-define-the-indexation-function.
	  indexation-function-name type file-function-name extra-file-function-name
	  function-parent)
       ,@(.spt-define-the-special-form.
	   procedure-defining-procedure type doc-string 
	   indexation-function-name function-parent))))


;;;------------------------------------------------------------------- 
;;;
;;; REINDEXING  8/10/88 -- JCMa
;;;

;;; when there is some indexation lossage, this procedure can be used to
;;; reindex the lost procedures.  By running a form analogous to this example,
;;; and adding the resulting forms to a patch inside an eval-when, the
;;; indexation can be patched back in.
;;;
;;;`(EVAL-WHEN (LOAD)
;;;   ,@(FORMS-TO-REINDEX-DEFINED-PROCEDURES '((RL:DEFG . RL:INDEX-THE-DEFG)
;;;					    (RL:DEFGMACRO . RL:INDEX-THE-DEFGMACRO)
;;;					    (RL:DEFGSUBST . RL:INDEX-THE-DEFGSUBST)
;;;					    (RL:DEFGGENERIC . RL:INDEX-THE-DEFGGENERIC))
;;;					  '("rl")))

(defun find-defined-symbols-in-package (package defining-forms table)
  (labels ((fctn (symbol)
	     (declare (sys:downward-function))
	     (let ((source-file-alist (get symbol :source-file-name)))
	       (when (listp source-file-alist)
		 (mapc #'(lambda (d-form)
			   (when (assoc d-form source-file-alist :test #'eq)
			     (modify-hash table d-form #'(lambda (ignore value ignore)
							   (cons symbol value)))))
		       defining-forms)))))
    ;; map the function over the package
    (zl:mapatoms #'fctn package)))

(defun forms-to-reindex-defined-procedures (form-index-function-alist packages &aux forms)
  (let ((defining-forms (mapcar #'car form-index-function-alist))
	(table (make-hash-table :test #'eq)))
    (loop for pkg in packages
	  do (find-defined-symbols-in-package pkg defining-forms table))
    (maphash #'(lambda (key value)
		 (declare (sys:downward-function))
		 (let ((fctn (cdr (assoc key form-index-function-alist :test #'eq))))
		   (push `(mapc (function ,fctn) ',value) forms)))
	     table)
    forms))
