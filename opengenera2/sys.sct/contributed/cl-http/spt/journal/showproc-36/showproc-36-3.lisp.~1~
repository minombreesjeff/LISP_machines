;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: spt; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for SHOWABLE-PROCEDURES version 36.3
;;; Reason: Function SPT::SYMBOLIZE:  fix lossage.
;;; Function SPT::CONCATENATE-STRING:  update.
;;; Function SPT::WITH-INFO-REQUIRED-FOR-SHOWABLE-PROCEDURE-BTREE-DEFINITION:  update.
;;; Function SPT::MAKE-CODE-TO-DEFSHOWABLE-PROCEDURE-TYPE:  update.
;;; Written by JCMa, 10/17/96 19:21:25
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-11-HTTP-60-D-MIT-8-3.ilod.1
;;; with Genera 8.3, Logical Pathnames Translation Files NEWEST, NFS Server 435.0,
;;; Metering 439.0, Metering Substrate 439.0, Conversion Tools 430.0, Hacks 435.0,
;;; CLIM 66.5, Genera CLIM 66.0, PostScript CLIM 66.2, CLIM Documentation 66.0,
;;; 8-3-Patches 1.31, MAC 412.7, Statice Runtime 460.4, Statice 460.1,
;;; Statice Browser 460.0, Statice Documentation 423.0, DBFS Utilities 439.0,
;;; Showable Procedures 36.2, Binary Tree 34.0, Mailer 434.0,
;;; Experimental Working LispM Mailer 6.0, HTTP Server 60.46,
;;; W3 Presentation System 2.1, CL-HTTP Server Interface 48.1,
;;; Symbolics Common Lisp Compatibility 3.0, Experimental Comlink Packages 4.2,
;;; Experimental Comlink Utilities 9.14, Experimental Routing Taxonomy 8.1,
;;; Experimental COMLINK Database 10.20, Experimental Email Servers 11.8,
;;; Experimental Comlink Customized LispM Mailer 6.7,
;;; Experimental Dynamic Forms 11.10,
;;; Experimental Communications Linker Server 38.30, Jcma 41,
;;; HTTP 1.0 Base Client 35.3, Image Substrate 435.0,
;;; Essential Image Substrate 427.0, Ivory Revision 4A, FEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.3a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1, Macintosh System Software 7.5.5,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376, Macintosh,
;;; Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.5),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.22),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.8),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.47),
;;; Ephemeral gc reclamation patch (from SYS:8-3-PATCHES;PATCH;8-3-PATCHES-1-31.LISP.3).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "SPT:SPT;SHOWABLE-PROCEDURES.LISP.163")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SPT:SPT;SHOWABLE-PROCEDURES.LISP.163")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Package: showproc; Base: 10.; Mode: LISP; Syntax: common-lisp; -*-")

;;; utility functions used below.

(defsubst symbolize (string &optional (pkg *package*))
  (intern (string-upcase (string-thin string)) pkg))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SPT:SPT;SHOWABLE-PROCEDURES.LISP.163")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Package: showproc; Base: 10.; Mode: LISP; Syntax: common-lisp; -*-")

(defun concatenate-string (string &optional pkg)
  "Replaces with hyphens all spaces in a STRING."
  (intern (nstring-upcase (substitute #\- #\space (string-thin string) :test #'char-equal)) pkg))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SPT:SPT;SHOWABLE-PROCEDURES.LISP.163")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Package: showproc; Base: 10.; Mode: LISP; Syntax: common-lisp; -*-")

;;;------------------------------------------------------------------- 
;;;
;;; Pull all this crud together                 
;;;

(defmacro with-info-required-for-showable-procedure-btree-definition
	  (zmacs-meta-x-command-string &body body)
  `(let* ((show-function-name (concatenate-string ,zmacs-meta-x-command-string package))
;;	  (PROCEDURE-STRING (MAKE-DOCUMENT-COMMAND-STRING ,B-TREE-VAR))
	  (document-to-buffer-zmacs-meta-x-command-string
	    (format nil "Document ~A to buffer" ,zmacs-meta-x-command-string))
	  (document-to-buffer-function-name
	    (symbolize
	      (nsubstitute #\- #\Space
			   (string-upcase document-to-buffer-zmacs-meta-x-command-string)
			   :test #'char-equal)
	      package))
	  (defcom (symbolize (format nil "COM-SHOW-~A" show-function-name) package))
	  (document-defcom
	    (symbolize (format nil "COM-DOCUMENT-~A" show-function-name) package)))
     ,@body))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SPT:SPT;SHOWABLE-PROCEDURES.LISP.163")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Package: showproc; Base: 10.; Mode: LISP; Syntax: common-lisp; -*-")

(defun make-code-to-defshowable-procedure-type
       (type procedure-defining-procedure doc-string other-btrees 
	b-tree-var b-tree-var-type doc-and-arglist-fcn
	zmacs-meta-x-command-string prompt-string key-binding function-parent
	&aux file-function-name	extra-file-function-name
	indexation-function-name (package *package*))
  (setq indexation-function-name (symbolize (format nil "INDEX-THE-~A" type) package))
  (and b-tree-var (not (boundp b-tree-var)) (setf (symbol-value-globally b-tree-var) nil))
  (pushnew type zwei:*irrelevant-defining-forms*)
  (pushnew type zwei:*irrelevant-functions*)
  (unless type (error "No special form was defined."))
  (when other-btrees
    (setq extra-file-function-name
	  (symbolize (format nil "FILE-THE-~A-ON-OTHER-TREES" type) package)))
  (when b-tree-var
    (setq file-function-name 
	  (symbolize (format nil "FILE-THE-~A" type) package)))
  (let ((zmacs-show-string (if (search "Show" zmacs-meta-x-command-string
				       :start2 0 :end2 4 :test #'char-equal)
			       zmacs-meta-x-command-string
			       (concatenate 'string "Show " zmacs-meta-x-command-string))))
    `(zl:local-declare ((sys:function-parent ,type ,function-parent))
       ,@(when b-tree-var
	   (with-info-required-for-showable-procedure-btree-definition
	     zmacs-meta-x-command-string
	     `(,`(unless (and (boundp ',b-tree-var) ,b-tree-var)
		   ,(.spt-define-the-special-var. b-tree-var-type b-tree-var type))
	       ,`(.spt-register-tree-for-type. ',type ',b-tree-var)
	       ,(.spt-define-the-filing-function.
		  b-tree-var file-function-name function-parent)
	       ,(.spt-define-show-function.
		  show-function-name type b-tree-var
		  doc-and-arglist-fcn function-parent prompt-string)
	       ,(.spt-define-zmacs-command-for-showing-function.
		  type defcom show-function-name)
	       ,(install-zmacs-command
		  'zwei:*standard-comtab* defcom zmacs-show-string key-binding)
	       ,(.spt-define-document-function.
		  document-to-buffer-function-name type b-tree-var 
		  doc-and-arglist-fcn function-parent prompt-string)
	       ,(.spt-define-zmacs-command-for-documentation.
		  type document-defcom document-to-buffer-function-name)
	       ,(install-zmacs-command
		  'zwei:*standard-comtab*
		  document-defcom document-to-buffer-zmacs-meta-x-command-string))))
       ,(when other-btrees
	  (.spt-define-filing-function-for-extra-trees.
	    extra-file-function-name other-btrees function-parent))
       ;; must come after the definition of the filing functions for regular and extra.
       ,(.spt-define-the-indexation-function.
	  indexation-function-name type file-function-name extra-file-function-name
	  function-parent)
       ,@(.spt-define-the-special-form.
	   procedure-defining-procedure type doc-string 
	   indexation-function-name function-parent))))

