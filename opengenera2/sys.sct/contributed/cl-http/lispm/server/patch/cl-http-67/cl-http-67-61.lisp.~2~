;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.61
;;; Reason: Function (CLOS:METHOD HTTP::UPDATE-USER (HTTP::USER)):  use *-supplied-p args for conditional updating.
;;; Export update-user.
;;; Function HTTP::BINARY-STREAM-COPY-INTO-8-BIT-ARRAY:  new stream operation.
;;; Function (CLOS:METHOD HTTP::BINARY-STREAM-COPY-INTO-8-BIT-ARRAY (T T)):  portable implementation.
;;; Function HTTP::BINARY-STREAM-COPY-FROM-8-BIT-ARRAY:  new stream operation.
;;; Function (CLOS:METHOD HTTP::BINARY-STREAM-COPY-FROM-8-BIT-ARRAY (T T)):  portable implementation.
;;; Written by JCMa, 6/23/98 12:04:12
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.60, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.110, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.32,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST,
;;; W4 Constraint-Guide Web Walker 38.7, HTTP Client Substrate 1.13, Jcma 41,
;;; HTTP Proxy Server 2.11,
;;; Experimental Knowledge-Based Collaboration Webs System 19.0,
;;; The Project Planner 14.0, Experimental URN Resolver 4, HTTP Client 48.4,
;;; Experimental Image Substrate 438.1, Experimental Essential Image Substrate 431.0,
;;; Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.1, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7),
;;; Hacks to DW to let us kludge by. (from PROJECT-PLANNER:CODE;SYSTEM-PATCHES.LISP.6),
;;; Provide MIME Type on Document formats. (from KBCW:SUBSTRATE;DB-DOCUMENT-MIME-TYPE.LISP.25).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;AUTHENTICATION.LISP.139"
  "HTTP:SERVER;UTILS.LISP.358")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;AUTHENTICATION.LISP.139")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(defmethod update-user ((user user) &key (personal-name nil personal-name-supplied-p)
			(email-address nil email-address-supplied-p) (password nil password-supplied-p)
			groups &allow-other-keys
                        &aux realm)
  (flet ((get-user-realm ()
           (or realm (setq realm (user-realm user)))))
    (declare (inline get-user-realm))
    (cond-every
      (email-address-supplied-p ;; change the users's email address
        (setf (user-email-address user) email-address))
      (personal-name-supplied-p ;; Change the user's personal name.
        (setf (user-personal-name user) personal-name))
      (password-supplied-p ;;change the user's password
        (setf (user-password-digest user) (make-user-password-digest (get-user-realm) user password))))
    (let* ((current-groups (user-groups user))
           (n-groups (loop for g in groups
                           collect (intern-group (get-user-realm) g)))
           (add-groups (set-difference n-groups current-groups))
           (del-groups (set-difference current-groups n-groups)))
      (declare (dynamic-extent n-groups add-groups del-groups))
      (dolist (g add-groups)
        (group-add-user g user))
      (dolist (g del-groups)
        (group-remove-user g user)))
    user))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;AUTHENTICATION.LISP.139")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(export (intern "UPDATE-USER" :http) :http)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.358")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

;; Specialize this method on ports for higher performance.
(define-generic binary-stream-copy-into-8-bit-array (stream n-bytes &optional start 8-bit-array)
  (declare (values 8-bit-array length))
  (:documentation "Copies N-BYTES bytes from STREAM into an array which is returned.
The returned array will have size (+ start n-bytes)  and a fill pointer.
A new array is not created when 8-BIT-ARRAY is supplied.
If N-BYTES is NIL, this copies bytes until EOF."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.358")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod binary-stream-copy-into-8-bit-array (stream n-bytes &optional (start 0) 8-bit-array &aux size)
   (flet ((make-the-array (size fill-pointer)
	        (make-array size :fill-pointer fill-pointer :adjustable t :element-type '(unsigned-byte 8)))
	    (adjust-the-array (array size fill-pointer)
	       (let ((new-array (adjust-array array size :fill-pointer fill-pointer :element-type '(unsigned-byte 8))))
                  #+testing(unless (eq new-array array) (format t "New array in adjustment."))
	          new-array))
	    (new-size (size)
	       (cond ((< size 64000) (* 2 size))
		        (t (truncate (* size 1.2))))))
      (declare (inline make-the-array adjust-the-array new-size))
      (cond (n-bytes
                 (setq size (+ n-bytes start))
                 (cond ((null 8-bit-array)
                            (setq 8-bit-array (make-the-array size start)))
                          ((< (array-total-size 8-bit-array) size)
                            (setq 8-bit-array (adjust-the-array 8-bit-array size start))))
                 (with-fast-array-references ((array 8-bit-array array))
                     (loop with fill-pointer = start
                              for idx upfrom 0 below size 
                              for byte = (read-byte stream t)
                              do (setf (aref array idx) byte)
                              finally (setf (fill-pointer array) idx)
                              (return (values array fill-pointer)))))
               ;; the size and growth issues are open to experimentation and better
               ;; algorithms that do less work.  7/26/95 -- JCMa.
               (t (cond ((null 8-bit-array)
                             (setq size (+ 1000 start)
                                      8-bit-array (make-the-array size start)))
                            (t (setq size (array-total-size 8-bit-array))))
                   (with-fast-array-references ((array 8-bit-array array))
                       (loop with fill-pointer = start
                                for byte = (read-byte stream nil nil)
                                while byte
                                do (when (= size fill-pointer)
                                         (setq array (adjust-the-array array (setq size (new-size size)) fill-pointer)))
                                (setf (aref array fill-pointer) byte)
                                (incf fill-pointer)
                                finally (setf (fill-pointer array) fill-pointer)
                                (return (values array fill-pointer))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.358")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

;; Specialize this method on ports for higher performance.
(define-generic binary-stream-copy-from-8-bit-array (from-array stream &optional start end)
  (:documentation "Copies the contents of FROM-ARRAY to STREAM.
FROM-ARRAY must a one dimensional array of 8 bit bytes and have a fill pointer."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.358")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod binary-stream-copy-from-8-bit-array (from-array stream &optional (start 0) end)
  (with-fast-array-references ((from-array from-array array))
    (loop for idx upfrom start below (or end (length from-array))
          do (write-byte (aref from-array idx) stream))))

