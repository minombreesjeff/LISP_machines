;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.65
;;; Reason: Function TCP::BINARY-STREAM-COPY-UNTIL-EOF-INTO-8-BIT-ARRAY:  set the fill pointer very buffer in case we signal through it.
;;; Function TCP::CRLF-STREAM-COPY-INTO-STRING:  ditto.
;;; Written by JCMa, 7/23/98 17:46:23
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-72-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.64,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.1,
;;; Comlink Utilities 9.41, COMLINK Cryptography 1.1, Routing Taxonomy 8.3,
;;; COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.32,
;;; Jcma 41, W4 Constraint-Guide Web Walker 39.1, HTTP Client Substrate 1.15,
;;; HTTP Client 48.7, Experimental Image Substrate 438.1,
;;; Experimental Essential Image Substrate 431.0, HTTP Proxy Server 2.11,
;;; W4 Examples 11.0, Experimental URN Resolver 6, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.131")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.131")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defun binary-stream-copy-until-eof-into-8-bit-array (stream &optional (start 0) 8-bit-array &aux size)
  (flet ((make-the-array (size fill-pointer)
	   (make-array size :fill-pointer fill-pointer :adjustable t :element-type '(unsigned-byte 8)))
	 (adjust-the-array (array size fill-pointer)
	   (let ((new-array (adjust-array array size :fill-pointer fill-pointer
					  :element-type '(unsigned-byte 8))))
	     #+testing(unless (eq new-array array) (format t "New array in adjustment."))
	     new-array))
	 (new-size (size)
	   (cond ((< size 64000) (* 2 size))
		 (t (truncate (* size 1.2))))))
    (declare (inline make-the-array adjust-the-array new-size))
    (cond ((null 8-bit-array)
	   (setq size (+ 1000 start)
		 8-bit-array (make-the-array size start)))
	  (t (setq size (array-total-size 8-bit-array))))
    (cond ;; buffer level copying
      ((operation-handled-p stream :read-input-buffer)
       ;; If it can go, this mode is the most efficient by far.
       (loop with fill-pointer = start
	     for s = fill-pointer
	     doing (multiple-value-bind (buffer offset limit)
		       (send stream :read-input-buffer)
		     (cond ((null buffer)
			    (setf (fill-pointer 8-bit-array) fill-pointer)
			    (return (values 8-bit-array fill-pointer)))
			   (t (setq fill-pointer (+ s (- limit offset)))
			      (when (> fill-pointer size)
				(setq 8-bit-array (adjust-the-array 8-bit-array (setq size (new-size fill-pointer)) fill-pointer)))
			      (copy-array-portion buffer offset limit 8-bit-array s fill-pointer)
			      (setf (fill-pointer 8-bit-array) fill-pointer)
			      (send stream :advance-input-buffer))))))
      ;; This always wins, but is incredibly slow.
      (t (let ((array 8-bit-array))
	   (declare (sys:array-register vector))
	   (loop with fill-pointer = start
		 for byte = (read-byte stream nil nil)
		 while byte
		 do (when (= size fill-pointer)
		      (setq array (adjust-the-array array (setq size (new-size size)) fill-pointer)))
		    (setf (aref array fill-pointer) byte)
		    (incf fill-pointer)
		 finally (setf (fill-pointer array) fill-pointer)
			 (return (values array fill-pointer))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.131")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defun crlf-stream-copy-into-string (stream &optional nbytes (start 0) string &aux size)
  (flet ((make-the-string (size fill-pointer)
           (make-array size :fill-pointer fill-pointer :adjustable t :element-type 'character))
         (adjust-the-string (string size fill-pointer)
           (let ((new-string (adjust-array string size :fill-pointer fill-pointer
                                           :element-type http::*standard-character-type*)))
             #+testing(unless (eq new-string string) (format t "New array in adjustment."))
             new-string))
         (new-size (size)
           (cond ((< size 64000) (* 2 size))
                 (t (truncate (* size 1.2))))))
    (declare (inline make-the-string adjust-the-string new-size))
    (cond (nbytes
           (setq size (+ nbytes start))
           (cond ((null string)
                  (setq string (make-the-string size start)))
                 ((< (array-total-size string) size)
                  (setq string (adjust-array string size :fill-pointer start :element-type 'character))))
           (multiple-value-bind (idx fill-pointer)
               (binary-stream-copy-into-8-bit-array stream nbytes 0 string)
             idx                                ;ignore
             (setf (fill-pointer string) fill-pointer)
             (values string fill-pointer)))
          ;; the size and growth issues are open to experimentation and better
          ;; algorithms that do less work.  7/26/95 -- JCMa.
          (t (cond ((null string)
                    (setq size (+ start 1000)
                          string (make-the-string size start)))
                   (t (setq size (array-total-size string))))
             (loop with fill-pointer = start
                   for s = fill-pointer
                   doing (multiple-value-bind (buffer offset limit)
                             (send stream :read-input-buffer)
                           (cond ((null buffer)
                                  (setf (fill-pointer string) fill-pointer)
                                  (return (values string fill-pointer)))
                                 (t (setq fill-pointer (+ s (- limit offset)))
                                    (when (> fill-pointer size)
                                      (setq string (adjust-the-string string (setq size (new-size fill-pointer)) fill-pointer)))
                                    (copy-array-portion buffer offset limit string s fill-pointer)
				    (setf (fill-pointer string) fill-pointer)
                                    (send stream :advance-input-buffer)))))))))

