;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.4
;;; Reason: DEFINE-CONDITION HTTP::BAD-SERVER-RESPONSE:  fix type for RESPONSE iv.
;;; Function URL:INITIALIZE-RESPONSE-CACHE-CONTROL-DIRECTIVES:  fix docstring typo.
;;; Function HTTP::UNESCAPING-SPECIAL-CHARS:  remove bogus write char.
;;; Function HTTP:STRING-UNESCAPE-SPECIAL-CHARS:  fix declaration typo.
;;; Function (CLOS:METHOD TQ:TASK-QUEUE-EXECUTE-PENDING-TASKS (HTTP::PROCESS-QUEUED-LOGGING-MIXIN)):  
;;; Use CL for multiple class clause in typecase.
;;; Function WWW-UTILS:COND-EVERY:  optimize for cond = t case.
;;; Function HTTP::PRINT-MIME-CONTENT-TYPE-SEQUENCE-HEADER:  make CMU lisp happy.
;;; Written by JCMa, 9/30/97 22:30:44
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-69-HTTP-67-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.0, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.3,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Experimental Comlink Packages 5.0,
;;; Comlink Utilities 9.38, COMLINK Cryptography 1.0, Routing Taxonomy 8.2,
;;; COMLINK Database 10.85, Email Servers 11.18,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.12,
;;; Communications Linker Server 38.69,
;;; Experimental Lambda Information Retrieval System 12.12, Jcma 41,
;;; HTTP Client 45.1, Experimental Image Substrate 438.1,
;;; Experimental Essential Image Substrate 431.0, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.0,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;HTTP-CONDITIONS.LISP.145"
  "HTTP:SERVER;URL.LISP.294"
  "HTTP:SERVER;LOG.LISP.158"
  "HTTP:SERVER;UTILS.LISP.337"
  "HTTP:SERVER;HEADERS.LISP.332")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.145")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(define-condition bad-server-response
                  (bad-syntax-provided)
  ((reason :initform "Bad Response: Ill-Formed Server Response")
   (response :initform nil :initarg :response))
  (:documentation "Signalled a server response to an HTTP request is unparsable."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.294")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; CACHE CONTROL
;;;

(define-generic initialize-response-cache-control-directives (http-cache-control-mixin export-args)
  (:documentation "Top-level method for initializing the HTTP Cache Control of a URL.
This method allows cache control directives to be associated with a url and served
at run time. See HTTP:EXPORT-URL for the available directives."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.337")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(define unescaping-special-chars (in-stream out-stream &optional only-safe-characters-p)
  (flet ((escape-char (char out-stream)
           (let ((digit-chars (escape-character char 'cons)))
             (declare (dynamic-extent digit-chars))
             (dolist (ch digit-chars)
               (write-char ch out-stream))))
         (unescaped-char (in-stream)
           (let ((string (make-string 2)))
             (declare (dynamic-extent string))
             (setf (aref string 0) (read-char in-stream)
                   (aref string 1) (read-char in-stream))
             ;; Handle improperly formed hex encoded special charactes by
             ;; just leaving them in place. This was problem because html generator wasn't 
             ;; escaping search components of search URLs-- JCMa 5/14/1995.
             (handler-case-if  
                 (not *debug-server*)
                (let ((char-code (parse-integer string :radix 16 :start 0 :end 2)))
                  (code-char char-code))
               (error ()
                      (write-char *escape-character* out-stream)
                      (write-char (aref string 0) out-stream)
                      (aref string 1))))))      ; return the last char
    (declare (inline unescaped-char escape-char))
    (loop for char = (read-char in-stream nil)
          while char
          when (escape-character-p char)
            do (let ((nchar (unescaped-char in-stream)))
                 #+ignore                       ;removed kludge for mac-mosaic   8/31/95 -- JCMa.
                 (unless (member nchar '(#\Ù) :test #'char=)  ;lose random termination char from MAC Mosaic
                   (write-char nchar out-stream))
                 (if (and only-safe-characters-p (uri-reserved-or-unsafe-char-p nchar))
                     (escape-char nchar out-stream)
                     (write-char nchar out-stream)))
          else do (write-char char out-stream))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.337")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

;(define string-unescape-special-chars (string &optional (start 0) (end (length string) end-supplied-p))
;   "When any escaped characters are present, this returns a string with these characters unescaped.
;A new string is consed only when escaped characters are present."
;   (declare (values unescaped-string chars-unescaped-p)
;                 (fixnum start end))
;   (flet ((count-unescape-characters (string start end)
;               (with-fast-array-references ((string string string))
;                   (loop with c = 0
;                            for idx upfrom start below end
;                            when (escape-character-p (aref string idx))
;                            do (incf c)
;                            finally (return c)))))
;      (declare (inline count-unescape-characters))
;      (let ((count (count-unescape-characters string start end)))
;         (cond ((zerop count)
;                    (if (and (zerop start) (or (not end-supplied-p) (= end (length string))))
;                       string
;                       (subseq string start end)))
;                  (t (let* ((len1 (- end start))
;                                (len2 (- (the fixnum len1) (the fixnum (* 2 (the fixnum count)))))
;                                (nstring (make-array len2 :element-type (array-element-type string) :fill-pointer 0)))
;                        (with-fast-array-references ((string string string)
;                                                                       (nstring nstring string))
;                            (loop with idx = start
;                                     for nidx upfrom 0 below len2
;                                     for char = (aref string idx)
;                                     do (cond ((escape-character-p char)
;                                                    (let* ((skip (+ 3 (the fixnum idx)))
;                                                              (hex (subseq string (1+ (the fixnum idx)) skip)))
;                                                       (declare (dynamic-extent hex))
;                                                       ;; handles case of bogus escape characters appearing in URLs....
;                                                       (handler-case
;                                                          (progn (setf (aref nstring nidx) (unescape-character hex 0 2))
;                                                                     (setq idx skip))
;                                                          (error ()
;                                                                     (setf (aref nstring nidx) char)
;                                                                     (incf (the fixnum idx))))))
;                                                   (t (setf (aref nstring nidx) char)
;                                                       (incf (the fixnum idx))))
;                                     while (< (the fixnum idx) (the fixnum end))
;                                     ;; erroneous escape characters can produce a shortfall in length of nstring
;                                     finally (setf (fill-pointer nstring) (1+ nidx))
;                                     (return-from string-unescape-special-chars (values nstring t)))))))))) 

(define string-unescape-special-chars (string &optional (start 0) (end (length string) end-supplied-p)
                                              (only-safe-characters-p nil) &aux new-string)
  "When any escaped characters are present, this returns a string with these characters unescaped.
A new string is consed only when escaped characters are present.
ONLY-SAFE-CHARACTERS-P set to non-nill skips reserved or unsafe URL characters."
  (declare (values unescaped-string chars-unescaped-p new-string-returned-p)
           (fixnum start end))
  (with-fast-array-references ((string string string)
                               ;; Can't declare unless an array is provided on LispM.
                               #-Genera (new-string new-string (or null string)))
    (loop with idx fixnum = start
          and last-idx fixnum = start
          and new-idx fixnum = start
          and new-char
          while (< idx end)
          for char = (aref string idx)
          when (escape-character-p char)
            do (setf new-char (unescape-character string (1+ idx) (+ idx 3)))
               (cond  ;; Skip unescaping a char, just incf idx to skip the hex pair.
                 ((and only-safe-characters-p (uri-reserved-or-unsafe-char-p new-char))
                  (incf idx 3))
                 ;; Escape a char, we have already started a new string.
                 (new-string 
                  (let ((new-idx2 (+ new-idx (- idx last-idx))))
                    (setf new-string (replace new-string string :start1 new-idx :end1 new-idx2 :start2 last-idx :end2 idx)
                          (aref new-string new-idx2) new-char
                          new-idx (1+ (the fixnum new-idx2))
                          last-idx (incf idx 3))))
                 ;; Escape a char, need to start a new string.
                 (t (setf new-idx (- idx start)
                          new-string (replace (make-array (- end start 2) :fill-pointer t :element-type *standard-character-type*)
                                              string :start1 0 :end1 new-idx :start2 start :end2 idx)
                          (aref new-string new-idx) new-char
                          last-idx (incf idx 3))
                    (incf new-idx)))
          else
            do (incf idx)
          finally (return (cond ;; We've started a new string, now finish up
                            (new-string 
                             (let ((new-end (+ (the fixnum new-idx) (- end last-idx))))
                               (setf new-string (replace new-string string :start1 new-idx :end1 new-end :start2 last-idx :end2 end)
                                     (fill-pointer new-string) new-end))
                             (values new-string t t))
                            ;; No escaping was performed
                            ((and (zerop start) (or (not end-supplied-p) (= end (length string))))
                             (values string nil nil))
                            ;; Trim original as necessary
                            (t (values (subseq string start end) nil t)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;LOG.LISP.158")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: LISP -*-")

(defmethod tq:task-queue-execute-pending-tasks ((log process-queued-logging-mixin))
  (labels ((report-logging-error (log error fatal-p)
             (let ((error-type (type-of error)))
               (report-bug *bug-http-server* (format nil "HTTP~:[~; Fatal~] Logging Error: ~S" fatal-p error-type)
                           "~:[~;~&Logging has been suspended. Attend to the error at once and resume logging.~]~
                            ~&Log: ~S~&Error: ~S~:[~;~&Error Report: ~:*~A~]~:[~;~&Backtrace: ~:*~A~]"
                           fatal-p log error-type (report-string error)
                           (when *stack-backtraces-in-bug-reports*
                             (stack-backtrace-string error)))))
           (%handle-logging-error (error)
             (typecase error
               ((or network-error file-error)
                (report-logging-error log error nil)
                (sleep 5)
                t)
               (t (report-logging-error log error t)
                  (stop-log-queue log)
                  t))))
    (declare (dynamic-extent #'%handle-logging-error))
    (handler-bind-if (not *debug-server*)
       ((error #'%handle-logging-error))
      (%with-log-stream (log :open-file-forces-output-p t)
        (loop for closure = (tq:pop-task-queue log)
              while closure
              do (funcall closure log-stream)
              while (tq:task-queue-run-p log))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.337")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

;;;------------------------------------------------------------------- 
;;;
;;; MACROS
;;;

(define-macro cond-every (&rest clauses)
  (loop for (cond . forms) in clauses
        collect (if
		  (eql cond 't)
		  `(progn . ,forms)
		  `(when ,cond ,@forms))
	  into code
        finally (return `(progn . ,code))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.332")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun print-mime-content-type-sequence-header (content-type-sequence stream)
  (flet ((mime-content-type-header-string (content-type)
           (destructuring-bind (type subtype . param-plist) content-type
             (let ((param-string (when param-plist
                                   (with-output-to-string (string)
                                     (print-mime-header-parameters param-plist string))))
		   (args nil))
               (declare (dynamic-extent param-string args))
	       (cond-every
		 (param-string (push param-string args))
		 (subtype (push (mime-content-type-string subtype) args))
		 (t (push "/" args))
		 (type (push (mime-content-type-string type) args)))
	       (apply #'concatenate 'string args)))))
    (print-comma-separated-header content-type-sequence stream #'mime-content-type-header-string)))

