;;; -*- Mode: LISP; Syntax: ansi-common-lisp; Package: www-utils; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.15
;;; Reason: Function (CLOS:METHOD HTTP:PARSE-SHTML-TEMPLATE (CL:PATHNAME)):  Handle all fencepost and wrapping cases.
;;; 
;;; Function WWW-UTILS::VECTOR-TO-STRING:  use fill pointer.
;;; Function WWW-UTILS::%SEARCH-FOR-PATTERN-IN-VECTOR:  Specialized internal search.
;;; Written by JCMa, 11/14/97 20:29:28
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-69-HTTP-67-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.14,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.0,
;;; Comlink Utilities 9.38, COMLINK Cryptography 1.0, Routing Taxonomy 8.2,
;;; COMLINK Database 10.87, Email Servers 11.18,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.16,
;;; Communications Linker Server 38.70,
;;; Experimental Lambda Information Retrieval System 12.24, Jcma 41,
;;; Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.0, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).

(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:LISPM;SERVER;LISPM.LISP.375")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.375")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:fix :roman :normal);-*-")

(defun vector-to-string (vector &optional (start 0) (end (length vector)) (buffer http::*server-line-buffer*))
  (let* ((length (- end start))
	 (string (or buffer (make-array length :element-type 'scl:string-char :fill-pointer 0))))
    (with-fast-array-references ((vector vector vector) (string string string))
      (loop for idx1 upfrom start below end
	    for idx2 upfrom (fill-pointer buffer)
	    for byte = (aref vector idx1)
	    for char = (if (member byte '#.(mapcar #'si:char-to-ascii  '(#\return #\linefeed))) #\space (si:ascii-to-char byte))
	    do (setf (aref string idx2) char)
	    finally (setf (fill-pointer string) (1+ idx2))
		    (return (values string length))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.375")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:fix :roman :normal);-*-")

(defun %search-for-pattern-in-vector (pattern vector &optional (s1 0) (e1 (length pattern)) (s2 0) (e2 (length vector))
					      &aux match-idx match-item window-start)
  "Matches PATTERN in VECTOR returning the first index where PATTERN appears in VECTOR.
If a partial pattern appear at the end of vector, a PARTIAL-MATCH-WINDOW is returned as
a second value to indicate the number of elements matched within VECTOR."
  (declare (values index partial-match-window))
  (macrolet ((initialize-window (pattern pattern-start)
	       `(setq match-idx ,pattern-start
		      match-item (aref ,pattern match-idx))))
    (with-fast-array-references ((v1 pattern) (v2 vector))
      (loop initially (initialize-window v1 s1)
	    for idx upfrom s2 below e2
	    for item = (aref v2 idx)
	    do #+ignore(format t "~&~D. (eql ~S ~S) => ~S" idx item match-item (eql match-item item))
	       (cond ((eql match-item item)
		      (when (= match-idx s1) (setq window-start idx))
		      (incf match-idx)
		      (when (= match-idx e1)
			#+Trace-SHTML-Parser
			(unless (zerop s1) (format t "~&~'b~D Complete Partial Match (~D) at ~D~" *idx* (- e1 s1) window-start))
			(return-from %search-for-pattern-in-vector window-start))
		      (setq match-item (aref pattern match-idx)))
		     ((= match-idx s1))
		     (t (initialize-window v1 s1)))
	    finally (cond ((= match-idx s1) (return-from %search-for-pattern-in-vector nil))
			  (t #+Trace-SHTML-Parser(format t "~&~'b~D Partial Match (~D) at ~D~" *idx* match-idx window-start)
			     (return-from %search-for-pattern-in-vector (values window-start match-idx))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.375")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:fix :roman :normal);-*-")

(defmethod http:parse-shtml-template ((pathname pathname))
  (declare (values template-parameters))
  (with-open-file (file-stream pathname :direction :input :element-type '(unsigned-byte 8))
    (using-resource (elt-buf-resource http::line-buffer http::*line-buffer-size*)
      (flet ((new-element-buffer () (prog1 elt-buf-resource (setf (fill-pointer elt-buf-resource) 0)))
	     (make-entry (read-start read-end buffer s-idx e-idx element-buffer)
	       (vector-to-string buffer s-idx e-idx element-buffer)
	       (multiple-value-bind (function plist)
		   (http::parse-shtml-element element-buffer 0 (fill-pointer element-buffer))
		 (list* read-start read-end function plist)))
	     (find-pattern (pattern buffer &optional (p-start 0) (p-end (length pattern)) (start 0) (end (length buffer)))
	       (declare (values start-index partial-offset complete-offset))
	       (if (zerop p-start)
		   (%search-for-pattern-in-vector pattern buffer 0 p-end start end)
		   (let* ((window (- p-end p-start))) 	;partial match in previous buffer
		     (multiple-value-bind (idx partial)
			 (%search-for-pattern-in-vector pattern buffer p-start p-end start (+ start window))
		       #-trace-shtml-parse (declare (ignore partial))
		       #+trace-shtml-parse (trace-find-pattern idx partial pattern p-start p-end buffer start window)
		       (if (and idx (= idx start))	;force
			   (return-from find-pattern (values idx nil window))
			   (%search-for-pattern-in-vector pattern buffer 0 p-end start end)))))))
	(declare (inline new-element-buffer))
	#+trace-shtml-parse (setq *idx* 0)	  
	(loop with buffer and offset and limit and buffer-pos and element-buffer
	      and read-start = 0 and read-end = 0 and read-offset = 0 and wrap-idx
	      do (multiple-value-setq (buffer offset limit) (scl:send file-stream :read-input-buffer))
	      unless buffer
		unless (zerop read-offset)
		  collect (list read-start (+ read-start read-offset))
		    end
		  and do (loop-finish)
	      while buffer
	      do (setq buffer-pos offset)
		 #+trace-shtml-parse(format t "~&~'bNew Buffer:~ ~S ~D ~D"  buffer offset limit)
	      when element-buffer
		collect (multiple-value-bind (end partial-idx completion-size)
			    (find-pattern +shtml-tag-end+ buffer (or wrap-idx 0) +shtml-tag-end-length+ buffer-pos limit)
			  (when (or (null end) partial-idx (and completion-size (null wrap-idx)))
			    (error "Malformed element (byte ~D): ~S" read-end element-buffer))
			  (setq buffer-pos (+ end (or completion-size +shtml-tag-end-length+)))
			  (prog1 (make-entry read-start read-end buffer offset buffer-pos element-buffer)
				 (setq read-start (+ read-end (fill-pointer element-buffer))
				       element-buffer nil wrap-idx nil)))
	      nconc (loop with start and end and completion-size and sv1 = (or wrap-idx 0)
			  do (multiple-value-setq (start wrap-idx completion-size)
			       (find-pattern +shtml-tag-start+ buffer sv1 +shtml-tag-start-length+ buffer-pos limit))
			  while start
			  until wrap-idx
			  do #+trace-shtml-parse (incf *idx*)
			     (setq element-buffer (new-element-buffer))	;set up new element buffer
			     (cond (completion-size	;wrapped on start tag
				    (vector-to-string +shtml-tag-start+ 0 sv1 (new-element-buffer))
				    (setq read-end (+ read-start (- read-offset sv1))
					  sv1 0))	; reset pattern offset
				   (t (unless (zerop sv1) (setq sv1 0))	; reset pattern offset if completion of partial fails
				      (setq read-end (+ read-start read-offset (- start buffer-pos)))))
			     (setq read-offset 0)
			     (multiple-value-setq (end wrap-idx)	;get end tag
			       (find-pattern +shtml-tag-end+ buffer
					    0 +shtml-tag-end-length+ (+ start (or completion-size +shtml-tag-start-length+)) limit))
				 
			     (when wrap-idx	;wrapped on end tag
			       (vector-to-string buffer start limit element-buffer)
			       (loop-finish))
			  when end		;standard case -- no wrap
			    collect (prog2 (setq buffer-pos (+ end +shtml-tag-end-length+))
					   (make-entry read-start read-end buffer start buffer-pos element-buffer)
					   (setq read-start (+ read-end (fill-pointer element-buffer))
						 element-buffer nil))	;reset element buffer
			  else do (vector-to-string buffer start limit element-buffer)	;wrapped on element body
				  (loop-finish))
	      do (unless (or element-buffer (= read-start limit))	;keep track of bytes to read.
		   (incf read-offset (- limit buffer-pos)))
		 (scl:send file-stream :advance-input-buffer))))))

