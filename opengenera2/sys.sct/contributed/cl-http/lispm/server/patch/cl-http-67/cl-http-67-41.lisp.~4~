;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.41
;;; Reason: Fix and specialize TCP streams on Lispm so that proxy caching works.
;;; This reduces to using the copy-mode correctly in the TCP substrate and
;;; modifying some portable calls accordingly.
;;; 
;;; Function TCP::WITH-INPUT-MODE:  -
;;; Function TCP::WITH-OUTPUT-MODE:  -
;;; Function (CLOS:METHOD HTTP:STREAM-COPY-UNTIL-EOF (TCP::TCP-MODAL-HTTP-STREAM T)):  pay attention to copy-mode
;;; Function (CLOS:METHOD HTTP:STREAM-COPY-UNTIL-EOF (T TCP::TCP-MODAL-HTTP-STREAM)):  pay attention to copy-mode
;;; Function (CLOS:METHOD HTTP::STREAM-COPY-BYTES (T TCP::TCP-MODAL-HTTP-STREAM T)):  handle broadcast streams.
;;; Function (CLOS:METHOD HTTP::STREAM-COPY-BYTES (TCP::TCP-MODAL-HTTP-STREAM T T)):  handle broadcast streams.
;;; Function TCP::%TRANSLATE-COPY-MODE:  -
;;; Function (CLOS:METHOD HTTP::STREAM-COPY-BYTES (TCP::TCP-MODAL-HTTP-STREAM LISP:PATHNAME T)):  -
;;; Function (CLOS:METHOD HTTP::STREAM-COPY-BYTES (TCP::TCP-MODAL-HTTP-STREAM SI:OUTPUT-STREAM T)):  -
;;; Function (CLOS:METHOD HTTP::STREAM-COPY-BYTES (TCP::TCP-MODAL-HTTP-STREAM TCP::TCP-MODAL-HTTP-STREAM T)):  -
;;; Function (CLOS:METHOD HTTP:STREAM-COPY-UNTIL-EOF (TCP::TCP-MODAL-HTTP-STREAM LISP:PATHNAME)):  -
;;; Function (CLOS:METHOD HTTP:STREAM-COPY-UNTIL-EOF (LISP:PATHNAME TCP::TCP-MODAL-HTTP-STREAM)):  -
;;; Function HTTP::%WRITE-DOCUMENT-FROM-PATHNAME:  handle copy mode correctly.
;;; Function HTTP::%WRITE-DOCUMENT:  update.
;;; Function HTTP::%WRITE-DOCUMENT:  use write-any-document-from-pathname instead of %write-document-from-pathname.
;;; Function HTTP::%%WRITE-BINARY-FILE:  -
;;; Function WWW-UTILS:FTP-COPY-FILE:  -
;;; Function (CLOS:METHOD HTTP:COPY-FILE (T T)):  -
;;; Function (CLOS:METHOD HTTP:STREAM-COPY-UNTIL-EOF (T CL:PATHNAME)):  -
;;; Function HTTP::COPY-MODE-ELEMENT-TYPE:  -
;;; Function (CLOS:METHOD HTTP:STREAM-COPY-UNTIL-EOF (CL:PATHNAME T)):  -
;;; Written by JCMa, 3/10/98 21:16:57
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.1,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.40, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.105, Email Servers 11.20,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.19,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST,
;;; Experimental Knowledge-Based Collaboration Webs System 17.0,
;;; Experimental The Project Planner 12.0, W4 Constraint-Guide Web Walker 38.3,
;;; HTTP Client Substrate 1.6, HTTP Proxy Server 2.5, Jcma 41, Ivory Revision 4A,
;;; IFEP 328, FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24),
;;; FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44),
;;; Boot ROM version 320, Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7),
;;; Hacks to DW to let us kludge by. (from PROJECT-PLANNER:CODE;SYSTEM-PATCHES.LISP.6),
;;; Provide MIME Type on Document formats. (from KBCW:SUBSTRATE;DB-DOCUMENT-MIME-TYPE.LISP.24).

;;; Patch file for CL-HTTP version 67.41
;;; Written by JCMa, 3/15/98 19:30:01
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.1,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.43, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.105, Email Servers 11.20,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.19,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST, Jcma 41,
;;; Experimental Knowledge-Based Collaboration Webs System 18.1,
;;; The Project Planner 11.1, W4 Constraint-Guide Web Walker 38.3,
;;; HTTP Client Substrate 1.6, HTTP Proxy Server 2.6, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7),
;;; Hacks to DW to let us kludge by. (from PROJECT-PLANNER:CODE;SYSTEM-PATCHES.LISP.6),
;;; Provide MIME Type on Document formats. (from KBCW:SUBSTRATE;DB-DOCUMENT-MIME-TYPE.LISP.24).




(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;SERVER.LISP.728"
  "HTTP:LISPM;SERVER;LISPM.LISP.383"
  "HTTP:SERVER;UTILS.LISP.351"
  "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

;;;------------------------------------------------------------------- 
;;;
;;; FAST STREAM COPYING
;;;

(future-common-lisp:declaim (inline %translate-copy-mode))

(defun %translate-copy-mode (copy-mode)
  "Translates COPY-MODE from the portable CL-HTTP modes to
the Lispm TCP stream modes."
  (ecase copy-mode
    (:text :ascii)
    ((:binary :crlf) copy-mode)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defmacro with-output-mode ((to-stream copy-mode) &body body)
  `(let ((mode (output-mode ,to-stream))
	 (internal-copy-mode (%translate-copy-mode ,copy-mode)))
     (cond ((eq mode internal-copy-mode)
	    ,@body)
	   (t (unwind-protect
		  (progn (set-output-mode ,to-stream internal-copy-mode)
			 ,@body)
		(set-output-mode ,to-stream mode))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defmacro with-input-mode ((from-stream copy-mode) &body body)
  `(let ((mode (input-mode ,from-stream))
	 (internal-copy-mode (%translate-copy-mode ,copy-mode)))
     (cond ((eq mode internal-copy-mode)
	    ,@body)
	   (t (unwind-protect
		  (progn (set-input-mode ,from-stream ,copy-mode)
			 ,@body)
		(set-input-mode ,from-stream mode))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.728")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun %write-document-from-pathname (url pathname content-type stream &optional charset)
  "Primitive to write a text document from pathname to stream without CRLF caching."
  (with-open-file (file-stream pathname :direction :input :element-type *standard-character-type*)
    (with-conditional-get-response
      (stream content-type
	      :last-modification (file-stream-creation-date file-stream)
	      :character-set charset
	      :entity-tag (file-stream-version file-stream)
	      :bytes (file-stream-length-in-bytes file-stream)
	      :expires (expiration-universal-time url)
	      :content-location url
	      :cache-control (url:response-cache-control-directives url)
	      :content-language (languages url))
      ;; send the contents
      (stream-copy-until-eof file-stream stream :text))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.728")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun %write-document (url content-type stream &optional charset)
  (let ((pathname (url:translated-pathname url)))
    (cond
      (pathname
       (handler-case
         (write-any-document-from-pathname url pathname stream content-type charset)
         (file-not-found () (error 'document-not-found :url url))))
      (t (error 'document-not-found :url url)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.728")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(define write-any-document-from-pathname (url pathname stream &optional (content-type nil content-type-supplied-p)
                                              (charset nil charset-supplied-p))
  "Writes any content type from a PATHNAME for URL on STREAM.
CONTENT-TYPE and CHARSET should be supplied, but will default by guessing from pathname."
  (unless-every
    (content-type-supplied-p
      (setq content-type (mime-content-type-spec pathname)))
    (charset-supplied-p
      (setq charset (getf (cddr content-type) :charset))))
  (ecase (mime-content-type-copy-mode content-type)
    (:text
      (%write-document-from-pathname url pathname content-type stream charset))
    (:crlf
      (%write-document-crlf-from-pathname url pathname content-type stream charset))
    (:binary (%%write-binary-file pathname url content-type stream charset))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.728")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; WRITING BINARY FORMATS
;;;

;; Only handle a single range spec until chunking content transfer available
;; to ship over the mime multipart ranges.  6/25/96 -- JCMa.
(defun %%write-binary-file (pathname url content-type stream &optional charset last-modification version)
  (with-open-file (file-stream pathname :direction :input :element-type '(unsigned-byte 8))
    (let ((expires (expiration-universal-time url)))
      (unless-every
	(last-modification (setq last-modification (file-stream-creation-date file-stream)))
	(version (setq version (file-stream-version file-stream))))
      (handling-conditional-get (stream :last-modification last-modification
					:character-set charset
					:entity-tag version :expires expires
					:termination-line-p t)
	;; send the contents
	(let ((resource-length (file-stream-length-in-bytes file-stream))
	      (cache-control (url:response-cache-control-directives url))
	      (languages (languages url))
	      (range (get-header :range)))
	  (cond ;; if more than one range, send whole resource for now.  6/25/96 -- JCMa.
	    ((and range (null (cddr range)))
	     ;; Send a byte range
	     (destructuring-bind (start last) (second range)
	       (multiple-value-bind (start-byte last-byte content-length) 
		   (byte-range-parameters start last resource-length)
		 (let ((headers `(:content-range (:bytes ,start-byte ,last-byte ,resource-length))))
		   (declare (dynamic-extent headers))
		   (with-successful-response (stream content-type :status :partial-content :bytes content-length
						     :last-modification last-modification
						     :character-set charset
						     :entity-tag version :expires expires :cache-control cache-control
						     :content-location url
						     :content-language languages
						     :additional-mime-headers headers
						     :termination-line-p t)
		     (with-binary-stream (stream :output)
		       (stream-copy-byte-range file-stream stream start-byte (1+ last-byte))))))))
	    ;; Send the full content
	    (t (with-successful-response (stream content-type :status :success :bytes resource-length
						 :last-modification last-modification
						 :character-set charset
						 :entity-tag version :expires expires :cache-control cache-control
						 :content-location url
						 :content-language languages
						 :termination-line-p t)
		 (stream-copy-until-eof file-stream stream :binary)))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.383")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:fix :roman :normal);-*-")

(define ftp-copy-file (from-pathname to-stream &key (element-type 'character)
                                     (user-id "anonymous") (user-pw (server-mail-address)))
  "Copies the content of FROM-PATHNAME to TO-STREAM. 
If a network error is encountered, this returns NIL, otherwise T.
ELEMENT-TYPE is the ANSI file openning argument."
  (declare (values success-p))
  (let ((host (pathname-host from-pathname)))
    (handler-case 
      (with-automatic-login (host user-id user-pw)
        (with-open-file (ftp-stream from-pathname :direction :input :element-type element-type)
          (http::stream-copy-until-eof ftp-stream to-stream (case element-type
							      (character :text)
							      (t :binary)))
          (values t)))
      ;; handle remote connection problems, including dead host, refused connection.
      (sys:remote-network-error () nil))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

;;;------------------------------------------------------------------- 
;;;
;;; CONDITIONAL FILE COPY
;;;

(define-generic copy-file (from-pathname to-pathname &key copy-mode &allow-other-keys)
  (:documentation "A portable file copy.
COPY-MODE is one of :TEXT, CRLF, or binary."))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod copy-file ((from-pathname string) (to-pathname string) &key (copy-mode :text) &allow-other-keys)
  (copy-file (pathname from-pathname) (pathname to-pathname) :copy-mode copy-mode))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod conditional-copy-file (from-pathname to-pathname &key (copy-mode :text) &allow-other-keys)
  (let ((from-path (probe-file from-pathname))
        (to-path (probe-file to-pathname))
        (to-directory (probe-directory to-pathname)))
    (when (and from-path
               to-directory
               (or (null to-path)
                   (> (file-write-date from-path)
                      (file-write-date to-path))))
      (copy-file from-pathname to-pathname :copy-mode copy-mode))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod conditional-copy-file ((from-pathname string) (to-pathname string) &key (copy-mode :text) &allow-other-keys)
  (conditional-copy-file (pathname from-pathname) (pathname to-pathname) :copy-mode copy-mode))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

;; ports should specialize this for high performance.
(defmethod stream-copy-until-eof (from-stream to-stream &optional (copy-mode :text))
  (ecase copy-mode
    (:text
      (with-text-stream  (from-stream :input)
	(with-text-stream (to-stream :output)
	  (loop for line = (read-line from-stream nil)
		while line
		do (write-line line to-stream)))))
    ((:binary :crlf)
     (with-binary-stream (from-stream :input)
       (with-binary-stream (to-stream :output)
	 (loop for byte = (read-byte from-stream nil)
	       while byte
	       do (write-byte byte to-stream)))))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

;;;------------------------------------------------------------------- 
;;;
;;; FUNCTIONS
;;;

(define copy-mode-element-type (copy-mode)
  "Returns the element type associated with COPY-MODE."
  (ecase copy-mode
    ((:binary :crlf) '(unsigned-byte 8))
    (:text *standard-character-type*)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod stream-copy-until-eof (from-stream (pathname pathname) &optional (copy-mode :text))
  (with-open-file (file-stream pathname :direction :output :if-does-not-exist :create
			       :element-type (copy-mode-element-type copy-mode)
			       :if-exists *file-exists-supersede-action*)
    (stream-copy-until-eof from-stream file-stream copy-mode)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod stream-copy-until-eof ((pathname pathname) to-stream &optional (copy-mode :text))
  (with-open-file (file-stream pathname :direction :input :if-does-not-exist :error
			       :element-type (copy-mode-element-type copy-mode))
    (stream-copy-until-eof file-stream to-stream copy-mode)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod decode-crlf-file (pathname &optional destination-pathname &aux source destination)
  (if destination-pathname
      (setq source pathname
            destination destination-pathname)
      (setq source (probe-file pathname)
            destination (crlf-origin-pathname source)))
  (with-open-file (file source :direction :input :element-type (copy-mode-element-type #+Genera :binary #-Genera :text)
                                  :if-does-not-exist :error)
    (with-open-file (to-stream destination :direction :output :element-type *standard-character-type*
                               :if-exists :supersede :if-does-not-exist :create)
      (stream-decode-crlf-until-eof file to-stream)))
  ;; return the true pathname
  (if destination-pathname destination-pathname (probe-file destination)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod stream-copy-bytes (from-stream (pathname pathname) bytes &optional (copy-mode :binary))
  (with-open-file (file-stream pathname :direction :output :if-does-not-exist :create
			       :element-type (copy-mode-element-type copy-mode)
			       :if-exists *file-exists-supersede-action*)
    (stream-copy-bytes from-stream file-stream bytes copy-mode)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod stream-copy-bytes ((pathname pathname) to-stream bytes &optional (copy-mode :binary))
  (with-open-file (file-stream pathname :direction :input :if-does-not-exist :error
			       :element-type (copy-mode-element-type copy-mode))
    (stream-copy-bytes file-stream to-stream bytes copy-mode)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.351")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod copy-file (from-pathname to-pathname &key (copy-mode :text) &allow-other-keys)
  (let ((element-type (copy-mode-element-type copy-mode)))
    (with-open-file (from from-pathname :direction :input :element-type element-type :if-does-not-exist :error)
      (with-open-file (to to-pathname :direction :output :element-type element-type :if-exists :supersede
			  :if-does-not-exist :create)
	(stream-copy-until-eof from to copy-mode)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-bytes ((from-stream tcp-modal-http-stream) (to-stream si:output-stream)
                                          n-bytes &optional (copy-mode :binary))
  (with-input-mode (from-stream copy-mode)
    (stream-copy-bytes from-stream to-stream n-bytes)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-bytes ((from-stream si:input-stream) (to-stream tcp-modal-http-stream)
                                          n-bytes &optional (copy-mode :binary))
  (with-output-mode (to-stream copy-mode)
    (stream-copy-bytes from-stream to-stream n-bytes)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-bytes ((from-stream tcp-modal-http-stream) (to-stream tcp-modal-http-stream)
                                          n-bytes &optional (copy-mode :binary))
  (with-input-mode (from-stream copy-mode)
    (with-output-mode (to-stream copy-mode)
      (stream-copy-bytes from-stream to-stream n-bytes))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-bytes ((from-stream tcp-modal-http-stream) (pathname pathname) bytes &optional (copy-mode :binary))
  (with-input-mode (from-stream copy-mode)
    (with-open-file (file-stream pathname :direction :output :if-does-not-exist :create
				 :element-type (ecase copy-mode
						 ((:binary :crlf) '(unsigned-byte 8))
						 (:text 'character))
				 :if-exists :new-version)
      (stream-copy-bytes from-stream file-stream bytes))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-bytes ((from-stream tcp-modal-http-stream) to-stream n-bytes &optional (copy-mode :binary))
  (with-input-mode (from-stream copy-mode)
    (stream-copy-bytes from-stream to-stream n-bytes)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-bytes (from-stream (to-stream tcp-modal-http-stream) n-bytes &optional (copy-mode :binary))
  (with-output-mode (to-stream copy-mode)
    (stream-copy-bytes from-stream to-stream n-bytes)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-until-eof (from-stream (to-stream tcp-modal-http-stream) &optional (copy-mode :text))
  (with-output-mode (to-stream copy-mode)
    (si:stream-copy-until-eof from-stream to-stream)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-until-eof ((from-stream tcp-modal-http-stream) to-stream &optional (copy-mode :text))
  (with-input-mode (from-stream copy-mode)
    (si:stream-copy-until-eof from-stream to-stream)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-until-eof ((from-stream tcp-modal-http-stream) (to-stream tcp-modal-http-stream)
					      &optional (copy-mode :text))
  (with-input-mode (from-stream copy-mode)
    (with-output-mode (to-stream copy-mode)
      (si:stream-copy-until-eof from-stream to-stream))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-until-eof ((from-stream tcp-modal-http-stream) (pathname pathname) &optional (copy-mode :text))
  (with-input-mode (from-stream copy-mode)
    (with-open-file (file-stream pathname :direction :output :if-does-not-exist :create
				 :element-type (ecase copy-mode
						 ((:binary :crlf) '(unsigned-byte 8))
						 (:text 'character))
				 :if-exists :new-version)
      (si:stream-copy-until-eof from-stream file-stream))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.120")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::defmethod http::stream-copy-until-eof ((pathname pathname) (to-stream tcp-modal-http-stream) &optional (copy-mode :text))
  (with-output-mode (to-stream copy-mode)
    (with-open-file (file-stream pathname :direction :input :if-does-not-exist :error
				 :element-type (ecase copy-mode
						 ((:binary :crlf) '(unsigned-byte 8))
						 (:text 'character)))
      (si:stream-copy-until-eof file-stream to-stream))))
