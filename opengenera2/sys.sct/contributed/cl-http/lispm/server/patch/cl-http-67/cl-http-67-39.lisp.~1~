;;; -*- Mode: LISP; Syntax: ansi-common-lisp; Package: sha; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.39
;;; Reason: 4x performance improvement for SHA on Lisp Machine.
;;; 
;;; Function SHA::32-ADD:  speed up.
;;; Function SHA::MAKE-32-BIT-UNSIGNED-INTEGER:  new.
;;; Function SHA::MAKE-INTEGER:  new.
;;; Function SHA::32-LEFT-ROT:  new.
;;; Function SHA::32-LEFT-ROT:  updated.
;;; Function SHA::INITIALIZE-SHA-STATE:  use make-32-bit-unsigned-integer.
;;; Function SHA:SHA-COMPRESS:  update.
;;; Function SHA::SHA-EXPAND:  update.
;;; Function SHA::%SHA-ENCODE:  updated.
;;; Function SHA::EXPLODE-INTEGER:  return make-32-bit-unsigned-integer.
;;; Remove function SHA::EXPLODE-INTEGER: undefine.
;;; Function SHA::%SHA-MAC-ENCODE:  update.
;;; Function SHA:MAKE-SHA-BUFFER-FILLER-FROM-READER-FUNCTION:  update.
;;; Written by JCMa, 3/09/98 13:40:50
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.1,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.38, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.0,
;;; Routing Taxonomy 8.3, COMLINK Database 10.105, Email Servers 11.20,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.19,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST,
;;; Experimental Knowledge-Based Collaboration Webs System 9.0,
;;; The Project Planner 11.0, W4 Constraint-Guide Web Walker 38.2,
;;; HTTP Client Substrate 1.6, HTTP Proxy Server 2.5, Jcma 41, Ivory Revision 4A,
;;; IFEP 328, FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24),
;;; FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44),
;;; Boot ROM version 320, Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7),
;;; Hacks to DW to let us kludge by. (from PROJECT-PLANNER:CODE;SYSTEM-PATCHES.LISP.6),
;;; Provide MIME Type on Document formats. (from KBCW:SUBSTRATE;DB-DOCUMENT-MIME-TYPE.LISP.4).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;SHA.LISP.42"
  "HTTP:SERVER;SHA.LISP.43")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.42")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

;;; a + b
(defun 32-add (a b)
  #+genera (sys:%32-bit-plus a b)
  #-genera (ldb (byte 32 0) (+ a b)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.42")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(declaim (inline make-32-bit-unsigned-integer))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.42")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(defun make-32-bit-unsigned-integer (a)
  #+genera (sys:%logldb (byte 32 0) a)
  #-genera a)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.42")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(declaim (inline make-integer))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.42")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(defun make-integer (a)
  #+genera (dpb a (byte 32 0) 0)
  #-genera a)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.42")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(declaim (inline 32-left-rot))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

;;; number <<< by
(defun 32-left-rot (number by)
  #+genera (si:rot number by)
  #-genera (let ((break (- 32 by)))
	     (dpb (ldb (byte break 0) number)
		  (byte break by)
		  (ldb (byte by break) number))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(defmacro initialize-sha-state (a b c d e)
  `(setf ,a (make-32-bit-unsigned-integer #x67452301)
         ,b (make-32-bit-unsigned-integer #xefcdab89)
         ,c (make-32-bit-unsigned-integer #x98badcfe)
         ,d (make-32-bit-unsigned-integer #x10325476)
         ,e (make-32-bit-unsigned-integer #xc3d2e1f0)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(defun sha-compress (a b c d e x)
  (let ((w (sha-expand x)) 
        (temp))
    (www-utils:with-fast-array-references ((w w))
      ;; (dump-sha-expansion-buffer w) ; debug hack
      ;; Round 1
      ;;(format *trace-output* "round 1~%")
      (dotimes (i 20 t)
        ;;(format *trace-output* "~&A=~X  B=~X  C=~X  D=~X  E=~X ~%" a b c d e)
        (setf temp (32-add (32-left-rot a 5)
			   (32-add (sha-function-1 b c d)
				   (32-add e
					   (32-add (aref w i)
						   (make-32-bit-unsigned-integer #x5a827999))))))
        (setf e d) (setf d c) (setf c (32-left-rot b 30 )) (setf b a)
        (setf a temp))
      ;; Round 2
      ;;(format *trace-output* "round 2~%")
      (dotimes (i 20 t)
        ;;(format *trace-output* "~&A=~X  B=~X  C=~X  D=~X  E=~X ~%" a b c d e)
        (setf temp (32-add (32-left-rot a 5)
			   (32-add (sha-function-2 b c d)
				   (32-add e
					   (32-add (aref w (+ i 20))
						   (make-32-bit-unsigned-integer #x6ed9eba1))))))
        (setf e d) (setf d c) (setf c (32-left-rot b 30 )) (setf b a)
        (setf a temp))
      ;; Round 3
      ;;(format *trace-output* "round 3~%")
      (dotimes (i 20 t)
        ;;(format *trace-output* "~&A=~X  B=~X  C=~X  D=~X  E=~X ~%" a b c d e)
        (setf temp (32-add (32-left-rot a 5)
			   (32-add (sha-function-3 b c d)
				   (32-add e
					   (32-add (aref w (+ i 40))
						   (make-32-bit-unsigned-integer #x8f1bbcdc))))))
        (setf e d) (setf d c) (setf c (32-left-rot b 30 )) (setf b a)
        (setf a temp))
      ;; Round 4
      ;;(format *trace-output* "round 4~%")
      (dotimes (i 20 t)
        ;;(format *trace-output* "~&A=~X  B=~X  C=~X  D=~X  E=~X ~%" a b c d e)
        (setf temp (32-add (32-left-rot a 5)
			   (32-add (sha-function-4 b c d)
				   (32-add e
					   (32-add (aref w (+ i 60))
						   (make-32-bit-unsigned-integer #xca62c1d6))))))
        (setf e d) (setf d c) (setf c (32-left-rot b 30 )) (setf b a)
        (setf a temp))))
  (values a b c d e))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; THE SHA ENCODER
;;;

;;
;; Expansion function.
;;
(defun sha-expand (m)
  (declare (values w))                          ; Is this the right declare form??? PHB
  (let ((array (make-array '(80))))
    (www-utils:with-fast-array-references ((w array))
      (dotimes (i 16 t)
        (setf (aref w i) (aref m i)  ) )
      (dotimes (i 64 t)
        (setf (aref w (+ i 16)) 
              (32-left-rot (logxor (aref w (+ i 13)) (aref w (+ i 8)) 
                                   (aref w (+ i 2)) (aref w (+ i ))) 1) ))
      ;; add in left circular shift
      w)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

;;; GET-DATA-FUNCTION takes an array of 16 32 bit words as argument and
;;; fills the array from its source.  It returns T if there is more data
;;; to be read and NIL if all data (including padding and length) have
;;; been delivered)
(defun %sha-encode (get-data-function)
  (declare (values a b c d e))
  (with-stack-array (x 16
		       #+genera :type #+genera 'sys:art-fixnum
		       #-genera :element-type #-genera '(unsigned-byte 32))
    (with-sha-state (a b c d e)
      (initialize-sha-state a b c d e)
      (loop while (funcall get-data-function x)
            do #|(dump-sha-data-buffer x)|#     ; debug hack
               (multiple-value-bind (aa bb cc dd ee)
                   (sha-compress a b c d e x)
                 (setq a (32-add a aa)
                       b (32-add b bb)
                       c (32-add c cc)
                       d (32-add d dd)
                       e (32-add e ee))))
      (values (make-integer a)
	      (make-integer b)
	      (make-integer c)
	      (make-integer d)
	      (make-integer e)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; MESSAGE AUTHENTICATION CODE (MAC) -- SHARED SECRET
;;;

(defmacro explode-integer (integer n bits)
  `(values ,.(loop for idx upfrom 0 below n
                   collect `(make-32-bit-unsigned-integer (ldb (byte ,bits ,(* bits idx)) ,integer)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

(SCL:FUNDEFINE 'EXPLODE-INTEGER)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; MESSAGE AUTHENTICATION CODE (MAC) -- SHARED SECRET
;;;

;; digest compress with a secret key
(defun %sha-mac-encode (key get-data-function)
  (declare (values a b c d e))
  (check-type key integer)
  (macrolet ((explode-integer (integer n bits)
	       `(values ,.(loop for idx upfrom 0 below n
				collect `(make-32-bit-unsigned-integer (ldb (byte ,bits ,(* bits idx)) ,integer)))))
	     (integer-values (&rest values)
	       `(values . ,(loop for v in values
				 collect `(make-integer ,v)))))
    (multiple-value-bind (ke kd kc kb ka)
	(explode-integer key 5 32)
      (with-stack-array (x 16 #+genera :type #+genera 'sys:art-fixnum
			   #-genera :element-type #-genera '(unsigned-byte 32))
	(with-sha-state (a b c d e)
	  (initialize-sha-state a b c d e)
	  (loop while (funcall get-data-function x)
		do #|(dump-sha-data-buffer x)|#	; debug hack
		   (multiple-value-bind (aa bb cc dd ee)
		       (sha-compress (logxor a ka)
				     (logxor b kb)
				     (logxor c kc)
				     (logxor d kd)
				     (logxor e ke)
				     x)
		     (setq a (32-add a aa)
			   b (32-add b bb)
			   c (32-add c cc)
			   d (32-add d dd)
			   e (32-add e ee))))
	  (integer-values a b c d e))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SHA.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: (sha :USE FUTURE-COMMON-LISP); Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; USEFUL FOR DEFINING SOURCES
;;;

;;; Define a constructor function for a source.  The constructor
;;; function returns a function suitable as the GET-DATA-FUNCTION
;;; argument to MD5-ENCODE.

;;; Only knows how to deal with 8 bit sources.

(defun make-sha-buffer-filler-from-reader-function (reader-function)
  "Returns a function which can be used as the GET-DATA-FUNCTION argument to SHa-ENCODE.
The argument is a function of no arguments, which returns sucessive 8 bit bytes from 
the source to be encoded, or NIL when the source is exhausted"
  (let ((state :data)
        (count 0)
        ;; the following is used to indicate if the first (#80) pad byte was
        ;; written when the index i was 13:
        (flag13 nil))
    (flet ((fill-sha-buffer (buffer)
             (www-utils:with-fast-array-references ((buffer buffer))
               (dotimes (i 16 t)
                 ;; I is which 32 bit word of buffer to write to.
                 (flet ((gb ()
                          (ecase state
                            (:done (return-from fill-sha-buffer nil))
                            (:data
                              (let ((byte (funcall reader-function)))
                                (cond (byte
                                       (incf count)
                                       byte)
                                      (t (setq state :must-pad)
                                         (when (= i 13)
                                           (setq flag13 1))
                                         #x80))))       ;first pad byte
                            ;; If we start writing the padding during the 14th
                            ;; word, we must pad the entire buffer and write
                            ;; the length in the next one.
                            (:must-pad
                              ;; this takes care of case when #x80 is the
                              ;; last byte written when i=13, and the next
                              ;; byte is first byte of i=14, in which case
                              ;; length should be written, not another full 
                              ;; buffer of zeroes
                              (when (and (= i 14) flag13)
                                (setq state :pad))
                              (unless (= i 14)
                                (setq state :pad)
                                (setq flag13 nil))
                              0)
                            (:pad
                              (if (= i 14)
                                  (multiple-value-bind (sha-length64-hi sha-length64-lo)
                                      (sha-length64 (* 8 count))
                                    (setf (aref buffer 14)
                                          sha-length64-hi)
                                    (setf (aref buffer 15)
                                          sha-length64-lo)      ; NB Opposite order to MD5 !
                                    (setq state :done)
                                    (return-from fill-sha-buffer t))
                                  0)))))
                   (declare (inline gb))
                   ;; FIPS-80 Bytes are ordered in opposite manner to MD5 :-(
                   (let ((b3 (gb))
                         (b2 (gb))
                         (b1 (gb))
                         (b0 (gb)))
                     (setf (aref buffer i)
			   (make-32-bit-unsigned-integer
			     (dpb b3 (byte 8 24)
				  (dpb b2 (byte 8 16)
				       (dpb b1 (byte 8 8) b0)))))))))))
      #'fill-sha-buffer)))

