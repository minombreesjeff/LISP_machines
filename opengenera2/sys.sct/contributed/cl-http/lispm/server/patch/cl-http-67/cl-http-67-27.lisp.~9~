;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.27
;;; Reason: Define the header-function so that all computed URLs can optionally provide a
;;; function to compute the parameters served by the HTTP HEAD method.
;;; 
;;; CLOS class URL::COMPUTED-HEADERS-MIXIN:  add header-function instance variable.
;;; CLOS class URL:COMPUTED-URL-MIXIN:  Inherit computed-headers-mixin.
;;; CLOS class URL::TEMPLATE-MIXIN:  inherit computed-headers-mixin.
;;; Function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:COMPUTED-URL-MIXIN T T)):
;;; Use the header function and inherit to all computed URLs.  
;;; 
;;; Function HTTP::%EXPORT-COMPUTED-URL:  pass header-function into url:initialize-specialization.
;;; Function (CLOS:METHOD URL:INITIALIZE-SPECIALIZATION (URL:HTTP-FORM T T)):  -
;;; Function (CLOS:METHOD URL:INITIALIZE-SPECIALIZATION (URL:HTTP-COMPUTED-FORM T T)):  -
;;; Function HTTP::%EXPORT-COMPUTED-URL:  -
;;; Function HTTP::%EXPORT-COMPUTED-FORM:  -
;;; Function (CLOS:METHOD HTTP:EXPORT-URL (URL:HTTP-SEARCH (EQL :SEARCH))):  -
;;; Function (CLOS:METHOD HTTP:EXPORT-URL (URL:HTTP-SEARCHABLE-OBJECT (EQL :IMAGE-MAP))):  -
;;; Function (CLOS:METHOD URL:HEADER-FUNCTION (URL::SEARCH-MIXIN)):  make it inherit.
;;; 
;;; Function HTTP:CRLF-FILE-PARAMETERS:  new abstraction for use in header functions.
;;; Function HTTP:CRLF-FILE-LENGTH-IN-BYTES:  ditto.
;;; 
;;; Remove function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:HTTP-COMPUTED-URL (EQL :COMPUTED) T)): undefine.
;;; Remove function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:HTTP-SEARCH (EQL :SEARCH) T)): undefine.
;;; Remove function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:HTTP-COMPUTED-URL (EQL :HTML-COMPUTED) T)): undefine.
;;; Remove function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:HTTP-COMPUTED-URL (EQL :COMPUTED) T)): undefine.
;;; Remove function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:HTTP-COMPUTED-FORM (EQL :HTML-COMPUTED-FORM) T)): undefine.
;;; Remove function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:HTTP-COMPUTED-FORM (EQL :COMPUTED-FORM) T)): undefine.
;;; Remove function (CLOS:METHOD HTTP:WRITE-DOCUMENT-HEADERS (URL:HTTP-TEMPLATE-OBJECT (EQL :SHTML-FILE) T)): undefine.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :HEAD) SYMBOL)):  update for new regime.
;;; Written by JCMa, 12/16/97 15:36:55
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-72-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.25,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.1,
;;; Comlink Utilities 9.40, COMLINK Cryptography 1.0, Routing Taxonomy 8.3,
;;; COMLINK Database 10.100, Email Servers 11.19,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.74, Lambda Information Retrieval System 18.11,
;;; Jcma 41, White House Publication System 20.24, HTTP Client 48.1,
;;; HTTP Client Substrate 1.6, Experimental Image Substrate 438.1,
;;; Experimental Essential Image Substrate 431.0, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.0,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).

;;; Patch file for CL-HTTP version 67.27
;;; Written by JCMa, 12/17/97 19:44:30
;;; while running on PUB3 from HOST3:/usr/users/install/og/eop-world-pub3-host3.vlod
;;; with Open Genera 2.0, Genera 8.5, Experimental IP-TCP Documentation 423.0,
;;; Experimental Lock Simple 437.0, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, CLIM 72.0, Genera CLIM 72.0,
;;; PostScript CLIM 72.0, Experimental CLIM Documentation 72.0,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.1, Experimental Statice Documentation 426.0,
;;; Experimental Joshua 237.3, Joshua Documentation 216.0,
;;; Experimental Image Substrate 440.0, Experimental Essential Image Substrate 433.0,
;;; Server Utilities 442.0, Mailer 438.0, Showable Procedures 36.3, Binary Tree 34.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.27, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.40, COMLINK Cryptography 1.0,
;;; Routing Taxonomy 8.3, COMLINK Database 10.101, Email Servers 11.19,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.74, Lambda Information Retrieval System 18.11,
;;; Comlink Documentation Utilities 4.1, White House Publication System 20.26,
;;; WH Automatic Categorization System 9.1, Ivory Revision 5, VLM Debugger 329,
;;; Genera program 8.1, DEC OSF/1 V4.0 (Rev. 52),
;;; 1280x974 24-bit TRUE-COLOR X Screen HOST3:0.0 with 224 Genera fonts (DECWINDOWS Digital Equipment Corporation Digital UNIX V4.0 R1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Local flavor function patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>local-flavor-function-patch-mark2),
;;; Get emb file host patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>get-emb-file-host-patch),
;;; Get mailer home location from namespace (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>mailer-environment-patch),
;;; Consider internet-domain-name when matching names to file hosts (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>pathname-host-namep-patch),
;;; Parse pathname patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>parse-pathname-patch),
;;; AutoEval (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>autoeval-code),
;;; Get internal event code patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>get-internal-event-code-patch),
;;; AutoLogin (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>auto-login),
;;; Generate an error any time there domain system tries to create a bogus host object for the local host. (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>detect-bogus-host),
;;; Set Mailer UID variables for current namespace. (from EOP:MAIL-SERVER;PATCHES;MAILER-UID.LISP.1),
;;; Provide Switch between EOP and MIT sources. (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>mit-source),
;;; Make FS:USER-HOMEDIR look in the namespace as one strategy. (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>user-homedir),
;;; Local uid patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>local-uid-patch),
;;; Statice log clear patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>statice-log-clear-patch),
;;; Make compiled-function-spec-p of CLOS class symbol return NIL instead of erring (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>compiled-function-spec-p-patch),
;;; Improve mailer host parsing (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>parse-mailer-host-patch),
;;; Make native domain name host patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>make-native-domain-name-host-patch),
;;; Domain query cname loop patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>domain-query-cname-loop-patch),
;;; Increase disk wired wait timeout from 30 to 90 seconds (from EOP:MAIL-SERVER;PATCHES;DISK-WAIT-90-PATCH.LISP.1),
;;; Checkpoint command patch (from WILSON.AI.MIT.EDU:>comlink>v-4>wh>config>mail-server>patches>checkpoint-command-patch.lisp.9),
;;; Gc report patch (from EOP:MAIL-SERVER;PATCHES;GC-REPORT-PATCH.LISP.1),
;;; Vlm namespace append patch (from EOP:MAIL-SERVER;PATCHES;VLM-NAMESPACE-APPEND-PATCH.LISP.1).


;;; Patch file for CL-HTTP version 67.27
;;; Written by JCMa, 12/17/97 16:05:09
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-72-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.25,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.1,
;;; Comlink Utilities 9.40, COMLINK Cryptography 1.0, Routing Taxonomy 8.3,
;;; COMLINK Database 10.100, Email Servers 11.19,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.74, Lambda Information Retrieval System 18.11,
;;; Jcma 41, White House Publication System 20.24, HTTP Client 48.1,
;;; HTTP Client Substrate 1.6, Experimental Image Substrate 438.1,
;;; Experimental Essential Image Substrate 431.0, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.0,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).




(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;URL-CLASS.LISP.7"
  "HTTP:SERVER;URL-CLASS.LISP.8"
  "HTTP:SERVER;URL.LISP.310"
  "HTTP:SERVER;URL.LISP.311"
  "HTTP:SERVER;SERVER.LISP.713"
  "HTTP:SERVER;SERVER.LISP.714"
  "HTTP:SERVER;URL.LISP.312"
  "HTTP:SERVER;UTILS.LISP.346"
  "HTTP:SERVER;SERVER.LISP.718")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL-CLASS.LISP.7")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: URL; Base: 10 -*-")

(eval-when (:compile-toplevel :execute :load-toplevel)
  (export (intern "HEADER-FUNCTION" :url) :url)
  )

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD WRITE-DOCUMENT-HEADERS (HTTP-COMPUTED-URL (EQL :COMPUTED) T)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD WRITE-DOCUMENT-HEADERS (HTTP-SEARCH (EQL :SEARCH) T)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD WRITE-DOCUMENT-HEADERS (HTTP-COMPUTED-URL (EQL :HTML-COMPUTED) T)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD WRITE-DOCUMENT-HEADERS (HTTP-COMPUTED-URL (EQL :COMPUTED) T)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD WRITE-DOCUMENT-HEADERS
                        (HTTP-COMPUTED-FORM (EQL :HTML-COMPUTED-FORM) T)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD WRITE-DOCUMENT-HEADERS (HTTP-COMPUTED-FORM (EQL :COMPUTED-FORM) T)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL-CLASS.LISP.8")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: URL; Base: 10 -*-")

(defclass computed-headers-mixin
          ()
    ((header-function :initform nil :initarg header-function :reader header-function)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL-CLASS.LISP.8")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: URL; Base: 10 -*-")

(defclass computed-url-mixin
          (computed-headers-mixin)
    ((response-function :initform nil :initarg :response-function :reader response-function)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL-CLASS.LISP.8")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: URL; Base: 10 -*-")

(defclass template-mixin
          (computed-headers-mixin)
    ((template-lock :initform nil :initarg :template-lock :accessor template-lock)
     (template-parameters :initform nil :initarg :template-parameters :accessor template-parameters)
     (template-update-time :initarg :template-update-time :accessor template-update-time))
  (:documentation "Add templates to static files."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD WRITE-DOCUMENT-HEADERS (HTTP-TEMPLATE-OBJECT (EQL :SHTML-FILE) T)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; HEADER METHODS FOR COMPUTED URLS
;;;

(defmethod write-document-headers ((url url:computed-url-mixin) translation stream)
  (declare (ignore translation))
  (let ((header-fctn (url::header-function url)))
    (if header-fctn
	(multiple-value-bind (content-type length last-modification version charset public allow)
	    (funcall header-fctn url)
	  (%write-document-headers-no-pathname url content-type stream length last-modification version charset public allow))
	(%write-document-headers-no-pathname url :html stream))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.310")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod (setf header-function) (function (url computed-headers-mixin))
  (check-type function (or null (satisfies http::good-response-function-p)))
  (with-slots (header-function) url
    (setq header-function function)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.310")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod initialize-specialization ((url http-computed-url) class init-args)
  (with-class-change-for-initialize-specialization (url class init-args)
    (destructuring-bind (response-function &optional header-function) init-args
      (setf (response-function url) response-function
	    (header-function url) header-function)
      url)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.310")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod initialize-specialization ((url http-form) class init-args)
  (with-class-change-for-initialize-specialization (url class init-args)
    (destructuring-bind (server response-function &optional header-function) init-args
      (setf (form-server url) server
	    (response-function url) response-function
	    (header-function url) header-function)
      url)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.310")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod initialize-specialization ((url http-computed-form) class init-args)
  (with-class-change-for-initialize-specialization (url class init-args)
    (destructuring-bind (form-function response-function &optional header-function) init-args
      (setf (form-function url) form-function
            (response-function url) response-function
	    (header-function url) header-function)
      url)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.310")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod initialize-specialization ((url http-template-object) class init-args)
  (with-class-change-for-initialize-specialization (url class init-args)
    (destructuring-bind (&optional header-function) init-args
      (setf (header-function url) header-function)
      url)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun %export-computed-url (url translation args)
  (destructuring-bind (&key response-function header-function pathname character-set &allow-other-keys) args
    (when pathname
      (setf (translated-pathname url) pathname))
    (unless (and response-function (good-response-function-p response-function))
      (error "RESPONSE-FUNCTION, ~S, must be a defined function when exporting the URL, ~S, with translation, ~S"
             response-function url translation))
    (setf (translation-method url) translation
          (character-set url) character-set)
    (let ((init-args `(,response-function ,@header-function)))
      (declare (dynamic-extent init-args))
      (url:initialize-specialization url 'url:http-computed-url init-args))
    url))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod  export-url ((url url:http-object) (translation (eql :html-form)) &rest args)
  (destructuring-bind (&key response-function header-function pathname server character-set &allow-other-keys) args
    (cond (pathname
           (setf (translated-pathname  url) pathname))
          (t (error "No PATHNAME was provided while exporting the URL, ~S, with translation, ~S"
                    url translation)))
    (unless (and response-function (good-response-function-p response-function))
      (error "RESPONSE-FUNCTION, ~S, must be a defined function when exporting the URL, ~S, with translation, ~S"
             response-function url translation))
    (setf (translation-method url) translation
          (character-set url) character-set)
    (let ((init-args `(,server ,response-function ,@header-function)))
      (declare (dynamic-extent init-args))
      (url:initialize-specialization url 'url:http-form init-args))
    url))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun %export-computed-form (url translation args)
  (destructuring-bind (&key form-function response-function header-function &allow-other-keys) args
    (unless (and response-function (good-response-function-p response-function))
      (error "RESPONSE-FUNCTION, ~S, must be a defined function when exporting the URL, ~S, with translation, ~S"
             response-function url translation))
    (unless (and form-function (good-response-function-p form-function))
      (error "FORM-FUNCTION, ~S, must be a defined function when exporting the URL, ~S, with translation, ~S"
             form-function url translation))
    (setf (translation-method url) translation)
    (let ((init-args `(,form-function ,response-function ,@header-function)))
      (declare (dynamic-extent init-args))
      (url:initialize-specialization url 'url:http-computed-form init-args))
    url))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.311")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(define-generic initialize-specialization (url class init-args)
  (declare (values url))
  (:documentation "Initializes a specialization of CLASS according to init-args."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod export-url :before ((url url:http-minimum-object) (translation (eql :shtml-file)) &rest args)
  (destructuring-bind (&key header-function &allow-other-keys) args
      (let ((args `(,@header-function)))
	(declare (dynamic-extent args))
	(url:initialize-specialization url 'url:http-template-object args))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod export-url ((url url:http-minimum-object) (translation (eql :script)) &rest args)
  (destructuring-bind (&key script header-function &allow-other-keys) args
    (unless script
      (error "No script was provided while exporting the URL, ~S, with EXPORT-TYPE, ~S"
             url translation))
    (setf (translation-method url) translation)
    (let ((args `(,script ,@header-function)))
      (declare (dynamic-extent args))
      (url:initialize-specialization url 'url:http-client-script args))
    url))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.311")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod initialize-specialization ((url http-client-script) class init-args)
  (with-class-change-for-initialize-specialization (url class init-args)
    (destructuring-bind (script &optional header-function) init-args
      (setf (script url) script
	    (header-function url) header-function)
      url)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun %export-url-search (url method response-function search-parser search-writer search-database
			       &optional header-function)
  (cond ((and response-function (good-response-function-p response-function))
         (setf (response-function url) response-function))
        (t (error "RESPONSE-FUNCTION, ~S, must be a defined function when exporting the URL, ~S, with method, ~S"
                  response-function url method)))
  (setf (translation-method url) method
        (search-database url) search-database
        (search-parser url) (or search-parser #'url:standard-parse-search-info)
        (search-writer url) (or search-writer #'url:standard-write-search-info)
	(header-function url) header-function)
  url)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun %export-url-searchable-object (url method args)
  (destructuring-bind (&key pathname response-function header-function search-parser search-writer search-database character-set
                            &allow-other-keys) args
    (cond (pathname
           (setf (translated-pathname  url) pathname))
          (t (error "No PATHNAME was provided while exporting the URL, ~S, with method, ~S"
                    url method)))
    (setf (character-set url) character-set)
    ;; standard search parameters.
    (%export-url-search url method response-function search-parser search-writer search-database header-function)
    url))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod export-url ((url url:http-search) (translation (eql :search)) &rest args)
  (destructuring-bind (&key response-function header-function search-parser search-writer search-database &allow-other-keys) args
    (%export-url-search url translation response-function search-parser search-writer search-database header-function)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.713")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod export-url ((url url:http-searchable-object) (translation (eql :image-map)) &rest args)
  (destructuring-bind (&key export-type pathname map-format
                            map-pathname search-parser search-writer header-function &allow-other-keys) args
    (let ((search-database (parse-image-map map-pathname map-format)))
      (cond (pathname
             (setf (translated-pathname  url) pathname))
            (t (error "No PATHNAME was provided while exporting the URL, ~S, with export-type, ~S"
                      url export-type)))
      (setf (translation-method url) export-type)
      ;; standard search parameters.
      (%export-url-search url export-type #'respond-to-image-map search-parser search-writer search-database header-function )
      url)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.714")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(setf (documentation 'export-url 'function)

      "HTTP:EXPORT-URL is the primary method that exports URLS to make them
accessible via the http server. URL is either a string or an interned URL to
be exported.  EXPORT-TYPE is the method to use in exporting URL.


I. Basic Export Types: These involve making the contents of a file accessible via
a URL. These types require URLs that are object (i.e., have a name and extension).

        :HTML-FILE (&key pathname)
        :TEXT-FILE (&key pathname)
        :RTF-FILE (&key pathname)

        :GIF-IMAGE (&key pathname)
        :JPEG-IMAGE (&key pathname)
        :X-BITMAP-IMAGE (&key pathname)
        :PICT-IMAGE (&key pathname)
        :TIFF-IMAGE (&key pathname)

        :BASIC-AUDIO (&key pathname)
        :AIFF-AUDIO (&key pathname)
        :WAV-AUDIO (&key pathname)

        :MPEG-VIDEO (&key pathname)
        :QUICKTIME-VIDEO (&key pathname)

        :VRML-WORLD (&key pathname)

        :DIRECTORY (&key pathname immediate-export recache recursive-p)
        :HTML-DIRECTORY (&key pathname immediate-export recache recursive-p)
        :TEXT-DIRECTORY (&key pathname immediate-export recache recursive-p)
        :LISP-DIRECTORY (&key pathname immediate-export recache recursive-p)
        :IMAGE-DIRECTORY (&key pathname immediate-export recache recursive-p)
        :AUDIO-DIRECTORY (&key pathname immediate-export recache recursive-p)
        :VIDEO-DIRECTORY (&key pathname immediate-export recache recursive-p)
        :WORLD-DIRECTORY (&key pathname immediate-export recache recursive-p)
        :APPLICATION-DIRECTORY (&key pathname immediate-export recache recursive-p)

:DIRECTORY exports all files whose resource type is known.
Others export a specific content type, and ignore other file types.
When recursive-p is non-null, all subdirectories are also exported.
Otherwise, subdirectories are ignored.

When *AUTO-EXPORT* is non-null, new files are automatically exported when they
are scoped by one of these directory export types. Auto-export occurs on
demand for the GET and HEAD methods. If *AUTO-EXPORT* is :ON-DEMAND,
files are exported when they are first requested rather than at the
time the directory is exported. When exporting a directory, a non-null
argument to :IMMEDIATE-EXPORT overrides lazy directory exporting. In general,
on-demand directory exports trade faster server start up for a slightly slower
first access to a file URL within the directory. When :RECACHE is non-null,
a directory export updates the export parameters for every inferior. This
parameter forces traversal of the entire structure, like a non-null
:IMMEDIATE-EXPORT would.

A directory-style list in HTML is the default content returned for the
get method on a URL directory path. This behavior is customized by
providing a response function via the :DIRECTORY-WRITER keyword.  This
response function is called with the arguments (URL STREAM) and must
return non-null when it handles the response. If it declines to handle
the response, it may return NIL, and the standard method will list the
directory as usual. HTTP:WRITE-INDEXED-DIRECTORY-LISTING is a directory
writer that will serve the contents of an index.html file found in
the directory. Other computed returns are possible.

Note that the presence in file or directory names of escaped characters 
(see *ESCAPED-CHARACTERS*) will lead to inconsistent results, and possibly
errors. Space and question mark are examples.

        :PDF-FILE  (&key pathname)
        :POSTSCRIPT-FILE (&key pathname)

        :BINHEX-FILE (&key pathname)
        :STUFFIT-FILE  (&key pathname)
        :COMPRESSED-FILE (&key pathname)
        :MAC-BINARY-FILE (&key pathname)

        :WORD-FILE  (&key pathname)
        :POWER-POINT-FILE (&key pathname)
        :EXCEL-FILE  (&key pathname)

The following export types support inline plug-ins on the client side.
Plug-ins can be referenced using NS2.0:WITH-EMBEDDED-SCRIPT

        Inline speech synthesis is available using a macintalk plug-in
        from http://www.mvpsolutions.com/PlugInSite/Talker.html

        :TALK-AUDIO (&key pathname)

The Java language provides applets that execute on the client.  This kind of
mobile code is supported with the following export types and the HMTL
generation macro WITH-JAVA-APPLET.
        
        :JAVA-FILE (&key pathname)
        :JAVA-BINARY (&key pathname)
        :JAVA-SCRIPT-FILE (&key pathname)

:JAVA-FILE exports the source code whereas :JAVA-BINARY provides the byte
compiled binary to the client running the applet. :JAVA-SCRIPT-FILE exports
the browser scripting language, JavaScript, which is simpler and easier to use
than Java itself.

II. Redirect Export Types: These export types inform the client to
look elsewhere for a URL.  They work for the GET and HEAD operations.
The exported URL can be either an HTTP object or an HTTP path.

        :REDIRECT (&key alternate-urls pathname)
        :TEMPORARY-REDIRECT (&key alternate-urls pathname)

Alternatively, a computed response may call REDIRECT-REQUEST to issue a
redirect rather than serving content itself.

III. Search Export Types: these involve performing searches using the search
index or map search facilities in HTTP. Search URLs must end with ? so that
the system can composed the right combination of classes. In all cases, the
response function must compute the answer and return HTML over the http stream
to the client.

General Purpose Searches

        :SEARCH (&key response-function search-parser search-database)

        This exports a URL that performs searches by calling RESPONSE-FUNCTION with
        the arguments URL and STREAM. The search database and search parameters are
        cached on the URL and accessible via URL:SEARCH-DATABASE and URL:SEARCH-KEYS.

        The optional export argument SEARCH-PARSER is the parser that obtains URL:SEARCH-KEYS
        from the suffix of a search URL. Several parsers are predefined:

                URL:STANDARD-PARSE-SEARCH-INFO: This standard parser for
                search URLs. It tests whether the search info encodes form or
                list data and calls the appropriate of the next two parsers.

                URL:PARSE-SEARCH-INFO: This normal parser for search URLs
                produces a list of search parameters using + as the delimiter.

                URL:PARSE-SEARCH-INFO-AS-QUERY-ALIST: This parser for URL
                encoded form values returns an alist just like posting a form
                would. This parser should be used when an HTML form is
                returned to a search URL.  However, this method of returning
                form values is limited to 1024 characters total in the URL,
                and therefore, it's use in new code is deprecated.

        Users may provide other specialized parsers. They should accept
        the arguments (url-string start end) and need not located the ?
        suffix delimiter.

        The export argument, SEARCH-WRITER, allows a URL to specialize how the
        parsed presentation on URL:SEARCH-KEYS is written. Several writers are
        predefined.

                URL:STANDARD-WRITE-SEARCH-INFO: This standard writer for
                search URLs. It tests whether the search info encodes form or
                list data and calls the appropriate of the next two writers.

                URL:WRITE-SEARCH-INFO: This normal writer for search URLs
                produces a list of search parameters using + as the delimiter.

                URL:WRITE-SEARCH-INFO-AS-QUERY-ALIST: This writer for URL
                encoded form values that prints alist values as name value pairs
                using the urlencoding syntax.

	The export argument, HEADER-FUNCTION, allows a search URL to specialize
	how it responds to the HEAD method based on runtime knowledge.
        HEADER-FUNCTION is called with the argument URL  and returns values
	used to determine respoonse to HEAD. The returned values are:
	(CONTENT-TYPE CONTENT-LENGTH LAST-MODIFICATION VERSION CHARSET PUBLIC ALLOW)
	
		CONTENT-TYPE (required) is a keyword or content-type. Default
		is HTML.

		CONTENT-LENGTH (optional) is the length in bytes of the entity
		body. Default is none.

		LAST-MODIFICATION (optional) is a universal time indicating
		when the entity was last changed. Default is now.
 
		VERSION (optional) is a number or string that distinguishes
		different versions of the entity. Default is none.

		CHARSET (optional) is a keyword indicating the character set
		of the entity. Default is :ISO-8859-1.

		PUBLIC (optional) is a boolean indicating whether the resource
		is available to the public. Default is none.

		ALLOW (optional) is a list of HTTP method keywords available
		on the resource. Default is none.

Image Searches

   Image Maps

        :IMAGE-MAP (&key pathname export-type map-format map-pathname
                         search-parser search-writer header-function)

        This exports the image in PATHNAME as IMAGE-EXPORT-TYPE and
        establishes a response function based on the image map in MAP-PATHNAME
        whose MAP-FORMAT is either :CERN or :NCSA. EXPORT-TYPE is the
        appropriate image search export type (see below).

   Direct Searches

        These provide direct control over the response function for image searches.

        :GIF-IMAGE (&key pathname response-function search-database
                         search-parser search-writer header-function)
        :JPEG-IMAGE (&key pathname response-function search-database
                          search-parser search-writer header-function)
        :PNG-IMAGE (&key pathname response-function search-database
                         search-parser search-writer header-function)
        :X-BITMAP-IMAGE (&key pathname response-function search-database
                              search-parser search-writer header-function)
        :PICT-IMAGE (&key pathname response-function search-database)
                          search-parser search-writer header-function)
        :TIFF-IMAGE (&key pathname response-function search-database
                          search-parser search-writer header-function)

        These export types allow the client's user to click on images and
        invoke a response from the server.  These URL are both objects and
        searchable.  When they are requested without the ? suffix, the
        contents of their associate image file is returned.  When the ? suffix
        appears, their RESPONSE-FUNCTION is called on the arguments URL and
        STREAM. See the macro HTTP:WITH-IMAGE-COORDINATES automatically binds
        the X and Y coordinates.

IV. Computed Export Types: These compute responses returned to clients.

        :COMPUTED (&key response-function header-function) RESPONSE-FUNCTION
        is called with the arguments URL and STREAM and is responsible for
        returning HTML to the client. :COMPUTED has an optional pathname so
        that the computation may reference a file, if necessary.
        HEADER-FUNCTION is documented section III.
        
        :HTML-FORM (&key response-function pathname server) :HTML-FORM returns
        the contents of PATHNAME when it is requested via GET.  When there is
        a POST, its RESPONSE-FUNCTION is called with URL, STREAM, and
        FORM-ALIST.  FORM-ALIST is an alist of (QUERY RAW-VALUE) for all the
        queries in the form that the client returns. QUERY is a keyword.  When
        a client returns multiple raw-values for a QUERY, these are aggregated
        into a list of the values associated with the query in a single,
        order-preserving entry.

        :COMPUTED-FORM (&key form-function response-function header-function
        server) :COMPUTED-FORM is a cross between :COMPUTED and :HTML-FORM
        that provides FORM-FUNCTION to generate html just like :COMPUTED and
        RESPONSE-FUNCTION to handle the post method when form values are
        returned. FORM-FUNCTION is called with the arguments URL and STREAM
        and is responsible for returning HTML to the client. response-function
        takes the same arguments as :HTML-FORM.

        :SCRIPT (&key script header-function) Script is a client-side script
        defined with NS2.0:DEFINE-SCRIPT. These scripts may merely deliver a
        static copy of the client-side script, or they may perform a
        computation that emits an appropriate script.

        :SHTML-FILE (&key pathname header-function) This is a computed
        response that is inserted in a static HTML file containing
        server-parsed HTML. When an SHTML element is found by the server, it
        inserts the result of a computation in place of the SHTML element.
        SHTML elements are delimted by <!--# and --> and look like:

                <!--#include file=\"insert.text\"-->

        INCLUDE is an SHTML operation that requires a FILE. For security
        reasons, FILE must be in the same directory as the STHML file. Access
        may be controlled by providing the optional SUBNETS parameter, which
        is a comma-separated string of IP addresses without whitespace.

         <!--#include file=\"insert.text\" subnets=\"128.52.0.0,18.21.0.0\"-->
        
        EVAL is a more general SHTML operation that requires an ACTION
        parameter. ACTION is a string denoting an SHTML action. Specific
        parameters may be required by individual actions. Here, DATE-TIME
        is the operation and FORMAT is a parameter.

              <!--#eval action=\"date-time\" format=\"iso\"-->

        Predefined actions are documented by HTTP:SHOW-SHTML-ACTIONS. New
        SHTML actions are defined with HTTP:DEFINE-SHTML-ACTION. Files with
        the extention SHTML are autoexported by HTML directory export types.

V. Export Parameters and Issues

1. Portable Exports: The #u reader macro merges a partial URL specification
against the default for the local host. Use this when you be able to load the
same exports file on different hosts. The #u reader macro has an extended syntax
that allows you to overview the default host and port specified by
the server configuration. The syntax is 

     #u(url-string :host host-string :port port-number)

URL-STRING is a relative URI. HOST-STRING is the domain name or
IP string for the host. PORT-NUMBER is an integer.


2. Subnet Security: secure-subnets are a list of IP addresses, where
0 is a wildcard. 128.52.0.0 matches all the subnets at the AI lab.

     DEFINE-SECURE-SUBNETS restricts access globally to the server.

     :SECURE-SUBNETS allows access to be specified at the level of
     URLs as they are exported.

3. Expiration: The expiration time for a url is issued as an EXPIRES header so
that proxy servers can determine when they need to refresh their cache.

Expiration is controlled by providing the :EXPIRATION when exporting any URL.
If expiration is not provided, the default is no expiration date.

The :EXPIRATION keyword takes one argument, which is either keyword or a list
of (keyword &rest arguments).

     Arguments                       Meaning

 :NO-EXPIRATION-HEADER        --  No EXPIREs header is issued.
 :NEVER                       --  EXPIRES header indicates one year from now.
 (:INTERVAL <universal-time>) --  EXPIRES header indicates now + <universal-time>.
 (:TIME <universal-time>)     --  EXPIRES header indicates an <universal-time>.
 (:FUNCTION <function-spec>)  --  EXPIRES header indicates universal time computed by
                                  applying <function-spec> to URL.  <function-spec>
                                  should return a universal for use in the EXPIRES header
                                  or NIL, in which case no EXPIRES header is issued.

4. Character Sets: The :CHARACTER-SET keyword allows any URLs whose content
type is TEXT (e.g., text/plain, text/html) to be exported with character sets
other than the HTTP default :ISO-8859-1, or subsets. The valid character sets
for HTTP are:  :US-ASCII, :ISO-8859-1, :ISO-8859-2, :ISO-8859-3, :ISO-8859-4,
:ISO-8859-5, :ISO-8859-6, :ISO-8859-7, :ISO-8859-8, :ISO-8859-9, :ISO-2022-JP,
:ISO-2022-JP, :ISO-2022-KR, :UNICODE-1-1, :UNICODE-2-2-UTF-7,
:UNICODE-2-2-UTF-7.  Whenever TEXT content types use a character set other
than :ISO-8859-1, the HTTP requires explicit specification via this export
keyword.

6. Languages:  The :LANGUAGE keyword may be supplied for any exported
URL. The value is a sequence of keywords denoting the language(s) in which the
resource is written. HTTP 1.1 defines these keywords in section 3.10 to
conform with RFC 1766. They can be a two-letter ISO 639 language abbreviation,
optionally with a two-letter ISO 3166 country code as a subtag.

7. Documentation: Keywords and a descriptive string can be attached to URLs at
export time.  For directory exports, note that these arguments apply to ALL
URLs exported during the directory walk.

     :KEYWORDS                  A list of keywords.
     :DOCUMENTATION             A string describing the URL.


8. Virtual Hosts: HTTP 1.1 requires a virtual hosting facility,
which this server implements. You can define a virtual host (or
vanity name) that will be served by the physical server from
the same IP address. Any URIs served by a virtual host must be
exported by specifying the absolute URI, including host and port
number.  The #u reader macro may be useful here.  The following
operators are available for use with virtual hosts:

     ADD-VIRTUAL-HOST: Adds a virtual host on a virtual port and
                       and makes URLs served by that host available
                       to HTTP 1.1 or greater clients.

     REMOVE-VIRTUAL-HOST: Makes the virtual host unavailable, but does
                          does not remove any URLs it exports.

9. New static export types for data stored in files can be defined with
DEFINE-URL-EXPORT-TYPE.

10. HTTP 1.1 Cache Control: The keywords below may be supplied when exporting
any URL in order to statically control how downstream proxies and caches
handle the content associated with a URL.

        :PUBLIC -- If the value is T, the entire message is cachable by any
        cache even if it would not normally be cached.

        :PRIVATE -- If the value is T, the entire message is intended for a
        single user and must not be cached by a shared cache. If the value is
        a list of keywords denoting specific header, then only these headers
        should be considered private.

        :NO-CACHE -- If the value is T, the entire message must not be cached
        by any cache along the request chain.  If the value is a list of
        keywords denoting specific headers, then only these headers should be
        discarded before caching.

        :NO-STORE -- If the value is T, the entire message must not be stored
        in any non-volatile storage by any cache along the request chain.

        :MAX-AGE -- The value is the number of seconds for which the response
        is valid, after which it should be revalidated.  This directive
        overrides the expiration header, thus allowing HTTP 1.1 server to
        provide a longer expiration time to HTTP 1.1 servers and proxies.
        This defaults to a value derived from the expiration time.

        :MUST-REVALIDATE -- If the value is T, caches and proxies must not
        serve the resource without revalidating it once it becomes stale, even
        if configured to operate with state data. Servers should send this
        directive if and only if failure to revalidate will result in
        incorrect operation. Recipients must not take any automated action
        that violates this directive.

        :PROXY-REVALIDATE -- If the value is T, this directive is the same as
        :MUST-REVALIDATE except that it applies only to proxies and not
        non-shared user caches. It can be used on response to an authenticated
        request to permit the user's cache to store and later return the
        response without needing to revalidate it.

        :NO-TRANSFORM -- If the value is T, caches and proxies must not change
        the body of the message or change headers describing the content.

11. Property List: The PROPERTY-LIST keyword adds a property list of
alternating keywords and value to a URL.  These properties can be read
and set via GET-VALUE.")

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.312")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod header-function ((url search-mixin) &aux parent)
  (with-slots (header-function) url
    (cond (header-function)
          ((and (setq parent (search-parent url :if-does-not-exist :error))
		(not (eq parent url)))
	   (header-function parent))
	  (t nil))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.346")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(define crlf-file-parameters (pathname)
  "Returns file parameters for the CRLF version of pathname."
  (declare (values (length-in-bytes last-modification version)))
  (let ((crlf-pathname (ensure-crlf-canonical-file pathname)))
    (file-properties crlf-pathname)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.346")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(define crlf-file-length-in-bytes (pathname)
  "Returns file length for the CRLF version of pathname."
  (declare (values (length-in-bytes)))
  (let ((crlf-pathname (ensure-crlf-canonical-file pathname)))
    (file-length-in-bytes crlf-pathname)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.346")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(mapc #'(lambda (x) (export (intern x :http) :http))
      '("CRLF-FILE-PARAMETERS" "CRLF-FILE-LENGTH-IN-BYTES"))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.718")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :head)) (http-version symbol))
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (prog ((search-url-p (url:valid-search-url-p url-string))
	     operator-type)
         retry1
            (handler-case
              ;; We use the search parent for the head method for efficiency
              ;; and in lieu of a regime for providing response functions that
              ;; compute the return of the head method for search inferiors.   8/14/96 -- JCMa.
              (multiple-value-bind (url)
		  (url:intern-url url-string :if-does-not-exist (if search-url-p *search-url-intern-mode* :soft))
                (cond
                  (url
                   (tagbody
                     retry2
                        (cond ((setq operator-type (translation-method url))
                               (setf (server-url server) url) 
                               (with-access-control
                                 (url method server (or (url:secure-subnets url) *secure-subnets*)
                                      :deny-subnets *disallowed-subnets*)
                                 (write-document-headers url operator-type stream)))
                              ((and *auto-export* (auto-export-pathname-url url-string))
                               (go retry2))
                              (t (error 'document-not-found :url url :method :head)))))
                  ((and (not search-url-p) *auto-export* (auto-export-pathname-url url-string))
                   (go retry1))
                  (t (error 'document-not-found :url url-string :method :head))))
              (redirection (cond) (handle-redirect cond retry1)))))))

