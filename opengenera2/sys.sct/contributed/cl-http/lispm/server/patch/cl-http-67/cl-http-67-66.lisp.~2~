;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: url; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.66
;;; Reason: Fix some URL merging issues wrt http-search and provide some DWIM for
;;; generating useful base url references.
;;; 
;;; CLOS class URL:HTTP-SEARCH:  build on http object.
;;; DEFINE-SCHEME-PARSER URL::HTTP:  don't overload http-search path with object.
;;; Function URL::DIRECTORY-NAME-STRING:  new operator for getting the directory spanning an HTTP URL.
;;; Function (CLOS:METHOD URL::DIRECTORY-NAME-STRING (URL:HTTP-URL)):  implement.
;;; Function HTML2:DECLARE-BASE-REFERENCE:  Use the URL directory when URL objects are supplied.
;;; Written by JCMa, 7/23/98 18:14:40
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-72-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.64,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.1,
;;; Comlink Utilities 9.41, COMLINK Cryptography 1.1, Routing Taxonomy 8.3,
;;; COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.32,
;;; Jcma 41, W4 Constraint-Guide Web Walker 39.1, HTTP Client Substrate 1.15,
;;; HTTP Client 48.7, Experimental Image Substrate 438.1,
;;; Experimental Essential Image Substrate 431.0, HTTP Proxy Server 2.11,
;;; W4 Examples 11.0, Experimental URN Resolver 6, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).

(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;URL-CLASS.LISP.11"
  "HTTP:SERVER;URL.LISP.326"
  "HTTP:SERVER;HTML2.LISP.286")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL-CLASS.LISP.11")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: URL; Base: 10 -*-")

(defclass http-search
          (search-parser-mixin search-mixin http-object)
    ()
  (:documentation "Computes a response based on search suffix supplied in url."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.326")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; HTTP URL PARSER
;;; 

(define-scheme-parser
  http
  (:classes (http-url))
  (url start end)
  (let (object extension search-keys search-parent)
    ;; extract the host parameters
    (multiple-value-bind (host-string port path-index)
        (get-host-port-info url start end)
      ;; extract the path components
      (multiple-value-bind (path object-index next-index search-p)
          (get-path-info url path-index end)
        ;; get the object components when present
        (when object-index
          (multiple-value-setq (object extension)
            (get-object-info url object-index next-index)))
        ;; get the search keys where necessary
        (when search-p
          (let ((s-suffix (1+ (the fixnum next-index))))
            (unless (= s-suffix end)
              (setq search-parent (intern-url url :start start :end s-suffix)
                    search-keys (funcall (search-parser search-parent) url s-suffix end)))))
        ;; create the appropriate URL
        (cond
          (search-p
           (let ((object (if extension
                             ;; searchable object (used for searchable images)
                             (make-instance 'http-searchable-object
                                            :name-string (when *retain-original-name-string* (subseq url start end))
                                            :host-string host-string
                                            :port port
                                            :path path
                                            :object object
                                            :extension extension
                                            :search-keys search-keys
                                            :search-parent search-parent)
                             ;; regular search urls
                             (make-instance 'http-search
                                            :name-string (when *retain-original-name-string* (subseq url start end))
                                            :host-string host-string
                                            :port port
                                            :path path
					    :object object
                                            :search-keys search-keys
                                            :search-parent search-parent))))
             ;; inherit the parent's security properties on creation
             (if search-keys
                 (inherit-parent-access-controls object)
                 ;; set the search parent so we know we're the root.
                 (setf (%search-parent object) object))
             object))
          (object
           (make-instance 'http-object
                          :name-string (when *retain-original-name-string* (subseq url start end))
                          :host-string host-string
                          :port port
                          :path path
                          :object object
                          :extension extension))
          (t (make-instance 'http-path
                            :name-string (when *retain-original-name-string* (subseq url start end))
                            :host-string host-string
                            :port port
                            :path path)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.326")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(define-generic directory-name-string (url &optional recompute-p)
  (:documentation "Returns a string consisting of the scheme, host, and path, with all directory components,
ending with a slash."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.326")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod directory-name-string ((url url:http-url) &optional recompute-p)
  (with-value-cached (url :directory-name-string :recompute-p recompute-p)
    (with-output-to-string (stream)
      (write-scheme-prefix url stream)
      (write-host-port-string url stream)
      (write-path url stream)
      (write-char #\/ stream))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.326")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(export (intern "DIRECTORY-NAME-STRING" :url) :url)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML2.LISP.286")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(define declare-base-reference (reference &key (stream *output-stream*))
  "Declares REFERENCE to be the base URL for a html page.
   This should appear once in the headers section of a document.
   When REFERENCE is a URL, the directory URL is automatically computed."
  (%issue-command ("BASE" stream :fresh-line t :trailing-line t)
    (%write-command-key-arg stream "HREF" (etypecase reference
					    (url:url (url::directory-name-string reference))
					    (string reference)))))

