;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;; Patch file for CL-HTTP version 67.87
;;; Reason: Function HTTP::PARSE-REQUEST:  do error on request which is zero length or all whitespace.
;;; Function HTTP:WITH-MIME-MULTIPART-BLOCK:  use last-block flag when writing last boundary.
;;; Function NS11:WITH-SERVER-PUSH-RESPONSE:  update.
;;; DEFINE-SERVER :HTTP:  Revise network error catching. sys:bad-connection-state
;;; covers sys:connection-lost and sys:host-stopped-responding.
;;; Written by JCMa, 9/25/98 16:37:21
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-RL-183-J-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.86, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.111, Email Servers 11.22,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 19.0,
;;; Experimental Joshua 237.3, HTTP Client Substrate 1.17, HTTP Client 48.10,
;;; Experimental Image Substrate 438.1, Experimental Essential Image Substrate 431.0,
;;; HTTP Proxy Server 3.0, W4 Constraint-Guide Web Walker 39.3, W4 Examples 11.0,
;;; Jcma 41, Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.1, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;SERVER.LISP.752"
  "HTTP:SERVER;HEADERS.LISP.364"
  "HTTP:SERVER;NETSCAPE-1-1.LISP.127"
  "HTTP:LISPM;SERVER;LISPM.LISP.400")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.752")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(define parse-request (string &optional (start 0) (end (length string)))
  "Parses an HTTP request string."
  (declare (values method url-string http-version-keyword)
	   (fixnum end)
	   (optimize (speed 3)))
  (let* ((e3 (if (and (not (zerop end)) (white-space-char-p (aref string (1- end))))
		 (position-if-not #'white-space-char-p string :start start :end (1- end) :from-end t)
		 end))
         (s1 (and (not (zerop e3)) (position #\space string :test #'eql :start start :end e3)))
         (s2 (and s1 (position-if-not #'white-space-char-p string :start s1 :end e3)))
         (e2 (and s2 (or (position-if #'white-space-char-p string :start s2 :end e3) e3)))
         (s3 (and e2 (1+ (the fixnum (or (position-if #'white-space-char-p string :start e2 :end e3 :from-end t) e2)))))
         (method (and s1 (%tokenize-header-keyword string 0 s1)))
	 (url-string (and s2 e2 (url:canonicalize-url :http string s2 e2)))
         (version (and s3 (< s3 e3) (%tokenize-header-keyword string s3 e3))))
    ;; Ensure that URLs arrive in canonical form.
    (values method url-string version)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.364")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defmacro with-mime-multipart-block (multipart-keyword (stream &key last-block-p (force-output t) sleep-interval 
                                                               content-type content-length content-location last-modified
                                                               expires boundary) &body body)
  "Use this macro when BODY is writing blocks within a mime multipart document.
LAST-BLOCK-P should be non-null when writing the last block of a multipart mime message.
When FORCE-OUTPUT is non-null, output is forced on STREAM
after executing BODY. The HTTP 1.0 specification recommends including a CONTENT-LOCATION within multipart blocks.
Beware that CONTENT-LENGTH, CONTENT-LOCATION, LAST-MODIFIED, expires, and CONTENT-LOCATION can be multiply evaluated.
When SLEEP-INTERVAL is supplied, the process sleeps for SLEEP-INTERVAL seconds after executing the
body and forcing output if FORCE-OUTPUT is non-null."
  (let ((boundary-writer (if boundary
                             `(write-mime-multipart-boundary ,boundary ,stream)
                             `(write-mime-multipart-boundary 
                                (mime-multipart-boundary-string ,multipart-keyword) ,stream))))
    `(let ((headers `(:content-type ,,(typecase content-type
                                        (keyword `(quote ,(%mime-content-type-spec content-type)))
                                        (t `(%mime-content-type-spec ,content-type)))
                      ,,.(when content-length `(:content-length ,content-length))
                      ,,.(when content-location `(:content-location ,content-location))
                      ,,.(when last-modified `(:last-modified ,last-modified))
                      ,,.(when expires `(:expires ,expires)))))
       (declare (dynamic-extent headers))
       ,boundary-writer
       (write-headers ,stream headers t)
       (multiple-value-prog1
         (progn . ,body)
         ,.(when last-block-p `(,boundary-writer t))
         ,.(when force-output `((force-output ,stream)))
         ,.(when (and sleep-interval (not last-block-p)) `((sleep ,sleep-interval)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;NETSCAPE-1-1.LISP.127")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: netscape1.1; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defmacro with-server-push-response ((stream) &body body)
  "Use this macro to refresh the client display under the server control
from any response function. Each block must be written within a local macro WITH-BLOCK.
Typically an application, will call WITH-BLOCK in a loop that sleeps for
an interval between each iteration. WITH-BLOCK takes the arguments:
  (stream &key content-type content-length content-length content-location (force-output t))

    CONTENT-TYPE is required should be a keyword denoting a mime content type
                 (see: HTTP:MIME-CONTENT-TYPE-KEYWORDS)
    FORCE-OUTPUT should be non-null to transmit output to the client for display
                 after executing BODY.
    SLEEP-INTERVAL is the number of seconds to sleep after executing a block, but before
                 executing the next.

The other header arguments are optional, but recommended. WITH-SERVER-PUSH-RESPONSE
replaces any calls to HTTP:WITH-SUCCESSFUL-RESPONSE or variants."
  (let ((boundary (http::mime-multipart-boundary-string :multipart-mixed-replace)))
    `(macrolet ((with-block ((stream &key last-block-p (force-output t) sleep-interval
                                     content-type content-length content-location) &body body)
                  `(http::with-mime-multipart-block :multipart-mixed-replace
                                                    (,stream
                                                     :last-block-p ,last-block-p
                                                     :boundary ,,boundary
                                                     :force-output ,force-output
                                                     :sleep-interval ,sleep-interval
                                                     :content-type ,content-type
                                                     :content-length ,content-length
                                                     :content-location ,content-location)
                     ,@body)))
       (http:with-successful-response (,stream :multipart-mixed-replace
                                       :location (http:server-url http:*server*))
         (handler-case 
           (progn ,@body)
           (bad-connection-state () t))))))     ;exit via client abort


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.400")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:fix :roman :normal);-*-")

(net:define-server :http (:medium :byte-stream
                          :error-disposition :debugger
                          :stream (stream :accept-p nil
                                          :characters t
                                          :translation :modal)
                          :host client
                          :address client-address
                          :reject-unless-trusted nil)
   (flet ((log-dropped-connection (server)
            (http:set-server-status server 408) ;client timeout status code changed from 504 -- JCMa 5/29/1995.
            (http:log-access server)
            (close stream :abort t))
          (handle-unhandled-error (server error)
            (handler-case
              (progn
                (http:set-server-status server 500)
                (http:log-access server)
                (http::report-status-unhandled-error error stream (http::server-request server))
                (finish-output stream)          ; push the output
                (close stream :abort (not (live-connection-p stream))))
              (sys:connection-lost () (close stream :abort t))
              (sys:host-stopped-responding () (close stream :abort t))
              (neti:protocol-timeout () (close stream :abort t))
              (error (error)
                     (http::bug-report-error error)
                     (close stream :abort t)))
            ;; log the access after the output has been forced.
            (http:log-access server))
          (accept-connection-p ()
            (< http:*number-of-connections* http:*reject-connection-threshold*)))
     (declare (inline accept-connection-p)
              (dynamic-extent #'log-dropped-connection #'handle-unhandled-error))
     ;; when below the rejection threshold, accept the connection.
     (cond
       ((accept-connection-p)
        (accept-connection stream)
        ;; main body
        (scl:using-resource (server http-server stream client client-address)
          (let ((http:*server* server))
            (declare (special http:*server*))
            (flet ((handle-condition (condition)
                     (typecase condition
                       (sys:abort () (close stream :abort (not (live-connection-p stream))))
                       ;; Catch errors where the connection is dropped on the other end
                       (neti:protocol-timeout (log-dropped-connection server))
		       (sys:bad-connection-state (log-dropped-connection server))
		       (sys:network-stream-closed (log-dropped-connection server))
		       (error (handle-unhandled-error server condition))
		       (condition (return-from handle-condition nil))
		       (t (handle-unhandled-error server condition)))	;This should never execute
                     (throw 'exit-http-server nil)))
              (declare (dynamic-extent #'handle-condition))
              (scl:condition-bind-if (not http:*debug-server*)
                                     ((condition #'handle-condition))
                (catch 'exit-http-server
                  (http:provide-service server)))))))
       ;; Server operating at critical, reject the connection summarily.
       (t (reject-connection stream http:*reject-connection-message*)))))

