;;; -*- Mode: LISP; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.54
;;; Reason: Function WWW-UTILS:ATOMIC-CONDITIONAL-REPLACEF:  fix loop forever bug.
;;; Function (CLOS:METHOD HTTP::NOTE-DATA-ACCESS (HTTP::DATA-UNIVERSE-CACHE-MIXIN HTTP::DATA-CACHE-CACHE--MIXIN) :AFTER):  update.
;;; Function TCP::BINARY-STREAM-COPY-UNTIL-EOF-INTO-8-BIT-ARRAY:  new operation.
;;; Function (CLOS:METHOD HTTP::BINARY-STREAM-COPY-INTO-8-BIT-ARRAY (SI:BUFFERED-INPUT-STREAM T)):  allow bytes to be NIL.
;;; Written by JCMa, 6/09/98 22:25:23
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.53, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.110, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.30,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST, Ivory Revision 4A,
;;; IFEP 328, FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24),
;;; FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44),
;;; Boot ROM version 320, Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x802 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:LISPM;SERVER;LISPM.LISP.392"
  "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.123")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.392")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:fix :roman :normal);-*-")

(define-macro atomic-conditional-replacef (reference predicate new-value)
  "When PREDICATE returns non-null, this setfs REFERENCE to NEW-VALUE.
Predicate is called (OLD-VALUE NEW-VALUE). The operation 
assures that precicate applicaiton ande swap are atomic."
  (declare (values old-value))
  (let ((location (gensym))
	(old-value (gensym))
	(pred (gensym)))
    `(let ((,location (scl:locf ,reference))
	   (,pred ,predicate))
       (loop for ,old-value = (scl:location-contents ,location)
	     while (funcall ,pred ,old-value ,new-value)
	     when (scl:store-conditional ,location ,old-value ,new-value)
	       return ,old-value
	     finally (return nil)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer data-cache.lisp >http>server W: (71)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: HTTP -*-")

(defmethod note-data-access :after ((universe data-universe-cache-mixin) (data-cache data-cache-cache--mixin)
                                    &optional access-time)
  (declare (ignore access-time))
  (with-slots (minimum-frequency-data-cache) universe
    (flet ((swap-data-cache-p (data-cache1 data-cache2)
             (or (null data-cache1)
                 (< (data-cache-reference-count data-cache1) (data-cache-reference-count data-cache2)))))
      (unless (data-cache-wired-p data-cache)
        (www-utils:atomic-conditional-replacef minimum-frequency-data-cache #'swap-data-cache-p data-cache))
      data-cache)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.123")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defun binary-stream-copy-until-eof-into-8-bit-array (stream &optional (start 0) 8-bit-array &aux size)
  (flet ((make-the-array (size fill-pointer)
	   (make-array size :fill-pointer fill-pointer :adjustable t :element-type '(unsigned-byte 8)))
	 (adjust-the-array (array size fill-pointer)
	   (let ((new-array (adjust-array array size :fill-pointer fill-pointer
					  :element-type '(unsigned-byte 8))))
	     #+testing(unless (eq new-array array) (format t "New array in adjustment."))
	     new-array))
	 (new-size (size)
	   (cond ((< size 64000) (* 2 size))
		 (t (truncate (* size 1.2))))))
    (declare (inline make-the-array adjust-the-array new-size))
    (cond ((null 8-bit-array)
	   (setq size (+ 1000 start)
		 8-bit-array (make-the-array size start)))
	  (t (setq size (array-total-size 8-bit-array))))
    (cond ;; buffer level copying
      ((operation-handled-p stream :read-input-buffer)
       ;; If it can go, this mode is the most efficient by far.
       (loop with fill-pointer = start
	     for s = fill-pointer
	     doing (multiple-value-bind (buffer offset limit)
		       (send stream :read-input-buffer)
		     (cond ((null buffer)
			    (setf (fill-pointer 8-bit-array) fill-pointer)
			    (return (values 8-bit-array fill-pointer)))
			   (t (setq fill-pointer (+ s (- limit offset)))
			      (when (> fill-pointer size)
				(setq 8-bit-array (adjust-the-array 8-bit-array (setq size (new-size fill-pointer)) fill-pointer)))
			      (copy-array-portion buffer offset limit 8-bit-array s fill-pointer)
			      (send stream :advance-input-buffer))))))
      ;; This always wins, but is incredibly slow.
      (t (let ((array 8-bit-array))
	   (declare (sys:array-register vector))
	   (loop with fill-pointer = start
		 for byte = (read-byte stream nil nil)
		 while byte
		 do (when (= size fill-pointer)
		      (setq array (adjust-the-array array (setq size (new-size size)) fill-pointer)))
		    (setf (aref array fill-pointer) byte)
		    (incf fill-pointer)
		 finally (setf (fill-pointer array) fill-pointer)
			 (return (values array fill-pointer))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.123")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(http::http::defmethod http::binary-stream-copy-into-8-bit-array
                       ((from-stream si:buffered-input-stream) n-bytes &optional (start 0) 8-bit-array)
  (if n-bytes
      (binary-stream-copy-into-8-bit-array from-stream n-bytes start 8-bit-array)
      (binary-stream-copy-until-eof-into-8-bit-array from-stream start 8-bit-array)))

