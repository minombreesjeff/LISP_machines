;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.14
;;; Reason: Function HTTP:BIND-QUERY-VALUES:  cleaner no queries case.
;;; Function (CLOS:METHOD HTTP::INITIALIZE-LOG-FILENAME (HTTP::FILE-LOGGING-MIXIN)):  martin fix.
;;; Function HTTP::PARSE-EQUAL-SIGN-DELIMITED-PAIRS:  fix bug.
;;; Written by JCMa, 11/06/97 21:15:53
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-69-HTTP-67-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.13,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.0,
;;; Comlink Utilities 9.38, COMLINK Cryptography 1.0, Routing Taxonomy 8.2,
;;; COMLINK Database 10.87, Email Servers 11.18,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.16,
;;; Communications Linker Server 38.70,
;;; Experimental Lambda Information Retrieval System 12.24, Jcma 41,
;;; HTTP Proxy Server 2.3, HTTP Client Substrate 1.4, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.0,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).

(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;UTILS.LISP.342"
  "HTTP:SERVER;LOG.LISP.161"
  "HTTP:LISPM;SERVER;LISPM.LISP.357"
  "HTTP:SERVER;HEADERS.LISP.341"
  "HTTP:SERVER;NETSCAPE-1-1.LISP.127")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.342")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(define-macro bind-query-values (queries (url query-alist) &body body)
  "Binds variables to the names of queries with the values of queries in a form.
For use in response functions, dynamic presentation accept methods, and
present methods.  Query can be a symbol or a lists of (query default-value)
If default value is :ERROR, an unbound query condition is signalled.  The
keyword :UNBOUND, used as a default so that response function can handle it.
Sometimes more than one input field will use the same query identifier.  In
these cases, the values returned for the query will be collected in a list.
The predicate VALUES-COLLECTED-P can be applied to the query keyword in order
to find out if collection has taken place. QUERY-BAGGAGE returns any
associated string that may have been packed with HTML:PACK-QUERY-NAME and
transmitted in a form by HTML:ACCEPT-INPUT."  
  (loop with query and null-binding-value
        for spec in queries
        do (etypecase spec
             (symbol (setq query spec
                           null-binding-value nil))
             (cons (setq query (car spec)
                         null-binding-value (second spec))))
        collect `(,query ,(%make-query-binding url (intern (symbol-name query) :keyword) query-alist null-binding-value))
          into bindings
        finally (return (if bindings
			    `(macrolet
			       ((values-collected-p (query)
				  `(%values-collected-p ,query ,',query-alist))
				(query-baggage (query)
				  `(%query-baggage ,query ,',query-alist)))
			       (let ,bindings . ,body))
			    `(progn . ,body)))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;LOG.LISP.161")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: LISP -*-")

(defmethod initialize-log-filename ((log file-logging-mixin))
  (with-slots (name port filename log-file-name) log
    (let* ((pathname (translated-pathname *standard-log-directory*))
           (name-for-file (concatenate 'string log-file-name "-" (write-to-string port :base 10.))))
      (unless (probe-directory pathname)
        (www-utils:create-directories-recursively pathname))
      (setf filename (www-utils:%make-log-pathname
		       (pathname-device pathname)
                       (pathname-directory pathname) name-for-file (pathname-host pathname)))
      log)))                                    ;must return log


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.357")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define %make-log-pathname (device directory name &optional host)
  "Returns the pathname to which current log entries are written."
  (make-pathname
    :host (or host (http::host-domain-name (local-host)))
    :device device
    :directory directory
    :name name
    :type "text"))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.341")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun parse-equal-sign-delimited-pairs (string &optional (start 0) (end (length string)) (delimiter #\;) (require-value-p t))
  (flet ((value-getter (string start end)
           (triming-substring '(#\" #\space #\tab) string start end)))
    (loop with keyword and value
          for s = start then (1+ (the fixnum e))
          while (< s end)
          for s1 = (position-if-not #'white-space-char-p string :start s :end end)
	  while s1
          for e = (or (position delimiter string :start s1 :end end) end)
          do (multiple-value-setq (keyword value)
               (parse-equal-sign-delimited-pair string s1 e #'value-getter require-value-p))
          collect keyword
          collect value)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;NETSCAPE-1-1.LISP.127")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: netscape1.1; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define color-mapping (color &optional (error-p t))
  "Returns the color map specifier for COLOR.
when color is :RANDOM, a randomly selected color is returned.
When COLOR is a hexidecimal color, it is returned.
When COLOR is three element list denoting a 256-bit red, green, and blue,
the hexidecimal color string is returned. "
  (typecase color
    (string
      (with-fast-array-references ((color color))
        (cond ((eql (aref color 0) #\#) color)
	      ((gethash (http:symbolize color http:*keyword-package*) *built-in-client-color-mapping-table*))
              (error-p (error "~S is not one of the known client color mappings." color))
              (t nil))))
    (keyword
      (cond ((eql color :random) (random-color))
            ((gethash color *built-in-client-color-mapping-table*))
            (error-p (error "~S is not one of the known client color mappings." color))
            (t nil)))
    (cons (apply #'encode-color color))
    (t (if error-p
           (error "~S is not one of the known client color mappings." color)
           nil))))
