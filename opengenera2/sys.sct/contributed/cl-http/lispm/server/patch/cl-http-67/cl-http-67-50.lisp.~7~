;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Package: url; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.50
;;; Reason: Function URL::CHECK-HOST-STRING:  pass in url string.
;;; Function URL::MAYBE-TRIM-URL-STRING:  new.
;;; Function URL::GET-MAILTO-INFO:  update.
;;; Function URL::GET-TELNET-INFO:  update.
;;; Function URL::GET-HOST-PORT-INFO:  update.
;;; Function HTTP::WRITE-SERVER-PERSISTENT-CONNECTION-HEADERS:  new.
;;; Function (CLOS:METHOD HTTP::WRITE-SERVER-PERSISTENT-CONNECTION-HEADERS (NULL T T T)):  -
;;; Function (CLOS:METHOD HTTP::WRITE-SERVER-PERSISTENT-CONNECTION-HEADERS (HTTP::BASIC-SERVER-MIXIN T T T)):  -
;;; Remove function HTTP::SERVER-PERSISTENT-CONNECTION-HEADER-PLIST: undefine.
;;; Function (CLOS:METHOD HTTP::REPORT-HTTP-HEADERS (HTTP::REPORTABLE-CONDITION T)):  use %write-document-mime-headers.
;;; Function (CLOS:METHOD HTTP::HTTP-METHODS (HTTP::BASIC-SERVER-MIXIN T)):  provide more general method.
;;; Remove function (CLOS:METHOD HTTP::HTTP-METHODS (HTTP::BASIC-SERVER-MIXIN (EQL :HTTP/1.1))): undefine overly specific method.
;;; Function HTTP::%INTERN-HEADER-KEYWORD-VALUE:  fix brain-damage on caching value case.
;;; Variable HTTP::*REMOTE-CONFIGURATION-FORM-PROTOTYPE*:  move :log-notifications after :log-class so it is respected.
;;; Written by JCMa, 5/14/98 21:53:33
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.49, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.110, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.20,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST, Jcma 41,
;;; Experimental Knowledge-Based Collaboration Webs System 19.0,
;;; Experimental The Project Planner 13.0, W4 Constraint-Guide Web Walker 38.3,
;;; HTTP Client Substrate 1.6, HTTP Proxy Server 2.8, HTTP Client 48.4,
;;; Experimental Image Substrate 438.1, Experimental Essential Image Substrate 431.0,
;;; W4 Examples 10.0, Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.1, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Hacks to DW to let us kludge by. (from PROJECT-PLANNER:CODE;SYSTEM-PATCHES.LISP.6),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7),
;;; Provide MIME Type on Document formats. (from KBCW:SUBSTRATE;DB-DOCUMENT-MIME-TYPE.LISP.25).

;;; Patch file for CL-HTTP version 67.50
;;; Written by JCMa, 5/14/98 23:28:40
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.49, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.110, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.20,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST, Jcma 41,
;;; Experimental Knowledge-Based Collaboration Webs System 19.0,
;;; Experimental The Project Planner 13.0, W4 Constraint-Guide Web Walker 38.3,
;;; HTTP Client Substrate 1.6, HTTP Proxy Server 2.8, HTTP Client 48.4,
;;; Experimental Image Substrate 438.1, Experimental Essential Image Substrate 431.0,
;;; W4 Examples 10.0, Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.1, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Hacks to DW to let us kludge by. (from PROJECT-PLANNER:CODE;SYSTEM-PATCHES.LISP.6),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7),
;;; Provide MIME Type on Document formats. (from KBCW:SUBSTRATE;DB-DOCUMENT-MIME-TYPE.LISP.25).


(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;URL.LISP.319"
  "HTTP:SERVER;HEADERS.LISP.348"
  "HTTP:SERVER;HTTP-CONDITIONS.LISP.153"
  "HTTP:SERVER;SERVER.LISP.737"
  "HTTP:SERVER;SERVER.LISP.738"
  "HTTP:SERVER;HEADERS.LISP.349"
  "HTTP:SERVER;WEB-CONFIGURATION.LISP.38")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.319")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defun maybe-trim-url-string (url-string start end)
  (if (and (or (null start) (zerop start))
	   (or (null end) (= end (length url-string))))
      url-string
      (subseq url-string start end)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.319")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defun check-host-string (host url-string start end)
  (flet ((bad-chars-in-host-p (host)
           (loop for idx upto (the fixnum (1- (length host)))
                 for char = (aref host idx)
                 when (member char *bad-internet-hostname-characters* :test #'char-equal)
                   do (return t)
                 finally (return nil))))
    (declare (inline bad-chars-in-host-p))
    (cond ((numeric-hostname-p host)
           (values host t))
          ((or (zerop (count #\. host))
               (bad-chars-in-host-p host))
           (error 'bad-host-name-specification :host host
		  :url-string (maybe-trim-url-string url-string start end)))
          (t (values host nil)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.319")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defun get-mailto-info (url-string &optional (start 0) end)
  (declare (values userid host-string))
  (let ((pos (position #\@ url-string :start start :end end))
        user-id host)
    (cond (pos
           (setq user-id (subseq url-string start pos)
                 host (subseq url-string (1+ (the fixnum pos)) end))
           ;; check the hostname fo syntactic well-formedness
           (check-host-string host url-string start end)
           ;; return values
           (values user-id host))
          (t (error 'no-host-found :url-string (maybe-trim-url-string url-string start end))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.319")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defun get-telnet-info (url-string &optional (start 0) end)
  (declare (values userid host-string start-index port-number)
           (fixnum start))
  (let ((s (http::string-search= "//" url-string 0 2 start end)))
    (if s
        (let* ((s1 (the fixnum (+ 2 (the fixnum s))))
               (pos (position #\@ url-string :start s1 :end end))
               user-id host)
          ;; get the optional user-id
          (when pos
            (setq user-id (subseq url-string s1 pos))
            (setq s1 (the fixnum (1+ pos))))
          ;; get the optional port info
          (multiple-value-bind (port host-end)
              (get-port-info url-string s1 end)
            ;; get the host string
            (setq host (subseq url-string s1 host-end))
            ;; check the hostname foD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")r0 syntactic well-formedness
            (check-host-string host1 0url-string1 0start1 0end)
            ;; return values
            (values user-id host port)))
        (error 'no-host-found :url-string (maybe-trim-url-string url-string start end)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.319")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defun get-host-port-info (url-string &optional (start 0) end no-delimiter-search-p &aux s e)
  "When no-delimiter-search-p is non-null, parse assumes START and END delimit host-port specification."
  (declare (values host-string port-number start-index)
           (fixnum start))
  (cond
    ((if no-delimiter-search-p
         ;; pregiven, so use them
         (and (setq s start)
              (setq e end))
         ;; find hostport delimiters
         (and (setq s (http::string-search= "//" url-string 0 2 start end))
              (setq e (or (position #\/ url-string :start (setq s (the fixnum (+ 2 s))) :end end) end))))
     (multiple-value-bind (port host-end)
         (get-port-info url-string s e)
       (let ((host (subseq url-string s host-end)))
         ;; check the hostname for syntactic well-formedness
         (check-host-string host url-string start end)
         ;; return values
         (values host port (the fixnum (1+ e))))))
    (t (error 'no-host-found :url-string (maybe-trim-url-string url-string start end)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.737")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(define-generic write-server-persistent-connection-headers (server stream content-type content-length)
  (declare ( values header-plist))
  (:documentation "Writes persistent connection headers to stream.
These handle negotiations concerning persistent connections with clients."))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.737")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod write-server-persistent-connection-headers ((server null) stream content-type content-length)
  (declare (ignore stream content-type content-length))
  nil)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.737")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod write-server-persistent-connection-headers ((server basic-server-mixin) stream content-type content-length)
  (flet ((connection-keep-alive-p (server content-length content-type)
           #-(or genera mcl)
           (declare (ignore content-type))
           (and (persistent-connection-p server t)
                (if (null content-length)
                    (client-http-version-meets-p server :http/1.1)
                    (and content-length
                         #+(or genera mcl)
                         ;; Lispm and MCL do ascii translations skewing the content-length downwards.  12/5/95 -- JCMa.
                         (not (url::content-type-copy-mode-is-text-p content-type)))))))
    (declare (inline connection-keep-alive-p))
    (case (server-http-version server)
      (:http/1.0
        (cond ((connection-keep-alive-p server content-length content-type)
	       (setf (server-close-connection-p server) nil)
	       (write-header :connection '(:keep-alive) stream)
	       (multiple-value-bind (timeout max-requests)
		   (%server-persistent-connection-parameters server t)
		 (let ((value `(:timeout ,timeout :max ,max-requests)))
		   (declare (dynamic-extent value))
		   (write-header :keep-alive value stream))
		 t))
              (t (setf (server-close-connection-p server) t)
                 nil)))
      (:http/0.9 nil)
      ;; Default in HTTP 1.1 is to always use persistent connections.
      (t (cond ((connection-keep-alive-p server content-length content-type)
                (setf (server-close-connection-p server) nil)
                nil)
               (t (setf (server-close-connection-p server) t)
		  (write-header :connection '(:close) stream)
		  t))))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.348")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun %write-document-mime-headers (stream &rest args)
  ;; content-length can be :bytes when one wants an :accept-ranges without a content-length
  (declare (dynamic-extent args)
           #+Genera(scl:arglist stream content-type charset 
                                length last-modification entity-tag expires location content-location content-language
                                public allow cache-control &optional (termination-line-p t) mime-header-plist header-plist))
  (destructuring-bind
    (content-type charset length last-modification entity-tag expires location content-location content-language
                  public allow cache-control &optional (termination-line-p t) header-plist mime-header-plist)
      args
    (let* ((server *server*)
           (http-version (server-http-version server))
           (1-0-protocol-p (member http-version '(:http/1.0 :http/0.9)))
           (content-type (cond ((null content-type) nil)
                               (charset (mime-content-type-spec-merging-character-set content-type charset))
                               (t (%mime-content-type-spec content-type))))
           ;; Lispm and MCL do ascii translations skewing the content-length downwards.
           (content-length (typecase length
                             (integer
                               #+(or Genera MCL LispWorks-UNIX)
                               (and (not (url::content-type-copy-mode-is-text-p content-type)) length)
                               #-(or Genera MCL LispWorks-UNIX)
                               length)
                             (t nil)))
           (accept-bytes-p (or content-length (eql length :bytes))))
      (declare (dynamic-extent content-type headers))
      (write-header :date (server-request-time server) stream)
      (write-header :server *server-version* stream)
      (write-server-persistent-connection-headers server stream content-type length)
      (cond-every
	(last-modification (write-header :last-modified last-modification stream))
	(expires (write-header :expires expires stream))
	(location (write-header :location location stream))
	(accept-bytes-p (write-header :accept-ranges :bytes stream))
	(public (write-header :public public stream))
	(allow (write-header :allow allow stream))
	((and cache-control (not 1-0-protocol-p)) (write-header :cache-control cache-control stream)))
      (write-headers stream header-plist nil)
      (cond-every
	(content-type (write-header :content-type content-type stream))
	(content-length (write-header :content-length content-length stream))
	(content-location (write-header :content-location content-location stream))
	(content-language (write-header :content-language content-language stream))
	(entity-tag
	  (if 1-0-protocol-p
	      (write-header :content-version (entity-tag-value entity-tag) stream)
	      (write-header :etag entity-tag stream))))
      (write-headers stream mime-header-plist termination-line-p))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.153")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-http-headers ((condition reportable-condition) stream &optional (termination-line-p t)
                                header-plist (content-type :html)
                                &aux (server *server*))
  (when (http-close-connection-p condition)
    (setf (server-close-connection-p server) t))
  (%write-document-mime-headers stream content-type nil nil nil nil nil nil nil nil nil nil nil
				termination-line-p nil header-plist))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.737")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE 'SERVER-PERSISTENT-CONNECTION-HEADER-PLIST)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.738")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod http-methods ((server basic-server-mixin) http-version)
  (get-http-methods http-version (type-of server)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.738")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(SCL:FUNDEFINE '(METHOD HTTP-METHODS (BASIC-SERVER-MIXIN (EQL :HTTP/1.1))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.349")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun %intern-header-keyword-value (string &optional (start 0) (end (length string)))
  (let ((n-string (subseq string start end)))
    (multiple-value-bind (keyword old-p)
        (intern (nstring-upcase n-string :start 0 :end (- (the fixnum end) (the fixnum start)))
                *keyword-package*)
      (unless old-p
        (setf (get keyword 'keyword-header-value) n-string))
      (values keyword (not old-p)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;WEB-CONFIGURATION.LISP.38")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

;;;------------------------------------------------------------------- 
;;;
;;; CONFIGURATION FORM PROTOTYPE
;;;

;;; This form prototype specifies which preferences users are allowed to set
;;; through this interface.  also controls ordering of the layout. keywords
;;; are used to access preference objects.  set :http-port here?
(defparameter *remote-configuration-form-prototype*
              '(:listening-processes
                 :max-connections
                
                 :accept-write-methods
                 :authentication-data-pathname
                 :secure-subnets
                
                 :auto-export
                 :standard-export-pathnames
                
                 :mail-host
                 :bug-list
                 :maintainer
                 #+CCL-3 :network-mail-host
                 #+CCL-3 :store-and-forward-mail-hosts
                
                 #+MCL :host-name-for-apple-talk-operation
                 :resolve-ip
                 :url-host-name-resolution

                 
                 :log-resolve-ip
                 :log-times-in-gmt
                 :log-file-stream-stays-open
                 :log-directory
		 :log-class
                 :log-notifications
                
                 :write-config-file
                 :config-pathname
                 ))

