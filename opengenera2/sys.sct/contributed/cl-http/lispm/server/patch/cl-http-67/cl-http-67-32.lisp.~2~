;;; -*- Mode: LISP; Syntax: cltl; Package: tcp; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.32
;;; Reason: Function (DEFUN-IN-FLAVOR TCP::%STRING-OUT TCP::MODAL-ASCII-TRANSLATING-OUTPUT-STREAM-MIXIN):  
;;; Set INSERT-LF to NIL after inserting LF immediately following buffer boundary.
;;; Function (FLAVOR:METHOD :STRING-OUT TCP::MODAL-ASCII-TRANSLATING-OUTPUT-STREAM-MIXIN):  update.
;;; Function (FLAVOR:METHOD :LINE-OUT TCP::MODAL-ASCII-TRANSLATING-OUTPUT-STREAM-MIXIN):  update.
;;; Function (FLAVOR:METHOD TCP::ASCII-INPUT-MODE TCP::MODAL-ASCII-TRANSLATING-BUFFERED-INPUT-STREAM-MIXIN):  robustify for null cases of si:stream-input-limit
;;; Function (FLAVOR:METHOD TCP::BINARY-INPUT-MODE TCP::MODAL-ASCII-TRANSLATING-BUFFERED-INPUT-STREAM-MIXIN):  ditto.
;;; Function (FLAVOR:METHOD TCP::CRLF-INPUT-MODE TCP::MODAL-ASCII-TRANSLATING-BUFFERED-INPUT-STREAM-MIXIN):  ditto.
;;; Written by JCMa, 1/13/98 18:56:13
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-72-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.31,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.1,
;;; Comlink Utilities 9.41, COMLINK Cryptography 1.0, Routing Taxonomy 8.3,
;;; COMLINK Database 10.102, Email Servers 11.19,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.75, Lambda Information Retrieval System 18.14,
;;; Jcma 41, Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.0, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.117")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.117")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defmacro-in-flavor (%string-out modal-ascii-translating-output-stream-mixin) (vector &optional (start 0) end)
  `(let ((vector ,vector)
         (limit (or ,end (length ,vector))))
     (declare (sys:array-register vector))
     (when (< ,start limit)
       (unless si:stream-output-buffer
         (send self :setup-new-output-buffer))
       (flet ((push-byte (buffer byte)
                (setf (aref buffer si:stream-output-index) byte)
                (incf si:stream-output-index)))
         (declare (inline push-byte))
         (ecase output-mode
           (:ascii
             (check-type vector string)
             (loop with insert-lf
                   with idx = ,start
                   doing (let ((buffer si:stream-output-buffer))
                           (declare (sys:array-register buffer))
                           (loop while (and (< idx limit)
                                            (< si:stream-output-index si:stream-output-limit))
                                 for ascii = (si:char-to-ascii (aref vector idx))
                                 do (push-byte buffer ascii)
                                    (incf idx)
                                    (when (eql ascii #.(char-to-ascii #\return))
                                      (if (< si:stream-output-index si:stream-output-limit)
                                          (push-byte buffer #.(char-to-ascii #\linefeed))
                                          (setq insert-lf t)))))
                   when (< idx limit)
                     do (send self :setup-new-output-buffer)
                        (when insert-lf
                          (setf (aref si:stream-output-buffer si:stream-output-index) #.(char-to-ascii #\linefeed))
                          (incf si:stream-output-index)
			  (setq insert-lf nil))
                   else return))
           ((:binary :crlf)
            (check-type vector vector)
            (loop with idx = ,start
                  doing (let ((buffer si:stream-output-buffer))
                          (declare (sys:array-register buffer))
                          (loop while (and (< idx limit)
                                           (< si:stream-output-index si:stream-output-limit))
                                do (push-byte buffer (aref vector idx))
                                   (incf idx)))
                  when (< idx limit)
                    do (send self :setup-new-output-buffer)
                  else return)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.117")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

;; Must be defined to avoid character at a time output.   1/23/97 -- JCMa.
(defmethod (:string-out modal-ascii-translating-output-stream-mixin) (vector &optional (start 0) end)
  (%string-out vector start end))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.117")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defmethod (:line-out modal-ascii-translating-output-stream-mixin) (line &optional (start 0) end)
  (%string-out line start end)
  (put-byte #.(char-to-ascii #\return))
  (put-byte #.(char-to-ascii #\linefeed)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.117")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defmethod (ascii-input-mode modal-ascii-translating-buffered-input-stream-mixin) ()
  (flet ((new-input-index ()
	   (and si:stream-input-index
		si:stream-input-limit
		(< si:stream-input-index si:stream-input-limit)
		si:stream-input-index)))
    (declare (inline new-input-index))
    (ecase input-mode
      (:ascii)
      ((:binary :crlf)
       (prog1 (setq input-mode :ascii)
	      (send self :advance-input-buffer (new-input-index))))
      (:ascii-crlf ;;keep one translated window and undo the rest so standard ascii translation can work.
	(let ((next-cr (find #\return at-string :test #'eql :start si:stream-input-index :end si:stream-input-limit)))
	  (cond (next-cr
		 (setq at-end (1+ next-cr)
		       at-cr-flag t)
		 (untranslate-window si:stream-input-buffer at-string at-end si:stream-input-limit))
		(t (setq at-cr-flag si:stream-input-limit)))
	  (setq at-start si:stream-input-index
		input-mode :ascii))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.117")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

(defmethod (crlf-input-mode modal-ascii-translating-buffered-input-stream-mixin) ()
  (ecase input-mode
    (:ascii
      (cond ;; revert translated bytes back to the index.
        ((and si:stream-input-index at-end (< si:stream-input-index at-end))
         (untranslate-window si:stream-input-buffer at-string si:stream-input-index at-end))
        (at-cr-flag ;; gobble any dangling LF
         (clear-at-cr-flag si:stream-input-index)))
      (setq input-mode :crlf))
    (:ascii-crlf
      (when (< si:stream-input-index at-end)
        (untranslate-window si:stream-input-buffer at-string si:stream-input-index at-end))
      (setq input-mode :crlf))
    (:binary (setq input-mode :crlf))
    (:crlf)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;TCP-LISPM-STREAM.LISP.117")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: Common-Lisp; Package: TCP; Base: 10; Lowercase: preferably; Patch-File: Yes; -*-")

;;The flag is there to tell you if you're seeing a CRLF which you translate to
;;CR.  Switching to binary mode would suggest that you're not at a CR in CRLF.
;;This is true in current http but might change with multiplexed streams?  I
;;changed it to clear the flag for now.
(defmethod (binary-input-mode modal-ascii-translating-buffered-input-stream-mixin) ()
  (ecase input-mode
    (:ascii
      (cond ;; revert translated bytes back to the index.
        ((and si:stream-input-index at-end (< si:stream-input-index at-end))
         (untranslate-window si:stream-input-buffer at-string si:stream-input-index at-end))
        (at-cr-flag ;; gobble any dangling LF
         (clear-at-cr-flag si:stream-input-index)))
      (setq input-mode :binary))
    (:ascii-crlf
      (when (and si:stream-input-index at-end (< si:stream-input-index at-end))
        (untranslate-window si:stream-input-buffer at-string si:stream-input-index at-end))
      (setq input-mode :binary))
    (:crlf (setq input-mode :binary))
    (:binary)))
