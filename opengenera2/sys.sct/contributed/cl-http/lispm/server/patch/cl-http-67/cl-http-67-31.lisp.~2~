;;; -*- Mode: LISP; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.31
;;; Reason: Function HTML2::WRITE-FORM-COMMAND-ARGS:  Add :none option for client-side forms.
;;; Function HTML2:WITH-FILLOUT-FORM:  update documentation.
;;; Function HTML:WITH-FILLOUT-FORM:  update docs.
;;; Function NS2.0:WITH-FILLOUT-FORM:  -
;;; DEFINE-INPUT-TYPE HTML2::CLIENT-SIDE-BUTTON:  new input type.
;;; Function (CLOS:METHOD HTML2:ACCEPT-INPUT (HTML2::CLIENT-SIDE-BUTTON T)):  method.
;;; Written by JCMa, 1/12/98 15:07:37
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-72-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.30,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.1,
;;; Comlink Utilities 9.41, COMLINK Cryptography 1.0, Routing Taxonomy 8.3,
;;; COMLINK Database 10.102, Email Servers 11.19,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.75, Lambda Information Retrieval System 18.14,
;;; Jcma 41, Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.0, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;HTML2.LISP.282"
  "HTTP:SERVER;HTML-3-2.LISP.31"
  "HTTP:SERVER;NETSCAPE-2-0.LISP.116"
  "HTTP:SERVER;HTML2.LISP.283")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML2.LISP.282")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(define-macro with-fillout-form ((action target &key name (stream '*output-stream*)
                                         (encoding-type ''(:application :www-url-form-encoded))
                                         events) &body body)
  "Establishes an fillout-form environment.  
ACTION is either :POST, :MAIL, or :GET, or :NONE.
NAME is a name identifying the form element.
TARGET is the URL to which the form values are returned.
If ACTION is :NONE, TARGET can be NIL.
EVENTS is a list of client-side events processed when the form is submitted.

ENCODING-TYPE is MIME content type to use when return the form values to TARGET.
ENCODING-TYPE defaults to application/x-www-form-urlencoded.
See ACCEPT-INPUT for documentation on client-side events.             
:GET should only be used in exceptional circumstances as not only is
it considered obsolete but it also is limited to 1024 characters 
including the rest of the the Target URL."
  `(cond (*open-form*
          (error "HTML does not allow nesting of forms."))
         (t (%with-environment ("FORM" :fresh-line t :stream ,stream)
                               (write-form-command-args ,stream ,action ,target ,encoding-type
                                                        ,name ,events)
              (let ((*open-form* t))
                ,@body)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML-3-2.LISP.31")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: html3.2; -*-")

;;;------------------------------------------------------------------- 
;;;
;;; FILLOUT FORMS
;;;

(define-macro with-fillout-form ((action target &key name (stream '*output-stream*)
                                         (encoding-type ''(:application :www-url-form-encoded))) &body body)
  "Establishes an fillout-form environment.  
ACTION is either :POST, :MAIL, or :GET, or :NONE.
NAME is a name identifying the form element.
TARGET is the URL to which the form values are returned.
If ACTION is :NONE, TARGET can be NIL.

ENCODING-TYPE is MIME content type to use when return the form values to TARGET.
ENCODING-TYPE defaults to application/x-www-form-urlencoded.
See ACCEPT-INPUT for documentation on client-side events.             
:GET should only be used in exceptional circumstances as not only is
it considered obsolete but it also is limited to 1024 characters 
including the rest of the the Target URL."
  `(html2:with-fillout-form (,action ,target :name ,name :stream ,stream :encoding-type ,encoding-type)
     ,@body))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;NETSCAPE-2-0.LISP.116")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: netscape2.0; BASE: 10; Syntax: ansi-common-lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define-macro with-fillout-form ((action url &key name (stream '*output-stream*)
                                         (encoding-type ''(:application :www-form-url-encoded))
                                         target events) &body body)
  "Establishes an fillout-form environment.  
ACTION is either :POST, :MAIL, :GET, :NONE.
URL is the URL to which the form values are returned.
NAME is a name identifying the form element.
TARGET names the window in a frame to which the results of form submission are returned.
If ACTION is :NONE, TARGET can be NIL.
EVENTS is a list of client-side events processed when the form is submitted.

ENCODING-TYPE is MIME content type to use when return the form values to URL.
ENCODING-TYPE defaults to application/x-www-form-URLencoded.
See ACCEPT-INPUT for documentation on client-side events.             
:GET should only be used in exceptional circumstances as not only is
it considered obsolete but it also is limited to 1024 characters 
including the rest of the the URL URL.

When using the :POST action, the encoding type is normally (:application :www-URL-form-encoded).
The encoding type (:multipart :form-data) can be used to allow the user to
post data from a file.  The input types FILE-UPLOAD and SUBMIT-FILE-BUTTON
are available for this purpose, but
with-fillout-form must be invoked with compatible arguments."
  `(cond (*open-form*
          (error "HTML does not allow nesting of forms."))
         (t (%with-environment ("FORM" :fresh-line t :stream ,stream)
                               (write-form-command-args ,stream ,action ,url ,encoding-type
                                                        ,name ,target ,events)
              (let ((*open-form* t))
                ,@body)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML2.LISP.283")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(defun write-form-command-args (stream action value &optional (encoding-type '(:application :x-www-form-urlencoded))
                                       name events)
  (let ((encoding-type-string (http::write-mime-content-type encoding-type)))
    (declare (dynamic-extent encoding-type-string))
    (when name
      (%write-command-key-arg stream "NAME" name))
    (ecase action
      (:post
        (%write-command-key-arg stream "ACTION" (coerce-url-string value))
        (%write-command-key-arg stream "METHOD" "POST")
        (%write-command-key-arg stream "ENCTYPE" encoding-type-string)
        (dolist (event events)
          (%write-input-type-event-arg stream event)))
      (:mail
        (check-type value string)
        (unless (position  #\@ value)
          (error "Ill-formed email address, ~S." value))
        (let ((url (concatenate 'string "mailto:" value)))
          (declare (dynamic-extent url))
          (%write-command-key-arg stream "ACTION" url)
          (%write-command-key-arg stream "ENCTYPE" encoding-type-string)))
      (:get
        (%write-command-key-arg stream "ACTION" (coerce-url-string value))
        (%write-command-key-arg stream "METHOD" "GET")
        (%write-command-key-arg stream "ENCTYPE" encoding-type-string))
      (:none))
    (dolist (event events)
      (html2::%write-input-type-event-arg stream event))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML2.LISP.283")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; BUTTON
;;;

(define-input-type
  client-side-button
  :type-arg "button"
  :lisp-type 'null)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML2.LISP.283")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(defmethod accept-input ((client-side-button client-side-button) query-name &rest args &key (stream *output-stream*) &allow-other-keys)
  (destructuring-bind (&key display-string image-url &allow-other-keys) args
    (%issue-command ("INPUT" stream)
      (write-standard-input-type-args (stream query-name client-side-button args :bind-default nil)
        (%write-command-key-arg stream "VALUE" (or display-string "Submit"))
        (when image-url
          (%write-command-key-arg stream "SRC" (coerce-url-string image-url)))))))


(export (intern "CLIENT-SIDE-BUTTON" :html2) :html2)
