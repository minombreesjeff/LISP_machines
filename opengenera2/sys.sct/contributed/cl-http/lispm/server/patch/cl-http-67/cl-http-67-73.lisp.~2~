;;; -*- Mode: LISP; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.73
;;; Reason: DEFINE-CONDITION HTTP::UNKNOWN-AUTHENTICATION-METHOD:  new condition.
;;; Function (CLOS:METHOD HTTP::%PARSE-AUTHORIZATION-HEADER (T T)):  signal unknown-authentication-method for unknown methods.
;;; Function HTTP::WITH-AUTHENTICATION-ACCESS-CONTROL:  install handler for unknown-authentication-method.
;;; Function HTTP::WITH-ACCESS-CONTROL:  update.
;;; Function HTTP::%PUT-NEW-RESOURCE:  update.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :DELETE) SYMBOL)):  update.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :GET) SYMBOL)):  update.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :HEAD) SYMBOL)):  update.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :OPTIONS) (EQL :HTTP/1.1))):  update.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :POST) SYMBOL)):  update.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :PUT) SYMBOL)):  update.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :TRACE) (EQL :HTTP/1.1))):  update.
;;; Function (CLOS:METHOD HTTP::RESPOND-TO-IMAGE-MAP (URL:HTTP-SEARCHABLE-OBJECT T)):  update.
;;; Written by JCMa, 8/13/98 13:55:33
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.71, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.34,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST, Jcma 41,
;;; HTTP Client Substrate 1.16, HTTP Proxy Server 2.11, HTTP Client 48.9,
;;; Experimental Image Substrate 438.1, Experimental Essential Image Substrate 431.0,
;;; W4 Constraint-Guide Web Walker 39.2, W4 Examples 11.0,
;;; Experimental URN Resolver 9, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;HTTP-CONDITIONS.LISP.155"
  "HTTP:SERVER;HEADERS.LISP.358"
  "HTTP:SERVER;AUTHENTICATION.LISP.140"
  "HTTP:SERVER;SERVER.LISP.742")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.155")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(eval-when (load eval compile)
(define-condition unknown-authentication-method
		  (access-control-condition)
  ((authentication-method :initarg :authentication-method :reader http-authentication-method)))
)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.358")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defmethod %parse-authorization-header (string method &optional (start 0) (end (length string)))
 (declare (ignore start end))
  (error 'unknown-authentication-method :authentication-method method
	 :format-string "Unknown Authentication Method: ~S" :format-args (list method)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;AUTHENTICATION.LISP.140")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(define-macro with-authentication-access-control ((url method authorization realm &key rejection-form
                                                       require-capabilities) &body body)
  "Executes REJECTION-FORM whenever AUTHORIZATION does not qualify for CAPABILITIES under REALM,
Otherwise executes BODY. If REQUIRE-CAPABILITIES is non-null, all accesses are
rejected whenever CAPABILITIES is null"
  `(cond (,realm
	  (handler-case
	    (let ((user (authenticate-user ,realm ,authorization ,method)))
	      (cond ((and user
			  (let ((capabilities (url:capabilities ,url)))
			    ,(if require-capabilities
				 `(and capabilities (allow-user-access-p capabilities user ,method))
				 `(or (null capabilities) (allow-user-access-p capabilities user ,method)))))
		     (setf (server-user-object *server*) user)
		     ,@body)
		    (t ,rejection-form)))
	    (unknown-authentication-method () ,rejection-form)))
         (t ,@body)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;AUTHENTICATION.LISP.140")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(define-macro with-access-control ((url method server secure-subnets &key require-secure-subnets require-capabilities
                                        deny-subnets write-method-p) &body body)
  (let ((code `(with-subnet-access-control ((server-address ,server)
                                            ,secure-subnets
                                            :deny-subnets ,deny-subnets
                                            :require-secure-subnets ,require-secure-subnets
                                            :rejection-form (error 'access-forbidden :method ,method :url ,url))
                 (let ((.realm. (url:authentication-realm ,url)))
                   (with-authentication-access-control
                     (,url ,method
                      (get-header :authorization)
                      .realm.
                      :require-capabilities ,require-capabilities
                      :rejection-form (error 'recoverable-unauthorized-client-access :method ,method :url ,url
                                             :authentication-method (authentication-scheme ,url) 
                                             :authentication-realm .realm.))
                     ,@body)))))
    (if write-method-p
        `(with-remote-write-control (,url :rejection-form (error 'access-forbidden :method ,method :url ,url))
           ,code)
        code)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun %put-new-resource (server stream url-string &aux (length (length url-string)))
  (labels ((url-inferior-directory (parent 1st-delim)
             (loop with start = (incf 1st-delim)
                   while (< start length)
                   for delim = (position #\/ url-string :start start :end length :test #'eql)
                   while delim
                   collect (subseq url-string start delim) into inf-path
                   do (setq start (1+ (the fixnum delim)))
                   finally (return (let ((path (translated-pathname parent)))
                                     (make-pathname :host (pathname-host path)
                                                    :device (pathname-device path)
                                                    :directory `(,@(pathname-directory path) ,.inf-path))))))
           (url-inferior-pathname (parent 1st-delim last-delim directory-level)
             (let ((name-and-extension (subseq url-string (1+ (the fixnum last-delim)) length)))
               (declare (dynamic-extent name-and-extension))
               (merge-pathnames name-and-extension (case directory-level
                                                     (0 (translated-pathname parent))
                                                     (t (url-inferior-directory parent 1st-delim))))))
           (put-inferior (parent 1st-delim last-delim directory-level)
             (let ((pathname (url-inferior-pathname parent 1st-delim last-delim directory-level)))
               (unless (or (zerop directory-level) (probe-directory pathname))
                 (create-directories-recursively pathname))
               (multiple-value-bind (url)
                   (intern-url (merge-url url-string (local-context)) :if-does-not-exist :create)
                 (inherit-export-parameters url parent)
                 (setf (url:translated-pathname url) pathname
                       (url:translation-method url) (export-type-for-pathname-type (pathname-type pathname) t))
                 (put-document url stream t nil)))))
    (multiple-value-bind (parent p-export-type export-type directory-level 1st-delim last-delim)
        (most-specific-exported-parent-url url-string -1 length)
      (unless parent (error 'document-not-found :url url-string :method :put))
      (with-access-control (parent :put server (or (url:secure-subnets parent) *secure-subnets*)
                                   :deny-subnets *disallowed-subnets* :write-method-p t)
        (cond ((not (and export-type ;;object with export type matched to directory export type.
                         (directory-type-exports-pathname-export-type-p p-export-type export-type)))
               (error 'method-not-allowed :method :put :url url-string))
              ((directory-export-type-p p-export-type)  ;single level directory export.
               (case directory-level
                 (0 (put-inferior parent 1st-delim last-delim 0))
                 (t (error 'document-not-found :url url-string :method :put))))
              ((hierarchical-directory-export-type-p p-export-type)
               (case directory-level
                 (0 (put-inferior parent 1st-delim last-delim 0))
                 ;; need to handle the export of newly created intervening directory levels.  6/11/95 -- JCMa.
                 (t (put-inferior parent 1st-delim last-delim directory-level))))
              (t (error 'method-not-allowed :method :put :url url-string)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :delete)) (http-version symbol)
                                 &aux translation-method)
  (macrolet ((with-delete-response ((server stream) &body body)
               `(multiple-value-bind (url status)
                    (progn . ,body)
                  ;; this could send back a 200 if there was a message to be returned 
                  ;; it would need to force output because
                  ;; provide service won't handle it 6/11/95 -- JCMa.
                  (ecase status
                    (:deleted 
                      (setf (server-status ,server) 204.)
                      (report-status-no-content ,stream))
                    (:accepted
                      (setf (server-status ,server) 202.)
                      (report-status-accepted,stream)))
                  ;; write some headers as the close of transaction
                  (write-headers* ,stream :date (get-universal-time)
                                  :location (url:name-string url)
                                  :server *server-version*))))
    (with-slots (address stream url-string) server
      (multiple-value-bind (url)
          (url:intern-url url-string :if-does-not-exist :soft)
        (cond ((and url (setq translation-method (translation-method url)))
               (setf (server-url server) url)
               (with-access-control (url method server (or (url:secure-subnets url) *secure-subnets*)
                                         :write-method-p t)
                 (case translation-method
                   ((:redirect :temporary-redirect)     ; redirect when there is forwarding.
                    (handle-url-standard-redirection
                      url (eql :temporary-redirect translation-method) :delete))
                   (t (with-delete-response (server stream)
                                            (delete-document url stream))))))
              (t (error 'document-not-found :url url-string :method :delete)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :get)) (http-version symbol))
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (prog ((search-url-p (url:valid-search-url-p url-string))
             operator-type)
         retry1
            (handler-case
              (multiple-value-bind (url)
                  (url:intern-url url-string :if-does-not-exist (if search-url-p *search-url-intern-mode* :soft))
                (cond
                  (url
                   (tagbody
                     retry2
                        (cond ((setq operator-type (translation-method url))
                               (setf (server-url server) url) 
                               (with-access-control (url method server (or (url:secure-subnets url) *secure-subnets*)
                                                         :deny-subnets *disallowed-subnets*)
                                 (write-document url operator-type stream)))
                              ((and *auto-export* (auto-export-pathname-url url-string))
                               (go retry2))
                              (t (error 'document-not-found :url url :method :get)))))
                  ((and (not search-url-p) *auto-export* (auto-export-pathname-url url-string))
                   (go retry1))
                  (t (error 'document-not-found :url (or url url-string) :method :get))))
              (redirection (cond) (handle-redirect cond retry1)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :head)) (http-version symbol))
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (prog ((search-url-p (url:valid-search-url-p url-string))
	     operator-type)
         retry1
            (handler-case
              ;; We use the search parent for the head method for efficiency
              ;; and in lieu of a regime for providing response functions that
              ;; compute the return of the head method for search inferiors.   8/14/96 -- JCMa.
              (multiple-value-bind (url)
		  (url:intern-url url-string :if-does-not-exist (if search-url-p *search-url-intern-mode* :soft))
                (cond
                  (url
                   (tagbody
                     retry2
                        (cond ((setq operator-type (translation-method url))
                               (setf (server-url server) url) 
                               (with-access-control
                                 (url method server (or (url:secure-subnets url) *secure-subnets*)
                                      :deny-subnets *disallowed-subnets*)
                                 (write-document-headers url operator-type stream)))
                              ((and *auto-export* (auto-export-pathname-url url-string))
                               (go retry2))
                              (t (error 'document-not-found :url url :method :head)))))
                  ((and (not search-url-p) *auto-export* (auto-export-pathname-url url-string))
                   (go retry1))
                  (t (error 'document-not-found :url url-string :method :head))))
              (redirection (cond) (handle-redirect cond retry1)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :options)) (http-version (eql :http/1.1)))
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (tagbody
        retry1
           (handler-case
             (multiple-value-bind (url)
                 (url:intern-url url-string :if-does-not-exist :soft)
               (cond
                 (url
                  (tagbody
                    retry2
                       (cond ((translation-method url)
                              (setf (server-url server) url) 
                              (with-access-control (url method server (or (url:secure-subnets url) *secure-subnets*)
                                                        :deny-subnets *disallowed-subnets*)
                                (write-document-headers url :options stream)))
                             ((and *auto-export* (auto-export-pathname-url url-string))
                              (go retry2))
                             (t (error 'document-not-found :url url :method :options)))))
                 ((and *auto-export* (auto-export-pathname-url url-string))
                  (go retry1))
                 (t (error 'document-not-found :url (or url url-string) :method :options))))
             (redirection (cond) (handle-redirect cond retry1))))))) 


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :post)) (http-version symbol) &aux translation-method)
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (tagbody
        retry1
           (handler-case
             (destructuring-bind (&optional doc-type doc-subtype &rest args) (get-header :content-type)
               (declare (ignore args))
               (cond
                 ((and doc-type doc-subtype)
                  (multiple-value-bind (url)
                      (url:intern-url url-string :if-does-not-exist :soft)
                    (cond ((and url (setq translation-method (translation-method url)))
                           (setf (server-url server) url)
                           (with-access-control (url method server (or (url:secure-subnets url) *secure-subnets*)
                                                     :deny-subnets *disallowed-subnets*)
                             (case translation-method
                               ((:redirect :temporary-redirect) ; redirect when there is forwarding.
                                (handle-url-standard-redirection
                                  url (eql translation-method :temporary-redirect) :post))
                               (t (case http-version
                                    ((:http/0.9 :http/1.0))
                                    ;; alert HTTP 1.1 or greater clients that we are ready
                                    (t (report-status-continue stream)
                                       (send-cr-line-feed stream)
                                       (force-output stream)
                                       (setf (server-status server) 100.)))
                                  ;; Upgrade this when reading chunked encodings is available. 7/24/96 -- JCMa.
                                  (let ((transfer-encoding (get-header :transfer-encoding)))
                                    (when transfer-encoding
                                      (error 'server-not-implemented :close-connection t :url url :method :post
                                             :format-string "The HTTP transfer encoding, ~A, is not implemented."
                                             :format-args (list transfer-encoding)))
                                    (post-document url doc-type doc-subtype stream))))))
                          (t (error 'document-not-found :url url-string :method :post :close-connection t)))))
                 (t (error 'unsupported-method :method :post :url url-string :close-connection t))))
             (redirection (cond) (handle-redirect cond retry1)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :put)) (http-version symbol)
                                 &aux url translation-method)
  (with-slots (address stream url-string) server
    (cond ;; resource already exists, so put a new version.
      ((and (setq url (url:intern-url url-string :if-does-not-exist :soft))
            (setq translation-method (translation-method url)))
       (setf (server-url server) url)
       (with-access-control (url method server (or (url:secure-subnets url) *secure-subnets*)
                                 :deny-subnets *disallowed-subnets*
                                 :write-method-p t)
         (case translation-method
           ((:redirect :temporary-redirect)     ; redirect when there is forwarding.
            (handle-url-standard-redirection
              url (eql translation-method :temporary-redirect) :put))
           (t (put-document url stream nil *check-document-versions*)))))
      (t (%put-new-resource server stream url-string)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :trace)) (http-version (eql :HTTP/1.1)))
  (with-slots (stream url-string headers) server
    (let ((url (url:intern-url url-string :if-does-not-exist :soft)))
      (cond ((or (and url (translation-method url))
                 (and *auto-export* (auto-export-pathname-url url-string)))
             (setf (server-url server) url) 
             (with-access-control
               (url method server (or (url:secure-subnets url) *secure-subnets*)
                    :deny-subnets *disallowed-subnets*)
               ;; this is the meat of the trace response
               (with-chunked-transfer-encoding
                 (stream '(:message :http) :status :success :content-location url :cache-control '(:no-cache t))
                 (let ((header-plist (header-alist-to-plist headers)))
                   (declare (dynamic-extent header-plist))
                   (write-headers stream header-plist t)))))
            (t (error 'document-not-found :url url-string :method :trace))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.742")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod respond-to-image-map ((url url:http-searchable-object) stream)
  (with-image-coordinates (url)
    (let* ((url-parent (url:search-parent url))
           (database (url:search-database url-parent))
           (destination-url (get-image-map-hit database x y))
           operator-type)
      (cond ((null destination-url) (error "No destination URL found."))
            ((host-eq (host-object destination-url)
                      (local-host))
             (cond ((setq operator-type (translation-method destination-url))
                    (with-access-control (destination-url :get *server* (or (url:secure-subnets destination-url)
                                                                            *secure-subnets*)
                                                          :deny-subnets *disallowed-subnets*)
                      (write-document destination-url operator-type stream)))
                   (t (error 'document-not-found :url destination-url))))
            (t (signal 'document-moved-permanently :url url :new-urls (list destination-url)))))))

