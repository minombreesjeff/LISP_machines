;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.9
;;; Reason: Function (CLOS:METHOD HTTP::PUT-DOCUMENT (URL:HTTP-OBJECT T)):  fix signal of content length required error.
;;; Function WWW-UTILS:%MAKE-LOG-PATHNAME:  add device argument.
;;; Function (CLOS:METHOD HTTP::INITIALIZE-LOG-FILENAME (HTTP::FILE-LOGGING-MIXIN)):  call www-utils:%make-log-pathname with device.
;;; Written by JCMa, 10/07/97 11:36:54
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-69-HTTP-67-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.0, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.8,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.0,
;;; Comlink Utilities 9.38, COMLINK Cryptography 1.0, Routing Taxonomy 8.2,
;;; COMLINK Database 10.85, Email Servers 11.18,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.12,
;;; Communications Linker Server 38.69,
;;; Experimental Lambda Information Retrieval System 12.14, HTTP Client 48.0,
;;; HTTP Client Substrate 1.2, Experimental Image Substrate 438.1, Jcma 41,
;;; Experimental Essential Image Substrate 431.0,
;;; W4 Constraint-Guide Web Walker 38.0, W4 Examples 10.0, HTTP Proxy Server 2.1,
;;; Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.0, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;SERVER.LISP.688"
  "HTTP:LISPM;SERVER;LISPM.LISP.346"
  "HTTP:SERVER;LOG.LISP.159")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.688")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod put-document ((url url:http-object) stream &optional newly-created-url-p (check-versions-p t))
  (declare (values url exported))
  (macrolet ((with-crlf-environment ((url pathname) &body body)
               `(let* ((content-type (get-header :content-type *headers*))
                       (copy-mode (if content-type
                                      (mime-content-type-copy-mode content-type)
                                      (url:copy-mode ,url))))
                  (case copy-mode
                    (:crlf
                      (let ((crlf-pathname (crlf-pathname ,pathname)))
                        ,.(subst 'crlf-pathname pathname body)
                        (decode-crlf-file crlf-pathname)
                        (set-file-author ,pathname server nil)
                        (values url (if newly-created-url-p :created :modified) (www-utils:file-modification-date crlf-pathname))))
                    (t ,@body
                       (set-file-author ,pathname server nil)
                       (values url (if newly-created-url-p :created :modified) (www-utils:file-modification-date ,pathname)))))))
    (let ((pathname (url:translated-pathname url))
          (server *server*)
          (headers *headers*)
          bytes transfer-encoding)
      ;; throw out of http transaction if a conflict is detected
      (when check-versions-p
        (let ((version (document-version pathname)))
          (case (server-http-version server)
            ((:http/0.9 :http/1.0)
             (check-derived-from-version url version))
            (t (check-if-match-precondition version t :put headers) 
               (check-if-unmodified-since-precondition version :put headers)))))
      ;; check for byte ranges in 1.1
      (when (get-header :content-range headers)
        (error 'server-not-implemented :url url :method :put
               :format-string "Putting byte ranges is not implemented."))
      (cond ((setq transfer-encoding (get-header :transfer-encoding headers))
             (case transfer-encoding
               #+(or Genera MCL)
               (:chunked
                 (with-successful-put-response (server stream)
                   (with-crlf-environment (url pathname)
                                          (with-chunked-transfer-decoding (stream :headers headers)
                                            (stream-copy-until-eof stream pathname copy-mode)))))
               (t (error 'server-not-implemented :close-connection t :url url :method :put
                         :format-string "The HTTP transfer encoding, ~A, is not implemented."
                         :format-args (list transfer-encoding)))))
            ((and (setq bytes (get-header :content-length headers)))
             (handler-case-if (not *debug-server*) 
                (with-successful-put-response (server stream)
                  (with-crlf-environment (url pathname)
                                         (stream-copy-bytes stream pathname bytes copy-mode)))
               (error (err)
                      (error 'error-handling-put-method :url url :method :put :server-error err :headers (header-plist)
                             :format-string "Error executing PUT method for ~A."
                             :format-args (list (url:name-string url))))))
            (t (error 'content-length-required :url url :method :put
                      :format-string "no content-length header provided for ~A."
                      :format-args (list (url:name-string url))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:LISPM;SERVER;LISPM.LISP.346")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define %make-log-pathname (device directory name &optional machine-name)
  "Returns the pathname to which current log entries are written."
  (make-pathname
    :device device
    :directory directory
    :name name
    :host machine-name
    :type "text"))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;LOG.LISP.159")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: LISP -*-")

(defmethod initialize-log-filename ((log file-logging-mixin))
  (with-slots (name port filename log-file-name) log
    (let* ((pathname (translated-pathname *standard-log-directory*))
           (host (pathname-host pathname))
           (machine-name (if host
                             (format nil "~A" host)
                             (host-domain-name (local-host))))
           (name-for-file (concatenate 'string log-file-name "-" (write-to-string port :base 10.))))
      (unless (probe-directory pathname)
        (www-utils:create-directories-recursively pathname))
      (setf filename (www-utils:%make-log-pathname
		       (pathname-device pathname)
                       (pathname-directory pathname) name-for-file machine-name))
      log)))                                    ;must return log

