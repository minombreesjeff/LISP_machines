;;; -*- Mode: LISP; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.6
;;; Reason: Function HTTP::%REPORT-STATUS-MESSAGE:  avoid format confusion with ~s.
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS-MESSAGE (HTTP::REPORTABLE-CONDITION T)):  apply format to args here.
;;; Function HTTP::PARSE-FORWARDED-HEADER:  fix typo.
;;; Function HTTP::PRINT-FORWARDED-HEADER:  ditto.
;;; DEFINE-HEADER :FORWARDED:  update
;;; Function (CLOS:METHOD HTTP:VALID-CRLF-CACHE-FILE-P (T)):  avoid error if pathname does not exist.
;;; Function %define-preference-type: update keyword correctly.
;;; Written by JCMa, 10/03/97 10:34:08
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-69-HTTP-67-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.0, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.5,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.0,
;;; Comlink Utilities 9.38, COMLINK Cryptography 1.0, Routing Taxonomy 8.2,
;;; COMLINK Database 10.85, Email Servers 11.18,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.12,
;;; Communications Linker Server 38.69,
;;; Experimental Lambda Information Retrieval System 12.14, HTTP Client 48.0,
;;; HTTP Client Substrate 1.2, Experimental Image Substrate 438.1, Jcma 41,
;;; Experimental Essential Image Substrate 431.0,
;;; W4 Constraint-Guide Web Walker 38.0, W4 Examples 10.0, HTTP Proxy Server 2.1,
;;; Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.0, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;HTTP-CONDITIONS.LISP.148"
  "HTTP:SERVER;HEADERS.LISP.334"
  "HTTP:SERVER;UTILS.LISP.338"
  "HTTP:SERVER;PREFERENCES.LISP.33")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.148")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defun %report-status-message (url reason stream &optional report)
  (with-html-document (:declare-dtd-version-p t :stream stream)
    (with-document-preamble (:stream stream)
      (declare-title reason :stream stream))
    (with-standard-document-body (:stream stream)
      (with-section-heading (reason :stream stream)
        (horizontal-line :stream stream)
        (with-paragraph (:stream stream)
          (cond (report
		 (html:with-verbatim-text (:fresh-line nil :stream stream)
		   (html:write-string-quoting-specials report stream)))
                (url (fast-format stream "~A for URL ~A"
                                  reason (typecase url
                                           (url (url:name-string url))
                                           (t url))))
                (t (let ((mail-url (concatenate 'string "mailto:" (server-mail-address))))
                     (declare (dynamic-extent mail-url))
                     (fast-format stream "~&Error ~D not properly reported.~&Please advise the server maintainer at: "
                                  (server-status *server*))
                     (note-anchor (server-mail-address) :reference mail-url :stream stream)))))
        (horizontal-line :stream stream)
        (cl-http-signature stream)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.148")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-status-message ((condition reportable-condition) stream &optional format-string format-args)
  (let* ((status-code (status-code condition))
         (reason (or (http-reason condition)
                     (get-string-for-status-code status-code)))
         (url (http-url condition)))
    (unless format-string
      (setq format-string (format-string condition)))
    (unless format-args
      (setq format-args (format-args condition)))
    (when (or url format-string)
      (let ((report (apply #'format nil format-string format-args)))
	(declare (dynamic-extent report))
	(%report-status-message url reason stream report)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.334")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

;;;------------------------------------------------------------------- 
;;;
;;; PARSING FORWARDED HEADERS
;;;

;; case where origin host concealed by proxy
;;" by http://humes.ih.att.com:8000 (Netscape-Proxy/1.1)"   6/29/95 -- JCMa.

;; value:: (origin proxy &optional port proxy-product)

(defun parse-forwarded-header (string &aux (len (length string))
				     pos1 pos2 s-proxy e-proxy s-origin)
  (flet ((get-port (string port-delim e-proxy)
	   (declare (fixnum port-delim))
	   (when port-delim
	     (let ((s-port (1+ (the fixnum port-delim))))
	       (unless (eql s-port e-proxy)
		 (list (parse-integer string :start s-port :end e-proxy :radix 10.))))))
	 (get-product (string start end &aux s-product e-product)
	   (declare (fixnum start))
	   (when (and (setq s-product (position #\( string :start (1+ start) :end end))
		      (setq e-product (position #\) string :start (1+ (the fixnum s-product)) :end end)))
	     (list (subseq string (1+ (the fixnum s-product)) e-product))))
	 (get-origin (string start &aux pos7 e-origin)
	   (cond ((and (setq pos7 (string-search "for " string 0 3 start len))
		       (setq s-origin (position-if-not #'white-space-char-p string :start (+ 4 (the fixnum pos7)) :end len))
		       (setq e-origin (1+ (the fixnum (position-if-not #'white-space-char-p string :start s-origin :end len :from-end t)))))
		  (subseq string s-origin e-origin))
		 (t nil))))
    (declare (inline get-port get-product get-origin))
    (cond
      ((and (setq pos1 (string-search "by " string 0 3 0 len))
	    (setq pos2 (string-search "http://" string 0 7 (+ 3 (the fixnum pos1)) len))
	    (setq s-proxy (+ 7 (the fixnum pos2)))
	    (setq e-proxy (position-if #'(lambda (ch)(member ch '(#\/ #\space) :test #'eql)) string :start s-proxy :end len)))
       (let ((port-delim (position #\: string :start s-proxy :end e-proxy)))
	 `(,(get-origin string (1+ e-proxy))
	   ,(subseq string s-proxy (or port-delim e-proxy))
	   ,.(get-port string port-delim e-proxy)
	   ,.(get-product string e-proxy (or s-origin len)))))
      (t (error "Bad syntax in the forwarded header: ~S." string)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.334")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun print-forwarded-header (value stream)
  (destructuring-bind (origin proxy &optional port proxy-product) value
    (write-string "by http://" stream)
    (write-string (host-domain-name proxy) stream)
    (when (and port (/= port 80))
      (write-char #\: stream)
      (write port :base 10 :escape nil :stream stream))
    (write-char #\/ stream)
    (when proxy-product
      (write-string " (" stream)
      (write-string proxy-product stream)
      (write-char #\) stream))
    (write-string " for " stream)
    (write-string (host-domain-name origin) stream)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.334")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

;; value:: (origin proxy &optional port proxy-product)
(define-header :forwarded
               (:header :response)
  :print-string "Forwarded"
  :parse-function 'parse-forwarded-header
  :print-function 'print-forwarded-header)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;UTILS.LISP.338")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defmethod valid-crlf-cache-file-p (pathname &aux source canonical c-probe)
  (cond ((and (setq source (probe-file pathname))
	      (setq canonical (crlf-pathname source))
	      (setq c-probe (probe-file canonical))
	      (< (file-modification-date source) (file-modification-date c-probe)))
	 (values t source c-probe))
	(t (values nil source c-probe canonical))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;PREFERENCES.LISP.33")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(eval-when (:load-toplevel :execute :compile-toplevel)

(defun %define-preference-type (keyword name display-string description &optional inferiors)
  (let ((preference-type (intern-preference-type keyword :if-does-not-exist :create)))
    (setf (preference-type-keyword preference-type) keyword
	  (preference-type-name preference-type) name
	  (preference-type-inferiors preference-type) (mapcar #'(lambda (x)
								  (intern-preference x :if-does-not-exist :create))
							      inferiors)
	  (preference-type-display-string preference-type) display-string
	  (preference-type-description preference-type) description)
      
    (%register-preference-type preference-type)))

(defmacro define-preference-type (keyword &key name display-string description inferiors)
  `(%define-preference-type ',keyword ',name ',display-string ',description ',inferiors)))

