;;; -*- Mode: LISP; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for CL-HTTP version 67.5
;;; Reason: DEFINE-CONDITION HTTP::REPORTABLE-CONDITION:  change accessor from method to http-method.
;;; DEFINE-CONDITION HTTP::METHOD-NOT-ALLOWED:  -
;;; DEFINE-CONDITION HTTP::UNSUPPORTED-METHOD:  -
;;; Function (CLOS:METHOD HTTP::REPORT-HTTP-HEADERS (HTTP::METHOD-NOT-ALLOWED T) :AROUND):  -
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS (HTTP::ACCESS-CONTROL-CONDITION T)):  -
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS (HTTP::DOCUMENT-MOVED T)):  -
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS (HTTP::RECOVERABLE-UNAUTHORIZED-CLIENT-ACCESS T)):  -
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS (HTTP::REPORTABLE-CONDITION T)):  -
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS (HTTP::SERVER-INTERNAL-ERROR T)):  -
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS (HTTP::SERVER-OVERLOADED T)):  -
;;; Function (CLOS:METHOD HTTP::REPORT-STATUS (HTTP::UNSUPPORTED-METHOD T)):  -
;;; Written by JCMa, 10/03/97 10:02:37
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-69-HTTP-67-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.0, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.4,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.0,
;;; Comlink Utilities 9.38, COMLINK Cryptography 1.0, Routing Taxonomy 8.2,
;;; COMLINK Database 10.85, Email Servers 11.18,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.12,
;;; Communications Linker Server 38.69,
;;; Experimental Lambda Information Retrieval System 12.14, HTTP Client 48.0,
;;; HTTP Client Substrate 1.2, Experimental Image Substrate 438.1, Jcma 41,
;;; Experimental Essential Image Substrate 431.0,
;;; W4 Constraint-Guide Web Walker 38.0, W4 Examples 10.0, HTTP Proxy Server 2.1,
;;; Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.0, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(define-condition reportable-condition
                  (http-condition)
  ((url :initform nil :initarg :url :reader http-url)
   (method :initform nil :initarg :method :reader http-method)
   (status-code :reader status-code)
   (reason :initform nil :initarg :reason :reader http-reason)
   (version :initform *http-version* :initarg :version :reader http-version)
   (headers :initform nil :initarg :headers :reader http-transaction-headers)
   (format-string :initform nil :initarg :format-string :reader format-string)
   (format-args :initform nil :initarg :format-args :reader format-args))
  (:report report-status-message))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(define-condition method-not-allowed
                  (access-control-condition)
  ((status-code :initform 405)
   (method :initform nil :initarg :method :reader http-method)
   (reason :initform "Method Not Allowed")))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(define-condition unsupported-method
                  (server-not-implemented)
  ((method :initarg :method :reader http-method)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-http-headers :around ((condition method-not-allowed) stream
                                        &optional (termination-line-p t) header-plist content-type)
  (let* ((url (http-url condition))
         (server *server*)
         ;; If the url is an uninterned search URL, we just default to the
         ;; standard methods on the server  8/7/96 -- JCMa.
         (more-headers `(:allow ,(http-methods (or (and url (intern-url url :if-does-not-exist :soft))
                                                   server)
                                               (server-http-version server))
                         ,@header-plist)))
    (declare (dynamic-extent more-headers))
    (case (http-method condition)
      (:put ;; close connection because the server will try to blast data at us. barf.
        (unless (client-http-version-meets-p server :http/1.1)
          (setf (server-close-connection-p server) t))))
    (call-next-method condition stream termination-line-p more-headers content-type)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-status ((condition access-control-condition) stream)
  (let* ((server *server*)
         (method (or (server-method server) (http-method condition))))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers condition stream t nil nil))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil))
                  (report-status-message condition stream)))
               (t (case (method condition)      ;close connection for 1.0 puts
                    (:put (setf (server-close-connection-p server) t)))
                  (report-status-line condition stream)
                  (report-http-headers condition stream t)
                  (report-status-message condition stream)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

;; body section can be sent with MIME multi-part message.
(defmethod report-status ((condition document-moved) stream)
  (let* ((target-window (http-target-window condition))
         (more-headers `(,.(loop for url in (ensure-list (new-urls condition))
                                 collect :location
                                 collect (url:name-string url))
                         ,.(when target-window
                             `(:window-target ,target-window))))
         (method (http-method condition)))
    (declare (dynamic-extent more-headers))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers condition stream t more-headers nil))
      (t (cond ((client-http-version-meets-p *server* :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil more-headers))
                  (report-status-message condition stream)))
               (t (case method ;; close connection for 1.0 PUT
                    (:put (setf (server-close-connection-p *server*) t)))
                  (report-status-line condition stream)
                  (report-http-headers condition stream t more-headers)
                  (report-status-message condition stream)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-status ((condition recoverable-unauthorized-client-access) stream)
  (let* ((more-headers (authentication-header-spec condition))
         (server *server*)
         (method (or (server-method server) (http-method condition))))
    (declare (dynamic-extent more-headers))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers condition stream t more-headers nil))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil more-headers))
                  (report-status-message condition stream)))
               (t (case (method condition)      ;close connection for 1.0 puts
                    (:put (setf (server-close-connection-p server) t)))
                  (report-status-line condition stream)
                  (report-http-headers condition stream t more-headers)
                  (report-status-message condition stream)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-status ((condition reportable-condition) stream)
  (let* ((server *server*)
         (method (or (server-method server) (http-method condition))))
    (case method
      (:head ;; head never sends a body
        (report-status-line condition stream)
       (report-http-headers condition stream t))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers condition stream nil))
                  (report-status-message condition stream)))
               (t (report-status-line condition stream)
                  (report-http-headers condition stream t)
                  (report-status-message condition stream)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-status ((condition server-internal-error) stream)
  (let* ((error (server-error condition))
         (error-report (and error (report-string error)))
         (server *server*)
         (method (or (server-method server) (http-method condition))))
    (case method
      (:head ;; head redirects never send a body
        (report-status-line condition stream)
       (report-http-headers error stream t))
      (t (cond ((client-http-version-meets-p server :http/1.1)
                (%with-chunked-transfer-encoding
                  (stream)
                  (progn (report-status-line condition stream)
                         (report-http-headers error stream nil))
                  (report-status-message condition stream error-report)))
               (t (report-status-line condition stream)
                  (report-http-headers error stream t)
                  (report-status-message condition stream error-report)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

;; This is quite inline so that it doesn't waste time when the server is on the edge.
(defmethod report-status ((condition server-overloaded) stream)
  (flet ((report-the-message (stream reason)
           (with-html-document (:declare-dtd-version-p t :stream stream)
             (with-document-preamble (:stream stream)
               (declare-title reason :stream stream))
             (with-standard-document-body (:stream stream)
               (with-section-heading (reason :stream stream)
                 (horizontal-line :stream stream)
                 (with-paragraph (:stream stream)
                   (etypecase *overload-message*
                     (null
                       (write-string "This server is currently operating at capacity and cannot accept your request. Please try again later."
                                     stream))
                     (string (write-string *overload-message* stream))
                     (function (funcall *overload-message* condition stream))
                     (symbol (funcall (fdefinition *overload-message*) condition stream))))
                 (horizontal-line :stream stream)
                 (cl-http-signature stream))))))
    (let* ((status-code (status-code condition))
           (reason (or (http-reason condition)
                       (get-string-for-status-code status-code)))
           (server *server*)
           (method (or (server-method server) (http-method condition))))
      (case method
        (:head ;; head redirects never send a body
          (send-status-line stream status-code reason)
         (report-http-headers condition stream t))
        (t (cond ((client-http-version-meets-p server :http/1.1)
                  (%with-chunked-transfer-encoding
                    (stream)
                    (progn (send-status-line stream status-code reason)
                           (report-http-headers condition stream nil))
                    (report-the-message stream reason)))
                 (t (case (method condition)    ;close connection for 1.0 puts
                      (:put (setf (server-close-connection-p server) t)))
                    (send-status-line stream status-code reason)
                    (report-http-headers condition stream t)
                    (report-the-message stream reason))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTTP-CONDITIONS.LISP.147")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod report-status ((condition unsupported-method) stream)
  (let* ((method (http-method condition))
         (url (http-url-string condition))
         (args (list method url)))
    (declare (dynamic-extent args))
    (cond ((client-http-version-meets-p *server* :http/1.1)
           (%with-chunked-transfer-encoding
             (stream)
             (progn (report-status-line condition stream)
                    (report-http-headers condition stream nil))
             (report-status-message condition stream "The ~A method is not supported: ~S" args)))
          (t (report-status-line condition stream)
             (report-http-headers condition stream t)
             (report-status-message condition stream "The ~A method is not supported: ~S" args)))))

