;;; -*- Mode: lisp; Syntax: ansi-common-lisp; Package: http; Base: 10; Patch-File: t -*-
;;; Patch file for CL-HTTP version 67.78
;;; Reason: Function URL::INTERN-URL-INFERIOR:  new operation supports CGI argument passing.
;;; Function (CLOS:METHOD URL::INTERN-URL-INFERIOR (URL:HTTP-URL SYMBOL T)):  default method.
;;; Function HTTP::LOCATE-CONTROLLING-URL:  finds inferiors from a controlling superior URL.
;;; Function (CLOS:METHOD HTTP::INHERIT-EXPORT-PARAMETERS (URL:COMPUTED-URL-MIXIN URL:COMPUTED-URL-MIXIN) PROGN):  -
;;; Function (CLOS:METHOD URL::INTERN-URL-INFERIOR (URL:HTTP-URL (EQL :COMPUTED) T)):  provide computed example with security.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :HEAD) SYMBOL)):  handle areas for HEAD method.
;;; Function (CLOS:METHOD HTTP::INVOKE-SERVER-METHOD (HTTP::BASIC-SERVER-MIXIN (EQL :GET) SYMBOL)):  -
;;; Variable HTTP::*URL-AREAS*:  new switch.
;;; Written by JCMa, 9/07/98 16:20:37
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-RL-183-J-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.77, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.34,
;;; Experimental Joshua 237.3, Ivory Revision 4A, IFEP 328,
;;; FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24),
;;; FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44), Boot ROM version 320,
;;; Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x802 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).

;;; Patch file for CL-HTTP version 67.78
;;; Written by JCMa, 9/11/98 22:41:07
;;; while running on FUJI-VLM from FUJI:/usr/opt/VLM100/lib/symbolics/Comlink-38-77-RL-183-J-B1-MIT-8-5.vlod
;;; with Open Genera 2.0, Genera 8.5, Logical Pathnames Translation Files NEWEST,
;;; Metering 444.0, Metering Substrate 444.0, Experimental Conversion Tools 436.0,
;;; Hacks 440.0, CLIM 72.0, Genera CLIM 72.0, PostScript CLIM 72.0,
;;; Experimental CLIM Documentation 72.0, 8-5-Patches 2.4, MAC 414.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.7, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Experimental Statice Runtime 465.2, Experimental Statice 465.0,
;;; Experimental Statice Browser 465.0, Experimental Statice Documentation 425.0,
;;; Experimental Joshua 237.3, Experimental Server Utilities 440.1,
;;; Experimental Mailer 437.4, Working LispM Mailer 7.0, HTTP Server 67.79,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.1,
;;; Comlink Utilities 9.41, COMLINK Cryptography 1.1, Routing Taxonomy 8.3,
;;; COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.36,
;;; Jcma 41, HTTP Proxy Server 3.0, HTTP Client Substrate 1.17,
;;; Experimental URN Resolver 13, W4 Constraint-Guide Web Walker 39.3,
;;; Ivory Revision 5, VLM Debugger 329, Genera program 8.11,
;;; DEC OSF/1 V4.0 (Rev. 110),
;;; 1280x994 8-bit PSEUDO-COLOR X Screen FUJI:0.0 with 224 Genera fonts (DECWINDOWS Digital Equipment Corporation Digital UNIX V4.0 R1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).


;;; Patch file for CL-HTTP version 67.78
;;; Written by JCma, 9/11/98 17:14:20
;;; while running on PUB3 from HOST3:/usr/users/install/og/eop-world-pub3-host3.vlod
;;; with Open Genera 2.0, Genera 8.5, Experimental IP-TCP Documentation 423.0,
;;; Experimental Lock Simple 437.0, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, CLIM 72.0, Genera CLIM 72.0,
;;; PostScript CLIM 72.0, Experimental CLIM Documentation 72.0,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.1, Experimental Statice Documentation 426.0,
;;; Experimental Joshua 237.3, Joshua Documentation 216.0,
;;; Experimental Image Substrate 440.0, Experimental Essential Image Substrate 433.0,
;;; Server Utilities 442.0, Mailer 438.0, Showable Procedures 36.3, Binary Tree 34.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.79, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.36,
;;; Comlink Documentation Utilities 4.1, White House Publication System 22.4,
;;; Experimental WH Automatic Categorization System 13.1, Ivory Revision 5,
;;; VLM Debugger 329, Genera program 8.11, DEC OSF/1 V4.0 (Rev. 52),
;;; 1280x974 24-bit TRUE-COLOR X Screen HOST3:0.0 with 224 Genera fonts (DECWINDOWS Digital Equipment Corporation Digital UNIX V4.0 R1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Local flavor function patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>local-flavor-function-patch-mark2),
;;; Get emb file host patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>get-emb-file-host-patch),
;;; Get mailer home location from namespace (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>mailer-environment-patch),
;;; Consider internet-domain-name when matching names to file hosts (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>pathname-host-namep-patch),
;;; Parse pathname patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>parse-pathname-patch),
;;; AutoEval (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>autoeval-code),
;;; Get internal event code patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>get-internal-event-code-patch),
;;; AutoLogin (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>auto-login),
;;; Generate an error any time there domain system tries to create a bogus host object for the local host. (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>detect-bogus-host),
;;; Set Mailer UID variables for current namespace. (from EOP:MAIL-SERVER;PATCHES;MAILER-UID.LISP.1),
;;; Provide Switch between EOP and MIT sources. (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>mit-source),
;;; Make FS:USER-HOMEDIR look in the namespace as one strategy. (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>user-homedir),
;;; Local uid patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>local-uid-patch),
;;; Statice log clear patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>statice-log-clear-patch),
;;; Make compiled-function-spec-p of CLOS class symbol return NIL instead of erring (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>compiled-function-spec-p-patch),
;;; Improve mailer host parsing (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>parse-mailer-host-patch),
;;; Make native domain name host patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>make-native-domain-name-host-patch),
;;; Domain query cname loop patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>domain-query-cname-loop-patch),
;;; Increase disk wired wait timeout from 30 to 90 seconds (from EOP:MAIL-SERVER;PATCHES;DISK-WAIT-90-PATCH.LISP.1),
;;; Checkpoint command patch (from DISTRIBUTION|DIS-W-HOST:>comlink>v-4>wh>config>mail-server>patches>checkpoint-command-patch),
;;; Gc report patch (from EOP:MAIL-SERVER;PATCHES;GC-REPORT-PATCH.LISP.1),
;;; Fix NFS brain damage. (from EOP:MAIL-SERVER;PATCHES;NFS-PATCH.LISP.8),
;;; Log patch (from EOP:MAIL-SERVER;PATCHES;LOG-PATCH.LISP.2),
;;; Pathname patch (from EOP:MAIL-SERVER;PATCHES;PATHNAME-PATCH.LISP.2),
;;; Pathname2 patch (from EOP:MAIL-SERVER;PATCHES;PATHNAME2-PATCH.LISP.3),
;;; Vlm namespace append patch (from EOP:MAIL-SERVER;PATCHES;VLM-NAMESPACE-APPEND-PATCH.LISP.1),
;;; Redirect to WWW.PUB.WHITEHOUSE.GOV (from EOP:PUB;HTTP;REDIRECT-TO-PRIMARY.LISP.10).


(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;URL.LISP.340"
  "HTTP:SERVER;URL.LISP.339"
  "HTTP:SERVER;VARIABLES.LISP.166"
  "HTTP:SERVER;SERVER.LISP.748"
  "HTTP:SERVER;SERVER.LISP.749"
  "HTTP:SERVER;SERVER.LISP.750")



;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.340")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(define-generic intern-url-inferior (superior-url export-type http-method url-string)
  (declare (values url newly-interned-p))
  (:documentation "Interns URL-STRING an inferior of SUPERIOR-URL according to EXPORT-TYPE."))

(export (intern "INTERN-URL-INFERIOR" :url) :url)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.339")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

;; Default method - most URLs don't support URL inferiors.
(defmethod intern-url-inferior (superior export-type http-method url-string)
  (declare (ignore superior export-type http-method url-string))
  nil)

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.340")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod intern-url-inferior :around ((superior http-minimum-object) export-type http-method url-string)
  (multiple-value-bind (url newly-interned-p)
      (call-next-method superior export-type http-method url-string)
    (when newly-interned-p
      (setf (translation-method url) (translation-method superior)))
    (values url newly-interned-p)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.340")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod intern-url-inferior :around ((superior http-path) export-type http-method url-string)
  (multiple-value-bind (url newly-interned-p)
      (call-next-method superior export-type http-method url-string)
    (when newly-interned-p
      (cond ((and (typep url 'http-object)
		  (or (http::directory-export-type-p export-type) (http::hierarchical-directory-export-type-p export-type)))
	     (let ((extension (extension url))
		   translation)
	       (when extension
		 (when (and (setq translation (http:export-type-for-pathname-type extension nil))
			    (http::directory-type-exports-pathname-export-type-p export-type translation))
		   (setf (translation-method url) translation)))))
	    (t (setf (translation-method url) (translation-method superior)))))
    (values url newly-interned-p)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.339")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod intern-url-inferior ((superior http-url) (export-type (eql :computed)) http-method url-string)
  (case http-method
    ((:head :get)				;always specialize to correct methods to avoid security and scope issues
     (multiple-value-bind (url newly-interned-p)
	 (intern-url url-string :if-does-not-exist :uninterned)
       (when newly-interned-p
	 (change-class url (type-of superior))
	 ;; inherit all relevant parameters from superior, including access control properties
	 (http::inherit-export-parameters url superior))
       url))
    (t nil)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.748")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

;(defmethod inherit-export-parameters progn ((url url:translation-method-mixin) (parent url:translation-method-mixin))
;  (setf (translation-method url) (translation-method parent)))

(scl:fundefine '(method inherit-export-parameters (translation-method-mixin translation-method-mixin) progn))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.748")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod inherit-export-parameters progn ((url url:computed-url-mixin) (parent url:computed-url-mixin))
  (setf (response-function url) (response-function parent)))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;VARIABLES.LISP.166")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10; Syntax: ANSI-Common-Lisp;-*-")

(define-parameter *url-areas* nil
		  "Controls whether URL areas are active or not.
When active, uninterned URL inferiors within the scope of an exported superior
compute using inherited parameters from the superior.")

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.748")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; SERVER METHODS
;;; 

(define locate-controlling-url (url-string method search-url-p)
  "Attempts to locate url-string as an inferior of the most specific superior URL in the path.
If an interned superior is found within one directory level and it is exported, this calls
URL:INTERN-URL-INFERIOR on the parent to obtain the interned inferior or NIL."
  (when (and (not search-url-p) *url-areas*)
    (multiple-value-bind (superior superior-export-type)
	(most-specific-exported-parent-url url-string -1)
      (when (and superior superior-export-type)
	(url::intern-url-inferior superior superior-export-type url-string method)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.748")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :head)) (http-version symbol))
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (prog ((search-url-p (url:valid-search-url-p url-string))
	     operator-type)
         retry1
            (handler-case
              ;; We use the search parent for the head method for efficiency
              ;; and in lieu of a regime for providing response functions that
              ;; compute the return of the head method for search inferiors.   8/14/96 -- JCMa.
              (multiple-value-bind (url)
		  (url:intern-url url-string :if-does-not-exist (if search-url-p *search-url-intern-mode* :soft))
		(tagbody
		  retry3
		     (cond
		       (url
			(tagbody
			  retry2
			     (cond ((setq operator-type (translation-method url))
				    (setf (server-url server) url) 
				    (with-access-control
				      (url method server (or (url:secure-subnets url) *secure-subnets*)
					   :deny-subnets *disallowed-subnets*)
				      (write-document-headers url operator-type stream)))
				   ((and *auto-export* (auto-export-pathname-url url-string))
				    (go retry2))
				   (t (error 'document-not-found :url url :method :head)))))
		       ((and (not search-url-p) *auto-export* (auto-export-pathname-url url-string))
			(go retry1))
		       ((setq url (locate-controlling-url url-string method search-url-p))
			(go retry3))
		       (t (error 'document-not-found :url url-string :method :head)))))
              (redirection (cond) (handle-redirect cond retry1)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.748")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :get)) (http-version symbol))
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (prog ((search-url-p (url:valid-search-url-p url-string))
             operator-type)
         retry1
            (handler-case
              (multiple-value-bind (url)
                  (url:intern-url url-string :if-does-not-exist (if search-url-p *search-url-intern-mode* :soft))
		(tagbody
		  retry3
		     (cond
		       (url
			(tagbody
			  retry2
			     (cond ((setq operator-type (translation-method url))
				    (setf (server-url server) url) 
				    (with-access-control (url method server (or (url:secure-subnets url) *secure-subnets*)
							      :deny-subnets *disallowed-subnets*)
				      (write-document url operator-type stream)))
				   ((and *auto-export* (auto-export-pathname-url url-string))
				    (go retry2))
				   (t (error 'document-not-found :url url :method :get)))))
		       ((and (not search-url-p) *auto-export* (auto-export-pathname-url url-string))
			(go retry1))
		       ((setq url (locate-controlling-url url-string method search-url-p))
			(go retry3))
		       (t (error 'document-not-found :url (or url url-string) :method :get)))))
              (redirection (cond) (handle-redirect cond retry1)))))))

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.749")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defmethod invoke-server-method ((server basic-server-mixin) (method (eql :post)) (http-version symbol) &aux translation-method)
  (macrolet ((handle-redirect (condition tag)
               `(destructuring-bind (target-url &rest other-urls) (new-urls ,condition)
                  (cond ;; optimize redirect by reinvoking for singleton local url.
                    ((and (null other-urls) (local-redirect-p target-url))
                     (setf (server-url-string server) (url:name-string target-url))
                     (go ,tag))
                    (t (report-status ,condition stream))))))
    (with-slots (stream url-string) server
      (tagbody
        retry1
           (handler-case
             (destructuring-bind (&optional doc-type doc-subtype &rest args) (get-header :content-type)
               (declare (ignore args))
               (cond
                 ((and doc-type doc-subtype)
                  (multiple-value-bind (url)
		      (url:intern-url url-string :if-does-not-exist :soft)
		    (tagbody
		      retry1
			 (cond ((and url (setq translation-method (translation-method url)))
				(setf (server-url server) url)
				(with-access-control (url method server (or (url:secure-subnets url) *secure-subnets*)
							  :deny-subnets *disallowed-subnets*)
				  (case translation-method
				    ((:redirect :temporary-redirect)	; redirect when there is forwarding.
				     (handle-url-standard-redirection
				       url (eql translation-method :temporary-redirect) :post))
				    (t (case http-version
					 ((:http/0.9 :http/1.0))
					 ;; alert HTTP 1.1 or greater clients that we are ready
					 (t (report-status-continue stream)
					    (send-cr-line-feed stream)
					    (force-output stream)
					    (setf (server-status server) 100.)))
				       ;; Upgrade this when reading chunked encodings is available. 7/24/96 -- JCMa.
				       (let ((transfer-encoding (get-header :transfer-encoding)))
					 (when transfer-encoding
					   (error 'server-not-implemented :close-connection t :url url :method :post
						  :format-string "The HTTP transfer encoding, ~A, is not implemented."
						  :format-args (list transfer-encoding)))
					 (post-document url doc-type doc-subtype stream))))))
			       ((setq url (locate-controlling-url url-string method (url:valid-search-url-p url-string)))
				(go retry1))
			       (t (error 'document-not-found :url url-string :method :post :close-connection t))))))
                 (t (error 'unsupported-method :method :post :url url-string :close-connection t))))
             (redirection (cond) (handle-redirect cond retry1)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;SERVER.LISP.750")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ANSI-Common-Lisp; Package: http; Base: 10 -*-")

(defun most-specific-exported-parent-url (string &optional (backoff-level 1) (end (length string)) &aux first-dir-delim)
  "Returns the most specific exported parent URL.
This is intended for static content types only, because the export type is computed from the pathname extension."
  (declare (values parent-url translation export-type directory-levels first-delim last-delim)
           (fixnum backoff-level))
  (flet ((get-export-type (string start end &aux period-pos)
           ;; there is no extension and we aren't going to grovel files to figure it out right now
           (when (setq period-pos (position #\. string :start start :end end :from-end t :test #'eql))
             (let ((extension (subseq string (1+ (the fixnum period-pos)) end)))
               (declare (dynamic-extent extension))
               (export-type-for-pathname-type extension nil)))))
    (declare (inline get-export-type))
    (when (setq first-dir-delim (position #\/ string :start 7 :end end :test #'eql))
      (loop with last-delim = (position #\/ string :start first-dir-delim :end end :from-end t :test #'eql)
            for directory-backoff fixnum downfrom backoff-level
            until (zerop directory-backoff)
            for delim = last-delim then (position #\/ string :start first-dir-delim :end delim :from-end t :test #'eql)
            while delim
            as url = (intern-url string :start 0 :end (1+ (the fixnum delim)) :if-does-not-exist :soft)
            when url
              do (let ((translation (translation-method url)))
                   (if translation
                       (return (values url translation (get-export-type string last-delim end)
                                       (- backoff-level directory-backoff) delim last-delim))
                       (return nil)))
            finally (return nil)))))
