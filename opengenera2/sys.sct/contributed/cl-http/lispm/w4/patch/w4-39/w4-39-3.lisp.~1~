;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for W4 version 39.3
;;; Reason: Function W4::HANDLE-UNIX-SUPERIOR-DIRECTORY-REFERENCE:  Upgrade handling of UNIX URL syntax.
;;; Function W4::MERGE-WALKER-URL:  handle unix directory hacks and improve efficiency, hygine.
;;; Written by JCMa, 8/11/98 17:26:37
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.71, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.34,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST, Jcma 41,
;;; HTTP Client Substrate 1.16, HTTP Proxy Server 2.11, HTTP Client 48.9,
;;; Experimental Image Substrate 438.1, Experimental Essential Image Substrate 431.0,
;;; W4 Constraint-Guide Web Walker 39.2, W4 Examples 11.0, Ivory Revision 4A,
;;; IFEP 328, FEP0:>I328-loaders.flod(24), FEP0:>I328-info.flod(24),
;;; FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25), FEP0:>I328-kernel.fep(44),
;;; Boot ROM version 320, Device PROM version 325, Genera application 5.6.1a1,
;;; MacIvory SCSI Manager Server 4.3.2a1, Toolbox Servers 4.2,
;;; MacIvory & RPC library 6.3.4a1, MacIvory life support 4.3.8a1,
;;; Symbolics keyboard 2.1.1a1, Macintosh System Software 8.1,
;;; 1152x820 Screen with Genera fonts, Machine serial number 30376,
;;; Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:W4;WALKER.LISP.42"
  "HTTP:W4;WALKER.LISP.43")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:W4;WALKER.LISP.42")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: w4; -*-")

;; Definition revised   8/11/98 -- Martin
(defun handle-unix-superior-directory-reference (url-string &optional (start 0) end)
  "Handles the /../ directory component in URLs.
This drops the immediately higher directory and returns a new url-string."
  (declare (values string new-string-p))
  (let ((str (subseq url-string start end)))
    (declare (dynamic-extent str))
    (macrolet ((elide-dots
		  (final-slash-p)
		 `(case dot-count
		    (1 (setf dots-found-p t)
		       (setf dot-count 0)
		       (when ,(if final-slash-p
				  `(and (>= slash-count 4) (decf slash-count 1))
				  `(>= slash-count 3))
			 (decf dst ,(if final-slash-p 2 1))))
		    (2 (setf dots-found-p t)
		       (setf dot-count 0)
		       (decf slash-count ,(if final-slash-p 2 1))
		       (when (< slash-count 3)
			 (return (values url-string nil)))
		       (loop with up-count = 0
			     for i from (1- dst) downto 0
			     as c = (char str i)
			     doing (when (eq c #\/) (incf up-count))
				   (when (eq up-count 2)
				     (setf dst ,(if final-slash-p `i `(1+ i)))
				     (return)))))))
      (loop with dots-found-p = nil and dst = 0 and dot-count = 0 and slash-count = 0 and slash-before-dot-p = nil
	    for idx from 0 below (length str)
	    for char = (char str idx)
	    doing (case char
		    (#\/ 
		     (incf slash-count)
                     (elide-dots t)
                     (setq slash-before-dot-p t))
		    (#\. (when slash-before-dot-p (incf dot-count)))
		    (t (setf dot-count 0)
                       (setq slash-before-dot-p nil)))
		  (setf (char str dst) char)
		  (incf dst)
		  #+ignore (print (list idx dst c slash-count dot-count (subseq str 0 dst)))
      	    finally (elide-dots nil)
		    (return (if dots-found-p (values (subseq str 0 dst) t) (values url-string nil)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:W4;WALKER.LISP.43")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: w4; -*-")

;; Fix the test cases below from draft-uri-syntax-03.text   8/11/98 -- Martin
;; Specifically
;;              * "." is handled now.
;;              * ".." is handled at the end of the url.
;;              * A change of authority component is handled.
;;              * It doesn't try to remove .. from things like http://a/b/c/g../z.
;;
(define merge-walker-url (url &optional (default *local-context*) (len-default (length default)))
  (declare (fixnum len-default))
  (check-type default string)
  (check-type url string)
  ;;catch improperly specified contexts
  (unless (char-equal #\/ (char default (1- len-default)))
    (setq default (concatenate 'string default "/")
	  len-default (1+ len-default)))
  (let* ((len (length url)))
    (declare (fixnum len))
    (with-fast-array-references ((url url string))
      (cond ;; no url provided
        ((zerop len)
	 (return-from merge-walker-url (values default default)))
        ;; default the pathname
        ((eql (aref url 0) #\/)  ; URL refers to root in default
	 (let* ((start-root (+ 2 (the fixnum (http::string-search= "//" default 0 2 0 len-default))))
		(new-authority-p (and (> len 1) (eql (aref url 1) #\/)))	; new authority?
		(end-default (if new-authority-p
				 start-root
				 (or (position-if #'forward-slash-p default :start start-root :end len-default) len-default)))
		(start-url (if new-authority-p 2 0))
		(abs-url-size (+ (the fixnum end-default) (- len (the fixnum start-url))))
                (abs-url (make-array abs-url-size :element-type http::*standard-character-type* :fill-pointer t)))
	   (nfill-array abs-url default :start1 0 :end1 end-default :start2 0 :end2 end-default)
	   (nfill-array abs-url url :start1 end-default :end1 abs-url-size :start2 start-url :end2 len)
	   (setf (fill-pointer abs-url) abs-url-size)
           (return-from merge-walker-url (values abs-url abs-url))))
        ((loop for idx fixnum upfrom 0 to (1- len)
               for char = (aref url idx)
               do (case char
		    ((#\/ #\?) (return nil))
		    (#\: ;; Found the scheme, ergo fully specified
		     (when (and (< 2 (- len idx)) (eql (aref url (1+ idx)) #\/) (eql (aref url (+ 2 idx)) #\/))
		       (unless (position-if #'forward-slash-p url :start (+ 3 idx) :end len)
			 (setf url (concatenate 'string url "/")))
		       (return-from merge-walker-url (values url url)))))
	       finally (return nil)))
        ;; url name
        (t (let* ((dir-end (1+ (position-if #'forward-slash-p default :start 0 :end len-default :from-end t)))
		  (abs-url-size (+ dir-end len))
		  (abs-url (make-array abs-url-size :element-type http::*standard-character-type* :fill-pointer t)))
	     (nfill-array abs-url default :start1 0 :end1 dir-end :start2 0 :end2 dir-end)
	     (nfill-array abs-url url :start1 dir-end :end1 abs-url-size :start2 0 :end2 len)
	     (setf (fill-pointer abs-url) abs-url-size)
             (return-from merge-walker-url
               (values (handle-unix-superior-directory-reference abs-url) abs-url))))))))

