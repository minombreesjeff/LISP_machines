;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for HTTP-CLIENT-SUBSTRATE version 1.5
;;; Reason: Make proxy handle POST and PUT methods reliably.
;;; 
;;; Function (CLOS:METHOD HTTP:INVOKE-HTTP-SERVICE (HTTP::BASIC-CLIENT-MIXIN T TT)):  
;;; When REQUEST-GENERATOR is provided, a force-output should be sent.
;;; 
;;; Function HTTP:WITH-HTTP-REQUEST:  Update documentation.
;;; Written by JCMa, 11/21/97 20:06:45
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>ComLink-38-69-HTTP-67-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0, Showable Procedures 36.3,
;;; Binary Tree 34.0, Working LispM Mailer 7.0, HTTP Server 67.17,
;;; W3 Presentation System 7.0, CL-HTTP Server Interface 52.0,
;;; Symbolics Common Lisp Compatibility 3.0, Comlink Packages 5.0,
;;; Comlink Utilities 9.39, COMLINK Cryptography 1.0, Routing Taxonomy 8.2,
;;; COMLINK Database 10.87, Email Servers 11.18,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.16,
;;; Communications Linker Server 38.70,
;;; Experimental Lambda Information Retrieval System 12.28,
;;; White House Publication System 10.97, Jcma 41,
;;; W4 Constraint-Guide Web Walker 38.0, HTTP Client Substrate 1.4,
;;; HTTP Proxy Server 2.3, Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.0, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48),
;;; Prevent reset of input buffer on tcp reset by HTTP servers. (from HTTP:LISPM;W4;RECEIVE-TCP-SEGMENT-PATCH.LISP.7).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:CLIENT;CLIENT.LISP.187")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.187")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(defmethod invoke-http-service ((client basic-client-mixin) method header-generator response-handler
                                &optional request-generator &aux (connection (ensure-client-connection client)) continue-error-p)
  (flet ((trace-request (url method version)
           (format *trace-output* "~&Host: ~A~%Request: ~A " (host-string url) method)
           (url:write-local-name url *trace-output*)
           (format *trace-output* " ~A" version)))
    (with-current-connection (connection)
      (let* ((url (client-url client))
             (request-version (connection-version connection))
             (request-headers (and header-generator (funcall header-generator
                                                             request-version)))
             (transmitted-headers (case request-version
                                    (:http/1.0   `(:connection (:keep-alive) . ,request-headers))
                                    (t request-headers)))
             (stream (connection-stream connection)))
        ;; remember transmitted headers
        (setf (client-method client) method
              (client-request-headers client) transmitted-headers)
        ;; send a request to the remote host
        (send-request stream method request-version :url url :headers-plist transmitted-headers :proxy-p (client-proxy client))
        ;; Trace the request
        (when *debug-client* (trace-request url method request-version))
        ;; send the request body when provided
        (when request-generator
          (case request-version
            ((:http/1.0 :http/0.9)  ;; 1.0 remote server, just send the data.
             (funcall request-generator client stream request-version))
            (t (with-client-line-buffer ()
                 (let ((reply (read-reply-line stream *client-line-buffer*)))
                   (multiple-value-bind (status response-reason)
                       (parse-reply reply)
                     (setf (client-status client) status
                           (client-reason client) response-reason)
                     (read-delimited-line stream '(#\Linefeed #\Return) nil *client-line-buffer*) ;; no headers
                     (case status
                       (100 (funcall request-generator client stream request-version))
                       (t (setq continue-error-p t))))))))
	  (force-output stream))
        ;; handle the server response.
        (cond (continue-error-p   ;; failed at continue checkpoint
               (funcall response-handler client stream request-version))
              (t (with-client-line-buffer ()
                   (let ((reply (read-reply-line stream)))
                     (multiple-value-bind (status response-reason server-version)
                         (parse-reply reply)
                       (setf (client-status client) status
                             (client-reason client) response-reason)
                       (with-headers-for-client (stream server-version)
                         (setf (client-response-headers client) *headers*)
                         ;; the values returned by the handler must be the values of the form.
                         (funcall response-handler client stream server-version))))))))))) 


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.187")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

;; formerly with-remote-resource
(define-macro with-http-request ((url-or-client method &key request-headers request-body) &body response-body)
  "Invokes HTTP service for URL-OR-CLIENT using METHOD.
REQUEST-HEADERS is a s-expression that returns the request headers.  It can
access the lexical variable: (HTTP-VERSION).  
RESPONSE-BODY is the response-handler for the request.  It can access the
lexical variables: (CLIENT REMOTE-STREAM HTTP-VERSION).
REQUEST-BODY is an advanced option that accepts a s-expression to transmit a
request body. It can access the lexical variables: (CLIENT REMOTE-STREAM
HTTP-VERSION). Output is automatically forced on REMOTE-STREAM."
  `(flet ((response-handler (client remote-stream http-version)
            client http-version remote-stream   ; possibly ignore
            ,@response-body)
	  ,@(when request-headers
              `((request-header-generator (http-version)
                                          http-version  ; possibly ignore
                                          ,request-headers)))
          ,@(when request-body
              `((request-handler (client remote-stream http-version)
                                 client http-version    ; possibly ignore
                                 ,request-body))))
     (declare (dynamic-extent #'response-handler
			      ,@(when request-headers `(#'request-header-generator))))
     (invoke-http-service ,url-or-client ,method
                          ,(when request-headers `(function request-header-generator))
                          #'response-handler
                          ,(when request-body `(function request-handler)))))

