;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for HTTP-CLIENT-SUBSTRATE version 1.9
;;; Reason: Variable HTTP::*TRACE-CLIENT*:  new.
;;; Function HTTP::TRACE-CLIENT:  -
;;; Function HTTP::CLIENT-TRACE:  new.
;;; Function HTTP::PARSE-REPLY:  -
;;; Function (CLOS:METHOD HTTP::DEINITIALIZE-RESOURCED-CLIENT (T HTTP::BASIC-CLIENT-MIXIN)):  -
;;; Function (CLOS:METHOD HTTP::INITIALIZE-RESOURCED-CLIENT (T HTTP::BASIC-CLIENT-MIXIN T T)):  -
;;; Function (CLOS:METHOD HTTP:INVOKE-HTTP-SERVICE (HTTP::BASIC-CLIENT-MIXIN T T T)):  -
;;; Function HTTP::%DEALLOCATE-CLIENT-HTTP-STREAM:  -
;;; Function HTTP::ALLOCATE-CONNECTION:  -
;;; Function (CLOS:METHOD HTTP::DEALLOCATE-CONNECTION (HTTP::BASIC-CONNECTION)):  -
;;; Written by JCMa, 5/22/98 20:52:57
;;; while running on FUJI-VLM from FUJI:/usr/opt/VLM100/lib/symbolics/og2-who-calls.vlod
;;; with Open Genera 2.0, Genera 8.5, Logical Pathnames Translation Files NEWEST,
;;; HTTP Server 67.51, Showable Procedures 36.3, Binary Tree 34.0,
;;; W3 Presentation System 7.0, HTTP Proxy Server 2.9, HTTP Client Substrate 1.8,
;;; Ivory Revision 5, VLM Debugger 329, Genera program 8.1,
;;; DEC OSF/1 V4.0 (Rev. 110),
;;; 1280x976 8-bit PSEUDO-COLOR X Screen FUJI:0.0 with 224 Genera fonts (DECWINDOWS Digital Equipment Corporation Digital UNIX V4.0 R1),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:CLIENT;VARIABLES.LISP.12"
  "HTTP:CLIENT;CLIENT.LISP.191"
  "HTTP:CLIENT;CONNECTION.LISP.46")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;VARIABLES.LISP.12")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(define-variable *trace-client* nil
                 "Controls whether tracing information is displayed.")

;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.191")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(define trace-client (&optional (on-p (not *trace-client*)))
  "Toggles client tracing according to ON-P."
  (setq *trace-client* (not (null on-p))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.191")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(defmacro client-trace (format-string &rest format-args)
  `(when *trace-client*
     (format *trace-output* ,format-string ,@format-args)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.191")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(defun parse-reply (reply-line &aux (len (length reply-line)) pos1 pos2 pos3 pos4)
  (declare (values status-code reason-string version-matched))
  (flet ((space-p (char)
           (char= char #\space)))
    (cond
      ((and (setq pos1 (position #\space reply-line :start 0 :end len :test #'char=))
            (setq pos2 (position-if-not #'space-p reply-line :start pos1 :end len))
            (setq pos3 (position #\space reply-line :start pos2 :end len :test #'char= ))
            (setq pos4 (position-if-not #'space-p reply-line :start pos3 :end len)))
       (let ((status-code (parse-integer reply-line :start pos2 :end pos3 :junk-allowed t))
             (reason-string (subseq reply-line pos4 len))
             (version-matched (if (string-equal *http-version* reply-line
                                                :start1 0 :end1 *http-version-length*
                                                :start2 0 :end2 pos1)
                                  *http-version*
                                  (subseq reply-line 0 pos1))))
	 (client-trace "~&Response: ~S~&~%" reply-line)
	 #|(client-trace"~&Code: ~D~&Reason: ~S~&Version: ~S~&~%"
                   status-code reason-string version-matched)|#
         (values status-code reason-string (intern version-matched *keyword-package*))))
      (t (error 'bad-server-response :response reply-line
                :format-string "Ill-formed reply from HTTP server, ~S." :format-args (list reply-line)))))) 


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.191")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(defmethod deinitialize-resourced-client (resource (client basic-client-mixin)
                                                   &aux (connection (client-connection client)))
  (declare (ignore resource)) 
  ;; critically important to return the connection for a number of platforms.
  (when connection
    (return-connection connection))
  ;; reinitialize instance variables
  (setf (client-connection client) nil
        (client-method client) nil
        (client-url client) nil)
  (client-trace "~&Deallocate Client: ~S" client)
  client)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.191")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(defmethod initialize-resourced-client (resource (client basic-client-mixin) url proxy)
  (declare (ignore resource)) 
  ;; Initialize the URL first
  (setf (client-url client) url)
  ;; Initialize proxy host and port
  (if proxy
      (setf  (client-proxy client) proxy)
      (client-choose-proxy client))
  (client-trace "~&Allocate Client: ~S" client)
  client)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CLIENT.LISP.191")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

(defmethod invoke-http-service ((client basic-client-mixin) method header-generator response-handler
                                &optional request-entity-generator &aux (connection (ensure-client-connection client)) request-rejected-p)
  (flet ((trace-request (url method version &aux (trace-stream *trace-output*))
           (format trace-stream "~&Host: ~A~%Request: ~A " (host-string url) method)
           (url:write-local-name url trace-stream)
           (format trace-stream " ~A" version)))
    (with-current-connection (connection)
      (let* ((url (client-url client))
             (request-version (connection-version connection))
             (request-headers (and header-generator (funcall header-generator
                                                             request-version)))
             (transmitted-headers (case request-version
				    (:http/0.9 request-headers)
                                    (:http/1.0 `(:connection (:keep-alive) . ,request-headers))
                                    (t (transfer-encoding-request-headers method request-headers))))
             (stream (connection-stream connection)))
	(declare (dynamic-extent transmitted-headers))
        ;; remember transmitted headers
        (setf (client-method client) method
              (client-request-headers client) transmitted-headers)
        ;; send a request to the remote host
        (send-request stream method request-version :url url :headers-plist transmitted-headers :proxy-p (client-proxy client))
        ;; Trace the request
        (when *trace-client* (trace-request url method request-version))
        ;; send the request body when provided
        (when request-entity-generator
          (case request-version
            ((:http/1.0 :http/0.9)  ;; 1.0 remote server, just send the data.
             (funcall request-entity-generator client stream request-version)
	     (force-output stream))
            (t (with-client-line-buffer ()
                 (let ((reply (read-reply-line stream *client-line-buffer*)))
                   (multiple-value-bind (status response-reason)
                       (parse-reply reply)
                     (setf (client-status client) status
                           (client-reason client) response-reason)
                     (read-delimited-line stream '(#\Linefeed #\Return) nil *client-line-buffer*) ;; no headers
                     (case status
                       (100
			 (funcall request-entity-generator client stream request-version)
			 (force-output stream))
                       (t (setq request-rejected-p t)))))))))
        ;; handle the server response.
        (cond (request-rejected-p   ;; failed at continue checkpoint
               (funcall response-handler client stream request-version))
              (t (with-client-line-buffer ()
                   (let ((reply (read-reply-line stream)))
                     (multiple-value-bind (status response-reason server-version)
                         (parse-reply reply)
                       (setf (client-status client) status
                             (client-reason client) response-reason)
                       (with-headers-for-client (stream server-version)
                         (setf (client-response-headers client) *headers*)
                         ;; the values returned by the handler must be the values of the form.
                         (funcall response-handler client stream server-version))))))))))) 


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CONNECTION.LISP.46")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defun %deallocate-client-http-stream (stream &optional (abort-p t))
  (close stream :abort abort-p)
  (prog1 (deallocate-client-http-stream stream)
         (atomic-incf *connections-deallocated*)
	 (client-trace "~&Deallocate Stream (~D): ~S" *connections-deallocated* stream)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CONNECTION.LISP.46")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(define allocate-connection (host port &optional domain-name)
  "Allocates a new connection to HOST on PORT with DOMAIN-NAME."
  (declare (values connection stream new-connection-p))
  (let* ((stream (open-http-stream-to-host host port))
         (conn (allocate-resource 'http-connection host port stream domain-name)))
    (setf (%connection-state conn) :open
	  (connection-close-p conn) nil
	  (connection-timeout conn) *client-persistent-connection-timeout*
	  (connection-requests-allowed conn) *client-persistent-connection-number*)
    (atomic-incf *connections-allocated*)
    (client-trace "~&Allocate Connection (~D): ~S" *connections-allocated* conn)
    (values conn stream t)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;CONNECTION.LISP.46")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Syntax: ansi-common-lisp; Package: http; Base: 10; Default-character-style: (:fix :roman :normal) -*-")

(defmethod deallocate-connection ((connection basic-connection))
  (with-slots (stream state host port close-p domain-name version) connection
    (client-trace "~&Deallocate: ~S" connection)
    ;; make sure that open streams are deallocated
    (ecase state
      ((:open :closed)
       (setq state :deallocated)
       (when stream
         (%deallocate-client-http-stream stream)
         (setq stream nil))
       ;; reset instance variables for GC and fast allocation.
       (setq host nil
             port 80
             close-p nil
             domain-name nil
             version nil))
      (:deallocated))
    (when stream (error "Stream not Dellocated"))
    (deallocate-resource 'http-connection connection)
    connection))

