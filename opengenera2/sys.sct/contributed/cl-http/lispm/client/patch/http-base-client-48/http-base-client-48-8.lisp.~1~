;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for HTTP-BASE-CLIENT version 48.8
;;; Reason: Function HTTP::WITH-STATUS-CODE-DISPATCH:  handle 303 redirection.
;;; Function HTTP::%SHOW-URL:  update.
;;; Function HTTP::%SHOW-URL-HEADERS:  update.
;;; Function HTTP::%SHOW-URL-OPTIONS:  update.
;;; Function HTTP::%SHOW-URL-TRACE:  update.
;;; Written by JCMa, 7/31/98 17:09:40
;;; while running on Lispm Machine Thomas Jefferson from FEP0:>COMLINK-38-76-KBCW-1-A-MIT-8-5.ilod.1
;;; with Genera 8.5, Experimental IP-TCP Documentation 422.0, NFS Server 439.0,
;;; Mailer 438.0, Print Spooler 439.0, Domain Name Server 436.0,
;;; Experimental Lock Simple 435.1, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Conversion Tools 436.0,
;;; Metering 444.0, Metering Substrate 444.0, Hacks 440.0, CLIM 72.0,
;;; Genera CLIM 72.0, PostScript CLIM 72.0, Experimental CLIM Documentation 71.27,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, 8-5-Patches 1.1, MAC 413.0,
;;; Relatus Natural Language Environment 183, RELATUS Utilities 29.2,
;;; Experimental Gnoscere Representation System 13.7,
;;; Dynamic Window Hardcopy Extensions 4.1, Background Bug Reporting 12.0,
;;; Experimental Relatus Parser Semantic Perception 27.1, Showable Procedures 36.3,
;;; Binary Tree 34.0, Experimental Reference System 32.2,
;;; Experimental Semantic Inversion 19.2, Experimental Lexical Classifier 3.0,
;;; Experimental Gnoscere Activity System 6.2, Flavor Resource 1.0,
;;; Relatus Parser 5.6, Experimental Relatus Generator 6.2,
;;; Lisp System Extensions 72.2, Object Resource 36.0, Agent Utilities 45.0,
;;; Working LispM Mailer 7.0, HTTP Server 67.67, W3 Presentation System 7.0,
;;; CL-HTTP Server Interface 52.0, Symbolics Common Lisp Compatibility 3.0,
;;; Comlink Packages 5.1, Comlink Utilities 9.41, COMLINK Cryptography 1.1,
;;; Routing Taxonomy 8.3, COMLINK Database 10.111, Email Servers 11.21,
;;; Comlink Customized LispM Mailer 6.14, Dynamic Forms 12.18,
;;; Communications Linker Server 38.77, Lambda Information Retrieval System 18.32,
;;; Experimental Joshua 237.3, Experimental Start3 NEWEST, Jcma 41,
;;; Experimental URN Resolver 7, HTTP Client 48.7, HTTP Client Substrate 1.16,
;;; Experimental Image Substrate 438.1, Experimental Essential Image Substrate 431.0,
;;; Ivory Revision 4A, IFEP 328, FEP0:>I328-loaders.flod(24),
;;; FEP0:>I328-info.flod(24), FEP0:>I328-debug.flod(24), FEP0:>I328-lisp.flod(25),
;;; FEP0:>I328-kernel.fep(44), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.6.1a1, MacIvory SCSI Manager Server 4.3.2a1,
;;; Toolbox Servers 4.2, MacIvory & RPC library 6.3.4a1,
;;; MacIvory life support 4.3.8a1, Symbolics keyboard 2.1.1a1,
;;; Macintosh System Software 8.1, 1152x820 Screen with Genera fonts,
;;; Machine serial number 30376, Macintosh Quadra 800, Symbolics Keyboard,
;;; Add support for Apple's Gestalt and Speech Managers. (from SYS:MAC;MACIVORY-SPEECH-SUPPORT.LISP.1),
;;; Domain Fixes (from CML:MAILER;DOMAIN-FIXES.LISP.33),
;;; Don't force in the mail-x host (from CML:MAILER;MAILBOX-FORMAT.LISP.23),
;;; Make Mailer More Robust (from CML:MAILER;MAILER-FIXES.LISP.15),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.10),
;;; Add CLIM presentation and text style format directives. (from FV:SCLC;FORMAT.LISP.20),
;;; Deny some hosts access to some servers. (from CML:LISPM;HOST-SERVICE-ACCESS-CONTROL.LISP.4),
;;; Fix Statice Lossage (from CML:LISPM;STATICE-PATCH.LISP.3),
;;; COMLINK Mailer Patches. (from CML:LISPM;MAILER-PATCH.LISP.102),
;;; Clim patches (from CML:DYNAMIC-FORMS;CLIM-PATCHES.LISP.48).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:CLIENT;SEXP-BROWSER.LISP.50")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;SEXP-BROWSER.LISP.50")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

;;;------------------------------------------------------------------- 
;;;
;;; UTILITIES
;;;

(define-macro with-status-code-dispatch ((&key (client '*client*)
					       (headers '*headers*)
					       (status '(client-status client))
					       (url '(client-url client))
					       (success-status-codes '(200))
					       exceptions-flush-entities)
					 &body body)
  `(let ((client ,client)
	 (status ,status)
	 (headers ,headers))
     (flet ((do-it () ,@body))
       (declare (dynamic-extent #'do-it))
       (case status
	 (,success-status-codes
	  (do-it))
	 ((301 302 303)
	  ,@(when exceptions-flush-entities
	      `((flush-input-entity (client-stream client) headers (client-connection-version client))))
	  (signal (ecase status
		    (301 'document-moved-permanently)
		    (302 'document-moved-temporarily)
		    (303 'document-forwarded))
		  :new-urls (mapcar #'url:intern-url
				    (ensure-list (or (get-header :location headers)
						     (get-header :content-location headers))))
		  :version (client-connection-version client)))
	 (401
	   (destructuring-bind (&optional authentication-method . realm)
	       (get-header :WWW-Authenticate headers)
	     (case authentication-method
	       ((:basic :digest)
		,@(when exceptions-flush-entities
		    `((flush-input-entity (client-stream client) headers (client-connection-version client))))
		(error 'recoverable-unauthorized-client-access
		       :url ,url
		       :method (client-method client)
		       :authentication-method authentication-method
		       :authentication-realm realm))
	       (t (client-signal-http-code ,url status (client-method client) 
					   :headers headers 
					   :reason (client-reason client)
					   :version (client-connection-version client))))))
	 (t (client-signal-http-code ,url status (client-method client) 
				     :headers headers 
				     :reason (client-reason client)
				     :version (client-connection-version client)))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;SEXP-BROWSER.LISP.50")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

;;;------------------------------------------------------------------- 
;;;
;;;  STANDARD GET METHOD
;;; 

(defun %show-url (url headers stream &key raw-output-p start end)
  (let ((range (when (and start end)
		 `(,start ,end))))
    (declare (dynamic-extent range))
    (handler-case
      (handling-redirects (url)
	(handling-authentication (authorization)
	  (with-http-request
	    (url :get 
		 :request-headers (compute-standard-request-headers
				    url :authorization authorization :range range :header-plist headers))
	    (with-status-code-dispatch (:client client :url url :status (client-status client)
						:success-status-codes (200 203 205 206)
						:exceptions-flush-entities t) 
	      (with-transfer-decoding* (remote-stream url http-version :headers *headers*)
		(cond (raw-output-p
		       (fresh-line stream)
		       (print-headers stream *headers*)
		       (terpri stream)
		       (stream-decode-crlf-until-eof remote-stream stream))
		      (t (destructuring-bind (major-type minor-type &key &allow-other-keys)
			     (get-header :content-type *headers*)
			   (display url major-type minor-type remote-stream stream)))))))))
      (http-condition (cond) (www-utils:report-condition cond stream)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;SEXP-BROWSER.LISP.50")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

;;;------------------------------------------------------------------- 
;;;
;;; STANDARD HEAD METHOD
;;;

(defun %show-url-headers (url headers stream)
  (handler-case
    (handling-redirects (url)
      (handling-authentication (authorization)
	(with-http-request
	  (url :head 
	       :request-headers (compute-standard-request-headers url :authorization authorization :header-plist headers))
	  remote-stream				;ignore 
	  (with-status-code-dispatch (:client client :url url :status (client-status client) :exceptions-flush-entities nil)
	    (fresh-line stream)
	    (print-headers stream *headers*)
	    (terpri stream)))))
    (http-condition (cond) (www-utils:report-condition cond stream))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;SEXP-BROWSER.LISP.50")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

;;;------------------------------------------------------------------- 
;;;
;;; OPTIONS METHOD
;;;

(defun %show-url-options (url headers stream)
  (handler-case
    (handling-redirects (url)
      (handling-authentication (authorization)
	(with-http-request
	  (url :options 
	       :request-headers (compute-standard-request-headers
				  url :authorization authorization :header-plist headers))
	  remote-stream				;ignore
	  (with-status-code-dispatch (:client client :url url :status (client-status client) :exceptions-flush-entities t)
	    (fresh-line stream)
	    (print-headers stream *headers*)
	    (terpri stream)))))
    (http-condition (cond) (www-utils:report-condition cond stream))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:CLIENT;SEXP-BROWSER.LISP.50")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-Common-Lisp; Base: 10; Mode: lisp; Package: http -*-")

;;;------------------------------------------------------------------- 
;;;
;;; TRACE METHOD
;;;

(defun %show-url-trace (url headers stream &key (max-forwards 5.))
  (handler-case
    (handling-redirects (url)
      (handling-authentication (authorization)
	(with-http-request
	  (url :trace
	       :request-headers (compute-standard-request-headers
				  url :authorization authorization 
				  :header-plist `(,@(when max-forwards `(:max-forwards ,max-forwards)) ,@headers)))
	  (with-status-code-dispatch (:client client :url url :status (client-status client) :exceptions-flush-entities t)
	    (fresh-line stream)
	    (print-headers stream *headers*)
	    (terpri stream)
	    (with-transfer-decoding* (remote-stream url http-version :headers *headers*)
	      (stream-decode-crlf-until-eof remote-stream stream))))))
    (http-condition (cond) (www-utils:report-condition cond stream))))

