// (C) Copyright 1997, Christopher R. Vincent.  
// All Rights Reserved.
// cvince@mit.edu
// http://mit.edu/cvince/

// to do:
// handle more than absolute urls?
// expand two uses of the same dir separately?

import java.applet.Applet;
import java.awt.*;
import java.util.*;
import java.net.URL;
import java.net.MalformedURLException;

public class hdir extends java.applet.Applet implements Runnable {
  Thread engine = null;
  item[] items;
  dir[] dirs;
  node[] top;
  int fontSize = 10;
  Color fontColor = Color.black;
  Color markerColor = Color.black;
  Font nameFont;                    // display font
  int ySpace = 15;                  // space between entries
  int xSpace = 15;                  // indentation space
  Vector display = new Vector();    // nodes currently displayed
  boolean full_repaint = true;
  boolean debug = false;
  int hdirMode = 0;                 // 0 for normal, 
                                    // -1 for unrecoverable error
  
public String getAppletInfo() {
  return "(C) Copyright 1997, Christopher R. Vincent. All Rights Reserved.";
}

public void reportError(String s) {
  hdirMode = -1;
  full_repaint = true;
  System.out.println(s);
}

public void reportError(Exception e, String s) {
  hdirMode = -1;
  full_repaint = true;
  System.out.println(s);
  e.printStackTrace();
}

public String[] parseCommaList(String s) throws Exception {
  // Parse a comma-separated list of strings.  Leading and
  // trailing whitespace ignored in each item.
  Vector resultVec = new Vector();
  int start;
  int end = -1;
  while (end < s.length()) {
    start = end+1;
    end = s.indexOf(",",start);
    if (end == -1)
      end = s.length();
    resultVec.addElement(s.substring(start,end).trim());
  }
  String[] res = new String[resultVec.size()];
  resultVec.copyInto(res);
  return res;
}

public Color parseHexColor(String s) {
  // Parse a color in the form of #rrggbb.
  return new Color(Integer.parseInt(s.substring(1), 16));  
}

public void parseItms() {
  String s = null;
  int i = 0;
  String[] els = null;
  URL u = null;
  Vector nodeVec = new Vector(); 
  try {
    while (true) {
      s = getParameter("itm"+i);
      if (s == null) break;
      els = parseCommaList(s);
      if (els.length != 3)
	reportError("Wrong number of elements in itm"+i+": "+s);
      if (els[1].length() != 0) {
	try { u = new URL(els[1]); }
	catch(MalformedURLException e) {
	  reportError(e,"Malformed URL in itm"+i+": "+s); }
	if (els[2].length() == 0)
	  els[2] = "_self";
      }
      nodeVec.addElement(new item(els[0],u,els[2]));
      if (debug) System.out.println("itm"+i);
      i++;
    }
  }
  catch(Exception e) {
    reportError(e,"Unable to parse itm"+i+": "+s); }
  items = new item[nodeVec.size()];
  nodeVec.copyInto(items); 
}

public void parseDirs() {
  int params = 4;
  String s = null;
  int i = 0;
  int j = 0;
  int idx = 0;
  String[] els = null;
  URL u = null;
  node[] nodes = null;
  Vector nodeVec = new Vector(); 
  try {
    while (true) {
      s = getParameter("dir"+i);
      if (s == null) break;
      els = parseCommaList(s);
      if (els.length < params)
	reportError("Too few elements in dir"+i+": "+s);
      if (els[1].length() != 0) {
	try { u = new URL(els[1]); }
	catch(MalformedURLException e) {
	  reportError(e,"Malformed URL in dir"+i+": "+s); }
      }
      if (els[2].length() == 0)
	els[2] = "_self";
      boolean open = els[3].equals("yes");
      nodes = new node[els.length-params];
      for(j = params; j < els.length; j++) {
	idx = Integer.valueOf(els[j].substring(3)).intValue();
	if (els[j].substring(0,3).equals("itm"))
	  nodes[j-params] = items[idx];
	else
	  nodes[j-params] = (node)nodeVec.elementAt(idx);
      }
      nodeVec.addElement(new dir(els[0],u,els[2],nodes,open)); 
      if (debug) System.out.println("dir"+i); 
      i++;
    }
  }
  catch(Exception e) {
    reportError(e,"Unable to parse dir"+i+": "+s); }
  dirs = new dir[nodeVec.size()];
  nodeVec.copyInto(dirs); 
}

public void parseTop() {
  String s = getParameter("top");
  try {
    if (s == null)
      reportError("No top parameter supplied.");
    String[] els = parseCommaList(s);
    if (els.length == 0)
      reportError("No top nodes defined.");
    int idx;
    top = new node[els.length];
    for(int i = 0; i < els.length; i++) {
      idx = Integer.valueOf(els[i].substring(3)).intValue();
      if (s.substring(0,3).equals("itm"))
	top[i] = items[idx];
      else
	top[i] = dirs[idx];
    } 
    if (debug) System.out.println("top"); 
  }
  catch(Exception e) {
    reportError(e,"Unable to parse top: "+s); }
}

public void init() {
  try {
    String s;   
    s = getParameter("debug");
    if (s != null)
      debug = s.equals("yes");
    parseItms();
    parseDirs();
    parseTop();
    int i = 0;
    // set up display
    s = getParameter("bgcolor");
    if (s != null)
      setBackground(parseHexColor(s));
    s = getParameter("fontcolor");
    if (s != null)
      fontColor = parseHexColor(s);
    s = getParameter("markercolor");
    if (s != null)
      markerColor = parseHexColor(s);
    s = getParameter("xspace");
    if (s != null)
      xSpace = Integer.valueOf(s).intValue();
    s = getParameter("yspace");
    if (s != null)
      ySpace = Integer.valueOf(s).intValue();
    s = getParameter("fontsize");
    if (s != null)
      fontSize = Integer.valueOf(s).intValue();
    nameFont = new Font("Dialog", Font.PLAIN, fontSize);
  }  
  catch (Exception e) {
    reportError(e,"Initialization error."); }
}

public void registerNode(node n, int x, int y) {
  display.addElement(new nodeReg(n,x,y));
}

public void showDocument(URL u, String f) {
  if (debug) System.out.println(u.toExternalForm()+" -> "+f);
  getAppletContext().showDocument(u,f);
}

public void paint(Graphics g) {
  if (hdirMode == -1) {
    setBackground(Color.black);
    g.setColor(Color.red);
    g.drawString("fatal error",10,20);
    full_repaint = false;
    return;
  }
  g.setFont(nameFont);
  display.removeAllElements();
  int ypos = 0;
  for (int i = 0; i < top.length; i++) {
    ypos = top[i].paintNode(this,g,20,ypos+ySpace,xSpace,ySpace);
  }
  full_repaint = false;
}

public boolean mouseMove(java.awt.Event evt, int x, int y) {
  if (hdirMode == -1)
    return true;
  int line = (y - (ySpace/2)) / ySpace;
  if (line > display.size()-1) {
    showStatus(null);
    return true; }
  nodeReg reg = (nodeReg)display.elementAt(line);
  if (x < reg.x)
    reg.node.leftStatus(this);
  else 
    reg.node.rightStatus(this);
  return true;
}  

public boolean mouseDown(java.awt.Event evt, int x, int y) {
  if (hdirMode == -1)
    return true;
  int line = (y - (ySpace/2)) / ySpace;
  if (line > display.size()-1) return true;
  nodeReg reg = (nodeReg)display.elementAt(line);
  if (x < reg.x)
    reg.node.leftAction(this);
  else 
    reg.node.rightAction(this);
  full_repaint = true;
  return true;
}
  
public void start() {
  if (engine == null) {
    engine = new Thread(this);
    engine.start(); }
}
  
public void stop() {
  if (engine != null && engine.isAlive()) {
    engine.stop(); }
  engine = null;
}
  
public void run() {
  Thread me = Thread.currentThread();
  while (engine == me) {
    try {Thread.currentThread().sleep(100);} 
    catch (InterruptedException e){}
    if (full_repaint)
      repaint();
  }
}
  
}


class nodeReg {
public node node;
public int x;
public int y;

  nodeReg(node n, int x1, int y1) {
    node = n;
    x = x1;
    y = y1;
  }

}


class node {
public String name;
public URL url;
public String frame;

public int paintNode(hdir hd, Graphics g, int x, int y, int xdiff, int ydiff) {
  // Returns y coord of last node drawn.
  return y;
}

public void leftAction(hdir hd) {}

public void rightAction(hdir hd) {
  if (url != null)
    hd.showDocument(url,frame);
}

public void leftStatus(hdir hd) {
  hd.showStatus(null);
}

public void rightStatus(hdir hd) {
  if (url == null)
    hd.showStatus(null);
  else
    hd.showStatus(url.toExternalForm());
}

}

class item extends node {
  
  item(String n, URL u, String f) {
    name = n;
    url = u;
    frame = f;
  }

public int paintNode(hdir hd, Graphics g, int x, int y, int xdiff, int ydiff) {
  g.setColor(hd.fontColor);
  g.drawString(name,x,y);
  hd.registerNode(this,x,y);
  return y;
}

}

class dir extends node {
public node[] nodes; 
public boolean expand;

  dir(String n, URL u, String f, node[] nds, boolean exp) {
    name = n;
    url = u;
    frame = f;
    nodes = nds;
    expand = exp;
  }

public void paintMarker(Graphics g, boolean open, Color c, int x, int y) {
  g.setColor(c);
  Polygon p = new Polygon();
  if (open) {
    p.addPoint(x-13,y-6);
    p.addPoint(x-9,y-2);
    p.addPoint(x-5,y-6); }
  else {
    p.addPoint(x-11,y-9);
    p.addPoint(x-11,y-1);
    p.addPoint(x-7,y-5); }
  g.fillPolygon(p);
}

public int paintNode(hdir hd, Graphics g, int x, int y, int xdiff, int ydiff) {
  paintMarker(g,expand,hd.markerColor,x,y);
  g.setColor(hd.fontColor);
  g.drawString(name,x,y);
  hd.registerNode(this,x,y);
  if (expand) {
    int last = y;
    for (int i = 0; i < nodes.length; i++)
      last = nodes[i].paintNode(hd,g,x+xdiff,last+ydiff,xdiff,ydiff);
    return last; }
  else
    return y;
}

public void leftAction(hdir hd) {
  expand = !expand;
}
  
}
