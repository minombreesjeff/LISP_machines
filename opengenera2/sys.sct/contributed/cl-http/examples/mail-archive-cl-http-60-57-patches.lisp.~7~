;;;   -*- Mode: LISP; Package: CL-USER; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-

;;;
;;; (c) Copyright  1997, John C. Mallery
;;;     All Rights Reserved.
;;;

;;; This file provides compatibility for running the threaded version of
;;; HTTP:EXAMPLES;MAIL-ARCHIVE.LISP in CL-HTTP versions 60.57 and 60.63. It
;;; may work in earlier versions of CL-HTTP as well. It contains CL-HTTP
;;; patches 6.84, 60.85, 60.86, 60.87, 60.88, 60.96, 60.101, 60.102

#-Genera
(unless (find-package :sct)
  #-MCL(load "http:acl;lispm-patches")
  #+MCL(load "http:mac;server;lispm-patches"))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML2.LISP.255")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

;(define write-string-quoting-specials (string &optional (stream *output-stream*))
;  "Writes STRING to STREAM being careful to translated any special characters for HTML."
;  (with-fast-array-references ((vector string))
;    (loop for idx upfrom 0 to (the fixnum (1- (length vector)))
;         for char = (aref vector idx)
;         for token = (token-for-special-char char)
;         when token
;           do (write-string token stream)
;         else do (write-char char stream))))

;; faster version
(define write-string-quoting-specials (string &optional (stream *output-stream*) (start 0) end)
  "Writes STRING to STREAM being careful to translated any special characters for HTML."
  (flet ((%token-spec-for-special-char (char)
           #.`(case char
                ,.(loop for (char . string) in *special-character-translation-alist*
                        collect `(,char '(,string . ,(length string))))
                (t nil)))
         (write-part (string stream start end)
           (unless (= start end)
             (write-string string stream :start start :end  end))))
    (declare (inline %token-spec-for-special-char write-part))
    (with-fast-array-references ((vector string string))
      (loop with scan-idx
            for idx upfrom start below (or end (length vector))
            for char = (aref vector idx)
            for token-spec = (%token-spec-for-special-char char)
            do (when token-spec
                 (write-part vector stream (or scan-idx start) idx)
                 (write-string (car token-spec) stream :start 0 :end (cdr token-spec))
                 (setq scan-idx (1+ (the fixnum idx))))
            finally (if scan-idx
                        (write-part vector stream scan-idx idx)
                        (write-string vector stream :start start :end idx))))))

(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;HEADERS.LISP.293")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.293")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

;;;------------------------------------------------------------------- 
;;;
;;; EMAIL EXTENSION HEADERS
;;;

;;; these are used in the message archive facility.
(defun parse-message-id-header (string &optional (start 0) (end (length string)))
  (let* ((s (position #\< string :start start :end end :test #'eql))
	 (e (and s (position #\> string :start (1+ (the fixnum s)) :end end :test #'eql :from-end t))))
    (when (and s e)
      (subseq string s (1+ (the fixnum e))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.293")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define-header :message-id (:header :email)
  :print-string "Message-ID"
  :parse-function 'parse-message-id-header)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.293")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun parse-comma-separated-message-id-header (string &optional (start 0) (end (length string)))
  (loop with s = start
	for idx = (position #\< string :start s :end end :test #'eql)
	for close = (and idx (position #\> string :start (1+ (the fixnum idx)) :end end :test #'eql))
	while close
	collect (subseq string idx (1+ (the fixnum close)))
	while (< (setq s (1+ (the fixnum close))) end)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.293")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define-header :in-reply-to  (:comma-separated-header :email)
  :print-string "In-Reply-To"
  :parse-function 'parse-comma-separated-message-id-header)


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HEADERS.LISP.293")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define-header :References (:comma-separated-header :email)
  :print-string "References"
  :parse-function 'parse-comma-separated-message-id-header)

(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;HTML2.LISP.257")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;HTML2.LISP.257")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(defun enumerate-definition-item (stream continuation icon-url head)
  (flet ((write-dd (stream)
           (issue-command "DD" stream nil)
           (write-char #\space stream)))
    (declare (inline write-dd))
    (fresh-line stream)
    (issue-command "DT" stream)
    (when icon-url
      (image icon-url "o" :stream stream)
      (write-char #\space stream))
    (etypecase head
      (null nil)
      (string
        (write-string head stream)
        (write-dd stream))
      (cons
        (dolist (item head)
          (write item :stream stream))
        (write-dd stream))
      (function
	(funcall head stream)
	(write-dd stream)))
    (prog1 (funcall continuation stream))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer netscape-1-1.lisp jefferson hd1:Desktop Folder:cl-http-60-82-devo:server: HOST:
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: netscape1.1; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun add-color (color &optional red green blue)
  "Adds the RGB components RED, GREEN, BLUE to COLOR.
COLOR is a hexadecimal color or a color keyword.
RED, GREEN, BLUE are integers between -255 and +255."
  (declare (values new-color))
  (check-type red integer)
  (check-type green integer)
  (check-type blue integer)
  (flet ((add-color (c delta)
	   (declare (fixnum c delta))
	   (max (min (the fixnum (+ c delta)) 255) 0)))
    (multiple-value-bind (r g b)
	(ns3.0::decode-color (ns3.0:color-mapping color t))
      (ns3.0:encode-color (add-color r red) (add-color g green) (add-color b blue))))) 


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer netscape-1-1.lisp jefferson hd1:Desktop Folder:cl-http-60-82-devo:server: HOST:
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: netscape1.1; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(defun inverse-color (color)
  "Returns the inverse color for COLOR."
  (declare (values new-color))
  (flet ((inverse (c)
	   (declare (fixnum c))
	   (abs (- 255 c))))
    (declare (inline inverse))
    (multiple-value-bind (r g b)
	(ns3.0::decode-color (ns3.0:color-mapping color t))
      (ns3.0:encode-color (inverse r) (inverse g) (inverse b)))))


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer netscape-1-1.lisp jefferson hd1:Desktop Folder:cl-http-60-82-devo:server: HOST:
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: netscape1.1; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(mapc #'(lambda (x)
	  (let ((sym (intern x :ns1.1)))
	    (export sym :ns1.1)
	    (export sym :ns2.0)
	    (export sym :ns3.0)))
      '("ADD-COLOR" "INVERSE-COLOR"))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer lispm.lisp >http>lispm>server W.AI.MIT.EDU: (303)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

#+Genera
(defun generate-message-id (&optional time uniquizer)
  "Generates a unique message ID based on TIME, universal time, 
and UNIQUIZER, a factor assuring two threads on the same machine cannot collide."
  (zwei:generate-standard-message-id time uniquizer))

;; This could cons substantially less 2/3/97 -- JCMa.
#-Genera
(defun generate-message-id (&optional time uniquizer)
  "Generates a unique message ID based on TIME, universal time, 
and UNIQUIZER, a factor assuring two threads on the same machine cannot collide."
  (let* ((string (with-output-to-string (stream)
		   (write (or time (get-universal-time)) :stream stream)
		   (write uniquizer :stream stream)))
	 (digest1 (sha:sha-digest-hexadecimal-string string))
	 (digest2 (subseq digest1 0 20))
	 (host (or (local-host-domain-name)
		   (concatenate 'string "[" (local-host-ip-address) "]"))))
    (declare (dynamic-extent string digest1 digest2 host))
    (concatenate 'string "<" digest2 "@" host">")))


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer lispm.lisp >http>lispm>server W.AI.MIT.EDU: (303)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(mapc #'(lambda (x) (export (intern x :www-utils) :www-utils)) '("GENERATE-MESSAGE-ID"))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer lispm.lisp >http>lispm>server W.AI.MIT.EDU: (303)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

#+Genera
(declaim (inline generate-message-id))

(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "HTTP:SERVER;URL.LISP.269")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "HTTP:SERVER;URL.LISP.269")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

;;;------------------------------------------------------------------- 
;;;
;;; HTTP URL PARSER
;;;

(define-scheme-parser
  http
  (:classes (http-url))
  (url start end)
  (let (object extension search-keys search-parent)
    ;; extract the host parameters
    (multiple-value-bind (host-string port path-index)
        (get-host-port-info url start end)
      ;; extract the path components
      (multiple-value-bind (path object-index next-index search-p)
          (get-path-info url path-index end)
        ;; get the object components when present
        (when object-index
          (multiple-value-setq (object extension)
            (get-object-info url object-index next-index)))
        ;; get the search keys where necessary
        (when search-p
          (let ((s-suffix (1+ (the fixnum next-index))))
            (unless (= s-suffix end)
              (setq search-parent (intern-url url :start (- (the fixnum start) 5) :end s-suffix)
                    search-keys (funcall (search-parser search-parent) url s-suffix end)))))
        ;; create the appropriate URL
        (cond
          (search-p
           (let ((object (if extension
                             ;; searchable object (used for searchable images)
                             (make-instance 'http-searchable-object
                                            :host-string host-string
                                            :port port
                                            :path path
                                            :object object
                                            :extension extension
                                            :search-keys search-keys
                                            :search-parent search-parent)
                             ;; regular search urls
                             (make-instance 'http-search
                                            :host-string host-string
                                            :port port
                                            :path (if object
                                                      (nconc path (list object))
                                                      path)
                                            :search-keys search-keys
                                            :search-parent search-parent))))
             ;; inherit the parent's security properties on creation
             (if search-keys
		 (inherit-parent-access-controls object)
		 (setf (%search-parent object) object))
             object))
          (object
           (make-instance 'http-object
                          :host-string host-string
                          :port port
                          :path path
                          :object object
                          :extension extension))
          (t (make-instance 'http-path
                            :host-string host-string
                            :port port
                            :path path)))))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer url.lisp >http>server W.AI.MIT.EDU: (272)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defun url-position (string &optional (start 0) (end (length string)))
  "Locates the first URL in STRING between START and END.
Returns the START-URL and END-URL indices or nil when no URL is found."
  (declare (values START-URL END-URL))
  (flet ((scheme-p (string start end)
	   ;; this could be compiled out for more speed.  2/13/97 -- JCMa.
	   (loop for (scheme) in *scheme-parsers*
		 for end1 = (length scheme)
		 for start2 = (- (the fixnum end) (the fixnum end1))
		 when (and (<= start start2)
			   (string-equal scheme string :start1 0 :end1 end1
					 :start2 start2 :end2 end))
		   do (return (values scheme start2))
		 finally (return nil)))
	 (url-delimiter-p (char)
	   (member char '(#\space #\newline #\< #\>) :test #'eql))
	 (trim-p (char)
	   (member char '(#\. #\! #\: #\; #\, #\+ #\= #\@ #\$ #\% #\* ) :test #'eql))
	 (good-scheme-p (scheme start end)
	   (if (member scheme '("mailto" "news" "telnet") :test #'string-equal)
	       t
	       (let ((pos (1+ (the fixnum start))))
		 (and (< pos end) (eql #\/ (aref string (1+ (the fixnum pos)))))))))
    (declare (inline scheme-p url-delimiter-p trim-p good-scheme-p))
    (let ((pos (position #\: string :test #'eql :start start :end end)))
      (when pos
	(multiple-value-bind (scheme url-start)
	    (scheme-p string start pos)		;Ensure that we have a defined URL scheme
	  (cond
	    (scheme
	     (with-fast-array-references ((string string string))
	       ;; don't get confused by package prefixes
	       (cond ((good-scheme-p scheme pos end) 
		      ;; back down any number of trimmable characters
		      (loop with url-end = (loop for idx upfrom url-start below end
						 when (url-delimiter-p (aref string idx))
						   return idx
						 finally (return end))
			    for e1 downfrom url-end above pos
			    unless (trim-p (aref string (setq e1 (1- (the fixnum url-end)))))
			      do (return-from url-position (values url-start url-end))
			    else do (setq url-end e1)
			    while (< pos url-end)
			    finally (return-from url-position nil)))
		     (t (url-position string (1+ (the fixnum pos)) end)))))
	    (t (url-position string (1+ (the fixnum pos)) end))))))))


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer html2.lisp >http>server W.AI.MIT.EDU: (259)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(defun write-string-anchoring-urls (string stream &optional (start 0) (end (length string)))
  "Writes STRING to STREAM spotting any URLS and anchoring them
while being careful to translated any special characters for HTML."
  (loop with s = start
	doing (multiple-value-bind (url-start url-end)
		  (url::url-position string s end)
		(cond ((and url-start url-end)
		       (unless (= s url-start)
			 (write-string-quoting-specials string stream s url-start))
		       (let ((url (subseq string url-start url-end)))
			 (declare (dynamic-extent url))
			 (html:with-anchor-noted (:reference url :stream stream)
			   (write-string-quoting-specials string stream url-start url-end)))
		       (if (< url-end end)
			   (setq s url-end)
			   (return-from write-string-anchoring-urls)))
		      (t (write-string-quoting-specials string stream s end)
			 (return-from write-string-anchoring-urls))))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer url.lisp >http>server W.AI.MIT.EDU: (269)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(export (intern "URL-POSITION" :url) :url)

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer html2.lisp >http>server W.AI.MIT.EDU: (258)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(export (intern "WRITE-STRING-ANCHORING-URLS" :html) :html)

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer html2.lisp >http>server W.AI.MIT.EDU: (260)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(define-generic accept-input (input-type query-name &rest args &key stream &allow-other-keys)
  (declare (#+Genera scl:arglist
            #-Genera arglist
            input-type query-name &key default max-length size stream
            align choices columns compact display-string events image-url linebreaks preamble rows sequence-p
            ))
  (:documentation
    "The primary interface for accepting input from users via the WWW fill-out form
facility.

That really means presenting the choices to the user.  The returns are
accepted by the response function to an exported URL. See EXPORT-URL and the
macro BIND-QUERY-VALUES used within response functions.

Required Arguments: INPUT-TYPE -- the symbol denoting an defined input type.

                    QUERY-NAME -- a unique name for the value returned by form
                    submission.

Keyword Arguments: :STREAM -- the stream on which to write raw HTML generated
                    by the input-type.
                   
                    :DEFAULT -- the default value to use in lieu of user input 
                    (available for most input types).

                    :EVENTS -- If a browser supports client-side events on
                    form input types, they can be passed in via this argument.
                    Use the macro WITH-EVENT-HANDLERS to establish the
                    binding for input events Note that form submission events
                    are supplied via the macro WITH-FILLOUT-FORM.

Additional Arguments are defined on a per input-type basis.

Input Type          Keyword Arguments

CHECKBOX         -- Allows the user to select a sequence of values by checking
                    boxes.

                    [Required] :CHOICES is a list of choice values or an alist
                    of (choice-string . choice), or null.   Except in the
                    ALIST version, each choice string is the position of the
                    choice in the list.

                    [Optional] :DEFAULT is a list of values that are checked
                    by default. These are compared to the values in CHOICES
                    with EQUAL.
                                 
                    [Optional] (:LINEBREAKS T) causes choices to appear on new
                    lines within an enumeration environment. When null, they
                    appear on a single line.
                        
                    [Optional] (:ENUMERATION :PLAIN) is any valid argument to
                    WITH-ENUMERATION.
                                
                    [Optional] :COMPACT is the same as its counterpart in
                    WITH-ENUMERATION.

HIDDEN           -- Allows data passed through forms and back to the server.
                    These are known as hidden fields because they are invisible to
                    the user.

                    [Required] :DEFAULT should be a string or number.

                    HTTP:WRITE-TO-ARMOR-PLATED-STRING and HTTP:READ-FROM-ARMOR-PLATED-FORM
                    can help avoid damage in transit.

IMAGE            -- A likely obsolete method way to add a submit button to a
                    form that uses a image and returns image coordinates.

                    In the form returns, client returns two query values whose
                    names are constructed by appending .X and .Y to
                    QUERY-NAME. The bindings for X and Y are in pixels using
                    the upper left corner of the image as the origin.  The
                    effect is just like the SUBMIT input type in that a user
                    mouse click on this field causes the form to be sent
                    immediately.

                    [Required] :IMAGE-URL is an image URL.
                      
                    [Optional] (:ALIGN :TOP) can be any of :TOP, :MIDDLE,
                    :BOTTOM.

MULTI-LINE-TEXT  -- Allows the user to type in or edit multi line text in a
                    scrollable input box.

                    [Optional] :DEFAULT should be a string, null, or a function
                    which is called on STREAM.

                    [Optional] (:COLUMNS 72.) is an integer specifying the
                    width of the visible input field.

                    [Optional] (:ROWS 5.) is an integer specifying the height
                    of the visible input field.

PASSWORD         -- Just like the STRING input type except the client does not
                    display the input.

PREAMBLE         -- A function or string that is written before the input-type.
                    If PREAMBLE is a function, it is called with (INPUT-TYPE STREAM ARGS)
                    A typical use is to emit a JavaScript invoked by an input type.

RADIO-BUTTON     -- Allows the user to select a single value by checking a box.

                    [Required] :CHOICES is a list of choice values or an alist
                    of (choice-string . choice), or null. Except in the ALIST
                    version, each choice string is the position of the choice
                    in the list.

                    [Optional] :DEFAULT is a single value which is the
                    default. It is compared to the values in CHOICES with
                    EQUAL.
                    
                    [Optional] (:LINEBREAKS T) causes choices to appear on new
                    lines within an enumeration environment. When 
                    null, they appear on a single line.
                                 
                    [Optional] (:ENUMERATION :PLAIN) is any valid argument to
                    WITH-ENUMERATION.
                                
                    [Optional] :COMPACT is the same as its counterpart in
                    WITH-ENUMERATION.

RESET-BUTTON     -- Reset the values of the form to the default when pressed by the user.

                    [Optional] (:DISPLAY-STRING \"Reset\") is the label
                    displayed by the client.

SELECT-CHOICES   -- Allows the user to select either a single or multiple choices.

                    [Required] :CHOICES is a list of choice values or an alist
                    of (choice-string . choice), or null.   Except in the
                    ALIST version, each choice string is the position of the
                    choice in the list.

                    [Optional] :DEFAULT is either a single value or a list of
                    values, which are compared to choices with EQUALP.

                    [Optional] :SEQUENCE-P specifies whether a sequences of
                    values should be returned.

                    [Optional] :SIZE is an integer specifying the visible
                    number of rows visible in a scrolling inset choice box.
                    When :SEQUENCE-P is null, you can specify SIZE to be
                    :PULL-DOWN-MENU to have the choices rendered as
                     a pull down menu. When size is unspecified, it is
                    defaulted to a heuristic value.

SUBMIT-BUTTON    -- Submits the form when pressed by the user.

                    [Optional] (:DISPLAY-STRING \"Submit\") is the label
                    displayed by the client.

STRING           -- Allow the user to type in a string on a single line.

                    [Optional] :DEFAULT should be a string or null.

                    [Optional] (:SIZE 72) is an integer specifying the size to
                    make the visible input field.

                    [Optional] (:MAX-LENGTH 240) is an integer specifying the
                    maximum size which the input field may reach but not top
                    exceed 1024 characters."))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer html2.lisp >http>server W.AI.MIT.EDU: (261)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- mode: lisp; syntax: ansi-common-lisp; package: html2; base: 10 -*-")

(defmethod accept-input ((multi-line-text multi-line-text) query-name &rest args &key (stream *output-stream*) )
  (with-slots (type-arg) multi-line-text
    (destructuring-bind (&key (rows 5.) (columns 72.) default events &allow-other-keys) args
      (check-type rows integer)
      (check-type columns integer)
      (%with-environment (type-arg :stream stream :fresh-line t)
                         (progn
                           (%write-command-key-arg stream "NAME" query-name)
                           (%write-command-key-arg stream "ROWS" rows t)
                           (%write-command-key-arg stream "COLS" columns t)
                           (dolist (event events)
                             (%write-input-type-event-arg stream event)))
        (etypecase default
	  (null)
	  (string (write-string default stream))
	  (function (funcall default stream)))))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer utils.lisp >http>server W.AI.MIT.EDU: (301)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(define read-translated-char (stream delimiter &optional (eof-errorp t) eof-value)
  "Translates characters read from stream,
returning NIL when the character in DELIMITER is encounted."
  (declare (values char chars-read))
  (flet ((decode-escaped-char (stream)
           (let ((string (make-string 2)))
             (declare (dynamic-extent string))
             (www-utils:with-fast-array-references ((string string string))
               (setf (aref string 0) (read-char stream)
                     (aref string 1) (read-char stream))
	       (let ((code (parse-integer string :radix 16 :start 0 :end 2)))
		 (case code
		   (13 #\Return)
		   (10 #\linefeed)
		   (t (code-char code))))))))
    (declare (inline decode-escaped-char))
    (let ((char (read-char stream eof-errorp eof-value)))
      (typecase char
        (character
          (cond ((eql char delimiter)           ;delimiter return nil
                 (values nil 1))
                ((eql char #\+)
                 (values #\space 1))
                ((eql char *escape-character*)  ;escape character
                 (handler-case-if eof-errorp
		    (let ((char (decode-escaped-char stream)))
		      (if (eql char delimiter)
			  (values nil 3)
			  (values char 3)))
                   (end-of-file () (values eof-value 1))))
                (t (values char 1))))
        (t (if (equal char eof-value)
               (values char 0)
               (error "Bad value, ~S, returned by READ-CHAR." char)))))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer utils.lisp >http>server W.AI.MIT.EDU: (303)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(define valid-internet-mail-address-p (address &optional (start 0) (end (length address)) &aux pos)
  "Checks address for well-formedness returning ADDRESS,
or NIL when the address is ill-formed."
  (flet ((bad-host-char-p (char)
	   (member char '(#\, #\( #\) :test #'eql)))
	 (bad-user-name-char-p (char)
	   (member char '(#\, #\( #\) :test #'eql))))
    (declare (inline bad-host-char-p bad-user-name-char-p))
    (and (stringp address)
	 (setq pos (position #\@ address :test #'eql :start start :end end))
	 (= 1 (count #\@ address :test #'eql :start pos :end end))
	 (position #\. address :test #'eql :start (1+ (the fixnum pos)) :end end)
	 (not (find-if #'bad-host-char-p address :start pos :end end))
	 (not (find-if #'bad-user-name-char-p address :start start :end pos)))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer lispm.lisp >http>lispm>server W.AI.MIT.EDU: (305)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Package: WWW-UTILS; BASE: 10; Syntax: ANSI-Common-Lisp; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

#+Genera
(define send-mail-from (from to subject message-writer &key keywords comments file-references reply-to
                             additional-headers)
  "Send an email message from FROM to TO with subject SUBJECT.
MESSAGE-WRITER is either a string or a function accepting a stream argument
that is used to generate the message body. KEYWORDS is a list of keywords for a keyword
header. COMMENTS is a string for a comment header. FILE-REFERENCES is a list of pathnames.
REPLY-TO is automatically added unless supplied here."
  (labels ((message-string (message)
             (etypecase message
               (string message)
               (function (with-output-to-string (string)
                           (funcall message string)))))
           (parse-address (address)
             (handler-case
               (etypecase address
                 (cons
                   (loop for addr in address
                         append (zwei:parse-addresses addr)))
                 (string (zwei:parse-addresses address)))
               (zwei:parse-error (error) (zwei:error "~A" (dbg:report-string error)))))
           (send-it ()
             (scl:send (allocate-email-message to subject (message-string message-writer)
                                               :from from :reply-to reply-to
                                               :keywords keywords
                                               :comments comments
                                               :file-references file-references
                                               :additional-headers additional-headers)
                       :transmit))
           (last-resort (case from to subject message)
             (tv:notify tv:selected-window "~A~&From: ~A~&To: ~A~&Subject: ~A~2%~A"
                        case from to subject (message-string message)))
           (handle-mailer-error ()
             (loop for path in (net:find-paths-to-service :store-and-forward-mail)
                   for host = (neti::service-access-path-host path)
                   unless (host-eq host (local-host))
                     do (scl:condition-case-if (not http::*debug-server*) ()
			     (let ((zwei:*mail-network-host* host))
			       (send-it)
			       (return))
			   (mailer:mailer-error nil))
                   finally (last-resort "No Mailer found for Error Report:" from to subject message-writer))))
    (declare (inline send-it handle-mailer-error))
    ;; dont reroute the address as necessary
    ;; parse it up
    (scl:condition-case-if (not http::*debug-server*) ()
	 (progn
	   (setq from (parse-address from)
		 to (parse-address to)
		 reply-to (if reply-to
			      (parse-address reply-to)
			      `((:name ,(getf (car from) :name) :host ,(getf (car from) :host)))))
	   (handler-case 
	     (send-it)
	     ;;formerly mailer:mailer-not-running
	     (mailer:mailer-error () (handle-mailer-error))))
       (error (last-resort "Error Mailing Error Report:" from to subject message-writer)))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer url.lisp >http>server W.AI.MIT.EDU: (276)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defun %relative-path-string (url-string &optional (end (length url-string)))
  (let* ((pos1 (http::string-search= "://" url-string 0 3 0 (+ 3 (the fixnum *scheme-maximum-length*))))
	 pos2 pos3)
    (cond ((null pos1) (error 'no-scheme-found :url-string url-string))
	  ((null (setq pos2 (position #\/ url-string :start (+ 3 (the fixnum pos1)) :end end :test #'eql)))
	   nil)
	  ((setq pos3 (position #\/ url-string :test #'eql :start (1+ (the fixnum pos2)) :end end :from-end t))
	   (make-array (- (1+ (the fixnum pos3)) (the fixnum pos2))
		       :element-type (array-element-type url-string)
		       :displaced-to url-string :displaced-index-offset pos2))
	  (t "/"))))


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer url.lisp >http>server W.AI.MIT.EDU: (276)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(define-generic relative-path-string (url &optional compute-p)
  (:documentation "Returns the path string for the URL without the scheme or host/port prefix."))


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer url.lisp >http>server W.AI.MIT.EDU: (276)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(defmethod relative-path-string ((url url) &optional compute-p)
  (with-value-cached (url :relative-path :recompute-p compute-p)
    (let* ((name (name-string url compute-p))
           (length (length name)))
      (%relative-path-string name length))))


;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer url.lisp >http>server W.AI.MIT.EDU: (276)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Ansi-common-lisp; Package: (URL :use (future-common-lisp) :colon-mode :internal); Base: 10 -*-")

(export (intern "RELATIVE-PATH-STRING" :url) :url)

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer utils.lisp >http>server W.AI.MIT.EDU: (304)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Syntax: Ansi-common-lisp; Package: HTTP; Base: 10; Mode: lisp -*-")

(defun concatenate-lines (lines &optional (trim-predicate #'white-space-char-p))
  "Concatenates line with lines trimming leading and trailing characters satisfying trim-predicate."
  (flet ((compute-concatenation-spec (lines)
	   (loop for string in lines
		 for length = (length string)
		 for end = (1+ (the fixnum (or (position-if-not trim-predicate string :start 0 :end length :from-end t) -1)))
		 for start = (or (position-if-not trim-predicate string :start 0 :end end ) 0)
		 for size = (- (the fixnum end) (the fixnum start))
		 collect `(,start ,end ,size . ,string) into subseq-specs
		 unless (zerop size)
		   sum size into total-size
		   and sum 1 into n-lines
		 finally (return (values subseq-specs (if (zerop n-lines)
							  total-size
							  (+ (the fixnum (1- (the fixnum n-lines)))
							     (the fixnum total-size))))))))
    (declare (inline compute-concatenation-spec))
    (cond ((cdr lines)
	   (multiple-value-bind (line-specs total-size)
	       (compute-concatenation-spec lines)
	     (declare (dynamic-extent specs))
	     (let ((string (make-string total-size)))
	       (with-fast-array-references ((string string string))
		 (loop with start2 = 0 and end2 = 0
		       for (spec . more-specs) = line-specs then more-specs
		       for (start end size . new-line) = spec
		       do (unless (zerop size)
			    (setq end2 (+ (the fixnum start2) (the fixnum size)))
			    (copy-vector-portion new-line start end string start2 end2)
			    (cond ((and more-specs (not (zerop (caddar more-specs))))
				   (setf (aref string end2) #\space)
				   (setq start2 (1+ (the fixnum end2))))
				  (t (setq start2 end2))))
		       while more-specs))
	       string)))
	  (t (car lines)))))

;========================
(SCT:BEGIN-PATCH-SECTION)
; From buffer headers.lisp >http>server W.AI.MIT.EDU: (295)
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: lisp; Package: HTTP; BASE: 10.; Syntax: ANSI-COMMON-LISP; Default-Character-Style: (:FIX :ROMAN :NORMAL);-*-")

(define read-headers (stream &aux current-header line delimiter length error-p header-delimiter header-key multi-line-buffer)
  "Reads and assembles headers from STREAM."
  (declare (values header-alist))
  (labels ((clear-multi-line-buffer (header)
	     (flet ((trim-p (char)
		      (member char '(#\space #\tab #\return #\linefeed) :test #'eql)))
	       (when multi-line-buffer
		 (let* ((val (header-raw-value header))
			(lines `(,@val ,.(nreverse multi-line-buffer))))
		   (declare (dynamic-extent lines))
		   (setf (car (last val)) (concatenate-lines lines #'trim-p)
			 multi-line-buffer nil)))))
	   (push-header-multi-line-string (string)
	     (push string multi-line-buffer))
	   (push-header-string (header string)
	     (setf (header-raw-value header) (nconc (header-raw-value header) (list string))))
           (push-new-header-string (header string alist)
             (let ((hdr (assoc header alist)))
               (cond (hdr
                      (push-header-string (cdr hdr) string)
                      (values (cdr hdr) nil))
                     (t (values (allocate-header header-key (list string)) t)))))
	   (get-header-value (string start end)	;handles no whitespace case and null value (losers)
	     (let ((s (position-if-not #'white-space-char-p string :start start :end end)))
	       (if s (subseq string s length) ""))))
    (declare (inline clear-multi-line-buffer push-header-multi-line-string push-header-string
		     push-new-header-string get-header-value))
    delimiter                                   ;ignore
    (loop with line-buffer = *server-line-buffer*
          do (multiple-value-setq (line error-p delimiter length)
               (read-delimited-line stream '(#\Linefeed #\return) nil line-buffer))
          until (or error-p (blank-line-p line))
          when (and (setq header-delimiter (if (white-space-char-p (aref line 0))
					       nil
					       (position #\: line :start 0 :end length :test #'eql)))
		    (setq header-key (%tokenize-header line 0 header-delimiter)))
	    do (clear-multi-line-buffer current-header)
	    and
	  when (multiple-value-bind (header new-p)
		   (push-new-header-string
		     header-key
		     (get-header-value line (1+ (the fixnum header-delimiter)) length)
		     header-alist)
		 (setq current-header header)
		 new-p)
	    collect (list* header-key current-header) into header-alist
	      end
          else do (push-header-multi-line-string (subseq line 0 length))
          finally (clear-multi-line-buffer current-header)
		  (return-from read-headers header-alist))))

