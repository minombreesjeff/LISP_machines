;;; -*- Mode: LISP; Package: cl-user; Lowercase: T; Base: 10; Syntax: Common-lisp -*-

;;; Copyright 1983, 1984, 1985, Symbolics, Inc.  All Rights Reserved.

(defpackage NS
  (:use scl)
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")  ;; prevents having to use :: outside of NS
0  (:colon-mode :internal)
  )

1;;; This is so we can include the .translations and .system files on the tape

0(sct:define-distribution-system ns-site-files
    (:default-pathname "sys: site;"
     :default-package "user"
     :source-category :basic
     :distribute-sources :always)
  (:serial
    "ns.translations"
    "example-ns.site-def"
    "basic-ns.system"
    "schematic-ns.system"
    "vlsi-ns.system"
    "ns-routers.system"
    "spice.system"
    "drc.system"
    "hp.system"
    "timberwolf.system"
    "compose.system"
    "ns-doc.system"
    "ns-tutorial.system"
    "pcb-ns.system"
    "gate-array-ns.system"
    "lsi-logic-support.system"
    "vlsi-hacks.system"))

(sct:define-distribution-system ns-distribution-files
    (:default-pathname "ns: distribution;"
     :default-package "user"
     :source-category :basic
     :distribute-sources :always)
  (:serial
    "installation-instructions.text"
    "build-ns-world.lisp"
    "make-distribution-tape.lisp"
    "ns.data"))

1;;; We have a separate distribution system for issuing sources
;;; this makes it easier to make most files available while
;;; with holding a few critical files for security purposes.

0(sct:define-distribution-system basic-ns-sources
    (:default-pathname "ns: basic-ns;"
     :source-category :basic
     :distribute-sources :always)
  (:serial
    "system-patches.lisp"
    "encrypted-protection.lisp"
    "defs.lisp"
    "transform.lisp"
    "color.lisp"
    "encrypted-basic.lisp"			;basic-ns
    "encrypted-file-support.lisp"
    "library.lisp"
    "attribute-desc.lisp"
    "module.lisp"
    "aspect.lisp" 
    "object-defs.lisp"
    "move.lisp"
    "primitive-objects.lisp"
    "points-and-lines.lisp"
    "diagram.lisp"
    "diagram-instance.lisp"
    "buffer.lisp"
    "view.lisp"
    "trackers.lisp"
    "edit.lisp"
    "debug.lisp"
    "hardcopy.lisp"
    "technology.lisp"
    "initial-module.lisp"
    "picture-editor.lisp"
    "concordia-interface.lisp"
    "startup.lisp"
    "cometh.lisp"
    "file-format-converters.lisp"
     "test-basic-ns.lisp"))

(defsystem basic-ns
    (:pretty-name "Basic-NS"
     :default-pathname "ns: basic-ns;"
     :journal-directory "ns: basic-ns;"
     :bug-reports (:mailing-list "Bug-NS" :documentation "Report a problem with NS")
     :patchable t
     :initial-status :released
     :maintaining-sites (:scrc)
     :distribute-sources nil
     :distribute-binaries t)
  (:serial
    "system-patches"
    "protection"				1; contains password protection
    ;; primitives
0    "defs"
    "transform"
    "color"
    "basic"1					; contains password protection
0    "file-support"1				; contains password protection
    ;; hierarchy
0    "library"
    "attribute-desc"
    "module"
    "aspect" 
1    ;; mixins for primitive objects
0    "object-defs"
    "move"
    "primitive-objects"
    "points-and-lines"
    "diagram"
    "diagram-instance"
    "quad-trees"
    "buffer"
    "view"
    "trackers"
    "edit"
    "debug"
    "hardcopy"
    "technology"
    "initial-module"
    "picture-editor"
    "concordia-interface"
    "startup"
    "cometh"
    "file-format-converters"
    "test-basic-ns"))

(define-ns-test-suite-system basic-ns-test-suite "ns: basic-ns; test-suite;")
