;;; -*- Mode: LISP; Syntax: Common-lisp; Package: LT; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file is in the cold load.

;;; This is what to do for the cold-loading of this file.
(defvar si:*localized-defvars* nil :localize t)
;;; This is what we'd do if loading regularly.
; (defvar si:*localized-defvars* '(si:*localized-defvars*))

;;; These are used by DEFVAR and DEFCONST
(defvar si:*redo-defvars-p* nil)

;; This form is also implemented by the cold-load generator.
;; Make sure that you keep the different versions consistent.
(si:define-special-form si:defvar-1 (symbol &optional (value nil val-p)
						      documentation localize
					    &environment env)
  (declare lt:(arg-template set eval quote quote))
  (if val-p
      (si:defvar-1-internal env symbol value documentation localize)
      (si:defvar-1-internal env symbol)))

(defun si:defvar-1-internal (env symbol &optional (value nil val-p) documentation localize)
  (check-type symbol symbol)
  (when (record-source-file-name symbol 'defvar)
    (si:special-load symbol)
    (when (and val-p
	       (or (not (boundp symbol))
		   (defvar-1-internal-2 symbol)
		   fs:this-is-a-patch-file))
      (setf (symbol-value symbol) (eval value env))
      (si:when-in-incremental-who-calls-mode
	(si:who-calls-defvar-hook symbol)))
    (setf (documentation symbol 'variable) documentation)
    (when localize
      (pushnew (if (eq localize t) symbol (list symbol localize)) si:*localized-defvars*
	       :key #'(lambda (thing) (if (consp thing) (car thing) thing))
	       :localize t :replace t)))
  symbol)

(defun defvar-1-internal-1 (symbol documentation localize)
  (when (record-source-file-name symbol 'defvar)
    (si:special-load symbol)
    (setf (documentation symbol 'variable) documentation)
    (when localize
      (pushnew (if (eq localize t) symbol (list symbol localize)) si:*localized-defvars*
	       :key #'(lambda (thing) (if (consp thing) (car thing) thing))
	       :localize t :replace t))
    t))

(defun defvar-1-internal-2 (symbol)
  (or (not (boundp symbol))
      (case si:*redo-defvars-p*
	    ((nil) nil)
	    ((t) (let ((compiler:default-warning-function symbol)
		       (compiler:default-warning-definition-type 'defvar))
		   (warn "DEFVAR is replacing the previous value of ~S~%" symbol)
		   t))
	    ((:query)
	     (y-or-n-p "Replace the value of ~S? " symbol)))))

;; This form is also implemented by the cold-load generator.
;; Make sure that you keep the different versions consistent.
(si:define-special-form si:defconst-1 (symbol value &optional documentation &environment env)
  (declare lt:(arg-template set eval quote))
  (si:defconst-1-internal symbol (eval value env) documentation))

(defun si:defconst-1-internal (symbol value &optional documentation)
  (check-type symbol symbol)
  (when (record-source-file-name symbol 'defvar)
    (si:special-load symbol)
    (setf (symbol-value symbol) value)
    (setf (documentation symbol 'variable) documentation)
    (si:when-in-incremental-who-calls-mode
      (si:who-calls-defvar-hook symbol)))
  symbol)

;; This form is also implemented by the cold-load generator.
;; Make sure that you keep the different versions consistent.
(si:define-special-form si:defconstant-1
			(symbol value &optional documentation &environment env)
  (declare lt:(arg-template set eval quote))
  (defconstant-load-internal symbol (eval value env) documentation))

(defun defconstant-load-internal (symbol value documentation)
  (check-type symbol symbol)
  (when (record-source-file-name symbol 'defvar)
    (when (or (not (boundp symbol))
	      (not (named-constant-p symbol))
	      (query-about-defconstant-redefinition symbol (symbol-value symbol) value))
      (setf (symbol-value symbol) value)
      ;; This property attests to DEFCONSTANT.  It allows the compiler to choose
      ;; to open-code, if the value is appropriate.
      (defconstant-load-2 symbol)
      (setf (documentation symbol 'defvar) documentation)
      (si:when-in-incremental-who-calls-mode
	(si:who-calls-defvar-hook symbol))))
  symbol)

;;; Symbol Macros

(defun si:define-symbol-macro-load (name form)
  (check-type name symbol)
  (when (record-source-file-name name 'defvar)
    (setf (get name 'sys:symbol-macro) form))
  name)

(defun si:define-symbol-macro-compile (name form)
  (check-type name symbol)
  (compiler:file-declare name 'sys:symbol-macro form)
  name)

(defun symbol-macro-p (name &optional env)
  (when (listp env)
    ;; This can get called by Flavors with env being the symbol compile.
    (let ((env-value (cdr (assoc name (si:env-variables env)))))
      (when env-value
	(return-from symbol-macro-p
	  (if (and (consp env-value)
		   (cdr env-value))
	      (values t (car env-value))
	      nil)))))
  (multiple-value-bind (form found)
      (compiler:file-declaration name 'sys:symbol-macro)
    (when found
      (return-from symbol-macro-p (values t form))))
  (let ((default '#.(gensym)))
    (let ((form (get name 'sys:symbol-macro default)))
      (when (not (eq form default))
	(return-from symbol-macro-p (values t form)))))
  nil)


(defconstant *common-lisp-declarations*
	     '(
	       special type ftype inline notinline ignore optimize declaration
	       future-common-lisp:dynamic-extent future-common-lisp:ignorable))

(defparameter *symbolics-common-lisp-declarations*
	      '(zl:unspecial
		sys:instance-variables flavor:local-functions
		sys:array-register sys:array-register-1d
		si:invisible-block zwei:indentation
;		sys:unsafeguarded-function sys:safeguarded-function sys:wired-function
;		sys:unsafeguarded-reference sys:safeguarded-reference sys:wired-reference
;		sys:patch-in-place
		sys:optimize-array-references-in-loops
		sys:logic-variable
		compiler:do-not-record-these-macros
		compiler:number-of-returned-values
		compiler:variable-inlinable))

(defvar *user-defined-declarations* nil)

(defun valid-declaration-p (declaration-name &optional env)
  (or (member declaration-name *common-lisp-declarations*)
      (member declaration-name *symbolics-common-lisp-declarations*)
      (member declaration-name *user-defined-declarations*)
      (cli::type-name-p declaration-name env)
      (get declaration-name 'si:declaration-alias)))

(defun proclaim (declaration)
  (process-proclaim declaration nil)
  nil)

;;; Same effect, but without compile-time magic.
(defun future-common-lisp:proclaim (declaration)
  (proclaim declaration))

(defun process-proclaim (declaration compile-time)
  (when (not (consp declaration))
    (warn "~S is not a legal declaration spec." declaration)
    (return-from process-proclaim nil))
  (let ((type (first declaration)))
    (when (eq type 'function)
      (return-from process-proclaim
	(process-proclaim `(ftype (function ,@(rest (rest declaration)))
				  ,(second declaration))
			  compile-time)))
    (when (cli::type-name-p type (if compile-time 'future-common-lisp:compile-file nil))
      (return-from process-proclaim
	(process-proclaim `(type ,@declaration) compile-time)))
    (let ((handler (get type 'proclaim)))
      (when handler
	(return-from process-proclaim
	  (funcall handler (rest declaration) compile-time))))
    (let ((alias (get type 'si:declaration-alias)))
      (etypecase alias
	(null)
	(symbol
	  (return-from process-proclaim
	    (process-proclaim `(,alias ,@(rest declaration)) compile-time)))
	(function
	  (return-from process-proclaim
	    (process-proclaim (funcall alias declaration nil) compile-time)))))
    (unless (valid-declaration-p type)
      (warn "~S is not a recognized declaration spec; it is being ignored."
	    declaration))
    nil))

;;;

(defun (:property declaration proclaim) (names compile-time)
  (dolist (declaration-name names)
    (check-type declaration-name symbol)
    (when (cli::type-name-p declaration-name
			    (if compile-time 'future-common-lisp:compile-file nil))
      (error "~S names a type and cannot be used as a declaration." declaration-name))
    (pushnew declaration-name *user-defined-declarations*))
  nil)

;;;

(defun (:property inline proclaim) (names compile-time)
  (declare-inline 'inline names compile-time)
  nil)

(defun (:property notinline proclaim) (names compile-time)
  (declare-inline 'notinline names compile-time)
  nil)

(defun declare-inline (type names compile-time)
  (mapc #'(lambda (name)
	    (if (si:validate-function-spec name)
		(if compile-time
		    (compiler:file-declare name 'inline type)
		    (setf (si:function-spec-get name 'inline) type))
		(warn "~S is not a valid function specification for DECLARE ~A." name type)))
	names)
  nil)

;;;

(defun (:property special proclaim) (names compile-time)
  (cond (compile-time
	 (mapc #'si:special-compile names))
	(t
	 (mapc #'(lambda (name)
		   (record-source-file-name name 'special t)
		   (si:special-load name))
	       names)))
  nil)

(defun (:property zl:unspecial proclaim) (names compile-time)
  (cond (compile-time
	 (mapc #'si:unspecial-compile names))
	(t
	 (mapc #'(lambda (name)
		   (record-source-file-name name 'zl:unspecial t)
		   (si:unspecial-load name))
	       names)))
  nil)

(defun (:property type proclaim) (declaration compile-time)
  (let ((type (first declaration)))
    (cond (compile-time
	   (mapc #'(lambda (name)
		     (proclaim-variable-data-type-compile name type))
		 (rest declaration)))
	  (t
	   (mapc #'(lambda (name)
		     (record-source-file-name name 'special-variable-data-type t)
		     (proclaim-variable-data-type-load name type))
		 (rest declaration))))
    nil))

;;;

(defun (:property compiler:number-of-returned-values proclaim)
       (spec compile-time)
  (let ((n-values (car spec))
	(names (cdr spec)))
    (mapc #'(lambda (name)
	      (if (si:validate-function-spec name)
		  (if compile-time
		      (compiler:file-declare name 'compiler:number-of-returned-values n-values)
		      (setf (si:function-spec-get
			      name 'compiler:number-of-returned-values) n-values))
		  (warn "~S is not a valid function specification for DECLARE ~A."
			name 'number-of-returned-values)))
	  names)))

(defun compiler:number-of-returned-values (fspec)
  (multiple-value-bind (compiler-def found)
      (compiler:file-declaration fspec 'compiler:number-of-returned-values)
    (when found
      (return-from compiler:number-of-returned-values compiler-def)))
  (si:function-spec-get fspec 'compiler:number-of-returned-values))

(defprop defvar make-variable-obsolete compiler:make-obsolete)

(defprop sys:function-name t si:debug-info)
(defprop compiler:area t si:debug-info)
(defprop si:encapsulated-definition t si:debug-info)
(defprop si:compiled-encapsulation t si:debug-info)
(defprop clos:print-object t si:debug-info)


;; No need to punt this if D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")record-definition-source-file0 returns 1nil0, since
;; 1sys:multiple-definition0 will have already given up (all 1deftype0s get run
;; inside 1sys:multiple-definition0).
(defun cli::start-deftype-definition (type-name &key documentation arglist pretty-name
				      presentation-only-kludge (record-source-file-name t))
  (when (or (member type-name *common-lisp-declarations*)
	    (member type-name *symbolics-common-lisp-declarations*)
	    (member type-name *user-defined-declarations*))
    (error "~S is a declaration name and cannot be defined as a type." type-name))
  (cond (record-source-file-name
	 (record-definition-source-file type-name 'deftype
					:start-type-definition (not presentation-only-kludge)))
	((not presentation-only-kludge)
	 (when sys:*update-types-incrementally*
	   (dw:prepare-for-type-change type-name))))
  (when documentation
    (setf (documentation type-name 'deftype) documentation))
  (setf (get type-name 'cli::type-lambda-list) arglist)
  (when pretty-name
    (setf (get type-name 'cli::typename) pretty-name))
  type-name)

(defun cli::finish-deftype-definition (type-name &key presentation-only-kludge)
  (unless presentation-only-kludge
    (dw:finish-type-redefinition type-name))
  type-name)
