;;; -*- Mode: Lisp; Package: System-Internals; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Error system support for PACKAGE
;;; This has to go in a separate file, because it can't be loaded until
;;; flavors have been turned on.  It also depends on the window system to run.

;Base flavor for all package-related errors
(DEFFLAVOR PACKAGE-ERROR () (ERROR) :ABSTRACT-FLAVOR)

;Note: changed from what is documented in Signalling and Handling Conditions
(DEFFLAVOR PACKAGE-NOT-FOUND (NAME (RELATIVE-TO NIL)
				   (RELATIVE-TO-SYNTAX NIL))
	   (NO-ACTION-MIXIN PACKAGE-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (MAKE-INSTANCE PACKAGE-NOT-FOUND :AFTER) (&REST IGNORE)
  ;; Make sure the signaller supplied a real syntax object, for convenience in access later.
  (WHEN RELATIVE-TO-SYNTAX
    (SETQ RELATIVE-TO-SYNTAX (FIND-LISP-SYNTAX RELATIVE-TO-SYNTAX))))

(DEFMETHOD (:REPORT PACKAGE-NOT-FOUND) (STREAM)
  (FORMAT STREAM
	  "~:\QUOTED-STRING\ is not meaningful as ~:[a~;~:*~A~] package name~
	   ~@[ relative to ~A~]."
	  NAME 
	  (IF RELATIVE-TO-SYNTAX
	      (SCL:STRING-A-OR-AN (LISP-SYNTAX-PRETTY-NAME RELATIVE-TO-SYNTAX)))
	  (IF (AND RELATIVE-TO-SYNTAX (CL:PACKAGEP RELATIVE-TO))
	      (COMPILER:PACKAGE-NAME-FOR-SYNTAX RELATIVE-TO RELATIVE-TO-SYNTAX)
	      RELATIVE-TO)))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE PACKAGE-NOT-FOUND :NO-ACTION) (STREAM)
  (FORMAT
    STREAM
    "Try to find package ~:\QUOTED-STRING\ again (presumably after loading its definition)."
    NAME))

(DEFMETHOD (:PROCEED PACKAGE-NOT-FOUND :NEW-NAME)
	   (&OPTIONAL (NEW-NAME (PROMPT-AND-READ ':STRING-TRIM
						 "Name to use instead of ~:\QUOTED-STRING\: "
						 NAME)))
  "Supply a different package name to use instead."
  (VALUES ':NEW-NAME NEW-NAME))

(DEFMETHOD (:PROCEED PACKAGE-NOT-FOUND :CREATE-PACKAGE) (&KEY (USE-LIST NIL USE-LIST-GIVEN))
  (IF (AND (PKG-FIND-PACKAGE NAME :FIND RELATIVE-TO RELATIVE-TO-SYNTAX)
	   (FQUERY NIL "There is now a ~:\QUOTED-STRING\ package, use it? " NAME))
      :NO-ACTION
      (VALUES :CREATE-PACKAGE
	      (IF USE-LIST-GIVEN USE-LIST (DEFAULT-PACKAGE-USE-LIST RELATIVE-TO-SYNTAX)))))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE PACKAGE-NOT-FOUND :CREATE-PACKAGE) (STREAM)
  (FORMAT STREAM "Create ~A package ~:\QUOTED-STRING\ with :USE '~:S."
	  (OR RELATIVE-TO-SYNTAX (CURRENT-LISP-SYNTAX))
	  NAME
	  (DEFAULT-PACKAGE-USE-LIST RELATIVE-TO-SYNTAX)))

(DEFGENERIC CONDITIONS:PACKAGE-ERROR-PACKAGE (CONDITIONS:PACKAGE-ERROR))

(DEFFLAVOR CONDITIONS:PACKAGE-ERROR (CLI::PACKAGE) (PACKAGE-ERROR)
  :ABSTRACT-FLAVOR
  :INITABLE-INSTANCE-VARIABLES
  (:READABLE-INSTANCE-VARIABLES
    (CONDITIONS:PACKAGE-ERROR-PACKAGE CLI::PACKAGE)))

(DEFFLAVOR PACKAGE-LOCKED (SYMBOL CLI::PACKAGE (ACTION 'INTERN))
	   (NO-ACTION-MIXIN CONDITIONS:PACKAGE-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

;; This function is new. It is useful in supporting applications
;; like Cloe which make some set of symbols inaccessible.
(DEFUN REPORT-INACCESSIBLE-SYMBOL (PACKAGE-NAME SYMBOL STREAM)
  (IF (NOT (SYMBOLP SYMBOL)) (SETQ SYMBOL (CL:MAKE-SYMBOL SYMBOL)))
  (LET ((PKG (CL:FIND-PACKAGE PACKAGE-NAME)))
    (MULTIPLE-VALUE-BIND (IGNORE STATUS)
	(CL:FIND-SYMBOL (STRING SYMBOL) PKG)
      (LET ((CL:*PRINT-GENSYM* NIL))
	(FORMAT STREAM "The symbol ~A~:[::~;:~]~S cannot be accessed in this context."
		PACKAGE-NAME
		(OR (EQ (SI:PKG-PREFIX-INTERN-FUNCTION PKG) 'CL:INTERN)
		    (EQ STATUS :EXTERNAL))
		SYMBOL)))))

;; This hook is for use only by Cloe. It allows Cloe to present better
;; error messages for certain special circumstances. -kmp 3-Mar-89
(DEFVAR *CLOE-PACKAGE-INACCESSIBLE-TEST* NIL)

;; This abstracts out some error message hacking we do in more than one place.
(DEFMACRO ASSURE-SYMBOL-ACCESSIBLE-IN-PACKAGE ((PKG SYM STREAM) &BODY FORMS)
  `(LET ((INACCESSIBLE-PACKAGE-REAL-NAME	;Free name, but that's ok in this case.
	   (IF *CLOE-PACKAGE-INACCESSIBLE-TEST*
	       (FUNCALL *CLOE-PACKAGE-INACCESSIBLE-TEST* ,PKG))))
     (IF INACCESSIBLE-PACKAGE-REAL-NAME
	 (REPORT-INACCESSIBLE-SYMBOL INACCESSIBLE-PACKAGE-REAL-NAME ,SYM ,STREAM)
	 ,@FORMS)))

(DEFMETHOD (:REPORT PACKAGE-LOCKED) (STREAM)
  (ASSURE-SYMBOL-ACCESSIBLE-IN-PACKAGE (CLI::PACKAGE SYMBOL STREAM)
    (FORMAT STREAM "Attempt to ~@ ~A ~A locked package ~A"
	    ACTION SYMBOL (IF (EQ ACTION 'REMOB) "from" "in") CLI::PACKAGE)))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE PACKAGE-LOCKED :NO-ACTION) (STREAM)
  (FORMAT STREAM "~: ~A ~A package ~A anyway."
	  ACTION SYMBOL (IF (EQ ACTION 'REMOB) "from" "in") CLI::PACKAGE))

(DEFFLAVOR EXTERNAL-SYMBOL-NOT-FOUND (STRING CLI::PACKAGE) (CONDITIONS:PACKAGE-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)



(DEFMETHOD (:REPORT EXTERNAL-SYMBOL-NOT-FOUND) (STREAM)
  (MULTIPLE-VALUE-BIND (SYMBOL FLAG)
      (CL:FIND-SYMBOL STRING CLI::PACKAGE)
    (IF FLAG
	(FORMAT STREAM "Attempt to access the non-exported symbol ~S as an external of ~A"
		SYMBOL CLI::PACKAGE)
	(ASSURE-SYMBOL-ACCESSIBLE-IN-PACKAGE (CLI::PACKAGE STRING STREAM)
	  (FORMAT STREAM "Attempt to access the non-existent external symbol ~A:~A"
	    CLI::PACKAGE STRING)))))

(DEFMETHOD (:PROCEED EXTERNAL-SYMBOL-NOT-FOUND :EXPORT) ()
  ':EXPORT)

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE EXTERNAL-SYMBOL-NOT-FOUND :EXPORT) (STREAM)
  (FORMAT STREAM "Export ~A from package ~A and then use it." STRING CLI::PACKAGE))

(DEFMETHOD (:PROCEED EXTERNAL-SYMBOL-NOT-FOUND :INTERNAL) ()
  ':INTERNAL)

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE EXTERNAL-SYMBOL-NOT-FOUND :INTERNAL) (STREAM)
  (MULTIPLE-VALUE-BIND (IGNORE FLAG)
      (CL:FIND-SYMBOL STRING CLI::PACKAGE)
    (FORMAT STREAM "~:[Create~;Use~] the internal symbol, as ~A::~A would."
	    FLAG (PKG-PREFIX-NAME CLI::PACKAGE) STRING)))

(DEFFLAVOR PACKAGE-FERROR () (FERROR PACKAGE-ERROR))

;Base flavor for all name conflict errors
(DEFFLAVOR NAME-CONFLICT () (CONDITIONS:PACKAGE-ERROR) :ABSTRACT-FLAVOR)

(DEFMETHOD (:PROCEED NAME-CONFLICT :SKIP) ()
  "Skip the operation that would cause a name conflict."
  ':SKIP)

(DEFUN SYMBOL-LOCALLY-PRESENT (SYM PKG)
  (MULTIPLE-VALUE-BIND (IGNORE FLAG) (FIND-SYMBOL-LOCAL (GET-PNAME SYM) PKG)
    FLAG))

;Can throw NIL to ABORT if we ask the user whether to do it and he says no.
;This should abort the :proceed operation.
(DEFUN REPLACE-SYMBOL-IN-PACKAGE (OLD-SYMBOL NEW-SYMBOL PKG)
  (MULTIPLE-VALUE-BIND (FOUND FLAG) (FIND-SYMBOL-LOCAL (GET-PNAME OLD-SYMBOL) PKG)
    (COND ((NULL FLAG)
	   (FORMAT ERROR-OUTPUT "~&Importing ~S into package ~A as a shadowing symbol."
		   NEW-SYMBOL PKG)
	   (SHADOWING-IMPORT-INTERNAL NEW-SYMBOL PKG))
	  ((EQ FOUND NEW-SYMBOL)
	   (FORMAT ERROR-OUTPUT "~&Note: ~S has become accessible in package ~A already."
		   NEW-SYMBOL PKG))
	  ((NEQ FOUND OLD-SYMBOL)
	   (FERROR "Package structure has changed; ~S is no longer accessible in package ~A."
		   OLD-SYMBOL PKG))
	  ((EQ FLAG ':INHERITED)
	   (FORMAT ERROR-OUTPUT "~&Importing ~S into package ~A, shadowing ~S."
		   NEW-SYMBOL PKG OLD-SYMBOL)
	   (SHADOWING-IMPORT-INTERNAL NEW-SYMBOL PKG))
	  ((AND (EQ FLAG ':EXTERNAL)
		(NOT (FQUERY FORMAT:YES-OR-NO-P-OPTIONS
		       "~S needs to be un-interned from package ~A to make ~S accessible,~@
			but ~S is an external symbol.  Are you sure you want to unexport it? "
		       OLD-SYMBOL PKG NEW-SYMBOL OLD-SYMBOL)))
	   (THROW 'ABORT NIL))
	  (T	;FLAG is :INTERNAL or :EXTERNAL
	   (FORMAT ERROR-OUTPUT "~&Un-interning ~S from package ~A to make ~S accessible."
		   OLD-SYMBOL PKG NEW-SYMBOL)
	   (REMOB OLD-SYMBOL PKG)))))


;Error from UNINTERN (also known as REMOB)
(DEFFLAVOR NAME-CONFLICT-IN-UNINTERN (SYMBOL CLI::PACKAGE CONFLICTS) (NAME-CONFLICT)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT NAME-CONFLICT-IN-UNINTERN) (STREAM)
  (FORMAT STREAM "Un-interning ~S from package ~A reveals a previously shadowed~@
		  name conflict between inherited symbols "
	  SYMBOL CLI::PACKAGE)
  (FORMAT:PRINT-LIST STREAM "~S" (MAPCAR #'CAR CONFLICTS))
  (FORMAT STREAM "."))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-UNINTERN :SKIP) (STREAM)
  (FORMAT STREAM "Skip removing ~S from package ~A." SYMBOL CLI::PACKAGE))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-UNINTERN :SHADOWING-IMPORT)
	   (&OPTIONAL (SYM (TV:MENU-CHOOSE (LOOP FOR C IN CONFLICTS
						 COLLECT (CONS (PKG-NAME (CDR C))
							       (CAR C)))
					   "Import symbol inherited from:")))
  "Choose one of the inherited symbols, import it, and make it shadow the others."
  (OR (ASSQ SYM CONFLICTS)
      (FERROR "~S is not one of the conflicting inherited symbols" SYM))
  (VALUES ':SHADOWING-IMPORT SYM))


(DEFFLAVOR NAME-CONFLICT-IN-USE-PACKAGE (CONFLICTS FROM-PACKAGE CLI::PACKAGE) (NAME-CONFLICT)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (MAKE-INSTANCE NAME-CONFLICT-IN-USE-PACKAGE :AFTER) (&REST IGNORE)
  (WHEN (NULL (CDR CONFLICTS))
    (SETQ DBG:PROCEED-TYPES (REMQ :CHOOSE DBG:PROCEED-TYPES))))

(DEFMETHOD (:REPORT NAME-CONFLICT-IN-USE-PACKAGE) (STREAM)
  (FORMAT STREAM "Making package ~A use package ~A causes ~
		  ~:[a name conflict~;some name conflicts~]:"
	  CLI::PACKAGE FROM-PACKAGE (CDR CONFLICTS))
  (LOOP FOR (CAUSE . SYM) IN CONFLICTS
	DO (IGNORE CAUSE)
	WHEN (SYMBOL-LOCALLY-PRESENT SYM CLI::PACKAGE)
	  COLLECT SYM INTO LOCAL
	  ELSE COLLECT SYM INTO REMOTE
	FINALLY
	  (WHEN LOCAL
	    (FORMAT STREAM "~%Package ~A already contains " CLI::PACKAGE)
	    (FORMAT:PRINT-LIST STREAM "~S" LOCAL))
	  (WHEN REMOTE
	    (FORMAT STREAM "~%Package ~A already inherits " CLI::PACKAGE)
	    (FORMAT:PRINT-LIST STREAM "~S" REMOTE))))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-USE-PACKAGE :SKIP) (STREAM)
  (FORMAT STREAM "Skip making package ~A use package ~A." CLI::PACKAGE FROM-PACKAGE))

;These aren't worth documenting in detail, because the detail will be too long.
(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-USE-PACKAGE :EXPORT) (STREAM)
  (FORMAT STREAM "Prefer the symbols from ~A, un-interning or shadowing competitors."
	  FROM-PACKAGE))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-USE-PACKAGE :EXPORT) ()
  (CATCH 'ABORT
    (DOLIST (SYM CONFLICTS)
      (REPLACE-SYMBOL-IN-PACKAGE (CDR SYM)
				 (CL:FIND-SYMBOL (GET-PNAME (CDR SYM)) FROM-PACKAGE) CLI::PACKAGE))
    ':EXPORT))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-USE-PACKAGE :SHADOW) (STREAM)
  (FORMAT STREAM "Prefer the symbols already in ~A, making them shadow the new symbols."
	  CLI::PACKAGE))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-USE-PACKAGE :SHADOW) ()
  (DOLIST (SYM CONFLICTS)
    (FORMAT ERROR-OUTPUT "~&Declaring ~S a shadowing symbol in package ~A." (CDR SYM) CLI::PACKAGE)
    (SHADOWING-IMPORT-INTERNAL (CDR SYM) CLI::PACKAGE))
  ':SHADOW)

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-USE-PACKAGE :SHARE) (STREAM)
  (FORMAT STREAM "Make the symbols already in ~A share cells with the symbols from ~A."
	  CLI::PACKAGE FROM-PACKAGE))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-USE-PACKAGE :SHARE) ()
  (CATCH 'ABORT
    (DOLIST (SYM CONFLICTS)
      (SEND SELF ':SHARE-SYMBOL (CDR SYM)))
    ':SHARE))

(DEFMETHOD (:SHARE-SYMBOL NAME-CONFLICT-IN-USE-PACKAGE) (SYM)
  (LET ((EXPORT (CL:FIND-SYMBOL (GET-PNAME SYM) FROM-PACKAGE)))
    (WHEN EXPORT
      (FORMAT ERROR-OUTPUT "~&Forwarding value, function, and property cells of ~S to ~S."
	      SYM EXPORT)
      (FORWARD-SYMBOL-CELLS SYM EXPORT)
      (REPLACE-SYMBOL-IN-PACKAGE SYM EXPORT CLI::PACKAGE))))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-USE-PACKAGE :CHOOSE) ()
  "Choose individually what to do about each conflict"
  (LET* ((ANY-UNINTERN NIL)
	 (ANY-SHADOW NIL)	 
	 (CHOICES
	  (TV:MULTIPLE-CHOOSE "Symbol"
			      (LOOP FOR (CAUSE . SYM) IN CONFLICTS
				    AS CHOICE = (COND ((SYMBOL-LOCALLY-PRESENT SYM CLI::PACKAGE)
						       (SETQ ANY-UNINTERN T)
						       ':UNINTERN)
						      (T (SETQ ANY-SHADOW T)
							 ':SHADOW))
				    DO (IGNORE CAUSE)
				    COLLECT (LIST SYM (GET-PNAME SYM)
						  (CONS (LIST CHOICE T)
							'(:SHADOWED :SHARE))))
			      (IF ANY-UNINTERN
				  (IF ANY-SHADOW
				      '((:UNINTERN " Un-intern old ")
					(:SHADOW " Shadow old ")
					(:SHADOWED " Shadow new ")
					(:SHARE " Share cells "))
				      '((:UNINTERN " Un-intern old ")
					(:SHADOWED " Shadow new ")
					(:SHARE " Share cells ")))
				  '((:SHADOW " Shadow old ")
				    (:SHADOWED " Shadow new ")
				    (:SHARE " Share cells "))))))
    (CATCH 'ABORT
      (LOOP FOR (SYM ACTION) IN CHOICES
	    DO (SELECTQ ACTION
		 ((:UNINTERN :SHADOW)
		  (SHADOW SYM FROM-PACKAGE)
		  (REPLACE-SYMBOL-IN-PACKAGE SYM
					     (FIND-SYMBOL-LOCAL (GET-PNAME SYM) FROM-PACKAGE)
					     CLI::PACKAGE))
		 (:SHADOWED (SHADOWING-IMPORT-INTERNAL SYM CLI::PACKAGE))
		 (:SHARE (SEND SELF ':SHARE-SYMBOL SYM))))
      (AND CHOICES ':CHOOSE))))


(DEFFLAVOR NAME-CONFLICT-IN-EXPORT (SYMBOL CLI::PACKAGE CONFLICTS) (NAME-CONFLICT)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (MAKE-INSTANCE NAME-CONFLICT-IN-EXPORT :AFTER) (&REST IGNORE)
  (WHEN (NULL (CDR CONFLICTS))
    (SETQ DBG:PROCEED-TYPES (REMQ :CHOOSE DBG:PROCEED-TYPES))))

(DEFMETHOD (:REPORT NAME-CONFLICT-IN-EXPORT) (STREAM)
  (FORMAT STREAM "Exporting ~S from package ~A would cause name conflict~P in "
	  SYMBOL CLI::PACKAGE (LENGTH CONFLICTS))
  (FORMAT:PRINT-LIST STREAM "~A" (MAPCAR #'CDR CONFLICTS))
  (FORMAT STREAM "."))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-EXPORT :SKIP) (STREAM)
  (FORMAT STREAM "Skip exporting ~S from package ~A." SYMBOL CLI::PACKAGE))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-EXPORT :EXPORT) ()
  "Replace conflicting symbols by un-interning or shadowing them."
  (CATCH 'ABORT
    (LOOP FOR (SYM . PKG) IN CONFLICTS DO
      (REPLACE-SYMBOL-IN-PACKAGE SYM SYMBOL PKG))
    ':EXPORT))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-EXPORT :SHADOW) ()
  "Keep the conflicting symbols by making them shadow the exported symbol."
  (LOOP FOR (SYM . PKG) IN CONFLICTS DO
    (FORMAT ERROR-OUTPUT "~&Declaring ~S a shadowing symbol in package ~A." SYM PKG)
    (SHADOWING-IMPORT-INTERNAL SYM PKG))
  ':SHADOW)

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-EXPORT :SHARE) (STREAM)
  (FORMAT STREAM "Export it but share value cell, function definition, and properties."))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-EXPORT :SHARE) ()
  (CATCH 'ABORT
    (LOOP FOR (SYM . PKG) IN CONFLICTS DO
      (SEND SELF ':SHARE-SYMBOL SYM PKG))
    ':SHARE))

(DEFMETHOD (:SHARE-SYMBOL NAME-CONFLICT-IN-EXPORT) (SYM PKG)
  (FORMAT ERROR-OUTPUT "~&Forwarding value, function, and property cells of ~S to ~S."
	  SYM SYMBOL)
  (FORWARD-SYMBOL-CELLS SYM SYMBOL)
  (REPLACE-SYMBOL-IN-PACKAGE SYM SYMBOL PKG))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-EXPORT :CHOOSE) ()
  "Choose individually what to do about each conflict"
  (LET* ((ANY-UNINTERN NIL)
	 (ANY-SHADOW NIL)	 
	 (CHOICES
	  (TV:MULTIPLE-CHOOSE "Exporting to package"
			      (LOOP FOR (SYM . PKG) IN CONFLICTS
				    AS CHOICE = (COND ((SYMBOL-LOCALLY-PRESENT SYM PKG)
						       (SETQ ANY-UNINTERN T)
						       ':UNINTERN)
						      (T (SETQ ANY-SHADOW T)
							 ':SHADOW))
				    COLLECT (LIST PKG (PKG-NAME PKG)
						  (CONS (LIST CHOICE T)
							'(:SHADOWED :SHARE))))
			      (IF ANY-UNINTERN
				  (IF ANY-SHADOW
				      '((:UNINTERN " Un-intern old ")
					(:SHADOW " Shadow old ")
					(:SHADOWED " Shadow new ")
					(:SHARE " Share cells "))
				      '((:UNINTERN " Un-intern old ")
					(:SHADOWED " Shadow new ")
					(:SHARE " Share cells ")))
				  '((:SHADOW " Shadow old ")
				    (:SHADOWED " Shadow new ")
				    (:SHARE " Share cells "))))))
    (CATCH 'ABORT
      (LOOP FOR (PKG ACTION) IN CHOICES
	    AS SYM = (CAR (RASSQ PKG CONFLICTS))
	    DO (SELECTQ ACTION
		 ((:UNINTERN :SHADOW) (REPLACE-SYMBOL-IN-PACKAGE SYM SYMBOL PKG))
		 (:SHADOWED (SHADOWING-IMPORT-INTERNAL SYM PKG))
		 (:SHARE (SEND SELF ':SHARE-SYMBOL SYM PKG))))
      (AND CHOICES ':CHOOSE))))


(DEFFLAVOR NAME-CONFLICT-IN-EXPORT-FROM-LOCKED-PACKAGE ()
	   (NAME-CONFLICT-IN-EXPORT PACKAGE-LOCKED))


(DEFFLAVOR NAME-CONFLICT-IN-IMPORT (SYMBOL CLI::PACKAGE CONFLICT) (NAME-CONFLICT)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)
  
(DEFMETHOD (MAKE-INSTANCE NAME-CONFLICT-IN-IMPORT :AFTER) (&REST IGNORE)
  (SETQ DBG:PROCEED-TYPES
	(REMQ (IF (SYMBOL-LOCALLY-PRESENT CONFLICT CLI::PACKAGE) ':SHADOWING-IMPORT
							    ':UNINTERN)
	      DBG:PROCEED-TYPES)))

(DEFMETHOD (:REPORT NAME-CONFLICT-IN-IMPORT) (STREAM)
  (FORMAT STREAM "Importing ~S into package ~A would cause a name conflict with ~@
		  ~S which is ~:[inherited~;~
		  already present~:[~; and declared to be shadowing~]~]."
	  SYMBOL CLI::PACKAGE CONFLICT
	  (SYMBOL-LOCALLY-PRESENT CONFLICT CLI::PACKAGE)
	  (MEMQ CONFLICT (PKG-SHADOWING-SYMBOLS CLI::PACKAGE))))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE NAME-CONFLICT-IN-IMPORT :SKIP) (STREAM)
  (FORMAT STREAM "Skip importing ~S into ~A." SYMBOL CLI::PACKAGE))

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-IMPORT :UNINTERN) ()
  "Un-intern the conflicting symbol"
  ':UNINTERN)

(DEFMETHOD (:PROCEED NAME-CONFLICT-IN-IMPORT :SHADOWING-IMPORT) ()
  "Shadow the conflicting symbol"
  ':SHADOWING-IMPORT)

(DEFFLAVOR MAKE-PACKAGE-NAME-DUPLICATION (NAME CONFLICTS) (ERROR)
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT MAKE-PACKAGE-NAME-DUPLICATION) (STREAM)
  (FORMAT STREAM "The package name~P ~{~A~^, ~} ~2:*~[~;is~:;are~] already in use."
	  (LENGTH CONFLICTS) CONFLICTS))

(DEFMETHOD (:PROCEED MAKE-PACKAGE-NAME-DUPLICATION :NO-ACTION) ()
  :NO-ACTION)

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE MAKE-PACKAGE-NAME-DUPLICATION :NO-ACTION) (STREAM)
  (FORMAT STREAM "Use the existing package ~A instead." NAME))

;; From DEBUGGER;COMETH
(COMPILE-FLAVOR-METHODS PACKAGE-NOT-FOUND PACKAGE-LOCKED EXTERNAL-SYMBOL-NOT-FOUND
			NAME-CONFLICT-IN-IMPORT NAME-CONFLICT-IN-EXPORT
			NAME-CONFLICT-IN-EXPORT-FROM-LOCKED-PACKAGE
			NAME-CONFLICT-IN-UNINTERN NAME-CONFLICT-IN-USE-PACKAGE
			MAKE-PACKAGE-NAME-DUPLICATION
			DBG:READ-EXTERNAL-SYMBOL-NOT-FOUND
			DBG:READ-PACKAGE-ERROR
			SI:READ-PACKAGE-NOT-FOUND
			SI:READ-PACKAGE-LOCKED
			SI:READ-NAME-CONFLICT-IN-EXPORT-FROM-LOCKED-PACKAGE)
