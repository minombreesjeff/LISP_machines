;;; -*- Mode: LISP; Syntax: Common-lisp; Package: SYS-LOG; Base: 10; Lowercase: T; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

; move this to another file.
(defvar *wired-event-codes* (make-array 100.))

(sys:defwiredvar *wired-event-log*) ; defined in COLDVM to be an array with a fill pointer

(sys:defwiredvar *enable-wired-logging* nil)

(sys:defwiredvar *halt-on-wired-log-wrap* nil)	;set this to a WIRED-FERROR type.

(defsubst wired-event-log-last-index ()
  (fill-pointer *wired-event-log*))

;;; all arguments to this have to be storable in an ART-Q.
(si:defwiredfun log-wired-event (code &rest entry-slots)
  (when *enable-wired-logging*
    (without-interrupts
      (let* ((n-entries (loop for e in entry-slots count 1))
	     (space-required (+ 2 n-entries))
	     (space-at-end (- si:%wired-event-log-size
			      (wired-event-log-last-index)))
	     (header-word 0)
	     (time (sys:%microsecond-clock))
	     (new-entry-start)
	     (new-entry-after))
	(setf (wired-event-header-code header-word) code)
	(setf (wired-event-header-length header-word) n-entries)
	(if ( space-at-end space-required)
	    (setq new-entry-start (wired-event-log-last-index)
		  new-entry-after (+ (wired-event-log-last-index) space-required))
	    (when *halt-on-wired-log-wrap*
	      (let ((old-enable *enable-wired-logging*)) ; no special binding allowed.
		(setq *enable-wired-logging* nil)
		(wired-ferror *halt-on-wired-log-wrap* "Out of space in wired event log.")
		(setq *enable-wired-logging* old-enable)))
	    (setf (wired-event-log-last-index) 0)
	    (setq new-entry-start 0 new-entry-after space-required))
	(let ((new-end (+ new-entry-start space-required)))
	  (setf (wired-event-header-next-index header-word) new-end)
	  (setf (aref *wired-event-log* new-entry-start) header-word)
	  (setf (aref *wired-event-log* (1+ new-entry-start)) time)
	  (let ((sx (+ 2 new-entry-start)))
	    (loop for x from sx for entry in entry-slots
		  do (setf (aref *wired-event-log* x) entry)))
	  (setf (wired-event-log-last-index) new-end))))))
