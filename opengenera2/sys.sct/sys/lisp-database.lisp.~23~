;;; -*- Mode: LISP; Syntax: Common-lisp; Package: LT; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defparameter compiler:*evaluate-defconstant-forms-at-compile-time* t)

;;; Compiler stuff

(defun (:property proclaim compiler:top-level-form) (form)
  (when (and (= (length form) 2)
	     (compiler:constant-form-p (second form)))
    (process-proclaim (compiler:constant-evaluator (second form)) t))
  form)

;;; Special Variables

(defun si:special-load (symbol)
  (check-type symbol symbol)
  (setf (get symbol 'special) t)
  symbol)

(defun si:special-compile (symbol)
  (check-type symbol symbol)
  (compiler:file-declare symbol 'special t)
  symbol)

(defun si:unspecial-load (symbol)
  (check-type symbol symbol)
  (remprop symbol 'special)
  symbol)

(defun si:unspecial-compile (symbol)
  (check-type symbol symbol)
  (compiler:file-declare symbol 'special nil)
  symbol)

(defun global-special-variable-p (var &optional env)
  env
  (multiple-value-bind (prop found)
      (compiler:file-declaration var 'special)
    (when found
      (return-from global-special-variable-p prop)))
  ;; Look for permanent global declarations and for barfucious kludges
  (or (not (null (get var 'special)))
      (and (variable-boundp compiler:all-special-switch)
	   compiler:all-special-switch)
      (and (variable-boundp compiler:special-pkg-list)
	   (member (symbol-package var) compiler:special-pkg-list))))

;;;

(defun proclaim-variable-data-type-load (name type)
  (setf (get name 'special-variable-data-type) type)
  nil)

(defun proclaim-variable-data-type-compile (name type)
  name type
  nil)



;;; Named Constants

(defun defconstant-load-2 (symbol)
  (si:special-load symbol)
  (setf (get symbol 'defconstant) t)
  symbol)

(defun query-about-defconstant-redefinition (symbol old-value new-value)
  (cond ((equalp new-value old-value)
	 t)
	((or fs:this-is-a-patch-file
	     (eq inhibit-fdefine-warnings :just-warn))
	 (warn "DEFCONSTANT is changing the value of ~S from ~S to ~S.~@
			  Previously compiled programs will not get the new value."
	       symbol old-value new-value)
	 t)
	((null inhibit-fdefine-warnings)
	 (case (fquery '(:choices
			  (((t "Yes.") #\Y #\T #\sp)
			   ((:proceed "Proceed.") #\P)
			   ((nil "No.") #\N #\Rubout))
			  :help-function
			  query-about-defconstant-redefinition-help)
		       "Error: DEFCONSTANT is changing the value of ~S from ~S to ~S.~@
			      Previously compiled programs will not get the new value.~@
			      Go ahead and change the value? "
		       symbol old-value new-value)
	   ((t)
	    t)
	   ((:proceed)
	    (format *query-io*
		    "~&From now on, all redefinitions of constants, functions, etc. ~
			     will cause warnings, not queries.~@
			     (SETQ INHIBIT-FDEFINE-WARNINGS NIL) to revert to queries.")
	    (setq inhibit-fdefine-warnings :just-warn)
	    t)))
	(t nil)))

(defun query-about-defconstant-redefinition-help (stream)
  (format stream "~%Type Y to redefine the constant, N to not redefine it,
or P to proceed and warn instead of asking in the future.~%"))


(defun si:defconstant-compile (symbol value-form)
  (let ((compiler:default-warning-function symbol)	;bind variables for WARN
	(compiler:default-warning-definition-type 'defvar))
    (let* ((optimized-form (compiler:optimize-top-level-form value-form
							     :compile t
							     :do-style-checking t))
	   (constant-form-p (compiler:constant-form-p optimized-form))
	   (value (and constant-form-p
		       (compiler:constant-evaluator optimized-form))))
      (when (and (not constant-form-p)
		 compiler:*evaluate-defconstant-forms-at-compile-time*)
	;; Evaluate the value form at compile time even though it might have evaluated
	;; to something different at load time.
	(condition-case (error)
	     (setq value (eval optimized-form))
	   (error
	     (warn "~S (expanded from ~S) cannot be evaluated at compile time.~%~A"
		   optimized-form value-form error))
	   (:no-error
	     (setf optimized-form `',value)
	     (setf constant-form-p t)
	     (warn "~S may not have a constant compile-time value -- ~S will be used."
		   value-form optimized-form))))
      ;; Only open-code if we can get away with it.
      (si:special-compile symbol)
      (compiler:file-declare symbol
			     'defconstant
			     (if (and constant-form-p
				      (si:effectively-defconstantable-evalled value))
				 `(t ,value)
				 '(nil nil))))))

(defun named-constant-p (name &optional env)
  env
  (multiple-value-bind (compiler-def found)
      (compiler:file-declaration name 'defconstant)
    (when found
      (return-from named-constant-p
	(if (first compiler-def)
	    (values t (second compiler-def))
	    nil))))
  (when (get name 'defconstant)
    (return-from named-constant-p
      (values t (symbol-value name))))
  nil)



;;; Obsolete Variables

(defun make-variable-obsolete (symbol reason ignore)
  (check-type symbol symbol)
  (record-source-file-name symbol 'compiler:obsolete-variable t)
  (setf (get symbol 'compiler:obsolete-variable) reason)
  symbol)

(defun variable-obsolete-p (symbol &optional env)
  env
  (get symbol 'compiler:obsolete-variable))

;;;

(defun undefine-variable (name)
  (remprop name 'special)
  (remprop name 'defconstant)
  (remprop name 'symbol-macro)
  (makunbound name)
  name)



;;; Note that we don't worry about declarations yet.
(defun fcli::variable-information (name &optional env)
  (declare (values type local declarations))
  (let ((entry (assoc name (si:env-variables env))))
    (when entry
      (setf entry (cdr entry))
      (return-from fcli::variable-information
	(typecase entry
	  (cons
	    (if (null (cdr entry))
		(values :lexical t nil)
		(values :symbol-macro t nil)))
	  (locative
	    (if (eq entry (locf (symbol-value name)))
		(values :special nil nil)
		(values 'instance nil nil)))
	  (otherwise
	    (ecase (compiler:variable-type entry)
	      ((compiler:lexical)
	       (values :lexical t nil))
	      ((compiler:special)
	       (values :special nil nil))
	      ((compiler:instance)
	       (values 'instance nil nil))))))))
  (when (clos-internals:compile-file-environment-p env)
    (multiple-value-bind (form found)
	(compiler:file-declaration name 'sys:symbol-macro)
      (declare (ignore form))
      (when found
	(return-from fcli::variable-information
	  (values :symbol-macro nil nil))))
    (multiple-value-bind (compiler-def found)
	(compiler:file-declaration name 'defconstant)
      (declare (ignore compiler-def))
      (when found
	(return-from fcli::variable-information
	  (values :constant nil nil))))
    (multiple-value-bind (prop found)
	(compiler:file-declaration name 'special)
      (when found
	(return-from fcli::variable-information
	  (if prop
	      (values :special nil nil)
	      (values nil nil nil))))))
  (let ((default '#.(gensym)))
    (let ((form (get name 'sys:symbol-macro default)))
      (when (not (eq form default))
	(return-from fcli::variable-information
	  (values :symbol-macro nil nil)))))
  (when (get name 'defconstant)
    (return-from fcli::variable-information
      (values :constant nil nil)))
  (when (get name 'special)
    (return-from fcli::variable-information
      (values :special nil nil)))
  (values nil nil nil))

(defun fcli::function-information (name &optional env)
  (declare (values type local declarations))
  (let* ((inherited-dcls 
	   (let ((entry (second (assoc name (si:env-functions env) :test #'equal))))
	     (when entry
	       (let ((def (second entry)))
		 (cond ((null def)
			(nthcdr 2 entry))
		       ((and (consp def) (eq (car def) 'special))
			(return-from fcli::function-information
			  (values :macro t nil)))
		       (t
			(return-from fcli::function-information
			  (values :function t
				  (let ((inline (getf (nthcdr 2 entry) 'inline)))
				    (and inline `((inline . ,inline))))))))))))
	 (inline (or (getf inherited-dcls 'inline)
		     (and (clos-internals:compile-file-environment-p env)
			  (compiler:file-declaration name 'inline))
		     (si:function-spec-get name 'inline))))
    (flet ((handle-def (def)
	     (if (and (consp def) (eq (first def) 'special))
		 (values (if (second def) :macro :special-form) nil nil)
		 (values :function nil (and inline `((inline . ,inline)))))))
      (when (clos-internals:compile-file-environment-p env)
	(multiple-value-bind (def found)
	    (compiler:file-declaration name 'compiler:def)
	  (when found
	    (return-from fcli::function-information
	      (handle-def def)))))
      (when (fdefinedp name)
	(return-from fcli::function-information
	  (handle-def (fdefinition name)))))
    (values nil nil (and inline `((inline . ,inline))))))

(defun fcli::declaration-information (decl-name &optional env)
  (ecase decl-name
    ((optimize)
     (map 'list #'(lambda (word)
		    `(,word ,(optimize-state word env)))
	  *optimization-keywords*))
    ((declaration)
     *user-defined-declarations*)))



;;; OPTIMIZE

(defparameter *optimization-keywords* '(speed space safety compilation-speed))

(defgeneric optimize-state-internal (optimize-state key)
  (:method-combination :case))

(defflavor optimize-state
	((speed 1)
	 (space 1)
	 (safety 1)
	 (compilation-speed 1)
	 (others nil))
	())

(defmethod (optimize-state-internal optimize-state speed) () speed)

(defmethod (optimize-state-internal optimize-state space) () space)

(defmethod (optimize-state-internal optimize-state safety) () safety)

(defmethod (optimize-state-internal optimize-state compilation-speed) () compilation-speed)

(defmethod (optimize-state-internal optimize-state otherwise) (key)
  (check-type key symbol)
  (getf others key 1))

(defmethod ((setf optimize-state-internal) optimize-state) (name value)
  (check-type value (integer 0 3))
  (case name
    ((speed)
     (setf speed value))
    ((space)
     (setf space value))
    ((safety)
     (setf safety value))
    ((compilation-speed)
     (setf compilation-speed value))
    (otherwise
      (check-type name symbol)
      (unless (member name *optimization-keywords*)
	(warn "~S is not a standard optimization keyword." name))
      (setf (getf others name 1) value)))
  value)

(compile-flavor-methods optimize-state)

(defvar *optimize-state* (make-instance 'optimize-state))

(defvar-resettable compiler:*compiler-optimize-state* nil)

(defun (:property optimize proclaim) (specs compile-time)
  (let ((state (if compile-time
		   compiler:*compiler-optimize-state*
		   *optimize-state*)))
    (mapc #'(lambda (spec)
	      (cond ((atom spec)
		     (setf (optimize-state-internal state spec) 3))
		    ((= (length spec) 2)
		     (setf (optimize-state-internal state (first spec)) (second spec)))
		    (t
		     (warn "Invalid syntax in OPTIMIZE declaration."))))
	  specs)
    nil))

(defun optimize-state (name &optional env)
  ;; Search for lexical declarations.
  (when env
    (mapc #'(lambda (dcls)
	      (mapc #'(lambda (dcl)
			(when (and (listp dcl)
				   (eq (first dcl) 'optimize))
			  (mapc #'(lambda (spec)
				    (when (eq spec name)
				      (return-from optimize-state 3))
				    (when (and (listp spec)
					       (eq (first spec) name))
				      (return-from optimize-state (second spec))))
				(rest dcl))))
		    dcls))
	  (si:env-declarations env)))
  ;; Search the global environment.
  (let ((state (or compiler:*compiler-optimize-state*
		   *optimize-state*)))
    (optimize-state-internal state name)))



(defun bootstrap-lisp-database ()
  (mapc #'si:special-load si:*cold-load-specials*)
  (mapc #'defconstant-load-2 si:*cold-load-constants*)
  (loop for (fdefine-file-pathname fcn . args) in si:*cold-load-lisp-database*
	do (apply fcn args))
  (variable-makunbound si:*cold-load-lisp-database*)
  (variable-makunbound si:*cold-load-specials*)
  (variable-makunbound si:*cold-load-constants*))

(add-initialization "Initialize Lisp Database" '(bootstrap-lisp-database) '(:once))
