;;;-*- Syntax: Zetalisp; Base: 10; Mode: LISP; Package: SCT; Lowercase: T -*-
;;; Declarations for SYSTEMs initially loaded
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defsystem system
    (:patchable t
     :journal-directory "sys: patch;"
     :maintaining-sites (:scrc)
     :patches-reviewed "System-Changes"
     :advertised-in (:disk-label :herald :finger)
     ;; no :bug-reports because it creates a template named bug-system-template.
     ;; specially defined in sys:zmail;template-library
     #|| :bug-reports (:name "Genera" :mailing-list "Bug-Genera" :documentation
			     "Report a bug in the Genera software") ||#
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module-group macros
   (:serial
     "sys: sys2; defmac"					
     "sys: sys2; lmmac"
     "sys: sys2; struct-defs"
     "sys: sys2; struct"
     "sys: sys2; setf"
     "sys: sys2; loop"
     "sys: clcp; macros"
     "sys: zwei; zcollection"))
  ;; None of the component systems are patchable, because we will handle all
  ;; of the patches here in SYSTEM
  (:module components (system-internals
		       embedding
		       l-bin
		       tables
		       scheduler
		       netboot
		       netboot-stubs
		       common-lisp
		       lisp+c-syntax
		       sct
		       garbage-collector
		       flavor
		       error-system
		       language-tools
		       network
		       lisp-compiler
		       bitblt			;Must be before fonts
		       fonts			;Must be before FILE-SYSTEM and TV
		       file-system
		       bin
		       time			;Must be before TV
		       tv
		       monochrome-sync-programs
		       ivory-color-support-parts
		       presentation-substrate
		       cp			;DW depends on this
		       dynamic-windows		;Must be after TV and SI
		       dynamic-window-clients	;Must be after TV and SI
		       debugger			;Must be after CP
		       i-linker
		       fep-fs
		       system-commands
		       gprint)
	   (:type :system)
	   ;; actually, the macros have to be loaded, there are defuns in them.
	   ;;(:in-order-to :compile (:compile-for-effect macros))
	   (:in-order-to :load (:load macros))))

(defsubsystem system-internals
    (:short-name "SI"
     :pretty-name "SI"
     :distribute-sources t
     :distribute-binaries nil
     :default-pathname "sys: sys;"		;So compile-files-of-subsystem works
     :source-category :basic)
  (:module package "sys: sys; pkgdcl"
	   (:type :lisp-read-only)
	   (:root-module nil))
  (:module defs ("sys: io; rddefs"
		 "sys: sys; wired-event-defs"))
  (:module l-arith-defs ("sys: sys; arithdefs")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-arith-defs ("sys: sys; iarithdefs")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module i-sysdef ("sys: i-sys; sysdef" "sys: i-sys; sysdf1")
	   (:package system)
	   (:machine-types (:imach :vlm)))
  (:module l-storage-defs ("sys: storage; L-storage-defs")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-storage-defs ("sys: storage; I-storage-defs")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module l-hardware-defs ("sys: l-sys; nbs-defs")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-hardware-defs-1 ("sys: sys2; bars"
			      "sys: storage; disk-definitions")
	   (:machine-types (:imach :vlm)))
  (:module i-hardware-defs-2 ("sys: sys; SCSI-definitions"
			      "sys: i-sys; vme-defs"
			      "sys: i-sys; io-register-definitions"
			      "sys: i-sys; domino-scsi-definitions")
	   (:machine-types (:imach))
	   (:source-category (:optional
			       (:basic "sys: sys; SCSI-definitions"))))
  (:module-group l-defs
   (:parallel
     "sys: sys2; macro"
     l-arith-defs i-arith-defs
     "sys: sys2; bigdefs"
     i-sysdef
     l-storage-defs i-storage-defs
     "sys: sys2; lnumer-defs"
     l-hardware-defs i-hardware-defs-1 i-hardware-defs-2))
  (:module metering-defs ("sys: metering; metering-definitions"
			  "sys: metering; metering-cold"
			  "sys: metering; metering-macros")
	   (:source-category :optional))
  (:module i-block-functions ("sys: i-sys; block-functions") (:machine-types (:imach :vlm)))
  (:module-group main
   (:parallel
     "sys: sys; aarray"
     "sys: sys2; advise"
     i-block-functions
     "sys: sys2; character-sets"
     "sys: sys2; character-styles"
     "sys: sys; cold-load"
     "sys: sys; command-loop"
     "sys: sys; console"
     "sys: sys; expand-do"
     "sys: io; dribbl"
     "sys: sys2; encaps"
     "sys: sys; eval"
     "sys: io; format"
     "sys: sys; fspec"
     "sys: sys2; hash"				;this uses macros from SYS:FLAVOR;
     "sys: sys2; hash-compatibility"
     "sys: sys2; heap"
     "sys: io; indenting-stream"
     "sys: io; interactive-stream"
     "sys: io; input-editor"
     "sys: io; iterators"
     "sys: sys2; let"
     "sys: sys; lisp-syntax"
     "sys: sys; lispfn"
     "sys: sys2; login"
     "sys: sys; ltop"
     "sys: sys2; maclsp"
     "sys: sys; macroexpand"
     "sys: sys2; memory-cold"
     "sys: sys; mini-alists"
     "sys: sys2; numer"
     "sys: embedding; rpc; octet-structure-runtime"
     "sys: sys; package"
     "sys: sys; packerr"
     "sys: sys2; plane"
     "sys: io; print"
     "sys: io; qio"
     "sys: io; read"
     "sys: io; readers"
     "sys: sys2; resour"
     "sys: sys2; selev"
     "sys: sys; sort"
     "sys: sys; standard-values"
     "sys: sys2; storage-categories"
     "sys: io; stream"
     "sys: sys2; string"
     "sys: sys2; struct-cold"
     "sys: sys; sysdcl"				;necessary for cold-loading to win
     "sys: io; unix-translating-streams"
     "sys: sys; wired-event-log")		;nothing in here is l-specific
   (:in-order-to :load (:load metering-defs))
   #|| (:in-order-to :compile
	(:compile-for-effect defs metering-defs)) ||#
   )
  (:module readtable-compiler "sys: io; rtc")
  (:module readtable ("sys: io; rdtbl"
		      "sys: clcp; readtable"
		      "sys: clcp; ansi-readtable"
		      "sys: embedding; rpc; c-readtable")
	   (:type :readtable)
	   (:in-order-to :compile (:load readtable-compiler)))
  (:module l-allocate ("sys: sys; l-allocate")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-allocate ("sys: sys; i-allocate")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module l-cons ("sys: sys; lcons")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-cons ("sys: sys; icons")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module l-fepio ("sys: sys; lfepio")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-fepio ("sys: sys; ifepio")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module l-prim ("sys: sys; lhard"
		   "sys: sys; lprim"
		   "sys: sys; lstack")
	   (:machine-types (:|3600|))
	   (:source-category (:optional
			       (:basic "sys: sys; lhard"))))
  (:module i-prim ("sys: sys; iprim"
		   "sys: sys; istack")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module l-float ("sys: sys2; lfloat")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-float ("sys: i-sys; float")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module l-wired-console ("sys: l-sys; wired-console" "sys: l-sys; wired-screen")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module i-wired-console ("sys: i-sys; wired-console" "sys: i-sys; wired-screen")
	   ;;--- Do we want this for VLM?
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module aux-disk-save ("sys: storage; wired-user-disk")
	   (:machine-types (:|3600| :imach)) (:source-category :optional))
  (:module stack-wiring ("sys: storage; stack-wiring")
	   (:machine-types (:imach :vlm)) (:source-category :optional))
  (:module l-disk-driver ("sys: l-sys; disk-driver-smd"
			  "sys: l-sys; disk-driver-st506"
			  "sys: l-sys; disk-driver-esdi"
			  "sys: l-sys; disk-driver"
			  "sys: l-sys; obs-disk"
			  "sys: l-sys; nbs-disk"
			  "sys: l-sys; user-disk"
			  "sys: l-sys; user-disk-errors")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module ivory-disk-driver ("sys: storage; disk-driver"
			      "sys: storage; user-disk-driver"
			      "sys: storage; embedded-disk-driver")
	   (:machine-types (:IMach :VLM)) (:source-category :optional))
  (:module imach-disk-driver ("sys: i-sys; merlin-scsi-hardware"
			      "sys: storage; merlin-scsi-disk-driver"
			      "sys: storage; merlin-512-bps-scsi-disk-driver"
			      "sys: storage; merlin-esdi-disk-driver"
			      "sys: i-sys; domino-scsi-hardware"
			      "sys: storage; domino-scsi-disk-driver")
	   (:machine-types (:imach)) (:source-category :optional))
  (:module vlm-disk-driver ("sys: storage; vlm-disk-utilities")
		    (:machine-types (:VLM)) (:source-category :optional))
  (:module wired-esrt ("sys: storage; wired-esrt")
	   (:machine-types (:imach :|3600|)) (:source-category :optional))
  (:module l-nbs ("sys: l-sys; nbs-io-board"
		  "sys: l-sys; nbs-clock"
		  "sys: l-sys; nbs-ethernet-wired"
		  "sys: l-sys; nbs-ethernet")
	   (:machine-types (:|3600|)) (:source-category :optional))
  (:module l-console ("sys: l-sys; console") (:machine-types (:|3600|)))
  (:module i-console ("sys: i-sys; console") (:machine-types (:imach)))
  (:module v-console ("sys: i-sys; console-stubs") (:machine-types (:vlm)))
  (:module l-audio ("sys: l-sys; audio") (:machine-types (:|3600|)))
  (:module i-hardware-1 ("sys: i-sys; audio")
	   (:machine-types (:imach :vlm)))
  (:module i-hardware-2 ("sys: i-sys; i-clocks"
			 "sys: i-sys; 8032-driver")
	   (:machine-types (:imach)))
  (:module v-hardware-2 ("sys: i-sys; v-clock")
	   (:machine-types (:vlm)))
  (:module i-interrupts-base ("sys: i-sys; interrupts") (:machine-types (:imach :vlm)))
  (:module i-interrupts ("sys: i-sys; i-interrupts") (:machine-types (:imach)))
  (:module v-interrupts ("sys: i-sys; v-interrupts") (:machine-types (:vlm)))
  (:module l-logging ("sys: sys; logging") (:machine-types (:|3600|)))
  (:module l-auxsb ("sys: l-sys; auxsb") (:machine-types (:|3600|)))
  (:module l-fep-channel ("sys: io; fep-channel") (:machine-types (:|3600|)))
  (:module Domino-SCSI-script-compiler ("sys: i-sys; Domino-SCSI-script-compiler")
	   (:machine-types (:imach)) (:root-module nil) (:source-category :optional))
  (:module Domino-SCSI-script ("sys: i-sys; Domino-SCSI.script")
	   (:type :text) (:machine-types (:imach)) (:root-module nil)
	   (:source-category :optional))
  (:module-group l-main
   (:parallel
     "sys: sys; ldata"				;putting this in defs is not a good idea,
						;because loading it really screws things up
     "sys: sys2; ldefsel"
     "sys: sys; lcode"
     l-allocate i-allocate
     "sys: sys; allocate-common"
     l-cons i-cons
     "sys: sys; objects"
     "sys: sys; describe"
     "sys: sys; cold-load-stream"
     l-fepio i-fepio
     l-prim i-prim
     "sys: sys; larith"
     "sys: sys; division"
     "sys: sys2; lnumer"
     l-float i-float
     "sys: sys2; bignum"
     "sys: sys2; double"
     "sys: sys2; complex"
     "sys: sys2; rat"
     "sys: sys; eql-dispatch"
     l-logging
     l-auxsb
     "sys: sys; wired"
     l-wired-console i-wired-console
     "sys: storage; storage"
     aux-disk-save
     "sys: storage; user-storage"
     stack-wiring
     l-disk-driver
     (:serial ivory-disk-driver
	      (:parallel imach-disk-driver vlm-disk-driver))
     wired-esrt
     l-fep-channel
     "sys: io; lmini"
     l-console i-console v-console
     "sys: io; useful-streams"
     l-nbs
     i-interrupts-base i-interrupts v-interrupts
     #+Ivory-Rev-1 "sys: sys; extended-entry"
     l-audio
     i-hardware-1 i-hardware-2 v-hardware-2)
   (:source-category (:optional
		       (:basic "sys: sys2; ldefsel"
			       "sys: sys; cold-load-stream"
			       "sys: sys; describe"
			       "sys: io; useful-streams")))))

(defsubsystem embedding
    (:default-pathname "sys: embedding;"
     :pretty-name "Embedding"
     :machine-types (:imach :vlm)
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:serial "emb-buffer" "emb-queue" "emb-message-channel"))

(defsubsystem l-bin
    (:default-pathname "sys: l-bin;"
     :pretty-name "L-Bin"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module defs "defs")				;the cold loader uses this
  (:definitions defs (:parallel "load" "dump" "unbin")))

;; these files are all renamed with prefix "old-"
;(defsubsystem tables
;    (:default-pathname "sys: sys2;"
;     :distribute-sources t
;     :distribute-binaries nil
;     :source-category :optional)
;  (:definitions "table-defs"
;   (:definitions "table"
;    (:serial
;      (:parallel "table-flavors" "table-misc-flavors")
;      "table-cometh"))))

;; jrd's new table system
(defsubsystem tables
    (:default-pathname "sys: sys2;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:serial "table-defs" "tables" "table-hooks"))

(defsubsystem scheduler
    (:default-pathname "sys:scheduler;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:optional
			(:basic "sys: scheduler; scheduler-defs" "defs"
				"synchronization-forms"
				"process-priority-definition"
				"process-definition" "process" "process-utilities"
				"timer-defs"
				"lock-definitions" "locks" "monitor"
				"events"
				"prodef"
				"compatibility1"
				"forward-compatibility" "backward-compatibility")))
  (:serial
    "sys: scheduler; scheduler-defs"
    "tester-defs"
    (:parallel "defs" "meter-defs")
    "synchronization-forms"
    "process-priority-definition"
    "process-definition"
    "meters"
    "timer-defs"
    (:parallel "scheduler-queue" "process-priority")
    "process"
    "timer-hooks"
    "dispatcher"
    "lock-definitions"
    "locks"
    "monitor"
    "timer"
    "process-state"
    "process-utilities"
    "wait-functions"
    "init"
    "clock-functions"
    "scheduler"
    "events"
    (:serial
      "prodef"
      "compatibility1"
      "forward-compatibility"
      "backward-compatibility")
    "cometh"))

(defsubsystem netboot-stubs
    (:default-pathname "SYS: NETBOOT;"
     :machine-types (:vlm)
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:module files "i-netboot-stubs"))

(defsubsystem netboot
    (:default-pathname "SYS: NETBOOT;"
     :machine-types (:|3600| :imach)
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:module defs ("defs"))
  (:module global ("global")
	   (:uses-definitions-from defs))
  (:module interface ("console-support" "cold-load-stream" "meter-support")
	   (:uses-definitions-from defs))
  (:module utilities ("utilities") (:uses-definitions-from defs))
  (:module nbs-support ("nbs-support") (:machine-types (:|3600|)))
  (:module-group support (:parallel
			   "memory-support"
			   nbs-support
			   "net-support"
			   "disk-support"
			   "storage-support")
		 (:uses-definitions-from defs)
		 (:in-order-to :load (:load global interface utilities)))
  (:module netboot "netboot"
	   (:uses-definitions-from defs)
	   (:in-order-to :load (:load support))))

(defsubsystem common-lisp
    (:default-pathname "sys: clcp;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:serial
    "sequence-macros"
    (:parallel 
      "permanent-links" "functions" "numerics" "listfns" "seqfns"
      "arrayfns" "charfns" "more-functions" "stringfns" "error" "iofns"
      "read-print"
      (:serial "type-infra" "type-supra" "l-types" "type-supra2" "type-supra3"))
    "ansi-syntax"
    "sys: clos; early-defstruct"
    "sys: clos; holders"
    "ansi-loop" "extended-loop"
    "sys: clos; mapping-tables"
    ))
  
(defsubsystem lisp+c-syntax
    (:default-pathname "sys: embedding; rpc;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:serial "lisp+c-syntax"))

(defsubsystem sct
    (:default-pathname "sys: sct;"
     :pretty-name "SCT"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:serial "defs"
	   "parse"
	   "system-commands"
	   "module-types"
	   (:parallel "environments" "make-plan"
		      "journals" "patch" "system-info" "test-cases")
	   "distribution-support"
	   "tools"
	   "last"
	   ))

(defsubsystem garbage-collector
    (:default-pathname "sys: gc;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:module defs ((system-internals l-defs))
	   (:root-module nil))
  (:module gc-defs ("gc-defs")
	   (:source-category :basic))
  (:module l-defs ("lgc") (:machine-types (:|3600|)))
  (:module i-defs ("igc" "igc-cold") (:machine-types (:imach :vlm)))
  (:module machine-independent ("gc")
	   (:in-order-to :compile (:load defs gc-defs l-defs i-defs))
	   (:in-order-to :load (:load gc-defs l-defs i-defs)))
  (:module other ("sys:gc;full-gc" "sys:gc;reorder-memory" "sys:gc;debug-info")
	   (:in-order-to :compile (:load defs gc-defs l-defs i-defs machine-independent))
	   (:in-order-to :load (:load gc-defs l-defs i-defs machine-independent)))
  (:module permanent-objects ("sys:sys2;gc-permanent-objects") (:machine-types (:|3600|))
	   (:in-order-to :compile (:load other))
	   (:in-order-to :load (:load other)))
  (:module in-place ("gc-in-place")))

(defsubsystem flavor
    (:default-pathname "sys: flavor;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:basic
		       (:optional "bootstrap")))
  (:serial "global" "defflavor" "defgeneric" "defmethod"
	   (:parallel "compose" "combine" "handle" "other")
	   (:parallel "ctypes" "make")
	   (:parallel "vanilla" "bootstrap" "error")))

(defsubsystem error-system
    (:default-pathname "sys: debugger;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module error-table-compiler
	   ("error-table-compiler" "error-table-expanders")
	   (:machine-types (:imach :vlm))
	   (:root-module nil))
  (:module trap-dispatch-table ("sys: i-sys; trap-dispatch-table")
	   (:type :lisp-load-only)
	   (:machine-types (:imach :vlm)))
  (:module l-trap ("ltrap") (:machine-types (:|3600|)))
  (:module i-trap ("itrap-defs" "itrap-dispatch" "itrap") (:machine-types (:imach :vlm)))
  (:module-group trap (:serial (:parallel l-trap i-trap) "trap"))
  (:module l-cometh ("lcometh") (:machine-types (:|3600|)))
  (:module i-cometh ("icometh") (:machine-types (:imach :vlm)))
  (:serial "error-system-defs"
	   (:parallel "handlers" "condition-support")
	   "frame-support"
	   "mini-debugger"
	   "condition"
	   "syscond"
	   trap
	   l-cometh i-cometh
	   "cometh"
	   "ansi-conditions"))

(defsubsystem network
    (:default-pathname "sys: network;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:basic
			(:optional "slap-net")))
  (:module defs ("networks" "errors"))
  (:module namespace-defs ("namespace-defs")
	   (:in-order-to (:compile :load) (:load defs)))
  (:module ip-domains-defs ("domain-defs")
	   (:in-order-to (:compile :load) (:load namespace-defs)))
  (:module namespace ("servers" "class-definitions" "namespaces" "namespace-access-paths"
		      "namespace-parse" "namespace-user" "namespace-server" "namespace-local"
		      "host" "file-systems" "services" "protocols"
		      "distribution")
	   (:in-order-to (:compile :load) (:load namespace-defs)))
  (:module ip-domains ("domain-chaos-access-paths" "domains")
	   (:in-order-to (:compile :load) (:load ip-domains-defs)))
  (:module l-driver ("lmini-interfaces" "linterfaces")
	   (:machine-types (:|3600|)))
  (:module i-basic-driver ("ivory-ethernet-driver")
	   (:machine-types (:imach :vlm)))
  (:module i-82586-driver ("82586-ethernet-driver")
	   (:machine-types (:imach)))
  (:module i-embedded-driver ("emb-ethernet-driver")
	   (:machine-types (:imach :vlm)))
  (:module i-basic-interfaces ("i-basic-interfaces")
	   (:machine-types (:imach :vlm)))
  (:module imach-interfaces ("imach-interfaces")
	   (:machine-types (:imach)))
  (:module vlm-interfaces ("vlm-interfaces")
	   (:machine-types (:vlm)))
  (:module-group i-driver (:serial
			    i-basic-driver
			    i-82586-driver i-embedded-driver
			    i-basic-interfaces
			    imach-interfaces vlm-interfaces)
		 (:machine-types (:imach :vlm)))
  (:module-group stuff (:serial "network-fsm"
				"pkts"
				"interfaces"
				l-driver i-driver)
		 (:in-order-to (:compile :load) (:load namespace)))
  (:module internet-networks "internet"
	   (:in-order-to (:compile :load) (:load namespace)))
  (:module dna-networks "dna")
  (:module token-stream ("token-stream" "transaction-token-list")
	   (:in-order-to (:compile :load) (:load namespace)))
  (:module chaos chaos
	   (:type :system)
	   (:in-order-to (:compile :load) (:load defs)))
  (:module slap ("slap-net")
	   (:in-order-to (:compile :load) (:load namespace))))

(defsubsystem chaos
    (:default-pathname "sys: network;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:serial "chaos-defs" "chaos-error"
	   (:parallel "chaos-ncp" "chaos-user" "chaos-servers" "chaos-debug" "chaos-perf")))

(defsubsystem language-tools
    (:default-pathname "sys:clcp;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module examples "mapforms-examples" (:root-module nil))
  (:module l-compile-only ("sys: l-sys; compile-only") (:machine-types (:|3600|)))
  (:module i-compile-only ("sys: i-sys; compile-only") (:machine-types (:imach :vlm)))
  (:serial
    "sys; lisp-database-cold" "sys; lisp-database"
    "mapforms" "annotate" "subst" "setf" "setf-install" "lambda-list"
    l-compile-only i-compile-only))

(defsubsystem lisp-compiler
    (:default-pathname "sys: compiler;"
     :bug-reports (:name "Lisp Compiler" :mailing-list "Bug-Lisp-Compiler" :documentation
			 "Report problems with the Lisp compiler")
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:basic
			(:optional
			  "phase-2" "phase-3" "debug")))
  (:module l-stuff l-lisp-compiler (:type :system) (:machine-types (:|3600|)))
  (:module i-stuff i-lisp-compiler (:type :system) (:machine-types (:imach :vlm)))
  (:serial
    "comdefs"
    (:parallel
      "comfile"
      (:serial "cwarns-flavors" "cwarns")
      "inner"
      (:serial
	(:parallel "defs" "macros")
	(:parallel "byte-lap" "emit")
	"compiler-protocol"
	(:parallel
	  "phase-1" "phase-1a" "optimize" "transformers" "style-checker"
	  "phase-2" "phase-3" "phase-3a"
	  "compile")))
    l-stuff i-stuff
    "cometh"))

(defsubsystem l-architecture
    (:default-pathname "sys: l-compiler;"
     :machine-types (:|3600|)
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:module sysdef ("sys: l-sys; sysdef" "sys: l-sys; sysdf1" "sys: l-sys; opdef")
	   (:package system))
  (:serial
    (:parallel "l-sysdef-support" "l-instruction-set")
    sysdef))

(defsubsystem l-lisp-compiler
    (:default-pathname "sys: l-compiler;"
     :machine-types (:|3600|)
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:basic
			(:optional "l-phase-4" "l-debug")))
  (:module architecture l-architecture (:type :system))
  (:serial
    architecture
    "l-inner" "l-macros" "l-defs" "l-compiler-flavors" "l-assemble" "l-disassemble" 
    "l-phase-1" "l-transformers" "l-phase-4" "l-compilers" "l-debug"))

(defsubsystem i-architecture
    (:default-pathname "sys: i-compiler;"
     :machine-types (:imach :vlm)
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:serial
    (:parallel "i-sysdef-support" "i-instruction-set" "sys:i-sys;opdef")))

(defsubsystem i-lisp-compiler
    (:default-pathname "sys: i-compiler;"
     :machine-types (:imach :vlm)
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:basic
			(:optional "i-back-end")))
  (:module architecture i-architecture (:type :system))
  (:serial "i-inner" "i-defs" "i-optimizers" "i-compiler-flavors" "i-front-end"
	   "i-transformers" "i-phase-3" "i-back-end" "disassemble" "i-compilers"))

(defsubsystem i-linker
    (:default-pathname "sys: i-sys;"
     :machine-types (:imach :vlm)
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:parallel "linker"))

(defsubsystem bitblt
    (:default-pathname "sys: window;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module l-bitblt ("lbitblt") (:machine-types (:|3600|)))
  (:module i-bitblt ("ibitblt-loops" "ibitblt") (:machine-types (:imach :vlm))))

(defsubsystem fonts
    (:default-pathname "sys: io1;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  ;; Fonts are distributed via pseudosystem, er, I mean fonts are distributed
  ;; via sct:define-distribution-system.  Be absolutely sure not to distribute
  ;; them as a consequence of being in this defsubsystem.
  (:module fonts-which-are-not-mappings-of-character-styles
   ("sys: fonts; tv; einy8"
    "sys: fonts; tv; 40vr"
    "sys: fonts; tv; vt100")
   (:type :font)
   (:distribute-sources nil))
  (:serial
    "bfd-defs" "bfd" "lfont-defs" "lfont"
    fonts-which-are-not-mappings-of-character-styles)) 

(defsubsystem file-system
    (:pretty-name "FS"
     :short-name "FS"
     :default-pathname "sys: io;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module basic-pathnames ("pathnm" "wild"))
  (:module host-pathnames ("pathst" "lmfs; lmfs-pathnames" "lmfs; fs-user"))
  (:module fep-pathnames "lmfs; fep-pathnames")
  (:module logical-pathnames ("logpath" "syshost"))
  (:module file-io ("open" "file-access-paths"))
  (:module macintosh-pathnames "sys:embedding;macivory;file-system;pathnames"
	   (:uses-definitions-from basic-pathnames host-pathnames file-io))
  (:module extended-character-io
	   ("string-defs" "indirect-stream" "string-load" "string-dump"))
  (:module conditions "fscond")
  (:module combined-methods ("pathname-cometh" "host-cometh")
	   (:uses-definitions-from basic-pathnames host-pathnames file-io))
  (:module user-common "file-user-util")	;utilities
  (:module chaos-file-io ("qcond" "qfile" "fep-qfile"))
  (:module new-file ("nfile-user" "fep-nfile"))
  (:module iso9660-pathnames ("iso9660-pathnames")
	   (:uses-definitions-from basic-pathnames host-pathnames file-io new-file)))

(defsubsystem bin
    (:default-pathname "sys: bin;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:definitions "string-defs"
		(:parallel "string-dump" "string-load")))

;; There are no compile-dependencies in this system, because if things have changed
;; enough for them to help you, your compiler environment would be completely broken
;; by naively loading the new files.  So you have to manually load them into a special
;; environment.
(defsubsystem time
    (:default-pathname "sys: io1;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:serial "time" "timpar" "sys: sys2; timer-queue"))

(defsubsystem tv
    (:default-pathname "sys: window;"
     :pretty-name "TV"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module l-draw "ldraw" (:machine-types (:|3600|)))
  (:module i-draw "idraw" (:machine-types (:imach :vlm)))
  (:module sync-programs "sync-programs" (:machine-types (:|3600|)))
  (:serial (:parallel "tvdefs" "ltvdef")
	   i-draw
	   (:parallel "io-buffers"
		      "extended-alu"
		      l-draw)
	   (:parallel "screen" "l-screen-draw" "main-screen" "screen-init" "scrman"
		      "sheet" "blinkers" "shwarm" "baswin" "mouse"
		      (:serial "dynamic-windows; graphics-patterns"
			       (:parallel "dynamic-windows; dynamic-window-flavors"
					  "dynamic-windows; graphics-flavors"
					  "dynamic-windows; dynamic-window-mixins")
			       (:parallel "wholin" "basstr")
			       "dynamic-windows; graphics-generics"
			       "dynamic-windows; raster-graphics-mixin"
			       "graphics")
		      "menu")
	   "cometh"
	   (:parallel "sysmen" "scred" "typwin" "frame" 
		      "managed-map" "bitmap-screen" "remote-screen"
		      "color-sync-programs" sync-programs)))

(defsubsystem monochrome-sync-programs
    (:default-pathname "sys: l-sys;"
     :machine-types (:|3600|)
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional
     :default-module-type :binary-data)
  (:parallel
    "3620-100mhz-io6.sync" "3620-100mhz-slb.sync" "3620-80mhz-io6.sync" "3620-80mhz-slb.sync"
    "moniterm-io2.sync" "moniterm-io6.sync" "moniterm-slb.sync"
    "philips-io2.sync" "philips-io6.sync" "philips-slb.sync"))

(defsubsystem ivory-color-support-parts
    (:default-pathname "sys:window;ivory-color;"
     :distribute-sources t
     :distribute-binaries nil)  
  (:module ivory-functions 
   ("color-bitblt-functions")
   (:machine-types (:imach :vlm)))
  (:serial
   "repack"
   "icolor-bitblt"
   ivory-functions
   ))

(defsubsystem presentation-substrate
    (:default-pathname "sys: dynamic-windows;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:module definitions ("good-tables" "substrate-definitions"))
  (:module presentation-fspec ("type-descriptor"
			       "type-methods"
			       "type-walk"
			       "mouse-handler-lookup"
			       "mouse-handler-test"
			       "type-keys")
	   (:in-order-to (:compile :load) (:load definitions)))
  (:module history ("sys: io; history-inner" "history-substrate")
	   (:in-order-to (:compile :load) (:load presentation-fspec))
	   (:source-category :basic))
  (:module presentation-macros ("restructure-arglist"
				"define-type"
				"define-handler")
	   (:in-order-to (:compile :load) (:load presentation-fspec)))
  (:module presentation-types
	   ("type-primitives"
	    "accept-substrate"
	    "core-types" "number-types" "sequence-types")
	   (:uses-definitions-from presentation-macros)
	   (:source-category (:optional
			       (:basic "core-types" "number-types" "sequence-types"))))
  (:module completion
	   ("completion")
	   (:in-order-to (:compile :load) (:load presentation-types))
	   (:source-category :basic))
  (:module standard-presentation-types
	   ("presentation-types"
	    "sys: sys2; character-style-presentations")
	   (:source-category :basic)
	   (:uses-definitions-from presentation-macros))
  (:module dynamic-input ("dynamic-input" "basic-handlers")
	   (:in-order-to (:compile :load) (:load standard-presentation-types))))

(defsubsystem cp
    (:default-pathname "sys: cp;"
     :pretty-name "CP"
     :bug-reports (:name "Command Processor" :mailing-list "Bug-CP" :documentation
			 "Report problems in the Command Processor")
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:basic))
  (:module defs "defs")
  (:module old-name-compatibility "old-symbol-links"
	   (:in-order-to (:compile :load) (:load defs)))
  (:module comtab "comtab"
	   (:in-order-to (:compile :load) (:load defs)))
  (:module-group command-processor
		 (:parallel "command-processor" "read-accelerated-command"
			    "substrate-commands")
	   (:in-order-to (:compile :load) (:load comtab))))

(defsubsystem dynamic-windows
    (:default-pathname "sys: dynamic-windows;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:optional
			(:basic
			  "sys: window; activities"
			  "sys: window; colors")))
  (:module main ("formatted-output"
		 "formatted-output-cold"
		 "redisplay"
		 "box-arithmetic"
		 "displayed-presentation"
		 "dynamic-window"
		 "define-viewport-graphics-operation"
		 "dynamic-window-combinations"
		 "grapher"
		 "sys: window; colors"
		 "binary-graphics"
		 "sys: window; activities"))
  (:module cometh ("cometh")
	   (:in-order-to (:compile :load) (:load main)))
  (:module tests ("graphics-tests"
		  "formatted-output-tests")
	   (:root-module nil)
	   (:source-category :basic)))

(defsubsystem dynamic-window-clients
    (:default-pathname "sys: dynamic-windows;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  ;; For dynamic parts of things that get loaded as part of the core
  ;; system, before dynamic-windows
  (:module clients ;; should this live in sys:dynamic-windows?
		   ;; or should this module not belong to dynamic-windows?
		   ("sys: window; background-stream")
		   (:source-category :basic))
  (:module-group framework
		 (:serial "program-framework-panes"
			  "define-program-framework"
			  "accept-values"))
  (:module program-clients
		   ("sys: io1; fquery"
		    "sys:dynamic-windows;reorder-sequence")
	   (:in-order-to (:compile :load) (:load framework))
	   (:source-category :basic)))

(defsubsystem debugger
    (:default-pathname "sys: debugger;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:module l-support "lsupport" (:machine-types (:|3600|)))
  (:module i-support "isupport" (:machine-types (:imach :vlm)))
  (:serial "defs"
           "presentation-defs"
	   "language-generics"
	   "function-trap"
	   l-support i-support
	   "lisp-support"
	   "debugger-support"
	   "debugger"))

(defsubsystem fep-fs
    (:default-pathname "sys: l-sys;"
     :pretty-name "Fep-FS"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional
     :machine-types (:|3600| :imach))
  (:module deffepblock "deffepblock" (:machine-types (:|3600| :imach :vlm))
				     (:source-category :basic))
  (:module stream "fep-stream" (:source-category :basic))
  (:module access-paths "fep-access-paths")
  (:module-group commands (:serial "sys: l-sys; band")
		 (:source-category :basic))
  (:module disk-save ("sys: l-sys; disk-save") (:machine-types (:|3600| :imach :vlm)))
  (:serial
    deffepblock
    stream
    (:parallel
      (:serial access-paths)
      (:serial
	"sys: netboot; world-substrate"
	disk-save
	commands))))

(defsubsystem system-commands
    (:default-pathname "sys: cp;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category (:optional
			(:basic "sys: sys; configuration"
				"sys: l-sys; configuration"
				"sys: i-sys; configuration"
				"sys: i-sys; i-configuration"
				"sys: i-sys; v-configuration")))
  (:module l-config "sys: l-sys; configuration" (:machine-types (:|3600|)))
  (:module i-config-common "sys: i-sys; configuration" (:machine-types (:imach :vlm)))
  (:module i-config "sys: i-sys; i-configuration" (:machine-types (:imach)))
  (:module v-config "sys: i-sys; v-configuration" (:machine-types (:vlm)))
  (:module fep-commands ("sys: l-sys; fep-salvage" "sys: l-sys; fep-fix-blocks"
			 "fep-file-commands")
	   (:machine-types (:|3600| :imach)))
  (:parallel
    "sys: sys2; herald"
    "utility-commands" "file-commands"
    "info-commands" "sct-commands" "more-commands"
    ;; This is in CP because of load dependencies on the CP
    "sys: window; set-options-commands"
    "sys: sys2; gc-control-panel"
    "sys: window; notification"
    fep-commands
    (:serial "sys: sys; configuration"
	     (:parallel l-config
			(:serial i-config-common
				 (:parallel i-config v-config))))
    "cp-on"
    "sys: sys2; demonstration"
    (:serial "sys: network; namespace-validation"
	     "sys: network; namespace-presentation-types"
	     "sys: network; site-commands")))

(defsubsystem gprint
    (:default-pathname "sys: gprint;"
     :pretty-name "GPrint"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :basic)
  (:serial "defs" "parser" "circular" (:parallel "gprint" "formats")))



;; Files are added to this system by FS:MAKE-LOGICAL-PATHNAME-HOST.
;; This allows new versions of the files to be loaded when loading patches
;; and enables all the files to be reloaded when moving to a new site.
(defsystem logical-pathnames-translation-files
    (:default-module-type :logical-translations
     :default-package fs
     :default-pathname "sys: site;"
     :journal-directory "sys: site;"
     :maintain-journals nil
     :patchable nil
     :advertised-in nil
     :initial-status :released)
  (:module logical-pathnames-translation-files "sys.translations"))

;; SCT:LOAD-PATCHES uses this to order patch-loading
(defsystem system-patch-loading
    (:default-module-type :system
     :default-pathname "sys: sys;"
     :maintain-journals nil
     :patchable nil
     :advertised-in nil
     :initial-status :released)
  (:module system-patch-loading))
