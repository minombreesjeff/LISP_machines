;;; -*- Package:SYSTEM-INTERNALS; Mode:LISP; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; DESCRIBE functions
;;; This file is in the cold load.

;;This function needs to be careful not to try to print a clobbered extended number.
;;This is to make life easier when the bignum routines bomb into the debugger.
;; The third argument used to be FASTP.
#+3600
(DEFUN PRINT-EXTENDED-NUMBER (EXP STREAM IGNORE I-PRINDEPTH WHICH-OPERATIONS)
  (DECLARE (IGNORE I-PRINDEPTH WHICH-OPERATIONS))
  (LET ((NUMBER (FOLLOW-STRUCTURE-FORWARDING EXP)))
    (IF (= (%P-DATA-TYPE NUMBER) DTP-HEADER-I)
	(SELECT (%P-LDB %%HEADER-SUBTYPE-FIELD NUMBER)
	  (%HEADER-TYPE-BIGNUM
	   (PRINT-FIXNUM-OR-BIGNUM NUMBER STREAM))
	  (%HEADER-TYPE-RATIONAL
	   (PRINT-RATIONAL NUMBER STREAM))
	  (%HEADER-TYPE-COMPLEX
	   (PRINT-COMPLEX NUMBER STREAM))
	  (%HEADER-TYPE-DOUBLE
	   (PRINT-FLONUM NUMBER STREAM))
	  (OTHERWISE
	   (PRINTING-RANDOM-OBJECT (EXP STREAM)
	     (PRINT-RAW-STRING (STRING (DATA-TYPE EXP)) STREAM))))
	(PRINTING-RANDOM-OBJECT (EXP STREAM)
	  (PRINT-RAW-STRING (STRING (DATA-TYPE EXP)) STREAM)))))

;; Used by old version of PRINTING-RANDOM-OBJECT.
(DEFUN PRINT-A-RANDOM-OBJECT (OBJECT STREAM &KEY TYPEP %POINTER CONTINUATION)
  (DECLARE (SYS:DOWNWARD-FUNARG *))
  (COND (PRINT-READABLY
	 (PRINT-NOT-READABLE OBJECT))
	(T
	 (PRINT-RAW-STRING (PTTBL-OPEN-RANDOM READTABLE) STREAM)
	 (WHEN TYPEP
	   (FORMAT STREAM "~S" (CL:TYPE-OF OBJECT)))
	 (WHEN (AND TYPEP CONTINUATION)
	   (SEND STREAM :TYO (PTTBL-SPACE READTABLE)))
	 (WHEN CONTINUATION
	   (FUNCALL CONTINUATION STREAM))
	 (WHEN %POINTER
	   (FORMAT STREAM "~A~O" (PTTBL-SPACE READTABLE) (%POINTER OBJECT)))
	 (PRINT-RAW-STRING (PTTBL-CLOSE-RANDOM READTABLE) STREAM)))
  OBJECT)

#+IMach
;; Present the address as a two's complement fixnum, but print it as an unsigned number.
(DEFUN PRINT-ADDRESS (ADDRESS &OPTIONAL (STREAM STANDARD-OUTPUT))
  (IF (FIXNUMP ADDRESS)
      (DW::WITH-OUTPUT-AS-PRESENTATION (:STREAM STREAM :OBJECT ADDRESS :TYPE 'EXPRESSION
					:ALLOW-SENSITIVE-INFERIORS NIL)
	;; This is open-coded so it works in the cold load.
	(LOOP WITH PRINTED = NIL
	      FOR SHIFT FROM -30. TO 0 BY 3
	      AS CHAR = (LOGAND (LSH ADDRESS SHIFT) 7)
	      WHEN (OR PRINTED (NOT (ZEROP CHAR)) (ZEROP SHIFT))
		DO (SEND STREAM :TYO (CODE-CHAR (+ (CHAR-CODE #/0) CHAR)))
		   (SETQ PRINTED T)))
    ;; For 3600 compatibility, degrade gracefully with bad input.
    (LET ((BASE 8))
      (PRINC ADDRESS STREAM)))
  ADDRESS)

#+3600
(DEFSUBST PRINT-ADDRESS (ADDRESS STREAM)
  (LET ((BASE 8))
    (PRINC ADDRESS STREAM)))

(FORMAT:DEFFORMAT ADDRESS (:ONE-ARG) (ADDRESS IGNORE)
  (PRINT-ADDRESS ADDRESS FORMAT:*FORMAT-OUTPUT*))

(DEFUN PRINTING-RANDOM-OBJECT-INTERNAL (OBJECT STREAM %POINTER TYPEP CONTINUATION)
  (DECLARE (SYS:DOWNWARD-FUNARG CONTINUATION))
  (COND (PRINT-READABLY
	 (PRINT-NOT-READABLE OBJECT))
	(T
	 (PRINT-RAW-STRING (PTTBL-OPEN-RANDOM READTABLE) STREAM)
	 (WHEN TYPEP
	   (PRIN1 (CL:TYPE-OF OBJECT) STREAM))
	 (WHEN (AND TYPEP CONTINUATION)
	   (SEND STREAM :TYO (PTTBL-SPACE READTABLE)))
	 (WHEN CONTINUATION
	   (FUNCALL CONTINUATION))
	 (WHEN %POINTER
	   (SEND STREAM :TYO (PTTBL-SPACE READTABLE))
	   (PRINT-ADDRESS (%POINTER OBJECT) STREAM))
	 (PRINT-RAW-STRING (PTTBL-CLOSE-RANDOM READTABLE) STREAM)))
  OBJECT)


(DEFVAR *DESCRIBE-NO-COMPLAINTS* NIL)

;;; Describe anything
(DEFUN DESCRIBE (ANYTHING &OPTIONAL *DESCRIBE-NO-COMPLAINTS*)
  (CLOS:DESCRIBE-OBJECT ANYTHING STANDARD-OUTPUT)
  ANYTHING)

(DEFUN FUTURE-COMMON-LISP:DESCRIBE (OBJECT &OPTIONAL STREAM)
  (CLI::DEFAULT-WRITE-STREAM STREAM)
  (CLOS:DESCRIBE-OBJECT OBJECT STREAM)
  (VALUES))

(DEFUN DEFAULT-DESCRIBE (ANYTHING STANDARD-OUTPUT)
  (TYPECASE ANYTHING
    (:SYMBOL
     (DESCRIBE-SYMBOL ANYTHING))
    (:LIST
     (DESCRIBE-LIST ANYTHING))
    (:STACK-GROUP
     (DESCRIBE-STACK-GROUP ANYTHING))
    (:ARRAY
     (LET ((NSS (NAMED-STRUCTURE-P ANYTHING)))
       (COND ((AND NSS (GET NSS 'NAMED-STRUCTURE-INVOKE)
		   (MEMQ ':DESCRIBE (NAMED-STRUCTURE-INVOKE ANYTHING ':WHICH-OPERATIONS)))
	      (NAMED-STRUCTURE-INVOKE ANYTHING ':DESCRIBE)
	      (DESCRIBE-ARRAY ANYTHING T))
	     ((AND NSS (GET NSS 'DEFSTRUCT-DESCRIPTION))
	      (DESCRIBE-DEFSTRUCT ANYTHING)
	      (DESCRIBE-ARRAY ANYTHING T))
	     (T
	      (DESCRIBE-ARRAY ANYTHING)))))
    (:INSTANCE
     (SEND ANYTHING ':DESCRIBE))
    (:CLOSURE
     (DESCRIBE-CLOSURE ANYTHING))
    (:LEXICAL-CLOSURE
     (DESCRIBE-LEXICAL-CLOSURE ANYTHING))
    (:COMPILED-FUNCTION
     (DESCRIBE-COMPILED-FUNCTION ANYTHING))
    (:GENERIC-FUNCTION
     (DESCRIBE-GENERIC-FUNCTION ANYTHING))
    (:LOCATIVE
     (DESCRIBE-LOCATIVE ANYTHING))
    (:BIGNUM
     (DESCRIBE-BIGNUM ANYTHING))
    (:FIX
     (DESCRIBE-INTEGER ANYTHING))
    (:RATIONAL
     (DESCRIBE-RATIO ANYTHING))
    (:SINGLE-FLOAT
     (DESCRIBE-FLONUM ANYTHING))
    (:DOUBLE-FLOAT
     (DESCRIBE-DOUBLE ANYTHING))
    (:COMPLEX (DESCRIBE-COMPLEX ANYTHING))
    (:CHARACTER (DESCRIBE-CHARACTER ANYTHING))
    (OTHERWISE
      (SELECT (%DATA-TYPE ANYTHING)
	((DTP-EVEN-PC DTP-ODD-PC)
	 (DESCRIBE-PC ANYTHING))
	(OTHERWISE
	 (LET ((LAST-DITCH-ATTEMPT (GET (DATA-TYPE ANYTHING) 'DESCRIBE)))
	   (COND (LAST-DITCH-ATTEMPT (FUNCALL LAST-DITCH-ATTEMPT ANYTHING))
		 (*DESCRIBE-NO-COMPLAINTS*)
		 (T (FORMAT T "~%I don't know how to describe ~S" ANYTHING))))))))
  (FUNCALL STANDARD-OUTPUT ':FRESH-LINE)
  ANYTHING)

(DEFUN DESCRIBE-1 (THING)
  (OR (NULL THING)
      (NUMBERP THING)
      (SYMBOLP THING)
      (STRINGP THING)
      (WITH-INDENTATION (STANDARD-OUTPUT 4)
	(DESCRIBE THING T))))

(DEFUN DESCRIBE-SYMBOL (SYM)
  (COND ((BOUNDP SYM)
	 (LET ((PRINLEVEL 2) (PRINLENGTH 3))
	   (FORMAT T "~%The value of ~S is ~S" SYM (SYMEVAL SYM)))
	 (DESCRIBE-1 (SYMEVAL SYM))))
  (COND ((FBOUNDP SYM)
	 (LET ((PRINLEVEL 2) (PRINLENGTH 3))
	   (FORMAT T "~%~S is the function ~S: ~S"
		   SYM (FSYMEVAL SYM) (ARGLIST SYM)))
	 (DESCRIBE-1 (FSYMEVAL SYM))))
  (LET ((P (SYMBOL-PACKAGE SYM)))
    (COND ((NULL P)
	   (FORMAT T "~%~S is not in any package." SYM))
	  (T
	   (FORMAT T "~%~S is in the ~A package." SYM P))))
  (DO ((PL (PLIST SYM) (CDDR PL))
       (PRINLEVEL 2)
       (PRINLENGTH 3))
      ((NULL PL))
    (FORMAT T "~%~S has property ~S: ~S" SYM (CAR PL) (CADR PL))
    (DESCRIBE-1 (CADR PL)))
  (AND (MEMQ SYM AREA-LIST)
       (DESCRIBE-AREA (SYMEVAL SYM)))
  NIL)

(DEFUN DESCRIBE-INTEGER (N &OPTIONAL NAME)
  (FORMAT T "~&~:[~R~;~:*~A~*~] is an ~:[even~;odd~] ~@.~:[  ~
		~<~%~:;It is ~1@*~O octal, ~1@*~D decimal, and ~1@*~16R hexadecimal.~>~]"
	  NAME N (ODDP N) (TYPEP N) (< N 10.)))

(DEFUN DESCRIBE-RATIO (R)
  (FORMAT T "~&~S is a ratio." R)
  (WITH-INDENTATION (STANDARD-OUTPUT 4)
    (DESCRIBE-INTEGER (NUMERATOR R) "The numerator")
    (DESCRIBE-INTEGER (DENOMINATOR R) "The denominator")))

(DEFUN DESCRIBE-COMPLEX (X)
  (WHEN (COMPLEXP X)
    (FORMAT T "~%~S is a complex number.~%  " X)
    (LET ((REAL (REALPART X)))
      (FORMAT T "~%Its real part is ~s:" REAL)
      (DESCRIBE REAL))
    (LET ((IMAG (IMAGPART X)))
      (FORMAT T "~%Its imaginary part is ~s:" IMAG)
      (DESCRIBE IMAG))))

(DEFUN DESCRIBE-CHARACTER (X)
  (WHEN (TYPEP X :CHARACTER)
    (MULTIPLE-VALUE-BIND (CHAR-SET INDEX)
	(CONDITION-CASE (.ERROR.)
	    (CHAR-CHAR-SET-AND-INDEX X)
	  (ERROR .ERROR.))
      (FORMAT T "~&~S is a character with bits #b~B, style ~D, and code ~D.~@
		 ~:[The character set is invalid: ~*~A~;~
		 This is offset ~D in character set ~A.~]"
	      X (CHAR-BITS X)
	      (CONDITION-CASE (.ERROR.)
		  (CHAR-STYLE X)
		(ERROR .ERROR.))
	      (CHAR-CODE X)
	      INDEX
	      INDEX CHAR-SET))))

(DEFUN DESCRIBE-LIST (L)
  (FORMAT T "~%~S is a list" L))

(DEFUN DESCRIBE-DEFSTRUCT (X &OPTIONAL DEFSTRUCT-TYPE &AUX DESCRIPTION)
  (LET ((SCL:*PRINT-STRUCTURE-CONTENTS* NIL))
    (OR (SETQ DESCRIPTION (GET (OR DEFSTRUCT-TYPE
				   (AND (ARRAYP X) (NAMED-STRUCTURE-SYMBOL X))
				   (AND (LISTP X) (SYMBOLP (CAR X)) (CAR X)))
			       'DEFSTRUCT-DESCRIPTION))
	(FERROR "~S is not a known type of structure." X))
    (FORMAT T "~%~S is a ~S~%" X (DEFSTRUCT-DESCRIPTION-NAME DESCRIPTION)))
  (LOOP WITH INDENTATION = 30.
	WITH LIST* = (EQ (DEFSTRUCT-DESCRIPTION-TYPE DESCRIPTION) :LIST*)
	WITH LAST-SLOT = (1- (DEFSTRUCT-DESCRIPTION-SIZE DESCRIPTION))
	WITH NON-Q-ARRAY-P = (AND (ARRAYP X)
				  #+3600 (CDR (ASSQ (ARRAY-TYPE X) ARRAY-BITS-PER-ELEMENT))
				  #+IMACH ( (ARRAY-ELEMENT-TYPE-FIELD X)
					     ARRAY-ELEMENT-TYPE-OBJECT))
	FOR (NAME . SLOT-DESCRIPTION) IN (DEFSTRUCT-DESCRIPTION-SLOT-ALIST DESCRIPTION)
	DOING
    (LET* ((FORM `(,(DEFSTRUCT-SLOT-DESCRIPTION-REF-MACRO-NAME SLOT-DESCRIPTION) ',X)))
      (IF (OR NON-Q-ARRAY-P
	      (CL:GETF (DEFSTRUCT-SLOT-DESCRIPTION-PROPERTY-ALIST SLOT-DESCRIPTION) :READ-ONLY)
	      (DEFSTRUCT-SLOT-DESCRIPTION-PPSS SLOT-DESCRIPTION))
	  (PRESENT FORM `((DBG:NAMED-FORM-SLOT) :SYMBOL ,NAME
						:STRUCTURE ,X
						:INDENTATION ,INDENTATION))
	(IF (AND LIST* (EQ LAST-SLOT (DEFSTRUCT-SLOT-DESCRIPTION-NUMBER SLOT-DESCRIPTION)))
	    (LET ((DBG:*PRINTING-MONITOR-MESSAGE* T))
	      (FORMAT T "  ~S:  ~VT" NAME INDENTATION)
	      (PRESENT (EVAL FORM) 'SYS:FORM))
	  (PRESENT (EVAL `(LOCF ,FORM)) `((DBG:NAMED-LOCATIVE-SLOT)
					  :SYMBOL ,NAME
					  :STRUCTURE ,X
					  :INDENTATION ,INDENTATION)))))
    (TERPRI))
  X)

(DEFUN DESCRIBE-LOCATIVE (X &AUX NO-HEADER AREA)
  (MULTIPLE-VALUE-BIND (OBJECT HOW)
      (COMPILER:DISASSEMBLE-DECODE-LOCATIVE X)
    (SELECTQ HOW
      (:VARIABLE (FORMAT T "~%~S is a locative pointer to the value cell of ~S"
			 X OBJECT))
      (:FUNCTION (FORMAT T "~%~S is a locative pointer to the function definition cell of ~S"
			 X OBJECT))
      (OTHERWISE (SETQ NO-HEADER T)))
    (COND ((SETQ AREA (%AREA-NUMBER X))
	   (FORMAT T (IF NO-HEADER "~%~S is a locative pointer into area ~S"
			 "~%It points into area ~*~S")
		   X (AREA-NAME AREA))
	   (COND ((LDB-TEST %%REGION-STACK (REGION-BITS (%REGION-NUMBER X)))
		  (MULTIPLE-VALUE-BIND (ORIGIN ACTIVE-SIZE IGNORE IGNORE STACK-GROUP TYPE)
		      (DECODE-STACK-ADDRESS X)
		    (WHEN ORIGIN
		      (FORMAT T "~%It points to word ~O of the ~@ stack of ~S."
			      (%POINTER-DIFFERENCE X ORIGIN) TYPE STACK-GROUP)
		      (WHEN ( (%POINTER-DIFFERENCE X ORIGIN) ACTIVE-SIZE)
			(FORMAT T "~%This is ~O word~:P past the valid end of the stack."
				(- (%POINTER-DIFFERENCE X ORIGIN) ACTIVE-SIZE))))))
		 (T
		  (MULTIPLE-VALUE-BIND (STRUC BASEP SIZE)
		      (%FIND-STRUCTURE-EXTENT X)
		    (COND ((NULL BASEP))		;Doesn't point to any object
			  ((OR (%POINTER-LESSP
				 (%MAKE-POINTER-OFFSET DTP-LOCATIVE STRUC (1- SIZE))
				 X)
			       (%POINTER-LESSP X BASEP))
			   (FORMAT T "~%It points at some sort of forwarded version of ~S~%"
				   STRUC))
			  (T (FORMAT T "~%It points to word ~O of ~S~%"
				     (%POINTER-DIFFERENCE X STRUC) STRUC)))
		    (DESCRIBE-1 STRUC)))))
	  #+3600
	  ((%POINTER-LESSP A-MEMORY-VIRTUAL-ADDRESS X)
	   (FORMAT T (IF NO-HEADER "~%~S is a locative pointer into A-memory."
			 "~%It points into A-memory.")
		   X))
	  (T (FORMAT T (IF NO-HEADER "~%~S is a locative pointer not into any area."
			   "~%It points to an address not in any area.")
		     X)))))

#+3600
(DEFUN DESCRIBE-PC (X)
  (MULTIPLE-VALUE-BIND (FUNCTION RELATIVE-PC)
      (DECODE-PC X)
    (FORMAT T "~%~S is:" X)
    (CL:TYPECASE FUNCTION
      (CL:COMPILED-FUNCTION
	(LET* ((NLINES 5)
	       (LIM-PC (L-LISP-COMPILER:DISASSEMBLE-LIM-PC FUNCTION))
	       (START-PC (MAX (DBG:COMPILED-FUNCTION-INITIAL-PC FUNCTION)
			      (- RELATIVE-PC (// NLINES 2)))))
	  (DO ((I 0 (1+ I))
	       (PC START-PC (+ PC (L-LISP-COMPILER:DISASSEMBLE-INSTRUCTION-LENGTH FUNCTION PC))))
	      ((OR ( I NLINES) ( PC LIM-PC)))
	    (FORMAT T "~&~:[  ~;=>~] " (EQ PC RELATIVE-PC))
	    (L-LISP-COMPILER:DISASSEMBLE-INSTRUCTION FUNCTION PC)))))))

#+IMACH
(DEFUN DESCRIBE-PC (X)
  (MULTIPLE-VALUE-BIND (FUNCTION RELATIVE-PC)
      (DECODE-PC X)
    (DECLARE (IGNORE FUNCTION RELATIVE-PC))
    (FORMAT T "~%~S is:" X)))

(DEFUN DESCRIBE-CLOSURE (CL)
  (LET ((C (%MAKE-POINTER DTP-LIST CL))
	(SYM NIL) (OFFSET NIL))
    (FORMAT T "~%~S is a dynamic closure of ~S:~%" CL (CAR C))
    (DO L (CDR C) (CDDR L) (NULL L)
	(SETQ SYM (%FIND-STRUCTURE-HEADER (CAR L))
	      OFFSET (%POINTER-DIFFERENCE (CAR L) SYM))
	(FORMAT T
		"   ~A cell of ~S:        ~32,7S~%"
		(SELECTQ OFFSET
		  (0 "Print name") (1 "Value") (2 "Function")
		  (3 "Property list") (4 "Package"))
		SYM
		(COND ((= (%P-DATA-TYPE (CADR L)) DTP-NULL)
		       "unbound.")
		      (T (CAADR L)))))
    (DESCRIBE-1 (CAR C))))

(DEFUN DESCRIBE-LEXICAL-CLOSURE (CL)
  (LET ((ENV (LEXICAL-CLOSURE-ENVIRONMENT CL))
	(FCN (LEXICAL-CLOSURE-FUNCTION CL)))
    (MULTIPLE-VALUE-BIND (NIL NIL NIL NIL STACK-GROUP)
	(DECODE-STACK-ADDRESS CL)
      (FORMAT T "~%~S is a lexical closure~@[,~%  allocated on the stack of ~S,~]
  of the function ~S~%  in environment ~S" CL STACK-GROUP FCN ENV))
    (DESCRIBE-1 FCN)))

(DEFUN DESCRIBE-ONE-STACK (LOW POINTER LIMIT ABSOLUTE-LIMIT 1+)
  (FORMAT NIL "~O//~O~@[ (absolute limit ~O)~]"
	  ;; This 1+ counts a word that is there, but isn't actually used.  Ancient history.
	  (+ (%POINTER-DIFFERENCE POINTER LOW) (IF 1+ 1 0))
	  (%POINTER-DIFFERENCE LIMIT LOW)
	  ABSOLUTE-LIMIT))	  

#+3600
(DEFUN DESCRIBE-STACK-GROUP (SG)
  (FORMAT T "~%~S is a stack group.~%Control stack depth ~A, binding stack depth ~A~%" SG
	  (DESCRIBE-ONE-STACK (SG-CONTROL-STACK-LOW SG) (SG-STACK-POINTER SG)
			      (SG-CONTROL-STACK-LIMIT SG) (SG-ABSOLUTE-CONTROL-STACK-LIMIT SG)
			      T)
	  (DESCRIBE-ONE-STACK (SG-BINDING-STACK-LOW SG) (SG-BINDING-STACK-POINTER SG)
			      (SG-BINDING-STACK-LIMIT SG) (SG-ABSOLUTE-BINDING-STACK-LIMIT SG)
			      T))
  (WHEN (SG-DATA-STACK-LOW SG)
    (FORMAT T "The data stack for this stack group exists; its depth is ~A~%"
	    (DESCRIBE-ONE-STACK (SG-DATA-STACK-LOW SG) (SG-REAL-DATA-STACK-POINTER SG)
				(SG-DATA-STACK-LIMIT SG) (SG-ABSOLUTE-DATA-STACK-LIMIT SG)
				NIL)))
  (FORMAT T "Resumer: ~S.  Arglist: ~S.  Safety: ~[No~;Yes~]~%"
	  (SG-PREVIOUS-STACK-GROUP SG) (SG-ARGLIST SG) (SG-SAFE SG))
  (FORMAT T "Status: ")
  (OR (ZEROP (SG-ACTIVE-BIT SG)) (PRINC "active "))
  (OR (ZEROP (SG-EXHAUSTED-BIT SG)) (PRINC "exhausted "))
  (OR (ZEROP (SG-PROCESSING-ERROR-FLAG SG)) (PRINC "processing error "))
  (OR (ZEROP (SG-UNINITIALIZED-BIT SG)) (PRINC "uninitialized "))
  (PRINC (SELECT (SG-ARG-STATUS SG)
	   (%SG-ARG-NONE "preset")
	   (%SG-ARG-BREAK "trap//interrupt")
	   (%SG-ARG-RESUME "resume")
	   (%SG-ARG-CALL "call")
	   (%SG-ARG-RETURN "return")))
  (TERPRI))

#+IMACH
(DEFUN DESCRIBE-STACK-GROUP (SG)
  (FORMAT T "~%~S is a stack group.~%Control stack depth ~A, binding stack depth ~A~%" SG
	  (DESCRIBE-ONE-STACK (SG-CONTROL-STACK-LOW SG) (SG-STACK-POINTER SG)
			      (SG-CONTROL-STACK-LIMIT SG) (SG-ABSOLUTE-CONTROL-STACK-LIMIT SG)
			      T)
	  (DESCRIBE-ONE-STACK (SG-BINDING-STACK-LOW SG) (SG-BINDING-STACK-POINTER SG)
			      (SG-BINDING-STACK-LIMIT SG) (SG-ABSOLUTE-BINDING-STACK-LIMIT SG)
			      T))
  (WHEN (SG-DATA-STACK-LOW SG)
    (FORMAT T "The data stack for this stack group exists; its depth is ~A~%"
	    (DESCRIBE-ONE-STACK (SG-DATA-STACK-LOW SG) (SG-REAL-DATA-STACK-POINTER SG)
				(SG-DATA-STACK-LIMIT SG) (SG-ABSOLUTE-DATA-STACK-LIMIT SG)
				NIL)))
  (FORMAT T "Resumer: ~S  Safety: ~[No~;Yes~]~%"
	  (SG-PREVIOUS-STACK-GROUP SG) (SG-SAFE SG))
  (FORMAT T "Status: ")
  (OR (ZEROP (SG-ACTIVE-BIT SG)) (PRINC "active "))
  (OR (ZEROP (SG-EXHAUSTED-BIT SG)) (PRINC "exhausted "))
  (OR (ZEROP (SG-PROCESSING-ERROR-FLAG SG)) (PRINC "processing error "))
  (OR (ZEROP (SG-UNINITIALIZED-BIT SG)) (PRINC "uninitialized "))
  (PRINC (SELECT (SG-ARG-STATUS SG)
	   (%SG-ARG-NONE "preset")
	   (%SG-ARG-BREAK "trap//interrupt")
	   (%SG-ARG-RESUME "resume")
	   (%SG-ARG-CALL "call")
	   (%SG-ARG-RETURN "return")))
  (TERPRI))

#+3600
(DEFUN DESCRIBE-ARRAY (ARRAY &OPTIONAL IMPLEMENTS-ANOTHER-TYPE-P
		       &AUX (SCL:*PRINT-STRUCTURE-CONTENTS* NIL) (CL:*PRINT-ARRAY* NIL))
  (WHEN (AND (SYMBOLP ARRAY) (FBOUNDP ARRAY) (ARRAYP (FSYMEVAL ARRAY)))
    (SETQ ARRAY (FSYMEVAL ARRAY)))
  (CHECK-ARG-TYPE ARRAY :ARRAY)
  (FORMAT T "~&~S is ~:[~;implemented as ~]an ~A type array."
	  ARRAY IMPLEMENTS-ANOTHER-TYPE-P (ARRAY-TYPE ARRAY))
  (FORMAT T "~%It uses ~A; "
	  (NTH (ARRAY-DISPATCH-FIELD ARRAY) *ARRAY-DISPATCH-CODES*))
  (FLET ((DESCRIBE-ARRAY-DISPLACEMENT
	   (DISPLACED-TO DISPLACED-INDEX-OFFSET NOT-DISPLACED CONFORMALLY)
	   (COND ((AND (EQ DISPLACED-TO NOT-DISPLACED)
		       #+row-major (EQL DISPLACED-INDEX-OFFSET 0)))
		 ((ARRAYP DISPLACED-TO)
		  (FORMAT T "~%It is displaced~:[ conformally~] to ~S"
			  (NOT CONFORMALLY) DISPLACED-TO)
		  (UNLESS (ZEROP DISPLACED-INDEX-OFFSET)
		    (FORMAT T ", with offset ~:D." DISPLACED-INDEX-OFFSET))
		  (WITH-INDENTATION (STANDARD-OUTPUT 4)
		    (DESCRIBE-ARRAY DISPLACED-TO)))
		 (T
		  (FORMAT T "~%It is displaced to address ~O" DISPLACED-TO)
		  (WHEN (AND DISPLACED-INDEX-OFFSET (NOT (ZEROP DISPLACED-INDEX-OFFSET)))
		    (FORMAT T ", with offset ~:D." DISPLACED-INDEX-OFFSET))))))
    (SELECTOR (ARRAY-DISPATCH-FIELD ARRAY) =
      ((%ARRAY-DISPATCH-1-BIT %ARRAY-DISPATCH-2-BIT %ARRAY-DISPATCH-4-BIT
	%ARRAY-DISPATCH-8-BIT %ARRAY-DISPATCH-16-BIT
	%ARRAY-DISPATCH-WORD %ARRAY-DISPATCH-BOOLEAN
	%ARRAY-DISPATCH-CHARACTER %ARRAY-DISPATCH-FAT-CHARACTER
	%ARRAY-DISPATCH-FIXNUM)
       (FORMAT T "it is ~:D element~:P long." (ARRAY-NORMAL-LENGTH-FIELD ARRAY)))
      (%ARRAY-DISPATCH-LEADER
	(FORMAT T "it is ~:D element~:P long, with a leader of length ~D."
		(ARRAY-SHORT-LENGTH-FIELD ARRAY)
		(ARRAY-LEADER-LENGTH-FIELD ARRAY)))
      (%ARRAY-DISPATCH-SHORT-2D
	(LET* ((NROWS (ARRAY-ROWS-FIELD ARRAY))
	       (NCOLS (ARRAY-COLUMNS-FIELD ARRAY))
	       (WIDTH  #+row-major NCOLS #-row-major NROWS)
	       (HEIGHT #+row-major NROWS #-row-major NCOLS))
	  (FORMAT T "~%It has ~:D rows and ~:D columns ~
			       (or width ~:D and height ~:D)."
		  NROWS NCOLS WIDTH HEIGHT)))
      (%ARRAY-DISPATCH-SHORT-INDIRECT
	(FORMAT T "it is ~:D element~:P long." (ARRAY-SHORT-INDIRECT-LENGTH-FIELD ARRAY))     
	(DESCRIBE-ARRAY-DISPLACEMENT (ARRAY-INDIRECT-POINTER ARRAY)
				     (ARRAY-SHORT-INDIRECT-OFFSET-FIELD ARRAY)
				     NIL NIL))
      ((%ARRAY-DISPATCH-LONG %ARRAY-DISPATCH-LONG-MULTIDIMENSIONAL)
       (LET* ((PREFIX-LENGTH (ARRAY-LONG-PREFIX-LENGTH-FIELD ARRAY))
	      (LEADER-LENGTH (ARRAY-LONG-LEADER-LENGTH-FIELD ARRAY))
	      (DIMENSIONS (ARRAY-DIMENSIONS-FIELD ARRAY))
	      (LENGTH (ARRAY-LONG-LENGTH-FIELD ARRAY))
	      (DISPLACED-TO (ARRAY-INDIRECT-POINTER ARRAY))
	      (DISPLACED-INDEX-OFFSET #+row-major (ARRAY-INDEX-OFFSET-FIELD ARRAY)
				      #-row-major (WHEN (ARRAYP DISPLACED-TO)
						    (ARRAY-INDEX-OFFSET-FIELD ARRAY)))
	      (FIRST-INDEX (%MAKE-POINTER-OFFSET
			     DTP-LOCATIVE
			     #+row-major (LOCF (ARRAY-INDEX-OFFSET-FIELD ARRAY))
			     #-row-major (IF (ARRAYP DISPLACED-TO)
					     (LOCF (ARRAY-INDEX-OFFSET-FIELD ARRAY))
					     (LOCF (ARRAY-LONG-LENGTH-FIELD ARRAY)))
			     1)))
	 (COND ((= DIMENSIONS 0)
		(FORMAT T "it has zero dimensions, therefore one element."))
	       ((= DIMENSIONS 1)
		(FORMAT T "it is ~:D element~:P long." LENGTH))
	       ((= DIMENSIONS 2)
		(LET* ((NROWS (%P-CONTENTS-OFFSET FIRST-INDEX 0))
		       (NCOLS (%P-CONTENTS-OFFSET FIRST-INDEX 1))
		       (WIDTH  #+row-major NCOLS #-row-major NROWS)
		       (HEIGHT #+row-major NROWS #-row-major NCOLS))
		  (FORMAT T "~%It has ~:D rows and ~:D columns ~
			       (or width ~:D and height ~:D), ~
			       and a spanning width of ~:D."
		    NROWS NCOLS WIDTH HEIGHT
		    (%P-CONTENTS-OFFSET FIRST-INDEX 2))))
	       (T
		(FORMAT T "with dimensions: ")
		(LOOP FOR OFF FROM 0 BELOW DIMENSIONS
		      FOR COMMA FIRST NIL THEN T
		      FOR DIM = (%P-CONTENTS-OFFSET FIRST-INDEX OFF)
		      DO (FORMAT T "~:[~;, ~]~:D" COMMA DIM))))
	 (UNLESS (ZEROP LEADER-LENGTH)
	   (FORMAT T "~%It has a leader of length ~D." LEADER-LENGTH))
	 (DESCRIBE-ARRAY-DISPLACEMENT
	   DISPLACED-TO DISPLACED-INDEX-OFFSET
	   (%MAKE-POINTER-OFFSET DTP-LOCATIVE ARRAY
				 (IF (ZEROP LENGTH) 0 (+ PREFIX-LENGTH LEADER-LENGTH)))
	   (AND (= (ARRAY-DISPATCH-FIELD ARRAY)
		   %ARRAY-DISPATCH-LONG-MULTIDIMENSIONAL)
		#-row-major
		(NOT (LOOP FOR INDEX FROM 0 BELOW (1- DIMENSIONS)
			   FOR OFFSET FROM (1+ (- (ARRAY-LONG-PREFIX-LENGTH-FIELD ARRAY) DIMENSIONS))
			   FOR MULT FIRST (%P-CONTENTS-OFFSET FIRST-INDEX 0)
				    THEN (* MULT (%P-CONTENTS-OFFSET FIRST-INDEX INDEX))
			   ALWAYS (= MULT (%P-CONTENTS-OFFSET ARRAY OFFSET))))
		#+row-major
		(NOT (LOOP REPEAT (1- DIMENSIONS) WITH MULT = 1
			   FOR M-OFFSET DOWNFROM (1- (ARRAY-LONG-PREFIX-LENGTH-FIELD ARRAY))
			   FOR I-OFFSET DOWNFROM (- M-OFFSET (1- DIMENSIONS))
			   DO (SETQ MULT (* MULT (%P-CONTENTS-OFFSET ARRAY I-OFFSET)))
			   ALWAYS (= MULT (%P-CONTENTS-OFFSET ARRAY M-OFFSET)))))
	   )))
      (OTHERWISE (FORMAT T "which I don't know how to describe!"))))
  ARRAY)

#+IMACH
(DEFUN DESCRIBE-ARRAY (ARRAY &OPTIONAL IMPLEMENTS-ANOTHER-TYPE-P
		       &AUX (SCL:*PRINT-STRUCTURE-CONTENTS* NIL) (CL:*PRINT-ARRAY* NIL))
  (WHEN (AND (SYMBOLP ARRAY) (FBOUNDP ARRAY) (ARRAYP (FSYMEVAL ARRAY)))
    (SETQ ARRAY (FSYMEVAL ARRAY)))
  (CHECK-ARG-TYPE ARRAY :ARRAY)
  (FORMAT T "~&~S is ~:[~;implemented as ~]an ~A type array."
	  ARRAY IMPLEMENTS-ANOTHER-TYPE-P (ARRAY-TYPE ARRAY))
  (FORMAT T "~%It has a ~[short~;long~] array header" (ARRAY-LONG-PREFIX-BIT ARRAY))
  (FLET ((DESCRIBE-ARRAY-DISPLACEMENT
	   (DISPLACED-TO DISPLACED-INDEX-OFFSET NOT-DISPLACED CONFORMALLY)
	   (COND ((AND (EQ DISPLACED-TO NOT-DISPLACED)
		       #+row-major (EQL DISPLACED-INDEX-OFFSET 0)))
		 ((ARRAYP DISPLACED-TO)
		  (FORMAT T "~%It is displaced~:[ conformally~] to ~S"
			  (NOT CONFORMALLY) DISPLACED-TO)
		  (UNLESS (ZEROP DISPLACED-INDEX-OFFSET)
		    (FORMAT T ", with offset ~:D." DISPLACED-INDEX-OFFSET))
		  (WITH-INDENTATION (STANDARD-OUTPUT 4)
		    (DESCRIBE-ARRAY DISPLACED-TO)))
		 (T
		  (FORMAT T "~%It is displaced to address ~O" DISPLACED-TO)
		  (WHEN (AND DISPLACED-INDEX-OFFSET (NOT (ZEROP DISPLACED-INDEX-OFFSET)))
		    (FORMAT T ", with offset ~:D." DISPLACED-INDEX-OFFSET))))))
    (FORMAT T "~%It is ~:D element~:P long, with ~:[no leader~;a leader of length ~:*~D~]."
	    (ARRAY-LENGTH ARRAY)
	    (ARRAY-LEADER-LENGTH ARRAY))
    (FORMAT T "~%It has dimensions ~s" (ARRAY-DIMENSIONS ARRAY))
    (WHEN (ARRAY-DISPLACED-P ARRAY)
      (DESCRIBE-ARRAY-DISPLACEMENT
	(ARRAY-INDIRECT-POINTER ARRAY)
	(ARRAY-INDEX-OFFSET-FIELD ARRAY)
	(ZEROP (ARRAY-DISPLACED-BIT ARRAY))
	(NOT (ZEROP (ARRAY-DISCONTIGUOUS-BIT ARRAY)))))
    ARRAY))

#+3600
(DEFUN DESCRIBE-COMPILED-FUNCTION (FUNCTION &AUX CCA)
  (SETQ CCA (COMPILED-FUNCTION-CCA FUNCTION))
  (FORMAT T "~%~S has a table size of ~S and a total size of ~S"
	  FUNCTION (COMPILED-FUNCTION-TABLE-SIZE CCA) (COMPILED-FUNCTION-TOTAL-SIZE CCA))
  (LET ((ARGS-INFO (CCA-ARGS-INFO CCA)))
    (FORMAT T "~%Args info: ~O: min args ~D, max args ~D~:[~;, &REST arg~]~:[~;, &QUOTE args~]"
	    ARGS-INFO (LDB %%ARG-DESC-MIN-ARGS ARGS-INFO) (LDB %%ARG-DESC-MAX-ARGS ARGS-INFO)
	    (LDB-TEST %%ARG-DESC-REST-ARG ARGS-INFO) (LDB-TEST %%ARG-DESC-QUOTED ARGS-INFO)))
  (LET ((DEBUG-INFO (CDR (CCA-EXTRA-INFO CCA))))
    (AND DEBUG-INFO (FORMAT T "~%Extra info: ~S" DEBUG-INFO))))

#+IMACH
(DEFUN DESCRIBE-COMPILED-FUNCTION (FUNCTION &AUX CCA)
  (SETQ CCA (COMPILED-FUNCTION-CCA FUNCTION))
  (FORMAT T "~%~S has a suffix size of ~S and a total size of ~S"
	  FUNCTION (CCA-SUFFIX-SIZE CCA) (CCA-TOTAL-SIZE CCA))
  (LET ((ENTRY (%FIXNUM (%MEMORY-READ FUNCTION))))
    (FORMAT T "~%This function is ~[not ~]an internal function."
	    (LDB %%ENTRY-INSTRUCTION-INTERNAL-FUNCTION-P ENTRY))
    (FORMAT T "~%Linked references to this function are ~[allowed~;inhibited~]."
	    (LDB %%ENTRY-INSTRUCTION-INHIBIT-LINKED-REFERENCES ENTRY))
    (FORMAT T (IF (LDB-TEST %%ENTRY-INSTRUCTION-LINKED-REFERENCES-EXIST-P ENTRY)
		  "~%Linked references to this function may exist."
		  "~%No linked references to this function exist."))
    (WHEN (LDB-TEST %%ENTRY-INSTRUCTION-NAMED-BY-OTHER-FSPECS ENTRY)
      (FORMAT T "~%This function might be named by function specs other than its name."))
    (WHEN (LDB-TEST %%ENTRY-INSTRUCTION-COMPLEX-EXTERNAL-REFERENCES-P ENTRY)
      (FORMAT T "~%This function contains complex external references.")))
  (LET ((DEBUG-INFO (CDR (CCA-EXTRA-INFO CCA))))
    (AND DEBUG-INFO (FORMAT T "~%Extra info: ~S" DEBUG-INFO))))

;;; DESCRIBE-AREA, DESCRIBE-REGION still in ALLOCATE for now, since they use macros
;;; defined there.

(DEFUN DESCRIBE-FLONUM (X)
  (WHEN (SINGLE-FLOAT-P X)
    (FORMAT T "~%~S is a single-precision floating-point number.~%  " X)
    (LET ((FIX-X (%FIXNUM X)))
      (FORMAT T "Sign ~1O, exponent ~3,'0O, 23-bit fraction ~8,'0O"
	      (LDB %%SINGLE-SIGN FIX-X) (LDB %%SINGLE-EXPONENT FIX-X)
	      (LDB %%SINGLE-FRACTION FIX-X))
      (SCL:SELECT (LDB %%SINGLE-EXPONENT FIX-X)
	(0
	  (FORMAT T " (~:[denormalized~;zero~])" (ZEROP (LDB %%SINGLE-FRACTION FIX-X))))
	(%SINGLE-EXPONENT-MAX
	  (COND ((ZEROP (LDB %%SINGLE-FRACTION FIX-X)) (PRINC "  (infinity)"))
		(T (PRINC "  (NaN)"))))
	(OTHERWISE
	  (PRINC "  (not including hidden bit)")))
      (UNLESS (OR SCL:*PRINT-EXACT-FLOAT-VALUE*
		  (= (LDB %%SINGLE-EXPONENT FIX-X) %SINGLE-EXPONENT-MAX))
	(LET ((SCL:*PRINT-EXACT-FLOAT-VALUE* T))
	  (FORMAT T "~%  Its exact decimal value is ~S" X))))))




