;;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Package: sys-log; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; macros for entries in the wired event log.
;;;
;;; Each log entry looks like this:
;;;
;;;    CODE LENGTH NEXT-ARRAY-INDEX (or 0)
;;;    time
;;;    w1
;;;    w2
;;;    ...
;;;    Wlength
;;;
;;;    The codes have symbolic names, in the package %wired-events.
;;;    each such is a constant whose value is the code and length for
;;;    the error. The array *wired-events* finds a flavor instance for each
;;;    code.  This is capable of creating an event instance.

(zl:defstruct (wired-event-header (:type :fixnum) :conc-name)
  ((code (byte 8. 0.))
   (length (byte 8. 8.))
   (next-index (byte 8. 16.))))

(defflavor basic-wired-event-code-handler
	(code)
	()
  (:required-methods wired-event-code-handler-make-event)
  (:conc-name wired-event-code-handler-)
  (:readable-instance-variables)
  (:initable-instance-variables)
  :abstract-flavor)
  
(defgeneric wired-event-code-handler-make-event
	    (handler event-code event-value-array))

(defflavor wired-event-code-handler (event-flavor)
	   (basic-wired-event-code-handler)
  (:readable-instance-variables)
  :abstract-flavor)

(defmacro define-wired-event-code (name code event-flavor-name
				   (code-var value-array-var)
				   &body make-event-method-body)
  (declare (zwei:indentation 3 2 4 1))
  (let ((.flavor-name. (intern (string-append (symbol-name name)
					      "-WIRED-EVENT-CODE-HANDLER"))))
    `(progn (record-source-file-name ',name 'define-wired-event-code)
	    (defsysconstant ,name ,code)
	    (defflavor , .flavor-name.
		    ((event-flavor ',event-flavor-name))
		    (wired-event-code-handler))
	    (defmethod (wired-event-code-handler-make-event , .flavor-name.)
		       (,code-var ,value-array-var)
	      (declare (sys:function-parent ,name define-wired-event-code))
	      ,@ make-event-method-body)
	    (compile-flavor-methods , .flavor-name.)
	    (setf (aref *wired-event-codes* ,code)
		  (make-instance ', .flavor-name. :code ,code)))))

(defprop define-wired-event-code "Wired error code" si:definition-type-name)

