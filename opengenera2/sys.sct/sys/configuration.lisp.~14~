;;; -*-  Mode: LISP; Package: CLI; Base: 10; Lowercase:T; Syntax: Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun board-manufacture-date-message (manufacture-date)
  (multiple-value-bind (ignore ignore ignore day month year)
      (decode-universal-time (+ (* manufacture-date 60 60 24)
				#.(time:parse-universal-time "1982-01-01 00:00")))
    (format nil " manufactured on ~D-~2,'0D-~2,'0D" year month day)))

(defun compute-id-prom-checksum (array n-locations base-index)
  (let ((array array))
    (declare (sys:array-register array))
    (loop for idx below n-locations
	  as rotation = (ldb (byte 3 0) idx)
	  as byte = (aref array (+ idx base-index))
	  as rotated-byte = (dpb byte (byte (- 8 rotation)
					    rotation)
				 (ldb (byte rotation
					    (- 8 rotation))
				      byte))
	  sum rotated-byte into checksum
	  finally (return (ldb (byte 8 0) checksum)))))

;;; The next two functions in the COLOR package get redefined by the COLOR system.
(defun color:color-resources-string ()
  "")

(defun color:color-system-description ()
  nil)

(defun color:color-exists-p ()
  (not (null (color:color-system-description))))

(defun si:hardware-resources-string ()
  (format nil "~@[~,1FMW ~]~D~@[ ~A~]"
	  #-VLM (/ (* si:*count-usable-pages* sys:page-size) 1_20)
	  #+VLM (and (plusp (sys:vlm-virtual-memory-size))
		     (/ (sys:vlm-virtual-memory-size) 1_20))
	  (si:machine-model)
	  (let ((crs (color:color-resources-string)))
	    (and (not (equal crs ""))
		 crs))))



(defgeneric board-fasd-list (board)
  (:method-combination :append))

(defflavor basic-board ((host net:*local-host*)) ()
  :abstract-flavor
  (:conc-name "BOARD-")
  (:init-keywords :name :description)
  (:initable-instance-variables host)
  (:readable-instance-variables host)
  (:required-methods board-name))

(defmethod (board-network-form basic-board) ()
  `(:board-info-1 (,(type-of self) ,@(board-fasd-list self))))

(defmethod (board-fasd-list basic-board) ()
  `(:name ,(board-name self)
    :description ,(with-output-to-string (*standard-output*) (describe self))))

(defwhopper (:describe basic-board) ()
  (dw:with-output-as-presentation (:object self :type (type-of self))
    (continue-whopper)
    (write-char #\.)))

;;;

(defflavor random-board (name description) (basic-board)
  (:conc-name "BOARD-")
  :initable-instance-variables
  (:readable-instance-variables name))

(defmethod (make-instance random-board) (&rest ignore)
  (setf description (string-trim '(#\. #\Return) description)))

(defmethod (:describe random-board) ()
  (write-string description))

(compile-flavor-methods random-board)

;;;

(defflavor lbus-board (plist) (basic-board)
  (:readable-instance-variables (board-network-form plist))
  :initable-instance-variables)

(defmethod (board-name lbus-board) () (getf plist :board-name))

(defmethod (board-fasd-list lbus-board) ()
  `(:plist ,plist))

(defmethod (:describe lbus-board) ()
  (let ((unknown-board-p (equal (getf plist :board-name) "Unknown board type"))
	(base-address (getf plist :base-address))
	(bad-check-words (getf plist :bad-check-words)))
    (format t
	    "~&~A (P/N ~D, Serial ~D)~:[ in ~A~;~*~]~:[~; [Note: Invalid Checkwords]~]:"
	    (if unknown-board-p
		(getf plist :full-slot-name)
		(getf plist :board-name))
	    (getf plist :part-number)
	    (getf plist :serial-number)
	    (or unknown-board-p
		(equal (getf plist :full-slot-name)
		       (getf plist :board-name)))
	    (getf plist :full-slot-name)
	    bad-check-words)
    (when base-address
      (format t "~%~4@TOctal Base address: ~O" base-address))
    (format t "~%~4@TManufactured on ~D/~D/~D as rev ~D, functions as rev ~D, ECO level ~D"
	    (getf plist :manufactured-month)
	    (getf plist :manufactured-day)
	    (getf plist :manufactured-year)
	    (getf plist :manufactured-rev)
	    (getf plist :functional-rev)
	    (getf plist :eco-level))
    (loop for (name pretty-name) in '((:ethernet-address "Ethernet Address")
				      (:monitor-type "Monitor Type")
				      (:machine-serial-number "Machine Serial Number")
				      (:fpa-present "FPA Present")
				      (:fep-version-number "FEP Version Number"))
	  as value = (cl:getf plist name) do
      (when value
	(cl:case name
	  (:ethernet-address
	    (format t "~%~4@T~A: ~{~16,2,'0R~#^-~}" pretty-name value))
	  (:machine-serial-number (format t "~%~4@T~A: ~D" pretty-name value))
	  (:fpa-present (format t "~%~4@T~A: ~:[No~;Yes~]" pretty-name value))
	  (:fep-version-number (format t "~%~4@T~A: ~A" pretty-name value))
	  (otherwise
	    (format t "~%~4@T~A: ~A" pretty-name value)))))))

(compile-flavor-methods lbus-board)



(net:define-protocol :configuration (:configuration :byte-stream)
  (:invoke-with-stream (stream)
    (let ((data (scl:with-standard-io-environment
		  (read stream)))
	  (host (send stream :foreign-host)))
      (send stream :close :abort)
      (flet ((board-from-network-form (plist)
	       (let ((v1-info (getf plist :board-info-1)))
		 (when (not (null v1-info))
		   (let ((first (first v1-info)))
		     (return-from board-from-network-form
		       (if (and (not (null (flavor:find-flavor first nil)))
				(subtypep first 'basic-board))
			   (apply #'make-instance first :host host :allow-other-keys t
				  (rest v1-info))
			   (make-instance 'random-board :host host
					  :description (getf (rest v1-info) :description)))))))
	       (when (getf plist :full-slot-name)
		 (return-from board-from-network-form
		   (make-instance 'lbus-board :host host :plist plist)))
	       (make-instance 'random-board :host host :description (format nil "~S" plist))))
	(mapcar #'board-from-network-form data)))))

;; RSL's suggestion for optimizing local access
(net:define-protocol :configuration-local (:configuration :local)
  (:invoke (service)
    (ignore service)
    (local-boards)))

(net:define-server :configuration (:medium :byte-stream :stream *standard-output*)
  (scl:with-standard-io-environment
    (prin1 (mapcar #'board-network-form (local-boards)))))

(chaos:add-contact-name-for-protocol :configuration)

(defun boards-in-host (host)
  (let ((neti:*invoke-service-automatic-retry* t))
    (net:invoke-service-on-host :configuration host)))

(defun si:show-configuration ()
  (si:com-show-machine-configuration net:*local-host*))

(cp:define-command (si:com-show-machine-configuration :command-table "Session")
    ((host 'net:host :default net:*local-host*))
  (dolist (board (boards-in-host host))
    (fresh-line)
    (dw:with-output-as-presentation (:object board)
      (describe board))))

(defun si:machine-board-present-p (host board-name)
  (find board-name (boards-in-host (net:parse-host host))
	:test #'string-equal :key #'board-name))



;;; Macintosh utilities

(defun Macintosh-model-name (model)
  (case model
    (-2 "XL")
    (-1 nil)					D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");Original Macintosh!
0    (1 "512Ke")
    (2 "Plus")
    (3 "SE")
    (4 "II")
    (5 "IIx")
    (6 "IIcx")
    (7 "SE/30")
    (8 "Portable")
    (9 "IIci")
    (11 "IIfx")
    (15 "Classic")
    (16 "IIsi")
    (17 "LC")
    (18 "Quadra 900")
    (19 "PowerBook 170")
    (20 "Quadra 700")
    (21 "Classic II")
    (22 "PowerBook 100")
    (23 "PowerBook 140")
    (24 "Quadra 950")
    (25 "LC III")
    (27 "PowerBook Duo 210")
    (28 "Centris 650")
    (30 "PowerBook Duo 230")
    (31 "PowerBook 180")
    (32 "PowerBook 160")
    (33 "Quadra 800")
    (35 "LC II")
    (42 "IIvi")
    (43 "Performa 600")
    (46 "IIvx")
    (47 "Color Classic")
    (48 "PowerBook 165c")
    (50 "Centris 610")
    (52 "PowerBook 145")
    (69 "PowerBook 180c")
    (otherwise nil)))

(defun Macintosh-cpu-type-name (cpu-type)
  (case cpu-type
    (1 "68000")
    (2 "68010")
    (3 "68020")
    (4 "68030")
    (5 "68040")
    (otherwise nil)))

(defun Macintosh-keyboard-type-name (keyboard-type)
  (multiple-value-bind (name suffix)
      (case keyboard-type
	(1 (values "Apple" nil))
	(2 (values "Apple Extended" "II"))
	(3 (values "Macintosh 512K" nil))
	(4 (values "Apple Standard" "(ISO)"))
	(5 (values "Apple Extended" "II (ISO)"))
	(6 (values "Portable" nil))
	(7 (values "Portable" "(ISO)"))
	(8 (values "Apple" "II"))
	(9 (values "Apple" "II (ISO)"))
	(11 (values "Macintosh Plus" nil))
	(12 (values "PowerBook" nil))
	(13 (values "PowerBook" "(ISO)"))
	(39 (values "Symbolics" nil))
	(259 (values "Macintosh 512K International" nil))
	(otherwise
	  (return-from Macintosh-keyboard-type-name nil)))
    (string-append name " Keyboard" (if suffix " " "") (or suffix ""))))
