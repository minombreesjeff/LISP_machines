;;; -*- Mode: LISP; Package: SYSTEM-INTERNALS; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file is in the cold load.

;;; Please note that most forms in this file shouldn't use FORMAT, because
;;; it isn't loaded in the cold load.

;;; Things used but not loaded for a while
(CL:PROCLAIM '(SPECIAL SCHEDULER-EXISTS 
		       UNDO-DECLARATIONS-FLAG FILE-LOCAL-DECLARATIONS
		       COLD-LOAD-STREAM WARM-BOOTED-PROCESS DELAYED-RESTART-PROCESSES))

;;; Initialization & top-level READ-EVAL-PRINT loop
;;; This file is in the cold load.

;; If T, BREAK is called as early as possible; wired so FEP can set it
(DEFWIREDVAR *BOOT-BREAK* NIL)
(DEFVAR SYN-TERMINAL-IO)
(DEFVAR COLD-BOOT-HISTORY NIL)
(DEFVAR *COLD-BOOT-MICROSECOND-TIME-HIGH*)
(DEFVAR *COLD-BOOT-MICROSECOND-TIME-LOW*)

(DEFVAR *WARM-BOOT-BINDINGS* NIL)
(DEFVAR *STANDARD-BINDINGS* NIL)

;;; This gets set to LISP-TOP-LEVEL-WARM by QLD.
(DECLARE-STORAGE-CATEGORY :FUNCTION-CELL LISP-TOP-LEVEL :WIRED)
(DEFF LISP-TOP-LEVEL 'LISP-TOP-LEVEL-COLD)

(DEFVAR TV:DEFAULT-BACKGROUND-STREAM 'TV:BACKGROUND-STREAM)

;;; The emergency break loop.

(DEFVAR-RESETTABLE + NIL)
(DEFVAR-RESETTABLE - NIL)
(DEFVAR-RESETTABLE * NIL)
(DEFVAR-RESETTABLE CL:// NIL)			;This is in CL: so that will be the home
(DEFVAR-RESETTABLE //// NIL)
(DEFVAR-RESETTABLE ////// NIL)
(DEFVAR-RESETTABLE ++ NIL)
(DEFVAR-RESETTABLE +++ NIL)
(DEFVAR-RESETTABLE ** NIL)
(DEFVAR-RESETTABLE *** NIL)
(DEFVAR-RESETTABLE DBG:*DEBUGGER-MIGHT-HAVE-SYSTEM-PROBLEMS* NIL NIL)

(DEFUN EMERGENCY-BREAK (REASON)
  (CATCH 'EMERGENCY-BREAK
    (LET ((STANDARD-INPUT SYN-TERMINAL-IO)
	  (STANDARD-OUTPUT SYN-TERMINAL-IO)
	  (DBG:*DEBUGGER-MIGHT-HAVE-SYSTEM-PROBLEMS* T))
      (SEND STANDARD-OUTPUT :FRESH-LINE)
      (PRINC ">Emergency breakpoint ")
      (PRINC (STRING REASON))
      (PRINC "; type (RETURN) to exit.")
      (TERPRI)
      (TERPRI)
      (EMERGENCY-COMMAND-LOOP))))

(DEFUN EMERGENCY-COMMAND-LOOP ()
  (LOOP DOING
    (SEND STANDARD-OUTPUT :FRESH-LINE)
    (SETQ +++ ++ ++ + + -)
    (SETQ - (READ-FOR-TOP-LEVEL))
    (WHEN (AND (LISTP -) (EQ (CAR -) 'RETURN))
      (RETURN (EVAL (CADR -))))
    (WHEN (SETQ // (PROG1 (MULTIPLE-VALUE-LIST (EVAL -))
			  (SETQ ////// //// //// //)))
      (SETQ *** ** ** * * (CAR //))
      (DOLIST (VALUE //)
	(SEND STANDARD-OUTPUT :FRESH-LINE)
	(PRIN1 VALUE)))))

(DEFUN DBG:ENABLE-TRAPPING ()
  (SETF (LDB %%SG-HALT-ON-ERROR %CURRENT-STACK-GROUP-STATUS-BITS) 0)
  NIL)

(DEFVAR *INSIDE-LISP-REINITIALIZE* 0)
(DEFVAR *VIRGIN-WORLD-P* T)
(DEFVAR *WARM-BOOTED-P* NIL)
(DEFVAR-RESETTABLE *SYSTEM-INITIALIZATION-IN-PROGRESS* T)

;Function to reset various things, do initialization that's inconvenient in cold load, etc.
(DEFUN LISP-REINITIALIZE-PART-1 ()
  (LET ((BOOTED-FROM-HERE *INSIDE-LISP-REINITIALIZE*))
    (INCF *INSIDE-LISP-REINITIALIZE*)
    ;; If we've tried to boot unsuccessfully twice, then attempt a last chance
    ;; break here.  This is only done every other time in hopes that maybe an
    ;; initialization might work.
    (WHEN (AND (> BOOTED-FROM-HERE 2)
	       (ODDP BOOTED-FROM-HERE)
	       #+3600 (NEQ *IO-BOARD-TYPE* :NBS))	;This hack doesn't work on NBS.
      ;; Try to do the absolute miminum required in order to bring up a read-eval-print loop.
      (SETQ TERMINAL-IO     COLD-LOAD-STREAM
	    STANDARD-OUTPUT SYN-TERMINAL-IO
	    STANDARD-INPUT  SYN-TERMINAL-IO
	    QUERY-IO        SYN-TERMINAL-IO
	    TRACE-OUTPUT    SYN-TERMINAL-IO
	    ERROR-OUTPUT    SYN-TERMINAL-IO
	    DEBUG-IO	  SYN-TERMINAL-IO)
      (FUNCALL COLD-LOAD-STREAM :LISTEN)
      (FUNCALL COLD-LOAD-STREAM :SELECT)
      (EMERGENCY-BREAK "Last chance: Lisp not initialized!"))
    ;; This is so the LUser gets a warm-boot message even if he halted in the scheduler.
    (SETF *WARM-BOOTED-P* (NOT *VIRGIN-WORLD-P*))
    (SETF *VIRGIN-WORLD-P* NIL)
    ;; Make sure the GC doesn't think it is inside the scavenger
    (SETQ *SCAVENGE-IN-PROGRESS* NIL)
    (SETQ *INHIBIT-CONSING-FLAG* NIL)
    (SETQ GC-FLIP-INHIBIT 0)
    ;; Permit WIRED-FERROR to try to crawl out to the debugger
    (SETQ *WIRED-FERROR-RECURSION-COUNT* 0)
    (SETQ *DEBUGGER-WIRED-FERROR-RECURSION* 0)
    ;; Reset all the warm-boot resettable bindings
    (RESET-WARM-BOOT-BINDINGS)
    (SETF TV:*ACTIVE-WHO-LINE-SCREENS* NIL)
    ;; Reinstall the normal fixnum multiply trap handler.
    #+(and IMach (not VLM)) (SI:REV4-INTEGER-MULTIPLY-TRAP-HANDLER-CHECK NIL)
    ;; Turn off any condition handlers, but leave global handlers untouched.
    (SETQ TV:KBD-LAST-ACTIVITY-TIME (TIME))	; c-m-c-m-Return (booting) should count.
    ;; And all kinds of randomness...
    ;; Put this back in and I may have to cut off your fingers.
    ;; (AND (FBOUNDP 'UNTRACE) (UNTRACE))

    ;; Reattach IO streams.  Note that TERMINAL-IO will be fixed later to go to a window.
    ;; Note that the previous cold load stream is more likely to work than the old value
    ;; of TERMINAL-IO, even before the cold load stream is initialized.
    (SETQ TERMINAL-IO     COLD-LOAD-STREAM
	  STANDARD-OUTPUT SYN-TERMINAL-IO
	  STANDARD-INPUT  SYN-TERMINAL-IO
	  QUERY-IO        SYN-TERMINAL-IO
	  TRACE-OUTPUT    SYN-TERMINAL-IO
	  ERROR-OUTPUT    SYN-TERMINAL-IO
	  DEBUG-IO	  SYN-TERMINAL-IO)
    (INITIALIZE-COLD-LOAD-STREAM)
    (SEND TERMINAL-IO :HOME-CURSOR)

    ;; Make it possible to trace things that happen early in system initialization
    ;; At this point, processes, the window system, and the network have not yet
    ;; been turned on, but enough things are initialized that a read-eval-print
    ;; loop in the cold-load-stream ought to work.
    (WHEN *BOOT-BREAK*
      (FUNCALL COLD-LOAD-STREAM :LISTEN)
      (FUNCALL COLD-LOAD-STREAM :SELECT)
      (EMERGENCY-BREAK "*BOOT-BREAK*"))
    ;;-- This cannot be changed to BREAK because BREAK calls everything, which
    ;;-- we presume is broken.
    (WHEN (PLUSP BOOTED-FROM-HERE)
      (FUNCALL COLD-LOAD-STREAM :LISTEN)
      (FUNCALL COLD-LOAD-STREAM :SELECT)
      (EMERGENCY-BREAK "Booted from LISP-REINITIALIZE!")))
  (PROCESS::PROCESS-INITIALIZE)
  NIL)

(DEFUN LISP-REINITIALIZE-PART-2 ()
  (TV:RESTART-SCREEN-MANAGER)
  (NETI:ENCACHE-PROPERTY-LISTS-IN-BACKGROUND)
  (PROCESS::ENABLE-DELAYED-PROCESSES)
  (SETQ TV:WHO-LINE-PROCESS NIL)		;Track selected window
  (SETQ *INSIDE-LISP-REINITIALIZE* 0)
  (SETQ TV:*FORCIBLY-SHOW-PROGRESS-NOTES* NIL)	;Revert to normal
  (SETQ *SYSTEM-INITIALIZATION-IN-PROGRESS* NIL)
  NIL)


;;; Initialization stuff

(DEFVAR BEFORE-COLD-INITIALIZATION-LIST NIL)
(DEFVAR SYSTEM-SHUTDOWN-INITIALIZATION-LIST NIL)
(DEFVAR COLD-INITIALIZATION-LIST NIL)
(DEFVAR WARM-INITIALIZATION-LIST NIL)
(DEFVAR ONCE-ONLY-INITIALIZATION-LIST NIL)
(DEFVAR SYSTEM-INITIALIZATION-LIST NIL)
(DEFVAR SITE-INITIALIZATION-LIST NIL)
(DEFVAR LOGIN-INITIALIZATION-LIST NIL)
(DEFVAR LOGOUT-INITIALIZATION-LIST NIL)
(DEFVAR FULL-GC-INITIALIZATION-LIST NIL)
(DEFVAR BEFORE-FULL-GC-INITIALIZATION-LIST NIL)
(DEFVAR AFTER-FULL-GC-INITIALIZATION-LIST NIL)
(DEFVAR BEFORE-DYNAMIC-GC-LIST NIL)
(DEFVAR WINDOW-INITIALIZATION-LIST NIL)

;; Some code relies on INIT-NAME being the CAR of the init entry.  **DO NOT CHANGE THIS**
(DEFSTRUCT (INIT-LIST-ENTRY :LIST
			    (:CONSTRUCTOR MAKE-INIT-LIST-ENTRY (NAME FORM FLAG SOURCE-FILE))
			    (:CONC-NAME "INIT-")
			    (:ALTERANT NIL))
  NAME
  FORM
  FLAG						;Non-NIL means init has been run.
  SOURCE-FILE)

(DEFVAR *ADDITIONAL-INITIALIZATION-LISTS* NIL)

(DEFMACRO INIT-LIST-CHECK (NAME)
  `(PROGN (WHEN (NOT (BOUNDP ,NAME))
	    (SET ,NAME NIL))
	  (UNLESS (GET ,NAME 'INITIALIZATION-LIST)
	    (PUTPROP ,NAME T 'INITIALIZATION-LIST)
	    (PUSH ,NAME *ADDITIONAL-INITIALIZATION-LISTS*))))

;;; Run the inits in the specified list.
;;; If init has been run before it will only be run again if the second arg is non-NIL.
;;; The third arg is the flag to be RLACA'd into the flag slot.  If it is NIL it will
;;;  look as if the inits have never been run.  This may be useful for some applications.
(DEFUN INITIALIZATIONS (LIST-NAME &OPTIONAL (REDO-FLAG NIL) (FLAG T))
  ;; Temporary (?) booby trap.
  (CHECK-ARG LIST-NAME (AND (SYMBOLP LIST-NAME) (NOT (NULL LIST-NAME)))
	     "a symbol other than NIL")
  (INIT-LIST-CHECK LIST-NAME)
  (COND ((AND REDO-FLAG (FBOUNDP LIST-NAME))
	 (FUNCALL (FSYMEVAL LIST-NAME))
	 T)
	(T
	 (LET* ((DID-SOMETHING NIL)
		(NOTE-PROGRESS (TV:SHOW-PROGRESS-NOTE :INITIALIZATIONS))
		(FORMS (SYMEVAL LIST-NAME))
		(N-FORMS (LENGTH FORMS))
		(COUNT 0))
	   (TV:NOTING-PROGRESS-IF NOTE-PROGRESS
	       ((STRING-APPEND "Running " LIST-NAME))
	     (DOLIST (INIT FORMS)
	       (WHEN (OR REDO-FLAG (NULL (INIT-FLAG INIT)))
		 (EVAL (INIT-FORM INIT))
		 (SETF (INIT-FLAG INIT) FLAG)
		 (SETQ DID-SOMETHING T))
	       (WHEN NOTE-PROGRESS
		 (TV:NOTE-PROGRESS (INCF COUNT) N-FORMS))))
	   DID-SOMETHING))))

;;; Keywords are:
;;; NOW			Run the init now
;;; FIRST		Run the init now if this is the first entry for the specified name
;;; NORMAL		Do the "normal" thing (init when initializations normally run)
;;; REDO		Do nothing now, but set up things so init gets redone
;;; COLD		Use the cold boot list
;;; WARM		Use the warm boot list
;;; ONCE		Use the once-only list
;;; SYSTEM		Use the system list
;;; BEFORE-COLD		The list that gets done before disk-save'ing out
;;; SYSTEM-SHUTDOWN	The list that gets done after BEFORE-COLD and LOGOUT in DISK-SAVE
;;; FULL-GC		The list that gets done before GC'ing in FULL-GC
;;; AFTER-FULL-GC	The list that gets done after GC'ing in FULL-GC
;;; LOGIN       	Use the login list
;;; LOGOUT      	Use the logout list
;;; SITE		Use the site list (also run once)

;;; ADD/DELETE-INITIALIZATION are driven off of this list.
(DEFCONST INITIALIZATION-KEYWORDS
	  '((WARM		WARM-INITIALIZATION-LIST		)
	    (COLD 		COLD-INITIALIZATION-LIST		)
	    (SYSTEM 		SYSTEM-INITIALIZATION-LIST		FIRST)
	    (BEFORE-COLD	BEFORE-COLD-INITIALIZATION-LIST		)
	    (SYSTEM-SHUTDOWN	SYSTEM-SHUTDOWN-INITIALIZATION-LIST	)
	    (ONCE		ONCE-ONLY-INITIALIZATION-LIST		FIRST)
	    (FULL-GC		FULL-GC-INITIALIZATION-LIST		)
	    (AFTER-FULL-GC	AFTER-FULL-GC-INITIALIZATION-LIST	)
	    (LOGIN		LOGIN-INITIALIZATION-LIST		)
	    (LOGOUT		LOGOUT-INITIALIZATION-LIST		)
	    (SITE	       	SITE-INITIALIZATION-LIST		NOW)
	    (ENABLE-SERVICES	ENABLE-SERVICES-INITIALIZATION-LIST	)
	    (DISABLE-SERVICES	DISABLE-SERVICES-INITIALIZATION-LIST	)
	    (WINDOW		WINDOW-INITIALIZATION-LIST		)

	    (NOW		NIL					NOW)
	    (FIRST		NIL					FIRST)
	    (REDO		NIL					REDO)
	    (NORMAL		NIL					NORMAL)))

(DEFUN INITIALIZATION-LIST-SYMBOL-P (SYM)
  (GET SYM 'SI:INITIALIZATION-LIST))

(DEFUN PARSE-INITIALIZATION-ARGS (KEYWORDS LIST-NAME &AUX WHEN DEFAULT-WHEN)
  (LOOP FOR KEYWORD IN KEYWORDS
	FOR ELEM = (ASS #'(LAMBDA (X Y) (STRING-EQUAL (GET-PNAME X) (GET-PNAME Y)))
			KEYWORD INITIALIZATION-KEYWORDS)
	UNLESS ELEM
	  DO (FERROR "Illegal keyword ~A." KEYWORD)
	DO (COND ((NULL (SECOND ELEM))
		  (SETQ WHEN (THIRD ELEM)))
		 (T
		  (WHEN LIST-NAME
		    (FERROR "More than one initialization list was specified"))
		  (SETQ LIST-NAME (SECOND ELEM))
		  (SETQ DEFAULT-WHEN (THIRD ELEM)))))
  (WHEN (NULL WHEN)
    (SETQ WHEN (OR DEFAULT-WHEN 'NORMAL)))
  (WHEN (NULL LIST-NAME)
    (SETF LIST-NAME 'WARM-INITIALIZATION-LIST))
  (INIT-LIST-CHECK LIST-NAME)
  (VALUES LIST-NAME WHEN))

;;; Adds a new init to the list.
;;; If neither WARM nor COLD are specified, warm is assumed.  If a fourth argument
;;; is given, then it is the list to use.  WARM and COLD will override the fourth argument.
(DEFUN ADD-INITIALIZATION (NAME FORM &OPTIONAL KEYWORDS LIST-NAME &AUX WHEN)
  (MULTIPLE-VALUE (LIST-NAME WHEN)
    (PARSE-INITIALIZATION-ARGS KEYWORDS LIST-NAME))
  (LET ((INIT (OR
		;;(CL:FIND NAME (SYMEVAL LIST-NAME) :TEST #'STRING-EQUAL :KEY #'INIT-NAME)
		(ASSOC NAME (SYMEVAL LIST-NAME))
		(LET ((NEW-INIT (MAKE-INIT-LIST-ENTRY NAME NIL NIL NIL)))
		  (SETF (SYMEVAL LIST-NAME) (NCONC (SYMEVAL LIST-NAME) (NCONS NEW-INIT)))
		  (FMAKUNBOUND LIST-NAME)
		  NEW-INIT))))
    (UNLESS (EQUAL FORM (INIT-FORM INIT))
      (FMAKUNBOUND LIST-NAME)
      (SETF (INIT-FORM INIT) FORM))
    (SETF (INIT-SOURCE-FILE INIT) FDEFINE-FILE-PATHNAME)
    (COND ((EQ WHEN 'REDO)
	   (SETF (INIT-FLAG INIT) NIL))
	  ((OR (EQ WHEN 'NOW)
	       (AND (EQ WHEN 'FIRST) (NULL (INIT-FLAG INIT))))
	   (EVAL (INIT-FORM INIT))
	   (SETF (INIT-FLAG INIT) T)))
    (WHEN-IN-INCREMENTAL-WHO-CALLS-MODE
      (WHO-CALLS-ADD-INITIALIZATION-HOOK LIST-NAME FORM NAME))
    NIL))

;;; If neither WARM nor COLD are specified, warm is assumed.  If a third argument
;;; is given, then it is the list to use.  WARM and COLD will override the third argument.
(DEFUN DELETE-INITIALIZATION (NAME &OPTIONAL KEYWORDS LIST-NAME)
  (SETF LIST-NAME (PARSE-INITIALIZATION-ARGS KEYWORDS LIST-NAME))
  (LET ((INIT
	  ;;(CL:FIND NAME (SYMEVAL LIST-NAME) :TEST #'STRING-EQUAL :KEY #'INIT-NAME)
	  (ASSOC NAME (SYMEVAL LIST-NAME))
	  ))
    (IF (NULL INIT)
	(WARN "~S did not find ~S as an initialization." 'DELETE-INITIALIZATION NAME)
      (SETF (SYMEVAL LIST-NAME) (DELQ INIT (SYMEVAL LIST-NAME)))
      (FMAKUNBOUND LIST-NAME))
    NIL))

(DEFUN RESET-INITIALIZATIONS (LIST-NAME)
  (INIT-LIST-CHECK LIST-NAME)
  (MAPC #'(LAMBDA (INIT) (SETF (INIT-FLAG INIT) NIL)) (SYMEVAL LIST-NAME))
  NIL)

(DEFUN COMPILE-INITIALIZATIONS (LIST-NAME)
  (INIT-LIST-CHECK LIST-NAME)
  (UNLESS (FBOUNDP LIST-NAME)
    ;; Make certain that we don't record a bogus source file property for the list.
    (LET ((FDEFINE-FILE-PATHNAME NIL))
      (EVAL (LET ((LIST-LENGTH (LENGTH (SYMEVAL LIST-NAME)))
		  (COUNTER 0))
	      `(DEFUN ,LIST-NAME ()
		 (LET ((.NOTE-PROGRESS. (TV:SHOW-PROGRESS-NOTE :INITIALIZATIONS)))
		   (TV:NOTING-PROGRESS-IF .NOTE-PROGRESS.
		       (,(STRING-APPEND "Running " LIST-NAME))
		     ,@(LOOP FOR INIT IN (SYMEVAL LIST-NAME)
			     COLLECT (INIT-FORM INIT)
			     COLLECT `(WHEN .NOTE-PROGRESS.
					(TV:NOTE-PROGRESS ,(INCF COUNTER) ,LIST-LENGTH)))
		     NIL)))))
      (COMPILE LIST-NAME))
    NIL))



(DEFUN RESET-COLD-BOOT-HISTORY ()
  (PUSH (LIST NIL NIL) COLD-BOOT-HISTORY)
  (SETF WARM-BOOTED-PROCESSES NIL)
  (SETF *COLD-BOOT-MICROSECOND-TIME-HIGH* TIME:*BOOT-MICROSECOND-TIME-HIGH*)
  (SETF *COLD-BOOT-MICROSECOND-TIME-LOW* TIME:*BOOT-MICROSECOND-TIME-LOW*))

(ADD-INITIALIZATION "Reset cold boot history" '(RESET-COLD-BOOT-HISTORY) '(COLD))

(DEFUN MAYBE-UPDATE-COLD-BOOT-HISTORY ()
  (LET ((ELEM (FIRST COLD-BOOT-HISTORY)))
    (WHEN (NULL (FIRST ELEM))
      (CATCH-ERROR
	(SETF (FIRST ELEM) (SEND NET:*LOCAL-HOST* :NAME))))
    (WHEN (NULL (SECOND ELEM))
      (CATCH-ERROR
	(SETF (SECOND ELEM) (AND TIME:*TIMEBASE-INITIALIZED*
				 (- (TIME:GET-UNIVERSAL-TIME)
				    (MULTIPLE-VALUE-BIND (LOW HIGH)
					(TIME:FULL-MICROSECOND-TIME)
				      (ROUND (- (DPB HIGH (BYTE 32. 32.)
						     (DPB LOW (BYTE 32. 0) 0))
						(DPB *COLD-BOOT-MICROSECOND-TIME-HIGH*
						     (BYTE 32. 32.)
						     (DPB *COLD-BOOT-MICROSECOND-TIME-LOW*
							  (BYTE 32. 0)
							  0)))
					     1000000.)))))))))

;;; This is a warm initialization because it has to run after the timebase is initialized.
(ADD-INITIALIZATION "Maybe update cold boot history" '(MAYBE-UPDATE-COLD-BOOT-HISTORY) '(WARM))
(ADD-INITIALIZATION "Maybe update cold boot history" '(MAYBE-UPDATE-COLD-BOOT-HISTORY) '(BEFORE-COLD))



(DEFUN PROCESS-SPIN-WAIT (IGNORE FUNCTION &REST ARGUMENTS)
  (SI:CLEAR-RUN-LIGHT SYS:PROCESS-RUN-LIGHT)
  (DO () (NIL)
    (WHEN (APPLY FUNCTION ARGUMENTS)
      (RETURN)))
  (SI:SET-RUN-LIGHT SYS:PROCESS-RUN-LIGHT)
  T)


;;; Next several things here because they are used by MINI- versions of things as well
(DEFUN READFILE-INTERNAL (STANDARD-INPUT PKG NO-MSG-P)
  (DECLARE (VALUES PATHNAME TRUENAME))
  (MULTIPLE-VALUE-BIND (FUTURE-COMMON-LISP:*LOAD-PATHNAME* IGNORE FDEFINE-FILE-PATHNAME GENERIC-PLIST)
      (SEND STANDARD-INPUT :GENERIC-PATHNAME-AND-PLIST)
    (LET ((PATCH-SOURCE-FILE-PATHNAME NIL)
	  (FUTURE-COMMON-LISP:*LOAD-TRUENAME* (SEND-IF-HANDLES STANDARD-INPUT :TRUENAME)))
      (FS:READ-ATTRIBUTE-LIST GENERIC-PLIST STANDARD-INPUT)
      ;; Enter appropriate environment for the file
      (MULTIPLE-VALUE-BIND (VARS VALS)
	  (FS:FILE-ATTRIBUTE-BINDINGS GENERIC-PLIST)
	(PROGV VARS VALS
	  ;; If package overridden, do so.  PACKAGE is bound in any case.
	  (LET ((PACKAGE (IF PKG
			     (PKG-FIND-PACKAGE PKG :ASK NIL (SI:CURRENT-LISP-SYNTAX))
			     PACKAGE)))
	    ;; Tell user what it was unless told not to	
	    (COND (NO-MSG-P)
		  (T (SEND STANDARD-OUTPUT :FRESH-LINE)
		     (PRINC "Loading ")
		     (PRINC FUTURE-COMMON-LISP:*LOAD-PATHNAME*)
		     (PRINC " into package ")
		     (PRINC PACKAGE)
		     (TERPRI)))
	    (LOADING-FILE GENERIC-PLIST
	      (DO ((EOF '(()))
		   (FORM))
		  ((EQ (SETQ FORM (READ STANDARD-INPUT EOF)) EOF))
		(EVAL FORM)))
	    (SET-FILE-STREAM-LOADED-ID STANDARD-INPUT PACKAGE))))
      (VALUES FUTURE-COMMON-LISP:*LOAD-PATHNAME* FUTURE-COMMON-LISP:*LOAD-TRUENAME*))))

;; The :FILE-ID-PACKAGE-ALIST property of a file-symbol is an a-list
;; of packages and FILE-ID's for the version of that file loaded into
;; that package.  The FILE-ID is in the CADR rather the CDR, for expansibility.
;; Note: only one version of a particular file can be loaded into a particular
;; package, so we put this property on the :NEWEST version of the pathname.

;; Record the fact that a file has been loaded (in a certain package)
(DEFUN SET-FILE-STREAM-LOADED-ID (STREAM PKG)
  (MULTIPLE-VALUE-BIND (PATHNAME NIL GENERIC-PATHNAME PLIST)
      ;; I would prefer that this live on the .NEWEST version of the
      ;; pathname, but that breaks the cold-load --SWM
      (SEND STREAM :GENERIC-PATHNAME-AND-PLIST)
    (IGNORE GENERIC-PATHNAME)
    (LET* ((INFO (SEND STREAM :INFO))
	   (ENTRY (ASSQ PKG (GET PLIST :FILE-ID-PACKAGE-ALIST))))
      (WHEN (AND (INSTANCEP PATHNAME)
		 (TYPEP PATHNAME 'FS:LOGICAL-PATHNAME))
	;; Make sure we have a real version number here
	(SETF (CAR INFO) (SEND PATHNAME :NEW-DEFAULT-PATHNAME
			       :VERSION (SEND (CAR INFO) :VERSION))))
      (IF ENTRY
	  (SETF (SECOND ENTRY) INFO)
	(PUSH (LIST PKG INFO) (GET PLIST :FILE-ID-PACKAGE-ALIST))))))

(DEFUN SET-FILE-LOADED-ID (TRUENAME PKG LOADED-ID)
  (LET* ((GENERIC-PATHNAME (SEND TRUENAME :GENERIC-PATHNAME))
	 (PKG (PKG-FIND-PACKAGE PKG))
	 (INFO (CONS TRUENAME LOADED-ID))
	 (ALIST (SEND GENERIC-PATHNAME :GET :FILE-ID-PACKAGE-ALIST))
	 (ENTRY (ASSQ PKG ALIST)))
    (IF ENTRY
	(SETF (SECOND ENTRY) INFO)
      (SEND GENERIC-PATHNAME :PUTPROP
			     (LIST* (LIST PKG INFO) ALIST) :FILE-ID-PACKAGE-ALIST))))

;; Get the version of a file that was loaded into a particular package, NIL if
;; never loaded.  If the package is given as NIL, the file's :PACKAGE property
;; is used.  If the package does not exist, clearly the file could never have 
;; been loaded into it.
(DEFUN GET-FILE-LOADED-ID (PATHNAME PKG &OPTIONAL (CREATE-P :ERROR))
  (LET ((GENERIC-PATHNAME (SEND PATHNAME :GENERIC-PATHNAME)))
    (WHEN (NULL PKG)
      (LET* ((PKG-ATTRIBUTE (SEND GENERIC-PATHNAME :GET :PACKAGE))
	     (SYNTAX-ATTRIBUTE (SEND GENERIC-PATHNAME :GET :SYNTAX)))
	(WHEN PKG-ATTRIBUTE
	  ;;This should really call CANONICALIZE-BASE-AND-SYNTAX or some such
	  ;; in order to make sure it understands incomplete attribute lists
	  ;; in the same way as other programs do.  But for now we just cheat
	  ;; and assume something more low-tech will work--that's what the
	  ;; (OR ... :ZETALISP) is about. -kmp 27-Oct-89
	  (SETF PKG (FS:FIND-PACKAGE-FOR-SYNTAX
		      PKG-ATTRIBUTE (OR SYNTAX-ATTRIBUTE :ZETALISP) CREATE-P)))))
    ;; Better this property should be on .NEWEST, but see above --SWM
    (LET ((ALIST (SEND GENERIC-PATHNAME :GET :FILE-ID-PACKAGE-ALIST)))
      (COND ((NULL PKG)
	     (LET ((PROP (FIRST ALIST)))
	       (VALUES (SECOND PROP) (FIRST PROP))))
	    ((SETQ PKG (PKG-FIND-PACKAGE PKG :FIND))
	     (LET ((PROP (ASSQ PKG ALIST)))
	       (VALUES (SECOND PROP) (FIRST PROP))))))))



(DEFUN TIME:FULL-MICROSECOND-TIME ()
  (DECLARE (SAFEGUARDED-FUNCTION))		;For SLOW-GC
  (CL:LOOP					;avoid races with sequence breaks
     (LET* ((HIGH TIME:*TOTAL-MICROSECOND-TIME-HIGH*)
	    (LOW TIME:*TOTAL-MICROSECOND-TIME-LOW*))
       (WHEN (= TIME:*TOTAL-MICROSECOND-TIME-HIGH* HIGH)
	 (LET ((USECS (SYS:%MICROSECOND-CLOCK)))
	   (MULTIPLE-VALUE-BIND (IGNORE BORROW)
	       (%SUB-BIGNUM-STEP USECS LOW 0)
	     (RETURN (VALUES USECS (%32-BIT-PLUS HIGH BORROW)))))))))

;;; A number which increments approximately 60 times a second, and wraps
;;; around every year or so; it's 31 bits long.  Derived from microsecond clock.
;;; This version is claimed to be as completely accurate as the microsecond clock.
;;; It is not permitted to cons a bignum as it is called by the garbage collector.
;;; This version will die if you're up for more than 2 years.
(DEFUN TIME ()
  (MULTIPLE-VALUE-BIND (LOW HIGH) (TIME:FULL-MICROSECOND-TIME)
    ;; Multiply by 3.
    (MULTIPLE-VALUE-BIND (L3L H3L) (SYS:%ADD-BIGNUM-STEP LOW LOW LOW)
      (MULTIPLE-VALUE-BIND (L3H H3H) (SYS:%ADD-BIGNUM-STEP HIGH HIGH HIGH)
	H3H					;had better be 0
	;; Now divide by 1000000/60 and divide by 3.
	(LDB (BYTE 31. 0)			; throw away the high bit
	     (SYS:%DIVIDE-BIGNUM-STEP L3L (+ L3H H3L)
				      (* 3. (CL:// 1000000. 60.))))))))

;;; These two functions deal with the wrap-around lossage
;;; Note that subtracting two times cannot overflow since they are positive fixnums
(DEFUN TIME-LESSP (TIME1 TIME2)
  (DECLARE LT:(SIDE-EFFECTS SIMPLE REDUCIBLE))
  (LDB-TEST (BYTE 1 30.) (- TIME1 TIME2)))

(DEFSUBST TIME-DIFFERENCE (TIME1 TIME2)
  (DECLARE LT:(SIDE-EFFECTS SIMPLE REDUCIBLE))
  (LDB (BYTE 31. 0) (- TIME1 TIME2)))

;;; ; byte versions above by DCP
;;; (DEFUN TIME-LESSP (TIME1 TIME2)
;;;   (BIT-TEST 1_30. (- TIME1 TIME2)))
;;; (DEFUN TIME-DIFFERENCE (TIME1 TIME2)
;;;   (LOGAND (- TIME1 TIME2) #.(1- 1_31.)))

;(DEFUN TIME-DIFFERENCE (TIME1 TIME2)
;  (IF (< TIME1 TIME2)
;      (LOGXOR (- TIME1 TIME2) -1_31.)
;      (- TIME1 TIME2)))

;Add two 31-bit numbers and get the low 31 bits of the result
(DEFUN TIME-INCREMENT (TIME INCREMENT)
  (DECLARE LT:(SIDE-EFFECTS SIMPLE REDUCIBLE))
  (LDB (BYTE 31. 0) (%32-BIT-PLUS TIME INCREMENT)))

;;; Until common lisp this does not preserve order of evaluation. 
(DEFSUBST TIME-ELAPSED-P (INCREMENT INITIAL-TIME &OPTIONAL (FINAL-TIME (TIME)))
  ( (TIME-DIFFERENCE FINAL-TIME INITIAL-TIME) INCREMENT))

