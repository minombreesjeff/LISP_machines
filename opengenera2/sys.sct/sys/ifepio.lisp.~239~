;;; -*- Package:SYSTEM-INTERNALS; Mode: LISP; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Kludge stream for use before l machine has a console
;;; This file is in the cold load.

;;; Keystroke to character conversion code.

;;; These functions are substitutes for the real thing for use by the cold load stream
;;; before consoles are initialized.

(DEFUN KBD-HARDWARE-CHAR-AVAILABLE-COLD (&OPTIONAL KBD-IN-PTR)
  (IGNORE KBD-IN-PTR)
  (SYS:COLD-LOAD-STREAM-LISTEN))

(DEFUN KBD-GET-HARDWARE-CHAR-COLD ()
  (SYS:COLD-LOAD-STREAM-READ-HARDWARE-CHARACTER))


;; Take any prompt into account for erase-chars
(DEFVAR *COLD-LOAD-INITIAL-X* 0)
(DEFVAR *COLD-LOAD-INITIAL-Y* 0)

;; This doesn't hack, page wraparound, or different character widths.
(DEFUN COLD-LOAD-ERASE-CHARS (N-CHARS)
  (LET ((START 0) (END (- (RHB-FILL-POINTER) N-CHARS))
	(X-LEN *COLD-LOAD-INITIAL-X*) (Y-LEN *COLD-LOAD-INITIAL-Y*) X-DEST Y-DEST)
    ;; Calculate the motion the remaining chars and noise would cause
    (COLD-LOAD-LOOP-OVER-NOISE-STRINGS (INDEX STRING START END)
      (MULTIPLE-VALUE (X-LEN Y-LEN)
	(SYS:COLD-LOAD-STREAM-COMPUTE-MOTION
	  *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* START INDEX X-LEN Y-LEN))
      (MULTIPLE-VALUE (X-LEN Y-LEN)
	(SYS:COLD-LOAD-STREAM-COMPUTE-MOTION STRING NIL NIL X-LEN Y-LEN)))
    ;; Up to rubout
    (MULTIPLE-VALUE (X-LEN Y-LEN)
      (SYS:COLD-LOAD-STREAM-COMPUTE-MOTION
	*COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* START END X-LEN Y-LEN))
    ;; Remember rubout pos
    (SETQ X-DEST X-LEN
	  Y-DEST Y-LEN)
    (COLD-LOAD-LOOP-OVER-NOISE-STRINGS (INDEX STRING END)
      (MULTIPLE-VALUE (X-LEN Y-LEN)
	(SYS:COLD-LOAD-STREAM-COMPUTE-MOTION
	  *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* END INDEX X-LEN Y-LEN))
      (MULTIPLE-VALUE (X-LEN Y-LEN)
	(SYS:COLD-LOAD-STREAM-COMPUTE-MOTION STRING NIL NIL X-LEN Y-LEN))
      (SETF (RHB-NOISE-STRINGS) (DELQ (ASSQ INDEX (RHB-NOISE-STRINGS)) (RHB-NOISE-STRINGS))))
    ;; Rest of buffer
    (MULTIPLE-VALUE (X-LEN Y-LEN)
      (SYS:COLD-LOAD-STREAM-COMPUTE-MOTION
	*COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* END NIL X-LEN Y-LEN))
    (MULTIPLE-VALUE-BIND (X-POS Y-POS) (SYS:COLD-LOAD-STREAM-READ-CURSORPOS)
      (SYS:COLD-LOAD-STREAM-SET-CURSORPOS (- X-POS (- X-LEN X-DEST))
					  (- Y-POS (- Y-LEN Y-DEST)))
      (SYS:COLD-LOAD-STREAM-CLEAR-BETWEEN-CURSORPOSES NIL NIL X-POS Y-POS))))

(DEFSELECT-COLD (COLD-LOAD-STREAM-IO COLD-LOAD-STREAM-IO-DEFAULT-HANDLER)
  (:INSIDE-WIDTH ()
		 *COLD-LOAD-STREAM-WIDTH*)
  (:INSIDE-HEIGHT ()
		  *COLD-LOAD-STREAM-HEIGHT*)
  (:INSIDE-SIZE ()
		(VALUES *COLD-LOAD-STREAM-WIDTH* *COLD-LOAD-STREAM-HEIGHT*))
  (:READ-CURSORPOS (&OPTIONAL (UNITS :PIXEL))
   (MULTIPLE-VALUE-BIND (X Y)
       (SYS:COLD-LOAD-STREAM-READ-CURSORPOS)
     (IF (EQ UNITS :CHARACTER)
	 (VALUES (FLOOR X *COLD-LOAD-STREAM-CHAR-WIDTH*)
		 (FLOOR Y *COLD-LOAD-STREAM-LINE-HEIGHT*))
	 (VALUES X Y))))
  (:SET-CURSORPOS (X Y &OPTIONAL (UNITS :PIXEL))
   (WHEN (EQ UNITS :CHARACTER)
     (WHEN X (SETQ X (* X *COLD-LOAD-STREAM-CHAR-WIDTH*)))
     (WHEN Y (SETQ Y (* Y *COLD-LOAD-STREAM-LINE-HEIGHT*))))
   (SYS:COLD-LOAD-STREAM-SET-CURSORPOS
     (WHEN X (MAX 0 (MIN *COLD-LOAD-STREAM-WIDTH* X)))
     (WHEN Y (MAX 0 (MIN *COLD-LOAD-STREAM-HEIGHT* y)))))
  (:CHARACTER-WIDTH (CHAR &OPTIONAL FONT X)
   FONT						;Ignored
   (UNLESS X
     (SETQ X (SYS:COLD-LOAD-STREAM-READ-CURSORPOS)))
   (IF (CHAR= CHAR #\TAB)
       (LET ((TAB-WIDTH (* 8 *COLD-LOAD-STREAM-CHAR-WIDTH*)))
	 (- (* (// (+ X TAB-WIDTH) TAB-WIDTH) TAB-WIDTH) X))
       (SYS:COLD-LOAD-STREAM-COMPUTE-MOTION (STRING CHAR) 0 1 0 0)))
  (:STRING-LENGTH (STRING &OPTIONAL (START 0) END)
   (SYS:COLD-LOAD-STREAM-COMPUTE-MOTION STRING START END 0 0))
  (:HOME-CURSOR ()
		(COLD-LOAD-STREAM-IO :SET-CURSORPOS 0 0))
  (:TYO (CHAR)
   (COLD-LOAD-STREAM-TYO CHAR))
  (:CLEAR-REST-OF-LINE ()    
		       (SYS:COLD-LOAD-STREAM-CLEAR-BETWEEN-CURSORPOSES NIL NIL NIL -1))
  (:CLEAR-WINDOW ()
		 (COLD-LOAD-STREAM-IO :HOME-CURSOR)
		 (COLD-LOAD-STREAM-IO :CLEAR-REST-OF-WINDOW))
  (:CLEAR-REST-OF-WINDOW ()
			 (SYS:COLD-LOAD-STREAM-CLEAR-BETWEEN-CURSORPOSES NIL NIL NIL NIL))
  (:FRESH-LINE ()
	       (COND ((ZEROP (SYS:COLD-LOAD-STREAM-READ-CURSORPOS))
		      (COLD-LOAD-STREAM-IO :CLEAR-REST-OF-LINE)
		      NIL)
		     (T
		      (COLD-LOAD-STREAM-IO :TYO #\NEWLINE)
		      T)))
  (:UNTYI (CHAR)
   (COND ((LISTP CHAR)
	  (SETQ *COLD-LOAD-STREAM-ACTIVATOR* CHAR))
	 ((OR (NOT RUBOUT-HANDLER) (ZEROP (RHB-SCAN-POINTER)))
	  (SETQ *COLD-LOAD-STREAM-UNRCHF* CHAR))
	 (T
	  (DECF (RHB-SCAN-POINTER)))))
  (:LISTEN ()
	   (OR *COLD-LOAD-STREAM-UNRCHF*
	       *COLD-LOAD-STREAM-ACTIVATOR*
	       (SETQ *COLD-LOAD-STREAM-UNRCHF* (COLD-LOAD-STREAM-GET-INPUT-CHAR T))))
  (:INPUT-WAIT (&OPTIONAL WHOSTATE FUNCTION &REST ARGUMENTS)
   WHOSTATE					;Ignored
   (WITHOUT-INTERRUPTS
     (LOOP UNTIL (OR (COLD-LOAD-STREAM-IO :LISTEN)
		     (APPLY FUNCTION ARGUMENTS)))))
  (:ANY-TYI (&OPTIONAL EOF)
   EOF						;Ignored
   (LET (IDX)
     (COND ((NOT RUBOUT-HANDLER)
	    (IF *COLD-LOAD-STREAM-UNRCHF*
		(PROG1 *COLD-LOAD-STREAM-UNRCHF* (SETQ *COLD-LOAD-STREAM-UNRCHF* NIL))
		;; Cold load stream cannot go blocked while inputting
		(WITHOUT-INTERRUPTS
		  (LOOP THEREIS (COLD-LOAD-STREAM-GET-INPUT-CHAR)))))
	   ((> (RHB-FILL-POINTER)
	       (SETQ IDX (RHB-SCAN-POINTER)))
	    (SETF (RHB-SCAN-POINTER) (1+ IDX))
	    (AREF *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* IDX))
	   (*COLD-LOAD-STREAM-ACTIVATOR*
	    (PROG1 *COLD-LOAD-STREAM-ACTIVATOR* (SETQ *COLD-LOAD-STREAM-ACTIVATOR* NIL)))
	   (T (COLD-LOAD-STREAM-RUBOUT-HANDLER-TYI)))))
  (:TYI (&OPTIONAL EOF)
   EOF						;Ignored
   (LOOP FOR ANY-TYI = (COLD-LOAD-STREAM-IO :ANY-TYI)
	 WHEN (CHARACTERP ANY-TYI)
	   RETURN ANY-TYI))
  (:TYI-NO-HANG (&OPTIONAL EOF)
   EOF						;Ignored
   (AND (CHARACTERP (COLD-LOAD-STREAM-IO :LISTEN))
	(COLD-LOAD-STREAM-IO :TYI)))
  (:LINE-HEIGHT ()
		*COLD-LOAD-STREAM-LINE-HEIGHT*)
  (:CHAR-WIDTH ()
	       *COLD-LOAD-STREAM-CHAR-WIDTH*)
  (:ACTIVATOR ()
	      *COLD-LOAD-STREAM-ACTIVATOR*)
  (:SET-ACTIVATOR (THING)
   (SETQ *COLD-LOAD-STREAM-ACTIVATOR* THING))
  (:RESCANNING-P ()
		 (OR (< (RHB-SCAN-POINTER) (RHB-FILL-POINTER))
		     *COLD-LOAD-STREAM-ACTIVATOR*))
  (:FORCE-RESCAN ()
		 (SETF (RHB-SCAN-POINTER) 0)
		 (THROW 'RUBOUT-HANDLER NIL))
  (:READ-BP ()
	    (RHB-SCAN-POINTER))
  (:INPUT-BUFFER ()
		 *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER*)
  (:REPLACE-INPUT (N-CHARS STRING &OPTIONAL (BEGIN 0) END (RESCAN-MODE :IGNORE))
   (IGNORE RESCAN-MODE)				;Cannot do it in the middle of the line.
   (COND ((= (RHB-SCAN-POINTER) (RHB-FILL-POINTER))
	  (SETQ STRING (STRING STRING))
	  (OR END (SETQ END (STRING-LENGTH STRING)))
	  (COND ((NULL N-CHARS)
		 (SETQ N-CHARS (RHB-SCAN-POINTER)))
		((STRINGP N-CHARS)
		 (SETQ N-CHARS (STRING-LENGTH N-CHARS))
		 (UNLESS ( 0 N-CHARS (RHB-SCAN-POINTER))
		   (FERROR "Attempt to remove ~D characters from the rubout handler buffer; ~
		       there are only ~D characters before the scan pointer."
			   N-CHARS (RHB-SCAN-POINTER)))))
	  (SETQ N-CHARS (MIN (RHB-FILL-POINTER) N-CHARS))	;see next cond clause
	  (COLD-LOAD-ERASE-CHARS N-CHARS)
	  (COLD-LOAD-STREAM-IO :STRING-OUT STRING BEGIN END)
	  (DECF (RHB-FILL-POINTER) N-CHARS)
	  (LET ((NEW-FILL-POINTER (+ (RHB-FILL-POINTER) (- END BEGIN))))
	    (WHEN (> NEW-FILL-POINTER (ARRAY-LENGTH *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER*))
	      (SETQ *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER*
		    (ADJUST-ARRAY-SIZE *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER*
				       NEW-FILL-POINTER)))
	    (COPY-ARRAY-PORTION
	      STRING BEGIN END
	      *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* (RHB-FILL-POINTER) NEW-FILL-POINTER)
	    (SETF (RHB-FILL-POINTER) NEW-FILL-POINTER)
	    (SETF (RHB-SCAN-POINTER) NEW-FILL-POINTER)))
	 ((AND (= (1+ (RHB-SCAN-POINTER)) (RHB-FILL-POINTER))
	       (CHAR-EQUAL (AREF *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* (RHB-SCAN-POINTER))
			   #\SPACE))
	  ;; The CP does this a lot
	  (COLD-LOAD-ERASE-CHARS 1)
	  (DECF (RHB-FILL-POINTER))
	  (COLD-LOAD-STREAM-IO :REPLACE-INPUT N-CHARS STRING BEGIN END)
	  (ARRAY-PUSH-EXTEND *COLD-LOAD-STREAM-RUBOUT-HANDLER-BUFFER* #\SPACE)
	  (COLD-LOAD-STREAM-IO :TYO #\SPACE))))
  (:NOISE-STRING-OUT (STRING &OPTIONAL (RESCAN-MODE :IGNORE))
   (UNLESS *DISABLE-NOISE-STRINGS*
     (LET ((SCAN-POINTER (RHB-SCAN-POINTER))
	   (FILL-POINTER (RHB-FILL-POINTER)))
       (COND ((OR (AND (= SCAN-POINTER FILL-POINTER)
		       (NOT (ASSQ (RHB-SCAN-POINTER) (RHB-NOISE-STRINGS))))
		  (EQ RESCAN-MODE :ENABLE))
	      (SETQ STRING (STRING STRING))
	      (SETF (RHB-NOISE-STRINGS)
		    (NCONC (RHB-NOISE-STRINGS)
			   (NCONS (CONS (RHB-SCAN-POINTER) STRING))))
	      (WHEN (= SCAN-POINTER FILL-POINTER)
		(COLD-LOAD-STREAM-IO :STRING-OUT STRING)))
	     ((EQ RESCAN-MODE :IGNORE))
	     ((EQ RESCAN-MODE :ERROR)
	      (FERROR "Attempt to invoke the :NOISE-STRING-OUT operation with an untyi character present."))
	     (T (FERROR "~S is an unknown rescan mode for :NOISE-STRING-OUT." RESCAN-MODE))))))
  (:DISPLAY-PROMPT (CONTINUATION)
   (FUNCALL CONTINUATION)
   (MULTIPLE-VALUE (*COLD-LOAD-INITIAL-X* *COLD-LOAD-INITIAL-Y*)
     (COLD-LOAD-STREAM-IO :READ-CURSORPOS)))
  ;; Obsolete method
  (:RUBOUT-HANDLER (*INPUT-EDITOR-OPTIONS* READ-FUNCTION &REST READ-ARGS)
   (LEXPR-FUNCALL #'COLD-LOAD-STREAM-IO :INPUT-EDITOR READ-FUNCTION READ-ARGS))
  (:INPUT-EDITOR (READ-FUNCTION &REST READ-ARGS)
   (COLD-LOAD-STREAM-RUBOUT-HANDLER-CATCH READ-FUNCTION READ-ARGS))
  (:CLEAR-INPUT ()
		(SETQ *COLD-LOAD-STREAM-UNRCHF* NIL)
		(SETF (RHB-FILL-POINTER) 0)
		(SETF (RHB-SCAN-POINTER) 0)
		(SETF (RHB-NOISE-STRINGS) NIL)
		(LOOP WHILE (COLD-LOAD-STREAM-GET-INPUT-CHAR T)))
  (:READ-LOCATION ()
		  (RHB-SCAN-POINTER))
  (:SET-LOCATION (LOCATION)
   (SETF (RHB-SCAN-POINTER) LOCATION))
  (:REPLACE-INPUT-SINCE (LOCATION STRING &OPTIONAL (BEGIN 0) END RESCAN-MODE)
   (COLD-LOAD-STREAM-IO :REPLACE-INPUT (- (RHB-SCAN-POINTER) LOCATION)
			STRING BEGIN END RESCAN-MODE))
  (:BEEP (&OPTIONAL BEEP-TYPE)
   BEEP-TYPE					;Ignored
   (SYS:COLD-LOAD-STREAM-BEEP))
  (:FINISH ()
	   ;; Make sure the FEP has finished munging the screen
	   (SYS:COLD-LOAD-STREAM-FINISH)
	   (SETQ TV:KBD-LAST-ACTIVITY-TIME (TIME)))
  (:SELECT ()
	   (COLD-LOAD-STREAM-IO :FINISH)
	   (SETF *COLD-LOAD-STREAM-SELECTED* T)
	   (SYS:COLD-LOAD-STREAM-SELECT T))
  (:DESELECT ()
	     (SYS:COLD-LOAD-STREAM-SELECT NIL)
	     (COLD-LOAD-STREAM-IO :FINISH)
	     (SETF *COLD-LOAD-STREAM-SELECTED* NIL))
  (:INTERACTIVE () T)
  (:CONDITIONAL-STRING-OUT (STRING)
   ;; This is an utter kludge to make DW::PRINT-COMMA-SEPARATED-1 work in the
   ;; cold-load environment, before DW::FILLING-STREAMs have been loaded
   (COLD-LOAD-STREAM-IO :STRING-OUT STRING))
  )

(DEFVAR *CLS-CONSOLE-CHARS* T)

(DEFUN COLD-LOAD-STREAM-GET-INPUT-CHAR (&OPTIONAL NO-HANG-P)
  #-VLM (DECLARE (IGNORE NO-HANG-P))
  (LET ((SOFT-CHAR
	  (IF (SYSTEM-CASE
		((EMBEDDED DOMINO) NIL)
		(OTHERWISE
		  (AND *CLS-CONSOLE-CHARS* (BOUNDP '*MAIN-CONSOLE*) *MAIN-CONSOLE*)))
	      (LET ((HARD-CHAR (CLI::CONSOLE-GET-HARDWARE-CHAR *MAIN-CONSOLE*)))
		(WHEN HARD-CHAR
		  (CLI::CONSOLE-CONVERT-TO-SOFTWARE-CHAR *MAIN-CONSOLE* HARD-CHAR)))
	      ;; As of IFEP Kernel 329.20 on the VLM only,
	      ;; SYS:COLD-LOAD-STREAM-READ-CHARACTER hangs rather than returning NIL.
	      (AND #+VLM (OR (AND (= (SYS:EMB-GUEST-MAJOR-VERSION) 329.)
				  (< (SYS:EMB-GUEST-MINOR-VERSION) 20.))
			     (NOT NO-HANG-P)
			     (SYS:COLD-LOAD-STREAM-LISTEN))
		   #-VLM T 
		   (SYS:COLD-LOAD-STREAM-READ-CHARACTER)))))
    (WHEN SOFT-CHAR
      (SELECTOR SOFT-CHAR CHAR=
	(#\HYPER-CONTROL-FUNCTION)
	(#\CONTROL-SUSPEND
	 (BREAK T))
	(#\CONTROL-META-SUSPEND
	 (COMPILER:INHIBIT-STYLE-WARNINGS (DBG)))
	(#\CONTROL-ABORT
	 (SIGNAL 'SYS:ABORT))
	(OTHERWISE SOFT-CHAR)))))

(DEFUN COLD-LOAD-STREAM-TYO (CH)
  (COLD-LOAD-STREAM-IO :LISTEN)			;make interrupt characters happen
  (COND ((CHAR= CH #\CR)
	 (FLET ((CURSOR-Y ()
		  (LET (X Y)
		    (MULTIPLE-VALUE (X Y) (SYS:COLD-LOAD-STREAM-READ-CURSORPOS))
		    (IGNORE X)
		    Y)))
	   (COLD-LOAD-STREAM-IO :SET-CURSORPOS 0 (+ (CURSOR-Y)
						    *COLD-LOAD-STREAM-LINE-HEIGHT*))
	   (WHEN (> (+ (CURSOR-Y) (* *COLD-LOAD-STREAM-LINE-HEIGHT* 2))
		    *COLD-LOAD-STREAM-HEIGHT*)
	     (COND ((AND TV:MORE-PROCESSING-TRULY-GLOBAL-ENABLE
			 TV:MORE-PROCESSING-GLOBAL-ENABLE)
		    (COLD-LOAD-STREAM-IO :CLEAR-REST-OF-LINE)
		    (COLD-LOAD-STREAM-IO :STRING-OUT "**MORE**")
		    (LET ((CHAR (COLD-LOAD-STREAM-IO :TYI)))
		      (COLD-LOAD-STREAM-IO :SET-CURSORPOS 0 (CURSOR-Y))
		      (COLD-LOAD-STREAM-IO :CLEAR-REST-OF-LINE)
		      (COLD-LOAD-STREAM-IO :HOME-CURSOR)
		      (SELECTOR CHAR CHAR=
			(#\SUSPEND (BREAK T))
			(#\ABORT (SIGNAL 'SYS:ABORT))
			(#\SPACE)
			(OTHERWISE #||(COLD-LOAD-STREAM-IO :UNTYI CHAR)||#))))
		   (T
		    (COLD-LOAD-STREAM-IO :SET-CURSORPOS 0 (CURSOR-Y))
		    (COLD-LOAD-STREAM-IO :CLEAR-REST-OF-LINE)
		    (COLD-LOAD-STREAM-IO :HOME-CURSOR))))
	   (COLD-LOAD-STREAM-IO :CLEAR-REST-OF-LINE)))
	((CHAR= CH #\TAB)
	 (DOTIMES (I (- 8 (\ (// (SYS:COLD-LOAD-STREAM-READ-CURSORPOS)
				 *COLD-LOAD-STREAM-CHAR-WIDTH*)
			     8)))
	   (DECLARE (IGNORE I))
	   (COLD-LOAD-STREAM-IO :TYO #\SP)))
	((AND (ZEROP (CHAR-CHAR-SET-INDEX CH)) (NOT (SI:DIACRITIC-CHAR-P CH)))
	 (AND ( (+ (SYS:COLD-LOAD-STREAM-READ-CURSORPOS)
		    (SYS:COLD-LOAD-STREAM-COMPUTE-MOTION (STRING CH) 0 1 0 0))
		 *COLD-LOAD-STREAM-WIDTH*)
	      (COLD-LOAD-STREAM-IO :TYO #\CR))	;End of line exception
	 (SYS:COLD-LOAD-STREAM-DRAW-CHARACTER CH))
	(T (LET ((CHNAME (CHAR-NAME CH)))
	     (WHEN CHNAME
	       ;; This won't work in the initial cold-load environment, hopefully no one
	       ;; will touch those keys then, but if they do we just type nothing.
	       ;; This code is like SHEET-DISPLAY-LOZENGED-STRING
	       ;; Not sure how to recognize imminent line wrap with lozenged string
	       ;;   since compute-motion won't recognize it. 
	       ;; Assume for now not a critical case and work on it later
	       (SYS:COLD-LOAD-STREAM-DISPLAY-LOZENGED-STRING CHNAME)))))
  CH)



(DEFUN INITIALIZE-COLD-LOAD-STREAM ()
  (INITIALIZE-CONSOLE)
  ;; This will synchronize the kludge stream, set its size, and turn on its blinker
  ;; IFEP alternate to learning the size information 
  (MULTIPLE-VALUE (*COLD-LOAD-STREAM-WIDTH* *COLD-LOAD-STREAM-HEIGHT*)
    (SYS:COLD-LOAD-STREAM-INSIDE-SIZE))
  (MULTIPLE-VALUE (*COLD-LOAD-STREAM-CHAR-WIDTH* *COLD-LOAD-STREAM-LINE-HEIGHT*)
    (SYS:COLD-LOAD-STREAM-COMPUTE-MOTION (STRING-APPEND #\RETURN #\SPACE) NIL NIL 0 0))
  NIL)
