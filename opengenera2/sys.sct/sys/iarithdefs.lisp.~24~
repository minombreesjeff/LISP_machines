;;; -*- Package:SYSTEM-INTERNALS; Mode:LISP; Base:8; Syntax: Zetalisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; I machine arithmetic macrology
;;;
;;; The format of the dispatch vector is
;;; Opcode<4:0>|Arg1<34:32>|Arg2<34:32>
;;; For unary instructions, Arg2 is as though it were DTP-FIXNUM
;;;

(DEFCONST *BINARY-ARITHMETIC-OPERATION-NAME-ALIST*
	  '(((EQL) (EQL EQL-NO-POP) EQL EQL-NO-POP)
	    ((EQUAL = EQUAL-NUMBER) (EQUAL-NUMBER EQUAL-NUMBER-NO-POP)
	     EQUAL EQUAL-NUMBER-NO-POP)
	    ((GREATERP >) (GREATERP GREATERP-NO-POP) LESSP LESSP-NO-POP)
	    ((LESSP <) (LESSP LESSP-NO-POP) GREATERP GREATERP-NO-POP)
	    ((PLUS + ADD) (ADD) ADD)
	    ((DIFFERENCE - SUBTRACT) (SUB))
	    ((TIMES * MULTIPLY) (MULTIPLY) MULTIPLY)
	    ((QUOTIENT // DIVIDE) (QUOTIENT))
	    ((RATIONAL-QUOTIENT) (RATIONAL-QUOTIENT))
	    ((CEILING) (CEILING))
	    ((FLOOR) (FLOOR))
	    ((TRUNCATE) (TRUNCATE))
	    ((ROUND) (ROUND))
	    ((MAX) (MAX) MAX)
	    ((MIN) (MIN) MIN)
	    ((AND LOGAND) (LOGAND) LOGAND)
	    ((OR LOGIOR) (LOGIOR) LOGIOR)
	    ((XOR LOGXOR) (LOGXOR) LOGXOR)
	    ((LOGTEST) (LOGTEST LOGTEST-NO-POP) LOGTEST LOGTEST-NO-POP)
	    ((ASH) (ASH))))

(DEFCONST *UNARY-ARITHMETIC-OPERATION-NAME-ALIST*
	  '(((PLUSP) (PLUSP))
	    ((MINUSP) (MINUSP))
	    ((ZEROP) (ZEROP))
	    ((MINUS -) (UNARY-MINUS))))

(DEFCONST *NUMBER-TYPE-NAMES-ALIST*
	  '(((FIXNUM CL:FIXNUM) DTP-FIXNUM)
	    ((FLOAT CL:SINGLE-FLOAT FLONUM) DTP-SINGLE-FLOAT)
	    ((DOUBLE DOUBLE-FLOAT) DTP-DOUBLE-FLOAT)
	    ((BIGNUM BIG) DTP-BIGNUM)
	    ((RATIO RATIONAL RAT) DTP-BIG-RATIO DTP-SMALL-RATIO)
	    ((BIG-RATIO) DTP-BIG-RATIO)
	    ((SMALL-RATIO) DTP-SMALL-RATIO)
	    ((COMPLEX) DTP-COMPLEX)))

(EVAL-WHEN (COMPILE LOAD EVAL)
(DEFUN DECODE-DEFNUMOP-ARGS (NAME BVL)
  (DECLARE (VALUES ARGLIST BVL-TYPES ARG1-TYPES ARG2-TYPES OPS OP-NAME CONVERSES))
  (FLET ((ARG-TYPES (SPEC)
	   (LET ((RESULT NIL))
	     (DOLIST (ELT SPEC)
	       (LET ((TYPE (CDR (CL:ASSOC ELT *NUMBER-TYPE-NAMES-ALIST* :TEST #'MEMQ))))
		 (UNLESS TYPE
		   (ERROR "Illegal types specified in DEFNUMOP"))
		 (TYPECASE TYPE
		   (:LIST (DOLIST (TYPE TYPE) (CL:PUSHNEW TYPE RESULT)))
		   (:SYMBOL (CL:PUSHNEW TYPE RESULT)))))
	     RESULT)))
    (LET* ((BVL (MAPCAR #'(LAMBDA (X)
			    (TYPECASE X
			      (:SYMBOL (LIST NIL X))
			      (:LIST X)))
			BVL))
	   (OP-ENTRY (CL:ASSOC NAME
			       (SELECTQ (LENGTH BVL)
				 (1 *UNARY-ARITHMETIC-OPERATION-NAME-ALIST*)
				 (2 *BINARY-ARITHMETIC-OPERATION-NAME-ALIST*))
			       :TEST #'MEMQ)))
      (VALUES
	(LIST* (MAPCAR #'FIRST BVL))
	(MAPCAR #'SECOND BVL)
	(ARG-TYPES (CDR (FIRST BVL)))
	(SELECTQ (LENGTH BVL)
	  (1 '(DTP-FIXNUM))
	  (2 (ARG-TYPES (CDR (SECOND BVL)))))
	(SECOND OP-ENTRY)
	(FIRST (FIRST OP-ENTRY))
	(LET ((CONVERSE (THIRD OP-ENTRY)))
	  (WHEN CONVERSE
	    (SECOND (CL:ASSOC CONVERSE
			      (SELECTQ (LENGTH BVL)
				(1 *UNARY-ARITHMETIC-OPERATION-NAME-ALIST*)
				(2 *BINARY-ARITHMETIC-OPERATION-NAME-ALIST*))
			      :TEST #'MEMQ))))))))

(DEFUN DEFNUMOP-HANDLER-NAME (NAME BVL-TYPES)
  (INTERN
    (LEXPR-FUNCALL #'STRING-APPEND "ARITHMETIC-OPERATION-" NAME
		   (LOOP FOR TYPE IN BVL-TYPES
			 COLLECT "-"
			 COLLECT TYPE))))
)
      
(DEFMACRO DEFNUMOP (NAME BVL &BODY BODY)
  (FLET ((ARITHMETIC-TRAP-VECTOR-OFFSET (INSTRUCTION ARG1-TYPE ARG2-TYPE)
	  (+ %ARITHMETIC-INSTRUCTION-EXCEPTION-VECTOR
	     (DPB (ILC:OPCODE-FOR-INSTRUCTION INSTRUCTION)
		  (BYTE 5. 6.)
		  (DPB (SYMEVAL ARG1-TYPE) (BYTE 3. 3.)
		       (DPB (SYMEVAL ARG2-TYPE) (BYTE 3. 0) 0))))))
    (MULTIPLE-VALUE-BIND (ARGLIST BVL-TYPES ARG1-TYPES ARG2-TYPES OPS OP-NAME CONVERSES)
	(DECODE-DEFNUMOP-ARGS NAME BVL)
      (LET* ((OP (FIRST OPS))
	     (NO-POP (SECOND OPS))
	     (CONVERSE-OP (FIRST CONVERSES))
	     (CONVERSE-NO-POP (SECOND CONVERSES))
	     (CONVERSE-FUNCTION-P (AND CONVERSE-OP
				       (IF (EQUAL OP CONVERSE-OP)
					   (NOT (EQUAL ARG1-TYPES ARG2-TYPES))
					   T)))
	     (N-VALUES (ILC:GET-OPCODE-N-RETURNED (ILC:OPCODE-FOR-INSTRUCTION OP)))
	     (TRAP-VALUES)
	     (CONVERSE-TRAP-VALUES)
	     (NO-POP-TRAP-VALUES)
	     (CONVERSE-NO-POP-TRAP-VALUES))
	;; Compute the trap vector entries
	(LOOP FOR ARG1-TYPE IN ARG1-TYPES DOING
	  (LOOP FOR ARG2-TYPE IN ARG2-TYPES DOING
	    (CL:PUSHNEW (ARITHMETIC-TRAP-VECTOR-OFFSET OP ARG1-TYPE ARG2-TYPE) TRAP-VALUES)
	    (WHEN NO-POP
	      (CL:PUSHNEW (ARITHMETIC-TRAP-VECTOR-OFFSET NO-POP ARG1-TYPE ARG2-TYPE)
			  NO-POP-TRAP-VALUES))
	    (WHEN CONVERSE-OP
	      (IF CONVERSE-FUNCTION-P
		  (CL:PUSHNEW (ARITHMETIC-TRAP-VECTOR-OFFSET CONVERSE-OP ARG2-TYPE ARG1-TYPE)
			      CONVERSE-TRAP-VALUES)
		  (CL:PUSHNEW (ARITHMETIC-TRAP-VECTOR-OFFSET CONVERSE-OP ARG2-TYPE ARG1-TYPE)
			      TRAP-VALUES)))
	    (WHEN CONVERSE-NO-POP
	      (CL:PUSHNEW (ARITHMETIC-TRAP-VECTOR-OFFSET CONVERSE-NO-POP ARG2-TYPE ARG1-TYPE)
			  CONVERSE-NO-POP-TRAP-VALUES))))
	(LET ((FNAME)
	      (CONVERSE-FNAME)
	      (NO-POP-FNAME)
	      (CONVERSE-NO-POP-FNAME)
	      (DECLARE-STORAGE-CATEGORY T))
	  `(PROGN
	     ,(COND ((AND (NULL (CDR BODY))
			  (SYMBOLP (CAR BODY)))
		     (SETQ FNAME (CAR BODY) CONVERSE-FNAME (CAR BODY))
		     (WHEN NO-POP
		       (SETQ NO-POP-FNAME
			     (FINTERN "NO-POP-~s" (CAR BODY))
			     CONVERSE-NO-POP-FNAME
			     (FINTERN "NO-POP-~s" (CAR BODY))))
		     NIL)
		    (T (SETQ FNAME (DEFNUMOP-HANDLER-NAME OP-NAME BVL-TYPES))
		       (WHEN NO-POP
			 (SETQ NO-POP-FNAME (FINTERN "NO-POP-~s" FNAME)))
		       (WHEN CONVERSE-FUNCTION-P
			 (SETQ CONVERSE-FNAME
			       (DEFNUMOP-HANDLER-NAME (FIRST CONVERSES) (REVERSE BVL-TYPES))))
		       (WHEN CONVERSE-NO-POP
			 (SETQ CONVERSE-NO-POP-FNAME
			       (IF CONVERSE-FUNCTION-P
				   (FINTERN "NO-POP-~s" CONVERSE-FNAME)
				   (FINTERN "NO-POP-CONVERSE-~s"
					    (DEFNUMOP-HANDLER-NAME (FIRST CONVERSES)
								   (REVERSE BVL-TYPES))))))
		       (MULTIPLE-VALUE-BIND (DECLS REAL-BODY)
			   (SYS:FIND-BODY-DECLARATIONS BODY NIL)
			 (LOOP NAMED SCAN-DECLS FOR DECL IN DECLS
			       WHEN (AND (CL:CONSP DECL)
					 (EQ (CAR DECL) 'DECLARE))
				 DO (LOOP FOR DECL IN (CDR DECL)
					  WHEN (AND (CL:CONSP DECL)
						    (CL:MEMBER (CAR DECL)
							       '(SYS:SAFEGUARDED-FUNCTION
								 SYS:WIRED-FUNCTION)))
					    DO (RETURN-FROM SCAN-DECLS
						 (SETQ DECLARE-STORAGE-CATEGORY NIL))))
			 `(PROGN
			    (DEFUN-HANDLER ,FNAME ,ARGLIST ,N-VALUES ,NAME
			      (DECLARE (DBG:ERROR-REPORTER))
			      ,@(WHEN DECLARE-STORAGE-CATEGORY
				  `((DECLARE (SYS:SAFEGUARDED-FUNCTION
					       SYS:DISABLE-REFERENCE-VALIDATION))))
			      ,@DECLS
			      (BLOCK ,NAME
				,@REAL-BODY))
			    ,@(WHEN NO-POP
				`((DEFUN-HANDLER ,NO-POP-FNAME ,ARGLIST ,(1+ N-VALUES) ,NAME
				  (DECLARE (DBG:ERROR-REPORTER))
			      ,@(WHEN DECLARE-STORAGE-CATEGORY
				  `((DECLARE (SYS:SAFEGUARDED-FUNCTION
					       SYS:DISABLE-REFERENCE-VALIDATION))))
				  ,@DECLS
				  (VALUES ,(FIRST ARGLIST)
					  (BLOCK ,NAME
					    ,@REAL-BODY)))))
			    ,@(WHEN CONVERSE-FUNCTION-P
				`((DEFUN-HANDLER ,CONVERSE-FNAME ,(REVERSE ARGLIST) ,N-VALUES
						 ,NAME
				    (DECLARE (DBG:ERROR-REPORTER))
				    ,@(WHEN DECLARE-STORAGE-CATEGORY
					`((DECLARE (SYS:SAFEGUARDED-FUNCTION
						    SYS:DISABLE-REFERENCE-VALIDATION))))
				    ,@DECLS
				    (BLOCK ,NAME
				      ,@REAL-BODY))))
			    ,@(WHEN CONVERSE-NO-POP
				`((DEFUN-HANDLER ,CONVERSE-NO-POP-FNAME ,(REVERSE ARGLIST)
						 ,(1+ N-VALUES)
						 ,NAME
				    (DECLARE (DBG:ERROR-REPORTER))
				    ,@(WHEN DECLARE-STORAGE-CATEGORY
					`((DECLARE (SYS:SAFEGUARDED-FUNCTION
						     SYS:DISABLE-REFERENCE-VALIDATION))))
				    ,@DECLS
				    (VALUES ,(FIRST (REVERSE ARGLIST))
					    (BLOCK ,NAME
					      ,@REAL-BODY)))))
			    ))))
	     ,@(LOOP FOR TRAP-LOC IN TRAP-VALUES
		     COLLECT `(SET-TRAP-VECTOR-ENTRY
				,TRAP-LOC TRAP-MODE-EMULATOR
				',(INTERN (STRING-APPEND FNAME "-TRAP-HANDLER"))))
	     ,@(LOOP FOR TRAP-LOC IN NO-POP-TRAP-VALUES
		     COLLECT `(SET-TRAP-VECTOR-ENTRY
				,TRAP-LOC TRAP-MODE-EMULATOR
				',(INTERN (STRING-APPEND NO-POP-FNAME "-TRAP-HANDLER"))))
	     ,@(LOOP FOR TRAP-LOC IN CONVERSE-TRAP-VALUES
		     COLLECT `(SET-TRAP-VECTOR-ENTRY
				,TRAP-LOC TRAP-MODE-EMULATOR
				',(INTERN (STRING-APPEND
					    CONVERSE-FNAME "-TRAP-HANDLER"))))
	     ,@(LOOP FOR TRAP-LOC IN CONVERSE-NO-POP-TRAP-VALUES
		     COLLECT `(SET-TRAP-VECTOR-ENTRY
				,TRAP-LOC TRAP-MODE-EMULATOR
				',(INTERN (STRING-APPEND
					    CONVERSE-NO-POP-FNAME "-TRAP-HANDLER"))))))))))

(DEFMACRO DEFNUMOP-SYNONYM  (NAME BVL SYNONYM)
  (MULTIPLE-VALUE-BIND (NIL BVL-TYPES NIL NIL NIL OP-NAME)
      (DECODE-DEFNUMOP-ARGS SYNONYM BVL)
    `(DEFNUMOP ,NAME ,BVL ,(DEFNUMOP-HANDLER-NAME OP-NAME BVL-TYPES))))

(DEFUN DEFNUMOP-BINARY-CONVERSE-IS-IDENTICAL (NAME)
  (LET ((OP (OR (CL:ASSOC NAME *BINARY-ARITHMETIC-OPERATION-NAME-ALIST* :TEST #'MEMQ)
		(FERROR NIL "DEFNUMOP: Unknown binary operation: ~S" NAME))))
    (EQ OP (CL:ASSOC (THIRD OP) *BINARY-ARITHMETIC-OPERATION-NAME-ALIST* :TEST #'MEMQ))))
