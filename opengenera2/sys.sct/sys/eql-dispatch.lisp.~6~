;;; -*- Mode: LISP; Package: SYSTEM-INTERNALS; Base: 8; Lowercase: please; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; All the code necessary for EQL to work must be in this file.
;;; This file must be loaded before any functions with extended-number constants are loaded.

;;;; BIG

;;;Comparison starts with least signifigant digit on the theory that you
;;;are more likely to be doing (< x (1+ x)) than something that leaves
;;;the low digits alone.
(defnumop = ((x bignum) (y bignum))
  (or (eq x y)
      (and (= (bignum-sign x) (bignum-sign y))
	   (let ((length (bignum-length x)))
	     (and (= (bignum-length y) length)
		  (loop with ref-x = (get-bignum-advancing-pointer x 0)
			with ref-y = (get-bignum-advancing-pointer y 0)
			repeat length
			always (= (bignum-advance-ref ref-x)
				  (bignum-advance-ref ref-y))))))))

;EQL is the same as = for bignums
(defnumop-synonym eql (bignum bignum) =)

;;;; RATIONAL

(defnumop eql ((x ratio) (y ratio))
  (and (= (rational-numerator x) (rational-numerator y))
       (= (rational-denominator x) (rational-denominator y))))

;;;; COMPLEX

(defnumop eql ((x complex) (y complex))
  (and (eql (complex-realpart x) (complex-realpart y))
       (eql (complex-imagpart x) (complex-imagpart y))))

;;;; SINGLE

#+IMACH
(defnumop eql ((x float) (y float))
  (eq x y))

;;;; DOUBLE

;;; EQL is a lot like EQ (not like =)
(defnumop eql ((x double) (y double))
  (and (= (double-high x) (double-high y))
       (= (double-low x) (double-low y))))

;;;; MIXED  (boring)

#+IMach
(defun-handler return-kludge-nil-two-args (x y) 1 nil
  x y
  nil)

#+imach
(defun-handler no-pop-return-kludge-nil-two-args (x y) 2 nil
  y
  (values x nil))

(eval-when (compile)
(defmacro define-not-eql-types (&rest types)
  `(progn . ,(loop with result for (type1 . rest) on types do
	       (loop for type2 in rest do
		 (push `(defnumop eql ((x ,type1) (y ,type2))
			  #+3600 return-nil-two-args
			  #+IMach return-kludge-nil-two-args)
		       result))
		   finally (return result))))
)

(define-not-eql-types bignum rational complex double #+IMach float)
