;;; -*- Package:SYSTEM-INTERNALS; Mode:LISP; Base:8; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; 3600 machine arithmetic manipulations
;;; This file is in the cold load.

(defun fix (number)
  (declare lt:(side-effects simple reducible))
  (cl:typecase number
    (cl:integer number)
    (cl:single-float
      (cli::integer-quotient-single-1 cli::(floor integer t quotient) number))
    (cl:double-float
      (cli::integer-quotient-double-1 cli::(floor integer t quotient) number))
    (cl:otherwise
      #+3600
      (funcall (aref arithmetic-unary-operation-dispatch
		     %arith-op-fix (%numeric-dispatch-index number))
	       number)
      #+IMach
      (values (floor number)))))

(defun abs (number)
  (declare lt:(side-effects simple reducible))
  (cl:etypecase number
    (cl:integer (if (minusp number) (- number) number))
    (cl:single-float (si:%single-floating-abs number))
    (cl:double-float (let ((high (si:double-high number)))
		       (if (minusp high)
			   (si:double-to-consed
			     (si:%double-floating-minus high (si:double-low number)))
			   number)))
    (cl:ratio (let ((numerator (si:rational-numerator number)))
		(if (minusp numerator)
		    (si:%make-rational (- numerator) (si:rational-denominator number))
		    number)))
    (cl:complex (si:complex-abs-components
		  (si:complex-realpart number)
		  (si:complex-imagpart number)))))

(defun haulong (number)
  (declare lt:(side-effects simple reducible))
  (argument-typecase number
    (:fixnum (if (minusp number)
		 (haulong (- number))
		 (let ((n 0))
		   (unless (zerop (ldb (byte 20 20) number))
		     (setq number (ldb (byte 20 20) number))
		     (setq n 16.))
		   (unless (zerop (ldb (byte 10 10) number))
		     (setq number (ldb (byte 10 10) number))
		     (incf n 8))
		   (unless (zerop (ldb (byte 04 04) number))
		     (setq number (ldb (byte 04 04) number))
		     (incf n 4))
		   (unless (zerop (ldb (byte 02 02) number))
		     (setq number (ldb (byte 02 02) number))
		     (incf n 2))
		   (if (zerop (ldb (byte 01 01) number))
		       (+ n number)
		       (+ n 2)))))
    (:bignum (bignum-haulong number))))

;Make a positive 32-bit number out of two 16-bit parts.  This has to be in the
;cold-load because universal times are bignums.
(defun make-32-bit-number (low high)
  (let ((fixnum (%logdpb high (byte 16. 16.) low)))
    (if (minusp fixnum)
	(let ((bignum
		#+3600(%make-structure dtp-extended-number dtp-header-i %header-type-number
				       (dpb %header-type-bignum %%header-subtype-field
					    (dpb 1 %%bignum-length 0))
				       default-cons-area 2)
		#+IMACH(%make-structure dtp-bignum dtp-header-i %header-type-number
					(dpb %header-subtype-bignum %%header-subtype-field
					     (dpb 1 %%bignum-length 0))
					default-cons-area 2)))
	  (%p-store-contents-offset fixnum bignum 1)
	  bignum)
      fixnum)))

#+3600
(defun min-internal (x y)
  (declare (safeguarded-function))
  (if (< x y) x y))

#+3600
(defun max-internal (x y)
  (declare (safeguarded-function))
  (if (> x y) x y))

;; Fixnum-fixnum case should be in microcode.
(defun boole-internal (op x y)
  (declare lt:(side-effects simple reducible)
	   (special boole-op-swap))
  (argument-typecase x
    (:fixnum (argument-typecase y
	       (:fixnum (let ((inverse (- (ldb (byte 01 03) op))))
			  (logxor (selectq (ldb (byte 03 00) (logxor op inverse))
				    (0 0)
				    (1 (logand x y))
				    (2 (logand (lognot x) y))
				    (3 y)
				    (4 (logand x (lognot y)))
				    (5 x)
				    (6 (logxor x y))
				    (7 (logior x y)))
				  inverse)))
	       (:bignum (fixnum-bignum-boole op x y))))
    (:bignum (argument-typecase y
	       (:fixnum (fixnum-bignum-boole (aref boole-op-swap op) y x))
	       (:bignum (bignum-bignum-boole op x y))))))

(defun ^ (num expt)
  (declare lt:(side-effects simple reducible))
  (cond ((zerop expt)
	 (cond ((and (zerop num) (floatp expt))
		;; zero to a floating zero power is an error.
		(float-invalid-operation '^ (list num expt)))
	       (t
		;; Return "one", with data type determined by contagion rules.
		(typecase expt
		  (:fix (typecase num
			  ((:fix :rational) 1)
			  (:double-float 1.0d0)
			  (otherwise 1.0)))
		  (:double-float 1.0d0)
		  (otherwise (if (double-float-p num) 1.0d0 1.0))))))
	((zerop num)
	 (cond ((minusp expt) (error 'zero-to-negative-power ':function '^ ':exponent expt
				     ':operands (list num expt)))
	       (t num)))
	((not (fixp expt))
	 (cond ((double-float-p num)
		(if (zerop num) num
		    (exp (* expt (log num)))))
	       ((double-float-p expt)
		(if (zerop num) 0.0d0
		    (exp (* expt (log (dfloat num))))))
	       (t (if (zerop num) 0.0
		      (exp (* (float expt) (log (float num))))))))
	;; now the exponent is an integer, and neither is zero
	((= num 1)
	 num)					;1^integer, 1.0^integer
	((= num -1)
	 (if (oddp expt) num (- num)))		;-1^integer, -1.0^integer
	((minusp expt)
	 (if (fixp num) 0			;num0, expt<0
	   (// (^ num (- expt)))))
	(t
	 (loop with result = 1 do		;Repeated squaring, careful of overflow
	   (and (bit-test expt 1)
		(setq result (* result num)))
	   (if (zerop (setq expt (ash expt -1)))
	       (return result)
	       (setq num (* num num)))))))

#|  Test suite for exception cases of EXPT.

(defconst *expt-test-cases*
	  '(((^ 0 0) 1)
	    ((^ 0 0.0) float-invalid-operation)
	    ((^ 0.0 0) 1.0)
	    ((^ 0.0 0.0) float-invalid-operation)
	    ((^ 2 3.0) 8.0)
	    ((^ 2.0 3) 8.0)
	    ((^ 3 0.0) 1.0)
	    ((^ 3 0.0d0) 1.0d0)
	    ((^ 3.0 0.0d0) 1.0d0)
	    ((^ 3.0 0) 1.0)
	    ((^ 1.0 0) 1.0)
	    ((^ -3 0) 1)
	    ((^ -3.0 0) 1.0)
	    ((^ -3 0.0) 1.0)
	    ((^ -3.0 0.0) 1.0)
	    ((^ 0 -3) zero-to-negative-power)
	    ((^ 0.0 -3) zero-to-negative-power)
	    ((^ 0 -3.0) zero-to-negative-power)
	    ((^ 0.0 -3.0) zero-to-negative-power)
	    ((^ -3.0 2) 9.0)
	    ((^ -3.0 2.0) non-positive-log)
	    ((^ -1 -1) -1)
	    ((^ -2 -1) 0)
	    ((^ 1 1_50) 1)
	    ((^ -1 1_50) 1)
	    ((^ -1 (1+ 1_50)) -1)
	    ((^ 2 (- 1_50)) 0)
	    ((^ 2 -1) 0)
	    ((^ 1.0 -100) 1.0)
	    ((^ -1.0 -101) -1.0)
	    ((^ 1\4 0) 1)
	    ))

(defun test-expt ()
  (loop with all-correct = t
	for (form expected-answer) in *expt-test-cases* do
	(let ((actual-answer
		(condition-case (err)
		    (eval form)
		  (sys:error (typep err)))))
	  (unless (eql actual-answer expected-answer)
	    (setq all-correct nil)
	    (format t "~%Evaluating ~S, expected ~S but got ~S"
		    form expected-answer actual-answer)))
	finally
	(when all-correct
	  (format t "~%All test cases returned the expected result.")))
  nil)
  |#  ;end of ^ test suite

;;; The LDB-IMMED instruction encountered something other than a fixnum.
;;; We have to reconstruct the PPSS from the instruction.
;;; The result will always be a fixnum.
#+3600
(defun ldb-escape (word)
  (declare (safeguarded-function disable-reference-validation))
  (let* ((pc (frame-return-pc (%stack-frame-pointer)))
	 (inst (if (= (%data-type pc) dtp-odd-pc)
		   (%p-ldb %%q-low-instr pc)
		   (%p-ldb-offset %%q-high-instr pc -1)))
	 (x (l-lisp-compiler:get-10-bit-operand inst))
	 (position (ldb (byte 5 0) (- 32. (ldb (byte 5 0) x))))
	 (size (1+ (ldb (byte 5 5) x))))
    (argument-typecase word
      (:bignum (if (and (= size 32.) (= position 0))
		   (integer-low-bits-as-fixnum word)	;magic so we don't cons a bignum
		   (bignum-load-byte word position size))))))

#+imach
(define-instruction-exception-handler ldb trap-mode-emulator (word &pc pc)
  (declare (safeguarded-function disable-reference-validation)
	   (dbg:error-reporter))
  (let* ((x
	   (if (type-member pc dtp-even-pc)
	       (%p-ldb (byte 10. 0.) pc)
	       (%p-ldb (byte 10. (byte-position %%q-odd-instruction)) pc)))
	 (size (1+ (ldb %%packed-instruction-byte-size-1 x)))
	 (rotation (ldb %%packed-instruction-byte-rotation x)))
    (si:saving-registers-for-trap-for-value
      (argument-typecase word
	(:bignum
	  (if (= size 32.)
	      (if (zerop rotation)
		  (integer-low-bits-as-fixnum word)
		  (signal-proceed-case ((new-argument)
					'sys:wrong-type-datum
					:function 'rot
					:expected-type 'fixnum
					:name 'n
					:bad-value word
					:arg-number 1)
		    (:new-value
		      (rot new-argument rotation))))
	      (bignum-load-byte word (ldb (byte 5. 0.) (- 32. rotation)) size)))))))


;;; The DPB-IMMED instruction encountered something other than a fixnum
;;; We have to reconstruct the PPSS.
#+3600
(defun dpb-escape (byte word)
  (declare (safeguarded-function disable-reference-validation))
  (let* ((pc (frame-return-pc (%stack-frame-pointer)))
	 (inst (if (= (%data-type pc) dtp-odd-pc)
		   (%p-ldb %%q-low-instr pc)
		   (%p-ldb-offset %%q-high-instr pc -1)))
	 (x (l-lisp-compiler:get-10-bit-operand inst))
	 (position (ldb (byte 5 0) x))
	 (size (1+ (ldb (byte 5 5) x))))
    (if (= (+ position size) 32.)
	(argument-typecase word
	  (:fixnum
	    (argument-typecase byte
	      (:bignum (setf byte (integer-low-bits-as-fixnum byte))))
	    (logior (logand word (lognot (lsh -1 position)))
		    (lsh byte position))))
	(argument-typecase word
	  (:fixnum (argument-typecase byte
		     (:fixnum (fixnum-fixnum-deposit-byte word position size byte))
		     (:bignum (fixnum-bignum-deposit-byte word position size byte))))
	  (:bignum (argument-typecase byte
		     (:fixnum (bignum-fixnum-deposit-byte word position size byte))
		     (:bignum (bignum-bignum-deposit-byte word position size byte))))))))

#+imach
(define-instruction-exception-handler dpb trap-mode-emulator (byte word &pc pc)
  (declare (safeguarded-function disable-reference-validation))
  (saving-registers-for-trap-for-value
    (let* ((x
	     (if (type-member pc dtp-even-pc)
		 (%p-ldb (byte 10. 0.) pc)
		 (%p-ldb (byte 10. (byte-position %%q-odd-instruction)) pc)))
	   (size (1+ (ldb %%packed-instruction-byte-size-1 x)))
	   (position (ldb %%packed-instruction-byte-rotation x)))
      (if (= (+ position size) 32.)
	  (argument-typecase word
	    (:fixnum
	      (argument-typecase byte
		(:bignum (setf byte (integer-low-bits-as-fixnum byte))))
	      (logior (logand word (lognot (lsh -1 position)))
		      (lsh byte position))))
	  (argument-typecase word
	    (:fixnum (argument-typecase byte
		       (:fixnum (fixnum-fixnum-deposit-byte word position size byte))
		       (:bignum (fixnum-bignum-deposit-byte word position size byte))))
	    (:bignum (argument-typecase byte
		       (:fixnum (bignum-fixnum-deposit-byte word position size byte))
		       (:bignum (bignum-bignum-deposit-byte word position size byte)))))))))

#+3600
(defun-handler undefined-binary-arithmetic-function (arg1 arg2) 1 nil
  (declare (dbg:error-reporter)
	   (safeguarded-function disable-reference-validation))
  (signal 'dbg:undefined-binary-arithmetic-function-error
	  ':base-frame (%stack-frame-pointer)
	  ':arg-1 arg1
	  ':arg-2 arg2))

#+imach
(defun-handler undefined-binary-arithmetic-function (arg1 arg2) 1 nil
  (declare (dbg:error-reporter)
	   (safeguarded-function disable-reference-validation))
  (signal-proceed-case ((value)
			'dbg:undefined-binary-arithmetic-function-error
			:base-frame (%stack-frame-pointer)
			:macro-pc si:.pc.
			:arg-1 arg1
			:arg-2 arg2)
    (:return-value value)))

#+imach
(defun-handler no-pop-undefined-binary-arithmetic-function (arg1 arg2) 2 nil
  (declare (dbg:error-reporter)
	   (safeguarded-function disable-reference-validation))
  (signal-proceed-case ((value)
			'dbg:undefined-binary-arithmetic-function-error
			:base-frame (%stack-frame-pointer)
			:macro-pc si:.pc.
			:arg-1 arg1
			:arg-2 arg2)
    (:return-value (values arg1 value))))

#+3600
(defun undefined-binary-arithmetic-function-arguments-backwards (arg2 arg1)
  (declare (dbg:error-reporter))
  (signal 'dbg:undefined-binary-arithmetic-function-error
	  ':base-frame (%stack-frame-pointer)
	  ':arg-1 arg1
	  ':arg-2 arg2))

#+3600
(defun-handler undefined-unary-arithmetic-function (arg) 1 nil
  (declare (dbg:error-reporter)
	   (safeguarded-function disable-reference-validation))
  (signal 'dbg:undefined-unary-arithmetic-function-error
	  ':base-frame (%stack-frame-pointer)
	  ':arg arg))

#+imach
(defun-handler undefined-unary-arithmetic-function (arg) 1 nil
  (declare (dbg:error-reporter)
	   (safeguarded-function disable-reference-validation))
  (signal-proceed-case ((value)
			'dbg:undefined-unary-arithmetic-function-error
			:base-frame (%stack-frame-pointer)
			:macro-pc si:.pc.
			:arg arg)
    (:return-value value)))

#+imach
(defnumop greaterp ((arg1 fixnum bignum ratio float double complex)
		    (arg2 complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop greaterp ((arg1 complex)
		    (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop lessp ((arg1 fixnum bignum ratio float double complex)
		 (arg2 complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop lessp ((arg1 complex)
		 (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop max ((arg1 fixnum bignum ratio float double complex)
	       (arg2 complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop max ((arg1 complex)
	       (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop min ((arg1 fixnum bignum ratio float double complex)
	       (arg2 complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop min ((arg1 complex)
	       (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop ash ((arg1 ratio complex)
	       (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop ash ((arg1 fixnum bignum ratio float double complex)
	       (arg2 ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop plusp ((arg1 complex))
  undefined-unary-arithmetic-function)

#+imach
(defnumop minusp ((arg1 complex))
  undefined-unary-arithmetic-function)

#+imach
(defnumop logand ((arg1 fixnum bignum ratio float double complex)
		  (arg2 ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop logand ((arg1 ratio float double complex)
		  (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop logior ((arg1 fixnum bignum ratio float double complex)
		  (arg2 ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop logior ((arg1 ratio float double complex)
		  (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop logxor ((arg1 fixnum bignum ratio float double complex)
		  (arg2 ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop logxor ((arg1 ratio float double complex)
		  (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop logtest ((arg1 fixnum bignum ratio float double complex)
		   (arg2 ratio float double complex))
  undefined-binary-arithmetic-function)

#+imach
(defnumop logtest ((arg1 ratio float double complex)
		   (arg2 fixnum bignum ratio float double complex))
  undefined-binary-arithmetic-function)


;;;; Funny kinds of division

;--- All of these guys could be implemented more efficiently if we wanted to bother

#+3600
(defnumop fix ((f float))
  ;; make sure we do the right thing with INF and NaN
  (with-float-operating-mode ((:round :minus))
    (%convert-single-to-fixnum f)))

(defnumop rational-quotient ((num1 bignum) (num2 float))
  (rational-quotient (float num1) num2))

(defnumop rational-quotient ((num1 float) (num2 bignum))
  (rational-quotient num1 (float num2)))

(defun equal-rational-float (rational float)
  (and (not (zerop float))
       ( (ldb %%single-exponent (%fixnum float))
	  %single-exponent-max)			; not infinite
       (with-float-operating-mode ((:trap-disables :overflow :underflow))
	 (= (float rational) float))))

(defnumop = ((x rational) (y float))
  (equal-rational-float x y))

(defun equal-bignum-float (bignum float)
  (and ( (ldb %%single-exponent (%fixnum float))
	  %single-exponent-max)			; not infinite
       (with-float-operating-mode ((:trap-disables :overflow))
	 (= (float bignum) float))))

(defnumop = ((x bignum) (y float))
  (equal-bignum-float x y))

(defun lessp-bignum-float (bignum float)
  (if (= (ldb %%single-except-sign (%fixnum float))
	 (ldb %%single-except-sign (%fixnum +1e)))
      (plusp float)				; float is infinite
      (with-float-operating-mode ((:trap-disables :overflow))
	(< (float bignum) float))))

(defun lessp-float-bignum (float bignum)
  (if (= (ldb %%single-except-sign (%fixnum float))
	 (ldb %%single-except-sign (%fixnum +1e)))
      (minusp float)				; float is infinite
      (with-float-operating-mode ((:trap-disables :overflow))
	(< float (float bignum)))))

(defun lessp-rational-float (rational float)
  (cond ((zerop float)
	 (minusp (rational-numerator rational)))
	((= (ldb %%single-except-sign (%fixnum float))
	    (ldb %%single-except-sign (%fixnum +1e)))
	 (plusp float))				; float is infinite
	(t
	 (with-float-operating-mode ((:trap-disables :overflow :underflow))
	   (< (float rational) float)))))

(defun lessp-float-rational (float rational)
  (cond ((zerop float)
	 (plusp (rational-numerator rational)))
	((= (ldb %%single-except-sign (%fixnum float))
	    (ldb %%single-except-sign (%fixnum +1e)))
	 (minusp float))			; float is infinite
	(t
	 (with-float-operating-mode ((:trap-disables :overflow :underflow))
	   (< float (float rational))))))

(defnumop < ((x bignum) (y float))
  (lessp-bignum-float x y))

(defnumop < ((x float) (y bignum))
  (lessp-float-bignum x y))

(defnumop < ((x rational) (y float))
  (lessp-rational-float x y))

(defnumop < ((x float) (y rational))
  (lessp-float-rational x y))

#+IMACH(PROGN
(defun-handler min-escape (x y) 1 min
  (if (< x y) x y))

(defun-handler max-escape (x y) 1 max
  (if (> x y) x y))

(defnumop min ((x bignum) (y float))
  (if (lessp-bignum-float x y)
      x y))

(defnumop min ((x ratio) (y float))
  (if (lessp-rational-float x y)
      x y))

(defnumop min ((x bignum) (y fixnum bignum rational)) min-escape)
(defnumop min ((x rational) (y fixnum rational)) min-escape)
(defnumop max ((x bignum) (y fixnum bignum rational)) max-escape)
(defnumop max ((x rational) (y fixnum rational)) max-escape)

(defnumop max ((x bignum) (y float))
  (if (lessp-bignum-float x y)
      y x))

(defnumop max ((x ratio) (y float))
  (if (lessp-rational-float x y)
      y x))
);End #+IMACH

#||
(defun check-min-max-etc ()
  (let ((numbers `(,pi ,(cl:float pi 0.0)
		   3.0
		   4.5 112345216.5
		   123.45001 1.0e-10
		   0 0.0 0.0d0 1.0d-300 1.0e-30 1.0 1.0d0
		   1.4d-315 1.4e-44
		   1254312654376125437861.
		   1 2 3 4 5 6 7
		   12345. 17.
		   ,si:*setz* ,(1+ si:*setz*) ,(1- si:*setz*)
		   ,(* si:*setz* 2) ,(1+ (* si:*setz* 2)) ,(1- (* si:*setz* 2))
		   ,(expt 10. 500.)		;overflow conversion
		   3.14159265 3.14159265d0
		   1\2 3\5 5\12 4\13
		   ,(cl:// 1 (expt 10. 500.))
		   ,(cl:// (expt 3. 1000.) 2))))
    (labels ((check (first second)
	       (let ((min (min first second))
		     (max (max first second)))
		 (unless (or (eq min first) (eq min second))
		   (format t "~& MIN isn't an input -- (MIN ~A ~A) => ~A"
			   first second min))
		 (unless (or (eq max first) (eq max second))
		   (format t "~& MAX isn't an input -- (MAX ~A ~A) => ~A"
			   first second max))
		 (unless (= first second)
		   (unless (< min max)
		     (format t "~& Ordering isn't right -- (MIN ~A ~A) => ~A, MAX = ~A"
			     first second min max))))))
      (loop for first in numbers
	    as -first = (- first) do
	(loop for second in numbers
	      as -second = (- second) do
	  (check first second)
	  (check -first second)
	  (check first -second)
	  (check -first -second))))))
||#

;;; escape functions for microcoded floor, truncate, ceiling, and round.

#+3600
(defun floor-escape ()
  (declare (cl:notinline floor)
	   (safeguarded-function disable-reference-validation))
  (let* ((arg2-ptr (frame-previous-top (%stack-frame-pointer)))
	 (arg1-ptr (%make-pointer-offset dtp-locative arg2-ptr -1)))
    (multiple-value-bind (quo rem)
	(floor (location-contents arg1-ptr) (location-contents arg2-ptr))
      (setf (location-contents arg1-ptr) quo)
      (setf (location-contents arg2-ptr) rem)
      nil)))

#+3600
(defun truncate-escape ()
  (declare (cl:notinline truncate)
	   (safeguarded-function disable-reference-validation))
  (let* ((arg2-ptr (frame-previous-top (%stack-frame-pointer)))
	 (arg1-ptr (%make-pointer-offset dtp-locative arg2-ptr -1)))
    (multiple-value-bind (quo rem)
	(truncate (location-contents arg1-ptr) (location-contents arg2-ptr))
      (setf (location-contents arg1-ptr) quo)
      (setf (location-contents arg2-ptr) rem)
      nil)))

#+3600
(defun ceiling-escape ()
  (declare (cl:notinline ceiling)
	   (safeguarded-function disable-reference-validation))
  (let* ((arg2-ptr (frame-previous-top (%stack-frame-pointer)))
	 (arg1-ptr (%make-pointer-offset dtp-locative arg2-ptr -1)))
    (multiple-value-bind (quo rem)
	(ceiling (location-contents arg1-ptr) (location-contents arg2-ptr))
      (setf (location-contents arg1-ptr) quo)
      (setf (location-contents arg2-ptr) rem)
      nil)))

#+3600
(defun round-escape ()
  (declare (cl:notinline round)
	   (safeguarded-function disable-reference-validation))
  (let* ((arg2-ptr (frame-previous-top (%stack-frame-pointer)))
	 (arg1-ptr (%make-pointer-offset dtp-locative arg2-ptr -1)))
    (multiple-value-bind (quo rem)
	(round (location-contents arg1-ptr) (location-contents arg2-ptr))
      (setf (location-contents arg1-ptr) quo)
      (setf (location-contents arg2-ptr) rem)
      nil)))

(comment
(defun list-undefined-arith-ops (&optional (omit-types '(complex)))
  (loop for ((function) op) in *unary-operation-name-alist*
	as i = (symeval op) do
    (loop for ((type) nil j) in *number-types-name-alist*
	  when (eq (aref arithmetic-unary-operation-dispatch i j)
		   'undefined-unary-arithmetic-function)
	    unless (memq type omit-types)
	      do (format t "~&~S of a ~A is not defined with DEFNUMOP." function type)))
  (loop for ((function) op) in *binary-operation-name-alist*
	as d = (aref arithmetic-binary-operation-dispatch (symeval op)) do
    (loop for ((type1) nil i) in *number-types-name-alist* do
      (loop for ((type2) nil j) in *number-types-name-alist*
	    when (memq (aref d i j)
		       '(undefined-binary-arithmetic-function
			 undefined-binary-arithmetic-function-arguments-backwards))
	      unless (or (memq type1 omit-types) (memq type2 omit-types))
		do (format t "~&~S of a ~A and a ~A is not defined with DEFNUMOP."
			   function type1 type2)))))
)
