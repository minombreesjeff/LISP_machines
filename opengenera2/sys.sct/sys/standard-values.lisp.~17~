;;; -*- Mode: Lisp; Package: System-Internals; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFGENERIC STANDARD-VALUE-ENVIRONMENT-P (STREAM)
  "Asks a stream if it maintains a standard value environment.")

(DEFGENERIC STANDARD-VALUE-ENVIRONMENT-BINDING (STREAM SYMBOL)
  "Asks a stream with a standard value environment for the standard value of SYMBOL
stored in its environment.  If SYMBOL does not have a standard value local to the 
stream, returns (VALUES NIL NIL). Otherwise it returns the value and T."
  (DECLARE (VALUES STANDARD-VALUE STANDARD-VALUE-PRESENT-P)))

(DEFGENERIC STANDARD-VALUE-ENVIRONMENT-BINDINGS (STREAM)
  "Returns a CONS of NIL and the complete list of standard value bindings maintained
in a stream with a standard value environment.  This is the actual list structure 
maintained by the stream, and may be modified (with care).  The list is an A-LIST
with each item of the form (SYMBOL VALUE).  Note that to look for a symbol in the 
list you must use STANDARD-VALUE-EQ, which handles linked ZL/CL symbols.")

(DEFGENERIC STANDARD-VALUE-ENVIRONMENT-BOUNDP (STREAM SYMBOL)
  "Returns NIL if SYMBOL does not have a standard value in the environment maintained
by STREAM, and non-NIL otherwise.")

(DEFGENERIC (CL:SETF STANDARD-VALUE-ENVIRONMENT-BINDING) (STREAM SYMBOL NEW-VALUE)
  "Changes the standard value associated with SYMBOL in the standard value
environment of STREAM.  This does not validate the value, and should be called
via (SETF (STANDARD-VALUE SYMBOL :LISTENER STREAM) ...)")

(DEFGENERIC DELETE-STANDARD-VALUE-ENVIRONMENT-BINDING (STREAM SYMBOL)
  "Removes any standard value associated with SYMBOL from the standard value
environment of STREAM.")

(DEFSUBST STANDARD-VALUE-EQ (SYM1 SYM2)
  (EQ (LOCF (CL:SYMBOL-VALUE SYM1))
      (LOCF (CL:SYMBOL-VALUE SYM2))))

(DEFSUBST STANDARD-VALUE-P (SYMBOL)
  (LOOKUP-STANDARD-VALUE SYMBOL))

(CL:DEFTYPE STANDARD-VALUE () `(AND CL:SYMBOL (CL:SATISFIES STANDARD-VALUE-P)))

;;;

(DEFFLAVOR STANDARD-VALUE-ENVIRONMENT-MIXIN
	((VALUE-BINDING-ALIST (NCONS NIL)))
	()
  (:READABLE-INSTANCE-VARIABLES (STANDARD-VALUE-ENVIRONMENT-BINDINGS VALUE-BINDING-ALIST))
  (:DOCUMENTATION :SPECIAL-PURPOSE "To be mixed in with a listener.
gives the listener a private standard value context for a specified list
of standard values."))

(DEFMETHOD (STANDARD-VALUE-ENVIRONMENT-P STANDARD-VALUE-ENVIRONMENT-MIXIN) () T)

(DEFMETHOD (STANDARD-VALUE-ENVIRONMENT-BINDING STANDARD-VALUE-ENVIRONMENT-MIXIN) (SYMBOL)
  (CL:CHECK-TYPE SYMBOL STANDARD-VALUE)
  (LET ((BINDING (CL:ASSOC SYMBOL (CDR VALUE-BINDING-ALIST) :TEST #'STANDARD-VALUE-EQ)))
    (IF BINDING
	(VALUES (CDR BINDING) T)
	(VALUES NIL NIL))))

(DEFMETHOD (STANDARD-VALUE-ENVIRONMENT-BOUNDP STANDARD-VALUE-ENVIRONMENT-MIXIN) (SYMBOL)
  (CL:CHECK-TYPE SYMBOL STANDARD-VALUE)
  (CL:ASSOC SYMBOL (CDR VALUE-BINDING-ALIST) :TEST #'STANDARD-VALUE-EQ))

;;; This assumes that the value is already validated.
(DEFMETHOD ((CL:SETF STANDARD-VALUE-ENVIRONMENT-BINDING)
	    STANDARD-VALUE-ENVIRONMENT-MIXIN) (SYMBOL NEW-VALUE)
  (CL:CHECK-TYPE SYMBOL STANDARD-VALUE)
  (LET ((CURRENT-PAIR (CL:ASSOC SYMBOL (CDR VALUE-BINDING-ALIST) :TEST #'STANDARD-VALUE-EQ)))
    (IF CURRENT-PAIR
	(SETF (CDR CURRENT-PAIR) NEW-VALUE)
	(PUSH (CONS SYMBOL NEW-VALUE) (CDR VALUE-BINDING-ALIST)))
    NEW-VALUE))

(DEFMETHOD (DELETE-STANDARD-ENVIRONMENT-BINDING STANDARD-VALUE-ENVIRONMENT-MIXIN) (SYMBOL)
  (CL:CHECK-TYPE SYMBOL STANDARD-VALUE)
  (SETF (CDR VALUE-BINDING-ALIST)
	(CL:DELETE SYMBOL (CDR VALUE-BINDING-ALIST) :KEY #'CAR :TEST #'STANDARD-VALUE-EQ)))

;;; Default for streams that don't say otherwise.
(DEFMETHOD (STANDARD-VALUE-ENVIRONMENT-P STREAM :DEFAULT) () NIL)



;; Note that this returns the list of SYM and VALUE,
;; and should therefore not be globalized.
(DEFSUBST LOOKUP-STANDARD-VALUE (NAME)
  (CL:ASSOC NAME *STANDARD-BINDINGS* :TEST #'STANDARD-VALUE-EQ))

;; Ditto.
(DEFSUBST LOOKUP-INTERACTIVE-VALUE (NAME)
  (CL:ASSOC NAME *INTERACTIVE-BINDINGS* :TEST #'STANDARD-VALUE-EQ))

(DEFSUBST STANDARD-VALUE-BOUNDP (SYM &KEY LISTENER)
  (CL:CHECK-TYPE SYM STANDARD-VALUE)
  (IF LISTENER
      (STANDARD-VALUE-ENVIRONMENT-BOUNDP LISTENER SYM)
      (LOOKUP-INTERACTIVE-VALUE SYM)))

(DEFSUBST STANDARD-VALUE (SYM &KEY (LISTENER NIL)
				   (GLOBAL-P NIL))
  "This accesses the current standard value of a symbol.
The two keywords control which value is retrieved.
if :LISTENER is given, then the value associated with the current lisp
specified lisp listener. A second value of T or NIL is returned to indicate
whether the listener in fact has a binding for the symbol.
:GLOBAL-P T is an error in this case. If :LISTENER is NIL,
and :GLOBAL-P is T, then the global standard value is returned.  If :GLOBAL-P
is NIL, then the current standard value binding is returned if there is one,
and the global value otherwise."
  (CL:CHECK-TYPE SYM STANDARD-VALUE)
  (COND (LISTENER
	 (STANDARD-VALUE-ENVIRONMENT-BINDING LISTENER SYM))
	(GLOBAL-P (CADR (LOOKUP-STANDARD-VALUE SYM)))
	(T (CADR (OR (LOOKUP-INTERACTIVE-VALUE SYM)
		     (LOOKUP-STANDARD-VALUE SYM))))))

(CL:DEFSETF STANDARD-VALUE
	    (SYM &KEY (LISTENER NIL) (GLOBAL-P NIL) (SETQ-P NIL))
	    (NEW-VALUE)
  `(LET ((.NEW-VALUE. ,NEW-VALUE))
     (SETQ-STANDARD-VALUE-2 ,SYM .NEW-VALUE. ,LISTENER ,GLOBAL-P ,SETQ-P)
     .NEW-VALUE.))

(DEFFLAVOR INVALID-STANDARD-VALUE (SYMBOL VALUE REASON) (SYS:ERROR)
  (:INITABLE-INSTANCE-VARIABLES SYMBOL VALUE REASON)
  (:READABLE-INSTANCE-VARIABLES SYMBOL VALUE REASON))

(DEFMETHOD (:REPORT INVALID-STANDARD-VALUE) (STREAM)
  (FORMAT STREAM "The value ~S is invalid for the standard value symbol ~@\PRESENTATION\.~
		  ~@[~%~A~]"
	  VALUE SYMBOL 'SYS:FORM REASON))

(COMPILE-FLAVOR-METHODS INVALID-STANDARD-VALUE)

;; Note: This is D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")not0 in charge of defining new values.
(DEFUN SETQ-STANDARD-VALUE-2 (SYMBOL NEW-VALUE LISTENER GLOBAL-P SETQ-P)
  (CL:CHECK-TYPE SYMBOL STANDARD-VALUE)
  (LET* ((S-PAIR (LOOKUP-STANDARD-VALUE SYMBOL))
	 (I-PAIR (LOOKUP-INTERACTIVE-VALUE SYMBOL))
	 (VALIDATOR (AND S-PAIR (GET (FIRST S-PAIR) 'VALIDATION-FUNCTION))))
    (IF VALIDATOR
	(MULTIPLE-VALUE-BIND (PASSES COMPLAINT)
	    (FUNCALL VALIDATOR NEW-VALUE)
	  (UNLESS PASSES
	    (SIGNAL 'INVALID-STANDARD-VALUE :SYMBOL (CAR S-PAIR)
		    :VALUE NEW-VALUE :REASON (FORMAT NIL COMPLAINT NEW-VALUE)))))
    (IF LISTENER
	(SETF (STANDARD-VALUE-ENVIRONMENT-BINDING LISTENER SYMBOL) NEW-VALUE)
	(IF (OR GLOBAL-P (NULL I-PAIR))		; no interactive that we care about,
						;  set the global
	    (SETF (SECOND S-PAIR) NEW-VALUE)
	    (WHEN I-PAIR			; no global flag, set the interactive
	      (SETF (SECOND I-PAIR) NEW-VALUE))))
    (WHEN SETQ-P
      (IF GLOBAL-P (SET-GLOBALLY SYMBOL NEW-VALUE)
	  (SET SYMBOL NEW-VALUE)))))


;; Standard and interactive bindings hair
(DEFVAR-RESETTABLE *INTERACTIVE-BINDINGS* ())	;should never have a global value!
(DEFVAR-RESETTABLE *REMEMBERED-BINDING-WARNINGS* NIL)

(COMPILER:MAKE-OBSOLETE GET-STANDARD-VALUE "Replaced by STANDARD-VALUE")

(DEFMACRO GET-STANDARD-VALUE (NAME)		
  `(CADR (ASSQ ,NAME *STANDARD-BINDINGS*)))

(COMPILER:MAKE-OBSOLETE GET-INTERACTIVE-VALUE "Replaced by STANDARD-VALUE")

;; Unmodular, but produces better code
(DEFMACRO GET-INTERACTIVE-VALUE (NAME &ENVIRONMENT ENV)
  (ONCE-ONLY (NAME &ENVIRONMENT ENV)
    ;; Use the interactive binding, failing that use the standard one
    `(CADR (OR (ASSQ ,NAME *INTERACTIVE-BINDINGS*)
	       (ASSQ ,NAME *STANDARD-BINDINGS*)))))

(DEFUN SETQ-STANDARD-VALUE-1 (NAME FORM SETQ-P GLOBALLY-P ERROR-P ADD-P)
  (IGNORE ERROR-P)
  (WHEN ADD-P (ERROR "ADD-P is obsolete for ~@\PRESENTATION\."
		     'SETQ-STANDARD-VALUE-1 'SYS:FORM))
  (SETF (STANDARD-VALUE NAME :GLOBAL-P GLOBALLY-P :SETQ-P SETQ-P) FORM))

(DEFUN BIND-INTERACTIVE-VALUE-INTERNAL (NAME VALUE)
  (LET* ((DEFAULT-CONS-AREA WORKING-STORAGE-AREA)
	 (S-PAIR (LOOKUP-STANDARD-VALUE NAME))
	 (VALIDATION-FUNCTION (AND S-PAIR (GET (CAR S-PAIR) 'VALIDATION-FUNCTION))))
    (MULTIPLE-VALUE-BIND (VALUE-OK WHY-NOT)
	(IF VALIDATION-FUNCTION
	    (CONDITION-CASE ()
		 (FUNCALL VALIDATION-FUNCTION VALUE)
	       (ERROR NIL))
	    T)
      (DECLARE (IGNORE WHY-NOT))
      (IF VALUE-OK
	  ;; Push the new binding, shadowing any old ones
	  (PUSH `(,NAME ,VALUE) *INTERACTIVE-BINDINGS*)
	  #||;; Don't warn here, just let the debugger do it.
	  (LET ((BASE 10.) (CL:*PRINT-RADIX* T))
	    (FORMAT ERROR-OUTPUT "~&Warning -- The value ~S for ~@\PRESENTATION\~
                                  ~%  failed the validation function ~Q~:[.~*~;~:* because:~
			          ~%    ~~?~~]~
				  ~&  The standard value will not be changed."
		    VALUE NAME 'SYS:FORM
		    (LAMBDA ()
		      (DW:WITH-OUTPUT-AS-PRESENTATION (:OBJECT VALIDATION-FUNCTION
						       :TYPE   'SYS:EXPRESSION
						       :SINGLE-BOX T
						       :ALLOW-SENSITIVE-INFERIORS NIL)
			(PRIN1 (SYS:FUNCTION-NAME VALIDATION-FUNCTION))))
		    WHY-NOT (LIST VALUE)))
	  ||#))))

;; Binds everything specified by BINDINGS in a PROGW, then binds all the
;; interactive values which do not conform to the standard.  BODY is then
;; run in the new environment
(DEFMACRO WITH-INTERACTIVE-VALUES-BOUND ((BINDINGS &OPTIONAL (WARN-P T) VARS VALS)
					 &BODY BODY)
  (DECLARE (ZWEI:INDENTATION 0 3 1 1))
  (UNLESS VARS (SETQ VARS (GENSYM)))
  (UNLESS VALS (SETQ VALS (GENSYM)))
  `(PROGW ,BINDINGS
     (MULTIPLE-VALUE-BIND (,VARS ,VALS)
	 (GET-INTERACTIVE-BINDINGS)
       (PROGV ,VARS ,VALS
	 ,@(IF WARN-P '((PRINT-ANY-BINDING-WARNINGS)))
	 ,@BODY))))

;; Returns VARS and VALS, which together can be used in a PROGV to bind all
;; the values which do not conform to the standard values
;; listener standard value bindings are bound into the interactive scene
;; by the command loop, and need not be looked at here.
(DEFUN GET-INTERACTIVE-BINDINGS ()
  (DECLARE (VALUES VARS VALS))
  (LET ((DEFAULT-CONS-AREA WORKING-STORAGE-AREA))
    (LOOP FOR (SYMBOL STANDARD-VALUE) IN *STANDARD-BINDINGS*
	  AS OLD-VALUE = (SYMEVAL SYMBOL)
	  AS INTERACTIVE-VALUE = (LOOKUP-INTERACTIVE-VALUE SYMBOL)
	  AS NEW-VALUE = (IF INTERACTIVE-VALUE
			     (SECOND INTERACTIVE-VALUE)
			     STANDARD-VALUE)
	  ;; Collect only bindings whose values are not eql to the standard 
	  WHEN (NOT (EQL OLD-VALUE NEW-VALUE))
	    COLLECT SYMBOL INTO VARS
	    AND COLLECT NEW-VALUE INTO VALS
	    AND DO (PUSH `(,SYMBOL ,OLD-VALUE ,NEW-VALUE) *REMEMBERED-BINDING-WARNINGS*)
	  FINALLY
	    (RETURN (VALUES VARS VALS)))))

(DEFCONST *BINDING-WARNINGS-VERBOSE-P* NIL)
(DEFUN PRINT-ANY-BINDING-WARNINGS (&OPTIONAL (VERBOSE *BINDING-WARNINGS-VERBOSE-P*)
					     (WARN-P T) (INDENT 2))
  (WHEN *REMEMBERED-BINDING-WARNINGS*
    (IF VERBOSE
	(LOOP INITIALLY (WHEN WARN-P (FORMAT ERROR-OUTPUT "~&Note --"))
	      WITH BASE = 10. AND CL:*PRINT-RADIX* = T
	      FOR (SYM OLD NEW) IN *REMEMBERED-BINDING-WARNINGS*
	      DO (FORMAT ERROR-OUTPUT
			 "~&~VTRebinding ~@\PRESENTATION\ to ~S (old value was ~S)~%"
		   INDENT SYM 'SYS:FORM NEW OLD))
      (FORMAT ERROR-OUTPUT (IF WARN-P "~&Rebinding " "~&"))
      (FORMAT ERROR-OUTPUT "~V@T" INDENT)
      (FORMAT-TEXTUAL-LIST *REMEMBERED-BINDING-WARNINGS*
			   #'(LAMBDA (STUFF STREAM)
			       (DESTRUCTURING-BIND (SYM NIL NIL) STUFF
				 (PRESENT SYM 'SYS:FORM :STREAM STREAM)))
			   :CONJUNCTION "and"
			   :STREAM ERROR-OUTPUT))))

(DEFMACRO SETQ-RESETTABLE-VALUE (NAME FORM &OPTIONAL (SETQ-P T) (GLOBALLY-P T))
  `(SETQ-RESETTABLE-VALUE-1 ',NAME ,FORM ,SETQ-P ,GLOBALLY-P NIL))

(DEFMACRO ADD-RESETTABLE-VALUE (NAME FORM &OPTIONAL (SETQ-P T) (GLOBALLY-P T))
  `(SETQ-RESETTABLE-VALUE-1 ',NAME ,FORM ,SETQ-P ,GLOBALLY-P T))

(DEFUN SETQ-RESETTABLE-VALUE-1 (NAME FORM SETQ-P GLOBALLY-P ADD-P)
  (WHEN ADD-P (FERROR "This function can't add bindings any more."))
  (LET ((OLD-VALUE (ASSQ NAME *WARM-BOOT-BINDINGS*)))
    (WHEN (NULL OLD-VALUE)
      (FERROR "~@\PRESENTATION\ was not declared with ~@\PRESENTATION\"
	      NAME 'SYS:FORM 'DEFVAR-RESETTABLE 'FUNCTION))
    ;; Set the value into *WARM-BOOT-BINDINGS*
    (SETF (SECOND OLD-VALUE) FORM)
    (WHEN SETQ-P
      (IF GLOBALLY-P
	  (SET-GLOBALLY NAME FORM)
	  (SET NAME FORM)))))

(DEFUN RESET-WARM-BOOT-BINDINGS ()
  (FLET ((RESET (ENTRY)
	   (LET* ((SYMBOL (POP ENTRY))
		  (VALUE (POP ENTRY))
		  (LOC (IF ENTRY (FIRST ENTRY) (LOCF (SYMEVAL SYMBOL)))))
	     (UNLESS (EQ VALUE (LOCATION-CONTENTS LOC))
	       (SETF (LOCATION-CONTENTS LOC) VALUE)))))
    (MAPC #'RESET *WARM-BOOT-BINDINGS*)
    (MAPC #'RESET *STANDARD-BINDINGS*)
    NIL))

;; Validation function for IBASE (formerly for BASE too)
(DEFUN VALIDATE-BASE (B)
  (AND (FIXNUMP B) (< 1 B 37.)))


(ADD-INITIALIZATION "CDR-code *WARM-BOOT-BINDINGS*"
  '(PROGN (SETQ *WARM-BOOT-BINDINGS* (LT::LOCALIZE-TREE *WARM-BOOT-BINDINGS* 2))
	  (SETQ *STANDARD-BINDINGS* (LT::LOCALIZE-TREE *STANDARD-BINDINGS* 2)))
  '(BEFORE-COLD))

(DEFINE-GC-OPTIMIZATION CDR-CODE-STANDARD-BINDINGS :LAYERED-SYSTEM-RELEASE
  (:DOCUMENTATION
    "Localize the standard-binding lists used in warm-booting and lisp breakpoints")
  (:BEFORE-FLIP (IGNORE)
    (LABELS ((COPY-BINDING (BINDING)
	       (PROG1 (SETF BINDING (COPYLIST BINDING))
		      (SETF (THIRD BINDING) (FOLLOW-CELL-FORWARDING (THIRD BINDING) NIL))))
	     
	     (COPY-BINDINGS (BINDINGS)
	       (CL:SORT (COPYLIST (MAPCAR #'COPY-BINDING BINDINGS)) #'%POINTER-LESSP
			:KEY #'THIRD)))
      (SETQ *WARM-BOOT-BINDINGS* (COPY-BINDINGS *WARM-BOOT-BINDINGS*))
      (SETQ *STANDARD-BINDINGS* (COPY-BINDINGS *STANDARD-BINDINGS*))
      NIL)))
