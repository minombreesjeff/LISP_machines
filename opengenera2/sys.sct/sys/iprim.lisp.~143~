;;; -*- Package:SYSTEM-INTERNALS; Mode:LISP; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Certain lisp primitives that aren't in microcode on the I machine.
;;; These definitions would be otherwise shared, and should therefore be
;;; machine independent.
;;; This file is in the cold load.

;;; From LPRIM.226

(DEFUN SET-TRAP-VECTOR-ENTRY (VECTOR-ENTRY TRAP-MODE FSPEC &OPTIONAL PC-TO-ENTRY-P)
  (LET ((CODE (FDEFINITION FSPEC)))
    (COMPILER:%ERROR-UNLESS (WIRED-OR-SAFEGUARDED-P CODE)
      (ERROR "Attempt to set trap vector ~O to ~S, which is unsafeguarded"
	     VECTOR-ENTRY FSPEC))
    (COND ((EQ VECTOR-ENTRY T)
	   (ERROR "You can only define the catch-all handler in the cold load."))
	  (T
	   (%P-STORE-CDR-TYPE-AND-POINTER
	     (%MAKE-POINTER-OFFSET DTP-LOCATIVE %TRAP-VECTOR-BASE VECTOR-ENTRY)
	     TRAP-MODE
	     DTP-EVEN-PC
	     (IF PC-TO-ENTRY-P
		 CODE
		 (LET ((ENTRY (%P-POINTER CODE)))
		   (%POINTER-PLUS
		     CODE
		     (1+ (- (%LOGLDB %%ENTRY-INSTRUCTION-MAX ENTRY)
			    (%LOGLDB %%ENTRY-INSTRUCTION-MIN ENTRY)))))))))))

;;; This is used to interpreted versions of functions in microcode, since there is
;;; no DTP-U-ENTRY
(DEFMACRO DEFUPRIM (NAME ARGS &BODY DECLARATIONS)
  (LET ((INHIBIT-STYLE-WARNINGS (ASSQ 'INHIBIT-STYLE-WARNINGS DECLARATIONS)))
    ;; This kludge is for when the primitive itself should not be called as
    ;; a function because it has a style-warning on it, e.g., AR-1 and AS-1.
    ;; This just prevents an ugly warning during the cold-load procedure.
    (WHEN INHIBIT-STYLE-WARNINGS
      (SETQ DECLARATIONS (DELQ INHIBIT-STYLE-WARNINGS DECLARATIONS)))
    `(DEFUN ,NAME ,ARGS
       ,@(WHEN DECLARATIONS
	   `((DECLARE ,@DECLARATIONS)))
       ,(IF INHIBIT-STYLE-WARNINGS
	    `(INHIBIT-STYLE-WARNINGS (,NAME ,@ARGS))
	  `(,NAME ,@ARGS)))))


(DEFUPRIM EQ (X Y)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM EQL (X Y)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM ENDP (OBJECT)
  LT:(REPLICABILITY MANY-TIMES)
  LT:(SIDE-EFFECTS REDUCIBLE)		;not SIMPLE because it's used to signal errors
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM CL:LISTP (OBJECT)
  LT:(REPLICABILITY MANY-TIMES)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM NOT (X)
  LT:(REPLICABILITY MANY-TIMES)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM ZEROP (NUMBER)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM PLUSP (NUMBER)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM MINUSP (NUMBER)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM ATOM (OBJECT)
  LT:(REPLICABILITY MANY-TIMES)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM FIXP (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM FLOATP (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM SINGLE-FLOAT-P (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM DOUBLE-FLOAT-P (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM NUMBERP (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM SYMBOLP (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM ARRAYP (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM STRINGP (OBJECT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM LOCATION-BOUNDP (LOCATION)
  LT:(SIDE-EFFECTS READER)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM %INSTANCE-REF (INSTANCE INDEX))
(DEFUPRIM %INSTANCE-SET (VAL INSTANCE INDEX))
(DEFUPRIM %INSTANCE-LOC (INSTANCE INDEX))
(DEFUPRIM LSH (NUMBER COUNT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE CL:FIXNUM))
(DEFUPRIM ROT (N N-BITS)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE CL:FIXNUM))
(DEFUPRIM ASH (NUMBER COUNT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE CL:INTEGER))
(DEFUPRIM RPLACA (CONS X))
(DEFUPRIM RPLACD (CONS X))
(DEFUPRIM RPLACA2 (CONS X))
(DEFUPRIM RPLACD2 (CONS X))

(DEFUPRIM CAR (CONS)
  LT:(SIDE-EFFECTS READER))
(DEFUPRIM CDR (CONS)
  LT:(SIDE-EFFECTS READER))

(DEFUPRIM RGETF (INDICATOR PLIST)
  LT:(SIDE-EFFECTS READER REDUCIBLE))

(DEFUPRIM AR-1 (ARRAY INDEX)
  LT:(SIDE-EFFECTS READER)
  (INHIBIT-STYLE-WARNINGS))
(DEFUPRIM AS-1 (VALUE ARRAY INDEX)
  (INHIBIT-STYLE-WARNINGS))
(DEFUPRIM AP-1 (ARRAY INDEX)
  LT:(SIDE-EFFECTS READER)
  (INHIBIT-STYLE-WARNINGS))  

(DEFUPRIM ARRAY-LEADER (ARRAY INDEX)
  LT:(SIDE-EFFECTS READER))
(DEFUPRIM STORE-ARRAY-LEADER (VALUE ARRAY INDEX))
(DEFUPRIM AP-LEADER (ARRAY INDEX)
  LT:(SIDE-EFFECTS READER))

(DEFUPRIM %MULTIPLY-DOUBLE (X Y)
  LT:(SIDE-EFFECTS SIMPLE)
  (VALUES LOW HIGH))

(DEFUPRIM %POINTER-DIFFERENCE (POINTER-1 POINTER-2)
  LT:(SIDE-EFFECTS READER)
  (COMPILER:RETURN-TYPE CL:FIXNUM))
(DEFUPRIM %POINTER-PLUS (POINTER OFFSET))

(DEFUPRIM %UNSIGNED-LESSP (P1 P2)
  LT:(SIDE-EFFECTS READER)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))

(DEFUPRIM %P-STORE-CONTENTS (POINTER X))

(DEFUPRIM STORE-CONDITIONAL (POINTER OLD NEW))

(DEFUPRIM %ADD-BIGNUM-STEP (DIGIT1 DIGIT2 CARRY)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (VALUES SUM CARRY))
(DEFUPRIM %SUB-BIGNUM-STEP (DIGIT1 DIGIT2 BORROW)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (VALUES DIFFERENCE BORROW))
(DEFUPRIM %LSHC-BIGNUM-STEP (LOW HIGH SHIFT)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (VALUES HIGH-SHIFTED))
(DEFUPRIM %MULTIPLY-BIGNUM-STEP (DIGIT1 DIGIT2)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (VALUES LOW HIGH))
(DEFUPRIM %DIVIDE-BIGNUM-STEP (LOW HIGH DIVISOR)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (VALUES QUO REM))

(DEFUPRIM %32-BIT-PLUS (X Y)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE CL:FIXNUM))
(DEFUPRIM %32-BIT-DIFFERENCE (X Y)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE CL:FIXNUM))

(DEFUPRIM MINUS (NUMBER)
  LT:(SIDE-EFFECTS SIMPLE REDUCIBLE)
  (COMPILER:RETURN-TYPE CL:NUMBER))

#+VLM
(DEFUPRIM %DOUBLE-FLOAT-OP (X-HIGH X-LOW Y-HIGH Y-LOW OPCODE)
  (VALUES HIGH LOW EXCEPTION-P))

(DEFUN %READ-INTERNAL-REGISTER (REGISTER)
  (%JUMP (DBG:ASSEMBLE-HELPER-FUNCTION
	   `((%READ-INTERNAL-REGISTER (:10-BIT-IMMEDIATE ,REGISTER))
	     (RETURN-SINGLE (:10-BIT-IMMEDIATE ,%REGISTER-TOS)))
	   '(#:%READ-INTERNAL-REGISTER-HELPER (DBG:ERROR-REPORTER)))))

(DEFUN %WRITE-INTERNAL-REGISTER (VALUE REGISTER)
  VALUE
  (%JUMP (DBG:ASSEMBLE-HELPER-FUNCTION
	   `((PUSH (FP 2))			;VALUE
	     (%WRITE-INTERNAL-REGISTER (:10-BIT-IMMEDIATE ,REGISTER))
	     (PUSH (FP 2))			;VALUE
	     (RETURN-SINGLE (:10-BIT-IMMEDIATE ,%REGISTER-TOS)))
	   '(#:%WRITE-INTERNAL-REGISTER-HELPER (DBG:ERROR-REPORTER)))))

(DEFUN %COPROCESSOR-READ (COPROCESSOR-ADDRESS)
  (%JUMP (DBG:ASSEMBLE-HELPER-FUNCTION
	   `((%COPROCESSOR-READ (:10-BIT-IMMEDIATE ,COPROCESSOR-ADDRESS))
	     (RETURN-SINGLE (:10-BIT-IMMEDIATE ,%REGISTER-TOS)))
	   '(#:%COPROCESSOR-READ-HELPER (DBG:ERROR-REPORTER)))))

(DEFUN %COPROCESSOR-WRITE (VALUE REGISTER)
  VALUE
  (%JUMP (DBG:ASSEMBLE-HELPER-FUNCTION
	   `((PUSH (FP 2))			;VALUE
	     (%COPROCESSOR-WRITE (:10-BIT-IMMEDIATE ,REGISTER))
	     (PUSH (FP 2))			;VALUE
	     (RETURN-SINGLE (:10-BIT-IMMEDIATE ,%REGISTER-TOS)))
	   '(#:%COPROCESSOR-WRITE-HELPER (DBG:ERROR-REPORTER)))))

(DEFUN %MEMORY-READ-INTERNAL (ADDRESS BITS)
  ADDRESS
  (%JUMP (DBG:ASSEMBLE-HELPER-FUNCTION
	   `((PUSH (FP 2))			;ADDRESS
	     (%MEMORY-READ (:10-BIT-IMMEDIATE ,BITS))
	     (RETURN-SINGLE (:10-BIT-IMMEDIATE ,%REGISTER-TOS)))
	   '(#:%MEMORY-READ-INTERNAL-HELPER (DBG:ERROR-REPORTER)))))

(DEFUN %MEMORY-READ-ADDRESS-INTERNAL (ADDRESS BITS)
  ADDRESS
  (%JUMP (DBG:ASSEMBLE-HELPER-FUNCTION
	   `((PUSH (FP 2))			;ADDRESS
	     (%MEMORY-READ-ADDRESS (:10-BIT-IMMEDIATE ,BITS))
	     (RETURN-SINGLE (:10-BIT-IMMEDIATE ,%REGISTER-TOS)))
	   '(#:%MEMORY-READ-ADDRESS-INTERNAL-HELPER (DBG:ERROR-REPORTER)))))

(DEFUPRIM %MEMORY-WRITE (ADDRESS DATA))

;;; Real managers write self-modifying code.
;(DEFUN %READ-INTERNAL-REGISTER (REGISTER)
;  (%SET-MIN-TRAP-MODE TRAP-MODE-EXTRA-STACK)
;  (%P-DPB REGISTER (BYTE 10. 0) (%POINTER-PLUS #'%READ-INTERNAL-REGISTER 8))
;  (%WRITE-INTERNAL-REGISTER
;    (PROG1 (%READ-INTERNAL-REGISTER %REGISTER-ICACHE-CONTROL)
;	   (%WRITE-INTERNAL-REGISTER 0 %REGISTER-ICACHE-CONTROL))
;    %REGISTER-ICACHE-CONTROL)
;  (COMPILER:NO-OP)
;  (%READ-INTERNAL-REGISTER %REGISTER-BAR-1))
;
;;; Real managers write self-modifying code.
;(DEFUN %WRITE-INTERNAL-REGISTER (VALUE REGISTER)
;  (%SET-MIN-TRAP-MODE TRAP-MODE-EXTRA-STACK)
;  (%P-DPB REGISTER (BYTE 10. 0) (%POINTER-PLUS #'%WRITE-INTERNAL-REGISTER 8))
;  (%WRITE-INTERNAL-REGISTER
;    (PROG1 (%READ-INTERNAL-REGISTER %REGISTER-ICACHE-CONTROL)
;	   (%WRITE-INTERNAL-REGISTER 0 %REGISTER-ICACHE-CONTROL))
;    %REGISTER-ICACHE-CONTROL)
;  (%WRITE-INTERNAL-REGISTER VALUE %REGISTER-BAR-1)
;  (COMPILER:NO-OP)
;  (COMPILER:NO-OP)
;  (COMPILER:NO-OP)
;  VALUE)

;(DEFUPRIM %COPROCESSOR-READ (REGISTER))
;(DEFUPRIM %COPROCESSOR-WRITE (VALUE REGISTER))
;(DEFUPRIM %MEMORY-READ-INTERNAL)
;(DEFUPRIM %MEMORY-READ-ADDRESS-INTERNAL)
(DEFUPRIM %TAG (X)
  LT:(SIDE-EFFECTS READER REDUCIBLE))
(DEFUPRIM %SET-TAG (X TAG)
  LT:(SIDE-EFFECTS READER))
;(DEFUPRIM %MEMORY-WRITE)


(DEFUPRIM SETUP-1D-ARRAY (ARRAY)
  LT:(SIDE-EFFECTS READER)
  (VALUES ARRAY CONTROL BASE-ADDRESS LENGTH))
(DEFUPRIM SETUP-FORCE-1D-ARRAY (ARRAY)
  LT:(SIDE-EFFECTS READER)
  (VALUES ARRAY CONTROL BASE-ADDRESS LENGTH))
(DEFUPRIM %EPHEMERALP (POINTER)
  LT:(SIDE-EFFECTS READER)
  (COMPILER:RETURN-TYPE SCL:BOOLEAN))
(DEFUPRIM COMPILER:NO-OP ())

(DEFUPRIM %HALT ())

#+IMACH
(DEFUN %ASSURE-PDL-ROOM (N)
  (UNLESS (< (+ (LDB %%CR.CALLER-FRAME-SIZE
		     (%READ-INTERNAL-REGISTER %REGISTER-CONTROL-REGISTER))
	      N)
	     (- CONTROL-STACK-MAX-FRAME-SIZE 1))	;Allow for return-kludge-0
    (ERROR "Attempt to make a stack frame larger than ~s" (1- CONTROL-STACK-MAX-FRAME-SIZE))))

;;; To change the control register trap mode atomically, we do a
;;; function call, DPB into the saved control register, and then return,
;;; letting the register be restored to its new value.
(DEFWIREDFUN %SET-TRAP-MODE (NEW-MODE)
  (%P-DPB NEW-MODE %%CR.TRAP-MODE (CLI::%SAVED-CONTROL-REGISTER-ADDRESS))
  NIL)

(DEFWIREDFUN %SET-MIN-TRAP-MODE (MIN-MODE)
  (%P-DPB (MAX (%TRAP-MODE) MIN-MODE) %%CR.TRAP-MODE (CLI::%SAVED-CONTROL-REGISTER-ADDRESS)))

#-VLM
(DEFWIREDFUN %CLEAR-INSTRUCTION-CACHE ()
  ;; Change the icache control register without interrupts, so as to prevent various
  ;; random code that may happen as a result of taking an interrupt does not run with
  ;; the icache disabled when it is expected to be enabled.
  (%SET-TRAP-MODE TRAP-MODE-IO)
  (LET ((OLD-ICACHE (%READ-INTERNAL-REGISTER %REGISTER-ICACHE-CONTROL)))
    (%WRITE-INTERNAL-REGISTER (LOGAND (LOGNOT (DPB -1 %%ICACHE-ENABLE 0)) OLD-ICACHE)
			      %REGISTER-ICACHE-CONTROL)
    (%WRITE-INTERNAL-REGISTER OLD-ICACHE %REGISTER-ICACHE-CONTROL)
    NIL))

#+VLM
(DEFWIREDFUN %CLEAR-INSTRUCTION-CACHE ()
  (%COPROCESSOR-WRITE 0 %COPROCESSOR-REGISTER-FLUSH-ID-CACHES))

(DEFWIREDFUN ARRAY-REGISTER-EVENT ()
  ;; Put ourselves into IO mode so we don't get interrupted
  (%SET-TRAP-MODE TRAP-MODE-IO)
  ;; Now we can bump the event count atomically
  ;; Bits 22 through 31 must be 0.  By convention, the array register event count
  ;; is never zero, so we return 1 in this case (I Arch Spec).
  (LET ((VAL (LDB (BYTE 22. 0.) (1+ (%READ-INTERNAL-REGISTER %REGISTER-EVENT-COUNT)))))
    (COMPILER:%ERROR-WHEN (ZEROP VAL) (INCF VAL))
    (SETF (%READ-INTERNAL-REGISTER %REGISTER-EVENT-COUNT) VAL)
    ;; Returning will put the control register back to its previous value
    NIL))

#+VLM
(DEFWIREDFUN HIDDEN-ARRAY-REGISTER-EVENT (ARRAY)
  (%COPROCESSOR-WRITE (%POINTER ARRAY) %COPROCESSOR-REGISTER-FLUSH-HIDDEN-ARRAY-REGISTERS))

(DEF-TRAP-HANDLER PULL-APPLY-ARGS-TRAP-HANDLER
		  (%PULL-APPLY-ARGS-TRAP-VECTOR TRAP-MODE-EMULATOR)
       (TRAP-VECTOR-INDEX FAULT-PC ARGS-TO-PULL APPLY-ARGUMENT)
  (DECLARE (WIRED-FUNCTION) (IGNORE TRAP-VECTOR-INDEX FAULT-PC))
  (LOOP FOR ARGS-NOT-PUSHED DOWNFROM ARGS-TO-PULL
	WITH ARGS-PUSHED
	WHILE APPLY-ARGUMENT
	UNTIL (ZEROP ARGS-NOT-PUSHED)
	DOING
    ;; this gets turned into a push-car-set-to-cdr instruction
    (%PUSH (CAR APPLY-ARGUMENT))
    (SETQ APPLY-ARGUMENT (CDR APPLY-ARGUMENT))
	FINALLY
	  (SETQ ARGS-PUSHED (- ARGS-TO-PULL ARGS-NOT-PUSHED))
	  (%P-DPB (+ (LDB %%CR.ARGUMENT-SIZE (CLI::%SAVED-CONTROL-REGISTER)) ARGS-PUSHED)
		      %%CR.ARGUMENT-SIZE
		      (CLI::%SAVED-CONTROL-REGISTER-ADDRESS))
	  (IF (NOT APPLY-ARGUMENT)
	      (%P-DPB 0 %%CR.APPLY (CLI::%SAVED-CONTROL-REGISTER-ADDRESS))
	      (%PUSH APPLY-ARGUMENT)
	      (INCF ARGS-PUSHED))
	  (CLI::%RETURN-KLUDGE ARGS-PUSHED)))

(DEFUN TYPE-MEMBER (OBJECT &REST TYPE-CODES)
  (DECLARE (COMPILER:RETURN-TYPE SCL:BOOLEAN))
  (NOT (NULL (CL:MEMBER (%DATA-TYPE OBJECT) TYPE-CODES))))

(DEFUN TYPE-MEMBER-INTERNAL (OBJECT MASK)
  (LDB-TEST (BYTE 1 (LDB (BYTE 6 0) (- (%DATA-TYPE OBJECT) (ASH (LDB (BYTE 4 8) MASK) 2))))
	    (LDB (BYTE 8 0) MASK)))

;; These do not work correctly in all cases.  The Metering-substrate doesn't use these
;; anymore.  They are provided for pseudo compatibility.
(DEFSUBST %METER-ON ()
  (SETF (LDB %%CR.CALL-TRACE (%READ-INTERNAL-REGISTER %REGISTER-CONTROL-REGISTER)) 1)
  (%P-DPB 1 %%CR.CALL-TRACE (LOCF (%SAVED-CONTROL-REGISTER))))

(DEFSUBST %METER-OFF ()
  (SETF (LDB %%CR.CALL-TRACE (%READ-INTERNAL-REGISTER %REGISTER-CONTROL-REGISTER)) 0)
  (%P-DPB 0 %%CR.CALL-TRACE (LOCF (%SAVED-CONTROL-REGISTER))))

(DEFSUBST FOLLOW-STRUCTURE-FORWARDING (STRUCTURE)
  (%MEMORY-READ-ADDRESS STRUCTURE :CYCLE-TYPE %MEMORY-STRUCTURE-OFFSET :SET-CDR-NEXT T))

(DEFSUBST FOLLOW-LIST-FORWARDING (LIST)
  (%MEMORY-READ-ADDRESS LIST :CYCLE-TYPE %MEMORY-CDR :SET-CDR-NEXT T))

(DEFUN FOLLOW-CELL-FORWARDING (LOCATIVE EVCP-P)
  (IF EVCP-P
      (%MEMORY-READ-ADDRESS LOCATIVE :CYCLE-TYPE %MEMORY-DATA-WRITE :SET-CDR-NEXT T)
      (%MEMORY-READ-ADDRESS LOCATIVE :CYCLE-TYPE %MEMORY-BIND-WRITE :SET-CDR-NEXT T)))

;;; Interpreter function handlers

;;; Use this one if the user screwed up.
(DEFUN INVALID-FUNCTION-TYPE (FUNCTION &REST ARGS)
  (DECLARE (SAFEGUARDED-FUNCTION DISABLE-REFERENCE-VALIDATION))
  (COND (( (LDB %%CR.TRAP-MODE (%SAVED-CONTROL-REGISTER)) TRAP-MODE-EMULATOR)
	 (DBG:UNEXPECTED-TRAP "Invalid function trap not in emulator mode referencing ~S."
			      FUNCTION))
	(T
	 (SIGNAL-PROCEED-CASE ((NEW-FUNCTION) 'INVALID-FUNCTION ':FUNCTION FUNCTION)
	   (:NEW-FUNCTION (APPLY NEW-FUNCTION ARGS))))))

;;; Use this one for when the system screwed up (i.e. it should have handled the
;;; function itself or trapped in some other way).
(DEFUN ILLEGAL-FUNCTION-TYPE (FUNCTION &REST ARGS)
  (DECLARE (SAFEGUARDED-FUNCTION))
  (DECLARE (IGNORE ARGS))
  (DBG:UNEXPECTED-TRAP "Impossible function trap referencing ~S." FUNCTION))

;;; None of these are supposed to get past START-FUNCTION-CALL so die if they do.
(DEF-INTERPRETER-FUNCTION DTP-NULL ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-MONITOR-FORWARD ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-HEADER-P ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-HEADER-I ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-EXTERNAL-VALUE-CELL-POINTER ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-ONE-Q-FORWARD ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-HEADER-FORWARD ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-ELEMENT-FORWARD ILLEGAL-FUNCTION-TYPE)

;;; These can be mistakenly applied.
(DEF-INTERPRETER-FUNCTION DTP-FIXNUM INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-SMALL-RATIO INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-SINGLE-FLOAT INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-DOUBLE-FLOAT INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-BIGNUM INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-BIG-RATIO INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-COMPLEX INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-SPARE-NUMBER INVALID-FUNCTION-TYPE)

;;; Handled by the cold load generator now
;(DEF-FLAVOR-INTERPRETER-FUNCTION DTP-INSTANCE %MESSAGE-DISPATCH)

;;; There aren't defined yet
(DEF-INTERPRETER-FUNCTION DTP-LIST-INSTANCE INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-ARRAY-INSTANCE INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-STRING-INSTANCE INVALID-FUNCTION-TYPE)

#+EXPLORER
(DEF-INTERPRETER-FUNCTION DTP-NIL (FUNCTION &REST ARGS)
  (DECLARE (IGNORE FUNCTION ARGS)))
(DEF-INTERPRETER-FUNCTION DTP-NIL INVALID-FUNCTION-TYPE)

(DEF-INTERPRETER-FUNCTION DTP-LIST (FUNCTION &REST ARGS)
  (DECLARE (SAFEGUARDED-FUNCTION DISABLE-REFERENCE-VALIDATION))
  (LET ((EXPANDED-FUNCTION (LAMBDA-MACRO-EXPAND FUNCTION NIL)))
    (SELECTQ (FIRST EXPANDED-FUNCTION)
      ((LAMBDA)
       (APPLY-LAMBDA NIL
		     (LET ((LOCAL-DECLARATIONS NIL))	;in a null environment
		       (DIGEST-LAMBDA EXPANDED-FUNCTION NIL NIL NIL))
		     ARGS))
      (OTHERWISE
       (SIGNAL-PROCEED-CASE ((NEW-FUNCTION) 'INVALID-FUNCTION :FUNCTION FUNCTION)
	 (:NEW-FUNCTION (APPLY NEW-FUNCTION ARGS)))))))

(DEF-INTERPRETER-FUNCTION DTP-ARRAY (FUNCTION &REST ARGS)
  (DECLARE (SAFEGUARDED-FUNCTION DISABLE-REFERENCE-VALIDATION))
  (COND ((TYPEP FUNCTION ':STACK-GROUP)
	 (CL:APPLY #'STACK-GROUP-CALL FUNCTION ARGS))
	((LOOP FOR ARG IN ARGS ALWAYS (FIXNUMP ARG) ALWAYS ( ARG 0))
	 (%LEXPR-AREF FUNCTION ARGS))
	(T (SIGNAL-PROCEED-CASE ((NEW-FUNCTION) 'INVALID-FUNCTION
				 ':FUNCTION FUNCTION)
	     (:NEW-FUNCTION (APPLY NEW-FUNCTION ARGS))))))

(DEF-INTERPRETER-FUNCTION DTP-STRING (FUNCTION ARG)
  (AREF FUNCTION ARG))

;; Ivory rev 0 indirects through symbols in hardware, but its successors don't.
(DEF-INTERPRETER-FUNCTION DTP-SYMBOL (FUNCTION &REST ARGS)
  (DECLARE (SAFEGUARDED-FUNCTION DISABLE-REFERENCE-VALIDATION))
  (CL:APPLY (SYMBOL-FUNCTION-CELL FUNCTION) ARGS))

(DEF-INTERPRETER-FUNCTION DTP-LOCATIVE INVALID-FUNCTION-TYPE)

;;; Come here if the closure is interpteted.
(DEF-INTERPRETER-FUNCTION DTP-LEXICAL-CLOSURE (FUNCTION &REST ARGS)
  (CL:APPLY (LEXICAL-CLOSURE-FUNCTION FUNCTION)
	    (LEXICAL-CLOSURE-ENVIRONMENT FUNCTION)
	    ARGS))

(DEF-INTERPRETER-FUNCTION DTP-DYNAMIC-CLOSURE (FUNCTION &REST ARGS)
  (LET* ((CLOSURE (%MAKE-POINTER DTP-LIST FUNCTION))
	 (OLD-INHIBIT-SCHEDULING-FLAG INHIBIT-SCHEDULING-FLAG)
	 (INHIBIT-SCHEDULING-FLAG T))
    (%WITH-BINDING-STACK-LEVEL
      (DO ((L (CDR CLOSURE)))
	  ((NULL L))
	(LET ((INTERNAL-CELL (POP L))
	      (EXTERNAL-CELL (POP L)))
	  ;; Use the BIND-LOCATIVE instruction at least somewhere.  --RG
	  (COMPILER:%INSTRUCTION BIND-LOCATIVE (SP -1))	;Bind INTERNAL-CELL
	  (%P-STORE-TYPE-AND-POINTER (FOLLOW-CELL-FORWARDING INTERNAL-CELL NIL)
				     DTP-EXTERNAL-VALUE-CELL-POINTER
				     EXTERNAL-CELL)))
      (SETQ INHIBIT-SCHEDULING-FLAG OLD-INHIBIT-SCHEDULING-FLAG)
      (APPLY (CAR CLOSURE) ARGS))))

;;; Better have been handled by the microcode
(DEF-INTERPRETER-FUNCTION DTP-COMPILED-FUNCTION ILLEGAL-FUNCTION-TYPE)

;;; Handled by the cold load generator now
;(DEF-FLAVOR-INTERPRETER-FUNCTION DTP-GENERIC-FUNCTION %GENERIC-DISPATCH)

(DEF-INTERPRETER-FUNCTION DTP-SPARE-POINTER-1 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-SPARE-POINTER-2 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PHYSICAL-ADDRESS INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-SPARE-IMMEDIATE-1 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-BOUND-LOCATION INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CHARACTER INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-LOGIC-VARIABLE INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-GC-FORWARD ILLEGAL-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-EVEN-PC INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-ODD-PC INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-COMPILED-EVEN INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-COMPILED-ODD INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-INDIRECT INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-GENERIC INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-COMPILED-EVEN-PREFETCH INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-COMPILED-ODD-PREFETCH INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-INDIRECT-PREFETCH INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-CALL-GENERIC-PREFETCH INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-60 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-61 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-62 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-63 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-64 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-65 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-66 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-67 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-70 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-71 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-72 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-73 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-74 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-75 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-76 INVALID-FUNCTION-TYPE)
(DEF-INTERPRETER-FUNCTION DTP-PACKED-INSTRUCTION-77 INVALID-FUNCTION-TYPE)

;;; Flavor things that need to be in the cold load because they are wired
;;; They are wired in order to minimize map-cache turbulence
;;; The 3600 versions are in SYS:FLAVOR;HANDLE

(DEFWIREDFUN FLAVOR:READ-INSTANCE-VARIABLE (SLOT SELF)
  (%MEMORY-READ (%POINTER-PLUS (FOLLOW-STRUCTURE-FORWARDING SELF)
			       SLOT)))		;faster (%INSTANCE-REF SELF SLOT)

(DEFWIREDFUN FLAVOR:WRITE-INSTANCE-VARIABLE (SLOT SELF VALUE)
  ;; Can't use %MEMORY-WRITE because we must follow forwarding pointers
  (SETF (LOCATION-CONTENTS (%MAKE-POINTER DTP-LOCATIVE ;faster (%INSTANCE-SET VALUE SELF SLOT)
					  (%POINTER-PLUS (FOLLOW-STRUCTURE-FORWARDING SELF)
							 SLOT)))
	VALUE)
  VALUE)

(DEFWIREDFUN CLOS-INTERNALS::STANDARD-CLASS-LOCAL-SLOT-WRITER (SLOT VALUE SELF)
  ;; Can't use %MEMORY-WRITE because we must follow forwarding pointers
  (SETF (LOCATION-CONTENTS (%MAKE-POINTER DTP-LOCATIVE ;faster (%INSTANCE-SET VALUE SELF SLOT)
					  (%POINTER-PLUS (FOLLOW-STRUCTURE-FORWARDING SELF)
							 SLOT)))
	VALUE)
  VALUE)

(DEFWIREDFUN FLAVOR:LOCATE-INSTANCE-VARIABLE (SLOT SELF)
  (%P-STRUCTURE-OFFSET SELF SLOT))		;faster (%INSTANCE-LOC SELF SLOT)

(DEFUN %FUNCALL-IN-AUX-STACK (FUNCTION &REST ARGS)
  (APPLY FUNCTION (PROG1 ARGS (%SET-TRAP-MODE TRAP-MODE-EXTRA-STACK))))
