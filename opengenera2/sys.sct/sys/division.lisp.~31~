;;; -*- Mode: LISP; Syntax: Common-lisp; Package: COMMON-LISP-INTERNALS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#||

;;; The general theory of floating-point integer quotients used here is:
;;;
;;; Suppose we're looking at the quotient a/b.
;;; That quotient has an integer part and a fraction, so i+f = a/b.
;;; The remainder is then f*b, which for some reason we compute as r = a - i*b.
;;; Everything's cool as long as i+f fits in the floating-point format,
;;; in the sense that there is at least one significant bit of f in the quotient.
;;; Otherwise, the remainder computation can be totally bogus, in the sense that r>b.
;;; (Because of the way the remainder is computed, a = r + i*b is preserved, but
;;; that's just because r is insignificant relative to a.)

;;; Fortunately in this case, the remainder ought to be zero, since to the
;;; floating-point precision, f is zero.

;;; An example of incorrect flooring is:

(ffloor 123.45001 1.0e-10)			; => 2 values: 1.2345e12, 7.6293945e-6

;;; Those numbers were found by:

(defun search-numbers (x y)
  (loop for x = x then (nextafter x +1e)
	do (unless (= x (* y (/ x y)))
	     (format t "~& ~A  ~A" x y))))

;;; Explicit byte twiddling, rather than converting to/from integers is used.
;;; That's because even though the FPA is faster than the byte twiddling, we lose
;;; in setting and resetting the float-operating-mode -- mostly in the unwind-protect.


;;; So we now compute the quotient exactly, so long as it fits in the floating-point
;;; format of the computation.  Getting the remainder right seems hard.

;;; It seems to be hard to satisfy both a = r + i*b and (abs r)<(abs b).
;;; Satisfying the equality is easy if we compute the remainder as a-i*b.
;;; But try (floor 1.5 .1) for an example where the remainder is then out-of range.
;;; Computing the remainder as (a/b-i)*b satifies the inequality, but loses big on
;;; the equality.  ----- I give up for now.

||#

(defmacro integer-quotient-values ((compute-type quotient-type remainder-type values-type)
				   quotient remainder)
  (flet ((result-coercion (result-type)
	   (ecase result-type
	     ((t)
	       (values 'identity 1))
	     ((integer rational)
	       (values (ecase compute-type
			 ((integer rational) 'identity)
			 (single 'si:%convert-single-to-fixnum)
			 (double 'si:double-to-integer))
		       1))
	     (float				;of appropriate precision
	       (values (ecase compute-type
			 ((integer rational) 'zl:float)
			 (single 'identity)
			 (double 'si:double-to-consed))
		       1))
	     (single-float
	       (values (ecase compute-type
			 ((integer rational) 'zl:float)
			 (single 'identity)
			 (double 'si:double-to-single))
		       1))
	     (double-float
	       (values (ecase compute-type
			 ((integer rational) 'zl:dfloat)
			 (single 'si:single-to-double)
			 (double 'identity))
		       1))
	     (unboxed-double
	       (values (ecase compute-type
			 (double 'si:double-value))
		       2)))))
  (multiple-value-bind (quotient-coercion-function quotient-nvalues)
      (result-coercion quotient-type)
    (multiple-value-bind (remainder-coercion-function remainder-nvalues)
	(result-coercion remainder-type)
      (ecase values-type
	(quotient
	  `(,quotient-coercion-function ,quotient))
	(remainder
	  `(,remainder-coercion-function ,remainder))
	(quotient-and-remainder
	  `(%multiple-value-call-n
	     values
	     (,quotient-coercion-function ,quotient) ,quotient-nvalues
	     (,remainder-coercion-function ,remainder) ,remainder-nvalues)))))))

;;; ---- there are probably better ways to compute all of these
;;; These routines are used when the instruction traps out
(defmacro integer-quotient-integer-2 ((division quotient-type remainder-type values-type)
				      number divisor)
  (ecase division
    (floor
      `(let ((remainder (mod ,number ,divisor)))
	 (integer-quotient-values (integer ,quotient-type ,remainder-type ,values-type)
				  (zl:/ (- ,number remainder) ,divisor)
				  remainder)))
    (ceiling
      `(let ((remainder (mod (- ,number) ,divisor)))
	 (integer-quotient-values (integer ,quotient-type ,remainder-type ,values-type)
				  (- (zl:/ (- (- ,number) remainder) ,divisor))
				  (- remainder))))
    (truncate
      `(integer-quotient-values (integer ,quotient-type ,remainder-type ,values-type)
				(zl:/ ,number ,divisor)
				(rem ,number ,divisor)))
    (round
      #+3600
      `(let* ((remainder (mod ,number ,divisor))
	      (twice-remainder (* remainder 2))
	      (quotient (zl:/ (- ,number remainder) ,divisor)))
	 (when (or (if (minusp ,divisor) (< twice-remainder ,divisor)
		       (> twice-remainder ,divisor))
		   (and (= twice-remainder ,divisor) (oddp quotient)))
	   (incf quotient)
	   (decf remainder ,divisor))
	 (integer-quotient-values (integer ,quotient-type ,remainder-type ,values-type)
				  quotient
				  remainder))
      #+IMach
      ;; Since the instruction doesn't work, define it in terms of one which does
      `(multiple-value-bind (quotient remainder)
	   (floor ,number ,divisor)
	 (let ((twice-remainder (* remainder 2)))
	   (when (or (if (minusp ,divisor) (< twice-remainder ,divisor)
			 (> twice-remainder ,divisor))
		     (and (= twice-remainder ,divisor) (oddp quotient)))
	     (incf quotient)
	     (decf remainder ,divisor))
	   (integer-quotient-values (integer ,quotient-type ,remainder-type ,values-type)
				    quotient
				    remainder))))))

(defmacro integer-quotient-single-1 ((division quotient-type remainder-type values-type)
				     number)
  `(let* ((fixnum-number (%fixnum ,number))
	  (exponent (- (ldb %%single-exponent fixnum-number)
		       (ldb %%single-exponent (%fixnum 1.0)))))
     (if ( exponent (byte-size %%single-fraction))
	 (integer-quotient-values (single ,quotient-type ,remainder-type ,values-type)
				  number
				  0.0)
	 (let ((integer-part (if (< exponent 0)
				 (%flonum (%logdpb 0 %%single-except-sign fixnum-number))
				 (%flonum
				   (%inline-logdpb
				     0
				     (byte (- (byte-size %%single-fraction) exponent) 0)
				     fixnum-number)))))
	   ,@(ecase division
	       (truncate
		 nil)
	       (floor
		 `((unless ( integer-part ,number)
		     (setq integer-part
			   #+3600 (1- integer-part)	;3600 microcode is smarter
			   #+IMach (+ integer-part -1.0)))))
	       (ceiling
		 `((unless ( integer-part ,number)
		     (setq integer-part
			   #+3600 (1+ integer-part)
			   #+IMach (+ integer-part 1.0)))))
	       (round
		 `((let ((fixnum-fraction (%fixnum (- ,number integer-part))))
		       (when (and (= (ldb %%single-exponent fixnum-fraction)
				     (ldb %%single-exponent (%fixnum .5)))
				  (or (not (zerop (ldb %%single-fraction fixnum-fraction)))
				      (oddp (%convert-single-to-fixnum integer-part))))
			 (setq integer-part
			       (+ integer-part
				  (%flonum (dpb (%fixnum 1.0) %%single-except-sign
						fixnum-number)))))))))
	   (integer-quotient-values (single ,quotient-type ,remainder-type ,values-type)
				    integer-part
				    (- ,number integer-part))))))

(defmacro integer-quotient-single-2 ((division quotient-type remainder-type values-type)
				     number divisor)
  `(progn
     (setf (si:float-flag? inexact-result) nil)	;clear inexact-result flag
     (let* ((quotient (si:with-float-operating-mode ((:round :zero)
						     (:trap-disables :underflow))
			(/ ,number ,divisor)))
	    (fixnum-quotient (%fixnum quotient))
	    (exponent (- (ldb %%single-exponent fixnum-quotient)
			 (ldb %%single-exponent (%fixnum 1.0)))))
       (if (,(ecase division
	       ((round truncate) ')
	       ((floor ceiling) '>))
	    exponent (byte-size %%single-fraction))
	   (integer-quotient-values
	     (single ,quotient-type ,remainder-type ,values-type)
	     ,(ecase division
		((floor ceiling truncate)
		 'quotient)
		(round
		  `(if (= exponent (byte-size %%single-fraction))
		       ;; have to recompute for round
		       (si:with-float-operating-mode ((:round :nearest))
			 (/ ,number ,divisor))
		       quotient)))
	     0.0)
	   (let ((integer-part (if (< exponent 0)
				   (%flonum (%logdpb 0 %%single-except-sign fixnum-quotient))
				   (%flonum
				     (%inline-logdpb
				       0
				       (byte (- (byte-size %%single-fraction) exponent) 0)
				       fixnum-quotient)))))
	     ,@(ecase division
		 (truncate
		   nil)
		 (floor
		   `((unless (or ( fixnum-quotient 0)	; -0.0 is an underflown negative
				 ;; no fraction bits present
				 (and (eql integer-part quotient)
				      (not (si:float-flag? inexact-result))))
		       (setq integer-part
			     #+3600 (1- integer-part)	;3600 microcode is smarter
			     #+IMach (+ integer-part -1.0)))))
		 (ceiling
		   `((unless (or (< fixnum-quotient 0)
				 ;; no fraction bits present
				 (and (eql integer-part quotient)
				      (not (si:float-flag? inexact-result))))
		       (setq integer-part
			     #+3600 (1+ integer-part)	;3600 microcode is smarter
			     #+IMach (+ integer-part 1.0)))))
		 (round
		   `((let ((fixnum-fraction (%fixnum (- quotient integer-part))))
		       (when (and (= (ldb %%single-exponent fixnum-fraction)
				     (ldb %%single-exponent (%fixnum .5)))
				  (or (not (zerop (ldb %%single-fraction fixnum-fraction)))
				      (si:float-flag? inexact-result)
				      (oddp (%convert-single-to-fixnum integer-part))))
			 (setq integer-part
			       (+ integer-part
				  (%flonum (dpb (%fixnum 1.0) %%single-except-sign
						fixnum-quotient)))))))))
	     (integer-quotient-values
	       (single ,quotient-type ,remainder-type ,values-type)
	       integer-part
;	       (* (- quotient integer-part) ,divisor)
;	       (si:double-to-single
;		 (si:double-- (si:single-to-double ,number)
;			      (si:double-* (si:single-to-double ,divisor)
;					   (si:single-to-double integer-part))))
	       (si:with-float-operating-mode ((:trap-disables :underflow))
		 (- ,number (* ,divisor integer-part)))))))))

(defmacro integer-quotient-double-1 ((division quotient-type remainder-type values-type)
				     number)
  `(si:double-let* ((double (si:double-components ,number)))
     (integer-quotient-double-1-double-arg
       (,division ,quotient-type ,remainder-type ,values-type)
       double number)))

(defmacro integer-quotient-double-1-double-arg
	  ((division quotient-type remainder-type values-type)
	   double &optional number)
  (unless (eq 'double double)
    (error "The double argument must be named DOUBLE -- please fix this kludge"))
  `(let ((exponent (- (ldb %%double-exponent double-high)
		      (ldb %%double-exponent (double-high 1.0d0)))))
     (if ( exponent (+ (byte-size %%double-fraction-high) 32))
	 (integer-quotient-values (double
				    ,(case quotient-type
				       (float t)
				       (otherwise quotient-type))
				    ,remainder-type ,values-type)
				  ,(case quotient-type
				     (float number)
				     (otherwise double))
				  0.0d0)
	 (si:double-let* (((integer-part (integer-part-high integer-part-low))
			    (cond ((< exponent 0)
				   (values (%logdpb 0 %%double-except-sign-high double-high)
					   0))
				  (( exponent (byte-size %%double-fraction-high))
				   (values (%inline-logdpb
					     0
					     (byte (- (byte-size %%double-fraction-high)
						      exponent)
						   0)
					     double-high)
					   0))
				  (t
				   (values double-high
					   (%inline-logdpb
					     0
					     (byte (- (+ (byte-size %%double-fraction-high)
							 32)
						      exponent)
						   0)
					     double-low))))))
	   ,@(ecase division
	       (truncate
		 nil)
	       (floor
		 `((unless (or (not (minusp double-high))
			       ;; no fractional part
			       (and (= integer-part-low double-low)
				    (= integer-part-high double-high)))
		     (si:double-setq integer-part (si:double-- integer-part 1.0d0)))))
	       (ceiling
		 `((unless (or (minusp double-high)
			       ;; no fractional part
			       (and (= integer-part-low double-low)
				    (= integer-part-high double-high)))
		     (si:double-setq integer-part (si:double-+ integer-part 1.0d0)))))
	       (round
		 `((si:double-let* ((fraction (si:double-- double integer-part)))
		     (when (and (= (ldb %%double-exponent fraction-high)
				   (ldb %%double-exponent (double-high .5d0)))
				(or (not (zerop fraction-low))
				    (not (zerop (ldb %%double-fraction-high
						     fraction-high)))
				    (oddp (si:double-to-integer integer-part))))
		       (si:double-setq integer-part
				       (%double-floating-add
					 integer-part-high
					 integer-part-low
					 (dpb (double-high 1.0d0) %%double-except-sign-high
					      double-high)
					 (double-low 1.0d0))))))))
	   (integer-quotient-values
	     (double ,quotient-type ,remainder-type ,values-type)
	     integer-part
	     (si:double-- double integer-part))))))

(defmacro integer-quotient-double-2 ((division quotient-type remainder-type values-type)
				     number divisor)
  `(si:double-let* ((number (si:double-dfloat ,number))
		    (divisor (si:double-dfloat ,divisor)))
     (integer-quotient-double-2-double-args
       (,division ,quotient-type ,remainder-type ,values-type)
       number divisor)))

(defmacro integer-quotient-double-2-double-args
	  ((division quotient-type remainder-type values-type)
	   number divisor)
  `(progn
     (setf (si:float-flag? inexact-result) nil)	;clear inexact-result flag
     (si:double-let* (((quotient (quotient-high quotient-low))
		       (si:with-float-operating-mode ((:round :zero)
						      (:trap-disables :underflow))
			 (si:double-/ ,number ,divisor))))
       (let ((exponent (- (ldb %%double-exponent quotient-high)
			  (ldb %%double-exponent (double-high 1.0d0)))))
	 (if (,(ecase division
		 ((round truncate) ')
		 ((floor ceiling) '>))
	      exponent
	      (+ (byte-size %%double-fraction-high) 32))
	     (integer-quotient-values
	       (double ,quotient-type ,remainder-type ,values-type)
	       ,(ecase division
		  ((floor ceiling truncate)
		   'quotient)
		  (round
		    `(if (= exponent (+ (byte-size %%double-fraction-high) 32))
			 ;; have to recompute for round
			 (si:with-float-operating-mode ((:round :nearest))
			   (si:double-/ ,number ,divisor))
			 (si:double-value quotient))))
	       0.0d0)
	     (si:double-let* (((integer-part (integer-part-high integer-part-low))
			       (cond ((< exponent 0)
				      (values (%logdpb 0 %%double-except-sign-high
						       quotient-high)
					      0))
				     (( exponent (byte-size %%double-fraction-high))
				      (values (%inline-logdpb
						0
						(byte (- (byte-size %%double-fraction-high)
							 exponent)
						      0)
						quotient-high)
					      0))
				     (t
				      (values quotient-high
					      (%inline-logdpb
						0
						(byte (- (+ (byte-size %%double-fraction-high)
							    32)
							 exponent)
						      0)
						quotient-low))))))
	       ,@(ecase division
		   (truncate
		     nil)
		   (floor
		     `((unless (or (not (minusp quotient-high))
				   ;; no fraction bits present
				   (and (= integer-part-low quotient-low)
					(= integer-part-high quotient-high)
					(not (si:float-flag? inexact-result))))
			 (si:double-setq integer-part (si:double-- integer-part 1.0d0)))))
		   (ceiling
		     `((unless (or (minusp quotient-high)
				   ;; no fraction bits present
				   (and (= integer-part-low quotient-low)
					(= integer-part-high quotient-high)
					(not (si:float-flag? inexact-result))))
			 (si:double-setq integer-part (si:double-+ integer-part 1.0d0)))))
		   (round
		     `((si:double-let* ((fraction (si:double-- quotient integer-part)))
			 (when (and (= (ldb %%double-exponent fraction-high)
				       (ldb %%double-exponent (double-high .5d0)))
				    (or (not (zerop fraction-low))
					(not (zerop (ldb %%double-fraction-high
							 fraction-high)))
					(si:float-flag? inexact-result)
					(oddp (si:double-to-integer integer-part))))
			   (si:double-setq integer-part
					   (%double-floating-add
					     integer-part-high
					     integer-part-low
					     (dpb (double-high 1.0d0)
						  %%double-except-sign-high
						  quotient-high)
					     (double-low 1.0d0))))))))
	       (integer-quotient-values
		 (double ,quotient-type ,remainder-type ,values-type)
		 integer-part
;		 (si:double-* (si:double-- quotient integer-part) ,divisor)
		 (si:with-float-operating-mode ((:trap-disables :underflow))
		   (si:double-- ,number (si:double-* ,divisor integer-part)))
		 )))))))

#+3600
(progn 
(defun rem-float-float (num1 num2)
  (integer-quotient-single-2 (truncate float float remainder)
			     num1 num2))

(si:defnumop rem ((num1 single-float) (num2 single-float)) rem-float-float)
  
(si:defnumop rem ((num1 fixnum) (num2 single-float))
  (rem-float-float (float num1 0.0) num2))

(si:defnumop rem ((num1 single-float) (num2 fixnum))
  (rem-float-float num1 (float num2 0.0)))

(si:defnumop rem ((num1 bignum) (num2 single-float))
  (rem-float-float (float num1 0.0) num2))

(si:defnumop rem ((num1 single-float) (num2 bignum))
  (rem-float-float num1 (float num2 0.0)))

(defun mod-float-float (num1 num2)
  (integer-quotient-single-2 (floor float float remainder)
			     num1 num2))

(si:defnumop mod ((num1 single-float) (num2 single-float)) mod-float-float)
  
(si:defnumop mod ((num1 fixnum) (num2 single-float))
  (mod-float-float (float num1 0.0) num2))

(si:defnumop mod ((num1 single-float) (num2 fixnum))
  (mod-float-float num1 (float num2 0.0)))

(si:defnumop mod ((num1 bignum) (num2 single-float))
  (mod-float-float (float num1 0.0) num2))

(si:defnumop mod ((num1 single-float) (num2 bignum))
  (mod-float-float num1 (float num2 0.0)))
);End #+3600

#+IMach
(defun zl:\\ (number divisor)
  (multiple-value-bind (ignore remainder)
      (truncate number divisor)
    remainder))

#+Imach
(defun mod (number divisor)
  (multiple-value-bind (ignore remainder)
      (floor number divisor)
    remainder))

(defun si:%double-floating-remainder (d1-high d1-low d2-high d2-low)
  (si:with-double-names (d1 d2)
    (integer-quotient-double-2-double-args (truncate unboxed-double unboxed-double remainder)
					   d1 d2)))

(defun si:%double-floating-mod (d1-high d1-low d2-high d2-low)
  (si:with-double-names (d1 d2)
    (integer-quotient-double-2-double-args (floor unboxed-double unboxed-double remainder)
					   d1 d2)))

(defun si:double-ftrunc-components (double-high double-low)
  (si:with-double-names (double)
    (integer-quotient-double-1-double-arg (truncate unboxed-double unboxed-double quotient)
					  double)))

(defun si:double-ffloor-components (double-high double-low)
  (si:with-double-names (double)
    (integer-quotient-double-1-double-arg (floor unboxed-double unboxed-double quotient)
					  double)))

(defun integer-quotient-1-arg-optimizer (form function-1-arg)
  (if (and (consp (cdr form))
	   (or (null (cddr form))
	       (and (consp (cddr form))
		    (eql (third form) 1))))
      `(,function-1-arg ,(second form))
      form))

;; On the VLM, we transform 1-arg division functions to the 2-arg form
;; so that we always call the speedy built-in instruction
#+VLM
(defun integer-quotient-1-arg-transformer (form function)
  (if (and (consp (cdr form))
	   (null (cddr form)))			;no second arg
      `(,function ,(second form) 1)
      form))

(defmacro define-division-function (name division quotient-type)
  (let ((name-1 (intern (string-append name "-1-ARG"))))	;name of 1-arg version
    `(progn
       (record-source-file-name ',name 'define-division-function)

       ;; optimize to 1-arg version if possible
       (compiler:defoptimizer (,name
			       ,(intern (string-append name "-1-ARG-OPTIMIZER"))
			       ,name-1)
			      (form)
	 (integer-quotient-1-arg-optimizer form ',name-1))

       ;; 1-arg version
       (defun ,name-1 (number)
	 (declare (values quotient remainder))
	 (declare (inline si:rationalp si:complexp))
	 (declare (sys:function-parent ,name define-division-function))
	 (ctypecase number
	   (single-float
	     (integer-quotient-single-1 (,division ,quotient-type float quotient-and-remainder)
					number))
	   (double-float
	     (integer-quotient-double-1 (,division ,quotient-type float quotient-and-remainder)
					number))
	   (ratio
	     (let ((denominator (si:rational-denominator number)))
	       (multiple-value-bind (quotient remainder)
		   (,division (si:rational-numerator number) denominator)
		 (integer-quotient-values
		   (rational ,quotient-type rational quotient-and-remainder)
		   quotient
		   (/ remainder denominator)))))
	   (integer
	     (integer-quotient-values (integer ,quotient-type integer quotient-and-remainder)
				      number
				      0))))

       ;; 2-arg version
       (defun ,name (number &optional (divisor 1))
	 (declare lt:(side-effects simple reducible))
	 (declare (values quotient remainder))
	 (declare (inline si:rationalp complexp))
	 (declare (sys:function-parent ,name define-division-function))
	 (block nil
	   (tagbody retry-with-new-arguments
		    (return
		      (cond ((and (integerp number) (integerp divisor))
			     ;; This must all be simulated using functions which trap
			     ;; out properly for bignums.
			     (integer-quotient-integer-2
			       (,division ,quotient-type integer quotient-and-remainder)
			       number divisor))
			    ((or (floatp number) (floatp divisor))
			     ;; Floating-point case
			     (if (or (si:double-float-p number)
				     (si:double-float-p divisor))
				 (integer-quotient-double-2
				   (,division ,quotient-type float quotient-and-remainder)
				   number
				   divisor)
				 (let ((float-number (float number 0.0))
				       (float-divisor (float divisor 0.0)))
				   (integer-quotient-single-2
				     (,division ,quotient-type float quotient-and-remainder)
				     float-number
				     float-divisor))))
			    ((and (rationalp number)
				  (rationalp divisor))
			     (let ((denominator-divisor (denominator divisor))
				   (denominator-number  (denominator number)))
			       (multiple-value-bind (quotient remainder)
				   (,division
				    (* (numerator number) denominator-divisor)
				    (* denominator-number (numerator divisor)))
				 (integer-quotient-values
				   (rational ,quotient-type rational quotient-and-remainder)
				   quotient
				   (/ remainder
				      (* denominator-number denominator-divisor))))))
			    ((not (and (numberp number)
				       (si:not-complex-numberp number)))
			     (setq number (dbg:check-type-1 'number number
							    '(or rational float)))
			     (go retry-with-new-arguments))
			    (t (setq divisor (dbg:check-type-1 'divisor divisor
							       '(or rational float)))
			       (go retry-with-new-arguments))))))))))

#+IMach
;;; Rationals are defined with the other rational stuff
;;; Bignums are defined with the other bignum stuff
(defmacro define-trapping-division-function (name division quotient-type define-functions)
  (let ((name-1 (intern (string-append name "-1-ARG")))
	(optimizer-name (intern (string-append name "-1-ARG-OPTIMIZER")))
	(transformer-name (intern (string-append name "-1-ARG-TRANSFORMER"))))
    `(progn

       (record-source-file-name ',name 'define-trapping-division-function)
       
       ,@(when define-functions
	   `((compiler:delete-optimizer ,name ,optimizer-name)
	     (compiler:delete-transformer ,name ,transformer-name)

	     ;; 1-arg version
	     (defun ,name-1 (number)
	       (declare (values quotient remainder))
	       (declare (inline rationalp si:complexp ,name))
	       (declare (sys:function-parent ,name define-trapping-division-function))
	       (cl:ctypecase number
		 #+VLM
		 (cl:fixnum
		   (,name number 1))
		 (cl:single-float
		   #+VLM (,name number 1.0f0)
		   #-VLM (integer-quotient-single-1
			   (,division ,quotient-type float quotient-and-remainder)
			   number))
		 (cl:double-float
		   (integer-quotient-double-1
		     (,division ,quotient-type float quotient-and-remainder)
		     number))
		 (cl:ratio
		   (let ((denominator (si:rational-denominator number)))
		     (multiple-value-bind (quotient remainder)
			 (,division (si:rational-numerator number) denominator)
		       (integer-quotient-values
			 (rational ,quotient-type rational quotient-and-remainder)
			 quotient
			 (/ remainder denominator)))))
		 (cl:integer
		   (integer-quotient-values
		     (integer ,quotient-type integer quotient-and-remainder)
		     number
		     0))))

	     (defun ,name (number &optional (divisor 1))
	       (declare lt:(side-effects simple reducible))
	       (declare (values quotient remainder))
	       (declare (inline si:rationalp si:complexp))
	       (declare (sys:function-parent ,name define-trapping-division-function))
	       (,name number divisor))

	     ;; Transformer to convert 1-arg version to 2-arg version on VLM
	     #+VLM (compiler:deftransformer (,name ,transformer-name ,name-1)
					    (form)
		     (integer-quotient-1-arg-transformer form ',name))
	     
	     ;; Optimize to 1-arg version if possible
	     #-VLM (compiler:defoptimizer (,name ,optimizer-name ,name-1)
					  (form)
		     (integer-quotient-1-arg-optimizer form ',name-1))))

       (si:defnumop ,name ((number si:fixnum) (divisor si:fixnum))
	 ;; this can only be x = most-negative-fixnum y = -1
	 (declare (ignore number divisor))
	 (values (- most-negative-fixnum) 0))
       (si:defnumop ,name ((number si:float) (divisor si:fixnum si:float si:bignum))
	 (if (eql divisor 1)
	     (integer-quotient-single-1 (,division ,quotient-type float quotient-and-remainder)
					number)
	     (let ((float-divisor (float divisor 0.0)))
	       (integer-quotient-single-2
		 (,division ,quotient-type float quotient-and-remainder)
		 number float-divisor))))
       (si:defnumop ,name ((number si:fixnum si:float si:bignum) (divisor si:float))
	 (let ((float-number (float number 0.0)))
	   (integer-quotient-single-2 (,division ,quotient-type float quotient-and-remainder)
				      float-number divisor)))
       (si:defnumop ,name ((number si:double) (divisor si:fixnum si:float si:double si:bignum))
	 (if (eql divisor 1)
	     (integer-quotient-double-1
	       (,division ,quotient-type float quotient-and-remainder)
	       number)
	     (integer-quotient-double-2
	       (,division ,quotient-type float quotient-and-remainder)
	       number divisor)))
       (si:defnumop ,name ((number si:fixnum si:float si:double si:bignum) (divisor si:double))
	 (integer-quotient-double-2 (,division ,quotient-type float quotient-and-remainder)
				    number divisor))
       (si:defnumop ,name ((number si:complex)
			   (divisor si:fixnum si:flonum si:double si:bignum si:ratio si:complex))
	 (setq number (dbg:argument-typecase-1 'number number
					       '(:fix :single-float :double-float :rational)))
	 (,name number divisor))
       (si:defnumop ,name ((number si:fixnum si:flonum si:double si:bignum si:ratio si:complex)
			   (divisor si:complex))
	 (setq divisor (dbg:argument-typecase-1 'number divisor
						'(:fix :single-float :double-float :rational)))
	 (,name number divisor)))))

#+3600
(progn
(define-division-function floor floor integer)
(define-division-function ceiling ceiling integer)
(define-division-function truncate truncate integer)
(define-division-function round round integer)
);End #+3600

#+imach
(progn
(define-trapping-division-function floor floor integer t)
(define-trapping-division-function ceiling ceiling integer t)
(define-trapping-division-function truncate truncate integer t)
;; leave trap handlers around just in case anyone has old ibins which use the instruction
(define-trapping-division-function round round integer #-VLM nil #+VLM t)
;; since the instruction doesn't work, use a function
#-VLM (define-division-function round round integer)
);End #+imach

(define-division-function ffloor floor float)
(define-division-function fceiling ceiling float)
(define-division-function ftruncate truncate float)
(define-division-function fround round float)
