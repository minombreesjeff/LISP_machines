;;; -*- Mode: Lisp; Package: SYSTEM-INTERNALS; Base: 8 -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Relatively machine-independent wired utilities

(DEFWIREDVAR *WIRE-EVERYTHING* NIL)		;T means run wired, NIL means enable paging
						;Patch this with the console program

(DEFWIREDVAR %INITIAL-STACK-GROUP)		;cold load generator sets this up

;; Software-managed copy of the microsecond clock.
(DEFWIREDVAR TIME:*TOTAL-MICROSECOND-TIME-HIGH* 0)
(DEFWIREDVAR TIME:*TOTAL-MICROSECOND-TIME-LOW* 0)
(DEFWIREDVAR TIME:*BOOT-MICROSECOND-TIME-HIGH*)
(DEFWIREDVAR TIME:*BOOT-MICROSECOND-TIME-LOW*)

;; Handle the microsecond clock.  This needs to be called every 2^32-1 microseconds.
(DEFWIREDFUN UPDATE-MICROSECOND-CLOCK ()
  (LET ((USECS (SYS:%MICROSECOND-CLOCK)))
    (MULTIPLE-VALUE-BIND (IGNORE BORROW)
	(%SUB-BIGNUM-STEP USECS TIME:*TOTAL-MICROSECOND-TIME-LOW* 0)
      (INCF* TIME:*TOTAL-MICROSECOND-TIME-HIGH* BORROW)
      (SETF TIME:*TOTAL-MICROSECOND-TIME-LOW* USECS))))

#+IMACH
(DEFWIREDVAR *LISP-STOPPED-CLEANLY*)

#+IMACH
(DEFVAR *WARM-BOOTED-STACK-GROUP* NIL)

#+IMACH
(DEFUN SAVE-CURRENT-STACK-GROUP ()
  (LET ((SG-TO-SAVE %CURRENT-STACK-GROUP)
	(SG-STATE-SAVED (AND (VARIABLE-BOUNDP SYS:*LISP-STATE-SAVED*)
			     ;; State no longer valid
			     (CL:SHIFTF SYS:*LISP-STATE-SAVED* NIL))))
    (WHEN (NOT (NULL SG-TO-SAVE))
      (SETF (SG-STATUS-BITS SG-TO-SAVE) %CURRENT-STACK-GROUP-STATUS-BITS)
      (SETF (SG-FLOAT-OPERATING-MODE SG-TO-SAVE) FLOAT-OPERATING-MODE)
      (SETF (SG-FLOAT-OPERATION-STATUS SG-TO-SAVE) FLOAT-OPERATION-STATUS)
      ;; Don't try to recover twice.
      (WHEN (NULL *WARM-BOOTED-STACK-GROUP*)
	;; Mark the stack group as broken in case we die during recovery.
	(SETF *WARM-BOOTED-STACK-GROUP* SG-TO-SAVE)
	(WHEN (AND SG-STATE-SAVED
		   (NOT %STACK-GROUP-LOCK)	;in middle of switch?
		   ;; Saved state might be for SYSTEM-STARTUP.
		   (NOT (EQ (SAVED-REGISTER-CONTROL-STACK-EXTRA-LIMIT)
			    (%READ-INTERNAL-REGISTER %REGISTER-CONTROL-STACK-EXTRA-LIMIT)))
		   ;; Sanity check: legitimate b-s-p must be between 1
		   ;; greater than low (top entry is unused) and equal
		   ;; to limit (limit is not exclusive) (It also has to
		   ;; be odd, but we don't check that here?)
		   (AND (%POINTER-LESSP (SG-BINDING-STACK-LOW SG-TO-SAVE)
					(SAVED-REGISTER-BINDING-STACK-POINTER))
			(NOT (%POINTER-LESSP (SG-BINDING-STACK-LIMIT SG-TO-SAVE)
					     (SAVED-REGISTER-BINDING-STACK-POINTER)))))
	  (SETF (%READ-INTERNAL-REGISTER %REGISTER-BINDING-STACK-POINTER)
		(SAVED-REGISTER-BINDING-STACK-POINTER))
	  (%SAVE-BINDINGS)
	  (SETF (SG-BINDING-STACK-POINTER SG-TO-SAVE)
		(%READ-INTERNAL-REGISTER %REGISTER-BINDING-STACK-POINTER))
	  ;; --- if we save these limits, why not extra limit too?
	  (SETF (SG-CONTROL-STACK-LIMIT SG-TO-SAVE) (SAVED-REGISTER-CONTROL-STACK-LIMIT))
	  (SETF (SG-BINDING-STACK-LIMIT SG-TO-SAVE) (SAVED-REGISTER-BINDING-STACK-LIMIT))
	  ;; Simulate the save half of %stack-group-switch using the
	  ;; machine registers as saved by the FEP (which represent the
	  ;; machine state two (FEP) frames up from the top Lisp frame);
	  ;; We know these two frames have no start-calls, bindings,
	  ;; catches.
	  (LET* ((SAVING-FRAME (SAVED-REGISTER-FP))
		 (HALT-FRAME (%POINTER-PLUS SAVING-FRAME
					    (- (LDB %%CR.CALLER-FRAME-SIZE
						    (SAVED-REGISTER-CONTROL-REGISTER)))))
		 (HALT-CONTROL-REGISTER (FRAME-CALLER-CONTROL-REGISTER SAVING-FRAME))
		 (HALT-CONTINUATION-REGISTER (FRAME-CALLER-CONTINUATION SAVING-FRAME)))
	    (SETF (SG-STACK-POINTER SG-TO-SAVE) (%POINTER-PLUS HALT-FRAME -1))
	    (SETF (SG-FRAME-POINTER SG-TO-SAVE)
		  (%POINTER-PLUS HALT-FRAME
				 (- (LDB %%CR.CALLER-FRAME-SIZE
					 HALT-CONTROL-REGISTER))) )
	    (SETF (SG-NEXT-PC SG-TO-SAVE) HALT-CONTINUATION-REGISTER)
	    (SETF (SG-CONTINUATION SG-TO-SAVE)
		  ;; i.e., saved-continuation-register
		  (FRAME-CALLER-CONTINUATION HALT-FRAME))
	    (SETF (SG-CONTROL-REGISTER SG-TO-SAVE)
		  ;; i.e., saved-control-register
		  (FRAME-CALLER-CONTROL-REGISTER HALT-FRAME)))
	  (SETF (SG-CATCH-BLOCK-LIST SG-TO-SAVE) (SAVED-REGISTER-CATCH-BLOCK-LIST))
	  (SETF (SG-ALU-ROTATE-AND-CONTROL SG-TO-SAVE)
		(SAVED-REGISTER-ALU-AND-ROTATE-CONTROL))
	  ;; --- rotate-latch, bars, hardware-dependent not needed?
	  ;; Try to clean up the stack-wiring stuff.
	  (SETF %CURRENT-STACK-GROUP NIL)
	  (STORAGE::UNWIRE-CONTROL-STACK-PAGES SG-TO-SAVE)
	  ;; Everything worked, the stack group is OK.
	  (SETF (SG-LOCK SG-TO-SAVE) NIL)
	  (SETF (SG-ACTIVE-BIT SG-TO-SAVE) 0)
	  (SETF *WARM-BOOTED-STACK-GROUP* NIL)))))
  (SETF %CURRENT-STACK-GROUP NIL)
  (SETF %CURRENT-STACK-GROUP-STATUS-BITS 0)
  ;; If the stack is still wired, just flush it.
  (WHEN (NOT (NULL *WARM-BOOTED-STACK-GROUP*))
    (STORAGE::UNWIRE-CONTROL-STACK-PAGES *WARM-BOOTED-STACK-GROUP* T))
  (SETQ %STACK-GROUP-LOCK NIL)			;No stack-group switch in progress
  NIL)

#+IMACH
(DEFWIREDFUN SYSTEM-STARTUP ()
  (DECLARE (UNSAFEGUARDED-REFERENCE LISP-TOP-LEVEL DBG:INITIALIZE-ERROR-TRAP-DISPATCH
				    SAVE-CURRENT-STACK-GROUP *WARM-BOOTED-STACK-GROUP*
				    %UNWIND-TO-FRAME-AND-FUNCALL COMPUTE-IVORY-REVISION)
	   (SPECIAL *STORAGE-DEBUG*))
  (SETQ *LISP-STOPPED-CLEANLY* NIL)
  (SETF (%READ-INTERNAL-REGISTER %REGISTER-CATCH-BLOCK-LIST) NIL)
  (SETF (CLI::FP-COPROCESSOR-ENABLED-P) NIL)
  (UPDATE-MICROSECOND-CLOCK)
  (SETF TIME:*BOOT-MICROSECOND-TIME-HIGH* TIME:*TOTAL-MICROSECOND-TIME-HIGH*)
  (SETF TIME:*BOOT-MICROSECOND-TIME-LOW* TIME:*TOTAL-MICROSECOND-TIME-LOW*)
  (SETQ TV:WHO-LINE-RUN-LIGHT-LOC NIL)		;Don't know where to put run-light yet
  (SYSTEM-CASE
    (EMBEDDED
     (CLI::INITIALIZE-EMB-COMM-AREA)
     (CLI::INITIALIZE-COMM-BUFFERS))
    (OTHERWISE NIL))
  (CLI::INITIALIZE-INTERRUPTS)
  (SYSTEM-CASE
    (VME
      (SETUP-VMEBUS))
    (OTHERWISE NIL))
  (INITIALIZE-WIRED-SCHEDULER)
  (%SET-TRAP-MODE TRAP-MODE-EXTRA-STACK)	;Ready to receive interrupts, exit FEP mode
  (CLI::INITIALIZE-MAIN-CONSOLE)
  (STORAGE::INITIALIZE-STORAGE)
  (COMPUTE-IVORY-REVISION)
  (REINITIALIZE-OLDSPACE-REGISTERS)
  (SETQ %TRANSPORT-TRAP-LEVEL 0			;Must happen before first unwired execution.
	%TRANSPORT-IN-PROGRESS NIL)
  (SAVE-CURRENT-STACK-GROUP)
  ;; Don't clobber these until the above gets to save them
  (SETQ FLOAT-OPERATING-MODE *DEFAULT-FLOAT-OPERATING-MODE*)
  (SETQ FLOAT-OPERATION-STATUS 0)
  (DBG:INITIALIZE-ERROR-TRAP-DISPATCH)
  (CLI::ENABLE-PERIODIC-TIMER)
  (STACK-GROUP-PRESET %INITIAL-STACK-GROUP #'LISP-TOP-LEVEL)
  (%STACK-GROUP-SWITCH NIL %INITIAL-STACK-GROUP 0))

;This function is called in the auxiliary stack buffer when the machine is booted
#+3600
(DEFWIREDFUN SYSTEM-STARTUP ()
  (DECLARE (UNSAFEGUARDED-REFERENCE LISP-TOP-LEVEL))
  (DECLARE (SPECIAL *STORAGE-DEBUG*))
  (SETQ *LISP-STOPPED-CLEANLY* NIL)
  (UPDATE-MICROSECOND-CLOCK)
  (SETF TIME:*BOOT-MICROSECOND-TIME-HIGH* TIME:*TOTAL-MICROSECOND-TIME-HIGH*)
  (SETF TIME:*BOOT-MICROSECOND-TIME-LOW* TIME:*TOTAL-MICROSECOND-TIME-LOW*)
  ;; This is done by the microcode as of microcode 399, because if a page-fault
  ;; is taken between setting %STACK-BUFFER-LOW and %STACK-BUFFER-LIMIT, then the
  ;; machine will crash.  This can only occur when the two SETQs straddle a page
  ;; boundary, but that has actually happened!
  ;;(SETQ %STACK-BUFFER-LOW 1 %STACK-BUFFER-LIMIT 0)	;No stack buffered yet
  (SETQ %STACK-GROUP-LOCK NIL)			;No stack-group switch in progress
  (SETQ %TRANSPORT-IN-PROGRESS NIL)		;Not in transporter (in case warm booted)
  (SETQ TV:WHO-LINE-RUN-LIGHT-LOC NIL)		;Don't know where to put run-light yet
  ;; initialize color bitblt communication vars to standard values
  (SETQ BITBLT-UNPACKING-CONSTANT -1
	BITBLT-UNPACKING-BITS-PER-ELT 1
	BITBLT-UNPACKING-MASK -1)
  (CLI::INITIALIZE-MAIN-CONSOLE)
  (COND (*WIRE-EVERYTHING*
	 (SETQ %WIRED-VIRTUAL-ADDRESS-HIGH 1777777777))
	(T
	 ;; Restore this variable in case we have previously clobbered it
	 (OR *STORAGE-DEBUG*
	     (SETQ %WIRED-VIRTUAL-ADDRESS-HIGH (- %WIRED-PHYSICAL-ADDRESS-HIGH
						  %WIRED-PHYSICAL-ADDRESS-LOW)))
	 (INITIALIZE-STORAGE)))
  ;; Initialize storage allocator
  (SETQ %LIST-CACHE-AREA NIL
	%STRUCTURE-CACHE-AREA NIL)
  (INITIALIZE-GC-MAP)
  (INITIALIZE-WIRED-SCHEDULER)
  (PRESET-MAIN-STACK-BUFFER %INITIAL-STACK-GROUP #'LISP-TOP-LEVEL)
  (%RESUME-MAIN-STACK-BUFFER))


;;; First level of Sequence Break handler

(DEFWIREDVAR *WIRED-SCHEDULER-ENABLED* NIL)

(DEFWIREDVAR *NEW-SCHEDULER-ENABLED* NIL)

(DEFWIREDVAR LAST-SEQUENCE-BREAK-TIME 0)	;microsecond clock when last broke
(DEFWIREDVAR *OLD-SCHEDULER-WAKEUP* NIL)

(DEFWIREDVAR *PREEMPTION-ENABLED* NIL)
(DEFWIREDVAR %*CHECK-FOR-PREEMPTION* NIL)

(DEFWIREDVAR *QUEUED-WAKEUP-OVERFLOW* NIL)
(DEFWIREDVAR *QUEUED-WAKEUPS*)			;set up by cold-load generator

(DEFWIREDVAR *KEYBOARD-PROCESS* NIL)
#+3600
(DEFWIREDVAR *ETHERNET-PROCESS* NIL)

(DEFWIREDVAR %*TIMER-WAKEUP-QUEUED* NIL)
(DEFWIREDVAR %*TIMER-WAKEUP-SET-TIME* 0)
(DEFWIREDVAR *NEXT-TIMER-WAKEUP-TIME* NIL)
(DEFWIREDVAR *TIMER-TASK* NIL)

;;;

;;;

(DEFWIREDFUN INITIALIZE-WIRED-SCHEDULER ()
  (SETF *WIRED-SCHEDULER-ENABLED* NIL)
  (SETF *NEW-SCHEDULER-ENABLED* NIL)
  (SETF *OLD-SCHEDULER-WAKEUP* NIL)
  (SETF *PREEMPTION-ENABLED* NIL)
  (SETF %*CHECK-FOR-PREEMPTION* NIL)
  (SETF (FILL-POINTER *QUEUED-WAKEUPS*) 0)
  (SETF *QUEUED-WAKEUP-OVERFLOW* NIL)
  (SETF *KEYBOARD-PROCESS* NIL)
  #+3600 (SETF *ETHERNET-PROCESS* NIL)
  #+3600 (SELECTQ SYS:*IO-BOARD-TYPE*
	   ((:OBS)
	    (SETF SYS:KBD-BUFFER-OUT-PTR SYS:KBD-BUFFER-IN-PTR)
	    (SETF (LDB SYS:%%TASK-3-SEQUENCE-BREAK-ENABLE SYS:TASK-3-ENABLES) -1)
	    (SETF SYS:%NET-RECEIVED-LIST NETI:%NET-NULL)))
  (SETF %*TIMER-WAKEUP-QUEUED* NIL)
  (SETF *NEXT-TIMER-WAKEUP-TIME* NIL)
  (SETF *TIMER-TASK* NIL))

(DEFWIREDFUN AUX-PROCESS-WAKEUP (PROC)
  (WHEN (AND *WIRED-SCHEDULER-ENABLED*
	     (NOT (NULL PROC)))
    #+IMACH (SYS:%SET-TRAP-MODE TRAP-MODE-IO)
    (LET ((LN (LOCF (FILL-POINTER *QUEUED-WAKEUPS*))))
      (COND ((STORE-CONDITIONAL LN 0 1)
	     ;; Fast case
	     (SETF (AREF *QUEUED-WAKEUPS* 0) PROC)
	     (SETF %*CHECK-FOR-PREEMPTION* T)
	     #+IMACH
	     (WHEN *PREEMPTION-ENABLED*
	       (IF SYS:INHIBIT-SCHEDULING-FLAG
		   (%SET-PREEMPT-PENDING)		 
		   (%SET-IMMEDIATE-PREEMPT))))
	    (T
	     (CL:LOOP
		(LET ((N (LOCATION-CONTENTS LN)))
		  (DOTIMES (I N)
		    (WHEN (EQ PROC (AREF *QUEUED-WAKEUPS* I))
		      (RETURN-FROM AUX-PROCESS-WAKEUP NIL)))
		  (COND ((>= N *SB-WAKEUP-QUEUE-SIZE*)
			 (SETF *QUEUED-WAKEUP-OVERFLOW* T)
			 (RETURN))
			((STORE-CONDITIONAL LN N (1+ N))
			 (SETF (AREF *QUEUED-WAKEUPS* N) PROC)
			 (RETURN)))))))))
  NIL)

(DEFWIREDFUN PROCESS::%WAKEUP-NEXT-TIMER-TASK (CURRENT-TIME)
  (WHEN (AND *NEXT-TIMER-WAKEUP-TIME*
	     ;; and someone to do it?
	     *TIMER-TASK*
	     ;; but no one is already doing it?
	     (OR (NOT %*TIMER-WAKEUP-QUEUED*)
		 ;; It's taken longer than a second too respond.
		 (LET ((DELTA (SYS:%32-BIT-DIFFERENCE CURRENT-TIME %*TIMER-WAKEUP-QUEUED*)))
		   (NOT ( 0 DELTA 1000000.))))
	     ;; and has its time arrived?
	     (LET ((DELTA (SYS:%32-BIT-DIFFERENCE *NEXT-TIMER-WAKEUP-TIME* CURRENT-TIME)))
	       ;; it can't hurt to wakeup the timer every 10 seconds.
	       (OR (NOT ( 0 DELTA 10000000.))
		   ;; or has time gone backwards?
		   (MINUSP (SYS:%32-BIT-DIFFERENCE CURRENT-TIME %*TIMER-WAKEUP-SET-TIME*)))))
    (SETQ %*TIMER-WAKEUP-QUEUED* CURRENT-TIME)
    (AUX-PROCESS-WAKEUP *TIMER-TASK*))
  NIL)

#+3600
;;; Stub function.  This gets redefined by system Serial, if loaded.
(DEFWIREDFUN NBS-SERIAL-SEQUENCE-BREAK ()
  (DECLARE (VALUES)))

#+3600
(DEFWIREDFUN SEQUENCE-BREAK-INTERNAL ()
  (COMPILER:%ERROR-WHEN (NOT (EQL REQUESTING-LISP-TO-STOP 0))
    (SETQ REQUESTING-LISP-TO-STOP 0)
    (AUX-HALT))
  ;; Can someone explain to me why the following is done inside sequence break, and not
  ;; by a timer task that goes off every couple of minutes??  One guess would be for 
  ;; robustness, by I don't really believe that one.  Try again. -- Greenwald
  (UPDATE-MICROSECOND-CLOCK)
  (SELECTQ *IO-BOARD-TYPE*
    ((:NBS)
     (CLI::DISK-QUEUE-START)
     (CLI::NBS-NET-PROCESS-BUFFERS)
     (NBS-SERIAL-SEQUENCE-BREAK)
     (WIRED-CONSOLE-HANDLER))
    ((:OBS)
     (WHEN SYS:%DISK-WAKEUP
       (DISK-WAKEUP))
     (WIRED-CONSOLE-HANDLER)
     (WHEN (NEQ SYS:KBD-BUFFER-IN-PTR SYS:KBD-BUFFER-OUT-PTR)
       (AUX-PROCESS-WAKEUP *KEYBOARD-PROCESS*))
     (WHEN (NEQ SYS:%NET-RECEIVED-LIST NETI:%NET-NULL)
       (AUX-PROCESS-WAKEUP *ETHERNET-PROCESS*))))
  ;; Check for timers
  (PROCESS::%WAKEUP-NEXT-TIMER-TASK (SYS:%MICROSECOND-CLOCK))
  NIL)

#+IMACH
;;; This is called only by WIRED-WAIT.
(DEFUN SEQUENCE-BREAK-INTERNAL ()
  (DECLARE (SYS:WIRED-FUNCTION))
  ;; Deal with any queued tasks
  (WHEN (LOCATION-CONTENTS CLI::*INTERRUPT-TASK-CACHE*)
    (CLI::EXECUTE-INTERRUPT-TASKS-NOT-IO 1))
  (WHEN *REQUESTING-LISP-TO-STOP*
    (SI:AUX-HALT))
  NIL)

;This part can take page faults
#+3600
(DECLARE-STORAGE-CATEGORY :FUNCTION-CELL PROCESS::PREEMPT-CURRENT-PROCESS :WIRED)

#+IMACH
;;; This sets the request bit, not the pending bit.  Isn't compatibility wonderful.
(DEFSUBST %SET-PREEMPT-PENDING ()
  (SETF (%LOGLDB %%PREEMPT.REQUEST (%READ-INTERNAL-REGISTER %REGISTER-PREEMPT-REGISTER)) 1)
  NIL)

#+IMACH
(DEFSUBST %SET-IMMEDIATE-PREEMPT ()
  (SETF (%LOGLDB %%PREEMPT.CLEAR-PENDING (%READ-INTERNAL-REGISTER %REGISTER-PREEMPT-REGISTER))
	(%LOGDPBS 1 %%PREEMPT.REQUEST 1 %%PREEMPT.PENDING 0)))

#+IMACH 
;;; This checks the request bit, not the pending bit.  Isn't compatibility wonderful.
(DEFSUBST %CHECK-PREEMPT-PENDING ()
  (%CHECK-PREEMPT-REQUEST)
  NIL)

#+3600
(DEFWIREDFUN SEQUENCE-BREAK (&OPTIONAL IGNORE)
  (DECLARE (SAFEGUARDED-REFERENCE PROCESS::PREEMPT-CURRENT-PROCESS))
  (MS-TIME *MS-TIME-SEQUENCE-BREAK*
    (SETQ %SEQUENCE-BREAK-PENDING NIL)
    (SEQUENCE-BREAK-INTERNAL)
    ;; Preempt if necessary
    (WHEN (AND *WIRED-SCHEDULER-ENABLED*
	       %*CHECK-FOR-PREEMPTION*
	       *PREEMPTION-ENABLED*)
      (COND ((OR INHIBIT-SCHEDULING-FLAG	; make without-interrupts work.
		 %STACK-GROUP-LOCK
		 ;; Make sure we aren't in the middle of a stack group switch.  This can
		 ;; only happen during co-routining, otherwise *preemption-enabled*
		 ;; would have already been NIL.
		 (BIT-TEST %SG-STACK-LOAD-STARTED %OTHER-STACK-GROUP-STATUS-BITS)
		 ;; Not enough room to funcall PREEMPT-CURRENT-PROCESS on
		 ;; main-stack?
		 ( (%POINTER-DIFFERENCE %STACK-BUFFER-LIMIT %OTHER-STACK-POINTER)
		    100))
	     (%SET-PREEMPT-PENDING))
	    (T
	     (SETF *PREEMPTION-ENABLED* NIL)
	     (FORCE-FUNCALL-IN-MAIN-STACK-BUFFER #'PROCESS::PREEMPT-CURRENT-PROCESS)))))
  (%RESUME-MAIN-STACK-BUFFER))

#+IMACH
(DEF-TRAP-HANDLER PREEMPT-REQUEST-TRAP-HANDLER
		  (%PREEMPT-REQUEST-TRAP-VECTOR TRAP-MODE-EXTRA-STACK)
		  (TRAP-VECTOR-INDEX FAULT-PC)
  (DECLARE (WIRED-FUNCTION)
	   (IGNORE TRAP-VECTOR-INDEX FAULT-PC)
	   (SYS:UNSAFEGUARDED-REFERENCE PREEMPT-CURRENT-PROCESS)
	   (SYS:SAFEGUARDED-REFERENCE STACK-OVERFLOW-TRAP-HANDLER)
	   (DBG:ERROR-REPORTER))		;For c-m-Suspend
  (LET ((START-TIME (SYS:%MICROSECOND-CLOCK)))
    ;; Return to FEP if requested.
    (COMPILER:%ERROR-WHEN *REQUESTING-LISP-TO-STOP*
      (SAVING-REGISTERS-FOR-TRAP-FOR-EFFECT
	(AUX-HALT)))

    ;; Deal with any queued tasks
    (COMPILER:%ERROR-WHEN (LOCATION-CONTENTS CLI::*INTERRUPT-TASK-CACHE*)
      (SAVING-REGISTERS-FOR-TRAP-FOR-EFFECT
	(CLI::EXECUTE-INTERRUPT-TASKS-NOT-IO 0)))

    ;; This would be fastest, but other bits might have meaning in future architectures:
    ;;(SETF (%READ-INTERNAL-REGISTER %REGISTER-PREEMPT-REGISTER) 0)
    ;; slower, but more careful:
    (SETF (LDB %%PREEMPT.CLEAR-PENDING (%READ-INTERNAL-REGISTER %REGISTER-PREEMPT-REGISTER)) 0)

    (COMPILER:%ERROR-WHEN (NOT (ZEROP (LDB %%CR.CALL-TRACE (CLI::%SAVED-CONTROL-REGISTER))))
      ;; we need the extra function call for two reasons:  First, to
      ;; make meter-function-entry decode the right frame as the
      ;; "caller" (we want it to find preempt-request-trap-handler),
      ;; and second, to make the setting of the trap mode and all
      ;; that, truly legal.
      (FLET ((DO-IT (TRACE-BITS TIME)
	       (DECLARE (SAFEGUARDED-FUNCTION)
			(SYS:SAFEGUARDED-REFERENCE DBG:METER-FUNCTION-ENTRY))
	       (SETF (LDB %%CR.CALL-TRACE (SYS:%SAVED-CONTROL-REGISTER))
		     TRACE-BITS)
	       ;; We don't have to revert to emulator mode here, as
	       ;; long as we don't overflow the stack, or screw up
	       ;; stack-wiring.  If I knew how to efficiently and
	       ;; correctly check that, I would avoid the following
	       ;; %revert-to-emulator-mode
	       (%REVERT-TO-EMULATOR-MODE)
	       (SAVING-REGISTERS-FOR-TRAP-FOR-VALUE
		 (DBG:METER-FUNCTION-ENTRY T TIME))))
	(LET ((OLD-PREEMPTION-FLAG *PREEMPTION-ENABLED*)
	      (OLD-SCHEDULING-FLAG SI:INHIBIT-SCHEDULING-FLAG)
	      (OVERHEAD NIL))
	  ;; don't want to bind si:inhibit-scheduling-flag, because then
	  ;; we'll take a trap because of the unbind when we exit the trap
	  ;; handler (or whenever we lower the trap mode), which will
	  ;; probably be a no-op.
	  (UNWIND-PROTECT
	      (PROGN
		;; we can legally set *preemption-enabled* to nil here, because we are
		;; about to test %*check-for-preemption*.
		;; setting *PREEMPTION-ENABLED* to nil inhibits getting recursive traps
		;; while metering.
		(SETF *PREEMPTION-ENABLED* NIL)
		;; setting si:inhibit-scheduling-flag
		(SETF SI:INHIBIT-SCHEDULING-FLAG T)
		(SETF OVERHEAD (DO-IT (LDB %%CR.CALL-TRACE (CLI::%SAVED-CONTROL-REGISTER))
				      START-TIME)))
	    (SETF SI:INHIBIT-SCHEDULING-FLAG OLD-SCHEDULING-FLAG)
	    (WHEN OVERHEAD
	      (SI:INCF* PROCESS::*CURRENT-PROCESS-METERING-OVERHEAD*
			(SYS:%32-BIT-DIFFERENCE (SYS:%MICROSECOND-CLOCK) OVERHEAD)))
	    (SETF *PREEMPTION-ENABLED* OLD-PREEMPTION-FLAG)
	    )))
      ;; Preempt the user
      (COMPILER:%ERROR-WHEN %*CHECK-FOR-PREEMPTION*
	(COND ((NOT *PREEMPTION-ENABLED*))
	      (SYS:INHIBIT-SCHEDULING-FLAG
	       ;; clear pending, but not request, so that it happens again on next unbind.
	       (%SET-PREEMPT-PENDING))
	      (T
	       (SETF *PREEMPTION-ENABLED* NIL)
	       ;; we can't take a trace trap on stack-overflow here,
	       ;; otherwise we'll crash to the FEP.
	       ;;
	       ;; Luckily, we're in extra stack-mode, so we won't take an interrupt, so
	       ;; we can DPB the trace-bits without making a function call for
	       ;; synchronization.
	       (LET ((TRACE-BITS
		       (LDB-TEST %%CR.CALL-TRACE
				 (%READ-INTERNAL-REGISTER %REGISTER-CONTROL-REGISTER))))
		 (SETF (SI:%LOGLDB %%CR.CALL-TRACE
				   (%READ-INTERNAL-REGISTER %REGISTER-CONTROL-REGISTER))
		       0)
		 (%REVERT-TO-EMULATOR-MODE)
		 ;; we're in emulator-mode now, so we have to restore the trace bits in
		 ;; the normal way.  Luckily, we *know* we aren't tracing, so we won't take
		 ;; a trap on this call.
		 (SETF (SI:%CURRENT-STACK-GROUP-METER-ENABLE-FLAG) TRACE-BITS))
	       (PREEMPT-CURRENT-PROCESS))))
      (%RETURN-KLUDGE 0))

    ;; Preempt the user
    (COMPILER:%ERROR-WHEN %*CHECK-FOR-PREEMPTION*
      (COND ((NOT *PREEMPTION-ENABLED*))
	    (SYS:INHIBIT-SCHEDULING-FLAG
	     ;; clear pending, but not request, so that it happens again on next unbind.
	     (%SET-PREEMPT-PENDING))
	    (T
	     (SETF *PREEMPTION-ENABLED* NIL)
	     (%REVERT-TO-EMULATOR-MODE)
	     (PREEMPT-CURRENT-PROCESS))))
    (%RETURN-KLUDGE 0)))



;;; Logical difference of T1-T2.  NEVER can cons a bignum.  Cases which
;;; overflow integers will NOT have the maximum integer returned
;;; instead.  This overflow period happens when the (microsecond) times
;;; differ by a number in the range 35 to 70 minutes.  Note that you
;;; can't make this return a large positive number by flipping the sign
;;; bit (as %allocate-xxx-block-escape used to do).
(DEFWIREDSUBST WIRED-TIME-DIFFERENCE (T1 T2)
  (%32-BIT-DIFFERENCE T1 T2))

(DEFSUBST WIRED-TIME-DIFFERENCE-MILLISECONDS (T1 T2)
  "Returns the number of milliseconds between microsecond start
   time t2 and end time t1, which is a statistical average.  The
   average is always a factor of 1.024 larger than it should be"
  (LDB (BYTE 22. 0)				;get the positive difference
       (- (LDB (BYTE 22. 10.) T1)		;convert to "milliseconds"
	  (LDB (BYTE 22. 10.) T2))))

(DECLARE-STORAGE-CATEGORY :VARIABLE WIRED-FERROR-ARGS :WIRED)
(DEFVAR-RESETTABLE WIRED-FERROR-ARGS NIL)
(DEFWIREDVAR WIRED-FERROR-ARGS-ARRAY)
(DEFWIREDVAR WIRED-FERROR-HALT T		;set to NIL when errors can be handled
  "Set to T to force WIRED-FERROR to halt always, to aid debugging")

(DEFWIREDVAR *WIRED-FERROR-RECURSION-COUNT* 0)
;; Whenever the debugger believes it is okay for another recursive WIRED-FERROR, it
;; increments this.
(DEFWIREDVAR *DEBUGGER-WIRED-FERROR-RECURSION* 0)

;; Used by the style checker.
;; The first argument to WIRED-FERROR is expected to be one of these constants.
(DEFVAR *WIRED-FERROR-TYPES*
	'(:FATAL
	  :PROCEEDABLE-HALT
	  :PROCEEDABLE
	  SYS:PAGE-FAULT-ON-UNALLOCATED-VMA
	  SYS:WRITE-IN-READ-ONLY
	  NIL))

(DEFUN WIRED-FERROR-NO-LOG (TYPE &REST ARGS)
  "Report an error from wired code.
   The error is logged in the wired event log if that is enabled.
   Normally TYPE is followed by an error string with optional arguments.
   TYPE can be:
	:FATAL - %HALT in a non-continuable fashion.  Used if paging code
		can't be tolerated and no recovery code follows the wired-ferror call.
		If not running on the aux stack same as NIL.
	:PROCEEDABLE-HALT - %HALT, but a continue will just make WIRED-FERROR
		return.  Used if paging can't be tolerated, but recovery code
		follows the call to wired-ferror.  If not running on the aux stack
		same as :PROCEEDABLE.
	:PROCEEDABLE - Used when paging can be tolerated.  Switch to the normal stack
		if not already running there and call FSIGNAL.
	SYS:PAGE-FAULT-ON-UNALLOCATED-VMA - This is just like NIL except a distinct
		flavor of error is signalled.
        SYS:WRITE-IN-READ-ONLY - ditto.
	NIL - Used when paging can be tolerated.  Switch to the normal stack if not
		already running there and call FERROR.  Normally used for argument
		checking errors."
  (DECLARE (WIRED-FUNCTION)
	   (SAFEGUARDED-REFERENCE WIRED-FERROR-1)
	   (UNSAFEGUARDED-REFERENCE FERROR FSIGNAL)
	   (ARGLIST TYPE STRING &REST ARGS)
	   (DBG:ERROR-REPORTER))
  (COND ((AND (NOT (%AUXILIARY-STACK-P))
	      (NOT *INHIBIT-CONSING-FLAG*))
	 (LEXPR-FUNCALL (SELECTQ TYPE
			  ((:PROCEEDABLE :PROCEEDABLE-HALT) #'FSIGNAL)
			  (OTHERWISE #'FERROR))
			ARGS))
	((OR *INHIBIT-CONSING-FLAG*
	     (EQ TYPE ':FATAL)
	     (EQ TYPE ':PROCEEDABLE-HALT)
	     WIRED-FERROR-HALT			;Debugging mode
	     *STORAGE-COLD-BOOT*		;No virtual memory yet
	     (NOT STORAGE-EXISTS)		;still no vm
	     (> *WIRED-FERROR-RECURSION-COUNT*	        ;More recursive page faults than the
		(1+ *DEBUGGER-WIRED-FERROR-RECURSION*))	;is allowing, or
	     (> *DEBUGGER-WIRED-FERROR-RECURSION* 2)    ;the debugger is recursing infinitely
	     #+3600 *DISK-ENQ-IN-PROGRESS*		;Can't take a page fault
	     (> *PAGE-FAULT-DEPTH* 1)			;(This line is probably a no-op)
	     %TRANSPORT-IN-PROGRESS			;Debugger probably won't work
	     #+IMACH (PLUSP %TRANSPORT-TRAP-LEVEL)	;Ditto.
	     #+3600 (> (%POINTER-DIFFERENCE		;No stack space to signal in
			 %OTHER-STACK-POINTER %OTHER-CONTROL-STACK-LIMIT)
		       (- CONTROL-STACK-MAX-FRAME-SIZE 20.)))
	 (SETQ WIRED-FERROR-ARGS ARGS)
	 #+IMACH (CL:APPLY #'WIRED-FORMAT NIL ARGS)
	 (AUX-HALT)
	 (SETQ WIRED-FERROR-ARGS NIL)
	 (UNLESS (MEMQ TYPE '(:PROCEEDABLE :PROCEEDABLE-HALT))	;unless continuable
	   ;; --- should we change the error to "You can't" if the
	   ;; luser tries to continue?
	   (LOOP DOING (%HALT))))
	(T
	 (INCF* *WIRED-FERROR-RECURSION-COUNT*)
	 (ASET TYPE WIRED-FERROR-ARGS-ARRAY 0)
	 (LOOP FOR I FROM 1
	       FOR ARG IN ARGS
	       DO (ASET ARG WIRED-FERROR-ARGS-ARRAY I)
	       FINALLY (SETF (FILL-POINTER WIRED-FERROR-ARGS-ARRAY) I))
	 #+3600 (FORCE-FUNCALL-IN-MAIN-STACK-BUFFER #'WIRED-FERROR-1)
	 (SETQ *PAGE-FAULT-DEPTH* 0)
	 #+3600 (%RESUME-MAIN-STACK-BUFFER)
	 #+IMACH
	 (STORAGE::WITHOUT-STORAGE-LOCK
	   (%FUNCALL-IN-TRAP-MODE (%SET-TRAP-MODE TRAP-MODE-EMULATOR) #'WIRED-FERROR-1)))))

(DEFWIREDFUN WIRED-FERROR (&REST ARGS)
  (DECLARE (ARGLIST TYPE STRING &REST ARGS)
	   (DBG:ERROR-REPORTER))
  #+ignore
  (LEXPR-FUNCALL #'SYS-LOG:LOG-WIRED-EVENT %WIRED-EVNTS:WIRED-FERROR ARGS)
  (LEXPR-FUNCALL #'WIRED-FERROR-NO-LOG ARGS))

(DEFUN (COMPILER:STYLE-CHECKER STYLE-CHECK-WIRED-FERROR WIRED-FERROR) (FORM)
  (LET ((FIRST-ARG (SECOND FORM)))
    (UNLESS (OR (NULL FIRST-ARG)
		(AND (KEYWORDP FIRST-ARG)
		     (CL:MEMBER FIRST-ARG *WIRED-FERROR-TYPES*))
		(AND (CL:CONSP FIRST-ARG)
		     (EQ (CAR FIRST-ARG) 'QUOTE)
		     (CL:MEMBER (CADR FIRST-ARG) *WIRED-FERROR-TYPES*)))
      (COMPILER:WARN "The first argument to ~S, ~S, was not an error type."
		     'WIRED-FERROR FIRST-ARG))))

;;; This function can be called with a format string that uses the wire event
;;; entries in their canonical order to combine logging and wired-ferror.
;;; When that can't work, use SYS-LOG:LOG-WIRED-EVENT and then WIRED-FERROR-NO-LOG
(DEFWIREDFUN WIRED-FERROR-LOG-CODE (TYPE LOG-CODE STRING &REST ARGS)
  (LEXPR-FUNCALL #'SYS-LOG:LOG-WIRED-EVENT LOG-CODE STRING ARGS)
  (LEXPR-FUNCALL #'WIRED-FERROR-NO-LOG TYPE STRING ARGS))

;; The function cell has to be wired since it is referenced in wired code above.
;; However, the function doesn't need to be wired.
;; It does have to be safeguarded, however, since we don't want to take a transport-trap
;; on the aux-stack.  Its references may be unsafeguarded.  Yow.
(DECLARE-STORAGE-CATEGORY :FUNCTION-CELL WIRED-FERROR-1 :WIRED)

(DEFUN WIRED-FERROR-1 ()
  (DECLARE (DBG:ERROR-REPORTER)
	   (SAFEGUARDED-FUNCTION DISABLE-REFERENCE-VALIDATION))
  (LOOP REPEAT (FILL-POINTER WIRED-FERROR-ARGS-ARRAY)
	FOR PP FIRST (ALOC WIRED-FERROR-ARGS-ARRAY 0)
	  THEN (%MAKE-POINTER-OFFSET DTP-LOCATIVE PP 1)
	DO (%P-STORE-CDR-CODE PP CDR-NEXT)
	FINALLY (%P-STORE-CDR-CODE PP CDR-NIL))
  (UNWIND-PROTECT
      (IF (> *WIRED-FERROR-RECURSION-COUNT* (1+ *DEBUGGER-WIRED-FERROR-RECURSION*))
	  (LOOP DO (DBG:USE-COLD-LOAD-STREAM "Recursive wired error")
		   (TERPRI) (PRINC "Use (DBG:EMERGENCY-DEBUGGER) to do crude debugging")
			    (EMERGENCY-BREAK (LEXPR-FUNCALL #'FORMAT NIL
					       (CDR (G-L-P WIRED-FERROR-ARGS-ARRAY))))
		UNTIL (MEMQ (AREF WIRED-FERROR-ARGS-ARRAY 0) '(:PROCEEDABLE :PROCEEDABLE-HALT))
		DO (TERPRI) (PRINC "You may not proceed from this error."))
	  (LEXPR-FUNCALL (SELECTQ (AREF WIRED-FERROR-ARGS-ARRAY 0)
			   ((:PROCEEDABLE :PROCEEDABLE-HALT) #'FSIGNAL)
			   ((PAGE-FAULT-ON-UNALLOCATED-VMA)
			    #'SIGNAL-PAGE-FAULT-ON-UNALLOCATED-VMA)
			   ((WRITE-IN-READ-ONLY)
			    #'SIGNAL-WRITE-IN-READ-ONLY)
			   (OTHERWISE #'FERROR))
			 (CDR (G-L-P WIRED-FERROR-ARGS-ARRAY))))
    ;; Until this flag is cleared, another WIRED-FERROR will just halt.  Doing it
    ;; this way means that the flag will stay set until someone actually handles
    ;; the error and aborts; thus the flag will stay set while a background
    ;; process that got a wired-ferror is waiting for you to look at it.  This
    ;; could be too conservative, but is better than clearing the flag before we
    ;; find out that the Debugger has been blown away.
    (DECF* *WIRED-FERROR-RECURSION-COUNT*)))

(DEFMACRO ALLOW-RECURSIVE-WIRED-FERROR (&BODY BODY)
  (LET ((VAR1 (GENSYM)))
    `(LET ((,VAR1 *DEBUGGER-WIRED-FERROR-RECURSION*))
       (UNWIND-PROTECT
	   (PROGN (WHEN (> *WIRED-FERROR-RECURSION-COUNT* ,VAR1)
		    (SETQ *DEBUGGER-WIRED-FERROR-RECURSION* (1+ ,VAR1)))
		  . ,BODY)
	 (SETQ *DEBUGGER-WIRED-FERROR-RECURSION* ,VAR1)))))

#+3600
(DEFUN SIGNAL-PAGE-FAULT-ON-UNALLOCATED-VMA (FORMAT-STRING VMA PC FP SP)
  (DECLARE (DBG:ERROR-REPORTER))
  (ERROR 'PAGE-FAULT-ON-UNALLOCATED-VMA
	 :FORMAT-STRING FORMAT-STRING
	 :VMA VMA :PC PC :FP FP :SP SP))

#+IMach
(DEFUN SIGNAL-PAGE-FAULT-ON-UNALLOCATED-VMA (FORMAT-STRING VMA)
  (DECLARE (DBG:ERROR-REPORTER))
  (ERROR 'PAGE-FAULT-ON-UNALLOCATED-VMA :FORMAT-STRING FORMAT-STRING :VMA VMA))

(DEFUN SIGNAL-WRITE-IN-READ-ONLY (FORMAT-STRING VMA)
  (DECLARE (DBG:ERROR-REPORTER))
  (ERROR 'WRITE-IN-READ-ONLY :FORMAT-STRING FORMAT-STRING :ADDRESS VMA))

(DEFWIREDFUN MAYBE-WIRED-FERROR (&REST ARGS)
  (DECLARE (ARGLIST TYPE STRING &REST ARGS))
  (APPLY #'WIRED-FERROR ARGS))


;; c.f., netboot::disk-queue-empty-p
(DEFWIREDFUN DISK-IDLE-P ()
  #+3600
  (CL:CASE SYS:*IO-BOARD-TYPE*
    (:OBS (= (SI:%DISK-DCW-INDEX) SI:*DCW-OUT*))
    (:NBS (EQ CLI::*DISK-QUEUE-EMPTY* CLI::*DISK-QUEUE-FILL*)))
  #+(AND IMACH (NOT VLM))
  (STORAGE::DISK-EVENT-IDLE-P STORAGE::*ROOT-DISK-EVENT*)
  #+(AND IMACH VLM)
  T)


;;; Must be called on the auxiliary stack
(DEFWIREDFUN AUX-HALT #+3600 () #+IMach (&OPTIONAL FEP-COMMAND-STRING)
  ;; The halt is "clean" if the disk finishes
  (SETQ *LISP-STOPPED-CLEANLY*
	(LOOP WITH START-TIME = (%MICROSECOND-CLOCK)
	      THEREIS (DISK-IDLE-P)
	      UNTIL (> (WIRED-TIME-DIFFERENCE (%MICROSECOND-CLOCK) START-TIME) 5000000.)))
  #+3600 (%HALT)
  #+IMach
  (IF FEP-COMMAND-STRING
      (SYS:FEP-COMMAND-STRING FEP-COMMAND-STRING)
      (%HALT))
  (SETQ *LISP-STOPPED-CLEANLY* NIL)
  #+Imach
  (SYSTEM-CASE
    ((Merlin Zora)
     (SCSI::SCSI-REINITIALIZE-IF-STOLEN))
    ((Domino)
     (SCSI::SCSI-REINITIALIZE-IF-STOLEN-FROM-DOMINO))
    ((MacIvory VLM) NIL)
    (otherwise NIL))
  (STORAGE::ADJUST-*COUNT-SWAP-PAGES*))


#+IMACH
CLOS-INTERNALS::
(def-wired-assembled si:read-rom-word
  (entry-rest-not-accepted 3 3)
  (immediate -133952512.)
  (packed %memory-write (im 0))
  (immediate -133952512.)
  (packed push (sp 0))
  (packed %write-internal-register sys:%register-bar-3)
  (packed push (sp 0))
  (packed %write-internal-register sys:%register-bar-2)
  (packed push (sp 0))
  (packed %write-internal-register sys:%register-bar-1)
  (packed push (sp 0))
  (packed %write-internal-register sys:%register-bar-0)
  (packed set-sp-to-address (sp -1))
  (immediate -2)
  (packed minusp (im 0))
  (packed push-n-nils (im 6))
  tag24
  (packed set-sp-to-address (fp 10.))
  (packed push-address (fp 5))
  (packed %write-internal-register sys:%register-lp)
  (packed no-op 0)
  (packed %block-3-read #.(si:pack-block-bits :cycle-type sys:%memory-raw
					      :fixnum-only nil
					      :prefetch nil
					      :no-increment t))
  (packed %block-2-read #.(si:pack-block-bits :cycle-type sys:%memory-raw
					      :fixnum-only nil
					      :prefetch nil
					      :no-increment t))
  (packed %block-1-read #.(si:pack-block-bits :cycle-type sys:%memory-raw
					      :fixnum-only nil
					      :prefetch nil
					      :no-increment t))
  (packed %block-0-read #.(si:pack-block-bits :cycle-type sys:%memory-raw
					      :fixnum-only nil
					      :prefetch nil
					      :no-increment t))

  (packed set-sp-to-address (sp -4))
  (packed push (im 1))
  (packed %write-internal-register sys:%register-loop-counter)
  (packed no-op 0)
  (packed no-op 0)
  (packed push (fp 2))
  (packed %write-internal-register sys:%register-ucode-rom-contents)
  (packed plusp (im 1))
  (packed branch-true-no-pop (branch-offset tag45))
  (immediate 342225.)
  tag45
  (packed set-sp-to-address (fp 10.))
  (packed push-n-nils (im 7))
  (packed set-sp-to-address (sp -7))
  (packed no-op 0)
  tag53
  (packed push (im 5))
  tag54
  (packed sub (im 1))
  (packed zerop (sp 0))
  (packed branch-false-else-extra-pop (branch-offset tag54))
  (packed no-op 0)
  (packed %read-internal-register sys:%register-ucode-rom-contents)
  (packed logxor (im #.(ldb (byte 8. 0) -1)))
  (packed pop (lp 0))
  (packed push-address (lp 1))
  (packed %write-internal-register sys:%register-lp)
  (packed no-op 0)
  (packed push-address (lp 0))
  (packed push-address (fp 11.))
  (packed eq (sp pop))
  (packed branch-false (branch-offset tag53))
  (packed increment (fp 3))
  (packed minusp (fp 3))
  (packed branch-true (branch-offset tag24))
  (packed set-sp-to-address (fp 10.))
  (packed return-multiple (im 6))
  (packed %halt 0)
  (suffix #.`(si:read-rom-word
	       ,@(si:canonicalize-storage-category-debugging-info
		   '((si:arglist address) (sys:wired-function)))))
  )

#+IMACH
(DEFWIREDVAR *IVORY-REVISION-NUMBER*)

#+IMACH
(DEFWIREDFUN READ-MICROCODE-ROM-CHECKSUM ()
  (SI:%SET-TRAP-MODE TRAP-MODE-IO)
  #+VLM (VALUES SYS:*SYSTEM-TYPE* 0 0 0 0 0)
  #-VLM
  (WITH-SYSTEM-BLOCK-REGISTERS (1 2 3)
    (WITH-STACK-LIST (REV2-UNREADABLE-LOCATIONS
		       #o267 #o2311 #o3017 #o3042
		       #o3303 #o3307 #o3317 #o3327 #o3333 #o3352 #o3637)
      (SAVING-REGISTERS (%REGISTER-PREFETCHER-CONTROL)
	(SETF (%READ-INTERNAL-REGISTER %REGISTER-PREFETCHER-CONTROL)
	      (DPBS 7 %%PREFETCHER-HIGH-MARK
		    16 %%PREFETCHER-LOW-MARK
		    1 %%PREFETCHER-ENABLE
		    0))
	(LET* ((REVISION (%READ-INTERNAL-REGISTER %REGISTER-CHIP-REVISION))
	       (SKIP (CL:CASE REVISION
		       (2 REV2-UNREADABLE-LOCATIONS)
		       (OTHERWISE NIL)))
	       (SUM0 0)
	       (CARRY0 0)
	       (SUM1 0)
	       (CARRY1 0)
	       (SUM2 0)
	       (CARRY2 0)
	       (SUM3 0)
	       (CARRY3 0)
	       (SUM4 0)
	       (CARRY4 0)
	       (SUM5 0)
	       (CARRY5 0))
	  (LOOP WITH NEXT-SKIP = (POP SKIP)
		FOR ADDRESS FROM 0 BELOW 2048. DOING
	    (COND ((EQL ADDRESS NEXT-SKIP)
		   (SETQ NEXT-SKIP (POP SKIP)))
		  (T
		   (SI:%ENSURE-N-PUSHES-WITHOUT-STACK-CACHE-SPILL 40.)
		   (MULTIPLE-VALUE-BIND (W0 W1 W2 W3 W4 W5)
		       (READ-ROM-WORD ADDRESS)
		     (CL:MULTIPLE-VALUE-SETQ (SUM5 CARRY5) (%ADD-BIGNUM-STEP W5 SUM5 CARRY5))
		     (CL:MULTIPLE-VALUE-SETQ (SUM4 CARRY4) (%ADD-BIGNUM-STEP W4 SUM4 CARRY4))
		     (CL:MULTIPLE-VALUE-SETQ (SUM3 CARRY3) (%ADD-BIGNUM-STEP W3 SUM3 CARRY3))
		     (CL:MULTIPLE-VALUE-SETQ (SUM2 CARRY2) (%ADD-BIGNUM-STEP W2 SUM2 CARRY2))
		     (CL:MULTIPLE-VALUE-SETQ (SUM1 CARRY1) (%ADD-BIGNUM-STEP W1 SUM1 CARRY1))
		     (CL:MULTIPLE-VALUE-SETQ (SUM0 CARRY0) (%ADD-BIGNUM-STEP W0 SUM0 CARRY0)))
		   ))
		FINALLY
		  (CL:MULTIPLE-VALUE-BIND (SUM1 CARRY1)
		      (%ADD-BIGNUM-STEP SUM1 SUM0 (%32-BIT-PLUS CARRY1 CARRY0))
		    (CL:MULTIPLE-VALUE-BIND (SUM2 CARRY2)
			(%ADD-BIGNUM-STEP SUM2 SUM1 (%32-BIT-PLUS CARRY2 CARRY1))
		      (CL:MULTIPLE-VALUE-BIND (SUM3 CARRY3)
			  (%ADD-BIGNUM-STEP SUM3 SUM2 (%32-BIT-PLUS CARRY3 CARRY2))
			(CL:MULTIPLE-VALUE-BIND (SUM4 CARRY4)
			    (%ADD-BIGNUM-STEP SUM4 SUM3 (%32-BIT-PLUS CARRY4 CARRY3))
			  (CL:MULTIPLE-VALUE-BIND (SUM5 CARRY5)
			      (%ADD-BIGNUM-STEP SUM5 SUM4 (%32-BIT-PLUS CARRY5 CARRY4))
			    (RETURN (VALUES (%32-BIT-PLUS SUM0 CARRY0)
					    (%32-BIT-PLUS SUM1 CARRY1)
					    (%32-BIT-PLUS SUM2 CARRY2)
					    (%32-BIT-PLUS SUM3 CARRY3)
					    (%32-BIT-PLUS SUM4 CARRY4)
					    (%32-BIT-PLUS SUM5 CARRY5))))))))))))))

#+IMACH
(DEFUN COMPUTE-IVORY-REVISION ()
  (MULTIPLE-VALUE-BIND (CHECKSUM1 CHECKSUM2 CHECKSUM3 CHECKSUM4 CHECKSUM5 CHECKSUM6)
      (READ-MICROCODE-ROM-CHECKSUM)
    (DECLARE (IGNORE CHECKSUM2 CHECKSUM3 CHECKSUM4 CHECKSUM5))
    (SETQ *IVORY-REVISION-NUMBER*
	  (CL:ECASE (%READ-INTERNAL-REGISTER %REGISTER-CHIP-REVISION)
	    (0 %IVORY-REVISION-0)
	    (1 
	      (CL:CASE CHECKSUM6
		(40959. %IVORY-REVISION-1)
		(OTHERWISE %IVORY-REVISION-1?)))
	    (2
	      (CL:CASE CHECKSUM6
		(#o-13144130511 %IVORY-REVISION-2A)
		(#o-13144230511 %IVORY-REVISION-2B)
		(OTHERWISE %IVORY-REVISION-2?)))
	    (3
	      (CL:CASE CHECKSUM6
		(40959. %IVORY-REVISION-3)
		(OTHERWISE %IVORY-REVISION-3?)))
	    (4
	      (CL:CASE CHECKSUM6
		(40959.
		  (CL:CASE CHECKSUM1
		    (#o7000026 %IVORY-REVISION-4)
		    (#o7200027 %IVORY-REVISION-4A)
		    (OTHERWISE %IVORY-REVISION-4?)))
		(OTHERWISE %IVORY-REVISION-4?)))
	    (5 %IVORY-REVISION-5)))))

#+IMACH
(DEFUN IVORY-REVISION-NAME ()
  (LET ((LONG-NAME (CL:SYMBOL-NAME (NTH *IVORY-REVISION-NUMBER* *IVORY-REVISIONS*))))
    (NSUBSTRING LONG-NAME (1+ (CL:POSITION #\- LONG-NAME :FROM-END T)))))
