;SORT PACKAGE   -*- Package: SYSTEM-INTERNALS; Base: 8; Mode: LISP-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;ENTRIES
;  SORT <list or array> <lessp predicate>
;  SORTCAR  ..  ..
;  SORT-SHORT-LIST <list> <lessp predicate>
;     A simple exchange sort, good for short lists.  Need not be contiguous.
;  SORTCAR-SHORT-LIST .. ..
;  STABLE-SORT -- slower version of SORT which is guaranteed to be stable
;  SORT-GROUPED-ARRAY <array-only> <group-size> <lessp predicate>
;     Assumes logical records come in groups of <group-size> entries.
;             the key is the first entry of the group.
;     Uses ARRAY-ACTIVE-LENGTH to determine portion of array to be sorted.
;  SORT-GROUPED-ARRAY-GROUP-KEY <array-only> <group-size> <lessp predicate>
;     Similar to SORT-GROUPED-ARRAY, but <lessp predicate> should be a function
;     of four arguments, <array1> <idx1> <array2> <idx2>.  Thus, it can
;     reference the entire group, if desired, not just the first element.

;INTERNAL FUNCTIONS
;  SORT-ARRAY-QUICK <array> <left index> <right index>
;       Uses insertion sort if small, otherwise Quicksort
;	Indices are inclusive.
;  SORT-GROUPED-ARRAY-QUICK <array> <left index> <right index> <group-size>
;       Analogous to above for use by SORT-GROUPED-ARRAY.
;  SORT-GROUPED-ARRAY-GROUP-KEY-QUICK <array> <left index> <right index> <group-size>
;       Analogous for SORT-GROUPED-ARRAY-GROUP-KEY.
;  SORT-CONTIG-LIST-QUICK <list> <length> 
;  SORT-LIST <list>
;	Hacks contiguous lists, does combined merge and quick sort
;  SORT-LIST-PREFIX <height>
;  SORT-LIST-MERGE <list1> <list2>
;  SORT-LIST-MERGE-CONTIG <list1> <length1> <list2> <length2>

;SUBROUTINE (SHOULD BE PUT INTO THE NUCLEUS IN SOME FORM)
;  CONTIGUOUS-LIST-INFO <list>
;     Returns 2 values:
;	Number of contiguous CDR-NEXTs in <list> (1- the number of contiguous CAR cells)
;	"last" of the contiguous part.  CAR of this is last CAR cell, CDR is link
;	the non-contiguous part of the list.
;     If you call this with an argument of NIL, it will either loop or err out.
;
;NOTE the macros A2R and A2S herein should not be put into the environment.
; They are only an aid to coding the thing, and should be removed after compilation.

(DEFVAR SORT-LESSP-PREDICATE)
(DEFVAR SORT-LESSP-PREDICATE-ON-CAR)
(DEFVAR SORT-INPUT-LIST)
(DEFVAR SORT-DUMMY-ARRAY-HEADER)
(DEFVAR SORT-QS-BREAKEVEN 10)
(DEFVAR SORT-ARRAY-TEMP-V)

;Special Considerations
;
; GC must never de-linearize lists.
;  The hairy version of NRECONC (NREVERSE) depends on this too.
; Note that a list can get de-linearized by the GC finding a pointer
;  to the middle and copying from there.  One way around this is to
;  set up an arrangement to be interrupted, signalled, thrown-through,
;  or whatever when a flip happens, then at the time the size of a
;  contiguous segment of list is counted, ensure that everything is
;  in newspace (already copied).  Great care is required.

(DEFUN SORTCAR (X SORT-LESSP-PREDICATE-ON-CAR)
  (DECLARE (DOWNWARD-FUNARG SORT-LESSP-PREDICATE-ON-CAR))
  (CLI::FUNCTIONALLY-EVALUATE SORT-LESSP-PREDICATE-ON-CAR)
  (SORT X #'(LAMBDA (X Y) (FUNCALL SORT-LESSP-PREDICATE-ON-CAR (CAR X) (CAR Y)))))

(DEFUN SORT (X SORT-LESSP-PREDICATE &AUX TEM)
  (DECLARE (DOWNWARD-FUNARG SORT-LESSP-PREDICATE))
  (CLI::FUNCTIONALLY-EVALUATE SORT-LESSP-PREDICATE)
  (COND ((LISTP X)
	 (COND ((< (LENGTH X) 12.) (SORT-SHORT-LIST X SORT-LESSP-PREDICATE))
	       (T (SORT-LIST X))))
	((NULL X)					;NIL IS A LIST, SORT OF
	 X)
	((ARRAYP X)
	 (SORT-ARRAY-QUICK X 0 (1- (ARRAY-ACTIVE-LENGTH X)))
	 X)
	((AND (SYMBOLP X)
	      (ARRAYP (SETQ TEM (FSYMEVAL X))))
	 (SORT-ARRAY-QUICK TEM 0 (1- (ARRAY-LENGTH TEM)))
	 X)
	((FERROR "The argument to SORT, ~S, was not a list or array." X))))

(DEFUN STABLE-SORT (X LESSP-PREDICATE &AUX TEM)
  (DECLARE (DOWNWARD-FUNARG LESSP-PREDICATE))
  (CLI::FUNCTIONALLY-EVALUATE LESSP-PREDICATE)
  (COND ((NULL X) NIL)
	((LISTP X) (SORT-SHORT-LIST X LESSP-PREDICATE))
	((ARRAYP X)
	 (SORT-ARRAY-STABLE X LESSP-PREDICATE)
	 X)
	((AND (SYMBOLP X)
	      (ARRAYP (SETQ TEM (FSYMEVAL X))))
	 (SORT-ARRAY-STABLE TEM LESSP-PREDICATE)
	 X)
	((FERROR "The argument to STABLE-SORT, ~S, was not a list or array." X))))

(DEFUN STABLE-SORTCAR (X SORT-LESSP-PREDICATE-ON-CAR)
  (DECLARE (DOWNWARD-FUNARG SORT-LESSP-PREDICATE-ON-CAR))
  (CLI::FUNCTIONALLY-EVALUATE SORT-LESSP-PREDICATE-ON-CAR)
  (STABLE-SORT X #'(LAMBDA (X Y) (FUNCALL SORT-LESSP-PREDICATE-ON-CAR (CAR X) (CAR Y)))))

(DEFUN SORT-SHORT-LIST (L LPRED)
  (DECLARE (DOWNWARD-FUNARG LPRED))
  (COND ((CDR L)
	 (DO ((I (1- (LENGTH L)) (1- I))
	      (SWITCH NIL))
	     ((OR (ZEROP I) SWITCH))
	    (SETQ SWITCH T)
	    (DO LP L (CDR LP) (NULL (CDR LP))
	      (COND ((FUNCALL LPRED (CADR LP) (CAR LP))
		     (RPLACA LP (PROG1 (CADR LP) (RPLACA (CDR LP) (CAR LP))))
		     (SETQ SWITCH NIL)))))))
  L)

(DEFUN SORTCAR-SHORT-LIST (L LPRED)
  (DECLARE (DOWNWARD-FUNARG LPRED))
  (PROG (LP SWITCH)
	(COND ((NULL (CDR L))
	       (RETURN L)))
     L0  (SETQ LP L)
     L1  (COND ((FUNCALL LPRED (CAADR LP) (CAAR LP))
		(RPLACA LP (PROG1 (CADR LP) (RPLACA (CDR LP) (CAR LP))))
		(SETQ SWITCH T)))
   	(SETQ LP (CDR LP))
	(COND ((CDR LP) (GO L1))
	      (SWITCH (SETQ SWITCH NIL)
		      (GO L0)))
	(RETURN L)))

;Simple-minded, slow, but works
(DEFUN SORT-ARRAY-STABLE (A LESSP-PREDICATE)
  (DECLARE (DOWNWARD-FUNARG LESSP-PREDICATE))
  (LET ((A A))
    (DECLARE (ARRAY-REGISTER A))
    (LOOP FOR N DOWNFROM (1- (ARRAY-ACTIVE-LENGTH A))
	  WHILE (PLUSP N)
	  AS CHANGED = NIL
	  DO (LOOP FOR I FROM 0 BELOW N
		   AS X1 = (AREF A I) AND X2 = (AREF A (1+ I))
		   WHEN (FUNCALL LESSP-PREDICATE X2 X1)
		     DO (ASET X2 A I)
			(ASET X1 A (1+ I))
			(SETQ CHANGED T))
	  WHILE CHANGED)))

;  CONTIGUOUS-LIST-INFO <list>
;     Returns 2 values:
;	Number of contiguous CDR-NEXTs in <list> (1- the number of contiguous CAR cells)
;	"last" of the contiguous part.  CAR of this is last CAR cell, CDR is link
;	the non-contiguous part of the list.
;     If you call this with an argument of NIL, it will either loop or err out.

(DEFUN CONTIGUOUS-LIST-INFO (LIST)
  (PROG ((N 0))
LOOP (OR (AND (= (%P-CDR-CODE LIST) CDR-NEXT)
	      (NEQ (%P-DATA-TYPE LIST) DTP-HEADER-FORWARD))
	 (RETURN (VALUES N LIST)))
     (SETQ N (1+ N) LIST (CDR LIST))
     (GO LOOP)))

;;; Note, LENGTH is 1- real length
(DEFUN SORT-CONTIG-LIST-QUICK (LIST LENGTH &AUX LLOC FLOC)
  (SETQ LLOC (%MAKE-POINTER DTP-LOCATIVE LIST))
  #+(OR CADR IMACH)
  (IF SORT-DUMMY-ARRAY-HEADER
      (CHANGE-INDIRECT-ARRAY SORT-DUMMY-ARRAY-HEADER 'ART-Q-LIST (1+ LENGTH) LLOC NIL)
      (SETQ SORT-DUMMY-ARRAY-HEADER (MAKE-ARRAY (1+ LENGTH)
						':TYPE 'ART-Q-LIST
						':DISPLACED-TO LLOC)))
  #+3600	;Don't get screwed by the two different formats of indirect array
  (PROGN
    (UNLESS SORT-DUMMY-ARRAY-HEADER
      (SETQ SORT-DUMMY-ARRAY-HEADER
	    (MAKE-ARRAY (DEFSYSBYTE-LIMIT-VALUE ARRAY-SHORT-INDIRECT-LENGTH-FIELD)
			:TYPE 'ART-Q-LIST :DISPLACED-TO LLOC)))
    (SETF (ARRAY-LONG-LENGTH-FIELD SORT-DUMMY-ARRAY-HEADER) (1+ LENGTH))
    (SETF (ARRAY-INDIRECT-POINTER SORT-DUMMY-ARRAY-HEADER) LLOC)
    (ARRAY-REGISTER-EVENT))
  (SETQ LLOC (%MAKE-POINTER-OFFSET DTP-LIST LIST LENGTH))
  (COND ((= DTP-HEADER-FORWARD (%P-DATA-TYPE LLOC))
	 (SETQ FLOC (%P-CONTENTS-AS-LOCATIVE LLOC))
	 ;; Replace the RPLACD forwarding pointer with the CAR it points to
	 (%P-STORE-CDR-TYPE-AND-POINTER LLOC CDR-NIL (%P-DATA-TYPE FLOC) (CAR FLOC))))
  (SORT-ARRAY-QUICK SORT-DUMMY-ARRAY-HEADER 0 LENGTH)	;Call array quicksort on it
  (COND (FLOC
	 ;; Update the CAR pointed to with the correct element of the sorted partial list
	 (RPLACA FLOC (CAR LLOC))
	 ;; If a garbage collection occurred before the %P-STORE-CDR-TYPE-AND-POINTER
	 ;; above, the DTP-HEADER-FORWARD at LLOC could have been snapped out.  In that
	 ;; case, don't try to store it back.  No WITHOUT-INTERRUPTS needed!
	 (UNLESS (EQ FLOC LLOC)
	   (%P-STORE-CDR-TYPE-AND-POINTER LLOC CDR-NIL DTP-HEADER-FORWARD FLOC)))))

; List sorting algorithm
;
; Due to MJF and GLS.
;
; The basic idea is to do a merge sort, which gets the list into
; order by doing RPLACDs.  (This is the same algorithm as is
; used for sorting lists in Maclisp.)  It operates by considering
; the given list to be the frontier of a binary tree (which may be
; incomplete if the length of the list is not a power of two).
; At each node, the two nodes below it are merged.  The frontier
; nodes are one-element lists, these are then merged into bigger lists.
; Instead of the usual method of merging all pairs, then all pairs
; of pairs, etc., this implementation effectively does a suffix walk
; over the binary tree (thus it can grab items sequentially off the given list.)
; Warning: like DELQ and others, the safe way to use this
; function is (SETQ FOO (ALPHASORT FOO)) or whatever.
;
; On the lisp machine, the above algorithm does not work well, because
; cdr-coded (contiguous) lists cannot be RPLACD'ed without implicit CONSing.
; Instead, contiguous chunks of the list are sorted in place.
; The idea is to use a merge sort on the list of contiguous chunks
; and to be a little hairy when comparing two chunks
; in the merge.  First, on encountering each chunk it is sorted
; (using quicksort).  Then, when two chunks meet during a merge,
; they are merged together in place, one getting all the low elements
; and one all thee high elements.  Deciding which one to use for the
; high chunk is a little tricky; note the code carefully.
; The two chunks are combined by a straight insertion technique; there may be
; better ways to combine two already sorted chunks.  Another approach
; not used here would be not to sort each chunk using quicksort except
; the first, and then to be hairier about the insertion technique.

(DEFUN SORT-LIST (SORT-INPUT-LIST &AUX SORT-DUMMY-ARRAY-HEADER)
  (DO ((HEIGHT -1 (1+ HEIGHT))
       (SOFAR NIL))
      ((NULL SORT-INPUT-LIST)
       (AND SORT-DUMMY-ARRAY-HEADER
	    (RETURN-ARRAY (PROG1 SORT-DUMMY-ARRAY-HEADER (SETQ SORT-DUMMY-ARRAY-HEADER NIL))))
       SOFAR)
    (SETQ SOFAR (SORT-LIST-MERGE SOFAR (SORT-LIST-PREFIX HEIGHT)))))

(DEFUN SORT-LIST-PREFIX (HEIGHT &AUX LENGTH LAST)	;GET MERGED BINARY TREE, SPECD HEIGHT
  (COND ((NULL SORT-INPUT-LIST) NIL)			;INPUT EXHAUSTED, INCOMPLETE TREE
	((< HEIGHT 1)
	 (MULTIPLE-VALUE (LENGTH LAST)			;PULL OFF A CONTIGUOUS SEGMENT OF LIST
	       (CONTIGUOUS-LIST-INFO SORT-INPUT-LIST))
	 (AND (> LENGTH 0)				;IF MORE THAN A SINGLE CELL, SORT IT.
	      (SORT-CONTIG-LIST-QUICK SORT-INPUT-LIST LENGTH))
	 (PROG1 SORT-INPUT-LIST				;RETURN THAT SEGMENT
		(AND (SETQ SORT-INPUT-LIST (CDR LAST))	;ADVANCE TO NEXT
		     (RPLACD LAST NIL))))		;MAKE SURE RETURNED SEGMENT ENDS
	((SORT-LIST-MERGE (SORT-LIST-PREFIX (1- HEIGHT))
			  (SORT-LIST-PREFIX (1- HEIGHT))))))

(DEFUN SORT-LIST-MERGE (L1 L2 &AUX R)			;MERGE TWO SORTED LISTS, HACKING CONTIG
  (DO ((P (LOCF R))			;R ACCUMULATES RESULT, P POINTS TO TAIL
       (LAST1) (LENGTH1) (LAST2) (LENGTH2) (HIGH1) (HIGH2))
      ((COND ((NULL L1)					;IF AN INPUT IS EXHAUSTED, DONE
	      (RPLACD P L2)
	      (RETURN R))
	     ((NULL L2)
	      (RPLACD P L1)
	      (RETURN R))))
    (MULTIPLE-VALUE (LENGTH1 LAST1) (CONTIGUOUS-LIST-INFO L1))	;PULL OFF A CONTIGUOUS CHUNK
    (MULTIPLE-VALUE (LENGTH2 LAST2) (CONTIGUOUS-LIST-INFO L2))	;OF EACH LIST
    (SETQ HIGH1 (CAR LAST1) HIGH2 (CAR LAST2))
    (COND ((FUNCALL SORT-LESSP-PREDICATE HIGH2 (CAR L1))	;SEE IF CHUNK2 ALL < CHUNK1
	   (RPLACD P L2)
	   (SETQ P LAST2 L2 (CDR LAST2)))
	  ((OR (AND (= LENGTH1 0) (= LENGTH2 0))		;SMALL CHUNKS, BYPASS HAIR
	       (FUNCALL SORT-LESSP-PREDICATE HIGH1 (CAR L2)))	;SEE IF CHUNK1 ALL < CHUNK2
	   (RPLACD P L1)
	   (SETQ P LAST1 L1 (CDR LAST1)))
	  ;; GOT TO MERGE CHUNKS, CHOOSE HIGHER.  BUT CORRECT THE LENGTHS FIRST.
	  ((FUNCALL SORT-LESSP-PREDICATE HIGH1 HIGH2)
	   (SORT-LIST-MERGE-CONTIG L1 LENGTH1 L2 LENGTH2)
	   (RPLACD P L1)
	   (SETQ P LAST1 L1 (CDR LAST1)))
	  (T
	   (SORT-LIST-MERGE-CONTIG L2 LENGTH2 L1 LENGTH1)
	   (RPLACD P L2)
	   (SETQ P LAST2 L2 (CDR LAST2))))))

;MACROS FOR NEXT FUNCTION, ALLOW HACKING OF THE TWO LISTS AS ONE ARRAY.
;ALSO NOTE THE EVALUATION OF THE SUBSCRIPT SHOULD NOT HAVE SIDE-EFFECTS.

(DEFMACRO SORT-LIST-AREF (I)
  `(COND ((< ,I N1) (%P-CONTENTS-OFFSET L1 ,I))
	 ((= ,I N1) (IF (ZEROP N1) (CAR L1)
			(CADR (%MAKE-POINTER-OFFSET DTP-LIST L1 (1- N1)))))
	 ((= ,I N1+N2+1) (IF (ZEROP N2) (CAR L2)
			     (CADR (%MAKE-POINTER-OFFSET DTP-LIST L2 (1- N2)))))
	 (T (%P-CONTENTS-OFFSET L2 (- ,I (1+ N1))))))

(DEFMACRO SORT-LIST-ASET (X I)
  `(COND ((< ,I N1) (%P-STORE-CONTENTS-OFFSET ,X L1 ,I))
	 ((= ,I N1) (IF (ZEROP N1) (RPLACA L1 ,X)
			(RPLACA (CDR (%MAKE-POINTER-OFFSET DTP-LIST L1 (1- N1))) ,X)))
	 ((= ,I N1+N2+1) (IF (ZEROP N2) (RPLACA L2 ,X)
			     (RPLACA (CDR (%MAKE-POINTER-OFFSET DTP-LIST L2 (1- N2))) ,X)))
	 (T (%P-STORE-CONTENTS-OFFSET ,X L2 (- ,I (1+ N1))))))

;SIMPLE-MINDED INSERTION-SORT TAIL-END TO MERGE TWO SORTED ARRAYS
(DEFUN SORT-LIST-MERGE-CONTIG (L1 N1 L2 N2 &AUX (N1+N2+1 (+ N1 N2 1)))
  (DO ((I (1+ N1) (1+ I)))
      ((> I N1+N2+1))
    (DO ((J (1- I) (1- J))
	 (X (SORT-LIST-AREF I)))
	((OR (< J 0)
	     (NOT (FUNCALL SORT-LESSP-PREDICATE X (SORT-LIST-AREF J))))
	 (SORT-LIST-ASET X (1+ J)))
      (SORT-LIST-ASET (SORT-LIST-AREF J) (1+ J)))))

;Quicksort for arrays.  If the array is small, does an insertion sort instead.

(DEFUN SORT-ARRAY-QUICK (A L R)
  (LET ((A A))
    (DECLARE (ARRAY-REGISTER A))
    (COND ((> L (- R SORT-QS-BREAKEVEN))		;SEE IF SHOULD DO AN INSERTION SORT
	   (DO ((I (1+ L) (1+ I)))			;THIS CLAUSE ALSO APPLIES WHEN L>R
	       ((> I R))
	     (DO ((J (1- I) (1- J))
		  (X (AREF A I)))
		 ((OR (< J L) (NOT (FUNCALL SORT-LESSP-PREDICATE X (AREF A J))))
		  (SETF (AREF A (1+ J)) X))
	       (SETF (AREF A (1+ J)) (AREF A J)))))
	  (T ((LAMBDA (N)				;RANDOMLY CHOSEN POINT BETWEEN L AND R
		((LAMBDA (M)				;BREAK-POINT BETWEEN LOW AND HIGH
		   (SORT-ARRAY-QUICK A L (1- M))	;SORT THE LOW ELEMENTS
		   (SORT-ARRAY-QUICK A (1+ M) R))	;SORT THE HIGH ELEMENTS
		 (DO ((K (PROG1 (AREF A N)		;K WILL BE M'TH ELEMENT
				(SETF (AREF A N) (AREF A L))))
		      (I L)				;A[...I-1] < K
		      (J R))				;K < A[J+1...]
		     (NIL)
		 DECRJ					;DECREASE J UNTIL K NOT LT A[J]
		   (COND ((= J I)
			  (SETF (AREF A I) K)
			  (RETURN I))
			 ((FUNCALL SORT-LESSP-PREDICATE K (AREF A J))
			  (SETQ J (1- J))
			  (GO DECRJ)))
		   (SETF (AREF A I) (AREF A J))
		   (SETQ I (1+ I))
		 INCRI					;INCREASE I UNTIL K NOT GT A[I]
		   (COND ((= I J)
			  (SETF (AREF A J) K)
			  (RETURN J))
			 ((FUNCALL SORT-LESSP-PREDICATE (AREF A I) K)
			  (SETQ I (1+ I))
			  (GO INCRI)))
		   (SETF (AREF A J) (AREF A I))
		   (SETQ J (1- J)))))
							;(+ L (RANDOM (+ (- R L) 1)))
	      (+ L (// (- R L) 2)))))))			;USE THIS UNTIL HAVE RANDOM FUNCTION

;;; The following is a rewrite of the previous function in modern lisp.
;;; I'm pretty sure that it is exactly equivalent, but havn't tested very
;;; thoroughly.  If this file is ever rewritten, use this.
;;;			- DEG, 3/14/85
(comment
(defun sort-array-quick (a l r)
 (LET ((A A))
  (DECLARE (ARRAY-REGISTER A))
  (cond ((> l (- r sort-qs-breakeven))	;See if should do an insertion sort
	 (loop for i from (1+ l) to r	;This clause also applies when l>r
	       do (loop with x = (aref a i)
			for j from (1- i) downto l
			while (funcall sort-lessp-predicate x (aref a j))
			do (setf (aref a (1+ j)) (aref a j))
			finally (setf (aref a (1+ j)) x))))
	(t (let ((n (+ l (// (- r l) 2))))	;Randomly chosen point between L and R
	     (let ((m		;Break-point between low and high
		     (loop with k = (prog1 (aref a n)	;K will be M'th element
					   (setf (aref a n) (aref a l)))
			   with i = l	;A[...I-1] < K
			   with j = r	;K < A[J+1...]
			   do ;; Find earliest element greater than k.
		       (loop while (and (> j i)
					(funcall sort-lessp-predicate k (aref a j)))
			     do (decf j))
		       (cond ((= j i)
			      (setf (aref a i) k)
			      (return i))
			     (t
			      (setf (aref a i) (aref a j))
			      (incf i)))
		       ;; Find latest element less than k.
		       (loop while (and (< i j)
					(funcall sort-lessp-predicate (aref a i) k))
			     do (incf i))
		       (cond ((= i j)
			      (setf (aref a j) k)
			      (return j))
			     (t
			      (setf (aref a j) (aref a i))
			      (decf j))))))
	       (when (plusp m))
	       (sort-array-quick a l (1- m))
	       (sort-array-quick a (1+ m) r)))))))
) ; TNEMMOC

(DEFUN SORT-GROUPED-ARRAY (A GS SORT-LESSP-PREDICATE)
  (DECLARE (DOWNWARD-FUNARG SORT-LESSP-PREDICATE))
  (PROG (SORT-ARRAY-TEMP-V)
	(SETQ SORT-ARRAY-TEMP-V (MAKE-ARRAY GS))
	(SORT-GROUPED-ARRAY-QUICK A 0 (- (ARRAY-ACTIVE-LENGTH A) GS) GS)
	(RETURN-ARRAY SORT-ARRAY-TEMP-V)
	(RETURN A)))

(DEFUN SORT-GROUPED-ARRAY-QUICK (A L R GS)
  (LET ((A A))
       (DECLARE (ARRAY-REGISTER A))
       (COND ((> L (- R (* GS SORT-QS-BREAKEVEN)))	;SEE IF SHOULD DO AN INSERTION SORT
	      (DO ((I (+ L GS) (+ I GS)))		;THIS CLAUSE ALSO APPLIES WHEN L>R
		  ((> I R))
		(DO C 0 (1+ C) (= C GS)	;COPY GUY OUT
		    (SETF (AREF SORT-ARRAY-TEMP-V C) (AREF A (+ I C))))
		(DO ((J (- I GS) (- J GS))
		     (X (AREF A I)))
		    ((OR (< J L) (NOT (FUNCALL SORT-LESSP-PREDICATE X (AREF A J))))
		     (DO C 0 (1+ C) (= C GS)		;ON EXIT, STICK THAT ENTRY
			 (SETF (AREF A (+ J GS C)) (AREF SORT-ARRAY-TEMP-V C))))
		    (DO C 0 (1+ C) (= C GS)
			(SETF (AREF A (+ J GS C)) (AREF A (+ C J)))))))
	     (T ((LAMBDA (N)				;RANDOMLY CHOSEN POINT BETWEEN L AND R
			 ((LAMBDA (M)			;BREAK-POINT BETWEEN LOW AND HIGH
				  (SORT-GROUPED-ARRAY-QUICK A L (- M GS) GS)
							;SORT THE LOW ELEMENTS
				  (SORT-GROUPED-ARRAY-QUICK A (+ M GS) R GS))
							;SORT THE HIGH ELEMENTS
			  (DO ((K (PROG1 (AREF A N)	;K WILL BE M'TH ELEMENT
					 (DO C 0 (1+ C) (= C GS)
					     (SETF (AREF SORT-ARRAY-TEMP-V C)
						   (AREF A (+ N C)))
					     (SETF (AREF A (+ N C)) (AREF A (+ L C)))))) ;PUT
								;L WHERE N WAS
			       (I L)			;A[...I-1] < K
			       (J R))			;K < A[J+1...]
			      (NIL)
			   DECRJ			;DECREASE J UNTIL K NOT LT A[J]
			    (COND ((= J I)
				   (DO C 0 (1+ C) (= C GS)
				       (SETF (AREF A (+ I C)) (AREF SORT-ARRAY-TEMP-V C)))
				   (RETURN I))
				  ((FUNCALL SORT-LESSP-PREDICATE K (AREF A J))
				   (SETQ J (- J GS))
				   (GO DECRJ)))
			    (DO C 0 (1+ C) (= C GS)
				(SETF (AREF A (+ I C)) (AREF A (+ J C))))
			    (SETQ I (+ I GS))
			   INCRI			;INCREASE I UNTIL K NOT GT A[I]
			    (COND ((= I J)
				   (DO C 0 (1+ C) (= C GS)
				       (SETF (AREF A (+ J C)) (AREF SORT-ARRAY-TEMP-V C)))
				   (RETURN J))
				  ((FUNCALL SORT-LESSP-PREDICATE (AREF A I) K)
				   (SETQ I (+ I GS))
				   (GO INCRI)))
			    (DO C 0 (1+ C) (= C GS)
				(SETF (AREF A (+ J C)) (AREF A (+ I C))))
			    (SETQ J (- J GS)))))
		 ;(+ L (RANDOM (+ (- R L) 1)))
		 (+ L (* GS (// (// (- R L) 2) GS)))	;USE THIS UNTIL HAVE RANDOM FUNCTION
		 				;MAKE SURE RESULT IS A MULTIPLE OF GS
)))))

;SORT-LESSP-PREDICATE HERE MUST BE A FUNCTION OF FOUR ARGS,
; <ARRAY1> <IDX1> <ARRAY2> <IDX2>.
(DEFUN SORT-GROUPED-ARRAY-GROUP-KEY (A GS SORT-LESSP-PREDICATE)
  (PROG (SORT-ARRAY-TEMP-V)
	(SETQ SORT-ARRAY-TEMP-V (MAKE-ARRAY GS))
	(SORT-GROUPED-ARRAY-GROUP-KEY-QUICK A 0 (- (ARRAY-ACTIVE-LENGTH A) GS) GS)
	(RETURN-ARRAY SORT-ARRAY-TEMP-V)
	(RETURN A)))

(DEFUN SORT-GROUPED-ARRAY-GROUP-KEY-QUICK (A L R GS)
  (LET ((A A))
       (DECLARE (ARRAY-REGISTER A))
       (COND ((> L (- R (* GS SORT-QS-BREAKEVEN)))	;SEE IF SHOULD DO AN INSERTION SORT
	      (DO ((I (+ L GS) (+ I GS)))		;THIS CLAUSE ALSO APPLIES WHEN L>R
		  ((> I R))
		(DO C 0 (1+ C) (= C GS)	;COPY GUY OUT
		    (SETF (AREF SORT-ARRAY-TEMP-V C) (AREF A (+ I C))))
		(DO ((J (- I GS) (- J GS)))
		    ((OR (< J L) (NOT (FUNCALL SORT-LESSP-PREDICATE SORT-ARRAY-TEMP-V 0 A J)))
		     (DO C 0 (1+ C) (= C GS)		;ON EXIT, STICK THAT ENTRY
			 (SETF (AREF A (+ J GS C)) (AREF SORT-ARRAY-TEMP-V C))))
		    (DO C 0 (1+ C) (= C GS)
			(SETF (AREF A (+ J GS C)) (AREF A (+ C J)))))))
	     (T ((LAMBDA (N)				;RANDOMLY CHOSEN POINT BETWEEN L AND R
			 ((LAMBDA (M)			;BREAK-POINT BETWEEN LOW AND HIGH
				  (SORT-GROUPED-ARRAY-GROUP-KEY-QUICK A L (- M GS) GS)
							;SORT THE LOW ELEMENTS
				  (SORT-GROUPED-ARRAY-GROUP-KEY-QUICK A (+ M GS) R GS))
							;SORT THE HIGH ELEMENTS
			  (DO ((K ;K WILL BE M'TH ELEMENT - K NOT USED IN THIS VERSION OF CODE
				  ; INSTEAD USE ARRAY SORT-ARRAY-TEMP-V, STARTING AT ELEMENT 0
				 (DO C 0 (1+ C) (= C GS)
                                     (SETF (AREF SORT-ARRAY-TEMP-V C) (AREF A (+ N C)))
                                     (SETF (AREF A (+ N C)) (AREF A (+ L C))))) ;PUT L WHERE N WAS
			       (I L)			;A[...I-1] < K
			       (J R))			;K < A[J+1...]
			      (NIL)
			    (IGNORE K)
			   DECRJ			;DECREASE J UNTIL K NOT LT A[J]
			    (COND ((= J I)
				   (DO C 0 (1+ C) (= C GS)
				       (SETF (AREF A (+ I C)) (AREF SORT-ARRAY-TEMP-V C)))
				   (RETURN I))
				  ((FUNCALL SORT-LESSP-PREDICATE SORT-ARRAY-TEMP-V 0 A J)
				   (SETQ J (- J GS))
				   (GO DECRJ)))
			    (DO C 0 (1+ C) (= C GS)
				(SETF (AREF A (+ I C)) (AREF A (+ J C))))
			    (SETQ I (+ I GS))
			   INCRI			;INCREASE I UNTIL K NOT GT A[I]
			    (COND ((= I J)
				   (DO C 0 (1+ C) (= C GS)
				       (SETF (AREF A (+ J C)) (AREF SORT-ARRAY-TEMP-V C)))
				   (RETURN J))
				  ((FUNCALL SORT-LESSP-PREDICATE A I SORT-ARRAY-TEMP-V 0)
				   (SETQ I (+ I GS))
				   (GO INCRI)))
			    (DO C 0 (1+ C) (= C GS)
				(SETF (AREF A (+ J C)) (AREF A (+ I C))))
			    (SETQ J (- J GS)))))
		 ;(+ L (RANDOM (+ (- R L) 1)))
		 (+ L (* GS (// (// (- R L) 2) GS)))	;USE THIS UNTIL HAVE RANDOM FUNCTION
		 				;MAKE SURE RESULT IS A MULTIPLE OF GS
)))))




(DEFUN CL:SORT (SEQUENCE PREDICATE &KEY KEY)
  (DECLARE (SYS:DOWNWARD-FUNARG PREDICATE #|key|#))
  (DECLARE (SYS:DOWNWARD-FUNARG *))
  (ZL:SORT SEQUENCE
	   (IF (OR (NULL KEY)
		   (EQ KEY #'CL:IDENTITY))
	       PREDICATE
	       #'(LAMBDA (X Y)
		   (DECLARE (SYS:DOWNWARD-FUNCTION))
		   (FUNCALL PREDICATE (FUNCALL KEY X) (FUNCALL KEY Y))))))

(DEFUN CL:STABLE-SORT (SEQUENCE PREDICATE &KEY KEY)
  (DECLARE (SYS:DOWNWARD-FUNARG PREDICATE #|key|#))
  (DECLARE (SYS:DOWNWARD-FUNARG *))
  (ZL:STABLE-SORT SEQUENCE
		  (IF (OR (NULL KEY)
			  (EQ KEY #'CL:IDENTITY))
		      PREDICATE
		      #'(LAMBDA (X Y)
			  (DECLARE (SYS:DOWNWARD-FUNCTION))
			  (FUNCALL PREDICATE (FUNCALL KEY X) (FUNCALL KEY Y))))))

;; Occasionally useful sort predicates

(DEFUN CAR-LESSP (X Y)
  (< (CAR X) (CAR Y)))

(DEFUN CAR-GREATERP (X Y)
  (> (CAR X) (CAR Y)))

(DEFUN CADR-LESSP (X Y)
  (< (CADR X) (CADR Y)))

(DEFUN CADR-GREATERP (X Y)
  (> (CADR X) (CADR Y)))
