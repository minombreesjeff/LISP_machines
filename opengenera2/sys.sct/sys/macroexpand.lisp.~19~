;;; -*- Package:SYSTEM-INTERNALS; Mode:LISP; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Macro expansion.

;A function to call with three arguments: the expander function, the form, and
;the lexical environment of the form.
;It returns the replacement form, and takes care of any required memoization.
;The environment may be supplied by either the interpreter or the compiler;
;it is used to look up local macro definitions, which may be shadowed by local
;function definitions (just stubs in the case of the compiler).  The environment
;can also be used to look up declarations.  This environment cannot be used by
;EVAL; the compiler does not, and cannot, build a complete interpreter environment
;including variable bindings.
(DEFVAR *MACROEXPAND-HOOK* #'FUNCALL)

(DEFVAR-RESETTABLE *LAMBDA-MACRO-ENVIRONMENT* NIL)

;Expand any macros in top level of a form.
;MACROEXPAND-1 MACRO-CALL iteratively until it can't expand any more.
;The second value is T if expansion occurred.
;The optional second argument is now the lexical environment; it
;used to control whether compiled but not loaded macros were used.
(DEFUN MACROEXPAND (MACRO-CALL &OPTIONAL ENV DONT-EXPAND-SPECIAL-FORMS FOR-DECLARES)
  (LOOP WITH (FLAG1 FLAG2) = NIL DO
    (MULTIPLE-VALUE (MACRO-CALL FLAG1)
      (MACROEXPAND-1-INTERNAL MACRO-CALL ENV NIL DONT-EXPAND-SPECIAL-FORMS FOR-DECLARES))
    (UNLESS FLAG1
      (RETURN (VALUES MACRO-CALL FLAG2)))
    (SETQ FLAG2 T)))

;Macroexpand MACRO-CALL once, if possible.
;If there is nothing to expand, return it unchanged.
;The second value is T if expansion occurred.
;The optional second argument is now the lexical environment; it
;used to control whether compiled but not loaded macros were used.
(DEFUN MACROEXPAND-1 (MACRO-CALL &OPTIONAL ENV DONT-EXPAND-SPECIAL-FORMS)
  (MACROEXPAND-1-INTERNAL MACRO-CALL ENV NIL DONT-EXPAND-SPECIAL-FORMS))

;Like MACROEXPAND-1, but if called during compilation, runs any style checkers that
;the macro may have.  This is called by SETF.
(DEFUN MACROEXPAND-1-WITH-STYLE-CHECK (MACRO-CALL &OPTIONAL ENV DONT-EXPAND-SPECIAL-FORMS)
  (MACROEXPAND-1-INTERNAL MACRO-CALL ENV (VARIABLE-BOUNDP COMPILER:*COMPILE-FUNCTION*)
			  DONT-EXPAND-SPECIAL-FORMS))

(DEFUN EXPAND-SYMBOL-MACRO (FORM ENV)
  (MULTIPLE-VALUE-BIND (MACRO-P EXPANSION)
      (LT:SYMBOL-MACRO-P FORM ENV)
    (UNLESS MACRO-P
      (ERROR "~S isn't a symbol macro." FORM))
    EXPANSION))

(DEFUN MACROEXPAND-1-INTERNAL (MACRO-CALL ENV RUN-STYLE-CHECKERS-P DONT-EXPAND-SPECIAL-FORMS
			       &OPTIONAL FOR-DECLARES)
  (ERROR-RESTART (ERROR "Retry expanding ~S"
			(IF (LISTP MACRO-CALL) (CAR MACRO-CALL) MACRO-CALL))
    (LET ((EXPANDED NIL) (LOCAL NIL) FN EXPANDER EXPANSION)
      (COND ((SYMBOLP MACRO-CALL)
	     (WHEN (LT:SYMBOL-MACRO-P MACRO-CALL ENV)
	       (SETQ LOCAL (ASSQ MACRO-CALL (ENV-VARIABLES)))
	       (SETF EXPANSION (MACROEXPAND-HOOK #'EXPAND-SYMBOL-MACRO MACRO-CALL ENV))
	       (SETF FN MACRO-CALL)
	       (SETF EXPANDED T)))
	    ((NOT (LISTP MACRO-CALL)))
	    ((SETQ EXPANDER (LAMBDA-MACRO-CALL-P (SETQ FN (CAR MACRO-CALL))))
	     (LET ((*LAMBDA-MACRO-ENVIRONMENT* ENV))
	       ;; In a future major release (>7), this might want to be passed as an argument
	       ;; to the expander, but for binary file compatibility, it cannot be in
	       ;; Release 7. -kmp 21-Mar-89
	       (SETQ EXPANSION (CONS (MACROEXPAND-HOOK EXPANDER FN)
				     (CDR MACRO-CALL))
		     EXPANDED T)))		;No explicit environment for lambda macros!
	    ((LISTP (SETQ EXPANDER (IF (SYMBOLP FN)
				       (OR (SETQ LOCAL (LOCAL-FUNCTION-DEFINITION FN ENV))
					   (DECLARED-DEFINITION FN))
				       FN)))
	     (WHEN RUN-STYLE-CHECKERS-P
	       (COMPILER:STYLE-CHECK-FORM MACRO-CALL ENV :CHECK-STYLE T))
	     (SELECTQ (CAR EXPANDER)
	       ((SPECIAL)			;Could be a macro or just a special form
		(WHEN (AND (SECOND EXPANDER)
			   (OR (NOT DONT-EXPAND-SPECIAL-FORMS)
			       (AND (NULL (THIRD EXPANDER))
				    (NULL (COMPILER:GET-PHASE-1-HANDLER COMPILER:*COMPILER*
									FN))
				    (NULL (COMPILER:GET-TRANSFORMERS COMPILER:*COMPILER*
								     FN)))))
		  (SETQ EXPANSION (MACROEXPAND-HOOK (SECOND EXPANDER) MACRO-CALL ENV)
			EXPANDED T)))
	       ((MACRO)				;Old type macro, ENV is not passed
		(SETQ EXPANSION (MACROEXPAND-HOOK (CDR EXPANDER) MACRO-CALL)
		      EXPANDED T)))))
      (COND (EXPANDED
	     (UNLESS (OR LOCAL			;Don't record macrolet/defun-in-flavor
			 (AND FOR-DECLARES	;And not when we're just looking, either.
			      (NOT (AND (LISTP EXPANSION)
					(EQL (FIRST EXPANSION) 'DECLARE)))))
	       (COMPILER:NOTE-MACROEXPANSION FN EXPANSION))
	     (VALUES EXPANSION T))
	    (T (VALUES MACRO-CALL NIL))))))

;;; This exists primarily to take care of the mess where MACRO and LAMBDA-MACRO
;;; (as opposed to SPECIAL, i.e. DEFMACRO) expander functions only take one argument.
;;; Always call *MACROEXPAND-HOOK* with three arguments so as to conform to Common Lisp.
;Natural definition commented out because it conses a closure unconditionally
;even though the closure is only used in a conditional
;(DEFUN MACROEXPAND-HOOK (EXPANDER FORM &OPTIONAL (ENVIRONMENT NIL ENVIRONMENT-P))
;  (FUNCALL *MACROEXPAND-HOOK* (IF ENVIRONMENT-P EXPANDER (LAMBDA (FORM &OPTIONAL IGNORE)
;							   (FUNCALL EXPANDER FORM)))
;			      FORM ENVIRONMENT))
(DEFUN MACROEXPAND-HOOK (EXPANDER FORM &OPTIONAL (ENVIRONMENT NIL ENVIRONMENT-P))
  (FUNCALL (LET ((HOOK *MACROEXPAND-HOOK*))
	     (IF (FUTURE-COMMON-LISP:FUNCTIONP HOOK)
		 HOOK
		 (CL:COERCE *MACROEXPAND-HOOK* 'FUTURE-COMMON-LISP:FUNCTION)))
	   (IF ENVIRONMENT-P EXPANDER (MACROEXPAND-HOOK-1 EXPANDER))
	   FORM ENVIRONMENT))

;Separate function to isolate the consing of the closure
(DEFUN MACROEXPAND-HOOK-1 (EXPANDER)
  (LAMBDA (FORM &OPTIONAL IGNORE)
    (FUNCALL EXPANDER FORM)))

;;; Return NIL if not a macro, otherwise return the macro expander function.
;;; Similar to the Common Lisp function of the same name, but allows its argument
;;; to be either a symbol or the function definition of a symbol.
(DEFUN MACRO-FUNCTION (FUNCTION &OPTIONAL ENV)
  (WHEN (SYMBOLP FUNCTION)
    (LET ((TEMP (LOCAL-FUNCTION-DEFINITION FUNCTION ENV)))
      (IF TEMP
	  (SETQ FUNCTION TEMP)
	  (IF (FBOUNDP FUNCTION)
	      (SETQ FUNCTION (CL:SYMBOL-FUNCTION FUNCTION))))))
  (AND (LISTP FUNCTION)
       (EQ (CAR FUNCTION) 'SPECIAL)
       (SECOND FUNCTION)))

;;; Return a function definition for this symbol which has been defined in the given lexical
;;; environment with MACROLET, FLET, or LABELS.  This function exists so that things
;;; (like SETF) that store properties on symbol plists know when to shadow them 
;;; for a local definition.
(DEFUN LOCAL-FUNCTION-DEFINITION (FUNCTION ENV)
  (SECOND (CL:ASSOC FUNCTION (ENV-FUNCTIONS ENV) :TEST #'CL:EQUAL)))

;;; Return NIL if not a special form, otherwise return the interpreter function.
;;; Similar to the Common Lisp function of the same name, but allows its argument
;;; to be either a symbol or the function definition of a symbol.
(DEFUN SPECIAL-FORM-P (FUNCTION)
  (WHEN (AND (SYMBOLP FUNCTION) (FBOUNDP FUNCTION))
    (SETQ FUNCTION (FSYMEVAL FUNCTION)))
  (AND (LISTP FUNCTION)
       (EQ (CAR FUNCTION) 'SPECIAL)
       (THIRD FUNCTION)))

(DEFUN FUTURE-COMMON-LISP:COMPILER-MACRO-FUNCTION (NAME &OPTIONAL ENV)
  (WHEN ENV
    (WHEN (LOCAL-FUNCTION-DEFINITION NAME ENV)
      (RETURN-FROM FUTURE-COMMON-LISP:COMPILER-MACRO-FUNCTION NIL))
    (WHEN (CLOS-INTERNALS:COMPILE-FILE-ENVIRONMENT-P ENV)
      (LET ((DEF (COMPILER:FILE-DECLARATION NAME 'COMPILER:COMPILER-MACRO)))
	(WHEN DEF
	  (RETURN-FROM FUTURE-COMMON-LISP:COMPILER-MACRO-FUNCTION DEF)))))	  
  (LET ((SPEC `(COMPILER:COMPILER-MACRO ,NAME)))
    (AND (FDEFINEDP SPEC) (FDEFINITION SPEC))))

(DEFUN (FUTURE-COMMON-LISP:SETF FUTURE-COMMON-LISP:COMPILER-MACRO-FUNCTION)
       (DEFINITION NAME &OPTIONAL ENV)
  (CL:CHECK-TYPE ENV NULL)
  (LET ((SPEC `(COMPILER:COMPILER-MACRO ,NAME)))
    (IF DEFINITION
	(SETF (FDEFINITION SPEC) DEFINITION)
	(FUNDEFINE SPEC))
    DEFINITION))

;Non-NIL iff X is an interpreted function whose CAR is a lambda macro
;Value is the function that implements the lambda macro.
(DEFUN LAMBDA-MACRO-CALL-P (FCTN)
  (AND (LISTP FCTN)
       (LET ((FCN (CAR FCTN)))
	 (AND (SYMBOLP FCN)
	      ;; Avoid costly functions for normal case.
	      (SELECTQ FCN
		((LAMBDA SPECIAL)
		 NIL)
		((DIGESTED-LAMBDA)
		 #'UNDIGEST)
		(OTHERWISE
		 (GETDECL FCN 'LAMBDA-MACRO)))))))

(DEFUN LAMBDA-MACRO-EXPAND (FCTN &OPTIONAL
			    (*LAMBDA-MACRO-ENVIRONMENT* *LAMBDA-MACRO-ENVIRONMENT*))
  (LOOP AS EXPANDER = (LAMBDA-MACRO-CALL-P FCTN)
	UNTIL (NULL EXPANDER)
	DO (SETQ FCTN (MACROEXPAND-HOOK EXPANDER FCTN)))
  FCTN)



; non-NIL to prevent macros from displacing.
(DEFVAR INHIBIT-DISPLACING-FLAG NIL)

;; Make the original form now look like
;; (displaced (original-car . original-cdr) expanded-form)
;; avoiding timing errors in case two people displace the same form the same way
;; at the same time.
;; Note that if the original form is not in working-storage-area, don't try
;; to displace it.  It might be in the compiler temporary area, in which case
;; there wouldn't be much point to displacing.  It can also be in INIT-LIST-AREA,
;; in which case attempting to displace would crash the machine.
(DEFUN DISPLACE (ORIGINAL-FORM EXPANDED-FORM &AUX AREA TEM)
  (WITHOUT-INTERRUPTS
      (COND (INHIBIT-DISPLACING-FLAG)
	    ((EQ (CAR ORIGINAL-FORM) 'DISPLACED)
	     (SETF (CADDR ORIGINAL-FORM) EXPANDED-FORM))
	    ((AND (= (SETQ AREA (%AREA-NUMBER ORIGINAL-FORM)) WORKING-STORAGE-AREA)
		  (OR (NOT (%POINTERP EXPANDED-FORM))
		      (= AREA (%AREA-NUMBER EXPANDED-FORM))))
	     ;; Above area tests are intended to avoid problems with the compiler
	     ;; temporary area, by not displacing anything with something that was
	     ;; consed in a temporary area.  Note that not only lists are in the
	     ;; temporary area, so are gensyms, strings, and flonums.
	     (LET ((DEFAULT-CONS-AREA AREA))
	       (SETQ TEM `((,(CAR ORIGINAL-FORM) . ,(CDR ORIGINAL-FORM)) ,EXPANDED-FORM)))
	     (RPLACA ORIGINAL-FORM 'DISPLACED)
	     (RPLACD ORIGINAL-FORM TEM)))
      EXPANDED-FORM))

(DEFMACRO DISPLACED (ORIGINAL-FORM EXPANDED-FORM)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  ORIGINAL-FORM ;not used
  EXPANDED-FORM)

(DEFLAMBDA-MACRO DISPLACED (ORIGINAL-FORM EXPANDED-FORM)
  ORIGINAL-FORM ;not used
  EXPANDED-FORM)
