;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DISTRIBUTION; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Generic functions that define the interface by which files get
;;; written and read from for distribution/carry, regardless of what
;;; does the work underneath.

;;; The overall scenario is this:
;;;
;;; The basic interface to put things onto a tape is going to be SCT:DISTRIBUTE-SYSTEM.
;;; When carry and distribution unify, they will do so by having 'carry' being a program
;;; that can turn a set of starnames into a trivial SCT system.
;;;
;;; SCT creates an intermediate data structure that defines a distribution
;;; as a set of files organized by system (and by version and type of file within 
;;; the system).  For release 7, that data structure is not interned, and is 
;;; generally written out to a file.  It is read back in and used to drive
;;; the process of writing tapes.
;;;
;;; SCT expects to be able to write files onto the tape.  It writes a
;;; file in two pieces: attributes and contents. The two pieces are
;;; independent files.  (This is so that some day, when we are writing
;;; industry standard tapes, the contents will be readable by other
;;; systems).  SCT records subsystems, groups, or whatever by writing
;;; overhead files that it understands.
;;; 
;;;
;;; Set up to write by calling (new)-DIS:ATTACH-TAPE-ACCESS-PATH,
;;; specifying the usual sort of tape parameters, plus a tape format
;;; symbol.  The only valid one for now will be
;;; :embedded-length-distribution.

;;; For each file, SCT DIS:TAPE-ACCESS-PATH-WRITE-FILE, supplying some
;;; information and a (unsigned-byte 8) stream. There are some utilities
;;; for turning a character string
;;; into such a stream for writing overhead files.

(defmacro with-tape-file-stream ((tape-access-path stream &key file-identifier)
				 &body body)
  `(let ((,stream nil))
     (unwind-protect
	 (progn
	   (setq ,stream (tape-access-path-open-file ,tape-access-path
						     :file-identifier ,file-identifier))
	   ,@body)
       (when ,stream
	 (tape-access-path-close-file ,tape-access-path ,stream))))) 

(defun attach-tape-access-path
       (&rest per-format-args &key
	(direction ':input)
	file-set-identifier			;a name for the whole set of tapes
	tape-specs				;a list in order
	(tape-format ':embedded-length-distribution)
	cart-max-bytes-to-write			;this has to be at top level, rather
						;than expecting it to be correct for
						;of all the specs.
	&allow-other-keys
	;; This might want to include &rest per-format-args &allow-other-keys
	;; when we actually invent the second
	)
  (check-type direction (member :input :output))
  ;; This goes away when we have a keyword-to-flavor protocol or whatever.
  (check-type tape-format (member :embedded-length-distribution :dummy-file))
  ;;
  (si:with-rem-keywords (p-f-a per-format-args '(:direction
						  :file-set-identifier
						  :tape-specs
						  :tape-format
						  :cart-max-bytes-to-write))
    (case tape-format
      (:embedded-length-distribution
	(make-instance 'embedded-length-distribution-tape-access-path
		       :direction direction
		       :file-set-identifier file-set-identifier
		       :tape-specs tape-specs
		       :cart-max-bytes-to-write cart-max-bytes-to-write))
      (:dummy-file (apply #'make-instance 'dummy-tape-access-path
			  :direction direction p-f-a)))))

(defflavor tape:another-tape-spec-needed
	(prompt					;the message to print.
	 previous-volume-name			;which reel
	 file-set-identifier			;what are we doing?
	 direction				;and which way?
	 previous-tape-spec			;for defaulting
	 first-p				;t implies that there is no EOT implied.
	 )
	(error)
  (:writable-instance-variables)
  (:initable-instance-variables))

(defmethod (dbg:report tape:another-tape-spec-needed) (stream)
  (format stream prompt))

(defmethod (dbg:proceed tape:another-tape-spec-needed tape:supply-another-tape)
	   (&optional tape-spec)
  "Supply a tape spec for another tape volume."
  (or tape-spec
      (tape:read-tape-spec *query-io* previous-tape-spec)))

(compile-flavor-methods tape:another-tape-spec-needed)

(defvar *another-tape-needed-action* :error)	; :prompt to make it not SIGNAL

(defun tape:prompt-for-another-tape-spec (&key
					  first-p
					  file-set-identifier
					  direction
					  previous-tape-spec)
  (send *query-io* :beep)
  (format *query-io*
	  "~& ** ~:[Another~;A~] tape is needed to ~:[write~;read~] distribution~
	   ~@[ file set \"~A\"~]."
	   first-p (eq direction :input) file-set-identifier)
  (tape:read-tape-spec *query-io* previous-tape-spec))

(defun tape:signal-another-tape-needed (&key
					prompt
					first-p
					previous-volume-name
					file-set-identifier
					direction
					previous-tape-spec)
  (declare (dbg:error-reporter t))
  (when previous-tape-spec
    (when (null previous-volume-name)
      (setq previous-volume-name (send previous-tape-spec :reel))))
  (if (eq *another-tape-needed-action* :prompt)
      (tape:prompt-for-another-tape-spec
	:first-p first-p
	:file-set-identifier file-set-identifier
	:direction direction
	:previous-tape-spec previous-tape-spec)
    (signal 'tape:another-tape-spec-needed :proceed-types '(tape:supply-another-tape)
	    :prompt prompt
	    :first-p first-p
	    :previous-volume-name previous-volume-name
	    :file-set-identifier file-set-identifier
	    :direction direction
	    :previous-tape-spec previous-tape-spec)))

(defun tape:get-another-tape-stream (&rest make-stream-args &key
				     prompt
				     previous-volume-name
				     file-set-identifier
				     direction
				     previous-tape-spec
				     first-p
				     cart-max-bytes-to-write
				     &allow-other-keys)
  (si:with-rem-keywords (make-stream-args make-stream-args '(:prompt
							      :first-p
							      :previous-volume-name
							      :file-set-identifier
							      :previous-tape-spec))
    (let ((tape-spec (tape:signal-another-tape-needed
		       :prompt prompt
		       :first-p first-p
		       :previous-volume-name previous-volume-name
		       :file-set-identifier file-set-identifier
		       :direction direction
		       :previous-tape-spec previous-tape-spec)))
      (send tape-spec :set-cart-max-bytes-to-write cart-max-bytes-to-write)
      (apply #'tape:make-stream :spec tape-spec make-stream-args))))


;;; The arguments to this generic are, in fact, going to depend rather a lot
;;; on the particular access path. Ho Hum.
;;; On input, file-identifier can be :next.

(defgeneric tape-access-path-open-file (tape-access-path
					 &key file-identifier &allow-other-keys)
  "Returns a stream to write to or read from"
  )

(defgeneric tape-access-path-force-new-tape  (tape-access-path)
  )

(defgeneric tape-access-path-close (tape-access-path &key abort)
  "cleans up"
  )

(defgeneric tape-access-path-close-file (tape-access-path file-stream)
  )

(defflavor end-of-volume (stream) (error)
  :initable-instance-variables)

(defmethod (:report end-of-volume) (str)
  (format str "~S is at end of volume" stream))

(compile-flavor-methods end-of-volume)

(defflavor embedded-length-distribution-tape-access-path
	(tape-specs
	 (current-tape-spec nil)
	 file-set-identifier
	 direction
	 cart-max-bytes-to-write
	 (tape-stream nil)
	 (embedded-length-stream nil)
	 (open-file nil)
	 (current-file-name)
	 (files-written 0)	
	 )
	()
  (:initable-instance-variables 
   tape-specs file-set-identifier direction cart-max-bytes-to-write)
  (:writable-instance-variables (tape-access-path-current-file-name current-file-name)))


(defun-in-flavor
  (tape-access-path-get-tape-stream embedded-length-distribution-tape-access-path) ()
  (when tape-stream
    (close embedded-length-stream)		;closes both of them cleanly.
    (setq tape-stream nil embedded-length-stream nil))
  (if (null tape-specs)
    (let ((new-tape-stream
	    (tape:get-another-tape-stream
	      :first-p (zerop files-written)
	      :prompt
	      (format nil "Another tape is needed ~:[writing~;reading~] distribution~
~@[ file set ~A~]."
		      (eq direction :input)
		      file-set-identifier)
	      :direction direction
	      :cart-max-bytes-to-write cart-max-bytes-to-write
	      :previous-tape-spec current-tape-spec)))
      (setq tape-stream new-tape-stream))
    (setq tape-stream (tape:make-stream
			:spec (pop tape-specs)
			:direction direction
			:cart-max-bytes-to-write cart-max-bytes-to-write)))
  (setq current-tape-spec (send tape-stream :tape-spec))
  (setq embedded-length-stream
	(make-instance
	  (case direction
	    (:input 'si:embedded-length-8-bit-input-stream)
	    (:output 'si:embedded-length-8-bit-output-stream))
	  :target-stream tape-stream)))

(defmethod (tape-access-path-open-file embedded-length-distribution-tape-access-path)
	   (&key file-identifier &allow-other-keys)
  (when open-file
    (error "There is already a file open for this this tape access path."))
  (unless tape-stream
    (tape-access-path-get-tape-stream))
  (setq open-file t)
  (case direction
    (:input
      (loop named next-tape do
	(condition-case (err)
	     (return-from next-tape
	       (progn (peek-stream-for-eov embedded-length-stream)
		      (setq current-file-name (send embedded-length-stream :read-file-name))))
	   (dis:end-of-volume
	     (tape-access-path-get-tape-stream))))	;what is the end of the entire
						;circus? Best be defined by the folks
						;upstairs for now.
      (incf files-written)
      embedded-length-stream)
    (:output
      ;; The EOF is written
      (send embedded-length-stream :write-file-name file-identifier)
      (incf files-written)
      embedded-length-stream)))

(defmethod (tape-access-path-force-new-tape embedded-length-distribution-tape-access-path) ()
  (when tape-stream
	(when embedded-length-stream
	  (close embedded-length-stream))
    (close tape-stream)
    (setq tape-stream nil embedded-length-stream nil)))

(defmethod (tape-access-path-close embedded-length-distribution-tape-access-path)
	   (&rest ignore)
  (tape-access-path-force-new-tape self)	;that is all that is required
  )

(defmethod (tape-access-path-close-file embedded-length-distribution-tape-access-path)
	   (ignore)
  (if (eq direction ':output)
      (send embedded-length-stream :write-eof)
      (unless (send embedded-length-stream :at-eof-p)
	(stream-copy-until-eof embedded-length-stream 'si:null-stream))
      (send embedded-length-stream :clear-eof))
  (setq open-file nil))

;;; Debugging function
(defun scan-distribution ()
  (let ((tap (attach-tape-access-path)))
    (condition-case ()
	 (loop as n-bytes = 0
	       as ts = (tape-access-path-open-file tap)
	       do
	   (format t "~& file ~A" (tape-access-path-current-file-name tap))
	   (condition-case ()
	        (loop do (send ts :tyi t) (incf n-bytes))
	      (sys:end-of-file))
	   (format t " ~D bytes." n-bytes))
       (dis:end-of-volume))))

;;; For debugging -- a joke access path that writes to a LMFS file.
;;; Actually, perhaps not such a joke.  If you run an embedded length stream
;;; to a file, the resulting file can be stream-copy-until-eof'ed onto the tape.
;;; "its just disk space"

(defflavor dummy-tape-access-path
	((pathname)
	 (stream)
	 (embedded-length-stream)
	 direction
	 (files-written 0)
	 (open-file nil))
	()
  (:initable-instance-variables pathname direction)
  (:required-init-keywords :pathname))

(defmethod (make-instance dummy-tape-access-path) (&rest ignore)
  (setq stream (open pathname :direction direction :element-type '(unsigned-byte 8)))
  (setq embedded-length-stream
	(make-instance
	  (case direction
	    (:input 'si:embedded-length-8-bit-input-stream)
	    (:output 'si:embedded-length-8-bit-output-stream))
	  :target-stream stream)))


(defun peek-stream-for-eov (stream)
  (condition-case ()
       (send stream :untyi (send stream :tyi t))
     (sys:end-of-file)
     (:no-error (return-from peek-stream-for-eov nil)))
  ;; ok, we got one eof mark.
  ;; This has better be EOV after this.
  (send stream :clear-eof)
  (condition-case ()
       (send stream :untyi (send stream :tyi t))	;find that EOV
     (:no-error (error "No EOV after double EOF"))))

(defmethod (tape-access-path-open-file dummy-tape-access-path)
	   (&key file-identifier &allow-other-keys)
  (when open-file
    (error "There is already a file open for this tape access path."))
  (setq open-file t)
  (case direction
    (:input 
      (incf files-written)
      (peek-stream-for-eov embedded-length-stream)
      embedded-length-stream)
    (:output
      ;; The EOF is written
      (send embedded-length-stream :write-file-name file-identifier)
      (incf files-written)
      embedded-length-stream)))

(defmethod (tape-access-path-force-new-tape dummy-tape-access-path) ()
  (when stream
    (close embedded-length-stream)
    (close stream)
    (setq stream nil embedded-length-stream nil))
  (setq pathname (accept 'pathname :prompt "File for the new tape image"))
  (setq stream (open pathname :direction direction :element-type '(unsigned-byte 8)))
  (setq embedded-length-stream
	(make-instance
	  (case direction
	    (:input 'si:embedded-length-8-bit-input-stream)
	    (:output 'si:embedded-length-8-bit-output-stream))
	  :target-stream stream)))


(defmethod (tape-access-path-close-file dummy-tape-access-path)
	   (ignore)
  (if (eq direction ':output)
      (send embedded-length-stream :write-eof)
      (unless (send embedded-length-stream :at-eof-p)
	(stream-copy-until-eof embedded-length-stream 'si:null-stream))
      (send embedded-length-stream :clear-eof))
  (setq open-file nil))

(defmethod (tape-access-path-close dummy-tape-access-path) (&key abort)
  (close embedded-length-stream :abort abort)
  (close stream :abort abort)
  (setq stream nil embedded-length-stream nil)
  )

;;; Tape-level utilities

;;; --- Not real yet
;(defun copy-distribution-tape ()
;  (with-open-stream (source (distribution-reloader-get-stream ':label "Source tape"))
;    (with-open-stream (dest  (distribution-reloader-get-stream
;			       ':label "Destination tape" ':direction ':output))
;      (stream-copy-until-eov source dest))))

(defun stream-copy-until-eov (from to)
  (condition-case (error)
      (loop do
	    (stream-copy-until-eof from to)
	    (send from ':clear-eof)
	    (send to ':eof))
    (end-of-volume ':eov)))


;;;Get attributes on and off the tape.  One might ask, "why not use token lists"
;;;The answer is: when we have them.

;;; For now, this just uses the LISP printer, secure (ahem) in the knowledge 
;;; that attributes dont contain anything too terribly nasty.  
;;; So we write times as universal times (numbers), etc.

(defstruct (file-attribute-info-v-1
	     (:conc-name file-attributes-info-))
  overhead-attributes				;we create these for checking and such
  file-writer-attributes			;these are supplied by whoever writes
  file-system-attributes			;these are supplied by whoever writes,
						;but are assumed to have come from
						;fs:properties
  )

;;; The overhead attributes 

(defun overhead-attributes (compress-p)
  `(:user-id ,zl:user-id
    :dump-time ,(get-universal-time)
    ;; If we're not compressing, save tiny amounts of tape space by not even emitting this property.
    ;; Furthermore, this means we can't possibly confuse an old distribution reader.  (It probably just
    ;; uses GETF on this plist and can't get confused anyway, but we might as well be safe.)
    ,@(when compress-p
	(list :compression compress-p))		; Allow values like :UNIX or :SYMBOLICS, not just T.
    ))

(defun write-file-attributes-as-file
       (tape-access-path file-name-string writer-attributes fs-attributes overhead-attributes)
  (let* ((attribute-spec
	   (make-file-attribute-info-v-1
	     :overhead-attributes overhead-attributes
	     :file-writer-attributes writer-attributes
	     :file-system-attributes fs-attributes))
	 (attribute-string
	   (with-output-to-string (s)
	     (with-standard-io-environment
	       (print attribute-spec s)))))
    (with-tape-file-stream
      (tape-access-path out-file
			:file-identifier (format nil "ATTRIBUTES-~A" file-name-string))
      (loop for x being the array-elements of attribute-string
	    do (write-byte (char-code x) out-file))	; slow but effective
      )))

(defvar *properties-to-distribute*
	(list :creation-date :author :length-in-bytes :element-type))

(defvar *properties-to-restore*
	(list :creation-date :author))
(defun file-properties-from-stream (stream)
  (let ((properties (copy-list (cdr (send stream :properties)))))
    ;; Since the :PROPERTIES method on most streams does not return this, we
    ;; need to do it by hand.
    (setf (getf properties :element-type) (stream-element-type stream))
    (setq properties (zwei:some-plist properties *properties-to-distribute*))
    properties))
(defun write-file-to-tape (tape-access-path pathname tape-name writer-properties compress-p)
  "Caller of this has already set up properties to include the pathname
in whatever form they prefer, dealing with logical-pathname-with-specific-version issues."
  (with-open-file (data pathname :direction :input :element-type :default)
    (let ((o-props (overhead-attributes
		     ;; POLICY DECISION:  Since we don't allow the user to choose UNIX vs Symbolics preamble,
		     ;; specify (and use) Symbolics compression on the tape.  Explicitly indicating this on the
		     ;; tape would allow us to us UNIX preambles if we wanted to for some reason.  Note that
		     ;; all that's required is to know in advance (because of unrewindability) which sort of
		     ;; preamble we're using; using the Symbolics preamble doesn't constrain any of the
		     ;; parameter settings which that preamble includes.
		     (when compress-p
		       :symbolics)))
	  (f-props (file-properties-from-stream data)))	  
      (write-file-attributes-as-file tape-access-path
				     tape-name
				     writer-properties
				     f-props
				     o-props))
    (let* ((data-element-type (stream-element-type data))
	   (byte-size (cond ((subtypep data-element-type 'character)
			      nil)
			     ((subtypep data-element-type 'unsigned-byte)
			      (or (fs:byte-size-from-element-type data-element-type) 16.))
			     (t
			      (error "Incomprehensible element type ~S for file ~S"
				     data-element-type pathname)))))
      ;; Now for the tricky part -- representing arbitrary byte-size files as
      ;; 8-bit streams.  We assume that the max is 16 bits, and then we borrow
      ;; some old QFile stuff.
      (with-tape-file-stream
	(tape-access-path tape-stream :file-identifier tape-name)
	(cond (compress-p
	       (let ((compression-stream
		       (make-instance 'compression::buffered-compressing-output-stream
				      :stream tape-stream
				      :uncompressed-stream-element-type data-element-type
				      ;; WRITE-EPSILONIFIED-FILE-TO-TAPE gives us bytes, not string-chars.
				      ;; Maybe the one using JRD's new output stream will give us string-chars.
				      ;; The compressor can deal with any byte size that's a multiple of 8.
				      :public-buffer-element-type `(cl:unsigned-byte ,(or byte-size 8)))))
	       (cond ((null byte-size)
		      (write-epsilonified-file-to-tape data compression-stream))
		     (t
		       (stream-copy-until-eof data compression-stream)))
	       (compression::finalize-output compression-stream nil)))
	      (t
		 (cond ((null byte-size)
			(write-epsilonified-file-to-tape data tape-stream))
		       (( byte-size 8.)
			(stream-copy-until-eof data tape-stream))
		       (t
			(fs:stream-copy-16-to-8 data tape-stream)))))))))
(defun write-epsilonified-file-to-tape (data-stream tape-stream)
  (using-resource (stream si:epsilon-encoding-output-stream tape-stream)
    (stream-copy-until-eof data-stream stream nil :include-diagrams nil)))

(defun write-string-to-tape (tape-access-path string tape-name)
  (with-tape-file-stream
    (tape-access-path out-file :file-identifier tape-name)
    (loop for x being the array-elements of string
	  ;; Slow but effective
	  do (write-byte (char-code x) out-file))))

;;; The loader has to call the above, figure out what pathname they want to load 
;;; the file into (dealing with patches, journals, files that are never really loaded)
;;; and then call one of the next two functions.

;;; Call this function here for a file which is not going to be loaded
;;; into the file system, like a tape directory or such.  This just
;;; returns a suitable stream to copy-until-eof or read from (or write
;;; to, for output). The stream is unsigned-byte 8, the caller can
;;; thin-character-stream as needed.

(defun read-file-from-tape (tape-access-path pathname attribute-info props)
  (with-open-file (fs pathname
		      :direction :output
		      :element-type
		      (or (getf
			    (file-attributes-info-file-system-attributes
			      attribute-info)
			    ':element-type)
			  (error "No element type recorded in attributes."))
		      'fs:%return-binary-stream-for-character-file t)
    (with-tape-file-stream (tape-access-path tape-stream)
      (let ((compressed-type (getf (file-attributes-info-overhead-attributes
				     attribute-info)
				   :compression)))
	(cond (compressed-type
	       ;; File is compressed.  We could be clever and ask the preamble what sort
	       ;; of output file should be created, but that information was already recorded
	       ;; in the attributes "file" written immediately before us on the tape, and, in
	       ;; fact, the output file stream has already been opened in the correct mode
	       ;; (the FS:%RETURN-BINARY-STREAM-FOR-CHARACTER-FILE hack above will
	       ;; ensure that even a STRING-CHAR file looks to us like (UNSIGNED-BYTE 8)).
	       ;; So all we need to do is to wrap the appropriate decompressing stream
	       ;; around the tape stream, without worrying about doing it differently
	       ;; for different sorts of file element types.
	       (let* ((byte-size (send fs :byte-size))
		      (decompression-stream
		       (make-instance 'compression::buffered-decompressing-input-stream
				      :stream tape-stream
				      :forced-preamble-type compressed-type
				      :public-buffer-element-type `(unsigned-byte ,byte-size))))
		 ;; The decompressor can deal with any byte size that's a multiple of 8.
		 (stream-copy-until-eof decompression-stream fs)
		 ;; Make sure everything gets deallocated again.
		 (compression::finalize-input decompression-stream)))
	      (t
	       ;; File is not compressed.
	       (cond (( (send fs :byte-size) 8.)
		      (stream-copy-until-eof tape-stream fs))	;nothing special here.
		     (t
		      (fs:stream-copy-8-to-16 tape-stream fs)))))))
    ;; We need to have the stream change the properties (naively trying to use
    ;; FS:CHANGE-FILE-PROPERTIES on a pathname loses for VMS)
    (let ((res (apply fs :change-properties nil props)))
      ;; If the host won't swallow all the props, spoon feed them one by one
      ;; to get the ones set that it will accept
      (unless (eq res t)
	(loop for prps on props by 'cddr
	      do (send fs :change-properties nil (first prps) (second prps)))))))


(defun read-file-attributes-from-tape (tape-access-path)
  (with-tape-file-stream (tape-access-path in-file)
    (let ((att-struct
	    (with-standard-io-environment
	      (read (si:thin-character-stream in-file)))))
      (stream-copy-until-eof (si:thin-character-stream in-file) 'si:null-stream)
      (check-type att-struct file-attribute-info-v-1 
		  "Invalid tape -- the attribute structure is malformed.")
      att-struct)))

(defun read-string-from-tape (tape-access-path)
  (with-output-to-string (s)
    (with-tape-file-stream (tape-access-path in-file)
      (stream-copy-until-eof (si:thin-character-stream in-file) s))))

;;; This is needed to be able to space over files on the tape
(defun skip-file-from-tape (tape-access-path)
  (with-tape-file-stream (tape-access-path in-file)
      (stream-copy-until-eof in-file 'si:null-stream)))
