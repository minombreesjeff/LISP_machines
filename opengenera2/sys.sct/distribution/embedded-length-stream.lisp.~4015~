;-*- Mode:LISP; Package:SYSTEM-INTERNALS; Base:8; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


(defresource embedded-length-buf (type length)
  :constructor (make-array length ':type type)
  :initial-copies 0
  :matcher (and ( (array-dimension-n 1 object) length)	;array-length?
		(eq (array-type object) type)))

(defflavor basic-embedded-length-stream
	((target-stream nil)
	 (target-character-stream))
	()
  (:required-flavors stream)
  (:initable-instance-variables target-stream))

(defmethod (make-instance basic-embedded-length-stream) (&rest ignore)
  (setq target-character-stream (thin-character-stream target-stream)))

(defflavor embedded-length-output-mixin
	((el-buf nil)				;the buffer
	 (el-index)				;index of next byte to go into buf
	 array-type
	 array-size)
	(basic-embedded-length-stream)
  (:required-flavors buffered-output-stream)
  (:initable-instance-variables array-type array-size)
  (:default-init-plist :array-size 4096. :array-type 'art-8b))

(defmethod (:reel embedded-length-output-mixin) ()
  (send target-stream ':send-if-handles ':reel))

(defmethod (:host embedded-length-output-mixin) ()
  (send target-stream ':send-if-handles ':host))

(defmethod (:unit embedded-length-output-mixin) ()
  (send target-stream ':send-if-handles ':unit))


(defmethod (make-instance embedded-length-output-mixin) (&rest ignore)
  (or target-stream
      (ferror "No target stream given."))
  (or (send target-stream ':operation-handled-p ':string-out)
      (ferror "~S doesn't support :STRING-OUT" target-stream)))

(defmethod (make-instance embedded-length-output-mixin :after) (&rest ignore)
  (send self ':write-sentinel)
  (setq el-index 0)
  (setq el-buf (allocate-resource 'embedded-length-buf array-type array-size)))

(defmethod (:new-output-buffer embedded-length-output-mixin) ()
  (if ( el-index array-size)
      (send self ':send-real-output-buffer))
  (values el-buf el-index array-size))

(defmethod (:discard-output-buffer embedded-length-output-mixin) (arg-buf)
  (or (eq arg-buf el-buf)
      (ferror "I didn't give you this buffer ~S" arg-buf))
  (setq el-index 0))

(defmethod (:send-output-buffer embedded-length-output-mixin) (arg-buf arg-end explicit)
  (or (eq arg-buf el-buf)
      (ferror "I didn't give you this buffer ~S" arg-buf))
  (setq el-index arg-end)
  (when explicit
    (send self ':send-real-output-buffer)))

(defmethod (:send-real-output-buffer embedded-length-output-mixin) ()
  (when (plusp el-index)
    (send self ':write-block-header)
    (send target-stream ':string-out el-buf 0 el-index))
  (setq el-index 0))

(defmethod (:clear-error embedded-length-output-mixin) (&rest ignore))

(defmethod (:eof embedded-length-output-mixin) ()
  (send self ':force-output)
  (send self ':write-eof-header))

(defmethod (:write-eof embedded-length-output-mixin) (&optional (n 1))
  (send self ':force-output)
  (loop repeat n do (send self :write-eof-header)))

(defmethod (:close embedded-length-output-mixin :after) (&optional abort)
  ;;buffered-output-stream has already forced output.
  (cond (el-buf
	 (or abort (send self ':send-real-output-buffer))
	 (deallocate-resource 'embedded-length-buf el-buf)
	 (or abort (format target-character-stream "EOV "))
	 (or abort (send target-stream ':force-output))
	 (send target-stream ':close abort))))

;;;Version 1, linear, single-directional embedded length streams.
(defflavor unidirectional-embedded-length-output-mixin ()
	   ()
  (:required-flavors embedded-length-output-mixin))

(defmethod (:write-sentinel unidirectional-embedded-length-output-mixin) ()
  (format target-character-stream "EMBEDDED-LENGTH-STREAM VERSION 1~%END~%"))

(defmethod (:write-file-name unidirectional-embedded-length-output-mixin) (file-name)
  (format target-character-stream "FILE ~A~%" file-name))

(defmethod (:write-block-header unidirectional-embedded-length-output-mixin) ()
  (format target-character-stream "BLOK~12,'0D" el-index))

(defmethod (:write-eof-header unidirectional-embedded-length-output-mixin) ()
  (format target-character-stream "EOF "))

;;;Version 2, backspaceable, bidirectional embedded length streams.
(defflavor bidirectional-embedded-length-output-mixin
	((last-file-mark nil)
	 (last-record-start nil))
	()
  (:required-flavors embedded-length-output-mixin))

(defmethod (make-instance bidirectional-embedded-length-output-mixin) (&rest ignore)
  (when (and target-stream
	     (not (send target-stream ':operation-handled-p ':read-pointer)))
    (ferror "~S does not handle :read-pointer." target-stream)))

(defmethod (:write-sentinel bidirectional-embedded-length-output-mixin) ()
  (format target-character-stream "EMBEDDED-LENGTH-STREAM VERSION 2~%END~%"))

(defmethod (:write-block-header bidirectional-embedded-length-output-mixin) ()
  (let ((position (send target-stream ':read-pointer)))
    (format target-character-stream "BLOK~10,'0D~:[----------~*~;~10,'0D~]"
	    el-index last-record-start last-record-start)
    (setq last-record-start position)))

(defmethod (:write-file-name bidirectional-embedded-length-output-mixin) (file-name)
  (format target-character-stream "FILE ~A~%" file-name)) 

(defmethod (:write-eof-header bidirectional-embedded-length-output-mixin) ()
  (let ((position (send target-stream ':read-pointer)))
    (format target-character-stream "EOF ~:[----------~*~;~10,'0D~]~:[----------~*~;~10,'0D~]"
	    last-file-mark last-file-mark last-record-start last-record-start)
    (setq last-file-mark position)))


(defflavor embedded-length-input-mixin
	((el-state ':closed)
	 (el-got-buffer)			;target's input buffer
	 (keybuf (make-array 12. ':type 'art-string))
	 el-limit				;where target buffer ends
	 el-count)				;how many left in block
	(basic-embedded-length-stream)
  (:required-flavors buffered-input-stream))

(defmethod (make-instance embedded-length-input-mixin) (&rest ignore)
  (or target-stream
      (ferror "No target stream given."))
  (or (and (send target-stream :operation-handled-p :string-in)
	   (send target-stream :operation-handled-p :read-input-buffer)
	   (send target-stream :operation-handled-p :advance-input-buffer))
      (ferror "~S doesn't support required input methods." target-stream))
  (setq el-state ':no-block-yet))

(defmethod (make-instance embedded-length-input-mixin :after) (&rest ignore)
  (send self ':collect-and-validate-sentinel))

(defmethod (:reel embedded-length-input-mixin) ()
  (send target-stream ':send-if-handles ':reel))

(defmethod (:host embedded-length-input-mixin) ()
  (send target-stream ':send-if-handles ':host))

(defmethod (:unit embedded-length-input-mixin) ()
  (send target-stream ':send-if-handles ':unit))

(defmethod (:collect-and-validate-sentinel embedded-length-input-mixin) ()
  (return-array
    (let ((ary (make-array 100. ':type 'art-string ':fill-pointer 0)))
      (embedded-length-input-mixin-funny-string-collect ary target-character-stream)
      (send self ':validate-sentinel ary)
      ary)))
	       
(defun embedded-length-input-mixin-funny-string-collect (s stream)
  (store-array-leader 0 s 0)
  (loop repeat 100.
	as c = (send stream ':tyi)
	if (or (null c) (char= c #\CR))
	return nil
	finally (return nil)
	do (array-push s c)))

(defmethod (:next-input-buffer embedded-length-input-mixin) (&rest ignore)	;no-hang
  (loop with xmuch = 0
	and start = 0
	do
	(selectq el-state
	  (:eov    (error 'dis:end-of-volume ':stream self))
	  (:eof    (return nil))
	  (:no-block-yet
	   (send target-character-stream ':string-in "Premature EOF" keybuf 0 4)
	   (setq el-got-buffer nil)
	   (send self ':decode-header))
	  (:reading
	     (cond ((plusp el-count)
		    (or el-got-buffer
			(multiple-value (el-got-buffer start el-limit)
			  (send target-stream ':read-input-buffer "Premature EOF")))
		    
		    (setq xmuch (min el-count (- el-limit start)))
		    (decf el-count xmuch)
		    (setq el-limit (+ start xmuch))
		    (return (values el-got-buffer start el-limit)))	;state stays reading
		   (t (if el-got-buffer (send self ':discard-input-buffer el-got-buffer))
		      (setq el-state ':no-block-yet))))
	  (:closed (ferror "Stream closed - ~S" self))
	  (t (ferror "Invalid state: ~S" el-state)))))

(defmethod (:discard-input-buffer embedded-length-input-mixin) (arg-buf)
  (unless (eq arg-buf el-got-buffer)
    (ferror "This isn't the buffer I gave you: ~S" arg-buf))
  (send target-stream ':advance-input-buffer el-limit)
  (setq el-got-buffer nil))

(defmethod (:establish-initial-condition embedded-length-input-mixin) ()
  (send self ':discard-current-input-buffer)
  (setq el-state ':no-block-yet))

(defmethod (:close embedded-length-input-mixin :after) (&optional abort)
  (if el-got-buffer (send self ':discard-input-buffer el-got-buffer))
  (or (eq el-state ':close) (send target-stream ':close abort))
  (setq el-state ':closed))

(defmethod (:clear-eof embedded-length-input-mixin) ()
  (if (eq el-state ':eof)
      (setq el-state ':no-block-yet)))

(defmethod (:at-eof-p embedded-length-input-mixin) ()
  (eq el-state ':eof))

;;;
(defflavor unidirectional-embedded-length-input-mixin ((last-file-name))
	()
  (:readable-instance-variables (embedded-length-stream-last-file-name last-file-name))
  (:required-flavors basic-embedded-length-stream embedded-length-input-mixin))

(defmethod (:validate-sentinel unidirectional-embedded-length-input-mixin) (ary)
  (if (not (and (string-search "EMBEDDED-LENGTH-STREAM" ary)
		(string-search "VERSION 1" ary)
		(progn
		  (embedded-length-input-mixin-funny-string-collect ary target-character-stream)
		  (string-equal ary "END"))))
      (ferror "~S does not contain Version 1 embedded-length data." target-stream)))

(defmethod (:decode-header unidirectional-embedded-length-input-mixin) ()
  (cond ((string-equal keybuf "EOF " 0 0 4 4)
	 (setq el-state ':eof))
	((string-equal keybuf "EOV " 0 0 4 4)
	 (setq el-state ':eov))
	((string-equal keybuf "BLOK" 0 0 4 4)
	 (send target-character-stream ':string-in "Premature EOF" keybuf 0 12.)
	 (or (setq el-count (parse-number keybuf))
	     (ferror "Invalid block length in stream: ~A" keybuf))
	 (setq el-state ':reading))
	((string-equal keybuf "FILE" 0 0 4 4)
	 (setq last-file-name (send (thin-character-stream target-stream) :line-in))) 
	(t (ferror "Unknown keyword or tape out of sync: ~A" (substring keybuf 0 4)))))

;; Includes :clear-eof
(defmethod (:read-file-name unidirectional-embedded-length-input-mixin) ()
  (when (eq el-state ':eof)
    (send self :clear-eof)
    (send self :untyi (send self :tyi)))		;far easier than the clean approach
    last-file-name)

(defflavor bidirectional-embedded-length-input-mixin
	((num-buf (make-array 20. ':type 'art-string))
	 (last-record-position nil)
	 (last-file-position nil))
	()
  (:required-flavors embedded-length-input-mixin))

(defmethod (:validate-sentinel bidirectional-embedded-length-input-mixin) (ary)
  (if (not (and (string-search "EMBEDDED-LENGTH-STREAM" ary)
		(string-search "VERSION 2" ary)
		(progn
		  (embedded-length-input-mixin-funny-string-collect ary target-character-stream)
		  (string-equal ary "END"))))
      (ferror "~S does not contain Version 2 embedded-length data." target-stream)))

(defmethod (:decode-header bidirectional-embedded-length-input-mixin) ()
  (let ((position (send target-stream ':read-pointer)))	;hahaha
    (cond ((string-equal keybuf "EOF " 0 0 4 4)
	   (setq last-file-position position)
	   (setq el-state ':eof)
	   (send target-character-stream ':string-in "Premature EOF" num-buf 0 20.))	;back pointer
	  ((string-equal keybuf "EOV " 0 0 4 4)
	   (setq el-state ':eov))
	  ((string-equal keybuf "BLOK" 0 0 4 4)
	   (setq last-record-position position)
	   (send target-character-stream ':string-in "Premature EOF" keybuf 0 10.)
	   (or (setq el-count (parse-number keybuf))
	       (ferror "Invalid block length in stream: ~A" keybuf))
	   (setq el-state ':reading)
	   (send target-character-stream ':string-in "Premature EOF" keybuf 0 10.))	;back pointer
	  (t (ferror "Unknown keyword or tape out of sync: ~A" (substring keybuf 0 4))))))

(defmethod (:backspace-current-record bidirectional-embedded-length-input-mixin) ()
  (cond ((and (null last-record-position) (null last-file-position))
	 (ferror "Attempt to backspace-record beyond beginning of medium."))
	((or (null last-record-position)
	     (and last-file-position (< last-record-position last-file-position)))
	 (ferror "Attempt to backspace-record beyond file mark."))
	(t (send target-stream ':set-pointer last-record-position)
	   (copy-array-portion "BLOK" 0 4 keybuf 0 4)
	   (send self ':decode-header))))

(defmethod (:parse-number-buffer bidirectional-embedded-length-input-mixin) (start end)
  (and (not (string-equal num-buf "----------" start end))
       (or (parse-number num-buf start end 10. t)
	   (ferror "Unparseable back-pointer in embedded length data."))))

(defmethod (:backspace-records bidirectional-embedded-length-input-mixin) (&optional (n 1))
  (send self ':discard-current-input-buffer)
  (send self ':backspace-current-record)
  (loop repeat (1- n)
	do (setq last-record-position (send self ':parse-number-buffer 0 10.))
	   (send self ':backspace-current-record)))

(defmethod (:backspace-current-file bidirectional-embedded-length-input-mixin) ()
  (cond ((null last-file-position)
	 (ferror "Attempt to backspace-file beyond beginning of medium."))
	(t (let ((this-middle last-file-position))
	     (send target-stream ':set-pointer this-middle)
	     (copy-array-portion "EOF " 0 4 keybuf 0 4)
	     (send self ':decode-header)
	     (setq last-file-position (send self ':parse-number-buffer 0 10.)
		   last-record-position (send self ':parse-number-buffer 10. 20.))
	     (send target-stream ':set-pointer (- this-middle 4))
	     (setq el-state ':no-block-yet)))))

;;;More work to be done on bidirectional stream.
 

(defflavor embedded-length-8-bit-output-stream ()
	   (unsigned-byte-8-with-character-output-mixin
	    unidirectional-embedded-length-output-mixin
	    embedded-length-output-mixin
	    unsigned-byte-8-stream
	    buffered-output-binary-stream)
  (:default-init-plist :array-type 'art-8b))

(defflavor embedded-length-8-bit-input-stream ()
	   (unsigned-byte-8-with-character-input-mixin
	    unidirectional-embedded-length-input-mixin
	    embedded-length-input-mixin
	    unsigned-byte-8-stream
	    buffered-input-binary-stream))

(defflavor embedded-length-character-output-stream ()
	   (unidirectional-embedded-length-output-mixin
	    embedded-length-output-mixin
	    buffered-output-character-stream)
  (:default-init-plist :array-type 'art-8b))

(defflavor embedded-length-character-input-stream ()
	   (unidirectional-embedded-length-input-mixin
	    embedded-length-input-mixin
	    buffered-input-character-stream))

(defflavor bidirectional-embedded-length-character-output-stream ()
	   (bidirectional-embedded-length-output-mixin
	    embedded-length-output-mixin
	    buffered-output-character-stream)
  (:default-init-plist :array-type 'art-8b))

(compile-flavor-methods
  embedded-length-8-bit-output-stream
  embedded-length-8-bit-input-stream
  embedded-length-character-output-stream
  embedded-length-character-input-stream)
