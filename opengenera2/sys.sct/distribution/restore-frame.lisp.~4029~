;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: DIS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
    
;;;
;;; Restore Distribution frame

(dw:define-program-framework restore
  :pretty-name "Restore Distribution"
  :command-definer define-restore-distribution-command
  :command-table (:inherit-from '("colon full command"
				  "standard arguments"
				  "standard scrolling"
				  "accept-values-pane")
		  :kbd-accelerator-p t)
  ;;:terminal-io-pane interact
  :top-level (restore-top-level)
  :state-variables ((*systems-on-tape*)
		    (*files-on-tape*)
		    (*systems-to-restore*)
		    (*files-to-restore*)
		    (*system-markers*)
		    (*use-disk* :tape)
		    (*output-destination* :standard-output)
		    (*skip-existing* t)
		    (*tape-spec* (or (dw:presentation-type-default 'tape:tape-spec)
				     (tape:default-tape-spec)))
		    (*disk-pathname* (pathname (format nil "~A-1" dist-tape-scratch-path)))
		    (*floppy-pathname*
		      #+imach (sys:system-case
				(MacIvory
				  (pathname (format nil "~A-1" dist-mac-floppy-scratch-path)))
				(otherwise nil))
		      #+3600 nil)
		    (*scroll-tick* 0))
  :panes ((title :title :height-in-lines 1 :redisplay-after-commands nil)
	  (menu :command-menu :menu-level :top-level)
	  (actions :accept-values
		   :default-character-style '(:swiss :roman :normal)
		   :accept-values-function 'accept-restore-actions
		   :size-from-output nil
		   :height-in-lines 10
		   :redisplay-after-commands t
		   :margin-components
		   '((dw:margin-borders)
		     (dw:margin-white-borders :thickness 3)
		     (dw:margin-scroll-bar :visibility :if-needed)
		     (dw:margin-label
		       :string "Actions during Restore Distribution"
		       :Style (:swiss :italic :small))))
	  (system-display :display
			  :default-character-style (si:parse-character-style
						     '(:swiss :roman :normal))
			  :typeout-window nil
			  :redisplay-function 'display-restore-system-specs
			  :incremental-redisplay :limit-to-viewport
			  :redisplay-after-commands t
			  :margin-components '((dw:margin-borders)
					       (dw:margin-white-borders :thickness 3)
					       (dw:margin-scroll-bar :visibility :if-needed)
					       (dw:margin-label
						 :string "Systems to Restore"
						 :style (:swiss :italic :small)))
			  :end-of-page-mode :truncate)
	  (display :display
		   :default-character-style (si:parse-character-style '(:swiss :roman :normal))
		   :typeout-window t
		   :redisplay-function 'display-restore-file-specs
		   :incremental-redisplay :limit-to-viewport
		   :redisplay-after-commands t
		   :margin-components '((dw:margin-borders)
					(dw:margin-white-borders :thickness 3)
					(dw:margin-scroll-bar :visibility :if-needed)
					(dw:margin-label
					  :string "Files to Restore"
					  :style (:swiss :italic :small)))
		   :end-of-page-mode :truncate)
	  (interact :interactor :height-in-lines 6))
  :configurations '((dw::main (:layout
				(dw::main :column row-1 interact)
				(row-1 :row column-2 display)
				(column-2 :column title menu actions system-display))
			      (:sizes
				(dw::main (interact 6 :lines) :then (row-1 :even))
				(row-1 (column-2 0.35) (display 0.65))
				(column-2 (title 1 :lines)
					  (menu :ask-window self :size-for-pane menu)
					  (actions 10 :lines)
					  :then
					  (system-display :even))))))

(defmethod (restore-top-level restore) ()
  (let ((display (dw:get-program-pane 'display))
	(system-display (dw:get-program-pane 'system-display)))
    (flet ((wakeup (blip)
	     (dw:presentation-blip-case blip
	       (dw::window-wakeup-viewport-position-changed
		 (let ((pane (dw:presentation-blip-object blip)))
		   (when (or (eql pane display) (eql pane system-display))
		     (when (eql pane display)
		       (incf *scroll-tick*))
		     (send dw:*program-frame* :redisplay-pane pane))))
	       (otherwise
		 (dw::default-window-wakeup-handler blip)))))
      (dw:default-command-top-level self
				    :prompt "Restore: "
				    :window-wakeup #'wakeup
				    :unknown-accelerator-is-command t))))

(defmethod (accept-restore-actions restore) (stream)
  (flet ((fixed-line (string)
	   (dw:with-redisplayable-output (:unique-id string
					  :cache-value string
					  :stream stream)
	     (cl:write-line string stream))))
    (fixed-line "Skip restoration of files that already exist:")
    (setq *skip-existing*
	  (accept 'boolean
		  :stream stream :provide-default t :query-identifier 'restore-skip-existing
		  :prompt "   " :prompt-mode :raw :default *skip-existing*))
    (fixed-line "Write informational output to:")
    (setq *output-destination*
	  (accept '((token-or-type (:standard-output) cp::destination)) :stream stream
		  :provide-default t :query-identifier 'restore-output-destination
		  :prompt "   " :prompt-mode :raw :default *output-destination*))
    (fixed-line "Read distribution from device:")
    (setq *use-disk*
	  (accept 'distribution-medium
		  :stream stream :provide-default t
		  :query-identifier 'restore-use-disk
		  :prompt "   " :prompt-mode :raw :default *use-disk*))
    (ecase *use-disk*
      (:disk
	(fixed-line "  Pathname for dummy tape file:")
	(setq *disk-pathname*
	      (accept 'fs:pathname :stream stream :provide-default t
		      :query-identifier 'restore-disk-pathname :prompt "      "
		      :prompt-mode :raw :default *disk-pathname*)))
      (:tape
	(fixed-line "  Spec for tape:")
	(setq *tape-spec*
	      (accept 'tape:tape-spec :stream stream :provide-default t
		      :query-identifier 'restore-tape-spec :prompt "      "
		      :prompt-mode :raw :default *tape-spec*)))
      (:floppy
	(fixed-line "  Pathname for diskette file:")
	(setq *floppy-pathname*
	      (accept 'fs:pathname :stream stream :provide-default t
		      :query-identifier 'restore-floppy-pathname :prompt "      "
		      :prompt-mode :raw :default *floppy-pathname*))))))

(define-presentation-type system-for-restore ((&key (system-list nil)))
   :history t
   :parser ((stream &key type initially-display-possibilities)
	    (let* ((alist `(,@(loop for s in system-list
				    as str = (format nil "~A" s)
				    collect (list str s))))
		   (presentation-type
		    `((scl:alist-member :alist ,alist)
		      :description "system to restore")))
	      (dw:with-accept-help
		  (((:subhelp :override)
		    (lambda (stream string-so-far)
		      (ignore string-so-far)
		      (format stream "~&The possible systems to restore are: ")
		      (format-item-list alist
					:stream stream
					:printer (lambda (thing stream)
						   (present (second thing) type
							    :stream stream))))))
		(let ((spec (scl:accept presentation-type
					:original-type type	;get the right history
					:initially-display-possibilities
				          initially-display-possibilities
					:stream stream)))
		  (values spec type)))))
   :printer ((spec stream)
	     (format stream "~@(~A~)" spec))
   :describer ((stream) (format stream "a system name")))

(define-presentation-to-command-translator com-select-system (system-for-restore
							       :gesture nil)
					   (system)
  `(com-select-system ,system))

(define-presentation-to-command-translator com-deselect-system (system-for-restore
								 :gesture nil)
					   (system)
  `(com-deselect-system ,system))

(define-presentation-to-command-translator com-toggle-selection-of-system (system-for-restore)
					   (system)
  `(com-toggle-selection-of-system ,system))

(define-presentation-to-command-translator com-select-all-files-of-system (system-for-restore
									    :gesture :describe)
					   (system)
  `(com-select-all-files-of-system ,system))

(define-presentation-to-command-translator com-deselect-all-files-of-system (system-for-restore
									      :gesture nil)
					   (system)
  `(com-deselect-all-files-of-system ,system))

(define-presentation-type system-for-restore-marker ((&key (system-list nil)))
   :expander 'system-for-restore)

(define-presentation-to-command-translator com-marker-select-all-files-of-system
   (system-for-restore-marker) (system)
  `(com-select-all-files-of-system ,system))

(define-presentation-to-command-translator com-marker-deselect-all-files-of-system
   (system-for-restore-marker :gesture :describe) (system)
  `(com-deselect-all-files-of-system ,system))
(define-presentation-type systems-to-restore-title-marker ()
   :history nil)
(define-presentation-to-command-translator com-select-all-systems
   (systems-to-restore-title-marker) ()
  `(com-select-all-systems))
(define-presentation-to-command-translator com-deselect-all-systems
   (systems-to-restore-title-marker :gesture :describe) ()
  `(com-deselect-all-systems))

(defmethod (display-restore-system-specs restore) (stream)
  (let ((n (+ 4 (length *systems-on-tape*))))
    (dw:with-redisplayable-output (:stream stream
				   :unique-id 'bar
				   :cache-value 'bar
				   :vertical-fraction (/ 4 n))
      (dw:with-output-as-presentation (:stream stream
				       :object 'systems-to-restore-header-line
				       :type 'systems-to-restore-title-marker)
	(format stream "~2%~'bSystems to Restore~~2%")))
    (loop for system in *systems-on-tape*
	  for i upfrom 5
	  as system-to-be-restored = (not (null (member system *systems-to-restore*
							:test #'equal)))
	  do (dw:with-redisplayable-output (:stream stream
					    :unique-id system
					    :cache-value system-to-be-restored
					    :vertical-fraction (/ i n))
	       (dw:with-output-as-presentation (:stream stream
						:object system
						:type 'system-for-restore
						:single-box t
						:allow-sensitive-inferiors nil)
		 (format stream "  ~V~:[   [ ~]~A~:[ ]~]~  ~%"
			 (if system-to-be-restored '(nil nil nil) '(nil nil :small))
			 system-to-be-restored system system-to-be-restored))))))

(define-presentation-type file-for-restore ((&key (file-list nil)))
   :history t
   :parser ((stream &key type initially-display-possibilities)
	    (let* ((alist `(,@(loop for f in file-list
				    as str = (format nil "~A" (first f))
				    collect (list str (first f)))))
		   (presentation-type
		    `((scl:alist-member :alist ,alist)
		      :description "file to restore")))
	      (dw:with-accept-help
		  (((:subhelp :override)
		    (lambda (stream string-so-far)
		      (ignore string-so-far)
		      (format stream "~&The possible files to restore are: ")
		      (format-item-list alist
					:stream stream
					:printer (lambda (thing stream)
						   (present (second thing) type
							    :stream stream))))))
		(let ((spec (scl:accept presentation-type
					:original-type type	;get the right history
					:initially-display-possibilities
				          initially-display-possibilities
					:stream stream)))
		  (values spec type)))))
   :printer ((spec stream)
	     (format stream "~@(~A~)" spec))
   :describer ((stream) (format stream "a file name")))

(define-presentation-to-command-translator com-select-file (file-for-restore
							     :gesture nil)
					   (file)
  `(com-select-file ,file))

(define-presentation-to-command-translator com-deselect-file (file-for-restore
								 :gesture nil)
					   (file)
  `(com-deselect-file ,file))

(define-presentation-to-command-translator com-toggle-selection-of-file (file-for-restore)
					   (file)
  `(com-toggle-selection-of-file ,file))

(defmethod (display-restore-file-specs restore) (stream)
  (let ((n (+ 4 (loop for (nil marks nil length) in *system-markers*
		      when (first marks) sum length)))
	(baselines (loop for (nil marks nil length) in *system-markers*
			 as m first 4 then (+ m j)
			 as j = (if (first marks) length 0)
			 collect m)))
    (dw:with-redisplayable-output (:stream stream
				   :unique-id 'baz
				   :cache-value (list *scroll-tick*
						      (loop for (nil list) in *system-markers*
							    append list))
				   :cache-test #'equal)
      (dw:with-redisplayable-output (:stream stream
				     :unique-id 'bar
				     :cache-value 'bar
				     :vertical-fraction (/ 4 n))
	(format stream "~2%  ~'bFiles to Restore~~2%"))
      (loop for (old-system system-marker start-position) in *system-markers*
	    as system-files = (nthcdr start-position *files-on-tape*)
	    for baseline in baselines
	    do (when (first system-marker)
		 (dw:with-redisplayable-output (:stream stream
						:unique-id old-system
						:cache-value (list *scroll-tick*
								   (copy-list system-marker))
						:cache-test #'equal)
		   (dw:with-redisplayable-output (:stream stream
						  :unique-id (cons :system old-system)
						  :id-test #'equal
						  :cache-value old-system
						  :vertical-fraction (/ (1+ baseline) n))
		     (dw:with-output-as-presentation (:stream stream
						      :object old-system
						      :type 'system-for-restore-marker
						      :single-box t
						      :allow-sensitive-inferiors nil)
		       (format stream "  ~'bIn system ~A:  ~~%" old-system)))
		   (loop for file-to-be-restored in (cdr system-marker)
			 for (file) in system-files
			 for i upfrom (1+ (1+ baseline))
			 do (dw:with-redisplayable-output (:stream stream
							   :unique-id file
							   :cache-value file-to-be-restored
							   :vertical-fraction (/ i n))
			      (dw:with-output-as-presentation (:stream stream
							       :object file
							       :type 'file-for-restore
							       :single-box t
							       :allow-sensitive-inferiors nil)
				(format stream "    ~V~:[   [ ~]~A~:[ ]~]~    ~%"
					(if file-to-be-restored '(nil nil nil)
					  '(nil nil :small))
					file-to-be-restored file file-to-be-restored))))))))))
(define-restore-distribution-command (com-select-all-systems) ()
   (incf *scroll-tick*)
   (send dw:*program-frame* :redisplay-pane (dw:get-program-pane 'display))
   (setq *systems-to-restore* (copy-list *systems-on-tape*))
   (loop for item in *system-markers*
	 do (setf (first (second item)) t)))
(define-restore-distribution-command (com-deselect-all-systems) ()
   (incf *scroll-tick*)
   (setq *systems-to-restore* nil)
   (loop for item in *system-markers*
	 do (setf (first (second item)) nil))
   (send dw:*program-frame* :redisplay-pane (dw:get-program-pane 'display) t))

(define-restore-distribution-command (com-select-system)
    ((system `((system-for-restore :system-list ,*systems-on-tape*))
	     :prompt "to restore"
	     :default (first *systems-on-tape*)
	     :documentation "a system to restore to the filesystem"))
   (incf *scroll-tick*)
   (send dw:*program-frame* :redisplay-pane (dw:get-program-pane 'display))
   (pushnew system *systems-to-restore*)
   (loop for start-pos first 0 then (1+ current-pos)
	 for current-pos = (position system *system-markers* :key #'first :start start-pos)
	 while current-pos
	 do (setf (first (second (nth current-pos *system-markers*))) t)))

(define-restore-distribution-command (com-deselect-system)
    ((system `((system-for-restore :system-list ,*systems-on-tape*))
	     :prompt "for restore"
	     :default (first *systems-to-restore*)
	     :documentation "a system not to restore to the filesystem"))
   (incf *scroll-tick*)
   (setq *systems-to-restore* (remove system *systems-to-restore*))
   (loop for start-pos first 0 then (1+ current-pos)
	 for current-pos = (position system *system-markers* :key #'first :start start-pos)
	 while current-pos
	 do (setf (first (second (nth current-pos *system-markers*))) nil))
   (send dw:*program-frame* :redisplay-pane (dw:get-program-pane 'display) t))

(define-restore-distribution-command (com-toggle-selection-of-system)
    ((system `((system-for-restore :system-list ,*systems-on-tape*))
	     :prompt "to restore"
	     :default (first *systems-to-restore*)
	     :documentation "a system to restore to the filesystem"))
   (incf *scroll-tick*)
   (if (find system *systems-to-restore*)
       (progn (setq *systems-to-restore* (remove system *systems-to-restore*))
	      (loop for start-pos first 0 then (1+ current-pos)
		    for current-pos =
			(position system *system-markers* :key #'first :start start-pos)
		    while current-pos
		    do (setf (first (second (nth current-pos *system-markers*))) nil))
	      (send dw:*program-frame* :redisplay-pane (dw:get-program-pane 'display) t))
     (pushnew system *systems-to-restore*)
     (loop for start-pos first 0 then (1+ current-pos)
	   for current-pos = (position system *system-markers* :key #'first :start start-pos)
	   while current-pos
	   do (setf (first (second (nth current-pos *system-markers*))) t))
     (send dw:*program-frame* :redisplay-pane (dw:get-program-pane 'display))))

(define-restore-distribution-command (com-select-all-files-of-system)
    ((system `((system-for-restore :system-list ,*systems-to-restore*))
	     :prompt "to restore"
	     :default (first *systems-to-restore*)
	     :documentation "a system to restore to the filesystem"))
   (loop for item in *files-on-tape*
	 as (nil nil sys) = item
	 when (equal sys system)
	   do (pushnew item *files-to-restore* :test #'equal))
   (loop for (sys marks) in *system-markers*
	 when (equal sys system)
	 do (loop for sublist on (cdr marks)
		  do (setf (first sublist) t))))

(define-restore-distribution-command (com-deselect-all-files-of-system)
    ((system `((system-for-restore :system-list ,*systems-to-restore*))
	     :prompt "to restore"
	     :default (first *systems-to-restore*)
	     :documentation "a system to restore to the filesystem"))
   (loop for (file nil sys) in *files-to-restore*
	 when (equal sys system)
	   do (setq *files-to-restore*
		    (remove file *files-to-restore* :key #'first)))
   (loop for (sys marks) in *system-markers*
	 when (equal sys system)
	 do (loop for sublist on (cdr marks)
		  do (setf (first sublist) nil))))

(define-restore-distribution-command (com-select-file)
    ((file `((file-for-restore :file-list ,*files-on-tape*))
	   :prompt "to restore"
	   :default (first (first *files-on-tape*))
	   :documentation "a file to restore to the filesystem"))
   (let* ((item (find file *files-on-tape* :key #'first))
	  (place-in-big-list (position item *files-on-tape*))
	  (system (third item))
	  (sublist-start
	    (1+ (or (position system *files-on-tape* :key #'third
			      :test-not #'equal :end place-in-big-list :from-end t)
		    -1)))
	  (sublist (nthcdr sublist-start *files-on-tape*))
	  (place (position file sublist :key #'first))
	  (marker-vector (second (find sublist-start *system-markers* :key #'third))))
     (pushnew item *files-to-restore*)
     (setf (first (nthcdr (1+ place) marker-vector)) t)))

(define-restore-distribution-command (com-deselect-file)
    ((file `((file-for-restore :file-list ,*files-on-tape*))
	   :prompt "for restore"
	   :default (first (first *files-on-tape*))
	   :documentation "a file not to restore to the filesystem"))
   (let* ((item (find file *files-on-tape* :key #'first))
	  (place-in-big-list (position item *files-on-tape*))
	  (system (third item))
	  (sublist-start
	    (1+ (or (position system *files-on-tape* :key #'third
			      :test-not #'equal :end place-in-big-list :from-end t)
		    -1)))
	  (sublist (nthcdr sublist-start *files-on-tape*))
	  (place (position file sublist :key #'first))
	  (marker-vector (second (find sublist-start *system-markers* :key #'third))))
     (setq *files-to-restore* (remove item *files-to-restore*))
     (setf (first (nthcdr (1+ place) marker-vector)) nil)))

(define-restore-distribution-command (com-toggle-selection-of-file)
    ((file `((file-for-restore :file-list ,*files-on-tape*))
	   :prompt "to restore"
	   :default (first (first *files-on-tape*))
	   :documentation "a file to restore to the filesystem"))
   (let* ((item (find file *files-on-tape* :key #'first))
	  (place-in-big-list (position item *files-on-tape*))
	  (system (third item))
	  (sublist-start
	    (1+ (or (position system *files-on-tape* :key #'third
			      :test-not #'equal :end place-in-big-list :from-end t)
		    -1)))
	  (sublist (nthcdr sublist-start *files-on-tape*))
	  (place (position file sublist :key #'first))
	  (marker-vector (second (find sublist-start *system-markers* :key #'third))))
     (if (find file *files-to-restore* :key #'first)
	 (progn
	   (setq *files-to-restore* (remove item *files-to-restore*))
	   (setf (first (nthcdr (1+ place) marker-vector)) nil))
       (pushnew item *files-to-restore*)
       (setf (first (nthcdr (1+ place) marker-vector)) t))))

(define-restore-distribution-command (com-initialize-restoration
				       :menu-accelerator "Initialize Restoration"
				       :menu-documentation
       "Read the directory of the distribution and display the systems and files it contains")
    ()
   (let* ((*another-tape-needed-action* :prompt)	; don't let it SIGNAL
	  (tape-access-path nil))
     (unwind-protect
	 (let ((use-disk (neq *use-disk* :tape)))
	   use-disk
	   (setq tape-access-path
		 (open-input-distribution-tape-access-path
		   *use-disk* (ecase *use-disk*
				(:disk *disk-pathname*)
				(:tape *tape-spec*)
				(:floppy *floppy-pathname*))))
	   (multiple-value-bind (directory system-journals system-keyed-directory)
	       (restore-directory-from-tape tape-access-path)
	     (if (nlistp directory)
		 (cond ((eq directory 'zl-user:distribution-tape)
			(sct:sct-warn
			    "~2& *** This tape is written in pre-Genera-7 distribution format.~
          ~%Restoration for this kind of tape is not yet implemented via the Restore~@
          Distribution frame.  To restore this tape execute the CP command:~@
          ~3T~'i:Restore Distribution :Menu No~")
			#|(restore-rel6-distribution-from-tape
			  :use-disk use-disk :skip-if-already-exists skip-if-already-exists
			  :menu menu :access-path tape-access-path
			  :prologue-string system-journals)|# )
		       (t
			(sct:sct-warn
			    "~2& *** This tape is not written in distribution format.~2%")))
	       (let ((extra-systems nil))
		 (setq *files-on-tape*
		       (loop for (file position system) in
				 (select-restoration-via-menu
				   (or system-keyed-directory directory) nil)
			     as sys = (first (find system system-journals
						   :test #'string-equal :key #'first))
			     unless sys
			       do (pushnew system extra-systems :test #'string-equal)
				  (setq sys system)
			     collect (list file position sys)))
		 (setq *systems-on-tape*
		       (append (loop for (system) in system-journals collect system)
			       (nreverse extra-systems))))
	       (setq *files-to-restore* *files-on-tape*	; Pre-select everything
		     *systems-to-restore* *systems-on-tape*
		     *system-markers* (loop with markers and old-system and marker
					    with start-count = 0
					    for first-pass first t then nil
					    for (nil nil system) in *files-to-restore*
					    for count upfrom 0
					    when (or first-pass (not (equal system old-system)))
					      do (when marker
						   (push (list old-system marker
							       start-count (length marker))
							 markers)
						   (setq start-count count))
						 (setq marker (ncons t))
						 (setq old-system system)
					    do (push t marker)
					    finally (push (list old-system marker
								start-count (length marker))
							  markers)
						    (return (nreverse markers))))
	       (send (send dw:*program-frame* :get-pane 'display) :clear-history)
	       (send (send dw:*program-frame* :get-pane 'system-display) :clear-history)
	       (send dw:*program-frame* :redisplay-pane 'system-display t)
	       (send dw:*program-frame* :redisplay-pane 'display t)
	       )))
       (when tape-access-path
	 (tape-access-path-close tape-access-path)))))

(define-restore-distribution-command (com-perform-restoration
				       :menu-accelerator "Perform Restoration"
				       :menu-documentation
				       "Restore the selected files to the filesystem")
				     ()
  (cp::with-standard-output-bound (if (equal *output-destination* :standard-output) nil
				      *output-destination*)
    (let ((*query-io* *terminal-io*)
	  (*another-tape-needed-action* :prompt)	; don't let it SIGNAL
	  (tape-access-path nil))
      (with-never-more (*terminal-io*)
		       (unwind-protect
			   (let ((use-disk (neq *use-disk* :tape)))
			     use-disk
			     (setq tape-access-path
				   (open-input-distribution-tape-access-path
				     *use-disk* (ecase *use-disk*
						  (:disk *disk-pathname*)
						  (:tape *tape-spec*)
						  (:floppy *floppy-pathname*))))
			     (multiple-value-bind (directory system-journals system-keyed-directory)
				 (restore-directory-from-tape tape-access-path)
			       (if (nlistp directory)
				   (cond ((eq directory 'zl-user:distribution-tape)
					  (sct:sct-warn
					      "~2& *** This tape is written in pre-Genera-7 distribution format.~
                             ~%Restoration for this kind of tape not yet implemented.")
					  #|(restore-rel6-distribution-from-tape
			  :use-disk use-disk :skip-if-already-exists skip-if-already-exists
			  :menu menu :access-path tape-access-path
			  :prologue-string system-journals)|# )
					 (t
					  (sct:sct-warn
					      "~2& *** This tape is not written in distribution format.~2%")))
				   (if (not (equal (loop for (file position system) in
							     (select-restoration-via-menu
							       (or system-keyed-directory directory) nil)
							 as sys = (or (first (find system system-journals
										   :test #'string-equal
										   :key #'first))
								      system)
							 collect (list file position sys))
						   *files-on-tape*))
				       (sct:sct-warn
					   "~2&**** ~This distribution is ~'bnot~ the same one from ~
                          which the restoration ~@
			  specification was derived.  Please either~@
                          - Mount the right tape to perform the restoration you specified, or~@
                          - Initialize the restoration for this tape.~")
		   ;; do this before writing files
		   (establish-system-patch-file-pathnames
		     (loop for item in system-journals
			   as (system) = item
			   when (member system *systems-to-restore* :test #'equal)
			     collect item))
		   ;; get them in order
		   (setq *files-to-restore* (sort *files-to-restore* #'< :key #'second))
		   (format t "~2&")
		   (tv:noting-progress ("Restoring files")
		     (loop with fileno = 1
			   with n-to-restore = (length *files-to-restore*)
			   for n-restored upfrom 0
			   for (file position system)
			       in (loop for item in *files-to-restore*
					as (nil nil system) = item
					when (or (null system)	; 7.0 compatibility
						 (member system *systems-to-restore*
							 :test #'equal))
					  collect item)
			   as unknown-system-p = (null (sct:find-system-named system nil t))
			   as (sys journal-directory patch-atom)
			      = (find system system-journals :test #'string-equal :key #'first)
			   do
		       (tv:note-progress n-restored n-to-restore)
		       (with-stack-list (spec (sct:canonicalize-system-name sys) patch-atom
					      (and journal-directory	; 7.0 compatibility
						   (fs:parse-pathname journal-directory)))
			 (let-if unknown-system-p ((fs:*bootstrapping-system-definition* spec))
			   (let* ((file (fs:parse-pathname file))
				  (restore
				    (or (eq (send file :version) :newest)
					(null (cdr (first (fs:multiple-file-plists (list file)))))))
				  (restore-path
				    (if restore
					(progn
					  (format
					    t "~&  Restoring file #~D as ~A." position file)
					  file)
					(if *skip-existing*
					    (progn
					      (format
						t
						"~&   *** Skipping file #~D -- ~A already exists."
						position file)
					      :nowhere)
					    (format
					      *query-io*
					      "~&  File #~D is supposed to be restored ~
					to ~A, which already exists."
					      position file)
					    (let ((new-path
						    (accept
						      '((token-or-type (:nowhere) fs:pathname))
						      :prompt "   Restore where instead?"
						      :default :nowhere)))
					      (when (typep new-path 'fs:pathname)	;dwim
						(setq new-path (fs:merge-pathnames new-path file))
						(format t "~&    Restoring file #~D as ~A."
							position new-path))
					      new-path)))))
			     (unless (= fileno position)
			       (tv:noting-progress ("Skipping to next requested file")
				 (loop for number upfrom fileno below position
				       do
				   (tv:note-progress (- number fileno) (- position fileno))
				   (restore-file-from-tape tape-access-path :nowhere)))
			       (setq fileno position))
			     (unless (eq restore-path :nowhere)
			       (error-restart ((error) "Retry restoring file ~A" restore-path)
				 (with-open-file-case (stream restore-path
							      :direction :probe-directory
							      :if-does-not-exist :error)
				   ((fs:directory-not-found fs:file-not-found)
				    (fs:create-directories-recursively restore-path)))))
			     (restore-file-from-tape tape-access-path restore-path)
			     (incf fileno)))))))
		 (format t "~2&")
		 (unless (eq *standard-output* *query-io*) (format *query-io* "~2&")))))
	 (when tape-access-path
	   (tape-access-path-close tape-access-path)))))))

(defparameter *restore-help-text*
	      "~2&
  ~You are in the Restore Distribution frame.

This frame enables you to examine the list of systems and files on a
distribution tape, select the ones you want, and cause them to be
restored to your filesystem.

To start, give the command ~'bInitialize Restoration~ to cause the frame to
read the directory of the distribution tape.  You can first give the
specification for the tape device in the pane on the left side, called
~'iActions during Restore Distribution~.  The directory will be read and
displayed.  The list of systems on the tape is shown in the lower left
pane named ~'iSystems to Restore~, and the list of files, with system
header lines, is shown in the large pane on the right, named ~'iFiles to 
Restore~. 

Scroll the large pane with the SCROLL and m-SCROLL keys.  m-< and m->
move the display to the beginning and end, respectively.

Initially, all systems and files are selected for restoration.  You can
toggle the selection of a file by clicking left on it.  When a file is
deselected, it is displayed in a smaller font.

You can toggle the selection of a system by clicking left on it in the
~'iSystems to Restore~ pane.  When a system is deselected, it is displayed
in a smaller font, and its files are removed completely from the file
display. 

You can deselect all the files of a system (without deselecting the
system itself) by clicking middle on the header line for that system in
the file display.  Select all the files of a system by clicking left on
the header line.  This kind of operation can be useful, for example, for
selecting just a few of a large number of files in a system by first
deselecting all, then clicking on the few desired files.

You can deselect all the systems on the tape by clicking middle on the
title line in the ~'iSystems to Restore~ pane.  Select all the systems by
clicking left on the title line.  This operation can be useful for
selecting just a few of a large number of systems. 

When the specification is to your liking (all the files you want
restored are displayed in large letters), give the command ~'bPerform
Restoration~.  The frame checks the distribution tape to make sure it is
the same one from which it was initialized.  Then it reads the selected
files and restores them to the filesystem. 

When the restoration is being executed, the informational lines that the
operation produces are printed on the typeout window over the large
pane.  If some other destination for informational output has been
given, the output is written in that place, also.

~")

(define-restore-distribution-command (com-restore-help
				       :menu-accelerator "Help"
				       :menu-documentation "Display the help text"
				       :name "Help") ()
   (let ((screen-type (if (> (send tv:main-screen :inside-width) 950.)
			  :big-screen
			:small-screen)))		; can we do better than this?
     (ecase screen-type
       (:big-screen
	 (format t *restore-help-text*))
       (:small-screen
	 (with-character-style ('(nil nil :small))
	   (format t *restore-help-text*))))))

(cp:define-command-accelerator com-restore-help "restore" (#\help) (:echo nil) ()
  (cp:build-command 'com-restore-help))

(define-restore-distribution-command (com-restore-refresh) ()
   (send dw:*program-frame* :refresh))

(cp:define-command-accelerator com-restore-refresh "restore" (#\refresh) (:echo nil) ()
  (cp:build-command 'com-restore-refresh))

(define-restore-distribution-command (com-restore-scroll-forward) ()
   (let* ((display (dw:get-program-pane 'display))
	  (line-height (send display :line-height)))
     (incf *scroll-tick*)
     (send display :y-scroll-to (* (1- (truncate (send display :inside-height) line-height))
				   line-height) :relative)))

(cp:define-command-accelerator com-restore-scroll-forward "restore" (#\c-V #\scroll)
			       (:echo nil) ()
  (cp:build-command 'com-restore-scroll-forward))

(define-restore-distribution-command (com-restore-scroll-backward) ()
   (let* ((display (dw:get-program-pane 'display))
	  (line-height (send display :line-height)))
     (incf *scroll-tick*)
     (send display :y-scroll-to (- (* (1- (truncate (send display :inside-height) line-height))
				      line-height)) :relative)))

(cp:define-command-accelerator com-restore-scroll-backward "restore" (#\m-V #\m-scroll)
			       (:echo nil) ()
  (cp:build-command 'com-restore-scroll-backward))

(define-restore-distribution-command (com-restore-scroll-to-beginning) ()
   (let ((display (dw:get-program-pane 'display)))
     (incf *scroll-tick*)
     (send display :y-scroll-to 0 :absolute)))

(cp:define-command-accelerator com-restore-scroll-to-beginning "restore" (#\m-<)
			       (:echo nil) ()
  (cp:build-command 'com-restore-scroll-to-beginning))

(define-restore-distribution-command (com-restore-scroll-to-end) ()
   (let* ((display (dw:get-program-pane 'display))
	  (line-height (send display :line-height))
	  (pane-height (send display :inside-height))
	  (centering-fudge (* (truncate
				(* 3 (truncate pane-height line-height)) 4) line-height)))
     (incf *scroll-tick*)
     (send display :y-scroll-to (- (send display :maximum-y-position) centering-fudge)
	   :absolute)))

(cp:define-command-accelerator com-restore-scroll-to-end "restore" (#\m->)
			       (:echo nil) ()
  (cp:build-command 'com-restore-scroll-to-end))
(define-restore-distribution-command (com-restore-remove-typeout-window) ()
   (let ((display (dw:get-program-pane 'display)))
     (dw:remove-window-typeout-window display :prompt-p nil)))

(cp:define-command-accelerator com-restore-remove-typeout-window "restore" (#\space)
			       (:echo nil) ()
  (cp:build-command 'com-restore-remove-typeout-window))

(compile-flavor-methods restore)
