;;; -*- Mode: LISP; Syntax: Zetalisp; Package: DIS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Stupid kludge for presentation types
(defun system-supports-floppies-p ()
  #+3600 nil
  #+IMach (system-case
	    (MacIvory t)
	    (Otherwise NIL)))

;;; Presentation type for distribution media, since MacIvories have a
;;; medium that no other hardware platform does.
(define-presentation-type distribution-medium ()
   :description "a distribution medium"
   :abbreviation-for `(cl:member :tape :disk ,@(when (system-supports-floppies-p) '(:floppy))))
;;; Presentation type for distribution media that acts as a boolean on
;;; non-MacIvories.  This is a compatibility kludge for documented CP
;;; commands with pre-MacIvory ideas.
(define-presentation-type distribution-medium-compatibility-kludge ()
   :description "a distribution medium"
   :abbreviation-for `,(if (system-supports-floppies-p)
			 '(cl:member :tape :disk :floppy)
			 'scl:boolean)
   :default-preprocessor ((default)
			  (if (system-supports-floppies-p)
			      (cond ((eq default nil) :tape)
				    ((eq default t) :disk)
				    (t default))
			      (cond ((or (eq default nil) (eq default t)) default)
				    (t t)))))
;;; Generates the documentation string for the above
(defun distribution-medium-compatibility-kludge-documentation (operation)
  (if (system-supports-floppies-p)
      "Whether to write to tape, hard disk, or floppy disk"
      (format nil "Whether to ~A to disk (test mode) rather than to tape" operation)))
			      
    
;;; Copy a distribution tape to another tape
(defun copy-distribution-tape (&rest ignore)
  (let ((*another-tape-needed-action* :prompt)	; don't let it SIGNAL
	(source-device :tape)
	(source-tape-access-path nil)
	(source-disk-pathname (pathname (format nil "~A-1" dist-tape-scratch-path)))
	(source-tape-spec (or (dw:presentation-type-default 'tape:tape-spec)
			      (tape:default-tape-spec)))
	(source-floppy-pathname (when (system-supports-floppies-p)
				  (pathname (format nil "~A-1" dist-mac-floppy-scratch-path))))
	(source-spec nil)
	(destination-device :tape)
	(destination-disk-pathname (pathname (format nil "~A-1" dist-tape-scratch-path)))
	(destination-tape-spec (or (dw:presentation-type-default 'tape:tape-spec)
				   (tape:default-tape-spec)))
	(destination-floppy-pathname
	  (when (system-supports-floppies-p)
	    (pathname (format nil "~A-1" dist-mac-floppy-scratch-path))))
	(destination-spec nil)
	(format-ok nil))
    (format t "~2&      ~'bCopy a Distribution Tape.~~@
~'iPlease specify from what path and to what path:~")
    (dw:accepting-values ()
      (cl:write-line "" *query-io*)
      (setq source-device
	    (accept 'distribution-medium
		    :provide-default t :prompt "  Copy from device:  "
		    :query-identifier :source :prompt-mode :raw :default source-device))
      (ecase source-device
	(:disk
	  (setq source-disk-pathname 
		(accept 'fs:pathname :provide-default t
			:prompt "    Pathname for dummy tape file: "
			:query-identifier :source-disk :prompt-mode :raw
			:default source-disk-pathname)))
	(:tape
	  (setq source-tape-spec 
		(accept 'tape:tape-spec :provide-default t
			:prompt "    Spec for tape: "
			:query-identifier :source-tape :prompt-mode :raw
			:default source-tape-spec)))
	(:floppy
	  (setq source-floppy-pathname
		(accept 'fs:pathname :provide-default t
			:prompt "    Pathname for diskette file: "
			:query-identifier :source-floppy :prompt-mode :raw
			:default source-floppy-pathname))))
      (cl:write-line "" *query-io*)
      (setq destination-device
	    (accept 'distribution-medium
		    :provide-default t :prompt "  Copy to device:  "
		    :query-identifier :dest :prompt-mode :raw :default destination-device))
      (ecase destination-device
	(:disk
	  (setq destination-disk-pathname 
		(accept 'fs:pathname :provide-default t
			:prompt "    Pathname for dummy tape file: "
			:query-identifier :dest-disk :prompt-mode :raw
			:default destination-disk-pathname)))
	(:tape
	  (setq destination-tape-spec 
		(accept 'tape:tape-spec :provide-default t
			:prompt "    Spec for tape: "
			:query-identifier :dest-tape :prompt-mode :raw
			:default destination-tape-spec)))
	(:floppy
	  (setq destination-floppy-pathname
		(accept 'fs:pathname :provide-default t
			:prompt "    Pathname for diskette file: "
			:query-identifier :dest-floppy :prompt-mode :raw
			:default destination-floppy-pathname))))
      (cl:write-line "" *query-io*))
    (setq source-spec (ecase source-device
			(:disk source-disk-pathname)
			(:tape source-tape-spec)
			(:floppy source-floppy-pathname))
	  destination-spec (ecase destination-device
			     (:disk destination-disk-pathname)
			     (:tape destination-tape-spec)
			     (:floppy destination-floppy-pathname)))
    (unwind-protect
	(progn
	  (setq source-tape-access-path
		(open-input-distribution-tape-access-path source-device source-spec))
	  (flet ((bad-format-handler (&optional ignore)
		   (sct:sct-warn
		       "~2& *** This tape is not written in distribution format.~2%")
		   (return-from copy-distribution-tape (values))))
	    (condition-bind ((zl:ferror #'bad-format-handler))
	      (multiple-value-bind (directory directory-string)
		  (restore-raw-directory-from-tape source-tape-access-path)
		(if (nlistp directory)
		    (cond ((eq directory 'zl-user:distribution-tape)
			   (sct:sct-warn
			       "~2& *** This tape is written in Release 6 Distribution format.
Copying of this format is no longer supported.  Restore the contents of this tape
to the filesystem via Restore Distribution (which does support Release 6 format),
then create a distribution tape in the current format with Distribute Systems for
the systems involved.  The new tape can then be copied with this function.  If you
really want to copy this Release-6-format tape, please boot a Release 6 world,
and use (DISTRIBUTION:COPY-DISTRIBUTION-TAPE).~2%"))
			  (t (bad-format-handler)))
		  ;; Tape is OK, proceed to copy
		  (setq format-ok t)
		  (copy-distribution-source-to-tape
		    source-tape-access-path directory directory-string
		    destination-device destination-spec))))))
      (when source-tape-access-path
	(when format-ok (format t "~&Copy finished, rewinding ..."))
	(tape-access-path-close source-tape-access-path))
      (when format-ok (format t " done.~2%")))
    (values)))
;;; Like restore-directory-from-tape, but just return the directory list and the raw string
(defun restore-raw-directory-from-tape (tape-access-path)
  (let ((directory-string (read-string-from-tape tape-access-path)))
    (if (stringp directory-string)		;if not, it's not a rel-7 distribution tape
	(let ((interpreted-string
		(with-input-from-string (s directory-string)
		  (with-standard-io-environment
		    (read s)))))
	  (if (listp interpreted-string)	;if not, it's not a rel-7 distribution tape
	      (values (first interpreted-string) directory-string)
	    (values interpreted-string directory-string)))  ;return value, let caller diagnose
      directory-string)))
(defun copy-distribution-source-to-tape (source-path directory directory-string
					 destination-device destination-spec)
  (let ((destination-tape-access-path nil)
	(title "Copy of distribution tape"))	;---??
    (unwind-protect
	(progn
	  (setq destination-tape-access-path
		(open-output-distribution-tape-access-path nil title destination-device
							   destination-spec))
	  (write-string-to-tape destination-tape-access-path directory-string
				"Files on this tape")
	  (loop for path in directory
		do (ignore path)
		   (with-tape-file-stream (source-path in-props)
		     (with-tape-file-stream (destination-tape-access-path out-props)
		       (stream-copy-until-eof in-props out-props)))
		   (with-tape-file-stream (source-path in-data)
		     (with-tape-file-stream (destination-tape-access-path out-data)
		       (stream-copy-until-eof in-data out-data)))))
      (when destination-tape-access-path 
	(tape-access-path-close destination-tape-access-path)))))


;; Show listing (nee Distribution mapping)
(defun show-distribution-directory (&key (use-disk :tape))
  (let* ((*another-tape-needed-action* :prompt)	; don't let it SIGNAL
	 (tape-access-path nil))
    (flet ((output-distribution-listing-header ()
	     (format t "~2&~'bDistribution listing,~ ~\datime\ "))
	   (output-system-header ()
	     (format t "~2&~'bSystems on this tape:~"))
	   (output-system-detail-lines (systems)
	     (loop with count = 0
		   with strings
		   for (system) in systems
		   as string = (format nil "~A" system)
		   as string-length = (string-length string)
		   when (> (+ count string-length 2) 90)
		     do (format t "~&  ~{~A, ~}" (nreverse strings))
			(setq strings nil)
			(setq count 0)
		   do (cl:push string strings)
		      (incf count (+ string-length 2))
		   finally (format t "~&  ~{~A~^, ~}" (nreverse strings))))
	   (output-file-header ()
	     (format
	       t "~2&~'bFiles on this tape:                                   ~
                         Translated pathnames:~"))
	   (output-system-detail-header (system)
	     (format t "~& In system ~'b~A~:" system))
	   (output-file-detail-line (file system number)
	     (let-if (and system (null (sct:find-system-named system nil t)))
		     ((fs:*pathname-inhibit-expensive-translation* t))
	       (let ((translated-pathname
		       (condition-case ()
			    (or (catch 'fs:expensive-translation
				  (send (fs:parse-pathname file) :translated-pathname))
				(format
				  nil "~'i(System not defined, can't translate pathname)~"))
			  (fs:pathname-error
			    (format nil "~'i(Can't translate pathname)~")))))
		 (format t "~&  ~3D  ~45,1,2A  ~A" number file translated-pathname)))))
    (unwind-protect
	(progn
	  (setq tape-access-path (open-input-distribution-tape-access-path use-disk))
	  (multiple-value-bind (directory system-journals system-keyed-directory)
	      (restore-directory-from-tape tape-access-path)
	    (if (nlistp directory)
		(cond ((eq directory 'zl-user:distribution-tape)
		       (show-rel6-distribution-directory
			 :use-disk (ecase use-disk		;dwim
				     ((t :disk :floppy) t)
				     ((nil :tape) nil))
			 :access-path tape-access-path
			 :prologue-string (and (stringp system-journals) system-journals)))
		      (t
		       (sct:sct-warn
			   "~2& *** This tape is not written in distribution format.~%")))
	      ;; do this before translating files
	      (establish-system-patch-file-pathnames system-journals)
	      (output-distribution-listing-header)
	      (output-system-header)
	      (output-system-detail-lines system-journals)
	      (output-file-header)
	      (loop with current-system
		    for item in (or system-keyed-directory directory)
		    as file = (if system-keyed-directory (first item) item)
		    as system = (if system-keyed-directory (second item) nil)
		    for count upfrom 1
		    when (not (equal current-system system))
		      do (output-system-detail-header system)
			 (setq current-system system)
		    do (output-file-detail-line file system count)))))
      (when tape-access-path
	(tape-access-path-close tape-access-path))))))

(defun show-rel6-distribution-directory (&key (use-disk nil) (prologue-string nil)
					 (access-path nil))
  #+3600
  (progn
    (sct:sct-warn "~2& *** This tape is written in Release 6 distribution format.~@
		     ~5TWe will try to apply the Release 6 distribution mapper to it.~2%")
    (old-dis:map-distribution-tape
      :use-disk use-disk :prologue-string prologue-string :access-path access-path))
  #+imach
  (sys:system-case
    (vlm
      (ignore use-disk prologue-string access-path)
      (sct:sct-warn "~2& *** This tape is written in Release 6 distribution format.~@
		         ~5TIt cannot be mapped in Open Genera.~2%"))
    (otherwise
      (sct:sct-warn "~2& *** This tape is written in Release 6 distribution format.~@
		         ~5TWe will try to apply the Release 6 distribution mapper to it.~2%")
      (old-dis:map-distribution-tape
	:use-disk use-disk :prologue-string prologue-string :access-path access-path))))


;;; CP commands for Distribution

(cp:define-command (com-distribute-systems :command-table "Tape Administration")
		   ((systems-and-versions 'systems-and-versions
					  :prompt "a sequence of systems and version numbers")
		    &key
		    (source-category '((cl:member :basic :optional :restricted
						  :optional-only :restricted-only))
				     :prompt "to include"
				     :default :basic
				     :documentation "What source category to output")
		    (file-types '((cl:member :default :sources :binaries :both :patches-only))
				:prompt "to include"
				:default :default
				:documentation
                "Which file type(s) to output; default leaves it to individual DEFSYSTEMS")
		    (default-version 'sct:system-version
			     :prompt "to distribute"
			     :default :released
			     :documentation "Default version of the system to distribute")
		    (query '((cl:member :everything :yes :confirm-only :no))
			   :mentioned-default :everything
			   :default :confirm-only
			   :documentation "Whether to ask about distributing each file")
		    (menu 'scl:boolean
			  :prompt "to specify the distribution"
			  :default nil
			  :mentioned-default t
			  :documentation
		     "Whether to use a menu interface to specify details of the distribution")
		    (system-branch 'sct:system-branch
				   :default nil
				   :when (member :version-control *features*)
				   :documentation
		     "What system-branch to use for all of these systems")
		    (flatten-files 'scl:boolean
				   :default t
				   :when (member :version-control *features*)
				   :documentation
		     "Distribute flat files instead of VC files")
		    (compress-files 'scl:boolean
				    :default nil
				    :mentioned-default t
				    :documentation
		     "Compress files on the tape")
		    (include-patches 'yes-no-selective
				     :prompt "of distributed systems"
				     :default t
				     :documentation
	       "Whether to include the patch files for the systems being distributed")
		    (distribute-patch-sources 'scl:boolean
					      :prompt "of distributed systems"
					      :default nil
					      :mentioned-default t
					      :documentation
		     "Whether to include patch sources for system patches")
		    (include-components 'scl:boolean
					:prompt "of distributed systems"
					:default t
					:documentation
	       "Whether to include any component systems of the systems being distributed")
		    (included-files-checkpoint 'dis:checkpoint-spec
					       :prompt "patch or release or None"
					       :default :none
					       :documentation
		     "Limit distributed files to those after this patch number or release name, or None (don't limit)")
		    (use-cached-checkpoint 'scl:boolean
					   :prompt "use last checkpoint"
					   :default nil :mentioned-default t
					   :documentation
		     "Use the last checkpoint gathered for this system")
		    (use-disk 'distribution-medium-compatibility-kludge
			      :prompt "for output"
			      :default nil
			      :mentioned-default t
			      :documentation
			      (distribution-medium-compatibility-kludge-documentation "write"))
		    (tape-spec 'tape:tape-spec
			       :prompt "for output"
			       :default (or (dw:presentation-type-default 'tape:tape-spec)
					    (tape:default-tape-spec))
			       :documentation "Which tape drive to use")
		    (full-length-tapes 'scl:boolean
				       :default t
				       :documentation
			     "Write all tracks of the tape. Use this D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")only0 if you are sure~@
that you don't have to read the tape on a 3600 Cypher drive.")
		    (machine-types `(token-or-type (:all)
				      (sequence (member ,@sct:*all-machine-types*)))
				   :default :all
				   :prompt "machine types"
				   :documentation
				   "Distribute files only for specified machine types")
		    )

   ;;--- Kludge alert: The type used for the systems-and-versions arg above
   ;;presently can't be made to return a specified default.  Due to the
   ;;((scl:type-or-string sct:system)) component, history is available to c-m-Y
   ;;from the sct:system type, but if you null the argument, you will get the value
   ;;(("" NIL)).  So for the moment, we guard against that, and exploit the null
   ;;system list as an indicator for "use the menu".  -- Dodds, 1/24/87 17:07:23
   (loop for system-and-version in systems-and-versions
	 as system = (if (listp system-and-version)
			 (first system-and-version) system-and-version)
	 as system-version = (if (listp system-and-version)
				 (second system-and-version) default-version)
	 as non-defaults = (when (listp system-and-version)
			     (cddr system-and-version))
	 unless (or (null system)
		    (and (stringp system) (string-equal system "")))
	   collect `(,(sct:find-system-named system nil nil)
		     ,(or system-version default-version)
		     ,non-defaults) into sys-and-ver
	 finally (setq systems-and-versions sys-and-ver))
   (setq menu (or menu (null systems-and-versions)))	;dwim
   (setq use-disk (ecase use-disk		;dwim
		    ((t :disk) :disk)
		    ((nil :tape) :tape)
		    (:floppy :floppy)))
   (let ((other-keys nil)
	 (distribute-sources  (case file-types
				((:both :sources) t)
				(:default :use-system-value)
				(t nil)))
	 (distribute-binaries (case file-types
				((:both :binaries) t)
				(:default :use-system-value)
				(t nil)))
	 (include-journals (neq file-types :patches-only)))
     (if menu
	 (let* ((dist-window
		  (dw:find-program-window
		    (cli::program-name (cli::lookup-activity "distribute systems"))))
		(dist-program (send dist-window :program))
		(defaults (list :include-patches include-patches
				:distribute-patch-sources distribute-patch-sources
				:source-category source-category
				:include-components include-components
				:default-version default-version
				:include-journals include-journals
				:distribute-sources distribute-sources
				:distribute-binaries distribute-binaries
				:included-files-checkpoint included-files-checkpoint
				:use-cached-checkpoint use-cached-checkpoint
				:system-branch system-branch
				:flatten-files flatten-files
				:compress-files compress-files
				:machine-types machine-types)))
	   (if (null dist-window)
	       (zl:fsignal "Can't create a Distribute Systems frame.")
	     ;; --- an odd situation: it seems prudent that if no system/version was
	     ;; given, which is dwimmed to mean "gimme the menu interface", then any
	     ;; prior contents of *systems-to-distribute* should be preserved.  The
	     ;; reasoning is that the poor confused user may have selected away from the
	     ;; Distribute Systems frame, and, in moment of panic, could think of no way
	     ;; back to the frame other than "Distribute Systems<return>".  Fine.  But at
	     ;; the same time, we can't tell whether the values of keyword args were given
	     ;; explictly or derived from defaults.  So we have to set them into the
	     ;; corresponding frame state variables.  This is probably not a big deal, but
	     ;; it is a gnawing inconsistency.
	     (unless (null systems-and-versions)
	       (setf (distribution-*systems-to-distribute* dist-program)
		     (canonicalize-system-specs systems-and-versions defaults))
	       (setf (distribution-*program-state* dist-program) :systems))
	     (setf (distribution-*query* dist-program) query)
	     (setf (distribution-*use-disk* dist-program) use-disk)
	     (setf (distribution-*tape-spec* dist-program) tape-spec)
	     (setf (distribution-*output-destination* dist-program)
		   (if cp::.output-destination. cp::.output-destination. :standard-output))
	     (setf (distribution-*defaults* dist-program) defaults)
	     (send (send dist-window :get-pane 'interact) :force-kbd-input
		   (dw::make-presentation-blip :presentation-type 'dw::window-wakeup-refresh
					       :object dist-window))
	     (send dist-window :select)
	     (tv:await-window-exposure)))
       (setq query (case query
		     ((:yes :everything) t)
		     (:confirm-only :confirm)
		     (:no :no-confirm)))
       (setq other-keys (list :include-journals include-journals))
       (unless (eql distribute-sources :use-system-value)
	 (push distribute-sources other-keys)
	 (push :distribute-sources other-keys))
       (unless (eql distribute-binaries :use-system-value)
	 (push distribute-binaries other-keys)
	 (push :distribute-binaries other-keys))
       (if (eql systems-and-versions :abort)
	   (progn (format *standard-output* "  Aborted.~%")
		  (unless (eq *standard-output* *query-io*)
		    (format *query-io* "  Aborted.~%")))
	 (if (null systems-and-versions)
	     (progn (format *standard-output* "  No systems specified.~%")
		    (unless (eq *standard-output* *query-io*)
		      (format *query-io* "  No systems specified.~%")))
	   (apply #'write-distribution-on-tape
		  systems-and-versions use-disk
		  :query query
		  :include-patches include-patches
		  :distribute-patch-sources distribute-patch-sources
		  :source-category source-category
		  :suppress-detail-printing t
		  :include-components include-components
		  :included-files-checkpoint included-files-checkpoint
		  :use-cached-checkpoint use-cached-checkpoint
		  :tape-spec tape-spec
		  :full-length-tapes full-length-tapes
		  :compress-files compress-files
		  :machine-types machine-types
		  :flatten-files flatten-files
		  other-keys)
	   (format *standard-output* "~%")
	   (unless (eq *standard-output* *query-io*) (format *query-io* "~%")))))))

(cp:define-command (com-restore-distribution :command-table "Tape Administration")
    (&key
      (use-disk 'distribution-medium-compatibility-kludge
		:prompt "for input"
		:default nil
		:mentioned-default t
		:documentation
		(distribution-medium-compatibility-kludge-documentation "read"))
      (skip-restoration 'scl:boolean
			:prompt "for files already on disk"
			:default t
			:documentation
			"Whether to skip or prompt if target file already exists on disk")
      (menu 'scl:boolean
	    :prompt "to select files to restore"
	    :default nil
	    :mentioned-default t
	    :documentation
	    "Whether to use a menu to select which files to restore"))
   (setq use-disk (ecase use-disk		;dwim
		    ((t :disk) :disk)
		    ((nil :tape) :tape)
		    (:floppy :floppy)))
   (if menu
       (let* ((restore-window
		(dw:find-program-window
		  (cli::program-name (cli::lookup-activity "restore distribution"))))
	      (restore-program (send restore-window :program)))
	 (if (null restore-window)
	     (zl:fsignal "Can't create a Restore Distributtion frame.")
	   (setf (restore-*use-disk* restore-program) use-disk)
	   (setf (restore-*output-destination* restore-program)
		 (if cp::.output-destination. cp::.output-destination. :standard-output))
	   (setf (restore-*skip-existing* restore-program) skip-restoration)
	   (send (send restore-window :get-pane 'interact) :force-kbd-input
		 (dw::make-presentation-blip :presentation-type 'dw::window-wakeup-refresh
					     :object restore-window))
	   (send restore-window :select)
	   (tv:await-window-exposure)))
     (restore-distribution-from-tape :use-disk use-disk
				     :skip-if-already-exists skip-restoration
				     :menu menu)))

(cp:define-command (com-show-distribution-directory :command-table "Tape Administration")
    (&key
      (use-disk 'distribution-medium-compatibility-kludge
		:prompt "for input"
		:default nil
		:mentioned-default t
		:documentation
		(distribution-medium-compatibility-kludge-documentation "read")))
   ;; use-disk arg values the same as for Distribute Systems and Restore
   ;; Distribution, for compatibility.
   (setq use-disk (ecase use-disk		;dwim
		    ((t :disk) :disk)
		    ((nil :tape) :tape)
		    (:floppy :floppy)))
   (show-distribution-directory :use-disk use-disk)
   (format t "~2&"))

(cp:define-command (com-verify-distribution :command-table "Tape Administration")
    (&key
      (use-disk 'distribution-medium-compatibility-kludge
		:prompt "for input"
		:default nil
		:mentioned-default t
		:documentation
		(distribution-medium-compatibility-kludge-documentation "read")))
   (setq use-disk (ecase use-disk		;dwim
		    ((t :disk) :disk)
		    ((nil :tape) :tape)
		    (:floppy :floppy)))
   (verify-distribution-from-tape :use-disk use-disk))
