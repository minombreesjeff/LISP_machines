;;; -*- Mode: LISP; Syntax: Zetalisp; Package: DIS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


;;; Various presentation-types used by Distribution

(scl:define-presentation-type checkpoint-spec ()
   :history t
   :parser ((stream &key type initially-display-possibilities)
	    (let* ((alist `(,(list "None" :none)
			    ,@(loop with *print-base* = 10
				    for (e) in sct:*releases* 
				    as str = (format nil "~A.~A" (first e) (second e))
				    collect (list str str))))
		   (presentation-type
		    `((or ((scl:alist-member :alist ,alist)
			   :description "release designator")
			  ((cl:integer 1))))))
	      (dw:with-accept-help
		  (((:subhelp :override)
		    (lambda (stream string-so-far)
		      (ignore string-so-far)
		      (format stream "~&The possible release designators are: ")
		      (format-item-list alist
					:stream stream
					:printer (lambda (thing stream)
						   (present (second thing) type
							    :stream stream))))))
		(let ((spec (scl:accept presentation-type
					:original-type type	;get the right history
					:initially-display-possibilities
				          initially-display-possibilities
					:stream stream)))
		  ;;--- This seemingly redundant check is necessary as long as range
		  ;;--- checking doesn't work for boolean-combined presentation types.
		  (when (and (typep spec 'integer) (< spec 1))
		    (zl:parse-ferror "The input read, ~D, was not a decimal integer ~
				      greater than or equal to 1." spec))
		  (values spec type)))))
   :printer ((spec stream)
	     (let ((*print-base* 10))
	       (format stream "~@(~A~)" spec)))
   :describer ((stream) (format stream "a patch number or release designator")))

(scl:define-presentation-type system-and-version ()
   :history nil
   :parser ((stream &key type original-type)
	    (let* ((system-type '((scl:type-or-string sct:system)))
		   (version-type 'sct:system-version)
		   (types-to-go (list system-type version-type))
		   (sequence-delimiter '#\space)
		   (system-and-version nil))
	      (loop named success doing
		(multiple-value-bind (object)
		    (let* ((this-type (pop types-to-go))
			   ;; Provide a default if we have read the system name
			   (version-default :released)
			   (provide-default (not (null system-and-version))))
		      (accept this-type
			      :stream stream
			      :prompt nil
			      :provide-default provide-default
			      :default (if provide-default version-default)
			      :default-type (if provide-default version-type)
			      :additional-blip-chars `(,sequence-delimiter)))
		  (push object system-and-version))
		(when types-to-go
		  (loop
		    (multiple-value-bind (more-to-come object)
			(dw::presentation-type-parser-lookahead
			  stream (first types-to-go)
			  :delimiter-char sequence-delimiter
			  :echo-space nil
			  :echo-string-before-blip (and (null system-and-version)
							(string sequence-delimiter)))
		      (ecase more-to-come
			((nil)
			 (if (null system-and-version)
			     (error 'dw::sequence-enumerated-needs-more-inputs
				    :type original-type :object system-and-version
				    :which-more types-to-go)
			   ;; He just gave us a system, default version to Released
			   (push :released system-and-version)
			   (return-from success
			     (values (nreverse system-and-version) type))))
			((t)
			 (return))
			((:accepted)
			 (push object system-and-version)
			 (pop types-to-go)
			 (when (null types-to-go)
			   (return)))))))
		(when (null types-to-go)
		  (return (values (nreverse system-and-version) type))))))
   :printer ((s-and-v stream)
	     (if (listp s-and-v)
		 (destructuring-bind (system version) s-and-v
		   (format stream "~A ~@(~A~)" system version))
	       (format stream "~A" s-and-v)))
   :description "a system name followed by a version designator")

(scl:define-presentation-type systems-and-versions ()
   :abbreviation-for
     `((scl:sequence system-and-version)))
(defun boolean-plus-other-choices (&rest keys)
  (append dw::*boolean-alist*
	  (loop for key in keys
		collect (cons (string-capitalize (format nil "~A" key)) key))))
(define-presentation-type yes-no-selective ()
   :abbreviation-for (let ((alist (boolean-plus-other-choices :selective)))
		       `((alist-member :alist ,alist))))
(define-presentation-type yes-no-use-system-value ()
   :abbreviation-for (let ((alist (boolean-plus-other-choices :use-system-value)))
		       `((alist-member :alist ,alist))))
;;; alist for all the parameters of system specs:
;;; keyword designator, presentation type, initial default value.
(eval-when (compile load eval)
(defparameter *distribution-defaults-ptype-alist*
	      `((:default-version sct:system-version :released)
		(:source-category
		  ((cl:member :basic :optional :restricted :optional-only :restricted-only))
		  :basic)
		(:distribute-sources yes-no-use-system-value :use-system-value)
		(:distribute-binaries yes-no-use-system-value :use-system-value)
		(:include-patches yes-no-selective t)
		(:distribute-patch-sources boolean nil)
		(:include-journals boolean t)
		(:include-components boolean t)
		(:included-files-checkpoint checkpoint-spec :none)
		(:use-cached-checkpoint boolean nil)
		(:system-branch (null-or-type sct:system-branch) nil)
		(:flatten-files boolean t)
		(:compress-files boolean nil)
		(:machine-types (token-or-type (:all)
				  (sequence (member ,@sct:*all-machine-types*))) :all)))
)
;;; --- This JWalker gem belongs in a central place in the standard System.
;;; --- Until it gets there, we need to define it here for the distribution frames.
;;; Turn off more processing for the duration of the macro body and reinstate
;;; the current more state when the operation is over.  This really should be a 
;;; standard system facility.
(defmacro with-never-more ((&optional (window 'tv:selected-window)) &body body)
  `(let* ((.window. ,window)			;Capture it now in case user changes windows
	  (more-state (send .window. :more-p)))	;Find initial more state
    (unwind-protect
	(progn
	  (send .window. :set-more-p nil)	;Turn it off
	  ,@body)
      (send .window. :set-more-p more-state))	;Restore window's more processing
    ))
;;; We use this when we want a non-VC pathname which will represent the contents of a specific
;;; branch and version of a VC file.  It is the identity for non-VC pathnames.
(defun flat-pathname-for-vc-file-branch (pathname)
  (cond ((not (fs:pathname-vc-p pathname))
	 pathname)
	#+++ignore
	((null flatten-files)
	 ;;--- Need to figure out how to get this information into this function, since
	 ;;--- FLATTEN-FILES doesn't get passed down this far...
	 (flat-file-for-vc-file-envelope pathname))
	(t
	 (fs:flatten-version-control-pathname pathname))))
;; We use this when we want the pathname for the entire VC-file, not just
;; a single branch in the file.  That is, the entire VC files goes onto
;; the tape, not just one branch.
(defun flat-pathname-for-vc-file-envelope (pathname)
  (send pathname :new-pathname :vc-branch nil :vc-version nil))
(defun write-distribution-system (system distribution-stream &rest keys
							     &key &allow-other-keys)
  (apply #'sct:distribute-system
	 system :distribution-stream distribution-stream keys))

(defun write-specific-file (distribution-stream ignore pathname ignore ignore
			    &key (flatten-files t) (compress-files nil))
  (when (not flatten-files)
    ;; :FLATTEN-FILES NIL says "distribute the entire VC file"
    (setq pathname (flat-pathname-for-vc-file-envelope pathname)))
  (if (arrayp distribution-stream)
      (vector-push-extend (list pathname
				(sct:system-name
				  (sct:subsystem-parent-system sct:*system*))
				(when compress-files
				  ;; Use :COMPRESS, rather than just T, so that
				  ;; somebody else looking at the data structure
				  ;; knows what this really is.
				  :compress))
			  distribution-stream)
    (format distribution-stream "~S~%" (string pathname))))

(defun distribution-array (system)
  (let* ((files (loop for file-and-system being the array-elements of system
		      as (file) = file-and-system
		      do (when (null (send file :version))
			   (setq file (send file :new-version :newest))
			   (setf (first file-and-system) file))
		      collect file))
	 (plists (fs:multiple-file-plists files))
	 (array (make-array (array-dimensions system) :fill-pointer 0)))
    (loop for (file system compress-p) being the array-elements of system
	  as pathname = (fs:parse-pathname file)
	  as plist = (cdr (assoc pathname plists))
	  ;; In case the file got deleted...
	  do (if (null plist)
		 (cerror (format nil "Skip distributing ~A" pathname)
		   "The property-list for ~A is null!  The file has probably been deleted."
		   pathname)
	       (let ((plist plist)
		     (length nil)
		     (truename
		       ;; Need to use the truename for Restore Distribution to win
		       (send pathname :new-version (send (getf plist :truename) :version))))
		 (unless (or (getf plist :length) (getf plist :length-in-blocks))
		   ;; If no length, the pathname is probably a link.
		   ;; Try probing to get the real file's plist.
		   (let ((real-path (condition-case ()
					 (probe-file pathname)
				       (error nil))))
		     (when real-path
		       (setq plist (cdr (send real-path :properties))))))
		 (let ((file-length (getf plist :length))
		       (file-length-in-blocks (getf plist :length-in-blocks)))
		   (when (or file-length file-length-in-blocks)
		     (setq length
			   ;; Compute the length in 8-bit bytes
			   (* (or file-length 
				  ;; For DAP streams, a conservative estimate
				  (* file-length-in-blocks 512.))
			      (// (or (getf plist :byte-size) 8) 8)))))
		 (if (null length)
		     ;; If we still haven't found a length, punt.
		     (cerror (format nil "Skip distributing ~A" pathname)
			     "Can't find a length property for ~A.  ~
                              The file is probably an opaque link."
			     pathname)
		   (vector-push-extend `((,truename ,system ,compress-p) ,length) array)))))
    array))

;;; These are necessary because the constants referenced are in the TAPE
;;; system, which is compiled later...
(compiler:file-declare 'tape:+cart-4track-max-length+ 'special t)
(compiler:file-declare 'tape:+bytes-per-page+ 'special t)

(defconstant +mac-floppy-max-length+ 775000.
  "The maximum number of bytes to write on a Macintosh floppy disk.")

;;; Conservatively, divide the array of files to be distributed so that it easily
;;; fits on a reel of tape.  Allow 5 blocks for the directory that is written at
;;; the head of the tape, and one extra block per file for the attribute record
;;; that is written for each file.
(defun divide-distribution-array (array &optional (limit tape:+cart-4track-max-length+))
  ;; For the moment, assume that, if any of the files are compressed,
  ;; that it will all fit on the tape.  This is grossly wrong, but
  ;; changing it requires a fair change to the modularity to divide
  ;; the files up by tapes AS THEY ARE WRITTEN instead of beforehand.
  ;; Unfortunately, since the tape must have a directory at the front
  ;; listing all files on the tape, the only way to do this apperas to be
  ;; to compress everything once, counting bytes, with the compressed
  ;; output tossed on the floor.  Then you could run a second, real pass,
  ;; knowing in advance where to split things up.  This would mean a
  ;; performance penalty of a factor of two.
  (cond ((find :compress array
	       :key #'(lambda (entry)
			(third (first entry))))
	 (list array))
	(t
	 (loop with result
	       with in-progress = (make-array 16. :fill-pointer 0)
	       with sum = (* 5 tape:+bytes-per-page+)
	       for elem being the array-elements of array
	       as (file length) = elem
	       do (ignore file)
	       when length
		 do (if (> (+ (+ length tape:+bytes-per-page+) sum) limit)
			(setq result (nconc result (ncons in-progress))
			      in-progress (make-array 16. :fill-pointer 0)
			      sum (+ (* 6 tape:+bytes-per-page+) length))
			(incf sum (+ length tape:+bytes-per-page+)))
		    (vector-push-extend elem in-progress)
	       finally (setq result (nconc result (ncons in-progress)))
		       (return result)))))
(defun make-flat-distribution-plan (systems-and-versions
				    &key (query :confirm) silent batch
					 (source-category :basic)
					 (distribute-sources :use-system-value)
					 (distribute-binaries :use-system-value)
					 (include-components nil)
					 (include-journals t)
					 (include-patches t)
					 (distribute-patch-sources nil)
					 (included-files-checkpoint :none)
					 (use-cached-checkpoint nil)
					 (flatten-files t)
					 (compress-files nil)
					 (suppress-detail-printing nil)
					 (tape-spec nil)
					 (machine-types :all)
					 (no-reload-system-declaration nil))
  (ignore tape-spec)
  (let ((plan-array (make-array 16 :fill-pointer 0)))
    (loop for (system version individual-options) in systems-and-versions do
      (flet ((individual-value-or-default (keyword default-value)
	       (let ((indiv-value (getf individual-options keyword :no-value)))
		 (if (eql indiv-value :no-value) default-value indiv-value))))
	(let ((source-category
		(individual-value-or-default :source-category source-category))
	      (distribute-sources
		(individual-value-or-default :distribute-sources distribute-sources))
	      (distribute-binaries
		(individual-value-or-default :distribute-binaries distribute-binaries))
	      (include-components
		(individual-value-or-default :include-components include-components))
	      (include-journals
		(individual-value-or-default :include-journals include-journals))
	      (include-patches
		(individual-value-or-default :include-patches include-patches))
	      (distribute-patch-sources
		(individual-value-or-default
		  :distribute-patch-sources distribute-patch-sources))
	      (included-files-checkpoint
		(individual-value-or-default
		  :included-files-checkpoint included-files-checkpoint))
	      (use-cached-checkpoint
		(individual-value-or-default
		  :use-cached-checkpoint use-cached-checkpoint))
	      (system-branch (getf individual-options :system-branch))
	      (flatten-files
		(individual-value-or-default :flatten-files flatten-files))
	      (compress-files
		(individual-value-or-default :compress-files compress-files))
	      (machine-types
		(individual-value-or-default :machine-types machine-types))
	      (no-reload-system-declaration
		(individual-value-or-default :no-reload-system-declaration no-reload-system-declaration)))
	  (si:with-rem-keywords (other-options individual-options
				 '(:version :system-branch
				   :query :silent :batch
				   :distribution-stream
				   :source-category
				   :distribute-sources :distribute-binaries
				   :include-components
				   :include-journals :include-patches
				   :distribute-patch-sources
				   :included-files-checkpoint :use-cached-checkpoint
				   :suppress-detail-printing :flatten-files
				   :compress-files
				   :default-version
				   :machine-types
				   :no-reload-system-declaration))
	    (let* ((first-patch (and (listp version) (second version)))
		   (last-patch  (and (listp version) (third version)))
		   (version (if (listp version) (first version) version))
		   ;; If the user explicitly specified a first patch number
		   ;; with the version number, it should override the checkpoint
		   ;; spec.  If he also specified a last patch number, it should
		   ;; be included in the new checkpoint spec.
		   (included-files-checkpoint (if first-patch
						  (if last-patch
						      (list first-patch last-patch)
						    first-patch)
						included-files-checkpoint)))
	      (apply #'sct:distribute-system
		     system
		     :version version :system-branch system-branch
		     :query query :silent silent :batch batch
		     :distribution-stream plan-array
		     :source-category source-category
		     :distribute-sources distribute-sources
		     :distribute-binaries distribute-binaries
		     :include-components include-components
		     :include-journals include-journals
		     :include-patches include-patches
		     :distribute-patch-sources distribute-patch-sources
		     :included-files-checkpoint included-files-checkpoint
		     :use-cached-checkpoint use-cached-checkpoint
		     :suppress-detail-printing suppress-detail-printing
		     :flatten-files flatten-files
		     :compress-files compress-files
		     :machine-types machine-types
		     :no-reload-system-declaration no-reload-system-declaration
		     other-options))))))
    plan-array))

;;; Returns the list of plans for each reel, number of reels, and list of systems
;;; actually included in the distribution.  This last is needed to write system
;;; journal info in the distribution directory for all systems that have been
;;; drawn into the plan, including component systems.
(defun make-distribution-plan-for-tape (systems-and-versions use-disk &rest keys
					&key version (source-category :basic)
					     (tape-spec nil)
					     (full-length-tapes t)
					&allow-other-keys)
  (declare (arglist systems-and-versions use-disk &rest keys
		    &key (source-category :basic) &allow-other-keys))
  (when (not (null version))
    (error "You cannot specify an explicit :VERSION here"))
  (let* ((tape-spec (or tape-spec
			(and (eq use-disk :tape)
			     (accept 'tape:tape-spec
				     :prompt "Tape specification for output"
				     :default (or (dw:presentation-type-default
						    'tape:tape-spec)
						  (tape:default-tape-spec))))))
	 (limit (ecase use-disk
		  (:tape (tape:get-cart-guaranteed-capacity
			   (send tape-spec :host) (send tape-spec :device) full-length-tapes))
		  (:disk (if full-length-tapes tape:+cart-9track-max-length+
			   tape:+cart-4track-max-length+))
		  (:floppy +mac-floppy-max-length+)))
	 (plan (si:with-rem-keywords (rem-keys keys '(:version :full-length-tapes))
		 (apply #'make-flat-distribution-plan
			systems-and-versions
			:source-category source-category rem-keys)))
	 (systems-included
	   (loop for (nil system) being the array-elements of plan
		 as sys = (sct:find-system-named system nil nil t)
		 when sys
		   collect sys into systems
		 finally (return (delete-duplicates systems :from-end t))))
	 (reels-needed 0)
	 (divided-plan
	   (loop for reel in (divide-distribution-array
			       (distribution-array plan)
			       limit)
		 when (plusp (length reel))
		   do (incf reels-needed)
		 when (plusp (length reel))
		   collect reel)))
      (values divided-plan reels-needed systems-included (and (eq use-disk :tape)
							      tape-spec))))

(defun write-distribution-plan-files-to-tape (systems reels use-disk path)
  (let ((*another-tape-needed-action* :prompt)	; don't let it SIGNAL
	(device-description (if (eql use-disk :floppy) "diskette" "tape"))
	(unit-description (if (eql use-disk :floppy) "volume" "reel")))
    (loop for reel in reels
	  for reelno upfrom 1 do
      (error-restart ((tape:tape-error)
		      (format nil "Retry writing distribution ~A ~D" unit-description reelno))
	(let* ((n-reels (length reels))
	       (title
		 (format nil "Distribution~:[~; tape~] for system~P ~A~:[~;, et al~]~
				   ~:[ (~A ~D of ~D)~]"
			      (eql use-disk :tape) (length systems) (first systems)
			      (second systems) (= n-reels 1) unit-description reelno n-reels))
	       (tape-access-path)
	       (directory (make-directory-string-for-tape reel systems use-disk))
	       (finished nil))
	  (unwind-protect
	      (progn
		(when (and path ( reelno 1))	; don't let it just take off on later reels
		  (format *query-io* "~2&")
		  (accept '((scl:member "OK"))
			  :prompt
			  (format nil "Mount a new ~A and type /"OK/" when ready"
				  device-description)
			  :provide-default nil)
		  (when (eql use-disk :floppy)	; need a new pathname for each succeeding flpy
		    (setq path (accept 'fs:pathname
				       :prompt " Pathname for new diskette"
				       :default path)))
		  (format *query-io* "~2&"))
		(setq tape-access-path (open-output-distribution-tape-access-path
					 reelno title use-disk path))
		(unless (eq *standard-output* *query-io*)
		  (format *standard-output* "~&~A ~D for system~P ~{~A~^, ~}:"
			  (string-capitalize unit-description) reelno
			  (length systems) systems))
		(write-string-to-tape tape-access-path directory
				      (format nil "Files on this ~A" device-description))
		(loop for ((path system-keyword compress-p)) being the array-elements of reel
		      do (ignore system-keyword)
			 (when (eq (send path :version) :newest)
			   (let ((truename (send path :truename nil)))
			     (when (and truename (neq (send truename :version) :newest))
			       (setq path (send path :new-version (send truename :version))))))
			 (unless (eq *standard-output* *query-io*)
			   (format *standard-output* "~&  ~A" path))
			 (write-file-to-tape
			   tape-access-path path
			   ;; the filename which goes onto the tape should not have
			   ;; any Version Control stuff in it
			   (format nil "File ~A" (flat-pathname-for-vc-file-branch path))
			   (make-distribution-writer-attributes path title)
			   compress-p))
		(setq finished t))		; i.e., everything complete without aborting
	    (when tape-access-path
	      (format *query-io* "~& ~A #~D written~:[~;, rewinding~].~%"
		      (string-capitalize unit-description) reelno (eql use-disk :tape))
	      (etypecase tape-access-path
		(embedded-length-distribution-tape-access-path	; real tape
		  (tape-access-path-close tape-access-path))
		(dummy-tape-access-path		                ; disk or floppy
		  (let ((mac-floppy-p
			  #+3600 nil
			  #+imach (sys:system-case
				    (vlm nil)
				    (otherwise
				      (typecase (symbol-value-in-instance
						  tape-access-path 'cl:stream)
					(mac-fs:mac-rpc-file-output-stream t)))))
			(path (symbol-value-in-instance tape-access-path 'cl:pathname)))
		    (tape-access-path-close
		      tape-access-path :abort (and (not finished) mac-floppy-p))
		    #+3600 (ignore path)
		    #+imach (sys:system-case
			      (vlm (ignore path))
			      (otherwise
				(when mac-floppy-p (mac-fs:eject-disk path))))))))))))))
(defun make-distribution-writer-attributes (path title)
  (list :reel-title title
	;; No VC pathnames on the tape, please
	:original-pathname (flat-pathname-for-vc-file-branch path)))

(defvar dist-tape-scratch-path "sys:patch;temp-imitation-tape.reel")
(defvar dist-mac-floppy-scratch-path "host:floppy:distribution.volume")

(defun open-output-distribution-tape-access-path (reelno title use-disk path)
  (setq use-disk (ecase use-disk		;dwim
		   ((:disk t) :disk)
		   ((:tape nil) :tape)
		   (:floppy :floppy)))
  (let* ((tape-format (if (neq use-disk :tape) :dummy-file
			:embedded-length-distribution))
	 (default (when (eq tape-format :dummy-file)
		    (pathname (format nil "~A-~D"
				      (case use-disk
					(:disk dist-tape-scratch-path)
					(:floppy dist-mac-floppy-scratch-path)) reelno))))
	 (prompt (when (eq tape-format :dummy-file)
		   (format
		     nil "Pathname for ~:[dummy tape~;diskette~] file, ~:*~:[reel~;volume~] ~D"
		     (eql use-disk :floppy) reelno)))
	 (path
	   (or path
	       (when (eq tape-format :dummy-file)
		 (accept 'fs:pathname :prompt prompt :default default)))))
    (attach-tape-access-path :direction :output :tape-format tape-format
			     :file-set-identifier title
			     :pathname path :tape-specs (list path))))

;; This takes care to not write VC pathname strings onto the tape
(defun make-directory-string-for-tape (files systems use-disk)
  (with-output-to-string (s)
    (sct:write-responsibility-comment s)
    (format s "(~%")
    (si:with-indentation (s 1)
      (format s ";;; Files on this ~:[volume~;tape~]:~2%(" (eql use-disk :tape))
      (si:with-indentation (s 1)
	(loop for first = t then nil
	      for ((path)) being the array-elements of files
	      do (format s "~:[~%~;~]~S"
		   first (string (flat-pathname-for-vc-file-branch path))))
	(format s ")"))
      (format s "~2%;;; Systems and their journal-directories on this ~:[volume~;tape~]:~2%("
	      (eql use-disk :tape))
      (si:with-indentation (s 1)
	(loop for system in systems
	      as true-system-p = (typep system 'sct:system)
	      do
	  (cond ((listp system)
		 ;; This clause is for use in experimenting with writing distribution
		 ;; strings for systems that you don't actually have loaded. -kmp 31-Jul-89
		 (format s "~S" system))
		(t (format s "(~A ~S ~S)"
			   ;; I can't believe the ~A above is not a bug, but I don't
			   ;; have time to track it down and be sure right now. -kmp 7-Sep-88
			   (sct:system-name system)
			   (and true-system-p (string (sct:system-journal-directory system)))
			   (and true-system-p (sct:system-patch-atom system))))))
	(format s ")"))
      (format s "~2%;;; Files on this ~:[volume~;tape~], with parent system for each:~2%("
	      (eql use-disk :tape))
      (si:with-indentation (s 1)
	(loop for first = t then nil
	      for ((path system)) being the array-elements of files
	      do (format s "~:[~%~;~](~S ~S)"
		   first (string (flat-pathname-for-vc-file-branch path)) system))
	(format s ")")))
    (format s ")")))

(defun write-distribution-on-tape (systems-and-versions use-disk
				   &rest keys &key version &allow-other-keys)
  (declare (arglist systems-and-versions use-disk &rest keys &allow-other-keys))
  (when (not (null version))
    (error "You cannot specify an explicit :VERSION here"))
  (multiple-value-bind (divided-plan length systems-included path)
      (apply #'make-distribution-plan-for-tape systems-and-versions use-disk keys)
    (when (plusp length)
      (format
	*query-io* "~&This distribution requires ~A ~:[reel~P of tape~;floppy disk~P~].~2%"
	      (string-upcase (format nil "~R" length)) (eql use-disk :floppy) length))
    (write-distribution-plan-files-to-tape systems-included divided-plan use-disk path)))
