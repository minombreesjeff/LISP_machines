;;; -*- Mode: LISP; Syntax: Zetalisp; Package: DIS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
    


;;; Functions for restoration from tape
(defun restore-distribution-from-tape (&key (use-disk nil) (skip-if-already-exists t)
					    (menu nil))
  (let* ((*another-tape-needed-action* :prompt)	; don't let it SIGNAL
	 (tape-access-path nil))
    (unwind-protect
	(progn
	  (setq tape-access-path (open-input-distribution-tape-access-path use-disk))
	  (multiple-value-bind (directory system-journals system-keyed-directory)
	      (restore-directory-from-tape tape-access-path)
	    (if (nlistp directory)
		(cond ((eq directory 'zl-user:distribution-tape)
		       (restore-rel6-distribution-from-tape
			 :use-disk use-disk :skip-if-already-exists skip-if-already-exists
			 :menu menu :access-path tape-access-path
			 :prologue-string system-journals))
		      (t
		       (sct:sct-warn
			   "~2& *** This tape is not written in distribution format.~2%")))
	      (setq directory
		    (select-restoration-via-menu (or system-keyed-directory directory) menu))
	      (unless (eq directory :abort)
		;; do this before writing files
		(establish-system-patch-file-pathnames system-journals)
		(loop with fileno = 1
		      for (file position system) in directory
		      as unknown-system-p = (null (sct:find-system-named system nil t))
		      as (sys journal-directory patch-atom)
			 = (find system system-journals :test #'string-equal :key #'first)
		      do
		  (with-stack-list (spec (sct:canonicalize-system-name sys) patch-atom
					 (and journal-directory
					      (fs:parse-pathname journal-directory)))
		    (let-if unknown-system-p ((fs:*bootstrapping-system-definition* spec))
		      (let* ((restore
			       (null (cdr (first (fs:multiple-file-plists (list file))))))
			     (restore-path
			       (if restore
				   (progn
				     (format t "~&  Restoring file #~D as ~A." position file)
				     (fs:parse-pathname file))
				 (if skip-if-already-exists
				     (progn
				       (format
					 t "~&   *** Skipping file #~D -- ~A already exists."
					 position file)
				       :nowhere)
				   (format
				     *query-io*
				     "~&  File #~D is supposed to be restored ~
				  to ~A, which already exists."
				     position file)
				   (let ((new-path
					   (accept '((token-or-type (:nowhere) fs:pathname))
						   :prompt "   Restore where instead?"
						   :default :nowhere)))
				     (when (typep new-path 'fs:pathname)	;dwim
				       (setq new-path (fs:merge-pathnames new-path file))
				       (format t "~&    Restoring file #~D as ~A."
					       position new-path))
				     new-path)))))
			(unless (= fileno position)
			  (loop for number upfrom fileno below position
				do number
				   (restore-file-from-tape tape-access-path :nowhere))
			  (setq fileno position))
			(unless (eq restore-path :nowhere)
			  (error-restart ((error) "Retry restoring file ~A" restore-path)
			    (with-open-file-case (stream restore-path
							 :direction :probe-directory
							 :if-does-not-exist :error)
			      ((fs:directory-not-found fs:file-not-found)
			       (fs:create-directories-recursively restore-path)))))
			(restore-file-from-tape tape-access-path restore-path)
			(incf fileno)))))))))
      (when tape-access-path
	(tape-access-path-close tape-access-path)))))

(defun restore-rel6-distribution-from-tape (&key (use-disk nil) (skip-if-already-exists t)
						 (menu nil) (prologue-string nil)
						 (access-path nil))
  #+3600
  (progn
    (sct:sct-warn "~2& *** This tape is written in Release 6 distribution format.~@
		     ~5TWe will try to apply the Release 6 distribution loader to it.~2%")
    (old-dis:load-distribution-tape :use-disk use-disk :menu menu
				    :skip-if-already-exists skip-if-already-exists
				    :prologue-string prologue-string
				    :access-path access-path))
  #+imach
  (sys:system-case
    (vlm
      (ignore use-disk skip-if-already-exists menu prologue-string access-path)
      (sct:sct-warn "~2& *** This tape is written in Release 6 distribution format.~@
		          ~5TIt cannot be reloaded in Open Genera.~2%"))
    (otherwise
      (sct:sct-warn "~2& *** This tape is written in Release 6 distribution format.~@
		         ~5TWe will try to apply the Release 6 distribution loader to it.~2%")
      (old-dis:load-distribution-tape :use-disk use-disk :menu menu
				      :skip-if-already-exists skip-if-already-exists
				      :prologue-string prologue-string
				      :access-path access-path))))

(defun select-restoration-via-menu (original-file-list menu-commanded)
  (loop with system-keyed = (listp (first original-file-list))
	with file-list = (loop for file in original-file-list
			       for count upfrom 1
			       collect (list file count))
	with restore-choice-alist =
	  `(("Select some files" :value :files
	     :documentation "Select some of the files in the distribution")
	    ,@(and system-keyed
		   '(("Select some systems" :value :systems
		      :documentation "Select some of the systems in the distribution")))
	    ("Do it" :value :do-it :documentation "Proceed to restore the files")
	    ("Abort" :value :abort :documentation "Abort this restore command"))
	with default-choice = (assoc "Do it" restore-choice-alist :test 'equal)
	for action = (if menu-commanded
			 (dw:menu-choose restore-choice-alist :center-p nil ; :momentary-p nil
					 :prompt "Restore from distribution"
					 :default default-choice :near-mode '(:point 800 400))
		       :do-it)
	do (select action
	     (:systems
	      (setq file-list
		    (let (choices
			  aborted
			  (system-alist
			    (loop with system-list
				  for ((nil system)) in file-list
				  do (if system-list (pushnew system system-list :test 'equal)
				       (setq system-list (list system)))
				  finally
				    (return (loop for system in (nreverse system-list)
						  collect
						    (list system system '((:yes t))))))))
		      (multiple-value-setq (choices aborted)
			(tv:multiple-choose
			  "  Systems to restore" system-alist '((:yes "Restore?"))
			  '(:mouse) 50))
		      (if aborted file-list
			(loop for item in file-list
			      as ((nil system)) = item
			      when (eq :yes (second (assoc system choices :test 'equal)))
				collect item)))))
	     (:files
	      (setq file-list
		    (let (choices
			  aborted
			  (pathname-alist
			    (loop with sub-file-list
				  for item in file-list
				  as (pathname) = item
				  do (push (list item
						 (format nil "~A~@[  (~A)~]"
							 (if system-keyed (first pathname)
							   pathname)
							 (when system-keyed
							   (second pathname)))
						 '((:yes t))) sub-file-list)
				  finally (return (nreverse sub-file-list)))))
		      (multiple-value-setq (choices aborted)
			(tv:multiple-choose
			  (if system-keyed "  Files to restore   (from system)"
			    "  Files to restore")
			  pathname-alist '((:yes "Restore?")) '(:mouse) 50))
		      (if aborted file-list (loop for (item val) in choices
						  when (eq val :yes) collect item)))))
	     (:do-it (return (if system-keyed
				 (loop for ((file system) position) in file-list
				       collect (list file position system))
			       file-list)))
	     (:abort (return :abort)))))

;;; For each system represented on the tape, record the patch-system pathname info,
;;; iff the system has not yet been defined in the world.  This assures that any logical
;;; patch pathnames that follow can be translated.
(defun establish-system-patch-file-pathnames (system-journal-alist)
  (loop for (sys-name journal patch-atom) in system-journal-alist doing
    (when (and journal patch-atom)
      (let* ((system-name (sct:canonicalize-system-name sys-name))
	     (journal-path (fs:parse-pathname journal))
	     (p-s-pathname (send journal-path :patch-file-pathname system-name
				 :explicit patch-atom :system-directory))
	     (resident-system (sct:find-system-named system-name nil t))
	     (resident-journal-directory (and resident-system
					      (sct:system-journal-directory resident-system))))
	(unless (eq resident-journal-directory journal-path)
	  (when (operation-handled-p journal-path :record-patch-system-translation)
	    (send journal-path :record-patch-system-translation
		  system-name p-s-pathname)))))))

(defun open-input-distribution-tape-access-path (&optional use-disk path)
  (setq use-disk (ecase use-disk		;dwim
		   ((:disk t) :disk)
		   ((:tape nil) :tape)
		   (:floppy :floppy)))
  (let* ((tape-format (if (neq use-disk :tape) :dummy-file
			:embedded-length-distribution))
	 (default (when (eq tape-format :dummy-file)
		    (pathname (format nil "~A-1" (case use-disk
						   (:disk dist-tape-scratch-path)
						   (:floppy dist-mac-floppy-scratch-path))))))
	 (prompt (when (eq tape-format :dummy-file)
		   (format nil "Pathname for ~:[dummy tape~;diskette~] file"
			   (eql use-disk :floppy))))
	 (path
	   (or path
	       (when (eq tape-format :dummy-file)
		 (accept 'fs:pathname :prompt prompt :default default)))))
    (attach-tape-access-path :direction :input :tape-format tape-format
			     :pathname path :tape-specs (list path))))

;; Returns list of things in the initial string record on the tape.  The two that
;; are defined presently are 1> list of files on the tape, 2> alist of systems and
;; their journal directories, for defining path-file pathnames at the receiving end.
(defun restore-directory-from-tape (tape-access-path)
  (let ((directory-string (read-string-from-tape tape-access-path)))
    (if (stringp directory-string)		;if not, it's not a rel-7 distribution tape
	(let ((interpreted-string
		(with-input-from-string (s directory-string)
		  (with-standard-io-environment
		    (read s)))))
	  (if (listp interpreted-string)	;if not, it's not a rel-7 distribution tape
	      (values-list interpreted-string)
	    (values interpreted-string directory-string)))  ;return value, let caller diagnose
      directory-string)))

(defun restore-file-from-tape (tape-access-path pathname)
  (if (eq pathname :nowhere)
      ;; skip the attribute pseudofile, and the file itself
      (progn (skip-file-from-tape tape-access-path)
	     (skip-file-from-tape tape-access-path))
    (let* ((attr-info (read-file-attributes-from-tape tape-access-path))
	   (props (zwei:some-plist (dis:file-attributes-info-file-system-attributes attr-info)
				   *properties-to-restore*)))
      (error-restart ((error) "Retry restoring file ~A" pathname)
	(catch-error-restart ((error) "Skip restoring file ~A" pathname)
	  (read-file-from-tape tape-access-path pathname attr-info props)))))
  pathname)

;;; Support for verifying a distribution on tape
(defun verify-distribution-from-tape (&key (use-disk nil))
  (let* ((*another-tape-needed-action* :prompt)	; don't let it SIGNAL
	 (tape-access-path nil))
    (unwind-protect
	(progn
	  (setq tape-access-path (open-input-distribution-tape-access-path use-disk))
	  (multiple-value-bind (directory system-journals system-keyed-directory)
	      (restore-directory-from-tape tape-access-path)
	    (if (nlistp directory)
		(cond ((eq directory 'zl-user:distribution-tape)
		       (sct:sct-warn
			   "~2& *** This tape is written in pre-Genera-7 distribution format.~
                             ~%Restoration for this kind of tape not yet implemented."))
		      (t
		       (sct:sct-warn
			   "~2& *** This tape is not written in distribution format.~2%")))
	      (setq directory
		    (select-restoration-via-menu (or system-keyed-directory directory) nil))
	      (unless (eq directory :abort)
		;; do this before writing files
		(establish-system-patch-file-pathnames system-journals)
		(loop with fileno = 1
		      for (file position system) in directory
		      as unknown-system-p = (null (sct:find-system-named system nil t))
		      as (sys journal-directory patch-atom)
			 = (find system system-journals :test #'string-equal :key #'first)
		      do
		  (with-stack-list (spec (sct:canonicalize-system-name sys) patch-atom
					 (and journal-directory
					      (fs:parse-pathname journal-directory)))
		    (let-if unknown-system-p ((fs:*bootstrapping-system-definition* spec))
		      (let* ((file-not-present
			       (null (cdr (first (fs:multiple-file-plists (list file))))))
			     (filesystem-path
			       (if file-not-present
				   (progn
				     (cerror "Skip file #~D (~A) and continue"
					     "File #~D, ~A, is missing from the file computer."
					     position file)
				     :nowhere)
				 (format
				   *query-io*
				   "~&  Comparing file #~D to ~A."
				   position file)
				 (fs:parse-pathname file))))
			(unless (= fileno position)
			  (loop for number upfrom fileno below position
				do number
				   (restore-file-from-tape tape-access-path :nowhere))
			  (setq fileno position))
			(compare-file-from-tape tape-access-path filesystem-path)
			(incf fileno)))))))))
      (when tape-access-path
	(tape-access-path-close tape-access-path)))))

(defun compare-file-from-tape (tape-access-path pathname)
  (cond ((eq pathname :nowhere)
	 ;; skip the attribute pseudofile, and the file itself
	 (skip-file-from-tape tape-access-path)
	 (skip-file-from-tape tape-access-path))
	(t
	 (let* ((attr-info (read-file-attributes-from-tape tape-access-path))
		(props (zwei:some-plist (dis:file-attributes-info-file-system-attributes attr-info)
					*properties-to-restore*))
		(tape-file-length (or (getf (file-attributes-info-file-system-attributes
					      attr-info)
					    ':length-in-bytes)
				      (error "No length recorded in attributes.")))
		(element-type (or (getf (file-attributes-info-file-system-attributes
					  attr-info)
					':element-type)
				  (error "No element type recorded in attributes.")))
		(compressed-type (getf (file-attributes-info-overhead-attributes attr-info)
				       :compression)))
	   (catch-error-restart ((error) "Skip comparing file ~A" pathname)
	     (cond ((eq element-type 'character)
		    (with-open-file (fs pathname
					:direction :input
					:element-type element-type)
		      (with-tape-file-stream (tape-access-path tape-stream)
			(cond (compressed-type
			       (let ((decompression-stream
				       (make-instance 'compression::buffered-decompressing-input-stream
						      :stream tape-stream
						      :forced-preamble-type compressed-type
						      :public-buffer-element-type `(cl:unsigned-byte 8))))
				 (using-resource (decoded-decompression-tape-stream si:epsilon-decoding-input-stream
										    decompression-stream)
				   (compare-streams fs decoded-decompression-tape-stream tape-file-length))
				 (compression::finalize-input decompression-stream)))
			      (t
			       (using-resource (decoded-tape-stream si:epsilon-decoding-input-stream
								    tape-stream)
				 (compare-streams fs decoded-tape-stream tape-file-length)))))))
		   (t
		    (with-open-file (fs pathname
					:direction :input
					:element-type element-type
					'fs:%return-binary-stream-for-character-file t)
		      (with-tape-file-stream (tape-access-path tape-stream)
			(let ((fs-byte-size (send fs :byte-size)))
			  (cond (compressed-type
				 (let ((decompression-stream
					 (make-instance 'compression::buffered-decompressing-input-stream
							:stream tape-stream
							:forced-preamble-type compressed-type
							:public-buffer-element-type `(cl:unsigned-byte 8))))
				   (if ( fs-byte-size 8.)
				       (compare-streams fs decompression-stream tape-file-length)
				       (compare-streams-16-to-8 fs decompression-stream tape-file-length))
				   (compression::finalize-input decompression-stream)))
				(t
				 (if ( fs-byte-size 8.)
				     (compare-streams fs tape-stream tape-file-length)
				     (compare-streams-16-to-8 fs tape-stream tape-file-length))))))
		      props
		      ;; --- do we need to compare properties here?  or first?
		      )))))))
  pathname)

;;; Compare an 8-bit file to the tape stream.  Stream-1 is the tape stream.
(defun compare-streams (stream-0 stream-1 length-1)
  (declare (ignore length-1))
  (stack-let* ((type (send stream-0 :element-type))
	       (block-size 1024)
	       (buffer-0 (make-array block-size :element-type type))
	       (buffer-1 (make-array block-size :element-type type))
	       (file-0 (send stream-0 :pathname)))
    (declare (sys:array-register buffer-0 buffer-1))
    (let ((index 0))
      #+slow
      (loop do
	(let ((a (send stream-0 :tyi))
	      (b (send stream-1 :tyi)))
	  (when (null a) (return))
	  (when (not (eql a b))
	    (cerror "Continue verifying the distribution"
		    "Mismatch at element ~D of ~A:~%~2TFile:  ~O~4TDistribution:  ~O"
		    element file-0 a b))))
      #-slow
      (loop named compare do
	(multiple-value-bind (count-0 eof-0)
	    (send stream-0 :string-in nil buffer-0)
	  (multiple-value-bind (count-1 eof-1)
	      (send stream-1 :string-in nil buffer-1)
	    (when (or (and eof-0 (not eof-1))
		      (and eof-0 eof-1 (< count-0 count-1)))
	      (cerror "Continue verifying the distribution"
		      "File ~A ended before its distribution copy did" file-0)
	      (return-from compare))
	    (when (or (and eof-1 (not eof-0))
		      (and eof-0 eof-1 (< count-1 count-0)))
	      (cerror "Continue verifying the distribution"
		      "The distribution copy of ~A ended before the file did" file-0)
	      (return-from compare))
	    (assert (= count-0 count-1))
	    (loop for i below count-0 do
	      (when (not (eq (aref buffer-0 i) (aref buffer-1 i)))
		(cerror "Continue verifying the distribution"
			"Mismatch at byte ~D of ~A:~%~2TFile:  ~O~4TDistribution:  ~O"
			(+ index i) file-0 (aref buffer-0 i) (aref buffer-1 i))
		(return-from compare)))
	    (incf index count-0)
	    (when (and eof-0 eof-1)
	      (return-from compare))))))))

;;; Compare a binary file to the tape stream.
;;; stream-0 is the 16-bit stream, stream-1 is the tape stream.
(defun compare-streams-16-to-8 (stream-0 stream-1 length-1)
  (stack-let* ((type (send stream-0 :element-type))
	       (block-size 1024)
	       (buffer-0 (make-array block-size :element-type type))
	       (buffer-1 (make-array (* 2 block-size) :element-type '(unsigned-byte 8)))
	       (buffer-1a (make-array block-size :element-type type :displaced-to buffer-1))
	       (file-0 (send stream-0 :pathname)))
    (declare (sys:array-register buffer-0 buffer-1 buffer-1a))
    (let ((length-0 (send stream-0 :length)))
      (when ( length-0 length-1)
	(error "~A is not the same length as the file on tape" file-0))
      (multiple-value-bind (blocks elements)
	  (floor length-0 block-size)
	(loop for j below blocks do
	  (send stream-0 :string-in nil buffer-0)
	  (send stream-1 :string-in nil buffer-1)
	  (loop for i below block-size do
	    (when (not (eq (aref buffer-0 i) (aref buffer-1a i)))
	      (cerror "Continue verifying the distribution"
		      "Mismatch at byte ~D of ~A:~%~2TFile:  ~O~4TDistribution:  ~O"
		      (+ (* j block-size) i) file-0 (aref buffer-0 i) (aref buffer-1a i)))))
	(send stream-0 :string-in nil buffer-0 0 elements)
	(send stream-1 :string-in nil buffer-1 0 (* 2 elements))
	(loop for i below elements do
	  (when (not (eq (aref buffer-0 i) (aref buffer-1a i)))
	    (cerror "Continue verifying the distribution"
		    "Mismatch at byte ~D of ~A:~%~2TFile:  ~O~4TDistribution:  ~O"
		    (+ (* blocks block-size) i) file-0
		    (aref buffer-0 i) (aref buffer-1a i))))))))
