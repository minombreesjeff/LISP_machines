;;; -*- Mode: LISP; Syntax: Zetalisp; Package: DIS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
    

(defun menu-specify-distributed-system (defaults prompt allow-multiple)
  (labels ((accept-spec (keyword defaults prompt)
	     (list (second (assoc keyword *distribution-defaults-ptype-alist*))
		   :prompt prompt :default (getf defaults keyword))))
    (multiple-value-bind (system version machine-types source-category
			  distribute-sources distribute-binaries
			  include-components include-journals
			  include-patches distribute-patch-sources
			  included-files-checkpoint use-cached-checkpoint
			  compress-files system-branch flatten-files)
	;; CAUTION: when adding parameters, the order of the variables in the list above
	;; must be the same as the order of the accepts in the DW:ACCEPT-VALUES below!
	(condition-case ()
	     (dw:accept-values
	       `((,(if allow-multiple '((cl:sequence ((or sct:system sct:subsystem))))
		     '((or sct:system sct:subsystem)))
		  :prompt "System" :default ,(getf defaults :default-system))
		 (((sct:system-version)) :prompt "Version"
		  :default ,(getf defaults :default-version))
		 ,(accept-spec :machine-types defaults "Machine types")
		 ,(accept-spec :source-category defaults "Source category")
		 ,(accept-spec :distribute-sources defaults "Distribute sources")
		 ,(accept-spec :distribute-binaries defaults "Distribute binaries")
		 ,(accept-spec :include-components defaults "Include components")
		 ,(accept-spec :include-journals defaults "Include journals")
		 ,(accept-spec :include-patches defaults "Include patches")
		 ,(accept-spec :distribute-patch-sources defaults "Include patch sources")
		 ,(accept-spec :included-files-checkpoint defaults "Checkpoint for included files")
		 ,(accept-spec :use-cached-checkpoint defaults "Use cached checkpoint")
		 ,(accept-spec :compress-files defaults "Compress files")
		 ,@(when (member :version-control *features*)
		     `(,(accept-spec :system-branch defaults "System branch")))
		 ,@(when (member :version-control *features*)
		     `(,(accept-spec :flatten-files defaults "Flatten VC files"))))
	       :own-window t
	       :near-mode '(:point 800 400)
	       :prompt prompt)
	   (dw::abort :abort))
      (if (eql system :abort) :abort
	(if (null system)
	    (progn (beep)
		   :abort)
	  (unless (member :version-control *features*)
	    (setq system-branch
		  (third (assoc :system-branch *distribution-defaults-ptype-alist*))
		  flatten-files
		  (third (assoc :flatten-files *distribution-defaults-ptype-alist*))))
	  (list system version (list :distribute-sources distribute-sources
				     :distribute-binaries distribute-binaries
				     :source-category source-category
				     :include-components include-components
				     :include-journals include-journals
				     :include-patches include-patches
				     :distribute-patch-sources distribute-patch-sources
				     :included-files-checkpoint included-files-checkpoint
				     :use-cached-checkpoint use-cached-checkpoint
				     :system-branch system-branch
				     :flatten-files flatten-files
				     :machine-types machine-types
				     :compress-files compress-files)))))))

(defun select-system-to-edit (systems-list prompt &optional all-too)
  (let ((systems-alist
	  (loop for system-spec in systems-list
		as name = (sct:system-pretty-name (first system-spec))
		collect (list name :value system-spec
			      :documentation
			      (format nil "~A the specifications for system ~A"
				      prompt name)))))
    (when all-too
      (setq systems-alist
	    (nconc (ncons (list "** All **" :value :all :documentation
				(format nil "~A the specifications for all systems" prompt)))
		   systems-alist)))
    (dw:menu-choose systems-alist :center-p nil
		    :prompt (format nil "Select a system to ~A" prompt)
		    :near-mode '(:point 800 400)
		    :default (first (last systems-alist)))))
