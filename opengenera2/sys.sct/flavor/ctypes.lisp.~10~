;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: FLAVOR -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains the standard built-in method-combination types
;;; This includes all the method-combination types defined by the old
;;; flavor system, just to prove they can be done, even the three that no one uses.


;;; The simple types

(DEFINE-SIMPLE-METHOD-COMBINATION :LIST LIST)
(DEFINE-SIMPLE-METHOD-COMBINATION :PROGN PROGN T)
(DEFINE-SIMPLE-METHOD-COMBINATION :APPEND APPEND T)
(DEFINE-SIMPLE-METHOD-COMBINATION :NCONC NCONC T)
(DEFINE-SIMPLE-METHOD-COMBINATION :AND AND T)
(DEFINE-SIMPLE-METHOD-COMBINATION :OR OR T)
(DEFINE-SIMPLE-METHOD-COMBINATION :MIN MIN T)
(DEFINE-SIMPLE-METHOD-COMBINATION :MAX MAX T)
(DEFINE-SIMPLE-METHOD-COMBINATION :SUM + T)

;;; The default combination type
(DEFINE-METHOD-COMBINATION :DAEMON (&OPTIONAL (ORDER ':MOST-SPECIFIC-FIRST))
			   ((BEFORE "before" :EVERY :MOST-SPECIFIC-FIRST (:BEFORE))
			    (PRIMARY "primary" :FIRST ORDER :DEFAULT)
			    (AFTER "after" :EVERY :MOST-SPECIFIC-LAST (:AFTER)))
  `(MULTIPLE-VALUE-PROG2
     ,(CALL-COMPONENT-METHODS BEFORE)
     ,(CALL-COMPONENT-METHOD PRIMARY)
     ,(CALL-COMPONENT-METHODS AFTER)))

; :DAEMON-WITH-OVERRIDE combination
; This is the same as :DAEMON (the default), except that :OVERRIDE type methods
; are combined with the :BEFORE-primary-:AFTER methods in an OR.  This allows
; overriding of the main methods function.  For example, a combined method as follows
; might be generated: (OR (FOO-OVERRIDE-BAR-METHOD) (PROGN (FOO-BEFORE-BAR-METHOD)))
(DEFINE-METHOD-COMBINATION :DAEMON-WITH-OVERRIDE (&OPTIONAL (ORDER ':MOST-SPECIFIC-FIRST))
			   ((OVERRIDE "override" :EVERY ORDER (:OVERRIDE))
			    (BEFORE "before" :EVERY :MOST-SPECIFIC-FIRST (:BEFORE))
			    (PRIMARY "primary" :FIRST ORDER :DEFAULT)
			    (AFTER "after" :EVERY :MOST-SPECIFIC-LAST (:AFTER)))
  `(OR ,(CALL-COMPONENT-METHODS OVERRIDE :OPERATOR 'OR)
       (MULTIPLE-VALUE-PROG2
	 ,(CALL-COMPONENT-METHODS BEFORE)
	 ,(CALL-COMPONENT-METHOD PRIMARY)
	 ,(CALL-COMPONENT-METHODS AFTER))))

; Macro that defines things like :DAEMON-WITH-OR.
;  There are two stragegies:
; :PRIMARY-P T ->  :operator, primary, and daemons.
; :PRIMARY-P NIL -> :operator and daemons. 
; In the former case, the methods that are operator combined require
;  the :operator keyword to identify them.  Default methods interact
;  with primary methods.
; In the later case, the methods that are operator combined do not require
;  the :operator keyword to identify them, and the default method is combined
;  in iff there are none of them.
; :SINGLE-ARG-IS-VALUE works like the corresponding argument to 
;  DEFINE-SIMPLE-METHOD-COMBINATION, and is used if there is one and only one
;  method altogether.

(DEFMACRO DEFINE-DAEMON-METHOD-COMBINATION (NAME OPERATOR &KEY SINGLE-ARG-IS-VALUE
					    (PRETTY-NAME (STRING-DOWNCASE NAME))
					    PRIMARY-P)
  (WHEN (SYMBOLP OPERATOR)			;Could be a LAMBDA
    (COMPILER:FUNCTION-REFERENCED OPERATOR `(:PROPERTY ,NAME METHOD-COMBINATION)))
  `(DEFINE-METHOD-COMBINATION ,NAME (&OPTIONAL (ORDER ':MOST-SPECIFIC-FIRST))
     ((BEFORE "before" :EVERY :MOST-SPECIFIC-FIRST (:BEFORE))
      ,@(LIST
	  (IF PRIMARY-P
	      `(METHODS ,PRETTY-NAME :EVERY ORDER (,NAME))
	      `(METHODS ,PRETTY-NAME :EVERY ORDER () (,NAME)
			:DEFAULT)))
      ,@(LIST
	  (IF PRIMARY-P
	      `(PRIMARY "primary" :FIRST ORDER :DEFAULT)
	      NIL))
      (AFTER "after" :EVERY :MOST-SPECIFIC-LAST (:AFTER)))
     (:ORDER BEFORE METHODS AFTER)
     (WHEN PRIMARY
       (SETQ METHODS (APPEND METHODS (LIST PRIMARY))))
     `(MULTIPLE-VALUE-PROG2
	,(CALL-COMPONENT-METHODS BEFORE)
	,,(IF SINGLE-ARG-IS-VALUE
	      `(IF (= 1 (+ (LENGTH BEFORE) (LENGTH METHODS) (LENGTH AFTER)))
		   (CALL-COMPONENT-METHOD (FIRST (OR BEFORE METHODS AFTER)))
		   (CALL-COMPONENT-METHODS METHODS :OPERATOR ',OPERATOR))
	      `(CALL-COMPONENT-METHODS METHODS :OPERATOR ',OPERATOR))
	,(CALL-COMPONENT-METHODS AFTER))))

; :DAEMON-WITH-OR combination
; This is the same as :DAEMON (the default), except that :OR type methods
; are combined with the primary methods inside an OR, and used in place of
; the primary method in :DAEMON type combination.
; For example, the following combined method might be generated:
; (PROGN (FOO-BEFORE-BAR-METHOD)
;	 (MULTIPLE-VALUE-PROG1
;	       (OR (FOO-OR-BAR-METHOD)
;		   (BAZ-OR-BAR-METHOD)
;		   (BUZZ-PRIMARY-METHOD))
;	       (FOO-AFTER-BAR-METHOD)))
(DEFINE-METHOD-COMBINATION :DAEMON-WITH-OR (&OPTIONAL (ORDER ':MOST-SPECIFIC-FIRST))
			   ((BEFORE "before" :EVERY :MOST-SPECIFIC-FIRST (:BEFORE))
			    (OR "or-with-primary" :EVERY ORDER (:OR))
			    (PRIMARY "primary" :FIRST ORDER :DEFAULT)
			    (AFTER "after" :EVERY :MOST-SPECIFIC-LAST (:AFTER)))
  ;; The primary method just gets stuck on the end of the OR methods
  (:ORDER BEFORE OR AFTER)
  (WHEN PRIMARY
    (SETQ OR (APPEND OR (LIST PRIMARY))))
  `(MULTIPLE-VALUE-PROG2
     ,(CALL-COMPONENT-METHODS BEFORE)
     ,(CALL-COMPONENT-METHODS OR :OPERATOR 'OR)
     ,(CALL-COMPONENT-METHODS AFTER)))

; :DAEMON-WITH-AND combination
; This is the same as :DAEMON (the default), except that :AND type methods
; are combined with the primary methods inside an AND, and used in place of
; the primary method in :DAEMON type combination.
; For example, the following combined method might be generated:
; (PROGN (FOO-BEFORE-BAR-METHOD)
;	 (MULTIPLE-VALUE-PROG1
;	       (AND (FOO-OR-BAR-METHOD)
;		    (BAZ-OR-BAR-METHOD)
;		    (BUZZ-PRIMARY-METHOD))
;	       (FOO-AFTER-BAR-METHOD)))
(DEFINE-METHOD-COMBINATION :DAEMON-WITH-AND (&OPTIONAL (ORDER ':MOST-SPECIFIC-FIRST))
			   ((BEFORE "before" :EVERY :MOST-SPECIFIC-FIRST (:BEFORE))
			    (AND "and-with-primary" :EVERY ORDER (:AND))
			    (PRIMARY "primary" :FIRST ORDER :DEFAULT)
			    (AFTER "after" :EVERY :MOST-SPECIFIC-LAST (:AFTER)))
  ;; The primary method just gets stuck on the end of the AND methods
  (:ORDER BEFORE AND AFTER)
  (WHEN PRIMARY
    (SETQ AND (APPEND AND (LIST PRIMARY))))
  `(MULTIPLE-VALUE-PROG2
     ,(CALL-COMPONENT-METHODS BEFORE)
     ,(CALL-COMPONENT-METHODS AND :OPERATOR 'AND)
     ,(CALL-COMPONENT-METHODS AFTER)))

(DEFINE-METHOD-COMBINATION :TWO-PASS (&OPTIONAL (ORDER ':MOST-SPECIFIC-FIRST))
			   ((FIRST "first-pass" :EVERY ORDER :DEFAULT)
			    (SECOND "after" :EVERY :MOST-SPECIFIC-LAST (:AFTER)))
  `(MULTIPLE-VALUE-PROG1
     ,(CALL-COMPONENT-METHODS FIRST)
     ,(CALL-COMPONENT-METHODS SECOND)))

;; NOTES: Old flavor system allowed :BEFORE and :AFTER daemons here, but that was
;;	  not used and not documented.  We disallow them, because it would be confusing.
;;	  :OTHERWISE was not a reserved word in OFS, but it is now.
;;	  The other reserved words are :CASE-DOCUMENTATION and :WHICH-OPERATIONS.
(DEFINE-METHOD-COMBINATION :CASE (&OPTIONAL (ORDER ':MOST-SPECIFIC-FIRST))
	((CASE-DOCUMENTATION "case-documentation" :FIRST ORDER (:CASE-DOCUMENTATION))
	 (WHICH-OPERATIONS "which-operations" :FIRST ORDER (:WHICH-OPERATIONS))
	 (OTHERWISE "otherwise" :FIRST ORDER (:OTHERWISE))
	 (CASES "case ~S" :REMOVE-DUPLICATES ORDER (*)))
  (:ORDER CASES CASE-DOCUMENTATION WHICH-OPERATIONS OTHERWISE)
  (:ARGLIST IGNORE SUBTYPE &REST ARGS)
  (:METHOD-TRANSFORMER
    ;; The cases methods receive funny arguments, and the arguments may be different for
    ;; each case, so don't bother validating them.
    (:INHIBIT-CHECKING T))

  (LET ((ALIST (LOOP FOR CASE IN CASES
		     COLLECT (LIST (FIRST (METHOD-OPTIONS CASE)) CASE))))
    `(CASE ,SUBTYPE
       ,@(LOOP FOR (SUBTYPE METHOD) IN ALIST
	       COLLECT `((,SUBTYPE)
			 ,(CALL-COMPONENT-METHOD METHOD :APPLY ARGS)))
       ((:CASE-DOCUMENTATION)
	,(IF CASE-DOCUMENTATION
	     (CALL-COMPONENT-METHOD CASE-DOCUMENTATION :APPLY ARGS)
	     `(GET-CASE-DOCUMENTATION (FIRST ,ARGS) ',ALIST)))
       ((:WHICH-OPERATIONS)
	,(IF WHICH-OPERATIONS
	     (CALL-COMPONENT-METHOD WHICH-OPERATIONS :APPLY ARGS)
	     `(VALUES ',(MAPCAR #'CAR ALIST) ',(NOT (NULL OTHERWISE)))))
       (OTHERWISE
	,(IF OTHERWISE
	     (CALL-COMPONENT-METHOD OTHERWISE)
	     `(CASE-METHOD-COMBINATION-MISSING-METHOD SELF ',GENERIC ,SUBTYPE ,ARGS))))))

(DEFUN GET-CASE-DOCUMENTATION (SUBTYPE ALIST)
  (LET ((ELEM (ASSOC SUBTYPE ALIST)))
    (AND ELEM
	 (DOCUMENTATION (SECOND ELEM)))))

;;; Updated to cope with properly with generic functions as well as messages.
;;; -- ACW 10/07/92 15:02:49
(DEFUN CASE-METHOD-COMBINATION-MISSING-METHOD (OBJECT GENERIC SUBTYPE ARGS)
  (SIGNAL-PROCEED-CASE ((ARG) 'UNCLAIMED-MESSAGE-CASE :OBJECT OBJECT
						      :MESSAGE GENERIC
						      :SUB-MESSAGE SUBTYPE
						      :ARGUMENTS (COPY-LIST ARGS))
    (:NEW-SUB-MESSAGE (IF (MESSAGE-P GENERIC)
			  (LEXPR-SEND OBJECT GENERIC ARG ARGS)
			  (APPLY GENERIC OBJECT ARG ARGS)))
    (:NEW-MESSAGE (LEXPR-SEND OBJECT ARG SUBTYPE ARGS))
    (:NEW-FUNCTION (APPLY ARG OBJECT SUBTYPE ARGS))))

; :INVERSE-LIST combination
; No typed-methods allowed, other than :INVERSE-LIST.
; Apply each method to an element of the list.  Given
; the result of a :LIST-combined method with the same ordering, and corresponding
; method definitions, the result that emerged from each component flavor gets handed
; back to that same flavor.  The combined-method returns no particular value.
;--- Take no parameters, since the old one ignored its parameter, perhaps accidentally
;--- Optimize out the last CDR operation, since the old one tried to (but it had a bug!)
;--- Don't generate code to check the length of the list, since the old one didn't.
(DEFINE-METHOD-COMBINATION :INVERSE-LIST ()
			   ((METHODS "inverse-list" :EVERY :MOST-SPECIFIC-FIRST
						    () (:INVERSE-LIST) :DEFAULT))
  (:ARGLIST IGNORE LIST)
  (:METHOD-TRANSFORMER
    ;; Each method receives a single argument, regardless
    (:GENERIC-METHOD-ARGLIST `(LIST-ELEMENT)))

  `(LET ((LIST ,LIST))
     ,@(LOOP FOR (METHOD . REST) ON METHODS
	     COLLECT (CALL-COMPONENT-METHOD METHOD :ARGLIST `((FIRST LIST)))
	     WHEN REST
	       COLLECT `(SETQ LIST (CDR LIST)))))


; :PASS-ON combination
; The values from the individual methods are the arguments to the next one;
; the values from the last method are the values returned by the combined
; method.  Format is (:METHOD-COMBINATION :PASS-ON ORDER ARGLIST...)
; ORDER is :MOST-SPECIFIC-LAST or :MOST-SPECIFIC-FIRST.  ARGLIST can have &AUX and &REST.
; Now uses SCL:DESTRUCTURING-BIND so it checks for right number of args.
(DEFINE-METHOD-COMBINATION :PASS-ON (ORDER &REST ARGLIST)
			   ((METHODS "pass-on" :EVERY ORDER () (:PASS-ON) :DEFAULT))
  (:ARGLIST IGNORE &REST ARGS)
  (:METHOD-TRANSFORMER
    ;; Make sure arglist for methods agrees with what was declared here
    ;; Of course it's a crock that ARGLIST comes from the :METHOD-COMBINATION declaration
    ;; rather than from the arglist in the DEFGENERIC.  Compatibility with OFS.
    (:GENERIC-METHOD-ARGLIST ARGLIST))

  ;; Convert the arglist into the variables to be bound to the values returned
  ;; by each method and the arguments to be passed to the next method.
  (MULTIPLE-VALUE-BIND (VARIABLES APPLY LAMBDA-LIST)
      (LT:LAMBDA-LIST-ARGUMENTS ARGLIST)
    `(DESTRUCTURING-BIND ,LAMBDA-LIST ,ARGS
       ,@(LOOP FOR (METHOD . REST) ON METHODS
	       AS FORM = (CALL-COMPONENT-METHOD METHOD :ARGLIST VARIABLES :APPLY APPLY)
	       COLLECT (IF REST `(MULTIPLE-VALUE-SETQ ,VARIABLES ,FORM) FORM)))))
