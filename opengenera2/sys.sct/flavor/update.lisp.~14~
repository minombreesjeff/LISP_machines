;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Tool to help convert sources in response to new flavor system syntax changes
;;; This can be loaded by users who need it, it won't be loaded by default


(DEFVAR *NON-KEYWORD-MESSAGES* NIL "All nonkeyword messages found so far.")

;Only does top-level forms
;This bletcherous code should not be mistaken for a paragon of good programming practice!
(DEFUN UPDATE-FLAVOR-SYNTAX-IN-REGION (REPORT-STREAM FROM-BP &OPTIONAL TO-BP IN-ORDER-P)
  (GET-INTERVAL FROM-BP TO-BP IN-ORDER-P)
  (WITH-INTERVAL-WRITE-LOCKED (FROM-BP TO-BP T)
    (WITH-EVALUATION-CONTEXT
      (LET ((SI:**BACKQUOTE-COUNT** 100)		;Allow reading commas
	    (QUERY-IO				;Queries in appropriate window
	      (IF (EQ REPORT-STREAM *TYPEIN-WINDOW*) REPORT-STREAM *TYPEOUT-WINDOW*)))
	(MACROLET ((MATCH (STRING)
			  `(AND (%STRING-EQUAL LINE 0 ,STRING 0 ,(STRING-LENGTH STRING))
				(OR (= (LINE-LENGTH LINE) ,(STRING-LENGTH STRING))
				    ( (LIST-SYNTAX (AREF LINE ,(STRING-LENGTH STRING)))
				       LIST-ALPHABETIC))))
		   (PARSE-SUBFORM ((N OBJECT START-BP END-BP) &BODY BODY)
		     `(BLOCK PARSE-SUBFORM
			(LET* ((,END-BP (FORWARD-SEXP (CREATE-BP LINE 1) ,(1+ N)))
			       (,START-BP (FORWARD-SEXP ,END-BP -1)))
			  (WHEN (OR (SEARCH ,START-BP "#+" NIL NIL NIL ,END-BP)
				    (SEARCH ,START-BP "#-" NIL NIL NIL ,END-BP))
			    (FORMAT REPORT-STREAM
				"~2&Cannot parse #+ or #- in ~A so it will be ignored"
			      (STRING-INTERVAL ,START-BP ,END-BP T))
			    (RETURN-FROM PARSE-SUBFORM))
			  (LET ((,OBJECT (READ-FROM-INTERVAL ,START-BP ,END-BP)))
			    ,@BODY))))
		   (READ-FROM-INTERVAL (START-BP END-BP)
		     `(IF (EQ (BP-LINE ,START-BP) (BP-LINE ,END-BP))
			  (READ-FROM-STRING (BP-LINE ,START-BP)
					    'SI:NO-EOF-OPTION
					    (BP-INDEX ,START-BP)
					    (BP-INDEX ,END-BP))
			(READ (OPEN-INTERVAL-STREAM ,START-BP ,END-BP T)))))
	  (LINEMAP (FROM-BP TO-BP)
	    (COND ((MATCH "(DEFSELECT-METHOD")
		   ;; Just leave it in the source, not much we can do about it.
		   (FORMAT REPORT-STREAM
		       "~2&D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")WARNING0: DEFSELECT-METHOD is no longer supported."))
		  ((MATCH "(DEFUN-METHOD")
		   ;; This is easy, just translate it into defun-in-flavor
		   (PARSE-SUBFORM (1 FUNCTION START-FUNCTION END-FUNCTION)
		     (PARSE-SUBFORM (2 FLAVOR START-FLAVOR END-FLAVOR)
		       (WITH-UNDO-SAVE-SIMPLE ((CREATE-BP LINE 1) END-FLAVOR T)
			 (INSERT END-FLAVOR #/))
			 (INSERT START-FUNCTION #/()
			 (CASE-REPLACE (CREATE-BP LINE 1) (CREATE-BP LINE 13)
				       "defun-in-flavor" T))
		       (FORMAT REPORT-STREAM "~2&Translated (DEFUN-METHOD ~S ~S ...~@
					         to (DEFUN-IN-FLAVOR (~S ~S) ..."
			 FUNCTION FLAVOR FUNCTION FLAVOR))))
		  ((MATCH "(SI:DEFINE-SIMPLE-METHOD-COMBINATION")
		   ;; It's global now
		   (DELETE-INTERVAL (CREATE-BP LINE 1) (CREATE-BP LINE 4) T)
		   (FORMAT REPORT-STREAM "~2&Translated SI:DEFINE-SIMPLE-METHOD-COMBINATION ~
					  to DEFINE-SIMPLE-METHOD-COMBINATION"))
		  ((OR (MATCH "(DEFMETHOD") (MATCH "(DEFWRAPPER") (MATCH "(DEFWHOPPER")
		       (MATCH "(DEFWHOPPER-SUBST"))
		   ;; Assume second element of method name is always a keyword in old syntax
		   ;; and never a keyword in new syntax.  If already seems to be translated
		   ;; to new syntax, leave it alone.  If neither first nor second element
		   ;; is a keyword, next heuristic is to see if first element is a flavor
		   ;; name (either in the environment or in the editor).
		   (PARSE-SUBFORM (1 NAME START END)
		    (WHEN (AND (LISTP NAME) ( (LENGTH NAME) 2)
			       (OR (KEYWORDP (SECOND NAME))
				   (AND (SYMBOLP (FIRST NAME))
					(NOT (KEYWORDP (FIRST NAME)))
					(OR (GETL (FIRST NAME) '(SI:FLAVOR FLAVOR:FLAVOR))
					    (ASSQ 'DEFFLAVOR
						  (GET (FIRST NAME) 'ZMACS-BUFFERS))))
				   (PROGN
				     (PARSE-SUBFORM (0 OPERATOR S E)
				       (FORMAT REPORT-STREAM
					   "~2&Ignoring (~S ~S ...~@
					       because it seems to be updated already."
					 OPERATOR NAME))
				     NIL)))
		      (LET* ((FLAVOR (FIRST NAME))
			     (OPTION (AND (CDDR NAME)
					  (NEQ (SECOND NAME) ':CASE)	;new syntax
					  (SECOND NAME)))
			     (MESSAGE (IF (CDDR NAME) (THIRD NAME) (SECOND NAME)))
			     (MORE (CDDDR NAME))
			     (NEW-NAME `(,MESSAGE ,FLAVOR ,@(AND OPTION `(,OPTION)) ,@MORE))
			     (BP1 (FORWARD-CHAR START 1))	;Start of flavor
			     (BP2 (FORWARD-SEXP BP1))		;End of flavor
			     (BP3 (FORWARD-OVER *WHITESPACE-CHARS* BP2))	;Start of ...
			     (BP4 (FORWARD-SEXP BP3))		; ... end of message/option
			     (BP5 (AND (> (LENGTH NAME) 2)	;Start of message
				       (FORWARD-OVER *WHITESPACE-CHARS* BP4)))
			     (BP6 (AND BP5 (FORWARD-SEXP BP5)))	;End of message
			     (BP7 (FORWARD-CHAR END -1))	;End of options
			     (FLAVOR-STRING (STRING-INTERVAL BP1 BP2 T))
			     (MESSAGE-STRING (IF BP5 (STRING-INTERVAL BP5 BP6 T)
					       (STRING-INTERVAL BP3 BP4 T)))
			     (OPTION-STRING (AND BP5
						 (IF OPTION
						     (STRING-APPEND
						       (STRING-INTERVAL BP3 BP4 T)
						       (STRING-INTERVAL BP6 BP7 T))
						   (STRING-INTERVAL
						     (FORWARD-OVER *WHITESPACE-CHARS* BP6)
						     BP7 T)))))
			(DELETE-INTERVAL BP1 BP7 T)
			(INSERT-MOVING BP1 MESSAGE-STRING)
			(INSERT-MOVING BP1 #\SPACE)
			(INSERT-MOVING BP1 FLAVOR-STRING)
			(WHEN OPTION-STRING
			  (INSERT-MOVING BP1 #\SPACE)
			  (INSERT-MOVING BP1 OPTION-STRING))
			(PARSE-SUBFORM (0 OPERATOR S E)
			  (FORMAT REPORT-STREAM "~2&Translated (~S ~S ...~%to (~S ~S ..."
			    OPERATOR NAME OPERATOR NEW-NAME)
			  (UNLESS (KEYWORDP MESSAGE)
			    (CL:PUSHNEW MESSAGE *NON-KEYWORD-MESSAGES* :TEST #'EQ)
			    (FORMAT REPORT-STREAM "~%1WARNING0: ~S is not a keyword, so it will
be interpreted by ~S as a generic function name rather than a message name,
and should be invoked by calling it rather than by SENDing it."
			      MESSAGE OPERATOR)))))))
		  ((MATCH "(DEFFLAVOR")
		   ;; Scan the defflavor options
		   (LOOP WITH NAME = (LET ((BP1 (FORWARD-SEXP (CREATE-BP LINE 1))))
				       (READ-FROM-INTERVAL BP1 (FORWARD-SEXP BP1)))
			 FOR END-BP = (FORWARD-SEXP (CREATE-BP LINE 1) 5 NIL 0 NIL NIL T)
				    THEN (FORWARD-SEXP END-BP 1 NIL 0 NIL NIL T)
			 WHILE END-BP
			 AS START-BP = (FORWARD-SEXP END-BP -1)
			 AS OPTION = (READ-FROM-INTERVAL START-BP END-BP) WITH (TEM BP) DO
		     (WHEN (SETQ TEM (CDR (ASSQ (IF (LISTP OPTION) (CAR OPTION) OPTION)
						;;--- Close but not exact, since this doesn't
						;;--- make them locatable too.
						'((:OUTSIDE-ACCESSIBLE-INSTANCE-VARIABLES .
						   :WRITABLE-INSTANCE-VARIABLES)
						  (:ACCESSOR-PREFIX . :CONC-NAME)
						  (:SELECT-METHOD-ORDER . :METHOD-ORDER)))))
		       (SETQ BP (FORWARD-CHAR START-BP	;after the colon
					      (IF (LISTP OPTION) 2 1)))
		       (CASE-REPLACE BP (FORWARD-SEXP BP) (STRING-DOWNCASE TEM) T)
		       (SETQ END-BP (FORWARD-SEXP START-BP))
		       (FORMAT REPORT-STREAM "~2&Translated DEFFLAVOR ~S option ~S to ~S"
			 NAME (IF (LISTP OPTION) (CAR OPTION) OPTION) TEM))
		     (WHEN (AND (LISTP OPTION) (EQ (CAR OPTION) ':METHOD-COMBINATION)
				(LISTP (CADR OPTION))
				( (LENGTH (CADR OPTION)) 3)
				(SYMBOLP (CAADR OPTION))
				(GET (CAADR OPTION) 'FLAVOR::METHOD-COMBINATION))
		       ;; Identified old syntax: translate to new syntax
		       (LET ((NEW-OPTION
			       (CONS ':METHOD-COMBINATION
				     (LOOP FOR (TYPE ORDER . MESSAGES) IN (CDR OPTION)
					   NCONC
					     (LOOP FOR MESSAGE IN MESSAGES
						   COLLECT MESSAGE
						   COLLECT
						     (IF (AND (EQ ORDER ':BASE-FLAVOR-LAST)
							      (MEMQ TYPE '(:DAEMON
									    :DAEMON-WITH-OVERRIDE
									    :DAEMON-WITH-OR
									    :DAEMON-WITH-AND
									    :TWO-PASS
									    :CASE :LIST :PROGN
									    :APPEND :NCONC
									    :AND :OR)))
							 TYPE
						       (LIST TYPE
							     (OR (CDR (ASSQ ORDER
									    '((:BASE-FLAVOR-LAST . :MOST-SPECIFIC-FIRST)
									      (:BASE-FLAVOR-FIRST . :MOST-SPECIFIC-LAST))))
								 ORDER))))))))
			 (SETQ BP (FORWARD-OVER *WHITESPACE-CHARS*
						(FORWARD-SEXP START-BP 1 NIL -1)))
			 (DELETE-INTERVAL BP (FORWARD-CHAR END-BP -1) T)
			 (LET ((S (OPEN-INTERVAL-STREAM BP BP))
			       (INDENTATION (FLOOR (BP-INDENTATION BP) (FONT-SPACE-WIDTH))))
			   (LOOP FOR (X Y) ON (CDR NEW-OPTION) BY 'CDDR AS FIRST = T THEN NIL DO
			     (UNLESS FIRST
			       (TERPRI S)
			       (SEND S :INCREMENT-CURSORPOS INDENTATION))
			     (PRIN1 X S)
			     (TYO #\SP S)
			     (PRIN1 Y S)))
			 (SETQ END-BP (FORWARD-SEXP START-BP))
			 (FORMAT REPORT-STREAM "~2&Translated DEFFLAVOR ~S option ~S~%to ~S"
			   NAME OPTION NEW-OPTION)))
		     ;; Klux kludgorum rex
		     (WHEN (AND (LISTP OPTION) (EQ (CAR OPTION) ':INCLUDED-FLAVORS))
		       (COND ((FQUERY '(:CHOICES (((T "Required-flavors") #/R)
						  ((NIL "Append to components") #/A)))
				  "Do you want to make the :INCLUDED-FLAVORS of ~S be~@
				  :REQUIRED-FLAVORS or append them to the other components? "
				NAME)
			      (FORMAT REPORT-STREAM
				  "~2&Translated DEFFLAVOR ~S option ~S~%to ~S"
				NAME ':INCLUDED-FLAVORS ':REQUIRED-FLAVORS)
			      ;; :REQUIRED-FLAVORS option in there twice is allowed.
			      (SETQ BP (FORWARD-CHAR START-BP 1))
			      (CASE-REPLACE BP (FORWARD-SEXP BP) ":required-flavors" T)
			      (SETQ END-BP (FORWARD-SEXP START-BP)))
			     (T
			      (FORMAT REPORT-STREAM
				  "~2&Translated DEFFLAVOR ~S option ~S~@
					to normal component flavors"
				NAME ':INCLUDED-FLAVORS)
			      (SETQ BP (FORWARD-SEXP (CREATE-BP LINE 1) 4))
			      (LET ((S (OPEN-INTERVAL-STREAM (FORWARD-CHAR BP -1) BP)))
				(DOLIST (COMPONENT (CDR OPTION))
				  (TYO #\SP S)
				  (PRIN1 COMPONENT S)))
			      (DELETE-INTERVAL START-BP END-BP T)
			      (WHEN (LINE-BLANK-P (BP-LINE START-BP))
				(DELETE-INTERVAL (BEG-LINE START-BP) (BEG-LINE START-BP 1))
				(SETQ START-BP (FORWARD-CHAR (BEG-LINE START-BP) -1)))
			      (SETQ END-BP START-BP)))
		       ;;--- Maybe offer to call report-method-differences?
		       ))))))))))


;Buffer used to hold typeout of this
(DEFINE-SPECIAL-BUFFER-TYPE UPDATE-FLAVOR-SYNTAX-LOG-BUFFER (VICTIM-NAME)
			    (SPECIAL-PURPOSE-BUFFER)
			    UPDATE-FLAVOR-SYNTAX-LOG "Update-Flavor-Syntax-Log"
	:SETTABLE-INSTANCE-VARIABLES
	(:BUFFER-INIT-OPTIONS :SET-VICTIM-NAME))

;Reusable when name is the same
(DEFMETHOD (:REUSABLE UPDATE-FLAVOR-SYNTAX-LOG-BUFFER) (SETS)
  (EQUAL (CL:GETF SETS ':SET-VICTIM-NAME) VICTIM-NAME))

;Contents comes from typeout; delete previous contents when told to revert
(DEFMETHOD (:REVERT UPDATE-FLAVOR-SYNTAX-LOG-BUFFER) ()
  (DELETE-INTERVAL SELF))

;Description for List Buffers: try to be useful
(DEFMETHOD (:DESCRIPTION UPDATE-FLAVOR-SYNTAX-LOG-BUFFER) ()
  (SHORTEN-NAME VICTIM-NAME))

(DEFCOM COM-UPDATE-FLAVOR-SYNTAX-IN-REGION
"Converts certain top-level forms from Release 6 flavor syntax to Release 7 flavor syntax.
If a region exists, it does the region, otherwise it does the current definition." ()
  (DEFINITION-REGION (FIRST-BP LAST-BP)
    (UPDATE-FLAVOR-SYNTAX-IN-REGION (IF (WINDOW-MARK-P *WINDOW*)
					*TYPEOUT-WINDOW*
					*TYPEIN-WINDOW*)
				    FIRST-BP LAST-BP)
    DIS-TEXT))

(DEFCOM COM-UPDATE-FLAVOR-SYNTAX-IN-BUFFER
"Converts certain top-level forms from Release 6 flavor syntax to Release 7 flavor syntax.
It does the entire buffer." ()
  (UPDATE-FLAVOR-SYNTAX-IN-REGION
	(MAKE-TYPEOUT-BUFFER-STREAM 'UPDATE-FLAVOR-SYNTAX-LOG
				    :SET-VICTIM-NAME (SEND *INTERVAL* :NAME))
	*INTERVAL*)
  DIS-TEXT)

(DEFCOM COM-TAGS-UPDATE-FLAVOR-SYNTAX
"Converts certain top-level forms from Release 6 flavor syntax to Release 7 flavor syntax.
It converts every buffer listed in a tags table." ()
  (LET ((TAG-TABLE (SELECT-TAG-TABLE NIL)))
    (SEND TAG-TABLE :RESTART)
    (LET ((LOG (MAKE-TYPEOUT-BUFFER-STREAM 'UPDATE-FLAVOR-SYNTAX-LOG
					   :SET-VICTIM-NAME (SEND TAG-TABLE :DESCRIPTION))))
      (LOOP DOING
	;; CATCH prevents typeout window from being erased before user has chance to read it
	(WHEN (CATCH 'ZWEI-COMMAND-LOOP
		(SEND TAG-TABLE :NEXT-FILE NIL)
		NIL)
	  (RETURN DIS-TEXT))
	(UPDATE-FLAVOR-SYNTAX-IN-REGION LOG *INTERVAL*)))))

;These go in the ZMacs comtab because they use buffers
(SET-COMTAB *ZMACS-COMTAB*
	    ()
	    (MAKE-COMMAND-ALIST '(COM-UPDATE-FLAVOR-SYNTAX-IN-REGION
				  COM-UPDATE-FLAVOR-SYNTAX-IN-BUFFER
				  COM-TAGS-UPDATE-FLAVOR-SYNTAX)))
