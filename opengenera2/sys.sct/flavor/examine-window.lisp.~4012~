;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FLAVOR; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defparameter *examiner-command-menu-column-1*
	      '("Flavor Components"
		"Flavor Dependents"
		"Flavor Instance Variables"
		"Flavor Initializations"
		"In-flavor Functions"
		""
		"Help"))
(defparameter *examiner-command-menu-column-2*
	      '("Flavor Methods"
		"Flavor Operations"
		"Generic Function"
		"Flavor Handler"
		"Function Arguments"
		"Documentation"
		"Clear Display"))

(defparameter *examiner-borders* 'dw:((margin-ragged-borders :thickness 1)
				      (margin-whitespace :margin :left :thickness 2)
				      (margin-scroll-bar )
				      (margin-white-borders :thickness 2)))

(defparameter *examiner-interactor-character-style* '(:swiss :condensed-caps :normal))
(defparameter *examiner-display-character-style* '(:swiss :condensed-caps :normal))
(defparameter *examiner-heading-character-style* '(:swiss :bold-condensed-caps nil))

;;; This is a list of commands whose output is put into a display pane.
;;; Output from commands not in the list goes to the typeout window.
(defvar *examiner-redisplay-hacking-commands* ())

(dw:define-program-framework examiner
  :pretty-name "Flavor Examiner"
  :state-variables ((history nil))
  :select-key #\X
  :command-evaluator execute-examiner-command
  :command-table (:inherit-from ())
  :top-level (examiner-top-level :prompt examiner-prompt)
  :help examiner-help
  :panes ((title :title
		 :redisplay-string "Flavor Examiner"
		 :default-character-style '(:eurex :italic :huge))
	  (command-menu :command-menu
			:default-character-style '(:swiss :roman :normal)
			:columns `(,*examiner-command-menu-column-1*
				   ,*examiner-command-menu-column-2*)
			:margin-components
			  `((dw:margin-pattern :margin :left :thickness 1 :pattern T)
			    (dw:margin-pattern :margin :top :thickness 1 :pattern T)
			    (dw:margin-pattern :margin :right :thickness 1 :pattern T)
			    (dw:margin-white-borders :thickness 4)
			    ;(dw:margin-scroll-bar :margin :left :visibility :if-needed)
			    ;(dw:margin-whitespace :thickness 12 :margin :left)
			    ;(dw:margin-whitespace :thickness 25 :margin :right)
			    )
			  )
	  (command :interactor
		   :default-character-style *examiner-interactor-character-style*
		   :margin-components
		     `((dw:margin-pattern :margin :left :thickness 1 :pattern T)
		       (dw:margin-pattern :margin :top :thickness 1 :pattern tv:50%-gray)
		       (dw:margin-pattern :margin :right :thickness 1 :pattern T)
		       (dw:margin-pattern :margin :bottom :thickness 1 :pattern T)
		       (dw:margin-whitespace :margin :left :thickness 2)
		       (dw:margin-scroll-bar )
		       (dw:margin-white-borders :thickness 2)
		       (dw:margin-label :string "Please type commands, or click on menu above"
					:style (:swiss :bold-italic :normal)
					:margin :top)))
	  (output :display
		  :typeout-window t
		  :default-character-style *examiner-display-character-style*
		  :margin-components *examiner-borders*
		  :more-p nil
		  :end-of-page-mode :truncate)
	  (output-1 :display
		    :default-character-style *examiner-display-character-style*
		    :margin-components *examiner-borders*
		    :more-p nil
		    :end-of-page-mode :truncate)
	  (output-2 :display
		    :default-character-style *examiner-display-character-style*
		    :margin-components *examiner-borders*
		    :more-p nil
		    :end-of-page-mode :truncate))
  :configurations '((main
		      (:layout (main :row left-part right-part)
		       (left-part :column title command-menu command)
		       (right-part :column output-2 output-1 output))
		      (:sizes (main (left-part .4) :then (right-part :even))
		       (left-part (title 1 :lines)
				  (command-menu 7 :lines)
				  :then (command :even))
		       (right-part (output-2 .2) (output-1 .2)
				   :then (output :even))))))

(defun execute-examiner-command (program command command-arguments)
  (if (member command *examiner-redisplay-hacking-commands*)
      (let ((output (dw:get-program-pane 'output)))
	(let ((output-1 (dw:get-program-pane 'output-1))
	      (output-2 (dw:get-program-pane 'output-2)))
	  (destructuring-bind (&optional recent-1 recent-2 &rest ignore)
	     (examiner-history program)
	    (flet ((copy-it (recent to-pane from-vp-pos)
		     (when recent
		       (destructuring-bind (ignore top bottom) recent
			 (multiple-value-bind (ignore y) (send from-vp-pos :viewport-position)
			   (dw::copy-presentations-in-region
			     output to-pane
			     :from-top top :from-bottom bottom
			     :clear-history-first T
			     :set-cursor-boundaries-after T
			     :set-viewport-y y))))))
	      (copy-it recent-2 output-2 output-1)
	      (copy-it recent-1 output-1 output))))
	(fresh-line output)
	(multiple-value-bind (ignore y) (send output :read-cursorpos)
	  (multiple-value-bind (left ignore right ignore)
	      (send output :visible-cursorpos-limits)
	    (graphics:draw-rectangle left y right (+ y 2)
				     :stream output
				     :pattern tv:50%-gray)))
	(send output :increment-cursorpos 0 (round (* 2/3 (send output :line-height))))
	(send output :clear-window)		;scroll it all off
	(multiple-value-bind (ignore before-y) (send output :read-cursorpos)
	  (with-character-style (*examiner-heading-character-style* output
								    :bind-line-height T)
	    (present (cons command command-arguments)
		     `((cp:command :command-table ,(dw::program-command-table program)))
		     :acceptably t		;eliminate noise strings
		     :stream output)
	    (fresh-line output))
	  (unwind-protect
	      (let ((*standard-output* output))
		(apply command command-arguments))
	    (fresh-line output)
	    (multiple-value-bind (ignore after-y) (send output :read-cursorpos)
	      (push (list (cons command command-arguments) before-y after-y)
		    (examiner-history program))))))
      (apply command command-arguments)))

;;; This top-level function exists to get the † text printed out at the start.
;;; Then it just runs the standard command loop.
(defun examiner-top-level (program &rest options)
  ;; No point in making this a generic function, although typically it would be.
  (examiner-help program (dw:get-program-pane 'command) nil)
  (apply #'dw:default-command-top-level program options))

;;; This code is run by the program top-level, and by the † key.
(defun examiner-help (program stream string-so-far)
  ;; No point in making this a generic function.
  (ignore program)
  (when (every (lambda (x) (char-equal x #\space)) string-so-far)
    (format stream "~&You are typing a command at Flavor Examiner.~@
		    Use the command names you see in the menu above,~@
		    or click on one with the mouse.  The ~'i~\\CP:COMMAND\\~ command ~@
		    offers more detailed documentation about Flavor~@
		    Examiner itself, and about each of its commands.~&"
	    '(com-help))
    (send-if-handles stream :increment-cursorpos 0 6)))

;;; The custom prompt is used because the default prompt "Flavor Examiner Command"
;;; uses up over half the width available for commands.  Perhaps reconsider if
;;; the whole face of Flavor Examiner is redesigned to make the command pane wider.
(defun examiner-prompt (stream ignore)
  (with-character-style ('(:fix :roman :normal) stream)
    (write-char #\arrow:right-fat-arrow stream)
    (write-char #\space stream)))

(defun install-flavor-commands-into-examiner (commands)
  (loop for (command-name pretty-name) in commands
	do
    (pushnew command-name *examiner-redisplay-hacking-commands*)
    (cp:install-command 'examiner command-name)
    (cp:install-command 'examiner command-name pretty-name)
    (dw:add-standard-menu-accelerator 'examiner command-name pretty-name)))

(install-flavor-commands-into-examiner
  '((com-show-flavor-components "Flavor Components")
    (com-show-flavor-dependents "Flavor Dependents")
    (com-show-flavor-instance-variables "Flavor Instance Variables")
    (com-show-flavor-initializations "Flavor Initializations")
    (com-show-flavor-functions "In-flavor Functions")
    (com-show-flavor-methods "Flavor Methods")
    (com-show-flavor-operations "Flavor Operations")
    (com-show-generic-function "Generic Function")
    (com-show-flavor-handler "Flavor Handler")
    #-imach (dbg:com-show-function-arguments "Function Arguments")
    (si:com-show-definition-documentation "Documentation")
    ))

(dolist (command '(com-show-flavor-differences
		   si:com-edit-definition 
		   si:com-edit-file 
		   #-imach dbg:com-edit-function 
		   si:com-report-bug 
		   si:com-select-activity 
		   si:com-set-package))
  (cp:install-command 'examiner command))

(dw:define-program-command (com-clear-display examiner :menu-accelerator T)
			   ((confirm 'boolean :confirm T))
  (when confirm
    (dolist (pane-name '(output-2 output-1 output command))
      (send (dw:get-program-pane pane-name) :clear-history))
    (examiner-help self (dw:get-program-pane 'command) nil)))

(dw:define-program-command (com-refresh-display examiner ;---:keyboard-accelerator #\Refresh
						)
			    ()
  (send dw:*program-frame* :refresh))
