;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: FLAVOR -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains miscellaneous functions that are not used in the 'detente'
;;; version because it inherits them from the old flavor system.

;;;; Message-sending functions.

(DEFSUBST SEND (OBJECT MESSAGE-NAME &REST ARGUMENTS)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (APPLY OBJECT MESSAGE-NAME ARGUMENTS))

;;; Obsolescent: the Common Lisp way is (apply #'send ...)
(DEFSUBST LEXPR-SEND (OBJECT &REST ARGUMENTS)
  (DECLARE (ARGLIST OBJECT MESSAGE ARGUMENT &REST ARGUMENTS))
  (APPLY #'APPLY OBJECT ARGUMENTS))

(DEFSUBST SEND-IF-HANDLES (OBJECT MESSAGE &REST ARGUMENTS)
  (APPLY OBJECT :SEND-IF-HANDLES MESSAGE ARGUMENTS))

(DEFSUBST LEXPR-SEND-IF-HANDLES (OBJECT &REST ARGUMENTS)
  (DECLARE (ARGLIST OBJECT MESSAGE ARGUMENT &REST ARGUMENTS))
  (APPLY #'APPLY OBJECT :SEND-IF-HANDLES ARGUMENTS))

(DEFSUBST OPERATION-HANDLED-P (OBJECT MESSAGE-NAME)
  (SEND OBJECT :OPERATION-HANDLED-P MESSAGE-NAME))

;;;; Accessing instance variables by name

;SCL:SYMBOL-VALUE-IN-INSTANCE
(DEFUN ZL:SYMEVAL-IN-INSTANCE (INSTANCE SYMBOL &OPTIONAL NO-ERROR-P)
  (CHECK-TYPE INSTANCE INSTANCE)
  (CHECK-TYPE SYMBOL SYMBOL)
  (LET ((FLAVOR (%INSTANCE-FLAVOR INSTANCE)))
    ;; Check for need to transform this instance
    (WHEN (EQ (FLAVOR-HANDLER-TABLE FLAVOR) *INSTANCE-TRANSFORMING-HANDLER-TABLE*)
      (TRANSFORM-INSTANCE INSTANCE (SETQ FLAVOR (FIND-FLAVOR (FLAVOR-NAME FLAVOR)))))
    (%INSTANCE-REF INSTANCE
		   (1+ (OR (POSITION SYMBOL (FLAVOR-ALL-INSTANCE-VARIABLES FLAVOR))
			   (RETURN-FROM ZL:SYMEVAL-IN-INSTANCE
			     (UNLESS NO-ERROR-P
			       (ERROR "~S is not an instance variable of ~S"
				      SYMBOL INSTANCE))))))))

(DEFUN ZL:SET-IN-INSTANCE (INSTANCE SYMBOL VALUE)
  (CHECK-TYPE INSTANCE INSTANCE)
  (CHECK-TYPE SYMBOL SYMBOL)
  (LET ((FLAVOR (%INSTANCE-FLAVOR INSTANCE)))
    ;; Check for need to transform this instance
    (WHEN (EQ (FLAVOR-HANDLER-TABLE FLAVOR) *INSTANCE-TRANSFORMING-HANDLER-TABLE*)
      (TRANSFORM-INSTANCE INSTANCE (SETQ FLAVOR (FIND-FLAVOR (FLAVOR-NAME FLAVOR)))))
    (%INSTANCE-SET VALUE INSTANCE
		   (1+ (OR (POSITION SYMBOL (FLAVOR-ALL-INSTANCE-VARIABLES FLAVOR))
			   (RETURN-FROM ZL:SET-IN-INSTANCE
			     (ERROR "~S is not an instance variable of ~S"
				    SYMBOL INSTANCE))))))
  VALUE)

(DEFUN ZL:LOCATE-IN-INSTANCE (INSTANCE SYMBOL)
  (CHECK-TYPE INSTANCE INSTANCE)
  (CHECK-TYPE SYMBOL SYMBOL)
  (LET ((FLAVOR (%INSTANCE-FLAVOR INSTANCE)))
    ;; Check for need to transform this instance
    (WHEN (EQ (FLAVOR-HANDLER-TABLE FLAVOR) *INSTANCE-TRANSFORMING-HANDLER-TABLE*)
      (TRANSFORM-INSTANCE INSTANCE (SETQ FLAVOR (FIND-FLAVOR (FLAVOR-NAME FLAVOR)))))
    (%INSTANCE-LOC INSTANCE
		   (1+ (OR (POSITION SYMBOL (FLAVOR-ALL-INSTANCE-VARIABLES FLAVOR))
			   (RETURN-FROM ZL:LOCATE-IN-INSTANCE
			     (ERROR "~S is not an instance variable of ~S"
				    SYMBOL INSTANCE)))))))

(DEFUN BOUNDP-IN-INSTANCE (INSTANCE SYMBOL)
  (VARIABLE-BOUNDP (SYMBOL-VALUE-IN-INSTANCE INSTANCE SYMBOL)))

;;; construct an interpreter environment for a flavor instance.
;;; perhaps this belongs in LMMAC?
(DEFMACRO WITH-INSTANCE-ENVIRONMENT ((INSTANCE ENV) &BODY BODY)
  `(WITH-INSTANCE-ENVIRONMENT-INTERNAL
     ,INSTANCE
     #'(LAMBDA (,ENV)
	 (DECLARE (SYS:DOWNWARD-FUNCTION))
	 (IGNORE ,ENV)
	 ,@BODY)))

(DEFUN WITH-INSTANCE-ENVIRONMENT-INTERNAL (INSTANCE CONTINUATION)
  (DECLARE (SYS:DOWNWARD-FUNARG CONTINUATION))
  (CHECK-TYPE INSTANCE INSTANCE)
  (LET ((FLAVOR (%INSTANCE-FLAVOR INSTANCE)))
    ;; Check for need to transform this instance
    (WHEN (EQ (FLAVOR-HANDLER-TABLE FLAVOR) *INSTANCE-TRANSFORMING-HANDLER-TABLE*)
      (TRANSFORM-INSTANCE INSTANCE (SETQ FLAVOR (FIND-FLAVOR (FLAVOR-NAME FLAVOR)))))
    (LET ((VARS (FLAVOR-ALL-INSTANCE-VARIABLES FLAVOR))
	  (FUNS (FLAVOR-ALL-LOCAL-FUNCTIONS FLAVOR)))
      ;; speed bum: try to use stack lists rather than consed lists
      (COND ((> (LENGTH VARS) (FLOOR (- CONTROL-STACK-MAX-FRAME-SIZE 100) 3))
	     (SI:WITH-INTERPRETER-ENVIRONMENT
	       (INT-ENV NIL
			`((SELF ,INSTANCE)
			  ,@
			  (LOOP FOR VAR IN VARS FOR OFFSET FROM 1
				COLLECT (CONS VAR (%INSTANCE-LOC INSTANCE OFFSET))))
			FUNS NIL NIL NIL)
	       (FUNCALL CONTINUATION INT-ENV)))
	    (T
	     (LET ((OFFSET 1) (TEM VARS))
	       (SI:WITH-INTERPRETER-ENVIRONMENT (ENV NIL NIL FUNS NIL NIL NIL)
		 ;; Build the alist pairs on the stack
		 (%PUSH 'SELF)
		 (%PUSH INSTANCE)
		 (%P-STORE-CDR-CODE (COMPILER:%STACK-LOCATION-INTERNAL 1) CDR-NIL)
		 (LOOP WHILE TEM DO
		   (%PUSH (POP TEM))
		   (%PUSH (%INSTANCE-LOC INSTANCE OFFSET))
		   (%P-STORE-CDR-CODE (COMPILER:%STACK-LOCATION-INTERNAL 2) CDR-NORMAL)
		   (INCF OFFSET))
		 ;; Build the list of alist pairs
		 (SETQ TEM (%MAKE-POINTER-OFFSET DTP-LIST
						 (COMPILER:%STACK-LOCATION-INTERNAL 0)
						 (1+ (* OFFSET -2))))
		 (%PUSH TEM)
		 (SETQ TEM (%MAKE-POINTER-OFFSET DTP-LIST TEM 2))
		 (LOOP WHILE VARS DO
		   (%PUSH TEM)
		   (SETQ TEM (%MAKE-POINTER-OFFSET DTP-LIST TEM 2))
		   (POP VARS))
		 (%P-STORE-CDR-CODE (COMPILER:%STACK-LOCATION-INTERNAL 1) CDR-NIL)
		 ;; Make the environment point to the alist
		 (SETF (SI:ENV-VARIABLES ENV)
		       (%MAKE-POINTER-OFFSET DTP-LIST
					     (COMPILER:%STACK-LOCATION-INTERNAL 0)
					     (- OFFSET)))
		 (FUNCALL CONTINUATION ENV))))))))

(DEFUN EVAL-IN-INSTANCE (INSTANCE FORM)
  (CHECK-TYPE INSTANCE INSTANCE)
  (LET ((FLAVOR (%INSTANCE-FLAVOR INSTANCE)))
    ;; Check for need to transform this instance
    (WHEN (EQ (FLAVOR-HANDLER-TABLE FLAVOR) *INSTANCE-TRANSFORMING-HANDLER-TABLE*)
      (TRANSFORM-INSTANCE INSTANCE (SETQ FLAVOR (FIND-FLAVOR (FLAVOR-NAME FLAVOR)))))
    (LET* ((VARS (FLAVOR-ALL-INSTANCE-VARIABLES FLAVOR))
	   (VAR-POSITION (AND (SYMBOLP FORM) (1+ (OR (POSITION FORM VARS) -2)))))
      (COND ((EQ FORM 'SELF)
	     INSTANCE)
	    ((AND VAR-POSITION (PLUSP VAR-POSITION)) (%INSTANCE-REF INSTANCE VAR-POSITION))
	    (T (WITH-INSTANCE-ENVIRONMENT (INSTANCE ENV)
		 (EVAL FORM ENV)))))))

;;; Enter the debugger inside the lexical environment of a method of this instance
(DEFUN DEBUG-INSTANCE (INSTANCE)
  (CHECK-TYPE INSTANCE INSTANCE)
  (EVAL-IN-INSTANCE INSTANCE `(BREAK "DEBUG-INSTANCE of ~S" ,INSTANCE)))


;;; Get the function that would handle an operation for a flavor
(DEFUN ZL:GET-FLAVOR-HANDLER-FOR (FLAVOR-NAME OPERATION)
  (LET ((FL (FIND-FLAVOR FLAVOR-NAME)))
    ;; Do any composition (compilation) of combined stuff, if not done already
    (UNLESS (FLAVOR-METHODS-COMPOSED FL)
      (COMPOSE-METHOD-COMBINATION FLAVOR-NAME))
    ;; Get the handler out of the handler table
    (LET ((GF (FIND-GENERIC-FUNCTION OPERATION NIL)))
      (AND GF
	   (WITHOUT-INTERRUPTS
	     (HANDLER-TABLE-FUNCTION-AND-PARAMETER FL (GENERIC-FUNCTION-SELECTOR GF)))))))

;;; Call the above.  It will not work if it uses instance variables.
(DEFUN FUNCALL-HANDLER (FLAVOR-NAME OPERATION &REST ARGS)
  (MULTIPLE-VALUE-BIND (METHOD MAPPING-TABLE)
      (ZL:GET-FLAVOR-HANDLER-FOR FLAVOR-NAME OPERATION)
    ;; Make this check for safety, since accessors don't type-check self
    (WHEN (OR (EQ METHOD #'READ-INSTANCE-VARIABLE)
	      (EQ METHOD #'WRITE-INSTANCE-VARIABLE)
	      (EQ METHOD #'LOCATE-INSTANCE-VARIABLE))
      (ERROR "Cannot access instance variables if you don't supply an instance"))
    #+3600
    (APPLY METHOD NIL MAPPING-TABLE OPERATION ARGS)
    #+IMACH
    (APPLY METHOD MAPPING-TABLE NIL ARGS)
    ))

(DEFINE-MAKE-INSTANCE-FUNCTION MAKE-INSTANCE)

;;; Callable from style checkers, to detect misspelled init keywords
;;; and missing required-init-keywords at compile time
(DEFUN CHECK-INIT-KEYWORDS (FLAVOR-FORM INIT-PLIST-FORMS)
  (WHEN (AND (LISTP FLAVOR-FORM)
	     (EQ (CAR FLAVOR-FORM) 'QUOTE)
	     (SYMBOLP (CADR FLAVOR-FORM)))
    (MULTIPLE-VALUE-BIND (FLAVOR-DEFINED-P INITABLE-IVS OTHER-ALLOWED-KEYWORDS
			  REQUIRED-KEYWORDS ALLOW-OTHER-KEYS)
	(CHECK-INIT-KEYWORDS-INTERNAL (CADR FLAVOR-FORM) INIT-PLIST-FORMS)
      (IF (NOT FLAVOR-DEFINED-P)
	  (COMPILER:WARN-1 'COMPILER:UNKNOWN-FLAVOR-NAME-WARNING
			   :FLAVOR-NAME (CADR FLAVOR-FORM)
			   :BAD-STYLE T :DELAYED T)
	  (WHEN (LOOP FOR KWD-FORM IN INIT-PLIST-FORMS BY 'CDDR
		      ALWAYS (CONSTANTP KWD-FORM))
	    (LET ((UNHANDLED-KEYWORDS NIL)
		  ;; copy the list before we start smashing it [reverse for printing]
		  (REQUIRED-KEYWORDS-UNSPECIFIED (REVERSE REQUIRED-KEYWORDS)))
	      (LOOP FOR (KWD-FORM KWD-VALUE-FORM) ON INIT-PLIST-FORMS BY 'CDDR
		    AS KWD = (LT:EVALUATE-CONSTANT KWD-FORM)
		    DO (WHEN (MEMBER KWD REQUIRED-KEYWORDS)
			 (SETQ REQUIRED-KEYWORDS-UNSPECIFIED
			       (DELETE KWD REQUIRED-KEYWORDS-UNSPECIFIED)))
		       (COND ((ASSOC KWD INITABLE-IVS))
			     ((MEMBER KWD OTHER-ALLOWED-KEYWORDS))
			     ((EQ KWD ':ALLOW-OTHER-KEYS)
			      (SETQ ALLOW-OTHER-KEYS
				    (AND (CONSTANTP KWD-VALUE-FORM)
					 (LT:EVALUATE-CONSTANT KWD-VALUE-FORM))))
			     ((NOT ALLOW-OTHER-KEYS)
			      (PUSH KWD UNHANDLED-KEYWORDS))))
	      (WHEN (OR UNHANDLED-KEYWORDS REQUIRED-KEYWORDS-UNSPECIFIED)
		(COMPILER:WARN-1 'COMPILER:UNKNOWN-OR-MISSING-INIT-KEYWORDS-WARNING
				 :FLAVOR-NAME (CADR FLAVOR-FORM)
				 :INIT-PLIST-FORMS INIT-PLIST-FORMS
				 :UNHANDLED-KEYWORDS (NREVERSE UNHANDLED-KEYWORDS)
				 :REQUIRED-KEYWORDS-UNSPECIFIED REQUIRED-KEYWORDS-UNSPECIFIED
				 :BAD-STYLE T :DELAYED T))))))))

;Also called from a compiler-warning method
(DEFUN CHECK-INIT-KEYWORDS-INTERNAL (FLAVOR-NAME INIT-PLIST-FORMS &KEY (ENVIRONMENT 'COMPILE))
  (DECLARE (VALUES FLAVOR-DEFINED-P INITABLE-IVS OTHER-ALLOWED-KEYWORDS
		   REQUIRED-KEYWORDS ALLOW-OTHER-KEYS))
  (LET ((FL (FIND-FLAVOR FLAVOR-NAME NIL ENVIRONMENT)))
    (WHEN FL
      (WHEN (FLAVOR-HAS-MIXTURE FL)
	;; Maybe supposed to instantiate some other flavor, mixed out of this one
	;; See if all the mixture-keyword arguments have constant values
	;; Our caller already confirmed that the keywords themselves are constants
	(LET* ((FLAVOR-MIXTURE-KEYWORDS (FLAVOR-MIXTURE-KEYWORDS FL))
	       (INIT-OPTIONS
		 (LOOP FOR (KWD-FORM KWD-VALUE-FORM) ON INIT-PLIST-FORMS BY 'CDDR
		       AS KWD = (LT:EVALUATE-CONSTANT KWD-FORM)
		       WHEN (MEMBER KWD FLAVOR-MIXTURE-KEYWORDS)
			 DO (UNLESS (CONSTANTP KWD-VALUE-FORM)
			      ;; No way to tell what flavor is really going to be
			      ;; instantiated, so allow anything
			      (RETURN-FROM CHECK-INIT-KEYWORDS-INTERNAL
				(VALUES T NIL NIL NIL T)))
			 AND APPEND (LIST KWD (LT:EVALUATE-CONSTANT KWD-VALUE-FORM)))))
	  ;; All the mixture-keyword arguments have constant values, determine real flavor
	  (SETQ FLAVOR-NAME (DECODE-FLAVOR-MIXTURE FLAVOR-NAME INIT-OPTIONS 'COMPILE NIL)
		FL (FIND-FLAVOR FLAVOR-NAME NIL 'COMPILE))
	  (UNLESS FL (RETURN-FROM CHECK-INIT-KEYWORDS-INTERNAL NIL))))
      (UNLESS (FLAVOR-COMPONENTS-COMPOSED FL)
	(UNLESS (COMPOSE-FLAVOR-COMBINATION FLAVOR-NAME :ERROR-P NIL :ENV 'COMPILE)
	  (RETURN-FROM CHECK-INIT-KEYWORDS-INTERNAL T))
	;; Might have been copied into ENV
	(SETQ FL (FIND-FLAVOR FLAVOR-NAME T 'COMPILE)))
      (UNLESS (FLAVOR-INITIALIZATIONS-COMPOSED FL)
	(COMPOSE-INITIALIZATIONS FLAVOR-NAME :ENV 'COMPILE :ERROR-P NIL))
      (VALUES T					;FLAVOR-DEFINED-P
	      (FLAVOR-ALL-VARIABLE-INIT-KEYWORDS FL)
	      (CONS (FLAVOR-AREA-KEYWORD FL) (FLAVOR-ALL-OTHER-INIT-KEYWORDS FL))
	      (FLAVOR-ALL-REQUIRED-KEYWORDS FL)
	      (FLAVOR-ALL-ALLOW-OTHER-KEYS FL)))))

(DEFUN CHECK-FLAVOR-NAME (FLAVOR-NAME &OPTIONAL (KIND "flavor"))
  (UNLESS (AND FLAVOR-NAME
	       (SYMBOLP FLAVOR-NAME)
	       (FIND-FLAVOR FLAVOR-NAME NIL 'COMPILE))
    (COMPILER:WARN-1 'COMPILER:UNKNOWN-FLAVOR-NAME-WARNING
		     :FLAVOR-NAME FLAVOR-NAME
		     :KIND KIND :BAD-STYLE T :DELAYED T)))

;;; Support for REORDER-MEMORY

(DEFVAR *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*)

;These flavors are bases of large flavor families.  Make their dependents' all-generics
;lists consist of two cdr-coded segments, where the second is shared by all the
;dependents, and in fact is the base flavor's all-generics list.
(DEFVAR *BASE-FLAVORS-FOR-ALL-GENERICS-SHARING*
	'(TV:SHEET TV:MINIMUM-WINDOW TV:WINDOW DW:DYNAMIC-WINDOW
	  CONDITION ERROR FS:FILE-ERROR))

;Get the base flavors' all generics lists ready before we see any of their dependents
;Also preload the hash table with function-specs of local-functions, so the references
;to these from flavor-all-local-functions will continue to share.
(DEFUN INITIALIZE-COMPACT-FLAVOR-LISTS ()
  (DOLIST (FLAVOR *ALL-FLAVOR-NAMES*)
    (DOLIST (MH (FLAVOR-LOCAL-FUNCTIONS (FIND-FLAVOR FLAVOR)))
      (LET ((FSPEC (METHOD-HOLDER-FUNCTION-SPEC MH)))
	(SETF (GETHASH FSPEC *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*) FSPEC))))
  (LOOP FOR FLAVOR IN *BASE-FLAVORS-FOR-ALL-GENERICS-SHARING*
	AS FL = (FIND-FLAVOR FLAVOR)
	AS L = (COPY-LIST (OR (FLAVOR-ALL-GENERICS FL)
			      (COMPOSE-FLAVOR-ALL-GENERICS FLAVOR))
			  *FLAVOR-AREA*)
	DO (SETF (FLAVOR-ALL-GENERICS FL) L)
	   (LOOP FOR L ON L DO
	     (SETF (GETHASH L *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*) L))
	COLLECT L))

;;; Compactify the lists associated with this flavor, using cdr-coding and sharing,
;;; and return a list of them, so reorder-memory will try to keep them in order.
(DEFUN COMPACT-FLAVOR-LISTS (FL)
  (LET ((RESULT NIL))
    (LABELS ((COMPACT (TREE &OPTIONAL CDR-CODE N-LEVELS)
	       (UNLESS (ATOM TREE)
		 (IF (NULL N-LEVELS)
		     (SETQ TREE (SI:COPYTREE-SHARE TREE *FLAVOR-AREA*
						   *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*
						   CDR-CODE))
		     (MULTIPLE-VALUE-BIND (NIL NIL SHARED)
			 (GETHASH TREE *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*)
		       (IF SHARED
			   (SETQ TREE SHARED)
			   (LOOP FOR L ON (SETQ TREE (COPY-LIST TREE *FLAVOR-AREA*)) DO
			     (SETF (GETHASH L *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*) L)
			     (WHEN (> N-LEVELS 1)
			       (SETF (CAR L) (COMPACT (CAR L) T (1- N-LEVELS))))))))
		 (PUSHNEW TREE RESULT :AREA SI:SYSTEM-TEMPORARY-AREA)
		 (WHEN (NULL N-LEVELS)
		   (DOLIST (ELEM TREE)
		     (WHEN (CONSP ELEM)
		       (PUSHNEW ELEM RESULT :AREA SI:SYSTEM-TEMPORARY-AREA)))))
	       TREE)
	     (COPY (LIST &OPTIONAL (N-LEVELS 1))
	       (UNLESS (ATOM LIST)
		 (SETQ LIST (COPY-LIST LIST *FLAVOR-AREA*))
		 (PUSH LIST RESULT :AREA SI:SYSTEM-TEMPORARY-AREA)
		 (WHEN (> N-LEVELS 1)
		   (LOOP FOR L ON LIST DO
		     (SETF (CAR L) (COPY (CAR L) (1- N-LEVELS))))))
	       LIST))
      (MACROLET ((COMPACTF (FIELD &REST OPTIONS)
		   (DECLARE (ARGLIST FIELD &OPTIONAL CDR-CODE N-LEVELS))
		   `(SETF ,FIELD (COMPACT ,FIELD ,@OPTIONS)))
		 (COPYF (FIELD &REST OPTIONS)
		   (DECLARE (ARGLIST FIELD &OPTIONAL N-LEVELS))
		   `(SETF ,FIELD (COPY ,FIELD ,@OPTIONS))))

	;; Allow sharing of these with other flavors
	(COMPACTF (FLAVOR-LOCAL-INSTANCE-VARIABLES FL))
	(COMPACTF (FLAVOR-LOCAL-COMPONENTS FL))
	(COMPACTF (FLAVOR-LOCAL-COMPONENT-PRECEDENCE FL))
	(COMPACTF (FLAVOR-LOCAL-INSTANCE-VARIABLE-INITIALIZATIONS FL))
	(COMPACTF (FLAVOR-LOCAL-INITABLE-INSTANCE-VARIABLES FL))
	(COMPACTF (FLAVOR-LOCAL-READABLE-INSTANCE-VARIABLES FL) T 2)
	(COMPACTF (FLAVOR-LOCAL-WRITABLE-INSTANCE-VARIABLES FL) T 2)

	;; Compact three levels of this: the list, each element of the list which
	;; takes the form (local-function-name binding function-spec),
	;; and the binding, which is either (SPECIAL macro-expander-function)
	;; or (DEFUN-IN-FLAVOR flavor-name fdefinition-location).  If the former,
	;; the copy of that list in the fdefinition-location will get compacted
	;; too, so that it continues to share.
	(COMPACTF (FLAVOR-ALL-LOCAL-FUNCTIONS FL) T 3)

	;; Don't share these, and be careful only to copy alist, not method-holders
	(COPYF (FLAVOR-METHOD-TABLE FL) 2)
	(COPYF (FLAVOR-LOCAL-DEPENDENTS FL))
	(COPYF (FLAVOR-ALL-COMPOSED-DEPENDENTS FL))
	(COPYF (FLAVOR-LOCAL-FUNCTIONS FL))

	;; Make sure that local macros continue to share their definition with
	;; the definition in FLAVOR-ALL-LOCAL-FUNCTIONS of dependent flavors.
	(DOLIST (METHOD-HOLDER (FLAVOR-LOCAL-FUNCTIONS FL))
	  (WHEN (AND (METHOD-DEFINED-P METHOD-HOLDER)
		     (LISTP (METHOD-HOLDER-DEFINITION METHOD-HOLDER))
		     (EQ (CAR (METHOD-HOLDER-DEFINITION METHOD-HOLDER)) 'SPECIAL))
	    (COMPACTF (METHOD-HOLDER-DEFINITION METHOD-HOLDER) T 1)))

	;; Share these but keep them fully cdr-coded
	(COMPACTF (FLAVOR-ALL-INSTANCE-VARIABLES FL) T)
	(COMPACTF (FLAVOR-ALL-ORDERED-INSTANCE-VARIABLES FL) T)
	(COMPACTF (FLAVOR-ALL-COMPONENTS FL) T)
	(COMPACTF (FLAVOR-MAPPING-TABLE-NAMES FL) T)
	(COMPACTF (FLAVOR-MAPPING-TABLES FL) T)

	;; Special processing for these to keep them fully cdr-coded, or at most
	;; in two segments for dependents of *BASE-FLAVORS-FOR-ALL-GENERICS-SHARING*,
	;; and otherwise to try to share with a tail of a dependents' list.
	(OR (NULL (FLAVOR-ALL-GENERICS FL))	;speed bum
	    (MULTIPLE-VALUE-BIND (NIL NIL ALREADY-EXISTS)
		(GETHASH (FLAVOR-ALL-GENERICS FL) *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*)
	      (WHEN ALREADY-EXISTS
		(SETF (FLAVOR-ALL-GENERICS FL) ALREADY-EXISTS)
		T))
	    (DOLIST (COMPONENT (FLAVOR-ALL-COMPONENTS FL))
	      (WHEN (MEMBER COMPONENT *BASE-FLAVORS-FOR-ALL-GENERICS-SHARING*)
		(LET* ((SHARE (FLAVOR-ALL-GENERICS (FIND-FLAVOR COMPONENT)))
		       (L (COPY-LIST* (SET-DIFFERENCE (FLAVOR-ALL-GENERICS FL) SHARE)
				      *FLAVOR-AREA*)))
		  (LOOP FOR L ON L DO
		    (SETF (GETHASH L *CDR-CODE-FLAVOR-LISTS-HASH-TABLE*) L))
		  (SETF (FLAVOR-ALL-GENERICS FL) (NCONC L SHARE)))
		(RETURN T)))
	    (COMPACTF (FLAVOR-ALL-GENERICS FL) T 1))

	;; Don't share the composed initializations, that only saves about 30,000 words
	;; and causes too many extra page faults in make-instance.  For the ones that are
	;; alists, copy both levels of list, so that the associations will end up on the
	;; same page as the list.  For the ones that contain forms, try to copy the forms.
	(COPYF (FLAVOR-INSTANCE-AREA FL))
	(COPYF (FLAVOR-ALL-VARIABLE-INIT-KEYWORDS FL) 2)
	(COPYF (FLAVOR-ALL-VARIABLE-DEFAULT-INIT-FORMS FL) 10)
	(COPYF (FLAVOR-ALL-OTHER-INIT-KEYWORDS FL))
	(COPYF (FLAVOR-ALL-OTHER-DEFAULT-INIT-CONSTANTS FL))
	(COPYF (FLAVOR-ALL-OTHER-DEFAULT-INIT-FORMS FL) 10)
	(COPYF (FLAVOR-ALL-REQUIRED-KEYWORDS FL))
	(COPYF (FLAVOR-ALL-UNHANDLED-KEYWORDS FL))

	;; Things on property list are supposed to be rare enough that there is no
	;; point in sharing them, and the list itself can't be shared, of course.
	;; We can only copy the first two levels of list, to avoid destandardizing
	;; generic function names.
	(COPYF (FLAVOR-PLIST FL))
	(LOOP FOR L ON (FLAVOR-PLIST FL) DO
	  (COPYF (CAR L)))))
    (NREVERSE RESULT)))

;;;; Obsolete and no longer documented, but probably still called all over the place

(DEFMACRO ZL:FUNCALL-SELF (&REST ARGS)
  `(SEND SELF . ,ARGS))

(DEFMACRO ZL:LEXPR-FUNCALL-SELF (&REST ARGS)
  `(LEXPR-SEND SELF . ,ARGS))

(DEFMACRO ZL:FUNCALL-WHOPPER-CONTINUATION (&REST ARGS)
  `(CONTINUE-WHOPPER ,@ARGS))

(DEFMACRO ZL:LEXPR-FUNCALL-WHOPPER-CONTINUATION (&REST ARGS)
  `(LEXPR-CONTINUE-WHOPPER ,@ARGS))

(DEFMACRO ZL:INSTANCE-VARIABLE-BOUNDP (VAR)
  `(VARIABLE-BOUNDP ,VAR))

(COMPILER:MAKE-OBSOLETE ZL:FUNCALL-WHOPPER-CONTINUATION
			"it has been renamed to CONTINUE-WHOPPER")
(COMPILER:MAKE-OBSOLETE ZL:LEXPR-FUNCALL-WHOPPER-CONTINUATION
			"it has been renamed to LEXPR-CONTINUE-WHOPPER")
(COMPILER:MAKE-OBSOLETE ZL:INSTANCE-VARIABLE-BOUNDP
			"it has been subsumed by VARIABLE-BOUNDP")
