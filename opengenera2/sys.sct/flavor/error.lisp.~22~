;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: FLAVOR -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains error-processing routines of the flavor system
;;; It has to be loaded last since it uses flavors itself

(DEFFLAVOR METHOD-COMBINATION-ERROR () (DBG:PROCEEDABLE-FERROR))

;--- Can METHOD-COMBINATION-ERROR use conditional signalling to eliminate the NO-ERROR arg?
(DEFUN METHOD-COMBINATION-ERROR (&REST ERROR-ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  (LET ((DBG:*ERROR-MESSAGE-PRINLENGTH*		;Puke, barf, ugh, bletch: Make fspecs readable
	  (AND DBG:*ERROR-MESSAGE-PRINLENGTH* (MAX DBG:*ERROR-MESSAGE-PRINLENGTH* 7))))
    (SIGNAL 'METHOD-COMBINATION-ERROR :FORMAT-STRING (FIRST ERROR-ARGS)
				      :FORMAT-ARGS (COPY-LIST (REST ERROR-ARGS))
				      :PROCEED-TYPES '(:NO-ACTION))))

;Usable as a condition-bind handler
(DEFUN WARN-ABOUT-METHOD-COMBINATION-ERROR (COND)
  (WARN "~A~%This method-combination error is being ignored for purposes of compiling." COND)
  (SEND COND :PROCEED :NO-ACTION))


(DEFUN COMPLAIN-ABOUT-EXTRANEOUS-METHOD (METHOD METHOD-COMBINATION PATTERNS)
  (DECLARE (DBG:ERROR-REPORTER))
  (METHOD-COMBINATION-ERROR
    "The method ~S cannot be used here because
the method's options, ~:S, are not recognized by ~S method-combination.~:[~;
The valid method option pattern~[~1; is~:;s are~]: ~{~:S~^, ~}.~]"
    METHOD (METHOD-OPTIONS METHOD) (CAR METHOD-COMBINATION)
    PATTERNS (LIST-LENGTH PATTERNS) PATTERNS))

;;; Simple error conditions

(DEFFLAVOR FLAVOR-NOT-FOUND (NAME) (ERROR)
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT FLAVOR-NOT-FOUND) (STREAM)
  (FORMAT STREAM "~S is not the name of a flavor." NAME)
  (WHEN (CLOS:FIND-CLASS NAME NIL)
    (FORMAT STREAM "~%However, it is the name of a CLOS class.")))

(DEFFLAVOR GENERIC-FUNCTION-NOT-FOUND (NAME) (ERROR)
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT GENERIC-FUNCTION-NOT-FOUND) (STREAM)
  (FORMAT STREAM "~S is not the name of a Flavors generic function nor a message." NAME)
  (WHEN (FDEFINEDP NAME)
    (LET ((DEFINITION (CLOS-INTERNALS::FDEFINITION-IN-ENVIRONMENT NAME NIL NIL)))
      (WHEN (CLOS-INTERNALS::GENERIC-FUNCTION-P DEFINITION)
	(FORMAT STREAM "~%However, it is the name of a CLOS generic function.")))))

(DEFFLAVOR UNCLAIMED-MESSAGE-CASE (SUB-MESSAGE) (DBG:UNCLAIMED-SUB-MESSAGE UNCLAIMED-MESSAGE)
  :GETTABLE-INSTANCE-VARIABLES
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT UNCLAIMED-MESSAGE-CASE) (STREAM)
  (IF (NOT (MESSAGE-P DBG:MESSAGE))
      (FORMAT STREAM "The generic function ~S was applied to the argument~P ~{~S~^, ~}.
The second argument was not one of the recognized case-selecting keywords."
	      (FUNCTION-NAME DBG:MESSAGE) (1+ (LENGTH DBG:ARGUMENTS))
	      (LIST* DBG:OBJECT SUB-MESSAGE DBG:ARGUMENTS))
      (FORMAT STREAM "The object ~S received a ~S ~S message.
The ~2:*~S message is handled, but the ~S case of it is not.
The rest of the message was ~:S" DBG:OBJECT DBG:MESSAGE SUB-MESSAGE DBG:ARGUMENTS)))

(DEFMETHOD (:PROCEED UNCLAIMED-MESSAGE-CASE :NEW-SUB-MESSAGE)
	   (&OPTIONAL (NEW-SUB-MESSAGE NIL NEW-SUB-MESSAGE-P))
  "Supply a different case name"
  (UNLESS NEW-SUB-MESSAGE-P
    (LET ((OPS (IF (MESSAGE-P DBG:MESSAGE)
		   (SEND DBG:OBJECT DBG:MESSAGE :WHICH-OPERATIONS)
		   (FUNCALL DBG:MESSAGE DBG:OBJECT :WHICH-OPERATIONS))))
      (IF (AND (MEMBER SUB-MESSAGE OPS)
	       (FQUERY NIL "The ~S case for ~S is now handled.
Do you want to invoke the newly-defined handler? " SUB-MESSAGE DBG:MESSAGE))
	  (SETQ NEW-SUB-MESSAGE SUB-MESSAGE)
	  (SETQ NEW-SUB-MESSAGE (PROMPT-AND-READ ':EXPRESSION
						 "Case name to use instead of ~S:~%"
						 SUB-MESSAGE)))))
  (VALUES ':NEW-SUB-MESSAGE NEW-SUB-MESSAGE))

(DEFFLAVOR INVALID-INITIALIZATION-KEYWORD (FLAVOR-NAME KEYWORDS) (NO-ACTION-MIXIN ERROR)
  :GETTABLE-INSTANCE-VARIABLES
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT INVALID-INITIALIZATION-KEYWORD) (STREAM)
  (FORMAT STREAM "Flavor ~S does not handle the init keyword~P ~{~S~^, ~}"
	  FLAVOR-NAME (LENGTH KEYWORDS) (REVERSE KEYWORDS)))

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE INVALID-INITIALIZATION-KEYWORD :NO-ACTION) (STREAM)
  (FORMAT STREAM "Ignore the unhandled init keyword~P." (LENGTH KEYWORDS)))

(COMPILE-FLAVOR-METHODS FLAVOR-NOT-FOUND GENERIC-FUNCTION-NOT-FOUND UNCLAIMED-MESSAGE-CASE
			INVALID-INITIALIZATION-KEYWORD)

;;; Hairy error processing for COMPOSE-FLAVOR-COMPONENTS
;;; Give the user a break by trying to explain exactly what went wrong
;;; when the flavor components cannot be ordered.

(DEFFLAVOR COMPONENT-ORDERING-ERROR (FLAVOR ALIST COMPONENTS CULL CYCLES ENV) (ERROR)
  :INITABLE-INSTANCE-VARIABLES
  (:READABLE-INSTANCE-VARIABLES (COMPONENTS-TO-BE-INSERTED-ARBITRARILY CULL)))

(DEFMETHOD (:REPORT COMPONENT-ORDERING-ERROR) (STREAM)
  (FORMAT STREAM "Cannot order the components of ~S:" FLAVOR)
  ;; Describe all the cycles found
  (DOLIST (LOSERS CYCLES)
    ;; Print the participants in this cycle
    (IF (CDR LOSERS)
	(FORMAT STREAM "~%  No ordering of ~{~<~%~6@T~2:;~S~>~^, ~} works:" LOSERS)
	;; This printout is in case this component was actually mentioned twice
	;; in the same components list, a dumb thing to do but the error message
	;; would otherwise be obscure.
	(FORMAT STREAM "~%  ~S is required to be in two places at once:" (FIRST LOSERS)))
    ;; Locate and print the relevant ordering constraints
    (EXPLAIN-COMPONENT-ORDERING-ERROR-INTERNAL LOSERS ALIST ENV STREAM)
    ;; Explain any real conflicts in method ordering
    (WHEN (CDR LOSERS)
      (EXPLAIN-COMPONENT-ORDERING-ERROR-METHOD-CLASHES COMPONENTS LOSERS ENV STREAM))))

(DEFMETHOD (:PROCEED COMPONENT-ORDERING-ERROR :NO-ACTION) ()
  :NO-ACTION)

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE COMPONENT-ORDERING-ERROR :NO-ACTION) (STREAM)
  (FORMAT STREAM "Arbitrarily insert ~{~S~^, ~} into the
component list without regard for component-order constraints."
	  CULL))

(COMPILE-FLAVOR-METHODS COMPONENT-ORDERING-ERROR)

;;; Explain why the elements of ALIST that aren't in COMPONENTS couldn't go in
;;; and return the components chosen for recovery.
(DEFUN EXPLAIN-COMPONENT-ORDERING-ERROR (FLAVOR ALIST COMPONENTS ENV)
  (DECLARE (DBG:ERROR-REPORTER))
  ;; Any component that was already accepted can't be part of the problem.
  ;; All other components are known each to have some path that eventually
  ;; reaches the cycle in the graph that is bollixing things up.
  ;; Build a graph, rplacd'able, showing the relations of the possible losers,
  ;; then find all the cycles in that graph, sorted with the smallest cycles first.
  (LET ((CYCLES NIL)
	(CULL NIL)	  
	(GRAPH (LOOP FOR (FLAVOR . PREDECESSORS) IN ALIST
		     UNLESS (MEMBER FLAVOR COMPONENTS)
		       COLLECT (CONS FLAVOR PREDECESSORS))))
    (SETQ CYCLES (SORT (FIND-ALL-CYCLES GRAPH (CAAR GRAPH) ALIST NIL NIL)
		       #'< :KEY #'LENGTH))
    (UNLESS CYCLES
      (BREAK "Cannot find cyclic subset (this can't happen!)"))	;--- debug
    ;; Compute the best list of components to be arbitrarily inserted
    ;; for use in recovery.  This should be the smallest set of flavors that
    ;; has a member in every cycle.  I'm going to be dumb and handle the case
    ;; where the list has to contain more than one component, because the
    ;; intersection of all the cycles is null, naively.
    (SETQ CULL (REDUCE #'INTERSECTION CYCLES))
    (IF CULL
	(SETQ CULL (LIST (FIRST CULL)))
	(DOLIST (CYCLE CYCLES)
	  (UNLESS (INTERSECTION CYCLE CULL)
	    (PUSH (FIRST CYCLE) CULL))))
    (SETQ CULL (REVERSE CULL))			;Copy it, allow for reversal later
    ;; Have to copy the environment since it and flavors in it may have dynamic
    ;; extent, yet the compiler warning system may stash this stuff away.
    (SETQ ENV (COPY-IF-NECESSARY ENV))
    (SIGNAL-PROCEED-CASE (() 'COMPONENT-ORDERING-ERROR
			     :FLAVOR FLAVOR :ALIST ALIST :CYCLES CYCLES
			     :COMPONENTS COMPONENTS :CULL CULL :ENV ENV)
      (:NO-ACTION CULL))))

;; Print out all relationships among the conflicting components
(DEFUN EXPLAIN-COMPONENT-ORDERING-ERROR-INTERNAL (LOSERS ALIST ENV STREAM)
  (LOOP FOR (FLAVOR) IN ALIST
	AS FL = (FIND-FLAVOR FLAVOR NIL ENV) DO
    (IF (NULL FL)				;censor bogus undefined flavors
	(WHEN (MEMBER FLAVOR LOSERS)
	  (FORMAT STREAM "~%~4@T~S is an undefined flavor." FLAVOR))
	(DOLIST (P (FLAVOR-LOCAL-COMPONENT-PRECEDENCE FL))
	  (LOOP FOR (L . R) ON P WHILE R DO
	    (WHEN (MEMBER L LOSERS)
	      (LOOP FOR F IN R DO
		(WHEN (MEMBER F LOSERS)
		  ;; F was specified as having to be to the left of L
		  (IF (EQ F FLAVOR)
		      ;; It was a father/son relationship
		      (FORMAT STREAM "~%~4@T~S depends directly on ~S." F L)
		      ;; It was an elder-brother / younger-brother relationship
		      (FORMAT STREAM
			      "~%~4@T~S has ~S and ~S as direct components in that order."
			      FLAVOR F L))))))))))

;;; Traverse all paths, depth-first, and collect all cycles encountered
;;; Only the minimal cycles are collected, not any larger cycles of which they are kernels
;;; This is much faster than enumerating subsets and testing each for cyclicity
(DEFUN FIND-ALL-CYCLES (GRAPH NODE ALIST TRAIL CYCLES)
  (WITH-STACK-LIST* (NEW-TRAIL NODE TRAIL)	;Remember where we have been
    (LET ((TAIL (MEMBER NODE TRAIL)))
      (WHEN TAIL				;Cycle found
	(RETURN-FROM FIND-ALL-CYCLES		;So return it
	  (ADJOIN-CYCLE (LDIFF NEW-TRAIL TAIL) CYCLES ALIST)))
      (SETQ NODE (ASSOC NODE GRAPH))		;Node name -> node
      (LOOP WHILE (CDR NODE) DO			;Try all paths from here
	(SETQ CYCLES (FIND-ALL-CYCLES GRAPH (POP (CDR NODE)) ALIST NEW-TRAIL CYCLES)))
      (RETURN-FROM FIND-ALL-CYCLES CYCLES))))

(DEFUN ADJOIN-CYCLE (NEW CYCLES ALIST)
  ;; Only consider new cycle if it is not subsumed by a smaller existing cycle
  (WHEN (LOOP FOR OLD IN CYCLES
	      NEVER (LOOP FOR NODE IN OLD ALWAYS (MEMBER NODE NEW)))
    ;; Find the minimal kernel of this cycle.  If there is more than one, find only one.
    ;; The easiest way to do this is by enumerating all subsets and testing each
    ;; for cyclicity.  Enumerate the subsets in ascending order by size.
    ;; This should be fast since the cycle is usually pretty small already.
    (LOOP NAMED ENUMERATE
	  WITH LENGTH = (LENGTH NEW)
	  WITH LIMIT = (ASH 1 LENGTH)
	  FOR SIZE FROM 1 TO LENGTH DO
      (LOOP ;; Enumerate all subsets of a given size
	    FOR MASK = (1- (ASH 1 SIZE)) THEN (NHNWSNOOB MASK) WHILE (< MASK LIMIT) DO
	(WHEN (LOOP NAMED TEST
		    WITH I = (TRAILING-ZEROS MASK)	;See if this subset is cyclic
		    WITH START = (NTH I NEW)
		    WITH F = (ASSOC START ALIST)
		    WITH M = MASK DO
		(SETQ M (LOGAND (LOGNOT (ASH 1 I)) M))	;Clear bit for F
		(WHEN (ZEROP M)				;At end, see if it returns to start
		  (RETURN (MEMBER START (CDR F))))
		(LOOP FOR C IN NEW FOR J FROM 0		;Find next step in cycle
		      FOR B = 1 THEN (+ B B) UNTIL (> B M)
		      DO (WHEN (LOGTEST B M)
			   (WHEN (MEMBER C (CDR F))
			     (RETURN (SETQ F (ASSOC C ALIST) I J))))
		      FINALLY (RETURN-FROM TEST NIL)))	;Failed
	  ;; Found a cycle of minimum size
	  (WHEN (< SIZE LENGTH)
	    (SETQ NEW (LOOP FOR C IN NEW
			    FOR B = 1 THEN (+ B B)
			    WHEN (LOGTEST B MASK)
			      COLLECT C)))
	  (PUSH NEW CYCLES)
	  (RETURN-FROM ENUMERATE)))
	FINALLY (BREAK "This can't happen!")))	;--- debug
  CYCLES)

(DEFUN NHNWSNOOB (A)	;Next higher number with same number of one bits (see HAKMEM)
  (IF (ZEROP A)
      0
      (LET* ((C (LOGAND A (- A)))
	     (B (+ A C)))
	(LOGIOR B (TRUNCATE (ASH (LOGXOR A B) -2) C)))))

(DEFUN TRAILING-ZEROS (N)
  (1- (INTEGER-LENGTH (LOGAND N (- N)))))

;;;; Explain any differences in method inheritance implied by the ordering unclarity

;; This only looks at local methods, not inherited ones.  I think that's correct.
(DEFUN EXPLAIN-COMPONENT-ORDERING-ERROR-METHOD-CLASHES (COMPONENTS LOSERS ENV STREAM)
  ;; First find all generics for which more than one of the LOSERS has a method
  ;; Flush flavors that aren't defined
  (LET* ((REAL-LOSERS (REMOVE-IF-NOT #'(LAMBDA (FLAVOR) (FIND-FLAVOR FLAVOR NIL ENV)) LOSERS))
	 (CONFLICTS NIL)
	 (N (LENGTH REAL-LOSERS))
	 (ORDER (MAKE-LIST N)))
    (LOOP FOR (FLAVOR . REST) ON REAL-LOSERS WHILE REST DO
      (LOOP FOR (GENERIC . METHODS) IN (FLAVOR-METHOD-TABLE (FIND-FLAVOR FLAVOR T ENV)) DO
	(IGNORE METHODS)
	(UNLESS (MEMBER GENERIC CONFLICTS)
	  (WHEN (LOOP FOR FLAVOR IN REST
		      THEREIS (CDR (ASSOC GENERIC
					  (FLAVOR-METHOD-TABLE (FIND-FLAVOR FLAVOR T ENV)))))
	    (PUSH GENERIC CONFLICTS)))))
    ;; Now see if the methods contributing to the handler for each of these generics are
    ;; affected by the order of combination of the LOSERS.  It's possible that the conflicting
    ;; methods would end up being shadowed anyway, or don't really conflict because one is
    ;; a :BEFORE and the other is a :AFTER.
    (LOOP WITH FLAVOR-NAME = (CAR (LAST COMPONENTS)) WITH METHOD-COMBINATION = NIL
	  FOR GENERIC IN CONFLICTS
	  AS COMBINED-METHOD-LISTS = NIL DO
      ;; Try all possible orderings of LOSERS
      (SETF (FIRST ORDER) -1)
      (LOOP NAMED PERMUTE WITH POS = 0 DO
	(WHEN (= POS N)
	  ;; POS is all the way to the end of ORDER, so we have a permutation
	  (LET ((COMPONENTS (COPY-LIST COMPONENTS)))
	    (LOOP FOR I IN ORDER DO (PUSH (NTH I REAL-LOSERS) COMPONENTS))
	    (LET ((ALIST (COLLECT-METHODS FLAVOR-NAME :GENERIC GENERIC
						      :COMPONENTS (NREVERSE COMPONENTS)
						      :ENV ENV :ERROR-P NIL)))
	      (SETQ METHOD-COMBINATION (SECOND (FIRST ALIST)))
	      (MULTIPLE-VALUE-BIND (NIL NIL COMBINED-METHOD-LIST)
		  ;;--- Trap METHOD-COMBINATION-ERROR herein?
		  (COMBINE-METHODS GENERIC FLAVOR-NAME METHOD-COMBINATION
				   (CDDR (FIRST ALIST)) :ERROR-P NIL :ENV ENV)
		(PUSHNEW (REMOVE-IF-NOT #'(LAMBDA (METHOD)
					    (MEMBER (METHOD-FLAVOR METHOD) REAL-LOSERS))
					COMBINED-METHOD-LIST)
			 COMBINED-METHOD-LISTS :TEST #'EQUAL))))
	  (DECF POS))
	;; Try all possible permutations of stuff to the right of POS
	;; Search for the next valid value at POS
	(LOOP FOR X FROM (1+ (NTH POS ORDER)) DO
	  (WHEN (= X N)
	    ;; Exhausted possibilities, move POS left
	    (DECF POS)
	    (WHEN (MINUSP POS)
	      (RETURN-FROM PERMUTE))
	    (RETURN))
	  (UNLESS (FIND X ORDER :END POS)
	    ;; Valid value, accept it
	    (SETF (NTH POS ORDER) X)
	    (INCF POS)
	    (FILL ORDER -1 :START POS)
	    (RETURN))))
      ;; Now COMBINED-METHOD-LISTS has all the possible method orderings
      (COND ((CDR COMBINED-METHOD-LISTS)
	     ;; There is more than one possible ordering, show the conflicts
	     (FORMAT STREAM "~%~4@TMethods for ~S conflict: " GENERIC)
	     ;; Print the method names concisely
	     (PRINT-METHOD-SPEC-LIST STREAM ", " "      " METHOD-COMBINATION
		 (LET ((METHODS NIL))
		   (LOOP UNTIL (EVERY #'NULL COMBINED-METHOD-LISTS)
			 AS METHOD = (FIRST (FIRST COMBINED-METHOD-LISTS)) DO
		     (UNLESS (EVERY #'(LAMBDA (L) (EQUAL (FIRST L) METHOD))
				    (REST COMBINED-METHOD-LISTS))
		       (DOLIST (L COMBINED-METHOD-LISTS)
			 (PUSHNEW (FIRST L) METHODS :TEST #'EQUAL)))
		     (LOOP FOR L ON COMBINED-METHOD-LISTS DO
		       (POP (FIRST L))))
		   METHODS)))
	    (T
	     ;; No actual conflict here
	     (SETQ CONFLICTS (DELETE GENERIC CONFLICTS)))))
    ;; If there were no actual conflicts, say so
    (UNLESS CONFLICTS
      (FORMAT STREAM "~%~4@THowever ~{~S~^, ~} have no conflicting methods." LOSERS))))

(DEFUN PRINT-METHOD-SPEC-LIST (STREAM SEPARATOR LINE-PREFIX METHOD-COMBINATION LIST)
  (FORMATTING-TEXTUAL-LIST (STREAM :SEPARATOR SEPARATOR :AFTER-LINE-BREAK LINE-PREFIX)
    (LET ((LAST-METHOD NIL))
      (DOLIST (METHOD LIST)
	(FORMATTING-TEXTUAL-LIST-ELEMENT (STREAM)
	  (PRINT-METHOD-SPEC-LIST-ELEMENT METHOD LAST-METHOD METHOD-COMBINATION STREAM))
	(SETQ LAST-METHOD METHOD)))))

;--- Output is still confusing, maybe needs some User-Interface attention
(DEFUN PRINT-METHOD-SPEC-LIST-ELEMENT (METHOD LAST-METHOD METHOD-COMBINATION STREAM)
  (DW:WITH-OUTPUT-AS-PRESENTATION (:OBJECT METHOD
				   :TYPE (METHOD-PRESENTATION-TYPE METHOD)
				   :STREAM STREAM
				   :ALLOW-SENSITIVE-INFERIORS NIL)	;avoid user confusion
    (LET ((PRINTED-SOMETHING NIL))
      ;; Normally they're all for the same generic, but inlined methods
      ;; can be for a different generic, so try not to be confusing
      (UNLESS (EQ (METHOD-GENERIC METHOD) (METHOD-GENERIC LAST-METHOD))
	(WHEN (METHOD-GENERIC LAST-METHOD)
	  (FORMAT STREAM "(for ~S)" (METHOD-GENERIC METHOD))
	  (SETQ PRINTED-SOMETHING T)))
      ;; Print flavor name only when it changes
      (UNLESS (EQ (METHOD-FLAVOR METHOD) (METHOD-FLAVOR LAST-METHOD))
	(WHEN PRINTED-SOMETHING (WRITE-CHAR #\SPACE STREAM))
	(PRIN1 (METHOD-FLAVOR METHOD) STREAM)
	(SETQ PRINTED-SOMETHING T))
      ;; Represent primary methods by just the flavor name, when possible
      (UNLESS (AND (NEQ (METHOD-FLAVOR METHOD) (METHOD-FLAVOR LAST-METHOD))
		   (EQ (METHOD-TYPE METHOD) 'METHOD)
		   (OR (NULL (METHOD-OPTIONS METHOD))
		       (AND (NULL (CDR (METHOD-OPTIONS METHOD)))
			    (EQ (CAR (METHOD-OPTIONS METHOD)) (FIRST METHOD-COMBINATION)))))
	(WHEN PRINTED-SOMETHING (WRITE-CHAR #\SPACE STREAM))
	(LET ((*STANDARD-OUTPUT* STREAM))
	  (PRINT-METHOD-SPEC METHOD METHOD-COMBINATION))))))

(DEFUN METHOD-PRESENTATION-TYPE (METHOD)
  (IF (MEMBER (METHOD-TYPE METHOD) *FDEFINABLE-METHOD-TYPES*)
      'FUNCTION-SPEC
      'INSTANCE-VARIABLE-ACCESSOR))
