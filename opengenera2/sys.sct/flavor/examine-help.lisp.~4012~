;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FLAVOR; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defparameter D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*doc-record-name-from-command-name*
0  (loop for pair
	in '((com-show-flavor-components "Show Flavor Components Command")
	     (com-show-flavor-operations "Show Flavor Operations Command")
	     (com-show-flavor-initializations "Show Flavor Initializations Command")
	     (com-show-flavor-instance-variables "Show Flavor Instance Variables Command")
	     (com-show-flavor-methods "Show Flavor Methods Command")
	     (com-show-flavor-functions "Show Flavor Functions Command")
	     (com-show-flavor-handler "Show Flavor Handler Command")
	     (com-show-flavor-dependents "Show Flavor Dependents Command")
	     (com-show-flavor-differences "Show Flavor Differences Command")
	     (com-show-function-arguments "Show Function Arguments Command")
	     (com-clear-display "Clear Display Flavor Examiner Command") 
	     (com-show-generic-function "Show Generic Function Command"))
	for (command-name doc-name) = pair
	;; ---Oh foo, we can't do this until after DOC system is loaded!
	;;---when (sage:documented-p doc-name 'sage:fragment)
	  collect pair))

(defun 1sage-preformat-doc-text0 (string)
  (sage:with-document-and-device-types ()
    (sage:with-sage-device ((cli::follow-synonym-stream cl:*standard-output*) :screen)
      (let ((line-source (sage:formatted-sage-text-line-source
			   (list
			     (sage:make-sage-envr 'sage:text '((sage:leftmargin "-4"))
						  (with-input-from-string (in-stream string)
						    (sage:sage-parse in-stream)))))))
	line-source))))

;;; The text here is basically sage language, 1except0 it lives inside a Common Lisp string.
;;; That means three things:
;;; -- backslashes must be doubled.  Mainly this means you have to type @\ as @\\.
;;; -- doublequotes must be backslashed.  "foo" becomes \"foo\".
;;; -- Open parens in first column must be backslashed.  Otherwise Zmacs gets confused.
;;;
;;; Since these are not part of the DOC system, they must get sage-compiled at load
;;; time, not at 

(defparameter 1*examiner-overview-text*
0	      (sage-preformat-doc-text "
Flavor Examiner enables you to examine flavors, methods, generic 
functions, and internal flavor functions defined in the Lisp 
environment.   It is a congenial environment for using the Show Flavor 
commands.  

You can select Flavor Examiner with @k(SELECT X),
or the Select Activity Flavor Examiner command.

@Comment(---These should be mouse sensitive, of course, except
    that the Sage formatter currently doesn't support presentations.)

Use the command Help Examiner to learn about Flavor Examiner's
user interface.

Use the command Help Commands to get a summary of Flavor Examiner's
commands.

Use the @k[Help] key to get a list of additional available  
commands.

Use the command Help @i<command-name> to learn about a particular command.
"))

(defparameter 1*examiner-ui-summary-text*
0	      (sage-preformat-doc-text "
Flavor Examiner's frame is divided into five panes.  

@b(Menu of Commands) @em() the top-left pane 

The top-left pane offers a menu of flavor-related commands, such as
@t(Flavor Components); this is the same as the Show Flavor Components
command.   You can choose one of these commands by clicking left or
right.   Clicking left makes the command appear in the Command Input Pane. 
Clicking right makes the command appear and also displays the 
command's arguments, in a form that you can edit. 

The @t(HELP) command displays documentation on the flavor-related
commands.   The @k(HELP) key provides information on all the command
processor commands you can enter.  The @t(CLEAR DISPLAY) command clears
the display from the three output panes; it first asks for confirmation.

When you click left or right on a flavor-related command name, the
command appears in the Command Input Pane. 

@b(Command Input Pane) @em() the bottom-left pane 

The bottom-left pane is a command processor window.   If you click on
commands in the Menu of Commands, the commands appear in this window.
You can enter arguments (or commands) by typing them at the keyboard. 
This pane saves the history of all commands entered.   You can click on 
the scroll bar to show different parts of the history.

You are not restricted to the commands in the Menu of Commands.   You
can give any command processor command.   

The output of all commands appears in the Main Command Output Pane. 

@b(Main Command Output Pane) @em() the bottom-right pane

Each command's output appears here.   This pane saves the history of the
output of all flavor-related commands.  You can use the scroll bar
to show different parts of the history.

Parts of the output of flavor-related commands are mouse-sensitive.
You can make use of that by clicking on a flavor name or method name to
enter it as an argument to another command.   

If you give commands that are not flavor-related (such as the Show Host
command), the output appears in a typeout window in the Main Command
Output Pane.   This kind of output is not saved in the history of this pane.
The typeout window is itself a dynamic window with its own history. 

When the output of the current command appears in the Main Command
Output Pane, the output of the previous command is copied to the
Previous Command Output Pane.  

@b(Previous Command Output Pane) @em() the middle-right pane

This pane displays the output of the previous command. 
This pane does not save a history, but the second-to-last 
command is copied to the Second-to-Last Command Output Pane.   

@b(Second-to-last Command Output Pane) @em() the top-right pane

This pane displays the output of the second-to-last command.
This pane does not save a history.   When another command is given, the
contents of the Previous Command Output Pane are copied to this pane.
Similarly, the contents of the Main Command Output Pane are copied to
the Previous Command Output Pane.  
"))

(defparameter 1*show-flavor-command-summary-help*
0	      (sage-preformat-doc-text "
Flavor Examiner provides the following commands for analyzing
Flavors-based programs.  Use the command Help @i<command-name> to
learn in detail what each command does.

@begin(description,leftmargin +6, indent -6)
Flavor Components @i(flavor keywords...)@\\Answers: What is the order of flavor
components, and why did the system pick that order?

Flavor Dependents @i(flavor keywords...)@\\Answers: What flavors inherit from
this one? 

Flavor Instance Variables @i(flavor keywords...)@\\Answers: What state is
maintained by instances of this flavor?  

Flavor Initializations @i(flavor keywords...)@\\Answers: How are new instances
of this flavor initialized?

Flavor Functions @i(flavor keywords)@\\Answers: What internal flavor functions 
are defined for this flavor, or inherited from its component flavors?

Flavor Methods @i(flavor keywords...)@\\Answers: What methods are defined for
this flavor, or inherited from its component flavors? 

Flavor Operations @i(flavor keywords...)@\\Answers: What operations
\(generic functions and messages) are supported by instances of this
flavor? 

Generic Function @i(operation keywords...)@\\Answers: 
What are the general characteristics of this generic function?  
What flavors provide a method for this generic function?
What methods are implemented for this generic function?

Flavor Handler @i(operation flavor keywords...)@\\Answers: When an operation
\(generic function or message) is applied to an instance of a given
flavor, what methods implement the operation? What method combination
type is used?   What is the order of methods in the handler? 

Function Arguments @i(function-spec)@\\Answers: What are the arguments
of this function?
@end(description)

These commands accept keywords that modify their behavior.   Keyword
options are available to request information in brief form, in detailed
form, sorted by flavor, and so on. 
"))

(define-presentation-type 1examiner-help-topic0 ()
   :expander `((or null
		   ((member :examiner :commands))
		   ((cp:command-name :command-table ,(cp:find-command-table 'examiner)))
		   ))
   :printer ((object stream)
	     (typecase object
	       ((null) )
	       ((member :examiner :commands)
		(present object '((member :examiner :commands)) :stream stream))
	       (otherwise
		 ;; ---How can this be right?
		 (present object
			  `((cp:command-name :command-table
					     ,(cp:find-command-table 'examiner)))
			  :stream stream))))
   :description "Examiner, Commands, or a command name")

(define-presentation-translator 1menu-to-examiner-help-topic
0   (dw::command-menu-item
     examiner-help-topic
     :tester ((ignore &key presentation)
	      (dw:with-inherited-presentation-type-arguments
		  (dw::command-menu-item (dw::presentation-type presentation) :error-p nil)
		(string-equal (cp::command-table-name dw::command-table) 'examiner))))
   (object)
  (values (cp::command-table-lookup-command (cp:find-command-table 'flavor::examiner) object)
	  ))


(pushnew 'com-help *examiner-redisplay-hacking-commands*)
(dw:define-program-command (1com-help0 examiner :menu-accelerator T)
			   ((what 'examiner-help-topic))
  (flet ((canned (stuff)
	   (send stuff :take-it-from)
	   (sage:with-sage-device ((cli::follow-synonym-stream cl:*standard-output*) :screen)
	     (sage:display-on-device #'identity stuff))))
    (macrolet ((without-tiny (&body body)
		 `(let ((sage::*make-environments-tiny* nil))
		    ,@body)))
      (case what
	((nil)
	 (without-tiny
	   (canned *examiner-overview-text*)))
	((:examiner)
	 (without-tiny
	   (canned *examiner-ui-summary-text*)))
	((:commands)
	 (without-tiny
	   (canned *show-flavor-command-summary-help*)))
	(otherwise
	  (let ((topic (second (assoc what *doc-record-name-from-command-name*))))
	    ;;---It would have been better to have rejected this in the p-t.
	    (if (null topic)
		(format T "~&     Sorry, we seem not to have documentation for ~q."
			(lambda ()
			  (present what 'cp:command-name :stream format:*format-output*)))
		(sage:keeping-sage-files
		  (sage:with-sage-device ((cli::follow-synonym-stream cl:*standard-output*)
					  :screen)
		    (let ((source (sage:formatted-sage-record-line-source
				    (sage:find-record-group-for-topic-and-type
				      topic 'sage:fragment))))
		      ;;---I tried pretty hard to make a way to wrap 
		      ;; @Begin(Text, Leftmargin -4)...@End(Text) around the record.
		      ;; I gave up before I found a way that didn't entail even more
		      ;; kludgery than I was willing to do.
		      (canned source)))))))))))

(cp:install-command 'examiner 'sage::com-show-documentation)
