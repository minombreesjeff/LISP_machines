;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: FLAVOR -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Bootstrap various flavor dependent things at the right time (which is 
;;; controlled by when this file is loaded).


;;;; Bootstrap Flavors' dependence on Hash Tables

;At this point there should no longer be any forward references to generic functions
;that aren't defined yet, so replace the -cold version of this function.
;The only reason this is different from FIND-GENERIC-FUNCTION is so that one of them
;can be replaced with a bootstrapping function while the other is left alone.
(DEFUN FIND-GENERIC-FUNCTION-AS-CONSTANT (NAME)
  (FIND-GENERIC-FUNCTION NAME))

;Snap forward references left by FIND-GENERIC-FUNCTION-AS-CONSTANT-COLD
(DEFUN BOOTSTRAP-DEFGENERIC-CONSTANT-REFERENCES ()
  (SI:MAP-COMPILED-FUNCTIONS T NIL NIL
    #'(LAMBDA (FUNCTION IGNORE)
	#+3600
	(SI:DO-COMPILED-FUNCTION-CONSTANT-TABLE (VAL LOC) FUNCTION
	  (WHEN (AND (LISTP VAL)
		     (EQ (CAR VAL) SI:*COLD-FIND-GENERIC-FUNCTION-MARKER*))
	    (SETF (LOCATION-CONTENTS LOC)
		  (FIND-GENERIC-FUNCTION-AS-CONSTANT (SECOND VAL)))))
	#+IMach
	(SI:DO-COMPILED-FUNCTION-INSTRUCTIONS (VAL LOC) FUNCTION
	  (WHEN (TYPE-MEMBER VAL
			     DTP-LIST
			     DTP-CALL-GENERIC
			     DTP-CALL-GENERIC-PREFETCH
			     DTP-GENERIC-FUNCTION)
	    (WHEN (EQ (%MEMORY-READ VAL :CYCLE-TYPE %MEMORY-SCAVENGE)
		      SI:*COLD-FIND-GENERIC-FUNCTION-MARKER*)
	      (%MEMORY-WRITE
		LOC
		(%SET-TAG
		  (FIND-GENERIC-FUNCTION-AS-CONSTANT (SECOND (%MAKE-POINTER DTP-LIST VAL)))
		  (%TAG VAL)))
	      #+VLM (%COPROCESSOR-WRITE LOC %COPROCESSOR-REGISTER-FLUSH-CACHES-FOR-VMA)))))))

;Hash tables now work, so remove alist kludges used for bootstrapping
(DEFUN BOOTSTRAP-FLAVOR-TABLES ()
  (WHEN (LISTP *STANDARDIZED-GENERIC-FUNCTION-NAMES*)
    (LET ((HT (MAKE-HASH-TABLE :TEST #'EQUAL :AREA *FLAVOR-AREA* :NUMBER-OF-VALUES 0)))
      (DOLIST (NAME *STANDARDIZED-GENERIC-FUNCTION-NAMES*)
	(SETF (GETHASH NAME HT) NAME))
      (SETQ *STANDARDIZED-GENERIC-FUNCTION-NAMES* HT)))
  (WHEN (LISTP *UNDEFINED-METHOD-HASH-TABLE*)
    (LET ((HT (MAKE-HASH-TABLE :TEST #'EQUAL :AREA *FLAVOR-AREA*)))
      (DOLIST (METHOD-HOLDER *UNDEFINED-METHOD-HASH-TABLE*)
	(SETF (GETHASH (METHOD-HOLDER-FUNCTION-SPEC METHOD-HOLDER)
		       *UNDEFINED-METHOD-HASH-TABLE*)
	      METHOD-HOLDER))
      (SETQ *UNDEFINED-METHOD-HASH-TABLE* HT))))

(DEFUN REBOOTSTRAP-FLAVOR-TABLES ()
  (LET ((NEW-TABLE (MAKE-HASH-TABLE :TEST #'EQUAL :AREA *FLAVOR-AREA* :NUMBER-OF-VALUES 0)))
    (MAPHASH (LAMBDA (KEY VALUE)
	       (UNLESS (EQ KEY VALUE)
		 (ERROR "Flavor tables are screwed up"))
	       (SETF (GETHASH KEY NEW-TABLE) KEY))
	     *STANDARDIZED-GENERIC-FUNCTION-NAMES*)
    (SETQ *STANDARDIZED-GENERIC-FUNCTION-NAMES* NEW-TABLE)))

;; The ordering here is very important.
(DEFUN BOOTSTRAP-FLAVORS ()
  (BOOTSTRAP-DEFGENERIC-CONSTANT-REFERENCES)
  (PROCESS::BOOTSTRAP-LOCKS)
  (CLI::BOOTSTRAP-TABLES)
  (BOOTSTRAP-FLAVOR-TABLES))

(ADD-INITIALIZATION "Bootstrap flavors and tables." '(BOOTSTRAP-FLAVORS) '(:ONCE))

;Gets called after the compiler has been loaded
(DEFUN COMPILE-INTERPRETED-COMBINED-METHODS ()
  (DOLIST (FCT *FLAVOR-COMPILE-TRACE-LIST*)
    (LET ((METHOD (FCT-FUNCTION-SPEC FCT)))
      (WHEN (AND (FDEFINEDP METHOD)		;Flavor still defined
		 (SI:INTERPRETED-FUNCTION-P (FDEFINITION METHOD)))
	(IF (NOT (VARIABLE-BOUNDP #'COMPILE))
	    (ERROR "~S is an interpreted combined method, but the compiler was not loaded."
		   METHOD)
	  (FORMAT T "~&~S is an interpreted combined method,~@
		     presumably due to compiling something in wrong environment.~@
		     The combined method is being compiled now.~%"
		  METHOD)
	  (COMPOSE-METHOD-COMBINATION (METHOD-FLAVOR METHOD)
				      :GENERIC (METHOD-GENERIC METHOD)))))))

(ADD-INITIALIZATION "Compile interpreted combined methods"
		    '(COMPILE-INTERPRETED-COMBINED-METHODS)
		    ()
		    'SI:*AFTER-LOADING-SYSTEM-SYSTEM-INITIALIZATION-LIST*)

;Gets called after the compiler has been loaded
(DEFUN VERIFY-COMBINED-METHOD-BOOTSTRAP-GUESSES ()
  (TV:DOLIST-NOTING-PROGRESS (ENTRY *MAKE-COMBINED-METHOD-BOOTSTRAP-GUESSES*
				    "Verifying combined method bootstrap guesses")
    (DESTRUCTURING-BIND (GENERIC FLAVOR METHOD) ENTRY
      (CONDITION-CASE (ERROR)
	   (MULTIPLE-VALUE-BIND (FUNCTION-SPECS DEFUNS)
	       (COLLECT-COMBINED-METHODS FLAVOR :GENERIC GENERIC :IGNORE-EXISTING-METHODS NIL)
	     (COND ((NULL FUNCTION-SPECS)
		    (FORMAT T "~2&Method for ~S of ~S was guessed as ~S~@
				but no method seems to exist now.~%"
			    GENERIC FLAVOR METHOD))
		   ((NOT (EQUAL (FIRST FUNCTION-SPECS) METHOD))
		    (FORMAT T "~2&Method for ~S of ~S was guessed as ~S~@
				but it should have been ~S~%This is being fixed now.~%"
			    GENERIC FLAVOR METHOD (FIRST FUNCTION-SPECS))
		    (COMPOSE-METHOD-COMBINATION FLAVOR :GENERIC GENERIC))
		   ((NOT (NULL DEFUNS))		;Existing combined method needs remaking
		    (FORMAT T "~2&Method for ~S of ~S was guessed as ~S~@
			     which was correct but it was compiled in the wrong environment.~@
			     The combined method is being recompiled now.~%"
			    GENERIC FLAVOR METHOD)
		    (LET ((OLD-DERIVATION (ASSOC 'COMBINED-METHOD-DERIVATION
						 (DEBUGGING-INFO METHOD))))
		      (COMPOSE-METHOD-COMBINATION FLAVOR :GENERIC GENERIC)
		      (LET ((NEW-DERIVATION (ASSOC 'COMBINED-METHOD-DERIVATION
						   (DEBUGGING-INFO METHOD))))
			(UNLESS (EQUAL (SECOND OLD-DERIVATION) (SECOND NEW-DERIVATION))
			  (FORMAT T
				  "Method-combination changed from ~{~S~^, ~} to ~{~S~^, ~}.~%"
				  (SECOND OLD-DERIVATION) (SECOND NEW-DERIVATION)))
			(UNLESS (EQUAL (THIRD OLD-DERIVATION) (THIRD NEW-DERIVATION))
			  (FORMAT T "Methods changed from ~S~%  to ~S.~%"
				  (THIRD OLD-DERIVATION) (THIRD NEW-DERIVATION)))
			(UNLESS (EQUAL (FOURTH OLD-DERIVATION) (FOURTH NEW-DERIVATION))
			  (FORMAT T "Wrapper-sources changed.~%")))))))
	 (METHOD-COMBINATION-ERROR
	   (FORMAT T "~2&Method for ~S of ~S was guessed as ~S~@
		    Can't verify because ~S~%"
		   GENERIC FLAVOR METHOD ERROR))))))

(ADD-INITIALIZATION "Verify combined method bootstrap guesses"
		    '(VERIFY-COMBINED-METHOD-BOOTSTRAP-GUESSES)
		    ()
		    'SI:*AFTER-LOADING-SYSTEM-SYSTEM-INITIALIZATION-LIST*)
