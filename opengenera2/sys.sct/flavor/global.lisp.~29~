;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: FLAVOR -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This has to be a separate file for compiling/bootstrapping reasons.

;;;; The GENERIC-FUNCTION-NAME data type

(DEFTYPE GENERIC-FUNCTION-NAME (&KEY DEFINED)
  (IF (AND DEFINED (NEQ DEFINED '*))
      `(AND (OR (AND SYMBOL (NOT NULL))
		(AND LIST (SATISFIES VALID-DERIVED-FUNCTION-NAME)))
	    (SATISFIES DEFINED-GENERIC-FUNCTION-NAME))
      `(OR (AND SYMBOL (NOT NULL))
	   (AND LIST (SATISFIES VALID-DERIVED-FUNCTION-NAME)))))

(DEFUN DEFINED-GENERIC-FUNCTION-NAME (OBJECT)
  (FIND-GENERIC-FUNCTION OBJECT NIL))

;--- I'm not sure I should have to say this explicitly
(CLI::DEFINE-TYPE-PRINTER GENERIC-FUNCTION-NAME (STREAM &key defined)
  (PRINT-TYPE-DESCRIPTION (if defined
			      `(and (OR (AND SYMBOL (NOT NULL))
					(AND LIST (SATISFIES VALID-DERIVED-FUNCTION-NAME)))
				    (satisfies defined-generic-function-name))
			    `(OR (AND SYMBOL (NOT NULL))
				 (AND LIST (SATISFIES VALID-DERIVED-FUNCTION-NAME))))
			  STREAM))

(DEFUN VALID-DERIVED-FUNCTION-NAME (NAME)
  (AND ;; Test (= (LENGTH NAME) 2) without vulnerability to dotted lists
       (CONSP NAME) (CONSP (CDR NAME)) (NULL (CDDR NAME))
       (MEMBER (FIRST NAME) SI:*DERIVED-FUNCTION-TYPES*)
       (VALIDATE-FUNCTION-SPEC (SECOND NAME))))

;;; Abstractions to extract fields from method function-specs
;;; Function specs for our methods are (type generic flavor options...)
;;; where the type is usually FLAVOR:METHOD, but there are others (see lists below)

(DEFSUBST METHOD-TYPE (FUNCTION-SPEC) (FIRST FUNCTION-SPEC))
;Callers of METHOD-GENERIC may need to be careful to STANDARDIZE-GENERIC-FUNCTION-NAME
(DEFSUBST METHOD-GENERIC (FUNCTION-SPEC) (SECOND FUNCTION-SPEC))
(DEFSUBST METHOD-FLAVOR (FUNCTION-SPEC) (THIRD FUNCTION-SPEC))
(DEFSUBST METHOD-OPTIONS (FUNCTION-SPEC) (CDDDR FUNCTION-SPEC))

;;; For READ/WRITE/LOCATE-INSTANCE-VARIABLE function specs, the variable name
(DEFSUBST ACCESSOR-INSTANCE-VARIABLE (FUNCTION-SPEC) (FOURTH FUNCTION-SPEC))

;;;; Miscellaneous variables

;This area is used for semipermanent storage.  After a full-gc/reorder-memory,
;existing objects in this area are made static.  Other objects in this area are
;subject to dynamic garbage collection.
;We assume that the ephemeral garbage collector is in use; temporary data
;and data that are likely to change as programming proceeds go in the default
;area, which is assumed to be ephemeral.  Objects created as part of the
;compile time environment go in the default area, not in *flavor-area*.
;We assume that no one would be fool enough to bind default-cons-area to a temporary area.
(DEFVAR *FLAVOR-AREA* (MAKE-AREA :NAME '*FLAVOR-AREA* :GC :DYNAMIC))

;This area is used for things that are guaranteed never to become garbage and that
;we don't want to have moving around, such as generic-functions.
(DEFVAR *FLAVOR-STATIC-AREA* (MAKE-AREA :NAME '*FLAVOR-STATIC-AREA* :GC :STATIC
					:REPRESENTATION :LIST))

(DEFVAR *FLAVOR-PENDING-DEPENDS* NIL)	;Back-pointers from not-yet-defined flavors

(DEFVAR *FLAVOR-COMPILE-TRACE-LIST* NIL)

(DEFSTRUCT (FLAVOR-COMPILE-TRACE-ENTRY (:TYPE LIST) (:CONC-NAME FCT-)
				       (:ALTERANT NIL) (:COPIER NIL))
  FUNCTION-SPEC			;Name of a combined method
  DERIVATION			;Its derivation
  PREVIOUS-FUNCTION-SPEC	;Replaced function, NIL if none, or IGNORE-EXISTING-METHOD
  PREVIOUS-DERIVATION		;Its derivation
  PATHNAME)			;File that was being loaded at the time

(DEFVAR *ALL-FLAVOR-NAMES* NIL)			;List of names of all flavors
(DEFVAR *ALL-FLAVOR-NAMES-AARRAY*		;For editor's completing reader
						;approx 2900. flavors in System 367.
	(SI:MAKE-AARRAY 3000. :NAME "flavor name completion table"
			      :AREA PERMANENT-STORAGE-AREA))

(DEFVAR *ALL-GENERIC-FUNCTION-NAMES* NIL)	;List of names of all generic functions
(DEFVAR *ALL-GENERIC-FUNCTION-NAMES-AARRAY*	;For completion over generic function names
						;approx 6700. generic functions in System 367.
	  (SI:MAKE-AARRAY 7000. :NAME "generic function name completion table"
				:AREA PERMANENT-STORAGE-AREA))

(ADD-INITIALIZATION "Sort FLAVOR Aarrays"
  '(PROGN (SI:SORT-AARRAY FLAVOR::*ALL-FLAVOR-NAMES-AARRAY*)
	  (SETQ FLAVOR::*ALL-FLAVOR-NAMES-AARRAY*
		(FOLLOW-STRUCTURE-FORWARDING FLAVOR::*ALL-FLAVOR-NAMES-AARRAY*))
	  (SI:SORT-AARRAY FLAVOR::*ALL-GENERIC-FUNCTION-NAMES-AARRAY*)
	  (SETQ FLAVOR::*ALL-GENERIC-FUNCTION-NAMES-AARRAY*
		(FOLLOW-STRUCTURE-FORWARDING FLAVOR::*ALL-GENERIC-FUNCTION-NAMES-AARRAY*)))
  '(:BEFORE-COLD))

;;; Error routine in this file so it's available in the cold load

;;; Routine for reporting recoverable errors that are associated with
;;; a particular flavor (actually with the DEFFLAVOR form that defined it).
;;; ERROR-P is T to signal an error, NIL to issue a warning.
(DEFUN FLAVOR-ERROR (FLAVOR ERROR-P FORMAT-STRING &REST ARGS)
  (UNLESS (SYMBOLP FLAVOR)
    (SETQ FLAVOR (FLAVOR-NAME FLAVOR)))
  ;; Using the :FATAL T option to WARN doesn't work well.  For one thing,
  ;; no one prints out the DEFAULT-WARNING-FUNCTION.  In addition, I want
  ;; to be able to proceed from these errors, and fatal warnings aren't
  ;; proceedable.  Give up on getting the fatal ones into the compiler-warnings
  ;; database and just use CERROR to report them.
  (IF ERROR-P
      (CERROR "Proceed, ignoring the problem."
	      "Error in flavor ~S~%~?" FLAVOR FORMAT-STRING (COPY-LIST ARGS))
      (STACK-LET ((OPTIONS `(:FUNCTION ,FLAVOR
			     :DEFINITION-TYPE DEFFLAVOR)))
	(APPLY #'WARN OPTIONS FORMAT-STRING ARGS))))

;; GC Dependence
;; This is used by both flavors and tables
;; It therefore has to be loaded here.  Loading it in GC is too late,
;; and it didn't seem low-level enough to go into SYSDEF.

(DEFENUMERATED *GC-DEPENDENCE-TYPES*
	       (%GC-DEPENDENCE-NONE
		%GC-DEPENDENCE-STATIC
		%GC-DEPENDENCE-DYNAMIC
		%GC-DEPENDENCE-EPHEMERAL))

