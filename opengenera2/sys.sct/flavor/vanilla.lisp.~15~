;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: FLAVOR -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains the basic flavor on which most other flavors are built

;;;---
;;; Note that this is still emulating the old message-based protocols.
;;; Later some of these operations might be turned into generic functions;
;;; I'll have to decide what package they go in.  However, the issue is not
;;; just the names; the semantics of many of these assume message-passing.

(DEFFLAVOR VANILLA () ()
  :NO-VANILLA-FLAVOR
  (:AREA-KEYWORD :AREA)				;Default is same keyword as MAKE-ARRAY
  (:DOCUMENTATION :BASIC "The flavor that provides standard object behavior"))

(DEFMETHOD (:WHICH-OPERATIONS VANILLA) ()
  (FLAVOR-ALL-GENERICS (%INSTANCE-FLAVOR SELF)))

(DEFMETHOD (:OPERATION-HANDLED-P VANILLA) (OPERATION)
  (MEMBER OPERATION (FLAVOR-ALL-GENERICS (%INSTANCE-FLAVOR SELF))))

(DEFMETHOD (:SEND-IF-HANDLES VANILLA) (MESSAGE &REST ARGS)
  (WHEN (WITHOUT-INTERRUPTS (HANDLER-TABLE-SEARCH (%INSTANCE-FLAVOR SELF) MESSAGE))
    (APPLY SELF MESSAGE ARGS)))

;;; Get the function that would handle an operation for an object
(DEFGENERIC GET-HANDLER-FOR (OBJECT OPERATION)
  "Given a functional object, return its subfunction to do the given operation or NIL.
Returns NIL if it does not reduce to a method selection or if it does not handle operation."
  (:FUNCTION
    (LOOP					;Repeat until reduced (if possible)
      (TYPECASE OBJECT
	(INSTANCE
	  (RETURN (FUNCALL (GENERIC GET-HANDLER-FOR) OBJECT OPERATION)))
	(ARRAY				;Set object to NIL or Named-structure handler
	  (SETQ OBJECT (GET (NAMED-STRUCTURE-P OBJECT) 'NAMED-STRUCTURE-INVOKE)))
	(SYMBOL
	  (UNLESS (FBOUNDP OBJECT) (RETURN NIL))
	  (SETQ OBJECT (SYMBOL-FUNCTION OBJECT)))
	(DYNAMIC-CLOSURE
	  (SETQ OBJECT (CLOSURE-FUNCTION OBJECT)))
	(OTHERWISE
	  (RETURN NIL)))))
  (:METHOD (VANILLA)
    (LET ((FL (%INSTANCE-FLAVOR SELF))
	  (GF (FIND-GENERIC-FUNCTION OPERATION NIL)))
      (AND GF
	   (WITHOUT-INTERRUPTS
	     (VALUES				;Don't return the 2nd and 3rd values
	       (HANDLER-TABLE-FUNCTION-AND-PARAMETER FL (GENERIC-FUNCTION-SELECTOR GF))))))))

;;; As opposed to WRITE, which is generic on the stream rather than the object
(DEFGENERIC PRINT-SELF (OBJECT STREAM PRINT-DEPTH SLASHIFY-P)
  (:COMPATIBLE-MESSAGE :PRINT-SELF)
  (:METHOD (VANILLA :DEFAULT)
    (IGNORE PRINT-DEPTH SLASHIFY-P)
    (PRINTING-RANDOM-OBJECT (SELF STREAM :TYPEP))))

(DEFMETHOD (MAKE-INSTANCE VANILLA :DEFAULT) (&REST INIT-OPTIONS)
  (IGNORE INIT-OPTIONS)
  NIL)

(DEFMETHOD (:DESCRIBE VANILLA) ()
  (DESCRIBE-INSTANCE SELF))

(DEFUN DESCRIBE-INSTANCE (INSTANCE)
  (CHECK-TYPE INSTANCE INSTANCE)
  (LET* ((FLAVOR (%INSTANCE-FLAVOR INSTANCE))
	 (SYMBOLS (FLAVOR-ALL-INSTANCE-VARIABLES FLAVOR))
	 (MIN-INDENTATION 27.)
	 (MAX-INDENTATION 40.)
	 (INDENTATION))
    (FORMAT T "~&~S, an object of flavor ~S,~% has ~
		~:[no instance variables.~;instance variable values:~]~%"
	    INSTANCE (FLAVOR-NAME FLAVOR) SYMBOLS)
    ;; Add 5 for the leading " " and the trailing ":  "
    (SETQ INDENTATION
	  (MIN MAX-INDENTATION
	       (MAX MIN-INDENTATION
		    (+ 5 (LOOP FOR SYMBOL IN SYMBOLS MAXIMIZE (FLATSIZE SYMBOL))))))
    (SETQ INSTANCE (FOLLOW-STRUCTURE-FORWARDING INSTANCE))	;%MAKE-POINTER-OFFSET doesn't
    (LOOP FOR SYMBOL IN SYMBOLS
	  FOR I FROM 1 DO
      (LET ((LOCATIVE (%MAKE-POINTER-OFFSET DTP-LOCATIVE INSTANCE I)))
	(PRESENT LOCATIVE `((DBG:NAMED-LOCATIVE-SLOT)
			    :SYMBOL ,SYMBOL
			    :INDENTATION ,INDENTATION
			    :STRUCTURE ,INSTANCE)))
      (TERPRI))
    INSTANCE))


;;; This flavor is a useful mixin that provides messages for a property list protocol.
;;; Of course it's a crock that ZL:GET isn't a generic function.
;;; Also Common Lisp has sort of broken the whole concept by eliminating disembodied plists.
;;; This is copied exactly from old flavor system, no attempt to update the interface.

(DEFFLAVOR PROPERTY-LIST-MIXIN ((PROPERTY-LIST NIL)) ()
  :SETTABLE-INSTANCE-VARIABLES
  (:DOCUMENTATION :MIXIN "A mixin that provides property list messages."))

(DEFMETHOD (:GET PROPERTY-LIST-MIXIN) (INDICATOR)
  (CHECK-TYPE INDICATOR SYMBOL)
  (GETF PROPERTY-LIST INDICATOR))

(DEFMETHOD (:GETL PROPERTY-LIST-MIXIN) (INDICATOR-LIST)
  (MULTIPLE-VALUE-BIND (IGNORE IGNORE LIST)
      (GET-PROPERTIES PROPERTY-LIST INDICATOR-LIST)
    LIST))

;The SETF :GET  :PUTPROP declarations for both ZL and CL are already defined elsewhere
(DEFMETHOD (:PUTPROP PROPERTY-LIST-MIXIN) (PROPERTY INDICATOR)
  (CHECK-TYPE INDICATOR SYMBOL)
  (SETF (GETF PROPERTY-LIST INDICATOR) PROPERTY))

(DEFMETHOD (:REMPROP PROPERTY-LIST-MIXIN) (INDICATOR)
  (CHECK-TYPE INDICATOR SYMBOL)
  ;; Note:  This must remain ZL:REMPROP so that it returns the old ZL value as documented!
  (ZL:REMPROP (LOCF PROPERTY-LIST) INDICATOR))

(DEFMETHOD (:PUSH-PROPERTY PROPERTY-LIST-MIXIN) (PROPERTY INDICATOR)
  (CHECK-TYPE INDICATOR SYMBOL)
  (PUSH PROPERTY (GETF PROPERTY-LIST INDICATOR)))

(DEFMETHOD (:PLIST PROPERTY-LIST-MIXIN) () PROPERTY-LIST)

(DEFMETHOD (:PROPERTY-LIST-LOCATION PROPERTY-LIST-MIXIN) ()
  (LOCF PROPERTY-LIST))
