;;; -*- Mode: Lisp; Syntax: Common-lisp; Package: Statice-Utilities; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


 
;;; entity-named-by-string-attribute is a presentation type for Statice
;;; entities that have simple string names, where the name is the value
;;; of a single-valued string-typed attribute of the entity.  Most
;;; applications are expected to make their own presentation type that
;;; is an abbreviation for this presentation type.  The three data
;;; arguments are all mandatory.  :pathname is the pathname of the
;;; database, :type is the name of the entity type, and :attribute is
;;; the name of the single-valued string-typed attribute of the type
;;; that serves to name entities.  :restrictions is a list of criteria,
;;; just like the :where arg to for-each*, and it means that only the
;;; subset of entities that pass all of these criteria are considered to
;;; be part of the set.
(define-presentation-type entity-named-by-string-attribute
      (() &key pathname type attribute restrictions)
   :typep ((object)
	   (typep object 'statice::functional-entity-handle))
   :parser ((stream &key initially-display-possibilities original-type)
	    (values
	      (dw:complete-input
		stream
		#'(lambda (string action)
		    (entity-named-by-string-attribute-completer
		      string action type pathname original-type attribute restrictions))
		:type original-type
		:compress-choices nil
		:initially-display-possibilities initially-display-possibilities)))
   :printer ((object stream)
	     (let ((value
		     (with-database (db pathname)
		       (with-transaction ()
			 (attribute-value object attribute)))))
	       (write-string value stream)))
   :describer ((stream &key plural-count)
	       (when (null plural-count)
		 (write-string "a " stream))
	       (format stream "~@(~A~) ~@(~A~)" type attribute)
	       (when plural-count
		 (write-string "s" stream))
	       (when restrictions
		 (loop for r in restrictions
		       for encore first nil then t do
		   (write-string (if encore " and with " " with ") stream)
		   (format stream "~@(~A~) " (first r))
		   (unless (member (second r) '(eq eql equal = string-equal string=))
		     (format stream "~S " (second r)))
		   (prin1 (third r) stream)))))

;;; This is the heart of a funarg suitable for dw:complete-input.
;;; string is the string that's been typed so far, and action is the
;;; keyword saying what to do.  type is the presentation type of the
;;; result, which is the entity type to query over.  pathname is the
;;; pathname of the database.  original-type is the original
;;; presentation type given to accept.  attribute is the name of the
;;; string-valued attribute that names the entity we're finding.  The
;;; attribute might not be unique, in which case we just pick one at
;;; random.  Everything here is case-independent.
(defun entity-named-by-string-attribute-completer
       (string action type pathname original-type attribute restrictions)
  (with-database (db pathname)
    (with-transaction ()
      (ecase action
	((:complete)
	 (let ((results nil))
	   (for-each* #'(lambda (entity)
			  (pushnew (cons (attribute-value entity attribute)
					 entity)
				   results
				   :test #'string-equal
				   :key #'car))
		      type
		      :where `((,attribute string-prefix ,string) . ,restrictions))
	   (cond ((= (length results) 1)
		  (values (car (first results))
			  t
			  (cdr (first results))
			  (length (car (first results)))
			  1))
		 ((= (count string results :key #'car :test #'string-equal) 1)
		  (let ((result (find string results :key #'car :test #'string-equal)))
		    (values string
			    t
			    (cdr result)
			    (length string)
			    1)))
		 (t
		  (values (common-prefix results)
			  nil nil
			  (first-string-difference results)
			  (length results))))))
	((:complete-limited :complete-maximal)
	 (let ((results nil))
	   (for-each* #'(lambda (entity)
			  (pushnew (cons (attribute-value entity attribute)
					 entity)
				   results
				   :test #'string-equal
				   :key #'car))
		      type
		      :where `((,attribute string-prefix ,string) . ,restrictions))
	   (cond ((= (length results) 1)
		  (values (car (first results))
			  t
			  (cdr (first results))
			  (length (car (first results)))
			  1))
		 (t
		  (values (common-prefix results)
			  nil nil
			  (first-string-difference results)
			  (length results))))))
	((:possibilities)
	 (let ((results nil))
	   (for-each* #'(lambda (entity)
			  (pushnew (list (attribute-value entity attribute)
					 entity
					 original-type)
				   results
				   :test #'string-equal
				   :key #'car))
		      type
		      :where `((,attribute string-prefix ,string) . ,restrictions)
		      :order-by (list attribute 'descending))
	   results))
	((:apropos-possibilities :apropos-initial-possibilities)
	 (let ((results nil))
	   (for-each* #'(lambda (entity)
			  (pushnew (list (attribute-value entity attribute)
					 entity
					 original-type)
				   results
				   :test #'string-equal
				   :key #'car))
		      type
		      :where `((,attribute
				,(if (eq action :apropos-possibilities)
				     'string-search
				     'string-prefix)
				,string)
			       . ,restrictions)
		      :order-by (list attribute 'descending))
	   (values results (list string))))
	((:possibilities-quick-length)
	 (count-entities* type
			  :where `((,attribute string-prefix ,string) . ,restrictions)))
	((:apropos-possibilities-quick-length
	   :apropos-initial-possibilities-quick-length)
	 (count-entities* type
			  :where `((,attribute
				    ,(if (eq action :apropos-possibilities-quick-length )
					 'string-search
					 'string-prefix)
				    ,string)
				   . ,restrictions)))))))

;;; The argument is a list of conses, each of whose car is a string.
;;; Find the position of the first difference between the two shortest
;;; strings, or the length of the shortest.
(defun first-string-difference (list-of-strings)
  (let* ((ordered-list-of-strings
	   (sort list-of-strings #'(lambda (x y) (< (string-length x)
						    (string-length y)))
		 :key #'car))
	 (shortest-string (caar ordered-list-of-strings))
	 (second-shortest-string (caadr ordered-list-of-strings)))
    (or (mismatch shortest-string second-shortest-string :test #'char-equal)
	(string-length shortest-string))))

;;; The argument is a list of conses, each of whose car is a string.
;;; Each string is a possible completion.  Return the partial completion
;;; to show the user, namely the largest prefix that all these strings
;;; have in common.  If there are no strings at all, return nil.
(defun common-prefix (list-of-results)
  (let ((first-string (car (first list-of-results)))
	(rest-of-results (rest list-of-results)))
    (cond ((null list-of-results) nil)
	  ((null rest-of-results) first-string)
	  (t
	   (let ((min-length (loop for (s) in list-of-results minimize (string-length s))))
	     (dotimes (i min-length)
	       (let ((char (aref first-string i)))
		 (loop for (s) in rest-of-results do
		   (unless (char-equal char (aref s i))
		     (return-from common-prefix (substring first-string 0 i))))))
	     (substring first-string 0 min-length))))))
