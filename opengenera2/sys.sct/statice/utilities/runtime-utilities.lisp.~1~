;;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Lowercase: Yes; Package: STATICE-UTILITIES -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(cp:define-command (com-show-all-statice-file-systems :command-table "Statice")
    ((namespace '((token-or-type (all) neti:namespace))
		 :provide-default t
		 :default 'all
		 :prompt "namespace to search"
		 :confirm t			;Since this is on a command menu
		 :documentation "a namespace to search, or None to use the search list"))
   (format t "~&Querying namespace for all File Systems...")
   (let ((fs-list (sort (copy-list
			  (if (eq namespace 'all)
			      (neti:find-objects-from-property-list :file-system)
			      (neti:find-objects-from-property-list-in-namespace
				:file-system namespace)))
			#'string-lessp
			:key #'(lambda (fs)
				 (condition-case ()
				      (send (send fs :host) :name)
				    (error "(no host?)"))))))
     (terpri)
     (formatting-table ()
       (dw:formatting-column-headings (t :underline-p t)
	 (with-character-face (:italic)
	   (dw:format-cell "File System" #'write-string)
	   (dw:format-cell "Host" #'write-string)))
       (dolist (fs fs-list)
	 (when (eq (send fs :get :type) :dbfs)
	   (formatting-row ()
	     (formatting-cell ()
	       (present fs 'neti:file-system))
	     (formatting-cell ()
	       (present (or (send fs :host) "(no host?)") 'neti:host))))))))

(cp:define-command (com-add-asynch-dbfs-page-service
		     :command-table "Statice"
		     :name "Add ASYNCH DBFS PAGE Service"
		     :provide-output-destination-keyword nil)
    ((host 'net:host
	   :default net:*local-host*
	   :provide-default t
	   :prompt "to host"
	   :documentation "Host to add ASYNCH DBFS PAGE Service to")
     &key
     (tcp-not-present 'boolean
		      :default nil
		      :provide-default t
		      :mentioned-default t
		      :name "TCP not present"
		      :documentation
		      "Don't add ASYNCH-DBFS-PAGE TCP ASYNCH-DBFS-PAGE triplet"))
   (add-asynch-protocols host :tcp-not-present tcp-not-present))

(cp:define-command (com-add-dbfs-page-service
		     :command-table "Statice"
		     :name "Add DBFS PAGE Service"
		     :provide-output-destination-keyword nil)
    ((host 'net:host
	   :default net:*local-host*
	   :provide-default t
	   :prompt "to host"
	   :documentation "Host to add DBFS PAGE Service to")
     &key
     (tcp-not-present 'boolean
		      :default nil
		      :provide-default t
		      :mentioned-default t
		      :name "TCP not present"
		      :documentation "Don't add DBFS-PAGE TCP DBFS-PAGE triplet"))
   (add-page-protocols host :tcp-not-present tcp-not-present))

(defun add-asynch-protocols (host &key tcp-not-present)
  (unless (typep host 'net:host)
    (setq host (net:parse-host host)))
  (let* ((plist (send host :property-list))
	 (services (getf plist :service))
	 (tcp-service '(:asynch-dbfs-page :tcp :asynch-dbfs-page))
	 (asynch-tcp-present (or tcp-not-present
				 (member tcp-service services :test #'equal))))
    (when asynch-tcp-present
      (format t "~&The local host (~A) already has the ASYNCH-DBFS-PAGE~@
                 service in its host object in the namespace database.~@
                 You needn't use this command any more; you're all set."
	      host)
      (return-from add-asynch-protocols t))
    (setq services
	  (nconc services
		 (unless asynch-tcp-present (ncons tcp-service))))
    (format t "~&Adding ASYNCH-DBFS-PAGE service for host ~A.~@
                 Please wait while the namespace is updated..."
	    host)
    (net:update-object-permanently :host net:*namespace* (first (send host :names)) plist)
    (format t " done.")))

;;; Quicky replication of code.  How poor...
(defun add-page-protocols (host &key tcp-not-present)
  (unless (typep host 'net:host)
    (setq host (net:parse-host host)))
  (let* ((plist (send host :property-list))
	 (services (getf plist :service))
	 (tcp-service '(:dbfs-page :tcp :dbfs-page))
	 (tcp-present (or tcp-not-present
			  (member tcp-service services :test #'equal))))
    (when tcp-present
      (format t "~&The local host (~A) already has the DBFS-PAGE~@
                 service in its host object in the namespace database.~@
                 You needn't use this command any more; you're all set."
	      host)
      (return-from add-page-protocols t))
    (nconc services
	   (unless tcp-present (ncons tcp-service)))
    (format t "~&Adding DBFS-PAGE service for host ~A.~@
                 Please wait while the namespace is updated..."
	    host)
    (net:update-object-permanently :host net:*namespace* (first (send host :names)) plist)
    (format t " done.")))

;;; I'm not sure the following stuff belongs in this file, but it seems
;;; that it should be in Statice-Utilities and it does not seem worth
;;; creating a whole new file just for this.  Maybe later we'll split
;;; this file.

(cp:define-command (com-copy-statice-database :command-table "Statice")
    ((from-file 'fs:dbfs-pathname
		:confirm t
		:documentation "File to be copied")
     (to-file '((fs:dbfs-pathname) :dont-merge-default t)
	      :default (fs:default-pathname from-file)
	      :confirm t
	      :prompt "to"
	      :documentation "Name for new file")
     &key
     (copy-properties '((cl:sequence ((cl:member :author :creation-date :comment)
				      :description "file property")))
		      :default '(:author :creation-date)
		      :documentation "Properties of the file to be duplicated")
     (create-directories '((cl:member :yes :error :query))
			 :default :query
			 :documentation
			 "What to do if a destination directory does not exist")
     (query '((cl:member :yes :no :ask))
	    :mentioned-default :yes
	    :default :no
	    :documentation "Whether to ask before copying each file"))
   (let ((auth (not (null (member :author copy-properties))))
	 (copy-creation-date (not (null (member :creation-date copy-properties))))
	 (copy-comment (not (null (member :copy-comment copy-properties))))
	 (create-dir (case create-directories
		       (:yes t)
		       (:error nil)
		       (:query :query))))
     (when (eq query :ask)
       (setq query (if (fquery nil "Ask before copying each file? ") :yes :no)))
     (cond ((send from-file :wild-p)
	    (let ((files (condition-case (err)
			      (cdr (fs:directory-list from-file :sorted))
			    (fs:file-operation-failure
			      (format *error-output* "~&Error: ~~A~" err)))))
	      (if files
		  (loop with merged-to = (fs:merge-pathnames
					   to-file
					   (fs:default-pathname from-file))
			for plist in files
			for (file) = plist do
		    (unless (getf (cdr plist) :directory)
		      (let ((translation (send from-file :translate-wild-pathname
					       merged-to file)))
			(when (or (eq query :no)
				  (fquery nil "Copy file ~A to ~A? " file translation))
			  (condition-case (err)
			       (copy-statice-database file
						      translation
						      :copy-creation-date copy-creation-date
						      :copy-author auth
						      :copy-comment copy-comment
						      :create-directories create-dir
						      :report-stream (when (eq query :no)
								       *standard-output*))
			     (fs:file-operation-failure
			       (format *error-output*
				       "~& Could not copy ~A:~%  ~~A~" file err))))))
			finally (return t))
		  (format *error-output* "~&~A matches no files.  None copied." from-file))))
	   (t
	    (when (or (eq query :no)
		      (fquery nil "Copy file ~A to ~A? " from-file to-file))
	      (condition-case (err)
		   (copy-statice-database from-file to-file
					  :copy-creation-date copy-creation-date 
					  :copy-author auth
					  :copy-comment copy-comment
					  :create-directories create-dir
					  :report-stream *standard-output*)
		 (fs:file-operation-failure
		   (format *error-output* "~&Error: ~~A~" err))))))))

(defflavor different-page-sizes
	(new-pathname)
	(fs:creation-failure)
  :initable-instance-variables
  :readable-instance-variables)

(defmethod (:report-without-pathname different-page-sizes) (stream)
  (format stream "Cannot copy databases between hosts with different disk page sizes."))

(defmethod (dbg:report different-page-sizes) (stream)
  (format stream "Cannot copy databases between ~A and ~A because ~
		  their disk page sizes are different.~@
		  Use the :Dump Database and :Load Database commands instead."
	  (dbfs::portal-file-system-name pathname)
	  (dbfs::portal-file-system-name new-pathname)))

;;; Note: this ought to use dbfs:return-page on both pages right
;;; after the copy-array-portion, when dbfs:return-page is fixed.
(defun copy-statice-database (from-pathname to-pathname
			      &key
			      (copy-creation-date t)
			      (copy-author t)
			      (copy-comment nil)
			      (report-stream nil)
			      (create-directories :query)
			      (if-exists :error))
  ;; The arguments are allowed to be non-pathname portals.
  (let ((from-is-a-pathname (typep from-pathname 'fs:pathname))
	(to-is-a-pathname (typep to-pathname 'fs:pathname)))
    (when from-is-a-pathname
      (setq from-pathname (merge-pathnames from-pathname))
      (when to-is-a-pathname
	(setq to-pathname (merge-pathnames to-pathname from-pathname))
	(when (send to-pathname :wild-p)
	  (setq to-pathname (send from-pathname :translate-wild-pathname
				  to-pathname from-pathname)))))
    (unless (and from-is-a-pathname to-is-a-pathname)
      (setq copy-creation-date nil
	    copy-author nil
	    copy-comment nil)))
  (error-restart ((error) "Retry copying ~A to ~A." from-pathname to-pathname)
    (when report-stream
      (format report-stream "~&Copying ~A to ~A" from-pathname to-pathname))
    (loop do
      (condition-case-if create-directories (error)
	   (let ((copy-status 'not-started)
		 (file-already-exists (probe-file to-pathname)))
	     (unwind-protect
		 (with-transaction ()
		   (let ((page-size (dbfs:file-page-size from-pathname))
			 (page-length (dbfs:file-page-length from-pathname)))
		     D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;
		     ;;  these want to be done "atomically" sort-of
0		     1;;
0		     (setf copy-status 'checking-page-sizes)
		     (unless file-already-exists
		       (dbfs:create-file to-pathname :if-exists if-exists))
		     1;;
0		     1;;
0		     1;;
0		     (unless (= page-size (dbfs:file-page-size to-pathname))
		       (signal 'different-page-sizes
			       :pathname from-pathname
			       :new-pathname to-pathname))
		     1;;
		     ;;  these want to be done "atomically" sort-of
0		     1;;
0		     (setq copy-status 'in-progress)
		     (when file-already-exists
		       (dbfs:create-file to-pathname :if-exists if-exists))
		     1;;
0		     1;;
0		     1;;
0		     (tv:dotimes-noting-progress (i page-length
						    (format nil "Copying ~D pages"
							    page-length))
		       (let ((from-page (dbfs:read-page from-pathname i))
			     (to-page (dbfs:write-page to-pathname i
						       :if-does-not-exist :create)))
			 (copy-array-portion from-page 0 page-size
					     to-page 0 page-size)))
		     (setq copy-status 'complete)))
	       (when (or (eql copy-status 'in-progress)
			 (and (not file-already-exists)
			      (eql copy-status 'checking-page-sizes)))
		 (with-transaction ()
		   (dbfs:destroy-file to-pathname)))))
	 (fs:directory-not-found
	   (let ((pathname (send error ':pathname)))
	     (cond ((not (or (eq create-directories t)
			     (fquery format:yes-or-no-p-options
				     "~A~%Shall I attempt to create the directory ~A:~A? "
				     error
				     (send (send pathname :host) :name-as-file-computer)
				     (send pathname :string-for-directory))))
		    (return-from copy-statice-database nil))
		   ((null (fs:create-directories-recursively pathname))
		    (error "Failed to create the directory")))))
	 (:no-error (return nil))))
    (when (or copy-creation-date copy-author copy-comment)
      (let ((from-properties (cdr (fs:file-properties from-pathname)))
	    (to-properties nil))
	(when copy-creation-date
	  (push (getf from-properties :creation-date) to-properties)
	  (push :creation-date to-properties))
	(when copy-author
	  (push (getf from-properties :author) to-properties)
	  (push :author to-properties))
	(when copy-comment
	  (push (getf from-properties :comment) to-properties)
	  (push :comment to-properties))
	(apply #'fs:change-file-properties to-pathname t to-properties)))
    (when report-stream
      (format report-stream "~&Copied ~A to ~A" from-pathname to-pathname)))
  to-pathname)

;;; This is a command that you can run if you have moved the schema
;;; definition to another package, and you want an existing database to
;;; continue to work.
(cp:define-command (com-set-database-schema-name :command-table "Statice")
    ((pathname 'fs:pathname
	       :prompt "pathname of database")
     (name 'symbol
	   :prompt "new schema name, a symbol"))
  (statice-model:with-database (db pathname)
    (let ((old-name
	    (statice-model:with-transaction ()
	      (let* ((sdinfo (statice-model:get-relation "%%$sdinfo"))
		     (name-att (statice-model:get-attribute sdinfo "name")))
		(statice-model:do-relation (tuple sdinfo)
		  (return
		    (condition-case (err)
			 (format nil "~S" (statice-model:get-value tuple name-att))
		       (statice-model:symbol-package-not-found
			 (format nil "~A::~A"
				 (statice-model:symbol-package-not-found-package-name err)
				 (statice-model:symbol-package-not-found-print-name err)))))
		  )))))
      (when (yes-or-no-p "Change schema name of ~A from ~A to ~S? "
			 pathname old-name name)
	(statice-model:with-transaction ()
	  (let* ((sdinfo (statice-model:get-relation "%%$sdinfo"))
		 (name-att (statice-model:get-attribute sdinfo "name")))
	    (statice-model:do-relation (tuple sdinfo)
	      (setf (statice-model:get-value tuple name-att) name))))
	;; Cause the next open-database to recache everything.
	;; Don't do it now; the user might not be ready for it.
	(setf (statice::functional-database-schema-name db) nil)))))

(defvar *8-spaces* (make-string 8 :initial-element #\space))
(defvar *18-spaces* (make-string 18 :initial-element #\space))
(defvar *32-spaces* (make-string 32 :initial-element #\space))

(cp:define-command (com-show-database-schema :command-table "Statice")
    ((pathname 'fs:dbfs-pathname))
   (let* ((schema (get-real-schema pathname))
	  (schema-name (schema-name schema))
	  (schema-package (symbol-package schema-name)))
     (unless (eq schema-package *package*)
       (format t "~&The following is in the ~A package." schema-package))
     (let ((*package* schema-package))
       ;; Print the define-schema form.
       (format t "~2%(define-schema ~(~S~) (" schema-name)
       (formatting-textual-list (*standard-output* :separator " "
						   :filled t
						   :after-line-break *18-spaces*)
	 (dolist (type (reverse (schema-types schema)))
	   (formatting-textual-list-element ()
	     (format t "~(~S~)" (type-name type)))))
       (format t "))")
       ;; Print all of the define-entity-type forms.
       (dolist (type (reverse (schema-types schema)))
	 (format t "~2%(define-entity-type ~(~S~) (" (type-name type))
	 (formatting-textual-list (*standard-output* :separator " "
						     :filled t
						     :after-line-break *32-spaces*)
	   (dolist (pname (type-parent-names type))
	     (formatting-textual-list-element ()
	       (format t "~(~S~)" pname))))
	 (format t ")")
	 ;; Print all of the attribute clauses.
	 (let ((att-list (type-attributes type)))
	   (if (null att-list)
	       (format t "~% ()"))
	   (show-database-attributes att-list))
	 ;; Print the entity type options.
	 (show-type-options type)))))

(defun show-database-attributes (att-list)
  (loop for att in att-list
	for line-start = "  ((" then "   (" do
    (format t "~%~A~(~S ~S~)"
	    line-start
	    (attribute-name att)
	    (let* ((vtype (attribute-value-type att))
		   (btype (if (typep vtype 'statice::basic-entity-type)
			      (type-name vtype)
			      vtype)))
	      (if (attribute-value-is-set att)
		  (list 'set-of btype)
		  btype)))
    (formatting-textual-list (*standard-output* :separator ""
						:filled t
						:after-line-break *8-spaces*)
      (when (attribute-unique att)
	(formatting-textual-list-element ()
	  (write-string " :unique t")))
      (when (attribute-read-only att)
	(formatting-textual-list-element ()
	  (write-string " :read-only t")))
      (when (attribute-no-nulls att)
	(formatting-textual-list-element ()
	  (write-string " :no-nulls t")))
      (when (attribute-index-exists att)
	(formatting-textual-list-element ()
	  (write-string " :index t")))
      (let ((ias (attribute-index-average-size att)))
	(when (and ias (not (eql ias 0)) (not (eql ias 5)))
	  ;; 5 is the default, so don't show it.  Explicit providers of 5 will be confused.
	  (formatting-textual-list-element ()
	    (format t " :index-average-size ~(~S~)" ias))))
      (when (attribute-inverse-index-exists att)
	(formatting-textual-list-element ()
	  (write-string " :inverse-index t")))
      (when (attribute-inverse-index-exact-exists att)
	(formatting-textual-list-element ()
	  (write-string " :inverse-index-exact t")))
      (let ((iias (attribute-inverse-index-average-size att)))
	(when (and iias (not (eql iias 0)) (not (eql iias 5)))
	  (formatting-textual-list-element ()
	    (format t " :inverse-index-average-size ~(~S~)" iias))))
      (when (attribute-area-name att)
	(formatting-textual-list-element ()
	  (format t " :area ~(~S~)" (attribute-area-name att))))
      (when (and (null (attribute-set-exists att))
		 (eq (scl:symbol-value-in-instance att 'statice::implementation)
		     'statice::binary-relation))
	(formatting-textual-list-element ()
	  (write-string " :attribute-set nil"))))
    (format t ")")))

(defun show-type-options (type)
  (when (type-area-name type)
    (format t "~%  (:area ~(~S~))" (type-area-name type)))
  (when (null (type-set-exists type))
    (format t "~%  (:type-set nil)"))
  (dolist (mi (type-multiple-indexes type))
    (format t "~%  (:multiple-index~:[~;-exact~] (" (multiple-index-case-sensitive mi))
    (formatting-textual-list (*standard-output* :separator " "
						:filled t
						:after-line-break *18-spaces*)
      (dolist (an (multiple-index-attribute-names mi))
	(formatting-textual-list-element ()
	  (format t "~(~S~)" an)))
      (if (multiple-index-unique mi)
	(format t ") :unique t)")
	(format t "))"))))
  (format t ")"))
