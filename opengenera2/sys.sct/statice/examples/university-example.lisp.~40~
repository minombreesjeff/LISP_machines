;;; -*- Mode: LISP; Syntax: Common-lisp; Package: (UNIVERSITY :USE (STATICE SCL)); Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-presentation-type rank ()
   :expander '(dw:member-sequence ("Assistant" "Associate" "Full") :test equalp))

(define-schema university (person student graduate-student shirt
                           course instructor department))

(define-entity-type person ()
  ((name string :unique t :no-nulls t :cached t
         :inverse person-named :inverse-index t)
   (id-number integer :unique t :read-only t)))

(define-entity-type student (person)
  ((dept department :inverse students-in-dept)
   (courses (set-of course) :index t :inverse course-students)
   (shirts (set-of shirt) :unique t :inverse shirt-owner)))

(define-entity-type graduate-student (student)
  ((thesis-advisor instructor))
  (:conc-name student-))

(define-entity-type shirt ()
  ((size integer)
   (color string :initform "white")
   (washed boolean)))

(define-entity-type course ()
  ((title string :inverse courses-entitled)
   (dept department)
   (instructor instructor))
  (:multiple-index (title dept) :unique t))

(define-entity-type instructor (person)
  ((rank rank :initform "Assistant")
   (dept department :no-nulls t)
   (visiting boolean)
   (salary single-float)))

(define-entity-type department ()
  ((name string :unique t
         :inverse department-named :inverse-index t)
   (head instructor)))

(defvar *university-pathname* #p"leek:>university")

(defun mean-salary-of-instructors ()
  (with-database (db *university-pathname*)
    (with-transaction ()
      (let ((total-salary 0.0)
	    (number-of-instructors 0))
        (for-each ((i instructor))
	  (incf total-salary (instructor-salary i))
	  (incf number-of-instructors))
	(/ total-salary number-of-instructors)))))

(defun all-shirts-washed (clean-student)
  (with-database (db *university-pathname*)
    (with-transaction ()
      (for-each ((s (student-shirts clean-student)))
        (setf (shirt-washed s) t)))))

(defun show-students-1 ()
  (with-database (db *university-pathname*)
    (let ((name-list
	   (with-transaction ()
	     (let ((names nil))
	       (for-each ((s student))
		 (push (person-name s) names))
	       names))))
      (dolist (name name-list)
        (format t "~%~A" name)))))

(defun show-students-2 ()
  (with-database (db *university-pathname*)
    (let ((name-list nil))
      (with-transaction ()
        (setq name-list nil)
        (for-each ((s student))
	  (push (person-name s) name-list)))
      (dolist (name name-list)
        (format t "~%~A" name)))))

(defun show-students-3 ()
  (with-database (db *university-pathname*)
    (let ((students nil))
      (with-transaction ()
        (setq students nil)
        (for-each ((s student))
	  (person-name s)
	  (push s students)))
      (dolist (s students)
        (format t "~%~A" (person-name s))))))

(clos:defmethod student-mean-shirt-size ((student student))
  (let ((total-size 0)
	(n-shirts 0))
    (for-each ((sh (student-shirts student)))
      (incf total-size (shirt-size sh))
      (incf n-shirts))
    (/ total-size (float n-shirts))))

(clos:defmethod clos:print-object ((person person) stream)
  (if *print-escape*
      (sys:printing-random-object (person stream :typep)
	(princ (person-name person) stream))
      (princ (person-name person) stream)))

(defun show-instructors-paid-more-than (this-much)
  (with-database (db *university-pathname*)
    (let ((instructors nil))
      (with-transaction ()
	(setq instructors nil)
	(for-each ((i instructor)
		   (:where (> (instructor-salary i) this-much)))
	  (push (person-name i) instructors)))
      (format-textual-list instructors #'princ))))

(defun show-full-instructors-after (string)
  (with-database (db *university-pathname*)
    (let ((instructors nil))
      (with-transaction ()
	(setq instructors nil)
	(for-each ((i instructor)
		   (:where (and (equal "Full" (instructor-rank i))
				(string-greaterp (person-name i) string))))
	  (push (person-name i) instructors)))
      (format-textual-list instructors #'princ))))

(defun show-student-courses (student-name)
  (with-database (db *university-pathname*)
    (let ((titles nil))
      (with-transaction ()
	(setq titles nil)
	(for-each ((c (student-courses (person-named student-name))))
	  (push (course-title c) titles)))
      (format-textual-list titles #'princ))))

(defun show-students-taking-course (course)
  (with-database (db *university-pathname*)
    (let ((names nil))
      (with-transaction ()
	(setq names nil)
	(for-each ((s student) (:where (eq course (:any (student-courses s)))))
	  (push (person-name s) names)))
      (format-textual-list names  #'princ))))

(defun show-courses-in-dept-sorted (dept)
  (with-database (db *university-pathname*)
    (let ((titles nil))
      (with-transaction ()
	(setq titles nil)
	(for-each ((c course)
		   (:where (eq (course-dept c) dept))
		   (:order-by (course-title c) descending))
	  (push (course-title c) titles)))
      (format-textual-list titles #'princ))))

(defun show-student-courses-in-dept (student-name department-name)
  (with-database (db *university-pathname*)
    (let ((titles nil))
      (with-transaction ()
	(setq titles nil)
	(for-each ((c (student-courses (person-named student-name)))
		   (:where (eq (course-dept c)
			       (department-named department-name))))
	  (push (course-title c) titles)))
      (format-textual-list titles #'princ))))

(defun instructors-in-dept-headed-by (head)
  (with-database (db *university-pathname*)
    (let ((instructors nil))
      (with-transaction ()
	(setq instructors nil)
	(for-each ((i instructor) (d department)
		   (:where (and (eq d (instructor-dept i))
				(eq (department-head d)
				    (person-named head)))))
	  (push (person-name i) instructors)))
      instructors)))

(defun instructors-whose-salary-is (salary-value)
  (with-database (db *university-pathname*)
    (let ((result nil))
      (with-transaction ()
	(setq result nil)
	(for-each ((i instructor)
		   (:where (= (instructor-salary i) salary-value)))
	  (push i result)))
      result)))

(defun find-big-blue-shirt ()
  (with-database (db *university-pathname*)
    (with-transaction ()
      (for-each ((s shirt)
		 (:where (and (> (shirt-size s) 15)
			      (string-equal "blue" (shirt-color s)))))
	(return s)))))

(defun find-course (title dept)
  (with-database (db *university-pathname*)
    (with-transaction ()
      (for-each ((c course)
		 (:where (and (string-equal (course-title c) title)
			      (eq (course-dept c) dept))))
	(return c)))))

(defun find-courses-with-title (title)
  (with-database (db *university-pathname*)
    (with-transaction ()
      (let ((result nil))
	(for-each ((c course)
		   (:where (string-equal (course-title c) title)))
	  (push c result))
	result))))

(defun show-names-sorted ()
  (with-database (db *university-pathname*)
    (let ((names nil))
      (with-transaction ()
	(setq names nil)
	(for-each ((p person)
		   (:order-by (person-name p) descending))
	  (push (person-name p) names)))
      (format-textual-list names #'princ))))

(defun show-new-names-sorted ()
  (with-database (db *university-pathname*)
    (let ((names nil))
      (with-transaction ()
	(setq names nil)
	(for-each ((p person)
		   (:where (> (person-id-number p) 1000))
		   (:order-by (person-name p) descending))
	  (push (person-name p) names)))
      (format-textual-list names #'princ))))

(defun show-well-paid-english-profs ()
  (with-database (db *university-pathname*)
    (let ((names nil))
      (with-transaction ()
	(setq names nil)
	(for-each ((i instructor)
		   (:where (and (eq (instructor-dept i)
				    (department-named "English"))
				(> (instructor-salary i) 50000))))
	  (push (person-name i) names)))
      (format-textual-list names #'princ))))

(defun get-sorted-shirts ()
  (with-database (db *university-pathname*)
    (let ((shirts nil))
      (with-transaction ()
	(setq shirts nil)
	(for-each ((s shirt)
		   (:order-by (shirt-color s) ascending
			      (shirt-size s) ascending))
	  (push s shirts)))
      (nreverse shirts))))


;;; Make a university database with some data.
(defun uinit ()
  (make-database *university-pathname* 'university)
  (make-university-info))

(defun make-university-info ()
  (with-database (db *university-pathname*)
    (with-transaction ()
      (let* ((joe (make-student :name "Joe" :id-number 827))
	     (betty (make-student :name "Betty" :id-number 1003))
	     (fred (make-graduate-student :name "Fred" :id-number 1034))
	     (math (make-department :name "Math"))
	     (hist (make-department :name "History"))
	     (eng  (make-department :name "English"))
	     (george (make-instructor :name "George" :id-number 1210 :dept math
				      :visiting nil :rank "Assistant" :salary 100.0))
	     (judith (make-instructor :name "Judith" :id-number 105 :dept hist
 				      :visiting nil :rank "Full" :salary 200.0))
	     (albert (make-instructor :name "Albert" :id-number 109 :dept math
				      :visiting nil :rank "Full" :salary 150.0))
	     (jane   (make-instructor :name "Jane" :id-number 23 :dept eng
				      :visiting t :rank "Associate" :salary 150.0))
	     (topology (make-course :title "Topology" :dept math :instructor george))
	     (analysis (make-course :title "Analysis" :dept math :instructor george))
	     (calculus (make-course :title "Calculus" :dept math :instructor albert))
	     (rome (make-course :title "Ancient Rome" :dept hist :instructor judith))
	     (19lit (make-course :title "19th Century Literature" :dept eng :instructor jane)))
	(setf (department-head math) albert)
	(setf (department-head hist) judith)
	(setf (department-head eng) jane)
	(setf (student-thesis-advisor fred) george)
	(add-to-set (student-courses joe) topology)
	(add-to-set (student-courses joe) rome)
	(setf (student-courses betty) (list analysis 19lit rome))
	(setf (student-courses fred) (list calculus 19lit rome))
	(add-to-set (student-shirts joe) (make-shirt :size 20 :washed nil))
	(add-to-set (student-shirts betty) (make-shirt :size 10 :color "red" :washed nil))
	(add-to-set (student-shirts betty) (make-shirt :size 10 :color "blue" :washed t))
	(add-to-set (student-shirts fred) (make-shirt :size 23 :color "blue" :washed t))
	(add-to-set (student-shirts fred) (make-shirt :size 24 :color "purple" :washed nil))
	))))

;;; A presentation type that accepts names of people in a university database.
;;; For example, try (accept `((name-in-the-university) :pathname ,*university-pathname*))
(define-presentation-type name-in-the-university (() &key pathname)
   :abbreviation-for `((statice-utilities:entity-named-by-string-attribute)
		       :pathname ,pathname :type person :attribute name))
