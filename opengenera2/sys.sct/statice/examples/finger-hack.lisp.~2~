;;; -*- Mode: LISP; Syntax: Common-lisp; Package: (finger-hack :use (scl statice)); Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This is a simple almost useless hack which was used for debugging
;;; the file level of Statice.  The finger hack runs on one or more
;;; clients, and updates a Statice database at some interval
;;; (*time-between-updates*, or two minutes), with information about who
;;; is logged into the host that it's running on, how long they've been
;;; idle, their hardware string, software string, etc.  Basically this
;;; is the reverse of the old "finger hack" which polled all the
;;; machines at a site.

;;; A user may then do a :show users @host, where host is the Statice
;;; server host name (not the file-system name), assuming that the code
;;; at the bottom of this file is running on that host.  Note that the
;;; code at the bottom of this file need not be run on every client
;;; machine -- just the server.

;;; This program illustrates use of the autobug program, as well as some
;;; general ideas in how to set up this type of client/server program.

(defparameter *portal* (pathname "beet:>finger-hack"))

(define-schema finger-hack (host))

(define-entity-type host ()
  ((name string :unique t :inverse host-named :inverse-index t)
   (last-user string :inverse list-of-hosts-for-user :inverse-index t)
   (last-user-pretty-name string)
   (last-reported-idle-time integer)
   (reported-at integer)
   (site string)
   (software-string string)
   (hardware-string string)))

(defvar *time-between-updates* (* 60 2)
  :documentation "The time between finger hack updates to the server")

(defparameter *finger-hack-enabled* t)
(defparameter *finger-hack-suppressed* nil)

(defparameter *debugging-finger-hack* nil)

(defvar *finger-hack-process* nil)

(defun finger-hack-top ()
  (si:with-lock-held (*finger-hack-process*)
    (when (and *finger-hack-enabled* (not *finger-hack-suppressed*))
      (process-wait "Time Initialized" #'(lambda () time:*timebase-initialized*))
      (if *debugging-finger-hack*
	  (update-info)
	  (block update
	    (let ((dbg:*autobug-enable* t))
	      (condition-bind-default
		((error #'(lambda (error)
			    (cond ((typep error 'sys:network-error)
				   (return-from update))
				  (t
				   (setf *finger-hack-enabled* nil)
				   (dbg:automatic-bug-report
				     error
				     :flavors nil
				     :protocol :finger-hack
				     :foreign-host (send net:*local-host* :name)
				     :user zl:user-id
				     :pathname (pathname "x:>bug>statice>finger-hack.bug")
				     :recipients '("Bug-Finger-Hack <zippy>")
				     :sender zl:user-id)
				   (tv:notify nil "Finger hack disabled due to error: ~A" error)
				   (return-from finger-hack-top nil))))))
		(update-info)))))
      (si:add-timer-queue-entry `(:relative ,*time-between-updates*)
				:once
				"Finger Hack"
				#'finger-hack-top))))

(defvar *system-version-info* (sct:system-version-info :finger))	;cheap cache

(defvar *hardware-resources-string* (si:hardware-resources-string))	;ditto

(defun update-info (&key (host-name (send net:*local-host* :name))
		    (idle-time (truncate (tv:minutes-idle)))
		    (user-name zl:user-id)
		    (user si:*user*))
  (let ((statice-model::*restart-testing* nil))
    (with-database (db *portal*)
      (with-transaction ()
	(let ((host (or (host-named host-name)
			(make-host :name host-name))))
	  (setf (host-last-user host) user-name
		(host-last-user-pretty-name host)
		(and user (send user :personal-name-first-name-first))
		(host-last-reported-idle-time host) idle-time
		(host-reported-at host) (time:get-universal-time)
		(host-site host) (or net:finger-location net:local-finger-location)
		(host-software-string host) *system-version-info*
		(host-hardware-string host) *hardware-resources-string*))))))

(add-initialization "Maybe turn on Finger Hack"
		    '(start-finger-hack)
		    '(:warm))

(add-initialization "Maybe turn on Finger Hack"
		    '(start-finger-hack)
		    '(:login))

(add-initialization "Kill Finger Hack" '(kill-finger-hack) '(:logout))
(add-initialization "Kill Finger Hack" '(kill-finger-hack) '(:before-cold))

(defun start-finger-hack ()
  (unless (or (eq si:*user* si:*not-logged-in-user*)
	      (eq (send si:*user* :type) :daemon)
	      (eq neti::*distribution-site* net:*local-site*))
    (setf *finger-hack-suppressed* nil)
    (unless (or (not (null *finger-hack-process*))
		(loop for this-item being the si:heap-elements of si:*timer-queue*
		      thereis (string-equal "Finger Hack" (si:timer-queue-name this-item))))
      (process-run-function "Finger Hack" #'finger-hack-top))))

(defun kill-finger-hack ()
  (setf *finger-hack-suppressed* t)
  (without-interrupts
    (clobber-timers "Finger Hack")
    (when *finger-hack-process*
      (process-reset *finger-hack-process*)))
  (when *finger-hack-process*
    (process-wait "Kill Finger Hack" #'(lambda () (null *finger-hack-process*))))
  nil)

(defun clobber-timers (timer-name)
  (loop for timer = (find-queue-entry timer-name)
	while timer
	do (si:remove-timer-queue-entry timer t)))

(defun find-queue-entry (timer-name)
  (let ((entry (send si:*timer-queue* :find-by-item timer-name
		     #'(lambda (name item) (equal name (si:timer-queue-name item)))
		     t)))
    (and entry (si:timer-queue-id entry))))

;;; The following is the code that should run on the server side so that
;;; :Show Users @host does the right thing.  This code only needs to run
;;; on the Statice Server host.

#|

(defvar *old-name-server* #'neti:name-server-internal)	;in case you want to revert back

(defun neti:name-server-internal (stream user whois trusted-p)
  ;; Since the DBFS Page servers run at a special priority, these
  ;; name servers had better also run at the same special priority
  ;; in order to avoid their grabbing many locks and then being
  ;; starved for resources, causing deadlocks.
  (setf (process-priority si:current-process) dbfs::*dbfs-page-server-priority*)
  (flet ((invoke-old (ignore)
	   (funcall *old-name-server* stream user whois trusted-p)
	   (return-from neti:name-server-internal nil)))
    (condition-bind
      ((error #'invoke-old))
      (with-database (db *portal*)
	(let ((results nil))
	  (with-transaction ()
	    (setq results nil)
	    (flet ((format-info (host)
		     (let ((idle (host-last-reported-idle-time host)))
		       (multiple-value-bind (hours minutes) (floor idle 60)
			 (push
			   (format
			     nil
			     #+ignore
			     "~16A ~22A ~20A ~:[     ~3*~;~:[ ~D:~2,48D~;   ~*~2,32D~]~] ~A (~A ~A)"
			     #-ignore
			     "~16A ~22A ~20A ~:[     ~3*~;~:[ ~D:~2,48D~;   ~*~2,32D~]~] ~A"
			     (host-last-user host)
			     (host-last-user-pretty-name host)
			     (host-name host)
			     (not (zerop idle))
			     (zerop hours)
			     hours
			     minutes
			     (host-site host)
			     #+ignore #+ignore
			     (host-software-string host)
			     (host-hardware-string host))
			   results)))))
	      (if user
		  (dolist (host (list-of-hosts-for-user user))
		    (format-info host))
		  (let ((ten-minutes-ago (- (get-universal-time) 600)))
		    (for-each ((host host) (:order-by (host-last-user host) descending))
		      (when (> (host-reported-at host) ten-minutes-ago)
			(format-info host)))))))
	  (format stream "[FH]~%")
	  (dolist (line (sort results #'string-lessp))
	    (format stream "~A~%" line)))))))
|#
