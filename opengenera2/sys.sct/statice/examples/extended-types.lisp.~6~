;;; -*- Mode: LISP; Syntax: Common-lisp; Package: STATICE-USER; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Some simple examples of extended types.  See "Defining New Statice
;;; Datatypes" in the documentation.

;;; Logical type enumerated
(scl:define-presentation-type enumerated ((&rest elements))
  :abbreviation-for `(and string (member . ,elements)))

(statice-type:define-value-type enumerated
   (:format :logical)
   (:based-on integer))

(defmethod statice-type:encode-value ((handler enumerated-handler) value)
  (with-slots (presentation-type) handler
    (dw:with-type-decoded (nil data-args) presentation-type
       (position value data-args :test #'string-equal))))

(defmethod statice-type:decode-value ((handler enumerated-handler) integer)
  (with-slots (statice-type:presentation-type) handler
    (dw:with-type-decoded (nil data-args) statice-type:presentation-type
       (nth integer data-args))))


;;; Logical type string-without-e
(defun without-e (string)
  (not (find  #\e string :test #'char-equal)))

(scl:define-presentation-type string-without-e ()
  :abbreviation-for '(and string (satisfies without-e)))

(statice-type:define-value-type string-without-e
  (:format :logical)
  (:based-on string))


;;; Variable-format physical type hw-vector.
(scl:define-presentation-type hw-vector ((&optional limit))
  :expander 'vector
  :typep ((value) 
	  (and (vectorp value)
	       (let ((len (length value)))
		 (and (or (null limit) (scl: len limit))
		      (every #'(lambda (value)
				 (typep value '(integer #o-100000 (#o100000))))
			     value))))))

(statice-type:define-value-type hw-vector
  (:format :variable))

(defmethod statice-type:read-value ((handler hw-vector-handler) addressor word-offset n-words)
  (let* ((first-word (statice-storage:read-record-word addressor word-offset))
	 (length (- (* 2 n-words) 1 (ldb (byte 1 0) first-word)))
	 (vector (make-array length)))
    (loop for j below length
	  for right = nil then (not right)
	  with word = first-word 
	  with i = word-offset do
      (when right
	(setq word (statice-storage:read-record-word addressor (incf i))))
      (let ((raw-byte (ldb (if right (byte 16 0) (byte 16 16)) word)))
	(setf (aref vector j)
	      (if (zerop (ldb (byte 1 15) raw-byte))
		  raw-byte
		  (- raw-byte (expt 2 16))))))
    vector))

(defmethod statice-type:value-equal ((handler hw-vector-handler) value addressor word-offset n-words)
  (let ((first-word (statice-storage:read-record-word addressor word-offset))
        (length (length value)))
    (and (= length
	    (- (* 2 n-words) 1 (ldb (byte 1 0) first-word)))
	 (loop for j below length
	       for right = nil then (not right)
	       with word = first-word 
	       with i = word-offset do
	   (when right
	     (setq word (statice-storage:read-record-word addressor (incf i))))
	   (unless (= (aref value j)
		      (ldb (if right (byte 16 0) (byte 16 16)) word))
	     (return nil))
	    finally (return t)))))

(defmethod statice-type:size-of-value ((handler hw-vector-handler) value)
  (ceiling (1+ (length value)) 2))

(defmethod statice-type:write-value ((handler hw-vector-handler) vector addressor word-offset n-words)
  (declare (ignore n-words))
  (let ((length (length vector)))
    (loop for j below length
	  for right = nil then (not right)
	  with word = (if (oddp length) 0 (dpb 1 (byte 1 0) 0))
	  with i = word-offset do
      (when right
	(setf (statice-storage:read-record-word addressor i) word)
	(incf i)
	(setq word 0))
      (setq word (sys:%logdpb (aref vector j)
			      (if right (byte 16 0) (byte 16 16))
			      word))
       finally
	 (setf (statice-storage:read-record-word addressor i) word))))


;;; Fixed-format physical type tiny-rational
(defun tiny-rational-p (value)
  (and (not (minusp value))
       (< (numerator value) #o400)
       (< (denominator value) #o400)))

(scl:define-presentation-type tiny-rational ()
  :abbreviation-for '(and rational (satisfies tiny-rational-p)))

(statice-type:define-value-type tiny-rational
  (:format :fixed)
  (:fixed-space 16 16)
  (:comparable-p t))

(defmethod statice-type:read-value ((handler tiny-rational-handler)
				    addressor word-offset bit-offset)
  (let* ((word (statice-storage:read-record-word addressor word-offset))
         (num (sys:%logldb (byte 8 (+ bit-offset 8)) word))
         (den (sys:%logldb (byte 8 bit-offset) word)))
    (if (zerop den) statice-type:*null-value* (/ num den))))

(defmethod statice-type:write-value ((handler tiny-rational-handler) value
				     addressor word-offset bit-offset)
  (let* ((word (statice-storage:read-record-word addressor word-offset))
	 (new-16-bits (if (eq value statice-type:*null-value*)
			  0
			  (sys:%logdpb (numerator value) (byte 8 8) (denominator value)))))
    (statice-type:write-record-word 
      addressor
      word-offset
      (sys:%logdpb new-16-bits (byte 16 bit-offset) word))))

(defmethod statice-type:value-equal ((handler tiny-rational-handler) value
				     addressor word-offset bit-offset)
  (let* ((word (statice-storage:read-record-word addressor word-offset))
         (num (sys:%logldb (byte 8 (+ bit-offset 8)) word))
         (den (sys:%logldb (byte 8 bit-offset) word)))
    (unless (zerop den)
      (and (rationalp value)
	   (= num (numerator value))
	   (= den (denominator value))))))

(defmethod statice-type:record-equal ((handler tiny-rational-handler) addressor-1 word-offset-1
				      bit-offset-1 addressor-2 word-offset-2 bit-offset-2)
  (let* ((word-1 (statice-storage:read-record-word addressor-1 word-offset-1))
         (den-1 (sys:%logldb (byte 8 bit-offset-1) word-1))
	 (word-2 (statice-storage:read-record-word addressor-2 word-offset-2))
         (den-2 (sys:%logldb (byte 8 bit-offset-2) word-2)))
    (and (not (zerop den-1))
	 (not (zerop den-2))
	 (= word-1 word-2))))

(defmethod statice-type:value-null-p ((handler tiny-rational-handler)
				      addressor word-offset bit-offset)
  (let* ((word (statice-storage:read-record-word addressor word-offset))
         (den (sys:%logldb (byte bit-offset 8) word)))
    (zerop den)))


;;; Fixed-format physical type byte-holder
(defclass byte-holder ()
    ((contents :initarg :contents :accessor byte-holder-contents)))

(scl:define-presentation-type byte-holder ()
   :no-deftype t)

(statice-type:define-value-type byte-holder
  (:format :fixed)
  (:fixed-space 8 8))

(defmethod statice-type:read-value ((handler byte-holder-handler)
				    addressor word-offset bit-offset)
  (let ((raw (sys:%logldb (byte 8 bit-offset) (statice-storage:read-record-word addressor word-offset))))
    (if (zerop raw) statice-type:*null-value* (make-instance 'byte-holder :contents raw))))

(defmethod statice-type:write-value ((handler byte-holder-handler) value
				     addressor word-offset bit-offset)
  (setf (sys:%logldb (byte 8 bit-offset) (statice-storage:read-record-word addressor word-offset))
	(if (eq value statice-type:*null-value*) 0 (byte-holder-contents value))))

(defmethod statice-type:value-equal ((handler byte-holder-handler) value
				     addressor word-offset bit-offset)
  (let ((raw (sys:%logldb (byte 8 bit-offset) (statice-storage:read-record-word addressor word-offset))))
    (unless (zerop raw)
      (equal (byte-holder-contents value) raw))))


;;; Fixed-format physical type my-complex
(scl:define-presentation-type my-complex ()
   :expander 'complex)

(statice-type:define-value-type my-complex
  (:format :fixed)
  (:fixed-space 64 0))

(defmethod statice-type:read-value ((handler my-complex-handler) addressor
				    word-offset bit-offset)
  bit-offset
  (let ((realp (statice-storage:read-record-word addressor word-offset))
	(imagp (statice-storage:read-record-word addressor (1+ word-offset))))
    (if (and (zerop realp) (zerop imagp))
	statice-type:*null-value*
	(complex realp imagp))))

(defmethod statice-type:write-value ((handler my-complex-handler) value
				     addressor word-offset bit-offset)
  bit-offset
  (setf (statice-storage:read-record-word addressor word-offset)
	(if (eq value statice-type:*null-value*) 0 (realpart value)))
  (setf (statice-storage:read-record-word addressor (1+ word-offset))
	(if (eq value statice-type:*null-value*) 0 (imagpart value))))

(defmethod statice-type:value-equal ((handler my-complex-handler) value
				     addressor word-offset bit-offset)
  bit-offset
  (let ((realp (statice-storage:read-record-word addressor word-offset))
	(imagp (statice-storage:read-record-word addressor (1+ word-offset))))
    (unless (and (zerop realp) (zerop imagp))
      (and (equal (realpart value) realp)
	   (equal (imagpart value) imagp)))))

(defmethod statice-type:record-equal
	   ((handler my-complex-handler) addressor-1 word-offset-1
	    bit-offset-1 addressor-2 word-offset-2 bit-offset-2)
  bit-offset-1
  bit-offset-2
  (let ((realp-1 (statice-storage:read-record-word addressor-1 word-offset-1))
	(imagp-1 (statice-storage:read-record-word addressor-1 (1+ word-offset-1)))
	(realp-2 (statice-storage:read-record-word addressor-2 word-offset-2))
	(imagp-2 (statice-storage:read-record-word addressor-2 (1+ word-offset-2))))
    (and (not (and (zerop realp-1) (zerop imagp-1)))
	 (not (and (zerop realp-2) (zerop imagp-2)))
	 (equal realp-1 realp-2)
	 (equal imagp-1 imagp-2))))

(defmethod statice-type:value-null-p ((handler my-complex-handler)
				      addressor word-offset bit-offset)
  bit-offset
  (let ((realp (statice-storage:read-record-word addressor word-offset))
	(imagp (statice-storage:read-record-word addressor (1+ word-offset))))
    (and (zerop realp) (zerop imagp))))


;;; Logical type pathname.  This type is built into Statice.
(statice-type:define-value-type cl:pathname
  (:format :logical)
  (:based-on string))

(defmethod statice-type:encode-value ((handler pathname-handler) pathname)
  (when (eq (scl:send pathname :system-type) :logical)
    (setq pathname (scl:send pathname :translated-pathname)))
  ;; The following hair is to force the namespace's name to be printed
  ;; when the host is printed.
  (process:without-preemption
    (scl:send pathname :decache-host-name)
    (prog1
      (let* ((neti:*namespace* neti:*distribution-namespace*)
	     (neti:*namespace-search-list* (scl:send neti:*namespace* :search-rules))
	     (net:*local-host* neti:*distribution-local-host*)
	     (si:local-host net:*local-host*))
	(string pathname))
      (scl:send pathname :decache-host-name))))

(defmethod statice-type:decode-value ((handler pathname-handler) string)
  (fs:parse-pathname string))


;;; Variable-format physical type image.  This type is built into Statice.

;;; An image value is a 2-d bit array.  Either the width is a multiple
;;; of 32, or the array is an indirect array conformally displaced to an
;;; underlying array whose width is a multiple of 32.  Otherwise the
;;; array is not an image.
(scl:define-presentation-type image (())
   :expander '(array bit (* *)))

;;; Word   Meaning
;;;   0    image width
;;;   1    image height
;;;   2    array width, a multiple of 32.
;;;   3    array height
(statice-type:define-value-type image
   (:format :variable))

(defmethod statice-type:size-of-value ((handler image-handler) value)
  (let* ((real-array (or (si:array-indirect-to value) value))
	 (array-width (array-dimension real-array 1))
	 (array-height (array-dimension real-array 0))
	 (n-words (/ (* array-width array-height) 32)))
    (+ 4 n-words)))

(defmethod statice-type:read-value ((handler image-handler) addressor offset size)
  (declare (ignore size))
  (let* ((image-width (statice-storage:read-record-word addressor offset))
	 (image-height (statice-storage:read-record-word addressor (1+ offset)))
	 (array-width (statice-storage:read-record-word addressor (+ offset 2)))
	 (array-height (statice-storage:read-record-word addressor (+ offset 3)))
	 (n-words (/ (* array-width array-height) 32))
	 (real-array (scl:make-raster-array array-width array-height :element-type 'bit)))
    (read-multiple-record-word addressor (+ offset 4) (+ offset 4 n-words)
			       :into (make-array n-words :displaced-to real-array))
    (if (= image-width array-width)
	real-array
	(scl:make-raster-array image-width image-height
			       :displaced-to real-array
			       :displaced-conformally t
			       :element-type 'bit))))

(defmethod statice-type:write-value ((handler image-handler) value addressor offset size)
  (declare (ignore size))
  (let* ((image-width (array-dimension value 1))
	 (image-height (array-dimension value 0))
	 (real-array (or (si:array-indirect-to value) value))
	 (array-width (array-dimension real-array 1))
	 (array-height (array-dimension real-array 0))
	 (n-words (/ (* array-width array-height) 32)))
    (unless (zerop (mod array-width 32))
      (error "The array ~S was provided as a value of type IMAGE, but it is not~@
              built out of an array whose width is a multiple of 32." value))
    (setf (statice-storage:read-record-word addressor offset) image-width)
    (setf (statice-storage:read-record-word addressor (1+ offset)) image-height)
    (setf (statice-storage:read-record-word addressor (+ offset 2)) array-width)
    (setf (statice-storage:read-record-word addressor (+ offset 3)) array-height)
    (write-multiple-record-word
      addressor (+ offset 4) (+ offset 4 n-words)
      (make-array n-words :displaced-to real-array))
    (+ offset 4 n-words)))

;;; Comparison of images is not supported.
(defmethod statice-type:value-equal ((handler image-handler) value
				     addressor offset size)
  (declare (ignore value addressor offset size))
  nil)
