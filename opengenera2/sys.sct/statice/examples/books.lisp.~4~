;;; -*- Mode: LISP; Syntax: Common-lisp; Package: (books :use (statice scl)); Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#|

This is a sample Statice application for simple bookkeeping.  The
database maintains accounts, and entries in the account.  There are also
budget-items to which entries may be charged.  A program framework is
provided along with commands to add entries to accounts, display
accounts, hardcopy accounts, display the budget, show a summary of the
accounts, etc.

Certain things are hardcoded into the code (like the fact that the
monthly charge for many accounts is $185.00), and that the "Checking"
account is special.  However, it does serve as a simple example of how
to use the :cached option to attribute definitions.

To use this, you'll need to initialize a database and create some
account entities (and possibly budget-item entities).

(make-database *books-portal* 'books :if-exists :create)

|#

(defvar *books-portal* #P"leek:>finance>books")

(define-schema books (account entry budget-item))

(define-entity-type account ()
  ((name string :unique t :cached t :inverse account-named)
   (balance single-float :cached t)
   (type (member checking owner) :cached t)))

(define-entity-type entry ()
  ((description string :cached t)
   (amount single-float :cached t)
   (date time:universal-time :cached t)
   (account account :cached t :inverse account-entries :inverse-cached t)
   (balance single-float :cached t)
   (remarks string :cached t)))

(define-entity-type budget-item ()
  ((description string :cached t)
   (allocation single-float :cached t)
   (entries (set-of entry) :cached t :inverse entry-budget-item :unique t :inverse-cached t)))

(define-presentation-type account (())
   :no-deftype t
   :parser ((stream)
	    (let ((all-accounts nil))
	      (with-database (db *books-portal*)
		(with-transaction ()
		  (setq all-accounts nil)
		  (for-each ((account account))
		    (account-name account)
		    (push account all-accounts))))
	      (dw:complete-from-sequence all-accounts stream :name-key #'account-name)))
   :printer ((account stream)
	     (format stream "~A" (account-name account))))

(define-presentation-type budget-item (())
   :no-deftype t
   :parser ((stream)
	    (let (budget-items)
	      (with-database (db *books-portal*)
		(with-transaction ()
		  (setq budget-items nil)
		  (for-each ((item budget-item))
		    (budget-item-description item)
		    (push item budget-items))))
	      (dw:complete-from-sequence budget-items stream
					 :name-key #'budget-item-description)))
   :printer ((item stream)
	     (when item
	       (format stream "~A" (budget-item-description item)))))

(dw:define-program-framework books
  :command-definer t
  :select-key #\Page
  :top-level (books-top)
  :terminal-io-pane display
  :command-table
  (:inherit-from '("colon full command" "standard arguments" "standard scrolling")
   :kbd-accelerator-p 'nil)
  :state-variables ((current-account) (start-date) (end-date))
  :panes
  ((title :title :redisplay-string "Books" :height-in-lines 1 :redisplay-after-commands nil)
   (display :display
	    :default-character-style '(:fix :roman :large)
	    :redisplay-function #'redisplay-display
	    :redisplay-after-commands t
	    :margin-components
	    dw::'((margin-borders)
		  (margin-white-borders :thickness 2)
		  (margin-scroll-bar :shaft-whitespace-thickness 3))
	    :more-p nil)
   (interactor :interactor :height-in-lines 4)
   (command-menu :command-menu :menu-level :top-level))
  :configurations
  '((main (:layout (main :column title display interactor command-menu))
	  (:sizes
	    (main (title 1 :lines) (interactor 4 :lines)
		  (command-menu :ask-window self :size-for-pane command-menu)
		  :then (display :even))))))

(defvar *display-pane*)

(defvar *command-pane*)

(defparameter *serious-error-limit* 5)

(defmethod (books-top books) ()
  (let ((*display-pane* (dw:get-program-pane 'display))
	(*command-pane* (dw:get-program-pane 'command-menu)))
    (loop repeat *serious-error-limit*
	  as error = (catch 'serious-error
		       (setq current-account nil)
		       (dw:default-command-top-level self :prompt "Command: "))
	  finally (error error))))

(defmethod (redisplay-display books) (stream)
  (case current-account
    ((nil) (format stream "(No current account)"))
    (budget (display-budget self stream))
    (summary (display-summary self stream))
    (t (condition-bind
	 ((error #'(lambda (error) (throw 'serious-error error))))
	 (display-account-activity current-account stream start-date end-date)))))

(format:defformat format:$$ (:one-arg) (argument parameters)
  parameters
  (format format:*format-output* "~:[ ~,,7,$~;(~,,7,$)~]"
	  (minusp argument)
	  (abs argument)))

(clos:defmethod display-account-activity ((account account) stream start-date end-date &key hardcopy-p)
  (let ((account-entries (copy-list (account-entries account))))
    (setq account-entries (sort account-entries #'< :key #'entry-date))
    (format stream "~4% Activity for ~\\presentation\\ for period ~A - ~A~2%"
	    account
	    (zwei:print-date
	      (or start-date (entry-date (first account-entries))) nil nil nil nil)
	    (zwei:print-date (or end-date
				 (max (entry-date (first (last account-entries)))
				      (get-universal-time)))
			     nil nil nil nil))
    (formatting-table (stream)
      (with-character-face (:bold stream)
	(formatting-column-headings (stream)
	  (formatting-cell (stream) (princ "  Date         " stream))
	  (formatting-cell (stream) (princ "Description         " stream))
	  (formatting-cell (stream) (princ "  Amount    " stream))
	  (formatting-cell (stream) (princ "Balance    " stream))
	  (formatting-cell (stream) (princ "Remarks" stream))))
      (formatting-row (stream)			;how do you do blank lines?
	(loop repeat 5 do (formatting-cell (stream) (princ " " stream))))
      (dolist (entry account-entries)
	(let ((this-date (entry-date entry))
	      (amount (entry-amount entry))
	      (balance (entry-balance entry)))
	  (when (or (null start-date) (null end-date) (< start-date this-date end-date))
	    (formatting-row (stream)
	      (dw:with-output-as-presentation (:stream stream
					       :object entry
					       :type 'entry
					       :single-box t)
		(formatting-cell (stream)
		  (format stream "~@9A" (zwei:print-date this-date nil nil nil nil)))
		(formatting-cell (stream) (princ (entry-description entry) stream))
		(formatting-cell (stream) (format stream "~\\$$\\" amount))
		(formatting-cell (stream) (format stream "~\\$$\\" balance))
		(formatting-cell (stream)
		  (with-character-face (:italic stream)
		    (filling-output (stream :fill-column (if hardcopy-p 50 400))
		      (format stream "~A" (entry-remarks entry)))))))))))
    (let* ((last-entry (first (last account-entries)))
	   (last-balance (entry-balance last-entry))
	   (next-payment (if (< last-balance -185.0)
			     (+ (mod last-balance 185.0) 185.00)
			     (if (< -185.0 last-balance 0)
				 (mod last-balance 185.0)
				 (+ last-balance 185.0)))))
      (format stream "~5%   Current Balance:~50T~\\$$\\" last-balance)
      (unless (eq (account-type account) 'checking)
	(format stream "~%   Next payment (due on ~A):~50T~\\$$\\"
		(zwei:print-date
		  (next-15th :starting (entry-date last-entry)
			     :n-months-from-now (if (minusp last-balance)
						    (truncate
						      (abs (ceiling last-balance 185.00)))
						    0))
		  nil nil nil nil)
		next-payment) 
	(format stream "~%   Late Fee after that date:~50T~\\$$\\" (* .015 next-payment))))))

(define-books-command (com-clear) ()
   (send *display-pane* :clear-history))

(define-books-command (com-create-account :menu-accelerator nil)
    ((account-name 'string :default nil)
     &key
     (starting-balance 'single-float :default 0.00))
   (setq current-account
	 (with-database (db *books-portal*)
	   (with-transaction ()
	     (make-account :name account-name :balance starting-balance)))))

(define-books-command (com-show-account :menu-accelerator t)
    ((account 'account))
   (setq current-account account))

(define-books-command (com-set-range :menu-accelerator t)
    ((from-date 'time:universal-time
		:default (time:parse-universal-time "two months ago")
		:prompt "Starting date")
     (to-date 'time:universal-time
	      :default (get-universal-time)
	      :prompt "Ending date"))
   (setq start-date from-date end-date to-date))

(define-books-command (com-add-entry :menu-accelerator t)
    ((account 'account :prompt "to account" :default current-account))
   (multiple-value-bind (amount description budget-item date remarks)
       (dw:accepting-values (*query-io* :own-window t :temporary-p t :display-exit-boxes t)
	 (values (accept 'single-float :prompt "Entry amount" :default nil)
		 (accept 'string :prompt "Description" :default nil)
		 (when (eq (account-type account) 'checking)
		   (accept 'budget-item :prompt "Budget Item" :provide-default nil))
		 (accept 'time:universal-time
			 :prompt "Date of transaction"
			 :default nil)
		 (accept 'string :prompt "Remarks" :default "")))
     (with-database (db *books-portal*)
       (with-transaction ()
	 (let* ((last-balance (or (for-each ((entry (account-entries account))
					     (:order-by (entry-date entry) descending))
				    (return (entry-balance entry)))
				  (account-balance account)))
		(entry (make-entry :description description
				   :amount amount
				   :date date
				   :account account
				   :balance (+ last-balance amount)
				   :remarks remarks)))
	   (account-entries account)
	   (setf (entry-budget-item entry) budget-item))))))

(define-books-command (com-compute-late-fee :menu-accelerator t)
    ((account 'account :prompt "to account" :default current-account)
     (date 'time:universal-time
	   :prompt "Date of late fee"
	   :default (time:parse-universal-time "16th")))
   (let* ((last-balance (with-database (db *books-portal*)
			  (with-transaction ()
			    (or (for-each ((entry (account-entries account))
					   (:order-by (entry-date entry) descending))
				  (return (entry-balance entry)))
				(account-balance account)))))
	  (late-fee (/ (truncate (* last-balance 1.5)) 100.0)))
     (setq late-fee (accept 'single-float :prompt "Late fee" :default late-fee))
     (with-database (db *books-portal*)
       (with-transaction ()
	 (make-entry :description "Late fee"
		     :amount late-fee
		     :date date
		     :account account
		     :balance (+ last-balance late-fee)
		     :remarks "")
	 (account-entries account)))))

(define-books-command (com-hardcopy-account :menu-accelerator t)
    ((account 'account :prompt "account" :default current-account)
     (printer 'sys:printer :default hardcopy:*default-text-printer*))
   (with-open-stream (stream (hardcopy:make-hardcopy-stream
			       printer :page-headings nil :landscape-p t))
     (with-character-size (:bigger stream)
       (display-account-activity account stream start-date end-date :hardcopy-p t))))
			     
(define-presentation-action modify-entry (entry t
						:gesture :select
						:documentation "Modify this entry")
			    (entry)
  (multiple-value-bind (date description budget-item amount balance remarks)
      (dw:accepting-values (*query-io* :own-window t :temporary-p t :display-exit-boxes t)
	(values (accept 'time:universal-time
			:prompt "Date of transaction"
			:default (entry-date entry))
		(accept 'string :prompt "Description" :default (entry-description entry))
		(when (eq (account-type (books-current-account dw:*program*)) 'checking)
		  (accept 'budget-item
			  :prompt "Budget Item"
			  :default (entry-budget-item entry)))
		(accept 'single-float :prompt "Entry amount" :default (entry-amount entry))
		(accept 'single-float :prompt "Balance" :default (entry-balance entry))
		(accept 'string :prompt "Remarks" :default (entry-remarks entry))))
    (with-database (db *books-portal*)
      (with-transaction ()
	(macrolet ((update-if-changed (slot)
		     (let ((conc-name (intern (string-append "ENTRY-" (symbol-name slot)))))
		       `(unless (equal (,conc-name entry) ,slot)
			  (setf (,conc-name entry) ,slot)))))
	  (update-if-changed date)
	  (update-if-changed description)
	  (when (update-if-changed budget-item)
	    (change-version-number D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")entry 0budget-item))
	  (update-if-changed amount)
	  (update-if-changed balance)
	  (update-if-changed remarks))))
    (redisplay-display dw:*program* *display-pane*)))

(define-books-command (com-add-budget-item)
    ((description 'string :provide-default nil :prompt "Description")
     (allocation 'single-float :provide-default nil :prompt "Amount budgeted"))
   (with-database (db *books-portal*)
     (with-transaction ()
       (make-budget-item :description description :allocation allocation :entries nil))))

(define-books-command (com-show-budget :menu-accelerator t) ()
   (setq current-account 'budget))

(define-books-command (com-hardcopy-budget :menu-accelerator t)
    ((printer 'sys:printer :default hardcopy:*default-text-printer*))
   (with-open-stream (stream (hardcopy:make-hardcopy-stream
			       printer :page-headings nil :landscape-p t))
     (with-character-size (:bigger stream)
       (display-budget self stream))))

(defmethod (display-budget books) (stream)
  (let ((budget-items nil))
    (with-database (db *books-portal*)
      (with-transaction ()
	(setq budget-items nil)
	(for-each ((bi budget-item))
	  (push bi budget-items))))
    (with-character-face (:bold stream)
      (format stream "~5%                   Budget~2%"))
    (setq budget-items (sort budget-items #'< :key #'budget-item-allocation))
    (formatting-table (stream)
      (formatting-column-headings (stream)
	(with-character-face (:bold stream)
	  (formatting-cell (stream) (princ "Item Description    " stream))
	  (formatting-cell (stream) (princ "Allocation    " stream))
	  (formatting-cell (stream) (princ "Remaining    " stream))))
      (formatting-row (stream)
	(loop repeat 3 do (formatting-cell (stream) (princ " " stream))))
      (dolist (item budget-items)
	(formatting-row (stream)
	  (formatting-cell (stream) (princ (budget-item-description item) stream))
	  (formatting-cell (stream)
	    (format stream "~\\$$\\" (budget-item-allocation item)))
	  (formatting-cell (stream)
	    (format stream "~\\$$\\"
		    (+ (budget-item-allocation item)
		       (or (loop for entry in (budget-item-entries item)
				 sum (entry-amount entry))
			   0)))))))))

(define-books-command (com-backup-database :menu-accelerator t)
    ((file 'pathname
	   :default (fs:parse-pathname "foo:>dump-books.lisp.newest")))
   (statice-model::dump-database *books-portal* file))

(define-books-command (com-show-summary :menu-accelerator t) ()
   (setq current-account 'summary))

(define-books-command (com-hardcopy-summary :menu-accelerator t)
    ((printer 'sys:printer :default hardcopy:*default-text-printer*))
   (with-open-stream (stream (hardcopy:make-hardcopy-stream
			       printer :page-headings nil :landscape-p t))
     (with-character-size (:bigger stream)
       (display-summary self stream))))

(defmethod (display-summary books) (stream)
  (unless start-date
    (with-character-face (:bold *display-pane*)
      (format *display-pane* "~3% Specify a range")))      
  (with-character-face (:bold stream)
    (format stream "~3%  Account summary~:[~2*~; for period ~A - ~A~]~2%"
	    start-date
	    (zwei:print-date (or start-date 0) nil nil nil nil)
	    (zwei:print-date (or end-date 0) nil nil nil nil))
    (format stream "~%Name~14TStart Balance~29TCharges~42TCredits~56TBalance~%"))
  (princ 
    (with-database (db *books-portal*)
      (with-transaction ()
	(with-output-to-string (stream)
	  (flet ((summarize-account (account)
		   (let* ((credits 0.0)
			  (debits 0.0)
			  (last-date-before-start 0)
			  (start-balance nil)
			  (last-date 0)
			  (last-balance nil))
		     (dolist (entry (account-entries account))
		       (let ((entry-date (entry-date entry)))
			 (when ( start-date entry-date end-date)
			   (let ((amount (entry-amount entry)))
			     (if (minusp amount) (incf credits amount) (incf debits amount)))
			   (when (< last-date entry-date)
			     (setq last-balance (entry-balance entry)
				   last-date entry-date)))
			 (when ( last-date-before-start entry-date start-date)
			   (setq start-balance (entry-balance entry)
				 last-date-before-start entry-date))))
		     (format stream "~%~A~15T~\\$$\\~30T~\\$$\\~45T~\\$$\\~60T~\\$$\\"
			     (account-name account)
			     (or start-balance (account-balance account))
			     debits
			     credits
			     last-balance))))
	    (for-each ((account account)
		       (:where (eql (account-type account) 'owner))
		       (:order-by (account-name account) ascending))
	      (summarize-account account))
	    (format stream "~2%")
	    (summarize-account (account-named "Checkbook"))))))
    stream))

(defun next-15th (&key (n-months-from-now 0) (starting (get-universal-time)))
  (declare (values next-15th-encoded))
  (multiple-value-bind (secs minutes hours day month year)
      (time:decode-universal-time starting)
    secs minutes hours
    (incf month n-months-from-now)
    (when ( day 15) (incf month))
    (when (> month 12)
      (multiple-value-bind (years months) (floor month 12)
	(incf year years)
	(setq month months)))
    (setq day 15)
    (time:encode-universal-time 0 0 0 day month year)))
