;;; -*- Mode: JOSHUA; Syntax: Joshua; Package: (joshua-test :use (statice joshua scl)); Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This is a simple example of how you might store predications in a
;;; statice database.  It makes many assumptions about the format of
;;; predications (e.g. that they're single level statements).

;;; I'm going to ignore side effecting inside transactions here.  Higher
;;; level locks could be used on the whole or various parts of the
;;; knowledge base.

;;; Assumes (maybe wrongly?) that predication statements will only
;;; consist of logic variables and symbols.

;;; This may not be necessary anymore
(defmacro with-transaction-if-appropriate (options &body body)
  options
  `(flet ((transaction-body ()
	    . ,body))
     (if statice-model::*transaction-info*
	 (transaction-body)
	 (with-transaction ()
	   (transaction-body)))))

(defvar *portal* (fs:parse-pathname "LEEK:>jga>joshua-test"))

(define-schema joshua (root node-entity symbol-entity logic-variable-entity))

(defun make-joshua-database ()
  (make-database *portal* 'joshua :if-exists :create)
  (with-database (db *portal*)
    (with-transaction ()
      (make-root :tag (intern-symbol-entity :root)))))

(define-entity-type node-entity ()
  ((tag symbol-entity :inverse-index t :inverse nodes-with-car)
   (next (set-of node-entity) :index t :cached t))
  (:conc-name ne-))

(define-entity-type symbol-entity ()
  ((name symbol :unique t :inverse-index t :inverse symbol-named))
  (:conc-name se-))

(define-entity-type logic-variable-entity (symbol-entity) nil)  

(define-entity-type root (node-entity) nil)

(define-predicate-model persistent-predicate-mixin () ()
  (:required-flavors predication))

(define-predicate-method (insert persistent-predicate-mixin) ()
  (with-database (db *portal*)
    (with-transaction-if-appropriate ()
      (let ((root (or (for-each ((root root)) (return root))
		      (error "Root not found"))))
	(loop with current-node = root
	      for rest on ji::statement
	      for symbol in ji::statement do
	  (let* ((symbol-entity (intern-symbol-entity symbol))
		 (next-node (for-each ((node (ne-next current-node))
				       (:where (eq (ne-tag node) symbol-entity)))
			      (return node))))
	    (cond (next-node
		   (setq current-node next-node))
		  (t
		   (add-list-starting-at rest current-node)
		   (return (values self t)))))
	      finally
		(return (values self nil)))))))

(defun add-list-starting-at (list node)
  (loop with current-node = node
	for symbol in list do
    (let ((new-node (make-node-entity :tag (intern-symbol-entity symbol))))
      (add-to-set (ne-next current-node) new-node)
      (setq current-node new-node))))

(defun intern-symbol-entity (symbol &key (if-does-not-exist :create))
  (let* ((lv-p (sys:unbound-logic-variable-p symbol))
	 (symbol (if lv-p (logic-variable-name symbol) symbol)))
    (or (symbol-named symbol)
	(and (eq if-does-not-exist :create)
	     (make-entity (if lv-p 'logic-variable-entity 'symbol-entity) :name symbol)))))

(define-predicate-method (fetch persistent-predicate-mixin) (continuation)
  (with-database (db *portal*)
    (with-transaction-if-appropriate ()
      (unless (eql (predication-truth-value self) *false*)
	;; notice how I carefully ignore side effects here
	(labels ((match (node list)
		   (if (null list)
		       (let ((object (copy-object-if-necessary self)))	;should be stack consed
			 (setf (predication-truth-value object) *true*)
			 (funcall continuation object))
		       (let ((current-symbol (first list)))
			 (if (sys:unbound-logic-variable-p current-symbol)
			     (for-each ((ne (ne-next node)))
			       (with-unification
				 (unify
				   current-symbol
				   (let ((tag (ne-tag ne)))
				     (typecase tag
				       (logic-variable-entity
					 (ji:make-unbound-logic-variable (se-name tag)))
				       (symbol-entity (se-name tag)))))
				 (match ne (rest list))))
			     (let ((se (intern-symbol-entity current-symbol
							     :if-does-not-exist nil)))
			       (when se
				 (for-each ((ne (ne-next node))
					    (:where (eq (ne-tag ne) se)))
				   (match ne (rest list))))))))))
	  (match (or (for-each ((root root)) (return root))
		     (error "Root not found"))
		 ji::statement))))))

;;; root node-entity symbol-entity logic-variable-entity are classes
(compile-flavor-methods persistent-predicate-mixin)

(defun graph-it ()
  (with-database (db *portal*)
    (with-transaction ()
      ;; carefully ignoring side effects...
      (format-graph-from-root (for-each ((root root)) (return root))
			      #'(lambda (node stream)
				  (ne-next node)
				  (let ((tag (ne-tag node)))
				    (when (typep tag 'logic-variable-entity)
				      (princ ' stream))
				    (prin1 (se-name tag) stream)))
			      #'ne-next
			      :dont-draw-duplicates t
			      :orientation :horizontal
			      :default-drawing-mode :arrow
			      :border :oval))))

;;; Use the above in a small test

(define-predicate-model persistent-model
	()
	(persistent-predicate-mixin default-protocol-implementation-model predication))

(define-predicate good-to-eat (food) (persistent-model)
  :destructure-into-instance-variables
  (:required-instance-variables food))

(define-predicate-method (say good-to-eat) (&optional (stream *standard-output*))
  (format stream "~&~S is a good to eat" food))

(define-predicate favorite-food (what is) (persistent-model)
  :destructure-into-instance-variables
  (:required-instance-variables what is))

(define-predicate-method (say favorite-food) (&optional (stream *standard-output*))
  (format stream "~&~S has a favorite food of ~S" what is))

;;;;;;;;;

(make-joshua-database)

(tell [and [good-to-eat bananas]
	   [good-to-eat everything]
	   [good-to-eat grapes]
	   [good-to-eat purina-monkey-chow]])

(tell [and [favorite-food monkey grapes]
	   [favorite-food cat liver]
	   [favorite-food dang western-sub]
	   [favorite-food lamb turkey-sub]
	   [favorite-food fred ding-dongs]
	   [favorite-food pinhead ding-dongs]
	   [favorite-food pinhead taco-sauce]])

(ask [favorite-food who ding-dongs]
     #'(lambda (ignore)
	 (format t "~&~A has a favorite food of ding-dongs" who)))
