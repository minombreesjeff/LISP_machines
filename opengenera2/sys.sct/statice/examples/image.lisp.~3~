;;; -*- Mode: LISP; Syntax: Common-lisp; Package: STATICE-USER; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This example demonstrates the use of the image type.  setup-image-database
;;; makes a database containing two images, and show-image-database displays
;;; the contents of the database.

;;; Make a funny-sized subset of a grid.  Show it.  Store it, get it
;;; back, and show that.

(defvar *image-test-pathname* #p"beet:>image-test")

(define-schema image-test (snapshot))

(define-entity-type snapshot ()
  ((name string :unique t :inverse-index t :cached t)
   (picture image :area images :cached t)))

(defun setup-image-database ()
  (make-database *image-test-pathname* 'image-test)
  ;; Make a raster array holding a grid.  Note that the width is a
  ;; multiple of 32.
  (let ((base (scl:make-raster-array 128 37 :initial-element 0 :element-type 'bit)))
    ;; Draw vertical grid lines
    (dotimes (i 128)
      (loop for j from 3 by 10 below 40 do
	(setf (scl:raster-aref base i j) 1)))
    ;; Draw horizontal grid lines
    (dotimes (j 37)
      (loop for i from 10 by 20 below 128 do
	(setf (scl:raster-aref base i j) 1)))
    (with-database (db *image-test-pathname*)
      (with-transaction ()
	;; Make a snapshot whose picture is the base raster array.
	(make-snapshot :name "base" :picture base)
	;; Make another snapshot, whose picture is a portion of the base raster array.
	(make-snapshot :name "portion"
		       :picture (scl:make-raster-array 59 30
						       :displaced-to base
						       :displaced-conformally t
						       :element-type 'bit))))))

(defun show-image-database ()
  (let ((snapshots nil))
    ;; Read all the snapshots into Lisp objects.
    (with-database (db *image-test-pathname*)
      (with-transaction ()
	(setq snapshots nil)
	(for-each ((s snapshot))
	  (push s snapshots)
	  (snapshot-name s)
	  (snapshot-picture s))))
    ;; Display them on the window.
    (dolist (s snapshots)
      (format t "~%~A~%" (snapshot-name s))
      (graphics:with-room-for-graphics ()
	(graphics:draw-image (snapshot-picture s) 0 0)))))
