;;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Lowercase: Yes; Package: STATICE-STORAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>



;;; Page type code values.
(defconstant *data-page-code* 1)
(defconstant *region-header-page-code* 2)
(defconstant *b-set-page-code* 3)
(defconstant *cluster-page-code* 4)		

(defconstant *b-tree-header-page-code* 5)
(defconstant *b-tree-branch-page-code* 6)
(defconstant *b-tree-leaf-page-code* 7)
(defconstant *b-tree-overflow-page-code* 8)

(defun type-code-name (type-code)
  (select type-code
    (*data-page-code* "data page")
    (*region-header-page-code* "region header page")
    (*b-set-page-code* "B-set page")
    (*cluster-page-code* "cluster page")
    (*b-tree-header-page-code* "B-tree header page")
    (*b-tree-branch-page-code* "B-tree branch page")
    (*b-tree-leaf-page-code* "B-tree leaf page")
    (*b-tree-overflow-page-code* "B-tree overflow page")
    (otherwise (format nil "Type #~D" type-code))))

;;; RID format.
(defstruct (rid (:type :fixnum))
  ((page-number 0 :byte (byte 21 10))
   (desc-offset 0 :byte (byte 10 0))))

(define-presentation-type rid (())
   :expander 'integer
   :printer ((node stream)
	     (if (eq node :deleted)
		 (write-string "<deleted>" stream)
		 (format stream "~A/~A" (rid-page-number node) (rid-desc-offset node)))))

;;; Descriptor word format.
(defstruct (desc (:type :fixnum))
  (;(indirect 0 :byte (byte 1 31))
   ;; The following field is used if indirect = 1.
   ;(rid 0 :byte (byte 31 0))
   ;; The following fields are used if indirect = 0.
   (external 0 :byte (byte 1 26))
   (depth 0 :byte (byte 2 24))
   (start 0 :byte (byte 12 12))
   (size 0 :byte (byte 12 0))
   ))

;;; Can't use defstruct because we need a zl:%logldb, because it's
;;; the sign bit.
(defsubst desc-indirect (desc) (zl:%logldb (byte 1 31) desc))

;;; Can't use defstruct because otherwise make-desc always clobbers
;;; this entire field to zero, rendering the constructor useless.
(defsubst desc-rid (desc) (ldb (byte 31 0) desc))

;;; Data page header format.
(defstruct (data-page (:type :array)
		      (:size-symbol *real-data-page-header-size*))
  ((header-word-1)
   ;(type-code 0 :byte (byte 4 28))
   (page-number 0 :byte (byte 28 0)))
  segment-id
  ((header-word-3)
   (n-free     0 :byte (byte 12 12))
   (first-free 0 :byte (byte  12 0)))
  ((header-word-4)
   (first-desc-number 0 :byte (byte 12 0))))

;;; This locution is because I want this to be an inline constant.
(defconstant *data-page-header-size* 4)

(unless (= *real-data-page-header-size* *data-page-header-size*)
  (error "*data-page-header-size* needs to be fixed"))

(defsubst data-page-type-code (data-page)
  (sys:%logldb (byte 4 28) (aref data-page 0)))

;;; Data page header format.
(defstruct (cluster-page (:type :array)
			 (:size-symbol *real-cluster-page-header-size*))
  ((header-word-1)
   ;(type-code 0 :byte (byte 4 28))
   (page-number 0 :byte (byte 28 0)))
  segment-id
  ((header-word-3)
   (n-free     0 :byte (byte 12 12))
   (first-free 0 :byte (byte  12 0)))
  ((header-word-4)
   (first-desc-number 0 :byte (byte 12 0)))
  cluster-bset)

;;; This locution is because I want this to be an inline constant.
(defconstant *cluster-page-header-size* 5)

(unless (= *real-cluster-page-header-size* *cluster-page-header-size*) 
  (error "*cluster-page-header-size* needs to be fixed"))

(defsubst cluster-page-type-code (cluster-page)
  (sys:%logldb (byte 4 28) (aref cluster-page 0)))

;;; Region header format.
(defstruct (rh-header (:type :array)
		      (:size-symbol *rh-header-size*))
  ((word-0)
   (type-code 0 :byte (byte 4 28))
   (page-number 0 :byte (byte 28 0)))
  segment-id
  ((word-2)
   (version 0 :byte (byte 8 16))
   (page-size 0 :byte (byte 16 0)))
  root-rid
  area-map
  n-regions
  map-0 map-1 map-2 map-3 map-4 map-5 map-6 map-7
  mbz-0 mbz-1 mbz-2 mbz-3)

;;; If the defstruct above changes, change this too.
(defconstant *rh-header-map-offset* 6)

;;; A half word in a region header.  There is one of these in each half
;;; of the word.
(defstruct (rh-page (:type :fixnum))
  ((type-code 0 :byte (byte 4 12))
   (range-code 0 :byte (byte 4 8))
   (area 0 :byte (byte 8 0))))   

;;; A word in the area map.  Forget about using the sign bit since we have
;;; the spare bits in the word.
(defstruct (am-word (:type :fixnum))
  ((area 0 :byte (byte 8 23))
   (range-code 0 :byte (byte 4 19))
   (region 0 :byte (byte 13 0))))

(defconstant *max-area-number* (1- (expt 2 8)))

(defsubst check-area-number (area)
  (unless ( 1 area *max-area-number*)
    (error "Area numbers must be between 1 and ~S inclusive.~@
            The area number supplied (~D) is too ~:[low~;high~]"
	   *max-area-number* area (plusp area))))

;;; The number of pages per region, including the region header page.
;;; This is the number of rh-page-desc halfwords in each rh.
(defsubst pages-per-region (page-size)
  (* 2 (- page-size *rh-header-size*)))

;;; Utility resource of fixnum vectors.
(defresource utility-vector (length)
  :constructor (make-array length)
  :matcher ( length (length object)))

(defresource utility-vector-with-fill-pointer (length)
  :constructor (make-array length :fill-pointer 0)
  :initializer (setf (fill-pointer object) 0)
  :matcher (when ( length (array-total-size object))
	     (setf (fill-pointer object) 0)))

;;; Simple caching mechanism for page 0, designed to decrease
;;; the number of calls to read-page.

(defvar *opening*)

(defvar *rh0*)

(defvar *rh0-lock-mode*)			;nil, :read, or :write

(defmacro with-transaction-internal (options &body body)
  (declare (ignore options))
  `(let ((*opening*)
	 (*rh0* nil)
	 (*rh0-lock-mode* nil))
     (progn . ,body)))

(defsubst read-rh0 (opening &rest options)
  (or (and (eq *opening* opening)
	   *rh0*)
      (and (setq *opening* opening
		 *rh0-lock-mode* :read
		 *rh0* (apply #'dbfs:read-page opening 0 options)))))

(defsubst write-rh0 (opening &rest options)
  (or (and (eq *opening* opening)
	   (eq *rh0-lock-mode* :write)
	   *rh0*)
      (and (setq *opening* opening
		 *rh0-lock-mode* :write
		 *rh0* (apply #'dbfs:write-page opening 0 options)))))

(defsubst create-rh0 (opening &rest options)
  (or (and (eq *opening* opening)
	   (eq *rh0-lock-mode* :write)
	   *rh0*)
      (and (setq *opening* opening
		 *rh0-lock-mode* :write
		 *rh0* (apply #'dbfs:create-page opening 0 options)))))

(defflavor record-addressor
	(opening
	 page-size
	 max-block-size
	 page-number
	 desc-number
	 rid-page
	 mode
	 desc
	 next-word
	 (cluster-bid nil))
	()
  (:readable-instance-variables cluster-bid)
  (:writable-instance-variables cluster-bid))

(defvar *record-addressor-pool* (make-array 10 :fill-pointer 0))

(defvar *record-addressor-pool-length* 10)

;;; A stack-list of all the record-addressors that are currently open.
(defvar *open-record-addressors* nil)

;;; From b-set

;;; Values of the node-kind field.
(defconstant *branch* 0)
(defconstant *leaf* 1)

;;; The value of this variable is a function called with one argument,
;;; an opening.  It should allocate a new page, and return two values:
;;; the page, and the page number.
(defvar *allocation-function* nil)

;;; The value of this variable is a function called with two arguments,
;;; an opening and a page number.  It should deallocate the page.  The
;;; returned value is not defined.
(defvar *deallocation-function* nil)

;;; Queue containing pages which have been allocated, but not put into
;;; the area map yet.  This happens when we split a b-set during allocation
;;; of page.  That is, allocation needs to allocate.  Format of the queue
;;; is a list of page numbers.
(defvar *allocated-pages-queue* nil)

;;; Queue containing pages which have been deallocated, but not put into
;;; the area map yet.  This happens when we split a b-set during
;;; allocation of page.  That is, allocation needs to deallocate (an
;;; area map page).  Format of the queue is a list of page numbers.
(defvar *deallocated-pages-queue* nil)


;;; list of current index pointers
(defvar *ip-list* nil "Stack List of (opening page number current key-index new-root)")

(defun statice-record-warm-init ()
  ;; These are important.  Their top level values are used.
  (setq *open-record-addressors* nil)
  (setq *ip-list* nil)
  ;; These are not as important, since their top level values are not
  ;; supposed to be used.
  (setq *allocation-function* nil)
  (setq *deallocation-function* nil)
  (setq *allocated-pages-queue* nil))

;;; Checking checkwords.

(defmacro check-page (page page-number type-code opening &optional rh0)
  `(compiler:%error-unless (and (= (data-page-page-number ,page) ,page-number)
				,@(when type-code
				    `((= (data-page-type-code ,page) ,type-code)))
				,@(when rh0 `((= (data-page-segment-id ,page)
						 (rh-header-segment-id ,rh0)))))
     (signal-checkwords-error ,page
			      ,page-number
			      ,type-code
			      ,opening)))

(defflavor checkwords-error
	   (page
	    opening
	    expected-page-number
	    found-page-number
	    expected-type-code
	    found-type-code
	    expected-segment-id
	    found-segment-id)
	(error)
  :initable-instance-variables)

(defun signal-checkwords-error (page page-number type-code opening)
  (let ((rh0 (read-rh0 opening)))
    (error 'checkwords-error
	   :page page
	   :opening opening
	   :expected-page-number page-number
	   :found-page-number (data-page-page-number page)
	   :expected-type-code type-code
	   :found-type-code (data-page-type-code page)
	   :expected-segment-id (rh-header-segment-id rh0)
	   :found-segment-id (data-page-segment-id page))))

(defmethod (dbg:report checkwords-error) (stream)
  (format stream
	  "The checkwords appear incorrect while accessing a page of a DBFS file.~@
           The opening to the file is ~S.~@
           Page number: expected = ~S, found = ~S~@
           Type code: expected = ~S (~A), found = ~S (~A)~@
           File ID: expected = ~S, found = ~S"
	  opening expected-page-number found-page-number
	  expected-type-code (type-code-name expected-type-code)
	  found-type-code (type-code-name found-type-code)
	  expected-segment-id found-segment-id))

(defflavor rid-error
	(rid)
	(error)
  :initable-instance-variables)

(defmethod (dbg::report rid-error) (stream)
  (if (variable-boundp rid)
      (format stream "The RID supplied (~S) is invalid." rid)
      (format stream "A bad RID was detected but its value was not recorded.")))

