;;; -*- Mode: LISP; Syntax: Common-lisp; Package: STATICE-INDEX; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Standard interface to Model Level.  See Q:>DLW>Statice>Storage-Spec.text.
;;; Most of the comments are stolen from that file.

;; Macro which assists the interface to Model level

(defmacro with-segment-opening ((segment-var opening) &body body)
  `(let* ((,segment-var ,opening)
	  (*words-per-page* (file-page-size ,segment-var)))
     (when-debugging-and T
       (setf *words-per-page* 28.))
     (let ((*50%-point-of-page* (truncate (- *words-per-page* *index-record-header-size*) 2)))
     . ,body)))

(defmacro with-index ((opening IID root-var mode) &body body)
  `(with-segment-opening (*current-segment* ,opening)
     (with-resource (*current-index* 'index-instance)
       (set-index-root *current-index* ,IID)
       (with-record-at (,root-var (index-root *current-index*) ,mode)
	 . ,body))))

;;Make a new index in the file specified by the D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")opening0.  The index is
;;initially empty.  Return the IID of the new index.  1single-value0-1p0 tells
;;Storage Level to make sure that every entry in the index has no more
;;than one value, and for insert-index-value to signal an error if it
;;tries to add a second distinct value to an entry.

(defun make-btree-index (opening &optional obsolete-single-value-p)
  (declare (values IID))
  obsolete-single-value-p			;ignored
  (with-segment-opening (*current-segment* opening)
    (with-resource (index-object 'index-instance)
      (initialize-index index-object)
      (index-root index-object))))

;;Deallocate the specified index.  The given pair of {1opening0, 1iid0} now
;;cannot be used by the caller for any operation, or else Storage Level
;;signals an error saying "That index has been deleted."  However, Storage
;;Level is free to re-use the old 1iid0 value for a new index in the future,
;;so it is the responsibility of the caller to not leave copies of 1iid0s
;;lying around where they might get reused after the index is deleted.
;;It can re-use the 1iid0 as soon as it wants to, e.g. on the next call
;;to make-index, even in the middle of the same transaction.

(defun delete-btree-index (opening IID)
  (with-index (opening IID root :write)		;probably wrong, but for now
    (deallocate-tree root)))

;;If the index does not contain an entry with 1key0, then create such
;;an entry, with one value (namely 1value0), and insert it in the index.  If
;;the index does contain an entry with the 1key0 as its key,
;;then adjoin 1value0 with the entry's set of values.  If single-value-p
;;is specified, and an entry already exists, signal an error.
(defun insert-index-value (opening IID key value depth &optional single-value-p)
  (with-index (opening IID root (if (= depth 1) :write :read))
    (insert root key value single-value-p depth)
    (index-root *current-index*)))

;;If the index does not contain an entry with 1key0, signal an error.
;;If there is such an entry, but 1value0 is not one of its values, signal an
;;error.  Otherwise, remove 1value0 from the entry's set of values, and if
;;the entry is left with no values, remove it from the index.
(defun delete-index-value (opening IID key value depth)
  (with-index (opening IID root (if (= depth 1) :write :read))
    (delete-value root key value depth)
    (index-root *current-index*)))

;;If the index does not contain an entry with 1key0, return nil.  If
;;the entry exists, and the size of the set of values is greater than one,
;;signal an error.  Otherwise, return the single value.  In any case,
;;leave the index as it was found.
(defun lookup-index-value (opening IID key)
  (declare (values value))
  (with-index (opening IID root :read)
    ;;Lookup key in the tree, permitting only one value to be returned.
    (lookup-value root key)))

;;Return an 1-d art-fixnum array, consed on the data stack, of the values
;;of all the entries with 1key0.  It's strongly recommended that the caller
;;do a sys:with-data-stack around the dynamic use of this array, so that
;;the storage it occupies will be returned without any GC overhead.  In
;;any case, leave the index as it was found.  Note that if there are no
;;such entries, this function returns a zero-length array.
(defun lookup-index-values (opening IID key)
  (declare (values array-of-values))
  (with-index (opening IID root :read)
    ;;Lookup key in the tree, permitting multiple values to be returned.
    (lookup-values root key)))

;;Find all the entries in the index for which the key is within the
;;specified range.  Create and return a 1-d art-fixnum array, consed on
;;the data stack, of the union of all the values of those entries, sorted
;;by the ordering specified by the index.  It's strongly recommended that
;;the caller do a sys:with-data-stack around the dynamic use of this
;;array, so that the storage it occupies will be returned without any GC
;;overhead.  In any case, leave the index as it was found.
;;
;;The lower end of the range is specified by 1greaterp0 or 1not-lessp0.  It is
;;an error to supply both.  If neither is supplied, the scan starts at the
;;beginning of the index.  The upper end of the range is specified by
;;1lessp0 or1 not-greaterp0.  It is an error to supply both.  If neither is
;;supplied, the scan stops at the end of the index.
;;
;;These arguments are specified as keys, in the format described above.
;;In the examples below, suppose there is a certain function called ENCODE
;;that takes the values of Lisp strings and encodes them into keys
;;according to some fashion that preserves lexiographic ordering (this is
;;the caller's responsibility!).
;;
;;Examples:
;;
;;  (scan-index-range opening iid :lessp (encode "G"))
;;Find all entries for which the value is less than "G".
;;
;;  (scan-index-range opening iid :not-lessp (encode "A") :lessp (encode "G"))
;;Find all entries for which the value is greater than or
;;equal to "A", and less than "G".
;;
;;  (scan-index-range opening idd)
;;Find all entries in the index.
;;
;;[The returned array could have duplicates in it.  I used the word
;;"union" above, but I'm not actually sure whether it should be the
;;responsibility of Storage Level to detect duplicates and eliminate them.]
(defun scan-index-range (opening IID &key lessp greaterp not-lessp not-greaterp)
  (declare (values array-of-values))
  (with-index (opening IID root-node :read)
    (scan-range *current-index* root-node lessp greaterp not-lessp not-greaterp)))

;;; for counting number of entries in a bset
(defun count-index-range (opening IID &key lessp greaterp not-lessp not-greaterp)
  (declare (values count))
  (with-index (opening IID root-node :read)
    (scan-range *current-index* root-node lessp greaterp not-lessp not-greaterp
		:count-only t)))

;;Find the entry in the index that has the greatest (i.e. last) key.  If
;;there are no entries, return nil.  Otherwise, return a one dimensional
;;art-fixnum array of values.  

;;Find the entry in the index that has the greatest (i.e. last) key.
;;Create and return a 1-d art-fixnum array, consed on the data stack, of
;;all the RIDs of those entries.  Leave the index as it was found. (The
;;array is of length zero if the index has no entries.)
(defun lookup-greatest-index-value (opening IID)
  (declare (values greatest-value))
  (with-index (opening IID root :read)
    (with-record-at (greatest-leaf-node (greatest-leaf-address root) :read)
      (greatest-leaf-values greatest-leaf-node))))

;; (see above)
(defun lookup-least-index-value (opening IID)
  (declare (values least-value))
  (with-index (opening IID root :read)
    (with-record-at (least-leaf-node (least-leaf-address root) :read)
      (least-leaf-values least-leaf-node))))

;;Find the depth of an index
(defun compute-index-depth (opening IID)
  (declare (values index-depth))
  (with-index (opening IID root :read)
    (compute-depth root)))

(compile-flavor-methods index-record overflow-record)
(compile-flavor-methods leaf-node branch-node)
(compile-flavor-methods leaf-scroll branch-scroll)
(compile-flavor-methods index)
