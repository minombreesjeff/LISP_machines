;;; -*- Mode: LISP; Package: Statice-index; Base: 10; Lowercase: T; Syntax: Common-lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;; This code is stolen from s:>Greenwald>Work>Scheduler>heap.lisp.  When release
;;; eight rolls around this code should be available, since the new scheduler is
;;; going to use it.

;;; Some of this code is just grabbed from the system implementation of heaps

;;; The difference here is that (1) For heaps that have deletions, we
;;; now have a choice between O(N + LogN) time deletions, or O(Log N)
;;; time deletions, rather than O(N * LogN) time deletions (mainly due to
;;; lazy thinking in old implementation). 

;;; We need unwind-protects with :rebuild-heap around most of the
;;; methods.  Actually - just a test to see whether we need to
;;; :rebuild-heap, because it is expensive for large heaps.

;;; We should also allow key and index to be stored in the item itself, and
;;; provide functions to extract, and set them.

;; Some useful error conditions stolen from the systems heaps.
(defflavor heap-overflow
	(heap)
	(error)
  :initable-instance-variables
  :gettable-instance-variables)

(defmethod (dbg:report heap-overflow) (stream)
  (format stream "The heap ~S has overflowed." heap))

(defflavor heap-item-not-found
	(heap key)
	(error)
  :initable-instance-variables
  :gettable-instance-variables)

(defmethod (dbg:report heap-item-not-found) (stream)
  (format stream "Could not find item for key ~S in heap ~S." key heap))



(defstruct (heap-item-descriptor (:conc-name hid-) :named-array)
  (index 0)
  (key nil)
  (item nil))

(defflavor heap
	   ((size 100)
	    (active-size 0)
	    (heap-array nil)
	    (predicate #'<)
	    (growth-factor 1.5))
	   ()
  :gettable-instance-variables
  (:initable-instance-variables size predicate growth-factor)
  (:init-keywords :interlocking))

;; Call this to make a new heap
(defun make-heap (&rest init-options &key interlocking &allow-other-keys)
  (declare
    (arglist
      (&key (size 100.) (predicate #'<) (growth-factor 1.5) interlocking)))
  (apply 'make-instance
	 (cond ((eq interlocking :without-interrupts) 'without-interrupts-heap)
	       (interlocking 'process-locking-heap)
	       (t 'heap))
	 init-options))

(defmethod (:init heap :after) (&rest ignore)
  ;; Make the growth-factor reasonable
  (let ((gf growth-factor))
    (when gf
      (typecase gf
	(fixnum
	 (cond ((< gf 2) (setq gf 2))
	       ((> gf size) (setq gf size))))
	((or single-float double-float)
	 (cond (( gf (/ (float (1+ size)) size)) (setq gf 1.5))
	       ((> gf 10.0) (setq gf 10.0))))
	(otherwise (setq gf 1.5)))
      (setq growth-factor gf)))
  (setq heap-array  
	(loop with array = (make-array size)
	      ;; Remember: this heap is 1 based!
	      for i from 1 below size
	      do (setf (aref array i) (make-heap-item-descriptor :index i))
	      finally (return array))))

(defmacro heap-empty-p ()
  `(zerop active-size))

(defmethod (:empty-p heap) ()
  (heap-empty-p))

(defmethod (:clear heap) ()
  (setq active-size 0))

;; For internal use only...
(defmethod (:adjust-heap heap) (i)
  (loop with descriptor = (aref heap-array i)
	with key = (hid-key descriptor)
	for j first (* 2 i) then (* 2 j)
	while ( j active-size)
	as entry = (aref heap-array j)
	if (and (< j active-size)
		(funcall predicate
			 (hid-key (aref heap-array (1+ j)))
			 (hid-key entry)))
	  do (incf j)
	     (setq entry (aref heap-array j))
	while (funcall predicate (hid-key entry) key)
	do (setf (aref heap-array (truncate j 2)) entry)
	   (setf (hid-index entry) (truncate j 2))
	finally (setf (aref heap-array (truncate j 2)) descriptor)
		(setf (hid-index descriptor) (truncate j 2))))

;; If for some reason the heap is no longer in sorted order (the user
;; could have bashed an entry), rebuild-heap will make it sorted again.
;;
;; (For internal use only???)
(defmethod (:rebuild-heap heap) ()
  (loop for i from (truncate active-size 2) downto 1
	do (send self :adjust-heap i)))

(defmethod (:insert heap) (item key)
  (incf active-size)
  ;; Copy the heap if it's full up
  (when ( active-size size)
    (if (null growth-factor)
	(signal 'heap-overflow :heap self)
      (let* ((new-size (if (typep growth-factor 'fixnum)
			   (+ size growth-factor)
			 (truncate (* size growth-factor))))
	     (new-heap-array (make-array new-size)))
	(copy-array-contents heap-array new-heap-array)
	(loop for i from size below new-size
	      do (setf (aref new-heap-array i) (make-heap-item-descriptor :index i)))
	(setq heap-array new-heap-array)
	(setq size new-size))))
  (loop with j = active-size
	with i = (truncate active-size 2)
	with descriptor = (let ((d (aref heap-array j)))
			    (setf (hid-key d) key)
			    (setf (hid-item d) item)
			    d)
	while (> i 0)
	as entry = (aref heap-array i)
	while (funcall predicate key (hid-key entry))
	do (setf (aref heap-array j) entry)
	   (setf (hid-index entry) j)
	   (setq j i)
	   (setq i (truncate i 2))
	finally (setf (aref heap-array j) descriptor)
		(setf (hid-index descriptor) j)
		(return (values item key (= j 1) descriptor))))

(defmacro with-top-key-and-item ((key item &optional (descriptor '.descriptor.)) &body body)
  `(let* ((,descriptor (aref heap-array 1))
	  (,key (hid-key ,descriptor))
	  (,item (hid-item ,descriptor)))
     ,@body))

(defmethod (:top heap) ()
  (if (heap-empty-p)
      (values nil nil nil)
    (with-top-key-and-item (key item)
       (values item key t))))

(defmethod (:next heap) ()
  (if (< active-size 2)
      (values nil nil nil)
      (let ((entry (aref heap-array 2)))
	(if (or (= active-size 2)
		(funcall predicate (hid-key entry) (hid-key (aref heap-array 3))))
	    (values (hid-item entry) (hid-key entry) t)
	    (setq entry (aref heap-array 3))
	    (values (hid-item entry) (hid-key entry) t)))))

(defmacro remove-by-index (index descriptor)
  `(let ((entry (aref heap-array active-size)))
     (setf (aref heap-array ,index) entry)
     (setf (aref heap-array active-size) ,descriptor)
     (setf (hid-index ,descriptor) active-size)
     (setf (hid-key ,descriptor) nil)
     (setf (hid-item ,descriptor) nil)
     (setf (hid-index entry) ,index) 
     (decf active-size)
     (send self :adjust-heap ,index)))

(defmethod (:remove heap) ()
  (if (heap-empty-p)
      (values nil nil nil)
      (with-top-key-and-item (key item descriptor)
	(remove-by-index 1 descriptor)
	(values item key t))))


;; Define a loop iteration path for heaps
(define-loop-path new-heap-elements loop-new-heap-elements-path (of))

;; This has to be done at compile-time too since it will be called by
;; macroexpansions later in the file.
(eval-when (compile load eval)
(defun loop-new-heap-elements-path (path variable data-type prep-phrases
				inclusive? allowed-preps data
				&aux (heap nil)
				     (key-var (si:loop-named-variable 'key))
				     (index-var (si:loop-named-variable 'index))
				     (descriptor-var (si:loop-named-variable 'descriptor)))
  path data-type allowed-preps data		;ignored
  (when inclusive?
    (error "Inclusive stepping is not supported by the NEW-HEAP-ELEMENTS path"))
  (loop for (prep expr) in prep-phrases		;parse prep-phrases
	do (cond ((si:loop-tequal prep 'of) (setq heap expr))
		 (t (error "~S is not a known preposition for the NEW-HEAP-ELEMENTS path" prep))
		 ))
  (when (null heap)
    (error "The heap must be specified (the OF clause was missing)."))
  (let* ((step-var (gensym))
	 (heap-var (gensym))
	 (bindings `((,heap-var ,heap)
		     (,step-var)
		     (,index-var)
		     (,key-var)
		     (,descriptor-var)
		     (,variable)))
	 (prologue `((setq ,step-var 1)))	;first element is in 1, not 0
	 (iterspec `((> ,step-var (send ,heap-var :active-size))
		     (,variable
		      (progn
			(setq ,descriptor-var (aref (send ,heap-var :heap-array) ,step-var))
			(setq ,index-var ,step-var)
			(incf ,step-var)
			(setq ,key-var (hid-key ,descriptor-var))
			(hid-item ,descriptor-var)))
		     ()
		     ())))
    (list* bindings prologue iterspec)))
);EVAL-WHEN

;; Now we can write the describe method...
(defmethod (:describe heap) (&optional (stream *standard-output*))
  (format stream "~&~S is a heap using predicate ~S, containing ~D element~:P."
	  self (si:function-name predicate) active-size)
  (when (and (not (heap-empty-p))
	     (y-or-n-p "Do you want to see the contents of the heap? "))
    (loop for item being the new-heap-elements of self using (key key)
	  do (format stream "~&Key ~S~20T~S" key item)
	  finally (format stream "~%"))))

;; Here come the fancy, non-canonical heap methods

;; This generates a method with name "message" for flavor "flavor", with arguments
;; (,find-by &optional (equal-predicate #'eql) descriptor)
;; In the BODY, "actual-item" and "actual-key" are bound to the item and key of the 
;; object sought, "index" to the index in the heap of that object, and if needs-descriptor
;; was not nil, then "descriptor" is bound to the object's descriptor.
;; Should I allow a client to pass in other arguments to the generated method?
(defmacro defmethod-to-find-item-and-key
	  ((flavor message find-by &optional need-descriptor (not-found-error-p t))
	   &body body)
  (unless (member find-by '(item key))
    (error "Cannot find by ~S, only by either KEY or ITEM" find-by))
  (let ((using-list (if need-descriptor
			'((key this-key) (descriptor this-descriptor) (index this-index))
			'((key this-key) (index this-index))))
	(accessor (ecase find-by
		    (item 'hid-item)
		    (key 'hid-key))))
    `(defmethod (,message ,flavor)
		(,find-by &optional (equal-predicate #'=) descriptor)
       (multiple-value-bind (actual-item actual-key index)
	   (if (and descriptor
		    (funcall equal-predicate ,find-by (,accessor descriptor))
		    ( 1 (hid-index descriptor) active-size)
		    (eq (aref heap-array (hid-index descriptor)) descriptor))
	       (values (hid-item descriptor) (hid-key descriptor) (hid-index descriptor))
	       (loop for this-item being the new-heap-elements of self
				   using ,@using-list
		     if (funcall equal-predicate ,find-by (,accessor this-descriptor))
		       do ,@(when need-descriptor
				'((setq descriptor this-descriptor)))
			 (return (values this-item this-key this-index))
		     finally ,(if not-found-error-p
				  `(signal 'heap-item-not-found :heap self :key ,find-by)
				'(return nil))))
	 (ignore actual-item actual-key index)
	 ,@body))))

(defmethod-to-find-item-and-key (heap :delete-by-item item 't)
  (remove-by-index index descriptor)
  (values actual-item actual-key))

(defmethod-to-find-item-and-key (heap :delete-by-key key 't)
  (remove-by-index index descriptor)
  (values actual-item actual-key))

(defmethod-to-find-item-and-key (heap :find-by-item item 't)
  (values actual-item actual-key descriptor))

(defmethod-to-find-item-and-key (heap :find-by-item-no-error item 't nil)
  (values actual-item actual-key descriptor))

(defmethod-to-find-item-and-key (heap :find-by-key key 't)
  (values actual-item actual-key descriptor))


;; Mixin and wrapping form for process-locking heaps
(defflavor process-locking-heap-mixin
	((lock (process:make-lock "Heap Lock")))
	()
  :abstract-flavor)

(defmacro with-heap-locked (&body body)
  `(process:with-lock (lock) ,@body))

;; Mixin and wrapping form for without-interrupts heaps
(defflavor without-interrupts-heap-mixin () ()
  :abstract-flavor)

;; Define all the methods for a heap mixin
(defmacro make-interlocking-heap-methods (mixin locking-form)
  `(progn
     ;; :empty-p and :clear are atomic, and need not be interlocked.
     ;; :adjust-heap and :rebuild-heap assume the heap is locked.
     (defwhopper-subst (:insert ,mixin) (item key)
       (,locking-form (continue-whopper item key)))
     (defwhopper-subst (:top ,mixin) ()
       (,locking-form (continue-whopper)))
     (defwhopper-subst (:remove ,mixin) ()
       (,locking-form (continue-whopper)))
     (defwhopper-subst (:describe ,mixin) ()
       (,locking-form (continue-whopper)))
     (defwhopper-subst (:delete-by-item ,mixin) (item &optional (equal-predicate #'=))
       (,locking-form (continue-whopper item equal-predicate)))
     (defwhopper-subst (:delete-by-key ,mixin) (key &optional (equal-predicate #'=))
       (,locking-form (continue-whopper key equal-predicate)))
     (defwhopper-subst (:find-by-item ,mixin) (item &optional (equal-predicate #'=))
       (,locking-form (continue-whopper item equal-predicate)))
     (defwhopper-subst (:find-by-key ,mixin) (key &optional (equal-predicate #'=))
       (,locking-form (continue-whopper key equal-predicate)))))

(make-interlocking-heap-methods process-locking-heap-mixin with-heap-locked)
(make-interlocking-heap-methods without-interrupts-heap-mixin process:with-no-other-processes)

;; The lockable forms of heaps
(defflavor process-locking-heap () (process-locking-heap-mixin heap))

(defflavor without-interrupts-heap () (without-interrupts-heap-mixin heap))

(compile-flavor-methods heap process-locking-heap without-interrupts-heap
			heap-overflow heap-item-not-found)
