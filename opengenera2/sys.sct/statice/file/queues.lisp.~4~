;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: DBFS; Lowercase: Yes -*-

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;; QUEUES and DOUBLY-LINKED-LISTS
;;;; Written by Charles Dale
;;;; For Statice buffer replacement 
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

1;;;  Doubly-linked-list-mixin:  when mixed into a flavor, allows instances of that
;;;  flavor to be kept in a doubly-linked-list.  Elements of a queue must contain
;;;  this flavor.
;;;
;;;  INSERT element after before
;;;  Splices element into a doubly-linked list after after and before
;;;  before.  Before and after must be adjacent elements of a
;;;  doubly-linked-list (e.g. (next after) must be before and (previous before) must
;;;  be after).  Element must not already be in a queue.
;;;
;;;  EXCISE element
;;;  Splices element out of a doubly-linked-list, leaving element's previous and next
;;;  elements connected together.  Returns element.
;;;
;;;  DEQUEUE-ELEMENT element
;;;  Removes element from the queue that currently contains it.

0(defflavor doubly-linked-list-mixin
	((previous nil)
	 (next nil)
	 (queue nil))
	()
  (:conc-name nil)
  :readable-instance-variables
  :writable-instance-variables)

(defmethod (insert doubly-linked-list-mixin) (after before)
  (compiler:%error-unless (null queue)
    (error "Trying to insert ~S, which is already in ~S (between ~S and ~S)."
	   self queue previous next))
  (compiler:%error-unless (and (eq after (previous before)) (eq before (next after)))
    (error "Trying to insert ~S between ~S and ~S, which are not adjacent."
	   self after before))
  (setf previous after
	(next after) self
	next before
	(previous before) self))

(defmethod (excise doubly-linked-list-mixin) ()
  (setf (next previous) next
	(previous next) previous
	next nil
	previous nil
	queue nil)
  self)


1;;;  Queues:  A queue is a data structure that maintains a FIFO list of
;;;  elements.  All elements in the queue must include
;;;  doubly-linked-list-mixin.  Here is the defined interface to queues:
;;;  
;;;  EMPTY-P queue
;;;  Returns T if the queue has no elements, nil otherwise.
;;;
;;;  ENQUEUE-ELEMENT queue element &optional force-p
;;;  If queue is not full or if force-p is non-nil, adds element to the
;;;  queue.   If the queue is :FIFO, element is added at the tail, if :LIFO, it is
;;;  added at the head.  Element must be a flavor instance that includes
;;;  doubly-linked-list-mixin.  If element was succesfully added, returns the current
;;;  length of the queue, otherwise returns nil.
;;;
;;;  DEQUEUE-ELEMENT queue
;;;  Removes the element that is at the head of the queue and returns it.  If the
;;;  queue is empty, returns nil.
;;;
;;;  CLEAR queue
;;;  Forcibly emptys queue.  Elements that were in the queue will still think they
;;;  are in the queue, but the queue will not know about them.  This means that these
;;;  elements cannot be enqueued again until they are cleaned up.
;;;  To cleanly empty a queue, use EMPTY.
;;;
;;;  EMPTY queue
;;;  Dequeues all elements from queue.  This is the clean, if somewhat slower way to
;;;  get an empty queue.
;;;  
;;;  QUEUE-HEAD queue
;;;  Returns the element of queue that is next in line to be dequeued.  Does not
;;;  remove it from the queue.
;;;
;;;  QUEUE-TAIL queue
;;;  Returns the last element that was added to the queue.  Does not remove it from
;;;  the queue.

0(defflavor queue
	(head					1; Points to the front of the queue
0	 tail					1; Points to the end of the queue
0	 current-length				1; How many elements are now enqueued
0	 (maximum-length nil)			1; How many elements can be routinely
						; enqueued.  -1 => unlimited
0	 (type :fifo)				1; :FIFO or :LIFO, controls the end on
						; which end0 1new elements are enqueued
0	 )
	()
  (:initable-instance-variables maximum-length type)
  (:readable-instance-variables
   head tail current-length maximum-length
   1;; Make queue handle previous and next generic functions like doubly-linked-list
   ;; elements.
0   (next head) (previous tail))
  (:writable-instance-variables
   current-length maximum-length type
   1;; Same for the setf methods.
0   (next head) (previous tail)))

(defmethod (make-instance queue) (&rest ignore)
  (check-type type (member :lifo :fifo))
  (clear self))

(defmethod (enqueue-element queue) (item &optional (force-p nil))
  (declare (values length-or-nil))
  (when (or (null maximum-length)
	    (< current-length maximum-length)
	    force-p)
    (ecase type
      (:fifo (insert item tail self))
      (:lifo (insert item self head)))				      
    (setf (queue item) self)
    (incf current-length)))

(defmethod (dequeue-element queue) ()
  (unless (eq head self)
      (decf current-length)
      (excise head)))

(defmethod (empty queue) ()
  (loop until (zerop current-length) doing
    (dequeue-element self)))

(defmethod (clear queue) ()
  (setq head self
	tail self
	current-length 0))

;; Have to put this after the setf method is defined.
(defmethod (dequeue-element doubly-linked-list-mixin) ()
  (when queue
    (decf (queue-current-length queue))
    (excise self)))

(defmethod (sys:print-self queue) (stream &rest ignore)
  (sys:printing-random-object (self stream :typep)
    (format stream "~D~@[/~D~] (~A)" current-length maximum-length type)))

1;;; Debugging function - prints out all the elements of a queue (in either direction
;;; just to test out pointer consistency).
0(defmethod (show-queue queue) (&key (direction :forward))
  (format t "~&~D elements~@[ (~D maximum)~], type ~A" current-length maximum-length type)
  (loop with (first successor-function) = (ecase direction
					    (:forward (list head #'next))
					    (:backward (list tail #'previous)))
	for element = first then (funcall successor-function element)
	until (eq element self) do
    (print element)))

