;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Lowercase: T; Package: DBFS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Note: there is no such thing as %remote-server-table-lock right now, but
;;; it should be installed as the level for the *remote-server-table-lock*,
;;; instead of reusing %server-lock.

;;; %server-lock ought to be renamed to %remote-server-lock at some point.

;;; %secondary-mapping-lock appears to be a highest lock.  DanG has a
;;; comment saying that a process might hold this and wait for
;;; %file-lock "due to fepfs stream".  I don't know what this means, but
;;; we've certainly changed the way fepfs streams work, mainly by
;;; getting rid of them, so I'll assume that this comment is obsolete.

;;; Bug?  lookup-asynch-conn's comment says that client-lock must be
;;; set, but it isn't.  I think it doesn't really have to be, because
;;; we know there's only one background-invalidate process.

;; send-net-blocks calls open-connection, which could do a mylock here...

(eval-when (compile load eval)
(defparameter *all-lock-levels*
	'(%file-table-lock
	  %page-creation-lock
	  %invalidate-server-lock
	  %transaction-lock
	  %deadlock-detector-lock
	  %file-system-table-lock
	  %global-commit-lock
	  %page-lock
	  %log-manager-creation-lock
	  %client-id-lock
	  %checkpoint-lock
	  %server-lock
	  %remote-server-table-lock
	  %log-manager-lock
	  %dbfs-connection-lock
	  %growing-log-lock
	  %secondary-mapping-lock
	  %file-lock
	  %transaction-creation-lock
	  %file-id-table-lock))

(defparameter *lock-order-pairs* nil)
) ;; eval-when


(defmacro define-locking-order (first second)
  `(eval-when (compile load eval) (push (list ',first ',second) *lock-order-pairs*)))

;;; General note about locks grabbed during abort.  close-transaction ->
;;; (abort basic-transaction-element) -> (finish-abort
;;; remote-transaction-element) -> end-net-transaction, which grabs
;;; %server-lock.

;;; (finish-abort local-transaction-element) -> log-abort, which grabs
;;; %log-manager-lock.

;;; (abort basic-transaction-element) -> (abort-dbfs-page
;;; local-transaction-element) -> (log-abort-page log-manager), which
;;; grabs %secondary-mapping-lock.

;;; close-transaction -> abort-pending, which grabs %page-lock.

;;; close-transaction -> (deinitialize-transaction transaction), which
;;; grabs %transaction-creation-lock.

;;; lookup-page grabs %page-creation-lock, and then locks the %page-lock.
(define-locking-order %page-creation-lock %page-lock)

;;; lookup-file grabs %file-table-lock, and then calls lookup-file-system,
;;; which grabs %file-system-table-lock.
(define-locking-order %file-table-lock %file-system-table-lock)

;;; checkpoint grabs %checkpoint-lock, and then calls propagate, which
;;; calls lookup-file, which grabs %file-table-lock.
(define-locking-order %checkpoint-lock %file-table-lock)

;;; invalidate-server grabs %invalidate-server-lock, -> flush-cache ->
;;; (deinitialize-page local-page :after) -> log-remove-page, which
;;; grabs %secondary-mapping-lock.
(define-locking-order %invalidate-server-lock %secondary-mapping-lock)

;;; invalidate-server grabs %invalidate-server-lock, -> flush-cache ->
;;; (deinitialize-page basic-page) -> close-transaction
(define-locking-order %invalidate-server-lock %server-lock)
(define-locking-order %invalidate-server-lock %log-manager-lock)
(define-locking-order %invalidate-server-lock %secondary-mapping-lock)
(define-locking-order %invalidate-server-lock %page-lock)
(define-locking-order %invalidate-server-lock %transaction-creation-lock)

;;; deadlock-detector grabs %deadlock-detector-lock, -> close-transaction.
(define-locking-order %deadlock-detector-lock %server-lock)
(define-locking-order %deadlock-detector-lock %log-manager-lock)
(define-locking-order %deadlock-detector-lock %secondary-mapping-lock)
(define-locking-order %deadlock-detector-lock %page-lock)
(define-locking-order %deadlock-detector-lock %transaction-creation-lock)

;;; create-log-manager-named grabs %log-manager-creation-lock ->
;;; (close-log-manager log-manager), which grabs checkpoint lock.
;;; Furthermore, (shutdown-log-manager log-manager) grabs
;;; %log-manager-creation-lock -> checkpointm which grabs
;;; %checkpoint-lock.
(define-locking-order %log-manager-creation-lock %checkpoint-lock)

;;; lookup-file-element grabs transaction lock, ->
;;; allocate-transaction-element, -> (initialize-transaction-element
;;; local-transaction-element :after) -> (open-file-system
;;; local-file-system) -> find-log-manager-named and
;;; ensure-open-log-manager, both of which grab
;;; %log-manager-creation-lock.
(define-locking-order %transaction-lock %log-manager-creation-lock)

;;; background-invalidation-fun grabs %client-id-lock, ->
;;; send-net-command, which grabs %dbfs-connection-lock.
;;; (server-cache-invalid-handler dbfs-server) does this too.
(define-locking-order %client-id-lock %dbfs-connection-lock)

;;; read-page-cmd and optimistic-create-page-cmd grab %page-lock, ->
;;; increment-use-count which grabs %client-id-lock.  Many other
;;; paths for this one, via invalidate-cache-for-remote-clients.
(define-locking-order %page-lock %client-id-lock)

;;; (reinitialize-log-manager log-manager) grabs log manager creation, ->
;;; lookup-file-id, grabs %file-id-table-lock.  Also via get-log-descriptor-file-id.
(define-locking-order %log-manager-creation-lock %file-id-table-lock)

;;; checkpoint grabs %checkpoint-lock, -> propagate -> lookup-file-id
;;; which grabs %file-id-table-lock.
(define-locking-order %checkpoint-lock %file-id-table-lock)

;;; Since when %transaction-creation-lock is held, nothing is called,
;;; %transaction-creation-lock is clearly a highest lock.  The only
;;; thing that calls it is close-transaction, so we'll just pick one
;;; possible path: deadlock-detector grabs %deadlock-detector-lock, ->
;;; close-transaction -> (deinitialize-transaction transaction) which
;;; grabs %transaction-creation-lock.
(define-locking-order %deadlock-detector-lock %transaction-creation-lock)

;;; Since when %remote-server-table-lock is held, nothing is called,
;;; %transaction-creation-lock is clearly a highest lock.  The only
;;; thing that calls it is lookup-remote-server, so we'll just pick one
;;; possible path: lookup-file-system grabs %file-system-table-lock, ->
;;; lookup-remote-server which grabs %remote-server-table-lock.
(define-locking-order %file-system-table-lock %remote-server-table-lock)

;;; checkpoint grabs %checkpoint-lock and then grabs %log-manager-lock.
(define-locking-order %checkpoint-lock %log-manager-lock)

;;; checkpoint grabs %checkpoint-lock, -> new-checkpoint-buffer which
;;; grabs %growing-log-lock.
(define-locking-order %checkpoint-lock %growing-log-lock)

;;; checkpoint grabs %checkpoint-lock, -> propagate -> open-local-file
;;; which grabs %file-lock
(define-locking-order %checkpoint-lock %file-lock)

;;; checkpoint grabs %checkpoint-lock, -> propagate which grabs %secondary-mapping-lock.
(define-locking-order %checkpoint-lock %secondary-mapping-lock)

;;; set-temporary-log-size grabs %log-manager-lock, then
;;; %growing-log-lock.  Also, log-commit grabs %log-manager-lock, ->
;;; new-output-buffer -> grow-log
(define-locking-order %log-manager-lock %growing-log-lock)

;;; grow-log grabs %growing-log-lock, then %secondary-mapping-lock.
(define-locking-order %growing-log-lock %secondary-mapping-lock)

;;; lookup-file-element grabs transaction lock, ->
;;; allocate-transaction-element, -> (initialize-transaction-element
;;; remote-transaction-element :after) -> (start-net-transaction
;;; remote-server), which grabs %server-lock.
(define-locking-order %transaction-lock %server-lock)

;;; log-modification grabs %log-manager-lock, then %secondary-mapping-lock.
;;; log-read-page does the same thing.
(define-locking-order %log-manager-lock %secondary-mapping-lock)

;;; write-page-cmd grabs %page-lock, -> (write-dbfs-page
;;; local-transaction-element) -> allocate-log-transaction-id, which
;;; grabs %log-manager-lock.  The same conclusion results from the
;;; return-dbfs-page paths. read-page -> read-dbfs-page -> log-read-page,
;;; also.
(define-locking-order %page-lock %log-manager-lock)

;;; invalidate-server grabs %invalidate-server-lock, -> flush-cache ->
;;; (deinitialize-page basic-page) -> (return-data-array basic-page) ->
;;; (write-dbfs-page local-transaction-element) -> allocate-log-transaction-id,
;;; which grabs %log-manager-lock.
(define-locking-order %invalidate-server-lock %log-manager-lock)

;;; Since when %dbfs-connection-lock is held, nothing is called,
;;; %dbfs-connection-lock is clearly a highest lock.
;;; Plenty of xxx-page entrypoints -> xxx-dbfs-page -> send-net-command
(define-locking-order %page-lock %dbfs-connection-lock)

;;; (start-net-transaction remote-server) grabs %server-lock ->
;;; (open-net-connection remote-server) -> make-dbfs-client-connection
;;; -> (make-instance dbfs-client-connection) -> (open-connection
;;; dbfs-client-connection) -> (validate-open-connection remote-server)
;;; -> send-net-command-and-read-reply -> send-net-command, which grabs
;;; %dbfs-connection-lock.
(define-locking-order %server-lock %dbfs-connection-lock)

(define-locking-order %global-commit-lock %page-lock)
(define-locking-order %global-commit-lock %client-id-lock)


(defmacro assign-lock-values ()
  (let ((input (copy-list *all-lock-levels*))
	(output nil)
	(pairs (copy-list *lock-order-pairs*)))
    (loop for level from 0
	  while input do
      (let ((symbol (loop named symbol for s in input do
		      (when (loop for (nil pinned) in pairs
				  never (eq s pinned))
			(return-from symbol s)))))
	(unless symbol (error "Internal error -- didn't find any next symbol"))
	(push `(defparameter ,symbol ,level) output)
	(setq input (delete symbol input))
	(setq pairs (delete symbol pairs :key #'first))))
    `(progn . ,output)))

(assign-lock-values)
