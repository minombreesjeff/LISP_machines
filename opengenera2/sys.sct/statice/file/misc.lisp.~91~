;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Lowercase: Yes; Package: D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")(0DBFS SCL)-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This is just a debugging function, and should not be called unless
;;; you know what you are doing.
(defun totally-reset-dbfs (&key reset-fepfs)
  (shutdown-and-initialize-dbfs)
  (when (fboundp 'totally-reset-server)
    (locally
      (declare (notinline funcall))
      (funcall 'totally-reset-server)))
  (clear-resource 'local-transaction-element)
  (clear-resource 'net-block)
  (clear-resource 'transaction)
  (setq *remote-server-table-lock* (make-ordered-lock "Remote Server Table Lock"
						      %remote-server-table-lock))
  (setq *file-system-table-lock* (make-ordered-lock "File System Table Lock"
						    %file-system-table-lock))
  (setq *page-creation-lock* (make-ordered-lock "Page Creation Lock" %page-creation-lock))
  (setq *transaction-creation-lock* (make-ordered-lock "Transaction Creation Lock"
						       %transaction-creation-lock))
  (when reset-fepfs
    #-VLM (si:initialize-fep-filesystem)))

(defun show-dbfs-status (&key (stream *standard-output*))
  (maphash #'(lambda (ignore file)
	       (declare (sys:downward-function))
	       (show-status file :stream stream))
	   *file-table*)
  (show-client-status :stream stream)
  (locally
    (declare (notinline funcall))
    (funcall 'show-server-status :stream stream)))

(defun show-dbfs-meters (&key (stream *standard-output*))
  (format stream "~&Optimistic locking is ~:[disabled~;enabled~]." *optimistic-locking*)
  (when *optimistic-locking*
    (format stream "~%Optimistic commands are~:[ not~] being forced out."
	    *force-out-optimistic-commands*)
    (format stream "~%Selective pessimism is ~:[disabled~;enabled~]." *selective-pessimism*))
  (format stream "~%Write checks are ~:[disabled~;enabled~]."
	  (or (eq t *check-writes*) #+3600 (eq *check-writes* sys:*io-board-type*)))
  (format stream "~%Full verification is ~:[disabled~;enabled~]." *full-verification*)
  (when (plusp *count-disk-write-errors*)
    (format stream "~%~'b~D recoverable disk write errors!~" *count-disk-write-errors*))
  (when (plusp *count-network-protocol-sync-errors*)
    (format stream "~%~'b~D network protocol sync error~:P.~"
	    *count-network-protocol-sync-errors*))
  (when (plusp *count-network-errors*)
    (format stream "~%~'b~D network error~:P.~" *count-network-errors*))
  (maphash #'(lambda (flavor count)
	       (declare (sys:downward-function))
	       (format stream "~%  ~A: ~D" flavor count))
	   *network-error-table*)
  (show-client-meters :stream stream)
  (when (fboundp 'show-server-meters)
    (locally
      (declare (notinline funcall))
      (funcall 'show-server-meters :stream stream))))

(defun flush-all-caches ()
  "This is for debugging only."
  ;;++ This is not currently flushing the files or file-system
  ;; objects since they are not managed by a resource.  Who cares?
  ;;+++ This doesn't update remote caches.  That's ok if the machine is
  ;; not a server, but if this is run on a server the state might be screwed up.
  (loop for file being the hash-elements of *file-table*
	doing (flush-cache file)))

(compile-flavor-methods basic-page)
