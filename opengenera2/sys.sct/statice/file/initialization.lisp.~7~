;;; -*- Mode: Lisp; Syntax: Common-lisp; Package: (DBFS SCL); Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; A little explanation of conventions used in this file to make searching easier:
;;;+++ Three plus signs means something which needs to be fixed and is considered a bug.
;;;++  Two plus signs indicates a misfeature or something which should be fixed sometime.
;;;+   One plus sign indicates something to think about in the future.

;;; This is called from the BEFORE-COLD initialization list, which means
;;; that is is run during the preparations for DISK-SAVE.  It's also
;;; called from totally-reset-dbfs, which is only called manually for
;;; debugging.
(defun shutdown-and-initialize-dbfs ()
  ;; shutdown-dbfs used to be called from inside an ignore-errors.  This
  ;; seems too dangerous to me; I want to know what's going on, and not
  ;; leave things in random states if earlier things fail.  So in hopes
  ;; of figuring out the reason that DanG put in the ignore-errors,
  ;; we'll use a restart handler instead.
  (catch-error-restart ((error) "Skip the rest of shutdown-dbfs")
    (shutdown-dbfs))
  (initialize-dbfs))

;;; Called from shutdown-and-initialize-dbfs.  Also called at load time
;;; when DBFS is being loaded, so that after DBFS is loaded you don't
;;; have to disk save and boot in order to use DBFS.
(defun initialize-dbfs ()
  (si:incf* *initialization-timestamp*)
  (clrhash *file-table*)
  (clrhash *remote-server-table*)
  (clrhash *file-system-table*)
  (clrhash *network-error-table*)
  (setq *remote-id-sequence-number* 0
	*count-network-errors* 0
	*count-disk-write-errors* 0
	*file-system-cache* nil
	*file-system-cached-name* nil)
  (initialize-page-pool)
  (initialize-client)
  (when (fboundp 'initialize-server)
    (locally
      (declare (notinline funcall))
      (funcall 'initialize-server)))
  (setq *dbfs-shutdown* nil))

;;; This is called from the WARM initialization list, which means that
;;; it gets run whenever the machine is cold-booted or warm-booted.
(defun reinitialize-dbfs ()
  ;;Avoid blowing out during warm boot if the UID lock is already held.
  (process:reset-lock uid::*unique-id-lock*)
  (process:reset-lock *file-system-cache-lock*)
  (setq *file-system-cached-name* nil
	*file-system-cache* nil)
  (if (fboundp 'reinitialize-dbfs-server)
      (locally
	(declare (notinline funcall))
	(funcall 'reinitialize-dbfs-server t))
      (reinitialize-dbfs-client 'warm-boot-transaction-abort t))
  (maphash #'(lambda (ignore file) (reinitialize-file file)) *file-table*)
  (maphash #'(lambda (ignore server) (reinitialize-server server)) *remote-server-table*))

;;; Called from shutdown-and-initialize-dbfs.
(defun shutdown-dbfs (&key (reason "No reason given."))
  (setq *dbfs-shutdown* reason)			; Disable any new activity
  (tv:noting-progress ("Shutting down DBFS")
    (shutdown-dbfs-client)
    (tv:note-progress 1 6)
    ;; Shut down all the server processes running on this machine.
    (when (fboundp 'shutdown-dbfs-server)
      (locally
	(declare (notinline funcall))
	(funcall 'shutdown-dbfs-server)))
    (tv:note-progress 2 6)
    ;; It is ok for this to be called multiple times on the same file system.
    (tv:maphash-noting-progress #'(lambda (ignore file-system)
				    (shutdown-file-system file-system reason))
				*file-system-table*
				"Shutting down file systems")
    (tv:note-progress 3 6)
    (tv:maphash-noting-progress #'(lambda (ignore file)
				    (shutdown-file file))
				*file-table*
				"Shutting down files")
    (tv:note-progress 4 6)
    (when (fboundp 'shutdown-log-managers)
      (locally
	(declare (notinline funcall))
	(funcall 'shutdown-log-managers)))
    (tv:note-progress 5 6)
    (tv:maphash-noting-progress #'(lambda (ignore server)
				    (shutdown-remote-server server))
				*remote-server-table*
				"Shutting down remote servers"))
  ;; Increment the timestamp so that all portals and file-ids will have to
  ;; recache their information, causing them to notice that the file system
  ;; has been disabled.  This is better than putting in an explicit check which
  ;; would slow down the normal case where shutdowns are infrequent, while
  ;; slightly increasing the expense incurred when doing a shutdown (since
  ;; file systems which have not been disabled will have to reload their
  ;; caches - no big deal).
  (si:incf* *initialization-timestamp*)
  t)

(add-initialization "Warm boot DBFS" '(reinitialize-dbfs) '(:warm))
(add-initialization "Reset DBFS before DISK-SAVE to return DISK-ARRAYs"
		    '(shutdown-and-initialize-dbfs)
		    '(:before-cold))
(initialize-dbfs)
