;;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Lowercase: Yes; Package: FS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
 
(defflavor dbfs-fs-mixin () ()
  (:required-instance-variables file-access-paths))

(defflavor dbfs-file-system () (dbfs-fs-mixin neti:no-device-or-type-or-version-host-mixin
				neti:pathname-file-system))

;;; This really belongs in directory.lisp, but I had to move it
;;; here in order to prevent bogus warnings from the pathname system.
(defflavor dbfs-dir:pathname-portal-mixin
	((rename-delete-tick 0))
	(dbfs:basic-portal)
  (:default-init-plist :file-id nil))

;;; Copied from fs:host.  There oughta be a mixin.
(defmethod (:short-name dbfs-file-system) (&aux (*inhibit-validity-checking* t))
  (if (send self :uninterned-p)
      (string (first neti:names))
      ;; SHORT-NAMES are usable here for output.  NICKNAMES are not.
      ;; Pick the first one that isn't shadowed, else the first one
      ;; period.
      (loop named top
	    as first-p = t then nil do
	(dolist (name (send self :get :short-name))
	  (cond ((not (send name :shadowed-p neti:class))
		 (return-from top (send name :string)))
		((not first-p)
		 (return-from top (send name :qualified-string)))))
	(let ((name (send self :primary-name)))
	  (cond ((not (send name :shadowed-p neti:class))
		 (return (send name :string)))
		((not first-p)
		 (return (send name :qualified-string)))))
	(when (not first-p)
	  (error "Fell off the end, ~S doesn't have a name." self)))))

(defflavor dbfs-pathname ()
	   (dbfs-dir:pathname-portal-mixin
	    no-device-or-type-or-version-mixin
	    hierarchical-directory-mixin
	    meaningful-root-mixin
	    case-pathname-mixin	      ;Note: LMFS uses both-cases-same-lower-preferred-mixin
	    active-pathname-mixin
	    remote-pathname)
  (:default-init-plist :file-system-name nil))

(define-presentation-type dbfs-pathname (() &rest presentation-args)
   :no-deftype t
   :history t
   :describer
   ((stream &key plural-count)
    (princ
      (cond ((null plural-count) "the pathname of a database")
	    ((eq plural-count t) "pathnames of databases")
	    ((numberp plural-count)
	     (format nil "the pathnames of ~R databases" plural-count))
	    (t (format nil "the pathnames of ~A databases" plural-count)))
      stream)))



;;; This is not necessary, but why not?
(defmethod (make-instance dbfs-pathname) (&rest ignore)
  (setq dbfs::file-system-name (send host :name)))

;;; See sys:io;pathnm.lisp
(defmethod (fs:pathname-sequentially-accessible-p dbfs-pathname) () nil)

(defmethod (:system-type dbfs-fs-mixin) () :dbfs-file-system)

(defflavor dbfs-file-access-path (portal (rename-delete nil)) (fs:file-access-path)
  (:initable-instance-variables portal)
  (:gettable-instance-variables portal))

(defmethod (:name dbfs-fs-mixin) ()
  (let ((names (first (send self :names))))
    (when names
      (send names :string))))

(defmethod (:file-access-path dbfs-fs-mixin) (&optional pathname operation dont-create)
  (declare (ignore pathname operation))
  (when (and (null file-access-paths) (not dont-create))
    (setq file-access-paths
	  (list (make-instance 'dbfs-file-access-path
			       :host self
			       :portal (dbfs-dir:lookup-directory-portal
					 (send self :name))))))
  (first file-access-paths))

;;; This is called from within a dbfs transaction.
(defmethod (dbfs::validate-portal dbfs-pathname) ()
  (let ((dbtick (rename-delete-tick-value (send host :file-access-path))))
    (when (< rename-delete-tick dbtick)
      ;; There has been a rename or delete.
      (setq dbfs::timestamp nil)		;invalidate file cache
      (setq dbfs::file nil dbfs::file-id nil)
      (dbfs-dir::lookup-file-id self :error nil)
      (setq rename-delete-tick dbtick))))

(defgeneric dbfs::validate-portal (portal)
  (:method (dbfs:basic-portal)
   nil))

(defmethod (:pathname-flavor dbfs-fs-mixin) () 'dbfs-pathname)

(defmethod (:sample-pathname dbfs-fs-mixin) ()
  (make-instance 'dbfs-pathname
		 :directory '("foo")
		 :host self
		 :name "foo"
		 :type :unspecific
		 :version :unspecific))

(compile-flavor-methods dbfs-file-system)

(defmethod (:valid-type-p dbfs-pathname) (ignore) t)

;;; Allow :wild-inferiors as a component, just as LMFS does.
(defmethod (:valid-directory-component-p dbfs-pathname) (dirname ignore)
  (or (stringp dirname) (memq dirname '(nil :wild :wild-inferiors))))

(defmethod (:parse-namestring dbfs-pathname)
	   (host-specified namestring &optional (start 0) end)
  (declare (ignore host-specified))
  ;; Default the "end" argument and eliminate leading and trailing spaces.
  (unless end (setf end (string-length namestring)))
  (setq start (or (string-search-not-char #\space namestring start end) end))
  (setq end (1+ (or (string-reverse-search-not-char #\Space namestring end start) (1- end))))
  ;; See whether this pathname has both a directory and a name, or only a name.
  (let* ((idx (string-reverse-search-char #\> namestring end start))
	 (didx idx))
    (unless idx
      ;; There was no >.  See if there is a <.
      (setq idx (string-reverse-search-char #\< namestring end start))
      (when idx (setq didx (1+ idx))))
    (values :unspecific
	    (when idx (dbfs-parse-directory namestring start didx end))
	    ;; Translate special cases "", "", and "*".
	    (let ((name (substring namestring (if idx (1+ idx) start) end)))
	      (cond ((or (string= name "") (string= name "")) nil)
		    ((string= name "*") :wild)
		    (t name)))
	    :unspecific
	    :unspecific)))

(defsubst-in-flavor (dbfs-pathname-filename-string dbfs-pathname) ()
  (if (eq name :wild)
      "*"
      (or name "")))

(defun-in-flavor (dbfs-pathname-dirname-string dbfs-pathname) ()
  (let ((directory (send self :directory)))
    (select directory
      (:root ">")
      (:wild ">**>")
      ((:unspecific nil) "")
      (otherwise
       (let ((d directory)
	     (result nil))
	 (cond ((eq (car d) :relative)
		(pop d)
		(loop while (eq (car d) :up) do
		  (pop d)
		  (push "<" result)))
	       (t
		(push ">" result)))
	 (loop for first-p = t then nil
	       for x in d do
	   (unless first-p
	     (push ">" result))
	   (push (caseq x
		   (:wild "*")
		   (:wild-inferiors "**")
		   (nil "")
		   (t x))
		 result))
	 (unless (and (eq (car directory) :relative)
		      (eq (car (last directory)) :up))
	   (push ">" result))
	 (apply #'string-append (nreverse result)))))))

;;; Parse the directory portion of a DBFS pathname string.  start and
;;; end delimit the portion of the string to parse.  end is the
;;; character index of the delimiter between the directory and the name.
;;; whole-end is only used for forming error messages.
(defun dbfs-parse-directory (namestring start end whole-end)
  (if (= start end)
      :root
      (let ((first-char (aref namestring start)))
	(cond ((char-equal first-char #\<)
	       (let ((x (or (string-search-not-char #\< namestring start end) end)))
		 (cons :relative
		       (nconc
			 (make-list (- x start) :initial-value :up)
			 (when (< x end)
			   (dbfs-parse-directory-internal
			     namestring x end start whole-end))))))
	      ((char-equal first-char #\>)
	       ;; Skip over the leading >.
	       (dbfs-parse-directory-internal namestring (1+ start) end start whole-end))
	      (t
	       ;; Relative pathname.
	       (cons :relative
		     (dbfs-parse-directory-internal namestring start end start whole-end)))))))

;;; Parse the directory portion of a DBFS pathname string, after the
;;; leading >'s and/or <'s have been removed and processed. start and
;;; end delimit the portion of the string to parse.  start is the first
;;; character after the leading delimiters.  end is the character index
;;; of the delimiter between the directory and the name.  whole-start
;;; and whole-end are the boundaries of the entire pathname within
;;; namestring, and are used primary to form error messages.
(defun dbfs-parse-directory-internal (namestring start end whole-start whole-end)
  (when (string-search-char #\< namestring start whole-end)
    (parse-pathname-error "A < was found in the middle of pathname ~A"
			  (substring namestring whole-start whole-end)))
  (loop for i = start then idx
	for idx = (or (string-search #\> namestring i end) end)
	collect (cond ((= i idx)
		       (parse-pathname-error "Null directory components not allowed: ~A"
					     (substring namestring whole-start whole-end)))
		      ((string-equal namestring "*" i 0 idx) :wild)
		      ((string-equal namestring  "**" i 0 idx) :wild-inferiors)
		      ((string-equal namestring "" i 0 idx) nil)
		      (t (substring namestring i idx)))
	until (= idx end)
	do (incf idx)))

(defmethod (:string-for-editor dbfs-pathname) ()
  (format nil "~a ~a ~a:"
	  name
	  (dbfs-pathname-dirname-string)
	  (send host :name-as-file-computer)))

(defmethod (:string-for-host dbfs-pathname) (&optional ignore)
  (string-append (dbfs-pathname-dirname-string) (dbfs-pathname-filename-string)))

(defmethod (:string-for-dired dbfs-pathname) ()
  name)

(defmethod (:string-for-directory dbfs-pathname) ()
  (dbfs-pathname-dirname-string))

(defmethod (:string-for-printing dbfs-pathname) ()
  (string-append (send host :name-as-file-computer)
		 ":"
		 (dbfs-pathname-dirname-string)
		 (dbfs-pathname-filename-string)))

(defmethod (:pathname-as-directory dbfs-pathname) ()
  (send self :new-pathname
	:raw-directory
	(if (eq directory :root)
	    (list name)
	    (append directory (list name)))
	:raw-name nil
	:raw-type nil
	:version nil))

(defmethod (:directory-pathname-as-file dbfs-pathname) ()
  (send self :new-pathname
	:raw-directory (if (or (eq directory :root)
			       (null (cdr directory)))
			   :root
			   (butlast directory))
	:raw-name (if (eq directory :root) 
		      "Root-directory"
		      (car (last directory)))))

(defprop :dbfs dbfs-file-system neti:file-system-flavor)

;;; This should ultimately go in
;;; sys:dynamic-windows;standard-presentation-types with the rest of
;;; these.  But unfortunately, this would probably screw up the world
;;; building process.
(defprop dbfs-file-system :file-system dw::namespace-class)

(neti:redefine-objects-of-class :file-system)

#||

;;; Test suite (run manually) for the pathname parser.
(defun test (x)
  (let ((p (fs:parse-pathname x)))
    (format t "Directory: ~S    Name: ~S"
	    (send p :raw-directory) (send p :raw-name))))

(defun test2 (x)
  (format t "~%LMFS: ")
  (test (string-append "AA:" x))
  (format t "~%DBFS: ")
  (test (string-append "B:" x)))

(test2 "aba")
(test2 ">aba")
(test2 "aaa>bbb")
(test2 ">aaa>bbb")
(test2 "aaa>bbb>ccc")
(test2 ">aaa>bbb>ccc")
(test2 "")
(test2 ">")
(test "b:>>")

(test2 "<")
(test2 "<aaa")
(test2 "<<aaa")
(test2 "<a>")
(test2 "<a>b")
(test2 "<a>b>")
(test2 "<<a>b>")
(test2 "<>")
(test "b:<a<")
(test "b:<a>b<")

(test2 "*")
(test2 ">*")
(test2 "*>")
(test2 "<*")
(test2 "a*")
(test2 "*>*")
(test2 "**")
(test2 "**>a")
(test2 ">**")
(test2 ">**>a>")
(test2 "a>*")
(test2 "*>a")

||#
