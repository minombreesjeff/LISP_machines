;;; -*- Mode: LISP; Syntax: Common-lisp; Package: statice-model; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmacro statice:with-database ((variable pathname) &body body)
  `(let ((,variable (statice:open-database ,pathname)))
     (with-current-database (,variable)
       . ,body)))

(defmacro with-transaction (option-list &body body)
  (declare (arglist (&key (automatic-retry 'dbfs:restartable-transaction-abort)) &body body))
  `(flet ((transaction-body () . ,body))
     (declare (future-common-lisp:dynamic-extent #'transaction-body))
     (with-transaction-1 #'transaction-body . ,option-list)))

(defmacro with-transaction-if (condition option-list &body body)
  `(flet ((with-transaction-if-internal () . ,body))
     (if ,condition
	 (with-transaction ,option-list
	   (with-transaction-if-internal))
	 (with-transaction-if-internal))))

(defmacro do-relation (clauses &body body &environment env)
  (do-relation-1 clauses body env nil))

(defmacro do-attribute (clauses &body body &environment env)
  (do-relation-1 clauses body env t))

(defun do-relation-1 (clauses body env map-attribute-p)
  (let (var relation-handle not-null-var)
    (cond ((symbolp (first clauses))
	   ;; a non-join style do-relation
	   (when (< (length clauses) 2)
	     (error "~S doesn't have a ~:[relation~;attribute~] handle specified"
		    clauses map-attribute-p))
	   (setq var (first clauses)
		 relation-handle (second clauses)
		 clauses (cddr clauses))
	   (when map-attribute-p
	     (setq not-null-var relation-handle)
	     (setq relation-handle (first clauses))
	     (setq clauses (cdr clauses))))	     
	  (t
	   ;; a join style do-relation.  seperate the clauses into the
	   ;; relation/vars specs and the :where/:order-by specs
	   (let* ((clauses-length (length clauses))
		  (start-of-specs (or (position-if
					#'(lambda (x)
					    (and (consp x)
						 (member (car x)
							 '(:where :order-by :count))))
					clauses)
				      clauses-length))
		  (clauses-copy (copy-list clauses)))
	     (setq clauses (nthcdr start-of-specs clauses-copy))
	     (setq var (nbutlast clauses-copy (- clauses-length start-of-specs)))
	     (if (and (consp var) (= (length var) 1))
		 ;; might not really be a join if they spec'd only one
		 ;; (var relation-handle) pair
		 (if map-attribute-p
		     (destructuring-bind ((v nnv r-h)) var
		       (setq var v not-null-var nnv relation-handle r-h))
		     (destructuring-bind ((v r-h)) var
		       (setq var v relation-handle r-h)))
		 (when map-attribute-p
		   (error "Join style specs for do-attribute are not meaningful."))))))
    ;; relation-handle is nil for join style do-relations, and the attribute-handle
    ;; for do-attribute.
    (loop with (where-clauses order-by-clauses count-form)
	  for c in clauses do
      (unless (consp c)
	(error
	  "The clause ~S is not in the form (:WHERE ...), (:ORDER-BY ...) or (:COUNT ...)." c))
      (let ((clause-type (first c))
	    (clause-info (cdr c)))
	(case clause-type
	  (:where 
	    (when where-clauses
	      (error "Multiple :WHERE clauses found"))
	    (let ((ci (car clause-info)))
	      (setq where-clauses
		    (if (and (consp ci) (eq (car ci) ':and))
			(cdr ci)
			(case (length clause-info)
			  (2 clause-info)
			  ((0 1)
			   (error "Less than one att-spec pair specified without :AND"))
			  (otherwise
			    (error
			      "More than one att-spec pair specified without :AND")))))))
	  ((:order-by :ordered-by)
	   (when (eq clause-type :ordered-by)
	     (warn ":ORDERED-BY is obsolete.  Use :ORDER-BY instead."))
	   (when order-by-clauses
	     (error "Multiple :ORDER-BY clauses found"))
	   (setq order-by-clauses clause-info))
	  (:count
	    (when count-form
	      (error "Multiple :COUNT clauses found"))
	    (setq count-form (first clause-info)))
	  (otherwise
	    (error
	      "More than one att-spec pair specified without :AND"))))
	  finally
	    (setq order-by-clauses
		  (loop for (att dir) in order-by-clauses
			unless (or (eq dir :ascending) (eq dir :descending))
			  do (error
			       "~S not recognized.  Expecting :ASCENDING or :DESCENDING" dir)
			collect ``(,,att ,',dir)))
	    (unless (evenp (length where-clauses))
	      (error "The :WHERE clause did not contain an even number of atts and specs"))
	    (multiple-value-bind (declarations real-body)
		(sys:find-body-declarations body env)
	      (if relation-handle
		  (return
		    `(block nil
		       (,(if map-attribute-p
			     'map-attribute
			     'map-relation)
			#'(lambda (,var ,@(when map-attribute-p (list not-null-var)))
			    ,@declarations
			    ,var ,not-null-var
			    . ,real-body)
			,relation-handle
			,(when where-clauses `(list . ,where-clauses))
			,(when order-by-clauses `(list . ,order-by-clauses))
			,count-form)))
		  (return
		    (let ((relation-handles (loop for (var relation-handle) in var
						  collect `(list ',var ,relation-handle))))
		      `(block nil
			 (map-relations-joined
			   ;; this function is passed in a plist of (var1
			   ;; tuple1 var2 tuple2 ...)  so that we can easily
			   ;; change the ordering of how we put together the
			   ;; list of joined tuples.
			   #'(lambda (tuple-rids)
			       (let* ((relation-handles (list ,@relation-handles))
				      ,@(loop for (var nil) in var
					      collect
						`(,var (find-tuple-handle-given-rid
							 (getf tuple-rids ',var)
							 (second (assoc ',var
									relation-handles))))))
				 ,@declarations
				 ,@(loop for (var) in var collect var)
				 . ,real-body))
			   ,`(list ,@relation-handles)
			   ,(when where-clauses `(list . ,where-clauses))
			   ,(when order-by-clauses `(list . ,order-by-clauses))
			   ,count-form)))))))))
