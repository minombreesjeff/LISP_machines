;;; -*- Mode: LISP; Syntax: Common-lisp; Package: statice-model; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmacro statice-type:define-value-type (type-name &body clauses)
  (check-type type-name symbol)
  (cond ((assoc :handler-finder clauses)
	 (unless (null (cdr clauses))
	   (error "If a :handler-finder clause is present, it must be the only clause"))
	 (let ((finder-name (intern (string-append type-name "-HANDLER-FINDER")
				    "STATICE-TYPE")))
	   `(progn
	      (set-statice-info ',type-name '(:function ,finder-name))
	      (defun ,finder-name ,@(cdr (first clauses))))))
	(t
	 (let ((handler-name (intern (string-append type-name "-HANDLER"))))
	   `(progn
	      (set-statice-info ',type-name '(:class ,handler-name))
	      ,(expand-handler-definition handler-name clauses))))))

;;; used to be define-handler-flavor and *format-flavor-alist*, of course - jga 10 Sept 92

(defmacro statice-type:define-handler-class (handler-name &body clauses)
  (check-type handler-name symbol)
  (expand-handler-definition handler-name clauses))

;;; Included so that conversions go more easily.
;;; Remove this after 8.3 - jga 21 Oct 92
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;; patch this
0(defmacro statice-type:define-handler-flavor (handler-name &body clauses)
  (warn "~S is obsolete.  Use ~S instead."
	'statice-type:define-handler-flavor
	'statice-type:define-handler-class)
  `(statice-type:define-handler-class ,handler-name ,. clauses))

(eval-when (compile load eval)
  (defparameter *format-class-alist*
		'((:logical . logical-format-handler)
		  (:fixed . fixed-format-handler)
		  (:variable . variable-format-handler))))

(defun expand-handler-definition (handler-name clauses)
  (let ((format nil)
	(based-on nil)
	(based-on-function nil)
	(comparable-p nil)
	(fixed-space-args nil))
    (dolist (clause clauses)
      (check-type clause list)
      (ecase (first clause)
	(:format
	  (when format
	    (error "The format was specified twice, as ~S and ~S" format (second clause)))
	  (setq format (second clause))
	  (check-type format (member :logical :fixed :variable)))
	(:based-on
	  (setq based-on (second clause)))
	(:based-on-function
	  (setq based-on-function (second clause)))
	(:comparable-p
	  (setq comparable-p (second clause))
	  (check-type comparable-p boolean))
	(:fixed-space
	  (setq fixed-space-args (rest clause))
	  (unless (= (length fixed-space-args) 2)
	    (error "The :fixed-space clause, ~S, should have exactly two arguments" clause))
	  (check-type (first fixed-space-args) (integer (0)))
	  (check-type (second fixed-space-args) (integer 0 (32))))))
    (if (eq format :logical)
	(unless (or based-on based-on-function)
	  (error "No :based-on or :based-on-function option was supplied for ~S"
		 handler-name))
	(when (or based-on based-on-function)
	  (error "A :based-on type was supplied for physical handler ~S" handler-name)))
    (when (and based-on based-on-function)
      (error "Both :based-on and :based-on-function were provided for ~S" handler-name))
    (when (and fixed-space-args (not (eq format :fixed)))
      (error "The :fixed-space clause can only be provided if the :format is :fixed"))
    (when (and (null fixed-space-args) (eq format :fixed))
      (error "The :fixed-space clause must be provided if the :format is :fixed"))
    `(progn
       (defclass ,handler-name (,(cdr (assoc format *format-class-alist*))) ()
	 ,@(when based-on-function
	     `((:default-initargs :based-on-function ',based-on-function)))
	 ,@(when based-on
	     `((:default-initargs :based-on ',based-on))))
       ,@(when comparable-p
	   `((defmethod comparable-p ((handler ,handler-name))
	       t)))
       ,@(when fixed-space-args
	   `((defmethod fixed-space ((handler ,handler-name))
	       (values . ,fixed-space-args))))
       (defmethod check-spec ((handler ,handler-name) spec)
	 (with-slots (statice-type:original-presentation-type) handler
	   (check-spec-standard statice-type:original-presentation-type
				,(if comparable-p
				     ''(equal eql eq > <   >= <= =)
				     ''(equal eql eq =))
				dw::ptypep))))))
