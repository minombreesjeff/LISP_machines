;; -*- Mode: LISP; Syntax: Common-lisp; Package: statice; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; A where-spec is built for every pair in the :where clause as well as
;;; any others that may be necessary for a join operation (such as for
;;; joining a type-relation to a binary relation based on the "of" or
;;; "soo" attribute.  These are the output of parse-where-clause.
(cl:defstruct (where-spec (:type :array) (:conc-name ws-) (:named))
  function-call					;the form naming the function in the spec
  operator					;the operator of the spec
  form						;the operand or the other function if a join
  l-rel						;the rel structure named by function-call
  l-att						;the function-level attribute for f-c
  r-rel						;the rel structure named by form
  r-att						;the function-level attribute for form
  join-spec					;spec is a join
  l-names-entity				;l-att is not an attribute, but a type
  r-names-entity)				;r-att    "      "      "      "     "

;;; An order-spec is built for every criterion in the :order-by clause.
;;; It is the result of parsing these crits.
(cl:defstruct (order-spec (:type :array) (:conc-name os-) (:named))
  function-call					;the form in this order-by spec
  direction					;'ascending or 'descending
  rel						;the rel structure named by function-call
  att)						;the function-level attribute

;;; A rel structure is built for every model-level relation which will
;;; be needed in the query.
(cl:defstruct (rel (:type :array) (:named))
  sym						;a gentemp'd var to be used in the do-relation
  tag						;the relation-tag
  type-or-fun					;the type or function this rel belongs to
  var)						;user variable on whose behalf exists this rel

;;; An entity-spec is built for every (variable entity-type) pair in the
;;; for-each clause.  They contain the destructured pair, and other
;;; auxiliary information needed for putting together the query.
(cl:defstruct (entity-spec (:type :array) (:conc-name es-) (:named))
  var						;the variable part of the pair
  entity-name					;the entity-name part of the pair
  type						;the type definition for type
  get-from-rel					;the rel struct for the type's type-relation
  joined-rels)					;a list of cons pointing to all rels which
						;... have been joined on their "of" atts
						;... which are of type entity.

;;; Make them print nicely.
(scl:defselect ((:property where-spec scl:named-structure-invoke))
  (:print-self (ws stream cl:ignore cl:ignore)
   (si:printing-random-object (ws stream :typep)
     (format stream "[~S ~S ~S]"
	     (ws-function-call ws) (ws-operator ws) (ws-form ws)))))

(scl:defselect ((:property order-spec scl:named-structure-invoke))
  (:print-self (os stream cl:ignore cl:ignore)
   (si:printing-random-object (os stream :typep)
     (format stream "[~S ~S]" (os-function-call os) (os-direction os)))))

(scl:defselect ((:property rel scl:named-structure-invoke))
  (:print-self (rel stream cl:ignore cl:ignore)
   (si:printing-random-object (rel stream :typep)
     (format stream "[~S ~S]" (rel-sym rel) (rel-tag rel)))))

(scl:defselect ((:property entity-spec scl:named-structure-invoke))
  (:print-self (es stream cl:ignore cl:ignore)
   (si:printing-random-object (es stream :typep)
     (format stream "(~S ~S)" (es-var es) (es-entity-name es)))))

(defmacro for-each (clauses &body body &environment env)
  ;; single entity syntax
  (when (symbolp (first clauses))
    (warn "The form~@
           (FOR-EACH (~S ~S ...) is obsolete.~@
           Use ~@
           (FOR-EACH ((~S ~S) ...) instead."
	  (first clauses) (second clauses)
	  (first clauses) (second clauses))
    (setq clauses (append (list (zl:firstn 2 clauses)) (cddr clauses))))
  (let* ((all-where-specs nil)
	 (all-order-specs nil)
	 (all-rels nil)
	 (database-form nil)
	 (stvar (gentemp "ST"))
	 (dbvar (gentemp "DB"))
	 (count-form)
	 (start-of-keyword-clauses
	   (loop for clause in clauses
		 for i from 0 do
	     (when (and (listp clause)
			(member (first clause) '(:where :order-by :database :count)))
	       (return i))))
	 (variables (loop with results = nil
			  for (var type . rest) in clauses
			  repeat (or start-of-keyword-clauses (length clauses))
			  do
		      (when (find var results :key #'es-var)
			(error "The variable ~S seems to be used more than once.~@
                                Once is in the (var entity) pair ~S,~@
                                the other in the pair ~S"
			       var
			       (list var type)
			       (let ((other-es (find var results :key #'es-var)))
				 (list (es-var other-es) (es-entity-name other-es)))))
		      (when rest
			(if (assoc var statice-model::*operator-inverse*)
			    (error "The clause ~S seems to be ill formed.~@
                                    It should consist of either a (var type)~@
                                    or a (var function-call) pair.~@
                                    Perhaps you mean to put this clause in a :where spec."
				   (list* var type rest))
			    (error "The clause ~S seems to be ill formed.~@
                                    It should consist of either a (var type)~@
                                    or a (var function-call) pair."
				   (list* var type rest))))
		      (push (make-entity-spec
			      :var var
			      :entity-name type
			      :type (if (listp type)
					(let ((fun (get (first type) 'statice-function)))
					  (unless fun
					    (error "~S is not an accessor function"
						   (first type)))
					  (unless (function-value-is-set fun)
					    (error "~S is not a set-valued accessor function"
						   (first type)))
					  fun)
					(let ((type-def (get type 'entity-type)))
					  (unless type-def
					    (error "~S is not a defined entity type" type))
					  type-def)))
			    results)
			  finally (return results))))
    (unless variables
      (error "No variable entity type pairs or set expressions were specified,~@
              or they were specified after a :WHERE, :ORDER-BY, or :DATABASE clause."))
    (dolist (clause (and start-of-keyword-clauses (nthcdr start-of-keyword-clauses clauses)))
      (case (first clause)
	(:where
	  (when all-where-specs (error "More than one :WHERE clause in a FOR-EACH"))
	  (unless (= (length clause) 2)
	    (error "~S is not a valid :where clause;~@
                    the clause should have two elements"
		   clause))
	  (loop for criterion in (let ((body (second clause)))
				   ;; "and" is the new way.  ":and" is for compatibility.
				   (if (and (listp body)
					    (member (first body) '(and :and)))
				       (cdr body)
				       (cdr clause))) do
	    (push (parse-where-clause criterion variables stvar) all-where-specs)))
	(:order-by
	  (when all-order-specs (error "More than one :ORDER-BY clause in a FOR-EACH"))
	  (check-order-by-clause (cdr clause))
	  (loop for (fcall direction) on (cdr clause) by #'cddr do
	    (push (parse-order-by-clause fcall direction variables) all-order-specs)))
	(:database
	  (when database-form (error "More than one :DATABASE clause in a FOR-EACH"))
	  (unless (= (length clause) 2)
	    (error "The :DATABASE clause, ~S, has extra elements" clause))
	  (setq database-form (second clause)))
	(:count
	  (when count-form (error "More than one :COUNT clause in a FOR-EACH"))
	  (setq count-form (second clause)))
	(t
	  (error "~S is not a valid for-each clause;~@
                  the first element must be :WHERE, :ORDER-BY, :COUNT or :DATABASE" clause))))
    ;; If this is a simple non-join set-iterating for-each (i.e. one
    ;; with no :where or :order-by), then just generate the simple
    ;; do-relation form.
    (when (and (null all-where-specs) (null all-order-specs) (= (length variables) 1)
	       (listp (es-entity-name (first variables))))
      (return-from for-each
	(let* ((dbvar (gentemp "DB"))
	       (funvar (gentemp "FUN"))
	       (attvar (gentemp "ATT"))
	       (es (first variables))
	       (variable (es-var es)))
	  (multiple-value-bind (declarations real-body)
	      (sys:find-body-declarations body env)
	    `(inside-function-level (,dbvar ,database-form)
	       (let* ((,funvar (get ',(function-full-name (es-type es)) 'statice-function))
		      (,stvar (functional-database-schema-table ,dbvar))
		      (,attvar (or (gethash (function-is-attribute-tag ,funvar) ,stvar)
				   (no-function-named ',(function-full-name (es-type es))))))
		 (do-attribute (,variable not-null-p ,attvar
			       (:where (gethash (function-of-attribute-tag ,funvar) ,stvar)
				,(second (es-entity-name es)))
			       ,@(when count-form `((:count ,count-form))))
		   ,@declarations
		   ,variable
		   . ,real-body)))))))

    ;; build the rel structures by looking over all-where-specs and all-order-specs
    (let ((where-pairs nil)
	  (order-pairs nil)
	  (inner-let-pairs nil)
	  (outer-let-pairs nil))
      (labels ((intern-rel (type-or-fun var)
		 (let ((rel-tag (etypecase type-or-fun
				  (template-function (function-relation-tag type-or-fun))
				  (entity-spec
				    (let ((es-type-or-fun (es-type type-or-fun)))
				      (if (typep es-type-or-fun 'template-function)
					  (function-relation-tag es-type-or-fun)
					  (type-relation-tag es-type-or-fun)))))))
		   (or (find rel-tag all-rels
			     :test #'(lambda (rel-tag rel-from-list)
				       (and (eq (rel-tag rel-from-list) rel-tag)
					    (eq (rel-var rel-from-list) var))))
		       (let ((rel (make-rel :tag rel-tag :sym (gentemp "REL")
					    :var var :type-or-fun type-or-fun)))
			 (push rel all-rels)
			 rel))))

	       (intern-form (form &optional (prefix "ATT"))
		 (or (car (find form outer-let-pairs :test #'equal :key #'second))
		     (let ((var (gentemp prefix)))
		       (push (list var form) outer-let-pairs)
		       var)))

	       (make-form-for (type-or-function is-or-of rel-sym)
		 (let ((form
			 (intern-form
			   (etypecase type-or-function
			     (template-function
			       `(or (gethash
				      (,(ecase is-or-of
					  (:of 'function-of-attribute-tag)
					  (:is 'function-is-attribute-tag))
				       ,(intern-form
					  `(get ',(function-full-name type-or-function)
						'statice-function)
					  "FUN"))
				      ,stvar)
				    (no-function-named
				      ',(function-full-name type-or-function))))
			     (entity-spec
			       (let ((type-or-att (es-type type-or-function)))
				 (etypecase type-or-att
				   ;; I'm not sure why this needs to be in here.
				   (template-inverse-function
				     ;; a sva expression
				     `(or (gethash
					    (,(ecase is-or-of
						(:of 'function-is-attribute-tag)
						(:is 'function-of-attribute-tag))
					     ,(intern-form
						`(get ',(function-full-name type-or-att)
						      'statice-function)
						"FUN"))
					    ,stvar)
					  (no-function-named
					    ',(function-full-name type-or-att))))
				   (template-forward-function
				     ;; a sva expression
				     `(or (gethash
					    (,(ecase is-or-of
						(:of 'function-of-attribute-tag)
						(:is 'function-is-attribute-tag))
					     ,(intern-form
						`(get ',(function-full-name type-or-att)
						      'statice-function)
						"FUN"))
					    ,stvar)
					  (no-function-named
					    ',(function-full-name type-or-att))))
				   (template-entity-type
				     `(or (gethash
					    (type-soo-att-tag
					      ,(intern-form
						 `(get ',(type-name type-or-att)
						       'entity-type)
						 "TYPE"))
					    ,stvar)
					  (no-entity-type-named
					    ',(type-name type-or-att)))))))))))
		   (if (and rel-sym (> (length all-rels) 1))
		       `(list ',rel-sym ,form)
		       form)))

	       (join-relations-of-type (function-call rel att)
		 (let* ((var (if (listp function-call) (second function-call) function-call))
			(es (find var variables :key #'es-var))
			(es-rel (es-get-from-rel es))
			(set-iterator (typep (es-type es) 'template-function)))
		   (unless es
		     (error "Couldn't find es for var ~S in ~S" var variables))
		   (unless es-rel
		     ;; this es doesn't have a rel yet.  Use this one since it's
		     ;; as good as any.
		     (setf (es-get-from-rel es) rel es-rel rel))
		   (when (and rel (not (eq es-rel rel)) (eq var (es-var es)))
		     ;; push a join spec for the two relations onto where-pairs
		     ;; if there isn't one already
		     (unless (dolist (pair (es-joined-rels es))
			       (when (or (and (eq (car pair) es-rel)
					      (eq (cdr pair) rel))
					 (and (eq (car pair) rel)
					      (eq (cdr pair) es-rel)))
				 (return t)))
		       (push (cons es-rel rel) (es-joined-rels es))
		       (push (make-form-for att :of (rel-sym rel)) where-pairs)
		       (push (make-form-for (rel-type-or-fun es-rel)
					    (if set-iterator :is :of)
					    (rel-sym es-rel))
			     where-pairs))))))

	;; for each where-spec and order-spec, fill in x-rel slots.
	(dolist (ws all-where-specs)
	  (let* ((l-att (ws-l-att ws))
		 (r-att (ws-r-att ws))
		 (form (ws-form ws))
		 (fcall (ws-function-call ws))
		 (l-rel (intern-rel l-att (if (ws-l-names-entity ws) fcall (second fcall))))
		 (r-rel (when r-att (intern-rel r-att (if (ws-r-names-entity ws)
							  form
							  (second form))))))
	    (setf (ws-l-rel ws) l-rel)
	    (when r-att
	      (setf (ws-r-rel ws) r-rel))))
	(dolist (os all-order-specs)
	  (let* ((att (os-att os))
		 (rel (intern-rel att (if (listp (os-function-call os))
					  (second (os-function-call os))
					  (os-function-call os)))))
	    (setf (os-rel os) rel)))
	(dolist (es variables)
	  ;; intern all the relations that are used by set iterators
	  (when (typep (es-type es) 'template-function)
	    (destructuring-bind (function-name expression) (es-entity-name es)
	      expression
	      (setf (es-get-from-rel es)
		    (intern-rel (get function-name 'statice-function) (es-var es))))))

	(dolist (ws all-where-specs)
	  (let* ((l-att (ws-l-att ws))
		 (r-att (ws-r-att ws))
		 (form (ws-form ws))
		 (fcall (ws-function-call ws))
		 (l-rel (ws-l-rel ws))
		 (r-rel (ws-r-rel ws))
		 (join-p (ws-join-spec ws)))
	    (join-relations-of-type fcall l-rel l-att)
	    (when join-p 
	      (join-relations-of-type form r-rel r-att))
	    (push `(list ',(ws-operator ws)
			 ,(if (ws-join-spec ws)
			      (make-form-for r-att :is (rel-sym r-rel))
			      form))
		  where-pairs)
	    (push (make-form-for l-att :is (rel-sym l-rel)) where-pairs)))
	(dolist (os all-order-specs)
	  (let* ((att (os-att os))
		 (rel (os-rel os)))
	    (join-relations-of-type (os-function-call os) rel att)
	    (push (list (make-form-for att :is (rel-sym rel)) (os-direction os))
		  order-pairs)))

	(dolist (es variables)
	  ;; if this is a join based set iteration, then we need to join
	  ;; the relation of the set expression to the type relation.
	  (when (typep (es-type es) 'template-function)
	    (destructuring-bind (function-name expression) (es-entity-name es)
	      (let* ((function (get function-name 'statice-function))
		     (rel (intern-rel function (es-var es))))
		(unless (eq (es-get-from-rel es) rel)
		  (push (make-form-for function :is (rel-sym rel)) where-pairs)
		  (push (make-form-for (rel-type-or-fun (es-get-from-rel es))
				       :of
				       (rel-sym (es-get-from-rel es))) where-pairs))
		(push expression where-pairs)
		(push (make-form-for function :of (rel-sym rel)) where-pairs)))))

	;; build the inner-let-pairs which bind the user var to the
	;; of-att of the relation that we're getting this entity type from.
	(dolist (es variables)
	  (let ((set-expression (typep (es-type es) 'template-function)))
	    (unless (es-get-from-rel es)
	      (setf (es-get-from-rel es) (intern-rel es (es-var es))))
	    (push (list (es-var es)
			`(get-value
			   ,(rel-sym (es-get-from-rel es))
			   ,(make-form-for (rel-type-or-fun (es-get-from-rel es))
					   (if set-expression
					       (let ((fun (es-type es)))
						 (ecase (function-implementation fun)
						   ((type-relation other-relation) :of)
						   (binary-relation :is)))
					       :of)
					   nil)))
		  inner-let-pairs)
	    (unless set-expression
	      (let* ((es-rel (es-get-from-rel es))
		     (fun (rel-type-or-fun es-rel))
		     (entity (es-entity-name es)))
		(unless (eq (es-entity-name es)
			    (etypecase fun
			      (template-function (function-argument-type-name fun))
			      (entity-spec (es-entity-name es))))
		  (push `(list 'domain
			       (or (gethash (type-domain-tag (get ',entity 'entity-type))
					    ,stvar)
				   (no-entity-type-named ',entity)))
			where-pairs)
		  (push (make-form-for fun :of (rel-sym es-rel)) where-pairs))))))

	;; build the form
	(let* ((rel-pairs
		 (loop for rel in all-rels
		       collect
			 (list (rel-sym rel)
			       `(or (gethash ',(rel-tag rel) ,stvar)
				    ,(let ((x (rel-type-or-fun rel)))
				       (if (typep x 'entity-spec)
					   (if (typep (es-type x) 'basic-function)
					       `(no-function-named
						  ',(function-full-name (es-type x)))
					       `(no-entity-type-named
						  ',(type-name (es-type x))))
					   `(no-function-named ',(function-full-name x))))))))
	       (rel-vars (loop for rel in rel-pairs collect (first rel))))
	  (multiple-value-bind (declarations real-body)
	      (sys:find-body-declarations body env)
	    `(inside-function-level (,dbvar ,database-form)
	       (let* ((,stvar (functional-database-schema-table ,dbvar))
		      ,@(nreverse outer-let-pairs))
		 ,(if (and (= (length inner-let-pairs) 1) (= (length rel-pairs) 1))
		      ;; simple case, so use the do-attribute form to avoid consing tuples
		      (destructuring-bind ((var (get-value tuple-handle att))) inner-let-pairs
			get-value tuple-handle
			`(do-attribute (,var not-null-p ,att
					,@(when where-pairs `((:where (:and . ,where-pairs))))
					,@(when order-pairs `((:order-by . ,order-pairs)))
					,@(when count-form `((:count ,count-form))))
			   ,@declarations
			   ,@(loop for es in variables collect (es-var es))
			   ,@real-body))
		      `(do-relation (,@rel-pairs
				     ,@(when where-pairs `((:where (:and . ,where-pairs))))
				     ,@(when order-pairs `((:order-by . ,order-pairs)))
				     ,@(when count-form `((:count ,count-form))))
			 (let (,@inner-let-pairs)
			   ,@declarations
			   ,@rel-vars		;ignore them all
			   ,@(loop for es in variables collect (es-var es))
			   ,@real-body)))))))))))

;;; Error checking.  Given the rest of the :order-by clause.  Give useful
;;; messages for specific common mistakes.
(defun check-order-by-clause (args)
  (when (null args)
    (error "The :ORDER-BY clause was empty."))
  (when (and (consp (car args))
	     (consp (caar args)))
    (error "There are too many levels of list structure in the :ORDER-BY clause.~@
            A typical :ORDER-BY clause is (:ORDER-BY (PERSON-NAME P) ASCENDING).~@
            The invalid clause is: ~A" (cons ':order-by args)))
  (when (= (length args) 1)
    (cond ((and (listp (first args))
		(member (second (first args)) '(ascending descending)))
	   (error "There are too many levels of list structure in the :ORDER-BY clause.~@
                   A typical :ORDER-BY clause is (:ORDER-BY (PERSON-NAME P) ASCENDING).~@
                   The invalid clause is: ~A" (cons ':order-by args)))))
  (when (oddp (length args))
    (error "The :ORDER-BY clause has an odd number of elements: ~S" (cons ':order-by args))))

(defun parse-where-clause (simple-criterion variables stvar)
  (declare (values where-specs))
  (unless (listp simple-criterion)
    (error "~S is not a valid criterion; it must be a list" simple-criterion))
  (let* ((null-spec (eq (first simple-criterion) 'null))
	 (operator (first simple-criterion))
	 (rev-op (assoc operator statice-model::*operator-inverse*))
	 fcall form any-p)
    (unless (or (= (length simple-criterion) 3)
		(and (= (length simple-criterion) 2) null-spec))
      (error "~S is not a valid criterion; it must be a list of three elements,~@
              or a list of two elements starting with NULL"
	     simple-criterion))
    ;; Now we know the canonical operator, and whether it's a rev-op
    ;; or not.  Figure out whether the second or third form is the
    ;; function call.  The other might be a Lisp form.  If it's a rev-op
    ;; and both look like function calls, the first one wins the tie.
    (flet ((valid-fcall-p (x)
	     (when (and (listp x) (= (length x) 2) (eq (first x) :any))
	       (setq x (second x) any-p x))
	     (or (and (symbolp x)
		      (find x variables :key #'es-var))
		 (and (listp x)
		      (= (length x) 2)
		      (symbolp (first x))
		      (let ((fun (get (first x) 'statice-function))
			    (es (find (second x) variables :key #'es-var)))
			(and fun
			     es
			     (let ((en (es-entity-name es)))
			       (subtypep
				 (if (listp en)
				     ;; an sva expression
				     (function-value-type-name
				       (get (first (es-entity-name es)) 'statice-function))
				     ;; an entity-type
				     (es-entity-name es))
				 (function-argument-type-name fun))))))))
	   ;; Try to make the error messages a little cleaner for a
	   ;; common mistake, in which the programmer uses the name
	   ;; of the type instead of the name of the variable as the
	   ;; argument to the criterion.
	   (simple-problem-criterion-p (criterion)
	     (when (and (listp criterion)
			(and (not (member (second criterion) variables :key #'es-var))
			     (member (second criterion) variables :key #'es-entity-name))
			(error "~S is not a valid function call form.~@
                                    Maybe you mean ~S instead?"
			       criterion
			       (list (first criterion)
				     (es-var (find (second criterion) variables
						   :key #'es-entity-name))))))))
      (cond (rev-op
	     (cond ((valid-fcall-p (second simple-criterion))
		    (setq fcall (second simple-criterion)
			  form (third simple-criterion)))
		   ((valid-fcall-p (third simple-criterion))
		    (setq operator (cdr (assoc operator statice-model::*operator-inverse*)))
		    (setq fcall (third simple-criterion)
			  form (second simple-criterion)))
		   ((simple-problem-criterion-p (second simple-criterion)))
		   ((simple-problem-criterion-p (third simple-criterion)))
		   (t
		    (error "Neither ~S nor ~S is a valid function call form"
			   (second simple-criterion) (third simple-criterion)))))
	    (null-spec
	     (cond ((valid-fcall-p (second simple-criterion))
		    (setq fcall (second simple-criterion)
			  form nil))
		   ((simple-problem-criterion-p (second simple-criterion)))
		   (t
		    (error "~S is not a valid function call form"
			   (second simple-criterion)))))
	    (t
	     (cond ((valid-fcall-p (third simple-criterion))
		    (setq fcall (third simple-criterion)
			  form (second simple-criterion)))
		   ;; to allow typep to reference the entity variable
		   ((and (eq (first simple-criterion) 'typep)
			 (or (valid-fcall-p (second simple-criterion))
			     (find (second simple-criterion) variables :key #'es-var)))
		    (setq fcall (second simple-criterion)
			  form (third simple-criterion)))
		   ((simple-problem-criterion-p (third simple-criterion)))
		   (t
		    (error "~S is not a valid function call form"
			   (second simple-criterion))))))
      (let ((l-names-entity (and (symbolp fcall) (find fcall variables :key #'es-var)))
	    (r-names-entity (and (symbolp form) (find form variables :key #'es-var))))
	(when any-p (setq fcall any-p))		;whata way to return a val, eh?
	(cond ((not (eq operator 'typep))
	       (let ((join-spec (valid-fcall-p form)))
		 (unless (or l-names-entity null-spec)
		   (let ((function (get (first fcall) 'statice-function)))
		     (cond ((function-value-is-set function)
			    (unless any-p
			      (error "~S is set-valued but :any wasn't specified"
				     (function-full-name function))))
			   (t
			    (when any-p
			      (error "~S is single-valued but :any was specified"
				     (function-full-name function)))))))
		 (make-where-spec
		   :function-call fcall
		   :operator operator
		   :form form
		   :l-att (or l-names-entity (get (first fcall) 'statice-function))
		   :r-att (and join-spec
			       (or r-names-entity (get (first form) 'statice-function)))
		   :join-spec join-spec 
		   :l-names-entity l-names-entity 
		   :r-names-entity r-names-entity)))
	      (t
	       (make-where-spec
		 :function-call fcall
		 :operator 'domain
		 :form `(or (gethash (type-domain-tag (get ,form 'entity-type)) ,stvar)
			    (no-entity-type-named ',form))
		 :l-att (or l-names-entity (get (first fcall) 'statice-function))
		 :r-att (find form variables :key #'es-entity-name)
		 :join-spec nil
		 :l-names-entity l-names-entity
		 :r-names-entity nil)))))))

(defun parse-order-by-clause (fcall direction variables)
  (declare (values order-spec))
  (unless (member direction '(ascending descending))
	   (error "The direction ~S was not ~S or ~S"
		  direction 'ascending 'descending))
  (let ((kw-direction (cdr (assoc direction '((ascending . :ascending)
					      (descending . :descending))))))
    (cond ((listp fcall)
	   (unless (= (length fcall) 2)
	     (error "The format of the :ORDER-BY clause ~S is unrecognizable"
		    (list fcall direction)))
	   (destructuring-bind (f-name var) fcall
	     (let ((function (get f-name 'statice-function)))
	       (unless function (error "The function ~S is not defined" f-name))
	       (when (function-value-is-set function)
		 (error "~S, used in an :order-by clause, is set-valued" f-name))
	       (let ((es (find var variables :key #'es-var)))
		 (unless es
		   (error "The variable ~S (from the :ORDER-BY clause ~S)~@
                         was not specified in any of the (variable type) pairs"
			  var (list fcall direction)))
		 (let ((es-type (if (listp (es-entity-name es))
				    ;; a sva expression
				    (function-value-type-name
				      (get (first (es-entity-name es)) 'statice-function))
				    ;; an entity-type
				    (es-entity-name es))))
		   (unless (subtypep es-type (function-argument-type-name function))
		     (error "~S is a function of ~S, not ~S"
			    f-name
			    (function-argument-type-name function)
			    es-type))))
	       (make-order-spec :function-call fcall :direction kw-direction :att function))))
	  ((symbolp fcall)
	   (let ((es (find fcall variables :key #'es-var)))
	     (unless (typep (es-type es) 'template-function)
	       (error "The variable ~S may not be used in an :ORDER-BY clause.~@
                       You must specify a (function variable) form instead."
		      fcall))
	     (unless es
	       (error "The variable ~S (from the :ORDER-BY clause ~S)~@
                      was not specified in any of the (variable type) pairs"
		      fcall (list fcall direction)))
	     (make-order-spec
	       :function-call fcall :direction kw-direction :att (es-type es))))
	  (t
	   (error "In an :ORDER-BY clause, ~S was provided where an accessor-function~@
                   form or a variable was expected." fcall)))))



