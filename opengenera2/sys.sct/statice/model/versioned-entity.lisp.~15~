;;; -*- Mode: LISP; Syntax: Common-lisp; Package: statice; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
 
;;; We use uid's here since if we just used straight integers, a
;;; transaction could update the tick, and abort.  Meanwhile, another
;;; transaction might bump the tick in the database to what the aborted
;;; transaction just bumped it to.  Then when the host that aborted the
;;; transaction checked the version, it would think that it matched.  In
;;; other words, this prevents us from having to know if a transaction
;;; that bumps the tick aborted or not.  Hence, we don't have to unwind
;;; the tick bump if it did abort.
;;; %$version-last-updated-transaction-id is used so that we only bump
;;; the tick once per transaction.  (This saves precious UIDs).
;;; Use D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI"):suppress-attribute-changed0 so that we don't recurse infinitely
;;; on tick bumping.
(define-entity-type versioned-entity-mixin ()
  ((version-1 integer :cached t :suppress-attribute-changed t :initform 0)
   (version-2 integer :cached t :suppress-attribute-changed t :initform 0)
   (version-3 integer :cached t :suppress-attribute-changed t :initform 0))
  (:instance-variables (%$version-last-updated-transaction-id :initform nil)))
;;; +++ maybe add some sort of :update-transaction-tags-method t/nil option?

;;; Only load the entity's cache if its versions don't match.
(defmethod validate-cache ((entity versioned-entity-mixin) function)
  (declare (ignore function))
  (with-slots (%$versioned-entity-mixin-version-1
	       %$versioned-entity-mixin-version-2
	       %$versioned-entity-mixin-version-3) entity
    (let* ((version-bound-p (slot-boundp entity '%$versioned-entity-mixin-version-1))
	   (ver-1 (and version-bound-p %$versioned-entity-mixin-version-1))
	   (ver-2 (and version-bound-p %$versioned-entity-mixin-version-2))
	   (ver-3 (and version-bound-p %$versioned-entity-mixin-version-3)))
      (cond ((and version-bound-p
		  (eql ver-1 (versioned-entity-mixin-version-1 entity :force-refresh t))
		  (eql ver-2 (versioned-entity-mixin-version-2 entity :force-refresh t))
		  (eql ver-3 (versioned-entity-mixin-version-3 entity :force-refresh t)))
	     ;; versions match, just need to update transaction tags for
	     ;; all attributes in entity.
	     (update-transaction-tags entity t))
	    (t
	     ;; versions have changed on this entity, so recache all attributes
	     (load-entity entity t)))
      t)))

(defmethod attribute-changed progn ((entity versioned-entity-mixin) &optional function)
  (with-slots (%$version-last-updated-transaction-id) entity
    (let ((tran-id (dbfs:current-transaction-id)))
      (unless (eql %$version-last-updated-transaction-id tran-id)
	(setf %$version-last-updated-transaction-id tran-id)
	(change-version-number entity function)))))

;;; The approved way of bumping the tick.
(defmethod change-version-number ((entity versioned-entity-mixin) function)
  (declare (ignore function))
  (multiple-value-bind (w1 w2 w3) (uid:unique-id)
    (setf (versioned-entity-mixin-version-1 entity) w1
	  (versioned-entity-mixin-version-2 entity) w2
	  (versioned-entity-mixin-version-3 entity) w3)))

;;; (scl:compile-flavor-methods versioned-entity-mixin)

#|
(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;; --- patch this 0-- new mixin type
(export 'versioned-group-mixin)

2;;; --- patch this 
0(define-entity-type versioned-group-mixin ()
  ((group-versions (vector fixnum) :cached t :suppress-attribute-changed t :initform nil))
  (:instance-variables (%$version-last-updated-transaction-id :initform nil)))

2;;; --- patch this 
0(defmethod (validate-cache versioned-group-mixin) (function)
  (let ((entity-type (type-of self)))
    (when (symbolp function)
      (setq function (get-attribute-definition function entity-type)))
    (let* ((group-name (or (function-cached function)
			   (error "Bug: There is no group-name for function ~S" function)))
	   (group-number (map-group-name self group-name)))
      ;; if the version table doesn't already exist, create it
      (unless (variable-boundp %$versioned-group-mixin-group-versions)
	(setf (versioned-group-mixin-group-versions self)
	      (make-array (multiple-value-bind (ignore n-groups)
			      (map-group-name self group-name)
			    n-groups)
			  :element-type 'fixnum
			  :initial-element 0)))
      (let ((group-version (aref %$versioned-group-mixin-group-versions group-number)))
	(cond ((eql (aref (versioned-group-mixin-group-versions self :force-refresh t)
			  group-number)
		    group-version)
	       ;; versions match, just need to update transaction tags for
	       ;; all attributes in entity.
	       (update-transaction-tags self group-name))
	      (t
	       ;; version has changed for this group in this entity, so load
	       ;; the the whole group.
	       (load-entity self group-name))))))
  t)

2;;; --- patch this 
0(defmethod (attribute-changed versioned-group-mixin) (&optional function)
  (when (symbolp function)
    (setq function (get-attribute-definition function (type-of self))))
  (let* ((group-name (or (function-cached function)
			 (error "Bug: There is no group-name for function ~S" function)))
	 (group-number (map-group-name self group-name))
	 (group-version (aref (or %$versioned-group-mixin-group-versions
				  (setf (versioned-group-mixin-group-versions self)
					(make-array (multiple-value-bind (ignore n-groups)
							(map-group-name self group-name)
						      n-groups)
						    :element-type 'fixnum
						    :initial-element 0)))
			      group-number))
	 (tran-id (dbfs:current-transaction-id)))
    (unless (eql group-version tran-id)
      (unless %$version-last-updated-transaction-id
	(setf %$version-last-updated-transaction-id
	      (make-array (multiple-value-bind (ignore n-groups)
			      (map-group-name self group-name)
			    n-groups)
			  :element-type 'fixnum
			  :initial-element 0)))
      (setf (aref %$version-last-updated-transaction-id group-number) tran-id)
      (change-version-number self function))))

2;;; --- patch this 
0(defmethod (change-version-number versioned-group-mixin) (function)
  (when (symbolp function)
    (setq function (get-attribute-definition function (type-of self))))
  (let* ((group-name (or (function-cached function)
			 (error "Bug: There is no group-name for function ~S" function)))
	 (group-number (map-group-name self group-name)))
    (unless %$versioned-group-mixin-group-versions
      (setf (versioned-group-mixin-group-versions self)
	    (make-array (multiple-value-bind (ignore n-groups)
			    (map-group-name self group-name)
			  n-groups)
			:element-type 'fixnum
			:initial-element 0)))
    (incf (aref %$versioned-group-mixin-group-versions group-number))))

2;;; --- patch this 
0(export 'versioned-attribute-mixin)

2;;; --- patch this 
0(define-entity-type versioned-attribute-mixin ()
  ((group-versions (vector fixnum) :cached t :suppress-attribute-changed t :initform nil))
  (:instance-variables (%$version-last-updated-transaction-id :initform nil)))

2;;; --- patch this 
0(defmethod (validate-cache versioned-attribute-mixin) (function)
  (let ((entity-type (type-of self)))
    (when (symbolp function)
      (setq function (get-attribute-definition function entity-type)))
    (let* ((group-name (or (function-cached function)
			   (error "Bug: There is no group-name for function ~S" function)))
	   (group-number (map-group-name self group-name)))
      ;; if the version table doesn't already exist, create it
      (unless (scl:variable-boundp %$versioned-group-mixin-group-versions)
	(setf (versioned-group-mixin-group-versions self)
	      (make-array (multiple-value-bind (ignore n-groups)
			      (map-group-name self group-name)
			    n-groups)
			  :element-type 'fixnum
			  :initial-element 0)))
      (let ((group-version (aref %$versioned-group-mixin-group-versions group-number)))
	(cond ((eql (aref (versioned-group-mixin-group-versions self :force-refresh t)
			  group-number)
		    group-version)
	       ;; versions match, just need to update transaction tags for
	       ;; all attributes in entity.
	       (update-transaction-tags self group-name))
	      (t
	       ;; version has changed for this group in this entity, so load
	       ;; the the whole group.
	       (load-entity self group-name))))))
  t)

2;;; --- patch this 
0(defmethod (attribute-changed versioned-attribute-mixin) (&optional function)
  (when (symbolp function)
    (setq function (get-attribute-definition function (type-of self))))
  (let* ((group-name (or (function-cached function)
			 (error "Bug: There is no group-name for function ~S" function)))
	 (group-number (map-group-name self group-name))
	 (group-version (aref (or %$versioned-group-mixin-group-versions
				  (setf (versioned-group-mixin-group-versions self)
					(make-array (multiple-value-bind (ignore n-groups)
							(map-group-name self group-name)
						      n-groups)
						    :element-type 'fixnum
						    :initial-element 0)))
			      group-number))
	 (tran-id (dbfs:current-transaction-id)))
    (unless (eql group-version tran-id)
      (unless %$version-last-updated-transaction-id
	(setf %$version-last-updated-transaction-id
	      (make-array (multiple-value-bind (ignore n-groups)
			      (map-group-name self group-name)
			    n-groups)
			  :element-type 'fixnum
			  :initial-element 0)))
      (setf (aref %$version-last-updated-transaction-id group-number) tran-id)
      (change-version-number self function))))

2;;; --- patch this 
0(defmethod (change-version-number versioned-attribute-mixin) (function)
  (when (symbolp function)
    (setq function (get-attribute-definition function (type-of self))))
  (let* ((group-name (or (function-cached function)
			 (error "Bug: There is no group-name for function ~S" function)))
	 (group-number (map-group-name self group-name)))
    (unless %$versioned-group-mixin-group-versions
      (setf (versioned-group-mixin-group-versions self)
	    (make-array (multiple-value-bind (ignore n-groups)
			    (map-group-name self group-name)
			  n-groups)
			:element-type 'fixnum
			:initial-element 0)))
    (incf (aref %$versioned-group-mixin-group-versions group-number))))

2;;; --- patch this 
0(compile-flavor-methods versioned-group-mixin versioned-attribute-mixin)
|#
