;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for STATICE-SERVER version 466.1
;;; Reason: Function STATICE-UTILITIES::PATHNAME-UNIT:  stick trailing / on
;;; Function STATICE-UTILITIES:CREATE-STATICE-FILE-SYSTEM:  compute overallocation better
;;; Written by Reti, 10/28/97 11:33:47
;;; while running on Beta Blocker from BETA:/wk1/worlds/test-color-main.vlod
;;; with Open Genera 2.0, Genera 8.5, Experimental IP-TCP Documentation 423.0,
;;; Experimental Lock Simple 437.0, Compare Merge 404.0, VC Documentation 401.0,
;;; Logical Pathnames Translation Files NEWEST, Experimental Color 427.0,
;;; Experimental Graphics Support 431.0, Experimental Genera Extensions 16.0,
;;; Experimental Essential Image Substrate 433.0,
;;; Experimental Color System Documentation 10.0, Experimental SGD Book Design 10.0,
;;; Experimental Images 431.2, Experimental Image Substrate 440.0,
;;; MacIvory Support 447.0, C 440.0, Experimental Lexer Runtime 438.0,
;;; Experimental Lexer Package 438.0, Experimental Minimal Lexer Runtime 439.0,
;;; Experimental Lalr 1 434.0, Experimental Context Free Grammar 439.0,
;;; Experimental Context Free Grammar Package 439.0, Experimental C Runtime 438.0,
;;; Experimental Compiler Tools Package 434.0,
;;; Experimental Compiler Tools Runtime 434.0, Experimental C Packages 436.0,
;;; Experimental Syntax Editor Runtime 434.0, C Library Headers 434,
;;; Experimental Compiler Tools Development 435.0,
;;; Experimental Compiler Tools Debugger 434.0, Experimental C Documentation 426.0,
;;; Experimental Syntax Editor Support 434.0, Experimental LL-1 support system 438.0,
;;; Statice Runtime 466.0, Statice 466.0, Statice Browser 466.0,
;;; Statice Server 466.0, Ivory Revision 5, VLM Debugger 329, Genera program 8.0,
;;; DEC OSF/1 V3.2 (Rev. 148),
;;; 1280x976 8-bit PSEUDO-COLOR X Screen BETA:0.0 with 224 Genera fonts (DECWINDOWS Digital Equipment Corporation Digital UNIX V3.2C R1).



(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "SYS:STATICE;UTILITIES;SETUP-STATICE.LISP.89")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:STATICE;UTILITIES;SETUP-STATICE.LISP.89")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Base: 10; Lowercase: Yes; Package: STATICE-UTILITIES -*-")


(defun pathname-unit (pname #+VLM exports)
  #-VLM (let ((host (send (fs:parse-pathname pname) ':host)))
	  (unless (typep host 'fs:fep-file-host)
	    (error "~A is not a FEPFS pathname." pname))
	  (send host :unit))
  #+VLM (let ((truename (si::string-append
			  (send (best-possible-truename pname) :string-for-host) "/"))
	      (best-bet -1))
	  (dotimes (i (length exports))
	    (let ((export (aref exports i)))
	      (when (string-equal truename export :end1 (length export))
		(when (or (= best-bet -1)
			  (> (length export) (length (aref exports best-bet))))
		  (setf best-bet i)))))
	  (unless (minusp best-bet)
	    best-bet)))


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:STATICE;UTILITIES;SETUP-STATICE.LISP.89")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: LISP; Syntax: Common-lisp; Base: 10; Lowercase: Yes; Package: STATICE-UTILITIES -*-")


(defun create-statice-file-system (file-system-name locally)
  (let* (#+VLM (exports (host-exports))
	 (max-disk #-VLM (si:n-disk-units) #+VLM (length exports))
	 (initial-free-space-count (make-array max-disk))
	 (initial-free-space-string (make-array max-disk))
	 (overallocated-p nil)
	 (free-space (make-array max-disk))
	 (directory-n-entries 1000)
	 (directory-pathname (default-file-system-pathname file-system-name))
	 (log-n-blocks dbfs::default-new-log-n-blocks)
	 (partition-names-and-sizes (ncons (list (list nil nil) (gensym))))
	 (tcp-loaded (sct:get-system-version "IP-TCP"))
	 (dbfs-page-present (assoc :dbfs-page (send neti:*local-host* :network-services)))
	 (add-dbfs-page-service nil))
    (loop named got-one do
      (tv:dotimes-noting-progress (i max-disk "Measuring free disk space")
	(multiple-value-bind (count string)
	    (free-space i #+VLM exports)
	  (setf (aref initial-free-space-count i) count
		(aref initial-free-space-string i) string)))
      (dw:accepting-values (*query-io* :resynchronize-every-pass t)
	(setq overallocated-p nil)
	(dotimes (i max-disk)
	  (setf (aref free-space i) (aref initial-free-space-count i)))
	(loop for ((pname size)) in partition-names-and-sizes do
	  (when size
	    (let ((unit (pathname-unit pname #+VLM exports)))
	      (when unit
		(decf (aref free-space unit) size)
	      (when (minusp (aref free-space unit)) (setq overallocated-p t))
))))
	(let ((unit (pathname-unit directory-pathname #+VLM exports)))
	  (when unit
	    (decf (aref free-space unit)
		  (ceiling directory-n-entries
			   (floor (- si:disk-sector-data-size32 ufs::*ufs-block-size*)
				  ufs::*directory-entry-size*)))))
	(dotimes (i max-disk)
	  (let ((fs (aref free-space i)))
	    (when fs
	      (fixed-line
		#-VLM
		(format
		  nil
		  "FEP~D: ~:[~*~7D Available~;  ~'iOverallocated by ~D~~*~] ~
		   ~35T(Originally: ~A)"
		  i (minusp fs) (- fs)
		  fs (aref initial-free-space-string i))
		#+VLM
		(format
		  nil
		  "~A: ~:[~*~7D ~DK Byte Blocks Available~;  ~
		   ~'iOverallocated by ~D ~*~DK Byte Blocks~~] ~35T(Originally: ~A)"
		  (aref exports i)
		  (minusp fs) (- fs) fs
		  (floor si:disk-block-length-in-bytes 1024)
		  (aref initial-free-space-string i))
		i))))
	(fixed-line "" -1)
	(setq directory-pathname (accept #-VLM 'fs:fep-pathname
					 #+VLM 'fs:unix42-pathname
					 :stream *query-io*
					 :default directory-pathname
					 :prompt "Directory Partition")
	      directory-n-entries (accept 'fixnum
					  :stream *query-io*
					  :default directory-n-entries
					  :prompt "Maximum Directory Entries")
	      log-n-blocks (accept 'fixnum
				   :stream *query-io*
				   :default log-n-blocks
				   :prompt "Initial Log Size in Blocks")
	      add-dbfs-page-service (unless dbfs-page-present
				      (accept 'boolean
					      :stream *query-io*
					      :default t
					      :prompt "Add DBFS-PAGE service to this host?")))
	(let ((default-pathname
		(fs:merge-pathnames (format nil "~A-part~D.file"
					    file-system-name
					    (1- (length partition-names-and-sizes)))
				    directory-pathname)))
	  (loop for entry in partition-names-and-sizes do
	    (destructuring-bind ((pathname size) uid) entry
	      (let ((new-pathname (accept #-VLM 'fs:fep-pathname
					  #+VLM 'fs:unix42-pathname
					  :stream *query-io*
					  :prompt "Partition"
					  :query-identifier uid
					  :default (or pathname default-pathname)
					  :provide-default t)))
		(multiple-value-bind (new-size nil unchanged)
		    (accept '(null-or-type integer)
			    :stream *query-io*
			    :prompt "  Blocks (None to remove)"
			    :query-identifier (string uid)
			    :default size
			    :provide-default t)
		  (unless unchanged
		    (setf (first entry) (list new-pathname new-size))
		    (when (and size (null new-size))
		      (setq partition-names-and-sizes
			    (delete entry partition-names-and-sizes)))
		    (when (and (null size) new-size)
		      (setq partition-names-and-sizes
			    (nconc partition-names-and-sizes
				   (ncons (list (list nil nil) (gensym)))))))))))))
      (setq partition-names-and-sizes
	    (delete-if #'(lambda (item) (null (second (first item))))
		       partition-names-and-sizes))
      (loop for entry on partition-names-and-sizes do
	(let ((pathname (caaar entry)))
	  (when (find pathname (rest entry)
		      :key #'caar
		      :test #'(lambda (p1 p2)
				(eq (fs:merge-pathnames p1) (fs:merge-pathnames p2))))
	    (error "Duplicate pathname specified ~A" pathname))))
      (cond ((null partition-names-and-sizes)
	     (format t "~&You must specify at least one partition"))
	    ((< (loop for ((nil size)) in partition-names-and-sizes
		      summing size)
		log-n-blocks)
	     (format t "~&You must specify a total of at least ~A blocks in the partitions"
		     log-n-blocks))
	    (overallocated-p
	     (format t #-VLM "~&One or more disk units are overallocated"
		       #+VLM "~&One or more Unix file systems are overallocated"))
	    (t (return-from got-one nil)))
      (setq partition-names-and-sizes
	    (nconc partition-names-and-sizes
		   (ncons (list (list nil nil) (gensym))))))
    (unless (validate-pathname directory-pathname)
      (return-from create-statice-file-system nil))
    (loop for ((pname nil)) in partition-names-and-sizes do
      (unless (validate-pathname pname)
	(return-from create-statice-file-system nil)))
    (let ((object (net:find-object-named :file-system file-system-name nil)))
      (when object
	(unless (yes-or-no-p "File-system object ~S already exists!~@
                              (If you proceed, you might destroy an already-existing ~@
                              Statice file system and all the databases in it!)~@
                              Do you want to go ahead anyway?  "
			     object)
	  (return-from create-statice-file-system nil))
	(format t "~&Deleting file-system object ~S from namespace... " object)
	(neti:delete-object-from-namespace object net:*namespace* locally)
	(princ "Done.")))
    (create-partition directory-pathname nil)
    (loop for ((pname psize)) in partition-names-and-sizes do
      (create-partition pname psize))
    (unless (net:find-object-named :file-system file-system-name nil)
      (multiple-value-bind (interned-name namespace)
	  (neti:parse-and-intern-name :file-system file-system-name net:*namespace* nil)
	(format t "~&Creating file-system object ~A in namespace... " interned-name)
	(neti:update-object-permanently
	  :file-system
	  namespace
	  interned-name
	  `(:file-system ,interned-name
	    :host ,net:*local-host*
	    :type :dbfs
	    :root-directory
	    ,(send directory-pathname :string-for-printing)
	    :pretty-name ,(send interned-name :string)
	    :user-property
	    ,(append
	       (loop for i from 0
		     for ((pn)) in partition-names-and-sizes
		     collect (list (intern (format nil "PARTITION~A" i) si:pkg-keyword-package)
				   pn))
	       (ncons (list :log-descriptor-file-id
			    (multiple-value-bind (w0 w1 w2) (uid:unique-id)
			      (format nil "~A-~A-~A" w0 w1 w2))))))
	  locally)
	(princ "Done.")))
    (format t "~&Initializing local UFS with associated directory structure... ")
    (ufs:initialize
      (dbfs::get-ufs-from-object (neti:find-object-named :file-system file-system-name))
      :n-directory-entries directory-n-entries)
    (princ "Done.")
    (format t "~&Creating local DBFS with associated directory structure... ")
    (dbfs:create-local-dbfs file-system-name :new-log-n-blocks log-n-blocks)
    (princ "Done.")
    (format t "~&Initializing DBFS Directory database... ")
    (dbfs-dir:initialize-directory-database file-system-name locally)
    (format t "Done.~%")
    (when add-dbfs-page-service
      (add-page-protocols net:*local-host* :tcp-not-present (not tcp-loaded)))))

