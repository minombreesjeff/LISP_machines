;;; -*- Syntax: Common-lisp; Base: 10; Mode: LISP; Package: PROCESS; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFUN INITIALIZE-METERS ()
  (DECLARE (INLINE METERING:PROCESS-METERING-OVERHEAD))
  (SETQ *PROCESS-START-TIME* (SI:%MICROSECOND-CLOCK))
  (SETQ *USELESS-DISPATCHER-ENTRIES* 0)
  (SETF *CURRENT-PROCESS-METERING-OVERHEAD*
	(IF %REAL-CURRENT-PROCESS
	    (METERING:PROCESS-METERING-OVERHEAD %REAL-CURRENT-PROCESS)
	    0))
  (SETF *PROCESS-PAGE-FAULTS* SI:*COUNT-PAGE-FETCHES*)
  (SETF *PROCESS-DISK-TIME* SI:*MS-TIME-PAGE-FAULT*))

(DEFUN SETUP-PROCESS-METERS (PROC)
  (DECLARE (INLINE PROCESS-METERING-INFO PMI-METERING-OVERHEAD
		   SI:PROCESS-MICROSECOND-TIME-SCHEDULED))
  (SETF *CURRENT-PROCESS-METERING-OVERHEAD*
	(PMI-METERING-OVERHEAD (PROCESS-METERING-INFO PROC)))
  (SETF *PROCESS-PAGE-FAULTS* SI:*COUNT-PAGE-FETCHES*)
  (SETF *PROCESS-DISK-TIME* SI:*MS-TIME-PAGE-FAULT*)
  (SETF *PROCESS-START-TIME* (SYS:%MICROSECOND-CLOCK))
  (SETF (SI:PROCESS-MICROSECOND-TIME-SCHEDULED PROC) *PROCESS-START-TIME*))

;;; We keep global track of the real-time, number-of-page-faults, and disk-time
;;; of the last process-switch, and increment the meters for each given process when we
;;; switch.

(DEFUN UPDATE-PROCESS-METERS (PROC TIME)
  (DECLARE (INLINE PROCESS-METERING-INFO PMI-METERING-OVERHEAD
		   SI:PROCESS-MICROSECOND-TIME-SCHEDULED))
  ;; this will have to be changed when *MS-TIME-PAGE-FAULT* becomes a double-integer meter.
  (INCF (SI:PROCESS-DISK-WAIT-TIME PROC) (- si:*MS-TIME-PAGE-FAULT* *PROCESS-DISK-TIME*))
  (INCF (SI:PROCESS-PAGE-FAULT-COUNT PROC) (- si:*COUNT-PAGE-FETCHES* *PROCESS-PAGE-FAULTS*))
  (SETF (PMI-METERING-OVERHEAD (PROCESS-METERING-INFO PROC))
	*CURRENT-PROCESS-METERING-OVERHEAD*)
  (SETF (PROCESS-LAST-TIME-RUN PROC) (ZL:TIME))
  (SETF (SI:PROCESS-MICROSECOND-TIME-SCHEDULED PROC) TIME)
  (INCREMENT-BIGNUM-PROCESS-TIME-METER
    (PROCESS-RUN-TIME PROC) (SI:%32-BIT-DIFFERENCE TIME *PROCESS-START-TIME*)))



;;; metering, of a different sort.

(DEFVAR *SCHEDULER-METERING-POINTS*
	'(NULL-PROCESS-CREATE PROCESS-Q-INIT SCHEDULER-INIT))

(defvar *scheduler-trace* nil)

(defvar *scheduler-metering* nil)

(defun initialize-scheduler-tracing ()
  (setf *scheduler-metering*
	(or *scheduler-metering*
	    (make-instance 'metering:basic-control :name 'scheduler-testbed)))
  (setf *scheduler-trace*
	(or *scheduler-trace*
	    (metering:make-data-collector 'metering:event-trace
					  :name "Scheduler trace"
					  :circular 't
					  :size 10000))))

(defun trace-scheduler ()
  (initialize-scheduler-tracing)
  (metering:set-scope-of-control *scheduler-metering* nil)
  (loop for trigger-name in *scheduler-metering-points*
	as trigger = (metering:parse-trigger trigger-name) do
    (metering:clear-trigger trigger)
    (metering:control-trigger *scheduler-metering* trigger)
    (metering:generate-data-at-trigger
      trigger
      '((real-time :keywords (:overhead (:name timestamp)))))
    (metering:collect-data-from-trigger
      trigger
      `((,*scheduler-trace* timestamp
	 metering::name
	 ,@(remove 'timestamp
		   (metering::trigger-generated-values trigger))))))
  (metering:set-scope-of-control *scheduler-metering* 't)
  (metering:enable-metering-utility))

(defun trace-scheduler-function (fspec &key (arglist t) (values t) (entry nil))
  (initialize-scheduler-tracing)
  (metering:meter-function fspec *scheduler-metering*)
  (let ((trigger (metering:parse-trigger (list :function fspec))))
    (metering:clear-trigger trigger)
    (metering:compute-differences-across-region trigger nil)
    (metering:generate-data-at-trigger
      trigger
      '((real-time :keywords (:overhead (:name timestamp)))))
    (when entry
      (metering:collect-data-from-trigger
	trigger
	`((,*scheduler-trace* timestamp metering::name 'entry))
	:initial 't))
    (metering:collect-data-from-trigger
      trigger
      `((,*scheduler-trace* 
	 timestamp function
	 ,@(when arglist '(arglist))
	 ,@(when values '(values)))))))

(defun reset-trace ()
  (initialize-scheduler-tracing)
  (metering:reset-collector *scheduler-trace*))

(defun display-trace (&optional (stream *standard-output*))
  (initialize-scheduler-tracing)
  (let ((last-time nil))
    (metering:get-entries *scheduler-trace*
			  #'(lambda (timestamp name &rest args)
			      (unless last-time (setf last-time timestamp))
			      (format stream "~&~12D: (~8D) ~A "
				      timestamp (time-difference timestamp last-time) name)
			      (loop for arg in args do
				(format stream " ~A" arg))
			      (setf last-time timestamp)))))

