;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; metering stuff

(DEFVAR *ENABLE-METERING-ON-PROCESS-SWITCH* NIL)
;; not initialized until the metering system is loaded.
(DEFVAR *PROCESS-SWITCH-METERING-TRIGGER* NIL) ;; (find-trigger 'process-switch)  

(ZL:DEFSTRUCT (PROCESS-METERING-INFO (:CONC-NAME PMI-))
	   (SWITCHES NIL)
	   (STACK NIL)
	   (METERING-OVERHEAD 0)
	   (METERING-OVERHEAD-OVERFLOW 0)
	   (SPARE-1 NIL)
	   (SPARE-2 NIL))

;;; This has to be a function, not a macro, so it will work in the cold-load
(DEFUN MAKE-PROCESS-METERING-INFO-FUNCTION ()
  (MAKE-PROCESS-METERING-INFO))

(DEFSUBST PROCESS-METERING-INFO-EXISTS (PROC)
  (LDB (BYTE 1 0) (SI:PROCESS-METERING-FLAGS PROC)))

(DEFSUBST TRIGGER-METERING-ON-PROCESS-SWITCH? (PROC)
  (LOGBITP 2 (SI:PROCESS-METERING-FLAGS PROC)))

(DEFSUBST TRIGGER-METERING-ON-PROCESS-SWITCH (PROC)
  (LDB (BYTE 1 1) (SI:PROCESS-METERING-FLAGS PROC)))

(DEFSUBST METERING:PROCESS-METER-STACK (PROC)
  (LET ((INFO (PROCESS-METERING-INFO PROC)))
    (AND INFO (PMI-STACK INFO))))

(DEFSUBST METERING:SET-PROCESS-METER-STACK (PROC VALUE)
  (LET ((INFO (PROCESS-METERING-INFO PROC)))
    (UNLESS INFO
      (SETF (PROCESS-METERING-INFO PROC)
	    (SETQ INFO (MAKE-PROCESS-METERING-INFO))))
    (SETF (PMI-STACK INFO) VALUE)))

(CL:DEFSETF METERING:PROCESS-METER-STACK METERING:SET-PROCESS-METER-STACK)

(DEFSUBST METERING:PROCESS-METERING-OVERHEAD (PROC)
  (DECLARE (INLINE PROCESS-METERING-INFO))
  (IF (EQ PROC %REAL-CURRENT-PROCESS)
      *CURRENT-PROCESS-METERING-OVERHEAD*
      (PMI-METERING-OVERHEAD (PROCESS-METERING-INFO PROC))))

(PROCLAIM '(NOTINLINE METERING:PROCESS-METERING-OVERHEAD))

(DEFUN METERING:SET-PROCESS-METERING-OVERHEAD (PROCESS VALUE)
  (DECLARE (INLINE PROCESS-METERING-INFO))
  (IF (EQ PROCESS %REAL-CURRENT-PROCESS)
      (SETF *CURRENT-PROCESS-METERING-OVERHEAD* VALUE)
      (SETF (PMI-METERING-OVERHEAD (PROCESS-METERING-INFO PROCESS)) VALUE)))

(DEFINE-SETF-METHOD METERING:PROCESS-METERING-OVERHEAD (PROC)
  (LET ((VALUE (GENSYM)))
    (IF (EQ PROC '%REAL-CURRENT-PROCESS)
	(VALUES () () (LIST VALUE)
		`(SETQ *CURRENT-PROCESS-METERING-OVERHEAD* ,VALUE)
		`(METERING:PROCESS-METERING-OVERHEAD %REAL-CURRENT-PROCESS))
	(LET ((PROC-NAME (GENSYM)))
	  (VALUES (LIST PROC-NAME) (LIST PROC) (LIST VALUE)
		  `(METERING:SET-PROCESS-METERING-OVERHEAD ,PROC-NAME ,VALUE)
		  `(METERING:PROCESS-METERING-OVERHEAD ,PROC-NAME))))))


(DEFSUBST METERING:PROCESS-METERING-OVERHEAD-OVERFLOW (PROC)
  (PMI-METERING-OVERHEAD-OVERFLOW (PROCESS-METERING-INFO PROC)))



(DEFMACRO DECOMPOSE-METER-NAME ((NAME LOW-COMPONENT HIGH-COMPONENT) &BODY BODY)
  `(LET ((,LOW-COMPONENT (INTERN (STRING-APPEND (STRING ,NAME) "-LOW")
				 (SYMBOL-PACKAGE ,NAME)))
	 (,HIGH-COMPONENT (INTERN (STRING-APPEND (STRING ,NAME) "-HIGH")
				  (SYMBOL-PACKAGE ,NAME))))
     ,@BODY))

(DEFMACRO DEFMETER (NAME INITIAL-VALUE)
  (DECOMPOSE-METER-NAME (NAME LOW HIGH)
    `(PROGN
       (DEFVAR ,LOW ,INITIAL-VALUE)
       (DEFVAR ,HIGH 0))))

;; OK, now the 3600 also has to do the same sort of hack needed on the older machine,
;; but now the result is many more bits of precision.
(DEFMACRO INCREMENT-DOUBLE-INTEGER (LOW HIGH VALUE)
  `(MULTIPLE-VALUE-BIND (SUM CARRY)
       (SI:%ADD-BIGNUM-STEP ,VALUE ,LOW 0)
     (SETF ,LOW SUM)
     (INCF ,HIGH CARRY)))

(DEFMACRO GET-VALUE-FROM-DOUBLE-INTEGER (LOW HIGH)
    `(LET ((HIGH ,HIGH))
       (IF (ZEROP HIGH)
	   (LET ((LOW ,LOW))
	     (IF (MINUSP LOW)
		 (SI:%MAKE-BIGNUM-FROM-FIXNUM-COMPONENTS 0 1 LOW)
		 LOW))
	   (SI:%MAKE-BIGNUM-FROM-FIXNUM-COMPONENTS 0 2 ,LOW HIGH))))

(DEFMACRO SET-VALUE-IN-DOUBLE-INTEGER (LOW HIGH VALUE)
    `(IF (FIXNUMP ,VALUE)
	 (PROGN
	   (SETF ,LOW ,VALUE)
	   (SETF ,HIGH 0))
	 (PROGN
	   (SETF ,LOW (BIGNUM-REF ,VALUE 0))
	   (SETF ,HIGH (LDB (BYTE 32. 32.) ,VALUE)))))

(DEFMACRO INCREMENT-METER (NAME VALUE)
  (DECOMPOSE-METER-NAME (NAME LOW HIGH)
    `(INCREMENT-DOUBLE-INTEGER ,LOW ,HIGH ,VALUE)))

(DEFMACRO GET-METER-VALUE (NAME)
  (DECOMPOSE-METER-NAME (NAME LOW HIGH)
    `(GET-VALUE-FROM-DOUBLE-INTEGER ,LOW ,HIGH)))

(DEFMACRO SET-METER-VALUE (NAME VALUE)
  (DECOMPOSE-METER-NAME (NAME LOW HIGH)
    `(SET-VALUE-IN-DOUBLE-INTEGER ,LOW ,HIGH ,VALUE)))

(DEFMACRO COPY-METER-VALUE (FROM-METER TO-METER)
  (DECOMPOSE-METER-NAME (FROM-METER FROM-LOW FROM-HIGH)
    (DECOMPOSE-METER-NAME (TO-METER TO-LOW TO-HIGH)
      `(PROGN
	 (SETF ,TO-LOW ,FROM-LOW)
	 (SETF ,TO-HIGH ,FROM-HIGH)))))

(DEFMACRO INCREMENT-BIGNUM-PROCESS-TIME-METER ((SLOT-NAME PROCESS) INCREMENT)
  (DECOMPOSE-METER-NAME (SLOT-NAME LOW HIGH)
    `(INCREMENT-DOUBLE-INTEGER (,LOW ,PROCESS) (,HIGH ,PROCESS) ,INCREMENT)))



;; now use some of those definitions.

(defvar *count-page-fetches* 0)
(defvar *process-page-faults* 0)
(defmeter *page-fault-time* 0)
(defvar *process-disk-time* 0)

(defvar *useless-dispatcher-entries* 0)
(defvar *lost-wakeups* 0)
(defvar *dead-wakeups* 0)
(defvar *arrested-wakeups* 0)

;; for metering stuff.
(defvar *record-process-switches* nil)
(defvar *show-scheduler-tracing* nil)

(defvar *show-process-switches* nil)
