;;; -*- Mode: Lisp; Syntax: Common-lisp; Package: PROCESS; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; The file defines the implementation-independent part of the new locking substrate.
;;; The definitions in this file are sufficient to compile code which uses the substrate.
;;; This compiled code may then be used with any lock implementation which follows the 
;;; protocols.

;;; External (documented) interfaces are indicated in D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")bold0 face.

;;; Atomic synchronization macros.

(defmacro 1atomic-replacef0 (reference new-value)
  (declare (values old-value))
  (let ((location (gensym))
	(old-value (gensym)))
    `(let ((,location (locf ,reference)))
       (loop
         (let ((,old-value (location-contents ,location)))
	   (when (store-conditional ,location ,old-value ,new-value)
	     (return ,old-value)))))))

(defmacro 1atomic-updatef0 (variable function)
  (let ((location (gensym))
	(old-value (gensym))
	(new-value (gensym)))
    `(loop with ,location = (locf ,variable)
	   for ,old-value = (location-contents ,location)
	   for ,new-value = (funcall ,function ,old-value)
	   do (when (store-conditional ,location ,old-value ,new-value)
		(return ,new-value)))))

(defmacro 1atomic-incf0 (reference &optional (delta 1))
  (let ((location (gensym))
	(old-value (gensym))
	(new-value (gensym)))
    `(loop with ,location = (locf ,reference)
	   for ,old-value = (location-contents ,location)
	   for ,new-value = (+ ,old-value ,delta)
	   do (when (store-conditional ,location ,old-value ,new-value)
		(return ,new-value)))))

(defmacro 1atomic-decf0 (reference &optional (delta 1))
  (let ((location (gensym))
	(old-value (gensym))
	(new-value (gensym)))
    `(loop with ,location = (locf ,reference)
	   for ,old-value = (location-contents ,location)
	   for ,new-value = (- ,old-value ,delta)
	   do (when (store-conditional ,location ,old-value ,new-value)
		(return ,new-value)))))

(defmacro 1atomic-push0 (item reference &key area)
  (let ((location (gensym))
	(old-value (gensym))
	(new-value (gensym)))
    `(loop with ,location = (locf ,reference)
	   for ,old-value = (location-contents ,location) then (location-contents ,location)
	   for ,new-value = ,(if area
				 `(cons-in-area ,item ,old-value ,area)
				 `(cons ,item ,old-value))
			  then (progn (setf (cdr ,new-value) ,old-value)
				      ,new-value)
	   do (when (store-conditional ,location ,old-value ,new-value)
		(return ,new-value)))))

(defmacro 1atomic-pop0 (reference)
  (let ((location (gensym))
	(old-value (gensym))
	(new-value (gensym))
	(top-value (gensym)))
    `(loop with ,location = (locf ,reference)
	   for ,old-value = (location-contents ,location)
	   for ,top-value = (first ,old-value)
	   for ,new-value = (rest ,old-value)
	   do (when (store-conditional ,location ,old-value ,new-value)
		(return ,top-value)))))



;;; The lock-argument structure.

;;; A lock-argument structure is a list of length at least 4.  The first 4 conses
;;; must be CDR-coded.  The elements of the list are as follows:

;;; LOCK-ARGUMENT-LOCKED-P:  This is non-NIL if the lock is in slow mode and this locking
;;; is held.  The cell is unused if the lock is in fast mode.  To tell if a locking
;;; is held, you must look both at this and at the simple-latch slot of the lock.

;;; LOCK-ARGUMENT-NEXT-LOCK-ARGUMENT:  This points to the next lock-argument structure in a 
;;; threaded list of the lockings currently held by a process.

;;; LOCK-ARGUMENT-LOCK:  This contains the lock instance for this locking.

;;; LOCK-ARGUMENT-PROCESS:  This contains the current process.

;;; The list after the first 4 elements consists of keyword arguments for locks that need them.

(defsubst 1make-lock-argument0 (lock &rest keys)
  (apply #'list nil nil lock *current-process* keys))

(defmacro with-stack-lock-argument ((lock-argument lock &rest keys) &body body)
  `(with-stack-list (,lock-argument nil nil ,lock *current-process* ,@keys)
     ,@body))

(pushnew '(make-lock-argument 1 nil with-stack-lock-argument)
	 si:*stack-let-operations*
	 :test #'equal)

;;;

;;; %POINTER-PLUS is somewhat different on the L and I machines.
;;; Luckily, CAR treats the results in the same way.

(defmacro define-lock-argument-accessor (name offset)
  `(progn
     (defsubst ,name (lock-argument)
       (car ,(if (= offset 0) 'lock-argument `(sys:%pointer-plus lock-argument ,offset))))
     (deflocf ,name (lock-argument)
       `(sys:%make-pointer-offset sys:dtp-locative ,lock-argument ,',offset))))

(define-lock-argument-accessor lock-argument-locked-p 0)
(define-lock-argument-accessor lock-argument-next-lock-argument 1)
(define-lock-argument-accessor lock-argument-lock 2)
(define-lock-argument-accessor lock-argument-process 3)

(defsubst lock-argument-getf (lock-argument key &optional default)
  (getf (cdr #+3600 (sys:%make-pointer-offset sys:dtp-list lock-argument 3)
	     #+imach (sys:%pointer-plus lock-argument 3))
	key default))



;;; The lock protocol -- Generic Functions

(defgeneric 1lock-name0 (lock)
  "The name of the lock, for documentation and debugging.")

(defgeneric 1reset-lock0 (lock)
  "Reset the lock to its initial state."
  (:method-combination :progn))

;;; Internal Generics

;;; This is called to lock a lock if the simple test fails.
(defgeneric lock-internal (lock lock-argument)
  :inline-methods
  (:function (si:lock-internal-cold lock lock-argument)))

;;; This is called to unlock a lock if the simple test fails.
(defgeneric unlock-internal (lock lock-argument)
  :inline-methods
  (:function (si:unlock-internal-cold lock lock-argument)))

(defgeneric abort-lock (lock lock-argument)
  (:function (si:abort-lock-cold lock lock-argument)))



;; This flavor provides a single instance variable in every lock.  The
;; simple-latch instance variable indicates the operation mode of the
;; lock. 

;;  :complex	Always go through the locking/unlocking methods.
;;  t		Currently running in the slow mode, but may switch to the fast mode.
;;  nil		Running in the fast mode, and the lock is free.
;;  (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")lock-argument
0;;		Running in the fast mode, and the lock is held.

(defflavor basic-lock
	(name
	 (simple-latch :complex))
	()
  :abstract-flavor
  (:ordered-instance-variables simple-latch)
  (:initable-instance-variables name simple-latch)
  (:required-init-keywords :name)
  (:conc-name "LOCK-")
  (:readable-instance-variables name simple-latch)
  (:locatable-instance-variables simple-latch))

(defmethod (sys:print-self basic-lock) (stream print-depth slashify-p)
  (declare (ignore print-depth))
  (if slashify-p
      (sys:printing-random-object (self stream :typep)
	(princ name stream))
      (princ name stream)))

(defmethod (abort-lock basic-lock :default) (lock-argument)
  (compiler:%error-unless
     (store-conditional (locf simple-latch) lock-argument nil)
     (unlock-internal self lock-argument)))

(defsubst 1lockp0 (lock) (typep lock 'basic-lock))



;;;; Lock Interface

(defsubst 1lock0 (lock lock-argument)
  (compiler:%error-unless
     (store-conditional (locf (lock-simple-latch lock)) nil lock-argument)
     (lock-internal lock lock-argument)))

(defsubst 1unlock0 (lock lock-argument)
  (compiler:%error-unless
     (store-conditional (locf (lock-simple-latch lock)) lock-argument nil)
     (unlock-internal lock lock-argument)))

;;; This is the main interface to locks.

;; Conceptually with-lock looks like:
#||
(defmacro 1with-lock0 ((lock &rest keys &key &allow-other-keys) &body body &environment env)
  (declare (arglist (lock &key mode &allow-other-keys) &body body))
  (once-only (lock &environment env)
    `(stack-let ((lock-argument (make-lock-argument ,lock ,@keys)))
       (unwind-protect-case ()
	   (when (lock ,lock lock-argument)
	     ,@body)
	 (:normal
	   (unlock ,lock lock-argument))
	 (:abort
	   (abort-lock ,lock lock-argument))))))
||#

;;Real implementation is bummed for speed.
(defmacro 1with-lock0 ((lock &rest keys &key other-lock-args &allow-other-keys)
		     &body body &environment env)
  (declare (arglist (lock &key mode &allow-other-keys) &body body))
  (once-only (lock &environment env)
    `(let ((.lock-location. (locf (lock-simple-latch ,lock)))
	   (.finished. nil))
       (,@(if (null other-lock-args)
	     `(with-stack-list (.lock-argument. nil nil ,lock *current-process* ,@keys))
	     `(with-stack-list* (.lock-argument. nil nil ,lock *current-process*
						 ,@(si:rem-keywords keys '(:other-lock-args))
						 ,other-lock-args)))
	 (unwind-protect
	     (cond ((compiler:%error-unless
		      (store-conditional .lock-location. nil .lock-argument.)
		      (lock-internal ,lock .lock-argument.))
		    (multiple-value-prog1
		      (progn ,@body)
		      (setq .finished. t)))
		   (t
		    (setq .finished. t)
		    nil))
	   (block .cleanup.
	     (compiler:%error-unless .finished.
	       (abort-lock ,lock .lock-argument.)
	       (return-from .cleanup.))
	     (compiler:%error-unless (store-conditional .lock-location. .lock-argument. nil)
	       (unlock-internal ,lock .lock-argument.))))))))

(defun 1lock-idle-p0 (lock)
  (or (null (lock-simple-latch lock))
      (lock-idle-p-internal lock)))

(defun 1lock-lockable-p0 (lock &rest keys)
  (or (null (lock-simple-latch lock))
      (stack-let ((lock-argument (list* nil nil lock *current-process* keys)))
	(lock-lockable-p-internal lock lock-argument))))

(defmacro 1without-lock0 ((lock) &body body)
  `(without-lock-internal ,lock #'(lambda () ,@body)))

(defun without-lock-internal (lock continuation)
  (declare (sys:downward-funarg continuation))
  (if (null (lock-simple-latch lock))
      (funcall continuation)
      (let ((lock-arguments nil))
	(unwind-protect
	    (progn
	      (setf lock-arguments
		    (lock-process-lock-arguments-internal lock *current-process*))
	      (dolist (lock-argument lock-arguments)
		(unlock-internal lock lock-argument))
	      (funcall continuation))
	  (dolist (lock-argument lock-arguments)
	    (unless (lock-argument-locked-p lock-argument)
	      (lock-internal lock lock-argument)))))))
