;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10; Lowercase: Yes; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar scheduler-exists nil)

(defvar si:initial-process)			;The first process made

(defvar *registered-procs-for-interrupt* (make-array (* 2 *sb-wakeup-queue-size*)))

;; when this is 't, then *current-process* doesn't (necessarily) refer to the 
;; current-stack-group
(defwiredvar %%process-switch-in-progress nil)

(defvar *null-process* nil)
(defvar *idle-process* nil)

(defconstant number-of-process-classes 5)

(defvar *runnable-processes* (make-array number-of-process-classes))
(defvar *page-wait-queue*)

(defconstant *process-priority-class-deadline* 0)
(defconstant *process-priority-class-interactive* 1)
(defconstant *process-priority-class-foreground* 2)
(defconstant *process-priority-class-batch* 3)
(defconstant *process-priority-class-idle-time* 4)

(defconstant *neutral-foreground-priority* 120)

(defparameter *default-process-priority* (process:make-process-priority :foreground 0))

(defvar *all-processes* nil)

(defvar *dead-processes-for-debugging* nil)
(defvar *stack-groups-not-unwound* nil)

(defvar *base-initializer-forms* nil)

(defvar *initializer-forms* nil)

(defvar *scheduler-metering-stack* (metering:make-metering-stack 40.))

(defvar si:warm-booted-process nil)	;When you warm boot
(defvar si:warm-booted-processes nil)	;All times warm booted since cold boot

(defvar si:*delaying-processes*)		;t until delayed processes are started

(defvar si:*processes-to-start-up* nil)

(defvar si:*proc-queue-timer* nil)
(defvar si:*proc-queue-proc* nil)

(defvar si:*scheduler-ignored-error-notification-time*)	;Time of last such notification

(defvar si:delayed-restart-processes nil)	;Processes to be restarted after initialization

;;At clock time, each element is funcalled on the
;;number of 60ths that have elapsed recently.
(sys:defvar-resettable si:clock-function-list nil)

(defparameter si:*default-process-abort-timeout* (* 5. 60.))	;5 seconds

;; The faster this gets, the faster response we'll see, but the more of the processor the
;; wait function poller will take up.
;; in fractions of a second.
(defvar *process-wait-interval* (/ 1.0 6.0))

;; I'd make it slower, except that when parentheses blinkers are visible and blinking, they 
;; blink every 8/60ths of a second.
;; All of that stuff should be driven independently off of timers, anyway.
(defvar *clock-queue-interval* (/ 10.0 60.0))
(defvar *clock-queue-timer* nil)

(defvar *show-detailed-process-utilization* nil)

(defvar si:*processes-forcibly-aborted* nil)
(defvar si:*processes-forcibly-reset-at-warm-boot* nil)

;; Alist with one element for each process that is trying to be aborted or interrupted,
;; but waiting until it leaves WITHOUT-ABORTS.  Each element is a list of the form
;; (victim attacker action state function . arguments)
;; victim - the process being attacked
;; attacker - the process attacking it
;; action - symbol that names the attacking function
;; state - one of :INTERRUPT, :WAIT, :DONE, or :WAKEUP
;;      :INTERRUPT - attacker has interrupted victim to check its state
;;	:WAIT - attacker is waiting for victim to be abortable
;;	:DONE - action completed by victim, attacker doesn't know it yet
;;	:WAKEUP - force attacker to wake up before timeout elapses
;;      :SHEET-LOCK - attacker is waiting for a sheet lock in order to query
;;	:QUERY - attacker is querying what to do after abort attempt failed
;; reasons - list of reasons why the process can't be aborted right now
;; function - function the victim calls to perform the action
;; arguments - arguments to that function, after the element which is always the first arg
(sys:defvar-resettable si:*pending-process-aborts* nil)

(defstruct (pending-process-abort (:type :list*) (:conc-name ppa-)
				  (:copier nil) (:predicate nil))
  victim attacker action state reasons function arguments)

(defvar si:inhibit-idle-scavenging-flag) ;If NIL scavenger runs when no processes runnable
(defvar si:gc-idle-scavenge-quantum	;Argument to %GC-SCAVENGE used in that case
	1000.)				;This takes about a tenth of a second
(defvar si:gc-idle-scavenge-max-time 100000.)	;Let it run for at most 1/10 second

(defmacro si:after-frob-run-light ()
  ;; This is needed to kludge around the "scheduler 80" bug caused by
  ;; the IO6 board in OBS TMC IO6 machines
  #+3600 (let ((a (gensym)) (b (gensym)) (c (gensym)))
	   `(let* ((,a 0) (,b 1) (,c 2))
	      ,a ,b ,c nil))
  #-3600 `nil
  )

(defmacro si:save-who-line-run-light (&body body)
  `(let ((.rl. (si:get-run-light sys:process-run-light)))
     ,@body
     (if .rl.
	 (si:set-run-light sys:process-run-light)
	 (si:clear-run-light sys:process-run-light))))

(defvar si:*scheduler-ignored-error-notification-interval* (* 5 60. 60.))
					;60ths between notifications that an error
					;occurred in the scheduler and was ignored

(defmacro si:ignore-errors-in-scheduler (&body body)
  `(catch 'si:ignore-errors
     (condition-bind-default
       ((dbg:debugger-condition #'si:ignore-errors-in-scheduler-handler))
       ,@body)))

;Internal function of the IGNORE-ERRORS-IN-SCHEDULER macro
(defun si:ignore-errors-in-scheduler-handler (error)
  (unless (and (variable-boundp si:*scheduler-ignored-error-notification-time*)
	       (not (time-elapsed-p si:*scheduler-ignored-error-notification-interval*
				    si:*scheduler-ignored-error-notification-time*)))
    (setq si:*scheduler-ignored-error-notification-time* (time:time))
    (tv:notify nil "Scheduler: ignoring an error in a periodic action:~%~A"
	       (let ((*query-io* si:cold-load-stream))
		 (with-output-to-string (stream)
		   (dbg:with-erring-frame (dbg:*current-frame* error)
		     (send error :bug-report-description stream nil))))))
  (throw 'si:ignore-errors nil))

(defvar *process-start-time*)

;;; If the current process has had the processor for less than this
;;; many microseconds, only a process with preemptive priority can preempt it.
(defparameter *process-preempt-interval* 64000)	;15 times per second

