;;; -*- Syntax: Common-lisp; Base: 10; Mode: LISP; Package: PROCESS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Just write some crap out to get my thoughts in order.

;; The process we are now executing in will look like it
;; was warm-booted when this saved band is restored.
;; Suppress the warm-boot message, but disable and flush
;; the process so it doesn't start running with its
;; state destroyed.  We'd like to :RESET it, but can't
;; because we are still running in it.  If the process
;; is the initial process, it will get a new state and
;; get enabled during the boot process.
(DEFUN SHUTDOWN-NEW-SCHEDULER ()
  #+VLM (WHEN (OR (> (SYS:VLM-GENERA-MAJOR-VERSION) 5)
		  (AND (= (SYS:VLM-GENERA-MAJOR-VERSION) 5)
		       ( (SYS:VLM-GENERA-MINOR-VERSION) 5)))
	  (SETF (SYS:EMB-CLOCK-INTERVAL) (OR CLI::*INTERRUPT-METERING-INTERVAL*
					     CLI::*SEQUENCE-BREAK-INTERVAL*)))
  (SETF SI:*WIRED-SCHEDULER-ENABLED* NIL)
  (SETF SI:INHIBIT-SCHEDULING-FLAG T)		;no more scheduling
  (SETF SI:INHIBIT-SCAVENGING-FLAG T)		;no more scavenging until GC starts back up
  (SETF *PREEMPTION-ENABLED* NIL)
  (SETF SI:*NEW-SCHEDULER-ENABLED* NIL)
  (PROCESS-DISABLE %REAL-CURRENT-PROCESS)
  (SETQ %REAL-CURRENT-PROCESS NIL)
  (SETQ *CURRENT-PROCESS* NIL))

;; This is called, of course, with sequence-breaks deferred.
(DEFUN INITIALIZE-SCHEDULER ()
  (METERING:DEFINE-METERING-POINT (SCHEDULER-INIT) ())
  (SETF %REAL-CURRENT-PROCESS NIL)
  (SETF *CURRENT-PROCESS* NIL)
  (SETF *ALL-PROCESSES* (WHEN (AND (VARIABLE-BOUNDP *ALL-PROCESSES*)
				   *ALL-PROCESSES*)
			  (LOOP FOR P IN *ALL-PROCESSES*
				WHEN (NEQ (PROCESS-STATE P) 'DEAD)
				  COLLECT P)))

  (INITIALIZE-PROCESS-QUEUES)
  (INITIALIZE-METERS)
  (METERING:DEFINE-METERING-POINT (PROCESS-Q-INIT) ())
  (SETF *WAITING-PROCESSES* (MAKE-ARRAY INITIAL-WAITERS-QUEUE-SIZE :FILL-POINTER 0))
  (SETF *IDLE-PROCESS*
	(MAKE-PROCESS "Idle Process" :SYSTEM-PROCESS T
		      :INITIAL-FUNCTION #'IDLE-PROCESS-TOP-LEVEL
		      :PRIORITY (MAKE-SCHEDULER-PRIORITY
				  *PROCESS-PRIORITY-CLASS-IDLE-TIME* 0)
		      :RUN-REASONS (LIST :ENABLE)
		      :WARM-BOOT-ACTION #'IGNORE))
  (SETF (LDB PROCESS-DEBUG-UNSAFE-TO-WAIT (PROCESS-DEBUG-FLAG *IDLE-PROCESS*)) 1)
  (SETF (LDB %%PROCESS-DEBUG-NO-RUN-LIGHT (PROCESS-DEBUG-FLAG *IDLE-PROCESS*)) 1)
  (SETF (LDB %%PROCESS-DEBUG-NO-BACKGROUND-INTERACTOR (PROCESS-DEBUG-FLAG *IDLE-PROCESS*)) 1)
  (SETF (LDB %%PROCESS-DEBUG-NO-KBD-ARREST (PROCESS-DEBUG-FLAG *IDLE-PROCESS*)) 1)
  (SETF *NULL-PROCESS*
	(MAKE-PROCESS "Null Process" :INITIAL-FUNCTION #'NULL-PROCESS-TOP-LEVEL
		      ;; we are about to arrest this process, but it must start out
		      ;; enabled so it gets the correct initial-stack-group.  The dispatcher
		      ;; violates the invariant that an arrested process will never run
		      ;; w.r.t. the Null Process
		      :RUN-REASONS (LIST :ENABLE)
		      :PRIORITY (MAKE-SCHEDULER-PRIORITY *PROCESS-PRIORITY-CLASS-IDLE-TIME* 0)
		      :WARM-BOOT-ACTION #'IGNORE
		      :FLAGS '(:SYSTEM-PROCESS T
			       :UNSAFE-TO-WAIT T :NO-RUN-LIGHT T
			       :NO-BACKGROUND-INTERACTOR T :NO-KBD-ARREST T)
		      ))
  (DISABLE *NULL-PROCESS*)
  ;; this should never be unarrested, so that the Idle Process will run
  ;; whenever possible.
  (ENABLE-ARREST-REASON *NULL-PROCESS* :GIVE-IDLE-PROCESS-A-CHANCE)
  (METERING:DEFINE-METERING-POINT (NULL-PROCESS-CREATE) ())
  (SETQ SI:INITIAL-PROCESS
	(MAKE-PROCESS "Initial Process" :SYSTEM-PROCESS T
		      :STACK-GROUP SYS:%CURRENT-STACK-GROUP
		      :WARM-BOOT-ACTION #'IGNORE))
  (SETF (LDB %%PROCESS-DEBUG-NO-BACKGROUND-INTERACTOR (PROCESS-DEBUG-FLAG SI:INITIAL-PROCESS)) 1)
  (SETQ *PENDING-TIMERS* (MAKE-INSTANCE 'SIMPLE-TIMER-QUEUE))
  (SETF *SCHEDULER-PROCESS*
	(MAKE-PROCESS "Process Scheduler" :PRIORITY *SCHEDULER-PRIORITY*
		      :INITIAL-FUNCTION #'RUN-PROCESS-SCHEDULER
		      :WARM-BOOT-ACTION #'IGNORE
		      :SIMPLE-P T :RUN-REASONS NIL
		      :VERIFY-FUNCTION #'(LAMBDA ()
					   (TIMER-EXPIRED-P *SCHEDULER-TIMER*))
		      :TOP-LEVEL-WHOSTATE "Scheduler Wait"
		      :FLAGS '(:SYSTEM-PROCESS T
			       :NO-RUN-LIGHT T
			       ;; this isn't strictly necessary, just prudent.
			       :NO-BACKGROUND-INTERACTOR T
			       :NO-KBD-ARREST T)))
  (SETF *SCHEDULER-TIMER*
	(PROCESS:CREATE-TIMER-WAKEUP *SCHEDULER-PROCESS* :NAME "Wake up scheduler"))
  (SETF *WAIT-FUNCTION-POLLER*
	(MAKE-PROCESS "Wait function poller"
		      :PRIORITY (MAKE-PROCESS-PRIORITY :FOREGROUND 110)
		      :INITIAL-FUNCTION #'POLL-WAIT-FUNCTIONS
		      :SIMPLE-P 'T
		      :WARM-BOOT-ACTION #'PROCESS-WARM-BOOT-RESTART
		      :VERIFY-FUNCTION #'PROCESS-POLLING-PREDICATE
		      :RUN-REASONS NIL
		      :TOP-LEVEL-WHOSTATE "Wait function poller"
		      :SYSTEM-PROCESS T
		      :FLAGS '(:UNSAFE-TO-WAIT T
			       :NO-RUN-LIGHT T
			       :NO-BACKGROUND-INTERACTOR T
			       :NO-KBD-ARREST T)))
  (SETF *BACKGROUND-WAIT-FUNCTION-POLLER*
	(MAKE-PROCESS "Background Wait function poller"
		      :PRIORITY (MAKE-PROCESS-PRIORITY :FOREGROUND -100)
		      :INITIAL-FUNCTION #'BACKGROUND-POLL-WAIT-FUNCTIONS
		      :WARM-BOOT-ACTION #'PROCESS-WARM-BOOT-RESTART
		      :RUN-REASONS NIL
		      :SYSTEM-PROCESS T
		      :FLAGS '(:UNSAFE-TO-WAIT T
			       :NO-RUN-LIGHT T
			       :NO-BACKGROUND-INTERACTOR T
			       :NO-KBD-ARREST T)))
  (SETF *WAIT-FUNCTION-TIMER*
	(CREATE-TIMER-CALL 'START-POLLING-PROCESSES NIL
			   ;; use priority of timer-process, itself.
			   :NAME "Poll waiting processes" :PRIORITY NIL))
  (SETF SCHEDULER-EXISTS T))

(DEFUN PROCESS-INITIALIZE ()
  ;; this can force us into the FEP if it got screwed up on a warm boot, so fix it.
  (UNLESS (ZEROP (LDB SI:%%SG-HALT-ON-ERROR SI:%CURRENT-STACK-GROUP-STATUS-BITS))
    (SETF (LDB SI:%%SG-HALT-ON-ERROR SI:%CURRENT-STACK-GROUP-STATUS-BITS) 0))
  ;; Create things the first time through
  (IF (NOT SCHEDULER-EXISTS)
      (INITIALIZE-SCHEDULER)
      ;; we aren't calling initialize-scheduler, so some stuff that is done inside there
      ;; has to get done now.
      (PROGN
	(LOOP FOR P IN *ALL-PROCESSES* DO
	  (WHEN (PROCESS-RUNNABLE-P P)
	    (%FORCE-PROCESS-NOT-RUNNABLE-INTERNAL P 'BLOCKED NIL)
	    (RESET-PRIORITY-INTERNAL P)))
	(LOOP FOR Q BEING THE ARRAY-ELEMENTS OF *RUNNABLE-PROCESSES* DO
	  (WHEN Q
	    (SETF (SCHEDULER-QUEUE-HEAD Q) NIL)
	    (SETF (SCHEDULER-QUEUE-TAIL Q) NIL)
	    (SETF (SCHEDULER-QUEUE-LENGTH Q) 0)))))
  (SETF (PROCESS-STACK-GROUP SI:INITIAL-PROCESS) SYS:%CURRENT-STACK-GROUP)
  (LET ((OLD-PROCESSES (COPY-LIST *ALL-PROCESSES*)))
    ;; Below is done every time the machine starts up (warm or cold).  Unfortunately,
    ;; the state of the current process has been lost, so it must be reset without
    ;; unwinding it.  This is a total loss, but the only way to prevent this
    ;; is to prevent warm booting.  WARM BOOTING IS STRONGLY DISCOURAGED.
    ;; On Ivory, we may have successfully saved the state of the warm-booted stack group.
    (SETQ SI:WARM-BOOTED-PROCESS (AND #+IMACH (NOT (NULL SI:*WARM-BOOTED-STACK-GROUP*))
				      #+IMACH (EQ (EQ %REAL-CURRENT-PROCESS SI:INITIAL-PROCESS)
						  (EQ SI:*WARM-BOOTED-STACK-GROUP*
						      SI:%INITIAL-STACK-GROUP))
				      %REAL-CURRENT-PROCESS))
    (WHEN (NOT (NULL SI:WARM-BOOTED-PROCESS))
      (PUSH SI:WARM-BOOTED-PROCESS SI:WARM-BOOTED-PROCESSES)
      (UNLESS (EQ SI:WARM-BOOTED-PROCESS SI:INITIAL-PROCESS)
	#||					;too dangerous
	#+IMACH
	(SETF (PROCESS-STACK-GROUP SI:WARM-BOOTED-PROCESS) SI:*WARM-BOOTED-STACK-GROUP*)
	||#
	(SETQ %REAL-CURRENT-PROCESS NIL)
	(SETQ *CURRENT-PROCESS* NIL)
	(PROCESS-RESET SI:WARM-BOOTED-PROCESS T)	;T means NOUNWIND
	(PROCESS-FLUSH SI:WARM-BOOTED-PROCESS)))	;Don't let it run until reset
    #+IMACH (SETF SI:*WARM-BOOTED-STACK-GROUP* NIL)	;has been dealt with
    (SETQ %REAL-CURRENT-PROCESS SI:INITIAL-PROCESS)
    (SETQ *CURRENT-PROCESS* SI:INITIAL-PROCESS)
    (PROCESS-ENABLE SI:INITIAL-PROCESS)		;enable since we're in it
    (PROCESS-FORCE-WAKEUP SI:INITIAL-PROCESS)
    ;; Start the Null and Idle processes.
    (INITIALIZE-IDLE-PROCESSES)
    ;; Start up the overhead processes.
    (INITIALIZE-PROCESS-POLLERS-DATA-STRUCTURES)
    (INITIALIZE-TIMER-FACILITY-DATA-STRUCTURES)
    (INITIALIZE-PROCESS-SCHEDULER)
    ;; fixup resources
    (SI:MAP-RESOURCE 'STACK-GROUP-FOR-SIMPLE-PROCESS
		     #'(LAMBDA (SG IN-USE IGNORE)
			 (UNLESS IN-USE
			   (SI:STACK-GROUP-PRESET SG #'SIMPLE-PROCESS-TOP-LEVEL)
			   (SETF (SI:SG-NAME SG) "Simple Process"))))
    (SI:MAP-RESOURCE 'STACK-GROUP-FOR-PROCESS
		     #'(LAMBDA (SG IN-USE IGNORE)
			 (UNLESS IN-USE
			   (SI:STACK-GROUP-PRESET SG #'PROCESS-TOP-LEVEL)
			   (SETF (SI:SG-NAME SG) "Process"))))

    (SETQ SI:INHIBIT-IDLE-SCAVENGING-FLAG T)	;Don't scavenge by default
    (SETQ TV:WHO-LINE-PROCESS SI:INITIAL-PROCESS)	;put in wholine while no window selected    
    (VARIABLE-MAKUNBOUND SI:*SCHEDULER-IGNORED-ERROR-NOTIFICATION-TIME*)
    ;; Do to all processes what they want done to them.
    (SETF SI:*DELAYING-PROCESSES* T)
    (LOOP FOR P IN OLD-PROCESSES DO
      (SETF (PROCESS-LAST-TIME-RUN P) NIL)
      (SETF (SI:PROCESS-MICROSECOND-TIME-SCHEDULED P) NIL)
      (IGNORE-ERRORS (FUNCALL (OR (PROCESS-WARM-BOOT-ACTION P) #'PROCESS-FLUSH) P)))
    (INITIALIZE-PROCESS-POLLERS)
    (INITIALIZE-TIMER-FACILITY)
    (SETF SI:*NEW-SCHEDULER-ENABLED* T)
    (SETF (SI:PROCESS-MICROSECOND-TIME-SCHEDULED %REAL-CURRENT-PROCESS)
	  (SI:%MICROSECOND-CLOCK))
    (SETF *PREEMPTION-ENABLED* 'T)
    #+3600 (ZL:SETQ-GLOBALLY SI:INHIBIT-SCHEDULING-FLAG NIL)
    (SETQ SI:INHIBIT-SCHEDULING-FLAG NIL)
    (SETF SI:*WIRED-SCHEDULER-ENABLED* T)
    #+VLM (WHEN (OR (> (SYS:VLM-GENERA-MAJOR-VERSION) 5)
		    (AND (= (SYS:VLM-GENERA-MAJOR-VERSION) 5)
			 ( (SYS:VLM-GENERA-MINOR-VERSION) 5)))
	    (SETF (SYS:EMB-CLOCK-INTERVAL) (OR CLI::*INTERRUPT-METERING-INTERVAL* -1)))
    NIL))

(DEFUN INITIALIZE-IDLE-PROCESSES ()
  (RESET *NULL-PROCESS* :IF-WITHOUT-ABORTS T)
  (RESET *IDLE-PROCESS* :IF-WITHOUT-ABORTS T)
  (ENABLE *IDLE-PROCESS*)
  NIL)

;;;
;; This one has to be a method so it can access INITIAL-FORM
(DEFMETHOD (PROCESS-WARM-BOOT-RESET PROCESS) ()
  (WITH-SCHEDULER-LOCKED
    (SETF INITIAL-FORM '(PROCESS-WARM-BOOT-RESET-INTERNAL))
    (PROCESS-FORCE-WAKEUP SELF)
    (PROCESS-RESET SELF NIL NIL :FORCE)
    (PROCESS-ENABLE SELF)))

(DEFUN PROCESS-WARM-BOOT-RESET-INTERNAL ()
  (PROCESS-KILL %REAL-CURRENT-PROCESS)
  (PROCESS-WAIT-FOREVER))

(DEFUN PROCESS-WARM-BOOT-RESTART (PROCESS)
  (PROCESS-RESET PROCESS NIL NIL ':FORCE))

;Like PROCESS-WARM-BOOT-RESTART but doesn't allow it to run until after
;initialization is complete.
(DEFUN PROCESS-WARM-BOOT-DELAYED-RESTART (PROCESS)
  (LET ((RUN-REASONS (PROCESS-RUN-REASONS PROCESS)))
    (WHEN RUN-REASONS
      (PUSH (CONS PROCESS RUN-REASONS) SI:DELAYED-RESTART-PROCESSES)
      (SETF (PROCESS-RUN-REASONS PROCESS) NIL)
      (PROCESS-CONSIDER-RUNNABILITY PROCESS)))
  (PROCESS-RESET PROCESS NIL NIL ':FORCE))	;Won't actually unwind until given run reason

(DEFUN ENABLE-DELAYED-PROCESSES ()
  (LOOP WHILE SI:DELAYED-RESTART-PROCESSES
	FOR (P . RR) = (POP SI:DELAYED-RESTART-PROCESSES)
	DO (WITH-SCHEDULER-LOCKED
	     (SETF (PROCESS-RUN-REASONS P) RR)
	     (PROCESS-CONSIDER-RUNNABILITY P)))
  (SETF SI:*DELAYING-PROCESSES* NIL)
  (SETF SI:CLOCK-FUNCTION-LIST (COPY-LIST SI:CLOCK-FUNCTION-LIST TV:WHO-LINE-AREA))
  NIL)


(DEFUN SCHEDULER-IS-UNSAFE-FOR-THIS-PROCESS (PROCESS)
  (OR (NOT (SAFE-TO-PROCESS-WAIT-P PROCESS))
      (NOT (SAFE-TO-USE-TIMERS PROCESS))))

(SI:DEFINE-GC-OPTIMIZATION LOCALIZE-SCHEDULER-TABLES :LAYERED-SYSTEM-RELEASE
  (:DOCUMENTATION "Localize some internal scheduler tables")
  (:ORDER :LATE)
  (:BEFORE-FLIP (INCREMENTAL)
    (UNLESS INCREMENTAL
      (WITHOUT-INTERRUPTS
	(SETQ *ALL-PROCESSES*
	      (COPY-LIST *ALL-PROCESSES* SYS:PERMANENT-STORAGE-AREA))))
    (SI:USING-SYSTEM-TEMPORARY-AREA
      (LET ((SYS:DEFAULT-CONS-AREA SI:SYSTEM-TEMPORARY-AREA))
	(FLET ((PROCESS-ELEMENTS (PROCESS)
		 ;; Don't reorder PROCESS-RUN-FUNCTION processes because they don't
		 ;; generally get saved across boots.
		 (UNLESS (LDB-TEST %%PROCESS-DEBUG-NOT-RESTARTABLE
				   (PROCESS-DEBUG-FLAG PROCESS))
		   `(,PROCESS
		     ,@(LET ((ISG (PROCESS-INITIAL-STACK-GROUP PROCESS)))
			 (AND (LISTP ISG)
			      (ARRAYP (SETQ ISG (SYS:%FIND-STRUCTURE-HEADER ISG)))
			      (LIST ISG)))
		     ,(SYMBOL-VALUE-IN-INSTANCE PROCESS 'PROCESS-PRIORITY)
		     ,(SYMBOL-VALUE-IN-INSTANCE PROCESS 'PROMOTION-SET)
		     ,(SYMBOL-VALUE-IN-INSTANCE PROCESS 'PROMOTING-SET)
		     ,(PROCESS-METERING-INFO PROCESS))))
	       (REMOVE-IF-NOT-IN-AREA (AREA LIST)
		 ;; Don't call REMOVE-IF-NOT, this has to be sure to copy the whole list
		 (LOOP FOR ITEM IN LIST
		       WHEN (= (SYS:%AREA-NUMBER ITEM) AREA)
			 COLLECT ITEM)))
	  (LET ((ALL-PROCESSES (WITHOUT-INTERRUPTS (REVERSE *ALL-PROCESSES*)))
		(ALL-TIMERS `(,*SCHEDULER-TIMER*
			      ,*WAIT-FUNCTION-TIMER*
			      ,@(LOOP FOR SCREEN IN (APPEND TV:ALL-THE-SCREENS
							    TV:*OLD-CONSOLE-SCREENS*)
				      WHEN (SYMBOL-VALUE-IN-INSTANCE SCREEN
								     'TV:BLINKER-TIMER)
					COLLECT IT
				      WHEN (SETQ SCREEN (TV:SCREEN-WHO-LINE-SCREEN SCREEN))
					COLLECT (SYMBOL-VALUE-IN-INSTANCE SCREEN
									  'TV:UPDATE-TIMER)
					AND COLLECT (SYMBOL-VALUE-IN-INSTANCE SCREEN
						      'TV:MOUSE-DOCUMENTATION-UPDATE-TIMER))
			      ,CHAOS:*CHAOS-RETRANSMIT-TIMER*
			      ,CHAOS:*CHAOS-ROUTING-TABLE-TIMER*
			      ,CHAOS:*CHAOS-ROUTING-PKT-TIMER*
			      ,CHAOS:*CHAOS-PROBE-TIMER*
			      ,@(LOOP FOR NETWORK IN NETI:*LOCAL-NETWORKS*
				      FOR PROTO = (WHEN (TYPEP NETWORK 'TCP:INTERNET-NETWORK)
						    (SYMBOL-VALUE-IN-INSTANCE
						      NETWORK 'TCP::IP-PROTOCOL))
				      FOR TIMER = (WHEN PROTO
						    (SYMBOL-VALUE-IN-INSTANCE
						      PROTO 'TCP::BACKGROUND-TIMER))
				      WHEN TIMER
					COLLECT IT)
			      ,@(AND (VARIABLE-BOUNDP TCP::*TCP-BACKGROUND-TIMER*)
				     `(,TCP::*TCP-BACKGROUND-TIMER*))
			      ,@(AND (VARIABLE-BOUNDP TV:*BLANK-SCREEN-TIMER*)
				     `(,TV:*BLANK-SCREEN-TIMER*))))
		(ALL-WAITERS NIL)
		ALL-OBJECTS)
	    (DOLIST (RESOURCE '(TIMER-PROCESSES TV:MOUSE-PROCESS CLI::KEYBOARD-PROCESS
				#+IMACH NETI:TRANSMIT-PROCESS #+IMACH NETI:RECEIVE-PROCESS
				#+3600 NETI:3600-ETHERNET-PROCESS
				#+3600 CLI::NBS-ETHERNET-PROCESS))
	      (MAP-RESOURCE RESOURCE (LAMBDA (PROCESS IGNORE IGNORE)
				       (PUSHNEW PROCESS ALL-PROCESSES))))
	    (DOLIST (RESOURCE '(NETI:STREAM-TIMERS DELAYED-PRIORITY-TIMERS
				FORM-TIMEOUT-TIMERS SYSTEM-TIMERS PROCESS-BLOCK-TIMERS))
	      (MAP-RESOURCE RESOURCE (LAMBDA (TIMER IGNORE IGNORE)
				       (PUSHNEW TIMER ALL-TIMERS)
				       (WHEN (TYPEP TIMER 'MONITOR)
					 (PUSHNEW (MONITOR-LOCK TIMER) ALL-TIMERS)
					 (LET ((OBJECT (MONITOR-OBJECT TIMER)))
					   (PUSHNEW OBJECT ALL-TIMERS)
					   (WHEN (TYPEP OBJECT 'DELAYED-PRIORITY)
					     (PUSHNEW (DELAYED-PRIORITY-TIMER OBJECT)
						      ALL-TIMERS)))))))
	    (MAP-RESOURCE 'WAIT-SLOTS (LAMBDA (WAITER IGNORE IGNORE)
					(PUSH WAITER ALL-WAITERS)))

	    ;; Construct list of "all" objects in scheduler working set
	    (SETQ ALL-OBJECTS
		  (DELETE-IF-NOT #'SI:REORDERABLE
		    `( ;; The various tables of processes
		       ,*RECENT-PROCESSES*
		       ,*CONTEMPORARY-PROCESSES*
		       ,*QUEUED-WAKEUPS-IMAGE*
		       ;; Scheduler queues
		       ,*RUNNABLE-PROCESSES*
		       ,@(COERCE *RUNNABLE-PROCESSES* 'LIST)
		       ;; Wait records
		       ,*WAITING-PROCESSES*
		       ,@(NREVERSE ALL-WAITERS)
		       ;; Processes
		       ,@(MAPCAN #'PROCESS-ELEMENTS (NREVERSE ALL-PROCESSES))
		       ;; Timers
		       ,*PENDING-TIMERS*
		       ,(SYMBOL-VALUE-IN-INSTANCE *PENDING-TIMERS* 'HINT)
		       ,@(NREVERSE ALL-TIMERS))))

	    ;; Build reorderings segregated by area
	    ;; The objects are in three areas, and that's hard to change, but we can't
	    ;; reorder SAFEGUARDED-OBJECTS-AREA so just do two areas
	    (SETQ SI:*REORDERINGS*
		  (LET ((SYS:DEFAULT-CONS-AREA SI:REORDERING-LIST-AREA))
		    (LIST* (SI:MAKE-REORDERING SI:NAME 'SCHEDULER-WSA
					       SI:AREA SYS:WORKING-STORAGE-AREA
					       SI:OBJECT-LIST (REMOVE-IF-NOT-IN-AREA
								SYS:WORKING-STORAGE-AREA
								ALL-OBJECTS))
			   (SI:MAKE-REORDERING SI:NAME 'SCHEDULER-PSA
					       SI:AREA SYS:PERMANENT-STORAGE-AREA
					       SI:OBJECT-LIST (REMOVE-IF-NOT-IN-AREA
								SYS:PERMANENT-STORAGE-AREA
								ALL-OBJECTS))
			   SI:*REORDERINGS*)))))))))
