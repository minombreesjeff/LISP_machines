;;; -*- Mode: LISP; Syntax: Common-lisp; Package: process; Base: 10; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Scheduler queues are doubly linked lists of processes.  A process can be on at most one
;; scheduler-queue at any given time.  A process contains a pointer to the scheduler-queue 
;; that it is on.  The link pointers for this queue are in the process structure itself.
;; The scheduler queue understands the representation of processes.  Processes understands
;; the representation of scheduler queues.

;; Scheduler queues are not intended to provide any new abstraction.  They are purely an
;; efficiency hack for the scheduler.  A process may be on any number of any other queues.

;; All calls to these functions must be with (null *preemption-enabled*)
;; All calls to these functions where queue is a queue on *runnable-processes* must be 
;; called with sequence breaks deferred.

(defun print-scheduler-queue (object stream depth)
  (ignore depth)
  (sys:printing-random-object (object stream)
    (format stream "SCHED-QUEUE: ~A ~D"
	    (scheduler-queue-name object)
	    (scheduler-queue-length object))))

(defstruct (scheduler-queue :named-array :conc-name
			    (:print-function print-scheduler-queue))
  (head nil)
   (tail nil)
   (length 0)
   (predicate #'process-priority-lessp)
   (name "")				;; For prettiness when printing
   (median nil))			;; Placeholder for now.

(defun scheduler-queue-insert-at-tail (q proc)
  (let ((previous (scheduler-queue-tail q)))
    (if previous
	(setf (process-next-process previous) proc)
	(setf (scheduler-queue-head q) proc))
    (setf (process-previous-process proc) previous)
    (setf (scheduler-queue-tail q) proc)
    (setf (process-next-process proc) nil))
  (setf (process-scheduler-queue proc) q)
  (incf (scheduler-queue-length q)))

(defun scheduler-queue-insert-at-head (q proc)
  (let ((next (scheduler-queue-head q)))
    (if next
	(setf (process-previous-process next) proc)
	(setf (scheduler-queue-tail q) proc))
    (setf (process-next-process proc) next)
    (setf (scheduler-queue-head q) proc)
    (setf (process-previous-process proc) nil))
  (setf (process-scheduler-queue proc) q)
  (incf (scheduler-queue-length q)))

;; Proc2 is assumed to be non-nil.  If it is nil you should be calling 
;; scheduler-queue-insert-at-tail.  If you don't know, you should probably be calling
;; scheduler-queue-insert.
;; You should probably be calling scheduler-queue-insert anyway.
(defun scheduler-queue-insert-before (q proc1 proc2)
  #+DEBUG-SCHEDULER-QUEUES
  (unless proc2
    (error "Tried to insert ~S on queue ~S before a null process." proc1 q))
  (let ((previous (process-previous-process proc2)))
    (if previous
	(setf (process-next-process previous) proc1)
	(setf (scheduler-queue-head q) proc1))
    (setf (process-previous-process proc1) previous)
    (setf (process-previous-process proc2) proc1)
    (setf (process-next-process proc1) proc2))
  (setf (process-scheduler-queue proc1) q)
  (incf (scheduler-queue-length q)))

;; Proc2 is assumed to be non-nil.  If it is nil you should be calling 
;; scheduler-queue-insert-at-head.  If you don't know, you should probably be calling
;; scheduler-queue-insert.
;; You should probably be calling scheduler-queue-insert anyway.
(defun scheduler-queue-insert-after (q proc1 proc2)
  #+DEBUG-SCHEDULER-QUEUES
  (unless proc2
    (ERROR "Tried to insert ~S on queue ~S before a null process." proc1 q))
  (let ((next (process-next-process proc2)))
    (if next
	(setf (process-previous-process next) proc1)
	(setf (scheduler-queue-tail q) proc1))
    (setf (process-next-process proc1) next)
    (setf (process-next-process proc2) proc1)
    (setf (process-previous-process proc1) proc2))
  (setf (process-scheduler-queue proc1) q)
  (incf (scheduler-queue-length q)))

;; We assume that scheduler-queues are short, so can use linear search.
;; A possible optimization is to keep the median of the queue around, and do one
;; test with the predicate to see if the linear search should go from the head back, or
;; the tail forwards.
;; But that all should wait until we meter (1) cost of insertion, (2) standard scheduler 
;; queue lengths (3) .... because we might have to completely rewrite these beasts.
;; Note that this optimization also reduces possible paging costs.
(defun scheduler-queue-insert (q proc)
  #+DEBUG-SCHEDULER-QUEUES
  (when (process-scheduler-queue proc)
    (ERROR "Cannot insert process ~S on queue ~S.  It is already on scheduler-queue ~S"
	    proc q (process-scheduler-queue proc)))
  (loop with pred = (scheduler-queue-predicate q)
	for p = (scheduler-queue-head q) then (process-next-process p)
	while p
	do (when (funcall pred proc p)
	     (scheduler-queue-insert-before q proc p)
	     (return (values)))
	finally (scheduler-queue-insert-at-tail q proc)))

#||
;; if we wanted to switch to searching from the back we'd write:
(defun scheduler-queue-insert (q proc)
  #+DEBUG-SCHEDULER-QUEUES
  (when (process-scheduler-queue proc)
    (ERROR "Cannot insert process ~S on queue ~S.  It is already on scheduler-queue ~S"
	   proc q (process-scheduler-queue proc)))
  (loop with pred = (scheduler-queue-predicate q)
	for p = (scheduler-queue-tail q) then (process-previous-process p)
	while p
	do (unless (funcall pred proc p)
	     (scheduler-queue-insert-after q proc p)
	     (return (values)))
	finally (scheduler-queue-insert-at-head q proc)))
||#

(defun scheduler-queue-insert-high (q proc)
  #+DEBUG-SCHEDULER-QUEUES
  (when (process-scheduler-queue proc)
    (error "Cannot insert process ~S on queue ~S.  It is already on scheduler-queue ~S"
	   proc q (process-scheduler-queue proc)))
  (loop with pred = (scheduler-queue-predicate q)
	for p = (scheduler-queue-tail q) then (process-previous-process p)
	while p
	do (when (funcall pred p proc)
	     (scheduler-queue-insert-after q proc p)
	     (return (values)))
	finally (scheduler-queue-insert-at-head q proc)))

(defun scheduler-queue-delete (q proc)
  #+DEBUG-SCHEDULER-QUEUES
  (unless (eq (process-scheduler-queue proc) q)
    (error "Cannot delete process ~S from scheduler queue ~S; it is ~:[on queue ~S~;not on any queue~]."
	    proc q (process-scheduler-queue proc)))
  (let ((prev (process-previous-process proc))
	(next (process-next-process proc)))
    (if prev
	(setf (process-next-process prev) next)
	(setf (scheduler-queue-head q) next))
    (if next
	(setf (process-previous-process next) prev)
	(setf (scheduler-queue-tail q) prev)))
  (setf (process-scheduler-queue proc) nil)
  (decf (scheduler-queue-length q)))

(defun scheduler-queue-delete-and-return-head (q)
  (declare (values process))
  (let ((head (scheduler-queue-head q)))
    (when head
      (setf (process-scheduler-queue head) nil)
      (let ((next (process-next-process head)))
	(setf (scheduler-queue-head q) next)
	(if next
	    (setf (process-previous-process next) nil)
	    (setf (scheduler-queue-tail q) nil)))
      (setf (process-scheduler-queue head) nil))
    (decf (scheduler-queue-length q))
    head))

(DEFsubst scheduler-queue-empty? (q)
  (null (scheduler-queue-head q)))

