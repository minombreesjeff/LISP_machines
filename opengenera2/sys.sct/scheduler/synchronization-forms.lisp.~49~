;;; -*- Syntax: Common-lisp; Package: process; Base: 10; Mode: LISP; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFMACRO WITH-SCHEDULER-LOCKED-1 (&BODY BODY)
  `(LET ((OLD-PREEMPTION *PREEMPTION-ENABLED*))
     (UNWIND-PROTECT
	 (UNWIND-PROTECT
	     (PROGN
	       ;; Don't need to synchronize with sequence-break between the let and the
	       ;; setq, since we don't have to worry about *preemption-enabled* changing 
	       ;; out from underneath us.  If it was nil, then clearly one of our callers
	       ;; must have been the function that disabled preemption, since we are running
	       ;; now.  Therefore, nothing can preempt us.
	       ;; If *preemption-enabled* was 't, and then was changed to nil, it was changed by 
	       ;; another process, and therefore we should not be allowed to continue until
	       ;; *preemption-enabled* is changed back to 't.
	       (SETQ *PREEMPTION-ENABLED* NIL)
	       ,@BODY)
	   (WHEN OLD-PREEMPTION
	     ;; if this got changed inside the body, we could lose *very badly*
	     (SETQ *PREEMPTION-ENABLED* NIL)
	     (PREEMPTION-BEING-REENABLED)))
       (SETQ *PREEMPTION-ENABLED* OLD-PREEMPTION))))

(DEFMACRO WITH-SCHEDULER-LOCKED-2 (CONDITION &BODY BODY)
  `(LET* ((OLD-PREEMPTION *PREEMPTION-ENABLED*)
	  (NEW-PREEMPTION (AND (NOT ,CONDITION) OLD-PREEMPTION)))
     (UNWIND-PROTECT
	 (UNWIND-PROTECT
	     (PROGN
	       ;; Don't need to synchronize with sequence-break between the let and the
	       ;; setq, since we don't have to worry about *preemption-enabled* changing 
	       ;; out from underneath us.  If it was nil, then clearly one of our callers
	       ;; must have been the function that disabled preemption, since we are running
	       ;; now.  Therefore, nothing can preempt us.
	       ;; If *preemption-enabled* was 't, and then was changed to nil, it was changed
	       ;; by another process, and therefore we should not be allowed to continue until
	       ;; *preemption-enabled* is changed back to 't.
	       (SETQ *PREEMPTION-ENABLED* NEW-PREEMPTION)
	       ,@BODY)
	   (WHEN (AND OLD-PREEMPTION (NOT NEW-PREEMPTION))
	     ;; if this got changed inside the body, we could lose *very badly*
	     (SETQ *PREEMPTION-ENABLED* NIL)
	     (PREEMPTION-BEING-REENABLED)))
       (SETQ *PREEMPTION-ENABLED* OLD-PREEMPTION))))

(DEFMACRO WITH-SCHEDULER-LOCKED (&BODY BODY)
  `(WITH-SCHEDULER-LOCKED-1
     (LET ((*DEBUG-IO* (IF (STRINGP *DEBUG-IO*)
			   ;; if we're already going to be using the CLS, then keep the
			   ;; more precise error message
			   *DEBUG-IO*
			   ;; Otherwise, the general message will have to do...
			   "The scheduler's data structures are locked")))
       ,@BODY)))

(DEFMACRO WITH-PREEMPTION-DISABLED (&BODY FORMS)
  `(WITH-SCHEDULER-LOCKED-1 ,@FORMS))

;;; Performs a sequence of operations while inhibiting preemption by the scheduler.
;;; This has no effect on other processors.
(DEFMACRO WITHOUT-PREEMPTION (&BODY FORMS)
  `(WITH-SCHEDULER-LOCKED-1 ,@FORMS))

(DEFMACRO WITH-NO-OTHER-PROCESSES (&BODY BODY)
  `(WITH-SCHEDULER-LOCKED-1 ,@BODY))

;;; Performs a sequence of operations while inhibiting preemption by the scheduler.
;;; This has no effect on other processors.
(DEFMACRO WITHOUT-PREEMPTION-IF (CONDITION &BODY FORMS)
  `(WITH-SCHEDULER-LOCKED-2 ,CONDITION ,@FORMS))

(DEFMACRO WITH-NO-OTHER-PROCESSES-IF (CONDITION &BODY BODY)
  `(WITH-SCHEDULER-LOCKED-2 ,CONDITION ,@BODY))

;; This is a stub for an interim version of WITH-NO-OTHER-PROCESSES that used a continuation.
;; It can be removed in Genera 8.
(DEFUN WITH-NO-OTHER-PROCESSES-INTERNAL (CONTINUATION)
  (DECLARE (SYS:DOWNWARD-FUNARG CONTINUATION))  
  (WITHOUT-PREEMPTION
    (FUNCALL CONTINUATION)))

;;; Performs a sequence of operations while inhibiting scheduling
(DEFMACRO SI:WITHOUT-INTERRUPTS (&BODY FORMS)
  ;; Don't bother to re-bind this if you are already without interrupts.
  ;; (This is important for VLM GC because storage is littered with
  ;; calls to this which are superfluous, but explode on the VLM if the
  ;; binding stack has not yet been scavenged!)
  `(LET-IF (NOT SYS:INHIBIT-SCHEDULING-FLAG) ((SYS:INHIBIT-SCHEDULING-FLAG T))
     ,@FORMS))

;;(COMPILER:MAKE-OBSOLETE SI:WITHOUT-INTERRUPTS "Read the documentation or use PROCESS:WITH-NO-OTHER-PROCESSES.")

(DEFMACRO SI:WITHOUT-INTERRUPTS-IF (CONDITION &BODY FORMS)
  `(LET-IF (AND ,CONDITION (NOT SYS:INHIBIT-SCHEDULING-FLAG)) ((SYS:INHIBIT-SCHEDULING-FLAG T))
     ,@FORMS))

;;(COMPILER:MAKE-OBSOLETE SI:WITHOUT-INTERRUPTS-IF "Read the documentation or use PROCESS:WITH-NO-OTHER-PROCESSES.")
