;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Compatibility for old messages, that SI:PROCESS used to understand.

(defmethod ((cl:setf si:process-quantum) process) (new-quantum)
  (setf base-quantum new-quantum)
  (setf quantum new-quantum))

(defmethod (si:set-quantum-internal process) (new-quantum)
  (setf quantum new-quantum))

;;;

(defun process-priority-to-old-priority (process-priority)
  (let ((new-pri-class (scheduler-priority-class process-priority)))
    (if (or (eql new-pri-class *process-priority-class-foreground*)
	    (eql new-pri-class *process-priority-class-interactive*))
	(back-convert-foreground-priority
	  (scheduler-priority-priority process-priority))
	(if (eql new-pri-class *process-priority-class-deadline*)
	    120.
	    -256.))))

(defun si:process-priority (process)
  (process-priority-to-old-priority (process-process-priority process)))

(defun si:process-base-priority (process)
  (process-priority-to-old-priority (process-base-process-priority process)))

(defmethod ((cl:setf si:process-priority) process) (new-priority)
  (when (integerp new-priority)
    (setq new-priority (floor (max (min 120. new-priority) -256.))))
  (let ((new-style-priority (if (integerp new-priority)
				(make-process-priority :foreground new-priority)
				(make-process-priority :background t))))
    (set-process-base-priority self new-style-priority)
    (set-process-priority self new-style-priority)))

(defmethod (si:set-priority-internal process) (new-priority)
  (check-type new-priority (or boolean integer))
  (set-process-priority self (if (numberp new-priority)
				 (progn
				   (setq new-priority (floor (max (min 120. new-priority) -256.)))
				   (make-process-priority :foreground new-priority))
				 new-priority)))

;;;

(defun si:set-process-wait (proc fun args)
  (let ((old-ints (or si:inhibit-scheduling-flag (not *preemption-enabled*))))
    (with-scheduler-locked
      (cond ((process-simple-p proc)
	     (apply #'set-simple-process-predicate-function proc
		    #'verify-function fun args)
	     (poll-simple-process proc *process-wait-interval*))
	    ((eq proc *current-process*)
	     (if old-ints
		 (progn
		   (setf (process-verify-function proc) #'verify-function)
		   (setf (process-verify-function-args proc) (cons fun args)))
		 (apply #'si:process-wait (process-whostate proc) fun args)))
	    ;; heuristicate....
	    ;; this is probably what we want.
	    ((apply fun args)
	     (process-force-wakeup proc))
	    (t
	     (setf (process-verify-function proc) #'verify-function)
	     (setf (process-verify-function-args proc) (cons fun args))
	     (when (process-runnable-p proc)
	       (apply #'process-interrupt proc
		      #'si:process-wait (process-whostate proc) fun (copy-list args))))))))

(defmethod (si:process-preset process) (function &rest args)
  (if (and (variable-boundp si:initial-form)
	   (consp si:initial-form)
	   (eql (car si:initial-form) 'top-level-for-old-simple-process))
      (with-scheduler-locked
	(si:set-process-wait self #'true nil)
	(apply #'process-preset self 'top-level-for-old-simple-process function args))
      (apply #'process-preset self function args)))

(defmethod (si:process-initial-form simple-process) ()
  (if (and (consp si:initial-form)
	   (eql (car si:initial-form) 'top-level-for-old-simple-process))
      (cdr si:initial-form)
      initial-form))

(defmethod (si:process-initial-form process) ()
  initial-form)

(defmethod (si:process-reset process) (&optional unwind-option kill (without-aborts :ask))
  "UNWIND-OPTION: T, never unwind; :UNLESS-CURRENT or NIL, unwinds the stack unless
the stack group is either in the current process or is the current stack group;
:ALWAYS, always unwinds the stack.  KILL is T to kill the process after optionally
unwinding it.  WITHOUT-ABORTS says what to do if the process is not currently
abortable: :ASK (the default) means consult the user, :FORCE means reset it anyway,
NIL means to return a list of the reasons why it cannot be aborted."
  (when kill
    (setf (ldb process-debug-kill-process-on-reset debug-flag) 1))
  (if (and (variable-boundp si:initial-form)
	   (consp si:initial-form)
	   (eql (car si:initial-form) 'top-level-for-old-simple-process))
      (with-scheduler-locked
	(si:set-process-wait self #'true nil)
	(process-reset self unwind-option kill without-aborts))
      (process-reset self unwind-option kill without-aborts)))

;;;

;; these really should be using the activity system. They will, when I finish the design
;; and get it reviewed, if it's OKed.

;; notice that this is not EQ to SI:*PROCESS-INTERACTIVE-PRIORITY*, which is expressed in 
;; old scheduler priorities.
(defvar *process-interactive-priority* (make-process-priority :foreground 1 :preemptive t))

(defun si:with-process-interactive-priority-internal
       (process continuation &key (quantum-boost si:*process-command-initial-quantum*))
  (declare (sys:downward-funarg continuation)
	   (dbg:invisible-frame :process-priority))
  ;; maybe I should do the same thing that non-interactive-priority, and similar to the old
  ;; scheduler, by keeping the priority boosted for some time.
  ;; But I think this is a mistake - if you go into a tight loop, with a period shorter than
  ;; whatever decay we put on here, then you'll monopolize the machine.  So I think it would
  ;; be wrong.  Sorry, RWK.
  quantum-boost
  (with-process-priority
    (if (scheduler-priority-lessp (process-process-priority process)
				  *process-interactive-priority*)
	't
	*process-interactive-priority*)
    (funcall continuation)))

(defun si:with-process-non-interactive-priority-internal
       (process continuation &key (quantum-boost si:*process-command-initial-quantum*))
  (declare (sys:downward-funarg continuation)
	   (dbg:invisible-frame :process-priority))
  (if quantum-boost
      (with-process-priorities (t (/ quantum-boost 60s0) (process-base-process-priority process))
	(funcall continuation))
      (with-process-priority (process-base-process-priority process)
	(funcall continuation))))

;;;

(defun si:process-wait (whostate function &rest arguments)
  (declare (sys:downward-funarg function))
  (apply #'process-wait whostate #'verify-function function arguments))

(defun si:process-wait-with-timeout (whostate time function &rest args)
  (declare (sys:downward-funarg function))
  (apply #'process-wait-with-timeout whostate (and time (/ time 60s0))
	 #'verify-function function args))

;; Takes one argument, a number of 60ths of a second for which to sleep.
(defun si:process-sleep (interval &optional (whostate "Sleep"))
  (cl:sleep (/ interval 60s0) :sleep-reason whostate))

(defun si:process-blast (&optional (process *current-process*))
  (process-flush process))

(defun si:process-allow-schedule ()
  (process-allow-preemption))

;;;

(defun si:make-process (name &rest init-args &key
			initial-form wait-function wait-argument-list run-reasons
			(priority 0) simple-p flavor
			(warm-boot-action 'si:process-warm-boot-delayed-restart)
			&allow-other-keys)
  (setq priority (floor (max (min 120. priority) -256.)))
  (let* ((process-is-simple (or simple-p
				(and flavor (subtypep flavor 'process::simple-process))))
	 (process
	   (apply #'make-process (string name)
		  :priority (make-process-priority :foreground priority)
		  :initial-function (if process-is-simple
					'top-level-for-old-simple-process
					(car initial-form))
		  :initial-function-arguments (if process-is-simple
						  initial-form
						  (cdr initial-form))
		  :run-reasons nil
		  :warm-boot-action warm-boot-action
		  init-args)))
    (when (process-simple-p process)
      (apply #'set-simple-process-predicate-function process
	     #'verify-function wait-function wait-argument-list)
      (poll-simple-process process *process-wait-interval*))
    (when initial-form
      (dolist (r run-reasons)
	(process-enable-run-reason process r)))
    process))

;;; This supplies the old-style semantics for simple-processes
(defun top-level-for-old-simple-process (function &rest arguments)
  (let ((process *current-process*))
    (if (process-simple-p process)
	(with-no-other-processes (apply function arguments))
	(apply function arguments))))

(defun si:process-warm-boot-restart (process)
  (with-scheduler-locked
    (si:set-process-wait process #'true nil)
    ;; call PROCESS: version rather than copying it inline, so if definition ever changes
    ;; we are covered.
    (process:process-warm-boot-restart process)))

(defun si:process-warm-boot-delayed-restart (process)
  (with-scheduler-locked
    (si:set-process-wait process #'true nil)
    (process:process-warm-boot-delayed-restart process)))

;;; Run a function in its own process
(defun si:process-run-function (name-or-kwds function &rest args)
  "Run a function in its own process.  The process is reused if the machine is warm booted
or if the process is reset."
  (if (listp name-or-kwds)
      (apply #'process-run-function-1 function args name-or-kwds)
      (process-run-function-1 function args :name name-or-kwds)))

(defun si:process-run-restartable-function (name-or-kwds function &rest args)
  "Run a function in its own process.  The process is reset and restarted when the machine
is warm booted, and restarted when the process is reset."
  (if (listp name-or-kwds)
      (apply #'process-run-function-1 function args
	     :restart-after-boot t :restart-after-reset t name-or-kwds)
      (process-run-function-1 function args :name name-or-kwds
			      :restart-after-boot t :restart-after-reset t)))

(defun process-run-function-1 (function args &key
			       (name "Anonymous") (priority 0) (quantum si:default-quantum)
			       (restart-after-boot nil)
			       (restart-after-reset restart-after-boot)
			       (warm-boot-action (if restart-after-boot
						     'process-warm-boot-delayed-restart
						     'process-warm-boot-reset))
			       system-process)
  (setq priority (floor (max (min 120. priority) -256.)))
  (let ((process
	  (make-process name :system-process system-process :run-reasons nil
			:priority (make-process-priority :foreground priority) :quantum quantum
			:initial-function function :initial-function-arguments (copy-list args)
			:warm-boot-action (case warm-boot-action
					    ((:flush) 'process-flush)
					    (otherwise warm-boot-action)))))
    (setf (ldb-test %%process-debug-not-restartable (process-debug-flag process))
	  (not restart-after-reset))
    (enable process)
    process))



(defmethod (:priority process) ()
  (si:process-priority self))

(defmethod (:base-priority process) ()
  (si:process-base-priority self))

(defmethod (:preset process) (function &rest args)
  (cl:apply #'si:process-preset self function args))

(defmethod (:initial-form process) ()
  (si:process-initial-form self))

(defmethod (:reset process) (&optional unwind-option kill (without-aborts :ask))
  (si:process-reset self unwind-option kill without-aborts))

(defmethod (:interrupt process) (function &rest args)
  (cl:apply #'si:process-interrupt self function args))

(defmethod (:flush process) ()
  (si:process-flush self))

(defmethod (:active-p process) ()
  (si:process-active-p self))

(defmethod (:runnable-p process) ()
  (si:process-active-p self))

(defmethod (:run-reason process) (&optional (reason :user))
  (si:process-enable-run-reason self reason))

(defmethod (:revoke-run-reason process) (&optional (reason :user))
  (si:process-disable-run-reason self reason))

(defmethod (:arrest-reason process) (&optional (reason :user))
  (si:process-enable-arrest-reason self reason))

(defmethod (:revoke-arrest-reason process) (&optional (reason :user))
  (si:process-disable-arrest-reason self reason))

(defmethod (:kill process) (&optional (without-aborts :ask))
  (si:process-kill self without-aborts))

(defmethod (:set-priority process) (new-priority)
  (setf (si:process-priority self) new-priority))

(defmethod (:set-quantum process) (new-quantum)
  (setf (si:process-quantum self) new-quantum))

;;;

(defmethod (:coroutine-stack-groups process) () nil)

(defmethod (:add-coroutine-stack-group coroutining-process) (coroutine-stack-group)
  (pushnew coroutine-stack-group si:coroutine-stack-groups))

;;;

(compiler:make-obsolete si:*default-sequence-break-interval*
			"This parameter is now ignored." defvar)
(defparameter si:*default-sequence-break-interval* 100000.	;100 msec
  "Microseconds between clock sequence breaks.")

(compiler:make-obsolete si:sequence-break-interval "This variable is now ignored." defvar)
(defvar si:sequence-break-interval si:*default-sequence-break-interval*)

(compiler:make-obsolete si:sb-on "This function is now ignored." defun)
(defun si:sb-on (&optional when)
  "Sets the sequence break enable flags:
	The argument can be a keyword or a list of keywords.
	Keywords are: :CLOCK, :DISK, :KEYBOARD, :MOUSE, and :ETHERNET
	With no argument, just returns a list of keywords for what is enabled.
	Argument of NIL means turn off sequence breaks."
  when
  '(:keyboard :ethernet :mouse :clock :disk))
