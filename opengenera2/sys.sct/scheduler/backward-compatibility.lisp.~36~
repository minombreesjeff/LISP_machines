;; -*- Mode: LISP; Syntax: Zetalisp; Package: SYSTEM-INTERNALS; Base: 10; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Metering stuff

(DEFMETHOD (:RESET-METERS PROCESS) ()
  (SETQ LAST-TIME-RUN NIL PAGE-FAULT-COUNT 0 PERCENT-UTILIZATION 0)
  (RESET-PROCESS-TIME-METER TOTAL-RUN-TIME)
  (RESET-PROCESS-TIME-METER DISK-WAIT-TIME)
  (SETQ PROCESS-USECOND-TIME-1 0
	PROCESS-USECOND-TIME-2 0)
  (UNLESS (EQL SELF PROCESS::%REAL-CURRENT-PROCESS)
    (SETQ MICROSECOND-TIME-SCHEDULED NIL
	  PROCESS::RUNNABLE-START-TIME 0))
  (SETQ PROCESS::TIME-RUNNABLE 0)
  (PROCESS::RESET-SCHEDULER-INFO SELF))

;Idle time in seconds, or NIL if forever
(DEFMETHOD (:IDLE-TIME PROCESS) ()
  (COND ((EQ SELF CURRENT-PROCESS) 0)
	((NULL LAST-TIME-RUN) NIL)
	(T (// (TIME-DIFFERENCE (TIME) LAST-TIME-RUN) 60.))))

(DEFMETHOD (SI:PROCESS-TOTAL-RUN-TIME PROCESS) ()
  (ASH (PROCESS-MICROSECOND-TIME SELF) -10))

(DEFMETHOD (:TOTAL-RUN-TIME PROCESS) ()
  (ASH (PROCESS-MICROSECOND-TIME SELF) -10))

(DEFMETHOD (:DISK-WAIT-TIME PROCESS) ()
  (FIXNUM-PROCESS-TIME-METER DISK-WAIT-TIME))

(DEFMETHOD (SI:PROCESS-CPU-TIME PROCESS) ()
  (- (SEND SELF :TOTAL-RUN-TIME) (FIXNUM-PROCESS-TIME-METER DISK-WAIT-TIME)))

(DEFMETHOD (:CPU-TIME PROCESS) ()
  (- (SEND SELF :TOTAL-RUN-TIME) (FIXNUM-PROCESS-TIME-METER DISK-WAIT-TIME)))

(DEFMETHOD (PROCESS-MICROSECOND-TIME PROCESS) ()
  (PROCESS:WITHOUT-PREEMPTION
    (+ (GET-VALUE-FROM-DOUBLE-INTEGER PROCESS-USECOND-TIME-1 PROCESS-USECOND-TIME-2)
       (IF (EQ SELF *CURRENT-PROCESS*)
	   (TIME-DIFFERENCE (SI:FIXNUM-MICROSECOND-TIME-FOR-SCHEDULER) 
			    MICROSECOND-TIME-SCHEDULED)
	   0))))

;This is the 300th root of 1/2, thus the halflife is 5 seconds
(DEFCONST PERCENT-UTILIZATION-DISCOUNT-FACTOR 0.9976921764712053s0)

(DEFMETHOD (:PERCENT-UTILIZATION PROCESS) ()
  (PROCESS::PERCENT-UTILIZATION SELF)
  ;; we keep the old definition for documentation purposes, and in case anyone wants to 
  ;; plug in a scheduler that does this kind of record keeping.
  #+ignore
  (IF (NULL LAST-TIME-RUN) 0
    (WITHOUT-FLOATING-UNDERFLOW-TRAPS
      (LET* ((TIME-DIFFERENCE (TIME-DIFFERENCE (TIME) LAST-TIME-RUN))
	     (UTILIZATION (* PERCENT-UTILIZATION
			    (^ PERCENT-UTILIZATION-DISCOUNT-FACTOR TIME-DIFFERENCE))))
	(WHEN (EQ SELF *CURRENT-PROCESS*)
	  ;; This process has been running since its quantum started
	  (INCF UTILIZATION (// (+ (TIME-DIFFERENCE (SI:FIXNUM-MICROSECOND-TIME-FOR-SCHEDULER) 
						    MICROSECOND-TIME-SCHEDULED)
				   500.)
				1000.)))
	 (// UTILIZATION
	     ;; The following number is the value reached when the process uses
	     ;; 100% of the machine for many times the halflife of five seconds,
	     ;; sum(PERCENT-UTILIZATION-DISCOUNT-FACTOR^i,i,0,) multiplied by the
	     ;; conversion from ticks to milliseconds and divided by 100 so we get
	     ;; a percent rather than a fraction.  This is accurate if
	     ;; SEQUENCE-BREAK-INTERVAL is small enough to minimize the error from
	     ;; updating PERCENT-UTILIZATION at that interval instead of every 60th
	     ;; of a second.
	     (* (// 1000.0 60. 100.)
		(// 1 (- 1 PERCENT-UTILIZATION-DISCOUNT-FACTOR))))))))



;; A lock may be any cell.  When a lock is in the unlocked state, the cell
;; contains NIL; otherwise the cell contains the process which locked the lock.
;; A lock is referred to by a locative pointer to the cell.

;; Lock the given lock, blocking until it is sucessfully locked.
(DEFUN PROCESS-LOCK (LOCATIVE-POINTER
		     &OPTIONAL LOCK-VALUE (WHOSTATE "Lock") INTERLOCK-FUNCTION)
  (DECLARE (SYS:DOWNWARD-FUNARG INTERLOCK-FUNCTION)
	   (DBG:LOCKING-FUNCTION DESCRIBE-LOCATIVE-LOCK-FOR-DEBUGGER LOCATIVE-POINTER))
  (UNLESS LOCK-VALUE (SETQ LOCK-VALUE (OR CURRENT-PROCESS T)))
  (WHEN (EQ (CDR LOCATIVE-POINTER) LOCK-VALUE)
    (FERROR "Lock ~S already locked by this process" LOCATIVE-POINTER))
  (LOOP DO
    (WITHOUT-INTERRUPTS
      (WHEN (STORE-CONDITIONAL LOCATIVE-POINTER NIL LOCK-VALUE)
	(WHEN INTERLOCK-FUNCTION
	  (IF (LOCATIVEP INTERLOCK-FUNCTION)
	      (SETF (LOCATION-CONTENTS INTERLOCK-FUNCTION) T)
	      (FUNCALL INTERLOCK-FUNCTION)))
	(RETURN T)))
    (PROCESS-WAIT WHOSTATE #'(LAMBDA ()
			       (NULL (LOCATION-CONTENTS LOCATIVE-POINTER))))))

(DEFUN DESCRIBE-LOCATIVE-LOCK-FOR-DEBUGGER (LOCATIVE)
  (LET ((PROCESS (AND (LOCATIVEP LOCATIVE)
		      (LOCATION-CONTENTS LOCATIVE))))
    (WHEN PROCESS
      (FORMAT T "~& You are waiting for a lock")
      (MULTIPLE-VALUE-BIND (OBJECT NIL SLOT-NAME)
	  (DBG:DECODE-LOCATIVE-FOR-PRINTING LOCATIVE)
	(IF SLOT-NAME
	    (FORMAT T " on the ~S slot of ~S" SLOT-NAME OBJECT)
	  (FORMAT T " on ~S" OBJECT)))
      (FORMAT T " currently held by process ~S" PROCESS))))

;; Unlock the given lock.  The unlocker must be the same as the locker.
(DEFUN PROCESS-UNLOCK (LOCATIVE-POINTER &OPTIONAL LOCK-VALUE (ERROR-P T))
  (UNLESS LOCK-VALUE (SETQ LOCK-VALUE (OR CURRENT-PROCESS T)))
  (UNLESS (STORE-CONDITIONAL LOCATIVE-POINTER LOCK-VALUE NIL)
    (WHEN ERROR-P
      (FERROR "Attempt to unlock ~S, which you don't have locked" LOCATIVE-POINTER))))

;; This tries to reorder the options to PARALLEL-MAPCAR into a convenient order.
(COMPILER:DEFOPTIMIZER (PARALLEL-MAPCAR FROB-PARALLEL-MAPCAR-OPTIONS) (FORM)
  (COMPILER:MATCHP FORM
    (('PARALLEL-MAPCAR ('QUOTE OPTIONS) FUNCTION LIST)
     (OR (AND (EVENP (LENGTH OPTIONS))
	      (NEQ (CAR OPTIONS) :WHOSTATE)
	      (LOOP WITH WHOSTATE = NIL
		    FOR (KEYWORD VALUE) ON OPTIONS BY #'CDDR
		    WHEN (EQ KEYWORD :WHOSTATE)
		      DO (IF WHOSTATE (RETURN NIL) (SETQ WHOSTATE VALUE))
		    FINALLY
		      (WHEN WHOSTATE
			(SETQ OPTIONS (COPYLIST OPTIONS))
			(CL:REMF OPTIONS :WHOSTATE)
			(RETURN `(PARALLEL-MAPCAR '(:WHOSTATE ,WHOSTATE . ,OPTIONS)
						  ,FUNCTION ,LIST)))))
	 FORM))
    (* FORM)))

;; OPTIONS is a string which is interpreted as a whostate, or a plist acceptable
;; to PROCESS-RUN-FUNCTION.  In addition, the plist may contain the property :WHOSTATE.
(DEFUN PARALLEL-MAPCAR (OPTIONS FUNCTION LIST &AUX WHOSTATE (LENGTH (LENGTH LIST)))
  (DECLARE (DOWNWARD-FUNARG FUNCTION)) ;!
  (IF (= LENGTH 1)
      (LIST (FUNCALL FUNCTION (CAR LIST)))
    (COND ((ATOM OPTIONS)
	   (SETQ WHOSTATE (OR OPTIONS "Fork") OPTIONS NIL))
	  ((EQ (CAR OPTIONS) :WHOSTATE)
	   (SETQ OPTIONS (CDR OPTIONS))
	   (SETQ WHOSTATE (POP OPTIONS)))
	  ((SETQ WHOSTATE (GETF OPTIONS :WHOSTATE))
	   (SETQ OPTIONS (COPYLIST OPTIONS))
	   (CL:REMF OPTIONS :WHOSTATE))
	  (T (SETQ WHOSTATE "Fork")))
    (WITH-STACK-LIST* (OPTIONS-WITH-NAME :NAME "Parallel MAPCAR" OPTIONS)
      (UNLESS (GETF OPTIONS :NAME)
	(SETQ OPTIONS OPTIONS-WITH-NAME))
      (LET ((PROCESS-LIST (MAKE-LIST LENGTH))
	    (RESULT-LIST (MAKE-LIST LENGTH))
	    (ABORT T))
	(LABELS ((MAPPING-FUNCTION (RESULT-LOC PROCESS-LOC FUNCTION OBJECT)
		   (UNWIND-PROTECT
		       (SETF (CAR RESULT-LOC) (FUNCALL FUNCTION OBJECT))
		     (SETF (CAR PROCESS-LOC) NIL)))
		 (WAIT-FUNCTION (PROCESS-LIST)
		   (DO ((L PROCESS-LIST (CDR L)))
		       ((NULL L) T)
		     (COMPILER:%ERROR-WHEN (CAR L) (RETURN NIL)))))
	  (UNWIND-PROTECT
	      (PROGN (LOOP FOR OBJECT IN LIST
			   FOR RESULT-LOC ON RESULT-LIST
			   FOR PROCESS-LOC ON PROCESS-LIST
			   DO (WITHOUT-INTERRUPTS
				(SETF (CAR PROCESS-LOC)
				      (PROCESS-RUN-FUNCTION
					(OR OPTIONS "Parallel MAPCAR")
					#'MAPPING-FUNCTION
					RESULT-LOC PROCESS-LOC FUNCTION OBJECT))))
		     (PROCESS-WAIT WHOSTATE #'WAIT-FUNCTION PROCESS-LIST)
		     (PROG1 RESULT-LIST (SETQ ABORT NIL)))
	    ;; Have to kill off all processes before we release the downward funarg.
	    (WHEN ABORT
	      (DO ((L PROCESS-LIST (CDR L)) P)
		  ((NULL L))
		(WHEN (SETQ P (CAR L))
		  (SEND P :KILL)))
	      (PROCESS-WAIT "Kill Parallel MAPCAR" #'WAIT-FUNCTION PROCESS-LIST))))))))



;; QUEUE is empty if @CURRENT-POINTER is NIL
;; QUEUE is full if (EQ INSERT-POINTER CURRENT-POINTER)

(DEFSTRUCT (PROCESS-QUEUE :NAMED :ARRAY-LEADER :CONC-NAME
			  (:PRINT "#<PROCESS-QUEUE ~A:~A>"
			   (PROCESS-QUEUE-NAME PROCESS-QUEUE)
			   (PROCESS-QUEUE-STATUS PROCESS-QUEUE))
			  (:CONSTRUCTOR CREATE-PROCESS-QUEUE))
  NAME
  INSERT-POINTER
  CURRENT-POINTER)

(DEFUN PROCESS-QUEUE-STATUS (QUEUE)
  (LET ((INSERT (PROCESS-QUEUE-INSERT-POINTER QUEUE))
	(CURRENT (PROCESS-QUEUE-CURRENT-POINTER QUEUE)))
    (IF (EQ INSERT CURRENT)
	(IF (NULL (AREF QUEUE INSERT))
	    "Empty"
	    "Full")
	(LET ((N (- INSERT CURRENT)))
	  (WHEN (MINUSP N)
	    (SETQ N (+ N (ARRAY-LENGTH QUEUE))))
	  (FORMAT NIL "~D entr~@P" N N)))))

(DEFUN MAKE-PROCESS-QUEUE (NAME SIZE)
  (CREATE-PROCESS-QUEUE :MAKE-ARRAY (:LENGTH SIZE)
			NAME NAME
			INSERT-POINTER 0 CURRENT-POINTER 0))

(DEFUN PROCESS-ENQUEUE (QUEUE &OPTIONAL QUEUE-VALUE (WHOSTATE "Lock"))
  (DECLARE (DBG:LOCKING-FUNCTION DESCRIBE-QUEUED-LOCK-FOR-DEBUGGER QUEUE))
  (UNLESS QUEUE-VALUE
    (SETQ QUEUE-VALUE CURRENT-PROCESS))
  (WHEN (HAVE-QUEUE-LOCK QUEUE QUEUE-VALUE)
    (FERROR "~S is already locked by this process" QUEUE))
  ;; Try and lock or enqueue us, 
  (LOOP FOR INHIBIT-SCHEDULING-FLAG = T
	FOR QUEUE-LENGTH = (ARRAY-LENGTH QUEUE)
	AND CURRENT-POINTER = (PROCESS-QUEUE-CURRENT-POINTER QUEUE)
	;; Lock if queue is empty
	WHEN (NULL (AREF QUEUE CURRENT-POINTER))
	DO (ASET QUEUE-VALUE QUEUE CURRENT-POINTER)
	   (SETF (PROCESS-QUEUE-INSERT-POINTER QUEUE)
		 (\ (1+ CURRENT-POINTER) QUEUE-LENGTH))
	   (RETURN)
	FOR INSERT-POINTER = (PROCESS-QUEUE-INSERT-POINTER QUEUE)
	;; If queue is not full, then enqueue us
	WHEN (NEQ INSERT-POINTER CURRENT-POINTER)
	DO (ASET QUEUE-VALUE QUEUE INSERT-POINTER)
	   (SETF (PROCESS-QUEUE-INSERT-POINTER QUEUE)
		 (\ (1+ INSERT-POINTER) QUEUE-LENGTH))
	   (LET ((ABORTED T))
	     (UNWIND-PROTECT
	       (PROGN
		 
		 (PROCESS-WAIT WHOSTATE
			       #'(LAMBDA (QUEUE QUEUE-VALUE)
				   (HAVE-QUEUE-LOCK QUEUE QUEUE-VALUE))
			       QUEUE QUEUE-VALUE)
		 (SETQ ABORTED NIL))
	       (WHEN ABORTED
		 (WITHOUT-INTERRUPTS
		   (COND ((HAVE-QUEUE-LOCK QUEUE QUEUE-VALUE)
			  (PROCESS-DEQUEUE QUEUE QUEUE-VALUE))
			 (T (ASET NIL QUEUE INSERT-POINTER))))))
	     (RETURN))
	DO (PROCESS-WAIT WHOSTATE
			 #'(LAMBDA (QUEUE)
			     (LET ((CURRENT (PROCESS-QUEUE-CURRENT-POINTER QUEUE)))
			       (OR (NULL (AREF QUEUE CURRENT))
				   (NEQ CURRENT (PROCESS-QUEUE-INSERT-POINTER QUEUE)))))
			 QUEUE))
  NIL)

(DEFUN DESCRIBE-QUEUED-LOCK-FOR-DEBUGGER (QUEUE)
  (WHEN (TYPEP QUEUE 'SI:PROCESS-QUEUE)
    (LET* ((IP (SI:PROCESS-QUEUE-INSERT-POINTER QUEUE))
	   (CP (SI:PROCESS-QUEUE-CURRENT-POINTER QUEUE))
	   (PROCESS (AREF QUEUE CP)))
      (WHEN ( IP CP)
	(FORMAT T "~& You are waiting for a lock in the queue ~S ~
		      which is currently held by process ~S"
	  QUEUE PROCESS)))))

(DEFUN PROCESS-DEQUEUE (QUEUE &OPTIONAL QUEUE-VALUE (ERROR-P T))
  (UNLESS QUEUE-VALUE
    (SETQ QUEUE-VALUE CURRENT-PROCESS))
  (COND ((HAVE-QUEUE-LOCK QUEUE QUEUE-VALUE)
	 (WITHOUT-INTERRUPTS
	   (LET ((CURRENT (PROCESS-QUEUE-CURRENT-POINTER QUEUE)))
	     (ASET NIL QUEUE CURRENT)
	     (LOOP WITH LENGTH = (ARRAY-LENGTH QUEUE)
		   AND INSERT = (PROCESS-QUEUE-INSERT-POINTER QUEUE)
		   FOR CURRENT = (\ (1+ CURRENT) LENGTH) 
			       THEN (\ (1+ CURRENT) LENGTH)
		   UNTIL (EQ CURRENT INSERT)
		   UNTIL (AREF QUEUE CURRENT)
		   FINALLY
		     (SETF (PROCESS-QUEUE-CURRENT-POINTER QUEUE) CURRENT)
		     (LET ((NEW-OWNER (AREF QUEUE CURRENT)))
		       (WHEN (AND NEW-OWNER (PROCESS:PROCESS-P NEW-OWNER))
			 (PROCESS:WAKEUP NEW-OWNER)))))))
	(ERROR-P
	 (FERROR "Attempt to dequeue from ~S, which you don't have locked"
		 QUEUE))))

(DEFUN PROCESS-QUEUE-LOCKER (QUEUE)
  (AREF QUEUE (PROCESS-QUEUE-CURRENT-POINTER QUEUE)))

(DEFUN RESET-PROCESS-QUEUE (QUEUE)
  (WITHOUT-INTERRUPTS
    (SETF (PROCESS-QUEUE-CURRENT-POINTER QUEUE) 0)
    (SETF (PROCESS-QUEUE-INSERT-POINTER QUEUE) 0)
    (SI:FILL-ARRAY QUEUE NIL NIL)))
