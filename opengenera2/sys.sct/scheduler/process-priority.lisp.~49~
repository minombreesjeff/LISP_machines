;;; -*- Mode: LISP; Package: PROCESS; Base: 10; Syntax: Common-lisp; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; We will play with these and see which are useful.

;; scheduler-priorities ("Instantaneous" priorities)
;; programmer-priorities ("process priority")
;; user-priorities ("activity priority")

;;;;

;;; scheduler-priority stuff.

(defun initialize-process-queues ()
  (loop for i from 0 below (length *runnable-processes*)
	do (setf (aref *runnable-processes* i) (make-scheduler-queue)))
  (setf *page-wait-queue* (make-scheduler-queue :name "Page Waiters")))

(defsubst process-priority-lessp (proc1 proc2)
  (scheduler-priority-lessp (process-priority proc1) (process-priority proc2)))

(defun find-highest-priority-preemptive-process ()
  (or (loop for class from 0 below number-of-process-classes
	    as head = (scheduler-queue-head (aref *runnable-processes* class))
	    when head
	      do
		(loop for p = head then (process-next-process p)
		      while p
		      when (or (eql p %real-current-process)
			       (not (zerop (ldb %%scheduler-priority-preemption-field
						(process-priority p)))))
			do (return-from find-highest-priority-preemptive-process p)))
      ;; it should never reach here except in the case where we have made the current
      ;; process unrunnable.
      *null-process*))

(defun count-runnable-processes ()
  (loop for class from 0 below number-of-process-classes
	    sum (scheduler-queue-length (aref *runnable-processes* class))))

(defun find-highest-priority-process ()
  (or (loop for class from 0 below number-of-process-classes
	    as head = (scheduler-queue-head (aref *runnable-processes* class))
	    when head do (return head)
	    finally (return nil))
      *null-process*))

;; Must be called with sequence-breaks deferred.
(defun insert-on-runnable-queue (process)
  (scheduler-queue-insert
    (aref *runnable-processes*
	  (scheduler-priority-class (process-priority process))) process))

(defun insert-high-on-runnable-queue (process)
  (scheduler-queue-insert-high
    (aref *runnable-processes*
	  (scheduler-priority-class (process-priority process))) process))

;; Must be called with sequence-breaks deferred.
(defun delete-from-runnable-queue (process)
  (when (process-scheduler-queue process)
    (scheduler-queue-delete (process-scheduler-queue process) process)))

;;;;

;; programmer/process-priority stuff.

;; need to define a lessp operation

;;;;

;;;;

(defun set-process-priority (process new-priority)
  (check-type new-priority valid-process-priority)
  (when (and si:*new-scheduler-enabled*
	     (not dbg:*debugger-might-have-system-problems*)
	     (or (null new-priority)
		 (eql new-priority t)
		 (funcall (if (%process-priority-in-region process)
			      *policy-hook-region-priority*
			      *policy-hook-set-priority*)
			  process new-priority)))
    (with-scheduler-locked
      (set-priority process new-priority))))

(defun set-process-base-priority (process new-priority)
  (check-type new-priority valid-process-priority)
  (when (and si:*new-scheduler-enabled*
	     (not dbg:*debugger-might-have-system-problems*)
	     (funcall *policy-hook-set-priority* process new-priority))
    (with-scheduler-locked
      (set-base-priority process new-priority))))

(defmacro with-process-priority (new-priority &body body)
  `(with-process-priority-internal #'(lambda () ,@body) ,new-priority))

(defun with-process-priority-internal (continuation new-priority)
  (declare (sys:downward-funarg continuation))
  (check-type new-priority valid-process-priority)
  (if (and si:*new-scheduler-enabled*
	   (not dbg:*debugger-might-have-system-problems*)
	   (or (null new-priority)
	       (eql new-priority t)
	       (funcall *policy-hook-region-priority* *current-process* new-priority)))
      (unwind-protect
	  (progn
	    (with-scheduler-locked
	      (push-process-priority *current-process* new-priority))
	    (funcall continuation))
	(with-scheduler-locked (pop-process-priority *current-process*)))
      (funcall continuation)))

(defmacro with-process-deadline (deadline &body body)
  `(with-process-priority
     (make-process-priority :DEADLINE ,deadline)
     ,@body))

;; this isn't right; what we really want is to have the verify-function return a deadline. 
(defmacro process-block-with-deadline-on-wakeup ((whostate verify-function) &body body)
  `(with-process-priority nil (process-block ,whostate ,verify-function)
     ,@body))

(defstruct (delayed-priority :conc-name)
  process
  priority
  timer
  rest
  level)

