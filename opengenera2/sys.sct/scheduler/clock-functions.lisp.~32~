;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFVAR *CLOCK-FUNCTION-LOCK* (PROTECT-OBJECT-WITH-MONITOR NIL "Clock Function list"))

(DEFUN ADD-CLOCK-FUNCTION (FSPEC)
  (LET ((FCN (FDEFINITION FSPEC)))
    (WITH-MONITOR-HELD (SYNCH *CLOCK-FUNCTION-LOCK*)
      (IGNORE SYNCH)
      (LOOP FOR ENTRY ON SI:CLOCK-FUNCTION-LIST
	    DO (COND ((EQ (CAR ENTRY) FCN) (RETURN NIL))	;Already present
		     ((AND (ZL:TYPEP (CAR ENTRY) :COMPILED-FUNCTION)
			   (EQUAL (SI:COMPILED-FUNCTION-NAME (CAR ENTRY)) FSPEC))
		      (SETF (CAR ENTRY) FCN)	;Replace older version
		      (RETURN NIL)))
	    FINALLY
	      ;; New entry being added to the list.  Localize the list in WHO-LINE-AREA
	      ;; to minimize system working set.  WHO-LINE-AREA is created before the
	      ;; first time that this is called.
	      (PUSH FCN SI:CLOCK-FUNCTION-LIST :LOCALIZE T :AREA TV:WHO-LINE-AREA))))
  (IF *CLOCK-QUEUE-TIMER*
      (RESET-TIMER-RELATIVE *CLOCK-QUEUE-TIMER* *CLOCK-QUEUE-INTERVAL*)
      (RUN-CLOCK-QUEUE))
  NIL)

(DEFUN REMOVE-CLOCK-FUNCTION (FSPEC)
  (WITH-MONITOR-HELD (SYNCH *CLOCK-FUNCTION-LOCK*)
    (IGNORE SYNCH)
    (LOOP FOR ENTRY ON SI:CLOCK-FUNCTION-LIST
	  WHEN (OR (EQ (CAR ENTRY) FSPEC)
		   (AND (ZL:TYPEP (CAR ENTRY) :COMPILED-FUNCTION)
			(EQUAL (SI:COMPILED-FUNCTION-NAME (CAR ENTRY)) FSPEC)))
	    DO (SETF SI:CLOCK-FUNCTION-LIST
		     (SI:LOCALIZE-LIST (REMOVE (CAR ENTRY) SI:CLOCK-FUNCTION-LIST)
				       TV:WHO-LINE-AREA))
	    AND RETURN T)))

;;; Value of ZL:TIME when SI:CLOCK-FUNCTION-LIST was last run
(SYS:DEFVAR-RESETTABLE *TIME-CLOCK-QUEUE-LAST-RUN* NIL NIL)

;;; Called to start the clock queue when it's needed and we're not sure it's running
(DEFUN RUN-CLOCK-QUEUE ()
  (LABELS ((RUN-CLOCK-FUNCTIONS ()
	     (LET* ((THIS-TIME (ZL:TIME))
		    (NEW-INTERVAL NIL)
		    (DELTA-TIME
		      (IF *TIME-CLOCK-QUEUE-LAST-RUN*
			  (TIME-DIFFERENCE THIS-TIME *TIME-CLOCK-QUEUE-LAST-RUN*)
			  0)))
	       (SETF *TIME-CLOCK-QUEUE-LAST-RUN* THIS-TIME)
	       (DOLIST (E SI:CLOCK-FUNCTION-LIST)
		 (LET ((INTERVAL
			 (SI:IGNORE-ERRORS-IN-SCHEDULER (FUNCALL E DELTA-TIME))))
		   (WHEN (AND INTERVAL
			      (TYPEP INTERVAL 'INTEGER)
			      (OR (NULL NEW-INTERVAL)
				  (< INTERVAL NEW-INTERVAL)))
		     (SETF NEW-INTERVAL INTERVAL))))
	       ;; You don't want a later (i.e. Greater THIS-TIME) RUN-CLOCK-FUNCTIONS to
	       ;; be run before this one, or else you'll get things like clocks
	       ;; occasionally going backwards.
	       (WHEN SI:CLOCK-FUNCTION-LIST
		 (RESET-TIMER-RELATIVE
		   ;; remember, for compatibility clock-functions believe
		   ;; in "ticks" = 1/60 seconds
		   *CLOCK-QUEUE-TIMER* (OR (AND NEW-INTERVAL
						(* (FLOAT NEW-INTERVAL 0.0)
						   (/ 60.0)))
					   *CLOCK-QUEUE-INTERVAL*))))))
    (UNLESS *CLOCK-QUEUE-TIMER*
      (SETQ *CLOCK-QUEUE-TIMER* (CREATE-TIMER-CALL #'RUN-CLOCK-FUNCTIONS NIL
						   :NAME "Clock Function queue"
						   ;; use priority of timer-task.
						   :PRIORITY NIL)))
    (UNLESS (TIMER-PENDING-P *CLOCK-QUEUE-TIMER*)
      (RESET-TIMER-RELATIVE *CLOCK-QUEUE-TIMER* *CLOCK-QUEUE-INTERVAL*))))

(DEFUN FIND-NEXT-HIGHEST-PRIORITY-PROCESS (P)
  (OR (PROCESS-NEXT-PROCESS P)
      (LOOP FOR I FROM (1+ (SCHEDULER-PRIORITY-CLASS (PROCESS-PRIORITY P)))
		  BELOW NUMBER-OF-PROCESS-CLASSES
	    THEREIS (SCHEDULER-QUEUE-HEAD (AREF *RUNNABLE-PROCESSES* I)))
      *NULL-PROCESS*))


