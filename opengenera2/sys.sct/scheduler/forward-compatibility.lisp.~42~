;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: SCHEDULER-COMPATIBILITY; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Remaining stubs for the interim compatibility package.

(defun new-scheduler-running-p () t)
  
(defun scheduler-enabled-p () si:*new-scheduler-enabled*)

;;;

(defun make-process (name &rest keys &key (priority 0) simple-p
		     (verify-function #'false)
		     initial-function initial-function-args
		     wakeups-from-sequence-break 
		     &allow-other-keys)
  (declare (arglist name &key
		    verify-function verify-function-args initial-function initial-function-args
		    priority warm-boot-action simple-p run-reasons arrest-reasons whostate
		    area wakeups-from-sequence-break))
  (si:validate-keywords-internal
    '(:verify-function :verify-function-args :initial-function :initial-function-args
		       :priority :warm-boot-action
		       :simple-p :area :run-reasons :arrest-reasons :whostate
		       :wakeups-from-sequence-break)
    keys)
  ;; this is no longer needed, but in case someone used this in the last six months we don't
  ;; want it to error.  This function will eventually disappear (2 releases after 7.2).
  ;; Until then keep in the IGNORE, and don't remove WAKEUPS-FROM-SEQUENCE-BREAK from
  ;; the VALIDATE-KEYWORDS-INTERNAL.
  (ignore wakeups-from-sequence-break)
  (when (and simple-p (null verify-function))
    (error "Simple processes must have a verify function specified."))
  (apply #'process:make-process name
	 :priority (process::make-process-priority :foreground priority)
	 :initial-function (if initial-function-args
			       #'(lambda () (apply initial-function initial-function-args))
			       initial-function)
	 keys))

;;;

(defun map-over-all-processes (function &rest args)
  (declare (sys:downward-funarg function))
  (map nil #'(lambda (p) (apply function p args))
       process::*all-processes*))

(defun map-over-all-active-processes (function &rest args)
  (declare (sys:downward-funarg function))
  (map nil #'(lambda (p)
	       (when (process:process-active-p p)
		 (apply function p args)))
       process:*all-processes*))

(defun all-processes () process:*all-processes*)

(defun process-p (proc) (typep proc 'si:process))

;;;

(defun process-block (whostate verify-function &rest args)
  (apply #'process:process-block whostate verify-function args))

(defun process-wakeup (process)
  (process:process-wakeup process))

(defun process-force-wakeup (process)
  (process:process-force-wakeup process))

(defun process-block-with-timeout (timeout whostate verify-function &rest args)
  (apply #'process:process-block-with-timeout timeout whostate verify-function args))

(defun process-block-and-poll-wait-function (whostate interval function &rest args)
  (apply #'process:process-block-and-poll-wait-function whostate interval function args))
