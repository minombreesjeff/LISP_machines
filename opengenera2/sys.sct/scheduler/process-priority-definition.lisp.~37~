;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; scheduler-priority


(DEFCONSTANT %%SCHEDULER-PRIORITY-PREEMPTION-FIELD (BYTE 1 0))
(DEFCONSTANT %%SIZE-OF-SCHEDULER-PRIORITY-FIELD 29.)
(DEFCONSTANT %%SIZE-OF-SCHEDULER-CLASS-FIELD (- 32. %%SIZE-OF-SCHEDULER-PRIORITY-FIELD))
(DEFCONSTANT %%SCHEDULER-PRIORITY-PRIORITY (BYTE %%SIZE-OF-SCHEDULER-PRIORITY-FIELD 0))
(DEFCONSTANT %%SCHEDULER-PRIORITY-PRIORITY-WITHOUT-PREEMPTION
	     (BYTE (1- %%SIZE-OF-SCHEDULER-PRIORITY-FIELD) 1))
(DEFCONSTANT %%SCHEDULER-PRIORITY-CLASS
	     (BYTE %%SIZE-OF-SCHEDULER-CLASS-FIELD %%SIZE-OF-SCHEDULER-PRIORITY-FIELD))
(DEFCONSTANT %%SCHEDULER-CLASS-CONVERSION-MASK
 	     (BYTE %%SIZE-OF-SCHEDULER-CLASS-FIELD 0))
(DEFCONSTANT %%SCHEDULER-CLASS-CONVERSION-OFFSET
	     (EXPT 2 (1- %%SIZE-OF-SCHEDULER-CLASS-FIELD)))
(DEFCONSTANT %%SCHEDULER-CLASS-REAL-TIME-CLASS %%SCHEDULER-CLASS-CONVERSION-OFFSET)

(defsubst make-scheduler-priority (class priority)
  (logior (lsh (ldb %%scheduler-class-conversion-mask
		    (+ class %%scheduler-class-conversion-offset))
	       %%size-of-scheduler-priority-field)
	  (ldb %%scheduler-priority-priority priority)))

(defsubst scheduler-priority-class (scheduler-priority)
  (ldb %%scheduler-class-conversion-mask
       (+ (ldb %%scheduler-priority-class scheduler-priority)
	  %%scheduler-class-conversion-offset)))

(defsubst scheduler-priority-priority (scheduler-priority)
  (ldb %%scheduler-priority-priority scheduler-priority))

(defsubst scheduler-priority-real-time-class (scheduler-priority)
  (= (scheduler-priority-class scheduler-priority) %%scheduler-class-real-time-class))

(defsubst scheduler-priority-lessp (pri1 pri2)
  (if (scheduler-priority-real-time-class pri1)
      (if (scheduler-priority-real-time-class pri2)
	  (ldb-test (byte 1 28.) (- pri1 pri2))
	  t)
      (< pri1 pri2)))

;; process-priority

(defun process-priority-p (priority)
  (and (zl:fixnump priority)
       ( 0 (scheduler-priority-class priority) 4)))

(deftype valid-process-priority ()
  '(or null
       (member t)
       (and fixnum
	    (satisfies process-priority-p))))

(defun convert-deadline-priority (deadline &key (preemptive t))
  (dpb (if preemptive 1 0) %%scheduler-priority-preemption-field deadline))

;; The priorities of foreground processes will exactly correspond to old-scheduler priorities.
(defun convert-foreground-priority
       (old-priority &key
	(preemptive t) (boost *scheduler-boost*)
	(spread *scheduler-spread*) (resolution *scheduler-resolution*)
	(time-scale *scheduler-wakeup-interval*))
  (declare (ignore boost spread resolution time-scale))
  ;; order is backwards, and want to allow function-suspend to be positive in the new
  ;; regime
  (let ((priority (min (max (floor old-priority) -256) 110)))
    (dpb (- 120. priority) (byte 9 21.) (if preemptive 1 0))))

(defun back-convert-foreground-priority (priority)
  (- 120. (ldb (byte 9 21.) priority)))

(defun pzero (ignore) 0)

(defvar *legal-process-priority-classes*
	`(((:FOREGROUND :FG)
	   ,*process-priority-class-foreground* convert-foreground-priority)
	  ((:BATCH :BACKGROUND :BG)  ; "background" is strictly for compatibility. 
	   ,*process-priority-class-batch* pzero)
	  ((:DEADLINE :REALTIME :REAL-TIME) ; so is "realtime" and "real-time"
	   ,*process-priority-class-deadline* convert-deadline-priority)))

(defun find-class (class)
  (find class *legal-process-priority-classes*
	:key 'first
	:test #'(lambda (item legal-keywords)
		  (if (listp legal-keywords)
		      (member item legal-keywords)
		      (eql item legal-keywords)))))

(defun make-process-priority (class priority &rest extra-args)
  (let ((entry (find-class class)))
    (unless entry
      (let ((valid-classes (loop for e in *legal-process-priority-classes*
				 collect (if (listp (car e)) (caar e) (car e)))))
	(cerror "Choose new class" "~S is not a valid priority class." class)
	(setf class (accept `((member ,@valid-classes))))
	(setf entry (find-class class))))
    (destructuring-bind (class-name c fun) entry
      (ignore class-name)
      (make-scheduler-priority c (apply fun priority extra-args)))))

(compiler:defoptimizer (make-process-priority make-process-priority-optimizer)
		       (form)
  (let ((class-p (cdr form))
	(priority-p (cddr form))
	(class (second form))
	(priority (third form))
	(extra-args (cdddr form)))
    (let ((constant-args (loop for arg in extra-args always (constantp arg))))
      (cond ((and class-p priority-p (constantp class) (integerp priority)
		  (find-class class) constant-args)
	     ;; we know it will be an integer, so let's just do it.
	     (apply #'make-process-priority class priority extra-args))
	    ((and class-p priority-p (constantp class) (find-class class) constant-args)
	     (destructuring-bind (class-name c fun) (find-class class)
	       (ignore class-name)
	       `(make-scheduler-priority ,c (,fun ,priority ,@extra-args))))
	    (t form)))))

(defun no-deadlines (process priority)
  (if (and (eql (scheduler-priority-class priority) *process-priority-class-deadline*)
	   (not (or (eql (scheduler-priority-class (process-process-priority process))
			 *process-priority-class-deadline*)
		    (and (process-base-process-priority process)
			 (eql (scheduler-priority-class
				(process-base-process-priority process))
			      *process-priority-class-deadline*)))))
      (LET ((*DEBUG-IO* "Error in a scheduler priority"))
	(CERROR "Proceed without changing the priority"
		"It is illegal to set the priority of a process to :DEADLINE, except inside WITH-PROCESS-PRIORITY, or WITH-PROCESS-DEADLINE.")
	NIL)
      't))

(defvar *policy-hook-region-priority* #'true)
(defvar *policy-hook-set-priority* #'no-deadlines)

(defvar *policy-hook-process-switch-occurred* 'record-process-switch)

;; Maybe each process should state its own hysteresis.  That way, procs
;; that wanted smooth scheduling could specify a short one, and ones
;; that didn't care could go long.  I believe that it works out "fairly"
;; even when the percentages are for different intervals.  I don't know
;; if there is anyway to setup the *wakeup* interval to be the Min
;; hysteresis of any recently seen process.  This might not be what we
;; want anyway, because, for extremely fine scheduling, the process had
;; better explicitly call into the scheduler more frequently.
(defun get-instantaneous-priority (process priority)
  (declare (inline process-run-time-low si:process-microsecond-time-scheduled
		   process-runnable-start-time process-scheduler-info))
  (if (numberp priority)
      (if (and si:*new-scheduler-enabled*
	       *scheduler-process-initialized*
	       (eql (scheduler-priority-class priority)
		    *process-priority-class-foreground*))
	  (make-scheduler-priority
	    *process-priority-class-foreground*
	    (dpb (ldb %%scheduler-priority-preemption-field priority)
		 %%scheduler-priority-preemption-field
		 (+ (scheduler-priority-priority priority)
		    (let ((stime (si:process-microsecond-time-scheduled process)))
		      (if stime
			  (let ((o-process-time (process-recent-run-time process))
				(process-time
				  (if (eql *current-process* process)
				      (sys:%32-bit-plus 
					(process-run-time-low process)
					(sys:%32-bit-difference (sys:%microsecond-clock)
								stime))
				      (process-run-time-low process)))
				(elapsed-time
				  (sys:%32-bit-difference (sys:%microsecond-clock)
							  (process-recent-microsecond-clock
							    process))))
			    ;; Watch out for time wrap-around and division by zero problems
			    (if (plusp elapsed-time)
				;; Fractional utilization of machine during last scheduler slot
				;; times *scheduler-spread* times *low-order-priority-bits*,
				;; but calling floor instead of / ensures that fractional
				;; utilizations within *scheduler-resolution* percent give
				;; equal results.
				;; On MacIvory model 1 this takes about 35 microseconds.
				(* (floor (* (sys:%32-bit-difference process-time
								     o-process-time)
					     *scheduler-priority-factor-1*)
					  elapsed-time)
				   *scheduler-priority-factor-2*)
				0))
			  0.))
		    (if (eql process *current-process*)
			0
			(let ((stime (si:process-microsecond-time-scheduled process)))
			  (cond ((null stime) 0)
				((process-runnable-p process)
				 (let* ((rtime (sys:%32-bit-difference
						 (si:%microsecond-clock)
						 (process-runnable-start-time process)))
					(stime (sys:%32-bit-difference
						 (si:%microsecond-clock) stime))
					(delta (if (< rtime stime) rtime stime)))
				   (if (plusp delta)
				       (* (- *scheduler-boost-factor*) (floor delta 1000000.))
				       0)))
				(t 0)))))))
	  priority)
      (let ((*debug-io* "Error while specifying a scheduler priority"))
	(cerror "Don't change the priority"
		"The scheduler cannot recognize ~S as a priority" priority))
      'T))

;; Faster version of get-instantaneous-priority, for incremental changes to the priority
;; It's faster because we don't have to recompute the scheduler's adjustment to the
;; specified priority, we can just make an incremental adjustment
(defun adjusted-instantaneous-priority (process old-priority new-priority)
  (declare (inline process-priority))
  (if (numberp new-priority)
      (if (eql (scheduler-priority-class new-priority) *process-priority-class-foreground*)
	  (if (eql (scheduler-priority-class old-priority) *process-priority-class-foreground*)
	      ;; Usual case, switching from one foreground priority to another
	      (make-scheduler-priority
		*process-priority-class-foreground*
		(dpb new-priority %%scheduler-priority-preemption-field
		     (+ (process-priority process) (- new-priority old-priority))))
	      ;; Slow case, old priority was not foreground
	      (get-instantaneous-priority process new-priority))
	  ;; Non-foreground priorities don't get adjusted by the scheduler
	  new-priority)
      (let ((*debug-io* "Error while specifying a scheduler priority"))
	(cerror "Don't change the priority"
		"The scheduler cannot recognize ~S as a priority" new-priority))
      'T))
