;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10; Lowercase: Yes; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; In fractions of a second, the unit that timer-unit requests are specified in:
(defconstant *timer-units* 1/1000000)

;; No attempt is made to make a timer go off any closer to the specified time than 
;; +/- *TIMER-RESOLUTION* in *TIMER-UNITS*.
;; increase this parameter to allow bunching together of timers to avoid an excessive
;; number of process switches.
;; timers are only accurate to this resolution: (in timer-units)
(defparameter *timer-resolution* 65536)

(defun set-timer-resolution (new-timer-resolution)
  (check-type new-timer-resolution (integer (0)))
  (setq *timer-resolution* (max new-timer-resolution
				#+3600 16666.
				#+Imach (sys:system-case
					  ;; choose arbitrarily
					  ((Native) 5000.)
					  ;; 60Hz clock should be available
					  (embedded 16666.)
					  (otherwise 16666.))))
  #||
  (with-monitor-held (timers *pending-timers*)
    (let ((wheels (sys:eval-in-instance timers '(list wheel1 wheel2 wheel3))))
      (loop for wheel in wheels do
	  (setf (timer-wheel-bucket-smaller-than-sort wheel)
		( (ash 1 (timer-wheel-log2-chunk-size wheel)) *timer-resolution*)))))
  ||#)
(defvar *valid-timer-states* '(:pending :neutral :expired :executing))

(defvar *pending-timers*)
;; half a millisecond.
(defvar *timer-priority* (make-process-priority :deadline 500 :preemptive t))
(defvar *default-timer-entry-priority* (make-process-priority :foreground 0))

(defun print-timer (timer stream depth)
  (declare (ignore depth)) ;; we know this will never go deeper than 1.
  (si:printing-random-object (timer stream :typep)
    (format stream "~A~:[ (~A)~;~]"
	    (timer-name timer) (eql (timer-state timer) :neutral) (timer-state timer))))

(defstruct (timer :conc-name :named-array (:print-function print-timer)
		  (:inline :constructor)	; Don't inline the accessors, nor the copier
		  (:size-macro timer-length)
		  (:constructor-make-array-keywords length))
  (function #'ignore)				; Called when the timer expires
  (args nil)					; with these arguments.
  (expires nil)					; Microsecond-time when it expires.
  (state ':neutral)				; Can be either NEUTRAL, PENDING, or EXPIRED.
  (name "")
  (descriptor nil)				; Left over from earlier implementation
  (priority *default-timer-entry-priority*)
  (warm-boot-action nil)			; NIL or :CLEAR means discard
						; T or :SAVE means keep.
  (high-order-bits 0)				; High half of timer-expires.
  (universal-time nil)
  (process-flags nil)
  (timer-flags nil)
  (next nil)					; Next timer in the queue scheduled for later
						; than this one or NIL if this is the last.
  (previous nil)				; Previous timer in the queue scheduled for
						; earlier than this one or NIL if this first.
  (hint-reference-count nil)			; Number of elements of the hint array that
						; point at this timer.
  (lowest-hint nil)				; Where to start looking in the hint array
						; for pointers to this timer.
  (current-queue nil))				; Remember which simple-timer-queue, if any,
                                        	; this timer is in.
						; We need this to be robust to warm boots.

(defvar *timers-set-before-ut-initialized* nil)
