;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Event system:

;; This is a very simple minded interface to the block and wakeup primitives of the 
;; scheduler.

;; 

(defflavor event
	((name nil)
	 (wait-function nil)
	 (wait-function-args nil)
	 (wait-function-closure nil)
	 (parent nil)
	 (subevents nil)
	 (waiters (make-array 3 :fill-pointer 0))
	 (scheduler-queue (make-scheduler-queue))
	 (last-notifier nil)
	 (counter 0))
	()
  (:initable-instance-variables name wait-function wait-function-args)
  (:required-init-keywords :wait-function :wait-function-args)
  (:readable-instance-variables name))

#||
wait
notify
register
unregister
with-events
||#

(defmethod (make-instance event :after) (&rest ignore)
  (let ((func wait-function)
	(args wait-function-args))
    (flet ((wait-closure () (apply func args)))
      (setf wait-function-closure #'wait-closure))))

(defmethod (get-predicate event) () wait-function-closure)

(defmethod (wait event) (&optional whostate)
  (with-scheduler-locked
    (unwind-protect
	(progn
	  (register self *current-process*)
	  (apply 'process-block (or whostate "Event Wait")
		 wait-function wait-function-args))
      (unregister self *current-process*))))

(defmethod (notify event) ()
  (with-scheduler-locked
    (setf last-notifier *current-process*)
    (when (apply wait-function wait-function-args)
      (loop for proc being the array-elements of waiters do (process-wakeup proc))))
  (loop for subevent in subevents do (notify subevent)))

(defmacro with-events ((&rest events) &body body)
  `(unwind-protect
       (progn
	 ,@(loop for event in events collect `(register ,event *current-process*))
	 ,@body)
     ,@(loop for event in events collect `(unregister ,event *current-process*))))

(defmethod (register event) (process)
  (declare (values wait-function wait-function-args closure))
  (with-scheduler-locked
    (unless (find process waiters) 
      (vector-push-extend process waiters)))
  (values wait-function wait-function-args wait-function-closure))

(defmethod (unregister event) (process)
  (with-scheduler-locked
    (loop for p being the array-elements of waiters using (index index) do
      (when (eql p process)
	(if (= index (si:vector-length waiters))
	    (vector-pop waiters)
	    (setf (aref waiters index) (vector-pop waiters)))
	(return (values))))))

(defmethod (make-subevent event) (events new-wait-function new-wait-function-args)
  (let ((new-event (make-instance 'event
				  :wait-function new-wait-function
				  :wait-function-args new-wait-function-args)))
    (ignore events)
    (push new-event subevents)
    (register-event-parent new-event self)))

(defmethod (register-event-parent event) (event)
  (unless (typep event 'event)
    (error "~S must be another event" event))
  (setf parent event))
