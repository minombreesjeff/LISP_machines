;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PROCESS; Base: 10; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun %set-next-timer-wakeup (next-alarm-time)
  (setq *next-timer-wakeup-time* next-alarm-time)
  (setq si:%*timer-wakeup-set-time* (si:%microsecond-clock))
  (setq %*timer-wakeup-queued* nil)
  #+Imach
  (if next-alarm-time
      ;; When the periodic timer interrupt handler (sequence-break-internal) used
      ;; to check for lost timer wakeups (either because of a bogus setting, or because
      ;; you sat in the FEP for twenty minutes), we didn't have to be careful here.
      ;; 
      ;; Now, however, it's possible to set the next-alarm-time to be a little too
      ;; early.  This code used to treat that as 32 bits into the future.
      ;; Now we have to be conservative and not >ever< set the interval timer for more
      ;; than 3/4 second in the future.
      (let* ((delta (sys:%32-bit-difference next-alarm-time (sys:%microsecond-clock)))
	     (adjusted-delta (min 750000. (max 0 delta))))
	(sys:system-case
	  ((Merlin Zora Domino)
	   (si:%funcall-in-aux-stack
	     (sys:system-case
	       ((Merlin Zora) #'cli::start-82C54-interval-timer)
	       ((Domino) #'cli::start-8032-interval-timer))
	     adjusted-delta))
	  ((VLM)
	   (sys:%coprocessor-write adjusted-delta sys:%coprocessor-register-wait-for-event))
	  ((MacIvory) nil)
	  (otherwise nil)))
      #+VLM
      ;; If there's no timer pending, we still need to wakeup periodically to avoid hanging.
      (sys:%coprocessor-write 750000. sys:%coprocessor-register-wait-for-event))
  nil)

(defun %set-next-timer-task (next-alarm-time task)
  (setq *timer-task* task)
  (%set-next-timer-wakeup next-alarm-time))

(defun %clear-next-timer-wakeup ()
  (setq %*timer-wakeup-queued* nil)
  #+Imach
  (sys:system-case
    ((Merlin Zora) (cli::stop-82C54-interval-timer))
    ((Domino) (cli::stop-8032-interval-timer))
    ((MacIvory VLM) nil)
    (otherwise nil))
  (setq *next-timer-wakeup-time* nil))
