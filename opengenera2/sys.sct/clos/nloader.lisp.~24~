;;; -*- Mode: LISP; Package: USER; Syntax: Common-Lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-program cloe ()
  :loop t)

(defun loadit (&key compile bins (print nil) (verbose t) (query nil) (start nil)
	       (optimize compile) (ephemeral (or compile (null bins))) (save bins)
	       destination)
  (if optimize
      (proclaim '(optimize (speed 3) (safety 0) (space 0) (compilation-speed 0)))
      (proclaim '(optimize (speed 0) (safety 3) (space 0) (compilation-speed 0))))
  (when ephemeral
    (gc-on :method :ephemeral)
    (gc-immediately))
  (let ((source-ext #+unix-v3 "l" #+(or ms-dos windows os/2) "lsp")
	(bin-ext #+unix-v3 "b" #+(or ms-dos windows os/2) "fas"))
    (labels ((clos-pathname (device directory name extension)
	       (format nil
		       (progn
			 #+(or ms-dos windows os/2) "~a:\\~{~a\\~}~a.~a"
			 #+unix-v3 "~*/~{~a/~}~a.~a")
		       device
		       directory
		       name
		       extension))
	     (load-a-file (device directory name extension)
	       (when (or (null query)
			 (y-or-n-p "Load ~s" (clos-pathname device directory name extension)))
		 (load (clos-pathname device directory name extension) :print print :verbose verbose)))
	     (load-bin (device directory name)
	       (when (or (null query)
			 start
			 (y-or-n-p "Load ~s" (clos-pathname device directory name bin-ext)))
		 (load (clos-pathname device directory name bin-ext)
		       :print print
		       :verbose verbose)))
	     (compile-a-file (device directory name extension)
	       (format t "~&Compiling ~a~&" (clos-pathname device directory name extension))
	       (when (or (null query)
			 (y-or-n-p "Compile it?"))
		 (compile-file (clos-pathname device directory name extension)
			       :output-file (clos-pathname device directory name bin-ext))))
	     (load-compile (device directory name extension)
	       (when (or (null start)
			 (string-equal start name))
		 (setq start nil)
		 (compile-a-file device directory name extension))
	       (load-bin device directory name))
	     (do-a-file (device directory name extension)
	       (cond (bins
		      (load-bin device directory name))
		     (compile
		      (load-compile device directory name extension))
		     (t
		      (load-a-file device directory name extension))))
	     (do-files (list)
	       (loop for (directory name extension) in list
		     doing
		 (do-a-file
		   "E"
		   (or directory
		       #+(or ms-dos windows os/2) '("usr" "src" "clos")
		       #+unix-v3 '("usr2" "src" "clos"))
		   name
		   (or extension source-ext)))))
      (do-files '((nil "clospkg" nil)
		  (nil "syspatch" nil)
		  (nil "langsup" nil)
		  (nil "locking" nil)
		  (nil "maptabs" nil)
		  (nil "disptabs" nil)
		  (nil "storage" nil)
		  (nil "earldfst" nil)
		  (nil "dfstmac" nil)
		  (nil "holders" nil)
		  (nil "defines" nil)
		  (nil "function" nil)
		  (nil "yad" nil)
		  (nil "earlymop" nil)
		  (nil "generics" nil)
		  (nil "midclos" nil)
		  (nil "metaclas" nil)
		  (nil "methcomb" nil)
		  (nil "basmeth" nil)
		  (nil "methods" nil)
		  (nil "slots" nil)
		  (nil "basclass" nil)
		  (nil "cnstrctr" nil)
		  (nil "class" nil)
		  (nil "dfstrct" nil)
		  (nil "compiler" nil)
		  (nil "postclos" nil)))
      (when save
	(fmakunbound 'loadit)
	(gc-on :method :ephemeral)
	(save-program 'cloe :destination destination)))))
