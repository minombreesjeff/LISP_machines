;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Package: FCLI; Lowercase: Yes; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Random-number generator
;;; Based on the Zetalisp one, but rewritten since it needed incompatible changes

(si:allow-redefinition 'random-state 'deftype)

(defstruct (random-state (:conc-name "RANDOM-")
			 (:copier nil)
			 (:constructor construct-random-state)
			 (:print-function
			   (lambda (state stream level)
			     (declare (ignore level))
			     (format stream "#S~S"
				     `(random-state :array ,(random-array state)
						    :size ,(random-size state)
						    :seed ,(random-seed state)
						    :pointer-1 ,(random-pointer-1 state)
						    :pointer-2 ,(random-pointer-2 state))))))
  array
  size
  seed
  pointer-1
  pointer-2
  (state-lock (process:make-lock "Random State")))

(declaim (notinline random-state-p))

(defvar *random-state*)

;;; User function to copy a random state, or create a randomly-initialized one
(defun make-random-state (&optional state)
  (flet ((copy-state (old-state)
	   (process:with-lock ((random-state-lock old-state))
	     (let ((size (random-size old-state)))
	       (construct-random-state
		 :array (make-array size :element-type 'fixnum
				    :initial-contents (random-array old-state))
		 :size size
		 :seed (random-seed old-state)
		 :pointer-1 (random-pointer-1 old-state)
		 :pointer-2 (random-pointer-2 old-state))))))
    (etypecase state
      ((member nil)
       (copy-state *random-state*))
      ((member t)
       (make-random-state-internal 71 35 (sys:%microsecond-clock)))
      (random-state
	(copy-state state)))))

;;; A more general function to create random states, not in the Common Lisp manual
(defun make-random-state-internal (size offset seed)
  (let ((state (construct-random-state :array (make-array size :element-type 'fixnum)
				       :size size :seed seed :pointer-1 0 :pointer-2 offset)))
    (seed-random-state state)
    state))

(defun seed-random-state (state &optional new-seed)
  (when new-seed
    (setf (random-seed state) new-seed))
  (let ((size (random-size state))
	(array (random-array state))
	(x (sys:%logdpb (random-seed state) (byte 31 1) 1)))	;use an odd seed
    (setf (random-pointer-2 state) (mod (+ size (- (random-pointer-2 state)
						   (random-pointer-1 state)))
					size))
    (setf (random-pointer-1 state) 0)
    (fill array 0)
    (dolist (byte-spec '#.`(,(byte 8 24) ,(byte 12 12) ,(byte 12 0)))
      (dotimes (i size)
	(setq x (sys:%multiply-bignum-step x 4093))	;4093 is a prime number
	(setf (sys:%logldb byte-spec (aref array i)) (ldb (byte 12 11) x))))))

(setq *random-state* (make-random-state t))

(defmethod make-load-form ((state random-state))
  `(construct-random-state :array ',(random-array state)
			   :size ,(random-size state)
			   :seed ,(random-seed state)
			   :pointer-1 ,(random-pointer-1 state)
			   :pointer-2 ,(random-pointer-2 state)))

(defun random-0-1-double-components (&optional (state *random-state*))
  (loop do (let ((exponent (- (ldb sys:%%single-exponent
				   (sys:%fixnum (scale-float (float (ldb (byte 31 0)
									 (random-internal state))
								    0.0)
							     -31)))
			      sys:%single-exponent-bias)))
	     ;; make sure rounding hasn't given us a too-big number
	     (when (< exponent 0)
	       (return (values (dpb (+ exponent sys:%double-exponent-bias)
				    sys:%%double-exponent
				    (ldb sys:%%double-fraction-high (random-internal state)))
			       (random-internal state)))))))

;;; User function to generate random numbers in range from 0 below a given number
(defun random (number &optional (state *random-state*))
  (check-type number (and (or integer float) (satisfies plusp))
	      "a positive integer or floating-point number")
  (check-type state random-state)
  (typecase number
    (fixnum
      (if (< number (floor most-positive-fixnum 4096))
	  (mod (random-internal state) number)
	  ;; long division, two steps.
	  ;; faster version of (mod (dpb (ri) (byte 32 32) (dpb (ri) (byte 32 0) 0)) number)
	  (multiple-value-bind (nil high-remainder)
	      (sys:%divide-bignum-step (random-internal state) 0 number)
	    (multiple-value-bind (nil remainder)
		(sys:%divide-bignum-step (random-internal state) high-remainder number)
	      remainder))))
    (bignum
      ;; ---- someday build the bignum faster using bignum internals
      (mod (loop with bignum = 0
		 for i from 0 to (ceiling (integer-length number) 32)
		 do (setq bignum (dpb (random-internal state) (byte 32 (* i 32)) bignum))
		 finally (return bignum))
	   number))
    (single-float
      (loop do (let ((random (scale-float (float (ldb (byte 31 0) (random-internal state)) 0.0)
					  -31)))
		 ;; make sure rounding hasn't given us a too-big number
		 (when (< random 1.0)
		   (return (* random number))))))
    (double-float
      (si:double-to-consed (si:double-* (random-0-1-double-components state)
					(si:double-components number))))
    (otherwise
      (error "Someone forgot to implement RANDOM of a ~S" (type-of number)))))

;;; Get a fixnum, positive or negative, from a random-state
;;; From Knuth, vol. 2 (second edition)
(defun random-internal (state)
  (process:with-lock ((random-state-lock state))
    (let ((p1 (random-pointer-1 state))
	  (p2 (random-pointer-2 state))
	  (size (random-size state))
	  (array (random-array state)))
      (unless (< (incf p1) size)
	(setq p1 0))
      (unless (< (incf p2) size)
	(setq p2 0))
      (setf (random-pointer-1 state) p1)
      (setf (random-pointer-2 state) p2)
      (setf (aref array p2) (sys:%32-bit-plus (aref array p1) (aref array p2))))))

;;; Compatibility

;;; To reproduce a random state from its printed representation
(defun cli::random-state (size seed pointer-1 pointer-2 &rest values)
  (construct-random-state
    :array (make-array size :element-type 'fixnum :initial-contents values)
    :size size :seed seed :pointer-1 pointer-1 :pointer-2 pointer-2))

;;;

(defvar *random-normal-extra-value* nil)
(defvar *random-normal-extra-value-lock* (process:make-lock "RANDOM Normal Extra Value"))

(defun random-normal-0-1 (state)
  ;; this routine returns a random number from
  ;; the normal distribution with mean 0 and standard deviation 1
  ;; algorithm from Knuth, vol 2.  "The polar method"
  (process:with-lock (*random-normal-extra-value-lock*)
    (if *random-normal-extra-value*
	(prog1 *random-normal-extra-value*
	       (setf *random-normal-extra-value* nil))
	(loop do (let* ((v1 (* (- (random 1.0 state) 0.5) 2))
			(v2 (* (- (random 1.0 state) 0.5) 2))
			(r (+ (expt v1 2) (expt v2 2))))
		   (when (< r 1.0)
		     (let ((q (sqrt (/ (* -2.0 (log r)) r))))
		       (setf *random-normal-extra-value* (* v2 q))
		       (return (* v1 q)))))))))

(defvar *random-normal-extra-value-high* nil)
(defvar *random-normal-extra-value-low* nil)
(defvar *random-normal-extra-value-double-lock* (process:make-lock "RANDOM Normal Extra Value Double"))

(defun random-normal-0-1-double-components (state)
  ;; this routine returns a random number from
  ;; the normal distribution with mean 0 and standard deviation 1
  ;; algorithm from Knuth, vol 2.  "The polar method"
  (process:with-lock (*random-normal-extra-value-double-lock*)
    (if *random-normal-extra-value-high*
	(values (prog1 *random-normal-extra-value-high*
		       (setf *random-normal-extra-value-high* nil))
		*random-normal-extra-value-low*)
	(loop do (si:double-let*
		   ((v1 (si:double-* (si:double-- (random-0-1-double-components state) 0.5d0)
				     2.0d0))
		    (v2 (si:double-* (si:double-- (random-0-1-double-components state) 0.5d0)
				     2.0d0))
		    (r (si:double-+ (si:double-* v1 v1) (si:double-* v2 v2))))
		   (when (si:double-< r 1.0d0)
		     (si:double-let*
		       ((q (si:double-sqrt (si:double-/ (si:double-* -2.0d0 (si:double-log r))
							r))))
		       (multiple-value-setq (*random-normal-extra-value-high*
					      *random-normal-extra-value-low*)
			 (si:double-* v2 q))
		       (return (si:double-* v1 q)))))))))

;;; returns a random number from the specified normal distribution
;;; ---- someday, think about optimizers for this (and random)
(defun scl:random-normal (&optional (mean 0.0) (standard-deviation 1.0) (state *random-state*))
  (if (or (typep mean 'double-float) (typep standard-deviation 'double-float))
      (si:double-to-consed
	(si:double-+ (si:double-dfloat mean)
		     (si:double-* (si:double-dfloat standard-deviation)
				  (random-normal-0-1-double-components state))))
      (+ mean (* standard-deviation (random-normal-0-1 state)))))

#||
(defflavor zz-histogram
	((mean 0.0)
	 (standard-deviation 1.0)
	 (n-buckets 100) n-buckets/2
	 (high-tail 0) (low-tail 0)
	 array)
	()
  :writable-instance-variables
  (:initable-instance-variables mean standard-deviation n-buckets))

(defmethod (make-instance zz-histogram :after) (&rest ignore)
  (assert (evenp n-buckets))
  (setq n-buckets/2 (truncate n-buckets 2)
	array (make-array n-buckets :initial-value 0)))

(defmethod (clear-data zz-histogram) ()
  (setq high-tail 0 low-tail 0)
  (fill array 0))

;; The "6" here and below means +- 3 s.d.
(defun-in-flavor (index-from-data zz-histogram) (data)
  (let* ((x (/ (- data mean) standard-deviation))
	 (index (round (+ (* n-buckets x 1/6) n-buckets/2))))
    index))

(defun-in-flavor (data-from-index zz-histogram) (index)
  (+ mean (* standard-deviation (* (/ (float (- index n-buckets/2)) n-buckets) 6))))

(defmethod (collect-data zz-histogram) (data)
  (let ((index (index-from-data data)))
    (cond ((< index 0)
	   (incf low-tail))
	  ((< index n-buckets)
	   (incf (aref array index)))
	  (T (incf high-tail))))
  ())

(defmethod (display zz-histogram) ()
  (fresh-line)
  (formatting-table ()
    (formatting-row ()
      (formatting-cell () "low")
      (formatting-cell () (write low-tail)))
    (tv:dotimes-noting-progress (i n-buckets "hist display")
      (formatting-row ()
	(formatting-cell ()
	  (format T "~$" (data-from-index i)))
	(formatting-cell () (write (aref array i)))))
    (formatting-row ()
      (formatting-cell () "high")
      (formatting-cell () (write high-tail)))))

(defmethod (graph zz-histogram) ()
  (fresh-line)
  (let* ((height 200)
	 (width (send *standard-output* :inside-width))
	 (width-per-cell (floor width (+ 2 n-buckets)))
	 (max-count (max low-tail high-tail (reduce #'max array))))
    (graphics:with-room-for-graphics (T 200)
      (flet ((rect (index value)
	       (graphics:draw-rectangle (* index width-per-cell)
					(* height (/ value max-count))
					(* (1+ index) width-per-cell)
					0)))
	(rect 0 low-tail)
	(dotimes (j n-buckets) (rect (1+ j) (aref array j)))
	(rect (+ 1 n-buckets) high-tail)))))

(defun test-random (n-samples function &rest args)
  (let ((hist (make-instance 'zz-histogram :n-buckets 100)))
    (tv:dotimes-noting-progress (j n-samples "random")
      (collect-data hist (apply function args)))
    ;;(display hist)
    (graph hist)))
||#


