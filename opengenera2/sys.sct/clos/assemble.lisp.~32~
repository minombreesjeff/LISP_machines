;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10; Package: CLOS-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(IN-PACKAGE :CLOS-INTERNALS)

(DEFVAR *ASSEMBLE-ENVIRONMENT* (LIST NIL NIL))

(DEFUN FDEFINE-ASSEMBLED-MACRO (NAME CODE)
  (LET ((OLD-DEFINITION (ASSOC NAME (SI:ENV-FUNCTIONS *ASSEMBLE-ENVIRONMENT*))))
    (IF OLD-DEFINITION
	(SETF (SECOND OLD-DEFINITION) CODE)
	(PUSH (LIST NAME CODE) (SI:ENV-FUNCTIONS *ASSEMBLE-ENVIRONMENT*)))))

(DEFMACRO DEF-ASSEMBLER-MACRO (NAME LAMBDA-LIST &BODY BODY)
  (MULTIPLE-VALUE-BIND (FORM INDENTATION)
      (SI:DEFMACRO-1 'ZL:LAMBDA 'ZL:MACRO NAME LAMBDA-LIST
		     `((DECLARE (SYS:FUNCTION-PARENT ,NAME DEF-ASSEMBLER-MACRO))
		       ,@BODY))
    `(PROGN
       (SYS:RECORD-SOURCE-FILE-NAME ',NAME 'DEF-ASSEMBLER-MACRO)
       (FDEFINE-ASSEMBLED-MACRO ',NAME (LIST 'SPECIAL (LISP:FUNCTION ,FORM)))
       ,(IF INDENTATION
	    `(SI:DEFMACRO-SET-INDENTATION-FOR-ZWEI ',NAME ',INDENTATION)
	    `(SI:DEFMACRO-CLEAR-INDENTATION-FOR-ZWEI ',NAME)))))

(DEFUN ASSEMBLE-INTERNAL
       (CODE
	&KEY
	(SUFFIX-SIZE 1)
	(AREA SYS:COMPILED-FUNCTION-AREA)
	(ENVIRONMENT))
  (DECLARE LT::(SIDE-EFFECTS REDUCIBLE))
  (LET ((HERE 0))
    (LABELS ((EVAL-IN-ENVIRONMENT (FORM)
	       (LET* ((OLD-ENV ENVIRONMENT)
		      (PLACE OLD-ENV))
		 (SYS:WITH-STACK-LIST (HERE-VAR 'HERE HERE)
		   (SYS:WITH-STACK-LIST* (NEW-VARS HERE-VAR (POP PLACE))
		     (SI:WITH-INTERPRETER-ENVIRONMENT
		       (ENV OLD-ENV NEW-VARS (POP PLACE) (POP PLACE) (POP PLACE) (POP PLACE))
		       (EVAL FORM ENV))))))
	     (ASSEMBLE-PACKED-INSTRUCTION (PACKED-INSTRUCTION)
	       (WHEN (TYPEP PACKED-INSTRUCTION 'FIXNUM)
		 (RETURN-FROM ASSEMBLE-PACKED-INSTRUCTION PACKED-INSTRUCTION))
	       (+ (DPB (I-LISP-COMPILER:OPCODE-FOR-INSTRUCTION (FIRST PACKED-INSTRUCTION))
		       SYS:%%PACKED-INSTRUCTION-OPCODE
		       0)
		  (LET ((OPERAND (SECOND PACKED-INSTRUCTION)))
		    (ETYPECASE OPERAND
		      (FIXNUM OPERAND)
		      (SYMBOL (SYMBOL-VALUE OPERAND))
		      (LIST
			(ECASE (FIRST OPERAND)
			  (FP
			    (DPB SYS:STACK-ADDRESSING-MODE-FRAME-POINTER
				 SYS:%%PACKED-INSTRUCTION-ADDRESSING-MODE
				 (SECOND OPERAND)))
			  (SP
			    (DPB SYS:STACK-ADDRESSING-MODE-STACK-POINTER
				 SYS:%%PACKED-INSTRUCTION-ADDRESSING-MODE
				 (IF (EQ (SECOND OPERAND) 'POP)
				     0
				     (+ 255. (SECOND OPERAND)))))
			  (LP
			    (DPB SYS:STACK-ADDRESSING-MODE-LOCAL-POINTER
				 SYS:%%PACKED-INSTRUCTION-ADDRESSING-MODE
				 (SECOND OPERAND)))
			  (IM
			    (DPB SYS:STACK-ADDRESSING-MODE-IMMEDIATE
				 SYS:%%PACKED-INSTRUCTION-ADDRESSING-MODE
				 (SECOND OPERAND)))
			  (EVAL
			    (EVAL-IN-ENVIRONMENT (SECOND OPERAND)))
			  (BRANCH-OFFSET
			    (LDB (BYTE 10 0)
				 (- (EVAL-IN-ENVIRONMENT (SECOND OPERAND))
				    HERE))))))))))
      (MULTIPLE-VALUE-BIND (IGNORE FUNCTION)
	  (SYS:MAKE-COMPILED-CODE
	    (+ (LENGTH CODE) (SYS:DEFSTORAGE-SIZE SYS:COMPILED-FUNCTION))
	    SUFFIX-SIZE
	    AREA)
	(DECLARE (IGNORE IGNORE))
	(SYS:WITH-BLOCK-REGISTERS (2)
	  (SETF (SYS:%BLOCK-REGISTER 2) FUNCTION)
	  (DOLIST (INSTRUCTION CODE)
	    (LET ((SEQUENCING (ECASE (FIRST INSTRUCTION)
				(+1 SYS:SEQUENCING-PC+1)
				(-1 SYS:SEQUENCING-PC-1)
				(+2 SYS:SEQUENCING-PC-EVEN+2-ODD+3)
				(FENCE SYS:SEQUENCING-FENCE)
				(NEXT SYS:CDR-NEXT)
				(NIL SYS:CDR-NIL)
				(NORMAL SYS:CDR-NORMAL)
				(ERROR 3))))
	      (SYS:%BLOCK-WRITE
		2
		(ECASE (SECOND INSTRUCTION)
		  (PACKED
		    ;; (sequencing PACKED even-half odd-half)
		    (LET ((EVEN
			    (PROG1
			      (ASSEMBLE-PACKED-INSTRUCTION (THIRD INSTRUCTION))
			      (INCF HERE)))
			  (ODD (ASSEMBLE-PACKED-INSTRUCTION (FOURTH INSTRUCTION))))
		      (INCF HERE)
		      (SYS:%SET-TAG
			(SYS:%LOGDPB (LDB SYS:%%ODD-INSTRUCTION-DATA-COMPONENT ODD)
				     SYS:%%Q-ODD-INSTRUCTION-WITHIN-POINTER
				     EVEN)
			(DPB SEQUENCING
			     SYS:%%Q-CDR-CODE-WITHIN-TAG
			     (+ SYS:DTP-PACKED-INSTRUCTION-60
				(LDB SYS:%%ODD-INSTRUCTION-TAG-COMPONENT ODD))))))
		  (IMMEDIATE
		    (PROG1
		      (LET ((INST (THIRD INSTRUCTION)))
			(SYS:%SET-TAG
			  INST
			  (DPB SEQUENCING SYS:%%Q-CDR-CODE-WITHIN-TAG (SYS:%TAG INST))))
		      (INCF HERE 2)))
		  (TAG
		    (LET ((THIRD (THIRD INSTRUCTION))
			  (FOURTH (FOURTH INSTRUCTION)))
		      (PROG1
			(SYS:%SET-TAG
			  FOURTH
			  (DPB SEQUENCING SYS:%%Q-CDR-CODE-WITHIN-TAG THIRD))
			(INCF HERE 2)))))))))
	FUNCTION))))

(DEFUN ASSEMBLE (CODE
		 &KEY
		 (AREA SYS:COMPILED-FUNCTION-AREA)
		 (ENVIRONMENT *ASSEMBLE-ENVIRONMENT*))
  ;; Expand all the forms, and determine sequencing information
  (LET ((TAGS NIL)
	(WAITING-TAGS NIL)
	(HERE 0)
	(CODE CODE)
	(FREE NIL)
	(INSTRUCTIONS NIL)
	(SUFFIX-SIZE 0))
    (FLET ((ASSIGN-TAGS (PLACE)
	     (LOOP WHILE WAITING-TAGS DOING
	       (LET ((TAG (POP WAITING-TAGS)))
		 (PUSH (LIST TAG PLACE) TAGS)))))
      (LOOP WHILE CODE DOING
	(LET ((FORM (POP CODE)))
	  (ETYPECASE FORM
	    (SYMBOL
	      (PUSH FORM WAITING-TAGS))
	    (CONS
	      (CASE (FIRST FORM)
		((PACKED)
		 (WHEN (> SUFFIX-SIZE 0)
		   (ERROR "Packed instructions may not appear in the suffix"))
		 (COND ((= HERE 0)
			;; Sequencing will be +2
			;; Can't use backquote because it shares the tail (0).
			(PUSH (LIST '+2 'PACKED (CDR FORM) '0) INSTRUCTIONS)
			(ASSIGN-TAGS HERE)
			(INCF HERE 2))
		       ((ODDP HERE)
			(LET ((INSTRUCTION (FIRST INSTRUCTIONS)))
			  (SETF (FIRST INSTRUCTION) +1)	;Sequencing
			  (SETF (FOURTH INSTRUCTION) (CDR FORM)))
			(ASSIGN-TAGS HERE)
			(INCF HERE))
		       (FREE
			(SETF (FIRST (FIRST INSTRUCTIONS)) -1)
			(SETF (FOURTH FREE) (CDR FORM))
			(SETQ FREE NIL)
			(ASSIGN-TAGS (- HERE 3)))
		       (T
			(PUSH (LIST '+2 'PACKED (CDR FORM) '0) INSTRUCTIONS)
			(ASSIGN-TAGS HERE)
			(INCF HERE))))
		((SKIP)
		 (COND ((ODDP HERE) (INCF HERE))
		       (T (ERROR "Can only skip an odd instruction"))))
		((ENTRY-REST-ACCEPTED ENTRY-REST-NOT-ACCEPTED)
		 (COND ((ODDP HERE)
			(SETQ FREE NIL)
			(INCF HERE))
		       (T (SETQ FREE NIL)))
		 (PUSH `(+2 PACKED
			    (,(FIRST FORM) ,(SECOND FORM))
			    ,(THIRD FORM))
		       INSTRUCTIONS)
		 (ASSIGN-TAGS HERE)
		 (INCF HERE 2))
		((IMMEDIATE TAG)
		 (WHEN (= HERE 0)
		   (PUSH `(+2 PACKED (BRANCH 2) 0) INSTRUCTIONS)
		   (INCF HERE 2))
		 (WHEN (> SUFFIX-SIZE 0)
		   (INCF SUFFIX-SIZE))
		 (COND ((ODDP HERE)
			(SETQ FREE (FIRST INSTRUCTIONS))
			(INCF HERE))
		       (T (SETQ FREE NIL)))
		 (PUSH (CONS +2 FORM) INSTRUCTIONS)
		 (ASSIGN-TAGS HERE)
		 (INCF HERE 2))
		((SUFFIX)
		 (COND ((ODDP HERE)
			(SETQ FREE (FIRST INSTRUCTIONS))
			(INCF HERE))
		       (T (SETQ FREE NIL)))
		 (PUSH `(FENCE IMMEDIATE ,(SECOND FORM)) INSTRUCTIONS)
		 (ASSIGN-TAGS HERE)
		 (INCF HERE 2)
		 (INCF SUFFIX-SIZE))
		((PROGN)
		 (SETQ CODE (APPEND (CDR FORM) CODE)))
		(OTHERWISE
		  (LET ((EXPANSION (MACROEXPAND-1 FORM ENVIRONMENT)))
		    (WHEN (EQ EXPANSION FORM)
		      (ERROR "Don't know what to do with ~s" FORM))
		    (PUSH EXPANSION CODE)))))))))
    (LET* ((PLACE ENVIRONMENT))
      (SI:WITH-INTERPRETER-ENVIRONMENT
	(ENV ENVIRONMENT
	     (APPEND TAGS (POP PLACE))
	     (POP PLACE) (POP PLACE) (POP PLACE) (POP PLACE))
	(ASSEMBLE-INTERNAL
	  (NREVERSE INSTRUCTIONS)
	  :SUFFIX-SIZE SUFFIX-SIZE
	  :AREA AREA
	  :ENVIRONMENT ENV)))))

(DEF-ASSEMBLER-MACRO SAVE-DISPATCH-ARGUMENT ()
  `(PACKED PUSH (FP 3)))

(DEF-ASSEMBLER-MACRO RESTORE-DISPATCH-ARGUMENT (&OPTIONAL FIXUP-TOS)
  `(PROGN
     ,@(WHEN FIXUP-TOS
	 `((PACKED MOVEM (SP 0))))
     (PACKED POP (FP 3))))

(DEF-ASSEMBLER-MACRO UNWRAP-EXTRA-ARGUMENT ()
  `(PROGN
     (PACKED SET-TO-CDR-PUSH-CAR (FP 2))
     (PACKED %JUMP (SP POP))))

(DEFUN SIMPLE-CONSTANT-P (CONSTANT)
  (OR (NULL CONSTANT)
      (TYPEP CONSTANT '(INTEGER -255. 255.))))

(DEF-ASSEMBLER-MACRO PUSH-SIMPLE-CONSTANT (CONSTANT)
  (ETYPECASE CONSTANT
    (NULL
      `(PACKED ZEROP (IM 1)))
    ((INTEGER 0 255.)
     `(PACKED PUSH (IM ,CONSTANT)))
    ((INTEGER -255. -1.)
     `(PACKED UNARY-MINUS (IM ,CONSTANT)))))

(DEF-ASSEMBLER-MACRO JUMP-CONSTANT-EXTRA-ARGUMENT (CONSTANT)
  `(PROGN (PACKED PUSH (FP 2))
	  (PUSH-SIMPLE-CONSTANT ,CONSTANT)
	  (PACKED POP (FP 2))
	  (PACKED %JUMP (SP POP))))

(DEF-ASSEMBLER-MACRO ENSURE (N-REQUIRED REST-P)
  (LET ((TAG (GENSYM)))
    (IF REST-P
	`(PROGN
	   (PACKED %READ-INTERNAL-REGISTER SYS:%REGISTER-CR.ARGUMENT-SIZE)
	   (PACKED GREATERP (IM ,(1- (+ N-REQUIRED 3))))
	   (PACKED BRANCH-TRUE (BRANCH-OFFSET ,TAG))
	   (ENTRY-REST-ACCEPTED ,(+ N-REQUIRED 3) ,(+ N-REQUIRED 3))
	   (PACKED BRANCH (BRANCH-OFFSET ,TAG))
	   (SKIP)
	   ,TAG)
	`(ENTRY-REST-NOT-ACCEPTED ,(+ N-REQUIRED 3) ,(+ N-REQUIRED 3)))))

(DEF-ASSEMBLER-MACRO SET-DISPATCH-ARGUMENT (POSITION)
  (IF (= POSITION 0)
      `(PACKED MOVEM (FP 3))
      `(PROGN
	 (PACKED PUSH (FP ,(+ POSITION 3)))
	 (PACKED POP (FP 3)))))

(DEF-ASSEMBLER-MACRO CLASS ()
  `(PACKED %GENERIC-DISPATCH 0))

(DEF-ASSEMBLER-MACRO EQ ()
  `(PACKED %MESSAGE-DISPATCH 0))

(DEF-ASSEMBLER-MACRO EQL (TYPE)
  ;; Key is in FP|3
  ;; Fake instance is in FP|2
  `(PROGN
     ;; Push the unboxed key onto the stack if it will help
     ,@(ECASE TYPE
	 ((SYS:DTP-DOUBLE-FLOAT SYS:DTP-COMPLEX SYS:DTP-BIG-RATIO)
	  `((PACKED PUSH (FP 3))
	    (PACKED %SET-TAG (IM ,SYS:DTP-LIST))
	    (PACKED SET-TO-CDR-PUSH-CAR (SP 0))))
	 ((SYS:DTP-BIGNUM) NIL))
     ;; Put a pointer to the mask in BAR-1
     (PACKED PUSH (FP 2))
     (PACKED %MEMORY-READ ,(SI:PACK-BLOCK-BITS :CYCLE-TYPE SYS:%MEMORY-HEADER))
     (PACKED %WRITE-INTERNAL-REGISTER ,SYS:%REGISTER-BAR-1)
     ;; TOS is smashed at this point
     ;; Mask
     (PACKED %BLOCK-1-READ ,(SI:PACK-BLOCK-BITS :CYCLE-TYPE SYS:%MEMORY-DATA-READ
						:FIXNUM-ONLY T
						:PREFETCH NIL))
     ;; Table address
     (PACKED %BLOCK-1-READ ,(SI:PACK-BLOCK-BITS :CYCLE-TYPE SYS:%MEMORY-DATA-READ
						:PREFETCH NIL))
     ;; Compute the hash of the key
     ,@(ECASE TYPE
	 (SYS:DTP-BIGNUM
	   ;; Just call SELECTOR-HASH, since it's complicated
	   `((TAG ,SYS:DTP-CALL-INDIRECT-PREFETCH ,(LOCF #'SELECTOR-HASH))
	     (PACKED PUSH (FP 3))
	     (PACKED FINISH-CALL-N ,(DPB SYS:VALUE-DISPOSITION-VALUE
					 SYS:%%PACKED-INSTRUCTION-VALUE-DISPOSITION
					 2))))
	 (SYS:DTP-DOUBLE-FLOAT
	   ;; Just XOR the two halves
	   `((PACKED PUSH (SP -3))
	     (PACKED LOGXOR (SP -3))))
	 (SYS:DTP-BIG-RATIO
	   ;; If the numerator and denominator are fixnums, just XOR them, otherwise
	   ;; branch out to call SELECTOR-HASH.
	   `((PACKED PUSH (SP -3))
	     (PACKED TYPE-MEMBER-NO-POP ,(I-LISP-COMPILER:COMPUTE-TYPE-MEMBER-OPERAND
					   (LIST SYS:DTP-FIXNUM)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-NO-POP))
	     (PACKED PUSH (SP -3))
	     (PACKED TYPE-MEMBER-NO-POP ,(I-LISP-COMPILER:COMPUTE-TYPE-MEMBER-OPERAND
					   (LIST SYS:DTP-FIXNUM)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-POP))
	     (PACKED LOGXOR (SP POP))
	     MASK))
	 (SYS:DTP-COMPLEX
	   ;; If the numerator and denominator are fixnums or single floats, inline
	   ;; the hash computation, otherwise branch out to a call to SELECTOR-HASH.
	   `((PACKED PUSH (SP -2))
	     (PACKED TYPE-MEMBER-NO-POP ,(I-LISP-COMPILER:COMPUTE-TYPE-MEMBER-OPERAND
					   (LIST SYS:DTP-FIXNUM SYS:DTP-SINGLE-FLOAT)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-NO-POP))
	     (PACKED %SET-TAG (IM ,SYS:DTP-FIXNUM))
	     (PACKED PUSH (SP -4))
	     (PACKED TYPE-MEMBER-NO-POP ,(I-LISP-COMPILER:COMPUTE-TYPE-MEMBER-OPERAND
					   (LIST SYS:DTP-FIXNUM SYS:DTP-SINGLE-FLOAT)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-POP))
	     (PACKED %SET-TAG (IM ,SYS:DTP-FIXNUM))
	     ;; Strange-LDB style (ROT 7)
	     (PACKED LDB ,(DPB #o37 (BYTE 5 5) (LDB (BYTE 5 0) 7)))
	     (PACKED LOGXOR (SP POP))
	     MASK)))	     
     ;; Mask hash
     (PACKED LOGAND (SP -2))
     ;; Multiply by 3
     (PACKED MOVEM (SP -2))
     ;; Strange-LDB style (ROT 1)
     (PACKED LDB ,(DPB #o37 (BYTE 5 5) (LDB (BYTE 5 0) 1)))
     (PACKED ADD (SP -2))
     ;; Add to hash address
     (PACKED %POINTER-PLUS (SP POP))
     ;; Put it in BAR-1
     (PACKED %WRITE-INTERNAL-REGISTER #.SYS:%REGISTER-BAR-1)
     ;; TOS is smashed at this point
     (PACKED SET-SP-TO-ADDRESS (SP -1))
     SEARCH
     (PACKED %BLOCK-1-READ #.(SI:PACK-BLOCK-BITS :CYCLE-TYPE SYS:%MEMORY-DATA-READ
						 :PREFETCH NIL))
     ;; TOS holds the key from the table.  Check for NULL first, since this is the
     ;; easiest thing to do.  In some usages, this will be the most common case, in
     ;; others it will not be.
     (PACKED BRANCH-TRUE-AND-NO-POP (BRANCH-OFFSET NOT-NULL))
     ;; NIL in table, we are in a MISS.
     ;; Handler PC for miss
     (PACKED %BLOCK-1-READ #.(SI:PACK-BLOCK-BITS :CYCLE-TYPE SYS:%MEMORY-DATA-READ
						 :PREFETCH NIL))
     ;; Swap FP|2 and FP|3
     (PACKED PUSH (FP 2))
     (PACKED PUSH (FP 3))
     (PACKED POP (FP 2))
     (PACKED POP (FP 3))
     ;; If we unboxed the key, pop it off
     ,@(ECASE TYPE
	 ((SYS:DTP-DOUBLE-FLOAT SYS:DTP-BIG-RATIO SYS:DTP-COMPLEX)
	  `((PACKED SET-SP-TO-ADDRESS-SAVE-TOS (SP -2))))
	 ((SYS:DTP-BIGNUM) NIL))
     (PACKED %JUMP (SP POP))
     NOT-NULL
     ,@(ECASE TYPE
	 ((SYS:DTP-BIGNUM)
	  `((PACKED EQL (FP 3))
	    (PACKED BRANCH-FALSE (BRANCH-OFFSET COLLISION))))
	 ((SYS:DTP-DOUBLE-FLOAT SYS:DTP-BIG-RATIO SYS:DTP-COMPLEX)
	  `((PACKED %SET-TAG (IM ,SYS:DTP-LIST))
	    (PACKED SET-TO-CDR-PUSH-CAR (SP 0))
	    (PACKED EQL (SP -2))
	    (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET COLLISION))
	    (PACKED EQL (SP -2))
	    (PACKED BRANCH-FALSE (BRANCH-OFFSET COLLISION)))))
     ;; Handler
     (PACKED %BLOCK-1-READ ,(SI:PACK-BLOCK-BITS :CYCLE-TYPE SYS:%MEMORY-DATA-READ
						:PREFETCH NIL))
     ;; Extra argument
     (PACKED %BLOCK-1-READ ,(SI:PACK-BLOCK-BITS :CYCLE-TYPE SYS:%MEMORY-DATA-READ
						:PREFETCH NIL))
     ;; Move "SELF" to FP|3
     (PACKED PUSH (FP 2))
     (PACKED POP (FP 3))
     ;; Set extra argument
     (PACKED POP (FP 2))
     ;; If we unboxed the key, pop it off
     ,@(ECASE TYPE
	 ((SYS:DTP-DOUBLE-FLOAT SYS:DTP-BIG-RATIO SYS:DTP-COMPLEX)
	  `((PACKED SET-SP-TO-ADDRESS-SAVE-TOS (SP -2))))
	 ((SYS:DTP-BIGNUM) NIL))
     (PACKED %JUMP (SP POP))
     COLLISION
     ;; Add 2 to BAR-1 and try again.
     (PACKED %READ-INTERNAL-REGISTER ,SYS:%REGISTER-BAR-1)
     (PACKED %POINTER-PLUS (IM 2))
     (PACKED %WRITE-INTERNAL-REGISTER ,SYS:%REGISTER-BAR-1)
     (PACKED BRANCH (BRANCH-OFFSET SEARCH))
     ;; Call out to SELECTOR-HASH
     ,@(ECASE TYPE
	 ((SYS:DTP-BIG-RATIO SYS:DTP-COMPLEX)
	  `(SLOW-HASH-POP
	     (PACKED SET-SP-TO-ADDRESS (SP -1))
	     SLOW-HASH-NO-POP
	     (TAG ,SYS:DTP-CALL-INDIRECT-PREFETCH ,(LOCF #'SELECTOR-HASH))
	     (PACKED PUSH (FP 3))
	     (PACKED FINISH-CALL-N ,(DPB SYS:VALUE-DISPOSITION-VALUE
					 SYS:%%PACKED-INSTRUCTION-VALUE-DISPOSITION
					 2))
	     (PACKED BRANCH (BRANCH-OFFSET MASK))))
	 ((SYS:DTP-DOUBLE-FLOAT SYS:DTP-BIGNUM)
	  NIL))
     ))

(DEF-ASSEMBLER-MACRO EXTRA-ARGUMENT-FROM-TABLE ()
  `(PROGN
     ;; Skip around the odd half of the first instruction, which is needed by the
     ;; linker.
     (PACKED BRANCH (BRANCH-OFFSET TAG))
     TAG
     (TAG ,SYS:DTP-CALL-INDIRECT ,(LOCF #'DISPATCHING-FUNCALLABLE-INSTANCE-TABLE))
     ;; Get the generic function from the extra argument.  This has to agree with
     ;; STORAGE.
     (PACKED PUSH (FP 2))
     (PACKED %MEMORY-READ-ADDRESS 16)
     (PACKED %POINTER-PLUS (IM 255.))
     (PACKED %MEMORY-READ 16.)
     (PACKED FINISH-CALL-N ,(DPB SYS:VALUE-DISPOSITION-VALUE
				 SYS:%%PACKED-INSTRUCTION-VALUE-DISPOSITION
				 2))
     ;; When there are no dispatches, the table is used to hold the extra argument
     ;; information.  Pop it into the extra argument and proceed as in an unwrap.
     (PACKED POP (FP 2))))

(DEF-ASSEMBLER-MACRO DISPATCH-HANDLER (&BODY FORMS)
  `(PROGN
     ,@FORMS
     (SUFFIX (NIL (DISPATCH ,@(COPY-LIST FORMS))))))

(DEFMACRO DEF-ASSEMBLED (NAME &BODY BODY)
  `(SYS:FDEFINE ',NAME ',(ASSEMBLE BODY) T))

(DEFMACRO DEF-WIRED-ASSEMBLED (NAME &BODY BODY &ENVIRONMENT ENVIRONMENT)
  `(PROGN
     (EVAL-WHEN (:COMPILE-TOPLEVEL)
       (SI:DECLARE-STORAGE-CATEGORY-COMPILE :FUNCTION ',NAME :WIRED))
     ,@(UNLESS (COMPILE-FILE-ENVIRONMENT-P ENVIRONMENT)
	 (I-LISP-COMPILER:WIRED-COMPILE-TO-CORE-QUERY NAME))
     (SYS:FDEFINE ',NAME
		  ',(ASSEMBLE BODY :AREA (IF (COMPILE-FILE-ENVIRONMENT-P ENVIRONMENT)
					     SYS:DEFAULT-CONS-AREA
					     SYS:WIRED-CONTROL-TABLES))
		  T)))
