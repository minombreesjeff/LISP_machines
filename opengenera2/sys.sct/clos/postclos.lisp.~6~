;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(car (push "%Z% %M% %I% %E% %U%" system::*module-identifications*))

(in-package 'system)

(setf (sys%get 'clos-internals::funcallable-instance 'structure-describer) 'describe-object-caller)

(defun describe-object-caller (object)
  (clos-internals::describe-object object *standard-output*))

;(setq *pdlov-initial-limit* 80000. *pdlov-emergency-incr* 15000.)
;(initialize-pdlov-capability)

;;; Redefine some CLOE I/O functions as generic functions.

(fmakunbound 'streamp)
(clos:defgeneric streamp (stream))

(clos:defmethod streamp (stream)
  (lisp-stream-p stream))

(fmakunbound 'input-stream-p)
(clos:defgeneric input-stream-p (stream))

(clos:defmethod input-stream-p (stream)		;cl332
  (and (lisp-stream-p stream)
       (funcall (the compiled-function (lisp-stream-handler stream)) 
		stream :input-stream-p)))

(fmakunbound 'output-stream-p)
(clos:defgeneric output-stream-p (stream))

(clos:defmethod output-stream-p (stream)	;cl332
  (and (lisp-stream-p stream)
       (funcall (the compiled-function (lisp-stream-handler stream)) 
		stream :output-stream-p)))


(fmakunbound 'stream-element-type)
(clos:defgeneric stream-element-type (stream))

(clos:defmethod stream-element-type (stream)	;cl332
  (unless (lisp-stream-p stream)
    (error "Not a stream."))
  (funcall (the compiled-function (lisp-stream-handler stream)) 
	   stream :stream-element-type))


(fmakunbound 'close)
(clos:defgeneric close (stream &key abort))

(clos:defmethod close (stream &key abort)
  (if (lisp-stream-p stream)
      (funcall (lisp-stream-handler stream) stream :close)
      (sys%close stream)))

(fmakunbound 'pathname)
(clos:defgeneric pathname (path))		;cl413

(clos:defmethod pathname (path)
  (cond
    ((pathnamep path) path)
    ((lisp-stream-p path) (lisp-stream-pathname path))
    (t (error "Cannot make a pathname out of: ~a.~%" path))))

(clos:defmethod pathname ((path string))
  (parse-namestring path))

(clos:defmethod pathname ((path symbol))
  (parse-namestring (string path)))

(fmakunbound 'truename)
(clos:defgeneric truename (path))

(clos:defmethod truename (path &aux field char)	;cl413
  (or (probe-file path) (error "File ~a doesn't exist~%" path)))

(fmakunbound 'file-position)
(clos:defgeneric file-position (stream &optional position))

(clos:defmethod file-position (stream &optional (position nil setp))
  (unless (lisp-stream-p stream)
    (error "Not a stream."))
  (if setp
      (progn
	(cond ((eq position :start) (setq position 0))
	      ((eq position :end)   (setq position -1))
	      ((not (integerp position))
	       (error "Bad position to FILE-POSITION (~S)." position)))
	(funcall (the compiled-function (lisp-stream-handler stream)) 
		 stream :position-set position))
      (funcall (the compiled-function (lisp-stream-handler stream))
	       stream :position)))
