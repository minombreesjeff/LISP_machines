;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10; Package: CLOS-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(IN-PACKAGE :CLOS-INTERNALS)

(DEFMETHOD COMPUTE-SLOT-METHODS ((CLASS BUILT-IN-CLASS) (ENVIRONMENT T))
  NIL)

(DEFMETHOD COMPUTE-SLOT-METHODS ((CLASS STANDARD-CLASS) (ENVIRONMENT T))
  (DECLARE (NOTINLINE MAKE-INSTANCE))
  (LET ((CLASS-NAME (CLASS-NAME CLASS))
	(ALL-GENERICS NIL))
    (FLET ((CHECK-NAME (NAME TYPE SLOT)
	     (COND ((MEMBER NAME ALL-GENERICS :TEST #'EQUAL)
		    (WARN "The generic function ~s is defined multiple times in the class ~s~@
                           The use as a ~a for the slot ~s will be ignored."
			  NAME CLASS TYPE (SLOT-DEFINITION-NAME SLOT))
		    NIL)
		   (T
		    (PUSH NAME ALL-GENERICS)
		    T)))
	   (MAKE-READER (SLOT NAME)
	     (LET* ((GENERIC (ENSURE-GENERIC-FUNCTION NAME :ENVIRONMENT ENVIRONMENT))
		    (METHOD
		      (MAKE-INSTANCE 'STANDARD-READER-METHOD
				     :LAMBDA-LIST (LIST CLASS-NAME)
				     :SPECIALIZERS (LIST CLASS)
				     :SLOT-NAME (SLOT-DEFINITION-NAME SLOT))))
	       (LET ((*INHIBIT-DISPATCH-CACHE-UPDATING* T))
		 ;; These will get updated when the class is finalized.
		 (ADD-METHOD GENERIC METHOD))
	       METHOD))
	   (MAKE-WRITER (SLOT NAME)
	     (LET* ((GENERIC (ENSURE-GENERIC-FUNCTION NAME :ENVIRONMENT ENVIRONMENT))
		    (METHOD
		      (MAKE-INSTANCE 'STANDARD-WRITER-METHOD
				     :LAMBDA-LIST (LIST 'NEW-VALUE CLASS-NAME)
				     :SPECIALIZERS (LIST (FIND-CLASS T) CLASS)
				     :SLOT-NAME (SLOT-DEFINITION-NAME SLOT))))
	       (LET ((*INHIBIT-DISPATCH-CACHE-UPDATING* T))
		 ;; These will get updated when the class is finalized.
		 (ADD-METHOD GENERIC METHOD))
	       METHOD))
	   #+(OR Genera Minima)
	   (MAKE-LOCATOR (SLOT NAME)
	     (LET* ((LAMBDA-LIST (LIST CLASS-NAME))
		    (GENERIC (ENSURE-GENERIC-FUNCTION NAME :ENVIRONMENT ENVIRONMENT))
		    (METHOD
		      (MAKE-INSTANCE 'STANDARD-LOCATOR-METHOD
				     :LAMBDA-LIST LAMBDA-LIST
				     :SPECIALIZERS (LIST CLASS)
				     :SLOT-NAME (SLOT-DEFINITION-NAME SLOT))))
	       (LET ((*INHIBIT-DISPATCH-CACHE-UPDATING* T))
		 ;; These will get updated when the class is finalized.
		 (ADD-METHOD GENERIC METHOD))
	       METHOD)))
      (DOLIST (SLOT (CLASS-DIRECT-SLOTS CLASS))
	(LET ((METHODS NIL))
	  (DOLIST (READER (SLOT-DEFINITION-READERS SLOT))
	    (WHEN (CHECK-NAME READER 'READER SLOT)
	      (PUSH (MAKE-READER SLOT READER) METHODS)))
	  (DOLIST (WRITER (SLOT-DEFINITION-WRITERS SLOT))
	    (WHEN (CHECK-NAME WRITER 'WRITER SLOT)
	      (PUSH (MAKE-WRITER SLOT WRITER) METHODS)))
	  #+(OR Genera Minima)
	  (DOLIST (LOCATOR (SLOT-DEFINITION-LOCATORS SLOT))
	    (WHEN (CHECK-NAME LOCATOR 'LOCATOR SLOT)
	      (PUSH (MAKE-LOCATOR SLOT LOCATOR) METHODS)))
	  (SETF (SLOT-VALUE SLOT 'METHODS) METHODS))))))

#+Genera
(DEFMETHOD COMPUTE-SLOT-METHODS ((CLASS FLAVOR-CLASS) (ENVIRONMENT T))
  NIL)

(DEFMETHOD COMPUTE-SLOTS ((CLASS STANDARD-CLASS))
  (LET ((CPL (CLASS-PRECEDENCE-LIST CLASS))
	(NAMES NIL)
	(EFFECTIVE-SLOTS NIL)
	(I (PROGN #+(OR Genera Minima) 1
		  #+CLOE-Runtime 0)))
    (DECLARE (FIXNUM I))
    (DOLIST (CLASS (REVERSE CPL))
      (DOLIST (SLOT (CLASS-DIRECT-SLOTS CLASS))
	(PUSHNEW (SLOT-DEFINITION-NAME SLOT) NAMES)))
    (DOLIST (NAME NAMES)
      (LET ((DIRECT-SLOTS
	      (MAPCAR #'(LAMBDA (CLASS)
			  (FIND NAME (CLASS-DIRECT-SLOTS CLASS)
				:KEY #'SLOT-DEFINITION-NAME))
		      CPL)))
	(PUSH (COMPUTE-EFFECTIVE-SLOT-DEFINITION CLASS NAME DIRECT-SLOTS)
	      EFFECTIVE-SLOTS)))
    (DOLIST (SLOT EFFECTIVE-SLOTS)
      (ECASE (SLOT-DEFINITION-ALLOCATION SLOT)
	(:INSTANCE
	  (SETF (SLOT-DEFINITION-LOCATION SLOT) I)
	  (INCF I))
	(:CLASS)))
    EFFECTIVE-SLOTS))

(DEFMETHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION ((CLASS STANDARD-CLASS) NAME DIRECT-SLOTS)
  (LET ((ALLOCATION NIL)
	(INITFORM NIL)
	(INITFUNCTION NIL)
	(INITFORM-INLINABLE NIL)
	(TYPES NIL)
	(INITARGS NIL)
	(DOCUMENTATION NIL)
	(LOCATION NIL))
    (MAPC #'(LAMBDA (SLOT)
	      (WHEN SLOT
		(SETQ ALLOCATION (SLOT-DEFINITION-ALLOCATION SLOT))
		(SETQ LOCATION
		      (IF (EQ ALLOCATION ':CLASS)
			  (SLOT-DEFINITION-LOCATION SLOT)
			  NIL))
		(LET ((TEMP (SLOT-DEFINITION-INITFUNCTION SLOT)))
		  (WHEN TEMP
		    (SETQ INITFUNCTION TEMP
			  INITFORM (SLOT-DEFINITION-INITFORM SLOT)
			  INITFORM-INLINABLE (SLOT-DEFINITION-INITFORM-INLINABLE SLOT))))
		(LET ((TEMP (SLOT-DEFINITION-TYPE SLOT)))
		  (UNLESS (EQ TEMP T)
		    (PUSHNEW TEMP TYPES :TEST #'EQUAL)))
		(MAPC #'(LAMBDA (INITARG)
			  (PUSH INITARG INITARGS))
		      (SLOT-DEFINITION-INITARGS SLOT))
		(LET ((TEMP (DOCUMENTATION SLOT)))
		  (WHEN TEMP (SETQ DOCUMENTATION TEMP)))))
	  ;; Scan slots from least-specific class first
	  (REVERSE DIRECT-SLOTS))
    (MAKE-INSTANCE (EFFECTIVE-SLOT-DEFINITION-CLASS CLASS)
		   :NAME NAME
		   :ALLOCATION (OR ALLOCATION :INSTANCE)
		   :INITFORM INITFORM
		   :INITFUNCTION INITFUNCTION
		   'INITFORM-INLINABLE INITFORM-INLINABLE
		   :TYPE (COND ((NULL TYPES) T)
			       ((NULL (REST TYPES)) (FIRST TYPES))
			       (T `(AND ,@(NREVERSE TYPES))))
		   :INITARGS (REVERSE INITARGS)
		   :LOCATION LOCATION
		   :DOCUMENTATION DOCUMENTATION)))

(DEFMETHOD SHARED-INITIALIZE :AFTER
	   ((SLOT-DEFINITION SLOT-DEFINITION)
	    (SLOT-NAMES T)
	    &KEY
	    (NAME NIL NAMEP)
	    (INITFORM NIL INITFORMP)
	    (INITFUNCTION NIL INITFUNCTIONP)
	    ((INITFORM-INLINABLE INITFORM-INLINABLE) NIL)
	    (TYPE T TYPE-P)
	    (ALLOCATION :INSTANCE ALLOCATIONP)
	    (INITARGS NIL INITARGSP)
	    (DOCUMENTATION NIL DOCUMENTATIONP)
	    ((INITIALIZATION-TYPE INITIALIZATION-TYPE) NIL))
  (LET ((INITIALIZEP (NULL INITIALIZATION-TYPE)))
    (WHEN INITIALIZEP
      (UNLESS NAMEP
	(ERROR "A name must be supplied")))
    (UNLESS (EQ INITFORMP INITFUNCTIONP)
      (ERROR "If either :INITFORMP or :INITFUNCTIONP is specified, the other must also be"))
    (UNLESS (OR (NULL DOCUMENTATION)
		(TYPEP DOCUMENTATION 'STRING))
      (ERROR ":DOCUMENTATION must be a string or NIL"))
    (UNLESS (OR (AND INITIALIZEP (NULL ALLOCATIONP))
		(EQ ALLOCATION ':INSTANCE)
		(EQ ALLOCATION ':CLASS))
      (ERROR ":ALLOCATION must be one of :INSTANCE or :CLASS"))
    (WHEN NAMEP
      (SETF (SLOT-VALUE SLOT-DEFINITION 'NAME) NAME))
    (WHEN (OR INITIALIZEP INITFORMP)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'INITFORM) INITFORM)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'INITFORM-INLINABLE) INITFORM-INLINABLE))
    (WHEN (OR INITIALIZEP INITFUNCTIONP)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'INITFUNCTION) INITFUNCTION))
    (WHEN (OR INITIALIZEP TYPE-P)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'TYPE) TYPE))
    (WHEN (OR INITIALIZEP ALLOCATIONP)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'ALLOCATION) ALLOCATION))
    (WHEN (OR INITIALIZEP INITARGSP)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'INITARGS) INITARGS))
    (WHEN (OR INITIALIZEP DOCUMENTATIONP)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'DOCUMENTATION) DOCUMENTATION))))

(DEFMETHOD SHARED-INITIALIZE :AFTER
	   ((SLOT-DEFINITION DIRECT-SLOT-DEFINITION)
	    (SLOT-NAMES T)
	    &KEY
	    (READERS NIL READERS-P)
	    (WRITERS NIL WRITERS-P)
	    #+(OR Genera Minima)
	    (LOCATORS NIL LOCATORS-P)
	    ((INITIALIZATION-TYPE INITIALIZATION-TYPE) NIL))
  (LET ((INITIALIZEP (NULL INITIALIZATION-TYPE)))
    (WHEN (OR INITIALIZEP READERS-P)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'READERS) READERS))
    (WHEN (OR INITIALIZEP WRITERS-P)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'WRITERS) WRITERS))
    #+(OR Genera Minima)
    (WHEN (OR INITIALIZEP LOCATORS-P)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'LOCATORS) LOCATORS))))

(DEFMETHOD SHARED-INITIALIZE :AFTER
	   ((SLOT-DEFINITION EFFECTIVE-SLOT-DEFINITION)
	    (SLOT-NAMES T)
	    &KEY
	    (LOCATION NIL LOCATIONP)
	    ((INITIALIZATION-TYPE INITIALIZATION-TYPE) NIL))
  (LET ((INITIALIZEP (NULL INITIALIZATION-TYPE)))
    (WHEN (OR INITIALIZEP LOCATIONP)
      (SETF (SLOT-VALUE SLOT-DEFINITION 'LOCATION) LOCATION))))

(DEFMETHOD REINITIALIZE-INSTANCE
	   ((SLOT-DEFINITION SLOT-DEFINITION) &REST REST)
  (DECLARE (IGNORE REST))
  (ERROR "Slot definitions may not be redefined"))
