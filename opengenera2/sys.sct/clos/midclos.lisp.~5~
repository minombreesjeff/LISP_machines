;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(in-package 'system)

(defun typep (object type)			;cl73
  (let ((type-symbol (if (consp type) (first type) type)))
    (cond ((symbolp type-symbol)
	   (let ((meta-type (sys%get type-symbol 'metatype)))
	     (if meta-type
		 (funcall (if (symbolp meta-type) (symbol-function meta-type) meta-type)
			  object type)
		 (let ((type-abbrev-fun (sys%get type-symbol 'typedef))
		       (type-args (if (consp type) (cdr type)))
		       (info nil))
		   (cond (type-abbrev-fun
			  (typep object
				 (apply (if (symbolp type-abbrev-fun) 
					    (symbol-function type-abbrev-fun) 
					    type-abbrev-fun)
					type-args)))
			 ((eq type nil) nil)	; +++rl kludge till we can deftype nil
			 ((and (symbolp type-symbol)
			       (setq info (sys%get type-symbol 'defstruct-info)))
			  (if (and (not (eq type type-symbol)) (cdr type))
			      (error "Structure type specifier ~S may not be qualified." type)
			      (runtime-structure-typep object type-symbol info)))
			 ((setq info (closi::find-class type-symbol nil))
			  (if (member info (closi::class-precedence-list (closi::class-of object))) t nil))
			 (t (error "~S is not a recognized type specifier." type)))))))
	  ((and (eq type type-symbol) (closi::instancep type))
	   (if (member type (closi::class-precedence-list (closi::class-of object))) t nil))
	  (t (error "~S is an invalid type specifier." type)))))


(in-package 'closi)


(defun instance-ref-trap (bitcode instance arg1 &optional arg2 arg3)
  #+(OR Genera CLOE-Runtime) (DECLARE (DBG::ERROR-REPORTER))
  (declare (fixnum bitcode index) (ignore bitcode))
  (if (or t *clos-initialized-p*)
      (cond ((not (logtest bitcode sys::irtrap$m-mapped))
	     ;;Has to be instance-ref.
	     ;;(assert (not (logtest bitcode sys::irtrap$m-set)))
	     (slot-unbound-from-index instance arg1))
	    ((logtest bitcode sys::irtrap$m-set)
	     ;;Mapped instance set.  Can only get here if the code got confused.
	     (let ((mapping-table arg1) (offset arg2) (value arg3))
	       (error "Mapped slot store failed, mapping ~S through ~S at index ~S."
		      instance mapping-table offset)))
	    (t (let ((mapping-table arg1) (offset arg2))
		 ;;Mapped instance ref.  Can get here if either the code got confused,
		 ;; or the slot is unbound.
		 (let ((idx (%mapping-table-ref mapping-table offset)))
		   (if (and (typep idx 'fixnum)
			    (cond ((instancep instance) (not (%instance-slot-boundp instance idx)))
				  ((funcallable-instance-p instance))
				  (not (%funcallable-instance-slot-boundp instance idx))))
		       (slot-unbound-from-index instance idx)
		       (error "Mapped slot-value failed, mapping ~S through ~S at index ~S."
			      instance mapping-table offset))))))
      (error "Unbound slot or mapped instance ref trap.")))



(in-package 'system)


(defun clos-class-typefoo-cogitator (t1 t2 env &aux incl1 incl2)
  (cond ((eq t1 t2) :equal)
	((or (not (class-finalized-p t1)) (not (class-finalized-p t2))) :unequal)
	(t (setq incl1 (clos-internals::class-precedence-list t1)
		 incl2 (clos-internals::class-precedence-list t2))
	   (cond ((member t1 incl2) :supertype)
		 ((member t2 incl1) :subtype)
		 ((some #'(lambda (c) (member c incl2)) (the list incl1)) :overlapping)
		 (t :unequal)))))


(defparameter *clos-typefoo*
	      (let ((tf (make-typefoo)))
		(setf (typefoo-name tf) 'clos-internals::instance
		      (typefoo-index tf) 0
		      (typefoo-cogitator tf) #'typefoo-default-cogitator
		      (typefoo-self-cogitator tf) #'clos-class-typefoo-cogitator
		      (typefoo-supertype-cogitator tf) #'typefoo-default-supertype-cogitator
		      (typefoo-mask-0 tf) 0
		      (typefoo-disjoint-0 tf) 0
		      (typefoo-ancestors-0 tf) (logior (typefoo-ancestors-0 (get-typefoo 't))
						       )
		      )
		tf))


(defun reduce-typespec (t1 env &aux ts1 d1 tem)
  (tagbody
    a  (cond ((not (consp t1))
	      (setq ts1 t1)
	      ;;(when (memq t1 '(eql member satisfies and or not))
	      ;;  (error "Type specifier ~S may not be used in atomic form." t1))
	      )
	     ((eq (setq ts1 (car t1)) 'satisfies)
	      (when (setq tem (assoc (cadr t1) *satisfies-typespec-inversions* :test #'eq))
		(setq t1 (cadr tem))
		(go a)))
	     ((null (cdr t1)) (setq t1 ts1)))	;canonicalize
       (cond ((not (symbolp ts1))
	      (if (clos-internals::instancep t1)
		  (cond ((typep t1 'clos-internals::built-in-class)
			 (setq t1 (clos-internals::class-name t1))
			 (go a))
			(t (setq ts1 'clos-type-name d1 *clos-typefoo*)))
		  (error "~S is an invalid type specifier." t1)))
	     ((memq ts1 '(and or))
	      (let ((andp (eq ts1 'and)))
		(cond ((null (cdr t1)) (setq t1 (setq ts1 andp)))
		      ((null (cddr t1)) (setq t1 (cadr t1)) (go a))
		      ((memq andp (cdr t1))
		       (setq t1 (cons (car t1) (remove andp (cdr t1))))
		       (go a))
		      ((memq (setq andp (not andp)) (cdr t1))
		       (when (setq t1 (setq ts1 andp)) (go a))))))
	     ((memq ts1 '(not nil satisfies eql)))
	     ((eq ts1 'member) (when (null (cdr t1)) (setq t1 nil ts1 nil)))
	     ((setq d1 (find-typefoo ts1 env))
	      (let ((z (typefoo-reducer d1)))
		(when z
		  (let ((new (funcall (the compiled-function z) t1 env)))
		    (unless (eq new t1) (setq t1 new d1 nil) (go a))))))
	     ((setq tem (typemacro-function ts1 env))
	      (setq t1 (if (atom t1)
			   (funcall (the compiled-function tem) env)
			   (apply (the compiled-function tem) env (cdr t1))))
	      (go a))
	     ((setq tem (if (null env) (sys%get ts1 'typedef)	;bum special case
			    (environment-property ts1 'typedef env)))
	      (setq t1 (if (atom t1)
			   (funcall (the compiled-function tem))
			   (apply (the compiled-function tem) (cdr t1))))
	      (go a))
	     ((and (fboundp 'closi::find-class-internal)
		   (multiple-value-bind (class foundp) (closi::find-class-internal t1 env t)
		     (setq temp class)
		     foundp))
	      (setq t1 tem ts1 'clos-type-name d1 *clos-typefoo*))
	     (t (error "~S is an invalid type specifier." t1))))
  (values t1 ts1 d1))
