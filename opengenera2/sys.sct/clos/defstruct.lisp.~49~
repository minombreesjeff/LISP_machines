;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10; Package: CLOS-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(IN-PACKAGE :CLOS-INTERNALS)

;;; Support for structures with explicit :TYPEs.

(DEFCLASS DEFSTRUCT-DESCRIPTOR (BASIC-DEFSTRUCT-DESCRIPTOR)
    ((TYPE :INITARG DEFSTRUCT-TYPE :READER DEFSTRUCT-TYPE)
     (NAMED :INITARG DEFSTRUCT-NAMED :READER DEFSTRUCT-NAMED)
     (SLOTS :INITFORM NIL :READER CLASS-SLOTS)
     (INCLUDED-STRUCTURE :INITFORM NIL :INITARG DEFSTRUCT-INCLUDED-STRUCTURE))
  )

(DEFMETHOD SHARED-INITIALIZE :AFTER ((DEFSTRUCT DEFSTRUCT-DESCRIPTOR) SLOT-NAMES &KEY SLOTS)
  (DECLARE (IGNORE SLOT-NAMES))
  (SETF (SLOT-VALUE DEFSTRUCT 'SLOTS)
	(MAPCAR #'(LAMBDA (SLOT)
		    (APPLY #'MAKE-INSTANCE 'DEFSTRUCT-SLOT-DESCRIPTOR :NAME (POP SLOT) SLOT))
		SLOTS)))

(DEFMETHOD CLASS-DIRECT-SUPERCLASSES ((DEFSTRUCT DEFSTRUCT-DESCRIPTOR))
  (WITH-SLOTS (INCLUDED-STRUCTURE) DEFSTRUCT
    (AND INCLUDED-STRUCTURE (LIST INCLUDED-STRUCTURE))))



;;; STRUCTURE-CLASS

(DEFMETHOD DEFSTRUCT-TYPE ((CLASS STRUCTURE-CLASS)) 'STRUCTURE-OBJECT)

(DEFMETHOD DEFSTRUCT-NAMED ((CLASS STRUCTURE-CLASS)) T)

;;;

(DEFMETHOD CLASS-INITIALIZED-P ((CLASS STRUCTURE-CLASS))
  (NOT (NULL (CLASS-DIRECT-SUPERCLASSES CLASS))))

(DEFMETHOD SHARED-INITIALIZE :AFTER
	   ((CLASS STRUCTURE-CLASS) SLOT-NAMES &KEY SLOTS DEFAULT-INITARGS
	    ((INSTANCE-INFORMATION INFORMATION))
	    ((INITIALIZATION-TYPE INITIALIZATION-TYPE) NIL)
	    #+Minima ((MINIMA-INTERNALS::STORAGE-CATEGORY STORAGE-CATEGORY)))
  (DECLARE (IGNORE SLOT-NAMES))
  (UNLESS (NULL DEFAULT-INITARGS)
    (ERROR "Structure classes cannot have initargs."))
  (UNLESS (EQ INITIALIZATION-TYPE 'REDEFINED-CLASS)
    (LET* ((SLOTS (MAPCAR #'(LAMBDA (SLOT)
			      (APPLY #'MAKE-INSTANCE 'STRUCTURE-SLOT-DEFINITION
				     :NAME (POP SLOT) SLOT))
			  SLOTS))
	   (SIZE 
	     (REDUCE #'MAX (MAP 'LIST #'(LAMBDA (SLOT)
					  (+ (SLOT-DEFINITION-LOCATION SLOT)
					     (SLOT-DEFINITION-SIZE SLOT)))
				SLOTS)
		     :INITIAL-VALUE 0)))
      #+(OR Genera Minima) (INCF SIZE)      
      (COND (INFORMATION
	     (LET ((OLD-SIZE (%CLASS-INSTANCE-INFORMATION-SIZE INFORMATION)))
	       (COND ((NULL OLD-SIZE)
		      (SETF (%CLASS-INSTANCE-INFORMATION-SIZE INFORMATION) SIZE))
		     ((/= SIZE OLD-SIZE)
		      (ERROR "The constructor is out of sync with this definition."))))
	     (LET ((DISPATCH-TABLE (MAKE-CLOS-DISPATCH-TABLE #'HANDLE-CLASS-DISPATCH-MISS)))
	       (SETF (%CLASS-INSTANCE-INFORMATION-DISPTAB INFORMATION) DISPATCH-TABLE)
	       (SETF (%CLASS-INSTANCE-INFORMATION-DISPATCH-MASK INFORMATION)
		     (DISPATCH-TABLE-MASK DISPATCH-TABLE))
	       (SETF (%CLASS-INSTANCE-INFORMATION-DISPATCH-ADDRESS INFORMATION)
		     (DISPATCH-TABLE-ADDRESS DISPATCH-TABLE))))
	    ((AND (SLOT-BOUNDP CLASS 'INSTANCE-INFORMATION)
		  (SETF INFORMATION (SLOT-VALUE CLASS 'INSTANCE-INFORMATION))
		  (= SIZE (%CLASS-INSTANCE-INFORMATION-SIZE INFORMATION))))
	    (T
	     (SETF INFORMATION (MAKE-CLASS-INSTANCE-INFORMATION
				 #+Minima 'STORAGE-AREA
				 #+Minima
				 (ECASE STORAGE-CATEGORY
				   ((NIL) T)
				   (:WIRED MINIMA-INTERNALS::+WIRED-AREA+)
				   (:SAFEGUARDED MINIMA-INTERNALS::+SAFEGUARDED-AREA+))))
	     (SETF (%CLASS-INSTANCE-INFORMATION-SIZE INFORMATION) SIZE)))
      (SETF (%CLASS-INSTANCE-INFORMATION-CLASS INFORMATION) CLASS)
      (SETF (%CLASS-INSTANCE-INFORMATION-CLASS-NAME INFORMATION) (CLASS-NAME CLASS))
      (SETF (%CLASS-INSTANCE-INFORMATION-PRECEDENCE-LIST INFORMATION)
	    (COMPUTE-CLOS-CLASS-PRECEDENCE-LIST CLASS))
      (SET-CLASS-INSTANCE-INFORMATION-EFFECTIVE-SLOTS CLASS INFORMATION SLOTS)
      (LET ((PROTOTYPE (%ALLOCATE-INSTANCE INFORMATION)))
	(DOLIST (SLOT SLOTS)
	  (LET ((SLOT-NAME (SLOT-DEFINITION-NAME SLOT)))
	    (MAKUNBOUND-SLOT
	      CLASS PROTOTYPE SLOT-NAME %STRUCTURE-REF STANDARD-CLASS-SLOT-LOCATION)))
	(SETF (SLOT-VALUE CLASS 'INSTANCE-INFORMATION) INFORMATION)
	(SETF (SLOT-VALUE CLASS 'PROTOTYPE) PROTOTYPE)))))

(DEFMETHOD ALLOCATE-INSTANCE ((CLASS STRUCTURE-CLASS) 
			      &KEY
			      #+(OR Genera Minima CLOE-Runtime)
			      ((STORAGE-AREA STORAGE-AREA)
			       (PROGN #+Genera SYS:*DEFAULT-CONS-AREA*
				      #+Minima T
				      #+CLOE-Runtime SYS::AKIND$K-DEFAULT)))
  (%ALLOCATE-INSTANCE-COPY (CLASS-PROTOTYPE CLASS) #+(OR Genera Minima CLOE-Runtime) STORAGE-AREA))

(DEFMETHOD SLOT-VALUE-USING-CLASS ((CLASS STRUCTURE-CLASS) OBJECT SLOT-NAME)
  (READ-SLOT CLASS OBJECT SLOT-NAME %STRUCTURE-REF STANDARD-CLASS-SLOT-LOCATION))

(DEFMETHOD (SETF SLOT-VALUE-USING-CLASS) (NEW-VALUE (CLASS STRUCTURE-CLASS) OBJECT SLOT-NAME)
  (WRITE-SLOT NEW-VALUE CLASS OBJECT SLOT-NAME %STRUCTURE-REF STANDARD-CLASS-SLOT-LOCATION))

#+(OR Genera Minima)
(DEFMETHOD (LOCF SLOT-VALUE-USING-CLASS) ((CLASS STRUCTURE-CLASS) OBJECT SLOT-NAME)
  (LOCATE-SLOT CLASS OBJECT SLOT-NAME %STRUCTURE-REF STANDARD-CLASS-SLOT-LOCATION))

(DEFMETHOD SLOT-BOUNDP-USING-CLASS ((CLASS STRUCTURE-CLASS) OBJECT SLOT-NAME)
  (BOUNDP-SLOT CLASS OBJECT SLOT-NAME %STRUCTURE-REF STANDARD-CLASS-SLOT-LOCATION))

(DEFMETHOD SLOT-MAKUNBOUND-USING-CLASS ((CLASS STRUCTURE-CLASS) OBJECT SLOT-NAME)
  (MAKUNBOUND-SLOT CLASS OBJECT SLOT-NAME %STRUCTURE-REF STANDARD-CLASS-SLOT-LOCATION))

(DEFMETHOD SLOT-EXISTS-P-USING-CLASS ((CLASS STRUCTURE-CLASS) OBJECT SLOT-NAME)
  (ETYPECASE (STANDARD-CLASS-SLOT-LOCATION OBJECT SLOT-NAME)
    (FIXNUM T)
    (NULL NIL)))



;;; STRUCTURE-OBJECT

(DEFMETHOD INITIALIZE-INSTANCE ((OBJECT STRUCTURE-OBJECT) &KEY)
  (LET ((CLASS (CLASS-OF OBJECT)))
    (DOLIST (SLOT (CLASS-SLOTS CLASS))
      (LET ((NAME (SLOT-DEFINITION-NAME SLOT))
	    (INITFUNCTION (SLOT-DEFINITION-INITFUNCTION SLOT)))
	(WHEN (AND (NOT (NULL INITFUNCTION))
		   (NOT (SLOT-BOUNDP-USING-CLASS CLASS OBJECT NAME)))
	  (SETF (SLOT-VALUE-USING-CLASS CLASS OBJECT NAME) (FUNCALL INITFUNCTION))))))
  OBJECT)

(DEFMETHOD PRINT-OBJECT ((OBJECT STRUCTURE-OBJECT) STREAM)
  (PRINT-STRUCTURE-OBJECT-USING-CLASS (CLASS-OF OBJECT) OBJECT STREAM))

(DEFMETHOD PRINT-STRUCTURE-OBJECT-USING-CLASS ((CLASS (EQL (FIND-CLASS 'STRUCTURE-OBJECT)))
					       OBJECT STREAM)
  (DEFAULT-PRINT-STRUCTURE OBJECT STREAM 0))

(DEFMETHOD PRINT-STRUCTURE-OBJECT-USING-CLASS ((CLASS STRUCTURE-CLASS) OBJECT STREAM)
  (WITH-SLOTS (PRINT-FUNCTION) CLASS
    (IF PRINT-FUNCTION
	(FUNCALL PRINT-FUNCTION OBJECT STREAM)
	(PRINT-STRUCTURE-OBJECT-USING-CLASS (FIRST (CLASS-DIRECT-SUPERCLASSES CLASS))
					    OBJECT STREAM))))

(DEFMETHOD DESCRIBE-OBJECT ((OBJECT STRUCTURE-OBJECT) STREAM)
  (DEFAULT-DESCRIBE-OBJECT OBJECT STREAM))

(DEFUN DEFAULT-PRINT-STRUCTURE (OBJECT STREAM DEPTH)
  (DECLARE (IGNORE DEPTH))
  (IF (PROGN #+Genera (NOT SCL:*PRINT-STRUCTURE-CONTENTS*)
	     #-Genera NIL)
      (PRINT-UNREADABLE-OBJECT (OBJECT STREAM :TYPE T :IDENTITY T))
      (LET ((CLASS (CLASS-OF OBJECT)))
	(FORMAT STREAM "#S~S" 
		`(,(CLASS-NAME CLASS)
		  ,@(MAPCAN #'(LAMBDA (SLOT)
				(LET ((NAME (SLOT-DEFINITION-NAME SLOT)))
				  (AND (SLOT-BOUNDP-USING-CLASS CLASS OBJECT NAME)
				       `(,(INTERN (SYMBOL-NAME NAME)
						  #-(or Minima Genera) (FIND-PACKAGE "KEYWORD")
						  #+Genera SYS:PKG-KEYWORD-PACKAGE
						  #+Minima MINIMA-INTERNALS::*KEYWORD-PACKAGE*)
					 ,(SLOT-VALUE-USING-CLASS CLASS OBJECT NAME)))))
			    (CLASS-SLOTS CLASS)))))))

(DEFMETHOD MAKE-LOAD-FORM-SAVING-SLOTS ((OBJECT STRUCTURE-OBJECT) &OPTIONAL (SAVE-SLOTS NIL SAVE-SLOTS-P))
  (LET ((CLASS (CLASS-OF OBJECT)))
    ;;; Argument defaulting:
    (SETF SAVE-SLOTS
	  (IF SAVE-SLOTS-P
	      (MAPCAR #'(LAMBDA (NAME)
			  (FIND NAME (CLASS-SLOTS CLASS) :KEY #'SLOT-DEFINITION-NAME))
		      SAVE-SLOTS)
	      (CLASS-SLOTS CLASS)))
    (VALUES
      `(%ALLOCATE-INSTANCE
	 (LOAD-TIME-VALUE (LOOKUP-STRUCTURE-INSTANCE-INFORMATION
			    ',(CLASS-NAME CLASS)
			    #+Minima ,(1- (%CLASS-INSTANCE-INFORMATION-SIZE
					    (CLASS-INSTANCE-INFORMATION CLASS)))
			    #-Minima ,(%CLASS-INSTANCE-INFORMATION-SIZE
					(CLASS-INSTANCE-INFORMATION CLASS)))))
      `(PROGN ,@(MAPCAR #'(LAMBDA (SLOT)
			    (LET ((SLOT-NAME (SLOT-DEFINITION-NAME SLOT)))
			      (AND (SLOT-BOUNDP OBJECT SLOT-NAME)
				   `(SETF (%STRUCTURE-REF ',OBJECT ',(SLOT-DEFINITION-LOCATION SLOT))
					  ',(SLOT-VALUE OBJECT SLOT-NAME)))))
			SAVE-SLOTS)))))



;;; Support for the various representation types.

(DEFGENERIC DEFSTRUCT-BUILD-FUNCTIONS
	    (TYPE-NAME TYPE-ARGS ENV &KEY
		       ((NAME NAME)) SLOTS CONC-NAME CONSTRUCTORS COPIER PREDICATE
		       ((DEFSTRUCT-NAMED NAMED)) &ALLOW-OTHER-KEYS))



;;; Environment

(DEFUN LOOKUP-DEFSTRUCT-DESCRIPTOR (NAME &KEY ENVIRONMENT (ERROR T))
  (OR (IF (COMPILE-FILE-ENVIRONMENT-P ENVIRONMENT)
	  (FILE-DECLARATION NAME 'DEFSTRUCT)
	  (GET NAME 'DEFSTRUCT))
      (AND ERROR
	   (ERROR "Structure ~S not found." NAME))))

;;; Install a structure definition.
;;; This is called by ENSURE-DEFSTRUCT in the early run-time.
(DEFUN ENSURE-DEFSTRUCT-1 (NAME TYPE INCLUDED-STRUCTURE ENVIRONMENT &REST KEYS
			   &KEY &ALLOW-OTHER-KEYS)
  (DECLARE (DYNAMIC-EXTENT KEYS))
  (LET ((DEFSTRUCT (LOOKUP-DEFSTRUCT-DESCRIPTOR NAME :ENVIRONMENT ENVIRONMENT :ERROR NIL)))
    (CASE TYPE
      (STRUCTURE-OBJECT
	(SETF DEFSTRUCT
	      (IF INCLUDED-STRUCTURE
		  (APPLY #'ENSURE-CLASS-USING-CLASS DEFSTRUCT NAME :METACLASS 'STRUCTURE-CLASS
			 :ENVIRONMENT ENVIRONMENT
			 :DIRECT-SUPERCLASSES (LIST INCLUDED-STRUCTURE)
			 KEYS)
		  (APPLY #'ENSURE-CLASS-USING-CLASS DEFSTRUCT NAME :METACLASS 'STRUCTURE-CLASS
			 :ENVIRONMENT ENVIRONMENT
			 :DIRECT-SUPERCLASSES (CLASS-DEFAULT-DIRECT-SUPERCLASSES
						(CLASS-PROTOTYPE (FIND-CLASS 'STRUCTURE-CLASS))
						:ENVIRONMENT ENVIRONMENT)
			 KEYS))))
      (OTHERWISE
	(LET ((KEYS `(,@(WHEN INCLUDED-STRUCTURE
			  `(DEFSTRUCT-INCLUDED-STRUCTURE
			     ,(IF (COMPILE-FILE-ENVIRONMENT-P ENVIRONMENT)
				  INCLUDED-STRUCTURE
				  (LOOKUP-DEFSTRUCT-DESCRIPTOR INCLUDED-STRUCTURE
							       :ENVIRONMENT ENVIRONMENT))))
		      NAME ,NAME DEFSTRUCT-TYPE ,TYPE
		      ,@KEYS)))
	  (TYPECASE DEFSTRUCT
	    (NULL
	      (SETF DEFSTRUCT (APPLY #'MAKE-INSTANCE 'DEFSTRUCT-DESCRIPTOR KEYS)))
	    (DEFSTRUCT-DESCRIPTOR
	      (APPLY #'REINITIALIZE-INSTANCE DEFSTRUCT KEYS))
	    (OTHERWISE
	      (CHANGE-CLASS DEFSTRUCT 'DEFSTRUCT-DESCRIPTOR)
	      (APPLY #'REINITIALIZE-INSTANCE DEFSTRUCT KEYS))))))
    (COND ((COMPILE-FILE-ENVIRONMENT-P ENVIRONMENT)
	   (SETF (FILE-DECLARATION NAME 'DEFSTRUCT) DEFSTRUCT))
	  (T
	   (SETF (GET NAME 'DEFSTRUCT) DEFSTRUCT)
	   #+Genera
	   (FLET ((RECORD (FSPEC)
		    (SI:RECORD-SOURCE-FILE-NAME FSPEC 'DEFUN T)
		    (SI:WHEN-IN-INCREMENTAL-WHO-CALLS-MODE
		      (SI:WHO-CALLS-FDEFINE-HOOK FSPEC))))
	     (DOLIST (SLOT (CLASS-SLOTS DEFSTRUCT))
	       (CASE (SLOT-DEFINITION-INITFORM-INLINABLE SLOT)
		 ((CONSTANT SPECIAL))
		 (OTHERWISE
		   (RECORD
		     `(STRUCTURE-SLOT-INITFUNCTION ,NAME ,(SLOT-DEFINITION-NAME SLOT))))))
	     (WHEN (AND (EQ TYPE 'STRUCTURE-OBJECT)
			(SLOT-VALUE DEFSTRUCT 'PRINT-FUNCTION))
	       (RECORD `(STRUCTURE-PRINT-FUNCTION ,NAME))))))
    DEFSTRUCT))

(DEFUN LOOKUP-STRUCTURE-INFORMATION-1 (NAME &KEY ENVIRONMENT (ERROR T))
  (LET ((DEFSTRUCT (LOOKUP-DEFSTRUCT-DESCRIPTOR NAME :ERROR ERROR :ENVIRONMENT ENVIRONMENT)))
    (WHEN DEFSTRUCT
      (LET ((TYPE (DEFSTRUCT-TYPE DEFSTRUCT))
	    (NAMED (DEFSTRUCT-NAMED DEFSTRUCT))
	    (DOCUMENTATION (DOCUMENTATION-OBJECT DEFSTRUCT)))
	`(,TYPE NIL NIL
	  ,@(AND NAMED (NOT (EQ TYPE 'STRUCTURE-OBJECT))
		 `(DEFSTRUCT-NAMED ,NAMED))
	  ,@(AND DOCUMENTATION
		 `(:DOCUMENTATION ,DOCUMENTATION))
	  ;; INITFUNCTIONs need special treatment.
	  :SLOTS ,(MAPCAR #'(LAMBDA (SLOT)
			      `(,(SLOT-DEFINITION-NAME SLOT)
				:LOCATION ,(SLOT-DEFINITION-LOCATION SLOT)
				,@(WHEN (SLOT-DEFINITION-INITFUNCTION SLOT)
				    `(:INITFUNCTION ,(SLOT-DEFINITION-INITFUNCTION SLOT)
				      :INITFORM ,(SLOT-DEFINITION-INITFORM SLOT)
				      INITFORM-INLINABLE ,(SLOT-DEFINITION-INITFORM-INLINABLE SLOT)))
				,@(UNLESS (EQ (SLOT-DEFINITION-TYPE SLOT) T)
				    `(:TYPE ,(SLOT-DEFINITION-TYPE SLOT)))
				,@(WHEN (SLOT-DEFINITION-READ-ONLY-P SLOT)
				    `(SLOT-READ-ONLY ,(SLOT-DEFINITION-READ-ONLY-P SLOT)))
				,@(UNLESS (= (SLOT-DEFINITION-SIZE SLOT) 1)
				    `(SLOT-SIZE ,(SLOT-DEFINITION-SIZE SLOT)))
				#+(OR Genera Minima)
				,@(WHEN (SLOT-DEFINITION-LOCATABLE-P SLOT)
				    `(SLOT-LOCATABLE ,(SLOT-DEFINITION-LOCATABLE-P SLOT)))
				#+Minima #+Minima
				SLOT-ACCESSOR ,(SLOT-DEFINITION-ACCESSOR SLOT)
				))
			  (CLASS-SLOTS DEFSTRUCT))
	  #+Minima #+Minima
	  FUNCTIONS ,(DEFSTRUCT-DESCRIPTOR-FUNCTIONS DEFSTRUCT)
	  )))))

(DEFUN LOOKUP-DEFSTRUCT-STANDARD-CONSTRUCTOR (STRUCTURE-NAME)
  (LET ((DEFSTRUCT (LOOKUP-DEFSTRUCT-DESCRIPTOR STRUCTURE-NAME :ERROR NIL)))
    (WHEN DEFSTRUCT
      (RETURN-FROM LOOKUP-DEFSTRUCT-STANDARD-CONSTRUCTOR
	(VALUES (SLOT-VALUE DEFSTRUCT 'STANDARD-CONSTRUCTOR)
		T))))
  NIL)

;;; Install the definitions of any structures which were already loaded.
(DECLAIM (SPECIAL *FORWARD-REFERENCED-STRUCTURE-CLASSES*))
(WHEN (BOUNDP '*FORWARD-REFERENCED-STRUCTURE-CLASSES*)
  (DOLIST (ENTRY (COPY-LIST (REVERSE *FORWARD-REFERENCED-STRUCTURE-CLASSES*)))
    (DESTRUCTURING-BIND (NAME INSTANCE-INFORMATION &REST ARGS) ENTRY
      (DECLARE (IGNORE INSTANCE-INFORMATION))
      (WHEN ARGS
	(APPLY #'ENSURE-DEFSTRUCT NAME ARGS)))))

;;; Random methods on previously defined structure classes.

#+(OR Genera Minima)
(DEFMETHOD SLOT-UNBOUND (CLASS (INSTANCE CLASS-HOLDER) (SLOT (EQL 'CLASS)))
  #+(or Genera CLOE-Runtime) (DECLARE (DBG:ERROR-REPORTER))
  (DECLARE (IGNORE CLASS))
  (CERROR "Try again after defining the class."
	  "The class ~S is undefined." (CLASS-HOLDER-NAME INSTANCE))
  (CLASS-HOLDER-CLASS INSTANCE))
