;;; -*- Mode: LISP; Syntax: Minima; Base: 10; Package: CLOS-INTERNALS -*-
;;;> MINIMA-MESSAGE
;;;>
;;;> *****************************************************************************************
;;;> ** AT&T Minima Software
;;;> ** (c) Copyright 1992 American Telephone and Telegraph Company.  All Rights Reserved.
;;;> ** Portions Copyright (c) 1992-1991 Symbolics, Inc.  All rights reserved.
;;;> *****************************************************************************************
;;;>

(IN-PACKAGE :CLOS-INTERNALS)

(DEFVAR *ASSEMBLE-ENVIRONMENT* NIL)

(DEFUN FDEFINE-ASSEMBLED-MACRO (NAME CODE &OPTIONAL LAMBDA-LIST)
  (SETF (GETF *ASSEMBLE-ENVIRONMENT* NAME) CODE)
  NAME)

(DEFMACRO DEF-ASSEMBLER-MACRO (NAME LAMBDA-LIST &BODY BODY &ENVIRONMENT ENV)
  (LET ((LAMBDA (MINIMA-INTERNALS::PARSE-MACRO NAME LAMBDA-LIST BODY ENV)))
    `(FDEFINE-ASSEMBLED-MACRO ',NAME (FUNCTION ,LAMBDA) ',LAMBDA-LIST)))

(DEFPARAMETER *OPCODES*
	      '(CAR
		 CDR
		 ENDP
		 SETUP-1D-ARRAY
		 SETUP-FORCE-1D-ARRAY
		 BIND-LOCATIVE
		 %RESTORE-BINDING-STACK
		 %EPHEMERALP
		 START-CALL
		 %JUMP
		 %TAG
		 DEREFERENCE
		 LOGIC-TAIL-TEST
		 %PROC-BREAKPOINT
		 NIL
		 NIL
		 PUSH-LEXICAL-VAR () () () () () () ()
		 %BLOCK-0-WRITE
		 %BLOCK-1-WRITE
		 %BLOCK-2-WRITE
		 %BLOCK-3-WRITE
		 ZEROP
		 MINUSP
		 PLUSP
		 NIL
		 TYPE-MEMBER () () ()
		 TYPE-MEMBER-NO-POP () () ()
		 LOCATE-LOCALS
		 CATCH-CLOSE
		 %GENERIC-DISPATCH
		 %MESSAGE-DISPATCH
		 %CHECK-PREEMPT-REQUEST
		 PUSH-GLOBAL-LOGIC-VARIABLE
		 NO-OP
		 %HALT
		 BRANCH-TRUE
		 BRANCH-TRUE-ELSE-EXTRA-POP
		 BRANCH-TRUE-AND-EXTRA-POP
		 BRANCH-TRUE-EXTRA-POP
		 BRANCH-TRUE-NO-POP
		 BRANCH-TRUE-AND-NO-POP
		 BRANCH-TRUE-ELSE-NO-POP
		 BRANCH-TRUE-AND-NO-POP-ELSE-NO-POP-EXTRA-POP
		 BRANCH-FALSE
		 BRANCH-FALSE-ELSE-EXTRA-POP
		 BRANCH-FALSE-AND-EXTRA-POP
		 BRANCH-FALSE-EXTRA-POP
		 BRANCH-FALSE-NO-POP
		 BRANCH-FALSE-AND-NO-POP
		 BRANCH-FALSE-ELSE-NO-POP
		 BRANCH-FALSE-AND-NO-POP-ELSE-NO-POP-EXTRA-POP
		 PUSH
		 PUSH-N-NILS
		 PUSH-ADDRESS-SP-RELATIVE
		 PUSH-LOCAL-LOGIC-VARIABLES
		 RETURN-MULTIPLE
		 RETURN-KLUDGE
		 TAKE-VALUES
		 UNBIND-N
		 PUSH-INSTANCE-VARIABLE
		 PUSH-ADDRESS-INSTANCE-VARIABLE
		 PUSH-INSTANCE-VARIABLE-ORDERED
		 PUSH-ADDRESS-INSTANCE-VARIABLE-ORDERED
		 UNARY-MINUS
		 RETURN-SINGLE
		 %MEMORY-READ
		 %MEMORY-READ-ADDRESS
		 %BLOCK-0-READ
		 %BLOCK-1-READ
		 %BLOCK-2-READ
		 %BLOCK-3-READ
		 %BLOCK-0-READ-SHIFT
		 %BLOCK-1-READ-SHIFT
		 %BLOCK-2-READ-SHIFT
		 %BLOCK-3-READ-SHIFT
		 %BLOCK-0-READ-TEST
		 %BLOCK-1-READ-TEST
		 %BLOCK-2-READ-TEST
		 %BLOCK-3-READ-TEST
		 FINISH-CALL-N
		 FINISH-CALL-N-APPLY
		 FINISH-CALL-TOS
		 FINISH-CALL-TOS-APPLY
		 SET-TO-CAR
		 SET-TO-CDR
		 SET-TO-CDR-PUSH-CAR
		 INCREMENT
		 DECREMENT
		 %POINTER-INCREMENT
		 %SET-CDR-CODE-1
		 %SET-CDR-CODE-2
		 PUSH-ADDRESS
		 SET-SP-TO-ADDRESS
		 SET-SP-TO-ADDRESS-SAVE-TOS
		 NIL
		 %READ-INTERNAL-REGISTER
		 %WRITE-INTERNAL-REGISTER
		 %COPROCESSOR-READ
		 %COPROCESSOR-WRITE
		 %BLOCK-0-READ-ALU
		 %BLOCK-1-READ-ALU
		 %BLOCK-2-READ-ALU
		 %BLOCK-3-READ-ALU
		 NIL
		 NIL
		 NIL
		 NIL
		 LDB
		 CHAR-LDB
		 %P-LDB
		 %P-TAG-LDB
		 BRANCH
		 LOOP-DECREMENT-TOS
		 ENTRY-REST-ACCEPTED
		 ENTRY-REST-NOT-ACCEPTED
		 RPLACA
		 RPLACD
		 MULTIPLY
		 QUOTIENT
		 CEILING
		 FLOOR
		 TRUNCATE
		 ROUND
		 NIL
		 RATIONAL-QUOTIENT
		 MIN
		 MAX
		 %ALU
		 LOGAND
		 LOGXOR
		 LOGIOR
		 ROT
		 LSH
		 %MULTIPLY-DOUBLE
		 %LSHC-BIGNUM-STEP
		 STACK-BLT
		 RGETF
		 MEMBER
		 ASSOC
		 %POINTER-PLUS
		 %POINTER-DIFFERENCE
		 ASH
		 STORE-CONDITIONAL
		 %MEMORY-WRITE
		 %P-STORE-CONTENTS
		 BIND-LOCATIVE-TO-VALUE
		 UNIFY
		 POP-LEXICAL-VAR () () () () () () ()
		 MOVEM-LEXICAL-VAR () () () () () () ()
		 EQUAL-NUMBER
		 LESSP
		 GREATERP
		 EQL
		 EQUAL-NUMBER-NO-POP
		 LESSP-NO-POP
		 GREATERP-NO-POP
		 EQL-NO-POP
		 EQ
		 NIL
		 NIL
		 LOGTEST
		 EQ-NO-POP
		 NIL
		 NIL
		 LOGTEST-NO-POP
		 ADD
		 SUB
		 %32-BIT-PLUS
		 %32-BIT-DIFFERENCE
		 %ADD-BIGNUM-STEP
		 %SUB-BIGNUM-STEP
		 %MULTIPLY-BIGNUM-STEP
		 %DIVIDE-BIGNUM-STEP
		 ASET-1
		 %ALLOCATE-PRIMARY-BLOCK
		 AREF-1
		 ALOC-1
		 STORE-ARRAY-LEADER
		 %ALLOCATE-SECONDARY-BLOCK
		 ARRAY-LEADER
		 ALOC-LEADER
		 POP-INSTANCE-VARIABLE
		 MOVEM-INSTANCE-VARIABLE
		 POP-INSTANCE-VARIABLE-ORDERED
		 MOVEM-INSTANCE-VARIABLE-ORDERED
		 %INSTANCE-REF
		 %INSTANCE-SET
		 %INSTANCE-LOC
		 %SET-TAG
		 NIL
		 %UNSIGNED-LESSP
		 NIL
		 NIL
		 NIL
		 %UNSIGNED-LESSP-NO-POP
		 NIL
		 NIL
		 POP
		 MOVEM
		 %MERGE-CDR-NO-POP
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 FAST-AREF-1
		 FAST-ASET-1
		 STACK-BLT-ADDRESS
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 NIL
		 DPB
		 CHAR-DPB
		 %P-DPB
		 %P-TAG-DPB
		 NIL
		 LOOP-INCREMENT-TOS-LESS-THAN
		 CATCH-OPEN
		 NIL
		 ))

(DEFUN OPCODE-FOR-INSTRUCTION (NAME)
  (POSITION NAME *OPCODES*))

(DEFUN ASSEMBLE-INTERNAL (CODE &KEY ENVIRONMENT)
  (LET ((HERE 0))
    (FLET ((ASSEMBLE-PACKED-INSTRUCTION (PACKED-INSTRUCTION)
	     (WHEN (TYPEP PACKED-INSTRUCTION 'FIXNUM)
	       (RETURN-FROM ASSEMBLE-PACKED-INSTRUCTION PACKED-INSTRUCTION))
	     (+ (IVORY::MAKE-PACKED-INSTRUCTION :OPCODE (OPCODE-FOR-INSTRUCTION (FIRST PACKED-INSTRUCTION)))
		(LET ((OPERAND (SECOND PACKED-INSTRUCTION)))
		  (ETYPECASE OPERAND
		    (FIXNUM OPERAND)
		    (SYMBOL (SYMBOL-VALUE OPERAND))
		    (LIST
		      (ECASE (FIRST OPERAND)
			(FP
			  (IVORY::MAKE-OPERAND-FROM-STACK
			    :ADDRESSING-MODE 'IVORY::FRAME-POINTER
			    :ADDRESS (SECOND OPERAND)))
			(SP
			  (IVORY::MAKE-OPERAND-FROM-STACK
			    :ADDRESSING-MODE 'IVORY::STACK-POINTER
			    :ADDRESS (IF (EQ (SECOND OPERAND) 'POP)
					 0
					 (+ 255 (SECOND OPERAND)))))
			(LP
			  (IVORY::MAKE-OPERAND-FROM-STACK
			    :ADDRESSING-MODE 'IVORY::LOCAL-POINTER
			    :ADDRESS (SECOND OPERAND)))
			(IM
			  (IVORY::MAKE-OPERAND-FROM-STACK
			    :ADDRESSING-MODE 'IVORY::IMMEDIATE
			    :ADDRESS (SECOND OPERAND)))
			(BRANCH-OFFSET
			  (LDB (BYTE 10 0)
			       (- (GETF ENVIRONMENT (SECOND OPERAND)) HERE))))))))))
      (LET ((FUNCTION (MINIMA-INTERNALS::MAKE-COMPILED-FUNCTION (LENGTH CODE) NIL NIL)))
	(IVORY:WITH-BLOCK-REGISTERS (2)
	  (SETF (IVORY:BLOCK-REGISTER 2) FUNCTION)
	  (DOLIST (INSTRUCTION CODE)
	    (LET ((SEQUENCING (ECASE (FIRST INSTRUCTION)
				(+1 (IVORY::PC-SEQUENCE '+1))
				(-1 (IVORY::PC-SEQUENCE '-1))
				(+2 (IVORY::PC-SEQUENCE 'IVORY::EVEN+2-ODD+3))
				(FENCE (IVORY::PC-SEQUENCE 'IVORY::FENCE))
				(NEXT (IVORY::CDR-CODE 'IVORY::NEXT))
				(NIL (IVORY::CDR-CODE 'IVORY::NIL))
				(NORMAL (IVORY::CDR-CODE 'IVORY::NORMAL))
				(ERROR (IVORY::CDR-CODE 'IVORY::ERROR)))))
	      (IVORY:%BLOCK-WRITE
		2
		(ECASE (SECOND INSTRUCTION)
		  (PACKED
		    ;; (sequencing PACKED even-half odd-half)
		    (LET ((EVEN
			    (PROG1
			      (ASSEMBLE-PACKED-INSTRUCTION (THIRD INSTRUCTION))
			      (INCF HERE)))
			  (ODD (ASSEMBLE-PACKED-INSTRUCTION (FOURTH INSTRUCTION))))
		      (INCF HERE)
		      (IVORY:%SET-TAG
			(IVORY:%LOGDPB (IVORY::FIXNUM-FIELD-VALUE ODD IVORY::PACKED-INSTRUCTION IVORY::ODD-DATA-COMPONENT)
				       (BYTE 14 18)
				       EVEN)
			(DPB SEQUENCING (BYTE 2 6)
			     (IVORY::MAKE-PACKED-INSTRUCTION-TAG
			       :ODD-TAG-COMPONENT (IVORY::FIXNUM-FIELD-VALUE ODD IVORY::PACKED-INSTRUCTION IVORY::ODD-TAG-COMPONENT))))))
		  (IMMEDIATE
		    (PROG1
		      (LET ((INST (THIRD INSTRUCTION)))
			(IVORY:%SET-TAG INST (DPB SEQUENCING (BYTE 2 6) (IVORY:%TAG INST))))
		      (INCF HERE 2)))
		  (TAG
		    (LET ((THIRD (THIRD INSTRUCTION))
			  (FOURTH (FOURTH INSTRUCTION)))
		      (PROG1
			(IVORY:%SET-TAG FOURTH (DPB SEQUENCING (BYTE 2 6) THIRD))
			(INCF HERE 2)))))))))
	FUNCTION))))

(DEFUN ASSEMBLE (CODE &KEY (ENVIRONMENT *ASSEMBLE-ENVIRONMENT*))
  ;; Expand all the forms, and determine sequencing information
  (LET ((TAGS NIL)
	(WAITING-TAGS NIL)
	(HERE 0)
	(CODE CODE)
	(FREE NIL)
	(INSTRUCTIONS NIL)
	(SUFFIX-SIZE 0))
    (FLET ((ASSIGN-TAGS (PLACE)
	     (LOOP WHILE WAITING-TAGS DOING
	       (LET ((TAG (POP WAITING-TAGS)))
		 (SETF (GETF TAGS TAG) PLACE)))))
      (LOOP WHILE CODE DOING
	(LET ((FORM (POP CODE)))
	  (ETYPECASE FORM
	    (SYMBOL
	      (PUSH FORM WAITING-TAGS))
	    (CONS
	      (CASE (FIRST FORM)
		((PACKED)
		 (WHEN (> SUFFIX-SIZE 0)
		   (ERROR "Packed instructions may not appear in the suffix"))
		 (COND ((= HERE 0)
			;; Sequencing will be +2
			;; Can't use backquote because it shares the tail (0).
			(PUSH (LIST '+2 'PACKED (CDR FORM) '0) INSTRUCTIONS)
			(ASSIGN-TAGS HERE)
			(INCF HERE 2))
		       ((ODDP HERE)
			(LET ((INSTRUCTION (FIRST INSTRUCTIONS)))
			  (SETF (FIRST INSTRUCTION) +1)	;Sequencing
			  (SETF (FOURTH INSTRUCTION) (CDR FORM)))
			(ASSIGN-TAGS HERE)
			(INCF HERE))
		       (FREE
			(SETF (FIRST (FIRST INSTRUCTIONS)) -1)
			(SETF (FOURTH FREE) (CDR FORM))
			(SETQ FREE NIL)
			(ASSIGN-TAGS (- HERE 3)))
		       (T
			(PUSH (LIST '+2 'PACKED (CDR FORM) '0) INSTRUCTIONS)
			(ASSIGN-TAGS HERE)
			(INCF HERE))))
		((SKIP)
		 (COND ((ODDP HERE) (INCF HERE))
		       (T (ERROR "Can only skip an odd instruction"))))
		((ENTRY-REST-ACCEPTED ENTRY-REST-NOT-ACCEPTED)
		 (COND ((ODDP HERE)
			(SETQ FREE NIL)
			(INCF HERE))
		       (T (SETQ FREE NIL)))
		 (PUSH `(+2 PACKED
			    (,(FIRST FORM) ,(SECOND FORM))
			    ,(THIRD FORM))
		       INSTRUCTIONS)
		 (ASSIGN-TAGS HERE)
		 (INCF HERE 2))
		((IMMEDIATE TAG)
		 (WHEN (= HERE 0)
		   (PUSH `(+2 PACKED (BRANCH 2) 0) INSTRUCTIONS)
		   (INCF HERE 2))
		 (WHEN (> SUFFIX-SIZE 0)
		   (INCF SUFFIX-SIZE))
		 (COND ((ODDP HERE)
			(SETQ FREE (FIRST INSTRUCTIONS))
			(INCF HERE))
		       (T (SETQ FREE NIL)))
		 (PUSH (CONS +2 FORM) INSTRUCTIONS)
		 (ASSIGN-TAGS HERE)
		 (INCF HERE 2))
		((SUFFIX)
		  (COND ((ODDP HERE)
			 (SETQ FREE (FIRST INSTRUCTIONS))
			 (INCF HERE))
			(T (SETQ FREE NIL)))
		  (PUSH `(FENCE IMMEDIATE ,(SECOND FORM)) INSTRUCTIONS)
		  (ASSIGN-TAGS HERE)
		  (INCF HERE 2)
		  (INCF SUFFIX-SIZE))
		((PROGN)
		 (SETQ CODE (APPEND (CDR FORM) CODE)))
		(OTHERWISE
		  (LET ((MACRO (GETF ENVIRONMENT (FIRST FORM))))
		    (WHEN (NULL MACRO)
		      (ERROR "Don't know what to do with ~s" FORM))
		    (PUSH (FUNCALL MACRO FORM NIL) CODE)))))))))
    (UNLESS (= SUFFIX-SIZE 1) (ERROR "No suffix."))
    (ASSEMBLE-INTERNAL (NREVERSE INSTRUCTIONS) :ENVIRONMENT TAGS)))

(DEFUN FINISH-CALL-ARG (DISPOSITION N-ARGS)
  (DPB (ECASE DISPOSITION
	 ((EFFECT) (IVORY::VALUE-DISPOSITION 'IVORY::EFFECT))
	 ((VALUE) (IVORY::VALUE-DISPOSITION 'IVORY::VALUE))
	 ((MULTIPLE) (IVORY::VALUE-DISPOSITION 'IVORY::MULTIPLE))
	 ((RETURN) (IVORY::VALUE-DISPOSITION 'IVORY::RETURN)))
       (BYTE 2 8)
       (1+ N-ARGS)))

(DEF-ASSEMBLER-MACRO SAVE-DISPATCH-ARGUMENT ()
  `(PACKED PUSH (FP 3)))

(DEF-ASSEMBLER-MACRO RESTORE-DISPATCH-ARGUMENT (&OPTIONAL FIXUP-TOS)
  `(PROGN
     ,@(WHEN FIXUP-TOS
	 `((PACKED MOVEM (SP 0))))
     (PACKED POP (FP 3))))

(DEF-ASSEMBLER-MACRO UNWRAP-EXTRA-ARGUMENT ()
  `(PROGN
     (PACKED SET-TO-CDR-PUSH-CAR (FP 2))
     (PACKED %JUMP (SP POP))))

(DEFUN SIMPLE-CONSTANT-P (CONSTANT)
  (OR (NULL CONSTANT)
      (TYPEP CONSTANT '(INTEGER -255 255))))

(DEF-ASSEMBLER-MACRO PUSH-SIMPLE-CONSTANT (CONSTANT)
  (ETYPECASE CONSTANT
    (NULL
      `(PACKED ZEROP (IM 1)))
    ((INTEGER 0 255)
     `(PACKED PUSH (IM ,CONSTANT)))
    ((INTEGER -255 -1)
     `(PACKED UNARY-MINUS (IM ,CONSTANT)))))

(DEF-ASSEMBLER-MACRO PUSH-CONSTANT (CONSTANT)
  (TYPECASE CONSTANT
    (NULL
      `(PACKED ZEROP (IM 1)))
    ((INTEGER 0 255)
     `(PACKED PUSH (IM ,CONSTANT)))
    ((INTEGER -255 -1)
     `(PACKED UNARY-MINUS (IM ,CONSTANT)))
    (OTHERWISE
      `(IMMEDIATE ,CONSTANT))))

(DEF-ASSEMBLER-MACRO JUMP-CONSTANT-EXTRA-ARGUMENT (CONSTANT)
  `(PROGN (PACKED PUSH (FP 2))
	  (PUSH-SIMPLE-CONSTANT ,CONSTANT)
	  (PACKED POP (FP 2))
	  (PACKED %JUMP (SP POP))))

(DEF-ASSEMBLER-MACRO ENSURE (N-REQUIRED REST-P)
  (LET ((TAG (MAKE-SYMBOL "ENSURE")))
    (IF REST-P
	`(PROGN
	   (PACKED %READ-INTERNAL-REGISTER ,(IVORY::REGISTER-NUMBER 'IVORY::CR.ARGUMENT-SIZE :DIRECTION :READ))
	   (PACKED GREATERP (IM ,(1- (+ N-REQUIRED 3))))
	   (PACKED BRANCH-TRUE (BRANCH-OFFSET ,TAG))
	   (ENTRY-REST-ACCEPTED ,(+ N-REQUIRED 3) ,(+ N-REQUIRED 3))
	   (PACKED BRANCH (BRANCH-OFFSET ,TAG))
	   (SKIP)
	   ,TAG)
	`(ENTRY-REST-NOT-ACCEPTED ,(+ N-REQUIRED 3) ,(+ N-REQUIRED 3)))))

(DEF-ASSEMBLER-MACRO SET-DISPATCH-ARGUMENT (POSITION)
  (IF (= POSITION 0)
      `(PACKED MOVEM (FP 3))
      `(PROGN
	 (PACKED PUSH (FP ,(+ POSITION 3)))
	 (PACKED POP (FP 3)))))

(DEF-ASSEMBLER-MACRO CLASS ()
  `(PACKED %GENERIC-DISPATCH 0))

(DEF-ASSEMBLER-MACRO EQ ()
  `(PACKED %MESSAGE-DISPATCH 0))

(DEFUN COMPUTE-TYPE-MEMBER-OPERAND (TYPES)
  (NYI))

(DEF-ASSEMBLER-MACRO EQL (TYPE)
  ;; Key is in FP|3
  ;; Fake instance is in FP|2
  `(PROGN
     ;; Push the unboxed key onto the stack if it will help
     ,@(ECASE TYPE
	 ((IVORY::DOUBLE-FLOAT IVORY::COMPLEX IVORY::BIG-RATIO IVORY::DOUBLE-FIXNUM)
	  `((PACKED PUSH (FP 3))
	    (PACKED %SET-TAG (IM ,(IVORY::DATA-TYPE 'IVORY::CONS)))
	    (PACKED SET-TO-CDR-PUSH-CAR (SP 0))))
	 ((IVORY::BIGNUM) NIL))
     ;; Put a pointer to the mask in BAR-1
     (PACKED PUSH (FP 2))
     (PACKED %MEMORY-READ ,(IVORY::MAKE-MEMORY-READ :CYCLE-TYPE 'IVORY::HEADER))
     (PACKED %WRITE-INTERNAL-REGISTER ,(IVORY::REGISTER-NUMBER 'IVORY::BAR :BAR 1 :DIRECTION :WRITE))
     ;; TOS is smashed at this point
     ;; Mask
     (PACKED %BLOCK-1-READ ,(IVORY::MAKE-BLOCK-READ :CYCLE-TYPE 'IVORY::DATA-READ
						    :FIXNUM-ONLY T
						    :PREFETCH NIL))
     ;; Table address
     (PACKED %BLOCK-1-READ ,(IVORY::MAKE-BLOCK-READ :CYCLE-TYPE 'IVORY::DATA-READ
						    :PREFETCH NIL))
     ;; Compute the hash of the key
     ,@(ECASE TYPE
	 (IVORY::BIGNUM
	   ;; Just call SELECTOR-HASH, since it's complicated
	   `((TAG ,(IVORY::DATA-TYPE 'IVORY::CALL-INDIRECT-PREFETCH) ,(LOCF (FDEFINITION 'SELECTOR-HASH)))
	     (PACKED PUSH (FP 3))
	     (PACKED FINISH-CALL-N ,(FINISH-CALL-ARG 'VALUE 1))))
	 (IVORY::DOUBLE-FLOAT
	   ;; Just XOR the two halves
	   `((PACKED PUSH (SP -3))
	     (PACKED LOGXOR (SP -3))))
	 (IVORY::BIG-RATIO
	   ;; If the numerator and denominator are fixnums, just XOR them, otherwise
	   ;; branch out to call SELECTOR-HASH.
	   `((PACKED PUSH (SP -3))
	     (PACKED TYPE-MEMBER-NO-POP ,(COMPUTE-TYPE-MEMBER-OPERAND '(IVORY::FIXNUM)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-NO-POP))
	     (PACKED PUSH (SP -3))
	     (PACKED TYPE-MEMBER-NO-POP ,(COMPUTE-TYPE-MEMBER-OPERAND '(IVORY::FIXNUM)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-POP))
	     (PACKED LOGXOR (SP POP))
	     MASK))
	 (IVORY::COMPLEX
	   ;; If the numerator and denominator are fixnums or single floats, inline
	   ;; the hash computation, otherwise branch out to a call to SELECTOR-HASH.
	   `((PACKED PUSH (SP -2))
	     (PACKED TYPE-MEMBER-NO-POP ,(COMPUTE-TYPE-MEMBER-OPERAND '(IVORY::FIXNUM IVORY::SINGLE-FLOAT)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-NO-POP))
	     (PACKED %SET-TAG (IM ,(IVORY:DATA-TYPE 'IVORY::FIXNUM)))
	     (PACKED PUSH (SP -4))
	     (PACKED TYPE-MEMBER-NO-POP ,(COMPUTE-TYPE-MEMBER-OPERAND '(IVORY::FIXNUM IVORY::SINGLE-FLOAT)))
	     (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET SLOW-HASH-POP))
	     (PACKED %SET-TAG (IM ,(IVORY:DATA-TYPE 'IVORY::FIXNUM)))
	     ;; Strange-LDB style (ROT 7)
	     (PACKED LDB ,(DPB #O37 (BYTE 5 5) (LDB (BYTE 5 0) 7)))
	     (PACKED LOGXOR (SP POP))
	     MASK)))	     
     ;; Mask hash
     (PACKED LOGAND (SP -2))
     ;; Multiply by 3
     (PACKED MOVEM (SP -2))
     ;; Strange-LDB style (ROT 1)
     (PACKED LDB ,(DPB #O37 (BYTE 5 5) (LDB (BYTE 5 0) 1)))
     (PACKED ADD (SP -2))
     ;; Add to hash address
     (PACKED %POINTER-PLUS (SP POP))
     ;; Put it in BAR-1
     (PACKED %WRITE-INTERNAL-REGISTER (IVORY::REGISTER-NUMBER 'IVORY::BAR :BAR 1 :DIRECTION :WRITE))
     ;; TOS is smashed at this point
     (PACKED SET-SP-TO-ADDRESS (SP -1))
     SEARCH
     (PACKED %BLOCK-1-READ ,(IVORY::MAKE-BLOCK-READ :CYCLE-TYPE 'IVORY::DATA-READ
						    :PREFETCH NIL))
     ;; TOS holds the key from the table.  Check for NULL first, since this is the
     ;; easiest thing to do.  In some usages, this will be the most common case, in
     ;; others it will not be.
     (PACKED BRANCH-TRUE-AND-NO-POP (BRANCH-OFFSET NOT-NULL))
     ;; NIL in table, we are in a MISS.
     ;; Handler PC for miss
     (PACKED %BLOCK-1-READ ,(IVORY::MAKE-BLOCK-READ :CYCLE-TYPE 'IVORY::DATA-READ
						    :PREFETCH NIL))
     ;; Swap FP|2 and FP|3
     (PACKED PUSH (FP 2))
     (PACKED PUSH (FP 3))
     (PACKED POP (FP 2))
     (PACKED POP (FP 3))
     ;; If we unboxed the key, pop it off
     ,@(ECASE TYPE
	 ((IVORY::DOUBLE-FLOAT IVORY::BIG-RATIO IVORY::COMPLEX IVORY::DOUBLE-FIXNUM)
	  `((PACKED SET-SP-TO-ADDRESS-SAVE-TOS (SP -2))))
	 ((IVORY::BIGNUM) NIL))
     (PACKED %JUMP (SP POP))
     NOT-NULL
     ,@(ECASE TYPE
	 ((IVORY::BIGNUM)
	  `((PACKED EQL (FP 3))
	    (PACKED BRANCH-FALSE (BRANCH-OFFSET COLLISION))))
	 ((IVORY::DOUBLE-FLOAT IVORY::BIG-RATIO IVORY::COMPLEX IVORY::DOUBLE-FIXNUM)
	  `((PACKED %SET-TAG (IM ,(IVORY::DATA-TYPE 'IVORY::CONS)))
	    (PACKED SET-TO-CDR-PUSH-CAR (SP 0))
	    (PACKED EQL (SP -2))
	    (PACKED BRANCH-FALSE-AND-EXTRA-POP (BRANCH-OFFSET COLLISION))
	    (PACKED EQL (SP -2))
	    (PACKED BRANCH-FALSE (BRANCH-OFFSET COLLISION)))))
     ;; Handler
     (PACKED %BLOCK-1-READ ,(IVORY::MAKE-BLOCK-READ :CYCLE-TYPE 'IVORY::DATA-READ
						    :PREFETCH NIL))
     ;; Extra argument
     (PACKED %BLOCK-1-READ ,(IVORY::MAKE-BLOCK-READ :CYCLE-TYPE 'IVORY::DATA-READ
						    :PREFETCH NIL))
     ;; Move "SELF" to FP|3
     (PACKED PUSH (FP 2))
     (PACKED POP (FP 3))
     ;; Set extra argument
     (PACKED POP (FP 2))
     ;; If we unboxed the key, pop it off
     ,@(ECASE TYPE
	 ((IVORY::DOUBLE-FLOAT IVORY::BIG-RATIO IVORY::COMPLEX IVORY::DOUBLE-FIXNUM)
	  `((PACKED SET-SP-TO-ADDRESS-SAVE-TOS (SP -2))))
	 ((IVORY::BIGNUM) NIL))
     (PACKED %JUMP (SP POP))
     COLLISION
     ;; Add 2 to BAR-1 and try again.
     (PACKED %READ-INTERNAL-REGISTER ,(IVORY::REGISTER-NUMBER 'IVORY::BAR :BAR 1 :DIRECTION :READ))
     (PACKED %POINTER-PLUS (IM 2))
     (PACKED %WRITE-INTERNAL-REGISTER ,(IVORY::REGISTER-NUMBER 'IVORY::BAR :BAR 1 :DIRECTION :WRITE))
     (PACKED BRANCH (BRANCH-OFFSET SEARCH))
     ;; Call out to SELECTOR-HASH
     ,@(ECASE TYPE
	 ((IVORY::BIG-RATIO IVORY::COMPLEX)
	  `(SLOW-HASH-POP
	     (PACKED SET-SP-TO-ADDRESS (SP -1))
	     SLOW-HASH-NO-POP
	     (TAG ,(IVORY:DATA-TYPE 'IVORY::CALL-INDIRECT-PREFETCH) ,(LOCF (FDEFINITION 'SELECTOR-HASH)))
	     (PACKED PUSH (FP 3))
	     (PACKED FINISH-CALL-N ,(FINISH-CALL-ARG 'VALUE 1))
	     (PACKED BRANCH (BRANCH-OFFSET MASK))))
	 ((IVORY::DOUBLE-FLOAT IVORY::BIGNUM)
	  NIL))
     ))

(DEF-ASSEMBLER-MACRO EXTRA-ARGUMENT-FROM-TABLE ()
  `(PROGN
     ;; Skip around the odd half of the first instruction, which is needed by the
     ;; linker.
     (PACKED BRANCH (BRANCH-OFFSET TAG))
     TAG
     (TAG ,(IVORY::DATA-TYPE 'IVORY::CALL-INDIRECT)
	  ,(LOCF (FDEFINITION 'DISPATCHING-FUNCALLABLE-INSTANCE-TABLE)))
     ;; Get the generic function from the extra argument.  This has to agree with
     ;; STORAGE.
     (PACKED PUSH (FP 2))
     (PACKED %MEMORY-READ-ADDRESS 16)
     (PACKED %POINTER-PLUS (IM 255))
     (PACKED %MEMORY-READ 16)
     (PACKED FINISH-CALL-N ,(FINISH-CALL-ARG 'VALUE 1))
     ;; When there are no dispatches, the table is used to hold the extra argument
     ;; information.  Pop it into the extra argument and proceed as in an unwrap.
     (PACKED POP (FP 2))))

(DEF-ASSEMBLER-MACRO DISPATCH-HANDLER (&BODY FORMS)
  `(PROGN
     ,@FORMS
     (SUFFIX (NIL DISPATCH ,(COPY-LIST FORMS)))))



(DEFUN CLOS-COMPILE (SPEC LAMBDA)
  (LET ((CODE NIL)
	BASE (GROUPS NIL) LEVEL)
    (MULTIPLE-VALUE-BIND (LAMBDA-LIST DECLARATIONS DOCUMENTATION BODY)
	(PARSE-LAMBDA-EXPRESSION LAMBDA NIL)
      (DECLARE (IGNORE DOCUMENTATION))
      (WHEN (ASSOC 'SPECIAL DECLARATIONS)
	(ERROR "Can't handle SPECIAL declarations."))
      (MULTIPLE-VALUE-BIND (N-REQUIRED-ARGUMENTS N-OPTIONAL-ARGUMENTS RESTP KEYWORDSP KEYWORDS ALLOWP)
	  (LAMBDA-LIST-COMPONENTS LAMBDA-LIST)
	(DECLARE (IGNORE KEYWORDS ALLOWP))
	(WHEN (OR (PLUSP N-OPTIONAL-ARGUMENTS) KEYWORDSP)
	  (ERROR "Can't handle &OPTIONAL or &KEY."))
	(LABELS ((EMIT (INSTRUCTION)
		   (PUSH INSTRUCTION CODE))
		 (TRANSLATE (FORM ENV DESTINATION)
		   (IF (ATOM FORM)
		       (UNLESS (EQ DESTINATION 'EFFECT)
			 (IF (AND (SYMBOLP FORM)
				  (NOT (EQ FORM NIL))
				  (NOT (EQ FORM T))
				  (NOT (KEYWORDP FORM)))
			     (LET ((POS (CDR (ASSOC FORM ENV))))
			       (WHEN (NULL POS)
				 (SETF POS (POSITION FORM LAMBDA-LIST))
				 (WHEN (NULL POS)
				   (ERROR "Unrecognized variable."))
				 (SETF POS (IF (< POS N-REQUIRED-ARGUMENTS)
					       `(FP ,(+ 2 POS))
					       `(LP 0))))
			       (EMIT `(PACKED PUSH ,POS))
			       (INCF LEVEL)
			       (POP-INTO-DESTINATION DESTINATION))
			     (TRANSLATE-CONSTANT FORM ENV DESTINATION)))
		       (LET ((FUNCTION (FIRST FORM)))
			 (CASE FUNCTION
			   ((IF)
			    (COND ((= (LENGTH FORM) 3)	; (if x y)
				   ;; generate the conditional, for value only
				   (TRANSLATE (SECOND FORM) ENV 'VALUE)
				   (LET ((TAG (GENSYM)))
				     (COND ((EQ DESTINATION 'RETURN)
					    ;; generate a branch-true to
					    ;; the body, followed by
					    ;; return-single-stack, to
					    ;; return the NIL
					    (EMIT `(PACKED BRANCH-TRUE-ELSE-NO-POP
							   (BRANCH-OFFSET ,TAG)))
					    (EMIT '(PACKED RETURN-SINGLE (SP POP)))
					    (EMIT TAG)
					    (DECF LEVEL)	; popped the conditional value
					    ;; modularity brain-damage?
					    ;; calling some things with
					    ;; destination RETURN
					    ;; smashes LEVEL to NIL.
					    ;; Save it around these
					    ;; calls.
					    (LET ((SAVED-LEVEL LEVEL))
					      (TRANSLATE (THIRD FORM) ENV DESTINATION)
					      (SETQ LEVEL SAVED-LEVEL)))
					   (T
					     ;; generate a branch-false
					     ;; around the second form
					     (EMIT `(PACKED BRANCH-FALSE (BRANCH-OFFSET ,TAG)))
					     (DECF LEVEL)	; 'cause we popped
					     (TRANSLATE (THIRD FORM) ENV DESTINATION)
					     (EMIT TAG)))))
				  ((= (LENGTH FORM) 4)	; (if x y z)
				   ;; evaluate conditional form for single value
				   (TRANSLATE (SECOND FORM) ENV 'VALUE)
				   (COND ((EQ DESTINATION 'RETURN)
					  ;; generate branch-false to
					  ;; the second form, generate
					  ;; both forms to return
					  (LET ((FALSE-TAG (GENSYM)))
					    (EMIT `(PACKED BRANCH-FALSE 
							   (BRANCH-OFFSET ,FALSE-TAG)))
					    (DECF LEVEL)	; popped conditional value
					    (LET ((SAVED-LEVEL LEVEL))	; see above
					      (TRANSLATE (THIRD FORM) ENV DESTINATION)
					      (EMIT FALSE-TAG)
					      (SETQ LEVEL SAVED-LEVEL)
					      (TRANSLATE (FOURTH FORM) ENV DESTINATION)
					      (SETQ LEVEL SAVED-LEVEL))))
					 (T
					   ;; called for value or effect
					   ;; or something, generate two
					   ;; tags with the canonical
					   ;; branch structure
					   (LET ((FALSE-TAG (GENSYM))
						 (DONE-TAG (GENSYM)))
					     (EMIT `(PACKED BRANCH-FALSE
							    (BRANCH-OFFSET ,FALSE-TAG)))
					     (TRANSLATE (THIRD FORM) ENV DESTINATION)
					     (EMIT `(PACKED BRANCH (BRANCH-OFFSET ,DONE-TAG)))
					     (EMIT FALSE-TAG)
					     (TRANSLATE (FOURTH FORM) ENV DESTINATION)
					     (EMIT DONE-TAG)))))
				  (T
				    (ERROR "Malformed IF expression ~S" FORM))))
			   ;; some basic arithmetics
			   ((+ - * /)
			    (IF (EQ DESTINATION 'EFFECT)
				(TRANSLATE (CONS 'PROGN (CDR FORM)) ENV DESTINATION)
				(WHEN (> (LENGTH FORM) 1)
				  (TRANSLATE (SECOND FORM) ENV 'VALUE)
				  (LOOP WITH REMAINING-VALUES = (CDDR FORM)
					WHILE REMAINING-VALUES 
					DO (TRANSLATE (POP REMAINING-VALUES) ENV 'VALUE)
					   ;; zzz could be more optimal;
					   ;; look to see if this value
					   ;; is addressable as is...
					   (EMIT `(PACKED ,(CDR (ASSOC FUNCTION
								       '((+ . ADD)
									 (- . SUB)
									 (* . MULTIPLY)
									 (/ . QUOTIENT))))
							  (SP POP)))
					   (DECF LEVEL)	; we consumed two, left one.
					FINALLY
					  (CASE DESTINATION
					    ((VALUE MULTIPLE)
					     ;; done; value's on stack
					     )
					    ((RETURN)
					     (EMIT '(PACKED RETURN-SINGLE (SP POP)))))))))
			   ((QUOTE)
			    (TRANSLATE-CONSTANT (SECOND FORM) ENV DESTINATION))
			   ((FUNCTION)
			    (LET ((SPEC (SECOND FORM)))
			      (COND ((AND (CONSP SPEC)
					  (EQ (FIRST SPEC) 'LAMBDA))
				     (TRANSLATE-CONSTANT (CLOS-COMPILE NIL SPEC) ENV DESTINATION))
				    (T
				      (EMIT `(TAG ,(IVORY:DATA-TYPE 'IVORY::EXTERNAL-VALUE-CELL-POINTER) ,(LOCF (FDEFINITION SPEC))))
				      (INCF LEVEL)
				      (POP-INTO-DESTINATION DESTINATION)))))
			   ((PROGN)
			    (TRANSLATE-PROGN (REST FORM) ENV DESTINATION))
			   ((MULTIPLE-VALUE-PROG1)
			    (CASE (LENGTH FORM)
			      ((2) (TRANSLATE (SECOND FORM) ENV DESTINATION))
			      (OTHERWISE
				(CASE DESTINATION
				  ((RETURN)
				   (TRANSLATE (SECOND FORM) ENV 'MULTIPLE)
				   (DOLIST (FORM (NTHCDR 2 FORM))
				     (TRANSLATE FORM ENV 'EFFECT))
				   (EMIT `(PACKED RETURN-MULTIPLE (SP POP)))
				   (SETF LEVEL NIL))
				  (OTHERWISE
				    (TRANSLATE (SECOND FORM) ENV DESTINATION)
				    (DOLIST (FORM (NTHCDR 2 FORM))
				      (TRANSLATE FORM ENV 'EFFECT)))))))
			   ((LET)
			    (LET ((BINDINGS (SECOND FORM))
				  (OLD-ENV ENV))
			      (WHEN (AND BINDINGS (NOT (NULL GROUPS)))
				(ERROR "Can't compile LET in this position."))
			      (MULTIPLE-VALUE-BIND (DECLARATIONS BODY)
				  (MINIMA-INTERNALS::FIND-BODY-DECLARATIONS (NTHCDR 2 FORM))
				(WHEN (ASSOC 'SPECIAL DECLARATIONS)
				  (ERROR "Can't handle SPECIAL declarations."))
				(DOLIST (BINDING BINDINGS)
				  (MULTIPLE-VALUE-BIND (VAR VAL)
				      (IF (CONSP BINDING)
					  (VALUES (FIRST BINDING) (SECOND BINDING))
					  (VALUES BINDING NIL))
				    (TRANSLATE VAL OLD-ENV 'VALUE)
				    (PUSH `(,VAR . (,BASE ,LEVEL)) ENV)))
				(TRANSLATE-PROGN BODY ENV DESTINATION))))
			   ((LET*)
			    (LET ((BINDINGS (SECOND FORM)))
			      (WHEN (AND BINDINGS (NOT (NULL GROUPS)))
				(ERROR "Can't compile LET in this position."))
			      (MULTIPLE-VALUE-BIND (DECLARATIONS BODY)
				  (MINIMA-INTERNALS::FIND-BODY-DECLARATIONS (NTHCDR 2 FORM))
				(WHEN (ASSOC 'SPECIAL DECLARATIONS)
				  (ERROR "Can't handle SPECIAL declarations."))
				(DOLIST (BINDING BINDINGS)
				  (MULTIPLE-VALUE-BIND (VAR VAL)
				      (IF (CONSP BINDING)
					  (VALUES (FIRST BINDING) (SECOND BINDING))
					  (VALUES BINDING NIL))
				    (TRANSLATE VAL ENV 'VALUE)
				    (PUSH `(,VAR . (,BASE ,LEVEL)) ENV)))
				(TRANSLATE-PROGN BODY ENV DESTINATION))))
			   ((SVREF)
			    (TRANSLATE (SECOND FORM) ENV 'VALUE)
			    (COND ((AND (INTEGERP (THIRD FORM))
					(< (THIRD FORM) 256))
				   (EMIT `(PACKED AREF-1 (IM ,(THIRD FORM)))))
				  (T
				    (TRANSLATE (THIRD FORM) ENV 'VALUE)
				    (EMIT `(PACKED AREF-1 (SP POP)))
				    (DECF LEVEL)))
			    (POP-INTO-DESTINATION DESTINATION))
			   ((APPLY)
			    (TRANSLATE (SECOND FORM) ENV 'VALUE)
			    (EMIT `(PACKED START-CALL (SP POP)))
			    (DECF LEVEL)
			    (TRANSLATE-FINISH-CALL (NTHCDR 2 FORM) T ENV DESTINATION))
			   ((FUNCALL)
			    (TRANSLATE (SECOND FORM) ENV 'VALUE)
			    (EMIT `(PACKED START-CALL (SP POP)))
			    (DECF LEVEL)
			    (TRANSLATE-FINISH-CALL (NTHCDR 2 FORM) NIL ENV DESTINATION))
			   (OTHERWISE
			     (COND ((CONSP FUNCTION)
				    (NYI))
				   ((MACRO-FUNCTION FUNCTION)
				    (TRANSLATE (MACROEXPAND-1 FORM) ENV DESTINATION))
				   ((SPECIAL-OPERATOR-P FUNCTION)
				    (ERROR "Can't do that operator."))
				   (T
				     (EMIT `(TAG ,(IVORY:DATA-TYPE 'IVORY::CALL-INDIRECT)
						 ,(LOCF (FDEFINITION (FIRST FORM)))))
				     (TRANSLATE-FINISH-CALL (REST FORM) NIL ENV DESTINATION))))))))
		 (TRANSLATE-FINISH-CALL (ARGS APPLY ENV DESTINATION)
		   (PUSH LEVEL GROUPS)
		   (SETF LEVEL -1)
		   (DOLIST (FORM ARGS)
		     (TRANSLATE FORM ENV 'VALUE))
		   (EMIT `(PACKED ,(IF APPLY 'FINISH-CALL-N-APPLY 'FINISH-CALL-N)
				  ,(FINISH-CALL-ARG DESTINATION (LENGTH ARGS))))
		   (SETF LEVEL
			 (ECASE DESTINATION
			   ((EFFECT)
			    (POP GROUPS))
			   ((VALUE)
			    (1+ (POP GROUPS)))
			   ((MULTIPLE)
			    -1)
			   ((RETURN)
			    NIL))))
		 (POP-INTO-DESTINATION (DESTINATION)
		   (ECASE DESTINATION
		     ((EFFECT)
		      (EMIT `(PACKED SET-SP-TO-ADDRESS (SP -1)))
		      (DECF LEVEL))
		     ((VALUE))
		     ((MULTIPLE)
		      (EMIT `(PUSH-CONSTANT 1))
		      (PUSH (1- LEVEL) GROUPS)
		      (SETF LEVEL -1))
		     ((RETURN)
		      (EMIT `(PACKED RETURN-SINGLE #O1000))
		      (SETF LEVEL NIL))))
		 (TRANSLATE-PROGN (BODY ENV DESTINATION)
		   (IF (NULL BODY)
		       (TRANSLATE-CONSTANT NIL ENV DESTINATION)
		       (LOOP FOR (FORM . REST) ON BODY DO
			 (TRANSLATE FORM ENV (IF REST 'EFFECT DESTINATION)))))
		 (TRANSLATE-CONSTANT (CONSTANT ENV DESTINATION)
		   (DECLARE (IGNORE ENV))
		   (ECASE DESTINATION
		     ((EFFECT))
		     ((VALUE)
		      (EMIT `(PUSH-CONSTANT ,CONSTANT))
		      (INCF LEVEL))
		     ((MULTIPLE)
		      (EMIT `(PUSH-CONSTANT ,CONSTANT))
		      (EMIT `(PUSH-CONSTANT 1))
		      (PUSH LEVEL GROUPS)
		      (SETF LEVEL -1))
		     ((RETURN)
		      (CASE CONSTANT
			((NIL)
			 (EMIT `(PACKED RETURN-SINGLE #O1040)))
			((T)
			 (EMIT `(PACKED RETURN-SINGLE #O1041)))
			(OTHERWISE
			  (EMIT `(PUSH-CONSTANT ,CONSTANT))
			  (EMIT `(PACKED RETURN-SINGLE #O1000))))
		      (SETF LEVEL NIL))))
		 )
	  (COND (RESTP
		  (EMIT `(ENTRY-REST-ACCEPTED
			   ,(+ 2 N-REQUIRED-ARGUMENTS) ,(+ 2 N-REQUIRED-ARGUMENTS)))
		  (EMIT `(PUSH-CONSTANT NIL))
		  (EMIT `(SKIP))
		  (SETF BASE 'LP)
		  (SETF LEVEL 0))
		(T
		  (EMIT `(ENTRY-REST-NOT-ACCEPTED
			   ,(+ 2 N-REQUIRED-ARGUMENTS) ,(+ 2 N-REQUIRED-ARGUMENTS)))
		  (SETF BASE 'FP)
		  (SETF LEVEL (+ 2 -1 N-REQUIRED-ARGUMENTS))))
	  (TRANSLATE-PROGN BODY NIL 'RETURN)
	  (EMIT `(SUFFIX (,SPEC)))
	  (SETF CODE (ASSEMBLE (REVERSE CODE))))))
    (WHEN SPEC
      (SETF (FDEFINITION SPEC) CODE))
    CODE))