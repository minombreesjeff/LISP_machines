;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10; Package: CLOS-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(IN-PACKAGE :CLOS-INTERNALS)

#+(OR Genera CLOE-Runtime)
(DEFMACRO WITH-SILLY-COMPILER-COMPATIBILITY ((ENVVAR) &BODY BODY)
  `(MACROLET ((CONSTANT-FORM-P (X)
		#+(OR Genera CLOE-Runtime) `(COMPILER::CONSTANT-FORM-P ,X))
	      (EVALUATE-CONSTANT (X)
		#+(OR Genera CLOE-Runtime) `(COMPILER::CONSTANT-EVALUATOR ,X))
	      (GLOBAL-FUNCTION-P (X)
		#+Genera
		`(NULL (SI:LOCAL-FUNCTION-DEFINITION ,X ,',ENVVAR))
		#-Genera
		`(MULTIPLE-VALUE-BIND (WHICH LOCALP) (FUNCTION-INFORMATION ,X ,',ENVVAR)
		   (DECLARE (IGNORE WHICH))
		   (NOT LOCALP)))
	      (INLINE-P (X)
		#+Genera
		`(SI:ENV-DECLARATIONS-INLINE-P ,X ,',ENVVAR)
		#+CLOE-Runtime
		`(NOT (EQ (SYS::FUNCTION-INLINE-DECLARATION ,X) :NO))))
     (LET ((,ENVVAR
	    #+Genera COMPILER:*OPTIMIZER-ENVIRONMENT*
	    #+CLOE-Runtime COMPILER::*ENVIRONMENT*))
       ,@BODY)))

#+Genera
(COMPILER:DEFOPTIMIZER (FIND-CLASS FIND-CLASS-OPTIMIZER) (FORM)
  (WITH-SILLY-COMPILER-COMPATIBILITY (ENV)
    (DECLARE (IGNORE ENV))
    (UNLESS (AND (= (LENGTH FORM) 2)
		 (EQ (FIRST FORM) 'FIND-CLASS)
		 (CONSTANT-FORM-P (SECOND FORM)))
      (RETURN-FROM FIND-CLASS-OPTIMIZER FORM))
    `(LOCATION-CONTENTS
       ',(LOCF (CLASS-HOLDER-CLASS
		     (LOAD-CLASS-HOLDER (EVALUATE-CONSTANT (SECOND FORM))))))))

;;; Calling MAKE-INSTANCE with enough constant arguments optimizes into calling a
;;; positional constructor function, unless suppressed by a NOTINLINE declaration
#+(OR Genera CLOE-Runtime)
(COMPILER::DEFOPTIMIZER (MAKE-INSTANCE MAKE-INSTANCE-CONSTRUCTOR) (FORM)
  (WITH-SILLY-COMPILER-COMPATIBILITY (ENV)
    (DECLARE (IGNORE ENV))
    (WHEN (AND (EVENP (LENGTH FORM))
	       (< 1 (LENGTH FORM))
	       (CONSTANT-FORM-P (SECOND FORM)))
      (LET ((CLASS (EVALUATE-CONSTANT (SECOND FORM))))
	(BLOCK POSITIONAL-CONSTRUCTOR
	  (TYPECASE CLASS
	    ((OR SYMBOL CLASS)
	     (LET ((KEYS NIL)
		   (VALUES NIL))
	       (LOOP FOR (KEY VALUE) ON (NTHCDR 2 FORM) BY #'CDDR DO
		 (UNLESS (AND (CONSTANT-FORM-P KEY)
			      (SYMBOLP (SETF KEY (EVALUATE-CONSTANT KEY))))
		   (RETURN-FROM POSITIONAL-CONSTRUCTOR))
		 (PUSH KEY KEYS)
		 (PUSH VALUE VALUES))
	       (RETURN-FROM MAKE-INSTANCE-CONSTRUCTOR
		 `(FUNCALL (LISP:FUNCTION ,(FIND-POSITIONAL-CONSTRUCTOR CLASS (REVERSE KEYS)))
			   ,@(REVERSE VALUES)))))))
	(WHEN (SYMBOLP CLASS)
	  (RETURN-FROM MAKE-INSTANCE-CONSTRUCTOR
	    `(MAKE-INSTANCE (FIND-CLASS ',CLASS) ,@(NTHCDR 2 FORM)))))))
  FORM)

#+Genera
(SI:ALLOW-REDEFINITION 'APPLY 'COMPILER:DEFOPTIMIZER)

#+(OR Genera CLOE-Runtime)
(COMPILER::DEFOPTIMIZER (APPLY APPLY-MAKE-INSTANCE-CONSTRUCTOR) (FORM)
  (WITH-SILLY-COMPILER-COMPATIBILITY (ENV)
    (WHEN (AND (EVENP (LENGTH FORM))
	       (< 3 (LENGTH FORM))
	       (OR (EQUAL (SECOND FORM) ''MAKE-INSTANCE)
		   (AND (EQUAL (SECOND FORM) '(LISP:FUNCTION MAKE-INSTANCE))
			(GLOBAL-FUNCTION-P 'MAKE-INSTANCE)))
	       (INLINE-P 'MAKE-INSTANCE)
	       (CONSTANT-FORM-P (THIRD FORM)))
      (LET ((CLASS (EVALUATE-CONSTANT (THIRD FORM))))
	(BLOCK POSITIONAL-CONSTRUCTOR
	  (TYPECASE CLASS
	    ((OR SYMBOL CLASS)
	     (LET ((KEYS NIL)
		   (VALUES NIL))
	       (LOOP FOR (KEY VALUE) ON (BUTLAST (NTHCDR 3 FORM)) BY #'CDDR DO
		 (UNLESS (AND (CONSTANT-FORM-P KEY)
			      (SYMBOLP (SETF KEY (EVALUATE-CONSTANT KEY))))
		   (RETURN-FROM POSITIONAL-CONSTRUCTOR))
		 (PUSH KEY KEYS)
		 (PUSH VALUE VALUES))
	       (RETURN-FROM APPLY-MAKE-INSTANCE-CONSTRUCTOR 
		 `(APPLY (LISP:FUNCTION ,(FIND-POSITIONAL-CONSTRUCTOR CLASS (REVERSE KEYS) T))
			 ,@(REVERSE VALUES) ,@(LAST FORM)))))))
	(WHEN (SYMBOLP CLASS)
	  (RETURN-FROM APPLY-MAKE-INSTANCE-CONSTRUCTOR 
	    `(APPLY #'MAKE-INSTANCE (FIND-CLASS ',CLASS) ,@(NTHCDR 3 FORM)))))))
  FORM)

#+Genera
(DEFMETHOD DECODE-SLOT-LOCATIVE ((CLASS-HOLDER CLASS-HOLDER) LOCATION)
  (IF (EQ LOCATION (LOCF (CLASS-HOLDER-CLASS CLASS-HOLDER)))
      (VALUES `(LOAD-CLASS-LOCATION ',(CLASS-HOLDER-NAME CLASS-HOLDER)) :LOAD-FORM)
      (CALL-NEXT-METHOD)))
