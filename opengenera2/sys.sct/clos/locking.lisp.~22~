;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Base: 10; Package: CLOS-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(IN-PACKAGE :CLOS-INTERNALS)

#-Genera
(DEFVAR *ABORTS-ENABLED* T)

#-Genera
(DEFMACRO WITHOUT-ABORTS (STUFF &BODY BODY)
  (DECLARE (IGNORE STUFF))
  `(LET ((*ABORTS-ENABLED* NIL))
     ,@BODY))

#-Genera
(DEFMACRO WITH-ABORTS-ENABLED ((&REST IDENTIFIERS) &BODY BODY)
  (DECLARE (IGNORE IDENTIFIERS))
  `(LET ((*ABORTS-ENABLED* T))
     ,@BODY))

#+Genera
(DEFPARAMETER *CLOS-LOCK* (PROCESS:MAKE-LOCK "CLOS Lock" :RECURSIVE T))

#-Genera
(DEFPARAMETER *CLOS-LOCK* NIL)

(DEFPARAMETER *LOCKED-OBJECTS* NIL)

#+Genera
(DEFMACRO WITH-CLOS-LOCK (&BODY BODY)
  `(PROCESS:WITH-LOCK (*CLOS-LOCK*)
     ,@BODY))

#-Genera
(DEFMACRO WITH-CLOS-LOCK (&BODY BODY)
  `(LET ((*CLOS-LOCK* T))
     ,@BODY))

#+Genera
(DEFMACRO CLOS-LOCKED-P ()
  `(NOT (PROCESS:LOCK-IDLE-P *CLOS-LOCK*)))

#-Genera
(DEFMACRO CLOS-LOCKED-P ()
  `*CLOS-LOCK*)

#+Genera
(DEFMACRO WITHOUT-CLOS-LOCK (&BODY BODY)
  `(PROCESS:WITHOUT-LOCK (*CLOS-LOCK*)
     ,@BODY))

#-Genera
(DEFMACRO WITHOUT-CLOS-LOCK (&BODY BODY)
  `(LET ((*CLOS-LOCK* NIL))
     ,@BODY))

#+Genera
(DEFMACRO PROCESS-ID ()
  'SYS:CURRENT-PROCESS)

#-Genera
(DEFMACRO PROCESS-ID ())

(DEFMACRO WITH-OBJECT-LOCKED ((OBJECT &KEY (RECURSIVE NIL)) &BODY BODY)
  (LET ((PAIR (GENSYM))
	(GET-OBJECT-LOCK-BLOCK (GENSYM)))
    `(LET ((,PAIR (CONS ,OBJECT (PROCESS-ID))))
       (UNWIND-PROTECT
	   (PROGN
	     (BLOCK ,GET-OBJECT-LOCK-BLOCK
	       (LOOP
		 (WITH-CLOS-LOCK
		   (LET ((OLD-PAIR (ASSOC ,OBJECT *LOCKED-OBJECTS*)))
		     (WHEN (AND OLD-PAIR (EQ (CDR OLD-PAIR) (PROCESS-ID)))
		       ,(IF RECURSIVE
			    `(RETURN-FROM ,GET-OBJECT-LOCK-BLOCK)
			    `(ERROR
			       "Attempt to lock ~s which is already locked by this process"
			       ,OBJECT)))
		     (UNLESS OLD-PAIR
		       (PUSH ,PAIR *LOCKED-OBJECTS*)
		       (RETURN-FROM ,GET-OBJECT-LOCK-BLOCK))))
		 #+Genera
		 (PROCESS:PROCESS-WAIT
		   "Get object lock"
		   #'(LAMBDA (OBJECT)
		       (NOT (ASSOC OBJECT *LOCKED-OBJECTS*)))
		   ,OBJECT)))
	     ,@BODY)
	 (WITH-CLOS-LOCK (SETQ *LOCKED-OBJECTS* (DELETE ,PAIR *LOCKED-OBJECTS*)))))))

#-(OR Genera Minima)
(DEFMACRO WITH-NO-OTHER-PROCESSES (&BODY BODY)
  `(PROGN ,@BODY))

#+Genera
(DEFMACRO INHIBIT-GC-FLIPS (&BODY BODY)
  `(SI:INHIBIT-GC-FLIPS ,@BODY))

#+CLOE-Runtime
(DEFMACRO INHIBIT-GC-FLIPS (&BODY BODY)
  `(LET ((SYS::*GC-ENABLED* NIL))
    ,@BODY))

#-(or Genera CLOE-Runtime)
(DEFMACRO INHIBIT-GC-FLIPS (&BODY BODY)
  `(PROGN ,@BODY))
