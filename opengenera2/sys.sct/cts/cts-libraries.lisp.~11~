;;; -*- Mode: LISP; Syntax: Zetalisp; Package: CTS; Base: 10; Nofill: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;; nearest-whole of a shortreal
;;;
(defun cts-fixr (x)
  (si:with-float-operating-mode ((:round :minus))
    (fix (+ x 0.5))))

(defun nearest-whole (x)
  (if (minusp x) (- (cts-fixr (- x))) (cts-fixr x)))

(defun fnearest-whole (x)
  ; don't cons on large floats with no fraction bits
  (if ( (abs x) #.(ash 0.5 #+3600 24. #-3600 32.)) x
    (float (nearest-whole x))))

(defun trunc (x)				;CL function
  (si:with-float-operating-mode ((:round :zero))
    (sys:%convert-single-to-fixnum x)))

;;;
;;; truncate a shortreal towards zero, returning shortreal
;;;
(defun ftrunc (x)
  ; don't cons on large floats with no fraction bits
  (if ( (abs x) #.(ash 0.5 #+3600 24. #-3600 32.)) x
      (float (trunc x))))

(defun double-trunc (x)
  (multiple-value-bind (x-high x-low)
      (si:double-components x)
    (si:with-float-operating-mode ((:round :zero))
      (sys:%convert-double-to-fixnum x-high x-low))))

(defun double-trunc-components (x-high x-low)
  (si:with-float-operating-mode ((:round :zero))
    (sys:%convert-double-to-fixnum x-high x-low)))

(defun sign-of-second-times-abs-first (a1 a2)
  (let ((value (abs a1)))
    (if (< a2 0) (- value) value)))

;;;
;;; what lousy terrible crappy code, you say
;;;
(defun complex-real-part (real ignore) real)
(defun complex-imag-part (ignore imag) imag)

(defun neg-complex (real imag)
  (values (- real) (- imag)))

(defun complex-expt-integer (real imag integer)
  (multiple-value-bind (rprod iprod)
      (if (oddp integer) (values real imag) (values 1.0 0))
    (loop for power = (ash (abs integer) -1) then (ash power -1)
	  until (zerop power) do
		(multiple-value (real imag) (si:complex-mul real imag real imag))
		(when (oddp power)
		  (multiple-value (rprod iprod) (si:complex-mul rprod iprod real imag))))
    (if (minusp integer)
	(si:complex-// 1.0 0.0 rprod iprod)
      (values rprod iprod))))

(defun complex-expt (real-base imag-base real-expt imag-expt)
  (multiple-value-bind (rlbase ilbase) (si:complex-log-components real-base imag-base)
    (multiple-value-bind (rprod iprod) (si:complex-mul real-expt imag-expt rlbase ilbase)
      (si:complex-exp-components rprod iprod))))

(defun complex-compare (real1 imag1 real2 imag2)
  (and (= real1 real2)
       (= imag1 imag2)))


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Utility used by the io libraries


0(defun print-f-string (stream string n-digits sign decimal-exponent width decimal-places
		       &optional (print-plus nil) (decimal-point-p nil))
  1;;
0  1;;        A non 0NIL1 0decimal-point-p1 should be used to force printing of a decimal
0  1;;        point even though no trailing digits follow the result.  This is always
0  1;;        nil for 0Pascal1.  It is dependent on the presence of the 0#1 flag in 0C
  1;;        format effectors.
0  1;;
0  (setq decimal-places (max decimal-places 0))
  (let* ((print-sign (minusp sign))
	 (print-. (or (> decimal-places 0) decimal-point-p))
	 (abs-width (abs width))
	 (non-blank-width (+ (max decimal-exponent 0) decimal-places))
	 (print-leading-zero ( decimal-exponent 0)))
    (when print-leading-zero
      (incf non-blank-width))
    (when (or print-sign (neq print-plus ':nothing))
      (incf non-blank-width))
    (when print-.
      (incf non-blank-width))
    (unless (minusp width)
      (loop repeat (- abs-width non-blank-width)
	    do (send stream :tyo #\SPACE)))
    (cond (print-sign
	   (send stream :tyo #/-))
	  ((eq print-plus ':nothing))
	  (print-plus
	   (send stream :tyo #/+))
	  (t (send stream :tyo #\SPACE)))
    (cond ((> decimal-exponent 0)
	   (send stream :string-out string
		 0 (min decimal-exponent n-digits))
	   (loop repeat (- decimal-exponent n-digits)
		 do (send stream :tyo #/0)))
	  (print-leading-zero
	   (send stream :tyo #/0)))
    (when print-.
      (send stream :tyo #/.)
      (loop repeat (- decimal-exponent)
	    do (send stream :tyo #/0)))
    (when (> n-digits (max decimal-exponent 0))
      (send stream :string-out string (max decimal-exponent 0) n-digits))
    (loop repeat (+ (min decimal-exponent 0)
		    (- decimal-places
		       (max (- n-digits (max decimal-exponent 0)) 0)))
	  do (send stream :tyo #/0))
    (when (minusp width)
      (loop repeat (- abs-width non-blank-width)
	    do (send stream :tyo #\SPACE)))))
