;;; -*- Mode:LISP; Package: CTS; Lowercase: T; Base:10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;; Created 1/26/82 14:22:49 by STRYKER

;;;
;;; To use this file of parser facilities, you need a defselect handling three messages,
;;; being :parse-literal-string, :default-separator, and :parser-error.  :parse-literal-string
;;; takes the error flag and a string as inputs, and produces lisp code to parse the string.
;;; :default-separator builds lisp to parse the default separator string for the parser.
;;; :parser-error takes format args, and produces lisp to complain about a parser error.
;;;
;;; Here is an example of such a defselect, used in pascal statement parsing
;(defselect pascal-parser
;  (:parse-literal-string (eb str)
;   `(is-next-token ,eb ',(intern-key-or-op str)))
;  (:default-separator (eb)
;   `(is-next-token ,eb ',(intern-key-or-op ",")))
;  (:parser-error (&rest args)
;   `(parse-err t nil ,@(copylist args))))
;
;;; To define the macros which define parser productions, the define-keyword-parser macro
;;; is used.  The first argument is the name of the parser production defining form.
;;; The second argument is the name of a parser primitive defining form.  The third argument
;;; is the parser defselect, as described above.
;;;
;;; An example, which defines the parsers for pascal statement parsing, is below:
;(define-keyword-parser defparse defparse-primitive pascal-parser)
;
;;; The format for the defparse facility is:
;(defparse production-name (production-arg..) (&aux variable..)
;  (parser-pattern..)
;  lisp-to-be-evaluated-if-the-parser-pattern-sequence-succeeds..)
;
;;; Usually, there will be no arguments, but there will be auxes, used to hold the
;;; result of parsing subpatterns.
;;;
;;; The format for the defparse-primitive facility is:
;(defparse-primitive primitive-production-name (error-flag args..)
;  lisp-to-be-evaluated..)	     ; if the lisp returns true, the production succeeds
;
;;;
;;; The error-flag indicates what should happen if the production fails;  if the error-flag
;;; is nil, just return nil.  If it is non-nil, give an error.  The error flag is nil for
;;; optional productions, and for all but the last alternative in a one-of form.
;;;
;;; In what follows, lisp-expr means a lisp expression and lisp-exprs means a list of lisp
;;; expressions.  Pattern and pattern-list mean a parser pattern and list of patterns.
;;;
;;; A parser pattern is one of the following:
;;;   1. a string, which is passed to the :parse-literal-string defselect message.
;;;   2. a symbol, which must be the name of a production or production-primitive, which
;;;      is invoked, being passed only the error flag as an argument
;;;   3. a list, whose first element is a symbol.  The symbol must be a 
;;;      production or production-primitive name, or one of the special pattern-expanding
;;;      forms.  Of these, the following exist:
;;;        i.    (= symbol parse-pattern), which assigns symbol, which may be present in
;;;              let-vars or the args, the value of the pattern.
;;;
;;;        ii.   (one-of (option..) parser-pattern..), which parses for one of
;;;              pattern alternatives.  The possible options are:
;;;
;;;                  (:else lisp-expr), which evaluates expr if none of the alternatives
;;;                  matches.
;;;
;;;                  (:bind let-variable-binding-list), which binds the lisp let variables 
;;;                  around the parse of the alternatives.
;;;
;;;        iii.  (zero-or-more-of (option..) pattern) and
;;;              (one-or-more-of (option..) pattern), which returns a list
;;;              of the result of parsing for pattern zero (or one) or more times.
;;;              The possible options are:
;;;
;;;                  (:continue-if lisp-expr).  If present, this expression is evaluated
;;;                  to determine whether to allow each loop iteration.
;;;
;;;                  (:bind let-variable-binding-list), which binds the lisp let variables 
;;;                  around the parse of the alternatives.
;;;
;;;                  (:default-separator string), giving the string representation of the
;;;                  default separator, to be parsed to determine whether to continue
;;;                  iterating.  :Continue-if and :default-separator are exclusive.
;;;
;;;                  (:named symbol-name), which allows the loops in n-or-more-of to be
;;;                  named, so that (return-from symbol-name value) works.
;;;
;;;        iv.   (then (parser-pattern..) lisp-expr..), which parses for the
;;;              pattern sequence given by parser-pattern.., and then evaluates the
;;;              lisp progn body assuming the parse is successful.
;;;
;;;        v.    (let (vars-and-values) parser-pattern..)
;;;              (let* (vars-and-values) parser-pattern..)
;;;              These forms are just like the lisp versions, except that the bodys are
;;;              a list of parser patterns instead of lisp code.
;;;
;;;        vi.   (with (option..) parser-pattern..)
;;;              An obsolete version of let*, given that the only option is :bind.
;;;
;;;        vii.  (eval lisp-expr parser-pattern..)
;;;              Lisp eval the lisp expr, then try parsing the parser-pattern sequence.
;;;
;;;        iix.  (multiple-value-bind vars parser-pattern parser-pattern..)
;;;              Parse the first parser pattern to get multiple values, and assign them to
;;;              vars.  Then, inside the multiple value binding, try to parse the
;;;              parser-pattern sequence.
;;;
;;;        ix.   (multiple-value vars parser-pattern..)
;;;              Parse the parser-pattern sequence to yield multiple values, and then assign
;;;              them to vars.
;;;
;;;        x.    (if lisp-expr parser-pattern parser-pattern..)
;;;              Evaluate the lisp-expr.  If non-nil, return the value of parsing the first
;;;              parser-pattern.  Otherwise, return the value of the parser-pattern sequence
;;;              coming after the first parser-pattern.
;;;
;;;        xi.   (selectq-pattern lisp-expr (selectors parser-pattern..)..)
;;;              Exactly like the lisp selectq, except that all of the alternatives are
;;;              parser-pattern sequences, instead of list-expr sequences.
;;;
;;;        xii.  (optional (option..) parser-pattern..)
;;;              The options are the same as the one-of options.  This operator
;;;              treats the parser-pattern sequence as optional, and return 'zip if the
;;;              first of the parser-patterns does not succeed.
;;;
;;;        xiii. (zip)
;;;              This pattern just succeeds, returning zip.  This is useful if
;;;              you want to include some lisp in a parser-pattern, e.g.,
;;;                  (then (zip)
;;;                     (special-parsing-code-in-lisp ...))
;;;
;;;  In addition, you can define your own pattern expanders.  The following
;;;  defines a pattern-expander which parses a list of productions if the *dialect* switch
;;;  has the value :VS
;;;
;;;  (def-pattern-expander when-VS (eb &rest patterns)
;;;     `(when (eq *dialect* :VS)
;;;         ,(pattern-expand-sequence ,eb patterns)))
;;;
;;;  Given the example code:
;;;  (defparse optional-vs-args () (args)
;;;     ((when-VS
;;;         ","
;;;         (= args optional-args)))
;;;     args)
;;;
;;;  The :parser-pattern-expander property of when-VS will be lexpr-funcalled,
;;;  passing the error flag, eb, as the first argument, and the subforms of the
;;;  when-VS phrase as the other arguments.
;;;


;;;
;;; constants
;;;
(defconst *production-name* nil)
(defconst *parser-name* '*parser-name*)

(defvar *keyword-defselect*)			; a defselect handling the messages
						; :default-separator, :parse-literal-string
						; and :parser-error

(defvar *all-pattern-expanders* nil)		; an alist of (pattern-name function)
						; used by keyword-macros

(defmacro def-pattern-expander (name args &rest body)
  (let ((expander-name (intern (string-append (string name) "-PATTERN-EXPANDER"))))
    `(progn 'compile
	    (push '(,name ,expander-name) *all-pattern-expanders*)
	    (defun ,expander-name ,args ,@body))))

;;;
;;; vars used by the pattern-expansion package
;;;
(defvar *undef-productions* nil)
(defvar *defined-productions* nil)
(defvar *dispatch-classes* nil)

;;; error and warning routines
(defun key-err (form &rest args)
  (lexpr-funcall #'ferror nil form args))
(defprop key-err t :error-reporter)

(defun key-warn (form &rest args)
  (format t "~&<< Keyword warning in ~A >>~%" *production-name*)
  (lexpr-funcall #'format t form args))

;;;
;;; fun which references a production
;;;
(defun reference-production (id)
  (cond ((get id *parser-name*))
	((memq id *undef-productions*))
	((push id *undef-productions*))))

;;;
;;; fun to make id the name of a defined production
;;;
(defun define-production (id)
  (if (null (get id *parser-name*))
      (push id *defined-productions*))
  (putprop id t *parser-name*)
  (and (memq id *undef-productions*)
       (setq *undef-productions* (delq id *undef-productions*))))

;;;
;;; undefine productions for reload
;;;
(defun undefine-productions nil
  (mapc #'(lambda (a) (si:nremprop a *parser-name*))
	*defined-productions*)
    (mapc 'undefine-production-class
	  *dispatch-classes*)
  (setq *defined-productions* nil)
  (setq *undef-productions* nil)
  (setq *dispatch-classes* nil)) 

(defun undefine-production-class (class)
  (si:nremprop class 'first-keywords)
  (si:nremprop class 'dispatch-class-list))


;;;
;;; fun to surround a pattern expansion with a let, if bind is non-nil
;;;
(defun in-binding (bind expr)
  (if bind
      `(let ,bind ,expr)
      expr))

;;;
;;; fun to test a value of the error indicator eb, one of nil, t, or 'eb
;;;
(defun test-eb (eb else)
  (cond ((null else) nil)
	((null eb) nil)
	((eq eb t) (list else))
	(t
	 (list `(and ,eb ,else)))))

;;;
;;; fun to expand a sequence of patterns, and then eval lisp body
;;;
(defun pattern-expand-sequence (eb patlist)
  (x-ify 'and
	 (loop for pat in patlist
	       for neb = eb then t
	       collect (pattern-expand neb pat))))

;;;
;;; fun to expand a list of alternatives: (one-of a1 a2 a3)
;;;
(def-pattern-expander one-of (eb options &rest patterns)
  (let ((else nil)
	(bind nil))
    (keyword-extract options i (else bind))
    (in-binding bind
		(x-ify 'or
		       (nconc
			 (loop for pats on patterns
			       as first-pat = (car pats)
			       collect
				  (pattern-expand (if (or else (cdr pats))
						      nil
						    eb)
						  first-pat))
			 (test-eb eb else))))))


;;;
;;; search for eq caars in list
;;;
(defun check-dup-caar (val list)
  (if (mem val list #'(lambda (x y) (eq (car x) (car y))))
      (send *keyword-defselect* :parser-error
	    "Duplicate entry /"~N/" in sequence" (car val))))

;;;
;;; fun which generates expansions for the iterators, zero-or-more ...
;;;    minim is the minimum count, typically one or zero
;;;    chk-dups is true if the returns should be checked for duplicate caars
;;;
(defun n-or-more-of (minim eb options pattern chk-dups)
  eb ; ignored
  (let ((continue-if nil)
	(bind nil)
	(default-separator nil)
	(result-list (gensym))
	(result (gensym))
	(count (gensym))
	(named nil)
	(continuer nil))
    (keyword-extract options i (continue-if bind default-separator named))
    (when default-separator
      (when continue-if
	(key-err "Both :default-separator and :continue-if specified in n-or-more-of"))
      (setq continuer (send *keyword-defselect* :parse-literal-string
			    nil default-separator)))
    (when continue-if
      (setq continuer continue-if))
    (unless continuer
      (setq continuer (send *keyword-defselect* :default-separator nil)))
    (let ((eb-is-nil (or (= minim 0) (eq continuer t))))
      (in-binding bind
		  `(,@(if named `(do-named ,named) '(do))
		     ((,result-list nil)
			(,result)
			,@(if ( minim 0)
			      `((,count 0)))
			(eb ,(if eb-is-nil nil eb)
			    ,(if eb-is-nil nil t)))
		       (nil)
		     (progn eb)			; In case eb is not referenced in the do body.
		     ,@(when (and (= minim 0) continue-if)
			 `((and (null ,continuer) (go a))))
		     (cond
		       ((null (setq ,result ,(pattern-expand 'eb pattern)))
			,@(when (neq continuer t)
			    `(,(send *keyword-defselect* :parser-error
				     (string-append "Omitted element following separator "
						    (or default-separator
							(send *keyword-defselect*
							      :default-separator-string))))))
			(go a))
		       ,@(when ( minim 0)
			   `((t (incf ,count)))))
		     ,@(if chk-dups
			   `((check-dup-caar ,result ,result-list)))
		     (push ,result ,result-list)
		     ,(if (or ( minim 0) (null continue-if))
			  `(and ,continuer (go b))
			  `(go b))
		     a ,@(if ( minim 0)
			     `((if (< ,count ,minim)
				   ,(send *keyword-defselect* :parser-error
					  (format nil
						  "Sequence must be at least ~D element~P long"
						  minim minim)))))
		     (return ,(if (= minim 0)
				  `(or (nreverse ,result-list) t)
				`(nreverse ,result-list)))
		     b )))))

;;;
;;; fun to parse zero or more of a given pattern
;;;
(def-pattern-expander zero-or-more-of (eb options patterns)
  (n-or-more-of 0 eb options patterns nil))

;;;
;;; fun to parse one or more of a given pattern
;;;
(def-pattern-expander one-or-more-of (eb options pattern)
  (n-or-more-of 1 eb options pattern nil))

;;;
;;; the -no-duplications funs just check that no dups have been gotten by n-or-more-of
;;;
(def-pattern-expander zero-or-more-of-no-duplications (eb options pattern)
  (n-or-more-of 0 eb options pattern t))

(def-pattern-expander one-or-more-of-no-duplications (eb options pattern)
  (n-or-more-of 1 eb options pattern t))


;;;
;;; make body into a progn, if (cdr body) is not nil
;;;
(defun progn-ify (body)
  (x-ify 'progn body))

(defun x-ify (op body)
  (if (cdr body)
      `(,op ,@body)
      (car body)))

(defun if-i-fy (test then &optional else)
  (if (or (eq test 't)
	  (and (listp test)
	       (eq (car test) 'quote)
	       (neq (cadr test) nil)))
      then
    (if (or (null test)
	    (and (listp test)
		 (eq (car test) 'quote)
		 (eq (cadr test) nil)))
	else
      `(if ,test ,then ,@(if else `(,else))))))

;;;
;;; parse for a sequence, and then eval lisp body
;;;
(def-pattern-expander then (eb patterns &rest input-lisp)
  (let ((lisp (copylist input-lisp)))
    (cond ((and (null (cdr patterns)) (null lisp))
	   (pattern-expand eb (car patterns)))
	  ((null (cdr patterns))
	   (if-i-fy (pattern-expand eb (car patterns))
		    (progn-ify lisp)))
	  ((null lisp)
	   (pattern-expand-sequence eb patterns))
	  (t (if-i-fy (pattern-expand-sequence eb patterns)
		      (progn-ify lisp))))))

;;;
;;; eval a form, returning t
;;;
(def-pattern-expander eval (eb form &rest patterns)
  `(progn ,form ,(pattern-expand-sequence eb patterns)))

;;;
;;; fun to bind some vars
;;;
(def-pattern-expander with (eb options &rest patterns)
  (let ((bind nil))
    (keyword-extract options i (bind))
    (in-binding bind
		(pattern-expand-sequence eb patterns))))

(def-pattern-expander let (eb let-vars &rest patterns)
  (in-binding let-vars
	      (pattern-expand-sequence eb patterns)))

(def-pattern-expander let* (eb let-vars &rest patterns)
  (let ((expansion (pattern-expand-sequence eb patterns)))
    (if let-vars
	`(let* ,let-vars ,expansion)
      expansion)))

(def-pattern-expander if (eb test then &rest elses)
  `(if ,test
       ,(pattern-expand eb then)
     ,(pattern-expand-sequence eb elses)))

(def-pattern-expander multiple-value (eb vars &rest patterns)
  (let ((expansion (pattern-expand-sequence eb patterns)))
    `(multiple-value ,vars ,expansion)))

(def-pattern-expander multiple-value-bind (eb vars pattern1 &rest patterns)
  (let ((expansion (pattern-expand-sequence eb patterns)))
    `(multiple-value-bind ,vars ,(pattern-expand eb pattern1)
       ,expansion)))

;;;
;;; perform lisp selectq, with results, except for 'otherwise clause, being patterns
;;;
(def-pattern-expander selectq-pattern (eb var &rest clauses)
  (let ((selectq-body
	  (loop for clause in clauses collect
		(let ((selectors (car clause))
		      (patterns (cdr clause)))
		  (if (eq selectors 'otherwise)
		      clause
		    `(,selectors ,(pattern-expand-sequence eb patterns)))))))
    `(selectq ,var ,@selectq-body)))

(def-pattern-expander zip (ignore)
  ''zip)

;;;
;;; parse for an optional set of args
;;;
(def-pattern-expander optional (eb options &rest patterns)
  eb ; ignored
  (pattern-expand
    nil
    `(one-of ,options (then ,patterns) zip)))
    
;;;
;;; make the little buggers indent correctly
;;;
(defindentation (one-or-more-of 1 1))
(defindentation (zero-or-more-of 1 1))
(defindentation (one-or-more-of-no-duplications 1 1))
(defindentation (zero-or-more-of-no-duplications 1 1))
(defindentation (optional 1 1))
(defindentation (then 1 1))
(defindentation (define-keyword-parser 1 1))
(defindentation (eval 1 1))
(defindentation (with 1 1))
(defindentation (one-of 1 1))
(defindentation (selectq-pattern 1 1))

(defun find-pattern-expander (name)
  (let ((pair (assq name *all-pattern-expanders*)))
    (when pair (cadr pair))))

;;;
;;; fun pattern-expand, which expands the parser patterns into lisp code
;;;
(defun pattern-expand (eb pat &aux v)
  (cond ((stringp pat) (send *keyword-defselect* :parse-literal-string eb pat))
	((symbolp pat)
	 (if (eq pat 'zip)
	     (funcall (find-pattern-expander 'zip) eb)
	   (reference-production pat)
	   `(,pat ,eb)))
	((not (listp pat))
	 (key-err "Pattern-expand pat <~A> is not a string, symbol, or list" pat)
	 nil)
	((not (symbolp (car pat)))
	 (key-err "Pattern-expand (car pat) <~A> is not a symbol" (car pat)))
	((eq (car pat) '=)
	 `(setq ,(cadr pat) ,(pattern-expand eb (caddr pat))))
	((setq v (find-pattern-expander (car pat)))
	 (lexpr-funcall v eb (cdr pat)))
	(t
	 (reference-production (car pat))
	 `(,(car pat) ,eb ,@(cdr pat)))))

;;;
;;; define a family of parser functions
;;;
(defmacro define-keyword-parser (parser-name primitive-parser-name defselect)
  `(progn 'compile
	  (defmacro ,parser-name (id vars auxes . body)
	    (let ((*keyword-defselect* ',defselect))
	      (keyword-defparse id vars auxes body)))
	  (defindentation (,parser-name 1 7 3 1))
	  (defmacro ,primitive-parser-name (id vars . body)
	    (let ((*keyword-defselect* ',defselect))
	      (keyword-defparse-primitive id vars body)))
	  (defindentation (,primitive-parser-name 1 7 1))))

;;;
;;; cause compilation of defparses
;;;
(defun keyword-defparse (id vars auxes body)
  (setq *production-name* id)
  (define-production id)
  `(progn 'compile
	  (defun ,id (eb ,@vars ,@(and auxes `(&aux ,@auxes)))
	    eb ;; unused, maybe
	    ,(pattern-expand 'eb `(then ,@body)))))

;;;
;;; get the first keywords used in a dispatch class
;;;
(defun first-keywords (pat)
  (cond ((stringp pat) (list pat))
	((not (listp pat))
	 (key-err "Dispatch production has illegal first token /"~S/"" pat)
	 nil)
	(t
	 (selectq (car pat)
	   (= (first-keywords (caddr pat)))
	   (one-of (do ((list (cddr pat) (cdr list))
			(keys nil (nconc keys (first-keywords (car list)))))
		       ((null list) keys)))
	   (then (first-keywords (caadr pat)))
	   (otherwise (key-err "Crufty first token /"~S/" in dispatch" (car pat)))))))

;;;
;;; macro for creating classes of keyword parsers
;;;
(defmacro defparse-dispatch-class (ident defselect)
  (push ident *dispatch-classes*)
  `(progn 'compile
	  (defmacro ,ident (id vars . body)
	    (let ((name (if (atom id) id (car id)))
		  (parms (if (listp id) (cdr id)))
		  (*keyword-defselect* ',defselect))
	      (setq *production-name* name)
	      (define-production name)
	      `(eval-when (compile eval load)
		 (defprop ,',ident ,(cons name (get ',ident 'dispatch-class-list))
			  dispatch-class-list)
		 (defprop ,',ident
			  ,(let* ((assqlist (get ',ident 'first-keywords))
				  (elt (assq name assqlist))
				  (new-keys (first-keywords (caar body))))
			     (cond (elt
				    (rplacd elt new-keys)
				    assqlist)
				   (t `((,name ,@new-keys) ,@assqlist))))
			  first-keywords)
		 (defun ,name (eb ,@parms ,@(and vars `(&aux ,@vars)))
		   ,(pattern-expand 'eb `(then ,@body))))))))

;;;
;;; define a primitive, which is different from defun only in that it records
;;;   the fun as a defined production
;;;
(defun keyword-defparse-primitive (id vars body)
  (setq *production-name* id)
  (define-production id)
  `(progn 'compile
	  (defun ,id ,vars ,@body)))


;;;; The binary searcher

(defun find-range-midpt (str-arr ahead)
  (let* ((hi (- (array-length str-arr) 1))
	 (numid (// (+ hi 1) 2))
	 lomid
	 himid)
    (cond ((same-next-char-in-range str-arr numid hi ahead)
	   (+ 1 (first-different-lo-slot str-arr numid ahead)))
	  ((same-next-char-in-range str-arr 0 (- numid 1) ahead)
	   (first-different-hi-slot str-arr (- numid 1) ahead))
	  (t
	   (setq himid (do ((i numid (+ i 1))
			    (ch (aref (aref str-arr numid) ahead)))
			   ((> i hi) nil)
			 (unless (eql ch (aref (aref str-arr i) ahead))
			   (return i))))
	   (setq lomid (do ((i numid (- i 1))
			    (ch (aref (aref str-arr numid) ahead)))
			   ((< i 0) nil)
			 (unless (eql ch (aref (aref str-arr i) ahead))
			   (return (+ i 1)))))
;;;	   (format t "~&himid: ~A  lomid: ~A" himid lomid)
	   (cond ((null himid) lomid)
		 ((null lomid) himid)
		 ((< (- numid lomid) (+ 1 (- himid numid)))
		  lomid)
		 (t himid))))))

(defun first-different-lo-slot (str-arr mid ahead)
  (do ((i mid (1- i))
       (ch (aref (aref str-arr mid) ahead)))
      ((< i 0) 0)
    (unless (eql ch (aref (aref str-arr i) ahead))
      (return i))))

(defun first-different-hi-slot (str-arr mid ahead)
  (do ((i mid (1+ i))
       (ch (aref (aref str-arr mid) ahead))
       (hi (array-length str-arr)))
      ((>= i hi) hi)
    (unless (eql ch (aref (aref str-arr i) ahead))
      (return i))))

(defun same-next-char (str-arr ahead)
  (do ((i 0 (+ i 1))
       (ch (aref (aref str-arr 0) ahead))
       (len (array-length str-arr)))
      ((>= i len) t)
    (unless (eql ch (aref (aref str-arr i) ahead))
      (return nil))))

(defun same-next-char-in-range (str-arr lo hi ahead)
  (do ((i lo (+ i 1))
       (ch (aref (aref str-arr lo) ahead)))
      ((> i hi) t)
    (unless (eql ch (aref (aref str-arr i) ahead))
      (return nil))))

(defun same-prod (prod-arr)
  (do ((i 0 (+ i 1))
       (prod (aref prod-arr 0))
       (len (array-length prod-arr)))
      ((>= i len) t)
    (unless (eql prod (aref prod-arr i))
      (return nil))))

(defun len-over-range (str-arr)
  (loop for i from 0 below (array-length str-arr)
	minimize (string-length (aref str-arr i))))

(defun make-sharp-char (num)
  ;; this version for debugging
; `(progn ,(format nil "#/~C" num) ,num)
  ;; this version for production
  num)

(defun split-arrays (str prod midpt)
  (let* ((len (array-length str))
	 (lo-len midpt)
	 (hi-len (- len midpt)))
;   (format t "~&Split-arrays len: ~D lo-len: ~D hi-len: ~D" len lo-len hi-len)
    (if (< midpt 1)
	(ferror nil "~&Split-arrays midpt = ~D" midpt))
    (if (< len 2)
	(ferror nil "~&Split-arrays array-length = ~D" len))
    (let ((str-lo (make-array lo-len))
	  (prod-lo (make-array lo-len))
	  (str-hi (make-array hi-len))
	  (prod-hi (make-array hi-len)))
      (copy-array-portion str 0 lo-len str-lo 0 lo-len)
      (copy-array-portion prod 0 lo-len prod-lo 0 lo-len)
      (copy-array-portion str midpt len str-hi 0 hi-len)
      (copy-array-portion prod midpt len prod-hi 0 hi-len)
      (values str-lo prod-lo str-hi prod-hi))))
      
(defun do-tree-select (str-arr prod-arr ahead testch)
  (cond ((same-prod prod-arr)
	 `(,(aref prod-arr 0) nil))
	((same-next-char str-arr ahead)
	 (if (not testch)
	     `(if (eql ch ,(char-code (aref (aref str-arr 0) ahead)))
		  (let ((ch (char-code ,(send *keyword-defselect* :get-input-char
					      (+ ahead 1)))))
		    ,(do-tree-select str-arr prod-arr (+ ahead 1) nil)))
	     `(let ((ch (char-code ,(send *keyword-defselect* :get-input-char (+ ahead 1)))))
		,(do-tree-select str-arr prod-arr (+ ahead 1) nil))))
	(( ahead (len-over-range str-arr))
	 (ferror t "Key-dispatch keywords identical in length ~D"
		 ahead)
	 nil)
	(t
	 (let ((midpt (find-range-midpt str-arr ahead)))
	   (multiple-value-bind (str-lo prod-lo str-hi prod-hi)
	       (split-arrays str-arr prod-arr midpt)
	     (let* ((char (make-sharp-char (aref (aref str-arr (max 0 (-  midpt 1))) ahead))))
	       `(if ( ch ,(char-code char))
		    ,(do-tree-select str-lo prod-lo ahead t)
		    ,(do-tree-select str-hi prod-hi ahead t))))))))

(defmacro select-dispatch-class (name *keyword-defselect*)
  (let* ((keys (get name 'first-keywords))
	 (keypairs (loop for keylist in keys
			 append (do ((prod (car keylist))
				    (keys (cdr keylist) (cdr keys))
				    (pairs nil (cons (list (car keys) prod)
						     pairs)))
				   ((null keys) (nreverse pairs)))))
	 (sorted-pairs (sortcar keypairs #'string-lessp))
	 (num-keys (length sorted-pairs))
	 (prod-arr (make-array num-keys))
	 (str-arr (make-array num-keys)))
    (do ((i 0 (+ i 1))
	 (pairs sorted-pairs (cdr pairs)))
	((null pairs))
      (setf (aref prod-arr i) (cadar pairs))
      (setf (aref str-arr i) (caar pairs)))
    `(progn 'compile
	    (defun ,(intern (string-upcase (string-append name "-dispatcher"))) ()
	      (let ((ch (char-code ,(send *keyword-defselect* :get-input-char 0))))
		,(do-tree-select str-arr prod-arr 0 nil))))))



;;;; a macro-expander for parser macros

;(zwei:defcom zwei:com-macro-expand-ada-parser-expression
;	"Macro-expands the keyword parser expression following Point.
;Reads the expression following point, and expand the form itself but not
;any of the subforms within it.  Types out the result on the typeout window.
;With a numeric argument, also does macro expand of expression.
;after the expression." ()
;  (let ((stream (zwei:rest-of-interval-stream (zwei:point)))
;	(*keyword-defselect* 'ada-parser))
;    (zwei:move-point-on-read-error (stream)
;      (grind-top-level (let ((expanded (pattern-expand 'eb (read stream))))
;			 (if zwei:*numeric-arg-p*
;			     (si:mexp-expand-form expanded nil :all-levels t)
;			     expanded))
;		       nil
;		       standard-output)))
;  zwei:dis-none)

