;;; -*- Mode:LISP; Package:CTS; Lowercase: T; Base:10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;; Created 2/03/82 05:48:21 by STRYKER

;;; This is the file of definitions which support the Compiler Tools Runtime system.

(defmacro m-.-able-definitions (defining-function-spec defining-type &body definitions)
  `(local-declare ((sys:function-parent ,defining-function-spec ,defining-type))
     (record-source-file-name ',defining-function-spec ',defining-type)
     ,@definitions))
;
;cts:
;(defmacro package-declare-with-no-superiors (name &body defpackage-options)
;  `(m-.-able-definitions ,name package-declare-with-no-superiors
;     (defpackage ,name (:use) ,@defpackage-options)
;     (let ((pkg (pkg-find-package ',name)))
;       (push pkg si:*reasonable-packages*))))
;

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;;        The defsetf's below are used by both FORTRAN and Ada.  They are needed to
;;; compile the FORTRAN Runtime System.
;;;
0#+3600
(lt:defsetf sys:ftn-ar-1 (index) (value)
  `(sys:ftn-as-1 ,value ,index))

#+3600
(lt:defsetf sys:ftn-double-ar-1 (index) (value1 value2)
  `(sys:ftn-double-as-1 ,value1 ,value2 ,index))

(defvar *debug-data* nil)			; the debug data structure for a routine

(defvar *curr-fun* nil)				; the compilation descriptor

(defflavor undefined-value
	(string fonted-string)
	()
  (:initable-instance-variables string))

(defmethod (:init undefined-value :after) (&rest ignore)
  (setq fonted-string
	(with-output-to-string (s)
	  (si:with-character-style ('(nil :italic nil) s)
	    (send s :string-out string)))))

(defmethod (:print-self undefined-value) (stream &rest ignore)
  (send stream :string-out string))

(defmethod (:print-fonted undefined-value) (stream)
  (send stream :string-out fonted-string))

(defmethod (:fasd-form undefined-value) ()
  `(make-instance 'undefined-value :string ,string))

(defconst *undefined-string*
	  (make-instance 'undefined-value :string "Undefined"))

(defmacro defindentation (form)
  `(define-indentation ',form))
  
(defun define-indentation (form)
  (si:defmacro-set-indentation-for-zwei (car form) (cdr form)))



;;; Compare the character and nothing else ....
(defun compare-chars-but-not-styles (ch1 ch2)
  (zerop (dpb 0 si:%%char-style (logxor (char-int ch1) (char-int ch2)))))


;;; Given P:FOO, X:FOO, P:BAR want to be able to type P:FOO  P:FOO, X:FOO  X:FOO,
;;; BAR  P:BAR, P:BAR  P:BAR, FOO  Ask P:FOO or X:FOO...
;;; Help should give you P:FOO, X:FOO, P:BAR.  (Basically this is package-dwim.)
(defun program-pkg-dwim-parser
       (program-list return-type stream initially-display-possibilities type)
  (flet ((package-string (string)
	   (let ((colon (string-search-char #\: string)))
	     (when colon
	       (values
		 (substring string 0 colon)
		 (if (char-equal #\: (aref string (1+ colon)))
		     (1+ colon)
		     colon)))))
	 (relevant-program-names (pkg-name &optional substring)	;(after colon)
	   (loop for program in program-list
		 when (and (or (null pkg-name)
			       (string-equal pkg-name
					     (pkg-name (cl:symbol-package program))))
			   (or (null substring)
			       (cl:string-equal (cl:symbol-name program)
						substring
						:end1 (string-length substring))))
		   collect program)))
    (dw:with-accept-help
	((:subhelp
	   (lambda (stream string-so-far)
	     (multiple-value-bind (pkg-name colon-idx)
		 (package-string string-so-far)
	       (let ((names (relevant-program-names
			      pkg-name
			      (cond (colon-idx 
				     (substring string-so-far (1+ colon-idx)))
				    (t string-so-far)))))
		 (cond ((null names)
			(if (zerop (string-length string-so-far))
			    (format stream "There are no possible completions")
			    (format stream
				    "There are no possible completions of ~A."
				    string-so-far)))
		       (t
			(cond
			  ((zerop (string-length string-so-far))
			   (if (cdr names)	; ( length 1).
			       (format stream "The possible completions are:")
			       (format stream "The only possible completion is:")))
			  (t
			   (if (cdr names)	; ( length 1).
			       (format stream "The possible completions of ~A are:"
				       string-so-far)
			       (format stream "The only possible completion of ~A is:"
				       string-so-far))))
			(scl:format-item-list names
					      :stream stream
					      :presentation-type type))))))))
      (dw:with-accept-activation-chars ('(#\complete #\c-// #\c-?))
	(let* ((start-loc (send stream :read-location))
	       (token (dw:read-standard-token stream))
	       (pkg-name (package-string token)))
	  (send stream :set-location start-loc)
	  (multiple-value-bind (object success string)
	      (dw:complete-from-sequence
		(relevant-program-names pkg-name)
		stream
		:name-key (lambda (thing)
			    (if pkg-name
				(let ((package nil)) (format nil "~S" thing))
				(string thing)))
		:partial-completers `(#\space)
		:type return-type
		:initially-display-possibilities
		initially-display-possibilities)
	    (ignore string success)
	    ;; make sure it's really unique, unless a pkg-name was specified.
	    (cond ((null pkg-name)
		   (setq object
			 (loop for program in program-list
			       when (string-equal (cl:symbol-name object)
						  (cl:symbol-name program))
				 collect program)))
		  (t (setq object (ncons object))))
	    (values object return-type)))))))

1;;; The following is required for hybrid debugger functions

0(defprop dbg:associated-debugger t si:debug-info)

(cl:pushnew 'dbg:associated-debugger
	    flavor::*generic-function-debugging-info-taken-from-method*)
(cl:pushnew 'dbg:associated-debugger si::*inherit-debugging-info*)

1;;; control variable for being in evaluation context mostly used
;;; in C at the present time.
0(defvar *evaluation-context* nil)

1;;; descriptor of the current evaluation context.
0(defvar *program-descriptor* nil)
