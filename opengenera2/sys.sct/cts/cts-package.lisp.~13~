;;; -*- Mode: LISP; Package: ZL-USER; Lowercase: T; Base: 10 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;; Definition of the Context Free Grammar Package

(defpackage compiler-tools-system (:nicknames "CTS") (:prefix-name "CTS")
	    (:export 
	      
	      ;; from cts-runtime-defs
	      *curr-fun*
	      *debug-data*
	      *stack-group*
	      *top-frame*
	      *undefined-string*
	      compare-chars-but-not-styles
	      defindentation
	      m-.-able-definitions
	      undefined-value
	      
	      ;; from cts-defs
	      *lisp-defuns*
	      *language*
	      *null-scope*
	      *global-only-scope*
	      *machine*
	      *size-of-3600-stack-frame*
	      *size-of-machine-fef-constant-area*
	      *local-constant-array-size*
	      *3600-immediate-constant-max*
	      *3600-immediate-constant-min*
	      #+3600
	      *3600-machine*
	      #+IMACH
	      *i-machine*
	      machine-dependent-boolean-to-integer-form
	      *compile-for-run-time-only*
	      basic-compilation-descriptor
	      internal-label-counter
	      internal-var-counter
	      stms
	      vars
	      args
	      lisp-arglist
	      lisp
	      var
	      make-var
	      var-in-memory
	      in-memory
	      fifo-waiting-basic-blocks
	      var-set-but-not-referenced
	      set-but-not-referenced
	      var-referenced-but-not-set
	      referenced-but-not-set
	      var-is-tn
	      var-tn-intrinsic
	      tn-intrinsic
	      var-tn-initially-defined
	      tn-initially-defined
	      var-unallocated-after-pack
	      unallocated-after-pack
	      var-address-ref-count
	      address-ref-count
	      var-value-ref-count
	      value-ref-count
	      var-language-specific
	      basic-cts-variable
	      *language-flavors-to-be-compiled*
	      *src-interval-lo*
	      *src-interval-hi*
	      *preexpand-phase*
	      *language-skipper*
	      *skip-list*
	      *batch-compilation*
	      *compile-whole-file-or-buffer*
	      *compile-from-file*
	      *omit-flow-analysis*
	      *simulated-debugging*
	      *stm*
	      stm-buffers
	      stm-card
	      stm-length
	      stm-ind
	      stm-card-number
	      stm-card-array-size
	      stm-card-array
	      stm-next-card
	      stm-next-card-eof
	      def-language-flavor
	      add-flavor-to-compile-list
	      any-language
	      any-machine
	      pop-tailed-list
	      push-tail
	      visit-exprs-bottom-up
	      sys-err
	      substitute-line-number-list
	      substitute-line-number
	      parser-name
	      op-name
	      ;; Commented out because they are only used in def-parser-clauses
						;rbp
						;lbp
						;nud
						;led
	      left
	      delimiter
	      poper-parser-name
	      poper-op-name
	      poper-rbp
	      poper-lbp
	      poper-nud
	      poper-led
	      poper-delimiter
	      def-pratt-parser
	      def-parser-clauses
	      ;;package-declare-with-no-superiors
	      program-pkg-dwim-parser
	      sourceloc-pc
	      sourceloc-pc-interval
	      sourceloc-line-num
	      pc
	      pc-interval
	      line-num
	      make-sourceloc-value
	      decode-sourceloc-value
	      get-pc-sourceloc-value
	      column
	      card
	      make-position
	      position-column
	      position-card
	      skip-to-on-error
	      def-match-defun
	      *keyword-package*
	      typein-line-more
	      typein-line
	      *phase-tree*
	      *generate-phase-timings*
	      phase-time
	      named-phase-time
	      print-phase-stats
	      create-phase-time
	      make-phase-time
	      phase-time-subphases
	      find-first-bp-of-section
	      
	      ;; from flow-language
	      expr-flags
	      expr-object
	      expr-side-effects
	      has-side-effects
	      primitive-expr-instance-variables
	      primitive-expr
	      expr-type
	      cseheader-or-src-from
	      cseparent-or-src-to-or-dad
	      defn-number-or-instant
	      line-num
	      defn-set
	      is-tn
	      context-name
	      def-flow-gen-representation
	      def-operator-set
	      def-operator
	      def-operator-class
	      def-operator-flavors
	      same-no
	      same-yes
	      same-maybe
	      
	      ;; from cts-rep
	      imp-type-case
	      sequence-operator
	      make-sequence-operator
	      sequence
	      address-of
	      address-of-operator
	      make-address-of-operator
	      fetch-class
	      fetch
	      fetch-operator
	      make-fetch-operator
	      bit-fetch
	      bit-fetch-operator
	      make-bit-fetch-operator
	      deref
	      bit-deref-operator
	      deref-operator
	      make-deref-operator
	      store
	      store-operator
	      make-store-operator
	      let*-operator
	      make-let*-operator
	      prog1-operator
	      make-prog1-operator
	      goto
	      goto-operator
	      make-goto-operator
	      if-goto
	      if-goto-operator
	      make-if-goto-operator
	      case
	      case-operator
	      make-case-operator
	      case-triples
	      label
	      label-operator
	      make-label-operator
	      constant
	      constant-operator
	      make-constant-operator
	      add
	      add-operator
	      make-add-operator
	      mul
	      mul-operator
	      make-mul-operator
	      sub
	      sub-operator
	      make-sub-operator
	      div
	      div-operator
	      make-div-operator
	      mod-operator
	      make-mod-operator
	      rem-operator
	      make-rem-operator
	      exp-operator
	      make-exp-operator
	      shift
	      shift-operator
	      make-shift-operator
	      and-operator
	      make-and-operator
	      or-operator
	      make-or-operator
	      xor
	      xor-operator
	      make-xor-operator
	      sign
	      sign-operator
	      make-sign-operator
	      complex-compare
	      complex-compare-operator
	      make-complex-compare-operator
	      relationals
	      eq-operator
	      make-eq-operator
	      ne
	      ne-operator
	      make-ne-operator
	      le
	      le-operator
	      make-le-operator
	      lt
	      lt-operator
	      make-lt-operator
	      ge
	      ge-operator
	      make-ge-operator
	      gt
	      gt-operator
	      make-gt-operator
	      eqv
	      eqv-operator
	      make-eqv-operator
	      neqv
	      neqv-operator
	      make-neqv-operator
	      compare
	      compare-operator
	      make-compare-operator
	      complex-part
	      complex-part-operator
	      make-complex-part-operator
	      imaginary
	      not-operator
	      make-not-operator
	      neg
	      neg-operator
	      make-neg-operator
	      coerce
	      coerce-operator
	      make-coerce-operator
	      truncate-operator
	      make-truncate-operator
	      nearest-whole
	      nearest-whole-operator
	      make-nearest-whole-operator
	      abs-operator
	      make-abs-operator
	      take-values
	      take-values-operator
	      make-take-values-operator
	      max-operator
	      make-max-operator
	      min-operator
	      make-min-operator
	      concat
	      concat-operator
	      make-concat-operator
	      *throw-operator
	      make-*throw-operator
	      built-in-call
	      built-in-call-operator
	      make-built-in-call-operator
	      send-operator
	      make-send-operator
	      any-function-call
	      call-function-call
	      call-function-call-operator
	      make-call-function-call-operator
	      function-call
	      function-call-operator
	      make-function-call-operator
	      any-funcall
	      call-funcall
	      call-funcall-operator
	      make-call-funcall-operator
	      function-funcall
	      function-funcall-operator
	      make-function-funcall-operator
	      ;;
	      any-funcall-without-display
	      displayless-call-funcall
	      displayless-call-funcall-operator
	      make-displayless-call-funcall-operator
	      displayless-function-funcall
	      displayless-function-funcall-operator
	      make-displayless-function-funcall-operator
	      ;;
	      lisp-argument
	      lisp-argument-operator
	      make-lisp-argument-operator
	      register-fetch
	      register-fetch-operator
	      make-register-fetch-operator
	      values-operator
	      make-values-operator
	      return-operator
	      make-return-operator
	      *fef-constants*
	      *fef-constants-arrays*
	      pil-infix
	      pil-label
	      
	      ;; from flow-defs
	      cse-header
	      basic-block
	      basic-block-first-instant
	      basic-block-last-instant
	      basic-block-defines
	      basic-block-loopdepth
	      basic-block-uses
	      flow-graph
	      flow-graph-blocks
	      kill-object
	      bitvect
	      *life-bits*
	      *life-words*
	      *life-bit-dims*
	      *parent-set*
	      *collect-tn-creates-and-uses*
	      *number-of-expr-definitions*
	      *expr-set-words*
	      *expr-set-bit-dims*
	      *expr-definition-array*
	      *fetch-parent-set*
	      *scope-kill-cache*
	      *pack-registers-claimed*
	      *first-packable-register*
	      var-life
	      flags
	      life-size
	      var-number
	      creations-and-uses
	      profit
	      tn-mixin
	      cond-op
	      cond-comp-op
	      cond-rev-op
	      cond-make-comp-op
	      cond-make-rev-op
	      find-cond-comp-op
	      *call-stack-slots-required*
	      #+IMACH
	      *evacuation-temporaries-required*
	      #+IMACH
	      *argument-list-context-p*
	      
	      ;; from flow-bitops
	      bitvect-contains
	      bitvect-no-overlap
	      bitvect-bitset
	      bitvect-clear
	      bitvect-first-bit-number
	      bit
	      bit-and
	      bit-ior
	      bit-andc2
	      replace
	      
	      ;; from keyword-macros
	      def-pattern-expander
	      pattern-expand
	      pattern-expand-sequence
	      one-of
	      zero-or-more-of
	      one-or-more-of
	      zero-or-more-of-no-duplications
	      one-or-more-of-no-duplications
	      then
	      with
	      selectq-pattern
	      zip
	      optional
	      define-keyword-parser
	      defparse-dispatch-class
	      select-dispatch-class
	      
	      ;; templates -- nothing, since referenced via package zwei
	      
	      ;; flow-code
	      context-determination
	      eligible-cse
	      set-up-for-data-flow
	      basic-block-data-flow
	      global-data-flow
	      common-subexpression-minimum-count
	      cost-determination
	      do-flow-transformations
	      cse-tn-insert
	      
	      ;; flow-graph
	      build-flow-graph
	      simplify-flow-graph
	      process-flow-loops
	      linearize-flow-graph
	      goto-if-necessary
	      
	      ;; tnbind
	      make-life-bits
	      sequence-top-level-exprs
	      determine-all-var-lives
	      combine-tn-lives
	      compute-tn-profit
	      pack-all-tns
	      find-all-uses-and-roadblocks
	      set-parent-and-tn-uses
	      life-lessp
	      
	      ;; cts-utils
	      copy-expr
	      copy-top-level-expr
	      get-start-stm-position
	      get-end-stm-position
	      given-start-get-current
	      get-eos-stm-position
	      get-current-stm-position
	      decode-interval
	      get-tok-interval
	      expr-interval-union
	      union-interval-parts
	      union-interval-parts-with-expr
	      union-interval-with-expr
	      list-expr-union
	      expr-interval
	      interval-union
	      add-current-interval-to-expr
	      add-interval-to-expr
	      current-position-interval
	      copy-expr-interval-to-expr
	      add-positions-to-expr
	      get-tok-interval
	      compiler-internal-label
	      compiler-intern
	      keyword-intern
	      comma-string
	      make-number
	      make-constant
	      constant-p
	      make-case
	      make-if-goto
	      make-goto
	      make-sequence
	      expr-semantic-type
	      expr-implementation-type
	      anybodies-load-file-type-list
	      check-good-constant
	      get-type-size-in-words

	      ;; stackreq
	      unexpected-estimate-stack-requirements-error
	      estimate-any-stack-requirements
	      sum-stack-requirements
	      estimate-stack-requirements-for-store
	      estimate-stack-requirements-for-fetch
	      estimate-stack-requirements-for-deref
	      estimate-stack-requirements
	      sum-argument-list-stack-requirements


	      ;; lisp-expand
	      type-semantic-type
	      type-implementation-type
	      type-size
	      type-name
	      constant-expression-p
	      allocate-and-plug-in-offsets
	      allocate-after-flow
	      reflect-all-constant-allocation
	      reflect-all-var-allocation
	      reference-count-variable-list
	      reference-count-constant
	      reference-count-double-constants
	      reference-count-complex-constants
	      reflect-debug-var-allocation
	      get-constant-value
	      lisp-expand
	      lisp-expand-list
	      *omit-source-locators*
	      add-source-locator
	      lisp-expand-fetch
	      lisp-expand-store
	      lisp-expand-fetch-word
	      needs-temp-copy
	      deref-array-copy-required-p
	      find-deref-array-and-copy
	      fetch-offset-copy-required-p
	      find-fetch-offset-and-copy
	      cts-setx-expansion
	      %spread
	      spreadable-type
	     spread-values
	     find-vars-and-regs
	     spread-values-list
	     boolean
	     lisp-boolean
	     integer
	     real
	     shortreal
	     pointer
	     cts-locf

	     ;; cts-libraries
	     cts-fixr
	     nearest-whole
	     fnearest-whole
	     trunc
	     ftrunc
	     double-trunc
	     double-trunc-components
	     sign-of-second-times-abs-first
	     complex-real-part
	     complex-imag-part
	     neg-complex
	     complex-expt-integer
	     complex-expt

	     ;; runtime routines from ada
	     allocate-data-stack
	     large-make-stack-array
	     small-make-stack-array
	     heap-allocate-ada-object
	     ))

(defsystem compiler-tools-package
    (:default-pathname "sys: cts;"
     :patch-atom "CTS-PACKAGE"
     :maintaining-sites :scrc
     :advertised-in ()
     :distribute-sources t
     :distribute-binaries t
     :patchable t)
  (:module package-dummy "sys: cts; package-dummy"
	   (:type :lisp-read-only)))
