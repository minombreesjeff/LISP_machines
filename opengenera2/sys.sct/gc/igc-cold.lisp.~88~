;;; -*- Syntax: Zetalisp; Mode: Lisp; Base: 10; Package: System-internals -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;					+---------------------------------------+
;;					|       SATISFACTION GUARANTEED		|
;;;					|     OR DOUBLE YOUR GARBAGE BACK	|
;;;; Symbolics Garbage Collector	|		       			|
;;;;					|  	   Cape Cod Refuse Co.		|
;;;;					|	Wellfleet, Massachusetts	|
;;;; Remodularized March 1987 by DLA	|					|
;;;					|	    Inventors of the		|
;;					|	Copying Garbage Collector	|
;					+---------------------------------------+


;;; This file contains the I-machine-dependent part of the Garbage Collector
;;; which must be in the cold load.


;;; Block Transport

(defvar-safeguarded *block-transport* nil)
(defvar-safeguarded *block-address* nil)
(defvar-safeguarded *block-length* nil)
(defvar-safeguarded *copyspace-disabled-region* nil)
(defvar-safeguarded *copyspace-disabled-address* nil)

#+VLM
(defun adjust-copyspace-transport-enables (region address)
  "Disable transport faults on the addresses you just consed (so you can
  touch them).  Remember this, and re-enable them when you switch to a
  new region or are done."
  (declare (safeguarded-function))
  (if (eq *copyspace-disabled-region* region)
      ;; just extending a region: turn off faults (and on transport)
      (when region
	;; --- could optimize by remembering last disabled address and
	;; comparing
	(let* ((address (chunk-base-address address))
	       (origin (region-origin region))
	       (end-address (round-to-chunk
			      (storage::address-plus origin (region-free-pointer region)))))
	  ;; Turn off faults
	  (storage::vm-enable address
			      (%pointer-difference end-address address)
			      nil)))
    ;; switching regions:  do the mambo
    (progn
      (when *copyspace-disabled-region*
	(let* ((region *copyspace-disabled-region*)
	       (origin (region-origin region))
	       (address (chunk-base-address
			  *copyspace-disabled-address*))
	       (end-address (round-to-chunk
			      (storage::address-plus origin (region-free-pointer region))))
	       (block-address (chunk-base-address *block-address*))
	       (block-end-address (round-to-chunk (storage::address-plus *block-address*
									 *block-length*))))
	  (if (and *block-transport*
		   ;; intersection:  not all before or all after
		   (not (or (%pointer- block-end-address address)
			    (%pointer- end-address block-address))))
	      ;; Turn on faults, except in area being transported
	      (progn
		(cl:assert (= block-end-address
			      (storage::address-plus *block-address* *block-length*))
			   ()
			   "Incomplete scavenge of copyspace page")
		(when (%pointer-lessp address block-address)
		  (storage::vm-enable address
				      (%pointer-difference block-address address)
				      t))
		(when (%pointer-lessp block-end-address end-address)
		  (storage::vm-enable block-end-address
				      (%pointer-difference end-address block-end-address)
				      t)))
	      ;; Turn on faults
	      (storage::vm-enable address
				  (%pointer-difference end-address address)
				  t))))
      (when region
	(let* ((address (chunk-base-address address))
	       (origin (region-origin region))
	       (end-address (round-to-chunk
			      (storage::address-plus origin (region-free-pointer region)))))
	  ;; Turn off faults
	  (storage::vm-enable address
			      (%pointer-difference end-address address)
			      nil)))
      (setq *copyspace-disabled-region* region)
      ;; debug: don't clear address
      (when region
	(setq *copyspace-disabled-address* address)))))

;; Debugging
(defvar-safeguarded *verify-block-transport* nil) 

;; This is called by various parts of the system in order to ensure that 
;; a page has no oldspace pointers.  Until GC is loaded, there won't be any,
;; but this function has to be around nevertheless.
;; TRANSPORT-ENTIRE-BLOCK means to not return after the first transport trap,
;; and to continue transporting the entire block.
(DEFUN %BLOCK-TRANSPORT (ADDRESS LENGTH &OPTIONAL TRANSPORT-ENTIRE-BLOCK
			 #+VLM (base-mode 0)
			 &AUX #-VLM (COUNT LENGTH) #-VLM UNROLLED-COUNT)
  (DECLARE (SAFEGUARDED-FUNCTION))
  #+VLM (declare (ignore transport-entire-block))
  #+VLM
  (progn
    ;; We can be asked to do no work on an empty stack, for instance.
    ;; Don't waste a lot of time on that (and don't trigger assertions:
    ;; the page behind an empty stack may not exist!)
    (compiler:%error-unless (plusp length)
      (return-from %block-transport address))
    (let ((old-block-transport *block-transport*)
	  (old-block-address *block-address*)
	  (old-block-length *block-length*)
	  (old-copyspace-disabled-region *copyspace-disabled-region*)
	  (old-copyspace-disabled-address *copyspace-disabled-address*)
	  (block-address (%pointer address)))
      (compiler:%error-unless
	(or ( (ldb %%cr.trap-mode (cli::%saved-control-register)) trap-mode-extra-stack)
	    sys:inhibit-scheduling-flag)
	(wired-ferror :proceedable-halt
		      "Block transport called inappropriately")
	(%set-min-trap-mode trap-mode-extra-stack))
      (compiler:%error-unless (null old-block-transport)
	(wired-ferror :proceedable-halt
		      "Recursive block-transport"))
      (compiler:%error-unless (storage::vm-lookup (storage::extract-vpn block-address))
	(wired-ferror :proceedable-halt
		      "Block transport on Non-existent memory?")
	(return-from %block-transport (%pointer-plus address length)))
      (setq *block-transport* t
	    *block-address* block-address
	    *block-length* length)
      (unwind-protect-case ()
	  (prog1
	    (loop with bar-1 = block-address
		  with end = (%pointer-plus address length)
		  do
	      (if (not (setq bar-1 (storage::vm-scan bar-1 (%pointer-difference end bar-1))))
		  (return end)
		  ;; VLM always transports entire page.  We know we always have to
		  ;; do the full job, so we let transport-trap handle snap-outs
		  ;; and recurse (also, rescanning a snap-out in the stack will
		  ;; give false hits, so we don't)
		  (progn
		    (transport-trap bar-1 (dpbs 1 %%transport-snap-out
						1 %%transport-ignore-false-oldspace
						base-mode))
		    (setf bar-1 (%pointer-plus bar-1 1)))))
	    (compiler:%error-when *verify-block-transport*
	      (let ((old (storage::vm-scan (chunk-base-address block-address)
					   %address-space-chunk-size
					   t)))
		(unless (or (null old)
			    (let* ((old (%pointer old))
				   (reg (%region-number block-address))
				   (bits (region-bits reg))
				   (space (ldb %%region-space-type bits))
				   (org (region-origin reg))
				   (fre (region-free-pointer reg)))
			      (if (ldb-test %%space-type-stack space)
				  (>= (- old block-address) length)
				  (>= (- old org) fre))))
		  (wired-ferror :proceedable-halt
				"Oldspace at ~O after block-transport"
				(%pointer old)))))
	    ;; Fixup traps on any unsavenged copyspace, still excluding the
	    ;; region we are currently transporting.  N.B.: this means that we
	    ;; must always scan full pages in copyspace.  If you choose not to
	    ;; do that, you must re-enable any partial copyspace page you scan
	    ;; (and be careful not to mistack a partial stack page for one!)
	    (adjust-copyspace-transport-enables nil nil)
	    ;; Done
	    (setq *block-transport* old-block-transport
		  *block-address* old-block-address
		  *block-length* old-block-length
		  *copyspace-disabled-region* old-copyspace-disabled-region
		  *copyspace-disabled-address* old-copyspace-disabled-address)
	    ;; clear bar1:  it may still point into oldspace, we'd rather
	    ;; not have it saved out to the stack group if/when this process
	    ;; gets preempted (consider calling %gc-scavenge directly)
	    (let ((bogus-pointer
		    (%make-pointer dtp-locative
				   (%logdpbs %boundary-zone %%vma-zone-num -1 %%vma-oblast-num 0))))
	      (setf (%read-internal-register %register-bar-1) bogus-pointer))
	    )
	;; This should not happen
	(:abort (si:%halt)))))
  #-VLM
  ;; This doesn't save BAR 1 or DP Op.  Trap handlers who call us are expected to save it.
  (WITH-SYSTEM-BLOCK-REGISTERS (1)
    (SETF (%BLOCK-REGISTER 1) ADDRESS)
    (SET-ALU-AND-ROTATE-CONTROL :CONDITION %ALU-CONDITION-OP1-OLDSPACEP
				:CONDITION-SENSE %ALU-CONDITION-SENSE-TRUE
				:ENABLE-CONDITION-EXCEPTION 0)
    (BLOCK NIL
      (%BLOCK-READ-TEST-TAGBODY (SUCCESS)
	OUTER-LOOP
	    (UNLESS (PLUSP COUNT) (GO RETURN))
	    (WHEN (< COUNT 8) (GO SLOW-LOOP))
	    (SETQ UNROLLED-COUNT (LDB (BYTE 29. 3) COUNT))
	FAST-LOOP
	    (PROGN . #.(LOOP REPEAT 8 COLLECT '(%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-RAW)))
	    ;; Sigh.  No LOOP-DECREMENT-TOS here, since TOS is used.
	    (WHEN (PLUSP (DECF UNROLLED-COUNT)) (GO FAST-LOOP))
	    (WHEN (ZEROP (SETQ COUNT (LDB (BYTE 3 0) COUNT))) (GO RETURN))
	SLOW-LOOP
	    (%BLOCK-READ-TEST 1 :CYCLE-TYPE %MEMORY-RAW)
	    (WHEN (PLUSP (DECF COUNT)) (GO SLOW-LOOP))
	RETURN
	    (RETURN (%SET-TAG (%BLOCK-REGISTER 1) (%TAG ADDRESS)))
	SUCCESS
	    ;; Found an oldspace pointer.  If it is a snap-out transport trap,
	    ;; handle it unconditionally here and continue.
	    ;; We have to save ALUF early, since it's bashed by BIT-MEMBER, below.
	    (LET ((ALUF (%READ-INTERNAL-REGISTER %REGISTER-ALU-AND-ROTATE-CONTROL))
		  (BAR-1 (%BLOCK-REGISTER 1)))
	      (IF (TRANSPORT-SNAP-OUT (%BLOCK-REGISTER 1)
				      (%BLOCK-READ 1 :CYCLE-TYPE %MEMORY-RAW
						     :SET-CDR-NEXT NIL
						     :NO-INCREMENT T))
		  ;; A snap-out.  Decache the BAR and
		  ;; Re-enter the loop without incrementing it, in case
		  ;; we found a forwarding pointer to oldspace.
		  NIL
		;; Not a snap-out trap.
		;; Don't recursively call %BLOCK-TRANSPORT on false-oldspace pointers.
		(TRANSPORT-TRAP BAR-1 (DPBS 1 %%TRANSPORT-IGNORE-FALSE-OLDSPACE 0))
		;; Increment the BAR, since TRANSPORT-TRAP always does the full job.
		(SETF BAR-1 (%POINTER-PLUS BAR-1 1))
		;; If we evacuate an object, conditionally return.
		(UNLESS TRANSPORT-ENTIRE-BLOCK
		  (SETF (%BLOCK-REGISTER 1) BAR-1)
		  (GO RETURN)))
	      (SETF (%BLOCK-REGISTER 1) BAR-1)
	      (SETF (%READ-INTERNAL-REGISTER %REGISTER-ALU-AND-ROTATE-CONTROL) ALUF))
	    ;; Drop through here to reenter loop.
	    (SETQ COUNT (- LENGTH (%POINTER-DIFFERENCE (%BLOCK-REGISTER 1) ADDRESS)))
	    (GO OUTER-LOOP)))))

;; These GC state variables are wired on Ivory to speed up some paths in
;; %HARDWARE-TRANSPORT-TRAP

;; T if all pointers to oldspace have been scavenged out.
(DEFVAR-WIRED %GC-FLIP-READY T)

;; T if all oldspace been reclaimed, NIL if some exists.
(DEFVAR-WIRED GC-RECLAIMED-OLDSPACE T)

;; T if TRANSPORT-TRAP is executing.  Note that TRANSPORT-TRAP may be called
;; outside of %HARDWARE-TRANSPORT-TRAP.  That is the difference between this
;; variable and %TRANSPORT-TRAP-LEVEL.
(DEFVAR-WIRED %TRANSPORT-IN-PROGRESS NIL)

;;; Transport Traps

;;; We won't actually have oldspace until the rest of GC is loaded, but
;;; this has to be here to take false traps on executing functions.

(DEFCONSTANT TRANSPORT-TRAP-STACK-REQUIREMENT 100.)

;; This is reset to 0 by MACHINE-DEPENDENT-LISP-REINITIALIZE-EARLY.
;; It is incremented by recursive hardware 
(DEFVAR-WIRED %TRANSPORT-TRAP-LEVEL 0)

(DEFWIREDVAR *COUNT-SAFEGUARDED-EXECUTION-TRANSPORT-TRAPS* 0)
(DEFWIREDVAR *COUNT-UNSAFEGUARDED-EXECUTION-TRANSPORT-TRAPS* 0)

(DEF-TRAP-HANDLER %HARDWARE-TRANSPORT-TRAP
		  (%TRANSPORT-TRAP-VECTOR TRAP-MODE-EXTRA-STACK)
		  (TRAP-VECTOR-INDEX PC VMA)
  (DECLARE (WIRED-FUNCTION)
	   (SAFEGUARDED-REFERENCE TRANSPORT-TRAP %BLOCK-TRANSPORT TRANSPORT-SNAP-OUT
				  *SCAV-WORK-DONE* STACK-TABLE-EXTANT-INDEX)
	   (IGNORE TRAP-VECTOR-INDEX))		;5106
  (LET ((TRANSPORT-TRAP-LEVEL %TRANSPORT-TRAP-LEVEL))
    ;; Never allow more than two levels of transport trap.
    ;; You can get a recursive transport trap executing safeguarded code, and the
    ;; wired code below will just disable the transport-trap bit for that page and return.
    (COMPILER:%ERROR-WHEN (> TRANSPORT-TRAP-LEVEL 1)
      (WIRED-FERROR :PROCEEDABLE-HALT "Recursive transport-trap"))
    (SETQ %TRANSPORT-TRAP-LEVEL (1+ TRANSPORT-TRAP-LEVEL))
    (SETQ VMA (%POINTER VMA))
    (SAVING-REGISTERS-FOR-TRAP-FOR-EFFECT
      ;; Decache the BAR-points-to-stack-cache bits in BARs 2 and 3, since Ivory can't
      ;; handle changing the stack cache out from under a block read.
      (SETF (%BLOCK-REGISTER 2) (%BLOCK-REGISTER 2))
      (SETF (%BLOCK-REGISTER 3) (%BLOCK-REGISTER 3))
      (IF (ZEROP (%POINTER-DIFFERENCE PC VMA))
	  ;; This transport-trap was caused by executing a function whose
	  ;; PHT.TRANSPORT-TRAP bit was set.  Scavenge the page, unless it's
	  ;; a safeguarded function.  In that case, we rely on other software
	  ;; to ensure that scavenging gets done.
	  (PROGN
	    (IF (AND (= (LDB %%VMA-ZONE-NUM VMA) %SAFEGUARDED-ZONE)
		     ;;--- This knows that SAFEGUARDED-OBJECTS-AREA
		     ;;has one region numbered 2.
		     (EQ (%REGION-NUMBER VMA) 2))
		(PROGN
		  #+VLM
		  ;; VLM scan clears fault in other cases
		  (LET* ((VPN (STORAGE::EXTRACT-VPN VMA))
			 (PHT-INDEX (PHT-LOOKUP VPN)))
		    (STORAGE::VM-WRITE-ATTRIBUTE TRANSPORT-DISABLE PHT-INDEX T))
		  (INCF* *COUNT-SAFEGUARDED-EXECUTION-TRANSPORT-TRAPS*))
		(UNLESS %GC-FLIP-READY
		  ;; we do a lot of work here, let's account for it!
		  (INCF* *SCAV-WORK-DONE*
			 #-VLM PAGE-SIZE
			 #+VLM %ADDRESS-SPACE-CHUNK-SIZE)
		  #-VLM
		  (%BLOCK-TRANSPORT (%LOGDPB 0 %%WORD-WITHIN-PAGE VMA) PAGE-SIZE T)
		  #+VLM
		  (%BLOCK-TRANSPORT (CHUNK-BASE-ADDRESS VMA) %ADDRESS-SPACE-CHUNK-SIZE T))
		(INCF* *COUNT-UNSAFEGUARDED-EXECUTION-TRANSPORT-TRAPS*)
		;;;--- Hack sparse reference table.
		)
	    #-VLM
	    ;; Now clear the transport-trap bit, since the page has no oldspace pointers
	    ;; and we don't want to get another hardware trap.  But if the bit was initially
	    ;; clear, then we shouldn't have gotten this trap in the first place, so issue
	    ;; an error.
	    (COMPILER:%ERROR-UNLESS (CLEAR-VPN-TRANSPORT-TRAP (LDB %%VMA-PAGE-NUM VMA))
	      (WIRED-FERROR :FATAL "Inappropriate I-stage transport trap")))
	  (COMPILER:%ERROR-WHEN (> TRANSPORT-TRAP-LEVEL 0)
	    ;; Never allow any recursive call to TRANSPORT-TRAP via a
	    ;; hardware transport-trap.  TRANSPORT-TRAP can call
	    ;; itself recursively via %BLOCK-TRANSPORT, which is why
	    ;; the test has to be in this path.
	    (WIRED-FERROR :FATAL "Recursive transport-trap"))
	  (IF ( (LDB %%CR.TRAP-MODE (%SAVED-CONTROL-REGISTER)) TRAP-MODE-EXTRA-STACK)
	      #+VLM
	      ;; VLM faults on page, so clear the page and continue (but
	      ;; don't scavenge beyond free-pointer, c.f.,
	      ;; scavenge-page)
	      (IF %GC-FLIP-READY
		  ;; --- temp kludge:  how are faults getting left on?
		  (LET ((PHT-INDEX (PHT-LOOKUP (STORAGE::EXTRACT-VPN VMA))))
		    (STORAGE::VM-WRITE-ATTRIBUTE TRANSPORT-DISABLE PHT-INDEX T))
		  (LET* ((ADDRESS (CHUNK-BASE-ADDRESS VMA))
			 (REGION (%REGION-NUMBER ADDRESS))
			 (BITS (REGION-BITS REGION))
			 (SPACE (LDB %%REGION-SPACE-TYPE BITS))
			 (LIMIT (%32-BIT-PLUS ADDRESS %ADDRESS-SPACE-CHUNK-SIZE))
			 ;; Always scavenge full page, except for stacks
			 (FREE LIMIT))
		    (WHEN (LDB-TEST %%SPACE-TYPE-STACK SPACE)
		      ;; A forwarded stack may get enabled, but
		      ;; never needs scavenging
		      (MULTIPLE-VALUE-BIND (INDEX ORIGIN LENGTH)
			  (STACK-TABLE-EXTANT-INDEX ADDRESS)
			(WHEN INDEX
			  (SETQ FREE (%32-BIT-PLUS ORIGIN LENGTH))))
		      )
		    (WHEN (%POINTER-LESSP FREE LIMIT)
		      ;; Don't look at the part of the page after the free pointer
		      (SETQ LIMIT FREE))
		    (LET ((WORK (%32-BIT-DIFFERENCE LIMIT ADDRESS)))
		      (COMPILER::%ERROR-WHEN (MINUSP WORK)
			(WIRED-FERROR :PROCEEDABLE-HALT 
				      "How could you be asked to do negative work?"))
		      (IF (PLUSP WORK)
			  (PROGN
			    ;; we do a lot of work here, let's account for it!
			    (INCF* *SCAV-WORK-DONE* WORK)
			    (%BLOCK-TRANSPORT
			      ADDRESS WORK T
			      (DPBS 1 %%TRANSPORT-UNEXPECTED-FALSE-OLDSPACE-IS-ERROR 0)))
			  ;; No work, turn off trap
			  (LET ((PHT-INDEX (PHT-LOOKUP (STORAGE::EXTRACT-VPN VMA))))
			    (STORAGE::VM-WRITE-ATTRIBUTE TRANSPORT-DISABLE PHT-INDEX T)))
		      )))
	      #-VLM
	      ;; Check for the snap-out case and do it quickly.  We
	      ;; don't worry about the relatively rare case where a
	      ;; forwarding pointer points to oldspace, since retrying
	      ;; the instruction will trap again quick enough.
	      (UNLESS (TRANSPORT-SNAP-OUT VMA)
		;; Take a real transport-trap, continuing in extra
		;; stack mode.  Disallowing transport-traps in
		;; extra-stack mode would mean that a lot more trap
		;; handlers would have to be safeguarded, most notably
		;; the transitive closure referenced by the allocate
		;; trap handlers.  Also, every function which could
		;; ever run in extra-stack mode would have to be
		;; safeguarded.  That would include every function
		;; with an allocation instruction, and the transitive
		;; closure referenced by those functions.  Since this
		;; would be a royal pain, we'll allow transport traps
		;; in extra-stack mode.  Hopefully this won't mask too
		;; many obscure bugs.
		(TRANSPORT-TRAP
		  VMA (DPBS 1 %%TRANSPORT-UNEXPECTED-FALSE-OLDSPACE-IS-ERROR 0)))
	      (WIRED-FERROR :FATAL "TRANSPORT-TRAP while in I//O mode"))))
    (SETQ %TRANSPORT-TRAP-LEVEL TRANSPORT-TRAP-LEVEL))
  ;; This always has to ensure TOS is valid because
  ;;   1) In the first case above any instruction can cause a transport trap, and
  ;;   2) Some instructions which reference memory (such as RGETF) both require
  ;;      TOS valid and can cause transport traps.
  (%RETURN-KLUDGE 0))

;; This is reinitialized to zero by flipping.
;; If a partially-full copyspace page gets its transport-trap bit cleared due to
;; an execution transport trap, this is incremented to inform the transporter that
;; the transport-trap bit may need to be set again.
;; Note-- This scheme breaks down if the page is swapped out, since that sets
;; ------ the transport-trap bit again.  I wonder what to do about this?
;; ------ Anyway, it's only an efficiency problem.
(DEFWIREDVAR %COPYSPACE-TRANSPORT-TRAP-CLEARED 0)

;; Must be called in extra stack mode.
#-VLM
(DEFWIREDFUN CLEAR-VPN-TRANSPORT-TRAP (VPN)
  (DECLARE (VALUES TRANSPORT-TRAP-INITIALLY-SET-P))
  (LET ((PHT-INDEX (PHT-LOOKUP VPN)))
    (UNLESS (OR (NULL PHT-INDEX) ( (STORAGE::PHT-TRANSPORT-TRAP PHT-INDEX) 1))
      (SETF (STORAGE::PHT-TRANSPORT-TRAP PHT-INDEX) 0)
      (STORAGE::%INVALIDATE-MAP-CACHE-FOR-VMA (%LOGDPB VPN %%VMA-PAGE-NUM 0))
      (LET ((REGION (%REGION-NUMBER (%LOGDPB VPN %%VMA-PAGE-NUM 0))))
	(WHEN (AND REGION
		   (= (LDB %%REGION-SPACE-TYPE (REGION-BITS REGION)) %REGION-SPACE-COPY))
	  (LET ((FP (REGION-FREE-POINTER REGION)))
	    (WHEN (NOT (ZEROP (LDB %%WORD-WITHIN-PAGE FP)))
	      (WHEN (= (+ (DPB (REGION-QUANTUM-ORIGIN REGION) %%VPN-QUANTUM-NUM 0)
			  (LDB %%VMA-PAGE-NUM FP))
		       VPN)
		;; This page is the last, partially-full page in a copyspace region.
		;; Set this flag which warns the transporter that this situation exists.
		(INCF* %COPYSPACE-TRANSPORT-TRAP-CLEARED))))))
      T)))

;; Must be called in extra stack mode.
#-VLM
(DEFWIREDFUN SET-VPN-TRANSPORT-TRAP (VPN)
  (LET ((PHT-INDEX (PHT-LOOKUP VPN)))
    (UNLESS (OR (NULL PHT-INDEX) ( (STORAGE::PHT-TRANSPORT-TRAP PHT-INDEX) 0))
      (SETF (STORAGE::PHT-TRANSPORT-TRAP PHT-INDEX) 1)
      (STORAGE::%INVALIDATE-MAP-CACHE-FOR-VMA (%LOGDPB VPN %%VMA-PAGE-NUM 0))
      (DECF* %COPYSPACE-TRANSPORT-TRAP-CLEARED))))

;;; Initialization

;; This mask defines which zones contain both oldspace and non-oldspace.
;; Wired, Ephemeral, and Safeguarded zones should alwayse be off.
(DEFVAR-WIRED *FALSE-OLDSPACE-MASK* 0)

;; This switch is mainly for QA; it causes any zone which is flipped to be
;; considered falsed oldspace.
(DEFVAR-WIRED *FORCE-FALSE-OLDSPACE* NIL)

;; This variable is used to scan the PHT for ephemeral references.
;; It has one bit for each ephemeral group which currently contains oldspace.
(DEFVAR-WIRED *EPHEMERAL-GROUP-OLDSPACE-MASK* 0)

;; This array maps the high 11 bits of an address into OLDSPACEP, is 
;; set up by the flipping and reclaiming oldspace.
;; It variable is initialized by the cold load generator.
;; When false oldspace exists, *OLDSPACE-MAP* may say something is newspace when
;; it is really oldspace.  It will never say the opposite.  It therefore can always
;; be used to prune PHT and ESRT searches.
(DEFVAR-WIRED *OLDSPACE-MAP*)

;;---- This should only be called for flips involving false oldspace.
;;---- Otherwise flip should be based on levels.
;; This sets up the zone&ephemeral oldspace registers, and the above variables.
;; It is called when warm booting, flipping, and reclaiming oldspace.
(DEFUN REINITIALIZE-OLDSPACE-REGISTERS ()
  (DECLARE (WIRED-FUNCTION))
  (LET ((DEMILEVEL-LOW-FLIP-MASK 0)		;      flip the low half of this demilevel
	(DEMILEVEL-LOW-FLOP-MASK 0)		;don't flip the low half of this demilevel
	(DEMILEVEL-HIGH-FLIP-MASK 0)		;      flip the high half of this demilevel
	(DEMILEVEL-HIGH-FLOP-MASK 0)		;don't flip the high half of this demilevel
	(ZONE-FLIP-MASK 0)			;      flip this zone
	(ZONE-FLOP-MASK 0))			;don't flip this zone
    (WITH-FAST-STORAGE-ACCESSORS (REGION-BITS REGION-QUANTUM-ORIGIN REGION-QUANTUM-LENGTH)
      (MACROLET ((SETQ-BIT (VARIABLE BIT)
			   `(SETQ ,VARIABLE (LOGIOR (ROT 1 ,BIT) ,VARIABLE))))
	;; Set all the flip/flop masks.  It may be possible to write this more efficiently.
	(LOOP FOR REGION BELOW (N-REGIONS)
	      AS BITS = (REGION-BITS REGION)
	      UNLESS (= (LDB %%REGION-SPACE-TYPE BITS) %REGION-SPACE-FREE)
		DO (LET ((ORIGIN (REGION-QUANTUM-ORIGIN REGION))
			 (LENGTH (REGION-QUANTUM-LENGTH REGION)))
		     (IF (= (LDB %%REGION-SPACE-TYPE BITS) %REGION-SPACE-OLD)
			 ;; This region is to be flipped.
			 (IF (= (LDB %%QUANTUM-ZONE-NUM ORIGIN) %EPHEMERAL-ZONE)
			     (IF (ZEROP (LDB %%QUANTUM-EPHEMERAL-HALF ORIGIN))
				 (LOOP WHILE (PLUSP LENGTH) DO
				   (SETQ-BIT DEMILEVEL-LOW-FLIP-MASK
					     (LDB %%QUANTUM-DEMILEVEL-NUM ORIGIN))
				   (INCF ORIGIN %DEMILEVEL-SIZE-IN-QUANTA)
				   (DECF LENGTH %DEMILEVEL-SIZE-IN-QUANTA))
				 (LOOP WHILE (PLUSP LENGTH) DO
				   (SETQ-BIT DEMILEVEL-HIGH-FLIP-MASK
					     (LDB %%QUANTUM-DEMILEVEL-NUM ORIGIN))
				   (INCF ORIGIN %DEMILEVEL-SIZE-IN-QUANTA)
				   (DECF LENGTH %DEMILEVEL-SIZE-IN-QUANTA)))
			     (LOOP WHILE (PLUSP LENGTH) DO
			       (SETQ-BIT ZONE-FLIP-MASK (LDB %%QUANTUM-ZONE-NUM ORIGIN))
			       (INCF ORIGIN %ZONE-SIZE-IN-QUANTA)
			       (DECF LENGTH %ZONE-SIZE-IN-QUANTA)))
			 ;; This region is not to be flipped.
			 (IF (= (LDB %%QUANTUM-ZONE-NUM ORIGIN) %EPHEMERAL-ZONE)
			     (IF (ZEROP (LDB %%QUANTUM-EPHEMERAL-HALF ORIGIN))
				 (LOOP WHILE (PLUSP LENGTH) DO
				   (SETQ-BIT DEMILEVEL-LOW-FLOP-MASK
					     (LDB %%QUANTUM-DEMILEVEL-NUM ORIGIN))
				   (INCF ORIGIN %DEMILEVEL-SIZE-IN-QUANTA)
				   (DECF LENGTH %DEMILEVEL-SIZE-IN-QUANTA))
				 (LOOP WHILE (PLUSP LENGTH) DO
				   (SETQ-BIT DEMILEVEL-HIGH-FLOP-MASK
					     (LDB %%QUANTUM-DEMILEVEL-NUM ORIGIN))
				   (INCF ORIGIN %DEMILEVEL-SIZE-IN-QUANTA)
				   (DECF LENGTH %DEMILEVEL-SIZE-IN-QUANTA)))
			     (LOOP WHILE (PLUSP LENGTH) DO
			       (SETQ-BIT ZONE-FLOP-MASK (LDB %%QUANTUM-ZONE-NUM ORIGIN))
			       (INCF ORIGIN %ZONE-SIZE-IN-QUANTA)
			       (DECF LENGTH %ZONE-SIZE-IN-QUANTA))))))

	;; Check for ephemeral demilevel inconsistencies, where the region tables
	;; think that both ephemeral halves are the same.  This is fatal.
	(WHEN (OR (CL:LOGTEST DEMILEVEL-LOW-FLIP-MASK DEMILEVEL-HIGH-FLIP-MASK)
		  (CL:LOGTEST DEMILEVEL-LOW-FLOP-MASK DEMILEVEL-HIGH-FLOP-MASK))
	  (WIRED-FERROR :FATAL
			"An ephemeral demilevel must be half oldspace and half newspace."))

	;; Check for flipping illegal zones.
	(WHEN (CL:LOGTEST %ILLEGAL-ZONE-FLIP-MASK ZONE-FLIP-MASK)
	  (WIRED-FERROR :FATAL "Attempt to flip an illegal zone."))

	;; Set the hardware registers.
	(SETF (%READ-INTERNAL-REGISTER %REGISTER-ZONE-OLDSPACE-REGISTER) ZONE-FLIP-MASK)
	(SETF (%READ-INTERNAL-REGISTER %REGISTER-EPHEMERAL-OLDSPACE-REGISTER)
	      (LOGIOR DEMILEVEL-LOW-FLOP-MASK DEMILEVEL-HIGH-FLIP-MASK))

	;; Set the false oldspace mask.
	(SETQ *FALSE-OLDSPACE-MASK*
	      (IF *FORCE-FALSE-OLDSPACE*
		  ZONE-FLIP-MASK
		  (LOGAND ZONE-FLIP-MASK ZONE-FLOP-MASK)))

	;; Set the ephemeral group mask.  It should have a bit on for each
	;; ephemeral group which really contains some oldspace.
	;; This is the fastest way I can think of to compute it.
	(LET ((DEMILEVEL-MASK (LOGIOR DEMILEVEL-HIGH-FLIP-MASK DEMILEVEL-LOW-FLIP-MASK)))
	  (SETQ *EPHEMERAL-GROUP-OLDSPACE-MASK*
		(DPBS (LDB %%FIXNUM-SIGN (- (LDB (BYTE 8 24) DEMILEVEL-MASK))) (BYTE 1 3)
		      (LDB %%FIXNUM-SIGN (- (LDB (BYTE 8 16) DEMILEVEL-MASK))) (BYTE 1 2)
		      (LDB %%FIXNUM-SIGN (- (LDB (BYTE 8  8) DEMILEVEL-MASK))) (BYTE 1 1)
		      (LDB %%FIXNUM-SIGN (- (LDB (BYTE 8  0) DEMILEVEL-MASK))))))

	(REINITIALIZE-OLDSPACE-MAP)))))

(DEFWIREDFUN REINITIALIZE-OLDSPACE-MAP ()
  (WITH-SYSTEM-BLOCK-REGISTERS (1)
    (SETF (%BLOCK-REGISTER 1) (%POINTER-PLUS *OLDSPACE-MAP* 1))
    ;; Set up the oldspace map so that false oldspace is always recorded as newspace.
    (LET ((R (LOGAND (%READ-INTERNAL-REGISTER %REGISTER-ZONE-OLDSPACE-REGISTER)
		     (LOGNOT *FALSE-OLDSPACE-MASK*))))
      (PREPARE-FOR-BLOCK-WRITE)
      ;; Set ephemeral zones according to the ephemeral oldspace register,
      ;; unless overwritten by the zone oldspace register.
      (IF (NOT (CL:LOGTEST R 1))
	  (PROGN (%BLOCK-WRITE 1 (LOGNOT (%READ-INTERNAL-REGISTER
					   %REGISTER-EPHEMERAL-OLDSPACE-REGISTER)))
		 (%BLOCK-WRITE 1 (%READ-INTERNAL-REGISTER
				   %REGISTER-EPHEMERAL-OLDSPACE-REGISTER)))
	  (PROGN (%BLOCK-WRITE 1 -1)
		 (%BLOCK-WRITE 1 -1)))
      ;; Set up the other zones.
      (DOTIMES (IGNORE 31.)
	(SETQ R (LDB (BYTE 31 1) R))
	(LET ((N (- (LDB (BYTE 1 0) R))))
	  (%BLOCK-WRITE 1 N)
	  (%BLOCK-WRITE 1 N))))))
