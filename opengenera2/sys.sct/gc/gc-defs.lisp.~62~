;;; -*- Mode: Lisp; Base: 8; Package: System-Internals -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;					+---------------------------------------+
;;					|       SATISFACTION GUARANTEED		|
;;;					|     OR DOUBLE YOUR GARBAGE BACK	|
;;;; Symbolics Garbage Collector	|		       			|
;;;;					|  	   Cape Cod Refuse Co.		|
;;;;					|	Wellfleet, Massachusetts	|
;;;; Remodularized March 1987 by DLA	|					|
;;;					|	    Inventors of the		|
;;					|	Copying Garbage Collector	|
;					+---------------------------------------+


;;; This file contains definitions for machine-dependent garbage collector variables.
;;; All other files in the Garbage Collector subsystem depend on this file.


;;; Variables for the user to set

(DEFVAR GC-REPORT-STREAM T)
	;Where junk output from the garbage collector goes:
	;NIL - discard
	;stream - send there
	;T - notify (this is the default)

(DEFVAR GC-WARNINGS-ENABLE T)		;If non-NIL, warnings (such as that you need to turn
					;on the GC soon) are sent to GC-REPORT-STREAM

(DEFVAR GC-REPORTS-ENABLE T)		;If non-NIL, reports on the activity of the
					;dynamic GC are sent to GC-REPORT-STREAM

(DEFVAR GC-EPHEMERAL-REPORTS-ENABLE NIL);If non-NIL, reports on the activity of the
					;ephemeral GC are sent to GC-REPORT-STREAM

(DEFVAR GC-AREA-RECLAIM-REPORT NIL)	;Set this to T to report space reclaimed by area
					;This is fairly verbose, so it's not on by default

(DEFVAR GC-WARNING-INTERVAL NIL)	;Interval in 60ths between repetitions of
					;the same GC warning (i.e. boring report).
					;This only applies to reporting via notifications.
					;NIL means never repeat any warning.

(DEFVAR GC-FLIP-RATIO 1)		;If the product of this number and
					;committed free space is greater
					;then the amount of free space,
					;then a flip will take place, if GC-ON
					;has been done.
					;This is something like the maximum fraction
					;of dynamic space that you expect to contain
					;good data, as opposed to garbage.
					;It is *not* exactly that.

(DEFVAR GC-FLIP-MINIMUM-RATIO NIL)	;If not NIL, this is used instead of GC-FLIP-RATIO
					;to decide when to turn the gc off because memory is
					;full.  This can be smaller (it can't be larger).

(DEFVAR GC-RECLAIM-IMMEDIATELY NIL)	;If non-NIL, then as soon as a flip
					;takes place, a GC-RECLAIM-OLDSPACE
					;occurs.  This essentially flushes
					;the "Await Scavenge" state of the
					;garbage collector, and removes the
					;real-time aspect, making it more
					;like a copying garbage collector.

(DEFVAR GC-RECLAIM-EPHEMERAL-IMMEDIATELY NIL)
					;Same, for ephemeral GC

(DEFVAR GC-RECLAIM-IMMEDIATELY-IF-NECESSARY NIL)
					;If non-NIL, the GC will go into non-incremental
					;mode rather than turning itself off, if memory
					;gets full, until it thinks even non-incremental
					;mode will fail; then it will turn itself off.

(DEFVAR GC-DELTA 1000000)		;Flip when this close to running out

(DEFVAR GC-WARNING-THRESHOLD 1000000.)	;Start warning that GC needs to be turned on when
					;this close to running out of space

(DEFVAR GC-WARNING-EPHEMERAL-THRESHOLD 200000.)	;Same when ephemeral GC is already on for
						;warning that dynamic GC needs to be on, too.

(DEFVAR GC-WARNING-RATIO 0.75)		;Warnings that you need to turn the GC on
					;are repeated when the amount of space available
					;is this fraction of what it was last time

(DEFVAR GC-FLIP-INHIBIT-TIME-UNTIL-WARNING (* 60. 30.))	;When trying to flip, wait this
						;long before warning user that we're having
						;trouble flipping because someone is inside
						;an SI:INHIBIT-GC-FLIPS special form

(DEFVAR GC-FLIP-INHIBIT-WAIT-INTERVAL (* 60. 5))
					;Wait 5 seconds for other processes to join in
					;and wait for the flip.  If no more processes wait
					;in this time, and gc-flip-inhibit is still set,
					;assume that activity is not going to die down

(DEFVAR GC-FLIP-INHIBIT-WAIT-TIME)	;Time to wait until

(DEFVAR GC-PROCESS-FOREGROUND-PRIORITY 5)	;Priority while waiting to flip

(DEFVAR GC-PROCESS-IMMEDIATE-RECLAIM-PRIORITY 5)	;Priority for gc-reclaim-immediately

(DEFVAR GC-PROCESS-BACKGROUND-PRIORITY 0)	;Priority while reclaiming oldspace

(DEFVAR GC-DAEMON-PRIORITY 5)		;Priority of GC-daemon processes

;These four variables can be set to NIL to turn off the prefetch stuff
(DEFCONST SCAVENGE-COPYSPACE-PREFETCH 9)	;---arbitrary number, but should be enough
						; to hold all of SCAVENGE-MAX-LOOKAHEAD. 
(DEFCONST SCAVENGE-OLDSPACE-PREFETCH 5)		;---even more arbitrary number
(DEFCONST SCAVENGE-MAX-LOOKAHEAD 2048.)		;Number of words to scan for oldspace prefetch
(DEFCONST SCAVENGE-ESRT-PREFETCH 15.)		;Number of pages to prefetch when scanning
						; ESRT, after the 1 page always fetched

;These two variables control how much the scavenger do in a single "whack".
;After doing this much work or taking this much time the scavenger
;will enable interrupts for a moment before preceding; at that time any
;deferred preempt will go off.
(DEFCONST SCAVENGE-WORK-PER-WHACK (* 4 PAGE-SIZE))
(DEFCONST SCAVENGE-MICROSECONDS-PER-WHACK 50000.)

(DEFCONST SCAVENGE-POSTPURGE-ENABLE NIL)	;T to enable flushing of scavenged pages

(DEFVAR SCAVENGE-REGION-SWITCH-DELAY 200)	;Scavenge this many words before
						;considering switching to another region.
						;Balances overhead and locality.

;;; Other variables

(DEFVAR GC-PROCESS)		;Process that runs the flipper

(DEFVAR *GC-PROCESS-WAKEUP* NIL)	;Forced wakeup mechanism

;; These are lists of forms which are evaluated after reclaiming oldspace
;; and before flipping newspace into oldspace.
(DEFVAR GC-EVERY-FLIP-LIST NIL)	;Forms to evaluate on every flip
(DEFVAR GC-NEXT-FLIP-LIST NIL)	;Forms to evaluate just on the next flip
(DEFVAR GC-SECOND-NEXT-FLIP-LIST NIL)	;Forms to evaluate just on the flip after that
(DEFVAR GC-AFTER-FLIP-LIST NIL)	;Forms to evaluate after flipping

(DEFVAR GC-EVERY-RECLAIM-OLDSPACE-LIST NIL)	;Forms to evaluate every reclaim oldspace.
(DEFVAR GC-NEXT-RECLAIM-OLDSPACE-LIST NIL)	;Forms to evaluate just the next time.

(DEFVAR-SAFEGUARDED %GC-GENERATION-NUMBER)	;Setup by LDATA.  Increments on each flip.

(DEFVAR-SAFEGUARDED %GC-DYNAMIC-GENERATION-NUMBER)	;Increments only on dynamic (not ephemeral) flips.

(DEFVAR-SAFEGUARDED %GC-STATIC-GENERATION-NUMBER)	;Increments when a static region is flipped

#+IGNORE
(DEFVAR-SAFEGUARDED *STATIC-GC-FLAG* NIL)	;T if next dynamic GC will hit a static region

(DEFVAR GC-ON NIL)	;Keyword/value pairs of various ON aspects of
			;the GC.  value should always be T.  (NIL may
			;break something).  This is sometimes a constant
			;LIST that you should not bash.
			;non-NIL if GC-process is enabled

;; GC State variables

;; Value that (GC-PAGE-CONS-ALARM) must be greater than in order to do a
;; flip.  Set by the GC process.  If %GC-FLIP-READY is off, this is
;; ignored.
(DEFVAR-SAFEGUARDED GC-PAGE-CONS-ALARM-MARK CL:MOST-NEGATIVE-FIXNUM)

;; T if all pointers to oldspace have been scavenged out.
#+3600	;In IGC-COLD on IMach
(DEFVAR-SAFEGUARDED %GC-FLIP-READY T)

;; T if all oldspace been reclaimed, NIL if some exists.
#+3600	;In IGC-COLD on IMach
(DEFVAR-SAFEGUARDED GC-RECLAIMED-OLDSPACE T)

;; This is true if ephemeral oldspace exists and the scavenger is operating in ephemeral mode.
(DEFVAR-SAFEGUARDED *EPHEMERAL-GC-IN-PROGRESS* NIL)

;; This is an internal variable used by GC-RECLAIM-OLDSPACE only.
(DEFVAR GC-RECLAIM-OLDSPACE-REPORTED NIL)

;; This is true when we're breaking weak links from weakspace.
;; It should probably be a scavenger state instead.
(DEFVAR-SAFEGUARDED *TRANSPORTER-BREAK-WEAK-LINKS* NIL)

(DEFVAR LAST-GC-WARNING-WORDS NIL)	;Number of words available at last gc-on warning
(DEFVAR LAST-GC-IMMEDIATELY-WARNING-WORDS NIL)	;Same for last gc-immediately warning
(DEFVAR LAST-GC-TOO-LATE-WARNING-WORDS NIL)	;Same for last warning that you've lost

(DEFVAR LAST-GC-WARNING-TIME-ALIST NIL)	;Alist of format-strings and times last warned

(DEFVAR GC-IMMEDIATELY-IN-PROGRESS NIL)	;To smarten up notifications and status

#-3600
;; On the 3600, this is in A memory (SYS: L-SYS; SYSDF1).
;; If positive, wait to flip.  See INHIBIT-GC-FLIPS.
(DEFVAR GC-FLIP-INHIBIT 0)

;; If positive, wait to reclaim oldspace.  See INHIBIT-OLDSPACE-RECLAMATION.
(DECLARE-STORAGE-CATEGORY :VARIABLE GC-RECLAIM-OLDSPACE-INHIBIT :SAFEGUARDED)
(DEFVAR-RESETTABLE GC-RECLAIM-OLDSPACE-INHIBIT 0)

;; non-NIL if GC is waiting for GC-FLIP-INHIBIT to clear
(DEFVAR-RESETTABLE GC-FLIP-WAITING NIL)

;; T if inside body of INHIBIT-GC-FLIPS.
(DEFVAR-RESETTABLE NESTED-INHIBIT-GC-FLIPS-FLAG NIL)

;; Ephemeral migration

;; Ephemeral level migration control
(DECLARE-STORAGE-CATEGORY :VARIABLE *EPHEMERAL-MIGRATION-MODE* :SAFEGUARDED)
(DEFVAR-RESETTABLE *EPHEMERAL-MIGRATION-MODE* :NORMAL :NORMAL
		   ":NORMAL, :KEEP, :COLLECT, :EXTRA or :DYNAMIC")

(DEFVAR-RESETTABLE *EPHEMERAL-MIGRATION-MODE-PROCESS* NIL)
(DEFVAR-RESETTABLE *EPHEMERAL-MIGRATION-MODE-QUEUE* NIL)

(DEFMACRO WITH-EPHEMERAL-MIGRATION-MODE (MODE &BODY BODY)
  "Mode may be :NORMAL, :KEEP, :COLLECT, :EXTRA or :DYNAMIC"
  (LET ((VAR (GENSYM)))
    `(LET (,VAR)
       (UNWIND-PROTECT
	   (PROGN (ENTER-EPHEMERAL-MIGRATION-MODE ,MODE (LOCF ,VAR))
		  . ,BODY)
	 (WHEN ,VAR
	   (EXIT-EPHEMERAL-MIGRATION-MODE))))))

;; WITH-EPHEMERAL-MIGRATION-MODE can't work with competing processes, but we can at least
;; ensure that the global state doesn't become corrupted when two processes compete.
;; What we do is allow the first process which enters WITH-EPHEMERAL-MIGRATION-MODE to
;; control the mode until he exits, and then a competing process is chosen on a 
;; first-come, first-served basis to take control.

(DEFUN ENTER-EPHEMERAL-MIGRATION-MODE (MODE &OPTIONAL LOC)
  (CHECK-ARG MODE (MEMQ MODE '(:NORMAL :KEEP :COLLECT :EXTRA :DYNAMIC))
	     ":NORMAL, :KEEP, :COLLECT, :EXTRA or :DYNAMIC")
  (WITHOUT-ABORTS ("Updating ephemeral migration mode")
    (LET* ((PROCESS CURRENT-PROCESS)
	   (HAVE-LOCK (OR (STORE-CONDITIONAL (LOCF *EPHEMERAL-MIGRATION-MODE-PROCESS*)
					     NIL PROCESS)
			  (EQ *EPHEMERAL-MIGRATION-MODE-PROCESS* PROCESS)))
	   (BIND-VALUE (IF HAVE-LOCK *EPHEMERAL-MIGRATION-MODE* MODE))
	   (ELEM (CL:ASSOC PROCESS *EPHEMERAL-MIGRATION-MODE-QUEUE*)))
      ;; Remember our bindings.
      (IF ELEM
	  (PUSH BIND-VALUE (CDR ELEM))
	  (PUSH (CONS PROCESS (LIST BIND-VALUE)) *EPHEMERAL-MIGRATION-MODE-QUEUE*))
      ;; Set the current value if we're allowed to.
      (WHEN HAVE-LOCK
	(SETQ *EPHEMERAL-MIGRATION-MODE* MODE))
      (WHEN LOC (SETF (LOCATION-CONTENTS LOC) T))
      (WAKEUP-GC-PROCESS T)
      T)))

(DEFUN EXIT-EPHEMERAL-MIGRATION-MODE ()
  (WITHOUT-ABORTS ("Updating ephemeral migration mode")
    (LET* ((PROCESS CURRENT-PROCESS)
	   (ELEM (OR (CL:ASSOC PROCESS *EPHEMERAL-MIGRATION-MODE-QUEUE*)
		     ;; This can happen after a warm-boot.
		     (RETURN-FROM EXIT-EPHEMERAL-MIGRATION-MODE NIL)))
	   (POPPED (POP (CDR ELEM))))
      (WHEN (EQ *EPHEMERAL-MIGRATION-MODE-PROCESS* PROCESS)
	(SETQ *EPHEMERAL-MIGRATION-MODE* POPPED))
      (WHEN (NULL (CDR ELEM))
	(SETQ *EPHEMERAL-MIGRATION-MODE-QUEUE*
	      (CL:DELETE ELEM *EPHEMERAL-MIGRATION-MODE-QUEUE*))
	(WHEN (EQ *EPHEMERAL-MIGRATION-MODE-PROCESS* PROCESS)
	  (IF *EPHEMERAL-MIGRATION-MODE-QUEUE*
	      ;; There's another process which can get control.  Give it to the process
	      ;; which has been waiting the longest.  This is like a stack-group-switch.
	      (LET ((NEW-ELEM (CAR (LAST *EPHEMERAL-MIGRATION-MODE-QUEUE*)))
		    (NEW-CDR (APPEND (CDDR ELEM) (LIST *EPHEMERAL-MIGRATION-MODE*))))
		(SETQ *EPHEMERAL-MIGRATION-MODE-PROCESS* (CAR NEW-ELEM)
		      *EPHEMERAL-MIGRATION-MODE* (CADR NEW-ELEM))
		(SETF (CDR NEW-ELEM) NEW-CDR))
	      ;; No other processes waiting, so release the lock.
	      (SETQ *EPHEMERAL-MIGRATION-MODE-PROCESS* NIL))))))
  (WITH-ABORTS-ENABLED (UNWIND-PROTECT)
    (WAKEUP-GC-PROCESS T)))

(DEFUN VALIDATE-EPHEMERAL-MIGRATION-MODE (MODE)
  (CHECK-ARG MODE (MEMQ MODE '(:NORMAL :KEEP :COLLECT :DYNAMIC))
	     ":NORMAL, :KEEP, :COLLECT or :DYNAMIC")
  MODE)

;; What level to evacuate this one into
(DEFVAR-SAFEGUARDED *EPHEMERAL-GC-NORMAL-NEXT-LEVEL*
		    (MAKE-ARRAY %NUMBER-OF-EPHEMERAL-LEVELS
				:TYPE 'ART-8B :AREA SAFEGUARDED-OBJECTS-AREA :INITIAL-VALUE 0))

;; What level to evacuate this one into, when the migration mode is :KEEP
(DEFVAR-SAFEGUARDED *EPHEMERAL-GC-KEEP-NEXT-LEVEL*
		    (MAKE-ARRAY %NUMBER-OF-EPHEMERAL-LEVELS
				:TYPE 'ART-8B :AREA SAFEGUARDED-OBJECTS-AREA))

;; How big this level has to be to get flipped
;; For newspace, this causes a flip
;; For copyspace, this causes the level to be flipped only if we're flipping anyway
;; Undefined if this level is not in use currently
(DEFVAR *EPHEMERAL-GC-FLIP-CAPACITY*
	(MAKE-ARRAY %NUMBER-OF-EPHEMERAL-LEVELS :AREA SAFEGUARDED-OBJECTS-AREA))

;;; Internal macros of various sorts.

(DEFINE-METERS *GC-METERS*
  (TRANSPORTER-MILLISECONDS :SAFEGUARDED T)
  (TRANSPORTER-PAGE-FETCHES :SAFEGUARDED T)
  (TRANSPORTER-TIMES	    :SAFEGUARDED T)
  (TRANSPORTER-WORDS	    :SAFEGUARDED T)		;reset to 0 at flip time
  (TOTAL-TRANSPORTER-WORDS  :SAFEGUARDED T)		;doesn't include TRANSPORTER-WORDS
  (TRANSPORTER-INVALID-POINTERS :SAFEGUARDED T)
  (SCAVENGE-TRANSPORTER-MILLISECONDS :SAFEGUARDED T)
  (SCAVENGE-TRANSPORTER-PAGE-FETCHES :SAFEGUARDED T)
  (SCAVENGE-TRANSPORTER-TIMES	     :SAFEGUARDED T)
  SCAVENGER-MILLISECONDS
  SCAVENGER-PAGE-FETCHES
  SCAVENGER-TIMES
  SCAVENGER-TOTAL-TIMES
  CONS-SCAVENGE-MILLISECONDS
  CONS-SCAVENGE-PAGE-FETCHES
  CONS-SCAVENGE-TIMES
  CONS-SCAVENGE-TOTAL-TIMES
  SCAVENGER-FIRST-PASS-MILLISECONDS
  SCAVENGER-FIRST-PASS-PAGE-FETCHES
  SCAVENGER-FIRST-PASS-TIMES
  (SCAVENGER-FIRST-PASS-WORDS	    :SAFEGUARDED T) ;reset to 0 at flip time
  (SCAVENGER-FIRST-PASS-TOTAL-WORDS :SAFEGUARDED T) ;doesn't include SCAVENGER-FIRST-PASS-WORDS
  SCAVENGER-FINAL-PASS-MILLISECONDS
  SCAVENGER-FINAL-PASS-PAGE-FETCHES
  SCAVENGER-FINAL-PASS-TIMES
  (SCAVENGER-FINAL-PASS-WORDS	    :SAFEGUARDED T) ;reset to 0 at flip time
  (SCAVENGER-FINAL-PASS-TOTAL-WORDS :SAFEGUARDED T) ;doesn't include SCAVENGER-FINAL-PASS-WORDS
  (TOTAL-CONS-WORK-DONE :SAFEGUARDED T)
  TOTAL-SCAV-WORK-DONE
  TOTAL-OLDSPACE-RECLAIMED
  SCAVENGER-RESIDENT-PAGES-MILLISECONDS
  SCAVENGER-RESIDENT-PAGES-PAGE-FETCHES
  (SCAVENGER-RESIDENT-PAGES-WORDS	:SAFEGUARDED T)	;reset to 0 at flip time
  (SCAVENGER-RESIDENT-PAGES-TOTAL-WORDS	:SAFEGUARDED T)	;doesn't include SCAVENGER-RESIDENT-PAGES-WORDS
  SCAVENGER-RESIDENT-PAGES-TIMES
  SCAVENGER-ESRT-MILLISECONDS
  SCAVENGER-ESRT-PAGE-FETCHES
  (SCAVENGER-ESRT-WORDS		:SAFEGUARDED T)	;reset to 0 at flip time
  (SCAVENGER-ESRT-TOTAL-WORDS	:SAFEGUARDED T)	;doesn't include SCAVENGER-ESRT-WORDS
  SCAVENGER-ESRT-TIMES)

;Name is the name of a meter or a list of elements, where each element is either
;the name of a meter or a list of a name of a meter and an update predicate form.
(DEFMACRO METER-MS-AND-PF (NAME &BODY BODY)
  (UNLESS (LISTP NAME) (SETQ NAME (LIST NAME)))
  (LET ((IVAR (AND (CDR NAME) (GENSYM)))	;Variable for time interval, if needed
	(INTERVAL `(WIRED-TIME-DIFFERENCE-MILLISECONDS (%MICROSECOND-CLOCK) ENTRY-TIME)))
    `(LET ((ENTRY-TIME (%MICROSECOND-CLOCK))
	   (ENTRY-PAGE-FETCHES *COUNT-PAGE-FETCHES*))
       (PROG1 (PROGN . ,BODY)
	      (LET ,(AND IVAR `((,IVAR ,INTERVAL)))
		,@(LOOP FOR ELEM IN NAME WITH CONDITION
			DO (IF (LISTP ELEM)
			       (SETQ NAME (FIRST ELEM) CONDITION (SECOND ELEM))
			       (SETQ NAME ELEM CONDITION NIL))
			   (SETQ ELEM
				 (LET ((MS-NAME (INTERN (FORMAT NIL "~A-MILLISECONDS" NAME)))
				       (PF-NAME (INTERN (FORMAT NIL "~A-PAGE-FETCHES" NAME)))
				       (TIMES-NAME (INTERN (FORMAT NIL "~A-TIMES" NAME))))
				   `((SETQ ,MS-NAME (%32-BIT-PLUS ,MS-NAME
								  ,(OR IVAR INTERVAL)))
				     (INCF ,PF-NAME (- *COUNT-PAGE-FETCHES*
						       ENTRY-PAGE-FETCHES))
				     (INCF ,TIMES-NAME))))
			   (WHEN CONDITION (SETQ ELEM `((WHEN ,CONDITION ,@ELEM))))
			NCONC ELEM))))))

;A piece out of METER-MS-AND-PF
(DEFMACRO UPDATE-MS-METER (VARIABLE ENTRY-TIME)
  `(SETQ ,VARIABLE
	 (%32-BIT-PLUS ,VARIABLE
		       (WIRED-TIME-DIFFERENCE-MILLISECONDS (%MICROSECOND-CLOCK)
							   ,ENTRY-TIME))))

;Macro for accessing DEFSTORAGE-defined structures without
;following normal storage conventions.
(DEFMACRO PEEK-AT-OLDSPACE (DEFSTORAGE-ACCESS &OPTIONAL SPECIFIC-BYTE &ENVIRONMENT ENV)
  (LET ((FORM (LET ((METHOD (LT:FIND-INLINE-FORM-METHOD (FIRST DEFSTORAGE-ACCESS) ENV)))
		(IF METHOD
		    (LT:EXPAND-INLINE-FORM METHOD DEFSTORAGE-ACCESS ENV :NEVER-BIND-LOCALS T)
		    (MACROEXPAND-1 DEFSTORAGE-ACCESS ENV)))))
    (MULTIPLE-VALUE-BIND (POINTER WORD BYTE)
	(SELECTQ (FIRST FORM)
	  (%P-LDB-OFFSET (VALUES (THIRD FORM) (FOURTH FORM) (SECOND FORM)))
	  (%P-CONTENTS-OFFSET (VALUES (SECOND FORM) (THIRD FORM) %%Q-POINTER))
	  #+imach
	  (DEFSTORAGE-ACCESSOR
	   (VALUES (SECOND FORM)
		   (THIRD FORM)
		   (IF (NTHCDR 7 FORM)
		       `(BYTE . ,(NTHCDR 7 FORM))
		       %%Q-POINTER)))
	  #+imach
	  (COMPACT-DEFSTORAGE-ACCESSOR
	   (LET ((OPTIONS (THIRD FORM)))
	     (VALUES (SECOND FORM)
		     (OR (FOURTH FORM) (SI:DEFSTORAGE-OFFSET OPTIONS))
		     (IF (LDB-TEST %%DEFSTORAGE-SIZE OPTIONS)
			 `(BYTE (LDB %%DEFSTORAGE-SIZE OPTIONS)
				(LDB %%DEFSTORAGE-POSITION OPTIONS))
			 %%Q-POINTER))))
	  (OTHERWISE (FERROR "~S not understood as a defstorage access" DEFSTORAGE-ACCESS)))
      (OR (ZEROP WORD)
	  (SETQ POINTER `(+ ,POINTER ,WORD)))
      `(%P-LDB ,(OR SPECIFIC-BYTE BYTE) ,POINTER)))) 

;Local macro for signalling errors inside TRANSPORT-TRAP
(DEFMACRO TRANSPORT-ERROR (STRING &REST ARGS)
  (SETQ STRING (STRING-APPEND
"A storage-convention violation has been detected by the garbage collector:
" STRING "

Please report this bug and the circumstances that led to it, if known.
The environment is probably seriously damaged; if you are lucky you may possibly
be able to recover by doing (GC-OFF) and then aborting.
" ))
  `(PROGN (WHEN %STACK-GROUP-LOCK
	    ;; No chance of getting to debugger successfully, so halt now
	    ;; before it's too late.  Would be nice to be able to set
	    ;; WIRED-FERROR-ARGS, if I had a wired list and string.
	    (%HALT))
	  (SETQ %TRANSPORT-IN-PROGRESS NIL)
	  #+IMach (SETQ %TRANSPORT-TRAP-LEVEL 0)
	  #+3600  (SETQ INHIBIT-SCHEDULING-FLAG OLD-INHIBIT-SCHEDULING-FLAG)
	  #+3600  (RETURN-FROM TRANSPORT-TRAP (TRANSPORT-ERROR-INTERNAL ,STRING ,@ARGS))
	  #+IMach (TRANSPORT-ERROR-INTERNAL ,STRING ,@ARGS)))

(DEFUN TRANSPORT-ERROR-INTERNAL (&REST ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  ;; Disable scavenging while in the debugger, to minimize the
  ;; chance of getting into an infinite loop of repeating errors.
  ;; Hopefully we won't run out of address space before finding the bug.
  (LET ((OLD-INHIBIT-SCAVENGING-FLAG INHIBIT-SCAVENGING-FLAG)
	(OLD-INHIBIT-IDLE-SCAVENGING-FLAG INHIBIT-IDLE-SCAVENGING-FLAG)) 
    (UNWIND-PROTECT
      (PROGN
	#+IMach
	(WHEN (= (%TRAP-MODE) TRAP-MODE-EXTRA-STACK)
	  (%REVERT-TO-EMULATOR-MODE))
	(SETQ INHIBIT-SCAVENGING-FLAG T		;Disable scavenging during cons
	      INHIBIT-IDLE-SCAVENGING-FLAG T	;Disable scavenging during idle time
	      *INHIBIT-CONSING-FLAG* NIL)	;This will definitely cons, don't lose.
	(APPLY #'FERROR ARGS))
      ;; Only turn them back on if GC is still turned on, user may have called GC-OFF
      (WHEN GC-ON
	(SETQ INHIBIT-SCAVENGING-FLAG OLD-INHIBIT-SCAVENGING-FLAG
	      INHIBIT-IDLE-SCAVENGING-FLAG OLD-INHIBIT-IDLE-SCAVENGING-FLAG)))))

;;; Describe memory scanned from POINTER-1 through POINTER-2, trap was on CELL.
;;; CELL may be NIL, which means this wasn't a transport-trap; just describe memory scanned.
(DEFUN TRANSPORT-ERROR-ADDITIONAL-INFO (CELL POINTER-1 POINTER-2 &OPTIONAL (OLDSPACE-P CELL))
  (LABELS ((DDT-EXAMINE (P)
	     (LET* ((CDR (%P-CDR-CODE P))
		    (TYPE (%P-DATA-TYPE P))
		    (TYPENAME (DATA-TYPE-NAME TYPE))
		    (DATA (IF (%POINTER-TYPE-P TYPE) (%P-POINTER P) (%P-LDB %%Q-FIXNUM P))))
	       (SELECTQ TYPENAME
		 (#+3600 SYS:DTP-FLOAT #+IMach SYS:DTP-SINGLE-FLOAT (SETQ DATA (%FLONUM DATA)))
		 (SYS:DTP-CHARACTER (SETQ DATA (CODE-CHAR DATA)))
		 #+IMach (SYS:DTP-SMALL-RATIO (SETQ DATA (%SMALL-RATIO DATA))))
	       (FORMAT T "~&~\SI:ADDRESS\// ~A ~A ~\SI:ADDRESS\"
		       P
		       (OR (NTH CDR (SELECT TYPE
				      (DTP-HEADER-I *HEADER-I-TYPES*)
				      (DTP-HEADER-P *HEADER-P-TYPES*)
				      (OTHERWISE *CDR-CODES*)))
			   CDR)
		       TYPENAME DATA)
	       (WHEN (%POINTER-TYPE-P TYPE)
		 (LET ((REGION (%REGION-NUMBER (%P-POINTER P))))
		   (WHEN REGION
		     (FORMAT T "  ~A (region ~O, ~\SI:REGION-SPACE-TYPE\ ~
						  ~\SI:REGION-REPRESENTATION-TYPE\)"
			     (AREA-NAME (REGION-AREA REGION)) REGION
			     (LDB %%REGION-SPACE-TYPE (REGION-BITS REGION))
			     (LDB %%REGION-REPRESENTATION-TYPE (REGION-BITS REGION)))
		     (WHEN (AND (= TYPE DTP-HEADER-P) (= CDR %HEADER-TYPE-INSTANCE))
		       (LOOP FOR FLAVOR = (%P-POINTER P) THEN (%P-POINTER FLAVOR)
			     AS DTP = (%P-DATA-TYPE FLAVOR)
			     WHEN (= DTP DTP-HEADER-I)
			       RETURN (FORMAT T "~%~20@T Flavor ~S, instance-size ~D."
					(%MAKE-POINTER DTP-SYMBOL
					  (PEEK-AT-OLDSPACE (%FLAVOR-TYPENAME FLAVOR)))
					(PEEK-AT-OLDSPACE (%FLAVOR-INSTANCE-SIZE FLAVOR)))
			     WHILE (OR (= DTP DTP-GC-FORWARD) (= DTP DTP-HEADER-FORWARD))))
		     ))))))
    (WHEN CELL
      (FORMAT T "~&Transport trap was on ~\SI:ADDRESS\ in ~A:"
	      (%POINTER CELL) (AREA-NAME (%AREA-NUMBER CELL)))
      (DESCRIBE-REGION (%REGION-NUMBER CELL))
      (DDT-EXAMINE (%POINTER CELL))
      ;; Next bit of kludgery is to keep COMPILER:DISASSEMBLE-DECODE-LOCATIVE, called by
      ;; DESCRIBE-LOCATIVE, from stupidly accessing the contents of the cell
      ;; and causing another transport trap that will signal another error.  Gad!
      (BLOCK DESCRIBE-LOCATIVE
	(LET ((CELL (%MAKE-POINTER DTP-LOCATIVE CELL)))
	  ;; If cell points into the middle of a structure, find the real cell.
	  (LET ((DTP (%P-DATA-TYPE CELL)))
	    (UNLESS (OR (= DTP DTP-HEADER-P) (= DTP DTP-HEADER-I) (= DTP DTP-HEADER-FORWARD))
	      (SETQ CELL (FOLLOW-CELL-FORWARDING CELL NIL))))
	  ;; Look out for stacks.
	  (LET ((REGION (%REGION-NUMBER CELL)))
	    (WHEN (AND (NOT (NULL REGION))
		       (LDB-TEST %%REGION-STACK (REGION-BITS REGION)))
	      (RETURN-FROM DESCRIBE-LOCATIVE))
	    ;; Find the containing structure
	    (MULTIPLE-VALUE-BIND (HEADER LEADER)
		(%FIND-STRUCTURE-EXTENT CELL)
	      (WHEN (OR (AND (TYPEP HEADER :COMPILED-FUNCTION)
			     (EQ CELL (LOCF (CCA-FUNCTION-CELL LEADER))))
			(AND (ARRAYP HEADER)
			     (EQ (NAMED-STRUCTURE-P HEADER) 'FORWARDED-SYMBOL-CELL-TABLE)
			     (NOT (MINUSP (%POINTER-DIFFERENCE CELL (ALOC HEADER 0)))))
			(AND (OR #+3600  (%POINTER-LESSP CELL 1000)
				 #+3600  (%POINTER-LESSP A-MEMORY-VIRTUAL-ADDRESS CELL)
				 #+IMach (AND (= REGION WIRED-CONTROL-TABLES)
					      (%POINTER-LESSP CELL 'NIL))
				 #+IMach (= REGION FEP-AREA))
			     (LOOP FOR (NIL LOW HIGH) IN *MAGIC-LOCATIONS*
				   WHEN (AND (%POINTER- LOW CELL)
					     (%POINTER-< CELL HIGH))
				     RETURN T))
			(AND (SYMBOLP HEADER) (NOT (NULL HEADER)))
			(AND (NULL HEADER) (NOT (NULL LEADER))))
		(DESCRIBE-LOCATIVE CELL)))))))
    (FORMAT T "~&~:[Memory~;Oldspace~] scanned from ~\SI:ADDRESS\ through ~\SI:ADDRESS\ in ~A:"
	    OLDSPACE-P POINTER-1 POINTER-2 (AREA-NAME (%AREA-NUMBER POINTER-1)))
    (DESCRIBE-REGION (%REGION-NUMBER POINTER-1))
    #+IGNORE
    (LOOP FOR P FROM POINTER-1 TO POINTER-2 DO
      (UNLESS (AND (> (- P POINTER-1) 20) (> (- POINTER-2 P) 20))
	(DDT-EXAMINE P)))
    ;; This should be equivalent to the above, but it won't go into long loops.
    (LOOP FOR P = POINTER-1 THEN (%POINTER-PLUS P 1)
	  WHEN (AND (= (%POINTER-DIFFERENCE P POINTER-1) 21)
		    (> (%POINTER-DIFFERENCE POINTER-2 P) 20))
	    DO (SETQ P (%POINTER-PLUS POINTER-2 -20))	;Skip addresses in the middle
	  UNTIL (PLUSP (%POINTER-DIFFERENCE P POINTER-2))
	  DO (DDT-EXAMINE P))
    ;; For transport-traps, give information about why the trap occurred.
    #+IMach
    (WHEN CELL
      (FORMAT T "~&EPHEMERAL-OLDSPACE-REGISTER/ ~\SI:ADDRESS\~@
		   ZONE-OLDSPACE-REGISTER/      ~\SI:ADDRESS\~@
		   *FALSE-OLDSPACE-MASK*/       ~\SI:ADDRESS\"
	      (%READ-INTERNAL-REGISTER %REGISTER-EPHEMERAL-OLDSPACE-REGISTER)
	      (%READ-INTERNAL-REGISTER %REGISTER-ZONE-OLDSPACE-REGISTER)
	      *FALSE-OLDSPACE-MASK*))))

