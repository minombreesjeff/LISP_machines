;;; -*- Mode: Lisp; Package: COMPILER; Lowercase: T; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;
;;; This file defines the instantiable compiler flavors for the I-machine
;;;

;;;; Some macros have to expand differently if they are being expanded to run on the
;;;; L machine than if they are expanding to be run on the I machine (in particular,
;;;; with-data-stack) so we use *macroexpand-hook* to bind a variable to let us know
;;;; which situation we are in.
#-IMACH
(defvar *macroexpansions-in-progress* 0)

#-IMACH
(defun i-compiler-macroexpand-hook (fn &rest args)
  (let ((*macroexpansions-in-progress* (1+ *macroexpansions-in-progress*)))
    (cl:apply fn args)))

#-IMACH
(defmacro macroexpansion-case (&rest clauses)
  (let ((compile-time (cdr (cl:assoc ':compile-time clauses)))
	(run-time (cdr (cl:assoc ':run-time clauses))))
    (unless (and compile-time run-time)
      (error "compile and run time clauses must both be provided"))
    `(if (or ( *macroexpansions-in-progress* 2)
	     (typep *compiler* 'l-lisp-compiler:l-architecture-mixin))
	 (progn ,@compile-time)
	 (progn ,@run-time))))

#-IMACH
(defflavor remote-i-compiler () (xic::i-architecture-mixin remote-compiler-target-mixin))

#-imach
(defmethod (form-for-define remote-i-compiler) (fspec definition)
  (if (funcall *compile-function* :to-core-p)
      `(setf (si:function-spec-get ',fspec ',(function-plist-indicator self)) ',definition)
      `(fdefine ',fspec ',definition t)))

#-IMACH
(defmethod (get-bindings remote-i-compiler) ()
  (values '(cl:*features*
	     si:*symbol-mapper*
	     *file-declare-p*
	     *macroexpand-hook*)
	  (list (cons :IMACH (cons :Ivory-1 (remove 3600. cl:*features*)))
		#'i-support:parallel-name
		nil
		#'i-compiler-macroexpand-hook)))

#-IMACH
(defmethod (get-default-binary-file-type remote-i-compiler) ()
  ':ibin)

#-IMACH
(defmethod (get-read-package remote-i-compiler) (package)
  (si:pkg-find-package (si:pkg-name package) nil (cl:find-package "IGLOBAL")))

#-IMACH
(compile-flavor-methods remote-i-compiler)

#-IMACH
(defvar *remote-i-compiler* (make-instance 'remote-i-compiler))


;;; This one is for side-effect to the local compilation environment
#-IMACH
(defflavor local-i-compiler
	()
	(l-lisp-compiler:l-architecture-mixin local-compiler-target-mixin))

#-IMACH
(defmethod (target-typep local-i-compiler)
	   (types)
  (memq ':imach types))

#-IMACH
(defmethod (get-read-package local-i-compiler) (package)
  (si:pkg-find-package (si:pkg-name package) nil (cl:find-package "IGLOBAL")))

#-IMACH
(defmethod (get-bindings local-i-compiler) ()
  (values '(cl:*features* *macroexpand-hook*)
	  (list (list* :cross-compiler-environment :IMACH :Ivory-1
		       (remove 3600. cl:*features*))
		#'i-compiler-macroexpand-hook)))

#-IMACH
(defmethod (get-default-binary-file-type local-i-compiler) ()
  ':xbin)

#-IMACH
(defvar *local-i-compiler* (make-instance 'local-i-compiler))

#+IMACH
(defflavor local-i-compiler
	()
	(i-lisp-compiler::i-architecture-mixin local-compiler-target-mixin))

#+IMACH
(defmethod (get-bindings local-i-compiler) ()
  (values nil nil))

#+(AND IMACH (NOT VLM))
(defmethod (get-default-binary-file-type local-i-compiler) ()
  ':ibin)

#+(AND IMACH VLM)
(defmethod (get-default-binary-file-type local-i-compiler) ()
  ':Vbin)

#+IMACH
(defmethod (get-read-package local-i-compiler) (package)
  package)

#+IMACH
(compile-flavor-methods local-i-compiler)

;;; >>> We need better syntax for the frame-size constants. <<<
#+IMACH
(defvar *local-i-compiler* (make-instance 'local-i-compiler))


#+IMACH
(add-initialization "Initialize the specials that contain the default compiler objects"
		    '(setq *compiler* *local-i-compiler*
			   *local-compiler* *local-i-compiler*)
		    '(:once))
