;;; -*- Mode: Lisp; Package: I-LISP-COMPILER; Lowercase: T; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defoptimizer (%pointer-plus %pointer-plus-optimizer) (form)
  (compiler:matchp (cdr form)
    ((pointer amt)
     (if (and (cl:constantp amt compiler:*optimizer-environment*)
	      (eql (lt:evaluate-constant amt compiler:*optimizer-environment*) 0))
	 pointer
	 form))
    (* (phase-1-bad-form "Wrong number of arguments"))))

;;; For cross-compiling, do these as optimizers, so that various substs can be
;;; overridden.
#||
#-imach (progn
(eval-when (compile load eval)
(defun add-type-member-disassembler (operand name)
  (let ((pair (cl:rassoc name *type-member-name-alist* :test #'string-equal)))
    (if pair
	(setf (car pair) operand)
	(push (cons operand name) *type-member-name-alist*))))
)

(defoptimizer (type-member type-member-optimizer) (form)
  (or (matchp form
	(('type-member form . types)
	 (when (loop for type in types always (constant-form-p type))
	   (let ((types (mapcar #'constant-evaluator types))
		 (real-form (if (symbolp form) form (gensym))))
	     (when (loop for type in types
			 always (and (fixnump type)
				     ( 0 type)
				     (< type (^ 2 (byte-size i:sys:%%q-data-type)))))
	       (setq types (cl:delete-duplicates (sort types #'<)))
	       (let ((result
		       (loop while types collecting
			 (loop with first-type = (pop types)
			       with these-types = (list first-type)
			       until (null types)
			       while (< (- (car types) (dpb 0 (byte 2 0) first-type)) 8)
			       do (push (pop types) these-types)
			       finally
				 (return `(type-member-internal ,real-form
					    ,(compute-type-member-operand these-types)))))))
		 (if (cdr result)
		     (setq result `(or . ,result))
		     (setq result (car result)))
		 (when (neq form real-form)
		   (if (eq (car result) 'or)
		       (setq result `(let ((,real-form ,form)) ,result))
		       (setq result (subst form real-form result))))
		 result)))))
	(* nil))
      (progn (warn "TYPE-MEMBER cannot be optimized:  ~S" form)
	     nil)))


(defmacro def-type-member-optimizer
	  ((name &optional (disassemble-name (string name)) optimizer-name) types &body other-clauses)
  (let ((operand (compute-type-member-operand types)))
    `(progn
       (add-type-member-disassembler ,operand ',disassemble-name)
       (defoptimizer (,name ,(or optimizer-name
				 (intern (string-append disassemble-name "-"
							"TYPE-MEMBER-OPTIMIZER"))))
		     (form)
	 (matchp form
	   ((',name thing) `(type-member-internal ,thing ,',operand))
	   ,@(or other-clauses
		 `((* (phase-1-bad-form "Wrong number of arguments")))))))))

(def-type-member-optimizer (cl:listp "LISTP") i:sys:(dtp-list dtp-list-instance dtp-nil))
(def-type-member-optimizer (fixnump) i:sys:(dtp-fixnum))
(def-type-member-optimizer (characterp) i:sys:(dtp-character))
(def-type-member-optimizer (instancep)
  i:sys:(dtp-instance dtp-list-instance dtp-array-instance dtp-string-instance))
(def-type-member-optimizer (cl:rationalp "RATIONALP")
			   i:sys:(dtp-small-ratio dtp-big-ratio dtp-fixnum dtp-bignum)
  (* form))
(def-type-member-optimizer (locativep) i:sys:(dtp-locative))
(def-type-member-optimizer (lexical-closure-p) i:sys:(dtp-lexical-closure))
(def-type-member-optimizer (cli::generic-function-p) i:sys:(dtp-generic-function))
(def-type-member-optimizer (single-float-p) i:sys:(dtp-single-float))
(def-type-member-optimizer (si:double-float-p) i:sys:(dtp-double-float))
(def-type-member-optimizer (rationalp "RATIO-P") i:sys:(dtp-small-ratio dtp-big-ratio))
(def-type-member-optimizer (cli::small-ratio-p) i:sys:(dtp-small-ratio))
(def-type-member-optimizer (cli::big-ratio-p) i:sys:(dtp-big-ratio))
(def-type-member-optimizer (physical-address-p "PHYSICAL-ADDRESS-P") i:sys:(dtp-physical-address))

#+3600
;;; The 3600 definition of ZL:RATIONALP is a "subst" declared not to be inline.  This
;;; prevents the optimizer from running, so we need to optimize the parallel symbol
;;; instead.
(def-type-member-optimizer (i:zl:rationalp "RATIO-P" ratio-p-type-member-optimizer-local-local) i:sys:(dtp-small-ratio dtp-big-ratio))

(def-type-member-optimizer (complexp "COMPLEXP") i:sys:(dtp-complex))
(def-type-member-optimizer (floatp) i:sys:(dtp-single-float dtp-double-float))
(def-type-member-optimizer (bigp) i:sys:(dtp-bignum))
(def-type-member-optimizer (zl:fixp "INTEGERP") i:sys:(dtp-fixnum dtp-bignum))
(def-type-member-optimizer (numberp) i:sys:(dtp-fixnum dtp-bignum dtp-single-float
					    dtp-double-float dtp-big-ratio dtp-small-ratio
					    dtp-complex dtp-spare-number))
(def-type-member-optimizer (extended-number-p) i:sys:(dtp-bignum dtp-double-float
						      dtp-big-ratio dtp-complex
						      dtp-spare-number))
(def-type-member-optimizer (listp "CONSP") i:sys:(dtp-list dtp-list-instance))

;;; Can't do it for NOT since a lot of optimizers need to see it.  The back end
;;; handles the compilation of NOT instead
;(def-type-member-optimizer (not) i:sys:(dtp-nil))
(add-type-member-disassembler (compute-type-member-operand (list i:sys:dtp-nil)) "NOT")

(def-type-member-optimizer (arrayp) i:sys:(dtp-array dtp-array-instance dtp-string
						     dtp-string-instance))
(def-type-member-optimizer (stringp) i:sys:(dtp-string dtp-string-instance))
(def-type-member-optimizer (symbolp) i:sys:(dtp-nil dtp-symbol))
(def-type-member-optimizer (cl:compiled-function-p) i:sys:(dtp-compiled-function))
(def-type-member-optimizer (zl:closurep) i:sys:(dtp-dynamic-closure))
)
||#

(defoptimizer (atom atom-optimizer) (form)
  (matchp form
    ((ignore form)
     `(not (listp ,form)))
    (* (phase-1-bad-form "Wrong number of arguments"))))

(defoptimizer (eql eql-to-eq) (form)
  (matchp form
    (('eql arg1 arg2)
     (cond ((null arg1)
	    `(not ,arg2))
	   ((null arg2)
	    `(not ,arg1))
	   ((or (compiler:equal-same-as-eq arg1) (compiler:equal-same-as-eq arg2))
	    `(eq ,arg1 ,arg2))
	   (t form)))
    (* form)))

(defoptimizer (zerop zerop-ldb logtest) (form)
  (matchp form
    (('zerop (ldb size position integer))
     (when (and (compiler:constant-form-p size)
		(compiler:constant-form-p position))
       (setf size (compiler:constant-evaluator size))
       (setf position (compiler:constant-evaluator position))
       (selectq ldb
	 ((cli::load-byte-internal cli::fixnum-load-byte-internal)
	  (let ((mask (selectq ldb
			(cli::load-byte-internal
			 (cli::deposit-byte-internal -1 size position 0))
			(cli::fixnum-load-byte-internal
			 (cli::fixnum-deposit-byte-internal -1 size position 0)))))
	    (when (possible-immediate-operand? mask 'signed)
	      (return-from zerop-ldb
		`(not (cl:logtest ,mask ,integer))))
	    ))))))
  form)

(defoptimizer (plusp plusp-ldb logtest) (form)
  (matchp form
    (('plusp (ldb size position integer))
     (when (and (compiler:constant-form-p size)
		(compiler:constant-form-p position))
       (setf size (compiler:constant-evaluator size))
       (setf position (compiler:constant-evaluator position))
       (selectq ldb
	 ((cli::load-byte-internal)
	  (return-from plusp-ldb
	    `(not (zerop (,ldb ',size ',position ,integer)))))
	 ((cli::fixnum-load-byte-internal)
	  (when (< size 32.)
	    (return-from plusp-ldb
	      `(not (zerop (,ldb ',size ',position ,integer))))))))))
  form)

(defoptimizer (i:sys:%p-contents-offset %p-contents-offset-optimizer)
	      (form)
  (matchp form
    (('i:sys:%p-contents-offset pointer offset)
     `(i:sys:%memory-read (i:si:%p-structure-offset-internal ,pointer ,offset)))
    (* (phase-1-bad-form "Wrong number of arguments"))))

(defoptimizer (zl:assq assq-optimizer) (form)
  (matchp form
    ((ignore key list)
     (if (cl:constantp key compiler:*optimizer-environment*)
	 (let ((value (lt:evaluate-constant key compiler:*optimizer-environment*)))
	   (if (si:extended-number-p value)
	       form				;Don't bother with this case
	       `(cl:assoc ,key ,list)))
	 (if (cl:constantp list compiler:*optimizer-environment*)
	     (loop for elt in (lt:evaluate-constant list compiler:*optimizer-environment*)
		   doing
	       (typecase elt
		 (:list
		   (when (si:extended-number-p (car elt))
		     (return form)))
		 (otherwise
		   (phase-1-bad-form "Constant list for ASSQ not an ALIST")))
		   finally
		     (return `(cl:assoc ,key ,list)))
	     form)))
    (* (phase-1-bad-form "Wrong number of arguments"))))

(defoptimizer (zl:memq memq-optimizer) (form)
  (matchp form
    ((ignore key list)
     (if (cl:constantp key compiler:*optimizer-environment*)
	 (let ((value (lt:evaluate-constant key compiler:*optimizer-environment*)))
	   (if (si:extended-number-p value)
	       form				;Don't bother with this case
	       `(cl:member ,key ,list)))
	 (if (cl:constantp list compiler:*optimizer-environment*)
	     (loop for elt in (lt:evaluate-constant list compiler:*optimizer-environment*)
		   when (si:extended-number-p elt)
		     return form
		   finally
		     (return `(cl:member ,key ,list)))
	     form)))
    (* (phase-1-bad-form "Wrong number of arguments"))))

(deftransformer (zl:bit-test zl-bit-test-optimizer) (form)
  (matchp form
    ((ignore number1 number2)
     `(logtest-internal ,number1 ,number2))
    (* (phase-1-bad-form "Wrong number of arguments"))))

(defprop :FIXNUM ZL:FIXNUMP I-TYPEP)
(defprop :LOCATIVE ZL:LOCATIVEP I-TYPEP)
(defprop :COMPILED-FUNCTION CL:COMPILED-FUNCTION-P I-TYPEP)
(defprop :CLOSURE DYNAMIC-CLOSURE-P I-TYPEP)
(defprop :LEXICAL-CLOSURE LEXICAL-CLOSURE-P I-TYPEP)
(defprop :INSTANCE INSTANCEP I-TYPEP)
(defprop :GENERIC-FUNCTION CLI::GENERIC-FUNCTION-P I-TYPEP)
(defprop :CHARACTER SI:CHARACTERP I-TYPEP)
(defprop :EXTENDED-NUMBER EXTENDED-NUMBER-P I-TYPEP)
(defprop :RATIONAL I:SI:RATIONALP I-TYPEP)
(defprop :PHYSICAL-ADDRESS PHYSICAL-ADDRESS-P I-TYPEP)
(DEFPROP :SMALL-RATIO CLI::SMALL-RATIO-P I-TYPEP)
(DEFPROP :BIG-RATIO CLI::BIG-RATIO-P I-TYPEP)

(defoptimizer (system:typep typep-two-args) (form)
  (compiler:matchp form
    (('zl:typep typed-form type-form)
     (when (constant-form-p type-form)
       (let* ((type (constant-evaluator (third form)))
	      (pred (and (symbolp type)
			 (get type 'i-typep))))
	 (when pred
	   (return-from typep-two-args `(,pred ,typed-form)))))))
  form)

(defoptimizer (mod mod-to-floor)
	      (form)
  `(multiple-value-bind (ignore mod)
       (floor ,@(cdr form))
     mod))

(defoptimizer (\ \-to-truncate)
	      (form)
  `(multiple-value-bind (ignore rem)
       (truncate ,@(cdr form))
     rem))


;;; See the discussion and code for the optimized versions under the
;;; definition of MAKE-ARRAY.
(defoptimizer (global:make-array simple-make-array
				 system-internals:simple-make-array-nss-area
				 system-internals:simple-make-array-type-area
				 system-internals:simple-make-array-type-ll-fp-area)
	      (form)
  (or (let ((temp form)
	    length type t-p area a-p
	    leader-length llen-p leader-list llist-p fill-pointer fp-p
	    named-structure-symbol nss-p)	    
	(and (listp temp)
	     (eq (pop temp) 'global:make-array)
	     (oddp (length temp))
	     (cond ((cl:constantp (setq length (pop temp)) *optimizer-environment*)
		    (let ((value (lt:evaluate-constant length *optimizer-environment*)))
		      (when (and (cl:consp value)
				 (cl:integerp (car value))
				 (null (cdr value)))
			(setq length (setq value (car value))))
		      (and (cl:integerp value)
			   (< -1 value
			      (#-IMACH i-support:defsysbyte-limit-value
			       #+IMACH defsysbyte-limit-value
			       i:sys:array-short-length-field)))))
		   ((symbolp length) t)		;variable
		   ((listp length)
		    (let ((type (compiler:function-return-type
				  (car (compiler:undo-list-optimization length)))))
		      (not (or (cl:member type 'cl:(list cons null))
			       (compiler:types-disjoint-p type 'cl:integer)))))
		   (T nil))			; don't try
	     (loop for (option value) on temp by 'cddr
		   for num upfrom 0
		   do (selectq option
			(:type
			 (if t-p (return nil)
			     (setq type value t-p num)
			     (when (and (listp type)
					(eq (car type) 'quote)
					(or (memq (cadr type) i:sys:*array-type-codes*)
					    (memq (cadr type) 'i:sys:(art-string art-fat-string))))
			       (setq type (symeval (cadr type))))
			     (when (equal type global:art-q)
			       (setq type nil))))			     
			(:area
			 (if a-p (return nil)
			     (setq area value a-p num)))
			(:leader-length
			 (if llen-p (return nil)
			     (setq leader-length value llen-p num)))
			(:leader-list
			 (if llist-p (return nil)
			     (setq leader-list value llist-p num)))
			(:fill-pointer
			 (if fp-p (return nil)
			     (setq fill-pointer value fp-p num)))
			(:named-structure-symbol
			 (if nss-p (return nil)
			     (setq named-structure-symbol value nss-p t)))
			(otherwise (return nil)))
		   finally (return t))
	     ;; doesn't necessarily preserve order of evaluation
	     (cond ((and (not type)		;canonicalized to NIL if ART-Q
			 (not leader-length)
			 (not leader-list)
			 (not fill-pointer))		    
		    `(system-internals:simple-make-array-nss-area
		       ,length
		       ,@(if (or named-structure-symbol area)
			     `(,named-structure-symbol))
		       ,@(if area `(,area))))
		   ((and (not leader-length)
			 (not leader-list)
			 (not fill-pointer)
			 (not named-structure-symbol))
		    `(system-internals:simple-make-array-type-area
		       ,length ,type
		       ,@(if area `(,area))))
		   ((and (not named-structure-symbol))
		    `(system-internals:simple-make-array-type-ll-fp-area
		       ,length ,type ,leader-length
		       ,@(if (or leader-list fill-pointer area)
			     `(,leader-list))
		       ,@(if (or fill-pointer area)
			     `(,fill-pointer))
		       ,@(if area `(,area)))))))
      form))

;Do the type translation for cl:make-array at compile time, so we don't need
;to have the type system loaded to make an array.  Needed so flavors can
;be loaded in the inner system.

#-IMACH
;;; Needed for cross-compilation
(defoptimizer (cl:make-array cl-make-array-optimizer) (form)
  (matchp form
    (('cl:make-array dimensions . options)
     ;; Check that the options are done by ZL:MAKE-ARRAY
     (loop for (key val) on options by 'cddr do
       (when (or (not (keywordp key))
		 (selectq key
		   (:initial-contents
		    t)
		   (:element-type
		    (not (constant-form-p val)))
		   (:fill-pointer
		    (or (not (constant-form-p val))
			(eq (constant-evaluator val) t)))))
	 (return-from cl-make-array-optimizer form)))
     ;; Mung the options
     (setq options (cl:copy-list options))
     (loop for l on options by 'cddr do
       (selectq (car l)
	 (:initial-element
	  (setf (car l) :initial-value))
	 (:element-type
	  (setf (car l) :type)
	  (setf (cadr l)
		;; -->> Note: This is identical to the L machine definition, with the
		;; exception of the conversion of the array type to the appropriate
		;; package space.  This optimizer is otherwise machine-independent. <<--
		`',(i-support:parallel-name
		     (sys:type-array-element-type (constant-evaluator (cadr l))))))
	 ))
     `(zl:make-array ,dimensions ,@options))
    (* form)))

(defoptimizer (i:si:follow-cell-forwarding follow-cell-forwarding-optimizer)
	      (form)
  (matchp form
    (('i:si:follow-cell-forwarding locative 'nil)
     `(i:si:%memory-read-address ,locative :cycle-type i:sys:%memory-bind-write
				 :set-cdr-next t))
    (('i:si:follow-cell-forwarding locative 't)
     `(i:si:%memory-read-address ,locative
				 :cycle-type i:sys:%memory-data-write :set-cdr-next t))
    (* form)))

(defoptimizer (si:compact-defstorage-accessor compact-defstorage-accessor-optimizer)
	      (form)
  (matchp form
    (('si:compact-defstorage-accessor object options . optional-options)
     (unless (fixnump options)
       (return-from compact-defstorage-accessor-optimizer form))
     (when (si:extended-number-p object)
       (return-from compact-defstorage-accessor-optimizer
	 (eval form compiler:*optimizer-environment*)))
     (labels ((read-word ()
		(if (or optional-options (ldb-test %%defstorage-offset options))
		    `(sys:%memory-read
		       (sys:%pointer-plus
			 ,(if (ldb-test %%defstorage-forwardable options)
			      `(sys:%memory-read-address
				 ,object
				 :cycle-type ,(if (ldb-test %%defstorage-structure options)
						  'sys:%memory-header
						  'sys:%memory-data-read))
			      object)
			 ,(or (car optional-options) (si:defstorage-offset options)))
		       :cycle-type sys:%memory-data-read
		       :fixnum-only ,(or 
				       (ldb-test %%defstorage-fixnum-only options)
				       (ldb-test
					 %%defstorage-check-fixnum-only
					 options))
		       :set-cdr-next ,(not (ldb-test %%defstorage-size options)))
		    `(sys:%memory-read ,object
					 :cycle-type ,(if (ldb-test %%defstorage-structure
								    options)
							  'sys:%memory-header
							  'sys:%memory-data-read)
					 :set-cdr-next ,(not (ldb-test %%defstorage-size
								       options))
					 :fixnum-only ,(or 
							 (ldb-test %%defstorage-fixnum-only
								   options)
							 (ldb-test
							   %%defstorage-check-fixnum-only
							   options))))))
       (if (not (ldb-test %%defstorage-size options))
	   (read-word)
	   (let ((pp (ldb %%defstorage-position options))
		 (ss (ldb %%defstorage-size options)))
	     (if (ldb-test %%defstorage-fixnum-only options)
		 `(%p-ldb (byte ,ss ,pp) (sys:%pointer-plus
					   ,object
					   ,(or (car optional-options)
						(si:defstorage-offset options))))
		 (if (<= (+ pp ss) 32.)
		     `(ldb (byte ,ss ,pp)
			   ,(if (ldb-test %%defstorage-check-fixnum-only options)
				(read-word)
				`(sys:%set-tag ,(read-word) dtp-fixnum)))
		     (if (and (>= pp 32.) (<= (+ pp ss) 40.))
			 `(ldb (byte ,ss ,(- pp 32.)) (sys:%tag ,(read-word)))
			 (error "Illegal byte field for DEFSTORAGE accessor"))))))))
    (* form))) 

(defoptimizer (si:set-compact-defstorage-accessor set-compact-defstorage-accessor-optimizer)
	      (form)
  (matchp form
    (('si:set-compact-defstorage-accessor value object options . optional-options)
     (unless (fixnump options)
       (return-from set-compact-defstorage-accessor-optimizer form))
     (labels ((address-word ()
		(if (or optional-options (ldb-test %%defstorage-offset options))
		    `(sys:%pointer-plus
		       ,(if (ldb-test %%defstorage-forwardable options)
			    `(sys:%memory-read-address
			       ,object
			       :cycle-type ,(if (ldb-test %%defstorage-structure options)
						'sys:%memory-header
						'sys:%memory-data-write))
			    object)
		       ,(or (car optional-options) (si:defstorage-offset options)))
		    (if (ldb-test %%defstorage-forwardable options)
			`(sys:%memory-read-address
			   ,object
			   :cycle-type ,(if (ldb-test %%defstorage-structure options)
					    'sys:%memory-header
					    'sys:%memory-data-write))
			object))))
       (let ((temp (gensym)))
	 `(sys:let-value ,temp ,value
	     ,(if (ldb-test %%defstorage-size options)
		 `(sys:%p-dpb ,temp
				(byte ,(ldb %%defstorage-size options)
				      ,(ldb %%defstorage-position options))
				,(address-word))
		 `(,(if (ldb-test %%defstorage-preserve-cdr-codes options)
			'sys:%p-store-contents
			'sys:%memory-write)
		   ,(address-word)
		   ,temp))))))
    (* form)))

(defoptimizer (i:si:defstorage-accessor defstorage-accessor-optimizer)
	      (form)
  (matchp form
    (('i:si:defstorage-accessor object offset forwardable structure preserve-cdr-codes . rest)
     (declare (ignore preserve-cdr-codes))
     (when (and (si:extended-number-p object)
		(cl:constantp offset compiler:*optimizer-environment*)
		(cl:constantp forwardable compiler:*optimizer-environment*)
		(cl:constantp structure compiler:*optimizer-environment*)
		(loop for arg in rest
		      always (cl:constantp arg compiler:*optimizer-environment*)))
       (return-from defstorage-accessor-optimizer
	 (eval form compiler:*optimizer-environment*)))
     (let ((fixnum-only (first rest))
	   (ss (second rest))
	   (pp (third rest)))
       (labels ((read-word ()
		  (if (eql offset 0)
		      `(i:sys:%memory-read ,object
					   :cycle-type ,(if structure
							    'i:sys:%memory-header
							    'i:sys:%memory-data-read)
					   :set-cdr-next ,(null ss)
					   :fixnum-only ,fixnum-only)
		      `(i:sys:%memory-read
			 (i:sys:%pointer-plus
			   ,(if forwardable
				`(i:sys:%memory-read-address
				   ,object
				   :cycle-type ,(if structure
						    'i:sys:%memory-header
						    'i:sys:%memory-data-read))
				object)
			   ,offset)
			 :cycle-type i:sys:%memory-data-read
			 :fixnum-only ,fixnum-only
			 :set-cdr-next ,(null ss)))))
	 (if (null ss)
	     (read-word)
	     (if (eq fixnum-only t)
		 `(%p-ldb (byte ,ss ,pp) (i:sys:%pointer-plus ,object ,offset))
		 (if (<= (+ pp ss) 32.)
		     `(ldb (byte ,ss ,pp)
			   ,(if fixnum-only
				(read-word)
				`(i:sys:%set-tag ,(read-word) dtp-fixnum)))
		     (if (and (>= pp 32.) (<= (+ pp ss) 40.))
			 `(ldb (byte ,ss ,(- pp 32.)) (i:sys:%tag ,(read-word)))
			 (error "Illegal byte field for DEFSTORAGE accessor"))))))))
    (* form)))

(defoptimizer (i:si:set-defstorage-accessor set-defstorage-accessor-optimizer)
	      (form)
  (matchp form
    (('i:si:set-defstorage-accessor
      value object offset forwardable structure preserve-cdr-codes fixnum-only ss pp)
     (declare (ignore fixnum-only))
     (labels ((address-word ()
		(if (eql offset 0)
		    (if forwardable
			`(i:sys:%memory-read-address
			   ,object
			   :cycle-type ,(if structure
					    'i:sys:%memory-header
					    'i:sys:%memory-data-write))
			object)
		    `(i:sys:%pointer-plus
		       ,(if forwardable
			    `(i:sys:%memory-read-address
			       ,object
			       :cycle-type ,(if structure
						'i:sys:%memory-header
						'i:sys:%memory-data-write))
			    object)
		       ,offset))))
       (let ((temp (gensym)))
	 `(sys:let-value ,temp ,value
	     ,(if (null ss)
		 `(,(if preserve-cdr-codes 'i:sys:%p-store-contents 'i:sys:%memory-write)
		   ,(address-word)
		   ,temp)
		 `(i:sys:%p-dpb ,temp (byte ,ss ,pp) ,(address-word)))))))
    (* form)))

(defoptimizer (cdr cdr-%set-tag-optimizer) (form)
  (matchp form
    ((* ('%set-tag pointer '#.dtp-locative))
     `(%memory-read ,pointer))
    (* form)))

(defoptimizer (car car-%set-tag-optimizer) (form)
  (matchp form
    ((* ('%set-tag pointer tag))
     (if (cl:member tag '(#.dtp-locative #.dtp-list))
	 `(%memory-read ,pointer)
	 form))
    (* form)))

(defun pointer-%set-tag-elidable (pointer tag)
  ;; figure out if the %set-tag for something about to be used as a pointer
  ;; is going to make any difference or not
  (let ((tag-value (and (cl:constantp tag compiler:*optimizer-environment*)
			(lt:evaluate-constant tag compiler:*optimizer-environment*))))
    ;; we can remove a %set-tag if the pointer is not being changed to a physical address
    (and (cl:integerp tag-value)
	 (not (= (ldb i:sys:%%q-type-within-tag tag-value) i:sys:dtp-physical-address))
	 ;; if the pointer was a physical address and it's being changed to a virtual one
	 ;; we can't remove the %set-tag
	 ;; since that can't conceivably be a useful operation, we'll ignore it
	 ;; unless he's rubbing our noses in it
	 (not (and (cl:constantp pointer compiler:*optimizer-environment*)
		   (= (%data-type (lt:evaluate-constant pointer
							compiler:*optimizer-environment*))
		      i:sys:dtp-physical-address))))))

(add-optimizer %memory-read-internal memory-read-%set-tag)

(defun memory-read-%set-tag (form)
  (matchp form
    ((function ('%set-tag pointer tag) bits)
     (if (pointer-%set-tag-elidable pointer tag)
	 `(,function ,pointer ,bits)
	 form))
    (* form)))

(defoptimizer (i:sys:%p-dpb %p-dpb-of-%set-tag-optimizer) (form)
  (matchp form
    (('i:sys:%p-dpb value bytespec ('i:sys:%set-tag pointer tag))
     (when (pointer-%set-tag-elidable pointer tag)
       (return-from %p-dpb-of-%set-tag-optimizer `(i:sys:%p-dpb ,value ,bytespec ,pointer)))))
  form)

(defoptimizer (i:sys:%p-ldb %p-ldb-of-%set-tag-optimizer) (form)
  (matchp form
    (('i:sys:%p-ldb bytespec ('i:sys:%set-tag pointer tag))
     (when (pointer-%set-tag-elidable pointer tag)
       (return-from %p-ldb-of-%set-tag-optimizer `(i:sys:%p-ldb ,bytespec ,pointer)))))
  form)

(defoptimizer (i:sys:%set-tag %set-tag-optimizer) (form)
  (matchp form
    (('i:sys:%set-tag pointer tag)
     (when (and (cl:constantp pointer compiler:*optimizer-environment*)
		(cl:constantp tag compiler:*optimizer-environment*))
       (setf pointer (lt:evaluate-constant pointer compiler:*optimizer-environment*))
       (setf tag (lt:evaluate-constant tag compiler:*optimizer-environment*))
       (when (and (fixnump tag)
		  (zerop (ldb i:sys:%%q-cdr-code-within-tag tag)))
	 (let ((type (ldb i:sys:%%q-type-within-tag tag)))
	   (when (and (cl:member type '(#.i:sys:dtp-fixnum
					#.i:sys:dtp-small-ratio
					#.i:sys:dtp-single-float
					#.i:sys:dtp-physical-address
					#.i:sys:dtp-character))
		      (not (%pointerp pointer)))
	     (return-from %set-tag-optimizer `',(%set-tag pointer tag)))
	   (when (eql type (%data-type pointer))
	     ;; it's already got that tag
	     (return-from %set-tag-optimizer pointer)))))
     (matchp pointer
       (('i:sys:%set-tag internal-pointer internal-tag)
	(return-from %set-tag-optimizer
	  ;; throw away the internal tag
	  `(%set-tag (prog1 ,internal-pointer ,internal-tag) ,tag))))))
  form)

(defoptimizer (i:sys:%tag %tag-optimizer) (form)
  (matchp form
    (('i:sys:%tag ('i:sys:%set-tag pointer tag))
     ;; throw away the pointer
     (return-from %tag-optimizer `(progn ,pointer ,tag))))
  form)

(compiler:define-compile-only-optimizer (cl:getf getf-optimizer) (form)
  (block optimizer
    (compiler:matchp (cl:rest form)
      ((plist indicator . optional-default)
       (when (or (null optional-default)
		 (and (cl:consp optional-default)
		      (null (cl:rest optional-default))))
	 (return-from optimizer
	   (let ((default (car optional-default))
		 (plist-var (gensym))		;gensyms so we don't clutter the disassembly
		 (indicator-var (gensym))
		 (default-var (gensym))
		 (value-var (gensym))
		 (found-p-var (gensym)))
	     (lt:let-subst `(,plist-var ,indicator-var ,default-var)
			   `(,plist ,indicator ,default)
			   `(multiple-value-bind (,value-var ,found-p-var)
				(sys:rgetf ,indicator-var ,plist-var)
			      (if ,found-p-var ,value-var ,default-var))
			   *optimizer-environment*))))))
    form))

;;; Since this is a machine-specific optimizer, it will get run before the
;;; machine-dependent optimizers which come from DEFTEST-KEY-MACRO.
;;;---- Maybe we should follow the letter of CLtL and optimize this into MEMBER.
(defoptimizer (cl:member member-optimizer zl:memq) (form)
  (compiler:matchp (cdr form)
    ((item list . keys-and-args)
     (multiple-value-bind (okay test)
	 (cli::keyword-arguments-defaults-except 'cl:member keys-and-args ':test)
       (when okay
	 (compiler:matchp test
	   (('quote test)
	    (when (eq test 'eq)
	      (return-from member-optimizer `(zl:memq ,item ,list)))))))))
  form)

;;; Since this is a machine-specific optimizer, it will get run before the
;;; machine-dependent optimizers which come from DEFTEST-KEY-MACRO.
;;;---- Maybe we should follow the letter of CLtL and optimize this into ASSOC.
(defoptimizer (cl:assoc assoc-optimizer zl:assq) (form)
  (compiler:matchp (cdr form)
    ((item list . keys-and-args)
     (multiple-value-bind (okay test)
	 (cli::keyword-arguments-defaults-except 'cl:assoc keys-and-args ':test)
       (when okay
	 (compiler:matchp test
	   (('quote test)
	    (when (eq test 'eq)
	      (return-from assoc-optimizer `(zl:assq ,item ,list)))))))))
  form)

(defoptimizer (sys:octet-aref-16 octet-aref-16-constant-offset) (form)
  (compiler:matchp form
    ((ignore array octet-index)
     (when (cl:constantp octet-index compiler:*optimizer-environment*)
       (setf octet-index (lt:evaluate-constant octet-index compiler:*optimizer-environment*))
       (return-from octet-aref-16-constant-offset
	 `(sys:%logldb (byte 16. ,(* 16. (ldb (byte 1 1) octet-index)))
		       (aref ,array ,(si:octet-aref-index octet-index 1)))))))
  form)

(defoptimizer (sys:octet-aref-8 octet-aref-8-constant-offset) (form)
  (compiler:matchp form
    ((ignore array octet-index)
     (when (cl:constantp octet-index compiler:*optimizer-environment*)
       (setf octet-index (lt:evaluate-constant octet-index compiler:*optimizer-environment*))
       (return-from octet-aref-8-constant-offset
	 `(sys:%logldb (byte 8 ,(* 8. (ldb (byte 2 0) octet-index)))
		       (aref ,array ,(si:octet-aref-index octet-index 0)))))))
  form)

(defoptimizer (sys:octet-aset-16 octet-aset-16-constant-offset) (form)
  (compiler:matchp form
    ((ignore value array octet-index)
     (when (cl:constantp octet-index compiler:*optimizer-environment*)
       (setf octet-index (lt:evaluate-constant octet-index compiler:*optimizer-environment*))
       (let ((aref `(aref array ,(si:octet-aref-index octet-index 1))))
	 (return-from octet-aset-16-constant-offset
	   (lt:let-subst '(value array) `(,value ,array)
			 `(progn
			    (setf ,aref
				  (sys:%logdpb value
					       (byte 16. ,(* 16. (ldb (byte 1 1) octet-index)))
					       (let ((element ,aref))
						 (if (fixnump element) element 0))))
			    value)
			 compiler:*optimizer-environment*))))))
  form)

(defoptimizer (sys:octet-aset-8 octet-aset-8-constant-offset) (form)
  (compiler:matchp form
    ((ignore value array octet-index)
     (when (cl:constantp octet-index compiler:*optimizer-environment*)
       (setf octet-index (lt:evaluate-constant octet-index compiler:*optimizer-environment*))
       (let ((aref `(aref array ,(si:octet-aref-index octet-index 0))))
	 (return-from octet-aset-8-constant-offset
	   (lt:let-subst '(value array) `(,value ,array)
			 `(progn
			    (setf ,aref
				  (sys:%logdpb value
					       (byte 8 ,(* 8 (ldb (byte 2 0) octet-index)))
					       (let ((element ,aref))
						 (if (fixnump element) element 0))))
			    value)
			 compiler:*optimizer-environment*))))))
  form)

(compiler:define-compile-only-optimizer (%funcall-in-trap-mode funcall-in-trap-mode-handler)
					(form)
  (compiler:matchp form
    (('%funcall-in-trap-mode trap-mode-form function . args)
     `(cl:multiple-value-call ,function
			      ,@(mapcar #'(lambda (arg) `(values ,arg)) args)
			      (progn ,trap-mode-form
				     (values))))
    (* form)))

(compiler:define-compile-only-optimizer (si:%funcall-in-aux-stack funcall-in-aux-stack-handler)
					(form)
  (compiler:matchp form
    (('si:%funcall-in-aux-stack function . args)
     `(%funcall-in-trap-mode (%set-trap-mode trap-mode-extra-stack) ,function ,@args))
    (* form)))
