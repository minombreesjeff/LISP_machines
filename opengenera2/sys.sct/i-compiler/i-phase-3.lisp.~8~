;;; -*- Mode: Lisp; Package: I-LISP-COMPILER; Lowercase: T; Base: 10  ; Syntax: Zetalisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun no-pop-function (function inverse)
  (selectq function
    (eq 'eq-no-pop)
    (eql 'eql-no-pop)
    (internal-= '=-no-pop)
    (internal-> (if inverse '<-no-pop '>-no-pop))
    (internal-< (if inverse '>-no-pop '<-no-pop))
    (logtest-internal 'logtest-no-pop)
    (type-member-internal (if inverse nil 'type-member-no-pop))
    (%unsigned-lessp (if inverse nil '%unsigned-lessp-no-pop))
    (otherwise nil)))

(def-peep-hole (call call-no-pop-optimizer)
  (when (and (selectq (destination-n-values call-destination)
	       ((1) t)
	       ((nil) (destination-for-return call-destination)))
	     (eql call-n-args 2)
	     call-builtin)
    (let* ((arg2 inst-prev)
	   (arg2-opcode (inst-opcode arg2))
	   (arg1 (inst-prev arg2))
	   (arg1-opcode (inst-opcode arg1)))
      (when (and (eq arg1-opcode 'var)
		 (cl:member arg2-opcode '(var const))
		 (eql (variable-stack-offset
			(var-variable arg1)
			(inst-pre-control-stack-state arg1)
			(var-level arg1))
		      1))
	(let ((no-pop (no-pop-function (function-spec call-function) nil)))
	  (when no-pop
	    (note-optimization compiler:use-no-pop)
	    (delete-inst arg1)
	    (decf (inst-level arg2) 1)
	    (when (eq (inst-opcode arg2) 'var)
	      (decf (var-level arg2)))
	    (when (and (destination-for-return call-destination)
		       (or (null inst-next)
			   (let ((next (next-executable-inst self)))
			     (or (neq (inst-opcode next) 'return)
				 (not (eql (compiler:return-n next) 1))))))
	      (insert-inst
		inst-next
		(compiler:make-return-instruction
		  :return-n 1
		  :inst-source-locator inst-source-locator
		  :inst-level inst-level
		  :inst-pre-control-stack-state inst-pre-control-stack-state
		  :inst-post-control-stack-state inst-post-control-stack-state)))
	    (replace-inst
	      self
	      (make-call-instruction
		:call-function (external-function no-pop)
		:call-n-args 2
		:call-destination *destination-stack-double*
		:call-inline-p 'cl:inline
		:inst-source-locator inst-source-locator
		:inst-level (1- inst-level)
		:inst-pre-control-stack-state inst-pre-control-stack-state
		:inst-post-control-stack-state inst-post-control-stack-state))
	    (return-from call-no-pop-optimizer t))))
      (when (and (eq arg2-opcode 'var)
		 (eql (variable-stack-offset
			(var-variable arg2)
			(inst-pre-control-stack-state arg2)
			(var-level arg2))
		      2))
	(let ((no-pop (no-pop-function (function-spec call-function) t)))
	  (when no-pop
	    (note-optimization compiler:use-no-pop)
	    (delete-inst arg2)
	    (when (and (destination-for-return call-destination)
		       (or (null inst-next)
			   (let ((next (next-executable-inst self)))
			     (or (neq (inst-opcode next) 'return)
				 (not (eql (compiler:return-n next) 1))))))
	      (insert-inst
		inst-next
		(compiler:make-return-instruction
		  :return-n 1
		  :inst-source-locator inst-source-locator
		  :inst-level inst-level
		  :inst-pre-control-stack-state inst-pre-control-stack-state
		  :inst-post-control-stack-state inst-post-control-stack-state)))
	    (replace-inst
	      self
	      (make-call-instruction
		:call-function (external-function no-pop)
		:call-n-args 2
		:call-destination *destination-stack-double*
		:call-inline-p 'cl:inline
		:inst-source-locator inst-source-locator
		:inst-level (1- inst-level)
		:inst-pre-control-stack-state inst-pre-control-stack-state
		:inst-post-control-stack-state inst-post-control-stack-state))
	    (return-from call-no-pop-optimizer t)))))))
