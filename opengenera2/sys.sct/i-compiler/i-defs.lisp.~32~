;;; -*- Mode: Lisp; Package: I-LISP-COMPILER; Lowercase: T; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; This file contains I-machine specific definitions for the Lisp-Compiler

(defvar *call-start-alist* nil)			;Alist of call-starting byte-lap instructions
						; to actual I instructions.
(defvar *default-sequencing* nil)		; {:NORMAL, :PACKED, :ENTRY, NIL} - used by
						; i-assemble-interval in phase-4.
(defvar *variable-creation-alist*)		;Used for generating debugging info

(defvar *max-short-branch-offset* 1_10.)

(defconst *max-offset-for-freevar-insts* 7)

(defvar *all-pc-tags* nil)
(defvar *pc-array-tags* nil)
(defvar *tos-tags*)				;Tags which may be providing TOS

(defvar *first-real-tag*)			;First instruction after entry vector
(defvar *hops*)					;Long branches in entry vector

(defvar *stack-shuffling*)			;Needed for stack shuffling
						;environment assembly

#+IMach
(defvar *forward-references-exist*)		;True if the back end needs to record
						;forward references from this function.

(defvar *last-entry-instruction* nil)		;Last assembled entry instruction

(defvar *needs-lp*)				;Kludge for a pipeline problem

(defvar *kludged-built-ins* '((inverted-ldb . ldb)
			      (inverted-dpb . dpb)
			      (inverted-%p-ldb . sys:%p-ldb)
			      (inverted-%p-dpb . sys:%p-dpb)
			      (inverted-char-ldb . char-ldb)
			      (inverted-char-dpb . char-dpb)
			      (inverted-%make-pointer . %set-tag)
			      (%push-stack-value . push)
			      (%store-instance-variable-ordered
				. sys:pop-instance-variable-ordered)))

;;; The structures below are those used by the list implementation of cco's.
(defstruct (i-abstract-instruction (:type list) :alterant :constructor :conc-name)
  index						;Gets filled in by assemble and modified
						; by branch and sequence fixup.
  opcode
  qualifiers
  operand
  (sequencing :undecided)			;{:ENTRY :UNDECIDED, :NORMAL, :PACKED}
  length
  partner					;Another instruction associated with this one.
  l-pc-index					;Used by the macro-instruction translator
  partner-indices)

(defstruct (i-abstract-operand (:type list) :alterant :constructor :conc-name)
  type						;{LP,FP,SP,IMMEDIATE,BRANCH-OFFSET}
  value						
  (pop? nil)					;Used for SP addressing
  variable-referenced
  spare-4
  spare-3
  spare-2
  spare-1)

(defstruct (i-entry (:type list) :alterant :constructor :conc-name)
  n-required
  n-optional
  rest?
  entry-vector-size
  spare-2
  spare-1)

(defstruct (i-branch-qualifiers (:type list) :alterant :constructor :conc-name)
  condition					;{ALWAYS, TRUE, FALSE}
  pop-condition					;{T, NIL}
  destination					;Will be a byte-lap tag.
  (short-form? nil)
  branch-pop-condition				;{ALWAYS, NEVER, IF-BRANCH, IF-NOT-BRANCH, 
						;  ALWAYS&IF-BRANCH, ALWAYS&IF-NOT-BRANCH,
  spare-1)					;  TWICE} (last 3 are intermediate forms)

(defmacro i-op (type value)
  `(make-i-abstract-operand type ',type value ,value))


;;; Branch and Loop Instructions
(defvar *list-of-BRANCH-instructions* 
	'(BRANCH-TRUE BRANCH-FALSE BRANCH-TRUE-NO-POP BRANCH-FALSE-NO-POP
		      BRANCH-TRUE-ELSE-NO-POP BRANCH-FALSE-ELSE-NO-POP BRANCH-TRUE-AND-NO-POP
		      BRANCH-FALSE-AND-NO-POP BRANCH-TRUE-AND-EXTRA-POP
		      BRANCH-FALSE-AND-EXTRA-POP BRANCH-TRUE-ELSE-EXTRA-POP
		      BRANCH-FALSE-ELSE-EXTRA-POP))

(defvar *list-of-RETURN-instructions* '(RETURN-SINGLE RETURN-MULTIPLE RETURN-KLUDGE))

(defvar *list-of-DTP-CALLs*
	'(DTP-CALL-COMPILED-EVEN DTP-CALL-COMPILED-ODD
				 DTP-CALL-INDIRECT DTP-CALL-GENERIC))

(defvar *list-of-DTP-CALL-PREFETCHs*
	'(DTP-CALL-COMPILED-EVEN-PREFETCH DTP-CALL-COMPILED-ODD-PREFETCH
	      DTP-CALL-INDIRECT-PREFETCH DTP-CALL-GENERIC-PREFETCH))

(defvar *call-starters*
	(list i:sys:dtp-call-compiled-even i:sys:dtp-call-compiled-even-prefetch
	      i:sys:dtp-call-compiled-odd i:sys:dtp-call-compiled-odd-prefetch
	      i:sys:dtp-call-indirect i:sys:dtp-call-indirect-prefetch
	      i:sys:dtp-call-generic i:sys:dtp-call-generic-prefetch))

;;; This is all temporary, still
(DEFSTRUCT (I-COMPILED-FUNCTION
	     :NAMED :CONC-NAME :SIZE-SYMBOL
	     (:MAKE-ARRAY (:INITIAL-VALUE 0)))
 ;;The first header word, with DTP-HEADER-I, %HEADER-TYPE-COMPILED-FUNCTION
 ((TOTAL-SIZE (BYTE 18. 0))	;Number of words total
  (SUFFIX-SIZE (BYTE 14. 18.)))
 ;;The third header word; points to the compiled-code array/list the
 ;; function cell of the symbol that names the function can be relocated
 ;; to here to optimize working-set size.
 (FUNCTION-CELL)
 ;; These next two include the suffix.
 (INSTRUCTIONS-TAGS)
 (INSTRUCTIONS-DATA))

;;; This stuff really belongs in SYSDEF - maybe SI:DEFSTORAGE needs to be smarter.
(defconst symbol-value-cell-offset 1)

;;; Ditto
(defstruct (i-tag :conc-name (:type :fixnum))
  ((type (byte 6 0))
   (packed-instruction-bits (byte 2 4))
   (cdr-code (byte 2 6))))

(defstruct (i-instruction-bits (:conc-name i-inst-) (:type :fixnum))
  ((10-bit-immediate-operand (byte 10. 0))
   (offset (byte 8 0))
   (pointer (byte 2 8))
   (opcode (byte 8 10.))))

(defvar *immediate-operand-types* '(entry signed unsigned 10-bit-immediate
				    12-bit-unsigned-immediate cl:byte relative-pc))

;;; Ditto
(defstruct (i-odd-half-word-instruction :conc-name (:type :fixnum))
  ((data-field-bits (byte 14. 0))
   (tag-field-bits (byte 4 14.))))

(defstruct (finish-call-n-operand (:type :fixnum) (:conc-name finish-call-))
  ((n-args-+1 (byte 8 0))
   (disposition (byte 2 8))))

(defstruct (catch-open-operand :conc-name (:type :fixnum))
  ((unwind-protect-p (byte 1 0))
   ;(ignore (byte 5 1))
   (value-disposition (byte 2 6))
   ;(ignore (byte 2 8))
   ))

(defmacro value-disposition-number (compiler-destination)
  `(cl:ecase ,compiler-destination
     ((0) i:sys:value-disposition-effect)
     ((1):sys:value-disposition-value)
     ((return) i:sys:value-disposition-return)
     ((multiple) i:sys:value-disposition-multiple)))


(defvar *local-modification-functions* '(1+local 1-local car-local cdr-local %pointer-increment))

;;; The following predicates can be optimized into -NO-POP (but so can TYPE-MEMBER above).
;;; This is used in the VAR I-peep-hole-optimizer in Phase 4.
(defvar *non-type-member-optimizable-preds*
	'(eq eql internal-= internal-< internal-> endp %unsigned-lessp
	     plusp minusp zerop logtest))

;;; Used by I-PHASE-1-HOOKS, and BACK-END
(defun convert-l-to-i-byte-specifier (value load-instruction-p)
  (declare (values i-byte-specifier))
  ;; See section 3.1.1.2 of the spec (p. 68 of rev 1)
  (let ((pp (ldb (byte 6 6) value))
	(ss (ldb (byte 6 0) value)))
    (dpb (1- ss) (byte 5 5)
	 (if load-instruction-p
	     (- 32. pp)
	     pp))))


;;; Type conversion stuff - this should really be generic 

;;; This builds the L-machine data type to I-machine data-type table.  All of the 
;;; straightforward mappings between L and I are made here, even if such a mapping
;;; requires a name-change.  Those that have more complicated mappings must be handled
;;; at run time; consequently, these are handled by FETCH-I-DATA-TYPE-FIXNUM below.
#+3600
(defun build-l-to-i-data-type-table ()
  (loop for l-element in l:sys:*data-types*
	for i-name-equivalent =	(selectq l-element
				  (l:sys:dtp-fix 'i:sys:dtp-fixnum)
				  (l:sys:dtp-float 'i:sys:dtp-single-float)
				  (l:sys:dtp-closure 'i:sys:dtp-dynamic-closure)
				  (t (cl:find-symbol (get-pname l-element) "ISYSTEM")))
	for i-data-type-fixnum			;can't SYMEVAL here: it'd puke on funny names
	    = (find-position-in-list i-name-equivalent i:sys:*data-types*)
	for i from 0
	with table = (make-array 64.)
	do (aset i-data-type-fixnum table i)	;if NIL, handle in FETCH-I-DATA-TYPE-FIXNUM
	finally (return table)))

#+3600
(defvar *l-to-i-data-type-table* (build-l-to-i-data-type-table))

;;; Given an OBJECT, this returns the I-data-type of that object in fixnum form; i.e., if you
;;; desire the NAME of the I-data-type, just do 
;;;
;;;       (nth (fetch-I-data-type-fixnum object) i:sys:*data-types*)
;;;
#+3600
(defun fetch-i-data-type-fixnum (operand)
  (let* ((low-level-type-fixnum (%data-type operand))
	 (i-data-type-fixnum (aref *l-to-i-data-type-table* low-level-type-fixnum)))
    (if (eql i-data-type-fixnum i:sys:dtp-array)
	(if (stringp operand)
	    i:sys:dtp-string
	    i:sys:dtp-array)	;special handling for strings
	(or i-data-type-fixnum			;i.e., a direct (non-array) mapping exists
	    (if (eql low-level-type-fixnum l:sys:dtp-extended-number)
		(typecase operand
		  (:bignum i:sys:dtp-bignum)
		  (:rational (if (and ( (haulong (numerator operand)) 16.)
				     ( (haulong (denominator operand)) 16.))
				i:sys:dtp-small-ratio
				i:sys:dtp-big-ratio))
		  (:complex i:sys:dtp-complex)
		  (:double-float i:sys:dtp-double-float))
		(ferror "Unknown mapping for data type ~S of operand ~S"
			(nth low-level-type-fixnum l:sys:*data-types*) operand))))))

;;; From macros.lisp
(defmacro deftransformer ((victim name . into) . body)
  `(progn 'compile
	  (defun ,name . ,body)
	  (add-transformer ',victim ',name . ,(mapcar #'(lambda (x) `',x) into))
	  ',name))

(defmacro defoptimizer ((victim name . into) arg-list &body body)
  `(progn (record-source-file-name ',victim 'defoptimizer)
	  (defun ,name ,arg-list
		 (declare (sys:function-parent ,victim defoptimizer))
	    ,@body)
	  (add-optimizer-internal ',victim ',name ',into)
	  ',name))

(defmacro add-optimizer (target-function optimizer-name &rest optimized-into)
  `(add-optimizer-internal ',target-function ',optimizer-name ',optimized-into))

;For patching
(defmacro delete-optimizer (target-function optimizer-name &rest optimized-into)
  `(delete-optimizer-internal ',target-function ',optimizer-name ',optimized-into))

(defmacro delete-transformer (target-function transformer-name &rest optimized-into)
  `(delete-transformer-internal ',target-function ',transformer-name ',optimized-into))

(defmacro def-peep-hole ((victim name) &body body)
  `(progn (record-source-file-name ',victim 'def-peep-hole)
	  (definst-method (,name ,victim) ()
	    (declare (sys:function-parent ,victim def-peep-hole))
	    ,@body)
	  (add-peep-hole-internal ',victim ',name)
	  ',name))

(defmacro add-peep-hole (target-function peep-hole-name)
  `(add-peep-hole-internal ',target-function ',peep-hole-name))

(defmacro delete-peep-hole (target-function peep-hole-name)
  `(delete-peep-hole-internal ',target-function ',peep-hole-name))
