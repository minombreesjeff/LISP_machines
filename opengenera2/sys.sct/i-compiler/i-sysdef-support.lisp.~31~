;;; -*- Mode:Lisp; Package:I-lisp-Compiler; Base:8; Syntax: Zetalisp -*-
;;; I Machine System data representation definitions -- support routines
;;; used by the compiler to load SYSDEF into the SYSTEM package.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; NOTE: The functions in this file have equivalents in the cold load generator.  If you
;;; change something here, you might check there.

(DEFMACRO SYS:VMA=PMA (ADDRESS)
  (%LOGDPB %VMA-EQUALS-PMA %%VMA-EQUALS-PMA ADDRESS))

(DEFUN SYSDEF-EVAL (VALUE ENV)
  (SETF VALUE (MACROEXPAND VALUE ENV))
  (IF (ATOM VALUE)
      (LT:EVALUATE-CONSTANT VALUE ENV)
      (LET ((FUN (GET-PNAME (FIRST VALUE))))
	(SELECTOR FUN STRING-EQUAL
	  ("QUOTE"
	   (SECOND VALUE))
	  (("DPB" "LDB" "+" "-" "*" "//" "1-" "1+" "LSH" "\" "^" "EXPT"
	    "LOGIOR" "LOGAND" "LOGNOT" "BOOLE" "HAULONG" "BYTE")
	   (APPLY (FSYMEVAL (INTERN FUN "GLOBAL"))
		  (MAPCAR #'(LAMBDA (X) (SYSDEF-EVAL X ENV))
			  (REST1 VALUE))))
	  (("%LOGDPB" "%LOGLDB")
	   (APPLY (FSYMEVAL (INTERN FUN "SYSTEM"))
		  (MAPCAR #'(LAMBDA (X) (SYSDEF-EVAL X ENV))
			  (REST1 VALUE))))
	  (T
	    (FERROR "Cannot evaluate ~S" VALUE))))))

(DEFCONST *SYSDEF-PACKAGE* (PKG-FIND-PACKAGE "SYSTEM"))

(DEFUN SYSDEF-INTERN (STRING)
  (INTERN STRING *SYSDEF-PACKAGE*))



;;; SYSDEF stuff

;;; (defsysconstant name value)
(DEFMACRO SYSTEM:DEFSYSCONSTANT (NAME VALUE &ENVIRONMENT ENV)
  `(PROGN
     (DEFPROP ,NAME T :SYSTEM-CONSTANT)
     (DEFCONSTANT ,NAME ',(SYSDEF-EVAL VALUE ENV))))

;;; (defsysbyte name number-of-bits right-hand-bit-number)
(DEFMACRO SYSTEM:DEFSYSBYTE (NAME N-BITS BITS-OVER &ENVIRONMENT ENV)
  (SETQ N-BITS (SYSDEF-EVAL N-BITS ENV))
  (SETQ BITS-OVER (SYSDEF-EVAL BITS-OVER ENV))
  `(PROGN
     (EVAL-WHEN (COMPILE)
       (COMPILER:FILE-DECLARE ',NAME 'SYSTEM:DEFSYSBYTE '(,N-BITS ,BITS-OVER)))
     (DEFPROP ,NAME (,N-BITS ,BITS-OVER) SYSTEM:DEFSYSBYTE)	;Allows open-coding with subprimitives
     (SYSTEM:DEFSYSCONSTANT ,NAME (BYTE ,N-BITS ,BITS-OVER))))

;;; (defenumerated list-name (names...) [starting-value] [increment] [endingvalue])
;;;	starting-value defaults 0, increment to 1
;;;	If endingvalue is supplied, it is error-checked
(DEFMACRO SYSTEM:DEFENUMERATED (LIST-NAME CODE-LIST &OPTIONAL (START 0) (INCREMENT 1) END)
  (WHEN (AND END ( (LENGTH CODE-LIST) (// (- END START) INCREMENT)))
    (FERROR "~S has ~S codes where ~S are required"
	    LIST-NAME (LENGTH CODE-LIST) (// (- END START) INCREMENT)))
  `(PROGN
     (DEFCONST ,LIST-NAME ',CODE-LIST)
     ,@(LOOP FOR CODE IN CODE-LIST AND PREV = 0 THEN CODE
	     AS VALUE FROM START BY INCREMENT
	     UNLESS (EQ CODE PREV)		;Kludge for data-types
	       COLLECT `(SYSTEM:DEFSYSCONSTANT ,CODE ,VALUE))))

(DEFMACRO SYS:DEFSTORAGE ((STRUCTURE-NAME
			    &KEY
			    (STRUCTURE T)
			    (FORWARDABLE T)
			    (BACKWARDS NIL)
			    (REFERENCE-OFFSET 0)
			    (INCLUDE NIL)
			    (DEFAULT-POINTER NIL)
			    (PRESERVE-CDR-CODES T)
			    (FIXNUM-ONLY NIL)
			    (PHYSICAL NIL))
			  &BODY FIELDS)
  (WHEN (AND (OR PHYSICAL FIXNUM-ONLY)
	     (OR STRUCTURE FORWARDABLE))
    (ERROR ":PHYSICAL or :FIXNUM-ONLY can not be specified with :STRUCTURE or :FORWARDABLE"))
  (LABELS ((DEFINE-FIELD (FIELD OFFSET)
	     (DESTRUCTURING-BIND (NAME &OPTIONAL SS PP) FIELD
	       (LET ((FULL-OFFSET (WHEN ( (SI:DEFSTORAGE-OFFSET
					     (%LOGDPB OFFSET %%DEFSTORAGE-OFFSET 0))
					   OFFSET)
				    OFFSET)))
		   `(PROGN
		  (DEFMACRO ,NAME ,(IF DEFAULT-POINTER
				       `(&OPTIONAL (SI:OBJECT ',DEFAULT-POINTER))
				       `(SI:OBJECT))
		    (DECLARE (SYS:FUNCTION-PARENT ,STRUCTURE-NAME SYS:DEFSTORAGE))
		    `(SI:COMPACT-DEFSTORAGE-ACCESSOR
		       ,SI:OBJECT
		       ,,(%LOGDPBS (IF STRUCTURE 1 0) %%DEFSTORAGE-STRUCTURE
				   (IF FORWARDABLE 1 0) %%DEFSTORAGE-FORWARDABLE
				   (IF PRESERVE-CDR-CODES 1 0) %%DEFSTORAGE-PRESERVE-CDR-CODES
				   (IF (EQ FIXNUM-ONLY T) 1 0) %%DEFSTORAGE-FIXNUM-ONLY
				   (IF (EQ FIXNUM-ONLY :CHECK) 1 0)
				     %%DEFSTORAGE-CHECK-FIXNUM-ONLY
				   (IF PHYSICAL 1 0) %%DEFSTORAGE-PHYSICAL
				   (IF FULL-OFFSET 0 OFFSET) %%DEFSTORAGE-OFFSET
				   (OR PP 0) %%DEFSTORAGE-POSITION
				   (OR SS 0))
		       ,,@(WHEN FULL-OFFSET `(,FULL-OFFSET))))
		  ,@(WHEN SS
		      `((SYS:DEFSYSBYTE ,NAME ,SS ,PP)))))))
	   (DEFINE-FIELDS (FIELD WORD)
	     (COND ((NULL FIELD))		;nothing in this word
		   ((LISTP FIELD)		;field or list of fields
		    (IF (LISTP (CAR FIELD))
			(CONS 'PROGN (LOOP FOR SUBFIELD IN FIELD
					   COLLECT
					     (DEFINE-FIELDS SUBFIELD WORD)))
			(DEFINE-FIELD FIELD WORD)))
		   (T
		    (DEFINE-FIELD (LIST FIELD) WORD)))))
    (CHECK-ARG FIXNUM-ONLY (MEMBER FIXNUM-ONLY '(T NIL :CHECK)) "One of T, NIL, or :CHECK")
    (LET ((INCREMENT (IF BACKWARDS -1 1))
	  (N-FIELDS (LENGTH FIELDS)))
      (WHEN (NOT (NULL INCLUDE))
	(WHEN ( REFERENCE-OFFSET 0)
	  (FERROR "Can't grok both :REFERENCE-OFFSET and :INCLUDE options"))
	(SETQ REFERENCE-OFFSET 
	      (OR (COMPILER:FILE-DECLARATION INCLUDE 'SYSTEM:DEFSTORAGE-SIZE)
		  (GET INCLUDE 'SYSTEM:DEFSTORAGE-SIZE)
		  (FERROR "~S is not the name of a SYSDEF structure" INCLUDE)))
	(INCF N-FIELDS REFERENCE-OFFSET))
      `(PROGN
	 (EVAL-WHEN (COMPILE)
	   (COMPILER:FILE-DECLARE ',STRUCTURE-NAME 'SYS:DEFSTORAGE-SIZE ,N-FIELDS))
	 (RECORD-SOURCE-FILE-NAME ',STRUCTURE-NAME 'SYS:DEFSTORAGE T)
	 (SETF (GET ',STRUCTURE-NAME 'SYS:DEFSTORAGE-SIZE) ,N-FIELDS)
	 ,@(LOOP FOR FIELD IN FIELDS
		 FOR WORD FROM REFERENCE-OFFSET BY INCREMENT
		 COLLECT (DEFINE-FIELDS FIELD WORD))))))

;;; Old, obsolete version
;(DEFMACRO SYS:DEFSTORAGE ((STRUCTURE-NAME
;			    &KEY
;			    (STRUCTURE T)
;			    (FORWARDABLE T)
;			    (BACKWARDS NIL)
;			    (REFERENCE-OFFSET 0)
;			    (INCLUDE NIL)
;			    (DEFAULT-POINTER NIL)
;			    (PRESERVE-CDR-CODES T)
;			    (FIXNUM-ONLY NIL))
;			  &BODY FIELDS)
;  (LABELS ((DEFINE-FIELD (FIELD OFFSET)
;	     (DESTRUCTURING-BIND (NAME &OPTIONAL SS PP) FIELD
;	       (IF (NULL SS)
;		   `(DEFMACRO ,NAME ,(IF DEFAULT-POINTER
;					 `(&OPTIONAL (SI:OBJECT ',DEFAULT-POINTER))
;					 `(SI:OBJECT))
;		      (DECLARE (SYS:FUNCTION-PARENT ,STRUCTURE-NAME SYS:DEFSTORAGE))
;		      `(SI:DEFSTORAGE-ACCESSOR ,SI:OBJECT ,,OFFSET
;			 ,,FORWARDABLE ,,STRUCTURE ,,PRESERVE-CDR-CODES ,,FIXNUM-ONLY))
;		   `(PROGN
;		      (SYS:DEFSYSBYTE ,NAME ,SS ,PP)
;		      (DEFMACRO ,NAME ,(IF DEFAULT-POINTER
;					   `(&OPTIONAL (SI:OBJECT ',DEFAULT-POINTER))
;					   `(SI:OBJECT))
;			(DECLARE (SYS:FUNCTION-PARENT ,STRUCTURE-NAME SYS:DEFSTORAGE))
;			`(SI:DEFSTORAGE-ACCESSOR ,SI:OBJECT ,,OFFSET
;			   ,,FORWARDABLE ,,STRUCTURE ,,PRESERVE-CDR-CODES ,,FIXNUM-ONLY
;			   ,,SS ,,PP))))))
;	   (DEFINE-FIELDS (FIELD WORD)
;	     (COND ((NULL FIELD))		;nothing in this word
;		   ((LISTP FIELD)		;field or list of fields
;		    (IF (LISTP (CAR FIELD))
;			(CONS 'PROGN (LOOP FOR SUBFIELD IN FIELD
;					   COLLECT
;					     (DEFINE-FIELDS SUBFIELD WORD)))
;			(DEFINE-FIELD FIELD WORD)))
;		   (T
;		    (DEFINE-FIELD (LIST FIELD) WORD)))))
;    (CHECK-ARG FIXNUM-ONLY (MEMBER FIXNUM-ONLY '(T NIL :CHECK)) "One of T, NIL, or :CHECK")
;    (LET ((INCREMENT (IF BACKWARDS -1 1))
;	  (N-FIELDS (LENGTH FIELDS)))
;      (WHEN (NOT (NULL INCLUDE))
;	(WHEN ( REFERENCE-OFFSET 0)
;	  (FERROR "Can't grok both :REFERENCE-OFFSET and :INCLUDE options"))
;	(SETQ REFERENCE-OFFSET 
;	      (OR (COMPILER:FILE-DECLARATION INCLUDE 'SYSTEM:DEFSTORAGE-SIZE)
;		  (GET INCLUDE 'SYSTEM:DEFSTORAGE-SIZE)
;		  (FERROR "~S is not the name of a SYSDEF structure" INCLUDE)))
;	(INCF N-FIELDS REFERENCE-OFFSET))
;      `(PROGN
;	 (EVAL-WHEN (COMPILE)
;	   (COMPILER:FILE-DECLARE ',STRUCTURE-NAME 'SYS:DEFSTORAGE-SIZE ,N-FIELDS))
;	 (RECORD-SOURCE-FILE-NAME ',STRUCTURE-NAME 'SYS:DEFSTORAGE T)
;	 (SETF (GET ',STRUCTURE-NAME 'SYS:DEFSTORAGE-SIZE) ,N-FIELDS)
;	 ,@(LOOP FOR FIELD IN FIELDS
;		 FOR WORD FROM REFERENCE-OFFSET BY INCREMENT
;		 COLLECT (DEFINE-FIELDS FIELD WORD))))))

(DEFMACRO SYSTEM:DEFSTORAGE-SIZE (STRUCTURE-NAME)
  (CL:CHECK-TYPE STRUCTURE-NAME CL:SYMBOL)
  (OR (COMPILER:FILE-DECLARATION STRUCTURE-NAME 'SYSTEM:DEFSTORAGE-SIZE)
      (GET STRUCTURE-NAME 'SYSTEM:DEFSTORAGE-SIZE)
      (FERROR "~S not the name of a SYSDEF structure" STRUCTURE-NAME)))

(DEFMACRO SYSTEM:DEFSTORAGE-FIELD-BYTE (FIELD-NAME &ENVIRONMENT ENV)
  (CL:CHECK-TYPE FIELD-NAME CL:SYMBOL)
  (CHECK-ARG FIELD-NAME (OR (COMPILER:FILE-DECLARATION FIELD-NAME 'SYSTEM:DEFSYSBYTE)
			    (GET FIELD-NAME 'SYSTEM:DEFSYSBYTE))
	     "a byte field in a SYSDEF structure")
  (SYSDEF-EVAL FIELD-NAME ENV))

(DEFMACRO SYSTEM:DEFSYSBYTE-LIMIT-VALUE (BYTE-NAME &ENVIRONMENT ENV)
  (DEFSYSBYTE-LIMIT-VALUE-FUNCTION BYTE-NAME ENV))

(DEFMACRO SYSTEM:DEFSYSBYTE-ONES (BYTE-NAME &ENVIRONMENT ENV)
  (1- (DEFSYSBYTE-LIMIT-VALUE-FUNCTION BYTE-NAME ENV)))

(DEFUN DEFSYSBYTE-LIMIT-VALUE-FUNCTION (BYTE-NAME ENV)
  (CL:CHECK-TYPE BYTE-NAME CL:SYMBOL)
  (CHECK-ARG BYTE-NAME (OR (COMPILER:FILE-DECLARATION BYTE-NAME 'SYSTEM:DEFSYSBYTE)
			   (GET BYTE-NAME 'SYSTEM:DEFSYSBYTE))
	     "a byte field in a SYSDEF structure")
  (ASH 1 (BYTE-SIZE (SYSDEF-EVAL BYTE-NAME ENV))))

(DEFMACRO DEFINE-ADDRESS-SPACE (&BODY SPECS)
  (FLET ((FINTERN (STRING &REST REST)
	   (LET ((PNAME (CL:APPLY #'FORMAT NIL STRING REST)))
	     (SYSDEF-INTERN PNAME))))
    `(PROGN 
       ,@(LOOP FOR ((WIDTH OFFSET) (NAME NAMES) OUTER . OPTIONS) IN SPECS
	       WHEN NAMES ;; If plural not specified, don't generate count.
		 COLLECT
		   `(DEFSYSCONSTANT ,(FINTERN "%NUMBER-OF-~A" NAMES) ,(LSH 1 WIDTH))
	       COLLECT
		 `(DEFSYSBYTE ,(IF (STRING-SEARCH #\- NAME)
				   (FINTERN "%%VMA-~A" NAME)
				   (FINTERN "%%VMA-~A-NUM" NAME))
			      ,WIDTH ,OFFSET)
	       UNLESS (MEMBER :NO-SIZE OPTIONS)
		 COLLECT
		   `(DEFSYSCONSTANT ,(FINTERN "%ADDRESS-SPACE-~A-SIZE" NAME) ,(LSH 1 OFFSET))
	       WHEN OUTER
		 COLLECT
		   `(PROGN
		      (DEFSYSBYTE ,(FINTERN "%%WORD-WITHIN-~A" NAME)	;Yes, NAME!
				  ,OFFSET 0)
		      ,@(LOOP FOR ((IWIDTH IOFFSET) (INNER) NIL . IOPTIONS) IN SPECS
			      WHEN (AND (NEQ NAME INNER)
					(< OFFSET IOFFSET))
				APPEND
				  `((DEFSYSBYTE ,(IF (STRING-SEARCH #\- INNER)
						     (FINTERN "%%~A-~A" OUTER INNER)
						     (FINTERN "%%~A-~A-NUM" OUTER INNER))
						,IWIDTH ,(- IOFFSET OFFSET))
				    ,@(UNLESS (MEMBER :NO-WITHIN IOPTIONS)
					`((DEFSYSBYTE ,(FINTERN "%%~A-WITHIN-~A" NAME INNER)
						      ,(- IOFFSET OFFSET) 0)))
				    ,@(UNLESS (OR (NULL NAMES) (MEMBER :NO-SIZE IOPTIONS))
					`((DEFSYSCONSTANT
					    ,(FINTERN "%~A-SIZE-IN-~A" INNER NAMES)
					    ,(LSH 1 (- IOFFSET OFFSET))))))))))))

(DEFMACRO DEFSYSBYTE-SYNONYM (NAME SYNONYM)
  (CL:CHECK-TYPE NAME CL:SYMBOL)
  (CL:CHECK-TYPE SYNONYM CL:SYMBOL)
  (LET ((SYNONYM-BYTE
	  (OR (COMPILER:FILE-DECLARATION SYNONYM 'SYSTEM:DEFSYSBYTE)
	      (GET SYNONYM 'SYSTEM:DEFSYSBYTE))))
    (UNLESS SYNONYM-BYTE (ERROR "~S not the name of a SYSDEF byte" SYNONYM))
    `(DEFSYSBYTE ,NAME ,@SYNONYM-BYTE)))

;;; SYSDF1 stuff

(DEFMACRO SYS:DEFINE-MAGIC-LOCATIONS ((NAME &REST OPTIONS) &BODY VARIABLES)
  `(PROGN
     ,@(LOOP FOR VARIABLE IN VARIABLES
	     WHEN (SYMBOLP VARIABLE)
	       COLLECT `(DEFVAR ,VARIABLE))
     (SI:DEFINE-MAGIC-LOCATIONS-1 ',NAME ',OPTIONS ',VARIABLES)))

(DEFUN SI:DEFINE-MAGIC-LOCATIONS-1 (NAME OPTIONS VARIABLES)
  (LET ((ENTRY (OR (ASSQ NAME *MAGIC-LOCATIONS*)
		   (ERROR "Magic block ~A not found." NAME)))
	(LENGTH (LENGTH VARIABLES)))
    (SCL:DESTRUCTURING-BIND (NIL ADDRESS END &REST ENTRIES) ENTRY
      (LET ((NEW-ADDRESS NIL)
	    (NEW-SIZE NIL))
	(LOOP FOR (OPTION VALUE) ON OPTIONS BY 'CDDR DO
	  (CL:ECASE OPTION
	    (:VIRTUAL-ADDRESS
	      (SETF NEW-ADDRESS (%MAKE-POINTER DTP-LOCATIVE VALUE)))
	    (:PHYSICAL-ADDRESS
	      (SETF NEW-ADDRESS
		    (%MAKE-POINTER DTP-LOCATIVE
				   (%LOGDPB %VMA-EQUALS-PMA %%VMA-EQUALS-PMA VALUE))))
	    (:SIZE
	      (SETF NEW-SIZE VALUE))))
	(UNLESS (<= (%POINTER-DIFFERENCE END ADDRESS) LENGTH NEW-SIZE)
	  (ERROR "Too many or too few variables."))
	(UNLESS (= (%POINTER-DIFFERENCE ADDRESS NEW-ADDRESS) 0)
	  (ERROR "Block ~A address is not the same." NAME)))
      (LET ((NEW-VENTRIES (REDEFINE-MAGIC-LOCATIONS ADDRESS VARIABLES ENTRIES)))
	(SETF (THIRD ENTRY) (%POINTER-PLUS ADDRESS LENGTH))
	(SETF (NTHCDR 3 ENTRY) NEW-VENTRIES)))))

(DEFUN REDEFINE-MAGIC-LOCATIONS (ADDRESS VARIABLES OLD-VENTRIES)
  (LOOP FOR VAR IN VARIABLES
	FOR VENTRY = (POP OLD-VENTRIES)
	FOR LOC FIRST ADDRESS THEN (%POINTER-PLUS LOC 1)
	DO
    (MULTIPLE-VALUE-BIND (TYPE VAL SLOC)
	(CL:ETYPECASE VAR
	  (CL:SYMBOL
	    (VALUES :VARIABLE VAR (LOCF (CL:SYMBOL-VALUE VAR))))
	  (CL:CONS
	    (SCL:DESTRUCTURING-BIND (TYPE VAL) VAR
	      (CL:ECASE TYPE
		((SYS:QUOTE)
		 (VALUES :QUOTE VAL NIL))
		((SYS:FUNCTION)
		 (VALUES :FUNCTION VAL (LOCF (CL:SYMBOL-FUNCTION VAL))))))))
      (COND ((NULL VENTRY)
	     (SETF VENTRY (LIST TYPE VAL))
	     (CL:CASE TYPE
	       ((:QUOTE)
		(COND ((NOT (LOCATION-BOUNDP LOC))
		       (SETF (LOCATION-CONTENTS LOC) VAL))
		      ((NOT (EQL VAL (LOCATION-CONTENTS LOC)))
		       (ERROR "QUOTE value not the same."))))
	       ((:VARIABLE :FUNCTION)
		(COND ((NOT (= (SYS:%P-DATA-TYPE SLOC) SYS:DTP-ONE-Q-FORWARD))
		       (SI:%P-COPY-Q SLOC LOC)
		       (SYS:%P-STORE-TAG-AND-POINTER SLOC SYS:DTP-ONE-Q-FORWARD LOC))
		      ((NOT (EQ LOC (FOLLOW-CELL-FORWARDING SLOC NIL)))
		       (ERROR "Cell already forwarded."))))))			    
	    ((NOT (EQUAL VENTRY (LIST TYPE VAL)))
	     (ERROR "Entry ~S doesn't match." VAR))))
	COLLECT VENTRY))

(DEFMACRO DEFINE-INTERNAL-REGISTERS (&BODY FORMS)
  (LET ((PROGN-FORMS)
	(CONSTANTS (CL:MAKE-HASH-TABLE)))
    (LABELS ((RECORD-REGISTER (NAME ADDRESS READ WRITE)
	       (LET ((OLD-DEF (GETHASH NAME CONSTANTS)))
		 (COND ((NULL OLD-DEF)
			(SETF (GETHASH NAME CONSTANTS) ADDRESS)
			(PUSH `(SYSTEM:DEFSYSCONSTANT ,NAME ,ADDRESS) PROGN-FORMS))
		       ((NOT (EQL OLD-DEF ADDRESS))
			(ERROR "Inconsistent register definitions."))))
	       (WHEN READ
		 (PUSH `(SETF (AREF SYS:*INTERNAL-READABLE-REGISTER-MAP* ,ADDRESS) ',NAME)
		       PROGN-FORMS))
	       (WHEN WRITE
		 (PUSH `(SETF (AREF SYS:*INTERNAL-WRITABLE-REGISTER-MAP* ,ADDRESS) ',NAME)
		       PROGN-FORMS)))
	     (RECORD-REGISTERS (FORM START READ WRITE)
	       (LOOP FOR NAME IN FORM AND ADDRESS FROM START DOING
		 (TYPECASE NAME
		   (:NULL)
		   (:SYMBOL (RECORD-REGISTER NAME ADDRESS T T))
		   (:LIST
		     (LOOP FOR BLOCK FROM 0 TO 3 AND NAME IN NAME DOING
		       (RECORD-REGISTER NAME (DPB BLOCK (BYTE 2 7) ADDRESS) READ WRITE)))))))
      (LOOP FOR FORM IN FORMS DOING
	(CL:ECASE (CAR FORM)
	  (:SCRATCHPAD-REGISTERS (RECORD-REGISTERS (CDR FORM) #o1000 T T))
	  (:READABLE-EXTERNAL-REGISTERS (RECORD-REGISTERS (CDR FORM) 0 T NIL))
	  (:WRITABLE-EXTERNAL-REGISTERS (RECORD-REGISTERS (CDR FORM) 0 NIL T))))
      `(PROGN ,@PROGN-FORMS))))
