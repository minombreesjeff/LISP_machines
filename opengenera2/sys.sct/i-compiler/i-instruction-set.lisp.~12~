;;; -*- Mode: Lisp; Package: I-LISP-COMPILER; Lowercase: T; Base: 8; -*-
;;; This file contains the data base holding the definition of the
;;; I-machine instruction set.  It is used by the compiler and the disassembler.
;;; The data base is actually generated from the OPDEF file.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; The Opdef file is read into the I-Compiler package, so that function names
;;; it contains are interned in the proper environment.  However, stuff in
;;; there that the compiler needs gets brought over to the compiler's own package.
(defconst *ilc-package* package)
(defconst *i-system-package* (pkg-find-package #-IMACH "ISystem" #+IMACH "System"))
(defun ilc-intern (symbol)
  (intern (get-pname symbol) *ilc-package*))

;;; This array is indexed by universal opcode.  It holds a symbol which names the instruction.
(defconstant *number-of-instructions* 256.)
(defmacro make-i-array () `(make-array *number-of-instructions* :area permanent-storage-area))
(defvar *instruction-name* (make-i-array))
(defvar *instruction-*name* (make-i-array))
(defvar *instruction-format* (make-i-array))
(defvar *instruction-attributes* (make-i-array))
(defvar *instruction-function-name* (make-i-array))

(defvar *built-in-functions* nil)	;List of them, for removal purposes

;;; Define a new opcode.  This is the special form used by the OPDEFS file.
(defmacro defopcode (name opcode format &rest attributes)
  (let ((string (string-append "*" name "-OPCODE*")))
    ;; Resolve some package conflicts 
    (multiple-value-bind (ignore status)
	(intern-soft string *ilc-package*)
      (when (eq status :inherited)
	(shadow string *ilc-package*)))
    (let ((*name (intern string *ilc-package*)))
      `(progn
	 (setf (get ',*name :system-constant) t)
	 (lt::defconstant-load-internal ',*name ,(if (listp opcode) (car opcode) opcode) nil)
	 (add-opcode ',name ',*name ',opcode ',format ',attributes)))))

(defun opcode-for-instruction (instruction)
  (symeval (intern (string-append "*" instruction "-OPCODE*") *ilc-package*)))

(defun add-opcode (name *name opcode format attributes)
  (flet ((sets (number)
	   (setf (aref *instruction-name* number) name)
	   (setf (aref *instruction-*name* number) *name)
	   (setf (aref *instruction-format* number) format)
	   (setf (aref *instruction-attributes* number) attributes)
	   ;; Hack built-ins
	   (let ((legal-operand-types
		   (opcode-format-legal-operand-types format))
		 (n-args (opcode-format-n-args format))
		 (n-returned (opcode-format-n-returned format)))
	     (flet ((do-it (function &optional operand)
		      (let* ((string (string function))
			     ;; See if there's a function with this name already
			     ;; accessible from someplace sensible.
			     (function (or (intern-soft string #+IMACH "CLI" #-IMACH "ICLI")
					   (intern-soft string
							#+IMACH "COMPILER"
							#-IMACH "ICOMPILER")
					   (letf (((si:pkg-locked *i-system-package*) nil))
					     (intern string *i-system-package*)))))
			(add-built-in function legal-operand-types number
				      n-args n-returned operand))))
	       (let ((built-in-option (member ':function attributes)))
		 (cond (built-in-option
			(let ((functions (second built-in-option)))
			  (cl:etypecase functions
			    (symbol (do-it functions))
			    (list
			      ;; Two cases: either it's a cons of (FUNCTION . OPERAND)
			      ;;  or it's a list of function names or conses of function
			      ;;  names and operands.
			      (if (cl:listp (cdr functions))
				  (if (cl:consp (car functions))
				      (loop for (function . operand) in functions
					    do (do-it function operand))
				      (loop for function in functions
					    do (do-it function)))
				  (do-it (car functions) (cdr functions)))))))
		       ;; Normal case, where we should intern a function with the same
		       ;;  name as the instruction in the SYSTEM package for the target
		       ;;  machine.
		       (t (let ((function
				  (or (intern-soft (string name)
						   #+IMACH "GLOBAL"
						   #-IMACH "IGLOBAL")
				      (intern-soft (string name)
						   #+IMACH "SCL"
						   #-IMACH "ISCL")
				      (intern-soft (string name)
						   #+IMACH "COMPILER"
						   #-IMACH "ICOMPILER")
				      (letf (((si:pkg-locked *i-system-package*) nil))
					(intern (string name) *i-system-package*)))))
			    (when function
			      (do-it function))))))))))
    (if (listp opcode)
	(loop for num in opcode do (sets num))
	(sets opcode))))

;Call this to reload the opcode definition file, flushing the old data base
(defun reload-opdef (&optional (path "SYS: I-SYS; OPDEF.LISP"))
  (si:fill-array *instruction-name* nil nil)
  (si:fill-array *instruction-function-name* nil nil)
  (dolist (f *built-in-functions*)
    (cl:remprop f 'built-in)
    (let ((shared (get f :shared-function)))
      (when shared
	(cl:remprop f 'built-in))))
  (setf *built-in-functions* nil)
  (si:with-package-lock *i-system-package* nil
    (load path (pkg-find-package "I-LISP-COMPILER") nil t nil))
  (dolist (f *built-in-functions*)
    (let ((shared (get f :shared-function)))
      (when shared
	(setf (get shared 'built-in)
	      (get f 'built-in))))))

(defun add-built-in (function format opcode n-arguments n-values &optional operand)
  (let ((indicator 'built-in))
    (push function *built-in-functions*)
    (setf (aref *instruction-function-name* opcode) function)
    (let ((built-in (make-built-in :built-in-opcode opcode
				   :built-in-format format
				   :built-in-n-arguments n-arguments
				   :built-in-n-values n-values
				   :built-in-operand operand)))
      (push built-in (get function indicator)))))

(defstruct (opcode-format (:type list) :conc-name)
  n-args
  n-returned
  (legal-operand-types))

(defsubst get-opcode-number (name)
  (cl:symbol-value name))

(defsubst get-opcode-pretty-name (opcode)
  (aref *instruction-name* opcode))

(defsubst get-opcode-name (opcode)
  "Returns a symbol of the form *FOO-OPCODE*, whose value should be OPCODE."
  (aref *instruction-*name* opcode))

(defsubst get-opcode-format (opcode)
  (aref *instruction-format* opcode))

(defsubst get-opcode-attributes (opcode)
  (aref *instruction-attributes* opcode))

(defsubst get-opcode-n-args (opcode)
  (opcode-format-n-args (get-opcode-format opcode)))

(defsubst get-opcode-n-returned (opcode)
  (opcode-format-n-returned (get-opcode-format opcode)))

(defsubst get-opcode-legal-operand-types (opcode)
  (opcode-format-legal-operand-types (get-opcode-format opcode)))

(defsubst get-built-in-opcode-and-operand (built-in)
  (values (built-in-opcode built-in) (built-in-operand built-in)))

(defmacro def-dtp-op (&rest ignore)
  )

(defconst *internal-builtin-functions*
	  '(bind-locative start-call dereference logic-tail-test push-lexical-var
	    push-lexical-var push-lexical-var push-lexical-var push-lexical-var
	    push-lexical-var push-lexical-var push-lexical-var %block-1-write
	    %block-2-write %block-3-write type-member-no-pop type-member-no-pop
	    type-member-no-pop type-member-no-pop locate-locals catch-close
	    %generic-dispatch %message-dispatch %check-preempt-request
	    push-global-logic-variable branch-true branch-true-else-extra-pop
	    branch-true-and-extra-pop branch-true-extra-pop branch-true-no-pop
	    branch-true-and-no-pop branch-true-else-no-pop
	    branch-true-and-no-pop-else-no-pop-extra-pop branch-false
	    branch-false-else-extra-pop branch-false-and-extra-pop branch-false-extra-pop
	    branch-false-no-pop branch-false-and-no-pop branch-false-else-no-pop
	    branch-false-and-no-pop-else-no-pop-extra-pop push-n-nils
	    push-address-sp-relative push-local-logic-variables return-multiple return-kludge
	    take-values unbind-n-internal push-instance-variable push-address-instance-variable
	    push-instance-variable-ordered push-address-instance-variable-ordered return-single
	    %block-1-read %block-2-read %block-3-read %block-1-read-shift %block-2-read-shift
	    %block-3-read-shift %block-1-read-test %block-2-read-test %block-3-read-test
	    finish-call-n finish-call-n-apply finish-call-tos finish-call-tos-apply
	    set-to-cdr-push-car push-address set-sp-to-address set-sp-to-address-save-tos
	    %block-1-read-alu %block-2-read-alu %block-3-read-alu extended-entry-rest-accepted
	    extended-entry-rest-not-accepted char-ldb %p-ldb-internal %p-tag-ldb branch
	    loop-decrement-tos entry-rest-accepted entry-rest-not-accepted min-internal
	    max-internal stack-blt %bind-locative-to-value unify pop-lexical-var
	    pop-lexical-var pop-lexical-var pop-lexical-var pop-lexical-var
	    pop-lexical-var pop-lexical-var pop-lexical-var movem-lexical-var movem-lexical-var
	    movem-lexical-var movem-lexical-var movem-lexical-var movem-lexical-var
	    movem-lexical-var movem-lexical-var =-no-pop <-no-pop >-no-pop eql-no-pop
	    logtest-internal eq-no-pop logtest-no-pop pop-instance-variable
	    movem-instance-variable pop-instance-variable-ordered
	    movem-instance-variable-ordered %unsigned-lessp-no-pop movem stack-blt-address
	    char-dpb %p-dpb-internal %p-tag-dpb loop-increment-tos-less-than catch-open %hack
	    %proc-breakpoint))

(defun list-problems ()
  (loop for instruction being the array-elements of *instruction-function-name*
	when (and instruction
		  (not (fboundp instruction))
		  (not (memq instruction *internal-builtin-functions*)))
	  collect instruction into no-arglist
	finally
	  (when no-arglist
	    (format t "~&No arglist for these builtin instructions; if anyone can
 call these, use DEFUPRIM, DEF-COMPILED-ONLY-FUNCTION, or DEF-COMPILED-ONLY-SPECIAL-FORM:~%")
	    (format-textual-list no-arglist #'princ))
	  (return no-arglist)))
