;;; -*- Mode: Lisp; Package: I-LISP-COMPILER; Lowercase: T; Base: 8; Syntax: Zetalisp -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; These are the transformers on functions.  They are like optimizers in that they
;;; do not have to be run, and like transformers is that they can produce code which
;;; cannot be evaluated.  The output of these transformers is not macro-expanded or optimized,
;;; so you have to know what you are doing.

(eval-when (compile load eval)

(defvar *type-member-name-alist* nil)

;;#+imach
(defun add-type-member-disassembler (operand name)
  (let ((pair (cl:rassoc name *type-member-name-alist* :test #'string-equal)))
    (if pair
	(setf (car pair) operand)
	(push (cons operand name) *type-member-name-alist*))))

(defun compute-type-member-operand (data-types)
  (loop with types = (loop for type in data-types
			   when (symbolp type)
			     collect (symeval type)
			   else
			     collect type)
	for type in types
	minimize type into min
	maximize type into max
	finally
	  (let ((min4 (logand min -4)))
	    (unless (< (- max min4) 8.)
	      (error "The types ~a can not be reduced to a type-member operand" types))
	    (loop with eight-bit = 0
		  for type in types
		  doing
	      (setq eight-bit (logior eight-bit (lsh 1 (- type min4))))
		  finally
		    (return-from compute-type-member-operand 
		      (dpb (lsh min4 -2)
			   (byte 4. 8.)
			   eight-bit))))))
);End EVAL-WHEN

(deftransformer (type-member type-member-transformer) (form)
  (or (matchp form
	(('type-member form . types)
	 (let ((real-form (if (symbolp form) form (gensym))))
	   (when (loop for type in types
		       always (and (fixnump type)
				   ( 0 type)
				   (< type (^ 2 (byte-size i:sys:%%q-data-type)))))
	     (setq types (cl:delete-duplicates (sort types #'<)))
	     (let ((result
		     (loop while types
			   collecting
			     (loop with first-type = (pop types)
				   with these-types = (list first-type)
				   until (null types)
				   while (< (- (car types) (dpb 0 (byte 2 0) first-type)) 8)
				   do (push (pop types) these-types)
				   finally
				     (return
				       `(type-member-internal
					  ,real-form
					  ,(compute-type-member-operand these-types)))))))
	       (if (cdr result)
		   (setq result `(or . ,result))
		   (setq result (car result)))
	       (when (neq form real-form)
		 (if (eq (car result) 'or)
		     (setq result `(let ((,real-form ,form)) ,result))
		     (setq result (subst form real-form result))))
	       result))))
	(* nil))
      (progn (warn "TYPE-MEMBER cannot be optimized:  ~S" form)
	     nil)))


(defmacro def-type-member-transformer
	  ((name &optional (disassemble-name (string name)) transformer-name)
	   types &body other-clauses)
  (let ((operand (compute-type-member-operand types)))
    `(progn
       (add-type-member-disassembler ,operand ',disassemble-name)
       (deftransformer (,name ,(or transformer-name
				   (intern (string-append disassemble-name "-"
							  "TYPE-MEMBER-TRANSFORMER")))
			type-member-internal)
		       (form)
	 (matchp form
	   ((',name thing) `(type-member-internal ,thing ,',operand))
	   ,@(or other-clauses
		 `((* (phase-1-bad-form "Wrong number of arguments")))))))))

(def-type-member-transformer (cl:listp "LISTP") i:sys:(dtp-list dtp-list-instance dtp-nil))
(def-type-member-transformer (fixnump) i:sys:(dtp-fixnum))
(def-type-member-transformer (characterp) i:sys:(dtp-character))
(def-type-member-transformer (instancep)
  i:sys:(dtp-instance dtp-list-instance dtp-array-instance dtp-string-instance))
(def-type-member-transformer (cl:rationalp "RATIONALP")
			   i:sys:(dtp-small-ratio dtp-big-ratio dtp-fixnum dtp-bignum)
  (* form))
(def-type-member-transformer (locativep) i:sys:(dtp-locative))
(def-type-member-transformer (cli::generic-function-p) i:sys:(dtp-generic-function))
(def-type-member-transformer (single-float-p) i:sys:(dtp-single-float))
(def-type-member-transformer (si:double-float-p) i:sys:(dtp-double-float))
(def-type-member-transformer (rationalp "RATIOP") i:sys:(dtp-small-ratio dtp-big-ratio))
(def-type-member-transformer (cli::small-ratio-p) i:sys:(dtp-small-ratio))
(def-type-member-transformer (cli::big-ratio-p) i:sys:(dtp-big-ratio))
(def-type-member-transformer (physical-address-p "PHYSICAL-ADDRESS-P") i:sys:(dtp-physical-address))

#+3600
;;; The 3600 definition of ZL:RATIONALP is a "subst" declared not to be inline.  This
;;; prevents the transformer from running, so we need to optimize the parallel symbol
;;; instead.
(def-type-member-transformer (i:zl:rationalp "RATIO-P" ratio-p-type-member-transformer-local-local) i:sys:(dtp-small-ratio dtp-big-ratio))

(def-type-member-transformer (complexp "COMPLEXP") i:sys:(dtp-complex))
(def-type-member-transformer (floatp) i:sys:(dtp-single-float dtp-double-float))
(def-type-member-transformer (bigp) i:sys:(dtp-bignum))
(def-type-member-transformer (zl:fixp "INTEGERP") i:sys:(dtp-fixnum dtp-bignum))
(def-type-member-transformer (si:realp "REALP") i:sys:(dtp-fixnum dtp-bignum
						       dtp-single-float dtp-double-float
						       dtp-big-ratio dtp-small-ratio))
(def-type-member-transformer (numberp) i:sys:(dtp-fixnum dtp-bignum dtp-single-float
					    dtp-double-float dtp-big-ratio dtp-small-ratio
					    dtp-complex dtp-spare-number))
(def-type-member-transformer (extended-number-p) i:sys:(dtp-bignum dtp-double-float
						      dtp-big-ratio dtp-complex
						      dtp-spare-number))
(def-type-member-transformer (listp "CONSP") i:sys:(dtp-list dtp-list-instance))

;;; Can't do it for NOT since a lot of transformers need to see it.  The back end
;;; handles the compilation of NOT instead
;(def-type-member-transformer (not) i:sys:(dtp-nil))
(add-type-member-disassembler (compute-type-member-operand (list i:sys:dtp-nil)) "NOT")

(def-type-member-transformer (arrayp) i:sys:(dtp-array dtp-array-instance dtp-string
						     dtp-string-instance))
(def-type-member-transformer (stringp) i:sys:(dtp-string dtp-string-instance))
(def-type-member-transformer (symbolp) i:sys:(dtp-nil dtp-symbol))
(def-type-member-transformer (cl:compiled-function-p) i:sys:(dtp-compiled-function))
(def-type-member-transformer (zl:closurep) i:sys:(dtp-dynamic-closure))
(def-type-member-transformer (future-common-lisp:functionp)
			     i:sys:(dtp-compiled-function
				     dtp-dynamic-closure
				     dtp-lexical-closure
				     dtp-generic-function))

(deftransformer (= type-member-=-transformer) (form)
  (matchp form
    ((`= ('cli::load-byte-internal '6 '0 ('i:sys:%tag x)) y)
     (if (and (numberp y)
	      ( 0 y)
	      ( y #o77))
	 `(type-member ,x ,y)
	 form))
    (* form)))

(defun commute-for-immediates (form &optional commute-function)
  (destructuring-bind (function arg1 arg2) form
    (let* ((format (built-in-format (get-built-in *compiler* function 2)))
	   (arg1-constant (cl:constantp arg1 compiler:*transform-environment*))
	   (arg2-constant (cl:constantp arg2 compiler:*transform-environment*))
	   (arg1-immed (and arg1-constant
			    (format-fits-arg *compiler* format
					     (lt:evaluate-constant
					       arg1 compiler:*transform-environment*))))
	   (arg2-immed (and arg2-constant
			    (format-fits-arg *compiler* format
					     (lt:evaluate-constant
					       arg2 compiler:*transform-environment*)))))
      ;; if we had a way to distinguish specials from lexicals, we could do more
      ;; if we wanted to understand about side-effects, we could do more
      ;; ---- this will do for now
      (if (or (and arg1-immed (not arg2-immed))
	      (and arg2-constant
		   (not arg2-immed)
		   (not arg1-constant)))
	  `(,(or commute-function function)
	    ,arg2 ,arg1)
	  form))))

(add-transformer 'internal-= 'commute-for-immediates)
(deftransformer (internal-< commute-internal-<-for-immediates) (form)
  (commute-for-immediates form 'internal->))
(deftransformer (internal-> commute-internal->-for-immediates) (form)
  (commute-for-immediates form 'internal-<))
(add-transformer '*-internal 'commute-for-immediates)
(add-transformer '%32-bit-plus 'commute-for-immediates)
(add-transformer '%multiply-double 'commute-for-immediates)
(add-transformer '%multiply-bignum-step 'commute-for-immediates)
(add-transformer 'eq 'commute-for-immediates)
(add-transformer 'eql 'commute-for-immediates)
(add-transformer 'equal-number 'commute-for-immediates)
(add-transformer 'logand-internal 'commute-for-immediates)
(add-transformer 'logior-internal 'commute-for-immediates)
(add-transformer 'logxor-internal 'commute-for-immediates)
(add-transformer 'logtest-internal 'commute-for-immediates)
(add-transformer 'min-internal 'commute-for-immediates)
(add-transformer 'max-internal 'commute-for-immediates)

(deftransformer (+-internal check-immediate-format-for-+) (form)
  (block optimizer
    (destructuring-bind (function arg1 arg2) form
      (let ((format (built-in-format (get-built-in *compiler* function 2))))
	(when (and (future-common-lisp:realp arg2)
		   (not (format-fits-arg *compiler* format arg2)))
	  (when (and (minusp arg2)
		     (format-fits-arg *compiler* format (- arg2)))
	    (return-from optimizer
	      `(--internal ,arg1 ,(- arg2))))
	  (return-from optimizer
	    `(+-internal ,arg2 ,arg1)))
	form))))

(deftransformer (--internal check-immediate-format-for--) (form)
  (block optimizer
    (destructuring-bind (function arg1 arg2) form
      (let ((format (built-in-format (get-built-in *compiler* function 2))))
	(when (and (future-common-lisp:realp arg2)
		   (not (format-fits-arg *compiler* format arg2))
		   (minusp arg2)
		   (format-fits-arg *compiler* format (- arg2)))
	  (return-from optimizer
	    `(+-internal ,arg1 ,(- arg2))))
	form))))

(defconst *boole-conversion-alist* '((1 . logand) (6 . logxor) (7 . logior)))

(deftransformer (boole boole-transformer) (form)
  (matchp form
    (('boole ignore only-argument)
     only-argument)
    (('boole . arguments)
     (let ((spec (first arguments))
	   temp)
       (matchp spec
	 (('quote real-spec)
	  (setq spec real-spec)))
       (cond ((and (fixp spec)
		   (setq temp (assq spec *boole-conversion-alist*)))
	      (cons (cdr temp) (rest1 arguments)))
	     ((= (length arguments) 3)
	      `(system:boole-internal . ,arguments))
	     (t
	      `(system:boole-internal ,(first arguments)
					(boole . ,(butlast arguments))
					,(car (last arguments)))))))
    (* (phase-1-bad-form))))


;cli::
;(i-lisp-compiler::deftransformer (case case-transformer) (form)
;  (destructuring-bind (nil test-object &rest clauses) form
;    (expand-case test-object clauses compiler:*interpreter-lexical-environment*)))

(deftransformer (function transform-function) (form)
  (unless (= (length form) 2) (phase-1-bad-form))
  (let ((fun (lambda-macro-expand (second form) *transform-environment*)))
    (unless (or (validate-function-spec fun)
		(si:interpreted-lambda-p fun))
      (phase-1-bad-form "~S is neither a function nor a function-spec" fun))
    (when (symbolp fun)
      (let ((local-function (si:local-function-definition fun compiler:*transform-environment*)))
	(when (and (listp local-function)
		   (eq (first local-function) 'defun-in-flavor))
	  (let ((flavor (second local-function)))
	    (setq fun `(lambda (&rest args)
			 (cl:apply #'(defun-in-flavor ,fun ,flavor)
				   (flavor:get-flavor-mapping-table-for-instance self ',flavor)
				   self args)))))))
    (if (eq (second form) fun) form `(function ,fun))))

(deftransformer (multiple-value-bind multiple-value-bind-rgetf inline-getf) (form)
  (matchp form
    (('multiple-value-bind (value found-p) ('rgetf indicator plist)
        ('if test value-again default))
     (if (and (symbolp value)
	      value
	      (symbolp found-p)
	      found-p
	      (eq test found-p)
	      (eq value value-again)
	      (multiple-value-bind (nil free-variables)
		  (lt:annotate-form default nil compiler:*transform-environment*)
		(and (not (cl:member value free-variables))
		     (not (cl:member found-p free-variables)))))
	 `(inline-getf ,indicator ,plist ,default)
	 form))
    (* form)))
