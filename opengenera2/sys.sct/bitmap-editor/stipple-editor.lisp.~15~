;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(dw:define-program-framework stipple-editor
  :inherit-from (bitmap-editor)
  :pretty-name "Stipple editor"
  :select-key #\|
  :command-definer t
  :top-level (stipple-editor-top-level)
  :command-table (:inherit-from '("bitmap-editor" "accept-values-pane"
				  "help-program" "undo-program"))
  :panes
  ((title :title :height-in-lines 1
	  :redisplay-string "Stipple editor" :redisplay-after-commands nil)
   (sample :display :redisplay-after-commands t :incremental-redisplay :own-redisplayer
		    :redisplay-function 'redisplay-sample
		    :cursor-viewport-even-number-of-lines nil
		    :margin-components `dw:((margin-ragged-borders )
					    (margin-scroll-bar :history-noun "bitmap"
							       :visibility :if-needed)
					    (margin-scroll-bar :margin :bottom
							       :history-noun "bitmap"
							       :visibility :if-needed)
					    (margin-white-borders :thickness 2)))
   (grid :display :typeout-window t
	 :redisplay-after-commands t :incremental-redisplay :own-redisplayer
	 :redisplay-function 'redisplay-grid
	 :margin-components `dw:((margin-ragged-borders )
				 (margin-scroll-bar :history-noun "bitmap")
				 (margin-scroll-bar :margin :bottom :history-noun "bitmap")
				 (margin-white-borders :thickness 2)))
   (command :interactor :height-in-lines 3)
   (edit-parameters :accept-values :accept-values-function 'accept-values-edit-parameters
		    :height-in-lines 2 :redisplay-after-commands t)
   (drawing-mode-menu :display :redisplay-function 'display-drawing-modes
		      :redisplay-after-commands nil
		      :margin-components `dw:((margin-borders )
					      (margin-white-borders :thickness 4)
					      (margin-whitespace :margin :left :thickness 10))
		      :default-character-style '(:jess :roman :normal))
   (draw-menu :command-menu :menu-level :draw))
  :configurations '((main (:layout (main :column title sample grid edit-parameters
					 drawing-mode-menu draw-menu command))
			  (:sizes (main (title 1 :lines) (command 3 :lines)
					(edit-parameters :ask-window self
							 :size-for-pane edit-parameters)
					(drawing-mode-menu :ask-window self
							   :size-for-pane drawing-mode-menu)
					(draw-menu :ask-window self
						   :size-for-pane draw-menu)
				      :then (sample .25)
				      :then (grid :even)))))
  :state-variables ((stipple-name "Unnamed")
		    (stipple-gray-level nil)
		    (stipple-being-edited nil)
		    (stipple-to-be-edited nil)
		    (own-process t))
  :size '(500 500)
  )

(defmethod (accept-values-edit-parameters stipple-editor) (stream)
  (setq stipple-name (accept 'string :prompt "Name" :stream stream :default stipple-name)
	stipple-gray-level (accept '((null-or-type ((number 0 1)))) :prompt "Gray level"
				   :stream stream :default stipple-gray-level)))

(defmethod (set-stipple-being-edited stipple-editor) (stipple)
  (multiple-value-bind (width height)
      (graphics:stipple-array-repeat-size stipple)
    (reset-bounding-box-size-and-scale width height nil 4)
    (setq stipple-being-edited stipple)
    (copy-raster-to-raster-plane stipple black-plane :width width))
  (setq stipple-name nil
	stipple-gray-level nil)
  (when (typep stipple 'graphics:stipple-array)
    (setq stipple-name (graphics:stipple-array-name stipple)
	  stipple-gray-level (graphics:stipple-array-gray-level stipple)))
  (setq grid-redisplay-degree redisplay-degree-all)
  (setq image-edited-p nil))

(defmethod (stipple-editor-top-level stipple-editor) ()
  (if stipple-to-be-edited
      (set-stipple-being-edited self (prog1 stipple-to-be-edited
					   (setq stipple-to-be-edited nil)))
      (when (null stipple-being-edited)
	(reset-bounding-box-size-and-scale 8 8)))
  (bitmap-editor-top-level self))

(defmethod (dw::map-command-name-to-help-topic stipple-editor) (symbol)
  (multiple-value-bind (found name)
      (cp:command-in-command-table-p symbol (dw:program-command-table self))
    (when found
      `(,name ,(dw:program-pretty-name self) "command"))))

(defun-in-flavor (sample-redisplay-function stipple-editor)
		 (stream stream-x stream-y first-p draw-function &rest other-args)
  (ignore first-p)
  (apply draw-function stream stream-x stream-y other-args)
  (multiple-value-bind (bb-width bb-height)
      (bounding-box-outline-size bounding-box)
    (stack-let* ((stipple-width (lcm bb-width 32))
		 (dims (list bb-height stipple-width))
		 (stipple (make-array dims :element-type 'bit)))
      (loop for x from 0 below stipple-width by bb-width do
	(send stream :bitblt-from-sheet tv:alu-seta bb-width bb-height 0 0 stipple x 0))
      (multiple-value-bind (width height)
	  (send stream :inside-size)
	(send stream :bitblt tv:alu-seta width height stipple 0 0 0 0)))))

(defmethod (sample-redisplay-parameters stipple-editor) ()
  (values #'sample-redisplay-function 0 0))

;;; Any change affects it, because of replication.
(defmethod (note-bounding-box-move stipple-editor :after) ()
  (maxf sample-redisplay-degree redisplay-degree-complete))

(define-stipple-editor-command (com-save-stipple-editor
				 :menu-accelerator "Save"
				 :menu-level :draw)
			       ()
   (multiple-value-bind (bb-width bb-height)
       (bounding-box-outline-size bounding-box)
     (let* ((rwidth (cl:lcm bb-width 32)))
       (setq stipple-being-edited (with-stack-list (dimensions bb-height rwidth)
				    (graphics:make-stipple-array
				      :dimensions dimensions
				      :x-phase bb-width
				      :name stipple-name
				      :gray-level stipple-gray-level)))
       (loop for x from 0 below rwidth by bb-width do
	 (copy-raster-plane-to-raster black-plane stipple-being-edited
				      :image-right bb-width :image-bottom bb-height
				      :to-x x)))))

(define-stipple-editor-command (com-exit-stipple-editor
				 :menu-accelerator "Done"
				 :menu-level :draw)
			       ()
   (unless own-process
     (throw 'return-stipple
       (prog1 stipple-being-edited (setq stipple-being-edited nil))))
   (setq stipple-being-edited nil)
   (send dw:*program-frame* :bury))

(compile-flavor-methods stipple-editor)

(defun edit-stipple (stipple)
  (dw::find-and-select-program-window 'stipple-editor
    :reuse-test #'(lambda (ignore program)
		    (and (null (stipple-editor-stipple-being-edited program))
			 (null (stipple-editor-stipple-to-be-edited program))))
    :program-state-variables `((stipple-to-be-edited ,stipple))))

(defun design-new-stipple (&key name (superior tv:mouse-sheet))
  (unless name
    (setq name (loop for i from 1 doing
		 (let ((name (format nil "Stipple-~D" i)))
		   (unless (find name graphics:*stipple-arrays*
				 :test #'string-equal
				 :key #'graphics:stipple-array-name)
		     (return name))))))
  (using-resource (frame dw:program-frame 'stipple-editor superior :process nil)
    (dw:reset-program-state-variables (send frame :program)
				      `((stipple-name ,name)
					(own-process nil)))
    (tv:expose-window-near frame '(:mouse) nil nil)
    (catch 'return-stipple
      (tv:window-call (frame :deactivate)
	(dw:program-frame-top-level frame)))))

(defun write-defstipple-form (stipple &optional (stream *standard-output*))
  (let ((name (graphics:stipple-array-name stipple)))
    (multiple-value-bind (width height)
	(decode-raster-array stipple)
      (format stream "~&(~S ~S (~S ~S) (:pattern t :pretty-name ~S)
 #b~B)~%"
	  'graphics:defstipple
	  (intern (string-upcase name) "STIPPLES")
	  (or (graphics::stipple-array-x-phase stipple) width)
	  height
	  name
	  (loop for y below height
		collect (let ((result 0))
			  (loop for x
				    downfrom (1- (or (graphics::stipple-array-x-phase stipple)
						     width))
			      to 0
			      for shift from 0
			      do
			  (setf (load-byte result shift 1) (raster-aref stipple x y)))
			  result))))))
