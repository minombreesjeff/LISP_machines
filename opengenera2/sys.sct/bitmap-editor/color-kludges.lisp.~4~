;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Kludges for color images until better system support, such as in CLIM.

(defun draw-image-raster-plane (raster-plane stream x y
				raster array-x-offset array-y-offset
				image-left image-top image-right image-bottom
				scale pattern)
  (draw-image-raster-plane-internal stream x y scale pattern
				    raster image-left image-top image-right image-bottom
				    raster-plane array-x-offset array-y-offset))

;;; This is obscenely slow.
(defmethod (draw-image-raster-plane-internal tv:graphics-mixin)
	   (x y scale pattern
	    raster image-left image-top image-right image-bottom
	    raster-plane array-x-offset array-y-offset)
  (destructuring-bind (cleft ctop cright cbottom) tv:clipping-region
    (decf cleft tv:left-margin-size)
    (decf ctop tv:top-margin-size)
    (decf cright tv:left-margin-size)
    (decf cbottom tv:top-margin-size)
    (when (< x cleft)
      (multiple-value-bind (remove new-x)
	  (truncate (- x cleft) scale)
	(setq x (+ new-x cleft))
	(decf image-left remove)))
    (when (< y ctop)
      (multiple-value-bind (remove new-y)
	  (truncate (- y ctop) scale)
	(setq y (+ new-y ctop))
	(decf image-top remove)))
    (minf image-right (+ image-left (ceiling (+ cright (mod x scale)) scale)))
    (minf image-bottom (+ image-top (ceiling (+ cbottom (mod y scale)) scale))))
  (loop for index-y from image-top below image-bottom
	for at-y from y by scale
	do
    (loop for index-x from image-left below image-right
	  for at-x from x by scale
	  do
      (when (or (null raster)
		(not (zerop (raster-aref raster index-x index-y))))	;Changed cell
	(draw-image-raster-cell raster-plane self
				(- index-x array-x-offset) (- index-y array-y-offset)
				at-x at-y
				scale pattern)))))

;;; Make it just record once in the history.
(dw::define-viewport-graphics-operation draw-image-raster-plane-internal
					(x y scale pattern
					 raster image-left image-top image-right image-bottom
					 raster-plane array-x-offset array-y-offset)
  :arguments-to-convert (x y)
  :box (values x y
	       (+ x (* (- image-right image-left) scale))
	       (+ y (* (- image-bottom image-top) scale)))
  )

(defun draw-image-raster-cell (raster-plane stream index-x index-y at-x at-y scale pattern)
  (draw-image-color-rectangle (raster-plane-aref raster-plane index-x index-y)
			      (raster-plane-color-map raster-plane)
			      (array-element-byte-size (raster-plane-raster raster-plane))
			      at-x at-y (+ at-x scale) (+ at-y scale)
			      :pattern pattern :stream stream)
  (when ( scale 4)
    (graphics:draw-point at-x at-y :alu :flip :stream stream)))

(defun draw-image-color-rectangle (value color-map byte-size
				   left top right bottom &rest draw-args)
  (if color-map
      (multiple-value-bind (r g b)
	  (send color-map :read-color-map value)
	(stack-let ((rgb (list r g b)))
	  (apply #'graphics:draw-rectangle left top right bottom :color rgb draw-args)))
      (if ( byte-size 24)
	  (stack-let ((rgb (list (/ (load-byte value 0 8) 255.0)
				 (/ (load-byte value 8 8) 255.0)
				 (/ (load-byte value 16 8) 255.0))))
	    (apply #'graphics:draw-rectangle left top right bottom :color rgb draw-args))
	  (apply #'graphics:draw-rectangle left top right bottom 
		 :gray-level (/ value (1- (ash 1.0 byte-size)))
		 draw-args))))

(defun choose-image-color (size color-map &key default)
  (if ( size 24)
      (multiple-value-bind (r g b)
	  (dw:accepting-values (t :own-window t :label "True color")
	    (values
	      (accept '(integer 0 1) :prompt "red"
		      :default (and default (/ (load-byte default 0 8) 255.0)))
	      (accept '(integer 0 1) :prompt "green"
		      :default (and default (/ (load-byte default 8 8) 255.0)))
	      (accept '(integer 0 1) :prompt "blue"
		      :default (and default (/ (load-byte default 16 8) 255.0)))))
	(sys:dpbs (round (* r 255)) (byte 8 0)
		  (round (* g 255)) (byte 8 8)
		  (round (* b 255)) (byte 8 16)
		  0))
      (let* ((type `(unsigned-byte ,size))
	     (range (ash 1 size))
	     (cell-size (if (> range 20) 10 20)))
	(dw:menu-choose-from-drawer
	  #'(lambda (stream &key max-width max-height)
	      (stack-let ((presentations (make-array range)))
		(formatting-item-list (stream :inter-column-spacing '(2 :pixel)
					      :inter-row-spacing 2
					      :n-rows (isqrt range)
					      :max-width max-width :max-height max-height)
		  (dotimes (c range)
		    (graphics:formatting-graphics-cell (stream :float-origin t)
		      (setf (aref presentations c)
			    (dw:with-output-as-presentation (:type type
							     :object c
							     :stream stream)
			      (draw-image-color-rectangle c color-map size
							  0 0 cell-size cell-size
							  :stream stream)
			      (graphics:draw-rectangle 0 0 cell-size cell-size
						       :filled nil :stream stream))))))
		(coerce presentations 'list)))
	  type :default (and default (load-byte default 0 size))))))
