;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(dw:define-program-framework font-editor
  :inherit-from (bitmap-editor dw:help-program)
  :select-key #\{	;+++
  :system-menu t
  :command-definer t
  :top-level (font-editor-top-level)
  :help font-editor-help
  :command-table (:inherit-from '("bitmap-editor" "accept-values-pane"
				  "help-program" "undo-program"
				  "colon full command" ;; "standard arguments"	;No args yet.
				  "input editor compatibility")
		  :kbd-accelerator-p t)
  :panes
  ((title :title :height-in-lines 1
	  :redisplay-function 'dw:help-program-draw-title :redisplay-after-commands nil)
   (sample :display :redisplay-after-commands t :incremental-redisplay :own-redisplayer
		    :redisplay-function 'redisplay-sample)
   (grid :display :typeout-window t
	 :redisplay-after-commands t :incremental-redisplay :own-redisplayer
	 :redisplay-function 'redisplay-grid
	 :margin-components `dw:((margin-ragged-borders )
				 (margin-scroll-bar :history-noun "bitmap")
				 (margin-scroll-bar :margin :bottom :history-noun "bitmap")
				 (margin-white-borders :thickness 2)))
   (help-menu :command-menu :menu-level :help :columns '(("Help")) :center-p t)
   (undo-menu :command-menu :menu-level :undo :rows '(("Undo" "Redo" "Skip")))
   (drawing-mode-menu :display :redisplay-function 'display-drawing-modes
		      :redisplay-after-commands nil
		      :margin-components `dw:((margin-borders )
					      (margin-white-borders :thickness 4)
					      (margin-whitespace :margin :left :thickness 10))
		      :default-character-style '(:jess :roman :normal))
   (draw-menu :command-menu :menu-level :draw)
   (gray-menu :command-menu :menu-level :gray)
   (font-menu :command-menu :menu-level :font)
   (edit-parameters :accept-values :accept-values-function 'accept-values-edit-parameters
		    :height-in-lines 3 :redisplay-after-commands t)
   (character-menu :display :size-from-output t
		   :redisplay-after-commands nil :incremental-redisplay nil
		   :redisplay-function 'display-character-menu
		   :default-character-style '(:fix :roman :large))
   (font-parameters :accept-values :accept-values-function 'accept-values-font-parameters
		    :height-in-lines 4 :redisplay-after-commands t
		    :margin-components `dw:((margin-borders )
					    (margin-white-borders )
					    (margin-label :string "Font parameters"
							  :margin :top :box :inside
							  :style (:dutch :italic :normal))))
   (registers :display :incremental-redisplay nil :redisplay-after-commands nil
	      :redisplay-function 'draw-registers
	      :margin-components `dw:((margin-borders )
				      (margin-white-borders )
				      (margin-label :string "Registers"
						    :style (:dutch :italic :normal))))
   (command :interactor :end-of-page-mode :scroll))
  :configurations
  '((tall
     (:layout (tall :column middle command)
	      (middle :row left menus)
	      (left :column title sample grid)
	      (menus :column help-menu undo-menu drawing-mode-menu
			     draw-menu gray-menu font-menu edit-parameters
			     character-menu font-parameters registers))
     (:sizes (tall (command 4 :lines)
		 :then (middle :even))
	     (middle (menus :ask-window self :size-for-pane drawing-mode-menu)
		   :then (left :even))
	     (left (title 1 :lines)
		   (sample :ask-window self :call-program sample-pane-size sample)
		 :then (grid :even))
	     (menus (help-menu :ask-window self :size-for-pane help-menu)
		    (undo-menu :ask-window self :size-for-pane undo-menu)
		    (drawing-mode-menu :ask-window self :size-for-pane drawing-mode-menu)
		    (draw-menu :ask-window self :size-for-pane draw-menu)
		    (gray-menu :ask-window self :size-for-pane gray-menu)
		    (font-menu :ask-window self :size-for-pane font-menu)
		    (character-menu :ask-window self :size-for-pane character-menu)
		    (edit-parameters 3 :lines)
		    (font-parameters 4 :lines)
		  :then
		    (registers :even))))
    (wide
      (:layout (wide :column title sample grid registers menus command)
	       (menus :row character-menu avvs menus1 menus2)
	       (menus1 :column help-menu undo-menu draw-menu)
	       (menus2 :column gray-menu font-menu)
	       (avvs :column drawing-mode-menu edit-parameters font-parameters))
      (:sizes (wide (title 1 :lines) (command 4 :lines)
		    (sample :ask-window self :call-program sample-pane-size sample)
		    (menus 10 :lines character-menu)
		    (registers :ask-window self :call-program registers-pane-size registers)
		  :then (grid :even))
	      (menus (character-menu 30 :characters character-menu)
		     (avvs 30 :characters drawing-mode-menu)
		     (menus1 :ask-window self :size-for-pane undo-menu)
		   :then
		     (menus2 :even))
	      (menus1 (help-menu :ask-window self :size-for-pane help-menu)
		      (undo-menu :ask-window self :size-for-pane undo-menu)
		    :then
		      (draw-menu :even))
	      (menus2 (gray-menu :ask-window self :size-for-pane gray-menu)
		    :then
		      (font-menu :even))
	      (avvs (drawing-mode-menu 2 :lines)
		    (edit-parameters 3 :lines)
		  :then 
		    (font-parameters :even)))))
  :state-variables ((font-symbol nil) (font-bfd nil)
		    (character nil) (character-width 10)
		    (sample-string "") (sample-image-positions (make-array 2 :fill-pointer 0))
		    (bounding-box (make-instance 'bounding-box-outline
						 :components '(:left :top :right
							       :baseline :bottom)
						 :movable-components '(:left :right)
						 :left 10 :top 10 :scale 10
						 :width 10 :baseline-height 10 :height 12))
		    (font-to-be-edited t)
		    ))

(defmethod (sample-pane-size font-editor) (stacking pane &rest ignore)
  (if (eq stacking :horizontal)
      (if font-bfd
	  (* (+ (string-length sample-string) 3) (bfd-char-width font-bfd))
	  (tv:sheet-char-width pane))
      (if font-bfd
	  (+ (bfd-line-spacing font-bfd) (tv:sheet-vsp pane))
	  (tv:sheet-line-height pane))))

(defun-in-flavor (sample-redisplay-function font-editor)
		 (stream stream-x y first-p draw-function &rest other-args)
  (when first-p
    (setf (fill-pointer sample-image-positions) 0))
  (flet ((draw-current (x)
	   (apply draw-function stream (+ x stream-x) y other-args)))
    (draw-current 0)
    (if first-p
	(when (plusp (string-length sample-string))
	  (let ((x (+ character-width (* 2 (bfd-char-width font-bfd)))))
	    (loop for char being the array-elements of sample-string do
	      (cond ((eql char character)
		     (vector-push-extend x sample-image-positions)
		     (draw-current x)
		     (incf x character-width))
		    (t
		     (let* ((index (char-index char))
			    (bcd (and (< index (bfd-fill-pointer font-bfd))
				      (aref font-bfd index))))
		       (if (null bcd)
			   (incf x (bfd-char-width font-bfd))
			   (graphics:draw-image bcd
						(- x (bcd-left-kern bcd))
						(- (bcd-top-kern bcd))
						:stream stream)
			   (incf x (bfd-character-width font-bfd index)))))))))
	(map () #'draw-current sample-image-positions))))

(defmethod (sample-redisplay-parameters font-editor) ()
  ;; These magic numbers are the largest amount of left/top kern that we remember and draw
  ;; properly.
  (values #'sample-redisplay-function 10 10))

(defmethod (registers-pane-size font-editor) (stacking &rest ignore)
  (assert (eq stacking :vertical))
  (if register-height (+ register-height 16) 26))

(define-font-editor-command (com-set-configuration )
			    ((configuration '((member wide tall)) :default 'tall))
   (image-changed :complete-redisplay t :set-modified nil)
   (dw:set-program-frame-configuration configuration))

(dw:define-command-menu-handler ("Configure" font-editor :draw :gesture (:left :right))
				(&rest args &key (gesture :left) &allow-other-keys)
  (case gesture
    (:right
      (case dw:*command-menu-test-phase*
	((t)
	 (throw 'dw:command-menu-test-phase `(com-set-configuration)))
	((:documentation)
	 (throw 'dw:command-menu-test-phase "Choose configuration"))
	(otherwise
	  `(com-set-configuration ,(dw:menu-choose '(("Tall aspect" . tall)
						     ("Wide aspect" . wide))
						   :prompt "Set configuration")))))
    (otherwise (apply #'dw:standard-command-menu-handler 'com-set-configuration args))))

(define-presentation-type character-name-or-code (() &key for-font character-set)
   :abbreviation-for 'character
   :parser ((stream &key type)
	    (let ((token (dw:read-standard-token stream)))
	      (block okay
		(when (= (string-length token) 1)
		  (return-from okay
		    (char token 0)))
		(when (and (null character-set) for-font)
		  (multiple-value-setq (nil character-set)
		    (si:backtranslate-font for-font
					   (send-if-handles stream :display-device-type))))
		(when (null character-set)
		  (setq character-set si:*standard-character-set*))
		(let ((code (send character-set :name-char token)))
		  (when code
		    (return-from okay
		      (code-char code))))
		(let ((index (ignore-errors (parse-integer token :radix 8))))
		  (when (and index ( index 0) (< index (send character-set :n-characters)))
		    (return-from okay
		      (code-char (send character-set :make-char index)))))
		(error 'dw:input-not-of-required-type :string token :type type))))
   :printer ((character stream &key acceptably)
	     (multiple-value-bind (character-set index)
		 (si:char-char-set-and-index character)
	       (let ((name (if (eq character-set si:*standard-character-set*)
			       (unless ( #o200 index #o300)	;format effectors
				 (format nil "~:C" character))	;print graphic even if no name
			       (send character-set :char-name index))))	;only if named
		 (cond ((null name)
			(format stream "~3,'0O" index))
		       (acceptably
			(format stream "~A" name))
		       (t
			(format stream "~A (~3,'0O)" name index)))))))

(defmethod (accept-values-edit-parameters font-editor) (stream)
  (font-editor-set-font self (accept 'font-name :prompt "Font"
				     :default font-symbol :stream stream))
  (when font-bfd
    (font-editor-set-character self (accept `((character-name-or-code) :for-font ,font-symbol)
					    :prompt "Character" :default character
					    :stream stream)))
  (when (and font-bfd character)
    (font-editor-set-character-width self
				     (accept '((integer 0)) :prompt "Width"
					     :default character-width
					     :stream stream))))

;;; Should display in correct character set, presumably using names for all but standard.
;;; Also will need a scroll bar sometimes.
(defmethod (display-character-menu font-editor) (stream)
  (destructuring-bind (&key (remaining-width (send stream :inside-width))
		       &allow-other-keys)
      dw:*pane-sizing-options*
    (let ((n (floor remaining-width (* (send stream :char-width) 2))))
      (dotimes (i 128)
	(when (and (plusp i) (zerop (mod i n)))
	  (terpri stream))
	(let ((char (code-char i)))
	  (dw:with-output-as-presentation (:stream stream :object char :type 'character)
	    (write-char char stream)))
	(write-char #\space stream)))
    (terpri stream)))

(defun-in-flavor (set-font-vertical-size font-editor) (height baseline)
  (unless (and (= (bfd-line-spacing font-bfd) height)
	       (= (bfd-baseline font-bfd) baseline))
    (setf (bfd-line-spacing font-bfd) height
	  (bfd-baseline font-bfd) baseline)
    (with-bounding-box-open
      (setf (bounding-box-outline-height bounding-box) height)
      (setf (bounding-box-outline-baseline-height bounding-box) baseline))))

(defmethod (accept-values-font-parameters font-editor) (stream)
  (when font-bfd
    (set-font-vertical-size
      (accept '((integer 0)) :prompt "Character height"
			     :default (bfd-line-spacing font-bfd)
			     :stream stream)
      (accept '((integer 0)) :prompt "Base line"
			     :default (bfd-baseline font-bfd)
			     :stream stream))
    (let ((height (accept '((integer 0)) :prompt "Blinker height"
			  :default (bfd-get font-bfd :blinker-height)
			  :stream stream))
	  (width (accept '((integer 0)) :prompt "Blinker width"
			 :default (bfd-get font-bfd :blinker-width)
			 :stream stream)))
      (when height 
	(setf (bfd-get font-bfd :blinker-height) height))
      (when width
	(setf (bfd-get font-bfd :blinker-width) width)))))

(defun-in-flavor (save-current-character font-editor) ()
  (unless (and character font-bfd)
    (dw:command-error "There is no current character"))
  (multiple-value-bind (bb-left bb-top bb-right bb-bottom)
      (bounding-box-editing-edges)
    (ignore bb-right)
    (multiple-value-bind (ink-left ink-top ink-right ink-bottom)
	(raster-plane-filled-area black-plane)
      (when (or (< ink-top bb-top)
		(> ink-bottom bb-bottom))
	(unless (yes-or-no-p "There is ink outside of the bounding box.
It will be lost.  Proceed anyway? ")
	  (dw:command-error))
	(maxf ink-top bb-top)
	(minf ink-bottom bb-bottom))
      (format *query-io* "~&Saving ~@\\presentation\\ in ~A.~%"
	      character 'character-name-or-code font-symbol)
      (let ((bcd (make-bchar-descriptor
		   :dimensions (bitbltable-dims (- ink-right ink-left) (- ink-bottom bb-top))
		   :set-width character-width
		   ;; :top-kern (- ink-top bb-top)	;+++ Not supported elsewhere
		   :left-kern (- bb-left ink-left)
		   :raster-width (- ink-right ink-left)
		   :raster-height (- ink-bottom bb-top)
		   ;; Despite the name, this is really the index.  Would be better to have the
		   ;; code, since that would permit correct printing of BCD's.
		   :char-code (char-index character))))
	(copy-raster-plane-to-raster black-plane bcd
				     :to-y (- ink-top bb-top)
				     :image-left ink-left :image-top ink-top
				     :image-right ink-right :image-bottom ink-bottom)
	(store-bcd-in-bfd-and-font font-bfd bcd)
	(setq image-edited-p nil)))))

(defun-in-flavor (offer-save-if-character-modified font-editor) ()
  (when (and character font-bfd image-edited-p)
    (when (yes-or-no-p "The character has been modified, save it back first? ")
      (save-current-character))))

(defundo font-editor-set-font (program font-symbol font-bfd
			       saved-font-symbol saved-font-bfd
			       saved-character saved-width saved-image))

(defmethod (undo-element-redo font-editor-set-font) ()
  (unless saved-image
    (setq saved-image (make-raster-plane)))
  (multiple-value-setq (saved-font-symbol saved-font-bfd saved-character saved-width)
    (font-editor-set-font-for-undo program font-symbol font-bfd saved-image)))

(defmethod (undo-element-undo font-editor-set-font) ()
  (font-editor-unset-font-for-undo program saved-font-symbol saved-font-bfd saved-character
				   saved-width saved-image))

(defmethod (font-editor-set-font-for-undo font-editor)
	   (new-font-symbol new-font-bfd saved-image)
  (multiple-value-prog1 (values font-symbol font-bfd character character-width)
    (setq font-symbol new-font-symbol
	  font-bfd new-font-bfd
	  character nil)
    (when saved-image
      (copy-raster-planes black-plane saved-image))
    (reset-bounding-box-size-and-scale (max 1 (bfd-char-width font-bfd))
				       (bfd-line-spacing font-bfd)
				       (bfd-baseline font-bfd)
				       3)))

(defmethod (font-editor-unset-font-for-undo font-editor)
	   (new-font-symbol new-font-bfd new-character saved-width saved-image)
  (setq font-symbol new-font-symbol
	font-bfd new-font-bfd
	character new-character)
  (if font-bfd
      (reset-bounding-box-size-and-scale (max 1 (bfd-char-width font-bfd))
					 (bfd-line-spacing font-bfd)
					 (bfd-baseline font-bfd)
					 3)
      (reset-bounding-box-size-and-scale 10 12 10 3))
  (copy-raster-planes saved-image black-plane)
  (font-editor-set-character-width self saved-width))

(defmethod (font-editor-set-font font-editor) (new-font-symbol &optional new-font-bfd)
  (unless (eq font-symbol new-font-symbol)
    (offer-save-if-character-modified)
    (when (null new-font-bfd)
      (setq new-font-bfd (font-get-bfd new-font-symbol
				       :if-does-not-exist :create
				       :okay-to-load t)))
    (do-undoably 'font-editor-set-font "Set font" new-font-symbol new-font-bfd)))

(defmethod (font-editor-set-character font-editor) (new-character &optional explicit)
  (when (or (neq character new-character) explicit)
    (unless font-bfd
      (dw:command-error "There is no current font."))
    (unless (eql character new-character)	;Reverting
      (when image-edited-p
	(if character
	    (offer-save-if-character-modified)
	    (when (multiple-value-bind (left top right bottom)
		      (raster-plane-filled-area black-plane)
		    (and (> right left) (> bottom top)))
	      (unless (yes-or-no-p "There is no current character, ~
but you have drawn something.   Do you want to proceed? ")
		(dw:command-error))))))
    (do-undoably 'font-editor-set-character "Set character" new-character)))

(defundo font-editor-set-character (program character
				    saved-character saved-image saved-width))

(defmethod (undo-element-redo font-editor-set-character) ()
  (unless saved-image
    (setq saved-image (make-raster-plane)))
  (multiple-value-setq (saved-character saved-width)
    (font-editor-set-character-for-undo program character saved-image)))

(defmethod (undo-element-undo font-editor-set-character) ()
  (font-editor-unset-character-for-undo program saved-character saved-image saved-width))

(defmethod (font-editor-unset-character-for-undo font-editor)
	   (old-character saved-image saved-width)
  (setq character old-character)
  (when character
    (with-bounding-box-open
      (copy-raster-planes saved-image black-plane)
      (font-editor-set-character-width self saved-width)
      (image-changed))))

(defmethod (font-editor-set-character-for-undo font-editor)
	   (new-character saved-image)
  (copy-raster-planes black-plane saved-image)
  (multiple-value-prog1 (values character character-width)
    (setq character new-character)
    (when character
      (with-bounding-box-open
	(let ((bcd (let ((index (char-index character)))
		     (and (< index (bfd-fill-pointer font-bfd))
			  (aref font-bfd index)))))
	  (font-editor-set-character-width
	    self
	    (cond (bcd
		   (copy-raster-to-raster-plane bcd black-plane
						:to-x (- (bcd-left-kern bcd))
						:to-y (- (bcd-top-kern bcd)))
		   (bcd-set-width bcd))
		  (t
		   (format *query-io* "~&~:C is a new character in ~A.~%"
			   character font-symbol)
		   (clear-raster-plane black-plane)
		   (bfd-char-width font-bfd)))))
	(center-view))
      (image-changed :set-modified nil)
      (setq image-edited-p nil)
      (maxf sample-redisplay-degree redisplay-degree-complete))))

(defmethod (font-editor-set-character-width font-editor) (new-width)
  (unless (eql character-width new-width)
    (setq character-width new-width)
    (with-bounding-box-open
      (setf (bounding-box-outline-width bounding-box) new-width))
    (maxf sample-redisplay-degree redisplay-degree-complete)))

(defmethod (note-bounding-box-move font-editor :after) ()
  (setq character-width (bounding-box-outline-width bounding-box)))

(defmethod (interpret-font-to-be-edited font-editor) (thing)
  (multiple-value-bind (symbol bfd)
      (etypecase thing
	((member t) nil)
	(symbol thing)
	(pathname (read-font-file thing))
	(font (values (font-name thing) (get-bfd thing)))
	(bfont-descriptor (values (bfd-name thing) thing))
	)
    (if symbol
	(font-editor-set-font self symbol bfd)
      (setq font-symbol nil font-bfd nil character nil)
      (reset-bounding-box-size-and-scale 10 12 10 3))))

(defmethod (font-editor-top-level font-editor) ()
  (when font-to-be-edited
    (interpret-font-to-be-edited self
				 (prog1 font-to-be-edited (setq font-to-be-edited nil))))
  (bitmap-editor-top-level self))

;;; This could go in the global command table, too.
(define-font-editor-command (com-list-fonts )
			    (&key (not-loaded-too 'boolean)
				  (matching '((sequence string)) :default nil))
   (list-fonts :not-loaded-too not-loaded-too :matching matching))

(dw:define-command-menu-handler ("List Fonts" font-editor :font
				 :gesture (:left :shift-left :right))
				(&rest args &key (gesture :left) &allow-other-keys)
  (if (eq gesture :shift-left)
      `(com-list-fonts :not-loaded-too t)
      (apply #'dw:standard-command-menu-handler 'com-list-fonts args)))

(define-font-editor-command (com-show-font :menu-accelerator t :menu-level :font)
			    ((font 'font-name :default font-symbol))
  (show-font font :bfd (and (eq font font-symbol) font-bfd))
  )

(define-presentation-to-command-translator show-font (font-name :gesture ()) (font)
  `(com-show-font ,font))

(define-font-editor-command (com-edit-font )
			    ((font 'font-name :confirm t)
			     &key
			     (show-font 'boolean :default t))
   (unless (font-boundp font)
     (try-to-load-font font)
     (unless (font-boundp font)
       (if (yes-or-no-p "Create new font ~A? " font)
	   (setq show-font nil)
	   (dw:command-error))))
   (font-editor-set-font self font)
   (when show-font
     (show-font font-symbol :bfd font-bfd)))

(define-presentation-to-command-translator edit-font (font-name) (font)
  `(com-edit-font ,font))

(define-font-editor-command (com-copy-font )
			    ((old-font 'font-name :prompt "Name of font to copy"
				       :confirm t)
			     (new-font 'font-name :prompt "Name to copy to" :confirm t))
   (unless (font-boundp old-font)
     (try-to-load-font old-font)
     (unless (font-boundp old-font)
       (dw:command-error "There is no ~A font." old-font)))
   (when (font-boundp new-font)
     (unless (yes-or-no-p "There is already a ~A font, proceed anyway? ")
       (dw:command-error)))
   (let* ((old-tvfont (symbol-value old-font))
	  (new-tvfont (make-array (array-dimensions old-tvfont)
				  :element-type (array-element-type old-tvfont)
				  :named-structure-symbol 'font
				  :leader-length (array-leader-length old-tvfont))))
     (copy-array-contents-and-leader old-tvfont new-tvfont)
     (setf (font-name new-tvfont) new-font)
     (set new-font new-tvfont))
   (font-editor-set-font self new-font))

(dw:define-command-menu-handler ("Edit font" font-editor :font
				 :gesture (:left :shift-left :right))
				(&rest args &key (gesture :left) &allow-other-keys)
  (if (eq gesture :shift-left)
      (apply #'dw:standard-command-menu-handler 'com-copy-font :gesture :left args)
      (apply #'dw:standard-command-menu-handler 'com-edit-font args)))

(cp:define-command-accelerator edit-font font-editor #\F (:activate nil) ()
  (declare (dw::accelerator-for com-edit-font))
  `(com-edit-font))

(define-font-editor-command (com-edit-character )
			    ((char `((character-name-or-code) :for-font ,font-symbol)
				   :confirm t))
   (font-editor-set-character self char t))

(define-presentation-to-command-translator edit-character (character) (char)
  `(com-edit-character ,char))

(cp:define-command-accelerator edit-character font-editor #\C () ()
  (declare (dw::accelerator-for com-edit-character))
  (if cp::*unparsing-accelerator*
      `(com-edit-character )
      (let ((char (accept 'character :default nil	;No newline needed for input.
			  :prompt "Edit character")))
	`(com-edit-character ,char))))

;;; Directory from last time, name from current font, type from last time, version newest.
(defun-in-flavor (merged-pathname-default font-editor) ()
  (let ((default (fs:default-pathname (pathname-defaults))))
    (when font-symbol
      (setq default (send default :new-name (string font-symbol))))
    (send default :new-version :newest)))

(defun-in-flavor (update-pathname-default font-editor) (pathname)
  (fs:set-default-pathname (send pathname :new-version :newest) (pathname-defaults)))

(define-font-editor-command (com-read-file :menu-accelerator t :menu-level :font)
			    ((file 'pathname :default (merged-pathname-default) :confirm t)
			     &key
			     (format (font-file-type-presentation-type :read)
				     :default (and file
						   (let ((type (send file :canonical-type)))
						     (and (font-file-type-function type :read
							    :if-does-not-exist nil)
							  type)))))
   (update-pathname-default file)
   (unless (font-file-type-function format :read :if-does-not-exist nil)
     (setq format (prompt-and-accept (font-file-type-presentation-type :read)
				     "Format for ~A" file)))
   (multiple-value-bind (font-symbol font-bfd)
       (read-font-file file format)
     (font-editor-set-font self font-symbol font-bfd)))

(define-font-editor-command (com-write-file :menu-accelerator t :menu-level :font)
			    ((file 'pathname :default (merged-pathname-default) :confirm t)
			     &key
			     (format (font-file-type-presentation-type :write)
				     :default (and file
						   (let ((type (send file :canonical-type)))
						     (and (font-file-type-function type :write
							    :if-does-not-exist nil)
							  type)))))
   (update-pathname-default file)
   (unless (font-file-type-function format :write :if-does-not-exist nil)
     (setq format (prompt-and-accept (font-file-type-presentation-type :write)
				     "Format for ~A" file)))
   (write-font-file file font-symbol font-bfd format))

(define-font-editor-command (com-save-char :menu-accelerator t :menu-level :font
					   :keyboard-accelerator #\S)
			    ()
   (save-current-character))

(defundo set-sample (program new-sample old-sample))

(defmethod (undo-element-redo set-sample) ()
  (setq old-sample (set-sample-for-undo program new-sample)))

(defmethod (undo-element-undo set-sample) ()
  (set-sample-for-undo program old-sample))

(defmethod (set-sample-for-undo font-editor) (new-sample)
  (prog1 sample-string
	 (setq sample-string new-sample)
	 (maxf sample-redisplay-degree redisplay-degree-complete)))

(define-font-editor-command (com-set-sample :menu-accelerator t :menu-level :font)
			    ((new-sample 'string :prompt "sample string"
						 :default sample-string :confirm t))
   (do-undoably 'set-sample "Set sample" new-sample))

(defundo rename-char (program new-character old-character))

(defmethod (undo-element-redo rename-char) ()
  (setq old-character (font-editor-rename-character program new-character)))

(defmethod (undo-element-undo rename-char) ()
  (font-editor-rename-character program old-character))

(defmethod (font-editor-rename-character font-editor) (new-character)
  (prog1 character
    ;; Just affect where it will be saved.
    (setq character new-character)
    (maxf sample-redisplay-degree redisplay-degree-complete)
    (setq image-edited-p t)))

(define-font-editor-command (com-rename-char :menu-accelerator t :menu-level :font)
			    ((char `((character-name-or-code) :for-font ,font-symbol)
				   :confirm t))
  (do-undoably 'rename-char "Rename char" char))

;;; This might be useful enough to assign to the G keyboard accelerator.
;;; (In the Old FED, it's so useful that it gets two characters, M and G.)
(define-font-editor-command (com-gray-char :menu-accelerator t :menu-level :gray)
			    ((char `((character-name-or-code) :for-font ,font-symbol)
				   :default character
				   :prompt "character" :confirm t)
			     (font 'font-name :default font-symbol :prompt "font")
			     (scale 'number :default 1 :prompt "scale"))
   (unless font
     (dw:command-error "No current font"))
   (let ((bcd (let ((bfd (font-get-bfd font :okay-to-load t))
		    (index (char-index char)))
		(and (< index (bfd-fill-pointer bfd)) (aref bfd index)))))
     (unless bcd
       (dw:command-error "No character ~:C in ~A" char font))
     (do-undoably 'gray-bcd "Gray char" bcd scale)))

(defundo gray-bcd (program bcd scale saved-gray))

(defmethod (undo-element-redo gray-bcd) ()
  (unless saved-gray
    (setq saved-gray (make-raster-plane)))
  (gray-bcd-internal program bcd scale saved-gray))

(defmethod (undo-element-undo gray-bcd) ()
  (restore-saved-planes program nil saved-gray))

(defmethod (gray-bcd-internal font-editor) (bcd scale saved-gray)
  (copy-raster-planes gray-plane saved-gray)
  (if (= scale 1)
      (copy-raster-to-raster-plane bcd gray-plane :to-x (- (bcd-left-kern bcd)))
      (with-output-to-raster-plane (stream gray-plane)
	(graphics:draw-image bcd (- (bcd-left-kern bcd)) 0 :scale scale :stream stream)))
  (image-changed :set-modified nil))

(define-presentation-to-command-translator gray-char (character :gesture ()) (char)
  `(com-gray-char ,char))

(define-font-editor-command (com-exit-font-editor :menu-accelerator "Exit" :menu-level :font)
			    ()
   (offer-save-if-character-modified)
   (setq font-symbol nil font-bfd nil character nil)
   (send dw:*program-frame* :bury))

(cp:define-command-accelerator undo font-editor #\U () ()
  (declare (dw::accelerator-for com-undo))
  `(com-undo))
(cp:define-command-accelerator redo font-editor #\R () ()
  (declare (dw::accelerator-for com-redo))
  `(com-redo))

(cp:define-command-accelerator refresh font-editor #\Refresh () ()
  (declare (dw::accelerator-for com-refresh))
  `(com-refresh))

;;;; Help interface

(cp:define-command-accelerator help font-editor #\Meta-Help () ()
  (declare (dw::accelerator-for dw:com-help))
  `(dw:com-help))

(cp:define-command-accelerator command-help font-editor #\Control-Meta-Help () ()
  (declare (dw::accelerator-for dw:com-command-help))
  `(dw:com-command-help))

(defmethod (font-editor-help font-editor) (stream string-so-far)
  (dw:help-program-help self stream string-so-far "
Click on a command from the menus at the right,
or click on the grid to draw."))

(define-font-editor-command (com-font-editor-help-key :keyboard-accelerator #\Help) ()
   (font-editor-help self *standard-output* "")
   (format t "
Press ~C for a list of single character commands.
Press ~C for help about a particular single character command.
" #\control-help #\control-meta-help))

(define-font-editor-command (com-font-editor-list-accelerators
			      :keyboard-accelerator #\Control-Help)
			    ()
   (cp::read-accelerated-command-minimal-help))

(compile-flavor-methods font-editor)

(cp:define-command (com-edit-font-from-outside :name "Edit Font" :command-table "Fonts"
					       :provide-output-destination-keyword nil)
		   ((font '((scl:null-or-type font-name))
			  :default nil :provide-default t
			  :prompt "font name"
			  :documentation
			  "Font to edit, or none simply to enter the font editor"))
  (block skip-it
    (when (and font (not (font-boundp font))
	       (not (yes-or-no-p "~A is not a known font.  Create it? " font)))
      (return-from skip-it nil))
    (dw::find-and-select-program-window 'font-editor
      :reuse-test #'(lambda (ignore program)
		      (and (null (font-editor-font-symbol program))
			   (null (font-editor-font-to-be-edited program))))
      :program-state-variables `((font-to-be-edited ,font)))))

(dw:define-presentation-to-command-translator com-edit-font-from-outside
   (font-name :gesture :edit-definition) (font)
  `(fed::com-edit-font-from-outside ,font)) 
