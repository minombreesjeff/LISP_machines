;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; A combination of planes and raster arrays.

(defflavor raster-plane
	((raster nil)
	 (origin-x 0)
	 (origin-y 0)
	 (width 0)
	 (height 0)
	 (element-type 'bit)
	 (default-element nil))
	()
  (:initable-instance-variables element-type)
  (:constructor make-raster-plane (&optional (element-type 'bit)))
  :readable-instance-variables)

(defmethod (sys:print-self raster-plane) (stream &rest ignore)
  (si:printing-random-object (self stream :typep)
    (format stream "(~A) x ~S:~S, y ~S:~S"
	    (sys:type-array-element-type element-type)
	    origin-x (+ origin-x width)
	    origin-y (+ origin-y height))))

(defmethod (make-instance raster-plane) (&rest ignore)
  (when (subtypep element-type 'integer)
    (setq default-element 0)))

(defmethod (raster-plane-aref raster-plane) (x y)
  (let ((rx (- x origin-x))
	(ry (- y origin-y)))
    (if (or (< rx 0) (< ry 0)
	    ( rx width) ( ry height))
	default-element
	(raster-aref raster rx ry))))

(defmacro with-copy-array ((var (width height) &key (element-type ''bit))
			   &body body
			   &environment env)
  (once-only (element-type &environment env)
    `(with-stack-list (dims ,height
			    (graphics::raster-array-correct-width ,width
								  ,element-type))
       (tv:with-temp-sheet-raster (,var dims
					:type (sys:type-array-element-type ,element-type))
	 . ,body))))

;;; Drawing before the origin, must make a whole new array to shift the old contents around.
(defun-in-flavor (make-new-raster raster-plane) (left top right bottom)
  (with-copy-array (copy (width height) :element-type element-type)
    (bitblt tv:alu-seta width height raster 0 0 copy 0 0)
    (sys:return-array (prog1 raster (setq raster nil)))
    (let* ((new-origin-x (min origin-x left))
	   (new-origin-y (min origin-y top))
	   (new-width (- (max (+ origin-x width) right) new-origin-x))
	   (new-height (- (max (+ origin-y height) bottom) new-origin-y)))
      (setq raster (graphics::make-raster-array-with-correct-width
		     new-width new-height :element-type element-type))
      (bitblt tv:alu-seta width height copy 0 0
	      raster (- origin-x new-origin-x) (- origin-y new-origin-y))
      (setq origin-x new-origin-x origin-y new-origin-y
	    width new-width height new-height))))

(defun-in-flavor (grow-raster raster-plane) (new-width new-height)
  (maxf width new-width)
  (maxf height new-height)
  (multiple-value-bind (raster-width raster-height)
      (decode-raster-array raster)
    (when (or (> width raster-width)
	      (> height raster-height))
      (macrolet ((round-up (n mod) `(* ,mod (ceiling ,n ,mod))))
	(setq raster (grow-bit-array raster
				     (max raster-width (round-up width 256))
				     (max raster-height (round-up height 100))
				     element-type))))))

;;; 14 times faster than sys:array-grow
(defun grow-bit-array (array width height &optional (element-type (array-element-type array)))
  (let ((new (make-raster-array width height :element-type element-type)))
    (multiple-value-bind (old-width old-height)
	(decode-raster-array array)
      (bitblt tv:alu-seta old-width old-height array 0 0 new 0 0))
    (structure-forward array new)
    new))

(defmethod (assure-raster-plane-large-enough raster-plane) (left top right bottom)
  (when (zerop width)
    (setq origin-x left
	  origin-y top))
  (let ((rx (- left origin-x))
	(ry (- top origin-y)))
    (cond ((null raster)
	   (setq width (- right left)
		 height (- bottom top)
		 raster (make-raster-array (max 32 (graphics::raster-array-correct-width
						     width element-type))
					   (max 32 height)
					   :element-type element-type)))
	  ((or (< rx 0) (< ry 0))
	   (make-new-raster left top right bottom))
	  ((or (> (+ rx (- right left)) width) (> (+ ry (- bottom top)) height))
	   (grow-raster (+ rx (- right left)) (+ ry (- bottom top)))))))

(defmethod ((setf raster-plane-aref) raster-plane) (x y new-value)
  (when (null raster)
    (setq raster (make-raster-array 32 32 :element-type element-type)))
  (when (zerop width)
    (setq origin-x x origin-y y
	  width 1 height 1))
  (let ((rx (- x origin-x))
	(ry (- y origin-y)))
    (cond ((or (< rx 0) (< ry 0))
	   (make-new-raster x y (1+ x) (1+ y))
	   (setq rx (- x origin-x)
		 ry (- y origin-y))
	   (setf (raster-aref raster rx ry) new-value))
	  ((or ( rx width) ( ry height))
	   (grow-raster (1+ rx) (1+ ry))
	   (setf (raster-aref raster rx ry) new-value))
	  (t
	   (setf (raster-aref raster rx ry) new-value)))))

(defmethod (raster-plane-increment-origin raster-plane) (dx dy)
  (incf origin-x dx)
  (incf origin-y dy))

(defmethod (decode-raster-plane raster-plane) ()
  (declare (values raster origin-x origin-y width height spanning-width))
  (values raster origin-x origin-y width height
	  (if raster
	      (multiple-value-bind (nil nil spanning-width)
		  (decode-raster-array raster)
		spanning-width)
	      0)))

(defun raster-plane-filled-area (raster-plane)
  (declare (values left top right bottom))
  (multiple-value-bind (raster origin-x origin-y width height span)
      (decode-raster-plane raster-plane)
    (if (null raster)
	(values 0 0 0 0)
	(let ((raster raster))
	  (declare (sys:array-register-1d raster))
	  (let ((top (block found
		       (loop for y below height
			     for j from 0 by span
			     do
			 (loop for x below width
			       for i from j do
			   (when (not (zerop (sys:%1d-aref raster i)))
			     (return-from found y)))))))
	    (if (null top)
		(values 0 0 0 0)
		(let ((left (block found
			      (loop for x from 0 below width do
				(loop for y from top below height
				      for i from (+ (* top span) x) by span do
				    (when (not (zerop (sys:%1d-aref raster i)))
				      (return-from found x)))))))
		  (values (+ left origin-x) (+ top origin-y)
			  (block found
			    (loop for x downfrom (1- width) to 0 do
			      (loop for y from top below height
				    for i from (+ (* top span) x) by span
				    do
				(when (not (zerop (sys:%1d-aref raster i)))
				  (return-from found (+ x origin-x 1))))))
			  (block found
			    (loop for y downfrom (1- height) to 0
				  for j downfrom (* (1- height) span) by span
				  do
			      (loop for x from left below width
				    for i from (+ j left)
				    do
				(when (not (zerop (sys:%1d-aref raster i)))
				  (return-from found (+ y origin-y 1))))))))))))))

(defmethod (draw-raster-plane raster-plane) (left top &rest args
						      &key (image-left 0)
							   (image-top 0)
							   image-right image-bottom
							   (stream *standard-output*)
						      &allow-other-keys)
  (decf image-left origin-x)
  (decf image-top origin-y)
  (when (minusp image-left)
    (decf left image-left)
    (setq image-left 0))
  (when (minusp image-top)
    (decf top image-top)
    (setq image-top 0))
  (if image-right
      (decf image-right origin-x)
      (setq image-right width))
  (if image-bottom
      (decf image-bottom origin-y)
      (setq image-bottom height))
  (when (and raster (> image-right image-left) (> image-bottom image-top))
    (if (neq element-type 'bit)
	(draw-image-raster-plane self stream left top nil 0 0
				 image-left image-top image-right image-bottom
				 1 nil)
	(si:with-rem-keywords (some-args args '(:image-left :image-top
						:image-right :image-bottom))
	  (apply #'graphics:draw-image raster left top
		 :image-left image-left :image-top image-top
		 :image-right image-right :image-bottom image-bottom
		 some-args)))))

(defun raster-plane-draw-filled-area (raster-plane left top right bottom &rest draw-args)
  (multiple-value-bind (image-left image-top image-right image-bottom)
      (raster-plane-filled-area raster-plane)
    (let ((box-width (- right left))
	  (box-height (- bottom top)))
      (setq image-left (max 0 (- image-left (floor (- box-width
						      (- image-right image-left))
						   2)))
	    image-right (min image-right (+ image-left box-width))
	    image-top (max 0 (- image-top (floor (- box-height
						    (- image-bottom image-top))
						 2)))
	    image-bottom (min image-bottom (+ image-top box-height)))
      (apply #'draw-raster-plane raster-plane left top
	     :image-left image-left :image-top image-top
	     :image-right image-right :image-bottom image-bottom
	     draw-args))))

(defmethod (clear-raster-plane raster-plane) ()
  (when raster
    (multiple-value-bind (nil nil span)
	(decode-raster-array raster)
      (si:fill-array raster (* span height) default-element))
    (setq width 0 height 0)))

(defun copy-raster-planes (from-raster-plane to-raster-plane &key (alu tv:alu-seta)
								  (clear-first
								    (= alu tv:alu-seta)))
  (multiple-value-bind (raster origin-x origin-y width height)
      (decode-raster-plane from-raster-plane)
    (if (null raster)
	(when clear-first
	  (clear-raster-plane to-raster-plane))
	(copy-raster-to-raster-plane raster to-raster-plane :alu alu
				     :to-x origin-x :to-y origin-y
				     :width width :height height))))

(defun copy-raster-to-raster-plane (from-raster to-raster-plane &key (alu tv:alu-seta)
								     (clear-first
								       (eql alu tv:alu-seta))
								     (from-x 0) (from-y 0)
								     (to-x 0) (to-y 0)
								     width height)
  (when clear-first
    (clear-raster-plane to-raster-plane))
  (when (or (null width) (null height))
    (multiple-value-bind (raster-width raster-height)
	(decode-raster-array from-raster)
      (unless width (setq width raster-width))
      (unless height (setq height raster-height))))
  (assure-raster-plane-large-enough to-raster-plane to-x to-y (+ to-x width) (+ to-y height))
  (multiple-value-bind (raster origin-x origin-y)
      (decode-raster-plane to-raster-plane)
    (if (integerp alu)
	(bitblt alu width height from-raster from-x from-y
				 raster (- to-x origin-x) (- to-y origin-y))
	(let ((pixel (send alu :fill-data)))
	  (loop for from-y from from-y
		and to-y from (- to-y origin-y)
		repeat height
		do
	    (loop for from-x from from-x
		  and to-x from (- to-x origin-x)
		  repeat width
		  do
	      (when (not (zerop (raster-aref from-raster from-x from-y)))
		(setf (raster-aref raster to-x to-y) pixel))))))))

(defun copy-raster-plane-to-raster (from-raster-plane to-raster
				    &key (alu tv:alu-seta)
					 (image-left 0) (image-top 0)
					 image-right image-bottom
					 (to-x 0) (to-y 0))
  (multiple-value-bind (raster origin-x origin-y width height)
      (decode-raster-plane from-raster-plane)
    (let ((right (+ origin-x width)))
      (if (null image-right)
	  (setq image-right right)
	  (minf image-right right)))
    (let ((bottom (+ origin-y height)))
      (if (null image-bottom)
	  (setq image-bottom bottom)
	  (minf image-bottom bottom)))
    (setq width (- image-right image-left))
    (setq height (- image-bottom image-top))
    (let ((from-x (- image-left origin-x))
	  (from-y (- image-top origin-y)))
      (when (minusp from-x)
	(incf width from-x)
	(setq to-x (- to-x from-x)
	      from-x 0))
      (when (minusp from-y)
	(incf height from-y)
	(setq to-y (- to-y from-y)
	      from-y 0))
      (when (and raster (plusp width) (plusp height))
	(bitblt alu width height raster from-x from-y to-raster to-x to-y)))))

(defun swap-raster-planes (raster-plane-1 raster-plane-2)
  (multiple-value-bind (raster origin-x origin-y width height)
      (decode-raster-plane raster-plane-1)
    (cond ((zerop width)
	   (copy-raster-planes raster-plane-2 raster-plane-1)
	   (clear-raster-plane raster-plane-2))
	  (t
	   (with-copy-array (copy (width height) :element-type (array-element-type raster))
	     (bitblt tv:alu-seta width height raster 0 0 copy 0 0)
	     (copy-raster-planes raster-plane-2 raster-plane-1)
	     (copy-raster-to-raster-plane copy raster-plane-2
					  :to-x origin-x :to-y origin-y
					  :width width :height height))))))

(defun swap-raster-subplanes (raster-plane-1 raster-plane-2 left top right bottom)
  (let ((width (- right left))
	(height (- bottom top)))
    (with-copy-array (copy-1 (width height)
			     :element-type (raster-plane-element-type raster-plane-1))
      (copy-raster-plane-to-raster raster-plane-1 copy-1
				   :image-left left :image-top top
				   :image-right right :image-bottom bottom)
      (with-copy-array (copy-2 (width height)
			       :element-type (raster-plane-element-type raster-plane-2))
	(copy-raster-plane-to-raster raster-plane-2 copy-2
				     :image-left left :image-top top
				     :image-right right :image-bottom bottom)
	(copy-raster-to-raster-plane copy-2 raster-plane-1 :to-x left :to-y top
				     :clear-first nil :width width :height height))
      (copy-raster-to-raster-plane copy-1 raster-plane-2 :to-x left :to-y top
				   :clear-first nil :width width :height height))))

(defmethod (shift-raster-plane raster-plane) (dx dy)
  (incf origin-x dx)
  (incf origin-y dy))

(defmethod (reflect-raster-plane-vertically raster-plane) (column)
  (unless (zerop width)
    ;; Make the imaging area large enough for both possible reflections about the
    ;; desired column.  This makes it properly square for the reflection we want.
    (let ((min-x (min origin-x (- column (- (+ origin-x (1- width)) column))))
	  (max-x (max (+ origin-x (1- width)) (+ column (- column origin-x)))))
      (assure-raster-plane-large-enough self min-x origin-y (1+ max-x) (1+ origin-y)))
    (let ((raster raster))
      (declare (sys:array-register-1d raster))
      (multiple-value-bind (nil nil span)
	  (decode-raster-array raster)
	(loop for i1 below (floor width 2)
	      for i2 downfrom (1- width)
	      do
	  (loop repeat height
		for j from 0 by span
		do
	    (rotatef (sys:%1d-aref raster (+ j i1)) (sys:%1d-aref raster (+ j i2)))))))))

(defmethod (reflect-raster-plane-horizontally raster-plane) (row)
  (unless (zerop height)
    (let ((min-y (min origin-y (- row (- (+ origin-y (1- height)) row))))
	  (max-y (max (+ origin-y (1- height)) (+ row (- row origin-y)))))
      (assure-raster-plane-large-enough self origin-x min-y (1+ origin-x) (1+ max-y)))
    (let ((raster raster))
      (declare (sys:array-register-1d raster))
      (multiple-value-bind (nil nil span)
	  (decode-raster-array raster)
	(loop repeat (floor height 2)
	      for j1 from 0 by span
	      for j2 downfrom (* (1- height) span) by span
	      do
	  (dotimes (i width)
	    (rotatef (sys:%1d-aref raster (+ i j1)) (sys:%1d-aref raster (+ i j2)))))))))

;;; x=y refers to the screen appearance, which is opposite to the coordinate order.
(defmethod (reflect-raster-plane-diagonally raster-plane) (column row x=-y-p)
  (unless (zerop width)
    ;; Make the center really be the center so that we can easily rotate.
    (let ((max-dim (max (abs (- (+ origin-x width) column)) (abs (- column origin-x))
			(abs (- (+ origin-y height) row)) (abs (- row origin-y)))))
      (assure-raster-plane-large-enough self (- column max-dim) (- row max-dim)
					     (+ column max-dim) (+ row max-dim)))
    (let ((raster raster))
      (declare (sys:array-register-1d raster))
      (multiple-value-bind (nil nil span)
	  (decode-raster-array raster)
	(if x=-y-p
	    (loop for y below height
		  do
	      (loop for x below y do
		(rotatef (sys:%1d-aref raster (+ x (* y span)))
			 (sys:%1d-aref raster (+ y (* x span))))))
	    (loop for +y below height
		  for -y downfrom (1- height)
		  do
	      (loop for -x downfrom (1- width) above +y
		    for +x from 0
		    do
		(rotatef (sys:%1d-aref raster (+ +x (* +y span)))
			 (sys:%1d-aref raster (+ -y (* -x span)))))))))))

(defmethod (rotate-raster-plane raster-plane) (column row angle)
  (unless (zerop width)
    ;; Make the center really be the center so that we can easily rotate.
    (let ((max-dim (max (abs (- (+ origin-x width) column)) (abs (- column origin-x))
			(abs (- (+ origin-y height) row)) (abs (- row origin-y)))))
      (assure-raster-plane-large-enough self (- column max-dim) (- row max-dim)
					     (+ column max-dim) (+ row max-dim)))
    (let ((raster raster))
      (declare (sys:array-register-1d raster))
      (multiple-value-bind (nil nil span)
	  (decode-raster-array raster)
	(let ((height/2 (floor height 2))
	      (width/2 (floor width 2)))
	  (loop repeat height/2
		for +y from (- height height/2)
		for -y downfrom (1- height/2)
		do
	    (loop repeat width/2
		  for +x from (- width width/2)
		  for -x downfrom (1- width/2)
		  do
	      (ecase angle
		(-90
		  (rotatef (sys:%1d-aref raster (+ +x (* +y span)))
			   (sys:%1d-aref raster (+ +y (* -x span)))
			   (sys:%1d-aref raster (+ -x (* -y span)))
			   (sys:%1d-aref raster (+ -y (* +x span)))))
		(180
		  (rotatef (sys:%1d-aref raster (+ +x (* +y span)))
			   (sys:%1d-aref raster (+ -x (* -y span))))
		  (rotatef (sys:%1d-aref raster (+ +x (* -y span)))
			   (sys:%1d-aref raster (+ -x (* +y span)))))
		(+90
		  (rotatef (sys:%1d-aref raster (+ +x (* +y span)))
			   (sys:%1d-aref raster (+ -y (* +x span)))
			   (sys:%1d-aref raster (+ -x (* -y span)))
			   (sys:%1d-aref raster (+ +y (* -x span)))))))))))))

(defmethod (stretch-raster-plane-column raster-plane) (column delta)
  (let ((old-width width)
	(adjusted-column (- column origin-x)))
    (when (< -1 adjusted-column old-width)
      (cond ((plusp delta)
	     (assure-raster-plane-large-enough self origin-x origin-y
					       (+ origin-x old-width delta) (1+ origin-y))
	     (bitblt tv:alu-seta (- adjusted-column old-width) height
		     raster adjusted-column 0
		     raster (+ adjusted-column delta) 0)
	     (dotimes (i delta)
	       (bitblt tv:alu-seta 1 height
		       raster adjusted-column 0
		       raster (+ adjusted-column i) 0)))
	    ((minusp delta)
	     (bitblt tv:alu-seta (- old-width adjusted-column) height
		     raster adjusted-column 0
		     raster (+ adjusted-column delta) 0)
	     (sys:%draw-rectangle (- delta) height (+ width delta) 0 tv:alu-andca raster)
	     (incf width delta))))))

(defmethod (stretch-raster-plane-row raster-plane) (row delta)
  (let ((old-height height)
	(adjusted-row (- row origin-y)))
    (when (< -1 adjusted-row old-height)
      (cond ((plusp delta)
	     (assure-raster-plane-large-enough self origin-x origin-y
					       (1+ origin-x) (+ origin-y old-height delta))
	     (bitblt tv:alu-seta width (- adjusted-row old-height)
		     raster 0 adjusted-row
		     raster 0 (+ adjusted-row delta))
	     (dotimes (i delta)
	       (bitblt tv:alu-seta width 1
		       raster 0 adjusted-row
		       raster 0 (+ adjusted-row i))))
	    ((minusp delta)
	     (bitblt tv:alu-seta width (- old-height adjusted-row)
		     raster 0 adjusted-row
		     raster 0 (+ adjusted-row delta))
	     (sys:%draw-rectangle width (- delta) 0 (+ height delta) tv:alu-andca raster)
	     (incf height delta))))))

(defmethod (raster-plane-draw-rectangle raster-plane) (x1 y1 x2 y2 &optional (alu tv:alu-ior))
  (when (< x2 x1) (rotatef x1 x2))
  (when (< y2 y1) (rotatef y1 y2))
  (assure-raster-plane-large-enough self x1 y1 x2 y2)
  (decf x1 origin-x) (decf y1 origin-y)
  (decf x2 origin-x) (decf y2 origin-y)
  (if (integerp alu)
      (sys:%draw-rectangle (1+ (- x2 x1)) (1+ (- y2 y1)) x1 y1 alu raster)
      ;; Isn't there an extended entry that does this for me?
      (let ((pixel (send alu :fill-data)))
	(loop for x from x1 to x2 do
	  (loop for y from y1 to y2 do
	    (setf (raster-aref raster x y) pixel))))))

(defmethod (raster-plane-draw-line raster-plane) (x1 y1 x2 y2 &optional (alu tv:alu-ior))
  (assure-raster-plane-large-enough self (min x1 x2) (min y1 y2)
					 (1+ (max x1 x2)) (1+ (max y1 y2)))
  (decf x1 origin-x) (decf y1 origin-y)
  (decf x2 origin-x) (decf y2 origin-y)
  (if (integerp alu)
      (sys:%draw-line x1 y1 x2 y2 alu t raster)
      (let ((pixel (send alu :fill-data)))
	(graphics:draw-line-driver x1 y1 x2 y2 t
				   #'(lambda (width height x y)
				       (loop for y from y repeat height do
					 (loop for x from x repeat width do
					   (setf (raster-aref raster x y) pixel))))))))

(defmacro with-output-to-raster-plane ((stream raster-plane &rest options) &body body)
  (declare (arglist stream raster-plane &key (alu tv:alu-ior)))
  (dw:format-output-macro-default-stream stream)
  `(with-output-to-raster-plane-internal (dw:named-continuation with-output-to-raster-plane
								(,stream)
					   . ,body)
					 ,raster-plane
					 . ,options))

(defun with-output-to-raster-plane-internal (continuation raster-plane &key (alu tv:alu-ior))
  (graphics:with-output-to-bitmap-stream (stream)
    (funcall continuation stream)
    (multiple-value-bind (bitmap origin-x origin-y left top right bottom)
	(send stream :bitmap-and-edges)
      (copy-raster-to-raster-plane bitmap raster-plane :alu alu
				   :from-x (- left origin-x) :from-y (- top origin-y)
				   :to-x left :to-y top
				   :width (- right left) :height (- bottom top)))))

;;; Return a raster plane of the area to be painted in the new color (XOR'ed in B&W).
(defun flood-raster-plane (raster-plane seed-x seed-y alu)
  (let ((result (raster-plane-empty-copy raster-plane)))
    (multiple-value-bind (raster xmin ymin width height span)
	(decode-raster-plane raster-plane)
      (declare (sys:array-register-1d raster))
      (let* ((xmax (+ width xmin))
	     (ymax (+ height ymin))
	     (old-value (raster-plane-aref raster-plane seed-x seed-y))
	     (new-value (load-byte
			  (if (integerp alu)
			    (boole alu -1 old-value)
			    (send alu :fill-data))
			  0
			  (array-element-byte-size raster))))
	(labels ((should-recurse (x y) (and ( (raster-plane-aref result x y) new-value)
					    (= (raster-plane-aref raster-plane x y) old-value)))
		 (recurser (x y)
		   (let ((lower (loop for xx downfrom (1- x)
				      while (and (>= xx xmin) (should-recurse xx y))
				      finally (return (1+ xx))
				      do (setf (raster-plane-aref result xx y) new-value)))
			 (upper (loop for xx from (1+ x)
				      while (and (<= xx xmax) (should-recurse xx y))
				      finally (return (1- xx))
				      do (setf (raster-plane-aref result xx y) new-value))))
		     (let ((yy (1+ y)))
		       (when (and (<= yy ymax) (should-recurse x yy))
			 (setf (raster-plane-aref result x yy) new-value)
			 (recurser x yy)))
		     (let ((yy (1- y)))
		       (when (and (>= yy ymin) (should-recurse x yy))
			 (setf (raster-plane-aref result x yy) new-value)
			 (recurser x yy)))
		     (loop for xx downfrom (1- x) to lower do
		       (recurser xx y))
		     (loop for xx from (1+ x) to upper do 
		       (recurser xx y)))))
		(setf (raster-plane-aref result seed-x seed-y) new-value)
		(recurser seed-x seed-y))
	result)))) 

#|| The old definition
(defun flood-raster-plane (raster-plane seed-x seed-y alu)
  (let ((result (raster-plane-empty-copy raster-plane)))
    (multiple-value-bind (raster origin-x origin-y width height span)
	(decode-raster-plane raster-plane)
      (declare (sys:array-register-1d raster))
      (decf seed-x origin-x)
      (decf seed-y origin-y)
      (unless (and (< seed-x width) (< seed-y height))
	(return-from flood-raster-plane nil))
      (let ((seed-value (sys:%1d-aref raster (+ (* seed-y span) seed-x)))
	    top bottom)
	(setq top (loop for y downfrom (1- seed-y) to 0 do
		    (when ( (sys:%1d-aref raster (+ (* y span) seed-x)) seed-value)
		      (return (1+ y)))))
	(unless top (return-from flood-raster-plane nil))
	(setq bottom (loop for y from (1+ seed-y) below height do
		       (when ( (sys:%1d-aref raster (+ (* y span) seed-x)) seed-value)
			 (return (1- y)))))
	(unless bottom (return-from flood-raster-plane nil))
	(loop for y from top to bottom do
	  (let ((sy (* y span))
		left right)
	    (setq left (loop for x downfrom (1- seed-x) to 0 do
			 (when ( (sys:%1d-aref raster (+ sy x)) seed-value)
			   (return (1+ x)))))
	    (unless left (return-from flood-raster-plane nil))
	    (setq right (loop for x from (1+ seed-x) below width do
			 (when ( (sys:%1d-aref raster (+ sy x)) seed-value)
			   (return (1- x)))))
	    (unless right (return-from flood-raster-plane nil))
	    (raster-plane-draw-line result (+ left origin-x) (+ y origin-y)
					   (+ right origin-x) (+ y origin-y)
					   alu)
	    (unless (eql alu boole-xor)
	      (copy-raster-to-raster-plane raster result :alu boole-xor
					   :from-x left :from-y y
					   :to-x (+ left origin-x) :to-y (+ y origin-y)
					   :width (- (1+ right) left) :height 1))))))
    result))
||#

;;; Return a changed area subplane of plane XOR'ed by flood.
(defun make-flood-subplane (plane flood)
  (let ((subplane (raster-plane-empty-copy plane)))
    (multiple-value-bind (nil fl-origin-x fl-origin-y fl-width fl-height)
	(decode-raster-plane flood)
      (multiple-value-bind (bl-raster bl-origin-x bl-origin-y)
	  (decode-raster-plane plane)
	(copy-raster-to-raster-plane bl-raster subplane
				     :from-x (- fl-origin-x bl-origin-x)
				     :from-y (- fl-origin-y bl-origin-y)
				     :to-x fl-origin-x :to-y fl-origin-y
				     :width fl-width :height fl-height)))
    (copy-raster-planes flood subplane :alu boole-xor)
    subplane))

(defmethod (raster-plane-color-map raster-plane) () nil)

;;; A plane of the same type.
(defmethod (raster-plane-empty-copy raster-plane) ()
  (make-raster-plane element-type))

;;; Add a color map
(defflavor image-raster-plane
	((color-map nil))
	(raster-plane)
  (:writable-instance-variables (raster-plane-color-map color-map))
  (:constructor make-image-raster-plane (&key (element-type 'bit) (color-map nil))))

(defmethod (raster-plane-empty-copy image-raster-plane) ()
  (make-image-raster-plane :element-type element-type :color-map color-map))

(compile-flavor-methods raster-plane image-raster-plane)

(defun assure-raster-large-enough (raster width height)
  (multiple-value-bind (r-width r-height)
      (decode-raster-array raster)
    (if (and ( width r-width) ( height r-height))
	(values raster r-width r-height)
      (macrolet ((round-up (n mod) `(* ,mod (ceiling ,n ,mod))))
	(let ((new-width (max r-width (round-up width 256)))
	      (new-height (max r-height (round-up height 100))))
	  (values (grow-bit-array raster new-width new-height) new-width new-height))))))
