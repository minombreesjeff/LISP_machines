;;; -*- Base: 10; Mode: Joshua; Package: JI; Syntax: Joshua -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Created 2/25/87 18:05:42 by sgr running on GROUSE at SCRC.

;;;
;;; The protocol which all Joshua predications obey.  This is the real heart & soul of Joshua.
;;;

(format:defformat format:say (:one-arg) (argument parameters)
  ;; how to get FORMAT and SAY to begin peaceful co-existence
  (ignore parameters)
  (say argument format:*format-output*))

(si:defvar-resettable *running-rule* nil nil "For defaulting justifications.  Don't ever SETQ this.")

(defun succeed (&optional support)
  (declare (ignore support))
  ;; stub to prevent this from being mis-used.  The rule compiler knows when to FLET this.
  (error "You can't call SUCCEED at top level."))

;;; Perhaps this should be calling si:parse-body-declarations to merge decls.
;;; Put declarations from defgeneric in method body, somehow?  (Have to dwim on argument names.)
(def-defining-form define-protocol-function
   ;; used only by Joshua implementors, to create new elements of the protocol.
   :definer
   ((name arglist &body ignore &key
	  documentation
	  declaration
	  function
	  (internal-name name)
	  method-combination
	  ;; these drive define-predicate-method
	  (definer 'method-protocol-definer)
	  shower				;default flavorish thing is pretty good
	  (killer 'method-protocol-killer)
	  (function-spec-handler 'method-protocol-function-spec-handler))
    (flet ((defprop-or-defun (name property-name thing)
	     ;; defprop thing if it's a function spec, or defun a property-list function
	     (cond ((null thing)
		    ;; do nothing
		    nil)
		   ((sys:validate-function-spec thing)
		    ;; want to do a direct defprop
		    `((defprop ,name ,thing ,property-name)))
		   ((consp thing)
		    ;; want to define one here
		    `((defun (:property ,name ,property-name) ,(car thing)
			(declare (sys:function-parent ,name def-defining-form))
			,@(cdr thing))))
		   (t
		     (error
		       "Malformed property function.  Expected function-spec or (<args> . <body>): ~S"
		       thing)))))      
      `(progn (record-source-file-name ',name 'define-protocol-function)
	      ;; define the generic function for this protocol element
	      (defgeneric ,internal-name ,arglist
		,@(when documentation `(,documentation))
		(declare (sys:function-parent ,name define-protocol-function)
			 ,@(when declaration (cdr declaration)))
		,@(when method-combination `((:method-combination ,method-combination)))
		,@(when function `((:function ,function))))
	      ;; add this to the list of protocol fns, as well as a translation
	      (pushnew ',name *joshua-protocol-functions*)
	      (pushnew '(,name . ,internal-name) *joshua-protocol-name-translations*
		       :test #'(lambda (x y) (eq (car x) (car y))))
	      ;; tell the function-spec system how to deal with this
	      (pushnew ',name si:*all-function-spec-handlers*)
	      ,@(defprop-or-defun name 'sys:function-spec-handler function-spec-handler)
	      ;; stupid error check in :definition-around-bp of lisp-language-mixin
	      (defprop ,name "Predicate Method" si:definition-type-name)
	      ;; record data for killer, shower, & definer that drives define-predicate-method
	      ;; these are put on the externally-visible name, because that's what appears
	      ;;   in function specs.
	      ,@(defprop-or-defun name 'protocol-definer definer)
	      ,@(defprop-or-defun name 'zwei:kill-definition killer)
	      ,@(defprop-or-defun name 'protocol-shower shower)
	      ;; return the name
	      ',name)))
   :killer 
   ((fspec)
    ;; first undefine the protocol function
    (fundefine fspec)
    ;; now remove things that we did ourselves.  this is an example of where
    ;; inheritance among function-specs would be helpful.
    (remprop fspec 'protocol-definer)
    (remprop fspec 'zwei:kill-definition)
    (remprop fspec 'protocol-shower)
    (remprop fspec 'sys:function-spec-handler)
    (setq si:*all-function-spec-handlers* (delete fspec si:*all-function-spec-handlers*))
    (setq *joshua-protocol-functions* (delete fspec *joshua-protocol-functions*))
    (setq *joshua-protocol-name-translations* (delete fspec *joshua-protocol-name-translations*
						      :key #'car))
    t)
   :shower
   ((form &aux (name (second form)) next (count 0))
    ;; how to describe the effects of a define-protocol-function form.
    (labels ((talk-about-definition (fspec type arglist counter) ;perhaps this should stand on its own?
	       ;; say something cogent about a definition being bashed.
	       (cond ((not (sys:validate-function-spec fspec))
		      (zwei:barf "Invalid function spec ~S." fspec))
		     ((not (fdefinedp fspec))
		      ;; not defined yet
		      (format zwei:*typeout-window* "~&[~D] Define the ~A ~S for the first time."
			      counter type fspec))
		     (t
		       ;; defined already, so grok the arglists
		       (format zwei:*typeout-window* "~&[~D] Redefine the ~A ~S with ~
                                                  ~:[different~;the same~] arguments."
			       counter type fspec (equal arglist (arglist fspec t))))))
	     (frobulate-arglist (thing)
	       ;; deal with people who just supply a function spec instead of (<args> . <body>)
	       (if (sys:validate-function-spec thing)
		   (arglist thing t)
		   (car thing)))
	     (find-a-name ()
	       (or (find-piece :externally-visible-name) name))
	     (find-piece (keyword)
	       ;; find :definer, :killer, :shower, etc.
	       (getf (cddr form) keyword)))
      (format zwei:*typeout-window* "~&Evaluating this will:")
      ;; the defgeneric is always there
      (talk-about-definition name "generic function" (third form) (incf count))
      (when (setq next (find-piece :function-spec-handler))
	;; there is a function spec handler
	(talk-about-definition `(:property ,(find-a-name) sys:function-spec-handler)
			       (get 'sys:define-function-spec-handler 'si:definition-type-name)
			       (frobulate-arglist next)
			       (incf count)))
      (when (setq next (find-piece :definer))
	;; there is a definer
	(talk-about-definition `(:property ,(find-a-name) protocol-definer)
			       "definition driver for DEFINE-PREDICATE-METHOD"
			       (frobulate-arglist next)
			       (incf count)))
      (when (setq next (find-piece :killer))
	;; there is a killer
	(talk-about-definition `(:property ,(find-a-name) zwei:kill-definition)
			       "m-X Kill Definition driver for DEFINE-PREDICATE-METHOD"
			       (frobulate-arglist next)
			       (incf count)))
      (when (setq next (find-piece :shower))
	;; there is a shower
	(talk-about-definition `(:property ,(find-a-name) protocol-shower)
			       "m-X Show Effect of Definition driver for DEFINE-PREDICATE-METHOD"
			       (frobulate-arglist next)
			       (incf count)))
      t))
   ;; no parser is necessary, since name is always a symbol.
   :type-name "Protocol Function")

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")

0;;;
;;; Definitions of the protocol functions.
;;;

;;; TELL & ASK are top-level interfaces you probably don't want to redefine.

(define-protocol-function tell (predication truth-value justification)	;note this is internal arglist
  :documentation "Tell the database to believe a certain predication."
  :declaration (declare (values canonical-version new-or-old))
  :internal-name tell-internal
  :definer
  ((tell-fspec arglist &rest body)
   ;; define a tell method in a model
     ;; now the body.
   (apply #'method-protocol-definer tell-fspec arglist body)))

(define-protocol-function ask (predication truth-value continuation do-backward-rules do-questions)
  :documentation "Ask the database about the state of its belief in a certain predication."
  :declaration (declare (sys:downward-funarg continuation) (values))
  :internal-name ask-internal
  :definer
  ((ask-fspec arglist &rest body)
   ;; define an ask method in a model
   (apply #'method-protocol-definer ask-fspec arglist body)))

(define-protocol-function ask-data (predication truth-value continuation)
  :documentation "Ask in the virtual database"
  :declaration (declare (sys:downward-funarg continuation)))

(define-protocol-function ask-rules (predication truth-value continuation do-questions)
  :documentation "Ask using backward chaining rules"
  :declaration (declare (sys:downward-funarg continuation)))

(define-protocol-function ask-questions (predication truth-value continuation)
  :documentation "Ask the user"
  :declaration (declare (sys:downward-funarg continuation)))

;;; INSERT, FETCH, and CLEAR-MODEL are the data-modelling part of the protocol.

(define-protocol-function insert (predication)
  :documentation "Insert predication into the virtual database."
  :declaration (declare (values database-predication new-p)))

(define-protocol-function uninsert (database-predication)
  :documentation "Remove a predication from the virtual database."
  :declaration (declare (values)))

(define-protocol-function fetch (predication continuation)
  :documentation "Fetch matching predications from the virtual database calling a continuation on each."
  :declaration (declare (sys:downward-funarg continuation)))

(define-protocol-function clear (model &optional (clear-database t) (undefrules nil))
  ;; this is not a method, not because it has to be around at compile time (which it isn't),
  ;; but because there's no instance to hand the generic fn to when you do (clear).  It doesn't
  ;; need to be around at compile time.
  :documentation "Tell a model to forget everything it knows.  Should only be called by CLEAR."
  :internal-name clear-model
  :function (run-time-fake-method-apply 'clear-model model model clear-database undefrules)
  :definer property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler)

(define-protocol-function untell (database-predication)
  :documentation "Tell the database to remove all vestiges of a predication."
  )

;;; SAY is the presentation-modelling part of the protocol.

(define-protocol-function say (predication &optional (stream *standard-output*))
  :documentation "Say what the predication says, only in natural language.")


;;; The TMS-modelling part of the protocol consists of JUSTIFY, UNJUSTIFY, SUPPORT, and 
;;;   NOTICE-TRUTH-VALUE-CHANGE ACT-ON-TRUTH-VALUE-CHANGE.

(define-protocol-function justify (conclusion truth-value &optional mnemonic
				   true-support false-support unknown-support)
  :documentation "Set the truth-value and, in a TMS'd world, deal with justification.")

(define-protocol-function notice-truth-value-change (database-predication old-truth-value)
  :documentation "Gets called when the truth-value of a predication changes, to allow updating internal structures.")

(define-protocol-function act-on-truth-value-change (database-predication old-truth-value)
  :documentation "Gets called when the truth-value of a predication changes, to allow deductions to be made.")

(define-protocol-function unjustify (database-predication &optional justification)
  :documentation "Remove a justification from a predication, possibly causing the truth value to change")

(define-protocol-function current-justification (database-predication)
  :documentation "Returns the currently active justification of a predication")

(define-protocol-function all-justifications (database-predication)
  :documentation "Returns all justifications of a predication")

(define-protocol-function support (database-predication &optional filter)
  :documentation "Return the support structure for a predication.")

(define-protocol-function nontrivial-tms-p (predication)
  :documentation "Whether this predication has a non-trivial TMS mixed in.")

;;; The trigger-modelling part of the protocol is MAP-TRIGGERS, ADD-TRIGGER, DELETE-TRIGGER, 
;;;  LOCATE-TRIGGER, and POSITIONS-MATCHER-CAN-SKIP.

(define-protocol-function prefetch-forward-rule-matches (predication context continuation)
  :documentation "Look for facts matching this rule trigger at rule installation time."
  :declaration (declare (sys:downward-funarg continuation)))

(define-protocol-function map-over-forward-rule-triggers (predication continuation)
  :documentation "Map a function over a set of forward rule triggers."
  :declaration (declare (sys:downward-funarg continuation)))

(define-protocol-function map-over-backward-rule-triggers (predication continuation)
  :documentation "Map a function over a set of backward rule triggers."
  :declaration (declare (sys:downward-funarg continuation)))

(define-protocol-function map-over-backward-question-triggers (predication continuation)
  :documentation "Map a function over a set of backward question triggers."
  :declaration (declare (sys:downward-funarg continuation)))

(define-protocol-function add-forward-rule-trigger (predication truth-value trigger-object context rule-name)
  :documentation "Add a forward rule trigger.")

(define-protocol-function add-backward-rule-trigger (predication truth-value trigger-object context rule-name)
  :documentation "Add a backward rule trigger.")

(define-protocol-function add-backward-question-trigger (predication truth-value trigger-object context question-name)
  :documentation "Add a backward question trigger.")

(define-protocol-function delete-forward-rule-trigger (predication truth-value rule-name context)
  :documentation "Remove a forward rule trigger.")

(define-protocol-function delete-backward-rule-trigger (predication truth-value rule-name context)
  :documentation "Remove a backward rule trigger.")

(define-protocol-function delete-backward-question-trigger (predication truth-value question-name context)
  :documentation "Remove a backward question trigger.")

(define-protocol-function locate-forward-rule-trigger (predication truth-value continuation context rule-name)
  :declaration (declare (sys:downward-funarg continuation))
  :documentation "Locate a forward rule trigger.")

(define-protocol-function locate-backward-rule-trigger (predication truth-value continuation context rule-name)
  :declaration (declare (sys:downward-funarg continuation))
  :documentation "Locate a backward rule trigger.")

(define-protocol-function locate-backward-question-trigger (predication truth-value continuation context question-name)
  :declaration (declare (sys:downward-funarg continuation))
  :documentation "Locate a backward question trigger.")

(define-protocol-function write-forward-rule-full-matcher (rule-trigger predicate-variable-name environment)
  :function (if (predication-maker-p rule-trigger)
		(compile-time-fake-method-apply 'write-forward-rule-full-matcher
						rule-trigger predicate-variable-name environment)
		(error "write-forward-rule-full-matcher" rule-trigger))
  :definer matcher-cache-clearing-compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler
  :documentation "Called from match compiler to write a forward rule full unification matcher.")

(define-protocol-function write-forward-rule-semi-matcher (rule-trigger predicate-variable-name environment)
  :function (if (predication-maker-p rule-trigger)
		(compile-time-fake-method-apply 'write-forward-rule-semi-matcher
						rule-trigger predicate-variable-name environment)
		(error "write-forward-rule-semi-matcher" rule-trigger))
  :definer matcher-cache-clearing-compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler
  :documentation "Called from match compiler to write a forward rule semi unification matcher.")

(define-protocol-function positions-forward-rule-matcher-can-skip (rule-trigger)
  :function (if (predication-maker-p rule-trigger)
		(compile-time-fake-method-apply 'positions-forward-rule-matcher-can-skip rule-trigger)
		(error "The argument to Positions-Forward-Rule-Matcher-Can-Skip ~s is not a predication source designator"
		       rule-trigger))
  :definer matcher-cache-clearing-compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler
  :documentation "Called from match compiler, telling which positions semi-matcher needn't check.")

(define-protocol-function write-backward-rule-matcher (rule-trigger variables-in-trigger environment name-of-pred-to-match)
  :function (if (predication-maker-p rule-trigger)
		(compile-time-fake-method-apply 'write-backward-rule-matcher rule-trigger variables-in-trigger environment
						name-of-pred-to-match )
		(error "write-backward-rule-matcher" rule-trigger))
  :definer compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler
  :documentation "Called from backward rule match compiler, to write the matcher"
  :declaration (declare (values form bindings used-data-stack-p)))

;;; Expand Forward Rule Trigger
;;;  return a data structure that drives the rest of the rule compiler.  This data structure represents
;;;  the Rete network in its most primitive form.  It's a non-empty lists of descriptors for Rete
;;;  trees.  Each node is either:
;;;  a match node consisting of (:match <predication> <name> <truth-value>)
;;;  an ignore node consisting of (:ignore)
;;;  an and node consisting of (:and . <other-nodes>)
;;;  an or node consisting of (:or . <other-nodes>)
;;;  or a Procedural node consisting of (:procedure code <name>)

;;; Expand Forward Rule Trigger
;;;  return a data structure that drives the rest of the rule compiler.  This data structure represents
;;;  the Rete network in its most primitive form.  It's a non-empty lists of descriptors for Rete
;;;  trees.  Each node is either:
;;;  a match node consisting of (:match <predication> <name> <truth-value>)
;;;  an ignore node consisting of (:ignore)
;;;  an and node consisting of (:and . <other-nodes>)
;;;  an or node consisting of (:or . <other-nodes>)
;;;  or a Procedural node consisting of (:procedure code <name>)

(define-protocol-function expand-forward-rule-trigger (rule-trigger support-variable-name truth-value context bound-variables)
  :documentation "Expand a forward rule trigger for the rule compiler, returns a trigger-type, the expansion and a truth-value"
  :function (if (predication-maker-p rule-trigger)
		(compile-time-fake-method-apply 'expand-forward-rule-trigger
						rule-trigger support-variable-name truth-value context bound-variables)
		`(:procedure ,rule-trigger ,support-variable-name ,bound-variables))
  :definer compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler)

(define-protocol-function compile-forward-rule-action (action then-part rule-name environment)
  :documentation "How to compile a predication as an action of a forward rule."
  :function
  (if (predication-maker-p action)
      ;; for predication-maker forms, we're generic on the name of the predicate
      (compile-time-fake-method-apply 'compile-forward-rule-action action then-part rule-name environment)
      ;; anything else is just lisp code, and we pass it through unchanged.
      action)
  :definer compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler)

;;; Expand Backward Rule Action
;;;  return a data structure that drives the rest of the rule compiler.  This data structure represents
;;;  What the If side of the rule should do in its most primitive form.  This is a nested tree of "nodes".
;;;  Each node is either:
;;;  a match node consisting of (:match <predication> <name> <truth-value> <ask-args>).  This node means: "produce code
;;;        that will ASK for matches to this pattern.  The argument to the continuation should be <name>.
;;;        The ask should be looking for predications whose truth-value is <truth-value>.  The other arguments
;;;        to ask should be <ask-args>
;;;  an and node consisting of (:and . <other-nodes>)
;;;  an or node consisting of (:or . <other-nodes>)
;;;  an ignore node consisting of (:ignore).  Means you don't have to do anything for this.
;;;  or a Procedural node consisting of (:procedure code <name>).

(define-protocol-function expand-backward-rule-action (rule-action support-variable-name truth-value other-ask-args context)
  :documentation "Expand a backward rule ation for the rule compiler, returns a trigger-type, the expansion and a truth-value"
  :function (if (predication-maker-p rule-action)
		(compile-time-fake-method-apply 'expand-backward-rule-action
						rule-action support-variable-name truth-value other-ask-args
						context)
		`(:procedure ,rule-action ,support-variable-name))
  :definer compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler)

(defgeneric destructure-justification (justification))

(define-protocol-function data-is-guaranteed-variable-free (rule-trigger)
  :function (if (predication-maker-p rule-trigger)
		(compile-time-fake-method-apply 'data-is-guaranteed-variable-free rule-trigger)
		(error "The argument to data-is-guaranteed-variable-free ~s is not a predication source designator"
		       rule-trigger))
  :definer matcher-cache-clearing-compile-time-property-protocol-definer
  :shower property-protocol-shower
  :killer property-protocol-killer
  :function-spec-handler property-protocol-function-spec-handler
  :documentation "Called from match compiler, tells whether database predications of this type may contain variables")
