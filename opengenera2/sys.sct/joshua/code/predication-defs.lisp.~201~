;;; -*- Mode: Joshua; Package: JI; Syntax: Joshua; Vsp: 0 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Created 2/25/87 17:43:48 by sgr running on GROUSE at SCRC.

;;;
;;; Defs file for the predications part of Joshua.  Don't put random non-rule-compiler-or-predication-
;;;   related things here.
;;;

;;;
;;; Instrumentation.
;;;

(defparameter *joshua-meters* nil "List of all the Joshua meters that Peek knows about.")

(tv:define-peek-meter Joshua-meters ()
  (tv:peek-hidden-data
    "Show/Hide Joshua meters"
    (tv:scroll-maintain-list #'(lambda () *joshua-meters*) #'tv:peek-display-counter)
    "Joshua meters"))

(defsubst peek-meter-initial-value (name)
  ;; where the initial value of the meter gets stashed.
  (get name 'peek-meter-initial-value))

(def-defining-form define-joshua-meter
		   :definer
  ((name initial-value &environment env)
   ;; define a Joshua meter
   (once-only (initial-value &environment env)
     ;; be nice to Zmacs, stash away the initial value, define the variable, and remember it.
     `(progn (record-source-file-name ',name 'define-joshua-meter)
	     (setf (peek-meter-initial-value ',name) ,initial-value)
	     (defparameter ,name ,initial-value)
	     (pushnew ',name *joshua-meters*))))
  :killer ((name) (lt:undefine-variable name))
  :shower
  ((form)
   ;; drives m-X Show Effect of Definition
   (let ((name (second form))
	 (initial-value (third form)))
     (cond ((not (symbolp name))
	    (zwei:barf "Mal-formed Joshua meter name: ~S" name))
	   ((member name *joshua-meters*)
	    ;; already defined
	    (zwei:typein-line "Evaluating this will redefine the Joshua Meter ~S, ~
                               ~&  giving it an initial value of ~S.  (Its current value is ~S.)"
			      name initial-value (symbol-value name)))
	   (t
	     ;; not already defined
	     (zwei:typein-line "Evaluating this will define the Joshua Meter ~S for the first time, ~
                                ~&  giving it an initial value of ~S."
			       name initial-value))))
   ;; prevent further macroexpansion
   t)
  :type-name "Joshua Meter")

(defun clear-joshua-meters ()
  ;; clear all the joshua meters
  (loop for meter in *joshua-meters*
	doing (set meter (peek-meter-initial-value meter))))

(define-joshua-meter *match-count*            0)
(define-joshua-meter *semi-match-count*       0)
(define-joshua-meter *successful-match-count* 0)
(define-joshua-meter *merge-count*            0)
(define-joshua-meter *semi-merge-count*       0)
(define-joshua-meter *successful-merge-count* 0)
(define-joshua-meter *forward-fire-count*     0)
(define-joshua-meter *backward-fire-count*    0)
(define-joshua-meter *stack-collector-overflows* 0)




(defstruct (discrimination-net-node

	     (:print-function
	       (lambda (self stream depth)
		 (ignore depth)
		 (si:printing-random-object (self stream :typep)
		   (format stream "~A" (discrimination-net-node-token self))))))
  ;; Structure of a node in the dn.
  token          ;token you have to have to get into this node.  Root has noise here.
  var-link       ;pointer to child that indexes simple variables
  seg-var-link   ;pointer to child that indexes segment variables
  info-or-table) ;predications or nil for terminal nodes; table or nil for non-terminal nodes

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")

0;;;
;;; Information kept around for debugging, recompilation, and so on.
;;; Here so it gets compiled early.
;;;

(defstruct (rule-debug-info
	     (:print-function
	       ;; print the name of the rule
	       (lambda (self stream depth)
		 (ignore depth)
		 (si:printing-random-object (self stream :typep)
		   (format stream "~S" (rule-debug-info-name self))))))
  name
  control
  triggers
  network
  context) 

(defsubst rule-debug-info (rule-name)
  ;; accessor for the rule debug info
  (get rule-name 'rule-debug-info))

(sys:defvar-resettable *rule-depth* 0 0 "Used for indenting Joshua trace messages.")

(defun joshua-trace-message-indentor (stream)
  ;; prefix a trace message with vertical-bars, to make it easier to follow
  (loop repeat *rule-depth*
	doing (write-char #\| stream)
	      (write-char #\Space stream)))

(defmacro format-trace (format-string &rest args)
  ;; prints message on *trace-output*, indented properly.
  `(progn (indenting-output (*trace-output* #'joshua-trace-message-indentor)
	    (format *trace-output* ,format-string ,@args))
	  t))

(defmacro with-another-rule (&body body)
  ;; keep rule trace messages indented properly
  `(let ((*rule-depth* (1+ *rule-depth*)))
     ,@body)) 


;;;
;;; Here 'cause it needs to be around for macroexpansion of ASK's.
;;;

(defsubst predicationp (object)
  ;; this is supposed to be much faster than (typep object 'predication)
  ;; timing reveals that (typep object 'predication) takes an average of 50ms,
  ;; whereas this takes an average of 37ms.  (i.e., 26% faster in 352.115)
  (and (instancep object)
       (member 'predication (flavor:flavor-all-components (sys:%instance-flavor object)))))

;;; Crock to ensure (typep object 'predication) compiles into a call to predicationp,
;;; not a call to flavor-typep.  This doesn't appear to interfere with the defflavor above.
;;; (deftype predication () '(satisfies predicationp))
;;; Here's the expansion of the above, with the record-source-file-name commented out,
;;;  to gag the warning.  This kind of kludgery bothers me, but I dunno what else to do.

(SETF (GET 'PREDICATION 'CLI::TYPE-LAMBDA-LIST) NIL)
(SETF (GET 'PREDICATION 'CLI::TYPENAME) "a predication")
(DEFUN (:PROPERTY PREDICATION DEFTYPE) NIL
  ;; (DECLARE (SYS:FUNCTION-PARENT PREDICATION DEFTYPE))
  '(SATISFIES PREDICATIONP))

;;;
;;; Truth values.  Here so they'll get open-coded.
;;;

;;; Bit 0 is for true, bit 1 is for false.  If both are on, that's contradictory.
(eval-when (eval load compile) ;used in macroexpanders of macros used below
(defconstant *unknown*       0)
(defconstant *true*          1)
(defconstant *false*         2)
(defconstant *contradictory* 3) ;for the TMS
)

(defparameter *truth-value-table* #(*unknown* *true* *false* *contradictory*)
  "For figuring out the name of a truth value")

(defun truth-value-name (truth-value)
  ;; return the symbol that names a truth-value
  (aref *truth-value-table* truth-value))

(defun negate-truth-value (truth-value &optional (if-unknown *unknown*))
  ;; negation only defined for true, false and unknown
  (select truth-value
    (*true* *false*)
    (*false* *true*)
    (*unknown* if-unknown)
    (otherwise
     (check-type truth-value (integer 0 2)
		 "a truth value of true, false, or unknown"))))

;;;
;;; Tools for analyzing the usage of variables within a rule.
;;;


(defstruct (variable-analysis
	     (:print-function
	       (lambda (self stream depth)
		 ;; print these in slightly less barbaric fashion than standard
		 (ignore depth)
		 (si:printing-random-object (self stream :typep :no-pointer)
		   ;; Looks like #<VARIABLE-ANALYSIS of FOO>
		   (format stream "of ~S" (variable-analysis-variable self))))))
  ;; analysis of how a variable is used in a rule
  variable					;; The Lisp variable
  triggers-found-in
  actions-found-in
  ;; position in final environment; not initial or internal ones.
  env-position 
  )

(defun find-corresponding-analysis (symbol variable-analyses)
  ;; find the variable analysis corresponding
  ;; to this logic-variable NAME.
  (find symbol variable-analyses :key #'variable-analysis-variable))

(defsubst trigger-variable-analysis-p (variable-analysis)
  ;; if this is a trigger variable
  (variable-analysis-triggers-found-in variable-analysis))

(defsubst action-variable-analysis-p (variable-analysis)
  ;; if this is an action variable
  (not (trigger-variable-analysis-p variable-analysis))) 

(defun rule-variable-initializations (variable-analyses)
  ;; tell each variable analysis what lisp variable is its vicar, and
  ;; Return a list of bindings to initialize those lisp variables.
  (loop for analysis in variable-analyses
	for name = (variable-analysis-variable analysis)
	collect name into names
	if (trigger-variable-analysis-p analysis)
	  ;; this variable is a trigger variable, so we can refer to it directly.
	  collect `(,name (lookup-in-environment .environment. ,(variable-analysis-env-position analysis)))
	    into forms
	else
	  ;; this variable is an action variable, so collect a binding and put the name
	  ;; in the analysis
	  collect `(,name (make-unbound-logic-variable ',name)) into forms
	finally (return (values names forms))
	   ))

(defun make-output-env-assignments (trigger-variable-analyses map)
  ;; make some assignments of variables to output environment slots, and return the map.
  (loop with output-map = map
	for (var . position) in output-map
	for analysis = (find-corresponding-analysis var trigger-variable-analyses)
	unless analysis
	  do (error "Can't make environment slot assignments, because ~S doesn't have ~
                     an analysis in ~\\LIST\\."
		    var trigger-variable-analyses)
	doing (setf (variable-analysis-env-position analysis) position)
	finally (return output-map)))

;;;
;;; Extensions to stack-let so we can cons predications on the stack.
;;; This version also fixes things up so we can cons lists on the stack.  Meter that, I suppose.
;;;

;;; Test cases
;(with-data-stack-list (foo 'a 'b 'c) (print foo) (describe-list-conses foo))
;(with-data-stack-list* (foo 'b 'c) (print foo) (describe-list-conses foo))
;(stack-let ((foo (data-stack-list* 'a 'b 'c))) (print foo) (describe-list-conses foo))

;;; Test cases
;(with-stack-predication (foo '(is-on a b c)) (print foo))
;(with-stack-predication (foo (list 'a 'b 'c)) (print foo))
;(with-stack-predication (foo (list* 'a 'b 'c)) (print foo)) -- doesn't fire here

;;; Bug:  STACK-LET is too smart; it's going in and stack-consing the list before the make-predication optimizer sees it.
;;;       Got around this by judiciously not telling it about data-stack-list and data-stack-list*.  However, it still
;;;       wont' optimize (make-predication (list ...) :stack) and so on.
(defvar *debugging-with-stack-predication* nil)
(defmacro with-stack-predication ((var structure-form &optional area &rest make-predication-keywords) &body body)
  ;; this assumes you've done a sys:with-data-stack on your own.
  (unless (member area '(nil :stack))
    (error "You can't specify an area for WITH-STACK-PREDICATION, unless it's NIL or :STACK."))
  (let* ((unoptimized `(make-predication ,structure-form :stack ,@make-predication-keywords))
	 (kludge (funcall (first (get 'make-predication 'compiler:optimizers)) unoptimized)))
    ;; The nonsense above is a crude attempt to figure out whether or not the make-predication optimizer
    ;; can fire on this kind of thing.  If it does, the thing it optimizes into won't cons.  If it doesn't,
    ;; we need to stack-let the structure to prevent the consing that would otherwise happen.
    (cond ((eq kludge unoptimized)
	   ;; the optimizer didn't fire, so let's try to avoid consing the structure arg, at least
	   (when *debugging-with-stack-predication*
	     ;;(break "~&unoptimized: ~S" structure-form)
	     (warn "Not optimizing WITH-STACK-PREDICATION of ~S." unoptimized))
	   (let ((list-var (sys:gensymbol "STACK-PRED-LIST")))
	     `(stack-let ((,list-var ,structure-form))
		;; don't use stack-let here, 'cause that's what called us!
		(let ((,var (make-predication ,list-var :stack ,@make-predication-keywords)))
		  ,@body))))
	  (t
	    ;; use the unoptimized version, which doesn't cons
	    `(let ((,var ,kludge))
	       ,@body)))))

(defun data-stack-list (&rest elements)
  ;; assumes you've already done a with-data-stack
  (let* ((length (length elements))
	 (array (sys:make-stack-array length :type 'sys:art-q-list)))
    (loop for i below length
	  for element in elements
	  doing (setf (aref array i) element))
    (g-l-p array)))

(defun data-stack-list* (&rest elements)
  ;; assumes you've already done a with-data-stack
  (let* ((length (length elements))
	(array (sys:make-stack-array length :type 'sys:art-q-list)))
    (loop for i below length
	  for element in elements
	  doing (setf (aref array i) element))
    (setf (sys:%p-cdr-code (locf (aref array (- length 2)))) sys:cdr-normal)
    (g-l-p array)))

(defun extend-stack-let ()
  ;; extend this, cleaning up previous attempts
  (setq si:*stack-let-operations*
	(delete-if #'(lambda (x) (member (car x) '(make-predication)))
		   si:*stack-let-operations*))
  ;; You extend STACK-LET* and friends by pushing the appropriate frob onto
  ;; SI:*STACK-LET-OPERATIONS*.  The format is
  ;; (<constructor> <min-args> <max-args> <wrapping-stack-constructor>).
  ;; See the other values on that list for examples.
  (push '(make-predication 1 nil with-stack-predication) si:*stack-let-operations*)
;  (push '(data-stack-list 0 nil with-data-stack-list) si:*stack-let-operations*)
;  (push '(data-stack-list* 0 nil with-data-stack-list*) si:*stack-let-operations*)
  )

(extend-stack-let) ;do it now (i.e., (eval load) time)

;;;
;;; Some data structures used by the question-asking mechanism.
;;;

(defstruct (question-info
	     (:print-function
	       (lambda (self stream depth)
		 (sys:printing-random-object (self stream :typep :no-pointer)
		   (format stream "for ~S" (question-info-name self))))))
  ;; structure describing this question's attributes.
  name
  importance
  pattern
  context)

(defsubst question-info (name)
  ;; as this is doing user io, it needn't be real fast
  (get name 'question-info))
