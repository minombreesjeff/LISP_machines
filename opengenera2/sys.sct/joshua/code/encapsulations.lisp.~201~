;;; -*- Mode: Joshua; Package: JOSHUA-INTERNALS; Syntax: Joshua -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Created 5/22/88 13:04:14 by hes running on HOLBROOK at JP.

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; I'll keep the trivial encapsulations here, but put any with real
;;; code dependencies in the file with the function they encapsulate.

;;; Encapsulate the generic functions for ask, tell, n-t-v-c, justify,  and unjustify
0(define-joshua-encapsulation (encaps-ask-internal ask-internal t '(:ask))
  :before-body
  '(let ((pred (car si:arglist))
	 (truth-value (second si:arglist)))
    (trace-ask pred :truth-value truth-value )))

(define-joshua-encapsulation (encaps-tell-internal tell-internal t '(:tell))
  :before-body
  '(destructuring-bind (predication truth-value justification) si:arglist  
    (trace-tell predication :truth-value truth-value :justification justification)))

(define-joshua-encapsulation (encaps-untell untell t '(:untell))
  :before-body
  '(let ((predication (car si:arglist)))
     (trace-untell predication)))

(define-joshua-encapsulation (encaps-notice-truth-value-change
			       notice-truth-value-change
			       t
			       '(:notice-truth-value-change))
  :before-body
  '(destructuring-bind (predication old-truth-value) si:arglist
     (trace-notice-truth-value-change
       predication
       :truth-value (predication-truth-value predication)
       :old-truth-value old-truth-value)))

(define-joshua-encapsulation (encaps-act-on-truth-value-change
			       act-on-truth-value-change
			       t
			       '(:act-on-truth-value-change))
  :before-body
  '(destructuring-bind (predication old-truth-value) si:arglist
     (trace-act-on-truth-value-change
       predication
       :truth-value (predication-truth-value predication)
       :old-truth-value old-truth-value))) 

(define-joshua-encapsulation (encaps-justify
			       justify
			       t
			       '(:justify))
  :before-body
  '(destructuring-bind (database-predication truth-value . justification) si:arglist
     (trace-justify database-predication :truth-value truth-value
		    :justification justification)))

(define-joshua-encapsulation (encaps-unjustify unjustify t '(:unjustify))
  :before-body
  '(let ((predication (car si:arglist)))
     (trace-unjustify predication :truth-value (predication-truth-value predication))))




;;;; Encapsulation stuff that couldn't come earlier


1;;; As these aren't protocol functions we can't really encapsulate the generic.
;;; The logic here is very dependent on the TMS functions they encapsulate.
0(define-joshua-encapsulation (encaps-bring-in-with-truth-value
			       (flavor:method ltms::bring-in-with-truth-value ltms:ltms-mixin)
			       t
			       '(:bring-in))
  :before-body
  1;; args are self map generic new-clause and truth-value
0  '(destructuring-bind #+3600 (predication ignore ignore new-clause truth-value)
		       #+IMach (ignore predication new-clause truth-value)
		       si:arglist
     (when (= (predication-truth-value predication) *unknown*)
       (trace-bring-in predication :truth-value truth-value
		       :old-truth-value (predication-truth-value predication)
		       :justification new-clause
		       ))))

(define-joshua-encapsulation (encaps-propagate
			       (flavor:method ltms::propagate ltms::clause)
			       t
			       '(:contradiction))
  :before-body
  '(destructuring-bind #+3600 (clause ignore ignore . cause)
		       #+IMach (ignore clause . cause)
		       si:arglist
     (when cause
       (setf cause (car cause))
       (when (and cause
		  (zerop (ltms::clause-number-of-satisfiable-literals clause)))
	 (trace-contradiction cause :truth-value
			      (if (= (predication-truth-value cause) *true*) *false* *true*)
			      :old-truth-value (predication-truth-value cause)
			      :justification clause)))))

(define-joshua-encapsulation  (encaps-update-predication-to-reflect-retraction
				(flavor:method ltms::update-predication-to-reflect-retraction
					       ltms:ltms-mixin)
				t
				'(:retract))
  :before-body
  '(destructuring-bind #+3600 (predication ignore ignore previous-truth-value)
		       #+IMach (ignore predication previous-truth-value)
		       si:arglist
     (let ((old-truth-value (predication-truth-value predication)))
       (when ( 0 (logand previous-truth-value old-truth-value))
	 (trace-retract predication :truth-value old-truth-value
			:justification (ltms::predication-supporting-clause predication))))))

;;; This encapsulation is no longer used and is probably a little out of data
;(define-joshua-encapsulation (encaps-rete-network-match-predication
;			       rete-network-match-predication
;			       nil
;			       '(:try-match :succeed-match :fail-match))
;  :before-body
;  `(let ((node (first si:arglist))
;	 (predication (second si:arglist)))
;     (cond ((eql (rete-match-node-truth-value node) (predication-truth-value predication))
;	    (incf *match-count*)
;	    (trace-try-match node :match-predication predication
;			     :match-pattern (match-id-pattern
;					      (car (Rete-match-node-match-ids node))) )
;	    (multiple-value-bind (match-env has-logic-variables)
;		(cond ((predication-logic-variable-free-p predication)
;		       (incf *semi-match-count*)
;		       (funcall (Rete-node-semi-unification-code Node) predication))
;		      (t
;			(funcall (Rete-node-code Node) predication)))
;	      (cond (match-env
;		     (trace-succeed-match node
;					  :match-predication predication
;					  :match-pattern
;					  (match-id-pattern
;					    (car (Rete-match-node-match-ids node)))
;					  :environment match-env)
;		     (incf *successful-match-count*)
;		     (let ((state-entry (make-rete-internal-state
;					  :environment match-env
;					  :predications (list predication)
;					  :has-logic-variables (if has-logic-variables 1 0)
;					  :my-nodes (list node))))
;		       (push state-entry (predication-rete-states predication))
;		       (rete-proceed-to-next-node state-entry node)))
;		    (t (trace-fail-match node :match-predication predication
;					 :match-pattern
;					 (match-id-pattern
;					    (car (Rete-match-node-match-ids node))))))))
;	   (t (push node (predication-stimulate-list predication))))))

;;;; Here's the encapsulation for the merging.
;(define-joshua-encapsulation (encaps-Rete-network-merge-environments
;			       Rete-network-merge-environments
;			       nil
;			       '(:try-merge :succeed-merge :fail-merge))
;  :before-body
;  `(destructuring-bind (node side first-state second-state)
;       si:arglist
;       (cond ((not (zerop (rete-internal-state-inactive second-state)))
;	      ;; the other state is inactive, we shouldn't do the merge now
;	      (when (zerop (rete-internal-state-dead second-state))
;		;; but he hasn't been killed.  Flip the value of side for his
;		;; entry.
;		(push (list node (if (eql side 'left) 'right 'left) first-state)
;		      (rete-internal-state-stimulate-list second-state))))
;	     (t
;	      (let ((left-state first-state) (right-state second-state))
;		(when (eql side 'right) (rotatef left-state right-state))
;		(let ((left-predications (rete-internal-state-predications left-state))
;		      (right-predication (car (rete-internal-state-predications right-state)))
;		      (left-env (rete-internal-state-environment left-state))
;		      (right-env (rete-internal-state-environment right-state)))
;		  (incf *merge-count*)
;		  (trace-try-merge node :merge-left left-state :merge-right right-state)
;		  (multiple-value-bind (merge-env has-logic-variables)
;		      (cond ((and
;			       (zerop (rete-internal-state-has-logic-variables left-state))
;			       (zerop (rete-internal-state-has-logic-variables right-state)))
;			     ;; both environments are variable-free, so
;			     ;; semi-unification will work
;			     (incf *semi-merge-count*)
;			     (funcall (Rete-node-semi-unification-code Node)
;				      left-env right-env))
;			    (t
;			      ;; full unification required (but what if just 1 has variables?)
;			      (funcall (Rete-node-code node) left-env right-env)))
;		    (cond (merge-env
;			 (trace-succeed-merge node :merge-left left-state
;					      :merge-right right-state
;					      :environment merge-env)
;			 ;; merge succeeded
;			 (incf *successful-merge-count*)
;			 (let ((new-state-entry
;				 (make-rete-internal-state
;				   :environment merge-env
;				   :predications (cons right-predication left-predications)
;				   :has-logic-variables (if has-logic-variables 1 0)
;				   :parent-states (list left-state right-state)
;				   :my-nodes (list node))))
;			   (push new-state-entry (rete-internal-state-children left-state))
;			   (push new-state-entry (rete-internal-state-children right-state))
;			   (rete-proceed-to-next-node new-state-entry node)))
;			(t (trace-fail-merge node :merge-left left-state
;					     :merge-right right-state))))))))))


