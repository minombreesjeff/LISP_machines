;;; -*- Mode: LISP; Package: COMMON-LISP-USER; Syntax: Common-Lisp; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Created Friday the eighteenth of October, 1985; 8:55:30 pm by sgr on GROUSE at SCRC

;;;
;;; Package definitions for Joshua.D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") 0This stuff is not in the defsystem
;;; file so that it's patchable.  E.g., we1 0might want to export a new
;;; symbol in a patch.  (Also due to make-system brain-death in always loading
;;; the latest version of the defsystem file.)
;;;
;;; The symbols fall into 3 classes:
;;;
;;; * Undocumented internal symbols.
;;;   Users shouldn't ever have to refer to these.
;;;   If they do, either they're doing something wrong or  we forgot to export something.
;;;   These are internal symbols of JI.

;;; * Potentially-dangerous low-level things:
;;;   We'd rather users not mess with these, but it's ok if they know what they're doing.
;;;   These are external symbols exported from JI.

;;; * Documented user-available things in Joshua.
;;;   These are in the JOSHUA package.

;;; Here's how that is implemented.  There are 3 packages:1 Joshua-Internals0, 1Joshua0, 
;;; and 1Joshua-User0.  Implementation is done in 1Joshua-Internals0 which uses Joshua.
;;; So symbols in category 3 are simply defined in Joshua and put into the export-list of Joshua.
;;; User programs should be written in packages which use Joshua and either CL or SCL.
;;; Joshua-User is an example of such a package.  
;;; Such packages inherit all the category 3 symbols, making them accessible without prefix.
;;; Category 2 symbols are put in the export list of JI.  This makes them accessible as JI:foobar.

;;; 1Implementors note0:  If you want to "promote" a symbol from category 1 (protected internals)
;;; to category 2 (an accessible internal).
;;; then you add it to the :EXPORT list
;;; of JI (but don't patch the defpackage).   
;;; Then put (export '(JI::foo)) in the patch.  Note that you (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")must not0 do this in your
;;; running  world before you make the patch, or the patch's bin file
;;; will get ji:foo as opposed to ji::foo  dumped to it.  You could
;;; unexport before making the patch, I suppose. Or make the patch say
;;; (export (list (intern "FOO" 'ji))).

;;;   If you want to promote it to category 2 (user accessible) add it to the :EXPORT
;;;   list of JOSHUA (but don't patch the defpackage).  Then add
;;;   (globalize 'ji::foo "JOSHUA") to the patch.  Be sure the first arg
;;;   to globalize is the symbol, not a string, so eq-ness will be
;;;   preserved.  Note that you 2must not0 do this in your running world
;;;   before you make the patch, or the patch's bin file will get
;;;   joshua:foo as opposed to ji::foo dumped to it.
;;;   (globalize (intern "FOO" 'ji) "JOSHUA") might be safer.

(defpackage Joshua
  ;; user-visible Joshua stuff goes here
  (:use) ;code shouldn't be written in this package
  ;; "Be my guest"
  (:export
    def-defining-form undef-defining-form
    ;;
    of
    logic-variable-name
    with-unbound-logic-variables
    ;; predicate stuff
    predication predicationp make-predication
    define-predicate-model undefine-predicate-model define-predicate undefine-predicate
    default-predicate-model default-protocol-implementation-model
    default-ask-model default-tell-model
    asking-all suppressing-unanswerable-queries
    default-rule-compilation-model
    with-statement-destructured predication-predicate predication-statement
    predication-maker predication-maker-statement predication-maker-predicate
    with-predication-maker-destructured predication-maker-p
    logic-variable-maker logic-variable-maker-name logic-variable-maker-p
    known provable
    ;; how to define elements of the protocol
    undefine-predicate-method define-predicate-method 
    ;; the Joshua protocol
    say 
    ask tell untell
    ask-data ask-rules ask-questions
    clear insert fetch uninsert
    justify notice-truth-value-change act-on-truth-value-change unjustify support
    current-justification all-justifications
    build-justification-from-backward-support
    nontrivial-tms-p
    prefetch-forward-rule-matches
    map-over-forward-rule-triggers map-over-backward-rule-triggers map-over-backward-question-triggers
    add-forward-rule-trigger add-backward-rule-trigger add-backward-question-trigger 
    delete-forward-rule-trigger delete-backward-rule-trigger delete-backward-question-trigger
    locate-forward-rule-trigger locate-backward-rule-trigger locate-backward-question-trigger
    write-forward-rule-full-matcher write-forward-rule-semi-matcher
    compile-forward-rule-action expand-forward-rule-trigger
    write-backward-rule-matcher expand-backward-rule-action
    positions-forward-rule-matcher-can-skip
    ;; iterative syntax for the above mapcar-like versions
    do-queries* do-queries-named*
    ;; discrimination net stuff
    discrimination-net-fetch discrimination-net-insert discrimination-net-clear
    discrimination-net-uninsert
    make-discrimination-net-node
    ;; predicate models
    discrimination-net-data-mixin
    ask-data-only-mixin ask-rules-only-mixin ask-questions-only-mixin
    ask-data-and-rules-only-mixin ask-rules-and-questions-only-mixin
    ask-data-and-questions-only-mixin
    no-variables-in-data-mixin
    tell-error-model ask-error-model error-model
    basic-tms-mixin
    location-value-model locate-predication-value
    ;; keywords to ask & tell, so define-*-method can grok user code
    justification do-backward-rules query-context
    ;; unification stuff
    with-unification unify variant
    ;; rules
    defrule undefrule
    *unknown* *true* *false* *contradictory* negate-truth-value
    predication-truth-value different-objects succeed
    ;; questions
    defquestion undefquestion
    ;; TMS interface
    triggers tms-contradiction tms-contradiction-hard-contradiction-flavor
    tms-hard-contradiction 
    tms-contradiction-justification tms-contradiction-contradictory-predication
    tms-contradiction-premises tms-contradiction-non-premises tms-contradiction-support
    tms-bits
    destructure-justification remove-justification
    explain
    support-with-name assumption-support premise-support
    ;; graphing things
    graph-rete-network graph-discrimination-net graph-tms-support graph-assumption-support
    ;; ask continuation functions
    print-query say-query print-query-results graph-query-results
    ask-query ask-query-truth-value ask-database-predication ask-derivation
    map-over-database-predications
    rule question
    database-predication			;presentation type
    truth-value
    copy-object-if-necessary
    ;; For the Object-Modelling feature, The predicate-model mixins
    slot-value-mixin type-of-mixin part-of-mixin equated-mixin
    ;; ... the predicates
    value-of object-type-of part-of equated
    ;; ... and useful functions
    add-action remove-action
    map-over-object-hierarchy
    all-slot-names map-over-slots-of-object map-over-slots-in-object-hierarchy
    superpart
    follow-path path-name role-name
    make-object define-object-type kill
    slot-current-predication slot-current-value slot-my-object
    ;; The atomic-And Features
    atomic-and-model atomic-and with-atomic-action
    ;; Slot presentations and commands
    slot-presentation com-change-slot-value com-set-slot-value
    object-presentation com-describe-joshua-object
    ))

;; The things in bold probably shouldn't be exported
;; I'm testing that now.

(defpackage Joshua-Internals
  ;; Joshua developers write code here
  (:nicknames "JI")
  (:use "Joshua" "SCL")
  ;; "Well, if you insist"
  (:export
    *blink-predications-in-joshua-mode*   *blink-sets-in-joshua-mode*
    *blink-variables-in-joshua-mode*      *blink-cell-references-in-joshua-mode*
    *blink-vertical-bars-in-joshua-mode*  *blink-strings-in-joshua-mode*
    *blink-comments-in-joshua-mode*
    ;; Backquoting machinery
    backquote *backquote-comma-flag* *backquote-comma-atsign-flag* *backquote-comma-dot-flag*
    ;; defaults to go into the attr list made by m-X Create Initial Joshua Attribute List
    *default-package-for-joshua-mode*     *default-lowercase-for-joshua-mode*
    *default-base-for-joshua-mode*        
    ;; readtable management
    ;; maybe define a mode on top of this?
    joshua-mode
    *data-discrimination-net*
    *forward-trigger-discrimination-net*
    *backward-trigger-discrimination-net*
    *question-discrimination-net*
    variable-predicate-model variable-predicate
    ;; rules
    make-unbound-logic-variable
    clear-rule
    predicate-synonyms
    predicate-is-synonym-for undefine-predicate-synonym define-predicate-synonym 
    predicate-max-args predicate-min-args predicate-rest-arg predicate-arglist 
    ;; iv's of a contradiction flavor; used by TMS writers
    statement bits
    premises justification contradictory-predication non-premises
    predication-bits-has-been-in-database
    predication-bits-truth-value predication-bits-has-logic-variables
    predication-bits-ive-been-in-before predication-bits-tms-bits
    predication-bits-ive-been-untold
    predication-generation-mark generation-mark *generation-counter*
    ask-internal tell-internal
    print-database-predication-without-truth-value
    ;; meters
    *match-count* *merge-count* *forward-fire-count* *backward-fire-count*
    *successful-match-count* *successful-merge-count* clear-meters
    ask-question
    ;; condition names for modelling failures
    model-cant-handle-query model-cant-handle-query-query model-cant-handle-query-model
    model-can-only-handle-positive-queries
    model-can-only-handle-positive-queries-query
    model-can-only-handle-positive-queries-model
    ask-variable-predicate-escape
    setf-carefully
    update-after-copying			;Method to update a predication after copy-object-if-necessary
    ))

(defpackage Joshua-User
  ;; A typical Joshua application package.
  ;; Applications should imitate this to get their own packages.
  (:nicknames "JU")
  (:relative-names-for-me (joshua user)) ;make user a synonym for ju relative to joshua 
  (:use "Joshua" "SCL"))

(defpackage LTMS
  ;; package used by the LTMS; other TMS writers make their own.
  (:use "Joshua" "JI" "SCL")
  ;; This is for the object-modelling Stuff
  (:shadow value-of object-type-of part-of equated)
  (:export ltms-mixin ltms-predicate-model one-of contradiction
	   ltms-contradiction ltms-hard-contraction
	   backtrack nogood
	   ;; This is for the object-modelling Stuff
	   value-of object-type-of part-of connected-to equated))
