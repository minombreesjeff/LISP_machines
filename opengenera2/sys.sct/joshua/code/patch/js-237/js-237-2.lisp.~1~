;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for JOSHUA version 237.2
;;; Reason: Function JI::NEW-COPY-UNIFIED-VALUE:  Dont use home-for-wayward-variables.  Bind *new-variables*
;;; to the newly cons'd vars.
;;; Function JI::WRITE-FULL-MATCHER:  play by those rules
;;; Predicate Method (JOSHUA:WRITE-FORWARD-RULE-FULL-MATCHER JOSHUA:DEFAULT-RULE-COMPILATION-MODEL):  same
;;; Function JI::WRITE-SEMI-MATCHER:  same
;;; Predicate Method (JOSHUA:WRITE-FORWARD-RULE-SEMI-MATCHER JOSHUA:DEFAULT-RULE-COMPILATION-MODEL):  same
;;; Function JI::WRITE-ENVIRONMENT-MERGERS:  same
;;; Function JI::WRITE-FULL-MERGER:  same
;;; Function JI::WRITE-SEMI-MERGER:  same
;;; Function JI::ANALYZE-ENVIRONMENT-SHARING:  same
;;; Function JI::GENERATE-MERGE-ID:  same
;;; Function JI::WRITE-FORWARD-PROCEDURE-CODE:  same
;;; Function JI::WRITE-FORWARD-OR-TRIGGER-SHUFFLER:  same
;;; Written by HES, 3/06/92 13:30:01
;;; while running on Lemon from FEP0:>sss-world.ilod.1
;;; with Experimental System 440.33, Experimental CLOS 425.6, Experimental RPC 429.0,
;;; Experimental Embedding Support 421.0, Experimental MacIvory Support 435.3,
;;; Experimental UX Support 430.0, Experimental Development Utilities 425.1,
;;; Experimental Old TV 423.0, Experimental Zwei 423.3, Experimental Utilities 433.2,
;;; Experimental RPC Development 424.0, Experimental MacIvory Development 423.0,
;;; Experimental UX Development 429.0, Experimental Server Utilities 431.0,
;;; Experimental Serial 424.8, Experimental Hardcopy 434.1, Experimental Zmail 431.0,
;;; Experimental LMFS Defstorage 407.0, Experimental SCSI 420.1,
;;; Experimental Tape 433.2, Experimental LMFS 432.0, Experimental NSage 429.1,
;;; Experimental Extended Help 430.0, Experimental CL Developer 417.0,
;;; Experimental Documentation Database 429.35, Experimental IP-TCP 439.4,
;;; Experimental IP-TCP Documentation 412.0, Experimental CLX 435.0,
;;; Experimental X Remote Screen 433.1, Experimental X Documentation 411.2,
;;; Experimental NFS Client 429.0, Experimental NFS Documentation 413.1,
;;; Experimental DNA 428.0, Experimental Metering 433.0,
;;; Experimental Metering Substrate 433.0, Experimental Conversion Tools 424.5,
;;; Experimental Hacks 429.0, Experimental Mac Dex 422.0,
;;; Experimental HyperCard/MacIvory 422.0, Experimental Statice Runtime 413.2,
;;; Experimental Statice 434.0, Experimental Statice Browser 410.0,
;;; Experimental Statice Documentation 416.0, Experimental CLIM 34.29,
;;; Experimental CLIM Documentation 34.1, Experimental CLIM Demo 34.2,
;;; Experimental Symbolics Concordia 433.0,
;;; Experimental Essential Image Substrate 421.0, Experimental Image Substrate 429.0,
;;; Experimental Graphic Editing Documentation 422.1,
;;; Experimental Graphic Editing 430.0, Experimental Graphic Editor 429.0,
;;; Experimental Bitmap Editor 430.0, Experimental Postscript 425.0,
;;; Experimental Concordia Documentation 422.0, Experimental Lock Simple 426.0,
;;; Experimental Producer 410.0, Version Control 404.4, Compare Merge 403.0,
;;; VC Documentation 401.0, Symbolics In-House 432.5,
;;; Symbolics In-House Documentation 414.8, SCRC 430.0, Weather User 414.0,
;;; Logical Pathnames Translation Files NEWEST, Schema Flex 5.16, Joshua 237.1,
;;; Experimental Symbolic Switching System 18.0,
;;; Experimental SSS System Definitions 13.0,
;;; Experimental Extensions to Common LISP 19.0,
;;; Experimental Genera Modifications for SSS 19.0,
;;; Experimental SSS Software Development Environment 19.0,
;;; Experimental SSS OODB Manager 19.0, Experimental SSS Component Manager 20.0,
;;; Experimental SSS Base Level Components 19.0,
;;; Experimental SSS User Interface 19.0, Experimental SSS Billing Framework 12.0,
;;; Experimental SSS Application 19.0, Experimental SSS Call Processing 2 19.0,
;;; Experimental SSS Inbound Switch 4.0, Experimental SSS OODB SM System 6.0,
;;; Experimental SSS Simulator 19.0, Experimental SSS System Test Suite 20.0,
;;; Experimental SSS System Application Commands 8.0,
;;; Experimental SSS Documentation 20.0, Jericho 237.0, cold load 1,
;;; Ivory Revision 2B (FPA enabled), FEP 325, FEP0:>I325-loaders.flod(8),
;;; FEP0:>I325-info.flod(8), FEP0:>I325-debug.flod(8), FEP0:>I325-lisp.flod(8),
;;; FEP0:>I325-kernel.fep(9), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.4.6, MacIvory SCSI Manager Server 4.1.2,
;;; Toolbox Servers 4.1.2, MacIvory & RPC library 6.1.4, MacIvory life support 4.1.3,
;;; Symbolics keyboard 2.0.2, Macintosh System Software 6.0.8,
;;; 1152x814 Screen with Genera fonts, Machine serial number 20960, Macintosh II,
;;; Symbolics keyboard,
;;; Fix schema flex remove domain index cleanup (from Y:>feinberg>Pending>fix-schema-flex-remove-domain-index-cleanup.lisp.1).



(SYSTEM-INTERNALS:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "JOSHUA:CODE;MATCHER.LISP.220")


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


;;;; Support for the new way of doing things.
;;; Here *new-variables* holds any  variables.
;;; We don't use home-for-wayward-variables anyplace.

(defun new-copy-unified-value (value)
  ;; ensure that structures get copied.
  (declare (special *new-variables*))
  (labels ((copy-value (value)
	     (declare (values new-value new-value-p))
	     ;; we have to explicitly tell whether we changed anything, since
	     ;; unified variables will be eq
	     (typecase value
	       (cons
		 (multiple-value-bind (new-car new-car-p)
		     (copy-value (car value))
		   (multiple-value-bind (new-cdr new-cdr-p)
		       (copy-value (cdr value))
		     (if (or new-car-p new-cdr-p
			     (let ((cons-location (sys:%make-pointer sys:dtp-locative value)))
				 ;; If either the car or the cdr
				 ;; involves a logic variable, we'd
				 ;; better copy.
				 (or (= (sys:%p-data-type cons-location) sys:dtp-logic-variable) ;lv in car
				     (and (= (sys:%p-cdr-code cons-location) sys:cdr-normal)	;huh?
					  (= (sys:%p-data-type (sys:%make-pointer-offset sys:dtp-locative cons-location 1))
					     sys:dtp-logic-variable)))))
			 (values (cons new-car new-cdr) t)
			 (values value nil)))))
	       (unbound-logic-variable
		 (cond ((member value *new-variables* :test 'eq)
			;; it's in the new environment already
			(values value t))
		       (t
			;; put a new variable in the wayward variable list
			(let ((new-variable (make-unbound-logic-variable (logic-variable-name value))))
			  (push new-variable *new-variables*)
			  (%unify-variable value new-variable)
			  (values new-variable t)))))
	       (predication
		 (multiple-value-bind (new-pred new-p)
		     (copy-value (predication-statement value))
		   (if new-p
		       (values (make-predication new-pred) t)
		       (values value nil))))
	       (otherwise (values value nil)))))
    (copy-value value)))



;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


;;; Assuming the variables are just symbols.  Same for support variable.
(defun write-full-matcher (predication-maker output-map variables support-variable environment)
  ;; write a full unification matcher for pattern.  This is just a
  ;; closed call to unify until we write an open-coded one.
  (let ((generated-code (write-forward-rule-full-matcher predication-maker 'predication-to-match environment)))
    (when generated-code
      `(lambda (predication-to-match)
	 (compiler-let ((*known-lvs* ',(union *known-lvs* variables)))
	   (with-unbound-logic-variables ,variables
	     (with-unification	    
	       ;; first do the unification
	       ,generated-code
	       ,@(when support-variable
		   `((%unify-variable ,support-variable predication-to-match)))
	       ;; now construct the environment
	       (let ((environment (make-array ,(length output-map)))
		     (*new-variables* nil))
		 (declare (special *new-variables*))
		 ;; put the value of each variable in the pattern into the environment
		 ;; this copies structures if necessary
		 ,@(loop for (variable . position) in output-map
			 if (member variable variables)
			   ;; we actually bound this variable, so put the value in the slot
			   collect (if (eql variable support-variable)
				       `(setf (lookup-in-environment environment ,position) ,variable)
				       `(setf (lookup-in-environment environment ,position)
					      (new-copy-unified-value ,variable)))
			 else
			   ;; this variable is someone else's problem (a disjunct, probably).
			   ;; Make it unbound.
			   collect `(make-logic-variable-unbound environment ,position))
		 ;; and return the environment
		 (values environment t)))))))))



;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(define-predicate-method (write-forward-rule-full-matcher default-rule-compilation-model) (predication-variable environment)
  (ignore environment)
  `(unify-predication ,self ,predication-variable))


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(defun write-semi-matcher (predication-maker output-map variables support-variable environment)
  (let ((new-variable-introduced (loop for (variable) in output-map
				       thereis (not (member variable variables)))))
      `(lambda (predication-to-match)
	 (ignore predication-to-match)
	 (let ,variables
	   ;; create some local variables as vicars for the logic variables, then test
	   (and 
		,(write-forward-rule-semi-matcher predication-maker 'predication-to-match environment)
		,@(when support-variable
		   `((setq ,support-variable predication-to-match)))
		;; don't cons the environment until we've succeeded
		(let* ((environment (make-array ,(length output-map))))
		  ;; bash the values of the vicars into the environment
		  ,@(loop for (variable . position) in output-map
			  if (member variable variables)
			    ;; we actually bound this variable, so put the value in the slot
			    collect `(setf (lookup-in-environment environment ,position) ,variable)
			  else
			    ;; this variable is someone else's problem (a disjunct,
			    ;; probably).  Make it unbound.
			    collect `(make-logic-variable-unbound environment ,position))
		  ;; and return the environment
		  (values environment ,new-variable-introduced)))))))


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(define-predicate-method (write-forward-rule-semi-matcher default-rule-compilation-model) (pred-variable environment)
  (let ((variables-seen nil))
    (labels ((compile-predication-match (predication-maker object-reference)
	       (let ((positions-to-skip (positions-forward-rule-matcher-can-skip predication-maker))
		     (statement (predication-maker-statement predication-maker)))
		 ;; compiles a match for a predication-maker
		 (if (member statement positions-to-skip)
		     ;; supposed to skip what's in predicate position; go hack the arguments.
		     (compile-match (cdr statement) `(cdr ,object-reference) positions-to-skip)
		     ;; have to hack both predicate and args, presumably.
		     (once-only (object-reference &environment environment)
		       `(and ,(compile-match (car statement)
					     `(car ,object-reference) positions-to-skip)
			     ,(compile-match (cdr statement)
					     `(cdr ,object-reference) positions-to-skip))))))
	     (compile-match (pattern object-reference positions-to-skip)
	       ;; The workhorse of this thing.  dispatch on the type.
	       (typecase pattern
		 (logic-variable-maker
		   ;; trying to match a logic variable -- these never get skipped?
		   (let ((name (logic-variable-maker-name pattern)))
		     (cond ((member name variables-seen)
			    ;; not first occurrence -- unify
			    `(unify-constants-p ,object-reference ,name))
			   (t
			    ;; first occurrence -- just save it
			    (push name variables-seen)
			    `(progn
			       (setq ,name ,object-reference)
			       t)))))
		 (predication-maker
		   ;; make sure target is also a predication and call a matcher
		   (if (member pattern positions-to-skip)
		       t
		       (once-only (object-reference &environment environment)
			 `(and (typep ,object-reference 'predication)
			       ,(compile-predication-match
				  pattern `(predication-statement ,object-reference))))))
		 (cons
		   ;; dispatch on car & cdr (to deal properly with dotted lists)
		   (if (member pattern positions-to-skip)
		       (compile-match (cdr pattern) `(cdr ,object-reference) positions-to-skip)
		       (once-only (object-reference &environment environment)
			 `(and (consp ,object-reference)
			       ,(compile-match (car pattern)
					       `(car ,object-reference)
					       positions-to-skip)
			       ,(compile-match (cdr pattern)
					       `(cdr ,object-reference)
					       positions-to-skip)))))
		 (null
		   ;; found a nil
		   (if (member pattern positions-to-skip)
		       t
		       `(null ,object-reference)))
		 (string
		   ;; found a string
		   (if (member pattern positions-to-skip)
		       t
		       `(string= ,object-reference ',pattern)))
		 (t
		   ;; anything else (usually symbol, number, or something like that)
		   (if (member pattern positions-to-skip)
		       t
		       `(eql ,object-reference ',pattern))))))
      (compile-predication-match self `(predication-statement ,pred-variable)))))





;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(defun write-environment-mergers (rule-name left-map right-map semi-unification-only)
  ;; given left and write maps, return function to merge and map of its output
  ;; Test case:
  ;;  (write-environment-merger '((a . 0) (b . 1) (c . 2) (d . 3))
  ;;                            '((c . 0) (d . 1) (e . 2)))
  (declare (values full-merger semi-merger output-map merge-id))
  (labels
    ((validate-output-map (left-map right-map output-map)
       ;; every variable in either left or right must be in output
       (when (set-difference left-map output-map :test #'(lambda (x y) (car x) (car y)))
	 (error "There is a variable in the left map, ~S, that's not in the output map ~S."
		left-map output-map))
       (when (set-difference right-map output-map :test #'(lambda (x y) (car x) (car y)))
	 (error "There is a variable in the right map, ~S, that's not in the output map ~S."
		right-map output-map))
       ;; no variable can have more than 1 slot
       ;; no 2 distinct variables can get the same slot
       ))
    ;; the body
    (let ((output-map (generate-merged-environment-map left-map right-map)))
      (validate-output-map left-map right-map output-map)
      (multiple-value-bind (shared-vars unshared-left-vars unshared-right-vars)
	  (analyze-environment-sharing left-map right-map)
	(let ((merge-id (generate-merge-id left-map right-map output-map)))
	  (ignore unshared-left-vars)
	  (let (full semi)
	    (unless semi-unification-only
	      (setq full
		    (get-matcher-or-merger-from-cache
		      merge-id
		      'merger
		      #'(lambda ()
			  ;; first look in the cache of mergers to see if we can
			  ;; slime out of compiling new ones, but do this if necessary
			  (values
			    (gentemp (format nil "RULE-~s-FULL-MERGER-" rule-name))
			    (write-full-merger left-map right-map shared-vars
					       unshared-right-vars output-map))))))
	    (setq semi
		  (get-matcher-or-merger-from-cache
		    merge-id
		    'semi-merger
		    #'(lambda ()
			;; first look in the cache of mergers to see if we can
			;; slime out of compiling new ones, but do this if necessary
			(values
			  (gentemp (format nil "RULE-~s-SEMI-MERGER-" rule-name))
			  (write-semi-merger left-map right-map shared-vars
					     unshared-right-vars output-map)))))
	    ;; return full-merger, semi-merger, output-map, and merge-id
	    (values full semi output-map merge-id)))))))


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(defun write-full-merger (left-map right-map shared-vars unshared-right-vars output-map)
  ;; write an environment merger, assuming full unification is required
  (let ((output-size (length output-map)))
    `(lambda (left-env right-env)
       (ignore left-env right-env)		;so rules with no variables don't get warnings
       (let ((*new-variables* nil))
	 (declare (special *new-variables*))
	 (with-unification			;set up trail mechanism
	   ;; first unify all the elements of left and right envs.  This results in pointers
	   ;; from unbound variables in right to unbound variables in left.
	   ,@(loop for shared-var in shared-vars 
		   collecting `(unify (lookup-in-environment
					left-env ,(index-from-map shared-var left-map))
				      (lookup-in-environment
					right-env ,(index-from-map shared-var right-map))))
	   ;; no point in consing new env until here, since Part 1 doesn't refer to it.
	   (let ((output-env (make-array ,output-size)))
	     ;; second relocate variables with homes in the left environment to the new one.
	     ;; this generates huge amounts of code!
	     ;; copy all the data from slots in right env to slots in output env
	     ,@(loop for (left-var . left-index) in left-map
		     for output-index = (index-from-map left-var output-map)
		     collecting `(setf
				   (lookup-in-environment output-env ,output-index)
				   ;; this deals with structures as well as atomic data
				   (new-copy-unified-value
				     (lookup-in-environment left-env ,left-index))))
	     ;; copy all the data from slots in the left env to slots in output env
	     ,@(loop for unshared-right-var in unshared-right-vars
		     for right-index = (index-from-map unshared-right-var right-map)
		     for output-index = (index-from-map unshared-right-var output-map)
		     collecting `(setf
				   (lookup-in-environment output-env ,output-index)
				   (new-copy-unified-value
				     (lookup-in-environment right-env ,right-index))))
	     ;; find slots that aren't used, and fill them with unbound logic variables (This
	     ;; happens, for example, with disjunctive triggers that bind different variables.)
	     ,@(loop for (var . index) in output-map
		     unless (or (find var left-map  :key #'car)
				(find var right-map :key #'car))
		       ;; this variable is not in either the left or the right map, so make it
		       ;; unbound.
		       collect `(make-logic-variable-unbound output-env ,index))
	     ;; return the output environment
	     (values output-env t)))))))


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(defun write-semi-merger (left-map right-map shared-vars unshared-right-vars output-map)
  ;; given left and write maps, return function to merge and map of its output
  ;; Test case:
  ;;  (write-environment-merger '((a . 0) (b . 1) (c . 2) (d . 3))
  ;;                            '((c . 0) (d . 1) (e . 2)))
  (let ((output-size (length output-map)))
    ;; now generate the function, returning it and the output map
    (let ((new-variable-introduced
	    (loop for (var) in output-map
		  thereis (not
			    (or (find var left-map :key #'car)
				(find var right-map :key #'car))
			    ))))
      `(lambda (left-env right-env)
	 (ignore left-env right-env)		;so rules with no variables don't get warnings
	 (when (and
		 ,@(loop for shared-var in shared-vars 
			 collecting
			   `(equal
			      (lookup-in-environment left-env
						     ,(index-from-map shared-var left-map))
			      (lookup-in-environment right-env
						     ,(index-from-map shared-var right-map)))))
	   ;; first unify all the elements of left and right envs.
	   (let* ((output-env (make-array ,output-size)))
	     ;; copy all the data from slots in right env to slots in output env
	     ,@(loop for (left-var . left-index) in left-map
		     for output-index = (index-from-map left-var output-map)
		     collecting `(setf (lookup-in-environment output-env ,output-index)
				       ;; this deals with structures as well as atomic data
				       (lookup-in-environment left-env ,left-index)))
	     ;; copy all the data from slots in the left env to slots in output env
	     ,@(loop for unshared-right-var in unshared-right-vars
		     for right-index = (index-from-map unshared-right-var right-map)
		     for output-index = (index-from-map unshared-right-var output-map)
		     collecting `(setf (lookup-in-environment output-env ,output-index)
				       (lookup-in-environment right-env ,right-index)))
	     ;; find slots that aren't used, and fill them with unbound logic variables (This
	     ;; happens, for example, with disjunctive triggers that bind different variables.)
	     ,@(loop for (var . index) in output-map
		     unless (or (find var left-map :key #'car)
				(find var right-map :key #'car))
		       ;; this variable is not in either the left or the right map, so make it
		       ;; unbound.
		       collect `(make-logic-variable-unbound output-env ,index))
	     ;; return the output environment
	     (values output-env ,new-variable-introduced)))))))


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(defun analyze-environment-sharing (left-map right-map)
  ;; returns list of variables left and right have in common and a list of variables in left
  ;; which are not shared, and list of variables in right which are not shared.
  ;; Example: (analyze-environment-sharing '((x . 0) (y . 1)) '((y . 1) (z . 0)))
  ;;   returns (Y) and (Z).
  (declare (values shared unshared-left unshared-right))
  (values
    (mapcar #'car
	    (intersection right-map left-map :key #'car))
    (mapcar #'car
	    (set-difference left-map right-map :key #'car))
    (mapcar #'car
	    (set-difference right-map left-map :key #'car))))


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(defun generate-merge-id (left-map right-map output-map)
  ;; A description of how slots in the input environments map to slots in the output
  ;; environment.  It's a pair of lists, mapping left env slots to output slots and right env
  ;; slots to output slots.
  (cons (loop for (left-var . left-index) in left-map
	      collecting (cons left-index (index-from-map left-var output-map)))
	(loop for (right-var . right-index) in right-map
	      collecting (cons right-index (index-from-map right-var output-map)))))






;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


;;; Stuff to write code for PROCEDUREs, i.e. lisp code in trigger position of forward rules
;;;
;;; We're given the lisp code the map and a list a variables that occur in
;;; the preceeding triggers.
;;;
;;; The procedure function is passed an environment a rete node and some
;;; other stuff needed for rete networking.  The code is supposed to
;;; execute "in the match environment" represented by the passed in
;;; environment.  The procedure can either just return T or call succeed.
;;; Calling succeed should cause a new environment to get built and
;;; passed to the next node in the rete network.  The environment passed
;;; on contains all the lvs that came in, plus any new ones that are
;;; referenced in this code.
;;;
;;; Around the lisp code we wrap stuff that unpacks the lvs from the
;;; environment that gets passed in.  We're going to need to build an
;;; environment which contains all these lvs anyhow, so we unpack them
;;; all.

;;; We create an flet'd succeed function which builds a new environment
;;; and calls the right routine to drop that into the next node of the
;;; rete network.  Logic variables in this code are mapped to lisp
;;; variables of the same name (done by building a set of
;;; variable-analyses).  We also go to some pain to determine if the
;;; environment that will be passed on is logic-variable-free.

;;; This should use calls-succeed-p to generate better code when it can.  Needs lexical env to do that.

(defun write-forward-procedure-code (function-name map analysis)
  (declare (special *forward-rule-trigger-compiler-environment*))
  (let* ((variables-seen-so-far (loop for (variable) in map collect variable))
	 (variables-referenced (procedure-pattern-analysis-variables-referenced analysis))
	 (old-variables-referenced (intersection variables-seen-so-far variables-referenced))
	 (code (procedure-pattern-analysis-expression analysis))
	 (support-variable (pattern-analysis-name analysis))
	 (new-variables (procedure-pattern-analysis-new-variables analysis))
	 (*known-lvs* (union new-variables variables-seen-so-far))
	 (downstream-variables (pattern-analysis-variables-used analysis))
	 (new-variables-that-somebody-uses (intersection new-variables downstream-variables))
	 (old-lvs-plus-used-new-lvs (union variables-seen-so-far new-variables-that-somebody-uses))
	 (semi-unification-only (pattern-analysis-pure-semi-unification? analysis))
	 (new-map (or (when (null new-variables-that-somebody-uses) map)
		      (append map
			      (loop for var in new-variables-that-somebody-uses
				    for i from (length map)
				    collect (cons var i))))))
    (let* ((succeed-code (if semi-unification-only
			     `(let* ((.new-env. (make-array ,(length new-map))))
				(ignore old-state-has-lvs)
				;; stuff the values of the logic-variables into the new environment.
				;; Should this be using copy-unified-value?
				(replace .new-env. .env.)
				,@(loop for variable in new-variables-that-somebody-uses
					for position = (cdr (assoc variable new-map))
					collect `(setf (aref .new-env. ,position) ,variable))
				(funcall .continuation. .new-env. ,support-variable nil)
				nil)
			     `(let* ((new-state-has-lvs (if old-state-has-lvs 
							    (or ,@(loop for variable in old-lvs-plus-used-new-lvs
									collect `(sys:unbound-logic-variable-p ,variable)))
							    (or ,@(loop for variable in new-variables-that-somebody-uses
									collect `(sys:unbound-logic-variable-p ,variable)))))
				     (.new-env. (make-array ,(length new-map))))
				;; stuff the values of the logic-variables into the new environment.
				;; Should this be using copy-unified-value?
				,@(loop for (variable . position) in new-map
					if (member variable variables-seen-so-far)
					  collect `(setf (aref .new-env. ,position) ,variable)
					else collect `(setf (aref .new-env. ,position)
							    (if (sys:unbound-logic-variable-p ,variable)
								(make-unbound-logic-variable ',variable)
								,variable)))
				(funcall .continuation. .new-env. ,support-variable new-state-has-lvs)
				nil)))
	   (variable-initialization-code
	     (if semi-unification-only
		 (loop for variable in old-variables-referenced
		       for position = (cdr (assoc variable map))
		       when (member variable variables-referenced)
			 collect `(setq ,variable (aref .env. ,position)))
		 (loop for (variable . position) in map
		       when (member variable variables-seen-so-far)
			 collect `(sys:%p-store-contents (sys:variable-location ,variable)
							 (aref .env. ,position)))))
	   (core-body `(with-unbound-logic-variables
			 ;; bind all the variables
			 ,(if semi-unification-only new-variables *known-lvs*)
			 (compiler-let ((*known-lvs* ',*known-lvs*))
			   ;; initialize the previously existing variables
			   ;; by pulling the value out of the environment.
			   ,@variable-initialization-code
			   ;; now run the code
			   (with-unification
			     ,`(flet ((succeed (&optional ,(or support-variable 'ignore))
					       (declare (sys:downward-function))
					       ,succeed-code))
				 (when ,code (succeed nil))))))))
      (let ((generated-code `(defun ,function-name (.env. old-state-has-lvs .continuation.)
			       (declare (sys:downward-funarg .continuation.))
			       ,@(when (null variable-initialization-code)
				   `((ignore .env.)))
			       ,(if semi-unification-only
				    `(let ,old-variables-referenced
				       ,core-body)
				    core-body))))
	(collect-forward-rule-subsidiary-function generated-code))
      new-map)))




;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.220")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10 -*-")


(defun write-forward-or-trigger-shuffler (function-name input-map analysis)
  (let* ((output-map (pattern-analysis-map analysis))
	 (new-variables (loop for entry in output-map
			      for (variable) = entry
			      unless (assoc variable input-map)
				collect variable))
	 (known-to-be-semi-unification (pattern-analysis-pure-semi-unification? analysis))
	 shuffling-code
	 binding-code
	 has-lv-expression 
	 (old-env-refd nil))
    (setq shuffling-code
	  (loop for (out-variable . output-position) in output-map
		for (nil . in-position) = (assoc out-variable input-map)
		if in-position
		  collect `(setf (aref .new-env. ,output-position) (aref .old-env. ,in-position))
		  and do (setq old-env-refd t)
		else collect `(setf (aref .new-env. ,output-position)
				    (make-unbound-logic-variable ',out-variable))))
    (setq binding-code
	  (cond (known-to-be-semi-unification
		 `(,@(when old-env-refd `((.old-env. (rete-internal-state-environment .rete-internal-state.))))
		   (.new-env. (make-array ,(length output-map)))))
		(new-variables
		 ;; Known to be full unification in this case.
		 `(,@(when old-env-refd `((.old-env. (rete-internal-state-environment .rete-internal-state.))))
		   (.new-env. (make-array ,output-map))))
		(t `((has-lvs (not (zerop (rete-internal-state-has-logic-variables .rete-internal-state.))))
		     ,@(when old-env-refd `((.old-env. (rete-internal-state-environment .rete-internal-state.))))
		     (.new-env. (make-array ,(length output-map)))))))
    (setq has-lv-expression
	  (cond (known-to-be-semi-unification 0)
		(new-variables 1)
		(t `(if has-lvs 1 0))))
    (collect-forward-rule-subsidiary-function
      `(defun ,function-name (.node. .rete-internal-state.)
	 (let* ,binding-code
	   ,@shuffling-code
	   (let ((next-state (make-rete-internal-state
			       :environment .new-env.
			       :predications (rete-internal-state-predications .rete-internal-state.)
			       :my-node .node.
			       :has-logic-variables ,has-lv-expression)))
	     (push next-state (rete-internal-state-children .rete-internal-state.))
	     (rete-proceed-to-next-node next-state .node.)))))))

