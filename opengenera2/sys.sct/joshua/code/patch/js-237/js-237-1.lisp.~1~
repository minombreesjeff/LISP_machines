;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for JOSHUA version 237.1
;;; Reason: Function JI::WRITE-FORWARD-PROCEDURE-CODE:  Make the new map be an extension of the old one.
;;; Written by HES, 2/28/92 16:46:01
;;; while running on Lemon from FEP0:>dWriter-from-SCRC-440-24.ilod.1
;;; with Experimental System 440.24, Experimental CLOS 425.4, Experimental RPC 429.0,
;;; Experimental Embedding Support 421.0, Experimental MacIvory Support 435.1,
;;; Experimental UX Support 430.0, Experimental Development Utilities 425.1,
;;; Experimental Old TV 423.0, Experimental Zwei 423.2, Experimental Utilities 433.1,
;;; Experimental RPC Development 424.0, Experimental MacIvory Development 423.0,
;;; Experimental UX Development 429.0, Experimental Server Utilities 431.0,
;;; Experimental Serial 424.5, Experimental Hardcopy 434.1, Experimental Zmail 431.0,
;;; Experimental LMFS Defstorage 407.0, Experimental SCSI 420.1,
;;; Experimental Tape 433.1, Experimental LMFS 432.0, Experimental NSage 429.1,
;;; Experimental Extended Help 430.0, Experimental CL Developer 417.0,
;;; Experimental Documentation Database 429.23, Experimental IP-TCP 439.3,
;;; Experimental IP-TCP Documentation 412.0, Experimental CLX 435.0,
;;; Experimental X Remote Screen 433.0, Experimental X Documentation 411.0,
;;; Experimental NFS Client 429.0, Experimental NFS Documentation 413.0,
;;; Experimental DNA 428.0, Experimental Metering 433.0,
;;; Experimental Metering Substrate 433.0, Experimental Conversion Tools 424.4,
;;; Experimental Hacks 429.0, Experimental Mac Dex 422.0,
;;; Experimental HyperCard/MacIvory 422.0, Experimental Statice Runtime 413.0,
;;; Experimental Statice 434.0, Experimental Statice Browser 410.0,
;;; Experimental Statice Documentation 416.0, Experimental CLIM 34.16,
;;; Experimental CLIM Documentation 34.0, Experimental CLIM Demo 34.2,
;;; Experimental Symbolics Concordia 433.0,
;;; Experimental Essential Image Substrate 421.0, Experimental Image Substrate 429.0,
;;; Experimental Graphic Editing Documentation 422.0,
;;; Experimental Graphic Editing 430.0, Experimental Graphic Editor 429.0,
;;; Experimental Bitmap Editor 430.0, Experimental Postscript 425.0,
;;; Experimental Concordia Documentation 422.0, Experimental Lock Simple 426.0,
;;; Experimental Producer 410.0, Version Control 404.4, Compare Merge 403.0,
;;; VC Documentation 401.0, Symbolics In-House 432.5,
;;; Symbolics In-House Documentation 414.4, SCRC 430.0, Weather User 414.0,
;;; Logical Pathnames Translation Files NEWEST, Schema Flex 5.8,
;;; Experimental Symbolic Switching System 18.0,
;;; Experimental SSS System Definitions 13.0,
;;; Experimental Extensions to Common LISP 19.0,
;;; Experimental Genera Modifications for SSS 19.0,
;;; Experimental SSS Software Development Environment 19.0,
;;; Experimental SSS OODB Manager 19.0, Experimental SSS Component Manager 20.0,
;;; Experimental SSS Base Level Components 19.0,
;;; Experimental SSS User Interface 19.0, Experimental SSS Billing Framework 12.0,
;;; Experimental SSS Application 19.0, Experimental SSS Call Processing 2 19.0,
;;; Experimental SSS Inbound Switch 4.0, Experimental SSS OODB SM System 6.0,
;;; Experimental SSS Simulator 19.0, Experimental SSS System Test Suite 20.0,
;;; Experimental SSS System Application Commands 8.0,
;;; Experimental SSS Documentation 20.0, Joshua 237.0, cold load 1,
;;; Ivory Revision 2B (FPA enabled), FEP 325, FEP0:>I325-loaders.flod(8),
;;; FEP0:>I325-info.flod(8), FEP0:>I325-debug.flod(8), FEP0:>I325-lisp.flod(8),
;;; FEP0:>I325-kernel.fep(9), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.4.6, MacIvory SCSI Manager Server 4.1.2,
;;; Toolbox Servers 4.1.2, MacIvory & RPC library 6.1.4, MacIvory life support 4.1.3,
;;; Symbolics keyboard 2.0.2, Macintosh System Software 6.0.8,
;;; 1152x814 Screen with Genera fonts, Machine serial number 20960, Macintosh II,
;;; Symbolics keyboard,
;;; Schema Flex System Schemas (from SYS:STATICE;SCHEMA-FLEX;SYSTEM-SCHEMAS.LISP.6),
;;; hack to implement new command to suppress page headings (from ZERMATT.LCS.MIT.EDU:>HES>esbook>titlepage-patch.lisp.5),
;;; Hack article book design (from ZERMATT.LCS.MIT.EDU:>HES>esbook>technical-article-bd.lisp.3).



(SYSTEM-INTERNALS:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "JOSHUA:CODE;MATCHER.LISP.219")


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;MATCHER.LISP.219")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Mode: Joshua; Package: JI; Syntax: Joshua; Base: 10; Vsp: 0 -*-")

;;; Stuff to write code for PROCEDUREs, i.e. lisp code in trigger position of forward rules
;;;
;;; We're given the lisp code the map and a list a variables that occur in
;;; the preceeding triggers.
;;;
;;; The procedure function is passed an environment a rete node and some
;;; other stuff needed for rete networking.  The code is supposed to
;;; execute "in the match environment" represented by the passed in
;;; environment.  The procedure can either just return T or call succeed.
;;; Calling succeed should cause a new environment to get built and
;;; passed to the next node in the rete network.  The environment passed
;;; on contains all the lvs that came in, plus any new ones that are
;;; referenced in this code.
;;;
;;; Around the lisp code we wrap stuff that unpacks the lvs from the
;;; environment that gets passed in.  We're going to need to build an
;;; environment which contains all these lvs anyhow, so we unpack them
;;; all.

;;; We create an flet'd succeed function which builds a new environment
;;; and calls the right routine to drop that into the next node of the
;;; rete network.  Logic variables in this code are mapped to lisp
;;; variables of the same name (done by building a set of
;;; variable-analyses).  We also go to some pain to determine if the
;;; environment that will be passed on is logic-variable-free.

;;; This should use calls-succeed-p to generate better code when it can.  Needs lexical env to do that.

(defun write-forward-procedure-code (function-name map analysis)
  (declare (special *forward-rule-trigger-compiler-environment*))
  (let* ((variables-seen-so-far (loop for (variable) in map collect variable))
	 (variables-referenced (procedure-pattern-analysis-variables-referenced analysis))
	 (old-variables-referenced (intersection variables-seen-so-far variables-referenced))
	 (code (procedure-pattern-analysis-expression analysis))
	 (support-variable (pattern-analysis-name analysis))
	 (new-variables (procedure-pattern-analysis-new-variables analysis))
	 (*known-lvs* (union new-variables variables-seen-so-far))
	 (downstream-variables (pattern-analysis-variables-used analysis))
	 (new-variables-that-somebody-uses (intersection new-variables downstream-variables))
	 (old-lvs-plus-used-new-lvs (union variables-seen-so-far new-variables-that-somebody-uses))
	 (semi-unification-only (pattern-analysis-pure-semi-unification? analysis))
	 (new-map (or (when (null new-variables-that-somebody-uses) map)
		      (append map
			      (loop for var in new-variables-that-somebody-uses
				    for i from (length map)
				    collect (cons var i))))))
    (let* ((succeed-code (if semi-unification-only
			     `(let* ((.new-env. (make-array ,(length new-map))))
				(ignore old-state-has-lvs)
				;; stuff the values of the logic-variables into the new environment.
				;; Should this be using copy-unified-value?
				(replace .new-env. .env.)
				,@(loop for variable in new-variables-that-somebody-uses
					for position = (cdr (assoc variable new-map))
					collect `(setf (aref .new-env. ,position) ,variable))
				(funcall .continuation. .new-env. ,support-variable nil)
				nil)
			     `(let* ((new-state-has-lvs (if old-state-has-lvs 
							    (or ,@(loop for variable in old-lvs-plus-used-new-lvs
									collect `(sys:unbound-logic-variable-p ,variable)))
							    (or ,@(loop for variable in new-variables-that-somebody-uses
									collect `(sys:unbound-logic-variable-p ,variable)))))
				     (.new-env. (if new-state-has-lvs
						    (make-logic-variable-environment :length ,(length new-map))
						    (make-array ,(length new-map)))))
				;; stuff the values of the logic-variables into the new environment.
				;; Should this be using copy-unified-value?
				,@(loop for (variable . position) in new-map
					if (member variable variables-seen-so-far)
					  collect `(setf (aref .new-env. ,position) ,variable)
					else collect `(setf (aref .new-env. ,position)
							    (if (sys:unbound-logic-variable-p ,variable)
								(make-unbound-logic-variable ',variable)
								,variable)))
				(funcall .continuation. .new-env. ,support-variable new-state-has-lvs)
				nil)))
	   (variable-initialization-code
	     (if semi-unification-only
		 (loop for variable in old-variables-referenced
		       for position = (cdr (assoc variable map))
		       when (member variable variables-referenced)
			 collect `(setq ,variable (aref .env. ,position)))
		 (loop for (variable . position) in map
		       when (member variable variables-seen-so-far)
			 collect `(sys:%p-store-contents (sys:variable-location ,variable)
							 (aref .env. ,position)))))
	   (core-body `(with-unbound-logic-variables
			 ;; bind all the variables
			 ,(if semi-unification-only new-variables *known-lvs*)
			 (compiler-let ((*known-lvs* ',*known-lvs*))
			   ;; initialize the previously existing variables
			   ;; by pulling the value out of the environment.
			   ,@variable-initialization-code
			   ;; now run the code
			   (with-unification
			     ,`(flet ((succeed (&optional ,(or support-variable 'ignore))
					       (declare (sys:downward-function))
					       ,succeed-code))
				 (when ,code (succeed nil))))))))
      (let ((generated-code `(defun ,function-name (.env. old-state-has-lvs .continuation.)
			       (declare (sys:downward-funarg .continuation.))
			       ,@(when (null variable-initialization-code)
				   `((ignore .env.)))
			       ,(if semi-unification-only
				    `(let ,old-variables-referenced
				       ,core-body)
				    core-body))))
	(collect-forward-rule-subsidiary-function generated-code))
      new-map)))

