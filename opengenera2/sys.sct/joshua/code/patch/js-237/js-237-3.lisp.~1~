;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for JOSHUA version 237.3
;;; Reason: Function (FLAVOR:METHOD JI::REBUILD-OBJECT JI::BASIC-OBJECT):  Move call to basic-object-substructure-builder 
;;; to this method, it was inlined in the both the body-builder and the prototype-builder methods which would
;;; call this once for each component type.
;;; You must recompiler your object-type definitions.
;;; Defining Form JOSHUA:DEFINE-OBJECT-TYPE:  Fix the define-object-type macro to correspond.
;;; Predicate Method (JOSHUA:ASK-DATA JOSHUA:TYPE-OF-MIXIN):  Don't find sub-structure of prototypes of
;;; other types.
;;; Written by HES, 3/16/92 11:21:05
;;; while running on Lemon from FEP0:>sss-world.ilod.1
;;; with Experimental System 440.33, Experimental CLOS 425.6, Experimental RPC 429.0,
;;; Experimental Embedding Support 421.0, Experimental MacIvory Support 435.3,
;;; Experimental UX Support 430.0, Experimental Development Utilities 425.1,
;;; Experimental Old TV 423.0, Experimental Zwei 423.3, Experimental Utilities 433.2,
;;; Experimental RPC Development 424.0, Experimental MacIvory Development 423.0,
;;; Experimental UX Development 429.0, Experimental Server Utilities 431.0,
;;; Experimental Serial 424.8, Experimental Hardcopy 434.1, Experimental Zmail 431.0,
;;; Experimental LMFS Defstorage 407.0, Experimental SCSI 420.1,
;;; Experimental Tape 433.2, Experimental LMFS 432.0, Experimental NSage 429.1,
;;; Experimental Extended Help 430.0, Experimental CL Developer 417.0,
;;; Experimental Documentation Database 429.35, Experimental IP-TCP 439.4,
;;; Experimental IP-TCP Documentation 412.0, Experimental CLX 435.0,
;;; Experimental X Remote Screen 433.1, Experimental X Documentation 411.2,
;;; Experimental NFS Client 429.0, Experimental NFS Documentation 413.1,
;;; Experimental DNA 428.0, Experimental Metering 433.0,
;;; Experimental Metering Substrate 433.0, Experimental Conversion Tools 424.5,
;;; Experimental Hacks 429.0, Experimental Mac Dex 422.0,
;;; Experimental HyperCard/MacIvory 422.0, Experimental Statice Runtime 413.2,
;;; Experimental Statice 434.0, Experimental Statice Browser 410.0,
;;; Experimental Statice Documentation 416.0, Experimental CLIM 34.29,
;;; Experimental CLIM Documentation 34.1, Experimental CLIM Demo 34.2,
;;; Experimental Symbolics Concordia 433.0,
;;; Experimental Essential Image Substrate 421.0, Experimental Image Substrate 429.0,
;;; Experimental Graphic Editing Documentation 422.1,
;;; Experimental Graphic Editing 430.0, Experimental Graphic Editor 429.0,
;;; Experimental Bitmap Editor 430.0, Experimental Postscript 425.0,
;;; Experimental Concordia Documentation 422.0, Experimental Lock Simple 426.0,
;;; Experimental Producer 410.0, Version Control 404.4, Compare Merge 403.0,
;;; VC Documentation 401.0, Symbolics In-House 432.5,
;;; Symbolics In-House Documentation 414.8, SCRC 430.0, Weather User 414.0,
;;; Logical Pathnames Translation Files NEWEST, Schema-Flex 5.19,
;;; Experimental Links 45.0, Joshua 237.2,
;;; Experimental Symbolic Switching System 18.0,
;;; Experimental SSS System Definitions 13.0,
;;; Experimental Extensions to Common LISP 19.0,
;;; Experimental Genera Modifications for SSS 19.0,
;;; Experimental SSS Software Development Environment 19.0,
;;; Experimental SSS OODB Manager 19.0, Experimental SSS Component Manager 20.0,
;;; Experimental SSS Base Level Components 19.0,
;;; Experimental SSS User Interface 19.0, Experimental SSS Billing Framework 12.0,
;;; Experimental SSS Application 19.0, Experimental SSS Call Processing 2 19.0,
;;; Experimental SSS Inbound Switch 4.0, Experimental SSS OODB SM System 6.0,
;;; Experimental SSS Simulator 19.0, Experimental SSS System Test Suite 20.0,
;;; Experimental SSS System Application Commands 8.0,
;;; Experimental SSS Documentation 20.0, Jericho 237.0, cold load 1,
;;; Ivory Revision 2B (FPA enabled), FEP 325, FEP0:>I325-loaders.flod(8),
;;; FEP0:>I325-info.flod(8), FEP0:>I325-debug.flod(8), FEP0:>I325-lisp.flod(8),
;;; FEP0:>I325-kernel.fep(9), Boot ROM version 320, Device PROM version 325,
;;; Genera application 5.4.6, MacIvory SCSI Manager Server 4.1.2,
;;; Toolbox Servers 4.1.2, MacIvory & RPC library 6.1.4, MacIvory life support 4.1.3,
;;; Symbolics keyboard 2.0.2, Macintosh System Software 6.0.8,
;;; 1152x814 Screen with Genera fonts, Machine serial number 20960, Macintosh II,
;;; Symbolics keyboard,
;;; Fix schema flex remove domain index cleanup (from Y:>feinberg>Pending>fix-schema-flex-remove-domain-index-cleanup.lisp.1).



(SYSTEM-INTERNALS:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "JOSHUA:CODE;OBJECT-MODEL.LISP.95")


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;OBJECT-MODEL.LISP.95")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Base: 10; Mode: Joshua; Package: JOSHUA-INTERNALS; Syntax: Joshua -*-")


(defmethod (rebuild-object basic-object) ()
  (when superpart-object
    (add-part superpart-object role-name self))
  (let ((type-object (object-type-named (type-of self))))
    (setq type type-object)
    (when type
      (if *building-prototype*
	  ;; If we're building prototype structure run the guy who
	  ;; makes prototype slots
	  (basic-object-prototype-builder self)
	  ;; We're building a real object
	  ;; use the guy who builds instance slots.
	  (basic-object-body-builder self))
      (basic-object-substructure-builder self)
      ;; Now that it's completely built
      ;; tell the type about it.
      (cond (typical-instance-of-type?
	     ;; This will also collect all rule triggers from the supertypes.
	     (set-typical-instance type-object self))
	    (t
	     ;; this links the object slots to those of its prototype.
	     (add-instance type-object self)
	     ;; Now that it's rules are linked
	     (unless *building-prototype*
	       ;; It might still be part of a prototype even if
	       ;; it itself isn't the prototype.  If it's not, I.e. if
	       ;; it's a real object, run the
	       ;; initializations.
	       (basic-object-initializer self)))))))


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;OBJECT-MODEL.LISP.95")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Base: 10; Mode: Joshua; Package: JOSHUA-INTERNALS; Syntax: Joshua -*-")


(def-defining-form define-object-type
   :definer
   ((name &key slots parts equalities initializations included-object-types
	  other-instance-variables other-flavors)
    (declare (zwei:indentation 1 1))
    (multiple-value-bind (slot-names slot-options)
	(loop for s-d in slots
	      if (symbolp s-d)
		collect s-d into slot-names
		and collect nil into slot-options
	      else collect (car s-d) into slot-names
		   and collect (cdr s-d) into slot-options
	      finally (return (values slot-names slot-options)))
      (let ((initialization-tells
	      (loop for slot-name in slot-names
		    for slot-options in slot-options
		    for tms? = (getf slot-options :truth-maintenance)
		    for predication-name = (if tms? 'ltms:value-of 'value-of)
		    for set-valued = (getf slot-options :set-valued)
		    for init-form-present = nil
		    for init-form = nil
		    do (loop for (indicator value) on slot-options by #'cddr
			     when (eql indicator :initform)
			       do (setq init-form-present t init-form value))
		    when init-form-present
		      if (not set-valued)
			collect `(tell `[,',predication-name (,self ,',slot-name) ,,init-form])
		    else collect `(loop for value in ,init-form
					do (tell (predication-maker
						   `(,',predication-name (,self ,',slot-name) ,value)))))))
      `(progn
	 (let ((old-type-object (object-type-named ',name)))
	   (when old-type-object
	     (clean-up-for-redefinition old-type-object)))
	 (defflavor ,name
		 (,@slot-names ,@other-instance-variables)
		 (,@other-flavors ,@included-object-types basic-object)
	   (:conc-name "")
	   ,@(when other-instance-variables
	       `((:writable-instance-variables ,@(loop for thing in other-instance-variables
						       if (consp thing)
							 collect (car thing)
						       else collect thing))))
	   :initable-instance-variables)
	 ,@(loop for slot-name in slot-names
		 for his-slot-options in slot-options
		 when (getf his-slot-options :object-notifying)
		 collect `(defmethod ((setf ,slot-name) ,name :default) (new-value justifying-predication)
			    (ignore new-value justifying-predication)
			    ;; This method does nothing.  The updating of
			    ;; the slot contents is all done by Joshua and
			    ;; Slot Protocol methods.  In particular, then
			    ;; notice-truth-value-change and
			    ;; act-on-truth-value-change methods.
			    nil)
		 collect `(defmethod (,slot-name ,name) (&optional (value t))
			    (if value
				(slot-current-value ,slot-name)
				,slot-name)))
	 ,@(when slot-names
	     `((defmethod (basic-object-prototype-builder ,name) ()
		 ,@(loop for slot-name in slot-names 
			 collect `(setq ,slot-name 
					(make-prototype-slot ',slot-name self))))
	       (defmethod (basic-object-body-builder ,name) () 
		 ,@(loop for slot-name in slot-names
			 for his-slot-options in slot-options
			 for slot-constructor = (decode-slot-options-to-slot-type-constructor his-slot-options)
			 collect `(setq ,slot-name (,slot-constructor ',slot-name self))))))
	 ,@(when parts
	     `((defmethod (basic-object-substructure-builder ,name) ()
		 ,@(loop for (role-name type) in parts 
			 collect `(make-instance ',type 
						 :role-name ',role-name 
						 :superpart-object self)))))
	 ,@(when (or initialization-tells initializations equalities)
	     `((defmethod (basic-object-initializer ,name) ()
		 ,@initialization-tells
		 ,@initializations
		 ,@(when equalities
		     `((impose-equalities self ',equalities))))))
	 (make-instance 'object-type
			:supertypes (loop for name in ',included-object-types
					  collect (object-type-named name))
			:name ',name
			:slot-names ',slot-names)))))
   :killer undefine-object-type
   :type-name "Object Type")


;=====================================
(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION)
(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE "JOSHUA:CODE;OBJECT-MODEL.LISP.95")
(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES
  "-*- Base: 10; Mode: Joshua; Package: JOSHUA-INTERNALS; Syntax: Joshua -*-")


(define-predicate-method (ask-data type-of-mixin) (truth-value continuation)
  (unless (eql truth-value *true*)
    (signal 'model-can-only-handle-positive-queries
	    :query self
	    :model (type-of self)))
  (with-statement-destructured (the-object type) self
    (when (sys:unbound-logic-variable-p type)
      (signal 'model-cant-handle-query
	      :query self
	      :model (type-of self)))
    (cond ((sys:unbound-logic-variable-p the-object)
	   (labels ((do-one-type (object-type)
		      (loop for instance in (object-type-instances object-type)
			    unless (basic-object-typical-instance-of-type? (ultimate-superpart instance))
			    do (with-unification
				 (unify instance the-object)
				 (stack-let* ((backward-support (list self *true* '(ask-data object-type-of)
								     (make-predication
								       `(,(predication-predicate self)
									 ,instance
									 ,(object-type-name object-type))
								       :stack)
								       )))
				   (funcall continuation backward-support))))
		      (loop for sub-type in (object-type-subtypes object-type)
			    do (do-one-type sub-type))))
	     (do-one-type (object-type-named type))))
	  (t (when (typep the-object type)
	       (stack-let ((backward-support (list self *true* '(ask-data object-type-of))))
		 (funcall continuation backward-support)))))))

