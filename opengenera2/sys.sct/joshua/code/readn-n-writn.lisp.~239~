;;; -*- Mode: LISP; Package: JOSHUA-INTERNALS; Syntax: Common-lisp; Base: 10; Lowercase: T; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Created Friday the eighteenth of October, 1985; 9:01:43 pm by sgr on GROUSE at SCRC

;;;
;;; Reader hackery for Joshua.
;;;

(defvar *joshua-readtable* nil ;defined below
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")  0"Readtable for Joshua.")

(defparameter *joshua-variable-char* #\Equivalence
  "Variables begin with this character.")

(defparameter *joshua-alternative-variable-char* #\?
  "Variables begin with this character.")

(defparameter *joshua-open-predication-char* #\[
  "This opens a predication.")

(defparameter *joshua-close-predication-char* #\]
  "This closes a predication.")

(defparameter *joshua-list-close-chars*
	      (list *joshua-close-predication-char* #\))
  "Characters which close list-like structures.")



;;; Backquote handling

(defvar *backquote-comma-flag*  si:**backquote-\,-flag**)
(defvar *backquote-comma-dot-flag* si:**backquote-\,\.-flag**)
(defvar *backquote-comma-atsign-flag* si:**backquote-\,\@-flag**)


(defmacro backquote (code) (expand-backquote code))

(defun expand-backquote (code)
  (let ((*backquote-depth* 1))
    (declare (special *backquote-depth*))
    (labels
      ((handle-atom (code)
	 (cond ((null code) (values nil nil))
	       ;; don't quote self-evaluating atoms
	       ((and (atom code)
		     (or (not (symbolp code))
			 (compiler:self-evaluating-symbol-p code)))
		(values t code))
	       (t (values 'quote code))))
       (handle-comma (code)
	 (let ((*backquote-depth* (1- *backquote-depth*)))
	   (declare (special *backquote-depth*))
	   (cond
	     ((> *backquote-depth* 0) (handle-comma-under-backquote code))
	     ((atom code)
	      (cond ((null code)
		     (values nil nil))
		    ((and (atom code)
			  (or (not (symbolp code))
			      (compiler:self-evaluating-symbol-p code)))
		     (values t code))
		    (t (values '*backquote-comma-flag* code))))
	     ((eq (car code) 'quote)
	      (values (car code) (cadr code)))
	     ((member (car code) '(append list list* nconc))
	      (values (car code) (cdr code)))
	     ((eq (car code) 'cons)
	      (values 'list* (cdr code)))
	     (t (values '*backquote-comma-flag* code)))))
       (handle-comma-under-backquote (code)
	 (multiple-value-bind (flag stuff) (handle-term code)
	     (cond ((or (eql flag '*backquote-comma-atsign-flag*)
			(eql flag '*backquote-comma-dot-flag*))
		    (values '*backquote-comma-dot-flag*
			    (list 'mapcar #'(lambda (thing) (list '*backquote-comma-flag* thing)) stuff)))
		   (t
		    (values
		      'list
		      (let ((packaged-stuff (package-up-for-top-level flag stuff)))
			(list (list 'quote '*backquote-comma-flag*) packaged-stuff)))))))
       (handle-comma-atsign (code)
	 (let ((*backquote-depth* (1- *backquote-depth*)))
	   (declare (special *backquote-depth*))
	   (if (> *backquote-depth* 0)
	       (multiple-value-bind (flag stuff) (handle-term code)
		 (cond ((or (eql flag '*backquote-comma-atsign-flag*)
			    (eql flag '*backquote-comma-dot-flag*))
			(values '*backquote-comma-atsign-flag*
				(list 'mapcar #'(lambda (thing) (list '*backquote-comma-atsign-flag* thing)) stuff)))
		       (t
			(values
			  'list
			  (let ((packaged-stuff (package-up-for-top-level flag stuff)))
			    (list (list 'quote '*backquote-comma-atsign-flag*) packaged-stuff))))))
	       (values '*backquote-comma-atsign-flag* code))))
       (handle-comma-dot (code)
	 (let ((*backquote-depth* (1- *backquote-depth*)))
	   (declare (special *backquote-depth*))
	   (if (> *backquote-depth* 0)
	       (multiple-value-bind (flag stuff) (handle-term code)
		 (let ((packaged-stuff (package-up-for-top-level flag stuff)))
		   (values
		     'list
		     (list (list 'quote '*backquote-comma-dot-flag*) packaged-stuff))))
	       (values '*backquote-comma-dot-flag* code))))
       (handle-backquote (code)
	 (let ((*backquote-depth* (1+ *backquote-depth*)))
	   (declare (special *backquote-depth*))
	   (multiple-value-bind (flag stuff) (handle-term (second code))
	     (let ((packaged-stuff (package-up-for-top-level flag stuff)))
	       (values 'list `('backquote ,packaged-stuff))))))
       (handle-list (code)
	 (multiple-value-bind (carflag car) (handle-term (car code))
	   (multiple-value-bind (cdrflag cdr) (handle-term (cdr code))
	     (cond ((eq carflag '*backquote-comma-atsign-flag*)
		    (values
		      'append
		      (cond ((eq cdrflag 'append)
			     (cons car cdr))
			    (t (list car (Package-up-for-top-level cdrflag cdr))))))
		   ((eq carflag '*backquote-comma-dot-flag*)
		    (values
		      'nconc
		      (cond ((eq cdrflag 'nconc)
			     (cons car cdr))
			    (t (list car (Package-up-for-top-level cdrflag cdr))))))
		   ((null cdrflag)
		    (cond ((member carflag '(quote t nil))
			   (values 'quote (list car)))
			  (t (values
			       'list
			       (list (Package-up-for-top-level carflag car))))))
		   ((member cdrflag '(quote t))
		    (cond ((member carflag '(quote t nil))
			   (values 'quote (cons car cdr)))
			  (t (values 'list*
				     (list (Package-up-for-top-level carflag car)
					   (Package-up-for-top-level cdrflag cdr))))))
		   (t (setq car (Package-up-for-top-level carflag car))
		      (if (member cdrflag '(list list*))
			  (values cdrflag (cons car cdr))
			  (values 'list* (list car (Package-up-for-top-level cdrflag cdr)))))))))
       (handle-term (code)
	 (cond ((atom code) (handle-atom code))
	       ((eq (car code) '*backquote-comma-flag*)
		(handle-comma (cadr code)))
	       ((eq (car code) '*backquote-comma-atsign-flag*)
		(handle-comma-atsign (cadr code)))
	       ((eq (car code) '*backquote-comma-dot-flag*)
		(handle-comma-dot (cadr code)))
	       ((and (variable-boundp si:*read-circularity-unresolved-labels*)
		     (member code si:*read-circularity-unresolved-labels*))
		(values t code))
	       ((eq (car code) 'backquote) (handle-backquote code))
	       (t (handle-list code))))
       (Package-up-for-top-level (flag thing)
	 (cond ((or (eq flag '*backquote-comma-flag*) (member flag '(t nil))) thing)
	       ((eq flag 'quote) (list 'quote thing))
	       ((eq flag 'list*)
		(cond ((null (cddr thing))
		       (cons 'cons thing))
		      (t (cons 'list* thing))))
	       (t (cons (cdr (assoc flag `((cons . cons)
					   (list . list)
					   (append . append)
					   (nconc . nconc))))
			thing)))))
      (multiple-value-bind (flag stuff) (handle-term code)
	(Package-up-for-top-level flag stuff)))))



(defun joshua-top-level-backquote-reader (stream char)
  (if (char-equal #\[ (peek-char 't stream))
      (joshua-backquote-bracket-reader stream char)
      (joshua-normal-backquote-reader stream char)))

(defun joshua-normal-backquote-reader (stream ignore)
  (let* ((si:**backquote-count** (1+ si:**backquote-count**))
	 (the-statement (si:read-recursive stream)))
    `(backquote ,the-statement)))

(defun joshua-backquote-bracket-reader (stream char)
  ;; Called when we read a backquote which is immediately followed by a
  ;; left bracket.  We've read the backquote and checked with peek-char
  ;; that the next token is the left bracket.  In this case we handle
  ;; the backquote reading ourselve by duplicating xr-bq-macro and then
  ;; we return a predication-maker form.
  (ignore char)
  (let ((si:**backquote-count** (1+ si:**backquote-count**)))
    ;;  first do a read-char for effect to get rid of the bracket
    (read-char stream)
    ;; then read the (possibly dotted) list and do backquote magic on it
    (let ((the-statement (read-delimited-dotted-list *joshua-close-predication-char* stream t)))
      `(predication-maker (backquote ,the-statement)))))

(defun joshua-comma-reader (stream char)
  (ignore char)
  (unless (> si::**backquote-count** 0)
    (sys:read-error stream "comma not inside a backquote"))
  (let ((c (funcall stream :tyi))
	(si:**backquote-count** (1- si:**backquote-count**)))
    (cond ((null c)
	   (si:read-eof stream "end of file reached while reading a comma inside a backquote"))
	  ((char-equal c #\@)
	   (list '*backquote-comma-atsign-flag* (si:read-recursive stream)))
	  ((char-equal c #\.)
	   (list '*backquote-comma-dot-flag* (si:read-recursive stream)))
	  (t (funcall stream :untyi c)
	     (list '*backquote-comma-flag* (si:read-recursive stream))))))

(defun (:property backquote gprint::formatter) (x)
  (gprint::format-quote "`" x))

(defun (:property *backquote-comma-flag* gprint::formatter) (x)
  (gprint::format-quote "," x))

(defun (:property *backquote-comma-dot-flag* gprint::formatter) (x)
  (gprint::format-quote ".," x))

(defun (:property *backquote-comma-atsign-flag* gprint::formatter) (x)
  (gprint::format-quote ",@" x))


1

0;;;
;;; Source code representations of Joshua logic variables and predications.
;;;

(defvar *known-lvs* nil "The list of currently scoped logic-variable-maker names")

;;; Logic-variable-makers are the things in source
;;; code used to indicate that a logic variable is intended.

(defun make-logic-variable-maker (name)
  `(logic-variable-maker ,name))

(defun logic-variable-maker-p (form)
  (and (consp form) (eq (car form) 'logic-variable-maker)))

(deftype logic-variable-maker ()
  '(satisfies logic-variable-maker-p))

(defun logic-variable-maker-name (lv-maker)
  (second lv-maker))

(defun predication-maker-p (form)
  (and (consp form) (eq (car form) 'predication-maker)))

(deftype predication-maker ()
  '(satisfies predication-maker-p))

(defun predication-maker-statement (form)
  (second (second form)))

(defun predication-maker-predicate (form)
  (let ((statement-container (second form)))
    (if (member (car statement-container) '(quote backquote))
	;; this is the "nice" case of strictly quoted stuff
	(first (second statement-container))
	;; it's one of the Messy xr-bq-?? stuff
	(error "Trying to find predicate of predication-maker which I don't understand~&~s"
	       form))))

(defmacro with-predication-maker-destructured (arglist statement &body body)
  (when (null statement)
    (setq statement 'self))
  `(destructuring-bind ,arglist (cdr (predication-maker-statement ,statement))
     ,@body))

(defmacro logic-variable-maker (name)
  (unless (member name *known-lvs*)
    (warn "The logic variable ~s has been used as a free reference." name))
  name)

;;; This macro converts what the reader produces into what is meant by
;;; that.

;;; To allow simple parsing of rule patterns, the input produced by the
;;; reader is a direct structural analog of what the user typed unless
;;; the input used explicit backquoting and commifying.

;;; If you eval the results of this macro expansion you'll get the
;;; predication structure that you expect.  This macro "commifies"
;;; logic-variables as well as predication-creating forms used inside
;;; the top-level predication creation form.

(defmacro predication-maker (&body form &environment env)
  (let ((new-lvs nil) (all-lvs *known-lvs*))
    (labels
      ((collect-lv (lv)
	 (let ((lv-name (logic-variable-maker-name lv)))
	   (when (not (member lv-name all-lvs))
	     (push lv-name new-lvs)
	     (push lv-name all-lvs))))
       ;; This gets called to walk over quoted forms it finds
       ;; logic-variable and forces them to be evaluated.
       (do-away-with-lvs (form)
	 (cond ((atom form) form)
	       ((logic-variable-maker-p form)
		(collect-lv form)
		(list '*backquote-comma-flag* form))		
	       (t (loop for sublist = form then (cdr sublist)
			while (and (consp sublist)
				   (not (logic-variable-maker-p sublist)))
			for thing = (car sublist)
			collect (do-away-with-lvs thing) into answer
			finally (when sublist
				  (setq answer (nconc answer (do-away-with-lvs sublist))))
				(return answer)))))
       ;; A code walker which converts quoted
       ;; logic-variables-makers to evaluated ones and which
       ;; turns predication-maker into make-predication.
       (walker (form)
	 (lt:copyforms
	   #'(lambda (subform kind usage)
	       ;; (format t "~&Subform ~s~% Kind ~s Usage ~s" subform kind usage)
	       (ignore usage)
	       (cond ((predication-maker-p subform)
		      ;; make predication form
		      (values `(make-predication ,(walker (second subform)) ,@(cddr subform)) t))
		     ((logic-variable-maker-p subform)
		      ;; a non-quoted logic variable
		      ;; just collect it
		      (collect-lv subform)
		      ;; this says that I handled it.
		      (values subform t))
		     ;; logic-variable in tail
		     ((and (consp subform)
			   (logic-variable-maker-p (cdr subform)))
		      ;; With lvs being a list (lv x) the tail variable looks like a
		      ;; two long list in the tail.  This catches it before confusion
		      ;; sets in.
		      (collect-lv (cdr subform))
		      (values (cons (walker (car subform)) (cdr subform))
			      t))
		     ;; being of quoted context
		     ((and (eq kind 'quote) (consp subform) (eq (car subform) 'quote))
		      (let ((quoted-stuff (second subform)))
			(values (expand-backquote (do-away-with-lvs quoted-stuff)) t)))
		     ;; anything else
		     (t (values subform nil))))
	   form
	   :expand-all-macros t
	   :environment env))
       ;; This one is used to preprocess the form, forcing all nested
       ;; predications to be commifed.
       (commify-predications (form &optional (pred-count 0) (backquote-count 0))
	 (cond ((predication-maker-p form)
		(let ((matrix (cond ((member (first (second form)) '(quote backquote))
				     `(predication-maker
					(backquote ,(commify-predications (second (second form))
									  (1+ pred-count)
									  (1+ backquote-count)))))
				    (t `(predication-maker
					  ,(commify-predications (second form)
								 (1+ pred-count)
								 backquote-count))))))
		  (when (and (not (zerop pred-count)) (not (zerop backquote-count)))
		    (setq matrix (list '*backquote-comma-flag* matrix)))
		  matrix))
	       ((atom form) form)
	       ((member (car form) `(*backquote-comma-flag* *backquote-comma-atsign-flag* *backquote-comma-dot-flag*))
		(list (car form)
		      (commify-predications (cadr form) pred-count (1- backquote-count))))
	       (t (loop for sublist = form then (cdr sublist)
			while (consp sublist)
			for thing = (car sublist)
			collect (commify-predications thing pred-count backquote-count) into answer
			finally (if (null sublist)
				    (return answer)
				    (return (nconc answer
						   (commify-predications sublist pred-count backquote-count)))))))))
      (let ((form (walker (commify-predications `(predication-maker ,@form)))))
	(if new-lvs
	    `(let ,(loop for lv in new-lvs collect `(,lv (make-unbound-logic-variable ',lv)))
	       (declare (sys:logic-variable ,@new-lvs))
	       (compiler-let ((*known-lvs* ',all-lvs))
		 ,form))
	    form)))))




;;; This is the boxed structure for holding a logic variable's pname
;;; and value cell.

(defstruct (joshua-logic-variable
	     (:print-function
	       (lambda (self stream slashify-p)
		 (si:printing-random-object (self stream :typep)
		   (format stream "named ~a" (joshua-logic-variable-name self))))))
  name
  value-cell)

(defsubst logic-variable-contents-locative (thing)
  ;; Return a locative to what the logic variable points to.
  ;; (I.e., locative to the home if it's unbound, otherwise a locative to the value.)
  (sys:%p-contents-as-locative thing))

(defsubst %p-store-unbound-logic-variable (pointer)
  ;; Stores an unbound logic variable in the cell that pointer points to.
  ;; This version is conservative about preserving cdr-codes.
  (sys:%p-store-cdr-type-and-pointer pointer (sys:%p-cdr-code pointer) sys:dtp-logic-variable pointer))

(defun make-unbound-logic-variable (name)
  ;; used by the BIN dumper to dump logic variables.
  (let ((variable-structure (make-joshua-logic-variable :name name :value-cell nil)))
    ;; install an unbound variable in the value cell slot and return it.
    ;; this is essentially what read-variable does.
    (%p-store-unbound-logic-variable
      (locf (joshua-logic-variable-value-cell variable-structure)))
    (joshua-logic-variable-value-cell variable-structure)))

(defun logic-variable-name (logic-variable)
  ;; given the value cell, find the structure and get the name
  ;; see if it's in the control stack
  (check-type logic-variable unbound-logic-variable)
  (let ((locative (sys:%make-pointer sys:dtp-locative logic-variable)))
    (multiple-value-bind (function name)
	(dbg:function-and-local-name-from-locative locative)
      (when (and function (null name))
	(error "No name known for logic variable at ~S" locative))
      (or name
	  (if (and (not (plusp (sys:%pointer-difference locative
							si:*system-symbol-cell-table-tail*)))
		   (sys:%pointer-lessp si:*system-symbol-cell-table* locative))
	      ;; forwarded symbol cell
	      (compiler:disassemble-decode-locative locative)
	      (let ((structure (sys:%find-structure-header locative)))
		(typecase structure
		  (joshua-logic-variable
		    ;; it's one of our consed variables
		    (joshua-logic-variable-name structure))
		  (cons
		    (if (and (symbolp (first structure))
			     (eq (second structure) logic-variable))
			;; must be an interpreter lexical environment
			(first structure)
			(intern (format nil "LV-~o" (sys:%pointer locative)))))
		  (symbol
		    ;; unforwarded special variable
		    structure)
		  (otherwise
		    (error "Unable to figure out a name for logic variable at ~S" locative)))))))))

(defun compare-logic-variables (lv1 lv2)
  ;; function suitable for comparing logic variables.  Logic-variables-same-name-p
  ;; would be true of distinct anonymous variables, so this is better.
  (let ((name1 (logic-variable-name lv1)))
    (if name1
	;; if at least one is named, compare the names
	(eq name1 (logic-variable-name lv2))
	;; otherwise use eql, because at least one is anonymous
	(eql lv1 lv2))))

(defmacro with-unbound-logic-variables (variable-list &body body &environment env)
  ;; execute body with lisp variables bound to unbound logic variables.
  (multiple-value-bind (declarations real-body)
      (sys:find-body-declarations body env)
    `(let ,variable-list
       (declare (sys:logic-variable ,@variable-list))       ; ensure dereferencing
       ,@declarations
       ,@(loop for variable in variable-list
	       collecting `(initialize-logic-variable ,variable))
       (values)					;make sure we don't return one of the above
       ,@real-body)))

(defmacro initialize-logic-variable (variable)
  (check-type variable symbol)
  `(let ((pointer (sys:variable-location ,variable)))
     (SYS:%P-STORE-CDR-TYPE-AND-POINTER
       pointer
       (SYS:%P-CDR-CODE POINTER)	;PRESERVE CDR CODE IN INTERPRETER
       sys:dtp-logic-variable	
       pointer)))

(compiler:deftransformer (initialize-logic-variable initialize-logic-variable-compile) (form)
  (block optimizer
    (compiler:matchp form
      ((* variable)
       (when (symbolp variable)
	 (return-from optimizer
	   `(setq ,variable (sys:%make-pointer sys:dtp-logic-variable
					       (sys:variable-location ,variable)))))))
    form))

;;; Print logic variables nicely.  If you get an unbound logic variable inside a Joshua variable,
;;; print the Joshua variable.
(defun (:property sys:dtp-logic-variable si:print) (exp i-printdepth slashify-p stream which-operations recursive)
  (declare (ignore which-operations i-printdepth))
  ;; how to print a logic variable if you happen to be Joshua.  Non-Joshua programs
  ;; won't be affected; they'll still get the si:print-random-object behavior.
  (ignore recursive slashify-p)
  (condition-case ()
       (format stream "~a" (logic-variable-name exp))
     (error
       (future-common-lisp:print-unreadable-object (exp stream :type t :identity t)
	 ))))

#+imach
(setf (get 'sys:dtp-external-value-cell-pointer 'si:print)
      (get 'sys:dtp-logic-variable 'si:print))

;;; How to describe a logic variable -- cribbed from si:describe-locative
(defun (:property sys:dtp-logic-variable si:describe) (lv)
  ;; how to describe a dtp-logic-variable.  First, point out we know the datatype.
  (format t "~&~S is a DTP-LOGIC-VARIABLE, currently unbound." lv)
  ;; get a locative to where it points
  (let* ((x (logic-variable-contents-locative lv))
	 (area (si:%AREA-NUMBER X))) 
	  ;; cribbed from si:describe-locative -- figure out what it points to.
    (MULTIPLE-VALUE-BIND (OBJECT HOW)
	(COMPILER:DISASSEMBLE-DECODE-LOCATIVE X)
      (case HOW
	(:VARIABLE (FORMAT T "~%~S is a locative pointer to the value cell of ~S"
			   X OBJECT))
	(:FUNCTION (FORMAT T "~%~S is a locative pointer to the function definition cell of ~S"
			   X OBJECT)))
      (COND (AREA
	     (FORMAT T "~%It points into area ~S" (si:AREA-NAME AREA))
	     (COND ((= (LDB sys:%%REGION-SPACE-TYPE (si:REGION-BITS (si:%REGION-NUMBER X)))
		       sys:%REGION-SPACE-STACK)
		    (MULTIPLE-VALUE-BIND (ORIGIN ACTIVE-SIZE IGNORE IGNORE STACK-GROUP TYPE)
			(si:DECODE-STACK-ADDRESS X)
		      (WHEN ORIGIN
			(FORMAT T "~%It points to word ~O of the ~@ stack of ~S."
				(si:%POINTER-DIFFERENCE X ORIGIN) TYPE STACK-GROUP)
			(WHEN ( (si:%POINTER-DIFFERENCE X ORIGIN) ACTIVE-SIZE)
			  (FORMAT T "~%This is ~O word~:P past the valid end of the stack."
				  (- (si:%POINTER-DIFFERENCE X ORIGIN) ACTIVE-SIZE))))))
		   (T
		    (MULTIPLE-VALUE-BIND (STRUC BASEP SIZE)
			(si:%FIND-STRUCTURE-EXTENT X)
		      (cond ((consp struc)
			     (format t "~%It is an interpreter lexical variable"))
			    (t
			     (COND ((NULL BASEP))		;Doesn't point to any object
				   ((OR (si:%POINTER-LESSP
					  (si:%MAKE-POINTER-OFFSET si:DTP-LOCATIVE STRUC (1- SIZE))
					  X)
					(si:%POINTER-LESSP X BASEP))
				    (FORMAT T "~%It points at some sort of forwarded version of ~S~%"
					    STRUC))
				   (T (FORMAT T "~%It points to word ~O of ~S~%"
					      (si:%POINTER-DIFFERENCE X STRUC) STRUC)))
			     (si:DESCRIBE-1 STRUC)))))))
	    #+3600
	    ((si:%POINTER-LESSP sys:A-MEMORY-VIRTUAL-ADDRESS X)
	     (FORMAT T "~%It points into A-memory."))
	    (T (FORMAT T "~%It points to an address not in any area." X)))))
  ;; return the variable
  lv)

#+imach
(setf (get 'sys:dtp-external-value-cell-pointer 'si:describe)
      (get 'sys:dtp-logic-variable 'si:describe))

(defun (:property sys:dtp-logic-variable si:dump-object) (lv stream)
  (let* ((box (sys:%find-structure-header lv))
	 (index (gethash box si:*bin-dump-table*)))
    (cond (index
	    ;; this has been dumped before.  recursively dumping the box will dump a reference
	    ;; to the bin-dumper's table, which will find the make-unbound-logic-variable
	    ;; form, below.  This preserves EQ-ness.
	    (si:dump-object box stream))
	  (t
	    ;; has not been dumped before, so enter it in the dumper's table so it can
	    ;; preserve EQ-ness.  note that we dump the box instead of the lv, to avoid
	    ;; problems with unbound logic variables and block-search-eq ucode for hash tables.
	    (si:enter-table box stream t)
	    (si:dump-form-to-eval
	      ;; this is essentially what read-variable does.
	      `(make-unbound-logic-variable ',(logic-variable-name lv))
	      stream)))))

#+imach
(setf (get 'sys:dtp-external-value-cell-pointer 'si:dump-object)
      (get 'sys:dtp-logic-variable 'si:dump-object))


;;;
;;; Reader functions called by the Joshua reader.  These shouldn't cause errors while
;;; inside the input-editor.  Instead, they call si:read-error.
;;;

(defsubst white-space-p (char &optional (readtable *joshua-readtable*))
  "Whether this char is a whitespace char in readtable."
  ;; cribbed from si:xr-char-class-test
  (si:bit-test (si:xr-char-class-bits si:white-space)
	       (si:rdtbl-bits readtable (char-code char))))

(defun read-delimited-dotted-list (char &optional stream recursive-p)
  (cond ((null stream) (setq stream zl:standard-input))
	((eq stream t) (setq stream zl:terminal-io)))
  (setq char (code-char (char-code char)))
  (if recursive-p
      (si:read-list-internal stream char nil)
      ;; if the stream is interactive and we are not already inside the input editor,
      ;; then invoke it.  also start a new circular-list environment.
      (with-input-editing (stream :end-activation)
	(let ((si:*read-circularity* nil))
	  (si:read-list-internal stream char nil)))))

(defun read-predication (stream char)
  "Reader for Joshua predications,
   called when we read a left-bracket not immediately preceded by a backquote"
  (ignore char)
  `(predication-maker
	 ',(read-delimited-dotted-list *joshua-close-predication-char* stream t)))

(defvar *equiv-string* "")
(defvar *question-string* "?")
(defvar *equiv-anonymous* "ANONYMOUS-")
(defvar *question-anonymous* "?ANONYMOUS-")
(defun read-variable (stream char)
  "Reader for Interning Joshua variables."
  (ignore char)
  ;; peek at the very next character
  (let ((next (peek-char nil stream nil #\space nil)))
    (cond ((or (white-space-p next)
	       (char-equal next *joshua-close-predication-char*)	;common case
	       (char-equal next #\)))		;another one
	   ;; this variable is anonymous
	   ;; Make more robust -- assume anonymous if following token not a symbol.
	   ;; Instead of whitespace-p, want to ask if whitespace or something that can't begin a symbol.
	   (make-logic-variable-maker (gentemp (if (eql char #\?)
						   *question-anonymous*
						   *equiv-anonymous*))))
	  ((symbolp (setq next (read stream t nil t)))
	   `(logic-variable-maker ,(intern (string-append (if (eql char #\?)
							      *question-string*
							      *equiv-string*)
							  (string next)))))
	  (t
	    ;; not a symbol
	    (si:read-error stream "Expected symbol (or anonymous) in variable name, got ~S instead." next)))))

1

0;;;
;;; How to construct a Joshua readtable.
;;;

(defun make-joshua-readtable ()
  "Makes a readtable for Joshua."
  ;; Yes, it costs a few extra cycles to use ' instead of #', but this
  ;; way we get patches properly
  ;; first make a standard CL readtable
  (let* ((new-readtable (copy-readtable nil)))
    ;; tell this readtable where it came from ("Daddy, where did I come from?")
    (setf (si:readtable-appropriate-file-syntax new-readtable) :joshua)
    (setf (si:readtable-name new-readtable) "Standard-Joshua")
    ;; now add our modifications to it
    ;; since it's just a constant recognized by other reader functions in context.
    (set-macro-character *joshua-variable-char*
			 'read-variable
			 t			;non-terminating, i.e., only activates at beginning of token
			 new-readtable)
    (set-macro-character *joshua-alternative-variable-char*
			 'read-variable
			 t			;non-terminating, i.e., only activates at beginning of token
			 new-readtable)
    (set-macro-character *joshua-open-predication-char*
			 'read-predication
			 nil			;terminating (like parentheses)
			 new-readtable)
    (set-syntax-from-char *joshua-close-predication-char* #\) new-readtable nil)
    (set-macro-character
      #\,
      #'joshua-comma-reader
      nil
      new-readtable)
    (set-macro-character
      #\`
      #'joshua-top-level-backquote-reader
      nil
      new-readtable)
    new-readtable))

(setq *joshua-readtable* (make-joshua-readtable))

1

0;;;
;;; Another lisp syntax.  Now you can do :Set Lisp Context Joshua and win.
;;;

;;; This stuff is for release 7.4
;(si:define-lisp-syntax :joshua
;		       (:readtable-place *joshua-readtable*
;			:packages-must-use (("joshua" "scl" "cl")))
;  "called when we enter joshua mode."
;  (si:setq-standard-value *readtable* *joshua-readtable*)
;  (let ((pul (package-use-list *package*)))
;    (unless (or (eq *package* (find-package "ji"))
;		(eq *package* (find-package "ju"))
;		(eq *package* (find-package "joshua"))
;		(member (find-package "joshua") pul)
;		(member (find-package "ji") pul)
;		(member (find-package "ju") pul))
;      ;; package cannot possibly be a joshua package, so set it to ju
;      (format *error-output* "~& package ~a is not a joshua package. joshua-user will be used instead."
;	      *package*)
;      (si:setq-standard-value *package* (find-package "ju")))))
;
;(defun install-new-joshua-readtable (&optional (new-readtable (make-joshua-readtable)))
;  "Creates a new Joshua readtable and installs it."
;  (when (and (boundp '*joshua-readtable*) (readtablep *joshua-readtable*))
;    ;; old value is a readtable, make sure to remove it from valid readtables
;    (setq si:*valid-readtables* (delete *joshua-readtable* si:*valid-readtables*)))
;  (setq *joshua-readtable* new-readtable)	;put it in the standard place
;  (push *joshua-readtable* si:*valid-readtables*)	;validation function
;  ;; innocuous value
;  t)						      
;
;(install-new-joshua-readtable)

(si:define-lisp-syntax :joshua
      :readtable *joshua-readtable*
      :packages-must-use '(("joshua" "scl") ("joshua" "cl"))
      :default-package-use-list '("joshua" "scl")
      :user-package "ju"
      :reasonable-packages ()
      :inherits-from :common-lisp
      :relative-names '(("user" "joshua-user")))




;;; these used to be in descriptions
;;; moved here since they're used in constructing names for predication constructors

(defun all-symbols-or-strings (symbols-or-strings)
  ;; t if everything is a symbol or string
  (and (listp symbols-or-strings)
       (every #'(lambda (x) (or (symbolp x) (stringp x))) symbols-or-strings)))

(defun symbolconc (&rest symbols-or-strings)
  "Construct a new symbol from old ones.  Careful about package."
  (declare lt:(side-effects simple reducible))
  (check-type symbols-or-strings (satisfies all-symbols-or-strings) "an &rest arg of symbols or strings")
  ;; string-append 'em and intern 'em
  (intern (apply #'string-append symbols-or-strings)
	  ;; package is that of leftmost symbol or current package
	  (let ((leftmost-symbol (find-if #'symbolp symbols-or-strings)))
	    (if (and leftmost-symbol
		     (not (si:pkg-locked (symbol-package leftmost-symbol))))
		;; there was a symbol in the args; this one is leftmost
		;; and furthermore, it's not sys or cli or something like that.
		(symbol-package leftmost-symbol)
		;; just use the current package
		*package*))))

