;;; -*- Mode: Joshua; Package: JOSHUA-INTERNALS; Syntax: Joshua -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Created 5/20/87 16:35:41 by sgr running on GROUSE at SCRC.

;;;
;;; Putting it all together:
;;; 
;;; Here are the main methods that call out to the protocol g-f's
;;; and implement what Joshua's really doing under all protocol.
;;;

(define-predicate-model default-rule-compilation-model
	()
	()
  :abstract-flavor
  (:required-flavors predication))


(define-predicate-model default-ask-model
	()
	()
  :abstract-flavor
  (:required-flavors predication))

(define-predicate-method (fetch default-ask-model :default) (&rest ignore)
  ;; cause an error if you try to ASK one of these
  (error "You have failed to provide a fetch method for Predication ~S." (type-of self)))

(define-predicate-model default-tell-model
	()
	()
  :abstract-flavor
  (:required-flavors predication))

(define-predicate-method (data-is-guaranteed-variable-free default-tell-model) () nil)

(define-predicate-method (insert default-tell-model :default) (&rest ignore)
  ;; cause an error if you try to ASK one of these
  (error "You have failed to provide an insert method for Predication ~S." (type-of self)))

;;; this is the model that holds the default high-level implementation of the
;;; Joshua protocol
(define-predicate-model default-protocol-implementation-model
	;; STIMULATE-LIST is a list of actions to take the next time
	;; this predication comes in, i.e., gets a truth-value of
	;; something other than *UNKNOWN*
	((rete-states nil)
	 (stimulate-list nil))
	(default-rule-compilation-model default-ask-model default-tell-model)
  :abstract-flavor
  (:conc-name predication-)
  (:required-flavors predication)
  (:readable-instance-variables stimulate-list rete-states)
  (:writable-instance-variables stimulate-list rete-states))

(defparameter *forward-priority-queue* (make-heap :predicate #'> :interlocking nil)
  "The global heap for prioritizing forward rule firings.")

(defvar *forward-queue-emptying-p* nil "Flag to prevent multiple attempts to empty queue.")

(defvar *something-in-fwrd-q* nil "Flag to quickly tell us if there is something in the Forward Queue.")

(defvar *delay-rule-trigger-list* nil)
(defvar *delay-rule-triggering* nil)

(defun run-forward-queue ()
  (loop for entry = (send *forward-priority-queue* :remove)
	;; note that the heap-elements iteration path is the wrong thing for this.
	when (send *forward-priority-queue* :empty-p)
	  do (setq *something-in-fwrd-q* nil)
	while entry
	;; have to go through run-rule, 'cause the truth-values might have changed.
	doing (execute-forward-rule (car entry) (cadr entry))))

;;; This should be rewritten not to recompute the importance.
(define-joshua-encapsulation (encaps-run-forward-queue run-forward-queue nil
						       '(:dequeue-forward-rule))
  :before-body
  `(loop for entry = (send *forward-priority-queue* :remove)
	 when (send *forward-priority-queue* :empty-p)
	   do (setq *something-in-fwrd-q* nil)
	 while entry
	 doing (trace-dequeue-forward-rule 
		 (rete-terminal-entry-rule-name (cadr entry))
		 (rete-internal-state-predications (car entry))
		 (rete-internal-state-environment (car entry))
		 (number-from-importance (Rete-terminal-entry-importance (cadr entry))))
	       ;; note that the heap-elements iteration path is the wrong thing for this.
	       ;; have to go through run-rule, 'cause the truth-values might have changed.
	 doing (execute-forward-rule (car entry) (cadr entry))))


(defsubst clear-forward-queue ()
  ;; throw away a bunch of queued rules.
  (send *forward-priority-queue* :clear)
  (setq *something-in-fwrd-q* nil))

(defresource backward-importance-queue-resource ()
  ;; resource of queues used by backward chaining (we only allocate one if we're actually gonna use it)
  :constructor (si:make-heap :size 10 :predicate #'>)
  ;; deinitializer instead of initializer to give the gc an even break
  :deinitializer (send object :clear))

(defun run-backward-queue (queue function)
  ;; empty a backward queue, doing something to each entry
  (declare (sys:downward-funarg function))
  (loop for entry = (send queue :remove)
	while entry
	doing (funcall function entry)))

;;; This is really replacing the original funtion not encapsulating it.
(define-joshua-encapsulation (:encaps-run-backward-queue run-backward-queue nil
							 '(:enqueue-backward-rule))
  :before-body
  '(destructuring-bind (queue function) si:arglist
     (loop with key 
	   with entry
	   with something-there
	   do
       (multiple-value-setq (entry key something-there)
	 (send queue :remove))
       (when (and something-there
		  (backward-trigger-p entry))
	 (trace-dequeue-backward-rule (backward-trigger-rule entry) nil nil key)
	 (funcall function entry))
       (when (not something-there)(return nil)))))

;;; Removing the subst, turn it it to something I can encapsulate
(defun enqueue-backward (queue entry importance)
  ;; stick this in a backward queue
  (send queue :insert entry (number-from-importance importance)))

;;; encapsulate the backward queuing, this is a proper encapsulation
(define-joshua-encapsulation (encaps-enqueue-backward enqueue-backward t
						      '(:enqueue-backward-rule))
  :before-body
  '(destructuring-bind (nil entry importance) si:arglist
     (when (backward-trigger-p entry)
       (trace-enqueue-backward-rule (backward-trigger-rule entry)
				    nil nil
				    (number-from-importance importance)))))

(defsubst number-from-importance (importance)
  ;; convert the thing in the importance slot to a number
  ;; note that this gets done once, when the thing gets enqueued.  Subsequent frobbage
  ;; of state to alter its importance won't matter.
  (etypecase importance
    (number importance)
    (function (funcall importance))
    (symbol (symbol-value importance))))

(defsubst enqueue-forward-rule (rete-state child-entry importance)
  ;; stick an entry into the priority queue with a given priority
  (send *forward-priority-queue* :insert (list rete-state child-entry) (number-from-importance importance)))

;;; What's on the stimulate list of a predication is a list of
;;; rete-match-nodes to process.

(defmethod (stimulate default-protocol-implementation-model) (truth-value)
  ;; First look at all the match nodes that we haven't yet done the
  ;; match with.
  (loop until ( (predication-bits-truth-value bits) truth-value)
	for rete-state in rete-states
	doing (stimulate-rete-state rete-state truth-value))
  (loop with pointer = (locf stimulate-list)
	for match-node = (cadr pointer)
	;; stop when my bits have been changed, or when there are no
	;; more entries in the stimulate-list
	until (or ( (predication-bits-truth-value bits) truth-value) (null match-node))
	for required-truth-value = (rete-match-node-truth-value match-node)
	if ( required-truth-value truth-value)
	  ;; If this guy doesn't have the right truth-value
	  ;; just bypass him; he'll stay sitting on the stimulate-list
	  do (setf pointer (cdr pointer))
	     ;; otherwise process the entry and splice him out
	else do (rete-network-match-predication match-node self)
		(setf (cdr pointer) (cddr pointer))))

;;;
;;; The actual default implementations of the protocol fns.
;;; Note that D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")predication0 supports only SAY in any interesting manner.
;;; Note that 1default-protocol-implementation-model0 does not
;;; implement CLEAR, INSERT, or FETCH.  The default for those is on DN-MODEL, although it 
;;; should probably be here.
;;;

(define-predicate-method (say predication) (&optional (stream *standard-output*))
  ;; default implementation of the SAY protocol.  If used, this is usually overridden
  ;; at the predicate level, not the model level 
  (format stream "~S" self))

;;; the defaults for 1predication0 are to complain

(define-predicate-method (tell predication) (&rest arguments)
  (declare (ignore arguments))
  (error "The TELL operation for the predicate ~S is not defined"
	 (predication-predicate self)))

(define-predicate-method (untell predication) (&rest arguments)
  (declare (ignore arguments))
  (error "The UNTELL operation for the predicate ~S is not defined"
	 (predication-predicate self)))

(define-predicate-method (untell predication :whopper) ()
  (if (has-been-in-database-p self)
      (continue-whopper)
      (ask self #'(lambda (backward-support)
		    (untell (ask-database-predication backward-support)))
	   :do-backward-rules nil
	   :do-questions nil)))

(define-predicate-method (ask predication) (&rest arguments)
  (declare (ignore arguments))
  (error "The ASK operation for the predicate ~S is not defined"
	 (predication-predicate self)))

(defun parse-justification (justification)
  ;; parse up the justification into pieces to hand to justify
  (declare (values mnemonic true-supporters false-supporters unknown-supporters))
  (etypecase justification
    (null
      ;; not supplied, so default it from *support*
      (loop for supporter in *support* 
	    for truth-value = (predication-truth-value supporter)
	    if (= truth-value *true*) collect supporter into true-support
	    else if (= truth-value *false*) collect supporter into false-support
	    else if (= truth-value *unknown*) collect supporter into unknown-support
	    else do (error "Contradictory truth-value of ~S in *support*: ~S" supporter *support*)
	    finally (return (values *running-rule* true-support false-support unknown-support))))
    (symbol
      ;; no particular supporters
      (values justification nil nil nil))
    (cons
      ;; standard thing to hand off to justify
      (destructuring-bind (mnemonic &optional true-support false-support unknown-support)
	  justification
	(values mnemonic true-support false-support unknown-support)))))

(define-predicate-method (tell default-tell-model) (truth-value justification)
  ;; this works in a couple of stages, using other elements of the protocol:
  ;;   1. insert this into the virtual database.
  ;;   2. justify it.  At that point, the truth value gets set.  That will call
  ;;       notice-truth-value-change, which (among other things), will fire forward rules.
  (multiple-value-bind (database-predication new-p)
      (insert self)
    (when new-p
      (setf (predication-bits database-predication)
	    (logior (logandc2 (predication-bits database-predication)
			      ;; clear these fields
			      (make-predication-bits :truth-value -1
						     :has-been-in-database -1
						     :ive-been-in-before -1
						     :tms-bits -1
						     :ive-been-untold -1))
		    ;; and set them to
		    (make-predication-bits :truth-value *unknown*
					   :has-been-in-database 1
					   :ive-been-in-before 0
					   :tms-bits 0
					   :ive-been-untold 0))))
    (unless (eq justification :none)
      (let ((final-justification (or justification *support* :premise)))
	(etypecase final-justification
	  (symbol (justify database-predication truth-value final-justification))
	  (cons (apply #'justify database-predication truth-value final-justification)))))
    (values database-predication new-p)))

(define-predicate-method (untell default-tell-model) ()
  (unjustify self)
  (uninsert self)
  nil)

(define-predicate-method (untell default-protocol-implementation-model :before) ()
  (Rete-network-delete-predication self)
  nil)

;;; Default implementations of the 5 TMS generics.

(define-predicate-method (justify default-tell-model) (truth-value &rest ignore)
  ;; make some args be optional?
  ;; Justify a predication.  This is really a stub until the rest of the TMS.
  ;;   First, set the truth-value of the predication to what we're given.
  ;;   Second, mess with tracing.
  ;;   Third, set the ive-been-in-before bit to true.
  ;;   Fourth, if this is not the same truth value as before, notice that and maybe run postponed rules.
  (let* ((old-truth-value (predication-bits-truth-value bits))
	 (truth-changed-p (not (eql old-truth-value truth-value))))
    (setf (predication-bits-truth-value bits) truth-value)
    (when truth-changed-p
      (notice-truth-value-change self old-truth-value)
      ;; truth-value has changed, allow noticers to run
      (act-on-truth-value-change self old-truth-value))))

(define-predicate-method (notice-truth-value-change default-tell-model) (old-truth-value)
  ;; default noticer, does nothing.
  (ignore old-truth-value)
  nil)

(define-predicate-method (act-on-truth-value-change default-tell-model) (old-truth-value)
  ;; default acter, does nothing
  (ignore old-truth-value)
  nil)

;(define-predicate-method (justify default-protocol-implementation-model :after) (&rest ignore)
;  ;; calling justify from top-level might cause stimulate to get called.
;  ;; stimulate might try to run a rule, which might cause queuing.
;  ;; that queuing necessitates this.
;  (when (and *something-in-fwrd-q* (not *forward-queue-emptying-p*))
;    (run-forward-queue)))

;;; Before any other truth value change noticing, first see
;;; if this is first time this guy is coming in and if so
;;; map over the forward rule triggers now.

(define-predicate-method (notice-truth-value-change default-protocol-implementation-model :before) (old-truth-value)
  ;; If it's the updating pass and there's a truth value change, then
  ;; update the rete network.
  (when (not (eql old-truth-value (predication-bits-truth-value bits)))
    (rete-network-retract-predication self)))

(define-predicate-method (act-on-truth-value-change default-protocol-implementation-model :before) (old-truth-value)
  (when (and (eql old-truth-value *unknown*)
	     ;; we only want to do this mapping the first time the guy
	     ;; has a real truth value.
	     (zerop (predication-bits-ive-been-in-before bits)))
    (setf (predication-bits-ive-been-in-before bits) 1)
    (let ((somebody-emptying-queue *forward-queue-emptying-p*)
	  (*forward-queue-emptying-p* t))
      (unwind-protect
	  (progn
	    (if *delay-rule-triggering*
		(push self *delay-rule-trigger-list*)
		(map-over-forward-rule-triggers
		  self
		  #'(lambda (Rete-node)
		      (declare (sys:downward-function))
		      ;; stop doing this if someone flushed this guy.
		      ;; this is because a rule could be triggered before this finishes
		      ;; mapping over all forward triggers.
		      (when (zerop (predication-bits-ive-been-untold bits))
			(Rete-network-match-predication Rete-node self)))))
	    (unless *delay-rule-triggering*
	      (when (and *something-in-fwrd-q* (not somebody-emptying-queue))
		(run-forward-queue))))
	(unless (or somebody-emptying-queue *delay-rule-triggering*)
	  (clear-forward-queue))))))

(defmethod (continue-suspended-forward-rule-triggering default-protocol-implementation-model)
	   ()
  (when (zerop (predication-bits-ive-been-untold bits))
    (map-over-forward-rule-triggers
      self
      #'(lambda (Rete-node)
	  (declare (sys:downward-function))
	  ;; stop doing this if someone flushed this guy.
	  ;; this is because a rule could be triggered before this finishes
	  ;; mapping over all forward triggers.
	  (when (zerop (predication-bits-ive-been-untold bits))
	    (Rete-network-match-predication Rete-node self))))))

(define-predicate-method (act-on-truth-value-change default-protocol-implementation-model :after) (old-truth-value)
  (ignore old-truth-value)
  (let ((truth-value (predication-bits-truth-value bits)))
      (when (not (= truth-value *unknown*))
	;; if value is now not *unknown*, see if postponed rules want to fire.
	(stimulate self truth-value))))

(define-predicate-method (unjustify predication :whopper) (&optional justification)
  (cond ((has-been-in-database-p self)
	 (continue-whopper justification))
	((not (null justification))
	 (error "You are trying to remove a specific justification ~s from a predication which isn't in the database ~s"
		justification self))
	(t (fetch self #'unjustify))))

(define-predicate-method (unjustify default-tell-model) (&optional justification)
  ;; default unjustifyor
  (ignore justification)
  (let* ((old-truth-value (predication-bits-truth-value bits))
	 (truth-changed-p (not (eql old-truth-value *unknown*))))
    (setf (predication-bits-truth-value bits) *unknown*)
    (when truth-changed-p
      (notice-truth-value-change self old-truth-value)
      ;; truth-value has changed, allow noticers to run
      (act-on-truth-value-change self old-truth-value)))
  nil)

(define-predicate-model trivial-tms-mixin () ())

(define-predicate-method (support trivial-tms-mixin) (&optional filter)
  ;; default support
  (ignore filter)
  (list self))

(define-predicate-method (nontrivial-tms-p trivial-tms-mixin) ()
  ;; default is no TMS
  nil)

(define-predicate-method (current-justification trivial-tms-mixin) ()
  self)

(define-predicate-method (all-justifications trivial-tms-mixin) ()
  (list self))

(defmethod (destructure-justification trivial-tms-mixin) ()
  (values "Predication justified without a TMS" nil nil nil))

(define-predicate-method (ask default-ask-model) (truth-value continuation do-backward-rules do-questions)
  ;;
  ;; notice that by the time this guy runs he has a definite truth value (*true* or *false*)
  ;; (no queries for *unknown* please).  Therefore, when he goes through the rete network
  ;; code later on, he won't get postponed until coming in.
  ;;
  ;; first get stuff from the database and call the continuation on that.
  (ask-data self truth-value continuation)
  ;; Now go get stuff from rules.
  (when do-backward-rules
    (ask-rules self truth-value continuation do-questions))
  ;; now go hack questions
  (when do-questions
    (ask-questions self truth-value continuation))
  ;; make it clear that there is no interesting return value
  (values))

(define-predicate-method (ask-data default-ask-model) (truth-value continuation)
  (fetch self
	 #'(lambda (database-predication)
	     (let ((database-bits (predication-bits database-predication)))
	       (when (or (null truth-value)
			  (= (predication-bits-truth-value database-bits)
			     truth-value))
		 ;; the truth value we're looking for matches the database predication
		 (with-unification
		   ;; if the database predication has variables, copy it
		   ;; so the database isn't side-effected
		   (if (zerop (predication-bits-has-logic-variables database-bits))
		       (unify statement (predication-statement database-predication))
		       (unify statement
			      (copy-object-if-necessary
				(predication-statement database-predication))))
		   ;; the unification succeeded, so call the continuation
		   (stack-let ((backward-support `(,self
						   ,truth-value
						   ,database-predication)))
		     (funcall continuation backward-support))))))))

(define-predicate-method (ask-rules default-ask-model) (truth-value continuation do-questions)
  (let ((backward-importance-queue nil))	;only make it if you need it (speed bum)
    (flet ((queue-trigger (trigger importance)
	     (unless backward-importance-queue
	       ;; create it if not there already
	       (setq backward-importance-queue
		     (allocate-resource 'backward-importance-queue-resource)))
	     (enqueue-backward backward-importance-queue trigger importance))
	   (run-trigger (trigger)
	     (trigger-backward-rule (backward-trigger-rule trigger)
				    self truth-value
				    continuation do-questions)))
      (map-over-backward-rule-triggers
	self
	;; call this on all backward triggers that might unify with me.
	#'(lambda (trigger)
	    (let ((importance (backward-trigger-importance trigger)))
	      (cond (importance
		     ;; this rule has an importance
		     (queue-trigger trigger importance))
		    (t
		     (run-trigger trigger))))))
      (when backward-importance-queue
	;; queue has been created, so process it and deallocate it.
	;; above so that continuations won't get consed.)
	(run-backward-queue backward-importance-queue #'run-trigger)
	(deallocate-resource 'backward-importance-queue-resource backward-importance-queue)))))

(defun trigger-backward-rule (rule predication truth-value continuation do-questions)
  (declare (dbg:invisible-frame joshua-internals)
	   (sys:downward-funarg continuation))
  (incf *backward-fire-count*)
  ;; we're now 1 deeper in rules.
  (funcall rule predication truth-value continuation do-questions))

(define-joshua-encapsulation (encaps-trigger-backward-rule
			       trigger-backward-rule
			       nil
			       '(:fire-backward-rule :exit-backward-rule
				 :succeed-backward-rule
				 :retry-backward-rule)
			       t)
  :before-body
  '(destructuring-bind (rule predication truth-value continuation do-questions)
       si:arglist
     (incf *backward-fire-count*)
     (when (zerop *rule-depth*)(reset-tracing-state *joshua-debugger*))
     (trace-fire-backward-rule rule predication truth-value -1)
     (with-another-rule
       ;; we're now 1 deeper in rules.
       (funcall rule predication truth-value
		#'(lambda (&rest args)
		    (declare (sys:downward-function))
		    (let ((*rule-depth* (1- *rule-depth*)))
		      (trace-succeed-backward-rule rule predication truth-value -1)
		      (apply continuation args)
		      (trace-retry-backward-rule rule predication truth-value -1)))
		do-questions))
     (trace-exit-backward-rule rule predication truth-value -1)))

(define-predicate-method (ask-questions default-ask-model) (truth-value continuation)
  (let ((backward-question-importance-queue nil)) ;only make it if you need it (speed bum)
    (map-over-backward-question-triggers
      self
      #'(lambda (question)
	  (let ((importance (question-info-importance (question-info question))))
	    (cond (importance
		    ;; this question has an importance attached to it
		    (unless backward-question-importance-queue
		      (setq backward-question-importance-queue
			    (allocate-resource 'backward-importance-queue-resource)))
		    (enqueue-backward backward-question-importance-queue question importance))
		  (t
		    ;; no importance, so do it now
		    (ask-question question self truth-value continuation))))))
    (when backward-question-importance-queue
      ;; someone queued some backward questions, so run them
      (run-backward-queue backward-question-importance-queue
			  #'(lambda (question)
			      (ask-question question self truth-value continuation)))
      (deallocate-resource 'backward-importance-queue-resource
			   backward-question-importance-queue))))

(defparameter *forward-trigger-discrimination-net*
	      (make-discrimination-net-node :token '*begin-forward-trigger*)
  "Default general purpose indexing scheme for trigger patterns of forward rules.")

(defparameter *backward-trigger-discrimination-net*
	      (make-discrimination-net-node :token '*begin-backward-trigger*)
  "Default general purpose indexing scheme for trigger patterns of backward rules.")

;;; the entries in the backward trigger discrimination net
(defstruct backward-trigger
  rule
  importance)

(defparameter *question-discrimination-net*
	      (make-discrimination-net-node :token '*begin-backward-question*)
  "Default general purpose indexing scheme for backward questions.")

(define-predicate-method (prefetch-forward-rule-matches default-protocol-implementation-model) (context continuation)
  ;; ask for real data with no truth value check
  ;; Notice that if you don't have an ask-data method, you need one of these
  ;; to do the right thing.
  (ignore context)
  (ask-data self nil
	    #'(lambda (derivation)
		(funcall continuation (ask-database-predication derivation)))))

(define-predicate-method (locate-forward-rule-trigger default-protocol-implementation-model)
			 (truth-value continuation context rule-name)
  (ignore context truth-value rule-name)
  (let ((dn-node (dn-tell-predication self *forward-trigger-discrimination-net*)))
    (multiple-value-bind (new-triggers something-changed the-canonical-node) 
	(funcall continuation (discrimination-net-node-info-or-table dn-node))
      (when something-changed
	(setf (discrimination-net-node-info-or-table dn-node) new-triggers))
      the-canonical-node)))

(define-predicate-method (locate-backward-rule-trigger default-protocol-implementation-model)
			 (truth-value continuation context rule-name)
  (ignore context truth-value rule-name)
  (let ((dn-node (dn-tell-predication self *backward-trigger-discrimination-net*)))
    (multiple-value-bind (new-triggers something-changed)
	(funcall continuation (discrimination-net-node-info-or-table dn-node))
      (when something-changed
	(setf (discrimination-net-node-info-or-table dn-node) new-triggers)))))

(define-predicate-method (locate-backward-question-trigger default-protocol-implementation-model)
			 (truth-value continuation context question-name)
  (ignore context truth-value question-name)
  (let ((dn-node (dn-tell-predication self *question-discrimination-net*)))
    (multiple-value-bind (new-triggers something-changed)
	(funcall continuation (discrimination-net-node-info-or-table dn-node))
      (when something-changed
	(setf (discrimination-net-node-info-or-table dn-node) new-triggers)))))


(define-predicate-method (map-over-forward-rule-triggers default-protocol-implementation-model) (continuation)
  ;; how to collect all forward triggers that might be interested in me
  (discrimination-net-fetch *forward-trigger-discrimination-net* self continuation))

(define-predicate-method (map-over-backward-rule-triggers default-protocol-implementation-model) (continuation)
  ;; how to collect all backward triggers that might be interested in me
  (discrimination-net-fetch *backward-trigger-discrimination-net* self continuation)) 

(define-predicate-method (map-over-backward-question-triggers default-protocol-implementation-model) (continuation)
  ;; how to collect all backward questions that might be interested in me
  (discrimination-net-fetch *question-discrimination-net* self continuation)) 

(define-predicate-method (add-forward-rule-trigger default-protocol-implementation-model)
			 (truth-value forward-trigger context rule-name)
  ;; add a trigger to the index of forward rules
  (locate-forward-rule-trigger self
			       truth-value
			       #'(lambda (triggers)
				   (install-and-intern-forward-rule-trigger forward-trigger triggers))
			       context
			       rule-name))

(define-predicate-method (add-backward-rule-trigger default-protocol-implementation-model)
			 (truth-value backward-trigger context rule-name)
  ;; add a trigger to the index of backward rules
  (locate-backward-rule-trigger self truth-value
			   #'(lambda (triggers)
			       (if (member backward-trigger triggers
					   :key #'backward-trigger-rule)
				   (values triggers nil)
				   (values (cons backward-trigger triggers) t)))
			   context
			   rule-name))

(define-predicate-method (add-backward-question-trigger default-protocol-implementation-model)
			 (truth-value question-trigger context question-name)
  ;; how to store a backward question.
  (locate-backward-question-trigger self truth-value
				    #'(lambda (triggers)
					(if (member question-trigger triggers)
					    (values triggers nil)
					    (values (cons question-trigger triggers) t)))
				    context
				    question-name))

(define-predicate-method (delete-forward-rule-trigger default-protocol-implementation-model)
			 (truth-value rule-name context)
  ;; used by undefrule
  (locate-forward-rule-trigger self
			       truth-value
			       #'(lambda (triggers)
				   (remove-and-deinstall-if-necessary-forward-rule-triggers
				     self rule-name triggers))
			       context
			       rule-name))

(define-predicate-method (delete-backward-rule-trigger default-protocol-implementation-model)
			 (truth-value rule-name context)
  ;; used by undefrule
  (locate-backward-rule-trigger self truth-value
			   #'(lambda (triggers)
			       (values (delete-if #'(lambda (trigger)
						      (eql rule-name (backward-trigger-rule trigger)))
						  triggers)
				       t))
			   context
			   rule-name))

(define-predicate-method (delete-backward-question-trigger default-protocol-implementation-model)
			 (truth-value question-name context)
  ;; how to unstore a backward question.
  (locate-backward-question-trigger self truth-value
				    #'(lambda (triggers)
					(if (member question-name triggers)
					    (values (delete question-name triggers) t)
					    (values triggers nil)))
				    context
				    question-name))



(defun symbol-tails (predication-maker)
  ;; return list of tails of statement that are headed by symbols
  (loop for token = (predication-maker-statement predication-maker) then (cdr token)
	while (consp token)
	;; needn't deal with tail variable, since variables can't ever be skipped anyway
	when (or (symbolp (car token)) (numberp (car token))) collect token))

(define-predicate-method (positions-forward-rule-matcher-can-skip default-rule-compilation-model) ()
  ;; returns a list of tails of the statement that can be ignored.
  (symbol-tails self))

(define-predicate-method (compile-forward-rule-action default-rule-compilation-model) (then-part rule-name environment)
  ;; default method for compiling forward actions
  (ignore then-part rule-name environment)
  ;; maintain *support* as justification
  `(tell-internal ,self  *true* nil))

(define-predicate-method (expand-forward-rule-trigger default-rule-compilation-model) (name truth-value ignore ignore)
  `(:match ,self ,name ,truth-value))

(define-predicate-method (expand-backward-rule-action default-rule-compilation-model) (name truth-value other-ask-args ignore)
  `(:match ,self ,truth-value ,name ,other-ask-args))


