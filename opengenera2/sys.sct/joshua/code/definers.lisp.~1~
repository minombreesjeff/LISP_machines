;;; -*- Mode: LISP; Package: JOSHUA-INTERNALS; Syntax: Common-Lisp; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;; Properties of defining forms: 
;;;  [1] They define something named by a function spec.
;;;  [2] They only occur at top-level.
;;;  [3] m-. can find them.
;;;  [4] Zmacs can sectionize buffers containing them.
;;;  [5] m-X Kill Definition can undo them.
;;;  [6] m-X Show Effect of Definition can write stories about them.
;;;  [7] They are "irrelevant" in the Zmacs sense.
;;; ([8] They sometimes have an "undo" function that uses the :previous-definition property
;;;      kept on function-spec-plists.)
;;;
;;; Joshua's user-visible defining forms are define-predicate, define-predicate-model, 
;;;   define-predicate-handler, defrule, etc.
;;;

;;; First, we gotta do for DEF-DEFINING-FORM what it will do for other defining forms!
(pushnew 'def-defining-form zwei:*irrelevant-functions*)
(pushnew 'def-defining-form zwei:*irrelevant-defining-forms*)
(defprop  def-defining-form compiler:only-at-top-level compiler:style-checker)
(defprop  def-defining-form "Defining Form"            si:definition-type-name)
;; do this way instead of defining (:property def-defining-form zwei:kill-definition), so that
;; inserting a form into your buffer to kill a definition looks prettier.
(defprop  def-defining-form undef-defining-form zwei:kill-definition)

(defun undef-defining-form (fspec)
  ;; how to kill a def-defining-form form
  (check-type fspec symbol) ;defining-forms are always symbols
  ;; undefine the macro
  (fundefine fspec)
  ;; remove anything we might have put on its property list
  (remprop fspec :previous-definition)
  (remprop fspec 'compiler:style-checker)
  (remprop fspec 'si:definition-type-name)
  (remprop fspec 'zwei:definition-function-spec-type)
  (remprop fspec 'zwei:definition-function-spec-parser)
  (remprop fspec 'zwei:definition-function-spec-finder)
  (remprop fspec 'zwei:kill-definition)
  (remprop fspec 'zwei:show-effect-handler)
  ;; remove it from Zwei's irrelevant stuff
  (setq zwei:*irrelevant-functions* (delete fspec zwei:*irrelevant-functions*))
  (setq zwei:*irrelevant-defining-forms* (delete fspec zwei:*irrelevant-defining-forms*))
  ;; removes :source-file-name property and so on, keeping pathname system happy
  (si:remove-source-file-definition fspec 'def-defining-form))

(defun (:property def-defining-form zwei:show-effect-handler) (form &aux (name (second form))
									   next (count 0))
  ;; how to describe the effects of a def-defining-form form -- in the typeout window, 'cause
  ;; this is usually several lines of output.
  (flet ((talk-about-definition (fspec type arglist counter)
	   ;; say something cogent about a definition being bashed.
	   (cond ((not (sys:validate-function-spec fspec))
		  (zwei:barf "Invalid function spec ~S." fspec))
		 ((not (fdefinedp fspec))
		  ;; not defined yet
		  (format zwei:*typeout-window* "~&[~D] Define the ~A ~S for the first time."
			  counter type fspec))
		 (t
		   ;; defined already, so grok the arglists
		   (format zwei:*typeout-window* "~&[~D] Redefine the ~A ~S with ~
                                                  ~:[different~;the same~] arguments."
			   counter type fspec (equal arglist (arglist fspec t))))))
	 (talk-about-property (prop-name new-value compare-function counter)
	   ;; say something cogent about a property being bashed
	   (declare (sys:downward-funarg compare-function))
	   (let ((old-value (get name prop-name)))
	     (cond (old-value
		     ;; there is an old value
		     (cond ((funcall compare-function new-value old-value)
			    ;; they're the "same", for "same" arbited by compare-function
			    (format zwei:*typeout-window* "~&[~D] Reinforce the system's notion that ~
                                                           ~S's ~S property should be ~S."
				    counter name prop-name new-value))
			   (t
			     ;; not "same"
			     (format zwei:*typeout-window* "~&[~D] Change ~S's ~S property to ~S."
				     counter name prop-name new-value))))
		   (t
		     ;; no old value
		     (format zwei:*typeout-window* "~&[~D] Define ~S's ~S property to be ~S."
			     counter name prop-name new-value)))))
	 (frobulate-arglist (thing)
	   ;; deals with the 2 ways some parts can be given: either a function-spec, or
	   ;; (<args> . <body>)
	   (if (sys:validate-function-spec thing)
	       (arglist thing t)
	       (car thing)))
	 (find-piece (keyword)
	   ;; find :killer, :definer, etc.
	   (getf (cddr form) keyword)))
    (format zwei:*typeout-window* "~&Evaluating this will:")
    ;; first, talk about the definer (required arg)
    (talk-about-definition name
			   (get 'def-defining-form 'si:definition-type-name)
			   (frobulate-arglist (find-piece :definer))
			   (incf count))
    (when (setq next (find-piece :killer))
      ;; there is a killer
      (talk-about-definition `(:property ,name zwei:kill-definition)
			     "m-X Kill Definition driver"
			     (frobulate-arglist next)
			     (incf count)))
    (when (setq next (find-piece :shower))
      ;; there is a shower
      (talk-about-definition `(:property ,name zwei:show-effect-handler)
			     "m-X Show Effect of Definition driver"
			     (frobulate-arglist next)
			     (incf count)))
    (when (setq next (find-piece :finder))
      ;; there is a finder
      (talk-about-definition `(:property ,name zwei:definition-function-spec-finder)
			     "sectionization helper"
			     (frobulate-arglist next)
			     (incf count)))
    (when (setq next (find-piece :parser))
      ;; there is a parser
      (talk-about-definition `(:property ,name zwei:definition-function-spec-parser)
			     "sectionization helper"
			     (frobulate-arglist next)
			     (incf count)))
    (when (setq next (find-piece :type-name))
      ;; there is a type-name
      (talk-about-property 'si:definition-type-name next #'string= (incf count)))
    (when (setq next (find-piece :function-spec-type))
      ;; there is a function-spec-type
      (talk-about-property 'zwei:definition-function-spec-type next #'eql (incf count)))
    ;; talk about the style checker
    (talk-about-definition `(:property ,name compiler:style-checker)
			   "style checker"
			   (frobulate-arglist 'compiler:only-at-top-level)
			   (incf count))
    ;; talk about irrelevancy
    (cond ((or (member name zwei:*irrelevant-functions*)
	       (member name zwei:*irrelevant-defining-forms*))
	   ;; it's already at least partially irrelevant
	   (format zwei:*typeout-window* "~&[~D] Reinforce Zmacs's opinion that ~S is irrelevant."
		   count name))
	  (t
	    ;; it's not irrelevant yet
	    (format zwei:*typeout-window* "~&[~D] Tell Zmacs ~S is irrelevant."
		    count name)))
    ;; don't macroexpand further to look at other effects
    t))
	   
(defmacro def-defining-form (name &body ignore &key
					 definer killer shower parser finder
					 (style-checker 'compiler:only-at-top-level)
					 type-name function-spec-type)
  (declare (zwei:indentation 1 2))
  ;; how to define a defining macro, Cadillac style.
  ;; definer is either a function spec or  (args &rest body).  killer, shower, parser, finder,
  ;;   and style-checker are similar.
  ;; type-name is a string or NIL
  ;; function-spec-type is a function-spec type or NIL (seldom needed)
  (check-type name symbol)
  (check-type definer       (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type killer        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type shower        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type parser        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type finder        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type style-checker (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)") ;recall NIL is a CL list!
  (when (and parser finder)
    ;; parser is more general
    (cerror "Ignore FINDER" "PARSER and FINDER args to DEF-DEFINING-FORM shouldn't both be given")
    (setq finder nil))
  (flet ((defprop-or-defun (name property-name thing)
	   ;; defprop thing if it's a function spec, or defun a property-list function
	   (cond ((sys:validate-function-spec thing)
		  ;; want to do a direct defprop
		  `((defprop ,name ,thing ,property-name)))
		 ((listp thing)
		  ;; want to define one here
		  `((defun (:property ,name ,property-name) ,(car thing)
		      (declare (sys:function-parent ,name def-defining-form))
		      ,@(cdr thing))))
		 (t
		   (error
		     "Mal-formed property function.  Expected function-spec or (<args> . <body>): ~S"
		     thing)))))
    `(progn (record-source-file-name ',name 'def-defining-form)
	    ,@(when type-name
		;; pretty name that appears in patch comments, typein line, etc.
		`((defprop ,name ,type-name si:definition-type-name)))
	    ,@(when function-spec-type
		;; usually unecessary, defaults to like DEFUN.
		`((defprop ,name ,function-spec-type zwei:definition-function-spec-type)))
	    ,(cond ((sys:validate-function-spec definer)
		    ;; just gave a function spec as the definer
		    `(def ,name
			  ;; this is probably nonsense, but it does arrange function-parentage
			  (proclaim '(sys:function-parent ,name def-defining-form))
		       (setf (fdefinition ',name) ',definer)))
		   ((listp definer)
		     `(defmacro ,name ,(car definer)
			;; this is the thing that actually expands the defining macro
			(declare (sys:function-parent ,name def-defining-form))
			,@(cdr definer)))
		   (t
		     (error "Mal-formed definer.  Expected function-spec or (<args> . <body>): ~S"
			    definer)))
	    ;; always give it a style checker (defaulting to compiler:only-at-top-level)
	    ,@(defprop-or-defun name 'compiler:style-checker style-checker)
	    ;; sectionization helper
	    ,@(when finder (defprop-or-defun name 'zwei:definition-function-spec-finder finder))
	    ;; more drastic sectionization helper
	    ,@(when parser (defprop-or-defun name 'zwei:definition-function-spec-parser parser))
	    ;; drives m-X Kill Definition
	    ,@(when killer (defprop-or-defun name 'zwei:kill-definition killer))
	    ;; drives m-X Show Effect of Definition
	    ,@(when shower (defprop-or-defun name 'zwei:show-effect-handler shower))
	    ;; make it irrelevant
	    (pushnew ',name zwei:*irrelevant-functions*)
	    (pushnew ',name zwei:*irrelevant-defining-forms*)
	    ;; return the name
	    ',name)))

