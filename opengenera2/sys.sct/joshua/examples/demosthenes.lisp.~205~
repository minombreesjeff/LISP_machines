;;; -*- Mode: Joshua; Package: JERICHO; Syntax: Joshua -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************
;;; Created 9/17/87 13:43:19 by sgr running on GROUSE at SCRC.

;;;
;;; A macro a couple of the demos want.
;;;

(zwei:defindentation (centering-output 0 4 1 1))
(defmacro centering-output ((&optional (stream '*standard-output*)
				       &key (horizontally-p t) (vertically-p t))
			    &body body)
  ;; center the output to stream
  ;; this probably ought to canonicalize the output-stream somehow (i.e., deal with t and nil)
  `(centering-output-internal ,stream
			      ,horizontally-p
			      ,vertically-p
			      (dw:named-value-snapshot-continuation centering-output (,stream) ,@body)))

(defun centering-output-internal (stream horizontally-p vertically-p continuation)
  ;; helper function for centering-output
  (declare (sys:downward-funarg continuation))
  (multiple-value-bind (width height)
      ;; figure out how big an area the continuation will scribble on
      (dw:continuation-output-size continuation stream)
    (multiple-value-bind (x y)
	;; figure out where the cursor is
	(send stream :read-cursorpos)
      (flet ((compute-offset (flag default output-size window-message)
	       ;; if flag is true, try to center, else leave the cursor position alone.
	       (if flag
		   (round (max 0 (- (send stream window-message) output-size)) 2)
		   default)))	     
	(dw:in-sub-window (stream (compute-offset horizontally-p x width  :inside-width)
				  (compute-offset vertically-p   y height :inside-height)
				  width
				  height)
	  ;; now call the continuation for real in an appropriately-bounded rectangle
	  (funcall continuation stream))))))

(cp:make-command-table "Joshua-Demo-Program"
		       ;; Command table from which all joshua demo comtabs inherit.
		       :if-exists :update-options
		       :kbd-accelerator-p t
		       :inherit-from '("colon full command" "standard arguments" "standard scrolling"))


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")
0;;;
;;; The program instances have some accept support for command-writing.  We define our own flavor
;;; so we can share some methods and have a reasonable presentation type.
;;;


(defgeneric redisplay-joshua-demo-program-title (joshua-demo-program stream))
(defgeneric redisplay-pane (program pane-name &optional clear-history-p force-redisplay-p))

(defflavor joshua-demo-program (Title-String)
	   (dw::program)
  (:initable-instance-variables Title-string)
  (:default-init-plist :top-level
		       `(dw:default-command-top-level :unknown-accelerator-is-command t)))

(defmethod (redisplay-joshua-demo-program-title joshua-demo-program) (stream)
  ;; display the thing in the title pane
  (send stream :display-centered-string title-string))

(defmethod (redisplay-pane joshua-demo-program) (pane-name &optional clear-history-p force-p)
  ;; the default way of forcing redisplay of a pane
  (when clear-history-p
    (send (dw:get-program-pane pane-name) :clear-history))
  (send dw:*program-frame* :redisplay-pane pane-name force-p))


;;;
;;; A tool useful for writing tests.
;;;

(defmacro with-stack-overflows (max-number-overflows &body body
						     &environment env
						     &aux (number-of-overflows
							    (sys:gensymbol "NUMBER-OF-OVERFLOWS")))
  ;; run body in an environment that will grow stacks a bounded number of times.
  (once-only (max-number-overflows &environment env)
    `(let ((,number-of-overflows 0))
       (condition-bind ((sys:pdl-overflow
			  #'(lambda (condition)
			      (when (< ,number-of-overflows ,max-number-overflows)
				;; it's still ok to grow the stack, so note it and do it.
				(incf ,number-of-overflows)
				(send condition :proceed :grow-pdl)))))
	 ,@body))))

