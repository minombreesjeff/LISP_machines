;;; -*- Mode: Joshua; Package: JOSHUA-USER; Syntax: Joshua -*-
;;; Created 6/07/89 10:16:30 by JGA running on JUBJUB at SCRC.

;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; N queens mixed-lisp-and-forward-and-backward-rule-style

;;; (identical to the definition in n-queens-backward)
;;; this asserts that there is no diagonal attack on the newly placed queen
;;; 
;;; (define-predicate no-diagonal (row already-placed-rows &optional (column-delta 1))
;;;      (no-variables-in-data-mixin default-predicate-model))
;;; 
;;; (defrule no-rows-no-problem (:backward)
;;;   if t then [no-diagonal ? () ?])
;;; 
;;; (defrule one-column-at-a-time (:backward)
;;;   if [and ( ?row (+ ?attacker-row ?delta))
;;;	   ( ?row (- ?attacker-row ?delta))
;;;	   `[no-diagonal ?row ?other-rows ,(1+ ?delta)]]
;;;   then [no-diagonal ?row (?attacker-row . ?other-rows) ?delta])


(define-predicate queens-solution (placed unplaced)
		  (no-variables-in-data-mixin default-predicate-model))

(defrule q-propagate (:forward)
  if [queens-solution ?placed ?unplaced]
  then (loop for row in ?unplaced do
	 (ask `[no-diagonal ,row ?placed]
	      #'(lambda (ignore)
		  (tell `[queens-solution (,row . ?placed) ,(remove row ?unplaced)])))))

;;; try (tell [queens-solution () (1 2 3 4 5)])
;;; then (ask [queens-solution ? ()] #'print-query)

