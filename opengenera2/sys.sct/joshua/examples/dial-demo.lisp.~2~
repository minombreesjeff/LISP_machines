;;; -*- Mode: Joshua; Package: JOSHUA-USER; Syntax: Joshua -*-
;;; Created 6/05/89 15:09:00 by JGA running on JUBJUB at SCRC.

;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; A simple demo of how to use an attached action on a Joshua object to
;;; run some display code - in this case to change the pointer on a
;;; dial.  After you compile the buffer, select the activity and try
;;; things like (tell [value-of (the-thing speed) 55]).

(define-object-type thing
  :slots ((speed :attached-actions t)))


(DW:DEFINE-PROGRAM-FRAMEWORK DIAL-DEMO
  :select-key #\circle
  :top-level (dw:default-command-top-level :dispatch-mode :command-preferred)
  :COMMAND-TABLE
    (:INHERIT-FROM '("Global" "colon full command" "standard arguments" "input editor compatibility")
     :KBD-ACCELERATOR-P 'NIL)
  :STATE-VARIABLES ((the-thing)
		    (value-min 0)
		    (value-max 100)
		    (drawing-transform))
  :PANES ((DISPLAY :DISPLAY
		   :redisplay-after-commands nil
		   :redisplay-function 'draw-dial)
	  (LISTENER :LISTENER))
  :CONFIGURATIONS
    '((MAIN (:LAYOUT (MAIN :COLUMN DISPLAY LISTENER))
	    (:SIZES (MAIN (LISTENER 15 :LINES) :THEN (DISPLAY :EVEN))))))


(defmethod (draw-dial dial-demo) (pane)
  (multiple-value-bind (width height) (send pane :inside-size)
    (let* ((half-size (round (min width height) 2))
	   (left-offset (round width 2))
	   (bottom-offset (- height (round height 4))))
      (setq drawing-transform (list half-size 0 0 (- half-size) left-offset bottom-offset))
      (draw-the-scale self pane)
      (ask [value-of (the-thing speed) ?x]
	   #'(lambda (ignore)
	       (draw-the-pointer self ?x pane))))))

(defmethod (draw-the-pointer dial-demo) (val stream &optional (alu :draw))
  (when (numberp val)
    (setq val (max (min val value-max) value-min))
    (graphics:with-graphics-transform (stream drawing-transform)
      (let ((angle (* (/ (- value-max val) (- value-max value-min))
		      (coerce pi 'single-float))))
	(graphics:draw-line 0 0 (* 0.9 (cos angle)) (* 0.9 (sin angle)) :alu alu :stream stream)))))

(defmethod (initialize-object-and-action dial-demo) ()
  (setq the-thing (make-object 'thing :name 'the-thing))
  (flet ((update-pointer (ignore value predication ignore)
	   (let ((display-pane (send dw:*program-frame* :get-pane 'display)))
	     (if (eql (predication-truth-value predication) *true*)
		 (draw-the-pointer dw:*program* value display-pane :draw)
		 (draw-the-pointer dw:*program* value display-pane :erase)))))
    (add-action '(the-thing speed) #'update-pointer)))

(defmethod (make-instance dial-demo :after) (&rest ignore)
  (initialize-object-and-action self))

(defmethod (draw-the-scale dial-demo) (stream)
  (graphics:with-graphics-transform (stream drawing-transform)
    (graphics:draw-circle 0 0 1 :filled nil
			  :start-angle 0 :end-angle (coerce pi 'single-float)
			  :stream stream)
    (flet ((tick (angle size string)
	     (let ((s (sin angle)) (c (- (cos angle)))
		   (inner-radius (- 1.0 size))
		   (outer-radius 1.05))
	       (graphics:draw-line c s (* c inner-radius) (* s inner-radius) :stream stream)
	       (when string
		 (graphics:draw-string string (* c outer-radius) (* s outer-radius)
				       :attachment-x :center :attachment-y :center :stream stream)))))
      (loop for i from 0 to 20 do
	(tick (* (/ i 20) pi)
	      (if (evenp i) 0.1 0.05)
	      (when (evenp i)
		(format nil "~D" (+ (* (/ i 20) value-max)
				    (* (/ (- 20 i) 20) value-min)))))))))

