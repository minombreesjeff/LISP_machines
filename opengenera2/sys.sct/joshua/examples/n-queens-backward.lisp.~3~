;;; -*- Mode: Joshua; Package: JOSHUA-USER; Syntax: Joshua -*-
;;; Created 6/07/89 09:22:56 by JGA running on JUBJUB at SCRC.

;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************

;;; N queens Prolog-style

;;; do a logic-style element-extraction for fun
;;; (we could use lisp code in the backtrack rule instead)

(define-predicate delete (item list rest))

(defrule easy-delete (:backward)
  if t then [delete ?item (?item . ?rest) ?rest])

(defrule general-delete (:backward)
  if [delete ?item ?list ?result]
  then [delete ?item (?anything-else . ?list) (?anything-else . ?result)])

;;; this asserts that there is no diagonal attack on the newly placed queen
;;; (this is the only placement criterion we have to explicitly check for,
;;;  as the queens-placement predicate is set up so that it always returns
;;;  a permutation of (1 2 3 ...) thereby ensuring row and column uniqueness)

(define-predicate no-diagonal (row already-placed-rows &optional (column-delta 1))
		  (no-variables-in-data-mixin default-predicate-model))

(defrule no-rows-no-problem (:backward)
  if t then [no-diagonal ? () ?])

(defrule one-column-at-a-time (:backward)
  if [and ( ?row (+ ?attacker-row ?delta))
	  ( ?row (- ?attacker-row ?delta))
	  `[no-diagonal ?row ?other-rows ,(1+ ?delta)]]
  then [no-diagonal ?row (?attacker-row . ?other-rows) ?delta])

;;; here is the general predicate

(define-predicate queens-placement (placement placed-rows unplaced-rows)
		  (no-variables-in-data-mixin default-predicate-model))

(defrule no-place-to-start (:backward)
  if t then [queens-placement () ?placed-rows ()])

(defrule backtrack (:backward)
  if [and [delete ?row ?unplaced-rows ?remaining-unplaced-rows]
	  [no-diagonal ?row ?placed-rows]
	  [queens-placement ?leftmost-placement (?row . ?placed-rows) ?remaining-unplaced-rows]]
  then [queens-placement (?row . ?leftmost-placement) ?placed-rows ?unplaced-rows])

;;; try (ask [queens-placement ? () (1 2 3 4 5 6 7 8)] #'print-query)
;;; note: this is a hefty user of the stack - you may have to grow it
