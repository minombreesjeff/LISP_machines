;;; -*- Mode: Joshua; Package: JOSHUA-USER; Syntax: Joshua -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************
;;; Created 3/08/89 13:11:47 by HES running on MERLIN at SCRC.

(defvar *time* nil "The Global Clock")

;;; now we need rules stating what the production time for 
;;; each object type is for each factory type

(defvar *production-times* (make-hash-table :test #'equal :size 3))

(defun initialize-production-times ()
  (clrhash *production-times*)
  (loop for object-type in '(widget-1 widget-2 widget-3)
	do (loop for factory-types in '(factory-1 factory-2 factory-3)
		 for time = (loop for foo = (random 5) when (not (zerop foo)) return foo)
		 do (setf (gethash (list object-type factory-types) *production-times*)
			  time))))

(initialize-production-times)

(defun production-time (widget factory)
  (gethash (list (type-of widget) (type-of factory)) *production-times*))



(define-object-type widget
   :slots ((production-completion-time :equalities nil)))

(define-object-type variable-size-buffer
   :slots ((input :initform nil)
	    (output :initform nil)
	    (output-request-acknowledged :initform nil)
	    (queue :set-valued t :initform nil :equalities nil)
	    (clock :initform nil)))

(define-object-type manufacturing-site
   :slots ((production-capacity :initform 3 :equalities nil)
	   (clock :initform nil)
	   (input-request :initform nil)
	   (input-request-acknowledge :initform nil)
	   (output :attached-actions t :initform nil))
   :other-instance-variables ((things-being-produced (make-heap)))
   )



(define-object-type widget-1
   :included-object-types (widget))

(define-object-type widget-2
   :included-object-types (widget))

(define-object-type widget-3
   :included-object-types (widget))

(define-object-type factory-1
   :included-object-types (manufacturing-site))

(define-object-type factory-2
   :included-object-types (manufacturing-site))

(define-object-type factory-3
   :included-object-types (manufacturing-site))




(defrule variable-size-buffer-input (:forward)
  If [and [object-type-of ?buffer variable-size-buffer]
	  [value-of (?buffer clock) HI]
	  [value-of (?buffer input) ?Thing]
	  (not (null ?Thing))]
  Then `[value-of (?buffer queue) ?Thing])

(defrule variable-size-buffer-output (:forward)
  If [and [object-type-of ?buffer variable-size-buffer]
	  [value-of (?buffer clock) HI]]
  Then (let ((stuff (queue ?buffer)))
	 (when stuff
	   (tell `[value-of (?buffer output) ,(car (last stuff))]))))

(defrule variable-size-buffer-output-remove-from-queue (:forward)
  If [and [object-type-of ?buffer variable-size-buffer]
	  [value-of (?buffer clock) HI]
	  [value-of (?buffer output) ?output]
	  [value-of (?buffer queue) ?output] :support ?f1
	  [value-of (?buffer output-request-acknowledged) HI]]
  then (untell ?f1))

;;; On the low phase clear all external signals
;;; Set output-request-acknowledged  LOW
;;;                           INPUT  NIL
;;;                           OUTPUT NIL

(defrule variable-size-buffer-clear (:forward)
  If [and [object-type-of ?buffer variable-size-buffer]
	  [value-of (?buffer clock) LOW]]
  then [and [value-of (?buffer output-request-acknowledged) LOW]
	    [value-of (?buffer input) NIL]
	    [value-of (?buffer output) NIL]])



;;; On the Hi phase of a clock, the machine accepts
;;; an input if there is one, by raising input-request-acknowledge

(defrule manufacturing-site-input (:forward)
  If [and [object-type-of ?machine manufacturing-site]
	  [value-of (?machine clock) HI]
	  [value-of (?machine input-request) ?widget]]
  then (when
	 (and (not (null ?widget))
	      (< (send (things-being-produced ?machine) :active-size) (production-capacity ?machine)))
	 (tell `[value-of (?widget production-completion-time) ,(+ *time* (production-time ?widget ?machine))])
	 (send (things-being-produced ?machine) :insert ?widget (production-completion-time ?widget))
	 (tell [value-of (?machine input-request-acknowledge) HI])))

;;; On the LOW phase
;;; the machine clears any input requests
;;; the machine clears any input-request-acknowledge
;;; the machine clears any outputs

(defrule manufacturing-site-clear (:forward)
  If [and [object-type-of ?machine manufacturing-site]
	  [value-of (?machine clock) LOW]]
  then [and [value-of (?machine input-request) NIL]
	    [value-of (?machine output) NIL]
	    [value-of (?machine input-request-acknowledge) LOW]])

;;; On the High Phase of a Clock
;;; Output anything whose production time has reached 0
;;; This is buggy since, two things can be and then we
;;; have a race condition
(defrule manufacturing-site-output (:forward)
  If [and [object-type-of ?machine manufacturing-site]
	  [value-of (?machine clock) HI]]
  then (multiple-value-bind (thing production-completion-time) (send (things-being-produced ?machine) :top)
	 (when (and thing (> *time* production-completion-time))
	   (tell `[value-of (?machine output) ,thing])
	   (send (things-being-produced ?machine) :remove))))


(dw:define-program-framework widgetsim
  :pretty-name "Factory Simulator"
  :command-definer t
  :inherit-from (jericho:joshua-demo-program)
  :command-definer t
  :command-table (:inherit-from '("joshua-demo-program" "global" "user") :kbd-accelerator-p t)
  :top-level (widgetsim-top-level)
  :state-variables ((initialized nil)
		    (number-of-iterations 20 integer)
		    (machine-array nil)
		    (buffer-array nil)
		    (widget-array nil)
		    (output-produced nil)
		    )
  :panes
  ((title :title
	  :redisplay-string "Factory Simulator"
	  :height-in-lines 1
	  :redisplay-after-commands nil)
   (viewer :display
	   :redisplay-after-commands t
	   :incremental-redisplay t
	   :redisplay-function 'update-widget-display
	   :margin-components `((dw:margin-borders :thickness 2)
				(dw:margin-label :margin :top :centered-p t
						 :background-gray ,tv:25%-gray
						 :style (:dutch :bold-italic :normal)
						 :string "Production Model")))
   (output-view :display
		:redisplay-after-commands t
		:incremental-redisplay t
		:redisplay-function 'update-production-display
		:margin-components `((dw:margin-borders)
				     (dw:margin-scroll-bar :margin :left)
				     (dw:margin-label :margin :top :centered-p t
						      :background-gray ,tv:25%-gray
						      :style (:dutch :bold-italic :normal)
						      :string "Output Produced")))
   (production-table :display
		:redisplay-after-commands t
		:incremental-redisplay t
		:redisplay-function 'update-production-table
		:margin-components `((dw:margin-borders)
				     (dw:margin-label :margin :top :centered-p t
						      :background-gray ,tv:25%-gray
						      :style (:dutch :bold-italic :normal)
						      :string "Production Time Matrix")))
   (commands :command-menu
	     :center-p t
	     :columns 2 
	     :menu-level :simulation-commands
	     :margin-components `((dw:margin-borders)
				  (dw:margin-label :margin :top
						   :background-gray ,tv:25%-gray
						   :centered-p t
						   :style (:dutch :bold-italic :normal)
						   :string "Simulation Commands")))
   (interactor :listener :height-in-lines 4
	       :margin-components `((dw:margin-scroll-bar :margin :left)
				    (dw:margin-scroll-bar :margin :bottom :visibility :if-needed))))
  :configurations
  '((dw::main
      (:layout
	(dw::main :column title viewer middle interactor)
	(middle :row output-view commands production-table))
      (:sizes
	(dw::main (title 1 :lines) (interactor 4 :lines) (middle 5 :lines output-view) :then (viewer :even))
	(middle (production-table 40 :characters)
		(commands :ask-window self
			  :size-for-pane commands)
		:then (output-view :even))
       ))))


(defmethod (widgetsim-top-level widgetsim) ()
  (unless initialized
    (initialize-state self)
    (setq initialized t))
  (dw:default-command-top-level self
				:unknown-accelerator-is-command t
				:dispatch-mode :command-preferred
				:keyboard-accelerators t))

(define-widgetsim-command (set-simulation-time-limit :menu-accelerator t :menu-level :simulation-commands)
    ((limit 'integer :provide-default nil :prompt "Time To Stop Simulation"))
   (setq number-of-iterations limit))

(define-widgetsim-command (initialize :menu-accelerator t :menu-level :simulation-commands)
    ()
   (initialize-state self)
   (send dw:*program-frame* :refresh :complete-redisplay))

(define-widgetsim-command (refresh)
    ()
   (send dw:*program-frame* :refresh :complete-redisplay))

(defmethod (run-a-step widgetsim) ()
  (incf *time*)
  (tell [value-of (buffer1 clock) HI])
  (let ((new-widget (and (evenp (random 10))
			 (make-object (aref widget-array (random 3))
				      :name (intern (format nil "~a-~2,'0d" 'widget *time*))
				      :superpart-object nil))))
    (when new-widget
      (tell `[value-of (buffer1 input) ,new-widget]))
    (tell [value-of (machine1 clock) LOW]))
  (send dw:*program-frame* :redisplay-pane 'viewer)
  (send dw:*program-frame* :redisplay-pane 'output-view))

(define-widgetsim-command (run :menu-accelerator t :menu-level :simulation-commands)
    ()
   (loop until ( *time* number-of-iterations)
	 doing (run-a-step self)))

(define-widgetsim-command (do-steps :menu-accelerator t :menu-level :simulation-commands)
    ((how-many 'integer :prompt "How Many Steps to Perform" :provide-default nil))
   (loop for i below how-many
	 doing (ignore i)
	       (run-a-step self)))

(defmethod (initialize-state widgetsim) ()
   (clear)
   (setq *time* 0)
   (setq output-produced nil)
   (setq widget-array #(widget-1 widget-2 widget-3))
   (let ((buffer1 (make-object 'variable-size-buffer :name 'buffer1))
	 (machine1 (make-object 'factory-1 :name 'machine1))
	 (buffer2 (make-object 'variable-size-buffer :name 'buffer2))
	 (machine2 (make-object 'factory-2 :name 'machine2))
	 (buffer3 (make-object 'variable-size-buffer :name 'buffer3))
	 (machine3 (make-object 'factory-3 :name 'machine3)))
     (setq machine-array (coerce (list machine1 machine2 machine3) 'array)
	   buffer-array (coerce (list buffer1 buffer2 buffer3) 'array))

     ;; Connect buffers to machines
     (loop for i below 3
	   for last-machine = nil then machine
	   for buffer = (aref buffer-array i)
	   for machine = (aref machine-array i)
	   do (tell `[equated (,buffer output) (,machine input-request)])
	      (tell `[equated (,buffer output-request-acknowledged)
		    (,machine input-request-acknowledge)])
	   when last-machine
	     do (tell `[equated (,last-machine output) (,buffer input)]))

     ;; Connect all the clocks
     (loop with first-buffer = (aref buffer-array 0)
	   for i below 3
	   for buffer = (aref buffer-array i)
	   for machine = (aref machine-array i)
	   unless (= i 0)
	     do (tell `[equated (,buffer clock) (,first-buffer clock)])
	   do (tell `[equated (,machine clock) (,first-buffer clock)]))

     ;; Randomly generate production capacities
     (flet ((non-zero-random (n)
	      (loop for x = (random n)
		    when (not (zerop x))
		      return x)))
       (tell `[value-of (machine1 production-capacity) ,(non-zero-random 5)])
       (tell `[value-of (machine2 production-capacity) ,(non-zero-random 5)])
       (tell `[value-of (machine3 production-capacity) ,(non-zero-random 5)]))

     ;; Attach noticer to last factory
     (flet ((notice-machine-output (ignore current-value current-predication old-truth-value)
	       (ignore old-truth-value)
	       (when (and (eql (predication-truth-value current-predication) *true*)
			  (typep current-value 'widget))
		 (setq output-produced (append output-produced (list current-value))))))
	(add-action '(machine3 output) #'notice-machine-output))
     ))

(define-presentation-type capacity-presentation ()
   :printer ((capacity stream)
	     (format stream "Capacity of ~s" (first (path-name capacity))))
   :expander 'slot-presentation)

(defmethod (update-widget-display widgetsim) (stream)
  (dw:with-redisplayable-output  (:stream stream
				  :unique-id 'top-level)
    (dw:with-redisplayable-output (:stream stream
				   :unique-id 'cycle
				   :cache-value *time*)
      (format stream "~40tCycle ~d" *time*))
    (terpri stream)
    (flet ((do-warehouse-column (stream i)
	     (let ((buffer (aref buffer-array (1- i))))
	       (flet ((do-header (stream)
			(dw:with-redisplayable-output (:stream stream
						       :cache-value t
						       :unique-id `(warehouse-header ,i)
						       :id-test #'equal)
			  (graphics:formatting-graphics-cell (stream :align-x :center :align-y :bottom)
			    (graphics:with-graphics-scale (stream .5)
			      (draw-warehouse stream)))
			  (formatting-cell (stream :align-x :center :align-y :bottom)
			    (format stream "~%Inventory"))))
		      (do-body (stream)
			(loop for thing in (reverse (queue buffer))
			      for counter from 0
			      do (dw:with-redisplayable-output (:stream stream
								:cache-value (string (role-name thing))
								:cache-test #'string-equal
								:unique-id `(warehouse ,i ,counter)
								:id-test #'equal)
				   (formatting-cell (stream :align-x :center :align-y :bottom)
				     (format stream "~%~a" (string-capitalize-words (role-name thing))))))))
	       (formatting-column (stream)
		 (do-header stream)
		 (do-body stream)))))
	   (do-factory-column (stream i)
	     (let ((machine (aref machine-array (1- i))))
	       (flet ((do-header (stream)
			(dw:with-redisplayable-output (:stream stream
						       :cache-value t
						       :unique-id `(factory-header ,i)
						       :id-test #'equal)
			  (graphics:formatting-graphics-cell (stream :align-x :center :align-y :bottom)
			    (graphics:with-graphics-scale (stream .5)
			      (draw-factory stream))))
			(dw:with-redisplayable-output (:stream stream
						       :cache-value (production-capacity (aref machine-array (1- i)))
						       :unique-id `(factory-capacity ,i)
						       :id-test #'equal)
			  (formatting-cell (stream :align-x :center :align-y :bottom)
			    (dw:with-output-as-presentation (:stream stream
							     :object (production-capacity (aref machine-array (1- i)) nil)
							     :type 'capacity-presentation)
			      (format stream "~%Capacity ~d"
				      (production-capacity (aref machine-array (1- i))))))))
		      (do-body (stream)
			(loop for thing being the heap-elements of (things-being-produced machine)
			      for counter from 0
			      do (dw:with-redisplayable-output (:stream stream
								:cache-value (string (role-name thing))
								:cache-test #'string-equal
								:unique-id `(warehouse ,i ,counter)
								:id-test #'equal)
				   (formatting-cell (stream :align-x :center :align-y :bottom)
				     (format stream "~%~a" (string-capitalize-words (role-name thing))))))))
	       (formatting-column (stream)
		 (do-header stream)
		 (do-body stream)))))
	   (do-time-column (stream i)
	     (let ((machine (aref machine-array (1- i))))
	       (flet ((do-header (stream)
			(dw:with-redisplayable-output (:stream stream
						       :cache-value t
						       :unique-id `(factory-completion ,i)
						       :id-test #'equal)
			  (dw:with-redisplayable-output (:stream stream
						       :cache-value t
						       :unique-id `(factory-header ,i)
						       :id-test #'equal)
			  (graphics:formatting-graphics-cell (stream :align-x :center :align-y :bottom)
			    (graphics:with-graphics-scale (stream .5)
			      (draw-truck stream))))
			  (formatting-cell (stream :align-x :center :align-y :bottom)
			    (format stream "~%Ship It!"))))
		      (do-body (stream)
			(loop for thing being the heap-elements of (things-being-produced machine)
			      for counter from 0
			      do (dw:with-redisplayable-output (:stream stream
								:cache-value (production-completion-time thing)
								:cache-test #'eql
								:unique-id `(factory-completion ,i ,counter)
								:id-test #'equal)
				   (formatting-cell (stream :align-x :center :align-y :bottom)
				     (format stream "~%~d" (production-completion-time thing)))))))
	       (formatting-column (stream)
		 (do-header stream)
		 (do-body stream))
		 ))))
    (formatting-table (stream :equalize-column-widths t :extend-width t)
      (loop for i from 1 upto 3
	    do (do-warehouse-column stream i)
	       (do-factory-column stream i)
	       (do-time-column stream i)))
    )))


(define-widgetsim-command (com-change-capacity-value :menu-accelerator t :menu-level :simulation-commands) 
    ((the-slot 'capacity-presentation :prompt "A Factories Capacity" :provide-default nil)
     (new-value 'sys:expression :prompt "New capacity" :provide-default nil))
   (tell `[value-of ,the-slot ,new-value]))



(defmethod (update-production-display widgetsim) (stream)
  (formatting-item-list (stream :n-columns 4 :equalize-column-widths t)
    (loop for i from 0
	  for thing in output-produced
	  do (dw:with-redisplayable-output (:stream stream
					    :unique-id i
					    :cache-value thing)
	       (formatting-cell (stream :align-x :center)
		 (format stream "~%~a" (string-capitalize-words (role-name thing))))))))



(define-presentation-type production-matrix-entry ()
   :expander 'sys:expression)

(define-widgetsim-command (com-set-production-matrix-entry)
    ((the-entry 'production-matrix-entry))
   (setf (gethash the-entry *production-times*)
	 (accept 'number :prompt "New Production matix entry" :provide-default nil)))

(dw:define-presentation-to-command-translator production-matrix-entry-to-change-production-matrix-entry
   (production-matrix-entry
    :documentation "Modify this production matrix entry"
    :gesture :modify
    :priority 10)
   (entry)
  `(com-set-production-matrix-entry ,entry))

(define-widgetsim-command (com-change-production-time :menu-accelerator t :menu-level :simulation-commands)
    ((the-entry 'production-matrix-entry :prompt "Production Matrix Entry" :provide-default nil)
     (new-value 'number :prompt "New Value" :provide-default nil))
   (setf (gethash the-entry *production-times*) new-value))

(defmethod (update-production-table widgetsim) (stream)
  (dw:with-redisplayable-output (:stream stream
				 :Unique-id 'top-level)
    (formatting-table (stream)
      (formatting-column-headings (stream)
	(dw:with-redisplayable-output (:stream stream
				       :Unique-id 'column-headings
				       :cache-value t)
	  (formatting-cell (stream) (ignore stream))
	  (loop for factory-type in '(factory-1 factory-2 factory-3)
		do (formatting-cell (stream :align-x :center)
		     (write-string (string-capitalize-words factory-type) stream)))))
      (loop for object-type in '(widget-1 widget-2 widget-3)
	    do (formatting-row (stream)
		 (formatting-cell (stream)
		   (dw:with-redisplayable-output (:stream stream
						  :Unique-id `(row-heading ,object-type)
						  :id-test #'equal
						  :cache-value t)
		     (write-string (string-capitalize-words object-type) stream)))
		 (loop for factory-type in '(factory-1 factory-2 factory-3)
		       for key = (list object-type factory-type)
		       for time = (gethash key *production-times*)
		       do (formatting-cell (stream :align-x :center)
			    (dw:with-redisplayable-output (:stream stream
							   :Unique-id `(cell ,@key)
							   :id-test #'equal
							   :cache-value time)
			      (dw:with-output-as-presentation (:stream stream
							       :object key
							       :type 'production-matrix-entry)
				(format stream "~d" time))))))))))



;;; Drawing truck
;;; Bounding box 174,278  349,206
(DEFUN DRAW-TRUCK (&OPTIONAL (*STANDARD-OUTPUT* *STANDARD-OUTPUT*))
  (GRAPHICS:WITH-SCAN-CONVERSION-MODE (T :SKETCH NIL)
    ;; Rectangle-60
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 174 277 348 206 :GRAY-LEVEL 0))
    ;; Rectangle-61
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 225 233 256 213 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 225 233 256 213 :FILLED NIL))
    ;; Rectangle-62
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 258 226 270 213 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 258 226 270 213 :FILLED NIL))
    ;; Circular Arc/Sector-1
    (PROGN
      (GRAPHICS:DRAW-CIRCLE 461/2
                            421/2
                            4.3011622
                            :START-ANGLE
                            2.5213432
                            :END-ANGLE
                            0.6202495
                            :GRAY-LEVEL
                            0.25)
      (GRAPHICS:DRAW-CIRCLE 461/2
                            421/2
                            4.3011622
                            :START-ANGLE
                            2.5213432
                            :END-ANGLE
                            0.6202495
                            :FILLED
                            NIL))
    ;; Circular Arc/Sector-2
    (PROGN
      (GRAPHICS:DRAW-CIRCLE 483/2
                            419/2
                            4.3011622
                            :START-ANGLE
                            2.5213432
                            :END-ANGLE
                            0.6202495
                            :GRAY-LEVEL
                            0.25)
      (GRAPHICS:DRAW-CIRCLE 483/2
                            419/2
                            4.3011622
                            :START-ANGLE
                            2.5213432
                            :END-ANGLE
                            0.6202495
                            :FILLED
                            NIL))
    ;; Circular Arc/Sector-3
    (PROGN
      (GRAPHICS:DRAW-CIRCLE 523/2
                            419/2
                            4.3011622
                            :START-ANGLE
                            2.5213432
                            :END-ANGLE
                            0.6202495
                            :GRAY-LEVEL
                            0.25)
      (GRAPHICS:DRAW-CIRCLE 523/2
                            419/2
                            4.3011622
                            :START-ANGLE
                            2.5213432
                            :END-ANGLE
                            0.6202495
                            :FILLED
                            NIL))))


;;; Drawing factory
;;; Bounding box 170,380  345,278
(DEFUN DRAW-FACTORY (&OPTIONAL (*STANDARD-OUTPUT* *STANDARD-OUTPUT*))
  (GRAPHICS:WITH-SCAN-CONVERSION-MODE (T :SKETCH NIL)
    ;; Rectangle-1
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 170 337 344 278 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 170 337 344 278 :FILLED NIL))
    ;; Rectangle-2
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 179 379 191 338 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 179 379 191 338 :FILLED NIL))
    ;; Rectangle-3
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 214 379 226 338 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 214 379 226 338 :FILLED NIL))
    ;; Rectangle-4
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 280 379 292 338 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 280 379 292 338 :FILLED NIL))
    ;; Rectangle-5
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 315 379 327 338 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 315 379 327 338 :FILLED NIL))
    ;; Rectangle-6
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 246 378 258 337 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 246 378 258 337 :FILLED NIL))
    ;; Rectangle-7
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 181 329 188 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 181 329 188 291 :FILLED NIL))
    ;; Rectangle-8
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 197 329 204 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 197 329 204 291 :FILLED NIL))
    ;; Rectangle-9
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 224 329 231 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 224 329 231 291 :FILLED NIL))
    ;; Rectangle-10
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 240 329 247 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 240 329 247 291 :FILLED NIL))
    ;; Rectangle-11
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 265 329 272 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 265 329 272 291 :FILLED NIL))
    ;; Rectangle-12
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 281 329 288 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 281 329 288 291 :FILLED NIL))
    ;; Rectangle-13
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 301 329 308 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 301 329 308 291 :FILLED NIL))
    ;; Rectangle-14
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 317 329 324 291 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 317 329 324 291 :FILLED NIL))))

;;; Drawing warehouse
;;; Bounding box 338,297  513,225
(DEFUN DRAW-WAREHOUSE (&OPTIONAL (*STANDARD-OUTPUT* *STANDARD-OUTPUT*))
  (GRAPHICS:WITH-SCAN-CONVERSION-MODE (T :SKETCH NIL)
    ;; Rectangle-34
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 338 284 512 225 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 338 284 512 225 :FILLED NIL))
    ;; Rectangle-17
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 352 296 375 285 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 352 296 375 285 :FILLED NIL))
    ;; Rectangle-16
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 400 253 431 225 :GRAY-LEVEL 0)
      (GRAPHICS:DRAW-RECTANGLE 400 253 431 225 :FILLED NIL))
    ;; Rectangle-48
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 414 296 437 285 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 414 296 437 285 :FILLED NIL))
    ;; Rectangle-49
    (PROGN
      (GRAPHICS:DRAW-RECTANGLE 474 296 497 285 :GRAY-LEVEL 0.25)
      (GRAPHICS:DRAW-RECTANGLE 474 296 497 285 :FILLED NIL))))
