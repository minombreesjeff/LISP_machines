;;; -*- Mode: Joshua; Package: TME; Syntax: Joshua -*-
;;;> EXAMPLES-MESSAGE
;;;>
;;;>******************************************************************************************
;;;>
;;;>       Symbolics hereby grants permission to customer to incorporate
;;;>       the examples in this file in any work belonging to customer.
;;;>
;;;>******************************************************************************************
;;; Created 1/05/87 19:18:45 by sgr running on GROUSE at SCRC.

;;;
;;; A Midsummer Night's Dream, by William Shakespeare.
;;;
;;; (First programmed by Jon Doyle: "For this example, we set modesty aside and attempt to
;;; imitate  William Shakespeare in designing the plot of A Midsummer Night's Dream.  The
;;; major problem in  this is to prevent the story from turning into a tragedy. 
;;; Dependency-directed backtracking  provides the tool by which changes in the players'
;;; attitudes are determined, such that these  changes eventually result in a consistent
;;; (happy) set of attitudes.  Unfortunately, these methods  do not hint at what magic is
;;; required to effect these changes." -- Doyle's thesis)
;;;
;;; Now starring the Joshua LTMS as Puck.
;;;

(define-predicate loves (lover lovee) (no-variables-in-data-mixin ltms:ltms-predicate-model)
  :destructure-into-instance-variables
  (:readable-instance-variables lover lovee))
(define-predicate jealous (who) (no-variables-in-data-mixin ltms:ltms-predicate-model))
(define-predicate kills (killer victim) (no-variables-in-data-mixin ltms:ltms-predicate-model))
(define-predicate tragedy (event) (no-variables-in-data-mixin ltms:ltms-predicate-model))

(defrule quality-not-quantity (:forward) ;p 11
  IF [not [loves Demetrius Hermia]]
  THEN [loves Demetrius Helena])

(defrule love-in-idleness (:forward) ;p 12
  IF [not [loves Lysander Hermia]]
  THEN [loves Lysander Helena])

(defvar *women* '(Helena Hermia))
(defrule only-one-love (:forward :importance 1)
  IF [and [loves ?x ?y]
	  (member ?y *women*)]
  THEN (loop for woman in *women*
	       unless (eq woman ?y)
		 ;; make him not love any other woman
		 do (tell `[not [loves ,?x ,woman]])))
 
(defrule unrequited-love (:forward :importance 2) ;p 13
  ;; you don't commit suicide unless you really know the person you love
  ;; doesn't love you back.  If it's just unknown, you can live with hope.
  IF [and [loves ?x ?y]
	  [not [loves ?y ?x]]]
  THEN [kills ?x ?x])

(defrule jealousy (:forward :importance 3) ;p 12
  ;; jealous people tend to try to kill their competition
  IF [and [jealous ?x]
	  [loves ?x ?y]
	  [loves ?z ?y]
	  (different-objects ?x ?z)]
  THEN [kills ?x ?z])

(defrule tragedy-rule (:forward) ;p 13
  ;; if anybody kills anybody, that's a tragedy
  IF [kills ?x ?y]
  THEN [tragedy [kills ?x ?y]]) ;wants to refer to trigger here.

(defrule trying-to-write-a-comedy (:forward)
  ;; no tragedies, please
  IF [tragedy ?fact]
  THEN [ltms:contradiction])

(define-predicate-method (act-on-truth-value-change loves) (old-truth-value)
  ;; cause a contradiction by justifying true and false of tragedy
  ;; Heaven help us, this actually manages to do a contrapositive inference! -- sgr & HES 1/30/87
  (with-statement-destructured (lover lovee) ()
      (when (= (predication-truth-value self) *unknown*)
	(when (member lovee *women*)
	  (let ((he-loves-someone nil))
	    (loop named love-check
		  for woman in *women*
		  unless (eq woman lovee)
		    do (ask `[or [loves ,lover ,woman]
				 [not [loves ,lover ,woman]]]
			    #'(lambda (&rest ignore)
				(setq he-loves-someone t)
				(return-from love-check (values)))))
	    (unless he-loves-someone
	      (selector old-truth-value =
		(*true* (loop for woman in *women*
			      when (neq woman lovee)
				do (tell `[loves ,lover ,woman] :justification :assumption)
				   (return (values))))
		(*false* (tell `[loves ,lover ,lovee] :justification :assumption)))))))))

;; "... the amatory preferences of men, who are creatures easily swayed by flowers
;; and dependency-directed backtracking." -- Doyle
(defun midsummer-world (&optional (stream *standard-output*))
  (clear)
  (flet ((do-it ()
	   ;; the root of all evil (and plot, for that matter)
	   (tell [jealous Lysander] :justification :premise)
	   ;; Hermia and Lysander are an item
	   (tell [loves Hermia Lysander] :justification :premise)
	   (tell [loves Lysander Hermia] :justification :assumption)
	   ;; Here' some opportunity for unrequited love and jealousy-killings.
	   (tell [loves Helena Demetrius] :justification :premise)
	   (tell [loves Demetrius Hermia] :justification :assumption)
	   (when stream
	     (format stream "~&This leaves us in  the following condition:")
	     (cp:execute-command "Show Joshua Database")))) ;should go to stream
    (if stream
	(ji::with-joshua-tracing '(ji::tms-tracer ji::predication-tracer) (do-it))
	(do-it)))
  ;; return innocuous value
  'done)

;;;
;;; The standard example in default reasoning.  Do (tweety) to run it.
;;;

(define-predicate bird (boid)
		  (no-variables-in-data-mixin ltms:ltms-predicate-model))
(define-predicate penguin (boid)
		  (no-variables-in-data-mixin ltms:ltms-predicate-model))
(define-predicate fly (boid)
		  (no-variables-in-data-mixin ltms:ltms-predicate-model))
(define-predicate abnormal (who for-what)
		  (no-variables-in-data-mixin ltms:ltms-predicate-model))

(define-predicate-method (act-on-truth-value-change abnormal) (old-truth-value)
  ;; whenever the truth-value of an ABNORMAL predication changes from
  ;; *TRUE* to *UNKNOWN*, force it to be *FALSE* instead.  This is sort of
  ;; like circumscription's minimizing abnormality.
  (when (and (= (predication-truth-value self) *unknown*)
	       (= old-truth-value *true*))
      (justify self *false* :assumption)))
    
(defrule birds-fly-by-default (:forward)
  ;; if ?x is a bird, then it flies unless it's abnormal
  IF [and [bird ?x] :support ?bird]
  THEN (unless (block already-abnormal
		 (map-over-database-predications `[abnormal ,?x [fly ,?x]]
						 #'(lambda (fact)
						     (return-from already-abnormal fact))))
	 ;; if you get here, you don't yet know that ?x is abnormal with respect to fly
	 (let ((the-default (tell `[not [abnormal ,?x [fly ,?x]]]
				  :justification :assumption)))
	   ;; assume this boid is not abnormal
	   ;; *support* is a wart protruding from the implementation substrate
	   (tell `[fly ,?x]
		 :justification `(birds-fly-by-default (,?bird) (,the-default) ())))))

(defrule penguins-are-weird (:forward)
  ;; penguins are birds, but don't fly because they are abnormal with respect to FLY.
  IF [penguin ?x]
  THEN [and [abnormal ?x [fly ?x]]
	    [bird ?x]])

(defrule abnormal-things-dont-fly (:forward)
  ;; things abnormal with respect to FLY don't fly.
  IF [abnormal ?x [fly ?x]]
  THEN [not [fly ?x]])

(defun show-the-database (stream)
  ;; should use the :Provide Output Destination feature
  (when stream (cp:execute-command "Show Joshua Database")))

;;; The apparent silliness of the arguments here is so that the automatic testing functions
;;;  can pass in database probes to look at the results at various points of execution.
(defun tweety (&optional (stream *standard-output*)
			 &key (first-fun #'show-the-database)
			 (second-fun #'show-the-database)
			 (third-fun #'show-the-database)
			 &aux first-value second-value third-value)
  (macrolet ((format-maybe (string &rest args)
	       `(when stream (format stream ,string ,@args))))
    ;; how to run this aviary.
    (clear)
    ;;
    (format-maybe "~&First off, Tweety is a bird")
    (tell [bird tweety] :justification :premise)
    (format-maybe "; so we know the following:")
    (setq first-value (funcall first-fun stream))
    ;;
    (format-maybe "~2%However, Tweety is a penguin")
    (let ((penguin-statement (tell [penguin tweety] :justification :premise)))
      (format-maybe "; so we now know that Tweety can't fly:")
      (setq second-value (funcall second-fun stream))
      ;;
      (format-maybe "~2%Now I'll give up on the penguin stuff")
      (unjustify penguin-statement))
    (format-maybe "; so we now know that Tweety can fly again: ")
    (setq third-value (funcall third-fun stream))
    (if stream
	;; being run interactively
	(values)
	;; being run by the automatic tester
	(values first-value second-value third-value))))

;;;
;;; N Queens: Another TMS-as-search-control example.  This program is notable for its use of Joshua
;;;  without using any rules, i.e., it's a pretty much purely a TMS program.
;;;

;;;
;;; First, the obvious data model for queens.  The board is an NxN array in which the
;;;  queen predications get stored.  Clients are expected to bind *BOARD* to such an array.
;;;

(defstruct (chess-board
	     (:type :array-leader)
	     :named
	     (:copier nil)
	     ;; this screws up on copy-chess-board.
	     (:make-array (:dimensions (list size size)))
	     (:print-function
	       (lambda (self stream depth)
		 (ignore depth)
		 (sys:printing-random-object (self stream :typep)
		   (format stream "~Dx~:*~D" (chess-board-size self))))))
  size)

(defvar *board* (make-chess-board :size 5) "Users of queen must bind this.")

(define-predicate-model queen-model () ()
  (:required-instance-variables row col))

(define-predicate-method (fetch queen-model) (continuation)
  ;; fetch a queen predication from the board
  (check-type *board* chess-board)
  (let ((board-size (chess-board-size *board*)))
    (cond ((sys:unbound-logic-variable-p row)
	   (cond ((sys:unbound-logic-variable-p col)
		  ;; both row and col are unbound, so iterate over entire board
		  (loop for row-num below board-size
			doing (loop for col-num below board-size 
				    for item = (aref *board* row-num col-num)
				    when item
				      do (funcall continuation (aref *board* row-num col-num)))))
		 (t
		   ;; just the row-num is unbound, so iterate over a column
		   (loop for row-num below board-size
			 for item = (aref *board* row-num col)
			 when item
			   do (funcall continuation (aref *board* row-num col))))))
	  ((sys:unbound-logic-variable-p col)
	   ;; just the col-num is unbound, so iterate over a row
	   (loop for col-num below board-size
		 for item = (aref *board* row col-num)
		 when item
		   do (funcall continuation (aref *board* row col-num))))
	  (t
	    ;; neither is unbound, so we get just one solution
	    (let ((item (aref *board* row col)))
	      (when item
		(funcall continuation (aref *board* row col))))))))

(define-predicate-method (insert queen-model) ()
  ;; insert a queen predication into the board
  (check-type *board* chess-board)
  (let ((max-index (1- (chess-board-size *board*))))
    (unless (and (typep row `(integer 0 ,max-index))
		 (typep col `(integer 0 ,max-index)))
      (error "You can't TELL a QUEEN predication unless both args are positive integers  ~D: ~S"
	     max-index self)))
  (let ((square (aref *board* row col)))
    (if square
	(values square nil)
	(let ((database-predication (copy-object-if-necessary self)))
	  (setf (aref *board* row col) database-predication)
	  (values database-predication t)))))

(define-predicate-method (clear queen-model) (&optional (clear-database t) ignore)
  ;; write nil's all over the board
  (when clear-database
    (when (typep *board* 'chess-board)
      ;; be nice to clear when this isn't bound properly
      (let ((board-size (chess-board-size *board*)))
	(loop for row-num below board-size doing
	  (loop for col-num below board-size doing
	    (setf (aref *board* row-num col-num) nil)))))))

(defmethod (chess-notation queen-model) ()
  ;; this notation is less than informative when there are < 8 columns/rows!
  (declare (values column-name row-number))
  (check-type row (integer 0 7))
  (check-type col (integer 0 7))
  (values (aref #("KR" "KKn" "KB" "K" "Q" "QB" "QKn" "QR") col)
	  (1+ row)))

(define-predicate-method (say queen-model) (&optional (stream *standard-output*))
  ;; print out the location of this queen
  (if (= (chess-board-size *board*) 8)
      ;; use standard notation
      (multiple-value-bind (column-name row-number) (chess-notation self)
	(format stream "~&A queen is at ~A~D." column-name row-number))
      ;; weird board, so use cartesian notation
      (format stream "~&A queen is at (~D, ~D)." row col)))

(compile-flavor-methods queen-model)

(define-predicate queen (row col)
		  (no-variables-in-data-mixin
		    ltms:ltms-mixin
		    queen-model
		    default-predicate-model)
  :destructure-into-instance-variables
  :readable-instance-variables)

;;;
;;; This is the entrypoint to this whole circus.  The continuation will get called once for
;;;   each solution.  It can inspect the database to do its thing.
;;;

(defun n-queens (size continuation contradiction-noticer)
  ;; do something to all solutions to the n-queens problem
  (declare (sys:downward-funarg continuation contradiction-noticer))
  ;; indulge my nasty, suspicious nature a bit
  (check-type size (integer 1 8))
  (check-type continuation function)
  (check-type contradiction-noticer function)
  (labels ((install-rook-constraint (board size)
	     ;; install a constraint that 2 queens can't attack each other by rook-like moves
	     (loop for row below size doing
	       (loop for col below size doing
		 ;; column-wise attack
		 (loop for other-row from (1+ row) below size doing
		   ;; these 2 can't be true together, so justify one false if the other is true,
		   ;; and let the tms make it symmetric
		   (justify (aref board row col) *false* 'rook-attack-column
			    (list (aref board other-row col))))
		 ;; row-wise attack
		 (loop for other-col from (1+ col) below size doing
		   ;; these 2 can't be true together, so justify one false if the other is true,
		   ;; and let the tms make it symmetric
		   (justify (aref board row col) *false* 'rook-attack-row
			    (list (aref board row other-col)))))))
	   (install-bishop-constraint (board size)
	     ;; install a constraint that 2 queens can't attack each other by bishop-like moves
	     (loop for row below size doing
	       (loop for col below size doing
		 ;; main diagonal
		 (loop for diag-row from (1+ row) below size
		       for diag-col from (1+ col) below size
		       ;; these 2 can't be true together, so justify one false if the other is true,
		       ;; and let the tms make it symmetric
		       doing (justify (aref board row col) *false*
				      'bishop-attack-main-diagonal
				      (list (aref board diag-row diag-col))))
		 ;; counter diagonal
		 (loop for diag-row from (1+ row) below size
		       for diag-col downfrom (1- col) to 0
		       ;; these 2 can't be true together, so justify one false if the is other true,
		       ;; and let the tms make it symmetric
		       doing (justify (aref board row col) *false*
				      'bishop-attack-counter-diagonal
				      (list (aref board diag-row diag-col)))))))
	   (install-row-constraint (board size)
	     ;; install a constraint that forces 1 queen per row
	     (loop for row below size
		   ;; for each row, put in a ltms:one-of predication that forces a queen in some column
		   doing (tell `[ltms:one-of ,@(loop for col below size
						     collecting (aref board row col))])))
	   (install-column-constraint (board size)
	     ;; install a constraint that forces 1 queen per column
	     (loop for col below size
		   ;; for each col, put in a ltms:one-of predication that forces a queen in some row
		   doing (tell `[ltms:one-of ,@(loop for row below size
						     collecting (aref board row col))])))
	   (install-queens (size)
	     ;; make the world know about the N-Queens problem
	     (stack-let ((board (make-array (list size size))))
	       ;; create hypotheses about queens being everywhere
	       (loop for row below size doing
		 (loop for col below size doing
		   (setf (aref board row col)
			 (tell `[queen ,row ,col] :justification :none))))
	       ;; now install the constraints that prevent queens from chewing on each other
	       (install-rook-constraint board size)
	       (install-bishop-constraint board size)
	       (install-row-constraint board size)
	       (install-column-constraint board size)))
	   (backtrack-from-solution ()
	     ;; backtrack out of the current solution, presumably to find more
	     (let ((solution nil))
	       (map-over-database-predications [queen ? ?]
					       #'(lambda (queen)
						   (push queen solution)))
	       (justify (car solution) *false* 'backtrack-from-solution (cdr solution))))
	   (n-queens-contradiction-handler (condition-object)
	     ;; pick a queen with the lowest row number and remove it.
	     ;; if you put format's in here, you'll see that this is counting 2 digits in base N,
	     ;; i.e., the column-number of the choice it backtracks on advances fastest, then the row.
	     (loop with mnemonic and predication and culprit and culprit-row
		   for justification in (tms-contradiction-support condition-object)
		   doing (multiple-value-setq (mnemonic predication)
			   (destructure-justification justification))
		   when (and (eq mnemonic :choice)
			     (or (null culprit-row)
				 (< (queen-row predication) culprit-row)))
		     do (setq culprit justification
			      culprit-row (queen-row predication))
		   finally
		     (if culprit
			 (condition-bind ((tms-contradiction #'n-queens-contradiction-handler))
			   (remove-justification culprit)
			   ;; let the caller get his hits in
			   (funcall contradiction-noticer condition-object)
			   ;; note we handled it
			   (return t))
			 ;; can't find a queen to backtrack, so return
			 (clear) ;otherwise it leaves a bogus board display!
			 (return-from n-queens (values))))))
    ;; clear out the world
    (condition-bind ((tms-contradiction #'n-queens-contradiction-handler))
      ;; find all the solutions, calling the continuation as we find them
      (let-if (not (and (typep *board* 'chess-board)
			(= (chess-board-size *board*) size)))
	      ;; bind it if nobody else has done so thus far
	      ((*board* (make-chess-board :size size)))
	(clear)
	(install-queens size)
	(loop doing (funcall continuation) (backtrack-from-solution))))))

;;;
;;; A Jericho user-interface for the above.
;;;

(dw:define-program-framework n-queens
  :pretty-name "N Queens"
  :inherit-from (jericho:joshua-demo-program)
  :command-definer t
  :command-table (:inherit-from '("Joshua-Demo-Program") :kbd-accelerator-p t)
  :top-level (dw:default-command-top-level :unknown-accelerator-is-command t)
  :state-variables ((board (make-chess-board :size 5) 'chess-board)
		    (number-solutions 0 '(integer 0 *))
		    (number-contradictions 0 '(integer 0 *)))
  :other-defflavor-options (:readable-instance-variables
			     (:default-init-plist :title-string "Queens Constraint Satisfaction Demo"))
  :panes ((interactor :interactor
		      :margin-components '((dw:margin-ragged-borders :thickness 1)
					   (dw:margin-scroll-bar :history-noun "interaction"))
		      :default-character-style '(:swiss :roman :normal)
		      :height-in-lines 4)
	  (title :title
		 :margin-components '((dw:margin-white-borders :thickness 0))
		 :default-character-style '(:dutch :bold :large)
		 :redisplay-function #'jericho:redisplay-joshua-demo-program-title
		 :height-in-lines 1
		 :redisplay-after-commands nil)
	  (BOARD-DISPLAY :DISPLAY
			 :redisplay-function 'redisplay-board
			 :incremental-redisplay t
			 :TYPEOUT-WINDOW T)
	  (statistics :display
		      :redisplay-function 'redisplay-statistics
		      :incremental-redisplay t
		      :default-character-style '(:swiss :roman :normal)
		      :margin-components '((dw:margin-ragged-borders :thickness 1)
					   (dw:margin-white-borders :thickness 3)
					   (dw:margin-label :margin :top
							    :centered-p t
							    :style (:swiss :bold :small)
							    :box :inside
							    :string "Statistics")))
	  (N-QUEENS-COMMANDS :COMMAND-MENU
			     :default-character-style '(:swiss :roman :large)
			     :margin-components '((dw:margin-ragged-borders :thickness 1)
						  (dw:margin-white-borders :thickness 3)
						  (dw:margin-label :margin :top
								   :centered-p t
								   :style (:swiss :bold :small)
								   :box :inside
								   :string "N Queens Commands"))
			     :CENTER-P T
			     :MENU-LEVEL :N-QUEENS)
	  (SOLUTIONS :DISPLAY
		     :default-character-style '(:swiss :roman :large)
		     :more-p nil
		     :margin-components '((dw:margin-ragged-borders :thickness 1)
					  (dw:margin-scroll-bar :history-noun "solutions")
					  (dw:margin-label :margin :top
							   :centered-p t
							   :style (:swiss :bold :small)
							   :box :inside
							   :string "Solutions"))))
  :configurations
  '((n-queens
      (:LAYOUT
	(n-queens :column title rest interactor)
	(rest :ROW left-column right-column)
	(left-column :COLUMN BOARD-DISPLAY N-QUEENS-COMMANDS)
	(right-column :COLUMN statistics SOLUTIONS))
      (:SIZES
	(n-queens (title 1 :lines) (interactor 4 :lines) :then (rest :even))
	(rest (LEFT-COLUMN 0.6) :then (RIGHT-COLUMN :EVEN))
	(left-column 
	  (N-QUEENS-COMMANDS :ASK-WINDOW SELF :SIZE-FOR-PANE N-QUEENS-COMMANDS)
	  :THEN
	  (BOARD-DISPLAY :EVEN))
	(right-column 
	  (statistics 3 :lines)
	  :THEN
	  (solutions :even))))))

;;;
;;; Stuff for incremental redisplay of the N Queens problem.
;;;

(defun load-random-font (font-name)
  ;; play dirty tricks to get a random (non-screen) font loaded
  (let ((fed:*screen-font-bfd-search-paths*
	  (append '("SYS: FONTS; DMP1; .BFD" "SYS: FONTS; LGP; .BFD"
		    "SYS: FONTS; LGP1; .BFD" "SYS: FONTS; LGP2; .BFD"
		    "SYS: FONTS; NLGP1; .BFD" "SYS: FONTS; NLGP2; .BFD")
		  fed:*screen-font-bfd-search-paths*)))
    (send tv:main-screen :parse-font-descriptor font-name)))

;;; Now done in the sysdcl.
;(load-random-font 'fonts:chess15) ;the sysdcl ensures this gets shipped.

(defconstant *black-square-color* 0.25)
(defconstant *white-square-color* 0.0)
(defconstant *square-size* 50) ;constrained by font CHESS15, via dw:continuation-output-size
(defconstant *border-size* 6)
(defconstant *white-queen-on-white-square* (char-code #\B))
(defconstant *black-queen-on-white-square* (char-code #\b))

(defun-in-flavor (draw-chess-glyph n-queens) (glyph-index x-pos y-pos stream)
  ;; draw a character out of FONTS:CHESS15
  (graphics:draw-glyph glyph-index fonts:chess15 x-pos y-pos :stream stream))

(defun-in-flavor (draw-board-outline n-queens) (stream)
  ;; draw the black border around the board.  Note the points given to draw-rectangle
  ;; are the centers of the wide line
  (let* ((upper-left (round *border-size* 2))
	 (lower-right (+ *border-size*
			 (round *border-size* 2)
			 (* *square-size* (chess-board-size board)))))
    (graphics:draw-rectangle upper-left upper-left lower-right lower-right
			     :filled nil
			     :thickness *border-size*
			     :stream stream)))

(defun-in-flavor (draw-row n-queens) (row stream)
  ;; draw a row of the board
  (labels ((same-parity-p (x y)
	     ;; are both args odd or both even?
	     (= (ldb (byte 1 0) x) (ldb (byte 1 0) y)))
	   (square-color (row col)
	     ;; the color of a square at (row, col)
	     (if (same-parity-p row col)
		 ;; both odd or both even, hence white
		 *white-square-color*
		 *black-square-color*))
	   (row-occupants (row)
	     ;; list of flags about queens in a row
	     (loop for col below (chess-board-size board)
		   collecting (block found-queen
				(ask `[queen ,row ,col]
				     #'(lambda (ignore) (return-from found-queen t))
				     :do-backward-rules nil))))
	   (draw-square (occupant row col stream)
	     ;; draw the contents of the square at (row, col)
	     (let* ((ulx (+ *border-size* (* col *square-size*)))
		    ;; row 0 is at the bottom (white's row numbers)
		    (uly (+ *border-size* (* (- (chess-board-size board) row 1) *square-size*)))
		    (lrx (+ ulx *square-size*))
		    (lry (+ uly *square-size*)))
	       ;; draw the outline around the square
	       (dw:with-redisplayable-output (:stream stream
					      :unique-id 'square-outline
					      :cache-value (chess-board-size board))
		 (graphics:draw-rectangle ulx uly lrx lry
					  :filled nil
					  :stream stream))
	       ;; draw the color background and the queen, if there's one there
	       (dw:with-redisplayable-output (:stream stream
					      :unique-id `(occupant ,row ,col)
					      :id-test #'equal
					      :cache-value `(,occupant ,(chess-board-size board))
					      :cache-test #'equal)
		 (graphics:draw-rectangle (1+ ulx) (1+ uly) lrx lry
					  :gray-level (square-color row col)
					  :stream stream)
		 (when occupant
		   (draw-chess-glyph *white-queen-on-white-square* ulx uly stream))))))
    ;; draw a particular row of the board
    (let ((occupants (row-occupants row)))
      ;; try to prevent redisplay of whole row if nothing has changed
      (dw:with-redisplayable-output (:stream stream
				     :unique-id `(row ,row)
				     :id-test #'equal
				     :cache-value `(,(chess-board-size board) ,@occupants)
				     :cache-test #'equal)
	(loop for col below (chess-board-size board)
	      for occupant in occupants
	      doing (draw-square occupant row col stream))))))

(defmethod (redisplay-board n-queens) (stream)
  ;; redisplay the board
  (dw:remove-window-typeout-window (dw:get-program-pane 'board-display))
  (dw:with-own-coordinates (stream :clear-window nil)
    (jericho:centering-output (stream)
      (let ((*board* board))
	(draw-board-outline stream)
	(loop for row below (chess-board-size board)
	      doing (draw-row row stream))))))

(defmethod (redisplay-statistics n-queens) (stream)
  ;; redisplay the statistics pane
  (dw:with-redisplayable-output (:stream stream
				 :unique-id 'statistics
				 :cache-test #'equal
				 :cache-value (list (chess-board-size board)
						    number-solutions
						    number-contradictions))
    (formatting-table (stream)
      (dw:with-redisplayable-output (:stream stream
				     :unique-id 'board-size)
	;; see sys:dynamic-windows;more-doc.text, which recommends a w-r-o
	;; around the formatting-row w/only a unique-id, and one around
	;; each element with only a cache-value
	(formatting-row (stream)
	  (formatting-cell (stream)
	    (dw:with-redisplayable-output (:stream stream
					   :cache-value t)
	      (princ "Board size: " stream)))
	  (formatting-cell (stream)
	    (dw:with-redisplayable-output (:stream stream
					   :cache-value (chess-board-size board)
					   :cache-test #'=)
	      (princ (chess-board-size board) stream)))))					   
      (dw:with-redisplayable-output (:stream stream
				     :unique-id 'number-solutions)
	;; see sys:dynamic-windows;more-doc.text, which recommends a w-r-o
	;; around the formatting-row w/only a unique-id, and one around
	;; each element with only a cache-value
	(formatting-row (stream)
	  (formatting-cell (stream)
	    (dw:with-redisplayable-output (:stream stream
					   :cache-value t)
	      (princ "Solutions so far: " stream)))
	  (formatting-cell (stream)
	    (dw:with-redisplayable-output (:stream stream
					   :cache-value number-solutions
					   :cache-test #'=)
	      (princ number-solutions stream)))))
      (dw:with-redisplayable-output (:stream stream
				     :unique-id 'number-contradictions)
	;; see sys:dynamic-windows;more-doc.text, which recommends a w-r-o
	;; around the formatting-row w/only a unique-id, and one around
	;; each element with only a cache-value
	(formatting-row (stream)
	  (formatting-cell (stream)
	    (dw:with-redisplayable-output (:stream stream
					   :cache-value t)
	      (princ "Contradictions so far: " stream)))
	  (formatting-cell (stream)
	    (dw:with-redisplayable-output (:stream stream
					   :cache-value number-contradictions
					   :cache-test #'=)
	      (princ number-contradictions stream))))))))

;;;
;;; Higher-level command-definer: puts things in right menu automatically.
;;;

;;;
;;; N Queens commands.
;;;

(defun-in-flavor (increment-solutions n-queens) ()
  ;; update the statistics pane
  (incf number-solutions)
  (jericho:redisplay-pane self 'statistics))

(defun-in-flavor (increment-contradictions n-queens) (ignore)
  ;; update the statistics pane
  (incf number-contradictions)
  (jericho:redisplay-pane self 'statistics))

(defun-in-flavor (call-n-queens n-queens) (n display-board-p continuation)
  ;; do it with the right display stuff set up, board created, etc.
  (declare (sys:downward-funarg continuation))
  (clear)
  (setq number-solutions 0 number-contradictions 0)
  (jericho:redisplay-pane self 'solutions t)
  (jericho:redisplay-pane self 'board-display (if (= n (chess-board-size board))
						  nil
						  (setq board (make-chess-board :size n))
						  t))
  (jericho:redisplay-pane self 'statistics)
  (let ((solutions (dw:get-program-pane 'solutions))
	(*board* board))
    (n-queens (chess-board-size board)
	      #'(lambda ()
		  (increment-solutions)
		  (when display-board-p
		    (with-character-style ('(nil nil :smaller) solutions)
		      (fresh-line solutions)
		      (formatting-textual-list (solutions :conjunction "and")
			(map-over-database-predications
			  [queen ? ?]
			  #'(lambda (queen)
			      (if (= (chess-board-size board) 8)
				  ;; board size 8, so we can use standard chess notation
				  (multiple-value-bind (string position) (chess-notation queen)
				    (formatting-textual-list-element (solutions)
				      (princ string solutions) (princ position solutions)))
				  ;; board size not 8, so use cartesian notation
				  (formatting-textual-list-element (solutions)
				    (format solutions "(~D, ~D)"
					    (queen-row queen) (queen-col queen))))))))
		    (jericho:redisplay-pane self 'board-display))
		  ;; finally let the caller get his licks in
		  (funcall continuation))
	      #'increment-contradictions)))

(define-n-queens-command (com-set-board-size :menu-accelerator t :menu-level :N-QUEENS)
    ((n '(integer 1 8)
	:prompt "size of board"
	:documentation
	"how big the board should be on a side"))
   ;; set the size of the board
   (setq board (make-chess-board :size n))
   (jericho:redisplay-pane self 'board-display t))

(define-n-queens-command (com-solve-queens :menu-accelerator t :menu-level :N-QUEENS)
    ((display-board-p 'boolean
		      :prompt "display board"
		      :default t
		      :documentation
		      "whether to display the board")
     (all-solutions-p `((dw:token-or-type (("Ask" . :ask))
					  boolean))
		      :prompt "get all solutions"
		      :default t
		      :documentation
		      "Whether or not to get all solutions"))
   ;; run the n-queens problem for a board of size n
   (block no-more
     (call-n-queens (chess-board-size board)
		    display-board-p
		    #'(lambda ()
			(when (or (null all-solutions-p)
				  (and (eq all-solutions-p :ask)
				       (not (y-or-n-p "Find another solution? "))))
			  (return-from no-more nil))))))
