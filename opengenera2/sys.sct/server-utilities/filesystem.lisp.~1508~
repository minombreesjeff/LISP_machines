D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; -*- Mode: Lisp; Package: Server-Utilities; Base: 10.; Syntax: Common-lisp; Lowercase: Yes; -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;; FileSystem stuff

;; Abbreviations for everyday operations

0(defmacro (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")host-string0 (pathname) `(send ,pathname :string-for-host))
(defmacro 2dired-string0 (pathname) `(send ,pathname :string-for-dired))
(defmacro 2directory-string0 (pathname) `(send ,pathname :string-for-directory))

1;; Constructing new pathnames

0(defun 2new-name0 (pathname name)
  (send pathname :new-raw-name name))

(defun 2new-type0 (pathname type &optional (version :newest))
  (send pathname :new-pathname :raw-type type :version version))

(defun 2new-pathname0 (pathname name type &optional (version :newest))
  (send (pathname pathname) :new-pathname :raw-name name :raw-type type :version version))

1;; :PATHNAME-AS-DIRECTORY used to fully default all the components of the pathname.
;; It doesn't any more.

0(defun2 new-directory0 (pathname name)
  (let ((directory-type (if (send pathname :valid-type-p :directory)
			    :directory
			    :unspecific)))
    (new-pathname (send (new-pathname pathname name directory-type) :pathname-as-directory)
		  "" "" 1)))

1;; Common things

0(defun 2probe-path0 (type path)
  (declare (values path-of-type-exists-p))
  (and (open path :direction (ecase type
			       (:file :probe)
			       (:link :probe-link)
			       (:directory :probe-directory))
	     :if-does-not-exist nil)
       t))

(defun 2directory-list0 (pathname)
  (mapcar #'car (cdr (fs:directory-list pathname :fast :sorted))))


1;; The difference between(3 0 (NIL 0) (NIL :BOLD-ITALIC NIL) "CPTFONTBI") -server-1 filesystem functions and normal ones is that the -server-
;; operations can log themselves.

0(defflavor 2server-directory
0	(directory
	 log)
	()
  (:initable-instance-variables)
  (:readable-instance-variables)
  (:required-init-keywords :directory :log))

(defvar2 *server-directories*0 nil)

(defun 2verify-server-directory-registered0 (directory log)
  (unless log
    (error "Can't register a server directory without specifying an associated log."))
  (when (loop for server-directory in *server-directories*
	      never (eq directory (server-directory-directory server-directory)))
    (push (make-instance 'server-directory :directory directory :log log)
	  *server-directories*)))

(add-initialization "Clear server directory list" '(setf *server-directories* nil) '(:before-cold))

(defun 2create-server-directory0 (directory)
1  ;; Capture the current log binding and stash it away.
0  (verify-server-directory-registered directory *log*)
  (verify-background-process-active)
  (log-event :normal "Creating ~A" (directory-string directory))
1  ;; Is there some function we can use to do this?  I want the restart handlers.
0  (send directory :create-directory))

(defun 2check-server-directory0 (directory)
1  ;; Capture the current log binding and stash it away.
0  (verify-server-directory-registered directory *log*)
  (verify-background-process-active)
  (unless (probe-path :directory directory) 
    (log-event :problem "Directory ~A missing, creating it" (directory-string directory))
    (create-server-directory directory)))

(defun 2expunge-server-directory0 (directory &optional note?)
  (let ((records (fs:expunge-directory directory)))
    (when (and note? (> records 0))
      (log-event :normal "~D record~:P expunged from ~A" records (directory-string directory)))))

(defun2 expunge-server-directories0 ()
  (fs:with-automatic-login-to-sys-host
    (loop for server-directory in *server-directories*
	  do (letf ((*log* (server-directory-log server-directory)))
	       (letf (((log-process-id *log*) "BG")
		      ((log-herald     *log*) "Server Background"))
		 (let ((directory (server-directory-directory server-directory)))
		   (expunge-server-directory directory t)))))))

(add-background-task *background-task-queue*
		     "Expunge Server Directories"
		     #'expunge-server-directories
		     "3 hours")

(defun 2create-server-file0 (pathname &optional note? close?)
  (let ((stream (open pathname :direction :output)))
    (when note? (log-event :normal "Creating ~A" (send stream :truename)))
    (when close? (send stream :close))
    stream))

(defvar 2allocate-server-file-buffer0 (make-array 1000. :element-type '(unsigned-byte 8)))

1;; On LMFS, when throwing out of ALLOCATE-FILE, all the storage allocated for the file is
;; reclaimed.  There is no need to delete or expunge.

0(defun 2allocate-server-file0 (pathname number-of-bytes)
  (log-event :normal "Allocating ~D bytes to ~A" number-of-bytes pathname)
  (with-open-file (stream pathname :direction :output :element-type '(unsigned-byte 8))
1    ;; +++ This isn't going to work if (not (zerop (rem number-of-bytes
    ;;                                                  (length allocate-server-file-buffer))))
0    (loop repeat (1+ (/ (1- number-of-bytes) (length allocate-server-file-buffer)))
	  do (send stream :string-out allocate-server-file-buffer))))

(defun 2rename-server-file0 (old-pathname new-pathname &optional note? no-error?)
  (when (and note? (neq note? :errors-only))
    (log-event :normal "Renaming ~A to ~A"
	       (dired-string old-pathname) (dired-string new-pathname)))
  (condition-case-if no-error? ()
      (rename-file old-pathname new-pathname)
    (fs:file-not-found
      (when note?
	(log-event :normal "Unable to rename ~A; file was not found"
		   (dired-string old-pathname))))))

(defun 2delete-server-file0 (pathname &optional note? no-error?)
  (when (and note? (neq note? :errors-only))
    (log-event :normal "Deleting ~A" (dired-string pathname)))
  (condition-case-if no-error? ()
       (delete-file pathname)
    (fs:file-not-found
      (when note?
	(log-event :normal "Unable to delete ~A; file was not found" (dired-string pathname))))
    1;; There's no generic 0FS1 condition for the following 0LMFS1 failure ...
0    (lmfs:lmfs-already-deleted
      (when note?
	(log-event :normal "Unable to delete ~A; file is already deleted"
		   (dired-string pathname)))
      )))



;; There must be a better way.
(defvar2 *test-pathname*0)

(defun 2test-filesystem-tools0 (test-directory-name)
  (let* ((directory (fs:parse-pathname test-directory-name))
	 (directory-contents (new-pathname directory :wild :wild :wild)))
    (when (yes-or-no-p "Warning: this function will delete everything in ~A.~@
                        Do you wish to continue? " directory)
;     (when (probe-path directory :directory)
;       (ferror "Test directory ~A already exists." (directory-string directory)))    
      (setq *test-pathname* (new-pathname directory "foo" "text" :newest))
      (create-server-directory directory)
      (loop for test-case in `((progn
				 (log-event :normal "Creating foo.text")
				 (create-server-file *test-pathname* t t))
			       (progn
				 (log-event :normal "Renaming foo.text to bar.text")
				 (let ((new-name (new-name *test-pathname* "bar")))
				   (rename-server-file *test-pathname* new-name)
				   (setq *test-pathname* new-name)))
			       (progn
				 (log-event :normal "Renaming bar.text to bar.lisp")
				 (let ((new-name (new-type *test-pathname* "lisp")))
				   (rename-server-file *test-pathname* new-name)
				   (setq *test-pathname* new-name)))
			       (progn
				 (log-event :normal "Renaming bar.lisp to baz.text")
				 (let ((new-name (new-pathname *test-pathname* "baz" "text")))
				   (rename-server-file *test-pathname* new-name)
				   (setq *test-pathname* new-name)))
			       (progn
				 (log-event :normal "Allocating baz.bin")
				 (allocate-server-file (new-type *test-pathname* "bin") 10000)))
	    do (log-event :normal "Directory contains ~:[no files~;~:*~A~]" (directory-list directory-contents))
	       (eval test-case)
	    finally (log-event :normal "Directory contains ~:[no files~;~:*~A~]" (directory-list directory-contents)))
      (log-event :normal "Deleting all files in directory.")
      (loop for file in (directory-list directory-contents)
	    do (delete-server-file file t)
	    finally (log-event :normal "Directory contains ~:[no files~;~:*~A~]" (directory-list directory-contents)))
      (log-event :normal "Expunging directory")
      (expunge-server-directory directory t)
      (log-event :normal "Directory contains ~:[no files~;~:*~A~]" (directory-list directory-contents)))))
