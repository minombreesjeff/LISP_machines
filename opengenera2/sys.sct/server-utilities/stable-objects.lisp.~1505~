D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; -*- Mode: Lisp; Package: Server-Utilities; Base: 10.; Syntax:0 1Common-lisp; Lowercase: Yes0;1 -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;; Save and Restore are defined to return the object being saved or restored.
0(defgeneric(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") save0 (object) (declare (values saved-object)))
(defgeneric 2restore0 (object) (declare (values restored-object)))
(defgeneric 2destroy0 (object))
(defgeneric 2stable-directory0 (object))
(defgeneric 2stable-name0 (object))
(defgeneric 2stable-type0 (object))

(defflavor2 stable-object
0	((saved? nil))
	()
  (:required-methods save stable-directory stable-name stable-type))

(defmethod2 (stable-pathname stable-object)0 ()
  (new-pathname (stable-directory self) (stable-name self) (stable-type self)))

(defmethod2 (destroy stable-object)0 ()
  (delete-server-file (stable-pathname self) nil t))

(defvar2 *stable-8bit-array-cache-entry-size*0 800) ;; allow for structure header

(defflavor2 stable-8bit-array
0	((cached? nil)
	 (cache nil))
	(stable-object))

1;;; save means make sure there's a copy on disk.
0(defmethod2 (save stable-8bit-array)0 ()
  (when (not saved?)
    (when cached?
      (let ((filename (stable-pathname self)))
	(with-open-file (stream filename
				:direction :output
				:if-does-not-exist :create
				:if-exists :overwrite
				:element-type '(unsigned-byte 8))
	  (when cache
	    (send stream :string-out cache)))
	(setf saved? t))))
  self)

1;;; restore means if the file length is less than the buffer length, then
;;; bring the array into core.
0(defmethod2 (restore stable-8bit-array)0 ()
  (when (not saved?)
    (when (not cached?)
      (let* ((file (stable-pathname self))
	     (file-length (getf (cdr (fs:file-properties file)) :length-in-bytes)))
	(when ( file-length *stable-8bit-array-cache-entry-size*)
	  (with-open-file (stream file
				  :direction :input
				  :element-type '(unsigned-byte 8))
	    (let* ((array (make-array file-length :element-type '(unsigned-byte 8))))
	      (send stream :string-in nil array 0 file-length)
	      (setf cache array))
	    (setf cached? t)))))
    (setf saved? t))
  self)

(defmethod2 (get-stable-data-stream stable-8bit-array)0 (direction)
  (ecase direction
    (:input (if cached?
		(make-string-input-stream cache)
		(open (stable-pathname self) :direction :input :element-type '(unsigned-byte 8))))
    (:output (open (stable-pathname self) :direction :output :element-type '(unsigned-byte 8)))))

(defgeneric2 temp-type0 (carefully-saved-stable-object))
(defflavor2 carefully-saved-stable-object
0	()
	(stable-object)
  (:required-methods temp-type))

(defflavor2 carefully-saved-stable-property-list
0	((properties nil))
	(carefully-saved-stable-object))

(defmethod2 (save carefully-saved-stable-property-list)0 ()
  (let* ((perm-filename (stable-pathname self))
	 (temp-filename (new-type perm-filename (temp-type self))))
    (with-open-file (stream temp-filename
			    :direction :output
			    :if-does-not-exist :create
			    :if-exists :overwrite
			    ;; full 'character some day?
			    :element-type 'string-char)
      (with-standard-io-environment
	(print properties stream)))
    (delete-server-file perm-filename nil t)
    (rename-server-file temp-filename perm-filename)
    (setf saved? t))
  self)

(defmethod2 (restore carefully-saved-stable-property-list)0 ()
  (let* ((filename (stable-pathname self)))
    (when (not (open filename :direction :probe))
      (with-open-file (stream filename
			      :direction :output
			      :if-does-not-exist :create
			      ;; full 'character some day?
			      :element-type 'string-char)
	(with-standard-io-environment
	  (print nil stream))))
    (with-open-file (stream filename
			    :direction :input
			    :element-type 'string-char)
      (with-standard-io-environment
	(setf properties (read stream)))))
  (setf saved? t)
  self)

(defmethod2 (property-set? carefully-saved-stable-property-list)0 (property)
  (not (eq :watusi (getf properties property :watusi))))

(defmethod 2(get-property carefully-saved-stable-property-list)0 (property &optional default)
  (getf properties property default))

(defmethod 2(set-property carefully-saved-stable-property-list)0 (property value)
  (setf (getf properties property) value)
  (setf saved? nil))

(defmethod 2(remove-property carefully-saved-stable-property-list)0 (property)
  (remf properties property)
  (setf saved? nil))

(defmethod2 (list-properties-and-values carefully-saved-stable-property-list)0 ()
  properties)



(defun2 scavenge-directory-for-type0 (type directory)
  (let ((paths (directory-list (new-pathname directory :wild type :wild)))
	(table (make-hash-table :test #'equal)))
    (labels ((name (p) (send p :name))
	     (version (p) (send p :version))
	     (newest-version-deleting-elders (family)
	       (let* ((sorted-family (sort family #'> :key #'version))
		      (newest (first sorted-family))
		      (elders (rest sorted-family)))
		 (loop for elder in elders
		       do (delete-server-file elder t nil))
		 newest)))
      (setq paths (sort paths #'fs:pathname-lessp))
      (loop with families = paths
	    for ruling-family = (first families)
	    while ruling-family
	    do (let* ((newest (newest-version-deleting-elders
				(loop for candidates on families
				      for candidate = (first candidates)
				      while (string-equal (name candidate) (name ruling-family))
				      collect candidate
				      finally (setq families candidates))))
		      (newest-name (name newest)))
		 (setf (gethash newest-name table) newest)))
      table)))
