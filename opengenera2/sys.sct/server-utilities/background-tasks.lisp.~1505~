;;D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI"); -*- Mode: Lisp; Package: Server-Utilities; Base: 10.; Syntax: Common-lisp; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defflavor (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")background-task
0	(name
	 function
	 interval
	 (last-run-at (get-universal-time)))
	()
  (:initable-instance-variables name  function  interval)
  (:readable-instance-variables name)
  (:required-init-keywords     :name :function :interval))

(defmethod2 (sys:print-self background-task)0 (stream ignore slashify-p)
  (ignore slashify-p)
  (sys:printing-random-object (self stream :typep)
    (format stream "~A" name)))

(defmethod 2(make-background-task-want-to-run background-task)0 (time)
  (ignore time)
  (setf last-run-at (- last-run-at interval)))

(defmethod 2(maybe-run-background-task background-task)0 (time)
  (when (> (- time last-run-at) interval)
    (setf last-run-at time)
    (funcall function)))

(compile-flavor-methods background-task)



(defflavor 2background-task-queue
0	(name
	 period
	 (tasks nil))
	()
  (:initable-instance-variables name  period)
  (:readable-instance-variables       period)
  (:required-init-keywords     :name :period))

(defmethod 2(make-instance background-task-queue)0 (&rest ignore)
  (unless (numberp period)
    (setf period (time:parse-interval-or-never period))))

(defmethod2 (sys:print-self background-task-queue)0 (stream ignore slashify-p)
  (ignore slashify-p)
  (sys:printing-random-object (self stream :typep)
    (let ((num-tasks (length tasks)))
      (format stream "~A with ~:[~D tasks~;1 task~]"
	      name (= num-tasks 1) num-tasks))))

(defmethod2 (delete-background-task background-task-queue)0 (name)
  (setf tasks (delete name tasks :test #'string-equal :key #'background-task-name)))

(defmethod 2(add-background-task background-task-queue)0 (name function interval)
  (let ((parsed-interval (time:parse-interval-or-never interval)))
    (delete-background-task self name)
    (push (make-instance 'background-task
			 :name name
			 :function function
			 :interval parsed-interval)
	  tasks)))

(defmethod2 (map-background-tasks background-task-queue)0 (function)
  (loop with time = (get-universal-time)
	for task in tasks
	do (funcall function task time)))

(defmethod 2(make-background-tasks-want-to-run background-task-queue)0 ()
  (map-background-tasks self #'make-background-task-want-to-run))

(defmethod2 (maybe-run-background-tasks background-task-queue)0 ()
  (map-background-tasks self #'maybe-run-background-task))

(defmethod 2(background-task-queue-top-level background-task-queue)0 ()
  (make-background-tasks-want-to-run self)
  (loop doing
    (sleep period :sleep-reason "Server Background Idle")
    (maybe-run-background-tasks self)))

(compile-flavor-methods background-task-queue)



(defvar *2background-process*0 nil)
(defvar *2background-task-queue*
0	(make-instance 'background-task-queue :name "Server Background Tasks"
					      :period "2 minutes"))
(defun 2background-process-top-level0 ()
  (background-task-queue-top-level *background-task-queue*))

(defun 2verify-background-process-active0 ()
  (unless *background-process*
    (let ((background-process (make-process "Server Utilities Background")))
      (when (store-conditional (locf *background-process*) nil background-process)
	(process-preset *background-process* #'background-process-top-level)
	(process-enable *background-process*)))))

