;;D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI"); -*- Mode: Lisp; Package: Server-Utilities; Base: 10.; Syntax: Common-lisp; Lowercase: Yes -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;; Handy things

0(defun(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") print-log-date0 (&optional (stream *standard-output*) time-also)
  (multiple-value-bind (seconds minutes hours day month year)
      (time:get-time)
    (format stream "~2,'0D/~2,'0D/~2,'0D~:[~;-~2,'0D:~2,'0D:~2,'0D~]"
	    year month day time-also hours minutes seconds)))

(defun2 print-time0 (&optional (stream *standard-output*))
  (multiple-value-bind (seconds minutes hours)
      (time:get-time)
    (format stream "~2,'0D:~2,'0D:~2,'0D" hours minutes seconds)))

(defun2 print-date0 (&optional (stream *standard-output*))
  (multiple-value-bind (nil nil nil day month year day-of-the-week)
      (time:get-time)
    (format stream "~A, ~A ~D, ~D"
	    (time:day-of-the-week-string day-of-the-week)
	    (time:month-string month)
	    day
	    (+ year time:*year-zero*))))


1;; An entry in the log is: Time Process-id Herald Body
;; Time does not include the date.  An entry giving the date is made whenever
;;   the mailer is launched or the date changes.
;; Process-id is a code identifying which process made the entry.
;; Herald gives some idea as to which piece of code made the entry.  Often it
;;   is a message number, which means that we were inside MESSAGE-LOOP or [MESSAGE-RECEIVE].
;; Body can be anything.

;; This format is entry/line oriented because entries are being made by multiple
;; processes.  Formats such as "Reading >foo>bar ... 3K characters" can't be used since
;; another process might make an entry in the middle.  Therefore, access to the log is via
;; a special set of functions rather than a stream.

;;; Delete this structure in 8.0 ...
0(defstruct (2log-bindings0 :conc-name)
  log
  user-id
  log-process-id
  log-herald)

(defflavor 2basic-log
0	((lock nil)
	 (lock-whostate "Log Lock")
	 (last-locked nil)
	 (debugging nil)
	 (process-id nil)
	 (herald nil)
	 (day-of-month nil)
	 (day-of-month-changed-string nil)
	 (current-event-time-string nil)
	 (current-event-string nil))
	()
  (:conc-name log-)
  (:locatable-instance-variables debugging process-id herald)
  (:writable-instance-variables debugging process-id herald)
  (:initable-instance-variables lock-whostate)
  (:required-methods server-description record-event))

(defvar2 *logs*0 nil)

(defmethod2 (make-instance basic-log)0 (&rest ignore)
  (push self *logs*))

(defmacro-in-flavor 2(with-log-locked basic-log) 0(&body body)
  `(si:with-lock-held (lock :mylock-ok .locked-p. :whostate lock-whostate)
     (when .locked-p. (setf last-locked (get-universal-time)))
     ,@body))

(zwei:defindentation (2with-log-locked0 1 1))

(defgeneric2 forcibly-unlock-log0 (log))
(defmethod 2(forcibly-unlock-log basic-log)0 ()
  (setf lock nil))

(defvar 2*log*0)

1;;; This is the most-commonly-used interface to the log facility.  It takes several arguments:
;;;         (3 0 (NIL 0) (NIL :BOLD-ITALIC NIL) "CPTFONTBI")log1: the log in which the event should be recorded
;;;         3type1: one of :normal, :problem, :disaster, or :debug
;;;         3format-string1 and3 args1: a specification of how the event should be formatted.
0;;;
1;;; Only log the event once the window system is initialized. 
;;; NOTE: This is done as a quick fix to keep systems from logging events
;;; before the window system is initialized. In theory, this check should
;;; be done at the specific record-event methods doing window output. 
;;; If log-event is called before the window system is initialized,
;;; log entries will be lost. Currently, the only known place where
;;; this can occur is when warm-booting a MacIvory with the print
;;; spooler running.  This should be changed for 8.1 - RAM
0(defun 2log-event0 (type format-string &rest args)
  (when TV:*WINDOW-INITIALIZATIONS-RUN*
    (if (and (boundp '*log*) *log*)
	(apply #'record-event *log* type format-string args)
	(apply #'format t "~&[~\\datime\\] ~20T~@?" format-string args))))

(defvar 2*log-debugging-event-may-use-background-stream*0 nil)

(defun 2debug-with-log-or-trace-output0 (log process-id herald format-string &rest args)
  (or (when (or log (and (variable-boundp *log*) *log*))
	(let-if log ((*log* log))
	  (sys:letf-if process-id (((log-process-id *log*) process-id))
	    (sys:letf-if herald (((log-herald *log*) herald))
	      (apply #'log-event :debug format-string args))))
	t)
      (let ((final-trace-output-stream (si:follow-syn-stream *trace-output*)))
	(when (or (not (eq final-trace-output-stream 'tv:background-stream))
		  *log-debugging-event-may-use-background-stream*)
	  (apply #'format *trace-output* format-string args)))))

1;;; Standard log interfaces.

0(defgeneric 2add-host-to-notify0 (log host))
(defmethod 2(add-host-to-notify basic-log :default)0 (host)
  (ignore host))

(defgeneric2 remove-host-to-notify0 (log host))
(defmethod 2(remove-host-to-notify basic-log :default)0 (host)
  (ignore host))

(defgeneric 2remove-all-hosts-to-notify0 (log))
(defmethod 2(remove-all-hosts-to-notify basic-log :default)0 ()
  )

(defgeneric 2log-monitor-window0 (log))
(defmethod 2(log-monitor-window basic-log :default)0 ()
  nil)

(defgeneric 2(setf log-monitor-window)0 (log new-window))
(defmethod 2((setf log-monitor-window) basic-log :default)0 (new-window)
  (ignore new-window))

(defgeneric2 set-log-monitor-window0 (log new-window))
(defmethod 2(set-log-monitor-window basic-log :default)0 (new-window)
  (ignore new-window))

(defgeneric 2log-file-directory0 (log))
(defmethod 2(log-file-directory basic-log :default)0 ()
  nil)

(defgeneric 2(setf log-file-directory)0 (log new-directory))
(defmethod 2((setf log-file-directory) basic-log :default)0 (new-directory)
  (ignore new-directory))

(defgeneric 2log-file-maximum-size0 (log))
(defmethod 2(log-file-maximum-size basic-log :default)0 ()
  nil)

(defgeneric 2(setf log-file-maximum-size)0 (log new-maximum-size))
(defmethod 2((setf log-file-maximum-size) basic-log :default)0 (new-maximum-size)
  (ignore new-maximum-size))

(defgeneric 2log-file-generation-retention-count0 (log))
(defmethod 2(log-file-generation-retention-count basic-log :default)0 ()
  nil)

(defgeneric 2(setf log-file-genertion-retention-count)0 (log new-generation-retention-count))
(defmethod 2((setf log-file-genertion-retention-count) basic-log :default)
0	   (new-generation-retention-count)
  (ignore new-generation-retention-count))

(defgeneric 2open-log-file0 (log open-reason))
(defmethod 2(open-log-file basic-log :default)0 (open-reason)
  (ignore open-reason))

(defgeneric 2finish-log-file0 (log))
(defmethod 2(finish-log-file basic-log :default)0 ()
  )

(defgeneric 2close-log-file0 (log &optional abort-p))
(defmethod 2(close-log-file basic-log :default)0 (&optional abort-p)
  (ignore abort-p))

(defgeneric 2reap-log-file0 (log))
(defmethod 2(reap-log-file basic-log :default)0 ()
  )

1;;; Required method for all logs so we won't provide a default method.
0(defgeneric2 server-description0 (log open-reason))

1;;; This is the generic that all log types must support.  It's here not because
;;; it's exported from SU (it's not) but because we need to specify :progn combination.
0(defgeneric2 record-event0 (log type format-string &rest args)
  (:method-combination :progn))

(defwhopper2 (record-event basic-log)0 (type format-string &rest args)
  (ecase type
    ((:normal :problem :disaster :debug)
     (when (or (not (eq type :debug))
	       debugging)
       (with-log-locked self
	 (multiple-value-bind (nil nil nil current-day-of-month)
	     (time:get-time)
	   (when (not (eql day-of-month current-day-of-month))
	     (setf day-of-month current-day-of-month)
	     (setf day-of-month-changed-string
		   (format nil "Today is ~A ~A ~A~%"
			   (print-date nil)
			   (print-time nil)
			   (time:timezone-string)))))
	 (setf current-event-time-string (print-time nil))
	 (setf current-event-string
1	       ;; +++ This can and should be optimized.
0	       (format nil "~@[~A ~]~~A~"
		       process-id
		       (format nil "~@[~A: ~]~~A~"
			       herald
			       (apply #'format nil format-string args))))
	 (continue-whopper type format-string args)
	 (setf day-of-month-changed-string nil))))))


1;;; Use the generic NOTIFY protocol and just store a list of hosts
0(defflavor2 log-hosts-mixin
0	((to-notify nil))			;List of hosts to notify
	()
  (:conc-name log-hosts-)
  (:required-flavors basic-log))

(defmethod2 (add-host-to-notify log-hosts-mixin)0 (host)
  (let ((parsed-host (net:parse-host host nil t)))
    (when parsed-host
      (pushnew parsed-host to-notify :test #'neti:ns-eq))))

(defmethod2 (remove-host-to-notify log-hosts-mixin)0 (host)
  (let ((parsed-host (net:parse-host host nil t)))
    (when parsed-host
      (setq to-notify (remove parsed-host to-notify :test #'neti:ns-eq)))))

(defmethod 2(remove-all-hosts-to-notify log-hosts-mixin)0 ()
  (setq to-notify nil))

1;;; We ignore 2current-event-string1 because both the 0NOTIFY 1protocol and the notification
;;; system add timestamps themselves.  They aren't necessarily going to match the exact time,
;;; but clients of this type of log don't usually care about the disparity.
0(defmethod 2(record-event log-hosts-mixin)0 (type format-string &rest args)
  (ignore format-string args)
  (when (or (eq type :problem)
	    (eq type :disaster))
    1;; The notify code will handle any truncation, if necessary
0    (net:notify-hosts to-notify current-event-string :error-p nil :report nil)
    (tv:notify nil "~A" current-event-string)))


(defflavor 2log-monitor0-2mixin
0	((output-entries-lost 0)
	 (window))
	()
  (:conc-name log-monitor-)
  (:initable-instance-variables window)
  (:readable-instance-variables window)
  (:required-flavors basic-log))

(defvar 2*log-monitor-windows*0 nil)

(defmethod 2(make-instance log-monitor-mixin)0 (&rest ignore)
  (push self *log-monitor-windows*))

(defmethod 2((setf log-monitor-window) log-monitor-mixin)0 (new-window)
  (setf window new-window)
  (pushnew self *log-monitor-windows*))

(defmethod2 (set-log-monitor-window log-monitor-mixin)0 (new-window)
  (setf (log-monitor-window self) new-window))

1;;; If the pane is locked, with a menu popped up over it, for example, then don't
;;; bother outputting to it.
0(defmethod2 (record-event log-monitor-mixin)0 (type format-string &rest args)
  (ignore type format-string args)
  (verify-background-process-active)
  (tv:maybe-lock-sheet
    window
    (progn
      (unless (zerop output-entries-lost)
	(format window "~&~A Lost ~D monitor entr~:@P because the window was locked."
		current-event-time-string output-entries-lost)
	(setf output-entries-lost 0))
      (when day-of-month-changed-string
	(format window "~&~A ~A" current-event-time-string day-of-month-changed-string))
      (format window "~&~A ~~A~" current-event-time-string current-event-string))
    (incf output-entries-lost)))

(defvar 2*log-monitor-window-lines-to-keep*0 500
  "May a positive integer or NIL.  If this is a positive integer, then
   we will periodically delete, from the on-screen history of a log only
   (not from any associated file), all prior history until this number
   of lines from the latest entry.  Thus, if this is set to 500, we will
   periodically trim the log kept in the window's history to the last 500
   lines.  If this is NIL, we never trim the log, which can be useful if
   you often refer to old entries in the on-screen log instead of using
   the log file, if there is one.  Never trimming the log can result in
   a busy server eventually exhausting its virtual memory, because the
   history will grow monotonically; however, a server that does little
   logging will take a long time to do this.")

(defmethod 2(reset-log-monitor-window-history log-monitor-mixin)0 ()
  (when *log-monitor-window-lines-to-keep*
    (cond ((eq (send window :status) :deactivated)
	   (setf *log-monitor-windows* (delete self *log-monitor-windows*)))
	  ((operation-handled-p window :compress-output-history)
	   (let* ((screen-height (floor (tv:sheet-inside-height window)
					(tv:sheet-line-height window)))
		  (screens-to-keep (ceiling *log-monitor-window-lines-to-keep* screen-height)))
	     (send window :compress-output-history :keep-screenfuls screens-to-keep)))
	  (t
	   (setf *log-monitor-windows* (delete self *log-monitor-windows*))))))

(defun2 reset-log-monitor-window-histories0 ()
  (when *log-monitor-window-lines-to-keep*
    (loop for window in *log-monitor-windows*
	  do (letf ((*log* window))
	       (letf (((log-process-id *log*) "BG")
		      ((log-herald     *log*) "Server Background"))
		 (reset-log-monitor-window-history *log*))))))

(add-background-task *background-task-queue*
		     "Reset Log Window Histories"
		     #'reset-log-monitor-window-histories
		     "30 minutes")


(defparameter 2*log-file-default-maximum-size*0 450000
  "Maximum size (in characters) for a log file before starting a new one.")

(defparameter 2*log-file-default-generation-retention-count*0 10
  "Number of old log files to keep whenever a new log file is started.")

(defflavor2 log-file-mixin
0	((stream nil)
	 (needs-finishing nil)
	 (maximum-size *log-file-default-maximum-size*)
	 (directory nil)
	 (pathname nil)
	 (generation-retention-count *log-file-default-generation-retention-count*)
	 (logging-error nil)
	 (warm-booted-stream nil))
	()
  (:conc-name log-file-)
  (:initable-instance-variables directory maximum-size generation-retention-count)
  (:readable-instance-variables directory maximum-size generation-retention-count)
  (:writable-instance-variables maximum-size generation-retention-count)
  (:required-init-keywords     :directory)
  (:required-flavors basic-log))

(defvar 2*open-log-files*0 nil)

(defmethod 2((setf log-file-directory) log-file-mixin)0 (new-directory)
  (let ((log-file-is-open (not (null stream))))
    (unless (eq directory new-directory)
      (when log-file-is-open
	(close-log-file self))
      (setf directory new-directory)
      (when log-file-is-open
	(open-log-file self (format nil "running with log files now in ~A on"
				    directory))))))

(defmethod2 (open-log-file log-file-mixin)0 (open-reason)
  (let ((logname (print-log-date nil)))
    (unless (send directory :valid-name-p logname)
      (setq logname (substitute #\- #\/ logname)))
    (setf stream (create-server-file (new-pathname directory logname "Log") t)))
  (setf *open-log-files* (remove-duplicates (push self *open-log-files*)))
  (verify-background-process-active)
1  ;; Take this file out of the wholine.
0  (fs:delete-open-stream stream)
  (setf pathname (send stream :truename))
  (log-event :normal (server-description self open-reason))
  (when warm-booted-stream
    (log-event :normal "Machine was warm-booted while log file ~A was open."
	       (send warm-booted-stream :truename))
    (setf warm-booted-stream nil))
  (reap-log-file self)) 

(defmethod2 (record-event log-file-mixin)0 (type format-string &rest args)
  (ignore type format-string args)
  (when stream
    (condition-case (error)
	 (progn
	   (setf needs-finishing t)
	   (when day-of-month-changed-string
	     (format stream "~&~A ~A" current-event-time-string day-of-month-changed-string))
	   (format stream "~&~A ~~A~" current-event-time-string current-event-string))
       (sys:stream-closed
	 1;; File server closed the stream out from under us...
0	 (setf stream nil)			1;Prevent recursive attempts to use the stream.
0	 (let ((original-current-event-time-string current-event-time-string)
	       (original-current-event-string current-event-string))
	   (log-event :normal "File server asynchronously closed ~A." pathname)
	   (open-log-file self "running on")
	   (format stream "~&~A ~~A~"
		   original-current-event-time-string original-current-event-string)
	   1;; Be sure any methods not yet run log the original event...
0	   (setf current-event-time-string original-current-event-time-string
		 current-event-string original-current-event-string)))
       ((fs:file-error sys:network-error)
	1;; Notify the user when the error first occurs -- Be careful to avoid recursive errors.
0	(let ((original-logging-error logging-error)
	      (error-type-string (typecase error
				   (fs:file-error "File system")
				   (sys:network-error "Network"))))
	  (setf logging-error error)
	  (unless original-logging-error
	    (log-event :normal
		       "~A error while trying to record log events into ~A:~%~@5T~~A~"
		       error-type-string pathname logging-error))))
       (:no-error
	 (when logging-error
	   1;; Original error was either an 2fs:file-error1 or 2sys:network-error1.
0	   (let ((original-logging-error logging-error))
	     (setf logging-error nil)
	     (typecase original-logging-error
	       (fs:no-more-room
		 (log-event :normal
			    "Log file entries were lost because the file system was full."))
	       (fs:file-error
		 (log-event :normal "Log file entries were lost because of file system error:~@
				     ~@5T~~A~"
			    original-logging-error))
	       (sys:network-error
		 (log-event :normal "Log file entries were lost because of network error:~@
				     ~@5T~~A~"
			    original-logging-error)))))))))

(defmethod2 (finish-log-file log-file-mixin)0 ()
  (let ((started-new-log-file nil))
    (labels ((finish ()
	       (condition-case (error)
		    (progn
		      (send stream :finish)
		      (setf needs-finishing nil))
		  (sys:stream-closed
		    1;; File server closed the stream out from under us...
0		    (setf stream nil		1;Prevent recursive attempts to use the stream.
0			  started-new-log-file t)
		    (log-event :normal "File server asynchronously closed ~A." pathname)
		    (open-log-file self "running on"))
		  ((fs:file-error sys:network-error)
		   1;; Try to notify when the error first occurs.
0		   (let ((original-logging-error logging-error)
			 (error-type-string (typecase error
					      (fs:file-error "File system")
					      (sys:network-error "Network"))))
		     (letf ((logging-error error))
		       (unless original-logging-error
			 (log-event :normal
				    "~A error while trying to finish ~A:~%~@5T~~A~"
				    error-type-string pathname logging-error))))))))
      (when (and stream needs-finishing)
	(with-log-locked self
	  (if ( (send stream :read-pointer) maximum-size)
	      (finish)
	    1;; Current log file is full -- Start a new one.
0	    (setf needs-finishing nil		1;Prevents recursive attempts to finish.
0		  started-new-log-file t)
	    (close-log-file self)
	    (open-log-file self "running on")
	    (letf ((stream nil))
	      (log-event :normal "Continuing log in ~A" pathname))))
	(when started-new-log-file
	  1;; Notice we are being careful to do this next one outside the lock...
0	  (reap-log-file self)
	  (with-log-locked self
	    (finish)))))))

(defun2 finish-open-log-files0 ()
  (loop for log in *open-log-files*
	do (letf ((*log* log))
	     (letf (((log-process-id *log*) "BG")
		    ((log-herald     *log*) "Server Background"))
	       (finish-log-file log)))))

(add-background-task *background-task-queue*
		     "Finish Log Files"
		     #'finish-open-log-files
		     "5 minutes")

(defmethod2 (close-log-file log-file-mixin)0 (&optional abort-p)
  (with-log-locked self
    (unless abort-p
      (finish-log-file self))
    (when stream
1      ;; Replace with something more tasteful that only catches FS errors.
0      (ignore-errors
	(setf *open-log-files* (delete self *open-log-files*))
	(log-event :normal "Closing log file ~A" pathname)
	(send stream :close abort-p)))
    (setf stream nil)
    (setf pathname nil)))

(defmethod 2(reap-log-file log-file-mixin)0 ()
  (let* ((wild-pathname (new-pathname directory :wild "Log" :wild))
	 (log-files (directory-list wild-pathname))
	 (log-count (length log-files)))
    (when (> log-count generation-retention-count)
      (decf log-count generation-retention-count)
      (log-event :normal "Deleting ~D log file~:P" log-count)
      (loop with note? = (> log-count 1)
	    repeat log-count
	    for file in log-files do (delete-server-file file note? t)))
1    ;; reap should3 always1 scrounge for disk space
0    (expunge-server-directory directory t)))


1;;; "Cleanup" the log file after a warm boot --
;;;    Just resets the necessary instance variables to cause our next attempt to log a
;;;    message to open a new file with an appropriate message.
0(defmethod2 (warm-boot-cleanup-log-file log-file-mixin)0 ()
  (with-log-locked self
    (prog1
      stream
      (setf warm-booted-stream stream
	    stream nil
	    pathname nil))))

1;;; Cleanup the server logs after a warm boot --
;;;     (1) Forcibly reset all log locks.  (2) Close any log files that were open.
0(defun 2cleanup-logs-after-warm-boot0 ()
  (loop for log in *logs*
	do (forcibly-unlock-log log)
	as open-stream = (and (typep log 'log-file-mixin)
			      (warm-boot-cleanup-log-file log))
	when open-stream
	  collect open-stream into open-streams
	finally
	  (when open-streams
	    (process-run-function "Close server logs"
	      #'(lambda (open-streams)
		  (dolist (open-stream open-streams)
		    (ignore-errors
		      (send open-stream :close t))))
	      open-streams)))
  (setf *open-log-files* nil))

(add-initialization "Cleanup server logs" '(cleanup-logs-after-warm-boot) '(:warm))


1;;; Cleanup the server logs before a disk save --
;;;    Just close any open log files.
0(defun 2cleanup-logs-before-cold0 ()
  (dolist (log *logs*)
    (when (typep log 'log-file-mixin)
      (close-log-file log))))

(add-initialization "Cleanup server logs" '(cleanup-logs-before-cold) '(:before-cold))


(defflavor 2log-interactive-mixin
0  ((typeout nil))
  ()
  (:required-flavors basic-log)
  (:locatable-instance-variables typeout)
  (:conc-name :log-interactive-))

(defmethod 2(record-event log-interactive-mixin) 0(type format-string &rest args)
  (ignore type format-string args)
  (when typeout
    (format t "~&~A ~~A~" current-event-time-string current-event-string)))


(defun with-log-bindings (continuation
			  &rest keys
			  &key ((:log *log*)) zl:user-id log-process-id log-herald)
  (declare (sys:downward-funarg continuation)
	   (ignore keys))
  (letf (((log-process-id *log*) log-process-id)
	 ((log-herald *log*) log-herald))
    (funcall continuation)))
