D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; -*- Mode: Lisp; Package: Server-Utilities; Base: 10.; Syntax: Common-lisp; Lowercase: Yes; -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;; Unique IDs

;; The number stored as the name of the *.UID file is greater than or equal to the last
;; number released.  When the first server starts up, it will release 1+ this number as the next
;; unique id.  *UID-LIMIT* and *UID-PATHNAME* should always have the same number as this file.

0(defvar *(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")UID-last0* nil)		1	;Last UID released.
0(defvar 2*UID-limit*0)		1	;Must write a new file after this UID released.
0(defvar 2*UID-pathname*0)		1	;Pathname of current UID file.
0(defvar 2*UID-setup-needed*0 t)
(defvar 2*UID-lock*0 nil)

(defparameter 2*UID-pad*0 8)		1;Number of characters in UID file name.
0(defparameter 2*UID-interval*0 100.)        1;Allocate this many UIDs in a chunk.

0(defvar2 *UID-directory*0     nil)
(defvar 2*UID-wild-pathname*0 nil)

(defun 2local-uid-pathname-initialize0 ()
  (setf *uid-directory*     #-VLM (fs:parse-pathname "LOCAL:>UID>")
			    #+VLM (fs:parse-pathname "HOST:/var/lib/symbolics/uid.sct/"))
  (setf *UID-wild-pathname* (new-pathname *UID-directory* :wild "UID")))

(add-initialization "Local UID pathnames" '(local-uid-pathname-initialize)
		    '(:now) 'net:local-name-initialization-list)

(defun 2UID-string0 (integer) (format nil "~V,'0D" *UID-pad* integer))

(defun 2UID-setup0 ()
  (unless (probe-path :directory *UID-directory*)
    (create-server-directory *UID-directory*))
  (let* ((UID-files (directory-list *UID-wild-pathname*))
	 (extras (butlast UID-files)))
    (cond ((null UID-files)
	   (setq *UID-pathname* (new-pathname *uid-directory* (UID-string *UID-interval*) "UID"))
	   (create-server-file *UID-pathname* t t)
	   (setq *UID-last* 0)
	   (setq *UID-limit* *UID-interval*))
	  (t (log-event :normal "Restoring UID state from disk")
	     (cond ((not (null extras))
		    (log-event :problem "More than one UID file, deleting extras")
		    (dolist (e extras) (delete-server-file e t))))
	     (setq *UID-pathname* (car (last UID-files)))
	     (log-event :normal "Reading UID file ~A" (host-string *UID-pathname*))
	     (setq *UID-last* (parse-integer (send *UID-pathname* :name)))
	     (setq *UID-limit* *UID-last*)
	     (UID-check-limit))))
  (when *UID-lock*
    (log-event :problem "Found UID lock held by ~S" *UID-lock*)
    (setq *UID-lock* nil))
  (setq *UID-setup-needed* nil))

(defun2 UID-setup-complete0 ()
  (not *UID-setup-needed*))

(defun 2UID-check-limit0 ()
  (declare (values wrote-new-UID-file-p))
  (when (= *UID-last* *UID-limit*)
    (let* ((new-limit (+ *UID-limit* *UID-interval*))
	   (new-pathname (new-name *UID-pathname* (UID-string new-limit))))
      (rename-server-file *UID-pathname* new-pathname)
      (setq *UID-pathname* new-pathname)
      (setq *UID-limit* new-limit)
      t)))

(defun 2UID-allocate0 ()
  (when *UID-setup-needed* (UID-setup))
  (si:with-lock-held (*UID-lock* :whostate "UID Lock")
    (UID-check-limit)
    (incf *UID-last*)))

(defun 2UID-test0 (n)
  (when *UID-setup-needed* (UID-setup))
  (log-event :normal "Testing UID allocation")
  (let ((warn (/ *UID-interval* 10.)))
    (dotimes (ignore n)
      (when (zerop (rem *UID-last* warn))
	(log-event :normal"Allocated UID ~D " *UID-last*))
      (UID-allocate))))
