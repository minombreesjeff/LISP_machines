;;; -*- Mode: LISP; Syntax: Common-lisp; Package: NFS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defvar *nfs2-error-table* (make-hash-table :test 'eql :ignore-gc t))
(defvar *nfs2-status-table* (make-hash-table :test 'eq))
(defvar *nfs2-error-alist* nil)
(defvar *nfs2-error-options* nil)
(defvar *nfs2-success-codes* (list 0))
(defvar *nfs2-error-pathname* nil)
(defvar *nfs2-error-operation* nil)

(defflavor nfs2-error
	()
	(nfs-error)
  (:abstract-flavor))

(defflavor nfs2-random-error
	(error-code)
	(nfs2-error)
  (:initable-instance-variables error-code)
  (:required-init-keywords :error-code))

(defmethod (:report-without-pathname nfs2-random-error) (stream)
  (format stream "NFS error ~D" error-code))

(compile-flavor-methods nfs2-random-error)

(defmacro with-nfs2-error-information 
	  ((pathname operation &rest options &key success-codes error-alist &allow-other-keys)
	   &body body)
  `(let ((*nfs2-error-pathname* ,pathname)
	 (*nfs2-error-operation* ,operation)
	 ,@(and success-codes `((*nfs2-success-codes* ,success-codes)))
	 ,@(and error-alist `((*nfs2-error-alist* ,error-alist)))
	 ,@(let ((options (copy-list options)))
	     (remf options :success-codes)
	     (remf options :error-alist)
	     (and options `((*nfs2-error-options* (list ,@options))))))
     ,@body))

(zwei:defindentation (with-nfs2-error-information 0 4 1 1))

(defun nfs2-check-status (status)
  (declare (dbg:error-reporter))
  (unless (member status *nfs2-success-codes*)
    (let ((flavor (or (second (assoc status *nfs2-error-alist*))
		      (gethash status *nfs2-error-table*))))
      (if flavor
	  (error flavor
		 :pathname *nfs2-error-pathname*
		 :operation *nfs2-error-operation*)
	(error 'nfs2-random-error
	       :error-code status
	       :pathname *nfs2-error-pathname*
	       :operation *nfs2-error-operation*))))
  status)

(defparameter
  *nfs2-error-map*
  '((2 fs:file-not-found fs:directory-not-found fs:link-target-not-found
       fs:invalid-pathname-syntax fs:pathname-error)
    (17 fs:file-already-exists fs:directory-already-exists fs:rename-to-existing-file)
    (66 fs:directory-not-empty)
    (13 fs:access-error)
    (28 fs:no-more-room)
    (5 error)))

(defun nfs2-error-status (error)
  (declare (values status))
  (or (gethash (type-of error) *nfs2-status-table*)
      (loop for (status . conditions) in *nfs2-error-map*
	    thereis (loop for condition in conditions
			  when (and (symbolp condition)
				    (get condition 'sys:flavor)
				    (si:typep-flavor error condition))
			    return status))
      (error "No status for ~S" error)))

(defmacro define-nfs2-error
	  (name number message instance-variables component-flavors &rest options)
  (declare (zwei:indentation 1 7 5 1))
  `(progn
     (record-source-file-name ',name 'define-nfs2-error)
     (sys:local-declare ((function-parent ,name define-nfs2-error))
       (defflavor ,name ,instance-variables ,component-flavors ,@options)
       ,@(when message
	   `((defmethod (:report-without-pathname ,name) (stream)
	       (write-string ,message stream))
	     (compile-flavor-methods ,name)))
       ,@(when number
	   `((setf (gethash ,number *nfs2-error-table*) ',name)
	     (setf (gethash ',name *nfs2-status-table*) ,number))))))

(define-nfs2-error nfs2-eperm 1 "Not owner" () (fs:access-error nfs2-error))
(define-nfs2-error nfs2-enoent 2 "No such file or directory" () (fs:file-not-found nfs2-error))
(define-nfs2-error nfs2-esrch 3 "No such process" () (nfs2-error))
(define-nfs2-error nfs2-eintr 4 "Interrupted system call" () (nfs2-error))
(define-nfs2-error nfs2-eio 5 "I/O error" () (fs:data-error nfs2-error))
(define-nfs2-error nfs2-enxio 6 "No such device or address" () (fs:not-available nfs2-error))
(define-nfs2-error nfs2-e2big 7 "Arg list too long" () (nfs2-error))
(define-nfs2-error nfs2-enoexec 8 "Exec format error" () (nfs2-error))
(define-nfs2-error nfs2-ebadf 9 "Bad file number" () (nfs2-error))
(define-nfs2-error nfs2-echild 10 "No children" () (nfs2-error))
(define-nfs2-error nfs2-eagain 11 "No more processes" () (nfs2-error))
(define-nfs2-error nfs2-enomem 12 "Not enough core" () (nfs2-error))
(define-nfs2-error nfs2-eacces 13 "Permission denied" () (fs:access-error nfs2-error))
(define-nfs2-error nfs2-efault 14 "Bad address" () (nfs2-error))
(define-nfs2-error nfs2-enotblk 15 "Block device required" () (nfs2-error))
(define-nfs2-error nfs2-ebusy 16 "Mount device busy" () (nfs2-error))
(define-nfs2-error nfs2-eexist 17 "File exists" () (fs:file-already-exists nfs2-error))
(define-nfs2-error nfs2-exdev 18 "Cross-device link" () (nfs2-error))
(define-nfs2-error nfs2-enodev 19 "No such device" () (fs:device-not-found nfs2-error))
(define-nfs2-error nfs2-enotdir 20 "Not a directory" () (fs:wrong-kind-of-file nfs2-error))
(define-nfs2-error nfs2-eisdir 21 "Is a directory" () (fs:wrong-kind-of-file nfs2-error))
(define-nfs2-error nfs2-einval 22 "Invalid argument" () (nfs2-error))
(define-nfs2-error nfs2-enfile 23 "File table overflow" () (nfs2-error))
(define-nfs2-error nfs2-emfile 24 "Too many open files" () (nfs2-error))
(define-nfs2-error nfs2-enotty 25 "Not a typewriter" () (nfs2-error))
(define-nfs2-error nfs2-etxtbsy 26 "Text file busy" () (nfs2-error))
(define-nfs2-error nfs2-efbig 27 "File too large" () (fs:data-error nfs2-error))
(define-nfs2-error nfs2-enospc 28 "No space left on device" () (fs:no-more-room nfs2-error))
(define-nfs2-error nfs2-espipe 29 "Illegal seek" () (nfs2-error))
(define-nfs2-error nfs2-erofs 30 "Read-only file system" () (fs:access-error nfs2-error))
(define-nfs2-error nfs2-emlink 31 "Too many links" () (nfs2-error))
(define-nfs2-error nfs2-epipe 32 "Broken pipe" () (nfs2-error))
(define-nfs2-error nfs2-edom 33 "Argument too large" () (nfs2-error))
(define-nfs2-error nfs2-erange 34 "Result too large" () (nfs2-error))
(define-nfs2-error nfs2-ewouldblock 35 "Operation would block" () (nfs2-error))
(define-nfs2-error nfs2-einprogress 36 "Operation now in progress" () (nfs2-error))
(define-nfs2-error nfs2-ealready 37 "Operation already in progress" () (nfs2-error))
(define-nfs2-error nfs2-enotsock 38 "Socket operation on non-socket" () (nfs2-error))
(define-nfs2-error nfs2-edestaddrreq 39 "Destination address required" () (nfs2-error))
(define-nfs2-error nfs2-emsgsize 40 "Message too long" () (nfs2-error))
(define-nfs2-error nfs2-eprototype 41 "Protocol wrong type for socket" () (nfs2-error))
(define-nfs2-error nfs2-enoprotoopt 42 "Protocol not available" () (nfs2-error))
(define-nfs2-error nfs2-eprotonosupport 43 "Protocol not supported" () (nfs2-error))
(define-nfs2-error nfs2-esocktnosupport 44 "Socket type not supported" () (nfs2-error))
(define-nfs2-error nfs2-eopnotsupp 45 "Operation not supported on socket" () (nfs2-error))
(define-nfs2-error nfs2-epfnosupport 46 "Protocol family not supported" () (nfs2-error))
(define-nfs2-error nfs2-eafnosupport 47 "Address family not supported by protocol family" () (nfs2-error))
(define-nfs2-error nfs2-eaddrinuse 48 "Address already in use" () (nfs2-error))
(define-nfs2-error nfs2-eaddrnotavail 49 "Can't assign requested address" () (nfs2-error))
(define-nfs2-error nfs2-enetdown 50 "Network is down" () (nfs2-error))
(define-nfs2-error nfs2-enetunreach 51 "Network is unreachable" () (nfs2-error))
(define-nfs2-error nfs2-enetreset 52 "Network dropped connection on reset" () (nfs2-error))
(define-nfs2-error nfs2-econnaborted 53 "Software caused connection abort" () (nfs2-error))
(define-nfs2-error nfs2-econnreset 54 "Connection reset by peer" () (nfs2-error))
(define-nfs2-error nfs2-enobufs 55 "No buffer space available" () (nfs2-error))
(define-nfs2-error nfs2-eisconn 56 "Socket is already connected" () (nfs2-error))
(define-nfs2-error nfs2-enotconn 57 "Socket is not connected" () (nfs2-error))
(define-nfs2-error nfs2-eshutdown 58 "Can't send after socket shutdown" () (nfs2-error))
(define-nfs2-error nfs2-etoomanyrefs 59 "Too many references: can't splice" () (nfs2-error))
(define-nfs2-error nfs2-etimedout 60 "Connection timed out" () (nfs2-error))
(define-nfs2-error nfs2-econnrefused 61 "Connection refused" () (nfs2-error))
(define-nfs2-error nfs2-eloop 62 "Too many levels of symbolic links" () (nfs2-error))
(define-nfs2-error nfs2-enametoolong 63 "File name too long" () (fs:file-lookup-error nfs2-error))
(define-nfs2-error nfs2-ehostdown 64 "Host is down" () (nfs2-error))
(define-nfs2-error nfs2-ehostunreach 65 "No route to host" () (nfs2-error))
(define-nfs2-error nfs2-enotempty 66 "Directory not empty" () (fs:directory-not-empty nfs2-error))
(define-nfs2-error nfs2-eproclim 67 "Too many processes" () (nfs2-error))
(define-nfs2-error nfs2-eusers 68 "Too many users" () (nfs2-error))
(define-nfs2-error nfs2-edquot 69 "Disc quota exceeded" () (fs:no-more-room nfs2-error))
(define-nfs2-error nfs2-estale 70 "Stale NFS file handle" () (fs:file-not-found nfs2-error))
(define-nfs2-error nfs2-eremote 71 "Too many levels of remote in path" () (nfs2-error))
(define-nfs2-error nfs2-enostr 72 "Device is not a stream" () (nfs2-error))
(define-nfs2-error nfs2-etime 73 "Timer expired" () (nfs2-error))
(define-nfs2-error nfs2-enosr 74 "Out of streams resources" () (nfs2-error))
(define-nfs2-error nfs2-enomsg 75 "No message of desired type" () (nfs2-error))
(define-nfs2-error nfs2-ebadmsg 76 "Trying to read unreadable message" () (nfs2-error))
(define-nfs2-error nfs2-eidrm 77 "Identifier removed" () (nfs2-error))
(define-nfs2-error nfs2-edeadlk 78 "Deadlock condition." () (nfs2-error))
(define-nfs2-error nfs2-enolck 79 "No record locks available." () (nfs2-error))
(define-nfs2-error nfs2-enonet 80 "Machine is not on the network" () (nfs2-error))
(define-nfs2-error nfs2-erremote 81 "Object is remote" () (nfs2-error))
(define-nfs2-error nfs2-enolink 82 "the link has been severed" () (nfs2-error))
(define-nfs2-error nfs2-eadv 83 "advertise error" () (nfs2-error))
(define-nfs2-error nfs2-esrmnt 84 "srmount error" () (nfs2-error))
(define-nfs2-error nfs2-ecomm 85 "Communication error on send" () (nfs2-error))
(define-nfs2-error nfs2-eproto 86 "Protocol error" () (nfs2-error))
(define-nfs2-error nfs2-emultihop 87 "multihop attempted" () (nfs2-error))
(define-nfs2-error nfs2-edotdot 88 "Cross mount point (not an error)" () (nfs2-error))
(define-nfs2-error nfs2-eremchg 89 "Remote address changed" () (nfs2-error))

