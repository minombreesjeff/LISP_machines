;;; -*- Mode: LISP; Syntax: Common-lisp; Package: (NFS SCL); Base: 10; Lowercase: Yes; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; This file implements the lisp machine user end for the Sun Network File
;;; System (NFS) Protocol, as specified in the sun Network File System
;;; Protocol Specification, Revision B of 17 February 1986.

;;; The protocol for talking to version-dependent stream

(defgeneric stream-update-fhandle-and-plist
	    (nfs-stream
	      )
  )

(defgeneric stream-read-data
	    (nfs-stream
	      offset count)
  (declare (values array))
  )

(defgeneric stream-start-read-ahead
	    (nfs-stream
	      offset count)
  )

(defgeneric stream-finish-read-ahead
	    (nfs-stream
	      future &optional (errorp t))
  (declare (values array)))

(defgeneric stream-abort-read-ahead
	    (nfs-stream
	      future)
  )

(defgeneric stream-write-data-internal
	    (nfs-stream
	      array offset)
  )

(defgeneric stream-write-data
	    (nfs-stream
	      array offset deallocate-p)
  )

(defgeneric stream-start-write-behind
	    (nfs-stream
	      array offset)
  )

(defgeneric stream-finish-write-behind
	    (nfs-stream
	      future array offset)
  )

(defgeneric stream-abort-write-behind
	    (nfs-stream
	      future)
  )

;;; NFS streams

(defflavor nfs-stream-mixin
	(truename
	 plist
	 (status :closed))
	()
  (:gettable-instance-variables truename plist status)
  (:initable-instance-variables truename plist)
  :abstract-flavor
  )

(defmethod (:close nfs-stream-mixin) (&optional abort-p)
  (declare (ignore abort-p))
  (setf status :closed))

(defflavor nfs-data-stream-mixin
	(dir-fhandle
	 fhandle
	 (buffer-pointer 0)
	 (length nil)
	 (open-mode nil)
	 (preserve-dates nil)
	 (fake-characters nil)
	 (raw nil))
	()
  (:gettable-instance-variables open-mode)
  (:settable-instance-variables buffer-pointer)
  (:required-flavors nfs-stream-mixin si:file-data-stream-mixin)
  (:initable-instance-variables dir-fhandle fhandle buffer-pointer length open-mode
				preserve-dates fake-characters raw)
  :abstract-flavor)

(defmethod (:length nfs-data-stream-mixin :default) ()
  length)

(defwhopper (:init nfs-data-stream-mixin) (plist)
  (unwind-protect-case ()
      (continue-whopper plist)
    (:normal
      (setf status :open))
    (:abort
      (close self :abort t))))

(defmethod (fs:%file-stream-file-element-type nfs-data-stream-mixin) ()
  (let ((element-type (send self :element-type)))
    (cond ((eq element-type 'string-char) 'character)
	  (fake-characters 'character)
	  (t element-type))))

(defmethod (:delete nfs-data-stream-mixin) (&optional (errorp t))
  (condition-case-if (not errorp) (error)
       (error-restart (error "Retry DELETE of ~A" truename)
	 (close self)
	 (send si:file-access-path :delete truename)
	 t)
     (fs:file-operation-failure error)))

(defmethod (:rename nfs-data-stream-mixin) (new-name &optional (errorp t))
  (condition-case-if (not errorp) (error)
       (error-restart (error "Retry RENAME of ~A to ~A" truename new-name)
	 (multiple-value-bind (old-truename new-truename)
	     (send si:file-access-path :rename truename new-name)
	   (declare (ignore old-truename))
	   new-truename))
     (fs:file-operation-failure error)))

(defgeneric stream-properties-without-preserving-dates
	    (nfs-data-stream-mixin
	      )
  )

(defmethod (stream-properties-without-preserving-dates nfs-data-stream-mixin) ()
  (if fhandle 
      (fap-properties-internal
	si:file-access-path
	si:translated-pathname fhandle truename)
    (send si:file-access-path :properties truename)))

(defmethod (:properties nfs-data-stream-mixin) (&optional (errorp t))
  (condition-case-if (not errorp) (error)
       (error-restart (error "Retry FILE-PROPERTIES of ~A" truename)
	 (multiple-value-bind (properties changeable)
	     (stream-properties-without-preserving-dates self)
	   (when preserve-dates
	     ;; Fake preserve-dates by deceit
	     (let ((creation-date (getf (cdr properties) :creation-date))
		   (reference-date (getf (cdr properties) :reference-date))
		   (preserved-creation-date (getf plist :creation-date))
		   (preserved-reference-date (getf plist :reference-date)))
	       (when (and creation-date preserved-creation-date)
		 (setf (getf properties :creation-date) preserved-creation-date))
	       (when (and reference-date preserved-reference-date)
		 (setf (getf properties :reference-date) preserved-reference-date))))
	   (values properties changeable)))
     (fs:file-operation-failure error)))

(defmethod (:change-properties nfs-data-stream-mixin) (errorp &rest properties)
  (condition-case-if (not errorp) (error)
       (error-restart (error "Retry CHANGE-FILE-PROPERTIES of ~A" truename)
	 (if fhandle
	     (fap-change-properties-internal
	       si:file-access-path
	       si:translated-pathname fhandle truename properties)
	   (send si:file-access-path :change-properties truename properties))
	 t)
     (fs:file-operation-failure error)))

(defgeneric stream-preserve-dates
	    (nfs-data-stream-mixin
	      )
  )

(defmethod (stream-preserve-dates nfs-data-stream-mixin) ()
  (when preserve-dates
    (let* ((properties (stream-properties-without-preserving-dates self))
	   (creation-date (getf (cdr properties) :creation-date))
	   (reference-date (getf (cdr properties) :reference-date))
	   (preserved-creation-date (getf plist :creation-date))
	   (preserved-reference-date (getf plist :reference-date))
	   (change-plist (nconc (when (and preserved-creation-date creation-date
					   ( preserved-creation-date creation-date))
				  (list :creation-date preserved-creation-date))
				(when (and preserved-reference-date reference-date
					   ( preserved-reference-date reference-date))
				  (list :reference-date preserved-reference-date)))))
      (unless (null change-plist)
	(lexpr-send self :change-properties nil change-plist)))))

(defwhopper (:close nfs-data-stream-mixin) (&optional abort-p)
  (catch-error-restart (abort "Abort PRESERVE-DATES of ~A" truename)
    (with-aborts-enabled (si:close-open-stream unwind-protect)
      (stream-preserve-dates self)))
  (continue-whopper abort-p)
  (when fhandle
    (deallocate-resource 'nfs-fhandle fhandle)
    (setq fhandle nil))
  (when dir-fhandle
    (deallocate-resource 'nfs-fhandle dir-fhandle)
    (setq dir-fhandle nil)))

(defflavor nfs-input-data-stream-mixin
	(input-transfer-size)
	()
  (:required-flavors nfs-data-stream-mixin si:buffered-input-stream)
  (:required-methods stream-read-data)
  (:required-init-keywords :input-transfer-size)
  (:required-instance-variables nbytes-per-element)
  (:initable-instance-variables input-transfer-size)
  :abstract-flavor
  )

(defmethod (:next-input-buffer nfs-input-data-stream-mixin) (&optional no-hang-p)
  (declare (values array start end end-of-record)
	   (ignore no-hang-p))
  (let* ((array nil))
    (unwind-protect
	(progn
	  (setq array (stream-read-data self buffer-pointer
					(floor input-transfer-size nbytes-per-element)))
	  (let ((len (fill-pointer array)))
	    (incf buffer-pointer len)
	    (if (zerop len)
		(if (variable-boundp si:stream-input-limit)
		    (values nil si:stream-input-limit si:stream-input-limit t)
		  (values nil 0 0 t))
	      (values (prog1 array (setq array nil)) 0 len nil))))
      (when array (send self :discard-input-buffer array)))))

(defmethod (:discard-input-buffer nfs-input-data-stream-mixin) (array)
  (deallocate-resource 'nfs-card8-data array))

(defparameter *n-read-ahead* 8)

(defflavor nfs-read-ahead-mixin
	((read-ahead t)
	 (read-ahead-limit nil)
	 (read-ahead-queue nil)
	 (n-read-ahead *n-read-ahead*))
	()
  (:required-flavors nfs-input-data-stream-mixin)
  (:required-methods stream-start-read-ahead stream-finish-read-ahead stream-abort-read-ahead)
  (:initable-instance-variables read-ahead)
  :abstract-flavor)

(defgeneric stream-close-read-ahead
	    (nfs-read-ahead-mixin
	      &optional abort-p)
  )

(defmethod (stream-close-read-ahead nfs-read-ahead-mixin) (&optional abort-p)
  (declare (ignore abort-p))
  (loop for element = (pop read-ahead-queue)
	while element
	for (future offset nil) = element
	initially (progn offset)
	do (stream-abort-read-ahead self future)))

(defgeneric stream-disable-read-ahead
	    (nfs-read-ahead-mixin
	      &optional abort-p)
  )

(defmethod (stream-disable-read-ahead nfs-read-ahead-mixin) (&optional abort-p)
  (stream-close-read-ahead self abort-p)
  (setq read-ahead nil))

(defgeneric stream-open-read-ahead
	    (nfs-read-ahead-mixin
	      start limit)
  )

(defmethod (stream-open-read-ahead nfs-read-ahead-mixin) (start limit)
  (when read-ahead
    (stream-close-read-ahead self t)
    (setq read-ahead-limit limit)
    (loop with count = input-transfer-size
	  repeat n-read-ahead
	  for offset first start then (+ offset count)
	  while (or (null read-ahead-limit) (< offset read-ahead-limit))
	  for future = (stream-start-read-ahead self offset count)
	  do (setq read-ahead-queue
		   (nconc read-ahead-queue
			  (ncons (list future offset count)))))))

(defwhopper (stream-read-data nfs-read-ahead-mixin) (offset count)
  (declare (values array))
  (if (and read-ahead read-ahead-queue)
      (let (fut off cnt)
	(unwind-protect
	    (progn
	      ;; Pop off a future
	      (sys:desetq (fut off cnt) (pop read-ahead-queue))
	      (cond ((and (= offset off) (= count cnt))
		     ;; Add a new future
		     (let* ((last (first (last read-ahead-queue)))
			    (last-offset (or (second last) off))
			    (last-count (or (third last) cnt))
			    (offset (+ last-offset last-count)))
		       (when (or (null read-ahead-limit) (< offset read-ahead-limit))
			 (let* ((count last-count)
				(future (stream-start-read-ahead self offset count)))
			   (setq read-ahead-queue
				 (nconc read-ahead-queue
					(ncons (list future offset count)))))))
		     ;; And finish the popped off future
		     (or (stream-finish-read-ahead self (prog1 fut (setq fut nil)) nil)
			 (continue-whopper offset count)))
		    (t
		     (stream-abort-read-ahead self (prog1 fut (setq fut nil)))
		     (stream-open-read-ahead
		       self
		       (+ offset count)
		       (* (send self :length) nbytes-per-element))
		     (continue-whopper offset count))))
	  (when fut (stream-abort-read-ahead self (prog1 fut (setq fut nil))))))
    (continue-whopper offset count)))

(defmethod (:close nfs-read-ahead-mixin :before) (&optional abort-p)
  (stream-disable-read-ahead self abort-p))

(defflavor nfs-sequential-read-ahead-mixin
	()
	(nfs-read-ahead-mixin)
  :abstract-flavor)

(defmethod (:init nfs-sequential-read-ahead-mixin :after) (ignore)
  (stream-open-read-ahead
    self
    (* buffer-pointer nbytes-per-element)
    (* (send self :length) nbytes-per-element)))

(defmethod (:set-buffer-pointer nfs-sequential-read-ahead-mixin :after) (new-pointer)
  (if (zerop new-pointer)
      (stream-open-read-ahead
	self
	(* buffer-pointer nbytes-per-element)
	(* (send self :length) nbytes-per-element))
    (stream-disable-read-ahead self t)))

(defflavor nfs-direct-access-read-ahead-mixin
	()
	(nfs-read-ahead-mixin)
  :abstract-flavor)

(defmethod (:read-bytes nfs-direct-access-read-ahead-mixin :after) (nbytes &optional filepos)
  (declare (ignore filepos))
  (let* ((start (* buffer-pointer nbytes-per-element))
	 (limit (+ start (* nbytes nbytes-per-element))))
    (stream-open-read-ahead self start limit)))

(defflavor nfs-output-data-stream-mixin
	(output-transfer-size
	 (output-temp-pathname nil))
	()
  (:required-flavors nfs-data-stream-mixin si:buffered-output-stream
		     si:output-pointer-remembering-mixin)
  (:required-methods
   stream-preserve-dates
   stream-update-fhandle-and-plist
   stream-write-data
   :read-pointer)
  (:required-init-keywords :output-transfer-size)
  (:required-instance-variables nbytes-per-element)
  (:initable-instance-variables output-transfer-size output-temp-pathname)
  :abstract-flavor
  )

(defmethod (:length nfs-output-data-stream-mixin) ()
  (if (numberp length)
      (let ((pointer (send self :read-pointer)))
	(if (numberp pointer) (max length pointer) length))
    length))

(defmethod (:init nfs-output-data-stream-mixin :after) (ignore)
  (setq si:output-pointer-base buffer-pointer))

(defun-in-flavor (write-portion nfs-output-data-stream-mixin)
		 (array start end offset)
  (let ((portion nil)
	(portion-size (- end start)))
    (unwind-protect
	(progn
	  (setq portion (send self :new-output-buffer))
	  (copy-array-portion array start end portion 0 portion-size)
	  (setf (fill-pointer portion) portion-size)
	  (stream-write-data self (prog1 portion (setq portion nil)) offset t))
      (when portion (send self :discard-output-buffer portion)))))

(defun-in-flavor (send-output-buffer-in-portions nfs-output-data-stream-mixin) (array end)
  (loop with portion-start = 0
	until ( portion-start end)
	for portion-size = (min (- end portion-start) 
				(floor output-transfer-size nbytes-per-element))
	for portion-end = (+ portion-start portion-size)
	do (write-portion array portion-start portion-end buffer-pointer)
	   (incf buffer-pointer portion-size)
	   (when (and length (> buffer-pointer length)) (setf length buffer-pointer))
	   (setf portion-start portion-end)))

(defmethod (:send-output-buffer nfs-output-data-stream-mixin) (array end end-of-record)
  (declare (ignore end-of-record))
  (setf (fill-pointer array) end)
  (cond ((> end (floor output-transfer-size nbytes-per-element))
	 (send-output-buffer-in-portions array end)
	 (send self :discard-output-buffer array))
	(t
	 (stream-write-data self array buffer-pointer t)
	 (incf buffer-pointer end)
	 (when (and length (> buffer-pointer length)) (setf length buffer-pointer)))))

(defmethod (:new-output-buffer nfs-output-data-stream-mixin) ()
  (declare (values array start end))
  (values (allocate-resource 'nfs-card8-data) 0 output-transfer-size))

(defmethod (:discard-output-buffer nfs-output-data-stream-mixin) (array)
  (deallocate-resource 'nfs-card8-data array))

(defparameter *n-write-behind* 8)

(defflavor nfs-write-behind-mixin
	((write-behind t)
	 (write-behind-queue nil)
	 (n-write-behind *n-write-behind*))
	()
  (:required-flavors nfs-output-data-stream-mixin)
  (:required-methods
   stream-start-write-behind
   stream-finish-write-behind
   stream-abort-write-behind)
  (:initable-instance-variables write-behind)
  :abstract-flavor)

(defgeneric stream-close-write-behind
	    (nfs-write-behind-mixin
	      &optional abort-p)
  )

(defmethod (stream-close-write-behind nfs-write-behind-mixin) (&optional abort-p)
  (loop for element = (pop write-behind-queue)
	while element
	for (future array offset) = element
	if abort-p do (stream-abort-write-behind self future)
	else do (stream-finish-write-behind self future array offset)
	do (deallocate-resource 'nfs-card8-data array)))

(defgeneric stream-disable-write-behind
	    (nfs-write-behind-mixin
	      &optional abort-p)
  )

(defmethod (stream-disable-write-behind nfs-write-behind-mixin) (&optional abort-p)
  (when write-behind
    (stream-close-write-behind self abort-p)
    (setq write-behind nil)))

(defwhopper (stream-write-data nfs-write-behind-mixin) (array offset deallocate-p)
  (if (and write-behind deallocate-p)
      (let (fut arr off)
	(unwind-protect
	    (progn
	      ;; Pop off a future if we should
	      (when ( (length write-behind-queue) n-write-behind)
		(sys:desetq (fut arr off) (pop write-behind-queue)))
	      ;; Add a new future
	      (setq write-behind-queue
		    (nconc write-behind-queue
			   (ncons (list (stream-start-write-behind self array offset)
					array offset))))
	      ;; And finish the popped future if there is one
	      (when fut
		(stream-finish-write-behind self fut arr off)
		(setq fut nil)
		(deallocate-resource 'nfs-card8-data (prog1 arr (setq arr nil))))
	      :write-behind)
	  (when fut (stream-abort-write-behind self fut))
	  (when arr (deallocate-resource 'nfs-card8-data arr))))
    (continue-whopper array offset deallocate-p)))

(defmethod (:finish nfs-write-behind-mixin :before) ()
  (send self :force-output)
  (stream-close-write-behind self))

(defmethod (:close nfs-write-behind-mixin :before) (&optional abort-p)
  (unless abort-p (send self :force-output))
  (stream-close-write-behind self abort-p))

(defflavor nfs-bidirectional-data-stream-mixin
	()
	()
  (:required-flavors nfs-input-data-stream-mixin nfs-output-data-stream-mixin)
  :abstract-flavor
  )

(defmethod (:new-output-buffer nfs-bidirectional-data-stream-mixin :before) ()
  (unless (null si:stream-input-buffer)
    (let ((pointer (send self :read-pointer)))
      (send self :discard-current-input-buffer)
      (send self :set-buffer-pointer pointer))))

;;; The stream-close-finish methods

(defgeneric stream-close-finish (nfs-stream open-mode)
  "Handle STREAM-CLOSE-FINISH cases for CLOSEs"
  (:method-combination :case))

(defmethod (stream-close-finish nfs-output-data-stream-mixin :create) ()
  )

(defmethod (stream-close-finish nfs-output-data-stream-mixin :rename) ()
  "Renames the old file to a unique name in the same directory."
  (declare (values truename-of-old-file))
  (multiple-value-bind (old-name-of-old-file new-name-of-old-file)
      ;; First rename the old file
      (loop for counter upfrom 1
	    for possibility =
		(fap-close-finish-rename-pathname si:file-access-path truename counter)
	    thereis
	      (condition-case ()
		   (progn
		     (fap-rename-internal
		       si:file-access-path dir-fhandle truename
		       (fap-nfs-filename-string-for-host si:file-access-path truename)
		       dir-fhandle possibility
		       (fap-nfs-filename-string-for-host si:file-access-path possibility))
		     (values truename possibility))
		 (fs:file-already-exists nil)))
    (declare (ignore old-name-of-old-file))
    ;; Now put the temp file in the place of it
    (fap-rename-internal
      si:file-access-path dir-fhandle output-temp-pathname
      (fap-nfs-filename-string-for-host si:file-access-path output-temp-pathname)
      dir-fhandle truename
      (fap-nfs-filename-string-for-host si:file-access-path truename))
    ;; Finally return the new pathname of the old version
    new-name-of-old-file))

(defmethod (stream-close-finish nfs-output-data-stream-mixin :rename-and-delete) ()
  (condition-case (err)
       (let ((to-delete (send self :rename))) 
	 (fap-delete-internal
	   si:file-access-path 
	   dir-fhandle to-delete
	   (fap-nfs-filename-string-for-host si:file-access-path to-delete)))
     (fs:file-operation-failure nil)))

(defmethod (stream-close-finish nfs-output-data-stream-mixin :supersede) ()
  ;; First make sure there's nothing there
  (condition-case ()
       (fap-delete-internal
	 si:file-access-path
	 dir-fhandle truename
	 (fap-nfs-filename-string-for-host si:file-access-path truename))
     (fs:file-not-found nil))
  ;; Now put the temp file in the place of it
  (fap-rename-internal
    si:file-access-path
    dir-fhandle output-temp-pathname
    (fap-nfs-filename-string-for-host si:file-access-path output-temp-pathname)
    dir-fhandle truename (fap-nfs-filename-string-for-host si:file-access-path truename)))

(defparameter *default-nfs-generation-retention-count* 5)

(defmethod (stream-close-finish nfs-output-data-stream-mixin :new-version) ()
  (prog1 
    (stream-close-finish self (if (numberp (send truename :version)) :supersede :rename))
    (fap-delete-excess-versions
      si:file-access-path truename
      (let ((string (send (send si:file-access-path :host)
			  :user-get :nfs-generation-retention-count)))
	(if string
	    (parse-integer string :junk-allowed t)
	  *default-nfs-generation-retention-count*)))))

(defmethod (stream-close-finish nfs-output-data-stream-mixin :overwrite) ()
  )

(defmethod (stream-close-finish nfs-output-data-stream-mixin :truncate) ()
  )

(defmethod (stream-close-finish nfs-output-data-stream-mixin :append) ()
  )

(defmethod (:finish nfs-output-data-stream-mixin) ()
  (with-dir-fhandle-cache-validity-checking-inhibited
    (si:file-access-path (send truename :directory-pathname-as-file))
    (stream-close-finish self open-mode)
    ;; Do preserve-dates by setting them back now
    (stream-preserve-dates self)
    ;; Update the fhandle and plist
    (stream-update-fhandle-and-plist self)
    ;; The stream is now in overwrite mode
    (setf open-mode :overwrite)))

(defgeneric stream-delete-output-temp
	    (nfs-output-data-stream-mixin
	      &optional (errorp t))
  )

(defmethod (stream-delete-output-temp nfs-output-data-stream-mixin) (&optional (errorp t))
  (condition-case-if (not errorp) (error)
       (catch-error-restart (abort "Abort DELETE of ~A" output-temp-pathname)
	 (with-aborts-enabled (si:close-open-stream unwind-protect)
	   (error-restart (error "Retry DELETE of ~A" output-temp-pathname)
	     (fap-delete-internal
	       si:file-access-path
	       dir-fhandle output-temp-pathname
	       (fap-nfs-filename-string-for-host si:file-access-path output-temp-pathname))
	     t)))
     (fs:file-operation-failure error)))

;;; The stream-close-abort methods

(defgeneric stream-close-abort (nfs-stream open-mode)
  "Handle STREAM-CLOSE-ABORT cases for CLOSEs"
  (:method-combination :case))

(defmethod (stream-close-abort nfs-output-data-stream-mixin :create) ()
  (condition-case (error)
       (catch-error-restart (abort "Abort DELETE of ~A" truename)
	 (with-aborts-enabled (si:close-open-stream unwind-protect)
	   (error-restart (error "Retry DELETE of ~A" truename)
	     (fap-delete-internal
	       si:file-access-path
	       dir-fhandle truename
	       (fap-nfs-filename-string-for-host si:file-access-path truename))
	     t)))
     (fs:file-operation-failure error)))

(defmethod (stream-close-abort nfs-output-data-stream-mixin :new-version) ()
  (stream-delete-output-temp self nil))

(defmethod (stream-close-abort nfs-output-data-stream-mixin :rename) ()
  (stream-delete-output-temp self nil))

(defmethod (stream-close-abort nfs-output-data-stream-mixin :rename-and-delete) ()
  (stream-delete-output-temp self nil))

(defmethod (stream-close-abort nfs-output-data-stream-mixin :overwrite) ()
  )

(defmethod (stream-close-abort nfs-output-data-stream-mixin :truncate) ()
  )

(defmethod (stream-close-abort nfs-output-data-stream-mixin :append) ()
  )

(defmethod (stream-close-abort nfs-output-data-stream-mixin :supersede) ()
  (stream-delete-output-temp self nil))

(defwhopper (:close nfs-output-data-stream-mixin) (&optional abort-p)
  (when (eq status :open)
    (if abort-p
	(with-dir-fhandle-cache-validity-checking-inhibited
	  (si:file-access-path (send truename :directory-pathname-as-file))
	  (stream-close-abort self open-mode))
      (send self :finish)))
  (continue-whopper abort-p))

(compile-flavor-methods nfs-output-data-stream-mixin)

(defflavor nfs-wide-binary-data-stream-mixin
	((nbytes-per-element 2))
	()
  :abstract-flavor)

(defflavor nfs-wide-binary-input-data-stream-mixin
	()
	(nfs-wide-binary-data-stream-mixin)
  :abstract-flavor)

(defwhopper (stream-read-data nfs-wide-binary-input-data-stream-mixin) (offset count)
  (let ((card8-data nil)
	(card16-data nil))
    (unwind-protect
	(progn
	  (setq card8-data (continue-whopper (* offset nbytes-per-element)
					     (* count nbytes-per-element)))
	  (when card8-data
	    (setq card16-data (allocate-resource 'nfs-card16-data))
	    (bytes-to-wide-bytes card8-data card16-data)
	    (prog1 card16-data (setq card16-data nil))))
      (when card8-data (deallocate-resource 'nfs-card8-data card8-data))
      (when card16-data (deallocate-resource 'nfs-card8-data card16-data)))))

(defmethod (:discard-input-buffer nfs-wide-binary-input-data-stream-mixin) (array)
  (deallocate-resource 'nfs-card16-data array))

(defflavor nfs-wide-binary-output-data-stream-mixin
	()
	(nfs-wide-binary-data-stream-mixin)
  (:required-instance-variables output-transfer-size)
  :abstract-flavor)

(defwhopper (stream-write-data nfs-wide-binary-output-data-stream-mixin)
	    (array offset deallocate-p)
  (let ((card8-data nil))
    (unwind-protect
	(progn
	  (setq card8-data (allocate-resource 'nfs-card8-data))
	  (wide-bytes-to-bytes array card8-data)
	  (continue-whopper (prog1 card8-data (setq card8-data nil))
			    (* offset nbytes-per-element)
			    t))
      (when card8-data (deallocate-resource 'nfs-card8-data card8-data))))
  (when deallocate-p (deallocate-resource 'nfs-card16-data array)))

(defmethod (:new-output-buffer nfs-wide-binary-output-data-stream-mixin) ()
  (declare (values array start end))
  (values (allocate-resource 'nfs-card16-data)
	  0
	  (floor output-transfer-size nbytes-per-element)))

(defmethod (:discard-output-buffer nfs-wide-binary-output-data-stream-mixin) (array)
  (deallocate-resource 'nfs-card16-data array))

(defflavor nfs-binary-data-stream-mixin
	((nbytes-per-element 1))
	()
  :abstract-flavor)

(defflavor nfs-binary-input-data-stream-mixin
	()
	(nfs-binary-data-stream-mixin)
  :abstract-flavor)

(defflavor nfs-binary-output-data-stream-mixin
	()
	(nfs-binary-data-stream-mixin)
  (:required-instance-variables output-transfer-size)
  :abstract-flavor)

(defflavor nfs-character-data-stream-mixin
	((nbytes-per-element 1))
	()
  :abstract-flavor)

(defflavor nfs-character-input-data-stream-mixin
	()
	(nfs-character-data-stream-mixin)
  :abstract-flavor)

(defwhopper (stream-read-data nfs-character-input-data-stream-mixin) (offset count)
  (let ((card8-data (continue-whopper offset count)))
    (and card8-data (allocate-resource 'nfs-displaced-char-data card8-data))))

(defwhopper (:discard-input-buffer nfs-character-input-data-stream-mixin) (array)
  (let ((card8-data (sys:array-indirect-pointer array)))
    (deallocate-resource 'nfs-displaced-char-data array)
    (continue-whopper card8-data)))

(defflavor nfs-character-output-data-stream-mixin
	()
	(nfs-character-data-stream-mixin)
  (:required-instance-variables output-transfer-size)
  :abstract-flavor)

(defwhopper (stream-write-data nfs-character-output-data-stream-mixin)
	    (array offset deallocate-p)
  (let ((card8-data (sys:array-indirect-pointer array)))
    (setf (fill-pointer card8-data) (fill-pointer array))
    (when deallocate-p (deallocate-resource 'nfs-displaced-char-data array))
    (continue-whopper card8-data offset deallocate-p)))

(defwhopper (:new-output-buffer nfs-character-output-data-stream-mixin) ()
  (declare (values array start end))
  (multiple-value-bind (card8-data start end)
      (continue-whopper)
    (values (and card8-data (allocate-resource 'nfs-displaced-char-data card8-data))
	    start end)))

(defwhopper (:discard-output-buffer nfs-character-output-data-stream-mixin) (array)
  (let ((card8-data (sys:array-indirect-pointer array)))
    (deallocate-resource 'nfs-displaced-char-data array)
    (continue-whopper card8-data)))

(defflavor nfs-unix-translating-input-data-stream-mixin
	()
	()
  :abstract-flavor)

(defwhopper (stream-read-data nfs-unix-translating-input-data-stream-mixin)
	    (offset count)
  (let ((untranslated nil)
	(translated nil))
    (unwind-protect
	(progn
	  (setq untranslated (continue-whopper offset count))
	  (when untranslated
	    (setq translated (allocate-resource 'nfs-card8-data))
	    (let ((untranslated untranslated)
		  (translated translated)
		  (table *unix-translation-table*))
	      (declare (sys:array-register untranslated translated table))
	      (setf (fill-pointer translated) (fill-pointer untranslated))
	      (dotimes (i (fill-pointer untranslated))
		(setf (aref translated i) (aref table (aref untranslated i)))))
	    (prog1 translated (setq translated nil))))
      (when translated (deallocate-resource 'nfs-card8-data translated))
      (when untranslated (deallocate-resource 'nfs-card8-data untranslated)))))

(defflavor nfs-unix-translating-output-data-stream-mixin
	()
	()
  :abstract-flavor)

(defwhopper (stream-write-data nfs-unix-translating-output-data-stream-mixin)
	    (array offset deallocate-p)
  (let ((translated nil))
    (unwind-protect
	(progn
	  (setq translated (allocate-resource 'nfs-card8-data))
	  (let ((translated translated)
		(untranslated array)
		(table *unix-translation-table*))
	    (declare (sys:array-register untranslated table translated)) 
	    (setf (fill-pointer translated) (fill-pointer untranslated))
	    (dotimes (i (fill-pointer untranslated))
	      (setf (aref translated i) (aref table (aref untranslated i)))))
	  (continue-whopper (prog1 translated (setq translated nil)) offset t))
      (when translated (deallocate-resource 'nfs-card8-data translated))))
  (when deallocate-p (deallocate-resource 'nfs-card8-data array)))

(defflavor nfs-ascii-translating-input-data-stream-mixin
	((return-seen nil)
	 (untranslated-offset 0))
	()
  :abstract-flavor)

(defwhopper (:set-buffer-pointer nfs-ascii-translating-input-data-stream-mixin) (position)
  (unless (zerop position)
    (error "You can't ~S an ASCII translating stream." :set-buffer-pointer))
  (setq untranslated-offset 0)
  (continue-whopper position))

(defwhopper (stream-read-data nfs-ascii-translating-input-data-stream-mixin) (offset count)
  (declare (ignore offset))
  (let ((untranslated nil)
	(translated nil)
	(ti 0))
    (unwind-protect
	(progn
	  (setq untranslated (continue-whopper untranslated-offset count))
	  (when untranslated
	    (incf untranslated-offset (fill-pointer untranslated))
	    (setq translated (allocate-resource 'nfs-card8-data))
	    (let ((untranslated untranslated)
		  (translated translated)
		  (table *ascii-translation-table*))
	      (declare (sys:array-register untranslated translated table))
	      (dotimes (i (fill-pointer untranslated))
		(let ((c (aref untranslated i)))
		  (cond (return-seen
			 (unless (= c #o012)
			   (setf (aref translated (prog1 ti (incf ti))) (aref table c)))
			 (unless (= c #o015) (setq return-seen nil)))
			(t
			 (setf (aref translated (prog1 ti (incf ti))) (aref table c))
			 (when (= c #o015) (setq return-seen t)))))))
	    (setf (fill-pointer translated) ti)
	    (prog1 translated (setq translated nil))))
      (when translated (deallocate-resource 'nfs-card8-data translated))
      (when untranslated (deallocate-resource 'nfs-card8-data untranslated)))))

(defflavor nfs-ascii-translating-output-data-stream-mixin
	((translated-offset 0))
	()
  :abstract-flavor)

(defwhopper (:set-buffer-pointer nfs-ascii-translating-output-data-stream-mixin) (position)
  (unless (zerop position)
    (error "You can't ~S an ASCII translating stream." :set-buffer-pointer))
  (setq translated-offset 0)
  (continue-whopper position))

(defwhopper (stream-write-data nfs-ascii-translating-output-data-stream-mixin)
	    (array offset deallocate-p)
  (declare (ignore offset))
  (let ((translated nil)
	(ti 0))
    (unwind-protect
	(progn
	  (setq translated (allocate-resource 'nfs-card8-data))
	  (let ((translated translated)
		(untranslated array)
		(table *unix-translation-table*))
	    (declare (sys:array-register untranslated table translated))
	    (dotimes (i (fill-pointer untranslated))
	      (let ((c (aref untranslated i)))
		(setf (aref translated (prog1 ti (incf ti))) (aref table c))
		(when (= c (char-code #\cr))
		  (setf (aref translated (prog1 ti (incf ti))) #o012)))))
	  (setf (fill-pointer translated) ti)
	  (continue-whopper (prog1 translated (setq translated nil))
			    translated-offset
			    t)
	  (incf translated-offset (fill-pointer translated)))
      (when translated (deallocate-resource 'nfs-card8-data translated))))
  (when deallocate-p (deallocate-resource 'nfs-card8-data array)))

(defwhopper (:new-output-buffer nfs-ascii-translating-output-data-stream-mixin) ()
  (declare (values array start end))
  (multiple-value-bind (array start end)
      (continue-whopper)
    (values array start (+ start (floor (- end start) 2)))))

