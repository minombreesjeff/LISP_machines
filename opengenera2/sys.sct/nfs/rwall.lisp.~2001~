;;; -*- Syntax: Common-lisp; Base: 10; Mode: LISP; Package: NFS; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(define-remote-module
  rwall
  (:number 100008)
  (:version 1)
  (:process nil)
  (:server :lisp)
  (:client :lisp)
  (:allow-untrusted-access t)
  )

(define-remote-entry rwallproc-null rwall
  (:number 0)
  (:arguments)
  (:values)
  (:whostate "Rwall Null")
  (:lisp (:server (rpc-values))))

;;; This is gross, but if you forget to NFS dismount a file system, forever
;;; more you get shutdown messages from a host whenever it shuts down.  This
;;; can be annoying if you looked at a random host through NFS a year ago but
;;; didn't dismount the file system and instead just rebooted.  If we don't do
;;; this, every time the host does a shutdown we get a shutdown message.
(defparameter *ignore-shutdown-messages-if-no-file-access-path* t)
(defparameter *substrings-indicative-of-shutdown-messages* '("Shutdown" "..."))
	      
(defun rwallproc-wall-server (string)
  (unless (and *ignore-shutdown-messages-if-no-file-access-path*
	       (null (send (remote-host  *default-transport-agent*)
			   :file-access-path nil nil t))
	       (loop for key in *substrings-indicative-of-shutdown-messages*
		     thereis (string-search key string)))
    (let* ((trimmed-string (string-trim '(#\space #\return) (unix-to-string string)))
	   (standard-leadin "Broadcast Message from ")
	   (string 
	     (if (and (> (string-length trimmed-string) (string-length standard-leadin))
		      (string-equal standard-leadin trimmed-string
				    :end2 (string-length standard-leadin)))
		 (format nil "~~A~" trimmed-string)
	       (format nil "~~A~A:~%~A~"
		       standard-leadin
		       (remote-host  *default-transport-agent*)
		       trimmed-string))))
      (process-run-function "RWALL Notification"
	#'(lambda (string) (tv:notify nil "~A" string))
	string))))

(define-remote-entry rwallproc-wall rwall
  (:number 2)
  (:arguments (message string))
  (:values)
  (:whostate "Rwall Wall")
  (:lisp (:server (rwallproc-wall-server message) (rpc-values))))
