;;; -*- Mode: LISP; Syntax: Common-lisp; Package: RPC; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defflavor authentication-mixin
	((unix-name-lookup-access-path nil)
	 (local-host-unix-name-lookup-access-path nil)
	 (trusted-p t)
	 (user nil)
	 (username nil)
	 (server-call-credential nil)
	 (server-call-verifier nil))
	()
  (:required-flavors std-transport-agent)
  (:initable-instance-variables trusted-p)
  (:readable-instance-variables user username)
  (:conc-name authentication-)
  (:abstract-flavor))

(defun-in-flavor (unix-name-lookup-access-path authentication-mixin) ()
  (or unix-name-lookup-access-path
      (prog1
	(setq unix-name-lookup-access-path
	      (host-unix-name-lookup-access-path (or (remote-host self) net:*local-host*)))
	(unix-name-lookup-access-path-note-dependent unix-name-lookup-access-path self))))

(defmethod (dependent-note-unix-name-lookup-access-path-reset authentication-mixin) (path)
  (when (eq path unix-name-lookup-access-path)
    (setq unix-name-lookup-access-path nil)
    (unix-name-lookup-access-path-note-dependent path self t)))

(defun-in-flavor (local-host-unix-name-lookup-access-path authentication-mixin) ()
  (or local-host-unix-name-lookup-access-path
      (setq local-host-unix-name-lookup-access-path
	    (host-unix-name-lookup-access-path net:*local-host*))))

(defgeneric authentication-reset (authentication-mixin)
  (:method-combination :progn))

(defmethod (authentication-reset authentication-mixin) ()
  (setq unix-name-lookup-access-path nil)
  (setq local-host-unix-name-lookup-access-path nil)
  (setq user nil)
  (setq username nil))

(defmethod (authentication-initialize authentication-mixin)
	   (&optional new-username new-password)
  (declare (values username password))
  (setq user si:*user*)
  (setq username new-username)
  (values new-username new-password))

(defgeneric authentication-describe (authentication-mixin stream)
  (:method-combination :progn))

(defmethod (:close authentication-mixin :after) (&optional ignore)
  (when unix-name-lookup-access-path
    (forget-transport-agent unix-name-lookup-access-path self))
  (when local-host-unix-name-lookup-access-path
    (forget-transport-agent local-host-unix-name-lookup-access-path self))
  (authentication-reset self))

(defun reset-all-authenticating-transport-agents ()
  (loop for agent in *all-transport-agents*
	when (typep agent 'authentication-mixin)
	  do (authentication-reset agent)))

(defmethod (allow-untrusted-access authentication-mixin)
	   (module-number module-version entry-number)
  (declare (ignore module-version entry-number))
  (let ((module (gethash module-number *remote-module-table*)))
    (and module (remote-module-allow-untrusted-access module))))

;;; Be careful about what access we allow untrusted hosts
(defwhopper (agent-run-remote-call-handler authentication-mixin)
	    (handler transaction-id xdr-block xdr-pointer xdr-limit
		     module-number module-version entry-number
		     credential verifier credential-approved)
  (cond ((or trusted-p
	     (if credential
		 credential-approved
	       (allow-untrusted-access self module-number module-version entry-number)))
	 (letf ((server-call-credential credential)
		(server-call-verifier verifier))
	   (continue-whopper handler transaction-id xdr-block xdr-pointer xdr-limit
			     module-number module-version entry-number
			     credential verifier credential-approved)))
	(t
	 (report-auth-error self transaction-id 5)	;auth-tooweak
	 (release-xdr-block self xdr-block))))

(defmethod (:host authentication-mixin) ()
  (or (remote-host self) net:*local-host*))

(defmethod (:no-passwords authentication-mixin) ()
  nil)

(defmethod (:allow-anonymous-logins authentication-mixin) ()
  t)

(defmethod (:prompt-for-user-and-password authentication-mixin)
	   (host-user condition print-error-message need-new-user need-password)
  (fs:prompt-for-user-and-password
    (send self :host) host-user condition print-error-message
    need-new-user need-password
    (send self :allow-anonymous-logins)
    (send self :no-passwords)))

(defmethod (:host-user-id authentication-mixin) ()
  (or (and (eq user si:*user*)
	   username)
      (and (remote-host self)
	   (send si:*user* :host-user-id (remote-host self)))
      (string si:*user*)))

(defmethod (:set-host-user-id authentication-mixin) (new-user-id &optional new-password)
  (declare (ignore new-password))
  (authentication-reset self)
  (setq user si:*user*)
  (setq username new-user-id))

(defconstant
  *des-s-array*
  '#.(funcall
       #'(lambda (functions)
	   (loop with array = (make-array 512 :element-type '(unsigned-byte 4))
		 for s below 512 by 64
		 for function in functions
		 do (loop for i below 64
			  do (setf (aref array (+ s i))
				   (nth (dpb (dpb i (byte 1 4) (ldb (byte 4 1) i))
					     (byte 5 0)
					     i)
					function)))
		 finally (return array)))
       '((;; S1
	  14 04 13 01 02 15 11 08 03 10 06 12 05 09 00 07
	  00 15 07 04 14 02 13 01 10 06 12 11 09 05 03 08
	  04 01 14 08 13 06 02 11 15 12 09 07 03 10 05 00
	  15 12 08 02 04 09 01 07 05 11 03 14 10 00 06 13)
	 (;; S2
	  15 01 08 14 06 11 03 04 09 07 02 13 12 00 05 10
	  03 13 04 07 15 02 08 14 12 00 01 10 06 09 11 05
	  00 14 07 11 10 04 13 01 05 08 12 06 09 03 02 15
	  13 08 10 01 03 15 04 02 11 06 07 12 00 05 14 09)
	 (;; S3
	  10 00 09 14 06 03 15 05 01 13 12 07 11 04 02 08
	  13 07 00 09 03 04 06 10 02 08 05 14 12 11 15 01
	  13 06 04 09 08 15 03 00 11 01 02 12 05 10 14 07
	  01 10 13 00 06 09 08 07 04 15 14 03 11 05 02 12)
	 (;; S4
	  07 13 14 03 00 06 09 10 01 02 08 05 11 12 04 15
	  13 08 11 05 06 15 00 03 04 07 02 12 01 10 14 09
	  10 06 09 00 12 11 07 13 15 01 03 14 05 02 08 04
	  03 15 00 06 10 01 13 08 09 04 05 11 12 07 02 14)
	 (;; S5
	  02 12 04 01 07 10 11 06 08 05 03 15 13 00 14 09
	  14 11 02 12 04 07 13 01 05 00 15 10 03 09 08 06
	  04 02 01 11 10 13 07 08 15 09 12 05 06 03 00 14
	  11 08 12 07 01 14 02 13 06 15 00 09 10 04 05 03)
	 (;; S6
	  12 01 10 15 09 02 06 08 00 13 03 04 14 07 05 11
	  10 15 04 02 07 12 09 05 06 01 13 14 00 11 03 08
	  09 14 15 05 02 08 12 03 07 00 04 10 01 13 11 06
	  04 03 02 12 09 05 15 10 11 14 01 07 06 00 08 13)
	 (;; S7
	  04 11 02 14 15 00 08 13 03 12 09 07 05 10 06 01
	  13 00 11 07 04 09 01 10 14 03 05 12 02 15 08 06
	  01 04 11 13 12 03 07 14 10 15 06 08 00 05 09 02
	  06 11 13 08 01 04 10 07 09 05 00 15 14 02 03 12)
	 (;; S8
	  13 02 08 04 06 15 11 01 10 09 03 14 05 00 12 07
	  01 15 13 08 10 03 07 04 12 05 06 11 00 14 09 02
	  07 11 04 01 09 12 14 02 00 06 10 13 15 03 05 08
	  02 01 14 07 04 10 08 13 15 12 09 00 03 05 06 11))))

(defmacro define-des-permutation (name &body value)
  `(progn
     (defconstant ,name ',value)
     (eval-when (compile)
       (compiler:file-declare ',name 'define-des-permutation ',value))))

(define-des-permutation *des-ip* 
  58 50 42 34 26 18 10  2
  60 52 44 36 28 20 12  4
  62 54 46 38 30 22 14  6
  64 56 48 40 32 24 16  8
  57 49 41 33 25 17  9  1
  59 51 43 35 27 19 11  3
  61 53 45 37 29 21 13  5
  63 55 47 39 31 23 15  7)

(define-des-permutation *des-ip-1*
  40  8 48 16 56 24 64 32
  39  7 47 15 55 23 63 31
  38  6 46 14 54 22 62 30
  37  5 45 13 53 21 61 29
  36  4 44 12 52 20 60 28
  35  3 43 11 51 19 59 27
  34  2 42 10 50 18 58 26
  33  1 41  9 49 17 57 25)

(define-des-permutation *des-p*
  16 07 20 21
  29 12 28 17
  01 15 23 26
  05 18 31 10
  02 08 24 14
  32 27 03 09
  19 13 30 06
  22 11 04 25)

(define-des-permutation *des-pc-1* 
  57 49 41 33 25 17 09
  01 58 50 42 34 26 18
  10 02 59 51 43 35 27
  19 11 03 60 52 44 36
  63 55 47 39 31 23 15
  07 62 54 46 38 30 22
  14 06 61 53 45 37 29
  21 13 05 28 20 12 04)

(define-des-permutation *des-pc-2*
  14 17 11 24 01 05
  03 28 15 06 21 10
  23 19 12 04 26 08
  16 07 27 20 13 02
  41 52 31 37 47 55
  30 40 51 45 33 48
  44 49 39 56 34 53
  46 42 50 36 29 32)

(define-des-permutation *des-e*
  32 01 02 03 04 05 
  04 05 06 07 08 09 
  08 09 10 11 12 13 
  12 13 14 15 16 17 
  16 17 18 19 20 21 
  20 21 22 23 24 25 
  24 25 26 27 28 29 
  28 29 30 31 32 01)

(defmacro des-permute ((permutation input-format output-format) source)
  (declare (zwei:indentation 0 4 1 1))
  (unless (listp source)
    (setq source `(values ,source)))
  (let* ((hackp (and (eq (car source) 'values) (every #'symbolp (cdr source))))
	 (input-words (if hackp
			  (cdr source)
			(loop for nil in input-format
			      collect (gensym))))
	 (output-words (make-list (length output-format) :initial-element 0))
	 (bits (or (compiler:file-declaration permutation 'define-des-permutation)
		   (and (boundp permutation) (symbol-value permutation)))))
    (if bits
	(loop for ibit in bits
	      for obit upfrom 1
	      do
	  (flet ((get-word-and-specifier (bit format)
		   (loop for f in format and b = bit then (- b f) and n from 0
			 when ( b f)
			   return (values n `(byte 1 ,(- f b))))))
	    (multiple-value-bind (input-word-number input-byte-specifier)
		(get-word-and-specifier ibit input-format)
	      (multiple-value-bind (output-word-number output-byte-specifier)
		  (get-word-and-specifier obit output-format)
		(setf (nth output-word-number output-words)
		      `(%logdpb
			 (%logldb
			   ,input-byte-specifier
			   ,(nth input-word-number input-words))
			 ,output-byte-specifier
			 ,(nth output-word-number output-words)))))))
      (error "Can't permute ~A" permutation))
    (if hackp
	`(values ,@output-words)
      `(multiple-value-bind ,input-words ,source
	 (values ,@output-words)))))

(defmacro des-xor (&body forms &environment env)
  (let* ((result nil)
	 (loc (locf result)))
    (loop for form in forms
	  do (loop do (setq form (macroexpand form env t))
		   if (nlistp form)
		     return (setq form (list form))
		   else if (eq (car form) 'values)
			  return (setq form (cdr form))
		   else if (eq (car form) 'multiple-value-bind)
			  do (setf (car loc) form)
			     (setq loc (locf (car (last form)))
				   form (car loc))
		   else return (setq form (list form)))
	  collect form into values
	  finally
	    (setf (car loc)
		  `(values
		     ,@(loop for value in (apply #'mapcar #'list values)
			     collect `(logxor ,@value)))))
    result))

(defmacro des-k (i)
  `(values ,@(loop for n below 8 collect `(aref k (+ ,i ,n)))))

(defmacro des-s (v &environment env)
  (let* ((result nil)
	 (loc (locf result))
	 (form v))
    (loop do (setq form (macroexpand form env t))
	  if (nlistp form)
	    do (error "Invalid argument form in expansion of DES-S:~%~S" form)
	  else if (and (eq (car form) 'values)
		       (= (length (cdr form)) 8))
		 return (setq form (cdr form))
	  else if (eq (car form) 'multiple-value-bind)
		 do (setf (car loc) form)
		    (setq loc (locf (car (last form)))
			  form (car loc))
	  else do (error "Invalid argument form in expansion of DES-S:~%~S" form))
    (setf (car loc)
	  `(values
	     ,@(loop for expression in form
		     for n from 0 by 64
		     collect `(aref s (+ ,expression ,n)))))
    result))

(defmacro with-des-environment ((key) &body body)
  `(let ((s *des-s-array*)
	 (k ,key))
     (declare (array-register s k))
     ,@body))

(defun des-make-key (l r)
  (let ((k (make-array 128 :element-type '(unsigned-byte 6))))
    (declare (array-register k))
    (multiple-value-bind (c d)
	(des-permute (*des-pc-1* (32 32) (28 28))
	  (values l r))
      (loop for s upfrom 0 by 8
	    for shift in '(1 1 2 2 2 2 2 2 1 2 2 2 2 2 2 1)
	    do (macrolet ((left-rotate-28 (word shift)
			    `(case ,shift
			       (1 (dpb ,word (byte 27 1) (ldb (byte 1 27) ,word)))
			       (2 (dpb ,word (byte 26 2) (ldb (byte 2 26) ,word))))))
		 (setf (values c d)
		       (values (left-rotate-28 c shift)
			       (left-rotate-28 d shift))))
	       (multiple-value-bind (a b c d e f g h)
		   (des-permute (*des-pc-2* (28 28) (6 6 6 6 6 6 6 6))
		     (values c d))
		 (setf (aref k (+ s 0)) a)
		 (setf (aref k (+ s 1)) b)
		 (setf (aref k (+ s 2)) c)
		 (setf (aref k (+ s 3)) d)
		 (setf (aref k (+ s 4)) e)
		 (setf (aref k (+ s 5)) f)
		 (setf (aref k (+ s 6)) g)
		 (setf (aref k (+ s 7)) h))))
    k))

(defun unix-crypt-encipher (l r k e)
  (macrolet ((e-bit-select (e r)
	       `(lsh ,r (- (pop ,e) 32)))
	     (e-bit-select-word (e r)
	       `(%logdpbs
		  (e-bit-select ,e ,r)
		  (byte 1 5)
		  (e-bit-select ,e ,r)
		  (byte 1 4)
		  (e-bit-select ,e ,r)
		  (byte 1 3)
		  (e-bit-select ,e ,r)
		  (byte 1 2)
		  (e-bit-select ,e ,r)
		  (byte 1 1)
		  (e-bit-select ,e ,r)
		  (byte 1 0)
		  0)))
    (with-des-environment (k)
      (setf (values l r) (des-permute (*des-ip* (32 32) (32 32)) (values l r)))
      (loop for i from 0 to 120 by 8
	    for et = e
	    do (setf (values l r)
		     (values
		       r (des-xor
			   l 
			   (des-permute (*des-p* (4 4 4 4 4 4 4 4) (32))
			     (des-s
			       (des-xor
				 (des-k i)
				 (values
				   (e-bit-select-word et r)
				   (e-bit-select-word et r)
				   (e-bit-select-word et r)
				   (e-bit-select-word et r)
				   (e-bit-select-word et r)
				   (e-bit-select-word et r)
				   (e-bit-select-word et r)
				   (e-bit-select-word et r)))))))))
      (des-permute (*des-ip-1* (32 32) (32 32)) (values r l)))))

(defun unix-crypt-modified-e (salt)
  (loop with e = (copy-list *des-e*)
	for i below 2
	for code = (char-code
		     (if (<= (length salt) i)
			 (if (zerop (length salt)) #\A (aref salt 0))
		       (aref salt i)))
	when (> code (char-code #\Z))
	  do (decf code 6)
	when (> code (char-code #\9))
	  do (decf code 7)
	do (decf code (char-code #\.))
	   (loop for j below 6
		 when (ldb-test (byte 1 j) code)
		   do (rotatef (nth (+ (* 6 i) j) e)
			       (nth (+ (* 6 i) j 24) e)))
	finally (return e)))

(defun unix-crypt-password-key (password)
  (loop with x = 0
	for pp below 64 by 8
	for char being the array-elements of password
	do (setf (ldb (byte 7 (- 64 7 pp)) x) (char-code char))
	finally
	  (return
	    (des-make-key 
	      (%logdpb (ldb (byte 32 32) x) (byte 32 0) 0)
	      (%logdpb (ldb (byte 32  0) x) (byte 32 0) 0)))))

(defun unix-crypt-make-string (l r salt)
  (loop with string = (make-string 13)
	with x = (dpb l (byte 32 32) (dpb r (byte 32 0) 0))
	initially
	  (setf (aref string 0) (if (<= (length salt) 0) #\A (aref salt 0))
		(aref string 1) (if (<= (length salt) 1) (aref string 0) (aref salt 1)))
	for pp below 66 by 6
	for index upfrom 2 below 13
	for code =
	    (if (= pp 60)
		(dpb (ldb (byte 4 0) x) (byte 4 2) 0)
	      (ldb (byte 6 (- 64 6 pp)) x))
	do (incf code (char-code #\.))
	when (> code (char-code #\9))
	  do (incf code 7)
	when (> code (char-code #\Z))
	  do (incf code 6)
	do (setf (aref string index) (code-char code)) 
	finally (return string)))

(defun unix-crypt (password salt)
  (loop with e = (unix-crypt-modified-e salt)
	with k = (unix-crypt-password-key password)
	with l = 0
	with r = 0
	for i below 25 
	initially (progn i)
	do (multiple-value-setq (l r) (unix-crypt-encipher l r k e))
	finally (return (unix-crypt-make-string l r salt))))

(defvar *unix-authentication-allow-defaulting* nil)

(defparameter *unix-check-passwords-for-show* t)

(defvar *unix-authentication-use-logged-in-user* nil)

(defflavor unix-authentication-mixin
	((unix-call-credential nil))
	(authentication-mixin)
  (:required-flavors std-transport-agent)
  (:readable-instance-variables unix-call-credential)
  (:conc-name "AUTHENTICATION-")
  (:abstract-flavor))

(defmethod (:no-passwords unix-authentication-mixin) ()
  (not *unix-check-passwords-for-show*))

(defmethod (authentication-unix-call-credential unix-authentication-mixin :before) ()
  (unless (and unix-call-credential (eq user si:*user*))
    (unix-authentication-initialize self)))

(define-remote-type unix-call-credential-internal ()
  (:abbreviation-for
    `(structure
       (stamp integer-32)
       (machinename string)
       (uid integer-32)
       (gid integer-32)
       (gids (vector integer-32)))))

(defmethod (make-unix-call-credential unix-authentication-mixin)
	   (stamp machinename uid gid gids)
  (declare (values unix-call-credential))
  (xdr-register-save 
    (let* ((contents (vector stamp machinename uid gid (coerce gids 'vector)))
	   (size (* (macrolet ((credential-size (contents)
				 (remote-type-size-expression
				   'unix-call-credential-internal :lisp contents)))
		      (credential-size contents))
		    4))
	   (array
	     (make-array size
			 :element-type '(unsigned-byte 8)
			 :leader-length 3
			 :fill-pointer size
			 :named-structure-symbol 'unix-call-credential))
	   (xdr-agent self)
	   (xdr-pointer (%make-pointer-offset dtp-locative array
					      (si:array-data-offset array)))
	   (xdr-limit (%pointer-plus xdr-pointerD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") 0(ceiling size 4))))
      (setf (array-leader array 2) xdr-agent)
      (initialize-xdr-pointer)
      (macrolet ((credential-send (contents)
		   (remote-type-send 'unix-call-credential-internal :lisp contents)))
	(credential-send contents))
      (verify-xdr-pointer t)
      array)))

(defmethod (decode-unix-call-credential unix-authentication-mixin) (credential)
  (declare (values stamp machinename uid gid gids))
  (xdr-register-save 
    (let* ((xdr-agent (array-leader credential 2))
	   (xdr-pointer (%make-pointer-offset dtp-locative credential
					      (si:array-data-offset credential)))
	   (xdr-limit (%pointer-plus xdr-pointer
				     (ceiling (vector-length credential) 4))))
      (initialize-xdr-pointer)
      (destructuring-bind (stamp machinename uid gid gids)
	  (coerce (macrolet ((credential-receive ()
			       (remote-type-receive 'unix-call-credential-internal :lisp)))
		    (credential-receive))
		  'list)
	(verify-xdr-pointer t)
	(values stamp machinename uid gid (coerce gids 'list))))))

(defselect ((:property unix-call-credential named-structure-invoke))
  (:print-self (credential stream i-prindepth *print-escape*)
   i-prindepth
   (labels ((print-prefix (name)
	      (write-char #\Space stream)
	      (princ name stream)
	      (write-char #\= stream))
	    (print-object (name value)
	      (print-prefix name)
	      (prin1 value stream)))
     (printing-random-object (credential stream :typep)
       (condition-case (error)
	    (multiple-value-bind (stamp machinename uid gid gids)
		(decode-unix-call-credential (array-leader credential 2) credential)
	      (princ 'stamp stream)
	      (write-char #\= stream)
	      (prin1 stamp stream)
	      (print-object 'machinename machinename)
	      (print-object 'uid uid)
	      (print-object 'gid gid)
	      (print-object 'gids gids))
	  (error
	    (write-char #\! stream)
	    (prin1 (type-of error) stream)))))))

(defmethod (authentication-describe unix-authentication-mixin) (stream)
  (when unix-call-credential
    (format stream "~&~%The UNIX authentication used when making RPC requests of ~A is for~%  "
	    (remote-host self))
    (multiple-value-bind (stamp machinename uid gid gids)
	(decode-unix-call-credential self unix-call-credential)
      (format stream "~<~%  ~0,72:;stamp ~D.; ~>" stamp)
      (format stream "~<~%  ~0,72:;machinename ~S; ~>" machinename)
      (format stream "~<~%  ~0,72:;uid ~D.~@[(~A)~]; ~>"
	      uid (uid->username unix-name-lookup-access-path uid))
      (format stream "~<~%  ~0,72:;gid ~D.~@[(~A)~]; ~>"
	      gid (gid->groupname unix-name-lookup-access-path gid))
      (when gids 
	(if (= (length gids) 1)
	    (format stream "~<~%  ~0,72:;and gid ~D.~@[(~A)~]; ~>"
		    (first gids)
		    (gid->groupname unix-name-lookup-access-path (first gids)))
	  (format stream "~<~%  ~0,72:;and gid~P ~>" (length gids))
	  (format stream "~{~#[~2;and ~]~<~%  ~1,72:;~D.~@[(~A)~]~>~^, ~}."
		  (loop for gid in gids
			collect gid
			collect (gid->groupname unix-name-lookup-access-path gid))))))
    (format stream "~%")))

(defmethod (unix-authentication-reset unix-authentication-mixin) ()
  (setq unix-call-credential nil))

(defmethod (authentication-reset unix-authentication-mixin) ()
  (unix-authentication-reset self))

(defmethod (unix-authentication-set unix-authentication-mixin)
	   (stamp machinename uid gid gids)
  (authentication-reset self)
  (setq unix-call-credential (make-unix-call-credential self stamp machinename uid gid gids))
  (setq user si:*user*)
  (setq username (uid->username (unix-name-lookup-access-path) uid)))

(defun-in-flavor (machinename unix-authentication-mixin) (host)
  (address->hostname (unix-name-lookup-access-path)
		     (second (assoc (neti:local-network-of-type :internet)
				    (send host :network-addresses)))))

(defvar *unix-call-credential-stamp-counter* 0)

(defflavor unknown-unix-user
	(host)
	(fs:unknown-user)
  (:initable-instance-variables host)
  (:gettable-instance-variables host)
  (:required-init-keywords :host)
  )

(defmethod (:report-without-pathname unknown-unix-user) (stream)
  (format stream "No UNIX passwd information found for user name ~S~@[ on host ~A~]."
	  fs:user-name host))

(compile-flavor-methods unknown-unix-user)

(defflavor invalid-unix-password
	(user-name host)
	(fs:invalid-password)
  (:initable-instance-variables user-name host)
  (:gettable-instance-variables user-name host)
  (:required-init-keywords :user-name :host)
  )

(defmethod (:report-without-pathname invalid-unix-password) (stream)
  (format stream "Invalid password for user name ~S~@[ on host ~A~]."
	  user-name host))

(compile-flavor-methods invalid-unix-password)

(defun-in-flavor (username-and-password-valid-p unix-authentication-mixin)
		 (username password)
  (declare (values username-valid-p password-valid-p))
  (if (null username)
      (values nil nil)
    (multiple-value-bind (encrypted-password defaulted-p)
	(let ((*unix-authentication-allow-defaulting* t))
	  (username->password (unix-name-lookup-access-path) username))
      (cond ((and defaulted-p
		  (not (string-equal username "anonymous"))
		  (not (string-equal username "lisp-machine"))
		  (not (string-equal username "nobody")))
	     (values nil nil))
	    ((or (zerop (string-length encrypted-password))
		 (and password
		      (string= (unix-crypt password encrypted-password)
			       encrypted-password)))
	     (values t t))
	    (t
	     (values t nil))))))

(defun-in-flavor (valid-username-and-password unix-authentication-mixin)
		 (username password)
  (declare (values username password))
  (if (and username *unix-authentication-allow-defaulting*)
      (values username nil)
      (loop 
	(setq username (and username (string-thin username)))
	(setq password (and password (string-thin password)))
	(multiple-value-bind (username-valid-p password-valid-p)
	    (username-and-password-valid-p username password)
	  (if (and username-valid-p
		   (or password-valid-p
		       (not *unix-check-passwords-for-show*)))
	      (return (values username password))
	      (multiple-value-setq (username password)
		(fs:get-user-id-and-password
		  self username password
		  (make-condition
		    (if (null username-valid-p) 'unknown-unix-user 'invalid-unix-password)
		    :user-name username
		    :host (send self :host)))))))))

(defmethod (unix-authentication-initialize unix-authentication-mixin)
	   (&optional new-username new-password)
  (fs:force-user-to-login)
  (unwind-protect-case ()
      (let (emb-username uid gid)
	;; if we're logged as LISP-MACHINE, and the magic flag is set,
	;; don't try to use that login name, rather use the name, uid
	;; and gid whoever started up the genera process.  This is
	;; primarily for VLM use, but could also be useful on Solstii.
	(if #+3600 nil
	    #+IMach (sys:system-case
		      (Embedded
			(and
			  *unix-authentication-use-logged-in-user* 
			  ;; The test for being logged in as LISP-MACHINE doesn't work
			  ;; as, at times, our ID is "LISP-MAC" or "DISTRIBUTION|LISP-MACHINE"
			  ;; during a :Define Site or :Set Site operation.  Instead, we'll
			  ;; always use the user's Unix ID, if available, during those
			  ;; operations which, presently, are the only places in Genera
			  ;; that bind the above flag to T.
			  ; (string-equal (or new-username (send self :host-user-id))
			  ;		  "LISP-MACHINE")
			  (or (and new-username (string-equal new-username "LISP-MACHINE"))
			      (and si:*user*
				   (ignore-errors	; just in case of bogus user id
				     (si:logged-in-to-sys-host))))
			  (> (sys:emb-number-of-slots) 47)	; ensure that we have the slots
			  (setq emb-username 
				(sys:copy-emb-string (sys:emb-unix-login-name)))))
		      (otherwise nil))
	    (progn
	      ;; get username, uid and gid from the embedding substrate
	      (setq new-username emb-username)
	      (setq uid (sys:emb-unix-uid))
	      (setq gid (sys:emb-unix-gid)))
	    (progn
	      ;; do it the usual way
	      (multiple-value-setq (new-username new-password)
		(valid-username-and-password
		  (or new-username (send self :host-user-id))
		  new-password))
	      (setq uid (username->uid (unix-name-lookup-access-path) new-username))
	      (setq gid (username->gid (unix-name-lookup-access-path) new-username))))
	(let ((*unix-authentication-allow-defaulting* t))
	  (unix-authentication-set
	    self 
	    (process:atomic-replacef 
	      *unix-call-credential-stamp-counter*
	      (%32-bit-plus *unix-call-credential-stamp-counter* 1))
	    (machinename net:*local-host*)
	    uid
	    gid
	    (remove-duplicates
	      (cons gid
		    (car (username->gids (unix-name-lookup-access-path) new-username)))
	      :from-end t)))
	(values username new-password))
    (:abort
      (authentication-reset self))))

(defwhopper (authentication-initialize unix-authentication-mixin)
	    (&optional new-username new-password)
  (multiple-value-bind (username password)
      (unix-authentication-initialize self new-username new-password)
    (if username
	(values username password)
      (continue-whopper new-username new-password))))

(defmethod (unix-authentication-required-p unix-authentication-mixin)
	   (module-number module-version entry-number)
  (declare (ignore module-version))
  (let* ((module (gethash module-number *remote-module-table*))
	 (module-authentication (when module (remote-module-authentication module))))
    (when module
      (if (not (listp (remote-module-entries module)))
	  ;; In delivery worlds, entry authentication specs are lost
	  (and (member :unix module-authentication)
	       (not (member :null module-authentication)))
	  ;; In non-delivery worlds, entry authentication specs can override module's
	  (let* ((entry (find entry-number (remote-module-entries module)
			      :key #'remote-entry-number))
		 (entry-authentication (when entry (remote-entry-authentication entry))))
	    (when entry
	      (and (or (and (member :unix module-authentication)
			    (not (member :null module-authentication)))
		       (member :unix entry-authentication))
		   (not (member :null entry-authentication)))))))))

;;; Client authentication is all done by putting whoppers around
;;; XDR-INITIATE-CALL.  
;;;
;;; Each whopper should check if the entry lists the appropriate
;;; authentication, and if it does and no surrounding whopper has already set
;;; up a call credential for the call, then set up a credential and verifier
;;; for the call.

(defwhopper (xdr-initiate-call unix-authentication-mixin)
	    (module-number module-version entry-number argument-size
			   &optional credential verifier for-future dont-stack-allocate)
  (declare (values agent xdr-block xdr-pointer xdr-limit))
  (when (and (null credential)
	     (unix-authentication-required-p self module-number module-version entry-number))
    (unless (and unix-call-credential (eq user si:*user*))
      (unix-authentication-initialize self))
    (assert unix-call-credential)
    (setq credential unix-call-credential))
  (continue-whopper module-number module-version entry-number argument-size
		    credential verifier for-future dont-stack-allocate))

(defparameter *accept-unix-authentication* t)

;;; The server does authentication by putting whoppers around
;;; AGENT-RUN-REMOTE-CALL-HANDLER which each whopper being able to do one of
;;; three things:
;;; 
;;; 	"Ignore" credential.
;;; 	"Approve" a credential.
;;; 	"Reject" a credential.
;;; 
;;; In the core method, any call that has not been rejected is serviced, So
;;; any credential that has been approved or ignored by all whoppers is
;;; accepted.
;;; 
;;; Whoppers are supposed to ignore all credentials that have already been
;;; approved, allowing each whopper to approve the credential applicable to
;;; it.
;;;
;;; To approve a credential, whoppers should just do a continue-whopper
;;; passing T in the credential-approved argument.
;;;
;;; To reject a credential, whoppers should send an auth-error reply, release
;;; the xdr-block, and then return without a continue-whopper.

(defwhopper (agent-run-remote-call-handler unix-authentication-mixin)
	    (handler transaction-id xdr-block xdr-pointer xdr-limit
		     module-number module-version entry-number
		     credential verifier credential-approved)
  (let ((credential-type (and credential (named-structure-symbol credential))))
    (cond ((or credential-approved
	       (and (neq credential-type 'unix-call-credential)
		    (not (unix-authentication-required-p
			   self module-number module-version entry-number))))
	   ;; Ignore the credential if any of:
	   ;;    - the credential is already approved
	   ;;    - the credential isn't a unix credential and we don't require 
	   ;;      a unix credential
	   (continue-whopper handler transaction-id xdr-block xdr-pointer xdr-limit
			     module-number module-version entry-number
			     credential verifier credential-approved))
	  ((and (eq credential-type 'unix-call-credential)
		(or (and trusted-p *accept-unix-authentication*)
		    (and (allow-untrusted-access
			   self module-number module-version entry-number)
			 (not (unix-authentication-required-p
				self module-number module-version entry-number)))))
	   ;; Approve the credential if it's a UNIX credential and any of:
	   ;;    - The host is trusted 
	   ;;    - We allow untrusted access and don't require UNIX authentication
	   (multiple-value-bind (stamp machinename uid gid gids)
	       (decode-unix-call-credential self credential)
	     (declare (ignore stamp machinename gid gids))
	     (let ((*unix-authentication-allow-defaulting* t))
	       (let ((sys:user-id
		       (uid->username (local-host-unix-name-lookup-access-path) uid)))
		 (continue-whopper handler transaction-id xdr-block xdr-pointer xdr-limit
				   module-number module-version entry-number
				   credential verifier t)))))
	  (t
	   ;; Reject the credential otherwise
	   (report-auth-error self transaction-id 5)	;auth-tooweak
	   (release-xdr-block self xdr-block)))))
