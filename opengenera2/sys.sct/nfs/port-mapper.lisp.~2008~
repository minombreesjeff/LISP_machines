;;; -*- Mode: LISP; Syntax: Common-lisp; Package: RPC; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; The RPC Port Mapper Module 

(define-remote-module
  pmap
  (:number 100000)
  (:version 2)
  (:process nil)
  (:server :lisp)
  (:client :lisp)
  (:allow-untrusted-access t)
  )

(define-remote-entry pmapproc-null pmap
  (:number 0)
  (:arguments)
  (:values)
  (:whostate "PMap Null")
  (:lisp (:server (rpc-values))))
		     
(defun pmapproc-null-test (agent)
  (pmapproc-null :transport-agent agent)
  (time (dotimes (ignore 100) (pmapproc-null :transport-agent agent))))

(defvar *pmap-maplist* nil)

(defstruct pmap-mapping
  prog
  vers
  prot
  port)

(define-remote-type pmap-mapping ()
  (:abbreviation-for 
    `(structure (:lisp pmap-mapping)
		(prog integer-32)
		(vers integer-32)
		(prot integer-32)
		(port integer-32))))

(defun pmapproc-set-server (prog vers prot port)
  (declare (values success-p))
  (when (every #'(lambda (mapping)
		   (not (and (= (pmap-mapping-prog mapping) prog)
			     (= (pmap-mapping-vers mapping) vers)
			     (= (pmap-mapping-prot mapping) prot))))
	       *pmap-maplist*)
    (push (make-pmap-mapping :prog prog :vers vers :prot prot :port port)
	  *pmap-maplist* :localize 2)
    t))

(define-remote-entry pmapproc-set pmap
  (:number 1)
  (:arguments (prog integer-32) (vers integer-32) (prot integer-32) (port integer-32))
  (:values (resp boolean))
  (:whostate "PMap Set")
  (:lisp (:server (rpc-values (pmapproc-set-server prog vers prot port)))))

(defun pmapproc-unset-server (prog vers)
  (declare (values success-p))
  (unless (every #'(lambda (mapping)
		     (not (and (= (pmap-mapping-prog mapping) prog)
			       (= (pmap-mapping-vers mapping) vers))))
		 *pmap-maplist*)
    (setq *pmap-maplist*
	  (delete-if #'(lambda (mapping)
			 (and (= (pmap-mapping-prog mapping) prog)
			      (= (pmap-mapping-vers mapping) vers)))
		     *pmap-maplist*))
    t))

(define-remote-entry pmapproc-unset pmap
  (:number 2)
  (:arguments (prog integer-32) (vers integer-32) (dummy1 integer-32) (dummy2 integer-32))
  (:values (resp boolean))
  (:whostate "PMap Unset")
  (:lisp (:server dummy1 dummy2 (rpc-values (pmapproc-unset-server prog vers)))))

(defconstant *pmap-tcp-protocol-number* 6)
(defconstant *pmap-udp-protocol-number* 17)
(defconstant *pmap-tcp-port* 111)
(defconstant *pmap-udp-port* 111)

(defun pmapproc-getport-server (prog vers prot)
  (dolist (mapping *pmap-maplist*)
    (when (and (= (pmap-mapping-prog mapping) prog)
	       (= (pmap-mapping-vers mapping) vers)
	       (= (pmap-mapping-prot mapping) prot))
      (return-from pmapproc-getport-server
	(pmap-mapping-port mapping))))
  (let ((module (gethash prog *remote-module-table*)))
    (when (and module
	       (remote-module-handler-table module))
      (select prot
	(*pmap-tcp-protocol-number*
	 (return-from pmapproc-getport-server
	   *pmap-tcp-port*))
	(*pmap-udp-protocol-number*
	 (return-from pmapproc-getport-server
	   *pmap-udp-port*)))))
  0)

(define-remote-entry pmapproc-getport pmap
  (:number 3)
  (:arguments (prog integer-32) (vers integer-32) (prot integer-32) (dummy integer-32))
  (:values (port integer-32))
  (:whostate "PMap GetPort")
  (:lisp (:server dummy (rpc-values (pmapproc-getport-server prog vers prot)))))

(defun pmapproc-dump-server ()
  (let ((list *pmap-maplist*))
    (maphash #'(lambda (prog module)
		 (when (remote-module-handler-table module)
		   (unless (find-if #'(lambda (map)
					(and (= (pmap-mapping-prog map) prog)
					     (= (pmap-mapping-prot map)
						*pmap-tcp-protocol-number*)))
				    *pmap-maplist*)
		     (push (make-pmap-mapping :prog prog
					      :vers (remote-module-version module)
					      :prot *pmap-tcp-protocol-number*
					      :port *pmap-tcp-port*)
			   list))
		   (unless (find-if #'(lambda (map)
					(and (= (pmap-mapping-prog map) prog)
					     (= (pmap-mapping-prot map)
						*pmap-udp-protocol-number*)))
				    *pmap-maplist*)
		     (push (make-pmap-mapping :prog prog
					      :vers (remote-module-version module)
					      :prot *pmap-udp-protocol-number*
					      :port *pmap-udp-port*)
			   list))))
	     *remote-module-table*)		   
    (setf list (sort list #'< :key #'pmap-mapping-prog))
    list))

(define-remote-entry pmapproc-dump pmap
  (:number 4)
  (:arguments)
  (:values (resp (list pmap-mapping)))
  (:whostate "PMap Dump")
  (:lisp (:server (rpc-values (pmapproc-dump-server)))))

(defflavor pmapproc-callit-server-transport-agent-mixin
	((host nil)
	 (reply nil))
	()
  (:locatable-instance-variables host)
  (:conc-name pmapproc-callit-server-transport-agent-)
  (:abstract-flavor))

(defmethod (network-agent-p pmapproc-callit-server-transport-agent-mixin) () t)

(defmethod (remote-host pmapproc-callit-server-transport-agent-mixin) ()
  host)

(defparameter *pmapproc-callit-server-notify* nil)

(defmethod (send-call-starting-future pmapproc-callit-server-transport-agent-mixin)
	   (block &optional dont-release)
  (declare (values future))
  (let* ((notify *pmapproc-callit-server-notify*)
	 (xdr-agent self)
	 (xdr-pointer (xdr-block-data-pointer self block))
	 (xdr-limit (%pointer-plus xdr-pointer (xdr-block-data-size self block))))
    (when notify
      (tv:notify nil "PMAPPROC-CALLIT-SERVER Receive ~S:~%~S"
		 *default-transport-agent* block))
    (with-data-stack
      (unwind-protect
	  (xdr-register-save
	    (initialize-xdr-pointer)
	    (multiple-value-bind (transaction-id module-number module-version entry-number)
		(receive-rpc-call-header)
	      (multiple-value-bind (handler process)
		  (find-server module-number module-version entry-number)
		(declare (ignore process))
		(when (numberp handler)
		  (error "error ~D trying to find handler" handler))
		(letf ((reply nil))
		  (unwind-protect
		      (progn
			(run-remote-call-handler
			  handler self transaction-id (prog1 block (setq block nil))
			  (read-xdr-pointer) xdr-limit
			  module-number module-version entry-number)
			(when (and notify reply)
			  (tv:notify nil "PMAPPROC-CALLIT-SERVER Send ~S:~%~S"
				     *default-transport-agent* reply))
			(prog1 reply (setq reply nil)))
		    (when reply (release-xdr-block self reply)))))))
	(unless dont-release
	  (when block (release-xdr-block self block)))))))

(defmethod (wait-for-future pmapproc-callit-server-transport-agent-mixin)
	   (future &optional whostate)
  (declare (ignore whostate))
  future)

(defmethod (abort-future pmapproc-callit-server-transport-agent-mixin) (future)
  (release-xdr-block self future))

(defmethod (send-call-and-wait pmapproc-callit-server-transport-agent-mixin)
	   (block &optional whostate dont-release)
  (wait-for-future self (send-call-starting-future self block dont-release) whostate))

(defmethod (send-asynchronous-call pmapproc-callit-server-transport-agent-mixin)
	   (block &optional dont-release)
  (send-call-starting-future self block dont-release))

;;; Make sure the replies aren't allocated on the stack.
(defwhopper (xdr-initiate-reply pmapproc-callit-server-transport-agent-mixin)
	    (transaction-id values-size &optional verifier dont-stack-allocate)
  (declare (ignore dont-stack-allocate))
  (continue-whopper transaction-id values-size verifier t))

(defmethod (xdr-send-reply pmapproc-callit-server-transport-agent-mixin)
	   (block &optional dont-release)
  (setq reply (if dont-release (copy-xdr-block self block) block)))

(defmethod (xdr-send-error pmapproc-callit-server-transport-agent-mixin)
	   (block &optional dont-release)
  ;; Don't really send it anywhere
  (unless dont-release (release-xdr-block self block)))

(defflavor big-ender-pmapproc-callit-server-transport-agent
	()
	(pmapproc-callit-server-transport-agent-mixin
	 std-big-ender-array-transport-agent))

(compile-flavor-methods big-ender-pmapproc-callit-server-transport-agent)

(defun big-ender-pmapproc-callit-server-transport-agent ()
  (or (loop for agent in *all-transport-agents*
	    when (typep agent 'big-ender-pmapproc-callit-server-transport-agent)
	      return agent)
      (make-instance 'big-ender-pmapproc-callit-server-transport-agent)))

(defflavor little-ender-pmapproc-callit-server-transport-agent
	()
	(pmapproc-callit-server-transport-agent-mixin
	 std-little-ender-array-transport-agent))

(compile-flavor-methods little-ender-pmapproc-callit-server-transport-agent)

(defun little-ender-pmapproc-callit-server-transport-agent ()
  (or (loop for agent in *all-transport-agents*
	    when (typep agent 'little-ender-pmapproc-callit-server-transport-agent)
	      return agent)
      (make-instance 'little-ender-pmapproc-callit-server-transport-agent)))

(defun pmapproc-callit-server (prog vers proc args-bytes res-bytes)
  (declare (values res-bytes-if-success-nil-if-failure))
  (unless (numberp (find-server prog vers proc))
    (let* ((module (gethash prog *remote-module-table*))
	   (entry (find proc (remote-module-entries module) :key #'remote-entry-number))
	   (asynchronous (remote-entry-asynchronous entry))
	   (xdr-agent nil)		;transport medium
	   (xdr-block nil)		;current send or receive block, for unwind-protect
	   (xdr-pointer nil)		;current position in XDR block
	   (xdr-limit nil))		;exclusive upper bound on XDR block
      (unwind-protect			;free XDR-BLOCK if aborted
	  (xdr-register-save
	    (multiple-value-setq (xdr-agent xdr-block xdr-pointer xdr-limit)
	      (initiate-call
		module
		proc			;entry identifier
		(ceiling (vector-length args-bytes) 4)
		(etypecase *default-transport-agent*
		  (big-ender-data (big-ender-pmapproc-callit-server-transport-agent))
		  (little-ender-data (little-ender-pmapproc-callit-server-transport-agent)))))
	    (initialize-xdr-pointer)
	    (send-byte-vector args-bytes)
	    (verify-xdr-pointer t)
	    (setq xdr-block
		  (letf (((pmapproc-callit-server-transport-agent-host xdr-agent)
			  (remote-host *default-transport-agent*)))
		    (funcall (if asynchronous 'send-asynchronous-call 'send-call-and-wait)
			     xdr-agent
			     (prog1 xdr-block (setq xdr-block nil)))))
	    (when xdr-block
	      (multiple-value-setq (xdr-pointer xdr-limit)
		(xdr-initiate-receive xdr-agent xdr-block module))
	      (initialize-xdr-pointer)
	      (setf (fill-pointer res-bytes)
		    (* 4 (%pointer-difference xdr-limit (read-xdr-pointer))))
	      (receive-byte-vector res-bytes)
	      (verify-xdr-pointer nil)
	      res-bytes))
	(when xdr-block (release-xdr-block xdr-agent xdr-block))))))

(defparameter *pmapproc-callit-max-reply-size* 8192)

(define-remote-entry pmapproc-callit pmap
  (:number 5)
  (:arguments (prog integer-32) (vers integer-32) (proc integer-32)
	      (args opaque-bytes :extent :dynamic))
  (:values (port integer-32) (res opaque-bytes))
  (:whostate "PMap CallIt")
  (:lisp
    (:future t)
    (:server
      (let ((res-bytes (make-stack-array *pmapproc-callit-max-reply-size*
					 :element-type '(unsigned-byte 8)
					 :fill-pointer 0)))
	(let ((result (pmapproc-callit-server prog vers proc args res-bytes)))
	  (when result
	    (rpc-values
	      (pmapproc-getport-server prog vers *pmap-udp-protocol-number*)
	      result)))))))

;;; Calls through pmapproc-callit are be made through a special transport agent.

(defflavor pmapproc-callit-transport-agent-mixin
	(host)
	()
  (:initable-instance-variables host)
  (:required-init-keywords :host)
  (:abstract-flavor))

(defmethod (network-agent-p pmapproc-callit-transport-agent-mixin) () t)

(defmethod (remote-host pmapproc-callit-transport-agent-mixin) ()
  host)

(defmethod (high-latency-p pmapproc-callit-transport-agent-mixin) ()
  t)

(defmethod (send-call-starting-future pmapproc-callit-transport-agent-mixin)
	   (block &optional dont-release)
  (declare (values future))
  (let* ((xdr-agent self)
	 (xdr-pointer (xdr-block-data-pointer self block))
	 (xdr-limit (%pointer-plus xdr-pointer (xdr-block-data-size self block))))
    (with-data-stack
      (unwind-protect
	  (xdr-register-save
	    (initialize-xdr-pointer)
	    (multiple-value-bind (transaction-id module-number module-version entry-number)
		(receive-rpc-call-header)
	      (let* ((xdr-args-pointer (read-xdr-pointer))
		     (xdr-args-size (%pointer-difference xdr-limit xdr-args-pointer)))
		(with-stack-array (args (* xdr-args-size 4)
					:element-type '(unsigned-byte 8)
					:displaced-to xdr-args-pointer)
		  (list (start-pmapproc-callit-future
			  module-number module-version entry-number args
			  :transport-agent (host-udp-transport-agent host))
			transaction-id)))))
	(unless dont-release (release-xdr-block xdr-agent block))))))

(defmethod (wait-for-future pmapproc-callit-transport-agent-mixin) (future &optional whostate)
  (declare (ignore whostate))
  (destructuring-bind (pmapproc-callit-future transaction-id) future
    (multiple-value-bind (port res)
	(finish-pmapproc-callit-future pmapproc-callit-future)
      (declare (ignore port))
      (let* ((size (ceiling (array-total-size res) 4))
	     (xdr-block nil)
	     (xdr-agent self)
	     (xdr-pointer nil)
	     (xdr-limit nil))
	(with-data-stack
	  (unwind-protect		;free XDR-BLOCK if aborted
	      (xdr-register-save
		(multiple-value-setq (xdr-block xdr-pointer xdr-limit)
		  (xdr-initiate-reply xdr-agent transaction-id size))
		(initialize-xdr-pointer)
		(send-byte-vector res)
		(verify-xdr-pointer nil)
		(prog1 xdr-block (setq xdr-block nil)))
	    (when xdr-block (release-xdr-block xdr-agent xdr-block))))))))

(defmethod (abort-future pmapproc-callit-transport-agent-mixin) (future)
  (destructuring-bind (pmapproc-callit-future transaction-id) future
    (declare (ignore transaction-id))
    (abort-pmapproc-callit-future pmapproc-callit-future)))

(defmethod (send-call-and-wait pmapproc-callit-transport-agent-mixin) 
	   (block &optional whostate dont-release)
  (wait-for-future self (send-call-starting-future self block dont-release) whostate))

(defmethod (send-asynchronous-call pmapproc-callit-transport-agent-mixin)
	   (block &optional dont-release)
  (abort-future self (send-call-starting-future self block dont-release)))

(defflavor big-ender-pmapproc-callit-transport-agent
	()
	(pmapproc-callit-transport-agent-mixin
	 std-big-ender-array-transport-agent))

(compile-flavor-methods big-ender-pmapproc-callit-transport-agent)

(defun host-pmapproc-callit-transport-agent (host)
  (or (find host *all-transport-agents*
	    :test
	    #'(lambda (host agent)
		(and (typep agent 'big-ender-pmapproc-callit-transport-agent)
		     (neti:ns-eq (remote-host agent) host))))
      (make-instance 'big-ender-pmapproc-callit-transport-agent :host host)))

(defflavor port-mapping-transport-agent-mixin
	((ports nil))
	()
  (:required-flavors std-transport-agent call-retrying-mixin)
  (:abstract-flavor))

(defmethod (port-mapper-module-p port-mapping-transport-agent-mixin)
	   (module-number module-version)
  (and (= module-number 100000)			;The port mapper module-number
       (= module-version 2))			;The port mapper module-version
  )

(defflavor port-unavailable
	(module-number module-version ip-protocol-number)
	(rpc-error net:connection-error)
  (:initable-instance-variables))

(defmethod (:network port-unavailable) ()
  (neti:local-network-of-type :internet))

(defmethod (dbg:report port-unavailable) (stream)
  (format stream
	  "Can't get ~A port for host ~A module number #x~X version ~D."
	  (select ip-protocol-number
	    (*pmap-tcp-protocol-number* :tcp)
	    (*pmap-udp-protocol-number* :udp)
	    (otherwise (format nil "ip-protocol ~D" ip-protocol-number)))
	  (remote-host agent)
	  module-number module-version ip-protocol-number)
  (let ((module (gethash module-number *remote-module-table*)))
    (when module 
      (format stream "~%~A probably isn't running any ~A server."
	      (remote-host agent) (remote-module-name module)))))

(compile-flavor-methods port-unavailable)

(defmethod (module-port port-mapping-transport-agent-mixin)
	   (module-number module-version ip-protocol-number
			  &optional (errorp t) use-local-information-only
			  transaction-id)
  (or (and (port-mapper-module-p self module-number module-version)
	   (select ip-protocol-number
	     (*pmap-tcp-protocol-number* *pmap-tcp-port*)
	     (*pmap-udp-protocol-number* *pmap-udp-port*)
	     (otherwise (error "Can't grok IP protocol number ~D" ip-protocol-number))))
      (loop for (port-module-number port-module-version port-ip-protocol-number port-port)
		in ports
	    when (and (= port-module-number module-number)
		      (= port-module-version module-version)
		      (= port-ip-protocol-number ip-protocol-number))
	      return port-port)
      (and (null use-local-information-only)
	   (let ((port (pmapproc-getport
			 module-number module-version ip-protocol-number 0
			 :transport-agent self)))
	     (and (not (zerop port))
		  (progn
		    (process:atomic-push
		      (list module-number module-version ip-protocol-number port (time:time))
		      ports)
		    port))))
      (and errorp
	   (error 'port-unavailable
		  :agent self
		  :transaction-id transaction-id
		  :protocol-name :rpc
		  :foreign-host (remote-host self)
		  :module-number module-number
		  :module-version module-version
		  :ip-protocol-number ip-protocol-number))))

(defmethod (forget-module-port port-mapping-transport-agent-mixin)
	   (module-number module-version)
  (loop for port in ports
	for (port-module-number port-module-version port-port) = port
	initially (progn port-port)
	when (and (= port-module-number module-number)
		  (= port-module-version module-version))
	  do (process:atomic-replacef ports (remove port ports))))

(defmethod (forget-port port-mapping-transport-agent-mixin)
	   (port-number)
  (loop for port in ports
	for (port-module-number port-module-version port-port port-time) = port
	initially (progn port-module-number port-module-version port-time)
	when (= port-port port-number)
	  do (process:atomic-replacef ports (remove port ports))))

(defparameter *port-mapper-port-validity-time* (* 2 60 60))

(defun-in-flavor (maybe-signal-retry-call-error port-mapping-transport-agent-mixin)
		 (transaction-id module-number module-version error)
  (when (and (eql transaction-id (rpc-error-transaction-id error))
	     (loop for (port-module-number
			 port-module-version
			 port-ip-protocol-number
			 port-port
			 port-time)
		       in ports
		   initially (progn port-ip-protocol-number port-port)
		   thereis (and (= port-module-number module-number)
				(= port-module-version module-version)
				(time:time-elapsed-p
				  *port-mapper-port-validity-time*
				  port-time))))
    (forget-module-port self module-number module-version)
    (signal 'retry-call :agent self :transaction-id transaction-id)))

(defun-in-flavor (maybe-signal-retry-call-reply port-mapping-transport-agent-mixin)
		 (transaction-id module-number module-version reply)
  (when (and (multiple-value-bind (reply-status accept-status ignore ignore ignore
				   reject-status ignore)
		 (decode-reply-block self reply)
	       (case reply-status
		 (0 (case accept-status
		      ((0 4) nil)
		      ((1 2 3) t)))
		 (1 (case reject-status
		      (0 t)
		      (1 nil)))))
	     (loop for (port-module-number
			 port-module-version
			 port-ip-protocol-number
			 port-port
			 port-time)
		       in ports
		   initially (progn port-ip-protocol-number port-port)
		   thereis (and (= port-module-number module-number)
				(= port-module-version module-version)
				(time:time-elapsed-p
				  *port-mapper-port-validity-time*
				  port-time))))
    (forget-module-port self module-number module-version)
    (signal 'retry-call :agent self :transaction-id transaction-id)))

(defstruct port-mapping-future
  future
  transaction-id
  module-number
  module-version)  

(defwhopper (send-call-starting-future port-mapping-transport-agent-mixin)
	    (block &optional dont-release)
  (multiple-value-bind (transaction-id module-number module-version ignore)
      (decode-call-block self block)
    (make-port-mapping-future
      :future (condition-bind
		((rpc-error
		   #'(lambda (error)
		       (when (eq self (rpc-error-agent error))
			 (maybe-signal-retry-call-error
			   transaction-id module-number module-version error))
		       nil)))
		(continue-whopper block dont-release))
      :transaction-id transaction-id
      :module-number module-number
      :module-version module-version)))

(defwhopper (wait-for-future port-mapping-transport-agent-mixin)
	    (future &optional whostate)
  (let ((block (condition-bind
		 ((rpc-error
		    #'(lambda (error)
			(when (eq self (rpc-error-agent error))
			  (maybe-signal-retry-call-error
			    (port-mapping-future-transaction-id future)
			    (port-mapping-future-module-number future)
			    (port-mapping-future-module-version future)
			    error))
			nil)))
		 (continue-whopper (port-mapping-future-future future) whostate))))
    (maybe-signal-retry-call-reply
      (port-mapping-future-transaction-id future)
      (port-mapping-future-module-number future)
      (port-mapping-future-module-version future)
      block)
    block))

(defwhopper (abort-future port-mapping-transport-agent-mixin) (future)
  (continue-whopper (port-mapping-future-future future)))

(defwhopper (send-call-and-wait port-mapping-transport-agent-mixin)
	    (block &optional whostate dont-release)
  (multiple-value-bind (transaction-id module-number module-version ignore)
      (decode-call-block self block)
    (let ((block (condition-bind
		   ((rpc-error
		      #'(lambda (error)
			  (when (eq self (rpc-error-agent error))
			    (maybe-signal-retry-call-error
			      transaction-id module-number module-version error))
			  nil)))
		   (continue-whopper block whostate dont-release))))
      (maybe-signal-retry-call-reply transaction-id module-number module-version block)
      block)))

(defmethod (forget-ports port-mapping-transport-agent-mixin) ()
  (setq ports nil))

(defun forget-all-port-mapping-transport-agent-ports ()
  (loop for agent in *all-transport-agents*
	when (typep agent 'port-mapping-transport-agent-mixin)
	  do (forget-ports agent)))

