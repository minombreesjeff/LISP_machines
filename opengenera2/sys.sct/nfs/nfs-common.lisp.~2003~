;;; -*- Syntax: Common-lisp; Base: 10; Mode: LISP; Package: NFS; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(pushnew '("NFS" "Sun Microsystems, Inc") si:*trademark-database* :test 'equal)

;;; Command table for use by CP commands related to NFS
(cp::define-command-subset *nfs-command-table*
			   "NFS" "File")

;;; Since NFS is loaded, we should use files for UNIX-NAME-LOOKUP.

(setq rpc::*default-use-file-for-unix-name-lookup* t)

;;; Definitions common to clients and servers of versions 2 and 3 of the
;;; NFS protocol.

(defsubst reset-nfs-fhandle (fhandle)
  (setf (fill-pointer fhandle) 32)
  fhandle)

(defsubst make-nfs-fhandle (&optional (area working-storage-area))
  (values
    (make-array
      32
      :element-type '(unsigned-byte 8)
      :fill-pointer 0
      :named-structure-symbol 'nfs-fhandle
      :area area)))

(defsubst make-stack-nfs-fhandle ()
  (values
    (make-stack-array
      32
      :element-type '(unsigned-byte 8)
      :fill-pointer 0
      :named-structure-symbol 'nfs-fhandle)))

(defmacro with-nfs-fhandle ((variable) &body body)
  `(with-stack-array (,variable 32
		      :element-type '(unsigned-byte 8)
		      :fill-pointer 0
		      :named-structure-symbol 'nfs-fhandle)
     ,@body))

(defsubst copy-nfs-fhandle (old-fhandle &optional (new-fhandle (make-nfs-fhandle)))
  (setf (fill-pointer new-fhandle) (vector-length old-fhandle))
  (replace new-fhandle old-fhandle)
  new-fhandle)

(defsubst nfs-fhandle-equal (fh1 fh2)
  (and (vectorp fh1)
       (vectorp fh2)
       (= (vector-length fh1) (vector-length fh2))
       (let ((fh1 fh1)
	     (fh2 fh2))
	 (declare (array-register fh1 fh2))
	 (loop for i below (vector-length fh1)
	       always (= (aref fh1 i) (aref fh2 i))))))

(defselect ((:property nfs-fhandle named-structure-invoke))
  (:print-self (nfs-fhandle stream i-prindepth *print-escape*)
   i-prindepth
   (printing-random-object (nfs-fhandle stream :typep)
     (loop with length = (min (vector-length nfs-fhandle) 32)
	   with string = (make-string (* length 2))
	   for i below length
	   for byte being the array-elements of nfs-fhandle 
	   do (setf (aref string (* i 2)) (aref "0123456789ABCDEF" (ldb (byte 4 4) byte)))
	      (setf (aref string (1+ (* i 2))) (aref "0123456789ABCDEF" (ldb (byte 4 0) byte)))
	   finally (write-string string stream)
		   (when (> (vector-length nfs-fhandle) length)
		     (format stream "...(~D)" (vector-length nfs-fhandle)))))
   nfs-fhandle))

(defresource nfs-fhandle ()
  :constructor (make-nfs-fhandle rpc::array-xdr-block-area)
  :deinitializer (reset-nfs-fhandle object)
  :free-list-size 256)

(defresource nfs-card8-data ()
  :constructor (make-array 8192
			   :element-type '(unsigned-byte 8)
			   :fill-pointer 0
			   :area rpc::array-xdr-block-area)
  :deinitializer (setf (fill-pointer object) 0)
  :free-list-size 32
  :initial-copies 0)

(defresource nfs-card16-data ()
  :constructor (make-array 8192
			   :element-type '(unsigned-byte 16)
			   :fill-pointer 0
			   :area rpc::array-xdr-block-area)
  :deinitializer (setf (fill-pointer object) 0)
  :free-list-size 32
  :initial-copies 0)

(defresource nfs-displaced-char-data (card8-data)
  :constructor (make-array 8192
			   :element-type 'string-char
			   :fill-pointer 0
			   :displaced-to card8-data
			   :area rpc::array-xdr-block-area)
  :initializer (progn (setf (sys:array-indirect-pointer object) card8-data)
		      (setf (fill-pointer object) (fill-pointer card8-data)))
  :deinitializer (progn (setf (fill-pointer object) 0)
			(setf (sys:array-indirect-pointer object) nil))
  :matcher (progn object card8-data t)
  :initial-copies 0
  :free-list-size 32)

(defresource nfs-char-data ()
  :constructor (make-array 8192
			   :element-type 'string-char
			   :fill-pointer 0
			   :area rpc::array-xdr-block-area)
  :deinitializer (setf (fill-pointer object) 0)
  :free-list-size 32
  :initial-copies 0)

(defflavor nfs-error
	()
	(fs:file-operation-failure
	 sys:connection-error)
  (:default-init-plist :protocol-name :nfs)
  :abstract-flavor)

(defmethod (:network nfs-error) ()
  (neti:local-network-of-type :internet))

(defconstant *unix-base-universal-time* #.(time:encode-universal-time 0 0 0 1 1 1970 0))

(defsubst udt-to-unix (universal-time)
  (- universal-time *unix-base-universal-time*))

(defsubst unix-to-udt (unix-universal-time)
  (+ unix-universal-time *unix-base-universal-time*))

;;; Some pathname frobbing stuff

(defun as-dir (pathname)
  (cond ((eq (send (make-pathname :host (send pathname :host)
				  :device (pathname-device pathname)
				  :directory :root)
		   :directory-pathname-as-file)
	     pathname)
	 (send pathname :pathname-as-directory))
	((eq (send (send pathname :directory-pathname-as-file)
		   :pathname-as-directory)
	     pathname)
	 pathname)
	(t
	 (send pathname :pathname-as-directory))))

(defun as-file (pathname)
  (cond ((eq (send (make-pathname :host (send pathname :host)
				  :device (pathname-device pathname)
				  :directory :root)
		   :directory-pathname-as-file)
	     pathname)
	 pathname)
	((eq (send (send pathname :directory-pathname-as-file)
		   :pathname-as-directory)
	     pathname)
	 (send pathname :directory-pathname-as-file))
	(t
	 (send (send pathname :pathname-as-directory)
	       :directory-pathname-as-file))))

(defun root-directory (pathname)
  (send pathname :new-pathname
	:directory :root
	:name nil
	:type nil
	:version nil))

(defun root-directory-as-file (pathname)
  (send (root-directory pathname) :directory-pathname-as-file))

(defun root-directory-p (pathname)
  (eq pathname (root-directory pathname)))

(defun root-directory-as-file-p (pathname)
  (eq pathname (root-directory-as-file pathname)))

(defun useful-canonical-type (pathname)
  (if (and (eq (send pathname :version) :unspecific)
	   (typep pathname 'fs:general-unix-pathname-mixin))
      (let ((namestring (send pathname :string-for-dired)))
	(multiple-value-bind (ignore new-end)
	    (fs:parse-unix-version namestring)
	  (multiple-value-bind (ignore ignore ignore type ignore)
	      (send pathname :parse-namestring nil namestring 0 new-end)
	    (fs:lookup-canonical-type
	      (send pathname :system-type)
	      (send pathname :uncase-type type)))))
    (send pathname :canonical-type)))

;;; There is a difficult issue here.  The Lisp machine spec says that all
;;; output files with element-type :default are to be character files.  The
;;; problem is that the server can't figure out from a create whether the file
;;; is to be a character file or binary file, as that information can't be
;;; communicated in the NFS file protocol. If the server side used the rules
;;; for :characters :default, then since it doesn't know otherwise, it will
;;; always use characters for new output files. So the server right now users
;;; binary mode when the file has a binary-file-byte-size. But then the user
;;; has to do the same, so it doesn't save a file in character mode (by
;;; choosing characters :default), while the server was in binary mode.  So
;;; right now we violate the Lisp machine spec by characters :default on
;;; output mode using binary mode if the type has a binary-file-byte-size.  If
;;; you can come up with a better system, you're welcom to try it, But
;;; remember that the server and user sides must be conststent.
;;;
;;; One alternative would be to find some obscure way of communicating
;;; characters in the file properties somehow. Maybe in the mode word. Here
;;; the way would have to have no effect on sun servers, sun users work on
;;; lispm servers, and lispms talk to lispms correctly. One could assume that
;;; if the server knew the user was a lispm, then it can assume the user knew
;;; the server was a lispm, but I'm uncomfortable with this assumption. 
;;;
(defun file-characters-p (pathname direction)
  (let* ((canonical-type (useful-canonical-type pathname)))
    (unless (and (symbolp canonical-type)
		 (get canonical-type :binary-file-byte-size))
      (if (member direction '(:input :io))
	  :should-really-check-the-contents-of-the-file
	t))))

(defun file-byte-size (pathname characters)
  (let ((canonical-type (useful-canonical-type pathname)))
    (if (and (symbolp canonical-type)
	     (get canonical-type :binary-file-byte-size))
	(get canonical-type :binary-file-byte-size)
      (if characters 8 16))))

(defmacro ascii-translation-table ()
  (loop with table = (make-array 256 :element-type '(unsigned-byte 8))
	for i below 256
	for ch = (code-char i)
	do (setf (aref table i)
		 (selector ch char=
		   (#\bs #o010)
		   (#\tab #o011)
		   (#\cr #o015)
		   (#\ff #o014)
		   (#\line #o012)
		   (#\rubout #o177)
		   ;; Make it symmetric so it's reversable
		   (#.(code-char #o010) #.(char-code #\bs))
		   (#.(code-char #o011) #.(char-code #\tab))
		   (#.(code-char #o012) #.(char-code #\line))
		   (#.(code-char #o014) #.(char-code #\ff))
		   (#.(code-char #o015) #.(char-code #\cr))
		   (#.(code-char #o177) #.(char-code #\rubout))
		   (otherwise (ldb (byte 8 0) (char-code ch)))))
	finally (return table)))

(defparameter *ascii-translation-table* (ascii-translation-table))

(defmacro unix-translation-table ()
  (loop with table = (make-array 256 :element-type '(unsigned-byte 8))
	for i below 256
	for ch = (code-char i)
	do (setf (aref table i)
		 (selector ch char=
		   (#\bs #o010)
		   (#\tab #o011)
		   (#\cr #o012)			;UNIX likes it this way
		   (#\ff #o014)
		   (#\line #o015)		;Might as well be symmetric
		   (#\rubout #o177)
		   ;; Make it symmetric so it's reversable
		   (#.(code-char #o010) #.(char-code #\bs))
		   (#.(code-char #o011) #.(char-code #\tab))
		   (#.(code-char #o012) #.(char-code #\cr))
		   (#.(code-char #o014) #.(char-code #\ff))
		   (#.(code-char #o015) #.(char-code #\line))
		   (#.(code-char #o177) #.(char-code #\rubout))
		   (otherwise (ldb (byte 8 0) (char-code ch)))))
	finally (return table)))

(defparameter *unix-translation-table* (unix-translation-table))

(defun bytes-to-wide-bytes (bytes wide-bytes)
  (declare (values wide-bytes))
  (let ((bytes bytes)
	(wide-bytes wide-bytes))
    (declare (sys:array-register bytes wide-bytes))
    ;; Now copy the bytes into the wide bytes, doing byte swapping
    (loop for byte-index below (vector-length bytes) by 2
	  for wide-byte-index upfrom 0
	  do (setf (aref wide-bytes wide-byte-index)
		   (dpb (aref bytes (1+ byte-index)) (byte 8 8) (aref bytes byte-index)))
	  finally (setf (fill-pointer wide-bytes) (floor (vector-length bytes) 2)))))

(defun wide-bytes-to-bytes (wide-bytes bytes)
  (declare (values bytes))
  (let ((wide-bytes wide-bytes)
	(bytes bytes))
    (declare (sys:array-register wide-bytes bytes))
    ;; Now copy the wide bytes into the bytes, doing byte swapping
    (loop for byte-index upfrom 0 by 2
	  for wide-byte-index from 0 below (vector-length wide-bytes)
	  for wide-byte = (aref wide-bytes wide-byte-index)
	  do (setf (aref bytes byte-index) (ldb (byte 8 0) wide-byte))
	     (setf (aref bytes (1+ byte-index)) (ldb (byte 8 8) wide-byte))
	  finally (setf (fill-pointer bytes) (* (vector-length wide-bytes) 2)))))

(defun string-to-unix (string &optional unix)
  (declare (values unix))
  (let ((string string)
	(unix (or unix (make-string (string-length string))))
	(table *unix-translation-table*))
    (declare (sys:array-register string unix table))
    (loop for i below (string-length string)
	  do (setf (aref unix i) (code-char (aref table (char-code (aref string i))))))
    unix))

(defun unix-to-string (unix &optional string)
  (declare (values string))
  (let ((unix unix)
	(string (or string (make-string (string-length unix))))
	(table *unix-translation-table*))
    (declare (sys:array-register unix string table))
    (loop for i below (string-length unix)
	  do (setf (aref string i) (code-char (aref table (char-code (aref unix i))))))
    string))
