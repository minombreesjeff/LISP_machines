;;; -*- Mode: LISP; Syntax: Common-lisp; Package: NFS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; These are defined in the NFS Server system, but we refer to them here.

(eval-when (compile)
  (compiler:function-defined 'nfs2proc-symlink-server)
  (compiler:function-defined 'nfs2proc-readdir-server)
  (compiler:function-defined 'mnt1proc-dump-server)
  (compiler:function-defined 'mnt1proc-export-server)
  (compiler:function-defined 'nfs2proc-rmdir-server)
  (compiler:function-defined 'mnt1proc-mnt-server)
  (compiler:function-defined 'mnt1proc-umntall-server)
  (compiler:function-defined 'nfs2proc-mkdir-server)
  (compiler:function-defined 'nfs2proc-statfs-server)
  (compiler:function-defined 'mnt1proc-umnt-server)
  (compiler:function-defined 'nfs2proc-getattr-server)
  (compiler:function-defined 'nfs2proc-setattr-server)
  (compiler:function-defined 'nfs2proc-lookup-server)
  (compiler:function-defined 'nfs2proc-readlink-server)
  (compiler:function-defined 'nfs2proc-read-server)
  (compiler:function-defined 'nfs2proc-write-server)
  (compiler:function-defined 'nfs2proc-create-server)
  (compiler:function-defined 'nfs2proc-remove-server)
  (compiler:function-defined 'nfs2proc-rename-server)
  (compiler:function-defined 'nfs2proc-link-server))

;;; The NFS protocol, version 2

(define-remote-type nfs2-status ()
  (:abbreviation-for 'integer-32)
  (:lisp (:receive () `(nfs2-check-status (receive-word)))))

(define-remote-type nfs2-status-or (element-type)
  (:lisp
    (:typep (value)
     (once-only (value &environment nil)
       `(or (fixnump ,value)
	    ,(remote-typep element-type language value))))
    (:size (value)
     (once-only (value &environment nil)
       `(if (fixnump ,value)
	    1
	  (1+ ,(remote-type-size-expression element-type language value)))))
    (:send (value)
     (once-only (value &environment nil)
       `(cond ((fixnump ,value)
	       (send-word ,value))
	      (t
	       (send-word 0)
	       ,(remote-type-send element-type language value)))))
    (:receive (into storage-mode)
     `(let ((.status. (nfs2-check-status (receive-word))))
	(if (not (zerop .status.))
	    .status.
	  ,(remote-type-receive element-type language into storage-mode))))))

(define-remote-module
  nfs2
  (:number 100003)
  (:version 2)
  (:process nil)
  (:authentication :des :unix)
  (:server :lisp)
  (:client :lisp))

(define-remote-entry nfs2proc-null nfs2
  (:number 0)
  (:arguments)
  (:values)
  (:authentication :null)
  (:whostate "NFS2 Null")
  (:lisp
    (:server
     (rpc-values))))

(define-remote-type nfs2-fhandle ()
  (:abbreviation-for `(vector cardinal-8 32))
  (:lisp
    (:receive (into storage-mode)
     (case storage-mode
       (:stack
	 `(let ((fhandle (make-stack-nfs-fhandle)))
	    (setf (fill-pointer fhandle) 32)
	    (receive-byte-vector fhandle 0 32)
	    fhandle))
       (:overwrite
	 (once-only (into &environment nil)
	   `(progn
	      (setf (fill-pointer ,into) 32)
	      (receive-byte-vector ,into 0 32)
	      ,into)))
       (otherwise
	 `(let ((fhandle (make-nfs-fhandle)))
	    (setf (fill-pointer fhandle) 32)
	    (receive-byte-vector fhandle 0 32)
	    fhandle))))))

(defconstant *nfs2-ftype-nfnon* 0 "non file")
(defconstant *nfs2-ftype-nfreg* 1 "regular file")
(defconstant *nfs2-ftype-nfdir* 2 "a directory")
(defconstant *nfs2-ftype-nfblk* 3 "block special device")
(defconstant *nfs2-ftype-nfchr* 4 "character special device")
(defconstant *nfs2-ftype-nflnk* 5 "symbolic link")

(deftype nfs2-ftype ()
  `(member ,*nfs2-ftype-nfnon*
	   ,*nfs2-ftype-nfreg*
	   ,*nfs2-ftype-nfdir*
	   ,*nfs2-ftype-nfblk*
	   ,*nfs2-ftype-nfchr*
	   ,*nfs2-ftype-nflnk*))

(defstruct (nfs2-fattr (:type (vector fixnum))
                       :alterant
                       :size-symbol
                       (:constructor nil)
                       (:print-function print-nfs2-fattr))
  type
  mode
  nlink
  uid
  gid
  size
  blocksize
  rdev
  blocks
  fsid
  fileid
  atime-seconds
  atime-usecs
  mtime-seconds
  mtime-usecs
  ctime-seconds
  ctime-usecs)

(defun nfs2-fattr-ftype-name (fattr)
  (select (nfs2-fattr-type fattr)
    (*nfs2-ftype-nfnon* "non file")
    (*nfs2-ftype-nfreg* "regular file")
    (*nfs2-ftype-nfdir* "directory")
    (*nfs2-ftype-nfblk* "block special device")
    (*nfs2-ftype-nfchr* "character special device")
    (*nfs2-ftype-nflnk* "link")
    (otherwise nil)))

(defun print-nfs2-fattr (fattr &optional (stream *standard-output*) i-prindepth)
  (declare (values fattr)
           (ignore i-prindepth))
  (labels ((print-decimal (name value &optional comment)
             (unless (= value -1) (format stream " ~A=~D~@[(~A)~]" name value comment)))
           (print-octal (name value &optional comment)
             (unless (= value -1) (format stream " ~A=#o~O~@[(~A)~]"
					  name (ldb (byte 32 0) value) comment)))
           (print-time (name value)
             (print-decimal
               name value
               (ignore-errors
                 (with-output-to-string (stream)
                   (time:print-universal-time (unix-to-udt value) stream))))))
    (printing-random-object (fattr stream :typep)
      (print-decimal 'type (nfs2-fattr-type fattr) (nfs2-fattr-ftype-name fattr))
      (print-octal 'mode (nfs2-fattr-mode fattr))
      (print-decimal 'nlink (nfs2-fattr-nlink fattr))
      (print-decimal 'uid (nfs2-fattr-uid fattr))
      (print-decimal 'gid (nfs2-fattr-gid fattr))
      (print-decimal 'size (nfs2-fattr-size fattr))
      (print-decimal 'blocksize (nfs2-fattr-blocksize fattr))
      (print-octal 'rdev (nfs2-fattr-rdev fattr))
      (print-decimal 'blocks (nfs2-fattr-blocks fattr))
      (print-decimal 'fsid (nfs2-fattr-fsid fattr))
      (print-decimal 'fileid (nfs2-fattr-fileid fattr))
      (print-time 'atime (nfs2-fattr-atime-seconds fattr))
      (print-decimal 'atime-usecs (nfs2-fattr-atime-usecs fattr))
      (print-time 'mtime (nfs2-fattr-mtime-seconds fattr))
      (print-decimal 'mtime-usecs (nfs2-fattr-mtime-usecs fattr))
      (print-time 'ctime (nfs2-fattr-ctime-seconds fattr))
      (print-decimal 'ctime-usecs (nfs2-fattr-ctime-usecs fattr))))
  fattr)

(defsubst reset-nfs2-fattr (fattr)
  (alter-nfs2-fattr fattr
                    type -1
                    mode -1
                    nlink -1
                    uid -1
                    gid -1
                    size -1
                    blocksize -1
                    rdev -1
                    blocks -1
                    fsid -1
                    fileid -1
                    atime-seconds -1
                    atime-usecs -1
                    mtime-seconds -1
                    mtime-usecs -1
                    ctime-seconds -1
                    ctime-usecs -1)
    fattr)

(defsubst make-nfs2-fattr (&optional (area working-storage-area))
  (make-array
    nfs2-fattr-size
    :element-type 'fixnum
    :initial-element -1
    :fill-pointer nfs2-fattr-size
    :named-structure-symbol 'nfs2-fattr
    :area area))

(defresource nfs2-fattr ()
  :constructor (make-nfs2-fattr rpc::array-xdr-block-area)
  :deinitializer (reset-nfs2-fattr object))

(defsubst make-stack-nfs2-fattr ()
  (make-stack-array
    nfs2-fattr-size
    :element-type 'fixnum
    :initial-element -1
    :fill-pointer nfs2-fattr-size
    :named-structure-symbol 'nfs2-fattr))

(defmacro with-nfs2-fattr ((variable) &body body)
  `(with-stack-array (,variable nfs2-fattr-size
		      :element-type 'fixnum
		      :initial-element -1
		      :fill-pointer nfs2-fattr-size
                      :named-structure-symbol 'nfs2-fattr)
     ,@body))

(define-remote-type nfs2-fattr ()
  (:abbreviation-for `(vector integer-32 17))
  (:lisp
    (:receive (into storage-mode)
     (case storage-mode
       (:stack
	 `(let ((fattr (make-stack-nfs2-fattr)))
	    (receive-word-vector fattr 0 17)
	    fattr))
       (:overwrite
	 (once-only (into &environment nil)
	   `(progn (receive-word-vector ,into 0 17)
		   ,into)))
       (otherwise
	 `(let ((fattr (make-nfs2-fattr)))
	    (receive-word-vector fattr 0 17)
	    fattr))))))

(define-remote-entry nfs2proc-getattr nfs2
  (:number 1)
  (:arguments
    (fhandle nfs2-fhandle :extent :dynamic)
    (fattr-in (nfs2-status-or nfs2-fattr) :output fattr))
  (:values
    (fattr (nfs2-status-or nfs2-fattr) :overwrite fattr-in))
  (:whostate "NFS2 GetAttr")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-getattr-server)
	   (nfs2proc-getattr-server fhandle (make-stack-nfs2-fattr))
	 5)))))

(defstruct (nfs2-sattr (:type (vector fixnum))
                       :alterant
                       :size-symbol
                       (:constructor nil)
                       (:print-function print-nfs2-sattr))
  mode
  uid
  gid
  size
  atime-seconds
  atime-usecs
  mtime-seconds
  mtime-usecs)

(defun print-nfs2-sattr (sattr &optional (stream *standard-output*) i-prindepth)
  (declare (values sattr)
           (ignore i-prindepth))
  (labels ((print-decimal (name value &optional comment)
             (unless (= value -1) (format stream " ~A=~D~@[(~A)~]" name value comment)))
           (print-octal (name value &optional comment)
             (unless (= value -1) (format stream " ~A=#o~O~@[(~A)~]" name value comment)))
           (print-time (name value)
             (print-decimal
               name value
               (ignore-errors
                 (with-output-to-string (stream)
                   (time:print-universal-time (unix-to-udt value) stream))))))
    (printing-random-object (sattr stream :typep)
      (print-octal 'mode (nfs2-sattr-mode sattr))
      (print-decimal 'uid (nfs2-sattr-uid sattr))
      (print-decimal 'gid (nfs2-sattr-gid sattr))
      (print-decimal 'size (nfs2-sattr-size sattr))
      (print-time 'atime (nfs2-sattr-atime-seconds sattr))
      (print-decimal 'atime-usecs (nfs2-sattr-atime-usecs sattr))
      (print-time 'mtime (nfs2-sattr-mtime-seconds sattr))
      (print-decimal 'mtime-usecs (nfs2-sattr-mtime-usecs sattr))))
  sattr)

(defsubst reset-nfs2-sattr (sattr)
  (alter-nfs2-sattr sattr
                    mode -1
                    uid -1
                    gid -1
                    size -1
                    atime-seconds -1
                    atime-usecs -1
                    mtime-seconds -1
                    mtime-usecs -1)
    sattr)

(defsubst make-nfs2-sattr (&optional (area working-storage-area))
  (make-array
    nfs2-sattr-size
    :element-type 'fixnum
    :initial-element -1
    :fill-pointer nfs2-sattr-size
    :named-structure-symbol 'nfs2-sattr
    :area area))

(defresource nfs2-sattr ()
  :constructor (make-nfs2-sattr rpc::array-xdr-block-area)
  :deinitializer (reset-nfs2-sattr object))

(defsubst make-stack-nfs2-sattr ()
  (make-stack-array
    nfs2-sattr-size
    :element-type 'fixnum
    :initial-element -1
    :fill-pointer nfs2-sattr-size
    :named-structure-symbol 'nfs2-sattr))

(defmacro with-nfs2-sattr ((variable) &body body)
  `(with-stack-array (,variable nfs2-sattr-size
		      :element-type 'fixnum
		      :initial-element -1
		      :fill-pointer nfs2-sattr-size
                      :named-structure-symbol 'nfs2-sattr)
     ,@body))

(define-remote-type nfs2-sattr ()
  (:abbreviation-for `(vector integer-32 8))
  (:lisp
    (:receive (into storage-mode)
     (case storage-mode
       (:stack
	 `(let ((sattr (make-stack-nfs2-sattr)))
	    (receive-word-vector sattr 0 8)
	    sattr))
       (:overwrite
	 (once-only (into &environment nil)
	   `(progn (receive-word-vector ,into 0 8)
		   ,into)))
       (otherwise
	 `(let ((sattr (make-nfs2-sattr)))
	    (receive-word-vector sattr 0 8)
	    sattr))))))

(define-remote-entry nfs2proc-setattr nfs2
  (:number 2)
  (:arguments
    (fhandle nfs2-fhandle :extent :dynamic)
    (sattr nfs2-sattr :extent :dynamic)
    (fattr-in (nfs2-status-or nfs2-fattr) :output fattr))
  (:values
    (fattr (nfs2-status-or nfs2-fattr) :overwrite fattr-in))
  (:whostate "NFS2 SetAttr")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-setattr-server)
	   (nfs2proc-setattr-server fhandle sattr (make-stack-nfs2-fattr))
	 5)))))

(defstruct (nfs2-diropres (:type vector)
			  :named
			  :size-symbol)
  fhandle
  fattr)

(defsubst make-stack-nfs2-diropres-and-components ()
  (let ((diropres (make-stack-array nfs2-diropres-size
				    :named-structure-symbol 'nfs2-diropres)))
    (setf (nfs2-diropres-fhandle diropres) (make-stack-nfs-fhandle))
    (setf (nfs2-diropres-fattr diropres) (make-stack-nfs2-fattr))
    diropres))

(defmacro with-nfs2-diropres ((variable fhandle fattr) &body body)
  `(with-stack-array (,variable nfs2-diropres-size
                      :named-structure-symbol 'nfs2-diropres)
     (setf (nfs2-diropres-fhandle ,variable) ,fhandle)
     (setf (nfs2-diropres-fattr ,variable) ,fattr)
     ,@body))

(define-remote-type nfs2-diropres ()
  (:abbreviation-for
    '(structure (:lisp nfs2-diropres)
		(fhandle nfs2-fhandle)
		(fattr nfs2-fattr))))

(define-remote-entry nfs2proc-lookup nfs2
  (:number 4)
  (:arguments
    (dir-fhandle nfs2-fhandle :extent :dynamic)
    (filename string)
    (diropres-in (nfs2-status-or nfs2-diropres) :output diropres))
  (:values
    (diropres (nfs2-status-or nfs2-diropres) :overwrite diropres-in))
  (:whostate "NFS2 Lookup")
  (:lisp
    (:future t)
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-lookup-server)
	   (nfs2proc-lookup-server
	     dir-fhandle filename (make-stack-nfs2-diropres-and-components))
	 5)))))

(define-remote-entry nfs2proc-readlink nfs2
  (:number 5)
  (:arguments
    (fhandle nfs2-fhandle :extent :dynamic))
  (:values
    (path (nfs2-status-or string)))
  (:whostate "NFS2 ReadLink")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-readlink-server)
	   (nfs2proc-readlink-server fhandle)
	 5)))))

(defstruct (nfs2-readres (:type vector)
			 :named
			 :size-symbol)
  fattr
  data)

(defsubst make-stack-nfs2-readres-and-components ()
  (let ((readres (make-stack-array nfs2-readres-size
				   :named-structure-symbol 'nfs2-readres)))
    (setf (nfs2-readres-fattr readres) (make-stack-nfs2-fattr))
    (setf (nfs2-readres-data readres)
	  (make-stack-array 8192 :element-type '(unsigned-byte 8) :fill-pointer 0))
    readres))

(defmacro with-nfs2-readres ((variable fattr data) &body body)
  `(with-stack-array (,variable nfs2-readres-size
                      :named-structure-symbol 'nfs2-readres)
     (setf (nfs2-readres-fattr ,variable) ,fattr)
     (setf (nfs2-readres-data ,variable) ,data)
     ,@body))

(define-remote-type nfs2-readres ()
  (:abbreviation-for
    `(structure (:lisp nfs2-readres)
		(fattr nfs2-fattr)
		(data (vector cardinal-8)))))

(define-remote-entry nfs2proc-read nfs2
  (:number 6)
  (:arguments
    (fhandle nfs2-fhandle :extent :dynamic)
    (offset cardinal-32) (count cardinal-32) (totalcount cardinal-32)
    (readres-in (nfs2-status-or nfs2-readres) :output readres))
  (:values
    (readres (nfs2-status-or nfs2-readres) :overwrite readres-in))
  (:whostate "NFS2 Read")
  (:lisp
    (:future t)
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-read-server)
	   (nfs2proc-read-server
	     fhandle offset count totalcount
	     (make-stack-nfs2-readres-and-components))
	 5)))))

(define-remote-entry nfs2proc-write nfs2
  (:number 8)
  (:arguments
    (fhandle nfs2-fhandle :extent :dynamic)
    (beginoffset cardinal-32) (offset cardinal-32) (totalcount cardinal-32)
    (data (vector cardinal-8) :extent :dynamic)
    (fattr-in (nfs2-status-or nfs2-fattr) :output fattr))
  (:values
    (fattr (nfs2-status-or nfs2-fattr) :overwrite fattr-in))
  (:whostate "NFS2 Write")
  (:lisp
    (:future t)
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-write-server)
	   (nfs2proc-write-server
	     fhandle beginoffset offset totalcount data
	     (make-stack-nfs2-fattr))
	 5)))))

(define-remote-entry nfs2proc-create nfs2
  (:number 9)
  (:arguments
    (dir-fhandle nfs2-fhandle :extent :dynamic)
    (filename string)
    (sattr nfs2-sattr :extent :dynamic)
    (diropres-in (nfs2-status-or nfs2-diropres) :output diropres))
  (:values
    (diropres (nfs2-status-or nfs2-diropres) :overwrite diropres-in))
  (:whostate "NFS2 Create")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-create-server)
	   (nfs2proc-create-server
	     dir-fhandle filename sattr
	     (make-stack-nfs2-diropres-and-components))
	 5)))))

(define-remote-entry nfs2proc-remove nfs2
  (:number 10)
  (:arguments
    (dir-fhandle nfs2-fhandle :extent :dynamic)
    (filename string))
  (:values
    (status nfs2-status))
  (:whostate "NFS2 Remove")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-remove-server)
	   (nfs2proc-remove-server dir-fhandle filename)
	 5)))))

(define-remote-entry nfs2proc-rename nfs2
  (:number 11)
  (:arguments
    (from-dir-fhandle nfs2-fhandle :extent :dynamic)
    (from-filename string)
    (to-dir-fhandle nfs2-fhandle :extent :dynamic)
    (to-filename string))
  (:values
    (status nfs2-status))
  (:whostate "NFS2 Rename")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-rename-server)
	   (nfs2proc-rename-server
	     from-dir-fhandle from-filename to-dir-fhandle to-filename)
	 5)))))

(define-remote-entry nfs2proc-link nfs2
  (:number 12)
  (:arguments
    (from-fhandle nfs2-fhandle :extent :dynamic)
    (to-dir-fhandle nfs2-fhandle :extent :dynamic)
    (to-filename string))
  (:values
    (status nfs2-status))
  (:whostate "NFS2 Link")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-link-server)
	   (nfs2proc-link-server from-fhandle to-dir-fhandle to-filename)
	 5)))))

(define-remote-entry nfs2proc-symlink nfs2
  (:number 13)
  (:arguments
    (dir-fhandle nfs2-fhandle :extent :dynamic)
    (filename string)
    (link-to string)
    (attributes nfs2-sattr))
  (:values
    (status nfs2-status))
  (:whostate "NFS2 SymLink")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-symlink-server)
	   (nfs2proc-symlink-server dir-fhandle filename link-to attributes)
	 5)))))

(define-remote-entry nfs2proc-mkdir nfs2
  (:number 14)
  (:arguments
    (dir-fhandle nfs2-fhandle :extent :dynamic)
    (filename string)
    (sattr nfs2-sattr :extent :dynamic)
    (diropres-in (nfs2-status-or nfs2-diropres) :output diropres))
  (:values
    (diropres (nfs2-status-or nfs2-diropres) :overwrite diropres-in))
  (:whostate "NFS2 mkDir")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-mkdir-server)
	   (nfs2proc-mkdir-server
	     dir-fhandle filename sattr
	     (make-stack-nfs2-diropres-and-components))
	 5)))))

(define-remote-entry nfs2proc-rmdir nfs2
  (:number 15)
  (:arguments
    (dir-fhandle nfs2-fhandle :extent :dynamic)
    (filename string))
  (:values (status nfs2-status))
  (:whostate "NFS2 rmDir")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-rmdir-server)
	   (nfs2proc-rmdir-server dir-fhandle filename)
	 5)))))

(defstruct nfs2-dir-entry
  fileid
  name
  cookie)

(define-remote-type nfs2-dir-entry ()
  (:abbreviation-for
    `(structure (:lisp nfs2-dir-entry)
                (fileid cardinal-32)
                (name string)
                (cookie cardinal-32))))

(defstruct nfs2-readdir-res
  entries
  eof)

(define-remote-type nfs2-readdir-res ()
  (:abbreviation-for
    `(structure (:lisp nfs2-readdir-res)
		(entries (list nfs2-dir-entry))
		(eof boolean))))

(define-remote-entry nfs2proc-readdir nfs2
  (:number 16)
  (:arguments
    (fhandle nfs2-fhandle :extent :dynamic)
    (entry-number cardinal-32)
    (byte-count cardinal-32))
  (:values
    (readdir-res (nfs2-status-or nfs2-readdir-res)))
  (:whostate "NFS2 ReadDir")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-readdir-server)
	   (nfs2proc-readdir-server fhandle entry-number byte-count)
	 5)))))

(defstruct (nfs2-fsattr (:type (vector fixnum))
                        :alterant
                        :size-symbol
                        (:constructor nil)
                        (:print-function print-nfs2-fsattr))
  tsize
  bsize
  blocks
  bfree
  bavail
  )

(defun print-nfs2-fsattr (fsattr &optional (stream *standard-output*) i-prindepth)
  (declare (values fsattr)
           (ignore i-prindepth))
  (labels ((print-decimal (name value &optional comment)
             (unless (= value -1) (format stream " ~A=~D~@[(~A)~]" name value comment))))
    (printing-random-object (fsattr stream :typep)
      (print-decimal 'tsize (nfs2-fsattr-tsize fsattr))
      (print-decimal 'bsize (nfs2-fsattr-bsize fsattr))
      (print-decimal 'blocks (nfs2-fsattr-blocks fsattr))
      (print-decimal 'bfree (nfs2-fsattr-bfree fsattr))
      (print-decimal 'bavail (nfs2-fsattr-bavail fsattr))))
  fsattr)

(defsubst reset-nfs2-fsattr (fsattr)
  (alter-nfs2-fsattr fsattr
                     tsize -1
                     bsize -1
                     blocks -1
                     bfree -1
                     bavail -1)
  fsattr)

(defsubst make-nfs2-fsattr (&optional (area working-storage-area))
  (make-array
    nfs2-fsattr-size
    :element-type 'fixnum
    :initial-element -1
    :fill-pointer nfs2-fsattr-size
    :named-structure-symbol 'nfs2-fsattr
    :area area))

(defresource nfs2-fsattr ()
  :constructor (make-nfs2-fsattr rpc::array-xdr-block-area)
  :deinitializer (reset-nfs2-fsattr object))

(defsubst make-stack-nfs2-fsattr ()
  (make-stack-array
    nfs2-fsattr-size
    :element-type 'fixnum
    :initial-element -1
    :fill-pointer nfs2-fsattr-size
    :named-structure-symbol 'nfs2-fsattr))

(defmacro with-nfs2-fsattr ((variable) &body body)
  `(with-stack-array (,variable nfs2-fsattr-size
		      :element-type 'fixnum
		      :initial-element -1
		      :fill-pointer nfs2-fsattr-size
                      :named-structure-symbol 'nfs2-fsattr)
     ,@body))

(define-remote-type nfs2-fsattr ()
  (:abbreviation-for `(vector integer-32 5))
  (:lisp
    (:receive (into storage-mode)
     (case storage-mode
       (:stack
	 `(let ((fsattr (make-stack-nfs2-fsattr)))
	    (receive-word-vector fsattr 0 5)
	    fsattr))
       (:overwrite
	 (once-only (into &environment nil)
	   `(progn (receive-word-vector ,into 0 5)
		   ,into)))
       (otherwise
	 `(let ((fsattr (make-nfs2-fsattr)))
	    (receive-word-vector fsattr 0 5)
	    fsattr))))))

(define-remote-entry nfs2proc-statfs nfs2
  (:number 17)
  (:arguments
    (fhandle nfs2-fhandle :extent :dynamic)
    (fsattr-in (nfs2-status-or nfs2-fsattr) :output fsattr))
  (:values
    (fsattr (nfs2-status-or nfs2-fsattr) :overwrite fsattr-in))
  (:whostate "NFS2 StatFS")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'nfs2proc-statfs-server)
	   (nfs2proc-statfs-server fhandle (make-stack-nfs2-fsattr))
	 5)))))

;;; The MOUNT protocol, version 1

(define-remote-module
  mnt1
  (:number 100005)
  (:version 1)
  (:process nil)
  (:authentication :des :unix)
  (:server :lisp)
  (:client :lisp))

(define-remote-entry mnt1proc-null mnt1
  (:number 0)
  (:arguments)
  (:values)
  (:authentication :null)
  (:whostate "MNT1 Null")
  (:lisp
    (:server
     (rpc-values))))

(define-remote-entry mnt1proc-mnt mnt1
  (:number 1)
  (:arguments
    (directory string)
    (fhandle-in (nfs2-status-or nfs2-fhandle) :output fhandle))
  (:values
    (fhandle (nfs2-status-or nfs2-fhandle) :overwrite fhandle-in))
  (:whostate "MNT1 Mnt")
  (:lisp
    (:server
     (rpc-values
       (if (variable-boundp #'mnt1proc-mnt-server)
	   (mnt1proc-mnt-server directory (make-stack-nfs-fhandle))
	 5)))))

(defstruct mnt1-mount-entry
  hostname
  directory)

(define-remote-type mnt1-mount-entry ()
  (:abbreviation-for
    `(structure (:lisp mnt1-mount-entry)
                (hostname string)
                (directory string))))

(define-remote-entry mnt1proc-dump mnt1
  (:number 2)
  (:arguments)
  (:values
    (mntlist (list mnt1-mount-entry)))
  (:whostate "MNT1 Dump")
  (:lisp
    (:server
      (rpc-values
	(if (variable-boundp #'mnt1proc-dump-server)
	    (mnt1proc-dump-server)
	  ())))))

(define-remote-entry mnt1proc-umnt mnt1
  (:number 3)
  (:arguments
    (directory string))
  (:values)
  (:whostate "MNT1 Umnt")
  (:lisp
    (:server
      (when (variable-boundp #'mnt1proc-umnt-server)
	(mnt1proc-umnt-server directory))
     (rpc-values))))

;;; mnt1proc-umntall is often called through pmapproc-callit broadcast rpc.
;;; If so, we shouldn't reply.  Since it is the contract of the
;;; pmapproc-callit procedure to not return any response if an error occurs,
;;; by signalling an error we ensure there won't be a reply.

(define-remote-error mnt1proc-unmntall mnt1 (:number 1))

(define-remote-entry mnt1proc-umntall mnt1
  (:number 4)
  (:arguments)
  (:values)
  (:whostate "MNT1 UmntAll")
  (:lisp
    (:server
      (when (variable-boundp #'mnt1proc-umntall-server)
	(mnt1proc-umntall-server))
     (if (typep *default-transport-agent* 'rpc::pmapproc-callit-server-transport-agent-mixin)
	 (rpc-error mnt1proc-unmntall)
       (rpc-values)))))

(defstruct mnt1-export-entry
  directory
  groups)

(define-remote-type mnt1-export-entry ()
  (:abbreviation-for
    `(structure (:lisp mnt1-export-entry)
                (directory string)
                (groups (list string)))))

(define-remote-entry mnt1proc-export mnt1
  (:number 5)
  (:arguments)
  (:values (exportlist (list mnt1-export-entry)))
  (:authentication :null)
  (:whostate "MNT1 Export")
  (:lisp
    (:server
      (rpc-values
	(if (variable-boundp #'mnt1proc-export-server)
	    (mnt1proc-export-server)
	  ())))))
