;;; -*- Syntax: Zetalisp;  Mode: Lisp; Package: FS; Base: 8; Lowercase: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; FEP local access path stuff moved from fep-pathnames.lisp.94
;;; to sys:l-sys;fep-access-paths.lisp.1 9/27/83 11:48:29
;;; This file is now for both machines.

(defconst fep-filename-max-length 32.)		; Maximum characters in a FEP name
(defconst fep-filetype-max-length 4)		; Maximum characters in a FEP type

(defflavor fep-pathname () (lmfs-pathname-mixin active-pathname-mixin remote-pathname))

(defmethod (:system-type fep-pathname) () :fep)

(defconst *fep-name-of-the-root* "ROOT-DIRECTORY")

(defmethod (:pathname-as-directory fep-pathname) ()
  (send self ':new-pathname
	':raw-directory
	(cond ((or (equal directory *path-delimiter*) (eq directory ':root))
	       (if (equal name *fep-name-of-the-root*)
		   ':root
		   (list name)))
	      ((stringp directory)	;compatibility only
		       (string-append directory *path-delimiter* name))
	      ((listp directory) (append directory (list name)))
	      (t (ferror "Cannot get pathname as directory.")))
	':raw-name nil
	':raw-type nil
	':version nil))

(defmethod (:directory-pathname-as-file fep-pathname) ()
  (send self ':new-pathname
	':raw-directory (if (or (eq directory ':root)
				(null (cdr directory)))
			    ':root
			    (butlast directory))
	':raw-name (if (eq directory ':root) *fep-name-of-the-root*
		       (car (last directory)))
	':raw-type "DIR" ':version 1))

(defmethod (:equal fep-pathname) (pathname)
  (and (equal fs:host (send pathname ':host))
       (equal fs:device (send pathname ':device))
       (equal fs:directory (send pathname ':directory))
       (equal fs:name (send pathname ':name))
       (equal fs:type (send pathname ':type))
       (equal fs:version (send pathname ':version))))

;;; Don't go off and try to get a home directory when doing cross-host defaulting
(defmethod (:default-directory fep-pathname) ()
  ':root)

(defmethod (:valid-name-p fs:fep-pathname) (file-name)
  (cond ((memq file-name '(nil :wild :wild-inferiors)) t)
	((not (stringp file-name))
	 (values nil "not a string"))
	((> (pathname-component-min-length file-name) fep-filename-max-length)
	 (values nil (format nil "longer than ~A characters" fep-filename-max-length)))
	(t t)))

(defmethod (:valid-type-p fs:fep-pathname) (file-type)
  (cond ((memq file-type '(nil :wild)) t)
	((not (stringp file-type))
	 (values nil "not a string"))
	((> (pathname-component-min-length file-type) fep-filetype-max-length)
	 (values nil (format nil "longer than ~A characters" fep-filetype-max-length)))
	(t t)))

;; Can't use the :FASD-FORM for FS:PATHNAME because we always need to include the
;; "HOST|" in the fasd form
(defmethod (:fasd-form fs:fep-pathname) ()
  `(make-fasload-pathname ',(send host ':name-as-file-computer t)
			  ',(send self ':device) ',(send self ':directory)
			  ',(send self ':name) ',(send self ':type)
			  ',(send self ':version)
			  nil
			  ,@(when (vc-p)
			      `(',(send self :vc-branch)
				',(send self :vc-version))))) 

(defflavor file-host-fep-mixin
	((unit 0)
	 (host net:*local-host*))
	()
  :initable-instance-variables
  :gettable-instance-variables
  (:required-flavors active-pathname-host))

(defmethod (:pathname-flavor file-host-fep-mixin) () 'fep-pathname)

(defmethod (:name file-host-fep-mixin) ()
  (format nil "~:[~A|~;~*~]FEP~D"
	  (neti:local-host-p host) (send host ':name-as-file-computer) unit))

(defmethod (:system-type file-host-fep-mixin) () ':fep)

(defmethod (:name-as-file-computer file-host-fep-mixin) (&optional include-host)
  (if (and (neti:local-host-p host) include-host)
      (string-append (send host :short-name) "|" (send self ':short-name))
    (send self ':short-name)))

(putprop ':fep '(:undelete) 'attributes)

(defun parse-fep-unit-number (string index)
  (loop with sum = 0 finally (return sum)
	for i from index below (string-length string)
	do
    (setq sum (+ (* sum 10.) (or (digit-char-p (aref string i)) (return nil))))))

(defmethod (:pathname-host-namep file-host-fep-mixin) (name)
  (let* ((len (string-length name))
	 (idx (string-reverse-search "FEP" name len)))
    (and (not (null idx))
	 (eql (if (= (- len idx) 3)
		  (and (zerop idx) si:*boot-unit*)	;FEP = disk the load map is on
		(parse-fep-unit-number name (+ idx 3)))
	      unit)
	 (if (zerop idx)
	     (neti:local-host-p host)		;FEPn = local|FEPn
	     (and (char-equal (aref name (1- idx)) #/|)
		  (send host ':pathname-host-namep (substring name 0 (1- idx))))))))

(defmethod (:file-access-path file-host-fep-mixin)  (&optional pathname operation dont-create)
  ;;++ Some types of access might want to look at the pathname to check.
  ;;could send a message to see whether access path works for pathname operation combo?
  (when (and (null file-access-paths) (not dont-create))
    (push
      (if (neti:local-host-p host)
	  (make-instance 'fep-file-access-path ':host self ':unit unit)
	  ;;need our own file connection.
	  (loop for service-access-path
		    in (net:find-paths-to-service-on-host ':file host)
		finally (error 'host-not-accessible-for-file ':host host
			       ':pathname pathname ':operation operation)
		as flavor = (get (neti:protocol-name
				   (neti:service-access-path-protocol
				     service-access-path))
				 'fep-file-access-path-flavor)
		when flavor
		  return
		    (make-instance flavor :host host :unit unit
				   :service-access-path service-access-path)))
      file-access-paths))
  (car file-access-paths))

(defmethod (:remove-file-access-path file-host-fep-mixin) (file-access-path)
  (setq file-access-paths (delq file-access-path file-access-paths)))

(defmethod (:peek-server-info file-host-fep-mixin) ()
  (list "Server for FEP host on unit ~D"
	(send self :unit)))

#+(and IMach (not VLM))
(defmethod (:mark-fepfs-host-in-use file-host-fep-mixin) (usage in-use-p)
  (if in-use-p
      (mark-fepfs-host-in-use self usage)
      (mark-fepfs-host-not-in-use self usage)))

(defflavor fep-file-host () (file-host-fep-mixin net:no-device-host-mixin
			     active-pathname-host net:basic-host))

(compile-flavor-methods fep-pathname fep-file-host)

(defun add-fep-file-host (&optional (unit 0) (on-host net:*local-host*))
  (loop for host in *pathname-host-list*
	when (and (typep host 'fep-file-host)
		  (neti:ns-eq on-host (send host ':host))
		  (= unit (send host ':unit)))
	return host
	finally (setq host (make-instance 'fep-file-host ':host on-host ':unit unit))
		(send host ':maybe-decache-name-as-file-computer)
		(without-interrupts (push host *pathname-host-list*))
		(return host)))

;;; error for auto-add-fep-host

(defflavor remote-fep-host-without-unit
	(fep-host-name host-name)
	(error)					;this is a user error
  :initable-instance-variables)

(defmethod (:report remote-fep-host-without-unit) (stream)
  (format stream "Host ~A is not meaningful since the remote boot unit can change.~@
		  Probably you want ~A|FEP0."
    fep-host-name host-name))

(defmethod (:proceed remote-fep-host-without-unit :use-unit-0) ()
  "Use unit 0"
  (values :use-unit-0 0))

(defmethod (:proceed remote-fep-host-without-unit :specify-a-unit) (&optional unit)
  "Specify a unit"
  (loop when (not unit)
	  do (setq unit (prompt-and-read :number "Unit to use: "))
	until (and (fixp unit) ( 0 unit 31))
	do (format query-io "~&Unit must be an integer between 0 and 31~%")
	   (setq unit nil))
  (values :specify-a-unit unit))

(compile-flavor-methods remote-fep-host-without-unit)

(defun remove-fep-file-host (&optional (unit 0) (on-host neti:*local-host*))
  (let ((host-to-remove
	  (loop for host in *pathname-host-list*
		when (and (typep host 'fep-file-host)
			  (neti:ns-eq on-host (send host ':host))
			  (= unit (send host ':unit)))
		return host)))
    (when host-to-remove			;someone else removed it?
      (let* ((f-a-p (send host-to-remove ':file-access-path))
	     (streams (and f-a-p (send f-a-p ':open-streams))))
	(when streams
	  (error "Can't remove file host ~A: open streams ~S" host-to-remove streams)))
      (send host-to-remove :file-reset)
      (without-interrupts
	(setq *pathname-host-list* (remove host-to-remove *pathname-host-list*)))
      nil)))

(define-secondary-file-system (fep) (host unit)
  (when (null unit)
    (setf unit (if (neti:local-host-p host)
		   si:*boot-unit*
		   (signal-proceed-case ((unit) 'remote-fep-host-without-unit
					 :fep-host-name (string-append
							  (send host :name-as-file-computer)
							  "|FEP")
					 :host-name (send host :name))
		     (:use-unit-0 0)
		     (:specify-a-unit unit)))))
  (make-instance 'fep-file-host :host host :unit unit))	;let it err

;;;
;;; this stuff provides the hooks needed for erasable optical disks.
;;; various things need to be able to mark a FEPFS host as "in use", so
;;; that, for instance, it can't be ejected.
;;;
#+(and IMach (not VLM))
(defvar *removable-disk-lock-action* :query	; :query, :error, :allow (or nil)
  "Action to take when locking a removable disk due to LMFS or paging use")

#+(and IMach (not VLM))
(defun mark-fepfs-host-in-use (fepfs-host &optional (usage :paging))
  (flet ((warn (usage action)
	   (when *removable-disk-lock-action*
	     (cl:ecase action
	       (:query 
		 (cl:yes-or-no-p "Using ~A for ~A will make that disk un-dismountable.  Ok? "
				 fepfs-host usage))
	       (:error (error "Attempt to make ~A undismountable" fepfs-host))
	       ((:allow nil) t)))))
    (let* ((unit-num (send fepfs-host ':unit))
	   (du (aref storage::*unit-table* unit-num)))
      (cond ((cl:typep du 'storage::macintosh-scsi-unit)	; only type that matters, currently...
	     (cl:ecase usage
	       (:paging
		 (let ((in-use (plusp (storage::unit-paging-mounted-p du))))
		   (or in-use			; don't bother asking if it already is
		       (when (warn usage *removable-disk-lock-action*)
			 (setf (storage::unit-paging-mounted-p du) 1)
			 t))))
	       (:lmfs
		 (let ((in-use (plusp (storage::unit-lmfs-mounted-p du))))
		   (or in-use
		       (when (warn usage *removable-disk-lock-action*)
			 (setf (storage::unit-lmfs-mounted-p du) 1)
			 t))))))
	    (t t))				; not an EO disk?  just return t
      )))

#+(and IMach (not VLM))
(defun mark-fepfs-host-not-in-use (fepfs-host &optional (usage :paging))
  (let* ((unit-num (send fepfs-host ':unit))
	 (du (aref storage::*unit-table* unit-num)))
    (when (cl:typep du 'storage::macintosh-scsi-unit)	; only type that matters, currently...
      (cl:ecase usage 
	(:paging (setf (storage::unit-paging-mounted-p du) 0))
	(:lmfs   (setf (storage::unit-lmfs-mounted-p du) 0))))))

;;; FEP local access path stuff moved from fep-pathnames.lisp.94
;;; to sys:l-sys;fep-access-paths.lisp.1 9/27/83 11:48:29

;;;; FEP remote access paths.
;;;; moved to FEP-QFILE, 11/14/84. 
;;;; New NFILE stuff in FEP-NFILE, 12/11/84.
