;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Package: CLIM-DEMO; Base: 10; Lowercase: Yes -*-

;; $fiHeader: address-book.lisp,v 1.18 92/10/28 13:17:32 cer Exp $

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(in-package :clim-demo)

"Copyright (c) 1990 International Lisp Associates.  All rights reserved."

;;; Define a simple CLIM program.  This program maintains a simple address book.
;;; First, we need a minimal address database.

;;; A structure to hold each address
(defclass address ()
    ((name :initarg :name :accessor address-name)
     (address :initarg :address :accessor address-address)
     (number :initarg :number :accessor address-number))
  (:default-initargs :name "Unsupplied" :address "Unsupplied" :number "Unsupplied"))

;;; Database maintenance.
(defun make-address (&key name address number)
  (make-instance 'address :name name :address address :number number))

;;; A support utility.
(defun last-name (name)
  (subseq name (1+ (or (position #\Space name :test #'char-equal :from-end t) -1))))

;;; And a function which operates on the address class.
(defun address-last-name (address)
  (last-name (address-name address)))

;;; A place to keep addresses, currently shared among all instances of
;;; the application.
(defvar *addresses* nil)

(defun add-address (address)
  ;; Obviously could deal with multiple address entries with same name
  ;; here, but that's outside the scope of this demo.
  (pushnew address *addresses* :key #'address-name :test #'string-equal)
  (setq *addresses* (sort *addresses* #'string-lessp :key #'address-last-name)))

(progn
  (add-address (make-address :name "Chris Richardson"
			     :address "Franz, Inc."
			     :number "510-548-3600"))
  (add-address (make-address :name "Colin Meldrum"
			     :address "Franz, Inc."
			     :number "510-548-3600"))
  (add-address (make-address :name "Scott McKay"
			     :address "Symbolics, Inc."
			     :number "617-221-1000"))
  (add-address (make-address :name "Bill York"
			     :address "Lucid, Inc."
			     :number "415-xxx-yyyy"))
  (add-address (make-address :name "Paul Weineke"
			     :address "Lucid, Inc."
			     :number "415-xxx-yyyy"))
  )

;;; --------------------------------
;;; Define the user interface here.
;;;
;;; First, we define a presentation type for address, which enables us to make them
;;; mouse-sensitive.  We define the :printer for the presentation-type to print out just
;;; the personal name of the address entry.

(define-presentation-type address ())

(define-presentation-method present (object (type address) stream view &key)
  (declare (ignore view))
  (write-string (address-name object) stream))

;;; For translators
(define-presentation-type address-name ())
(define-presentation-type address-address ())
(define-presentation-type address-number ())

;;; Define a method for displaying the "Rolodex" form of entry.  
;;; This will be redisplayed efficiently by CLIM's updating output facility.
;;; [Note that the addition of calls to UPDATING-OUTPUT with specific cache values
;;; could be inserted around each of the fields here to improve the performance if the
;;; amount of information on display became large.  The trade-off would be the relative
;;; speed difference between whatever mechanism would be used to compare unique-ids and 
;;; cache-values (typically EQL) versus the default mechanism for comparing strings
;;; (STRING-EQUAL).]
(defmethod display-address ((address-to-display address) stream)
  (flet ((display-field (value label type)
           (updating-output (stream :unique-id type
                                    :cache-value value
                                    :cache-test #'string-equal)
             (with-text-face (stream :italic)
               (write-string label stream))
             (with-output-as-presentation (stream address-to-display type)
               (write-string value stream)))))
    (with-slots (name address number) address-to-display
      (display-field name "Name: " 'address-name)
      (terpri stream)
      (display-field address "Address: " 'address-address)
      (terpri stream)
      (display-field number "Number: " 'address-number))))

;;; Define the application-frame for our application
(define-application-frame address-book ()
    ;; This application has two state variables, the currently displayed
    ;; address and the window from which user queries should be read.
    ((current-address :initform nil)
     (interaction-pane )
     (name-pane))
  (:panes
    (interactor :interactor)
    (address :application
	     :incremental-redisplay t
	     :display-function 'display-current-address)
    (names :application
	   :incremental-redisplay t
	   :display-function 'display-names))
  (:layouts
    (default
      (vertically ()
        (horizontally ()
	  address names)
	interactor))))

;;; This method overrides the default (which will find any
;;; pane of type :APPLICATION) to prefer the :INTERACTOR pane.
(defmethod frame-standard-output ((frame address-book))
  (frame-query-io frame))

;;; This is the display-function for the upper-left pane, which specified 
;;; :display-function '(incremental-redisplay-display-function display-current-address).
(defmethod display-current-address ((frame address-book) stream)
  (let ((current-address (slot-value frame 'current-address)))
    (when current-address
      (display-address current-address stream))))

;;; This is the display-function for the upper-right pane, which specified
;;; :display-function '(display-names).
(defmethod display-names ((frame address-book) stream)
  (dolist (address *addresses*)
    ;; PRESENT invokes the :PRINTER for the ADDRESS presentation-type, defined above.
    ;; It also makes each address printed out mouse-sensitive.
    (updating-output (stream :unique-id address)
      (present address 'address :stream stream)
      (terpri stream))))

(define-address-book-command com-select-address
    ((address 'address :gesture :select))
   (setf (slot-value *application-frame* 'current-address) address))

(define-address-book-command (com-new-address :menu "New")
    ()
   (let ((name nil)
	 (address nil)
	 (number nil))
     (let ((stream (frame-standard-input *application-frame*)))
       (window-clear stream)
       ;; ACCEPTING-VALUES collects all calls to ACCEPT within its body
       ;; into dialog entries and allows parallel, random editing of the fields.
       ;; In this case, a dialog that looks like:
       ;;  Name: a string
       ;;  Address: a string
       ;;  Number: a string
       ;; is produced, where each "a string" is sensitive and can be edited.
       (accepting-values (stream)
	 (setq name (accept 'string :stream stream :prompt "Name"))
	 (terpri stream)
	 (setq address (accept 'string :stream stream :prompt "Address"))
	 (terpri stream)
	 (setq number (accept 'string :stream stream :prompt "Number")))
       (window-clear stream)
       (add-address (make-address :name name :address address :number number)))))

(define-address-book-command com-delete-address
    ((address 'address :gesture :delete))
   (setf *addresses* (delete address *addresses*)))

(define-address-book-command  (com-delete-current-address :menu "Delete")
    ()
  (let ((current-address (slot-value *application-frame* 'current-address)))
    (when current-address
      (setf *addresses* (delete current-address *addresses*))
      (setf (slot-value *application-frame* 'current-address) nil))))

(define-address-book-command (com-quit-address-book :menu "Quit")
   ()
 (frame-exit *application-frame*))

(define-address-book-command com-change-address-name
    ((address 'address-name :gesture :select))
  (let ((new-name (accept 'string :stream (frame-standard-input *application-frame*)
			  :prompt "New name" :default (address-name address))))
    (setf (address-name address) new-name)
    (setq *addresses* (sort *addresses* #'string-lessp :key #'address-last-name))))

(define-address-book-command com-change-address-address
    ((address 'address-address :gesture :select))
  (let ((new-address (accept 'string :stream (frame-standard-input *application-frame*)
			     :prompt "New address" :default (address-address address))))
    (setf (address-address address) new-address)))

(define-address-book-command com-change-address-number
    ((address 'address-number :gesture :select))
  (let ((new-number (accept 'string :stream (frame-standard-input *application-frame*)
			    :prompt "New number" :default (address-number address))))
    (setf (address-number address) new-number)))


(defvar *address-books* nil)

(defun do-address-book (&key (port (find-port)) framem (force nil))
  (let* ((framem (or framem (find-frame-manager :port port)))
	 (frame 
	   (let* ((entry (assoc framem *address-books*))
		  (frame (cdr entry)))
	     (when (or force (null frame))
	       (setq frame (make-application-frame 'address-book
						   :frame-manager framem
						   :left 100
						   :width 400 :height 300)))
	     (if entry 
		 (setf (cdr entry) frame)
		 (push (cons framem frame) *address-books*))
	     frame)))
    (run-frame-top-level frame)))

(define-demo "Address Book" do-address-book)
