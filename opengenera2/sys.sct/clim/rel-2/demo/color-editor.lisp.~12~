;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Package: CLIM-DEMO; Base: 10; Lowercase: Yes -*-

;; $fiHeader: color-editor.lisp,v 1.10 92/11/06 19:02:48 cer Exp $

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(in-package :clim-demo)

"Copyright (c) 1992, 1993 Symbolics, Inc.  All rights reserved."


(defclass color-chooser-pane (clim-stream-pane) ())

(defmethod handle-repaint :after ((stream color-chooser-pane) region)
  (declare (ignore region))
  (display-color (pane-frame stream) stream))

(define-application-frame color-chooser ()
    (color dynamic-p
     red blue green
     intensity hue saturation)
  (:menu-bar nil)
  (:panes 
    (display (make-clim-stream-pane 
	       :type 'color-chooser-pane
	       :scroll-bars nil
	       :display-function 'display-color
	       ;; Make sure we don't have a useless cursor blinking away...
	       :initial-cursor-visibility nil))
    (exit push-button 
	  :label "Exit"
	  :activate-callback #'(lambda (button)
				 (frame-exit (pane-frame button))))
    (rgb (with-slots (red green blue) *application-frame*
	   (outlining ()
	     (horizontally ()
	       (setq red (make-pane 'slider
			   :label "Red" :foreground +red+
			   :orientation :vertical
			   :min-value 0.0 :max-value 1.0 
			   :show-value-p t :decimal-places 3
			   :client 'color :id 'red))
	       (setq green (make-pane 'slider
			     :label "Green" :foreground +green+
			     :orientation :vertical
			     :min-value 0.0 :max-value 1.0 
			     :show-value-p t :decimal-places 3
			     :client 'color :id 'green))
	       (setq blue (make-pane 'slider
			    :label "Blue" :foreground +blue+
			    :orientation :vertical
			    :min-value 0.0 :max-value 1.0 
			    :show-value-p t :decimal-places 3
			    :client 'color :id 'blue))))))
    (ihs (with-slots (intensity hue saturation) *application-frame*
	   (outlining ()
	     (horizontally ()
	       (setq intensity (make-pane 'slider
				 :label "Intensity"
				 :orientation :vertical
				 :min-value 0.0 :max-value (sqrt 3)
				 :show-value-p t :decimal-places 3
				 :client 'color :id 'intensity))
	       (setq hue (make-pane 'slider
			   :label "Hue"
			   :orientation :vertical
			   :min-value 0.0 :max-value 1.0 
			   :show-value-p t :decimal-places 3
			   :client 'color :id 'hue))
	       (setq saturation (make-pane 'slider
				  :label "Saturation"
				  :orientation :vertical
				  :min-value 0.0 :max-value 1.0 
				  :show-value-p t :decimal-places 3
				  :client 'color :id 'saturation)))))))
  (:layouts
    (default 
      (horizontally ()
	(outlining ()
	  (vertically () display exit))
	rgb ihs))))

(defmethod run-frame-top-level :before ((frame color-chooser) &key)
  (with-slots (color dynamic-p) frame
    (setf dynamic-p (palette-dynamic-p (frame-palette frame))
	  color (if dynamic-p
		    (make-dynamic-color +black+)
		    +black+))))

(defmethod color ((frame color-chooser))
  (with-slots (color dynamic-p) frame
    (if dynamic-p
	(dynamic-color-color color)
	color)))

(defmethod (setf color) (new-color (frame color-chooser))
  (with-slots (color dynamic-p) frame
    (if dynamic-p
	(setf (dynamic-color-color color) new-color)
	(setf color new-color))))

(defmethod display-color ((frame color-chooser) stream)
  (with-bounding-rectangle* (left top right bottom) (window-viewport stream)
    (with-output-recording-options (stream :record nil)
      (draw-rectangle* stream left top right bottom
		       :filled t :ink (slot-value frame 'color)))))

(defmacro define-rgb-callbacks (color)
  (check-type color (member red green blue))
  (let* ((rgb '(red green blue))
	 (new-rgb (substitute 'value color rgb)))
    `(progn
       (defmethod value-changed-callback
		  ((slider slider) (client (eql 'color)) (id (eql ',color)) value)
	 (let ((frame (pane-frame slider)))
	   (multiple-value-bind (,@rgb) (color-rgb (color frame))
	     (declare (ignore ,color))
	     (setf (color frame) (make-rgb-color ,@new-rgb)))
	   (update-ihs frame)))
       (defmethod drag-callback
		  ((slider slider) (client (eql 'color)) (id (eql ',color)) value)
	 (let ((frame (pane-frame slider)))
	   (multiple-value-bind (,@rgb) (color-rgb (color frame))
	     (declare (ignore ,color))
	     (setf (color frame) (make-rgb-color ,@new-rgb)))
	   (update-ihs frame))))))

(define-rgb-callbacks red)
(define-rgb-callbacks green)
(define-rgb-callbacks blue)

(defmethod update-ihs ((frame color-chooser))
  (with-slots (intensity hue saturation) frame
    (multiple-value-bind (ii hh ss) (color-ihs (color frame))
      (setf (gadget-value intensity :invoke-callback nil) ii)
      (setf (gadget-value hue :invoke-callback nil) hh)
      (setf (gadget-value saturation :invoke-callback nil) ss))))

(defmacro define-ihs-callbacks (color)
  (check-type color (member intensity hue saturation))
  (let* ((ihs '(intensity hue saturation))
	 (new-ihs (substitute 'value color ihs)))
    `(progn
       (defmethod value-changed-callback
		  ((slider slider) (client (eql 'color)) (id (eql ',color)) value)
	 (let ((frame (pane-frame slider)))
	   (multiple-value-bind (,@ihs) (color-ihs (color frame))
	     (declare (ignore ,color))
	     (setf (color frame) (make-ihs-color ,@new-ihs)))
	   (update-rgb frame)))
       (defmethod drag-callback
		  ((slider slider) (client (eql 'color)) (id (eql ',color)) value)
	 (let ((frame (pane-frame slider)))
	   (multiple-value-bind (,@ihs) (color-ihs (color frame))
	     (declare (ignore ,color))
	     (setf (color frame) (make-ihs-color ,@new-ihs)))
	   (update-rgb frame))))))

(define-ihs-callbacks intensity)
(define-ihs-callbacks hue)
(define-ihs-callbacks saturation)

(defmethod update-rgb ((frame color-chooser))
  (with-slots (red green blue) frame
    (multiple-value-bind (rr gg bb) (color-rgb (color frame))
      (setf (gadget-value red :invoke-callback nil) rr)
      (setf (gadget-value green :invoke-callback nil) gg)
      (setf (gadget-value blue :invoke-callback nil) bb))))

(defmethod value-changed-callback :after ((slider slider) (client (eql 'color)) id value)
  (declare (ignore id value))
  (let ((frame (pane-frame slider)))
    (with-slots (dynamic-p) frame
      (unless dynamic-p
	;; Redisplay the color swatch only if we haven't done so
	;; by changing the color in-place
	(redisplay-frame-pane (pane-frame slider) 'display)))))


(defvar *color-choosers* nil)

(defun do-color-chooser (&key (port (find-port)) framem (force nil))
  (let* ((framem (or framem (find-frame-manager :port port)))
	 (frame 
	   (let* ((entry (assoc framem *color-choosers*))
		  (frame (cdr entry)))
	     (when (or force (null frame))
	       (setq frame (make-application-frame 'color-chooser
						   :frame-manager framem)))
	     (if entry 
		 (setf (cdr entry) frame)
		 (push (cons framem frame) *color-choosers*))
	     frame)))
    (run-frame-top-level frame)
    ;; Return the actual RGB color...
    (color frame)))

(define-demo "Color Chooser" do-color-chooser)
