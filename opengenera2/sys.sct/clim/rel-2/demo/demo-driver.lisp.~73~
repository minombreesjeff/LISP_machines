;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Package: CLIM-DEMO; Base: 10; Lowercase: Yes -*-

;; $fiHeader: demo-driver.lisp,v 1.22 92/12/16 16:47:23 cer Exp $

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(in-package :clim-demo)

"Copyright (c) 1990, 1991, 1992, 1993 Symbolics, Inc.  All rights reserved."

(defvar *demos* nil)

(defmacro define-demo (name start-form)
  (if (symbolp start-form)
      `(clim-utils:push-unique (cons ,name ',start-form) *demos*
			       :test #'string-equal :key #'car)
      `(clim-utils:push-unique (cons ,name #'(lambda () ,start-form)) *demos*
			       :test #'string-equal :key #'car)))

(define-demo "Test Suite" run-the-test-suite)

(defun run-the-test-suite (&key (port (find-port)) framem (force nil))
  (when (fboundp 'clim-user::do-test-suite)
    (clim-user::do-test-suite :port port :framem framem :force force)))

(defun start-demo (&key (port (find-port)) framem)
  (let* ((framem (or framem (find-frame-manager :port port)))
	 (graft (or (graft framem) (find-graft :port port)))
	 (demo-frame 
	   (make-application-frame 'standard-application-frame
	     :frame-manager framem))
	 (demos (append (sort (copy-list (map 'list #'car *demos*)) #'string<)
			'("Exit"))))
    (unwind-protect
	(catch 'exit-demo
	  (loop
	    (let* ((*application-frame* demo-frame)
		   (demo-name 
		     (menu-choose demos
				  :text-style '(:serif :roman :large)
				  :label '("CLIM Demonstrations"
					   :text-style (:serif :bold :normal))
				  :associated-window graft
				  :cache nil
				  :unique-id 'demo-menu :id-test #'eql
				  :cache-value *demos* :cache-test #'equal))
		   (demo-fcn
		     (if (string-equal demo-name "Exit")
			 #'(lambda () (throw 'exit-demo nil))
			 (cdr (assoc demo-name *demos* :test #'string-equal)))))
	      (cond ((null demo-fcn))
		    ((functionp demo-fcn)
		     (funcall demo-fcn))
		    (t
		     (funcall demo-fcn :framem framem))))))
      (destroy-frame demo-frame))))

(defparameter *color-stream-p* t)
(defun color-stream-p (stream)
  #-Genera *color-stream-p*		;--- kludge
  #+Genera (if (and stream
		    (eql (port-type (port stream)) ':genera))
	       (slot-value (port stream) 'genera-clim::color-p)
	       *color-stream-p*))

#+Genera
(cp:define-command (si:com-demonstrate-clim
		     :name "Demonstrate CLIM"
		     :command-table "Demonstration"
		     :provide-output-destination-keyword nil)
    ()
  (start-demo))

