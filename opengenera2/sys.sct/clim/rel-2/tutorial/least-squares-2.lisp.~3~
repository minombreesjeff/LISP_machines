;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Package: (LSQ-DEMO :use (CLIM CLIM-LISP)); Base: 10; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defclass data-point (clim:standard-point)
    ((data-set :accessor point-data-set :initarg :data-set))
  (:default-initargs :data-set nil))

(defun make-data-point (x y &optional data-set)
  (make-instance 'data-point :x x :y y :data-set data-set))

(define-presentation-type data-point ())

(define-presentation-type dummy-data-point ())



(define-application-frame lsq ()
    ((data-points :initform nil)
     (data-points-tick :initform 0)
     (data-x-min :initform 0.0)
     (data-x-max :initform 1.0)
     (data-y-min :initform 0.0)
     (data-y-max :initform 1.0)
     (data-left-margin)
     (data-top-margin)
     (data-right-margin)
     (data-bottom-margin)
     (primary-sort-key :initform :x)
     (secondary-sort-key :initform :y)
     (data-transform)
     (dummy-data-points :initform nil)
     (current-curve :initform nil)
     (curve-correlation)
     (current-coefficients :initform (make-array 25 :fill-pointer t))
     (x-is-function-of-y :initform nil))
  (:command-table (lsq :inherit-from (accept-values-pane)))
  (:panes 
    (display :application
	     :display-function 'draw-data-display
	     :incremental-redisplay t
	     :display-after-commands t
	     :scroll-bars nil)
    (table :accept-values
	   :display-function '(clim:accept-values-pane-displayer
				:displayer accept-data-points))
    (equation :application
	      :display-function 'print-equation-of-curve
	      :display-after-commands t
	      :incremental-redisplay t
	      :scroll-bars nil)
    (menu :command-menu))
  (:layouts
    (drawing-layout
      (vertically () display))
    (tabular-layout
      (vertically () (7/8 table) (1/8 equation)))))


;;; initializations

(defmethod frame-standard-output ((frame lsq))
  (if (eql (frame-current-layout frame) 'drawing-layout)
      (get-frame-pane frame 'display)
      (get-frame-pane frame 'table)))

(defmethod frame-standard-input ((frame lsq))
  (frame-standard-output frame))

(defmethod frame-query-io ((frame lsq))
  (frame-standard-output frame))

(defmethod run-frame-top-level :before ((frame lsq) &key)
  (enable-frame frame)
  (assign-margins-for-axes frame)
  (determine-data-transform frame))

;;; switching layouts

(define-lsq-command (switch-configurations :menu "Switch Display") ()
  (let ((frame *application-frame*))
    (let ((new-config (case (frame-current-layout frame)
			(drawing-layout
			  (setf (command-enabled 'com-zoom-in frame) nil)
			  (setf (command-enabled 'com-zoom-out frame) nil)
			  'tabular-layout)
			(tabular-layout
			  (setf (command-enabled 'com-zoom-in frame) t)
			  (setf (command-enabled 'com-zoom-out frame) t)
			  'drawing-layout))))
      (setf (frame-current-layout frame) new-config))))



;;; sorting

;;; sorting predicates return a second value indicating whether
;;; the answer needs more refinement

(defun point-x-< (p1 p2)
  (let ((x1 (point-x p1)) (x2 (point-x p2)))
    (cond ((< x1 x2) t)
	  ((> x1 x2) nil)
	  (t (values nil t)))))

(defun point-y-< (p1 p2)
  (let ((y1 (point-y p1)) (y2 (point-y p2)))
    (cond ((< y1 y2) t)
	  ((> y1 y2) nil)
	  (t (values nil t)))))

(defun point-set-< (p1 p2)
  (string-lessp (point-data-set p1) (point-data-set p2)))

(defun point-predicate-for-key (key)
  (ecase key
    (:x #'point-x-<)
    (:y #'point-y-<)
    (:set #'point-set-<)))

(defmacro with-lsq-sort-predicate ((predicate-name) &body body)
  `(let ((first-pred (point-predicate-for-key primary-sort-key))
	 (second-pred (point-predicate-for-key secondary-sort-key))
	 (other-pred (point-predicate-for-key 
		       (find-if-not #'(lambda (k)
					(or (eql k primary-sort-key)
					    (eql k secondary-sort-key)))
				    `(:x :y :set)))))
     (flet ((,predicate-name (p1 p2)
	     (multiple-value-bind (val more-p) (funcall first-pred p1 p2)
	       (if (null more-p)
		   val
		   (multiple-value-bind (val more-p) (funcall second-pred p1 p2)
		     (if (null more-p)
			 val
			 (funcall other-pred p1 p2)))))))
       ,.body)))

(defmethod set-sort-keys ((frame lsq) primary-key secondary-key)
  (with-slots (primary-sort-key secondary-sort-key data-points) frame
    (unless (and (eql primary-key primary-sort-key)
		 (eql secondary-key secondary-sort-key))
      (setf primary-sort-key primary-key
	    secondary-sort-key secondary-key))
    (with-lsq-sort-predicate (sort-pred)
      (declare (dynamic-extent #'sort-pred))
      (setf data-points (sort data-points #'sort-pred)))))


;;; adding new points, deleting points

(defmethod add-data-point ((point data-point) (frame lsq))
  (with-slots (primary-sort-key secondary-sort-key data-points-tick data-points) frame
    (with-lsq-sort-predicate (sort-pred)
      (declare (dynamic-extent #'sort-pred))
      (setf data-points (merge 'list data-points (list point) #'sort-pred)))
    (incf data-points-tick)))

(defgeneric delete-data-point (point frame &key dummy))

(defmethod delete-data-point ((point data-point) (frame lsq) &key dummy)
  (with-slots (data-points-tick data-points dummy-data-points) frame
    (cond (dummy
	   (setf dummy-data-points (delete point dummy-data-points)))
	  (t
	   (setf data-points (delete point data-points))
	   (incf data-points-tick)))))


;;; table display

(defmethod accept-data-points ((frame lsq) pane)
  (with-slots (primary-sort-key secondary-sort-key data-points-tick data-points dummy-data-points) frame

    (let ((first-ptype '(member :x :y :set)))
      (declare (dynamic-extent all-sort-keys))
      (fresh-line pane)
      (multiple-value-bind (new-primary ignore new-prim-p)
	  (accept first-ptype :stream pane
		  :default primary-sort-key
		  :prompt "Primarily sort according to ")
	(let ((second-ptype (remove new-primary first-ptype)))
	  (fresh-line pane)
	  (multiple-value-bind (new-secondary ignore new-second-p)
	      (accept second-ptype :stream pane
		      :default secondary-sort-key
		      :prompt "Secondarily sort according to ")
	    (when (or new-prim-p new-second-p)
	      (set-sort-keys frame new-primary new-secondary))))))

    (fresh-line pane)
    (accept-values-command-button (pane :resynchronize t)
	(with-text-face (pane :bold)
	  (write-string "Click here to enter new data" pane))
      (push (make-data-point nil nil) dummy-data-points))

    (fresh-line pane)
    (flet ((do-point (point window)
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")	     ;;(updating-output (window :unique-id point)
0	     (with-output-as-presentation (window point 'data-point
					   :single-box t)
	       (formatting-row (window)
		 (macrolet ((acceptor (slot type)
			      `(formatting-cell (window)
				 (multiple-value-bind (val ignore new-p)
				     (accept ,type :stream window :prompt nil
					     :default
					     (,slot point)
					     :query-identifier
					     `(,',slot ,point))
				   (when new-p
				     (setf (,slot point) val)
				     (incf data-points-tick))))))
		   (acceptor point-x 'real)
		   (acceptor point-y 'real)
		   (acceptor point-data-set 'string)))))	1;)
0	   (do-dummy (point window)
1	     ;;(updating-output (window :unique-id point)
0	     (with-output-as-presentation (window point 'dummy-data-point
					   :single-box t)
	       (formatting-row (window)
		 (macrolet ((acceptor (slot type)
			      `(formatting-cell (window)
				 (multiple-value-bind (val ignore new-p)
				     (accept ,type :stream window :prompt nil
					     :query-identifier
					     `(,',slot ,point))
				   (when new-p
				     (setf (,slot point) val))))))
		   (acceptor point-x 'real)
		   (acceptor point-y 'real)
		   (acceptor point-data-set 'string))))))	1;)
0      (formatting-table (pane)
	(formatting-row (pane)
	  (with-text-face (pane :italic)
	    (formatting-cell (pane :min-width 20 :align-x :center)
	      (write-string "X" pane))
	    (formatting-cell (pane :min-width 20 :align-x :center)
	      (write-string "Y" pane))
	    (formatting-cell (pane :min-width 20 :align-x :center)
	      (write-string "Set" pane))))
	(dolist (point dummy-data-points)
	  (if (and (numberp (point-x point))
		   (numberp (point-y point)))
	      (progn (setf dummy-data-points (delete point dummy-data-points))
		     (add-data-point point frame))
	      (do-dummy point pane)))
	(dolist (point data-points)
	  (do-point point pane))))))


;;; graphic display

(defmethod draw-data-display ((frame lsq) pane)
  (with-slots (current-curve current-coefficients x-is-function-of-y
	       data-x-min data-x-max data-y-min data-y-max data-points-tick
	       data-right-margin data-left-margin data-transform)
	      frame
    (draw-data-axes frame pane)
    (updating-output (pane :unique-id ':the-curve
			   :cache-value data-points-tick
			   :cache-test #'=)
      (draw-data-points frame pane)
      (when current-curve
	(with-drawing-options (pane :transformation data-transform) 
	  (draw-fitted-curve current-curve current-coefficients pane
			     data-x-min data-x-max data-y-min data-y-max
			     (- data-right-margin data-left-margin)
			     x-is-function-of-y))))))


;;; methods on the data points

(defmethod data-range ((frame lsq))
  (with-slots (data-points) frame
    (let* ((min-x (point-x (first data-points)))
	   (max-x min-x)
	   (min-y (point-y (first data-points)))
	   (max-y min-y))
      (dolist (point (rest data-points))
	(macrolet ((maxminf (val min max)
		     `(let ((v ,val))
			(cond ((< v ,min) (setq ,min v))
			      ((> v ,max) (setq ,max v))))))
	  (maxminf (point-x point) min-x max-x)
	  (maxminf (point-y point) min-y max-y)))
      (values min-x min-y max-x max-y))))

(defmethod determine-data-transform ((frame lsq) 
				     &optional left top right bottom)
  (with-slots (data-left-margin data-top-margin data-right-margin data-bottom-margin
	       data-x-min data-x-max data-y-min data-y-max data-transform data-points-tick)
	      frame
    (when (null left) (setq left data-left-margin))
    (when (null top) (setq top data-top-margin))
    (when (null right) (setq right data-right-margin))
    (when (null bottom) (setq bottom data-bottom-margin))
    (setf data-transform
	  (make-3-point-transformation*
	    data-x-min data-y-min 
	    data-x-min data-y-max
	    data-x-max data-y-min
	    left bottom
	    left top
	    right bottom))
    (incf data-points-tick)))

;;; Zooming "in" means picking a subset of the data space and magnifying the scale
;;; so that the marked data space fills the entire region on the screen.

(define-lsq-command (com-zoom-in :menu "Zoom In (magnify)") ()
  (let ((frame *application-frame*))
    (with-slots (data-left-margin data-top-margin data-right-margin data-bottom-margin
		 data-x-min data-x-max data-y-min data-y-max data-transform data-points-tick)
		frame
      (incf data-points-tick)
      (let ((start-left (/ (+ (* 2 data-left-margin) data-right-margin) 3))
	    (start-top (/ (+ (* 2 data-top-margin) data-bottom-margin) 3))
	    (start-right (/ (+ (* 2 data-right-margin) data-left-margin) 3))
	    (start-bottom (/ (+ (* 2 data-bottom-margin) data-top-margin) 3)))
	(multiple-value-bind (u0 v0 u1 v1)
	    (pointer-input-rectangle* :stream (get-frame-pane frame 'display)
				      :left start-left
				      :top start-top
				      :right start-right
				      :bottom start-bottom)
	  (multiple-value-setq (data-x-min data-y-min)
	    (untransform-position data-transform u0 v1))
	  (multiple-value-setq (data-x-max data-y-max)
	    (untransform-position data-transform u1 v0))
	  (determine-data-transform frame))))))

;;; Zooming "out" means picking a subset of the data space and shrinking the scale
;;; so that the entire old data space fits into the marked area.

(define-lsq-command (com-zoom-out :menu "Zoom Out (contract)") ()
  (let ((frame *application-frame*))
    (with-slots (data-left-margin data-top-margin data-right-margin data-bottom-margin
		 data-x-min data-x-max data-y-min data-y-max data-transform data-points-tick)
		frame
      (incf data-points-tick)
      (let ((start-left (/ (+ (* 2 data-left-margin) data-right-margin) 3))
	    (start-top (/ (+ (* 2 data-top-margin) data-bottom-margin) 3))
	    (start-right (/ (+ (* 2 data-right-margin) data-left-margin) 3))
	    (start-bottom (/ (+ (* 2 data-bottom-margin) data-top-margin) 3)))
	(multiple-value-bind (u0 v0 u1 v1)
	    (pointer-input-rectangle* :stream (get-frame-pane frame 'display)
				      :left start-left
				      :top start-top
				      :right start-right
				      :bottom start-bottom)
	  (determine-data-transform frame u0 v0 u1 v1)
	  (multiple-value-setq (data-x-min data-y-min)
	    (untransform-position data-transform data-left-margin data-bottom-margin))
	  (multiple-value-setq (data-x-max data-y-max)
	    (untransform-position data-transform data-right-margin data-top-margin)))))))

(defmethod draw-data-points ((frame lsq) pane)
  (with-slots (data-points data-points-tick data-transform
	       data-x-min data-x-max data-y-min data-y-max) frame
    (flet ((do-point (point window)
	     (let ((x (point-x point)) (y (point-y point)))
	       (when (and (<= data-x-min x data-x-max)
			  (<= data-y-min x data-y-max))
		 (with-output-as-presentation (window point 'data-point)
		   (multiple-value-bind (x y)
		       (transform-position data-transform x y)
		     (draw-circle* window x y 3)))))))
      (dolist (point data-points)
	(do-point point pane)))))

(define-lsq-command com-create-data-point ((x 'number) (y 'number))
  (add-data-point (make-data-point x y) *application-frame*))

(define-presentation-to-command-translator pick-a-place-for-a-new-point
    (blank-area com-create-data-point lsq
     :gesture :select
     :tester
       ((x y window)
	(let ((frame *application-frame*))
	  (with-slots (data-left-margin data-top-margin
		       data-right-margin data-bottom-margin) frame
	    (and (eql window (get-frame-pane frame 'display))
		 (<= data-left-margin x data-right-margin)
		 (<= data-top-margin y data-bottom-margin))))))
    (x y)
  (with-slots (data-transform) *application-frame*
    (multiple-value-bind (x y) (untransform-position data-transform x y)
      `(,x ,y))))

(define-lsq-command com-delete-data-point ((point 'data-point :gesture :delete))
  (delete-data-point point *application-frame*))

(define-lsq-command com-delete-dummy-data-point ((point 'dummy-data-point :gesture :delete))
  (delete-data-point point *application-frame* :dummy t))


;;; axes

(defmethod draw-data-axes ((frame lsq) pane)
  (with-slots (data-x-min data-x-max data-y-max data-y-min data-transform
	       data-left-margin data-top-margin data-right-margin data-bottom-margin)
	      frame
    (flet ((pair= (pair1 pair2)
	     (and (= (car pair1) (car pair2))
		  (= (cdr pair1) (cdr pair2)))))
      (declare (dynamic-extent #'pair=))
      (updating-output (pane :unique-id 'x-axis
			     :cache-value (cons data-x-min data-x-max)
			     :cache-test #'pair=)
	(draw-horizontal-axis pane data-x-min data-x-max data-transform
			      data-left-margin data-right-margin data-bottom-margin))
      (updating-output (pane :unique-id 'y-axis
			     :cache-value (cons data-y-max data-y-min)
			     :cache-test #'pair=)
	(draw-vertical-axis pane data-y-min data-y-max data-transform
			    data-left-margin data-top-margin data-bottom-margin)))))

(defvar *horizontal-scale-mark-density* 80)

(defun draw-horizontal-axis (window data-min data-max data-transform
			     view-x-min view-x-max view-y)
  (let* ((tick-end view-y)
	 (tick-start (+ tick-end 8))
	 (text-top (+ tick-start 2)))
    (draw-line* window view-x-min view-y view-x-max view-y)
    (flet ((drawer (x)
	     (multiple-value-bind (vx vy) (transform-position data-transform x 0.0)
	       vy
	       (draw-line* window vx tick-start vx tick-end)
	       (draw-text* window (format nil "~7F" x) vx text-top
			   :align-x :center :align-y :top))))
      (declare (dynamic-extent #'drawer))
      (axis-iterator data-min
		     data-max
		     #'drawer
		     (max (round (- view-x-max view-x-min) *horizontal-scale-mark-density*)
			  1)))))

(defvar *vertical-scale-mark-density* 50)

(defun draw-vertical-axis (window data-min data-max data-transform
			   view-x view-y-min view-y-max)
  (let* ((tick-end view-x)
	 (tick-start (- tick-end 8))
	 (text-end (- tick-start 2)))
    (draw-line* window view-x view-y-min view-x view-y-max)
    (flet ((drawer (y)
	     (multiple-value-bind (vx vy) (transform-position data-transform 0.0 y)
	       vx
	       (draw-line* window tick-start vy tick-end vy)
	       (draw-text* window (format nil "~7F" y) text-end vy
			   :align-x :right :align-y :center))))
      (declare (dynamic-extent #'drawer))
      (axis-iterator data-min
		     data-max
		     #'drawer
		     (max (round (- view-y-max view-y-min) *vertical-scale-mark-density*)
			  1)))))

(defun axis-iterator (min-val max-val drawit approx-number-of-steps)
  (let* ((step (float (stepsize-for-scale min-val max-val approx-number-of-steps)))
	 (i0 (ceiling min-val step))
	 (i1 (floor max-val step)))
    (loop for i from i0 to i1 do (funcall drawit (* i step)))))

(defun stepsize-for-scale (datamin datamax approx-number-of-steps)
  (declare (values stepsize mantissa))
  (assert (< datamin datamax))
  (let* ((step (/ (- datamax datamin) approx-number-of-steps))
	 (step-exponent (expt 10 (floor (log step 10))))
	 (step-mantissa (/ step step-exponent)))
    ;; at this point 1 <= step-mantissa < 10
    ;; we choose nearest (logarithmically) to 1, 2, or 5
    (cond ((< step-mantissa (sqrt 2)) (values step-exponent 1))
	  ((< step-mantissa (sqrt 5/2)) (values (* 2 step-exponent) 2))
	  ((< step-mantissa (* 5.0 (sqrt 2))) (values (* 5 step-exponent) 5))
	  (t (values (* 10 step-exponent) 1)))))

(defmethod assign-margins-for-axes ((frame lsq))
  (with-slots (data-left-margin data-top-margin data-right-margin data-bottom-margin)
	      frame
    (let* ((display (get-frame-pane frame 'display))
	   (typical-text (with-output-to-output-record (display)
			   (format display "~7F" 123.456))))
      (multiple-value-bind (width height)
	  (bounding-rectangle-size (window-viewport display))
	(setf data-left-margin
	      (+ 10
		 (bounding-rectangle-width typical-text)))
	(setf data-top-margin 0)
	(setf data-right-margin width)
	(setf data-bottom-margin (- height
				    (+ 10
				       (bounding-rectangle-height typical-text))))))))


;;; linear algebra utilities

;;; solves a lower triangular system

(defun solve-lower-tri (l x)
  (let ((ii (length x)))
    (dotimes (i ii)
      (let ((xi (aref x i)))
	(dotimes (j i)
	  (decf xi (* (aref l i j) (aref x j))))
	(setf (aref x i) (/ xi (aref l i i)))))
    x))

;;; solves an upper triangular system stored in transposed form

(defun solve-upper-tri-trans (u x)
  (let ((ii (length x)))
    (do* ((i (1- ii) (1- i))) ((< i 0))
      (let ((xi (aref x i)))
	(do ((j (1+ i) (1+ j))) ((= j ii))
	  (decf xi (* (aref u j i) (aref x j))))
	(setf (aref x i) (/ xi (aref u i i)))))
    x))

;;; in-place Cholesky decomposition of a positive definite matrix

(defun cholesky (a)
  (let ((n (array-dimension a 0)))
    (dotimes (k n)
      (let ((akk (aref a k k)))
	(dotimes (j k) (decf akk (expt (aref a k j) 2)))
	(setq akk (sqrt akk))			;told you it must be positive definite
	(setf (aref a k k) akk)
	(do ((i (1+ k) (1+ i))) ((= i n))
	  (let ((aik (aref a i k)))
	    (dotimes (j k) (decf aik (* (aref a i j) (aref a k j))))
	    (setf (aref a i k) (/ aik akk)))))))
  a)

;;; least squares

(defun general-linear-regression (value-mapper functions
				  &optional result (compute-correlation t))
  (let* ((n-coef (length functions))
	 (fx (make-array n-coef))
	 (dims (list n-coef n-coef))
	 (a (make-array dims :initial-element 0)))
    (declare (dynamic-extent fx dims a))
1    0(if (and (arrayp result)
	     (or (= (array-dimension result 0) n-coef)
		 (and (> (array-dimension result 0) n-coef)
		      (array-has-fill-pointer-p result))))
	(progn (dotimes (i n-coef) (setf (aref result i) 0.0))
	       (if (array-has-fill-pointer-p result)
		   (setf (fill-pointer result) n-coef)))
	(setq result (make-array n-coef :initial-element 0.0)))
    (flet ((total-up-values (yi &rest xs)
	     (let ((functions functions))
	       (dotimes (i n-coef)
		 (setf (aref fx i) (apply (pop functions) xs))))
	     (dotimes (i n-coef)
	       (let ((fxi (aref fx i)))
		 (incf (aref a i i) (* fxi fxi))
		 (incf (aref result i) (* fxi yi))
		 (do ((j (1+ i) (1+ j)))
		     ((= j n-coef))
		   (let* ((fxj (aref fx j)) (fxi-fxj (* fxi fxj)))
		     (incf (aref a i j) fxi-fxj)
		     (incf (aref a j i) fxi-fxj)))))))
      (declare (dynamic-extent #'total-up-values))
      (funcall value-mapper #'total-up-values))
1    0(cholesky a)
    (solve-lower-tri a result)
    (solve-upper-tri-trans a result)
    (if compute-correlation
	(let ((n 0) (sum-y 0.0) (sum-y2 0.0) (sum-fx 0.0) (sum-fx2 0.0))
	  (flet ((calc-correlation (yi &rest xs)
		   (let ((fxi (do ((j 0 (1+ j)) (functions functions) (sum 0.0))
				  ((null functions) sum)
				(incf sum (* (aref result j) (apply (pop functions) xs))))))
		     (incf n)
		     (incf sum-y yi)
		     (incf sum-y2 (* yi yi))
		     (incf sum-fx fxi)
		     (incf sum-fx2 (* fxi fxi)))))
	    (declare (dynamic-extent #'calc-correlation))
	    (funcall value-mapper #'calc-correlation))
	  (values result (/ (+ sum-fx2 (* (/ sum-y n) (- sum-y (* 2 sum-fx))))
			    (- sum-y2 (/ (* sum-y sum-y) n)))))
	result)))


;;; curves to fit

(defclass fit-curve ()
    ((name :accessor curve-name :initarg :name)
     (n-coefs :accessor curve-n-coefs :initarg :n-coefs)
     (component-functions :initarg :component-functions)
     (printer :initarg :printer :accessor curve-printer)))

(defclass linear-fit-curve (fit-curve) ())

(defmethod function-value ((fit-curve fit-curve) coefficients 
			   &rest independent-variable-values)
  (declare (dynamic-extent independent-variable-values))
  (with-slots (component-functions n-coefs) fit-curve
    (let ((total 0.0) (components component-functions))
      (dotimes (i n-coefs)
	(incf total
	      (* (aref coefficients i)
		 (apply (pop components) independent-variable-values))))
      total)))

(defmethod least-squares-fit ((fit-curve fit-curve) value-mapper coefficients)
  (with-slots (component-functions n-coefs) fit-curve
    (assert (>= (array-dimension coefficients 0) n-coefs))
    (general-linear-regression value-mapper
			       component-functions
			       coefficients)))


;;; utility component-functions

(defun unity (&rest args) (declare (ignore args)) 1)

(defun square (x) (* x x))

(defun cube (x) (expt x 3))

;;; the curves that are fitted

(defvar *known-curves* nil)

(defun def-fit-curve (name &key component-functions printer
		                (curve-class 'fit-curve))
  (setq *known-curves* (delete name *known-curves* :test #'string-equal :key #'curve-name))
  (assert (listp component-functions))
  (let ((n-coefs (length component-functions)))
    (push (make-instance curve-class
			 :name name
			 :n-coefs n-coefs
			 :component-functions component-functions
			 :printer printer)
	  *known-curves*)))

(def-fit-curve "Linear"
  :curve-class 'linear-fit-curve
  :component-functions (list #'identity #'unity)
  :printer #'(lambda (stream var coefs)
	       (format stream "~7F ~A + ~7F" (elt coefs 0) var (elt coefs 1))))

(def-fit-curve "Quadratic"
  :component-functions (list #'square #'identity #'unity)
  :printer #'(lambda (stream var coefs)
	       (format stream "~7F ~A^2 + ~7F ~A + ~7F"
		       (elt coefs 0) var (elt coefs 1) var (elt coefs 2))))

(def-fit-curve "Cubic"
  :component-functions (list #'cube #'square #'identity #'unity)
  :printer #'(lambda (stream var coefs)
	       (format stream "~7F ~A^3 + ~7F ~A^2 + ~7F ~A + ~7F"
		       (elt coefs 0) var (elt coefs 1) var (elt coefs 2) var (elt coefs 3))))




;;; curve display

;;; the default method of drawing curves

(defmethod draw-fitted-curve ((curve fit-curve) coefficients pane
			      data-x-min data-x-max data-y-min data-y-max
			      n-plotting-steps x-is-function-of-y)
  (labels ((plotter (umin umax vmin vmax drawer)
	     (let ((du (/ (- umax umin) n-plotting-steps)))
	       (do* ((u0 nil u1)
		     (v0 nil v1)
		     (u1 umin (+ u1 du))
		     (v1 (function-value curve coefficients u1)
			 (function-value curve coefficients u1)))
		    ((> u1 umax))
		 (when (and u0
			    (<= vmin v0 vmax)
			    (<= vmin v1 vmax))
		   (funcall drawer u0 v0 u1 v1)))))
	   (y=fx-drawer (u0 v0 u1 v1)
	     (draw-line* pane u0 v0 u1 v1))
	   (x=fy-drawer (u0 v0 u1 v1)
	     (draw-line* pane v0 u0 v1 u1)))
    (declare (dynamic-extent #'y=fx-drawer #'x=fy-drawer))
    (if x-is-function-of-y
	(plotter data-y-min data-y-max data-x-min data-x-max #'x=fy-drawer)
	(plotter data-x-min data-x-max data-y-min data-y-max #'y=fx-drawer))))

;;; the linear-fit-curve class has a faster method of drawing

(defmethod draw-fitted-curve ((curve linear-fit-curve) coefficients pane
			      data-x-min data-x-max data-y-min data-y-max
			      n-plotting-steps x-is-function-of-y)
  (declare (ignore n-plotting-steps))
  (labels ((linterp (x x0 x1 y0 y1)
	     (let ((d0 (- x x0)) (d1 (- x1 x)))
	       (/ (+ (* d0 y1) (* d1 y0)) (+ d0 d1))))
	   (plotter (umin umax vmin vmax drawer)
	     (let ((u0 umin)
		   (v0 (function-value curve coefficients umin))
		   (u1 umax)
		   (v1 (function-value curve coefficients umax)))
	       (macrolet ((v-clip (<< vlimit)
			    `(if (,<< v0 ,vlimit)
				 (if (,<< v1 ,vlimit)
				     (return-from plotter)
				     (setq u0 (linterp ,vlimit v0 v1 umin umax)
					   v0 ,vlimit))
				 (if (,<< v1 ,vlimit)
				     (setq u1 (linterp ,vlimit v0 v1 umin umax)
					   v1 ,vlimit)))))
		 (v-clip < vmin)
		 (v-clip > vmax))
	       (funcall drawer u0 v0 u1 v1)))
	   (y=fx-drawer (u0 v0 u1 v1)
	     (draw-line* pane u0 v0 u1 v1))
	   (x=fy-drawer (u0 v0 u1 v1)
	     (draw-line* pane v0 u0 v1 u1)))
    (declare (dynamic-extent #'y=fx-drawer #'x=fy-drawer))
    (if x-is-function-of-y
	(plotter data-y-min data-y-max data-x-min data-x-max #'x=fy-drawer)
	(plotter data-x-min data-x-max data-y-min data-y-max #'y=fx-drawer))))



;;; curve printing

(defmethod print-equation-of-curve ((frame lsq) pane)
  (with-slots (current-curve x-is-function-of-y data-points-tick
	       current-coefficients curve-correlation) frame
    (updating-output (pane :unique-id ':printed-equation
			   :cache-value (cons current-curve data-points-tick))
      (when current-curve
	(multiple-value-bind (dep-var ind-var)
	    (if x-is-function-of-y (values "X" "Y") (values "Y" "X"))
	  (format pane "~A = " dep-var)
	  (funcall (curve-printer current-curve) pane ind-var current-coefficients)
	  (format pane "~& Correlation: ~7F ~& " curve-correlation))))))


;;; interface to least-squares

(define-lsq-command (com-fit-curve :menu "Fit Curve")
    ()
  (fit-curve *application-frame*))

;;; modifying the data set invalidates the least squares fit

(defmethod add-data-point :after ((point data-point) (frame lsq))
  (with-slots (current-curve) frame
    (setf current-curve nil)))

(defmethod delete-data-point :after ((point data-point) (frame lsq) &key dummy)
  (declare (ignore dummy))
  (with-slots (current-curve) frame
    (setf current-curve nil)))

;;; here's where we can control y-as-function-of-x vs x-as-function-of-y
;;; and limited data-sets, and other variables, etc by constructing the
;;; appropriate mapper

(defmethod fit-curve ((frame lsq))
  (with-slots (current-curve current-coefficients curve-correlation
	       data-points data-points-tick x-is-function-of-y) frame
    (incf data-points-tick)
    (setf current-curve
	  (menu-choose *known-curves*
		       :label "Curve to Fit"
		       :printer #'(lambda (curve stream)
				    (write-string (curve-name curve) stream))))
    (when current-curve
      (if (>= (length data-points) (curve-n-coefs current-curve))
	  (flet ((y-as-function-of-x-value-mapper (function)
		   (dolist (point data-points)
		     (funcall function (point-y point) (point-x point))))
		 (x-as-function-of-y-value-mapper (function)
		   (dolist (point data-points)
		     (funcall function (point-x point) (point-y point)))))
	    (declare (dynamic-extent #'y-as-function-of-x-value-mapper
				     #'x-as-function-of-y-value-mapper))
	    (multiple-value-setq (current-coefficients curve-correlation)
	      (least-squares-fit current-curve
				 (if x-is-function-of-y
				     #'x-as-function-of-y-value-mapper
				     #'y-as-function-of-x-value-mapper)
				 current-coefficients)))
	  (progn
	    (notify-user frame
			 (format nil "Not enough data points to fit a ~A function"
				 (curve-name current-curve)))
	    (setq current-curve nil))))))



(define-lsq-command (com-set-lsq-options :menu "Options")
    ()
  (let* ((frame *application-frame*)
	 (stream (frame-top-level-sheet frame)))
    (with-slots (data-x-min data-y-min data-x-max data-y-max
		 current-curve x-is-function-of-y) frame
      (accepting-values (stream :own-window t :resynchronize-every-pass t)
	(multiple-value-bind (xfy ptype changed-p)
	    (accept '(member-alist (("Y is function of X" . nil)
				    ("X is function of Y" . t)))
		    :stream stream
		    :prompt nil
		    :default x-is-function-of-y
		    :query-identifier 'x-is-function-of-y)
	  (declare (ignore ptype))
	  (when changed-p
	    (setf x-is-function-of-y xfy)
	    (setf current-curve nil)))
	(fresh-line stream)
	(setf data-x-min (accept 'real :stream stream :default data-x-min :prompt "X min"))
	(fresh-line stream)
	(setf data-x-max (accept 'real :stream stream :default data-x-max :prompt "X max"))
	(fresh-line stream)
	(setf data-y-min (accept 'real :stream stream :default data-y-min :prompt "Y min"))
	(fresh-line stream)
	(setf data-y-max (accept 'real :stream stream :default data-y-max :prompt "Y max"))
	(fresh-line stream)
	(write-string "Click here to " stream)
	(accept-values-command-button (stream :query-identifier 'set-the-range)
	    (write-string "set scale to include all data points" stream)
	  (multiple-value-bind (x- y- x+ y+) (data-range frame)
	    (let ((x-extra (* 0.05 (- x+ x-)))
		  (y-extra (* 0.05 (- y+ y-))))
	      (setf data-x-min (- x- x-extra)
		    data-y-min (- y- y-extra)
		    data-x-max (+ x+ x-extra)
		    data-y-max (+ y+ y-extra))))
	  (determine-data-transform frame))))))

(define-lsq-command (com-exit-lsq :menu "Exit")
    ()
  (frame-exit *application-frame*))



#||
()
(setq *lsq* (make-application-frame 'lsq 
	      :height 500 :width 500))
(run-frame-top-level *lsq*)
||#



#||
;;; stuff removed from version 1

;;; Zooming "in" means picking a subset of the data space and magnifying the scale
;;; so that the marked data space fills the entire region on the screen.

(define-lsq-command (com-zoom-in :menu "Zoom In (magnify)") ()
  (let ((frame *application-frame*))
    (with-slots (data-left-margin data-top-margin data-right-margin data-bottom-margin
		 data-x-min data-x-max data-y-min data-y-max data-transform data-points-tick)
		frame
      (incf data-points-tick)
      (let ((start-left (/ (+ (* 2 data-left-margin) data-right-margin) 3))
	    (start-top (/ (+ (* 2 data-top-margin) data-bottom-margin) 3))
	    (start-right (/ (+ (* 2 data-right-margin) data-left-margin) 3))
	    (start-bottom (/ (+ (* 2 data-bottom-margin) data-top-margin) 3)))
	(multiple-value-bind (u0 v0 u1 v1)
	    (pointer-input-rectangle* :stream (get-frame-pane frame 'display)
				      :left start-left
				      :top start-top
				      :right start-right
				      :bottom start-bottom)
	  (multiple-value-setq (data-x-min data-y-min)
	    (untransform-position data-transform u0 v1))
	  (multiple-value-setq (data-x-max data-y-max)
	    (untransform-position data-transform u1 v0))
	  (determine-data-transform frame))))))

;;; Zooming "out" means picking a subset of the data space and shrinking the scale
;;; so that the entire old data space fits into the marked area.

(define-lsq-command (com-zoom-out :menu "Zoom Out (contract)") ()
  (let ((frame *application-frame*))
    (with-slots (data-left-margin data-top-margin data-right-margin data-bottom-margin
		 data-x-min data-x-max data-y-min data-y-max data-transform data-points-tick)
		frame
      (incf data-points-tick)
      (let ((start-left (/ (+ (* 2 data-left-margin) data-right-margin) 3))
	    (start-top (/ (+ (* 2 data-top-margin) data-bottom-margin) 3))
	    (start-right (/ (+ (* 2 data-right-margin) data-left-margin) 3))
	    (start-bottom (/ (+ (* 2 data-bottom-margin) data-top-margin) 3)))
	(multiple-value-bind (u0 v0 u1 v1)
	    (pointer-input-rectangle* :stream (get-frame-pane frame 'display)
				      :left start-left
				      :top start-top
				      :right start-right
				      :bottom start-bottom)
	  (determine-data-transform frame u0 v0 u1 v1)
	  (multiple-value-setq (data-x-min data-y-min)
	    (untransform-position data-transform data-left-margin data-bottom-margin))
	  (multiple-value-setq (data-x-max data-y-max)
	    (untransform-position data-transform data-right-margin data-top-margin)))))))
||#
