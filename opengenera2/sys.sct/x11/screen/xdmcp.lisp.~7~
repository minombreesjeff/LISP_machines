;;; -*- Mode: LISP; Syntax: COMMON-LISP; Package: X-SCREEN; Lowercase: Yes; Patch-File: Yes -*-

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; XDMCP "X Display Management Control Protocol"  from X11R5

0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defconstant (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*xdm-version-number* 01)

(defconstant 2*xdm-broadcast-query*0 1)
(defconstant 2*xdm-query*0 2)
(defconstant 2*xdm-indirect-query*0 3)
(defconstant 2*xdm-forward-query*0 4)
(defconstant 2*xdm-willing*0 5)
(defconstant 2*xdm-unwilling*0 6)
(defconstant 2*xdm-request*0 7)
(defconstant 2*xdm-accept*0 8)
(defconstant 2*xdm-decline*0 9)
(defconstant 2*xdm-manage*0 10)
(defconstant 2*xdm-refuse*0 11)
(defconstant 2*xdm-failed*0 12)
(defconstant 2*xdm-alive*0 13)
(defconstant 2*xdm-keep-alive*0 14)

;;;

(rpc:define-octet-structure (2xdm-packet0 :access-type :byte-swapped-8)
  (version (unsigned-byte 16))
  (opcode (unsigned-byte 16))
  (length (unsigned-byte 16)))



(defvar 2*xdm-sessions*0 (make-hash-table :size 10))

(defvar 2*next-session-id*0 0)

(clos:defclass2 xdm-session0 ()
    ((id :reader xdm-session-id)
     (network :initarg :network)
     (address :initarg :address)
     (host :initform nil :reader xdm-session-host)
     (display-number :initarg :display-number :reader xdm-session-display-number)
     (process :initform nil)
     (root :initform nil :accessor xdm-session-root)
     (failed :initform nil :reader xdm-session-failed)))

(clos:defmethod2 clos:initialize-instance0 :after ((session xdm-session) &key)
  (setf (clos:slot-value session 'id) (incf *next-session-id*)))

(clos:defmethod 2xdm-session-equal-p0 ((session xdm-session) display net addr)
  (clos:with-slots (display-number network address) session
    (and (eql display display-number)
	 (neti:network-eql net network)
	 (eql addr address))))

(clos:defmethod 2xdm-session-active-p 0((session xdm-session))
  (clos:with-slots (root process) session
    (and process root)))

(clos:defmethod 2xdm-session-close 0((session xdm-session))
  (clos:with-slots (id failed root host display-number) session
    (when (null failed)	
      (setf failed "Session terminated."))
      (let ((screen (find-x-screen :host host :display-number display-number)))
	(when screen
	  (x-console-shutdown screen :abort t)))
    (remhash id *xdm-sessions*)))

(clos:defmethod 2xdm-session-top-level0 ((session xdm-session))
  (clos:with-slots (id host display-number root failed) session
    (unwind-protect
	;; Because this can run before we have complete namespace
	;; services, we have to force the services on some hosts
	(condition-case (error)
	     (progn
	       (condition-bind
		 ((net:host-does-not-support-service
		    #'neti:host-does-not-support-protocol-use-first-path))
		 (setf root (start-x-screen :host host :display-number display-number)))
	       (process-wait "Session Active"
		 #'(lambda (session)
		     (or (null (xdm-session-root session))
			 (xdm-session-failed session)))
		 session))
	   (error nil))				1;Punt if we lose, the X-server should retry.
0      (xdm-session-close session))))

(clos:defmethod 2xdm-session-manage0 ((session xdm-session))
  (clos:with-slots (process failed host network address) session
    (when (null host)
      (setf host (neti:get-host-from-address address network)))
    ;; Try to get a real host object
    (send host :check-validity nil t)
    (or failed
	(progn
	  (unless process
	    (setf process
		  (process:make-process (format nil "XDM Server for ~A" host)
					:initial-function #'xdm-session-top-level
					:initial-function-arguments (list session)
					:warm-boot-action #'process:process-warm-boot-reset)))
	  nil))))

;;;

(tcp:add-udp-port-for-protocol :xdmcp 177)

(net:define-server 2:xdmcp0 (:medium :udp :connection conn :simple-p t :trusted-p trusted-p)
   1;;Only run when the the system is completely booted
0   (when (and (null si:*system-initialization-in-progress*)
	      (eq neti:*network-enabled* t)
	      neti:*namespaces-initialized*)
     (multiple-value-bind (pkt start end)
	 (send conn :read-input-buffer t t)
       (when (and pkt
		  (eql 1 (xdm-packet-version pkt start)))
	 (let ((pos (+ start 6))
	       (rpkt nil) rstart rpos)
	   1;; Some functions to extract data from the incoming packets
0	   (labels ((start-reply (opcode)
		      (multiple-value-setq (rpkt rstart nil)
			(send conn :get-output-buffer))
		      (setf (xdm-packet-version rpkt rstart) *xdm-version-number*)
		      (setf (xdm-packet-opcode rpkt rstart) opcode)
		      (setf rpos (+ rstart 6)))
		    (get-card8 ()
		      (prog1 (aref pkt pos)
			     (incf pos)))
		    (get-card16 ()
		      (prog1 (rpc::byte-swapped-8-aref-16 pkt pos)
			     (incf pos 2)))
		    (skip-card16 ()
		      (get-card16)
		      nil)
		    (get-card32 ()
		      (prog1 (rpc::byte-swapped-8-aref-32 pkt pos)
			     (incf pos 4)))
		    (get-array8 ()
		      (let* ((len (get-card16))
			     (result (make-array len :element-type '(unsigned-byte 8))))
			(dotimes (i len)
			  (setf (svref result i) (get-card8)))
			result))
		    (skip-array8 ()
		      (get-array8)
		      nil)
		    (skip-array16 ()
		      (let ((len (get-card8)))
			(dotimes (i len)
			  (get-card16))
			nil))
		    (skip-arrayofarray8 ()
		      (let ((len (get-card8)))
			(dotimes (i len)
			  (get-array8))
			nil))
		    (put-card8 (data)
		      (setf (aref rpkt rpos) data)
		      (incf rpos))
		    (put-card16 (data)
		      (setf (rpc::byte-swapped-8-aref-16 rpkt rpos) data)
		      (incf rpos 2))
		    (put-card32 (data)
		      (setf (rpc::byte-swapped-8-aref-32 rpkt rpos) data)
		      (incf rpos 4))
		    (put-array8 (data)
		      (let ((len (length data)))
			(put-card16 len)
			(dotimes (i len)
			  (put-card8 (char-code (aref data i))))
			nil)))
	     (select (xdm-packet-opcode pkt start)
	       ((*xdm-query*
		  *xdm-broadcast-query*
		  *xdm-indirect-query*)
		(skip-arrayofarray8)		1;authentication-names
0		(when trusted-p
		  (start-reply *xdm-willing*)
		  (put-array8 "")
		  (put-array8 (send net:*local-host* :pretty-name))
		  (put-array8 "")))
	       ((*xdm-forward-query*)
		(let ((client-address (get-array8))
		      (client-port (get-array8)))
		  (skip-arrayofarray8)		1;authentication-names
0		  (when trusted-p
		    (setf (symbol-value-in-instance conn 'tcp::foreign-address)
			  (rpc::byte-swapped-8-aref-32 client-address 0))
		    (setf (symbol-value-in-instance conn 'tcp::foreign-port)
			  (rpc::byte-swapped-8-aref-16 client-port 0))
		    (start-reply *xdm-willing*)
		    (put-array8 "")
		    (put-array8 (send net:*local-host* :pretty-name))
		    (put-array8 ""))))
	       ((*xdm-request*)
		(let ((display-number (get-card16)))
		  1;; The following items are ignored since we don't use them.
0		  (skip-array16)		1;connection-types 
0		  (skip-arrayofarray8)		1;connection-addresses
0		  (skip-array8)			1;Authentication name
0		  (skip-array8)			1;Authentication data
0		  (skip-arrayofarray8)		1;authorization-names
0		  (skip-array8)			1;manufacturer-display-id
0		  (let ((network (send conn :network))
			(address (send conn :foreign-address)))
		    (when (and trusted-p	1;Only trusted hosts, please
0			       1;; When setting site, some things can be inconsistent, so we
0			       1;; ignore0 1requests if the host object is uninterned or the
0			       1;; host is not at the0 1local site yet
0			       (neti:ns-eq net:*local-site* (send net:*local-host* :site)))
		      (let
			((session
			   1;; Use a previously defined session, if there is one.
0			   (or (loop for session being the hash-elements of *xdm-sessions*
				     when (xdm-session-equal-p session display-number network
							       address)
				       return session)
			       1;; There isn't a session so create a new one
0			       (clos:make-instance 'xdm-session
						   :network network
						   :address address
						   :display-number display-number))))
			1;; Only respond if this session is not active to avoid restarting an
			;; existing session.
0			(when (not (xdm-session-active-p session))
			  (let ((id (xdm-session-id session)))
			    (setf (gethash id *xdm-sessions*) session)
			    (start-reply *xdm-accept*)
			    (put-card32 id)
			    (put-array8 "")
			    (put-array8 "")
			    (put-array8 "")
			    (put-array8 ""))))))))
	       ((*xdm-manage*)
		(let ((id (get-card32))
		      (display-number (get-card16)))
		  (skip-array8)			1;display-class
0		  (let ((session (gethash id *xdm-sessions*)))
		    (cond ((and session
				(eql display-number (xdm-session-display-number session)))
			   (when (xdm-session-manage session)
			     (start-reply *xdm-failed*)
			     (put-card32 id)
			     (put-array8 "")))
			  (t
			   (start-reply *xdm-refuse*)
			   (put-card32 id))))))
	       ((*xdm-keep-alive*)
		(skip-card16)			1;display-number
0		(let* ((session-id (get-card32))
		       (session (gethash session-id *xdm-sessions*)))
		  (start-reply *xdm-alive*)
		  (put-card8 (if session 1 0))
		  (put-card32 session-id)))))
	   (when (and rpkt
		      (= pos end))
	     (setf (xdm-packet-length rpkt rstart) (- rpos rstart 6))
	     (send conn :advance-output-buffer rpos)
	     (send conn :force-output)))))))


1;;; These X sessions disappear whenever the network is reset, so clean them out at various
;;; times.
0(defun 2cleanup-xdmcp-sessions 0()
  (unwind-protect 
      (maphash #'(lambda (key session)
		   (ignore key)
		   (xdm-session-close session))
	       *xdm-sessions*)
    (clrhash *xdm-sessions*)))

(si:add-initialization "Shutdown XDMCP Sessions" '(cleanup-xdmcp-sessions)
		       nil 'net:after-network-initialization-list)
(si:add-initialization "Shutdown XDMCP Sessions" '(cleanup-xdmcp-sessions)
		       nil 'si:site-initialization-list)
(si:add-initialization "Shutdown XDMCP Sessions" '(cleanup-xdmcp-sessions)
		       nil 'si:warm-initialization-list)
