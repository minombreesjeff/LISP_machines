;;; -*- Base: 10; Package: X-SCREEN; Mode: LISP; Syntax: Common-lisp; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; From an original prototype by Bob Scheifler.  

;;; Principal contributers:  Charles Hornig of Symbolics, Chris Lindblad of
;;; ILA, and Bill York of ILA

(defflavor x-screen-program ((console nil)) (dw::local-program)
  :readable-instance-variables)

(defmethod (remote-program-p x-screen-program) () t)

(eval-when (compile load eval)
  (pushnew '(:x-screen x-screen-program) dw::*remote-program-mixins* :test #'equal))

(defmethod (x-screen-program-console-flavor x-screen-program :default) (&rest options)
  (declare (ignore options))
  'x-console)

(defmethod (x-screen-program-console-options x-screen-program :default) (&rest options)
  options)

(defwhopper (x-screen-program-start x-screen-program) (&rest options)
  (unwind-protect-case ()
      (progn
	(lexpr-continue-whopper options)
	(xlib:window-id (x-console-window console)))
    (:abort
      (when (and console (x-console-display console))
	(x-console-shutdown console :abort t)))))

(defmethod (x-screen-program-start x-screen-program :before) (&rest options)
  ;; It's not restartable yet.
  (si:with-rem-keywords (options options '(:restartable))
    (setq console
	  (apply #'make-instance (apply #'x-screen-program-console-flavor self options)
		 :remote-program self 
		 (apply #'x-screen-program-console-options self options))))
  (with-x-console-restart (console :shutdown)
    (sys:console-initialize console)))

(defmethod (x-screen-program-client-message-event x-screen-program :default) (format data)
  (declare (ignore format data)))

(dw:define-remote-program-framework genera-x-screen
  :selectable (:x-screen))

(defmethod (x-screen-program-console-flavor genera-x-screen)
	   (&rest options &key activity &allow-other-keys)
  (if (and (null activity) (null sys:*main-console*))
      'x-main-console
    'x-console))

(defvar *genera-x-screen-activity-options* nil)

(defun define-genera-x-screen-activity-options-internal (activity-name &rest options)
  (pushnew (cons activity-name (copy-list options)) *genera-x-screen-activity-options*
	   :test #'string-equal
	   :key #'first
	   :replace t))

(defmacro define-genera-x-screen-activity-options (activity-name &body options)
  `(define-genera-x-screen-activity-options-internal ',activity-name ,@options))

(define-genera-x-screen-activity-options "Flavor Examiner" :icon-name "FlavEx")
(define-genera-x-screen-activity-options "Document Examiner" :icon-name "DocEx")
(define-genera-x-screen-activity-options "Metering Interface" :icon-name "Metering")
(define-genera-x-screen-activity-options "Editor" :window-width 785)
(define-genera-x-screen-activity-options "File System Operations" :icon-name "FSMaint")

(defmethod (x-screen-program-console-options genera-x-screen)
	   (&rest options &key activity &allow-other-keys)
  (append
    options
    (cdr (assoc activity *genera-x-screen-activity-options* :test #'string-equal))
    (if activity
	(list :icon-name activity
	      :resource-name (loop with name = (substring activity 0)
				   for i below (length name)
				   when (char= #\sp (aref name i))
				     do (setf (aref name i) #\-)
				   finally (return (string-downcase name)))
	      :window-name (format nil "~A on ~A"
				   activity
				   (send net:*local-host* :pretty-name))
	      :system-menu-enabled nil
	      :select-keys-enabled nil)
      (list :icon-name (if (send net:*local-host* :get :short-name)
			   (send net:*local-host* :short-name)
			   (send net:*local-host* :pretty-name))
	    :default-who-line-p t))))

(defmethod (x-screen-program-start-activity genera-x-screen)
	   (&key activity restartable &allow-other-keys)
  (let ((console (x-screen-program-console self)))
    (with-x-console-restart (console :shutdown)
      (sys:select-activity (sys:activity-description (cli::lookup-activity activity))
			   :console console))
    (setf (x-console-restartable console) restartable)))

(defmethod (x-screen-program-start-genera genera-x-screen) 
	   (&key restartable &allow-other-keys)
  (let ((console (x-screen-program-console self)))
    (with-x-console-restart (console :shutdown)
      (cond ((cli::console-master-p console)
	     (tv:delaying-screen-management	;don't autoexpose the Lisp Listener
						;before we arrest its process
	       (let* ((too-small (multiple-value-bind (width height)
				     (send (sys:console-screen console) :inside-size)
				   (or (< width 750) (< height 500))))
		      (window
			(si:find-or-create-initial-lisp-listener
			  (sys:console-screen console) (not too-small)))
		      (process (send window :process))
		      (turn-servers-on
			(and (not (equalp (send net:*local-host* :server-machine) "YES"))
			     (not (eq net:*local-site* neti:*distribution-site*)))))
		 (unwind-protect
		     (progn
		       (process:enable-arrest-reason process :herald)
		       (send window :select)
		       (send window :clear-window)
		       (si:do-initial-dialogue window turn-servers-on)))
		 (setq tv:initial-lisp-listener window)
		 (process-wait "Finish disk save" #'(lambda () (null si:*disk-saving*)))
		 (process:disable-arrest-reason process :herald))))
	    (t
	     (sys:select-activity "Lisp" :console console))))
    (setf (x-console-restartable console) restartable)))

(defmethod (x-screen-program-start genera-x-screen)
	   (&rest options &key activity &allow-other-keys)
  (let ((console (x-screen-program-console self)))
    (apply #'process:process-run-function
	   `(:name ,(format nil "Start ~A" (sys:console-screen console))
	     :priority ,(process:make-process-priority :fg 0 :preemptive t)
	     :system-process t
	     :flags (:no-background-interactor ,(cli::console-master-p console)))
	   (if activity #'x-screen-program-start-activity #'x-screen-program-start-genera)
	   self options)))

(compile-flavor-methods genera-x-screen)
(dw::compile-remote-program-combination genera-x-screen :x-screen)

(defun start-x-screen (&rest options
		       &key host remote-program-name activity geometry
		       &allow-other-keys)
  (declare (values window-id))
  (declare (arglist
	     &rest options
	     &key host display-number screen-number reuse-old-screen-p
	     window-geometry initial-state
	     remote-program-name activity
	     foreground-color background-color border-color
	     border-width who-line-p
	     restartable compatible-color-p
	     &allow-other-keys))
  (unless (typep host 'net:host) (error "~S is not a host" host))
  (unless (null activity)
    (let ((activity (cli::lookup-activity activity)))
      (unless (activity-acceptable-for-x-screen-p activity)
	(error "The ~A activity doesn't work on single-activity X screens"
	       (sys:activity-description activity)))))
  (si:with-rem-keywords (options options '(:remote-program-name :activity))
    (let ((options
	    (append
	      options
	      `(:user-specified-size-p ,(not (null (string-search-char #\x geometry))))
	      `(:user-specified-position-p ,(not (null (string-search-set "+-" geometry))))
	      (and activity `(:activity ,(sys:activity-description activity))))))
      (let* ((remote-program-name-entry-name
	       (cond ((null remote-program-name)
		      (dw::find-remote-program "Genera X Screen"
					       :remote-system-type :x-screen))
		     ((symbolp remote-program-name) remote-program-name)
		     (t
		      (dw::find-remote-program remote-program-name
					       :remote-system-type :x-screen)))))
	(if remote-program-name-entry-name
	    (apply #'x-screen-program-start
		   (dw:make-program remote-program-name-entry-name
				    :remote-system-type :x-screen)
		   options)
	  (error "No remote program ~S" remote-program-name))))))

#+VLM
(defun start-x-screen-via-console-channel ()
  (when (= (sys:vlm-console-channel) -1)
    (error "No console channel available!"))
  (let ((cc (sys:emb-pointer-to-pma (sys:vlm-console-channel))))
    (let* ((network (net:local-network-of-type :internet))
	   (host (net:get-host-from-address (sys:emb-console-host-address cc) network))
	   (geometry (sys:copy-emb-string (sys:emb-console-geometry cc)))
	   (foreground-color (sys:copy-emb-string (sys:emb-console-foreground-color cc)))
	   (background-color (sys:copy-emb-string (sys:emb-console-background-color cc)))
	   (border-color (sys:copy-emb-string (sys:emb-console-border-color cc))))
      (apply #'start-x-screen
	     :host host
	     :protocol :VLM
	     :run-lights-positioner #'enable-console-channel-run-lights
	     :run-lights-remover #'disable-console-channel-run-lights
	     ;; Allow the VLM command to punt defaults to Genera
	     `(,@(when (plusp (sys:emb-console-display-number cc))
		   `(:display-number ,(sys:emb-console-display-number cc)))
	       ,@(when (plusp (sys:emb-console-screen-number cc))
		   `(:screen-number ,(sys:emb-console-screen-number cc)))
	       ,@(when geometry
		   `(:window-geometry ,geometry))
	       ,@(when foreground-color
		   `(:foreground-color ,foreground-color))
	       ,@(when background-color
		   `(:background-color ,background-color))
	       ,@(when (plusp (sys:emb-console-border-width cc))
		   `(:border-width ,(sys:emb-console-border-width cc)))
	       ,@(when border-color
		   `(:border-color ,border-color))
	       ,@(select (sys:emb-console-initial-state cc)
		   (sys:%emb-console-initial-state-unspecified nil)
		   (sys:%emb-console-initial-state-iconic `(:initial-state :iconic))
		   (sys:%emb-console-initial-state-normal `(:initial-state :normal))))))))

#+VLM
(defun enable-console-channel-run-lights (display-number screen-number window-id
							 nlights width height x y dx dy
							 foreground background plane-mask)
  (declare (ignore display-number screen-number))
  (xlib::with-console-channel-buffer (sys:%emb-console-command-enable-run-lights :output
				       :data-length sys:emb-console-enable-run-lights
				       :wait-p nil)
    ((erlc)
     (setf (sys:emb-console-run-lights-window-id erlc) window-id
	   (sys:emb-console-run-lights-n-lights erlc) nlights
	   (sys:emb-console-run-lights-width erlc) width
	   (sys:emb-console-run-lights-height erlc) height
	   (sys:emb-console-run-lights-first-x erlc) x
	   (sys:emb-console-run-lights-first-y erlc) y
	   (sys:emb-console-run-lights-x-spacing erlc) dx
	   (sys:emb-console-run-lights-y-spacing erlc) dy
	   (sys:emb-console-run-lights-foreground erlc) foreground
	   (sys:emb-console-run-lights-background erlc) background
	   (sys:emb-console-run-lights-plane-mask erlc) (sys:%logldb (byte 32 0) plane-mask)))
    ((erlc))))

#+VLM
(defun disable-console-channel-run-lights (display-number screen-number window-id)
  (declare (ignore display-number screen-number window-id))
  (xlib::with-console-channel-buffer (sys:%emb-console-command-disable-run-lights
				       :output :wait-p nil)
    ((drlc)
     (declare (ignore drlc)))
    ((drlc))))

(defun find-x-screen (&key host (display-number 0) (screen-number 0) window-id)
  (declare (values screen console remote-program)
	   (arglist &key host display-number screen-number window-id))
  (loop for console in sys:*consoles*
	when (and (typep console 'x-console)
		  (neti:ns-eq host (x-console-host console))
		  (= display-number (x-console-display-number console))
		  (= screen-number (x-console-screen-number console))
		  (eql window-id (xlib:window-id (x-console-window console))))
	  return (values (sys:console-screen console)
			 console
			 (x-console-remote-program console))))

(defun halt-x-screen (&rest args &key kill &allow-other-keys)
  (declare (arglist &key host display-number screen-number window-id kill))
  (multiple-value-bind (screen console remote-program)
      (si:with-rem-keywords (args args '(:kill))
	(apply #'find-x-screen args))
    (declare (ignore screen remote-program))
    (when console (x-console-shutdown console :kill kill))))

(defmethod (activity-acceptable-for-x-screen-p cli::compatible-activity) ()
  cli::create-p)

(defmethod (activity-acceptable-for-x-screen-p cli::program-activity) ()
  t)

(defun activity-name-acceptable-for-x-screen-p (activity-name)
  (activity-acceptable-for-x-screen-p (cli::lookup-activity activity-name)))

(dw:define-presentation-type acceptable-x-activity-name ()
   :description "an activity acceptable for an X screen"
   :abbreviation-for `((and sys:activity-name
			    (satisfies activity-name-acceptable-for-x-screen-p))))

(cp:define-command (com-start-x-screen
		     :command-table "User"
		     :provide-output-destination-keyword nil)
    ((host 'net:host :confirm t :documentation "The host for the screen.")
     &key
     (display 'integer :default 0 :documentation "The number of the display.")
     (screen 'integer :default 0 :documentation "The number of the screen.")
     (program '((dw::remote-program-name :remote-system-type :x-screen))
	      :prompt "remote program name"
	      :default "Genera X Screen"
	      :documentation "The name of the remote program to use.")
     (activity '((token-or-type (("None" . nil)) acceptable-x-activity-name))
	       :prompt "activity name" :default nil :provide-default t
	       :Documentation "The name of the activity to use.")

     (reuse 'boolean :default t :mentioned-default nil
	    :documentation "Whether to reuse an old screen or not.")

     (geometry 'string :default nil :provide-default nil :display-default nil
	       :documentation
	       "An X window geometry specification (for example 785x800+100+100)")

     (foreground 'string :default nil :provide-default nil :display-default nil
		 :documentation "The foreground color.")
     (background 'string :default nil :provide-default nil :display-default nil
		 :documentation "The background color.")

     (border-width 'integer :default nil :provide-default nil :display-default nil
		   :documentation "The width of the window border (pixels).")
     (border-color 'string :default nil :provide-default nil :display-default nil
		   :documentation "The color of the border.")

     (who-line '((alist-member :alist (("Yes" . t) ("No" . nil) ("Default" . :default))))
	       :default :default :documentation "Whether or not to include a who line.")
     (compatible-color '((alist-member
			   :alist (("Yes" . t) ("No" . nil) ("Default" . :default))))
		       :default :default
		       :documentation "Whether or not the screen supports compatible color."
		       :when (flavor:find-flavor 'x-colorcompat-real-screen nil))
     (initial-state '(member :normal :iconic) :default :normal
		    :documentation "Initial state of the window."))
   (condition-bind ((net:host-does-not-support-service
		      #'neti:host-does-not-support-protocol-specify-path-handler))
     (apply #'start-x-screen 
	    `(:host ,host
	      :display-number ,display
	      :screen-number ,screen
	      :remote-program-name ,program
	      :reuse-old-screen-p ,reuse 
	      :window-geometry ,geometry 
	      :initial-state ,initial-state
	      :border-width ,border-width
	      :foreground-color ,foreground
	      :background-color ,background
	      :border-color ,border-color
	      :activity ,activity
	      :restartable t
	      ,@(and (neq who-line :default) `(:who-line-p ,who-line))
	      ,@(and (neq compatible-color :default)
		     `(:compatible-color-p ,compatible-color))))))

(dw:define-presentation-type x-screen ()
   :no-deftype t
   :description "X screen"
   :parser ((stream &key type initially-display-possibilities)
	    (values
	      (dw:complete-from-sequence
		(loop for screen in tv:all-the-screens
		      when (typep screen 'x-real-screen)
			collect screen)
		stream
		:name-key #'tv:sheet-name
		:initially-display-possibilities initially-display-possibilities
		:partial-completers '(#\Space)
		:type type)))
   :printer ((screen stream)
	     (write-string (tv:sheet-name screen) stream)))

(defun default-x-screen ()
  (or (let ((superior (tv:console-default-superior)))
	(and (typep superior 'x-real-screen)
	     superior))
      (loop for screen in tv:all-the-screens
	    when (typep screen 'x-real-screen)
	      collect screen into screens
	    finally
	      (when (= (length screens) 1)
		(return (first screens))))))

(cp:define-command (com-halt-x-screen :command-table "User")
    ((screen '((token-or-type (:all) x-screen))
	     :default (default-x-screen)
	     :provide-default (default-x-screen)
	     :display-default (default-x-screen)
	     :documentation "The X screen to halt.")
     &key
     (kill 'boolean
	   :default nil :mentioned-default t
	   :documentation "Kill the screen too."))
   (loop with screens = (if (eq screen :all)
			    (loop for screen in tv:all-the-screens
				  when (typep screen 'x-real-screen)
				    collect screen)
			  (list screen))
	 with superior = (tv:console-default-superior)
	 for screen in screens
	 unless (eq screen superior)
	   do (format t "~&Halting ~A ... " (tv:sheet-name screen))
	      (force-output)
	      (x-console-shutdown (send screen :console) :kill kill)
	      (format t "done.~%")
	 finally
	   (when (member superior screens)
	     (format t "~&Halting ~A in background.~%" (tv:sheet-name superior))
	     (finish-output)
	     (let ((console (send superior :console)))
	       (process:process-run-function
		 `(:name ,(format nil "Halt ~A" (tv:sheet-name superior))
		   :priority ,(process:make-process-priority :fg 5 :preemptive t)
		   :system-process t
		   :flags (:no-background-interactor ,(cli::console-master-p console)))
		 #'x-console-shutdown console :kill kill)))))

(cp:define-command (com-show-x-keyboard-mapping :command-table "User")
    ((screen 'x-screen
	     :default (default-x-screen)
	     :provide-default (default-x-screen)
	     :display-default (default-x-screen)
	     :documentation "The X screen to use for the mapping.")
     &key
     (all 'boolean
	  :prompt "show all mappings"
	  :default nil
	  :mentioned-default t
	  :documentation "Whether to show all mappings, instead of just the interesting ones.")
     (match 'string
	    :prompt "show mappings for the Genera keys matching the substring"
	    :default nil
	    :documentation
	    "A string to match Genera key names against to determine which mappings to print."))
   (x-console-describe-keyboard-mapping (send screen :console) :all all :match match))

(cp:define-command (com-show-x-font-mapping :command-table "User")
    ((screen 'x-screen
	     :default (default-x-screen)
	     :provide-default (default-x-screen)
	     :display-default (default-x-screen)
	     :documentation "The X screen to use for the mapping."))
   (x-console-describe-font-mapping (send screen :console)))

(defun keyboard-signature-name-p (x)
  (cl::member x *keyboard-signatures* :key #'keyboard-signature-name))

(cp:define-command (com-set-x-keyboard-mapping :command-table "User")
    ((screen 'x-screen
	     :default (default-x-screen)
	     :provide-default (default-x-screen)
	     :display-default (default-x-screen)
	     :documentation "The X screen to use for the mapping.")
     (keyboard-signature-type `((member ,@(loop for x in *keyboard-signatures*
					       collect (keyboard-signature-name x)))
				)
			      :documentation "Keyboard signature type"))
   (console-set-keyboard-type (send screen :console) keyboard-signature-type))
