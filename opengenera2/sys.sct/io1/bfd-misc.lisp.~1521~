;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Font editor support: Miscellaneous BFD operations.

;;; This does what the font editor wants.
(defun store-bcd-in-bfd-and-font (bfd bcd)
  (let ((fontname (bfd-name bfd))
	(code (bcd-char-code bcd)))
    (when ( code (length bfd))
      (sys:array-grow bfd (+ code 15.)))
    (maxf (fill-pointer bfd) (1+ code))
    (setf (aref bfd code) bcd)
    (let ((font (and (boundp fontname) (symbol-value fontname))))
      (if (not (typep font 'font))
	  ;; Creating for first time, make new and store.
	  (set fontname (font-from-bfd bfd))
	(let ((available-rw (available-raster-width-for-bcd-in-font bcd font))
	      (lkt (font-left-kern-table font))
	      (cwt (font-char-width-table font))
	      (width (bcd-raster-width bcd)))
	  (if (or
		  ;;char code past end of font?
		  (> code (font-fill-pointer font))
		  ;;Too wide to fit in available width?
		  (> width available-rw)
		  ;; A-machine: doesn't have the exact-right number of sub-characters
		  #+cadr
		  ( (fast-ceiling available-rw 32.) (fast-ceiling width 32.))
		  ;;Too high to fit in font at all?
		  (> (bcd-raster-height bcd) (font-raster-height font))
		  ;;Will need to add left kern table?
		  (and (null lkt)
		       (or (> (bcd-left-kern bcd) 0)
			   (> (- width (bcd-left-kern bcd))
			      available-rw)))
		  ;;Will need to add char-width-table?
		  (and (null cwt)
		       ( (bcd-set-width bcd) (font-char-width font))))
	      ;;Punt and make a whole new one.
	      (let ((new-font (font-from-bfd bfd)))
		(structure-forward font new-font)
		(set fontname new-font))
	    ;;We might be storing something with zero raster width, like a space.
	    (let ((cet (font-chars-exist-table font)))
	      (when cet
		(when ( code (sys:array-length cet))
		  (sys:adjust-array-size cet (1+ code)))
		(setf (aref-cet cet code) t)))
	    (when lkt
	      (when ( code (sys:array-length lkt))
		(sys:adjust-array-size lkt (1+ code)))
	      (setf (aref lkt code) (bcd-left-kern bcd)))
	    (when cwt
	      (when ( code (sys:array-length cwt))
		(sys:adjust-array-size cwt (1+ code)))
	      (setf (aref cwt code) (bcd-set-width bcd)))
	    (store-bcd-pixels-in-font bcd font)))))))

(defun available-raster-width-for-bcd-in-font (bcd font)
  (let ((code (bcd-char-code bcd))
	(fit (font-indexing-table font)))
    (if fit
	(let ((dfit (if (< (1+ code) (vector-length fit))
			(- (aref fit (1+ code)) (aref fit code))
			-1)))
	  #-cadr dfit
	  #+cadr (* (font-raster-width font) dfit))
	(let ((rw (font-raster-width font)))
	  (if ( (* rw (1+ code)) (decode-raster-array font))
	      rw -1)))))

#+cadr
(defun store-bcd-pixels-in-font (bcd font)
  (using-resource (bbfont 2d-indirect-art-1b-array font)
    (bitblt-bcd-into-afont-words bcd (bcd-char-code bcd) font bbfont t)))
#-cadr
(defun store-bcd-pixels-in-font (bcd font)
  (let ((fit (font-indexing-table font))
	(code (bcd-char-code bcd))
	(lk (bcd-left-kern bcd))
	(tk (bcd-top-kern bcd))
	(rw (bcd-raster-width bcd))
	(rh (bcd-raster-height bcd)))
    (multiple-value-bind (font-raster-left char-raster-left frw)
	(if fit
	    (let ((l (aref fit code)))
	      (values l l (- (aref fit (1+ code)) (aref fit code))))
	    (let ((fl (* code (font-raster-width font))))
	      (values fl (- fl lk) (font-raster-width font))))
      (%draw-rectangle frw (font-raster-height font)
		       font-raster-left 0
		       tv:alu-andca font)
      (bitblt tv:alu-seta rw rh bcd 0 0 font char-raster-left (- tk)))))

(defun fill-in-bfd-from-bfd (target-name fill-from-name)
  (let ((target-bfd (get-bfd target-name))
	 (fill-bfd (get-bfd fill-from-name))
	 (culprits ()))
    (setq target-name (bfd-name target-bfd))
    (let ((target-fp (fill-pointer target-bfd))
	  (fill-fp (fill-pointer fill-bfd))
	  (raise-baseline (- (bfd-baseline target-bfd) (bfd-baseline fill-bfd))))
      (when ( raise-baseline 0)
	(format t "~&Raise baseline ~d from fill ~s to target ~s"
		raise-baseline fill-bfd target-bfd))
      (loop for char-code below (min target-fp fill-fp)
	     when (null (aref target-bfd char-code))
		do (setf (aref target-bfd char-code)
			 (copy-bcd (aref fill-bfd char-code) char-code raise-baseline))
		   and do (push char-code culprits))
      (when (> fill-fp target-fp)
	(loop for char-code from target-fp below fill-fp
	      do (vector-push-extend target-bfd
				    (let ((fill-bcd (aref fill-bfd char-code)))
				      (when fill-bcd
					(push char-code culprits)
					(copy-bcd fill-bcd char-code
						  raise-baseline)))))))
    (makunbound target-name)
    (si:nremprop target-name 'bfont-described)
    (cl:map 'cl:string #'code-char (nreverse culprits))))

#+Franz ;;This should probably be merged into the above, fquerying when a "useless" one
;;is found, including a "P" which won't ask about all the rest.
(defun clean-out-useless-bcds (bfd)
  (setq bfd (get-bfd bfd))
  (loop for bcd being bfd-elements of bfd using i
	when (and (zerop (bcd-raster-width bcd))
		  ( (bcd-char-code bcd) (char-code #\space)))
	  do (setf (aref bfd i) nil)
	  and collect (code-char (bcd-char-code bcd))))

;;Make it inverse video
(defun make-white-on-black-bfd (name new-name)
  (let* ((bfd (find-bfd name))
	 (len (bfd-fill-pointer bfd))
	 (line-spacing (bfd-line-spacing bfd))
	 (new-bfd (make-bfont-descriptor
		    :length (max #o200 len)
		    :fill-pointer (bfd-fill-pointer bfd)
		    :name new-name
		    :line-spacing line-spacing
		    :baseline (bfd-baseline bfd)
		    :char-width (bfd-char-width bfd)
		    :plist (let ((old-w (bfd-blinker-width bfd))
				(old-h (bfd-blinker-height bfd)))
			     `(:blinker-width ,old-w
			       :blinker-height ,old-h)))))
    (loop for bcd being bfd-elements of bfd using ch
	  do (setf (aref new-bfd ch)
		   (make-white-on-black-bcd bcd line-spacing)))
    (setf (get new-name 'bfont-descriptor) new-bfd)
    new-bfd))

(defun make-white-on-black-bcd (bcd line-spacing)
  (let* ((left (- (max 0 (bcd-left-kern bcd))))
	 (right (max (bcd-set-width bcd) (- (bcd-raster-width bcd) (bcd-left-kern bcd))))
	 (width (- right left))
	 (height (max line-spacing (bcd-raster-height bcd))))
    (let ((new-bcd (make-bchar-descriptor
		     :dimensions (bitbltable-dims width height)
		     :char-code (bcd-char-code bcd)
		     :set-width (bcd-set-width bcd)
		     :left-kern (max 0 (bcd-left-kern bcd))
		     :top-kern (bcd-top-kern bcd)
		     :raster-width width
		     :raster-height height
		     :plist (copy-list (bcd-plist bcd)))))
      (unless (or (zerop width) (zerop height))
	(sys:%draw-rectangle width height 0 0 tv:alu-seta new-bcd))
      (unless (or (zerop (bcd-raster-width bcd))
		  (zerop height))
	(bitblt tv:alu-andca (bcd-raster-width bcd) (bcd-raster-height bcd)
		bcd 0 0
		new-bcd (- (min 0 (bcd-left-kern bcd))) 0))
      new-bcd)))

(defun make-boxed-bfd (old-bfd new-name)
  (let* ((bfd (find-bfd old-bfd))
	 (len (bfd-fill-pointer bfd))
	 (line-spacing (bfd-line-spacing bfd))
	 (new-bfd (make-bfont-descriptor
		    :length (max #o200 len)
		    :fill-pointer (bfd-fill-pointer bfd)
		    :name new-name
		    :line-spacing line-spacing
		    :baseline (bfd-baseline bfd)
		    :char-width (bfd-char-width bfd)
		    :plist (let ((old-w (bfd-blinker-width bfd))
				(old-h (bfd-blinker-height bfd)))
			     `(:blinker-width ,old-w
			       :blinker-height ,old-h)))))
    (loop for bcd being bfd-elements of bfd using ch
	  do (setf (aref new-bfd ch)
		   (make-boxed-bcd new-bfd bcd)))
    (setf (get new-name 'bfont-descriptor) new-bfd)
    (makunbound new-name)
    (si:nremprop new-name 'bfont-described)
    new-name))

(defun make-boxed-bcd (bfd old-bcd)
  (let ((baseline (bfd-baseline bfd)))
    (multiple-value-bind (new-bcd new-x-offset)
	(extend-bcd old-bcd baseline
		    :left -1
		    :right (bcd-set-width old-bcd)
		    :top baseline :bottom -2)
      (flet ((rect (width height x y)
	       (bitblt tv:alu-ior width height tv:33%-gray 0 0 new-bcd x y)))
	(flet ((side (x)
		 (rect 1 (+ baseline 2) (- x new-x-offset) 0))
	       (topbot (y)
		 (rect (- (1+ (bcd-set-width new-bcd)) -1) 1 (- (- new-x-offset) 1) y)))
	  (side -1)
	  (side (1- (bcd-set-width new-bcd)))
	  (topbot 0)
	  (topbot (- baseline 1))))
      new-bcd)))

(defun extend-bcd (old-bcd baseline &key left top right bottom)
  (unless (zerop (bcd-top-kern old-bcd))
    (error "Foo, can't hack top kern"))
  ;; numbers w.r.t. left side bearing at baseline, y INCREASES going up from baseline
  (let ((old-left (- (bcd-left-kern old-bcd)))
	(old-right (- (bcd-raster-width old-bcd) (bcd-left-kern old-bcd)))
	(old-top baseline)
	(old-bottom (- baseline (bcd-raster-height old-bcd))))
    (let ((new-left (if left (min old-left left) old-left))
	  (new-top (if top (max old-top top) old-top))
	  (new-right (if right (max old-right right) old-right))
	  (new-bottom (if bottom (min old-bottom bottom) old-bottom)))
      (let ((new-raster-width (- new-right new-left))
	    (new-raster-height (- new-top new-bottom))
	    (new-left-kern (- new-left)))
	(let ((new-bcd (make-bchar-descriptor
			 :dimensions (bitbltable-dims new-raster-width
						      new-raster-height)
			 :char-code (bcd-char-code old-bcd)
			 :set-width (bcd-set-width old-bcd)
			 :left-kern new-left-kern
			 :top-kern (bcd-top-kern old-bcd)	;---
			 :raster-width new-raster-width
			 :raster-height new-raster-height
			 :plist (copy-list (bcd-plist old-bcd)))))
	  (bitblt tv:alu-seta (- old-right old-left) (- old-top old-bottom)
		  old-bcd 0 0
		  new-bcd (- old-left new-left) (- old-top new-top))
	  (values new-bcd new-left))))))

(defun read-bfd-from-kst-file (filename)
  (bfd-from-fd (read-kst-into-font-descriptor filename)))

(defun bfd-from-fd (fd)
  (let ((bfd (make-bfont-descriptor 
	       :length (max #o200 (fd-fill-pointer fd))
	       :fill-pointer (fd-fill-pointer fd)
	       :name (fd-name fd)
	       :line-spacing (fd-line-spacing fd)
	       :baseline (fd-baseline fd)
	       :char-width (fd-space-width fd)
	       :plist `(:blinker-width ,(fd-blinker-width fd)
			:blinker-height ,(fd-blinker-height fd)))))
    (loop for ch below (fd-fill-pointer fd)
	  for cd = (aref fd ch)
	  when cd do (setf (aref bfd ch) (bcd-from-cd ch cd)))
    (when (symbolp (bfd-name bfd))
      (setf (get (bfd-name bfd) 'bfont-descriptor) bfd))
    bfd))

(defun bcd-from-cd (ch cd)
  (let ((rh (cd-raster-height cd))
	(rw (cd-raster-width cd)))
    (let ((bcd (make-bchar-descriptor
		 :dimensions (bitbltable-dims rw rh)
		 :char-code (or (cd-name cd) ch)
		 :set-width (cd-char-width cd)
		 :left-kern (cd-char-left-kern cd)
		 :top-kern 0
		 :raster-width rw
		 :raster-height rh
		 :plist (when (cd-char-vert-width cd)
			  `(:vertical-width ,(cd-char-vert-width cd)))
		 )))
      (loop for bcd-x below rw
	    for cd-col below rw do
	(loop for bcd-y below rh
	      for cd-row below rh do
	  ;; BCD are rasters, and CDs are generic row/column arrays
	  (setf (tv:raster-aref bcd bcd-x bcd-y)
		(aref cd cd-row cd-col))))
      bcd)))

(defun find-fontname (thing)
  (typecase thing
    (font (font-name thing))
    (bfont-descriptor (bfd-name thing))
    (symbol (if (eq (symbol-package thing) si:pkg-fonts-package)
		 thing
		 (intern (string-upcase thing) si:pkg-fonts-package)))
    (string (intern (string-upcase thing) si:pkg-fonts-package))
    (otherwise
      (error "The object ~s cannot be coerced into a fontname (a symbol in FONTS:)" thing))))

;;; This is the one that does what the font editor wants.
(defun font-get-bfd (font-symbol &key (if-does-not-exist :error)
				      (okay-to-load nil))
  (let ((bfd (get font-symbol 'bfont-descriptor)))
    (when (and bfd (or (not (boundp font-symbol))
		       (eq (symbol-value font-symbol)
			   (get font-symbol 'bfont-described))))
      (return-from font-get-bfd bfd)))
  (when (and (not (font-boundp font-symbol)) okay-to-load)
    (try-to-load-font font-symbol))
  (when (font-boundp font-symbol)
    (return-from font-get-bfd
      (get-bfd font-symbol)))
  (ecase if-does-not-exist
    ((nil)
     nil)
    ((:error)
     (dw:command-error "There is no font ~A." font-symbol))
    ((:create)
     (let ((new-bfd (make-bfont-descriptor :length 200
					   :fill-pointer (1+ (char-code #\sp))
					   :name font-symbol
					   :line-spacing 14
					   :baseline 11
					   :char-width 7)))
       (setf (aref new-bfd (char-code #\sp))
	     (make-bchar-descriptor :dimensions (bitbltable-dims 7 11)
				    :char-code (char-code #\sp)
				    :set-width 7
				    :raster-width 7
				    :raster-height 11))
       new-bfd))))

;;; And this
(defun try-to-load-font (font-symbol)
  (let ((where (find-lgp-or-screen-bfd-file font-symbol)))
    (when where
      (format *query-io* "~&Reading ~A" where)
      (prog1
	(read-font-from-bfd-file where font-symbol)
	(fs:set-default-pathname where (pathname-defaults))))))

(defun make-rotation-font (font-sym char &optional (nphases 4))
  (let* ((bfd (get-bfd font-sym))
	 (bcd (aref bfd char))
	 (width (bcd-set-width bcd))
	 (height (bfd-line-spacing bfd))
	 (dim (max width height))
	 (new-sym (intern (format nil "~A-~O-~D-PHASES" font-sym char nphases)
			  si:pkg-fonts-package))
	 (rad (floor dim 2)))
    (let ((bfd (make-bfont-descriptor :length nphases
				      :name new-sym
				      :fill-pointer nphases
				      :line-spacing dim
				      :char-width dim
				      :baseline dim))
	  (array (make-array (bitbltable-dims dim dim) :element-type 'bit)))
      (setf (bfd-blinker-width bfd) dim)
      (setf (bfd-blinker-height bfd) dim)
      (bitblt tv:alu-seta
	      (bcd-raster-width bcd)
	      (bcd-raster-height bcd)
	      bcd 0 0 array
	      (sys:floor (- dim width) 2)
	      (sys:floor (- dim height) 2))
      (loop for phase below nphases
	    as theta = (floor (* 2 (float pi 0.0) phase) nphases)
	    as costheta = (cos theta)
	    as sintheta = (sin theta)
	    as bcd = (make-bchar-descriptor
		       :dimensions (bitbltable-dims dim dim)
		       :char-code phase
		       :fill-pointer 0
		       :set-width dim
		       :left-kern 0
		       :top-kern 0
		       :raster-width dim
		       :raster-height dim)
	    do
	    (format t "~&Phase ~D/~D" phase nphases)
	    (setf (aref bfd phase) bcd)
	    (loop for x below dim do
		  (loop for y below dim do
			(let ((newx (+ rad (- (* (- x rad) costheta)
					      (* (- y rad) sintheta))))
			      (newy (+ rad (+ (* (- y rad) costheta)
					      (* (- x rad) sintheta)))))
			  (setq newx (round newx) newy (round newy))
			  (when (and ( 0 newx (1- dim))
				     ( 0 newy (1- dim)))
			    (setf (tv:raster-aref bcd x y)
				  (tv:raster-aref array newx newy)))))))
      (makunbound new-sym)
      (setf (get new-sym 'bfont-descriptor) bfd)
      (si:nremprop new-sym 'bfont-described)
      new-sym)))

;;;; Font format stuff for font editor(s)

;;; Use this, not char-code (which is too large for non-standard fonts),
;;; nor char-subindex (which is too small for very large fonts).
(defun char-index (char)
  (multiple-value-bind (nil index)
      (si:char-char-set-and-index char)
    index))

(defvar *font-file-type-alist* ())

(defprop define-font-file-type "Font file type" si:definition-type-name)

(defmacro define-font-file-type (name &body options)
  (let ((read-function nil)
	(write-function nil)
	(pretty-name nil)
	(documentation nil)
	(definitions nil))
    (dolist (option options)
      (ecase (first option)
	(:read
	  (if (atom (second option))
	      (setq read-function (second option))
	      (setq read-function (fintern "~A-FONT-READ-FUNCTION" name))
	      (push `(defun ,read-function . ,(rest option)) definitions)))
	(:write
	  (if (atom (second option))
	      (setq write-function (second option))
	      (setq write-function (fintern "~A-FONT-WRITE-FUNCTION" name))
	      (push `(defun ,write-function . ,(rest option)) definitions)))
	(:pretty-name (setq pretty-name (second option)))
	(:documentation (setq documentation (second option)))))
    `(progn
       ,@(nreverse definitions)
       (define-font-file-type-1 ',name ',read-function ',write-function
				',pretty-name ',documentation))))

(defun define-font-file-type-1 (name read-function write-function pretty-name documentation)
  (unless pretty-name (setq pretty-name (string name)))
  (let ((entry `(,pretty-name :value ,name
			      ,@(and documentation `(:documentation ,documentation))
			      ,@(and read-function `(:read ,read-function))
			      ,@(and write-function `(:write ,write-function)))))
    (pushnew entry *font-file-type-alist* :replace t
	     :key #'tv:menu-execute-no-side-effects)))

(defun font-file-type-presentation-type (operation)
  `((alist-member :alist ,(sort (loop for entry in *font-file-type-alist*
				      when (getf (cdr entry) operation)
					collect entry)
				#'string-lessp :key #'car))))

(defun font-file-type-function (type operation &key (if-does-not-exist :error))
  (let ((entry (find type *font-file-type-alist* :key #'tv:menu-execute-no-side-effects)))
    (if entry
	(or (getf (cdr entry) operation)
	    (case if-does-not-exist
	      ((:error)
	       (error "~A is not a known font file format." type))
	      (otherwise if-does-not-exist)))
	(case if-does-not-exist
	  ((:error)
	   (error "There is no known ~(~A~) function for the ~A font file format."
		  operation type))
	  (otherwise if-does-not-exist)))))

(defun read-font-file (file &optional format)
  (declare (values font-symbol font-bfd))
  (when (null format)
    (setq format (send file :canonical-type)))
  (multiple-value-bind (bfd fd font-symbol)
      (funcall (font-file-type-function format :read) file)
    (cond (bfd
	   (values (bfd-name bfd) bfd))
	  (fd
	   (values (fd-name fd) (bfd-from-fd fd)))
	  (font-symbol
	   (values font-symbol (font-get-bfd font-symbol)))
	  (t
	   (error "Reading file failed to produce font")))))

(defun write-font-file (file &optional font-symbol font-bfd format)
  (when (null font-symbol)
    (setq font-symbol (intern (string-upcase (send file :name) si:pkg-fonts-package))))
  (when (null font-bfd)
    (setq font-bfd (font-get-bfd font-symbol)))
  (when (null format)
    (setq format (send file :canonical-type)))
  (funcall (font-file-type-function format :write) font-symbol font-bfd file))

(define-font-file-type :bfd
  (:documentation "Standard 3600 format")
  (:read read-bfd-from-file)
  (:write (ignore bfd file)
   (write-bfd-to-file bfd file)))

(define-font-file-type #.si:*default-binary-file-type*
  (:documentation "3600 (compiled code) binary file format")
  (:read (file)
   (load file si:pkg-fonts-package)
   (values nil nil (intern (send file :name) si:pkg-fonts-package)))
  (:write (font-symbol ignore file)
    (let ((font (symbol-value font-symbol)))
       #-cadr
       ;;--- Kludgery.  When FED loads a font when one of the same name
       ;;already exists, FONT-NAME-SET-FONT-AND-DESCRIPTOR structure-forwards 
       ;;the old font structure to the new one.  When we try to dump the
       ;;old one here, the old array is :DISPLACED-TO a locative, which
       ;;DUMP-FORM barfs over.
       (multiple-value-bind (dims options) (si:decode-array font)
	 (let ((displ (getf options :displaced-to)))
	   (when (locativep displ)
	     (let ((arr (%find-structure-header displ)))
	       (when (and (arrayp arr) (eq (type-of arr) (type-of font))
			  (equal dims (array-dimensions font))
			  (loop for i below (array-leader-length font)
				always (eq (array-leader arr i)
					   (array-leader font i))))
		 (setq font arr))))))
       (dump-forms-to-file file `((setq ,font-symbol ',font)) '(:package :fonts)))))

;;;; User interface support

(dw:define-presentation-to-command-translator com-show-font (font-name) (font)
  `(si:com-show-font ,font)) 

(cp:define-command (si:com-show-font :command-table "Fonts")
		   ((font 'font-name
			  :prompt "font name"
			  :documentation "Font from which to show every character"))
  (condition-case (error)
       (show-font font)
     (dw:command-error (format t "~&~A~%" error))))

;;Commonly m-X
(zwei:defcom zwei:com-list-fonts "List the loaded fonts.
With an argument, also lists the font files on the file computer." ()
  (list-fonts :not-loaded-too zwei:*numeric-arg-p*)
  zwei:dis-none)

(zwei:defcom zwei:com-display-font "Sample a font." ()
  (zwei:display-font (zwei:typein-line-accept 'font-name :prompt "Font to display"))
  zwei:dis-none)

(zwei:set-comtab zwei:*standard-comtab* nil
		 '(("List Fonts" . zwei:com-list-fonts)
		   ("Display Font" . zwei:com-display-font)
		   ("Show Font" . zwei:com-display-font)))

;(tv:add-typeout-item-type *typeout-command-alist* font "Display" display-font t
;			  "Display this font.")

(zwei:define-presentation-to-editor-command-translator zwei:display-font
						       (font-name "Display font"
								  zwei:*standard-comtab*
								  :gesture :select)
						       (font)
  `(zwei:display-font ,font))

(defun zwei:display-font (font-symbol)
  (show-font font-symbol)
  nil)

(defun list-fonts (&key not-loaded-too matching)
  (flet ((match-p (name)
	   (or (null matching)
	       (loop for key in matching
		     thereis (string-search key (string name))))))
    (format t "~&Loaded fonts:~%")
    (format-item-list (let ((list nil))
			(do-symbols (symbol si:pkg-fonts-package)
			  (when (and (font-boundp symbol)
				     (match-p symbol))
			    (push symbol list)))
			(sort list #'string-lessp))
		      :presentation-type 'font-name)
    (when not-loaded-too
      (format t "~&Plus fonts on the file computer:~%")
      (format-item-list (loop for file in (loadable-bfd-pathnames
					    *screen-font-bfd-search-paths*)
			      as name = (send file :name)
			      when (match-p name)
				collect (intern (string-upcase name) si:pkg-fonts-package))
			:presentation-type 'font-name))))

(defun bfd-character-width (bfd code)
  (if ( code (bfd-fill-pointer bfd)) 0
      (let ((bcd (aref bfd code)))
	(if (null bcd) 0
	    (+ (bcd-set-width bcd)
	       (max 0 (- (bcd-left-kern bcd))))))))

(defun font-character-width (font code)
  (let ((cwt (font-char-width-table font)))
    (if cwt
	(aref cwt code)
	(font-char-width font))))

;;;+++ When originally written, the FED version had the feature of showing the editing
;;;image in place of the current character.  However, the latest version has lost this.
;;;I wonder whether that's deliberate.
(compiler:function-defined 'japanese::char-to-jis-bytes)
(defun show-font (font-symbol &key bfd (stream *standard-output*)
				   special-index special-bcd
				   character-set (label-format :name))
  (check-type label-format (member :name :octal :decimal :jis-bytes))
  (unless bfd
    (setq bfd (font-get-bfd font-symbol :okay-to-load t)))
  (when (null character-set)
    (multiple-value-setq (nil character-set)
      (si:backtranslate-font font-symbol (send-if-handles stream :display-device-type))))
  (when (and (equalp (send character-set :name) "JAPANESE")
	     (eq label-format :name))
    (setq label-format :jis-bytes))
  (format stream "~2&Font ~A" font-symbol)
  (unless (eq character-set si:*standard-character-set*)
    (format stream " (character set ~A)" (send character-set :name)))
  (format stream ":~%")
  (let ((font-limit (bfd-fill-pointer bfd))
	(fill-column (multiple-value-bind (nil nil right nil)
			 (send stream :visible-cursorpos-limits)
		       right))
	(inter-column-spacing (send stream :char-width))
	(vsp (send stream :vsp))
	)
    (labels ((bcd-unkerned-width (bcd)
	       (+ (bcd-set-width bcd)
		  (max 0 (- (bcd-left-kern bcd)))))
	     (index-char (index)
	       (when (and (< index (send character-set :n-characters))
			  (or (neq character-set si:*standard-character-set*)
			      ;; Format effector character codes are not font indices.
			      (< index #o200)
			      ( index #o300)))
		 (code-char (send character-set :make-char index))))
	     (character-label (index stream)
	       (ecase label-format
		 (:octal
		   (format stream "~3,'0O" index))
		 (:decimal
		   (format stream "~D" index))
		 (:jis-bytes
		   (multiple-value-bind (hi low)
		       (japanese::char-to-jis-bytes (index-char index))
		     (format stream "~X,~X" hi low)))
		 (:name
		   (block handled
		     (when (eq character-set si:*standard-character-set*)
		       (let ((char (index-char index)))
			 (when (and char
				    (graphic-char-p char)
				    (char char #\space))
			   (write-char (code-char index) stream)
			   (return-from handled))))
		     (when (< index (send character-set :n-characters))
		       (let ((name (send character-set :char-name index)))
			 (when name
			   (with-character-size (:smaller stream)
			     (write-string name stream))
			   (return-from handled))))
		     (format stream "~3,'0O" index))))
	       index))
      (let ((index 0))
	(loop while (< index font-limit) do
	  (let ((start-index index)
		(something-output-this-line nil))
	    (loop do
	      (let ((bcd (if (eql index special-index) special-bcd (aref bfd index))))
		(when bcd
		  ;; There is a character at this index
		  (let* ((label-width (dw:continuation-output-size
					#'(lambda (stream) (character-label index stream))
					stream))
			 (glyph-width (bcd-unkerned-width bcd))
			 (column-width (max label-width glyph-width)))
		    (when (and (> (+ (send stream :read-cursorpos)
				     column-width inter-column-spacing)
				  fill-column)
			       ( index start-index))
		      (return))
		    (send stream :increment-cursorpos (+ (if (= index start-index) 0
							     inter-column-spacing)
							 (floor (- column-width label-width)
								2))
						      0)
		    (character-label index stream)
		    (send stream :increment-cursorpos (ceiling (- column-width label-width) 2)
						      0)
		    (setq something-output-this-line t))))
	      (incf index)
	      (when (or (zerop (mod index 32)) ( index font-limit))
		(return)))
	    (when something-output-this-line
	      (terpri stream)
	      (graphics:with-room-for-graphics (stream (+ (bfd-line-spacing bfd) (* vsp 3)))
		(graphics:graphics-translate 0 (* vsp 2) :stream stream)
		(let ((x 0))
		  (loop for index from start-index below index do
		    (let ((bcd (if (eql index special-index)
				   special-bcd
				   (aref bfd index))))
		      (when bcd
			(let* ((label-width (dw:continuation-output-size
					      #'(lambda (stream)
						  (character-label index stream))
					      stream))
			       (glyph-width (bcd-unkerned-width bcd))
			       (column-width (max label-width glyph-width)))
			  (flet ((draw-it (stream)
				   (graphics:draw-image
				     bcd
				     (- (+ x (floor (- column-width glyph-width) 2))
					(bcd-left-kern bcd))
				     (- (+ (bcd-top-kern bcd) (bfd-baseline bfd)))
				     :image-right (bcd-raster-width bcd)
				     :scale-y -1	;Image is in TV scanline order.
				     :stream stream)))	;
			    (let ((char (index-char index)))
			      (if char
				  (dw:with-output-as-presentation (:object char
								   :type 'character
								   :stream stream)
				    (draw-it stream)))
				(draw-it stream)))
			  (incf x (+ column-width inter-column-spacing)))))))))))))))

(eval-when () ;;Testing and debugging

(defun get-rid-of-rotated-bfd (unrotated-bfd)
  (let ((bfd (find-bfd unrotated-bfd)))
    (loop for bcd being bfd-elements of bfd
	  do (setf (bcd-get bcd :rotated-bcd) ()))
    (let ((rbfd-alist (bfd-get bfd :rotated-bfd)))
      (setf (bfd-get bfd :rotated-bfd) ())
      (loop for (foo . rbfd) in rbfd-alist
	    do (si:nremprop (bfd-name rbfd) 'bfont-descriptor)))))

(defun bbrot (rot)
  (let ((size 512.)
	(offset 13.))
    (using-resource (arr bitbltable-array size size)
      (send terminal-io :bitblt tv:alu-seta size size :aa 0 0 offset offset)
      (bitblt tv:alu-seta size size :aa 0 0 arr 0 0)
      ;;(send terminal-io :bitblt-from-sheet tv:alu-seta size size offset offset arr 0 0)
      (bitrot-square-array rot arr size)
      (send terminal-io :bitblt tv:alu-seta size size arr 0 0 offset offset))))

(defun bbdemo ()
  (let ((size 256.)
	(left #o416)
	(top #o253))
    (using-resource (arr bitbltable-array size size)
      (send terminal-io :clear-screen)
      (loop for (dir x y) in '((:tl&br 0 0) (:t&b 1 0) (:tr&bl 2 0)
			       (:l&r 0 1) (() 1 1) (:l&r 2 1)
			       (() 0 2) (:left 1 2) (:/180 2 2) (:right 3 2))
	    do
	    (bitblt tv:alu-seta size size hacks:zippy7 left top arr 0 0)
	    (when dir (bitrot-square-array dir arr size))
	    (send terminal-io :bitblt tv:alu-seta size size arr 0 0 (* x size) (* y size)))
      (send terminal-io :tyi))))

;;; m-X Kill Definition ought to be able to do this, but cannot yet.
(defmacro undefstruct (stuff &rest slots)
  (let ((prefix (cond ((not (listp stuff)) "")
		      ((member :conc-name stuff) (format () "~a-" (first stuff)))
		      ((assoc :conc-name stuff)
		       (format () "~a" (second (assoc :conc-name stuff))))
		      (T ""))))
    `(progn 'compile
	    ,@(loop for slot in slots
		    for name = (intern (string-append prefix (if (listp slot)
								 (first slot)
								 slot)))
		    collect `(compiler:make-obsolete ,name "Undefstruct")))))


)
