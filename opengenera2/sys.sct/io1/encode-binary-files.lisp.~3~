;;; -*- Mode: LISP; Syntax: Common-lisp; Package: CLI; Base: 10; Lowercase: Yes; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Binary stream encoding and decoding

(defconstant binary-encoding-stream-line-length 60)
(defconstant binary-encoding-string-block-nlines 10)

(defflavor basic-ascii-encoding-stream
	(stream
	 (16bit nil)
	 (characters nil)
	 (block-checksum 0)
	 (end-to-end-checksum 0))
	()
  (:conc-name ascii-encoding-stream-)
  (:initable-instance-variables stream 16bit characters)
  (:readable-instance-variables stream end-to-end-checksum)
  (:method-combination :reset :progn))

(defmethod (:reset basic-ascii-encoding-stream) ()
  (setq stream nil
	16bit nil
	characters nil
	block-checksum 0
	end-to-end-checksum 0))

(defun-in-flavor (maintain-checksums basic-ascii-encoding-stream) (char)
  (when (not (member char '(#\space #\return)))
    (setq end-to-end-checksum (logxor (rot end-to-end-checksum 5) (char-code char)))
    (setq block-checksum (logxor (rot block-checksum 5) (char-code char)))))

(defmethod (:element-type basic-ascii-encoding-stream) ()
  (fs:%file-stream-file-element-type stream))


;; Need some error flavors
(defflavor ascii-decoding-stream-error
	((decoding-stream nil))
	(format-report error)
  :initable-instance-variables
  :abstract-flavor)

(defmethod (:report ascii-decoding-stream-error :after) (stream)
  (format stream ";~%the ~:[message~;file ~:*~A~] was probably damaged during transfer"
    (send decoding-stream :pathname)))

;; Non-proceedable, signalled when the data is unaccountably corrupted
(defflavor ascii-decoding-data-error
	()
	(ascii-decoding-stream-error)
  :initable-instance-variables)

(defmacro decoding-data-error ((&rest init-options)
			       &optional format-string &rest format-args)
  `(signal 'ascii-decoding-data-error
	   :format-string ,format-string
	   :format-args ,(and format-args
			      `(list ,@(copy-list format-args)))
	   ,@init-options))

;; Proceedable, signalled when the checksums don't match
(defflavor ascii-decoding-checksum-mismatch
	((checksum-type "block"))
	(ascii-decoding-stream-error)
  :initable-instance-variables)

(defmethod (:report ascii-decoding-checksum-mismatch) (stream)
  (format stream "The recorded ~A checksum does not match the computed ~A checksum"
    checksum-type checksum-type))

(defmethod (:proceed ascii-decoding-checksum-mismatch :continue-reading) ()
  :no-action)

(defmethod (:document-proceed-type ascii-decoding-checksum-mismatch :continue-reading)
	   (stream)
  (format stream "Continue reading the data"))

(defmacro decoding-checksum-mismatch ((&rest init-options)
				      &optional format-string &rest format-args)
  (ignore format-string format-args)
  `(signal 'ascii-decoding-checksum-mismatch
	   :format-string nil
	   :format-args nil
	   ,@init-options))

(compile-flavor-methods ascii-decoding-data-error
			ascii-decoding-checksum-mismatch)


;; 8bit to ASCII encoding
(defflavor 8bit-to-ascii-encoding-stream
	(buffer
	 (block-nlines 0))
	(basic-ascii-encoding-stream si:output-stream)
  ;; These two depend upon each other
  (:functions write-one-character write-buffer-if-necessary))

(defmethod (:init 8bit-to-ascii-encoding-stream :after) (&rest ignore)
  (setq buffer (make-array (1+ binary-encoding-stream-line-length)
			   :element-type 'character
			   :fill-pointer 0)))

(defmethod (:reset 8bit-to-ascii-encoding-stream) ()
  (setq block-nlines 0)
  (setf (fill-pointer buffer) 0))

(defun stream-copy-with-8bit-to-ascii-encoding (input-stream output-stream
						&key (16bit nil 16bit-p)
						     (characters nil characters-p))
  (declare (values end-to-end-checksum))
  (let* ((input-et (send input-stream :element-type))
	 (16bit (if 16bit-p
		    16bit
		  (and (consp input-et)
		       (eq (first input-et) 'unsigned-byte)
		       (= (second input-et) 16))))
	 (characters (if characters-p
			 characters
		       (eq input-et 'character)))
	 (encoding-stream (make-instance '8bit-to-ascii-encoding-stream
					 :stream output-stream
					 :16bit 16bit
					 :characters characters)))
    (stream-copy-until-eof input-stream encoding-stream)
    (write-encoding-stream-eof-mark encoding-stream)
    (ascii-encoding-stream-end-to-end-checksum encoding-stream)))

(defun-in-flavor (write-one-character 8bit-to-ascii-encoding-stream) (char)
  (write-buffer-if-necessary)
  (setf (aref buffer (fill-pointer buffer)) char)
  (incf (fill-pointer buffer))
  (maintain-checksums char))

(defun-in-flavor (write-buffer-if-necessary 8bit-to-ascii-encoding-stream)
		 (&optional force (write-checksum force))
  (when (or force
	    ( (fill-pointer buffer) binary-encoding-stream-line-length))
    (unless force
      ;; We don't checksum #\return
      (setf (aref buffer (fill-pointer buffer)) #\return)
      (incf (fill-pointer buffer)))
    (send stream :string-out buffer)
    (setf (fill-pointer buffer) 0)
    (incf block-nlines)
    ;; If we are forcing output or have finish one block, write the block checksum
    (when (or write-checksum ( block-nlines binary-encoding-string-block-nlines))
      (write-one-character #\%)
      (write-one-character #\%)
      ;; The block-checksum itself is not contained in the block checksum,
      ;; but is contained in the end-to-end checksum
      (let ((checksum-string (format nil "~D" block-checksum)))
	(loop for char being the array-elements of checksum-string
	      do (write-one-character char)))
      (write-one-character #\return)
      (send stream :string-out buffer)
      (setf (fill-pointer buffer) 0)
      (setq block-checksum 0
	    block-nlines 0))))

;; The nub of the encoding scheme is that most standard ASCII characters
;; map to themselves, and the non-ASCII characters map to a two-character
;; sequence, both characters being part of the standard 64-character ASCII.
;; Thus, #o046 to #o136 (#\& to #\^) map to themselves,
;;	 #o141 to #o172 (#\a to #\z) map to themselves as a space optimization,
;;	 #o000 to #o045 (#\  to #\%) map to #\! followed by the code plus #\&,
;;	 #o137 to #o227 map to #\" followed by the code plus #\&,
;;	 #o230 to #o320 map to #\# followed by the code plus #\&,
;;	 #o321 to #o377 map to #\$ followed by the code plus #\&.
;; %% is used to indicate that the following bytes are a block checksum (in
;; ASCII) followed by a #\Return character.
;; %$ is used to indicate the end of the whole shebang.
(defun-in-flavor (encode-character 8bit-to-ascii-encoding-stream) (code)
  (when characters (setq code (char-code code)))
  (cond ((or (and ( code #o046) ( code #o136))
	     (and ( code #o141) ( code #o172)))
	 (write-one-character (code-char code)))
	((and ( code #o000) ( code #o045))
	 (write-one-character #\!)
	 (write-one-character (code-char (+ (- code #o000) (char-code #\&)))))
	((and ( code #o137) ( code #o227))
	 (write-one-character #\")
	 (write-one-character (code-char (+ (- code #o137) (char-code #\&)))))
	((and ( code #o230) ( code #o320))
	 (write-one-character #\#)
	 (write-one-character (code-char (+ (- code #o230) (char-code #\&)))))
	((and ( code #o321) ( code #o377))
	 (write-one-character #\$)
	 (write-one-character (code-char (+ (- code #o321) (char-code #\&)))))
	(t
	 (error "Internal error -- couldn't encode ~@C?" (code-char code)))))

(defmethod (:tyo 8bit-to-ascii-encoding-stream) (char &rest ignore)
  (if (not 16bit)
      (encode-character char)
    ;; Handle 16bit characters as though they are two 8bit characters
    (encode-character (ldb (byte 8 0) char))
    (encode-character (ldb (byte 8 8) char))))

(defmethod (:force-output 8bit-to-ascii-encoding-stream) ()
  nil)

(defmethod (write-encoding-stream-eof-mark 8bit-to-ascii-encoding-stream) ()
  ;; Force out the last block checksum
  (write-one-character #\return)
  (write-buffer-if-necessary t)
  ;; EOF marker, as it were (included in end-to-end checksum)
  (write-one-character #\%)
  (write-one-character #\$)
  (write-buffer-if-necessary t nil))

(compile-flavor-methods 8bit-to-ascii-encoding-stream)


;; ASCII to 8bit decoding
(defflavor ascii-to-8bit-decoding-stream
	()
	(basic-ascii-encoding-stream si:input-stream))

(defun stream-copy-with-ascii-to-8bit-decoding (input-stream output-stream
						&key (16bit nil 16bit-p)
						     (characters nil characters-p))
  (declare (values end-to-end-checksum))
  (let* ((output-et (send output-stream :element-type))
	 (16bit (if 16bit-p
		    16bit
		  (and (consp output-et)
		       (eq (first output-et) 'unsigned-byte)
		       (= (second output-et) 16))))
	 (characters (if characters-p
			 characters
		       (eq output-et 'character)))
	 (decoding-stream (make-instance 'ascii-to-8bit-decoding-stream
					 :stream input-stream
					 :16bit 16bit
					 :characters characters)))
    (stream-copy-until-eof decoding-stream output-stream)
    (ascii-encoding-stream-end-to-end-checksum decoding-stream)))

(defun-in-flavor (read-one-character ascii-to-8bit-decoding-stream) (eof)
  (loop named read-char doing
    (let ((char (send stream :tyi eof)))
      (when (eq char eof)
	(return-from read-char eof))
      ;; Eat junk characters
      (maintain-checksums char)
      (when (not (member char '(#\space #\return)))
	(return-from read-char char)))))

(defun-in-flavor (decode-character ascii-to-8bit-decoding-stream) (char next eof)
  ;; Maybe EOF
  (when (and (char= char #\%) (char= next #\$))
    (return-from decode-character eof))
  (let* ((char-code (char-code char))
	 (next-code (char-code next))
	 (offset (cond ((= char-code (char-code #\!))
			(- #o000 (char-code #\&)))
		       ((= char-code (char-code #\"))
			(- #o137 (char-code #\&)))
		       ((= char-code (char-code #\#))
			(- #o230 (char-code #\&)))
		       ((= char-code (char-code #\$))
			(- #o321 (char-code #\&)))
		       (t
			(decoding-data-error
			  (:decoding-stream stream)
			  "Couldn't decode escape sequence ~@C ~@C"
			  char next)))))
    (code-char (+ next-code offset))))

(defmethod (:tyi ascii-to-8bit-decoding-stream) (&optional eof)
  (labels ((check-for-eof (char)
	     (when (eq char eof)
	       (decoding-data-error
		 (:decoding-stream stream)
		 "Ran out of input in encoding sequence")))
	   (block-checksum ()
	     ;; Snapshot the block checksum here, since the checksum itself
	     ;; doesn not get included in the block checksum
	     (let ((saved-block-checksum block-checksum)
		   (checksum 0)
		   (sign 1))
	       (loop as ch = (send stream :tyi)
		     do (maintain-checksums ch)
		     until (char= ch #\return)
		     as digit = (- (char-code ch) (char-code #\0))
		     do (if (char= ch #\-)
			    (setq sign -1)
			  (setq checksum (+ (* checksum 10) digit))))
	       (when ( (* checksum sign) saved-block-checksum)
		 (decoding-checksum-mismatch
		   (:decoding-stream stream)))
	       ;; Now we can reset the block checksum
	       (setq block-checksum 0)))
	   (tyi ()
	     (loop doing
	       (let ((char (read-one-character eof)))
		 (when (eq char eof)
		   (return-from tyi eof))
		 (if (let ((code (char-code char)))
		       (or (and ( code #o046) ( code #o136))
			   (and ( code #o141) ( code #o172))))
		     (return-from tyi char)
		   (let ((next (read-one-character eof)))
		     (check-for-eof next)
		     (when (char= next #\%)
		       ;; If we got a % after an escape, this must be a block checksum
		       (when (char char #\%)
			 (setq next (read-one-character eof))
			 (check-for-eof next)
			 (when (char next #\%)
			   (decoding-data-error
			     (:decoding-stream stream)
			     "Error while reading the block checksum")))
		       (block-checksum)
		       (when (char= char #\%)
			 (go si:next-loop))
		       (setq next (read-one-character eof))
		       (check-for-eof next))
		     (return-from tyi (decode-character char next eof))))))))
    (if (not 16bit)
	(let ((char (tyi)))
	  (if (or (eq char eof) characters)
	      char
	    (char-code char)))
      (let ((low (tyi)))
	(if (eq low eof)
	    eof
	  (let ((high (tyi)))
	    (when (eq high eof)
	      (decoding-data-error
		(:decoding-stream stream)
		"Ran out of input reading 16 bit quantity"))
	    (dpb (char-code high) (byte 8 8) (char-code low))))))))

(defmethod (:listen ascii-to-8bit-decoding-stream) ()
  (send stream :listen))

(defmethod (:untyi ascii-to-8bit-decoding-stream) (char)
  (send stream :untyi char))

(compile-flavor-methods ascii-to-8bit-decoding-stream)


;; Packaging the encoded data

;; The procedure is as follows:
;;  1. Use Distribute Systems :Use Disk Yes to distribute the all of the
;;     ECOs into a disk file.
;;  2. Use m-X Mail ECO in Zmail to mail that file to the customer.
;;  3. The customer uses m-X Decode ECO in Zmail to recreate the disk file.
;;  4. The customer uses Restore Distribution :Use Disk Yes to restore all
;;     of the ECOs.
;;  5. The customer types :Load Patches to load the ECOs.

;; Canonical type for the encoded-distribution files
(fs:define-canonical-type :encode "ENCODE"
  (:unix "EN")
  (:unix42 "ENCODE" "EN")
  (:vms4 "ENC" "ENCODE")
  (:vms4.4 "ENCODE" "ENC")
  ((:vms :fep :msdos) "ENC")
  (:its "(ENC)"))

(defun encode-data-as-ascii (input-stream output-stream)
  (write-encoded-file-preamble input-stream output-stream)
  (let ((checksum
	  (stream-copy-with-8bit-to-ascii-encoding input-stream output-stream)))
    (write-encoded-file-postamble input-stream output-stream checksum)))

(defun decode-data-from-ascii (input-stream)
  (multiple-value-bind (pathname properties)
      (read-encoded-file-preamble input-stream)
    (let ((element-type (getf properties :element-type)))
      (remf properties :element-type)
      (with-open-file (output-stream pathname
				     :direction :output
				     :element-type element-type)
	(let ((truename (send output-stream :truename)))
	  (let* ((checksum
		   (stream-copy-with-ascii-to-8bit-decoding input-stream output-stream))
		 (recorded-checksum (read-encoded-file-postamble input-stream)))
	    (when ( checksum recorded-checksum)
	      (decoding-checksum-mismatch
		(:decoding-stream input-stream
		 :checksum-type "end-to-end"))))
	  (let ((success (apply output-stream :change-properties nil properties)))
	    ;; If the host won't swallow all the props, spoon feed them one by one
	    ;; to get the ones set that it will accept
	    (unless (eq success t)
	      (loop for property on properties by 'cddr
		    do (send output-stream :change-properties
			     nil (first property) (second property)))))
	  truename)))))
  
(defun write-encoded-file-preamble (input-stream output-stream)
  (let ((pathname (send input-stream :pathname))
	(properties (dis:file-properties-from-stream input-stream)))
    ;; Do this because encapsulating streams can return the wrong thing
    (setf (getf properties :element-type) (fs:%file-stream-file-element-type input-stream))
    (with-standard-io-environment
      (format output-stream "~&\"~A\"~%~S~%" pathname properties))))

(defun read-encoded-file-preamble (input-stream)
  (with-standard-io-environment
    (let ((pathname (read input-stream))
	  (properties (read input-stream)))
      (if (and (stringp pathname)
	       (listp properties)
	       (evenp (length properties)))
	  (values (fs:parse-pathname pathname) properties)
	(decoding-data-error
	  (:decoding-stream input-stream)
	  "Could not read preamble")))))

(defun write-encoded-file-postamble (input-stream output-stream checksum)
  input-stream
  (with-standard-io-environment
    (format output-stream "~S~%" checksum)))

(defun read-encoded-file-postamble (input-stream)
  (with-standard-io-environment
    (let ((checksum (read input-stream)))
      (if (integerp checksum)
	  checksum
	(decoding-data-error
	  (:decoding-stream input-stream)
	  "Error while reading the end-to-end checksum")))))


;; Test cases

#||
;; Simple tests, output to window
(with-open-file (s #p"SAP:>swm>lispm-init.lisp"
		 :direction :input
		 :element-type :default
		 'fs:%return-binary-stream-for-character-file t)
  (fresh-line)
  (stream-copy-with-8bit-to-ascii-encoding s *terminal-io*))

(with-open-file (s #p"SAP:>swm>lispm-init.bin"
		 :direction :input
		 :element-type :default)
  (fresh-line)
  (stream-copy-with-8bit-to-ascii-encoding s *terminal-io*))
||#

#||
;; No fat characters
(with-open-file (i #p"sap:>swm>test-thin.lisp"
		 :direction :input
		 :characters :default)
  (with-open-file (o #p"sap:>swm>test-thin.encode"
		   :direction :output)
    (cl:time
      (encode-data-as-ascii i o))))

(with-open-file (i #p"sap:>swm>test-thin.encode"
		 :direction :input
		 :characters :default)
  (cl:time
    (decode-data-from-ascii i)))
||#

#||
;; Fat characters
;;--- Encoding a fat character file this and then decoding it mungs the char-style
;;--- information.  Bashing the .ENCODE file to have an element type of CL:STRING-CHAR
;;--- makes it work, but I don't know how to get the stream to surrender this info
;;--- early enough to be useful.
(with-open-file (i #p"sap:>swm>test-fat.lisp"
		 :direction :input
		 :characters :default
		 'fs:%return-binary-stream-for-character-file t)
  (with-open-file (o #p"sap:>swm>test-fat.encode"
		   :direction :output)
    (cl:time
      (encode-data-as-ascii i o))))

(with-open-file (i #p"sap:>swm>test-fat.encode"
		 :direction :input
		 :characters :default)
  (cl:time
    (decode-data-from-ascii i)))
||#

#||
;; 16 bit binary
;;--- End to end checksum is wrong, easier to construct simpler test case.
(with-open-file (i #p"sap:>swm>test.bin"
		 :direction :input
		 :characters :default)
  (with-open-file (o #p"sap:>swm>test-bin.encode"
		   :direction :output)
    (cl:time
      (encode-data-as-ascii i o))))

(with-open-file (i #p"sap:>swm>test-bin.encode"
		 :direction :input
		 :characters :default)
  (cl:time
    (decode-data-from-ascii i)))
||#

#||
;; 8 bit binary
(with-open-file (i #p"sap:>swm>dummy-eco.dist"
		 :direction :input
		 :characters :default)
  (with-open-file (o #p"sap:>swm>dummy-eco.encode"
		   :direction :output)
    (cl:time
      (encode-data-as-ascii i o))))

(with-open-file (i #p"sap:>swm>dummy-eco.encode"
		 :direction :input
		 :characters :default)
  (cl:time
    (decode-data-from-ascii i)))
||#
