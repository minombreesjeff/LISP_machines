;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun bfd-from-lfont (font)
  (setq font (find-font font))
  (let ((font-name (font-name font)))
    (let ((bfd (make-bfont-descriptor
		 :length (font-fill-pointer font)
		 :fill-pointer (font-fill-pointer font)
		 :name font-name
		 :line-spacing (font-char-height font)
		 :baseline (font-baseline font)
		 :char-width (font-char-width font)
		 :plist `(:blinker-width ,(font-blinker-width font)
			  :blinker-height ,(font-blinker-height font))))
	  (cet (font-chars-exist-table font))
	  (cwt (font-char-width-table font))
	  (fit (font-indexing-table font))
	  (lkt (font-left-kern-table font)))
      (flet ((do-char (ch)
	       (let* ((left-edge (if fit (aref fit ch) (* ch (font-raster-width font))))
		      (rw (if fit 
			      (- (aref fit (1+ ch)) left-edge)
			      (font-raster-width font)))
		      (rh (font-raster-height font))
		      (lk (or (and lkt (aref lkt ch)) 0)))
		 (unless (or (and cet (not (aref-cet cet ch)))
			     (and fit (zerop rw)
				  (zerop (if cwt (aref cwt ch) (font-char-width font)))))
		   (multiple-value-setq (left-edge rw lk)
		     (kern-optimize-array-char font left-edge rw rh lk))
		   ;;---Someday put in top-kern-optimize---
		   (let ((bcd (make-bchar-descriptor
				:dimensions (bitbltable-dims rw rh)
				:char-code ch
				:set-width (if cwt (aref cwt ch) (font-char-width font))
				:left-kern lk
				:top-kern 0
				:raster-width rw
				:raster-height rh)))
		     (when (and (> rw 0) (> rh 0))
		       (bitblt tv:alu-ior rw rh
			       font left-edge 0
			       bcd 0 0))
		     (setf (aref bfd ch) bcd)
		     bcd)))))
	(dotimes (ch (font-fill-pointer font))
	  (do-char ch))
	(when (and (null cet) (null cwt) (null fit) (null lkt)
		   (= (font-fill-pointer font) #o200)
		   ( (decode-raster-array font) (* #o320 (font-raster-width font))))
	  (adjust-array bfd #o320)
	  (setf (bfd-fill-pointer bfd) #o320)
	  (loop for ch from #o301 to #o310 do
	    (let ((bcd (do-char ch)))
	      (setf (bcd-set-width bcd) 0)))
	  (loop for ch from #o312 to #o317 do
	    (let ((bcd (do-char ch)))
	      (setf (bcd-set-width bcd) 0)))))
      (setf (get font-name 'bfont-descriptor) bfd)
      (setf (get font-name 'bfont-described) font)
      bfd)))

(defun lfont-from-bfd (bfd &optional (try-to-make-it-fixed-width T))
  (setq bfd (find-bfd bfd))
  (if try-to-make-it-fixed-width
      (let ((width (bfd-is-fixed-width bfd)))
	(if width
	    (fixed-width-lfont-from-bfd bfd width)
	    (variable-width-lfont-from-bfd bfd)))
      (variable-width-lfont-from-bfd bfd)))

(defun variable-width-lfont-from-bfd (bfd)
  (let* ((bfd bfd)
	 (max-ch (bfd-fill-pointer bfd))
	 (max-200 (max #o200 max-ch)))
    (declare (sys:array-register bfd))
    (let ((cet (get-bfd-chars-exist-table bfd))
	  (cwt (make-array max-200 :element-type '(unsigned-byte 16) :area tv:*font-area*))
	  (lkt (make-array max-200 :initial-element 0 :area tv:*font-area*))
	  (fit (make-array (1+ max-200) :element-type '(unsigned-byte 16)
			   :area tv:*font-area*))
	  (typical-width (bfd-char-width bfd)))
      (declare (sys:array-register cwt lkt fid))
      (multiple-value-bind (font-raster-width max-raster-width font-raster-height)
	  (loop for bcd being bfd-elements of bfd using ch using-bfd bfd
		for top-kern = (bcd-top-kern bcd)
		sum (bcd-raster-width bcd) into font-raster-width
		unless ( top-kern 0)
		  do (error "Positive top kern?? ~s" bcd)
		maximize (- (bcd-raster-height bcd) top-kern) into font-raster-height
		maximize (bcd-raster-width bcd) into max-raster-width
		finally (return
			  (values font-raster-width max-raster-width font-raster-height)))
	;; Japanese uses huge fonts
	(unless (typep (round-to-multiple font-raster-width 32) '(unsigned-byte 16))
	  (setq fit (make-array (1+ max-200) :element-type 'fixnum :area tv:*font-area*)))
	(let ((font (tv:make-font :make-array (:dimensions (bitbltable-dims
							     font-raster-width
							     font-raster-height)
					       :type 'art-1b)
				  tv:fill-pointer max-ch
				  tv:name (bfd-name bfd)
				  tv:char-height (let ((ls (bfd-line-spacing bfd)))
						   (if (zerop ls) font-raster-height ls))
				  tv:char-width typical-width
				  tv:raster-width max-raster-width
				  tv:raster-height font-raster-height
				  tv:baseline (bfd-baseline bfd)
				  tv:blinker-width (or (bfd-get bfd :blinker-width)
						       typical-width)
				  tv:blinker-height (or (bfd-get bfd :blinker-height)
							font-raster-height)
				  tv:chars-exist-table cet
				  tv:char-width-table cwt
				  tv:indexing-table fit
				  tv:left-kern-table lkt)))
	  (loop with index = 0
		for ch below (bfd-fill-pointer bfd)
		for bcd = (aref bfd ch)
		do (setf (aref fit ch) index)
		when bcd
		do (let ((rw (bcd-raster-width bcd))
			 (rh (bcd-raster-height bcd)))
		     (setf (aref lkt ch) (bcd-left-kern bcd))
		     (setf (aref cwt ch) (bcd-set-width bcd))
		     (when (and (> rw 0) (> rh 0))
		       (bitblt tv:alu-seta
			       rw rh
			       bcd 0 0 font index (- 0 (bcd-top-kern bcd))))
		     (incf index rw))
		finally (loop for ch from max-ch below (1+ max-200)
			      do (setf (aref fit ch) index)))
	  font)))))

(defun fixed-width-lfont-from-bfd (bfd the-fixed-width)
  (let* ((max-ch (bfd-fill-pointer bfd))
	 (max-200 (max #o200 max-ch))
	 (cet (get-bfd-chars-exist-table bfd)))
    (multiple-value-bind (raster-width raster-height)
	(loop for bcd being bfd-elements of bfd using ch
	      for top-kern = (bcd-top-kern bcd)
	      unless ( top-kern 0)
	        do (error "Positive top kern?? ~s" bcd)	;see comment above
	      maximize (- (bcd-raster-width bcd) (bcd-left-kern bcd)) into raster-width
	      maximize (- (bcd-raster-height bcd) top-kern) into raster-height
	      finally (return (values raster-width raster-height)))
      ;; If this is the special kind of fixed width font with only non-spacing accents
      ;; in the high part, make it usable by %draw-string-step.
      (when (and cet (= max-200 #o320)
		 (loop for index below #o200 always (aref cet index))
		 (loop for index from #o200 below #o301 never (aref cet index))
		 (loop for index from #o301 to #o310 always (aref cet index))
		 (not (aref cet #o311))
		 (loop for index from #o312 to #o317 always (aref cet index)))
	(setq max-ch #o200
	      cet nil))
      (let ((font (tv:make-font
		    :make-array (:dimensions (bitbltable-dims (* raster-width max-200)
							      raster-height)
				 :type 'art-1b)
		    tv:fill-pointer max-ch
		    tv:name (bfd-name bfd)
		    tv:char-width the-fixed-width
		    tv:char-height (bfd-line-spacing bfd)
		    tv:raster-width raster-width
		    tv:raster-height raster-height
		    tv:baseline (bfd-baseline bfd)
		    tv:blinker-width (or (bfd-get bfd :blinker-width)
					 the-fixed-width)
		    tv:blinker-height (or (bfd-get bfd :blinker-height)
					  raster-height)
		    tv:chars-exist-table cet
		    tv:char-width-table ()
		    tv:indexing-table ()
		    tv:left-kern-table ())))
	(loop for bcd being bfd-elements of bfd using ch
	      for rw = (bcd-raster-width bcd)
	      for rh = (bcd-raster-height bcd)
	      when (and (> rw 0) (> rh 0))
	      do (bitblt tv:alu-seta rw rh
			 bcd 0 0
			 font (- (* ch raster-width) (bcd-left-kern bcd))
			 (- 0 (bcd-top-kern bcd))))
	font))))

(defun load-fonts-for-all-character-styles ()
  (format t "~&Loading all fonts...")
  (let ((sets `(,si:*standard-character-set*
		,si:*mouse-character-set*
		,si:*arrow-character-set*
		,si:*symbol-character-set*))
	(devices `(,si:*b&w-screen*)))
    (si:map-all-character-styles
      #'(lambda (style)
	  (dolist (device devices)
	    (dolist (set sets)
	      (condition-case ()
		   (si:get-font device set style nil)
		 (error)))))))
  (format t "Done."))

(add-initialization "Load Screen Fonts for All B&W Screen Character Styles"
		    '(load-fonts-for-all-character-styles)
		    '(:once))

(si:define-gc-optimization remove-superfluous-font-descriptors si:symbolics-system-release
  (:documentation "Remove unneeded font descriptors")
  (:before-flip (ignore)
    (do-symbols (x "FONTS")
      (when (boundp x)
	(si:nremprop x 'bfont-descriptor)))))
