;;; -*- Base: 8; Mode: LISP; Package: FORMAT -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; (FQUERY OPTIONS FORMAT-STRING &REST FORMAT-ARGS)
;;; OPTIONS is a PLIST.  Defined indicators are:
;;; :MAKE-COMPLETE boolean.  Send a :MAKE-COMPLETE message to the stream if it understands it.
;;; :TYPE one of :TYI, :READLINE.  How typing is gathered and echoed.
;;; :CHOICES an alist.
;;; :FRESH-LINE boolean.  Send a FRESH-LINE to the stream initially.
;;; :CONDITION symbol.  Signalled before asking.
;;; :LIST-CHOICES boolean.  After prompting in parentheses.
;;; :BEEP boolean.  Before printing message.
;;; :CLEAR-INPUT boolean.  Before printing message.
;;; :SELECT boolean.  Select the window and select back.
;;; :HELP-FUNCTION function.  Called with STREAM as an argument.  Can look at FQUERY-CHOICES.
;;; :STREAM to use; default is QUERY-IO.
;;; :NO-INPUT-SAVE boolean.  Don't save response in input history.

(DEFVAR Y-OR-N-P-CHOICES '(((T "Yes.") #/Y #/T #\SPACE)
			   ((NIL "No.") #/N #\RUBOUT)))
(DEFVAR YES-OR-NO-P-CHOICES '((T "Yes") (NIL "No")))

(DEFVAR FQUERY-FORMAT-STRING)
(DEFVAR FQUERY-FORMAT-ARGS)
(DEFVAR FQUERY-LIST-CHOICES)
(DEFVAR FQUERY-CHOICES)
(DEFVAR FQUERY-HELP-FUNCTION)
(DEFVAR FQUERY-STATUS)

(DEFUN FQUERY (OPTIONS &OPTIONAL FQUERY-FORMAT-STRING &REST FQUERY-FORMAT-ARGS)
  (SI:WITH-PROCESS-INTERACTIVE-PRIORITY ()
    (LEXPR-FUNCALL #'FQUERY-INTERNAL OPTIONS)))

;Extracted from FQUERY-INTERNAL.
(DEFUN WITH-QUERY-IO-SELECTED-IF-INTERNAL (SELECT-P CONTINUATION)
  (DECLARE (SYS:DOWNWARD-FUNARG CONTINUATION))
  (LET ((OLD-SELECTED-WINDOW NIL) (NOTIFIED-P NIL))
    (UNWIND-PROTECT
	(PROGN (WHEN (AND SELECT-P (OPERATION-HANDLED-P QUERY-IO :SELECT-RELATIVE))
		 ;; If WINDOW is a sheet, make sure it's activated, so it knows
		 ;; correctly what screen and console it is on
		 (SEND-IF-HANDLES QUERY-IO :ACTIVATE)
		 (SETQ OLD-SELECTED-WINDOW (LET ((SCREEN (SEND-IF-HANDLES QUERY-IO :SCREEN)))
					     (IF SCREEN
						 (TV:SHEET-SELECTED-WINDOW SCREEN)
						 TV:SELECTED-WINDOW)))
		 (WHEN (NEQ (SEND QUERY-IO :ALIAS-FOR-SELECTED-WINDOWS)
			    (AND OLD-SELECTED-WINDOW
				 (SEND OLD-SELECTED-WINDOW :ALIAS-FOR-SELECTED-WINDOWS)))
		   (TV:NOTIFY QUERY-IO "Process ~A wants to ask a question." CURRENT-PROCESS)
		   (SETQ NOTIFIED-P T))
		 (SEND QUERY-IO :OUTPUT-HOLD-EXCEPTION)
		 (SEND QUERY-IO :SELECT-RELATIVE))
	       (FUNCALL CONTINUATION NOTIFIED-P))
      (WHEN OLD-SELECTED-WINDOW
	(SEND OLD-SELECTED-WINDOW :SELECT-RELATIVE)))))

(DEFMACRO WITH-QUERY-IO-SELECTED-IF (TEST (&OPTIONAL NOTIFIED-P-VAR) &BODY FORMS)
  `(WITH-QUERY-IO-SELECTED-IF-INTERNAL
     ,TEST
     (ZL:NAMED-LAMBDA WITH-QUERY-IO-SELECTED-IF (,(OR NOTIFIED-P-VAR 'IGNORE))
       ,@FORMS)))

(DEFMACRO WITH-QUERY-IO-SELECTED ((&OPTIONAL NOTIFIED-P-VAR) &BODY FORMS)
  `(WITH-QUERY-IO-SELECTED-IF T (,NOTIFIED-P-VAR) ,@FORMS))

(DEFUN FQUERY-INTERNAL (&REST OPTIONS
			&KEY (MAKE-COMPLETE T)
			      (TYPE :TYI)
			      (CHOICES Y-OR-N-P-CHOICES)
			      ((:BEEP BEEP-P) NIL)
			      (CLEAR-INPUT NIL)
			      (SELECT NIL)
			      (NO-INPUT-SAVE NIL)
			      (FRESH-LINE (NOT (NULL FQUERY-FORMAT-STRING)))
			      (LIST-CHOICES T)
			      (HELP-FUNCTION 'DEFAULT-FQUERY-HELP)
			      (STATUS NIL)
			      (STREAM QUERY-IO)
			      (SIGNAL-CONDITION NIL))
  (WHEN SIGNAL-CONDITION
    (MULTIPLE-VALUE-BIND (HANDLED-P SIGNAL-CHOICE)
	(SIGNAL 'FQUERY
		:OPTIONS OPTIONS
		:FORMAT-STRING FQUERY-FORMAT-STRING
		:FORMAT-ARGS FQUERY-FORMAT-ARGS
		:PROCEED-TYPES '(:CHOICE))
      (WHEN HANDLED-P
	(RETURN-FROM FQUERY-INTERNAL SIGNAL-CHOICE))))
  (FLET ((FQUERY-ASK (STREAM)
	   (LET ((FQUERY-LIST-CHOICES LIST-CHOICES)
		 (FQUERY-CHOICES CHOICES)
		 (FQUERY-HELP-FUNCTION HELP-FUNCTION)
		 (FQUERY-STATUS STATUS)
		 (QUERY-IO STREAM)
		 TYPE-FUNCTION)
	     (CL:ASSERT (PROGN
			  (CHECK-ARG TYPE
				     (SETQ TYPE-FUNCTION (GET TYPE 'FQUERY-FUNCTION))
				     "a valid FQUERY type")
			  (FUNCALL TYPE-FUNCTION :CHECK-CHOICES CHOICES))
			(TYPE CHOICES)
			"~S is incompatible with ~S." CHOICES TYPE)
	     (FORMAT:WITH-QUERY-IO-SELECTED-IF SELECT (NOTIFIED-P)
	       (IF NOTIFIED-P (SETQ BEEP-P NIL))
	       (LOOP DOING
		 (WHEN (AND BEEP-P (VARIABLE-BOUNDP #'BEEP))
		   (BEEP))
		 (WHEN CLEAR-INPUT
		   (SEND QUERY-IO :CLEAR-INPUT))
		 (WHEN FRESH-LINE
		   (SEND QUERY-IO :FRESH-LINE))
		 (MULTIPLE-VALUE-BIND (CHOICE FOUND)
		     (WITH-INPUT-EDITING-OPTIONS
			 ((:NO-INPUT-SAVE NO-INPUT-SAVE))
		       (FUNCALL TYPE-FUNCTION :CHOOSE))
		   (WHEN FOUND
		     (WHEN MAKE-COMPLETE
		       (SEND-IF-HANDLES QUERY-IO :MAKE-COMPLETE))
		     (RETURN-FROM FQUERY-INTERNAL CHOICE)))
		 (SETQ BEEP-P T
		       CLEAR-INPUT T
		       FRESH-LINE T		;User spazzed, will need fresh line
		       FQUERY-LIST-CHOICES T))))))
    (LET ((SPECIAL-STREAM (SEND-IF-HANDLES STREAM :FQUERY-STREAM)))
       (COND (SPECIAL-STREAM
	      (FQUERY-ASK SPECIAL-STREAM))
	     ((NOT RUBOUT-HANDLER)
	      (FQUERY-ASK STREAM))
	     (T
	      (SI:WITH-IE-TYPEIN (STREAM NIL :REFRESH NIL)
		(FQUERY-ASK STREAM)))))))

(DEFUN FQUERY-PROMPT (STREAM &OPTIONAL REASON)
  REASON					;Passed in by the input editor.  Ignored.
  (WHEN FQUERY-FORMAT-STRING
    (LEXPR-FUNCALL #'FORMAT STREAM FQUERY-FORMAT-STRING FQUERY-FORMAT-ARGS))
  (WHEN FQUERY-LIST-CHOICES
    (FQUERY-LIST-CHOICES STREAM)))

(DEFUN DEFAULT-FQUERY-HELP (STREAM)
  (FQUERY-LIST-CHOICES STREAM T))

(DEFUN FQUERY-LIST-CHOICES (STREAM &OPTIONAL FOR-HELP-P)
  (CL:WRITE-STRING (IF FOR-HELP-P "(Type " "(") STREAM)
  (LET ((TYPE `((FQUERY-CHOICE :CHOICES ,FQUERY-CHOICES) :FOR-HELP-P ,FOR-HELP-P)))
    (DW:DESCRIBE-PRESENTATION-TYPE TYPE STREAM))
  (CL:WRITE-STRING ") " STREAM))

(SCL:DEFINE-PRESENTATION-TYPE FQUERY-CHOICE ((&KEY CHOICES) &KEY FOR-HELP-P)
   ;; This parser is really only for the :READLINE type.
   :PARSER ((STREAM &KEY TYPE INITIALLY-DISPLAY-POSSIBILITIES)
	    (IGNORE FOR-HELP-P)
	    (LET ((IMPOSSIBLE-IS-OK-P (MEMQ :ANY CHOICES)))
	      (MULTIPLE-VALUE-BIND (CHOICE SUCCESS STRING)
		  (DW:COMPLETING-FROM-SUGGESTIONS (STREAM
						    :FORCE-COMPLETE (NOT IMPOSSIBLE-IS-OK-P)
						    :TYPE TYPE
						    :INITIALLY-DISPLAY-POSSIBILITIES
						    INITIALLY-DISPLAY-POSSIBILITIES)
		    (DOLIST (CHOICE CHOICES)
		      (UNLESS (EQ CHOICE :ANY)
			(DOLIST (STRING (REST1 CHOICE))
			  (DW:SUGGEST STRING CHOICE)))))
		(CL:FRESH-LINE STREAM)
		(COND (SUCCESS (VALUES CHOICE TYPE))
		      (IMPOSSIBLE-IS-OK-P (VALUES STRING TYPE))
		      (T (ERROR 'DW:INPUT-COMPLETER-NO-MATCH :TYPE TYPE :STRING STRING))))))

   :PRINTER ((CHOICE STREAM)
	     (IGNORE CHOICES)
	     (IF (EQ CHOICE ':ANY)
		 (CL:WRITE-STRING "anything else" STREAM)
		 ;;Print the first input which selects this choice.
		 ;;Don't confuse the user by mentioning possible alternative inputs.
		 (LET ((INPUT (FIRST (REST1 CHOICE))))
		   (IF (CHARACTERP INPUT)
		       (FORMAT STREAM "~:C" INPUT)
		       (CL:WRITE-STRING INPUT STREAM)))
		 ;;If that would echo as something else, say so
		 (WHEN (AND FOR-HELP-P (LISTP (CAR CHOICE)))
		   (FORMAT STREAM " (~A)" (FIRST (REST1 (CAR CHOICE)))))))

   :DESCRIBER ((STREAM &KEY TYPE)
	       (IGNORE FOR-HELP-P)
	       (SCL:FORMAT-TEXTUAL-LIST CHOICES
					(LAMBDA (CHOICE STREAM)
					  (SCL:PRESENT CHOICE TYPE :STREAM STREAM))
					:CONJUNCTION "or"
					:STREAM STREAM)))

(DEFPROP :TYI TYI-FQUERY-FUNCTION FQUERY-FUNCTION)
(DEFSELECT TYI-FQUERY-FUNCTION
  (:CHOOSE ()
   (BLOCK CHOOSE
     (FLET ((FOUND (CHOICE)
	      (SETQ CHOICE (CAR CHOICE))
	      (WHEN (LISTP CHOICE)
		(CL:WRITE-STRING (CADR CHOICE) QUERY-IO)
		(SETQ CHOICE (CAR CHOICE)))
	      (RETURN-FROM CHOOSE (VALUES CHOICE T))))
       (DW:WITH-PRESENTATION-INPUT-CONTEXT (`((FQUERY-CHOICE :CHOICES ,FQUERY-CHOICES))
					    :STREAM QUERY-IO)
					   (BLIP)
	    (LOOP FOR PROMPT = #'FQUERY-PROMPT THEN NIL
		  AS CHAR = (SYS:READ-CHARACTER QUERY-IO
						:PROMPT PROMPT
						:HELP FQUERY-HELP-FUNCTION
						:FRESH-LINE NIL
						:STATUS FQUERY-STATUS
						:PRESENTATION-CONTEXT T) DOING
	      (WHEN (AND (EQ CHAR :STATUS) FQUERY-STATUS)
		(RETURN-FROM CHOOSE (VALUES :STATUS T)))
	      (DOLIST (CHOICE FQUERY-CHOICES)
		(COND ((EQ CHOICE ':ANY)
		       (RETURN-FROM CHOOSE (VALUES CHAR T)))
		      ((SI:MEM-CHAR CHAR (CDR CHOICE))
		       (FOUND CHOICE))))
	      (LET ((WINDOW (SI:FOLLOW-SYN-STREAM QUERY-IO)))
		(UNLESS (AND (TYPEP WINDOW 'DW:DYNAMIC-WINDOW)
			     (NULL (DW::INTERCEPT-SCROLL-KEY WINDOW CHAR)))
		  (RETURN (VALUES NIL NIL)))))
	  (FQUERY-CHOICE
	    (FOUND (DW:PRESENTATION-BLIP-OBJECT BLIP)))))))
  ;;--- It would be nice to be able to flush this.  (ZWEI:FQUERY-WITH-MINI-BUFFER-HISTORY)
  (:MEMBER (CHAR LIST)
   (SI:MEM-CHAR CHAR LIST))
  (:CHECK-CHOICES (CHOICES)
   (LOOP FOR CHOICE IN CHOICES
	 ALWAYS (OR (EQ CHOICE :ANY)
		    (LOOP FOR CH IN (REST1 CHOICE)
			  ALWAYS (CHARACTERP CH))))))

(DEFPROP :READLINE READLINE-FQUERY-FUNCTION FQUERY-FUNCTION)
(DEFSELECT READLINE-FQUERY-FUNCTION
  (:CHOOSE ()
   (WITH-INPUT-EDITING-OPTIONS (((:PROMPT :OVERRIDE) #'FQUERY-PROMPT)
				(:BRIEF-HELP FQUERY-HELP-FUNCTION))
     ;; We never return from here without success; errors are caught by the input editor.
     (LET ((CHOICE (SCL:ACCEPT `((FQUERY-CHOICE :CHOICES ,FQUERY-CHOICES))) ))
       (VALUES (IF (STRINGP CHOICE) CHOICE (FIRST CHOICE)) T))))
  ;;--- It would be nice to be able to flush this
  (:MEMBER (CHAR LIST)
   (SI:MEM-CHAR CHAR LIST))
  (:CHECK-CHOICES (CHOICES)
   (LOOP FOR CHOICE IN CHOICES
	 ALWAYS (OR (EQ CHOICE :ANY)
		    (LOOP FOR STR IN (REST1 CHOICE)
			  ALWAYS (STRINGP STR))))))

;; Y-OR-N-P and YES-OR-NO-P shouldn't do a :FRESH-LINE if called with no arguments,
;; since the message was printed just beforehand.  This is taken care of by FQUERY.

(DEFUN Y-OR-N-P (&OPTIONAL MESSAGE (QUERY-IO QUERY-IO))
  (FQUERY () (AND MESSAGE "~A") MESSAGE))

(DEFVAR YES-OR-NO-P-OPTIONS `(:TYPE :READLINE
			      :NO-INPUT-SAVE T
			      :CHOICES ,YES-OR-NO-P-CHOICES))

(DEFUN YES-OR-NO-P (&OPTIONAL MESSAGE (QUERY-IO QUERY-IO))
  (FQUERY YES-OR-NO-P-OPTIONS (AND MESSAGE "~A") MESSAGE))

(DEFVAR Y-OR-N-P-OPTIONS NIL)					;Obsolete
(DEFVAR YES-OR-NO-QUIETLY-P-OPTIONS YES-OR-NO-P-OPTIONS)	;Obsolete

;;; 22.4 Querying the User
;;; It would be nice if the Zetalisp ones worked this way

(defun cl:y-or-n-p (&rest args)
  (declare (arglist &optional format-string &rest args))
  (cl:apply #'fquery () args))

(defun cl:yes-or-no-p (&rest args)
  (declare (arglist &optional format-string &rest args))
  (cl:apply #'fquery format:yes-or-no-p-options args))
