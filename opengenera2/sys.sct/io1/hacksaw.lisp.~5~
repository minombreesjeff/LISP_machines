;;; -*- Mode: LISP; Syntax: Common-lisp; Package: APPROACH; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; - Show HackSaw
;;; Looks up a possibly unknown-to-the-user, possibly arcane,
;;; fact about using Lisp Machines.  Displays it on the
;;; screen.  This is bound to m-† but can be moved, like this:
;;; (si:add-ie-command 'key-bindable-show-hacksaw #\meta-help)
;;;
;;; - Add HackSaw
;;; Lets anybody add an interesting fact to a file of
;;; interesting facts.  (The initial default is a file 
;;; for site-wide extensions.)  You can also
;;; specify your own personal file of notes.  Maybe you want 
;;; naughty ones or you think yours won't be of general interest.
;;;
;;; - Find HackSaw
;;; Suppose you saw a fact go by but can't remember it now
;;; that you need it.  If you can remember any of the topic
;;; words likely to have been in it, this will find it.
;;;
;;; - Load HackSaw File
;;; This is designed for using from an init-file with
;;; cp:execute-command.  It has two possible uses:
;;; Argument All -- Loads the standard hacksaw file plus all
;;; the ones defined by *hacksaw-extension-files*.
;;; Loads hacksaws from private hacksaws files you designate.
;;; This command is optional, to avoid delays; the files just
;;; load by themselves when they are needed.

(defvar *hacksaw-standard-file* "sys:data;hacksaws.text")
(defvar *hacksaw-extension-files* '("sys:data;hacksaw-extensions.text"))	;list of files
(defvar *hacksaw-files-in-use* ())

(defvar *hacksaw-separator*
	"

")
(defun just-hacksaw-separators (string)
  (loop for ch being the array-elements of string
	always (member ch '(#\return #\ #\space))))

(defvar *hacksaw-initial-size* 400)
(defvar *hacksaws* (make-array *hacksaw-initial-size* :fill-pointer 0))
(defvar *hacksaw-random-ordering* (make-array *hacksaw-initial-size* :leader-list '(0 0)))
(defsubst retrieval-pointer (array)
  (array-leader array 1))
(defvar *hacksaw-buffer* (make-array 1000 :element-type 'character :fill-pointer 0))

;;; Returns a list of the pathnames to load hacksaws from.
;;; This list can get added to by users (via Load Hacksaw File command)
(defun hacksaw-files-to-use ()
  (flet ((canonicalize-pathname (pathname)
	   (send (fs:parse-pathname pathname) :new-version :newest)))
    (remove-duplicates
      (append *hacksaw-files-in-use*
	      (list (canonicalize-pathname *hacksaw-standard-file*))
	      (loop for file in *hacksaw-extension-files*
		    collect (canonicalize-pathname file))))))

;;; Adds a new file name to the list of files containing hacksaws
(defun add-file-to-hacksaws (file)
  ;;Desperation move so that "eq" will work on the pathnames
  (setq file (send (fs:parse-pathname file) :new-version :newest))
  (pushnew file *hacksaw-files-in-use*))

;;; Takes a list of the pathnames of files to read in.
;;; With no argument, it assumes that it wants to read in the standard
;;; list of files (adding to any that are already in use.)
(defun load-hacksaws (&optional pathnames announce)
  (when announce (format t "    ~'iLoading HackSaws, one moment please...~~2%"))
  (loop for file in (or pathnames (hacksaw-files-to-use))
	do
	(load-hacksaw-file file)
	(add-file-to-hacksaws file))
  (extend-ordering))

(defun hacksaws-initialized-p ()
  (and *hacksaw-files-in-use*
       (> (fill-pointer *hacksaws*) 0)))

(defun reset-hacksaws ()
  (setq *hacksaw-files-in-use* ())
  (setf (fill-pointer *hacksaws*) 0)
  (setf (fill-pointer *hacksaw-random-ordering*) 0)
  (setf (retrieval-pointer *hacksaw-random-ordering*) 0))

(defun load-hacksaw-file (pathname)
  (unless (member pathname *hacksaw-files-in-use*)
    (with-open-file-case (stream pathname)
      (fs:file-not-found nil)
      (:no-error
	(loop with (eof hacksaw)
	      do
	      ;; Returns the EOF with the last hacksaw when the file ends without a separator
	      (multiple-value-setq (hacksaw eof)
		(read-hacksaw stream))
	      (when (and (> (string-length hacksaw) 0)
			 (not (just-hacksaw-separators hacksaw)))
		(vector-push-extend hacksaw *hacksaws*))
	      until eof)))))

(defun read-hacksaw (stream)
  ;; We do it this way so we can return the EOF value
  (let* ((eof nil)				
	 (result
	   (with-output-to-string (string)
	     (loop with count
		   do
		   (multiple-value-setq (count eof nil)
		     (send stream :string-line-in nil *hacksaw-buffer*))
		   until (or eof (and (= count 1) (string-equal *hacksaw-buffer* "")))
		   do
		   (write-string *hacksaw-buffer* string)
		   (terpri string)))))
    (values result eof)))

;;;Append to a file or create a new one.  Update the in-memory array too.
;;; Convention: always write the separator, then the string.
(defun append-hacksaw (file hacksaw-text)
  ;; Avoid extra trouble for yourself
  (unless (hacksaws-initialized-p) (load-hacksaws))
  (unless (just-hacksaw-separators hacksaw-text)
    (with-open-file (stream file :direction :output :element-type 'character
			    :if-exists :append :if-does-not-exist :create)
      (format stream "~A~A" *hacksaw-separator* hacksaw-text))
    ;; Need to do this in order to let someone add to an existing file and "activate" it
    (cond ((member file *hacksaw-files-in-use*)
	   (vector-push-extend hacksaw-text *hacksaws*)	;just add to in-memory list
	   (extend-ordering))			;Now sort the newly added one into the deck
	  ;; The file being added to isn't in use yet and needs to be loaded
	  (T (load-hacksaws (list file))))))

;;; We need to implement sampling without replacement.
;;; Think of it this way:  We have a deck of cards, each of which represents
;;; a hacksaw (by its index).  We shuffle the deck and then start dealing one
;;; from it each time someone uses Show HackSaw.  When we've been through the
;;; deck once, we shuffle it again and keep dealing.  A user can hand us more
;;; cards (by Load HackSaw File).  We add the new cards to the undealt part of
;;; the deck, shuffle that, and keep dealing.

(defun hacksaw-random-index ()
  ;; Initialize the ordering if we don't have one yet (which is unlikely)
  (unless (> (fill-pointer *hacksaw-random-ordering*) 0) (extend-ordering))
  ;; If we've gotten to the end of the last ordering, get a new one.
  (when (= (retrieval-pointer *hacksaw-random-ordering*)
	   (fill-pointer *hacksaw-random-ordering*))
    (permute-ordering *hacksaw-random-ordering*))
;  (format t "~&Retrieval-pointer ~D, item ~D" (retrieval-pointer *hacksaw-random-ordering*)
;	  (aref *hacksaw-random-ordering* (retrieval-pointer *hacksaw-random-ordering*)))
  ;; Get the index and bump the retrieval pointer.
  (prog1 (aref *hacksaw-random-ordering* (retrieval-pointer *hacksaw-random-ordering*))
	 (incf (retrieval-pointer *hacksaw-random-ordering*))))

;;; Issue: the size of the array can increase at any time when someone loads
;;; a new file.  This is where we add the new cards to the deck and shuffle
;;; the partial deck.
(defun extend-ordering ()
  (let* ((old-max (fill-pointer *hacksaw-random-ordering*))
	 (new-max (fill-pointer *hacksaws*))
	 (start (retrieval-pointer *hacksaw-random-ordering*)))
    (loop for i from old-max below new-max
	  do
	  (vector-push-extend i *hacksaw-random-ordering*))
    (permute-ordering *hacksaw-random-ordering* start new-max)))

;;; Permute algorithm.  Go through the array once, swapping each element
;;; (in the range start to end) with one chosen randomly (from the same range).
(defun permute-ordering (array &optional start end)
  ;; Assumes that if reordering the whole thing, retrieval starts from beginning again
  (unless start (setf (retrieval-pointer array) 0))
  (setq start (or start 0))
  (setq end (or end (fill-pointer array)))
  (loop with span = (- end start)
	for i from start below end
	for swap-index = (+ start (random span))
	do
	(zl:swapf (aref array i) (aref array swap-index))))

(defun find-hacksaw ()
  (unless (hacksaws-initialized-p) (load-hacksaws nil t))
  (aref *hacksaws* (hacksaw-random-index)))

(defun find-matching-hacksaw (fragments)
  (unless (hacksaws-initialized-p) (load-hacksaws))
  (loop with boyer-search-stuff = (loop for fragment in fragments
					for skip = (zwei:generate-boyer-skip-table fragment)
					for occur = (zwei:generate-boyer-reoccurrence-table
						      fragment)
					collect `(,fragment ,skip ,occur))
	for hacksaw being the array-elements of *hacksaws*
	when (loop for (pattern skip occur) in boyer-search-stuff
		   thereis (zwei:boyer-search-internal
			     pattern hacksaw skip occur 0 (string-length hacksaw)))
	collect hacksaw))

(cp:define-command (com-load-hacksaw-file :command-table "Documentation"
					  :name "Load HackSaw File"
					  :provide-output-destination-keyword nil)
    ((pathnames '((token-or-type (("All" :all))
				((sequence pathname))))
		:default :all))
   (cond ((consp pathnames)
	  (load-hacksaws pathnames))
	 ((and (symbolp pathnames) (eq pathnames :all))
	       (if (hacksaws-initialized-p)	;make it reinitialize cleanly
		   (let ((pathnames (hacksaw-files-to-use)))
		     (reset-hacksaws)
		     (load-hacksaws pathnames))
		   (load-hacksaws)))))

;;; As for provide-output-destination, people felt it would be nice if this
;;; command could append to a file.
(cp:define-command (com-show-hacksaw :name "Show HackSaw" :command-table "Documentation")
    ()
   (indenting-output (*standard-output* 4)
     (format t "~&~A" (or (find-hacksaw)
			  "Software is not always perfect"))))

;;; As for provide-output-destination, people felt it would be nice if this
;;; command could append to a file.
(cp:define-command (com-find-hacksaw :name "Find HackSaw" :command-table "Documentation")
    ((fragments '((sequence string))
		:prompt "one or more words"
		:provide-default nil
		:documentation "Find any HackSaws where these words appear."))
   (let ((saws (find-matching-hacksaw fragments)))
     (if saws
	 (indenting-output (*standard-output* 4)
	   (loop for hacksaw in saws
		 do (format t "~&~A~%" hacksaw)))
	 (format t "~&Sorry.  No one has provided any HackSaws on this topic."))))

(cp:define-command (com-add-hacksaw :name "Add HackSaw" :command-table "Documentation"
				    :provide-output-destination-keyword nil)
    ((file 'pathname
	   :prompt "HackSaw file"
	   :default (fs:parse-pathname (first (or *hacksaw-files-in-use*
						  *hacksaw-extension-files*)))))
   (loop with hacksaw-text = ""
	 do
	 (setq hacksaw-text
	       (prompt-and-read :delimited-string "HackSaw text (end with ”): "))
	 until (> (string-length hacksaw-text) 0)
	 finally (append-hacksaw file hacksaw-text)))

(defun key-bindable-show-hacksaw (window)
  (ignore window)
  (si:with-ie-typeout (*standard-output* :append)
    (com-show-hacksaw)))

(si:add-ie-command 'key-bindable-show-hacksaw #\meta-help)

;;;This is how you get rid of an input editor keybinding
;(setq si:*command-alist* (remove (assoc #\hyper-help si:*command-alist*) si:*command-alist*))




#|

Testing procedures, things learned etc.

You should be able to run the commands in any order.  That
is, it doesn't depend on the user running Show HackSaw
first in order to get the "database" loaded in.  So all of
the "entry point" routines (the ones called by the
commands) should make sure that things are initialized
right.

(defun clear-out-hacksaws ()
  (setq *hacksaw-files-in-use* ())
  (setf (fill-pointer *hacksaws*) 0)
  (setf (fill-pointer *hacksaw-random-ordering*) 0)
  (setf (retrieval-pointer *hacksaw-random-ordering*) 0))

|#
