;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-

;;; Program to read and write UNIX PXL font files to and from in-core BFD's.

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Note that the LGP resolution of 240/inch is assumed because there is no
;;; way to discover or represent this information in the PXL file.

(defparameter *pxl-id* 1001.)

(defun pxl-read-quantity (stream bytes &optional complement)
  (let ((answer (loop with sum = 0
		      repeat bytes
		      do (setq sum (+ (ash sum 8.) (read-byte stream)))
		      finally (return sum))))
    (if (and complement
	     (ldb-test (byte 1 (1- (* 8. bytes))) answer))
	(- answer (ash 1 (* 8. bytes)))
	answer)))

(defun pxl-set-pointer-words (stream pointer)
  (send stream :set-pointer (* 4 pointer)))

(defparameter *lgp-pxl-dots-per-inch* 240.)		;Super duper, huh?

(defun load-pxl-file (path)
  (let* ((bfd (read-pxl-file path))
	 (font (font-from-bfd bfd))
	 (name (bfd-name bfd)))
    (set name font)
    (setf (get name 'bfont-described) font)
    font))

(defun read-pxl-file (path)
  (with-open-file (stream (fs:merge-pathnames
			    path
			    (send (fs:default-pathname) :new-canonical-type :pxl))
		    :direction :input :element-type '(unsigned-byte 8))
    (stack-let ((font-dir (make-array 128.)))
      (let* ((word-length (floor (send stream :length) 4))
	     (truename (send stream :truename))
	     (name-symbol (intern (string-upcase (send truename :name)) si:pkg-fonts-package)))
	(unless (= *pxl-id* (pxl-read-quantity stream 4))
	  (error "~A does not look like a PXL file." truename))
	(pxl-set-pointer-words stream (- word-length 5))
	(pxl-read-quantity stream 4)		;Checksum
	(let* ((magnification (/ (pxl-read-quantity stream 4) 1000.0))
	       (designsize (ash (pxl-read-quantity stream 4) -20.))
	       (directory-pointer (pxl-read-quantity stream 4)))
	  (unless (= *pxl-id* (pxl-read-quantity stream 4))
	    (error "Final PXL ID checkword does not match: ~A." truename))
	  (pxl-set-pointer-words stream directory-pointer)
	  (let ((bfd (make-bfont-descriptor :length 128.
					    :fill-pointer 128.
					    :name name-symbol)))
	    (setf (bfd-get bfd :point-size) designsize)
	    (setf (bfd-get bfd :magnification) magnification)
	    (loop for charno below 128.
		  as pixel-width = (pxl-read-quantity stream 2)
		  as pixel-height = (pxl-read-quantity stream 2)
		  as xoffset = (pxl-read-quantity stream 2 t)
		  as yoffset = (pxl-read-quantity stream 2 t)
		  as raster-description = (pxl-read-quantity stream 4)
		  as tfm-width = (pxl-read-quantity stream 4)
		  for bcd = (make-bchar-descriptor
			      :dimensions (bitbltable-dims pixel-width pixel-height)
			      :char-code charno
			      :set-width (round (/ (float
						     (* tfm-width
							designsize
							magnification
							200.))
						   1_20.
						   72.27))
			      :left-kern xoffset
			      :top-kern (- yoffset)	;temp store this here
			      :raster-width pixel-width
			      :raster-height pixel-height)
		  
		  do (setf (aref font-dir charno) raster-description)
		  when (or (plusp tfm-width) (plusp pixel-width) (plusp pixel-height))
		    do (setf (aref bfd charno) bcd))
	    (setf (bfd-baseline bfd)
		  ;; The "reference point" seems (1?) above what we consider
		  ;; the "baseline" ....
		  (1+ (- (loop for bcd being the bfd-elements of bfd
			       minimize (bcd-top-kern bcd)))))
	    (loop for bcd being the bfd-elements of bfd
		  do (setf (bcd-top-kern bcd)
			   (- (+ (bcd-top-kern bcd)
				 (1- (bfd-baseline bfd))))))
	    
	    (setf (bfd-char-width bfd)
		  (if (aref bfd (char-code #\sp))
		      (bcd-set-width (aref bfd (char-code #\sp)))
		      (loop for bcd being the bfd-elements of bfd
			    maximize (bcd-set-width bcd))))
	    (setf (bfd-line-spacing bfd)
		  (loop for bcd being the bfd-elements of bfd
			maximize (+ (- (bcd-top-kern bcd)) (bcd-raster-height bcd))))
	    (setf (bfd-blinker-height bfd)
		  (bfd-line-spacing bfd))
	    (setf (bfd-blinker-width bfd)
		  (bfd-char-width bfd))
	    (loop for charno below 128.
		  as offset = (aref font-dir charno)
		  unless (zerop offset)
		  do (pxl-set-pointer-words stream offset)
		  (let* ((bcd (aref bfd charno))
			 (width (bcd-raster-width bcd))
			 (height (bcd-raster-height bcd))
			 (w32 (ceiling width 32.))
			 (nbytes (* w32 height 4)))
		    (with-stack-array (arr (floor (array-total-size bcd) 8)  ;assumes art-1b
					   :element-type '(unsigned-byte 8)
					   :displaced-to bcd)
		      (send stream :string-in "Unexpected EOF in middle of character raster"
			    arr 0 nbytes)
		      (loop for i below nbytes
			    do (setf (aref arr i) (bit-reverse-8 (aref arr i)))))))
	    (makunbound name-symbol)
	    (si:nremprop name-symbol 'bfont-described)
	    (setf (get name-symbol 'bfont-descriptor) bfd)
	    bfd))))))

(defun write-pxl-quantity (quantity stream bytes)	;No sign issue
  (dotimes (i bytes)
    (send stream :tyo (ldb (byte 8. (* (- bytes i 1) 8.)) quantity))))

(defun write-pxl-file (bfd path)
  (with-open-file (stream
		    (fs:merge-pathnames
		      path
		      (send (fs:default-pathname) :new-canonical-type :pxl))
		    :direction :output :byte-size 8. :characters nil)
    (stack-let ((font-dir (make-array 128.))
		(vertical-ink-bounds (make-array 128.)))
      (fill font-dir nil)
      (fill vertical-ink-bounds nil)
      (write-pxl-quantity *pxl-id* stream 4)
      (let ((wordaddr 1)
	    top bottom
	    (designsize
	      (or (bfd-get bfd :point-size)
		  (prompt-and-read :decimal-number "Font size in points for ~A: "
				   (bfd-name bfd))))
	    (magnification (or (bfd-get bfd :magnification) 1000.)))
	(loop for charno below 128.
	      as bcd = (aref bfd charno)
	      when bcd do
	      (setf (aref font-dir charno) wordaddr)
	      (multiple-value-setq (top bottom) (bcd-top-bottom-bounds bcd))
	      (if (and top bottom)
		  (setf (aref vertical-ink-bounds charno) (cons top bottom))
		  (setq top 0 bottom (bcd-raster-height bcd)))
	      ;;Both BCD's and PXLs guaranteed 32.
	      (let ((nbytes (floor (* (- bottom top)
				      (decode-raster-array bcd))	;x
				   8.)))
		(unless (zerop (mod nbytes 4))
		  (error "Non-4x bytes in BCD ~S?" bcd))
		(with-stack-array (arr (floor (array-total-size bcd) 8)
				       :element-type '(unsigned-byte 8)
				       :displaced-to bcd)
		  (loop repeat nbytes
			for i upfrom (* 4 (floor (* top (decode-raster-array bcd)) 32.))
			do (send stream :tyo (bit-reverse-8 (aref arr i)))))
		(incf wordaddr (floor nbytes 4))))
	(loop for charno below 128.
	      as bcd = (aref bfd charno)
	      when bcd do
	      (setq top (or (car (aref vertical-ink-bounds charno)) 0)
		    bottom (or (cdr (aref vertical-ink-bounds charno))
			       (bcd-raster-height bcd)))
	      (write-pxl-quantity (bcd-raster-width bcd) stream 2)
	      (write-pxl-quantity (- bottom top) stream 2)
	      (write-pxl-quantity (bcd-left-kern bcd) stream 2)	;XOFFSET
	      (write-pxl-quantity (+ (bcd-top-kern bcd)	;YOFFSET
				     (- top)
				     (1- (bfd-baseline bfd)))
				  stream 2)
	      (write-pxl-quantity (aref font-dir charno) stream 4)
	      ;; Now the fun.  TFMWIDTH.  Rounding don't really matter,
	      ;; this is traditional "fixed point".
	      (write-pxl-quantity
		(round (/ (* (bcd-set-width bcd) 1_20. 72.27)
			  designsize magnification 200.))
		stream
		4)
	      else do (write-pxl-quantity 0 stream 16.))
	(write-pxl-quantity 0 stream 4)	;checksum
	(write-pxl-quantity magnification stream 4)	;magnification
	(write-pxl-quantity (ash designsize 20.) stream 4)	;designsize
	(write-pxl-quantity wordaddr stream 4)	;directory pointer
	(write-pxl-quantity *pxl-id* stream 4)
	(close stream)
	(send stream :truename)))))

(define-font-file-type :pxl
  (:documentation "Unix format used by TeX")
  (:read read-pxl-file)
  (:write (ignore font-bfd file)
   (write-pxl-file font-bfd file)))

(defparameter *bdf-version-number* 2.1)		;Version of 16 Sep 87 15:31

(define-font-file-type :bdf
  (:documentation "Adobe Bitmap Distribution Format")
  (:read read-bdf-file)
  (:write (ignore font-bfd file)
   (write-bdf-file font-bfd file)))

(defun read-bdf-file (file &key (show-comments t) (discard-properties t))
  (with-open-file (stream file :element-type 'string-char)	;Just in case
    (let (bfd font-width font-height font-origin-x font-origin-y)
      (stack-let ((line (make-array 100 :fill-pointer 0 :element-type 'string-char))
		  (line-index 0))
	(labels ((get-next-line ()
		   (loop
		     (setf (fill-pointer line) 0)
		     (loop
		       (multiple-value-bind (length-so-far eof-p more-on-line-p)
			   (send stream :string-line-in nil line
				 (fill-pointer line) (array-total-size line))
			 (when (zerop length-so-far)
			   (when eof-p
			     (error "File ended without ENDFONT"))
			   ;; Ignore blank lines (bug in bitmaptobdf with carriage control).
			   (setq more-on-line-p t))
			 (setf (fill-pointer line) length-so-far)
			 (unless more-on-line-p
			   (return))
			 (adjust-array line (+ (fill-pointer line) 100))))
		     (if (string-equal line "COMMENT" :end1 (min (fill-pointer line) 7))
			 (when show-comments
			   (fresh-line)
			   (write-line (substring line 7)))
			 (return)))
		   line)
		 (get-line-keyword ()
		   (get-next-line)
		   (setq line-index (string-search-char #\space line))
		   (prog1 (intern (nstring-upcase (substring line 0 line-index)) "")
			  (when line-index (incf line-index))))
		 (get-rest-of-line-string ()
		   (substring line line-index))
		 (get-rest-of-line-number (&optional (radix 10))
		   (parse-integer line :start line-index :radix radix))
		 (get-rest-of-line-property ()
		   (if (char-equal (aref line line-index) #\")
		       (let ((result (make-array (- (fill-pointer line) line-index)
						 :element-type 'string-char
						 :fill-pointer 0)))
			 (loop
			   (incf line-index)
			   (when ( line-index (fill-pointer line))
			     (error "EOL in the middle of a property string"))
			   (let ((char (aref line line-index)))
			     (when (char-equal char #\")
			       (incf line-index)
			       (when ( line-index (fill-pointer line))
				 (return))
			       (setq char (aref line line-index))
			       (unless (char-equal char #\")
				 (return)))
			     (vector-push-extend char result)))
			 result)
		       (get-rest-of-line-number)))
		 (get-rest-of-line-number-set (&optional (radix 10))
		   (loop as next-index = (string-search-char #\space line :start line-index)
			 collect (parse-integer line :start line-index :end next-index
						:radix radix)
			 while next-index
			 do (setq line-index (1+ next-index)))))
	  (ecase (get-line-keyword)
	    (:startfont ))
	  (let (name properties)
	    (loop
	      (ecase (get-line-keyword)
		(:font
		  (setq name (intern (string-upcase (get-rest-of-line-string))
				     si:pkg-fonts-package)))
		(:size
		  (destructuring-bind (point-size x-resolution y-resolution)
		      (get-rest-of-line-number-set)
		    (setf (getf properties :point-size) point-size
			  (getf properties :x-resolution) x-resolution
			  (getf properties :y-resolution) y-resolution)))
		(:fontboundingbox
		  (setf (list font-width font-height font-origin-x font-origin-y)
			(get-rest-of-line-number-set)))
		(:startproperties
		  (loop
		    (let ((keyword (get-line-keyword)))
		      (case keyword
			(:endproperties (return))
			(otherwise
			  (setf (getf properties keyword) (get-rest-of-line-property)))))))
		(:chars
		  (setq bfd (make-bfont-descriptor :length (get-rest-of-line-number)
						   :fill-pointer 0
						   :name name
						   :line-spacing (+ font-height
								    (max 0 font-origin-y))
						   :baseline (+ font-height
								(min 0 font-origin-y))
						   :char-width (+ font-width
								  (min 0 font-origin-x))
						   :plist (unless discard-properties
							    properties)))
		  (return)))))
	  (catch-error-restart ((error) "Return what has been read in so far")
	    (loop
	      (ecase (get-line-keyword)
		(:startchar
		  (let (index width height raster-width left-kern top-kern)
		    (loop
		      (ecase (get-line-keyword)
			(:encoding
			  (destructuring-bind (standard &optional nonstandard-index)
			      (get-rest-of-line-number-set)
			    (setq index (if (= standard -1) nonstandard-index standard))))
			(:swidth )
			(:dwidth
			  ;; No Y movement possible in BFD's.
			  (setf width (first (get-rest-of-line-number-set))))
			(:bbx
			  (destructuring-bind (w h x y) (get-rest-of-line-number-set)
			    (setq raster-width w
				  height h
				  left-kern (- x)
				  top-kern (- (+ h y) (+ font-height font-origin-y)))))
			(:attributes )
			(:bitmap
			  (if (null index)
			      (loop repeat height do (get-next-line))
			      (let ((bcd (make-bchar-descriptor
					   :dimensions (bitbltable-dims raster-width height)
					   :char-code index
					   :set-width width
					   :left-kern left-kern
					   :top-kern top-kern
					   :raster-width raster-width
					   :raster-height height)))
				(when ( index (array-total-size bfd))
				  (setq bfd (adjust-array bfd (+ index 128))))
				(setf (aref bfd index) bcd)
				(maxf (fill-pointer bfd) (1+ index))
				(stack-let* ((nbytes (/ (array-dimension bcd 1) 8))
					     (bytes (make-array (list (array-dimension bcd 0)
								      nbytes)
								:element-type '(unsigned-byte 8)
								:displaced-to bcd)))
				  (dotimes (y height)
				    (get-next-line)
				    ;; Not all files seem to be padded properly on the right.
				    (loop for line-index from 0 by 2 below (fill-pointer line)
					  for x below nbytes do
				      (let ((byte (bit-reverse-8
						    (dpb (digit-char-p (aref line line-index) 16)
							 (byte 4 4)
							 (digit-char-p (aref line (1+ line-index))
								       16)))))
					(setf (raster-aref bytes x y) byte)))))))
			  (ecase (get-line-keyword)
			    (:endchar))
			  (return))))))
		(:endfont (return)))))))
      bfd)))

(defun write-bdf-file (bfd file &optional charset)
  (unless charset
    (multiple-value-setq (nil charset)
      (si:backtranslate-font (bfd-name bfd) si:*b&w-screen*)))
  (let* ((resolution 72)
	 (pixel-size (/ 72 resolution)))
    (with-open-file (stream file :direction :output :element-type 'string-char)
      (format stream "STARTFONT ~S~%FONT GENERA-~A~%SIZE ~D ~D ~D~%"
	      *bdf-version-number* (bfd-name bfd) (bfd-line-spacing bfd) resolution resolution)
      (let* ((ascent (bfd-baseline bfd))
	     (descent (- (bfd-line-spacing bfd) ascent)))
	(loop for bcd being the bfd-elements of bfd
	      for top-kern = (bcd-top-kern bcd)
	      for left-kern = (bcd-left-kern bcd)
	      for height = (bcd-raster-height bcd)
	      do (multiple-value-bind (raster-top raster-bottom)
		     (fed:bcd-top-bottom-bounds bcd)
		   (if (and raster-top raster-bottom)
		       (setq top-kern (- top-kern raster-top)
			     height (- raster-bottom raster-top))
		     (setq top-kern (- ascent)
			   height 0)))
	      minimize (- left-kern) into left
	      maximize (+ ascent top-kern) into top
	      maximize (- (bcd-raster-width bcd) left-kern) into right
	      minimize (- (+ ascent top-kern) height) into bottom
	      finally (format stream "FONTBOUNDINGBOX ~D ~D ~D ~D~%"
			      (max 1 (- right left)) (max 1 (- top bottom))
			      left bottom))
	(format stream "STARTPROPERTIES 2~%FONT_ASCENT ~D~%FONT_DESCENT ~D~%ENDPROPERTIES~%"
		ascent descent)
	(format stream "CHARS ~D~%" (loop for bcd being the bfd-elements of bfd count bcd))
	(labels ((index-char (index)
		   (when (and (< index (send charset :n-characters))
			      (or (neq charset si:*standard-character-set*)
				  ;; Format effector character codes are not font indices.
				  (< index #o200)
				  ( index #o300)))
		     (code-char (send charset :make-char index))))
		 (bcd-name (bcd)
		   (let ((index (bcd-char-code bcd)))
		     (if (equalp (send charset :name) "JAPANESE")
			 (multiple-value-bind (hi low)
			     (japanese:char-to-jis-bytes (index-char index))
			   (format nil "~X,~X" hi low))
		       (or (and (< index (send charset :n-characters))
				(or (send charset :char-name (bcd-char-code bcd))
				    (and (eq charset si:*standard-character-set*)
					 (let ((char (index-char index)))
					   (and char (string char))))))
			   (format nil "~3,'0O" index))))))
	  (loop with raster-top and raster-bottom
		for bcd being the bfd-elements of bfd
		do (format stream "STARTCHAR ~A~%ENCODING -1 ~D~%SWIDTH ~D 0~%DWIDTH ~D 0~%"
			   (bcd-name bcd)
			   (bcd-char-code bcd)
			   (round (* 1000 (bcd-set-width bcd) pixel-size))
			   (bcd-set-width bcd))
		for top-kern = (bcd-top-kern bcd)
		for left-kern = (bcd-left-kern bcd)
		for width = (bcd-raster-width bcd)
		for height = (bcd-raster-height bcd)
		do (multiple-value-setq (raster-top raster-bottom)
		     (fed:bcd-top-bottom-bounds bcd))
		   (if (and raster-top raster-bottom)
		       (setq top-kern (- top-kern raster-top)
			     height (- raster-bottom raster-top))
		     (setq top-kern (- ascent)
			   height 0))
		for left = (- left-kern)
		for top = (+ ascent top-kern)
		for bottom = (- top height)
		if (or (zerop width) (zerop height))
		  do (format stream "BBX 1 1 ~D ~D~%BITMAP~%00~%ENDCHAR~%" left bottom)
		else
		  do (format stream "BBX ~D ~D ~D ~D~%BITMAP~%" width height left bottom)
		     (stack-let ((bytes (make-raster-array
					  (%fixnum-ceiling (array-row-span bcd) 8)
					  raster-bottom
					  :element-type '(unsigned-byte 8)
					  :displaced-to bcd)))
		       (loop for y upfrom raster-top below raster-bottom
			     do (loop for x below (%fixnum-ceiling width 8)
				      for byte = (bit-reverse-8 (raster-aref bytes x y))
				      do (format stream "~2,'0X" byte))
				(format stream "~%")))
		     (format stream "ENDCHAR~%")))
	(format stream "ENDFONT~%")
	(close stream)
	(truename stream)))))
