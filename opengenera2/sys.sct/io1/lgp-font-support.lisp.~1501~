;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; LGP font stuff
(defvar *lgp-font-bfd-search-paths* '("SYS: FONTS; LGP1; .BFD >"
				      "SYS: FONTS; NLGP1; .BFD >"))

(defun find-lgp-or-screen-bfd-file (name)
  (with-stack-list (pathpaths *screen-font-bfd-search-paths* lgp::*lgp2-font-bfd-search-paths*
			      dmp1::*dmp1-font-bfd-search-paths* *lgp-font-bfd-search-paths*)
    (loop named outer
	  for l in pathpaths
	  do (loop for path in l
		   as upath = (fs:parse-pathname path)
		   as pathn = (send upath :new-name (string name))
		   as found? = (condition-case ()
				    (probe-file pathn)
				  (fs:directory-not-found nil))
		   when found?
		   do (return-from outer (send found? :new-version :newest))
		   finally (return nil)))))

;;; Given a font symbol, get the font itself from someplace
(defun get-lgp-font (font-symbol &optional (rotation 0))
  (check-type font-symbol (and symbol
			       (satisfies (lambda (symbol)
					    (eq (symbol-package symbol)
						(symbol-package 'fonts:cptfont)))))
	      "a symbol in the FONTS: package")
  (let ((bfd (or (get font-symbol 'bfont-descriptor)
		 (find-and-load-bfd font-symbol *lgp-font-bfd-search-paths*))))
    (if (zerop rotation)
	bfd
	(ecase rotation
	  (#.(* 90. 60.) (rotate-bfd bfd :left))
	  (#.(* 2 90. 60.) (rotate-bfd bfd :/180))
	  ((#.(* -90. 60.) #.(* 3 90. 60.)) (rotate-bfd bfd :right))))))

(defun all-byte-sized (lowest highest &rest to-be-checked)
  (loop for num in to-be-checked
	always ( lowest num highest)))

(defun define-bcd-to-lgp (ch font-number bfd output-stream)
  (let ((bcd (aref bfd ch))
	(baseline (bfd-baseline bfd))
	(obfuscated? (let ((prop (bfd-get bfd :obfuscation)))
		      (and prop (not (equal prop 0))))))
    (if (all-byte-sized -128. 127.
			(bcd-raster-width bcd)
			(bcd-raster-height bcd)
			(bcd-set-width bcd)
			(bcd-left-kern bcd)
			baseline)
	(define-small-bcd-to-lgp ch font-number bcd baseline output-stream obfuscated?)
	(define-large-bcd-to-lgp ch font-number bcd baseline output-stream obfuscated?))))

(defun define-small-bcd-to-lgp (ch font-number bcd baseline output-stream obfuscated?)
  (declare (special lgp::*escape-char*))
  (multiple-value-bind (top bottom+1) (bcd-top-bottom-bounds bcd)
    (if (null top)
	(tyo-many output-stream
		  lgp::*escape-char* (char-code #\d) ch font-number 0 0 0 0
		  (bcd-set-width bcd) (or (bcd-get bcd :vertical-width) 0))
	(let ((n16-across (fast-ceiling (bcd-raster-width bcd) 16.))
	      (n-down (- bottom+1 top)))
	  (tyo-many output-stream
		    lgp::*escape-char*
		    (if obfuscated? (char-code #\D) (char-code #\d))
		    ch font-number
		    n16-across n-down
		    (- (bcd-left-kern bcd)) (+ (- baseline top) (bcd-top-kern bcd))
		    (bcd-set-width bcd) (or (bcd-get bcd :vertical-width) 0)
		    )
	  (define-bcd-raster-to-lgp bcd top bottom+1 n16-across output-stream)))))

(defun define-large-bcd-to-lgp (ch font-number bcd baseline output-stream obfuscated?)
  (declare (special lgp::*escape-char*))
  (multiple-value-bind (top bottom+1) (bcd-top-bottom-bounds bcd)
    (if (null top)
	(progn (tyo-many output-stream lgp::*escape-char* (char-code #\c) ch font-number)
	       (tyo-many-signed-16 output-stream 0 0 0 0
				   (bcd-set-width bcd) (or (bcd-get bcd :vertical-width) 0)))
	(let ((n16-across (fast-ceiling (bcd-raster-width bcd) 16.))
	      (n-down (- bottom+1 top)))
	  (tyo-many output-stream lgp::*escape-char*
		    (if obfuscated? (char-code #\C) (char-code #\c))
		    ch font-number)
	  (tyo-many-signed-16 output-stream
			      n16-across n-down
			      (- (bcd-left-kern bcd)) (+ (- baseline top) (bcd-top-kern bcd))
			      (bcd-set-width bcd) (or (bcd-get bcd :vertical-width) 0)
			      )
	  (define-bcd-raster-to-lgp bcd top bottom+1 n16-across output-stream)))))

(defun define-one-time-raster-bcd-to-lgp (bcd baseline output-stream
					  obfuscated?)
  (declare (special lgp::*escape-char*))
  (when obfuscated? (error "Can't hack obfuscated one-time-rasters ~s" bcd))
  (multiple-value-bind (top bottom+1) (bcd-top-bottom-bounds bcd)
    (if (null top)
	(progn (tyo-many output-stream lgp::*escape-char* (char-code #\b))
	       (tyo-many-signed-16 output-stream 0 0 0 0
				   (bcd-set-width bcd) (or (bcd-get bcd :vertical-width) 0)))
	(let ((n16-across (fast-ceiling (bcd-raster-width bcd) 16.))
	      (n-down (- bottom+1 top)))
	  (tyo-many output-stream lgp::*escape-char* (char-code #\b))
	  (tyo-many-signed-16 output-stream
			      n16-across n-down
			      (- (bcd-left-kern bcd)) (+ (- baseline top) (bcd-top-kern bcd))
			      (bcd-set-width bcd) (or (bcd-get bcd :vertical-width) 0)
			      )
	  (define-bcd-raster-to-lgp bcd top bottom+1 n16-across output-stream)))))

(defun define-bcd-raster-to-lgp (bcd top bottom+1 n16-across output-stream)
  (sys:with-stack-array (arr (floor (sys:array-length bcd) 8)	;assumes art-1b
			     :type 'art-8b
			     :displaced-to bcd)
    (let ((bytes-per-row (floor (decode-raster-array bcd) 8.)))
      (let ((toprow (* top bytes-per-row))
	    (botrow (* bottom+1 bytes-per-row)))
	(loop with wid16 = (* n16-across 2)
	      for idx from toprow below botrow by bytes-per-row
	      do (send output-stream :string-out arr idx (+ idx wid16)))))))
