;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Loop paths for BFD

;;(loop for bcd being bfd-elements of bfd using ch ...)
;;==> (loop with (ch bcd) do (multiple-value (ch bcd) (next-bfd-element bfd ch))
;;          while bcd ...)

(define-loop-path bfd-elements
		  bfd-elements-loop-expander
  (of using using-bfd)					;allowable prepositions
  )

(defun bfd-elements-loop-expander (iteration-path-name
				   bcd-var bcd-var-data-type prep-phrases
				   inclusive? allowed-prepositions data)
  iteration-path-name allowed-prepositions data			;ignored args
  (multiple-value-bind (bfd-val ch-var)
      (let ((of-clause (si:loop-tassoc 'of prep-phrases))
	    (using-clause (si:loop-tassoc 'using prep-phrases)))
	(values (if (null of-clause)
		    (error "Missing OF in BFD-ELEMENTS iteration path of ~s" bcd-var)
		    (second of-clause))
		(if (null using-clause) (gensym) (second using-clause))))
    (when inclusive? (error "Inclusive stepping not supported for BFD-ELEMENTS path"))
    (let* ((using-bfd (second (si:loop-tassoc 'using-bfd prep-phrases)))
	   (bfd-var (or using-bfd (gensym)))
	   (bindings `((,bfd-var ,bfd-val ())
		       (,bcd-var () ,bcd-var-data-type)
		       (,ch-var () ())))
	   (prologue ())
	   (pre-step-end-test ())
	   (steps `(,bcd-var (progn (multiple-value-setq (,ch-var ,bcd-var)
				      (next-bfd-element ,bfd-var ,ch-var))
				    ,bcd-var)))
	   (post-step-endtest `(null ,bcd-var))
	   (pseudo-steps ())
	   )
      (list bindings
	    prologue
	    pre-step-end-test steps post-step-endtest pseudo-steps))))

;;(loop for (big-half little-half) being successive-halvings of n do ...)
;;Too bad about arrogating the destructuring syntax, I guess.

(define-loop-path successive-halvings
		  successive-halvings-loop-expander
  (of)						;allowable prepositions
  )

(defun successive-halvings-loop-expander (iteration-path-name
					  halv-vars halv-vars-data-type prep-phrases
					  inclusive? allowed-prepositions data)
  iteration-path-name allowed-prepositions data			;ignored args
  (unless (and (listp halv-vars) (= 2 (length halv-vars)))
    (error "The variable-pair ~s is not a pair of variables" halv-vars))
  (destructuring-bind (bigger-var littler-var) halv-vars
    (let ((outer-val (second (first prep-phrases))))
      (when inclusive?
	(error "Inclusive stepping not supported for SUCCESSIVE-HALVINGS path"))
      (let* ((outer-var (gensym))
	     (bindings `((,outer-var ,outer-val ())
			 (,bigger-var 0 ,(if (listp halv-vars-data-type)
					     (first halv-vars-data-type)
					     halv-vars-data-type))
			 (,littler-var 0 ,(if (listp halv-vars-data-type)
					     (second halv-vars-data-type)
					     halv-vars-data-type))))
	     (prologue ())
	     (pre-step-end-test `(zerop ,outer-var))
	     (steps `(,outer-var (progn (setq ,littler-var (floor ,outer-var 2)
					      ,bigger-var (- ,outer-var ,littler-var))
					,bigger-var)))
	     (post-step-endtest `(zerop ,littler-var))
	     (pseudo-steps ()))
	(list bindings
	      prologue
	      pre-step-end-test steps post-step-endtest pseudo-steps)))))
