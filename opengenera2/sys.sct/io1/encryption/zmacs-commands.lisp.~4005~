D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; Lowercase: T -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(define-section-name |(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")Zwei Primitives0|)
(defun2 encrypt-interval0 (encryption-method start-bp 1&optional0 end-bp in-order-p)
  (declare (values encrypted-interval))
  (let ((encrypted-interval (create-interval)))
    (with-interval-stream (encrypted-output encrypted-interval)
      (with-interval-stream (decrypted-input start-bp end-bp in-order-p)
	(condition-case (.error.)
	     (encrypt:stream-copy-with-encryption encryption-method
						  decrypted-input encrypted-output)
	   (encrypt:encryption-error
	     (barf "~A" .error.)))))
    encrypted-interval))
(defun 2decrypt-interval0 (encryption-method start-bp 1&optional0 end-bp in-order-p)
  (declare (values decrypted-interval))
  (let ((decrypted-interval (create-interval)))
    (with-interval-stream (decrypted-output decrypted-interval)
      (with-interval-stream (encrypted-input start-bp end-bp in-order-p)
	(condition-case (.error.)
	     (encrypt:stream-copy-with-decryption encryption-method
						  encrypted-input decrypted-output)
	   (encrypt:encryption-error
	     (barf "~A" .error.)))))
    decrypted-interval))

(define-section-name |2Zmacs Commands0|)
(defcom 2com-encrypt-buffer
0  "Encrypts the contents of the buffer.
Prompts for a key, and doesn't echo it as you type it.  Prompts for the
same key again, just in case you mistyped it because of the lack of
echoing, and makes sure you typed it the same both times.  The
encryption algorithm is the same one used by the Hermes mail-reading
system."
	()
  (with-interval-write-locked (*interval*)
    (let ((encrypted-interval (encrypt-interval 'encrypt:hermes *interval*)))
      (with-undo-save ("encrypt"
		       ;; Specify BP's, rather than just *interval*, so change gets recorded
		       (interval-first-bp *interval*) (interval-last-bp *interval*) t)
	(delete-interval (interval-first-bp *interval*) (interval-last-bp *interval*) t)
	(insert-interval (interval-last-bp *interval*) encrypted-interval))))
  dis-text)
(defcom 2com-decrypt-buffer
0  "Decrypts the contents of the buffer.
Prompts for a key, and doesn't echo it as you type it.  The
encryption algorithm is the same one used by the Hermes mail-reading
system."
	()
  (with-interval-write-locked (*interval*)
    (let ((decrypted-interval (decrypt-interval 'encrypt:hermes *interval*)))
      (with-undo-save ("decrypt"
		       ;; Specify BP's, rather than just *interval*, so change gets recorded
		       (interval-first-bp *interval*) (interval-last-bp *interval*) t)
	(delete-interval (interval-first-bp *interval*) (interval-last-bp *interval*) t)
	(insert-interval (interval-last-bp *interval*) decrypted-interval))))
  dis-text)
1;;; Install the above commands into the Zmacs comtab --
0(when *zmacs-comtab*
  (set-comtab *zmacs-comtab* nil
			     (make-command-alist
			       '(com-encrypt-buffer com-decrypt-buffer))))
