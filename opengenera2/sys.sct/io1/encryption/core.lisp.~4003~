D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-lisp; Package: ENCRYPT; Base: 10; Lowercase: T -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(zwei:define-section-name |(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")Primitives0|)
(defun 2stream-copy-with-encryption0 (encryption-method from-stream to-stream)
  (labels ((encrypt (output-stream)
	     (using-resource (encoding-stream si:epsilon-encoding-output-stream output-stream)
	       (with-open-stream (encoding-stream encoding-stream)
		 (stream-copy-until-eof from-stream encoding-stream)))))
    (with-open-stream (decrypted-input
			(sys:open-coroutine-stream #'encrypt
						   :direction :input
						   :element-type 'cl:string-char))
      (funcall (get encryption-method 'encryption-function) decrypted-input to-stream))))
(defun 2stream-copy-with-decryption0 (encryption-method from-stream to-stream)
  (labels ((decrypt (input-stream)
	     (using-resource (decoding-stream si:epsilon-decoding-input-stream input-stream)
	       (with-open-stream (decoding-stream decoding-stream)
		 (stream-copy-until-eof decoding-stream to-stream)))))
    (with-open-stream (decrypted-output
			(sys:open-coroutine-stream #'decrypt
						   :direction :output
						   :element-type 'cl:string-char))
      (funcall (get encryption-method 'decryption-function) from-stream decrypted-output))))

(zwei:define-section-name |2Utilities0|)
(defflavor 2encryption-error
0	()
	(zl:ferror))

(compile-flavor-methods encryption-error)
(defun 2encryption-error0 (format-string 1&rest0 format-args)
  (signal 'encryption-error :format-string format-string :format-args format-args))
(defun 2read-encryption-key0 (encrypting 1&optional0 validation-function
				       1&key0 (verify t) (stream cl:*query-io*))
  (declare (sys:downward-funarg validation-function))
  (let ((using-*typein-window* (and (variable-boundp zwei:*typein-window*)
				    (eq (si:follow-syn-stream stream) zwei:*typein-window*))))
    (labels ((type (format-string 1&rest0 format-args)
	       (if using-*typein-window*
		   (cl:apply 'zwei:typein-line format-string format-args)
		   (cl:apply 'format stream format-string format-args)))
	     (error (format-string 1&rest0 format-args)
	       (beep nil stream)
	       (cl:apply #'type format-string format-args)))
      (loop with key = nil
	    with verification-key = nil
	    as first-time = t then nil
	    do (type "~:[~&~;~:|~]~:[De~;En~]cryption key: "
		     (and using-*typein-window* first-time) encrypting)
	       (setf key (fs:readline-no-echo stream))
	    if (string-equal key "")
	      do (error "~&Please enter a key.")
	    else if (and validation-function (not (funcall validation-function key)))
	      do (error "~&Illegal key: ~A.  Please try again." key)
	    else if verify
		   do (type "~&      (verify): ")
		      (setf verification-key (fs:readline-no-echo stream))
		   and if (string-equal key verification-key)
			 return key
		       else
			 do (error "~&Keys do not match.  Please try again.")
	    else
	      return key))))

(zwei:define-section-name |2Encryption Methods0|)
(defvar 2*encryption-methods-alist*0 nil)
(defmacro 2define-encryption-method0 (name 1&key0 encrypt decrypt pretty-name documentation
					      message-header-name message-envelope)
  (declare (zwei:indentation 1 1))
  (check-type name symbol)
  (when (null pretty-name)
    (setq pretty-name (string-capitalize-words name)))
  (when (null documentation)
    (setq documentation (format nil "~A encryption" pretty-name)))
  (when (null message-header-name)
    (setq message-header-name (string-upcase name)))
  `(zl:local-declare ((sys:function-parent ,name define-encryption-method))
     (define-encryption-method-internal ',name ',pretty-name ',documentation
					',message-header-name ',message-envelope)
     (defun (:property ,name encryption-function) (from-stream to-stream)
       ,encrypt)
     (defun (:property ,name decryption-function) (from-stream to-stream)
       ,decrypt)))

(defprop define-encryption-method "Encryption method" si:definition-type-name)

(defun 2define-encryption-method-internal0 (name pretty-name documentation
					       message-header-name message-envelope)
  (when (record-source-file-name name 'define-encryption-method)
    (let ((emae (find name *encryption-methods-alist* :key #'third)))
      (if emae
	  (setf (first emae) pretty-name
		(fifth emae) documentation)
	  (setf emae `(,pretty-name :value ,name :documentation ,documentation)))
      (pushnew emae *encryption-methods-alist* :localize t :replace t))
    (setf (get name 'message-header-name) message-header-name
	  (get name 'message-envelope) message-envelope)))
(define-presentation-type 2encryption-method0 ()
   :abbreviation-for `((alist-member :alist ,*encryption-methods-alist*))
   :history t
   :description "an encryption method")
(zwei:define-section-name |2Encryption Method Psuedo-Slot Accessors0|)

(defun 2encryption-method-pretty-name0 (encryption-method)
  (let ((emae (find encryption-method *encryption-methods-alist* :key #'third)))
    (when emae
      (first emae))))

(defun 2encryption-method-documentation0 (encryption-method)
  (let ((emae (find encryption-method *encryption-methods-alist* :key #'third)))
    (when emae
      (fifth emae))))

(defun 2encryption-method-message-header-name0 (encryption-method)
  (get encryption-method 'message-header-name))

(defun 2encryption-method-message-envelope0 (encryption-method)
  (get encryption-method 'message-envelope))
(defun 2encryption-method-from-message-header-name0 (message-header-name1 &optional0 (start 0) end)
  (dolist (emae *encryption-methods-alist*)
    (let ((method (third emae)))
      (when (string-equal message-header-name (get method 'message-header-name)
			  :start1 start :end1 end)
      (return-from encryption-method-from-message-header-name method))))
  nil)
