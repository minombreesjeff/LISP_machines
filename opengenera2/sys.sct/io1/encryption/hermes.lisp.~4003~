D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-lisp; Package:0 1ENCRYPT; Base:0 18; Lowercase: T -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

1;;; 0HERMES1 mail reader compatible encryption --
;;;    This code is ancient and I doubt that there's anyone at Symbolics who understands it.
0(defsubst (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")32-bit-dpb0 (value ppss word)
  #+cadr (dpb value ppss word)
  #-CADR (sys:%logdpb value ppss word))

1;;; Make up for losing0 A1 machine 2dpb1.
0(defun 2xldb 0(ppss word)
  (let ((width (ldb (byte 6 0) ppss))
	(position (ldb (byte 6 6) ppss)))
    (logand (1- (ash 1 width)) (ash word (- position)))))

(defun 2xdpb0 (value ppss word)
  (let ((width (ldb (byte 6 0) ppss))
	(position (ldb (byte 6 6) ppss)))
    (logior (boole 4 word (ash (1- (ash 1 width)) position))
	    (ash (logand value (1- (ash 1 width))) position))))

(defmacro 2rot-280 (word shift)
  `(let ((.new. (ash ,word ,shift)))
     (logior (xldb 0034 .new.) (ldb (byte 2 34) .new.))))

(defsubst 2\\0 (number divisor)
  (zl:\\ number divisor))
(defun 2make-hermes-permute0 (in-bits out-bits bits)
  (let ((array (make-array in-bits :element-type '(unsigned-byte 8)
				   :leader-list `(,in-bits ,out-bits))))
    (loop for i from 0 below in-bits
	  for j in bits
	  do (setf (aref array i) (1- j)))
    array))

(defun 2make-hermes-si0 (rows)
  (let ((array (make-array 64. :element-type '(unsigned-byte 8))))
    (loop for row in rows
	  for rown from 0
	  as adj = (+ (if ( rown 2) 32. 0) (logand rown 1))
	  do (loop for val in row
		   for col from 0
		   as i = (+ adj (* col 2))
		   do (setf (aref array i) val)))
    array))
(defvar 2*hermes-pc1*0 (make-hermes-permute 64. 56.
					  '#10r (57 49 41 33 25 17 09
						 01 58 50 42 34 26 18
						 10 02 59 51 43 35 27
						 19 11 03 60 52 44 36
						 63 55 47 39 31 23 15
						 07 62 54 46 38 30 22
						 14 06 61 53 45 37 29
						 21 13 05 28 20 12 04)))

(defvar 2*hermes-pc2*0 (make-hermes-permute 56. 48.
					  '#10r (14 17 11 24 01 05
						 03 28 15 06 21 10
						 23 19 12 04 26 08
						 16 07 27 20 13 02
						 41 52 31 37 47 55
						 30 40 51 45 33 48
						 44 49 39 56 34 53
						 46 42 50 36 29 32)))

(defvar 2*hermes-ip*0 (make-hermes-permute 64. 64.
					 '#10r (58 50 42 34 26 18 10 02
						60 52 44 36 28 20 12 04
						62 54 46 38 30 22 14 06
						64 56 48 40 32 24 16 08
						57 49 41 33 25 17 09 01
						59 51 43 35 27 19 11 03
						61 53 45 37 29 21 13 05
						63 55 47 39 31 23 15 07)))

(defvar 2*hermes-ipinv*0 (make-hermes-permute 64. 64.
					    '#10r (40 08 48 16 56 24 64 32
						   39 07 47 15 55 23 63 31
						   38 06 46 14 54 22 62 30
						   37 05 45 13 53 21 61 29
						   36 04 44 12 52 20 60 28
						   35 03 43 11 51 19 59 27
						   34 02 42 10 50 18 58 26
						   33 01 41 09 49 17 57 25)))

(defvar 2*hermes-pforf*0 (make-hermes-permute 32. 32.
					    '#10r (16 07 20 21
						   29 12 28 17
						   01 15 23 26
						   05 18 31 10
						   02 08 24 14
						   32 27 03 09
						   19 13 30 06
						   22 11 04 25)))

(defvar 2*hermes-s1*0 (make-hermes-si
		      '#10r ((14 04 13 01 02 15 11 08 03 10 06 12 05 09 00 07)
			     (00 15 07 04 14 02 13 01 10 06 12 11 09 05 03 08)
			     1;; This is a typo in the 0MACRO1 source.
0			     (04 01 14 08 13 06 02 11 15 12 09 07 03 10 0) ;05 00
			     (15 12 08 02 04 09 01 07 05 11 03 14 10 00 06 13))))

(defvar 2*hermes-s2* 0(make-hermes-si
		      '#10r ((15 01 08 14 06 11 03 04 09 07 02 13 12 00 05 10)
			     (03 13 04 07 15 02 08 14 12 00 01 10 06 09 11 05)
			     (00 14 07 11 10 04 13 01 05 08 12 06 09 03 02 15)
			     (13 08 10 01 03 15 04 02 11 06 07 12 00 05 14 09))))

(defvar 2*hermes-s3*0 (make-hermes-si
		      '#10r ((10 00 09 14 06 03 15 05 01 13 12 07 11 04 02 08)
			     (13 07 00 09 03 04 06 10 02 08 05 14 12 11 15 01)
			     (13 06 04 09 08 15 03 00 11 01 02 12 05 10 14 07)
			     (01 10 13 00 06 09 08 07 04 15 14 03 11 05 02 12))))

(defvar 2*hermes-s4*0 (make-hermes-si
		      '#10r ((07 13 14 03 00 06 09 10 01 02 08 05 11 12 04 15)
			     (13 08 11 05 06 15 00 03 04 07 02 12 01 10 14 09)
			     (10 06 09 00 12 11 07 13 15 01 03 14 05 02 08 04)
			     (03 15 00 06 10 01 13 08 09 04 05 11 12 07 02 14))))

(defvar 2*hermes-s5*0 (make-hermes-si
		      '#10r ((02 12 04 01 07 10 11 06 08 05 03 15 13 00 14 09)
			     (14 11 02 12 04 07 13 01 05 00 15 10 03 09 08 06)
			     (04 02 01 11 10 13 07 08 15 09 12 05 06 03 06 14)
			     (11 08 12 07 01 14 02 13 06 15 00 09 10 04 05 03))))

(defvar 2*hermes-s6*0 (make-hermes-si
		      '#10r ((12 01 10 15 09 02 06 08 00 13 03 04 14 07 05 11)
			     (10 15 04 02 07 12 09 05 06 01 13 14 00 11 03 08)
			     (09 14 15 05 02 08 12 03 07 00 04 10 01 13 11 06)
			     (04 03 02 12 09 05 15 10 11 14 01 07 06 00 08 13))))

(defvar 2*hermes-s7o*0 (make-hermes-si
		       '#10r ((04 11 02 14 15 00 08 13 03 12 09 07 05 10 06 01)
			      (13 00 11 07 04 09 01 10 14 03 05 12 02 15 08 06)
			      (01 04 11 13 12 03 07 14 10 15 06 08 00 05 09 02)
			      (06 11 13 08 01 04 10 07 09 05 00 15 14 02 03 02))))

(defvar 2*hermes-s7n*0 (make-hermes-si
		       '#10r ((04 11 02 14 15 00 08 13 03 12 09 07 05 10 06 01)
			      (13 00 11 07 04 09 01 10 14 03 05 12 02 15 08 06)
			      (01 04 11 13 12 03 07 14 10 15 06 08 00 05 09 02)
			      (06 11 13 08 01 04 10 07 09 05 00 15 14 02 03 12))))

(defvar 2*hermes-s8*0 (make-hermes-si
		      '#10r ((13 02 08 04 06 15 11 01 10 09 03 14 05 00 12 07)
			     (01 15 13 08 10 03 07 04 12 05 06 11 00 14 09 02)
			     (07 11 04 01 09 12 14 02 00 06 10 13 15 03 05 08)
			     (02 01 14 07 04 10 08 13 15 12 09 00 03 05 06 11))))
(defun 2hermes-permute-bits0 (in-1 in-2 array)
  (loop with in-bits = (array-leader array 0)
	and out-bits = (array-leader array 1)
	with in-bits/2 = (/ in-bits 2)
	and out-bits/2 = (/ out-bits 2)
	with out-1 = 0 and out-2 = 0
	for i from 0 below in-bits
	as bit = (aref array i)
	when (if ( bit in-bits/2)
		 (zl:bit-test (ash 1 (- in-bits/2 (- bit in-bits/2) 1)) in-2)
		 (zl:bit-test (ash 1 (- in-bits/2 bit 1)) in-1))
	do (if ( i out-bits/2)
	       (setq out-2 (logior (ash 1 (- out-bits/2 (- i out-bits/2) 1)) out-2))
	       (setq out-1 (logior (ash 1 (- out-bits/2 i 1)) out-1)))
	finally (return (values out-1 out-2))))
(defun 2hermes-crypt0 (bits-1 bits-2 key-array &optional ignore)
  (multiple-value-setq (bits-1 bits-2)
    (hermes-permute-bits bits-1 bits-2 *hermes-ip*))
  (let ((bits-1-high (ldb (byte 16. 16.) bits-1))
	(bits-1-low (ldb (byte 16. 0) bits-1))
	(bits-2-high (ldb (byte 16. 16.) bits-2))
	(bits-2-low (ldb (byte 16. 0) bits-2)))
    (loop repeat 16.
	  for ki from 0 by 2
	  with bits-high = bits-2-high
	  with bits-low = bits-2-low
	  as obits-high = bits-high
	  as obits-low = bits-low
	  do (multiple-value-setq (bits-high bits-low)
	       (hermes-crypt-f bits-high bits-low
			       (aref key-array ki) (aref key-array (1+ ki))))
	  do (setq bits-high (logxor bits-high bits-1-high)
		   bits-low (logxor bits-low bits-1-low))
	     (setq bits-2-high bits-high
		   bits-2-low bits-low)
	     (setq bits-1-high obits-high
		   bits-1-low obits-low))
    (hermes-permute-bits (32-bit-dpb bits-2-high (byte 16. 16.) bits-2-low)
			 (32-bit-dpb bits-1-high (byte 16. 16.) bits-1-low) *hermes-ipinv*)))

(defun 2hermes-crypt-f0 (bits-high bits-low key-high key-low)
  (multiple-value-setq (bits-high bits-low) (hermes-eforf bits-high bits-low))
  (setq bits-high (logxor bits-high key-high))
  (setq bits-low (logxor bits-low key-low))
  (let ((nbits-high (dpb (aref *hermes-s1* (ldb (byte 6 18.) bits-high)) (byte 4 12.)
			 (dpb (aref *hermes-s2* (ldb (byte 6 12.) bits-high)) (byte 4 8.)
			      (dpb (aref *hermes-s3* (ldb (byte 6 6) bits-high)) (byte 4 4)
				   (aref *hermes-s4* (ldb (byte 6 0) bits-high))))))
	(nbits-low (dpb (aref *hermes-s5* (ldb (byte 6 18.) bits-low)) (byte 4 12.)
			(dpb (aref *hermes-s6* (ldb (byte 6 12.) bits-low)) (byte 4 8.)
			     (dpb (aref *hermes-s7n* (ldb (byte 6 6) bits-low)) (byte 4 4)
				  (aref *hermes-s8* (ldb (byte 6 0) bits-low)))))))
    (hermes-permute-bits nbits-high nbits-low *hermes-pforf*)))

(defun 2hermes-eforf0 (in-bits-high in-bits-low)
  (let ((bits-high (dpb (ldb (byte 1 0) in-bits-low) (byte 1 17.)
			(dpb in-bits-high (byte 16. 1) (ldb (byte 1 15.) in-bits-low))))
	(bits-low (dpb (dpb in-bits-high (byte 7 16.) in-bits-low) (byte 23. 1)
		       (ldb (byte 1 15.) in-bits-high))))
    (values (sys:%logdpb (ldb (byte 6 12.) bits-high) (byte 6 18.)
			 (dpb (ldb (byte 6 8.) bits-high) (byte 6 12.)
			      (dpb (ldb (byte 6 4) bits-high) (byte 6 6)
				   (ldb (byte 6 0) bits-high))))
	    (sys:%logdpb (ldb (byte 6 12.) bits-low) (byte 6 18.)
			 (dpb (ldb (byte 6 8.) bits-low) (byte 6 12.)
			      (dpb (ldb (byte 6 4) bits-low) (byte 6 6)
				   (ldb (byte 6 0) bits-low)))))))
(defvar 2*hermes-chars*0)

(defvar 2*hermes-unchars*0)

(defun 2init-hermes-char-tables0 ()
  (setq *hermes-chars* (make-array 64.)
	*hermes-unchars* (make-array 400 :initial-value -1))
  (loop for i from 0 below 26.
	do (let ((code (+ (char-code #\A) i)))
	     (setf (aref *hermes-chars* i) (code-char code)
		   (aref *hermes-unchars* code) i))
	   (let ((code (+ (char-code #\a) i)))
	     (setf (aref *hermes-chars* (+ i 26.)) (code-char code)
		   (aref *hermes-unchars* code) (+ i 26.))))
  (loop for i from 0 below 10.
	do (let ((code (+ (char-code #\0) i)))
	     (setf (aref *hermes-chars* (+ i 52.)) (code-char code)
		   (aref *hermes-unchars* code) (+ i 52.))))
  (setf (aref *hermes-chars* 62.) #\#
	(aref *hermes-unchars* (char-code #\#)) 62.)
  (setf (aref *hermes-chars* 63.) #\%
	(aref *hermes-unchars* (char-code #\%)) 63.))

(init-hermes-char-tables)
(defun 2hermes-key-table-for-key0 (key decrypt-p)
  (loop with key-1 = 0 and key-2 = 0
	for i from 0 below 14.
	as ch = (if ( i (string-length key)) #\Space (aref key i))
	as j = (aref *hermes-unchars* (char-code ch))
	when (< j 26.) do (incf j 26.)
	do (decf j 26.)
	when (> j 35.) do (setq j 35.)
	do (multiple-value-setq (key-1 key-2)
	     (hermes-build-radix-44 key-1 key-2 j))
	finally (return (hermes-setkey (xldb 0440 key-1) (xdpb key-1 3404 (xldb 1034 key-2))
				       decrypt-p))))

(defun 2hermes-setkey0 (key-1 key-2 decrypt-p)
  (let ((array (make-array 32.))
	init incr)
    (if decrypt-p
	(setq init 30. incr -2)
	(setq init 0 incr 2))
    (multiple-value-setq (key-1 key-2)
      (hermes-permute-bits key-1 key-2 *hermes-pc1*))
    (loop repeat 16.
	  for i first init then (+ i incr)
	  for shift in '(1 2 2 2 2 2 2 1 2 2 2 2 2 2 1 1) 
	  do (setq key-1 (rot-28 key-1 shift)
		   key-2 (rot-28 key-2 shift))
	     (multiple-value-bind (key-1a key-2a)
		 (hermes-permute-bits key-1 key-2 *hermes-pc2*)
	       (setf (aref array i) key-1a
		     (aref array (1+ i)) key-2a)))
    array))

(defun 2hermes-build-radix-440 (v-1 v-2 j &aux w-1 w-2)
  (loop repeat 2
	do (setq v-1 (dpb (xldb 4301 v-2) (byte 1 0) (xdpb v-1 0143 0))
		 v-2 (xdpb v-2 0143 0)))
  (setq w-1 v-1 w-2 v-2)
  (loop repeat 3
	do (setq w-1 (dpb (xldb 4301 w-2) (byte 1 0) (xdpb w-1 0143 0))
		 w-2 (xdpb w-2 0143 0)))
  (let ((c (ldb-test 4301 w-2)))
    (setq w-2 (xldb 0044 (+ w-2 v-2)))
    (and c (not (ldb-test 4301 w-2))
	 (setq v-1 (xldb 0044 (1+ v-1))))
    (setq c (ldb-test 4301 w-2))
    (setq w-2 (xldb 0044 (+ w-2 j)))
    (and c (not (ldb-test 4301 w-2))
	 (setq v-1 (xldb 0044 (1+ v-1)))))
  (values (xldb 0044 (+ w-1 v-1))
	  w-2))
1;;; Special "stream" for encryption --
;;;
;;;    Returns the 2char-code1s of the underlying characters with these exceptions:
;;;       #o200 is returned for (3 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")Return1s.
;;;       #o377 is returned for the end of file.
;;;       #o177, #o3nnn1 is returned for characters above #o176 where 3nnn1 is the character's
;;;          2char-code1 minus #o177.
;;;       
0(defflavor 2hermes-encrypting-stream
0	(stream preamble preamble-index flag)
	()
  (:initable-instance-variables stream))

(defun-in-flavor 2(initialize-state hermes-encrypting-stream)0 ()
  (setf preamble (loop with string = (make-array 11. :element-type '(unsigned-byte 8))
		       for i from 0 below 11.
		       do (setf (aref string i) (random 128.))
		       finally (return string))
	flag :preamble
	preamble-index 0))

(defmethod 2(make-instance hermes-encrypting-stream)0 (1&rest0 ignore)
  (initialize-state))

(defmethod 2(initialize hermes-encrypting-stream)0 (new-stream)
  (setf stream new-stream)
  (initialize-state))

(defmethod 2(:interactive hermes-encrypting-stream)0 ()
  nil)

(defmethod 2(:tyi hermes-encrypting-stream)0 ()
  (if (member flag '(:preamble :postamble))
      (if (< preamble-index 11.)
	  (let ((ch (aref preamble preamble-index)))
	    (when (and (eq flag :postamble) ( (\\ preamble-index 4) 3))
	      (setq ch (logxor ch #o177)))
	    (incf preamble-index)
	    ch)
	  (if (eq flag :postamble)
	      #o377
	      (setq flag nil)
	      #o200))
      (block value
	(let ((ch (read-char stream nil)))
	  (when (null ch)
	    (setq flag :postamble
		  preamble-index 0)
	    (return-from value #o200))
	  (let ((code (char-code ch)))
	    (cond ((char= ch #\Return)
		   (return-from value #o200))
		  ((char= ch #\Tab)
		   (setq code #o011))
		  ((= code #o011)
		   (setq code (char-code #\Tab))))
	    (cond ((eq flag :escape)
		   (setq flag nil)
		   (decf code 177))
		  (( code 177)
		   (unread-char ch stream)
		   (setq flag :escape
			 code 177)))
	    code)))))

(compile-flavor-methods hermes-encrypting-stream)

(defresource 2hermes-encrypting-stream0 (stream)
  :constructor (make-instance 'hermes-encrypting-stream :stream stream)
  :initializer (initialize object stream)
  :matcher true)
(defun 2hermes-read-4-chars0 (stream)
  (loop repeat 4 with word = 0
	for wp downfrom 3010 by 1000
	as ch = (read-char stream nil)
	do (setq word (32-bit-dpb ch wp word))
	until (= ch 377)
	finally (return (values word ch))))
(define-encryption-method 2hermes
0  :pretty-name "Hermes"
  :documentation "Hermes mail reader encryption"

  :message-envelope "
	

"

  :encrypt (let* ((key-string (read-encryption-key t))
		  (key (hermes-key-table-for-key (string-upcase key-string) nil)))
	     (using-resource (byte-stream hermes-encrypting-stream from-stream)
	       (loop with (word-high word-low ch)
		     and x = 0
		     do (multiple-value-setq (word-high ch)
			  (hermes-read-4-chars byte-stream))
			(if (= ch 377)
			    (setq word-low 0)
			    (multiple-value-setq (word-low ch)
			      (hermes-read-4-chars byte-stream)))
			(multiple-value-bind (w-1 w-2)
			    (hermes-crypt word-high word-low key)
			  (loop repeat 11.
				with word = (logior (ash w-1 34.) (ash w-2 2))
				for rp downfrom 7406 by 0600
				if (and (plusp x) (zerop (\\ x 50.)))
				  do (write-char #\Return to-stream)
				else if (and (plusp x) (zerop (\\ x 5)))
				       do (write-char #\Space to-stream)
				do (write-char (aref *hermes-chars* (ldb rp word)) to-stream)
				   (incf x)))
		     until (= ch 377))))

  :decrypt (let* ((key-string (read-encryption-key nil nil :verify nil))
		  (key (hermes-key-table-for-key key-string t))
		  (strings nil))
	     (loop named top
		   with string = nil
		   do (loop repeat 11.
			    with word = 0
			    for wp downfrom 7406 by 0600
			    as ch = (loop as ch = (read-char from-stream nil)
					  when (null ch)
					    do (return-from top nil)
					  as uch = (aref *hermes-unchars* (char-code ch))
					  when ( uch 0)
					    return uch)
			    do (setq word (dpb ch wp word))
			    finally (multiple-value-bind (w-1 w-2)
					(hermes-crypt (xldb 4240 word) (xldb 0240 word) key t)
				      (setq word (xdpb w-1 4040 w-2)))
				    (loop repeat 8.
					  for rp downfrom 7010 by 1000
					  as ch = (ldb rp word)
					  if ( ch 200)
					    do (push (or string "") strings)
					       (when (= ch 377) (return-from top t))
					       (setq string nil)
					  else
					    do (unless string
						 (setq string (make-array 80.
								:element-type 'string-char
								:fill-pointer 0)))
					       (vector-push-extend (code-char ch) string))))
	     (setq strings (nreverse strings))
	     (unless (and ( (length strings) 2)
			  (let ((first (first strings))
				(last (first (last strings))))
			    (and (= (string-length first) (string-length last))
				 (loop for i from 0 below (string-length first)
				       always (zerop (logxor (char-code (aref first i))
							     (char-code (aref last i))
							     (if ( (\\ i 4) 3) 177 0)))))))
	       (encryption-error "Incorrect key given."))
	     (do ((l (cdr strings) (cdr l)))
		 ((null (cdr l)))
	       (loop with flag = nil
		     for ch being the array-elements of (car l)
		     do (cond (flag
			       (setq flag nil ch (code-char (+ (char-code ch) 177))))
			      ((= (char-code ch) 177) (setq flag t ch nil)))
			(when ch
			  (case (char-code ch) 
			    (211 (setq ch (code-char 11)))
			    (11 (setq ch #\Tab)))
			  (write-char ch to-stream))
		     finally
		       (write-char #\Return to-stream)))))
