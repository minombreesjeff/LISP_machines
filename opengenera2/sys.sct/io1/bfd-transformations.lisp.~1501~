;;; -*- Mode: LISP; Syntax: Common-lisp; Package: FED; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This stuff is used by hardcopy and the font editor.
;;; It is in hardcopy until we figure out a better place to put it.

(defun multiply-bfd (name new-name xfactor &optional (yfactor xfactor) leave-whitespace)
  (let* ((bfd (get-bfd name))
	 (len (bfd-fill-pointer bfd))
	 (new-bfd (make-bfont-descriptor
		    :length (max #o200 len)
		    :fill-pointer (bfd-fill-pointer bfd)
		    :name new-name
		    :line-spacing (* yfactor (bfd-line-spacing bfd))
		    :baseline (* yfactor (bfd-baseline bfd))
		    :char-width (* xfactor (bfd-char-width bfd))
		    :plist (let ((old-w (bfd-blinker-width bfd))
				 (old-h (bfd-blinker-height bfd)))
			     `(:blinker-width ,(* xfactor old-w)
			       :blinker-height ,(* yfactor old-h))))))
    (loop for bcd being bfd-elements of bfd using ch
	  do (setf (aref new-bfd ch)
		   (if leave-whitespace
		       (multiply-bcd-leaving-whitespace bcd xfactor yfactor)
		       (multiply-bcd bcd xfactor yfactor))))
    (setf (get new-name 'bfont-descriptor) new-bfd)
    new-bfd))

(defun multiply-bcd (bcd xfactor yfactor)
  (let ((width (bcd-raster-width bcd))
	(height (bcd-raster-height bcd))
	(set-width (bcd-set-width bcd))
	(left-kern (bcd-left-kern bcd))
	(left-offset 0))
    (let ((width-to-use (max width set-width)))
      (when (> left-kern 0)
	(incf width-to-use left-kern))
      (when (< left-kern 0)
	(setq left-offset (- left-kern)
	      left-kern 0)
	(incf width-to-use left-offset))
      (let ((new-bcd (make-bchar-descriptor
		       :dimensions (bitbltable-dims (* xfactor width-to-use)
						    (* yfactor height))
		       :char-code (bcd-char-code bcd)
		       :set-width (* xfactor set-width)
		       :left-kern (* xfactor left-kern)
		       :top-kern (* yfactor (bcd-top-kern bcd))
		       :raster-width (* xfactor width-to-use)
		       :raster-height (* yfactor (bcd-raster-height bcd))
		       :plist (copy-list (bcd-plist bcd)))))
	(loop for y below height
	      do (loop for sx below width
		       for dx from left-offset
		       unless (zerop (tv:raster-aref bcd sx y))
			 do (sys:%draw-rectangle
			      xfactor yfactor
			      (* dx xfactor) (* y yfactor)
			      tv:alu-ior new-bcd)))
	new-bcd))))

(defun multiply-bcd-leaving-whitespace (bcd xfactor yfactor)
  (let* ((raster-width (bcd-raster-width bcd))
	 (raster-height (bcd-raster-height bcd))
	 (set-width (bcd-set-width bcd))
	 (left-kern (bcd-left-kern bcd))
	 (right-kern (- raster-width left-kern set-width))
	 (big-raster-width (1+ (* xfactor (+ set-width
					     (max 0 left-kern)
					     (max 0 right-kern))))))
    (let ((new-bcd (make-bchar-descriptor
		     :dimensions (bitbltable-dims big-raster-width
						  (* yfactor raster-height))
		     :char-code (bcd-char-code bcd)
		     :set-width (* xfactor set-width)
		     :left-kern (* xfactor (max 0 left-kern))
		     :top-kern (* yfactor (bcd-top-kern bcd))
		     :raster-width big-raster-width
		     :raster-height (* yfactor raster-height)
		     :plist (copy-list (bcd-plist bcd)))))
      (loop with xsize = # xfactor*3 / 4
	    with ysize = # yfactor*3 / 4
	    ;;emblacken all but first/last row/col in the rectangle
	    for y below raster-height
	    for bigy from 1 by yfactor
	    do (loop for x below raster-width
		     for bigx from (1+ (* xfactor (max 0 (- left-kern)))) by xfactor
		     unless (zerop (tv:raster-aref bcd x y))
		       do (sys:%draw-rectangle
			    xsize ysize
			    bigx bigy
			    tv:alu-ior new-bcd)))
      (unless (= (bcd-char-code bcd) (char-code #\space))
	(let* ((bottom-row (* yfactor raster-height))
	       (leftk (* xfactor (max 0 left-kern)))
	       (cc (+ leftk (* xfactor set-width))))
	  (sys:%draw-rectangle 1 bottom-row leftk 0 tv:alu-ior new-bcd)
	  (sys:%draw-rectangle 1 bottom-row cc 0 tv:alu-ior new-bcd)))
      new-bcd)))

(defun rotate-bfd (old-bfd rotation)
  (setq old-bfd (find-bfd old-bfd))
  (or (cdr (assoc rotation (bfd-get old-bfd :rotated-bfd)))
      (let ((new-bfd
	      (ecase rotation
		(:left (make-bfont-descriptor
			 :length (max #o200 (bfd-fill-pointer old-bfd))
			 :fill-pointer (bfd-fill-pointer old-bfd)
			 :name (intern (string-append (string-upcase (bfd-name old-bfd)) "R")
				       si:pkg-fonts-package)
			 :line-spacing (bfd-line-spacing old-bfd)
			 :baseline (bfd-baseline old-bfd)
			 :char-width (bfd-char-width old-bfd)
			 :plist `(:rotation ,rotation))))))
	(loop with old-baseline = (bfd-baseline old-bfd)
	      with new-baseline = (bfd-baseline new-bfd)
	      for old-bcd being bfd-elements of old-bfd using ch
	      do (setf (aref new-bfd ch)
		       (rotate-bcd old-bcd rotation old-baseline new-baseline)))
	(setf (get (bfd-name new-bfd) 'bfont-descriptor) new-bfd)
	(push (cons rotation new-bfd) (bfd-get old-bfd :rotated-bfd))
	new-bfd)))

(defun rotate-bcd (bcd rotation old-baseline new-baseline)
  (or (cdr (assoc rotation (bcd-get bcd :rotated-bcd)))
      (let ((old-rw (bcd-raster-width bcd)))
	(multiple-value-bind (old-top old-bot+1) (bcd-top-bottom-bounds bcd)
	  (let ((new-bcd
		  (if (null old-top)		;all white
		      (ecase rotation
			(:left
			 (make-bchar-descriptor 
			   :dimensions '(0 0)
			   :char-code (bcd-char-code bcd)
			   :set-width 0
			   :left-kern 0
			   :top-kern 0
			   :raster-width 0
			   :raster-height 0
			   :plist `(:vertical-width ,(bcd-set-width bcd)))))
		      (let ((new-bcd 
			      (ecase rotation
				(:left
				 (unless (zerop (bcd-top-kern bcd))
				   (error "Top kern? ~s" (bcd-top-kern bcd)))
				 (let ((new-rw (- old-bot+1 old-top))
				       (new-rh old-rw))
				   (make-bchar-descriptor 
				     :dimensions (bitbltable-dims new-rw new-rh)
				     :char-code (bcd-char-code bcd)
				     :set-width 0
				     :left-kern (- old-baseline old-top)
				     :top-kern (- (- new-baseline old-rw
						     (- (bcd-left-kern bcd))))
				     :raster-width new-rw
				     :raster-height new-rh
				     :plist `(:vertical-width ,(bcd-set-width bcd))))))))
			(rotate-bcd-pixels rotation bcd new-bcd old-top)))))
	    (push (cons rotation new-bcd) (bcd-get bcd :rotated-bcd))
	    new-bcd)))))

(defun rotate-bcd-pixels (rotation bcd new-bcd old-top)
  (let ((new-rw (bcd-raster-width new-bcd))
	(new-rh (bcd-raster-height new-bcd)))
    (let ((size (ash 1 (integer-length (1- (max new-rw new-rh))))))
      (sys:with-stack-array (arr (bitbltable-dims size size) :type 'art-1b)
	(bitblt tv:alu-seta new-rh new-rw bcd 0 old-top arr 0 0)
	(bitrot-square-array rotation arr size)
	(multiple-value-bind (from-x from-y) 
	    (ecase rotation
	      (:left (values 0 (- size new-rh))))
	  (bitblt tv:alu-seta new-rw new-rh arr from-x from-y new-bcd 0 0))
	new-bcd))))

;;I bet there's a better way for little arrays, like  32 bits...
(defun bitrot-square-array (rotation arr size)
  (using-resource (temp bitbltable-array size size)
    (using-resource (mask bitbltable-array size size)
      (let ((size/2 (floor size 2)))
	(%draw-rectangle size/2 size/2 0 0 tv:alu-ior mask)	;top left
	(%draw-rectangle size/2 size/2 size/2 0 tv:alu-andca mask)	;top right
	(%draw-rectangle size size/2 0 size/2 tv:alu-andca mask)	;bottom half
	(ecase rotation
	  (:left (bitrot-rotate-left size arr mask temp))
	  (:right (bitrot-rotate-right size arr mask temp))
	  (:/180 (bitrot-rotate-180 size arr mask temp))
	  (:l&r (bitrot-reflect-l&r size arr mask temp))
	  (:t&b (bitrot-reflect-t&b size arr mask temp))
	  (:tl&br (bitrot-reflect-tl&br size arr mask temp))
	  (:tr&bl (bitrot-reflect-tr&bl size arr mask temp)))))))

(defmacro bitrot-loop ((s s/2 q q/2) &body body)
  `(loop with ,s/2 = (floor ,s 2)
	 for ,q = ,s/2 then ,q/2
	 for ,q/2 = (floor ,q 2)
	 while ( ,q 1)
	 do ,@body))

(defun bitrot-rotate-left (size arr mask temp)
  (bitrot-loop (size size/2 quad quad/2)
    (bitrot-exchange-top&bottom quad size arr mask temp)
    (bitrot-exchange-topleft&bottomright quad size arr mask temp)
    (bitrot-refine-mask size quad quad/2 mask)
    ))

(defun bitrot-rotate-right (size arr mask temp)
  (bitrot-loop (size size/2 quad quad/2)
    (bitrot-exchange-left&right quad size arr mask temp)
    (bitrot-exchange-topleft&bottomright quad size arr mask temp)
    (bitrot-refine-mask size quad quad/2 mask)
    ))

(defun bitrot-rotate-180 (size arr mask temp)
  (bitrot-loop (size size/2 quad quad/2)
    (bitrot-exchange-topleft&bottomright quad size arr mask temp)
    (bitrot-exchange-topright&bottomleft quad size arr mask temp)
    (bitrot-refine-mask size quad quad/2 mask)
    ))

(defun bitrot-reflect-l&r (size arr mask temp)
  (bitrot-loop (size size/2 quad quad/2)
    (bitrot-exchange-left&right quad size arr mask temp)
    (bitrot-refine-mask size quad quad/2 mask)
    ))
(defun bitrot-reflect-t&b (size arr mask temp)
  (bitrot-loop (size size/2 quad quad/2)
    (bitrot-exchange-top&bottom quad size arr mask temp)
    (bitrot-refine-mask size quad quad/2 mask)
    ))
(defun bitrot-reflect-tl&br (size arr mask temp)
  (bitrot-loop (size size/2 quad quad/2)
    (bitrot-exchange-topleft&bottomright quad size arr mask temp)
    (bitrot-refine-mask size quad quad/2 mask)
    ))
(defun bitrot-reflect-tr&bl (size arr mask temp)
  (bitrot-loop (size size/2 quad quad/2)
    (bitrot-exchange-topright&bottomleft quad size arr mask temp)
    (bitrot-refine-mask size quad quad/2 mask)
    ))

(defun bitrot-exchange-top&bottom (quad size arr mask temp)
  (bitblt tv:alu-seta size size mask 0 0 temp 0 0)	;1
  (bitblt tv:alu-ior (- size quad) size mask 0 0 temp quad 0)	;2
  (bitblt tv:alu-and size size arr 0 0 temp 0 0)	;3
  (bitblt tv:alu-xor size size temp 0 0 arr 0 0)	;4
  (bitblt tv:alu-xor size (- size quad) arr 0 quad temp 0 0)	;5
  (bitblt tv:alu-ior size (- size quad) arr 0 quad arr 0 0)	;6
  (bitblt tv:alu-xor size (- size quad) temp 0 0 arr 0 quad)	;7
  )

(defun bitrot-exchange-left&right (quad size arr mask temp)
  (bitblt tv:alu-seta size size mask 0 0 temp 0 0)
  (bitblt tv:alu-ior size (- size quad) mask 0 0 temp 0 quad)
  (bitblt tv:alu-and size size arr 0 0 temp 0 0)
  (bitblt tv:alu-xor size size temp 0 0 arr 0 0)	;4
  (bitblt tv:alu-xor (- size quad) size arr quad 0 temp 0 0)	;5
  (bitblt tv:alu-ior (- size quad) size arr quad 0 arr 0 0)	;6
  (bitblt tv:alu-xor (- size quad) size temp 0 0 arr quad 0)	;7
  )

(defun bitrot-exchange-topleft&bottomright (quad size arr mask temp)
  (bitblt tv:alu-seta size size arr 0 0 temp 0 0)	;8
  (bitblt tv:alu-xor (- size quad) (- size quad)
	  arr quad quad temp 0 0)		;9
  (bitblt tv:alu-and size size mask 0 0 temp 0 0)	;10
  (bitblt tv:alu-xor size size temp 0 0 arr 0 0)	;11
  (bitblt tv:alu-xor (- size quad) (- size quad)
	  temp 0 0 arr quad quad)		;12
  )
(defun bitrot-exchange-topright&bottomleft (quad size arr mask temp)
  (bitblt tv:alu-seta size size arr 0 0 temp 0 0)
  (bitblt tv:alu-xor (- size quad) (- size quad)
	  arr quad 0 temp 0 quad)
  #| We can't just do this because bitblt source replication is not based on -size- but
     on the size of the source array we happened to pick up from bitbltable-resource.
  (bitblt tv:alu-and size size
	  mask 0 (- size quad) temp 0 0)
   |#
  (bitblt tv:alu-andca (- size quad) (- size quad) mask 0 0 temp quad quad)
  (bitblt tv:alu-andca (- size quad) (- size quad) mask 0 0 temp 0 0)
  (bitblt tv:alu-andca (- size quad) (- size quad) mask 0 0 temp quad 0)
  (bitblt tv:alu-xor size size temp 0 0 arr 0 0)
  (bitblt tv:alu-xor (- size quad) (- size quad)
	  temp 0 quad arr quad 0)
  )

(defun bitrot-refine-mask (size quad quad/2 mask)
  (bitblt tv:alu-and (- size quad/2) (- size quad/2)
	  mask quad/2 quad/2 mask 0 0)	;13
  (bitblt tv:alu-ior (- size quad) size mask 0 0 mask quad 0)	;14
  (bitblt tv:alu-ior size (- size quad) mask 0 0 mask 0 quad)	;15
  )
