;;; LISP Machine Source Compare -*- Base: 8; Mode: LISP;Package: SRCCOM-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFVAR *OUTPUT-STREAM*)

(CL:DEFSTRUCT (FILE :ARRAY-LEADER (:MAKE-ARRAY (:LENGTH 100.))
		     (:CONC-NAME NIL) (:CONSTRUCTOR MAKE-SRCCOM-FILE) (:COPIER NIL))
  (FILE-LENGTH 0)				;Number of lines
  FILE-NAME
  (FILE-TYPE "File")				;What kind of source it has
  FILE-STREAM					;Input stream
  FILE-MAJOR-MODE				;Symbol
  (FILE-BP-TABLE NIL)				;:READ-BP's for each line, if possible
  (FILE-EOF NIL)				;True when end of file reached
  PRESENTATION-TYPE
  PRESENTATION-OBJECT
  )

#||
(DEFMACRO MAKE-FILE (&KEY
		     ((FILE-LENGTH FILE-LENGTH))
		     ((FILE-NAME FILE-NAME))
		     ((FILE-TYPE FILE-TYPE) "File")
		     ((FILE-STREAM FILE-STREAM))
		     ((FILE-MAJOR-MODE FILE-MAJOR-MODE))
		     ((FILE-BP-TABLE FILE-BP-TABLE))
		     ((FILE-EOF FILE-EOF)))
  `(MAKE-SRCCOM-FILE :FILE-LENGTH ,FILE-LENGTH
		     :FILE-NAME ,FILE-NAME
		     :FILE-TYPE ,FILE-TYPE
		     :FILE-STREAM ,FILE-STREAM
		     :FILE-MAJOR-MODE ,FILE-MAJOR-MODE
		     :FILE-BP-TABLE ,FILE-BP-TABLE
		     :FILE-EOF ,FILE-EOF))
||#

;;; Get a line from the file, or the stream
(DEFUN GET-FILE-LINE (FILE LINE-NO)
  (COND ((< LINE-NO (FILE-LENGTH FILE))
	 (AREF FILE LINE-NO))
	((FILE-EOF FILE) NIL)
	(T
	 (LET ((BP (AND (FILE-BP-TABLE FILE)
			(SEND (FILE-STREAM FILE) :READ-BP T))))
	   (MULTIPLE-VALUE-BIND (LINE EOF)
	       (SEND (FILE-STREAM FILE) :LINE-IN T)
	     (COND ((AND EOF (OR (NULL LINE) (EQUAL LINE "")))
		    (SETF (FILE-EOF FILE) T)
		    NIL)
		   (T
		    (ARRAY-PUSH-EXTEND FILE LINE)
		    (WHEN BP (ARRAY-PUSH-EXTEND (FILE-BP-TABLE FILE) BP))
		    LINE)))))))

(DEFVAR *PRINT-LABELS* T)

(DEFUN LINE-LAST-LABEL (FILE LINE-NO)
  (AND *PRINT-LABELS*
       (DO ((I (1- LINE-NO) (1- I))
	    (MODE (FILE-MAJOR-MODE FILE))
	    (LINE))
	   ((< I 0))
	 (AND (LINE-INTERESTING-P (SETQ LINE (AREF FILE I)) MODE)
	      (RETURN (VALUES LINE I))))))

(DEFUN LINE-INTERESTING-P (LINE MODE)
  (AND (PLUSP (ARRAY-ACTIVE-LENGTH LINE))
       (SELECTQ MODE
	 ((:LISP :ZTOP) (CHAR-EQUAL (AREF LINE 0) #/())
	 ((:TEXT :BOLIO) (CHAR-EQUAL (AREF LINE 0) #/.))
	 (OTHERWISE (NOT (MEM #'CHAR-EQUAL (AREF LINE 0) '(#\SP #\TAB)))))))

(DEFVAR *SRRCOM-LINE-COMPARISON-FUNCTION* 'COMPARE-LINES-LITERALLY)
(DEFVAR *SRRCOM-STRING-COMPARISON-FUNCTION* 'SYS:%STRING=)

;; Compare two lines
(DEFUN COMPARE-LINES (LINE-1 LINE-2)
  (COND ((NULL LINE-1) (NULL LINE-2))
	((NULL LINE-2) NIL)
	(T (FUNCALL *SRRCOM-LINE-COMPARISON-FUNCTION* LINE-1 LINE-2))))

(DEFUN COMPARE-LINES-LITERALLY (LINE-1 LINE-2)
  (FUNCALL *SRRCOM-STRING-COMPARISON-FUNCTION* LINE-1 0 LINE-2 0 NIL))

;;--- Write one which ignores commments, too
(DEFUN COMPARE-LINES-IGNORING-LEADING-SPACES (LINE-1 LINE-2)
  (LET ((INDEX1 (OR (STRING-SEARCH-NOT-SET '(#/Space #/Tab) LINE-1) 0))
	(INDEX2 (OR (STRING-SEARCH-NOT-SET '(#/Space #/Tab) LINE-2) 0)))
    (FUNCALL *SRRCOM-STRING-COMPARISON-FUNCTION* LINE-1 INDEX1 LINE-2 INDEX2 NIL)))


(DEFVAR *PATHNAME-DEFAULTS* (FS:MAKE-PATHNAME-DEFAULTS))

(DEFUN SOURCE-COMPARE (FILENAME-1 FILENAME-2
		       &OPTIONAL (OUTPUT-STREAM STANDARD-OUTPUT) (PRINT-COMMENTS T)
		       &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE DELETED
		       &AUX FILE-1 FILE-2)
  (SETQ FILENAME-1 (FS:MERGE-PATHNAMES-AND-SET-DEFAULTS
		     FILENAME-1 *PATHNAME-DEFAULTS* ':OLDEST)
	FILENAME-2 (FS:MERGE-PATHNAMES FILENAME-2 FILENAME-1))
  (UNWIND-PROTECT
    (PROGN
      (SETQ FILE-1 (CREATE-FILE FILENAME-1 :DELETED DELETED)
	    FILE-2 (CREATE-FILE FILENAME-2 :DELETED DELETED))
      (SOURCE-COMPARE-FILES FILE-1 FILE-2 OUTPUT-STREAM PRINT-COMMENTS
			    :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
			    :IGNORE-WHITESPACE IGNORE-WHITESPACE))
    (AND FILE-1 (FUNCALL (FILE-STREAM FILE-1) ':CLOSE))
    (AND FILE-2 (FUNCALL (FILE-STREAM FILE-2) ':CLOSE))))

(DEFUN CREATE-FILE (FILENAME &KEY DELETED &AUX STREAM MODE)
  (SETQ STREAM (OPEN FILENAME :DELETED DELETED))
  (LET ((GENERIC-PATHNAME (FUNCALL FILENAME ':GENERIC-PATHNAME)))
    (FS:READ-ATTRIBUTE-LIST GENERIC-PATHNAME STREAM)
    (SETQ MODE (OR (FUNCALL GENERIC-PATHNAME ':GET ':MODE) ':LISP))
    #+++IGNORE
    (LET ((FONTS (SEND GENERIC-PATHNAME ':GET ':FONTS)))
      (WHEN (OR (AND (LISTP FONTS) (CDR FONTS))
		(SEND GENERIC-PATHNAME ':GET ':JAPANESE))
	;; If more than a single font
	(SETQ STREAM (ZWEI:MAKE-ENCAPSULATED-FONT-DECODING-STREAM STREAM)))))
  (MAKE-SRCCOM-FILE :FILE-STREAM STREAM
		    :FILE-NAME (FUNCALL STREAM ':TRUENAME)
		    :FILE-MAJOR-MODE MODE
		    :PRESENTATION-TYPE 'FS:PATHNAME
		    :PRESENTATION-OBJECT FILENAME))

;;; Useful interface for automatic comparison
(DEFUN PROMPTED-SOURCE-COMPARE (FILE-1 FILE-2
				&KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE)
  (MULTIPLE-VALUE (FILE-1 FILE-2)
    (GET-SRCCOM-FILE-NAMES FILE-1 FILE-2))
  (AND FILE-1
       (CATCH-ERROR-RESTART ((ERROR SYS:ABORT) "Exit SRCCOM")
	 (SOURCE-COMPARE FILE-1 FILE-2 STANDARD-OUTPUT T
			 :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
			 :IGNORE-WHITESPACE IGNORE-WHITESPACE))))

(DEFUN GET-SRCCOM-FILE-NAMES (FILE-1 FILE-2)
  (DECLARE (VALUES FILE-1 FILE-2))
  (DO-NAMED TOP
	    ((STR) (COMMA-POS))
	    (NIL)
    (PROG ()
	  (CATCH-ERROR-RESTART ((ERROR SYS:ABORT) "Exit SRCCOM")
	    (RETURN (SETQ STR (FUNCALL QUERY-IO ':RUBOUT-HANDLER
				       `((:PROMPT ,#'(LAMBDA (STREAM IGNORE)
						       (FORMAT STREAM "~&Going to compare ~A with ~A~@
		  ~2@T(Type Return, <file-1>, <file-1,file-2>, or Abort): "
							       FILE-1 FILE-2))))
				       #'READLINE QUERY-IO))))
	  (RETURN-FROM TOP NIL))		;If caught
    (COND ((EQUAL STR "")
	   (RETURN (VALUES FILE-1 FILE-2)))
	  ((SETQ COMMA-POS (STRING-SEARCH-CHAR #/, STR))
	   (SETQ FILE-1 (FS:MERGE-PATHNAMES (SUBSTRING STR 0 COMMA-POS) FILE-2)
		 FILE-2 (FS:MERGE-PATHNAMES (SUBSTRING STR (1+ COMMA-POS)) FILE-1)))
	  (T
	   (SETQ FILE-1 (FS:MERGE-PATHNAMES STR FILE-2))))))

;;; Main loop
(DEFUN SOURCE-COMPARE-FILES (FILE-1 FILE-2
			     &OPTIONAL (*OUTPUT-STREAM* STANDARD-OUTPUT)
				       (PRINT-COMMENTS T)
			     &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE
			     &AUX (ANY-DIFFERENCES NIL))
  (UNWIND-PROTECT
      (PROGN
	(WHEN PRINT-COMMENTS
	  (FORMAT
	    *OUTPUT-STREAM*
	    "~&Source compare made by ~A on ~\DATIME\		-*-Mode:Fundamental-*-~@
	       of ~A ~A~@
	       with ~A ~A"
	    USER-ID (FILE-TYPE FILE-1) (FILE-NAME FILE-1)
	    (FILE-TYPE FILE-2) (FILE-NAME FILE-2)))
	(LET ((*SRRCOM-LINE-COMPARISON-FUNCTION*
		(IF IGNORE-WHITESPACE
		    #'COMPARE-LINES-IGNORING-LEADING-SPACES
		    #'COMPARE-LINES-LITERALLY))
	      (*SRRCOM-STRING-COMPARISON-FUNCTION*
		(IF IGNORE-CASE-AND-STYLE
		    #'SYS:%STRING-EQUAL
		    #'SYS:%STRING=)))
	  (DO ((LINE-NO-1 0 (1+ LINE-NO-1))
	       (LINE-NO-2 0 (1+ LINE-NO-2))
	       (LINE-1) (LINE-2))
	      (NIL)
	    ;; Files are current matched up, check the next two lines
	    (SETQ LINE-1 (GET-FILE-LINE FILE-1 LINE-NO-1)
		  LINE-2 (GET-FILE-LINE FILE-2 LINE-NO-2))
	    (UNLESS (COMPARE-LINES LINE-1 LINE-2)
	      (SETQ ANY-DIFFERENCES T)
	      (MULTIPLE-VALUE (LINE-NO-1 LINE-NO-2 LINE-1)
			      (HANDLE-DIFFERENCE FILE-1 LINE-NO-1 FILE-2 LINE-NO-2)))
	    (UNLESS LINE-1 (RETURN NIL))))	;When NULL lines match both files are at EOF
	(WHEN PRINT-COMMENTS
	  (FORMAT *OUTPUT-STREAM*
		  (IF ANY-DIFFERENCES
		      "~&Done.~@[  Output is in buffer ~A.~]~%"
		      "~&No differences encountered.~%")
		  (WHEN (CLI::BROADCAST-STREAM-P *OUTPUT-STREAM*)
		    (DOLIST (STREAM (CLI::BROADCAST-STREAM-STREAMS *OUTPUT-STREAM*))
		      (WHEN (AND (TYPEP STREAM 'ZWEI:INTERVAL-STREAM)
				 (BOUNDP-IN-INSTANCE STREAM 'ZWEI:BUFFER))
			(LET ((BUFFER (SYMEVAL-IN-INSTANCE STREAM 'ZWEI:BUFFER)))
			  (WHEN (TYPEP BUFFER 'ZWEI:BUFFER) (RETURN BUFFER)))))))))
    (CLOSE (FILE-STREAM FILE-1))
    (CLOSE (FILE-STREAM FILE-2)))
  ANY-DIFFERENCES)

(DEFVAR *DIFFERENCE-PRINTER* 'PRINT-DIFFERENCES)

;;; First difference detected, look ahead for a match
(DEFUN HANDLE-DIFFERENCE (FILE-1 DIFF-LINE-NO-1 FILE-2 DIFF-LINE-NO-2
			  &AUX (NEW-LINE-NO-1 DIFF-LINE-NO-1) (NEW-LINE-NO-2 DIFF-LINE-NO-2)
			       (EOF-1 NIL) (EOF-2 NIL) LINE)
  (DO-NAMED TOP () ((AND EOF-1 EOF-2))
    ;; Check next line from first file against lines in the second file
    (UNLESS EOF-1
      (DO ((NEW-LINE-1 (GET-FILE-LINE FILE-1 (SETQ NEW-LINE-NO-1 (1+ NEW-LINE-NO-1))))
	   (LINE-NO-2 DIFF-LINE-NO-2 (1+ LINE-NO-2)))
	  (NIL)
	(SETQ LINE (GET-FILE-LINE FILE-2 LINE-NO-2))
	(COND ((AND (COMPARE-LINES NEW-LINE-1 LINE)
		    (CHECK-POTENTIAL-MATCH FILE-1 NEW-LINE-NO-1 FILE-2 LINE-NO-2))
	       (SETQ NEW-LINE-NO-2 LINE-NO-2)
	       (RETURN-FROM TOP)))
	(UNLESS NEW-LINE-1
	  (SETQ EOF-1 T)
	  (RETURN))
	(AND (= LINE-NO-2 NEW-LINE-NO-2) (RETURN))))
    ;; Check next line from second file against lines from the first file
    (UNLESS EOF-2
      (DO ((NEW-LINE-2 (GET-FILE-LINE FILE-2 (SETQ NEW-LINE-NO-2 (1+ NEW-LINE-NO-2))))
	   (LINE-NO-1 DIFF-LINE-NO-1 (1+ LINE-NO-1)))
	  (NIL)
	(SETQ LINE (GET-FILE-LINE FILE-1 LINE-NO-1))
	(COND ((AND (COMPARE-LINES LINE NEW-LINE-2)
		    (CHECK-POTENTIAL-MATCH FILE-1 LINE-NO-1 FILE-2 NEW-LINE-NO-2))
	       (SETQ NEW-LINE-NO-1 LINE-NO-1)
	       (RETURN-FROM TOP)))
	(UNLESS NEW-LINE-2
	  (SETQ EOF-2 T)
	  (RETURN))
	(AND (= LINE-NO-1 NEW-LINE-NO-1) (RETURN)))))
  (FUNCALL *DIFFERENCE-PRINTER*
	   FILE-1 DIFF-LINE-NO-1 NEW-LINE-NO-1
	   FILE-2 DIFF-LINE-NO-2 NEW-LINE-NO-2)
  (VALUES NEW-LINE-NO-1 NEW-LINE-NO-2 LINE))

(DEFVAR *LINES-NEEDED-TO-MATCH* 3)

;;; Found a potential match, check ahead to see if it is ok
(DEFUN CHECK-POTENTIAL-MATCH (FILE-1 LINE-NO-1 FILE-2 LINE-NO-2)
  (DO ((I *LINES-NEEDED-TO-MATCH* (1- I))
       (LINE-1) (LINE-2))
      (( I 0) T)
    (SETQ LINE-NO-1 (1+ LINE-NO-1)
	  LINE-NO-2 (1+ LINE-NO-2))
    (SETQ LINE-1 (GET-FILE-LINE FILE-1 LINE-NO-1)
	  LINE-2 (GET-FILE-LINE FILE-2 LINE-NO-2))
    (OR (COMPARE-LINES LINE-1 LINE-2)
	(RETURN NIL))))

;;; We are back in synch, print the differences
(DEFUN PRINT-DIFFERENCES (FILE-1 DIFF-LINE-NO-1 SAME-LINE-NO-1
			  FILE-2 DIFF-LINE-NO-2 SAME-LINE-NO-2)
  (PRINT-DIFFS-1 FILE-1 DIFF-LINE-NO-1 SAME-LINE-NO-1)
  (PRINT-DIFFS-1 FILE-2 DIFF-LINE-NO-2 SAME-LINE-NO-2)
  (FORMAT *OUTPUT-STREAM* "~&***************~2%"))

(DEFVAR *LINES-TO-PRINT-BEFORE* 0)
(DEFVAR *LINES-TO-PRINT-AFTER* 1)

;; The (MIN (- ... 2) ...) leaves one character position empty to the right of the label.
;; This is for the benefit of windows which print a continuation character in the rightmost
;; column, in particular, editor windows.

(DEFUN PRINT-DIFFS-1 (FILE DIFF-LINE-NO SAME-LINE-NO &AUX LABEL)
  (SETQ DIFF-LINE-NO (MAX 0 (- DIFF-LINE-NO *LINES-TO-PRINT-BEFORE*))
	SAME-LINE-NO (+ SAME-LINE-NO *LINES-TO-PRINT-AFTER*))
  (IF (AND (PRESENTATION-OBJECT FILE) (PRESENTATION-TYPE FILE))
      (FORMAT *OUTPUT-STREAM* "~&**** ~A ~@\presentation\, Line #~D"
	      (FILE-TYPE FILE) (PRESENTATION-OBJECT FILE) (PRESENTATION-TYPE FILE)
	      DIFF-LINE-NO)
    (FORMAT *OUTPUT-STREAM* "~&**** ~A ~A, Line #~D"
	    (FILE-TYPE FILE) (FILE-NAME FILE) DIFF-LINE-NO))
  (COND ((SETQ LABEL (LINE-LAST-LABEL FILE DIFF-LINE-NO))
	 (FUNCALL *OUTPUT-STREAM* ':STRING-OUT ", After /"")
	 (FUNCALL *OUTPUT-STREAM* :STRING-OUT LABEL)
;;; This code used to truncate labels to the screen.  This usually resulted in their
;;; chucking the only information you ever wanted to know.  Patched out 10/10/85 17:12:30
;;	 (IF (LET ((WHICH-OPERATIONS (FUNCALL *OUTPUT-STREAM* ':WHICH-OPERATIONS)))
;;	       (AND (MEMQ ':READ-CURSORPOS WHICH-OPERATIONS)
;;		    (MEMQ ':SIZE-IN-CHARACTERS WHICH-OPERATIONS)))
;;	     (FUNCALL *OUTPUT-STREAM* ':STRING-OUT LABEL 0
;;		      (MIN (- (FUNCALL *OUTPUT-STREAM* ':SIZE-IN-CHARACTERS)
;;			      (FUNCALL *OUTPUT-STREAM* ':READ-CURSORPOS ':CHARACTER)
;;			      2)
;;			   (STRING-LENGTH LABEL)))
;;	     (FUNCALL *OUTPUT-STREAM* ':STRING-OUT (SUBSTRING LABEL 0
;;							      (MIN 25.
;;								   (STRING-LENGTH LABEL)))))
	 (FUNCALL *OUTPUT-STREAM* ':TYO #/")))
  (FUNCALL *OUTPUT-STREAM* ':TYO #\CR)
  (PRINT-FILE-SEGMENT FILE DIFF-LINE-NO SAME-LINE-NO))

(DEFUN PRINT-FILE-SEGMENT (FILE START-LINE-NO END-LINE-NO)
  (DO ((LINE-NO START-LINE-NO (1+ LINE-NO))
       (LINE))
      ((= LINE-NO END-LINE-NO))
    (UNLESS (SETQ LINE (GET-FILE-LINE FILE LINE-NO))
      (RETURN NIL))
    (COND ((FILE-BP-TABLE FILE)
	   (ZWEI:PRESENT-LINE (AREF (FILE-BP-TABLE FILE) LINE-NO) *OUTPUT-STREAM*))
	  ((STRINGP LINE)
	   (SEND *OUTPUT-STREAM* :LINE-OUT LINE))
	  (T
	   (FORMAT *OUTPUT-STREAM* "~A~%" LINE)))))

;;; Merging
(DEFVAR *MERGE-LINE-NO*)

(DEFUN SOURCE-COMPARE-AUTOMATIC-MERGE (FILENAME-1 FILENAME-2 OUTPUT-FILENAME
				       &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE
				       &AUX FILE-1 FILE-2)
  (UNWIND-PROTECT
    (PROGN
      (SETQ FILE-1 (CREATE-FILE FILENAME-1)
	    FILE-2 (CREATE-FILE FILENAME-2))
      (WITH-OPEN-FILE (OUTPUT-STREAM OUTPUT-FILENAME :DIRECTION :OUTPUT)
	(SOURCE-COMPARE-AUTOMATIC-MERGE-1 FILE-1 FILE-2 OUTPUT-STREAM
					  :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
					  :IGNORE-WHITESPACE IGNORE-WHITESPACE)))
    (AND FILE-1 (FUNCALL (FILE-STREAM FILE-1) ':CLOSE))
    (AND FILE-2 (FUNCALL (FILE-STREAM FILE-2) ':CLOSE))))

(DEFUN SOURCE-COMPARE-AUTOMATIC-MERGE-1 (FILE-1 FILE-2 *OUTPUT-STREAM*
					 &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE)
  (LET ((*DIFFERENCE-PRINTER* 'PRINT-AUTOMATIC-MERGE)
	(*MERGE-LINE-NO* 0))
    (SOURCE-COMPARE-FILES FILE-1 FILE-2 *OUTPUT-STREAM* NIL
			  :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
			  :IGNORE-WHITESPACE IGNORE-WHITESPACE)
    (PRINT-FILE-SEGMENT FILE-1 *MERGE-LINE-NO* (FILE-LENGTH FILE-1))))

(DEFVAR *RECORD-MERGE-BOUNDS-P* NIL)
(DEFVAR *MERGE-RECORD*)
(DEFVAR *MERGE-THIS-RECORD*)

(DEFUN SOURCE-COMPARE-AUTOMATIC-MERGE-RECORDING (FILE-1 FILE-2 OUTPUT-STREAM
						 &KEY IGNORE-CASE-AND-STYLE IGNORE-WHITESPACE
						 &AUX (*RECORD-MERGE-BOUNDS-P* T)
						      (*MERGE-RECORD* NIL)
						      *MERGE-THIS-RECORD*)
  (SOURCE-COMPARE-AUTOMATIC-MERGE-1 FILE-1 FILE-2 OUTPUT-STREAM
				    :IGNORE-CASE-AND-STYLE IGNORE-CASE-AND-STYLE
				    :IGNORE-WHITESPACE IGNORE-WHITESPACE)
  (DOLIST (RECORD (SETQ *MERGE-RECORD* (NREVERSE *MERGE-RECORD*)))
    (SETF (ZWEI:BP-STATUS (FIRST RECORD)) ':MOVES)
    (SETF (ZWEI:BP-STATUS (THIRD RECORD)) ':MOVES)
    (SETF (ZWEI:BP-STATUS (FIFTH RECORD)) ':MOVES))
  *MERGE-RECORD*)

(DEFUN PRINT-AUTOMATIC-MERGE (FILE-1 DIFF-LINE-NO-1 SAME-LINE-NO-1
			      FILE-2 DIFF-LINE-NO-2 SAME-LINE-NO-2)
  (PRINT-FILE-SEGMENT FILE-1 *MERGE-LINE-NO* DIFF-LINE-NO-1)
  (WHEN *RECORD-MERGE-BOUNDS-P*
    (SETQ *MERGE-THIS-RECORD* NIL)
    (RECORD-MERGE-BOUND))
  (SEND *OUTPUT-STREAM* ':LINE-OUT "*** MERGE LOSSAGE ***")
  (PRINT-AUTOMATIC-MERGE-1 FILE-1 DIFF-LINE-NO-1 SAME-LINE-NO-1)
  (PRINT-AUTOMATIC-MERGE-1 FILE-2 DIFF-LINE-NO-2 SAME-LINE-NO-2)
  (SEND *OUTPUT-STREAM* ':LINE-OUT "*** END OF MERGE LOSSAGE ***")
  (WHEN *RECORD-MERGE-BOUNDS-P*
    (RECORD-MERGE-BOUND)
    (PUSH (NREVERSE *MERGE-THIS-RECORD*) *MERGE-RECORD*))
  (SETQ *MERGE-LINE-NO* SAME-LINE-NO-1))

(DEFUN PRINT-AUTOMATIC-MERGE-1 (FILE DIFF-LINE-NO SAME-LINE-NO)
  (FORMAT *OUTPUT-STREAM* "*** ~A ~A has:~%" (FILE-TYPE FILE) (FILE-NAME FILE))
  (AND *RECORD-MERGE-BOUNDS-P* (RECORD-MERGE-BOUND))
  (PRINT-FILE-SEGMENT FILE DIFF-LINE-NO SAME-LINE-NO)
  (AND *RECORD-MERGE-BOUNDS-P* (RECORD-MERGE-BOUND)))

(DEFUN RECORD-MERGE-BOUND ()
  (PUSH (ZWEI:COPY-BP (SEND *OUTPUT-STREAM* :READ-BP T) ':NORMAL) *MERGE-THIS-RECORD*))
