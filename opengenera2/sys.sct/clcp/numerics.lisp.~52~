;;; -*- Mode: LISP; Package: Common-lisp-internals; Syntax: Common-Lisp; Lowercase:T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>



;;; integer square root -- (isqrt x) = (floor (sqrt (infinite-precision x)))
(defun isqrt (integer)
  (declare lt:(side-effects simple reducible))
  (check-type integer (integer 0 *) "a non-negative integer")
  ;; initial value power of two is better than shifting the arg, on average
  (loop for r = (ash 1 (ash (integer-length integer) -1)) then (- r e)
	for d = (- r (floor integer r))
	for e = (ash d -1)
	when (zerop e)
	  do (return (- r d))))

;;; Common Lisp functions for taking apart and putting together floats

(proclaim '(inline scale-float))
(defun scale-float (float integer)
  (declare lt:(side-effects simple reducible))
  (ash float integer))				;but only for integers

(defun float-radix (float)
  (declare lt:(side-effects simple reducible))
  (declare (ignore float))			;same for all floats on Lisp Machines
  2)

(defun float-digits (float)
  (declare lt:(side-effects simple reducible))
  (ctypecase float
    (single-float 24.)
    (double-float 53.)))

(defun float-precision (float)
  (declare lt:(side-effects simple reducible))
  (ctypecase float
    (single-float (if (zerop (ldb sys:%%single-exponent (sys:%fixnum float)))
		      ;; Zero or denormalized
		      (integer-length (ldb sys:%%single-fraction (sys:%fixnum float)))
		      24.))
    (double-float
      (let ((high (double-high float)))
	(if (zerop (ldb sys:%%double-exponent high))
	    (integer-length (dpb (double-low float)
				 (byte 32. 0)
				 (ash (ldb sys:%%double-fraction-high high) 32.)))
	    53.)))))

(defun float-sign (float1 &optional float2)
  (declare lt:(side-effects simple reducible))
  (let ((sign (ctypecase float1
		(single-float
		  (if (ldb-test sys:%%single-sign (sys:%fixnum float1)) -1.0 1.0))
		(double-float
		  (if (zerop (ldb sys:%%double-sign (double-high float1))) 1.0d0 -1.0d0)))))
    (cond ((null float2) sign)
	  ((minusp sign) (- (abs float2)))
	  (t (abs float2)))))

(defun float (number &optional (other 0.0 two-args-p))
  (declare lt:(side-effects simple reducible))
  (if (and (not two-args-p) (floatp number))
      number
      (ctypecase other
	(single-float (zl:float number))
	(double-float (zl:dfloat number)))))

;This would be zl:float if it worked "right" for double-floats, fixed in Rel 6 perhaps
(defun float1 (number)
  (declare lt:(side-effects simple reducible))
  (if (floatp number) number (zl:float number)))

(compiler:add-optimizer float float-optimizer)

(defun float-optimizer (form)
  (cond ((null (cdr form)) form)		;let it barf on no args
	((null (cddr form))
	 `(float1 ,(cadr form)))
	(t (let ((template (third form)))
	     (if (not (floatp template))
		 form
		 (zl:typecase template
		   (:single-float `(zl:float ,(cadr form)))
		   (:double-float `(zl:dfloat ,(cadr form)))
		   (t form)))))))

(defun fixnum-rightmost-one (fixnum)
  (declare (side-effects simple reducible))
  (let ((n 1))
    (when (zerop (ldb (byte 16 0) fixnum))
      (setq fixnum (ldb (byte 16 16) fixnum))
      (setq n 17))
    (when (zerop (ldb (byte 8 0) fixnum))
      (setq fixnum (ldb (byte 8 8) fixnum))
      (incf n 8))
    (when (zerop (ldb (byte 4 0) fixnum))
      (setq fixnum (ldb (byte 4 4) fixnum))
      (incf n 4))
    (when (zerop (ldb (byte 2 0) fixnum))
      (setq fixnum (ldb (byte 2 2) fixnum))
      (incf n 2))
    (if (zerop (ldb (byte 1 0) fixnum))
	(if (zerop fixnum) 0 (+ n 1))
	n)))

(defun fixnum-leftmost-one (fixnum)
  (declare (safeguarded-function)		;since it's used by zl:float
	   (side-effects simple reducible))
  (let ((n 0))
    (unless (zerop (ldb (byte 16 16) fixnum))
      (setq fixnum (ldb (byte 16 16) fixnum))
      (setq n 16))
    (unless (zerop (ldb (byte 8 8) fixnum))
      (setq fixnum (ldb (byte 8 8) fixnum))
      (incf n 8))
    (unless (zerop (ldb (byte 4 4) fixnum))
      (setq fixnum (ldb (byte 4 4) fixnum))
      (incf n 4))
    (unless (zerop (ldb (byte 2 2) fixnum))
      (setq fixnum (ldb (byte 2 2) fixnum))
      (incf n 2))
    (if (zerop (ldb (byte 1 1) fixnum))
	(+ n fixnum)
	(+ n 2))))

(defun integer-length (integer)
  (declare lt:(side-effects simple reducible))
  (etypecase integer
    (fixnum
      (fixnum-leftmost-one (logxor integer (- (ldb (byte 1 31) integer)))))
    (bignum
      (let ((bignum-length-1 (1- (si:bignum-length integer))))
	(+ (* bignum-length-1 si:*bignum-digit-size*)
	   (fixnum-leftmost-one (si:bignum-ref integer bignum-length-1
					       (si:bignum-sign integer))))))))

;;; Implementation parameters

(defconstant most-positive-fixnum (1- 1_31))
(defconstant most-negative-fixnum -1_31)

(defconstant most-positive-single-float (scale-float (float (1- 1_24)) (- 128 24)))
(defconstant least-positive-normalized-single-float (scale-float 0.5 -125))
(defconstant least-positive-single-float
	     #.(without-floating-underflow-traps (scale-float 0.5 -148)))
(defconstant least-negative-single-float (- least-positive-single-float))
(defconstant least-negative-normalized-single-float (- least-positive-normalized-single-float))
(defconstant most-negative-single-float (- most-positive-single-float))

(defconstant most-positive-short-float most-positive-single-float)
(defconstant least-positive-normalized-short-float least-positive-normalized-single-float)
(defconstant least-positive-short-float least-positive-single-float)
(defconstant least-negative-short-float least-negative-single-float)
(defconstant least-negative-normalized-short-float least-negative-normalized-single-float)
(defconstant most-negative-short-float most-negative-single-float)

(defconstant most-positive-double-float (scale-float (float (1- 1_53) 0.0d0) (- 1024 53)))
(defconstant least-positive-normalized-double-float (scale-float 0.5d0 -1021))
(defconstant least-positive-double-float
	     #.(without-floating-underflow-traps (scale-float 0.5d0 -1073)))
(defconstant least-negative-double-float (- least-positive-double-float))
(defconstant least-negative-normalized-double-float (- least-positive-normalized-double-float))
(defconstant most-negative-double-float (- most-positive-double-float))

(defconstant most-positive-long-float most-positive-double-float)	;no longs at all
(defconstant least-positive-normalized-long-float least-positive-normalized-double-float)
(defconstant least-positive-long-float least-positive-double-float)
(defconstant least-negative-long-float least-negative-double-float)
(defconstant least-negative-normalized-long-float least-negative-normalized-double-float)
(defconstant most-negative-long-float most-negative-double-float)

;--- Message sent 12/28/83 asking whether this addition of 1 ULP
;--- is the right thing.  Certainly it is needed to be consistent with Mary Poppins.

(defconstant single-float-epsilon (sys:%flonum (1+ (sys:%fixnum (scale-float 1.0 -24)))))
(defconstant short-float-epsilon single-float-epsilon)
(defconstant double-float-epsilon 1.1102230246251568d-16);(nextafter (scale-float 1.0d0 -53) 1)
(defconstant long-float-epsilon double-float-epsilon)

(defconstant single-float-negative-epsilon
	     (sys:%flonum (1+ (sys:%fixnum (scale-float 1.0 -25)))))
(defconstant short-float-negative-epsilon single-float-negative-epsilon)

;;;(nextafter (scale-float 1.0d0 -54) 1)
(defconstant double-float-negative-epsilon 5.551115123125784d-17)
(defconstant long-float-negative-epsilon double-float-negative-epsilon)

(defconstant pi 3.1415926535897932384626d0)	;Two more digits than 3600 double-float needs
