;;; -*- Mode: LISP; Package: Common-lisp-internals; Syntax:Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Superstructure of Common Lisp type system -- actual type definitions (second file)

;;; Miscellaneous types built on other types

; These must be in a separate file because of bootstrapping from other types

#+3600 (PROCLAIM '(INLINE RATIONALP))
(DEFUN RATIONALP (OBJECT)
  (DECLARE (SIDE-EFFECTS SIMPLE REDUCIBLE)
	   #+3600 (INLINE SI:RATIONALP))	; Makes (TYPEP OBJECT 'RATIO) inline
  (OR (TYPEP OBJECT 'INTEGER)
      (TYPEP OBJECT 'RATIO)))
#+3600 (PROCLAIM '(NOTINLINE RATIONALP))

(DEFINE-TYPE-WITH-FUNCTION RATIONAL RATIONALP (&OPTIONAL LOW HIGH)
  (DECLARE (TYPENAME "a rational number"))
  (IF (AND (EQ LOW '*) (EQ HIGH '*))
      '(OR INTEGER RATIO)
      `(OR (INTEGER ,LOW ,HIGH)
	   (RATIO ,LOW ,HIGH))))

(DEFINE-NUMBER-TYPEP-AND-EXPANDER RATIONAL RATIONALP "a rational number")

(DEFINE-TYPE-WITH-FUNCTION FUTURE-COMMON-LISP:REAL FUTURE-COMMON-LISP:REALP
			   (&OPTIONAL LOW HIGH)
  (DECLARE (TYPENAME "a real number"))
  (IF (AND (EQ LOW '*) (EQ HIGH '*))
      '(OR RATIONAL FLOAT)
      `(OR (RATIONAL ,LOW ,HIGH)
	   (FLOAT ,LOW ,HIGH))))

(DEFINE-NUMBER-TYPEP-AND-EXPANDER FUTURE-COMMON-LISP:REAL FUTURE-COMMON-LISP:REALP
  "a real number")

(PROCLAIM '(INLINE VECTORP))
(DEFUN VECTORP (OBJECT)
   (DECLARE LT:(SIDE-EFFECTS SIMPLE REDUCIBLE) (COMPILER:RETURN-TYPE SCL:BOOLEAN))
   #+3600
   (AND (ARRAYP OBJECT)
	(NOT (BIT-MEMBER (ARRAY-DISPATCH-FIELD OBJECT)
			 (LOGIOR (ROT 1 %ARRAY-DISPATCH-SHORT-2D)
				 (ROT 1 %ARRAY-DISPATCH-LONG-MULTIDIMENSIONAL)))))
   #+IMACH
   (OR (AND (TYPE-MEMBER OBJECT DTP-ARRAY)
	    (LET ((HEADER (%POINTER (%MEMORY-READ OBJECT :CYCLE-TYPE %MEMORY-HEADER))))
	       ;;
	       ;;        Coding the body of the LET as:
	       ;;
	       ;;        (OR (NOT (LDB-TEST ARRAY-LONG-PREFIX-BIT HEADER))
	       ;;            (= (LDB ARRAY-LONG-DIMENSIONS-FIELD HEADER) 1))
	       ;;
	       ;;        produces code which is slower and does not favor short prefix
	       ;;        arrays.
	       ;;
	       (IF (NOT (LDB-TEST ARRAY-LONG-PREFIX-BIT HEADER))
		   (RETURN-FROM VECTORP T)
		   (RETURN-FROM VECTORP (= (LDB ARRAY-LONG-DIMENSIONS-FIELD HEADER) 1)))))
       (TYPE-MEMBER OBJECT DTP-STRING)))
(PROCLAIM '(NOTINLINE VECTORP))

(DEFINE-TYPE-WITH-FUNCTION VECTOR VECTORP (&OPTIONAL ELEMENT-TYPE SIZE)
  `(ARRAY ,ELEMENT-TYPE (,SIZE)))

(DEFINE-TYPE-PRINTER VECTOR (STREAM &OPTIONAL ELEMENT-TYPE LENGTH)
  (PRINT-VECTOR-LENGTH-SPEC LENGTH "element" "vector" STREAM)
  (PRINT-ELEMENT-TYPE-SPEC ELEMENT-TYPE STREAM))

(DEFINE-TYPE-PREDICATE SIMPLE-VECTOR-P SIMPLE-VECTOR (&OPTIONAL SIZE)
  `(AND (VECTOR T ,SIZE)
	(SATISFIES ARRAY-IS-SIMPLE-P)))

(DEFINE-TYPE-PRINTER SIMPLE-VECTOR (STREAM &OPTIONAL LENGTH)
  (PRINT-VECTOR-LENGTH-SPEC LENGTH "element" "simple vector" STREAM))

(DEFTYPE SIMPLE-ARRAY (&OPTIONAL ELEMENT-TYPE DIMENSIONS)
  `(AND (ARRAY ,ELEMENT-TYPE ,DIMENSIONS)
	(SATISFIES ARRAY-IS-SIMPLE-P)))

(DEFINE-TYPE-PRINTER SIMPLE-ARRAY (STREAM &OPTIONAL ELEMENT-TYPE DIMENSIONS)
  (PRINT-ARRAY-DIMENSION-SPEC DIMENSIONS "simple array" STREAM)
  (PRINT-ELEMENT-TYPE-SPEC ELEMENT-TYPE STREAM))

(DEFTYPE FUTURE-COMMON-LISP:BASE-STRING (&OPTIONAL SIZE)
  `(VECTOR FUTURE-COMMON-LISP:BASE-CHAR ,SIZE))

(DEFINE-TYPE-WITH-FUNCTION STRING STRINGP (&OPTIONAL SIZE)
  `(OR (FUTURE-COMMON-LISP:BASE-STRING ,SIZE)
       (VECTOR CHARACTER ,SIZE)))

(DEFINE-TYPE-PRINTER STRING (STREAM &OPTIONAL LENGTH)
  (PRINT-VECTOR-LENGTH-SPEC LENGTH "character" "string" STREAM))

(DEFUN FUTURE-COMMON-LISP:SIMPLE-STRING-P (X)
  (AND (STRINGP X)
       (ARRAY-IS-SIMPLE-P X)))

(DEFINE-TYPE-WITH-FUNCTION FUTURE-COMMON-LISP:SIMPLE-STRING FUTURE-COMMON-LISP:SIMPLE-STRING-P (&OPTIONAL SIZE)
  `(AND (STRING ,SIZE)
	(SATISFIES ARRAY-IS-SIMPLE-P)))

(DEFTYPE FUTURE-COMMON-LISP:SIMPLE-BASE-STRING (&OPTIONAL SIZE)
  `(AND (FUTURE-COMMON-LISP:BASE-STRING ,SIZE)
	FUTURE-COMMON-LISP:SIMPLE-STRING))

(DEFUN SIMPLE-STRING-P (X)
  (AND (STRINGP X)
       (ARRAY-IS-SIMPLE-P X)
       (NOT (STRING-FAT-P X))))

(DEFINE-TYPE-WITH-FUNCTION SIMPLE-STRING SIMPLE-STRING-P (&OPTIONAL SIZE)
  `(FUTURE-COMMON-LISP:SIMPLE-BASE-STRING ,SIZE))

(DEFINE-TYPE-PRINTER SIMPLE-STRING (STREAM &OPTIONAL LENGTH)
  (PRINT-VECTOR-LENGTH-SPEC LENGTH "character" "simple string" STREAM))

(DEFINE-TYPE-PREDICATE BIT-VECTOR-P BIT-VECTOR (&OPTIONAL SIZE)
  `(ARRAY BIT (,SIZE)))

(DEFINE-TYPE-PRINTER BIT-VECTOR (STREAM &OPTIONAL LENGTH)
  (PRINT-VECTOR-LENGTH-SPEC LENGTH "bit" "bit-vector" STREAM))

(DEFINE-TYPE-PREDICATE SIMPLE-BIT-VECTOR-P SIMPLE-BIT-VECTOR (&OPTIONAL SIZE)
  `(AND (VECTOR BIT ,SIZE)
	(SATISFIES ARRAY-IS-SIMPLE-P)))

(DEFINE-TYPE-PRINTER SIMPLE-BIT-VECTOR (STREAM &OPTIONAL LENGTH)
  (PRINT-VECTOR-LENGTH-SPEC LENGTH "bit" "simple bit-vector" STREAM))

(DEFUN ARRAY-IS-SIMPLE-P (X)
  (AND (NOT (ARRAY-HAS-LEADER-P X))
       (NOT (SYS:ARRAY-DISPLACED-P X))))

;Because the structure is named RDTBL, not READTABLE
(DEFTYPE-AS-FUNCTION READTABLE READTABLEP)

(DEFINE-TYPE-PREDICATE PACKAGEP PACKAGE ()
  '(STRUCTURE ZL:PACKAGE))

;; This is redefined after CLOS is loaded.
(DEFTYPE-AS-FUNCTION FUTURE-COMMON-LISP:RANDOM-STATE RANDOM-STATE-P)

(UNLESS (FBOUNDP 'RANDOM-STATE-P)
  (SETF (SYMBOL-FUNCTION 'RANDOM-STATE-P) #'FALSE))

(DEFTYPE RANDOM-STATE () 'FUTURE-COMMON-LISP:RANDOM-STATE)

(DEFUN PATHNAMEP (X)
  (TYPEP X 'PATHNAME))

(DEFUN HASH-TABLE-P (X)
  (TYPEP X 'HASH-TABLE))


;;; Byte number types

;These must be in a separate file because of the use of CHECK-TYPE
;and bootstrapping from other types
;which means that TYPE-SUPRA must be loaded before this can be compiled

(DEFTYPE MOD (N)
  (CHECK-TYPE N (INTEGER (0) *))
  `(INTEGER 0 (,N)))

(DEFTYPE BIT ()
  '(MOD 2))

(DEFTYPE SIGNED-BYTE (&OPTIONAL S)
  (IF (EQ S '*) 'INTEGER
    (CHECK-TYPE S (INTEGER (0) *))
    (LET ((N (ASH 1 (1- S))))
      `(INTEGER ,(- N) (,N)))))

(DEFTYPE UNSIGNED-BYTE (&OPTIONAL S)
  (IF (EQ S '*) '(INTEGER 0 *)
    (CHECK-TYPE S (INTEGER (0) *))
    (LET ((N (ASH 1 S)))
      `(INTEGER 0 (,N)))))

(DEFTYPE BOOLEAN () `(MEMBER T NIL))

