;;; -*- Mode: LISP; Package: Common-lisp-internals; Lowercase: T; Syntax: Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Chapter 5

(defmacro defparameter (variable initial-value &optional (documentation nil documentation-p))
  ;; Copy constants into PERMANENT-STORAGE-AREA, but don't mess with
  ;; initial values that might be shared with other structure.
  ;; I assume that #. and #, and #n# aren't being used to share constants with other data.
  ;; Copying constants is good because it makes them more compact in virtual memory.
  (let ((copied-value (if (si:defconstant-copy-value-p initial-value)
                          `(si:copytree-and-leaves ,initial-value permanent-storage-area)
                          initial-value)))
    `(progn
       (eval-when (compile)
         (si:special-compile ',variable))
       (si:defconst-1 ,variable ,copied-value ,@(when documentation-p `(,documentation))))))

;;; Chapter 7

;;; PSETQ must return NIL
;;; Code copied from the ZL macro of the same name
;;; PSETQ looks like SETQ but does its work in parallel.

;;; Interestingly, this simple macro produces better code than the hairy one below.
(defmacro psetq (&rest pairs)
  (labels ((psetqify (pairs)
             (destructuring-bind (var val &rest more-pairs) pairs
               (if more-pairs
                   `(setq ,var (prog1 ,val ,(psetqify more-pairs)))
                   `(setq ,var ,val)))))
    (if pairs
        `(progn ,(psetqify pairs) nil)
        nil)))

#||
(defmacro psetq (&rest rest &environment env)
  ;; To improve the efficiency of do-stepping, by using the SETE-CDR, SETE-CDDR,
  ;; SETE-1+, and SETE-1- instructions, we try to do such operations with SETQ
  ;; rather than PSETQ.  To avoid having to do full code analysis, never rearrange
  ;; the order of any code when doing this, and only do it when there are no
  ;; variable name duplications.
  (loop for (var val) on rest by 'cddr
        for gensym = (gensym)
        collecting gensym into temps
        collecting var into vars
        collecting val into vals
        collecting `(setq ,var ,gensym) into setqs
        finally (return (let-subst temps vals `(progn ,@setqs nil) env))))
||#

(defmacro loop (&rest forms)
  (declare (compiler:do-not-record-macroexpansions))
  (declare (zwei:indentation . zwei:indent-loop))
  (if (every #'listp forms)
      (let ((gs (gensym)))
        `(block nil
           (tagbody
             ,gs
             ,@forms
             (go ,gs))))
      `(zl:loop ,@forms)))

(defun constant-fold-form (form env)
  (declare (values optimized-form constant-p constant-value))
  (let ((optimized-form (compiler:optimize-form `(values ,form) env
						:repeat t
						:do-macro-expansion t
						:do-named-constants t
						:do-inline-forms t
						:do-optimizers t
						:do-constant-folding t
						:do-function-args t
						:destination compiler:*destination-stack*)))
    (if (constantp optimized-form env)
	(values optimized-form t (evaluate-constant optimized-form env))
	(values optimized-form nil nil))))

(defmacro expand-if-macro (exp env true-form false-form variable-form)
  (declare (zwei:indentation 0 3 2 1))
  (check-type exp symbol)
  (let ((constant-p (gensymbol "CONSTANT-P"))
	(constant-value (gensymbol "CONSTANT-VALUE")))
    `(multiple-value-bind (,exp ,constant-p ,constant-value)
	 (constant-fold-form ,exp ,env)
       (if ,constant-p
	   (if ,constant-value ,true-form ,false-form)
	   ,variable-form))))

(defun variable-free-in-form-p (variable form default)
  (condition-case ()
       (progn
	 (lt:mapforms #'(lambda (form kind usage state)
			  (declare (ignore usage state))
			  (when (and (eql form variable)
				     (member kind 'lt:(set symeval))
				     (not (member form lt:*mapforms-bound-variables*)))
			    (return-from variable-free-in-form-p t)))
		      form
		      :bound-variables nil
		      :expand-substs t)
	 nil)
     (form-not-understood default)))

(defun find-declaration (type entry declarations)
  (dolist (declaration declarations)
    (when (and (consp declaration)
	       (eql (first declaration) 'declare))
      (dolist (declare (rest declaration))
	(when (and (consp declare)
		   (eql (first declare) type)
		   (member entry (rest declare)))
	  (return-from find-declaration t))))))

(defun variable-ignored (variable declarations)
  (or (funcall compiler:*ignore-variable-test* variable)
      (find-declaration 'ignore variable declarations)
      (find-declaration 'future-common-lisp::ignore variable declarations)))

(defun expand-dolist (var listform resultform forms env &optional (endtest 'endp))
  (multiple-value-bind (declarations forms)
      (si:find-body-declarations forms env)
    (multiple-value-bind (optimized-listform listform-constant-p listform-value)
	(constant-fold-form listform env)
      (let* ((skip-initial-test (and listform-constant-p (consp listform-value)))
	     (tag1 (gensym))
	     (tag2 (and (not skip-initial-test) (gensym)))
	     (listvar (gensym))
	     (var-ignored (variable-ignored var declarations))
	     (var-used-in-resultform (and resultform
					  (not var-ignored)
					  (or (not (symbolp var))
					      (variable-free-in-form-p var resultform t)))))
	`(block nil
	   (let ((,listvar ,optimized-listform)
		 ,@(unless var-ignored
		     `((,var nil))))
	     ,@declarations
	     (tagbody
	       ,@(unless skip-initial-test
		   `((go ,tag2)))
	       ,tag1
	       ,(if var-ignored
		    `(setq ,listvar (cdr ,listvar))
		    `(setq ,var (prog1 (car ,listvar) (setq ,listvar (cdr ,listvar)))))
	       ,@forms
	       ,@(when tag2 `(,tag2))
	       (unless (,endtest ,listvar)
		 (go ,tag1))
	       ;; If variable might be looked at, set it to nil
	       ,@(when var-used-in-resultform
		   `((setq ,var nil)))
	       (return ,resultform))))))))

;The code generated by this macro has been carefully arranged to turn into
;the best sequence of macroinstructions: only one branch inside the loop,
;enable pop-followed-by-push optimization for ,variable, end at the end.
(defmacro dolist ((var listform &optional resultform) &body forms &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (expand-dolist var listform resultform forms env))

;; The code generated by this DOTIMES macro has been carefully arranged to turn into
;; the best sequence of macroinstructions: only one branch inside the loop,
;; end at the end, avoid binding a variable to the countform if it is
;; simple and loop-invariant.
;;
;; New version by DLA, 4/17/87 17:21:56, which attempts to optimize code for
;; all architectures, not just the 3600.
;; Further bummed by Cassels and DySak
;;
;; ANSI compatibility by CStacy, 12/6/91.  (Broke out the expander into a subroutine.)
;;   In ANSI Common Lisp (X3J13), spurious IGNORE declarations are not
;;   supposed to affect program semantics.  This means that if the luser
;;   says VAR is ignored, and then in fact uses it, the macro has to generate
;;   code which uses VAR anyway.  In ZetaLisp (or regular Common-Lisp) syntax,
;;   we generate code based on the declarations, which means if you IGNORE VAR
;;   and then try to reference it, you will make a free-reference and get
;;   a "special variable") compiler warning.
;;   Most people (including me) think that there should probably only be 
;;   just the ANSI version of DOTIMES.

(defun expand-dotimes (var countform resultform forms env &key syntax)
  (multiple-value-bind (declarations forms)
      (si:find-body-declarations forms env)
    (multiple-value-bind (optimized-countform countform-constant countform-value)
	(constant-fold-form countform env)
      (setq countform-constant (and countform-constant
				    (future-common-lisp:realp countform-value)))
      (let* ((limitvar (gensym))
	     (initial-test (if countform-constant
			       (< 0 countform-value)
			       `(< 0 ,limitvar)))
	     (tag1 (gensym))
	     (tag2 (and (not (eql initial-test t)) (gensym)))
	     (var-ignored (variable-ignored var declarations))
	     (var-used-p (member var
				 (future-common-lisp:nth-value 1
                                   (lt:annotate-form `(progn ,resultform ,@forms) nil env))))
	     prog)
	(setq prog
	      (if (or (not var-used-p)
		      (and (eq syntax :zetalisp) var-ignored))
		  `(prog ((,limitvar ,optimized-countform))
			 ,@declarations
			 ,@(unless (eql initial-test t)
			     `((unless ,initial-test
				 (go ,tag2))))
			 ,tag1
			 ,@forms
			 (when (> (setq ,limitvar (1- ,limitvar)) 0)
			   (go ,tag1))
			 ,@(when tag2
			     `(,tag2))
			 (return ,resultform))
		  `(prog (#+IMach (,limitvar ,(if countform-constant
						  (1- countform-value)
						  optimized-countform))
			  (,var 0))
			 ,@declarations
			 ;; Do the endtest here
			 ;; so it doesn't break up the the loop instruction.
			 ,@(unless (eql initial-test t)
			     `((unless ,initial-test
				 (go ,tag2))))
			 #+IMach
			 ,@(unless countform-constant
			     `((setq ,limitvar (1- ,limitvar))))	; for LOOP-INC-TOS...
			 ,tag1
			 ,@forms
			 (compiler:invisible-references (,var)
			   #+IMach
			   ;; Do the increment and test atomically
			   ;; so it will generate a loop instruction.
			   (when (prog1 (< ,var ,limitvar)
					(setq ,var (1+ ,var)))
			     (go ,tag1))
			   #+3600
			   (when (progn (setq ,var (1+ ,var))
					(< ,var ,limitvar))
			     (go ,tag1))
			   )
			 ,@(when tag2
			     `(,tag2))
			 (return ,resultform))))
	#+3600
	(if (or (not var-used-p)
		(and (eq syntax :zetalisp) var-ignored))
	    prog
	    ;; get rid of the limit variable if possible
	    (let-subst (list limitvar)
		       (list optimized-countform)
		       prog
		       env))
	#+IMach
	;; leave the limit variable so we can use LOOP-INCREMENT-TOS-LESS-THAN
	prog))))

(defmacro dotimes ((var countform &optional resultform) &body forms &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (expand-dotimes var countform resultform forms env :syntax :zetalisp))

(defun (compiler:style-checker valid-case-keys case) (form)
  (let ((previous-keys nil))                    ;List of keys already used, for error check
    (flet ((check-selectq-key (key)
             (cond ((member key previous-keys)
                    (warn '(:bad-style t)
                          "~S is used as a key more than once in the same CASE" key))
                   ((or (not (atom key))
                        (and (arrayp key)
                             (not (named-structure-p key))))
                    ;; Look for strings, bit-vectors, vectors, lists, QUOTE forms
                    ;; which users might accidentally expect to work as keys.  Don't
                    ;; complain about instances and named-structures, since they might
                    ;; be interned through some type-specific mechanism.
                    (warn '(:bad-style t)
                          "~S is used as a key in CASE but is a ~(~A~).
~@(~:*~A~A~) are not meaningfully comparable by EQL and thus are meaningless as keys."
                          key (type-of key) (if (consp key) "es" "s"))))
	     (push key previous-keys)))
      (compiler:matchp form
        (('case item . clauses)
         (ignore item)
         (dolist (clause clauses)
           (if (eq previous-keys t)
	       (warn '(:bad-style t)
		     "~S clause in CASE follows an OTHERWISE clause." (first clause))
	       (compiler:matchp clause
		 (((compiler:*or* x otherwise t) . result)
		  (ignore result x)
		  (setf previous-keys t))
		 ((keys . result)
		  (ignore result)
		  (if (listp keys)
		      (mapc #'check-selectq-key keys)
		      (check-selectq-key keys)))
		 (* (warn '(:bad-style t)
			  "Malformed CASE clause ~S." clause))))))))))

(defmacro case (test-object &body clauses &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (expand-case test-object clauses env))

(defun expand-case (test-object clauses env)
  (once-only (test-object &environment env)
    `(cond ,@(mapcar #'(lambda (clause)
                         `(,(let ((key (first clause)))
                              (cond ((member key '(otherwise t)) t)
                                    ((listp key)
                                     `(member ,test-object ',key))
                                    (t
                                     `(eql ,test-object ',key))))
                           ,@(or (rest clause) '(nil))))
                     clauses))))

(defmacro typecase (object &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (once-only (object &environment env)
    `(cond ,@(loop with otherwise-seen = nil
                   for (type . consequents) in body
                   do (when (null consequents)
                        (setq consequents `(nil)))
                      (when otherwise-seen
                        (warn '(:bad-style t)
                              "~S clause in TYPECASE follows T or OTHERWISE." type))
                   nconc (cond ((member type '(t otherwise))
                                (setq otherwise-seen t)
                                `((t ,@consequents)))
                               ((condition-case (.error.)
                                     (subtypep type (cons 'or previous-types))
                                   (error nil))
                                (warn ()
                                      "The TYPECASE clause for ~S can never be ~
                                       reached and has been deleted.~@
                                       The form~P ~{~S~^ ~} will never be executed."
                                      type (length consequents) consequents)
                                nil)
                               (t `(((typep ,object ',type) ,@consequents))))
                   collect type into previous-types))))

(defmacro multiple-value-setq (vars value)
  (declare (compiler:do-not-record-macroexpansions))
  (declare (zwei:indentation 1 1))
  `(zl:multiple-value ,vars ,value))

(defun nth-value-internal (n &rest values)
  (declare (side-effects simple reducible))
  (declare (future-common-lisp:dynamic-extent values))
  (nth n values))

(defmacro future-common-lisp:nth-value (n form &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (multiple-value-bind (n n-constant n-value)
      (constant-fold-form n env)
    (if n-constant
	(if (typep n-value '(integer 0 *))
	    (if (eql n-value 0)
		`(values ,form)
		(let ((ignore-values (loop repeat n-value collect (gensym)))
		      (value (gensym)))
		  `(multiple-value-bind (,@ignore-values ,value)
		       ,form
		     (declare (ignore ,@ignore-values))
		     (declare (compiler:variable-inlinable ,value))
		     ,value)))
	    (progn
	      (warn ()
		    "The first argument in ~S must be a non-negative integer"
		    `(future-common-lisp:nth-value ,n ,form))
	      `(multiple-value-call #'nth-value-internal (values ,n) ,form)))
	`(multiple-value-call #'nth-value-internal (values ,n) ,form))))

;;; Chapter 10

(defmacro remf (place indicator &environment env)
  (multiple-value-bind (vars vals stores store-form access-form)
      (get-setf-method place env)
    (let*-subst vars vals
                `(multiple-value-bind (.found. ,@stores)
                     (remf-1 ,access-form ,indicator)
                   ,store-form
                   .found.)               
                env)))

;;; Chapter 11

(defmacro defpackage (name &body make-package-keywords)
  `(zl:defpackage ,name
                  ,@(unless (loop for clause in make-package-keywords
                                  thereis (and (listp clause) (eq (car clause) ':use)))
                      `((:use "COMMON-LISP")))
                  ,@(unless (loop for clause in make-package-keywords
                                  thereis (and (listp clause) (eq (car clause) ':colon-mode)))
                      `((:colon-mode :external)))
                  ,@make-package-keywords))

(defprop defpackage "Package" si:definition-type-name)

;;; Chapter 24

(defmacro check-type (place type &optional (type-string 'nil) &environment env)
  (let ((objname (gensym)))
    (multiple-value-bind (vars vals stores store-form access-form)
        (let ((place2 (macroexpand place env t)))
	  (if (symbolp place2)
	      ;; compensate for get-setf-method of symbols having been prematurely
	      ;; changed to accomodate an X3J13 decision that was later rescinded
	      (let ((store (gensym)))
		(values () () (list store) `(setq ,place2 ,store) place2))
	      (get-setf-method place env)))
      (let*-subst vars vals
		  `(tagbody ,objname
		     ,(let-subst (list objname) (list access-form)
				 `(compiler:%error-unless (typep ,objname ',type)
				    ,(let*-subst stores
						 `((dbg:check-type-1 ',place ,objname
								     ',type ,type-string))
						store-form
						env)
				    (go ,objname))
				 env))
		  env))))

(defmacro excase (xcase type object &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (let ((objname (gensym)))
    (let-subst `(,objname)
	       `(,object)
	       `(,xcase ,objname
		 ,@body
		 (otherwise
		   (compiler:%error-unless nil
					   (dbg:check-type-1 ',object ,objname ',type nil t)
					   nil)))
	       env)))

(defmacro cxcase (xcase type object &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (let ((blockname (gensym))
        (tagname (gensym))
        (objname (gensym)))
    (multiple-value-bind (vars vals stores store-form access-form)
	(get-setf-method object env)
      (let*-subst `(,@vars ,objname)
                  `(,@vals ,access-form)
                  `(block ,blockname
                     (tagbody
                       ,tagname
                       (return-from ,blockname
                         (,xcase ,objname
                          ,@body
                          (otherwise
                            (compiler:%error-unless nil
                              (setf ,objname (dbg:check-type-1 ',object ,objname ',type))
                              ,(let*-subst stores (list objname) store-form env)
                              (go ,tagname)))))))
                  env))))

(defun typecase-type-union (body)
  (let ((or-types `(or ,@(mapcar #'first body))))
    ;;--- this kludge should be expunged when TYPE-EXPAND stops calling
    ;;--- ERROR all over the place. --BIM
    (condition-case ()
         (type-expand or-types *standard-terminal-types* t)
       (error or-types))))

(defmacro etypecase (object &body body)
  (declare (compiler:do-not-record-macroexpansions))
  `(excase typecase ,(typecase-type-union body) ,object ,@body))

(defmacro ctypecase (object &body body)
  (declare (compiler:do-not-record-macroexpansions))
  `(cxcase typecase ,(typecase-type-union body) ,object ,@body))

(defun case-collect-keys (body)
  (loop for (keys) in body
        if (listp keys)
          append keys
        else collect keys))

(defmacro ecase (object &body body)
  (declare (compiler:do-not-record-macroexpansions))
  `(excase case (member ,@(case-collect-keys body)) ,object ,@body))

(defmacro ccase (object &body body)
  (declare (compiler:do-not-record-macroexpansions))
  `(cxcase case (member ,@(case-collect-keys body)) ,object ,@body))

(defmacro assert (test-form &optional references format-string &rest format-args)
  (check-type references list)
  (check-type format-string (or null string))
  (unless format-string
    (setq format-string "The assertion ~A failed."
          format-args `(',test-form)))
  (let ((tag (gensym)))
    `(tagbody
       ,tag (when (not ,test-form)
              ,(if (null references)
                   `(assertion-failed nil nil ,format-string ,@format-args)
                   `(setf (values . ,references)
                          (assertion-failed ',references (list ,@references)
                                            ,format-string ,@format-args)))
              (go ,tag)))))

;;; Chapter 25

(si:define-special-form step (form &environment env)
  (zl:step form env))

;;; Measure the resource usage incurred by evaluating a form.
;;; This makes no attempt to distinguish between usage of different processes,
;;; which may not be desirable anyway.
;;;--- This ought to print out idle time, if the scheduler metered that.
;;; The optional describe-consing argument, an SCL extension, is one of:
;;;     NIL - nothing special
;;;     T - print out the objects that were consed
;;;     :ADDRESS - also give the octal address where the objects start
(si:define-special-form time (form &optional describe-consing &environment env)
  :macro-expander
  env
  `(using-resource (.time-table. time-usage-table)
     (time-start .time-table.)
     (let ((.start-time. (sys:%microsecond-clock)))
       (multiple-value-prog1
         ,form
         (let ((.end-time. (sys:%microsecond-clock)))
           (time-finish ',form .time-table. .start-time. .end-time. ,describe-consing)))))
  :interpreter
  (using-resource (.time-table. time-usage-table)
    (time-start .time-table.)
    (let ((.start-time. (sys:%microsecond-clock)))
      (multiple-value-prog1
        (eval form env)
        (let ((.end-time. (sys:%microsecond-clock)))
          (time-finish form .time-table. .start-time. .end-time.
                       (eval describe-consing env)))))))

;;; SCL

(defmacro let-and-make-dynamic-closure (vars &body body)
  `(zl:let-closed ,vars ,@body))


#+3600
(l-lisp-compiler:deftransformer (case l-case-to-computed-go) (form)
  (destructuring-bind (nil test-object &rest clauses) form
    (let ((all-keys nil)
	  (all-tags nil)
	  (default-tag nil))
      (dolist (clause clauses)
	(let ((key (first clause)))
	  (cond ((listp key)
		 (setf all-keys (union key all-keys)))
		((member key '(t otherwise)))
		(t
		 (pushnew key all-keys)))))
      (labels ((compute-tags ()
		 (setf default-tag (gensym))
		 (setf all-tags (mapcar #'(lambda (ignore) (gensym)) all-keys)))
	       (case-tag (key)
		 (let ((n (position key all-keys)))
		   (if n
		       (elt all-tags n)
		       default-tag)))
	       (case-tagbody (form)
		 (let ((otherwise-seen nil))
		   `(block ,default-tag
		      (tagbody
			,form
			,@(loop for clause in clauses
				for key = (first clause)
				if (listp key)
				  append (mapcar #'case-tag key)
				else if (member key '(t otherwise))
				       collect default-tag
				       and do (setf otherwise-seen t)
				else collect (case-tag key)
				collect `(return-from ,default-tag
					   (progn ,@(or (rest clause) '(nil)))))
			,@(unless otherwise-seen
			    `(,default-tag)))))))
	(when (and (> (length all-keys) 2) (every #'integerp all-keys))
	  (let ((least-key (reduce #'min all-keys))
		(greatest-key (reduce #'max all-keys))
		(nkeys (length all-keys)))
	    (when (and (<= 0 least-key) (> (* 2 nkeys) greatest-key))
	      (compute-tags)
	      (return-from l-case-to-computed-go
		(case-tagbody
		  `(compiler:computed-go ,test-object
					 ,default-tag
					 ,@(loop for key from 0 to greatest-key
						 collect (case-tag key))))))))))
    (expand-case test-object clauses compiler:*interpreter-lexical-environment*)))

;;; More SCL

(defmacro with-1d-raster-array ((array-var &optional width-var height-var) &body body)
  (let ((spanning-width-var (fintern "~A SPANNING-WIDTH" array-var)))
    `(multiple-value-bind (,width-var ,height-var ,spanning-width-var)
	 (decode-raster-array ,array-var)
       (let ((,array-var ,array-var))
	 (declare (array-register-1d ,array-var))
	 ,@body))))

;;; I hope this isn't slower on an Ivory with an FPA (because the *
;;; doesn't use the FPA, but the 2D AREF index multiply does).
(defmacro 1d-raster-aref (array-var x y)
  `(%1d-aref ,array-var (+ ,x (* ,y ,(fintern "~A SPANNING-WIDTH" array-var)))))


;;; These are moved here from sage and mtb so RLB can have his dynamic-flet.
(defmacro D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")lexpr-continue0 (&rest arglist)
  (ignore arglist)
  (error "You aren't supposed to call this at toplevel, only within DYNAMIC-FLET"))


(defmacro 1continue0 (&rest arglist)
  (ignore arglist)
  (error "You aren't supposed to call this at toplevel, only within DYNAMIC-FLET"))


(defmacro 1dynamic-flet0 (functions &body body)
  (zwei:zcollecting-into (real-names fake-names old-names arglists fnbodies)
    (dolist (fn functions)
      (destructuring-bind (real-name arglist &body fn-body) fn
	(zwei:zcollect real-names real-name)
	(zwei:zcollect fake-names (dw::fintern "fake-~a" real-name))
	(zwei:zcollect old-names (dw::fintern "old-~a" real-name))
	(zwei:zcollect arglists arglist)
	(zwei:zcollect fnbodies fn-body)))
    `(let ,(mapcar (lambda (old-name real-name)
		     `(,old-name #',real-name))
		   old-names real-names)
       (flet ,(mapcar (lambda (fake-name arglist fn-body real-name old-name)
			`(,fake-name ,arglist
			  (letf ((#',real-name ,old-name))
			    (macrolet ((lexpr-continue (&rest args)
					 `(apply ,',old-name ,@args))
				       (continue (&rest args)
					 `(funcall ,',old-name ,@args)))
			      ,@fn-body))))
		      fake-names arglists fnbodies real-names old-names)
	 (letf ,(mapcar (lambda (real-name fake-name)
			  `(#',real-name #',fake-name))
			real-names fake-names)
	   ,@body)))))
