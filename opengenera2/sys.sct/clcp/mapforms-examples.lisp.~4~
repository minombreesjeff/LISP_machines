;;; -*- Mode: LISP; Package: Language-Tools; Base: 10; Syntax: Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Written May 1982 by David A. Moon for use by the Common Lisp community
;;; Revised April 1983

;;; Examples of the use of MAPFORMS

(DEFUN PRINT-SUBFORMS (FORM)
  (MAPFORMS #'(LAMBDA (FORM KIND USAGE IGNORE)
		(UNLESS (MEMBER KIND *MAPFORMS-NON-FORM-KINDS*)
		  (FORMAT T "~&~S for ~S" FORM USAGE)))
	    FORM))

(DEFUN FREE-VARIABLES (FORM)
  (MAPFORMS #'(LAMBDA (FORM KIND IGNORE FREEVARS)
		(AND (MEMBER KIND '(SET SYMEVAL))
		     (NOT (MEMBER FORM *MAPFORMS-BOUND-VARIABLES*))
		     (NOT (MEMBER FORM FREEVARS))
		     (PUSH FORM FREEVARS))
		FREEVARS)
	    FORM ':BOUND-VARIABLES NIL))

(DEFUN FIND-ALL-CONSTANTS (FORM)
  (MAPFORMS #'(LAMBDA (FORM KIND IGNORE CONSTANTS)
		(IF (EQ KIND 'QUOTE)
		    (PUSHNEW FORM CONSTANTS))
		CONSTANTS)
	    FORM))

;Returns a list of lists (variable-or-nil collection-type collection-type...)
(DEFUN FIND-ALL-COLLECTIONS (FORM)
  (MAPFORMS #'(LAMBDA (FORM KIND IGNORE COLLECTIONS)
		(AND (NOT (MEMBER KIND *MAPFORMS-NON-FORM-KINDS*))
		     (LISTP FORM)
		     (EQ (CAR FORM) 'COLLECT)
		     (LET ((VARIABLE NIL) (TYPE 'CONS) ELEM)
		       (LOOP FOR (KEYWORD ARG) ON (CDDR FORM) BY 'CDDR
			     WHEN (EQ KEYWORD 'INTO) DO (SETQ VARIABLE ARG)
			     WHEN (EQ KEYWORD 'USING) DO (SETQ TYPE ARG))
		       (OR (SETQ ELEM (ASSOC VARIABLE COLLECTIONS))
			   (PUSH (SETQ ELEM (NCONS VARIABLE)) COLLECTIONS))
		       (PUSHNEW TYPE (CDR ELEM))))
		COLLECTIONS)
	    FORM))

;Expands all macros in the form, except those that have templates
;Maybe an option to do them, too??
(DEFUN EXPAND-ALL-MACROS (FORM)
  (COPYFORMS #'(LAMBDA (FORM IGNORE IGNORE) FORM) FORM ':EXPAND-ALL-MACROS T))

(DEFUN EXPAND-ALL-MACROS-AND-SUBSTS (FORM)
  (COPYFORMS #'(LAMBDA (FORM KIND IGNORE)
		 (VALUES (IF (MEMBER KIND *MAPFORMS-NON-FORM-KINDS*)
			     FORM
			     (MACROEXPAND-1 FORM *MAPFORMS-LEXICAL-FUNCTION-ENVIRONMENT*))
			 NIL))
	     FORM ':EXPAND-ALL-MACROS T :EXPAND-SUBSTS T))

(DEFVAR *MAPFORMS-IN-FILE-FUNCTION*)
(DEFVAR *MAPFORMS-IN-FILE-STATE*)
(DEFVAR *MAPFORMS-IN-FILE-BOUND-VARIABLES*)
(DEFVAR *MAPFORMS-IN-FILE-USAGE*)

;MAPFORMS over every form in the file
(DEFUN MAPFORMS-IN-FILE (*MAPFORMS-IN-FILE-FUNCTION* FILENAME
			 &OPTIONAL &KEY (INITIAL-STATE NIL)
					(BOUND-VARIABLES 'NO-ENV)
					(USAGE 'EVAL)
			 &AUX (*MAPFORMS-IN-FILE-STATE* INITIAL-STATE)
			      (*MAPFORMS-IN-FILE-BOUND-VARIABLES* BOUND-VARIABLES)
			      (*MAPFORMS-IN-FILE-USAGE* USAGE))
  (WITH-OPEN-FILE (S FILENAME)
    (LET ((GENERIC-PATHNAME (SEND (SEND S ':PATHNAME) ':GENERIC-PATHNAME)))
      (FS:READ-ATTRIBUTE-LIST GENERIC-PATHNAME S)
      (COMPILER:COMPILE-FROM-STREAM S GENERIC-PATHNAME #'MAPFORMS-IN-FILE-1 NIL)
      *MAPFORMS-IN-FILE-STATE*)))

(DEFSELECT MAPFORMS-IN-FILE-1 
  ((:DUMP-FORM :DUMP-DEFINITION) (FORM)
   (SETQ *MAPFORMS-IN-FILE-STATE*
	 (MAPFORMS *MAPFORMS-IN-FILE-FUNCTION* FORM
		   ':INITIAL-STATE *MAPFORMS-IN-FILE-STATE*
		   ':BOUND-VARIABLES *MAPFORMS-IN-FILE-BOUND-VARIABLES*
		   ':USAGE *MAPFORMS-IN-FILE-USAGE*)))
  ; :DUMP-LAMBDA-EXPRESSION doesn't seem to be used?
  (:EVAL-FORM (FORM) (EVAL FORM))		;eval-when (compile), hopefully undoable
  (:MACRO-EXPAND (FORM) (MACROEXPAND FORM))
  ((:INITIALIZE :FINALIZE) (&REST IGNORE) NIL)
  (:FOR-FILE () T)
  (:CONS-AREA () DEFAULT-CONS-AREA)
  (:TO-CORE-P () NIL)				;don't mung the current environment
  (:COMPILER-TYPE () NIL)			;don't set QC-FILE-IN-PROGRESS
  (:READ (STREAM EOF IGNORE) (READ STREAM NIL EOF))
  )

(DEFUN FREE-VARIABLES-IN-FILE (FILENAME)
  (MAPFORMS-IN-FILE #'(LAMBDA (FORM KIND IGNORE FREEVARS)
			(AND (MEMBER KIND '(SET SYMEVAL))
			     (NOT (MEMBER FORM *MAPFORMS-BOUND-VARIABLES*))
			     (NOT (MEMBER FORM FREEVARS))
			     (PUSH FORM FREEVARS))
			FREEVARS)
		    FILENAME ':BOUND-VARIABLES NIL))

;This cheats a little and doesn't call the real LOOP parser
;State is alist of clause name (or LOOP itself) and number of times seen
(DEFUN LOOP-CLAUSES-IN-FILE (FILENAME)
  (LET ((STATS (MAPFORMS-IN-FILE
		 #'(LAMBDA (FORM KIND IGNORE STATS)
		     (AND (NOT (MEMBER KIND *MAPFORMS-NON-FORM-KINDS*))
			  (LISTP FORM)
			  (EQ (CAR FORM) 'LOOP)
			  (LOOP FOR KWD IN FORM DO
			   (IF (OR (EQ KWD 'LOOP) 
				   (SETQ KWD (CAR (SI:LOOP-TASSOC KWD
								  SI:LOOP-KEYWORD-ALIST))))
			       (LET ((ELEM (ASSOC KWD STATS)))
				 (OR ELEM (PUSH (SETQ ELEM (CONS KWD 0)) STATS))
				 (INCF (CDR ELEM))))))
		     STATS)
		 FILENAME)))
    (FORMAT T "~&LOOP used ~D time~:P.~%" (OR (CDR (ASSOC 'LOOP STATS)) 0))
    (LOOP FOR (KWD . COUNT) IN (SORT STATS #'STRING-LESSP :KEY #'CAR)
	  UNLESS (EQ KWD 'LOOP)
	    DO (FORMAT T "  ~A used ~D time~:P.~%" KWD COUNT))))
