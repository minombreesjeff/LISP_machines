;;; -*- Mode: LISP; Package: COMMON-LISP-INTERNALS; Lowercase: Yes; Syntax: Common-lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; These functions are actually simulated by the cold load generator.

(defmacro make-cl-value-link (real-symbol other-symbol)
  `(progn (si:link-symbol-value-cells ',other-symbol ',real-symbol)
	  (defvar ,other-symbol)))

(defmacro make-cl-function-links (real-symbol &rest other-symbols)
  `(progn ,@(mapcar #'(lambda (s)
			`(progn (si:link-symbol-function-cells ',s ',real-symbol)
				(setf (get ',s 'cl-function-link) ',real-symbol)
				(compiler:add-optimizer ,s cl-function-link-optimizer
							,real-symbol)
				(record-source-file-name ',s)))
		    other-symbols)))

(defun cl-function-link-optimizer (form)
  (let ((real-symbol (get (first form) 'cl-function-link)))
    (if real-symbol
	(list* real-symbol (rest form))
	form)))

;;; Bring various ZL stuff into CL

(make-cl-value-link cl:/	        zl:/)
(make-cl-value-link cl:*applyhook*      zl:applyhook)
(make-cl-value-link cl:*debug-io*       zl:debug-io)
(make-cl-value-link cl:*error-output*   zl:error-output)
(make-cl-value-link cl:*evalhook*       zl:evalhook)
(make-cl-value-link cl:*features*       si:status-feature-list)
(make-cl-value-link scl:*load-pathname-defaults* fs:load-pathname-defaults)
(make-cl-value-link cl:*package*        zl:package)
#+3600 (si:declare-storage-category :variable zl:package :wired)
(make-cl-value-link cl:*query-io*       zl:query-io)
(make-cl-value-link cl:*read-base*      zl:ibase)
(make-cl-value-link cl:*readtable*      zl:readtable)
(make-cl-value-link cl:*standard-input* zl:standard-input)
(make-cl-value-link cl:*standard-output* zl:standard-output)
(make-cl-value-link cl:*terminal-io*    zl:terminal-io)
(make-cl-value-link cl:*trace-output*   zl:trace-output)
(make-cl-value-link scl:*default-cons-area* sys:default-cons-area)
(make-cl-value-link scl:*error-message-hook* sys:error-message-hook)

(make-cl-function-links cl:< zl:lessp)
(make-cl-function-links cl:<= scl:)
(make-cl-function-links cl:> zl:greaterp)
(make-cl-function-links cl:>= scl:)
(make-cl-function-links cl:/= scl:)
(make-cl-function-links cl:/ sys:rational-quotient)
(make-cl-function-links cl:apply zl:lexpr-funcall)
(make-cl-function-links cl:array-rank zl:array-#-dims)
(make-cl-function-links cl:array-total-size zl:array-length)
(make-cl-function-links cl:aref cl:bit cl:sbit)
(make-cl-function-links cl:char cl:schar)
(make-cl-function-links scl:char cl:char/=)
(make-cl-function-links scl:char cl:char<=)
(make-cl-function-links scl:char cl:char>=)
(make-cl-function-links zl:listp cl:consp)
(make-cl-function-links zl:copyalist cl:copy-alist)
(make-cl-function-links zl:copyf scl:copy-file)
(make-cl-function-links zl:copylist cl:copy-list)
(make-cl-function-links zl:copylist* scl:copy-list*)
(make-cl-function-links cl:copy-symbol zl:copysymbol)
(make-cl-function-links zl:copytree cl:copy-tree)
(make-cl-function-links cli::follow-synonym-stream si:follow-syn-stream)
(make-cl-function-links zl:fixp cl:integerp)
(make-cl-function-links zl:bit-test cl:logtest)
(make-cl-function-links cl:make-synonym-stream si:make-syn-stream)
(make-cl-function-links cl:mapl zl:map)
(make-cl-function-links si:exact-rational cl:rational)
(make-cl-function-links zl:rational cl:rationalize)
(make-cl-function-links zl:\\ cl:rem)
(make-cl-function-links cl:cdr cl:rest)
(make-cl-function-links zl:fsymeval cl:symbol-function)
(make-cl-function-links zl:get-pname cl:symbol-name)
(make-cl-function-links zl:symeval cl:symbol-value)
(make-cl-function-links scl:symbol-value-globally zl:symeval-globally)
(make-cl-function-links zl:symeval-in-closure scl:symbol-value-in-closure)
(make-cl-function-links zl:symeval-in-instance scl:symbol-value-in-instance)
(make-cl-function-links zl:symeval-in-stack-group scl:symbol-value-in-stack-group)
(make-cl-function-links zl:closurep sys:dynamic-closure-p)
(make-cl-function-links fs:user-homedir cl:user-homedir-pathname)
(make-cl-function-links zl:array-pop cl:vector-pop)
(make-cl-function-links zl:array-push-portion-extend scl:vector-push-portion-extend)
(make-cl-function-links zl:copytree-share scl:copy-tree-share)
(make-cl-function-links zl:closure scl:make-dynamic-closure)
(make-cl-function-links zl:closure-alist scl:dynamic-closure-alist)
(make-cl-function-links zl:closure-variables scl:dynamic-closure-variables)
(make-cl-function-links zl:copy-closure scl:copy-dynamic-closure)
(make-cl-function-links zl:parse-ferror sys:parse-error)
(make-cl-function-links zl:readline-no-echo scl:read-line-no-echo)
(make-cl-function-links zl:undeletef scl:undelete-file)
(make-cl-function-links zl:renamef cl:rename-file)
(make-cl-function-links zl:deletef cl:delete-file)
(make-cl-function-links zl:subrp cl:compiled-function-p)
(make-cl-function-links zl:room cl:room)

(make-cl-function-links sys:%1d-aref future-common-lisp:row-major-aref)
(make-cl-function-links get-setf-method-multiple-value future-common-lisp:get-setf-expansion)
(make-cl-function-links special-form-p future-common-lisp:special-operator-p)
(make-cl-function-links prin1 future-common-lisp:prin1)
