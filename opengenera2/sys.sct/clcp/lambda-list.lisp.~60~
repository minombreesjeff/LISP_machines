;;; -*- Syntax: Common-lisp; Package: LT; Base: 10.; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Errors

(defflavor lambda-list-error (lambda-list) (sys:error)
  (:gettable-instance-variables)
  (:initable-instance-variables)
  (:required-init-keywords :lambda-list))

(defmethod (:report lambda-list-error :after) (stream)
  (let ((*print-length* nil)
	(*print-level* nil)
	(*print-pretty* t))
    (format stream "~&Lambda list was ~:S." lambda-list)))

(defflavor lambda-list-syntax-error (message) (lambda-list-error)
  (:initable-instance-variables)
  (:gettable-instance-variables))

(defmethod (:report lambda-list-syntax-error) (stream)
  (format stream "Syntax error in lambda list: ~A" message))

(defun lambda-list-syntax-error (ll message &rest args)
  (declare (dbg:error-reporter))
  (error 'lambda-list-syntax-error :lambda-list ll
	 :message (apply #'format nil message args)))

(defflavor lambda-list-match-error (argument-list) (lambda-list-error)
  (:gettable-instance-variables)
  (:initable-instance-variables)
  (:required-init-keywords :argument-list))

(defmethod (:report lambda-list-match-error :after) (stream)
  (let ((*print-length* nil)
	(*print-level* nil)
	(*print-pretty* t))
    (format stream "~&Arguments were ~:S." argument-list)))

(defflavor too-many-arguments-to-lambda-list () (lambda-list-match-error))

(defmethod (:report too-many-arguments-to-lambda-list) (stream)
  (format stream "Too many arguments supplied for lambda list."))

(defflavor too-few-arguments-to-lambda-list () (lambda-list-match-error))

(defmethod (:report too-few-arguments-to-lambda-list) (stream)
  (format stream "Too few arguments supplied for lambda list."))

(defflavor undefined-keyword-for-lambda-list ()
	   (lambda-list-match-error sys:undefined-keyword-argument))

(defflavor hard-keyword-in-lambda-list () (lambda-list-match-error))

(defmethod (:report hard-keyword-in-lambda-list) (stream)
  (format stream "A lisp form appears where a keyword was expected."))

(defflavor unsupported-keyword-arguments-in-lambda-list () (lambda-list-match-error))

(defmethod (:report unsupported-keyword-arguments-in-lambda-list) (stream)
  (format stream "&KEY arguments are not currently supported here with APPLY,
because the matching would have to be done at run time."))

(compile-flavor-methods lambda-list-syntax-error
			too-many-arguments-to-lambda-list too-few-arguments-to-lambda-list
			undefined-keyword-for-lambda-list hard-keyword-in-lambda-list
			unsupported-keyword-arguments-in-lambda-list)



#||

(defun tmoll (ll &optional macro-&keywords macro-destructure-p)
  (labels ((analyze (listpoint type)
	     (labels ((recurse (item)
			(indenting-output (t 2)
			  (fresh-line)
			  (map-over-lambda-list
			    item
			    #'analyze
			    :macro-&keywords macro-&keywords
			    :macro-destructure-p macro-destructure-p))))
	       (if (eq type :dotted-tail)
		   (format t "~&Dotted Tail~15T~S" listpoint)
		   (format t "~&~A~15T~S" (string-capitalize-words type) (car listpoint))
		   (when macro-destructure-p
		     (case type
		       ((:required :body :rest)
			(when (consp (car listpoint))
			  (recurse (car listpoint))))
		       ((:optional :key)
			(destructure-optional-or-key (listpoint type arg nil supplied)
			  (when (consp arg) (recurse arg))
			  (when (consp supplied) (recurse supplied))))))))))
    (map-over-lambda-list ll #'analyze :macro-&keywords macro-&keywords
			  :macro-destructure-p macro-destructure-p)))

||#

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; A utility for use in map functions for macros
;;;

0(defmacro destructure-optional-or-key ((list-cons type arg-var &optional
						  default-var supplied-p-var
						  keyword-var) &body body)
  (let ((object-var (gensymbol "DOOK-OBJECT")))
    `(let ((,arg-var nil)
	   ,@(and keyword-var `((,keyword-var nil)))
	   ,@(and default-var `((,default-var nil)))
	   ,@(and supplied-p-var `((,supplied-p-var nil)))
	   (,object-var (car ,list-cons)))
       (if (symbolp ,object-var)
	   (setq ,arg-var ,object-var
		 ,@(and keyword-var `(,keyword-var
					       (intern (symbol-name ,arg-var)
						       si:pkg-keyword-package))))
	   (if (eq ,type :optional)
	       (setq ,arg-var (first ,object-var))
	       (if (consp (first ,object-var))
		   ,(if keyword-var
			`(setq ,keyword-var (first (first ,object-var))
			       ,arg-var (second (first ,object-var)))
			`(setq ,arg-var (second (first ,object-var))))
		   (setq ,arg-var (first ,object-var)
			 ,@(and keyword-var `(,keyword-var
					       (intern (symbol-name ,arg-var)
						       si:pkg-keyword-package))))))
	   ,@(when default-var
	       `((when ( (length ,object-var) 2)
		   (setq ,default-var (second ,object-var)))))
	   ,@(when supplied-p-var
	       `((when ( (length ,object-var) 3)
		   (setq ,supplied-p-var (third ,object-var))))))
       ,@body)))

(defun map-over-lambda-list (ll function &key macro-&keywords
			     macro-destructure-p)
  (declare (sys:downward-funarg function))
  (declare (values keys-p allow-other-keys))
  "Function to map over the entries in a function lambda list. It is called with a
function that is called once per argument.  It is also called for lambda keywords
other than &optional, &rest, &key, &body (for macro-destructuring) and &allow-other-keys.
  The function is called with the list cons for the lambda list item and the type.
  If :macro-destructure-p is T, then the the mapping will allow for destructuring arguments. 
For a destructuring argument, then this function checks permits destructuring lists
wherever they are valid. The function has to notice them and act accordingly.
  The macro destructure-optional-or-key is useful for processing optionals and keys."
  (let ((keys-p nil)
	(allow-other-keys nil))
    (flet ((check-arg-symbol (symbol)
	     (si:check-symbol-setability symbol "bind"))
	   (ok-destructure-p (ob)
	     (or (symbolp ob) (and (consp ob) macro-destructure-p)))
	   (check-macro-&keyword (word)
	     (unless macro-&keywords
	       (lambda-list-syntax-error ll "~S is not permitted in this lambda list." word))))
      (macrolet ((check-duplicate-&keyword (dup-flag name)
		   `(if ,dup-flag
			(lambda-list-syntax-error ll ,(string-append name " appears twice"))
			(setq ,dup-flag t))))
	(loop with arg-required = nil with key-required = nil with state = 'required
	      with have-optionals = nil with have-rest = nil with have-keys = nil
	      with have-aux = nil
	      with have-environment = nil with have-whole = nil with have-body = nil
	      with special-saved-state = nil
	      for arg-point on ll
	      for arg = (and (consp arg-point) (car arg-point))
	      as lambda&-p = (and (symbolp arg) (char= (aref (symbol-name arg) 0) #\&))
	      do
	  (cond ((symbolp arg-point) 1; . body
0		 (unless macro-destructure-p
		   (lambda-list-syntax-error
		     ll
		     "The lambda list is a dotted list ending with ~S." arg-point))
		 (when key-required
		   (lambda-list-syntax-error
		     ll
		     "Non-lambda-keyword .~S where lambda keyword required"
		     arg-point))
		 (when arg-required
		   (lambda-list-syntax-error
		     ll
		     "Dotted list lambda list ends left trailing keyword.
e.g. (x y &optional . z)."))
		 (funcall function arg-point :dotted-tail)
		 (return))
		(lambda&-p			; something special
		 (unless (member arg lambda-list-keywords)
		   (lambda-list-syntax-error ll "Undefined lambda-list keyword ~S" arg))
		 (when arg-required
		   (lambda-list-syntax-error ll "Two lambda-list keywords in a row."))
		 (setq key-required nil)
		 (setq arg-required nil)
		 (case arg
		   (&optional
		     (check-duplicate-&keyword have-optionals "&OPTIONAL")
		     (unless (eq state 'required)
		       (lambda-list-syntax-error ll "&OPTIONAL must not follow &REST, &KEY, or &AUX"))
		     (setq state 'optional))
		   (&rest
		     (check-duplicate-&keyword have-rest "&REST")
		     (case state
		       ((required optional))
		       ((key allow-other-keys)
			(warn "&REST should not follow &KEY in lambda-list ~S." ll))
		       (otherwise
			 (lambda-list-syntax-error ll "&REST must not follow &AUX or &KEY")))
		     (setq state 'rest)
		     (setf arg-required t))
		   (&key
		     (check-duplicate-&keyword have-keys "&KEY")
		     (unless (member state '(required optional rest))
		       (lambda-list-syntax-error ll "&KEY in invalid location"))
		     (setf keys-p t)
		     (setq state 'key))
		   (&aux
		     (check-duplicate-&keyword have-aux "&AUX")
		     (setq state 'aux))
		   (&allow-other-keys
		     (unless (eq state 'key)
		       (lambda-list-syntax-error ll "&ALLOW-OTHER-KEYS must follow &KEY"))
		     (setq state 'allow-other-keys)
		     (setf allow-other-keys t)
		     (setq key-required t))
		   (&whole
		     (setq special-saved-state state)
		     (check-macro-&keyword '&whole)
		     (unless (member state '(required optional key allow-other-keys))
		       (lambda-list-syntax-error ll "&WHOLE in invalid location."))
		     (check-duplicate-&keyword have-whole "&WHOLE")
		     (setq state 'whole)
		     (setf arg-required t))
		   (&environment
		     (setq special-saved-state state)
		     (check-macro-&keyword '&environment)
		     (unless (member state '(required optional key allow-other-keys))
		       (lambda-list-syntax-error ll "&ENVIRONMENT in invalid location."))
		     (check-duplicate-&keyword have-environment "&ENVIRONMENT")
		     (setq state 'environment)
		     (setf arg-required t))
		   (&body
		     (setq special-saved-state state)
		     (check-macro-&keyword '&body)
		     (unless (member state '(required optional key allow-other-keys))
		       (lambda-list-syntax-error ll "&BODY in invalid location."))
		     (check-duplicate-&keyword have-body "&BODY")
		     (setq state 'body)
		     (setf arg-required t))
		   (otherwise (funcall function arg-point :&-key))))
		((not (or (symbolp arg) (consp arg)))
		 (lambda-list-syntax-error ll "Lambda lists may contain only symbols and lists, not ~S." arg))
		(t
		 (when key-required
		   (lambda-list-syntax-error ll
					     "Non-lambda-keyword ~S where lambda keyword required"
					     arg))
		 (setq arg-required nil)
		 (case state
		   (required
		     (unless (ok-destructure-p arg)
		       (when (consp arg)
			 (lambda-list-syntax-error ll "Required argument ~S with initialization" arg))
		       (check-arg-symbol arg))
		     (funcall function arg-point :required))
		   (optional
		     (if (consp arg)		1;can't be destructuring, its a valid list.
0			 (let ((length (length arg)))
			   (unless (<= 1 length 3)
			     (lambda-list-syntax-error ll "Optional argument ~S is not valid." arg))
			   (unless (ok-destructure-p (first arg))
			     (check-arg-symbol (first arg)))
			   (when (= length 3)
			     1;; permit destructuring in supplied-p.
0			     (unless (ok-destructure-p (third arg))
			       (check-arg-symbol (third arg)))))
			 (check-arg-symbol arg))
		     (funcall function arg-point :optional))
		   (rest
		     (unless (ok-destructure-p arg)
		       (when (consp arg)
			 (lambda-list-syntax-error ll "&REST argument ~S with initialization" arg))
		       (check-arg-symbol arg))
		     (setq key-required t)
		     (funcall function arg-point :rest))
		   (aux
		     (if (listp arg)
			 (let ((length (length arg)))
			   (unless (<= 1 length 2)
			     (lambda-list-syntax-error ll "&AUX argument ~S is not valid." arg))
			   (check-arg-symbol (first arg)))
			 (check-arg-symbol arg))
		     (funcall function arg-point :aux))
		   (key
		     (if (consp arg)
			 (let ((length (length arg)))
			   (unless (<= 1 length 3)
			     (lambda-list-syntax-error ll "&KEY argument ~S is not valid." arg))
			   (let ((kw (first arg)))
			     (if (symbolp kw)
				 (check-arg-symbol kw)
				 (unless (and (consp kw)
					      (= (length kw) 2)
					      (symbolp (first kw)))
				   (lambda-list-syntax-error ll "&KEY specifier ~S has incorrect syntax." arg))
				 (unless (ok-destructure-p (second kw))
				   (check-arg-symbol (second kw)))))
			   (when (= length 3)
			     (unless (ok-destructure-p (third arg))
			       (check-arg-symbol (third arg)))))
			 (check-arg-symbol arg))
		     (funcall function arg-point :key))
		   (whole
		     (when (listp arg)
		       (lambda-list-syntax-error
			 ll "&WHOLE argument ~S with initialization" arg))
		     (check-arg-symbol arg)
		     (setq state special-saved-state)
		     (funcall function arg-point :whole))
		   (environment
		     (when (listp arg)
		       (lambda-list-syntax-error
			 ll "&ENVIRONMENT argument ~S with initialization" arg))
		     (check-arg-symbol arg)
		     (setq state special-saved-state)
		     (funcall function arg-point :environment))
		   (body
		     (unless (ok-destructure-p arg)
		       (when (consp arg)
			 (lambda-list-syntax-error
			   ll "&WHOLE argument ~S with initialization" arg))
		       (check-arg-symbol arg))
		     (setq key-required t)
		     (setq state special-saved-state)
		     (funcall function arg-point :body))
		   )))
	      finally
		(when arg-required
		  (lambda-list-syntax-error ll "Lambda list ends with dangling keyword."))
		;; key-required really means key-or-nothing
		)))
    (values keys-p allow-other-keys)))

;;; A structure to record a lambda list, either for permanent storage
;;; or to avoid complex co-routines (like matching an arglist to an call).

;;; NOTE: to avoid consing when filling in the following,
;;; the required, optional, and key lists share the list
;;; structure of the full lambda-list. Each one specifies
;;; the head of its list, but the length is specified by
;;; the "n-" variable, NOT by cdr-ing for nil.

(defstruct (lambda-list-info (:conc-name lli-)
			     (:size-symbol *lambda-list-info-size*))
  (printed-form nil :type list)
  (n-required 0 :type integer)
  (n-optional 0 :type integer)
  (n-key 0 :type integer)
  (required nil :type list)
  (optional nil :type list)			; list of (name default-value)
  (key nil :type list)				; list of (name default) 
  (rest nil :type symbol)
  (allow-other-keys nil :type symbol)
  (environment nil :type symbol)
  (body nil :type symbol)
  (whole nil :type symbol))

(defvar *template-lli* (make-lambda-list-info))

(defmacro with-stack-lambda-list-info ((var) &body body)
  `(sys:with-stack-array (,var *lambda-list-info-size* :element-type t
			  :named-structure-symbol 'lambda-list-info)
     (copy-array-portion *template-lli* 0 *lambda-list-info-size*
			 ,var 0 *lambda-list-info-size*)
     ,@body))

;;; This conses, but is convienient when you have to disassemble and
;;; reassemble a lambda list.
(defmacro with-lambda-list-destructured ((lambda-list
					   &key
					   macro-&keywords
					   macro-destructure-p
					   required optional key rest
					   allow-other-keys environment
					   body whole)
					 &body a-body
					 &environment env)
  (let ((lli (gensymbol "WITH-LAMBDA-LIST-DESTRUCTURED-LLI")))
    (once-only (lambda-list &environment env)
      `(with-stack-lambda-list-info (,lli)
	 (parse-lambda-list ,lambda-list ,lli :macro-&keywords ,macro-&keywords
			    :macro-destructure-p ,macro-destructure-p)
	 (let (
	       ,@(and required `((,required (subseq ,lambda-list 0 (lli-n-required ,lli)))))
	       ,@(and optional `((,optional (subseq (lli-optional ,lli) 0
						    (lli-n-optional ,lli)))))
	       ,@(and key `((,key (subseq (lli-key ,lli)
					  0
					  (lli-n-key ,lli)))))
	       ,@(and rest `((,rest (lli-rest ,lli))))
	       ,@(and environment `((,environment (lli-environment ,lli))))
	       ,@(and whole `((,whole (lli-whole ,lli))))
	       ,@(and body `((,body (lli-body ,lli))))
	       ,@(and allow-other-keys `((,allow-other-keys (lli-allow-other-keys ,lli)))))
	   ,@a-body)))))


#||
(defun test-des (ll)
  (with-lambda-list-destructured (ll :macro-&keywords t :macro-destructure-p t
				     :required r :optional o :key k :rest rest :body b)
    (break)))
||#

;;;--- &whole and &environment in the middle of the requireds or optionals 
;;;--- screw this up. Is that valid syntax?
(defun parse-lambda-list (ll &optional info &key macro-&keywords macro-destructure-p)
  (unless info (setq info (make-lambda-list-info)))
  (setf (lli-printed-form info) ll)
  (let ((arg-count 0))
    (multiple-value-bind (keys-p allow-other-keys)
	(map-over-lambda-list
	  ll
	  #'(lambda (item type)
	      (ecase type
		(:required (unless (lli-required info)
			     (setf (lli-required info) item))
		 (incf (lli-n-required info))
		 (incf arg-count))
		(:optional (unless (lli-optional info)
			     (setf (lli-optional info) item))
		 (incf (lli-n-optional info))
		 (incf arg-count))
		(:key      (unless (lli-key info)
			     (setf (lli-key info) item))
		 (incf (lli-n-key info)))
		(:rest     (setf (lli-rest info) (car item)))
		(:whole (setf (lli-whole info) (car item)))
		(:environment (setf (lli-environment info) (car item)))
		(:body (setf (lli-body info) (car item)))
		(:&-key
		  (lambda-list-syntax-error ll "Invalid lambda keyword ~S" (car item)))
		))
	  :macro-&keywords macro-&keywords
	  :macro-destructure-p macro-destructure-p)
      keys-p
      (setf (lli-allow-other-keys info) allow-other-keys)))
  info)

(defsubst arg-name (arg-and-default-or-arg)
  (if (listp arg-and-default-or-arg)
      (car arg-and-default-or-arg)
      arg-and-default-or-arg))

(defsubst arg-default (arg-and-default-or-arg)
  (if (listp arg-and-default-or-arg)
      (second arg-and-default-or-arg)
      nil))

(defsubst arg-and-default (arg-or-arg-and-default)
  (if (listp arg-or-arg-and-default) arg-or-arg-and-default
      (list arg-or-arg-and-default nil)))

(defsubst key-key-name (key-slot-info)
  (if (listp key-slot-info)
      (if (listp (first key-slot-info))
	  (first (first key-slot-info))
	(intern (symbol-name (first key-slot-info)) "KEYWORD"))
    (intern (symbol-name key-slot-info) "KEYWORD")))

(defsubst key-arg-name (key-slot-info)
  (if (listp key-slot-info)
      (if (listp (first key-slot-info))
	  (second (first key-slot-info))
	(first key-slot-info))
    key-slot-info))

(defsubst key-supplied-p-arg-name (key-slot-info)
  (if (listp key-slot-info)
      (third key-slot-info)))


;;; This function conses slightly when there are keywords in the argument list.
;;; Otherwise it doesn't cons at all unless :return-bindings or :apply is specified.
;;; If :apply is specified, the last element of arg-list can be referenced multiple
;;; times; it's the caller's responsibility to insert a temporary variable if required
;;; (although this could be another &key arg to match-args-to-lambda-list if needed).
;;; In :apply mode, there is no code emitted to check for correct number of arguments.
;;; ADDITIONAL-KEYWORD-ARGS are keyword arguments that do not appear directly in the
;;; argument list.  This is for DW::*META-PRESENTATION-ARGUMENTS*.
(defun match-args-to-lambda-list (ll arg-list
				  &key (return-bindings nil) (default-unsupplied-args t)
				  (apply nil)
				  additional-keyword-args)
  (declare (values bindings rest-arg-parts))
  "Given an argument list and an lambda-list,  checks that the arguments are valid.
Optionally returns a list of the form ((symbol-to-bind . value) ...).
An error is signalled if the lambda list is invalid or if the arguments don't match."
  (let ((key-info nil)
	(results nil)
	(rest-arg-symbol nil)
	(rest-of-arg-list arg-list)
	(apply-count -1))
    (multiple-value-bind (keys-p allow-other-keys)
	(map-over-lambda-list
	  ll
	  #'(lambda (item-point type)
	      (flet ((next-arg (for-effect default-form)
		       (cond ((not apply)
			      (if rest-of-arg-list (pop rest-of-arg-list) default-form))
			     ((cdr rest-of-arg-list)
			      (pop rest-of-arg-list))
			     (for-effect
			      (incf apply-count))
			     ((or (null default-form) (equal default-form `'nil))
			      `(nth ,(incf apply-count) ,(car rest-of-arg-list)))
			     (t
			      `(if (nthcdr ,(incf apply-count) ,(car rest-of-arg-list))
				   (nth ,apply-count ,(car rest-of-arg-list))
				   ,default-form)))))
		(let ((item (car item-point)))
		  (ecase type
		    (:required
		      (unless rest-of-arg-list
			(error 'too-few-arguments-to-lambda-list
			       :lambda-list ll
			       :argument-list arg-list))
		      (if return-bindings
			  (push (cons (arg-name item) (next-arg nil nil)) results)
			  (next-arg t nil)))
		    (:optional
		      (cond ((not return-bindings) (next-arg t nil))
			    ((or rest-of-arg-list default-unsupplied-args)
			     (push (cons (arg-name item) (next-arg nil (arg-default item)))
				   results))))
		    (:rest
		      (setq rest-arg-symbol (arg-name item)))
		    (:aux
		      (when return-bindings
			(push (cons (arg-name item) (arg-default item)) results)))
		    (:&-key)
		    (:key
		      (push item key-info)))))))
      ;; when we arrive here, all the required's and optionals are on the results list,
      ;; and we have the list of valid keys and the rest arg.
      (when (and return-bindings rest-arg-symbol
		 (or rest-of-arg-list default-unsupplied-args))
	(push (cons rest-arg-symbol
		    (cond ((null rest-of-arg-list)
			   nil)
			  ((not apply)
			   (cons 'list rest-of-arg-list))
			  ((cdr rest-of-arg-list)
			   (cons 'list* rest-of-arg-list))
			  (( apply-count 0)
			   `(nthcdr ,(1+ apply-count) ,(car rest-of-arg-list)))
			  (t
			   (car rest-of-arg-list))))
	      results))
      (when (and rest-of-arg-list (not apply) (null rest-arg-symbol) (not keys-p))
	(unless (and additional-keyword-args
		     (loop for (key val) on rest-of-arg-list by 'cddr
			   do (ignore val)
			   always (member key additional-keyword-args)))
	  (error 'too-many-arguments-to-lambda-list
		 :lambda-list ll
		 :argument-list arg-list)))
      (when (and keys-p rest-of-arg-list)
	(when apply
	  (error 'unsupported-keyword-arguments-in-lambda-list
		 :lambda-list ll
		 :argument-list arg-list))
	(when (not allow-other-keys)
	  (setf allow-other-keys (getf rest-of-arg-list :allow-other-keys)))
	(loop with key-slot-info
	      for (key value) on rest-of-arg-list by #'cddr do
	  (assert (symbolp key) (key) "Nonkeyword ~S found where keyword required." key)
	  (cond ((setq key-slot-info
		       (find key key-info :test #'eql :key #'key-key-name))
		 ;; its a valid key
		 (when return-bindings
		   (push (cons (key-arg-name key-slot-info) value) results)
		   (when (key-supplied-p-arg-name key-slot-info)
		     (push (cons (key-supplied-p-arg-name key-slot-info) t) results)))
		 (setq key-info (delete key-slot-info key-info)))
		(allow-other-keys)		; just skip it
		((member key additional-keyword-args)
		 ;;Just ignore these, handled specially by the caller
		 )
		(t
		 (error 'undefined-keyword-for-lambda-list
			:lambda-list ll
			:argument-list arg-list
			:keyword key :value value)))))
      ;; okay, are there any key values to be defaulted?
      (when (and return-bindings default-unsupplied-args)
	(loop for key-slot-info in key-info
	      as name = (key-arg-name key-slot-info)
	      do
	  (push (cons name (arg-default key-slot-info)) results)
	  (when (key-supplied-p-arg-name key-slot-info) 
	    (push (cons (key-supplied-p-arg-name key-slot-info) nil) results))))
      (if return-bindings
	  (nreverse results)
	  t))))

(defun check-arg-list (lambda-list arg-list)
  (match-args-to-lambda-list lambda-list arg-list))


;;; Hairy stuff for doing source-level transformations.

;--- :apply t could generate run-time number of arguments checking code, but doesn't
(defun match-source-args-to-lambda-list (ll arg-list &key
					 apply quote-arguments (default-unsupplied-args t))
  (declare (values temp-vars temp-vals arg-vars arg-vals new-arg-list))
  "Given an argument list and an lambda-list,  checks that the arguments are valid.
An error if signalled if the lambda list is invalid or if the arguments don't match."
  (when (and apply (or quote-arguments (not default-unsupplied-args)))
    (error ":APPLY doesn't mix with any other options."))
  (let* ((temp-vars nil) (temp-vals nil)
	 (new-arg-list (mapcar #'(lambda (arg)
				   (if (constantp arg)
				       arg
				       (let ((gs (gensym)))
					 (push gs temp-vars)
					 (push arg temp-vals)
					 gs)))
			       arg-list)))
    (let ((arg-vars nil) (arg-vals nil)
	  (aux-vars nil) (aux-vals nil)
	  (key-info nil)
	  (rest-arg-symbol nil)
	  (arg-list-left new-arg-list)
	  (apply-count -1))
      (flet ((next-arg (default-form quote-if-necessary)
	       (flet ((quotate (val)
			(if (and quote-if-necessary quote-arguments) `',val val)))
		 (cond ((not apply)
			(if arg-list-left (quotate (pop arg-list-left)) default-form))
		       ((cdr arg-list-left)
			(quotate (pop arg-list-left)))
		       ((or (null default-form) (equal default-form `'nil))
			`(nth ,(incf apply-count) ,(car arg-list-left)))
		       (t
			`(if (nthcdr ,(incf apply-count) ,(car arg-list-left))
			     (nth ,apply-count ,(car arg-list-left))
			     ,default-form)))))
	     (binding (var val)
	       (push var arg-vars)
	       (push val arg-vals))
	     (aux-binding (var val)
	       (push var aux-vars)
	       (push val aux-vals))
	     (keyword-symbol (symbol)
	       (intern (symbol-name symbol) (find-package "KEYWORD"))))
	;; process the non-&KEY arguments
	(multiple-value-bind (keys-p allow-other-keys)
	    (map-over-lambda-list
	      ll
	      #'(lambda (item-point type)
		  (let ((item (car item-point)))
		    (ecase type
		      (:required
			(unless arg-list-left
			  (error 'too-few-arguments-to-lambda-list
				 :lambda-list ll
				 :argument-list arg-list))
			(binding (arg-name item) (next-arg nil t)))
		      (:optional
			(when (or default-unsupplied-args
				  (not (null arg-list-left)))
			  (when (and (listp item) (not (null (rest (rest item)))))
			    (binding (third item)
				     (if apply
					 (or (not (null (cdr arg-list-left)))
					     `(not (null (nthcdr ,(1+ apply-count)
								 ,(car arg-list-left)))))
					 (not (null arg-list-left)))))
			  (binding (arg-name item) (next-arg (arg-default item) t))))
		      (:rest			; any remaining args go in here
			(setq rest-arg-symbol (arg-name item)))
		      (:aux
			(aux-binding (arg-name item) (arg-default item)))
		      (:&-key)
		      (:key
			(push (cond ((atom item)
				     (list (keyword-symbol item) item nil nil nil))
				    ((atom (first item))
				     (list (keyword-symbol (first item)) (first item)
					   (second item) (third item) nil))
				    (t
				     (list (first (first item)) (second (first item))
					   (second item) (third item) nil)))
			      key-info))))))
	  ;; when we arrive here, all the required's and optionals are on the results list,
	  ;; and we have the list of valid keys and the rest arg.
	  (when (and arg-list-left (not apply) (null rest-arg-symbol) (not keys-p))
	    (error 'too-many-arguments-to-lambda-list
		   :lambda-list ll
		   :argument-list arg-list))
	  (when rest-arg-symbol
	    (binding rest-arg-symbol
		     (if apply
			 (if nil
			     (if (cdr arg-list-left)
				 `(list* ,@arg-list-left)
				 `(nthcdr ,(1+ apply-count) ,(car arg-list-left)))
			     (if (cdr arg-list-left)
				 `(apply #'list ,@arg-list-left)
				 `(apply #'list (nthcdr ,(1+ apply-count) ,(car arg-list-left)))))
			 (cond ((null arg-list-left) nil)
			       (quote-arguments `',arg-list-left)
			       (t `(list ,@arg-list-left))))))
	  (when keys-p
	    (when apply 
	      (error 'unsupported-keyword-arguments-in-lambda-list
		     :lambda-list ll
		     :argument-list arg-list))
	    (setf key-info (nreverse key-info))
	    (setf arg-list-left
		  (loop for (key value) on arg-list-left by #'cddr
			do (if (constantp key)
			       (setf key (evaluate-constant key))
			       (error 'hard-keyword-in-lambda-list
				      :lambda-list ll :argument-list arg-list))
			   (unless (symbolp key)
			     (error 'hard-keyword-in-lambda-list
				    :lambda-list ll :argument-list arg-list))
			collect key
			collect value))
	    (when (not allow-other-keys)
	      (let ((value (getf arg-list-left :allow-other-keys)))
		(cond ((not (constantp value))
		       (error 'hard-keyword-in-lambda-list
			      :lambda-list ll :argument-list arg-list))
		      ((evaluate-constant value)
		       (setf allow-other-keys t)))))
	    (loop for (key value) on arg-list-left by #'cddr do
	      (let ((key-entry (assoc key key-info)))
		(cond (key-entry
		       (unless (fifth key-entry)
			 (setf (third key-entry) value)
			 (setf (fifth key-entry) t)))
		      (t
		       (unless (or allow-other-keys
				   (eq key :allow-other-keys))
			 (error 'undefined-keyword-for-lambda-list
				:lambda-list ll
				:argument-list arg-list
				:keyword key :value value))))))
	    ;; okay, are there any key values to be defaulted?
	    (when (or default-unsupplied-args
		      (not (null key-info)))
	      (loop for (keyword var value supplied-p-var supplied-p) in key-info
		    do
		(ignore keyword)
		(binding var (if (and quote-arguments supplied-p) `',value value))
		(when supplied-p-var
		  (binding supplied-p-var supplied-p)))))
	  ;;;
	  (values (nreverse temp-vars) (nreverse temp-vals)
		  (nconc (nreverse arg-vars) (nreverse aux-vars))
		  (nconc (nreverse arg-vals) (nreverse aux-vals))
		  new-arg-list))))))

;;;; More utilities for lambda lists

;Given a lambda-list, get a list of expressions that can be used as arguments
;to call the function when inside the function.  APPLY flag is true if last
;in the list is really a list of arguments.  Third value is an updated
;LAMBDA-LIST (needed to insert an &REST argument when there are &KEY arguments).
(defun lambda-list-arguments (lambda-list)
  (declare (values arguments apply lambda-list))
  (let ((key-start (member '&key lambda-list)))
    (when (and key-start (not (member '&rest lambda-list)))
      (setq lambda-list (append (ldiff lambda-list key-start)
				`(&rest ,(gensym))
				key-start))))
  (let ((arguments nil)
	(apply nil))
    (map-over-lambda-list lambda-list
			  #'(lambda (item type)
			      (when (member type '(:required :optional :rest))
				(setq item (car item))
				(cond ((atom item))
				      ((atom (car item)) (setq item (car item)))
				      (t (setq item (second (car item)))))
				(push item arguments)
				(when (eq type ':rest)
				  (setq apply item)))))
    (values (nreverse arguments) apply lambda-list)))

;Remove one argument from a lambda-list
(defun remove-from-lambda-list (arg lambda-list)
  (remove arg lambda-list
	  :key #'(lambda (item)
		   (cond ((atom item) item)
			 ((atom (car item)) (car item))
			 (t (second (car item)))))))

;Remove the first n arguments from a lambda-list
(defun remove-arguments-from-lambda-list (n lambda-list)
  (let ((prefix nil))
    (loop until (or (zerop n) (null lambda-list))
	  as item = (pop lambda-list) do
      (if (member item lambda-list-keywords)
	  (push item prefix)
	  (decf n)))
    (nreconc prefix lambda-list)))

(defvar *print-lambda-keyword-style* '(nil :italic nil))
(defvar *print-lambda-keyword-case* :downcase)
(defvar *print-lambda-type-style* '(nil :italic nil))
(defvar *print-lambda-type-case* :downcase)

(defun print-lambda-list (lambda-list stream &key brief error-p (dotted-is-&rest t)
						  (parenthesis t) types)
  (let ((*print-abbreviate-quote* 'si:backquote)
	(*print-pretty* t)			1;not :data, or something else
0	(print-space nil)
	(state 'required))
    (condition-bind ((warning #'(lambda (error)
				  (and (dbg:proceed-type-p error :no-action)
				       (sys:proceed error :no-action)))))
      (condition-case-if (not error-p) ()
	   (labels ((print-or-recurse (item &optional no-space)
		      (unless no-space (space))
		      (if (symbolp item)
			  (print-symbol item)
			  (print-lambda-list item stream :brief brief :error-p error-p
					     :types types)))
		    (print-type (item)
		      (let ((type (cadr (assoc item types)))
			    (*print-case* *print-lambda-type-case*))
			(when type
			  (with-character-style (*print-lambda-type-style* stream)
			    (format stream "<~a>"  type)))))
		    (print-symbol (item)
		      (if (lt:global-special-variable-p item)
			  (prin1 item stream)
			  (princ item stream))
		      (print-type item))
		    (print-lambda-keyword (keyword)
		      (space)
		      (with-character-style (*print-lambda-keyword-style* stream)
			(let ((*print-case* *print-lambda-keyword-case*))
			  (prin1 keyword stream))))
		    (space ()
		      (if print-space (write-char #\space stream)
			  (setq print-space t))))
	     (when parenthesis
	       (write-char #\( stream))
	     (map-over-lambda-list
	       lambda-list
	       #'(lambda (list-point type)
		   (case type
		     (:required (print-or-recurse (car list-point)))
		     (:body
		       (print-lambda-keyword '&body)
		       (print-or-recurse (car list-point)))
		     (:rest
		       (print-lambda-keyword '&rest)
		       (print-or-recurse (car list-point)))
		     (:whole
		       (print-lambda-keyword '&whole)
		       (print-or-recurse (car list-point)))
		     (:environment
		       (print-lambda-keyword '&environment)
		       (print-or-recurse (car list-point)))
		     (:allow-other-keys
		       (print-lambda-keyword '&allow-other-keys))
		     ((:optional :key)
		      (if (eq type ':optional)
			  (when (neq state 'optional)
			    (setq state 'optional)
			    (print-lambda-keyword '&optional))
			  (when (neq state 'key)
			    (setq state 'key)
			    (print-lambda-keyword '&key)))
		      (destructure-optional-or-key (list-point type arg default supplied key)
			(space)
			(if (or default (and (not brief) supplied))
			    (progn
			      (write-char #\( stream)
			      (if (eq type ':optional)
				  (print-or-recurse arg t)
				  1;; key
0				  (cond ((or brief (string= (symbol-name arg)
							    (symbol-name key)))
					 (prin1 key stream)
					 (print-type arg))
					(t 
					 (write-char #\( stream)
					 (prin1 key stream)
					 (write-char #\space stream)
					 (print-or-recurse arg t)
					 (write-char #\) stream))))
			      (write-char #\space stream)
			      (prin1 default stream)
			      (when (and (not brief) supplied)
				(write-char #\space stream)
				(print-or-recurse supplied t))
			      (write-char #\) stream))
			    (if (eq type ':optional)
				(print-or-recurse arg t)
				(prin1 key stream)
				(print-type arg)))))
		     (:aux
		       (unless brief
			 (unless (eq state 'aux)
			   (print-lambda-keyword '&aux)
			   (setq state 'aux))
			 (let ((whatsit (car list-point)))
			   (if (symbolp whatsit)
			       (print-or-recurse whatsit)
			       (write-char #\( stream)
			       (prin1 (car whatsit) stream)
			       (write-char #\space stream)
			       (prin1 (second whatsit))
			       (write-char #\) stream)))))
		     (:dotted-tail
		       (if (not dotted-is-&rest)
			   (format stream " . ")
			 (print-lambda-keyword '&rest)
			 (space))
		       (print-symbol list-point))
		     (:&-key
		       (print-lambda-keyword (car list-point)))	1;the &thing itself
0		     ))
	       :macro-&keywords t
	       :macro-destructure-p t)
	     ;; map-over-lambda-list didn't show trailing lambda-list-keywords
	     ;; so print the ones that are meaningful in the trailing position,
	     ;; but watch out for dotted lists
	     (loop for i from 1
		   as list = (last lambda-list i)
		   as item = (car list)
		   while (member item '(&key &allow-other-keys))
		   do (print-lambda-keyword item)
		   until (eq list lambda-list))
	     (when parenthesis
	       (write-char #\) stream)))
	 (lambda-list-syntax-error		1;someone declared a joke
0	   (fresh-line stream)
	   (format stream "~S" lambda-list))))))
