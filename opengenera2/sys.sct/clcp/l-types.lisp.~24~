;;; -*- Mode: LISP; Package: Common-lisp-internals; Syntax:Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; L-machine type support.

(DEFINE-TYPEP-FUNCTION DATA-TYPE (OBJECT DTP)
  (EQ (DATA-TYPE OBJECT) DTP))

(DEFINE-TYPE-PRINTER DATA-TYPE (STREAM DTP)
  (FORMAT STREAM "a ~A" DTP))

#+3600
(DEFINE-TYPEP-EXPANDER DATA-TYPE (OBJECT DTP)
  `(= (SYS:%DATA-TYPE ,OBJECT) ,DTP))

#+IMACH
(DEFINE-TYPEP-EXPANDER DATA-TYPE (OBJECT DTP)
  `(TYPE-MEMBER ,OBJECT ,DTP))

;;;

(DEFINE-TYPE-WITH-FUNCTION FIXNUM ZL:FIXNUMP ()
  '(INTEGER #.MOST-NEGATIVE-FIXNUM #.MOST-POSITIVE-FIXNUM))

;;; BIGNUM needs subtypep for INTEGER, else default
;;; BIGP defined in [Q/L]CONS.  Needs a name change?
(DEFINE-TYPE-WITH-FUNCTION BIGNUM ZL:BIGP ()
  '(OR (INTEGER * (#.MOST-NEGATIVE-FIXNUM))
       (INTEGER (#.MOST-POSITIVE-FIXNUM) *)))

(DEFTYPE SHORT-FLOAT (&OPTIONAL LOW-LIMIT HIGH-LIMIT)
  "Genera's SHORT-FLOAT type is identical to its SINGLE-FLOAT type."
  (IF (AND (EQ LOW-LIMIT '*) (EQ HIGH-LIMIT '*))
      'SINGLE-FLOAT
      `(SINGLE-FLOAT ,LOW-LIMIT ,HIGH-LIMIT)))

(DEFINE-NUMBER-TYPEP-AND-EXPANDER SINGLE-FLOAT SYS:SINGLE-FLOAT-P
				  "a single precision floating point number")

(DEFINE-NUMBER-TYPEP-AND-EXPANDER DOUBLE-FLOAT SI:DOUBLE-FLOAT-P
				  "a double precision floating point number")

(DEFTYPE LONG-FLOAT (&OPTIONAL LOW-LIMIT HIGH-LIMIT)
  "Genera's LONG-FLOAT type is identical to its DOUBLE-FLOAT type."
  (IF (AND (EQ LOW-LIMIT '*) (EQ HIGH-LIMIT '*))
      'DOUBLE-FLOAT
      `(DOUBLE-FLOAT ,LOW-LIMIT ,HIGH-LIMIT)))

(DEFINE-TYPE-WITH-FUNCTION FLOAT FLOATP (&OPTIONAL LOW-LIMIT HIGH-LIMIT)
  (IF (AND (EQ LOW-LIMIT '*) (EQ HIGH-LIMIT '*))
      '(OR SINGLE-FLOAT DOUBLE-FLOAT)
      `(OR (SINGLE-FLOAT ,LOW-LIMIT ,HIGH-LIMIT)
	   (DOUBLE-FLOAT ,LOW-LIMIT ,HIGH-LIMIT))))

(DEFINE-NUMBER-TYPEP-AND-EXPANDER FLOAT FLOATP "a floating point number")

(DEFINE-COERCION FLOAT (OBJECT &OPTIONAL LOW-LIMIT HIGH-LIMIT)
  (DECLARE (IGNORE LOW-LIMIT HIGH-LIMIT))
  (FLOAT OBJECT))

(DEFINE-COERCION SINGLE-FLOAT (OBJECT &OPTIONAL LOW-LIMIT HIGH-LIMIT)
  (DECLARE (IGNORE LOW-LIMIT HIGH-LIMIT))
  (ZL:FLOAT OBJECT))

(DEFINE-COERCION DOUBLE-FLOAT (OBJECT &OPTIONAL LOW-LIMIT HIGH-LIMIT)
  (DECLARE (IGNORE LOW-LIMIT HIGH-LIMIT))
  (ZL:DFLOAT OBJECT))

;;; Know about the subtypes of FLOAT
;;; This doesn't make us know that these are an -exhaustive- partition of FLOAT
;;; Reminder for the CL type neophyte:  (subtypep 'single-float 'double-float) => NIL T
;;; (for Genera) because they're disjoint.
(DEFINE-SUBTYPEP-FUNCTION (SINGLE-FLOAT FLOAT
			   DOUBLE-FLOAT FLOAT
			   SINGLE-FLOAT SINGLE-FLOAT
			   DOUBLE-FLOAT DOUBLE-FLOAT)
			  (IGNORE IGNORE (&OPTIONAL LOW1 HIGH1)
			   IGNORE IGNORE (&OPTIONAL LOW2 HIGH2))
  (IF (AND (OR (EQ LOW2 '*)
	       (AND (NEQ LOW1 '*)
		    (FUNCALL (IF (AND (LISTP LOW2) (ATOM LOW1)) #'< #')
			     (IF (LISTP LOW2) (CAR LOW2) LOW2)
			     (IF (LISTP LOW1) (CAR LOW1) LOW1))))
	   (OR (EQ HIGH2 '*)
	       (AND (NEQ HIGH1 '*)
		    (FUNCALL (IF (AND (LISTP HIGH2) (ATOM HIGH1)) #'> #')
			     (IF (LISTP HIGH2) (CAR HIGH2) HIGH2)
			     (IF (LISTP HIGH1) (CAR HIGH1) HIGH1)))))
      (VALUES T T)
      (VALUES NIL T)))


;;; Function: TYPE-OF

;;; In the absense of more specific information (such as structures or instances), this
;;; table is used by TYPE-OF function from the data-type of the object.
(DEFVAR *DATA-TYPE-TYPE-OF* (MAKE-ARRAY (LENGTH SYS:*DATA-TYPES*)))

;;; Associate DATA-TYPE and TYPE for TYPE-OF
(DEFUN ASSOCIATE-DATA-TYPE-AND-TYPE (DATA-TYPE TYPE)
  (SETF (AREF *DATA-TYPE-TYPE-OF* DATA-TYPE) TYPE)
  #+3600
  (WHEN ( #o20 DATA-TYPE #o57)
    (LOOP FOR DATA-TYPE FROM (LOGAND DATA-TYPE #o-20) REPEAT #o20
	  DO (SETF (AREF *DATA-TYPE-TYPE-OF* DATA-TYPE) TYPE))))


(ASSOCIATE-DATA-TYPE-AND-TYPE #+3600 SYS:DTP-FIX #+IMACH SYS:DTP-FIXNUM 'FIXNUM)
(ASSOCIATE-DATA-TYPE-AND-TYPE #+3600 SYS:DTP-FLOAT #+IMACH SYS:DTP-SINGLE-FLOAT 'SINGLE-FLOAT)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-NIL 'NULL)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-LIST 'CONS)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-SYMBOL 'SYMBOL)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-CHARACTER 'CHARACTER)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-LOCATIVE 'LOCATIVE)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-LOGIC-VARIABLE 'UNBOUND-LOGIC-VARIABLE)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-COMPILED-FUNCTION 'COMPILED-FUNCTION)
(ASSOCIATE-DATA-TYPE-AND-TYPE #+3600 SYS:DTP-CLOSURE #+IMACH SYS:DTP-DYNAMIC-CLOSURE
			      'DYNAMIC-CLOSURE)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-GENERIC-FUNCTION 'GENERIC-FUNCTION)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-EVEN-PC 'COMPILED-FUNCTION-PC)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-ODD-PC 'COMPILED-FUNCTION-PC)

#+IMACH(PROGN
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-SMALL-RATIO 'SMALL-RATIO)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-BIG-RATIO 'BIG-RATIO)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-COMPLEX 'COMPLEX)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-BIGNUM 'BIGNUM)
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-PHYSICAL-ADDRESS 'PHYSICAL-ADDRESS)
;(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-STRING 'STRING) -- might be a named structure
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-DOUBLE-FLOAT 'DOUBLE-FLOAT)
;; For Rev 2 chips
(ASSOCIATE-DATA-TYPE-AND-TYPE SYS:DTP-EXTERNAL-VALUE-CELL-POINTER 'UNBOUND-LOGIC-VARIABLE)
);End #+IMACH

;; Too bad CLtL doesn't specify what this should return...
(DEFUN TYPE-OF (OBJECT)
  (LET* ((DT (%DATA-TYPE OBJECT))
	 (TYPE-NAME (AREF *DATA-TYPE-TYPE-OF* DT)))
    (IF NIL
	'KEYWORD				;"Can you be more specific?"
      (OR TYPE-NAME				;"Yes, I understand."
	  (SELECT DT
	    (DTP-INSTANCE
	     (LET ((CLASS-OR-FLAVOR (FLAVOR-NAME (%INSTANCE-FLAVOR OBJECT))))
	       (IF (TYPEP CLASS-OR-FLAVOR 'SYMBOL)
		   CLASS-OR-FLAVOR		;It's a Flavor
		   (CLOS-INTERNALS:CLASS-NAME-FOR-TYPE-OF CLASS-OR-FLAVOR))))
	    (DTP-LEXICAL-CLOSURE
	     (SELECT (LEXICAL-CLOSURE-SUBTYPE OBJECT)
	       (LEXICAL-CLOSURE-SUBTYPE-LEXICAL-CLOSURE 'LEXICAL-CLOSURE)
	       (LEXICAL-CLOSURE-SUBTYPE-FUNCALLABLE-INSTANCE
		(CLOS-INTERNALS:CLASS-NAME-FOR-TYPE-OF (CLOS:CLASS-OF OBJECT)))
	       (OTHERWISE T)))
	    ((DTP-ARRAY)
	     (COND ((NAMED-STRUCTURE-P OBJECT))
		   #+3600
		   ((STRINGP OBJECT) 'STRING)
		   ;;--- Do this in Release 8
		   #+++IGNORE ((= (ARRAY-RANK OBJECT) 1) 'VECTOR)
		   (T 'ARRAY)))
	    #+IMach
	    ((DTP-STRING)
	     (OR (NAMED-STRUCTURE-P OBJECT) 'STRING))
	    #+3600
	    (DTP-EXTENDED-NUMBER
	     (SELECT (SYS:%P-LDB-OFFSET SYS:%%HEADER-SUBTYPE-FIELD OBJECT 0)
	       (SYS:%HEADER-TYPE-BIGNUM 'BIGNUM)
	       (SYS:%HEADER-TYPE-RATIONAL 'RATIO)
	       (SYS:%HEADER-TYPE-COMPLEX 'COMPLEX)
	       (SYS:%HEADER-TYPE-DOUBLE 'DOUBLE-FLOAT)
	       (OTHERWISE 'T)))
	    (OTHERWISE 'T))))))
