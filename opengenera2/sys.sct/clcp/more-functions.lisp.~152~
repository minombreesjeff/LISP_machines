;;; -*- Mode: LISP; Package: Common-lisp-internals; Lowercase: T; Syntax: Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Functions loaded after the type system


;;; Chapter 24 

(defun lisp-implementation-type ()
  (declare lt:(side-effects simple reducible))
  "Symbolics Common Lisp")

(defun lisp-implementation-version ()
  (declare lt:(side-effects reader))
  (multiple-value-bind (major minor)
      (sct:get-system-version "System")
    #+3600
    (multiple-value-bind (string number)
	(si:microcode-description)
      (format nil "System ~D.~D, ~A microcode ~D"
	      major minor string number))
    #+IMach
    (format nil "System ~D.~D, Ivory revision ~A"
	    major minor (si:ivory-revision-name))))

(defun machine-type ()
  (declare lt:(side-effects reader))
  (format nil "Symbolics ~A" (si:machine-model)))

;;--- This is sort of the wrong place to put this...
#+IMach
(defun machine-version ()
  (format nil "Ivory revision ~A" (si:ivory-revision-name)))

#+3600
(defun machine-version ()
  (declare lt:(side-effects reader))
  (with-output-to-string (*standard-output*)
    (si:show-configuration)))

(defun machine-instance ()
  (declare lt:(side-effects reader))
  (send net:*local-host* :name))

(defun software-type ()
  (declare lt:(side-effects simple reducible))
  "Lisp Machine")

(defun software-version ()
  (declare lt:(side-effects reader))
  (sct:system-version-info))

(defun short-site-name ()
  (declare lt:(side-effects reader))
  (string (send net:*local-site* :name)))

(defun long-site-name ()
  (declare lt:(side-effects reader))
  (send net:*local-site* :pretty-name))

;;; Chapter 25

;;; Upward compatible COMPILE-FILE and LOAD, with some extensions that were in
;;; the Laser edition then got flushed from the Mary Poppins edition.

(defvar future-common-lisp:*compile-verbose* t)
(defvar future-common-lisp:*compile-print* nil)
(defvar *compile-file-set-default-pathname* t)

(defun compile-file (input-file &key output-file package load
		     (verbose future-common-lisp:*compile-verbose*)
		     (print future-common-lisp:*compile-print*)
		     (set-default-pathname *compile-file-set-default-pathname*))
  (setq input-file (pathname input-file *load-pathname-defaults*))
  (when verbose
    (format t "~&; Compiling file ~A~@[ to ~A~]...~%" input-file output-file))
  (when print
    (format t "~&; The :PRINT option to COMPILE-FILE is not yet implemented.~%"))
  (when output-file 
    (setq output-file (pathname output-file input-file)))
  (setq output-file (compiler:compile-file input-file output-file
					   package (not set-default-pathname)))
  (when load
    (load output-file :set-default-pathname set-default-pathname))
  output-file)

;;; Debugging/Metering Facilities

(defflavor time-usage-table
	(
	 (region-free-pointers-before (make-array sys:number-of-regions))
	 gc-generation-number-before
	 full-time-before
	 sequence-break-time-before
	 page-fault-time-before
	 page-idle-time-before
	 create-page-time-before
	 other-storage-time-before
	 page-fetches-before
	 other-page-faults-before
	 ;;
	 (region-free-pointers-after (make-array sys:number-of-regions))
	 gc-generation-number-after
	 full-time-after
	 sequence-break-time-after
	 page-fault-time-after
	 page-idle-time-after
	 create-page-time-after
	 other-storage-time-after
	 page-fetches-after
	 other-page-faults-after
	 )
	()
  (:constructor make-time-usage-table)
  (:functions time-describe-consing))

(defmethod (snapshot-before time-usage-table) ()
  (without-interrupts
    (setf gc-generation-number-before %gc-generation-number)
    (setf sequence-break-time-before (total-interrupt-time))
    (setf page-fault-time-before si:*ms-time-page-fault*)
    (setf page-idle-time-before si:*ms-time-page-idle-wait*)
    (setf create-page-time-before (+ si:*ms-time-create-pages*
				     si:*ms-time-destroy-pages*))
    (setf other-storage-time-before (+ si:*ms-time-user-prefetch-pages*
				       si:*ms-time-user-flush-pages*
				       si:*ms-time-wiring-and-unwiring-pages*))
    (setf page-fetches-before si:*count-page-fetches*)
    (setf other-page-faults-before (+ si:*count-map-misses*
				      si:*count-write-first-faults*
				      si:*count-inhibited-read-only-faults*
				      si:*count-flushable-page-faults*
				      si:*count-prefetched-page-faults*
				      si:*count-busy-page-faults*))
    ;;
    (multiple-value-bind (low high) (time:full-microsecond-time)
      (setf full-time-before (dpb high (byte 32 32)
				  (dpb low (byte 32 0)
				       0))))
    (si:update-cons-cache-region-free-pointers)
    (replace region-free-pointers-before si:*region-free-pointer*)
    nil))

(defmethod (snapshot-after time-usage-table) ()
  (without-interrupts
    (si:update-cons-cache-region-free-pointers)
    (replace region-free-pointers-after si:*region-free-pointer*)
    (multiple-value-bind (low high) (time:full-microsecond-time)
      (setf full-time-after (dpb high (byte 32 32)
				 (dpb low (byte 32 0)
				      0))))
    ;;
    (setf gc-generation-number-after %gc-generation-number)
    (setf sequence-break-time-after (total-interrupt-time))
    (setf page-fault-time-after si:*ms-time-page-fault*)
    (setf page-idle-time-after si:*ms-time-page-idle-wait*)
    (setf create-page-time-after (+ si:*ms-time-create-pages*
				    si:*ms-time-destroy-pages*))
    (setf other-storage-time-after (+ si:*ms-time-user-prefetch-pages*
				      si:*ms-time-user-flush-pages*
				      si:*ms-time-wiring-and-unwiring-pages*))
    (setf page-fetches-after si:*count-page-fetches*)
    (setf other-page-faults-after (+ si:*count-map-misses*
				     si:*count-write-first-faults*
				     si:*count-inhibited-read-only-faults*
				     si:*count-flushable-page-faults*
				     si:*count-prefetched-page-faults*
				     si:*count-busy-page-faults*))
    nil))

(defmethod (time-internal time-usage-table) (before-clock after-clock form describe-consing)
  (si:inhibit-gc-flips 
    (snapshot-after self)
    (flet ((ms-to-sec (ms) (/ (* 1024 ms) 1000000)))
      (let ((stream *trace-output*)
	    (elapsed-time (- full-time-after full-time-before)))
	(when (and (< elapsed-time 1_30) (not (null before-clock)))
	  (setf elapsed-time (%32-bit-difference after-clock before-clock)))
	;;
	(fresh-line stream)
	(write-string "Evaluation of " stream)
	(write form :escape t :level 2 :length 5 :stream stream)
	(format stream " took ~,6F seconds of elapsed time including:"
		(/ elapsed-time 1000000))
	(format stream "~%  ~,3F seconds processing sequence breaks,"
		(ms-to-sec
		  (%32-bit-difference sequence-break-time-after sequence-break-time-before)))
	(let ((page-fetches (%32-bit-difference page-fetches-after page-fetches-before))
	      (other-page-faults
		(%32-bit-difference other-page-faults-after other-page-faults-before))
	      (page-fault-time
		(%32-bit-difference page-fault-time-after page-fault-time-before))
	      (create-page-time
		(%32-bit-difference create-page-time-after create-page-time-before))
	      (other-storage-time
		(%32-bit-difference other-storage-time-after other-storage-time-before)))
	  (format stream "~%  ~,3F seconds in the storage system ~
                           (including ~,3F seconds waiting for pages):"
		  (ms-to-sec (+ page-fault-time create-page-time other-storage-time))
		  (ms-to-sec (%32-bit-difference page-idle-time-after page-idle-time-before)))
	  (format stream "~%    ~,3F seconds processing ~D page fault~:P ~
                             including ~D~:* fetch~[es~;~:;es~],"
		  (ms-to-sec page-fault-time)
		  (+ page-fetches other-page-faults) page-fetches)
	  (format stream "~%    ~,3F seconds in creating and destroying pages, and"
		  (ms-to-sec create-page-time))
	  (format stream "~%    ~,3F seconds in miscellaneous storage system tasks."
		  (ms-to-sec other-storage-time)))
	(time-describe-consing stream describe-consing)
	nil))))

(defun-in-flavor (time-describe-consing time-usage-table) (stream verbose)
  (unless (= gc-generation-number-before gc-generation-number-after)
    (fresh-line stream)
    (write-string "The garbage collector has flipped; so no consing was measured." stream)
    (return-from time-describe-consing nil))
  ;;
  (si:map-over-areas
    #'si:area-predicate-all-areas
    #'(lambda (area)
	(let ((list-cons 0)
	      (structure-cons 0)
	      (stack-cons 0))
	  (si:map-over-regions-of-area
	    area #'(lambda (region)
		     (and (aref region-free-pointers-after region)
			  (aref region-free-pointers-before region)))
	    #'(lambda (region)
		(let ((space (ldb sys:%%region-space-type (si:region-bits region)))
		      (cons (- (aref region-free-pointers-after region)
			       (aref region-free-pointers-before region))))
		  (cond (( space %region-space-new)
			 (incf stack-cons cons))
			((= (ldb sys:%%region-representation-type (si:region-bits region))
			    %region-representation-type-list)
			 (incf list-cons cons))
			(t
			 (incf structure-cons cons))))))
	  (unless (and (zerop list-cons) (zerop structure-cons) (zerop stack-cons))
	    (fresh-line stream)
	    (unless (zerop list-cons)
	      (format stream "~:D list" list-cons))
	    (unless (zerop structure-cons)
	      (unless (zerop list-cons)
		(write-string ", " stream))
	      (format stream "~:D structure" structure-cons))
	    (unless (zerop stack-cons)
	      (unless (and (zerop list-cons) (zerop structure-cons))
		(write-string ", " stream))
	      (format stream "~:D stack" stack-cons))
	    (format stream " word~P consed in ~A."
		    (+ list-cons structure-cons stack-cons) (sys:area-name area))))))
  ;;
  (when verbose
    (si:map-over-areas
      #'si:area-predicate-areas-with-objects
      #'(lambda (area)
	  (si:map-over-regions-of-area
	    area #'(lambda (region)
		     (and (aref region-free-pointers-after region)
			  (aref region-free-pointers-before region)))
	    #'(lambda (region)
		(let ((space (ldb sys:%%region-space-type (si:region-bits region)))
		      (cons (- (aref region-free-pointers-after region)
			       (aref region-free-pointers-before region))))
		  (when (and (= space %region-space-new) (plusp cons))
		    (format stream
			    "~%Consed in ~[list~:;structure~] region of ~A~
					~:[~; (at #o~O)~]:"
			    (ldb sys:%%region-representation-type (si:region-bits region))
			    (sys:area-name area)
			    (eq verbose :address)
			    (+ (si:region-origin region) (aref region-free-pointers-before region)))
		    (loop for p = (+ (si:region-origin region) (aref region-free-pointers-before region))
				then (+ p s)
			  with (s h)
			  do (multiple-value-setq (h nil s)
			       (%find-structure-extent p))
			  do (write-string "  " stream)
			     (write h :stream stream :level 3 :length 8 :pretty t)
			  while (plusp (decf cons s))))))))))
  nil)

(compile-flavor-methods time-usage-table)

(defresource time-usage-table ()
  :constructor (make-time-usage-table))

(defun time-start (usage-table)
  (snapshot-before usage-table))

(defun time-finish (form usage-table start-time end-time describe-consing)
  (time-internal usage-table start-time end-time form describe-consing))

(defun time-end (form table describe-consing)
  (time-finish form table nil nil describe-consing))

;;;

(defun dribble (&optional pathname editor-p)
  (if pathname
      (zl:dribble-start pathname editor-p)
      (zl:dribble-end)))

(defvar *apropos-list*)

(defun apropos (string &optional package (do-inherited-symbols t) do-packages-used-by)
  ;; Bind special variables used by si:apropos-1
  (let ((si:apropos-substring (string string))
	(si:return-list nil))
    (declare (special si:apropos-substring si:return-list))
    (cond ((null package)
	   (format t "~&Searching all packages for symbols containing the substring ~S."
		   si:apropos-substring)
	   (zl:mapatoms-all #'si:apropos-1))
	  (t
	   (setq package (pkg-find-package package :error *package* (si:current-lisp-syntax)))
	   (format t "~&Searching the package ~A~:[~;, including inherited symbols~]~
			~:[~; and~%packages that inherit from ~3:*~A~2*~]~2:*~:[ ~;, ~]~*~
			for symbols containing the substring ~S."
		   package do-inherited-symbols do-packages-used-by si:apropos-substring)
	   (zl:mapatoms #'si:apropos-1 package do-inherited-symbols)
	   (when do-packages-used-by
	     (dolist (p (si:pkg-used-by-list package))
	       (zl:mapatoms #'si:apropos-1 p nil)))))
    (setq *apropos-list* si:return-list)
    (format t "~&Done; the value of ~S is a list of the symbols found." '*apropos-list*)
    (values)))

(defun apropos-list (string &optional package do-packages-used-by)
  (let ((list nil))
    (cond ((null package)
	   (do-all-symbols (symbol)
	     (when (string-search string (zl:get-pname symbol))
	       (pushnew symbol list))))
	  (t
	   (setq package (pkg-find-package package :error *package* (si:current-lisp-syntax)))
	   (do-symbols (symbol package)
	     (when (string-search string (zl:get-pname symbol))
	       (pushnew symbol list)))
	   (when do-packages-used-by
	     (dolist (p (si:pkg-used-by-list package))
	       (do-local-symbols (symbol p)
		 (when (string-search string (zl:get-pname symbol))
		   (pushnew symbol list)))))))
    list))


;;; Time Facilities

;; If you only want the current year for the purpose of defaulting a time argument,
;; use this function.  It is careful to work when the time database isn't initialized.
(defun get-current-year-for-defaulting ()
  (multiple-value-bind (nil nil nil nil nil this-year nil nil)
      (get-decoded-time)
    (or this-year
	(loop for (host time) in si:cold-boot-history
	      do (ignore host)
		 (multiple-value-bind (nil nil nil nil nil this-year nil nil)
		     (decode-universal-time time)
		   (when this-year
		     (return this-year))))
	(error "Can't determine the current year."))))

(defun encode-universal-time (seconds minutes hours day month year &optional timezone)
  (when (<= 0 year 99)
    (let ((this-year (1- (get-current-year-for-defaulting))))
      (multiple-value-bind (nil residue)
	  (round (- this-year year) 100)
	(setf year (- this-year residue)))))
  (when (< year 1000)
    (error "Can't deal with years before 1000 CE."))
  (time:encode-universal-time seconds minutes hours day month year timezone))

;;milliseconds take 3 weeks to overflow most-positive-fixnum on 3600 (2 hours on LM-2)
;;977 is 10^6 / 2^10
(defparameter internal-time-units-per-second 977)

;;Get elapsed time in almost-milliseconds since an arbitrary origin
;;An internal-time unit is 1024 microseconds, i.e. shift the microsecond clock right 10 bits
(defun get-internal-real-time ()
  (multiple-value-bind (low high)
      (time:full-microsecond-time)
    (+ (lsh low -10) (ash high (- 32 10)))))

(defun total-interrupt-time ()
  #+3600 si:*ms-time-sequence-break*
  #+imach (with-block-registers (1)
	    (setf (sys:%block-register 1) cli::*interrupt-mode-meters*)
	    (+ (lsh (sys:%block-read 1 :fixnum-only t) -10)
	       (lsh (sys:%block-read 1 :fixnum-only t) -10)
	       (lsh (sys:%block-read 1 :fixnum-only t) -10)
	       (lsh (sys:%block-read 1 :fixnum-only t) -10)
	       (lsh (sys:%block-read 1 :fixnum-only t) -10)
	       (lsh (sys:%block-read 1 :fixnum-only t :prefetch nil) -10)
	       (lsh (sys:%block-read 1 :fixnum-only t :prefetch nil) -10))))

;;Makes no attempt to distinguish between time used by different processes, which
;;might be undesirable anyway.
;;---This ought to subtract out idle time, if the scheduler metered that.
(defun get-internal-run-time ()
  (without-interrupts
    ;; We compute the storage system time first so that any skew between that and real
    ;; time is in a reasonable direction (no negative paging times!).
    ;; The choice of what to subtract here is somewhat arbitrary.
    (let ((ss-time
	    (+ (total-interrupt-time)		; Total time spent in sequence breaks
	       si:*ms-time-page-fault*		; Total time spent in page fault
	       si:*ms-time-create-pages*	; Total time spent creating CONS pages
	       si:*ms-time-user-prefetch-pages*	; Total time spent in explicit prefetching
	       si:*ms-time-destroy-pages*	; Total time spent freeing swap space
	       si:*ms-time-wiring-and-unwiring-pages*	; Total time spent wiring and unwiring pages
	       si:*ms-time-user-flush-pages*	; Total time spend flushing pages
	       )))
      (- (get-internal-real-time) ss-time))))

;;; Chapter 6

;;; An SCL extension, analogous to the ZL function of the same name, but false for NIL
(defsubst nlistp (x)
  (declare lt:(replicability many-times))
  (declare lt:(side-effects simple reducible))
  (not (listp x)))

;;; Chapter 11

;;; Kludges for compilation of Common Lisp package functions
;;; I think this whole thing is a bad idea, but it's in the manual so
;;; we have to implement it
;;; Replace references to symbols by explicit calls to INTERN to deal with
;;; the case where the symbol will be represented in the BIN file, after
;;; executing this form at compile time, in a way that won't retrieve the
;;; same symbol at load time, before executing this form.

(defun (shadow compiler:top-level-form) (form)
  (eval form)
  (if (compiler:constant-form-p (second form))
      (let ((symbols (compiler:constant-evaluator (second form))))
	`(shadow ,(if (atom symbols)
		      (string symbols)
		      `',(mapcar #'string symbols))
		 ,@(nthcdr 2 form)))
      form))

(defun generate-symbol-intern (symbol)
  `(intern ,(symbol-name symbol)
	   (sys:find-package-for-syntax
	     ,(sys:package-name-for-syntax (symbol-package symbol) :common-lisp)
	     :common-lisp)))

;This kludge works around the most common reason why this whole feature is
;bankrupt (namely the environment in which the form is dumped is not precisely
;the environment into which it is loaded, because it may have already been executed).
;If the symbol is being imported to or exported from the current package, try to
;prevent dumping an external-prefix reference to it before it has been exported
;(happens when IN-PACKAGE was previously used to screw up the compile-time package 
;structure).
(defun import-export-compiler-top-level-form (form)
  (eval form)
  (destructuring-bind (fn arg &rest opt) form
    (if (compiler:constant-form-p arg)
	(let ((symbols (compiler:constant-evaluator arg)))
	  `(,fn ,(if (atom symbols)
		     (generate-symbol-intern symbols)
		     `(list ,@(mapcar #'generate-symbol-intern symbols)))
	    ,@opt))
	form)))

(defprop import           import-export-compiler-top-level-form compiler:top-level-form)
(defprop shadowing-import import-export-compiler-top-level-form compiler:top-level-form)
(defprop export           import-export-compiler-top-level-form compiler:top-level-form)

(defprop unexport      eval-at-compile-time compiler:top-level-form)
(defprop use-package   eval-at-compile-time compiler:top-level-form)
(defprop unuse-package eval-at-compile-time compiler:top-level-form)
(defprop in-package    eval-at-compile-time compiler:top-level-form)
(defprop make-package  eval-at-compile-time compiler:top-level-form)

(defun eval-at-compile-time (form)
  (eval form)
  form)

(defun in-package (package-name &rest make-package-keywords)
  (let* ((package (find-package package-name))
	 (new-package (if package
			  (apply #'si:make-package-more
				 (zl:pkg-name package) make-package-keywords)
			(apply #'make-package
			       package-name make-package-keywords))))
    (when (variable-boundp si:fdefine-file-definitions)
      ;; Only change the standard-value when we are loading a file, since
      ;; we know that LOADING-FILE has established a standard-value binding
      ;; which will prevent this change from becoming permanent.
      (condition-case ()
	   (cl:setf (sys:standard-value '*package*) new-package)
	 (si:invalid-standard-value)))
    (setf *package* new-package)))


;;; Chapter 11 -- Modules

(defvar *modules* ())

;Should it warn if it's already there?
(defun provide (module-name)
  (etypecase module-name
    (string)
    (symbol (setf module-name (symbol-name module-name))))
  (pushnew module-name *modules* :test #'string=))

(defun future-common-lisp:require (module-name)
  (etypecase module-name
    (string)
    (symbol (setf module-name (symbol-name module-name))))
  (unless (member module-name *modules* :test #'string=)
    (sct:load-system module-name :query nil)
    (unless (member module-name *modules* :test #'string=)
      (cerror "Proceed with no special action."
	      "The files that supposedly constitute the module ~A were loaded,~@
		but they did not execute (PROVIDE ~:*~S)."
	      module-name))))

(defun require (module-name &optional pathname)
  (etypecase module-name
    (string)
    (symbol (setf module-name (symbol-name module-name))))
  (unless (member module-name *modules* :test #'string=)
    (typecase pathname
      (null
	(sct:load-system module-name :query nil))
      (list
	(mapc #'load pathname))
      (t
	(load pathname)))
    (unless (member module-name *modules* :test #'string=)
      (cerror "Proceed with no special action."
	      "The files that supposedly constitute the module ~A were loaded,~@
		but they did not execute (PROVIDE ~:*~S)."
	      module-name))))

(defprop require eval-at-compile-time compiler:top-level-form)


;;; ANSI Common LISP features not in CLtL

;;; If the number of arguments to FUNCTION is fixed, this returns
;;; that number, otherwise nil.  [maybe this should be insys>lcode ?].
(defun constant-number-of-arguments (function)
  (let* ((info (args-info function))
	 (max (ldb sys:%%ARG-DESC-MAX-ARGS info))
	 (min (ldb sys:%%ARG-DESC-MIN-ARGS info))
	 (rest-p (ldb sys:%%ARG-DESC-REST-ARG info)))
    (if (and (zerop rest-p)
	     (= max min))
	max
	nil)))

(defun complement-printer (object stream)
  (when (typep object 'lexical-closure)
    (si:printing-random-object (object stream)
      (format stream "FUNCTION Complement ~s"
	      (function-name (lexical-closure-environment object))))))

(defun future-common-lisp:complement (function)
  (declare (side-effects simple))
  (let ((fun
	  (case (constant-number-of-arguments function)
	    (0 #'(lambda (f)
		   (declare (clos:print-object complement-printer))
		   (not (funcall f))))
	    (1 #'(lambda (f a)
		   (declare (clos:print-object complement-printer))
		   (not (funcall f a))))
	    (2 #'(lambda (f a b)
		   (declare (clos:print-object complement-printer))
		   (not (funcall f a b))))
	    (3 #'(lambda (f a b c)
		   (declare (clos:print-object complement-printer))
		   (not (funcall f a b c))))
	    (4 #'(lambda (f a b c d)
		   (declare (clos:print-object complement-printer))
		   (not (funcall f a b c d))))
	    ;;; how long should this go on?
	    (t #'(lambda (f &rest arguments)
		   (declare (clos:print-object complement-printer))
		   (not (apply f arguments)))))))
    (make-lexical-closure function fun)))

(defun constantly-printer (object stream)
  (when (typep object 'lexical-closure)
    (si:printing-random-object (object stream)
      (format stream "FUNCTION Constantly ~s" (lexical-closure-environment object)))))

(defun future-common-lisp:constantly (value)
  (declare (side-effects simple))
  (case value
    ((t) #'true)
    ((nil) #'false)
    ;;; Moon suggested these constants also.  Comment them out until someone cares. -naha
;    (-1 #'(lambda (&rest ignore) -1))
;    (0 #'(lambda (&rest ignore) 0))
;    (1 #'(lambda (&rest ignore) 1))
;    (2 #'(lambda (&rest ignore) 2))

    ;; Make the smallest possible lexical closure.  Maybe the
    ;; compiler will eventually do the appropriate minimal thing
    ;; here.  The idea is that there is only one value captured in
    ;; the closure, so instead of making an environment with one
    ;; value int it, we just store the value where we would have
    ;; stored the environment had we made one.
    (t (make-lexical-closure
	 value #'(lambda (environment &rest ignore)
		   (declare (clos:print-object constantly-printer))
		   environment)))
    ))
