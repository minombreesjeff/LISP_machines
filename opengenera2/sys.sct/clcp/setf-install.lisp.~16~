;;; -*- Mode:LISP; Package:Language-Tools; Syntax:Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Install the macros
;;; In a separate file so we can compile things without installing them
;;; and clobbering over the old macros we are using for bootstrap purposes

(DEFMACRO SETF (&REST PAIRS &ENVIRONMENT ENV)
  (DECLARE (ARGLIST REFERENCE VALUE &REST MORE-PAIRS)
	   (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (EXPAND-SETF PAIRS ENV))

(DEFUN (:PROPERTY SETF :UNDO-FUNCTION) (FORM)
  ;; Better to just signal an error and let the guy know he's losing than to let him
  ;; just blunder ahead and only find out later that he's lost...
  (WHEN (> (LENGTH FORM) 3)			;(SETF var1 val1 var2 ...)
    (WARN "Undoing multiple assignments for the same SETF form is not supported.~
         ~%The undo for the following form may or may not have be done correctly:~
	 ~% ~S~
         ~%If these forms don't depend on one another, maybe you can use a PSETF form:~
	 ~% ~S~
	 ~%If these forms do depend on one another, maybe you can use multiple SETF forms:~{~
	 ~% ~S~}"
	  FORM
	  (CONS 'PSETF (CDR FORM))
	  (LOOP FOR PAIRS ON (CDR FORM) BY #'CDDR
		COLLECT `(SETF ,(CAR PAIRS) ,(CADR PAIRS)))))
  ;; The thing that's hard is that we can only generate the correct undo form for the
  ;; second variable after we've evaluated the first assignment (to determine if there
  ;; was an inter-dependency).  It is not the responsibility of this function to perform
  ;; that side-effect, and it is too hard to simulate the correct behavior of the second
  ;; accessor without knowing the result of the first.  Consider:
  ;;  (SETF (CAR X) (SOMETHING) (CAAR X) (CAR X))
  ;; for example. If instead you write two forms, as in:
  ;;  (SETF (CAR X) (SOMETHING))
  ;;  (SETF (CAAR X) (CAR X)))
  ;; then the normal execution algorithm for things like LOGIN-FORMS which use this
  ;; facility will be to produce the undo form for the first SETF, then evaluate that
  ;; SETF, then go on to produce the undo form for the second SETF with the first SETF
  ;; already having been executed.  So the execution of the first form will be properly
  ;; interleaved with the preparation of the second undo form--something the undo form
  ;; by itself just cannot do. 
  ;; -kmp 27-Sep-89
  `(SETF ,@(LOOP FOR PAIRS ON (CDR FORM) BY #'CDDR
		 NCONC (LIST (CAR PAIRS) `',(EVAL (CAR PAIRS))))))

(DEFMACRO FUTURE-COMMON-LISP:SETF (&REST PAIRS &ENVIRONMENT ENV)
  (DECLARE (ARGLIST REFERENCE VALUE &REST MORE-PAIRS)
	   (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (EXPAND-SETF PAIRS ENV))

(DEFUN (:PROPERTY FUTURE-COMMON-LISP:SETF :UNDO-FUNCTION) (FORM)
  (FUNCALL #'(:PROPERTY ZL:SETF :UNDO-FUNCTION) FORM))

(DEFMACRO LOCF (REFERENCE &ENVIRONMENT ENV)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (EXPAND-LOCF REFERENCE ENV))

(DEFMACRO PUSH (ITEM REFERENCE &REST KEYWORDS &ENVIRONMENT ENV)
  (DECLARE (ARGLIST ITEM REFERENCE &KEY AREA LOCALIZE)
	   (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (EXPAND-PUSH ITEM REFERENCE 'CONS 'CONS-IN-AREA 'CONS-LOCALIZE KEYWORDS ENV))

(DEFMACRO PUSHNEW (ITEM REFERENCE &REST ADJOIN-KEYWORDS &ENVIRONMENT ENV)
  (DECLARE (ARGLIST ITEM REFERENCE &KEY TEST TEST-NOT KEY AREA LOCALIZE REPLACE)
	   (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (EXPAND-PUSH-2 ITEM REFERENCE 'ADJOIN ADJOIN-KEYWORDS ENV))

(DEFMACRO POP (LIST &ENVIRONMENT ENV)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (EXPAND-POP LIST ENV))

(DEFINE-MODIFY-MACRO INCF (&OPTIONAL (DELTA 1)) +
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS)))

(DEFINE-MODIFY-MACRO DECF (&OPTIONAL (DELTA 1)) -
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS)))

(DEFINE-MODIFY-MACRO MAXF (&REST MAXIMA) MAX)
(DEFINE-MODIFY-MACRO MINF (&REST MINIMA) MIN)

;;; Can't use SETF function specs in the cold load, so
;;; SI:SET-DOCUMENTATION calls this.
(DEFUN SI:SET-CLOS-DOCUMENTATION (NEW-VALUE CLASS)
  (SETF (CLOS:DOCUMENTATION CLASS) NEW-VALUE))

;;; Can't use LOCF function specs in the cold load, so
;;; COMPILER:DISASSEMBLE-DECODE-LOCATIVE calls this.
(DEFUN SI:LOCATE-SLOT (OBJECT SLOT)
  (LOCF (CLOS:SLOT-VALUE OBJECT SLOT)))
