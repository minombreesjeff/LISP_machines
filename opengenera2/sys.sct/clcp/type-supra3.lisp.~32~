;;; -*- Mode: LISP; Package: Common-lisp-internals; Syntax:Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Superstructure of Common Lisp type system -- actual type definitions (third file)

;This has to be in its own file since it depends on the entire type system working

;Note that this definition contains a lot of redundancies, however
;expansion of OR should optimize them out.
(DEFINE-TYPE-PREDICATE COMMONP COMMON ()
  (DECLARE (TYPENAME "any Common-Lisp object"))
  `(OR CONS SYMBOL FIXNUM BIGNUM RATIO SHORT-FLOAT SINGLE-FLOAT DOUBLE-FLOAT LONG-FLOAT
       STANDARD-CHAR HASH-TABLE READTABLE PACKAGE PATHNAME STREAM RANDOM-STATE
       (STRUCTURE *)
       (AND ARRAY (SATISFIES COMMON-ARRAY-P))
       ;(AND COMPLEX (SATISFIES COMMON-COMPLEX-P))	;We have no complexes anyway
       NUMBER		;We have made no extensions to NUMBER
       STRING		;Missing from Mary Poppins, presumably by accident
       ))

(DEFUN COMMON-ARRAY-P (ARRAY)
  (NOT (NULL (MEMBER (SYS:ARRAY-TYPE ARRAY) *COMMON-ARRAY-TYPES*))))

;;; Hairy sequence coercions
;;; No dimension specs allowed; manual isn't very about this!
;;; These are in this file so I can use CHECK-TYPE and TYPECASE

(DEFINE-COERCION SEQUENCE (OBJECT)
  (CHECK-TYPE OBJECT SEQUENCE)
  OBJECT)

(DEFINE-COERCION LIST (OBJECT)
  (CTYPECASE OBJECT
    (LIST OBJECT)
    (VECTOR
      (LET* ((VECTOR OBJECT)
	     (LIST (MAKE-LIST (LENGTH VECTOR))))
	(DECLARE (SYS:ARRAY-REGISTER VECTOR))
	(DO ((I 0 (1+ I))
	     (LIST-POINTER LIST (CDR LIST-POINTER)))
	    ((NULL LIST-POINTER))
	  (SETF (CAR LIST-POINTER) (AREF VECTOR I)))
	LIST))))

(DEFINE-COERCION ARRAY (OBJECT &OPTIONAL ELEMENT-TYPE DIMENSIONS)
  ;; We don't support dimensions, except we do have to ignore ones that mean vector
  (UNLESS (MEMBER DIMENSIONS '(* (*) 1) :TEST #'EQUAL)
    (CERROR "Ignore the dimensions specification ~S"
	    "ARRAY coercion does not support dimensions specification"
	    DIMENSIONS))
  (IF (EQ ELEMENT-TYPE '*)
      (CTYPECASE OBJECT
	(ARRAY OBJECT)
	(LIST (REPLACE (MAKE-ARRAY (LIST-LENGTH OBJECT)) OBJECT)))
      ;; Here we degenerate into somewhat inefficient code
      ;; Let CONCATENATE do the work, because it understands about fat strings
      (CTYPECASE OBJECT
	(ARRAY (IF (EQUAL-TYPEP (ARRAY-ELEMENT-TYPE OBJECT) ELEMENT-TYPE)
		   OBJECT
		   (CONCATENATE `(ARRAY ,ELEMENT-TYPE) OBJECT)))
	(LIST (CONCATENATE `(ARRAY ,ELEMENT-TYPE) OBJECT)))))

;The following are only for efficiency, the general ARRAY coercion above would do the job
(DEFINE-COERCION VECTOR (OBJECT &OPTIONAL (ELEMENT-TYPE '*) (SIZE '*))
  (TYPECASE SIZE
    (INTEGER (UNLESS ( SIZE (LENGTH OBJECT))
	       (ERROR "~S will not fit in a vector of length ~D." OBJECT SIZE))))
  (IF (EQ ELEMENT-TYPE '*)
      (CTYPECASE OBJECT
	(VECTOR
	  (IF (AND (NEQ SIZE '*) (< (LENGTH OBJECT) SIZE))
	      (MAKE-ARRAY SIZE :INITIAL-CONTENTS OBJECT)
	    OBJECT))
	(LIST (REPLACE (MAKE-ARRAY (IF (NEQ SIZE '*) SIZE (LIST-LENGTH OBJECT))) OBJECT)))
    ;; Here we degenerate into somewhat inefficient code
    ;; Let CONCATENATE do the work, because it understands about fat strings
    (LET ((OBJECT-LENGTH (LENGTH OBJECT)))
      (CTYPECASE OBJECT
	(VECTOR
	  (COND ((AND (EQUAL-TYPEP (ARRAY-ELEMENT-TYPE OBJECT) ELEMENT-TYPE)
		      (OR (EQ SIZE '*)
			  (= SIZE OBJECT-LENGTH)))
		 OBJECT)
		((OR (EQ SIZE '*) (= SIZE OBJECT-LENGTH))
		 (CONCATENATE `(VECTOR ,ELEMENT-TYPE) OBJECT))
		(T (CONCATENATE `(VECTOR ,ELEMENT-TYPE) OBJECT
				(MAKE-ARRAY (- SIZE OBJECT-LENGTH)
					    :ELEMENT-TYPE ELEMENT-TYPE)))))
	(LIST (IF (OR (EQ SIZE '*) (= SIZE OBJECT-LENGTH))
		  (CONCATENATE `(VECTOR ,ELEMENT-TYPE) OBJECT)
		(CONCATENATE `(VECTOR ,ELEMENT-TYPE) OBJECT
			     (MAKE-ARRAY (- SIZE OBJECT-LENGTH)
					 :ELEMENT-TYPE ELEMENT-TYPE))))))))

;This is explicitly forbidden by the manual
;(DEFINE-COERCION STRING STRING)

(DEFINE-COERCION STRING (OBJECT)
  (CTYPECASE OBJECT
    (STRING OBJECT)
    (SEQUENCE (CONCATENATE 'STRING OBJECT))))	;can produce a fat string

;The following are each needed because of the way the simple array types are defined

(DEFINE-COERCION SIMPLE-ARRAY (OBJECT &OPTIONAL ELEMENT-TYPE DIMENSIONS)
  ;; We don't support dimensions, except we do have to ignore ones that mean vector
  (UNLESS (MEMBER DIMENSIONS '(* (*) 1) :TEST #'EQUAL)
    (CERROR "Ignore the dimensions specification ~S"
	    "ARRAY coercion does not support dimensions specification"
	    DIMENSIONS))
  (IF (EQ ELEMENT-TYPE '*)
      (CTYPECASE OBJECT
	(SIMPLE-ARRAY OBJECT)
	(SEQUENCE (REPLACE (MAKE-ARRAY (LENGTH OBJECT)) OBJECT)))
      ;; Here we degenerate into somewhat inefficient code
      ;; Let CONCATENATE do the work, because it understands about fat strings
      (CTYPECASE OBJECT
	(SIMPLE-ARRAY (IF (EQUAL-TYPEP (ARRAY-ELEMENT-TYPE OBJECT) ELEMENT-TYPE)
			  OBJECT
			  (CONCATENATE `(ARRAY ,ELEMENT-TYPE) OBJECT)))
	(SEQUENCE (CONCATENATE `(ARRAY ,ELEMENT-TYPE) OBJECT)))))

(DEFINE-COERCION SIMPLE-VECTOR (OBJECT &OPTIONAL ELEMENT-TYPE)
  (IF (EQ ELEMENT-TYPE '*)
      (CTYPECASE OBJECT
	(SIMPLE-VECTOR OBJECT)
	(SEQUENCE (REPLACE (MAKE-ARRAY (LENGTH OBJECT)) OBJECT)))
    (CTYPECASE OBJECT
      (SIMPLE-VECTOR (IF (EQUAL-TYPEP (ARRAY-ELEMENT-TYPE OBJECT) ELEMENT-TYPE)
			 OBJECT
		       (CONCATENATE `(VECTOR ,ELEMENT-TYPE) OBJECT)))
      (SEQUENCE (CONCATENATE `(VECTOR ,ELEMENT-TYPE) OBJECT)))))

(DEFINE-COERCION SIMPLE-STRING (OBJECT)
  (CTYPECASE OBJECT
    (SIMPLE-STRING OBJECT)
    (SEQUENCE (CONCATENATE 'STRING OBJECT))))

(DEFINE-COERCION SIMPLE-BIT-VECTOR (OBJECT)
  (CTYPECASE OBJECT
    (SIMPLE-BIT-VECTOR OBJECT)
    (SEQUENCE (REPLACE (MAKE-ARRAY (LENGTH OBJECT) :ELEMENT-TYPE 'BIT) OBJECT))))



;;; This has to be after all of the types are defined.

(DEFUN SUBTYPEP (TYPE1 TYPE2 &AUX TYPE-NAME-1 TYPE-ARGS-1 TYPE-NAME-2 TYPE-ARGS-2)
  (COND ((OR (EQ TYPE1 'NIL) (EQ TYPE2 'T))
	 ;; NIL is a subtype of everything, everything is a subtype of T
	 (VALUES T T))
	((OR (EQ TYPE1 'T) (EQ TYPE2 'NIL))
	 ;; T is a subtype of T and nothing else, nothing except NIL is a subtype of NIL
	 (VALUES NIL T))
	((EQUAL TYPE1 TYPE2)
	 (VALUES T T))
	(T
	  (MULTIPLE-VALUE-SETQ (TYPE1 TYPE-NAME-1 TYPE-ARGS-1)
	    (TYPE-EXPAND TYPE1 *SUBTYPEP-TERMINAL-TYPES*))
	  (MULTIPLE-VALUE-SETQ (TYPE2 TYPE-NAME-2 TYPE-ARGS-2)
	    (TYPE-EXPAND TYPE2 *SUBTYPEP-TERMINAL-TYPES*))
	  (LET ((FUNCTION (OR (LOOKUP-SUBTYPEP-FUNCTION TYPE-NAME-1 TYPE-NAME-2)
			      (LOOKUP-SUBTYPEP-FUNCTION TYPE-NAME-1 '*)
			      (LOOKUP-SUBTYPEP-FUNCTION '* TYPE-NAME-2)
			      (LOOKUP-SUBTYPEP-FUNCTION TYPE-NAME-1 'DEFAULT)
			      (LOOKUP-SUBTYPEP-FUNCTION 'DEFAULT TYPE-NAME-2)
			      (LOOKUP-SUBTYPEP-FUNCTION 'DEFAULT 'DEFAULT))))
	    (FUNCALL FUNCTION
		     TYPE1 TYPE-NAME-1 TYPE-ARGS-1 TYPE2 TYPE-NAME-2 TYPE-ARGS-2)))))
