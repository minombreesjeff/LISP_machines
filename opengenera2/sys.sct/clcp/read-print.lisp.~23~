;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: COMMON-LISP-INTERNALS; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Reader-related Common Lisp functions

(defsubst strip-characters-style (char)
  (setf (si:char-style-index char) 0)
  char)

(defun copy-readtable (&optional (from-readtable *readtable*) to-readtable)
  (declare lt:(side-effects reader))
  (zl:copy-readtable (or from-readtable si:*initial-common-lisp-readtable*) to-readtable))

(defun readtablep (object)
  (declare lt:(side-effects simple))
  (and (arrayp object)
       (array-has-leader-p object)
       (> (array-leader-length object) 1)
       (eq 'zl:readtable (array-leader object 1))))

;;; Like the ZL one, but defaults to CL readtable, and copies macro definition.
(defun set-syntax-from-char (to-char from-char
				&optional (to-readtable *readtable*) from-readtable)
  (let ((to-code (char-code to-char))
	(from-code (char-code from-char)))
    (when (null from-readtable)
      (setq from-readtable si:*initial-common-lisp-readtable*))
    (setf (si:rdtbl-bits to-readtable to-code) (si:rdtbl-bits from-readtable from-code))
    (setf (si:rdtbl-code to-readtable to-code) (si:rdtbl-code from-readtable from-code))

    (let ((from-macro-def (assoc from-char (si:rdtbl-macro-alist from-readtable)))
	  (to-macro-def (assoc to-char (si:rdtbl-macro-alist to-readtable))))
      (when from-macro-def
	(if to-macro-def
	    (setf (cdr to-macro-def) (cdr from-macro-def))
	    (push (cons to-char (cdr from-macro-def))
		  (si:rdtbl-macro-alist to-readtable)))))))

;;; Common Lisp macro-character functions have a different calling sequence
;;; than Zetalisp ones.  So, we create a closure that is called like a Zetalisp
;;; macro-character function.  This closure calls the Common Lisp function in the
;;; Common Lisp manner.
(defun set-macro-character (char function
				 &optional non-terminating-p (a-readtable *readtable*))
  (set-macro-character-internal
    (strip-characters-style char)
    non-terminating-p
    a-readtable
    (cond ((null function) function)
	  ((and (lexical-closure-p function)
		(equal (arglist function) '(stream char))
		(zl:boundp-in-closure function 'nested-function)
		(let ((inner-func (symbol-value-in-closure function 'nested-function)))
		  (and (functionp inner-func)
		       (= (length (arglist inner-func)) 2)
		       inner-func))))
	  (t #'(lambda (list-so-far stream &aux n-values)
		 ;;Be very careful how you use this subprimitive!
		 (setq n-values (sys:%multiple-value-push (funcall function stream char)))
		 (cond
		   ((= n-values 1)
		    (sys:%pop))
		   ((= n-values 0)
		    (values list-so-far nil t))
		   (t
		    (read-error stream "A macro character's function, ~S, returned ~S values"
				function n-values))))))))

(defun set-macro-character-internal (char non-terminating-p a-readtable function)
  (let ((code (char-code char))
	(syntax (getf (si:rdtbl-plist a-readtable)
		       (if (null function)
			   'si:alphabetic
			   (if non-terminating-p 'si:non-terminating-macro 'si:macro)))))
    (setf (si:rdtbl-bits a-readtable code) (car syntax))
    (setf (si:rdtbl-code a-readtable code) (cdr syntax))
    (let ((x (assoc char (si:rdtbl-macro-alist a-readtable))))
      (if (null x)
	  (when function
	    (push (cons char function) (si:rdtbl-macro-alist a-readtable)))
	  (if function
	      (setf (cdr x) function)
	      (setf (si:rdtbl-macro-alist a-readtable)
		    (remove char
			    (si:rdtbl-macro-alist a-readtable) :test #'char= :key #'car))))
      t)))

(defun get-macro-character (char &optional (a-readtable *readtable*))
  (when (null a-readtable)
    (setq a-readtable si:*initial-common-lisp-readtable*))
  (multiple-value-bind (value non-terminating-p)
      (get-macro-character-internal (strip-characters-style char) a-readtable)
    (cond ((null value) value)
	  ((and (lexical-closure-p value)
		(equal (arglist value) '(list-so-far stream))
		(zl:boundp-in-closure value 'function)
		(values (symbol-value-in-closure value 'function)
			non-terminating-p)))
	  (t (values
	       #'(lambda (stream char)
		   (ignore char)
		   (multiple-value-bind (thing ignore splicep)
		       (funcall value nil stream)
		     (if splicep
			 (if (atom thing)
			     (values)
			     (values (car thing)))
			 (values thing))))
	       non-terminating-p)))))

(defun get-macro-character-internal (char a-readtable)
  (let ((code (si:rdtbl-code a-readtable (char-code char)))
	(non-terminating-p nil)
	flag)
    (cond ((eq code (cdr (getf (si:rdtbl-plist a-readtable) 'si:macro)))
	   (setq flag t))
	  ((eq code (cdr (getf (si:rdtbl-plist a-readtable) 'si:non-terminating-macro)))
	   (setq flag t)
	   (setq non-terminating-p t)))
    (when flag
      (values (cdr (assoc char (si:rdtbl-macro-alist a-readtable)))
	      NON-terminating-p))))

(defun make-dispatch-macro-character (char &optional
					   non-terminating-p (a-readtable *readtable*))
  (set-macro-character-internal
    char
    non-terminating-p
    a-readtable
    (let ((dispatch-macro-array (make-array si:rdtbl-array-size)))
      #'(lambda (list-so-far stream &aux n-values)
	  (loop with arg = nil
		for subchar = (send stream ':tyi)
		for digit = (digit-char-p subchar)
		while digit
		do (setq arg (if (null arg)
				 digit
				 (+ (* arg 10.) digit)))
		finally
		(setf subchar (char-upcase subchar))
		(let ((entry (aref dispatch-macro-array
				   (min (char-code subchar) si:rdtbl-array-size))))
		  (unless entry
		    (read-error
		      stream "The reader has encountered a ~A~A~C -- an undefined ~C dispatch macro"
		      char (or arg "") subchar char))
		  ;;Be very careful how you use this subprimitive!
		  (setq n-values (sys:%multiple-value-push
				   (funcall entry stream (code-char (zl:char-code subchar))
					    arg)))
		  (cond ((= n-values 1)
			 (return (sys:%pop)))
			((= n-values 0)
			 (return (values list-so-far nil t)))
			(t (read-error stream "A macro character's function, ~S, returned ~S values"
				       entry n-values)))))))))

(defun get-dispatch-macro-character (disp-char sub-char &optional (a-readtable *readtable*))
  (when (null a-readtable)
    (setq a-readtable si:*initial-common-lisp-readtable*))
  (setq disp-char (strip-characters-style disp-char))
  (setq sub-char (char-upcase (strip-characters-style sub-char)))
  (if (char= disp-char #\#)
      (let ((entry (cdr (assoc sub-char (si:rdtbl-\#-macro-alist a-readtable)
			       :test #'char=))))
	(cond ((null entry) nil)
	      ((and (lexical-closure-p entry)
		    (zl:boundp-in-closure entry 'function))
	       (symbol-value-in-closure entry 'function))
	      (t #'(lambda (stream subchar arg)
		     (ignore subchar)
		     (let ((si:xr-sharp-argument arg))
		       (multiple-value-bind (thing ignore splicep)
			   (funcall entry nil stream)
			 (if splicep
			     (if (atom thing)
				 (values)
				 (values (car thing)))
			     (values thing))))))))
      (aref (get-dispatch-macro-table disp-char a-readtable) (char-code sub-char))))

(defun get-dispatch-macro-table (disp-char a-readtable)
  (let ((macro (get-macro-character-internal disp-char a-readtable)))
    (unless (and macro
		 (lexical-closure-p macro)
		 (zl:boundp-in-closure macro 'dispatch-macro-array))
      (error "The character ~:C is not a dispatch macro" disp-char))
    (symbol-value-in-closure macro 'dispatch-macro-array)))

(defun set-dispatch-macro-character (disp-char sub-char function
					       &optional (a-readtable *readtable*))
  (setq disp-char (strip-characters-style disp-char))
  (setq sub-char (char-upcase (strip-characters-style sub-char)))
  (if (char= disp-char #\#)
      (let ((entry (assoc sub-char (si:rdtbl-\#-macro-alist a-readtable) :test #'char=))
	    (closure
	      (cond
		((null function) nil)
		((and (lexical-closure-p function)
		      (equal (arglist function) '(stream char arg))
		      (zl:boundp-in-closure function 'entry)
		      (let ((inner-func (symbol-value-in-closure function 'entry)))
			(and (functionp inner-func)
			     (= (length (arglist inner-func)) 2)
			     inner-func))))
		(t #'(lambda (list-so-far stream &aux n-values)
		       ;;Be very careful how you use this subprimitive!
		       (setq n-values
			     (sys:%multiple-value-push
			       (funcall function stream sub-char si:xr-sharp-argument)))
		       (cond ((= n-values 1)
			      (sys:%pop))
			     ((= n-values 0)
			      (values list-so-far nil t))
			     (t
			      (read-error stream
					  "A macro character's function, ~S, returned ~S values"
					  function n-values))))))))
	(if (null entry)
	    (when closure
	      (push (cons sub-char closure) (si:rdtbl-\#-macro-alist a-readtable)))
	    (if closure
		(setf (cdr entry) closure)
		(setf (si:rdtbl-\#-macro-alist a-readtable)
		      (remove sub-char
			      (si:rdtbl-\#-macro-alist a-readtable)
			      :test #'char= :key #'car)))))
      (if ( 0 (char-code sub-char) 255.)
	  (setf (aref (get-dispatch-macro-table disp-char a-readtable) (char-code sub-char))
		function)
	  (cerror
	    "Skip trying to set the dispatch-macro-character."
	    "The character ~C is not in the standard character set, and therefore can not ~@
             used for a dispatching macro in ~C's dispatching table." sub-char disp-char)))
  t)

(defun future-common-lisp:copy-readtable (&optional (from-readtable *readtable*) to-readtable)
  (declare lt:(side-effects reader))
  (lisp:copy-readtable (or from-readtable si:*initial-ansi-common-lisp-readtable*)
		       to-readtable))

(defun future-common-lisp:get-dispatch-macro-character
       (disp-char sub-char &optional (a-readtable *readtable*))
  (lisp:get-dispatch-macro-character disp-char sub-char
				     (or a-readtable si:*initial-ansi-common-lisp-readtable*)))

(defun future-common-lisp:get-macro-character
       (char &optional (a-readtable *readtable*))
  (lisp:get-macro-character char (or a-readtable si:*initial-ansi-common-lisp-readtable*)))

(defun future-common-lisp:set-syntax-from-char
       (to-char from-char &optional (to-readtable *readtable*) from-readtable)
  (lisp:set-syntax-from-char to-char from-char to-readtable
			     (or from-readtable si:*initial-ansi-common-lisp-readtable*)))


;;;; Support for READTABLE-CASE

(defflavor readtable-case-object (translations) ()
  :initable-instance-variables
  :readable-instance-variables
  (:required-init-keywords :translations))

(defmethod (sys:print-self readtable-case-object) (stream &rest ignore)
  (future-common-lisp:print-unreadable-object (self stream :type t :identity t)
    (write-string "Upper=" stream)
    (dotimes (i 26.)
      (write-char (code-char (aref translations i)) stream))
    (write-string ", Lower=" stream)
    (dotimes (i 26.)
      (write-char (code-char (aref translations (+ i 26.))) stream))))

(defvar *non-standard-readtable-case-cache* (make-hash-table :test 'equal))

(defun non-standard-readtable-case (readtable)
  (si:with-fast-readtable-access (readtable)
    (si:stack-let ((stack-array
		     (make-array 52. :element-type
				 '(integer #.(min (char-code #\a) (char-code #\A))
					   #.(max (char-code #\z) (char-code #\Z))))))
      (declare (sys:array-register stack-array))
      (loop for char from (char-code #\A) to (char-code #\Z)
	    for i from 0
	    do (setf (aref stack-array i) (si:fast-rdtbl-trans char)))
      (loop for char from (char-code #\a) to (char-code #\z)
	    for i from 26
	    do (setf (aref stack-array i) (si:fast-rdtbl-trans char)))
      (or (gethash stack-array *non-standard-readtable-case-cache*)
	  (let ((array (copy-seq stack-array)))
	    (setf (gethash array *non-standard-readtable-case-cache*)
		  (make-instance 'readtable-case-object :translations array)))))))

(defsubst readtable-case-internal (readtable)
  (si:with-fast-readtable-access (readtable)
    (macrolet ((lowercase (code) `(+ ,code (- (char-code #\a) (char-code #\A))))
	       (uppercase (code) `(+ ,code (- (char-code #\A) (char-code #\a))))
	       (everychar ((var lowervar lower upper) &body forms)
		 `(loop for ,var from (char-code ,lower) to (char-code ,upper)
			always (let ((,lowervar (lowercase ,var)))
				 ,@forms))))
      (let ((uppercase-a-translation (si:fast-rdtbl-trans (char-code #\A))))
	(cond ((= uppercase-a-translation (char-code #\A))
	       (cond ((everychar (uppercode lowercode #\A #\Z) 
				 (and (= (si:fast-rdtbl-trans uppercode) uppercode)
				      (= (si:fast-rdtbl-trans lowercode) uppercode)))
		      :upcase)
		     ((everychar (uppercode lowercode #\A #\Z)
				 (and (= (si:fast-rdtbl-trans uppercode) uppercode)
				      (= (si:fast-rdtbl-trans lowercode) lowercode)))
		      :preserve)
		     (t :other)))
	      ((= uppercase-a-translation (char-code #\a))
	       (cond ((everychar (uppercode lowercode #\A #\Z)
				 (and (= (si:fast-rdtbl-trans uppercode) lowercode)
				      (= (si:fast-rdtbl-trans lowercode) lowercode)))
		      :downcase)
		     (t :other)))
	      (t :other))))))

(defun future-common-lisp:readtable-case (readtable)
  (let ((result (readtable-case-internal readtable)))
    (if (eq result :other)
	(non-standard-readtable-case readtable)
	result)))

(defun set-readtable-case (readtable value)
  (check-type value (or (member :upcase :downcase :preserve)
			readtable-case-object)
	      ":UPCASE, :DOWNCASE, :PRESERVE, or a READTABLE-CASE-OBJECT")
  (macrolet ((lowercase (code) `(+ ,code (- (char-code #\a) (char-code #\A)))))
    (loop for uppercode from (char-code #\A) to (char-code #\Z)
	  for i from 0
	  for j from 26
	  do (let ((lowercode (lowercase uppercode))
		   (translations (unless (symbolp value)
				   (readtable-case-object-translations value))))
	       (setf (si:rdtbl-trans readtable uppercode)
		     (case value
		       (:upcase   uppercode)
		       (:downcase lowercode)
		       (:preserve uppercode)
		       (otherwise (aref translations i))))
	       (setf (si:rdtbl-trans readtable lowercode)
		     (case value
		       (:upcase   uppercode)
		       (:downcase lowercode)
		       (:preserve lowercode)
		       (otherwise (aref translations j))))))
    value))

(defsetf future-common-lisp:readtable-case set-readtable-case)


;;;; QA support for READTABLE-CASE

#||

() ;Magic.

(unless (boundp 'si:*print-prefer-quotes*)
  (proclaim '(special si:*print-prefer-quotes*))
  (setf (symbol-value 'si:*print-prefer-quotes*) t))

(defvar *readtable-case-printing-correct-answer*
	"
READTABLE-CASE *PRINT-CASE*  Symbol-name  Output
--------------------------------------------------
:UPCASE        :UPCASE       ZEBRA        ZEBRA
:UPCASE        :UPCASE       Zebra        |Zebra|
:UPCASE        :UPCASE       zebra        |zebra|
:UPCASE        :DOWNCASE     ZEBRA        zebra
:UPCASE        :DOWNCASE     Zebra        |Zebra|
:UPCASE        :DOWNCASE     zebra        |zebra|
:UPCASE        :CAPITALIZE   ZEBRA        Zebra
:UPCASE        :CAPITALIZE   Zebra        |Zebra|
:UPCASE        :CAPITALIZE   zebra        |zebra|
:DOWNCASE      :UPCASE       ZEBRA        |ZEBRA|
:DOWNCASE      :UPCASE       Zebra        |Zebra|
:DOWNCASE      :UPCASE       zebra        ZEBRA
:DOWNCASE      :DOWNCASE     ZEBRA        |ZEBRA|
:DOWNCASE      :DOWNCASE     Zebra        |Zebra|
:DOWNCASE      :DOWNCASE     zebra        zebra
:DOWNCASE      :CAPITALIZE   ZEBRA        |ZEBRA|
:DOWNCASE      :CAPITALIZE   Zebra        |Zebra|
:DOWNCASE      :CAPITALIZE   zebra        Zebra
:PRESERVE      :UPCASE       ZEBRA        ZEBRA
:PRESERVE      :UPCASE       Zebra        Zebra
:PRESERVE      :UPCASE       zebra        zebra
:PRESERVE      :DOWNCASE     ZEBRA        ZEBRA
:PRESERVE      :DOWNCASE     Zebra        Zebra
:PRESERVE      :DOWNCASE     zebra        zebra
:PRESERVE      :CAPITALIZE   ZEBRA        ZEBRA
:PRESERVE      :CAPITALIZE   Zebra        Zebra
:PRESERVE      :CAPITALIZE   zebra        zebra"
  "Table of correct answers from X3J13/92-102, pages 22-6..22-7,
plus some others.")

(defun test-readtable-case (&key (verbose t)
			         (printer #'prin1)
				 ((:prefer-quotes si:*print-prefer-quotes*)
				  si:*print-prefer-quotes*))
  (readtable-test-compare
    (with-output-to-string (*standard-output*)
      (test-readtable-case-printing :printer printer))
    :verbose verbose))

(defun test-readtable-case-printing (&key (printer #'prin1))
  (let ((*readtable* (copy-readtable nil))
	(*print-case* *print-case*)
	(*package* (symbol-package 'ZEBRA)))
    (format t "~%READTABLE-CASE *PRINT-CASE*  Symbol-name  Output~
               ~%--------------------------------------------------~
               ~%")
    (dolist (readtable-case '(:upcase :downcase :preserve #||:invert||#))
      (setf (future-common-lisp:readtable-case *readtable*) readtable-case)
      (dolist (print-case '(:upcase :downcase :capitalize))
	(dolist (symbol '(|ZEBRA| |Zebra| |zebra|))
	  (setq *print-case* print-case)
	  (format t "~&:~A~15T:~A~29T~A~42T~A"
		  (string-upcase readtable-case)
		  (string-upcase print-case)
		  (symbol-name symbol)
		  (with-output-to-string (str)
		    (funcall printer symbol str))))))))

(defun readtable-test-compare (test-string &key (verbose t))
  (declare (values same correct))
  (with-input-from-string (str1 *readtable-case-printing-correct-answer*)
    (with-input-from-string (str2 test-string)
      (do ((l1 (read-line str1 nil nil)
	       (read-line str1 nil nil))
	   (l2 (read-line str2 nil nil)
	       (read-line str2 nil nil))
	   (correct t)
	   (same t))
	  ((or (null l1) (null l2))
	   (when (or l1 l2)
	     (when verbose (format t "~&Output of unequal length. This shouldn't happen.~%"))
	     (setq same nil correct nil))
	   (when verbose (format t "~&Test ~:[failed~;succeeded~]~:[~;, but came close~]."
				 same (and (not same) correct)))
	   (values same correct))
	(cond ((equal l1 l2)
	       (when verbose (format t "~&  ~A~%" l2)))
	      (t
	       (setq same nil)
	       (when verbose
		 (let* ((value-gotten (substring l2 42))
			(value-expected (substring l1 29
						   (string-search-set '(#\Tab #\Space)
								      l1
								      :start 29)))
			(equivalent
			  (with-input-from-string (s l1)
			    (let ((*readtable* (copy-readtable)))
			      (setf (future-common-lisp:readtable-case *readtable*)
				    (read s))
			      (let ((*print-case* (read s)))
				(string= value-expected
					    (read-from-string value-gotten)))))))
		   (setq correct (and correct equivalent))
		   (format t "~& ~A ~55T;Expected ~A~:[~; (equivalent)~]"
			   l2 (substring l1 42) equivalent)))))))))

||#

