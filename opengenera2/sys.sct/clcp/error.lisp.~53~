;;; -*- Mode: LISP; Package: Common-lisp-internals; Syntax: Common-Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Common Lisp error system

;;; Condition flavors

(DEFFLAVOR FORMAT-REPORT (FORMAT-STRING (FORMAT-ARGS NIL)) ()
  :ABSTRACT-FLAVOR
  (:REQUIRED-FLAVORS CONDITION)
  (:DOCUMENTATION :MIXIN "Make a condition print its report using FORMAT")
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  (:REQUIRED-INIT-KEYWORDS :FORMAT-STRING))

(DEFMETHOD (DBG:REPORT FORMAT-REPORT) (STREAM)
  (APPLY #'FORMAT STREAM FORMAT-STRING FORMAT-ARGS))

;;;

(DEFFLAVOR FATAL-ERROR () (FORMAT-REPORT ERROR))

(COMPILE-FLAVOR-METHODS FATAL-ERROR)

;;;

(DEFFLAVOR DEFAULT-ERROR (CONTINUE-FORMAT-STRING) (FORMAT-REPORT ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (DBG:PROCEED DEFAULT-ERROR :CONTINUE-CERROR) ()
  :NO-ACTION)

(DEFMETHOD (DBG:DOCUMENT-PROCEED-TYPE DEFAULT-ERROR :CONTINUE-CERROR) (STREAM)
  (APPLY #'FORMAT STREAM CONTINUE-FORMAT-STRING FORMAT-ARGS))

(COMPILE-FLAVOR-METHODS DEFAULT-ERROR)

;;;

(DEFFLAVOR BREAK () (FORMAT-REPORT ZL:BREAK))

;; The innermost frame is interesting, regardless of DBG:ERROR-REPORTER-ness
(DEFMETHOD (DBG:CURRENT-AND-INNERMOST-FRAMES-FOR-DEBUGGER CL:BREAK) (FRAME)
  (VALUES FRAME FRAME))

(COMPILE-FLAVOR-METHODS BREAK)

;;;

(DEFFLAVOR COERCE-UNKNOWN-TYPE (OBJECT TO-TYPE) (ZL:ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (DBG:REPORT COERCE-UNKNOWN-TYPE) (STREAM)
  (FORMAT STREAM "I don't know how to coerce an object to ")
  (PRINT-TYPE-DESCRIPTION TO-TYPE STREAM))

(DEFMETHOD (DBG:PROCEED COERCE-UNKNOWN-TYPE :NEW-VALUE)
	   ;;--- Someday figure out how to pass in the frame's environment
	   (&OPTIONAL (VALUE (ACCEPT 'DW::EVALUATED-FORM
				     :PROMPT (FORMAT NIL "Object to return as coercion of ~S to ~S" OBJECT TO-TYPE)
				     :PROVIDE-DEFAULT NIL)))
  "Return an object from COERCE"
  (VALUES :NEW-VALUE VALUE))

(COMPILE-FLAVOR-METHODS COERCE-UNKNOWN-TYPE)

;;;

(DEFGENERIC CONDITIONS:TYPE-ERROR-DATUM (CONDITIONS:TYPE-ERROR))

(DEFGENERIC CONDITIONS:TYPE-ERROR-EXPECTED-TYPE (CONDITIONS:TYPE-ERROR))

(DEFFLAVOR CONDITIONS:TYPE-ERROR (BAD-VALUE EXPECTED-TYPE)
	   (ERROR)
  (:INITABLE-INSTANCE-VARIABLES (:DATUM BAD-VALUE) EXPECTED-TYPE)
  (:READABLE-INSTANCE-VARIABLES
   (CONDITIONS:TYPE-ERROR-DATUM         BAD-VALUE)
   (CONDITIONS:TYPE-ERROR-EXPECTED-TYPE EXPECTED-TYPE)))

(DEFMETHOD (DBG:REPORT CONDITIONS:TYPE-ERROR) (STREAM)
  (FORMAT STREAM "The object ~S was not of type ~S." BAD-VALUE EXPECTED-TYPE))

(DEFFLAVOR CONDITIONS:SIMPLE-TYPE-ERROR ()
	   (CONDITIONS:SIMPLE-CONDITION CONDITIONS:TYPE-ERROR))
;;;

(DEFFLAVOR WRONG-TYPE-DATUM
	(NAME BAD-VALUE EXPECTED-TYPE (TYPE-DESCRIPTION NIL) (ARG-NUMBER NIL) FUNCTION)
	(CONDITIONS:TYPE-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (DBG:PROCEED WRONG-TYPE-DATUM :NEW-VALUE)
	   ;;--- Someday figure out how to pass in the frame's environment
	   (&OPTIONAL (NEW-VALUE (ACCEPT 'DW::EVALUATED-FORM
					 :PROMPT (FORMAT NIL "Form to evaluate and use as replacement for ~A" NAME)
					 :PROVIDE-DEFAULT NIL)))
  (VALUES :NEW-VALUE NEW-VALUE))

(DEFMETHOD (DBG:DOCUMENT-PROCEED-TYPE WRONG-TYPE-DATUM :NEW-VALUE) (STREAM)
  (FORMAT STREAM "Supply a replacement value to be stored into ~A" NAME))

(DEFMETHOD (DBG:REPORT WRONG-TYPE-DATUM) (STREAM)
  (COND (ARG-NUMBER
	 (SEND STREAM :STRING-OUT "The ")
	 (FORMAT:ENGLISH-ORDINAL-PRINT ARG-NUMBER STREAM)
	 (SEND STREAM :STRING-OUT " argument (")
	 (PRINC NAME STREAM)
	 (SEND STREAM :STRING-OUT ") to ")
	 (PRIN1 (FUNCTION-NAME FUNCTION) STREAM))
	(T
	 (SEND STREAM :STRING-OUT "The value of ")
	 (PRINC NAME STREAM)
	 (SEND STREAM :STRING-OUT " in ")
	 (PRIN1 (FUNCTION-NAME FUNCTION) STREAM)))
  (SEND STREAM :STRING-OUT ", ")
  (PRIN1 BAD-VALUE STREAM)
  (SEND STREAM :STRING-OUT ", was of the wrong type.
The function expected ")
  (IF TYPE-DESCRIPTION
      (PRINC TYPE-DESCRIPTION STREAM)
      (PRINT-TYPE-DESCRIPTION EXPECTED-TYPE STREAM))
  (SEND STREAM :TYO #\.))

(COMPILE-FLAVOR-METHODS WRONG-TYPE-DATUM)

;;;

(DEFFLAVOR ASSERTION-FAILED (REFERENCE-NAMES REFERENCE-VALUES)
	   (FORMAT-REPORT ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  (:REQUIRED-INIT-KEYWORDS :FORMAT-STRING :FORMAT-ARGS :REFERENCE-NAMES :REFERENCE-VALUES))

(DEFMETHOD (MAKE-INSTANCE ASSERTION-FAILED :AFTER) (&REST IGNORE)
  (IF (NULL REFERENCE-NAMES)
      (SETQ DBG:PROCEED-TYPES (REMOVE :NEW-VALUES DBG:PROCEED-TYPES))))

(DEFMETHOD (DBG:PROCEED ASSERTION-FAILED :TRY-AGAIN) ()
  :TRY-AGAIN)

(DEFMETHOD (DBG:DOCUMENT-PROCEED-TYPE ASSERTION-FAILED :TRY-AGAIN) (STREAM)
  (PRINC "Test the assertion again" STREAM))

(DEFMETHOD (DBG:PROCEED ASSERTION-FAILED :NEW-VALUES) (&REST NEW-VALUES)
  (COND ((NULL NEW-VALUES)
	 (DW:ACCEPT-VARIABLE-VALUES
	   (LOOP FOR REFERENCE IN REFERENCE-NAMES
		 FOR SLOT ON REFERENCE-VALUES
		 COLLECT `(,(LOCF (CAR SLOT))
			   ,(FORMAT NIL "~A" REFERENCE)
			   DW::EVALUATED-FORM))
	   :PROMPT "Alter values and try again")
	 (VALUES :NEW-VALUES REFERENCE-VALUES))
	((= (LIST-LENGTH NEW-VALUES) (LIST-LENGTH REFERENCE-NAMES))
	 (VALUES :NEW-VALUES NEW-VALUES))
	(T (ERROR "Wrong number of values"))))

(DEFMETHOD (DBG:DOCUMENT-PROCEED-TYPE ASSERTION-FAILED :NEW-VALUES) (STREAM)
  (COND ((> (LIST-LENGTH REFERENCE-NAMES) 1)
	 (PRINC "Alter the values of " STREAM)
	 (FORMAT:PRINT-LIST STREAM "~A" REFERENCE-NAMES)
	 (PRINC " and try again." STREAM))
	(T (FORMAT STREAM "Alter the value of ~A and try again." (FIRST REFERENCE-NAMES)))))

(COMPILE-FLAVOR-METHODS ASSERTION-FAILED)

;;;

(DEFFLAVOR SEQUENCE-INDEX-OUT-OF-RANGE (INDEX SEQUENCE (VARIABLE NIL))
	      (ERROR)
  (:INITABLE-INSTANCE-VARIABLES))

(DEFMETHOD (DBG:REPORT SEQUENCE-INDEX-OUT-OF-RANGE) (STREAM)
  (FORMAT STREAM "The index ~D ~@[(~S) ~]is not in range for the sequence ~S."
	  INDEX VARIABLE SEQUENCE))

(COMPILE-FLAVOR-METHODS SEQUENCE-INDEX-OUT-OF-RANGE)



;;; Basic error-reporting functions
;;; ERROR and WARN are shared with Zetalisp now

(DEFUN CERROR (&REST ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  (DECLARE (ARGLIST OPTIONAL-CONDITION-NAME CONTINUE-FORMAT-STRING
		    ERROR-FORMAT-STRING &REST ARGS))
  (LET* ((FLAVOR (IF (SYMBOLP (FIRST ARGS)) (POP ARGS) 'DEFAULT-ERROR))
	 (CONTINUE-FORMAT-STRING (POP ARGS))
	 (ERROR-FORMAT-STRING (POP ARGS)))
    (CHECK-TYPE CONTINUE-FORMAT-STRING STRING)
    (CHECK-TYPE ERROR-FORMAT-STRING STRING)
    (DBG:SIGNAL-CONDITION (MAKE-CONDITION FLAVOR
					  :CONTINUE-FORMAT-STRING CONTINUE-FORMAT-STRING
					  :FORMAT-STRING ERROR-FORMAT-STRING
					  :FORMAT-ARGS (COPY-LIST ARGS))
			  T)
    NIL))

(DEFUN BREAK (&OPTIONAL FORMAT-STRING &REST ARGS)
  ;; This has no effect
  (DECLARE (DBG:ERROR-REPORTER))
  (DBG:ENTER-DEBUGGER
    (MAKE-CONDITION 'BREAK
		    :FORMAT-STRING (OR FORMAT-STRING "(BREAK) executed")
		    :FORMAT-ARGS (COPY-LIST ARGS))
    NIL '(((#\RESUME) :EXIT-DEBUGGER "Return from BREAK"))
    T)
  NIL)

;;; If BREAK is called with no arguments, it's probably a temporary breakpoint,
;;; so warn the user, maybe he forgot to edit it out after fixing the bug.
(DEFUN (BREAK COMPILER:STYLE-CHECKER) (FORM)
  (UNLESS (CDR FORM)
    (COMPILER:WARN '(:BAD-STYLE T) "(BREAK) breakpoint in program")))

;;; Special error-reporting functions

;Returns as many values as there are references, the new values to be stored
(DEFUN ASSERTION-FAILED (REFERENCE-NAMES REFERENCE-VALUES FORMAT-STRING &REST FORMAT-ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  (SIGNAL-PROCEED-CASE ((NEW-VALUES) 'ASSERTION-FAILED
				     :FORMAT-STRING FORMAT-STRING
				     :FORMAT-ARGS (COPY-LIST FORMAT-ARGS)
				     :REFERENCE-NAMES REFERENCE-NAMES
				     :REFERENCE-VALUES REFERENCE-VALUES)
    (:TRY-AGAIN (VALUES-LIST REFERENCE-VALUES))
    (:NEW-VALUES (VALUES-LIST NEW-VALUES))))

(DEFUN DBG:CHECK-TYPE-1 (PLACE-NAME BAD-VALUE TYPE &OPTIONAL TYPE-STRING NOT-PROCEEDABLE)
  (DECLARE (DBG:ERROR-REPORTER))
  (MULTIPLE-VALUE-BIND (FUNCTION ARGNUM)
      (DBG:INTERESTING-ACTIVE-FRAME-FUNCTION-AND-ARG-NUMBER PLACE-NAME BAD-VALUE
							    (%STACK-FRAME-POINTER))
    (IF NOT-PROCEEDABLE
	(ERROR 'WRONG-TYPE-DATUM
	       :FUNCTION FUNCTION
	       :NAME PLACE-NAME
	       :BAD-VALUE BAD-VALUE
	       :EXPECTED-TYPE TYPE
	       :TYPE-DESCRIPTION TYPE-STRING
	       :ARG-NUMBER ARGNUM)
	(SIGNAL-PROCEED-CASE ((VAL1) 'WRONG-TYPE-DATUM
			      :FUNCTION FUNCTION
			      :NAME PLACE-NAME
			      :BAD-VALUE BAD-VALUE
			      :EXPECTED-TYPE TYPE
			      :TYPE-DESCRIPTION TYPE-STRING
			      :ARG-NUMBER ARGNUM)
	  (:NEW-VALUE VAL1)))))

(COMPILE-FLAVOR-METHODS CONDITIONS:SIMPLE-TYPE-ERROR)
