;;; -*- Mode: Lisp; Package: Common-lisp-internals; Syntax: Common-Lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Chapter 15

;;; (LAST 'A) => 'A
;;; It's not clear that this is what we want.
#-3600						;microcoded on the 3600
(defun last-1 (list)
  (declare (side-effects reader reducible))
  (let ((next list))
    (loop
      (when (atom next) (return))
      (setq next (cdr (setq list next))))
    list))

#-3600
(defun last-0 (list)
  (declare (side-effects reader reducible))
  (loop
    (when (atom list) (return))
    (setq list (cdr list)))
  list)

;;; Note the use of simple kindergarten subtraction rather than doing arithmetic.
;;; Arithmetic is only useful if you know the numbers.
(defun last (list &optional (n 1))
  (declare (side-effects reader reducible))
  (check-type n (integer 0))
  (do ((r list)
       (l (do ((i n (1- i))
	       (l list (cdr l)))
	      ((or (atom l) (<= i 0)) l))	;like nthcdr but forgiving of atoms
	  (cdr l)))
      ((atom l) r)
    (pop r)))

(compiler:defoptimizer (last last-optimizer) (form)
  (compiler:matchp form
    (('last list) `(last-1 ,list))
    (('last list '1) `(last-1 ,list))
    (('last list '0)
     #+3600 `(cdr (last-1 ,list))
     #-3600 `(last-0 ,list))
    (* form)))

;;;We are going to have to look at every cons twice no matter what
;;;happens.  If we have to page through it twice, it's better than
;;;n times.
(defun butlast (x &optional (n 1))
  (declare lt:(side-effects reader reducible))
  (let ((list-length (list-length x)))
    (and (< n list-length)
	 (loop with list = (make-list (- list-length n))
	       for sublist on list
	       do (setf (car sublist) (pop x))
	       finally (return list)))))

(defun nbutlast (list &optional (n 1))
  (let ((list-length (list-length list)))
    (and (< n list-length)
	 (loop with node = list
	       repeat (- list-length n 1)
	       do (pop node)
	       finally (setf (cdr node) nil)
		       (return list)))))

(deftest-key-macro subst-
		   ((:2arg-fast subst-fast (new old tree)
				(side-effects reader reducible))
		    (:2arg subst (new old tree))
		    (:2arg-test subst-test (new old tree test))
		    (:if subst-if old)
		    (:if-not subst-if-not old))
		   (new tree)
  (cond ((test-key-macro-test tree old) new)
	((atom tree) tree)
	(t
	 (let* ((output tree)
		(output-ptr (locf output))
		(unshared-output-ptr (locf output)))
	   (do ((s tree (cdr s)))
	       ((atom s)
		(let ((new-cdr (if (test-key-macro-test s old) new s)))
		  (unless (eq s new-cdr)
		    (unshare-list-macro output-ptr unshared-output-ptr)
		    (rplacd output-ptr new-cdr))))
	     (let ((new-car (test-key-macro-case-f fname
			      (:2arg-fast '(cond ((atom (car s))
						  (if (eql old (car s))
						      new
						      (car s)))
						 (t (subst-fast new old (car s)))))
			      (:2arg `(funcall #',fname new old (car s)
					       :test test :test-not test-not :key key))
			      (:2arg-test '(cond ((atom (car s))
						  (if (funcall test old (car s))
						      new
						      (car s)))
						 (t (subst-test new old (car s) test))))
			      (t `(funcall #',fname new predicate (car s) :key key))))
		   (new-cdr (if (test-key-macro-test (cdr s) old) new (cdr s))))
	       (cond ((and (eq new-cdr (cdr s)) (eq new-car (car s)))
		      ;; Don't explode if OUTPUT-PTR is now an atom.  We
		      ;; have to do the check this way, because ATOM of
		      ;; a locative is always T, and LISTP of a locative
		      ;; is always NIL, but we want to take the CDR of a
		      ;; locative without ever trying to do so for an
		      ;; atom.
		      (when (or (locativep output-ptr)
				(listp output-ptr))
			(setq output-ptr (cdr output-ptr))))
		     (t
		      (unshare-list-macro output-ptr unshared-output-ptr)
		      (rplacd output-ptr (cons new-car new-cdr))
		      (setq output-ptr (cdr output-ptr)
			    unshared-output-ptr output-ptr)))))
	   output))))

(define-keyword-to-positional-arguments-optimizers subst
  (new old tree &key (test #'eql) test-not (key #'identity))
  ((new old tree :test test) (subst-test new old tree test)))

(deftest-key-macro nsubst-
		   ((:2arg-fast nsubst-fast (new old tree))
		    (:2arg nsubst (new old tree))
		    (:2arg-test nsubst-test (new old tree test))
		    (:if nsubst-if old)
		    (:if-not nsubst-if-not old))
		   (new tree)
  (cond ((test-key-macro-test tree old) new)
	((atom tree) tree)
	(t (do ((s tree (cdr s))
		(prev nil s))
	       ((atom s)
		(let ((new-cdr (if (test-key-macro-test s old) new s)))
		  (or (eq new-cdr s) (rplacd prev new-cdr))))
	     (rplaca s (test-key-macro-case-f fname
			 (:2arg-fast '(cond ((atom (car s))
					     (if (eql old (car s))
						 new
						 (car s)))
					    (t (nsubst-fast new old (car s)))))
			 (:2arg `(funcall #',fname new old (car s)
					  :test test :test-not test-not :key key))
			 (:2arg-test '(cond ((atom (car s))
					     (if (funcall test old (car s))
						 new
						 (car s)))
					    (t (nsubst-test new old (car s) test))))
			 (t `(funcall #',fname new predicate (car s) :key key))))
	     (let ((new-cdr (if (test-key-macro-test (cdr s) old) new (cdr s))))
	       (unless (eq (cdr s) new-cdr)
		 (rplacd s new-cdr))))
	   tree)))

(define-keyword-to-positional-arguments-optimizers nsubst
  (new old tree &key (test #'eql) test-not (key #'identity))
  ((new old tree :test test) (nsubst-test new old tree test)))

(deftest-key-macro sublis-
		   ((:2arg-fast sublis-fast (alist tree)
				(side-effects reader reducible))
		    (:2arg sublis))
		   (alist tree)
  (block sublis
    (test-key-macro-case
      (:2arg-fast (loop for (item-key . new-value) in alist
			do (when (eql item-key tree)
			     (return-from sublis new-value))))
      (:2arg (let ((element (if key
				(funcall key tree)
			      tree)))
	       (loop for (item-key . new-value) in alist
		     do (when (eq not-test (notnull (funcall test item-key element)))
			  (return-from sublis new-value))))))
    (cond ((atom tree) tree)
	  (t (let* ((output tree)
		    (output-ptr (locf output))
		    (unshared-output-ptr (locf output)))
	       (do ((s tree (cdr s)))
		   ((atom s)
		    (let ((new-cdr (test-key-macro-case
				     (:2arg-fast (sublis-fast alist s))
				     (:2arg (sublis
					      alist s
					      :test test :test-not test-not :key key)))))
		      (unless (eq new-cdr s)
			(unshare-list-macro output-ptr unshared-output-ptr)
			(rplacd output-ptr new-cdr))))
		 (let ((new-car (test-key-macro-case
				  (:2arg-fast (sublis-fast alist (car s)))
				  (:2arg (sublis alist (car s)
						 :test test :test-not test-not :key key))))
		       (new-cdr (test-key-macro-case
				  (:2arg-fast (loop for (item-key . new-value) in alist
						    with tree = (cdr s)
						    when (eql item-key tree)
						      return new-value
						    finally (return tree)))
				  (:2arg
				    (let ((element (if key (funcall key (cdr s))
						     (cdr s))))
				      (loop for (item-key . new-value) in alist
					    when (eq not-test
						     (notnull (funcall test item-key element)))
					      return new-value
					    finally (return (cdr s))))))))
		   (cond ((and (eq new-cdr (cdr s)) (eq new-car (car s)))
			  (setq output-ptr (cdr output-ptr)))
			 (t (unshare-list-macro output-ptr unshared-output-ptr)
			    (rplacd output-ptr (cons new-car new-cdr))
			    (setq output-ptr (cdr output-ptr)
				  unshared-output-ptr output-ptr)))))
	       output)))))

(deftest-key-macro nsublis-
		   ((:2arg-fast nsublis-fast (alist tree))
		    (:2arg nsublis))
		   (alist tree)
  (block nsublis
    (test-key-macro-case
      (:2arg-fast (loop for (item-key . new-value) in alist
			do (when (eql item-key tree)
			     (return-from nsublis new-value))))
      (:2arg (let ((element (if key
				(funcall key tree)
			      tree)))
	       (loop for (item-key . new-value) in alist
		     do (when (eq not-test (notnull (funcall test item-key element)))
			  (return-from nsublis new-value))))))
    (cond ((atom tree) tree)
	  (t (do ((s tree (cdr s))
		  (prev nil s))
		 ((atom s)
		  (let ((new-cdr (test-key-macro-case
				   (:2arg-fast (nsublis-fast alist s))
				   (:2arg (nsublis alist s
						   :test test :test-not test-not :key key)))))
		    (unless (eq new-cdr s)
		      (rplacd prev new-cdr))))
	       (setf (car s) (test-key-macro-case
			       (:2arg-fast (nsublis-fast alist (car s)))
			       (:2arg (nsublis alist (car s)
					       :test test :test-not test-not :key key))))
	       (let ((new-cdr (test-key-macro-case
				(:2arg-fast (loop for (item-key . new-value) in alist
						  with tree = (cdr s)
						  when (eql item-key tree)
						    return new-value
						  finally (return tree)))
				(:2arg
				  (let ((element (if key (funcall key (cdr s))
						   (cdr s))))
				    (loop for (item-key . new-value) in alist
					  when (eq not-test
						   (notnull (funcall test item-key element)))
					    return new-value
					  finally (return (cdr s))))))))
		 (unless (eq (cdr s) new-cdr)
		   (setf (cdr s) new-cdr))))
	     tree))))

(deftest-key-macro member-
		   ((:2arg-fast member-fast (item list)
				(safeguarded-function)
				(side-effects reader reducible))
		    (:2arg member (item list))
		    (:2arg-test member-test (item list test))
		    (:2arg-= member-= (item list))
		    (:2arg-char= member-char= (item list))
		    (:if member-if item)
		    (:if-not member-if-not item))
		   ()
  (test-key-macro-case
    (nil (memql item list))			;MEMQL in microcode on CADR
    (t
      (loop for node on list
	    do (compiler:%error-when (test-key-macro-test (car node) item)
		 (return node))))))

(defun member-equal (item list)
  (declare (side-effects reader reducible))
  (if (not #+3600 (or (consp item) (arrayp item))
	   #+IMach (type-member item dtp-list dtp-string dtp-array))
      (member-fast item list)
      (loop for node on list
	    do (compiler:%error-when (equal (car node) item)
		 (return node)))))

(defun member-equalp (item list)
  (declare (side-effects reader reducible))
  (if (not #+3600 (or (consp item) (numberp item) (characterp item) (arrayp item))
	   #+IMach (let ((item item))
		     (type-member item dtp-list dtp-string dtp-array
				  dtp-fixnum dtp-bignum dtp-small-ratio dtp-big-ratio
				  dtp-single-float dtp-double-float dtp-complex
				  dtp-spare-number dtp-character)))
      (member-fast item list)
      (loop for node on list
	    do (compiler:%error-when (equalp (car node) item)
		 (return node)))))

(define-keyword-to-positional-arguments-optimizers member
  (item list &key (test #'eql) test-not (key #'identity))
  ((item list :test #'equal) (member-equal item list))
  ((item list :test #'equalp) (member-equalp item list))
  ((item list :test #'=) (member-= item list))
  ((item list :test #'char=) (member-char= item list))
  ((item list :test #'zl:equal) (zl:member item list))
  ((item list :test test) (member-test item list test)))

#+imach
(define-instruction-exception-handler member trap-mode-emulator (item list)
  (declare (notinline member-fast)
	   (safeguarded-function disable-reference-validation))
  (values (member-fast item list)))


(defparameter *member-constant-list-optimization-length-limit* 4
  "Maximum length of constant list for which the compiler will open code (member x list).")

(compiler:defoptimizer (member member-to-tests) (form)
  (block optimizer
    (block match
      (when (eq 'boolean (compiler:destination-usage compiler:*optimizer-destination* 0))
	(compiler:matchp form
	  ((* item list . keys)
	   (multiple-value-bind (optimize-p list list-quoted)
	       (if (constantp list compiler:*optimizer-environment*)
		   (let ((list (evaluate-constant list compiler:*optimizer-environment*)))
		     (values
		       (not (and (integerp *member-constant-list-optimization-length-limit*)
				 (> (length list)
				    *member-constant-list-optimization-length-limit*)))
		       list t))
		   (let ((list (compiler:undo-list-optimization list)))
		     (when (and (consp list)
				(eql (first list) 'list))
		       (values t (rest list) nil))))
	     (when (and optimize-p (null (cdr (last list))))	;well-formed lists
	       (when (null list)
		 (return-from optimizer `(progn ,item ,@keys nil)))
	       (let ((test-p nil)
		     (test-not-p nil)
		     (key-p nil)
		     (test ''eql)
		     (key ''identity))
		 (loop for (keyword value) on keys by #'cddr
		       do (unless (constantp keyword compiler:*optimizer-environment*)
			    (return-from match))
			  (setq keyword
				(evaluate-constant keyword
						   compiler:*optimizer-environment*))
			  (unless (and (consp value)
				       (member (first value) '(quote function))
				       (consp (rest value))
				       (null (rest (rest value))))
			    (return-from match))
			  (case keyword
			    (:test
			      (unless test-p (setq test-p t test value)))
			    (:test-not
			      (unless test-not-p (setq test-not-p t test value)))
			    (:key
			      (unless key-p (setq key-p t key value)))
			    (otherwise (return-from match))))
		 (when (and test-p test-not-p) (return-from match))
		 (flet ((make-test (item list-item)
			  ;; need to optimize out the funcall if possible, for let-subst
			  (let* ((key-value (compiler:funcall-function
					      `(funcall ,key ,(if list-quoted
								  `',list-item
								  list-item))))
				 (test (compiler:funcall-function
					 `(funcall ,test ,item ,key-value))))
			    (if test-not-p
				`(not ,test)
				test))))
		   (when (= (length list) 1)
		     (return-from optimizer
		       (make-test item (first list))))
		   (let ((item-var (gensym)))
		     (return-from optimizer
		       (if list-quoted
			   (let-subst `(,item-var) `(,item)
				      `(or ,@(mapcar #'(lambda (x)
							 (make-test item-var x))
						     list))
				      compiler:*optimizer-environment*)
			   (let ((list-vars (make-list (length list))))
			     (loop for list-var-cons on list-vars
				   do (setf (first list-var-cons) (gensym)))
			     (let-subst `(,item-var ,@list-vars) `(,item ,@list)
					`(or ,@(mapcar #'(lambda (x)
							   (make-test item-var x))
						       list-vars))
					compiler:*optimizer-environment*)))))))))))))
    form))

(deftest-key-macro adjoin-
		   ((:2arg-fast adjoin-fast)
		    (:2arg adjoin (item list &key (area default-cons-area)
						  (localize nil) (replace nil))))
		   (item list)
  (test-key-macro-case
    (:2arg-fast (if (member item list) list (cons item list)))
    (otherwise
      (let ((sublist (loop with x = (test-key-macro-extract-key item)
			   for sublist on list
			   when (test-key-macro-test (car sublist) x)
			     return sublist)))
	(cond (sublist
	       (when replace
		 (rplaca sublist item))
	       list)
	      (localize
	       (cons-localize item list area localize))
	      (t
	       (cons-in-area item list area)))))))

(defun localize-list (list &optional area)
  (loop for l = list then (cdr l) until (atom l)
	as prev-page = nil then page
	as page = (ldb %%vma-page-num (%pointer l))
	count (not (eql page prev-page)) into pages
	count t into conses
	finally
	  (return (if (> pages (max (ceiling conses (floor page-size 4)) 3))
		      (copy-list list area)
		      list))))

(defun localize-tree (tree &optional (n-levels 100) area)
  (with-stack-array (prev-page n-levels)
    (with-stack-array (prev-tree n-levels)
      (let ((level 0) (pages 0) (conses 0) (tr tree) page)
	(loop
	  (cond ((consp tr)
		 (incf conses)
		 (setq page (ldb %%vma-page-num (%pointer tr)))
		 (unless (eql page (aref prev-page level))
		   (incf pages))
		 (setf (aref prev-page level) page)
		 (cond ((and (consp (car tr)) (< level (1- n-levels)))
			(setf (aref prev-tree level) (cdr tr))
			(setq tr (car tr))
			(incf level)
			(unless (aref prev-page level)
			  (setf (aref prev-page level) page)))
		       (t (setq tr (cdr tr)))))
		((zerop level) (return))
		(t (decf level)
		   (setq tr (aref prev-tree level)))))
	(unless (> pages (max (ceiling conses (floor page-size 4)) 3))
	  (return-from localize-tree tree))
	(when (atom tree)
	  (return-from localize-tree tree))
	;; copy-tree with restricted number of levels
	(unless area
	  (setq area (si:default-copy-area-argument tree)))
	(setq tr tree)
	(loop with copy = t do
	  (cond ((consp tr)
		 (when copy
		   (setq tr (copy-list tr area))
		   (when (zerop level)
		     (setq tree tr)))
		 (cond ((= level (1- n-levels))
			(setq tr nil))
		       ((consp (car tr))
			(setf (aref prev-tree level) (cdr tr))
			(setq tr (car tr))
			(setq copy t)
			(incf level))
		       (t
			(setq tr (cdr tr))
			(setq copy nil))))
		((zerop level) (return))
		(t (decf level)
		   (setq tr (aref prev-tree level))
		   (setq copy nil))))
	tree))))

;;; These were dumped out by expansions of PUSHNEW for a while.  So leave them in
;;; for a release for compatibility.
(defun adjoin-in-area (item list area &rest adjoin-keywords)
  (apply #'adjoin item list :area area adjoin-keywords))

(defun adjoin-localize (item list area localize &rest adjoin-keywords)
  (apply #'adjoin item list :area area :localize localize adjoin-keywords))

(defun cons-localize (car cdr area localize)
  (declare (side-effects reader))
  (let ((list (cons-in-area car cdr area)))
    (cond ((null localize) list)
	  ((or (eq localize t) (eql localize 1)) (localize-list list area))
	  (t (check-type localize (integer 1 *))
	     (localize-tree list localize area)))))

;;; Take advantage of the specifications that if an input contains duplicates
;;; the output may also contain duplicates, that the order of elements in
;;; the result is unspecified, and that UNION is permitted to share structure
;;; with its arguments, to make UNION and NUNION faster.

(deftest-key-macro union-
		   ((:2arg-fast union-fast ()
				(side-effects reader reducible))
		    (:2arg union))
		   (list1 list2)
  (cond ((null list1) list2)
	((null list2) list1)
	((and (test-key-macro-case
		(:2arg-fast t)
		(otherwise nil))	;Optimization not valid for noncommutative tests.
	      (eq list1 list2))
	 list1)
	(t (dolist (item list2)
	     (unless (loop with x = (test-key-macro-extract-key item)
			   for test-item in list1
			   thereis (test-key-macro-test-2 x test-item))
	       (push item list1)))
	   list1)))

(deftest-key-macro nunion-
		   ((:2arg-fast nunion-fast)
		    (:2arg nunion))
		   (list1 list2)
  (cond ((null list1) list2)
	((null list2) list1)
	((and (test-key-macro-case
		(:2arg-fast t)
		(otherwise nil))	;Optimization not valid for noncommutative tests.
	      (eq list1 list2)) list1)
	(t 
	 (let ((tail (if list1 (last list1) (locf list1))))
	   (loop while list2
		 do (cond ((loop with item = (test-key-macro-extract-key (car list2))
				 for test-item in list1
				 thereis (test-key-macro-test-2 item test-item))
			   (setq list2 (cdr list2)))
			  (t
			   (rplacd tail list2)
			   (setq tail list2)
			   (rplacd (prog1 list2 (setq list2 (cdr list2))) nil))))
	   list1))))

(deftest-key-macro intersection-
		   ((:2arg-fast intersection-fast ()
				(side-effects reader reducible))
		    (:2arg intersection))
		   (list1 list2)
  (cond ((null list1) nil)
	((null list2) nil)
	((and (test-key-macro-case
		(:2arg-fast t)
		(otherwise nil))	;Optimization not valid for noncommutative tests.
	      (eq list1 list2))
	 list1)
	(t
	 ;; Remove elements from the front of list1, as required
	 (loop named top
	       until (endp list1)
	       as item = (car list1)
	       do (when (loop with x = (test-key-macro-extract-key item)
			      for test-item in list2
			      thereis (test-key-macro-test test-item x))
		    ;; Take matching tail of list1 if possible
		    (loop with tail1 = list1 do
		      (setq tail1 (cdr tail1))
		      (when (endp tail1)
			(return-from top list1))
		      (setq item (car tail1))
		      (unless (loop with x = (test-key-macro-extract-key item)
				    for test-item in list2
				    thereis (test-key-macro-test test-item x))
			;; Must create new structure
			(let* ((result nil)
			       (tail (locf result)))
			  (loop do (setq tail (cdr (rplacd tail (cons (car list1) nil))))
				   (setq list1 (cdr list1))
				until (eq list1 tail1))
			  (loop do (when (loop with x = (test-key-macro-extract-key item)
					       for test-item in list2
					       thereis (test-key-macro-test test-item x))
				     (setq tail (cdr (rplacd tail (cons item nil)))))
				   (setq list1 (cdr list1))
				   (setq item (car list1))
				until (endp list1))
			  (return-from top result)))))
		  (setq list1 (cdr list1))))))

;; This is intended to be a compiler optimization for INTERSECTION, when called
;; for boolean value.  Currently the compiler can't tell easily if something is
;; called for boolean value, so there are explicit calls to this in the code.
(defun intersection-p (list1 list2)
  (and list1
       list2
       (or (eq list1 list2)
	   (loop for element in list1 thereis (member element list2)))))

(deftest-key-macro nintersection-
		   ((:2arg-fast nintersection-fast)
		    (:2arg nintersection))
		   (list1 list2)
  (cond ((null list1) nil)
	((null list2) nil)
	((and (test-key-macro-case
		(:2arg-fast t)
		(otherwise nil))	;Optimization not valid for noncommutative tests.
	      (eq list1 list2))
	 list1)
	(t
	 (let* ((result nil)
		(tail (locf result)))
	   (loop while list1
		 as next = (cdr list1)
		 when (loop with item = (test-key-macro-extract-key (car list1))
			    for test-item in list2
			    thereis (test-key-macro-test test-item item))
		   do (setq tail (cdr (rplacd tail (rplacd list1 nil))))
		 do (setq list1 next))
	   result))))

(deftest-key-macro set-difference-
		   ((:2arg-fast set-difference-fast ()
				(side-effects reader reducible))
		    (:2arg set-difference))
		   (list1 list2)
  ;; Remove elements from the front of list1, as required
  (loop named top
	until (endp list1)
	as item = (car list1)
	do (when (loop with x = (test-key-macro-extract-key item)
		       for test-item in list2
		       never (test-key-macro-test test-item x))
	     ;; Take non-matching tail of list1 if possible
	     (loop with tail1 = list1 do
	       (setq tail1 (cdr tail1))
	       (when (endp tail1)
		 (return-from top list1))
	       (setq item (car tail1))
	       (unless (loop with x = (test-key-macro-extract-key item)
			     for test-item in list2
			     never (test-key-macro-test test-item x))
		 ;; Must create new structure
		 (let* ((result nil)
			(tail (locf result)))
		   (loop do (setq tail (cdr (rplacd tail (cons (car list1) nil))))
			    (setq list1 (cdr list1))
			 until (eq list1 tail1))
		   (loop do (when (loop with x = (test-key-macro-extract-key item)
					for test-item in list2
					never (test-key-macro-test test-item x))
			      (setq tail (cdr (rplacd tail (cons item nil)))))
			    (setq list1 (cdr list1))
			    (setq item (car list1))
			 until (endp list1))
		   (return-from top result)))))
	   (setq list1 (cdr list1))))

(deftest-key-macro nset-difference-
		   ((:2arg-fast nset-difference-fast)
		    (:2arg nset-difference))
		   (list1 list2)
  (let* ((result nil)
	 (tail (locf result)))
    (loop while list1
	  as next = (cdr list1)
	  unless (loop with item = (test-key-macro-extract-key (car list1))
		       for test-item in list2
		       thereis (test-key-macro-test test-item item))
	  do (setq tail (cdr (rplacd tail (rplacd list1 nil))))
	  do (setq list1 next))
    result))

(deftest-key-macro set-exclusive-or-
		   ((:2arg-fast set-exclusive-or-fast ()
				(side-effects reader reducible))
		    (:2arg set-exclusive-or))
		   (list1 list2)
  (let* ((result nil)
	 (tail (locf result)))
    (loop for item in list1
	  unless (loop with x = (test-key-macro-extract-key item)
		       for test-item in list2
		       thereis (test-key-macro-test test-item x))
	  do (setq tail (cdr (rplacd tail (cons item nil)))))
    (loop for item in list2
	  unless (loop with x = (test-key-macro-extract-key item)
		       for test-item in list1
		       thereis (test-key-macro-test-2 x test-item))
	  do (setq tail (cdr (rplacd tail (cons item nil)))))
    result))

(deftest-key-macro nset-exclusive-or-
		   ((:2arg-fast nset-exclusive-or-fast)
		    (:2arg nset-exclusive-or))
		   (list1 list2)
  (let* ((result nil)
	 (tail (locf result)))
    (loop for item in list1
	  unless (loop with x = (test-key-macro-extract-key item)
		       for test-item in list2
		       thereis (test-key-macro-test test-item x))
	  do (setq tail (cdr (rplacd tail (cons item nil)))))
    (loop while list2
	  as next = (cdr list2)
	  unless (loop with item = (test-key-macro-extract-key (car list2))
		       for test-item in list1
		       thereis (test-key-macro-test-2 item test-item))
	  do (setq tail (cdr (rplacd tail (rplacd list2 nil))))
	  do (setq list2 next))
    result))

(deftest-key-macro subsetp-
		   ((:2arg-fast subsetp-fast ()
				(side-effects reader reducible))
		    (:2arg subsetp))
		   (list1 list2)
  (or (and (test-key-macro-case
	     (:2arg-fast t)
	     (otherwise nil))	;Optimization not valid for noncommutative tests.
	   (eq list1 list2))
      (dolist (item list1 t)
	(setq item (test-key-macro-extract-key item))
	(unless (loop for test-item in list2
		      thereis (test-key-macro-test test-item item))
	  (return nil)))))

;;; This function is not in Common Lisp.  It or something like it probably should be
;;; there, since it is generally useful (in rather obscure circumstances).
(defun cartesian-product (&rest sets)
  ;; Given N sets, produce a new set, each element of which is a list, N elements long and
  ;; whose i-th element is a member if the i-th set.  All such lists are generated.
  ;; Note, subproducts are shared list structure.
  (labels ((cp1 (sets)
	     (cond ((null sets) nil)
		   ((null (cdr sets))
		    (mapcar #'list (car sets)))
		   (t (let ((product nil)
			    (sub-product (cp1 (cdr sets))))
			(dolist (set-element (car sets))
			  (dolist (sub-product-element sub-product)
			    (push (cons set-element sub-product-element) product)))
			product)))))
    (cp1 sets)))

(defun acons (key datum alist)
  (declare lt:(side-effects reader))
  (cons (cons key datum) alist))

(defun pairlis (keys data &optional a-list)
  (declare lt:(side-effects reader reducible))
  (unless (= (list-length keys)
	     (list-length data))
    (error "Different number of keys than data."))
  (loop for key in keys
	and datum in data
	do (push (cons key datum) a-list))
  a-list)

(deftest-key-macro assoc-
		   ((:2arg-fast assoc-fast (item a-list)
				(safeguarded-function)
				(side-effects reader reducible))
		    (:2arg assoc (item a-list))
		    (:2arg-test assoc-test (item a-list test))
		    (:2arg-= assoc-= (item a-list))
		    (:2arg-char= assoc-char= (item a-list))
		    (:if assoc-if item)
		    (:if-not assoc-if-not item))
		   (a-list)
  (test-key-macro-case
    (nil (assql item a-list))
    (t
      (dolist (pair a-list)
	(when pair
	  (compiler:%error-when (test-key-macro-test (car pair) item)
	    (return pair)))))))

(defun assoc-equal (item a-list)
  (declare (side-effects reader reducible))
  (if (not #+3600 (or (consp item) (arrayp item))
	   #+IMach (type-member item dtp-list dtp-string dtp-array))
      (assoc-fast item a-list)
      (dolist (pair a-list)
	(when pair
	  (compiler:%error-when (equal (car pair) item)
	    (return pair))))))

(defun assoc-equalp (item a-list)
  (declare (side-effects reader reducible))
  (if (not #+3600 (or (consp item) (numberp item) (characterp item) (arrayp item))
	   #+IMach (let ((item item))		;put it on TOS
		     (type-member item dtp-list dtp-string dtp-array
				  dtp-fixnum dtp-bignum dtp-small-ratio dtp-big-ratio
				  dtp-single-float dtp-double-float dtp-complex
				  dtp-spare-number dtp-character)))
      (assoc-fast item a-list)
      (dolist (pair a-list)
	(when pair
	  (compiler:%error-when (equalp (car pair) item)
	    (return pair))))))

(define-keyword-to-positional-arguments-optimizers assoc
  (item a-list &key (test #'eql) test-not (key #'identity))
  ((item a-list :test #'equal) (assoc-equal item a-list))
  ((item a-list :test #'equalp) (assoc-equalp item a-list))
  ((item a-list :test #'=) (assoc-= item a-list))
  ((item a-list :test #'char=) (assoc-char= item a-list))
  ((item a-list :test #'zl:equal) (zl:assoc item a-list))
  ((item a-list :test test) (assoc-test item a-list test)))

#+imach
(define-instruction-exception-handler assoc trap-mode-emulator (item list)
  (declare (notinline assoc-fast)
	   (safeguarded-function disable-reference-validation))
  (values (assoc-fast item list)))


(deftest-key-macro rassoc-
		   ((:2arg-fast rassoc-fast (item a-list)
				(side-effects reader reducible))
		    (:2arg rassoc (item a-list))
		    (:if rassoc-if item)
		    (:if-not rassoc-if-not item))
		   (a-list)
  (dolist (pair a-list)
    (when pair
      (if (test-key-macro-test (cdr pair) item)
	  (return pair)))))

(defun tree-equal (x y &key test test-not)
  (when (and (null test) (null test-not))
    (setq test #'eql))
  (cond (test-not
	 (tree-equal-not-recurse x y test-not))
	(t (tree-equal-recurse x y test))))

(defun tree-equal-recurse (x y test)
  (loop
    (cond ((atom x)
	   (return (if (atom y)
		       (funcall test x y)
		       nil)))
	  ((atom y) (return nil))
	  ((not (tree-equal-recurse (car x) (car y) test))
	   (return nil)))
    (setq x (cdr x) y (cdr y))))

(defun tree-equal-not-recurse (x y test-not)
  (loop
    (cond ((atom x)
	   (return (if (atom y)
		       (not (funcall test-not x y))
		       nil)))
	  ((atom y) (return nil))
	  ((not (tree-equal-not-recurse (car x) (car y) test-not))
	   (return nil)))
    (setq x (cdr x) y (cdr y))))

;Mary Poppins' idea of list-length: returns NIL if list is circular (shafting caller no doubt)
;This code has been carefully bummed for the 3600
(defun list-length (list)
  (declare lt:(side-effects reader reducible))
  (let ((tail list)
	(n 0))
    (loop (compiler:%error-when (endp tail)
	    (return-from list-length n))
	  (setq tail (cdr tail))
	  (compiler:%error-when (endp tail)
	    (return-from list-length (+ n 1)))
	  (setq tail (cdr tail))
	  (compiler:%error-when (endp tail)
	    (return-from list-length (+ n 2)))
	  (setq tail (cdr tail))
	  (compiler:%error-when (endp tail)
	    (return-from list-length (+ n 3)))
	  (setq tail (cdr tail) n (+ n 4))
	  (setq list (cdr list))
	  (when (eq tail list)
	     (return-from list-length nil)))
    n))

;;Substs so that they can be setf'ed

(defsubst first (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 0 list))

(defsubst second (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 1 list))

(defsubst third (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 2 list))

(defsubst fourth (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 3 list))

(defsubst fifth (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 4 list))

(defsubst sixth (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 5 list))

(defsubst seventh (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 6 list))

(defsubst eighth (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 7 list))

(defsubst ninth (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 8 list))

(defsubst tenth (list)
  (declare lt:(side-effects reader))
  (declare (compiler:do-not-record-macroexpansions))
  (nth 9 list))

(defsubst make-list (size &key initial-element area)	;area is an SCL extension
  (declare lt:(side-effects reader))
  (si:%make-list initial-element area size))

;; This could be a lot more efficient.
(defun revappend (x y)
  (declare lt:(side-effects reader reducible))
  (loop with answer = y
	for element in x
	finally (return answer)
	do (setq answer (cons element answer))))

