;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; draws a picture of three "eql" ellipses surrounded by different parallelograms

(defun draw-parallelogram-for-ellipses (&optional (stream *standard-output*))
  (let ((angle (atan 3/4)))
    (graphics:with-room-for-graphics (stream 160)
      (macrolet ((with-transformed-vectors ((dx1 dy1 dx2 dy2) &body body)
		   `(multiple-value-bind (,dx1 ,dy1) (transform-vector ,dx1 ,dy1)
		      (multiple-value-bind (,dx2 ,dy2) (transform-vector ,dx2 ,dy2)
			,.body))))
	(labels ((transform-vector (dx dy)
		   (values (- (* 8/5 dx) (* 3/5 dy))
			   (+ (* 6/5 dx) (* 4/5 dy))))
		 (draw-vectors (dx1 dy1 dx2 dy2)
		   (with-transformed-vectors (dx1 dy1 dx2 dy2)
		     (graphics:draw-arrow 0 0 dx1 dy1 :stream stream)
		     (graphics:draw-arrow 0 0 dx2 dy2 :stream stream)
		     (let ((px+ (+ dx1 dx2)) (py+ (+ dy1 dy2))
			   (px- (- dx1 dx2)) (py- (- dy1 dy2)))
		       (with-stack-list (points px+ py+ px- py- (- px+) (- py+) (- px-) (- py-))
			 (graphics:draw-lines points :closed t :stream stream)))))
		 (draw-ellipse ()
		   (graphics:draw-ellipse 0 0 40 20 :rotation angle :filled nil :thickness 2 :stream stream)))
	  (graphics:with-graphics-translation (stream 80 80)
	    (draw-ellipse)
	    (draw-vectors 16 12 12 -16))
	  (graphics:with-graphics-translation (stream 180 80)
	    (draw-ellipse)
	    (draw-vectors 16 -12 12 16))
	  (graphics:with-graphics-translation (stream 280 80)
	    (draw-ellipse)
	    (draw-vectors 20 0 0 20)))))))



#||
()

(with-open-stream (*standard-output* (hardcopy:make-hardcopy-stream 
 			'(:file "aa:>jga>clim>different-ellipses.ps")))
  ;(send *standard-output* :set-eps-bounding-box `(0 0 380 160))
  (drawit))

||#
