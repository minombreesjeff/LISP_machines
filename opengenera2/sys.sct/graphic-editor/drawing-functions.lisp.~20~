;;; -*- Mode: LISP; Syntax: Common-LISP; Package: Graphic-input; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Things for doing output, which might be considered for promotion to graphics:.

(defun triangle-colinear-p (x1 y1 x2 y2 x3 y3)
  (zerop #(x2-x1)*(y3-y1)-(y2-y1)*(x3-x1)))

(defun atan-careful (dy dx &optional (default 0))
  (if (and (zerop dy) (zerop dx)) default (atan dy dx)))

(defun sample-curve (points how &rest parameters)
  (sys:with-stack-array (sample 100 :fill-pointer 0)
    (let ((last-x (elt points 0))
	  (last-y (elt points 1)))
      (vector-push-extend last-x sample)
      (vector-push-extend last-y sample)
      (ecase how
	(:slope
	  (destructuring-bind (&key (maximum-change .25)) parameters
	    (let ((last-dx nil)
		  (last-dy nil))
	      (graphics:map-points
		#'(lambda (x y ignore)
		    (let ((dx (- x last-x))
			  (dy (- y last-y)))
		      (when last-dx
			(when (> (abs (- (* dx last-dy) (* dy last-dx)))
				 (abs (* maximum-change dx last-dx)))
			  (vector-push-extend last-x sample)
			  (vector-push-extend last-y sample)))
		      (setq last-dx dx last-dy dy))
		    (setq last-x x last-y y))
		points))))
	(:distance
	  (destructuring-bind (&key (step-length 10)) parameters
	    (let ((length^2 (expt step-length 2)))
	      (graphics:map-points
		#'(lambda (x y last-p)
		    (unless last-p
		      (let ((dx (- x last-x))
			    (dy (- y last-y)))
			(when (> (+ (* dx dx) (* dy dy)) length^2)
			  (vector-push-extend x sample)
			  (vector-push-extend y sample))))
		    (setq last-x x last-y y))
		points))))
	)
      (vector-push-extend last-x sample)
      (vector-push-extend last-y sample))
    (copy-seq sample)))

(defun presentations-displayed-box (presentations)
  (when presentations
    (if (rest presentations)
	(loop for presentation in presentations
	      as box = (dw:presentation-displayed-box presentation)
	      minimize (dw:box-left box) into left
	      maximize (dw:box-right box) into right
	      minimize (dw:box-top box) into top
	      maximize (dw:box-bottom box) into bottom
	      finally (return (dw:make-temporary-box left top right bottom)))
	(dw:presentation-displayed-box (first presentations)))))

(defun erase-presentations (presentations &key (stream *standard-output*)
					       (redisplay-overlapping-presentations t))
  (dolist (presentation presentations)
    (send stream :erase-displayed-presentation presentation
		 :clear-inferiors nil
		 :redisplay-overlapping-presentations redisplay-overlapping-presentations)))

(defun unerase-presentations (presentations &key (stream *standard-output*) box)
  (when presentations
    (dolist (presentation presentations)
      (send stream :unerase-displayed-presentation presentation))
    (send stream :redraw-inside-sets
	  (or box (presentations-displayed-box presentations)) nil)))

(defun draw-quarter-ellipse (from-x from-y to-x to-y &rest args)
  (if (or (= from-x to-x) (= from-y to-y))
      (apply #'graphics:draw-line from-x from-y to-x to-y :allow-other-keys t args)
      (multiple-value-bind (start-angle end-angle clockwise)
	  (if (> from-x to-x)
	      (if (> from-y to-y)
		  ;; Fourth quadrant
		  (values 0 (* pi 3/2) t)
		  ;; First quadrant
		  (values 0 (/ pi 2) nil))
	      (if (> from-y to-y)
		  ;; Third quadrant
		  (values pi (* pi 3/2) nil)
		  ;; Second quadrant
		  (values pi (/ pi 2) t)))
	(apply #'graphics:draw-ellipse to-x from-y (abs (- to-x from-x)) (abs (- to-y from-y))
	       :start-angle start-angle :end-angle end-angle :clockwise clockwise args))))

(defun draw-sized-string (string x y &rest args
			  &key (sizing :unscaled-one-point) toward-x toward-y
			  &allow-other-keys)
  (if (string-search-char #\return string)
      (apply #'draw-sized-multi-line-string string x y args)
      (si:with-rem-keywords (other-args args '(:sizing :toward-x :toward-y))
	(ecase sizing
	  (:unscaled-one-point
	    (apply #'graphics:draw-string string x y other-args))
	  ((:unscaled-tilted :unscaled-stretched :unscaled-tilted-and-stretched)
	   (apply #'graphics:draw-string string x y
		  :toward-x toward-x
		  :toward-y (if (member sizing '(:unscaled-tilted
						 :unscaled-tilted-and-stretched))
				toward-y y)
		  :stretch-p (member sizing '(:unscaled-stretched
					      :unscaled-tilted-and-stretched))
		  other-args))
	  ((:scaled-one-point :scaled-tilted :scaled-stretched :scaled-tilted-and-stretched)
	   (apply #'draw-scaled-string-image string x y toward-x toward-y other-args))))))

(defun draw-sized-multi-line-string (string x y &rest args
				     &key (stream *standard-output*)
					  character-style toward-x toward-y
				     &allow-other-keys)
  (let ((n-returns (count #\return string :test #'char-equal)))
    (stack-let ((substrings (make-array (1+ n-returns)))
		(string-widths (make-array (1+ n-returns) :initial-element 0))
		(string-heights (make-array (1+ n-returns) :initial-element 0)))
      (let ((index 0)
	    (i 0))
	(loop
	  (let* ((next-index (string-search-char #\return string :start index))
		 (substring (substring string index next-index)))
	    (setf (aref substrings i) substring)
	    (multiple-value-bind (width nil nil height)
		(if (eql next-index index)
		    (values 0 nil nil (send stream :line-height))
		    (send stream :draw-string-size substring character-style))
	      (setf (aref string-widths i) width
		    (aref string-heights i) height))
	    (when (null next-index)
	      (return))
	    (setq index (1+ next-index))
	    (incf i))))
      (let* ((dy 0)
	     (max-width (loop for width being the array-elements of string-widths
			      maximize width))
	     (toward-width (if toward-x (- toward-x x) max-width))
	     (toward-y (or toward-y y)))
	(loop for i downfrom n-returns to 0 do
	  (let ((substring (aref substrings i)))
	    (unless (zerop (string-length substring))
	      (apply #'draw-sized-string (aref substrings i) x (+ y dy)
		     :toward-x (+ x (* toward-width (/ (aref string-widths i) max-width)))
		     :toward-y (+ toward-y dy)
		     args)))
	  (incf dy (aref string-heights i)))))))

(defun multi-line-string-size (string &key character-style (stream *standard-output*))
  (let ((width 0)
	(index 0))
    (loop
      (let ((next-index (string-search-char #\return string :start index)))
	(unless (eql next-index index)
	  (maxf width (send stream :draw-string-size (substring string index next-index)
						     character-style)))
	(when (null next-index)
	  (return))
	(setq index (1+ next-index))))
    width))

(defun draw-scaled-string-image (string from-x from-y to-x to-y
				 &rest args
				 &key (stream *standard-output*) character-style
				      (fixed-font nil)
				 &allow-other-keys)
  (if fixed-font
      (apply #'graphics:draw-string-image string 0 0
	     :translation (list from-x from-y)
	     :rotation (if (and (= to-x from-x) (= to-y from-y)) 0
			   (atan (- to-y from-y) (- to-x from-x)))
	     :string-width (max 1 (sqrt (+ (expt (- to-x from-x) 2)
					   (expt (- to-y from-y) 2))))
	     :allow-other-keys t
	     args)
      (multiple-value-bind (nominal-width nil nil nominal-height)
	  (send stream :draw-string-size string character-style)
	(when (null to-x)
	  (setq to-x (+ from-x nominal-width)))
	(when (null to-y)
	  (setq to-y from-y))
	(apply #'graphics:draw-string-image string 0 0
	       :translation (list from-x from-y)
	       :rotation (if (and (= to-x from-x) (= to-y from-y)) 0
			     (atan (- to-y from-y) (- to-x from-x)))
	       :string-width nominal-width :character-size nominal-height
	       :scale-down-allowed nil
	       :scale (max .1 (/ (sqrt (+ (expt (- to-x from-x) 2)
					  (expt (- to-y from-y) 2)))
				 nominal-width))
	       :allow-other-keys t
	       args))))

;;; One way of smoothing out a curve.
(defun draw-midpoint-cubic-spline (points &rest args
					  &key (filled t) closed
					  &allow-other-keys)
  (stack-let ((midpoints (make-array (+ (length points) (if closed +2 -2)))))
    (let ((index 0) (last-x nil) (last-y nil))
      (graphics:map-points
	#'(lambda (x y last-p)
	    (when last-x
	      (setf (aref midpoints index) (/ (+ last-x x) 2)
		    (aref midpoints (1+ index)) (/ (+ last-y y) 2))
	      (incf index 2))
	    (when (and last-p closed)
	      (setf (aref midpoints index) (/ (+ x (elt points 0)) 2)
		    (aref midpoints (1+ index)) (/ (+ y (elt points 1)) 2))
	      (incf index 2)
	      (setf (aref midpoints index) (aref midpoints 0)
		    (aref midpoints (1+ index)) (aref midpoints 1)))
	    (setq last-x x last-y y))
	points))
    (si:with-rem-keywords (some-args args '(:closed :filled))
      (flet ((draw-it (&rest args)
	       (apply #'graphics:draw-cubic-spline midpoints
		      :start-relaxation (if closed :cyclic :relaxed)
		      args)))
	(if (not filled)
	    (apply #'draw-it some-args)
	    (apply #'graphics:draw-path #'(lambda (stream)
					    (draw-it :stream stream))
		   some-args))))))
