;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defcom com-insert-graphic-editor-drawing
	"Insert a drawing that is read into the graphic editor."
	()
  (let ((frame (dw:find-program-window 'graphic-editor:graphic-editor :create-p nil)))
    (unless frame
      (barf "Cannot find Graphic Editor program."))
    (let* ((editor (send frame :program))
	   (drawing (typein-line-accept
		      `((graphic-editor:drawing :editor ,editor))
		      :prompt "Drawing to insert"
		      :default (graphic-editor:graphic-editor-current-drawing editor)))
	   (scale (typein-line-accept 'cl:number :prompt "Scale" :default 1)))
      (insert-graphics-line-diagram (point)
				    :scale scale
				    :binary-encoding (graphic-editor:drawing-binary-encoding
						       drawing))))
  dis-text)

(defcom com-insert-graphic-editor-drawing-code
	"Insert code to reproduce a drawing that is read into the graphic editor."
	()
  (let ((frame (dw:find-program-window 'graphic-editor:graphic-editor :create-p nil)))
    (unless frame
      (barf "Cannot find Graphic Editor program."))
    (let* ((editor (send frame :program))
	   (drawing (typein-line-accept
		      `((graphic-editor:drawing :editor ,editor))
		      :prompt "Drawing to insert"
		      :default (graphic-editor:graphic-editor-current-drawing editor)))
	   (output-stream (open-interval-stream (point) (point) t
			    :flavor 'presentation-recording-interval-stream)))
      (point-pdl-push (point) *window*)
      (let ((pkg cl:*package*)
	    (rdtbl cl:*readtable*))
	(scl:with-standard-io-environment
	  (let ((cl:*print-pretty* t)
		(cl:*package* pkg)
		(cl:*readtable* rdtbl)
		(cl:*print-array* t))
	    (let-if (send *interval* :get :lowercase)
		    ((cl:*print-case* :downcase))
	      (graphic-editor:print-drawing-code drawing output-stream)))))
      (move-point (funcall output-stream :read-bp))))
  dis-text)

(defcom com-insert-image "Insert an image" ()
  (let* ((image (typein-line-accept `((images:named-image))
				    :prompt "Image to insert"))
	 (scale (typein-line-accept 'cl:number :prompt "Scale" :default 1)))
    (insert-graphics-line-diagram (point)
      :drawing-function #'(lambda (stream)
			    (images:with-image-raster (raster image :height height)
			      (graphics:draw-image raster 0 (- height)
						   :scale-y -1 :stream stream)))
      :scale scale))
  dis-text)

(set-comtab *standard-comtab* () (make-command-alist '(com-insert-image
						       com-insert-graphic-editor-drawing
						       com-insert-graphic-editor-drawing-code
						       )))

#|
|#
