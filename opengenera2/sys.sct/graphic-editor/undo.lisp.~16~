;;; -*- Mode: LISP; Syntax: Common-LISP; Package: undo-program; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Undo.  This could be separated out pretty easily.

(dw:define-program-framework undo-program
  :command-definer t
  :command-table (:inherit-from nil)
  :selectable nil
  :state-variables ((undo-history (make-undo-history)))
  )

(defflavor undo-history 
	((first-element nil)
	 (last-element nil)
	 (current-element nil)			;The last thing that got done/redone.
	 (assignment-index 0))
	()
  :readable-instance-variables
  (:constructor make-undo-history ()))

(defflavor undo-element
	(name
	 (previous nil)
	 (next nil)
	 index)
	()
  :initable-instance-variables
  :writable-instance-variables
  (:required-methods undo-element-initialize undo-element-undo undo-element-redo))

(defmethod (map-over-undo-history undo-history) (function)
  (labels ((this-tree (element)
	     ;;Scheme addicts may validly complain about lack of tail
	     ;;recursion optimization for writing this funny function.
	     (loop doing
	       (funcall function element)
	       (let ((next (undo-element-next element)))
		 (cond ((null next)
			(return))
		       ((atom next)
			(setq element next))
		       (t
			(dolist (element next)
			  (this-tree element))
			(return)))))
	     element))
    (when first-element
      (this-tree first-element))))

(define-presentation-type undo-element ((&key history))
   :no-deftype t
   :printer ((element stream)
	     (write-string (undo-element-name element) stream))
   :parser ((stream &key type)
	    (dw:completing-from-suggestions (stream :type type :allow-any-input nil)
	      (map-over-undo-history (or history
					 (undo-program-undo-history
					   (dw:current-program :type 'undo-program)))
				     #'(lambda (element)
					 (dw:suggest (undo-element-name element) element)))))
   )

(define-undo-program-command (com-undo )
    ((element `((null-or-type ((undo-element :history ,undo-history))))
	      :default nil :provide-default t))
   (undo-history-undo undo-history element))

(defun choose-undo-element (set &rest args &key default &allow-other-keys)
  (unless set (dw:command-error "There is nothing to undo."))
  (or (apply #'dw:menu-choose-from-set set 'undo-element
	     :printer #'(lambda (element stream)
			  (declare (sys:downward-function))
			  (if (eq element default)
			      (write-char #\arrow:right-short-open-arrow stream)
			      (send stream :increment-cursorpos 8 0))
			  (format stream " ~D. " (undo-element-index element))
			  (present element 'undo-element :stream stream))
	     args)
      (signal 'sys:abort)))

(defun linearize-undo-history (undo-history)
  (stack-let ((set (make-array 100 :fill-pointer 0)))
    (map-over-undo-history undo-history #'(lambda (element) (vector-push-extend element set)))
    (coerce set 'list)))

(dw:define-command-menu-handler ("Undo" undo-program :undo
				 :gesture (:left :right))
				(&key (gesture :left) window &allow-other-keys)
  (if dw:*command-menu-test-phase*
      (throw 'dw:command-menu-test-phase
	(cond ((neq dw:*command-menu-test-phase* :documentation)
	       '(com-undo ))
	      ((eq gesture :right)
	       "Menu for Undo")
	      (t
	       (let ((element (let ((program (dw:current-program :type 'undo-program
								 :window window
								 :error-p nil)))
				(when program
				  (undo-history-current-element
				    (undo-program-undo-history program))))))
		 (if element
		     `(com-undo ,element)
		     `(com-undo ))))))
      (if (eq gesture :right)
	  (let ((element (let ((history (undo-program-undo-history
					  (dw:current-program :type 'undo-program
							      :window window))))
			   (choose-undo-element (linearize-undo-history history)
						:default (undo-history-current-element
							   history)
						:prompt "Undo"))))
	    (when element
	      `(com-undo ,element)))
	  `(com-undo))))

(define-undo-program-command (com-redo )
    ((element `((null-or-type ((undo-element :history ,undo-history))))
	      :default nil :provide-default t))
   (undo-history-redo undo-history element))

(dw:define-command-menu-handler ("Redo" undo-program :undo
				 :gesture (:left :right))
				(&key (gesture :left) window &allow-other-keys)
  (if dw:*command-menu-test-phase*
      (throw 'dw:command-menu-test-phase
	(cond ((neq dw:*command-menu-test-phase* :documentation)
	       '(com-redo ))
	      ((eq gesture :right)
	       "Menu for Redo")
	      (t
	       (let ((element (let ((program (dw:current-program :type 'undo-program
								 :window window
								 :error-p nil)))
				(when program
				  (undo-history-next-element
				    (undo-program-undo-history program))))))
		 (if (and element (atom element))
		     `(com-redo ,element)
		     `(com-redo ))))))
      (if (eq gesture :right)
	  (let ((element (let ((history (undo-program-undo-history
					  (dw:current-program :type 'undo-program
							      :window window))))
			   (choose-undo-element (linearize-undo-history history)
						:default (undo-history-current-element
							   history)
						:prompt "Redo"))))
	    (when element
	      `(com-redo ,element)))
	  `(com-redo))))

(define-undo-program-command (com-undo-skip :menu-accelerator "Skip" :menu-level :undo)
    ()
   (undo-history-skip undo-history))

(defprop defundo defflavor zwei:definition-function-spec-type)

;;; Define an undo element type.  Used when there is additional state that must be
;;; captured into the history element at redo time.
(defmacro defundo (flavor-name variables &body options)
  `(progn
     (defflavor ,flavor-name ,variables (undo-element) . ,options)
     (defmethod (undo-element-initialize ,flavor-name) (&rest vars)
       (setf (list . ,variables) vars))))

(defmacro define-symmetric-undo-redo ((redo-type undo-type) variables
				      redo-form undo-form)
  (let ((base-flavor (fintern "BASIC-~A" redo-type)))
    `(progn
       (defundo ,base-flavor ,variables)
       (defun-in-flavor (do-internal-1 ,base-flavor) ()
	 ,redo-form)
       (defun-in-flavor (do-internal-2 ,base-flavor) ()
	 ,undo-form)
       (defflavor ,redo-type () (,base-flavor))
       (defmethod (undo-element-redo ,redo-type) ()
	 (do-internal-1))
       (defmethod (undo-element-undo ,redo-type) ()
	 (do-internal-2))
       (defflavor ,undo-type () (,base-flavor))
       (defmethod (undo-element-redo ,undo-type) ()
	 (do-internal-2))
       (defmethod (undo-element-undo ,undo-type) ()
	 (do-internal-1)))))

(defun-in-flavor (undo-save undo-program) (type name &rest options)
  (check-type name string)
  (let ((undo-element (make-instance type :name name)))
    (apply #'undo-element-initialize undo-element self options)
    (undo-history-push undo-history undo-element)
    undo-element))

(defun-in-flavor (do-undoably undo-program) (type name &rest options)
  (undo-element-redo (apply #'undo-save type name options)))

(defundo function-undo-element (program arguments redo-function undo-function))

(defmethod (undo-element-redo function-undo-element) ()
  (apply redo-function arguments))

(defmethod (undo-element-undo function-undo-element) ()
  (apply undo-function arguments))

;;; Used when the static argument set is enough to determine both operations without
;;; requiring saving additional information.  E.g. by adding a number and then subtracting
;;; it back again vs. saving the old value.
(defmacro undoably (arglist name redo undo)
  `(do-undoably 'function-undo-element ,name
		(list . ,arglist)
		(lambda ,arglist (ignore . ,arglist) ,redo)
		(lambda ,arglist (ignore . ,arglist) ,undo)))

(defmethod (undo-history-undo undo-history) (&optional specific-element)
  (when specific-element
    (setq current-element specific-element))
  (unless current-element
    (dw:command-error "There is nothing to undo."))
  (undo-element-undo current-element)
  (format *query-io* "~&~A undone." (undo-element-name current-element))
  (setq current-element (undo-element-previous current-element)))

(defmethod (undo-history-redo undo-history) (&optional specific-element)
  (if specific-element
      (setq current-element specific-element)
      (undo-history-skip self))
  (undo-element-redo current-element)
  (format *query-io* "~&~A redone." (undo-element-name current-element)))

(defmethod (undo-history-skip undo-history) ()
  (if (null current-element)			;undone to beginning
      (unless (setq current-element first-element)
	(dw:command-error "There is nothing to redo."))
      (let ((next (undo-element-next current-element)))
	(cond ((null next)
	       (dw:command-error "Everything has already been (re)done."))
	      ((atom next)
	       (setq current-element next))
	      (t
	       (setq current-element (choose-undo-element next
							  :prompt "Which undo path")))))))

(defmethod (undo-history-next-element undo-history) ()
  (and current-element (undo-element-next current-element)))

(defmethod (undo-history-push undo-history) (new-element)
  (setf (undo-element-index new-element) (incf assignment-index))
  (when current-element
    (setf (undo-element-previous new-element) current-element)
    (setf (undo-element-next current-element)
	  (let ((old-next (undo-element-next current-element)))
	    (if old-next
		(nconc (if (atom old-next) (ncons old-next) old-next) (ncons new-element))
		new-element))))
  (unless first-element
    (setq first-element new-element))
  (setq last-element new-element
	current-element new-element))

;;; This could be undoable itself, that is it could affect visuals only;
;;; but the usual people would probably complain about not being able to
;;; GC what they had done.
(defmethod (undo-history-clear undo-history) ()
  (setq first-element nil
	last-element nil
	current-element nil))

(define-undo-program-command (com-clear-undo-history )
    ()
   (undo-history-clear undo-history))

(compile-flavor-methods undo-history)
