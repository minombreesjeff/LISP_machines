;;; -*- Mode: LISP; Syntax: Common-LISP; Package: Graphic-editor; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *file-package* *package*)
(defvar *file-format-version* 3)

(defvar *drawing-file-info* nil)

(defun get-drawing-file-info (pathname)
  (cdr (assoc pathname *drawing-file-info*)))

(defun set-drawing-file-info (pathname info)
  (pushnew (cons pathname info) *drawing-file-info* :replace t :key #'first))

(defsetf get-drawing-file-info set-drawing-file-info)

(defun warn-about-file-info (file old-info new-info)
  (flet ((print-one (info)
	   (destructuring-bind (truename . creation-date) info
	     (let ((author (condition-case ()
				(let ((props (send truename :properties)))
				  (getf (cdr props) :author))
			      (fs:file-lookup-error nil))))
	       (format t "~A, written ~@[by ~A ~]~@[at ~\\time\\~].~%"
		       truename author creation-date)))))
    (cond ((null old-info)
	   (format t "~&Warning: the file ~A, which you have not read,
is on disk as " file)
	   (print-one new-info)
	   (format t "Any drawings in it will be lost.~%"))
	  (t
	   (format t "~&Warning: when you last read or wrote ~A
it was " file)
	   (print-one old-info)
	   (if (null new-info)
	       (format t "But now it has been deleted.~%")
	     (format t "But now it is ")
	     (print-one new-info)))))
  (unless (let ((*query-io* si:syn-terminal-io))
	    (yes-or-no-p "Go ahead anyway? "))
    (signal 'sys:abort)))

(defun read-drawings-from-file (file &key (error :reprompt))
  (let ((*the-drawings* nil))
    (declare (special *the-drawings*))
    (let* ((file-props (cdr (fs:file-properties file)))
	   (creator-signature (getf file-props :CREATOR-SIGNATURE))
	   (file-type (getf file-props :FILE-TYPE)))
      (cond ((string-equal file-type "PICT")
	     ;;; Attempt to read it as a Quickdraw PICTure
	     (setf *the-drawings* (list (mtb::graphic-editor-drawing-from-pict-file file))))
	    ((and (string-equal file-type "DRWG")               ; Must be a Drawing file
		  (string-equal creator-signature "MDRW"))	; Must be a MacDraw (not MacDraw II) drawing
	     ;;; Attempt to read it as a MacDraw drawing
	     (setf *the-drawings* (list (mtb::graphic-editor-drawing-from-macdraw-file file))))

	    (t
	     (with-open-file (stream file :characters nil :error error)
	       (setq file (si:bin-load-file-internal stream *file-package* t))
	       (set-drawing-file-info file (send stream :info))
	       (dolist (drawing *the-drawings*)
		 (setf (drawing-file drawing) file))
	       (let ((version (or (send (send file :generic-pathname) :get 'drawing-file-version) 0)))
		 (dolist (drawing *the-drawings*)
		   (format-convert-drawing drawing version)))))
	    ))
    *the-drawings*))

(defun write-drawings-to-file (drawings file)
  (let ((old-info (get-drawing-file-info file))
	(new-info (with-open-file-case (stream file :direction :probe
						    :if-does-not-exist :error)
		    (fs:file-lookup-error nil)
		    (:no-error (send stream :info)))))
    (unless (equal new-info old-info)
      (warn-about-file-info file old-info new-info)))
  (multiple-value-bind (truename info)
      (sys:dump-forms-to-file file
			      `((setq *the-drawings* ',drawings))
			      `(:package ,(package-name *file-package*)
				drawing-file-version ,*file-format-version*
				drawings-in-file ,(mapcar #'drawing-name drawings)))
    (set-drawing-file-info file info)
    truename))

(defmethod (:fasd-form drawing) ()
  `(remake-drawing ',name ',entities
		   :view-transform ',view-transform :sketch-p ',sketch-p))

(defun remake-drawing (name entities &rest init-keys)
  (apply #'make-instance 'drawing :name name :entities entities init-keys))

(defmethod (:fasd-form graphic-entity) ()
  `(remake-entity ',(type-of self) . ,(loop for (var val)
						on (entity-variable-values-internal self)
						by 'cddr
					    collect var collect `',val)))

(defun remake-entity (flavor &rest options)
  (let ((entity (apply #'make-instance flavor options)))
    (remake-entity-internal entity)
    entity))

(defmethod (remake-entity-internal graphic-entity) ()
  (entity-reset-handles self))

(defmethod (format-convert-drawing drawing) (old-version)
  (unless (eql old-version *file-format-version*)
    (loop for entity being the array-elements of entities do
      (format-convert-entity entity old-version))))

(defmethod (format-convert-entity graphic-entity) (old-version)
  (ignore old-version)
  )

(defmethod (format-convert-entity group-entity) (old-version)
  (map () #'(lambda (entity) (format-convert-entity entity old-version)) entities))

(defmethod (format-convert-entity text-entity) (old-version)
  (when (< old-version 2)
    (when (eq sizing :scaled)
      (setq sizing :scaled-and-tilted)))
  (when (< old-version 3)
    (setq sizing (cadr (assoc sizing '((:normal :unscaled-one-point)
				       (:stretched :unscaled-stretched)
				       (:tilted :unscaled-tilted)
				       (:stretched-and-tilted :unscaled-tilted-and-stretched)
				       (:scaled :scaled-stretched)
				       (:scaled-with-fixed-font :scaled-one-point)
				       (:scaled-and-tilted :scaled-tilted-and-stretched)))))
    (when (and (eq sizing :scaled-stretched)
	       (= to-y y)
	       (= to-x (+ x (send *terminal-io* :draw-string-size
				  string character-style))))
      (setq sizing :scaled-tilted)))
  )

(cp:define-command (com-show-file-drawings :command-table "graphic-editor")
    ((file 'pathname :prompt "file(s)"))
   (flet ((show-one (file)
	    (let ((drawings (getf (fs:pathname-attribute-list file) 'drawings-in-file)))
	      (when drawings
		(format t "~A:~%" file)
		(dolist (drawing drawings)
		  (format t "  ~A~%" drawing))))))
     (if (send file :wild-p)
	 (map () #'show-one (directory file))
	 (show-one file))))

(cp:define-command (com-convert-file-format :command-table "graphic-editor")
    ((file 'pathname :prompt "file(s)"))
   (flet ((convert-one (file)
	    (format t "~&~A: " file)
	    (let ((truename (write-drawings-to-file (read-drawings-from-file file :error nil)
						    file)))
	      (format t "written: ~A~%" truename))))
     (if (send file :wild-p)
	 (map () #'convert-one (directory file))
	 (convert-one file))))

;;; Call this from a patch file if you want to modify the in-core drawings in the same way.
(defun format-convert-existing-drawings (&optional (old-version (1- *file-format-version*)))
  (let ((drawings-converted nil))
    (loop for window being the array-elements of tv:previously-selected-windows do
      (when (typep window 'dw:program-frame)
	(let ((program (send window :program)))
	  (when (typep program 'graphic-editor)
	    (dolist (drawing (graphic-editor-loaded-drawings program))
	      (unless (member drawing drawings-converted)
		(format-convert-drawing drawing old-version)
		(push drawing drawings-converted)))))))))
