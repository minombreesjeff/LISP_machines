;;; -*- Mode: LISP; Syntax: Common-LISP; Package: Graphic-editor; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; General interactive graphic transformations

;;;+++ Temporary user variables for experimentation
(define-interaction-style-option *transform-origin-mode* :choose
				 ((member :choose :center :corner))
				 "Select origin for rotate, scale, etc.")
(define-interaction-style-option *move-image-mode* :image
				 ((member :image :outline))
				 "Moving feedback")
(define-interaction-style-option *move-erase-mode* :erase
				 ((alist-member :alist (("Don't erase" . nil)
							:erase
							:partially-erase)))
				 "Erase before moving")
;;;+++

(defflavor transformer
	((entities nil)
	 (erase-first t)

	 (origin-x nil)
	 (origin-y nil)
	 (origin-displayed nil)
	 (entities-erased nil))
	()
  (:method-combination input-transform-internal :case)
  (:constructor make-transformer))

(defmethod (transformer-reset-state transformer) (new-entities &rest other-options)
  (setq entities new-entities
	erase-first (getf other-options :erase-first t))
  (setq entities-erased nil
	origin-displayed nil))

(defprop define-transform-type "Graphic transformation type" si:definition-type-name)

(defmacro define-transform-type (type options arglist &body body)
  `(progn
     (define-transform-type-internal ',type . ,options)
     (defmethod (input-transform-internal transformer ,type) ,arglist
       (declare (sys:function-parent ,type define-transform-type))
       . ,body)))

(defvar *transform-types* ())

(defun define-transform-type-internal (type &key name)
  (pushnew (cons (or name (string-capitalize-words type)) type) *transform-types*
	   :key #'cdr :replace t)
  (setq *transform-types* (sort *transform-types* #'string-lessp :key #'car))
  )

(define-presentation-type transform-type ()
   :expander `((alist-member :alist ,*transform-types*)))

(define-presentation-type interactive-transform-type ()
   :expander `((token-or-type (("Choose" . :choose)) transform-type)))

(defun-in-flavor (transformer-xor-origin transformer)
		 (&optional (stream *standard-output*))
  (let ((x origin-x)
	(y origin-y))
    (graphics:transform-window-points stream x y)
    (dw:with-output-recording-disabled (stream)
      (send stream :draw-line (- x 10) y (+ x 10) y :flip)
      (send stream :draw-line x (- y 10) x y :flip nil)
      (send stream :draw-line x (1+ y) x (+ y 10) :flip)))
  (setq origin-displayed (not origin-displayed)))

(defun-in-flavor (transformer-xor-outline transformer)
		 (&optional (*standard-output* *standard-output*))
  (dolist (entity entities)
    (entity-outline entity)))

(defun-in-flavor (transformer-erase-first transformer)
		 (&optional (*standard-output* *standard-output*))
  (when (and erase-first *move-erase-mode*)
    (graphic-input:erase-presentations (map 'list #'graphic-entity-presentation entities)
      :redisplay-overlapping-presentations (eq *move-erase-mode* :erase))
    (setq entities-erased t)))

(defun-in-flavor (get-origin transformer) (&rest args
					   &key while-held (display-p nil)
					   &allow-other-keys)
  (multiple-value-setq (origin-x origin-y)
    (ecase *transform-origin-mode*
      (:choose
	(apply #'graphic-input:mouse-input-point :whostate (if while-held
							       "Pick origin and hold"
							       "Pick origin")
	       :allow-other-keys t args))
      ((:center :corner)
       (multiple-value-bind (bounding-box-left bounding-box-top
			     bounding-box-right bounding-box-bottom)
	   (entities-bounding-box-edges entities)
	 (case *transform-origin-mode*
	   (:center (values (/ (+ bounding-box-left bounding-box-right) 2)
			    (/ (+ bounding-box-top bounding-box-bottom) 2)))
	   (:corner (values bounding-box-left bounding-box-bottom)))))))
  (when display-p
    (transformer-xor-origin))
  (eq *transform-origin-mode* :choose))

(defmethod (input-transform transformer) (type &rest args)
  (unwind-protect-case (abort-p)
      (apply #'input-transform-internal self type :allow-other-keys t args)
    (:always
      (transformer-cleanup self abort-p))))

(defmethod (transformer-cleanup transformer) (abort-p)
  (when origin-displayed
    (transformer-xor-origin))
  (when abort-p
    (when entities-erased
      (graphic-input:unerase-presentations
	(map 'list #'graphic-entity-presentation entities)))))

(define-transform-type :move () (&rest args)
  (multiple-value-bind (dx dy)
      (ecase *move-image-mode*
	(:outline
	  (apply #'graphic-input::dragging-output-with-mouse-internal
		 #'transformer-xor-outline *standard-output*
		 :erase-first-function #'transformer-erase-first
		 args))
	(:image
	  (apply #'graphic-input:drag-presentations-with-mouse
		 (map 'list #'graphic-entity-presentation entities)
		 :erase-first (and erase-first *move-erase-mode*)
		 args)))
    (graphics:build-graphics-transform :translation (list dx dy))))

(define-transform-type :scale () (&rest args)
  (apply #'get-origin :display-p t args)
  (multiple-value-bind (nil nil scale)
      (apply #'graphic-input:mouse-input-scale-internal
	     #'transformer-xor-outline *standard-output*
	     :start-x origin-x :start-y origin-y
	     args)
    (graphics:building-graphics-transform ()
      (graphics:graphics-translate origin-x origin-y)
      (graphics:graphics-scale scale)
      (graphics:graphics-translate (- origin-x) (- origin-y)))))

(define-transform-type :stretch () (&rest args)
  (apply #'get-origin :display-p t args)
  (multiple-value-bind (nil nil stretch-x stretch-y)
      (apply #'graphic-input:mouse-input-stretch-internal
	     #'transformer-xor-outline *standard-output*
	     :start-x origin-x :start-y origin-y
	     args)
    (graphics:building-graphics-transform ()
      (graphics:graphics-translate origin-x origin-y)
      (graphics:graphics-scale stretch-x stretch-y)
      (graphics:graphics-translate (- origin-x) (- origin-y)))))

(define-transform-type :scale-into-box (:name "Scale into Box") (&rest args)
  (multiple-value-bind (left top right bottom)
      (apply #'graphic-input:mouse-input-rectangle :dashed t args)
    (when (or (= left right) (= top bottom))
      (dw:command-error "You cannot scale into an empty box."))
    (multiple-value-bind (eleft etop eright ebottom)
	(entities-bounding-box-edges entities)
      (graphics:building-graphics-transform ()
	(graphics:graphics-translate left bottom)
	(graphics:graphics-scale (min (abs (/ (- right left) (- eright eleft)))
				      (abs (/ (- bottom top) (- ebottom etop)))))
	(graphics:graphics-translate (- eleft) (- ebottom))))))

(define-transform-type :stretch-into-box (:name "Stretch into Box") (&rest args)
  (multiple-value-bind (left top right bottom)
      (apply #'graphic-input:mouse-input-rectangle :dashed t args)
    (multiple-value-bind (eleft etop eright ebottom)
	(entities-bounding-box-edges entities)
      (graphics:building-graphics-transform ()
	(graphics:graphics-translate left bottom)
	(graphics:graphics-scale (abs (/ (- right left) (- eright eleft)))
				 (abs (/ (- bottom top) (- ebottom etop))))
	(graphics:graphics-translate (- eleft) (- ebottom))))))

(define-transform-type :shear () (&rest args)
  (apply #'graphic-input:mouse-input-shear-internal
	 #'transformer-xor-outline *standard-output*
	 args))

(define-transform-type :rotate () (&rest args)
  (multiple-value-bind (nil nil rotation)
      (let ((while-held (apply #'get-origin :while-held t args)))
	(transformer-erase-first)
	(apply #'graphic-input::rotating-output-with-mouse-internal
	       #'transformer-xor-outline *standard-output*
	       :center-x origin-x :center-y origin-y
	       :while-held while-held :erase-first nil
	       args))
    (graphics:building-graphics-transform ()
      (graphics:graphics-translate origin-x origin-y)
      (graphics:graphics-rotate rotation)
      (graphics:graphics-translate (- origin-x) (- origin-y)))))

(define-command-default *default-rotation-degrees* 90
  ((number -360 360) :description "an angle") "Rotation angle")

(define-transform-type :rotate-by-n (:name "Rotate D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")n0 degrees") (&rest args)
  (apply #'get-origin :display-p t args)
  (let ((angle (accept '((number -360 360) :description "an angle")
		       :prompt "Angle by which to rotate (counterclockwise)"
		       :default *default-rotation-degrees*)))
    (maybe-stick-command-defaults *default-rotation-degrees* angle)
    (graphics:building-graphics-transform ()
      (graphics:graphics-translate origin-x origin-y)
      (graphics:graphics-rotate (/ (* angle pi) 180))
      (graphics:graphics-translate (- origin-x) (- origin-y)))))

(define-transform-type :reflect-about-line () (&rest args)
  (multiple-value-bind (x1 y1 x2 y2)
      (apply #'graphic-input:mouse-input-line args)
    (if (and (= x1 x2) (= y1 y2))
	graphics:*identity-transform*
	(graphics:building-graphics-transform ()
	  (graphics:graphics-translate x1 y1)
	  (let ((angle (atan (- y2 y1) (- x2 x1))))
	    (graphics:graphics-rotate angle)
	    (graphics:graphics-scale 1 -1)
	    (graphics:graphics-rotate (- angle)))
	  (graphics:graphics-translate (- x1) (- y1))))))

(define-transform-type :reflect-about-origin () (&rest args)
  (apply #'get-origin args)
  (graphics:building-graphics-transform ()
    (graphics:graphics-translate origin-x origin-y)
    (graphics:graphics-scale -1)
    (graphics:graphics-translate (- origin-x) (- origin-y))))

(define-transform-type :2-point () (&rest args)
  (apply #'graphic-input:mouse-input-multiple-point-transform
	 :number-of-points 2
	 args))

(define-transform-type :4-point () (&rest args)
  (apply #'graphic-input:mouse-input-multiple-point-transform
	 :number-of-points 4
	 args))

(define-transform-type :6-point () (&rest args)
  (apply #'graphic-input:mouse-input-multiple-point-transform
	 :number-of-points 6
	 args))

(compile-flavor-methods transformer)

(defresource transformer ()
  :constructor (make-transformer))

(defun input-entities-transform (entities transform-type &rest args
							 &key default-type
							 &allow-other-keys)
  (declare (arglist entities transform-type
		    &key (erase-first t)
			 (default-type nil)
			 (show-position nil)
			 (position-transform
			   (graphics:stream-transform stream))
			 (quantize-position nil)
			 (position-quantum nil))
	   (values transform type-used))
  (cond ((eq transform-type :choose)
	 (let ((real-type (dw:menu-choose-from-set
			    (map 'list #'cdr *transform-types*) 'transform-type
			    :default default-type
			    :prompt (with-output-to-string (stream)
				      (write-string "Transform for " stream)
				      (present entities '((sequence graphic-entity-output))
					       :stream stream)))))
	   (unless real-type (signal 'sys:abort))
	   (apply #'input-entities-transform entities real-type args)))
	((find transform-type *transform-types* :key #'cdr)
	 (using-resource (program transformer)
	   (apply #'transformer-reset-state program entities args)
	   (values (apply #'input-transform program transform-type args)
		   transform-type)))
	(t
	 (error "~S is not a known type of transform" transform-type))))
