;;; -*- Mode: LISP; Syntax: Common-LISP; Package: Graphic-editor; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; A note on units and coordinate systems.
;;; All numbers presented to the user are in user scale units.  User scale units are
;;;  derived from view scale units by multiplication by a factor of pixels per scale unit,
;;;  which can be inches, centimeters, or pixels.
;;; View scale units are scaled up by the view commands from device units.
;;; Device units are pixels and the same as window system units, except that 0,0 is in
;;;  the lower-left, instead of the upper-left.

;;; The following numbers are based on dutch.roman.large.  A 12pt font on the LGP2,
;;; M is 15 pixels wide on the screen.
(defparameter *pixels-per-centimeter* 35)
(defparameter *pixels-per-inch* 90)
(defparameter *pixels-per-point* 1.25)

(defparameter *menu-column-fraction* .4)

;;;+++ Temporary user variables for experimentation
(defvar *interaction-style-options* nil)

(defprop define-interaction-style-option defvar zwei:definition-function-spec-type)

(defmacro define-interaction-style-option (variable default type prompt)
  `(progn
     (defvar ,variable ,default ,prompt)
     (pushnew (list ',variable ',type ',prompt) *interaction-style-options*
	      :key #'first :replace t)))

(define-interaction-style-option *sticky-command-defaults* nil boolean
				 "Some command options defaults are sticky")

;;;+++

(defvar *command-defaults* nil)

(defprop define-command-default defvar zwei:definition-function-spec-type)

(defmacro define-command-default (variable default type prompt)
  `(progn
     (defvar ,variable ,default ,prompt)
     (pushnew (list ',variable ',type ',prompt) *command-defaults* :key #'first :replace t)))

(defmacro maybe-stick-command-defaults (&rest vars-and-vals)
  `(when *sticky-command-defaults*
     (setf . ,vars-and-vals)))
