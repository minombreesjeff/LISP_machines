;;; -*- Mode: LISP; Package: NETI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; External values

(defvar *namespace* nil "Local site's namespace")

(defvar *namespace-search-list* nil "Namespaces that should be searched to resolve names")

(defvar *local-site* nil "Local site object")

;;; This is the old version of *LOCAL-SITE*, known about for source conditionalization.
;;; A keyword symbol (the name of the local site).  Semi-obsolete.
(defvar site-name)

(compiler:make-obsolete site-name "(send net:*local-site* :name) instead."
			defvar)

(defvar *local-host* nil "Host object for the local machine")

(defvar *local-networks* nil "Networks on which the local host has addresses")

(defvar *primary-network* nil "Network which we should use when booting")

(defvar *primary-network-address* nil "Address on the primary network of this system")

;;; User controls

;;; This is set at initialization time.  It allows using obsolete objects until
;;; we know enough about the network topology to be able to verify them.
(defvar *inhibit-validity-checking* t
  "T to suppress verification of namespace objects")

;;; Within this interval, don't keep trying to find out about update when server is down.
(defconst *validation-retry-minimum-wait* (* 60. 60. 5)	;5 minutes
  "Don't attempt to contact a namespace server more often than this")

(defvar-standard *inhibit-obsolete-information-warning* t t t nil
  "Bind to T to suppress warnings about inability to contact namespace servers")

;;; If non-NIL, validation is done only once per boot load.
(defvar *validate-once-per-boot* t)

(defvar *local-host-is-default-secondary-namespace-server* nil
  "If you set this to T, the local host will act like a secondary namespace server.")

;;; After this period, check that we still know the same stuff about a namespace.
(defconst *check-namespace-validity-time* (* 60. 60. 30.))	;30 minutes

(defconst *namespace-record-timeout* (* 60. 60.))

(defconst *trace-namespace-access-paths* nil)

;;; Communication between modules

(defvar-resettable *update-on-behalf-of* nil nil
  "User name responsible for this namespace update.")		   
 
(defvar-resettable *collected-objects* nil nil
  "A list of the current set of distinct objects being collected.")

;; The initial namespace information for distribution.  Set up by QLD-INITIALIZE-NAMESPACES.
(defvar *distribution-namespace*)
(defvar *distribution-site*)
(defvar *distribution-local-host*)
(defvar *distribution-networks* nil)
(defvar dial:*dialnet-namespace*)
(defvar dial:*dialnet-dial-network*)
(defvar dial:*dialnet-telenet-network*)
(defvar *domain-namespace*)

;;; Macros

(defmacro searching-site-namespaces ((&optional (site 'net:*local-site*)) &body body)
  `(let ((*namespace-search-list* (send (send ,site :local-namespace) :search-rules)))
     ,@body))

(defmacro searching-one-namespace ((namespace) &body body)
  `(stack-let ((*namespace-search-list* `(,,namespace)))
     ,@body))

(defmacro searching-one-site ((&optional (site 'net:*local-site*)) &body body)
  `(stack-let ((*namespace-search-list* `(,(send ,site :local-namespace))))
     ,@body))

(defmacro searching-one-network ((network) &body body)
  `(let ((*namespace-search-list* (send ,network :search-rules)))
     ,@body))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; This really puts all namespaces in the search list so be careful that the namespace is
;;; what you want (ie. watch out for Dial, Domain, and Distribution namespaces).
0(defmacro searching-all-namespaces (&body body)
  `(let ((*namespace-search-list*
	   1;; Preserve search list order
0	   (sort (send *namespace* :objects-of-class :namespace)
		 #'(lambda (n1 n2)
		     (dolist (n *namespace-search-list*)
		       (cond ((eq n n1)
			      (return t))
			     ((eq n n2)
			      (return nil))))))))
     ,@body))

1;;; For searching without the internet namespace involved (sigh).
0(defmacro (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")without-internet-namespace 0(&body body)
  `(let ((*namespace-search-list*
	   (loop for namespace in *namespace-search-list*
		 when (and (not (send namespace :uninterned-p))
			   (not (eq (send namespace :name) :internet)))
		   collect namespace)))
     ,@body))

1;;; Networks are EQ (logically connected) if they are either EQ or have the same non-nil
;;; global-network-name0.
(defsubst 2network-eql 0(net-1 net-2 &optional (inhibit-validity-checking t))
  (or (ns-eq net-1 net-2)
      (and net-1
	   net-2
	   (send-if-handles net-1 :network-typep (send-if-handles net-2 :type))
	   1;; At the distribution site, we have to assume that all networks of the same type
0	   1;; are0 1network-eql to ours.
0	   (if (ns-eq *local-site* *distribution-site*)
	       t
	       (let* ((*inhibit-validity-checking* inhibit-validity-checking)
		      (net-1-name (send-if-handles net-1 :get :global-network-name)))
		 (and net-1-name 
		      (eq net-1-name (send-if-handles net-2 :get :global-network-name))))))))

(defsubst 2network-assoc0 (network a-list &optional (inhibit-validity-checking t))
  (cl:assoc network a-list :test #'(lambda (net-1 net-2)
				    (network-eql net-1 net-2 inhibit-validity-checking))))

(defsubst 2network-member0 (network list &optional (inhibit-validity-checking t))
  (cl:member network list :test #'(lambda (net-1 net-2)
				    (network-eql net-1 net-2 inhibit-validity-checking))))

;;; There are a few places where access paths will return "foreign"
;;; networks but need the "local" one to work
(defun 2canonical-network0 (network)
  (if (send network :global-network-name)
      (let ((local-net (neti:local-network-of-type (send network :type))))
	(or (when (neti:network-eql local-net network)
	      local-net)
	    (error "~A is not a local ~A network." network (send network :type))))
      network))

;;; If non-NIL, when an unknown object is found in a property list, its name and the
;;; object it was found inside are recorded in *UNKNOWN-OBJECT-FIXUPS*.
(defvar-resettable *collect-unknown-object-fixups* nil nil)
(defvar-resettable *doing-unknown-object-fixups* nil nil)
(defvar *unknown-object-fixups* nil)
(defvar *this-object-unknown-object-fixups*)
(defvar *now-fixing-up* nil)

(defmacro with-fixups (&body body)
  `(let ((.me. nil))
     (unwind-protect
       (progn (without-interrupts
		(unless (memq current-process *doing-unknown-object-fixups*)
		  (push current-process *doing-unknown-object-fixups*)
		  (setf .me. t)))
	      ,@body)
       (when .me.
	 (do-unknown-object-fixups-if-necessary)))))

;;;

(defvar-resettable *namespace-access-paths* nil nil
		   "Existing access paths to various namespace servers")
(defvar-resettable *namespace-access-context-established* nil nil
		   "T if we are within KEEPING-NAMESPACE-SERVER")
(defvar-resettable *current-namespace-access-paths* nil nil
		   "namespace access paths used within current KEEPING-NAMESPACE-SERVER")
(defvar-resettable *temporary-namespace-server* nil nil
		   "Server Access Path to use for all namespace requests.")

(defmacro keeping-namespace-server (&body body)
  `(let ((.me-p. (not *namespace-access-context-established*)))
     (let-if .me-p. ((*current-namespace-access-paths* nil)
		     (*namespace-access-context-established* t))
       (unwind-protect
	 (progn ,@body)
	 (when .me-p.
	   (cleanup-namespace-access-paths *current-namespace-access-paths*))))))

;;; This macro is to collect namespace errors for error reports

(defvar-resettable *invalid-namespaces* nil nil
  "List of errors which occurred doing a namespace operation")

(defvar-resettable *collecting-invalid-namespaces* nil nil)

(defmacro collecting-namespace-errors-if (cond &body body)
  `(let-if ,cond ((*invalid-namespaces* nil)
		  (*collecting-invalid-namespaces* t))
     ,@body))

;;; These macros are for comparing namespace objects which may have been forwarded.

(defsubst ns-eq (a b)
  (eq (follow-structure-forwarding a) (follow-structure-forwarding b)))

(defsubst ns-assq (item list)
  (let ((real-item (follow-structure-forwarding item)))
    (loop for elems in list
	  when (eq (follow-structure-forwarding (first elems)) real-item)
	  return elems)))

(defsubst ns-memq (item list)
  (let ((real-item (follow-structure-forwarding item)))
    (loop for elems on list
	  when (eq (follow-structure-forwarding (first elems)) real-item)
	  return elems)))

(defsubst ns-delq (item list)
  (let ((real-list list)
	(real-item (follow-structure-forwarding item)))
    (loop for elems on (locf real-list)
	  when (eq (follow-structure-forwarding (first (cdr elems))) real-item)
	  do (setf (cdr elems) (rest1 (cdr elems))))
    real-list))

;;;

(defmacro define-namespace-class-object-flavor
	  (class flavor-name &key (presentation-type flavor-name))
  `(progn
     (defun (:property ,class object-flavor-function) (ignore) ',flavor-name)
     (defprop ,presentation-type ,class namespace-presentation-type-class)
     (defprop ,class ,presentation-type namespace-class-presentation-type)))

(defmacro define-namespace-class-object-flavor-function
	  (class presentation-type arglist &body body)
  `(progn
     (defun (:property ,class object-flavor-function) ,arglist ,@body)
     (defprop ,presentation-type ,class namespace-presentation-type-class)
     (defprop ,class ,presentation-type namespace-class-presentation-type)))


(defun namespace-flavor-for-class (class property-list)
  (let ((function (get class 'object-flavor-function)))
    (if function
	(funcall function property-list)
	'object)))

(defun namespace-presentation-type-for-class (class &key no-default)
  (or (get class 'namespace-class-presentation-type)
      (and (not no-default)
	   `((object :class ,class)))))

;;; This is the kludgy version that assumes we aren't doing an 2or0 of more than
;;; one namespace class.
(defun namespace-class-for-presentation-type (ptype)
  (declare (values class predicate))
  (labels ((look-for-class (type key predicate)
	     (ignore key)
	     (dw::with-type-decoded (type-name) type
	       (let ((class (get type-name 'namespace-presentation-type-class)))
		 (when class
		   (return-from namespace-class-for-presentation-type
		     (values class predicate))))))
	   (look-at-supertypes (type key predicate)
	     (ignore key)
	     (dw::map-over-type-hierarchy type t nil #'look-for-class predicate)))
    ;; First we go down the hierarchy as far as we can, to eliminate any 2or0's.
    (dw::map-over-type-hierarchy ptype nil t #'look-at-supertypes nil)))
