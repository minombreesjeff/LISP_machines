;;; -*- Mode: LISP; Package: NETWORK-INTERNALS; Base: 8 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Byte stream with mark medium.
;;;; (token-stream.lisp.1 was bs.lisp.85 ("New File Protocol" development.))

;; This provides :TOKEN-LIST-STREAM for all except CHAOS, which handles this
;; natively.
(DEFINE-MEDIUM :TOKEN-LIST-STREAM ()
  ;;--- This should explicitly have a path based on :BYTE-STREAM-WITH-MARK,
  ;;--- which makes a stream that does not do up mark processing for itself.
  ;;--- This would be be useful over a medium where marks exist natively but
  ;;--- token encoding support does not.
  (((:MEDIUM :BYTE-STREAM)) (IGNORE (RAW-STREAM :characters nil) &REST CONNECTION-ARGS)
   (IGNORE CONNECTION-ARGS)
   (MAKE-INSTANCE 'BUFFERED-TOKEN-STREAM
		  :RAW-STREAM RAW-STREAM)))

;; Ditto for :BYTE-STREAM-WITH-MARK
(DEFINE-MEDIUM :BYTE-STREAM-WITH-MARK ()
  (((:MEDIUM :BYTE-STREAM)) (IGNORE (RAW-STREAM :characters nil) &REST CONNECTION-ARGS) 
   (MAKE-INSTANCE (IF (GET (LOCF CONNECTION-ARGS) :TOKEN-LIST)
		      'BUFFERED-TOKEN-STREAM
		      'BUFFERED-STREAM-WITH-MARK)
		  :RAW-STREAM RAW-STREAM)))		  

(DEFPROP :BYTE-STREAM-WITH-MARK DEFAULT-BYTE-STREAM-SERVER SERVER-BASE-FLAVOR)

(DEFPROP :BYTE-STREAM-WITH-MARK BYTE-STREAM-INVOKE-SERVICE-FUNCTION INVOKE-SERVICE-FUNCTION)

(DEFUN (:PROPERTY :BYTE-STREAM-WITH-MARK DEFINE-SERVER) (OPTIONS)
  (LET ((ARGUMENT-LIST NIL)
	(ARGUMENT-DESCRIPTIONS NIL)
	(PROPERTY-LIST NIL))
    (LOOP FOR (INDICATOR VALUE) ON OPTIONS BY 'CDDR
	  DO (SELECTQ INDICATOR
	       (:STREAM
		(LET ((STREAM-VAR (IF (LISTP VALUE) (CAR VALUE) VALUE)))
		  (PUSH STREAM-VAR ARGUMENT-LIST))
		(PUSH ':STREAM ARGUMENT-DESCRIPTIONS)
		(IF (LISTP VALUE)
		    (PUTPROP (LOCF PROPERTY-LIST) (CDR VALUE) ':STREAM-OPTIONS)))))
    (VALUES (NREVERSE ARGUMENT-LIST) (NREVERSE ARGUMENT-DESCRIPTIONS)
	    PROPERTY-LIST '(:STREAM))))

(DEFUN (:PROPERTY :TOKEN-LIST-STREAM DEFINE-SERVER) (OPTIONS)
  (LET ((ARGUMENT-LIST NIL)
	(ARGUMENT-DESCRIPTIONS NIL)
	(PROPERTY-LIST NIL))
    (LOOP FOR (INDICATOR VALUE) ON OPTIONS BY 'CDDR
	  DO (SELECTQ INDICATOR
	       (:STREAM
		(LET ((STREAM-VAR (IF (LISTP VALUE) (CAR VALUE) VALUE)))
		  (PUSH STREAM-VAR ARGUMENT-LIST))
		(PUSH ':STREAM ARGUMENT-DESCRIPTIONS)
		(IF (LISTP VALUE)
		    (PUTPROP (LOCF PROPERTY-LIST) (CDR VALUE) ':STREAM-OPTIONS)))))
    (VALUES (NREVERSE ARGUMENT-LIST) (NREVERSE ARGUMENT-DESCRIPTIONS)
	    PROPERTY-LIST '(:STREAM))))

(DEFFLAVOR STREAM-WITH-MARK () ()
  (:REQUIRED-METHODS :SEND-MARK))

(DEFFLAVOR MARK-SEEN (STREAM)
	   (ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT MARK-SEEN) (S)
  (FORMAT S "Mark seen on input from ~S." STREAM))

(COMPILE-FLAVOR-METHODS MARK-SEEN)

(DEFFLAVOR TOKEN-IO-UNSAFE (STREAM DIRECTION) (ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT TOKEN-IO-UNSAFE) (S)
  (FORMAT S "Trying to ~:[read from~;write to~] ~S which is unsafe."
	  (EQ DIRECTION ':OUTPUT) STREAM))

(DEFFLAVOR TOKEN-STREAM-DATA-ERROR
	((STREAM NIL) REPORT-STRING)
	(ERROR)
  (:INITABLE-INSTANCE-VARIABLES)
  (:GETTABLE-INSTANCE-VARIABLES))

(DEFMETHOD (:REPORT TOKEN-STREAM-DATA-ERROR) (S)
  (FORMAT S "Token stream data error~@[ on ~S~]:~%~A" STREAM REPORT-STRING))

(COMPILE-FLAVOR-METHODS TOKEN-IO-UNSAFE TOKEN-STREAM-DATA-ERROR)

;;; For the chaosnet, the 201 packet opcode means a mark.
;;; For PUP, Mark 1 means our kind of mark.
;;; For XNS, some value of the Date-Type field means a mark.

;;; Build a byte stream with mark on top of a buffered stream, such as TCP.
;;; Data is split into records of one octet of byte count followed by that many
;;; octets of real data.  A length of 0 means a mark.
(DEFFLAVOR BUFFERED-STREAM-WITH-MARK
	(RAW-STREAM				;The normal reliable byte stream.
	 (INPUT-STATE NIL)			;for reading the byte count
	 (INPUT-BYTES-PENDING 0)		;Number of bytes in this record not in this
						;packet.
	 INPUT-RECORD-END			;The index of the start of the next record
						;in this packet.
	 OUTPUT-RECORD-BYTE-COUNT-POSITION	;Start of this output record
	 )
	(STREAM-WITH-MARK
	 SI:BUFFERED-STREAM)
  (:GETTABLE-INSTANCE-VARIABLES RAW-STREAM)	;so file server can wait for rfcs
  (:INITABLE-INSTANCE-VARIABLES RAW-STREAM))

(DEFUN BUFFERED-MARK-STREAM-PASS-THROUGH (SELF IGNORE MESSAGE &REST ARGS)
  (LEXPR-SEND (SEND SELF :RAW-STREAM) MESSAGE ARGS))

(DEFMETHOD (:CLOSE BUFFERED-STREAM-WITH-MARK) BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:FOREIGN-HOST BUFFERED-STREAM-WITH-MARK) BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:ACCEPT BUFFERED-STREAM-WITH-MARK) BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:REJECT BUFFERED-STREAM-WITH-MARK) BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:CONNECTED-P BUFFERED-STREAM-WITH-MARK) BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:CLOSE-WITH-REASON BUFFERED-STREAM-WITH-MARK) BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:COMPLETE-CONNECTION BUFFERED-STREAM-WITH-MARK) BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:SET-OUTPUT-EXCEPTION BUFFERED-STREAM-WITH-MARK)
	   BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:SET-INPUT-EXCEPTION BUFFERED-STREAM-WITH-MARK)
	   BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:CHECK-OUTPUT-EXCEPTION BUFFERED-STREAM-WITH-MARK)
	   BUFFERED-MARK-STREAM-PASS-THROUGH)
(DEFMETHOD (:CHECK-INPUT-EXCEPTION BUFFERED-STREAM-WITH-MARK)
	   BUFFERED-MARK-STREAM-PASS-THROUGH)


(DEFMETHOD (:START-OPEN-AUXILIARY-STREAM BUFFERED-STREAM-WITH-MARK)
	   (ACTIVE-P &KEY LOCAL-ID FOREIGN-ID STREAM-OPTIONS APPLICATION-ID)
  (MULTIPLE-VALUE-BIND (STREAM IDENTIFIER)
      (SEND RAW-STREAM ':START-OPEN-AUXILIARY-STREAM
	    ACTIVE-P
	    ':LOCAL-ID LOCAL-ID
	    ':FOREIGN-ID FOREIGN-ID
	    ':STREAM-OPTIONS '(:CHARACTERS NIL)
	    ':APPLICATION-ID APPLICATION-ID)
    (VALUES
      (MAKE-INSTANCE
	(IF (GET (LOCF STREAM-OPTIONS) ':TOKEN-LIST)
	    'BUFFERED-TOKEN-STREAM
	    'BUFFERED-STREAM-WITH-MARK)
	':RAW-STREAM STREAM)
      IDENTIFIER)))

;;; If the remote end obeys our convention of always putting an integral number of
;;; records into each packet, there are no unsafe abort points.  Aborting will always
;;; lose an integral number of records, and so stay in synch with regard to the marks,
;;; which must follow if there is any aborting.  In case the remote end does not obey
;;; this convention, we do the actual read of the network buffer (packet) without-interrupts.
(DEFMETHOD (:NEXT-INPUT-BUFFER BUFFERED-STREAM-WITH-MARK) (&OPTIONAL NO-HANG-P)
  (LOOP DOING
	(UNLESS NO-HANG-P
	  (SEND RAW-STREAM ':INPUT-WAIT))	;Allow aborting while awaiting input
	(WITHOUT-INTERRUPTS
	  (MULTIPLE-VALUE-BIND (BUFFER START END)
	      (SEND RAW-STREAM ':READ-INPUT-BUFFER "Unexpected eof" T)
	    (IF (NULL BUFFER)
		(WHEN NO-HANG-P
		  (RETURN NIL))
		(LET ((LENGTH (- END START)))
		  (COND (INPUT-STATE
			 (SETF INPUT-BYTES-PENDING (DPB INPUT-BYTES-PENDING
							(BYTE 8 8) (AREF BUFFER START)))
			 (SEND RAW-STREAM :ADVANCE-INPUT-BUFFER (1+ START))
			 (SETF INPUT-STATE NIL))
			((ZEROP INPUT-BYTES-PENDING)
			 (COND ((> LENGTH 2)
				(SETF INPUT-BYTES-PENDING
				      (DPB (AREF BUFFER START)
					   (BYTE 8 8) (AREF BUFFER (1+ START))))
				(INCF START 2)
				(IF (ZEROP INPUT-BYTES-PENDING)
				    (SEND RAW-STREAM :ADVANCE-INPUT-BUFFER START)
				    (SETF LENGTH (MIN INPUT-BYTES-PENDING (- LENGTH 2)))
				    (DECF INPUT-BYTES-PENDING LENGTH)
				    (SETQ INPUT-RECORD-END (+ START LENGTH))
				    (RETURN (VALUES BUFFER START INPUT-RECORD-END
						    (= LENGTH INPUT-BYTES-PENDING)))))
			       ((= LENGTH 2)
				(SETF INPUT-BYTES-PENDING
				      (DPB (AREF BUFFER START)
					   (BYTE 8 8) (AREF BUFFER (1+ START))))
				(SEND RAW-STREAM :ADVANCE-INPUT-BUFFER (+ START 2)))
			       (T (SETF INPUT-BYTES-PENDING (AREF BUFFER START))
				  (SEND RAW-STREAM :ADVANCE-INPUT-BUFFER (1+ START))
				  (SETF INPUT-STATE T))))
			(T
			 (LET ((BYTES-STILL-PENDING (MIN INPUT-BYTES-PENDING LENGTH)))
			   (DECF INPUT-BYTES-PENDING BYTES-STILL-PENDING)
			   (SETQ INPUT-RECORD-END (+ START BYTES-STILL-PENDING)))
			 (RETURN (VALUES BUFFER START INPUT-RECORD-END
					 (= LENGTH INPUT-BYTES-PENDING)))))))))
	(WHEN (AND (ZEROP INPUT-BYTES-PENDING)
		   (NULL INPUT-STATE))
	  (ERROR 'MARK-SEEN :STREAM SELF))
	))

(DEFMETHOD (:DISCARD-INPUT-BUFFER BUFFERED-STREAM-WITH-MARK) (IGNORE)
  (SEND RAW-STREAM ':ADVANCE-INPUT-BUFFER INPUT-RECORD-END))

;;; On output, we always fill the packet with an integral number of records.  There are
;;; therefore no unsafe abort points.  If the buffer is only partially full, we will send
;;; a truncated record, but still be in synch for the immediately following mark.
(DEFMETHOD (:NEW-OUTPUT-BUFFER BUFFERED-STREAM-WITH-MARK) ()
  (LOOP FOR PAUSE = NIL THEN T DOING
    (MULTIPLE-VALUE-BIND (BUFFER START END)
	(SEND RAW-STREAM ':GET-OUTPUT-BUFFER)
      (SETQ OUTPUT-RECORD-BYTE-COUNT-POSITION START)
      (INCF START 2)
      (WHEN (> END START)
	(RETURN (VALUES BUFFER START (+ START (MIN (- END START) (1- 1_16)))))))
    ;; Get our hands off the internal buffer, we aren't going to use it
    (SEND RAW-STREAM ':FORCE-OUTPUT)
    ;; If the underlying stream only has one byte to give, and if the
    ;; :FINISH didn't succeed the first time, then pause for 2 seconds
    ;; instead of hard looping.
    (WHEN PAUSE (PROCESS-SLEEP 120. "Token buffer"))
    ;; Need this to deal with the case where user takes our buffer and fills the raw-stream
    ;; buffer up all but one character.  We cannot fit a whole record in that one byte, so
    ;; have to send the buffer along.
    (SEND RAW-STREAM ':FINISH)))

(DEFMETHOD (:SEND-OUTPUT-BUFFER BUFFERED-STREAM-WITH-MARK) (BUFFER END EXPLICIT)
  (LET ((LENGTH (- END OUTPUT-RECORD-BYTE-COUNT-POSITION 2)))
    (WHEN (PLUSP LENGTH)
      (SETF (AREF BUFFER OUTPUT-RECORD-BYTE-COUNT-POSITION) (LDB (BYTE 8 8) LENGTH))
      (SETF (AREF BUFFER (1+ OUTPUT-RECORD-BYTE-COUNT-POSITION)) (LDB (BYTE 8 0) LENGTH))
      (SEND RAW-STREAM ':ADVANCE-OUTPUT-BUFFER END)))
  (WHEN EXPLICIT
    (SEND RAW-STREAM ':FORCE-OUTPUT)))

(DEFMETHOD (:DISCARD-OUTPUT-BUFFER BUFFERED-STREAM-WITH-MARK) (IGNORE) )

(DEFMETHOD (:SEND-MARK BUFFERED-STREAM-WITH-MARK) ()
  (SEND SELF :FORCE-OUTPUT)
  (LOOP FOR PAUSE = NIL THEN T DOING
	(MULTIPLE-VALUE-BIND (BUFFER START END)
	    (SEND RAW-STREAM :GET-OUTPUT-BUFFER)
	  (WHEN ( (- END START) 2)
	    (SETF (AREF BUFFER START) 0)
	    (SETF (AREF BUFFER (1+ START)) 0)
	    (SEND RAW-STREAM :ADVANCE-OUTPUT-BUFFER (+ START 2))
	    (SEND RAW-STREAM :FORCE-OUTPUT)
	    (RETURN NIL)))
	;; See (BUFFERED-STREAM-WITH-MARK :NEW-OUTPUT-BUFFER)
	(SEND RAW-STREAM ':FORCE-OUTPUT)
	(WHEN PAUSE (PROCESS-SLEEP 120. "Token buffer"))
	(SEND RAW-STREAM :FINISH)))

(COMPILE-FLAVOR-METHODS BUFFERED-STREAM-WITH-MARK)


;;;; The token list stream.

;;; Built on the byte-stream-with-mark medium.  Tokens consist of a one octet count followed
;;; by that many bytes.  Octets above 200. are punctuation marks.

(DEFCONST %COUNT-LIMIT 200.)			;Below this is short byte count.
(DEFCONST %PUNCTUATION-PAD 200.)		;Noop, used as padding.
(DEFCONST %PUNCTUATION-LONG 201.)		;4 octet length, LSB, follows.
(DEFCONST %PUNCTUATION-TOP-LEVEL-BEGIN 202.)	;Start of list, no enclosing list.
(DEFCONST %PUNCTUATION-TOP-LEVEL-END 203.)	;End of list, no more enclosing lists.
(DEFCONST %PUNCTUATION-BEGIN 204.)		;Start of list within list.
(DEFCONST %PUNCTUATION-END 205.)		;End of list within list.
(DEFCONST %PUNCTUATION-SHORT-INTEGER 206.)	;A one-byte integer.
(DEFCONST %PUNCTUATION-LONG-INTEGER 207.)	;1 octet length follows, then integer, LSB
(DEFCONST %PUNCTUATION-KEYWORD 208.)		;A wholesale token, pname, follows.
(DEFCONST %PUNCTUATION-TRUE 209.)		;boolean true
;;; There is no false, because Lisp machines can't differentiate it from ().

;;; This requires a buffered stream, which is reasonable, since our implementations
;;; are all built on that or encapsulate in such a way as to give that anyway.
(DEFFLAVOR TOKEN-LIST-STREAM
	(
	 (TOKEN-INPUT-UNSAFE NIL)		;Non-NIL requires resynch (via command)
	 (TOKEN-INPUT-LOCK (PROCESS:MAKE-LOCK "Token Input Lock"))	;Only one process can input at a time
	 (TOKEN-OUTPUT-UNSAFE NIL)		;Non-NIL requires sending mark for resynch
	 (TOKEN-OUTPUT-LOCK (PROCESS:MAKE-LOCK "Token Output Lock"))	;Only one process can output at a time
	 (TOKEN-INPUT-BYTES-PENDING 0)		;Used for data streams
	 TOKEN-INPUT-RECORD-END
	 TOKEN-OUTPUT-BYTE-COUNT-POSITION
	 )
	()
  (:REQUIRED-FLAVORS STREAM-WITH-MARK)
  (:GETTABLE-INSTANCE-VARIABLES TOKEN-OUTPUT-UNSAFE)
  (:SETTABLE-INSTANCE-VARIABLES TOKEN-INPUT-UNSAFE))

;;; DISCARD-UNTIL-MARK means we are resynchronizing from an input abort last time,
;;; so ignore any input that comes before a mark.
(DEFMETHOD (:READ-TOKEN-LIST TOKEN-LIST-STREAM) (&OPTIONAL DISCARD-UNTIL-MARK
							   DONT-WAIT-BUT-RETURN-THIS)
  (BLOCK READ-TOKEN-LIST
    (PROCESS:WITH-LOCK (TOKEN-INPUT-LOCK)
      (WHEN (AND TOKEN-INPUT-UNSAFE (NOT DISCARD-UNTIL-MARK))
	(ERROR 'TOKEN-IO-UNSAFE ':DIRECTION ':INPUT ':STREAM SELF))
      (WHEN DONT-WAIT-BUT-RETURN-THIS
	(UNLESS (SEND SELF ':LISTEN)
	  (RETURN-FROM READ-TOKEN-LIST DONT-WAIT-BUT-RETURN-THIS)))
      (WHEN DISCARD-UNTIL-MARK
	(CONDITION-CASE ()
	     (STREAM-COPY-UNTIL-EOF SELF 'SI:NULL-STREAM)
	   (MARK-SEEN T)))
      (SETQ TOKEN-INPUT-UNSAFE T)
      (PROG1
	;;;It is possible the mark-message guy got aborted, too...
	(LOOP DO
	  (CONDITION-CASE-IF DISCARD-UNTIL-MARK ()
	       (RETURN (READ-TOKEN-LIST-1 SELF 0))
	     (MARK-SEEN)))
	(SETQ TOKEN-INPUT-UNSAFE NIL)))))

(DEFUN READ-TOKEN-LIST-1 (STREAM DEPTH)
  (LOOP DOING
    (LET ((BYTE (SEND STREAM ':TYI T)))
      (IF (< BYTE %COUNT-LIMIT)
	  (LET ((STRING (MAKE-ARRAY BYTE ':TYPE 'ART-STRING)))
	    (WITH-STACK-ARRAY (STRING8 BYTE :TYPE 'ART-8B :DISPLACED-TO STRING)
	      (SEND STREAM ':STRING-IN "Unexpected EOF" STRING8 0 BYTE)
	      (RETURN STRING)))
	(SELECTOR BYTE =
	  (%PUNCTUATION-PAD )
	  (%PUNCTUATION-LONG
	   (LET ((LENGTH 0))
	     (LOOP FOR SHIFT UPFROM 0 BY 8
		   REPEAT 4
		   DO (SETQ LENGTH (DPB (SEND STREAM ':TYI T) (BYTE 8 SHIFT) LENGTH)))
	     (LET ((STRING (MAKE-ARRAY LENGTH ':TYPE 'ART-STRING)))
	       (WITH-STACK-ARRAY (STRING8 LENGTH :TYPE 'ART-8B :DISPLACED-TO STRING)
		 (SEND STREAM ':STRING-IN "Unexpected EOF" STRING8 0 LENGTH)
		 (RETURN STRING)))))
	  ((%PUNCTUATION-TOP-LEVEL-BEGIN %PUNCTUATION-BEGIN)
	   (UNLESS (EQ (= DEPTH 0) (= BYTE %PUNCTUATION-TOP-LEVEL-BEGIN))
	     (ERROR
	       'TOKEN-STREAM-DATA-ERROR
	       :STREAM STREAM
	       :REPORT-STRING
	       "A data stream open parenthesis was found at a level not consistent with its type."))
	   (RETURN
	     (LOOP WITH (TOKEN END)
		   DOING (MULTIPLE-VALUE (TOKEN END)
			   (READ-TOKEN-LIST-1 STREAM (1+ DEPTH)))
		   UNTIL END
		   COLLECT TOKEN)))
	  ((%PUNCTUATION-TOP-LEVEL-END %PUNCTUATION-END)
	   (COND ((= DEPTH 0)
		  (ERROR
		    'TOKEN-STREAM-DATA-ERROR
		    :STREAM STREAM
		    :REPORT-STRING
		    "A data stream close parenthesis was received outside a token list."))
		 ((NEQ (= DEPTH 1) (= BYTE %PUNCTUATION-TOP-LEVEL-END))
		  (ERROR
		    'TOKEN-STREAM-DATA-ERROR
		    :STREAM STREAM
		    :REPORT-STRING
		    "A data stream close parenthesis was found at a level not consistent with its type.")))
	   (RETURN (VALUES NIL T)))
	  (%PUNCTUATION-SHORT-INTEGER
	    (RETURN (SEND STREAM ':TYI T)))
	  (%PUNCTUATION-LONG-INTEGER
	    (RETURN (LOOP REPEAT (SEND STREAM ':TYI T) 
			  FOR SHIFT UPFROM 0 BY 8
			  SUMMING (ASH (SEND STREAM ':TYI T) SHIFT))))
	  (%PUNCTUATION-KEYWORD
	    (LET ((PNAME (READ-TOKEN-LIST-1 STREAM DEPTH)))
	      ;; Potential improvement:  intern the symbol later, while not
	      ;; tying up the network channel?  This would, however, prevent
	      ;; the return-array, and probably require more consing.
	      (RETURN (PROG1 (INTERN PNAME PKG-KEYWORD-PACKAGE)
			     (RETURN-ARRAY (PROG1 PNAME (SETQ PNAME NIL)))))))
	  (%PUNCTUATION-TRUE (RETURN T))
	  (OTHERWISE
	    (ERROR
	      'TOKEN-STREAM-DATA-ERROR
	      :STREAM STREAM
	      :REPORT-STRING
	      (FORMAT NIL "The byte #o~O was received.~@
	      This byte is not a known token list delimiter." BYTE))))))))

(DEFMETHOD (:SEND-TOKEN-LIST TOKEN-LIST-STREAM) (LIST &OPTIONAL MARK-P)
  (PROCESS:WITH-LOCK (TOKEN-OUTPUT-LOCK)
    (WHEN (AND TOKEN-OUTPUT-UNSAFE (NOT MARK-P))
      (ERROR 'TOKEN-IO-UNSAFE ':DIRECTION ':OUTPUT ':STREAM SELF))
    (WHEN MARK-P
      (SEND SELF ':SEND-MARK))
    (SETQ TOKEN-OUTPUT-UNSAFE T)
    (SEND-TOKEN-LIST-1 LIST SELF T)
    (SEND SELF ':FORCE-OUTPUT)
    (SETQ TOKEN-OUTPUT-UNSAFE NIL)))

(DEFUN SEND-TOKEN-LIST-1 (TOKEN STREAM TOP-LEVEL-P)
  (ARGUMENT-TYPECASE TOKEN
    ((:LIST :NULL)
     (SEND STREAM ':TYO (IF TOP-LEVEL-P %PUNCTUATION-TOP-LEVEL-BEGIN %PUNCTUATION-BEGIN))
     (DOLIST (TOK TOKEN)
       (SEND-TOKEN-LIST-1 TOK STREAM NIL))
     (SEND STREAM ':TYO (IF TOP-LEVEL-P %PUNCTUATION-TOP-LEVEL-END %PUNCTUATION-END)))
    (:SYMBOL
     (COND ((EQ TOKEN 'T)
	    (SEND STREAM ':TYO %PUNCTUATION-TRUE))
	   ((KEYWORDP TOKEN)
	    (SEND STREAM ':TYO %PUNCTUATION-KEYWORD)
	    (SEND-TOKEN-LIST-1 (GET-PNAME TOKEN) STREAM TOP-LEVEL-P))
	   (T (FERROR "Symbol ~S cannot be encoded for token stream ~S." TOKEN STREAM))))
    (:STRING
      (LET ((LENGTH (STRING-LENGTH TOKEN)))
	(IF (< LENGTH %COUNT-LIMIT)
	    (SEND STREAM ':TYO LENGTH)
	    (SEND STREAM ':TYO %PUNCTUATION-LONG)
	    (LOOP FOR SHIFT UPFROM 0 BY 8
		  REPEAT 4
		  DO (SEND STREAM ':TYO (LDB (BYTE 8 SHIFT) LENGTH))))
	(WHEN (STRING-FAT-P TOKEN)
	  (IF (LOOP FOR CH BEING THE ARRAY-ELEMENTS OF TOKEN
		    NEVER (CHAR-FAT-P CH))
	      (LET ((THIN-TOKEN (MAKE-ARRAY LENGTH :TYPE 'ART-STRING
					    :LEADER-LENGTH (ARRAY-LEADER-LENGTH TOKEN))))
		(COPY-ARRAY-CONTENTS-AND-LEADER TOKEN THIN-TOKEN)
		(SETQ TOKEN THIN-TOKEN))
	      (FERROR "String ~S cannot be encoded for token stream ~S.  We have no way to encode fat strings yet."
		      TOKEN STREAM)))
	(WITH-STACK-ARRAY (ENCODED-TOKEN LENGTH :TYPE 'ART-8B :DISPLACED-TO TOKEN)
	  (SEND STREAM ':STRING-OUT ENCODED-TOKEN 0 LENGTH))))
    ((:FIXNUM :BIGNUM)
     (COND ((MINUSP TOKEN) (FERROR "Cannot send negative integers over token stream ~S"
				   TOKEN))
	   (( TOKEN 1_63.) (FERROR "Cannot send ~S over token stream, ~D. is the ~
				    largest integer legal to send." TOKEN (1- 1_63.)))
	   ((< TOKEN 256.)
	    (SEND STREAM ':TYO %PUNCTUATION-SHORT-INTEGER)
	    (SEND STREAM ':TYO TOKEN))
	   (T (SEND STREAM ':TYO %PUNCTUATION-LONG-INTEGER)
	      (LET ((LENGTH (CEILING (HAULONG TOKEN) 8)))
		(SEND STREAM ':TYO LENGTH)
		(LOOP FOR SHIFT UPFROM 0 BY 8
		      REPEAT LENGTH
		      DO (SEND STREAM ':TYO (LDB (BYTE 8 SHIFT) TOKEN)))))))))

;;; This is used with input data streams.
;;; (It's suitable for the NEXT-INPUT-BUFFER of data stream mode, and the LINE-IN or whatever
;;;  of record oriented modes.)
(DEFMETHOD (:NEXT-INPUT-DATA-TOKEN TOKEN-LIST-STREAM) (NO-HANG-P)
  (DECLARE (VALUES BUFFER START END END-OF-RECORD-P))
  (BLOCK SPECIAL
    (LOOP DOING
      (MULTIPLE-VALUE-BIND (BUFFER START END)
	  (SEND SELF ':READ-INPUT-BUFFER "Unexpected eof" NO-HANG-P)
	(WHEN (OR (PLUSP TOKEN-INPUT-BYTES-PENDING)
		  (LOOP FOR INDEX FROM START BELOW END
			DO (LET ((BYTE (AREF BUFFER INDEX)))
			     (IF (< BYTE %COUNT-LIMIT)
				 (RETURN (SETQ START (1+ INDEX)
					       TOKEN-INPUT-BYTES-PENDING BYTE))
			       (SELECTOR BYTE =
				 (%PUNCTUATION-PAD )
				 (%PUNCTUATION-LONG
				   ;; Rather than worry about byte counts crossing packet
				   ;; boundaries, let :TYI do the work.
				   (SEND SELF ':ADVANCE-INPUT-BUFFER (1+ INDEX))
				   (LET ((LENGTH 0))
				     (LOOP FOR SHIFT UPFROM 0 BY 8
					   REPEAT 4
					   DO (SETQ LENGTH (DPB (SEND SELF ':TYI T)
								(BYTE 8 SHIFT)
								LENGTH)))
				     (SETQ TOKEN-INPUT-BYTES-PENDING LENGTH))
				   ;; TYI may have caused us to cross buffer boundaries, so
				   ;; refresh our idea of what buffer we have.
				   (MULTIPLE-VALUE (BUFFER START END)
				     (SEND SELF ':READ-INPUT-BUFFER))
				   (RETURN T))
				 (%PUNCTUATION-TOP-LEVEL-BEGIN
				   (RETURN-FROM SPECIAL (SEND SELF ':READ-TOKEN-LIST)))
				 ;; This is old for form for :EOF
				 (%PUNCTUATION-TOP-LEVEL-END
				   (SEND SELF ':ADVANCE-INPUT-BUFFER (1+ INDEX))
				   (RETURN-FROM SPECIAL ':END))
				 (%PUNCTUATION-KEYWORD
				   (LET ((SYM (SEND SELF :READ-TOKEN-LIST)))
				     (IF (EQ SYM ':EOF)
					 (RETURN-FROM SPECIAL ':END)
					 (ERROR
					   'TOKEN-STREAM-DATA-ERROR
					   :STREAM SELF
					   :REPORT-STRING
					   (FORMAT NIL "The keyword ~S was received.~@
					      It is not valid token data stream data."
					     SYM)))))				 
				 (OTHERWISE
				   (ERROR
				     'TOKEN-STREAM-DATA-ERROR
				     :STREAM SELF
				     :REPORT-STRING
				     (FORMAT NIL "The byte #o~O was received.~@
	                               This byte is not a valid token data stream delimiter."
					     BYTE))))))))
	  (LET ((LENGTH (MIN TOKEN-INPUT-BYTES-PENDING (- END START))))
	    (DECF TOKEN-INPUT-BYTES-PENDING LENGTH)
	    (SETQ TOKEN-INPUT-RECORD-END (+ START LENGTH))
	    (RETURN (VALUES BUFFER START TOKEN-INPUT-RECORD-END
			    NIL			;Turn off EOR junk until works right.
			    ;;(ZEROP TOKEN-INPUT-BYTES-PENDING)
			    ))))
	(SEND SELF ':ADVANCE-INPUT-BUFFER)))))

(DEFMETHOD (:ADVANCE-INPUT-DATA-TOKEN TOKEN-LIST-STREAM) ()
  (SEND SELF ':ADVANCE-INPUT-BUFFER TOKEN-INPUT-RECORD-END))

;;; This is used for output data streams where the actual record boundaries don't matter.
;;; (I.e. data stream mode.)
(DEFMETHOD (:NEXT-OUTPUT-DATA-TOKEN TOKEN-LIST-STREAM) ()
  (LOOP FOR PAUSE = NIL THEN T DOING
	(MULTIPLE-VALUE-BIND (BUFFER START END)
	    (SEND SELF ':GET-OUTPUT-BUFFER)
	  (SETQ TOKEN-OUTPUT-BYTE-COUNT-POSITION START)
	  (LET ((LENGTH (- END START)))
	    (WHEN (> LENGTH 1)
	      (IF ( LENGTH %COUNT-LIMIT)
		  (PROGN (SETF (AREF BUFFER START) 0)
			 (RETURN (VALUES BUFFER (1+ START) END)))
		  (PROGN (SETF (AREF BUFFER START) %PUNCTUATION-LONG)
			 (RETURN (VALUES BUFFER (+ START 5) END)))))))
	;; See (BUFFERED-STREAM-WITH-MARK :NEW-OUTPUT-BUFFER)
	(SEND SELF ':FORCE-OUTPUT)
	(WHEN PAUSE (PROCESS-SLEEP 120. "Token buffer"))
	(SEND SELF ':FINISH)))

(DEFMETHOD (:ADVANCE-OUTPUT-DATA-TOKEN TOKEN-LIST-STREAM) (BUFFER END EXPLICIT)
  (IF (= (AREF BUFFER TOKEN-OUTPUT-BYTE-COUNT-POSITION) %PUNCTUATION-LONG)
      (LET ((LENGTH (- END TOKEN-OUTPUT-BYTE-COUNT-POSITION 5)))
	(WHEN (PLUSP LENGTH)
	  (LOOP FOR SHIFT UPFROM 0 BY 8
		FOR POS UPFROM (1+ TOKEN-OUTPUT-BYTE-COUNT-POSITION)
		REPEAT 4
		DO (SETF (AREF BUFFER POS) (LDB (BYTE 8 SHIFT) LENGTH)))
	  (SETQ TOKEN-OUTPUT-BYTE-COUNT-POSITION NIL)
	  (SEND SELF ':ADVANCE-OUTPUT-BUFFER END)))
      (LET ((LENGTH (- END TOKEN-OUTPUT-BYTE-COUNT-POSITION 1)))
	(WHEN (PLUSP LENGTH)
	  (ASET LENGTH BUFFER TOKEN-OUTPUT-BYTE-COUNT-POSITION)
	  (SETQ TOKEN-OUTPUT-BYTE-COUNT-POSITION NIL)
	  (SEND SELF ':ADVANCE-OUTPUT-BUFFER END))))
  (WHEN EXPLICIT
    (SEND SELF ':FORCE-OUTPUT)))

(DEFFLAVOR BUFFERED-TOKEN-STREAM ()
	   (TOKEN-LIST-STREAM BUFFERED-STREAM-WITH-MARK)
  )

(COMPILE-FLAVOR-METHODS BUFFERED-TOKEN-STREAM)


(DEFFLAVOR TOKEN-INPUT-DATA-STREAM
	(
	 RAW-STREAM
	 (EOF-FLAG NIL)
	 (INPUT-BUFFER-STATE NIL))		;This is simply for checking, because
						;this code is fond of subtle bugs elsewhere.
	(SI:BASIC-BUFFERED-INPUT-STREAM)
  (:INITABLE-INSTANCE-VARIABLES RAW-STREAM)
  (:GETTABLE-INSTANCE-VARIABLES RAW-STREAM))

(DEFFLAVOR TOKEN-DATA-WAS-LIST (LIST (STREAM) RAW-STREAM)
	   (DBG:DEBUGGER-CONDITION)
  (:INITABLE-INSTANCE-VARIABLES RAW-STREAM STREAM LIST)
  (:GETTABLE-INSTANCE-VARIABLES LIST STREAM))

;;; The way NFILE uses this, it reads a token-list out of the inferior stream
;;; before actually proceeding this condition.
(DEFMETHOD (:PROCEED TOKEN-DATA-WAS-LIST :PROCEED) ()
  T)

(DEFMETHOD (:DOCUMENT-PROCEED-TYPE TOKEN-DATA-WAS-LIST :PROCEED) (REPORT-STREAM)
  (FORMAT REPORT-STREAM "Read next token as input data."))

(DEFMETHOD (:REPORT TOKEN-DATA-WAS-LIST) (REPORT-STREAM)
  (FORMAT REPORT-STREAM
	  "A list was seen instead of an input data token from ~S, feeding stream ~S"
	  RAW-STREAM STREAM))

(COMPILE-FLAVOR-METHODS TOKEN-DATA-WAS-LIST)

(DEFMETHOD (:NEXT-INPUT-BUFFER TOKEN-INPUT-DATA-STREAM) (&OPTIONAL NO-HANG-P)
  (LOOP DO
	(WHEN INPUT-BUFFER-STATE
	  (FERROR ":NEXT-INPUT-BUFFER, but still have ~S?" INPUT-BUFFER-STATE))
	(WHEN EOF-FLAG
	  (RETURN (VALUES NIL NIL)))
	(WHEN (AND RAW-STREAM (NULL EOF-FLAG))
	  (CATCH 'RETRY
	      (RETURN
		(MULTIPLE-VALUE-BIND (BUFFER START END EOR)
		    (SEND RAW-STREAM ':NEXT-INPUT-DATA-TOKEN NO-HANG-P)
		  (COND ((AND (NULL BUFFER) NO-HANG-P)
			 NIL)
			((NULL BUFFER)
			 (FERROR
			   "Null buffer in (TOKEN-INPUT-DATA-STREAM :NEXT-INPUT-BUFFER)"))
			((EQ BUFFER ':END)			;An EOF, at our level.
			 ;; What on earth is the point of this???*********************
			 ;; It seems to ensure (pointlessly?) non-reusability.
			 ;;(SETQ RAW-STREAM NIL)
			 (SETQ EOF-FLAG T INPUT-BUFFER-STATE NIL)
			 NIL)
			((EQ BUFFER ':START)
			 (ERROR 'TOKEN-STREAM-DATA-ERROR
				':STREAM SELF
				':REPORT-STRING
				"The beginning of a token list was encountered in a TOKEN-INPUT-DATA-STREAM."))
			((SYMBOLP BUFFER)
			 (FERROR "Symbol returned for buffer ~S" BUFFER))
			((LISTP BUFFER)
			 (SIGNAL-PROCEED-CASE (() 'TOKEN-DATA-WAS-LIST
					       :RAW-STREAM RAW-STREAM
					       :STREAM SELF
					       :LIST BUFFER)
			   (:PROCEED))
			 (THROW 'RETRY NIL))
			(T
			 (SETQ INPUT-BUFFER-STATE BUFFER)

			 ;; This "Record feature" seems pretty broken as of Sys 300,
			 ;; and causes "great sorrow" when it goes off.  Pending
			 ;; resolution,
			 (SETQ EOR NIL)

			 (RETURN (VALUES BUFFER START END EOR))))))))))

(DEFMETHOD (:CLEAR-EOF TOKEN-INPUT-DATA-STREAM) ()
  (SEND SELF ':DISCARD-CURRENT-INPUT-BUFFER)
  (SETQ EOF-FLAG NIL input-buffer-state nil))

(DEFMETHOD (:DISCARD-INPUT-BUFFER TOKEN-INPUT-DATA-STREAM) (IGNORE)
  (UNLESS INPUT-BUFFER-STATE
    (FERROR ":DISCARD-INPUT-BUFFER, but don't really have input buffer"))
  (SETQ INPUT-BUFFER-STATE NIL)
  (SEND RAW-STREAM ':ADVANCE-INPUT-DATA-TOKEN))

(DEFMETHOD (:CLOSE TOKEN-INPUT-DATA-STREAM) (&OPTIONAL ABORT-P)
  ABORT-P
  NIL)

(DEFFLAVOR TOKEN-LIST-INPUT-DATA-STREAM
	()
	(TOKEN-INPUT-DATA-STREAM SI:BUFFERED-INPUT-CHARACTER-STREAM))

;;; Similarly for output
(DEFFLAVOR TOKEN-OUTPUT-DATA-STREAM (RAW-STREAM (BUF-STATE NIL))
	   (SI:BASIC-BUFFERED-OUTPUT-STREAM)
  (:INITABLE-INSTANCE-VARIABLES RAW-STREAM)
  (:GETTABLE-INSTANCE-VARIABLES RAW-STREAM))

(DEFMETHOD (:NEW-OUTPUT-BUFFER TOKEN-OUTPUT-DATA-STREAM) ()
  (IF BUF-STATE
      (FERROR "New output buffer before send or discard old one?"))
  (MULTIPLE-VALUE-BIND (BUF START END)
      (SEND RAW-STREAM ':NEXT-OUTPUT-DATA-TOKEN)
    (SETQ BUF-STATE BUF)
    (VALUES (OR BUF (FERROR "Null buffer from :NEXT-OUTPUT-DATA-TOKEN"))
	    START END)))

(DEFMETHOD (:SEND-OUTPUT-BUFFER TOKEN-OUTPUT-DATA-STREAM) (BUFFER END EXPLICIT)
  (UNLESS BUF-STATE
    (FERROR "Can't send output buffer, no buffer."))
  (OR (EQ BUF-STATE BUFFER)
      (FERROR "Trying to send other than the buffer I gave you?"))
  (SETQ BUF-STATE NIL)
  (SEND RAW-STREAM ':ADVANCE-OUTPUT-DATA-TOKEN BUFFER END EXPLICIT))
	

(DEFMETHOD (:DISCARD-OUTPUT-BUFFER TOKEN-OUTPUT-DATA-STREAM) (BUFFER)
  (OR (EQ BUF-STATE BUFFER)
      (FERROR "Trying to discard other than the buffer I gave you?"))
  ;; Do this first (assert integrity check) to make it abortable.
  (SETQ BUF-STATE NIL)
  ;; Best we can do, not worth holding around the buffer.
  (SEND RAW-STREAM ':DISCARD-CURRENT-OUTPUT-BUFFER))

(DEFMETHOD (:CLOSE TOKEN-OUTPUT-DATA-STREAM) (&OPTIONAL ABORT-P)
  (WHEN RAW-STREAM				;allow multiple closes.
    (UNLESS ABORT-P
      (SEND SELF ':EOF))
    (SETQ RAW-STREAM NIL)))

;;; Output should have been forced by daemons.
(DEFMETHOD (:EOF TOKEN-OUTPUT-DATA-STREAM) ()
  (SEND SELF ':SEND-CURRENT-OUTPUT-BUFFER NIL)
  (LET ((SVV (SEND SELF :SEND-IF-HANDLES :DATA-PROTOCOL-VERSION)))
    (IF (AND SVV (NOT (EQL SVV 1)))		;allow hairier lists later
	(SEND RAW-STREAM :SEND-TOKEN-LIST ':EOF)
;;;+++++TAKE OUT COMPATIBILITY KLUDGES IN RELEASE 7.
	(SEND RAW-STREAM ':TYO %PUNCTUATION-TOP-LEVEL-END)))
  (SEND RAW-STREAM ':FORCE-OUTPUT))

(DEFFLAVOR TOKEN-LIST-OUTPUT-DATA-STREAM
	()
	(TOKEN-OUTPUT-DATA-STREAM SI:BUFFERED-OUTPUT-CHARACTER-STREAM))


;;;+++++TAKE OUT COMPATIBILITY KLUDGES IN RELEASE 7.
(DEFFLAVOR TOKEN-LIST-BIDIRECTIONAL-DATA-STREAM
	(DATA-PROTOCOL-VERSION)			;for NFILE...
	;;Compatibility kludge to get version 1 and 2 NFILE's...
	(SI:BIDIRECTIONAL-STREAM
	 TOKEN-OUTPUT-DATA-STREAM SI:BUFFERED-OUTPUT-CHARACTER-STREAM
	 TOKEN-INPUT-DATA-STREAM SI:BUFFERED-INPUT-CHARACTER-STREAM)
  (:GETTABLE-INSTANCE-VARIABLES DATA-PROTOCOL-VERSION)
  (:INITABLE-INSTANCE-VARIABLES DATA-PROTOCOL-VERSION))

(COMPILE-FLAVOR-METHODS
  TOKEN-INPUT-DATA-STREAM
  TOKEN-LIST-INPUT-DATA-STREAM
  TOKEN-OUTPUT-DATA-STREAM
  TOKEN-LIST-OUTPUT-DATA-STREAM
  TOKEN-LIST-BIDIRECTIONAL-DATA-STREAM)
