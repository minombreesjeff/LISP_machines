;;; -*- Mode: LISP; Package: CHAOS; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmacro measure-elapsed-time (&body forms)
  `(// (- (- (time)
	     (progn ,@forms
		    (time))))
       60.0))

(defun sink-performance (host &optional unc-p (ntimes 1) &aux conn)
  (unwind-protect
    (measure-elapsed-time
      (setq conn (connect host "SINK"))
      (loop repeat (foreign-window-size conn)
	    as pkt = (get-pkt)
	    do (setf (pkt-nbytes pkt) 488.)
	       (if unc-p (send-unc-pkt conn pkt) (send-pkt conn pkt)))
      (loop with next-report-size = 0
	    for size upfrom 0 by 488. below (* 907671. ntimes)
	    as pkt = (get-pkt)
	    do (when ( size next-report-size)
		 (let ((base 10.)) (prin1-then-space next-report-size))
		 (incf next-report-size 100000.))
	       (setf (pkt-nbytes pkt) 488.)
	       (if unc-p (send-unc-pkt conn pkt)) (send-pkt conn pkt)))
    (when conn
      (remove-conn conn))))

(defun accept-connection-when-rfc-received (conn timeout)
  (process-wait-with-timeout "Await RFC" timeout
			     #'(lambda (conn)
				 (neq (state conn) 'listening-state))
			     conn)
  (when (memq (state conn) '(rfc-received-state brd-received-state)) (accept conn)))

(defun self-sink-performance (&optional (ntimes 1) &aux out in preload)
  (unwind-protect
    (measure-elapsed-time
      (setq in  (listen "self-sink" *default-window-size* ()))
      (process-run-function "Accept RFC" #'accept-connection-when-rfc-received in 300.)
      (setq out (connect *local-host* "self-sink"))
      (setq preload (fix (* (foreign-window-size in) 2\3)))
      (loop repeat preload
	    as pkt = (get-pkt)
	    do (setf (pkt-nbytes pkt) 488.)
	       (send-pkt out pkt))
      (loop with next-report-size = 0
	    for size upfrom (* 488. preload) by 488. below (* 907671. ntimes)
	    do (when ( size next-report-size)
		 (let ((base 10.)) (prin1-then-space next-report-size))
		 (incf next-report-size 100000.))
	       (send-pkt out (get-next-pkt in)))
      (loop repeat preload
	    do (return-pkt (get-next-pkt in))))
    (when in  (remove-conn in))
    (when out (remove-conn out))))

(defun echo-performance (host &optional (ntimes 1) &aux conn preload)
  (unwind-protect
    (measure-elapsed-time
      (setq conn (connect host "ECHO"))
      (setq preload (foreign-window-size conn))
      (loop repeat preload
	    as pkt = (get-pkt)
	    do (setf (pkt-nbytes pkt) 488.)
	       (send-pkt conn pkt))
      (loop with next-report-size = 0
	    for size upfrom (* 488. preload) by 488. below (* 907671. ntimes)
	    do (when ( size next-report-size)
		 (let ((base 10.)) (prin1-then-space next-report-size))
		 (incf next-report-size 100000.))
	       (send-pkt conn (get-next-pkt conn)))
      (loop repeat preload
	    do (return-pkt (get-next-pkt conn))))
    (when conn (remove-conn conn))))

(defun self-echo-performance (&optional (ntimes 1) &aux out in preload)
  (unwind-protect
    (measure-elapsed-time
      (setq in  (listen "self-echo" *default-window-size* ()))
      (process-run-function "Accept RFC" #'accept-connection-when-rfc-received in 300.)
      (setq out (connect *local-host* "self-echo"))
      (setq preload (// (foreign-window-size in) 2))
      (loop repeat preload
	    as pkt1 = (get-pkt)
	    as pkt2 = (get-pkt)
	    do (setf (pkt-nbytes pkt1) 488.)
	       (setf (pkt-nbytes pkt2) 488.)		    
	       (send-pkt out pkt1)
	       (send-pkt in  pkt2))
      (loop with next-report-size = 0
	    with limit = (* 907671. ntimes)
	    with size = 0
	    with pkt = ()
	    until ( size limit)
	    do (when ( size next-report-size)
		 (let ((base 10.)) (prin1-then-space next-report-size))
		 (incf next-report-size 100000.))
	       (cond ((and (plusp (window-available in))
			   (setq pkt (get-next-pkt in t)))
		      (loop do (send-pkt in pkt)
			    while (plusp (window-available in))
			    do (setq pkt (get-next-pkt in t))
			    while pkt))
		     ((and (plusp (window-available out))
			   (setq pkt (get-next-pkt out t)))
		      (loop do (incf size 488.)
			    (send-pkt out pkt)
			    while (plusp (window-available out))
			    do (setq pkt (get-next-pkt out t))
			    while pkt))
		     ('else (process-wait "Await PKT"
					  #'(lambda (in out)
					      (or (and (plusp (window-available in))
						       (read-pkts in))
						  (and (plusp (window-available out))
						       (read-pkts out))))
					  in out)))))
    (when in  (remove-conn in))
    (when out (remove-conn out))))

(defun source-performance (host &optional unc-p (ntimes 1) &aux conn)
  (unwind-protect
    (measure-elapsed-time
      (setq conn (connect host (if unc-p "UNC-SOURCE" "SOURCE")))
      (loop with next-report-size = 0
	    with size = 0
	    as stop-size = (* 907671. ntimes)
	    until ( size stop-size)
	    do (when ( size next-report-size)
		 (let ((base 10.)) (prin1-then-space next-report-size))
		 (incf next-report-size 100000.))
	    as pkt = (get-next-pkt conn)
	    do (incf size (pkt-nbytes pkt))
	       (return-pkt pkt)))
    (when conn (remove-conn conn))))

(defun echo-all-packet-sizes (host &optional from to by &aux conn)
  (or from (setq from 0))
  (or to (setq to max-data-bytes-per-pkt))
  (or by (setq by 1))
  (unwind-protect
    (progn (setq conn (connect host "ECHO"))
	   (loop for size from from to to by by
		 as pkt = (get-pkt)
		 do (setf (pkt-nbytes pkt) size)
		    (let ((base 10.)) (prin1-then-space size))
		    (send-pkt conn pkt)
		    (return-pkt (get-next-pkt conn))))
    (when conn (remove-conn conn))))


#|  Old hill climbing for tuning.  Not yet converted to the new network system

(defstruct (hill :list :conc-name)		;a list so it can be printed and read
  host
  function
  choices
  to-do
  queue
  already-done
  )

(defstruct (camp :list :conc-name)		;so we can use assoc
  params
  time
  host
  function
  meters
  )

(defun initialize-hill (file host function)
  (with-open-file (output file ':direction ':output)
    (let ((choices '((*batch-sts-enabled* t nil)
		     (*trigger-retransmission-enabled* t nil)
		     (*record-debugging-info* t nil)
		     (*retransmit-interval* 30. 20.)
		     (*adaptive-retransmission-enabled* t nil)
		     (*minimum-packet-retransmit-interval* 8. 2.)
		     (*default-window-size* 13. 25.))))
      (print (make-hill
	       host host
	       function function
	       choices choices
	       to-do (list (loop for (param val) in choices
				 collect (list param val)))
	       queue nil
	       already-done nil)
	     output))))

(defun climb-hill (file &optional (ncamps 1_12.))
  (let* ((hill (with-open-file (input file ':direction ':input)
		 (read input))))
    (prog ((first-time t))
       try-from-to-do
	  (when (null (hill-to-do hill))
	    (if first-time
		(setq first-time nil)
	      (with-open-file (output file ':direction ':output)
		(print hill output)))
	    (go try-from-the-queue))
	  (push (measure-the-hill (hill-host hill)
				  (hill-function hill)
				  (pop (hill-to-do hill)))
		(hill-queue hill))
	  (decf ncamps)
	  (go try-from-to-do)
       try-from-the-queue
	  (setf (hill-already-done hill)
		(sort (hill-already-done hill)
		      #'(lambda (x y) (< (camp-time x) (camp-time y)))))
	  (when (or (null (hill-queue hill)) (< ncamps 0))
	    (with-open-file (output file ':direction ':output)
	      (print hill output))
	    (return t))
	  (setf (hill-queue hill)
		(sort (hill-queue hill)
		      #'(lambda (x y) (< (camp-time x) (camp-time y)))))
	  (let ((camp (pop (hill-queue hill))))
	    (push camp (hill-already-done hill))
	    (loop with params = (camp-params camp)
		  with prev-params
		  for choice in (hill-choices hill)
		  as param = (pop params)
		  do (loop with (var . vals) = choice
			   for val in vals
			   as camp-params = `(,@(reverse prev-params)
					      (,var ,val)
					      ,@params)
			   do (unless (or (assoc camp-params (hill-queue hill))
					  (assoc camp-params (hill-already-done hill)))
				(push camp-params (hill-to-do hill))))
		  do (push param prev-params)))
	  (if (hill-to-do hill)
	      (go try-from-to-do)
	    (go try-from-the-queue)))))

(defun measure-the-hill (host function params
			 &aux my-old-values his-old-values old-values-valid)
  (unwind-protect
    (progn (setq my-old-values  (loop for (p) in params collect (symeval p)))
	   (setq his-old-values (loop for (p) in params collect (car (tweek host p))))
	   (setq old-values-valid t)
	   (loop for (p v) in params
		 do (set p v)
		    (tweek host `(setq ,p ',v)))
	   (let* ((vars (append *chaos-meters* chaos:peek-a-boo-list))
		  (vals1 (loop for var in vars collect (symeval var)))
		  (time  (let ((standard-output 'si:null-stream)) (funcall function host)))
		  (vals2 (loop for var in vars collect (symeval var))))
	     (make-camp
	       params params
	       time time
	       host host
	       function function
	       meters (loop for var in vars
			    for val1 in vals1
			    for val2 in vals2
			    collect (list var (- val2 val1))))))
    (when old-values-valid
      (loop for (p) in params
	    for val in his-old-values
	    do (tweek host `(setq ,p ',val)))
      (loop for (p) in params
	    for val in his-old-values
	    do (set p val)))))
	    
(defun map-hill (file)
  (let* ((hill (with-open-file (input file ':direction ':input)
		 (read input)))) 
   (format t "~%Host:~10T~A~%Function:~10T~A"
	   (hill-host hill) (hill-function hill))
   (let ((camps (sort (append (hill-queue hill) (hill-already-done hill))
		      #'(lambda (x y) (< (camp-time x) (camp-time y))))))
     (loop for (var) in (hill-choices hill)
	   for indent upfrom 15. by 5.
	   do (format t "~%")
	   do (loop for ind upfrom 15. below indent by 5.
		    do (format t "~VT" ind))
	   do (format t "~VT~A" indent var))
     (format t "~%Time")
     (loop for i below (length (hill-choices hill))
	   do (format t "~VT" (+ (* i 5.) 15.)))
     (loop for camp in camps
	   do (format t "~%~A" (camp-time camp))
	   do (loop for (var val) in (camp-params camp)
		    for indent upfrom 15. by 5.
		    do (format t "~VT~A" indent val))))))

|#
