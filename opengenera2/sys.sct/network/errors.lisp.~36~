;;; -*- Mode: LISP; Package: NETI; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Generic network error system support.

(DEFFLAVOR NETWORK-ERROR () (ERROR) :ABSTRACT-FLAVOR)

(DEFMETHOD (DBG:ERROR-CLASSIFICATION NETWORK-ERROR) () "network")

(DEFFLAVOR NETWORK-STREAM-CLOSED () (NETWORK-ERROR STREAM-CLOSED) :ABSTRACT-FLAVOR)

(DEFFLAVOR LOCAL-NETWORK-ERROR () (NETWORK-ERROR) :ABSTRACT-FLAVOR)

(DEFFLAVOR NETWORK-RESOURCES-EXHAUSTED () (LOCAL-NETWORK-ERROR) :ABSTRACT-FLAVOR)

(DEFFLAVOR INTERFACE-NOT-WORKING () (LOCAL-NETWORK-ERROR) :ABSTRACT-FLAVOR)

;;; Explain why an object was not found
(DEFFLAVOR OBJECT-NOT-FOUND-EXPLANATION-MIXIN
	((VALID-P T)
	 VALIDITY-CHECKING-INHIBITED
	 (INVALID-NAMESPACES (NREVERSE *INVALID-NAMESPACES*)))
	()
  (:REQUIRED-INSTANCE-VARIABLES CLASS)
  (:GETTABLE-INSTANCE-VARIABLES VALID-P INVALID-NAMESPACES)
  (:INITABLE-INSTANCE-VARIABLES VALID-P INVALID-NAMESPACES))

(DEFMETHOD (MAKE-INSTANCE OBJECT-NOT-FOUND-EXPLANATION-MIXIN) (&REST IGNORE)
  (SETQ VALIDITY-CHECKING-INHIBITED *INHIBIT-VALIDITY-CHECKING*))

(DEFMETHOD (:REPORT OBJECT-NOT-FOUND-EXPLANATION-MIXIN :AFTER) (STREAM)
  (UNLESS VALID-P
    (FORMAT STREAM "~%No ~@ with that name is already known by the local machine,~%" CLASS)
    (COND (VALIDITY-CHECKING-INHIBITED
	   (FORMAT STREAM "and no namespace server was contacted because ~
				validity checking is inhibited."))
	  (T
	   (FORMAT STREAM "but it is not certain that there is no such ~@." CLASS)
	   (LOOP FOR REASON IN INVALID-NAMESPACES
		 DO (FORMAT STREAM "~&~A" REASON))
	   (WHEN (NULL INVALID-NAMESPACES)
	     (FORMAT STREAM "~%Some namespace server did not respond."))))))

(DEFFLAVOR UNKNOWN-HOST-NAME (NAME (CLASS :HOST))
	   (OBJECT-NOT-FOUND-EXPLANATION-MIXIN LOCAL-NETWORK-ERROR)
  (:GETTABLE-INSTANCE-VARIABLES NAME)
  (:INITABLE-INSTANCE-VARIABLES NAME))

(DEFMETHOD (:REPORT UNKNOWN-HOST-NAME) (STREAM)
  (FORMAT STREAM "~S is not the name of a known host." NAME))

(DEFFLAVOR UNKNOWN-NETWORK-OR-NAMESPACE-IN-HOST-NAME (NETWORK-NAME) (UNKNOWN-HOST-NAME)
  :GETTABLE-INSTANCE-VARIABLES
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT UNKNOWN-NETWORK-OR-NAMESPACE-IN-HOST-NAME) (STREAM)
  (FORMAT STREAM "~S is not the name of a known network~:[ or namespace~] in ~S."
	  NETWORK-NAME (STRING-SEARCH-CHAR #/| NETWORK-NAME) NAME))

(DEFFLAVOR UNKNOWN-ADDRESS (ADDRESS) (LOCAL-NETWORK-ERROR)
  :GETTABLE-INSTANCE-VARIABLES
  :INITABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

(DEFMETHOD (:REPORT UNKNOWN-ADDRESS) (STREAM)
  (FORMAT STREAM "~S is not a known ~A address." ADDRESS (SEND SELF ':NETWORK-TYPE)))


(DEFFLAVOR OBJECT-NOT-FOUND (CLASS NAME VALID-P) (OBJECT-NOT-FOUND-EXPLANATION-MIXIN ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT OBJECT-NOT-FOUND) (STREAM)
  (FORMAT STREAM "The ~(~A~) named ~S was not found." CLASS NAME))

(DEFFLAVOR OBJECT-NOT-FOUND-IN-NAMESPACE (NAMESPACE INTERNED-NAME) (OBJECT-NOT-FOUND)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)


(DEFFLAVOR OBJECT-NOT-FOUND-IN-SEARCH-LIST (SEARCH-LIST) (OBJECT-NOT-FOUND)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)


(DEFFLAVOR NAMESPACE-NOT-FOUND () (OBJECT-NOT-FOUND)
  (:DEFAULT-INIT-PLIST :CLASS :NAMESPACE))


(DEFFLAVOR NAMESPACE-OBJECT-DELETED (CLASS) (ERROR)
  :GETTABLE-INSTANCE-VARIABLES
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT NAMESPACE-OBJECT-DELETED) (STREAM)
  (FORMAT STREAM "The object of type ~A has been deleted." CLASS))


(DEFFLAVOR UNINTERNED-OBJECT-IN-ATTRIBUTE (OBJECT) (ERROR DBG:NO-ACTION-MIXIN)
  :GETTABLE-INSTANCE-VARIABLES
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT UNINTERNED-OBJECT-IN-ATTRIBUTE) (STREAM)
  (FORMAT STREAM "The uninterned object ~S is not legal in an attribute." OBJECT))


(COMPILE-FLAVOR-METHODS OBJECT-NOT-FOUND-IN-NAMESPACE OBJECT-NOT-FOUND-IN-SEARCH-LIST
			NAMESPACE-NOT-FOUND
			NAMESPACE-OBJECT-DELETED UNINTERNED-OBJECT-IN-ATTRIBUTE)


;;; The CONNECTION in these is assumed to PRINC itself as some text that includes
;;; the name of the network, the word "connection", and the name of the foreign host.
(DEFFLAVOR REMOTE-NETWORK-ERROR
	((FOREIGN-HOST NIL)
	 (CONNECTION NIL))
	(NETWORK-ERROR)
  (:REQUIRED-METHODS :NETWORK)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

(DEFMETHOD (:NETWORK-TYPE REMOTE-NETWORK-ERROR) ()
  (SEND (SEND SELF ':NETWORK) ':TYPE))

;;; ATTEMPT fills in the blank in "Attempt to ... connection"
(DEFFLAVOR BAD-CONNECTION-STATE ((ATTEMPT "use"))
	   (REMOTE-NETWORK-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

;;; The various network codes should set up ERROR-RESTARTs for CONNECTION-ERRORs, which
;;; allow users to try to connect again.
;;; In real flavors, at least for the chaosnet, this is usually mixed with
;;; BAD-CONNECTION-STATE.
(DEFFLAVOR CONNECTION-ERROR
	(;; This is the generic identifier, NIL if special protocol or sub-protocol such as
	 ;; data connection.
	 (PROTOCOL-NAME NIL))
	(REMOTE-NETWORK-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

;; Other networks may define additional instance variables for contact name, port
;; number or whatever the network dependent version is.  This method should print
;; something like "27 (TCP-FTP)" or "FILE 1 (QFILE)".
(DEFMETHOD (:PRINT-REQUEST-NAME CONNECTION-ERROR) (STREAM)
  (PRINC PROTOCOL-NAME STREAM))

;; Mixin flavor for the various forms of non-responding hosts: not
;; responding during initial connection, and not responding during
;; the middle of a connection that had been working.
(DEFFLAVOR HOST-NOT-RESPONDING () (REMOTE-NETWORK-ERROR) :ABSTRACT-FLAVOR)

;Should have an instance var which is how long we waited before signalling this, in seconds.
(DEFFLAVOR HOST-NOT-RESPONDING-DURING-CONNECTION
	()
	(HOST-NOT-RESPONDING CONNECTION-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

(DEFMETHOD (:REPORT HOST-NOT-RESPONDING-DURING-CONNECTION) (STREAM)
  (FORMAT STREAM "~A did not respond to a " FOREIGN-HOST)
  (SEND SELF ':PRINT-REQUEST-NAME STREAM)
  (SEND STREAM ':STRING-OUT " request."))

(DEFFLAVOR HOST-STOPPED-RESPONDING
	()
	(HOST-NOT-RESPONDING BAD-CONNECTION-STATE)
  :ABSTRACT-FLAVOR)

(DEFMETHOD (:REPORT HOST-STOPPED-RESPONDING) (STREAM)
  (FORMAT STREAM "Attempt to ~A ~A, which stopped responding."
	  ATTEMPT CONNECTION))

;; For CHAOS, this is the same as connection closed, but happens only
;; when establishing a connection.

(DEFFLAVOR CONNECTION-REFUSED
	(REASON)
	(CONNECTION-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

(DEFMETHOD (MAKE-INSTANCE CONNECTION-REFUSED) (&REST IGNORE)
  (WHEN (EQUAL REASON "")
    (SETQ REASON NIL)))

(DEFMETHOD (:REPORT CONNECTION-REFUSED) (STREAM)
  (FORMAT STREAM "Request to ~A for a " FOREIGN-HOST)
  (SEND SELF ':PRINT-REQUEST-NAME STREAM)
  (FORMAT STREAM " connection was refused.
~:[Reason given was /"~A/"~;No reason was given.~]"
	  (NULL REASON) REASON))

(DEFFLAVOR CONNECTION-CLOSED
	(REASON)
	(BAD-CONNECTION-STATE)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

(DEFMETHOD (MAKE-INSTANCE CONNECTION-CLOSED) (&REST IGNORE)
  (WHEN (EQUAL REASON "")
    (SETQ REASON NIL)))

(DEFMETHOD (:REPORT CONNECTION-CLOSED) (STREAM)
  (FORMAT STREAM "Attempt to ~A ~A,~% which was closed by ~A.
~:[Reason given was /"~A/"~;No reason was given.~]"
	  ATTEMPT CONNECTION FOREIGN-HOST (NULL REASON) REASON))

(DEFFLAVOR CONNECTION-LOST
	(REASON)
	(BAD-CONNECTION-STATE)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

(DEFMETHOD (MAKE-INSTANCE CONNECTION-LOST) (&REST IGNORE)
  (WHEN (EQUAL REASON "")
    (SETQ REASON NIL)))

(DEFMETHOD (:REPORT CONNECTION-LOST) (STREAM)
  (FORMAT STREAM "Attempt to ~A broken ~A.~:[~%Reason given by ~A was /"~A/"~]"
	  ATTEMPT CONNECTION (NULL REASON) FOREIGN-HOST REASON))

(DEFFLAVOR CONNECTION-NO-MORE-DATA
	(REASON)
	(BAD-CONNECTION-STATE)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR)

(DEFMETHOD (:REPORT CONNECTION-NO-MORE-DATA) (STREAM)
  (FORMAT STREAM "~A~:[ is ~A~].~%This connection won't receive any more data."
	  CONNECTION (NULL REASON) REASON))

(DEFFLAVOR CONNECTION-CLOSED-LOCALLY
	()
	(BAD-CONNECTION-STATE)
  :ABSTRACT-FLAVOR)

(DEFMETHOD (:REPORT CONNECTION-CLOSED-LOCALLY) (STREAM)
  (FORMAT STREAM "Attempt to ~A ~A, which has been closed locally."
	  ATTEMPT CONNECTION))

;;; Those that can be instantiated without a network
(COMPILE-FLAVOR-METHODS UNKNOWN-HOST-NAME UNKNOWN-NETWORK-OR-NAMESPACE-IN-HOST-NAME)

(DEFFLAVOR PROTOCOL-TIMEOUT (STREAM DIRECTION) (REMOTE-NETWORK-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:NETWORK PROTOCOL-TIMEOUT) ()
  (SEND STREAM ':NETWORK))

(DEFMETHOD (MAKE-INSTANCE PROTOCOL-TIMEOUT) (&REST IGNORE)
  (SETQ FOREIGN-HOST (SEND STREAM ':FOREIGN-HOST)))

(DEFMETHOD (:REPORT PROTOCOL-TIMEOUT) (STR)
  (FORMAT STR "Timeout while waiting for ~A." FOREIGN-HOST))

(COMPILE-FLAVOR-METHODS PROTOCOL-TIMEOUT)

(DEFMACRO WITH-STREAM-TIMEOUT ((STREAM DIRECTION TIMEOUT
				       &OPTIONAL CONDITION-NAME &REST CONDITION-ARGS)
			       &BODY BODY)
  `(LET ((.TIMER. (START-STREAM-TIMEOUT ,STREAM ,DIRECTION ,TIMEOUT
					,CONDITION-NAME ,@CONDITION-ARGS)))
     (UNWIND-PROTECT
	 (PROGN . ,BODY)
       (END-STREAM-TIMEOUT .TIMER.))))

(DEFRESOURCE STREAM-TIMERS ()
  :CONSTRUCTOR (PROCESS:CREATE-TIMER-CALL #'SET-STREAM-EXCEPTION
					  ;; STREAM PROCESS DIRECTION CONDITION-NAME ARGS
					  (LIST NIL NIL NIL NIL NIL)
					  :NAME "Stream Timeout"))

(DEFUN START-STREAM-TIMEOUT (STREAM DIRECTION TIMEOUT CONDITION-NAME &REST CONDITION-ARGS)
  (WHEN TIMEOUT
    (WHEN (NULL CONDITION-NAME)
      (SETQ CONDITION-NAME 'PROTOCOL-TIMEOUT))
    (LET ((TIMER (ALLOCATE-RESOURCE 'STREAM-TIMERS)))
      (LET ((TIMER-ARGS (PROCESS::TIMER-ARGS TIMER)))
	(SETF (CAR TIMER-ARGS) STREAM)
	(SETF TIMER-ARGS (CDR TIMER-ARGS))
	(SETF (CAR TIMER-ARGS) CURRENT-PROCESS)
	(SETF TIMER-ARGS (CDR TIMER-ARGS))
	(SETF (CAR TIMER-ARGS) DIRECTION)
	(SETF TIMER-ARGS (CDR TIMER-ARGS))
	(SETF (CAR TIMER-ARGS) CONDITION-NAME)
	(SETF TIMER-ARGS (CDR TIMER-ARGS))
	(SETF (CAR TIMER-ARGS) (COPYLIST CONDITION-ARGS)))	;usually NIL
      (PROCESS:RESET-TIMER-RELATIVE-TIMER-UNITS TIMER (* TIMEOUT 16667.))
      TIMER)))
					    
(DEFUN END-STREAM-TIMEOUT (TIMER)
  (WHEN TIMER
    (PROCESS:CLEAR-TIMER TIMER)
    (DEALLOCATE-RESOURCE 'STREAM-TIMERS TIMER)))

(DEFUN SET-STREAM-EXCEPTION (STREAM PROCESS DIRECTION CONDITION-NAME CONDITION-ARGS)
  (WITHOUT-INTERRUPTS
    (SELECTQ DIRECTION
      (:INPUT
       (WHEN (OPERATION-HANDLED-P STREAM :SET-INPUT-EXCEPTION)
	 (LEXPR-SEND STREAM :SET-INPUT-EXCEPTION CONDITION-NAME
		     :DIRECTION DIRECTION :STREAM STREAM CONDITION-ARGS)
	 (RETURN-FROM SET-STREAM-EXCEPTION NIL)))
      (:OUTPUT
       (WHEN (OPERATION-HANDLED-P STREAM :SET-OUTPUT-EXCEPTION)
	 (LEXPR-SEND STREAM :SET-OUTPUT-EXCEPTION CONDITION-NAME
		     :DIRECTION DIRECTION :STREAM STREAM CONDITION-ARGS)
	 (RETURN-FROM SET-STREAM-EXCEPTION NIL)))
      (:IO
       (WHEN (AND (OPERATION-HANDLED-P STREAM :SET-INPUT-EXCEPTION)
		  (OPERATION-HANDLED-P STREAM :SET-OUTPUT-EXCEPTION))
	 (LEXPR-SEND STREAM :SET-INPUT-EXCEPTION CONDITION-NAME
		     :DIRECTION DIRECTION :STREAM STREAM CONDITION-ARGS)
	 (LEXPR-SEND STREAM :SET-OUTPUT-EXCEPTION CONDITION-NAME
		     :DIRECTION DIRECTION :STREAM STREAM CONDITION-ARGS)
	 (RETURN-FROM SET-STREAM-EXCEPTION NIL))))
    (CL:APPLY #'PROCESS:INTERRUPT PROCESS #'SIGNAL CONDITION-NAME
	      :DIRECTION DIRECTION :STREAM STREAM CONDITION-ARGS)
    NIL))

(DEFFLAVOR HOST-BELIEVED-UNAVAILABLE (FOREIGN-HOST) (NETWORK-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT HOST-BELIEVED-UNAVAILABLE) (STREAM)
  (FORMAT STREAM "~A is believed to be down or unavailable." FOREIGN-HOST))

(DEFMETHOD (:PROCEED HOST-BELIEVED-UNAVAILABLE :TRY-ANYWAY) ()
  "Try to contact the host anyway."
  :TRY-ANYWAY)

(COMPILE-FLAVOR-METHODS HOST-BELIEVED-UNAVAILABLE)


(DEFFLAVOR TOKEN-CONVERSION-ERROR () (NETWORK-ERROR))

(DEFFLAVOR NOT-ENOUGH-TOKENS () (TOKEN-CONVERSION-ERROR))

(DEFMETHOD (:REPORT NOT-ENOUGH-TOKENS) (STREAM)
  (FORMAT STREAM "Not enough tokens supplied."))

(COMPILE-FLAVOR-METHODS NOT-ENOUGH-TOKENS)
