;;; -*- Mode: LISP; Package: CHAOS; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun collect-allocated-chaos-packets ()
  (let* ((pkts nil)
	 (loc (locf pkts)))
    (map-chaos-packets #'(lambda (test-pkt loc)
			    (when (pkt-allocated test-pkt)
			      (push test-pkt (cdr loc))))
		      loc)
    (nreverse pkts)))

(defun print-los-reasons (&optional (n 1000.))
  (let-globally ((*record-los-reasons* t))
    (loop repeat n
	  do (or *los-reasons* (process-wait "Await LOS reason" #'(lambda () *los-reasons*)))
	  (print (without-interrupts (pop *los-reasons*))))))

  ;;
;;;;;;  Printout of debug info and meters
  ;;

(defun dump-guts ()

  (print-flag "Chaos NCP" *enable*)
  (print-flag "Batching of STS packets" *batch-sts-enabled*)
  (print-flag "Trigger retransmission" *trigger-retransmission-enabled*)
  (print-flag "Adaptive retransmission rate" *adaptive-retransmission-enabled*)
  (print-flag "Recording of debug information" *record-debugging-info*)

  (show-meters)

  (show-conns nil)
  (show-pending-listens)
  (show-pending-rfcs)

  (print-sts-why-array)
  (print-recent-headers))

(defun clear-meters ()
  (dolist (meter *chaos-meters*) (set meter 0)))

(defun show-meters ()
  (format t "~%Various meters:~%")
  (dolist (meter *chaos-meters*)
    (format t "  ~A: ~30T~D.~%" meter (symeval meter))))

(defun snap-meters (&optional (jiffs 600.))
  (let* ((start (without-interrupts (mapcar #'symeval *chaos-meters*)))
	 (stop (progn (process-sleep jiffs)
		(without-interrupts (mapcar #'symeval *chaos-meters*))))
	 (diffs (mapcar #'- stop start))
	 (rates (mapcar #'* diffs (circular-list (// 60.0 jiffs)))))
    (mapcar #'list diffs rates)))

(defun show-snap (&optional (jiffs 600.))
  (format t "~%Meter rates: ~30TRaw~40T//sec~%")
  (loop for meter in *chaos-meters*
	for (diff rate) in (snap-meters jiffs)
	do (format t "  ~A: ~30T~D.~40T~6F~%" meter diff rate)))

(defun show-conns (&optional (verbose t))
  (when *conn-list*
    (format t "~%Active connections:")
    (dolist (conn *conn-list*)
      (print-conn conn verbose))))

(defun print-conn (conn &optional (verbose t))
  (format t "~%~S:~% State ~S; local ~O-~O; foreign ~O-~O (~A);~%"
	  conn (state conn)
	  (local-address conn) (local-index-num conn)
	  (foreign-address conn) (foreign-index-num conn)
	  (send (foreign-host-object conn) ':pretty-name))
  (format t " Rcvd #~O, Read #~O, Acked #~O, ~O queued from window of ~O;~%"
	  (pkt-num-received conn) (pkt-num-read conn) (pkt-num-acked conn)
	  (read-pkts-length conn) (local-window-size conn))
  (format t " Sent #~O, Acked #~O, ~O queued from window of ~O ~
						  (adjusted to ~O, ~O available);~%"
	  (pkt-num-sent conn) (send-pkt-acked conn)
	  (send-pkts-length conn) (offered-foreign-window-size conn)
	  (foreign-window-size conn) (window-available conn))
  (when (send-pkts conn)
    (format t " Send pkts:~%")
    (print-pkt-chain (send-pkts conn) verbose 4))
  (when (read-pkts conn)
    (format t " Read pkts:~%")
    (print-pkt-chain (read-pkts conn) verbose 4))
  (when (received-pkts conn)
    (format t " Received pkts:~%")
    (print-pkt-chain (received-pkts conn) verbose 4)))
  
(defun print-pkt-chain (chain &optional (verbose t) (indent 0))
  (loop for pkt = chain then (pkt-link pkt)
	while pkt
	do (print-pkt pkt verbose indent)))

(defun print-pkt (pkt &optional (verbose t) (indent 0) &aux op)
  (format t "~&~V@T~S: Opcode ~O (~A), ~O bytes long.~%"
	  indent
	  pkt (setq op (pkt-opcode pkt))
	  (cond ((< op (length opcode-list)) (nth op opcode-list))
		(( op dat-op) 'dat)
		(t '???))
	  (pkt-nbytes pkt))
  (when verbose
    (format t "~V@T  From ~O-~O to ~O-~O (~A to ~A)~%"
	    indent
	    (pkt-source-address pkt) (pkt-source-index-num pkt)
	    (pkt-dest-address pkt) (pkt-dest-index-num pkt)
	    (host-data (pkt-source-address pkt))
	    (host-data (pkt-dest-address pkt)))
    (format t "~V@T  Pkt header: " indent)
    (loop for i below first-data-word-in-pkt
	  as last = (= (1+ i) first-data-word-in-pkt)
	  do (format t "~6,'0O~:[,~;~%~]" (aref pkt i) last))
    (format t "~V@T  Pkt number ~O, Ack number ~O, Forwarded ~O times.~%"
	    indent (pkt-num pkt) (pkt-ack-num pkt) (pkt-fwd-count pkt))
    (format t "~V@T  Retransmitted ~O times, last at ~S, linked to ~S~%"
	    indent (pkt-times-transmitted pkt) (pkt-time-transmitted pkt)
	    (pkt-link pkt)))
  nil)

(defun show-pending-listens ()
  (when *pending-listens*
    (format t "~%Pending LSNS:~%")
    (dolist (conn *pending-listens*)
      (format t "    Contact name: ~S~%" (contact-name conn)))))

(defun show-pending-rfcs ()
  (when *pending-rfc-pkts*
    (format t "~%Pending RFC pkts:~%")
    (do pkt *pending-rfc-pkts* (pkt-link pkt) (null pkt)
	(format t "    Contact name: ~S~%" (pkt-string pkt)))))


(defun print-sts-why-array (&aux counts)
  (loop for reason being the array-elements of *sts-why-array*
	as slot = (assq reason counts)
	do (if slot (incf (cdr slot)) (push (cons reason 1) counts)))
  (format t "~%Reasons and counts for recent sending of STS packets:~%")
  (loop for (reason . count) in counts
	do (format t "  ~A:~30T~3D~%" reason count)))

(defun print-recent-headers (&optional count)
  (let* ((elems (array-leader *recent-headers* 0))
	 (idx   (array-leader *recent-headers* 1)))
    (or count (setq count elems))
    (comment  "~%In  STS(  7) [  4] from-from->to-to ...")
    (format t "~%DIR  Opcode  bytes frmadr-frmidx->toadr-toidx")
    (loop repeat count
	  do (setq idx (\ (+ idx elems -1) elems))
	  as pkt = (aref *recent-headers* idx)
	  do (format t "~%~A~A(~3O) [~3O] ~O-~O->~O-~O PKT#=~O, ACK#=~O, FWD#=~O, Rcrded: ~O"
		     (if (zerop (rcnt-dir pkt)) "In  " "Out ")
		     (let ((op (pkt-opcode pkt)))
		       (cond ((< op (length opcode-list)) (nth op opcode-list))
			     (( op dat-op) 'dat)
			     (t '???)))
		     (pkt-opcode pkt) 
		     (pkt-nbytes pkt)
		     (let* ((neti:*inhibit-validity-checking* t)
			    (host (neti:get-host-from-address (pkt-source-address pkt)
							      *local-chaosnet* t)))
		       (if host (neti:host-short-name host) (pkt-source-address pkt)))
		     (pkt-source-index-num pkt)
		     (let* ((neti:*inhibit-validity-checking* t)
			    (host (neti:get-host-from-address (pkt-dest-address pkt)
							     *local-chaosnet* t)))
		       (if host (neti:host-short-name host) (pkt-dest-address pkt)))
		     (pkt-dest-index-num pkt)
		     (pkt-num pkt) (pkt-ack-num pkt)
		     (pkt-fwd-count pkt) (rcnt-time-recorded pkt)))))

(defun print-flag (name value)
  (format t "~&~A is turned ~A~%" name (if value "on" "off")))


;;; probably a better place for these

;;; If no hosts, prints local routing table.  Else uses DUMP-ROUTING-TABLE servers
(DEFUN PRINT-ROUTING-TABLE (&REST HOSTS)
  (IF HOSTS
      (POLL-HOSTS HOSTS "DUMP-ROUTING-TABLE"
		  #'IGNORE			;no header desired
		  #'PRINT-ROUTING-TABLE-FORMAT-ANS)
    (FORMAT T "~&Subnet	Gateway~35TCost~%")
    (LOOP FOR GATEWAY BEING THE ARRAY-ELEMENTS OF *ROUTING-TABLE* USING (INDEX SUBNET)
	  AND COST BEING THE ARRAY-ELEMENTS OF *ROUTING-TABLE-COST*
	  WHEN (< COST MAXIMUM-ROUTING-COST)
	  DO (FORMAT T "~3O   ~:[~A~*~;~O ~A~]~35T~O~%"
		     SUBNET (FIXP GATEWAY)
		     GATEWAY (AND (FIXP GATEWAY) (HOST-DATA GATEWAY))
		     COST))))  

(DEFUN PRINT-ROUTING-TABLE-FORMAT-ANS (HOST PKT &OPTIONAL (STREAM STANDARD-OUTPUT))
  (FORMAT STREAM "~&Routing table for ~8@<~O ~>~25A" HOST (CHAOS:HOST-DATA HOST))
  (FORMAT STREAM "~&Subnet~8TGateway~35TCost~%")
  (LOOP REPEAT (// (PKT-NBYTES PKT) 4)
	  FOR SUBNET UPFROM 0
	  FOR IDX UPFROM 8 BY 2
	  AS METHOD = (AREF PKT IDX)
	  AS COST   = (AREF PKT (1+ IDX))
	  WHEN (AND ( METHOD 0)
		    (< COST (// MAXIMUM-ROUTING-COST 2)))
	  DO (FORMAT STREAM "~3O~8T~6O ~A~35T~O~%"
		     SUBNET
		     METHOD (IF (< METHOD 1_8)
				(FORMAT NIL "Interface ~O" (// METHOD 2))
			      (HOST-DATA METHOD))
		     COST)))

(DEFUN DESCRIBE-ROUTE-TO (HOST)
  (MULTIPLE-VALUE-BIND (TARGET-ADDRESS TARGET-HOST) (CHAOS:ADDRESS-PARSE HOST)
    (FORMAT T "~&From ")
    (LOOP WITH TARGET-SUBNET = (LDB (BYTE 8 8) TARGET-ADDRESS)
	  WITH (BRIDGE-HOST BRIDGE-ADDRESS BRIDGE-COST been-here-before)
	  FOR CURRENT-HOST = NET:*LOCAL-HOST* THEN BRIDGE-HOST
	  FOR CURRENT-ADDRESS = (SEND NET:*LOCAL-HOST* :CHAOS-ADDRESS) THEN BRIDGE-ADDRESS
	  DO (FORMAT T "~A@~O" CURRENT-HOST CURRENT-ADDRESS)
	  UNTIL (= CURRENT-ADDRESS TARGET-ADDRESS)
	  DO (if (not (cl:member current-address been-here-before))
		 (push current-address been-here-before)
	       (return (format t "~% Routing loop detected.")))
	     (IF (EQ CURRENT-HOST NET:*LOCAL-HOST*)
		 (SETQ BRIDGE-ADDRESS (AREF CHAOS:*ROUTING-TABLE* TARGET-SUBNET)
		       BRIDGE-COST (AREF CHAOS:*ROUTING-TABLE-COST* TARGET-SUBNET))
		 (CONDITION-CASE (X)
		     ;; Use CURRENT-ADDRESS instead of CURRENT-HOST in case the "best"
		     ;; route to this bridge is via a broken Interlan board
		     (CHAOS:SIMPLE CURRENT-ADDRESS "DUMP-ROUTING-TABLE" 1800.)
		   (SYS:NETWORK-ERROR
		     (FORMAT T "~% via unknown route to ~A@~O
Cannot get routing table from ~A:~% ~~A~" TARGET-HOST TARGET-ADDRESS CURRENT-HOST X)
		     (RETURN NIL))
		   (:NO-ERROR
		    (IF (< TARGET-SUBNET (// (CHAOS:PKT-NBYTES X) 4))
			(LET ((METHOD (AREF X (+ 8 TARGET-SUBNET TARGET-SUBNET)))
			      (COST (AREF X (+ 9 TARGET-SUBNET TARGET-SUBNET))))
			  (CHAOS:RETURN-PKT X)
			  (COND ((ZEROP METHOD)
				 (FORMAT T "~% via unknown route to ~A@~O
Routing table from ~A has no entry for subnet ~O."
					 TARGET-HOST TARGET-ADDRESS
					 CURRENT-HOST TARGET-SUBNET)
				 (RETURN NIL))
				((< METHOD 1_8)
				 (FORMAT T
					 "~% via interface ~O on subnet ~O (cost ~D) to ~A@~O"
					 METHOD TARGET-SUBNET COST TARGET-HOST TARGET-ADDRESS)
				 (RETURN NIL))
				(T
				 (SETQ BRIDGE-ADDRESS METHOD BRIDGE-COST COST))))
			(FORMAT T "~% via unknown route to ~A@~O
Routing table from ~A is too small." TARGET-HOST TARGET-ADDRESS CURRENT-HOST)
			(CHAOS:RETURN-PKT X)
			(RETURN NIL)))))
	     (UNLESS (NUMBERP BRIDGE-ADDRESS)
	       (FORMAT T "~% via ~A on subnet ~O (cost ~D) to ~A@~O"
		       BRIDGE-ADDRESS TARGET-SUBNET BRIDGE-COST TARGET-HOST TARGET-ADDRESS)
	       (RETURN NIL))
	     (WHEN (ZEROP BRIDGE-ADDRESS)
	       (FORMAT T "~% via unknown route to ~A@~O
Routing table at ~A has no entry for subnet ~O."
					 TARGET-HOST TARGET-ADDRESS
					 CURRENT-HOST TARGET-SUBNET)
	       (RETURN NIL))
	     (SETQ BRIDGE-HOST (NET:GET-HOST-FROM-ADDRESS BRIDGE-ADDRESS ':CHAOS))
	     (FORMAT T "~% via subnet ~O (total cost ~D) to "
		     (LDB (BYTE 8 8) BRIDGE-ADDRESS) BRIDGE-COST))))

;; Random server and user routines
(DEFUN HOST-UP (HOST &OPTIONAL (TIMEOUT (* 3. 60.)) (ERROR-P T) &AUX CONN PKT)
  (CONDITION-CASE (.ERROR.)
      (IF ERROR-P
	  (SETQ PKT (SIMPLE HOST "STATUS" TIMEOUT))
	(SETQ CONN (OPEN-CONNECTION HOST "STATUS"))
	(WAIT CONN 'RFC-SENT-STATE TIMEOUT "Host up"))
    (CONNECTION-ERROR (VALUES NIL .ERROR.))
    (:NO-ERROR
     (COND (CONN (PROG1 (AND (EQ (STATE CONN) 'ANSWERED-STATE)
			     (DATA-AVAILABLE CONN)
			     (= (PKT-OPCODE (READ-PKTS CONN)) ANS-OP))
			(REMOVE-CONN CONN)))
	   (T (RETURN-PKT PKT)
	      T)))))

;; The infamous LIMERICK getter
(DEFUN LIMERICK (&OPTIONAL (ARGS ""))
  (AND (NUMBERP ARGS) (SETQ ARGS (FORMAT NIL "~D" ARGS)))
  (WITH-OPEN-STREAM (STREAM (OPEN-STREAM "MC" (STRING-APPEND "LIMERICK " ARGS)
					 ':DIRECTION ':INPUT))
    (FORMAT T "~2%")
    (STREAM-COPY-UNTIL-EOF STREAM STANDARD-OUTPUT)))
