;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: COMMON-LISP-NETWORK-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Functions etc. used by the namespace editor to validate the things that users enter.


0(defparameter(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") *check-for-duplicate-addresses*0 t)

(defparameter 2*inhibit-validity-checking-during-property-list-checks* 0nil)

(defparameter 2*print-namespace-warnings* 0t)

(defun 2namespace-warning0 (format-string &rest format-args)
  (with-character-style ('(:fix :bold :normal) *error-output*)
    (format *error-output* "~&Warning: ")
    (cl:apply #'format *error-output* format-string format-args)))

1;;; This is to prevent a name to be used on two objects of the same class
0(defun 2validate-name 0(name class object namespace)
  (when (and *print-namespace-warnings*
	     (not (stringp name)))
    (if (and (not neti:*allow-dotted-host-names-in-namespaces*)
	     (eq class :host)
	     (string-search "." (send name :string)))
	(namespace-warning "Dots are not allowed in host names."))
    (let ((neti:*inhibit-validity-checking*
	    *inhibit-validity-checking-during-property-list-checks*)
	  (neti:*namespace-search-list* (list namespace)))
      (loop for obj in (neti:find-objects-from-property-list class :name name) do
	(if (not (neti:ns-eq obj object))
	    (namespace-warning "The name ~A is already being used by ~A ~A."
		     (send name :string) class obj))))))

(defun 2validate-address-entry0 (address-entry class object namespace)
  (when (and *check-for-duplicate-addresses*
	     *print-namespace-warnings*
	     (eq class :host))
    (let ((neti:*inhibit-validity-checking*
	    *inhibit-validity-checking-during-property-list-checks*)
	  (neti:*namespace-search-list* (list namespace)))
      (case (send (first address-entry) :type)
	((:chaos :internet :dna)		1;These are the only ones we are checking now.
0	 (loop for obj in (neti:find-objects-from-property-list class :address
								(list address-entry)) do
	   (if (not (neti:ns-eq obj object))
	       (namespace-warning "The address ~A on network ~A is already in use by Host ~A"
			(second address-entry) (first address-entry) obj))))))))
  

1;;; This hairy little function gives a list of the absolute base media for a given medium
;;; It would be best to remove-duplicates of the results because of redundant definitions.
0(defun 2find-base-medium-for-medium 0(medium-name)
  (let ((medium (if (keywordp medium-name)
		    (neti:find-medium-named medium-name)
		    medium-name)))
    (if medium
	(loop for implementation in (neti:medium-implementations medium)
	      as type = (first (first (neti:medium-implementation-path implementation)))
	      as med = (second (first (neti:medium-implementation-path implementation)))
	      if (eq type :network)
		return (list (neti:medium-name medium))
	      else if (eq type :medium)
		     append (find-base-medium-for-medium med)))))


1;;; This is a list of protocols for which entries are likely to appear, but for which
;;; the lisp machine does not in fact have a user side implementation.
0(defparameter 2*known-but-unimplemented-protocols*0 
  '((:chaos-status :chaos-simple :chaos-status)
    (:inker :chaos-token-list :inker)
    (:netboot :slap :netboot)
    (:gateway :ip :internet-gateway)
    (:gateway :ip :internet-gateway-prime)
    (:echo :tcp :byte-stream-echo)
    (:discard :tcp :discard)
    (:exec :tcp :exec)
    (:band-transfer :chaos :band-transfer)	1; an object.
0    (:configuration :chaos :configuration)	1; For editing objects on Ivory machines.
0    ))

(defun 2add-known-but-unimplemented-protocol 0(service-triple)
  (when (not (cl:find service-triple *known-but-unimplemented-protocols*
		      :test #'(lambda (x y)
				(and (eql (first x) (first y))
				     (eql (second x) (second x))
				     (eql (third x) (third y))))))
    (push service-triple *known-but-unimplemented-protocols*)
    1;; get it all on one page
0    (setf *known-but-unimplemented-protocols*
	  (copy-tree *known-but-unimplemented-protocols*))))

1;;; Returns T if an error was reported.
0(defun 2validate-service-entry0 (entry &optional ignore ignore ignore)
  (when *print-namespace-warnings*
    (let ((error-p nil))
      (flet ((warn-user (format-string &rest format-args)
	       (setq error-p t)
	       (apply #'namespace-warning (string-append "On this machine, " format-string)
		      format-args)))
	(condition-case (error)
	     (destructuring-bind (service-name medium-name protocol-name) entry
	       (with-character-style ('(:fix :bold :normal) *error-output*)
		 (let (protocol-base-medium-name)
		   (let ((protocol (neti:find-protocol-named protocol-name service-name)))
		     (cond (protocol
			    (setq protocol-base-medium-name
				  (neti:protocol-base-medium-name protocol)))
			   ((setq protocol (cl:find entry *known-but-unimplemented-protocols*
						    :test #'(lambda (x y)
							      (and (eql (first x) (first y))
								   (eql (third x) (third y))))))
			    (setq protocol-base-medium-name (second protocol)))
			   (t
			    (let ((services-for-this-protocol nil)
				  (protocols-for-this-service nil))
			      (flet ((check-one-protocol (protocol-service protocol-medium
									   protocol-protocol)
				       (when (eq protocol-protocol protocol-name)
					 (cl:pushnew protocol-service services-for-this-protocol)
					 (unless protocol-base-medium-name
					   (setq protocol-base-medium-name protocol-medium)))
				       (when (eq protocol-service service-name)
					 (cl:pushnew protocol-protocol
						     protocols-for-this-service))))
				(dolist (protocol neti:*protocol-list*)
				  (check-one-protocol (neti:protocol-service protocol)
						      (neti:protocol-base-medium-name protocol)
						      (neti:protocol-name protocol)))
				(dolist (protocol *known-but-unimplemented-protocols*)
				  (cl:apply #'check-one-protocol protocol)))
			      (if (and services-for-this-protocol protocols-for-this-service)
				  ;; Known but no match.
				  (warn-user
				    "the protocol ~A is not known to implement ~A service."
				    protocol-name service-name)
				  (when (null protocols-for-this-service)
				    (warn-user "~A is not a known service." service-name))
				  (when (null services-for-this-protocol)
				    (warn-user "~A is not a known protocol." protocol-name))
				  (when protocols-for-this-service
				    (warn-user
				      "the service ~A is implemented by the following protocols: "
				      service-name)
				    (format-textual-list protocols-for-this-service #'princ
							 :filled t :after-line-break "  "
							 :conjunction "and"
							 :stream *error-output*)
				    )
				  (when services-for-this-protocol
				    (format *error-output*
					    "~&The ~A protocol implements the following services: "
					    protocol-name)
				    (format-textual-list services-for-this-protocol #'princ
							 :filled t :after-line-break "  "
							 :conjunction "and"
							 :stream *error-output*)
				    )))))
		     (unless (eq protocol-base-medium-name medium-name)
		       (let ((medium (neti:find-medium-named medium-name)))
			 (if (null medium)
			     (warn-user "~A is not a known medium name." medium-name)
			     (unless (or (null protocol-base-medium-name)
					 (member protocol-base-medium-name
						 (neti:medium-type medium))
					 (member medium-name
						 (find-base-medium-for-medium
						   protocol-base-medium-name))
					 (warn-user
					   "~A is implemented through a ~A medium, but ~A is a ~A medium."
					   protocol-name protocol-base-medium-name
					   medium-name (first
							 (neti:medium-type medium))))))))))))
	   (error
	     (namespace-warning "The service triple ~A is not a valid service entry." entry)
	     (setq error-p t))
	   ))
      error-p)))


#||
(defun2 validate-service-entry-examples0 (list)
  (dolist (test list)
    (if (validate-service-entry test)
	(format t "~&The entry was ~A" test))))

;;; Here are the possible error messages.
(validate-service-entry-examples '((:login :chaos :3600-login)
				   (:logiu :chaos :3600-login)
				   (:login :chaop :3600-login)
				   (:login :chaos :3600-logout)
				   (:login :chaos :smtp)
				   (:login :chaos-simple :3600-login)))

;;; Should also check a bunch of other hosts before installing.
(validate-service-entry-examples (send net:*local-host* :service))

(loop for host in (net:get-local-lispms) do
  (format t "~2&Validating entries for ~A:" host)
  (validate-service-entry-examples (send host :service)))

(defun 2validate-all-hosts 0()
  (neti:searching-all-namespaces
    (dolist (host (net:find-objects-from-property-list :host))
      (format t "~2&Validating entries for ~A:" host)
      (validate-service-entry-examples (send host :service)))))

;;; This is like what you'd put in the namespace editor.
(defun 2service-entry-input-test0 ()
  (dw:accepting-values ()
    (let ((entry (accept 'service-entry :prompt "Service")))
      ;; Also really want to test for accept-values-stream being in normal state
      ;; and not sizing or returning.
      (unless (or (null entry) (validate-service-entry entry))
	(dw:with-redisplayable-output (:unique-id entry :cache-value nil)
	  (validate-service-entry entry t *query-io*)))
      entry)))
||#


