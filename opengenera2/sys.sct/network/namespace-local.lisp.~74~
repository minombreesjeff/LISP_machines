;;; -*- Mode: LISP; Package: NETI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFVAR-RESETTABLE *LOCAL-NAMESPACES-INITIALIZED* NIL NIL)

;;; User interface function (run on primary server) to suck in new host table file (made
;;; by conversion program) and make an entry.
(DEFUN READ-OBJECT-FILE-AND-UPDATE (NAMESPACE CLASS-NAME)
  (UNLESS (TYPEP NAMESPACE 'NAMESPACE)
    (SETQ NAMESPACE (FIND-OBJECT-NAMED :NAMESPACE NAMESPACE)))
  (LET ((CLASS-FILE-ELEM (OR (ASSQ CLASS-NAME (RELOAD-FILE-INFORMATION NAMESPACE NIL))
			     (ASSQ :* (RELOAD-FILE-INFORMATION NAMESPACE NIL)))))
    (WHEN (NULL CLASS-FILE-ELEM)
      (FERROR "Do not have a file to update ~A's in ~A" CLASS-NAME NAMESPACE))
    (READ-OBJECT-FILE-AND-UPDATE-2 NAMESPACE (SECOND CLASS-FILE-ELEM) :CLASS CLASS-NAME))
  T)

;;; Similar user interface function.  Suck in a special object file
;;; (presumably not one of the standard database files) and make changes
;;; for all objects in it, even if not changed.
(DEFUN READ-OBJECT-FILE-AND-UPDATE-1 (NAMESPACE PATHNAME)
  (UNLESS (TYPEP NAMESPACE 'NAMESPACE)
    (SETQ NAMESPACE (FIND-OBJECT-NAMED :NAMESPACE NAMESPACE)))
  (SETQ PATHNAME (FS:MERGE-PATHNAMES PATHNAME))
  (READ-OBJECT-FILE-AND-UPDATE-2 NAMESPACE PATHNAME :IF-CHANGED NIL)
  T)

(DEFUN READ-OBJECT-FILE-AND-UPDATE-2 (NAMESPACE PATHNAME &KEY CLASS (IF-CHANGED T))
  (UNLESS (EQ (SEND NAMESPACE :LOCAL-SERVER-P) :PRIMARY)
    (FERROR "Namespace ~A is not local." NAMESPACE))
  (FS:FORCE-USER-TO-LOGIN)
  (KEEPING-NAMESPACE-SERVER
    (WITH-FIXUPS
      (PROCESS:WITH-LOCK ((NAMESPACE-UPDATE-LOCK NAMESPACE))
	(LET ((OLD-TIMESTAMP (SEND NAMESPACE :VALIDATION-TIMESTAMP)))
	  (MULTIPLE-VALUE-BIND (OBJECTS CHANGED-OBJECTS)
	      (WITH-OPEN-FILE (STREAM PATHNAME :DIRECTION :INPUT)
		(SETF PATHNAME (SEND STREAM :TRUENAME))
		(RELOAD-NAMESPACE-FROM-STREAM NAMESPACE STREAM
					      :RETURN-OBJECTS T :UNTIL-EOF T))
	    ;; Make the log entry
	    (APPEND-TO-VERSION-FILE NAMESPACE (FORMAT NIL "~\DATIME\ ~A" PATHNAME))
	    ;;Delete objects not mentioned.
	    (WHEN CLASS
	      (DELETE-OLD-OBJECTS-FROM-NAMESPACE
		NAMESPACE OBJECTS :CLASSES `(,CLASS)
		:TIMESTAMP (WHEN IF-CHANGED OLD-TIMESTAMP)))
	    ;; Make a changes file entry if necessary
	    (SEND NAMESPACE :ADD-ENTRY-FOR-CHANGED-OBJECTS OLD-TIMESTAMP
		  (IF IF-CHANGED CHANGED-OBJECTS OBJECTS))
	    (SEND NAMESPACE :SET-LATEST-VALIDATION-TIMESTAMP
		  (TIMESTAMP-FROM-FILE-INFORMATION NAMESPACE))
	    (WRITE-NEW-CHANGES-FILE NAMESPACE)))))))

(DEFUN PRUNE-NAMESPACE-CHANGES-FILE (NAMESPACE STARTING-TIMESTAMP)
  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; 0WRITE-INCREMENTAL-UPDATE-FILE1 insists on this binding.
0  (LET ((*NAMESPACE-PROTOCOL-VERSION* *HIGHEST-SUPPORTED-PROTOCOL-VERSION*))
    (UNLESS (TYPEP NAMESPACE 'NAMESPACE)
      (SETQ NAMESPACE (FIND-OBJECT-NAMED :NAMESPACE NAMESPACE)))
    (UNLESS (EQ (SEND NAMESPACE :LOCAL-SERVER-P) :PRIMARY)
      (FERROR "Namespace ~A is not local." NAMESPACE))
    (FS:FORCE-USER-TO-LOGIN)
    (LET ((CHANGES-FILE-ELEM (ASSQ :CHANGES (RELOAD-FILE-INFORMATION NAMESPACE NIL))))
      (WHEN (NULL CHANGES-FILE-ELEM)
	(FERROR "~S does not have a changes file." NAMESPACE))
      (MULTIPLE-VALUE-BIND (CHANGES CHANGES-VALID)
	  (SEND NAMESPACE :CHANGES-SINCE-TIMESTAMP STARTING-TIMESTAMP)
	(UNLESS CHANGES-VALID
	  (FERROR "No information starting at ~D" STARTING-TIMESTAMP))
	(SEND NAMESPACE :SET-CHANGED-OBJECTS-ALIST CHANGES))
      (WITH-OPEN-FILE (STREAM (SECOND CHANGES-FILE-ELEM) :DIRECTION :OUTPUT)
	(WRITE-INCREMENTAL-UPDATE-FILE NAMESPACE STREAM)
	(SEND STREAM :CLOSE)
	(SETF (THIRD CHANGES-FILE-ELEM) (SEND STREAM :INFO))))))

;;;

(DEFMACRO SET-FILE-AUTHOR (STREAM AUTHOR)
  `(WHEN ,AUTHOR
     (MULTIPLE-VALUE-BIND (NIL SETTABLE-PROPERTIES)
	 (SEND ,STREAM :PROPERTIES)
       (WHEN (MEMBER :AUTHOR SETTABLE-PROPERTIES)
	 (SEND ,STREAM :CHANGE-PROPERTIES NIL :AUTHOR ,AUTHOR)))))

(DEFUN WRITE-NEW-CHANGES-FILE (NAMESPACE &OPTIONAL AUTHOR)
  (LET ((CHANGES-FILE-ELEM (ASSQ :CHANGES (RELOAD-FILE-INFORMATION NAMESPACE NIL)))
	;; WRITE-INCREMENTAL-UPDATE-FILE needs this binding
	(*NAMESPACE-PROTOCOL-VERSION* *HIGHEST-SUPPORTED-PROTOCOL-VERSION*))
    (WHEN CHANGES-FILE-ELEM
      (WITH-OPEN-FILE (STREAM (SECOND CHANGES-FILE-ELEM) :DIRECTION :OUTPUT)
	(WRITE-INCREMENTAL-UPDATE-FILE NAMESPACE STREAM)
	(SET-FILE-AUTHOR STREAM AUTHOR)
	(SEND STREAM :CLOSE)
	(SETF (THIRD CHANGES-FILE-ELEM) (SEND STREAM :INFO))))))

(DEFUN APPEND-TO-VERSION-FILE (NAMESPACE LINE &OPTIONAL AUTHOR)
  (LET* (;;this call will set the third element, if it isn't already there
	 (timestamp (timestamp-from-file-information namespace))
	 (VERSION-FILE-ELEM (ASSQ :VERSION (RELOAD-FILE-INFORMATION NAMESPACE NIL)))
	 (VERSION-FILE-PNAME (first (third VERSION-FILE-ELEM)))
	 ;; Determine if this filesystem supports version numbers
	 (NEW-VERSION-FILE-PNAME (SEND VERSION-FILE-PNAME :NEW-PATHNAME :VERSION :NEWEST))
	 (using-temp-file nil)
	 ;; If not, make a temp file
	 (OUTFILE (IF (EQ VERSION-FILE-PNAME NEW-VERSION-FILE-PNAME)
		      (prog1
			(SEND VERSION-FILE-PNAME :NEW-TYPE "temp")
			(setq using-temp-file t))
		      (send VERSION-FILE-PNAME :new-version (1+ (send version-file-pname :version))))))
    (ignore timestamp)
    (UNWIND-PROTECT
	(PROGN
	  (WITH-OPEN-FILE (STREAM OUTFILE :DIRECTION :OUTPUT)
	    (WITH-OPEN-FILE-CASE (ISTREAM  VERSION-FILE-PNAME :DIRECTION :INPUT)
	      (FS:FILE-ERROR)
	      (:NO-ERROR (STREAM-COPY-UNTIL-EOF ISTREAM STREAM)))
	    (SEND STREAM :LINE-OUT LINE)
	    (SET-FILE-AUTHOR STREAM AUTHOR)
	    (SEND STREAM :CLOSE))
	  ;; When we don't have version numbers, delete the original and rename the
	  ;; new version.
	  (WHEN using-temp-file
	    (WHEN (PROBEF VERSION-FILE-PNAME)
	      (DELETEF VERSION-FILE-PNAME))
	    (RENAMEF OUTFILE VERSION-FILE-PNAME))
	  ;; We have to do this here since we might have renamed things.
	  (WITH-OPEN-FILE (STREAM NEW-VERSION-FILE-PNAME)
	    (SETF (THIRD VERSION-FILE-ELEM) (SEND STREAM :INFO))))
      ;; If we are aborted, make sure there is a file there
      (WHEN using-temp-file
	(UNLESS (PROBEF VERSION-FILE-PNAME)	;We don't have a version file
	  (WHEN (PROBEF OUTFILE)		;But we do have a temp file.
	    (RENAMEF OUTFILE VERSION-FILE-PNAME)))	;Rename the temp file
	;; Delete any left over temp files
	(WHEN (PROBEF OUTFILE)
	  (DELETEF OUTFILE))))))

(DEFUN TIMESTAMP-FROM-FILE-INFORMATION (NAMESPACE)
  (LET ((VERSION-FILE-ELEM (ASSQ :VERSION (RELOAD-FILE-INFORMATION NAMESPACE NIL))))
    (WHEN VERSION-FILE-ELEM
      (UNLESS (THIRD VERSION-FILE-ELEM)
	(WITH-OPEN-FILE (STREAM (SECOND VERSION-FILE-ELEM) :DIRECTION :PROBE)
	  (SETF (THIRD VERSION-FILE-ELEM) (SEND STREAM :INFO))))
      (LET ((TIMESTAMP (SEND (CAR (THIRD VERSION-FILE-ELEM)) :VERSION)))
	;; Try to get along with file systems that don't have versions.
	(WHEN (EQ TIMESTAMP :UNSPECIFIC)
	  (SETQ TIMESTAMP (CDR (THIRD VERSION-FILE-ELEM))))
	TIMESTAMP))))

(DEFUN COPY-CLASS-FILE-EXCEPT-FOR-RECORD (NAMESPACE OBJECT CONTINUATION AUTHOR)
  (LET* ((CLASS-NAME (SEND OBJECT :CLASS))
	 (CLASS-FILE-ELEM (LET ((FILE-INFORMATION (RELOAD-FILE-INFORMATION NAMESPACE NIL)))
			    (OR (ASSQ CLASS-NAME FILE-INFORMATION)
				(ASSQ :* FILE-INFORMATION)))))
    (WHEN (NULL CLASS-FILE-ELEM)
      (FERROR "Do not have a file to update for class ~A in namespace ~A"
	      CLASS-NAME NAMESPACE))

      (UNLESS (THIRD CLASS-FILE-ELEM)
	(WITH-OPEN-FILE (STREAM (SECOND CLASS-FILE-ELEM) :DIRECTION :PROBE)
	  (SETF (THIRD CLASS-FILE-ELEM) (SEND STREAM :INFO))))

    (LET* ((CLASS-FILE-PNAME (first (third CLASS-FILE-ELEM)))
	   ;; Determine if this filesystem supports version numbers
	   (NEW-CLASS-FILE-PNAME (SEND CLASS-FILE-PNAME :NEW-PATHNAME :VERSION :NEWEST))
	   (using-temp-file nil)
	   ;; If not, make a temp file
	   (OUTFILE (IF (EQ CLASS-FILE-PNAME NEW-CLASS-FILE-PNAME)
			(prog1 
			  (SEND CLASS-FILE-PNAME :NEW-TYPE "temp")
			  (setq using-temp-file t))
			(send CLASS-FILE-PNAME :new-version (1+ (send class-file-pname :version)))))
	   (LINE-TO-LOOK-FOR (FORMAT NIL "~A ~A"
				     CLASS-NAME (SEND OBJECT :PRIMARY-NAME-STRING NAMESPACE))))
      (WITH-OPEN-FILE (INSTREAM CLASS-FILE-PNAME :DIRECTION :INPUT)
	(WITH-OPEN-FILE (OUTSTREAM OUTFILE :DIRECTION :OUTPUT)
	  (LOOP WITH (LINE EOF)
		WITH RECORD-START = T
		AND (MATCH-P EVER-MATCH-P)
		DOING (MULTIPLE-VALUE (LINE EOF)
			(SEND INSTREAM :LINE-IN))
		UNTIL EOF
		WHEN (EQUAL LINE "")
		  DO (SETQ RECORD-START T)
		     (WHEN MATCH-P
		       (FUNCALL CONTINUATION NAMESPACE OBJECT OUTSTREAM))
		ELSE WHEN RECORD-START
		       DO (WHEN (SETQ MATCH-P (STRING-EQUAL LINE LINE-TO-LOOK-FOR))
			    (SETQ EVER-MATCH-P T))
			  (SETQ RECORD-START (CHAR= (AREF LINE 0) #/;))
		UNLESS MATCH-P
		  DO (SEND OUTSTREAM :LINE-OUT LINE)
		FINALLY (UNLESS EVER-MATCH-P
			  (UNLESS RECORD-START
			    (TERPRI OUTSTREAM))
			  (FUNCALL CONTINUATION NAMESPACE OBJECT OUTSTREAM)))
	  (setf (third class-file-elem) (send outstream :info))
	  (SET-FILE-AUTHOR OUTSTREAM AUTHOR)))
      ;; we have to delete the old file and rename the temp file if the filesystem doesn't
      ;; support version numbers
      (WHEN using-temp-file
	(DELETEF CLASS-FILE-PNAME)
	(RENAMEF OUTFILE CLASS-FILE-PNAME)
	(WITH-OPEN-FILE (STREAM CLASS-FILE-PNAME :DIRECTION :PROBE)
	  (SETF (THIRD CLASS-FILE-ELEM) (SEND STREAM :INFO)))
	))))

(DEFUN RELOAD-FILE-INFORMATION (NAMESPACE FORCE-P)
  (LET ((FILE-INFORMATION (UNLESS FORCE-P (SEND NAMESPACE :FILE-INFORMATION))))
    (WHEN (NULL FILE-INFORMATION)
      (SEARCHING-SITE-NAMESPACES ()
	(WITH-OPEN-FILE (STREAM (OR (SEND NAMESPACE :DESCRIPTOR-FILE)
				    (FERROR "~A does not have a DESCRIPTOR-FILE attribute."
					    NAMESPACE))
				:DIRECTION :INPUT)
	  (SETQ FILE-INFORMATION (PARSE-RECORD-AS-TOKENS STREAM)))
	(LOOP FOR ELEM IN FILE-INFORMATION
	      DO (SETF (FIRST ELEM) (INTERN-GLOBAL-NAME (FIRST ELEM)))
		 (SETF (SECOND ELEM) (FS:MERGE-PATHNAMES (SECOND ELEM)))
		 (NCONC ELEM (LIST NIL))))
      (SEND NAMESPACE :SET-FILE-INFORMATION FILE-INFORMATION))
    FILE-INFORMATION))

;;;

(DEFFLAVOR LOCAL-NAMESPACE-ACCESS-PATH () (NAMESPACE-ACCESS-PATH))

(DEFMETHOD (:CLOSE LOCAL-NAMESPACE-ACCESS-PATH) (&OPTIONAL IGNORE))

(DEFMETHOD (:DELETE-OBJECT LOCAL-NAMESPACE-ACCESS-PATH) (NAMESPACE OBJECT ON-BEHALF-OF)
  (LET ((*NAMESPACE-PROTOCOL-VERSION* *HIGHEST-SUPPORTED-PROTOCOL-VERSION* )
	(OLD-TIMESTAMP (SEND NAMESPACE :VALIDATION-TIMESTAMP))
	1;; Find references to the object being deleted.
0	1;; Don't search the Internet namespace since it shouldn't have
0	1;; references to objects outside itself.
0	(refs (searching-served-namespaces (:internet)
		(find-objects-which-refer-to object))))
    (when refs
      (ferror (with-output-to-string (s)
		(format s "You cannot delete ~A ~A.~%It is still referenced by the following objects:~%" (send object :class) object)
		(format-item-list refs :stream s
				  :printer #'(lambda (obj stream)
					       (format stream "~A ~A"
						       (send obj :class) obj))))))
    ;; Update the record file
    (COPY-CLASS-FILE-EXCEPT-FOR-RECORD NAMESPACE OBJECT #'IGNORE ON-BEHALF-OF)
    ;; Make the log entry
    (APPEND-TO-VERSION-FILE
      NAMESPACE
      (FORMAT NIL "~\DATIME\ ~A ~A deleted by ~A. Old timestamp was ~D."
	      (SEND OBJECT :CLASS)
	      (SEND OBJECT :PRIMARY-NAME-STRING NAMESPACE)
	      ON-BEHALF-OF OLD-TIMESTAMP)
      ON-BEHALF-OF)
    ;; Make a changes file entry if necessary
    (SEND NAMESPACE :ADD-ENTRY-FOR-DELETED-OBJECTS OLD-TIMESTAMP (LIST OBJECT))
    (SEND NAMESPACE :SET-LATEST-VALIDATION-TIMESTAMP
	  (TIMESTAMP-FROM-FILE-INFORMATION NAMESPACE))
    (WRITE-NEW-CHANGES-FILE NAMESPACE ON-BEHALF-OF)))

1;;; Search all namespaces with primary name servers, ie not DIAL or DOMAIN.
0(defmacro (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")searching-served-namespaces 0((&rest excluded-namespaces) &body body)
  `(let ((*namespace-search-list*
	   1;; Preserve search list order
0	   (sort (loop for ns in (send *namespace* :objects-of-class :namespace)
		       when (and (not (send ns :uninterned-p))	1;not deleted?
0				 (send ns :primary-name-server)
				 (not (memq (send ns :name) ',excluded-namespaces)))
			 collect ns)
		 #'(lambda (n1 n2)
		     (dolist (n *namespace-search-list*)
		       (cond ((eq n n1)
			      (return t))
			     ((eq n n2)
			      (return nil))))))))
     ,@body))

(defun 2find-objects-which-refer-to0 (object)
  (keeping-namespace-server
    (loop with object-class = (send object :class)
	  and references = nil
	  for class in *all-classes*
	  do (loop for (template) on (class-all-templates class) by #'cddr
		   as representation = (class-get-template class template)
		   when (cl:member object-class representation)
		     do (let ((referencing-objects
				(find-objects-from-property-list
				  class template
				  (search-expression object representation))))
			  (when referencing-objects
			    (setq references (append referencing-objects references)))))
	  finally (return (cl:remove-duplicates references :test #'ns-eq)))))

(defun 2search-expression0 (object representation)
  (let ((class (send object :class)))
    (flet ((2search-expression-simple0 (o item)
	     (if (eq class item) o :*)))
      (if (cl:member class representation)
	  (cl:case (first representation)
	    ((:element :set) (list (search-expression object (cdr representation))))
	    (:pair (list (search-expression-simple object (second representation))
			 (search-expression object (cddr representation))))
	    (:triple (list (search-expression-simple object (second representation))
			   (search-expression-simple object (third representation))
			   (search-expression object (cdddr representation))))
	    (otherwise (search-expression-simple object (first representation))))
	:*))))


(DEFMETHOD (:GET-BRIEF-INCREMENTAL-UPDATE LOCAL-NAMESPACE-ACCESS-PATH) (NAMESPACE TIMESTAMP)
  NAMESPACE TIMESTAMP
  (FERROR "This entry should never be called."))

(DEFMETHOD (:GET-FULL-INCREMENTAL-UPDATE LOCAL-NAMESPACE-ACCESS-PATH) (NAMESPACE TIMESTAMP)
  (FS:WITH-AUTOMATIC-LOGIN-TO-SYS-HOST
    (LET* ((FILE-INFORMATION (RELOAD-FILE-INFORMATION NAMESPACE NIL))
	   (CHANGES-FILE-ELEM (ASSQ :CHANGES FILE-INFORMATION))
	   (FILE-TIMESTAMP (TIMESTAMP-FROM-FILE-INFORMATION NAMESPACE)))
      (IF CHANGES-FILE-ELEM
	  (WITH-OPEN-FILE (STREAM (SECOND CHANGES-FILE-ELEM) :DIRECTION :INPUT)
	    (LET ((RECORDS (LOOP AS RECORD = (PARSE-RECORD-AS-TOKENS STREAM)
				 WHILE RECORD
				 COLLECT RECORD)))
	      (MULTIPLE-VALUE-BIND (SUCCESS NEW-TIMESTAMP)
		  (READ-INCREMENTAL-UPDATE-FILE-1 NAMESPACE RECORDS TIMESTAMP)
		(WHEN SUCCESS
		  (SETF (THIRD CHANGES-FILE-ELEM) (SEND STREAM :INFO))
		  (WHEN ( FILE-TIMESTAMP NEW-TIMESTAMP)
		    (NAMESPACE-WARNING "Namespace ~A: Timestamp from file ~D does not match timestamp from changes file ~D."
				       NAMESPACE FILE-TIMESTAMP NEW-TIMESTAMP)))			     
		(VALUES SUCCESS FILE-TIMESTAMP))))
	  (VALUES (OR (NULL TIMESTAMP)
		      (= FILE-TIMESTAMP TIMESTAMP))
		  FILE-TIMESTAMP)))))

(DEFMETHOD (:QUERY LOCAL-NAMESPACE-ACCESS-PATH) (NAMESPACE CLASS &REST PROPERTY-LIST)
  NAMESPACE CLASS PROPERTY-LIST
  NIL)

(DEFMETHOD (:RELOAD-NAMESPACE LOCAL-NAMESPACE-ACCESS-PATH) (NAMESPACE)
  (FS:WITH-AUTOMATIC-LOGIN-TO-SYS-HOST
    ;; Reload the class files.
    (LET ((OBJECTS (LOOP FOR ELEM IN (RELOAD-FILE-INFORMATION NAMESPACE T)
			 AS (TYPE PATHNAME INFO) = ELEM
			 DO (IGNORE INFO)
			 UNLESS (MEMQ TYPE '(:VERSION :CHANGES))
			   NCONC (WITH-OPEN-FILE (STREAM PATHNAME :DIRECTION :INPUT)
				   (PROG1 (RELOAD-NAMESPACE-FROM-STREAM
					    NAMESPACE STREAM :RETURN-OBJECTS T :UNTIL-EOF T)
					  (SETF (THIRD ELEM) (SEND STREAM :INFO)))))))
      (DELETE-OLD-OBJECTS-FROM-NAMESPACE NAMESPACE OBJECTS))
    (VALUES T (TIMESTAMP-FROM-FILE-INFORMATION NAMESPACE))))

(DEFMETHOD (:UPDATE-OBJECT LOCAL-NAMESPACE-ACCESS-PATH) (NAMESPACE OBJECT ON-BEHALF-OF)
  (LET ((*NAMESPACE-PROTOCOL-VERSION* *HIGHEST-SUPPORTED-PROTOCOL-VERSION* )
	(OLD-TIMESTAMP (SEND NAMESPACE :VALIDATION-TIMESTAMP)))
    (COPY-CLASS-FILE-EXCEPT-FOR-RECORD
      NAMESPACE OBJECT #'(LAMBDA (NAMESPACE OBJECT STREAM)
			   (PRINT-OBJECT-ATTRIBUTES OBJECT STREAM NAMESPACE))
      ON-BEHALF-OF)
    ;; Make the log entry
    (APPEND-TO-VERSION-FILE NAMESPACE
			    (FORMAT NIL "~\DATIME\ ~A ~A by ~A.  Old timestamp was ~D."
				    (SEND OBJECT :CLASS)
				    (SEND OBJECT :PRIMARY-NAME-STRING NAMESPACE)
				    ON-BEHALF-OF OLD-TIMESTAMP)
			    ON-BEHALF-OF)
    ;; Make a changes file entry if necessary
    (SEND NAMESPACE :ADD-ENTRY-FOR-CHANGED-OBJECTS OLD-TIMESTAMP (LIST OBJECT))
    (SEND NAMESPACE :SET-LATEST-VALIDATION-TIMESTAMP
	  (TIMESTAMP-FROM-FILE-INFORMATION NAMESPACE))
    (WRITE-NEW-CHANGES-FILE NAMESPACE ON-BEHALF-OF)))

(DEFMETHOD (:MAP-OVER-POSSIBLE-OBJECT-NAME-COMPLETIONS LOCAL-NAMESPACE-ACCESS-PATH)
	   (CLASS STRING NAMESPACE FUNCTION)
  (MAP-OVER-LOCAL-OBJECT-NAME-COMPLETIONS CLASS STRING NAMESPACE FUNCTION))

(DEFUN MAP-OVER-LOCAL-OBJECT-NAME-COMPLETIONS (CLASS STRING NAMESPACE FUNCTION)
  (IGNORE STRING)				;Would be used if we kept a cache.
  (SEND NAMESPACE :MAP-OVER-OBJECTS-OF-CLASS CLASS
	(LAMBDA (OBJECT)
	  (DECLARE (DOWNWARD-FUNCTION))
	  (DOLIST (NAME (SEND OBJECT :NAMES))
	    (IF (CLASS-GLOBALLY-NAMED-P CLASS)
		(FUNCALL FUNCTION (STRING NAME))
		(FUNCALL FUNCTION (SEND NAME :STRING)))))))

(COMPILE-FLAVOR-METHODS LOCAL-NAMESPACE-ACCESS-PATH)

;;;

(DEFINE-PROTOCOL :LOCAL-NAMESPACE (:NAMESPACE :LOCAL)
  (:INVOKE (SERVICE-ACCESS-PATH)
   (MAKE-INSTANCE 'LOCAL-NAMESPACE-ACCESS-PATH :SERVICE-ACCESS-PATH SERVICE-ACCESS-PATH)))

(DEFINE-PROTOCOL :LOCAL-NAMESPACE-TIMESTAMP (:NAMESPACE-TIMESTAMP :LOCAL)
  (:INVOKE (SERVICE-ACCESS-PATH)
   (FS:WITH-AUTOMATIC-LOGIN-TO-SYS-HOST
     (LET* ((NAMESPACE (FIRST (SERVICE-ACCESS-PATH-ARGS SERVICE-ACCESS-PATH)))
	    (VERSION-FILE-ELEM (ASSQ :VERSION (RELOAD-FILE-INFORMATION NAMESPACE NIL))))
       (UNLESS (NS-MEMQ NAMESPACE *LOCAL-NAMESPACES-INITIALIZED*)
	 (WITH-OPEN-FILE (STREAM (SECOND VERSION-FILE-ELEM) :DIRECTION :PROBE)
	   (SETF (THIRD VERSION-FILE-ELEM) (SEND STREAM :INFO)))
	 (PUSH NAMESPACE *LOCAL-NAMESPACES-INITIALIZED*))
       (TIMESTAMP-FROM-FILE-INFORMATION NAMESPACE)))))
