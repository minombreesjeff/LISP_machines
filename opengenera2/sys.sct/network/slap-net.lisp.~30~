;;; -*- Mode: LISP; Syntax: Common-lisp; Package: NETWORK-INTERNALS; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This is the prototype for the Symbolics Local Area Protocol (SLAP)
;;; packet.  It's purpose in life is to make an ethernet type number
;;; last longer by multiplexing it over a number of protocols. 
;;; Initially the only user of the protocol (medium in net-speak) is
;;; netboot.
(cl:defstruct (slap-packet (:include #+3600 software-epacket #+IMACH epacket)
			   (:conc-name slap-)
			   (:constructor nil)
			   (:copier nil)
			   (:predicate nil))
  )

;;; The only field in the SLAP packet is the slap protocol number which
;;; is the next two bytes after the ethernet type number in an ethernet
;;; packet (effectively there as padding in the software-epacket).
;;; Anything more would start to duplicate IP, so don't bother; or
;;; invent your own subprotocol.
(defsubst slap-protocol (slap-packet)
  ;;; first-word is filled in from this
  #+3600 (%logldb (byte 16 16) (slap-duplicate-first-word slap-packet))
  #+IMACH (epacket-first-word slap-packet))


;;; This mixin is required for any protocol that wants to use SLAP-net.
(defflavor slap-protocol-mixin
	((enabled nil)
	 network
	 protocol)
	()
  :abstract-flavor
  (:gettable-instance-variables network enabled)
  (:required-methods :enabled :receive-packet)
  (:initable-instance-variables network protocol))

(defmethod (:enable slap-protocol-mixin) ()
  (setf enabled t))

(defmethod (:disable slap-protocol-mixin) ()
  (setf enabled nil))

(defmethod (:reset slap-protocol-mixin) ()
  (send self ':disable))

(defmethod (:packet-buffer-panic slap-protocol-mixin) ())

(defmethod (:allocate-packet slap-protocol-mixin) ()
  (let ((packet (send network :allocate-packet)))
    (setf (slap-protocol packet) protocol)
    packet))

(defmethod (:deallocate-packet slap-protocol-mixin) (packet)
  (send network :deallocate-packet packet))

(defwhopper (:receive-packet slap-protocol-mixin) (packet &rest other-args)
  (if (send self ':enabled)
      (lexpr-continue-whopper packet other-args)
      (send self :deallocate-packet packet)))

(defmethod (:receive-packet slap-protocol-mixin) (packet ignore ignore)
  (send self :deallocate-packet packet))

(defmethod (:transmit-packet slap-protocol-mixin) (packet length protocol-address free-flag
							  #+IMach interface)
  (if (send self ':enabled)
      (send network ':transmit-packet packet length protocol protocol-address free-flag
	    #+IMach interface)
      (if free-flag
	  (send self :deallocate-packet packet)
	  packet)))

(defmethod (:name slap-protocol-mixin) ()
  (cl:princ-to-string self))

;;; Make each SLAP protocol look like a network to Peek.
(defmethod (:peek-header slap-protocol-mixin) ()
  (tv:scroll-parse-item
    `(:mouse-item
       (nil :kbd (send :network-menu ,self)
	    :documentation
	    "Menu of useful things to do to this network.")
       :string ,(format nil "~A (~A ~D)" self network protocol))))

(defmethod (:peek slap-protocol-mixin) ())


(defflavor slap-network
	((packets-in 0)
	 (packets-out 0)
	 (enabled nil)
	 (interface nil)
	 (protocol-alist nil))
	(address-resolution-network-mixin network)
  (:gettable-instance-variables interface)
  :readable-instance-variables			      
  (:initable-instance-variables interface))

(defprop :slap slap-network net:network-type-flavor)

(defmethod (:type slap-network) () ':slap)

(defmethod (:network-typep slap-network) (type) (eq type ':slap))

(defmethod (:address-resolution-parameters slap-network) ()
  (values *slap-ethernet-type* 6 :array nil))

(defmethod (:resolve-protocol-address slap-network) (address interface)
  (declare (ignore interface))
  (values address *slap-ethernet-type*))

(defmethod (:parse-address slap-network) (string)
  (let ((address (cl:make-array 6 :element-type '(cl:unsigned-byte 8))))
    (fill-in-bytes
      :little address 0 (cl:parse-integer (cl:remove #\- string) :radix 16) 6 nil)
    address))

(defmethod (:unparse-address slap-network) (address)
  (cl:format nil "~{~2,'0X~^-~}" (cl:coerce address 'list)))

(defmethod (:network-address-host-object slap-network) (address &rest additional-attributes)
  (if (stringp address)
      ;; New way: use client's SYS:PRIMARY-NETWORK-ADDRESS
      (let ((data (neti:parse-primary-network-address address nil)))
	(loop for entry in data
	      for network = (neti:local-network-of-type (primary-address-network-type entry)
							nil)
	      when network 
		return (neti:get-host-from-address
			 (send network :parse-address (primary-address-address-string entry))
			 network)))
      ;; Old way: backtranslate ethernet address
      (when (typep interface 'address-resolution-interface-mixin)
	;; --- Can only get it if already cached, so don't bother with
	;; validity-checking.
	(let ((*inhibit-validity-checking* t))
	  (loop for network in *local-networks* 
		when (and (neq network self) (send-if-handles network :enabled))
		  do (let ((protocol-address (send interface :hardware-address-protocol-address
						   network address)))
		       (when protocol-address
			 (multiple-value-bind (host valid-p)
			     (cl:apply #'get-host-from-network-address
				       protocol-address network additional-attributes)
			   (when host
			     (return (values host valid-p)))))))))))

(defmethod (define-slap-protocol slap-network) (protocol flavor &rest init-options)
  (let ((instance
	  (cl:apply #'make-instance flavor :protocol protocol :network self init-options)))
    (cl:check-type instance slap-protocol-mixin)
    (let ((entry (cl:assoc protocol protocol-alist)))
      (if entry
	  (rplacd entry instance)
	  (setf protocol-alist (cl:acons protocol instance protocol-alist))))))

(defmethod (slap-protocol-flavor slap-network) (protocol)
  (cl:assoc protocol protocol-alist))

(defun-in-flavor (map-protocols slap-network) (funarg &rest other-args)
  (loop for (nil . flavor) in protocol-alist
	doing
    (cl:apply funarg flavor other-args)))

(defmethod (:enable slap-network) ()
  (dolist (suitable-interface *interfaces*)
    (when (or #+3600(typep suitable-interface '3600-ethernet-interface)
	      #+3600(typep suitable-interface 'cli::nbs-ethernet-interface)
	      #+imach(typep suitable-interface 'ivory-ethernet-interface))
      (unless interface
	(setq interface suitable-interface))
      (send suitable-interface ':add-network self (send interface :local-hardware-address))))
  (when interface
    (map-protocols 'send ':enable)
    (setf enabled t)
    (values t)))

(defmethod (:disable slap-network) ()
  (map-protocols 'send :disable)
  (setf enabled nil)
  (setf interface nil))

(defmethod (:reset slap-network) ()
  (send self ':disable)
  (map-protocols 'send ':reset))

(defmethod (:packet-buffer-panic slap-network) ()
  (map-protocols 'send ':packet-buffer-panic))

(defun-in-flavor (packet-slap-packet slap-network) (packet)
  (packet-ether-packet (sub-packet-packet packet)))

(defun-in-flavor (slap-packet-packet slap-network) (packet)
  (epacket-sub-packet packet))

(defmethod (:allocate-packet slap-network) ()
  (let ((packet (packet-slap-packet (send interface :allocate-packet))))
    (setf (slap-type packet) *slap-ethernet-type-swapped*)
    packet))

(defmethod (:deallocate-packet slap-network) (packet)
  (deallocate-packet-buffer (slap-packet-packet packet)))

(defmethod (:receive-packet slap-network) (packet interface &optional interface-address)
  (incf packets-in)
  (if enabled
      (let* ((slap-packet (packet-slap-packet packet))
	     (protocol (cdr (assoc (slap-protocol slap-packet) protocol-alist))))
	(if protocol
	    (send protocol ':receive-packet slap-packet interface interface-address)
	    (deallocate-packet-buffer packet)))
      (deallocate-packet-buffer packet)))

(defmethod (:transmit-packet slap-network) (packet length protocol destination free-flag
						   #+IMach xmit-interface)
  (incf packets-out)
  (setf (slap-protocol packet) protocol)
  (if enabled
      (send #+3600 interface #+IMach xmit-interface :transmit-packet
	    (slap-packet-packet packet) free-flag
	    self destination
	    ;; words to bytes plus 2 for the slap-protocol field
	    (+ (* length 4) 2))
      (if free-flag
	  (deallocate-packet-buffer packet)
	  packet)))

(defmethod (:peek-header slap-network) ())

(defmethod (:peek slap-network) ()
  (list ()
	(tv:scroll-maintain-list
	  #'(lambda ()
	      (si:poor-man\'s-with-collection (protocols)
		(map-protocols
		  (lambda (protocol) (collect-protocols protocol)))
		protocols))
	  #'(lambda (protocol)
	      (list ()
		    (tv:scroll-parse-item "")
		    (send protocol :peek-header)
		    (send protocol :peek))))))

(compile-flavor-methods slap-network)


;;; Currently SLAP-net is not interned in the namespace.
(defvar *slap-network* (make-instance 'slap-network :names '("SLAP") :class 'network))


