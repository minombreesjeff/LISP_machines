;;; -*- Mode: LISP; Package: NETI; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFCONST *LOWEST-SUPPORTED-PROTOCOL-VERSION* 0)
(DEFCONST *HIGHEST-SUPPORTED-PROTOCOL-VERSION* 6)

;;;; Parsing
;;; A token is characters until whitespace or delimited by "'s.
;;; A line is a set of tokens ending with a newline.
;;; A record is a set of lines followed by a line with no tokens on it.

;;; Lexing an input stream...

(DEFUN PARSE-RECORD-AS-TOKENS-WITH-TIMEOUT (STREAM &OPTIONAL (COMMENTS-P T))
  (CONDITION-BIND ((PROTOCOL-TIMEOUT #'NAMESPACE-SERVER-LOSING))
    (WITH-STREAM-TIMEOUT (STREAM :INPUT *NAMESPACE-RECORD-TIMEOUT*)
      (PARSE-RECORD-AS-TOKENS STREAM COMMENTS-P))))

(DEFUN NAMESPACE-SERVER-LOSING (ERROR)
  (LET ((HOST (SEND ERROR :FOREIGN-HOST)))
    (UNLESS (SYMBOLP HOST)
      (SEND HOST :SET-UNAVAILABLE :SERVICE :NAMESPACE)))
  NIL)

(DEFRESOURCE PARSE-BUFFER ()
  :CONSTRUCTOR (MAKE-ARRAY 64. :TYPE 'ART-STRING)
  :INITIAL-COPIES 1)

(DEFMACRO LEX-CHARS (SEARCH-FCN SEARCH-TARGET COPY-CODE EOL-CODE &BODY TARGET-CODE)
  `(LET ((IDX (,SEARCH-FCN ,SEARCH-TARGET BUFFER INDEX END)))
     ((LAMBDA (X)
	,(WHEN COPY-CODE `(STRING-NCONC-SUBSTRING TOKEN BUFFER INDEX X))
	(SETQ INDEX X))
      (IF (NULL IDX) END IDX))
     (COND (IDX . ,TARGET-CODE)
	   ((NOT EOLP) ,EOL-CODE))))

(DEFUN PARSE-RECORD-AS-TOKENS (STREAM &OPTIONAL (COMMENTS-P T))
  (USING-RESOURCE (BUFFER PARSE-BUFFER)
    (LOOP WITH RECORD = NIL
	  WITH LINE = NIL
	  WITH STATE = 'WHITE
	  WITH END = 0
	  WITH EOLP = T
	  WITH INDEX = 0
	  WITH TOKEN AND EOFP
	  DO (LOOP WHILE (AND ( INDEX END) EOLP)
		   DO (SETQ INDEX 0)
		      (MULTIPLE-VALUE (END EOFP EOLP)
			(SEND STREAM :STRING-LINE-IN NIL BUFFER)))
	     (SELECTQ STATE
	       (WHITE
		(LEX-CHARS STRING-SEARCH-NOT-SET '(#\SP #\TAB) NIL
			   (IF (NULL LINE)
			       (LOOP-FINISH)
			       (PUSH (NREVERSE LINE) RECORD)
			       (SETQ LINE NIL)
			       (SETQ EOLP T))
		  (IF (AND COMMENTS-P (CHAR-EQUAL (AREF BUFFER INDEX) #/;))
		      (SETQ STATE 'COMMENT)
		      (SELECTOR (AREF BUFFER INDEX) CHAR-EQUAL
			(#/"
			 (INCF INDEX)
			 (SETQ TOKEN (MAKE-ARRAY 16. :TYPE 'ART-STRING :FILL-POINTER 0))
			 (SETQ STATE 'STRING))
			(OTHERWISE
			  (SETQ TOKEN (MAKE-ARRAY 16. :TYPE 'ART-STRING :FILL-POINTER 0))
			  (SETQ STATE 'TOKEN))))))
	       (TOKEN
		(LEX-CHARS STRING-SEARCH-SET '(#\SP #\TAB #/") T
			   (PROGN
			     (PUSH TOKEN LINE)
			     (SETQ TOKEN NIL)
			     (SETQ STATE 'WHITE))
		  (PUSH TOKEN LINE)
		  (SETQ TOKEN NIL)
		  (SETQ STATE 'WHITE)))
	       (STRING
		(LEX-CHARS STRING-SEARCH-SET '(#/" #/\) T
			   (PROGN
			     (ARRAY-PUSH-EXTEND TOKEN #\CR)
			     (SETQ EOLP T))
		  (SELECTOR (AREF BUFFER INDEX) CHAR-EQUAL
		    (#/"
		     (INCF INDEX)
		     (PUSH TOKEN LINE)
		     (SETQ TOKEN NIL)
		     (SETQ STATE 'WHITE))
		    (#/\
		     (INCF INDEX)
		     (SETQ STATE 'SLASH)))))
	       (SLASH
		(IF ( INDEX END)
		    (PROGN (ARRAY-PUSH-EXTEND TOKEN #\CR)
			   (SETQ EOLP T))
		    (STRING-NCONC-SUBSTRING TOKEN BUFFER INDEX (1+ INDEX))
		    (INCF INDEX))
		(SETQ STATE 'STRING))
	       (COMMENT
		(SETQ INDEX END)
		(UNLESS EOLP (SETQ STATE 'WHITE
				   EOLP T))))
	  FINALLY (RETURN (VALUES (NREVERSE RECORD) EOFP)))))

(DEFUN STRING-NCONC-SUBSTRING (TOKEN STRING FROM TO)
  (LET* ((ALEN (ARRAY-ACTIVE-LENGTH TOKEN))
	 (TSIZE (+ ALEN (- TO FROM))))
    (WHEN (> TSIZE (ARRAY-LENGTH TOKEN))
      (ADJUST-ARRAY-SIZE TOKEN (* 2 TSIZE)))
    (COPY-ARRAY-PORTION STRING FROM TO TOKEN ALEN TSIZE)
    (STORE-ARRAY-LEADER TSIZE TOKEN 0)))

;;; Converting to internal form...

;;; Convert the list of TOKENS into internal form based on TEMPLATE
;;; in the context of NAMESPACE.  Return the value, whether there can
;;; be many such values, the unused part of the template, and the unused
;;; tokens.  The last two may be NIL implying the simple case of using exactly
;;; one token and one template element.
;;; If NAMESPACE is nil, a "global" lookup is done on non-primitive objects.
(DEFUN CONVERT-TOKENS (NAMESPACE TEMPLATE TOKENS)
  (DECLARE (VALUES VALUE LIST-P UNUSED-TEMPLATE UNUSED-TOKENS))
  (LET ((FUNCTION (GET (FIRST TEMPLATE) 'PRIMITIVE-TYPE)))
    (IF FUNCTION
	(FUNCALL FUNCTION ':READ NAMESPACE (CDR TEMPLATE) TOKENS)
	(LET* ((THIS-CLASS (FIRST TEMPLATE))
	       (THIS-NAME (FIRST TOKENS)))
	  (COND ((STRING-EQUAL THIS-NAME "<Deleted>")
		 (ERROR 'NAMESPACE-OBJECT-DELETED :CLASS THIS-CLASS))
		(T
		 (CONDITION-CASE-IF *COLLECT-UNKNOWN-OBJECT-FIXUPS* (ERROR)
		     (VALUES
		       (IF NAMESPACE
			   (FIND-OBJECT-NAMED-IN-NAMESPACE THIS-CLASS THIS-NAME NAMESPACE)
			   (FIND-OBJECT-NAMED THIS-CLASS THIS-NAME))
		       NIL)
		   ((OBJECT-NOT-FOUND-IN-NAMESPACE NAMESPACE-NOT-FOUND)
		    (LET ((ENTRY (MAKE-INSTANCE 'OBJECT-FIXUP
						:CLASS THIS-CLASS
						:NAME-STRING THIS-NAME
						:NAMESPACE NAMESPACE)))
		      (PUSH ENTRY *THIS-OBJECT-UNKNOWN-OBJECT-FIXUPS*)
		      ENTRY)))))))))

;;; Translate a record back from a server or file into a specification of the
;;; object.  RECORD is a list of lines, each a list of tokens.
;;; First line of record is class, name.  NAMESPACE is the one we are dealing with.
(DEFUN RECORD-INTO-PROPERTY-LIST (RECORD NAMESPACE)
  (DECLARE (VALUES CLASS NAME PROPERTY-LIST))
  (LET (CLASS NAME PROPERTY-LIST)
    (LET ((FIRST-LINE (FIRST RECORD)))
      (SETQ CLASS (INTERN-GLOBAL-NAME (FIRST FIRST-LINE)))
      (SETQ NAME (CONVERT-TOKENS NAMESPACE
				 (IF (CLASS-GLOBALLY-NAMED-P CLASS) '(:GLOBAL-NAME) '(:NAME))
				 (REST1 FIRST-LINE))))
    (SETQ PROPERTY-LIST (RECORD-INTO-PROPERTY-LIST-1 (REST1 RECORD) CLASS NAMESPACE))
    (VALUES CLASS NAME PROPERTY-LIST)))

(DEFUN RECORD-INTO-PROPERTY-LIST-1 (RECORD CLASS NAMESPACE)
  (LOOP WITH PROPERTY-LIST = NIL
	FOR (INDICATOR . REST) IN RECORD
	DO (SETQ INDICATOR (PARSE-NAME INDICATOR T NAMESPACE))
	AS TEMPLATE = (CLASS-GET-TEMPLATE CLASS INDICATOR)
	DO (IF TEMPLATE
	       (CONDITION-CASE (ERROR)
		   (MULTIPLE-VALUE-BIND (VALUE LIST-P)
		       (CONVERT-TOKENS NAMESPACE TEMPLATE REST)
		     ;; Like PUTPROP, but preserve order
		     (LOOP FOR PLIST ON PROPERTY-LIST BY 'CDDR
			   WHEN (EQ (CAR PLIST) INDICATOR)
			   RETURN (SETF (CADR PLIST)
					(IF LIST-P (NCONC (CADR PLIST) (NCONS VALUE)) VALUE))
			   FINALLY (SETQ PROPERTY-LIST (NCONC PROPERTY-LIST
							      (LIST INDICATOR
								    (IF LIST-P (NCONS VALUE)
									VALUE))))))
		 (NAMESPACE-OBJECT-DELETED
		   (NAMESPACE-WARNING
		     "Deleted ~A removed from ~A attribute."
		     (SEND ERROR :CLASS) INDICATOR)))
	       (NAMESPACE-WARNING "Unknown indicator ~A with value ~S for class ~A.  It will be ignored."
				  INDICATOR REST CLASS))
	FINALLY (RETURN PROPERTY-LIST)))

(DEFUN RECORD-INTO-OBJECT (RECORD NAMESPACE)
  (DECLARE (VALUES (OBJECT CHANGED-P)))
  (LET ((*THIS-OBJECT-UNKNOWN-OBJECT-FIXUPS* NIL)
	(*COLLECT-UNKNOWN-OBJECT-FIXUPS* T))
    (MULTIPLE-VALUE-BIND (OBJECT CHANGED-P)
	(MULTIPLE-VALUE-BIND (CLASS NAME PROPERTY-LIST)
	    (RECORD-INTO-PROPERTY-LIST RECORD NAMESPACE)
	  (ADD-OR-CHANGE-OBJECT CLASS NAME PROPERTY-LIST NAMESPACE))
      (VALUES OBJECT CHANGED-P))))

;;; 

(DEFUN RELOAD-NAMESPACE-FROM-STREAM (NAMESPACE STREAM &KEY RETURN-OBJECTS UNTIL-EOF)
  (DECLARE (VALUES OBJECTS-READ OBJECTS-CHANGED))
  (LET ((CHANGED-OBJECTS NIL)
	(*COLLECTED-OBJECTS* NIL))
    (LOOP WITH (RECORD EOF)
	  DO (MULTIPLE-VALUE (RECORD EOF)
	       (PARSE-RECORD-AS-TOKENS STREAM))
	  WHEN RECORD
	  DO (MULTIPLE-VALUE-BIND (OBJECT CHANGED-P)
		 (RECORD-INTO-OBJECT RECORD NAMESPACE)
	       (WHEN RETURN-OBJECTS
		 (PUSH OBJECT *COLLECTED-OBJECTS*)
		 (WHEN CHANGED-P (PUSH OBJECT CHANGED-OBJECTS))))
	  UNTIL (OR EOF (AND (NULL RECORD) (NOT UNTIL-EOF))))
    (VALUES (NREVERSE *COLLECTED-OBJECTS*) (NREVERSE CHANGED-OBJECTS))))



;;; The output side...


;;;
;;; This structure allows for come level of compatibility between hosts
;;; running different versions of the namespace protocol, for cases
;;; where class templates have changed.  The idea here is to allow the
;;; host running the higher protocol version to filter his data such
;;; that it won't confuse the host running the lower protocol version.
;;;

;;; This is an alist-like thing structured as: (number . specs)
;;; where number is a protocol number.  specs applies to hosts running
;;; that protocol number or lower.  specs is an alist of (class . fields),
;;; where class is the namespace object class.  fields is an alist of
;;; (field-name template-fragment) where template-fragment is a piece of 
;;; a template, as would be returned by CLASS-GET-TEMPLATE.  NB!  this
;;; should be kept in descending order of protocol version!

(DEFVAR *NAMESPACE-PROTOCOL-INCOMPATIBILITIES-LIST*
	'((5					; for 8.0, old protocol is 5, new is 6.
	    (:HOST				; host class...
	      (:ADDRESS (:ELEMENT :PAIR :NETWORK :TOKEN))	; address used to look like this
	     ))))


;;; handed old and new protocol numbers, an object class and field name,
;;; return the old template suitable for that protocol number, or NIL.
(DEFUN OLD-TEMPLATE-FROM-INCOMPATIBILITIES-LIST (OLD-PROTOCOL-VERSION NEW-PROTOCOL-VERSION
						 CLASS FIELD)
  (LOOP FOR (VERSION . SPECS) IN *NAMESPACE-PROTOCOL-INCOMPATIBILITIES-LIST*
	WHEN (AND (< VERSION NEW-PROTOCOL-VERSION)
		  (>= VERSION OLD-PROTOCOL-VERSION))
	  THEREIS (CADR (ASSQ FIELD (CDR (ASSQ CLASS SPECS))))))

;;; Note that the name is not quoted here yet since string-equal is done on
;;; whole lines right now... This should be fixed.
(DEFUN PRINT-OBJECT-ATTRIBUTES (OBJECT STREAM NAMESPACE &KEY SUPPRESS-NAME)
  (LET* ((CLASS (SEND OBJECT :CLASS))
	 (GLOBALLY-NAMED (CLASS-GLOBALLY-NAMED-P CLASS)))
    (MULTIPLE-VALUE-BIND (PRIMARY-NAME PROPERTY-LIST)
	(SEND OBJECT :NAMESPACE-VIEW-INTERNAL NAMESPACE)
      (WHEN PRIMARY-NAME
	(SEARCHING-ONE-NAMESPACE (NAMESPACE)
	  (SCL:WITH-STANDARD-IO-ENVIRONMENT
	    (UNLESS SUPPRESS-NAME
	      (FORMAT STREAM "~A ~A~%" CLASS (SEND OBJECT :PRIMARY-NAME-STRING NAMESPACE)))
	    (UNLESS GLOBALLY-NAMED
	      (LOOP FOR NS IN (SEND OBJECT :NAMESPACES)
		    UNLESS (EQ PRIMARY-NAME (SEND OBJECT :PRIMARY-NAME NS))
		      DO (FORMAT STREAM "NICKNAME ~A~%"
				 (SEND OBJECT :PRIMARY-NAME-STRING NS))))
	    (LOOP FOR (IND VAL) ON PROPERTY-LIST BY 'CDDR
		  AS TEMPLATE = (OR (AND (< *NAMESPACE-PROTOCOL-VERSION*
					    *HIGHEST-SUPPORTED-PROTOCOL-VERSION*)
					 (OLD-TEMPLATE-FROM-INCOMPATIBILITIES-LIST
					   *NAMESPACE-PROTOCOL-VERSION* 
					   *HIGHEST-SUPPORTED-PROTOCOL-VERSION*
					   CLASS IND))
				    (CLASS-GET-TEMPLATE CLASS IND))
		  WHEN TEMPLATE
		    DO (CONDITION-CASE ()
			    (LET ((STRING
				    (STRING-THIN
				      (WITH-OUTPUT-TO-STRING (SSTREAM)
					(LET ((*NAMESPACE* NAMESPACE))
					  (UNCONVERT-TOKENS IND NIL TEMPLATE VAL SSTREAM)))
				      :ERROR-IF :FAT)))
			      (SEND STREAM :STRING-OUT STRING)
			      (RETURN-ARRAY STRING))
			  ((NAMESPACE-OBJECT-DELETED UNINTERNED-OBJECT-IN-ATTRIBUTE))))
	    (TERPRI STREAM)))))))


;;; Print the external representation to the stream according to
;;; TEMPLATE.  Return the unused part of the TEMPLATE (if PARTIAL-P)
;;; If the value is NIL nothing is printed.  This is for the benefit of
;;; e.g., the namespace editor which, during editing, has NIL values.
;;; QUOTE-P indicates that the token is being printed in a context that
;;; requires quoting (e.g., among other tokens).  QUOTE-P should not be supplied
;;; or should be T if PARTIAL-P is NIL.
;;; Everything but indicators and classes (which can't contain characters that
;;; require quoting) is carefully quoted.
(DEFUN UNCONVERT-TOKENS (INDICATOR PARTIAL-P TEMPLATE VALUE STREAM &OPTIONAL (QUOTE-P T))
  (LET ((FUNCTION (GET (FIRST TEMPLATE) 'PRIMITIVE-TYPE))
	(REST-OF-TEMPLATE (CDR TEMPLATE)))
    (COND ((NULL VALUE))
	  (FUNCTION
	   (COND (PARTIAL-P
		  (SETQ REST-OF-TEMPLATE
			(FUNCALL FUNCTION ':PRINT REST-OF-TEMPLATE VALUE STREAM QUOTE-P)))
		 ((FUNCALL FUNCTION ':OPERATION-HANDLED-P ':PRINT-WHOLE)
		  (FUNCALL FUNCTION ':PRINT-WHOLE INDICATOR REST-OF-TEMPLATE VALUE STREAM))
		 (T
		  (FORMAT STREAM "~A " INDICATOR)
		  (FUNCALL FUNCTION ':PRINT REST-OF-TEMPLATE VALUE STREAM T)
		  (TERPRI STREAM))))
	  (PARTIAL-P
	   (WHEN (SEND VALUE :UNINTERNED-P)   ;Don't print attribute at all if it's fishy.
	     (SIGNAL 'UNINTERNED-OBJECT-IN-ATTRIBUTE ':OBJECT VALUE))
	   (PRINT-RECORD-STRING (SEND VALUE :PRIMARY-NAME-STRING *NAMESPACE*)
				STREAM QUOTE-P))
	  (T
	   (WHEN (SEND VALUE :UNINTERNED-P)   ;Don't print attribute at all if it's fishy.
	     (SIGNAL 'UNINTERNED-OBJECT-IN-ATTRIBUTE ':OBJECT VALUE))
	   (FORMAT STREAM "~A ~VQ~%"
		   INDICATOR (SEND VALUE :PRIMARY-NAME-STRING *NAMESPACE*)
		   #'PRINT-RECORD-STRING)))
    REST-OF-TEMPLATE))

(DEFSELECT ((:PROPERTY :TOKEN PRIMITIVE-TYPE))
  (:READ (IGNORE IGNORE TOKENS)
   (STRING-APPEND (FIRST TOKENS)))
  (:PRINT (TEMPLATE VALUE STREAM QUOTE-P)
   (PRINT-RECORD-STRING VALUE STREAM QUOTE-P)
   TEMPLATE)
  )

(DEFSELECT ((:PROPERTY :NAME PRIMITIVE-TYPE))
  (:READ (NAMESPACE IGNORE TOKENS)
   (CONDITION-CASE-IF *COLLECT-UNKNOWN-OBJECT-FIXUPS* ()
       (PARSE-NAME (FIRST TOKENS) NIL NAMESPACE)
     (NAMESPACE-NOT-FOUND
       (LET ((ENTRY (MAKE-INSTANCE 'NAME-FIXUP
				   :NAME-STRING (FIRST TOKENS) :NAMESPACE NAMESPACE)))
	 (PUSH ENTRY *THIS-OBJECT-UNKNOWN-OBJECT-FIXUPS*)
	 ENTRY))))
  (:PRINT (TEMPLATE VALUES STREAM QUOTE-P)
   (PRINT-RECORD-STRING (SEND VALUES :STRING) STREAM QUOTE-P)
   TEMPLATE)
  )

(DEFSELECT ((:PROPERTY :GLOBAL-NAME PRIMITIVE-TYPE))
  (:READ (NAMESPACE IGNORE TOKENS)
   (PARSE-NAME (FIRST TOKENS) T NAMESPACE))
  (:PRINT (TEMPLATE VALUES STREAM QUOTE-P)
   (PRINT-RECORD-STRING VALUES STREAM QUOTE-P)
   TEMPLATE)
  )

(DEFMACRO CONVERT-TOKENS-SET (NAMESPACE TEMPLATE TOKENS)
  (LET ((MVAL-P (GENSYM))
	(RTEMP (GENSYM))
	(RTOK (GENSYM))
	(VAL (GENSYM)))
    `(PROGN (WHEN (AND (NULL ,TOKENS) (NEQ (FIRST ,TEMPLATE) :SET))
	      (ERROR 'NOT-ENOUGH-TOKENS))
	    (MULTIPLE-VALUE-BIND (,VAL NIL ,MVAL-P ,RTEMP ,RTOK)
		(CONVERT-TOKENS ,NAMESPACE ,TEMPLATE ,TOKENS)
	      (SETQ ,TEMPLATE (IF ,MVAL-P ,RTEMP (CDR ,TEMPLATE))
		    ,TOKENS (IF ,MVAL-P ,RTOK (CDR ,TOKENS)))
	      ,VAL))))

;;; * is needed for namespace query to match a whole set, treat it specially.
(DEFSELECT ((:PROPERTY :SET PRIMITIVE-TYPE))
  (:READ (NAMESPACE TEMPLATE TOKENS)
   (IF (EQUAL TOKENS '("*"))
       ':*
     (VALUES (LOOP WHILE TOKENS
		   FOR TEMP = TEMPLATE
		   COLLECT (CONVERT-TOKENS-SET NAMESPACE TEMP TOKENS))
	     NIL T)))
  (:PRINT (TEMPLATE VALUES STREAM IGNORE)
   (IF (EQ VALUES ':*)
       (PRINC VALUES STREAM)
     (LOOP FOR VAL IN VALUES
	   WITH FIRST-P = T
	   WHEN FIRST-P DO (SETQ FIRST-P NIL)
	   ELSE DO (SEND STREAM ':TYO #\SP)
	   FOR REST-TEMPLATE = (UNCONVERT-TOKENS NIL T TEMPLATE VAL STREAM T)
	   FINALLY (RETURN REST-TEMPLATE))))
  )

(DEFSELECT ((:PROPERTY :ELEMENT PRIMITIVE-TYPE))
  (:READ (NAMESPACE TEMPLATE TOKENS)
   (VALUES (CONVERT-TOKENS NAMESPACE TEMPLATE TOKENS)
	   T))
  (:PRINT-WHOLE (INDICATOR TEMPLATE VALUES STREAM)
   (LOOP FOR VAL IN VALUES
	 DOING (LET ((START (AND (SEND STREAM :OPERATION-HANDLED-P :SET-POINTER)
				 (SEND STREAM :READ-POINTER))))
		 (CONDITION-CASE-IF START ()
		     (UNCONVERT-TOKENS INDICATOR NIL TEMPLATE VAL STREAM)
		   ((NAMESPACE-OBJECT-DELETED UNINTERNED-OBJECT-IN-ATTRIBUTE)
		    ;; If outputing to the string stream, can manage to only lose
		    ;; a single line when something is broken.
		    (SEND STREAM :SET-POINTER START))))))
  )

(DEFSELECT ((:PROPERTY :PAIR PRIMITIVE-TYPE))
  (:READ (NAMESPACE TEMPLATE TOKENS)
   (VALUES (LIST (CONVERT-TOKENS-SET NAMESPACE TEMPLATE TOKENS)
		 (CONVERT-TOKENS-SET NAMESPACE TEMPLATE TOKENS))
	   NIL T TEMPLATE TOKENS))
  (:PRINT (TEMPLATE VALUE STREAM IGNORE)
   (SETQ TEMPLATE (UNCONVERT-TOKENS NIL T TEMPLATE (FIRST VALUE) STREAM T))
   (SEND STREAM ':TYO #\SP)
   (UNCONVERT-TOKENS NIL T TEMPLATE (SECOND VALUE) STREAM T))
  )

(DEFSELECT ((:PROPERTY :TRIPLE PRIMITIVE-TYPE))
  (:READ (NAMESPACE TEMPLATE TOKENS)
   (VALUES (LOOP REPEAT 3
		 COLLECT (CONVERT-TOKENS-SET NAMESPACE TEMPLATE TOKENS))
	   NIL T TEMPLATE TOKENS))
  (:PRINT (TEMPLATE VALUE STREAM IGNORE)
   (LOOP REPEAT 3
	 FOR VAL ON VALUE
	 FOR FIRST-P = T THEN NIL
	 DO (UNLESS FIRST-P (SEND STREAM ':TYO #\SP))
	    (SETQ TEMPLATE (UNCONVERT-TOKENS NIL T TEMPLATE (CAR VAL) STREAM T)))
   TEMPLATE)
  )

;;; Print a string, optionally quoting characters that the record parser requires
;;; quoting for.
(DEFUN PRINT-RECORD-STRING (STRING &OPTIONAL (STREAM STANDARD-OUTPUT) (QUOTE-P T))
  (UNLESS (STRINGP STRING)
    (SETQ STRING (STRING STRING)))
  (COND ((AND QUOTE-P
	      (OR (ZEROP (STRING-LENGTH STRING))
		  (STRING-SEARCH-SET '(#/" #\CR #\SP #\TAB) STRING)))
	 (SEND STREAM ':TYO #/")
	 (LOOP FOR CH BEING THE ARRAY-ELEMENTS OF STRING
	       WHEN (MEMQ CH '(#/\ #/"))
	       DO (SEND STREAM ':TYO #/\)
	       DO (SEND STREAM ':TYO CH))
	 (SEND STREAM ':TYO #/"))
	(T
	 (SEND STREAM ':STRING-OUT STRING))))



;;; All information up to STARTING-TIMESTAMP should be present now.  For changes
;;; before it, we just record names, we don't actually process the update.
(DEFUN READ-INCREMENTAL-UPDATE-FILE-1 (NAMESPACE RECORDS STARTING-TIMESTAMP)
  (DECLARE (VALUES SUCCESS TIMESTAMP))
  ;; Make sure that the update is contiguous
  (UNLESS (STRING-EQUAL (FIRST (FIRST (FIRST RECORDS))) "TIMESTAMP")
    (FERROR "Update records in bad format."))
  ;; Process the updates
  (SEARCHING-ONE-NAMESPACE (NAMESPACE)
    (LOOP WITH FROM-TIMESTAMP = (OR STARTING-TIMESTAMP
				    (SEND NAMESPACE :VALIDATION-TIMESTAMP))
	  FOR RECORD IN RECORDS
	  WITH (CHANGED TIMESTAMP)
	  WITH *COLLECTED-OBJECTS* = NIL
	  WITH OLD-UPDATE = (OR (FIRST (CAR (LAST (SEND NAMESPACE :CHANGED-OBJECTS-ALIST))))
				0)
	  DO (SELECTOR (FIRST (FIRST RECORD)) STRING-EQUAL
	       ("TIMESTAMP"
		(WHEN TIMESTAMP
		  (SEND NAMESPACE :ADD-ENTRY-FOR-CHANGED-OBJECTS TIMESTAMP CHANGED)
		  (SETF CHANGED NIL))
		(SETQ TIMESTAMP (PARSE-NUMBER (SECOND (FIRST RECORD)) 0 NIL 10. T))
		(WHEN (> TIMESTAMP OLD-UPDATE)
		  (LET ((DELETED
			  (LOOP FOR (CLASS NAME-STRING) IN (REST1 RECORD)
				DO (SETQ CLASS (INTERN-GLOBAL-NAME CLASS))
				WHEN (SEND NAMESPACE :FIND-OBJECT-NAMED CLASS
					   (PARSE-AND-INTERN-NAME
					     CLASS NAME-STRING NAMESPACE T))
				  COLLECT IT)))
		    (WHEN DELETED
		      (SEND NAMESPACE :ADD-ENTRY-FOR-DELETED-OBJECTS TIMESTAMP DELETED)
		      (WHEN ( TIMESTAMP FROM-TIMESTAMP)
			(LOOP FOR OBJECT IN DELETED
			      DO (DELETE-OBJECT-FROM-NAMESPACE OBJECT NAMESPACE T)))))))
	       (OTHERWISE
		 (WHEN (> TIMESTAMP OLD-UPDATE)
		   (LET ((OBJECT))
		     (IF ( TIMESTAMP FROM-TIMESTAMP)
			 ;;Newer information must be fully parsed
			 (SETF OBJECT (RECORD-INTO-OBJECT RECORD NAMESPACE))
			 (SETF OBJECT (FIND-OBJECT-NAMED
					(INTERN-GLOBAL-NAME (FIRST (FIRST RECORD)))
					(SECOND (FIRST RECORD)))))
		     (PUSH OBJECT *COLLECTED-OBJECTS*)
		     (PUSH OBJECT CHANGED)))))
	  FINALLY
	    (RETURN (VALUES (OR (NULL STARTING-TIMESTAMP)
				       ( STARTING-TIMESTAMP
					  (PARSE-NUMBER (SECOND (FIRST (FIRST RECORDS)))
							0 NIL 10. T)))
				  TIMESTAMP)))))

(DEFUN WRITE-INCREMENTAL-UPDATE-FILE (NAMESPACE STREAM &OPTIONAL STARTING-TIMESTAMP)
  (LET ((ALIST (IF STARTING-TIMESTAMP
		   (SEND NAMESPACE ':CHANGES-SINCE-TIMESTAMP STARTING-TIMESTAMP)
		   (SEND NAMESPACE ':CHANGED-OBJECTS-ALIST))))
    (LOOP FOR ENTRY IN ALIST
	  DO (FORMAT STREAM "TIMESTAMP ~D~%" (CHANGED-OBJECTS-TIMESTAMP ENTRY))
	     (LOOP FOR (CLASS . NAMES) IN (CHANGED-OBJECTS-DELETED ENTRY)
		   WHEN ( *NAMESPACE-PROTOCOL-VERSION*
			   (CLASS-FIRST-PROTOCOL-VERSION CLASS))
		     DO (SEARCHING-ONE-NAMESPACE (NAMESPACE)
			  (LOOP FOR NAME IN NAMES
				DO (FORMAT STREAM "~A ~A~%" CLASS
					   (IF (TYPEP NAME 'NAME)
					       (SEND NAME ':POSSIBLY-QUALIFIED-STRING CLASS)
					       NAME)))))
	     (SEND STREAM ':TYO #\CR)
	     (LOOP FOR OBJECT IN (CHANGED-OBJECTS-CHANGED ENTRY)
		   WHEN ( *NAMESPACE-PROTOCOL-VERSION*
			   (CLASS-FIRST-PROTOCOL-VERSION (SEND OBJECT :CLASS)))
		     DO (PRINT-OBJECT-ATTRIBUTES OBJECT STREAM NAMESPACE))))
  (FORMAT STREAM "TIMESTAMP ~D~%" (SEND NAMESPACE ':VALIDATION-TIMESTAMP)))

;;;

(DEFUN DELETE-OLD-OBJECTS-FROM-NAMESPACE
       (NAMESPACE OBJECTS &KEY TIMESTAMP (CLASSES *ALL-CLASSES*))
  (LOOP WITH OBJECTS-TO-DELETE = NIL
	FOR CLASS IN CLASSES
	AS GLOBAL-P = (CLASS-GLOBALLY-NAMED-P CLASS)
	DO (MAP-OVER-OBJECTS-OF-CLASS-IN-NAMESPACE
	     NAMESPACE CLASS
	     #'(LAMBDA (OBJECT)
		 (UNLESS (OR (AND GLOBAL-P
				  (NOT (NS-EQ NAMESPACE
					      (CONDITION-CASE ()
						   (GLOBAL-OBJECT-NAMESPACE OBJECT)
						 (ERROR
						   ;; Use the subprimitive
						   ;; to flush this from the 
						   ;; class data structures
						   ;; without trying to do anything else.
						   ;; this is not a legitimate deletion,
						   ;; and cannot be recorded on the
						   ;; changes file entry or
						   ;; anyplace else.
						   (WHEN OBJECT
						     (SEND NAMESPACE :DELETE-OBJECT OBJECT))
						   NIL))
					      )))
			     (NS-MEMQ OBJECT OBJECTS)
			     (NS-MEMQ OBJECT OBJECTS-TO-DELETE))
		   (PUSH OBJECT OBJECTS-TO-DELETE))))
	FINALLY
	  (WHEN TIMESTAMP
	    (SEND NAMESPACE :ADD-ENTRY-FOR-DELETED-OBJECTS TIMESTAMP OBJECTS-TO-DELETE))
	  (LOOP FOR OBJECT IN OBJECTS-TO-DELETE
		DO (DELETE-OBJECT-FROM-NAMESPACE OBJECT NAMESPACE T))))
