;;; -*- Mode: LISP; Syntax: Common-lisp; Package: NETI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Support for the class FILE-SYSTEM

;;; This is the base flavor for all file systems.  Useful file systems will probably
;;; mixin net:basic-host.  However, that flavor is not mixed in here to maximize
;;; flexibility.  It is possible that this flavor should include not just basic-host,
;;; but pathname-host-mixin as well, since by definition all of these are possible
;;; pathname hosts.  However, it dosen't do much good to turn that on until and
;;; unless you have the pathname flavor available.

0(defflavor file-system
	()
	(object)
  :abstract-flavor)

(defun file-system-p (x)
  (typep x 'file-system))

1;;; This is the useful base flavor for most file system type flavors.
0(defflavor pathname-file-system
	()
	(fs:basic-active-pathname-host pathname-host-mixin basic-host file-system)
  :abstract-flavor)

(defmethod (:peek-file-system-header pathname-file-system) ()
  (list '(:pre-process-function chaos:peek-chaos-conn-insert-hostat)	;sigh
	(tv:scroll-parse-item
	  :leader 3
	  `(:mouse-item
	    (nil :kbd (send :peek-host-menu ,self tv:item)
		 :documentation "Menu of useful things to do to this file system.")
	    :string ,(format nil "File system ~A" self)))))

(defmethod (:file-access-path pathname-file-system :default)
	   (&optional pathname operation dont-create)
  (ignore pathname operation dont-create)
  (error "No file access is available for file system ~A." self))

(defflavor random-file-system
	()
	(neti:random-host-mixin pathname-file-system))

(defmethod (:pathname-flavor random-file-system) ()
  'fs:random-pathname)				1;this pathname type works just fine,
0						1;as it turns out.


0(defmethod (:system-type random-file-system) () ':random-file-system)

(compile-flavor-methods random-file-system)

(define-namespace-class-object-flavor-function :file-system file-system (plist)
  (let ((type (cl:getf plist :type))
	(host (cl:getf plist :host)))
    (if type
	(or (and (eq host *local-host*)
		 (cl:get type 'local-file-system-flavor nil))
	    (cl:get type 'file-system-flavor 'random-file-system))
	'file-system)))

