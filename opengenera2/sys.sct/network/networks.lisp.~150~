;;; -*- Mode: LISP; Package: NETWORK-INTERNALS; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Network base flavor

(DEFFLAVOR NETWORK () (OWN-FLAVOR-OBJECT))

(DEFINE-NAMESPACE-CLASS-OBJECT-FLAVOR-FUNCTION :NETWORK NETWORK (PLIST)
  (CL:GET (CL:GETF PLIST :TYPE) 'NETWORK-TYPE-FLAVOR 'NETWORK))

(DEFMETHOD (:NETWORK-TYPEP NETWORK) (TYPE)
  (EQ TYPE (SEND SELF :GET :TYPE)))

(DEFMETHOD (:PARSE-ADDRESS NETWORK) (ADDRESS) ADDRESS)

(DEFMETHOD (:UNPARSE-ADDRESS NETWORK) (PARSED-ADDRESS) PARSED-ADDRESS)

(DEFMETHOD (:NETWORK-ADDRESS-HOST-OBJECT NETWORK) (PARSED-ADDRESS &REST ADDITIONAL-ATTRIBUTES)
  (CL:APPLY #'GET-HOST-FROM-NETWORK-ADDRESS PARSED-ADDRESS SELF ADDITIONAL-ATTRIBUTES)) 

(DEFMETHOD (:ADDRESS-RESOLUTION-PARAMETERS NETWORK :DEFAULT) ()
  NIL)

(DEFMETHOD (:DESIRABILITY NETWORK) (&OPTIONAL IGNORE) .75)

(DEFMETHOD (:SUPPORTS-BROADCAST NETWORK) (IGNORE) NIL)

(DEFMETHOD (:POSSIBLE-MEDIUM-FOR-PROTOCOL NETWORK) (IGNORE IGNORE) NIL)

(DEFMETHOD (:SUPPORTS-PROTOCOL-ON-MEDIUM NETWORK :DEFAULT) (PROTOCOL-NAME MEDIUM-NAME)
  PROTOCOL-NAME MEDIUM-NAME
  T)

(DEFMETHOD (:RESET NETWORK) () )

(DEFMETHOD (:ENABLE NETWORK) () )

(DEFMETHOD (:ENABLED NETWORK) () T)

(DEFMETHOD (:DISABLE NETWORK) ())

(DEFMETHOD (:DEFAULT-SERVICES NETWORK) () NIL)

(DEFMETHOD (:CLOSE-CONNECTION NETWORK) (STREAM IGNORE)
  (SEND STREAM :CLOSE :ABORT))

(DEFMETHOD (:SEARCH-RULES NETWORK) ()
  ;; Try to keep the normal search order
  (SORT (SEND SELF :NAMESPACES) #'(LAMBDA (N1 N2)
				    (DOLIST (N *NAMESPACE-SEARCH-LIST*)
				      (COND ((EQ N N1)
					     (RETURN T))
					    ((EQ N N2)
					     (RETURN NIL)))))))

(DEFMETHOD (:ADD-HOST-TO-ADDRESS-TABLE NETWORK) (ADDRESS HOST)
  ADDRESS HOST NIL)

(DEFMETHOD (:CLEAR-ADDRESS-TABLE NETWORK) ()
  NIL)

(DEFUN UPDATE-HOST-TO-ADDRESS-TABLES (HOST)
  (LOOP FOR (NETWORK ADDRESS) IN (SEND HOST :NETWORK-ADDRESSES) DO
    (SEND NETWORK :ADD-HOST-TO-ADDRESS-TABLE ADDRESS HOST)))	;Address is parsed here.

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; For fast get-host-from-address on networks that represent parsed addresses as fixnums.
0(DEFFLAVOR HOST-FROM-ADDRESS-MIXIN
	((ADDRESS-HASH-TABLE (CL:MAKE-HASH-TABLE :TEST #'EQ :LOCKING :WITHOUT-INTERRUPTS
						 :REHASH-AFTER-FULL-GC T
						 :AREA *NAMESPACE-OBJECT-AREA*)))
	()
  :GETTABLE-INSTANCE-VARIABLES
  :SETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:NETWORK-ADDRESS-HOST-OBJECT HOST-FROM-ADDRESS-MIXIN)
	   (ADDRESS &REST ADDITIONAL-ATTRIBUTES)
  (DECLARE (VALUES (HOST VALID-P)))
  (BLOCK FOUND-HOST
    1;; Cache the things used for the default case up front.
0    (LET ((HOST (GETHASH ADDRESS ADDRESS-HASH-TABLE)))
      (IF HOST
	  1;; Check the validity first in0 1case it has changed on us.
0	  (MULTIPLE-VALUE-BIND (NIL VALID-P)
	      (SEND HOST :CHECK-VALIDITY)
	    (IF (AND1 ;; Is this host interned and not deleted?
0		     (NOT (SEND HOST :UNINTERNED-P))
		     1;; Does this host have the address?
0		     (LOOP FOR (NET ADDR) IN (SEND HOST :NETWORK-ADDRESSES)
			   WHEN (AND (NS-EQ NET SELF)
				     (EQ ADDRESS ADDR))
			     RETURN T))
		1;; Common case
0		(RETURN-FROM FOUND-HOST (VALUES HOST VALID-P))
		1;; Uninterned or wrong address for host
0		(SETF (GETHASH ADDRESS ADDRESS-HASH-TABLE) NIL)))))
    1;; OK, do it the hard way.
0    (CL:APPLY #'NETI:GET-HOST-FROM-NETWORK-ADDRESS ADDRESS SELF ADDITIONAL-ATTRIBUTES)))

1;;; This takes parsed fixnum addresses.
0(DEFMETHOD (:ADD-HOST-TO-ADDRESS-TABLE HOST-FROM-ADDRESS-MIXIN) (ADDRESS HOST)
  (FLET ((HOST-IN-REAL-NAMESPACE-P (HOST)
	   (WHEN (NOT (SEND HOST :UNINTERNED-P))	1;Real hosts, please
0	     (LET ((HOST-NAMESPACE (SEND (SEND HOST :PRIMARY-NAME) :NAMESPACE)))
	       (AND (NEQ HOST-NAMESPACE *DISTRIBUTION-NAMESPACE*)
		    (NEQ HOST-NAMESPACE *DOMAIN-NAMESPACE*)
		    (NEQ HOST-NAMESPACE DIAL:*DIALNET-NAMESPACE*))))))
    (LET ((CURRENT-ENTRY (GETHASH ADDRESS ADDRESS-HASH-TABLE)))
      1;; Only update the table when...
0      (WHEN (OR				       
	      (NULL CURRENT-ENTRY)		1;0 1nothing is currently cached
0	      1;; Uninterned objects get updated but get-host-from-address checks validity
	      ;; before using them (prevents the need or hassle of a delete method).
0	      (SEND HOST :UNINTERNED-P)
	      1;; the new object is in our namespace (we prefer that)
0	      (EQ (SEND (SEND HOST :PRIMARY-NAME) :NAMESPACE) *NAMESPACE*)
	      1;; current entry is not in a real namespace and the new0 1entry is
0	      (AND (HOST-IN-REAL-NAMESPACE-P HOST)
		   (NOT (HOST-IN-REAL-NAMESPACE-P CURRENT-ENTRY)))
	      1;; If both are in real namespaces, must be an update
0	      (AND (HOST-IN-REAL-NAMESPACE-P HOST) (HOST-IN-REAL-NAMESPACE-P CURRENT-ENTRY)))
	(SETF (GETHASH ADDRESS ADDRESS-HASH-TABLE) HOST)))))

(DEFMETHOD (:CLEAR-ADDRESS-TABLE HOST-FROM-ADDRESS-MIXIN) ()
  (CLRHASH ADDRESS-HASH-TABLE))

(COMPILE-FLAVOR-METHODS HOST-FROM-ADDRESS-MIXIN)


(DEFUN LOCAL-NETWORK-OF-TYPE (TYPE &OPTIONAL (ERROR-P T))
  ;; First try a network which the local host is on.
  ;; Then, special case the Dial and X25 network types as they may not1 0be in the namespace.
  ;; Then, one declared to be at this site, then one named here, presumed
  ;; to be a network without a particular site.
  ;; Then one anywhere in the search rules.
  (LET ((POSSIBILITIES (OR (LOOP FOR NETWORK IN *LOCAL-NETWORKS*
				 WHEN (SEND-IF-HANDLES NETWORK :NETWORK-TYPEP TYPE)
				   COLLECT NETWORK)
			   (WHEN (AND (EQ TYPE :DIAL) DIAL:*DIALNET-DIAL-NETWORK*)
			     (LIST DIAL:*DIALNET-DIAL-NETWORK*))
			   (WHEN (AND (EQ TYPE :X25) DIAL:*DIALNET-TELENET-NETWORK*)
			     (LIST DIAL:*DIALNET-DIAL-NETWORK*))
			   (SEARCHING-ONE-SITE ()
			     (FIND-OBJECTS-FROM-PROPERTY-LIST :NETWORK :TYPE TYPE
							      :SITE *LOCAL-SITE*))
			   (FIND-OBJECTS-FROM-PROPERTY-LIST :NETWORK :TYPE TYPE)
			   (WHEN ERROR-P
			     (FERROR "Could not find any local ~A network." TYPE)))))
    (FIRST POSSIBILITIES)))

;;; Pseudonets.  These are really tty lines and other things over which we have no control.
;;; For now only through the chaosnet.
(DEFPROP :GATEWAY-PSEUDONET PSEUDONET-NETWORK NETWORK-TYPE-FLAVOR)

(DEFFLAVOR PSEUDONET-NETWORK () (NETWORK))

(DEFMETHOD (:DESIRABILITY PSEUDONET-NETWORK) (&OPTIONAL IGNORE) .3)

(DEFINE-MEDIUM :PSEUDONET (:BYTE-STREAM)
  ((:SERVICE :PSEUDONET-GATEWAY)
   (:NETWORK :GATEWAY-PSEUDONET)))

(CHAOS:DEFINE-CHAOS-PROTOCOL :PSEUDONET-GATEWAY (:PSEUDONET-GATEWAY :BYTE-STREAM)
  (:INVOKE (GATEWAY-SERVICE)
   (LET ((REAL-SERVICE (FIRST (SERVICE-ACCESS-PATH-ARGS GATEWAY-SERVICE)))
	 (CONNECT-ARGS (SECOND (SERVICE-ACCESS-PATH-ARGS GATEWAY-SERVICE))))
     (LEXPR-FUNCALL #'CHAOS:OPEN-STREAM
		    (SERVICE-ACCESS-PATH-HOST GATEWAY-SERVICE)
		    (LET* ((REAL-HOST (SERVICE-ACCESS-PATH-HOST REAL-SERVICE))
			   (REAL-PROTOCOL (PROTOCOL-NAME
					    (SERVICE-ACCESS-PATH-PROTOCOL REAL-SERVICE)))
			   (PSEUDONET (SECOND
					(FIRST
					  (FIRST
					    (MEDIUM-DESCRIPTION-PARAMETERS
					      (SERVICE-ACCESS-PATH-MEDIUM REAL-SERVICE)))))))
		      (LOOP FOR (NETWORK ADDR) IN (SEND REAL-HOST :NETWORK-ADDRESSES)
			    WHEN (AND (EQ NETWORK PSEUDONET)
				      (EQ (FIRST ADDR) REAL-PROTOCOL))
			    RETURN (SECOND ADDR)
			    FINALLY (FERROR "Could not find pseudonet addresses for ~A on ~A"
					    REAL-PROTOCOL REAL-HOST)))
		    :byte-size 8.
		    CONNECT-ARGS))))

(DEFMETHOD (:PARSE-ADDRESS PSEUDONET-NETWORK) (ADDRESS)
  (LET ((=-IDX (STRING-SEARCH-CHAR #/= ADDRESS)))
    (WHEN (NULL =-IDX)
      (FERROR "Malformatted address ~S, no =." ADDRESS))
    (LIST (INTERN (SUBSTRING ADDRESS 0 =-IDX) SI:PKG-KEYWORD-PACKAGE)
	  (SUBSTRING ADDRESS (1+ =-IDX)))))

(DEFMETHOD (:UNPARSE-ADDRESS PSEUDONET-NETWORK) (ADDRESS)
  (FORMAT NIL "~A=~A" (FIRST ADDRESS) (SECOND ADDRESS)))

(COMPILE-FLAVOR-METHODS PSEUDONET-NETWORK)

;;; Serial lines as part of the network system.

;;; How to setup a host connected to the serial line of a lisp machine:

;;; Define a new network of type SERIAL-PSEUDONET.  For example,
;;; NEPONSET-SERIAL.  Make the lisp machine have host address 0 on that
;;; network.

;;; It should now work to use addresses of the form NEPONSET-SERIAL|1 in the
;;; terminal program.

;;; New hosts can be added to the namespace database with addresses on this
;;; network and will be available to the terminal program.  If the other end
;;; of the serial line speaks some other protocol than TTY-LOGIN, the
;;; address should be of the form PROTOCOL=UNIT rather than just UNIT.

;;; The baud rate and other line parameters can be set in the PERIPHERAL
;;; attribute of the local host.

(DEFPROP :SERIAL-PSEUDONET SERIAL-PSEUDONET-NETWORK NETWORK-TYPE-FLAVOR)

(DEFFLAVOR SERIAL-PSEUDONET-NETWORK () (NETWORK))

(DEFMETHOD (:PARSE-ADDRESS SERIAL-PSEUDONET-NETWORK) (STRING)
  (LET ((PROTOCOL :TTY-LOGIN)
	(START 0))
    (LET ((=-IDX (STRING-SEARCH-CHAR #/= STRING)))
      (WHEN =-IDX
	(SETQ PROTOCOL (INTERN (SUBSTRING STRING 0 =-IDX) PKG-KEYWORD-PACKAGE)
	      START (1+ =-IDX))))
    (LET ((UNIT (PARSE-NUMBER STRING START NIL 10. T)))
      (WHEN (NULL UNIT)
	(FERROR "~S does not contain a valid serial unit number." STRING))
      (LIST PROTOCOL UNIT))))

(DEFMETHOD (:UNPARSE-ADDRESS SERIAL-PSEUDONET-NETWORK) (ADDRESS)
  (FORMAT NIL "~A=~D" (FIRST ADDRESS) (SECOND ADDRESS)))

(DEFMETHOD (:DESIRABILITY SERIAL-PSEUDONET-NETWORK) (&OPTIONAL IGNORE) .5)

(DEFMETHOD (:DEFAULT-SERVICES SERIAL-PSEUDONET-NETWORK) ()
  '((:LOGIN :SERIAL-PSEUDONET :TTY-LOGIN)))

(COMPILE-FLAVOR-METHODS SERIAL-PSEUDONET-NETWORK)

(DEFINE-MEDIUM :SERIAL-PSEUDONET (:BYTE-STREAM)
  (((:NETWORK :SERIAL-PSEUDONET)) (SERVICE-ACCESS-PATH &REST IGNORE)
   (MULTIPLE-VALUE-BIND (HOST NIL ADDRESSES)
       (DECODE-SERVICE-ACCESS-PATH-FOR-MEDIUM SERVICE-ACCESS-PATH)
     (LET* ((PROTOCOL (PROTOCOL-NAME (SERVICE-ACCESS-PATH-PROTOCOL SERVICE-ACCESS-PATH)))
	    (UNITS (LOOP FOR (HOST-PROTOCOL UNIT) IN ADDRESSES
			 WHEN (EQ HOST-PROTOCOL PROTOCOL)
			 COLLECT UNIT)))
       (LOOP FOR (UNIT NEXT-UNIT) ON UNITS
	     DO (CATCH-ERROR-RESTART-IF (NOT (NULL NEXT-UNIT))
					(ERROR "Access ~S on unit ~D instead." HOST NEXT-UNIT)
		  (LET ((PERIPHERAL (FIND-PERIPHERAL :SERIAL-PSEUDONET *LOCAL-HOST*
						     :UNIT UNIT)))
		    ;; Pass in specification of terminal type to login program if given.
		    (WHEN (AND PERIPHERAL (EQ PROTOCOL :TTY-LOGIN))
		      (LET ((TERMINAL-SIMULATOR (GET (LOCF (PERIPHERAL-DEVICE-OPTIONS
							     PERIPHERAL))
						     :TERMINAL-TYPE)))
			(WHEN TERMINAL-SIMULATOR
			  (LET ((PLIST (LOCF (NETI:SERVICE-ACCESS-PATH-ARGS
					       SERVICE-ACCESS-PATH))))
			    (UNLESS (GET PLIST :TERMINAL-SIMULATOR)
			      (PUTPROP PLIST TERMINAL-SIMULATOR :TERMINAL-SIMULATOR))))))
		    (RETURN
		      (lisp:apply
			#'SI:MAKE-SERIAL-STREAM
			:UNIT UNIT
			:BAUD (OR (AND PERIPHERAL
				       (GET (LOCF (PERIPHERAL-INTERFACE-OPTIONS
						    PERIPHERAL))
					    :BAUD))
				  9600.)
			;; handle other user-supplied options  -- Chucko 12 Sep 89
			;; Handle them correctly -- Reti 11/13/90
			(cond (peripheral
			       ;;The namespace editor doesn't include an option in
			       ;;device-options if its value is NIL.
			       (loop with device-options = (peripheral-device-options peripheral)
				     for option in '(:number-of-data-bits
						      :number-of-stop-bits
						      :parity
						      :generate-xon-xoff
						      :xon-xoff-protocol)
				     collect option
				     collect (getf device-options option))))
			))))
	     FINALLY (FERROR "Unable to access ~S any via serial line." HOST)))))
  ((:SERVICE :BYTE-STREAM-GATEWAY) (:MEDIUM :SERIAL-PSEUDONET)))

(DEFINE-PERIPHERAL-OPTION-PARSER SERIAL-TERMINAL-TYPE (VALUE)
  VALUE)

(DEFINE-PERIPHERAL-OPTION-PARSER PARITY (VALUE)
  VALUE)

(DEFINE-PERIPHERAL-DEVICE-TYPE :SERIAL-PSEUDONET
			       (:TERMINAL-TYPE SERIAL-TERMINAL-TYPE)
  (:NUMBER-OF-DATA-BITS :INTEGER :MEMBER #10R(5 6 7 8))
  (:NUMBER-OF-STOP-BITS :INTEGER :MEMBER #10R(1 2))
  (:PARITY PARITY)
  )




;;; Part of dialnet needed during booting.
(DEFPROP :DIAL DIAL:DIAL-NETWORK NETWORK-TYPE-FLAVOR)

(DEFFLAVOR DIAL:DIAL-NETWORK-MIXIN ((DIAL:DIALNET-INTERFACES NIL)) ()
  (:REQUIRED-FLAVORS NETWORK)
  :GETTABLE-INSTANCE-VARIABLES)

(DEFFLAVOR DIAL:DIAL-NETWORK () (DIAL:DIAL-NETWORK-MIXIN NETWORK))

;;; These two methods are here for speed and to avoid namespace validation.

(DEFMETHOD (:TYPE DIAL:DIAL-NETWORK) () ':DIAL)

(DEFMETHOD (:NETWORK-TYPEP DIAL:DIAL-NETWORK) (TYPE) (EQ TYPE ':DIAL))

(COMPILE-FLAVOR-METHODS DIAL:DIAL-NETWORK)

(DEFINE-PERIPHERAL-OPTION-PARSER :UNIT-SPEC(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") 0(VALUE)
  (LET ((NUM (SI:PARSE-NUMBER VALUE 0 (CL:LENGTH VALUE) 10)))
    (IF NUM NUM VALUE)))

(DEFINE-PERIPHERAL-INTERFACE-TYPE :UNIT :SERIAL
  (:UNIT :UNIT-SPEC)
  (:BAUD :INTEGER :MEMBER #10R (300 600 1200 1275 1800 2000 2400 3600 4800 7200 7512 9600 12000 14400 19200 38400 56000 57600)))

(DEFINE-PERIPHERAL-OPTION-PARSER :BOOLEAN (VALUE)
  (STRING-EQUAL VALUE "YES"))

(DEFINE-PERIPHERAL-OPTION-PARSER modem-model (VALUE)
  (INTERN (STRING-UPCASE VALUE) PKG-KEYWORD-PACKAGE))

(DEFINE-PERIPHERAL-OPTION-PARSER phone-number (VALUE)
  VALUE) 

(DEFINE-PERIPHERAL-DEVICE-TYPE :MODEM
  (:MODEL modem-model)
  (:PHONE-NUMBER phone-number)
  (:AUTOANSWER :BOOLEAN))



;;; Same goes for these.

(DEFPROP :X25 DIAL:X25-NETWORK NET:NETWORK-TYPE-FLAVOR)

(DEFFLAVOR DIAL:X25-NETWORK
	((DIAL:L3-MUX NIL)
	 (DIAL:X25-INTERFACES NIL))
	(DIAL:DIAL-NETWORK-MIXIN NETWORK)
  :SETTABLE-INSTANCE-VARIABLES)

(COMPILE-FLAVOR-METHODS DIAL:X25-NETWORK)

(DEFINE-PERIPHERAL-DEVICE-TYPE :PAD
  (:ADDRESS :STRING)
  (:AUTOANSWER :BOOLEAN))


1;;; Some others

0(DEFINE-PERIPHERAL-DEVICE-TYPE :NONE)

1;;; Since the namespace editor is the only one that cares about these, they can have things
;;; that come from cl-neti.

0(DEFINE-PERIPHERAL-DEVICE-TYPE :OTHER
  (:PERIPHERAL-OPTIONS CL-NETI::BLANK-PERIPHERAL))

(DEFINE-PERIPHERAL-OPTION-PARSER :ENABLE-DISABLE-PERMIT (STRING)
  (COND ((STRING-EQUAL STRING "Enable") T)
	((STRING-EQUAL STRING "Disable") NIL)
	((STRING-EQUAL STRING "Permit") :PERMIT)
	(T (FERROR "/"~A/" is not one of Enable, Disable, or Permit." STRING))))

(DEFINE-PERIPHERAL-OPTION-PARSER :HOST (VALUE)
  (PARSE-HOST VALUE))

(DEFINE-PERIPHERAL-DEVICE-TYPE :SLIP-INTERFACE
  (:INTERNET CL-NETI::INTERNET-ADDRESS)
  (:NUMBER-OF-DATA-BITS :INTEGER)
  (:NUMBER-OF-STOP-BITS :INTEGER)
  (:PARITY :KEYWORD)
  (:RTS-CTS-PROTOCOL :BOOLEAN)
  (:COMPRESS-TCP-HEADERS :ENABLE-DISABLE-PERMIT)
  (:MODEM-PROTOCOL :KEYWORD)
  (:LOGIN-PROTOCOL :KEYWORD)
  (:GATEWAY :HOST))

(DEFINE-PERIPHERAL-DEVICE-TYPE :SYNC-INTERFACE
  (:CHAOS CL-NETI::CHAOS-ADDRESS)
  (:INTERNET CL-NETI::INTERNET-ADDRESS)
  (:CLOCK-MASTER :BOOLEAN)
  (:CLOCK-CONSTANT :INTEGER)
  (:RTS-CTS-PROTOCOL :BOOLEAN))

(DEFINE-PERIPHERAL-DEVICE-TYPE :SDLC-INTERFACE
  (:TYPE :KEYWORD)
  (:SNA CL-NETI::SNA-ADDRESS)
  (:ADDRESS CL-NETI::SDLC-STATION-ADDRESS)
  (:RTS-CTS-PROTOCOL :BOOLEAN))


(DEFINE-PERIPHERAL-DEVICE-TYPE :KANJI-TABLET )

(DEFINE-PERIPHERAL-OPTION-PARSER GRAPHICS-TABLET (VALUE)
  (LIST
    (INTERN (STRING-UPCASE
	      (SUBSTRING VALUE 0 (STRING-SEARCH #\SPACE VALUE))) PKG-KEYWORD-PACKAGE)
    (SUBSTRING VALUE (1+ (STRING-SEARCH #\SPACE VALUE)) (CL:LENGTH VALUE))))

(DEFINE-PERIPHERAL-DEVICE-TYPE :GRAPHICS-TABLET
  (:HARDWARE-TYPE GRAPHICS-TABLET)
  (:X-SIZE :INTEGER)
  (:Y-SIZE :INTEGER)
  (:TRACKING-ENABLE :BOOLEAN))



;;;; Initializations

(DEFVAR *NETWORK-ENABLED* NIL
  "NIL meaning entire network disabled,
   :PRIMARY if only the primary network is enabled, or
   T if the entire network is enabled.")

(DEFUN RESET ()
  (PROCESS:WITH-NO-OTHER-PROCESSES
    (SETQ *NETWORK-ENABLED* NIL)
    (DOLIST (NETWORK *LOCAL-NETWORKS*)
      (SEND NETWORK :RESET))
    (DOLIST (INTERFACE *INTERFACES*)
      (SEND INTERFACE :DISABLE))
    (DOLIST (INTERFACE *INTERFACES*)
      (SEND INTERFACE :RESET))
    ;; [Release 6 didn't do this.]
    (DOLIST (INTERFACE *INTERFACES*)
      (SEND INTERFACE :KILL))
    (SETQ *INTERFACES* NIL)
    (RESET-PACKET-BUFFERS)
    NIL))

1;;; In order to ensure that serial is shutdown before the network, we put it here.  It isn't
;;; pretty but it is the only way to ensure that serial is initialized first
0(defun 2turn-off-network 0()
  (when (fboundp 'SERIAL:SERIAL-INITIALIZATION)
    (SERIAL:SERIAL-INITIALIZATION))
  (RESET))

;;; This might try to use the network
(ADD-INITIALIZATION "Forget All File Access Paths" '(FS:FORGET-ALL-FILE-ACCESS-PATHS)
		    '(:SYSTEM-SHUTDOWN))

(ADD-INITIALIZATION "Turn off network" '(RESET) '(:SYSTEM-SHUTDOWN))

(ADD-INITIALIZATION "Turn off network" '(turn-off-network) '(:SYSTEM :NORMAL))

(DEFUN ENABLE-PRIMARY-NETWORK (PRIMARY-NETWORK)
  (WHEN (NULL *INTERFACES*)
    (INITIALIZATIONS 'ADD-INTERFACES-INITIALIZATION-LIST T))
  (DOLIST (INTERFACE *INTERFACES*)
    (SEND INTERFACE :RESET))
  (ENABLE-PACKET-BUFFERS)
  (DOLIST (INTERFACE *INTERFACES*) (SEND INTERFACE :ENABLE))
  (SEND PRIMARY-NETWORK :ENABLE)
  (SETQ *NETWORK-ENABLED* :PRIMARY))

;;; This is needed in the case where the user has given us an address and network in the FEP
;;; but we don't have an address in the host object.  We have to jam one in and tell them that
;;; something is not right.  
(DEFUN ADD-OTHER-PRIMARY-NETWORKS ()
  (LOOP WITH NAMESPACE-ADDRESSES = (SEND *LOCAL-HOST* :ADDRESS)
	FOR ENTRY IN *PARSED-PRIMARY-NETWORK-DATA*
	AS TYPE = (PRIMARY-ADDRESS-NETWORK-TYPE ENTRY)
	AS ADDRESS = (PRIMARY-ADDRESS-ADDRESS-STRING ENTRY)
	AS NETWORK = (LOCAL-NETWORK-OF-TYPE TYPE NIL)	;no errors
	AS INTERFACE = (PRIMARY-ADDRESS-INTERFACE-NAME ENTRY)
	;; Check for networks and addresses specified in the FEP but not in the host object
	WHEN (AND NETWORK
		  (NOT (LOOP FOR (NET ADDR INT-NAME) IN NAMESPACE-ADDRESSES
			     WHEN (AND (NS-EQ NETWORK NET)
				       (STRING-EQUAL ADDRESS ADDR)
				       ;; Check to see that the interface names match
				       (COND ((AND INTERFACE INT-NAME)
					      (STRING-EQUAL (FIRST INT-NAME) INTERFACE))
					     ;; Allow one in the namespace but not in the FEP
					     ((AND INT-NAME (NULL INTERFACE)) T)
					     (INTERFACE NIL)
					     (T T)))
			       RETURN T)))
	  DO
	    ;; Add or update the address
	    (MULTIPLE-VALUE-BIND (NAME PLIST)
		(IF (SEND *LOCAL-HOST* :UNINTERNED-P)
		    (VALUES (SEND *LOCAL-HOST* :NAME) (SEND *LOCAL-HOST* :PROPERTY-LIST))
		    (SEND *LOCAL-HOST* :NAMESPACE-VIEW *NAMESPACE*))
	      (LET (UPDATED ADDRESSES)
		(LOOP FOR (NET ADDR INT-NAME) IN (GETF PLIST :ADDRESS)
		      ;; Update an existing entry
		      WHEN (AND (NS-EQ NETWORK NET)
				(STRING-EQUAL ADDRESS ADDR))
			DO (SETQ UPDATED T)
			   (PUSH (LIST NETWORK ADDRESS (LIST INTERFACE)) ADDRESSES)
		      ELSE DO
			     (PUSH (LIST NET ADDR INT-NAME) ADDRESSES))
		(UNLESS UPDATED
		  (PUSH (LIST NETWORK ADDRESS (IF INTERFACE (LIST INTERFACE) NIL))
			ADDRESSES))
		(SETF (GETF PLIST :ADDRESS) ADDRESSES))
	      (IF (SEND *LOCAL-HOST* :UNINTERNED-P)
		  ;; Make a new uninterned object
		  (SET-LOCAL-HOST (MAKE-OBJECT-FROM-PROPERTY-LIST :HOST NAME PLIST))
		  ;; Update the object
		  (UPDATE-OBJECT-PERMANENTLY :HOST *NAMESPACE* NAME PLIST T))
	      ;; Reset the missing network
	      (SEND NETWORK :RESET)
	      ;; notify the user
	      (TV:NOTIFY
		NIL
		"The local host ~A did not have address ~A on network ~A ~:[with name ~A ~]~
		 but it was specified in the FEP. The namespace needs to be fixed."
		*LOCAL-HOST* ADDRESS TYPE (NOT INTERFACE) INTERFACE))))

(DEFUN ENABLE-OTHER-NETWORKS (PRIMARY-NETWORK)
  (WHEN (NOT (MEMQ PRIMARY-NETWORK *LOCAL-NETWORKS*))
    (SEND PRIMARY-NETWORK :RESET))
  (ADD-OTHER-PRIMARY-NETWORKS)
  (DOLIST (NETWORK *LOCAL-NETWORKS*)
    (UNLESS (EQ NETWORK PRIMARY-NETWORK)
      (SEND NETWORK :ENABLE)))
  (SETQ *NETWORK-ENABLED* T))


(DEFUN ENABLE ()
  (PROCESS:WITH-NO-OTHER-PROCESSES
    (WHEN (NULL *INTERFACES*)
      (INITIALIZATIONS 'ADD-INTERFACES-INITIALIZATION-LIST T)
      (DOLIST (INTERFACE *INTERFACES*)
	;; [Not clear why this is desirable/needed.  On OBS, this stuff
	;; a -1 in %net-free-list, undoing much of what
	;; enable-packet-buffers tries to do.]
	(SEND INTERFACE :RESET)))
    (ENABLE-PACKET-BUFFERS)
    (DOLIST (INTERFACE *INTERFACES*)
      (SEND INTERFACE :ENABLE))
    (DOLIST (NETWORK *LOCAL-NETWORKS*)
      (SEND NETWORK :ENABLE))
    (SETQ *NETWORK-ENABLED* T)
    NIL))

(DEFUN GENERAL-NETWORK-RESET ()
  (LET-IF (PROGN
	    #+IMach (SYS:SYSTEM-CASE (SOLSTICE T) (OTHERWISE NIL))
	    #-IMach NIL)
	  ((DEBUG-IO "No console"))
    #+IMach
    (SYSTEM-CASE
      ((SOLSTICE DOMINO VLM)
	(WHEN (AND (NOT (NULL *MAIN-CONSOLE*))
		   (OPERATION-HANDLED-P *MAIN-CONSOLE* 'X-SCREEN:X-CONSOLE-SHUTDOWN)
		   #+VLM (NOT (EQ (X-SCREEN::X-CONSOLE-PROTOCOL *MAIN-CONSOLE*) :VLM)))
	  ;; Make sure the console gets shut down.
	  (X-SCREEN:X-CONSOLE-SHUTDOWN *MAIN-CONSOLE*)))
      (OTHERWISE NIL))
    (RESET)					;turn off all interfaces
    (RESET-ALL-HOST-AVAILABILITIES)		;make all availability info old.
    (RESET-ALL-NAMESPACE-SERVER-ACCESS-PATHS)	;lethe for the namespace system
    (RESET-ALL-NAMESPACE-ACCESS-PATHS)
    (FS:FORGET-ALL-FILE-ACCESS-PATHS)		;lethe for the f-a-p's
    (INITIALIZE-NAMESPACES-AND-NETWORK)
    (ENABLE)					;turn us back on ...
    #+IMach
    (SYSTEM-CASE
      (SOLSTICE
	;; Restart the host applications, which will buy us a new console.
	(SETF (SI:EMB-RESTART-APPLICATIONS) 1))
      (OTHERWISE NIL)))
  (ENCACHE-PROPERTY-LISTS-IN-BACKGROUND))

(DEFUN DISABLE ()
  (PROCESS:WITH-NO-OTHER-PROCESSES
    (SETQ *NETWORK-ENABLED* NIL)
    (COMMENT RELEASE-7
	     (DOLIST (PROTOCOL *PROTOCOLS*)
	       (SEND PROTOCOL :SEND-IF-HANDLES :DISABLE)))
    (DOLIST (NETWORK *LOCAL-NETWORKS*)
      (SEND NETWORK :SEND-IF-HANDLES :DISABLE))
    (DOLIST (INTERFACE *INTERFACES*)
      (SEND INTERFACE :DISABLE))
    NIL))

;;; Useful utility functions for network and interface implementations.

(DEFUN LOCAL-NETWORKS ()
  (SI:ELIMINATE-DUPLICATES
    (MAPCAR #'FIRST (SEND *LOCAL-HOST* :NETWORK-ADDRESSES))))


;;;
;;; match addresses up with interfaces.  an interface will be assigned a
;;; network/address if:
;;;   the address specifies a name that matches the interface name, or
;;;   the address is matched explicitly by an interface, or,
;;;   there's exactly one unmatched address/interface pair.
;;;
;;; error conditions:
;;;   no interface says it supports that address
;;;   some interface claims to support an address which we don't have
;;;   two interfaces bid for the same address, either by explicitly
;;;     requesting that address, or by name
;;;   after matching specific interfaces, more than one more unspecific interface 
;;;     left over, and one or more addresses
;;;   after matching specific interfaces, more than one address leftover, and
;;;     one or more unspecific interfaces
;;;
;;; Note that it is *not* an error to have leftover interfaces after going thru 
;;;   this process iff all matches were done on the basis of named address/interface
;;;   pairs.  This is so you won't get nasty warnings in the case where you've got
;;;   multiple interfaces, but don't want to use them all right now.  This is an
;;;   expecially popular scenario on solstii running distribution worlds.
;;;
(DEFUN FIND-NETWORK-INTERFACES (NETWORK)
  (FLET ((INTERFACE-NAME-MATCH-P (INTERFACE NAME)
	   (AND (NETWORK-INTERFACE-NAME INTERFACE)
		NAME
		(STRING-EQUAL (NETWORK-INTERFACE-NAME INTERFACE)
			      (STRING NAME))))
	 (UNIQUE-ASSOC (ITEM LIST)
	   (LOOP FOR ELT IN LIST
		 WITH MATCHED-ELT
		 WITH N-MATCHES = 0
		 WHEN (EQ ITEM (FIRST ELT))
		   DO (INCF N-MATCHES)
		      (SETQ MATCHED-ELT ELT)
		 FINALLY (RETURN (AND (= N-MATCHES 1) MATCHED-ELT)))))
    (LET* ((UNMATCHED-ADDRESSES 
	     (LOOP FOR ELT IN (SEND *LOCAL-HOST* :ADDRESS)
		   FOR (NET) = ELT
		   WHEN (EQ NET NETWORK)
		     COLLECT ELT))
	   (UNMATCHED-INTERFACES (CL:COPY-LIST *INTERFACES*))
	   (MATCHED-INTERFACE-ADDRESS-PAIRS NIL)
	   (ALL-MATCHES-EXPLICIT-P NIL))	; if all matches based on names

      ;; first try to match addresses to interfaces that specifically
      ;; request them.  walk thru all addresses, looking for ones that
      ;; explicitly match exactly one interface.  do the same thing for
      ;; addresses; make a list of all the ones that match exactly one
      ;; interface.  using those two lists we can tell which explcit
      ;; matches we have.  

      (LET ((ADDRESSES-MATCHING-INTERFACES NIL)
	    (INTERFACES-MATCHING-ADDRESSES NIL))
	(LOOP FOR ADDRESS-ELT IN UNMATCHED-ADDRESSES 
	      FOR (NETWORK ADDRESS (NAME)) = ADDRESS-ELT DO
	  (LOOP FOR INTERFACE IN UNMATCHED-INTERFACES
		FOR SUPPORTED = (SEND INTERFACE ':NETWORK-SUPPORTED NETWORK)
		FOR SUPPORTED-ADDRESS = (UNLESS (SYMBOLP SUPPORTED)
					  (SEND NETWORK ':UNPARSE-ADDRESS SUPPORTED))
		WHEN (OR (AND SUPPORTED-ADDRESS
			      (STRING-EQUAL SUPPORTED-ADDRESS ADDRESS))
			 (INTERFACE-NAME-MATCH-P INTERFACE NAME))
		  DO (PUSH (LIST ADDRESS-ELT INTERFACE) ADDRESSES-MATCHING-INTERFACES)))
	(LOOP FOR INTERFACE IN UNMATCHED-INTERFACES DO
	  (LOOP FOR ADDRESS-ELT IN UNMATCHED-ADDRESSES 
		FOR (NETWORK ADDRESS (NAME)) = ADDRESS-ELT
		FOR SUPPORTED = (SEND INTERFACE ':NETWORK-SUPPORTED NETWORK)
		FOR SUPPORTED-ADDRESS = (UNLESS (SYMBOLP SUPPORTED)
					  (SEND NETWORK ':UNPARSE-ADDRESS SUPPORTED))
		WHEN (OR (AND SUPPORTED-ADDRESS
			      (STRING-EQUAL SUPPORTED-ADDRESS ADDRESS))
			 (INTERFACE-NAME-MATCH-P INTERFACE NAME))
		  DO (PUSH (LIST INTERFACE ADDRESS-ELT) INTERFACES-MATCHING-ADDRESSES)))

	;; now go thru both lists looking for for unique matches
	(LOOP FOR INTERFACE-ADDRESS-ELT IN INTERFACES-MATCHING-ADDRESSES
	      FOR (INTERFACE MATCHING-ADDRESS-ELT) = INTERFACE-ADDRESS-ELT
	      FOR ADDRESS-INTERFACE-ELT = 
		  (UNIQUE-ASSOC MATCHING-ADDRESS-ELT ADDRESSES-MATCHING-INTERFACES)
	      FOR (ADDRESS-ELT MATCHING-INTERFACE) = ADDRESS-INTERFACE-ELT
	      WHEN (AND ADDRESS-ELT
			(UNIQUE-ASSOC MATCHING-INTERFACE INTERFACES-MATCHING-ADDRESSES))
		DO ;; an exact match!  record it
		  (PUSH (LIST INTERFACE ADDRESS-ELT) MATCHED-INTERFACE-ADDRESS-PAIRS)
		   ;; remove the address entry and interface from their respective
		   ;; unmatched lists
		  (SETQ UNMATCHED-ADDRESSES (CL:DELETE ADDRESS-ELT UNMATCHED-ADDRESSES))
		  (SETQ UNMATCHED-INTERFACES (CL:DELETE INTERFACE UNMATCHED-INTERFACES))
		  (SETQ INTERFACES-MATCHING-ADDRESSES 
			(CL:DELETE INTERFACE-ADDRESS-ELT INTERFACES-MATCHING-ADDRESSES))
		  (SETQ ADDRESSES-MATCHING-INTERFACES 
			(CL:DELETE ADDRESS-INTERFACE-ELT ADDRESSES-MATCHING-INTERFACES)))

	;; we've found all the unambiguous matches.  gripe about
	;; ambiguities we've turned up.

	(LOOP FOR (ADDRESS-ELT INTERFACE) IN ADDRESSES-MATCHING-INTERFACES
	      DO (FORMAT ERROR-OUTPUT 
			 "~&Address ~{~A|~A ~:[~;~:*(~{~A~}) ~]~}ambiguously matches interface ~S"
			 ADDRESS-ELT INTERFACE))
	(LOOP FOR (INTERFACE ADDRESS-ELT) IN INTERFACES-MATCHING-ADDRESSES
	      DO (FORMAT ERROR-OUTPUT
			 "~&Interface ~S ambiguously matches address ~{~A|~A ~:[~;~:*(~{~A~})~]~}"
			 INTERFACE ADDRESS-ELT)))

      ;; whew.  now walk thru remaining unmatched addresses, finding
      ;; interfaces that claim to support them.

      (IF (NULL UNMATCHED-ADDRESSES)
	  (SETQ ALL-MATCHES-EXPLICIT-P T)	; say all matches were made explicitly, 
						;  no guesswork
	  (LOOP WHILE
		  (LOOP NAMED FIND-A-MATCH
			FOR ADDRESS-ELT IN UNMATCHED-ADDRESSES
			FOR (NETWORK) = ADDRESS-ELT DO 
		    (LOOP FOR INTERFACE IN UNMATCHED-INTERFACES 
			  FOR SUPPORTED = (SEND INTERFACE ':NETWORK-SUPPORTED NETWORK)
			  WHEN (AND SUPPORTED (NEQ SUPPORTED ':UNSUPPORTED))
			    DO (PUSH (LIST INTERFACE ADDRESS-ELT) 
				     MATCHED-INTERFACE-ADDRESS-PAIRS)
			       (SETQ UNMATCHED-ADDRESSES
				     (CL:DELETE ADDRESS-ELT UNMATCHED-ADDRESSES)) 
			       (SETQ UNMATCHED-INTERFACES
				     (CL:DELETE INTERFACE UNMATCHED-INTERFACES))
			       (RETURN-FROM FIND-A-MATCH T)))))

      ;; processed all 'default' type matches.  if leftover addresses or
      ;; interfaces, gripe as apropriate

      (LOOP FOR (NETWORK ADDRESS (NAME)) IN UNMATCHED-ADDRESSES
	    DO (FORMAT ERROR-OUTPUT 
		       "~&No interfaces remain to assign to ~A|~A ~:[~;~:*(~A)~]"
		       NETWORK ADDRESS NAME))
      (UNLESS ALL-MATCHES-EXPLICIT-P
	(LOOP FOR INTERFACE IN UNMATCHED-INTERFACES
	      FOR SUPPORTED = (SEND INTERFACE ':NETWORK-SUPPORTED NETWORK)
	      WHEN (AND SUPPORTED (NEQ SUPPORTED ':UNSUPPORTED))
		DO (FORMAT ERROR-OUTPUT
			   "~&No addresses remain on network ~A to assign to interface ~S"
			   NETWORK INTERFACE)
		   (UNLESS (SYMBOLP SUPPORTED)
		     (FORMAT ERROR-OUTPUT
			     "~&   which claims to support network ~A at address ~A"
			     NETWORK (SEND NETWORK ':UNPARSE-ADDRESS SUPPORTED)))))

      ;; finally, walk thru any matches that we accumulated, and connect
      ;; the network to the interface.
    
      (LOOP FOR (INTERFACE (NETWORK ADDRESS)) IN MATCHED-INTERFACE-ADDRESS-PAIRS DO
	(SEND INTERFACE ':ADD-NETWORK NETWORK (SEND NETWORK ':PARSE-ADDRESS ADDRESS)))
      ;; this kludge is for (:initialize-routing ip-protocol), which expects back
      ;; a list of (interface . parsed-address)
      (LOOP FOR (I (N A)) IN MATCHED-INTERFACE-ADDRESS-PAIRS
	    COLLECT (CONS I (SEND N ':PARSE-ADDRESS A))))))

(DEFUN FIND-NETWORK-PERIPHERALS (NETWORK &OPTIONAL ACCEPTABLE-TYPES)
  (LOOP FOR PERIPHERAL IN (SEND *LOCAL-HOST* :GET :PERIPHERAL)
	WHEN (OR (NULL ACCEPTABLE-TYPES) (MEMQ (FIRST PERIPHERAL) ACCEPTABLE-TYPES))
	WHEN (LOOP FOR (MY-NET NIL MY-INTERFACE)
		       IN (SEND LOCAL-HOST :NETWORK-ADDRESSES)
		   DO (IGNORE ACCEPTABLE-TYPES)
		   THEREIS (AND (EQ NETWORK MY-NET)
				(OR (NULL MY-INTERFACE)
				    (EQ MY-INTERFACE (GET PERIPHERAL :NAME)))))
	COLLECT PERIPHERAL))

;;; WITH-CONNECTION-RETRYING implementation notes:
;;; The variables used as HOST and CONTACT-NAME are defined outside
;;; the macro, usually arguments to a function (e.g., CONNECT, SIMPLE).
;;; The variable used as TRY-REASON has lexical scoping within the body of
;;; the macro only.  It has the following interesting values (keywords):
;;; 	:LONGER-TIMEOUT -- update some counter which determines how long to wait
;;; 	:WAIT-INDEFINITELY -- do not timeout, just keep waiting.
;;; The macro sets up restart handlers for the following conditions:
;;; 	general connection error: offers to periodically retry
;;; 	not responding: offers to wait indefinitely
;;; 	not responding: offers to wait with a longer timeout.  Note:
;;; 	  this restart used to be valid for a general connection error. 
(DEFMACRO WITH-CONNECTION-RETRYING ((HOST CONTACT-NAME TRY-REASON) &BODY BODY &ENVIRONMENT ENV
				    )
  (ONCE-ONLY (HOST CONTACT-NAME &ENVIRONMENT ENV)
    `(LET ((.TRY-REASON-INTERNAL. :FIRST-TIME))
       (ERROR-RESTART (CONNECTION-ERROR
			"Periodically retry connection for ~A to ~A until success"
			,CONTACT-NAME ,HOST)
	 (OR .TRY-REASON-INTERNAL. (SETQ .TRY-REASON-INTERNAL. :PERIODICALLY-RETRY))
	 (ERROR-RESTART (HOST-NOT-RESPONDING-DURING-CONNECTION
			  "Retry connection for ~A to ~A waiting indefinitely"
			  ,CONTACT-NAME ,HOST)
	   (OR .TRY-REASON-INTERNAL. (SETQ .TRY-REASON-INTERNAL. :WAIT-INDEFINITELY))
	   (ERROR-RESTART (HOST-NOT-RESPONDING-DURING-CONNECTION
			    "Retry connection for ~A to ~A with longer timeout"
			    ,CONTACT-NAME ,HOST)
	     (OR .TRY-REASON-INTERNAL. (SETQ .TRY-REASON-INTERNAL. :LONGER-TIMEOUT))
	     (DO () (NIL)
	       (CONDITION-CASE-IF (EQ .TRY-REASON-INTERNAL. :PERIODICALLY-RETRY) ()
		   (LET ((,TRY-REASON .TRY-REASON-INTERNAL.))
		     (UNLESS (EQ .TRY-REASON-INTERNAL. :PERIODICALLY-RETRY)
		       (SETQ .TRY-REASON-INTERNAL. NIL))
		     (RETURN (PROGN ,@BODY)))
		 (CONNECTION-ERROR (PROCESS-SLEEP (* 60. 15.) "Retry Wait"))))))))))


;;; Encapsulate network progress notes
(DEFMACRO NOTING-NETWORK-PROGRESS (SPECS &BODY BODY)
  (DECLARE (ARGLIST (NAME &OPTIONAL (VARIABLE 'TV:*CURRENT-PROGRESS-NOTES*)
				    (PROCESS *CURRENT-PROCESS*))
		    &BODY BODY))
  `(TV:NOTING-PROGRESS-IF (TV:SHOW-PROGRESS-NOTE :NETWORK) ,SPECS
     ,@BODY))


(DEFGENERIC SU:WITH-ACCESS-PATH-LOGGING-INTERNAL (ACCESS-PATH CONTINUATION)
  (DECLARE (SYS:DOWNWARD-FUNARG CONTINUATION)))

(DEFMACRO SU:WITH-ACCESS-PATH-LOGGING ((ACCESS-PATH) &BODY BODY)
  `(SU:WITH-ACCESS-PATH-LOGGING-INTERNAL ,ACCESS-PATH #'(LAMBDA () ,@BODY)))

(DEFFLAVOR SU:ACCESS-PATH-LOG-MIXIN () ()
  :ABSTRACT-FLAVOR)

(DEFMETHOD (SU:WITH-ACCESS-PATH-LOGGING-INTERNAL SU:ACCESS-PATH-LOG-MIXIN :DEFAULT)
	   (CONTINUATION)
  (FUNCALL CONTINUATION))



;; Values can be T, :NOTIFY, or NIL.  These values are compatible with the old TELNET-SERVER-ON.
;;   NIL means that it is ok to accept remote logins only when no user is logged in locally.  A notification is printed.
;;   :NOTIFY means that it is ok to accept remote logins at any time.  A notification is printed.
;;   T means that it is ok to accept remote logins at any time.  No notification is printed.

(DEFVAR REMOTE-LOGIN-ON NIL)

;; Call this if you want to enable remote login from the network on this user machine.
;; Remote login is always enabled for server machines.

(DEFUN REMOTE-LOGIN-ON (&OPTIONAL (MODE T)) (SETQ REMOTE-LOGIN-ON MODE))

(DEFUN (REMOTE-LOGIN-ON :UNDO-FUNCTION) (FORM)
  (IGNORE FORM)
  `(SETQ REMOTE-LOGIN-ON ',REMOTE-LOGIN-ON))

