;;; -*- Mode: LISP; Package: neti; Base: 10; Lowercase: T; Syntax: zetalisp -*-
;; Internet Domain stuff
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Definitions

;;; Definitions

(defvar *log-domain-requests* ())

(defvar *debug-domain-requests* ())

;;;
;;; This variable determines whether the domain resolver is active.
;;;
;;; Valid states are:
;;;   NIL, :INITIALIZED                    Freshly booted, or reset.  The site server list 
;;;                                          has been created, and the recursion flag is
;;;                                          set.  We'll turn on or off the first time
;;;                                          we get a real request.
;;;   :ENABLED                             The resolver is on; we have talked to at least
;;;                                          one server, either local or remote.
;;;   :DISABLED                            The resolver is off.  It will go back to 
;;;                                          :INITIALIZED if we warm-boot, 
;;;                                          reset-all-host-availabilities, or init by hand
;;;   :PERMANENTLY-DISABLED                The resolver is off to stay.  It will not come
;;;                                          back on unless we (domain-resolver-on) or
;;;                                          do something else to set it to another value.
;;;
(defvar *domain-resolver-status* () "The state of the Domain name resolver")

;;;
;;; This stores the state of *host-availability-boot-count* last time we looked.
;;; If we bump that, we'll reevaluate the state of the resolver.
;;;
(defvar *domain-host-availability-boot-count* 0)

;;;
;;; This controls the action of domain-connection-failure-handler when dealing with 
;;; connection failures to site resolvers.  If t, it causes the resolver on the local 
;;; machine to try to go standalone.  Bind it NIL if you want to avoid trying things
;;; standalone when servers fail.
;;;
(defvar *domain-site-resolver-error-implies-standalone* t)

(defvar *domain-resolver-on* ())

(defvar *domain-resolver-reset* ())

(defvar *domain-site-servers* ())

(defvar *domain-default-recursion-request* ())

(defun domain-resolver-on (&optional (on t))
  (setq *domain-resolver-status*
	(if (and on (memq *domain-resolver-status* '(:enabled :initialized)))
	    *domain-resolver-status*
	    ':initialized)))

(defun domain-resolver-off (&optional (permanently nil))
  (setq *domain-resolver-status* 
	(if (or permanently (eq *domain-resolver-status* ':permanently-disabled))
	    ':permanently-disabled
	    ':disabled)))

(defvar *domain-opcodes* '((0 . :query) 
				 (1 . :iquery) 
				 (2 . :cquerym)
				 (3 . :cqueryu)))

(defvar *domain-rcodes*
	      '((0 . :no-error) 
		(1 . :format-error)
		(2 . :server-failure)
		(3 . :name-error)
		(4 . :not-implemented)
		(5 . :refused)))

(defvar *domain-types*
	'((1 :address :a)
	  (2 :name-server :ns) 
	  (3 :mail-delivery :md)		; obsolete, rfc973
	  (4 :mail-forwarding :mf)		; obsolete, rfc973
	  (5 :canonical-name :cname)
	  (6 :start-of-authority :soa)
	  (7 :mailbox-for-user :mb)
	  (8 :mail-group :mg)
	  (9 :mail-rename :mr)
	  (10 :null-rr :null)
	  (11 :well-known-services :wks)
	  (12 :pointer :ptr)
	  (13 :host-info :hinfo)		; os type
	  (14 :mail-info :minfo)		; mailing-list style info (?)
	  (15 :mail-x :mx)			; combines mail-delivery, mail-forward
	  (252 :authority-xfer :axfr)
	  (253 :mail-box-rrs :mailb)		; request for mailbox related rrs
	  (254 :mail-agent-rrs :maila)		;    "     "  mail agent       "
	  (255 :* :*)))

(defvar *domain-classes* '((1 :internet :in) 
			   ;;(2 :csnet :cs)		; obsolete, by rfc973
			   (3 :chaos :chaos)		; rfc973
			   (155 :dial :dial)	; Temporary hack!
			   (255  :* :*)))

(defvar *domain-relevant-type-alist*
	  '((:mail-agent-rrs :mail-delivery :mail-forwarding)
	    (:mail-box-rrs :mailbox-for-user :mail-group :mail-rename)))

(defvar *nic-services*
	'(("TCP" :tcp
	   (("ECHO" :byte-stream-echo (:echo))
	    ("DISCARD" :discard (:discard))
	    ("FTP" :tcp-ftp (:file))
	    ("TELNET" :telnet (:login))
	    ("SMTP" :smtp (:mail-to-user :send :expand-mail-recipient))
	    ("TIME" :time-msb (:time))
	    ("FINGER" :ascii-name (:show-users))
	    ("SUPDUP" :supdup (:login))
	    ))
	  ("UDP" :udp
	   (("TFTP" :tftp (:file))
	    ("TIME" :time-simple-msb (:time))
	    ))
	  ("IP" :ip
	   (("GW" :internet-gateway (:gateway))
	    ))
	  ("GW" :ip-gateway
	   (("PRIME" :internet-gateway-prime (:gateway))
	    ("DUMB" :internet-gateway-dumb (:gateway))
	    ("ALWAYS-UP" :internet-gateway-always-up (:gateway))
	    ("EGP" :internet-gateway-egp (:gateway))
	    ))
	  ))


;;;
;;; this stuff is rather a crock, as it shouldn't really be here, and isn't really very
;;; extensible.  later...
;;; the comments for the entries below are excerpted from SRI-NIC:PS:<RFC>ASSIGNED-NUMBERS
;;;
(defvar *tcp-port-to-service-alist*
	'((5 . :RJE)        ; Remote Job Entry                   [17,40,JBP]
	  (7 . :ECHO)       ; Echo                                  [82,JBP]
	  (9 . :DISCARD)    ; Discard                               [80,JBP]
	  (11 . :USERS)      ; Active Users                          [76,JBP]
	  (13 . :DAYTIME)    ; Daytime                               [79,JBP]
	  (15 . :NETSTAT)    ; Who is up or NETSTAT                     [JBP]
	  (17 . :QUOTE)      ; Quote of the Day                      [87,JBP]
	  (19 . :CHARGEN)    ; Character Generator                   [78,JBP]
	  (20 . :FTP-DATA)   ; File Transfer [Default Data]       [39,83,JBP]
	  (21 . :FTP)        ; File Transfer [Control]            [39,83,JBP]
	  (23 . :TELNET)     ; Telnet                                [99,JBP]
	  (25 . :SMTP)       ; Simple Mail Transfer               [39,89,JBP]
	  (27 . :NSW-FE)     ; NSW User System FE                    [23,RHT]
	  (29 . :MSG-ICP)    ; MSG ICP                               [74,RHT]
	  (31 . :MSG-AUTH)   ; MSG Authentication                    [74,RHT]
	  (33 . :DSP)        ; Display Support Protocol                 [MLC]
	  (37 . :TIME)       ; Time                                  [95,JBP]
	  (39 . :RLP)        ; Resource Location Protocol              [1,MA]
	  (41 . :GRAPHICS)   ; Graphics                          [40,115,JBP]
	  (42 . :NAMESERVER) ; Host Name Server                   [39,86,JBP]
	  (43 . :NICNAME)    ; Who Is                            [39,48,JAKE]
	  (44 . :MPM-FLAGS)  ; MPM FLAGS Protocol                       [JBP]
	  (45 . :MPM)        ; Message Processing Module [recv]      [85,JBP]
	  (46 . :MPM-SND)    ; MPM [default send]                    [91,JBP]
	  (47 . :NI-FTP)     ; NI FTP                                [122,SK]
	  (49 . :LOGIN)      ; Login Host Protocol                     [PHD1]
	  (51 . :LA-MAINT)   ; IMP Logical Address Maintenance       [66,AGM]
	  (53 . :DOMAIN)     ; Domain Name Server                 [81,71,PM1]
	  (55 . :ISI-GL)     ; ISI Graphics Language                 [14,RB6]
	  (57 . :3600-LOGIN) ; added by jrd...
	  (59 . :NFILE)      ;  ditto
	  (61 . :NI-MAIL)    ; NI MAIL                                [12,SK]
	  (63 . :VIA-FTP)    ; VIA Systems - FTP                        [DXD]
	  (65 . :TACACS-DS)  ; TACACS-Database Service               [11,RHT]
	  (67 . :BOOTPS)     ; Bootstrap Protocol Server            [35,WJC2]
	  (68 . :BOOTPC)     ; Bootstrap Protocol Client            [35,WJC2]
	  (69 . :TFTP)       ; Trivial File Transfer            [39,102,DDC1]
	  (71 . :NETRJS-1)   ; Remote Job Service                 [16,40,RTB]
	  (72 . :NETRJS-2)   ; Remote Job Service                 [16,40,RTB]
	  (73 . :NETRJS-3)   ; Remote Job Service                 [16,40,RTB]
	  (74 . :NETRJS-4)   ; Remote Job Service                 [16,40,RTB]
	  (79 . :FINGER)     ; Finger                             [40,46,KLH]
	  (81 . :HOSTS2-NS)  ; HOSTS2 Name Server                      [EAK1]
	  (83 . :MIT-ML-DEV) ; MIT ML Device                            [DPR]
	  (85 . :MIT-ML-DEV) ; MIT ML Device                            [DPR]
	  (89 . :SU-MIT-TG)  ; SU/MIT Telnet Gateway                    [MRC]
	  (91 . :MIT-DOV)    ; MIT Dover Spooler                        [EBM]
	  (93 . :DCP)        ; Device Control Protocol                 [DT15]
	  (95 . :SUPDUP)     ; SUPDUP                                [26,MRC]
	  (97 . :SWIFT-RVF)  ; Swift Remote Vitural File Protocol       [MXR]
	  (98 . :TACNEWS)    ; TAC News                                [FRAN]
	  (99 . :METAGRAM)   ; Metagram Relay                          [GEOF]
	  (101 . :HOSTNAME)   ; NIC Host Name Server              [39,47,JAKE]
	  (105 . :CSNET-NS)   ; Mailbox Name Nameserver             [113,MHS1]
	  (107 . :RTELNET)    ; Remote Telnet Service                 [88,JBP]
	  (109 . :POP-2)      ; Post Office Protocol - Version 2     [19,JKR1]
	  (111 . :SUNRPC)     ; SUN Remote Procedure Call                [DXG]
	  (113 . :AUTH)       ; Authentication Service              [116,MCSJ]
	  (115 . :SFTP)       ; Simple File Transfer Protocol        [60,MKL1]
	  (117 . :UUCP-PATH)  ; UUCP Path Service                     [38,MAE]
	  (119 . :UNTP)       ; USENET News Transfer Protocol         [61,PL4]
	  (121 . :ERPC)       ; HYDRA Expedited Remote Procedure Call[118,JXO]
	  (123 . :NTP)        ; Network Time Protocol                [70,DLM1]
	  (125 . :LOCUS-MAP)  ; Locus PC-Interface Net Map Server    [124,BXG]
	  (127 . :LOCUS-CON)  ; Locus PC-Interface Conn Server       [124,BXG]
	  (243 . :SUR-MEAS)   ; Survey Measurement                     [13,AV]
	  (245 . :LINK)       ; LINK                                 [18,RDB2]
	  ))

;;;
;;; and now an alist that gets us from what they call it to what we call it, if they'r not
;;; the same
;;;
(defvar *tcp-service-to-lispm-protocol-alist* 
	'((:echo . :byte-stream-echo)
	  (:discard . :sink)
	  (:users . :systat)
	  (:daytime . :time-string)
	  (:babel . :chargen)
	  (:ftp . :tcp-ftp)
	  (:time . : time-msb)
	  (:finger . :ascii-name)
	  (:domain . :domain)
	  (:domain . :domain-simple)))

(defvar *internet-protocol-number-to-name-alist*
	'((6 . :tcp)
	  (17 . :udp)))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");;; The 0("LISPM"  :lispm)1 entry should be kept until a new version of the
;;; assigned numbers RFC is distributed with the "GENERA" system type in it.
;;; It ensures that SYSTEM-TYPE-TO-NIC returns "LISPM" instead of "GENERA".
0(defvar *nic-system-types*
	'(("TOPS20" :tops-20)
	  ("FOONEX" :tenex)
	  ("UNIX"   :unix42)
	  ("VMS"    :vms4.4)
	  ("LISPM"  :lispm)
	  ("GENERA" :lispm)
	  ))

(defvar *nic-machine-types* nil)

;(defmacro domain-type-match-p (type this-type)
;  `(or (eq ,this-type :*)
;       (eq ,type :*)
;       (eq ,type ,this-type)
;       (memq ,this-type (assq ,type *domain-relevant-type-alist*))))

(defresource ftp-block-mode-buffer (&optional (length 400))
  :constructor (cl:make-array length :element-type '(cl:unsigned-byte 8))
  :matcher ( (string-length object) length))

(defun domain-type-match-p (type this-type)
  (or (eq type this-type)
      (eq type ':*)
      (eq this-type ':*)))

(defstruct (rr :list :conc-name)
  name-list
  type
  class
  (ttl (// neti:*check-namespace-validity-time* 60.))
  rdata)

(defun rr-equal-p (rr1 rr2)
  (and (equal (rr-name-list rr1) (rr-name-list rr2))
       (eq (rr-type rr1) (rr-type rr2))
       (eq (rr-class rr1) (rr-class rr2))
       (equal (rr-rdata rr1) (rr-rdata rr2))))

(defstruct (domain-host-info :list (:conc-name "DHI-"))
  (expiration 0))


(defmacro byte-load-16 (array offset)
  `(neti:put-together-bytes :big ,array ,offset 2))

(defmacro byte-store-16 (value array offset)
  `(neti:fill-in-bytes :big ,array ,offset ,value 2 nil))

(defmacro byte-load-32 (array offset)
  `(neti:put-together-bytes :fixnum-big ,array ,offset 4))

(defmacro byte-store-32 (value array offset)
  `(neti:fill-in-bytes :fixnum-big ,array ,offset ,value 4 nil))

(defun load-internet-address (array offset)
  (declare (values address))
  (neti:put-together-bytes :fixnum-big array offset 4))

(defun unparse-internet-address (parsed-address)
  (multiple-value-bind (b1 b2 b3 b4)
      (explode-internet-address parsed-address)
    (format nil "~D.~D.~D.~D" b1 b2 b3 b4)))

(defun explode-internet-address (parsed-address)
  (declare (values byte1 byte2 byte3 byte4))
  (values (ldb (byte 8 24) parsed-address)
	  (ldb (byte 8 16) parsed-address)
	  (ldb (byte 8 08) parsed-address)
	  (ldb (byte 8 00) parsed-address)))

(defun store-internet-address (address array offset)
  (neti:fill-in-bytes :fixnum-big array offset address 4 nil))

(defun parse-internet-address (address)
  (or (loop with (num delim)
	    repeat 4
	    for idx = 0 then (1+ delim)
	    when (and delim (or (= delim (string-length address))
				(char-not-equal (aref address delim) #\.)))
	    return nil
	    do (cl:multiple-value-setq (num delim)
		 (cl:parse-integer address :start idx :sign-allowed nil :junk-allowed t))
	    when (or (null num) (< num 0) (> num 255))
	    return nil
	    else collect num into nums
	    finally (return (when (= delim (string-length address))
			      (cl:apply #'build-internet-address nums))))
      (error "Invalid internet address [~A]." address)))

(defun build-internet-address (byte1 byte2 byte3 byte4)
  (sys:%logdpb byte1 (byte 8 24)
	       (dpb byte2 (byte 8 16)
		    (dpb byte3 (byte 8 8)
			 byte4))))


;;; Domain access paths
(defflavor basic-domain-access-path
	(neti:service-access-path)
	()
  :abstract-flavor
  (:initable-instance-variables neti:service-access-path)
  (:required-methods
   :close))

(defflavor domain-access-path
	((stream)
	 (internet-namespace)
	 internet-network
	 domain-name
	 )
	(basic-domain-access-path))

(defflavor byte-stream-domain-access-path
	()
	(domain-access-path))

(defmethod (:get-connection-for-service byte-stream-domain-access-path) ()
  (make-instance 'domain-byte-stream-record-stream
		 :stream (net:get-connection-for-service neti:service-access-path
							 :characters nil)))


(defmethod (:init domain-access-path :after) (ignore)
  (domain-get-stream self))

(defmethod (:close domain-access-path) (&optional abortp)
  (when stream
    (condition-case-if (not abortp) ()
	(send stream :close abortp)
      (error (send stream :close :abort)))
    (setf stream nil)))

(defflavor domain-byte-stream-record-stream
	(stream					; this will be a tcp-binary-stream
	 (domain-input-message nil)
	 (domain-output-message nil))	   
	(si:buffered-binary-stream)
  (:initable-instance-variables stream))

(defmethod (:reliable-p domain-byte-stream-record-stream) () t)

(defwhopper (:close domain-byte-stream-record-stream) (abortp)
  (unwind-protect
      (progn (continue-whopper abortp)
	     (when stream (send stream ':close abortp)))
    (when domain-input-message
      (deallocate-resource 'ftp-block-mode-buffer (cl:shiftf domain-input-message nil)))
    (when domain-output-message
      (deallocate-resource 'ftp-block-mode-buffer (cl:shiftf domain-output-message nil)))))

(defmethod (:next-input-buffer domain-byte-stream-record-stream) (&optional ignore)
  (declare (values buffer start-index limit-index end-of-record))
  (when domain-input-message
    (fsignal "Record stream has not discarded previous input buffer"))
  (let ((b1 (send stream :tyi)))
    (if b1
	(let* ((length (dpb b1 (byte 8 8) (send stream :tyi))))
	  (setq domain-input-message (allocate-resource 'ftp-block-mode-buffer
							;; round up to multiple of 64
							(* (ceiling length 64.) 64.)))
	  (send stream :string-in t domain-input-message 0 length)
	  (values domain-input-message 0 length t))
	(values nil nil nil t))))

(defmethod (:listen domain-byte-stream-record-stream) ()
  (send stream :listen))

(defmethod (:discard-input-buffer domain-byte-stream-record-stream) (buffer)
  (when (neq domain-input-message buffer)
    (fsignal "Discarding something other than the buffer given out"))
  (deallocate-resource 'ftp-block-mode-buffer (cl:shiftf domain-input-message nil)))

(defmethod (:new-output-buffer domain-byte-stream-record-stream) ()
  (when domain-output-message
    (fsignal "Record stream has not discarded previous output buffer"))
  (let ((size 65535.))
    (setq domain-output-message (allocate-resource 'ftp-block-mode-buffer size))
    (values domain-output-message 0 size)))

(defmethod (:send-output-buffer domain-byte-stream-record-stream) (buffer length ignore)
  (when (neq domain-output-message buffer)
    (fsignal "Sending some buffer other than the one given out"))
  (send stream ':tyo (ldb (byte 8 8) length))
  (send stream ':tyo (ldb (byte 8 0) length))
  (send stream ':string-out buffer 0 length)
  (send stream ':force-output)
  (deallocate-resource 'ftp-block-mode-buffer (cl:shiftf domain-output-message nil)))

(defmethod (:force-output domain-byte-stream-record-stream :after) ()
  (send stream ':force-output))

(defmethod (:discard-output-buffer domain-byte-stream-record-stream) (buffer)
  (when domain-output-message
    ;; just in case it already got freed someplace else
    (when (neq domain-output-message buffer)
      (fsignal "Discarding something other than the buffer given out."))
    (deallocate-resource 'ftp-block-mode-buffer (cl:shiftf domain-output-message nil))))



(defmethod (domain-get-stream domain-access-path) ()
  (unless stream 
    (setf stream (send self ':get-connection-for-service))))
;
;(defun-method domain-get-stream domain-access-path ()
;  (unless stream
;    (setf stream (send self :get-connection-for-service))))

;(defun-method domain-init-namespace domain-access-path (namespace)
;  (cond ((null internet-namespace)
;	 (setf internet-namespace namespace)
;	 (setf domain-name (domain-cvt-namespace-name internet-namespace))
;	 (multiple-value-bind (ignore network ignore)
;	     (neti:decode-service-access-path-for-medium neti:service-access-path)
;	   (setf internet-network network)))
;	((eq internet-namespace namespace))
;	(t (ferror "You can only use one namespace a domain server."))))

;;;
;;; error stuff
;;;

(defflavor domain-resolver-error
	(error-rr
	 error-server)
	(network-error)
  :initable-instance-variables
  :gettable-instance-variables)

(DEFMETHOD (:REPORT domain-resolver-error) (STREAM)
  (FORMAT STREAM "Domain Name server ~A returned ~A on ~S"
	  error-server (get (locf error-rr) ':rcode)
	  (rr-name-list (car (get (locf error-rr) ':questions)))))

(defflavor domain-packet-format-error
	((error-rr ())				; usually nil
	 (server ())
	 ;; should copy offending packet in here too
	 (error-reason "Domain packet format error ~{~S ~}")
	 (error-args ()))
	(network-error)
  :initable-instance-variables)

(defmethod (:report domain-packet-format-error) (stream)
  (lexpr-funcall #'format stream error-reason error-args))

;;;
;;; this one is used for failures trying to contact machines at the site that
;;; are used to perform resolver service
;;;
(defflavor domain-site-resolver-error
	(error-server
	 error-site)
	(network-error)
  :initable-instance-variables
  :gettable-instance-variables)

(defmethod (:report domain-site-resolver-error) (stream)
  (format stream "Resolver ~A for site ~A did not respond to a DOMAIN request"
	  error-server error-site))
