;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IVT; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;; Installation specific things
;;;

(defvar *system-installers* (make-hash-table ':test #'eq))

(defflavor installation-script
	((system-name nil))				; system we're installing
	(script)
  :readable-instance-variables
  :initable-instance-variables
  (:conc-name installation-))

(defmethod (script-target-object installation-script) ()
  (sct:find-system-named system-name))

(defmethod (script-operation-verb installation-script) ()
  "install")

(defmethod (script-pretty-name installation-script) ()
  (format nil "Installation Script for ~A" 
	  (script-target-object self)))

(defmethod (:init installation-script :after) (ignore)
  (unless system-name
    (error "You must supply a system name"))
  (setf (gethash system-name *system-installers*) self))

;;;
;;; Finding installation scripts can be tricky, as, by definition, the
;;; software's not loaded yet.  An SCT:SYSTEM has a property called
;;; :installation-script that hold the pathname of the script file.  If
;;; we don't find the script right off the bat, try to define the
;;; system, and if we survive that, load the file.
;;;
(defun find-installation-script (name)
  (declare (values (script system-found)))
  (let ((script (gethash name *system-installers*)))
    (when script
      (return-from find-installation-script (values script nil)))
    (let ((system (sct:find-system-named name nil)))	; don't error
      (when system
	(let ((script-path 
		;; temporary kludge til sct gets the merge right
		(fs:merge-pathnames (sct:system-default-pathname system)
				    (sct:system-installation-script system))))
	  (when script-path
	    (condition-case (error)
		 (load script-path)		; :if-does-not-exist doesn't do anything 
	       (error nil))))			;  useful here.
	;;
	;; that should have defined the script
	;;
	(return-from find-installation-script
	  (values (gethash name *system-installers*) t))
	)
      (values nil nil))))

;;;
;;; A step flavor for doing load-systems
;;;
(defflavor load-system-step 
	()
	(basic-step state-caching-step-mixin parameter-caching-step-mixin)
  :initable-instance-variables)

(define-step-type :load-system load-system-step)

(defmethod (execute load-system-step) (&optional (override-state nil))
  (declare (values success-p))
  override-state
  ;;
  ;; find the name of the parent system and load it up
  ;;
  (apply #'sct:load-system (installation-system-name script)
	 (parameters-for-apply self))
  (setq status ':complete)
  t)

(defmethod (step-help-text load-system-step) ()
  (list "~%    ~This step loads the system into the running world, and initializes it.  ~%~
         It's the equivalent of typing the CP command: ~%~
         ~A~~%"
	(format nil ":Load System ~A~{ ~S~}" (installation-system-name script)
		(parameters-for-apply self))))



;;; One for disk-saving...

;;;
;;; Disk-saving has all sorts of of lovely screws associated with it, so there's
;;; some kludgery here that's not necessary for other things.
;;;
(defflavor disk-save-step 
	()
	(basic-step state-caching-step-mixin parameter-caching-step-mixin)
  )

(define-step-type :disk-save disk-save-step)

(defmethod (:init disk-save-step :after) (&rest ignore)
  (setq parameters 
	(list (make-parameter ':band-name ':type 'fs:pathname
			      ':default-form ':undefined
			      )
	      (make-parameter ':incremental ':default-form t ':type 'boolean)
	      (make-parameter ':boot-file-name ':type 'fs:pathname 
			      ':default-form "fep0:>boot.boot"))))

(defwhopper (get-parameter disk-save-step) (parameter-name)
  (case parameter-name 
    (:band-name
      (multiple-value-bind (old-file-name default-p)
	  (continue-whopper parameter-name)
	(if default-p 
	    (values (fs:make-pathname :host (fs:get-pathname-host "FEP")
				      :directory :root
				      :name (sct:system-version-for-disk-save
					      (get-parameter self ':incremental))
				      :type "LOAD") t)
	    (values old-file-name nil))))
    (t (continue-whopper parameter-name))))

      
(defmethod (step-help-text disk-save-step) ()
  (list "~%    ~This step saves a bootable image of the running world, containing~%~
                 the system(s) you've loaded.  It will save ~:[a full~;an incremental~] image.~%~
                 It will update boot file ~A to cause it to boot the new world.~%~
                 It's the equivalent of typing the CP command: ~%  ~A~%~
                 and then answering Yes to the question about updating the boot file.~%~"
	(get-parameter self ':incremental)
	(get-parameter self ':boot-file-name)
	(format nil ":Save World ~:[Complete~;Incremental~] ~A" 
		(get-parameter self ':incremental) 
		(get-parameter self ':band-name))))

						

;;;
;;;
(defflavor system-already-disk-saved 
	()
	(step-precondition-failure))

(defmethod (dbg:report system-already-disk-saved) (stream)
  (format stream "~%This world has already been saved.  You cannot save it again.~%~
                    Please cold boot and retry the installation."))

(defflavor not-in-initial-lisp-listener
	()
	(step-precondition-failure))

(defmethod (dbg:report not-in-initial-lisp-listener) (stream)
  (format stream "~%You can only do disk-saves from D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")Dynamic Lisp Listener 10.~%~
                    Please select that window and try again."))

(defmethod (check-preconditions disk-save-step) ()
  (when si:*disk-saved*
    (signal 'system-already-disk-saved ':step self))
  (unless (eq si:terminal-io tv:initial-lisp-listener)
    (signal 'not-in-initial-lisp-listener ':step self)))

;;;
(defmethod (execute disk-save-step) (&optional (override-state nil))
  override-state
  ;;
  ;; do a disk-save; for now, just default everything
  ;;
  ;; We'll set the state flag here first, so that it will get
  ;; saved into the incremental world
  ;;
  (setq status ':complete)
  (let ((si:user-id si:user-id)			; bind these so we'll still be logged after...
	(si:*user* si:*user*))
    (sys:disk-save (get-parameter self ':band-name)
		   (get-parameter self ':incremental)
		   ':boot-file (get-parameter self ':boot-file-name)
		   ':query nil))
  t)




;;;
;;; Top level
;;;
(defun install-system (name &key debug reinstall)
  (let ((script (find-installation-script name)))
    (unless script
      ;; should really do something smart here.  For now, error.
      (error "Installation script for ~A not defined" name))
    (plan-and-execute script :override reinstall :debug debug)))

;;;
;;; for doing more than one at a time.  This is a complete special case, but it'll
;;; do for now.
;;;
(defun install-systems (names)
  (let ((scripts (loop for name in names
		       for script = 
			   (multiple-value-bind (script system-found)
			       (find-installation-script name)
			     (cond ((not (or script system-found))
				    (format t "~&Can't find a definition for system ~A" 
					    name))
				   ((not script)
				    (format t "~&System ~A doesn't have a defined installation script"
					    name)))
			     script)
		       when script 
			 collect script)))
    ;;
    ;; first do everything up to the disk-save for each script
    ;;
    (loop for script in scripts do
      (plan-and-prompt script))
    (loop for script in scripts do
      (execute script ':complete-step ':disk-save-prepare))
    ;;
    ;; do the save from the first one
    ;;
    (execute (first scripts) ':complete-step ':disk-save)
    ;;
    ;; set all the completion statuses (stati?)
    ;;
    (loop for script in scripts 
	  as disk-save-step = (find-step script ':disk-save)
	  do
      (set-status disk-save-step ':complete))
    ;;
    ;; and let em all finish
    ;;
    (loop for script in scripts do
      (execute script))))

(define-cp-command (com-install-system :name "Install System"
				       :command-table "System Maintenance")
    ((system '((type-or-string sct:system))))
   (install-system (if (typep system 'sct:system)
		       (sct:system-name system)
		       (intern (string-upcase system) ':keyword))))


(scl:define-presentation-type several-systems ()
   :abbreviation-for
     `((scl:sequence ((type-or-string sct:system)))))

(define-cp-command (com-install-systems :name "Install Systems"
					:command-table "System Maintenance")
    ((systems 'several-systems))
   (install-systems (loop for system in systems
			  collect (if (typep system 'sct:system)
				      (sct:system-name system)
				      (intern (string-upcase system) ':keyword)))))
