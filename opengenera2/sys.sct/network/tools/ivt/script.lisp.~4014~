;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IVT; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;; Installation Tools.
;;;
;;; This file contains flavor defs etc for basic script-hacking things.
;;;

;;; Scripts:
;;;  All this stuff is based on the notion of a sequence of things that have
;;; to be done, herein called a script, for lack of anything better to call it.
;;; Scripts are instances that contain a bunch of steps, and know how to plan
;;; and execute whatever of the steps need it, when asked to do something.
;;; Scripts also hang onto some collection of parameters which are global to the
;;; environment in which the steps run.  More about that later.
;;;
;;; Script instances have the following methods:
;;;
;;;   execute   &optional step-name
;;;      This executes whatever steps are needed to do the requested one, and
;;;      the requested one.
;;;
;;;   get-parameter   parameter-name
;;;      Returns the parameter value with that name.  Errors if there's no such
;;;      parameter.
;;;
;;;   set-parameter   parameter-name value
;;;      Sets one.  Errors of no such parameter.
;;;
;;;   add-step   step
;;;      Adds the step to the list held by the script, possibly displacing
;;;      another one of that name

;;; they require the following methods:
;;;
;;;   script-operation-verb -> string
;;;     This is expected to be something like "install" or "test"
;;;
;;;   script-target-object -> string (or something format-able)
;;;     This is expected to be something like #<SYSTEM IP-TCP> or "DNA test suite"
;;;
;;;   script-pretty-name -> string
;;;     This is exptected to be something like "Installation script for SYSTEM DNA"

;;;
;;; This flavor is the essential script representation.  A script is the
;;; thing that gets executed to get something done; ie install a system,
;;; or run a test suite.
;;;
(defflavor script
	((name nil)				; the name of this script, 
						;  for internal reference
	 (pretty-name nil)			; name we use to talk about it to the user
	 (steps nil)				; list of step instances this script contains,
						;  in no particular order
	 (default-step 'the-whole-enchilada)	; step to execute if no particular one
						;  specified
	 (parameters nil)			; initable list of (name . default-value)
						;  pairs
	 (parameter-table nil)			; hash table of current values, indexed
						;  by name
	 )
	()					; no component flavors
  (:initable-instance-variables name pretty-name parameters)
  :readable-instance-variables
  :writable-instance-variables
  (:required-methods script-operation-verb script-target-object script-pretty-name))

;;;
;;; Do a little checking at init time
;;;
(defmethod (:init script :after) (ignore)
  (unless name
    (error "You can't make a script without a name"))
  (unless (symbolp name)
    (error "NAME must be a symbol"))
  (unless pretty-name
    (setq pretty-name (string-capitalize name)))
  ;;
  ;; If we're replacing another script of this name, warn.
  ;;
  (when (gethash name *all-scripts*)
    ;; should really use WARN here.  later
    (format t "~&Warning: Redefining Script ~A" name))
  ;;
  ;; make the params table
  ;;
  (setq parameter-table (make-hash-table ':test #'eq))
  (loop for (param . spec) in parameters do
    (setf (gethash (keywordified-name param) parameter-table) 
	  (list (intern (string (car spec)) (find-package ':keyword))
		(cond ((null (cadr spec)) nil)
		      ((typep (cadr spec) (car spec))	; default already the type requested?
		       (cadr spec))
		      ((typep (cadr spec) 'string)
		       (apply #'accept-from-string spec))))))
  ;; should we always add a whole-enchilada step here?
  ;;
  ;; Now install it.
  ;;
  (setf (gethash name *all-scripts*) self)
  self)

;;;
;;; parameter-hacking functions
;;;
(defmethod (get-parameter script) (param)
  (setq param (keywordified-name param))
  (multiple-value-bind (value found)
      (gethash param parameter-table)
    (unless found
      (error "No such parameter ~A" param))
    (second value)))

(defmethod (set-parameter script) (param value)
  (setq param (keywordified-name param))
  (multiple-value-bind (ignore found) 
      (gethash param parameter-table)
    (unless found
      (error "No such parameter ~A" param)))
  (setf (second (gethash param parameter-table)) value))

;;;
;;; This tells caller only whether parameter of that name is available,
;;; not what its value is
;;;
(defmethod (parameter-exists-p script) (param)
  (multiple-value-bind (ignore found) 
      (gethash param parameter-table)
    found))



;;;
;;; general useful things
;;;

(defun find-script-named (name)
  (let ((s (gethash name *all-scripts*)))
    (unless s
      (error "No such script ~A" name))
    s))

(defmacro define-script ((script-name flavor-name) &rest args)
  `(make-instance ',flavor-name :name ',script-name ,@args))

;;;
;;; things for manipulating steps
;;; 

(defmethod (add-step script) (step)
  (let ((old-steps (loop for old-step in steps 
			 unless (eql (step-name step) (step-name old-step))
			   collect old-step)))
    (setq steps (push step old-steps))))

(defmethod (find-step script) (step-name)
  (let ((s (loop for step in steps			; maybe steps should be a table???
		 thereis (and (eql (step-name step) step-name) step))))
    (unless s
      (error "Script ~A does not contain a step called ~A" 
	     self step-name))
    s))

(defmethod (sorted-steps-matching script)
	   (matching-predicate &optional (require-step 'the-whole-enchilada))
  (let* ((top-step (find-step self require-step))
	 (*steps-collected* nil))
    (collect-matching-substeps top-step self matching-predicate)
    (si:eliminate-duplicates (reverse *steps-collected*))))

(defmethod (sorted-pending-steps script) (&optional (require-step 'the-whole-enchilada))
  (sorted-steps-matching self #'step-incomplete-p require-step))

(defmethod (plan-and-prompt script) (&key (complete-step nil)
					   (override nil)
					   (automatic nil)
					   (debug nil))
  (let* ((*debug-script* debug)
	 (pending-steps (sorted-pending-steps self))
	 (pending-visible-steps
	   (loop for step-name in pending-steps 
		 unless (step-invisible (find-step self step-name))
		   collect step-name)))
    ;;
    ;; first whack all the steps we have if we're starting from scratch
    ;;
    (when override
      (loop for step in steps do (set-status step nil))
      (setq pending-steps (sorted-pending-steps self)))	; kludge
    ;;
    ;; make sure all steps think they have at least a chance of winning
    ;;
    (condition-case (oops)
	 (loop for step in steps do (check-preconditions step))
       (step-precondition-failure
	 ;; oops.  one of the steps says it can't work.  say why, and go home.
	 (dbg:report oops *terminal-io*)
	 (debugging ("Exit")
	   (return-from plan-and-prompt nil))
	 ))
    ;;
    (if pending-visible-steps
	;;
	;; Say a few platitudes about what we think we're going to do next.
	;;
	(dw:redisplayable-format 
	  *query-io*
	  "~%~%Starting ~A procedure for ~A.~%~
       The steps that need to be completed are: ~%   ~~{~&~A~}~~%~%"
	  (script-operation-verb self)
	  name 
	  pending-visible-steps)
	;;
	(progn
	  (dw:redisplayable-format *query-io*"~%~%System ~A is completely installed."
				 name)
	  (return-from plan-and-prompt ':complete)))
    ;;
    ;; next order of business is to find all the steps that need to be executed.
    ;; we get their parameters, and prompt for values unless auto.
    ;;
    (let* ((script-params (loop for (p . spec) in parameters 
				collect
				  (list p (first spec))))
	   ;; must do this out here cause don't want to cons a new prompt string
	   ;; every pass thru the loop
	   (uncompleted-steps
	     (loop for step-name in pending-steps
		   for step = (find-step self step-name)
		   collect (list step (format nil "~%For step ~A:" (step-name step)))))
;	   (help-switch-alist '((:off . "Click here to see help") 
;				(:on  . "Click here to make help go away")))
;	   (help-switch-values (loop for (nil . x) in help-switch-alist collect x))
;	   (help-switch-hash-table (make-hash-table))	; use something more efficient...
	   )
      ;;
      (format *query-io* " ~%")			; why is this necessary?
						; why does it bug in such a wierd way
						;  when it's inside the accepting-values?
      
;      (loop for (step . nil) in uncompleted-steps-and-params do
;	(setf (gethash step help-switch-hash-table) ':off))
      (unless uncompleted-steps
	(setq automatic t))
      (unless automatic
	(dw:accepting-values (*query-io* ':own-window nil ':resynchronize-every-pass t)
	  ;;
	  ;; first do the script-wide params
	  ;;
	  (when script-params 
	    (dw:redisplayable-format *query-io* 
				     "~%Parameters required for ~A~%~%"
				     (script-pretty-name self))
	    (loop for (param-name presentation-type) in script-params do
	      (multiple-value-bind (value nil unchanged-p)
		  (accept presentation-type	;hack!
			  ':prompt (format nil "  ~A" param-name)
			  ':default (get-parameter self param-name)
			  ':query-identifier param-name)
		(unless unchanged-p
		  (set-parameter self param-name value)
		  )))
	    (write-line "" *query-io*)
	    )
	  (dw:redisplayable-format *query-io* "~%")
	  ;;
	  ;; now do per-step params
	  ;;
	  (loop for (step prompt) in uncompleted-steps do
	    (prompt-for-parameters step prompt)
	    ))))
    ;;
    ;; now do everything.  Whack the state of all the steps we said we were going to
    ;; do, then do the top-level one.  It'll do the rest.
    ;;
    (loop for step-name in (sorted-pending-steps self) do
      (set-status (find-step self step-name) nil))
    ;;
    ))

(defmethod (execute script) (&key (complete-step nil)
				  (override nil)
				  )
  (loop for step-name in (sorted-pending-steps self complete-step) do
    (execute (find-step self step-name) override)))


(defmethod (plan-and-execute script) (&key (complete-step nil)
					   (override nil)
					   (automatic nil)
					   (debug nil))
  (plan-and-prompt self ':complete-step complete-step
		   ':override override ':automatic automatic ':debug debug)
  (execute self ':complete-step complete-step ':override override))
		   
;;;
;;; making scripts
;;;

(defmacro define-script ((script-name script-flavor) &rest stuff)
  `(make-instance ',script-flavor :name ',script-name
		  ,@(loop for thing in stuff
			      collect (list 'quote thing))))
