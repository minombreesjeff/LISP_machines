;;; -*- Mode: LISP; Syntax: Common-lisp; Package: IVT; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;; definitions and code for script step instances.
;;;

(defvar *step-keyword-to-flavor-alist* '((:funcall funcall-step)
					 (:no-op no-op-step))
  "Translates step-type, in a define-step, to flavor to instantiate")

(defmacro define-step-type (type-name flavor-name)
  `(pushnew '(,type-name ,flavor-name) *step-keyword-to-flavor-alist*
	    ':test #'(lambda (x y) (eq (car x) (car y)))))

(defflavor basic-step
	(name					; name of this step
	 script					; the script this goes with
	 depends-on				; names of steps this depends-on
	 (verbose t)				; if we comment when executing.
	 (invisible nil)			; if this step doesn't want to show
						;  up in the list of steps to be
						;  completed
	 )
	()
  (:conc-name step-) 
  :readable-instance-variables
  :writable-instance-variables
  (:required-methods execute parameters get-parameter
		     set-parameter get-status set-status
		     )  
  (:initable-instance-variables))

(defmethod (check-preconditions basic-step) ())

(defmethod (prompt-for-parameters basic-step :default) (ignore)
  ())

(defwhopper (execute basic-step) (override)
  (when (and (not invisible) verbose)
    (format t "~&~%Starting step ~A" name))
  (let ((completion-status
	  (condition-case (error)
	       (continue-whopper override)
	     (error
	       (format t "~&The ~A step has encountered an error that it can't handle.
The error message is:~%" name)
	       (dbg:report error *standard-output*)
	       ':error))))			; completion status
    (set-status self completion-status)))

;;;
;;; A step that remembers its state.
;;;
(defflavor state-caching-step-mixin
	((status nil))				; expected to be NIL or :COMPLETE
	()
  (:required-flavors basic-step))

(defmethod (get-status state-caching-step-mixin) ()
  (declare (values complete-p))
  status)

(defmethod (set-status state-caching-step-mixin) (new-status)
  (setq status new-status))


;;;
;;; One for dealing with keyword-parameter lists
;;;
(defflavor parameter-caching-step-mixin
	((init-parameters nil)			; list supplied at init time
	 (parameters)				; list of param structs
	 )
	()
  (:initable-instance-variables init-parameters)
  (:required-flavors basic-step))



(defstruct (param-struct (:type :list) (:conc-name parameter-))
  name						; name to passed at funcall time
  default-form					; form to eval to get default value
  current-value-p
  current-value
  type
  comments)
    
(defun make-parameter (name &key default-form (current-value nil current-value-p)
		       type comments)
  (make-param-struct ':name (keywordified-name name) ':default-form default-form
		     ':current-value-p current-value-p
		     ':current-value current-value
		     ':default-form default-form
		     ':type (or type (type-of default-form))	; need sp case for boolean
		     ':comments comments))

(defmethod (:init parameter-caching-step-mixin :after) (&rest ignore)
  (setq parameters 
	(loop for (name . spec) in init-parameters 
	      collect
		(make-parameter name
				':default-form (second spec)
				':type (first spec)))))
    
(defmethod (parameters parameter-caching-step-mixin) ()
  (declare (values list-of-param-structs))
  parameters)

(defmethod (parameters-for-apply parameter-caching-step-mixin) ()
  (declare (values names-and-values))
  (loop for param in parameters
	append (list (intern (string (parameter-name param))
			     (find-package ':keyword)) 
		     (get-parameter self (parameter-name param)))))

(defmethod (get-parameter parameter-caching-step-mixin) (parameter-name)
  (declare (values parameter-value default-p))
  ;; brighten this up later, signal some error when the parm isn't there
  (setq parameter-name (keywordified-name parameter-name))
  (let ((p (assoc parameter-name parameters)))
    (if (parameter-current-value-p p)
	(values (parameter-current-value p) nil)
	(if (parameter-exists-p script parameter-name)
	    (values (get-parameter script parameter-name) t)
	    (values (if (or (dw::ptypep (parameter-default-form p)
					(parameter-type p))
			    (eq (parameter-default-form p) ':undefined))	; quel kludge
			(parameter-default-form p)
			;; otherwise it better be a string
			(accept-from-string
			  (parameter-type p)
			  (parameter-default-form p)))
		    t)))))

(defmethod (set-parameter parameter-caching-step-mixin) (parameter-name new-value)
  (let ((p (assoc parameter-name parameters)))
    (setf (parameter-current-value p) new-value)
    (setf (parameter-current-value-p p) t)))


(defmethod (prompt-for-parameters parameter-caching-step-mixin) (prompt)
  ;;
  ;; Display a prompt string for this step
  ;;
  (dw:with-redisplayable-output (:unique-id prompt
				 :cache-value prompt
				 :stream *query-io*)
    ;; (format *query-io* " ~%")
    (write-string prompt *query-io*))
  ;;
  ;; see if we want to toggle help-ness for this step
  ;;
  (when (accept 'boolean ':prompt "Show help for this step" ':default nil
		':query-identifier self)
    ;;	      (dw:filling-output (*query-io* :fill-column 800)	; pixels?!?
    ;; this should be done wiht filling-output, but that appears to be 
    ;; completely broken.  Just do it straight for now.
    ;;
    (apply #'dw:redisplayable-format *query-io*
	   (step-help-text self)))
  (write-line "" *query-io*)
  ;;
  (loop for p in parameters 
	do
    (multiple-value-bind (value nil unchanged-p)
	(accept (or (parameter-type p) 'scl:boolean)	;hack!
		':prompt (format nil "  ~A" (parameter-name p))
		':default (get-parameter self
					 (parameter-name p))
		':query-identifier (cons self (parameter-name p))
						; WHY the &^%$&^ isn't 
						; p sufficient to uniquely identifiy this
						; query?  Better yet, why does redisplay
						; barf when we use the param struct, not 
						; just its name?
		)
      (unless unchanged-p
	(set-parameter self (parameter-name p) value)
	))
    ))
;;;
;;; stuff for sorting steps by dependence.  Note! there's a hole here,
;;; in that we collect the steps first, then filter them by who matches
;;; the predicate (typically needs-to-be-done).  That means that if we
;;; somehow get into a situation where there's a step that thinks it's
;;; done, but something it depends on thinks it isn't, we'll miss the
;;; fact that the first step won't show up in the list.  Later...
;;;

(defvar *steps-collected* nil)

(defun step-incomplete-p (step)
  (neq (get-status step) ':complete))

(defmethod (collect-matching-substeps basic-step) (script matching-predicate)
  ;;
  ;; first optionally push all the ones we depend on
  ;;
  (let ((any-subordinates-matched
	  (loop with any-pushed = nil
		for step-name in (step-depends-on self) 
		when
		  (collect-matching-substeps (find-step script step-name) 
					     script
					     matching-predicate)
		  do
		    (setq any-pushed t)
	    finally (return any-pushed))))
    (when (or any-subordinates-matched (funcall matching-predicate self))
      (push (step-name self) *steps-collected*)
      t)))

;;;
;;; One for doing special case things
;;;
(defflavor funcall-step 
	(function
	 (status-checker nil)			; special fun to call to check 
						;  status for this step
	 (help-text nil))			; really a list of text, param names
	(basic-step state-caching-step-mixin parameter-caching-step-mixin)
  :initable-instance-variables)

(defmethod (execute funcall-step) (&optional (override-state nil))
  override-state
  (setq status (and (apply function (parameters-for-apply self))
		    ':complete)))

(defmethod (step-help-text funcall-step) ()
  (when help-text
    (cons (car help-text)
	  (loop for param-name in (cdr help-text) 
		collect
		  (get-parameter self param-name)))))

(defwhopper (get-status funcall-step) ()
  (declare (values status))
  (if status-checker
      (funcall status-checker self)
      (continue-whopper)))

;;;
;;; A no-op step, for use as a placeholder
;;;
(defflavor no-op-step
	()
	(state-caching-step-mixin basic-step))

(define-step-type :no-op no-op-step)

(defmethod (:init no-op-step :after) (&rest ignore)
  (setq invisible t))

(defmethod (parameters no-op-step) ()
  nil)

(defmethod (parameters no-op-step) ()
  nil)

(defmethod (set-parameter no-op-step) (&rest ignore)
  nil)

(defmethod (get-parameter no-op-step) (&rest ignore)
  nil)

(defmethod (execute no-op-step) (ignore)
  )

;;;
;;; And one for starting everything from top level
;;;
(defflavor whole-enchilada			; I suppose I ought to come up with a 
						; better name...
	()
	(no-op-step))

(define-step-type :whole-enchilada whole-enchilada)

;;;
;;; This thing depends on everything, by definition
;;;
(defmethod (step-depends-on whole-enchilada) ()
  (loop for step in (script-steps script)
	unless (eq step self)
	  collect (step-name step)))

(defmethod (execute whole-enchilada) (&optional (override-state nil))
  override-state
  (let ((steps-to-be-performed 
	  (sorted-pending-steps script)))
    (loop for step-name in steps-to-be-performed 
	  as step = (find-step script step-name) 
	  unless (eq step self)			; don't do ourselves recursively!
	    do
	      (execute step)))
  (setq status ':complete)
  )


;;;
;;; making steps
;;;

(defmacro define-step ((step-name script-name)
		       (&key step-type depends-on parameters
			     help-text
			     help-parameters
			     (verbose t)	; comment when doing it
			     status-checker)
		       &body body)
  (define-step-internal script-name step-name step-type 
			depends-on parameters help-text help-parameters verbose
			status-checker body))

(defun define-step-internal (script-name step-name step-type depends-on 
			     parameters help-text help-parameters verbose status-checker
			     body)
  ;;
  ;; allow type to default to same as name, for convenience (?)
  ;;
  (unless step-type 
    (setq step-type step-name))
  ;;
  (let ((step-flavor (second (assoc step-type *step-keyword-to-flavor-alist*))))
    ;;
    ;; make sure we really have a step flavor
    ;;
    (unless step-flavor
      (error "~A is not a defined step type" step-type))
    (let* ((other-init-options
	     (append
	       (cond ((not (member step-type '(:funcall :test)))
		      (when body 
			(error "Only FUNCALL type steps can have BODYs"))
		      nil)
		     (t
		      (unless body
			(error "~A type steps must have a body" step-type))
		      ;;
		      ;; invent a name for the function
		      ;;
		      (list ':function
			    (intern (string-append script-name "-"
						   step-name "-STEP")))))
	       (when parameters
		 (list ':init-parameters parameters))
	       (when status-checker
		 (list ':status-checker status-checker))
	       (when help-text `(:help-text (,help-text ,@help-parameters)))
	       )))
      `(progn
	 ,(let ((name (getf other-init-options ':function)))
	    (when name
	      `(compile ',name 
			,`(lambda (,@(when parameters
				       (cons '&key 
					     (loop for (key . spec) in parameters 
						   when (eq (symbol-package key)
							     (find-package ':keyword))
						     do (setq key (intern (string key)))
						   collect key))))
			    ,@body))))
	 (let* ((script (find-script-named ',script-name))
		;;
		;; Note!  making a new step here has the side effect of causing
		;; old state to be lost if one does this after installing a
		;; system.  If that's not good, we'll come up with a scheme for
		;; saving state.  later.
		;;
		(step-frob (funcall #'make-instance
				    ',step-flavor
				    ':name ',step-name
				    ':script script
				    ':verbose ,verbose
				    ':depends-on ',depends-on	; need to typecheck these
				    ,@(loop for x in other-init-options collect (list 'quote x))
				    )))
	   (add-step script step-frob))
      ))))

