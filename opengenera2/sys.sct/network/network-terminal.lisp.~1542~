;; -*- Mode: Lisp; Package: Network-Internals; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; DEFCONSTANTs (originally from SYS:NETWORK;TELNET)
(DEFCONSTANT TELNET:NVT-IP #O364)
(DEFCONSTANT TELNET:NVT-DM #O362)
(DEFCONSTANT TELNET:NVT-AO #O365)
(DEFCONSTANT TELNET:NVT-AYT #O366)
(DEFCONSTANT TELNET:NVT-ERASE-LINE #O370)
(DEFCONSTANT TELNET:NVT-IAC #O377)
(DEFCONSTANT TELNET:NVT-DONT #O376)
(DEFCONSTANT TELNET:NVT-DO #O375)
(DEFCONSTANT TELNET:NVT-WONT #O374)
(DEFCONSTANT TELNET:NVT-WILL #O373)
(DEFCONSTANT TELNET:NVT-SUBNEGOTIATION-BEGIN #O372)
(DEFCONSTANT TELNET:NVT-SUBNEGOTIATION-END #O360)

(DEFCONSTANT TELNET:ASCII-CR (ASCII-CODE "CR"))
(DEFCONSTANT TELNET:ASCII-LF (ASCII-CODE "LF"))
(DEFCONSTANT TELNET:ASCII-NUL (ASCII-CODE "NUL"))

(DEFCONSTANT TELNET:NVT-SUPDUP-OUTPUT #O26)
(DEFCONSTANT TELNET:NVT-TIMING-MARK #O6)
(DEFCONSTANT TELNET:NVT-SUPPRESS-GO-AHEAD #O3)
(DEFCONSTANT TELNET:NVT-ECHO #O1)
(DEFCONSTANT TELNET:NVT-TRANSMIT-BINARY #O0)
(DEFCONSTANT TELNET:NVT-LOGOUT #O22)


;; Remote login service

(DEFFLAVOR NETWORK-TERMINAL ((NAME NIL) (CONSOLE-LOCATION NIL)) (REMOTE-TERMINAL)
  (:GETTABLE-INSTANCE-VARIABLES NAME CONSOLE-LOCATION))

(DEFMETHOD (:PRINT-SELF NETWORK-TERMINAL) (STREAM IGNORE SLASHIFY-P)
  (IF SLASHIFY-P
      (PRINTING-RANDOM-OBJECT (SELF STREAM :TYPEP))
      (FORMAT STREAM "a ~A server" (SEND SELF :PROTOCOL))))

(DEFMETHOD (MAKE-INSTANCE NETWORK-TERMINAL) (&REST IGNORE)
  (SETQ NAME (FORMAT NIL "~A terminal" (SEND SELF :PROTOCOL))))

(DEFMETHOD (:STRING-FOR-PRINTING NETWORK-TERMINAL) () NAME)

(DEFMETHOD (:INITIALIZE NETWORK-TERMINAL) () NIL)
(DEFMETHOD (:FOREIGN-HOST NETWORK-TERMINAL) () (SEND RAW-STREAM :FOREIGN-HOST))

;; If an EOF is received over the network, then the connection is being closed synchronously.
;; We can't use :CLEAR-EOF and try reading again since some networks do not support clearable
;; EOFs.  If some Chaosnet user side randomly sends EOFs, the connection will be closed.
;; Keyboard EOFs and the :CLEAR-EOF method for remote terminals comes from
;; SI:INTERACTIVE-STREAM, just as it does for the local terminal.

(DEFMETHOD (:INPUT-EDITOR-HELP NETWORK-TERMINAL :AFTER) ()
  (FORMAT T "~&The user host is ~A.  The server host is ~A.~@[~@
	       The remote console is ~S.~]"
	  (SEND (SEND RAW-STREAM :FOREIGN-HOST) :PRETTY-NAME)
	  (SEND *LOCAL-HOST* :PRETTY-NAME)
	  CONSOLE-LOCATION))

(DEFMETHOD (:CURRENT-CONSOLE-LOCATION? NETWORK-TERMINAL) ()
  (LET (INDEX)
    (AND CONSOLE-LOCATION
	 (SETQ INDEX (STRING-SEARCH-CHAR #\SPACE FINGER-LOCATION))
	 (STRING-EQUAL FINGER-LOCATION CONSOLE-LOCATION (1+ INDEX)))))

(DEFUN-IN-FLAVOR (NEW-CONSOLE-LOCATION NETWORK-TERMINAL) ()
  (IF (OR (NULL FINGER-LOCATION) (SEND SELF :CURRENT-CONSOLE-LOCATION?))
      (SETQ FINGER-LOCATION
	    (FORMAT NIL "~A: ~A" (SEND RAW-STREAM :FOREIGN-HOST) CONSOLE-LOCATION))))

;; This is the top level function of the user process.  If a BAD-CONNECTION-STATE error
;; occurs, we can't enter the debugger on TERMINAL-IO since TERMINAL-IO will be dead and
;; trying to print to it will err recursively.  Check that the foreign host of the error is
;; the host of the network terminal.  Bind *INTERACTIVE-HANDLERS* rather than *BOUND-HANDLERS*
;; since the latter is bound to NIL by BREAK and the debugger.  This is a kludge.  Eventually,
;; all network I/O will be done in a process separate from the one which is running
;; SI:LISP-TOP-LEVEL1, so there won't be any need to use *INTERACTIVE-HANDLERS*.

;; Don't unwind-protect the setting of the PROCESS-KILLED locative since it should be possible
;; to safely reset this process.  So, if you return from NETWORK-TERMINAL-TOP-LEVEL using the
;; debugger, the server process will keep the network connection open.  The server process
;; should have some way of really telling that this process is gone rather than using a
;; communication locative.

(DEFUN NETWORK-TERMINAL-USE-COLD-LOAD-STREAM (STRING)
  (TV:NOTIFY NIL "~A~@[ for ~A~] would have entered the cold load stream.  ~A."
	     (IF (INSTANCEP TERMINAL-IO) (SEND TERMINAL-IO :NAME) "A remote terminal")
	     (WHEN (INSTANCEP TERMINAL-IO) (SEND TERMINAL-IO :FOREIGN-HOST)) STRING)
  (THROW 'NETWORK-TERMINAL-EXIT T))

(DEFUN NETWORK-TERMINAL-TOP-LEVEL (NETWORK-TERMINAL PROCESS-KILLED)
  (CATCH 'NETWORK-TERMINAL-EXIT
    (LETF ((#'DBG:USE-COLD-LOAD-STREAM #'NETWORK-TERMINAL-USE-COLD-LOAD-STREAM))
      (REMOTE-TERMINAL-TOP-LEVEL 'SI:LISP-TOP-LEVEL1 NETWORK-TERMINAL)))
  ;; Don't unwind protect this.
  (SETF (CAR PROCESS-KILLED) T))
  
;; For compatibility.
(DEFF TELNET-SERVER-ON #'REMOTE-LOGIN-ON)

(DEFUN (TELNET-SERVER-ON :UNDO-FUNCTION) (FORM)
  (FUNCALL #'(:PROPERTY REMOTE-LOGIN-ON :UNDO-FUNCTION) FORM))

;; This function must catch END-OF-FILE since an EOF could be received while inside the
;; :INITIALIZE method.  Make sure that the user process is killed before exiting this function
;; so that it doesn't try to do I/O to a stream which has been closed locally by the server
;; process.

(DEFUN NETWORK-TERMINAL-SERVER (PROTOCOL TERMINAL-FLAVOR STREAM HOST NETWORK)
  (LET (NETWORK-TERMINAL USER-PROCESS PROCESS-KILLED NETWORK-ERROR?)
    (UNWIND-PROTECT
      (CONDITION-CASE ()
	  (COND ((NOT (OR REMOTE-LOGIN-ON
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")			  0(MEMBER USER-ID '(NIL ""))
			  ))
		 (SEND STREAM :REJECT (FORMAT NIL "This machine is in use by ~A." USER-ID)))
		(T (WHEN (MEMQ REMOTE-LOGIN-ON '(NIL :NOTIFY))
		     (TV:NOTIFY NIL "The ~A server is being used by ~A via ~A"
				PROTOCOL HOST NETWORK))
		   (SEND STREAM :ACCEPT)
		   (SETQ NETWORK-TERMINAL (MAKE-INSTANCE TERMINAL-FLAVOR :RAW-STREAM STREAM))
		   (SEND NETWORK-TERMINAL :INITIALIZE)
		   (PRINT-TERMINAL-HERALD NETWORK-TERMINAL)
		   ;; Wait until the notification is delivered, so that it doesn't appear on the newly
		   ;; arrived terminal.  We really only have to wait until the value of *REMOTE-TERMINALS*
		   ;; has been read by the notification delivery process.
		   ;;
		   ;; Only wait up to 2 sec, though, as the local host could have pop-up 
		   ;; notifications inhibited.  There ought to be a better way to do this...
		   (IF (EQ REMOTE-LOGIN-ON :NOTIFY)
		       (PROCESS-WAIT-WITH-TIMEOUT "Deliver Notification" (* 60. 2)
			 #'(LAMBDA ()
			     (STRING-EQUAL
			       (PROCESS-WHOSTATE TV:*NOTIFICATION-PROCESS*)
			       "Notification Wait"))))
		   (PUSH NETWORK-TERMINAL *REMOTE-TERMINALS*)
		   (SETQ USER-PROCESS
			 (PROCESS-RUN-RESTARTABLE-FUNCTION
			   (SEND NETWORK-TERMINAL :NAME) 'NETWORK-TERMINAL-TOP-LEVEL
			   NETWORK-TERMINAL (LOCF PROCESS-KILLED)))
		   (PROCESS-WAIT "Server Wait" #'CAR (LOCF PROCESS-KILLED))))
	((REMOTE-NETWORK-ERROR END-OF-FILE)
	 (SETQ NETWORK-ERROR? T)))
      (WHEN NETWORK-TERMINAL
	(SETQ *REMOTE-TERMINALS* (DELQ NETWORK-TERMINAL *REMOTE-TERMINALS*))
	(IF (SEND NETWORK-TERMINAL :CURRENT-CONSOLE-LOCATION?)
	    (SETQ FINGER-LOCATION NIL)))
      (WHEN (AND USER-PROCESS (NOT PROCESS-KILLED))
	(SEND USER-PROCESS :KILL)
	(UNLESS NETWORK-ERROR?
	  (SEND STREAM :CLOSE-WITH-REASON
		(FORMAT NIL "The ~A server process has been killed locally." PROTOCOL)
		:ABORT))))))

(DEFPROP DEFINE-REMOTE-LOGIN-SERVER DEFINE-SERVER ZWEI:DEFINITION-FUNCTION-SPEC-TYPE)

(DEFMACRO DEFINE-REMOTE-LOGIN-SERVER (PROTOCOL TERMINAL-FLAVOR &REST OTHER-TERMINAL-FLAVORS)
  `(PROGN
     (DEFMETHOD (:PROTOCOL ,TERMINAL-FLAVOR) () ,PROTOCOL)
     (COMPILE-FLAVOR-METHODS ,@OTHER-TERMINAL-FLAVORS ,TERMINAL-FLAVOR)
     (DEFINE-SERVER ,PROTOCOL
		    (:MEDIUM :BYTE-STREAM :REJECT-UNLESS-TRUSTED T :WHO-LINE T :NO-EOF T
		     :STREAM (STREAM :ACCEPT-P NIL :CHARACTERS NIL)
		     :HOST HOST :NETWORK NETWORK
		     :ERROR-DISPOSITION :DEBUGGER)
	(NETWORK-TERMINAL-SERVER ,PROTOCOL ',TERMINAL-FLAVOR STREAM HOST NETWORK))))

;; TTY-LOGIN Server

(DEFFLAVOR TTY-LOGIN-TERMINAL () (NETWORK-TERMINAL ASCII-TERMINAL) :ABSTRACT-FLAVOR)

(DEFFLAVOR PRINTING-TTY-LOGIN-TERMINAL () 
	   (SI:PRINTING-INPUT-EDITOR PRINTING-TERMINAL-MIXIN TTY-LOGIN-TERMINAL))

(DEFFLAVOR DISPLAY-TTY-LOGIN-TERMINAL () 
	   (SI:DISPLAY-INPUT-EDITOR DISPLAY-TERMINAL-MIXIN TTY-LOGIN-TERMINAL))
;;; Little modularity problem.
(DEFMETHOD (:PROTOCOL DISPLAY-TTY-LOGIN-TERMINAL) () :TTY-LOGIN)

(DEFMETHOD (REMOTE-TERMINAL-FLAVOR TTY-LOGIN-TERMINAL) ()
  (IF (SEND SELF :CURSOR-MOTION?) 'DISPLAY-TTY-LOGIN-TERMINAL 'PRINTING-TTY-LOGIN-TERMINAL))

(DEFINE-REMOTE-LOGIN-SERVER :TTY-LOGIN
			    PRINTING-TTY-LOGIN-TERMINAL	;Assume non-display initially
			    TTY-LOGIN-TERMINAL DISPLAY-TTY-LOGIN-TERMINAL)

;; TELNET Server

(DEFFLAVOR TELNET-TERMINAL
	((LAST-RETURN NIL))
	(NETWORK-TERMINAL ASCII-TERMINAL) :ABSTRACT-FLAVOR)

(DEFFLAVOR PRINTING-TELNET-TERMINAL () 
	   (SI:PRINTING-INPUT-EDITOR PRINTING-TERMINAL-MIXIN TELNET-TERMINAL))

(DEFFLAVOR DISPLAY-TELNET-TERMINAL () 
	   (SI:DISPLAY-INPUT-EDITOR DISPLAY-TERMINAL-MIXIN TELNET-TERMINAL))
(DEFMETHOD (:PROTOCOL DISPLAY-TELNET-TERMINAL) () :TELNET)

(DEFMETHOD (REMOTE-TERMINAL-FLAVOR TELNET-TERMINAL) ()
  (IF (SEND SELF :CURSOR-MOTION?) 'DISPLAY-TELNET-TERMINAL 'PRINTING-TELNET-TERMINAL))

(DEFMETHOD (:INITIALIZE TELNET-TERMINAL) ()
  (SEND RAW-STREAM :TYO TELNET:NVT-IAC)
  (SEND RAW-STREAM :TYO TELNET:NVT-WILL)
  (SEND RAW-STREAM :TYO TELNET:NVT-ECHO))

(DEFVAR *TELNET-IGNORE-NUL-AFTER-CR-LF* NIL)

(DEFMETHOD (:LISPM-CHAR TELNET-TERMINAL) (OPERATION)
  ;; There is a general problem with Telnet clients regarding line termination characters.
  ;; Some implementations send CR, some send CRLF, some send just LF.  To make matters worse,
  ;; some implementations stick a NUL after the line terminator character(s) which we can
  ;; confuse with toggling the shift bit (c-@)!  There is a lot of hair in here to catch CR,
  ;; LF, and NUL characters to determine what to send.  There is also an assumption that a
  ;; line termination character will not be broken across a buffer boundary.  That is a weak
  ;; assumption but it involes less hair than remembering what kind of line-termination a
  ;; given implementation is using.  - ESC 1/8/93
  (FLET ((READ-TELNET-CHAR (OPERATION)
	   (DECLARE (SYS:DOWNWARD-FUNCTION))
	   (LOOP FOR CHAR = (SEND RAW-STREAM OPERATION T) DO
		 (COND
		   ;; EOF or :TYI-NO-HANG
		   ((NULL CHAR)
		    (LET ((LAST-LAST-RETURN LAST-RETURN))
		      ;; Clear LAST-RETURN regardless since this implies a buffer/packet
		      ;; boundary
		      (SETQ LAST-RETURN NIL)
		      (IF (EQ LAST-LAST-RETURN :CR)
			  ;; We have received a CR, so return the #\return (CR case below)
			  (RETURN #\RETURN)
			  (RETURN NIL))))
		   ;; TELNET Escape
		   ((= CHAR TELNET:NVT-IAC)
		    (SELECTOR (SEND RAW-STREAM :TYI T) =
		      (TELNET:NVT-IAC
		       (RETURN (CONVERT-ASCII-TO-LISPM TELNET:NVT-IAC)))
		      (TELNET:NVT-DO
		       (SELECT (SEND RAW-STREAM :TYI T)
			 (TELNET:NVT-LOGOUT
			  (THROW 'NETWORK-TERMINAL-EXIT T))))
		      ;; Ignore these for now
		      ((TELNET:NVT-DONT TELNET:NVT-WILL TELNET:NVT-WONT)
		       (SEND RAW-STREAM :TYI T))))
		   ;; We need to interpret CR, CR-LF, LF, CR-NULL, CR-LF-NULL, and LF-NULL all
		   ;; as #\RETURN but we have to be careful of CR-CR, CR-LF-CR-LF, and LF-LF
		   ((= CHAR TELNET:ASCII-CR)
		    (LET ((LAST-LAST-RETURN LAST-RETURN))
		      (SETQ LAST-RETURN :CR)
		      (WHEN LAST-LAST-RETURN	;CR-CR
			(RETURN #\RETURN))))
		   ((= CHAR TELNET:ASCII-LF)
		    (SETQ LAST-RETURN :LF)
		    ;; Always return a return from LF to handle CR-LF and LF
		    (RETURN #\RETURN))
		   ;; There is a remote possibility that someone could type "Return c-@" fast
		   ;; enough or the server was slow enough that the NUL (c-@) would show up in
		   ;; the same buffer.  In that case the c-@ will be lost.  I don't think it
		   ;; is dependable to set a timer to catch these cases since the timer is
		   ;; just as vulnerable.
		   ((= CHAR TELNET:ASCII-NUL)
		    (IF (NOT LAST-RETURN)
			(RETURN (CONVERT-ASCII-TO-LISPM CHAR))	;Leave it alone
			(SETQ LAST-RETURN NIL)	;CR-NULL, CR-LF-NULL
			(RETURN #\RETURN)))		    
		   (T (RETURN (CONVERT-ASCII-TO-LISPM CHAR)))))))
    (ASCII-TERMINAL-FILTER #'READ-TELNET-CHAR OPERATION)))

(DEFINE-REMOTE-LOGIN-SERVER :TELNET PRINTING-TELNET-TERMINAL	;Assume non-display initially
				    TELNET-TERMINAL DISPLAY-TELNET-TERMINAL)

;; SUPDUP Server

;; ITS Output Buffer codes -- 0-177 are graphic characters which are output as is.
;; The %TD codes control cursor movement and other terminal functions.  Comments
;; describe code function, arguments, and conditions in which the code can be used.

(DEFCONSTANT %TDEOF 202)    ;Clear to end of page
(DEFCONSTANT %TDEOL 203)    ;Clear to end of line
(DEFCONSTANT %TDDLF 204)    ;Delete character after cursor, without moving cursor
(DEFCONSTANT %TDCRL 207)    ;Newline character, clears to end of line on the new line
(DEFCONSTANT %TDNOP 210)    ;No-op
(DEFCONSTANT %TDBS  211)    ;Backspace
			    ; use only if %TORAW set
(DEFCONSTANT %TDLF  212)    ;Linefeed
			    ; use only if %TORAW set
(DEFCONSTANT %TDRCR 213)    ;Carriage return
			    ; use only if %TORAW set
(DEFCONSTANT %TDQOT 215)    ;Quote next character
(DEFCONSTANT %TDFS  216)    ;Move cursor forward one column
(DEFCONSTANT %TDMV0 217)    ;Move cursor
			    ; arguments are vertical and horizontal position
(DEFCONSTANT %TDCLR 220)    ;Clear screen and home cursor
(DEFCONSTANT %TDBEL 221)    ;Ring bell
(DEFCONSTANT %TDILP 223)    ;Insert Lines
			    ; argument is number of lines
			    ; use only if %TOLID set
(DEFCONSTANT %TDDLP 224)    ;Delete Lines
			    ; argument is number of lines
			    ; use only if %TOLID set
(DEFCONSTANT %TDICP 225)    ;Insert Characters
			    ; argument is number of characters
			    ; use only if %TOCID set
(DEFCONSTANT %TDDCP 226)    ;Delete Characters
			    ; argument is number of characters
			    ; use only if %TOCID set
(DEFCONSTANT %TDRSU 232)    ;Region Scroll Up
			    ; arguments are region height and number of lines
			    ; use only if %TPRSC set
(DEFCONSTANT %TDRSD 233)    ;Region Scroll Down
			    ; arguments are region height and number of lines
			    ; use only if %TPRSC set

;; ITS TTYOPT word -- describes terminal capabilities.
;; Left half fields begin with %TO, right hand with %TP.

(DEFCONSTANT %TOSAI 4000_18.)	;Sail character set
(DEFCONSTANT %TOOVR 1000_18.)	;Overstriking
(DEFCONSTANT %TOMVU  400_18.)	;Can move cursor up, i.e. is a video terminal
(DEFCONSTANT %TORAW   40_18.)	;Suppress cursor motion optimization
(DEFCONSTANT %TOFCI   10_18.)	;Can generate ITS 12-bit character set
				;%TPCBS (control-back-slash) will also be on
(DEFCONSTANT %TOLID    2_18.)	;Can insert/delete lines
(DEFCONSTANT %TOCID    1_18.)	;Can insert/delete characters

(DEFCONSTANT %TPMTA      400)	;Interpret 8th bit as meta
(DEFCONSTANT %TPRSC        4)	;Can scroll region

;; ITS 12-bit character representation.

;; %TXTOP = 4000   Top
;; %TXSFL = 2000   Shift lock (Hyper)
;; %TXSFT = 1000   Shift (Super)
;; %TXMTA =  400   Meta
;; %TXCTL =  200   Control
;; %TXASC =  177   Ascii part of character

;; ITS representation is confusing -- some examples:
;; BS is 10 (Ascii Control-H), Control-H is %TXCTL+110 (Ascii H),
;;  Lambda is %TXTOP+10 [not %TXTOP+V] and HELP is %TXTOP+110 (4110).
;; CALL is 32 (Ascii Control-Z), Control-Z is %TXCTL+132 (Ascii Z),
;;  Not-Equal is %TXTOP+32, Control-CALL is %TXCTL+32,
;;  and Control-Not-Equal is %TXCTL+%TXTOP+32.

;; Note that it is impossible to distinguish Back-Next from Control-_
;; in this representation.

(DEFFLAVOR SUPDUP-TERMINAL (TTYOPT) 
	   (SI:DISPLAY-INPUT-EDITOR NETWORK-TERMINAL DISPLAY-TERMINAL-MIXIN)
  (:GETTABLE-INSTANCE-VARIABLES TTYOPT))

(DEFMETHOD (:META-KEY? SUPDUP-TERMINAL) () (BIT-TEST %TPMTA TTYOPT))
(DEFMETHOD (:CURSOR-MOTION? SUPDUP-TERMINAL) () (BIT-TEST %TOMVU TTYOPT))
(DEFMETHOD (:ASCII-KEYBOARD? SUPDUP-TERMINAL) () (NOT (BIT-TEST %TOFCI TTYOPT)))  

(DEFMETHOD (:INPUT-EDITOR-HELP SUPDUP-TERMINAL) ()
  (IF (SEND SELF :ASCII-KEYBOARD?) (ASCII-TERMINAL-HELP SELF)))

;; Reads an 18 bit byte as three 6 bit bytes, right justified.
;; The high order bits arrive first.

(DEFUN-IN-FLAVOR (READ-SUPDUP-BYTE SUPDUP-TERMINAL) ()
  (DPB (SEND RAW-STREAM :TYI T)
       (BYTE 6 12.) (DPB (SEND RAW-STREAM :TYI T)
			 (BYTE 6 6) (SEND RAW-STREAM :TYI T))))

(DEFUN-IN-FLAVOR (READ-SUPDUP-OPTIONS SUPDUP-TERMINAL) ()
  (VALUES-LIST
    (LOOP REPEAT (- 1_18. (PROG1 (READ-SUPDUP-BYTE) (READ-SUPDUP-BYTE)))
	  COLLECT (DPB (READ-SUPDUP-BYTE) (BYTE 18. 18.) (READ-SUPDUP-BYTE)))))

(DEFMETHOD (:INITIALIZE SUPDUP-TERMINAL) ()
  (LOOP FOR C BEING THE ARRAY-ELEMENTS OF (SEND *LOCAL-HOST* :PRETTY-NAME)
	DO (SEND RAW-STREAM :TYO (CHAR-TO-ASCII C)))
  (SEND RAW-STREAM :TYO (ASCII-CODE "CR"))
  (SEND RAW-STREAM :TYO (ASCII-CODE "LF"))
  (SEND RAW-STREAM :TYO %TDNOP)
  (SEND RAW-STREAM :FORCE-OUTPUT)
  (MULTIPLE-VALUE (NIL TTYOPT HEIGHT WIDTH NIL NIL INPUT-SPEED OUTPUT-SPEED)
    (READ-SUPDUP-OPTIONS))
  (SETQ SAIL-DISPLAY? (BIT-TEST %TOSAI TTYOPT))
  (SETQ CAN-OVERSTRIKE? (BIT-TEST %TOOVR TTYOPT))
  (SEND SELF :SET-SIZE NIL NIL))

(DEFVAR SUPDUP-TOP-CHARACTERS
	'((#.(ASCII-CODE #\A) . #\FUNCTION)
	  (#.(ASCII-CODE #\B) . #\SUSPEND)
	  (#.(ASCII-CODE #\C) . #\CLEAR-INPUT)
	  (#.(ASCII-CODE #\H) . #\HELP)
	  #+CADR (#.(ASCII-CODE #\m) . #\MACRO)
	  #+CADR (#.(ASCII-CODE #\q) . #\QUOTE)
	  (#.(ASCII-CODE #\o) . #\BACKSPACE)
	  #+CADR (#.(ASCII-CODE #\h) . #\HOLD-OUTPUT)
	  #+CADR (#.(ASCII-CODE #\s) . #\STOP-OUTPUT)
	  (#.(ASCII-CODE #\a) . #\ABORT)
	  (#.(ASCII-CODE #\n) . #\NETWORK)
	  #+CADR (#.(ASCII-CODE #\S) . #\STATUS)
	  (#.(ASCII-CODE #\e) . #\END)
	  (#.(ASCII-CODE #\1) . #\SQUARE)
	  (#.(ASCII-CODE #\2) . #\CIRCLE)
	  (#.(ASCII-CODE #\3) . #\TRIANGLE)
	  #+CADR (#.(ASCII-CODE #\4) . #\ROMAN-IV)
	  #+CADR (#.(ASCII-CODE #\u) . #\HAND-UP)
	  #+CADR (#.(ASCII-CODE #\d) . #\HAND-DOWN)
	  #+CADR (#.(ASCII-CODE #\l) . #\HAND-LEFT)
	  #+CADR (#.(ASCII-CODE #\r) . #\HAND-RIGHT)
	  ))

(DEFUN-IN-FLAVOR (CONVERT-SUPDUP-TO-LISPM SUPDUP-TERMINAL) (CONTROL-BITS ASCII)
  (LET ((LISPM (FLET ((PROPERLY-SHIFTED-ASCII ()
			(IF (AND (LDB-TEST (BYTE 4 0) CONTROL-BITS)
				 (OR ( #o101 ASCII #o132)
				     ( #o141 ASCII #o172)))
			    ;; The control key and the a key means c-A, not c-sh-A.
			    (LOGXOR ASCII #o40)
			    ASCII)))
		 (COND ((BIT-TEST 1_4 CONTROL-BITS)
			(COND ((< ASCII (ASCII-CODE "SP")) (CODE-CHAR ASCII))
			      ((CDR (ASSQ ASCII SUPDUP-TOP-CHARACTERS)))
			      (T (FERROR "~O is an unknown character with the Top bit set"
					 ASCII))))
		       ((SEND SELF :ASCII-KEYBOARD?)
			(CONVERT-ASCII-TO-LISPM (PROPERLY-SHIFTED-ASCII)))
		       ;; Page and Refresh are both sent as 14.
		       ((= ASCII #o014) #\REFRESH)
		       ;; ^Z is Abort.
		       ((= ASCII #o032) #\ABORT)
		       (T (ASCII-TO-CHAR (PROPERLY-SHIFTED-ASCII)))))))
    ;; Merge the control bits which come from CONTROL-BITS and from CONVERT-ASCII-TO-LISPM.
    (MAKE-CHAR LISPM (LOGIOR (LDB (BYTE 4 0) CONTROL-BITS) (CHAR-BITS LISPM)))))

(DEFUN-IN-FLAVOR (READ-CONSOLE-LOCATION SUPDUP-TERMINAL) ()
  (SETQ CONSOLE-LOCATION (MAKE-ARRAY 40. :TYPE 'ART-STRING :FILL-POINTER 0))
  (LOOP FOR C = (SEND RAW-STREAM :TYI T)
	UNTIL (ZEROP C)
	DO (ARRAY-PUSH-EXTEND CONSOLE-LOCATION (ASCII-TO-CHAR C)))
  (NEW-CONSOLE-LOCATION))

;; Make up for temporary deficiencies in the Supdup user end.

(DEFUN SUPDUP-KLUDGE-FILTER (CHAR)
  (SELECTQ CHAR
    (#\ #\ESCAPE)		;Lozenge, Escape, and Complete all are sent as 33
    (#\CONTROL- #\END)		;Control- and End are both sent as 101 33
    (#\CONTROL-H #\RESUME)	;Control-H and Resume are both sent as  101 110
    (OTHERWISE CHAR)))

(DEFMETHOD (:LISPM-CHAR SUPDUP-TERMINAL) (OPERATION)
  ;; Reads a single character in Lisp Machine format.
  ;; Interprets the intelligent terminal protocol, and assumes that it is enabled all
  ;; the time.  ^\ (34) is the command escape.
  (FLET ((READ-SUPDUP-CHAR (OPERATION)
	   (DECLARE (SYS:DOWNWARD-FUNCTION))
	   (LOOP FOR CHAR = (SEND RAW-STREAM OPERATION T) DO
		 (COND
		   ;; :TYI-NO-HANG and no input available
		   ((NULL CHAR)
		    (RETURN NIL))
		   ;; SUPDUP Escape
		   ((= CHAR 300)
		    (SETQ CHAR (SEND RAW-STREAM :TYI T))
		    (SELECTOR CHAR =
		      ;; Logout
		      (301 (THROW 'NETWORK-TERMINAL-EXIT T))
		      ;; Sending the console location
		      (302 (READ-CONSOLE-LOCATION))
		      (T (FERROR "~O is an unknown supdup escape code" CHAR))))
		   ;; Intelligent Terminal Protocol Escape
		   ((= CHAR 034)
		    (SETQ CHAR (SEND RAW-STREAM :TYI T))
		    (COND
		      ;; ^\ ^C means the screen is messed up.  Ignore for now and try again.
		      ;; Hack output reset and ^\ ^P later.
		      ((= CHAR 003))
		      ;; Transmitting ^\ twice sends one through.
		      ((= CHAR 034)
		       (RETURN #\CONTROL-\))
		      ;; The low five bits of characters @ through _ transmit meta bits.
		      (( CHAR 100)
		       (RETURN (CONVERT-SUPDUP-TO-LISPM CHAR (SEND RAW-STREAM :TYI T))))
		      ;; Bomb out on anything else.
		      (T (FERROR "~O is an unkown intelligent terminal protocol code" CHAR))))
		   ;; Ordinary input character
		   (T (RETURN (CONVERT-SUPDUP-TO-LISPM 0 CHAR))))
		 ;; Force output before going blocked again.
		 ;; (REMOTE-TERMINAL :LISPM-CHAR) takes care of it
		 ;; just before we enter this method.
		 (SEND SELF :FORCE-OUTPUT-IF-NECESSARY))))
    (IF (SEND SELF :ASCII-KEYBOARD?)
	(ASCII-TERMINAL-FILTER #'READ-SUPDUP-CHAR OPERATION)
	(SUPDUP-KLUDGE-FILTER (READ-SUPDUP-CHAR OPERATION)))))

;; Output operations.

(DEFMETHOD (:BEEP-RAW SUPDUP-TERMINAL) () (SEND RAW-STREAM :TYO %TDBEL))

(DEFMETHOD (:NEW-LINE-RAW SUPDUP-TERMINAL) () (SEND RAW-STREAM :TYO %TDCRL))

;; The ( X 0) is to compensate for a bug in the Lispm supdup user end.
;; This bug has been fixed in 247, but we have to leave this in for the benefit of older systems.

(DEFMETHOD (:SET-CURSORPOS-RAW SUPDUP-TERMINAL) (X Y)
  (LET (COUNT)
    (COND ((AND (= X CURSOR-X-RAW) ( X 0)
		( 1 (SETQ COUNT (- Y CURSOR-Y-RAW)) 3))
	   (LOOP REPEAT COUNT DO (SEND RAW-STREAM :TYO %TDLF)))
	  ((AND (= Y CURSOR-Y-RAW)
		(COND ((= X 0)
		       (SEND RAW-STREAM :TYO %TDRCR)
		       T)
		      (( 1 (SETQ COUNT (- CURSOR-X-RAW X)) 3)
		       (LOOP REPEAT COUNT DO (SEND RAW-STREAM :TYO %TDBS))
		       T)
		      (( 1 (SETQ COUNT (- X CURSOR-X-RAW)) 3)
		       (LOOP WITH CHAR = (IF (OR CAN-OVERSTRIKE? RAW-LINE-CLEAR?)
					     (ASCII-CODE "SP")
					     %TDFS)
			     REPEAT COUNT DO (SEND RAW-STREAM :TYO CHAR))
		       T))))
	  (T (SEND RAW-STREAM :TYO %TDMV0)
	     (SEND RAW-STREAM :TYO Y)
	     (SEND RAW-STREAM :TYO X)))))

(DEFMETHOD (:CLEAR-WINDOW-RAW SUPDUP-TERMINAL) ()
  (SEND RAW-STREAM :TYO %TDCLR))

(DEFMETHOD (:CLEAR-REST-OF-WINDOW-RAW SUPDUP-TERMINAL) ()
  (SEND RAW-STREAM :TYO %TDEOF))

(DEFMETHOD (:CLEAR-REST-OF-LINE-RAW SUPDUP-TERMINAL) ()
  (SEND RAW-STREAM :TYO %TDEOL))

;; %TDDLF only seems to work for consoles which can overstrike.

(DEFMETHOD (:CLEAR-CHAR-RAW SUPDUP-TERMINAL) (CHAR)
  CHAR  ;Ignored.  All characters have the same width.
  (SEND RAW-STREAM :TYO %TDDLF))

(DEFMETHOD (:INSERT-CHAR-RAW SUPDUP-TERMINAL) (COUNT)
  (SEND RAW-STREAM :TYO %TDICP)
  (SEND RAW-STREAM :TYO COUNT))

(DEFMETHOD (:DELETE-CHAR-RAW SUPDUP-TERMINAL) (COUNT)
  (SEND RAW-STREAM :TYO %TDDCP)
  (SEND RAW-STREAM :TYO COUNT))

(DEFMETHOD (:INSERT-LINE-RAW SUPDUP-TERMINAL) (COUNT)
  (SEND RAW-STREAM :TYO %TDILP)
  (SEND RAW-STREAM :TYO COUNT))

(DEFMETHOD (:DELETE-LINE-RAW SUPDUP-TERMINAL) (COUNT)
  (SEND RAW-STREAM :TYO %TDDLP)
  (SEND RAW-STREAM :TYO COUNT))

(DEFINE-REMOTE-LOGIN-SERVER :SUPDUP SUPDUP-TERMINAL)

(DEFFLAVOR 3600-TERMINAL () (NETWORK-TERMINAL DISPLAY-TERMINAL-MIXIN SI:DISPLAY-INPUT-EDITOR))

(DEFMETHOD (:INITIALIZE 3600-TERMINAL) ()
  (SETQ SAIL-DISPLAY? T)
  (SETQ CAN-OVERSTRIKE? T)
  ;; Get the screen size and the console location before doing any output.
  (LOOP FOR TIMEOUT = (+ (TIME) 120.) DO
    (SEND RAW-STREAM :INPUT-WAIT "Initialize"
	  (LAMBDA (TIMEOUT) (TIME-LESSP TIMEOUT (TIME)))
	  TIMEOUT)
    (WHEN (TIME-LESSP TIMEOUT (TIME))
      (RETURN NIL))
    (SEND SELF :LISPM-CHAR :TYI-NO-HANG)))

(DEFMETHOD (:CURSOR-MOTION? 3600-TERMINAL) () T)
(DEFMETHOD (:ASCII-KEYBOARD? 3600-TERMINAL) () NIL)

;; Input side

;; Input side

(DEFMETHOD (:LISPM-CHAR 3600-TERMINAL) (OPERATION)
  (LOOP FOR CODE = (SEND RAW-STREAM OPERATION T) DO
    ;; :TYI-NO-HANG and no input available
    (WHEN (NULL CODE) (RETURN NIL))
    ;; Otherwise, the first byte tells us what to do with the input.
    ;; Note that even :TYI-NO-HANG may hang here waiting for input.
    (SELECTQ CODE
      ;; Logout
      (0 (THROW 'NETWORK-TERMINAL-EXIT T))
      ;; Screen size in characters
      (1 (SEND SELF :SET-SIZE (SEND RAW-STREAM :TYI T) (SEND RAW-STREAM :TYI T)))
      ;; Sending the console location
      (2 (LET ((LENGTH (SEND RAW-STREAM :TYI T)))
	   (SETQ CONSOLE-LOCATION (MAKE-ARRAY LENGTH :TYPE 'ART-STRING))
	   (LOOP FOR I FROM 0 BELOW LENGTH DO
	     (SETF (AREF CONSOLE-LOCATION I) (CODE-CHAR (SEND RAW-STREAM :TYI T))))))
      ;; Character with an 8 bit BITS field and an 8 bit CODE field.
      (3 (LET ((BITS (SEND RAW-STREAM :TYI T)))
	   (RETURN (CODE-CHAR (SEND RAW-STREAM :TYI T) BITS))))
      ;; Reserved for future use
      (OTHERWISE
       (FERROR "~D is an unknown 3600-TERMINAL escape code" CODE)))))

(DEFMACRO DEFINE-3600-TERMINAL-OPERATIONS (&BODY OPERATIONS)
  `(PROGN . ,(LOOP FOR (OPERATION ARG-COUNT) IN OPERATIONS
		   AS ARG-LIST = (LOOP REPEAT ARG-COUNT COLLECT (GENSYM))
		   AS CODE FROM 200
		   COLLECT `(DEFMETHOD (,OPERATION 3600-TERMINAL) ,ARG-LIST
			      (SEND RAW-STREAM :TYO ,CODE)
			      . ,(LOOP FOR ARG IN ARG-LIST
				       COLLECT `(SEND RAW-STREAM :TYO ,ARG))))))

(DEFINE-3600-TERMINAL-OPERATIONS
  (:BEEP-RAW 0)
  (:NEW-LINE-RAW 0)
  (:CLEAR-WINDOW-RAW 0)
  (:CLEAR-REST-OF-WINDOW-RAW 0)
  (:CLEAR-REST-OF-LINE-RAW 0)
  (:INSERT-CHAR-RAW 1)
  (:DELETE-CHAR-RAW 1)
  (:SET-CURSORPOS-RAW 2))

(DEFINE-REMOTE-LOGIN-SERVER :3600-LOGIN 3600-TERMINAL)
