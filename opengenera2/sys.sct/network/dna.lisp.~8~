;;; -*- Mode: LISP; Package: NETWORK-INTERNALS; Syntax: Zetalisp; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; System support for Digital Network Architecture (aka DNA, DECnet) networks.
;;; This is the part of the DNA system that is included in the basic system.

;;;
;;; This is what DNA addresses look like
;;;
(DEFSTRUCT (DNA-ADDRESS (:TYPE :FIXNUM) :ALTERANT :CONSTRUCTOR :CONC-NAME)
  ((NODE-ID #O0020)
   (HOST-ID #O0012)
   (AREA-ID #O1206)))

;;; Utility functions
(DEFUN PARSE-DNA-ADDRESS (ADDRESS-STRING)
  (IF (NOT (STRINGP ADDRESS-STRING))
      (FERROR "Address String (~S) is not a string" ADDRESS-STRING)
      (MULTIPLE-VALUE-BIND (AREA DELIM)
	  (PARSE-NUMBER ADDRESS-STRING 0)
	(WHEN (= DELIM (ARRAY-LENGTH ADDRESS-STRING))
	  (FERROR "DNA address strings must have an area field"))
	(LET ((HOST (PARSE-NUMBER ADDRESS-STRING (1+ DELIM))))
	  (OR (AND AREA (< 0 AREA) ( AREA (DNA-ADDRESS-AREA-ID
					     (MAKE-DNA-ADDRESS AREA-ID -1)))
		   HOST (< 0 HOST) ( HOST (DNA-ADDRESS-HOST-ID
					     (MAKE-DNA-ADDRESS HOST-ID -1)))
		   (MAKE-DNA-ADDRESS HOST-ID HOST AREA-ID AREA))
	      (FERROR "Invalid dna address [~A]." ADDRESS-STRING))))))

(DEFUN UNPARSE-DNA-ADDRESS (ADDRESS)
  (FORMAT NIL "~D.~D" (DNA-ADDRESS-AREA-ID ADDRESS) (DNA-ADDRESS-HOST-ID ADDRESS)))

;;; Namespace database network objects defflavor and required methods.
(DEFPROP :DNA DNA-NETWORK NETWORK-TYPE-FLAVOR)

(DEFFLAVOR DNA-NETWORK
	((DECNET NIL))				;Forwards to functional instance
	(NETI:HOST-FROM-ADDRESS-MIXIN
	 NETI:NETWORK))


(DEFMETHOD (:INIT DNA-NETWORK :AFTER) (IGNORE)
  (SETQ CLASS :NETWORK)
  (SETQ NAMES NIL))

;;; These two methods are here for speed and to avoid namespace validation.

(DEFMETHOD (:TYPE DNA-NETWORK) () ':DNA)

(DEFMETHOD (:NETWORK-TYPEP DNA-NETWORK) (TYPE) (EQ TYPE ':DNA))

(DEFMETHOD (:PARSE-ADDRESS DNA-NETWORK) (ADDRESS-STRING)
  (PARSE-DNA-ADDRESS ADDRESS-STRING))

(DEFMETHOD (:UNPARSE-ADDRESS DNA-NETWORK) (ADDRESS)
  (UNPARSE-DNA-ADDRESS ADDRESS))

(DEFMETHOD (:DESIRABILITY DNA-NETWORK) (&OPTIONAL FOR-HOST)
  (IF DECNET
      (SEND DECNET :DESIRABILITY FOR-HOST)
      .01S0))

(DEFMETHOD (:GET-ADDRESS-FOR-HOST-OBJECT DNA-NETWORK) (OBJECT)
  ;; This method is called for value - it returns either the OBJECT's
  ;; dna address or NIL if it can't determine the address, for
  ;; whatever reason.
  (LET* ((NET-ADDRESSES	(NETI:HOST-NETWORK-ADDRESSES OBJECT))
	 (DNA-ADDRESS-PAIR (ASSQ SELF NET-ADDRESSES)))
    (WHEN DNA-ADDRESS-PAIR
      (LET ((ADDRESS (CADR DNA-ADDRESS-PAIR)))
	(COND ((NUMBERP ADDRESS) ADDRESS)
	      (T (FERROR "Address ~S is wrong type.  Expected a number."
			 ADDRESS)))))))

;;; [Note: key methods like :ENABLE, :RESET and so forth are defined in the actual
;;; DNA system itself.]

;;; Method stubs
(DEFMACRO DEF-DNA-METHOD-STUB (METHOD-NAME ARGLIST)
  `(DEFMETHOD (,METHOD-NAME DNA-NETWORK) ,ARGLIST
     (WHEN DECNET (SEND DECNET ,METHOD-NAME ,@ARGLIST))))

(DEF-DNA-METHOD-STUB :NETWORK-SUPPORTED (NETWORK))
(DEF-DNA-METHOD-STUB :PROTOCOL-ADDRESS (NETWORK))
(DEF-DNA-METHOD-STUB :ADDRESS-RESOLUTION-PARAMETERS ())
(DEF-DNA-METHOD-STUB :RESOLVE-PROTOCOL-ADDRESS (ADDRESS INTERFACE))

(COMPILE-FLAVOR-METHODS DNA-NETWORK)
