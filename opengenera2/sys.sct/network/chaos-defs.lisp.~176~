;;; -*- Mode: LISP; Package: CHAOS; Base: 8; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

  ;;
;;;;;;  Definitions and constants for the Chaosnet
  ;;

  ;;
;;;;;; Packets.  First those defined by the protocol, then things for the LispM
  ;;

;;; packet opcodes

(defconstant rfc-op 001)
(defconstant opn-op 002)
(defconstant cls-op 003)
(defconstant fwd-op 004)
(defconstant ans-op 005)
(defconstant sns-op 006)
(defconstant sts-op 007)
(defconstant rut-op 010)
(defconstant los-op 011)
(defconstant lsn-op 012)
(defconstant mnt-op 013)
(defconstant eof-op 014)
(defconstant unc-op 015)
(defconstant brd-op 016)
(defconstant dat-op 200)

(defconstant opcode-list '(??? rfc opn cls fwd ans sns sts rut los lsn mnt eof unc brd))

(defconstant max-data-bytes-per-pkt 488.)
(defconstant max-data-words-per-pkt (// max-data-bytes-per-pkt 2))
(defconstant first-data-word-in-pkt 8.)	;Offset to first data word in packet
(defconstant first-data-byte-in-pkt 16.)	;offset to first data byte in packet
(defconstant max-words-per-pkt (+ first-data-word-in-pkt max-data-words-per-pkt))

(defstruct (pkt :array (:constructor nil))
  ((pkt-opcode-left-justified nil) (pkt-opcode 1010) (pkt-mbz 0010))
  ((pkt-nbytes 0014) (pkt-fwd-count 1404))
  ((pkt-dest-address nil) (pkt-dest-host-num 0010) (pkt-dest-subnet 1010))
  pkt-dest-index-num
  ((pkt-source-address nil) (pkt-source-host-num 0010) (pkt-source-subnet 1010))
  pkt-source-index-num
  pkt-num
  pkt-ack-num
  ((pkt-first-data-word nil)  (rcnt-dir nil))
  ((pkt-second-data-word nil) (rcnt-time-recorded nil))
  )

(defsubst pkt-nwords (pkt)
  (+ first-data-word-in-pkt (lsh (1+ (pkt-nbytes pkt)) -1)))

(defstruct (pkt-leader (:include neti:sub-packet) (:constructor nil)
		       (:size-symbol pkt-leader-size))
  pkt-time-transmitted
  pkt-times-transmitted
  pkt-string
  pkt-link
  pkt-allocated					;boolean, for keeping track of allocated pkts
  pkt-spare-1
  )

(defselect ((pkt named-structure-invoke))
  (:print-self (pkt stream ignore ignore)
    (si:printing-random-object (pkt stream)
      (princ "Chaos Packet" stream)))
  (:describe (pkt)
    (describe-defstruct pkt 'pkt)
    (describe-defstruct pkt 'pkt-leader)))

(defvar *pkts-made* 0)
(defvar *pkts-free* 0)


  ;;
;;;;;;  Connections.
  ;;

(defstruct (conn :array :named (:constructor make-conn-internal))
  (local-window-size 0)
  (foreign-window-size 0)
  (state 'inactive-state)
  
  (foreign-address 0)
  (foreign-index-num 0)
  
  (local-index-num 0)
  
  (read-pkts nil)
  (read-pkts-last nil)
  (received-pkts nil)
  
  (pkt-num-read -1)
  (pkt-num-received -1)
  (pkt-num-acked -1)
  (time-last-received)
  
  (send-pkts nil)
  (send-pkts-last nil)
  (send-pkts-length 0)
  (pkt-num-sent 0)
  (send-pkt-acked 0)
  (window-available 0)
  
  (interrupt-function nil)
  
  (contact-name nil)
  conn-spare-2
  
  ;;; things which should have been here in the first place
  (read-pkts-length 0)
  (foreign-host nil)				;the foreign host object
  (local-address my-address)
  
  ;;; algorithm simplifications
  (foreign-address-valid t)			;only in rare cases (BRD) is this nil
  (foreign-index-valid nil)			;nil until connected
  (auto-status-count 0)
  
  ;;; performance enhancements
  (needs-sts nil)
  (needs-retransmission nil)
  (round-trip-time (lsh 30. 3))			;this is .5 second retransmit time
  (last-retransmit-time 0)
  (offered-foreign-window-size 0)
  
  (conn-user-stream nil)
  (conn-owning-process nil)
  conn-spare-1
  )

;;; This is a separate function for the cold load
(defun make-conn ()
  (make-conn-internal))

;;;++ Maybe these should go elsewhere?
(defun foreign-host-or-address (conn)
  (or (foreign-host conn)
      (foreign-address conn)))

(defun foreign-host-object (conn)
  (or (foreign-host conn)
      (let ((addr (foreign-address conn)))
	(multiple-value-bind (host valid-p)
	    (get-host-from-address addr *local-chaosnet*)
	  (unless (or (zerop addr) (not valid-p))
	    (setf (foreign-host conn) host))
	  host))))

(defselect ((conn named-structure-invoke))
  (:print-self (conn stream ignore slashify)
    (if slashify
	(si:printing-random-object (conn stream)
	  (princ conn stream))
	(format stream "CHAOS Connection for ~A to ~A"
		(contact-name conn)
		;; Inconvenient here when debugging or error message cause server crashed.
		(selectq (state conn)
		  (brd-sent-state  ":BROADCAST")
		  (listening-state ":LISTENING")
		  (otherwise (send (foreign-host-object conn) ':short-name)))))))

(defconstant maximum-index 200)
(defconstant nbits-for-index (1- (haulong maximum-index)))
(defconstant conn-index-low-bits (si:byte nbits-for-index 0))
(defconstant conn-index-high-bits (si:byte (- 20 nbits-for-index) nbits-for-index))

(defvar *conn-table-free-pointer* 1)
(defvar *conn-table* (make-array maximum-index ':area permanent-storage-area
				 ':leader-list (list maximum-index 1)))

(defvar *uniquizer-table* (make-array maximum-index ':type 'art-16b
				      ':area permanent-storage-area))
(defvar *conn-list* nil)			;List of existing connections
(defun make-free-conn-list ()
  ;; Make 10 connections now so they're all on the same page.  Don't bother cdr-coding,
  ;; we RPLACD these cons'es freely.
  (loop repeat 10. collect (make-conn)))
(defvar	*free-conn-list* (make-free-conn-list))
(defconst *prototype-conn* (make-conn))

  ;;
;;;;;;  Routing table, tuning variables, other assorted things
  ;;

(defconstant max-subnet 256.)			;Formerly (// max-data-bytes-per-pkt 4) but
						;we can have more than 122 subnets.
						;send-rut-packet has to be careful not to
						;include more subnets than a packet can hold.


(defconstant maximum-routing-cost 1024.)	;largest value allowed in *routing-table-cost*
(defvar *routing-table* (make-array max-subnet
				    ':area permanent-storage-area
				    ':initial-value 0))	;when in doubt broadcast
(defvar *routing-table-cost* (make-array max-subnet
					 ':area permanent-storage-area
					 ':type 'art-16b
					 ':initial-value maximum-routing-cost))
(defvar *address-demerits* nil)			;alist of address and factor which
						;gets multiplied by routing cost to
						;determine best path to a machine  

(defvar *window-adjustment-enabled* nil)
(defvar *trigger-retransmission-enabled* t)

(defvar *adaptive-retransmission-enabled* nil)
(defvar *round-trip-time-lsh* -3)			;[++]Best described in the design doc
(define-symbol-macro *retransmit-delay-lsh* (1- *round-trip-time-lsh*))
(define-symbol-macro *retransmit-timeout-lsh* (1+ *round-trip-time-lsh*))

(defvar *batch-sts-enabled* t)
(defvar *some-conn-needs-sts* nil)	;set to T instead of sending a
					;STS because of duplicates
(defvar *some-conn-needs-retransmission* nil)

(defvar *enable* nil)

(defun chaos-background-predicate ()
  (not
    (null
      (and *enable*
	   (or *some-conn-needs-retransmission*
	       *some-conn-needs-sts*
	       (and *need-to-retransmit-possible*
		    (process:timer-expired-p *chaos-retransmit-timer*))
	       (process:timer-expired-p *chaos-probe-timer*)
	       (process:timer-expired-p *chaos-routing-table-timer*)
	       (process:timer-expired-p *chaos-routing-pkt-timer*))))))

(defvar *background*
	(process:make-process "Chaos Background"
			      :priority (process:make-process-priority :fg 8.)
			      :initial-function 'chaos-background
			      :simple-p t
			      :warm-boot-action #'ignore
			      :run-reasons nil
			      :verify-function #'chaos-background-predicate
			      :system-process t
			      :top-level-whostate "Chaos Background")
  "The process that handles reception triggered and timed events")



;;; various globals needed by the background
(defvar *need-to-retransmit-possible* nil)	;to help inhibit unneeded background wakeups
(defvar *chaos-retransmit-timer*
	(process:create-timer-wakeup *background* :name "CHAOS retransmission wakeup"))
(defvar *chaos-probe-timer*
	(process:create-timer-wakeup *background* :name "CHAOS probe wakeup"))
(defvar *chaos-routing-table-timer*
	(process:create-timer-wakeup *background* :name "CHAOS age routing-table wakeup"))
(defvar *chaos-routing-pkt-timer*
	(process:create-timer-wakeup *background* :name "CHAOS routing-pkt wakeup"))

;;; timer intervals
(defvar *retransmit-interval* 30.)		;.5 seconds
(defvar *minimum-packet-retransmit-interval* 8.)	;a few ticks
(defvar *max-round-trip-time* 60.)		;ten seconds (1 second for now)
(defvar *probe-interval* (* 60. 5))		;5 seconds
(defvar *age-routing-table-interval* (* 60. 4))	;4 seconds
;; VSBC seems to have more trouble getting through.
(defvar *host-connect-timeout* (* 10. 60.))	;10 seconds
(defvar *host-down-interval* (* 60. 90.))		;90 seconds
(defvar *long-probe-interval* (* 60. 60.))	;60 seconds before getting lonely
(defvar *send-routing-packet-interval* (* 60. 15.))	;15 seconds

(defvar *default-window-size* 13.)
(defvar *maximum-window-size* 50.)

(defvar *pending-rfc-pkts* nil)		;linked through the PKT-LINK
(defvar *pending-listens* nil)		;list of listening connections

(defvar *record-debugging-info* t)
(defvar *record-los-reasons* nil)			;there is a function for using
(defvar *los-reasons* ())				;these two variables.  USE IT!
(defun make-recent-headers ()
  (let ((array (make-array 200 ':leader-list '(200 0))))
    (loop for i below 200
	  do (setf (aref array i) (make-array (+ first-data-word-in-pkt 2) ':type 'art-16b)))
    array))
(defvar *recent-headers* (make-recent-headers))
(defvar *sts-why-array* (make-array 100 ':leader-list '(100 0)))

;;; Each element is a list (contact address) where contact is the contact name
;;; of a BRD request and address is the address of the first host that answered.
;;; This can useful for tracking down where strange information came from.
;;; This assumes that only the first answer is looked at.
(defvar *brd-history*)

;;; Set to T when we are allowed to forward packets.
(defvar *forward-packets* nil)


  ;;
;;;;;; Macros for various random things
  ;;

(defsubst pktnum-< (a b)
  (bit-test 100000 (- a b)))

(defsubst pktnum-1+ (a)
  (logand (1+ a) 177777))

(defsubst pktnum-- (a b)
  (logand (- a b) 177777))

(defsubst pkt-dest-conn (pkt)
  (aref *conn-table* (ldb conn-index-low-bits (pkt-dest-index-num pkt))))

(defsubst pkt-source-conn (pkt)
  (aref *conn-table* (ldb conn-index-low-bits (pkt-source-index-num pkt))))

;; Predicate: anything to receive?
(defsubst data-available (conn)
  (not (null (read-pkts conn))))

;; Predicate: may we send (at MP level)?
(defsubst may-transmit (conn)
  (> (window-available conn) 0))

;;; note: min and max are computed each time, order of evaluation not preserved
(defmacro min-max (min thing max)
  `(let ((val ,thing))
     (cond ((< val ,min) ,min)
	   ((> val ,max) ,max)
	   (T val))))


  ;;
;;;;;;  Metering support
  ;;

(define-meters *chaos-meters*

 *pkts-given-out*
 *pkts-given-back*
 *pkt-strings-truncated*

 *pkts-in-bad-format*
 *pkts-in*
 *pkts-in-bad-opcode*
 *pkts-in-no-conn*
 *pkts-in-conn-bad-state*
 *pkts-in-ack-out-of-range*
 *dat-pkts-in*
 *dat-pkts-duped-in-order*
 *dat-pkts-duped-out-order*
 *dat-pkts-over-window*
 *sts-pkts-in*
 *sns-pkts-in*
 *sns-pkts-in-bad*
 *sns-pkts-ignored*
 *encapsulated-pkts-in*
 *unc-pkts-in*
 *opn-pkts-in*
 *opn-pkts-duplicated*
 *reply-pkts-ignored*
 *ans-pkts-in*
 *cls-pkts-in*
 *brd-replies-in*
 *los-pkts-in*
 *fwd-pkts-in*
 *rfc-pkts-in*
 *brd-pkts-in*
 *rut-pkts-in*

 *pkts-forwarded*
 *pkts-over-forwarded*

 *pkts-transmitted*
 *pkts-couldnt-transmit*
 *controlled-pkts-out*
 *retransmitted-pkts*
 *retransmissions-signalled*
 *retransmissions-actual*
 *sts-pkts-signalled*
 *sts-pkts-actual*
 *sns-pkts-out*
 *encapsulated-pkts-out*
 *unc-pkts-out*
 *reply-pkts-out*
 *brd-pkts-out*
 *los-pkts-out*

 *conns-made*
 *conns-released*
 *conns-returned*
 )

(defun reset-chaos-meters ()
  (dolist (sym *chaos-meters*)
    (set sym 0)))

(reset-chaos-meters)

(add-initialization "Chaos meters" '(reset-chaos-meters) '(once))
(add-initialization "Chaos meters" '(reset-chaos-meters) '(cold))

(defmacro measure-micro-time (&body forms)
  `(without-interrupts
     (let ((.msc1. (si:%microsecond-clock)))
       ,@forms
       (let ((.msc2. (si:%microsecond-clock)))
	 (ldb 37 (- (ldb 37 .msc2.) (ldb 37 .msc1.)))))))


  ;;
;;;;;; Service interface for the Chaosnet
  ;;

(defvar *local-chaosnet*)

(defprop :chaos chaos-network network-type-flavor)

(defflavor chaos-network () (address-resolution-network-mixin
			     neti:host-from-address-mixin network))

;;; These hext to are for speed and to avoid namespace validation activity.
(defmethod (:type chaos-network) () ':chaos)

(defmethod (:network-typep chaos-network) (type) (eq type ':chaos))

(defmethod (:address-trusted-p chaos-network) (address)
  (host-trusted-p address))

;;; Why this artifically low limit?  Why isn't this 128._8? -- RWK
;;; Because a Chaos RUT packet can only contain information about 122(10)
;;; subnets, not 256(10).  -- Hornig 2/4/86
;;; Horsepucky!  There is room for 122 subnets but they don't have to be contiguous!  Besides,
;;; very few have chaos networks with routing and many have IP subnets above 122! ESC 12/19/89
(defmethod (:parse-address chaos-network) (string)
  (let ((address (parse-number string 0 nil 8 t)))
    (unless (and address (< #o400 address #o177777))
      (ferror "~A is not a valid chaosnet host address." string))
    address))


(defmethod (:unparse-address chaos-network) (address)
  (format nil "~O" address))

;; an a-list that divides the possible costs into buckets
(defvar *desirability-routing-cost-buckets*
	`((20 . 0.9)
	  (50 . 0.8)
	  (10000000 . 0.7))
  "This divides the space of routing costs into buckets.")

(defvar *default-desirability-routing-factor* 0.8 "For unknown addresses.")

(defmethod (:desirability chaos-network) (&optional for-host)
  ;;Demerit distant hosts.
  (if (symbolp for-host) *default-desirability-routing-factor*
      (let ((address (send for-host ':best-chaos-address)))
	(if (null address)
	    *default-desirability-routing-factor*
	    (cdr (cl:assoc (aref *routing-table-cost* (ldb (byte 8 8) address))
			   *desirability-routing-cost-buckets* :test #'<))))))

(defmethod (:supports-broadcast chaos-network) (protocol-name)
  (not (null (assq protocol-name *chaos-contact-names*))))

(defmethod (:possible-medium-for-protocol chaos-network) (protocol-name base-medium)
  (and (not (null (assq protocol-name *chaos-contact-names*)))
       (cond ((neti:medium-can-implement-base-medium :chaos base-medium) :chaos)
	     ((neti:medium-can-implement-base-medium :chaos-simple base-medium) :chaos-simple)
	     )))

(defmethod (:default-services chaos-network) ()
  ;; You are supposed to support all of these
  '((:chaos-status :chaos-simple :chaos-status)
    (:uptime :chaos-simple :uptime-simple)
    ;; if the host dosen't serve, it will error soon enough, but
    ;; the host might serve.  This permits file access to
    ;; chaos|NNNNN hosts.
    (:file :chaos :nfile)))
    

(defmethod (:close-connection chaos-network) (conn reason)
  (close-conn conn reason))

(defmethod (:address-resolution-parameters chaos-network) ()
  (values #x+0804 2 ':little 0))

(compile-flavor-methods chaos-network)

  ;;
;;;;;;  I don't think these belong here
  ;;

(defmethod (:chaos-address host) ()
  (loop for (network address) in neti:addresses
	when (send network ':network-typep ':chaos)
	  return address))

(defmethod (:chaos-addresses host) ()
  (loop for (network address) in neti:addresses
	when (send network ':network-typep ':chaos)
	  collect address))

(defmethod (:best-chaos-address host) ()
  (loop with (best-address best-cost)
	for (network address) in neti:addresses
	do (when (send network ':network-typep ':chaos)
	     (let* ((subnet (ldb (byte 10 10) address))
		    (cost (* (if (< subnet max-subnet)
				 (aref *routing-table-cost* subnet)
			       maximum-routing-cost)
			     (or (cdr (assq address *address-demerits*))
				 1))))
	       (when (or (null best-address)
			 (< cost best-cost))
		 (setq best-address address)
		 (setq best-cost cost))))
	finally (return best-address)))

(defprop define-chaos-protocol define-protocol zwei:definition-function-spec-type)

(defmacro define-chaos-protocol (name (service base-medium) &body options)
  (let ((contact-name-function-name (intern (format nil "~A-SERVICE-WITH-~A-CONTACT-NAME"
						    service name)))
	(contact-name-function-body nil)
	(normal-options nil))
    (loop for option in options
	  when (selectq (first option)
		 (:chaos-contact-name
		  (setq contact-name-function-body (cdr option))
		  nil)
		 (otherwise
		  t))
	  collect option into normal
	  finally (setq normal-options normal))
    (when contact-name-function-body
      (push `(:property :chaos-contact-name-function ,contact-name-function-name)
	    normal-options))
    `(progn 'compile
       ,(and contact-name-function-body
	     `(local-declare ((function-parent ,name define-protocol))
		(defun ,contact-name-function-name . ,contact-name-function-body)))
       (define-protocol ,name (,service ,base-medium)
	 . ,normal-options))))

(defconst *chaos-contact-names*
  '((:packet-echo "ECHO")
    (:babel "BABEL")
    (:telnet "TELNET")
    (:telsup "TELSUP")
    (:chaos-mail "MAIL")
    (:time-simple "TIME")
    (:reset-time-server "RESET-TIME-SERVER")
    (:name "NAME")
    (:supdup "SUPDUP")
    (:tcp-gateway "TCP")
    (:uptime-simple "UPTIME")
    (:notify "NOTIFY")
    (:namespace "NAMESPACE")
    (:namespace-timestamp "NAMESPACE-TIMESTAMP")
    (:chaos-status "STATUS")
    (:chaos-routing-table "DUMP-ROUTING-TABLE")
    (:lispm-finger "FINGER")
    (:qfile "FILE")
    (:new-file "NEW-FILE")
    (:send "SEND")
    (:notify "NOTIFY")
    (:band-transfer "BAND-TRANSFER")
    (:rtape "RTAPE")
    (:eval "EVAL")
    (:lgp "LGP")
    (:lgp-queue "LGP-QUEUE")
    (:dover "DOVER")
    (:dover-status "DOVER-STATUS")
    (:chaos-screen-spy "SPY")
    (:who-am-i "WHO-AM-I")
    (:print-disk-label "PRINT-DISK-LABEL")
    (:tty-login "TTYLINK")
    (:3600-login "3600-LOGIN")
    ))

(defun add-contact-name-for-protocol (protocol &optional (contact-name (string protocol)))
  (let ((elem (assq protocol *chaos-contact-names*)))
    (if elem
	(setf (cadr elem) contact-name)
	(push `(,protocol ,contact-name) *chaos-contact-names*)))
  ;; Put them all on one page
  (setq *chaos-contact-names* (copytree *chaos-contact-names*)))

(defun get-chaos-contact-name-for-protocol (service-access-path)
  (let* ((protocol (neti:service-access-path-protocol service-access-path))
	 (contact-name (cadr (assq (neti:protocol-name protocol) *chaos-contact-names*))))
    (when (null contact-name)
      (ferror "Unknown protocol ~S for the chaosnet" protocol))
    (let ((function (get (locf (neti:protocol-property-list protocol))
			 ':chaos-contact-name-function)))
      (when function
	(setq contact-name (funcall function contact-name service-access-path))))
    contact-name))

(si:define-gc-optimization condense-chaos-contact-names :layered-system-release
  (:documentation "Localize the chaosnet contact-name table")
  (:before-flip (ignore)
    (setq *chaos-contact-names*
	  (si:copytree-and-leaves *chaos-contact-names* permanent-storage-area))))

(define-medium :chaos (:byte-stream :byte-stream-with-mark)
  (((:network :chaos)) (service-access-path &rest args
					    &key byte-size (characters t) &allow-other-keys)
   ;;++ futures
   (setf args (si:rem-keywords args '(:byte-size)))
   (lexpr-funcall #'open-stream
		  (neti:service-access-path-host service-access-path)
		  (get-chaos-contact-name-for-protocol service-access-path)
		  :byte-size (and (not characters) (or byte-size 8))
		  args)
   ))

;;; This medium exists because there is no way for code in the above medium
;;; to detect that it is satisfying :TOKEN-LIST-STREAM instead of
;;; one of the other two.
(define-medium :chaos-token-list (:token-list-stream)
  (((:network :chaos)) (service-access-path &rest args
					    &key byte-size (characters t) &allow-other-keys)
   (setf args (si:rem-keywords args '(:byte-size)))
   (lexpr-funcall #'open-stream
		  (neti:service-access-path-host service-access-path)
		  (get-chaos-contact-name-for-protocol service-access-path)
		  :byte-size (and (not characters) (or byte-size 8))
		  :token-list t
		  args)))


(define-medium :chaos-simple (:datagram)
  (((:network :chaos)) (service-access-path
			 &key (timeout *host-connect-timeout*) (future-p nil) (characters t)
			 (rfc-data nil))
   (let ((host (neti:service-access-path-host service-access-path))
	 (contact-name (get-chaos-contact-name-for-protocol service-access-path)))
     (declare (sys:array-register contact-name))
     (sys:with-data-stack
       (when rfc-data
	 (when (string-search-char #\space contact-name)
	   (error "~S specified for a chaos protocol which determines its own (~S)"
		  ':rfc-data contact-name))
	 (let* ((rfc-data (if (keywordp rfc-data) (string rfc-data) rfc-data))
		(rfc-length (cl:length rfc-data))
		(contact-length (cl:length contact-name))
		;; This has to be consed in stable storage since it is referenced outside this
		;; frame.  Someday, we might want to call chaos:simple directly and allocate a
		;; packet instead.
		(real-rfc-data (cl:make-array (+ contact-length rfc-length 1)
					   :element-type 'cl:string-char)))
	   (declare (sys:array-register rfc-data real-rfc-data))
	   (dotimes (i contact-length)
	     (setf (aref real-rfc-data i) (aref contact-name i)))
	   (setf (aref real-rfc-data contact-length) #\space)
	   (do ((string? (stringp rfc-data))
		(i (1+ contact-length) (1+ i))
		(j 0 (1+ j)))
	       ((= j rfc-length))
	     (setf (aref real-rfc-data i)
		   (if string?
		       (aref rfc-data j)
		       (code-char (aref rfc-data j)))))
	   (setq contact-name real-rfc-data)))
       (if (eq host ':broadcast)
	   (open-broadcast-simple-stream
	     contact-name :timeout timeout :future-p future-p :characters characters)
	   (open-simple-stream
	     host contact-name :timeout timeout :future-p future-p :characters characters))))))
