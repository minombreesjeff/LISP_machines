;;; -*- Mode: LISP; Base: 10; Package: NETWORK-INTERNALS; Syntax: Zetalisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;; This file contains the defs and code for the common part of all
;;; low-level Ivory Ethernet interfaces.  The interfaces defined here
;;; are structs, not instances, because this code needs to run in the
;;; cold load.  For that reason, everything in here is called "proto-"
;;; frobs, rather than plain frobs.
;;;
;;; It probably makes sense to think about making the 'real' ethernet
;;; interfaces on Ivories use this substrate, but I'm not attempting
;;; that here.  One problem at a time...
;;;

;;;
;;; This is the basic struct out of which we build these suckers.  Note
;;; that there's nothing particularly ethernet specific about it, though
;;; all known instances of these things are currently ethernets.
;;;
(cl:defstruct (proto-network-interface (:type cl:vector)
				       (:conc-name "PNI-"))
  named-structure-symbol
  enabled					; if this one is enabled now
  dispatch-function				; function to call to dispatch messages
  (number nil)					; which one, in case we have several
  (lock (process:make-lock "Interface Lock")))	; lock cell for this interface

;;;
;;; Real interfaces will :include that one in their defstructs.  There's
;;; reason to believe that won't work when using the cross-compiler;
;;; I'll deal with that when it happens.
;;;

;;;
;;; The standard interface for getting one of these things to do something
;;;
(defsubst interface-call (interface op &rest args)
  (cl:apply (pni-dispatch-function interface) interface op args))

;;;
;;; A handy locker, as it seems to be a popular operation
;;;
(defmacro with-interface-locked ((interface) &body body)
  `(process:with-lock ((pni-lock ,interface))
     ,@body))

;;;
;;; The following operations must be performable on any of these sorts
;;; of interfaces.  All operations must be wired, for netboot.
;;;

(defenumerated interface-operations
	       (%interface-enable		; turn it 'on'
		 %interface-disable		; turn it 'off'
		 %interface-reset		; set to virgin state, approximately
		 %interface-transmit-packet	; transmit one
		 %interface-receive-packet	; return packet or nil
		 %interface-packet-listen	; return t if anything pending
		 %interface-kill		; Destroy the interface completely
		 %interface-allocate-packet-buffer
		 %interface-deallocate-packet-buffer
		 %emb-interface-allocate-emb-buffer
		 %emb-interface-deallocate-emb-buffer
		 %emb-interface-queue-put
		 %emb-interface-queue-take
		 %interface-no-such-operation))	; Marker - must come last


;;;
;;; The following functions are provided for things like MINI and Netboot, that want to
;;; use the low-level ethernet directly.
;;;

(defwiredvar *mini-ethernet-interface* nil)

(defwiredfun transmit-epacket (epacket free-flag nbytes &optional
				       (interface *mini-ethernet-interface*))
  (interface-call interface neti:%interface-transmit-packet
		  epacket free-flag nbytes))

(defwiredfun get-next-received-epacket (&optional (interface *mini-ethernet-interface*))
  (interface-call interface neti:%interface-receive-packet))

(defwiredfun epacket-listen (&optional (interface *mini-ethernet-interface*))
  (interface-call interface neti:%interface-packet-listen))

(defwiredfun ethernet-interface-enable (&optional (interface *mini-ethernet-interface*))
  (interface-call interface neti:%interface-enable))

(defwiredfun ethernet-interface-disable (&optional (interface *mini-ethernet-interface*))
  (interface-call interface neti:%interface-disable))

;;;
;;; This is the part that dispatches on system-type
;;;

(defun initialize-ethernet ()
  (setq *mini-ethernet-interface*
	(sys:system-case
	  ((XL400 XL1200 Zora) *82586-ethernet-interface-0*)
	  (VLM (aref *emb-ethernet-interfaces* 0))
	  (otherwise (error)))))



;;; This is the part of ethernet interfaces needed by mini and hence in the cold load.
;;; Machine independent things for the cold load all in PKTS.
;;; For the most part, things with MINI- in their name are used only by mini and everything
;;; else is used by both.
;;; No flavors or other hair allowed in here.

  ;;
;;;;;;  MINI support
  ;;

(DEFUN MINI-PACKET-CHAOS-PACKET (PACKET)
  (GET-SUB-PACKET PACKET 'ART-16B 0))

(DEFCONSTANT *ETHERNET-HARDWARE* #o1_8)		;Byte swapped

(DEFCONSTANT *CHAOS-ETHER-PACKET-TYPE* #o2010)		;0804 byte swapped
(DEFCONSTANT *ADDRESS-RESOLUTION-ETHER-PACKET-TYPE* #o3010)	;0806 byte swapped

(DEFCONSTANT *MINI-ADDRESS-RESOLUTION-REQUEST* #o1_8)	;Byte swapped
(DEFCONSTANT *MINI-ADDRESS-RESOLUTION-REPLY* #o2_8)	;Byte swapped

(DEFVAR CHAOS:MY-ADDRESS)
(DEFVAR CHAOS:MY-SUBNET)

(DEFVAR *MINI-MY-ETHER-ADDRESS-FIRST*)
(DEFVAR *MINI-MY-ETHER-ADDRESS-SECOND*)
(DEFVAR *MINI-MY-ETHER-ADDRESS-LAST*)

(DEFUN SETUP-MY-CHAOS-ADDRESS ()
  (LET ((CHAOS-START (STRING-SEARCH "CHAOS|" PRIMARY-NETWORK-ADDRESS)))
    (UNLESS CHAOS-START
      (ERROR "MINI only works over CHAOS."))
    (LET ((ADDRESS-STRING
	    (SUBSTRING PRIMARY-NETWORK-ADDRESS (+ CHAOS-START (STRING-LENGTH "CHAOS|"))
		       (OR (STRING-SEARCH "," PRIMARY-NETWORK-ADDRESS CHAOS-START)
			   (STRING-LENGTH PRIMARY-NETWORK-ADDRESS)))))
      (SETQ CHAOS:MY-ADDRESS
	    (CL:PARSE-INTEGER ADDRESS-STRING :RADIX 8 :SIGN-ALLOWED NIL))
      (SETQ CHAOS:MY-SUBNET (LDB (BYTE 8. 8.) CHAOS:MY-ADDRESS))	;Subnet of this host.
      (SETQ *MINI-MY-ETHER-ADDRESS-FIRST* (LDB (BYTE 16. 0) SYS:NET-ADDRESS-1)
	    *MINI-MY-ETHER-ADDRESS-SECOND* (LDB (BYTE 16. 16.) SYS:NET-ADDRESS-1)
	    *MINI-MY-ETHER-ADDRESS-LAST* (LDB (BYTE 16. 0) SYS:NET-ADDRESS-2))
      (VALUES CHAOS:MY-ADDRESS :CHAOS))))


;;;; Transmission

(DEFUN MINI-TRANSMIT-CHAOS-PACKET (INT-PKT HOST)
  (LET* ((EPACKET (PACKET-ETHER-PACKET (SUB-PACKET-PACKET INT-PKT)))
	 (WORD-COUNT (CHAOS:PKT-NWORDS INT-PKT)))
    ;; Data length is the packet length in words-1/2 rounded up
    (SETF (EPACKET-DATA-LENGTH EPACKET) (* WORD-COUNT 2))
    (MULTIPLE-VALUE-BIND (FIRST SECOND LAST ROUTING)
	(MINI-RESOLVE-CHAOS-ADDRESS HOST)
      (COND ((NULL FIRST)
	     (MINI-REQUEST-CHAOS-RESOLUTION EPACKET HOST))
	    (T
	     ;; Store the address
	     (SETF (EPACKET-DEST-LOW EPACKET) LAST)
	     (SETF (EPACKET-DEST-HIGH EPACKET)
		   (LOGIOR (LSH SECOND #o20) FIRST))
	     (SETF (EPACKET-ROUTING-WORD EPACKET) ROUTING)
	     ;; set type and copy data word of chaos packet
	     (SETF (EPACKET-TYPE EPACKET) *CHAOS-ETHER-PACKET-TYPE*)
	     (SETF (EPACKET-FIRST-WORD EPACKET)
		   (CHAOS:PKT-OPCODE-LEFT-JUSTIFIED INT-PKT))
	     ;; Length is word-count-1 /2 rounded up
	     (TRANSMIT-EPACKET EPACKET T (* WORD-COUNT 2)))))))


;;;; Receipt

(DEFUN MINI-RECEIVE-NEXT-CHAOS-PKT ()
  (LOOP FOR EPACKET = (GET-NEXT-RECEIVED-EPACKET)
	WHILE EPACKET
	DOING
    (COND ((= (EPACKET-TYPE EPACKET) *ADDRESS-RESOLUTION-ETHER-PACKET-TYPE*)
	   (MINI-PROCESS-RESOLUTION-PACKET EPACKET))
	  ((= (EPACKET-TYPE EPACKET) *CHAOS-ETHER-PACKET-TYPE*)
	   (LET ((CHAOS-PACKET (MINI-PACKET-CHAOS-PACKET
				 (EPACKET-SUB-PACKET EPACKET))))
	     (RETURN CHAOS-PACKET)))
	  (T
	   (DEALLOCATE-PACKET-BUFFER (EPACKET-SUB-PACKET EPACKET))))))

;;;; Address resolution

(DEFVAR *MINI-CHAOS-ADDRESS-ALIST* NIL)

(DEFUN MINI-INTERFACE-RESET-AND-ENABLE ()
  (INITIALIZE-ETHERNET)				; system dependent...
  (RESET-PACKET-BUFFERS)
  (ENABLE-PACKET-BUFFERS)
  (ETHERNET-INTERFACE-ENABLE)			; system dependent...
  (SETUP-MY-CHAOS-ADDRESS)
  (SETQ *MINI-CHAOS-ADDRESS-ALIST* NIL)
  )

(DEFUN MINI-RESOLVE-CHAOS-ADDRESS (CH-ADDR)
  (LET ((ETH-ADDR (ASSQ CH-ADDR *MINI-CHAOS-ADDRESS-ALIST*)))
    (COND (ETH-ADDR (VALUES-LIST (CDR ETH-ADDR)))	;Found
	  ((ZEROP CH-ADDR)
	   (VALUES -1 -1 -1))			;Broadcast
	  ((= CH-ADDR CHAOS:MY-ADDRESS)		;My address
	   (VALUES *MINI-MY-ETHER-ADDRESS-FIRST*
		   *MINI-MY-ETHER-ADDRESS-SECOND*
		   *MINI-MY-ETHER-ADDRESS-LAST*)))))

;; Overlaying an art-16b array
(DEFSTRUCT (CHAOS-RESOLUTION ARRAY)
  CHSRES-HARDWARE
  CHSRES-PROTOCOL
  ((CHSRES-LENGTHS)
   (CHSRES-HARD-LENGTH (BYTE 8. 0))			;Hardware address length
   (CHSRES-PROTO-LENGTH (BYTE 8. 8.)))			;Protocol address length
  CHSRES-OPCODE
  CHSRES-ESEND-FIRST
  CHSRES-ESEND-SECOND
  CHSRES-ESEND-LAST
  CHSRES-CSENDER
  CHSRES-ETARG-FIRST
  CHSRES-ETARG-SECOND
  CHSRES-ETARG-LAST
  CHSRES-CTARGET)

(DEFUN MINI-REQUEST-CHAOS-RESOLUTION (EPACKET HOST)
  (LET ((CHAOS-RES (MINI-PACKET-CHAOS-PACKET (EPACKET-SUB-PACKET EPACKET))))
    (SETF (CHSRES-PROTOCOL CHAOS-RES) *CHAOS-ETHER-PACKET-TYPE*)
    (SETF (CHSRES-HARDWARE CHAOS-RES) *ETHERNET-HARDWARE*)
    (SETF (CHSRES-HARD-LENGTH CHAOS-RES) 6)
    (SETF (CHSRES-PROTO-LENGTH CHAOS-RES) 2)
    (SETF (CHSRES-OPCODE CHAOS-RES) *MINI-ADDRESS-RESOLUTION-REQUEST*)
    (SETF (CHSRES-ESEND-FIRST CHAOS-RES) *MINI-MY-ETHER-ADDRESS-FIRST*)
    (SETF (CHSRES-ESEND-SECOND CHAOS-RES) *MINI-MY-ETHER-ADDRESS-SECOND*)
    (SETF (CHSRES-ESEND-LAST CHAOS-RES) *MINI-MY-ETHER-ADDRESS-LAST*)
    (SETF (CHSRES-CSENDER CHAOS-RES) CHAOS:MY-ADDRESS)
    (SETF (CHSRES-ETARG-FIRST CHAOS-RES) 0)
    (SETF (CHSRES-ETARG-SECOND CHAOS-RES) 0)
    (SETF (CHSRES-ETARG-LAST CHAOS-RES) 0)
    (SETF (CHSRES-CTARGET CHAOS-RES) HOST)
    ;; Now set up the ether packet
    (SETF (EPACKET-DEST-HIGH EPACKET) -1)	;Broadcast
    (SETF (EPACKET-DEST-LOW EPACKET) -1)
    (SETF (EPACKET-TYPE EPACKET) *ADDRESS-RESOLUTION-ETHER-PACKET-TYPE*)
    ;; Copy the first word
    (SETF (EPACKET-FIRST-WORD EPACKET)
	  (AREF CHAOS-RES 0))
    (TRANSMIT-EPACKET EPACKET T 24.)))

(DEFUN MINI-PROCESS-RESOLUTION-PACKET (EPACKET
				       &AUX (CHAOS-RES (MINI-PACKET-CHAOS-PACKET
							 (EPACKET-SUB-PACKET EPACKET))))
  (LET ((HARDWARE (CHSRES-HARDWARE CHAOS-RES))
	(RES-PROTOCOL (CHSRES-PROTOCOL CHAOS-RES))
	(CHAOS-TARGET (CHSRES-CTARGET CHAOS-RES))
	(CHAOS-SENDER (CHSRES-CSENDER CHAOS-RES)))
    (COND ((AND (= HARDWARE *ETHERNET-HARDWARE*)
		(= RES-PROTOCOL *CHAOS-ETHER-PACKET-TYPE*)
		(= CHAOS-TARGET CHAOS:MY-ADDRESS))
	   (LET ((ENTRY (ASSQ CHAOS-SENDER *MINI-CHAOS-ADDRESS-ALIST*)))
	     (COND ((NULL ENTRY)
		    (SETQ ENTRY (LIST CHAOS-SENDER NIL NIL NIL NIL NIL))
		    (PUSH ENTRY *MINI-CHAOS-ADDRESS-ALIST*)))
	     (SETF (SECOND ENTRY) (CHSRES-ESEND-FIRST CHAOS-RES))
	     (SETF (THIRD ENTRY) (CHSRES-ESEND-SECOND CHAOS-RES))
	     (SETF (FOURTH ENTRY) (CHSRES-ESEND-LAST CHAOS-RES))
	     (SETF (FIFTH ENTRY) (EPACKET-ROUTING-WORD EPACKET)))
	   (COND ((= (CHSRES-OPCODE CHAOS-RES) *MINI-ADDRESS-RESOLUTION-REQUEST*)
		  ;; TARGET is now requester
		  (SETF (CHSRES-ETARG-FIRST CHAOS-RES)
			(CHSRES-ESEND-FIRST CHAOS-RES))
		  (SETF (CHSRES-ETARG-SECOND CHAOS-RES)
			(CHSRES-ESEND-SECOND CHAOS-RES))
		  (SETF (CHSRES-ETARG-LAST CHAOS-RES)
			(CHSRES-ESEND-LAST CHAOS-RES))
		  ;; Fill in my address
		  (SETF (CHSRES-ESEND-FIRST CHAOS-RES) *MINI-MY-ETHER-ADDRESS-FIRST*)
		  (SETF (CHSRES-ESEND-SECOND CHAOS-RES) *MINI-MY-ETHER-ADDRESS-SECOND*)
		  (SETF (CHSRES-ESEND-LAST CHAOS-RES) *MINI-MY-ETHER-ADDRESS-LAST*)
		  (SETF (CHSRES-OPCODE CHAOS-RES) *MINI-ADDRESS-RESOLUTION-REPLY*)
		  (SWAPF (CHSRES-CTARGET CHAOS-RES) (CHSRES-CSENDER CHAOS-RES))
		  (SETF (EPACKET-DEST-HIGH EPACKET)
			(LOGIOR (LSH (CHSRES-ETARG-SECOND CHAOS-RES) #o20)
				(CHSRES-ETARG-FIRST CHAOS-RES)))
		  (SETF (EPACKET-DEST-LOW EPACKET)
			(CHSRES-ETARG-LAST CHAOS-RES))
		  (SETF (EPACKET-FIRST-WORD EPACKET) (AREF CHAOS-RES 0))
		  (TRANSMIT-EPACKET EPACKET T 5))
		 ;; Was a reply, so discard
		 (T (DEALLOCATE-PACKET-BUFFER CHAOS-RES))))
	  ;; Not chaos type, we dont pay attention
	  (T
	   (DEALLOCATE-PACKET-BUFFER CHAOS-RES)))))


