;;; -*- Syntax: Zetalisp; Mode: LISP; Package: NETWORK-INTERNALS; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This shouldn't be NIL.  Some initialization should set it to NIL and
;;; then do a network-interfaces initialization.
(DEFVAR *INTERFACES* NIL)			;the list of all (active) interfaces

;;; Base flavor for interface instances
(DEFFLAVOR NETWORK-INTERFACE
	((NAME NIL)				; Interface 'device' name, for find-network-interfaces
	 (ENABLED NIL)				;Software enable
	 (OVERSEER NIL)				;A PROCESS (usually simple)
	 (RECEIVE-COUNT 0)
	 (TRANSMIT-COUNT 0)
	 (FULL-DUPLEX-P NIL)			;For gross embedded interfaces
	 )
	()
  :GETTABLE-INSTANCE-VARIABLES
  (:INITABLE-INSTANCE-VARIABLES NAME)
  (:READABLE-INSTANCE-VARIABLES NAME)
  (:REQUIRED-METHODS :ADD-NETWORK)
  (:METHOD-COMBINATION :NETWORK-SUPPORTED :OR))

(DEFMETHOD (SYS:PRINT-SELF NETWORK-INTERFACE) (STREAM PRINT-DEPTH SLASHIFY-P)
  (DECLARE (IGNORE PRINT-DEPTH SLASHIFY-P))
  (SYS:PRINTING-RANDOM-OBJECT (SELF STREAM :TYPEP)
    (WHEN NAME
      (CL:WRITE-STRING NAME STREAM))))

;;;+++ This should return a displaced array with enough bytes at the front for whatever
;;; encapsulation the network internals require.
(DEFMETHOD (:ALLOCATE-PACKET NETWORK-INTERFACE) (&OPTIONAL (WAIT-P T))
  (ALLOCATE-PACKET-BUFFER WAIT-P))

(DEFMETHOD (:ENABLE NETWORK-INTERFACE) ()
  (SETQ ENABLED T)
  (WHEN OVERSEER (PROCESS-ENABLE-RUN-REASON OVERSEER SELF)))

(DEFMETHOD (:DISABLE NETWORK-INTERFACE) ()
  (SETQ ENABLED NIL)
  (WHEN OVERSEER (PROCESS-DISABLE-RUN-REASON OVERSEER SELF)))

(DEFMETHOD (:RESET NETWORK-INTERFACE :BEFORE) ()
  (WHEN ENABLED (SEND SELF ':DISABLE)))

(DEFMETHOD (:KILL NETWORK-INTERFACE) ()
  (WHEN OVERSEER (PROCESS-KILL OVERSEER)))

(DEFMETHOD (:NETWORK-SUPPORTED NETWORK-INTERFACE :OR) (NETWORK)
  NETWORK
  ':UNSUPPORTED)

(DEFMETHOD (:PACKET-BUFFER-PANIC NETWORK-INTERFACE) () ())

;; T if this interface can be disconnected and reconnected asynchronously
(DEFMETHOD (NETWORK-INTERFACE-DYNAMIC-P NETWORK-INTERFACE :DEFAULT) ()
  NIL)


  ;;
;;;;;;  the address resolution packet and assistence macros
  ;;

;;; This is a big-ender protocol from a byte standpoint
(DEFSTRUCT (ADDRESS-RESOLUTION-PACKET (:TYPE :ARRAY) :CONC-NAME :SIZE-SYMBOL)
  HARDWARE-HIGH HARDWARE-LOW
  PROTOCOL-HIGH PROTOCOL-LOW
  HARDWARE-LENGTH
  PROTOCOL-LENGTH
  OPCODE-HIGH OPCODE-LOW
  )

(DEFMACRO DEFINE-TWO-BYTE-FIELD (FIELD-NAME LOW-END HIGH-END)
  `(PROGN
     (DEFMACRO ,FIELD-NAME (ARRAY)
       `(DPB (,',HIGH-END ,ARRAY) (BYTE 8. 8.) (,',LOW-END ,ARRAY)))
     (CL:DEFSETF ,FIELD-NAME (ARRAY) (VALUE)
       `(PROGN
	  (SETF (,',LOW-END ,ARRAY) (LDB (BYTE 8. 0) ,VALUE))
	  (SETF (,',HIGH-END ,ARRAY) (LDB (BYTE 8. 8.) ,VALUE))
	  ,VALUE))))

(DEFINE-TWO-BYTE-FIELD ADDRESS-RESOLUTION-PACKET-HARDWARE
		       ADDRESS-RESOLUTION-PACKET-HARDWARE-LOW
		       ADDRESS-RESOLUTION-PACKET-HARDWARE-HIGH)

(DEFINE-TWO-BYTE-FIELD ADDRESS-RESOLUTION-PACKET-PROTOCOL
		       ADDRESS-RESOLUTION-PACKET-PROTOCOL-LOW
		       ADDRESS-RESOLUTION-PACKET-PROTOCOL-HIGH)

(DEFINE-TWO-BYTE-FIELD ADDRESS-RESOLUTION-PACKET-OPCODE
		       ADDRESS-RESOLUTION-PACKET-OPCODE-LOW
		       ADDRESS-RESOLUTION-PACKET-OPCODE-HIGH)


;;; Still more byte-order braindamage
(DEFMACRO FILL-IN-BYTES (BIG-OR-LITTLE ARRAY INDEX NUMBER N-BYTES &OPTIONAL (UPDATE-INDEX T)
			 &ENVIRONMENT ENV)
  (LET ((NBYTES N-BYTES))
    (ONCE-ONLY (ARRAY NUMBER NBYTES &ENVIRONMENT ENV)
      `(PROGN
	 ,(SELECTQ BIG-OR-LITTLE
	    (:LITTLE
	     ;; Easy case
	     (IF (NUMBERP N-BYTES)
		 `(PROGN ,@(LOOP FOR IDX FROM 0 BELOW N-BYTES
				 FOR POS FROM 0 BY 8
				 COLLECT `(SETF (AREF ,ARRAY (+ ,IDX ,INDEX))
						(LDB (BYTE 8 ,POS) ,NUMBER))))
		 `(LOOP REPEAT ,NBYTES
			FOR .NUMBER. = ,NUMBER THEN (ASH .NUMBER. -8)
			FOR .INDEX. FROM ,INDEX
			DO (SETF (AREF ,ARRAY .INDEX.) (LDB 0010 .NUMBER.)))))
	    (:BIG
	     ;; Bit harder
	     (IF (NUMBERP N-BYTES)
		 `(PROGN ,@(LOOP FOR IDX FROM 0 BELOW N-BYTES
				 FOR POS DOWNFROM (* 8 (1- N-BYTES)) BY 8
				 COLLECT `(SETF (AREF ,ARRAY (+ ,IDX ,INDEX))
						(LDB (BYTE 8 ,POS) ,NUMBER))))
		 `(LOOP REPEAT ,NBYTES
			FOR .NUMBER. = ,NUMBER THEN (ASH .NUMBER. -8)
			FOR .INDEX. DOWNFROM (+ ,INDEX ,NBYTES -1)
			DO (SETF (AREF ,ARRAY .INDEX.) (LDB 0010 .NUMBER.)))))
	    (:FIXNUM-BIG
	     ;; as hard as :BIG, but with LSH
	     (IF (NUMBERP N-BYTES)
		 `(PROGN (SETF (AREF ,ARRAY ,INDEX)
			       (%LOGLDB (BYTE 8 ,(* 8 (1- N-BYTES))) ,NUMBER))
			 ,@(LOOP FOR IDX FROM 1 BELOW N-BYTES
				 FOR POS DOWNFROM (* 8 (- N-BYTES 2)) BY 8
				 COLLECT `(SETF (AREF ,ARRAY (+ ,IDX ,INDEX))
						(LDB (BYTE 8 ,POS) ,NUMBER))))
		 `(LOOP REPEAT ,NBYTES
			FOR .NUMBER. = ,NUMBER THEN (LSH .NUMBER. -8)
			FOR .INDEX. DOWNFROM (+ ,INDEX ,NBYTES -1)
			DO (SETF (AREF ,ARRAY .INDEX.) (LDB 0010 .NUMBER.)))))
	    (:ARRAY
	     ;; Just copy array portion
	     (IF (NUMBERP N-BYTES)
		 `(PROGN ,@(LOOP FOR IDX FROM 0 BELOW N-BYTES
				 COLLECT `(SETF (AREF ,ARRAY (+ ,IDX ,INDEX))
						(AREF ,NUMBER ,IDX))))
		 `(COPY-ARRAY-PORTION ,NUMBER 0 ,NBYTES
				      ,ARRAY  ,INDEX (+ ,INDEX ,NBYTES))))
	    (OTHERWISE
	     (FERROR "Big, little or array must be at compile time: ~S" BIG-OR-LITTLE)))
	 ,@(AND UPDATE-INDEX `((INCF ,INDEX ,NBYTES)))))))


(DEFMACRO COMPARE-BYTES (BIG-OR-LITTLE ARRAY INDEX NUMBER N-BYTES &ENVIRONMENT ENV)
  (LET ((NBYTES N-BYTES))
    (ONCE-ONLY (ARRAY INDEX NUMBER NBYTES &ENVIRONMENT ENV)
      (SELECTQ BIG-OR-LITTLE
	(:LITTLE
	 (IF (NUMBERP N-BYTES)
	     `(AND ,@(LOOP FOR IDX FROM 0 BELOW N-BYTES
			   FOR POS FROM 0 BY 8
			   COLLECT `(= (AREF ,ARRAY (+ ,IDX ,INDEX))
				       (LDB (BYTE 8 ,POS) ,NUMBER))))
	     `(LOOP FOR .NUMBER. = ,NUMBER THEN (ASH .NUMBER. -8)
		    REPEAT ,NBYTES
		    FOR .INDEX. FROM ,INDEX
		    ALWAYS (= (LDB (BYTE 8 0) .NUMBER.) (AREF ,ARRAY .INDEX.)))))
	(:BIG
	 (IF (NUMBERP N-BYTES)
	     `(AND ,@(LOOP FOR IDX FROM 0 BELOW N-BYTES
			   FOR POS DOWNFROM (* 8 (1- N-BYTES)) BY 8
			   COLLECT `(= (AREF ,ARRAY (+ ,IDX ,INDEX))
				       (LDB (BYTE 8 ,POS) ,NUMBER))))
	     `(LOOP FOR .NUMBER. = ,NUMBER THEN (ASH .NUMBER. -8)
		    REPEAT ,NBYTES
		    FOR .INDEX. DOWNFROM (+ ,INDEX ,NBYTES -1)
		    ALWAYS (= (LDB (BYTE 8 0) .NUMBER.) (AREF ,ARRAY .INDEX.)))))
	(:FIXNUM-BIG
	 (IF (NUMBERP N-BYTES)
	     `(AND (= (AREF ,ARRAY ,INDEX) (%LOGLDB (BYTE 8 ,(* 8 (1- N-BYTES))) ,NUMBER))
		   ,@(LOOP FOR IDX FROM 1 BELOW N-BYTES
			   FOR POS DOWNFROM (* 8 (- N-BYTES 2))
			   COLLECT `(= (AREF ,ARRAY (+ ,IDX ,INDEX))
				       (LDB (BYTE 8 ,POS) ,NUMBER))))
	     `(LOOP FOR .NUMBER. = ,NUMBER THEN (LSH .NUMBER. -8)
		    REPEAT ,NBYTES
		    FOR .INDEX. DOWNFROM (+ ,INDEX ,NBYTES -1)
		    ALWAYS (= (LDB (BYTE 8 0) .NUMBER.) (AREF ,ARRAY .INDEX.)))))
	(:ARRAY
	 (IF (NUMBERP N-BYTES)
	     `(AND ,@(LOOP FOR IDX FROM 0 BELOW N-BYTES
			   COLLECT `(= (AREF ,ARRAY (+ ,IDX ,INDEX))
				       (AREF ,NUMBER ,IDX))))
	     `(LOOP WITH .NUMBER. = ,NUMBER
		    FOR .ARRAY-IDX. FROM ,INDEX
		    FOR .NUMBER-IDX. BELOW ,NBYTES
		    ALWAYS (= (AREF ,ARRAY .ARRAY-IDX.) (AREF .NUMBER. .NUMBER-IDX.)))))
	(OTHERWISE
	 (FERROR "Big, little or array must be at compile time: ~S" BIG-OR-LITTLE))))))

(DEFMACRO PUT-TOGETHER-BYTES (BIG-OR-LITTLE ARRAY INDEX N-BYTES &ENVIRONMENT ENV)
  (LET ((NBYTES N-BYTES))
    (ONCE-ONLY (ARRAY INDEX NBYTES &ENVIRONMENT ENV)
      (SELECTQ BIG-OR-LITTLE
	(:LITTLE
	 (IF (NUMBERP N-BYTES)
	     (LOOP WITH EXP
		   FOR IDX DOWNFROM N-BYTES ABOVE 0
		   FOR AREF = `(AREF ,ARRAY (+ ,INDEX ,(1- IDX)))
		   DO (SETF EXP (IF EXP `(LOGIOR ,AREF (ASH ,EXP 8)) AREF))
		   FINALLY (RETURN EXP))
	     `(LET ((.NUMBER. 0))
		(LOOP WITH .INDEX.  = (+ ,INDEX ,NBYTES)
		      REPEAT ,NBYTES
		      DO (SETQ .NUMBER. (LOGIOR (ASH .NUMBER. 8)
						(AREF ,ARRAY (DECF .INDEX.)))))
		.NUMBER.)))
	(:BIG
	 (IF (NUMBERP N-BYTES)
	     (LOOP WITH EXP
		   FOR IDX FROM 0 BELOW N-BYTES
		   FOR AREF = `(AREF ,ARRAY (+ ,INDEX ,IDX))
		   DO (SETF EXP (IF EXP `(LOGIOR ,AREF (ASH ,EXP 8)) AREF))
		   FINALLY (RETURN EXP))
	     `(LET ((.NUMBER. 0))
		(LOOP REPEAT ,NBYTES
		      FOR .INDEX. FROM ,INDEX
		      DO (SETQ .NUMBER. (+ (ASH .NUMBER. 8)
					   (LDB (BYTE 8 0) (AREF ,ARRAY .INDEX.)))))
		.NUMBER.)))
	(:FIXNUM-BIG
	 (IF (NUMBERP N-BYTES)
	     (LOOP WITH EXP
		   FOR IDX FROM 0 BELOW N-BYTES
		   FOR AREF = `(AREF ,ARRAY (+ ,INDEX ,IDX))
		   DO (SETF EXP (IF EXP `(LOGIOR ,AREF (LSH ,EXP 8)) AREF))
		   FINALLY (RETURN EXP))
	     `(LET ((.NUMBER. 0))
		(LOOP REPEAT ,NBYTES
		      FOR .INDEX. FROM ,INDEX
		      DO (SETQ .NUMBER. (+ (LSH .NUMBER. 8) (AREF ,ARRAY .INDEX.))))
		.NUMBER.)))
	(:ARRAY
	 `(LET ((.NUMBER (MAKE-ARRAY ,NBYTES ':TYPE 'ART-8B ':AREA NETWORK-CONS-AREA)))
	    ,@(IF (NUMBERP N-BYTES)
		  (IF (NUMBERP INDEX)
		      (LOOP FOR IDX FROM 0 BELOW N-BYTES
			    COLLECT `(SETF (AREF .NUMBER ,IDX)
					   (AREF ,ARRAY ,(+ INDEX IDX))))
		      `((LET ((.INDEX ,INDEX))
			  ,@(LOOP FOR IDX FROM 0 BELOW N-BYTES
				  COLLECT `(SETF (AREF .NUMBER ,IDX)
						 (AREF ,ARRAY (PROG1 .INDEX (INCF .INDEX))))))))
		  `((COPY-ARRAY-PORTION ,ARRAY ,INDEX (+ ,INDEX ,NBYTES)
					.NUMBER 0 ,NBYTES)))
	    .NUMBER))
	(OTHERWISE
	 (FERROR "Big or little must be at compile time: ~S" BIG-OR-LITTLE))))))

;;; Opcodes
(DEFCONSTANT *ADDRESS-RESOLUTION-REQUEST* 1)
(DEFCONSTANT *ADDRESS-RESOLUTION-REPLY* 2)



  ;;
;;;;;; Address resolution (RFC 826 kind)
  ;;

;;; This is included in networks that use standard address resolution.
(DEFFLAVOR ADDRESS-RESOLUTION-NETWORK-MIXIN () ()
  (:REQUIRED-METHODS :ADDRESS-RESOLUTION-PARAMETERS))

(DEFMETHOD (:RESOLVE-PROTOCOL-ADDRESS ADDRESS-RESOLUTION-NETWORK-MIXIN)
	   (PROTOCOL-ADDRESS INTERFACE)
  (SEND INTERFACE ':RESOLVE-PROTOCOL-ADDRESS SELF PROTOCOL-ADDRESS))

  ;;
;;;;;;  The address-resolution-network, mostly a stub for correct dispatching
  ;;

;;+++ This includes ADDRESS-RESOLUTION-NETWORK-MIXIN so that the message will get
;;sent back to the interface.  An alternative would be to flush identity hash tables
;;and have an explicit :resolve-protocol-address method here that returned its argument.
(DEFFLAVOR ADDRESS-RESOLUTION-NETWORK () (ADDRESS-RESOLUTION-NETWORK-MIXIN))

(DEFMETHOD (:ADDRESS-RESOLUTION-PARAMETERS ADDRESS-RESOLUTION-NETWORK) ()
  (VALUES #X+0806))

;;; Packet in from an interface is address resolution.  Give it right back to the interface
;;; to handle.
(DEFMETHOD (:RECEIVE-PACKET ADDRESS-RESOLUTION-NETWORK) (PACKET INTERFACE IGNORE)
  (IF INTERFACE
      (SEND INTERFACE ':PROCESS-ADDRESS-RESOLUTION PACKET)
    (UNWIND-PROTECT
       (FSIGNAL "Interface is NIL in address resolution code.  ~@
		 Maybe somebody else has your Ethernet address?~@
		 Resume to ignore.")
       (DEALLOCATE-PACKET-BUFFER PACKET))))

(COMPILE-FLAVOR-METHODS ADDRESS-RESOLUTION-NETWORK)

(DEFVAR *ADDRESS-RESOLUTION-NETWORK* (WITH-NETWORK-CONS-AREA
				       (MAKE-INSTANCE 'ADDRESS-RESOLUTION-NETWORK)))



;;; A network that attaches to a driver that supports address resolution
;;; must provide the following values when sent a
;;; :address-resolution-parameters message:
;;; 	Software protocol number
;;; 	number of bytes of protocol address
;;; 	number ordering (:big :little :array or :fixnum-big)
;;; 	protocol broadcast address (or NIL for none)
;;; An interface must supply the the following values when sent a
;;; :address-resolution-parameters message:
;;; 	Hardware protocol number
;;; 	number of bytes of hardware address
;;; 	hardware broadcast address (or NIL for none)
;;; Note that hardware addresses are always ART-8B arrays

  ;;
;;;;;;  Address resolution mixin, for interfaces that support RFC826
  ;;

(DEFFLAVOR ADDRESS-RESOLUTION-INTERFACE-MIXIN
	((PROTOCOL-TABLE NIL)
	 ADDRESS-RESOLUTION-INTERFACE-HARDWARE-NUMBER
	 ADDRESS-RESOLUTION-INTERFACE-NBYTES-HARDWARE
	 (cached-entry nil)
	 (cached-network nil)
	 (cached-protocol-address nil)
	 (cached-hardware-address nil))
	()
  (:REQUIRED-FLAVORS NETWORK-INTERFACE))

;;; PROTOCOL-TABLE has one of these for each software protocol supported.
(DEFSTRUCT (PROTOCOL-TABLE-ENTRY :NAMED :CONC-NAME (:MAKE-ARRAY (:AREA NETWORK-CONS-AREA)))
  NETWORK					;The NCP object
  PROTOCOL-NUMBER				;In lispm byte order
  NBYTES-PROTOCOL
  LOCAL-ADDRESS					;Protocol address
  HASH-TABLE
  BROADCAST-ADDRESS				;Protocol address or NIL if not defined
  NUMBER-ORDERING				;:BIG, :LITTLE :ARRAY or :FIXNUM-BIG
  )

(DEFUN MAKE-ADDRESS-RESOLUTION-PROTOCOL-ENTRY ()
  (WITH-NETWORK-CONS-AREA
    (MAKE-PROTOCOL-TABLE-ENTRY
      NETWORK *ADDRESS-RESOLUTION-NETWORK*
      PROTOCOL-NUMBER (SEND *ADDRESS-RESOLUTION-NETWORK* ':ADDRESS-RESOLUTION-PARAMETERS)
      HASH-TABLE NIL)))

;;; This is the necessary stub that gets stuffed in the protocol table
;;; of interfaces that support address resolution.
(DEFVAR *ADDRESS-RESOLUTION-PROTOCOL-ENTRY* (MAKE-ADDRESS-RESOLUTION-PROTOCOL-ENTRY))

(DEFMETHOD (:INIT ADDRESS-RESOLUTION-INTERFACE-MIXIN :AFTER) (IGNORE)
  (UNLESS (SEND SELF ':BROADCAST-ADDRESS)
    (FERROR "Interfaces with address resolution must have a hardware broadcast address."))
  (MULTIPLE-VALUE-BIND (HARDWARE-NUMBER NBYTES-HARDWARE IGNORE)
      (SEND SELF ':ADDRESS-RESOLUTION-PARAMETERS)
    (SETQ ADDRESS-RESOLUTION-INTERFACE-HARDWARE-NUMBER HARDWARE-NUMBER)
    (SETQ ADDRESS-RESOLUTION-INTERFACE-NBYTES-HARDWARE NBYTES-HARDWARE)))

(DEFMETHOD (:RESET ADDRESS-RESOLUTION-INTERFACE-MIXIN :AFTER) ()
  (SETQ PROTOCOL-TABLE NIL))

(DEFMETHOD (:ENABLE ADDRESS-RESOLUTION-INTERFACE-MIXIN :BEFORE) ()
  (WITH-NETWORK-CONS-AREA
    (CL:PUSHNEW *ADDRESS-RESOLUTION-PROTOCOL-ENTRY* PROTOCOL-TABLE)))

(DEFMETHOD (:DESCRIBE-PROTOCOLS ADDRESS-RESOLUTION-INTERFACE-MIXIN) ()
  (FORMAT T "~%~S:~%  Local hardware address ~A (~D bytes, type ~16R) ~@
	       ~@8Twith hardware broadcast address ~A"
	  SELF
	  (SEND SELF ':UNPARSE-ADDRESS (SEND SELF ':LOCAL-HARDWARE-ADDRESS))
	  ADDRESS-RESOLUTION-INTERFACE-NBYTES-HARDWARE
	  ADDRESS-RESOLUTION-INTERFACE-HARDWARE-NUMBER
	  (SEND SELF ':UNPARSE-ADDRESS (SEND SELF ':BROADCAST-ADDRESS)))
  (DOLIST (ENTRY PROTOCOL-TABLE)
    (LET ((NETWORK            (PROTOCOL-TABLE-ENTRY-NETWORK           ENTRY))
	  (PROTOCOL-NUMBER    (PROTOCOL-TABLE-ENTRY-PROTOCOL-NUMBER   ENTRY))
	  (NBYTES-PROTOCOL    (PROTOCOL-TABLE-ENTRY-NBYTES-PROTOCOL   ENTRY))
	  (LOCAL-ADDRESS      (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS     ENTRY))
	  (HASH-TABLE	      (PROTOCOL-TABLE-ENTRY-HASH-TABLE	      ENTRY))
	  (BROADCAST-ADDRESS  (PROTOCOL-TABLE-ENTRY-BROADCAST-ADDRESS ENTRY)))
      (FORMAT T "~&  Serving ~S (type ~16,4,'0R)~@[ at protocol address ~A~]~@[ (~D bytes)~]~
	             ~@[~%~@8Twith protocol broadcast address ~A~]"
	      NETWORK PROTOCOL-NUMBER
	      (AND LOCAL-ADDRESS (SEND NETWORK ':UNPARSE-ADDRESS LOCAL-ADDRESS))
	      NBYTES-PROTOCOL
	      (AND BROADCAST-ADDRESS (SEND NETWORK ':UNPARSE-ADDRESS BROADCAST-ADDRESS)))
      (WHEN HASH-TABLE
	(FORMAT T "~&    With the following address resolutions:")
	(MAPHASH #'(LAMBDA (KEY VALUE)
		     (FORMAT T "~&      ~A <==> ~A"
			     (SEND NETWORK ':UNPARSE-ADDRESS KEY)
			     (SEND SELF ':UNPARSE-ADDRESS VALUE)))
		 HASH-TABLE)))))


(DEFMETHOD (:PROTOCOL-ADDRESS ADDRESS-RESOLUTION-INTERFACE-MIXIN) (NETWORK)
  (DOLIST (ENTRY PROTOCOL-TABLE)
    (WHEN (EQ (PROTOCOL-TABLE-ENTRY-NETWORK ENTRY) NETWORK)
      (RETURN (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS ENTRY)))))

(DEFMETHOD (:NETWORK-SUPPORTED ADDRESS-RESOLUTION-INTERFACE-MIXIN :OR) (NETWORK)
  (AND (SEND NETWORK ':ADDRESS-RESOLUTION-PARAMETERS)
       T))

;;; Setup an interface for handling a network.
(DEFMETHOD (:ADD-NETWORK ADDRESS-RESOLUTION-INTERFACE-MIXIN :AFTER) (NETWORK LOCAL-ADDRESS)
  (WITH-NETWORK-CONS-AREA
    (MULTIPLE-VALUE-BIND (PROTOCOL-NUMBER NBYTES-PROTOCOL NUMBER-ORDERING BROADCAST-ADDRESS)
	(SEND NETWORK ':ADDRESS-RESOLUTION-PARAMETERS)
      (MULTIPLE-VALUE-BIND (HARDWARE-NUMBER NBYTES-HARDWARE HARDWARE-BROADCAST-ADDRESS)
	  (SEND SELF ':ADDRESS-RESOLUTION-PARAMETERS)
	(SETQ ADDRESS-RESOLUTION-INTERFACE-HARDWARE-NUMBER HARDWARE-NUMBER)
	(SETQ ADDRESS-RESOLUTION-INTERFACE-NBYTES-HARDWARE NBYTES-HARDWARE)
	(LET ((ENTRY (OR (DOLIST (ENTRY PROTOCOL-TABLE)
			   (WHEN (EQ (PROTOCOL-TABLE-ENTRY-NETWORK ENTRY) NETWORK)
			     (RETURN ENTRY)))
			 (MAKE-PROTOCOL-TABLE-ENTRY))))
	  (ALTER-PROTOCOL-TABLE-ENTRY ENTRY
				      NETWORK           NETWORK
				      PROTOCOL-NUMBER   PROTOCOL-NUMBER
				      NBYTES-PROTOCOL   NBYTES-PROTOCOL
				      LOCAL-ADDRESS     LOCAL-ADDRESS
				      BROADCAST-ADDRESS BROADCAST-ADDRESS
				      NUMBER-ORDERING   NUMBER-ORDERING)
	  (LET ((HASH-TABLE (CL:ECASE NUMBER-ORDERING
			      ((:LITTLE :BIG :FIXNUM-BIG)
			       (CL:MAKE-HASH-TABLE :TEST #'EQL :LOCKING :WITHOUT-INTERRUPTS
						   :IGNORE-GC T))
			      ((:ARRAY)
			       (CL:MAKE-HASH-TABLE :TEST #'CL:EQUALP
						   :HASH-FUNCTION
						   (LAMBDA (ARRAY &AUX (HASH 0))
						     (DOTIMES (I (CL:LENGTH ARRAY))
						       (SETF HASH
							 (ROT (LOGXOR (AREF ARRAY I) HASH)
							      7)))
						     HASH)
						   :LOCKING :WITHOUT-INTERRUPTS)))))
	    (SETF (PROTOCOL-TABLE-ENTRY-HASH-TABLE ENTRY) HASH-TABLE)
	    (SETF (GETHASH LOCAL-ADDRESS HASH-TABLE) (SEND SELF ':LOCAL-HARDWARE-ADDRESS))
	    (WHEN BROADCAST-ADDRESS
	      (SETF (GETHASH BROADCAST-ADDRESS HASH-TABLE) HARDWARE-BROADCAST-ADDRESS)))
	  (SETQ PROTOCOL-TABLE (DELQ ENTRY PROTOCOL-TABLE))
	  (PUSH ENTRY PROTOCOL-TABLE))))))

  ;;
;;;;;;  Packet input from an interface that supports address resolution
  ;;

(DEFMETHOD (:RECEIVE-PROTOCOL-PACKET ADDRESS-RESOLUTION-INTERFACE-MIXIN)
	   (PROTOCOL-PACKET PROTOCOL)
  (LOOP FOR ENTRY IN PROTOCOL-TABLE
	WHEN (= (PROTOCOL-TABLE-ENTRY-PROTOCOL-NUMBER ENTRY) PROTOCOL)
	  DO (INCF RECEIVE-COUNT)
	  AND RETURN (SEND (PROTOCOL-TABLE-ENTRY-NETWORK ENTRY) ':RECEIVE-PACKET
			   PROTOCOL-PACKET SELF (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS ENTRY))
        FINALLY (DEALLOCATE-PACKET-BUFFER PROTOCOL-PACKET)))

;;; Address resolution packet comes in.  *address-resolution-network*
;;; sends it here.
(DEFMETHOD (:PROCESS-ADDRESS-RESOLUTION ADDRESS-RESOLUTION-INTERFACE-MIXIN) (PACKET)
  (WITH-NETWORK-PACKET (PACKET)
    (BLOCK PROCESS
      ;; At the very bottom of a long chain of WHENs there is a
      ;; return-from.  If that doesn't get executed, the packet will be
      ;; freed by the drop-through clause of this BLOCK.
      (WHEN (= (ADDRESS-RESOLUTION-PACKET-HARDWARE PACKET)	;Is this my hardware type?
	       ADDRESS-RESOLUTION-INTERFACE-HARDWARE-NUMBER)
	(LET ((ENTRY (LOOP FOR ENTRY IN PROTOCOL-TABLE	;Do I speak this protocol?
			   WITH PROTOCOL = (ADDRESS-RESOLUTION-PACKET-PROTOCOL PACKET)
			   WHEN (= PROTOCOL
				   (PROTOCOL-TABLE-ENTRY-PROTOCOL-NUMBER ENTRY))
			     RETURN ENTRY))
	      (NBYTES-HARDWARE ADDRESS-RESOLUTION-INTERFACE-NBYTES-HARDWARE))
	  (WHEN (AND ENTRY NBYTES-HARDWARE)	;double check
	    (LET ((ENTRY ENTRY))
	      (DECLARE (SYS:ARRAY-REGISTER ENTRY))
	      (LET ((NBYTES-PROTOCOL (PROTOCOL-TABLE-ENTRY-NBYTES-PROTOCOL ENTRY))
		    (LOCAL-ADDRESS (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS   ENTRY))
		    (NUMBER-ORDERING (PROTOCOL-TABLE-ENTRY-NUMBER-ORDERING ENTRY)))
		(WHEN (AND NBYTES-PROTOCOL LOCAL-ADDRESS NUMBER-ORDERING)	;triple check
		  (LET ((PROTOCOL-SENDER
			  (LET ((INDEX (+ ADDRESS-RESOLUTION-PACKET-SIZE NBYTES-HARDWARE)))
			    (SELECTQ NUMBER-ORDERING
			      (:LITTLE     (PUT-TOGETHER-BYTES :LITTLE PACKET
							       INDEX NBYTES-PROTOCOL))
			      (:BIG        (PUT-TOGETHER-BYTES :BIG PACKET
							       INDEX NBYTES-PROTOCOL))
			      (:FIXNUM-BIG (PUT-TOGETHER-BYTES :FIXNUM-BIG PACKET
							       INDEX NBYTES-PROTOCOL))
			      (:ARRAY      (PUT-TOGETHER-BYTES :ARRAY PACKET
							       INDEX NBYTES-PROTOCOL))
			      (OTHERWISE
			       (FERROR "Unknown number ordering ~A in address resolution"
				       NUMBER-ORDERING)))))
			(HARDWARE-SENDER)
			(MERGE-FLAG NIL))
		    ;; Check to see if this is someone trying to screw up our broadcast address
		    (WHEN (NOT (OR (EQL PROTOCOL-SENDER
					(PROTOCOL-TABLE-ENTRY-BROADCAST-ADDRESS ENTRY))
				   (CL:EQUALP PROTOCOL-SENDER
					      (PROTOCOL-TABLE-ENTRY-BROADCAST-ADDRESS ENTRY))))
		      (WHEN (OR (EQL PROTOCOL-SENDER
				     (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS ENTRY))
				(CL:EQUALP PROTOCOL-SENDER
					   (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS ENTRY)))
			;; Danger!  Someone has our protocol-address!  Disable the
			;; network and notify the user if it smells like a valid ARP
			;; packet, otherwise ignore it.
			(LET ((OPCODE (ADDRESS-RESOLUTION-PACKET-OPCODE PACKET)))
			  (WHEN (OR (= OPCODE *ADDRESS-RESOLUTION-REQUEST*)
				    (= OPCODE *ADDRESS-RESOLUTION-REPLY*))
			    (LET* ((NETWORK (PROTOCOL-TABLE-ENTRY-NETWORK ENTRY))
				   (UNPARSED-OFFENDER-HARDWARE
				     (MAKE-ARRAY NBYTES-HARDWARE :TYPE 'SYS:ART-8B
						 :DISPLACED-TO PACKET
						 :DISPLACED-INDEX-OFFSET
						 ADDRESS-RESOLUTION-PACKET-SIZE)))
			      ;; Ignore packets with our hardware address.  Either we have a
			      ;; full-duplex interface or someone is reflecting packets back
			      ;; at us.
			      (WHEN (AND (NULL FULL-DUPLEX-P)
					 (NOT (CL:EQUALP UNPARSED-OFFENDER-HARDWARE
							 (SEND SELF :LOCAL-HARDWARE-ADDRESS))))
				(LET ((OFFENDER-HARDWARE
					(SEND SELF :UNPARSE-ADDRESS UNPARSED-OFFENDER-HARDWARE)
					))
				  (SEND-IF-HANDLES NETWORK :DISABLE)
				  (TV:NOTIFY
				    NIL
				    "Address Resolution ~A received from a host with the same protocol address on the ~A network as this machine.  ~&The ~A network has been disabled.  ~&Report this to your network administrator immediately.  ~&The hardware address of the offending host is: ~A ~&Use the form (NETI:DEBUG-COLLIDING-PROTOCOL-ADDRESSES /"~a/") to try to find the offending host."
				    (SELECTOR OPCODE =
				      (*ADDRESS-RESOLUTION-REQUEST* "Request")
				      (*ADDRESS-RESOLUTION-REPLY* "Reply")
				      (OTHERWISE (FORMAT NIL
							 "unknown address resolution opcode ~D"
							 OPCODE)))
				    NETWORK NETWORK OFFENDER-HARDWARE OFFENDER-HARDWARE))))))
			D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Special case, we have to deallocate the packet since we are bombing
			;; out of the "long chain of when clauses"
0			(DEALLOCATE-PACKET-BUFFER PACKET)
			(RETURN-FROM PROCESS))
		      ;; update the table with new resolutions if we already have them
		      (LET ((EXISTING-TRANSLATION
			      (GETHASH PROTOCOL-SENDER (PROTOCOL-TABLE-ENTRY-HASH-TABLE ENTRY))))
			(WHEN EXISTING-TRANSLATION
			  ;; Have an existing entry in the table.
			  ;; Update the hardware-sender into the table in case the current
			  ;; value is out-of-date.
			  (LET* ((FROM-START ADDRESS-RESOLUTION-PACKET-SIZE)
				 (FROM-LIMIT (+ FROM-START NBYTES-HARDWARE)))
			    (COPY-ARRAY-PORTION PACKET FROM-START FROM-LIMIT
						EXISTING-TRANSLATION 0 NBYTES-HARDWARE))
			  (SETQ HARDWARE-SENDER EXISTING-TRANSLATION)
			  (SETQ MERGE-FLAG T))))
		    ;; Compare the address in the packet to my local protocol address
		    (WHEN (LET ((INDEX (+ ADDRESS-RESOLUTION-PACKET-SIZE NBYTES-HARDWARE
					  NBYTES-PROTOCOL NBYTES-HARDWARE)))
			    (SELECTQ NUMBER-ORDERING
			      (:LITTLE     (COMPARE-BYTES :LITTLE PACKET INDEX LOCAL-ADDRESS
							  NBYTES-PROTOCOL))
			      (:BIG        (COMPARE-BYTES :BIG PACKET INDEX LOCAL-ADDRESS
							  NBYTES-PROTOCOL))
			      (:FIXNUM-BIG (COMPARE-BYTES :FIXNUM-BIG PACKET INDEX LOCAL-ADDRESS
							  NBYTES-PROTOCOL))
			      (:ARRAY      (COMPARE-BYTES :ARRAY PACKET INDEX LOCAL-ADDRESS
							  NBYTES-PROTOCOL))))
		      (WHEN (NOT MERGE-FLAG)
			;; Cons hardware-sender in stable storage and encache the translation
			(SETQ HARDWARE-SENDER (PUT-TOGETHER-BYTES :ARRAY PACKET
								  ADDRESS-RESOLUTION-PACKET-SIZE
								  NBYTES-HARDWARE))
			(SETF (GETHASH PROTOCOL-SENDER (PROTOCOL-TABLE-ENTRY-HASH-TABLE ENTRY))
			      HARDWARE-SENDER))
		      ;; Is this an address resolution request??
		      (WHEN (= (ADDRESS-RESOLUTION-PACKET-OPCODE PACKET)
			       *ADDRESS-RESOLUTION-REQUEST*)
			;; Copy the sender to the receiver
			(LOOP REPEAT (+ NBYTES-HARDWARE NBYTES-PROTOCOL)
			      FOR READ-INDEX UPFROM ADDRESS-RESOLUTION-PACKET-SIZE
			      FOR WRITE-INDEX UPFROM (+ ADDRESS-RESOLUTION-PACKET-SIZE
							(+ NBYTES-HARDWARE NBYTES-PROTOCOL))
			      DO (SETF (AREF PACKET WRITE-INDEX) (AREF PACKET READ-INDEX)))
			;; Fill in the sender from local addresses
			(LET ((INDEX ADDRESS-RESOLUTION-PACKET-SIZE))
			  (FILL-IN-BYTES :ARRAY PACKET INDEX
					 (SEND SELF ':LOCAL-HARDWARE-ADDRESS) NBYTES-HARDWARE)
			  (SELECTQ NUMBER-ORDERING
			    (:LITTLE     (FILL-IN-BYTES :LITTLE PACKET INDEX LOCAL-ADDRESS
							NBYTES-PROTOCOL))
			    (:BIG        (FILL-IN-BYTES :BIG    PACKET INDEX LOCAL-ADDRESS
							NBYTES-PROTOCOL))
			    (:FIXNUM-BIG (FILL-IN-BYTES :FIXNUM-BIG PACKET INDEX LOCAL-ADDRESS
							NBYTES-PROTOCOL))
			    (:ARRAY      (FILL-IN-BYTES :ARRAY PACKET INDEX LOCAL-ADDRESS
							NBYTES-PROTOCOL))))
			(SETF (ADDRESS-RESOLUTION-PACKET-OPCODE PACKET)
			      *ADDRESS-RESOLUTION-REPLY*)
			;; Note!  Hardware sender is safe to use here
			;; because the only two paths thru the code above
			;; are the path where we updated a pre-extant table
			;; entry, or the path where we consed a new one.  In
			;; both cases we held onto the table entry, as
			;; hardware-sender
			(RETURN-FROM PROCESS
			  (SEND SELF ':TRANSMIT-PACKET PACKET T *ADDRESS-RESOLUTION-NETWORK*
				HARDWARE-SENDER
				(+ ADDRESS-RESOLUTION-PACKET-SIZE
				   NBYTES-HARDWARE NBYTES-PROTOCOL
				   NBYTES-HARDWARE NBYTES-PROTOCOL))))))))))))
      (DEALLOCATE-PACKET-BUFFER PACKET))))

1;;; This is only to be used by users trying to find two hosts that have the same protocol
;;; addresses.  
0(defun (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")debug-colliding-protocol-addresses 0(ethernet-address)
  1;; A little code stolen from the :parse-address method for the slap network
0  (let ((address (cl:make-array 6 :element-type '(cl:unsigned-byte 8)))
	(found nil))
    (fill-in-bytes
      :big address 0 (cl:parse-integer (cl:remove #\- ethernet-address)
					  :radix 16.) 6. nil)
    1;; Go through all the interfaces and networks 
0    (loop for interface in *interfaces*
	  when (typep interface 'neti:ethernet-interface)
	    do
	      (loop for net in *local-networks* do
		(let ((protocol-address
			(send-if-handles interface :hardware-address-protocol-address
					 net address)))
		  (when protocol-address
		    (let ((host (send-if-handles net :network-address-host-object
						 protocol-address)))
		      (when host
			(setq found t)
			(format t "~&The network ~A says that ~A belongs to host ~A"
				net ethernet-address host)
			(when (and (eq (send net :type) :chaos) (send net :enabled))
			  (format t "~&Hostating the host to see what it thinks it is..")
			  (hostat host))))))))
    (when (not found)
      (format t
	      "~&Not able to find any host to match that ethernet address on this machine.  Perhaps you can try on another machine."))))

(DEFMETHOD (:ADD-ADDRESS-RESOLUTION-MAPPING ADDRESS-RESOLUTION-INTERFACE-MIXIN)
	   (HARDWARE-TYPE HARDWARE-ADDRESS PROTOCOL-TYPE PROTOCOL-ADDRESS)
  (WHEN (EQL HARDWARE-TYPE (SEND SELF :ADDRESS-RESOLUTION-PARAMETERS))
    (DOLIST (ENTRY PROTOCOL-TABLE)
      (WHEN (EQL PROTOCOL-TYPE (PROTOCOL-TABLE-ENTRY-PROTOCOL-NUMBER ENTRY))
	(LET ((HASH-TABLE (PROTOCOL-TABLE-ENTRY-HASH-TABLE ENTRY)))
	  (LET ((EXISTING-MAPPING (GETHASH PROTOCOL-ADDRESS HASH-TABLE)))
	    (UNLESS EXISTING-MAPPING
	      (SETF (GETHASH PROTOCOL-ADDRESS HASH-TABLE) HARDWARE-ADDRESS))))))))


  ;;
;;;;;;  Output.  Resolve address and ask for resolution if none found.
  ;;

(defmethod (:resolve-protocol-address address-resolution-interface-mixin)
	   (network protocol-address)
  (process:with-no-other-processes
    1;; For networks that use fixnum addressing, we try to use the last resolution to save the
    ;; hash table lookup or at least use the last protocol table entry if the networks are the
    ;; same.
0    (let ((entry))
      (if (network-eql network cached-network)
	  (progn
	    (setq entry cached-entry)		1;Save this for later
0	    (when (eql protocol-address cached-protocol-address)	1;Use the whole cache
0	      (let ((entry entry))
		(declare (sys:array-register entry))
		(return-from :resolve-protocol-address	1;Return, we have everything cached
0		  (values cached-hardware-address
			  (protocol-table-entry-protocol-number entry)
			  (eql protocol-address
			       (protocol-table-entry-local-address entry)))))))
	  (setq entry				1;Ok, its a different network find the entry.
0		(loop for entry in protocol-table
		      when (network-eql network (protocol-table-entry-network entry))
			return entry
		      finally (ferror "Unknown network ~S asked to transmit packet."
				      network))))
      1;; Can't use the cached value, try to find it in the hash table
0      (let ((entry entry))
	(declare (sys:array-register entry))
	(let* ((hash-table (protocol-table-entry-hash-table entry))
	       (local-address (protocol-table-entry-local-address entry))
	       (hardware-address (if hash-table
				     (gethash protocol-address hash-table)
				     protocol-address))
	       (fixnum-addressing (fixnump local-address)))
	  (if (null hardware-address)
	      1;;OK, we don't have a resolution in the hash-table, send an ARP request
0	      (send self ':request-address-resolution entry protocol-address)
	      1;; We do have one, cache it
0	      (when fixnum-addressing
		(setq cached-protocol-address protocol-address)
		(setq cached-network network)
		(setq cached-entry entry)
		(setq cached-hardware-address hardware-address)))
	  (values hardware-address
		  (protocol-table-entry-protocol-number entry)
		  (if fixnum-addressing
		      (eql protocol-address local-address)	;Speed bum
		      (cl:equalp protocol-address local-address))))))))

(DEFMETHOD (:HARDWARE-ADDRESS-PROTOCOL-ADDRESS ADDRESS-RESOLUTION-INTERFACE-MIXIN)
	   (NETWORK HARDWARE-ADDRESS)
  (BLOCK FOUND-IT
    (LET* ((ENTRY (LOOP FOR ENTRY IN PROTOCOL-TABLE
			WHEN (EQ NETWORK (PROTOCOL-TABLE-ENTRY-NETWORK ENTRY))
			  RETURN ENTRY
			FINALLY (RETURN-FROM FOUND-IT NIL)))
	   (HASH-TABLE (PROTOCOL-TABLE-ENTRY-HASH-TABLE ENTRY)))
      (MAPHASH #'(LAMBDA (TEST-PROTOCOL-ADDRESS TEST-HARDWARE-ADDRESS)
		   (WHEN (COMPARE-BYTES :ARRAY HARDWARE-ADDRESS 0
					TEST-HARDWARE-ADDRESS
					ADDRESS-RESOLUTION-INTERFACE-NBYTES-HARDWARE)
		     (RETURN-FROM FOUND-IT TEST-PROTOCOL-ADDRESS)))
	       HASH-TABLE)
      NIL)))

(DEFMETHOD (:REQUEST-ADDRESS-RESOLUTION ADDRESS-RESOLUTION-INTERFACE-MIXIN)
	   (PROTOCOL-TABLE-ENTRY TARGET-ADDRESS)
  (LET* ((PACKET (SEND SELF ':ALLOCATE-PACKET NIL))
	 (NBYTES-HARDWARE ADDRESS-RESOLUTION-INTERFACE-NBYTES-HARDWARE)
	 (NBYTES-PROTOCOL (PROTOCOL-TABLE-ENTRY-NBYTES-PROTOCOL PROTOCOL-TABLE-ENTRY))
	 (INDEX ADDRESS-RESOLUTION-PACKET-SIZE))
    (WHEN PACKET
      (WITH-NETWORK-PACKET (PACKET)
	(SETF (ADDRESS-RESOLUTION-PACKET-HARDWARE PACKET)
	      ADDRESS-RESOLUTION-INTERFACE-HARDWARE-NUMBER)
	(SETF (ADDRESS-RESOLUTION-PACKET-PROTOCOL PACKET)
	      (PROTOCOL-TABLE-ENTRY-PROTOCOL-NUMBER PROTOCOL-TABLE-ENTRY))
	(SETF (ADDRESS-RESOLUTION-PACKET-HARDWARE-LENGTH PACKET) NBYTES-HARDWARE)
	(SETF (ADDRESS-RESOLUTION-PACKET-PROTOCOL-LENGTH PACKET) NBYTES-PROTOCOL)
	(SETF (ADDRESS-RESOLUTION-PACKET-OPCODE PACKET) *ADDRESS-RESOLUTION-REQUEST*)
	;; The address resolution protocol is big-ender.  For convenience, we interpret
	;; 48-bit ethernet addresses as little-ender, since they aren't seen externally.
	;; The protocol itself can be big-ender (IP or NS) or little-ender (chaosnet).
	(FILL-IN-BYTES :ARRAY PACKET INDEX (SEND SELF ':LOCAL-HARDWARE-ADDRESS) NBYTES-HARDWARE)
	(SELECTQ (PROTOCOL-TABLE-ENTRY-NUMBER-ORDERING PROTOCOL-TABLE-ENTRY)
	  (:LITTLE     (FILL-IN-BYTES :LITTLE PACKET INDEX
				      (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS PROTOCOL-TABLE-ENTRY)
				      NBYTES-PROTOCOL))
	  (:BIG        (FILL-IN-BYTES :BIG PACKET INDEX
				      (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS PROTOCOL-TABLE-ENTRY)
				      NBYTES-PROTOCOL))
	  (:FIXNUM-BIG (FILL-IN-BYTES :FIXNUM-BIG PACKET INDEX
				      (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS PROTOCOL-TABLE-ENTRY)
				      NBYTES-PROTOCOL))
	  (:ARRAY      (FILL-IN-BYTES :ARRAY PACKET INDEX
				      (PROTOCOL-TABLE-ENTRY-LOCAL-ADDRESS PROTOCOL-TABLE-ENTRY)
				      NBYTES-PROTOCOL))
	  (OTHERWISE (FERROR "Unknown number ordering ~A in address resolution"
			     (PROTOCOL-TABLE-ENTRY-NUMBER-ORDERING PROTOCOL-TABLE-ENTRY))))
	(FILL-IN-BYTES :LITTLE PACKET INDEX 0 NBYTES-HARDWARE)
	(SELECTQ (PROTOCOL-TABLE-ENTRY-NUMBER-ORDERING PROTOCOL-TABLE-ENTRY)
	  (:LITTLE     (FILL-IN-BYTES :LITTLE     PACKET INDEX TARGET-ADDRESS NBYTES-PROTOCOL))
	  (:BIG	     (FILL-IN-BYTES :BIG        PACKET INDEX TARGET-ADDRESS NBYTES-PROTOCOL))
	  (:FIXNUM-BIG (FILL-IN-BYTES :FIXNUM-BIG PACKET INDEX TARGET-ADDRESS NBYTES-PROTOCOL))
	  (:ARRAY      (FILL-IN-BYTES :ARRAY	PACKET INDEX TARGET-ADDRESS NBYTES-PROTOCOL)))
	(SEND SELF ':TRANSMIT-PACKET
	      PACKET T
	      *ADDRESS-RESOLUTION-NETWORK*
	      (SEND SELF ':BROADCAST-ADDRESS)
	      INDEX)))))


  ;;
;;;;;; (10Mbit) Ethernet interfaces
  ;;

;;; An Ethernet interface, just a network interface with address resolution

(DEFFLAVOR ETHERNET-INTERFACE
	(LOCAL-HARDWARE-ADDRESS)		;A 48-bit number (6 bytes)
	(ADDRESS-RESOLUTION-INTERFACE-MIXIN NETWORK-INTERFACE)
  (:INITABLE-INSTANCE-VARIABLES LOCAL-HARDWARE-ADDRESS)
  (:GETTABLE-INSTANCE-VARIABLES LOCAL-HARDWARE-ADDRESS))

(DEFCONST *ETHERNET-BROADCAST-ADDRESS*
	  (MAKE-ARRAY 6 ':TYPE 'ART-8B ':AREA NETWORK-CONS-AREA ':INITIAL-VALUE -1))

(DEFMETHOD (:ADDRESS-RESOLUTION-PARAMETERS ETHERNET-INTERFACE) ()
  (VALUES #X+0001 6 *ETHERNET-BROADCAST-ADDRESS*))

(DEFMETHOD (:BROADCAST-ADDRESS ETHERNET-INTERFACE) ()
  *ETHERNET-BROADCAST-ADDRESS*)

(DEFMETHOD (:ADD-NETWORK-1 ETHERNET-INTERFACE) (NETWORK LOCAL-ADDRESS)
  NETWORK
  LOCAL-ADDRESS
  NIL)

(DEFMETHOD (:MAX-PACKET-SIZE ETHERNET-INTERFACE) () 1500.)

(DEFMETHOD (:UNPARSE-ADDRESS ETHERNET-INTERFACE) (ADDRESS)
  (FORMAT NIL "~{~16,2,'0R~@[-~]~}" (LISTARRAY ADDRESS)))
