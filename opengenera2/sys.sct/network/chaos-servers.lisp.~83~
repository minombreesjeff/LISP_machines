;;; -*- Mode: LISP; Package: CHAOS; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This could be more generic of course, but why bother?
(DEFINE-SERVER :CHAOS-STATUS (:MEDIUM :CHAOS :SIMPLE-P T :REJECT-UNLESS-TRUSTED NIL :CONN CONN)
  (LET* ((PKT (GET-PKT))
	 (STRING (PKT-8B-ARRAY PKT)))
    (LOOP WITH NAME = (SEND NET:*LOCAL-HOST* :PRETTY-NAME)
	  WITH LEN = (STRING-LENGTH NAME)
	  FOR I FROM 0 BELOW 32.
	  DO (SETF (AREF STRING I) (IF (< I LEN)
				       (CHAR-CODE (AREF NAME I))
				       0)))
    (SETF (PKT-NBYTES PKT) 32.)
    (DOLIST (INTERFACE NETI:*INTERFACES*)
      (IF (SEND INTERFACE ':PROTOCOL-ADDRESS *LOCAL-CHAOSNET*)
	  (SEND INTERFACE ':SEND-IF-HANDLES ':ADD-CHAOS-STATUS PKT)))
    (ANSWER CONN PKT)))


;;; ++ It is unclear to me where this should go.  Putting it in
;;; linterfaces is unmodular because it assumes chaos data structures.
;;; Putting it here assumes the structure of the interface.  Putting it
;;; in a separate file seems silly. 
#+3600
(defmethod (:add-chaos-status neti:3600-ethernet-interface) (pkt)
  (pkt-add-32 pkt (dpb 16. (byte 20 20)
		       (+ (ldb (byte 10 10) (send self ':protocol-address *local-chaosnet*))
			  400)))
  (PKT-add-32 pkt neti:receive-count)
  (pkt-add-32 pkt neti:transmit-count)
  (pkt-add-32 pkt %net-transmit-aborts)
  (pkt-add-32 pkt %net-data-overflows)
  (pkt-add-32 pkt %net-crc-errors)
  (pkt-add-32 pkt 0)
  (pkt-add-32 pkt %net-alignment-errors)
  (pkt-add-32 pkt neti:*really-short-packets*)
  )

#+3600
cli::
(defmethod (:add-chaos-status nbs-ethernet-interface) (pkt)
  (chaos:pkt-add-32 pkt (dpb 16. (byte 16. 16.)
			     (+ (ldb (byte 8. 8.)
				     (send self ':protocol-address chaos:*local-chaosnet*))
				400)))
  (chaos:pkt-add-32 pkt *nbs-net-meter-receive-count*)
  (chaos:pkt-add-32 pkt *nbs-net-meter-transmit-count*)
  (chaos:pkt-add-32 pkt (+ *nbs-net-meter-transmit-buffer-error*
			   *nbs-net-meter-underflow-error*
			   *nbs-net-meter-retry-error*))
  (chaos:pkt-add-32 pkt (+ *nbs-net-meter-overflow-error*
			   *nbs-net-meter-missed*))
  (chaos:pkt-add-32 pkt *nbs-net-meter-crc-error*)
  (chaos:pkt-add-32 pkt 0)
  (chaos:pkt-add-32 pkt *nbs-net-meter-framing-error*)
  (chaos:pkt-add-32 pkt (+ *nbs-net-meter-receive-buffer-error*
			   *nbs-net-meter-long-packets*))
  )

#||
#+IMACH
(defmethod (:add-chaos-status neti:VSBC-ETHERNET-INTERFACE) (pkt)
  (pkt-add-32 pkt (dpb 16. (byte 20 20)
		       (+ (ldb (byte 10 10) (send self ':protocol-address *local-chaosnet*))
			  400)))
  (pkt-add-32 pkt neti:receive-count)
  (pkt-add-32 pkt neti:transmit-count)
  (pkt-add-32 pkt NETI::*VSBC-TRANSMIT-ABORTS*)
  (pkt-add-32 pkt NETI::*VSBC-RSC-ERRORS*)
  (pkt-add-32 pkt NETI::*VSBC-CRC-ERRORS* )
  (pkt-add-32 pkt 0)
  (pkt-add-32 pkt NETI::*VSBC-ALN-ERRORS*)
  (pkt-add-32 pkt neti:*really-short-packets*)
  )
||#

#+(and IMach (not VLM))
(defmethod (:add-chaos-status neti:macivory-ethernet-interface) (pkt)
  (pkt-add-32 pkt (dpb 16. (byte 20 20)
		       (+ (ldb (byte 10 10) (send self ':protocol-address *local-chaosnet*))
			  400)))
  (pkt-add-32 pkt neti:receive-count)
  (pkt-add-32 pkt neti:transmit-count)
  (pkt-add-32 pkt neti:(MacIvory-net-channel-xmit-timeouts (eei-channel low-level-interface)))
  (pkt-add-32 pkt neti:(MacIvory-net-channel-recv-buffer-overwrites (eei-channel low-level-interface)))
  (pkt-add-32 pkt neti:(MacIvory-net-channel-other-receive-errors (eei-channel low-level-interface)))
  (pkt-add-32 pkt 0)
  (pkt-add-32 pkt neti:(MacIvory-net-channel-recv-address-errors (eei-channel low-level-interface)))
  (pkt-add-32 pkt 0)
  )

#+(and IMach (not VLM))
(defmethod (:add-chaos-status neti:82586-ethernet-interface) (pkt)
  (pkt-add-32 pkt (dpb 16. (byte 20 20)
		       (+ (ldb (byte 10 10) (send self ':protocol-address *local-chaosnet*))
			  400)))
  (pkt-add-32 pkt neti:receive-count)
  (pkt-add-32 pkt neti:transmit-count)
  (pkt-add-32 pkt (neti:82586-ei-transmit-aborts neti:low-level-interface))	D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");aborts
0  (pkt-add-32 pkt (neti:82586-ei-rsc-errors neti:low-level-interface))	1;lost
0  (pkt-add-32 pkt (neti:82586-ei-crc-errors neti:low-level-interface))	1;CRC
0  (pkt-add-32 pkt 0)				1;RAM
0  (pkt-add-32 pkt (neti:82586-ei-aln-errors neti:low-level-interface))	1;bitc
0  (pkt-add-32 pkt neti:*really-short-packets*))	1;other

0#+(and IMach (not VLM))
(defmethod (:add-chaos-status neti:solstice-ethernet-interface) (pkt)
  (pkt-add-32 pkt (dpb 16. (byte 20 20)
		       (+ (ldb (byte 10 10) (send self ':protocol-address *local-chaosnet*))
			  400)))
  (pkt-add-32 pkt neti:receive-count)
  (pkt-add-32 pkt neti:transmit-count)
  (pkt-add-32 pkt neti:(solstice-net-channel-output-errors (eei-channel low-level-interface)))
  (pkt-add-32 pkt 0)
  (pkt-add-32 pkt neti:(solstice-net-channel-input-errors (eei-channel low-level-interface)))
  (pkt-add-32 pkt 0)
  (pkt-add-32 pkt 0)
  (pkt-add-32 pkt 0)
  )

#+(and IMach VLM)
(DEFMETHOD (:ADD-CHAOS-STATUS NETI:VLM-ETHERNET-INTERFACE) (PKT)
  (PKT-ADD-32 PKT (DPB 16. (BYTE 20 20)
		       (+ (LDB (BYTE 10 10) (SEND SELF ':PROTOCOL-ADDRESS *LOCAL-CHAOSNET*))
			  400)))
  (PKT-ADD-32 PKT NETI:RECEIVE-COUNT)
  (PKT-ADD-32 PKT NETI:TRANSMIT-COUNT)
  (LET ((CHANNEL (NETI:EEI-CHANNEL NETI:LOW-LEVEL-INTERFACE)))
    (PKT-ADD-32 PKT (SYS:VLM-NET-CHANNEL-TRANSMIT-FAILURES CHANNEL))
    (PKT-ADD-32 PKT (SYS:VLM-NET-CHANNEL-PACKETS-LOST CHANNEL))
    (PKT-ADD-32 PKT (SYS:VLM-NET-CHANNEL-RECEIVE-FAILURES CHANNEL))
    (PKT-ADD-32 PKT 0)
    (PKT-ADD-32 PKT (SYS:VLM-NET-CHANNEL-FALSE-RECEIVER-WAKEUPS CHANNEL))
    (PKT-ADD-32 PKT 0)))

(DEFUN PKT-ADD-32 (PKT COUNT)
  (LET ((IDX (+ FIRST-DATA-WORD-IN-PKT (// (PKT-NBYTES PKT) 2))))
    (ASET (LDB (BYTE 20 0) COUNT) PKT IDX)
    (ASET (LDB (BYTE 20 20) COUNT) PKT (1+ IDX))
    (SETF (PKT-NBYTES PKT) (+ (PKT-NBYTES PKT) 4))))

(DEFINE-SERVER :CHAOS-ROUTING-TABLE (:MEDIUM :CHAOS :SIMPLE-P T :REJECT-UNLESS-TRUSTED NIL
					     :CONN CONN)
  (LET ((PKT (GET-PKT)))
    (LOOP WITH NBYTES = 0
	  FOR PKT-IDX UPFROM FIRST-DATA-WORD-IN-PKT BY 2
	  FOR SUBNET UPFROM 0 BELOW (MIN (ARRAY-LENGTH *ROUTING-TABLE*)
					 (// MAX-DATA-WORDS-PER-PKT 2))
	  AS METHOD = (AREF *ROUTING-TABLE* SUBNET)
	  DO (WHEN (NOT (FIXP METHOD))
	       (SETQ METHOD 1))			;kludge interfaces for now
	  (SETF (AREF PKT     PKT-IDX ) METHOD)
	  (SETF (AREF PKT (1+ PKT-IDX)) (AREF *ROUTING-TABLE-COST* SUBNET))
	  (INCF NBYTES 4)
	  FINALLY (SETF (PKT-NBYTES PKT) NBYTES))
    (ANSWER CONN PKT)))



(defun sink-server (&aux conn)
  (condition-case (err)
      (loop initially
	    (setq conn (listen "SINK"))
	    (accept conn)
	    do (return-pkt (get-next-pkt conn)))
    (sys:error (when conn (remove-conn conn)))))

(defun echo-server (&aux conn)
  (condition-case (err)
      (loop initially
	    (setq conn (listen "ECHO"))
	    (accept conn)
	    do (send-pkt conn (get-next-pkt conn)))
    (sys:error (when conn (remove-conn conn)))))

(defun source-server (&optional unc-p &aux conn)
  (condition-case (err)
      (loop initially
	    (setq conn (listen (if unc-p "UNC-SOURCE" "SOURCE")))
	    (accept conn)
	    as pkt = (get-pkt)
	    do (setf (pkt-nbytes pkt) 488.)
	       (if unc-p
		   (send-unc-pkt conn pkt)
		   (send-pkt conn pkt)))
    (sys:error (when conn (remove-conn conn)))))


;;; Help colleagues debug their programs

(DEFVAR SPY-PACKET-HEADER-ARRAY (MAKE-ARRAY 8. :TYPE 'ART-16B))
(DEFVAR SPY-NUMBER-OF-16B-WORDS (1- MAX-DATA-WORDS-PER-PKT))
(DEFVAR SPY-CURRENT-POINT 0)

(DEFVAR SPY-SCREEN-WIDTH)
(DEFVAR SPY-SCREEN-HEIGHT)
(DEFVAR SPY-MAX-SCREEN-IDX)
(DEFVAR SPY-SCREEN-ARRAY)

(DEFUN SETUP-SPY-SCREEN-ARRAY ()
 (SETQ SPY-SCREEN-WIDTH  (* (TV:SHEET-WIDTH TV:MAIN-SCREEN)
			    (SEND TV:MAIN-SCREEN :BITS-PER-PIXEL))
       SPY-SCREEN-HEIGHT (+ 8
			    (TV:SHEET-HEIGHT TV:MAIN-SCREEN)
			    (TV:SHEET-HEIGHT TV:WHO-LINE-SCREEN)
			    23))				    
  (SETQ SPY-MAX-SCREEN-IDX (// (+ (// (* SPY-SCREEN-HEIGHT SPY-SCREEN-WIDTH) 20)
				  SPY-NUMBER-OF-16B-WORDS
				  -1)
			       SPY-NUMBER-OF-16B-WORDS))
  (SETQ SPY-SCREEN-ARRAY			;IO Board can move
	(MAKE-ARRAY (* SPY-MAX-SCREEN-IDX SPY-NUMBER-OF-16B-WORDS)
		    ':TYPE 'ART-16B
		    ':DISPLACED-TO (SI:ARRAY-INDIRECT-POINTER
				     (TV:SHEET-SCREEN-ARRAY TV:MAIN-SCREEN))))
  )

(DEFUN SPY-PERIODIC-FUNCTION ()
  (LET ((PKT (GET-PKT NIL)))
    (WHEN PKT
      (SETQ SPY-CURRENT-POINT (\ (1+ SPY-CURRENT-POINT) SPY-MAX-SCREEN-IDX))
      (COPY-ARRAY-PORTION SPY-PACKET-HEADER-ARRAY 0 FIRST-DATA-WORD-IN-PKT
			  PKT			  0 FIRST-DATA-WORD-IN-PKT)
      (SETF (AREF PKT FIRST-DATA-WORD-IN-PKT) SPY-CURRENT-POINT)
      (COPY-ARRAY-PORTION SPY-SCREEN-ARRAY (* SPY-CURRENT-POINT SPY-NUMBER-OF-16B-WORDS)
			  (* (1+ SPY-CURRENT-POINT) SPY-NUMBER-OF-16B-WORDS)
			  PKT (+ FIRST-DATA-WORD-IN-PKT 1)
			  (+ FIRST-DATA-WORD-IN-PKT 1 SPY-NUMBER-OF-16B-WORDS))
      (TRANSMIT-PKT PKT))))

(DEFVAR SPY-PERIODIC-ACTION
	(PROCESS:DEFINE-PERIODIC-ACTION "Screen Spy" 0.06666667
	  'SPY-PERIODIC-FUNCTION
	  :PRIORITY (PROCESS:MAKE-PROCESS-PRIORITY :FG 5)
	  :RUN-REASONS NIL))

(DEFCONST *SCREEN-SPY-SERVER-ENABLED* NIL
  "NIL to forbid access if logged in, T to permit it, :NOTIFY to permit with a notification.")

(DEFUN ENABLE-MONITOR-SCREEN-SERVER (&KEY (SERVER-ENABLED :NO) (WHOLINE-APPEARANCE :VISIBLE))
  (CHECK-ARG SERVER-ENABLED
	     (MEMBER SERVER-ENABLED '(:YES :NO :NOTIFY))
	     "one of :YES, :NO, or :NOTIFY")
  (CHECK-ARG WHOLINE-APPEARANCE
	     (MEMBER WHOLINE-APPEARANCE '(:VISIBLE :INVISIBLE))
	     "one of :VISIBLE or :INVISIBLE")
  (SETF *SCREEN-SPY-SERVER-ENABLED*
	(CL:ECASE SERVER-ENABLED
	  (:NO NIL)
	  (:YES T)
	  (:NOTIFY :NOTIFY)))
  (SETF (GETF (NETI:SERVER-PROPERTY-LIST (NETI:FIND-SERVER-NAMED :CHAOS-SCREEN-SPY))
	      :WHO-LINE)
	(CL:ECASE WHOLINE-APPEARANCE
	  (:VISIBLE T)
	  (:INVISIBLE NIL)))
  (VALUES))

(DEFINE-SERVER :CHAOS-SCREEN-SPY (:MEDIUM :CHAOS :CONN CONN
					  :REJECT-UNLESS-TRUSTED T
					  :WHO-LINE T)
   (UNWIND-PROTECT
       (COND ((AND (NULL *SCREEN-SPY-SERVER-ENABLED*)
		   (NOT (EQUAL SI:USER-ID "")))
	      (REJECT CONN (FORMAT NIL "This system is in use by ~A." SI:USER-ID)))
	     #+IMach
	     ((SYS:SYSTEM-CASE (EMBEDDED T) (DOMINO T) (OTHERWISE NIL))
	      (REJECT CONN "Can't spy on systems without a hardware console."))
	     (T
	      (ACCEPT CONN)
	      (WHEN (EQ *SCREEN-SPY-SERVER-ENABLED* :NOTIFY)
		(TV:NOTIFY NIL "Use of CHAOS-SCREEN-SPY server by ~A."
			   (HOST-SHORT-NAME (FOREIGN-HOST-OBJECT CONN)))
		(PROCESS-ALLOW-SCHEDULE))
	      (SETUP-SPY-SCREEN-ARRAY)
	      ;; Wait for other end to acknowledge our OPN
	      (PROCESS-WAIT "Accept" #'CONN-FINISHED-P CONN)
	      (ALTER-PKT SPY-PACKET-HEADER-ARRAY
			 PKT-OPCODE-LEFT-JUSTIFIED 0
			 PKT-OPCODE UNC-OP
			 PKT-NBYTES MAX-DATA-BYTES-PER-PKT
			 PKT-DEST-ADDRESS (FOREIGN-ADDRESS CONN)
			 PKT-DEST-INDEX-NUM (FOREIGN-INDEX-NUM CONN)
			 PKT-SOURCE-ADDRESS (LOCAL-ADDRESS CONN)
			 PKT-SOURCE-INDEX-NUM (LOCAL-INDEX-NUM CONN)
			 PKT-NUM SPY-SCREEN-WIDTH
			 PKT-ACK-NUM SPY-SCREEN-HEIGHT)
	      (PROCESS-ENABLE SPY-PERIODIC-ACTION)
	      (WAIT CONN 'OPEN-STATE NIL)))
     (PROCESS-DISABLE SPY-PERIODIC-ACTION)
     (REMOVE-CONN CONN)))

;;; Client side.

(DEFVAR SCREEN-SPY-LAST-HOST-SPIED NIL)
(DEFVAR SCREEN-SPY-WINDOW NIL)
(DEFVAR SCREEN-SPY-OTHER-ARCHITECTURE-SIZE 0)
(DEFVAR SCREEN-SPY-OTHER-ARCHITECTURE-ARRAY NIL)

(DEFUN SCREEN-SPY (HOST &AUX CONN)
  #+IMach
  (SYS:SYSTEM-CASE
    ((EMBEDDED DOMINO) (ERROR "Can't spy from systems without a hardware console."))
    (OTHERWISE NIL))
  (UNWIND-PROTECT
      (PROGN
	(SETQ CONN (CONNECT HOST "SPY"))
	(UNLESS SCREEN-SPY-WINDOW
	  (SETQ SCREEN-SPY-WINDOW (TV:MAKE-WINDOW 'TV:WINDOW
						  :SUPERIOR TV:MAIN-SCREEN
						  :BORDERS NIL
						  :LABEL NIL
						  :BLINKER-P NIL)))
	(TV:WINDOW-CALL (SCREEN-SPY-WINDOW :DEACTIVATE)
	  (UNWIND-PROTECT
	      (LET-GLOBALLY ((TV:INHIBIT-WHO-LINE T))
		(LET ((TERMINAL-IO SCREEN-SPY-WINDOW))
		  (UNLESS (VARIABLE-BOUNDP SPY-SCREEN-ARRAY)
		    (SETUP-SPY-SCREEN-ARRAY))
		  (LOOP WITH QUADRANT = :UPPER-LEFT
			WITH (SCREEN-ARRAY BIT-ARRAY DEST-ARRAY WIDTH HEIGHT)
			UNTIL (SEND TERMINAL-IO :TYI-NO-HANG)
			AS PKT = (GET-NEXT-PKT CONN)
			WHILE (= (PKT-OPCODE PKT) UNC-OP)
			DO (UNLESS SCREEN-ARRAY
			     (MULTIPLE-VALUE (SCREEN-ARRAY BIT-ARRAY DEST-ARRAY WIDTH HEIGHT)
			       (SCREEN-SPY-SETUP-SCREEN-ARRAY-FROM-PKT PKT)))
			AS SCREEN-POS = (AREF PKT FIRST-DATA-WORD-IN-PKT)
			WHEN (> SCREEN-POS 0)	;KLUDGE
			  DO (COPY-ARRAY-PORTION 
			       PKT (+ FIRST-DATA-WORD-IN-PKT 1)
			       (+ FIRST-DATA-WORD-IN-PKT 1
				  SPY-NUMBER-OF-16B-WORDS)
			       SCREEN-ARRAY (* SCREEN-POS SPY-NUMBER-OF-16B-WORDS)
			       (* (1+ SCREEN-POS) SPY-NUMBER-OF-16B-WORDS))
			     (RETURN-PKT (PROG1 PKT (SETQ PKT NIL)))
			DO (WHEN (AND BIT-ARRAY
				      (NOT (DATA-AVAILABLE CONN)))
			     (SETQ QUADRANT
				   (COND ((TV:KEY-STATE :LEFT-SHIFT)    :UPPER-LEFT)
					 ((TV:KEY-STATE :LEFT-CONTROL)  :LOWER-LEFT)
					 ((TV:KEY-STATE :RIGHT-SHIFT)   :UPPER-RIGHT)
					 ((TV:KEY-STATE :RIGHT-CONTROL) :LOWER-RIGHT)
					 (T QUADRANT)))
			     (LET ((MY-WIDTH SPY-SCREEN-WIDTH)
				   (MY-HEIGHT (1- SPY-SCREEN-HEIGHT)))	;KLUDGE
			       (BITBLT TV:ALU-SETA
				       (MIN WIDTH MY-WIDTH)
				       (MIN HEIGHT MY-HEIGHT)
				       BIT-ARRAY
				       (SELECTQ QUADRANT
					 ((:UPPER-LEFT :LOWER-LEFT) 0)
					 (OTHERWISE (MAX 0 (- WIDTH MY-WIDTH))))
				       (SELECTQ QUADRANT
					 ((:UPPER-LEFT :UPPER-RIGHT 0) 0)
					 (OTHERWISE (MAX 0 (- HEIGHT MY-HEIGHT))))
				       DEST-ARRAY 0 1))))))
	    ;; System 63 and after.
	    (LET ()
	      (WHEN SCREEN-SPY-OTHER-ARCHITECTURE-ARRAY
		(SYS:PAGE-OUT-ARRAY SCREEN-SPY-OTHER-ARCHITECTURE-ARRAY))
	      (WHEN (VARIABLE-BOUNDP SPY-SCREEN-ARRAY)
		(SYS:%DRAW-RECTANGLE 
		  SPY-SCREEN-WIDTH (1- SPY-SCREEN-HEIGHT)	;kludge
		  0 1
		  TV:ALU-SETZ
		  (MAKE-RASTER-ARRAY
		    SPY-SCREEN-WIDTH
		    SPY-SCREEN-HEIGHT
		    :TYPE ART-1B
		    :DISPLACED-TO SPY-SCREEN-ARRAY)))
	      (SEND TV:MAIN-SCREEN :REFRESH-MARGINS)
	      (SEND TV:WHO-LINE-SCREEN :REFRESH)
	      (TV:WHO-LINE-RUN-STATE-UPDATE)
	      (TV:WHO-LINE-UPDATE)))))
    (WHEN CONN
      (CLOSE-CONN CONN)
      (REMOVE-CONN CONN))))

(DEFUN SCREEN-SPY-SETUP-SCREEN-ARRAY-FROM-PKT (PKT)
  (LET ((WIDTH (PKT-NUM PKT))
	(HEIGHT (PKT-ACK-NUM PKT)))
    (WHEN (ZEROP WIDTH) (SETQ WIDTH 1400))
    (WHEN (ZEROP HEIGHT) (SETQ HEIGHT 1600))
    (IF (AND (= WIDTH SPY-SCREEN-WIDTH)
	     (= HEIGHT SPY-SCREEN-HEIGHT))
	(VALUES SPY-SCREEN-ARRAY NIL NIL WIDTH HEIGHT)
      (LET* ((MAX-IDX (// (+ (// (* WIDTH HEIGHT) 20)
			     SPY-NUMBER-OF-16B-WORDS
			     -1)
			  SPY-NUMBER-OF-16B-WORDS))
	     (SCREEN-ARRAY (SCREEN-SPY-GET-SCREEN-ARRAY-FOR-OTHER-ARCHITECTURE
			     (* MAX-IDX SPY-NUMBER-OF-16B-WORDS))))
	(SYS:PAGE-IN-ARRAY SCREEN-ARRAY)
	(VALUES SCREEN-ARRAY
		(MAKE-RASTER-ARRAY WIDTH HEIGHT
				   :TYPE ART-1B
				   :DISPLACED-TO SCREEN-ARRAY)
		(MAKE-RASTER-ARRAY SPY-SCREEN-WIDTH SPY-SCREEN-HEIGHT
				   :TYPE ART-1B
				   :DISPLACED-TO SPY-SCREEN-ARRAY)
		WIDTH
		HEIGHT)))))

(DEFUN SCREEN-SPY-GET-SCREEN-ARRAY-FOR-OTHER-ARCHITECTURE (SIZE)
  (WHEN (> SIZE SCREEN-SPY-OTHER-ARCHITECTURE-SIZE)
    (SETQ SCREEN-SPY-OTHER-ARCHITECTURE-SIZE (* SIZE 2))
    (SETQ SCREEN-SPY-OTHER-ARCHITECTURE-ARRAY
	  (MAKE-ARRAY SCREEN-SPY-OTHER-ARCHITECTURE-SIZE :TYPE ART-16B)))
  SCREEN-SPY-OTHER-ARCHITECTURE-ARRAY)
