;;; -*- Mode: LISP; Syntax: Common-lisp; Package: CL-NETI; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; This file defines the (2 0 (NIL 0) (NIL :BOLD-ITALIC NIL) "CPTFONTBI"):transaction-token-list 1medium.  The medium is built on
;; token list streams but (strictly speaking) does not encapsulate them, because not
;; all messages supported by the underlying token list stream can be used on this medium.
;; Only the interfaces defined on this page should be used to manipulate these new streams.
;;
;; The basis for the new medium is the following flavor:

0(defflavor (3 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")token-list-stream-with-transactions
0	(token-stream)
	()
  (:readable-instance-variables token-stream)
  (:initable-instance-variables token-stream))

1;; These interfaces are the 0raison d'etre 1for transaction-token-list streams.

0(defgeneric3 net:send-transaction0 (transaction-token-list-stream token-list &key dont-await-reply))
1;;     without 0:dont-await-reply1 returns a response token list.
;;     with 0:dont-await-reply1 returns a transaction-id to be passed to0 1the next function.

0(defgeneric3 net:receive-transaction-reply0 (transaction-token-list-stream tid &optional dont-wait-but-return-this))
1;;    given a transaction-id returned by 0NET:SEND1-0TRANSACTION1, reads the0 1transaction reply.
;;    If dont-wait-but-return-this is non-nil, and the reply is not outstanding, returns it.
;;    This should be a symbol that cannot legitimately arrive over a token list0 1stream.

0(defgeneric3 net:server-read-transaction0 (transaction-token-list-stream &optional dont-wait-but-return-this))
1;;    returns a transaction id token list to the server. See 0NET:RECEIVE-TRANSACTION-REPLY 1for the argument.

0(defgeneric3 net:server-reply-to-transaction0 (transaction-token-list-stream tid token-list))
1;;    sends back the response.

;; The following function passes on a message from the transaction-token-list stream to
;; the "encapsulated" stream.  Note that not all functions available to users of token-list
;; streams are available to users of transaction-token-list streams0.

(defun 3ttls-pass0 (self self-mapping-table message &rest args)
  (ignore self-mapping-table)
  (apply (token-list-stream-with-transactions-token-stream self) message args))

1;; Passing on these messages gives us basic stream functionality.

0(defmethod (3:accept0                 token-list-stream-with-transactions) ttls-pass)
(defmethod (3:check-input-exception0  token-list-stream-with-transactions) ttls-pass)
(defmethod (3:check-output-exception0 token-list-stream-with-transactions) ttls-pass)
(defmethod (3:close0                  token-list-stream-with-transactions) ttls-pass)
(defmethod (3:close-with-reason0      token-list-stream-with-transactions) ttls-pass)
(defmethod (3:complete-connection0    token-list-stream-with-transactions) ttls-pass)
(defmethod (3:connected-p0            token-list-stream-with-transactions) ttls-pass)
(defmethod (3:foreign-host0           token-list-stream-with-transactions) ttls-pass)
(defmethod (3:listen0                 token-list-stream-with-transactions) ttls-pass) 
(defmethod (3:reject0                 token-list-stream-with-transactions) ttls-pass)
(defmethod (3:set-input-exception0    token-list-stream-with-transactions) ttls-pass)
(defmethod (3:set-output-exception0   token-list-stream-with-transactions) ttls-pass)



1;;; Network medium that implements the notion of transaction over a byte stream,
;;; generating transaction id's and handling aborts with resynchronization.

0(net:define-medium3 :transaction-token-list
0		   ()
  (((:medium :token-list-stream)) (s-a-p token-list-stream
					 &rest connection-args &key &allow-other-keys)
   (ignore s-a-p connection-args)
   (make-instance 'token-list-stream-with-transactions
		  :token-stream token-list-stream)))


(defun 3(:property :transaction-token-list neti:define-server)0 (options)
  (let ((argument-list nil)
	(argument-descriptions nil)
	(property-list nil))
    (loop for (indicator value) on options by 'cddr
	  do (case indicator
	       (:stream
		 (let ((stream-var (if (listp value) (car value) value)))
		   (push stream-var argument-list))
		 (push ':stream argument-descriptions)
		 (if (listp value)
		     (zl:putprop (locf property-list) (cdr value) ':stream-options)))))
    (values (nreverse argument-list) (nreverse argument-descriptions)
	    property-list '(:stream))))

(defprop :transaction-token-list neti:default-byte-stream-server
	 3neti:server-base-flavor0)

(defprop :transaction-token-list neti:byte-stream-invoke-service-function
	 3neti:invoke-service-function0)



(defmethod 3(net:send-transaction token-list-stream-with-transactions)0 (token-list &key dont-await-reply)
  (let ((tid (fs:file-gensym "L")))
    (loop named retry-abort 
	  do
      (block abort
	(flet ((io-unsafe-handler (error)
		 (declare (sys:downward-function))
		 (when (eq (send error :stream) token-stream)		 
		   (return-from abort 'unsafe))
		 nil))
	  (condition-bind ((neti:token-io-unsafe #'io-unsafe-handler))
	    (send token-stream :send-token-list `(,tid ,token-list))
	    (when dont-await-reply
	      (return-from retry-abort tid))))
	(return-from retry-abort
	  (net:receive-transaction-reply self tid nil)))
      (let ((resynch-tid (fs:file-gensym "R")))
	(send token-stream :send-token-list "USER-RESYNCH-DUMMY" t)
	(send token-stream :send-token-list resynch-tid t)
	(loop named resynch 
	      for response =
		  (send token-stream :read-token-list t)
	      do
	  (when (string= response resynch-tid)
	    (return-from resynch nil)))))))

(defmethod3 (net:receive-transaction-reply token-list-stream-with-transactions)0 (tid &optional dont-wait-but-return-this)
  (loop named retry-abort do
    (block abort
      (flet ((io-unsafe-handler (error)
	       (declare (sys:downward-function))
	       (when (eq (send error :stream) token-stream)		 
		 (return-from abort 'unsafe))
	       nil))
	(condition-bind ((neti:token-io-unsafe #'io-unsafe-handler))
	  (loop for response =
		    (send token-stream :read-token-list nil dont-wait-but-return-this)
		when (and dont-wait-but-return-this (eq response dont-wait-but-return-this))
		  do (return-from retry-abort dont-wait-but-return-this)
		when (string= (car response) tid)
		  do (return-from retry-abort (cadr response))))))
    (let ((resynch-tid (fs:file-gensym "R")))
      (send token-stream :send-token-list "USER-RESYNCH-DUMMY" t)
      (send token-stream :send-token-list resynch-tid t)
      (loop named resynch 
	    for response =
		(send token-stream :read-token-list t)
	    do
	(when (string= response resynch-tid)
	  (return-from resynch nil))))))


1;;; This returns the the TID and the transaction
0(defun-in-flavor 3(server-op token-list-stream-with-transactions)0 (function)
  (declare (sys:downward-funarg function))
  (loop named retry-abort do
    (block abort
      (flet ((mark-handler (error)
	       (declare (sys:downward-function))
	       (when (eq (send error :stream) token-stream)
		 (return-from abort nil))
	       nil))
	(condition-bind ((neti:mark-seen #'mark-handler))
	  (return-from retry-abort (funcall function)))))
    1;; here on resynch
0    (send token-stream :read-token-list t)	1; discard to mark 1
0    (loop named resynch with uid = nil
	  do
      (setq uid (send token-stream :read-token-list t))	1; discard until mark 2
0      (when (not (string= uid "USER-RESYNCH-DUMMY"))
	(send token-stream :send-token-list uid t)
	(return-from resynch nil)))))


(defmethod 3(net:server-read-transaction token-list-stream-with-transactions)0 (&optional dont-wait-but-return-this)
  (declare (values tid transaction-token-list))
  (server-op #'(lambda () (declare (sys:downward-function))
		  (values-list
		    (send token-stream :read-token-list nil dont-wait-but-return-this)))))

(defmethod 3(net:server-reply-to-transaction token-list-stream-with-transactions)0 (tid response)
  (let ((response-t-list `(,tid ,response)))
    (server-op #'(lambda () (send token-stream :send-token-list response-t-list)))))



(3net:define-protocol :echo-xcn-token-list0 (:echo-xcn-token-list :transaction-token-list)
  (:invoke-with-stream ((stream)) stream))
			
3(chaos:add-contact-name-for-protocol :echo-xcn-token-list)

0(3net:define-server :echo-xcn-token-list0 (:medium :transaction-token-list
						 :stream transaction-stream
						 :error-disposition :notify)
   (condition-case (.error.)
	(loop do
	  (multiple-value-bind (tid request)
	      (net:server-read-transaction transaction-stream)
	    (net:server-reply-to-transaction transaction-stream tid request)))
      (sys:end-of-file nil)))


1;;; It's not the most thrilling or comprehensive test suite, but it will do for a start.
0(defun3 test-echo-xcn-list0 (&optional (host net:*local-host*))
  (let ((names (loop with local-hosts = (net:find-objects-from-property-list :host :site net:*local-site*)
		     for host in local-hosts
		     collect (send host :name))))
  (with-open-stream (ettls (neti:invoke-service-on-host :echo-xcn-token-list host))
    (loop for subset-of-names on names
	  for sorted-subset-of-names = (sort subset-of-names #'string-lessp)
	  for subset-length = (length subset-of-names)
	  while (> subset-length 0)
	  for token-list = `(,subset-length ,sorted-subset-of-names)
	  for tid = (let ((tid (net:send-transaction ettls token-list :dont-await-reply t)))
		      (format t "~&TID ~A: Sent ~A element list." tid subset-length)
		      tid)
	  for reply = (net:receive-transaction-reply ettls tid)
	  if (equal reply token-list)
	    do (format t "~&TID ~A: Received same." tid)
	  else do (format t "~&TID ~A: Results differ.  Original list was ~A, returned list was ~A" tid token-list reply)))))
