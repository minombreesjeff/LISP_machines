;;; -*- Syntax: Zetalisp; Mode: LISP; Package: NETWORK-INTERNALS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *all-classes* nil)

(defstruct (class-template :conc-name :list)
  requiredness
  documentation
  template)

(defmacro define-class (class-name (&key version) &body attributes)
  (declare (arglist (class-name (&key (version 0)) &body attributes)))
  `(define-class-1 ,class-name
		   ',(loop for (indicator requiredness description template) in attributes
			   collect indicator
			   collect (list requiredness description template))
     :version ,version))

(defun define-class-1 (class templates &key (version 0))	D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");grandfather clause
0  (unless version (setq version 0))
  (when (record-source-file-name class 'define-class)
    (dw:prepare-for-type-change 'object)
    (cl:pushnew class *all-classes*)
    (dw:finish-type-redefinition 'object)
    (setf (get class 'class-introduced-in-version) version)
    (setf (get class 'namespace-templates) templates)))

(defun class-all-templates (class)
  (or (get class 'namespace-templates)
      (ferror "~A is not a class name." class)))

(defun class-first-protocol-version (class)
  (or (get class 'class-introduced-in-version) 0))

(defun class-get-template (class keyword)
  (declare (values template requiredness documentation))
  (let* ((templates (class-all-templates class))
	 (entry (or (get (locf templates) keyword)
		    (get (locf templates) :*))))
    (values (class-template-template entry)
	    (class-template-requiredness entry)
	    (class-template-documentation entry))))

(defun class-globally-named-p (class)
  (equal (class-get-template class :name) '(:global-name)))

;;; Where is the real home of this object?
(defun class-namespace-for-object-update (class object-name object-property-list)
  (if (not (class-globally-named-p class))
      (send object-name :namespace)
      (selectq class
	(:namespace
	 (condition-case ()
	     (let ((*inhibit-validity-checking* t))
	       (find-object-named :namespace object-name))
	   (object-not-found
	     ;; Allow enough for creation from distribution system
	     (or (dolist (ns (get (locf object-property-list) :search-rules))
		   (cond ((eq ns '**self**) (return *namespace*))
			 ((and (typep ns 'namespace)
			       (eq (send ns :name) object-name) (return ns)))))
		 *namespace*))))
	(:site
	 (let ((namespace (get (locf object-property-list) :local-namespace)))
	   (if (typep namespace 'namespace)
	       namespace
	       *namespace*)))
	(otherwise
	 (ferror "The globally named ~S object ~S does not have a home for updating."
		 class object-name)))))

;;; Global objects

(define-class :namespace ()
  (:name :internal "" (:global-name))
  (:primary-name-server :optional "Primary namespace server" (:element :host))
  (:secondary-name-server :optional "Secondary namespace server" (:element :host))
  (:search-rules :required "List of namespaces to search" (:set :namespace))
  (:descriptor-file :required "The file listing other files in this namespace" (:token))
  (:internet-domain-name :optional "Name of this domain in the Internet naming system"
   (:token))
  (:user-property :optional "A user supplied extended attribute"
   (:element :pair :global-name :token)))

(define-class :site ()
  (:name :internal "" (:global-name))
  (:pretty-name :optional "User visible properly cased name" (:token))
  (:local-namespace :required "Name of the namespace containing local objects" (:namespace))
  (:site-directory :required "Physical host and directory for SYS:SITE;" (:TOKEN))
  (:site-system :optional "Name of a DEFSYSTEM local to this site" (:token))
  (:default-printer :optional "The default local printer" (:printer))
  (:default-bitmap-printer :optional "The default local printer for screen hardcopy"
    (:printer))
  (:host-for-bug-reports :required "A host for bug mail" (:host))
  (:timezone :required "The local timezone, e.g. /"EST/"" (:global-name))
  (:secure-subnets :optional "Secure network and its subnets"
   (:element :pair :network :set :token))
  (:dont-reply-to-mailing-lists :optional "List of mailing lists" (:set :token))
  (:all-mail-addresses-forward :optional 
   "/"YES/" if mail should forwarded to other sites in mail area"
   (:token))
  (:other-sites-in-mail-area :optional "Other sites to which to forward mail"
			     (:set :site))
  (:root-domain-server-address :optional "Address pair of a root domain server"
			       (:element :pair :network :token))
  (:query-root-domain-servers-recursively
    :optional "/"YES/" if queries to root servers should use recursion" (:token))
  (:standalone :optional "/"YES/" if no who-am-i response likely" (:token))
  (:validate-lmfs-dump-tapes :optional "/"YES/" if new dump tapes should be checked" (:token))
  (:terminal-f-argument :optional "Numeric argument to finger command"
   (:element :triple :token :global-name :set :host))
  (:host-protocol-desirability :optional "Local per-host desirability refinements"
   (:element :triple :host :global-name :token))
  (:user-property :optional "A user supplied extended attribute"
   (:element :pair :global-name :token))) 

;;; Other objects

(define-class :host ()
  (:name :internal "" (:name))
  (:site :optional "The site at which this host is located" (:site))
  (:other-naming-properties :internal "" (:nickname :short-name))
  (:nickname :optional "Names possible for input but not seen on output" (:element :name))
  (:short-name :optional "Shorter names, used for input or output" (:element :name))
  (:machine-type :optional "The hardware type of this machine" (:global-name))
  (:system-type :required "The operating system type of this machine" (:global-name))
  (:address :optional "A network address for this host" (:element :triple :network :token :set :token))
  (:pretty-name :optional "User visible properly cased name" (:token))
  (:console-location :optional
		     "Building, floor number, and specific location, e.g. /"HQ/", /"3/", /"Near Fred's office/""
		     (:triple :token :token :token))
  (:printer :optional "The local printer preferred for this machine" (:printer))
  (:bitmap-printer :optional "The local screen hardcopy printer preferred for this machine"
   (:printer))
  (:print-spooler-options :optional "Options for the print spooler"
   (:set :pair :global-name :token))
  (:spooled-printer :optional "A printer for which this host accepts hardcopy requests"
   (:element :pair :printer :set :pair :global-name :token))
  (:service :optional "Network services provided: Service Medium Protocol"
   (:element :set :global-name))
  (:server-machine :optional "The word /"YES/" if this is a dedicated server" (:token))
  (:file-control-lifetime :optional "A decimal number of 60-ths of seconds" (:token))
  (:peripheral :optional "A device hooked to the serial port or some other interface"
   (:element :pair :global-name :set :pair :global-name :token))
  (:default-secondary-name-server :optional
   "/"YES/" if this is a secondary name server for all namespaces"
    (:token))
  (:internet-domain-name :optional "Name of this host in the Internet naming system"
   (:token))
  (:user-property :optional "A user supplied extended attribute"
   (:element :pair :global-name :token)))

(define-class :network ()
  (:name :internal "" (:name))
  (:other-naming-properties :internal "" (:nickname))
  (:nickname :optional "Another name for this network" (:element :name))
  (:site :optional "Site at which this network is located" (:site))
  (:type :required "Type of network, e.g. /"CHAOS/"" (:global-name))
  (:subnet :optional "A subnet of this network"
   (:element :pair :token :set :pair :global-name :token))
  (:global-network-name :optional "A name for this network and all the networks that it can connect to" (:global-name))
  (:user-property :optional "A user supplied extended attribute"
   (:element :pair :global-name :token)))

(define-class :printer ()
  (:name :internal "" (:name))
  (:type :required "The printer type, e.g. /"ASCII/" or /"LGP/"" (:global-name))
  (:site :optional "The site at which this printer is located" (:site))
  (:pretty-name :optional "User visible properly cased name" (:token))
  (:format :optional "An additional data format for this printer, e.g. /"ASCII/""
   (:element :global-name))
  (:interface :optional "The type of interface used to attach this printer to its host" 
   (:global-name))
  (:interface-options :optional "Parameters of the hardware interface"
   (:set :pair :global-name :token))
  (:host :optional "The host to which this printer is directly attached" (:host))
  (:protocol :optional "A protocol to use for direct, unspooled printing"
   (:element :global-name))
  (:body-character-style
    :optional
    "The default character style for text printed on this device, e.g. /"FIX/" /"BOLD/" /"NORMAL/""
    (:triple :global-name :global-name :global-name))
  (:heading-character-style
    :optional
    "The default character style for headings printed on this device, e.g. /"FIX/" /"BOLD/" /"LARGE/""
    (:triple :global-name :global-name :global-name))
  (:dplt-logo :optional "The name of the logo printed by DPLT" (:global-name))
  (:character-size :optional "The size of a character in micas, width height"
   (:pair :token :token))
  (:page-size :optional "The size of the page in device units, width height"
   (:pair :token :token))
  (:fonts-widths-file :optional "The name of the fonts.widths file for this printer" (:token))
  (:printer-location :optional
		     "Building, floor number, and specific location, e.g. /"HQ/", /"3/", /"Near Fred's office/""
		     (:triple :token :token :token))
  (:user-property :optional "A user supplied extended attribute"
   (:element :pair :global-name :token)))

(define-class :user ()
  (:name :internal "" (:name))
  (:login-name :optional "User ident on a file server host" (:element :pair :token :host))
  (:lispm-name :required "Name displayed in the who-line" (:token))
  (:personal-name :required "Last name, first name" (:token))
  (:nickname :optional "A nickname" (:token))
  (:work-address :optional "Work address" (:token))
  (:work-phone :optional "Work phone" (:token))
  (:home-address :optional "Home address" (:token))
  (:home-phone :optional "Home phone" (:token))
  (:home-host :required "The host on which your init files are stored" (:host))
  (:mail-address :required "The address and host where you receive mail" (:pair :token :host))
  (:birthday :optional "Your birthday" (:token))
  (:project :optional "Project" (:token))
  (:supervisor :optional "Supervisor" (:token))
  (:affiliation :optional "Group affiliation" (:token))
  (:remarks :optional "Any remarks" (:token))
  (:type :optional "Special type of user, e.g. DAEMON" (:global-name))
  (:user-property :optional "A user supplied extended attribute"
   (:element :pair :global-name :token)))

(define-class :file-system (:version 5)
  (:name :internal "" (:name))
  (:other-naming-properties :internal "" (:nickname :short-name))
  (:host :required "The host on which the files are stored" (:host))
  (:type :required "Type of file system (e.g. DBFS)" (:global-name))
  (:root-directory :required "FEPFS directory to be the root for the file-system (e.g. FEP0:>)" (:token))
  (:pretty-name :required "User visible properly cased name" (:token))
  (:nickname :optional "Names possible for input but not seen on output" (:element :name))
  (:short-name :optional "Shorter names, used for input or output" (:element :name))
  (:user-property :optional "A user supplied extended attribute"
		  (:element :pair :global-name :token)))
