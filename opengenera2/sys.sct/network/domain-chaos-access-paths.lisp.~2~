;;; -*- Mode: LISP; Package: neti; Base: 10; Lowercase: Yes; Syntax: zetalisp-*-
;; Internet Domain stuff
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Record streams

(defflavor domain-chaos-record-stream
	((output-buffer (zl:make-array 512 :type 'zl:art-8b))
	 stream)
	(					;si:buffered-stream
	 si:buffered-binary-stream)
  (:initable-instance-variables stream))

(defwhopper (:tyo domain-chaos-record-stream) (ch)
  (continue-whopper (int-char ch)))
	   
(defwhopper (:close domain-chaos-record-stream) (abortp)
  (when stream (send stream ':close abortp))
  (continue-whopper abortp))

(defmethod (:reliable-p domain-chaos-record-stream) () nil)

(defmethod (:next-input-buffer domain-chaos-record-stream) (&optional no-hang-p)
  (send stream :read-input-buffer nil no-hang-p))

(defmethod (:discard-input-buffer domain-chaos-record-stream) (ignore)
  (send stream :advance-input-buffer))

(defmethod (:new-output-buffer domain-chaos-record-stream) ()
  (values output-buffer 0 512))

(defmethod (:send-output-buffer domain-chaos-record-stream) (ignore length ignore)
  (send stream :string-out output-buffer 0 length)
  (send stream :force-output))

(defmethod (:discard-output-buffer domain-chaos-record-stream) (ignore))

;;;

(chaos:add-contact-name-for-protocol :domain)

(net:define-protocol :domain (:domain :byte-stream)
  (:desirability .8)
  (:invoke (path)
   (make-instance 'byte-stream-domain-access-path :service-access-path path)))

