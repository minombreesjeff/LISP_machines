;;; -*- Mode: LISP; Package: NETWORK-INTERNALS; Base: 8; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains the base interface flavors for all Ivory architecture based systems.
;;; (I.e., all systems which use an Ivory chip or the Virtual Lisp Machine Ivory emulator.)
;;; All interfaces are based on the IVORY-ETHERNET-INTERFACE flavor.  All interfaces for
;;; embedded systems, including the VLM, are based on the EMB-ETHERNET-INTERFACE flavor which
;;; is, in turn, based on IVORY-ETHERNET-INTERFACE.

(DEFVAR *REALLY-SHORT-PACKETS* 0)

(DEFVAR *NETWORK-INTERFACE-METERS* '(%NET-COLLISIONS
					%NET-TRANSMIT-ABORTS
				        %NET-CRC-ERRORS
				        %NET-ALIGNMENT-ERRORS
				        %NET-DATA-OVERFLOWS
				        %NET-BUFFER-OVERFLOWS
				        %NET-IGNORED
					*REALLY-SHORT-PACKETS*
					))

(DEFUN RESET-NETWORK-INTERFACE-METERS ()
  (DOLIST (SYM *NETWORK-INTERFACE-METERS*)
    (SET SYM 0)))

(RESET-NETWORK-INTERFACE-METERS)

(ADD-INITIALIZATION "Network interface meters" '(RESET-NETWORK-INTERFACE-METERS) '(ONCE))
(ADD-INITIALIZATION "Network interface meters" '(RESET-NETWORK-INTERFACE-METERS) '(COLD))


(DEFFLAVOR IVORY-ETHERNET-INTERFACE
	(LOW-LEVEL-INTERFACE)
	(ETHERNET-INTERFACE)
  (:REQUIRED-METHODS INTERFACE-RECEIVE-PACKET-PENDING-P)
  (:CONC-NAME NETWORK-INTERFACE-)
  (:INITABLE-INSTANCE-VARIABLES LOW-LEVEL-INTERFACE)
  (:READABLE-INSTANCE-VARIABLES LOW-LEVEL-INTERFACE))

(DEFMETHOD (MAKE-INSTANCE IVORY-ETHERNET-INTERFACE) (&KEY &ALLOW-OTHER-KEYS)
  (LET* ((SELF-LIST (LIST SELF)))
    (SETQ OVERSEER (ALLOCATE-RESOURCE 'RECEIVE-PROCESS NAME))
    (PROCESS:PRESET-SIMPLE-PROCESS OVERSEER
				   #'IVORY-ETHERNET-TOP-LEVEL SELF-LIST
				   #'INTERFACE-RECEIVE-PACKET-PENDING-P SELF-LIST)))

(DEFMETHOD (:NETWORK-SUPPORTED IVORY-ETHERNET-INTERFACE :OR) (NETWORK)
  (DECLARE (SPECIAL CHAOS:*LOCAL-CHAOSNET* CHAOS:MY-ADDRESS))
  (AND (SEND NETWORK ':ADDRESS-RESOLUTION-PARAMETERS)
       (IF (EQ NETWORK CHAOS:*LOCAL-CHAOSNET*)
	   CHAOS:MY-ADDRESS
	 T)))

(DEFMETHOD (:MAX-PACKET-SIZE IVORY-ETHERNET-INTERFACE) () 1500.)

(DEFMETHOD (:CHAOS-ROUTING-COST IVORY-ETHERNET-INTERFACE) () 14.)

(DEFMETHOD (:RESET IVORY-ETHERNET-INTERFACE :BEFORE) ()
  ;; If we ever try to be a bridge, this whole scheme of NET-ADDRESS-n and
  ;; LOCAL-HARDWARE-ADDRESS needs to be reimplemented.
  (SETQ LOCAL-HARDWARE-ADDRESS
	(LET* ((ADDR (MAKE-ARRAY 6 ':TYPE 'ART-8B ':AREA NETWORK-CONS-AREA))
	       (INDEX 0))
	  (FILL-IN-BYTES :LITTLE ADDR INDEX (DPB NET-ADDRESS-2 (BYTE 20 40) NET-ADDRESS-1) 6)
	  ADDR)))

(DEFMETHOD (IVORY-ETHERNET-TOP-LEVEL IVORY-ETHERNET-INTERFACE) ()
  (PROCESS::WITH-PREEMPTION-DISABLED
    (LOOP FOR EPACKET = (NEXT-RECEIVED-EPACKET SELF)
	  WHILE EPACKET
	  DOING
      (INCF RECEIVE-COUNT)
      ;;If the length is invalid then most likely the packet ended before the microcode
      ;;set up net-memory-address.  Ignore the packet.
      (COND (( 0 (EPACKET-DATA-LENGTH EPACKET) 1506.)
	     ;;Valid length
	     ;;(DESCRIBE-EPACKET :IN EPACKET (EPACKET-DATA-LENGTH EPACKET))
	     (SEND SELF :RECEIVE-PROTOCOL-PACKET (EPACKET-SUB-PACKET EPACKET)
		   (LET ((PROTOCOL (EPACKET-TYPE EPACKET)))
		     (DPB PROTOCOL (BYTE 10 10) (LDB (BYTE 10 10) PROTOCOL)))))
	    ;;Invalid length -- ignore.
	    (T (INCF *REALLY-SHORT-PACKETS*)
	       (DEALLOCATE-PACKET-BUFFER (EPACKET-SUB-PACKET EPACKET)))))))

(DEFMETHOD (:PACKET-PROTOCOL-SOURCE-ADDRESS IVORY-ETHERNET-INTERFACE)
	   (NETWORK PACKET)
  (SEND SELF ':HARDWARE-ADDRESS-PROTOCOL-ADDRESS NETWORK
	(MAKE-ARRAY 6 ':TYPE ART-8B
		    ':DISPLACED-TO (PACKET-ETHER-PACKET (SUB-PACKET-PACKET PACKET))
		    ':DISPLACED-INDEX-OFFSET 22.)))	;22. sigh

(DEFMETHOD (:TRANSMIT-PACKET IVORY-ETHERNET-INTERFACE)
	   (PROTOCOL-PACKET FREE-FLAG NETWORK PROTOCOL-ADDRESS NBYTES)
  (WHEN (> NBYTES 1500.)
    (FSIGNAL "Attempt to send ~D-byte packet over the Ethernet. ~
              Proceed to send it even though it is illegal."
	     NBYTES))
  (UNLESS (PACKET-BEING-TRANSMITTED PROTOCOL-PACKET)
    (PROCESS::WITH-NO-OTHER-PROCESSES
      (MULTIPLE-VALUE-BIND (HARDWARE-ADDRESS PROTOCOL-NUMBER LOCAL-PROTOCOL-ADDRESS-P)
	  (SEND NETWORK ':RESOLVE-PROTOCOL-ADDRESS PROTOCOL-ADDRESS SELF)
	(IF (NULL HARDWARE-ADDRESS)
	    (WHEN FREE-FLAG
	      (DEALLOCATE-PACKET-BUFFER PROTOCOL-PACKET))
	    (let (PACKET-BUFFER)
	      (LET ((HARDWARE-ADDRESS HARDWARE-ADDRESS))
		(DECLARE (SYS:ARRAY-REGISTER HARDWARE-ADDRESS))
		(MULTIPLE-VALUE (PACKET-BUFFER FREE-FLAG)
		  (GET-SUB-PACKET-PACKET-WITH-BYTE-OFFSET PROTOCOL-PACKET FREE-FLAG 0 NBYTES))
		(COND ((NULL PACKET-BUFFER))
		      (LOCAL-PROTOCOL-ADDRESS-P
		       ;; Ethernet interface is half-duplex, bypass it at the lowest level.
		       (UNLESS FREE-FLAG
			 (SETQ PACKET-BUFFER (COPY-PACKET-BUFFER PACKET-BUFFER NBYTES NIL)))
		       (WHEN PACKET-BUFFER
			 (SEND NETWORK ':RECEIVE-PACKET PACKET-BUFFER NIL
			       (SEND SELF ':PROTOCOL-ADDRESS NETWORK))))
		      (T
		       (LET ((EPACKET (PACKET-ETHER-PACKET PACKET-BUFFER)))
			 (WITH-NETWORK-PACKET (EPACKET)
			   ;; -HIGH and -LOW are misnomers.  -HIGH is what gets transmitted first.
			   (SETF (EPACKET-DEST-HIGH EPACKET)
				 (SI:%LOGDPBS (AREF HARDWARE-ADDRESS 3) (BYTE #o10 #o30)
					      (AREF HARDWARE-ADDRESS 2) (BYTE #o10 #o20)
					      (AREF HARDWARE-ADDRESS 1) (BYTE #o10 #o10)
					      (AREF HARDWARE-ADDRESS 0)))
			   (SETF (EPACKET-ADDRESS-WORD-2 EPACKET)
				 (SI:%LOGDPBS (AREF LOCAL-HARDWARE-ADDRESS 1) (BYTE #o10 #o30)
					      (AREF LOCAL-HARDWARE-ADDRESS 0) (BYTE #o10 #o20)
					      (AREF HARDWARE-ADDRESS 5) (BYTE #o10 #o10)
					      (AREF HARDWARE-ADDRESS 4)))
			   (SETF (EPACKET-SRC-LOW EPACKET)
				 (SI:%LOGDPBS (AREF LOCAL-HARDWARE-ADDRESS 5) (BYTE #o10 #o30)
					      (AREF LOCAL-HARDWARE-ADDRESS 4) (BYTE #o10 #o20)
					      (AREF LOCAL-HARDWARE-ADDRESS 3) (BYTE #o10 #o10)
					      (AREF LOCAL-HARDWARE-ADDRESS 2)))
			   ;; Type field
			   (SETF (EPACKET-TYPE EPACKET)
				 (DPB PROTOCOL-NUMBER
				      (BYTE #o10 #o10) (LDB (BYTE #o10 #o10) PROTOCOL-NUMBER)))
						;(DESCRIBE-EPACKET :OUT EPACKET NBYTES)
			   (INCF TRANSMIT-COUNT)
			   (TRANSMIT-PACKET-INTERNAL SELF EPACKET FREE-FLAG NBYTES))))))))))))

(DEFMETHOD (:PACKET-BUFFER-PANIC IVORY-ETHERNET-INTERFACE) ()
  ;; Mostly a copy of :TOP-LEVEL with the ENABLED check and without bumping up RECEIVE-COUNT
  (LOOP FOR EPACKET = (NEXT-RECEIVED-EPACKET SELF)
	WHILE EPACKET
	DOING
    (DEALLOCATE-PACKET-BUFFER (EPACKET-SUB-PACKET EPACKET)))
  (FREE-TRANSMIT-LISTS SELF))

(DEFRESOURCE RECEIVE-PROCESS (INTERFACE-NAME)
  :CONSTRUCTOR (PROCESS:MAKE-PROCESS (STRING-APPEND INTERFACE-NAME " Ethernet Receiver")
		 :PRIORITY (PROCESS:MAKE-PROCESS-PRIORITY :FOREGROUND 10. :PREEMPTIVE T)
		 :SIMPLE-P T :TOP-LEVEL-WHOSTATE "Await Received Ethernet Packet"
		 :WARM-BOOT-ACTION NIL :INTERRUPT-HANDLER T :SYSTEM-PROCESS T)
  :MATCHER TRUE
  :INITIALIZER (SETF (PROCESS:PROCESS-NAME OBJECT)
		     (STRING-APPEND INTERFACE-NAME " Ethernet Receiver")))

(DEFRESOURCE TRANSMIT-PROCESS (INTERFACE-NAME)
  :CONSTRUCTOR (PROCESS:MAKE-PROCESS
		 (STRING-APPEND INTERFACE-NAME " Ethernet Transmitter") 
		 :PRIORITY (PROCESS:MAKE-PROCESS-PRIORITY :FOREGROUND 10. :PREEMPTIVE T)
		 :SIMPLE-P T :TOP-LEVEL-WHOSTATE "Await Transmit Work"
		 :WARM-BOOT-ACTION NIL :INTERRUPT-HANDLER T :SYSTEM-PROCESS T)
  :MATCHER TRUE
  :INITIALIZER (SETF (PROCESS:PROCESS-NAME OBJECT)
		     (STRING-APPEND INTERFACE-NAME " Ethernet Transmitter")))



;;;
;;; Generic embedded ethernet interface
;;;

(DEFFLAVOR EMB-ETHERNET-INTERFACE
	()
	(IVORY-ETHERNET-INTERFACE)
  )

(DEFMETHOD (MAKE-INSTANCE EMB-ETHERNET-INTERFACE) (&KEY &ALLOW-OTHER-KEYS)
  (UNLESS LOW-LEVEL-INTERFACE
    (ERROR "No low-level driver supplied"))
  (UNLESS NAME
    ;; Read interface name out of channel
    (FLET ((PARSE-ASCII-STRING (STRING ASCII OFFSET)
	     (LOOP FOR I FROM OFFSET
		   FOR POS FROM 0 BY 8
		   REPEAT 4
		   FOR CODE = (LDB (BYTE 8 POS) ASCII)
		   WHEN (ZEROP CODE)
		     DO (SETF (FILL-POINTER STRING) I)
			(RETURN)
		   DO (SETF (AREF STRING I) (ASCII-TO-CHAR CODE))
		   FINALLY (SETF (FILL-POINTER STRING) I))))
      (UNLESS (ZEROP (EMB-NET-CHANNEL-NAME-0 (EEI-CHANNEL LOW-LEVEL-INTERFACE)))
	(LET* ((CHANNEL  (EEI-CHANNEL LOW-LEVEL-INTERFACE))
	       (NAME-1-P (NOT (ZEROP (EMB-NET-CHANNEL-NAME-1 CHANNEL))))
	       (STRING (MAKE-ARRAY (IF NAME-1-P 8 4) :TYPE 'ART-STRING :FILL-POINTER 0)))
	  (PARSE-ASCII-STRING STRING (EMB-NET-CHANNEL-NAME-0 CHANNEL) 0)
	  (WHEN NAME-1-P
	    (PARSE-ASCII-STRING STRING (EMB-NET-CHANNEL-NAME-1 CHANNEL) 4))
	  (SETQ NAME STRING))))))

(DEFMETHOD (INTERFACE-RECEIVE-PACKET-PENDING-P EMB-ETHERNET-INTERFACE) ()
  (AND LOW-LEVEL-INTERFACE
       (INTERFACE-CALL LOW-LEVEL-INTERFACE NETI:%INTERFACE-PACKET-LISTEN)))

(DEFMETHOD (:ENABLE EMB-ETHERNET-INTERFACE :AFTER) ()
  (interface-call low-level-interface neti:%interface-enable overseer))

(DEFMETHOD (:DISABLE EMB-ETHERNET-INTERFACE :BEFORE) ()
  (interface-call low-level-interface neti:%interface-disable))

(DEFMETHOD (:RESET EMB-ETHERNET-INTERFACE) ()
  (interface-call low-level-interface neti:%interface-reset))

(DEFMETHOD (:KILL EMB-ETHERNET-INTERFACE :AFTER) ()
  (WHEN OVERSEER
    (DEALLOCATE-RESOURCE 'RECEIVE-PROCESS OVERSEER)
    (SETF OVERSEER NIL))
  (SETQ LOW-LEVEL-INTERFACE NIL))

(DEFMETHOD (NEXT-RECEIVED-EPACKET EMB-ETHERNET-INTERFACE) ()
  (INTERFACE-CALL LOW-LEVEL-INTERFACE NETI:%INTERFACE-RECEIVE-PACKET))

(DEFMETHOD (TRANSMIT-PACKET-INTERNAL EMB-ETHERNET-INTERFACE)
	   (EPACKET FREE-FLAG DATA-LENGTH)
  (INTERFACE-CALL LOW-LEVEL-INTERFACE NETI:%INTERFACE-TRANSMIT-PACKET
		  EPACKET FREE-FLAG DATA-LENGTH))

(DEFMETHOD (FREE-TRANSMIT-LISTS EMB-ETHERNET-INTERFACE)
	   ()
  ;; later, do something real here...
  )

(DEFMETHOD (:PEEK EMB-ETHERNET-INTERFACE) ()
  (TV:PEEK-NETWORK-INTERFACE SELF))



(DEFUN ADD-ETHERNET-INTERFACE ()
  (FLET ((ADD-INTERFACE (FLAVOR &REST OPTIONS)
	   (SETF *INTERFACES*
		 (NCONC *INTERFACES* (WITH-NETWORK-CONS-AREA
				       (NCONS (CL:APPLY #'MAKE-INSTANCE FLAVOR OPTIONS)))))))
    ;; Add any embedded interfaces
    (SYSTEM-CASE
      (EMBEDDED
	(LET ((FLAVOR (SYSTEM-CASE
			(MACIVORY 'MACIVORY-ETHERNET-INTERFACE)
			(SOLSTICE 'SOLSTICE-ETHERNET-INTERFACE)
			(VLM 'VLM-ETHERNET-INTERFACE)
			(NATIVE (ERROR)))))
	  (DOTIMES (I *N-EMB-ETHERNET-INTERFACES*)
	    (ADD-INTERFACE FLAVOR :LOW-LEVEL-INTERFACE (AREF *EMB-ETHERNET-INTERFACES* I)))))
      (OTHERWISE NIL))
    ;; Add any hardware interfaces
    (SYSTEM-CASE
      ((MERLIN ZORA DOMINO)
       (WHEN *82586-ETHERNET-INTERFACE-0*
	 (ADD-INTERFACE '82586-ETHERNET-INTERFACE
			:UNIT 0 :LOW-LEVEL-INTERFACE *82586-ETHERNET-INTERFACE-0*))
       (WHEN *82586-ETHERNET-INTERFACE-1*
	 (ADD-INTERFACE '82586-ETHERNET-INTERFACE
			:UNIT 1 :LOW-LEVEL-INTERFACE *82586-ETHERNET-INTERFACE-1*))
       (WHEN *82586-ETHERNET-INTERFACE-2*
	 (ADD-INTERFACE '82586-ETHERNET-INTERFACE
			:UNIT 2 :LOW-LEVEL-INTERFACE *82586-ETHERNET-INTERFACE-2*)))
      (OTHERWISE NIL))
    NIL))

(ADD-INITIALIZATION "Ivory Ethernet" '(ADD-ETHERNET-INTERFACE) NIL
		    'ADD-INTERFACES-INITIALIZATION-LIST)
