;;; -*- Mode: LISP; Package: NETI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Deal with namespace servers in a generic way.
;;; Errors

(defflavor no-server-for-namespace (namespace errors) (network-error)
  :initable-instance-variables
  :gettable-instance-variables)

(defmethod (:report no-server-for-namespace) (stream)
  (format stream "No servers ~:[are known~;responded~] for namespace ~A." errors namespace)
  (loop for (path . error) in errors
	do (format stream "~&Access path ~A: ~A" path error)))

(compile-flavor-methods no-server-for-namespace)

;;; Error mixins for namespace protocols

(defflavor namespace-server-error () (network-error)
  :abstract-flavor)

(defflavor namespace-server-namespace-access-error
	(namespace)
	(namespace-server-error)
  :gettable-instance-variables
  :initable-instance-variables)

;;; Namespace Access Paths

(defflavor namespace-access-path
	(whostate host-string
	 service-access-path
	 lock)
	()
  :abstract-flavor
  (:initable-instance-variables service-access-path)
  (:required-methods
   :close :delete-object :get-brief-incremental-update :get-full-incremental-update
   :query :reload-namespace :update-object))

(defmethod (:init namespace-access-path :after) (ignore)
  (setf host-string (send (service-access-path-host service-access-path)
			  :string-for-printing))
  (setf whostate (string-append "Namespace on " host-string))
  (setf lock (si:make-process-queue whostate 20)))

(defmethod (:host namespace-access-path) ()
  (service-access-path-host service-access-path))

(defmethod (:maybe-close namespace-access-path) ()
  (unless (si:process-queue-locker lock)
    (send self :close)))

(defmethod (:print-self namespace-access-path) (stream ignore slashify)
  (if slashify
      (printing-random-object (self stream :typep)
	(princ self stream))
      (princ whostate stream)))

(defmethod (:validate namespace-access-path :default) () t)

(defmacro with-namespace-access-path-locked (&body body)
  `(let ((.close-mode. nil)
	 (.locked. nil))
     (unwind-protect
       (progn (unless (eq current-process (si:process-queue-locker lock))
		(si:process-enqueue lock current-process whostate)
		(setf .locked. t))
	      (setf .close-mode. :abort)
	      (multiple-value-prog1 (progn ,@body)
				    (setf .close-mode. nil)))
       (unwind-protect
	 (when .close-mode. (send self :close :abort))
	 (when .locked.
	   (si:process-dequeue lock current-process))))))

;; These are the methods a namespace user must define.

(defwhopper (:validate namespace-access-path) ()
  (noting-network-progress ((format nil "Namespace Validate"))
    (with-namespace-access-path-locked
      (condition-case ()
	   (continue-whopper)
	 (error (send self :close :abort)
		nil)))))

(defwhopper (:close namespace-access-path) (&optional abortp)
  (noting-network-progress ((format nil "Namespace Close"))
    (with-namespace-access-path-locked
      (let ((completed-normally nil))
	(unwind-protect
	    (multiple-value-prog1
	      (continue-whopper abortp)
	      (setq completed-normally t))
	  (unless (or completed-normally abortp)
	    (continue-whopper :abort)))))))

(defwhopper (:delete-object namespace-access-path) (namespace object on-behalf-of)
  (when *trace-namespace-access-paths*
    (format trace-output "~&~A: ~A: Delete ~A ~A." whostate namespace (send object :class)
	    object))
  (noting-network-progress ((format nil "Namespace ~A Delete ~A ~A"
				    namespace (send object :class) object))
    (with-namespace-access-path-locked
      (continue-whopper namespace object on-behalf-of))))

;; This entry makes changes to the local copy of the namespace.
(defwhopper (:get-brief-incremental-update namespace-access-path) (namespace timestamp)
  (when *trace-namespace-access-paths*
    (format trace-output "~&~A: ~A: Brief update from ~D." whostate namespace timestamp))
  (noting-network-progress ((format nil "Namespace ~A Brief Update" namespace))
    (with-namespace-access-path-locked
      (continue-whopper namespace timestamp))))

;; This entry makes changes to the local copy of the namespace.
(defwhopper (:get-full-incremental-update namespace-access-path) (namespace timestamp)
  (when *trace-namespace-access-paths*
    (format trace-output "~&~A: ~A: Full update from ~D." whostate NAMESPACE timestamp))
  (noting-network-progress ((format nil "Namespace ~A Full Update" namespace))
    (with-namespace-access-path-locked
      (continue-whopper namespace timestamp))))

;; This entry makes changes to the local copy of the namespace.
(defwhopper (:query namespace-access-path) (namespace class &rest property-list)
  (when *trace-namespace-access-paths*
    (format trace-output "~&~A: ~A: Query ~A: ~A" whostate namespace class property-list))
  (noting-network-progress ((format nil "Namespace ~A Query ~A~{ ~A~}"
				    namespace class property-list))
    (with-namespace-access-path-locked
      (lexpr-continue-whopper namespace class property-list))))

;; This entry makes changes to the local copy of the namespace.
(defwhopper (:reload-namespace namespace-access-path) (namespace)
  (namespace-warning "~A: Reloading namespace ~A." whostate namespace)
  (when *trace-namespace-access-paths*
    (format trace-output "~&~A: ~A: Reload." whostate namespace))
  (noting-network-progress ((format nil "Namespace ~A Reload" namespace))
    (with-namespace-access-path-locked
      (continue-whopper namespace))))

(defwhopper (:update-object namespace-access-path) (namespace object on-behalf-of)
  (when *trace-namespace-access-paths*
    (format trace-output "~&~A: ~A: Update ~A ~A." whostate namespace (send object :class)
	    object))
  (noting-network-progress ((format nil "Namespace ~A Update ~A ~A"
				    namespace (send object :class) object))
    (with-namespace-access-path-locked
      (continue-whopper namespace object on-behalf-of))))

(defwhopper (:map-over-possible-object-name-completions namespace-access-path)
	    (class string namespace function)
  (when *trace-namespace-access-paths*
    (format trace-output "~&~A: ~A: Complete ~A ~A." whostate namespace class string))
  (noting-network-progress ((format nil "Namespace ~A Complete ~A ~A" namespace class string))
    (with-namespace-access-path-locked
      (continue-whopper class string namespace function))))

;;;

(defun cleanup-namespace-access-paths (paths)
  (loop for path in paths
	do (send path :maybe-close)))

(defun reset-all-namespace-access-paths ()
  (loop for (nil nap) in *namespace-access-paths*
	do (send nap :close :abort))
  (setf *namespace-access-paths* nil)
  (setf *current-namespace-access-paths* nil))

(si:define-gc-optimization reset-all-namespace-access-paths :layered-system-release
  (:documentation "Reset namespace access paths")
  (:before-flip (ignore)
    (reset-all-namespace-access-paths)))

;;;

(defun find-namespace-access-path-to-host (service-access-path primary-only)
  (let* ((host (service-access-path-host service-access-path))
	 (entry (let ((current-entry (ns-assq host *namespace-access-paths*)))
		  (when (and current-entry
			     (not (send (second current-entry) :validate)))
		    (setf *namespace-access-paths*
			  (delq current-entry *namespace-access-paths*))
		    (setf current-entry nil))
		  (or current-entry
		      (let ((new-entry
			      (list host
				    (if primary-only
					(invoke-service-access-path
					  service-access-path
					  nil)
					(invoke-service-access-path-with-cached-unavailability
					  service-access-path
					  *validation-retry-minimum-wait*
					  nil)))))
			(push new-entry *namespace-access-paths*)
			new-entry))))
	 (nap (second entry)))
    (si:push* nap *current-namespace-access-paths*)
    nap))

(defun find-namespace-access-path (namespace &key primary-only)
  (let ((services (send namespace (if primary-only
				      :primary-server-access-paths
				      :server-access-paths)))
	(errors nil))
    (when (and (null services)
	       *temporary-namespace-server*
	       (not (ns-eq namespace dial:*dialnet-namespace*))
	       (not (ns-eq namespace *distribution-namespace*)))
      (return-from find-namespace-access-path *temporary-namespace-server*))
    (loop for (host . access-paths) in *namespace-access-paths*
	  for entry =  (ns-assq host services)
	  do (ignore access-paths)
	  when (and entry (or primary-only (namespace-accessible-on-host namespace host)))
	    do (condition-case (error)
		    (return-from find-namespace-access-path
		      (find-namespace-access-path-to-host (second entry) primary-only))
		  (sys:network-error (push (cons (second entry) error) errors))))
    (let ((our-services (mapcar #'second services)))
      (let* ((random (most-desirable-service-access-path our-services))
	     (list (memq random our-services)))
	(unless (eq list services)
	  (swapf (car list) (car our-services))))
      (loop for service in our-services
	    when (or primary-only
		     (namespace-accessible-on-host namespace
						   (service-access-path-host service)))
	      do (condition-case (error)
		      (return-from find-namespace-access-path
			(find-namespace-access-path-to-host service primary-only))
		    (sys:network-error (push (cons service error) errors)))))
    (if (not (zerop *check-namespace-validity-time*))
	;; Be really insistent if we don't have any alive servers
	(let ((*check-namespace-validity-time* 0))
	  (find-namespace-access-path namespace :primary-only primary-only))
	(error 'no-server-for-namespace :namespace namespace :errors errors))))

(defun namespace-user-print-server-host (stream)
  (when *current-namespace-access-paths*
    (let ((*inhibit-validity-checking* t))
      (format stream "~&Recent servers contacted are~{ ~A~}"
	      (loop for (host nap) in *namespace-access-paths*
		    when (memq nap *current-namespace-access-paths*)
		    collect host)))))

;;;

(defun delete-object-through-network (namespace object)
  (fs:force-user-to-login)
  (keeping-namespace-server
    (with-fixups
      (let ((*inhibit-validity-checking* t))
	(let ((nap (find-namespace-access-path namespace :primary-only t)))
	  (send nap :delete-object namespace object
		(or *update-on-behalf-of* user-id)))))
    (send namespace :get-latest-timestamp)))	;resynchronize

(defun get-full-incremental-update-from-network (namespace timestamp)
  (keeping-namespace-server
    (with-fixups
      (let ((*inhibit-validity-checking* t))
	(condition-case (error)
	    (let ((new-timestamp (get-latest-timestamp-from-network namespace)))
	      (when new-timestamp
		(let ((success t))
		  (unless (and timestamp ( new-timestamp timestamp) (send namespace :loaded))
		    (let ((nap (find-namespace-access-path namespace :primary-only t)))
		      (when (send namespace :loaded)
			(multiple-value (success new-timestamp)
			  (send nap :get-full-incremental-update namespace timestamp))
			(when (and (not success) new-timestamp)
			  (send namespace :set-unloaded "records don't go back far enough")))
		      (unless (send namespace :loaded)
			(send (send namespace :object-property-list-cache) :clear-hash)
			(multiple-value (success new-timestamp)
			  (send nap :reload-namespace namespace))
			(when success
			  (send namespace :set-loaded)
			  (send namespace :set-changed-objects-alist nil)
			  (multiple-value (success new-timestamp)
			    (send nap :get-full-incremental-update namespace nil))))))
		  (when success
		    (send namespace :set-latest-validation-timestamp new-timestamp))
		  success)))
	  (no-server-for-namespace
	    (when *collecting-invalid-namespaces*
	      (push error *invalid-namespaces*))
	    nil)
	  (error
	    (when *collecting-invalid-namespaces*
	      (push error *invalid-namespaces*))
	    (namespace-warning "Error while getting full update for ~A:~%~A"
			       (send namespace :name) error)
	    nil))))))

(defun get-incremental-update-from-network (namespace timestamp)
  (send namespace :set-unloaded "no longer server for this namespace")
  (keeping-namespace-server
    (with-fixups
      (let ((*inhibit-validity-checking* t))
	(condition-case (error)
	    (get-incremental-update-from-network-1 namespace timestamp)
	  (no-server-for-namespace
	    (when *collecting-invalid-namespaces*
	      (push error *invalid-namespaces*))
	    nil)
	  (error
	    (when *collecting-invalid-namespaces*
	      (push error *invalid-namespaces*))
	    (unless *inhibit-obsolete-information-warning*
	      (namespace-warning "Error while getting brief update for ~A.~%~A"
				 (send namespace :name) error))
	    nil))))))

(defun get-incremental-update-from-network-1 (namespace timestamp)
  (let ((new-timestamp (get-latest-timestamp-from-network namespace)))
    (cond ((and timestamp new-timestamp ( new-timestamp timestamp))
	   (send namespace :set-latest-validation-timestamp timestamp)
	   t)
	  ((null timestamp)
	   (when new-timestamp
	     (send namespace :set-latest-validation-timestamp new-timestamp)
	     t))
	  (t
	   (let ((nap (find-namespace-access-path namespace)))
	     (multiple-value-bind (success ts class-alist deleted)
		 (send nap :get-brief-incremental-update namespace timestamp)
	       (if (not success)
		   (when ts
		     (send namespace :set-latest-validation-timestamp ts)
		     t)
		   (loop for object in deleted
			 do (delete-object-from-namespace object namespace t))
		   (send namespace :add-incremental-update ts class-alist deleted)
		   ;; Any globally named objects that are mentioned as changed need to be
		   ;; verified now, since otherwise an incremental update from another
		   ;; class will claim that they aren't changed (by implication).
		   (loop for (class-name hash-table) in *shared-class-table*
			 as (nil nil changed-names) = (assq class-name class-alist)
			 do (loop for name in changed-names
				  do (let ((name-entry (send hash-table :get-hash name)))
				       (when name-entry
					 (let ((object (name-entry-object name-entry)))
					   (when object
					     (send nap :query namespace class-name
						   :name name)))))))
		   t)))))))

(defun query-namespace-server (class namespace &rest property-list)
  (declare (values success list))
  (keeping-namespace-server
    (with-fixups
      (let ((*inhibit-validity-checking* t))
	(condition-case (error)
	    (let ((nap (find-namespace-access-path namespace)))
	      (multiple-value-bind (success list)
		  (lexpr-send nap :query namespace class property-list)
		;; Deal with bootstrapping of newly created namespaces.
		;; We smash in a reasonable server here.
		(when (eq class :namespace)
		  (let ((entry (assq (send nap :host) (send namespace :server-access-paths))))
		    (when entry
		      (loop for ns in list
			    when (null (send ns :server-access-paths))
			      do (setf (send ns :server-access-paths) (list entry))))))
		(values success list)))
	  (no-server-for-namespace
	    (when *collecting-invalid-namespaces*
	      (push error *invalid-namespaces*))
	    nil)
	  (error
	    (when *collecting-invalid-namespaces*
	      (push error *invalid-namespaces*))
	    (unless *inhibit-obsolete-information-warning*
	      (namespace-warning "Error while querying ~A.~%~A"
				 (send namespace :name) error))
	    nil))))))

(defun update-object-through-network (namespace object)
  (fs:force-user-to-login)
  (keeping-namespace-server
    (with-fixups
      (let ((*inhibit-validity-checking* t))
	(let ((nap (find-namespace-access-path namespace :primary-only t)))
	  (send nap :update-object namespace object
		(or *update-on-behalf-of* user-id)))))
    ;; If we aren't a server, locally rethink cached property lists.
    (unless (send namespace :local-server-p)
      (recompute-property-lists-for-object object namespace))
    ;;(send namespace :get-latest-timestamp)	;resynchronize namespace
    (send object :check-validity namespace t)))	;resynchronize object

;;;

(defun get-latest-timestamp-from-network (namespace)
  (let ((*inhibit-validity-checking* t))
    (stack-let ((args (list namespace)))
      (loop for (host nil access-path)
		in (send namespace (if (send namespace :local-server-p)
				       :primary-server-access-paths
				       :server-access-paths))
	    when (and access-path
		      (namespace-accessible-on-host namespace host))
	      do (when *trace-namespace-access-paths*
		   (format trace-output
			   "~&Namespace server ~A: ~A: Get latest timestamp."
			   host namespace))
		 (noting-network-progress ((format nil "Namespace ~A Timestamp" namespace))
		   (condition-case (error)
			(invoke-service-access-path access-path args)
		      (namespace-server-namespace-access-error
			(send host :set-unavailable :service namespace
			      :reason (send error :report-string)))
		      (error nil)
		      (:no-error
			(send host :set-available :service namespace)
			(return-from get-latest-timestamp-from-network error))))))))

(defun namespace-accessible-on-host (namespace host)
  (multiple-value-bind (available time-down)
      (send host :available :service namespace)
    (or available
	(time-elapsed-p *check-namespace-validity-time* time-down))))
