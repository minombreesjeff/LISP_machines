;;; -*- Mode: LISP; Package: TCP; Lowercase: Yes; Syntax: Common-lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; System support for Internet networks.
;;; This is the part of the TCP/IP system that is included in the basic system.

;;; Dealing with Internet addresses embedded in art-8b arrays.

(proclaim '(inline store-internet-address load-internet-address check-internet-address))

(defun store-internet-address (address array offset)
  (neti:fill-in-bytes :fixnum-big array offset address 4 nil))

(defun load-internet-address (array offset)
  (declare (values address))
  (neti:put-together-bytes :fixnum-big array offset 4))

(defsetf load-internet-address (array offset) (address)
  `(store-internet-address ,address ,array ,offset))

(defun check-internet-address (address array offset)
  (neti:compare-bytes :fixnum-big array offset address 4))

;;; Generally useful

(proclaim '(inline compare-internet-address build-internet-address internet-address-mask))

(defun compare-internet-address (address1 address2)
  (= address1 address2))

(defun build-internet-address (byte1 byte2 byte3 byte4)
  (sys:%logdpb byte1 (byte 8 24)
	       (dpb byte2 (byte 8 16)
		    (dpb byte3 (byte 8 8)
			 byte4))))

(defun explode-internet-address (parsed-address)
  (declare (values byte1 byte2 byte3 byte4))
  (values (ldb (byte 8 24) parsed-address)
	  (ldb (byte 8 16) parsed-address)
	  (ldb (byte 8 08) parsed-address)
	  (ldb (byte 8 00) parsed-address)))

(defun internet-address-lessp (address1 address2)
  (let ((diff (logxor address1 address2)))
    (if (minusp diff)
	(plusp address1)
	(< address1 address2))))

(defun internet-address-mask (address net-source host-source)
  (cond ((not (minusp address))
	 (dpb host-source (byte 24 0) net-source))
	((< address (build-internet-address 192 0 0 0))
	 (dpb host-source (byte 16 0) net-source))
	((< address (build-internet-address 224 0 0 0))
	 (dpb host-source (byte 8 0) net-source))
	(t net-source)))

(defun official-internet-subnet-number (address &optional (pad 0))
  ;; What internet-subnet-number used to be.
  (internet-address-mask address address (if (zerop pad) 0 -1)))

(defun internet-subnet-number (address &optional (pad 0)
			       (network (neti:local-network-of-type :internet)))
  ;; This function now depends on a network.  This so that a consistent view of
  ;; subnets is maintained.
  (if (and network (eq (send network :type) :internet))
      (send network :internet-subnet-number address pad)
      (official-internet-subnet-number address pad)))

;;; Parsing and unparsing

(defun parse-internet-address (address)
  (or (loop with (num delim)
	    repeat 4
	    for idx = 0 then (1+ delim)
	    when (and delim (or (= delim (string-length address))
				(char-not-equal (aref address delim) #\.)))
	    return nil
	    do (multiple-value-setq (num delim)
		 (parse-integer address :start idx :sign-allowed nil :junk-allowed t))
	    when (or (null num) (< num 0) (> num 255))
	    return nil
	    else collect num into nums
	    finally (return (when (= delim (length address))
			      (apply #'build-internet-address nums))))
      (error "Invalid internet address [~A]." address)))

(defun unparse-internet-address (parsed-address)
  (multiple-value-bind (b1 b2 b3 b4)
      (explode-internet-address parsed-address)
    (format nil "~D.~D.~D.~D" b1 b2 b3 b4)))

;;; Tend to stumble across arpanet hosts also on chaosnet while loading, so define
;;; this early to avoid redefinition.

(defparameter *ip-broadcast-address* (build-internet-address 255 255 255 255))

(defprop :internet internet-network net:network-type-flavor)

(defflavor internet-network
	((ip-protocol))				;this is used by the TCP/IP system
	(net:address-resolution-network-mixin
	 neti:host-from-address-mixin
	 net:network)
  :readable-instance-variables)


;;; These two methods are here for speed and to avoid namespace validation.

(defmethod (:type internet-network) () ':internet)

(defmethod (:network-typep internet-network) (type) (eq type ':internet))


(defmethod (:parse-address internet-network) (address)
  (parse-internet-address address))

(defmethod (:unparse-address internet-network) (parsed-address)
  (unparse-internet-address parsed-address))

(defmethod (:internet-subnet-number internet-network) (address &optional (pad 0))
  (if ip-protocol
      (send ip-protocol :internet-subnet-number address pad)
      (official-internet-subnet-number address pad)))

(defmethod (:address-resolution-parameters internet-network) ()
  (values #x+0800 4 :fixnum-big *ip-broadcast-address*))

(defvar *prefer-bridged-ip-over-chaos* t
  "Set this to NIL if site IP bridges are more broken than site chaos gateways.")

(defmethod (:desirability internet-network) (&optional for-host)
  (cond
    ((not for-host)
     ;; We don't know anything, but we have no reason to not give TCP a high
     ;; desirability.
     .95s0)
    ((null (ignore-errors (ip-route-interface (send ip-protocol :route-to-host for-host))))
     ;; There's not even a route to this host! Make the desirability real low.
     .1s0)
    ((ignore-errors
       (let* ((route (send ip-protocol :route-to-host for-host))
	      (interface (ip-route-interface route))
	      (route-max-packet-size (ip-route-max-packet-size route))
	      (interface-max-packet-size (ip-interface-max-packet-size interface)))
	 (and ( route-max-packet-size interface-max-packet-size)
	      ( interface-max-packet-size 1024.))))
     ;; Since the route max packet size is at least the same as the interface
     ;; max packet size, (It would be really weird if it were bigger, wouldn't
     ;; it?) then we're using the interface pretty well.  As long as the
     ;; packet size is reasonably large, using TCP seems like a good idea.
     .95s0)
    (*prefer-bridged-ip-over-chaos*
     .90s0)
    (t
     ;; Make TCP slightly less desirable than chaos.
     .60s0)))

(compile-flavor-methods internet-network)

;;; Create an internet network in the distribution site
(add-initialization "Add Internet Network to neti:*distribution-networks*"
		    '(push (neti:add-or-change-object
			     :network
			     (neti:parse-name "INTERNET" nil neti:*distribution-namespace*)
			     '(:type :internet)
			     neti:*distribution-namespace*)
			   neti:*distribution-networks*)
		    '(:once :now))

;;; So people can load code.

(defvar *tcp-protocol-alist*
	'((7 . :byte-stream-echo)
	  (9 . :sink)
	  (19 . :babel)
	  (11 . :systat)
	  (13 . :time-string)
	  (21 . :tcp-ftp)
	  (23 . :telnet)
	  (25 . :smtp)
	  (37 . :time-msb)
	  (53 . :domain)
	  (57 . :3600-login)
	  (59 . :nfile)
	  (79 . :ascii-name)
	  (95 . :supdup)
	  ;; Symbolics internal protocols..
	  ;; Be sure to check *UDP-PROTOCOL-ALIST* before adding any more.
	  (259 . :configuration)
	  (260 . :rtape)			;subject to change
	  (261 . :namespace)
	  (262 . :converse)
	  (263 . :printer-queue)
	  (266 . :band-transfer)
	  ))

(defun add-tcp-port-for-protocol (protocol-name tcp-port-number)
  (let ((old-by-name (rassoc protocol-name *tcp-protocol-alist*))
	(old-by-port (assoc tcp-port-number *tcp-protocol-alist*)))
    (if old-by-name
	(if old-by-port
	    (when (neq old-by-name old-by-port)
	      (format *error-output* "~&TCP: Removing association from port ~D for ~A."
		      (car old-by-name) (cdr old-by-name))
	      (setf *tcp-protocol-alist* (delete old-by-name *tcp-protocol-alist*))
	      (format *error-output* "~&TCP: Changing protocol for port ~D to ~A."
		      tcp-port-number protocol-name)
	      (setf (cdr old-by-port) protocol-name))
	    (progn (setf (car old-by-name) tcp-port-number)
		   (format *error-output* "~&TCP: Changing port for protocol ~A to ~D."
			   protocol-name tcp-port-number)))
	(if old-by-port
	    (progn (format *error-output* "~&TCP: Changing protocol for port ~D to ~A."
			   tcp-port-number protocol-name)
		   (setf (cdr old-by-port) protocol-name))
	    (push (cons tcp-port-number protocol-name) *tcp-protocol-alist*))))
  ;; put them all on one page
  (setf *tcp-protocol-alist* (copy-tree *tcp-protocol-alist*)))

;;;

(defparameter *udp-protocol-alist*
	      '((7 . :echo)
		(9 . :discard)
		(11 . :lispm-finger)
		(37 . :time-simple-msb)
		(42 . :ien-116)
		(69 . :tftp)
		;; Symbolics internal protocols.
		;; Be sure to check *TCP-PROTOCOL-ALIST* before adding any more.
		(261 . :namespace-timestamp)
		(264 . :who-am-i)
		(265 . :notify)
		(267 . :uptime-simple)
		))

(defun add-udp-port-for-protocol (protocol-name udp-port-number)
  (let ((old (rassoc protocol-name *udp-protocol-alist*)))
    (if old
	(setf (car old) udp-port-number)
      (push (cons udp-port-number protocol-name) *udp-protocol-alist*)
      ;; put them all on one page
      (setf *udp-protocol-alist* (copy-tree *udp-protocol-alist*)))))
