;;; -*- Syntax: Zetalisp; Mode: LISP; Package: NETI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Network interface

(DEFVAR *NAMESPACE-SERVER-DEBUG-FLAG* NIL "T to not catch errors in namespace server.")

(DEFVAR *NAMESPACE-PROTOCOL-VERSION*)
(DEFVAR *NAMESPACE-SERVER-CAN-REPORT-ERRORS*)

(DEFINE-SERVER :NAMESPACE (:MEDIUM :BYTE-STREAM :WHO-LINE T :FLAVOR NAMESPACE-SERVER))

(DEFFLAVOR NAMESPACE-SERVER
	   ()
  (BYTE-STREAM-SERVER))

(DEFMETHOD (:SERVER-TOP-LEVEL NAMESPACE-SERVER) ()
  (CONDITION-CASE-IF (NOT *NAMESPACE-SERVER-DEBUG-FLAG*) (ERROR)
      (LOOP WITH *INHIBIT-VALIDITY-CHECKING* = T
	    WITH *NAMESPACE-PROTOCOL-VERSION* = *LOWEST-SUPPORTED-PROTOCOL-VERSION*
	    DO (MULTIPLE-VALUE-BIND (RECORD EOF)
		   (PARSE-RECORD-AS-TOKENS STREAM)
		 (WHEN RECORD
		   (LET ((*NAMESPACE-SERVER-CAN-REPORT-ERRORS* T))
		     (CONDITION-CALL-IF (NOT *NAMESPACE-SERVER-DEBUG-FLAG*) (ERROR)
			 (SEND SELF :PROCESS-RECORD RECORD)
		       (NAMESPACE-SERVER-HANDLE-ERROR-P
			 (UNCONVERT-TOKENS :ERROR NIL '(:TOKEN)
					   (SEND ERROR :REPORT-STRING) STREAM)
			 (FORMAT STREAM "~2%"))))
		   (SEND STREAM :FORCE-OUTPUT))
		 (WHEN EOF (RETURN T))))
    (NETWORK-ERROR)
    (SYS:ERROR
      (TV:NOTIFY NIL "Namespace server for ~A got a fatal error: ~A"
		 (SEND SELF :FOREIGN-HOST) ERROR))))

(DEFMETHOD (:PROCESS-RECORD NAMESPACE-SERVER) (RECORD)
  (LET* ((PROTOCOL-VERSION (LET ((ELEM (ASSOC "PROTOCOL-VERSION" RECORD)))
			     (WHEN ELEM
			       (SETQ RECORD (DELQ ELEM RECORD))
			       (PARSE-NUMBER (SECOND ELEM) 0 NIL 10. T))))
	 (NAMESPACE (LET ((ELEM (ASSOC "NAMESPACE" RECORD)))
		      (IF (NULL ELEM)
			  (WHEN (NULL PROTOCOL-VERSION)
			    (FERROR "No namespace name supplied."))
			  (SETQ RECORD (DELQ ELEM RECORD))
			  (FIND-OBJECT-NAMED :NAMESPACE (SECOND ELEM)))))
	 (CLASS (LET ((ELEM (ASSOC "CLASS" RECORD)))
		  (WHEN ELEM
		    (SETQ RECORD (DELQ ELEM RECORD))
		    (INTERN-GLOBAL-NAME (SECOND ELEM)))))
	 (TIMESTAMP (LET ((ELEM (ASSOC "TIMESTAMP" RECORD)))
		      (WHEN ELEM
			(SETQ RECORD (DELQ ELEM RECORD))
			(PARSE-NUMBER (SECOND ELEM) 0 NIL 10. T))))
	 (INCREMENTAL (LET ((ELEM (ASSOC "INCREMENTAL" RECORD)))
			(WHEN ELEM
			  (SETQ RECORD (DELQ ELEM RECORD))
			  (OR (SECOND ELEM)
			      (FERROR "Incremental type not supplied.")))))
	 (UPDATE-BY (LET ((ELEM (ASSOC "UPDATE-BY" RECORD)))
		      (WHEN ELEM
			(SETQ RECORD (DELQ ELEM RECORD))
			(OR (SECOND ELEM)
			    (FERROR "Update-by not supplied;~
						       you must be logged in.")))))
	 (DELETE (LET ((ELEM (ASSOC "DELETE" RECORD)))
		   (WHEN ELEM
		     (SETQ RECORD (DELQ ELEM RECORD))
		     (OR (SECOND ELEM)
			 (FERROR "Delete not supplied.")))))
	 (NAMES-ONLY (LET ((ELEM (ASSOC "NAMES-ONLY" RECORD)))
		       (WHEN ELEM
			 (SETQ RECORD (DELQ ELEM RECORD))
			 (EQUAL (SECOND ELEM) "YES"))))
	 (COMPLETION (LET ((ELEM (ASSOC "COMPLETE" RECORD)))
		       (WHEN ELEM
			 (SETQ RECORD (DELQ ELEM RECORD))
			 (OR (SECOND ELEM) "")))))
    (WHEN (AND (OR DELETE UPDATE-BY) (NOT (SEND SELF :TRUSTED-P)))
      (FERROR "You cannot do database updates from ~A."
	      (SEND SELF :FOREIGN-HOST)))
    (COND (PROTOCOL-VERSION
	   (UNLESS ( *LOWEST-SUPPORTED-PROTOCOL-VERSION* PROTOCOL-VERSION
		      *HIGHEST-SUPPORTED-PROTOCOL-VERSION*)
	     (FERROR "Protocol version not supported: ~D."
		     PROTOCOL-VERSION))
	   (SETQ *NAMESPACE-PROTOCOL-VERSION* PROTOCOL-VERSION)
	   (FORMAT STREAM "PROTOCOL-VERSION ~D~3%" PROTOCOL-VERSION))
	  (DELETE
	   (NAMESPACE-SERVER-DELETE
	     (FORMAT NIL "~A@~A" UPDATE-BY (SEND SELF :FOREIGN-HOST))
	     STREAM CLASS NAMESPACE DELETE))
	  (INCREMENTAL
	   (UNLESS (SEND NAMESPACE :LOADED)
	     (FERROR "Namespace not loaded."))
	   (SELECTOR INCREMENTAL EQUAL
	     ;; Brief incremental update, just mention changes.
	     ("BRIEF"
	      (WRITE-BRIEF-INCREMENTAL-UPDATE NAMESPACE STREAM TIMESTAMP))
	     ("FULL"
	      (SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
	      (WRITE-INCREMENTAL-UPDATE-FILE NAMESPACE STREAM TIMESTAMP)
	      (FORMAT STREAM "~2%"))
	     ("COMPLETE"
	      (WRITE-COMPLETE-DUMP NAMESPACE STREAM))
	     (OTHERWISE (FERROR "Unknown incremental type ~A."
				INCREMENTAL))))
	  ((NULL CLASS) (FERROR "You must specify a class."))
	  (COMPLETION
	   (NAMESPACE-SERVER-COMPLETE CLASS COMPLETION NAMESPACE STREAM))
	  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; if the record dosen't have any of the above, it is assumed
0	  1;; to be an ordinary query or update. (update implied by 0UPDATE-BY1).
0	  1;; This handles queries for the CLASS class, which nothing on the
0	  1;; user side uses at this point.  
0	  ((EQ CLASS :CLASS)
	   (WHEN UPDATE-BY (FERROR "You can't update classes."))
	   (UNLESS TIMESTAMP
	     (NAMESPACE-SERVER-CLASS-RESPONSE STREAM RECORD NAMES-ONLY))
	   (TERPRI STREAM))
	  (T (LET ((PROPERTY-LIST (RECORD-INTO-PROPERTY-LIST-1 RECORD CLASS NAMESPACE)))
	       (LET ((ELEM (GETL (LOCF PROPERTY-LIST) '(:NAME))))
		 (WHEN (AND ELEM (LISTP (SECOND ELEM)))
		   ;; This crock is needed for dealing with class class,
		   ;; where names get parsed wrong.  See note above.
		   (SETF (SECOND ELEM) (FIRST (SECOND ELEM)))))
	       (COND (UPDATE-BY
		      (NAMESPACE-SERVER-UPDATE
			(FORMAT NIL "~A@~A"
				UPDATE-BY (SEND SELF :FOREIGN-HOST))
			STREAM CLASS NAMESPACE
			PROPERTY-LIST))
		     (T (NAMESPACE-SERVER-QUERY STREAM CLASS NAMESPACE
						PROPERTY-LIST TIMESTAMP
						NAMES-ONLY)))
	       (TERPRI STREAM))))))

(DEFUN NAMESPACE-SERVER-HANDLE-ERROR-P (E)
  (AND *NAMESPACE-SERVER-CAN-REPORT-ERRORS*
       (TYPEP E 'ERROR)
       (NOT (TYPEP E 'NETWORK-ERROR))))

(DEFUN NAMESPACE-SERVER-CLASS-RESPONSE (STREAM RECORD NAMES-ONLY)
  (LET ((CLASS-NAME (SECOND (ASS 'STRING-EQUAL "NAME" RECORD))))
    (COND ((NULL CLASS-NAME)
	   (LOOP FOR CLASS-NAME IN (LIST* :CLASS *ALL-CLASSES*)
		 DO (COND (NAMES-ONLY
			   (SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
			   (SEND STREAM :LINE-OUT (STRING CLASS-NAME)))
			  (T (SERVER-CLASS-RESPONSE STREAM CLASS-NAME)))))
	  (T (SERVER-CLASS-RESPONSE STREAM (INTERN-GLOBAL-NAME CLASS-NAME))))))

(DEFUN SERVER-CLASS-RESPONSE (STREAM CLASS)
  (IF (EQ CLASS :CLASS)
      (FORMAT STREAM "CLASS CLASS~%~
                      * INTERNAL /"/" TRIPLE GLOBAL-NAME TOKEN SET GLOBAL-NAME~2%")
      (LET ((TEMPLATES (CLASS-ALL-TEMPLATES CLASS)))
	(SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
	(FORMAT STREAM "CLASS ~A~{~%~A ~{~A ~S~{ ~A~}~}~}~2%" CLASS TEMPLATES))))

(DEFUN NAMESPACE-SERVER-QUERY (STREAM CLASS NAMESPACE PROPERTY-LIST TIMESTAMP NAMES-ONLY)
  (LET ((CHANGES-VALID NIL)
	CHANGES)
    (WHEN TIMESTAMP
      (MULTIPLE-VALUE (CHANGES CHANGES-VALID)
	(SEND NAMESPACE :CHANGES-SINCE-TIMESTAMP TIMESTAMP)))
    (MULTIPLE-VALUE-BIND (OBJECTS NIL)
	(LEXPR-FUNCALL #'FIND-OBJECTS-FROM-PROPERTY-LIST-IN-NAMESPACE
		       CLASS NAMESPACE PROPERTY-LIST)
      (WHEN (AND (NOT (SEND NAMESPACE :LOADED)) ( *NAMESPACE-PROTOCOL-VERSION* 2))
	(SEND STREAM :LINE-OUT "VALID NO")
	(WHEN (NOT NAMES-ONLY)
	  (SEND STREAM :TYO #\CR)))
      (LOOP FOR OBJECT IN OBJECTS
	    UNLESS (AND CHANGES-VALID
			(LOOP FOR CHANGED IN CHANGES
			      NEVER (NS-MEMQ OBJECT (CHANGED-OBJECTS-CHANGED CHANGED))))
	      DO (SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
		 (IF NAMES-ONLY
		     (CONDITION-CASE ()
			 (SEND STREAM :LINE-OUT
			       (SEARCHING-ONE-NAMESPACE (NAMESPACE)
				 (SEND OBJECT :PRIMARY-NAME-STRING NAMESPACE)))
		       (NAMESPACE-OBJECT-DELETED ))
		     (PRINT-OBJECT-ATTRIBUTES OBJECT STREAM NAMESPACE))))))

(DEFUN NAMESPACE-SERVER-UPDATE (*UPDATE-ON-BEHALF-OF* STREAM CLASS NAMESPACE PROPERTY-LIST)
  (UNLESS (SEND NAMESPACE :LOADED)
    (IF (EQ (SEND NAMESPACE :LOCAL-SERVER-TYPE) :PRIMARY)
	(FERROR "Namespace not loaded.")
	(FERROR "Not primary server for namespace.")))
  (UNLESS *UPDATE-ON-BEHALF-OF* (FERROR "You are not logged in."))
  (LET ((NAME (PROG1 (GET (LOCF PROPERTY-LIST) :NAME)
		     (SI:NREMPROP (LOCF PROPERTY-LIST) :NAME))))
    (WHEN (NULL NAME) (FERROR "You must specify the object name."))
    (FS:WITH-AUTOMATIC-LOGIN-TO-SYS-HOST
      (UPDATE-OBJECT-PERMANENTLY CLASS NAMESPACE NAME PROPERTY-LIST)))
  (SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
  (FORMAT STREAM "TIMESTAMP ~D~%" (SEND NAMESPACE :VALIDATION-TIMESTAMP)))

(DEFUN NAMESPACE-SERVER-DELETE (*UPDATE-ON-BEHALF-OF* STREAM CLASS-NAME NAMESPACE DELETE)
  (UNLESS (SEND NAMESPACE :LOADED)
    (IF (EQ (SEND NAMESPACE :LOCAL-SERVER-TYPE) :PRIMARY)
	(FERROR "Namespace not loaded.")
	(FERROR "Not primary server for namespace.")))
  (UNLESS *UPDATE-ON-BEHALF-OF* (FERROR "You are not logged in."))
  (UNLESS CLASS-NAME (FERROR "You need to specify a class."))
  (FS:WITH-AUTOMATIC-LOGIN-TO-SYS-HOST
    (DELETE-OBJECT-FROM-NAMESPACE (FIND-OBJECT-NAMED CLASS-NAME DELETE) NAMESPACE))
  (SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
  (FORMAT STREAM "TIMESTAMP ~D~2%" (SEND NAMESPACE :VALIDATION-TIMESTAMP)))

(DEFUN WRITE-BRIEF-INCREMENTAL-UPDATE (NAMESPACE STREAM TIMESTAMP)
  (UNLESS TIMESTAMP (FERROR "You must specify a timestamp."))
  (LET ((CURRENT-TIMESTAMP (SEND NAMESPACE :VALIDATION-TIMESTAMP)))
    (MULTIPLE-VALUE-BIND (CHANGES CHANGES-VALID)
	(SEND NAMESPACE :CHANGES-SINCE-TIMESTAMP TIMESTAMP)
      (SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
      (COND ((= TIMESTAMP CURRENT-TIMESTAMP)
	     (FORMAT STREAM "CURRENT~2%"))
	    ((NOT CHANGES-VALID)
	     (FORMAT STREAM "TOO-OLD ~D~2%" CURRENT-TIMESTAMP))
	    (T
	     (FORMAT STREAM "TIMESTAMP ~D~%" CURRENT-TIMESTAMP)
	     ;; List of deleted objects
	     (LOOP FOR CHANGED IN CHANGES
		   DO (LOOP FOR (CLASS-NAME . NAMES) IN (CHANGED-OBJECTS-DELETED CHANGED)
			    WHEN ( *NAMESPACE-PROTOCOL-VERSION*
				    (CLASS-FIRST-PROTOCOL-VERSION CLASS-NAME))
			      DO (LOOP FOR NAME IN NAMES
				       DO (FORMAT STREAM "~A ~A~%"
						  CLASS-NAME
						  (IF (SYMBOLP NAME)
						      NAME
						      (SEND NAME :STRING))))))
	     (SEND STREAM :TYO #\CR)
	     (LOOP WITH RECORD-STARTED = NIL
		   FOR CHANGED IN CHANGES
		   DO (LOOP FOR OBJ IN (CHANGED-OBJECTS-CHANGED CHANGED)
			    DO (SEARCHING-ONE-NAMESPACE (NAMESPACE)
				 (WHEN ( *NAMESPACE-PROTOCOL-VERSION*
					  (CLASS-FIRST-PROTOCOL-VERSION (SEND OBJ :CLASS)))
				   (SETQ RECORD-STARTED T)
				   (FORMAT STREAM "~A ~A~%"
					   (SEND OBJ :CLASS)
					   (SEND OBJ :PRIMARY-NAME-STRING NAMESPACE)))))
		   FINALLY (WHEN RECORD-STARTED
			     (SEND STREAM :TYO #\CR)))))))
  (SEND STREAM :TYO #\CR))

(DEFUN WRITE-COMPLETE-DUMP (NAMESPACE STREAM)
  (SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
  (FORMAT STREAM "TIMESTAMP ~D~%~%" (SEND NAMESPACE :VALIDATION-TIMESTAMP))
  (PRINT-OBJECT-ATTRIBUTES NAMESPACE STREAM NAMESPACE)
  (MAP-OVER-OBJECTS-OF-CLASS-IN-NAMESPACE
    NAMESPACE :SITE
    #'(LAMBDA (SITE)
	(WHEN (NS-EQ NAMESPACE (SEND SITE :LOCAL-NAMESPACE))
	  (PRINT-OBJECT-ATTRIBUTES SITE STREAM NAMESPACE))))
  (LOOP FOR CLASS IN *ALL-CLASSES*
	UNLESS (OR (CLASS-GLOBALLY-NAMED-P CLASS)
		   (< *NAMESPACE-PROTOCOL-VERSION*
		      (CLASS-FIRST-PROTOCOL-VERSION CLASS)))
	  DO (MAP-OVER-OBJECTS-OF-CLASS-IN-NAMESPACE
	       NAMESPACE CLASS
	       #'(LAMBDA (OBJECT)
		   (PRINT-OBJECT-ATTRIBUTES OBJECT STREAM NAMESPACE))))
  (SEND STREAM :TYO #\CR))

(DEFUN NAMESPACE-SERVER-COMPLETE (CLASS STRING NAMESPACE STREAM)
  (FLET ((GENERATOR (STRING FUNCTION)
	   (MAP-OVER-POSSIBLE-OBJECT-NAME-COMPLETIONS CLASS STRING NAMESPACE FUNCTION)))
    (LET ((DELIMITERS "-"))
      (DW::DO-POSSIBLE-COMPLETIONS (STRING-CHUNKS STRING-NCHUNKS
						  COMPLETION IGNORE IGNORE
						  COMPLETION-CHUNKS COMPLETION-NCHUNKS
						  COMPLETION-DELIMITERS
						  STRING DELIMITERS #'GENERATOR)
				   ()
				   ()
	COMPLETION-CHUNKS COMPLETION-DELIMITERS
	(SETQ *NAMESPACE-SERVER-CAN-REPORT-ERRORS* NIL)
	(SEND STREAM :LINE-OUT COMPLETION))))
  (FORMAT STREAM "~2%"))

(COMPILE-FLAVOR-METHODS NAMESPACE-SERVER)



(DEFINE-SERVER :NAMESPACE-TIMESTAMP
    (:MEDIUM :DATAGRAM :SIMPLE-P T :REQUEST-ARRAY (REQUEST-ARRAY REQUEST-START REQUEST-END))
   (VALUES T
	   (LET ((*INHIBIT-VALIDITY-CHECKING* T))
	     (CONDITION-CASE (ERROR)
		  (LET ((NAMESPACE (FIND-OBJECT-NAMED
				     :NAMESPACE
				     (SUBSTRING (ASCII-TO-STRING REQUEST-ARRAY)
						REQUEST-START REQUEST-END))))
		    (IF (SEND NAMESPACE :LOADED)
			(FORMAT NIL "~D" (SEND NAMESPACE :VALIDATION-TIMESTAMP))
			":UNLOADED"))
		(ERROR
		  (FORMAT NIL "~A" ERROR))))))



(DEFINE-SERVER :WHO-AM-I (:MEDIUM :DATAGRAM :SIMPLE-P T :NETWORK NETWORK :ADDRESS ADDRESS)
   (WHEN (SEND *NAMESPACE* :LOADED)		;Quick check to avoid work
     (LET ((HOST (LET ((NETI:*INHIBIT-VALIDITY-CHECKING* T))
		   (GET-HOST-FROM-ADDRESS ADDRESS NETWORK T))))
       (WHEN HOST
	 (LET ((NAME (SEND HOST :PRIMARY-NAME)))
	   (WHEN (SEND (SEND NAME :NAMESPACE) :LOADED)
	     (VALUES T (SEND NAME :QUALIFIED-STRING))))))))
