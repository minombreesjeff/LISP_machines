;;; -*- Mode: LISP; Package: Debugger; Base: 8; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(defflavor lisp-language-debugging-instance
	((language-name ':lisp)
	 (language-pretty-name "Lisp"))
	(basic-language-debugging-instance)
  (:readable-instance-variables
   (language-name language-name)
   (language-pretty-name language-pretty-name)))

(defmethod (lframe-frame-function-name lisp-language-debugging-instance)
	   (frame &optional (pretty t))
  (ignore pretty)		;in Lisp, the function name is the pretty name
  (let ((function (frame-function frame)))
    #+IMach (when (eq function #'si:interpreter-trampoline)
	      (setq function (cdr (%p-contents-offset frame (defstorage-size stack-frame)))))
    (values (function-name function) 'sys:function-spec)))

(defmethod (lframe-function-name lisp-language-debugging-instance)
	   (function &optional (pretty t))
  (ignore pretty)
  (function-name function))

(defmethod (lframe-arglist lisp-language-debugging-instance) (frame)
  (arglist (frame-function frame)))

(defmethod (lframe-argument-value lisp-language-debugging-instance)
	   (frame arg-number &optional callee-context no-error-p)
  (frame-arg-value frame arg-number callee-context no-error-p))

(defmethod (lframe-number-of-locals lisp-language-debugging-instance) (frame)
  (frame-number-of-locals frame))

(defmethod (lframe-local-value lisp-language-debugging-instance)
	   (frame local-number &optional no-error-p)
  (frame-local-value frame local-number no-error-p))

#+3600
(defmethod (language-argument-name lisp-language-debugging-instance) (function argno)
  (let (argl)
    (cond ((typep function :compiled-function)
	   (llc:disassemble-arg-name function argno))
	  ((listp (setq argl (cond ((listp function)
				    (when (eq (first function) 'si:digested-lambda)
				      (setq function (second function)))
				    (selectq (car function)
				      ((lambda subst) (cadr function))
				      ((named-lambda named-subst) (caddr function))))
				   ((legitimate-function-p function)
				    (arglist function t)))))
	   (do ((argl argl (cdr argl))
		(i argno))
	       ((or (null argl)
		    (eq (car argl) '&aux)
		    (eq (car argl) '&rest)
		    (eq (car argl) '&key)))
	     (or (memq (car argl) lambda-list-keywords)
		 (cond (( i 0)
			(when (listp (car argl))
			  (setq argl (car argl)))
			(return (car argl)))
		       (t (setq i (1- i))))))))))

#+imach
(defmethod (language-argument-name lisp-language-debugging-instance) (frame argno)
  (ilc:disassemble-arg-name frame argno))

#+3600
(defmethod (language-rest-argument-name lisp-language-debugging-instance) (function)
  (local-name function (1- (function-local-block-argument-offset function)) nil))

#+imach
(defmethod (language-rest-argument-name lisp-language-debugging-instance) (frame)
  (let ((function (frame-function frame)))
    (local-name frame (1- (function-local-block-argument-offset function))
		(frame-relative-exit-pc frame))))

#+3600
(defmethod (language-local-name lisp-language-debugging-instance) (function localno &optional pc)
  (let (argl)
    (cond ((typep function :compiled-function)
	   (llc:disassemble-local-name function localno pc))
	  ((and (listp (setq argl (cond ((listp function)
					 (when (eq (first function) 'si:digested-lambda)
					   (setq function (second function)))
					 (selectq (car function)
					   (lambda (cadr function))
					   (named-lambda (caddr function))))
					((legitimate-function-p function)
					 (arglist function t)))))
		(= localno (1- (function-local-block-argument-offset function))))
	   (cadr (memq '&rest argl))))))

#+imach
(defmethod (language-local-name lisp-language-debugging-instance) (frame localno &optional pc)
  (ilc:disassemble-local-name frame localno pc))


;; Show arguments and locals

(defun-in-flavor (display-somethings-name lisp-language-debugging-instance)
		 (before after name)
  (when name
    (dw:with-redisplayable-output (:cache-value name)
      (format t "~A" before)
      (if (stringp name)
	  (format t "~A" name)
	;; Form, not expression, so that it does not get quoted
	(present name 'form))
      (format t "~A" after))))

(defun-in-flavor (display-arg-name lisp-language-debugging-instance)
		 (before after #+3600 function #+imach frame argno)
  (let ((name (language-argument-name self #+3600 function #+imach frame argno)))
    (display-somethings-name before after name)))

(defun-in-flavor (display-rest-arg-name lisp-language-debugging-instance)
		 (before after #+3600 function #+imach frame ignore)
  (let ((name (language-rest-argument-name self #+3600 function #+imach frame)))
    (display-somethings-name before after name)))

(defun-in-flavor (display-local-name lisp-language-debugging-instance)
		 (before after #+3600 function #+imach frame localno &optional pc name)
  (when (null name)
    (setq name (language-local-name self #+3600 function #+imach frame localno pc)))
  (when (cl:consp name)
    (setq name (string-append (car name) " function cell")))
  (display-somethings-name before after name))

(defun-in-flavor (display-arg-value lisp-language-debugging-instance)
		 (index #+3600 function #+imach frame indent
		  name-format name-printer print-value-p compare-p
		  caller-value caller-loc callee-value callee-loc
		  &optional n-args-and-locals)
  #+imach (ignore callee-value callee-loc compare-p)
  (let ((*printing-monitor-message* t))
    (dw:with-redisplayable-output
        (:unique-id caller-loc
	 :vertical-fraction (and n-args-and-locals
				 (rational-quotient index n-args-and-locals)))
      (dw:with-redisplayable-output (:cache-value caller-value)
	(format t name-format indent index))
      (when name-printer
	(funcall name-printer " (" ")" #+3600 function #+imach frame index))
      (let ((cl:*print-level* *error-message-prinlevel*)
	    (cl:*print-length* *error-message-prinlength*)
	    (scl:*print-string-length* *error-message-string-length*))
	(dw:with-redisplayable-output (:cache-value caller-value)
	  (when print-value-p
	    (format t ": ")
	    (print-carefully "value"
	      (present caller-value 'sys:expression :location caller-loc))))
	(format t "~%")))
    #+3600
    (when (and compare-p (neq caller-value callee-value))
      (dw:with-redisplayable-output
	  (:unique-id callee-loc
	   :vertical-fraction
	     (and n-args-and-locals
		  (rational-quotient index n-args-and-locals)))
	(dw:with-redisplayable-output (:cache-value 'constant)
	  (format t "~V,0TLocal ~D" indent index))
	(display-local-name " (" "): " function index nil nil)
	(let ((cl:*print-level* *error-message-prinlevel*)
	      (cl:*print-length* *error-message-prinlength*)
	      (scl:*print-string-length* *error-message-string-length*))
	  (dw:with-redisplayable-output (:cache-value callee-value)
	    (print-carefully "value"
	      (present callee-value 'sys:expression :location callee-loc)))
	  (format t "~%"))))))

(defmethod (lframe-print-arguments lisp-language-debugging-instance)
	   (frame indent &optional show-local-if-different n-args-and-locals)
  (declare (values local-start))
  #+imach
  (let* ((args-offset (defstorage-size stack-frame))
	 (function (let ((function (frame-function frame)))
		     #+IMach (when (eq function #'si:interpreter-trampoline)
			       (setq function (cdr (%p-contents-offset frame args-offset)))
			       (incf args-offset))
		     function))
	 (control-register (frame-own-control-register frame))
	 (args-info (args-info function))
	 (required-args (ldb %%arg-desc-min-args args-info))
	 (max-args (ldb %%arg-desc-max-args args-info))
	 (optional-args (- max-args required-args))
	 (rest-accepted (ldb-test %%arg-desc-rest-arg args-info))
	 (apply-supplied (ldb %%cr.apply control-register))
	 (args-supplied (frame-number-of-args frame))
	 (arg-state (cond ((< args-supplied required-args)
			   :missing)
			  ((< args-supplied max-args)
			   (when (plusp optional-args)
			     :defaulted))
			  ((or (> args-supplied max-args)
			       (plusp apply-supplied))
			   (when (not rest-accepted)
			     :extra))))
	 (first-local-offset
	   (+ (ldb %%cr.argument-size control-register) apply-supplied))
	 (last-arg-slot (if rest-accepted
			    (- first-local-offset apply-supplied)
			    (1- first-local-offset))))
    (loop for offset from args-offset
		     below (max (+ max-args args-offset)
				(1+ last-arg-slot))
	  for arg-n upfrom 0
	  ;; Argument is not valid if it was supposed to be supplied and is not
	  as arg-valid = (not (and (eq arg-state :missing)
				   ( arg-n args-supplied)))
	  as arg-loc = (%pointer-plus frame offset) doing
      (with-character-style (*deemphasis-character-style*)
	(when arg-state
	  (select arg-state
	    (:missing
	      (when (= arg-n args-supplied)
		(dw:redisplayable-format t "   --Missing args:--~%")))
	    (:defaulted
	      (when (= arg-n required-args)
		(dw:redisplayable-format t "   --Defaulted args:--~%")))
	    (:extra
	      (when (= arg-n max-args)
		(dw:redisplayable-format t "   --Extraneous args:--~%"))))))
      (when (or ;; Do display extraneous arguments (actually: display ALL args in this case)
		(eq arg-state :extra) 
		;; display normal spread args (but not the rest args on the stack)
		(< arg-n max-args)
		;; Don't display all the little pieces of the "rest
		;; arg" on the stack due to push-apply-args
		;; (i.e. Display the last arg (either the last spread arg or
		;;  the rest arg.)
		(= offset last-arg-slot))
	(display-arg-value arg-n frame
			   indent
			   (if (and (= offset last-arg-slot)
				    (or rest-accepted (= apply-supplied 1)))
			       ;; Don't need to say extraneous rest arg,
			       ;; since arg-state logic will output
			       ;; Extraneous now.
			       "~V,0TRest Arg"
			       "~V,0TArg ~D")
			   (if (and rest-accepted (= offset last-arg-slot))
			       #'display-rest-arg-name
			     #'display-arg-name)
			   arg-valid show-local-if-different
			   (location-contents arg-loc) arg-loc nil nil
			   n-args-and-locals)))
    ;; Subtract because the protocol is perverse...
    ;; Value will be garbage for interpreted functions, I hope it isn't used
    (- first-local-offset (defstorage-size stack-frame)))
  #+3600
  (let* ((function (frame-function frame))
	 (nargs-supplied (frame-number-of-visible-args frame))
	 (nargs-supplied-by-caller (frame-number-of-args frame))
	 (active-p (frame-active-p frame))
	 (number-of-locals-displayed 0)
	 nargs-required nargs-expected nargs-to-print nargs-allocated
	 rest-arg-local-slot rest-arg-value rest-arg-loc lexpr-call)
    ;; Print out SELF if it is interesting.
    (cond (active-p
	   (when (legitimate-function-p function)
	     (let ((a-i (args-info function)))
	       (setq nargs-required (ldb %%arg-desc-min-args a-i)
		     nargs-expected (ldb %%arg-desc-max-args a-i)))
	     (setq number-of-locals-displayed
		   (function-local-block-argument-offset function))
	     ;; If there is hairy argument locating, cannot know how many 
	     #+3600 (when (assq :argument-map (debugging-info function))
		      (setq number-of-locals-displayed 0
			    show-local-if-different nil)))
	   (multiple-value (rest-arg-local-slot rest-arg-value rest-arg-loc lexpr-call)
	     (decode-frame-rest-arg frame))
	   (when lexpr-call
	     (incf nargs-supplied (length rest-arg-value)))
	   (setq nargs-to-print (frame-number-of-spread-args frame :expected))
	   (setq nargs-allocated (frame-number-of-spread-args frame :allocated)))
	  (t
	   (dw:redisplayable-format t
	       "  Frame still accumulating args; possible args or stack temps follow:~%")
	   (setq nargs-to-print (open-but-not-active-frame-number-of-stack-slots frame)
		 nargs-allocated nargs-to-print
		 nargs-supplied nargs-to-print)))
    ;; Print the individual args.
    (dotimes (i nargs-to-print)
      (with-character-style (*deemphasis-character-style*)
	(and (= i nargs-supplied)
	     (cond ((> nargs-supplied-by-caller nargs-supplied)
		    (dw:redisplayable-format t "   --Unknown args:--~%"))
		   ((and nargs-required (< i nargs-required))
		    (dw:redisplayable-format t "   --Missing args:--~%"))
		   (t
		    (dw:redisplayable-format t "   --Defaulted args:--~%"))))
	(and nargs-required (= i nargs-supplied-by-caller)
	     (< i nargs-required) (> nargs-supplied-by-caller nargs-supplied)
	     (dw:redisplayable-format t "   --Missing args:--~%"))	;End of unknown args
	(and nargs-required (< nargs-supplied nargs-required) (= i nargs-required)
	     (dw:redisplayable-format t "   --Optional args:--~%"))	;End of truly missing args
	(and nargs-expected (= i nargs-expected)	;Called with too many args
	     (dw:redisplayable-format t "   --Extraneous args:--~%")))
      ;; Print the arg value unless the arg is missing (val is garbage).
      (let ((value-valid (not (or (and nargs-required
				       (> nargs-required nargs-supplied)
				       ( i nargs-supplied))
				  ( i nargs-allocated))))
	    caller-value caller-loc callee-value callee-loc)
	(when value-valid
	  (multiple-value (caller-value caller-loc) (frame-arg-value frame i nil t))
	  (or caller-loc (setq value-valid nil))	;ARGS-INFO disagrees with local-map
	  (multiple-value (callee-value callee-loc) (frame-arg-value frame i t t))
	  (or callee-loc (setq callee-value caller-value)))
	(display-arg-value i function indent "~V,0TArg ~D"
			   (and active-p #'display-arg-name)
			   value-valid show-local-if-different
			   caller-value caller-loc callee-value callee-loc
			   n-args-and-locals)))
    ;; Print the rest arg if any.
    (cond (rest-arg-local-slot
	   (unless (typep function :compiled-function)
	     (setq show-local-if-different nil))	;Don't die in FRAME-LOCAL-VALUE
	   (multiple-value-bind (r-val r-loc)
	       (and show-local-if-different
		    (frame-local-value frame rest-arg-local-slot))
	     (display-arg-value rest-arg-local-slot function indent "~V,0TRest arg"
				#'display-rest-arg-name t show-local-if-different
				rest-arg-value rest-arg-loc r-val r-loc
				n-args-and-locals)))
	  (lexpr-call
	   (dw:redisplayable-format t "~V~V,0T~:[~;Extraneous ~]Rest Arg: ~"
	     *deemphasis-character-style* indent (legitimate-function-p function))
	   (print-carefully "value"
	     (dw:redisplayable-format t "~S~%" rest-arg-value))))
    number-of-locals-displayed))

(defmethod (lframe-print-specials lisp-language-debugging-instance)
	   (frame special-start special-end &optional n-specials n-args-and-locals)
  (dw:with-redisplayable-output (:unique-id `(specials ,frame)
				 :id-test #'equal
				 :cache-value `(,special-start ,frame)
				 :cache-test #'equal)
    (when special-start
      (let ((*printing-monitor-message* t)
	    (prinlevel *error-message-prinlevel*)
	    (prinlength *error-message-prinlength*)
	    (scl:*print-string-length* *error-message-string-length*))
	(terpri)
	(map-over-bindings
	  (lambda (loc val unbound-p ignore n)
	    (let ((sym (symbol-from-value-cell-location loc)))
	      (print-carefully "special variable binding"
		(dw:with-redisplayable-output
		    (:unique-id loc
		     :vertical-fraction (rational-quotient
					  (+ (- n-args-and-locals n-specials) n)
					  n-args-and-locals))
		  (dw:with-redisplayable-output (:cache-value sym)
		    (present sym 'sys:form)
		    (format t ": "))
		  (dw:with-redisplayable-output (:cache-value val)
		    (if unbound-p
			(princ "unbound")
		      (present val (language-expression-type *current-language*)
			       :location loc))
		    (terpri))))))
	  special-start special-end)))))

(defmethod (lframe-print-locals lisp-language-debugging-instance)
	   (frame local-start &optional (indent 0) n-args-and-locals)
  (let* ((function (frame-function frame))
	 (exit-pc (frame-relative-exit-pc frame))
	 (n-locals (frame-number-of-locals frame))
	 (lexical-variables
	   (when (not (zerop (frame-lexical-called frame)))
	     (car (frame-lexical-environment frame))))
	 (n-lexicals (length lexical-variables)))
    (flet ((display-value (val loc)
	     (print-carefully "value"
	       (let ((cl:*print-level* *error-message-prinlevel*)
		     (cl:*print-length* *error-message-prinlength*)
		     (scl:*print-string-length* *error-message-string-length*))
		 (dw:with-redisplayable-output (:cache-value val)
		   (format t ": ")
		   (present val 'sys:expression :location loc)
		   (format t "~%"))))))
      #+imach
      (let* ((control-register (frame-own-control-register frame))
	     (args-info (%args-info function))
	     (first-local-offset (ldb %%cr.argument-size control-register))
	     (first-non-spread-arg (ldb %%arg-desc-max-args args-info)))
	(loop for local-n upfrom local-start below n-locals
	      for offset upfrom (+ local-start (defstorage-size stack-frame))
	      doing
	  (when (or (< local-n first-non-spread-arg)
		    ( offset first-local-offset))
	    (multiple-value-bind (val loc)
		(frame-local-value frame local-n)
	      (dw:with-redisplayable-output
		  (:unique-id loc
		   :vertical-fraction
		   (and n-args-and-locals
			(rational-quotient local-n n-args-and-locals)))
		(dw:with-redisplayable-output (:cache-value 'constant)
		  (format t "~V,0TLocal ~D" indent local-n))
		(display-local-name " (" ")" frame local-n exit-pc nil)
		(display-value val loc))))))
      #+3600
      (loop for i upfrom local-start below n-locals
	    do (multiple-value-bind (val loc)
		   (frame-local-value frame i)
		 (dw:with-redisplayable-output
		     (:unique-id loc
		      :vertical-fraction
		      (and n-args-and-locals
			   (rational-quotient i n-args-and-locals)))
		   (dw:with-redisplayable-output (:cache-value 'constant)
		     (format t "~V,0TLocal ~D" indent i))
		   (display-local-name " (" ")" function i exit-pc nil)
		   (display-value val loc))))
      ;; Display any lexical or captive local variables
      (when lexical-variables
	(loop for i upfrom 0
	      for (name . value) in lexical-variables
	      as loc = (if (locativep value) value nil)
	      as val = (if (locativep value) (location-contents value) (car value))
	      do (dw:with-redisplayable-output
		     (:unique-id loc
		      :vertical-fraction
		      (and n-args-and-locals
			   (rational-quotient (+ n-locals i) n-args-and-locals)))
		   (dw:with-redisplayable-output (:cache-value 'constant)
		     (format t "~V,0TLexical ~D" indent i))
		   (display-local-name " (" ")" nil nil nil name)
		   (display-value val loc))))
      (multiple-value-bind (captive-block captive-map)
	  (lframe-captive-info frame)
	(when (and captive-map captive-block)
	  (loop for (name number) in (reverse captive-map)
		do (print-carefully "value"
		     (let ((cl:*print-level* *error-message-prinlevel*)
			   (cl:*print-length* *error-message-prinlength*))
		       (let* ((loc (%make-pointer-offset dtp-locative captive-block number))
			      (val (location-contents loc)))
			 (dw:with-redisplayable-output
			     (:unique-id loc
			      :vertical-fraction
			      (and n-args-and-locals
				   (rational-quotient (+ n-locals n-lexicals number)
						      n-args-and-locals)))
			   (dw:with-redisplayable-output (:cache-value 'constant)
			     (format t "~V,0TCaptive ~D" indent number))
			   (display-local-name " (" ")" nil nil nil name)
			   (display-value val loc)))))))))))

(defmethod (lframe-special-pdl-range lisp-language-debugging-instance) (frame)
  (frame-and-subframes-special-pdl-range frame))

;; FRAME is a frame which has calls which are started but not finished
#+imach
(defmethod (lframe-describe-open-subframes lisp-language-debugging-instance)
	   (frame &optional (indent 0))
  (loop with n-slots = (frame-number-of-stack-slots frame)
	with last-arg-loc = nil
	for i upfrom 0 below n-slots
	do (multiple-value-bind (cont-val cont-loc)
	       (frame-local-value frame i :force)
	     (when (and (= (%p-cdr-code cont-loc) 3)
			(= (%p-cdr-code (%pointer-plus cont-loc 1)) 3))
	       ;; We just found an open frame.  If it's not the first occurrence
	       ;; then it's time to do some output.
	       (when last-arg-loc
		 (loop initially (let* ((function (%find-structure-header cont-val))
					(language (find-language-for-function function)))
				   (dw:with-redisplayable-output (:unique-id cont-loc
								  :cache-value function)
				     (format t "~%~VTCall started to ~S~%"
				       indent (lframe-function-name language function))))
		       for arg-loc = last-arg-loc then (%pointer-plus arg-loc 1)
		       while (%pointer-lessp arg-loc cont-loc)
		       do (let ((arg-val (sys:%memory-read arg-loc :cycle-type %memory-scavenge)))
			    (dw:with-redisplayable-output (:unique-id arg-loc
							   :cache-value arg-val)
			      (format t "~VTArg ~D: "
				(+ indent 2) (%pointer-difference arg-loc last-arg-loc))
			      (present arg-val 'sys:expression :location arg-loc)
			      (format t "~%")))))
	       (incf i)		;in case two calls got started in a row...
	       (setq last-arg-loc (%pointer-plus cont-loc (defstorage-size stack-frame)))))))


(defmethod (lframe-show-source-code-p lisp-language-debugging-instance) ()
  (if *inside-display-debugger*
      *display-debugger-show-source-code*
    *debugger-show-source-code*))

#+3600
(defmethod (lframe-disassemble-function lisp-language-debugging-instance)
	   (frame function &optional (max-nlines nil)
				     (min-nlines *disassemble-instruction-count*))
  (print-carefully "disassembled code"
    (let* ((lim-pc (llc:disassemble-lim-pc function))
	   ;; Minor kludge for bottom-most frame
	   (pc-now (if frame (or (frame-relative-exit-pc frame) lim-pc) nil))
	   ;; Figure out how many instructions will fit in the stream we are using.
	   (nlines (if (not (operation-handled-p standard-output :size-in-characters))
		       0
		     (multiple-value-bind (nil nlines)
			 (send standard-output :size-in-characters)
		       (multiple-value-bind (nil where)
			   (send standard-output :read-cursorpos :character)
			 ;; Leave 1 line for prompt, 1 for extra terpri
			 (- nlines where 3)))))
	   (start-pc (compiled-function-initial-pc function)))
      (if (eq max-nlines 't)
	  (setq nlines 10000.)
	(when max-nlines
	  (setq nlines (min nlines max-nlines)))
	(when min-nlines
	  (setq nlines (max nlines min-nlines))))
      (setq start-pc (max start-pc (if pc-now (- pc-now (// nlines 2)) 0)))
      (loop for i upfrom 0
	    for pc = start-pc then (+ pc (llc:disassemble-instruction-length function pc))
	    until (or ( i nlines) ( pc lim-pc))
	    do (format t "~&~A " (if (eq pc pc-now) "=>" "  "))
	       (with-character-style ((and (eq pc pc-now) *emphasis-character-style*))
		 (llc:disassemble-instruction function pc))
	    finally (when (eq pc pc-now)	;Arrow might point after all code
		      (format t "~%=> "))))))

#+imach
(defmethod (lframe-disassemble-function lisp-language-debugging-instance)
	   (frame function &optional (max-nlines nil)
				     (min-nlines *disassemble-instruction-count*))
  (print-carefully "disassembled code"
    (multiple-value-bind (cca extra-info vca pc-now pc-0 pc-1 count)
	(lframe-setup-for-disassembly self frame function max-nlines min-nlines)
      (declare (ignore pc-0))
      (let* ((printed-arrow nil)
	     (stack-array (i-lisp-compiler:compute-stack-description function))
	     (relative-pc (function-relative-pc pc-1 function)))
	(loop repeat count doing
	  (let ((increment
		  (progn
		    (format t "~&~A "
			    (if (neq relative-pc pc-now)
				"  "
				(setq printed-arrow t)
				"=>"))
		    (with-character-style ((and (eq relative-pc pc-now)
						*emphasis-character-style*))
		      (ilc:disassemble-instruction
			cca
			relative-pc
			(cdr (cl:assoc relative-pc vca))
			stack-array
			(cdr extra-info))))))
	    (if increment
		(incf relative-pc increment)
		(return nil))))
	(unless printed-arrow
	  (format t "~&=>"))))))

#+imach
(defmethod (lframe-setup-for-disassembly lisp-language-debugging-instance)
	   (frame function &optional (max-nlines nil)
				     (min-nlines *disassemble-instruction-count*))
  (declare (values cca extra-info local-map pc-now pc-0 pc-1 count))
  (let* ((cca (compiled-function-cca function))
	 (lim-pc (cca-n-instructions cca))
	 ;; Minor kludge for bottom-most frame and breakpoint check
	 (pc-now (if *current-breakpoint-info*
		     (bpt-pc *current-breakpoint-info*)
		     (if frame
			 (or (frame-relative-exit-pc frame) lim-pc)
			 nil)))
	 ;; Figure out how many instructions will fit in the stream we are using.
	 (nlines (if (not (operation-handled-p standard-output :size-in-characters))
		     0
		   (multiple-value-bind (nil nlines)
		       (send standard-output :size-in-characters)
		     (multiple-value-bind (nil where)
			 (send standard-output :read-cursorpos :character)
		       ;; Leave 1 line for prompt, 1 for extra terpri
		       (- nlines where 3))))))
    (if (eq max-nlines 't)
	(setq nlines 10000.)
      (when max-nlines
	(setq nlines (min nlines max-nlines)))
      (when min-nlines
	(setq nlines (max nlines min-nlines))))
    (let* ((after (// nlines 2))
	   (before (- nlines after))
	   (function-address (%pointer function))
	   (pc-1 (%make-pc function pc-now))
	   (count (1+ after))
	   (pc-0 (%make-pointer-offset dtp-even-pc cca (defstorage-size compiled-function)))
	   (extra-info (compiled-function-extra-info cca))
	   (local-map (cdr (assq :variable-creation-alist (cdr extra-info)))))
      (loop repeat before
	    while ( (%pointer pc-1) function-address)
	    for this-word = (%memory-read pc-1
					  :cycle-type %memory-scavenge
					  :set-cdr-next nil)
	    for this-cdr-code = (%p-cdr-code pc-1)
	    for this-data-type = (%data-type this-word)
	    for previous-word = (%memory-read (%pointer-plus pc-1 -1)
					      :cycle-type %memory-scavenge
					      :set-cdr-next nil)
	    for previous-cdr-code = (%p-cdr-code (%pointer-plus pc-1 -1))
	    for previous-data-type = (%data-type previous-word)
	    ;; cdr code   pc inc   comment
	    ;;    0         +1     Normal instruction sequencing
	    ;;    1      illegal   Fence; marks end of compiled function
	    ;;    2         -1     On some constants
	    ;;    3         +2 if PC is even    Before some constants, on some constants
	    ;;              +3 if PC is odd
	    for offset-to-previous-instruction =
		(if (< this-data-type dtp-packed-instruction-60)
		    ;; This is a full-word instruction
		    (select this-cdr-code
		      (2 -2)
		      (3 (cond ((= previous-cdr-code 2) -3)
			       ((or (< previous-data-type dtp-packed-instruction-60)	;full word
				    (= previous-cdr-code 3)	;probably has unused halfword
				    (= (1- (%pointer pc-1)) function-address))
				-2)
			       (t -1)))
		      (1 -2)			;if pc points past end
		      (t (return)))		;--- Bad cdr-code, just give up
		  ;; This is a packed instruction
		  (select (%data-type pc-1)
		    (dtp-even-pc
		     (if (or (< previous-data-type dtp-packed-instruction-60)
			     (= (1- (%pointer pc-1)) function-address))
			 ;; Previous is full-word
			 (select previous-cdr-code
			   (2 -3)
			   (3 -2)
			   (t (return)))	;--- Bad cdr-code, just give up
		       ;; Previous is packed
		       (select previous-cdr-code
			 (0 -1)
			 (3 -2)			;happens in entry 
			 (t (return)))))	;--- Bad cdr-code, just give up
		    (dtp-odd-pc
		     (select this-cdr-code
		       (0 -1)
		       (3 1)
		       (t (return))))		;--- Bad cdr-code, just give up
		    (t (ferror "~S isn't a PC" pc-1))))
	    do (setq pc-1 (si:%pc-plus pc-1 offset-to-previous-instruction))
	       (incf count))
      (values cca extra-info local-map pc-now pc-0 pc-1 count))))

(defmethod (lframe-show-code-for-function lisp-language-debugging-instance)
	   (frame &optional (function (frame-function frame)) show-source header-p warn-p)
  (cond (show-source
	 (show-lisp-frame-source frame function header-p warn-p))
	(t
	  (when header-p
	    (format t "~%~VDisassembled code:~" *deemphasis-character-style*))
	  (lframe-disassemble-function self frame function))))

(defmethod (lframe-current-source-locator lisp-language-debugging-instance) (frame)
  (frame-exit-source-locator frame))

(defmethod (lframe-current-source-locator-bp lisp-language-debugging-instance) (frame)
  (frame-exit-source-locator-bp frame))

(defmethod (lframe-interesting-p lisp-language-debugging-instance)
	   (frame &optional (censor-invisible-frames *censor-invisible-frames*))
  (labels ((uninternalize-fspec (fspec)
	     ;; Internal functions of uninteresting functions are uninteresting
	     (if (and (listp fspec) (eq (first fspec) :internal))
		 (if (and (not (memq :process-priority *invisible-frame-types-to-show*))
			  (or (eq (fourth fspec) 'si:with-process-interactive-priority-body)
			      (eq (fourth fspec) 'si:with-process-non-interactive-priority-body)))
		     ;; These things aren't interesting
		     (return-from lframe-interesting-p nil)
		   (uninternalize-fspec (second fspec)))
	       fspec)))
    (if (and censor-invisible-frames
	     (lframe-invisible-p self frame))
	nil
      (let* ((function (frame-function frame))
	     (fspec (uninternalize-fspec (function-name function))))
	(if (eq fspec function)			;Doesn't have a name
	    (not (and (listp function)		;Anonymous lambdas are not interesting,
		      (eq (car function) 'lambda)))	;but garbage objects are
	  (and (not (cl:gethash fspec *uninteresting-functions*))
	       (not (member fspec si:*digested-special-forms*))))))))

(defmethod (lframe-invisible-p lisp-language-debugging-instance) (frame)
  (if (or (null frame)
	  (eq *invisible-frame-types-to-show* t)
	  (and (boundp '*innermost-interesting-frame*)
	       (eq frame *innermost-interesting-frame*))) 
      nil					;user said no frames are invisible
    (labels ((invisible-p (function)
	       (let* ((invisible-property
			(si:debugging-info-user-entry function 'invisible-frame))
		      (invisible-p (second invisible-property)))
		 (cond ((and *combined-methods-are-invisible*
			     (let ((fspec (function-name function)))
			       (or (cl:typep fspec 'clos-internals::miscellaneous-function) 
				   (cl:typep fspec 'clos-internals::combined-method)
				   (and (listp fspec)
					(memq (first fspec) 'flavor:(combined shared-combined))))))
			t)
		       ((null invisible-property)
			;; If there is no INVISIBLE-FRAME property, then look
			;; at the parent function
			(let ((fspec (function-name function)))
			  (if (and (listp fspec) (eq (first fspec) :internal))
			      (invisible-p (si:valid-function-definition (second fspec)))
			    nil)))
		       ((eq invisible-p nil) nil)
		       ((eq invisible-p t) t)
		       (t (not (memq invisible-p *invisible-frame-types-to-show*)))))))
      (invisible-p (frame-function frame)))))

(defmethod (language-expression-reader lisp-language-debugging-instance) ()
  #'sys:read-form)
(defmethod (language-expression-printer lisp-language-debugging-instance) ()
  #'prin1)
(defmethod (language-expression-evaluator lisp-language-debugging-instance) ()
  #'eval)
(defmethod (language-expression-describer lisp-language-debugging-instance) ()
  #'describe)
(defmethod (language-expression-type lisp-language-debugging-instance) ()
  'sys:expression)
(defmethod (language-expression-name lisp-language-debugging-instance) ()
  "Lisp form")

(defmethod (language-function-spec-type lisp-language-debugging-instance) ()
  'sys:function-spec)
(defmethod (language-validate-function-spec lisp-language-debugging-instance) (fspec)
  (si:validate-function-spec fspec))

(defmethod (language-command-table lisp-language-debugging-instance) ()
  (declare (special *lisp-debugger-comtab*))
  *lisp-debugger-comtab*)


;; Make a single instance of the Lisp language support flavor
(add-initialization "Set up Lisp language debugger"
   '(progn (setq *lisp-language-debugging-instance*
		 (make-instance 'lisp-language-debugging-instance))
	   (setf (aref *known-debugger-languages* %debugger-language-lisp)
		 *lisp-language-debugging-instance*))
   '(:once))


(compile-flavor-methods lisp-language-debugging-instance)


;;; Code fragment and source locator hacking

(defun frame-exit-source-locator (frame)
  (declare (values form))
  (let* ((function (frame-function frame))
	 (true-function (cond ((closurep function)
			       (si:valid-function-definition
				 (%p-contents-offset function 0) t))
			      ((typep function :lexical-closure)
			       (si:valid-function-definition
				 (lexical-closure-function function) t))
			      (t function)))
	 (pc (let ((pc (frame-relative-exit-pc frame)))
	       (when (and pc (frame-pc-incremented-p *error* frame))
		 (decf pc))
	       pc)))
    (si:cca-instruction-source-locator
      (compiled-function-cca true-function) pc)))

(defun frame-exit-source-locator-bp (frame)
  (declare (values start-bp type end-bp))
  (let* ((function (frame-function frame))
	 (true-function (cond ((closurep function)
			       (si:valid-function-definition
				 (%p-contents-offset function 0) t))
			      ((typep function :lexical-closure)
			       (si:valid-function-definition
				 (lexical-closure-function function) t))
			      (t function)))
	 (pc (let ((pc (frame-relative-exit-pc frame)))
	       (when (and pc (frame-pc-incremented-p *error* frame))
		 (decf pc))
	       pc)))
    (multiple-value-bind (start-bp end-bp)
	(si:cca-instruction-source-locator-bp
	  (compiled-function-cca true-function) pc)
      (values start-bp 'defun end-bp))))

(defun function-and-pc-from-presentation-node (node)
  (declare (values function pc))
  (when (null node)
    (return-from function-and-pc-from-presentation-node (values nil nil)))
  (flet ((object-as-compiled-function (func)
	   (loop doing
	     (when (typep func :compiled-function) (return func))
	     (setq func (si:valid-function-definition func))
	     (unless func (return nil)))))
    (let* ((start-bp (zwei:presentation-node-start-bp node))
	   (zwei-node (if start-bp (zwei:line-node (zwei:bp-line start-bp))))
	   (function-name (if zwei-node (send-if-handles zwei-node :function-spec)))
	   (function (object-as-compiled-function function-name))
	   (locators (and function (si:function-source-locators function))))
      (when (or (null locators)
		;;--- Right now, this can get called for non-Lisp nodes, but
		;;--- we aren't prepared yet to handle them.  "Fixed in 7.2"
		(and zwei-node
		     (neq (send-if-handles (send zwei-node :superior) :major-mode)
			  (zwei:major-mode-from-keyword :lisp))))
	;; Quick exit if there are no locators
	(return-from function-and-pc-from-presentation-node (values function-name nil)))
      (when function
	(macrolet ((interval-equal (bp-s1 bp-e1 bp-s2 bp-e2)
		     `(and (zwei:bp-= ,bp-s1 ,bp-s2)
			   (zwei:bp-= ,bp-e1 ,bp-e2))))
	  (multiple-value-bind (section correspondences)
	      (si:function-correspondence-info function)
	    section
	    (let* ((start-bp (zwei:presentation-node-start-bp node))
		   (end-bp (zwei:presentation-node-end-bp node))
		   (form (loop named found-form
			       for (subform . corrs) in correspondences
			       doing
			   (loop for (start end) in corrs
				 do (when (interval-equal start-bp end-bp start end)
				      (return-from found-form subform)))))
		   (pc (loop named found-pc
			     for locator being the array-elements of locators
			     as start-pc = (compiler:source-locator-start-pc locator)
			     as saved-form = (compiler:source-locator-form locator)
			     do (when (and (listp saved-form)
					   (eq form (car saved-form)))
				  (return-from found-pc start-pc)))))
	      (values function-name pc))))))))
