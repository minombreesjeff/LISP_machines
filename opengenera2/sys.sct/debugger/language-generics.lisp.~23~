;;; -*- Mode: LISP; Package: Debugger; Base: 8; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(defflavor basic-language-debugging-instance
	()
	()
  :abstract-flavor
  (:required-methods
   language-name language-pretty-name
   lframe-frame-function-name lframe-function-name 
   lframe-arglist
   lframe-argument-value
   lframe-local-value lframe-number-of-locals
   language-argument-name language-rest-argument-name language-local-name
   lframe-print-arguments lframe-print-locals
   lframe-print-specials lframe-special-pdl-range
   lframe-show-source-code-p
   lframe-disassemble-function lframe-show-code-for-function
   lframe-current-source-locator lframe-current-source-locator-bp
   lframe-interesting-p lframe-invisible-p
   language-expression-reader language-expression-printer language-expression-evaluator
   language-expression-describer language-expression-type language-expression-name
   language-function-spec-type language-validate-function-spec
   language-command-table))


(defconst *debugger-prompt-char* #\)
(defmethod (language-debugger-prompt basic-language-debugging-instance) (stream)
  (loop repeat *debugger-level*
	do (send stream :tyo *debugger-prompt-char*)))

(defmethod (language-eval-prompt basic-language-debugging-instance) (stream)
  (format stream "~V Eval (~A): ~"
    *deemphasis-character-style* (if *inherit-lexical-environment* "program" "debugger")))


(defgeneric lframe-frame-function-name (language frame &optional (pretty t))
  (declare (values function-name fspec-type)))
(defgeneric lframe-function-name (language function &optional (pretty t)))
(defmethod (function-name-for-editor basic-language-debugging-instance) (function-name)
  function-name)

(defgeneric lframe-arglist (language frame))

;; Number of [visible] arguments is machine-dependent, not language-dependent
(defgeneric lframe-argument-value
	    (language frame arg-number &optional callee-context no-error-p)
  (declare (values value location)))

(defgeneric lframe-number-of-locals (language frame))
(defgeneric lframe-local-value (language frame local-number &optional no-error-p)
  (declare (values value location)))

(defgeneric language-argument-name #+3600 (language function argno)
				   #+imach (language frame argno))
(defgeneric language-rest-argument-name #+3600 (language function)
					#+imach (language frame))
(defgeneric language-local-name #+3600 (language function localno &optional pc)
				#+imach (language frame localno &optional pc))

(defgeneric lframe-print-arguments
	    (language frame indent &optional show-local-if-different n-args-and-locals))
(defgeneric lframe-print-locals
	    (language frame local-start &optional (indent 0) n-args-and-locals))

(defgeneric lframe-hybrid-print-arguments
	    (language frame indent &optional show-local-if-different n-args-and-locals warn-p)
  (:method (basic-language-debugging-instance)
   (ignore warn-p)
   (lframe-print-arguments self frame indent show-local-if-different n-args-and-locals)))

(defgeneric lframe-print-specials
	    (language frame special-start special-end &optional n-specials n-args-and-locals))
(defgeneric lframe-special-pdl-range (language frame)
  (declare (values start-frame end-frame n-subframes)))

#+imach
(defgeneric lframe-describe-open-subframes (language frame &optional (indent 0))
  (:method (basic-language-debugging-instance)
   (ignore frame indent)
   nil))

(defgeneric lframe-show-source-code-p (language))
(defgeneric lframe-disassemble-function (language frame function
					 &optional (max-nlines nil)
						   (min-nlines *disassemble-instruction-count*)))
(defgeneric lframe-show-code-for-function (language frame
					   &optional (function (frame-function frame))
						     show-source header-p warn-p))

(defmethod (lframe-describe-instruction basic-language-debugging-instance)
	   (frame &optional (stream standard-output))
  (describe-frame-instruction frame stream))

(defgeneric lframe-current-source-locator (language frame)
  (declare (values form)))
(defgeneric lframe-current-source-locator-bp (language frame)
  (declare (values start-bp type end-bp)))

(defgeneric lframe-interesting-p
	    (language frame &optional (censor-invisible-frames *censor-invisible-frames*)))
(defgeneric lframe-invisible-p (language frame))

(defgeneric language-expression-reader (language))
(defgeneric language-expression-printer (language))
(defgeneric language-expression-evaluator (language))
(defgeneric language-expression-describer (language))
(defgeneric language-expression-type (language))
(defgeneric language-expression-name (language))

(defgeneric language-function-spec-type (language))
(defgeneric language-validate-function-spec (language function-spec))

(defgeneric language-command-table (language))


(defvar *lisp-language-debugging-instance*)

;; Major paging optimization
(defvar *known-debugger-languages* (make-array %%compiled-function-number-of-languages))

(defconstant %debugger-language-lisp 0)
(defconstant %debugger-language-fortran 1)
(defconstant %debugger-language-pascal 2)
(defconstant %debugger-language-prolog 3)
(defconstant %debugger-language-ada 4)
(defconstant %debugger-language-c 5)
(defconstant %debugger-language-hybrid 6)

(defprop function-language-index t si:debug-info)

(defsubst find-language-internal (function)
  (declare (values language-debugging-instance found-p))
  (let ((language-debugging-instance
	  (cond ((or (eq terminal-io tv:cold-load-stream)
		     *always-use-lisp-debugger*)
		 ;; Always use Lisp if we're in the cold-load stream
		 *lisp-language-debugging-instance*)
		((typep function :compiled-function)
		 (let ((language-index
			 (cca-language-index (compiled-function-cca function))))
		   (or (aref *known-debugger-languages* language-index)
		       ;; Very paging intensive, that's why we avoid it
		       (si:function-spec-get (function-name function)
					     'si:language-debug-data))))
		(t
		 ;;--- I don't know what to use for interpreted functions, so go with Lisp
		 (let ((index (second (assq 'function-language-index
					    (debugging-info function)))))
		       (and index (aref *known-debugger-languages* index)))))))
    (values (or language-debugging-instance *lisp-language-debugging-instance*)
	    (not (null language-debugging-instance)))))

(defun find-language-for-function (function)
  (find-language-internal function))

(defun find-language-for-frame (frame)
  (if (null frame)
      ;;--- If no frame (not in Debugger), assume Lisp
      *lisp-language-debugging-instance*
    (find-language-internal (frame-function frame))))

(defmacro with-language-for-frame ((frame &optional (language '*current-language*))
				   &body body)
  `(let ((,language (find-language-for-frame ,frame)))
     ,@body))


