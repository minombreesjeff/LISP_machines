;;; -*- Mode:Lisp; Package:Debugger; Base:8.; -*-
;;; Machine independent microcode error debugger interface subroutines
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFMETHOD (CONDITION-TYPE TRAP) () "Trap")

(DEFMETHOD (FUNCALL-IN-PROPER-ENVIRONMENT TRAP) (FUNCTION &REST ARGS)
  (VALUES-LIST (LEXPR-FUNCALL #'FUNCALL-IN-ERROR-ENVIRONMENT NIL NIL FUNCTION ARGS)))


(DEFFLAVOR UNBOUND-SYMBOL-TRAP () (TRANS-TRAP UNBOUND-SYMBOL))
(DEFFLAVOR UNDEFINED-FUNCTION-TRAP () (TRANS-TRAP UNDEFINED-FUNCTION))
(DEFFLAVOR UNDEFINED-PROLOG-PREDICATE-TRAP () (TRANS-TRAP UNDEFINED-PROLOG-PREDICATE))

(DEFFLAVOR UNBOUND-CLOSURE-VARIABLE-TRAP () (TRANS-TRAP UNBOUND-CLOSURE-VARIABLE))
(DEFFLAVOR UNBOUND-INSTANCE-VARIABLE-TRAP (INSTANCE) (TRANS-TRAP UNBOUND-INSTANCE-VARIABLE))

(DEFFLAVOR BAD-DATA-TYPE-IN-MEMORY-TRAP () (TRANS-TRAP BAD-DATA-TYPE-IN-MEMORY))

;;; This function, referenced by DECODE-BAD-DATA-TYPE-TRAP, is defined in the Prolog system
;;; It can't be reached unless Prolog is loaded, when the SYS:PROLOG-PREDICATE-STRUCTURE
;;;  structure is defined
(COMPILER:FUNCTION-DEFINED 'DECODE-NULL-PROLOG-PREDICATE-TRAP)

;;; Unbound variable, undefined function, and garbage in memory.
(DEFUN DECODE-BAD-DATA-TYPE-TRAP (VMA)
  (DECLARE (VALUES FLAVOR INIT-ARGS UNBOUND-SLOT-P))
  ;; Note:  In the case of an unbound slot in CLOS, this returns the instance, slot
  ;; name, and a third value of T.
  (LET ((REAL-VMA (LOCATE-IN-ERROR-ENVIRONMENT VMA))
	(TRAP-FLAVOR NIL)
	(SYMBOL NIL)
	(INSTANCE NIL)
	TYPE LOCATIVE)
    (WHEN (= (%P-DATA-TYPE REAL-VMA) DTP-NULL)
      (MULTIPLE-VALUE (SYMBOL TYPE)
	(COMPILER:DISASSEMBLE-DECODE-LOCATIVE REAL-VMA))
      (SELECTQ TYPE
	(:VARIABLE (SETQ TRAP-FLAVOR 'UNBOUND-SYMBOL-TRAP))
	(:FUNCTION (SETQ TRAP-FLAVOR 'UNDEFINED-FUNCTION-TRAP))
	(OTHERWISE
	 (SETQ LOCATIVE (%P-CONTENTS-AS-LOCATIVE REAL-VMA)
	       SYMBOL (%FIND-STRUCTURE-HEADER LOCATIVE))
	 (WHEN (EQL (%MAKE-POINTER DTP-LOCATIVE SYMBOL) LOCATIVE)
	   (COND ((SYMBOLP SYMBOL)
		  ;; An unbound external value cell of a variable
		  (LET ((OBJECT (%FIND-STRUCTURE-HEADER REAL-VMA)))
		    (COND ((INSTANCEP OBJECT)
			   (IF (CLOS-INSTANCE-P OBJECT)
			       (RETURN-FROM DECODE-BAD-DATA-TYPE-TRAP
				 (VALUES OBJECT SYMBOL :INSTANCE))
			       (SETQ TRAP-FLAVOR 'UNBOUND-INSTANCE-VARIABLE-TRAP
				     INSTANCE OBJECT)))
			  ((TYPEP OBJECT 'CLOS-INTERNALS::CLASS-SLOTS-VECTOR)
			   (RETURN-FROM DECODE-BAD-DATA-TYPE-TRAP
			     (VALUES OBJECT SYMBOL :CLASS)))
			  (T
			   (SETQ TRAP-FLAVOR 'UNBOUND-CLOSURE-VARIABLE-TRAP)))))
		 ((AND (LISTP SYMBOL)
		       (= (%P-DATA-TYPE SYMBOL) DTP-LIST)	;(LISTP (CAR SYMBOL))
		       (= (%P-DATA-TYPE (CAR SYMBOL)) DTP-SYMBOL)	;but carefully
		       (MEMQ (CAAR SYMBOL) FLAVOR::*FDEFINABLE-METHOD-TYPES*))
		  ;; A flavor method-holder, which COMPILER:DISASSEMBLE-DECODE-LOCATIVE
		  ;; doesn't understand (for some reason).
		  (SETQ TRAP-FLAVOR 'UNDEFINED-FUNCTION-TRAP
			SYMBOL (FLAVOR::METHOD-HOLDER-FUNCTION-SPEC SYMBOL)))
		 ((AND (GET 'SYS:PROLOG-PREDICATE-STRUCTURE 'SI:DEFSTRUCT-DESCRIPTION)
		       (SI:TYPEP-STRUCTURE SYMBOL 'SYS:PROLOG-PREDICATE-STRUCTURE))
		  (MULTIPLE-VALUE (TRAP-FLAVOR SYMBOL)
		    ;; see COMPILER:FUNCTION-DEFINED comment above
		    (DECODE-NULL-PROLOG-PREDICATE-TRAP VMA SYMBOL))))))))
    (COND ((NULL TRAP-FLAVOR)
	   (VALUES 'BAD-DATA-TYPE-IN-MEMORY-TRAP `(:ADDRESS ,VMA)))
	  ((EQ TRAP-FLAVOR 'UNBOUND-INSTANCE-VARIABLE-TRAP)
	   (VALUES TRAP-FLAVOR `(:VARIABLE-NAME ,SYMBOL :INSTANCE ,INSTANCE)))
	  ((EQ TRAP-FLAVOR 'UNBOUND-CLOSURE-VARIABLE-TRAP)
	   (VALUES 'UNBOUND-CLOSURE-VARIABLE-TRAP
		   `(:VARIABLE-NAME ,SYMBOL
		     :ADDRESS ,(%MAKE-POINTER DTP-LOCATIVE VMA))))
	  ((MEMQ TRAP-FLAVOR '(UNDEFINED-FUNCTION-TRAP UNDEFINED-PROLOG-PREDICATE-TRAP))
	   (VALUES TRAP-FLAVOR `(:FUNCTION-NAME ,SYMBOL)))
	  (T
	   (VALUES TRAP-FLAVOR `(:VARIABLE-NAME ,SYMBOL))))))

(DEFFLAVOR VIRTUAL-MEMORY-OVERFLOW () (TRAP DEBUGGER-CONDITION))	;Not ERRORP

(DEFMETHOD (REPORT VIRTUAL-MEMORY-OVERFLOW) (STREAM)
  (FORMAT STREAM "You've used up all available virtual memory!~%"))

;;; Call this when it is apparent that some hacker set things up wrong.
;;;--- There has got to be a better way!
(DEFUN BAD-HACKER (&REST ARGS)
  (FORMAT T "~2%Internal error in the debugger:~%")
  (DO AL ARGS (CDR AL) (NULL AL) (PRINC (CAR AL)) (TYO #\SP))
  (TERPRI) (TERPRI)
  (BREAK GET-HELP))
