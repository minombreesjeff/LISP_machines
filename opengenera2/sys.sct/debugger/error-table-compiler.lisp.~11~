;;; -*- Mode: Lisp; Syntax: Zetalisp; Package: Debugger; Base: 10; -*-

;;; Compiler for I-machine error tables
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Support for Rev1 Ivory removed 7/12/89 by DLA, since all Rev1 MacIvories will be
;; field upgraded to Rev2 for Genera 7.5.  Genera 7.5 will probably not include
;; support for Rev3 either, but it is needed now for internal testing.
;; Support for Rev4 added 11/2/89.
;; Support for Rev3 commented out 9/11/90 by Kaufman.
;; Support for Rev5 (VLM) added 2/11/93 by SWM, PTW, and Palter.
(DEFVAR *STANDARD-ERROR-TABLE-VERSIONS* '(#|1|# 2 #|3|# 4 5))
(DEFVAR *ERROR-TABLE-FILE-TEMPLATE* "SYS:I-SYS;REV~D-ERROR-TABLE.LISP")
(DEFVAR *TRAP-DISPATCH-TABLE-FILE*  "SYS:I-SYS;TRAP-DISPATCH-TABLE.IBIN")
(DEFVAR *DEBUGGER-PACKAGE* (CL:FIND-PACKAGE "DEBUGGER"))

(DEFUN COMPILE-ERROR-TABLES (&KEY (VERSIONS *STANDARD-ERROR-TABLE-VERSIONS*)
				  (OUTPUT-FILE *TRAP-DISPATCH-TABLE-FILE*))
  (SYS:DUMP-FORMS-TO-FILE OUTPUT-FILE
    (MULTIPLE-VALUE-BIND (DISPATCH-TABLES TRAP-ON-EXIT-MICROSTATES VERSIONS)
	(APPLY #'ASSEMBLE-DISPATCH-TABLES VERSIONS)
      `((SETQ *TRAP-DISPATCH-TABLES* ',DISPATCH-TABLES
	      *TRAP-ON-EXIT-MICROSTATES* ',TRAP-ON-EXIT-MICROSTATES
	      *TRAP-DISPATCH-TABLE-VERSIONS* ',VERSIONS)))
    (MULTIPLE-VALUE-BIND (MAJOR MINOR)
	(SCT:GET-SYSTEM-VERSION)
      `(:PACKAGE :DEBUGGER
	:COMPILE-DATA ,(LIST USER-ID (STRING SI:LOCAL-HOST) (TIME:GET-UNIVERSAL-TIME)
			     MAJOR MINOR)))))

(DEFUN ASSEMBLE-DISPATCH-TABLES (&REST VERSIONS)
  (LOOP WITH PACKAGE = *DEBUGGER-PACKAGE*
	WITH RANK = (1+ (CL:REDUCE #'MAX VERSIONS))
	WITH DISPATCH-TABLES = (MAKE-ARRAY RANK)
	WITH MICROSTATES = (MAKE-ARRAY RANK)
	WITH FILE-VERSIONS = (MAKE-ARRAY RANK)
	FOR VERSION IN VERSIONS
	AS TABLE = (MAKE-ARRAY 1_11. :INITIAL-VALUE 0)
	DO (SETF (AREF DISPATCH-TABLES VERSION) TABLE)
	   (MULTIPLE-VALUE-BIND (ENTRIES FILE-VERSION)
	       (WITH-OPEN-FILE (STREAM (FORMAT NIL *ERROR-TABLE-FILE-TEMPLATE* VERSION))
		 (VALUES (READ STREAM)
			 (SEND (SEND STREAM :TRUENAME) :VERSION)))
	     (SETF (AREF FILE-VERSIONS VERSION) FILE-VERSION)
	     (LOOP FOR INDEX FROM 0
		   FOR ENTRY IN ENTRIES
		   WHEN ENTRY
		     DO (SETF (AREF TABLE INDEX) (ASSEMBLE-ERROR-TABLE-ENTRY ENTRY))
			(WHEN (EQ (CAR ENTRY) 'TRAP-ON-EXIT)
			  (SETF (AREF MICROSTATES VERSION) INDEX))))
	FINALLY (RETURN (VALUES DISPATCH-TABLES MICROSTATES FILE-VERSIONS))))

(DEFUN ASSEMBLE-ERROR-TABLE-ENTRY (ENTRY &OPTIONAL ASSEMBLY &AUX (VMA-VALID 0))
  (LOOP WITH EXPANSION = (APPLY (GET (CAR ENTRY) 'ERROR-TABLE-ENTRY-EXPANDER) (CDR ENTRY))
	FOR CONDITION IN (IF (EQ (CAR EXPANSION) 'OR)
			     (CDR EXPANSION)
			     (LIST EXPANSION))
	AS CONDITION-NAME = (CAR CONDITION)
	WHEN (MEMQ CONDITION-NAME *VMA-VALID-CONDITIONS*)
	  DO (SETQ VMA-VALID 1)
	DO (MULTIPLE-VALUE-BIND (CLASS OP1 OP2)
	       (CL:CASE CONDITION-NAME
		 (WRONG-TYPE-ARGUMENT (VALUES %TRAP-CLASS-WRONG-TYPE-ARGUMENT
					      (ENCODE-ARGUMENT-NUMBER (CADR CONDITION))
					      (ENCODE-DATA-TYPE-SET (CADDR CONDITION))))
		 (TRAP-ON-EXIT        (VALUES %TRAP-CLASS-TRAP-ON-EXIT 0 0))
		 (OTHERWISE           (VALUES %TRAP-CLASS-MISC-CONDITION
					      0
					      (ENCODE-MISC-CONDITION CONDITION-NAME))))
	     (PUSH (DPBS CLASS %%TRAP-DESC-CONDITION-1-CLASS
			 OP1   %%TRAP-DESC-CONDITION-1-OP1
			 OP2   %%TRAP-DESC-CONDITION-1-OP2
			 0)
		   ASSEMBLY)))
  ;; Canonicalize the order so that trap merging always sees the same order.
  ;; Sort misc traps first, since they're more likely to want to do special things
  ;; during trap decoding.
  (LOOP WITH RESULT = 0
	FOR CONDITION IN (SORT ASSEMBLY #'>)
	DO (SETQ RESULT (LOGIOR (LSH RESULT 10.) CONDITION))
	FINALLY (RETURN (%LOGDPB VMA-VALID %%TRAP-DESC-VMA-VALID RESULT))))

;; This maps wrong-type-argument OP2 into data-type sets.
;; (This is coded into HANDLE-WRONG-TYPE-ARGUMENT.)
(DEFCONSTANT *TRAP-DATA-TYPE-SETS*
  #.(CL:VECTOR
      '(DTP-FIXNUM)							;Fixnum
      '(DTP-INSTANCE DTP-LIST-INSTANCE DTP-STRING-INSTANCE DTP-ARRAY-INSTANCE)	;Instance
      '(DTP-LOCATIVE)							;Locative
      '(DTP-ARRAY DTP-ARRAY-INSTANCE DTP-STRING DTP-STRING-INSTANCE)	;Array
      '(DTP-FIXNUM DTP-SMALL-RATIO DTP-SINGLE-FLOAT DTP-DOUBLE-FLOAT	;Number
       DTP-BIGNUM DTP-BIG-RATIO DTP-COMPLEX DTP-SPARE-NUMBER)
      '(DTP-LIST DTP-LOCATIVE)						;Real List or Locative
      '(DTP-NIL DTP-LOCATIVE DTP-LIST DTP-LIST-INSTANCE)		;List, Locative or NIL
      '(DTP-CHARACTER)							;Character
      '(DTP-NIL DTP-LIST DTP-LIST-INSTANCE)				;List or NIL
      '(DTP-EVEN-PC DTP-ODD-PC)						;PC
      '(DTP-LIST DTP-LIST-INSTANCE DTP-LOCATIVE)			;Cons or Locative
      ))

(DEFUN ENCODE-ARGUMENT-NUMBER (ARG)
  (OR (CDR (CL:ASSOC ARG '((INDEX . 0) (1 . 1) (2 . 2) (3 . 3))))
      (ERROR "Unsupported argument number ~S" ARG)))

(DEFUN ENCODE-DATA-TYPE-SET (SET)
  (OR (CL:POSITION SET *TRAP-DATA-TYPE-SETS*
		   :TEST #'(LAMBDA (X Y)
			     (AND (CL:SUBSETP X Y)
				  (CL:SUBSETP Y X))))
      (ERROR "Unsupported data-type set ~S" SET)))

(DEFUN ENCODE-MISC-CONDITION (CONDITION)
  (LET ((SYM (INTERN-SOFT (STRING-APPEND "%TRAP-" CONDITION) *DEBUGGER-PACKAGE*)))
    (IF (CL:MEMBER SYM *TRAP-MISC-CONDITIONS*)
	(SYMEVAL SYM)
	(ERROR "Unsupported condition ~S" CONDITION))))

#|How to make new tables|

;; Compile ERROR-TABLE-EXPANDERS
;; Compile ERROR-TABLE-COMPILER
;; Run this form, perhaps redirecting output until you are sure
(compile-error-tables :output-file "J:>ptw>patches>trap-dispatch-table.ibin")
;; To patch in the changes (in a patch file)
;; Load the resulting file
(load "J:>ptw>patches>trap-dispatch-table.ibin")
;; Run this form to install the new table
(initialize-error-trap-dispatch)

||#
