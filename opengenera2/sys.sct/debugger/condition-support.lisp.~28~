;;; -*- Mode: Lisp; Package: Debugger; Base: 8 -*-

;;; New Condition Signalling System.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; "Use what pathname instead?"
;;;		-- F. P. Error

;;; Signalling conditions.

(DEFUN SIGNAL (FLAVOR &REST INIT-OPTIONS)
  (DECLARE (DBG:ERROR-REPORTER))
  ;; In theory, if you are on the AUX stack you should never get this
  ;; far.  If you do anyway, don't try to bind a special variable.
  (COMPILER:%ERROR-WHEN (SI:%AUXILIARY-STACK-P)
    (CL:APPLY #'WIRED-FERROR
	      :PROCEEDABLE-HALT 
	      #+3600 "Signal ~s with args ~s on auxiliary stack"
	      #+IMACH "Signal ~s with args ~s in extra stack mode"
	      FLAVOR
	      INIT-OPTIONS)
    (RETURN-FROM SIGNAL NIL))
  ;; avoid consing in temporary areas, etc.
  (LET ((DEFAULT-CONS-AREA WORKING-STORAGE-AREA))
    (SIGNAL-CONDITION (GET-CONDITION FLAVOR INIT-OPTIONS) T)))

(FLAVOR::DEFINE-MAKE-INSTANCE-FUNCTION SIGNAL)

(DEFUN FSIGNAL (FORMAT-STRING &REST FORMAT-ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  (SIGNAL 'PROCEEDABLE-FERROR
	  ':FORMAT-STRING FORMAT-STRING
	  ':FORMAT-ARGS (COPYLIST FORMAT-ARGS)))

;;; Simultaneously compatible with Maclisp, Zetalisp, and Common Lisp
;;; Args can be any of:
;;;	format-string format-args...				Common Lisp
;;;	condition-name format-string format-args...		extended Common Lisp
;;;	condition-name init-keywords...				Zetalisp
;;;	condition-object					Zetalisp
;;;	symbol-or-string [object] [interrupt]			Maclisp
(DEFUN ERROR (FORMAT-STRING &REST ARGS)		;Common Lisp args (had to pick one choice)
  (DECLARE (DBG:ERROR-REPORTER))
  ;; In theory, if you are on the AUX stack you should never get this
  ;; far.  If you do anyway, don't try to bind a special variable.
  (COMPILER:%ERROR-WHEN (SI:%AUXILIARY-STACK-P)
    (CL:APPLY #'WIRED-FERROR
	      :FATAL
	      #+3600 "Error ~s with args ~s on auxiliary stack"
	      #+IMACH "Error ~s with args ~s in extra stack mode"
	      FORMAT-STRING
	      ARGS))
  (LET ((CONDITION
	  (COND ((AND (SYMBOLP FORMAT-STRING)
		      (FLAVOR:FIND-FLAVOR FORMAT-STRING NIL))
		 (GET-CONDITION FORMAT-STRING
				(IF (SYMBOLP (FIRST ARGS))
				    ARGS	;init-keywords
				    `(:FORMAT-STRING ,(FIRST ARGS)
				      :FORMAT-ARGS ,(COPYLIST (CL:REST ARGS))))))
		((STRINGP FORMAT-STRING)
		 (WHEN (AND (CDR ARGS) (NULL (CDDR ARGS))
			    (NOT (STRING-SEARCH-CHAR #/~ FORMAT-STRING)))
		   (RETURN-FROM ERROR
		     (LEXPR-FUNCALL #'MACLISP-COMPATIBILITY-ERROR FORMAT-STRING ARGS)))
		 (MAKE-CONDITION 'SYS:FATAL-ERROR
				 :FORMAT-STRING FORMAT-STRING :FORMAT-ARGS (COPYLIST ARGS)))
		((AND (SYMBOLP FORMAT-STRING) (NULL (CDDR ARGS)))
		 (RETURN-FROM ERROR
		   (LEXPR-FUNCALL #'MACLISP-COMPATIBILITY-ERROR FORMAT-STRING ARGS)))
		((TYPEP FORMAT-STRING 'CONDITION)
		 (GET-CONDITION FORMAT-STRING ARGS))
		(T
		 (MAKE-CONDITION 'FERROR
				 :FORMAT-STRING
"Invalid arguments to the ERROR function: ~S
Valid arguments are any of:
   format-string &rest format-args...                   [Common Lisp]
   condition-name format-string &rest format-args...    [extended Common Lisp]
   condition-name &key init-keywords...                 [Zetalisp]
   condition-object                                     [Zetalisp]
   symbol-or-string &optional object interrupt          [Maclisp]"
				 :FORMAT-ARGS (LIST (COPYLIST (CONS FORMAT-STRING ARGS))))))))
    (WHEN (SYMBOLP FORMAT-STRING)
      (UNLESS (TYPEP CONDITION 'CONDITION)
	(SETQ CONDITION (MAKE-CONDITION 'FERROR
					:FORMAT-STRING
"Invalid arguments to the ERROR function: ~S
~S is the name of some flavor other than a condition flavor."
					:FORMAT-ARGS
					  (LIST (COPYLIST (CONS FORMAT-STRING ARGS))
						FORMAT-STRING)))))
    (SET-PROCEED-TYPES CONDITION NIL)
    (SIGNAL-CONDITION CONDITION NIL)))

(DEFUN (ERROR COMPILER:STYLE-CHECKER) (FORM)
  (LET ((FLAVOR (CADR FORM))
	(KEYWORD (CADDR FORM))
	(INIT-OPTIONS (CDDR FORM)))
    ;; If it's the Maclisp-compatibility form, warn
    (COND ((AND (NULL (CDDR INIT-OPTIONS))
		(OR (AND (STRINGP FLAVOR)
			 (CDR INIT-OPTIONS)
			 (NOT (STRING-SEARCH-CHAR #/~ FLAVOR)))
		    (AND (LISTP FLAVOR)
			 (EQ (CAR FLAVOR) 'QUOTE)
			 (SYMBOLP (CADR FLAVOR))
			 (STRING-SEARCH-CHAR #\SPACE (CADR FLAVOR)))))
	   (COMPILER:WARN '(:OBSOLETE T) "~S is an obsolete usage of ERROR,
supported only for MacLisp compatibility." FORM))
	  ;; If it's the condition-name init-options... form, check the
	  ;; condition-name and the init-options
	  ((AND (LISTP FLAVOR)
		(EQ (CAR FLAVOR) 'QUOTE)
		(SYMBOLP (CADR FLAVOR)))
	   (IF (FLAVOR:FIND-FLAVOR (CADR FLAVOR) NIL 'COMPILE)
	       (WHEN (OR (KEYWORDP KEYWORD)
			 (AND (LISTP KEYWORD)
			      (EQ (CAR KEYWORD) 'QUOTE)
			      (SYMBOLP (CADR KEYWORD))))
		 (FLAVOR:CHECK-INIT-KEYWORDS FLAVOR INIT-OPTIONS))
	       ;; It's the condition-name init-options... form or
	       ;; the condition-name format-string format-args... form
	       (COMPILER:WARN-1 'COMPILER:UNKNOWN-FLAVOR-NAME-WARNING
				:FLAVOR-NAME (CADR FLAVOR)
				:BAD-STYLE T :DELAYED T))))))

(DEFUN FERROR (FORMAT-STRING &REST FORMAT-ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  ;; Compatibility for old FERROR
  (OR FORMAT-STRING (SETQ FORMAT-STRING (POP FORMAT-ARGS)))
  (SI:CHECK-STRING-ARG FORMAT-STRING)
  (ERROR 'FERROR ':FORMAT-STRING FORMAT-STRING ':FORMAT-ARGS (COPYLIST FORMAT-ARGS)))

(DEFUN PARSE-FERROR (FORMAT-STRING &REST FORMAT-ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  (SI:CHECK-STRING-ARG FORMAT-STRING)
  (ERROR 'PARSE-FERROR ':FORMAT-STRING FORMAT-STRING ':FORMAT-ARGS (COPYLIST FORMAT-ARGS)))

(DEFUN GET-CONDITION (FLAVOR INIT-OPTIONS)
  (ARGUMENT-TYPECASE FLAVOR
    (:SYMBOL
     (LEXPR-FUNCALL #'MAKE-CONDITION FLAVOR INIT-OPTIONS))
    (CONDITION 
     (UNLESS (NULL INIT-OPTIONS)
       (FSIGNAL "Init-options ~S cannot apply to existing condition ~S."
		INIT-OPTIONS FLAVOR))
     FLAVOR)))

(DEFRESOURCE STACK-FRAME-ARRAY ()
  :CONSTRUCTOR (MAKE-ARRAY 1000. :FILL-POINTER 0 :LEADER-LENGTH 2)
  :INITIALIZER (PROGN (SETF (FILL-POINTER OBJECT) 0)
		      (SETF (ARRAY-LEADER OBJECT 1) NIL))
  :CLEAR-FOR-GC T)

(DEFUN WITH-STACK-FRAME-ARRAY-SETUP (PRESENT-FRAME)
  (LOOP WITH INNERMOST-FRAME = PRESENT-FRAME
	FOR FRAME FIRST INNERMOST-FRAME THEN (FRAME-PREVIOUS-ACTIVE-FRAME FRAME)
	WHILE FRAME
	FINALLY 
	  (RETURN (VALUES INNERMOST-FRAME INNERMOST-FRAME INNERMOST-FRAME))))

(DEFUN INTERESTING-ACTIVE-FRAME-FUNCTION-AND-ARG-NUMBER (PLACE-NAME BAD-VALUE FRAME-POINTER)
  ;; We need the stack-frame-array set up for FRAME-ARG-VALUE to win
  (WITH-STACK-FRAME-ARRAY (FRAME-POINTER)
    (LET* ((FRAME (FRAME-OUT-TO-INTERESTING-ACTIVE-FRAME 
		    (FRAME-PREVIOUS-ACTIVE-FRAME FRAME-POINTER)))
	   (FUNCTION (FRAME-FUNCTION FRAME))
	   ;; Determine whether this seems to be an argument, to make the error message nicer
	   (ARGNUM
	     (TYPECASE FUNCTION
	       (:COMPILED-FUNCTION
		 #+3600
		 (LOOP FOR ELEM IN (CDR (ASSQ ':LOCAL-MAP (DEBUGGING-INFO FUNCTION)))
		       WHEN (EQ (CDR ELEM) PLACE-NAME)
			 WHEN (EQ (FRAME-ARG-VALUE FRAME (CAR ELEM) NIL T) BAD-VALUE)
			   RETURN (1+ (CAR ELEM)))
		 #+IMACH
		 (LET* ((NARGS (FRAME-NUMBER-OF-ARGS FRAME))
			(ARG-NAMES (ILC:CACHE-LOCAL-NAMES-FOR-DEBUGGER FRAME NIL)))
		   (LOOP FOR I BELOW NARGS
			 WHEN (EQ (AREF ARG-NAMES (+ I (SYS:DEFSTORAGE-SIZE STACK-FRAME)))
				  PLACE-NAME)
			   WHEN (EQ (FRAME-ARG-VALUE FRAME I NIL T) BAD-VALUE)
			     RETURN (1+ I))))
	       (:LIST
		 (LOOP WITH I = 0
		       FOR ELEM IN (ARGLIST FUNCTION T)
		       UNTIL (EQ ELEM '&AUX)
		       DO (UNLESS (MEMQ ELEM LAMBDA-LIST-KEYWORDS)
			    (INCF I)
			    (WHEN (EQ PLACE-NAME (IF (ATOM ELEM) ELEM (CAR ELEM)))
			      (WHEN (EQ (FRAME-ARG-VALUE FRAME (1- I) NIL T) BAD-VALUE)
				(RETURN I)))))))))
      (VALUES FUNCTION ARGNUM))))

(DEFUN CHECK-ARG-1 (ARGNAME OLD-VALUE DESCRIPTION)
  (DECLARE (DBG:ERROR-REPORTER))
  (WHEN (AND (SYMBOLP DESCRIPTION)
	     (GET DESCRIPTION 'SI:TYPE-NAME))
    (SETQ DESCRIPTION (GET DESCRIPTION 'SI:TYPE-NAME)))
  (CHECK-ARG-2 'CHECK-ARG ARGNAME OLD-VALUE :DESCRIPTION DESCRIPTION))

(DEFUN CHECK-ARG-2 (FLAVOR ARGNAME OLD-VALUE TYPE-KEY TYPE-VAL)
  (DECLARE (DBG:ERROR-REPORTER))
  (MULTIPLE-VALUE-BIND (FUNCTION ARGNUM)
      (INTERESTING-ACTIVE-FRAME-FUNCTION-AND-ARG-NUMBER ARGNAME OLD-VALUE 
							(FRAME-PREVIOUS-ACTIVE-FRAME
							  (%STACK-FRAME-POINTER)))
    (SIGNAL-PROCEED-CASE ((VAL1) FLAVOR
			  ':FUNCTION FUNCTION
			  ':ARG-NAME ARGNAME
			  ':OLD-VALUE OLD-VALUE
			  TYPE-KEY TYPE-VAL
			  ':ARG-NUMBER ARGNUM)
      (:ARGUMENT-VALUE VAL1))))

(DEFUN ARGUMENT-TYPECASE-1 (ARGNAME OLD-VALUE TYPES)
  (DECLARE (DBG:ERROR-REPORTER))
  (CHECK-ARG-2 'ARGUMENT-TYPECASE ARGNAME OLD-VALUE :TYPES TYPES))

;Find frame with error, innermost visible frame, and innermost interesting frame
;Lots of error checking to try to help the user whose condition handling code is broken
(DEFUN WITH-ERRING-FRAME-SETUP (CONDITION)
  (OR (TYPEP CONDITION 'CONDITION)
      (FERROR "~S is not a condition" CONDITION))
  (OR (EQ (CONDITION-STATUS CONDITION) ':SIGNALLING)
      (FERROR "~S is not being signalled now;~@
	       was WITH-ERRING-FRAME used outside of a CONDITION-BIND handler?" CONDITION))
  (LOOP FOR FRAME FIRST (%STACK-FRAME-POINTER) THEN (FRAME-PREVIOUS-ACTIVE-FRAME FRAME)
	WHILE FRAME
	AS FUNCTION = (FUNCTION-NAME (FRAME-FUNCTION FRAME))
	UNTIL (AND (LISTP FUNCTION)
		   (EQ (FLAVOR:METHOD-TYPE FUNCTION) 'FLAVOR:COMBINED)
		   (EQ (FLAVOR:METHOD-GENERIC FUNCTION) 'SIGNAL-CONDITION))
	FINALLY 
	  (OR FRAME
	      (FERROR "No condition-signalling frame found in this stack"))
	  (LET ((COND (FRAME-SELF-VALUE FRAME T)))
	    (OR (EQ CONDITION COND)
		(FERROR "~S is being signalled now, not ~S" COND CONDITION)))
	  (LET ((INNERMOST-VISIBLE-FRAME FRAME))
	    (MULTIPLE-VALUE-BIND (ERRING-FRAME INNERMOST-INTERESTING-FRAME)
		(CURRENT-AND-INNERMOST-FRAMES-FOR-DEBUGGER CONDITION FRAME)
	      (RETURN (VALUES ERRING-FRAME
			      INNERMOST-VISIBLE-FRAME
			      INNERMOST-INTERESTING-FRAME))))))

;; These can be called inside a condition handler to see if some
;; bound or default handler outside of this is willing to handle the error.
(DEFUN CONDITION-HANDLED-P (CONDITION)
  (DO-NAMED CONDITION-HANDLED-P
      ((L SIGNALLER-HANDLER-LISTS (CDR L))
       RESULT)
      ((EQ (CAR L) '*INTERACTIVE-HANDLERS*) RESULT)
    (DO ((H (IF (EQ L SIGNALLER-HANDLER-LISTS)
		(CDR SIGNALLER-HANDLER-LIST)
		(SYMEVAL (CAR L)))
	    (CDR H)))
	((NULL H))
      (SELECTQ (SEND (CAR H) ':HANDLE-CONDITION-P CONDITION)
	((T) (RETURN-FROM CONDITION-HANDLED-P T))
	((:MAYBE) (SETQ RESULT ':MAYBE))))))

;;; These macros are known about specially by the compiler.
;;; It arranges for the body code to be compiled in a separate interrval.

(SI:DEFINE-SPECIAL-FORM COMPILER:%ERROR-UNLESS (FORM &BODY RECOVERY &ENVIRONMENT ENV)
  (DECLARE LT:(ARG-TEMPLATE COND EVAL . BODY))
  :MACRO-EXPANDER
  ENV
  `(OR ,FORM (PROGN ,@RECOVERY))
  :INTERPRETER
  (COMPILER:%ERROR-UNLESS (EVAL FORM ENV)
    (SI:EVAL-BODY RECOVERY ENV)))

(SI:DEFINE-SPECIAL-FORM COMPILER:%ERROR-WHEN (FORM &BODY RECOVERY &ENVIRONMENT ENV)
  (DECLARE LT:(ARG-TEMPLATE COND TEST . BODY))
  :MACRO-EXPANDER
  ENV
  `(AND ,FORM (PROGN ,@RECOVERY))
  :INTERPRETER
  (COMPILER:%ERROR-WHEN (EVAL FORM ENV)
    (SI:EVAL-BODY RECOVERY ENV)))

(SI:DEFINE-SPECIAL-FORM COMPILER:%ERROR-UNLESS-RETRY (FORM &BODY RECOVERY &ENVIRONMENT ENV)
  (DECLARE LT:(ARG-TEMPLATE LOOP EVAL (REPEAT EFFECT)))
  :MACRO-EXPANDER
  ENV
  (LET ((NAME (GENSYM)))
    `(BLOCK ,NAME
       (TAGBODY
	 ,NAME
	 (LET ((,NAME ,FORM))
	   (WHEN ,NAME (RETURN-FROM ,NAME ,NAME)))
	 (PROGN ,@RECOVERY)
	 (GO ,NAME))))
  :INTERPRETER
  (COMPILER:%ERROR-UNLESS-RETRY (EVAL FORM ENV)
    (LET ((RECOVERY RECOVERY))
      (SI:EVAL-BODY RECOVERY ENV))))

(SI:DEFINE-SPECIAL-FORM COMPILER:%ERROR-WHEN-RETRY (FORM &BODY RECOVERY &ENVIRONMENT ENV)
  (DECLARE LT:(ARG-TEMPLATE LOOP TEST (REPEAT EFFECT)))
  :MACRO-EXPANDER
  ENV
  (LET ((NAME (GENSYM)))
    `(BLOCK ,NAME
       (TAGBODY
	 ,NAME
	 (UNLESS ,FORM (RETURN-FROM ,NAME NIL))
	 (PROGN ,@RECOVERY)
	 (GO ,NAME))))
  :INTERPRETER
  (COMPILER:%ERROR-UNLESS-RETRY (EVAL FORM ENV)
    (LET ((RECOVERY RECOVERY))
      (SI:EVAL-BODY RECOVERY ENV))))


;; List of functions which have breakons set.
(DEFVAR BREAKON-FUNCTIONS NIL)

(SCL:DEFSTRUCT (BREAKON-INFO (:TYPE LIST) :NAMED (:CONC-NAME BREAKON-))
  (FUNCTION NIL)
  (CONDITIONS NIL)
  (LOCK (PROCESS:MAKE-LOCK "BREAKON")))

;; Allocate BREAKON-INFO for a specifed function
;; (with no conditions yet) if it doesn't have one already.
(DEFUN BREAKON-INIT (FUNCTION)
  (LET ((DEFAULT-CONS-AREA BACKGROUND-CONS-AREA))
    (OR (SCL:FIND FUNCTION BREAKON-FUNCTIONS :KEY #'BREAKON-FUNCTION)
	(LET ((INFO (MAKE-BREAKON-INFO :FUNCTION FUNCTION)))
	  (PUSH INFO BREAKON-FUNCTIONS)
	  INFO))))

;; must be called with BREAKON-LOCK held... 
(DEFUN COMPOSE-BREAKON (INFO)
  (LET* ((FUNCTION (BREAKON-FUNCTION INFO))
	 (SPEC1 (SI:UNENCAPSULATE-FUNCTION-SPEC FUNCTION 'BREAKON)))
    (IF (NULL (BREAKON-CONDITIONS INFO))
	(LET ((OLDDEF (FDEFINITION (SI:UNENCAPSULATE-FUNCTION-SPEC SPEC1 '(BREAKON)))))
	  (FDEFINE SPEC1 OLDDEF)
	  (PROCESS:WITH-NO-OTHER-PROCESSES
	    (SETF BREAKON-FUNCTIONS (SCL:DELETE INFO BREAKON-FUNCTIONS))))
	(SI:ENCAPSULATE SPEC1 FUNCTION 'BREAKON
			`(BREAKON-THIS-TIME (OR ,@(BREAKON-CONDITIONS INFO))
					    ,SI:ENCAPSULATED-FUNCTION
					    ARGLIST)))))

(DEFUN BREAKON (&OPTIONAL FUNCTION (CONDITION T))
  (IF FUNCTION
      (LET ((INFO (BREAKON-INIT FUNCTION)))
	(PROCESS:WITH-LOCK ((BREAKON-LOCK INFO))
	  (UNLESS (SCL:MEMBER CONDITION (BREAKON-CONDITIONS INFO) :TEST #'EQUAL)
	    (PUSH CONDITION (BREAKON-CONDITIONS INFO))
	    (COMPOSE-BREAKON INFO)))
	FUNCTION)
      (LOOP FOR INFO IN BREAKON-FUNCTIONS
	    WHEN (BREAKON-CONDITIONS INFO)
	      COLLECT (BREAKON-FUNCTION INFO))))

(DEFUN UNBREAKON (&OPTIONAL FUNCTION (CONDITION T))
  (FLET ((DO-IT (INFO)
	   (PROCESS:WITH-LOCK ((BREAKON-LOCK INFO))
	     (LET ((OLD-CONDITIONS (BREAKON-CONDITIONS INFO)))
	       (IF (EQ CONDITION T)
		   (SETF (BREAKON-CONDITIONS INFO) NIL)
		   (DELETE CONDITION (BREAKON-CONDITIONS INFO)))
	       (UNLESS (EQUAL OLD-CONDITIONS (BREAKON-CONDITIONS INFO))
		 (COMPOSE-BREAKON INFO))))))
    (IF FUNCTION
	(DO-IT (BREAKON-INIT FUNCTION))
	(MAPC #'DO-IT BREAKON-FUNCTIONS))
    (SCL:MAP 'LIST #'BREAKON-FUNCTION BREAKON-FUNCTIONS)))

(DEFUN (BREAKON SI:ENCAPSULATION-GRIND-FUNCTION) (FUNCTION DEF WIDTH REAL-IO UNTYO-P)
  (IGNORE DEF WIDTH UNTYO-P)
  (LET ((INFO (SCL:FIND FUNCTION BREAKON-FUNCTIONS :KEY #'BREAKON-FUNCTION)))
    (IF INFO
	(CL:PPRINT `(BREAKON ,FUNCTION ,@(IF (EQUAL (BREAKON-CONDITIONS INFO) '(T))
					     NIL
					     (NCONS (CONS 'OR (BREAKON-CONDITIONS INFO)))))
		   REAL-IO)
	(CL::PPRINT `(BREAKON ,FUNCTION) REAL-IO))))




