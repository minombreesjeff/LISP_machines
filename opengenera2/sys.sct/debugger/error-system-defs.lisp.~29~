 ;;; -*- Mode: Lisp; Package: Debugger; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFVAR *CONDITION-HANDLER-LISTS*
	'(*BOUND-HANDLERS* *GLOBAL-HANDLERS* *DEFAULT-HANDLERS* *INTERACTIVE-HANDLERS*
			   *RESTART-HANDLERS*))

;; See also declaration in LDATA.
(SI:DECLARE-STORAGE-CATEGORY :VARIABLE *BOUND-HANDLERS* :SAFEGUARDED)
(DEFVAR-RESETTABLE *BOUND-HANDLERS* NIL)
(DEFVAR-RESETTABLE *DEFAULT-HANDLERS* NIL)
(DEFVAR-RESETTABLE *INTERACTIVE-HANDLERS* '(DEBUGGER-HANDLER))
(DEFVAR-RESETTABLE *RESTART-HANDLERS* NIL)
(DEFVAR *GLOBAL-HANDLERS* NIL)

;;; Some defs of the "debugger" referenced by LTRAP


;; On the A machine, this is taken from the stack group being examined.
;; On the L machine, this is the boundary of the debugger itself.
(defvar *innermost-visible-frame*)

;; This is the frame that "got" the error.  Usually the user doesn't want to
;; see the frames inside here.  Note that this is not necessarily an
;; "interesting" frame in the sense of not being part of the interpreter.
(defvar *innermost-interesting-frame*)

(defvar *frame*)
(defvar *current-frame*)
(defvar *previous-current-frame*)
(defvar-safeguarded *stack-frame-array*)

(defvar *current-language*)
(defvar *always-use-lisp-debugger* nil)

(defvar *error*)
(defvar *error-flag* (ncons nil))


(DEFVAR SIGNALLER-HANDLER-LISTS)
(DEFVAR SIGNALLER-HANDLER-LIST)
(DEFVAR TRACE-CONDITIONS-CONDITIONAL NIL
  "A conditional to control TRACE-CONDITIONS")
(DEFVAR-RESETTABLE TRACE-CONDITIONS NIL NIL
  "NIL, a list of conditions, or T to trap on all conditions")

(defvar-resettable trace-conditions-exceptions nil nil 
  "NIL or a list of conditions not to trap on")


#+imach (defvar *frame-array-index-cached-frame*)
#+imach (defvar *frame-array-index-cached-index*)

;; Like WITH-ERRING-FRAME, except that it doesn't need a condition
(DEFMACRO WITH-STACK-FRAME-ARRAY ((FRAME) &BODY BODY)
  `(USING-RESOURCE (*STACK-FRAME-ARRAY* STACK-FRAME-ARRAY)
     (LET #+IMACH ((*FRAME-ARRAY-INDEX-CACHED-FRAME* NIL)
		   (*FRAME-ARRAY-INDEX-CACHED-INDEX* NIL))
	  #+3600 ()
	(MULTIPLE-VALUE-BIND (*CURRENT-FRAME*
			      *INNERMOST-VISIBLE-FRAME*
			      *INNERMOST-INTERESTING-FRAME*)
	    (WITH-STACK-FRAME-ARRAY-SETUP ,FRAME)
	  ,@BODY))))

;This allows a CONDITION-BIND handler to find the frame to blame a
;a condition on, the same way the debugger does, and to use the debugger
;frame-accessing primitives.
(DEFMACRO WITH-ERRING-FRAME ((FRAME-VAR CONDITION) &BODY BODY)
  `(USING-RESOURCE (*STACK-FRAME-ARRAY* STACK-FRAME-ARRAY)
     (LET #+CADR ((*ERROR-SG* %CURRENT-STACK-GROUP))
	  #+IMACH ((*FRAME-ARRAY-INDEX-CACHED-FRAME* NIL)
		   (*FRAME-ARRAY-INDEX-CACHED-INDEX* NIL))
	  #+3600 ()
	(MULTIPLE-VALUE-BIND (,FRAME-VAR
			      *INNERMOST-VISIBLE-FRAME*
			      *INNERMOST-INTERESTING-FRAME*)
	    (WITH-ERRING-FRAME-SETUP ,CONDITION)
	  ,@BODY))))

(DEFSUBST ERRORP (THING)
  (TYPEP THING 'ERROR))



;;; Condition protocols

;;; Outside:  Users can do these operations.

(DEFGENERIC DOCUMENT-PROCEED-TYPE (CONDITION PROCEED-TYPE STREAM)
  (:METHOD-COMBINATION :CASE)
  (:COMPATIBLE-MESSAGE :DOCUMENT-PROCEED-TYPE))

(DEFGENERIC DOCUMENT-SPECIAL-COMMAND (CONDITION SPECIAL-COMMAND)
  (:METHOD-COMBINATION :CASE)
  (:COMPATIBLE-MESSAGE :DOCUMENT-SPECIAL-COMMAND))

(DEFGENERIC PROCEED (CONDITION PROCEED-TYPE &REST ARGS)
  (:METHOD-COMBINATION :CASE)
  (:COMPATIBLE-MESSAGE :PROCEED))

(DEFGENERIC PROCEED-TYPE-P (CONDITION PROCEED-TYPE)
  (:COMPATIBLE-MESSAGE :PROCEED-TYPE-P))

(DEFGENERIC PROCEED-TYPES (CONDITION)
  (:COMPATIBLE-MESSAGE :PROCEED-TYPES))

(DEFGENERIC REPORT (CONDITION STREAM)
  (:COMPATIBLE-MESSAGE :REPORT))

(DEFGENERIC REPORT-STRING (CONDITION)
  (:COMPATIBLE-MESSAGE :REPORT-STRING))

(DEFGENERIC SET-PROCEED-TYPES (CONDITION NEW-PROCEED-TYPES)
  (:COMPATIBLE-MESSAGE :SET-PROCEED-TYPES))

(DEFGENERIC SPECIAL-COMMAND-P (CONDITION SPECIAL-COMMAND)
  (:COMPATIBLE-MESSAGE :SPECIAL-COMMAND-P))

(DEFGENERIC SPECIAL-COMMANDS (CONDITION)
  (:COMPATIBLE-MESSAGE :SPECIAL-COMMANDS))


;;; Inside:  The system does them, the user can handle them.

(DEFGENERIC ANALYZE (CONDITION)
  (:COMPATIBLE-MESSAGE :ANALYZE))

(DEFGENERIC BUG-REPORT-DESCRIPTION (CONDITION STREAM NFRAMES)
  "NFrames T means ask if many frames, NIL means take them all, a number means
take that many without asking."
  (:COMPATIBLE-MESSAGE :BUG-REPORT-DESCRIPTION))

(DEFGENERIC BUG-REPORT-RECIPIENT-SYSTEM (CONDITION)
  (:COMPATIBLE-MESSAGE :BUG-REPORT-RECIPIENT-SYSTEM))

(DEFGENERIC INITIALIZE-SPECIAL-COMMANDS (CONDITION)
  (:METHOD-COMBINATION :PROGN :MOST-SPECIFIC-LAST)
  (:COMPATIBLE-MESSAGE :INITIALIZE-SPECIAL-COMMANDS))

(DEFGENERIC SPECIAL-COMMAND (CONDITION &REST PER-COMMAND-ARGS)
  (:METHOD-COMBINATION :CASE)
  (:COMPATIBLE-MESSAGE :SPECIAL-COMMAND))


;;; In addition, the following outside functions are also inside
;;; functions: document-proceed-type, document-special-command, proceed,
;;; and report.


;;; The following totally internal generic functions used to be messages.
;;; The message names go away.  These are internal, so no user programs will be hurt.

;In Release 6, this was the :CLEAR-INPUT-P message
(DEFGENERIC CLEAR-INPUT-P (CONDITION))

;In Release 6, this was the :CURRENT-AND-INNERMOST-FRAMES-FOR-DEBUGGER message
(DEFGENERIC CURRENT-AND-INNERMOST-FRAMES-FOR-DEBUGGER (CONDITION FRAME))

;In Release 6, this was the :FRAME-PC-INCREMENTED-P message
(DEFGENERIC FRAME-PC-INCREMENTED-P (CONDITION FRAME))

;In Release 6, this was the :FUNCALL-IN-PROPER-ENVIRONMENT message
(DEFGENERIC FUNCALL-IN-PROPER-ENVIRONMENT (CONDITION FUNCTION &REST ARGS))

;In Release 6, this was the :RELOCATE-FRAME-POINTERS message
(DEFGENERIC RELOCATE-FRAME-POINTERS (CONDITION)
  (:METHOD-COMBINATION :PROGN))

;In Release 6, this was the :SHOW-RESTART-HANDLER-P message
(DEFGENERIC SHOW-RESTART-HANDLER-P (CONDITION HANDLER))

;In Release 6, this was the :SIGNAL message
(DEFGENERIC SIGNAL-CONDITION (CONDITION &OPTIONAL PROCEEDABLY))

;In Release 6, this was the :STATUS message
(DEFGENERIC CONDITION-STATUS (CONDITION))

;In Release 6, this was the :TYPE message
(DEFGENERIC CONDITION-TYPE (CONDITION))
