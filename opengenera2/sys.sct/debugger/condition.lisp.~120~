;;; -*- Mode: Lisp; Package: Debugger; Base: 8 -*-

;;; New Condition Signalling System.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; "Use what pathname instead?"
;;;		-- F. P. Error

(DEFCONST CONDITION-AREA DEFAULT-CONS-AREA)

;This is obsolete, no longer needs to be different from MAKE-INSTANCE
;Don't mark it for obsolete-function compiler warnings just yet, maybe it's a good abstraction
(DEFUN MAKE-CONDITION (CONDITION-NAME &REST INIT-OPTIONS)
  (LEXPR-FUNCALL #'MAKE-INSTANCE CONDITION-NAME INIT-OPTIONS))

(FLAVOR::DEFINE-MAKE-INSTANCE-FUNCTION MAKE-CONDITION)

;;; Condition definitions

(DEFFLAVOR CONDITION
	((STATUS ':JUST-CREATED)
	 PROCEED-TYPES)
	()
  (:REQUIRED-METHODS REPORT)
  (:DOCUMENTATION :BASE-FLAVOR "All conditions are built out of this")
  (:SETTABLE-INSTANCE-VARIABLES PROCEED-TYPES)
  (:GETTABLE-INSTANCE-VARIABLES PROCEED-TYPES)
  (:READABLE-INSTANCE-VARIABLES STATUS)
  (:METHOD-COMBINATION :PROCEED :CASE
                       :DOCUMENT-PROCEED-TYPE :CASE
                       :RELOCATE-FRAME-POINTERS :PROGN)
  (:DEFAULT-INIT-PLIST :AREA CONDITION-AREA)	;Create conditions in this area
  :ABSTRACT-FLAVOR)

(DEFMETHOD (:PRINT-SELF CONDITION) (STREAM IGNORE SLASHIFY-P)
  (IF SLASHIFY-P
      (SI:PRINTING-RANDOM-OBJECT (SELF STREAM :TYPEP))
      (REPORT SELF STREAM)))

(DEFMETHOD (MAKE-INSTANCE CONDITION) (&REST IGNORE)
  (LET ((WO (SEND SELF ':SEND-IF-HANDLES ':PROCEED ':WHICH-OPERATIONS)))
    (IF (NOT (VARIABLE-BOUNDP PROCEED-TYPES))
	(SETQ PROCEED-TYPES WO)
      (AND PROCEED-TYPES (ATOM PROCEED-TYPES)
	   (SETQ PROCEED-TYPES (LIST PROCEED-TYPES)))
      (LOOP FOR TYPE IN PROCEED-TYPES
	    UNLESS (MEMQ TYPE WO)
	      DO (SETQ PROCEED-TYPES (REMQ TYPE PROCEED-TYPES))))))

(DEFMETHOD (PROCEED-TYPE-P CONDITION) (PROCEED-TYPE)
  (NOT (NULL (MEMQ PROCEED-TYPE PROCEED-TYPES))))

(DEFMETHOD (DOCUMENT-PROCEED-TYPE CONDITION :WHICH-OPERATIONS) ()
  (SEND-IF-HANDLES SELF :PROCEED ':WHICH-OPERATIONS))

(DEFMETHOD (DOCUMENT-PROCEED-TYPE CONDITION :OTHERWISE) (PROCEED-TYPE STREAM)
  (SEND STREAM ':STRING-OUT
	(OR (PROCEED SELF ':CASE-DOCUMENTATION PROCEED-TYPE)
	    (GET-PNAME PROCEED-TYPE))))

(DEFMETHOD (INITIALIZE-SPECIAL-COMMANDS CONDITION :DEFAULT) () NIL)
(DEFMETHOD (SPECIAL-COMMANDS CONDITION :DEFAULT) () NIL)
(DEFMETHOD (SPECIAL-COMMAND-P CONDITION :DEFAULT) (SPECIAL-COMMAND)
  (NOT (NULL (MEMQ SPECIAL-COMMAND (SPECIAL-COMMANDS SELF)))))

(DEFMETHOD (REPORT-STRING CONDITION) ()
  (WITH-OUTPUT-TO-STRING (STREAM)
    (REPORT SELF STREAM)))

(DEFWRAPPER (SIGNAL-CONDITION CONDITION) (IGNORE . BODY)
  `(IF (EQ STATUS ':JUST-CREATED)
       (UNWIND-PROTECT
	 (PROGN (SETQ STATUS ':SIGNALLING)
		. ,BODY)
	 (SETQ STATUS ':SIGNALLED))
       (FERROR "Condition ~S ~A" SELF
	 (SELECTQ STATUS
	   (:SIGNALLING "signalled recursively")
	   (:SIGNALLED "has already been signalled")
	   (OTHERWISE (FORMAT NIL "is in an unknown state ~S" STATUS))))))

(DEFGENERIC ERROR-CLASSIFICATION (CONDITION))
(DEFMETHOD (ERROR-CLASSIFICATION CONDITION) () NIL)

(DEFMETHOD (CONDITION-TYPE CONDITION) () "Condition")
(DEFMETHOD (CLEAR-INPUT-P CONDITION) () T)	;Clear input if entering debugger.
(DEFMETHOD (SHOW-RESTART-HANDLER-P CONDITION) (HANDLER)
  (SEND HANDLER ':HANDLE-CONDITION-P SELF))

(DEFMETHOD (FUNCALL-IN-PROPER-ENVIRONMENT CONDITION) (FUNCTION &REST ARGS)
  (APPLY FUNCTION ARGS))

(DEFVAR *INTERPRETER-TRAMPOLINE-FUNCTIONS*
	'(FUNCALL APPLY CL:APPLY LEXPR-FUNCALL SEND LEXPR-SEND))
(DEFMETHOD (CURRENT-AND-INNERMOST-FRAMES-FOR-DEBUGGER CONDITION) (START-FRAME)
  (DECLARE (VALUES CURRENT-FRAME INNERMOST-INTERESTING-FRAME))
  (LOOP FOR FRAME = START-FRAME THEN (FRAME-OUT-TO-INTERESTING-ACTIVE-FRAME FRAME NIL)
	UNTIL (NULL FRAME)
	AS PREVIOUS = (FRAME-PREVIOUS-ACTIVE-FRAME FRAME)
	DO (COND ((AND PREVIOUS
		       (MEMQ (FUNCTION-NAME (FRAME-FUNCTION FRAME))
			     *INTERPRETER-TRAMPOLINE-FUNCTIONS*)
		       (ERROR-REPORTER-FRAME-P PREVIOUS))
		  ;; If the current frame is just a trampoline and the
		  ;; previous one is an error-reporter, then just ignore
		  ;; the current frame and keep skipping error-reporters.
		  (SETQ FRAME PREVIOUS))
		 ((OR (NULL PREVIOUS)
		      (NOT (ERROR-REPORTER-FRAME-P FRAME)))
		  ;; If we've reached the bottom of the stack or the current frame
		  ;; is not an error-reporter, then we're done.
		  (RETURN-FROM CURRENT-AND-INNERMOST-FRAMES-FOR-DEBUGGER
		    (VALUES FRAME FRAME)))
		 (T (SETQ FRAME PREVIOUS)))
	FINALLY (RETURN-FROM CURRENT-AND-INNERMOST-FRAMES-FOR-DEBUGGER
		  (VALUES START-FRAME START-FRAME))))

(DEFMETHOD (RELOCATE-FRAME-POINTERS CONDITION :DEFAULT) ())

(DEFMETHOD (FRAME-PC-INCREMENTED-P CONDITION) (IGNORE) T)



(DEFGENERIC CONDITIONS:SIMPLE-CONDITION-FORMAT-CONTROL (CONDITIONS:SIMPLE-CONDITION))

(DEFGENERIC CONDITIONS:SIMPLE-CONDITION-FORMAT-ARGUMENTS (CONDITIONS:SIMPLE-CONDITION))

(DEFFLAVOR CONDITIONS:SIMPLE-CONDITION (FORMAT-CONTROL (FORMAT-ARGUMENTS '()))
	   (CONDITION)
  (:INITABLE-INSTANCE-VARIABLES FORMAT-CONTROL FORMAT-ARGUMENTS)
  (:READABLE-INSTANCE-VARIABLES
   (CONDITIONS:SIMPLE-CONDITION-FORMAT-CONTROL   FORMAT-CONTROL)
   (CONDITIONS:SIMPLE-CONDITION-FORMAT-ARGUMENTS FORMAT-ARGUMENTS))
  (:REQUIRED-INIT-KEYWORDS :FORMAT-CONTROL))

(DEFMETHOD (DBG:REPORT CONDITIONS:SIMPLE-CONDITION) (STREAM)
  (CL:APPLY #'FORMAT STREAM FORMAT-CONTROL FORMAT-ARGUMENTS))


(DEFFLAVOR CONDITIONS:SERIOUS-CONDITION () (CONDITION)
  :ABSTRACT-FLAVOR)

(DEFFLAVOR DEBUGGER-CONDITION () (CONDITIONS:SERIOUS-CONDITION)
  (:DOCUMENTATION :BASE-FLAVOR
   "All conditions which should normally enter the debugger rather than
returning should be built out of this flavor.  It is distinct from ERROR
because some conditions (such as trap-on-exit) do not want to be intercepted
by handlers for ERROR.")
  :ABSTRACT-FLAVOR)

(DEFMETHOD (CONDITION-TYPE DEBUGGER-CONDITION) () "Error")

(DEFFLAVOR CONDITIONS:ERROR () (DEBUGGER-CONDITION)
  :ABSTRACT-FLAVOR)

(DEFFLAVOR ERROR () (CONDITIONS:ERROR)
  :ABSTRACT-FLAVOR
  (:DOCUMENTATION :BASE-FLAVOR
   "This is the normal base flavor for errors which enter the debugger."))

(DEFFLAVOR CONDITIONS:SIMPLE-ERROR () (CONDITIONS:SIMPLE-CONDITION ERROR))

(DEFFLAVOR FERROR
	(FORMAT-STRING
	 (FORMAT-ARGS NIL))
	(ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  (:REQUIRED-INIT-KEYWORDS :FORMAT-STRING))

(DEFMETHOD (REPORT FERROR) (STREAM)
  (LEXPR-FUNCALL #'FORMAT STREAM FORMAT-STRING FORMAT-ARGS))

(DEFFLAVOR NO-ACTION-MIXIN () ())

(DEFMETHOD (PROCEED NO-ACTION-MIXIN :NO-ACTION) ()
  "Proceed without any special action"
  ':NO-ACTION)

(DEFFLAVOR PROCEEDABLE-FERROR () (NO-ACTION-MIXIN FERROR))

(DEFFLAVOR CERROR () (PROCEEDABLE-FERROR))

(DEFMETHOD (PROCEED CERROR :RETURN-VALUE)
	   (&OPTIONAL (VALUE (PROMPT-AND-READ ':EVAL-FORM
			       "Form to evaluate and return from CERROR: ")))
  "Return a value from CERROR"
  (VALUES ':RETURN-VALUE VALUE))

;; A mixin for flavors which don't want to bother making complicated :REPORT methods.
(DEFFLAVOR NULL-REPORT () ())

(DEFMETHOD (REPORT NULL-REPORT) (IGNORE) NIL)

;; Special commands
(DEFFLAVOR SPECIAL-COMMANDS-MIXIN
	(SPECIAL-COMMANDS)
	()
  :GETTABLE-INSTANCE-VARIABLES
  :INITABLE-INSTANCE-VARIABLES
  (:REQUIRED-FLAVORS CONDITION)
  (:METHOD-COMBINATION :SPECIAL-COMMAND :CASE
		       :DOCUMENT-SPECIAL-COMMAND :CASE
		       :INITIALIZE-SPECIAL-COMMANDS (:PROGN :MOST-SPECIFIC-LAST)))

(DEFMETHOD (MAKE-INSTANCE SPECIAL-COMMANDS-MIXIN) (&REST IGNORE)
  (LET ((WO (SEND SELF ':SEND-IF-HANDLES ':SPECIAL-COMMAND ':WHICH-OPERATIONS)))
    (IF (NOT (VARIABLE-BOUNDP SPECIAL-COMMANDS))
	(SETQ SPECIAL-COMMANDS WO)
      (AND SPECIAL-COMMANDS (ATOM SPECIAL-COMMANDS)
	   (SETQ SPECIAL-COMMANDS (LIST SPECIAL-COMMANDS)))
      (LOOP FOR TYPE IN SPECIAL-COMMANDS
	    UNLESS (MEMQ TYPE WO)
	      DO (SETQ SPECIAL-COMMANDS (REMQ TYPE SPECIAL-COMMANDS))))))

(DEFMETHOD (DOCUMENT-SPECIAL-COMMAND SPECIAL-COMMANDS-MIXIN :WHICH-OPERATIONS) ()
  (SEND-IF-HANDLES SELF :SPECIAL-COMMAND ':WHICH-OPERATIONS))

(DEFMETHOD (DOCUMENT-SPECIAL-COMMAND SPECIAL-COMMANDS-MIXIN :OTHERWISE) (COMMAND STREAM)
  (SEND STREAM ':STRING-OUT
	(OR (SPECIAL-COMMAND SELF ':CASE-DOCUMENTATION COMMAND)
	    (GET-PNAME COMMAND))))

;; Signaller

;;; The variables *ACTIVE-CONDITIONS-AND-RESTARTS* and *RESTARTS* are low-level
;;; compatibility support needed to allow interfacing between the Genera condition
;;; system and the soon-to-be Common Lisp Condition System.  They maintain enough
;;; state so that first class restart objects (per ANSI CL) can be conjured on the
;;; fly to `back up' the Genera conditions' proceed options. -kmp 5-Jun-89

(DEFVAR-RESETTABLE *ACTIVE-CONDITIONS-AND-RESTARTS* '())

(DEFMACRO WITH-CONDITIONS-AND-RESTARTS ((CONDITION &OPTIONAL RESTARTS) &BODY FORMS)
  `(STACK-LET ((*ACTIVE-CONDITIONS-AND-RESTARTS*
		 (LIST* ,CONDITION NIL ,RESTARTS *RESTART-HANDLERS*
			*ACTIVE-CONDITIONS-AND-RESTARTS*)))
     (CATCH *ACTIVE-CONDITIONS-AND-RESTARTS*
       ,@FORMS)))

(DEFMACRO NEXT-ACTIVE-CONDITIONS-AND-RESTARTS (X) `(CDDDDR ,X))

(DEFVAR-RESETTABLE *RESTARTS* '())

;;; The variable *BREAK-ON-SIGNALS* is specified by ANSI CL to be basically like
;;; TRACE-CONDITIONS, except that its value is a normal type spec rather than a
;;; list of conditions. -kmp 5-Jun-89

(DEFVAR-RESETTABLE CONDITIONS:*BREAK-ON-SIGNALS* NIL)

(DEFMETHOD (SIGNAL-CONDITION CONDITION) (&OPTIONAL PROCEEDABLY)
  (WITH-CONDITIONS-AND-RESTARTS (SELF *RESTARTS*)
    (BLOCK SIGNAL-CONDITION
      (WHEN (OR (NULL TRACE-CONDITIONS-CONDITIONAL)
		(IF (LISTP TRACE-CONDITIONS-CONDITIONAL)
		    (EVAL TRACE-CONDITIONS-CONDITIONAL)
		    (FUNCALL TRACE-CONDITIONS-CONDITIONAL)))
	(LET ((MESSAGE "TRACE-CONDITIONS is set"))
	  (WHEN (OR (EQ TRACE-CONDITIONS T)
		    (IF (LISTP TRACE-CONDITIONS)
			(LOOP FOR CONDITION IN TRACE-CONDITIONS
			      THEREIS (AND (GET CONDITION 'FLAVOR)
					   (SI:TYPEP-FLAVOR SELF CONDITION)))
			(SI:TYPEP-FLAVOR SELF TRACE-CONDITIONS))
		    (IF CONDITIONS:*BREAK-ON-SIGNALS*
			(LET ((TEMP CONDITIONS:*BREAK-ON-SIGNALS*)
			      (CONDITIONS:*BREAK-ON-SIGNALS* NIL))  ;Avoid recursive errors
			  (SETQ MESSAGE "*BREAK-ON-SIGNALS* is set")
			  (CL:TYPEP SELF TEMP))))
	    ;;Check TRACE-CONDITIONS-EXCEPTIONS for more-specific exceptions to
	    ;;general conditions on TRACE-CONDITIONS
	    (unless (loop for x in trace-conditions-exceptions
			  thereis (and (get x 'flavor)
				       (si:typep-flavor self x)))
	      (STACK-LET ((VALUES (MULTIPLE-VALUE-LIST
				    (ENTER-DEBUGGER
				      SELF MESSAGE
				      '(((#\Resume) :EXIT-DEBUGGER
					 "Continue to signal this condition normally"))))))
		;;--- How can anything but Abort(s) and Resume possibly work?
		;;--- Consider c-sh-P ("package dwim") when TRACE-CONDITIONS is set
		(WHEN (AND PROCEED-TYPES (CAR VALUES))
		  (RETURN-FROM SIGNAL-CONDITION (VALUES-LIST VALUES))))))))
      (DO ((SIGNALLER-HANDLER-LISTS *CONDITION-HANDLER-LISTS*
				    (CDR SIGNALLER-HANDLER-LISTS)))
	  ((NULL SIGNALLER-HANDLER-LISTS)
	   ;; If called from SIGNAL, and the object isn't ERRORP, return NIL
	   (OR (AND PROCEEDABLY
		    (NOT (ERRORP SELF)))
	       (DO () (NIL)
		 (ENTER-DEBUGGER SELF "there were no handlers for the condition")))
	   NIL)
	(DO ((SIGNALLER-HANDLER-LIST (SYMEVAL (CAR SIGNALLER-HANDLER-LISTS))
				     (CDR SIGNALLER-HANDLER-LIST))
	     HANDLER)
	    ((NULL SIGNALLER-HANDLER-LIST))
	  (SETQ HANDLER (CAR SIGNALLER-HANDLER-LIST))
	  (STACK-LET ((VALUES (MULTIPLE-VALUE-LIST
				;; While executing the handler, remove it and all handlers
				;; that are inside it on the same list
				(LETF-IF (MEMQ (CAR SIGNALLER-HANDLER-LISTS)
					       '(*BOUND-HANDLERS* *DEFAULT-HANDLERS*))
					 (((SYMEVAL (CAR SIGNALLER-HANDLER-LISTS))
					   (CDR SIGNALLER-HANDLER-LIST)))
				  (SEND HANDLER ':HANDLE-CONDITION SELF
					(FOLLOW-CELL-FORWARDING
					  (%MAKE-POINTER DTP-LOCATIVE SIGNALLER-HANDLER-LIST)
					  NIL))))))
	    (COND ((NULL (FIRST VALUES)))
		  ((NULL PROCEED-TYPES)
		   (FERROR "~S attempted to proceed from ~S,
but proceeding is not allowed.
The value~P returned ~:[were~;was~]: ~{~S~^, ~}"
			   HANDLER SELF
			   (LENGTH VALUES) (= (LENGTH VALUES) 1) (COPYLIST VALUES)))
		  (T (RETURN-FROM SIGNAL-CONDITION (VALUES-LIST VALUES))))))))))

;;;

(COMPILE-FLAVOR-METHODS CONDITION CONDITIONS:SIMPLE-CONDITION
			ERROR CONDITIONS:SIMPLE-ERROR FERROR
			PROCEEDABLE-FERROR CERROR)
