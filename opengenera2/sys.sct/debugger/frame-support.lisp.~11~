;;; -*- Mode: LISP; Package: Debugger; Base: 8; Lowercase: Yes -*- 

;;; Debugger control-stack frame support routines for the L and I machines
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;T iff cdr-code and data-type fields of this and next word are correct and frame
;;;isn't part of a catch block.
;;;Note that answer will be NIL for bottom frame.
;#+imach
;(defun probably-valid-frame-p (frame)
;  (selector (%p-ldb %%q-tag frame) =
;    (((dpb 3 %%q-cdr-code-within-tag dtp-even-pc)
;      (dpb 3 %%q-cdr-code-within-tag dtp-odd-pc))
;     (= (%p-ldb %%q-tag (%pointer-plus frame 1))
;	(dpb 3 %%q-cdr-code-within-tag dtp-fixnum)))))

;; Fast version of the above
#+imach
(defsubst probably-valid-frame-p (frame)
  (declare (safeguarded-function))
  (and (= (%p-ldb (byte #o7 #o41) frame)
	  (ldb (byte 7. 1.) (dpb 3 %%q-cdr-code-within-tag dtp-even-pc)))
       (= (%p-ldb %%q-tag (%pointer-plus frame 1))
	  (dpb 3 %%q-cdr-code-within-tag dtp-fixnum))))

#+imach
(defun bottom-frame-p (frame)
  (null (frame-caller-continuation frame)))

;; Find previous active frame without using *STACK-FRAME-ARRAY*.
;; f-f-p-a-f of bottom frame is not defined.
#+imach
(defun spartan-frame-previous-active-frame (active-frame frame-own-control-register)
  (declare (safeguarded-function))
  (%pointer-plus active-frame (- (ldb %%cr.caller-frame-size frame-own-control-register))))

;; Get the next frame, regardless of active (finish-call'ed) or not.
;; Frame and next-active-frame must not be nil.
;; "Spartan" because it doesn't use debugger's *STACK-FRAME-ARRAY*.
#+imach
(defun spartan-frame-next-open-frame (frame next-active-frame)
  (declare (safeguarded-function))
  (if (not (ldb-test %%cr.call-started
		     (frame-caller-control-register next-active-frame)))
      next-active-frame
    (loop for ptr = (%pointer-plus frame 2) then (%pointer-plus ptr 1)
	  while (%pointer-lessp ptr next-active-frame)
	  when (probably-valid-frame-p ptr)
	    do (return ptr)
	  finally (return next-active-frame))))	;shouldn't happen

;; The actual compiled function object running (not the closure, generic function, etc.)
#+imach
(defun spartan-frame-function (next-active-frame next-next-active-frame)
  (values
    (%find-structure-header
      (frame-caller-continuation
	(spartan-frame-next-open-frame next-active-frame next-next-active-frame)))))

;; This is similar to SPARTAN-FRAME-NEXT-OPEN-FRAME, except you use it when you
;; don't have a handle on the next active frame.
;; This can return NIL if it's the top frame.
#+imach
(defun search-for-next-open-frame (frame sg)
  (declare (safeguarded-function))
  (loop with sp = (if (eq %current-stack-group sg)
		      (%pointer-plus (%stack-frame-pointer) 1)
		    (sg-stack-pointer sg))
	with frame-limit = (%pointer-plus frame 129.)
	with search-limit = (if (%pointer-lessp sp frame-limit) sp frame-limit)
	for ptr = (%pointer-plus frame 2) then (%pointer-plus ptr 1)
	while (%pointer-lessp ptr search-limit)
	when (probably-valid-frame-p ptr)
	  do (return ptr)))

;; Calls FUNCTION once for each frame in the control stack of STACK-GROUP passing FP, 
;; the location of the control-register, and the function.
;; The cost of finding the function can be avoided by passing in PC-OK T.
;; The cost of finding spartan-frames can be avoided by passing in PC-OK :NONE
(zwei:defindentation (map-over-frames-in-stack 1 1))
#+imach
(defun map-over-frames-in-stack (stack-group function &optional pc-ok)
  (declare (sys:downward-funarg function))
  "Calls function with FP, location of control register, and continuation register (or function)"
  (if (eq stack-group %current-stack-group)
      (loop for cont = (%read-internal-register %register-continuation)
		     then (frame-caller-continuation old-fp)
	    for old-fp = (%stack-frame-pointer) then fp
	    for fp = (%pointer-plus
		       old-fp
		       (- (ldb %%cr.caller-frame-size
			       (%read-internal-register %register-control-register))))
		   then (%pointer-plus fp (- (ldb %%cr.caller-frame-size cr)))
	    as lcr = (locf (frame-caller-control-register old-fp))
	    as cr = (location-contents lcr)
	    until (or (eql fp old-fp) (null (location-contents old-fp)))
	    do (funcall function fp lcr (if pc-ok cont (%find-structure-header cont)))
	       (when (and (not (eql pc-ok :none)) (ldb-test %%cr.call-started cr))
		 (setf old-fp (spartan-frame-next-open-frame fp old-fp))))
    (loop initially 
	    (funcall function
		     (sg-frame-pointer stack-group)
		     (locf (sg-control-register stack-group))
		     (if pc-ok
			 (sg-next-pc stack-group)
		       (%find-structure-header (sg-next-pc stack-group))))
	  for cont = (sg-continuation stack-group)
		   then (frame-caller-continuation old-fp)
	  for old-fp = (sg-frame-pointer stack-group) then fp
	  for fp = (%pointer-plus
		     old-fp
		     (- (ldb %%cr.caller-frame-size (sg-control-register stack-group))))
		 then (%pointer-plus fp (- (ldb %%cr.caller-frame-size cr)))
	  as lcr = (locf (frame-caller-control-register old-fp))
	  as cr = (location-contents lcr)
	  until (or (eql fp old-fp) (null (location-contents old-fp)))
	  do (funcall function fp lcr (if pc-ok cont (%find-structure-header cont)))
	     (when (and (not (eql pc-ok :none)) (ldb-test %%cr.call-started cr))
	       (setf old-fp (spartan-frame-next-open-frame fp old-fp))))))

#+imach
(defmacro using-stack-frame-array ((frame accessor) &body body)
  (let ((accessor (fintern "SFA-~A" accessor)))
    `(block found
       (when (and (boundp '*stack-frame-array*)
		  (eql (array-leader *stack-frame-array* 1) *debugger-level*))
	 (let* ((index (frame-array-index ,frame nil))
		(sfa (and index (aref *stack-frame-array* index))))
	   (when sfa
	     (return-from found (,accessor sfa)))))
       ,@body)))

#+imach
(defun frame-function (frame)
  (let ((low (sg-control-stack-low %current-stack-group))
	(current-fp (%stack-frame-pointer)))
    ;; optimize the common case.
    (if (and (%pointer-lessp low frame)
	     (si:%pointer- frame current-fp))
	(using-stack-frame-array (frame frame-function)
	  (loop for cont = (%read-internal-register %register-continuation)
			 then (if (eql pfp current-fp)
				  cont
				(frame-caller-continuation old-pfp))
		for old-size = (defstorage-size sys:stack-frame) then size 
		for cr = (%read-internal-register %register-control-register)
		       then (frame-caller-control-register pfp)
		as size = (ldb %%cr.caller-frame-size cr)
		for old-pfp = current-fp then pfp
		for pfp = current-fp then (%pointer-plus pfp (- old-size))
		until (or (zerop size) (%pointer-lessp pfp low))
		when (eql frame pfp)
		  do (return-from frame-function (values (%find-structure-header cont)))
		when (ldb-test %%cr.call-started cr)
		  do (setf old-pfp (spartan-frame-next-open-frame pfp old-pfp))
		finally (scl:cerror "Use #'ignore" "FP ~S was not a valid frame pointer" frame)
			(return-from frame-function #'ignore)))
      (multiple-value-bind (origin active-size size number sg type)
	  (si:decode-stack-address frame)
	(ignore origin active-size size number)
	(when (eql type :control)
	  (map-over-frames-in-stack sg
	    #'(lambda (fpointer ignore pc)
		(when (eql fpointer frame)
		  (return-from frame-function (values (%find-structure-header pc)))))
	    t))
	(scl:cerror "Use #'ignore" "FP ~S was not a valid frame pointer" frame)
	(return-from frame-function #'ignore)))))

#+imach
(defun frame-own-control-register (frame)
  (when (and (boundp '*stack-frame-array*)
	     (eql (array-leader *stack-frame-array* 1) *debugger-level*))
    (let* ((index (frame-array-index frame nil))
	   (sfa (and index (aref *stack-frame-array* index))))
      (when sfa
	(let ((cr-loc (sfa-control-register-location sfa)))
	  (return-from frame-own-control-register
	    (values (location-contents cr-loc) cr-loc))))))
  (map-over-frames-in-stack %current-stack-group
    #'(lambda (fp cr-loc pc)
	(ignore pc)
	(when (eq fp frame)
	  (return-from frame-own-control-register
	    (values (location-contents cr-loc) cr-loc))))
    t))

#+imach
(defun frame-previous-frame (frame)
  (let ((low (sg-control-stack-low %current-stack-group))
	(current-fp (%stack-frame-pointer)))
    (if (and (%pointer-lessp low frame)
	     (si:%pointer- frame current-fp))
	(using-stack-frame-array (frame previous-frame)
	  (loop for old-cr = (%read-internal-register %register-control-register) then cr
		as size = (ldb %%cr.caller-frame-size old-cr)
		for cr = (%read-internal-register %register-control-register)
		       then (frame-caller-control-register pfp)
		for old-pfp = current-fp then pfp
		for pfp = current-fp then (%pointer-plus pfp (- size))
		until (or (zerop (ldb %%cr.caller-frame-size cr)) (%pointer-lessp pfp low))
		when (eql frame old-pfp)
		  do (return-from frame-previous-frame pfp)
		finally (return-from frame-previous-frame nil)))
      (multiple-value-bind (origin active-size size number sg type)
	  (si:decode-stack-address frame)
	(ignore origin active-size size number)
	(when (eql type :control)
	  (let ((next-one-ok nil))
	    (map-over-frames-in-stack sg
	      #'(lambda (fpointer ignore pc)
		  (ignore pc)
		  (cond (next-one-ok
			 (return-from frame-previous-frame fpointer))
			((eql fpointer frame)
			 (setq next-one-ok t))))
	      t)
	    (return-from frame-previous-frame nil)))
	(scl:cerror "Use NIL" "FP ~S was not a valid frame pointer" frame)
	(return-from frame-previous-frame nil)))))

#+imach
(defun frame-previous-open-frame (frame)
  (let ((low (sg-control-stack-low %current-stack-group))
	(current-fp (%stack-frame-pointer)))
    (if (and (%pointer-lessp low frame)
	     (si:%pointer- frame current-fp))
	(using-stack-frame-array (frame previous-frame)
	  (loop for old-cr = (%read-internal-register %register-control-register) then cr
		as size = (ldb %%cr.caller-frame-size old-cr)
		for cr = (%read-internal-register %register-control-register)
		       then (frame-caller-control-register pfp)
		for old-pfp = current-fp then pfp
		for pfp = current-fp then (%pointer-plus pfp (- size))
		until (or (zerop (ldb %%cr.caller-frame-size cr)) (%pointer-lessp pfp low))
		when (eql frame old-pfp)
		  do (return-from frame-previous-open-frame (and (not (zerop size)) pfp))
		finally (return-from frame-previous-open-frame nil)))
      (multiple-value-bind (origin active-size size number sg type)
	  (si:decode-stack-address frame)
	(ignore origin active-size size number)
	(when (eql type :control)
	  (let ((next-one-ok nil))
	    (map-over-frames-in-stack sg
	      #'(lambda (fpointer lcr pc)
		  (ignore pc)
		  (cond (next-one-ok
			 (return-from frame-previous-open-frame
			   (and (not (zerop (ldb %%cr.caller-frame-size
						 (location-contents lcr))))
				fpointer)))
			((eql fpointer frame)
			 (setq next-one-ok t))))
	      t)
	    (return-from frame-previous-open-frame nil)))
	(scl:cerror "Use NIL" "FP ~S was not a valid frame pointer" frame)
	(return-from frame-previous-open-frame nil)))))

#+3600
(defun frame-previous-open-frame (frame)
  (and (zerop (frame-bottom-bit frame))
       (frame-previous-frame frame)))

#+imach
(defun frame-previous-active-frame (frame)
  (loop for f = (frame-previous-open-frame frame)
	      then (frame-previous-open-frame f)
	until (null f)
	do (when (frame-active-p f)
	     (return-from frame-previous-active-frame f))
	finally (return nil)))

#+3600
(defun frame-previous-active-frame (frame)
  (frame-previous-open-frame frame))


#+imach
(defstruct (sfa :list (:conc-name sfa-))
  frame				;locative of the frame
  control-register-location	;locative to the saved control register
  frame-function		;frame-function as on 3600
  frame-return-pc		;ditto
  previous-frame		;like frame-previous-frame accessor on 3600
  next-frame			;frame-next-frame, if there were one
  local-names			;cached local names
  )

(defun frame-array-index (frame &optional (error-p t))
  (when (zerop (fill-pointer *stack-frame-array*))
    #+3600
    (loop for frame = *innermost-visible-frame* then (frame-previous-open-frame frame)
	  do (array-push-extend *stack-frame-array* frame)
	  until (null frame))
    #+imach
    (let ((start nil))
      (labels ((collect (fp cr-loc pc)
		 (when (eq fp *innermost-visible-frame*)
		   (setq start t))
		 (when start
		   (let ((function (%find-structure-header pc)))
		     (array-push-extend *stack-frame-array*
					(make-sfa frame fp
						  control-register-location cr-loc
						  frame-function function
						  frame-return-pc pc
						  ;; Fill this in later
						  previous-frame nil
						  next-frame nil
						  ;; Caches for disassembler
						  local-names nil))))))
	(map-over-frames-in-stack %current-stack-group #'collect t)
	;; Add a fencepost frame
	(array-push-extend *stack-frame-array*
			   (make-sfa frame nil
				     control-register-location nil
				     frame-function nil
				     frame-return-pc nil
				     previous-frame nil
				     next-frame nil
				     local-names nil))
	;; Fill in the previous- and next-frame pointers
	(let ((sfa *stack-frame-array*))
	  (declare (sys:array-register sfa))
	  (loop with last-index = (1- (fill-pointer sfa))
		for index below (fill-pointer sfa)
		as frame = (aref sfa index)
		as next-frame = (if (zerop index)
				    nil
				  (sfa-frame (aref sfa (1- index))))
		as prev-frame = (if (= index last-index)
				    nil
				  (sfa-frame (aref sfa (1+ index))))
		do (setf (sfa-next-frame frame) next-frame)
		   (setf (sfa-previous-frame frame) prev-frame)))))
    (setf (array-leader *stack-frame-array* 1) *debugger-level*))
  (if (null frame)
      (1- (fill-pointer *stack-frame-array*))
    #+imach (when (and (boundp '*frame-array-index-cached-frame*)	;compatibility...
		       (eq frame *frame-array-index-cached-frame*))
	      (return-from frame-array-index *frame-array-index-cached-index*))
    (let ((stack-frame-array *stack-frame-array*))
      (declare (sys:array-register stack-frame-array))
      (loop with d = 0 with u = (1- (fill-pointer *stack-frame-array*))
	    as i = (// (+ d u) 2)
	    ;; If the control stack overflowed, then the stack-frame-array
	    ;; could have stale pointers in it, so follow any forwarding
	    ;; pointers, and then shove the new pointer back into the array
	    ;; so we don't have to chase pointers more than once.
	    as cached-frame =
	       #+3600 (follow-cell-forwarding (aref stack-frame-array i) nil)
	       #+imach (follow-cell-forwarding (sfa-frame (aref stack-frame-array i)) nil)
	    do #+3600 (setf (aref stack-frame-array i) cached-frame)
	       #+imach (setf (sfa-frame (aref stack-frame-array i)) cached-frame)
	    when (eq cached-frame frame)
	      do (progn
		   #+imach (when (boundp '*frame-array-index-cached-frame*)
			     (setq *frame-array-index-cached-frame* frame
				   *frame-array-index-cached-index* i))
		   (return i))
	    do (if (%pointer-lessp cached-frame frame) (setq u i) (setq d (1+ i)))
	       (if (= d u)
		   (if error-p
		       (ferror "~S is not a frame in the current stack" frame)
		     (return-from frame-array-index nil)))))))

#+imach
(defun describe-*stack-frame-array* (&optional (stream standard-output))
  ;; Make sure it's been filled in...
  (frame-array-index *innermost-interesting-frame*)
  (cl:fresh-line stream)
  (dw:formatting-table (stream)
    (dw:formatting-column-headings (stream :underline-p t)
      (dw:formatting-cell (stream) "Index")
      (dw:formatting-cell (stream :align-x :center) "Frame")
      (dw:formatting-cell (stream) "Function")
      (dw:formatting-cell (stream) "CR")
      (dw:formatting-cell (stream) "Return")
      (dw:formatting-cell (stream) "Next")
      (dw:formatting-cell (stream) "Prev"))
    (loop for index below (fill-pointer *stack-frame-array*)
	  as sfa = (aref *stack-frame-array* index)
	  as frame = (sfa-frame sfa)
	  as cr-loc = (sfa-control-register-location sfa)
	  as cr = (if cr-loc (location-contents cr-loc) 0)
	  as function = (sfa-frame-function sfa)
	  as return-pc = (sfa-frame-return-pc sfa)
	  as prev = (sfa-previous-frame sfa)
	  as next = (sfa-next-frame sfa)
	  doing
      (dw:formatting-row (stream)
	(dw:formatting-cell (stream :align-x :right)
	  (cl:write index :stream stream))
	(dw:formatting-cell (stream :align-x :right)
	  (si:print-address (%pointer frame) stream))
	(dw:formatting-cell (stream)
	  (with-character-style ('(nil nil :very-small) stream)
	    (if function
		(present (function-name function) '((sys:function-spec) :abbreviate-p t)
			 :stream stream)
	      (cl:write-string "None" stream))))
	(dw:formatting-cell (stream)
	  (describe-control-register cr stream))
	(dw:formatting-cell (stream)
	  ;;--- frame-relative-exit-pc
	  (ignore stream return-pc)
	  )
	(dw:formatting-cell (stream)
	  (if (null next)
	      (cl:write-string "None" stream)
	    (si:print-address (%pointer next) stream)))
	(dw:formatting-cell (stream)
	  (if (null prev)
	      (cl:write-string "None" stream)
	    (si:print-address (%pointer prev) stream)))))))

#+imach
(defun describe-control-register (cr-or-frame &optional (stream standard-output))
  (let ((cr (if (locativep cr-or-frame) (frame-own-control-register cr-or-frame) cr-or-frame)))
    (when (ldb-test %%cr.apply cr) (cl:write-string "Apply " stream))
    (when (ldb-test %%cr.cleanup-catch cr) (cl:write-string "Catch " stream))
    (when (ldb-test %%cr.cleanup-bindings cr) (cl:write-string "Bindings " stream))
    (when (ldb-test %%cr.trap-on-exit-bit cr) (cl:write-string "Exit " stream))
    (when (ldb-test %%cr.extra-argument cr) (cl:write-string "Extra " stream))
    (when (ldb-test %%cr.call-started cr) (cl:write-string "Started " stream))
    (when (ldb-test %%cr.cleanup-in-progress cr) (cl:write-string "Cleanup " stream))
    (when (ldb-test %%cr.instruction-trace cr) (cl:write-string "Inst " stream))
    (when (ldb-test %%cr.call-trace cr) (cl:write-string "Call " stream))
    (when (ldb-test %%cr.trace-pending cr) (cl:write-string "Trace " stream))))

#+imach
(defun frame-return-pc (frame)
  (let ((i (frame-array-index frame)))
    ;; 1+ because the continuation register is for the previous frame
    (sfa-frame-return-pc (aref *stack-frame-array* (1+ i)))))

;; Returns NIL if there is no next.
(defun frame-next-open-frame (frame)
  (let ((i (frame-array-index frame)))
    (and (plusp i)
	 #+3600 (aref *stack-frame-array* (1- i))
	 #+imach (sfa-frame (aref *stack-frame-array* (1- i))))))

;; Returns T if specified frame is an active frame.
(defun frame-active-p (frame)
  #+imach frame
  #+3600
  (let ((next (frame-next-open-frame frame)))
    (or (null next)				;Innermost frame is always active
	(eq (frame-previous-active-frame next) frame)))
  #+imach t)

;; Returns NIL if there is no next.
;; Given NIL as arg, returns the bottom frame (whose FRAME-PREVIOUS-ACTIVE-FRAME is NIL).
(defun frame-next-active-frame (frame)
  (let* ((stack-frame-array *stack-frame-array*)
	 ;; Ensure *STACK-FRAME-ARRAY* is filled in
	 (this-frame-index (frame-array-index frame)))
    (declare (sys:array-register stack-frame-array))
    (loop for i downfrom (1- this-frame-index) until (minusp i)
	  as frame = #+3600 (aref stack-frame-array i)
		     #+imach (sfa-frame (aref stack-frame-array i))
	  when (or (zerop i) 
		   (eq (frame-previous-active-frame
			 #+3600 (aref stack-frame-array (1- i))
			 #+imach (sfa-frame (aref stack-frame-array (1- i))))
		       frame))
	    do (return frame))))

