;;; -*- Mode: Lisp; Package: Debugger; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file was split from rel-7>sys>debugger>mini-debugger.lisp.14

;; On 3600, this is the emergency-debugger frame.  On Imach, this is the previous frame.
(defvar *cold-initial-frame*)
#+imach
(defvar *cold-next-initial-frame*)
#+imach
(defvar *cold-next-next-initial-frame*)

(defvar *cold-frame*)
#+imach
(defvar *cold-next-frame*)
#+imach
(defvar *cold-next-next-frame*)

(defvar-resettable *emergency-debugger-depth* 0)

#+imach
(defun emergency-debugger ()
  (let ((*cold-next-initial-frame* (%stack-frame-pointer)))
    (emergency-debugger-1)))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;--- Do this sometime
0(defun describe-error ()
  )

(defun #+imach emergency-debugger-1 #+3600 emergency-debugger ()
 (catch 'return-from-emergency-debugger
  (let* ((stream (or *debug-io-override* (make-syn-stream 'debug-io)))
	 (standard-output stream)
	 (standard-input stream)
	 (query-io stream))
    (terpri)
    (princ "Emergency mini-debugger; press HELP key for help.")
    (let* (#+imach (*cold-next-next-initial-frame* (%stack-frame-pointer))
	   (*cold-initial-frame*
	     #+imach (cold-frame-previous-active-frame *cold-next-initial-frame*
						       *cold-next-next-initial-frame*)
	     #+3600 (%stack-frame-pointer))
	   (*cold-frame* *cold-initial-frame*)
	   #+imach (*cold-next-frame* *cold-next-initial-frame*)
	   #+imach (*cold-next-next-frame* *cold-next-next-initial-frame*)
	   (*emergency-debugger-depth*
	     (and (boundp '*emergency-debugger-depth*)	;extreme paranoia
		  (fixnump *emergency-debugger-depth*)
		  (<= 0 *emergency-debugger-depth* 7)
		  (1+ *emergency-debugger-depth*))))
      (when (eql *emergency-debugger-depth* 1)
	(describe-error))
      (loop with command-char
	    do (terpri)
	       (if *emergency-debugger-depth*
		   (dotimes (i *emergency-debugger-depth*)
		     (declare (ignore i))
		     (tyo #/))
		   (tyo #/?))
	       (setq command-char (tyi))
	       (selector command-char char-equal
		 (#/Help (emergency-debugger-help))
		 (#/c-B (cold-backtrace))
		 (#/m-B (cold-full-backtrace))
		 (#/c-N (cold-show-previous-frame))
		 (#/c-P (cold-show-next-frame))
		 (#/m-< (cold-top-of-stack))
		 (#/m-> (cold-bottom-of-stack))
		 (#/c-S (cold-find-frame))
		 (#/c-L				;(send terminal-io :clear-window)
		  #+imach (cold-show-frame
			    *cold-frame* *cold-next-frame* *cold-next-next-frame*)
		  #+3600 (cold-show-frame *cold-frame*
					  (catch 'overshot
					    (cold-next-frame *cold-frame*))))
		 (#/c-E (cold-rep))
		 (#/open (cl:unread-char command-char) (cold-rep))
		 (#/c-R (cold-return-from))
		 (#/c-m-R (cold-restart-frame))
		 (#/m-sh-R (cold-restart-frame-with-new-args))
		 (#/c-m-C (cold-show-catch-blocks))
		 (#/c-m-H (cold-show-proceed-handlers))
		 (#/m-P (cold-proceed))
		 (#/m-R (cold-restart))
		 (#/c-// (describe-error))
		 ((#/c-Z #/Abort #/Resume) (return nil))	;RESUME is here temporarily
		 (#/c-H (halt))			;temporary
		 (#/c-Q (throw 'si:error-abort nil))
		 (#/Return)
		 (otherwise (cl:unread-char command-char) (cold-rep))))))))

(defun emergency-debugger-help ()
  (terpri) (princ "c-B     Show a brief backtrace")
  (terpri) (princ "m-B     Show a detailed backtrace")
  (terpri) (princ "c-N     Move down a frame")
  (terpri) (princ "c-P     Move up a frame")
  (terpri) (princ "m-<     Top of stack")
  (terpri) (princ "m->     Bottom of stack")
  (terpri) (princ "c-S     Find frame which is executing function")
  (terpri) (princ "c-L     Redisplay the current frame, showing args and locals")
  (terpri) (princ "c-E     Read and evaluate a form in the dynamic environment")
  (terpri) (princ "c-R     Return from a frame (default is current frame)")
  (terpri) (princ "c-m-R   Restart frame with current values of args")
  (terpri) (princ "m-sh-R  Restart frame with new args")
  (terpri) (princ "c-m-C   Show catch blocks and unwind-protects")
  (terpri) (princ "c-m-H   Show proceed and restart handlers")
  (terpri) (princ "m-P     Invoke a proceed handler")
  (terpri) (princ "m-R     Invoke a restart handler")
  (terpri) (princ "c-//     Describe error")
  (terpri) (princ "c-H     Halt")
  (terpri) (princ "c-Q     Throw to si:error-abort")
  (terpri) (princ "c-Z,RESUME     Exit the mini-debugger"))


#+imach
(defun cold-frame-previous-active-frame (active-frame next-active-frame)
  (spartan-frame-previous-active-frame active-frame
				       (frame-caller-control-register next-active-frame)))
#+imach
(defun spartan-frame-function-name (next-active-frame next-next-active-frame)
  (function-name (spartan-frame-function next-active-frame next-next-active-frame)))

#+imach
(defun cold-backtrace (&optional (n-frames 1000000.))
  (terpri)
  (loop repeat n-frames
	with frame = *cold-frame*
	with next-frame = *cold-next-frame*
	with next-next-frame = *cold-next-next-frame*
	do (prin1 (spartan-frame-function-name next-frame next-next-frame))
	until (bottom-frame-p frame)
	do (princ "  ")
	   (cl:shiftf next-next-frame next-frame frame
		      (cold-frame-previous-active-frame frame next-frame))))

#+3600
(defun cold-backtrace (&optional (n-frames 1000000.))
  (loop repeat n-frames
	for frame = *cold-frame* then (frame-previous-frame frame)
	until (null frame)
	do (print (frame-function frame))))

#+imach
(defun cold-full-backtrace (&optional (n-frames 1000000.))
  (terpri)
  (loop repeat n-frames
	with frame = *cold-frame*
	with next-frame = *cold-next-frame*
	with next-next-frame = *cold-next-next-frame*
	do (cold-show-frame frame next-frame next-next-frame)
	   (terpri)
	until (bottom-frame-p frame)
	do (princ "Next frame? (Y or N) ")
	   (selector (tyi) char-equal
	     ((#\Rubout #\N) (return nil)))
	   (cl:shiftf next-next-frame next-frame frame
		      (cold-frame-previous-active-frame frame next-frame))))

#+3600
(defun cold-full-backtrace (&optional (n-frames 1000000.))
  (loop repeat n-frames
	for last-frame = nil then frame
	for frame = *cold-frame* then (frame-previous-frame frame)
	until (null frame)
	do (when last-frame
	     (terpri))
	   (cold-show-frame frame last-frame)
	   (terpri)
	   (princ "Next frame? (Y or N) ")
	   (selector (tyi) char-equal
	     ((#\Rubout #\N) (return nil)))))

#+imach
(defun cold-next-frame (frame &optional (n-frames 1))
  (ignore n-frames)
  (loop with now = *cold-initial-frame*
	with next-now = *cold-next-initial-frame*
	with next-next-now = *cold-next-next-initial-frame*
	do (when (bottom-frame-p now)
	     (terpri)
	     (princ "Hit the bottom of the stack")
	     (throw 'overshot nil))
	for previous = (cold-frame-previous-active-frame now next-now)
	do (when (eq previous frame)
	     (return (values now next-now next-next-now)))
	   (when (%pointer-lessp previous *cold-frame*)
	     (terpri)
	     (princ "Overshot current frame pointer")
	     (throw 'overshot nil))
	   (cl:shiftf next-next-now next-now now previous)))

#+3600
(defun cold-next-frame (frame &optional (n-frames 1))
  (ignore n-frames)
  (loop for now = *cold-initial-frame* then previous
	for previous = (frame-previous-frame now)
	do (when (null previous)
	     (terpri)
	     (princ "Hit the bottom of the stack")
	     (throw 'overshot nil))
	   (when (eq previous frame)
	     (return now))
	   (when (%pointer-lessp previous *cold-frame*)
	     (terpri)
	     (princ "Overshot current frame pointer")
	     (throw 'overshot nil))))

;; At stack-frame array would be nice
(defun cold-show-next-frame (&optional (n-frames 1) verbose)
  (catch 'overshot
    (cond ((eq *cold-frame* *cold-initial-frame*)
	   (terpri)
	   (princ "There is no next frame"))
	  (t
	   #+imach (cl:multiple-value-setq
		     (*cold-frame* *cold-next-frame* *cold-next-next-frame*)
		     (cold-next-frame *cold-frame* n-frames))
	   #+3600 (setq *cold-frame* (cold-next-frame *cold-frame* n-frames))
	   (if verbose
	       #+imach (cold-show-frame *cold-frame* *cold-next-frame* *cold-next-next-frame*)
	       #+3600 (cold-show-frame *cold-frame* NIL)
	     (print #+imach (spartan-frame-function-name
			      *cold-next-frame* *cold-next-next-frame*)
		    #+3600 (frame-function *cold-frame*)))))))

(defun cold-show-previous-frame (&optional (n-frames 1) verbose)
  (ignore n-frames)
  (cond (#+imach (bottom-frame-p *cold-frame*)
	 #+3600 (null (frame-previous-frame *cold-frame*))
	 (terpri)
	 (princ "There is no previous frame"))
	(t
	 #+imach (cl:shiftf *cold-next-next-frame* *cold-next-frame* *cold-frame*
			    (cold-frame-previous-active-frame *cold-frame* *cold-next-frame*))
	 #+3600 (setq *cold-frame* (frame-previous-frame *cold-frame*))
	 (if verbose
	     #+imach (cold-show-frame *cold-frame* *cold-next-frame* *cold-next-next-frame*)
	     #+3600 (cold-show-frame *cold-frame* NIL)
	   (print #+imach (spartan-frame-function-name
			    *cold-next-frame* *cold-next-next-frame*)
		  #+3600 (frame-function *cold-frame*))))))

(defun cold-top-of-stack ()
  (setq *cold-frame* *cold-initial-frame*)
  #+imach (setq *cold-next-frame* *cold-next-initial-frame*
		*cold-next-next-frame* *cold-next-next-initial-frame*)
  (print #+imach (spartan-frame-function-name *cold-next-frame* *cold-next-next-frame*)
	 #+3600 (frame-function *cold-frame*)))

#+imach
(defun cold-bottom-of-stack ()
  (loop with frame = *cold-frame*
	with next-frame = *cold-next-frame*
	with next-next-frame = *cold-next-next-frame*
	until (bottom-frame-p frame)
	do (cl:shiftf next-next-frame next-frame frame
		      (cold-frame-previous-active-frame frame next-frame))
	finally (setq *cold-frame* frame *cold-next-frame* next-frame
		      *cold-next-next-frame* next-next-frame)
		(print (spartan-frame-function-name
			 *cold-next-frame* *cold-next-next-frame*))))

#+3600
(defun cold-bottom-of-stack ()
  (loop for frame = *cold-frame* then (frame-previous-frame frame)
	until (null (frame-previous-frame frame))
	finally (setq *cold-frame* frame)
		(print (frame-function *cold-frame*))))

#+imach
(defun cold-show-frame (frame next-frame next-next-frame)
  (print (spartan-frame-function-name next-frame next-next-frame))
  (loop for frame-offset from 2 below (%pointer-difference next-frame frame)
	do (terpri)
	   (prin1 frame-offset)
	   (princ ": ")
	   (prin1 (%p-contents-offset frame frame-offset))))

#+3600
(defun cold-show-frame (frame last-frame)
  (print (frame-function frame))
  (when last-frame
    (loop for frame-offset below (- (%pointer-difference last-frame frame)
				    (1- (defstorage-size stack-frame)))
	  do (print (%p-contents-offset frame frame-offset)))))


;;Returns T if input is acceptable (nil or a function whose frame is found).
(defun cold-find-frame ()
  (princ "Function name (nil uses current frame): ")
  (let ((function-name (read)))
    (unless function-name (return-from cold-find-frame t))
    #+imach (loop with frame = *cold-frame*
		  with next-frame = *cold-next-frame*
		  with next-next-frame = *cold-next-next-frame*
		  do (when (equal (spartan-frame-function-name next-frame next-next-frame)
				  function-name)
		       (setq *cold-frame* frame *cold-next-frame* next-frame
			     *cold-next-next-frame* next-next-frame)
		       (return-from cold-find-frame t))
		  until (bottom-frame-p frame)
		  do (cl:shiftf next-next-frame next-frame frame
				(cold-frame-previous-active-frame frame next-frame)))
    #+3600 (loop for frame = *cold-frame* then (frame-previous-frame frame)
		 until (null frame)
		 do (when (equal (function-name (frame-function frame)) function-name)
		      (setq *cold-frame* frame) (return-from cold-find-frame t)))
    (princ "Sorry, could not find a frame executing ")
    (prin1 function-name)
    nil))

(defun cold-rep ()
  (terpri)
  (princ "Eval: ")
  (let* ((form (read))
	 (values (multiple-value-list (eval form))))
    (mapc 'print values)))

(defun cold-return-from ()
  (when (cold-find-frame)
    (princ " Value(s): ")
    (let ((values (read)))
      (when (nlistp values)
	(setq values (list values)))
      (%return-from-frame *cold-frame* values))))

#+imach
(defun get-old-function ()
  (let* ((old-function (spartan-frame-function *cold-next-frame* *cold-next-next-frame*))
	 (old-function-name (function-name old-function)))
    (cond ((equal old-function-name '(:property dtp-list si::interpreter-function))
	   (%p-contents-offset *cold-frame* 2))
	  ((and (cl:consp old-function-name) (eq (car old-function-name) :internal))
	    old-function)
	  ((cl:consp old-function-name)
	   (princ "Sorry, I don't know how to restart ")
	   (prin1 old-function-name) (terpri)
	   nil)
	  (t old-function))))

(defun cold-restart-frame ()
  (when (cold-find-frame)
    (let ((old-function #+3600  (frame-function *cold-frame*)
			#+imach (get-old-function)))
      (when old-function (%restart-frame *cold-frame* old-function)))))

(defun cold-restart-frame-with-new-args ()
  (when (cold-find-frame)
    (let ((old-function #+3600  (frame-function *cold-frame*)
			#+imach (get-old-function)))
      (terpri)
      (princ "New arg list: ")
      (let ((list (read)))
	(if (cl:listp list)
	    (cl:apply 'si::%unwind-to-frame-and-funcall *cold-frame* old-function list)
	    (princ "That's not a list!"))))))

(defun cold-show-catch-blocks ()
  (loop with base-frame =
	  #+imach *cold-next-initial-frame*
	  #+3600 (loop for prev = nil then fp	;why all this pain?
		       for fp = (%stack-frame-pointer)
			      then (frame-previous-frame fp)
		       when (eq fp *cold-frame*) return prev)
	for cb = (progn #+imach (%read-internal-register %register-catch-block-list)
			#+3600 %catch-block-list)
	       then (catch-block-previous cb)
	until (null cb)
	do #+imach
	   (let ((pc (catch-block-pc cb)))
	     (terpri)
	     (when (not (zerop (catch-block-invalid cb)))
	       (princ "Invalid catch block ")
	       (prin1 cb)
	       (terpri))
	     (if pc
		 (let* ((tag (catch-block-tag cb))
			(function (%find-structure-header pc))
			(rel-pc (function-relative-pc pc function)))
		   (when (%pointer-lessp cb base-frame)
		     (cond ((not (zerop (catch-block-unwind-protect cb)))
			    (princ "UNWIND-PROTECT cleanup in "))
			   (t (princ "Throwing to ")
			      (prin1 tag)
			      (terpri)
			      (princ " returns to ")))
		     (prin1 (function-name function))
		     (princ " at PC ")
		     (prin1 rel-pc)))
		 (princ "*** PC is NIL *** ")
		 (prin1 cb)))
	   #+3600
	   (let* ((tag (catch-block-tag cb))
		  (pc (catch-block-pc cb))
		  (function (%find-structure-header pc))
		  (rel-pc (function-relative-pc pc function)))
	     (when (%pointer-lessp cb base-frame)
	       (terpri)
	       (cond #+3600 ((eq tag 'sys:unwind-protect-tag)
			     (princ "UNWIND-PROTECT cleanup in "))
		     (t
		      (princ "Throwing to ")
		      (prin1 tag)
		      (princ " returns to ")))
	       (prin1 (function-name function))
	       (princ " at PC ")
	       (prin1 rel-pc)))))

(defun cold-show-proceed-handlers ()
  (declare (special condition))
  (when (and (variable-boundp condition) condition)
    (let ((proceed-types (proceed-types condition)))
      (when proceed-types
	(format t "~&Proceed types:")
	(mapc #'(lambda (proceed-type)
		  (format t "~&  ~S : " proceed-type)
		  (document-proceed-type condition proceed-type standard-output))
	      proceed-types))))
  (when *restart-handlers*
    (format t "~&Restart handlers:")
    (mapc #'(lambda (handler)
	      (format t "~&  ")
	      (send handler :describe-restart standard-output))
	  *restart-handlers*))
  nil)

(defun cold-proceed ()
  (declare (special condition))
  (unless (and (variable-boundp condition) condition)
    (format t "~&DBG:CONDITION is not bound.")
    (return-from cold-proceed nil))
  (dolist (proceed-type (proceed-types condition))
    (terpri)
    (document-proceed-type condition proceed-type standard-output)
    (format t "~& Invoke this proceed handler? (Y or N)")
    (when (let ((ch (tyi)))
	    (mem #'char-equal ch '(#/Space #/Y)))
      (throw (progn #+3600 'si:emergency-break
		    #+imach 'return-from-emergency-debugger)
	(proceed condition proceed-type)))))

(defun cold-restart ()
  (do ((l *restart-handlers* (cdr l)))
      ((null l))
    (terpri)
    (send (car l) :describe-restart standard-output)
    (format t "~& Invoke this restart handler? (Y or N)")
    (when (let ((ch (tyi)))
	    (mem #'char-equal ch '(#/Space #/Y)))
      (send (car l) :fake-restart (follow-cell-forwarding (%make-pointer dtp-locative l) nil))
      (format t "The restart handler ~S is proceeding??" (car l)))))

;; Useless (but documented) interface
(defun invoke-restart-handlers (condition &key (flavors nil flavors-specified))
  (do ((l *restart-handlers* (cdr l)))
      ((null l))
    (and (or (not flavors-specified)
	     (send (car l) :handle-condition-flavors-p flavors))
	 (send (car l) :handle-condition
	       condition (follow-cell-forwarding (%make-pointer dtp-locative l) nil))
	 (ferror "The restart handler ~S is proceeding??" (car l)))))

