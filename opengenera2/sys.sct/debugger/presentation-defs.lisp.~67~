;;; -*- Mode: Lisp; Package: Debugger; Base: 8; Lowercase: Yes -*-

;;; Presentation type definitions for the Debugger and Condition System.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;; Basic presentation types, more specific ones defined below
(define-presentation-type stack-frame (() &key pretty)
   :parser ((stream &key default)
	    ;; Parser is for the benefit of :Set Current Frame
	    (values (accept '((sys:function-spec :defined-p t))
			    :stream stream :prompt nil :default default)))
   :printer ((frame stream)
	     (let* ((frame (if (presentation-frame-p frame) (car frame) frame))
		    (language (if (locativep frame)
				  (find-language-for-frame frame)
				(find-language-for-function frame))))
	       (let ((prinlevel nil)
		     (prinlength nil)
		     (name (typecase frame
			     (:locative (lframe-frame-function-name language frame pretty))
			     (otherwise frame))))
		 (dw:with-output-as-presentation (:stream stream
						  :object frame
						  :type 'stack-frame)
		   (prin1 name stream)))))
   :description "a stack frame")

(defsubst presentation-frame-p (frame)
  (and (cl:consp frame)
       (locativep (car frame))
       (variable-boundp *error*)
       (eq (cdr frame) *error*)
       (neq (condition-status *error*)
	    :signalled)))

;;; To be used for the COMPILED-FUNCTION-SPEC ptype.  Passes anything that DISASSEMBLE
;;; will accept, *except* for interpreted functions and lambdas, where DISASSEMBLE has
;;; the side-effect of coercing it by compiling the object.
(defun compiled-function-spec-p (spec)
  (let ((function spec)
	tem)
    (cl:loop
       (cond ((cl:compiled-function-p function) (return t))
	     ((si:interpreted-function-p function) (return nil))
	     ((validate-function-spec function)
	      (setf function (fdefinition (si:unencapsulate-function-spec function))))
	     ((typep function :lexical-closure)
	      (setf function (lexical-closure-function function)))
	     ((setf tem (special-form-p function))
	      (setf function tem))
	     ((setf tem (macro-function function))
	      (setf function tem))
	     (t (return nil))))))

(define-presentation-type compiled-function-spec (() &key (name-only t))
   :abbreviation-for `((and ((sys:function-spec :defined-p t) :partial-completers nil)
			    ((cl:satisfies compiled-function-spec-p))))
   :description "a function-spec for a compiled function"
   :printer ((function stream)
	     (prin1
	       (if name-only
		   (typecase function
		     (:compiled-function (function-name function))
		     (otherwise function))
		 function)
	       stream)))

(define-presentation-translator frame-to-function-spec
   (stack-frame function-spec
    :tester ((frame &key input-context)
	     (and (presentation-frame-p frame)
		  ;; Only do this translation when a plain, old stack-frame won't do
		  (not (dw:handler-applies-in-limited-context-p
			 input-context 'stack-frame)))))
   (frame)
  (function-name (frame-function (car frame))))


;;; These need to be loaded before other code can even be compiled

(define-presentation-type proceed-option ()
   :parser ((stream)
	    ;; Kludgy parser for people who want to be able to type
	    (values (accept 'string :stream stream :prompt nil
				    :provide-default nil)))
   :printer ((proceed-option stream)
	     (destructuring-bind (proceed . error) proceed-option
	       (describe-proceed-option proceed error stream)))
   :description "a proceed option")

(define-presentation-type stack-frame-or-integer ()
   :abbreviation-for `((or cl:integer stack-frame))
   :printer ((frame stream)
	     (prin1 (cond ((presentation-frame-p frame)
			   (function-name (frame-function (car frame))))
			  (t frame))
		    stream)))

(define-presentation-type stack-type ()
   :abbreviation-for `((cl:member :control :bind :data))
   :description "a stack type")

(define-presentation-type stack-size (() &key stack-type)
   :parser ((stream)
	    (let* ((lower (selectq stack-type
			    (:control (+ 1024. control-stack-overflow-margin))
			    (:bind 100.)
			    (:data 0)
			    (otherwise 1000)))
		   (upper #+3600 (// address-space-size 32.)
			  ;; Not really accurate, but it's sane
			  #+imach (// %address-space-zone-size 32.)))
	      (dw:with-accept-help
		  ((:subhelp (lambda (stream stuff-so-far)
			       (ignore stuff-so-far)
			       (format stream "The size for a ~(~A~) stack must be between ~D and ~D"
				 (or stack-type 'random) lower upper))))
		(values (accept `((cl:integer ,lower ,upper))
				:stream stream :prompt nil))))))

(define-presentation-type environment-type ()
   :abbreviation-for `((cl:member :program :debugger :streams))
   :description "an environment type")

(define-presentation-type integer-or-all ()
   :abbreviation-for `((scl:token-or-type (:all) cl:integer))
   :printer ((thing stream)
	     (typecase thing
	       (:number (format stream "~D" thing))
	       (otherwise (format stream "~A" thing)))))

;; Presentation type to read a code-fragment or a Lisp form
(define-presentation-type form-or-code-fragment ()
   :abbreviation-for `((or sys:form sys:code-fragment))
   :printer ((fragment stream)
	     (prin1 fragment stream)))

(define-presentation-type stack-frame-or-function-spec ()
   :abbreviation-for `((or sys:function-spec stack-frame))
   :printer ((frame stream)
	     (prin1 (cond ((presentation-frame-p frame)
			   (function-name (frame-function (car frame))))
			  (t frame))
		    stream)))


;; Read an expression, possible evaluating it before it gets returned.  Also
;; accept #/Return or #/End as unique and useful "escapes"
;; Returns either :END, :RETURN, <value>, or (<form> <value>)
(define-presentation-type evaluated-expression (()
						&key (evaluate t)
						     (environment si:*read-form-environment*)
						     (or-end nil) (or-return nil))
   :parser ((stream)
	    (values
	      (block eval-expression
		;; Establish a context so that we can click on an expression.
		;; Gag, I sure wish I could just use a :EXPANDER.
		(dw:with-presentation-input-context ('sys:form :stream stream) (blip)
		     (progn
		       (when (or or-end or-return)
			 ;; See if a Return or End is typed
			 (loop with pt = (send stream :read-location)
			       for ch = (dw:read-char-for-accept stream)
			       as space-or-tab = (member ch '(#\space #\tab))
			       ;; Eat whitespace
			       do (unless space-or-tab
				    (dw:unread-char-for-accept ch stream)
				    (send stream :set-location pt))
			       until (and (characterp ch) (not space-or-tab))
			       unless space-or-tab
				 do (when (and (list ch) (eq (first ch) :activation))
				      ;; Return the appropriate flag
				      (cond ((and or-end (char= (second ch) #/end))
					     (return-from eval-expression :end))
					    ((and or-return (char= (second ch) #/return))
					     (return-from eval-expression :return))
					    (t (error 'dw:input-not-of-required-type
						      :type 'null
						      :string (format nil "~@C"
								(second ch))))))))
		       ;; Read an expression
		       (let* ((expression (accept `((sys:form) :environment ,environment)
						  :stream stream :prompt nil))
			      (value (if evaluate (eval expression environment) expression)))
			 ;; Eat any trailing whitespace
			 (when (dw:peek-char-for-accept stream)
			   (dw:read-char-for-accept stream))
			 (return-from eval-expression `(,expression ,value))))
		   ;; User clicked on an expression
		   (sys:form
		     (let* ((expression (dw:presentation-blip-object blip))
			    (value (if evaluate (eval expression environment) expression)))
		       (present expression (dw:presentation-blip-presentation-type blip))
		       (return-from eval-expression `(,expression ,value))))))))
   :history t					;don't inherit from SYS:FORM
   :printer ((evaluated-expression stream)
	     (prin1 evaluated-expression stream))
   :description "a form to be evaluated")


;;; For the condition breakpoints, TRACE-CONDITIONS, etc.

(define-presentation-type break-condition ()
   :parser ((stream)
	    (let ((when (accept '((scl:token-or-type
				    (:mode-lock :always :never :once)
				    sys:form))
				:stream stream :prompt nil)))
	      (flet ((bomb ()
		       (signal 'dw:input-not-of-required-type
			       :string when :type 'break-condition)))
		(setq when
		      (cond
			((keywordp when)
			 (selectq when
			   (:mode-lock 'when-mode-lock-internal)
			   (:always 'true)
			   (:never 'false)
			   (:once (let ((gone-off nil))
				    (lambda () (prog1 (not gone-off) (setq gone-off t)))))))
			((symbolp when)
			 (if (validate-function-spec when) when (bomb)))
			((listp when)
			 (if (validate-function-spec (car when)) when (bomb)))))
		when)))
   :history nil
   :printer ((break-condition stream)
	     (prin1 (cond ((eq break-condition 'true) 'always)
			  ((eq break-condition 'false) 'never)
			  ((eq break-condition 'when-mode-lock-internal) 'mode-lock)
			  ;;--- Kludge
			  ((typep break-condition :lexical-closure) 'once)
			  (t break-condition)) stream)))

(define-presentation-type break-action ()
   :parser ((stream)
	    (let ((what (accept '((scl:token-or-type
				    (:show-args :show-locals :show-all)
				    sys:form))
				:stream stream :prompt nil)))
	      (flet ((bomb ()
		       (signal 'dw:input-not-of-required-type
			       :string what :type 'break-action)))
		(setq what
		      (cond
			((keywordp what) what)
			((symbolp what)
			 (if (validate-function-spec what) what (bomb)))
			((listp what)
			 (if (validate-function-spec (car what)) what (bomb)))))
		what)))
   :history nil
   :printer ((break-action stream)
	     (funcall (if (keywordp break-action) #'princ #'prin1) break-action stream)))


(si:define-presentation-type enable-condition-name ()
   :abbreviation-for `((or ((cl:member t nil)) sys:flavor-name)))

(si:define-presentation-type enable-condition-list ()
   :expander `((cl:sequence enable-condition-name))
   :printer ((conditions stream)
	     (si:format-textual-list conditions #'prin1 :stream stream :finally " and "))
   :description "T, NIL, or conditions to trace")


;;; For the location monitor

(define-presentation-type unbound ()
   :printer ((object stream)
	     (ignore object)
	     (princ "unbound" stream))
   :description "the unbound contents of a location")

(define-presentation-type location-or-unbound ()
   :abbreviation-for `((or sys:expression unbound))
   :printer ((object stream &key acceptably)
	     (unless (null object)
	       (if (locativep object)
		   (if (not (location-boundp object))
		       (present object 'unbound :stream stream
				:stream stream
				:location object :acceptably nil)
		       (present (location-contents object) 'sys:expression
				:stream stream
				:location object :acceptably acceptably))
		   (present (%p-contents-offset object 0) 'sys:expression
			    :stream stream
			    :location object :acceptably acceptably))
	       ))
   :description "the contents of a location")

(define-presentation-action replace-unbound
   (unbound dw:top-level-command-context
    :tester ((ignore &key presentation window)
	     (and (dw::presentation-object-value-replace-p presentation)
		  window
		  (operation-handled-p window :replace-object-value)))
    :documentation "Modify this structure slot"
    :gesture :modify)
   (ignore &key presentation window)
  (send window :replace-object-value presentation))

(define-presentation-type named-slot ()
   :abbreviation-for `((or named-locative-slot named-form-slot)))

(define-presentation-type named-locative-slot (()
					       &key symbol indentation structure
						    show-structure (show-monitored t))
   :printer ((locative stream &key acceptably)
	     (let ((*printing-monitor-message* t))
	       (when (and show-structure structure)
		 (format stream "in ~S, " structure))
	       (format stream "~:[  ~;~]~S" (and show-structure structure) symbol)
	       (when (and show-monitored
			  (= (%p-data-type locative) dtp-monitor-forward))
		 (format stream " ~V(Monitored)~" *deemphasis-character-style*))
	       (format stream ":  ~VT" indentation)
	       (present locative 'location-or-unbound
			:location locative
			:stream stream
			:sensitive nil
			:acceptably acceptably)))
   :description "a named slot in a structure, or an instance variable")

(define-presentation-type named-form-slot (()
					   &key symbol indentation structure
						show-structure)
   :printer ((form stream &key acceptably)
	     (when (and show-structure structure)
	       (format stream "in ~S," structure))
	     (format stream "~:[  ~;~]~S:  ~VT"
		     (and show-structure structure) symbol indentation)
	     (present (eval form) 'sys:expression
		      :form form
		      :stream stream
		      :sensitive t
		      :acceptably acceptably))
   :description "a named slot in a structure, or an instance variable")
