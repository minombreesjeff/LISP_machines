;;; -*- Package: DEBUGGER; Mode: LISP; Base: 8; Lowercase: Yes -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

(defvar *autobug-enable* nil)			;off by default.

(defconst *autobug-recurse-check* nil)
(defvar *autobug-history* nil)

;; These parameters overridable by arguments to the facility.
(defconst *autobug-sender* "Server Bug Reporter")
(defconst *autobug-pathname* ">Server-Bug-Log>server.bug.newest")

;;; This constant is being kept for compatibility, in case any caller in a
;;; customer system wants to set or bind it.
(defconst *autobug-recipients* nil)

;;; The new replacement for the constant.  Maintains compatiblity in case
;;; the constant is given a value, but otherwise tracks the value of
;;; dbg:*default-bug-recipient-root-name*.
(defun autobug-recipients ()
  (or *autobug-recipients*
      (list (format nil "Bug-~A" *default-bug-recipient-root-name*))))

(defconst *autobug-report-mode* '(:mail-brief :file)
  "What to do when bug happens.  List, possible elements:
:mail, :mail-brief, :file, :halt, :halt-when-attended.")
(defconst *autobug-duplicate-action* :mail-brief
  "What to do if bug happens many times:  :report, :mail-brief, :ignore.")

(defstruct (autobug-record :named :conc-name)
  time						;Universal time bug was recorded
  protocol					;Symbol, protocol involved.
  function-name					;Function spec of "interesting" errer [sic].
  condition					;Condition name.
  user						;"User ID", as reported by application.
  foreign-host					;Host object.
  exit-pc					;Of err-er.
  stack-trace					;List, top to bottom, of function specs.
  short-description				;For boring mail.
  file-pathname					;For reference....
  message-id) 

(defun automatic-bug-report
       (error					;The error object to be reported
	&key
	flavors					;flavors of objects to be recorded if found
						;in stack as locals or args
	structure-types				;named-structure types to be searched for
	server					;a neti:basic-server, if at all possible
	;; You don't have to supply these two if you supplied SERVER.
	protocol				;protocol name.
	foreign-host				;foreign host involved
	
	(user "<<unknown>>")			;Foreign user ID involved
	;; What to do with the bug report
	(duplicate-action *autobug-duplicate-action*)	;see def of this var...
	(pathname *autobug-pathname*)		;pathname, if a file is involved
						;Currently, needs versions....
	(report-mode *autobug-report-mode*)	;see def of this variable
	(recipients (autobug-recipients))	;To whom to send mail, if mail involved
	(sender *autobug-sender*)		;Who to say From:
	)

  (declare (dbg:error-reporter))
  
  (if (or *autobug-recurse-check* (null *autobug-enable*))
      nil
      (let ((*autobug-recurse-check* t)
	    (package si:pkg-user-package))	;So symbol printing will be canonical...
	(with-erring-frame (frame error)
	  (let ((*current-frame* frame)
		(time (time:get-universal-time))
		(condition (typep error)))
	    
	    (if (and (atom report-mode) report-mode)
		(setq report-mode (list report-mode)))

	    (if (null foreign-host)
		(setq foreign-host (send server :foreign-host)))
	    (if (null protocol)
		(setq protocol (send server :protocol)))
	    
	    (multiple-value-bind (description previous-description)
		(autobug-make-history condition duplicate-action
				      time user protocol foreign-host)

	      (let (file-info mail-info)		
		
		(unless previous-description
		  (when (or (memq ':file report-mode)
			    (memq ':mail report-mode))
		    (let ((long-report (autobug-compose-long-report
					 error description flavors structure-types)))
		      (when (memq ':file report-mode)
			(setq file-info long-report))
		      (when (memq ':mail report-mode)
			(setq mail-info long-report))))
		  
		  (when (memq ':mail-brief report-mode)
		    (setq mail-info (autobug-compose-brief-mail error description))))
		
		(when (and previous-description
			   (eq duplicate-action ':mail-brief))
		  (setq mail-info
			(generate-autobug-boring-mail
			  time net:local-host previous-description)))
		
		(when (or file-info mail-info)
		  (process-run-function "Server Bug Log"
		    #'autobug-mail-and-file
		    description
		    file-info
		    mail-info
		    :pathname pathname
		    :recipients recipients
		    :headers (autobug-make-mail-header
			       sender description previous-description)))
		
		(when (and description (not previous-description))
		  (without-interrupts
		    (push description *autobug-history*))))))))))

(defun autobug-make-history (condition duplicate-action time user protocol foreign-host)
  (let* ((stack-trace
	   (ignore-errors
	     (loop for frame = *innermost-interesting-frame*
		       then (frame-previous-interesting-frame frame)
		   while frame
		   collect (function-name (frame-function frame)))))
	 (function (frame-function *innermost-interesting-frame*))
	 (function-name (function-name function))
	 (exit-pc (and
		    (typep function ':compiled-function)
		    (frame-relative-exit-pc *innermost-interesting-frame*)))
	 (history
	   (make-autobug-record
	     time time
	     user user
	     protocol protocol
	     foreign-host foreign-host 
	     function-name function-name
	     condition condition
	     exit-pc exit-pc
	     stack-trace stack-trace)))

    (autobug-make-summary history)
    (values history
	    (and (neq duplicate-action :report)
		 (loop for hist in *autobug-history*
		       when (and (eq condition (autobug-record-condition hist))
				 (eq function-name (autobug-record-function-name hist))
				 (eql exit-pc (autobug-record-exit-pc hist))
				 (equal stack-trace (autobug-record-stack-trace hist)))
			 return hist)))))

(defun autobug-make-summary (description)
  (let ((summary
	  (format nil "~&~A server error on ~A:~%~S at ~\time\.~@
			At PC ~O in ~S~@
			User ~A, coming in from ~A"
			(string-capitalize-words (autobug-record-protocol description))
			net:local-host
			(autobug-record-condition description)
			(autobug-record-time description)
			(autobug-record-exit-pc description)
			(autobug-record-function-name description)
			(autobug-record-user description)
			(autobug-record-foreign-host description))))
    (setf (autobug-record-short-description description) summary)))

(defun autobug-compose-long-report (error description flavors structure-types)
  (with-output-to-string (stream)
    (send stream :string-out (autobug-record-short-description description))
    (format stream "~2&")
    (bug-mail-prologue stream)
    (bug-report-description error stream nil)
    (autobug-describe-interesting-objects stream flavors structure-types)))

(defun autobug-compose-brief-mail (error description)
  (with-output-to-string (standard-output)
    (princ (autobug-record-short-description description))
    (format t "~&~%")
    (print-error-message error nil t nil)))

(defun autobug-make-mail-header (sender description previous-description)
  `(:from ,sender
    :subject ,(format nil "~S in ~A server on ~A"
		      (autobug-record-condition description)
		      (string-capitalize-words (autobug-record-protocol description))
		      net:local-host)

    . ,(and previous-description
	   (let ((pmid (autobug-record-message-id previous-description))
		 (pfpn (autobug-record-file-pathname previous-description)))
	     (append
	       (and pmid `(:references (,pmid)))
	       (and pfpn `(:file-references (,pfpn))))))))

(defun generate-autobug-boring-mail (time host description)
  (string-append
    (format nil "Another ~S at ~O in ~S~%has happened, at ~\time\ on ~A.~%"
	    (autobug-record-condition description)
	    (autobug-record-exit-pc description)
	    (autobug-record-function-name description)
	    time host)
    (format nil "This is apparently just one more occurrence of this error:~@
                 ~@T~~A~~&~%This error was already logged:~%"
	    (autobug-record-short-description description))
    (format nil "~@[Message ~A was sent about it.~%~]~
		~@[A full description was logged in ~A.~]"
	    (autobug-record-message-id description)
	    (autobug-record-file-pathname description))))

(defun autobug-mail-and-file (description file-info mail-info
			      &key pathname recipients headers
			      &aux filebarf protocol-name)
  (setq protocol-name (string-capitalize-words (autobug-record-protocol description)))
  (when file-info
    (condition-case (file-error)
	(let ((path (fs:parse-pathname pathname nil (send net:local-host :sample-pathname))))
	  (setq pathname path)
	  (let ((standard-output 'si:null-stream))
	    (fs:create-directories-recursively path))
	  (with-open-file (file path :direction ':output)
	    (send file :string-out file-info)
	    (close file)
	    (setq pathname (send file :truename))
	    (setf (autobug-record-file-pathname description) pathname)
	    (tv:notify nil "~A server bug logged to ~A."
		       protocol-name pathname)))
      (error (setq mail-info (or mail-info ""))
	     (setq filebarf
		   (format nil "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%~@
			       The following error occurred:~%  ~~A~~@
			       An attempt was made to log the stack trace to ~A, but~@
			       failed for the following reason:~%  ~~A~"
			   (autobug-record-short-description description)
			   pathname file-error)))))
			    

  (when mail-info
    (setq mail-info
	  (string-append
	    (format nil "This is an automatically generated bug report.~@
			~@[A full stack trace has been logged in ~A.~%~%~]"
		    (autobug-record-file-pathname description))
	    (or filebarf "")
	    mail-info))

    (when file-info				;make "file-references"
      (let ((found-ref (memq ':file-references headers)))
	(unless found-ref
	  (setq headers (setq found-ref (list* ':file-references nil headers))))
	(push pathname (cadr found-ref))))

    (condition-case (mail-error)
	(let ((message
		(lexpr-funcall #'zwei:send-message-string recipients mail-info headers)))
	  (setf (autobug-record-message-id description)
		(cadr (assq ':message-id (car (send message :recipients-done))))))
      (error (tv:notify nil (format nil "Can't report ~A server bug of ~A on ~A:~@
					~A"
				    protocol-name
				    (autobug-record-user description)
				    (autobug-record-foreign-host description)
				    mail-error))))))

;;Note that we hope to get SELF's as args.  This is a 3600 dependency...
(defun autobug-describe-interesting-objects (&special standard-output &local
					     flavors structures)
  (let ((objects nil))
    (loop for frame = *current-frame* then (frame-previous-interesting-frame frame)
	  while frame
	  do (loop for i below (frame-number-of-args frame)
		   as arg = (frame-arg-value frame i)
		   when (and (not (memq arg objects))
			     (autobug-interesting-p arg flavors structures))
		     do (push arg objects))
	     (loop for i below (frame-number-of-locals frame)
		   as local = (frame-local-value frame i)
		   when (and (not (memq local objects))
			     (autobug-interesting-p local flavors structures))
		     do (push local objects)))
    (setq objects (nreverse objects))
    (format t "~%~%--------------------~%")
    (cond ((null objects)
	   (format t "~&No interesting objects."))
	  (t (format t "~&Interesting objects:~%~%")
	     (let ((prinlevel *bug-report-prinlevel*)
		   (prinlength *bug-report-prinlength*)
		   (scl:*print-string-length* *bug-report-string-length*))
	       (loop for object in objects
		     do (ignore-errors
			  (terpri)
			  (terpri)
			  (condition-case (err)
			      (describe object)
			    (error (format t "~&Can't describe ~A:~~A~" object err))))))))))

(defun safe-flavor-typep (object flavor)
  (and (flavor:find-flavor flavor nil)
       (typep object flavor)))

(defun autobug-interesting-p (object flavors structures)
  (typecase object
    (:instance (loop for flavor in flavors
		     thereis (safe-flavor-typep object flavor)))
    (:array (let ((nst (named-structure-p object)))
	      (and nst (memq nst structures))))
    (otherwise nil)))

