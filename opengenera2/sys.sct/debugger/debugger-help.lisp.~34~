;;; -*- Mode: LISP; Package: Debugger; Base: 8; Lowercase: Yes -*-

;;; Debugger help command, doesn't work in cold load environment
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun show-debugger-help (&optional (standard-output standard-output) d-d-addendum)
  (unless d-d-addendum
    (send standard-output :string-out
	  "
    You are in the Debugger.  The commands are:
     D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI"):Help
0      c-†        Display the text you are now reading.
     1:Abort
0      ‘, c-Z    Return to either top level or the previous Debugger.
    
     Lisp form      Evaluate the form and prints the result.  The form is
                    evaluated in the lexical environment of the current frame iff
                    *INHERIT-LEXICAL-ENVIRONMENT* is non-NIL."))
  (send standard-output :string-out
        "

    (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")Commands for viewing a stack frame:
0     1:Show Frame
0      c-L, ‹   Clear the screen and redisplay the error message.
      m-L           Clear the screen, then show detailed information about this frame.
     1:Show Argument
0      c-m-A         Display an argument in the current frame (use a numeric argument
                    to specify which one).  You can also use (DBG:ARG 1n0), or just type
                    the name of the argument.
      c-X c-A       Show all of the arguments for the current frame.
     1:Show Rest Argument
0                    Display the &REST argument, if there is one.
     1:Show Local
0      c-m-L         Display a local in the current frame (use a numeric argument to
                    specify which one).  You can also use (DBG:LOC 1n0), or just type
                    the name of the local variable.
      c-X c-L       Show all of the locals for the current frame.
     1:Show Stack
0                    Show all of the local and temporary slots in the current frame.
                    (This often gives more information than 1:Show Local0.)
     1:Show Function
0      c-m-F         Display the function in the current frame.  You can also use (DBG:FUN).
     1:Show Value
0      c-m-V         Display the n'th value being returned from the frame that was trapped
                    on exit, where n is the numeric argument.  You can also use (DBG:VAL 1n0).
     1:Show Arglist
0      c-sh-A        Display the argument list of the function in the current frame.
     1:Show Source Code
0      c-X c-D       Show the source code for the function in the current frame.
     1:Show Compiled Code
0      c-X D         Show the disassembled code for the function in the current frame.

    DBG: functions (for examining//modifying current frame):
     (DBG:ARG 1n0)   Accesses the arguments of this frame by name or number.
     (DBG:LOC 1n0)   Accesses the local variables of this frame by name//number.
     (DBG:VAL 1n0)   Accesses the values being returned from this frame, by number.
     (DBG:FUN)     Accesses the function of the current frame.
    You can use SETF and LOCF on any of these forms.

    2Commands for stack motion (/"down/" means toward caller):
0     1:Top of Stack
0      m-<           Move to the top of the stack (the most recent frame).
		    Pushes the current frame onto the stack-frame PDL.
     1:Bottom of Stack
0      m->           Move to the bottom of the stack (the oldest frame).
		    Pushes the current frame onto the stack-frame PDL.
     1:Next Frame
0      c-N,      Move down a frame (takes numeric argument), skipping invisible frames.
      m-sh-N        Move down a frame, not skipping invisible frames.
      m-N           Move down a frame, displaying detailed information about it.
      c-m-N         Move down a frame, not hiding internal interpreter frames.
     1:Previous Frame
0      c-P, (3 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")<Return>0   Move up a frame (takes numeric argument), skipping invisible frames.
      m-sh-P        Move up a frame, not skipping invisible frames.
      m-P           Move up a frame, displaying detailed information about it.
      c-m-P         Move up a frame, not hiding internal interpreter frames.
      c-m-U         Move to the next frame that is not an internal interpreter frame.
     1:Find Frame
0      c-S           Search down from the current frame for one whose function name
                    contains a substring.  Skips over invisible frames.  c-3<minus>0 c-S
                    searches backwards.  Pushes the current frame onto the stack-frame PDL.
     1:Set Current Frame
0                    Set the current frame; you can also click on a stack-frame in a
                    backtrace to effect this.  Pushes the current frame onto the 
		    stack-frame PDL.

    2Commands for using the stack-frame PDL:
0     1:Push Frame PDL
0     c-Space        Push the current frame onto the stack-frame PDL.
     1:Pop Frame PDL
0     c-U c-Space    Pop the stack-frame PDL, and move to that frame.
     c-U c-U s-Space Discard the top element of the stack-frame PDL.
     1:Exchange Frame PDL
0     c-m-Space      Exchange the top element of the stack-frame PDL with the current frame.
     1:Show Frame PDL
0     c-0 c-Space    Show the contents of the stack-frame PDL.

    2Commands for general information display:
0     1:Show Backtrace
0      c-B           Display a brief backtrace, hiding invisible frames, but not censoring
                    continuation frames.
      c-sh-B        Display a brief backtrace of the stack, censoring invisible and internal
                    (continuation) frames.  Use a numeric argument to indicate how many
                    frames to display.
      m-B           Display a detailed backtrace of the stack.
      m-sh-B        Display a brief backtrace, without censoring invisible or continuation
                    frames.
      c-m-B         Display a detailed backtrace of the stack, including internal frames.
     1:Show Bindings
0      c-X B         Show this frame's special variable bindings.  Any argument means
                    display every frame's bindings.
     1:Show Standard Value Warnings
0                    Show information regarding any re-bound standard variables.
     1:Show Proceed Options
0                    Show all of the currently active proceed options.
     1:Show Condition Handlers
0                    Show this frame's condition handlers.  Any argument means display
                    every frame's handlers.
     1:Show Catch Blocks
0                    Show this frame's catch blocks.  Any argument means display every
                    frame's catch blocks.
     1:Show Lexical Environment
0                    Show the lexical environment of the current frame, as established
                    by the lexical ancestors of the frame.
     1:Show Instruction
0      c-m-I         Describe the instruction which just failed or will be executed next.
     1:Describe0 1Last
0      c-m-D         Describe the last thing which set the value of *.
     1:Symeval in Last Instance
0      c-X c-I       Evaluate a symbol as an instance variable in the context of the
                    last instance to have been typed out.
     1:Show Special
0                    Show the special variable binding of a symbol in the context of
                    the current frame.
     1:Use Lexical Environment
0     1:Use Dynamic Environment
0      c-X I         Toggle the state of *INHERIT-LEXICAL-ENVIRONMENT*.
     1:Analyze Frame
0      c-m-Z         /"Analyze/" the erring frame; this mostly uses some simple backward
                    dataflow analysis to locate the source of the current error.

    2Commands to continue execution:
0     1:Return
0      c-R           Return from the current frame.  Prompts for values as necessary.
     1:Reinvoke
0      c-m-R         Reinvoke the current frame.  A numeric argument means to prompt
                    for new arguments.
     1:Throw
0      c-T           Throw a value to a given tag.  (Note: you may also use THROW.)
     1:Proceed
0      ’        Take the Resume proceed handler, or return to the previous Debugger.
     1:Abort
0      ‘, c-Z    Restarts the innermost restart handler that handles SYS:ABORT.
     1:Enable Aborts
0     1:Disable Aborts
0                    Enables or disables the use of the Abort command

    2Trap on frame exit, etc., commands:
0     1:Set Trap on Exit
0      c-X E         Set trap-on-exit for the current frame.  A numeric argument
                    sets trap-on-exit for all outer frames, too.
     1:Clear Trap on Exit
0      c-X c-E       Clear trap-on-exit for the current frame.  A numeric argument
                    clears trap-on-exit for all outer frames, too.
     1:Set0 1Trap0 1on0 1Call
0      c-X C         Set the trap-on-call bit.
     1:Clear0 1Trap0 1on0 1Call
0      c-X c-C       Clear the trap-on-call bit.
     1:Proceed0 1Trap0 1on0 1Call
0      c-X m-C       Resume execution, but first set the trap-on-call bit.
     1:Restart0 1Trap0 1on0 1Call
0      c-X c-m-C     Restart the current frame, but first set the trap-on-call bit.
     1:Enable Condition Tracing
0     1:Disable Condition Tracing
0      c-X T         With a numeric argumemt, set TRACE-CONDITIONS to T, otherwise
                    clear it.  Conditionals possible.
     1:Monitor Variable
0     1:Unmonitor Variable
0                    These commands can be used to monitor a special variable in memory,
                    that is, when the location is read or written, the Debugger is entered.
                    If you want to monitor a specific location in memory, use the function
                    DBG:MONITOR-LOCATION.

    2Commands for dynamic breakpoints and stepping through compiled code:
0     1:Set Breakpoint
0                    Set a breakpoint.  Conditionals possible.
     1:Clear Breakpoint
0                    Clear a breakpoint.
     1:Clear All Breakpoints
0                    Clear all breakpoints.
     1:Show Breakpoints
0                    Show all breakpoints.
     1:Single0 1Step
0      c-sh-S        Execute a single instruction.  Note that this steps over function
                    calls, not into the called function.")
  (unless (neti:remote-terminal-p)
    (send standard-output :string-out "

    2Miscellaneous commands:
0     1:Set Stack Size
0                    Preset the size of a stack (control, binding, or data).

    2Commands to transfer to other systems:
0     1:Edit Function
0      c-E           Call the editor (ZMacs) to edit the current function.
     1:Mail Bug Report
0      c-M           Enter a mail sending context, putting stack frames into the message body.
     1:Enter Display Debugger
0      c-m-W         Enter the Display Debugger frame.

    2Commonly useful mouse gestures:
0     On Lisp objects in general,
       Mouse-Left selects the object (as though you typed it in),
       Mouse-Middle describes the object,
       sh-Mouse-Middle inspects the object,
       m-Mouse-Left edits the function for the frame,
       m-Mouse-Middle disassembles the function for the frame,
       c-m-sh-Left monitors the location of that object,
       c-m-sh-Middle unmonitors the location of that object.
     On stack-frames,
       Mouse-Left makes the frame be the current frame,
       sh-Mouse-Left selects the frame, but shows more information,
       Mouse-Middle shows the arguments with which the frame was called,
       Mouse-Right pops up a menu of other commands.
     On a function object,
       m-Mouse-Left edits the function,
       m-Mouse-Middle disassembles the function.
     On a PC displayed in disassembled code,
       c-m-Mouse-Left sets a breakpoint at that PC,
       c-m-Mouse-Middle clears a breakpont from that PC.
     Mouse-Left on a proceed option takes that proceed option.


"))
  (send standard-output :string-out "

     Additionally, different error conditions define commands that allow you
     to proceed in ways specific to the current error.  These commands appear
     after the error message and are usually assigned to /"super/" keys."))
