;;; -*- Mode: Lisp; Package: Debugger; Base: 8; Lowercase: Yes -*-

;;; Definitions for the Debugger and Condition System.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;; Macros used internally by the error system
;; Order of evaluation for EXP and BINDINGs are random
(defmacro with-stack-list-if (exp (var . binding) &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (cli::expand-if-macro exp env
    `(with-stack-list (,var ,@binding) ,@body)
    `(progn ,@body)
    (let ((gensym (gensym)))
      `(with-stack-list (,gensym ,@binding)
	 (let-if ,exp ((,var ,gensym))
	   ,@body)))))

(defmacro with-stack-list*-if (exp (var . binding) &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (cli::expand-if-macro exp env
    `(with-stack-list* (,var ,@binding) ,@body)
    `(progn ,@body)
    (let ((gensym (gensym)))
      `(with-stack-list* (,gensym ,@binding)
	 (let-if ,exp ((,var ,gensym))
	   ,@body)))))

(defmacro *catch-if (exp tag &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (cli::expand-if-macro exp env
    `(*catch ,tag ,@body)
    `(progn ,@body)
    `(*catch (if ,exp ,tag '|If you throw to this tag, you deserve to lose.|)
       ,@body)))

(defmacro catch-if (exp tag &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (cli::expand-if-macro exp env
    `(catch ,tag ,@body)
    `(progn ,@body)
    `(catch (if ,exp ,tag '|If you throw to this tag, you deserve to lose.|)
       ,@body)))

(defmacro condition-internal (exp handler &body body &environment env)
  (declare (compiler:do-not-record-macroexpansions))
  (cli::expand-if-macro exp env
    (let ((gensym (gensym)))
      `(with-stack-list* (,gensym ,handler *bound-handlers*)
	 (catch (%make-pointer dtp-locative ,gensym)
	   (let ((*bound-handlers* ,gensym))
	     ,@body))))
    `(progn ,@body)
    (let ((gensym (gensym)))
      (once-only (exp &environment env)
	`(with-stack-list* (,gensym ,handler *bound-handlers*)
	   (catch-if ,exp (%make-pointer dtp-locative ,gensym)
	     (let-if ,exp ((*bound-handlers* ,gensym))
	       ,@body)))))))

;; Obsolete.
(defmacro multiple-value-list-bind ((var form) &body body)
  `(stack-let ((,var ,form)) ,@body))

(defmacro multiple-value-vector ((vector &optional (initialize t)) &body form)
  `(multiple-value-call #'multiple-value-vector-fill ,vector ,initialize ,@form))

(defun multiple-value-vector-fill (vector initialize &rest values)
  (when initialize (setf (fill-pointer vector) 0))
  (loop for value in values
	counting 1
	doing (array-push-extend vector value)))


(defvar *error-handler-window*)

;; Variables which control debugger printing
(defconst *error-message-prinlevel* 2)		;These are used when printing error messages
(defconst *error-message-prinlength* 4)		; and values of variables in frames
(defconst *error-message-string-length* 100.)	;length beyond which strings are truncated
(defconst *function-prinlevel* 3)		;Used for printing LAMBDA expressions
(defconst *function-prinlength* 5)
(defconst *bug-report-prinlevel* 4)		;Used when printing frames into bug reports
(defconst *bug-report-prinlength* 10.)
(defconst *bug-report-string-length* 1000.)

(defconst *debugger-print-pretty* t)
(defconst *debugger-print-circle* nil)

(defconst *debugger-show-source-code* nil)

(defconst *emphasis-character-style* '(nil :bold nil))
(defconst *deemphasis-character-style* '(nil :italic nil))

(defvar-resettable *debug-io-override* nil)	;If non-NIL, stream used regardless of
						;DEBUG-IO.  No one should bind this!  It's
						;an escape to allow an expert, probably
						;working from the cold load stream, to
						;unwedge the debugger.

;; Variables bound during Debug loop
(defvar *reason-debugger-entered*)		;A string or NIL
(defvar-resettable *debugger-level* 0)		;Level of recursive debugger

(defvar-resettable *stack-frame-pdl* nil)

;; Variables used to prevent the variable monitor from looping
;; These are really defined in LDATA
;(defvar-resettable *printing-monitor-message* nil)
;(defvar *inhibit-monitoring-during-print* t)

;; "Emergency exit"
(defconst *debugger-level-cold-load-stream-threshold* 15.)
(defconst *debugger-level-break-threshold* 20.)
(defconst *debugger-level-emergency-break-threshold* 25.)
(defconst *debugger-level-halt-threshold* 30.)

;; Prevent recursive blowouts in MAKE-PROCEED-DISPATCH-TABLE
(defvar-resettable *inside-make-proceed-dispatch-table* nil)

(defvar *proceed-dispatch-table*)		;See MAKE-PROCEED-DISPATCH-TABLE

;; Structure to describe a breakpoint
;;--- Maybe PC should be the real DTP-EVEN/ODD-PC, pick it apart with
;;---  (LET* ((FUNCTION (%FIND-STRUCTURE-HEADER PC))
;;---	      (RELATIVE-PC (FUNCTION-RELATIVE-PC PC FUNCTION)) ... )
;;--- Then add a BREAKPOINT presentation-type
(defstruct (bpt :named :conc-name)
	   pc
	   instruction
	   #+imach data-type
	   (conditional #'true)
	   (action nil))

(defvar-resettable scl:*error-message-hook* nil)

;; Whether to print the one-line backtrace in the error message.  (user option)
(defvar *show-backtrace* nil)

;; Number of levels of backtrace to print automatically upon error.
(defconst *error-message-backtrace-length* 3)

;; Number of instructions to disassemble for M-L, etc., if we
;; can't determine the amount of room on the screen.
;; Also minimum number to be shown.
(defconst *disassemble-instruction-count* 10.)

;; Controls for backtrace censoring
(defvar *censor-invisible-frames* t)
(defvar *invisible-frame-types-to-show* nil)
(defvar *all-invisible-frame-types* '(:process-priority :accept-internals
				      :presentation-handler-search
				      :presentation-type-parser
				      :presentation-input-locking))
(defvar *combined-methods-are-invisible* nil)

;; Calls to these functions should not be mentioned as frames when
;; stack-censoring is going on in interpreted functions.  This should include
;; all functions that are part of the execution of the interpreted functions.
;; In other words, all functions that are part of the interpreter and
;; themselves call EVAL (including special forms that are not macros).
;; Digested special forms don't need to be in this list, they're handled specially.
;; The basic goal is to make the stack trace look the same as it would if the
;; function had been compiled.
;; Note well that this gets converted into a hash-table later on!
(defconst *uninteresting-functions*
	  '(funcall apply cl:apply lexpr-funcall send lexpr-send
	    eval si:*eval #+3600 si:call-funny-function si:digest-internal
	    let let* let-value let-if letf letf*
	    cond and or if when unless 
	    progv progw with-stack-list with-stack-list*
	    setq-globally progn block return return-from return-list
	    do do-named do* do*-named si:do-internal si:do-tagbody go setq prog prog*
	    si:apply-lambda si:apply-lambda-internal si:apply-lambda-method
	    si:evalhook1 si:applyhook1
	    si:labels si:flet si:macrolet
	    multiple-value multiple-value-bind multiple-value-call
	    multiple-value-prog1 %multiple-value-call-n multiple-value-list
	    throw catch *catch unwind-protect
	    breakon-this-time))
 
;; These proceed-types are tried for trivial errors.
(defvar *trivial-error-special-commands* '(:package-dwim))

;; When the debugger uses the cold load stream, save the screen in this array
(defvar cold-load-stream-saved-screen nil)

;; And SETQ this to the current process (or T)
(defvar-resettable saved-screen-process nil)

;; And SETQ this to the current debugger level.
(defvar-resettable saved-screen-level nil)

(defvar old-terminal-io)			;saved streams in debugger
(defvar old-standard-output)
(defvar old-standard-input)

(defvar *inherit-lexical-environment* t)
(defvar *variables-not-to-inherit*
	'(*restart-handlers* *bound-handlers* *default-handlers*
	  *proceed-dispatch-table* *variables-not-to-inherit*
	  *debugger-level* *inside-display-debugger*
	  *backtrace-pane-tick* *args-and-locals-pane-tick* *source-code-pane-tick*
	  *stack-frame-array* *stack-frame-pdl* *error*
	  #+imach *frame-array-index-cached-frame* #+imach *frame-array-index-cached-index*
	  *innermost-visible-frame* *innermost-interesting-frame*
	  *current-frame* *current-language* *previous-current-frame*
	  *debug-io-override* *numeric-arg-p* *numeric-arg*
	  *inherit-lexical-environment*
	  #+imach *step-from-breakpoint* #+imach *current-breakpoint-info*
	  sys:inhibit-scheduling-flag
	  dbg:*debugger-might-have-system-problems*
	  sys:*input-editor-options* rubout-handler
	  dw::*presentation-more-break-input-context*
	  si:xr-maintain-correspondence si:xr-correspondences
	  evalhook applyhook
	  ;; The SETQ of these really does happen in the error environment
	  * ** *** + ++ +++ // -))


(defvar *special-variables-not-to-inherit*
	'(* ** *** + ++ +++ // -
	  *restart-handlers* *bound-handlers* *default-handlers*
	  *proceed-dispatch-table*
	  *debugger-level*
	  *stack-frame-array* *stack-frame-pdl* *error*
	  #+imach *frame-array-index-cached-frame* #+imach *frame-array-index-cached-index*
	  #+imach *innermost-visible-frame* #+imach *innermost-interesting-frame*
	  *current-frame* *current-language* *previous-current-frame*
	  *debug-io-override* *numeric-arg-p* *numeric-arg*
	  *inherit-lexical-environment*))

(defun reset-debugger-variables ()
  (makunbound '*innermost-visible-frame*)
  (makunbound '*innermost-interesting-frame*)
  (makunbound '*frame*)
  (makunbound '*current-frame*)
  (makunbound '*stack-frame-array*)
  #+imach (makunbound '*frame-array-index-cached-frame*)
  #+imach (makunbound '*frame-array-index-cached-index*)
  (makunbound '*error*)
  (makunbound '*current-language*)
  (makunbound 'old-terminal-io)
  (makunbound 'old-standard-output)
  (makunbound 'old-standard-input))

(add-initialization "Reset debugger variables"
   '(reset-debugger-variables)
   '(:warm))


(defmacro print-carefully (type &body body)
  `(print-carefully-internal
     #'(lambda () (declare (sys:downward-function)) . ,body)
     ,type))

(defun print-carefully-internal (continuation type)
  (declare (sys:downward-funarg continuation))
  (multiple-value-bind (value error)
      (ignore-errors
	(si:allow-recursive-wired-ferror
	  (funcall continuation)))
     (cond (error
	    (multiple-value (nil error)
	      (ignore-errors
		(send standard-output :string-out "<<Error printing ")
		(if (stringp type)
		    (send standard-output :string-out type)
		    (princ type))
		(send standard-output :string-out ">>")))
	    (if error
		(use-cold-load-stream
		  (format nil "Error printing ~A")))))
     value))

;; Definitions for the Display Debugger

(defvar-resettable *inside-display-debugger* nil)

(defconst *backtrace-type* :ordinary)
(defconst *display-debugger-show-source-code* t)

(defmacro redisplay-tick (&rest ticks)
  (loop for tick in ticks
	collect `(incf ,tick) into incf-forms
	finally
	  (return `(progn ,@incf-forms))))

;; *BACKTRACE-PANE-TICK* is incremented whenever the backtrace pane is scrolled, or
;; whenever the highlighting arrow moves or the format of the backtrace changes.
(defvar *backtrace-pane-tick*)

;; *ARGS-AND-LOCALS-PANE-TICK* gets incremented whenever the args-and-local pane
;; is scrolled, or whenever an argument or local value changes (i.e., whenever a
;; Lisp form is executed), 
(defvar *args-and-locals-pane-tick*)

;; *SOURCE-CODE-PANE-TICK* gets incremented whenever the source-code pane is scrolled,
;; or whenever the highlighting arrow moves, or whenever the frame-function changes
(defvar *source-code-pane-tick*)

;; Redisplay this pane only when the inspect history changes
(defvar *inspect-history-pane-tick*)

;; Make this SETF'able.
(defgeneric (cl:setf display-debugger-displayed-code-for-frame) (display-debugger new-value))

;; Used by various macros.
(defun validate-conditions (conditions)
  (cl:check-type conditions (and (not null) (or symbol list)) "a list of conditions")
  (when (symbolp conditions)
    (setq conditions (list conditions)))
  (loop for condition in conditions
	do (flavor:check-flavor-name condition "condition"))
  conditions)

;;; Menu-driven proceed handlers

;; If the signalled error is built on any of these, then show a proceed
;; menu rather than entering the Debugger directly.  To disable this
;; feature, set *M-P-C* to NIL.  To enable it for all classes of errors,
;; set *M-P-C* to T.
(defvar *standard-menu-proceed-conditions*
	'(fs:file-operation-failure
	  fs:unknown-pathname-host
	  fs:host-not-accessible-for-file
	  fs:host-not-available
	  sys:host-not-responding
	  sys:unknown-host-name
	  tape:mount-error))
(defvar-resettable *menu-proceed-conditions* *standard-menu-proceed-conditions*)
(defvar *disable-menu-proceeding* nil)

;;; Executes the body with the specified conditions added to the list of conditions which,
;;; when signalled, cause the debugger to pop up its proceed menu.
(defmacro with-extra-debugger-menu-conditions (conditions &body body)
  (declare (arglist . ((conditions) &body body)))
  (let ((conditions (validate-conditions conditions)))
    `(with-stack-list* (dbg:*menu-proceed-conditions*
			 ,@(loop for condition in conditions collect `',condition)
			 dbg:*menu-proceed-conditions*)
       ,@body)))
