;;; -*- Mode: Lisp; Syntax: Zetalisp; Package: Debugger; Base: 10; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file contains the "macros" which standardize error table entries.
;;; The output of the macro is the same thing which goes into the trap dispatch table,
;;; in symbolic form.

(DEFMACRO DEFINE-ERROR-TABLE-ENTRY ((NAME &REST ARGS) &BODY DEFINITION)
  (WHEN (NULL DEFINITION)
    (SETQ DEFINITION `((DECLARE (IGNORE . ,ARGS))
		       '(,NAME))))
  `(DEFUN (:PROPERTY ,NAME ERROR-TABLE-ENTRY-EXPANDER) (,@ARGS)
     . ,DEFINITION))

;; Any trap signalling one of these conditions will set VMA-VALID.
(DEFVAR *VMA-VALID-CONDITIONS*
	'(TRAP-ON-EXIT
	  MEMORY-DATA-ERROR
	  BAD-CDR-CODE-IN-MEMORY
	  BYTE-ARRAY-WORD-TYPE-CHECK
	  FLAVOR-SEARCH-MASK-NOT-FIXNUM
	  FLAVOR-SEARCH-TABLE-POINTER-NOT-LOCATIVE
	  GENERIC-SEARCH-TABLE-ENTRY-NOT-PC
	  INSTANCE-FLAVOR-TABLE-CONTENTS-NOT-LOCATIVE
	  INTERPRETER-TABLE-CONTENTS-NOT-PC
	  LIST-OPERATION-TAIL-NOT-LIST
	  ASSOC-LIST-ELEMENT-NOT-LIST
	  SHALLOW-BINDING-OPERATION-IN-DEEP-BINDING-MODE))

;; Argument to %ALLOCATE-*-BLOCK not fixnum
(DEFINE-ERROR-TABLE-ENTRY (%ALLOCATE-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM)))

;; Either both arguments are not fixnum or operand-2 is 0
(DEFINE-ERROR-TABLE-ENTRY (%DIVIDE-BIGNUM-STEP-NOT-FIXNUM-OR-ZERO)
  '(OR (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM))
       (WRONG-TYPE-ARGUMENT 3 (DTP-FIXNUM))
       (DIVIDE-BY-ZERO)))

;; Operand 1 not instance and/or operand-2 not fixnum
(DEFINE-ERROR-TABLE-ENTRY (%INSTANCE-REFERENCE-TYPE-ERROR TYPE)
  (CL:ECASE TYPE
    (:BINARY         '(OR (WRONG-TYPE-ARGUMENT 1 (DTP-INSTANCE DTP-LIST-INSTANCE
						  DTP-STRING-INSTANCE DTP-ARRAY-INSTANCE))
			  (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM))))
    (:THREE-ARGUMENT '(OR (WRONG-TYPE-ARGUMENT 2 (DTP-INSTANCE DTP-LIST-INSTANCE
						  DTP-STRING-INSTANCE DTP-ARRAY-INSTANCE))
			  (WRONG-TYPE-ARGUMENT 3 (DTP-FIXNUM))))))

;; Signalled by memory-read or memory-read-address
;; (Use general decoder)
(DEFINE-ERROR-TABLE-ENTRY (%MEMORY-READ-TRANSPORT-AND-FIXNUM-TYPE-CHECK)
  '(MEMORY-DATA-ERROR))

;; Arg1 to %P-DPB or %P-TAG-DPB not fixnum
(DEFINE-ERROR-TABLE-ENTRY (%P-DPB-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-FIXNUM)))

;; Attempt to use ALOC on a non-object array.
(DEFINE-ERROR-TABLE-ENTRY (ALOC-NON-OBJECT-ARRAY))

;; Invalid arguments to AREF/ASET.
;; If arg2 is a bignum, that means subscript-out-of-bounds and wrong-type-argument.
(DEFINE-ERROR-TABLE-ENTRY (ARRAY-ACCESS-TYPE-CHECK TYPE)
  (CL:ECASE TYPE
    (:BINARY
      '(OR (WRONG-TYPE-ARGUMENT 1 (DTP-ARRAY DTP-ARRAY-INSTANCE DTP-STRING DTP-STRING-INSTANCE))
	   (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM))
	   (SUBSCRIPT-BOUNDS-ERROR)))
    (:THREE-ARGUMENT
      '(OR (WRONG-TYPE-ARGUMENT 2 (DTP-ARRAY DTP-ARRAY-INSTANCE DTP-STRING DTP-STRING-INSTANCE))
	   (WRONG-TYPE-ARGUMENT 3 (DTP-FIXNUM))
	   (SUBSCRIPT-BOUNDS-ERROR)))))

;;  ARRAY-LEADER-ACCESS-TYPE-CHECK		:three-argument, :binary
;;    -- Array not [array, array-instance, string, string-instance]
;;    -- and/or index not fixnum.  (Could signal OOB?)
(DEFINE-ERROR-TABLE-ENTRY (ARRAY-LEADER-ACCESS-TYPE-CHECK TYPE)
  (CL:ECASE TYPE
    (:BINARY
      '(OR (WRONG-TYPE-ARGUMENT 1 (DTP-ARRAY DTP-ARRAY-INSTANCE DTP-STRING DTP-STRING-INSTANCE))
	   (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM))))
    (:THREE-ARGUMENT
      '(OR (WRONG-TYPE-ARGUMENT 2 (DTP-ARRAY DTP-ARRAY-INSTANCE DTP-STRING DTP-STRING-INSTANCE))
	   (WRONG-TYPE-ARGUMENT 3 (DTP-FIXNUM))))))

;;  ARRAY-REGISTER-FORMAT-ERROR
;;    -- Event count not fixnum
;;    -- Register doesn't contain [array, array-instance, string, string-instance].
(DEFINE-ERROR-TABLE-ENTRY (ARRAY-REGISTER-FORMAT-ERROR))

;;  ARRAY-REGISTER-FORMAT-ERROR-OR-SUBSCRIPT-BOUNDS-ERROR
;;    -- Either limit not fixnum or subscript out of bounds (fast-aref, fast-aset).
(DEFINE-ERROR-TABLE-ENTRY (ARRAY-REGISTER-FORMAT-ERROR-OR-SUBSCRIPT-BOUNDS-ERROR)
  '(OR (ARRAY-REGISTER-FORMAT-ERROR)
       (SUBSCRIPT-BOUNDS-ERROR)))

;;  ASSOC-LIST-ELEMENT-NOT-LIST
;;    -- Like it says.
(DEFINE-ERROR-TABLE-ENTRY (ASSOC-LIST-ELEMENT-NOT-LIST))

;;  BAD-CDR-CODE-IN-MEMORY
;;    -- CDR-3 seen by a CDR operation.
(DEFINE-ERROR-TABLE-ENTRY (BAD-CDR-CODE-IN-MEMORY))

;;  BINARY-ARITHMETIC-OPERAND-TYPE-ERROR
;;    -- LOOP-INCREMENT-TOS-LESS-THAN
(DEFINE-ERROR-TABLE-ENTRY (BINARY-ARITHMETIC-OPERAND-TYPE-ERROR)
  `(OR (WRONG-TYPE-ARGUMENT 1 (DTP-FIXNUM DTP-SMALL-RATIO DTP-SINGLE-FLOAT DTP-DOUBLE-FLOAT
			       DTP-BIGNUM DTP-BIG-RATIO DTP-COMPLEX DTP-SPARE-NUMBER))
       (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM DTP-SMALL-RATIO DTP-SINGLE-FLOAT DTP-DOUBLE-FLOAT
			       DTP-BIGNUM DTP-BIG-RATIO DTP-COMPLEX DTP-SPARE-NUMBER))))

;;  BINARY-LEXICAL-ENVIRONMENT-TYPE-ERROR
;;    -- Arg2 to POP/MOVEM-LEXICAL-VAR-N not list or locative.
(DEFINE-ERROR-TABLE-ENTRY (BINARY-LEXICAL-ENVIRONMENT-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 2 (DTP-LIST DTP-LOCATIVE)))

;;  BIND-LOCATIVE-TYPE-ERROR
;;    -- Arg1 to BIND-LOCATIVE or BIND-LOCATIVE-TO-VALUE not locative
(DEFINE-ERROR-TABLE-ENTRY (BIND-LOCATIVE-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-LOCATIVE)))

;;  BINDING-STACK-OVERFLOW
;;    -- Obvious
(DEFINE-ERROR-TABLE-ENTRY (BINDING-STACK-OVERFLOW))

;;  BINDING-STACK-UNDERFLOW
;;    -- Attempt to unbind something not bound by this frame.
;;    -- (only caused by internal errors or compiler problems)
(DEFINE-ERROR-TABLE-ENTRY (BINDING-STACK-UNDERFLOW))

;;  BLOCK-READ-BINARY-OPERATION-TRANSPORT-AND-FIXNUM-TYPE-CHECK
;;    -- block-read-alu
(DEFINE-ERROR-TABLE-ENTRY (BLOCK-READ-BINARY-OPERATION-TRANSPORT-AND-FIXNUM-TYPE-CHECK)
  '(MEMORY-DATA-ERROR))

;;  BLOCK-READ-TEST-TRANSPORT-AND-FIXNUM-TYPE-CHECK
;;    -- block-read-test
(DEFINE-ERROR-TABLE-ENTRY (BLOCK-READ-TEST-TRANSPORT-AND-FIXNUM-TYPE-CHECK)
  '(MEMORY-DATA-ERROR))

;;  BLOCK-READ-TRANSPORT-AND-FIXNUM-TYPE-CHECK
;;    -- block-read, block-read-shift
(DEFINE-ERROR-TABLE-ENTRY (BLOCK-READ-TRANSPORT-AND-FIXNUM-TYPE-CHECK)
  '(MEMORY-DATA-ERROR))

;;  BRANCH-DOT-ERROR
;;    -- Executed ERROR-IF instruction
(DEFINE-ERROR-TABLE-ENTRY (BRANCH-DOT-ERROR))

;;  BYTE-ARRAY-WORD-TYPE-CHECK
;;    -- Word in fixnum/boolean/character array is not dtp-fixnum
;;    -- (aref, fast-aref, aset, fast-aset).
(DEFINE-ERROR-TABLE-ENTRY (BYTE-ARRAY-WORD-TYPE-CHECK))

;;  CAR-CDR-LIST-TYPE-ERROR
;;    -- Arg to CAR or CDR not nil, locative, list, or list-instance.
(DEFINE-ERROR-TABLE-ENTRY (CAR-CDR-LIST-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-NIL DTP-LOCATIVE DTP-LIST DTP-LIST-INSTANCE)))

;;  CHAR-DPB-TYPE-ERROR
;;    -- Arg1 not character and/or arg2 not fixnum
(DEFINE-ERROR-TABLE-ENTRY (CHAR-DPB-TYPE-ERROR)
  '(OR (WRONG-TYPE-ARGUMENT 1 (DTP-CHARACTER))
       (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM))))

;;  CHAR-LDB-TYPE-ERROR
;;    -- Argument to CHAR-LDB instruction was not a character
(DEFINE-ERROR-TABLE-ENTRY (CHAR-LDB-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-CHARACTER)))

;;  CHARACTER-ARRAY-ASET-TYPE-ERROR
;;    -- Attempt to store non-character in a character array
(DEFINE-ERROR-TABLE-ENTRY (CHARACTER-ARRAY-ASET-TYPE-ERROR))

;;  DIVIDE-BY-ZERO
;;    -- Division by zero
(DEFINE-ERROR-TABLE-ENTRY (DIVIDE-BY-ZERO))

;;  DIVIDE-OVERFLOW
;;    -- Overflow in %DIVIDE-BIGNUM-STEP
(DEFINE-ERROR-TABLE-ENTRY (DIVIDE-OVERFLOW))

;;  FAST-ARRAY-ACCESS-TYPE-CHECK
;;    -- array register control word not fixnum
;;    -- index to FAST-AREF/ASET not fixnum 
(DEFINE-ERROR-TABLE-ENTRY (FAST-ARRAY-ACCESS-TYPE-CHECK)
  '(OR (ARRAY-REGISTER-FORMAT-ERROR)
       (WRONG-TYPE-ARGUMENT INDEX (DTP-FIXNUM))))

;;  FIXNUM-ARRAY-ASET-TYPE-ERROR
;;    -- Attempt to store non-fixnum in a fixnum array
(DEFINE-ERROR-TABLE-ENTRY (FIXNUM-ARRAY-ASET-TYPE-ERROR))

;;  FLAVOR-SEARCH-MASK-NOT-FIXNUM
;;    -- Like it says.
(DEFINE-ERROR-TABLE-ENTRY (FLAVOR-SEARCH-MASK-NOT-FIXNUM CYCLE-TYPE)
  (DECLARE (IGNORE CYCLE-TYPE))
  '(FLAVOR-SEARCH-MASK-NOT-FIXNUM))

;;  FLAVOR-SEARCH-TABLE-POINTER-NOT-LOCATIVE	cycle-type
;;    -- Like it says.
(DEFINE-ERROR-TABLE-ENTRY (FLAVOR-SEARCH-TABLE-POINTER-NOT-LOCATIVE CYCLE-TYPE))

;;  FRAME-OVERFLOW
;;    -- RETURN instruction detected frame overflow
(DEFINE-ERROR-TABLE-ENTRY (FRAME-OVERFLOW))

;;  GENERIC-SEARCH-TABLE-ENTRY-NOT-PC		cycle-type
;;    -- Didn't find a PC in the hash table.
(DEFINE-ERROR-TABLE-ENTRY (GENERIC-SEARCH-TABLE-ENTRY-NOT-PC CYCLE-TYPE))

;;  I-STAGE-ERROR
;;    -- Odd PC in full-word instruction
;;    -- SEQUENCING-FENCE executed
(DEFINE-ERROR-TABLE-ENTRY (I-STAGE-ERROR))

;;  ILLEGAL-FULL-WORD-INSTRUCTION		data-type-name
;;    -- Like it says.
(DEFINE-ERROR-TABLE-ENTRY (ILLEGAL-FULL-WORD-INSTRUCTION DATA-TYPE-NAME))

;;  ILLEGAL-INSTANCE-VARIABLE-INDEX-FROM-MEMORY
;;    -- %INSTANCE-* index out of bounds
(DEFINE-ERROR-TABLE-ENTRY (ILLEGAL-INSTANCE-VARIABLE-INDEX-FROM-MEMORY)
  '(SUBSCRIPT-BOUNDS-ERROR))

;;  INSTANCE-FLAVOR-TABLE-CONTENTS-NOT-LOCATIVE
;;    -- Applied generic function to non-instance, table for that data 
;;    -- type contains nonlocative.
(DEFINE-ERROR-TABLE-ENTRY (INSTANCE-FLAVOR-TABLE-CONTENTS-NOT-LOCATIVE CYCLE-TYPE))

;;  INTERPRETER-TABLE-CONTENTS-NOT-PC
;;    -- Like it says.
(DEFINE-ERROR-TABLE-ENTRY (INTERPRETER-TABLE-CONTENTS-NOT-PC))

;;  LIST-OPERATION-TAIL-NOT-LIST
;;    -- ASSOC, MEMBER, or RGETF tried to take the CDR of a nonlist.
(DEFINE-ERROR-TABLE-ENTRY (LIST-OPERATION-TAIL-NOT-LIST))

;;  MAPPING-TABLE-INDEX-OUT-OF-BOUNDS
;;    -- Index is immediate argument.
(DEFINE-ERROR-TABLE-ENTRY (MAPPING-TABLE-INDEX-OUT-OF-BOUNDS)
  '(SUBSCRIPT-BOUNDS-ERROR))

;;  MEMORY-DATA-ERROR				cycle-type
;;    -- You name it.
(DEFINE-ERROR-TABLE-ENTRY (MEMORY-DATA-ERROR CYCLE-TYPE)
  (DECLARE (IGNORE CYCLE-TYPE))
  '(MEMORY-DATA-ERROR))

;;  NON-16-BIT-CHARACTER
;;    -- Attempt to store a character into an ART-STRING-16 array when
;;    -- the high 16 bits of aren't zero.
(DEFINE-ERROR-TABLE-ENTRY (NON-16-BIT-CHARACTER))

;;  NON-8-BIT-CHARACTER
;;    -- Attempt to store a character into an ART-STRING-8 array when
;;    -- the high 24 bits of aren't zero.
;;    -- (Note that 4,2,1-bit character arrays don't check!)
(DEFINE-ERROR-TABLE-ENTRY (NON-8-BIT-CHARACTER))

;;  ONE-OPERAND-FIXNUM-TYPE-ERROR
;;    -- push-address-sp-relative, unbind-n, return-n, return-kludge not fixnum
(DEFINE-ERROR-TABLE-ENTRY (ONE-OPERAND-FIXNUM-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-FIXNUM)))

;;  ONE-OPERAND-LIST-TYPE-ERROR
;;    -- ENDP arg not nil, list, list-instance
(DEFINE-ERROR-TABLE-ENTRY (ONE-OPERAND-LIST-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-NIL DTP-LIST DTP-LIST-INSTANCE)))

;;  OPERAND-1-TYPE-ERROR			list-of-data-types
;;    -- STORE-CONDITIONAL arg1 not dtp-locative
(DEFINE-ERROR-TABLE-ENTRY (OPERAND-1-TYPE-ERROR DATA-TYPES)
  `(WRONG-TYPE-ARGUMENT 1 ,DATA-TYPES))

;;  OPERAND-LOCATIVE-TYPE-ERROR
;;    -- Argument to %restore-binding-stack not a locative
(DEFINE-ERROR-TABLE-ENTRY (OPERAND-LOCATIVE-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-LOCATIVE)))

;;  RPLACA-RPLACD-LIST-TYPE-ERROR
;;    -- Argument to RPLACA/RPLACD not locative, list, list-instance
(DEFINE-ERROR-TABLE-ENTRY (RPLACA-RPLACD-LIST-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-LOCATIVE DTP-LIST DTP-LIST-INSTANCE)))

;;  SELF-MAPPING-TABLE-TYPE-ERROR
;;    -- SELF-MAPPING-TABLE was not an array
(DEFINE-ERROR-TABLE-ENTRY (SELF-MAPPING-TABLE-TYPE-ERROR))

;;  SELF-TYPE-ERROR
;;    -- SELF was not an instance.
(DEFINE-ERROR-TABLE-ENTRY (SELF-TYPE-ERROR))

;;  SET-TO-CAR-CDR-LIST-TYPE-ERROR
;;    -- SET-TO-CDR-PUSH-CAR arg not nil, locative, list, list-instance
(DEFINE-ERROR-TABLE-ENTRY (SET-TO-CAR-CDR-LIST-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-NIL DTP-LOCATIVE DTP-LIST DTP-LIST-INSTANCE)))

;;  SETUP-ARRAY-OPERAND-NOT-ARRAY
;;    -- Arg not [array, array-instance, string, string-instance]
(DEFINE-ERROR-TABLE-ENTRY (SETUP-ARRAY-OPERAND-NOT-ARRAY)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-ARRAY DTP-ARRAY-INSTANCE DTP-STRING DTP-STRING-INSTANCE)))

;;  SHALLOW-BINDING-OPERATION-IN-DEEP-BINDING-MODE
;;    -- Internal
(DEFINE-ERROR-TABLE-ENTRY (SHALLOW-BINDING-OPERATION-IN-DEEP-BINDING-MODE))

;;  STACK-BLT-TYPE-ERROR
;;    -- Either argument to STACK-BLT or STACK-BLT-ADDRESS not a locative
(DEFINE-ERROR-TABLE-ENTRY (STACK-BLT-TYPE-ERROR)
  '(OR (WRONG-TYPE-ARGUMENT 1 (DTP-LOCATIVE))
       (WRONG-TYPE-ARGUMENT 2 (DTP-LOCATIVE))))

;;  SUBSCRIPT-BOUNDS-ERROR
;;    -- Array index out of bounds for AREF-1, ASET-1, ALOC-1, 
;;    -- ARRAY-LEADER, STORE-ARRAY-LEADER, ALOC-LEADER.
(DEFINE-ERROR-TABLE-ENTRY (SUBSCRIPT-BOUNDS-ERROR))

;;  TAKE-VALUES-TYPE-ERROR
;;    -- TOS not fixnum (multiple value group) or not fixnum arg to TAKE-VALUES.
(DEFINE-ERROR-TABLE-ENTRY (TAKE-VALUES-TYPE-ERROR))

;;  THREE-OPERAND-FIXNUM-TYPE-ERROR
;;    -- First arg to %DIVIDE-BIGNUM-STEP not fixnum.
;;    --   (Others via %DIVIDE-BIGNUM-STEP-NOT-FIXNUM-OR-ZERO.)
;;    -- Some argument to %ADD-BIGNUM-STEP, %SUB-BIGNUM-STEP, %LSHC-BIGNUM-STEP not fixnum.
(DEFINE-ERROR-TABLE-ENTRY (THREE-OPERAND-FIXNUM-TYPE-ERROR)
  '(OR (WRONG-TYPE-ARGUMENT 1 (DTP-FIXNUM))
       (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM))
       (WRONG-TYPE-ARGUMENT 3 (DTP-FIXNUM))))

;;  TOO-FEW-ARGUMENTS
;;    -- Detected by entry instruction or message/generic dispatch.
(DEFINE-ERROR-TABLE-ENTRY (TOO-FEW-ARGUMENTS))

;;  TOO-MANY-ARGUMENTS
;;    -- Detected by entry instruction or message/generic dispatch.
(DEFINE-ERROR-TABLE-ENTRY (TOO-MANY-ARGUMENTS))

;;  TRAP-ON-EXIT
;;    -- This runs in extra-stack mode.
(DEFINE-ERROR-TABLE-ENTRY (TRAP-ON-EXIT))

;;  TWO-OPERAND-FIXNUM-TYPE-ERROR
;;    -- Either arg to %MULTIPLY-DOUBLE, %MULTIPLY-BIGNUM-STEP, LSH, ROT, %32-BIT-PLUS,
;;    -- %32-BIT-DIFFERENCE not fixnum
(DEFINE-ERROR-TABLE-ENTRY (TWO-OPERAND-FIXNUM-TYPE-ERROR)
  '(OR (WRONG-TYPE-ARGUMENT 1 (DTP-FIXNUM))
       (WRONG-TYPE-ARGUMENT 2 (DTP-FIXNUM))))

;;  UNARY-ARITHMETIC-OPERAND-TYPE-ERROR
;;    -- LDB, INCREMENT, DECREMENT, UNARY-MINUS, LOOP-DECREMENT-TOS arg not number.
;;--- This is wrong for LDB!
(DEFINE-ERROR-TABLE-ENTRY (UNARY-ARITHMETIC-OPERAND-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-FIXNUM DTP-SMALL-RATIO DTP-SINGLE-FLOAT DTP-DOUBLE-FLOAT
			   DTP-BIGNUM DTP-BIG-RATIO DTP-COMPLEX DTP-SPARE-NUMBER)))

;;  UNARY-LEXICAL-ENVIRONMENT-TYPE-ERROR
;;    -- Argument to PUSH-LEXICAL-VAR-N not list or locative
(DEFINE-ERROR-TABLE-ENTRY (UNARY-LEXICAL-ENVIRONMENT-TYPE-ERROR)
  '(WRONG-TYPE-ARGUMENT 1 (DTP-LIST DTP-LOCATIVE)))

;;  UNARY-OPERAND-TYPE-ERROR			list-of-data-types
;;    -- %JUMP arg not (dtp-even-pc dtp-odd-pc)
(DEFINE-ERROR-TABLE-ENTRY (UNARY-OPERAND-TYPE-ERROR DATA-TYPES)
  `(WRONG-TYPE-ARGUMENT 1 ,DATA-TYPES))

;;  UNKNOWN-INTERNAL-REGISTER
;;    -- Register number (index) is immediate argument.
(DEFINE-ERROR-TABLE-ENTRY (UNKNOWN-INTERNAL-REGISTER)
  '(SUBSCRIPT-BOUNDS-ERROR))

;;  UNKNOWN-DOUBLE-FLOAT-OP
;;    -- Register number (index) is immediate argument.
(DEFINE-ERROR-TABLE-ENTRY (UNKNOWN-DOUBLE-FLOAT-OP)
  '(SUBSCRIPT-BOUNDS-ERROR))
