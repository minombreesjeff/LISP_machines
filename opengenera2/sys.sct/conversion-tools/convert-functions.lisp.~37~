;;; -*- Mode: LISP; Syntax: Common-lisp; Package: CONVERSION-TOOLS; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor conversion-set
	(name pretty-name
	 (search-strings nil)
	 search-strings-are-explicit
	 (default-conversions nil)
	 (symbol-conversions (make-hash-table))
	 (funarg-conversions (make-hash-table))
	 (function-conversions (make-hash-table)))
	()
  :readable-instance-variables
  (:writable-instance-variables default-conversions)
  (:initable-instance-variables name pretty-name search-strings default-conversions))

(defun make-conversion-set (name &rest options)
  (declare (arglist name flavor
		    &key pretty-name search-strings default-conversions
		    &allow-other-keys))
  (apply #'make-instance name :name name options))

(defmethod (make-instance conversion-set) (&rest ignore)
  (unless (variable-boundp pretty-name)
    (setq pretty-name (string-capitalize (string name))))
  (setq search-strings-are-explicit (not (null search-strings))))

(defprop define-conversion-set "Conversion set" definition-type-name)

(defmacro define-conversion-set (set-name symbol-macro function-macro
				 &rest options
				 &key funarg-macro message-macro (send-functions '(send))
				 pretty-name
				 &allow-other-keys)
  (declare (arglist set-name symbol-macro function-macro
		    &key funarg-macro message-macro send-functions pretty-name
			 search-strings default-conversions))
  (when (and message-macro (not function-macro))
    (error "Conversion set ~S cannot have a message-macro without a function-macro"
	   set-name))
  (setq options (si:rem-keywords options '(:funarg-macro :message-macro :send-functions)))
  `(sys:multiple-definition ,set-name define-conversion-set
     (defflavor ,set-name () (conversion-set))
     (add-conversion-set ',set-name . ,options)
     ,@(when symbol-macro
	 `((defprop ,symbol-macro ,(format nil "~@[~A ~]symbol conversion" pretty-name)
		    si:definition-type-name)
	   (defmacro ,symbol-macro (old-symbol new-symbol)
	     `(add-symbol-conversion ',',set-name ',old-symbol ',new-symbol))
	   (defun (,symbol-macro zwei:kill-definition) (symbol)
	     (remove-symbol-conversion ',set-name symbol))))
     ,@(when funarg-macro
	 `((defmacro ,funarg-macro (name &body new-function-or-options)
	     (declare (arglist name &key ,@(remove ':area (flavor:flavor-allowed-init-keywords
							    'funarg-conversion))))
	     (if (null (cdr new-function-or-options))
		 `(add-funarg-conversion ',',set-name ',name
					 :new-function ',(first new-function-or-options))
		 `(add-funarg-conversion ',',set-name ',name
					 ,@(loop for (kwd val) on new-function-or-options
							  by #'cddr
						 collect kwd
						 collect `',val))))))
     ,@(when function-macro
	 `((defmacro ,function-macro (name template &body form-or-options)
	     (declare (arglist name template
			       ,@(member '&key (arglist 'define-function-conversion))))
	     `(sys:local-declare ((sys:function-parent ,name ,',function-macro))
		,(if (null (cdr form-or-options))
		     `(define-function-conversion ,',set-name ,name ,template
						  :form ,(first form-or-options))
		     `(define-function-conversion ,',set-name ,name ,template
						  . ,form-or-options))))))
     ,@(when message-macro
	 (define-message-conversion-set-internal set-name function-macro message-macro
						 send-functions))))

(defmethod (with-additional-conversion-state conversion-set) (continuation)
  (funcall continuation))

(defmethod (alter-conversion-set conversion-set) (&rest options)
  (setq search-strings-are-explicit nil)
  (loop for (key val) on options by 'cddr do
    (case key
      (:pretty-name (setq pretty-name val))
      (:search-strings (setq search-strings val search-strings-are-explicit t))
      (:default-conversions
	(setq default-conversions (loop for symbol in val
					collect (or (dolist (old default-conversions)
						      (when (and (not (symbolp old))
								 (eq (function-conversion-name
								       old)
								     symbol))
							(return old)))
						    symbol)))))))

(defmethod (add-search-string conversion-set) (symbol)
  (unless search-strings-are-explicit
    (pushnew (symbol-name symbol) search-strings
	     :test (lambda (new old) (string-search old new)))))

(compile-flavor-methods conversion-set)

(defvar *conversion-sets* (make-hash-table))
(defvar *conversion-state*)

;; To avoid asking the same question twice for the same form when there
;; is more than applicable conversion, which happens somehow
(defvar *verify-message-conversion-flavor-cache*)

(defun find-conversion-set (name)
  (etypecase name
    (symbol (gethash name *conversion-sets*))
    (conversion-set name)))

(defsetf find-conversion-set (name) (set)
  `(setf (gethash ,name *conversion-sets*) ,set))

(defun add-conversion-set (name &rest options)
  (let ((old (find-conversion-set name)))
    (if old
	(apply #'alter-conversion-set old options)
	(setf (find-conversion-set name)
	      (apply #'make-conversion-set name options)))))

(define-presentation-type conversion-set ()
   :no-deftype t
   :history t
   :printer ((set stream)
	     (write-string (conversion-set-pretty-name set) stream))
   :description "a function conversion set"
   :parser ((stream)
	    (values
	      (dw:completing-from-suggestions (stream)
		(maphash #'(lambda (ignore set)
			     (dw:suggest (conversion-set-pretty-name set) set))
			 *conversion-sets*)))))

(defsubst symbol-conversion (set-name symbol)
  (gethash symbol (conversion-set-symbol-conversions (find-conversion-set set-name))))

(defun add-symbol-conversion (set-name old-symbol new-symbol)
  (let ((set (find-conversion-set set-name)))
    (setf (symbol-conversion set-name old-symbol) new-symbol)
    (add-search-string set old-symbol)))

(defun remove-symbol-conversion (set-name symbol)
  ;; This doesn't try to undo the string search part because there might be
  ;; other contributors to the same search string and it might not in general
  ;; be reliable to remove it.
  (remhash symbol (conversion-set-symbol-conversions (find-conversion-set set-name))))

(defmacro destructuring-bind-carefully (pattern object &body body)
  `(block destructuring-bind-carefully
     ;; Must bind a variable to the pattern here, rather than referencing the constant
     ;; directly from the condition-bind handler, because the compiler copies the constant
     ;; making a separate copy for each function that references it.
     (let ((destructuring-bind-carefully-pattern ',pattern))
       (condition-bind ((si:destructuring-bind-argument-error
			  #'(lambda (error)
			      (declare (sys:downward-function))
			      (when (and (eq (first (send error :format-args)) ,object)
					 (eq (second (send error :format-args))
					     destructuring-bind-carefully-pattern))
				(return-from destructuring-bind-carefully nil)))))
	 (destructuring-bind ,pattern ,object
	   . ,body)))))

(defmacro define-function-conversion (set-name function template
				      &rest args
				      &key form name modification-depth
				      documentation documentation-level documentation-length)
  (ignore documentation documentation-level documentation-length modification-depth)
  (unless name
    (setq name (fintern "~A-~A-CONVERTER" function set-name)))
  `(progn
     (defun ,name (form)
       (destructuring-bind-carefully (function-name . ,template) form
	 (ignore function-name)
	 ,form))
     (add-function-conversion ',set-name ',function :name ',name
			      . ,(zwei:some-plist args '(:modification-depth
							 :documentation
							 :documentation-level
							 :documentation-length)))))

(defflavor function-conversion
	(name
	 (modification-depth 1)
	 (documentation "The default")
	 (documentation-level :default)
	 (documentation-length :default))
	()
  :readable-instance-variables
  :initable-instance-variables
  )

(defmethod (sys:print-self function-conversion) (stream print-depth slashify-p)
  (declare (ignore print-depth))
  (if slashify-p
      (future-common-lisp:print-unreadable-object (self stream :type t :identity t)
	(prin1 name stream))
      (prin1 name stream)))

(defsubst function-conversions (set-name function)
  (gethash function (conversion-set-function-conversions (find-conversion-set set-name))))

(defun add-function-conversion (set-name function &rest options)
  (let* ((set (find-conversion-set set-name))
	 (conversion (apply #'make-instance 'function-conversion options)))
    (pushnew conversion (function-conversions set function)
	     :key #'function-conversion-name :replace t)
    (add-search-string set function)
    (loop for list on (conversion-set-default-conversions set)
	  do
      (let ((entry (first list)))
	(when (eq (function-conversion-name conversion)
		  (if (symbolp entry) entry (function-conversion-name entry)))
	  (setf (first list) conversion))))))

;; There is no interface to this in ZWEI:KILL-DEFINITION because there is no way
;; to distinguish the different names of the converters based only on the CADR of the form.
;; You have to call this manually if you need it. -kmp 26-Oct-92
(defun remove-function-conversion (set-name function &optional name)
  (let ((set (find-conversion-set set-name)))
    (unless name (setq name (fintern "~A-~A-CONVERTER" function set-name)))
    (setf (function-conversions set function)
	  (delete name (function-conversions set function) :key #'function-conversion-name))
    ;; Don't bother removing search strings
    (setf (conversion-set-default-conversions set)
	  (delete-if #'(lambda (x)
			 (if (symbolp x) (eq x name) (eq x (function-conversion-name x))))
		     (conversion-set-default-conversions set)))))

(defun form-conversions (set-name form)
  (let ((set (find-conversion-set set-name))
	(possible nil)
	(*verify-message-conversion-flavor-cache* nil))
    (labels ((try (converter)
	       (multiple-value-bind (new-form hints)
		   (function-conversion-convert-form converter form)
		 (cond ((null new-form))		;failed
		       ((eq new-form 'possibilities)	;recursive converters
			(mapc #'try hints))
		       (t (push (list new-form converter hints) possible))))))
      (mapc #'try (function-conversions set (car form)))
      (mapc #'try (conversion-set-default-conversions set))
      (let ((new-function (symbol-conversion set (car form))))
	(when new-function
	  (push (list (cons new-function (cdr form)) nil nil) possible)))
      possible)))

(defmethod (function-conversion-convert-form function-conversion) (form)
  (funcall name form))

(defflavor funarg-conversion
	(new-function)
	(function-conversion)
  :readable-instance-variables
  :initable-instance-variables
  )

(defsubst funarg-conversions (set-name function)
  (gethash function (conversion-set-funarg-conversions (find-conversion-set set-name))))

(defun add-funarg-conversion (set-name function &rest options)
  (unless (getf options :new-function)
    (error "No :new-function specified for funarg-conversion of ~S in ~S" function set-name))
  (unless (getf options :name)
    (setq options `(:name ,(fintern "~A-FUNARG-CONVERTER" function)
		    ,@options)))
  (let* ((set (find-conversion-set set-name))
	 (conversion (apply #'make-instance 'funarg-conversion options)))
    (pushnew conversion (funarg-conversions set function)
	     :key #'function-conversion-name :replace t)
    (add-search-string set function)))

(defun remove-funarg-conversion (set-name function &optional name)
  (let ((set (find-conversion-set set-name)))
    (unless name (setq name (fintern "~A-FUNARG-CONVERTER" function)))
    ;; Don't worry about removing search strings
    (setf (funarg-conversions set function)
	  (delete name (funarg-conversions set function) :key #'function-conversion-name))))

(defmethod (function-conversion-convert-form funarg-conversion) (form)
  (declare (ignore form))
  new-function)

(defun write-form-where-different (form original-form
				   &optional (length :default) (level :default)
				   &aux (any-special-case nil) (all-special-case t))
  ;; Kludge the case of (name (options...) body...) where the bodies are the
  ;; same but the options are different--the algorithm below would set length to 2,
  ;; preventing proper printing of the options.  CL's WRITE isn't general enough.
  (when (and (eq length :default) (eq level :default)
	     (consp form) (consp (cdr form)) (consp (cddr form))
	     (consp original-form) (consp (cdr original-form)) (consp (cddr original-form))
	     (equal (cddr form) (cddr original-form))
	     (consp (second form)) (consp (second original-form))
	     (not (equal (second form) (second original-form))))
    (write-string "(")
    (write (first form))
    (write-string " ")
    (write-form-where-different (second form) (second original-form))
    (write-string " ...)")
    (return-from write-form-where-different form))

  (when (eq length :default)
    (setq length (loop for x on form
		       for y on original-form
		       for i from 0
		       while (consp x)
		       while (consp y)
		       when (equal x y)
			 return i
		       when (and (eq level :default) all-special-case
				 (consp (car x)) (consp (car y)))
			 do ;; check for a weird special case invoked by typecase
			    (if (equal (cdar x) (cdar y))
				(setq any-special-case t)
				(setq all-special-case nil))
		       finally (return nil))))
  (when (eq level :default)
    (if (and any-special-case all-special-case)
	(setq level 2)
	(setq level nil)))
  (write form :length length :level level))

(defun function-conversion-print-form (form original-form conversion)
  (if conversion
      (function-conversion-print-form-internal conversion form original-form)
      (write-form-where-different form original-form)))

(defmethod (function-conversion-print-form-internal function-conversion) (form original-form)
  (write-form-where-different form original-form documentation-length documentation-level))

(defun function-conversion-document-form (form original-form conversion)
  (if conversion
      (function-conversion-document-form-internal conversion form original-form)
      (write-string "The default")))

(defmethod (function-conversion-document-form-internal function-conversion) (&rest ignore)
  (write-string documentation))

(defmacro define-message-conversion-set (set-name message-macro
					 &rest options &key (send-functions '(send))
					 &allow-other-keys)
  (declare (arglist set-name message-macro &key (send-functions '(send)) pretty-name
						search-strings default-conversions))
  (let ((function-macro (fintern "DEFINE-~A-INTERNAL-CONVERSION-FUNCTION" set-name)))
    `(sys:multiple-definition ,set-name define-message-conversion-set
       (define-conversion-set ,set-name nil ,function-macro ,@options)
       ,@(define-message-conversion-set-internal set-name function-macro message-macro
						 send-functions))))

(defun define-message-conversion-set-internal (set-name function-macro message-macro
					       send-functions)
  (let ((message-table-name (fintern "*~A-MESSAGE-CONVERTERS*" set-name)))
    `((defvar ,message-table-name)
      (unless (boundp ',message-table-name)
	(setq ,message-table-name (make-hash-table)))
      (defmacro ,message-macro (message template &rest args)
	(declare (arglist message template &key form name modification-depth flavor
						documentation
						documentation-level documentation-length))
	(when (= (length args) 1)
	  (setq args `(:form ,(first args))))
	(destructuring-bind (&key name form flavor &allow-other-keys) args
	  (unless name
	    (setq name (fintern "~A-~A-MESSAGE-CONVERTER" message ',set-name)))
	  (labels ((check-flavor (symbol)
		     (unless (and (symbolp symbol)
				  (or (get symbol 'deftype)
				      (flavor:find-flavor symbol nil)
				      (clos:find-class symbol nil)))
		       (let ((compiler:default-warning-function message)
			     (compiler:default-warning-definition-type ',message-macro))
			 (warn "~S is neither the name of a type nor (OR D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")type-name0...)~@
				in the :FLAVOR option to ~S" symbol ',message-macro)))))
	    (cond ((null flavor))
		  ((and (listp flavor) (eq (first flavor) 'or))
		   (mapc #'check-flavor (rest flavor)))
		  (t (check-flavor flavor))))
	  `(progn
	     (defun ,name (object-and-args)
	       (declare (sys:function-parent ,message ,',message-macro))
	       (destructuring-bind-carefully ,template object-and-args
		 ,(if flavor
		      `(when (verify-message-conversion-flavor ',message
							       (first object-and-args)
							       ',flavor
							       (rest object-and-args))
			 ,form)
		      form)))
	     (add-message-conversion ',message ,',message-table-name
				     :name ',name
				     . ,(zwei:some-plist args '(:modification-depth
								:documentation
								:documentation-level
								:documentation-length))))))
      ,@(loop for function in send-functions
	      collect `(,function-macro ,function (object message &rest args)
			 :form (progn
				 (ignore object args)
				 (get-message-conversions message ,message-table-name)))))))

(defun get-message-conversions (message table)
  (when (or (keywordp message)
	    (and (consp message)
		 (eq (first message) 'quote)
		 (= (length message) 2)
		 (symbolp (setq message (second message)))))
    (let ((converters (gethash message table)))
      (when converters
	(values 'possibilities converters)))))

(defun add-message-conversion (message table &rest options)
  (let ((conversion (apply #'make-instance 'message-conversion options)))
    (pushnew conversion (gethash message table)
	     :key #'function-conversion-name :replace t)))

(defflavor message-conversion () (function-conversion))

(defmethod (function-conversion-convert-form message-conversion) (form)
  (destructuring-bind-carefully (object message &rest args) (cdr form)
    (declare (ignore message))
    (funcall name (cons object args))))

(defun verify-message-conversion-flavor (message receiver flavor arguments)
  (declare (ignore message arguments))
  (when (and *verify-message-conversion-flavor-cache*
	     (eq (first *verify-message-conversion-flavor-cache*) receiver)
	     (eq (second *verify-message-conversion-flavor-cache*) flavor))
    (return-from verify-message-conversion-flavor
      (third *verify-message-conversion-flavor-cache*)))
  (let ((answer (or (if (atom flavor)
			(eq receiver flavor)	;a heuristic about variable naming
			(member receiver (cdr flavor)))
		    (loop for known in (cdr (assoc receiver
						   (getf *conversion-state* 'form-flavors)
						   :test #'equal))
			  thereis (if (atom flavor)
				      (eq known flavor)
				      (member known (cdr flavor))))
		    (let* ((end-receiver (zwei:forward-sexp (zwei:point) 2 t -1))
			   (start-receiver (zwei:forward-sexp end-receiver -1 t))
			   (*query-io* *standard-output*))
		      (zwei:show-interval-in-context start-receiver end-receiver)
		      (case (fquery `(:type :readline
				      :no-input-save t
				      :choices ((t "Yes") (nil "No") (always "Always"))
				      :help-function
				      ,(lambda (stream)
					 (format stream
					   "~&Yes     Assume the type just once.~@
					      Always  Assume every ~S is of this type.~@
					      No      Don't perform this message conversion."
					   receiver)))
				    "Can the value of ~S be assumed to be of type ~S? "
				    receiver flavor)
			((t) t)
			((nil) nil)
			((always)
			 (let ((entry (assoc receiver (getf *conversion-state* 'form-flavors)
					     :test #'equal)))
			   (unless entry
			     (push (setq entry (ncons receiver))
				   (getf *conversion-state* 'form-flavors)))
			   (if (atom flavor)
			       (push flavor (cdr entry))
			       (dolist (flavor (cdr flavor)) ;OR, AND, what's the difference?
				 (push flavor (cdr entry))))
			   t)))))))
    (setq *verify-message-conversion-flavor-cache* (list receiver flavor answer))
    answer))
