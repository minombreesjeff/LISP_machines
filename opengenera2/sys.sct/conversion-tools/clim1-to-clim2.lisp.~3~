;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: CONVERSION-TOOLS; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Tool for aiding conversion from CLIM 1.1 to CLIM 2.0
;;; This is generally targeted to CLIM 1.1 and CLIM 2.0 (as of 27-Jul-92).

;;; Note that we have to use CLIM:: everywhere because there is no guarantee
;;; that these symbols are exported from the CLIM package (e.g., CLIM 1.1
;;; symbols that are not in a CLIM 2.0 world).

(define-conversion-set clim1-to-clim2
		       define-clim1-to-clim2-substitution	;symbol  symbol substitution
		       define-clim1-to-clim2-conversion		;form  form conversion
		       :funarg-macro define-clim1-to-clim2-funarg-substitution
		       :message-macro define-clim1-to-clim2-message-conversion
		       :pretty-name "CLIM 1.1 to CLIM 2.0")

(defmethod (with-additional-conversion-state clim1-to-clim2) (continuation)
  (unwind-protect
      (progn
	(mung-clim-package)
	(funcall continuation))
    (unmung-clim-package)))


(define-clim1-to-clim2-substitution clim::point-position* 
				    clim::point-position)
(define-clim1-to-clim2-substitution clim::region-contains-point*-p 
				    clim::region-contains-position-p)


(define-clim1-to-clim2-substitution clim::bounding-rectangle-position*
				    clim::bounding-rectangle-position)
(define-clim1-to-clim2-substitution clim::bounding-rectangle-set-position*
				    clim::bounding-rectangle-set-position)

(define-clim1-to-clim2-conversion clim::with-bounding-rectangle*
				  ((left top &optional right bottom) region &body body)

  :modification-depth 2
  :form
  (progn 
    (when (null right) (setq right (intern "IGNORE-RIGHT")))
    (when (null bottom) (setq bottom (intern "IGNORE-BOTTOM")))
    `(clim::with-bounding-rectangle* (,left ,top ,right ,bottom) ,region
       ,right ,bottom
       ,@body)))

(define-clim1-to-clim2-conversion clim::make-3-point-transformation
				  (point-1 point-1-image
				   point-2 point-2-image 
				   point-3 point-3-image)
  `(clim::make-3-point-transformation ,point-1 ,point-2 ,point-3
				     ,point-1-image ,point-2-image ,point-3-image))

(define-clim1-to-clim2-conversion clim::make-3-point-transformation*
				  (x1 x1-image y1 y1-image
				   x2 x2-image y2 y2-image
				   x3 x3-image y3 y3-image)
  `(clim::make-3-point-transformation*
     ,x1 ,y1 ,x2 ,y2 ,x3 ,y3
     ,x1-image ,y1-image ,x2-image ,y2-image ,x3-image ,y3-image))

(define-clim1-to-clim2-substitution clim::compose-rotation-transformation
				    clim::compose-rotation-with-transformation)
(define-clim1-to-clim2-substitution clim::compose-scaling-transformation
				    clim::compose-scaling-with-transformation)
(define-clim1-to-clim2-substitution clim::compose-translation-transformation
				    clim::compose-translation-with-transformation)

(define-clim1-to-clim2-substitution clim::transform-point* clim::transform-position)
(define-clim1-to-clim2-substitution clim::untransform-point* clim::untransform-position)


(define-clim1-to-clim2-conversion clim::with-text-face
				  ((face &optional (stream '*standard-output*))
				   &body body)
  :modification-depth 2
  :form
  `(clim::with-text-face (,stream ,face) ,@body))

(define-clim1-to-clim2-conversion clim::with-text-family
				  ((family &optional (stream '*standard-output*))
				   &body body)
  :modification-depth 2
  :form
  `(clim::with-text-family (,stream ,family) ,@body))

(define-clim1-to-clim2-conversion clim::with-text-size
				  ((size &optional (stream '*standard-output*))
				   &body body)
  :modification-depth 2
  :form
  `(clim::with-text-size (,stream ,size) ,@body))

(define-clim1-to-clim2-conversion clim::with-text-style
				  ((style &optional (stream '*standard-output*))
				   &body body)
  :modification-depth 2
  :form
  `(clim::with-text-style (,stream ,style) ,@body))

(define-clim1-to-clim2-conversion clim::add-text-style-mapping
				  (device character-set style result)
  (let ((setf (intern "SETF")))
    (if character-set
	`(,setf (clim::text-style-mapping ,device ,style ,character-set) ,result)
	`(,setf (clim::text-style-mapping ,device ,style) ,result))))


(define-clim1-to-clim2-substitution clim::draw-character clim::draw-text)
(define-clim1-to-clim2-substitution clim::draw-character* clim::draw-text*)
(define-clim1-to-clim2-substitution clim::draw-string clim::draw-text)
(define-clim1-to-clim2-substitution clim::draw-string* clim::draw-text*)
(define-clim1-to-clim2-substitution clim::draw-icon clim::draw-pattern*)
(define-clim1-to-clim2-substitution clim::draw-icon* clim::draw-pattern*)


(define-clim1-to-clim2-substitution clim::+background+ clim::+background-ink+)
(define-clim1-to-clim2-substitution clim::+foreground+ clim::+foreground-ink+)

(define-clim1-to-clim2-substitution clim::make-color-rgb clim::make-rgb-color)
(define-clim1-to-clim2-substitution clim::make-color-ihs clim::make-ihs-color)


(define-clim1-to-clim2-substitution clim::stream-cursor-position*
				    clim::stream-cursor-position)
(define-clim1-to-clim2-substitution clim::stream-set-cursor-position*
				    clim::stream-set-cursor-position)
(define-clim1-to-clim2-substitution clim::stream-increment-cursor-position*
				    clim::stream-increment-cursor-position)

(define-clim1-to-clim2-substitution clim::cursor-position*
				    clim::cursor-position)
(define-clim1-to-clim2-substitution clim::cursor-set-position*
				    clim::cursor-set-position)

(define-clim1-to-clim2-substitution clim::stream-vsp clim::stream-vertical-spacing)

(define-clim1-to-clim2-conversion clim::with-end-of-line-action
				  ((action &optional (stream '*standard-output*))
				   &body body)
  :modification-depth 2
  :form
  `(clim::with-end-of-line-action (,stream ,action) ,@body))

(define-clim1-to-clim2-conversion clim::with-end-of-page-action
				  ((action &optional (stream '*standard-output*))
				   &body body)
  :modification-depth 2
  :form
  `(clim::with-end-of-page-action (,stream ,action) ,@body))


(define-clim1-to-clim2-substitution clim::output-record-position*
				    clim::output-record-position)
(define-clim1-to-clim2-substitution clim::output-record-set-position*
				    clim::output-record-set-position)
(define-clim1-to-clim2-substitution clim::output-record-start-position*
				    clim::output-record-start-cursor-position)
(define-clim1-to-clim2-substitution clim::output-record-end-position*
				    clim::output-record-end-cursor-position)
(define-clim1-to-clim2-substitution clim::output-record-set-start-position*
				    clim::output-record-set-start-cursor-position)
(define-clim1-to-clim2-substitution clim::output-record-set-end-position*
				    clim::output-record-set-end-cursor-position)

(define-clim1-to-clim2-substitution clim::output-record-element-count 
				    clim::output-record-count)
(define-clim1-to-clim2-substitution clim::output-record-elements
				    clim::output-record-children)
(define-clim1-to-clim2-substitution clim::replay-1 clim::replay-output-record)

(define-clim1-to-clim2-substitution clim::output-record-refined-sensitivity-test
				    clim::output-record-refined-position-test)

(define-clim1-to-clim2-substitution clim::output-recording-stream-output-record
				    clim::stream-output-history)
(define-clim1-to-clim2-substitution clim::output-recording-stream-current-output-record-stack
				    clim::stream-current-output-record)
(define-clim1-to-clim2-substitution clim::output-recording-stream-replay
				    clim::stream-replay)
(define-clim1-to-clim2-substitution clim::add-output-record clim::stream-add-output-record)

(define-clim1-to-clim2-conversion clim::with-output-recording-options
				  ((stream &key (draw-p nil draw-supplied)
						(record-p nil record-supplied))
				   &body body)
  :modification-depth 2
  :form
  `(clim::with-output-recording-options (,stream
					,@(and draw-supplied `(:draw ,draw-p))
					,@(and record-supplied `(:record ,record-p)))
     ,@body))

(define-clim1-to-clim2-substitution clim::stream-draw-p clim::stream-drawing-p)
(define-clim1-to-clim2-substitution clim::stream-record-p clim::stream-recording-p)

(define-clim1-to-clim2-conversion clim::add-output-record-element
				  (record element)
  `(clim::add-output-record ,element ,record))

(define-clim1-to-clim2-conversion clim::delete-output-record-element
				  (record element &optional (errorp t errorp-supplied))
  `(clim::delete-output-record ,element ,record 
			      ,@(and errorp-supplied (list errorp))))

(define-clim1-to-clim2-conversion clim::map-over-output-record-elements
				  (record function &optional xoff yoff &rest args)
  (if (or xoff yoff)
      `(clim::map-over-output-records ,function ,record ,xoff ,yoff ,@args)
      `(clim::map-over-output-records ,function ,record ,xoff ,yoff ,@args)))

(define-clim1-to-clim2-conversion clim::map-over-output-record-elements-containing-point*
				  (record x y function &optional xoff yoff &rest args)
  (if (or xoff yoff)
      `(clim::map-over-output-records-containing-position
	 ,function ,record ,x ,y ,xoff ,yoff ,@args)
      `(clim::map-over-output-records-containing-position
	 ,function ,record ,x ,y ,xoff ,yoff ,@args)))

(define-clim1-to-clim2-conversion clim::map-over-output-record-elements-overlapping-region
				  (record region function &optional xoff yoff &rest args)
  (if (or xoff yoff)
      `(clim::map-over-output-records-overlapping-region
	 ,function ,region ,record ,xoff ,yoff ,@args)
      `(clim::map-over-output-records-overlapping-region
	 ,function ,region ,record ,xoff ,yoff ,@args)))


(define-clim1-to-clim2-conversion clim::formatting-table
				  ((stream &rest options
				    &key (inter-column-spacing nil ic-p)
					 (inter-row-spacing nil ir-p)
					 (multiple-columns-inter-column-spacing nil mcic-p)
				    &allow-other-keys)
				   &body body)
  :modification-depth 2
  :form
  (si:with-rem-keywords (options options '(:inter-column-spacing :inter-row-spacing 
					   :multiple-columns-inter-column-spacing))
    `(clim::formatting-table (,stream
			     ,@(and ic-p `(:x-spacing ,inter-column-spacing))
			     ,@(and ir-p `(:y-spacing ,inter-row-spacing))
			     ,@(and mcic-p `(:multiple-columns-x-spacing
					      ,multiple-columns-inter-column-spacing))
			     ,@(copy-list options))
       ,@body)))

(define-clim1-to-clim2-conversion clim::formatting-cell
				  ((stream &rest options
				    &key (minimum-width nil mw-p)
					 (minimum-height nil mh-p)
				    &allow-other-keys)
				   &body body)
  :modification-depth 2
  :form
  (si:with-rem-keywords (options options '(:minimum-width :minimum-height))
    `(clim::formatting-cell (,stream
			    ,@(and mw-p `(:min-width ,minimum-width))
			    ,@(and mh-p `(:min-height ,minimum-height))
			    ,@(copy-list options))
       ,@body)))

(define-clim1-to-clim2-conversion clim::formatting-item-list
				  ((stream &rest options
				    &key (inter-column-spacing nil ic-p)
					 (inter-row-spacing nil ir-p)
					 (no-initial-spacing t nis-p)
				    &allow-other-keys)
				   &body body)
  :modification-depth 2
  :form
  (si:with-rem-keywords (options options '(:inter-column-spacing :inter-row-spacing
					   :no-initial-spacing))
    `(clim::formatting-item-list (,stream
				 ,@(and ic-p `(:x-spacing ,inter-column-spacing))
				 ,@(and ir-p `(:y-spacing ,inter-row-spacing))
				 ,@(and nis-p `(:initial-spacing (not ,no-initial-spacing)))
				 ,@(copy-list options))
       ,@body)))

(define-clim1-to-clim2-conversion clim::format-items
				  (items &rest keys
				   &key (inter-column-spacing nil ic-p)
					(inter-row-spacing nil ir-p)
					(no-initial-spacing t nis-p)
				   &allow-other-keys)
  (si:with-rem-keywords (keys keys '(:inter-column-spacing :inter-row-spacing
				     :no-initial-spacing))
    `(clim::format-items ,items
			,@(and ic-p `(:x-spacing ,inter-column-spacing))
			,@(and ir-p `(:y-spacing ,inter-row-spacing))
			,@(and nis-p `(:initial-spacing (not ,no-initial-spacing)))
			,@(copy-list keys))))


(define-clim1-to-clim2-substitution clim::redisplay-1 clim::redisplay-output-record)


(define-clim1-to-clim2-substitution clim::event-window clim::event-sheet)
(define-clim1-to-clim2-substitution clim::pointer-event-shift-mask
				    clim::event-modifier-state)

(define-clim1-to-clim2-substitution clim::stream-pointer-position*
				    clim::stream-pointer-position)
(define-clim1-to-clim2-substitution clim::stream-set-pointer-position*
				    clim::stream-set-pointer-position)

(define-clim1-to-clim2-substitution clim::pointer-position*
				    clim::pointer-position)
(define-clim1-to-clim2-substitution clim::pointer-set-position*
				    clim::pointer-set-position)

(define-clim1-to-clim2-substitution clim::dragging-output-record 
				    clim::drag-output-record)


(define-clim1-to-clim2-conversion clim::with-output-as-presentation
				  ((&rest options
				    &key (stream '*standard-output*)
					 (object nil)
					 (type nil type-p)
				    &allow-other-keys)
				   &body body)
  :modification-depth 2
  :form
  (si:with-rem-keywords (options options '(:stream :object :type))
    (unless type-p
      (setq type `'(clim::presentation-type-of ,object)))
    `(clim::with-output-as-presentation (,stream ,object ,type
					 ,@(copy-list options))
       ,@body)))

(define-clim1-to-clim2-conversion clim::accept
				  (type &rest accept-args
				   &key (activation-characters nil ac-p)
					(additional-activation-characters nil aac-p)
					(blip-characters nil bc-p)
					(additional-blip-characters nil abc-p)
				   &allow-other-keys)
  (si:with-rem-keywords (accept-args accept-args '(:activation-characters
						   :additional-activation-characters
						   :blip-characters
						   :additional-blip-characters))
    `(clim::accept ,type
		  ,@(and ac-p `(:activation-gestures ,activation-characters))
		  ,@(and aac-p `(:additional-activation-gestures ,additional-activation-characters))
		  ,@(and bc-p `(:delimiter-gestures ,blip-characters))
		  ,@(and abc-p `(:additional-delimiter-gestures ,additional-blip-characters))
		  ,@(copy-list accept-args))))

(define-clim1-to-clim2-conversion clim::find-presentation-translators
				  (from-type to-type frame)
  `(clim::find-presentation-translators ,from-type ,to-type
				       (clim::frame-command-table ,frame)))

(define-clim1-to-clim2-conversion clim::test-presentation-translator
				  (translator presentation context-type frame window x y
				   &key (event nil event-p) (shift-mask 0 shift-mask-p)
					(for-menu nil for-menu-p))
  `(clim::test-presentation-translator
     ,translator ,presentation ,context-type
     ,frame ,window ,x ,y
     ,@(and event-p `(:event ,event))
     ,@(and shift-mask-p `(:modifier-state ,shift-mask))
     ,@(and for-menu-p `(:for-menu ,for-menu))))

(define-clim1-to-clim2-conversion clim::find-applicable-translators
				  (presentation input-context frame window x y
				   &key (event nil event-p) (shift-mask nil shift-mask-p)
					(for-menu nil for-menu-p) (fastp nil fastp-p))
  `(clim::find-applicable-translators
     ,presentation ,input-context ,frame ,window ,x ,y
     ,@(and event-p `(:event ,event))
     ,@(and shift-mask-p `(:modifier-state ,shift-mask))
     ,@(and for-menu-p `(:for-menu ,for-menu))
     ,@(and fastp-p `(:fastp ,fastp))))

(define-clim1-to-clim2-conversion clim::presentation-matches-context-type
				  (presentation context-type frame window x y
				   &key (event nil event-p) (shift-mask 0 shift-mask-p))
  `(clim::presentation-matches-context-type
     ,presentation ,context-type ,frame ,window ,x ,y
     ,@(and event-p `(:event ,event))
     ,@(and shift-mask-p `(:modifier-state ,shift-mask))))

(define-clim1-to-clim2-conversion clim::find-innermost-applicable-presentation
				  (input-context stream x y
				   &key (frame '*application-frame* frame-p) 
					(event nil event-p)
					(shift-mask nil shift-mask-p))
  `(clim::find-innermost-applicable-presentation
     ,input-context ,stream ,x ,y
     ,@(and frame-p `(:frame ,frame))
     ,@(and event-p `(:event ,event))
     ,@(and shift-mask-p `(:modifier-state ,shift-mask))))


(define-clim1-to-clim2-conversion clim::define-gesture-name
				  (name &key button shifts (action :click))
  (progn
    action
    `(clim::define-gesture-name ,name :pointer-button (,button ,@shifts))))

(define-clim1-to-clim2-conversion clim::add-pointer-gesture-name
				  (name button shifts &key (action :click) (unique t))
  (progn
    action
    `(clim::add-gesture-name ,name :pointer-button (,button ,@shifts) :unique ,unique)))

(define-clim1-to-clim2-substitution clim::remove-pointer-gesture-name 
				    clim::delete-gesture-name)


(define-clim1-to-clim2-substitution clim::dialog-view clim::textual-dialog-view)
(define-clim1-to-clim2-substitution clim::+dialog-view+ clim::+textual-dialog-view+)
(define-clim1-to-clim2-substitution clim::menu-view clim::textual-menu-view)
(define-clim1-to-clim2-substitution clim::+menu-view+ clim::+textual-menu-view+)


(define-clim1-to-clim2-conversion clim::call-presentation-generic-function
				  (&rest name-and-args)
  (let* ((apply-p (and (eql (first name-and-args) (intern "APPLY"))
		       (pop name-and-args)))
	 (name (pop name-and-args))
	 (args name-and-args))
    (if apply-p
	`(clim::apply-presentation-generic-function ,name ,@args)
	`(clim::funcall-presentation-generic-function ,name ,@args))))


(define-clim1-to-clim2-substitution clim::*activation-characters*
				    clim::*activation-gestures*)
(define-clim1-to-clim2-substitution clim::*standard-activation-characters*
				    clim::*standard-activation-gestures*)
(define-clim1-to-clim2-substitution clim::*blip-characters*
				    clim::*delimiter-gestures*)

(define-clim1-to-clim2-substitution clim::activation-character-p 
				    clim::activation-gesture-p)
(define-clim1-to-clim2-substitution clim::blip-character-p
				    clim::delimiter-gesture-p)

(define-clim1-to-clim2-substitution clim::with-activation-characters
				    clim::with-activation-gestures)
(define-clim1-to-clim2-substitution clim::with-blip-characters
				    clim::with-delimiter-gestures)

(define-clim1-to-clim2-substitution clim::*abort-characters*
				    clim::*abort-gestures*)
(define-clim1-to-clim2-substitution clim::*complete-characters*
				    clim::*completion-gestures*)
(define-clim1-to-clim2-substitution clim::*help-characters*
				    clim::*help-gestures*)
(define-clim1-to-clim2-substitution clim::*possibilities-characters*
				    clim::*possibilities-gestures*)

(define-clim1-to-clim2-substitution clim::input-position clim::stream-scan-pointer)
(define-clim1-to-clim2-substitution clim::insertion-pointer clim::stream-insertion-pointer)
(define-clim1-to-clim2-substitution clim::rescanning-p clim::stream-rescanning-p)


(define-clim1-to-clim2-conversion clim::menu-choose
				  (items &rest keys
				   &key (inter-column-spacing nil ic-p)
					(inter-row-spacing nil ir-p)
				   &allow-other-keys)
  (si:with-rem-keywords (keys keys '(:inter-column-spacing :inter-row-spacing))
    `(clim::menu-choose ,items
		       ,@(and ic-p `(:x-spacing ,inter-column-spacing))
		       ,@(and ir-p `(:y-spacing ,inter-row-spacing))
		       ,@(copy-list keys))))

(define-clim1-to-clim2-conversion clim::draw-standard-menu
				  (menu presentation-type items default-item
				   &rest keys
				   &key (inter-column-spacing nil ic-p)
					(inter-row-spacing nil ir-p)
				   &allow-other-keys)
  (si:with-rem-keywords (keys keys '(:inter-column-spacing :inter-row-spacing))
    `(clim::draw-standard-menu 
       ,menu ,presentation-type ,items ,default-item
       ,@(and ic-p `(:x-spacing ,inter-column-spacing))
       ,@(and ir-p `(:y-spacing ,inter-row-spacing))
       ,@(copy-list keys))))

(define-clim1-to-clim2-conversion clim::hierarchical-menu-choose
				  (items &rest keys
				   &key (inter-column-spacing nil ic-p)
					(inter-row-spacing nil ir-p)
				   &allow-other-keys)
  (si:with-rem-keywords (keys keys '(:inter-column-spacing :inter-row-spacing))
    `(clim::hierarchical-menu-choose
       ,items
       ,@(and ic-p `(:x-spacing ,inter-column-spacing))
       ,@(and ir-p `(:y-spacing ,inter-row-spacing))
       ,@(copy-list keys))))


(define-clim1-to-clim2-substitution clim::*unsupplied-argument*
				    clim::*unsupplied-argument-marker*)

(define-clim1-to-clim2-conversion clim::display-command-table-menu
				  (command-table stream &rest keys
				   &key (inter-column-spacing nil ic-p)
					(inter-row-spacing nil ir-p)
				   &allow-other-keys)
  (si:with-rem-keywords (keys keys '(:inter-column-spacing :inter-row-spacing))
    `(clim::display-command-table-menu ,command-table ,stream
				      ,@(and ic-p `(:x-spacing ,inter-column-spacing))
				      ,@(and ir-p `(:y-spacing ,inter-row-spacing))
				      ,@(copy-list keys))))

(define-clim1-to-clim2-conversion clim::add-command-to-command-table
				  (name command-table &rest args)
  (si:with-rem-keywords (args args '(:test))
    `(clim::add-command-to-command-table
       ,name ,command-table ,@(copy-list args))))

(define-clim1-to-clim2-conversion clim::add-keystroke-to-command-table
				  (command-table keystroke type value &rest args)
  (si:with-rem-keywords (args args '(:test))
    `(clim::add-keystroke-to-command-table 
       ,command-table ,keystroke ,type ,value ,@(copy-list args))))

(define-clim1-to-clim2-conversion clim::remove-keystroke-from-command-table
				  (command-table keystroke &rest args)
  (si:with-rem-keywords (args args '(:test))
    `(clim::remove-keystroke-from-command-table 
       ,command-table ,keystroke ,@(copy-list args))))

(define-clim1-to-clim2-conversion clim::read-command
				  (command-table &rest args)
  (si:with-rem-keywords (args args '(:keystroke-test))
    `(clim::read-command ,command-table ,@(copy-list args))))

(define-clim1-to-clim2-conversion clim::read-command-using-keystrokes
				  (command-table keystrokes &rest args)
  (si:with-rem-keywords (args args '(:keystroke-test))
    `(clim::read-command-using-keystrokes
       ,command-table ,keystrokes ,@(copy-list args))))


(define-clim1-to-clim2-conversion clim::set-frame-layout
				  (frame new-layout)
  (let ((setf (intern "SETF")))
    `(,setf (clim::frame-current-layout ,frame) ,new-layout)))

(define-clim1-to-clim2-substitution clim::frame-top-level-window
				    clim::frame-top-level-sheet)

(define-clim1-to-clim2-conversion clim::command-enabled-p
				  (command-name frame)
  `(clim::command-enabled ,command-name ,frame))

(define-clim1-to-clim2-conversion clim::disable-command
				  (command-name frame)
  (let ((setf (intern "SETF")))
    `(,setf (clim::command-enabled ,command-name ,frame) nil)))

(define-clim1-to-clim2-conversion clim::enable-command
				  (command-name frame)
  (let ((setf (intern "SETF")))
    `(,setf (clim::command-enabled ,command-name ,frame) t)))

(define-clim1-to-clim2-substitution clim::window-viewport-position*
				    clim::window-viewport-position)
(define-clim1-to-clim2-substitution clim::window-set-viewport-position*
				    clim::window-set-viewport-position)


(define-clim1-to-clim2-substitution clim::position-window-near-carefully
				    clim::position-sheet-carefully)
(define-clim1-to-clim2-substitution clim::position-window-near-pointer
				    clim::position-sheet-near-pointer)
(define-clim1-to-clim2-substitution clim::size-menu-appropriately
				    clim::size-frame-from-contents)


(define-clim1-to-clim2-conversion clim::open-root-window (type &rest args)
  `(progn
     args
     ;; This is pretty close, but not perfect
     (clim::find-port :server-path '(,type))))
