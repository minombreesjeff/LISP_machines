;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SI; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#||
(defun show-readtable-differences (rdtbl-1 rdtbl-2)
  (flet ((show-macro (list1 list2 missing-p)
	   (dolist (entry1 list1)
	     (destructuring-bind (char . macro1) entry1
	       (let* ((entry2 (assq char list2))
		      (macro2 (cdr entry2)))
		 (cond ((eq macro1 macro2))
		       ((not macro2)
			(format t "~&~:C has ~S vs. nothing.~%" char macro1))
		       ((not missing-p)
			(format t "~&~:C has ~S vs. ~S.~%" macro1 macro2)))))))
	 (show-definition (list1 list2 missing-p)
	   (dolist (entry1 list1)
	     (let ((entry2 (assq (first entry1) list2)))
	       (cond ((equal entry1 entry2))
		     ((not entry2)
		      (format t "~&~S vs. nothing.~%" entry1))
		     ((not missing-p)
		      (format t "~&~S vs. ~S" entry1 entry2)))))))

    (format t "~&~S vs. ~S:~%" rdtbl-1 rdtbl-2)
    (show-macro (rdtbl-macro-alist rdtbl-1) (rdtbl-macro-alist rdtbl-2) nil)
    (format t "~&~S vs. ~S:~%" rdtbl-2 rdtbl-1)
    (show-macro (rdtbl-macro-alist rdtbl-2) (rdtbl-macro-alist rdtbl-1) t)
    (format t "~&# ~S vs. ~S:~%" rdtbl-1 rdtbl-2)
    (show-macro (rdtbl-#-macro-alist rdtbl-1) (rdtbl-#-macro-alist rdtbl-2) nil)
    (format t "~&# ~S vs. ~S:~%" rdtbl-2 rdtbl-1)
    (show-macro (rdtbl-#-macro-alist rdtbl-2) (rdtbl-#-macro-alist rdtbl-1) t)

    (format t "~&~S vs. ~S:~%" rdtbl-1 rdtbl-2)
    (show-definition (rdtbl-definition rdtbl-1) (rdtbl-definition rdtbl-2) nil)
    (format t "~&~S vs. ~S:~%" rdtbl-2 rdtbl-1)
    (show-definition (rdtbl-definition rdtbl-2) (rdtbl-definition rdtbl-1) t)
    
    ))
||#

(defun current-token-start-bp ()
  (declare (special inferior-interval))
  (correspondence-interval-start-bp inferior-interval))

(defun insert-before-current-token (string stream)
  (ignore stream)
  (let ((bp (current-token-start-bp)))
    (send stream :insert-at-bp bp string)))

(defun replace-current-token (string stream)
  (let ((bp (current-token-start-bp)))
    (send stream :case-replace-since string bp)))

;;;; Syntax conversion

(defun read-converting-syntax (the-stream &optional eof-option)
  (flet ((syntax-converting-xrtyi-hook (stream char code real-char)
	   (declare (sys:downward-function))
	   (when (eq stream the-stream)
	     (if (= code (rdtbl-slash-code readtable))
		 ;; Is slash or circle cross.
		 (let* ((bp (send stream :read-bp-before))
			(bp1 (zwei:forward-char bp -1)))
		   (when (char-equal (zwei:bp-char bp1) #//)
		     (send stream :case-replace-since
			   ;; This will extraneously quote a / with a \ inside a string that
			   ;; has "#//", but it's always better to err to the side of too
			   ;; much quoting than risk losing an important one.
			   (if (and (char-equal char #//)
				    (not (char-equal (zwei:bp-char-before bp1) #/#)))
			       "" "\")
			   bp1 bp)))
		 ;; Might be \ that needs to be quoted.
		 (let ((bp (send stream :read-bp-before)))
		   (when (char-equal (zwei:bp-char bp) #/\)
		     (send stream :case-replace-since "\" bp bp)))))
	   (values char code real-char)))
    (let ((readtable (set-up-syntax-converting-readtable))
	  (*xrtyi-hook* #'syntax-converting-xrtyi-hook))
      (read the-stream eof-option))))

(defvar *syntax-converting-readtable* nil)

(defun set-up-syntax-converting-readtable ()
  (or *syntax-converting-readtable*
      (let ((new (copy-readtable standard-readtable)))
	(loop for (char . macro) in '((#/^ . syntax-converting-#^-macro)
				      (#/Q . syntax-converting-#Q-macro)
				      (#/M . syntax-converting-#M-macro)
				      (#/N . syntax-converting-#N-macro)
				      (#/+ . syntax-converting-#+-macro)
				      (#/- . syntax-converting-#+-macro))
	      do (setf (cdr (assq char (rdtbl-#-macro-alist new))) macro))
	(loop for (lexeme) in (rdtbl-definition new) do
	  (let ((standard (get lexeme (rdtbl-read-function-property new))))
	    (when standard
	      (unless (get lexeme 'syntax-converting-read-function)
		(setf (get lexeme 'syntax-converting-read-function) standard)))))
	(setf (rdtbl-read-function-property new) 'syntax-converting-read-function)
	(setq *syntax-converting-readtable* new)
	new)))

(defun syntax-converting-#^-macro (list-so-far stream)
  (let ((location (send stream :read-location-before))
	(char (xr-#^-macro list-so-far stream)))
    (syntax-converting-#-replace stream (format () "\~C" char) location)
    char))

(defun syntax-converting-#Q-macro (list-so-far stream)
  (syntax-converting-#-replace stream "+lispm")
  (xr-#q-macro list-so-far stream))

(defun syntax-converting-#M-macro (list-so-far stream)
  (syntax-converting-#-replace stream "+maclisp")
  (xr-#m-macro list-so-far stream))

(defun syntax-converting-#N-macro (list-so-far stream)
  (syntax-converting-#-replace stream "+nil")
  (xr-#n-macro list-so-far stream))

(defun syntax-converting-#+-macro (list-so-far stream)
  (xr-read-feature stream)
  (values list-so-far nil t))

(defun syntax-converting-#-replace (stream new &optional start)
  (send stream :case-replace-since new (or start (send stream :read-location-before))))

(defun (sharp-thing syntax-converting-read-function) (stream string last-char)
  (when (char-equal last-char #/\)
    ;; We have already converted #\ to #\\, which was wrong.
    (send stream :case-replace-since "" (send stream :read-bp-before)))
  (funcall #'(:property sharp-thing standard-read-function) stream string last-char))

(defun (ratio syntax-converting-read-function) (stream string)
  (let ((bp (zwei:backward-over '(#/0 #/1 #/2 #/3 #/4 #/5 #/6 #/7 #/8 #/9 #/+ #/- #/. #/_)
				(send stream :read-location-before))))
    ;; \\  / (the second \ was our mistake)
    (send stream :case-replace-since "//" (zwei:forward-char bp -2) bp))
  (funcall #'(:property ratio standard-read-function) stream string))

;;;; Radix converstion

(defvar *base-conversion-mode*)
(defvar *base-convert*)

(defun read-converting-base (the-stream &optional eof-option (mode :octal))
  (unless (eq readtable *common-lisp-readtable*)
    (fsignal "This is only supposed to be called in common lisp syntax."))
  (let ((readtable (set-up-base-converting-readtable))
	(*base-conversion-mode* mode)
	(*base-convert* t)
	(xr-maintain-correspondence t)
	(xr-correspondences nil))
    (read the-stream eof-option)))

(defvar *base-converting-readtable* nil)

(defun set-up-base-converting-readtable ()
  (or *base-converting-readtable*
      (let ((new (copy-readtable *common-lisp-readtable*)))
	(loop for (char . macro) in '((#\B . base-conversion-#b-macro)
				      (#\O . base-conversion-#o-macro)
				      (#\X . base-conversion-#x-macro)
				      (#\R . base-conversion-#r-macro)
				      (#/+ . syntax-converting-#+-macro)
				      (#/- . syntax-converting-#+-macro)
				      )
	      do (setf (cdr (assq char (rdtbl-#-macro-alist new))) macro))
	(loop for (lexeme) in (rdtbl-definition new) do
	  (let ((standard (get lexeme (rdtbl-read-function-property new))))
	    (when standard
	      (unless (get lexeme 'base-converting-read-function)
		(setf (get lexeme 'base-converting-read-function) standard)))))
	(setf (rdtbl-read-function-property new) 'base-converting-read-function)
	(setq *base-converting-readtable* new)
	new)))

(defmacro define-base-conversion (lexeme &optional test-p)
  `(defun (:property ,lexeme base-converting-read-function) (stream string)
     (base-convert-integer-read-function ',lexeme stream string ,test-p)))

(define-base-conversion integer)
(define-base-conversion integer-with-lsh-scale)
(define-base-conversion ratio)
(define-base-conversion double-or-extended-integer t)
(define-base-conversion normal-flonum-or-extended-integer t)
(define-base-conversion flonum-or-extended-integer t)
(define-base-conversion extended-integer t)
(define-base-conversion extended-integer-with-lsh-scale t)
(define-base-conversion extended-ratio t)

(defmacro define-base-sharp-conversion (name standard)
  `(defun ,name (&rest args)
     (let ((*base-convert* nil))
       (lexpr-funcall #',standard args))))

(define-base-sharp-conversion base-conversion-#b-macro xr-#b-macro)
(define-base-sharp-conversion base-conversion-#o-macro xr-#o-macro)
(define-base-sharp-conversion base-conversion-#x-macro xr-#x-macro)
(define-base-sharp-conversion base-conversion-#r-macro xr-#r-macro)

(defun base-convert-integer-read-function (lexeme stream string test-p)
  (let ((value (funcall (get lexeme 'standard-read-function) stream string)))
    (when (and (numberp value)
	       *base-convert*
	       (> (string-length string) (if (minusp value) 2 1))
	       (or (not test-p) (token-is-extended-integer string))
	       (not (char-equal (aref string (1- (string-length string))) #/.)))
      (let ((mode *base-conversion-mode*))
	(when (eq mode :selective)
	  (format query-io "~&In ~A" (zwei:bp-line (send stream :read-bp-before)))
	  (setq mode (fquery '(:choices (((:octal "Octal.") #\O)
					 ((:decimal "Decimal.") #\D)))
			     "Convert ~A to #o~A or ~D? " string string value)))
	(cl:ecase mode
	  (:octal
	   (insert-before-current-token "#o" stream))
	  (:decimal
	   (replace-current-token (format () "~D" value) stream)))))
    value))

(defun read-converting-package (stream eof-option old-pkg new-pkg skip-symbols)
  (let (correspondences thing
	(replacements nil))
    (let ((xr-maintain-correspondence t)
	  (xr-correspondences nil))
      (letf (((rdtbl-#-macro-alist readtable)
	      (append '((#/+ . syntax-converting-#+-macro)
			(#/- . syntax-converting-#+-macro))
		      (cl:remove-if (lambda (item) (memq (car item) '(#/+ #/-)))
				    (rdtbl-#-macro-alist readtable)))))
	(setq thing (read stream eof-option)
	      correspondences xr-correspondences)))
    (unless (eq thing eof-option)
      (labels ((convert (thing interval superior)
		 (typecase thing
		   (:list
		     (let ((intervals (correspondence-entry-inferiors
					(assq thing correspondences))))
		       (loop for x = thing then (cdr x)
			     as interval = (pop intervals)
			     do (when (atom x)
				  (convert x interval thing)
				  (return nil))
				(convert (first x) interval thing))))
		   (:symbol
		     (when (and (neq (symbol-package thing) old-pkg)	;Quick check
				(eq (intern-soft (get-pname thing) old-pkg) thing)
				(neq (intern-soft (get-pname thing) new-pkg) thing)
				(not (memq thing skip-symbols)))
		       (if (null interval)
			   (cl:warn
			     "Unable to find where the symbol ~S came from in the source.
 It is part of the list ~S.
 You should check for it manually." thing superior)
			   (push (cons (pkg-bind new-pkg
					 (cl:write-to-string thing :escape t :case :downcase))
				       interval)
				 replacements)))))))
	(convert thing nil nil))
      ;; Must do replacements in reverse order, since they only have temporary bp's in them.
      (setq replacements (sort replacements
			       #'(lambda (entry-1 entry-2)
				   (not (zwei:bp-<
					  (correspondence-interval-start-bp (cdr entry-1))
					  (correspondence-interval-start-bp (cdr entry-2)))))
			       ))
      (loop for (string . interval) in replacements do
	(send stream :case-replace-since
	      string
	      (correspondence-interval-start-bp interval)
	      (correspondence-interval-end-bp interval))))
    thing))
