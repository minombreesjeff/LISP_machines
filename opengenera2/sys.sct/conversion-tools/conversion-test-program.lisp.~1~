 ;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZL-USER; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Straightforward conversions.
0(defun add-items (items)
  (dolist (item (cl:set-difference items '(a b c)))
    (array-push-extend (find-bucket-for-item item)	1;Function not defined here.
0		       item)))

1;;; Arithmetic.  Note that /'s enter in as well.
0(defun mess-with-primes (n)
  (or (loop for small-prime in '(2 3 5 7)
	    when (zerop (\ n small-prime))
	      return (// n small-prime))
      1\17))

1;;; Property lists
0(defun mess-with-symbol (symbol)
  1;; Ordinary
0  (print (get symbol 'my-property))
1  ;; A common cliche for keywords.
0  (print (get (locf (symeval symbol)) :frob))
  1;; Disembodied.  Also note that plist is used as a variable.
0  (let ((plist (lookup-symbol-dict symbol)))
    (print (get plist :frob))))

1;;; String and character hacking
0(defun mess-with-string (string)
  (let ((last-slash (string-reverse-search-char #/\ string)))
    (aset #// string last-slash))
  string)

1;;; Types.
0(defun mess-with-something (thing)
  (typecase thing
    (:symbol (mess-with-symbol thing))
    (:string (mess-with-string thing))
    ((:number :array) nil)
    (my-own-structure t)))

1;;; Arrays
0(defun make-a-mess ()
  (let ((string (make-array 10 :type 'art-string :fill-pointer t)))
    (fill-up-string string)
    (mess-with-string string)))

1;;; Name conflict
0(defun search (item set)
  (cl:position item set :key #'item-slot))

1;;; Defstruct
0(defstruct (my-structure :conc-name )
  slot-1
  slot-2)

(defun make-structures ()
  (list (make-my-structure slot-1 1 slot-2 2)
	(make-array 10 :type 'art-q)
	(make-something 1)
	(make-cl-structure :slot-1 1)
	(make-someone-elses-structure slot-n 3)))
