;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defmacro def-postscript-group (group-name &body operators)
  `(setup-postscript-group ,group-name ',(copylist operators)))

(defconst *postscript-doc* (make-equal-hash-table))

(defstruct (postscript-doc :named-array (:conc-name pdoc-))
  name group forms)

(defun setup-postscript-group (name operators)
  (let ((group-name
	  (gethash (list 'postscript-group name) *postscript-doc*)))
    (when (null group-name)
      (setq group-name name)
      (puthash (list 'postscript-group group-name) group-name *postscript-doc*))
    (loop for (op-name . stuff) in operators
	  do (let* ((forms (figure-postscript-doc-forms stuff))
		    (real-op-name (if (symbolp op-name)
				      (string-downcase op-name)
				      op-name))
		    (doc (make-postscript-doc name real-op-name
					      group group-name
					      forms forms)))
	       (puthash real-op-name doc *postscript-doc*)))))

(defun figure-postscript-doc-forms (raw-forms)
  (loop with stuff = raw-forms
	until (null stuff)
	collect (list ;; Optional comment
		      (if (stringp (first stuff))
			  (pop stuff)
			  nil)
		      ;; Inputs
		      (pop stuff)
		      ;; Outputs
		      (if (neq (first stuff) '[)
			  (pop stuff)
			  (loop for x = (pop stuff)
				collect x
				until (eq x '])
				when (null stuff)
				  do (ferror "Missing ] in ~s" raw-forms))))))

(defun show-postscript-doc (pdoc stream show-group-first?)
  (let ((forms (pdoc-forms pdoc)))
    (when show-group-first?
      (format stream "~&(among ~a)" (pdoc-group pdoc)))
    (flet ((pstack (things)
	     (if (null things)
		 (princ "--" stream)
		 (loop for (thing . more-things) on things
		       do (format stream "~(~a~)" thing)
		       unless (or (null more-things)
				  (eq thing '[)
				  (eq (first more-things) ']))
			 do (princ " " stream)))))
	(loop for first = 1 then 2
	      for (text args vals) in forms
	      do (format stream "~v&" first)
		 (princ "  " stream)
		 (pstack args)
		 (princ "  " stream)
		 (scl:with-character-face (:bold stream)
		   (princ (pdoc-name pdoc) stream))
		 (princ "  " stream)
		 (pstack vals)
		 (terpri stream)
		 (when text
		   (format stream "~5@t... ~a" text)
		   (unless show-group-first?
		     (format stream "  (among ~a)" (pdoc-group pdoc))))))))

(defcom com-postscript-arglist "Display info about Postscript operator at point" ()
  (let ((var
	  (let* ((bp1 (forward-word (forward-char (point) 1 t) -1 t))
		 (bp2 (forward-word bp1)))
	    (when (null bp2) (barf))
	    (let ((var (condition-case (error)
			   ;; This isn't exactly right, since postscript is case sensitive.
			   ;; But since all builtin operands are lowercase, it's okay.
			   (read-from-string (bp-line bp1) () (bp-index bp1) (bp-index bp2))
			 (sys:read-error (barf "Read error")))))
	      (unless (symbolp var)
		(barf "~s is not a symbol"
			     (substring (bp-line bp1) (bp-index bp1) (bp-index bp2))))
	      var))))
    (typein-line "")				;Clear the echo area
    (let ((pdoc (gethash (string var) *postscript-doc*)))
      (cond ((null pdoc)
	     (if (eq (send (send *interval* :major-mode) :major-mode-keyword) :lisp)
		 (com-quick-arglist)
		 (typein-line "No Postscript doc for ~(/"~a/"~)" var)))
	    ((and (not *numeric-arg-p*) (null (rest1 (pdoc-forms pdoc))))
	     (show-postscript-doc pdoc *typein-window* ()))
	    (T (show-postscript-doc pdoc standard-output T))))
    dis-none))

(defmajor com-postscript-mode postscript-mode "PostScript"
	  "Mode for editing and interpreting postscript code"
	  ()
  (setq *comment-begin* "%")
  (set-comtab *mode-comtab*
	      '(#\c-sh-A com-postscript-arglist
		#\c-sh-C com-postscript-interpret-region
		#\c-sh-E com-postscript-interpret-region)))

(set-comtab *zmacs-comtab* () (make-command-alist '(com-postscript-mode)))

(defcom com-postscript-interpret-region
	"Execute the code in the current region, showing the result in the typeout window"
	()
  (postscript:display-from-stream (region (bp1 bp2) (open-interval-stream bp1 bp2))
				  :standard-input query-io
				  :standard-output *typein-window*
				  :window-output-p t)
  dis-none)

(def-postscript-group D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")"Stack operators0 p451"
0  (pop (any) ())
  (dup (any) (any any))
  (exch (any1 any2) (any2 any1))
  (roll "pull -j elts up from n; or, shove the top j elts n down"
	(:many n j) (:many))
  (index (:many i) (:many value))
  (clear (:many) :none)
  (count (:many) (:many n))
  (mark () (mark))
  (cleartomark (mark :many) (mark))
  (counttomark (mark :many) (mark :many N))
  )

(def-postscript-group 1"Arith and Math operators0 p491"
0  (abs (n) (|n|))
  (add (num1 num2) (sum))
  (div (num1 num2) (quo))
  (idiv (num1 num2) (intquo))
  (mod (num1 num2) (ans))
  (mul (num1 num2) (prod))
  (neg (n) (-n))
  (sub (num1 num2) (diff))
  (sqrt (n) (sqrtn))
  (exp (base expt) (ans))
  (ceiling (num) (ans))
  (floor (num) (ans))
  (round (num) (ans))
  (truncate (num) (ans))
  (atan (num1 num2) (ans))
  (cos (num) (ans))
  (sin (num) (ans))
  (ln (num) (ans))
  (log (num) (log10))
  (rand () (int32))
  (srand (int) ())
  (rrand () (int))
  )

(def-postscript-group 1"Polymorphic operators0 p561"
0  (copy (:many N) (:many :many)
	(array1 array2) (subarray2)
	(dict1 dict2) (dict2)
	(string1 string2) (substring2))
  (length (array-dict-string) (int))
  (forall (array-dict-string proc) ())
  (get (array-dict-string index-key) (value))
  (put (array-dict-string index-key value) ())
  (getinterval (array-string beg len) (subarray-string))
  (putinterval (array-string1 beg array2) ())
  )

(def-postscript-group 1"Array operators0 p621"
0  (array (n) (array-of-size-n))
  ([ () (mark))
  (] (mark :many) (array))
  (aload (array) (:many array))
  (astore (:many array) (array))
  (null () (null))
  )

(def-postscript-group 1"Dictionary operators0 p641"
0  (dict (n) (dict))
  (begin (dict) ())
  (end () ())
  (def (key value) ())
  (store (key value) ())
  (known (dict key) (boolean))
  (load (key) (value))
  (where (key) [(dict true) or (false)])
  (maxlength (dict) (n))
  (systemdict () (system-dictionary))
  (userdict () (user-dictionary))
  (currentdict () (dict))
  (countdictstack () (num))
  (dictstack (array) (subarray))
  )

(def-postscript-group 1"String operators0 p691"
0  (string (n) (string))
  (anchorsearch (string seek) [(s-post s-match true) or (string false)])
  (search (string seek) [(s-post smatch s-pre true) or (string false)])
  (token (string) [(s-post token) or (false)])
  )

(def-postscript-group 1"Relational, Boolean and Bitwise operators0 p721"
0  (eq (any1 any2) (bool))
  (ne (any1 any2) (bool))
  (ge (any1 any2) (bool))
  (gt (any1 any2) (bool))
  (le (any1 any2) (bool))
  (lt (any1 any2) (bool))
  (true () (true))
  (false () (false))
  (not (bool) (bool))
  (and (bool1 bool2) (bool))
  (or (bool1 bool2) (bool))
  (xor (bool1 bool2) (bool))
  (bitshift (int shift) (lsh))
  )

(def-postscript-group 1"Control operators0 p771"
0  (exec (any) ())
  (if (boolean proc) ())
  (ifelse (boolean proc1 proc2) ())
  (repeat (n proc) ())
  (for (initial increment limit proc) ())
  (loop (proc) ())
  (exit () ())
  (stop () ())
  (stopped (any) (boolean))
  (countexecstack () (num))
  (execstack (array) (subarray))
  (quit () ())
  (start () ())
  )

(def-postscript-group 1"Type, Conversion, and Property Operators0 p821"
0  (type (any) (name))
  (cvi (thing) (int))
  (cvlit (any) (lit))
  (cvn (string) (name))
  (cvr (thing) (real))
  (cvrs (num base string) (substring))
  (cvs (any string) (substring))
  (cvx (any) (executable))
  (executeonly (array-or-string) (executeonly))
  (readonly (array-dict-string) (readonly))
  (xcheck (any) (boolean))
  (rcheck (array-dict-string) (boolean))
  (wcheck (array-dict-string) (boolean))
  )

(def-postscript-group 1"File Operators0 p871"
0  ;;  (I won't bother right now)
  ;;%statementedit, %lineedit, %stdin, %stdout, %stderr
  (file (string1 string2) (file))
  (closefile (file) ())
  (read (file) [(byte true) or (false)])
  (readhexstring (file string) (substring boolean))
  (readline (file string) (substring boolean))
  (readstring (file string) (substring boolean))
  (token (file) [(token true) or (false)])
  (bytesavailable (file) (int))
  (write (file byte) ())
  (writehexstring (file string) ())
  (writestring (file string) ())
  (flush () ())
  (flushfile (file) ())
  (status (file) (boolean))
  (run (string) ())
  (currentfile () (file))
  (print (string) ())
  (prompt () ())
  (echo (boolean) ())
  )

(def-postscript-group 1"Virtual Memory Operators0 p951"
0  (save () (saveobj))
  (restore (saveobj) ())
  (vmstatus () (level used total))
  )

(def-postscript-group 1"Misc Operators0 p961"
0  (version () (string))
  (usertime () (msec))
  (= (any) ())
  (stack (:many) (:many))
  (== (any) ())
  (pstack (:many) (:many))
  )

(def-postscript-group 1"Graphics state operators0 p1011"
0  (gsave () ())
  (grestore () ())
  (grestoreall () ())
  )

(def-postscript-group 1"Coordinate System and Matrix Operators0 p1061"
0  (matrix "create identity matrix"
	  () (matrix))
  (initmatrix "set transform matrix to device default"
	      () ())
  (identmatrix "fill (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")matrix0 with identity transform [1 0 0 1 0 0]"
	       (matrix) (matrix))
  (defaultmatrix "fill in 2matrix0 with device default transform"
		 (matrix) (matrix))
  (currentmatrix "fill in 2matrix0 with current transform"
		 (matrix) (matrix))
  (setmatrix "set current transformation matrix to be 2matrix0"
	     (matrix) ())
  (translate "move user origin to 2(tx,ty)0 in current units"
	     (tx ty) ()
	     "fill in 2matrix0 with values that translate by 2(tx,ty)0"
	     (tx ty matrix) (matrix))
  (scale "scale user coords by 2sx0 in x and 2sy0 in y"
	 (sx sy) ()
	 "fill in 2matrix0 to scale by 2sx,sy0"
	 (sx sy matrix) (matrix))
  (rotate "rotate user space about origin by 2ang0 (degrees, pos = counterclockwise)"
	  (ang) ()
	  "fill in 2matrix0 to rotate by 2ang0"
	  (ang matrix) (matrix))
  (concat (matrix) ())
  (concatmatrix (matrix1 matrix2 matrix3) (matrix3))
  (transform (x y) (xt yt)
	     (x y matrix) (xt yt))
  (dtransform (xd yd) (xdt ydt)
	      (xd yd matrix) (xdt ydt))
  (itransform (xt yt) (x y)
	      (xt yt matrix) (x y))
  (idtransform (xdt ydt) (xd yd)
	       (xdt ydt matrix) (xd yd))
  (invertmatrix (matrix1 matrix2) (matrix2))
  )

(def-postscript-group 1"Character and Font operators0 p1121"
0  (currentfont () (font-dict))
  (definefont (key dict) (font-dict))
  (findfont (key) (font-dict))
  (scalefont (font-dict scale) (transformed-font-dict))
  (makefont (font-dict matrix) (transformed-font-dict))
  (setfont (font-dict) ())
  )

(def-postscript-group 1"Character Imaging Operators0 p1151"
0  (show (string) ())
  (widthshow (numx numy char-code string) ())
  (ashow (numax numay string) ())
  (awidthshow (numx numy char-code numax numay string) ())
  (kshow (proc string) ())
  (stringwidth (string) (wx wy))
  )

(def-postscript-group 1"Path Construction Operators0 p1171"
0  (newpath () ())
  (currentpoint () (x y))
  (moveto (x y) ())
  (rmoveto (dx dy) ())
  (lineto (x y) ())
  (rlineto (dx dy) ())
  (arc (x y r ang1 ang2) ())
  (arcn (x y r ang1 ang2) ())
  (arcto "add arc tangent at x1,y1 toward x2,y2"
	 (x1 y1 x2 y2 r) (x1 y1 x2 y2))
  (curveto "add Bezier cubic section to current path"
	   (x0 y0 x1 y1 x2 y2) ())
  (rcurveto "relative curveto"
	    (dx0 dy0 dx1 dy1 dx2 dy2) ())
  (closepath () ())
  (pathbbox () (llx lly urx ury))
  (flattenpath () ())
  (reversepath () ())
  (strokepath () ())
  (charpath (string bool) ())
  (clippath () ())
  (pathforall "enumerate current path"
	      (mtproc ltproc ctproc cpproc) ())
  )

(def-postscript-group 1"Graphics Output Operators0 p1261"
0  (initgraphics () ())
  (erasepage () ())
  (showpage () ())
  (copypage () ())
  (initclip () ())
  (clip () ())
  (eoclip () ())
  (fill () ())
  (eofill () ())
  (stroke () ())
  (image (scanlen nlines b-p mtx proc) ())
  (imagemask (scanlen nlines bool mtx proc) ())
  (setlinewidth (num) ())
  (currentlinewidth () (num))
  (setlinecap (0-1-2) ())
  (currentlinecap () (0-1-2))
  (setlinejoin (0-1-2) ())
  (currentlinejoin () (0-1-2))
  (setdash (array offset) ())
  (currentdash () (array offset))
  (setflat (num) ())
  (currentflat () (num))
  (setmiterlimit (num) ())
  (currentmiterlimit () (num))
  (setgray (num) ())
  (currentgray () (num))
  (sethsbcolor (h s b) ())
  (currenthsbcolor () (h s b))
  (setrgbcolor (r g b) ())
  (currentrgbcolor () (r g b))
  (setscreen (freq ang spot) ())
  (currentscreen () (freq ang spot))
  (settransfer (xfer-func) ())
  (currenttransfer () (xfer-func))
  )

(def-postscript-group  1"Device Setup Operators0 p1421"
0  (nulldevice () ())
  (framedevice "Install frame buffer device"
	       (mtx w h proc) ())
  )

(def-postscript-group 1"Character Cache Operators0 p1451"
0  (cachestatus "return size and max for bitmaps mids and chars"
	       () (bs bm ms mm cs cm maxbits))
  (setcachedevice "install character cache"
		  (wx wy llx lly urs ury) ())
  (setcharwidth "inform character cache"
		(wx wy) ())
  (setcachelimit "set maxbitmap limit in cache" (maxbits) ())
  )

(def-postscript-group 1"Error operators0 p1471"
0  (dictfull "no more room in dictionary" () ())
  (dictstackoverflow "too many begins" () ())
  (dictstackunderflow "too many ends" () ())
  (execstackoverflow "exec nesting too deep" () ())
  (interrupt "executed when C typed to server (stop)" () ())
  (invalidaccess "attempt to store into readonly object" () ())
  (invalidexit "exit not in loop" () ())
  (invalidfileaccess "bad access string" () ())
  (invalidfont "bad font name or dict" () ())
  (invalidrestore "improper restore" () ())
  (ioerror () ())
  (limitcheck () ())
  (nocurrentpoint () ())
  (rangecheck () ())
  (stackoverflow () ())
  (stackunderflow () ())
  (syntaxerror "input ended within string or proc body" () ())
  (typecheck "argument of wrong type" () ())
  (undefined "name not known" () ())
  (undefinedfilename "file not found" () ())
  (undefinedresult "number over//underflow" () ())
  (unmatchedmark "expected mark not on stack" () ())
  (unregistered "serious system error" () ())
  ("VMerror" "serious system error" () ())
  )
