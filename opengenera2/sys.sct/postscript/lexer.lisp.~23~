;;; -*- Mode: LISP; Syntax: Common-lisp; Package: POSTSCRIPT; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(:mac digit '(:/ #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
      extended-digit (cons ':/ (loop for char from (char-code #\A) to (char-code #\Z)
				     collect (code-char char)
				     collect (char-downcase (code-char char))))
      open #\(
      close #\)
      hex-open #\<
      hex-close #\>
      mark-open #\[
      mark-close #\]
      proc-open #\{
      proc-close #\}
      slash #\/
      percent #\%
      
      plus-minus '(:/ #\+ #\-)
      point #\.
      exponent '(:/ #\E #\e)
      sharp #\#
      
      whitespace '(:/ #\space #\newline #\tab)
      special '(:/ #\( #\) #\< #\> #\[ #\] #\{ #\} #\/ #\%)
      break '(:/ #\( #\) #\< #\> #\[ #\] #\{ #\} #\/ #\% #\space #\newline #\tab -1)
      null '(:/ )
      ascii (cons ':/ (loop for char below 128 collect (code-char char)))

      eof-char -1
      )

(:def comment percent :no-return)

(:def integer
      (:! (:U null plus-minus)
	  (:+ digit)
	  break)
      :unread)

(:def real
      (:! (:U null plus-minus)
	  (:* digit)
	  (:U (:! point
		  (:* digit))
	      (:! point
		  (:* digit)
		  exponent
	          (:U null plus-minus)
	          (:+ digit)))
	  break)
      :unread)

(:def radix
      (:! (:+ digit)
	  sharp
	  (:+ digit)
	  break)
      :unread)

(:def string open :argument)

(:def name
      (:! (:+ (:- ascii break))
	  break)
      :unread)

(:def mark mark-open :argument)
(:def unmark mark-close :argument)

(:def quote slash :argument)

(:def hex-string hex-open :argument)

(:def proc proc-open :argument)
(:def unproc proc-close :argument)

(:opt :white-space-char (rest whitespace))
(:opt :read-function-property 'scan-token)

(:opt :eof-char eof-char)
(:def eof eof-char :argument)

(:end *lexer*)
