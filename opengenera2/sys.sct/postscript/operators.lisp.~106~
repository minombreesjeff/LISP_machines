;;; -*- Mode: LISP; Syntax: Common-lisp; Package: POSTSCRIPT; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(define-operator *:= :no-value (object)
  (print-typed-atomic-object object (interpreter-state-standard-output self)))

(define-operator *:== :no-value (object)
  (print-typed-object object (interpreter-state-standard-output self)))

(define-unary-arithmetic-operator *:abs)

(define-binary-arithmetic-operator *:add +)

(define-operator *:aload :one-value ((array array))
  (operand-stack-push-sequence self array)
  array)

(define-operator *:anchorsearch :multiple-values ((string string) (key string))
  (let ((length (length key)))
    (if (string-equal string key :end1 length)
	(values (nsubstring string length) (nsubstring string 0 length) t)
	(values string nil))))

(define-boolean-or-bit-binary-operator *:and logand)

(defsubst raddeg (ang) (/ (* ang 180) pi))
(defsubst degrad (ang) (/ (* ang pi) 180))

(define-path-operator *:arc :no-value
			    ((center-x number) (center-y number) (radius number)
			     (start-theta number) (end-theta number))
  (add-arc-to-path self center-x center-y radius (degrad start-theta) (degrad end-theta))
  (values))

(define-path-operator *:arcn :no-value
			     ((center-x number) (center-y number) (radius number)
			      (start-theta number) (end-theta number))
  (add-arc-to-path self center-x center-y radius (degrad start-theta) (degrad end-theta)
		   :clockwise t)
  (values))

(define-path-operator *:arcto :multiple-values
			      ((x1 number) (y1 number) (x2 number) (y2 number)
			       (radius number))
  (add-arc-to-to-path self x1 y1 x2 y2 radius))

(define-operator *:array :one-value ((length integer))
  (make-array length))

(define-operator *:ashow :no-value ((x-adj number) (y-adj number) (string string))
  (show-string-internal self string #'(lambda (ignore ignore width height)
					(declare (sys:downward-function))
					(increment-char-position self (+ width x-adj)
								 (+ height y-adj)))))

(define-operator *:astore :one-value ((array array))
  (operand-stack-pop-sequence self array)
  array)

(defsubst atand (x y)
  (raddeg (atan x y)))

(define-binary-arithmetic-operator *:atan atand)

(define-operator *:awidthshow :no-value
			      ((char-x-adj number) (char-y-adj number) (char integer)
			       (x-adj number) (y-adj number) (string string))
  (show-string-internal self string #'(lambda (pchar ignore width height)
					(declare (sys:downward-function))
					(incf width x-adj)
					(incf height y-adj)
					(when (= (char-code pchar) char)
					  (incf width char-x-adj)
					  (incf height char-y-adj))
					(increment-char-position self width height))))

;*:banddevice matrix width height proc

(define-operator *:begin :no-value ((dict hash-table))
  (vector-push-extend dict (interpreter-state-dictionary-stack self)))

(define-operator *:bind :one-value ((proc procedure))
  (labels ((bind-internal (proc)
	     (loop for element being the array-elements of proc using (index index) do
	       (typecase element
		 (symbol
		   (let ((value (lookup-name self element :if-does-not-exist nil)))
		     (when (typep value 'built-in-operator)
		       (setf (aref proc index) value))))
		 (procedure
		   (bind-internal element))))))
    (bind-internal proc))
  proc)

(define-binary-arithmetic-operator *:bitshift ash)

(defflavor postscript-break () (sys:no-action-mixin postscript-error)
  (:default-init-plist :error nil)		D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");never valid.
0  )

(defmethod (dbg:report postscript-break) (stream)
  (format stream "Interpreter debugging break: ")
  (when (plusp (length (interpreter-state-operand-stack interpreter)))
    (format stream "~&Stack: ")
    (format-textual-list (interpreter-state-operand-stack interpreter)
			 #'print-typed-object :stream stream))
  )

(define-operator *:break :no-value ()
  (declare (dbg:error-reporter))
  (signal-proceed-case (() 'postscript-break :error nil :arguments nil :interpreter self)
    (:no-action nil)))

(define-operator *:bytesavailable :one-value (file)
  (ignore file)
  -1)

;*:cachestatus  bsize bmax msize mmax csize cmax blimit

(define-unary-arithmetic-operator *:ceiling)

(define-operator *:charpath :no-value ((string string) (what-if-to-be-stroked boolean))
  (ignore string what-if-to-be-stroked))

(define-operator *:clear :no-value ()
  (setf (fill-pointer (interpreter-state-operand-stack self)) 0))

(define-operator *:cleartomark :no-value ()
  (let* ((stack (interpreter-state-operand-stack self))
	 (index (or (position *mark* stack :from-end t)
		    (signal-error self '*:unmatchedmark))))
    (setf (fill-pointer stack) index)))

(define-operator *:clip :no-value ()
  (push (list :non-zero (interpreter-state-path self))
	(interpreter-state-clipping-paths self)))

(define-operator *:clippath :no-value ()
  (setf (interpreter-state-path self)
	(second (first (interpreter-state-clipping-paths self)))))

(define-operator *:closefile :no-value (file)
  (close file))

(define-path-operator *:closepath :no-value ()
  (close-path self))

(define-operator *:concat :no-value (matrix)
  (graphics:compose-transforms (interpreter-state-transform-matrix self)
			       (coerce matrix 'list)))

(define-operator *:concatmatrix :one-value (matrix1 matrix2 matrix3)
  (stack-let ((temp1 (graphics::make-graphics-transform))
	      (temp2 (graphics::make-graphics-transform)))
    (replace temp1 matrix1)
    (replace temp2 matrix2)
    (graphics:compose-transforms temp2 temp1)
    (replace matrix3 temp2))
  matrix3)

(define-operator *:copy :multiple-values ()
  (let ((thing (operand-stack-pop self)))
    (typecase thing
      (integer
	(loop for object being the array-elements of (interpreter-state-operand-stack self)
		  from (- (fill-pointer (interpreter-state-operand-stack self))
			  thing)
	      do (operand-stack-push self object))
	(values))
      (hash-table
	(let ((ht1 (operand-stack-pop self)))
	  (clrhash thing)
	  (maphash #'(lambda (key value) (setf (gethash key thing) value)) ht1)
	  thing))
      (string
	(let* ((str1 (operand-stack-pop self))
	       (length (string-length str1)))
	  (replace thing str1 :end1 length)
	  (values (nsubstring thing 0 length))))
      (array
	(let* ((arr1 (operand-stack-pop self))
	       (length (length arr1)))
	  (replace thing arr1 :end1 length)
	  (values (subseq thing 0 length))))		;nsubseq?
      (otherwise
	(signal-error self '*:typecheck thing '*:copy)))))

(define-operator *:copypage :no-value ()
  (setf (interpreter-state-page-incomplete self) t))

(define-unary-arithmetic-operator *:cos cosd)

(define-operator *:count :one-value ()
  (fill-pointer (interpreter-state-operand-stack self)))

(define-operator *:countdictstack :one-value ()
  (fill-pointer (interpreter-state-dictionary-stack self)))

(define-operator *:countexecstack :one-value ()
  (interpreter-state-proc-level self))

(define-operator *:counttomark :one-value ()
  (let* ((stack (interpreter-state-operand-stack self))
	 (index (or (position *mark* stack :from-end t)
		    (signal-error self '*:unmatchedmark))))
    (- (fill-pointer stack) index)))

(define-operator *:currentdash :multiple-values ()
  (values (interpreter-state-line-dash-pattern self)
	  (interpreter-state-line-dash-offset self)))

(define-operator *:currentdict :one-value ()
  (aref (interpreter-state-dictionary-stack self)
	(1- (fill-pointer (interpreter-state-dictionary-stack self)))))

(define-operator *:currentfile :one-value ()
  (interpreter-state-input-stream self))

(define-operator *:currentflat :one-value ()
  (interpreter-state-flatness self))

(define-operator *:currentfont :one-value ()
  (interpreter-state-font self))

(define-operator *:currentgray :one-value ()
  (let ((color (interpreter-state-color self)))
    (if (numberp color)
	color
	(/ (expt (color:color-intensity color) 2) 3))))

(define-operator *:currenthsbcolor :multiple-values ()
  (let ((color (interpreter-state-color self)))
    (if (numberp color)
	(values color 0 0)
	(multiple-value-bind (i h s)
	    (color:color-ihs color)
	  (values h s (/ (expt i 2) 3))))))

(define-operator *:currentlinecap :one-value ()
  (ecase (interpreter-state-line-end-shape self)
    (:butt 0)
    (:round 1)
    (:square 2)))

(define-operator *:currentlinejoin :one-value ()
  (ecase (interpreter-state-line-joint-shape self)
    (:miter 0)
    (:round 1)
    (:bevel 2)))

(define-operator *:currentlinewidth :one-value ()
  (interpreter-state-line-width self))

(define-operator *:currentmatrix :one-value (matrix)
  (replace matrix (interpreter-state-transform-matrix self))
  matrix)

(define-operator *:currentmiterlimit :one-value ()
  (interpreter-state-line-miter-limit self))

(define-operator *:currentpoint :multiple-values ()
  (current-position self))

(define-operator *:currentrgbcolor :multiple-values ()
  (let ((color (interpreter-state-color self)))
    (if (numberp color)
	(color:ihs->rgb (sqrt (* color 3)) 0 0)
	(color:color-rgb color))))

(define-operator *:currentscreen :multiple-values ()
  (values (interpreter-state-screen-frequency self)
	  (interpreter-state-screen-angle self)
	  (interpreter-state-screen-procedure self)))

(define-operator *:currenttransfer :one-value ()
  (interpreter-state-transfer-procedure self))

(define-path-operator *:curveto :no-value
				((x1 number) (y1 number) (x2 number) (y2 number)
				 (x3 number) (y3 number))
  (add-to-path self :curve x3 y3 x1 y1 x2 y2))

(define-operator *:cvi :one-value (thing)
  (typecase thing
    (string
      (truncate (read-from-string thing)))
    (number
      (truncate thing))
    (otherwise
      (signal-error self '*:typecheck thing '*:cvi))))

(define-operator *:cvlit :one-value (thing)
  (typecase thing
    ((and symbol (not boolean))
     `',thing)
    (procedure
      (subseq thing 0))
    (otherwise
      thing)))

(define-operator *:cvn :one-value ((string string))
  (intern (string-flipcase string) *name-package*))

(define-operator *:cvr :one-value (thing)
  (typecase thing
    (string
      (float (read-from-string thing)))
    (number
      (float thing))
    (otherwise
      (signal-error self '*:typecheck thing '*:cvi))))

(define-operator *:cvrs :one-value ((num integer) (radix number) (string string))
  (let ((index 0))
    (with-output-to-string (stream string :index index)
      (write num stream :base radix))
    (nsubstring string 0 index)))

(define-operator *:cvs :one-value (thing string)
  (let ((index 0))
    (with-output-to-string (stream string :index index)
      (print-typed-atomic-object thing stream)
      (when (> index (string-length string))
	(signal-error self '*:rangecheck)))
    (values
      (if (= index (string-length string))
	  string
	  (nsubstring string 0 index)))))

(define-operator *:cvx :one-value (thing)
  (typecase thing
    (cons
      (if (eq (first thing) 'quote)
	  (second thing)
	  thing))
    ((and array (not string))
      (let ((proc (make-procedure :make-array (:length (length thing))
				  length (length thing))))
	(replace proc thing)
	proc))
    (otherwise
      thing)))

(define-operator *:def :no-value ((name symbol) value)
  (define-name self name value))

(define-operator *:defaultmatrix :one-value (matrix)
  (replace matrix (interpreter-state-user-transform-matrix self))
  matrix)

(define-operator *:definefont :one-value ((key symbol) (dict hash-table))
  (setf (gethash key (interpreter-state-font-directory self)) dict)
  dict)

(define-operator *:dict :one-value ((size integer))
  (make-hash-table :size size))

;*:dictfull (error)

(define-operator *:dictstack :one-value ((array array))
  (replace array (interpreter-state-dictionary-stack self))
  (subseq array (length (interpreter-state-dictionary-stack self))))

;*:dictstackoverflow (error)
;*:dictstackunderflow (error)

(define-operator *:div :one-value (x y)
  (/ (float x) y))

(defmacro with-maybe-matrix ((var) &body body)
  `(let ((,var (operand-stack-pop self)))
     (if (typep ,var 'sequence)
	 (setq ,var (coerce ,var 'list))
	 (operand-stack-push self ,var)
	 (setq ,var (interpreter-state-transform-matrix self)))
     . ,body))

(define-operator *:dtransform :multiple-values ()
  (with-maybe-matrix (matrix)
    (let ((dy (operand-stack-pop self))
	  (dx (operand-stack-pop self)))
      (graphics:transform-distance dx dy matrix))))

(define-operator *:dup :multiple-values (thing)
  (values thing thing))

;*:echo boolean

(define-operator *:end :no-value ()
  (when ( (fill-pointer (interpreter-state-dictionary-stack self)) 2)
    (signal-error self '*:dictstackunderflow))
  (vector-pop (interpreter-state-dictionary-stack self)))

(define-operator *:eoclip :no-value ()
  (push (list :odd-even (interpreter-state-path self))
	(interpreter-state-clipping-paths self)))

(define-operator *:eofill :no-value ()
  (draw-current-path self :winding-rule :odd-even))

(define-binary-arithmetic-operator *:eq equal)

(define-operator *:erasepage :no-value ()
  (setf (interpreter-state-page-incomplete self) nil)
  (setf (interpreter-state-page-ready self) nil))

;*:errordict (variable)

(define-operator *:exch :multiple-values (x y)
  (values y x))

(define-operator *:exec :no-value (thing)
  (if (typep thing 'procedure)
      (execute-procedure self thing)
      (execute-token self thing)))

;*:execstack array  subarray
;*:execstackoverflow (error)
;*:executeonly thing  thing

(define-operator *:exit :no-value ()
  (throw 'exit t))

(define-operator *:exp :one-value (x y)
  (expt (float x) y))

;*:false (variable)

(define-operator *:file :one-value ((name string) (access string))
  (open name :direction (if (string-equal access "w") :output :input)))

(define-operator *:fill :no-value ()
  (draw-current-path self :winding-rule :non-zero))

(define-operator *:findfont :one-value ((key symbol))
  (or (gethash key (interpreter-state-font-directory self))
      (try-to-create-font self key)))

;*:flattenpath

(define-unary-arithmetic-operator *:floor)

(define-operator *:flush :no-value ()
  (send (interpreter-state-output-stream self) :finish))

(define-operator *:flushfile :no-value (file)
  (send file :finish))

;*:FontDirectory (dict)

(define-operator *:for :no-value
		       ((initial number) (increment number) (limit number) (proc procedure))
  (catch 'exit
    (if (minusp increment)
	(loop for x downfrom initial to limit by (- increment)
	      do (execute-procedure self proc x))
	(loop for x from initial to limit by increment
	      do (execute-procedure self proc x)))))

(define-operator *:forall :no-value (thing proc)
  (catch 'exit
    (typecase thing
      (string
	(map () #'(lambda (char)
		    (execute-procedure self proc (char-code char)))
	     thing))
      (hash-table
	(maphash #'(lambda (key value)
		     (execute-procedure self proc key value))
		 thing))
      (otherwise
	(map () #'(lambda (elem)
		    (execute-procedure self proc elem))
	     thing)))))

;*:framedevice matrix width height proc

(define-comparison-operator *:ge  string)

(define-operator *:get :one-value (thing index)
  (typecase thing
    (hash-table
      (gethash index thing))
    (string
      (char-code (aref thing index)))
    (otherwise
      (aref thing index))))

(define-operator *:getinterval :one-value (array index count)
  (subseq array index (+ index count)))

(define-operator *:grestore :no-value ()
  (restore-graphics-state self nil))

(define-operator *:grestoreall :no-value ()
  (restore-graphics-state self t))

(define-operator *:gsave :no-value ()
  (save-graphics-state self))

(define-comparison-operator *:gt > string>)

(define-operator *:handleerror :no-value (error)
  (signal-error self error))

(define-operator *:identmatrix :one-value (matrix)
  (replace matrix graphics:*identity-transform*))

(define-binary-arithmetic-operator *:idiv truncate)

(define-operator *:idtransform :multiple-values ()
  (with-maybe-matrix (matrix)
    (let ((dy (operand-stack-pop self))
	  (dx (operand-stack-pop self)))
      (graphics:untransform-distance dx dy matrix))))

(define-operator *:if :no-value (cond proc)
  (when cond
    (execute-procedure self proc)))

(define-operator *:ifelse :no-value (cond yes no)
  (execute-procedure self (if cond yes no)))

(define-operator *:image :no-value
			 ((width integer) (height integer) (bits/sample integer)
			  (matrix sequence) (proc procedure))
  (let ((raster (read-image-raster self width height bits/sample proc)))
    (draw-image-raster self raster width height matrix)))

(define-operator *:imagemask :no-value
			     ((width integer) (height integer) (invert boolean)
			      (matrix sequence) (proc procedure))
  (let ((raster (read-image-raster self width height 1 proc)))
    (when invert
      (sys:%draw-rectangle width height 0 0 boole-xor raster))
    (draw-image-raster self raster width height matrix :opaque nil)))

(define-operator *:index :one-value ((n integer))
  (aref (interpreter-state-operand-stack self)
	(- (fill-pointer (interpreter-state-operand-stack self)) (1+ n))))

(define-operator *:initclip :no-value ()
  (setf (interpreter-state-clipping-paths self) nil))

(define-operator *:initgraphics :no-value ()
  (init-graphics (interpreter-state-graphics-state self)))

(define-operator *:initmatrix :no-value ()
  (replace (interpreter-state-transform-matrix self)
	   (interpreter-state-user-transform-matrix self)))

;*:interrupt (error)
;*:invalidaccess (error)
;*:invalidexit (error)
;*:invalidfileaccess (error)
;*:invalidfont (error)
;*:invalidrestore (error)

(define-operator *:invertmatrix :one-value (matrix into-matrix)
  (replace into-matrix (graphics:invert-transform (coerce matrix 'list)))
  into-matrix)

;*:ioerror (error)

(define-operator *:itransform :multiple-values ()
  (with-maybe-matrix (matrix)
    (let ((y (operand-stack-pop self))
	  (x (operand-stack-pop self)))
      (graphics:untransform-point x y matrix))))

(define-operator *:known :one-value ((dict hash-table) (key symbol))
  (multiple-value-bind (ignore found)
      (gethash key dict)
    found))

(define-operator *:kshow :no-value ((proc procedure) (string string))
  (show-string-internal self string #'(lambda (pchar nchar width height)
					(declare (sys:downward-function))
					(increment-char-position self width height)
					(execute-procedure self proc
							   (char-code pchar)
							   (char-code nchar)))))

(define-comparison-operator *:le  string)

(define-operator *:length :one-value (thing)
  (typecase thing
    (hash-table (send thing :size))
    (otherwise (length thing))))

;*:limitcheck (error)

(define-path-operator *:lineto :no-value ((x number) (y number))
  (add-to-path self :line x y))

(define-unary-arithmetic-operator *:ln log)

(define-operator *:load :one-value ((key symbol))
  (lookup-name self key))

(define-operator *:log :one-value (n)
  (/ (log n)
     (log 10)))

(define-operator *:loop :no-value ((proc procedure))
  (catch 'exit
    (loop (execute-procedure self proc))))

(define-comparison-operator *:lt < string<)

(define-operator *:makefont :one-value (font matrix)
  (let ((new-font (make-hash-table :initial-contents font)))
    (setf (font-font-matrix new-font)
	  (coerce (graphics:compose-transforms (coerce (font-font-matrix font) 'list)
					       (coerce matrix 'list))
		  'vector))
    new-font))

(define-operator *:mark :one-value () *mark*)

(define-operator *:matrix :one-value ()
  (coerce graphics:*identity-transform* 'vector))

(define-operator *:maxlength :one-value ((dict hash-table))
  (send dict :size))

(define-binary-arithmetic-operator *:mod rem)

(define-path-operator *:moveto :no-value ((x number) (y number))
  (start-new-subpath self x y))

(define-binary-arithmetic-operator *:mul *)

(define-operator *:ne :one-value (x y)
  (not (equal x y)))

(define-unary-arithmetic-operator *:neg -)

(define-operator *:newpath :no-value ()
  (setf (interpreter-state-path self) ()))

;*:noaccess thing  thing
;*:nocurrentpoint (error)

(define-boolean-or-bit-unary-operator *:not lognot)

;*:null (variable)

(define-operator *:nulldevice :no-value ()
  (setf (interpreter-state-output-stream self) #'sys:null-stream))

(define-boolean-or-bit-binary-operator *:or logior)

(define-operator *:pathbbox :multiple-values ()
  (current-path-bounding-box self))

;*:pathforall move line curve close

(define-operator *:pop :no-value (ignore))

(define-operator *:print :no-value ((string string))
  (write-string string (interpreter-state-standard-output self)))

;*:prompt

(define-operator *:pstack :no-value ()
  (format-textual-list (interpreter-state-operand-stack self) #'print-typed-object
		       :stream (interpreter-state-standard-output self)))

(define-operator *:put :no-value (place index value)
  (typecase place
    (hash-table
      (setf (gethash index place) value))
    (string
      (setf (aref place index) (code-char value)))
    (otherwise
      (setf (aref place index) value))))

(define-operator *:putinterval :no-value (to-array index from-array)
  (replace to-array from-array :start1 index))

(define-operator *:quit :no-value ()
  (throw 'quit nil))

(define-operator *:rand :one-value ()
  (random 1_32))

;*:rangecheck (error)

(define-operator *:rcheck :one-value (ignore) t)

(define-path-operator *:rcurveto :no-value
				 ((dx1 number) (dy1 number)
				  (dx2 number) (dy2 number)
				  (dx3 number) (dy3 number))
  (multiple-value-bind (x y)
      (current-position self)
    (add-to-path self :curve (+ x dx3) (+ y dy3) (+ x dx1) (+ y dy1) (+ x dx2) (+ y dy2))))

(define-operator *:read :multiple-values (file)
  (let ((char (read-char file nil nil)))
    (if char
	(values (char-code char) t)
      (close file)
      nil)))

(define-operator *:readhexstring :multiple-values (file (string string))
  (let ((index 0)
	(half nil)
	(length (string-length string)))
    (loop
      (when ( index length)
	(return (values string t)))
      (let ((char (read-char file nil nil)))
	(when (null char)
	  (return (values (nsubstring string 0 index) nil)))
	(let ((n (digit-char-p char 16)))
	  (when n
	    (if (null half)
		(setq half (* n 16))
		(setf (aref string index) (code-char (+ half n)))
		(setq half nil)
		(incf index))))))))

(define-operator *:readline :multiple-values (file (string string))
  (multiple-value-bind (length eof-p more-p)
      (send file :string-line-in nil string)
    (when more-p
      (signal-error self '*:rangecheck string '*:readline))
    (values (nsubstring string 0 length) (not eof-p))))

;*:readonly thing  thing

(define-operator *:readstring :multiple-values (file (string string))
  (multiple-value-bind (length eof-p)
      (send file :string-in nil string)
    (values (nsubstring string 0 length) (not eof-p))))

;*:renderbands proc

(define-operator *:repeat :no-value ((times integer) (proc procedure))
  (catch 'exit
    (dotimes (i times)
      (execute-procedure self proc))))

(define-operator *:resetfile :no-value (file)
  (send file :clear-input))

(define-operator *:restore :no-value (ignore))

;*:reversepath

(define-path-operator *:rlineto :no-value ((dx number) (dy number))
  (multiple-value-bind (x y)
      (current-position self)
    (add-to-path self :line (+ x dx) (+ y dy))))

(define-path-operator *:rmoveto :no-value ((dx number) (dy number))
  (multiple-value-bind (x y)
      (current-position self)
    (start-new-subpath self (+ x dx) (+ y dy))))

(define-operator *:roll :no-value (n j)
  (setq j (mod j n))
  (unless (zerop j)
    (let* ((stack (interpreter-state-operand-stack self))
	   (length (fill-pointer stack)))
      (incf (fill-pointer stack) j)
      (replace stack stack :start2 (- length n) :end2 length
			   :start1 (- length (- n j)) :end1 (+ length j))
      (replace stack stack :start2 length :end2 (+ length j)
			   :start1 (- length n) :end1 (- length (- n j)))
      (setf (fill-pointer stack) length))))

(defmacro with-matrix-to-transform (arguments &body body)
  (multiple-value-bind (arglist template)
      (construct-argument-template arguments)
    `(flet ((do-it (self . ,arglist)
	      (declare (sys:downward-function))
	      (ignore self)
	      ,@body
	      (values)))
       (let ((matrix (operand-stack-pop self))
	     (template ',template))
	 (cond ((typep matrix 'sequence)
		(graphics::saving-graphics-transform (self)
		  (replace (graphics:stream-transform self) matrix)
		  (execute-argument-template self #'do-it template)
		  (replace matrix (graphics:stream-transform self)))
		matrix)
	       (t
		(operand-stack-push self matrix)
		(execute-argument-template self #'do-it template)
		(values)))))))

(define-operator *:rotate :multiple-values ()
  (with-matrix-to-transform ((angle number))
    (graphics:graphics-rotate (degrad angle) :stream self)))

(define-unary-arithmetic-operator *:round)

;*:rrand  int

(define-operator *:run :no-value ((filename string))
  (with-open-file (stream filename)
    (execute-file self stream)))

(define-operator *:save :one-value () '(saved))

(define-operator *:scale :multiple-values ()
  (with-matrix-to-transform ((scale-x number) (scale-y number))
    (graphics:graphics-scale scale-x scale-y :stream self)))

(define-operator *:scalefont :one-value (font scale)
  (let ((new-font (make-hash-table :initial-contents font)))
    (setf (font-font-matrix new-font)
	  (coerce (graphics:compose-transforms (coerce (font-font-matrix font) 'list)
					       (list scale 0 0 scale 0 0))
		  'vector))
    new-font))

(define-operator *:search :multiple-values ((string string) (key string))
  (let ((index (string-search key string)))
    (if (null index)
	(values string nil)
	(values (nsubstring string 0 index)
		(nsubstring string index (+ index (string-length key)))
		(nsubstring string (+ index (string-length key)))
		t))))

(define-operator *:setcachedevice :no-value ((width-x number) (width-y number)
				   (bb-left number) (bb-top number)
				   (bb-right number) (bb-bottom number))
  (ignore bb-left bb-top bb-right bb-bottom)
  (set-current-char-width self width-x width-y))

;;; We have so much more memory that this isn't likely to make any difference at all.
(define-operator *:setcachelimit :no-value (ignore))

(define-operator *:setcharwidth :no-value ((width-x number) (width-y number))
  (set-current-char-width self width-x width-y))

(define-operator *:setdash :no-value ((array array) (offset integer))
  (setf (interpreter-state-line-dash-pattern self) array)
  (setf (interpreter-state-line-dash-offset self) offset))

(define-operator *:setflat :no-value ((num number))
  (setf (interpreter-state-flatness self) num))

(define-operator *:setfont :no-value ((font hash-table))
  (setf (interpreter-state-font self) font))

(define-operator *:setgray :no-value ((num number))
  (set-color self num))

(define-operator *:sethsbcolor :no-value (h s b)
  (set-color self (if (= s 0) b (color:make-color :ihs (list (sqrt (* b 3)) h s)))))

(define-operator *:setlinecap :no-value ((int (integer 0 2)))
  (setf (interpreter-state-line-end-shape self) (nth int '(:butt :round :square))))

(define-operator *:setlinejoin :no-value ((int (integer 0 2)))
  (setf (interpreter-state-line-joint-shape self) (nth int '(:miter :round :bevel))))

(define-operator *:setlinewidth :no-value ((num number))
  (setf (interpreter-state-line-width self) num))

(define-operator *:setmatrix :no-value (matrix)
  (replace (graphics:stream-transform self) matrix))

(define-operator *:setmiterlimit :no-value ((num number))
  (setf (interpreter-state-line-miter-limit self) num))

(define-operator *:setrgbcolor :no-value (r g b)
  (set-color self (if (and (= r 1) (= g 1) (= b 1))
		      0
		      (color:make-color :rgb (list r g b)))))

(define-operator *:setscreen :no-value (freq angle proc)
  (setf (interpreter-state-screen-frequency self) freq
	(interpreter-state-screen-angle self) angle
	(interpreter-state-screen-procedure self) proc)
  (set-color self (interpreter-state-color self)))

(define-operator *:settransfer :no-value ((proc procedure))
  (setf (interpreter-state-transfer-procedure self) proc))

(define-operator *:show :no-value ((string string))
  (show-string-internal self string #'(lambda (ignore ignore width height)
					(increment-char-position self width height))))

(define-operator *:showpage :no-value ()
  (setf (interpreter-state-page-incomplete self) t)
  (setf (interpreter-state-page-ready self) nil)
  (init-graphics (interpreter-state-graphics-state self)))

(define-unary-arithmetic-operator *:sin sind)

(define-unary-arithmetic-operator *:sqrt)

;*:srand int

(define-operator *:stack :no-value ()
  (format-textual-list (interpreter-state-operand-stack self) #'print-typed-atomic-object
		       :stream (interpreter-state-standard-output self)))

;*:stackoverflow (error)
;*:stackunderflow (error)
;*:StandardEncoding
;*:start
;*:status file  boolean

(define-operator *:stop :no-value ()
  (throw 'stop t))

(define-operator *:stopped :one-value (obj)
  (catch 'stop
    (typecase obj
      (procedure (execute-procedure self obj))
      (otherwise (execute-token self obj)))
    nil))

(define-operator *:store :no-value ((key symbol) value )
  (define-name self key value :if-exists :supersede))

(define-operator *:string :one-value ((n integer))
  (make-string n))

(define-operator *:stringwidth :multiple-values ((string string))
  (compute-string-width self string))

(define-operator *:stroke :no-value ()
  (draw-current-path self :filled nil))

;*:strokepath

(define-binary-arithmetic-operator *:sub -)

;*:syntaxerror (error)
;*:systemdict (var)
;*:timeout (error)

(define-operator *:token :multiple-values (whence)
  (let ((token
	  (typecase whence
	    (string
	      (with-input-from-string (stream whence)
		(scan-next-token stream)))
	    (otherwise
	      (scan-next-token whence)))))
    (unless (eq token *eof*)
      (values token t))))

(define-operator *:transform :multiple-values ()
  (with-maybe-matrix (matrix)
    (let ((y (operand-stack-pop self))
	  (x (operand-stack-pop self)))
      (graphics:transform-point x y matrix))))

(define-operator *:translate :multiple-values ()
  (with-matrix-to-transform ((tx number) (ty number))
    (graphics:graphics-translate tx ty :stream self)))

;*:true (var)

(define-unary-arithmetic-operator *:truncate)

(define-operator *:type :one-value (thing)
  (typecase thing
    (integer '*:integertype)
    (string '*:stringtype)
    (float '*:realtype)
    (built-in-operator '*:operatortype)
    (hash-table '*:dictttype)
    (stream '*:filetype)
    (boolean '*:booleantype)
    (array '*:arraytype)
    (symbol '*:nametype)
    (cons (case (first thing)
	    (mark '*:marktype)))))

;*:typecheck (error)
;*:undefined (error)
;*:undefinedfilename (error)
;*:undefinedresult (error)
;*:unmatchedmark (error)
;*:unregistered (error)
;*:userdict (var)

(define-operator *:usertime :one-value ()
  (truncate (sys:%microsecond-clock) 10))

(define-operator *:version :one-value () (multiple-value-bind (major minor)
					     (sct:get-system-version)
					   (format nil "~D.~D" major minor)))

;*:VMerror (error)
;*:vmstatus  level user maximum
;*:wcheck thing  boolean

(define-operator *:where :multiple-values ((key symbol))
  (let ((stack (interpreter-state-dictionary-stack self)))
    (loop for dict being the array-elements of stack downfrom (1- (fill-pointer stack)) to 0
	  do
      (let ((value (gethash key dict 'undefined)))
	(unless (eq value 'undefined)
	  (return (values dict t)))))))

(define-operator *:widthshow :no-value
			     ((char-x-adj number) (char-y-adj number) (char integer)
			      (string string))
  (show-string-internal self string #'(lambda (pchar ignore width height)
					(declare (sys:downward-function))
					(when (= (char-code pchar) char)
					  (incf width char-x-adj)
					  (incf height char-y-adj))
					(increment-char-position self width height))))

(define-operator *:write :no-value (file (int integer))
  (write-char (code-char int) file))

(define-operator *:writehexstring :no-value (file (string string))
  (loop for char being the array-elements of string
	do (write (char-code char) :stream file :base 16)))

(define-operator *:writestring :no-value (file (string string))
  (write-string string file))

(define-operator *:xcheck :one-value (thing)
  (typep thing '(not (or cons (and array (not (or string procedure)))))))

(defun xor (x y) (neq (not x) (not y)))

(define-boolean-or-bit-binary-operator *:xor logxor)
