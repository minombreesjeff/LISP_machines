;;; -*- Mode: Lisp; Package: COMPILER; Lowercase: T; Base: 8 -*-
;;; Basic support for compiling files.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun uncompile (function-spec &aux old)
  "Replaces compiled definition of FUNCTION-SPEC with interpreted definition.
If the interpreted function which was compiled is known,
installs that as the definition in place of the compiled one."
  (cond ((setq old (assq ':interpreted-definition
			 (debugging-info (fdefinition function-spec))))
	 (let ((fdefine-file-pathname nil))
	   (fdefine function-spec (cadr old) t t)))
	((typep (fdefinition function-spec) ':compiled-function)
	 "No interpreted definition recorded")
	(T "Not compiled")))

(defstruct (source-locator :conc-name :list (:constructor make-source-locator-internal))
  ((start-pc (byte 16. 0))			;start pc
   (pc-interval (byte 16. 16.)))		;pc interval size
  form)						;form corresponding to interval

(defun make-source-locator (pc interval form)
  (let* ((default-cons-area si:source-locator-area)
	 (locator (make-source-locator-internal)))
    (setf (source-locator-start-pc locator) pc)
    (setf (source-locator-pc-interval locator) interval)
    (setf (source-locator-form locator) form)
    locator))

(defvar *binary-output-stream*)

(defvar fs:*package-root* (cl:find-package "USER"))

(defun compile-file (infile &optional outfile in-package dont-set-default-p)
  (declare (values binary source-truename binary-truename))
  (let ((si:*default-binary-file-type* (get-default-binary-file-type *compiler*)))
    (let ((pathname (fs:parse-pathname infile nil fs:load-pathname-defaults))
	  ;; SCT uses in-package
	  (in-package
	    (when in-package
	      (get-read-package *compiler* in-package)))
	  ;; This is bound so that the package in the attribute list will be
	  ;; appropriately interpreted.
	  (fs:*package-root*
	    (or in-package
		(get-read-package *compiler* (cl:find-package "SYS"))))
	  generic-pathname
	  source-truename bin-truename)
      (catch-error-restart (error "Skip compiling ~A" infile)
	(error-restart (error "Retry compiling ~A" infile)
	  (with-open-file-search (input-stream ('compile-file fs:load-pathname-defaults t)
					       (fs:load-type-list pathname))
	    ;; Default the specified input and output file names.  Open files.
	    ;; The input pathname might have been changed by the user in response to an error
	    (setq pathname (send input-stream ':pathname))
	    (unless dont-set-default-p
	      (fs:set-default-pathname pathname fs:load-pathname-defaults))
	    (setq generic-pathname (send pathname ':generic-pathname))
	    (setq outfile (if outfile
			      (fs:merge-pathnames
				outfile
				(send pathname ':new-canonical-type
				      si:*default-binary-file-type*))
			      (send pathname ':new-pathname
				    ':canonical-type si:*default-binary-file-type*
				    ':version ':newest)))
	    ;; Get the attribute list again, in case we don't have it already or it changed
	    (fs:read-attribute-list generic-pathname input-stream)
	    ;; Get the truenames from the streams
	    (setq source-truename (send input-stream :truename))
	    (setq bin-truename
		  (si:writing-bin-file (*binary-output-stream* outfile)
		    (compile-from-stream input-stream generic-pathname 'compile-to-file
					 (and in-package `(:package ,in-package)))))
	    (values outfile source-truename bin-truename)))))))

(defselect (compile-to-file compile-process-default)
  (:process-form (process-function form)
   (funcall process-function form nil '(() () () () (((future-common-lisp:compile-file))))))
  (:compile-lambda-expression (lambda-exp &optional environment)
    (compile-lambda-exp lambda-exp nil nil environment))
  (:dump-form (form &optional environment)
   (si:dump-form-to-eval (funcall *compile-function* :optimize-top-level-form form environment)
			 *binary-output-stream*))
  (:initialize (input-stream generic-pathname &aux plist)
   (setq plist (compute-attribute-list input-stream *binary-output-stream* generic-pathname))
   (si:dump-attribute-list plist *binary-output-stream*))
  (:for-file () t)
  (:to-core-p () nil)
  )

(defun compile-file-load (&rest compile-file-args)
  (declare (arglist infile &optional outfile in-package dont-set-default-p))
  (load (lexpr-funcall #'compile-file compile-file-args)))
