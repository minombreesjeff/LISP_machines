;;; -*- Mode: Lisp; Package: COMPILER; Lowercase: T; Base: 8 -*-
;;; This file is >llc>debug.
;;; This file contains debugging tools.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *lc-print-source* t)
(defvar *lc-print-4* t)

;;; Use this function, since it knows how to decide whether the editor is loaded yet.
(si:defmacro-set-indentation-for-zwei 'labels 1)
(si:defmacro-set-indentation-for-zwei 'catch 1)

(comment
(defun test-file (file-name &optional in-package)
  (with-open-file (input-stream
		    (fs:merge-pathname-defaults file-name fs:load-pathname-defaults "LISP")
		    '(:read))
    (let* ((input-pathname (funcall input-stream ':pathname))
	   (generic-pathname (funcall input-pathname ':generic-pathname)))
      (fs:file-read-property-list generic-pathname input-stream)
      (multiple-value-bind (vars vals) (fs:file-property-bindings generic-pathname)
	(progv vars vals
	   (let ((fdefine-file-pathname generic-pathname)
		 (package package)
		 (compiler:qc-file-in-progress t)  ;;; is this right?
		 (compiler:qc-file-read-in-progress t)
		 (undo-declarations-flag t)
		 (local-declarations nil))
	     ;; Remap the package
	     (if (equal (pkg-name package) "SYSTEM-INTERNALS")
		 (setq package (pkg-find-package "SYSTEM-INTERNALS")))
	     (if (not (null in-package))
		 (setq package (pkg-find-package in-package ':ask)))
	     (loop with si:status-feature-list = (cons 3600. si:status-feature-list)
		   with eof = (ncons nil)
		   for form = (read input-stream eof)
		   until (eq form eof)
		   do (compiler:compile-driver form 'test-file-internal nil))))))))

(defun test-file-internal (form type)
  (selectq type
    ((special declare)
     (format t "~&Declaration being evaluated: ~S" form)
     (eval form))
    (macro
     (eval form)
     (format t "~&Compiling macro ~S:" (second form))
     (p4-test nil `(defun . ,(cdr form))))
    (begf)
    (random
     (format t "~&Random form to dump: ~S~%" form))
    (defun
     (format t "~&Compiling function ~S:" (second form))
     (p4-test nil form))
    (otherwise
     (ferror nil "Compile-driver lost."))))
)

(defun test-file (file pkg)
  (pkg-bind pkg
    (with-open-file (i file)
      (loop as form = (condition-case () (read i) (sys:end-of-file (return nil)))
	    when (and (listp form) (eq (car form) 'defun)
		      (fquery () "Compile ~A? " (cadr form)))
	      do (p4-test nil form)))))

(defun p4-test (string form)
  (compiler-warnings-context-bind
    (if string (format t "~&~A" string))
    (catch 'phase-1		   ;;;kludge to catch errors in arglist of functions.
      (matchp form
	(('defun spec l-list . body)
	 (cond (*lc-print-source*
		(format t "~2%")
		(cl:pprint form)))
	 (let ((*function-list* nil))
	   (let ((*phase-1-form* spec))		;for error messages.
	     (run-phase-1-function spec l-list body))
	   (when *lc-print-1*
	     (format t "~%")
	     (mapc #'print-function *function-list*))
	   (run-phase-2)
	   (when *lc-print-2*
	     (loop for function in *function-list*
		   do (print-function function)
		      (mapc #'print-function (function-frame-sharers function))))
	   (when *run-phase-3*
	     (run-phase-3))
	   (when *lc-print-3*
	     (loop for function in *function-list*
		   do (print-function function)
		      (mapc #'print-function (function-frame-sharers function))))
	   (run-phase-4 nil)
	   (when *lc-print-4*
	     (mapc #+3600 #'l-lisp-compiler:disassemble-function
		   #+imach #'i-lisp-compiler:disassemble-function
		   *function-list*))))
	(* (format t "~%That is not a DEFUN."))))
    (format t "~2%")))

;;; Kludge, compiler loaded before editor
zwei:(compiler-let ((package (pkg-find-package "ZWEI")))
(defun com-p4-test-definition ()
  "Run COMPILER:P4-TEST on the current DEFUN"
  (multiple-value-bind (interval definition-name)
      (definition-interval (beg-line (point)) 1 nil nil)
    (or interval (barf "No definition"))
    (check-interval-sections interval)
    (setq definition-name (get-definition-name definition-name))
    (typein-line "~&L-compiling ~A" definition-name)
    (let ((stream (open-interval-stream interval))
	  (compiler:*lc-print-source* nil))
      (compiler:p4-test definition-name (barf-on-errors (sys:read-error)
							(read stream))))
    (typein-line "~&~A L-compiled." definition-name)
    dis-none))

(add-initialization "COM-P4-TEST-DEFINITION"
		    '(command-define 'com-p4-test-definition
				     (documentation 'com-p4-test-definition)
				     nil)
		    ()
		    '*editor-initialization-list*)
)

(defun p4-test-loop ()
  (catch-error-restart ((error sys:abort) "Return from P4 Test Loop")
    (pkg-bind "SYSTEM-INTERNALS"
      (loop for i from 1
	    as string = (format nil "Test-~D" i)
	    as form = (prompt-and-read :expression "Form ")
	    do (p4-test string form)))))

(defun lc (form)
  (let ((*function* (make-external-function))
	(*function-list* nil))
    (let ((interval (run-phase-1 form)))
      (print-interval interval))
    (mapc #'print-function *function-list*)))

(defun lc-loop ()
  (format t "~2%")
  (loop for form = (read-for-top-level)
	while (not (atom form))
	do (progn
	     (format t "~3%")
	     (cl:pprint form)
	     (format t "~3%")
	     (lc form)
	     (format t "~2%"))))

(defun lc-test (string form)
  (format t "~A~2%" string)
  (cl:pprint form)
  (format t "~3%")
  (lc form)
  (format t "~2%"))

(defun lcf (sym)
  (matchp (fsymeval sym)
    (('named-lambda spec l-list . body)
     (phase-1-and-print-definition (fsymeval sym) spec l-list body))
    (* (format t "~S is not a function." sym))))

(defun lcf-loop ()
  (format t "~2%")
  (loop for form = (read-for-top-level)
	while (not (atom form))
	do (matchp form
	     (('defun spec l-list . body)
	      (phase-1-and-print-definition form spec l-list body))
	     (* (format t "That is not a DEFUN.")))))

(defun lcf-test (string form)
  (format t "~&~A" string)
  (matchp form
    (('defun spec l-list . body)
     (phase-1-and-print-definition form spec l-list body))
    (* (format t "That is not a DEFUN.")))
  (format t "~2%"))

(defun phase-1-and-print-definition (form spec l-list body)
  (format t "~3%")
  (cl:pprint form)
  (format t "~3%")
  (let ((*function-list* nil))
    (run-phase-1-function spec l-list body)
    (mapc #'print-function *function-list*)))

;;;; Print-out of Byte Lap (for debugging).

(defun print-function (function)
  (let ((type (function-type function)))
    (format t "~2&")
    (if (eq type 'internal)
	(format t "~S " (function-pr function)))
    (format t "~A function. Lambda list: ~S  "
	  (selectq type (internal "Internal") (external "External") (otherwise type))
	  (function-lambda-list function)))
  (let* ((ai (function-args-info function))
	 (min (ldb system:%%arg-desc-min-args ai))
	 (max (ldb system:%%arg-desc-max-args ai)))
    (if (= min max)
	(format t "~S argument~:P" min)
	(format t "Between ~S and ~S argument~:P" min max))
    (cond ((ldb-test system:%%arg-desc-rest-arg ai)
	   (format t " and a rest argument."))
	  (t
	   (format t "."))))
  (let* ((doc (function-documentation-string function)))
    (if (not (null doc))
	(format t "~&Documentation: ~A" doc))
    (cond ((eq (function-type function) 'internal)
	   (if (function-refers-lexically-p function)
	       (format t "~&This function makes lexical free references."))
	   (if (function-funarg-p function)
	       (format t "~&This function is passed as a FUNARG."))))
    (format t "~&Byte-lap for body:")
    (let ((int (function-interval function)))
      (if (null int)
	  (format t "~2&[No code was generated.]")
	  (print-interval int)))
    (format t "~2&")))

(defun print-interval (interval &optional (stream standard-output))
  (cl:fresh-line stream)
  (loop with last-inst = (interval-last interval)
	for i first (interval-first interval) then (inst-next i)
	for first-instruction first t then nil
	do (unless (and first-instruction (eq (inst-opcode i) 'no-op))
	     (if (eq (inst-opcode i) 'tag)
	     (format stream " ~A~%" i)
	     (format stream "  ~A~%" i)))
	until (eq i last-inst)))

(defun print-branches ()
  (dolist (branch *all-branches*)
    (let ((tag (branch-tag branch)))
      (format t "~%~S at ~S->~S to ~S"
	      (branch-type branch) (branch-pre-address branch)
	      (branch-post-address branch) (tag-address tag)))))

(defun list-uncompilable-special-forms ()
  (do-all-symbols (f)
    (when (fboundp f)
      (let ((def (fsymeval f)))
	(when (and (listp def)
		   (eq (first def) 'special)
		   (null (second def)))
	  (unless (getl f '(transformers phase-1 phase-1-hook))
	    (unless (memq f '(quote		;Specially built into the compiler
			       inhibit-style-warnings))
	      (format t "~&~S is a special form that the compiler doesn't know how to compile~
			~:[.~; but does know how to optimize.~]"
		      f (get f 'optimizers)))))))))
