;;; -*- Mode: Lisp; Package: COMPILER; Lowercase: T; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Basic support for compiling to core.

(defun compile (function-spec &optional (lambda-exp nil lambda-exp-p))
  (let ((lambda-exp 
	  (if lambda-exp-p
	      (cl:coerce lambda-exp 'future-common-lisp:function)
	      (if (fdefinedp function-spec)
		  (fdefinition (si:unencapsulate-function-spec function-spec))
		  (ferror "Cannot find LAMBDA expression for ~S" function-spec)))))
    (flet ((doit (fcn)
	     (cl:etypecase fcn
	       (cl:cons (setq fcn (si:enclose fcn nil function-spec)))
	       (future-common-lisp:function))
	     (when (si:interpreted-function-p fcn)
	       (let* ((tdata (sys:lexical-closure-environment fcn))
		      (env (car tdata))
		      (lambda-exp (cdr tdata)))
		 (setq lambda-exp (lambda-macro-expand lambda-exp env))
		 (when (and function-spec (null (car (third (cdr tdata)))))
		   (setq lambda-exp
			 `(,(first lambda-exp) ,(second lambda-exp)
			   (declare (sys:function-name ,function-spec))
			   ,@(cddr lambda-exp))))
		 (setf env (si:evacuate-environment env))
		 (si:with-interpreter-environment
		   (env env (pop env) (pop env) (pop env) (pop env) (car env))
		   (setf (si:env-variables env)
			 (mapcar #'(lambda (entry)
				     (let ((loc (cdr entry)))
				       (when (or (locativep loc)
						 (and (listp loc) (not (cdr loc))))
					 (setf entry (list (car entry)
							   `(location-contents ,(if (locativep loc) loc (locf (car loc))))
							   t))))
				     entry)
				 (si:env-variables env)))
		   (setf (si:env-functions env)
			 (mapcar #'(lambda (entry)
				     (when (functionp (second entry))
				       (setf entry (list (first entry) (make-interpreter-function :function-spec (first entry) :interpreter-function-location (locf (second entry))))))
				     entry)
				 (si:env-functions env)))
		   (compiler-warnings-context-bind
		     (let ((*correspondences* nil)
			   (*compile-function* #'compile-to-core)
			   (si:*compiled-function-constant-mode* :unlocalized))
		       (setf fcn (funcall *compile-function* :compile-lambda-expression
					  lambda-exp env)))))))
	     fcn))
      (let ((result (if (and (listp lambda-exp) (eq (first lambda-exp) 'special))
			`(special ,@(mapcar #'doit (rest1 lambda-exp)))
			(doit lambda-exp))))
	(when function-spec
	  (fdefine function-spec result t))
	(or function-spec result)))))

(defselect compile-process-default
  (:eval-form (form &optional environment) (eval form environment))
  (:macro-expand (form &optional environment) (macroexpand form environment t))
  (:optimize-top-level-form (form &optional environment)
   (block optimize
     (catch 'phase-1
       (return-from optimize
	 (optimize-top-level-form form :compile t :do-style-checking t
				  :environment environment
				  :compile-function #'compile-function-function)))
     form))
  (:compiler-type () ':llc)
  (:cons-area () default-cons-area)
  ((:initialize :finalize) (&rest ignore))
  (:read (stream eof-value ignore) (read stream eof-value))
  )

(defvar *inhibit-using-source-locators* 't)

(defselect (compile-to-core compile-process-default)
  (:process-form (process-function form)
   (let-if (not *inhibit-using-source-locators*)
	   ((*use-source-locators* :lisp-list)
	    (*source-locator-word-maker* #'make-source-locator)
	    (*read-correspondences* *correspondences*))
     (let ((*starting-warning-tick* new-compiler-warnings-tick))
       (funcall process-function form))))
  (:dump-form (form &optional environment)
   (let ((form (funcall *compile-function* :optimize-top-level-form form environment)))
     (when (or (= new-compiler-warnings-tick *starting-warning-tick*)
	       (cl:ecase *COMPILER-WARNINGS-TO-CORE-ACTION*
		 (:define t)
		 (:query (fquery
			   format:yes-or-no-p-options
			   "Do you really want to execute the form despite these warnings? "))
		 (:warn (warn "Executing despite compiler warnings.") t)
		 (:do-not-define nil)))
       (eval-form *compiler* form environment))))
  (:compile-lambda-expression (lambda-exp &optional environment)
   (compile-lambda-exp lambda-exp
		       t
		       (if *inhibit-using-source-locators*
			   nil
			   `((:interpreted-form ,lambda-exp)
			     (:read-correspondences ,*correspondences*)))
		       environment))
  (:read (stream eof-value ignore)
   (let-if (not *inhibit-using-source-locators*)
	   ((si:xr-maintain-correspondence t)
	    (si:xr-correspondences nil))
     (multiple-value-prog1
       (read stream eof-value)
       (setq *correspondences* si:xr-correspondences))))
  (:for-file () nil)
  (:to-core-p () t)
  )

(defun compile-lambda-exp (lambda-exp fixup-p debug-info &optional environment)
  (setq lambda-exp (si:undigest (lambda-macro-expand lambda-exp environment)))
  (if (si:interpreted-lambda-p lambda-exp)
      (destructuring-bind (lambda-list &rest definition)
	  (si:interpreted-lambda-lambda-list-and-body lambda-exp)
	(compile-definition-internal 'defun lambda-list debug-info definition
				     fixup-p environment))
      (llc-error "~S is not a valid form" lambda-exp)))

;;; DEBUG-INFO is the info that comes from a NAMED-LAMBDA spec.
(defun compile-definition-internal
       (type lambda-list debug-info definition fixup-p &optional environment)
  (declare (values compiled-definition))
  (let ((*local-block-size-adjustment* 0)
	(*n-retries* *initial-n-retries*))
    (loop doing
      (catch 'retry-compile
	(tv:noting-progress ("")
	  ;; We won't know the name (if there is one) until we get to
	  ;; phase-1-function-definition, so just bind the progress note here.  We set the
	  ;; name in phase-1-function-definition.
	  (let* ((scl:*print-readably* nil)	;make sure progress notes don't croak
		 (*function-list* nil)
		 (*internal-functions* nil)
		 (*control-stack-state* nil))
	    (tv:note-progress 1 9)
	    (let ((function (run-phase-1-function lambda-list definition environment)))
	      (when debug-info
		(let ((declares (function-user-declares function)))
		  (dolist (dcl debug-info)
		    (or (assq (car dcl) declares)
			(push dcl declares)))
		  (setf (function-user-declares function) declares)))
	      (tv:note-progress 2 9)
	      (setf *function-list* (adjust-stack-frame-sizes *function-list*))
	      (tv:note-progress 3 9)
	      (mapc #'resolve-non-local-jumps *function-list*)
	      (tv:note-progress 4 9)
	      (remove-superseded-variables)
	      (tv:note-progress 5 9)
	      (run-phase-2)
	      (tv:note-progress 6 9)
	      (optimize-intermediate-representation *function-list*)
	      (tv:note-progress 7 9)
	      (run-phase-3a)
	      (tv:note-progress 8 9)
	      (generate-object-representation *compiler* *function-list* fixup-p)
	      (tv:note-progress 9 9)
	      (setq function (get-function-compiled-code-object *compiler* function))
	      (return-from compile-definition-internal
		(selectq type			;type is the name of the
						;function-defining special form 
		  (defun function)
		  (macro `(special ,function))
		  (otherwise (ferror nil "~S is not a known definition type" type)))))))))))

(defun compile-forms (list)
  (let ((inhibit-fdefine-warnings inhibit-fdefine-warnings)
	(*compile-function* #'compile-to-core)
	(*read-then-process-flag* nil)		;so it doesn't try to close the stream
	(si:*compiled-function-constant-mode* :unlocalized))
      ;; Bind all the variables required by the file property list
      (let* ((qc-file-in-progress (funcall *compile-function* ':compiler-type))
	     (qc-file-load-flag (funcall *compile-function* ':to-core-p))
	     (undo-declarations-flag (not qc-file-load-flag))
	     (local-declarations nil)
	     (open-code-map-switch open-code-map-switch)
	     (run-in-maclisp-switch run-in-maclisp-switch)
	     (obsolete-function-warning-switch obsolete-function-warning-switch)
	     (all-special-switch all-special-switch)
	     (qc-file-old-default-cons-area default-cons-area))
	(compiler-warnings-context-bind
	  (process-forms-from-stream
	    #'(lambda (message &rest args)
		(cl:ecase message
		  (:which-operations '(:read))
		  (:operation-handled-p
		    (cl:member (first args) '(:read))) 
		  (:read
		    (if list
			(pop list)
			(first args)))))
	    'compile-from-stream-1
	    (funcall *compile-function* ':for-file)
	    (funcall *compile-function* ':cons-area))))))

(defun disassemble (function &optional from-pc to-pc)
  ;; Canonicalize the argument, which might be any function or function spec.
  (let (tem)
    (cl:loop
       (cond ((cl:compiled-function-p function) (return))
	     ((validate-function-spec function)
	      (setf function (fdefinition (si:unencapsulate-function-spec function))))
	     ((or (si:interpreted-function-p function)
		  (si:interpreted-lambda-p function))
	      (setf function (compile nil function)))
	     ((typep function :lexical-closure)
	      (setf function (lexical-closure-function function)))
	     ((setf tem (special-form-p function))
	      (format t "~%Definition as special-form interpreter")
	      (setf function tem))
	     ((setf tem (macro-function function))
	      (format t "~%Definition as macro-expander function")
	      (setf function tem))
	     (t
	      (error "~S is not a compiled function and could not be coerced into one."
		     function)))))
  (disassemble-cca (compiled-function-cca function) from-pc (if to-pc (1+ to-pc)))
  (terpri)
  function)
