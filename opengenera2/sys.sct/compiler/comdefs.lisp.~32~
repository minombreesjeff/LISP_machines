;;;-*- Mode:LISP; Package:COMPILER; Base:8. -*- 
;;; Compiler definitions
;;; These definitions are either for the compile driver or are independent of the actual
;;; compiler.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; Declarations stuff

;LOCAL-DECLARATIONS (on SYSTEM) is a list of local declarations.
;Each local declaration is a list starting with an atom which says
;what type of declaration it is.  The meaning of the rest of the
;list depends on the type of declaration.
;The compiler is interested only in SPECIAL and UNSPECIAL declarations,
;for which the rest of the list contains the symbols being declared,
;and MACRO declarations, which look like (DEF symbol MACRO LAMBDA args ..body...),
;and ARGLIST declarations, which specify arglists to go in the debugging info
;(to override the actual arglist of the function, for user information)
;which look like (ARGLIST FOO &OPTIONAL BAR ...), etc.

;Things get onto LOCAL-DECLARATIONS in two ways:
;1) inside a LOCAL-DECLARE, the specified declarations are bound onto the front.
;2) if UNDO-DECLARATIONS-FLAG is T, some kinds of declarations
;   in a file being compiled into a QFASL file
;   are consed onto the front, and not popped off until LOCAL-DECLARATIONS
;   is unbound at the end of the whole file.
(DEFVAR-RESETTABLE LOCAL-DECLARATIONS NIL)
(DEFVAR-RESETTABLE UNDO-DECLARATIONS-FLAG NIL)

;FILE-LOCAL-DECLARATIONS is for global declarations valid for the entire compilation.
;Since it can get pretty big, it is a hash table (or NIL).
;The thing being declared is the key, and the value is an alist of alists whose
;elements are (declaration (file value) (file value) ...)
;where the newest file is at the front.
(DEFVAR-RESETTABLE FILE-LOCAL-DECLARATIONS NIL)

;;;; Compiler warnings stuff

;; This is where the actual history resides.
;; It is a list of File Warnings.
(DEFVAR COMPILER-WARNINGS-HISTORY NIL)

;; This is bound to the current File Warning during compilation.
;; It is a cons of the Generic Pathname and a list of Function Warnings.
;; If the warnings are not associated with a file, the Generic Pathname is NIL.
;; There is only one File Warning for each pathname.
(DEFVAR FILE-WARNINGS-HISTORY)
(DEFVAR FILE-WARNINGS-HISTORY-TAIL)

;; The last Function Warning.
(DEFVAR LAST-FUNCTION-WARNING NIL)

;; This is bound to the current function being compiled.
(DEFVAR-RESETTABLE DEFAULT-WARNING-FUNCTION NIL)
(DEFVAR-RESETTABLE DEFAULT-WARNING-DEFINITION-TYPE 'DEFUN)

;; During compilation, real time compiler warnings key off of these two variables.
;; This used to be LAST-ERROR-FUNCTION
(DEFVAR LAST-WARNING-FUNCTION)
(DEFVAR LAST-WARNING-DEFINITION-TYPE)

;; This gets bound to T when compiling a file, as opposed to a function from it.
;; This is so the warnings history doesn't have to be walked for each function.
(DEFVAR COMPILING-WHOLE-FILE-P NIL)

(DEFUN COMPILING-WHOLE-FILE-P (STREAM)
  (OR (TYPEP STREAM 'SI:FILE-STREAM-MIXIN)
      (FUNCALL STREAM ':SEND-IF-HANDLES ':WHOLE-FILE-P)))

;; This is a list of all file warnings touched in this context.
;; Mainly for the benefit of MAKE-SYSTEM batch mode.
;; It is bound to create a context.
(DEFVAR CONTEXT-FILE-WARNINGS)

;; This increments every time the compiler warnings database is changed
;; in some way.  ZWEI uses this to know when to decache the compiler warnings
;; buffer.
(DEFVAR COMPILER-WARNINGS-TICK 0)

;; This increments every time a warning is added to the compiler warnings
;; database.  Programs can use this to determine whether any compiler warnings
;; occured during a certain context.
(DEFVAR NEW-COMPILER-WARNINGS-TICK 0)

;; The user can set this variable to T to stop compiler warnings from
;; being printed.
(DEFVAR SUPPRESS-COMPILER-WARNINGS NIL)

;; This variable is examined whenever you are compiling to core and there are 
;; compiler warnings.  If the function already exists in core (that is, if you
;; are D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")re0defining the function), then this variable is examined to determine the
;; action to take.  Legal values are
;;   :DEFINE		Define the function in core despite the warnings.
;;   :DO-NOT-DEFINE	Do not define the function in core if there are warnings.
;;   :QUERY		Asks the luser what to do.
;;   :WARN		Warns the luser that the redefinition is occuring.
(DEFVAR *COMPILER-WARNINGS-TO-CORE-ACTION* :DEFINE)

;; Compiler warnings declarations.

(DEFVAR-RESETTABLE COMPILER-WARNINGS-CONTEXT NIL)

(DEFMACRO COMPILER-WARNINGS-CONTEXT-BIND (&BODY BODY)
  `(COMPILER-BIND-CONTEXT-INTERNAL #'(LAMBDA () ,@BODY) (NOT COMPILER-WARNINGS-CONTEXT) T))

(DEFMACRO COMPILER-WARNINGS-CONTEXT-BIND-MAYBE (&BODY BODY)
  `(COMPILER-BIND-CONTEXT-INTERNAL #'(LAMBDA () ,@BODY) (NOT COMPILER-WARNINGS-CONTEXT) NIL))

;; this does some spare binding, and could be trimmed.
(DEFMACRO COMPILER-CONTEXT-BIND ((&KEY (CONDITION T)
				       (INHERIT-EXISTING-ENVIRONMENT NIL)) &BODY BODY)
  `(COMPILER-BIND-CONTEXT-INTERNAL
     #'(LAMBDA () ,@BODY)
     (AND ,CONDITION
	  (OR (NOT ,INHERIT-EXISTING-ENVIRONMENT)
	      (NOT COMPILER-WARNINGS-CONTEXT)))
     NIL))

;FUNCTIONS-DEFINED is a hash table of all functions defined
;or NIL if none have been defined yet.
(DEFVAR FUNCTIONS-DEFINED)

;FUNCTIONS-REFERENCED is a hash table of functions referenced but not defined.
;Each entry is an alist of (<generic-pathname> . <by-whom>).
;This is so that warnings can be put into the appropriate file when this is
;processed at the end of a compilation.
(DEFVAR FUNCTIONS-REFERENCED)

;EXTERNAL-FUNCTIONS-ARGS-INFO is a hash table; the keys are function specs, and
;each value is a cons of an args-info fixnum and a lambda-list.
;There's one entry for each external function defined within this compilation context.
;This is used to check delayed "wrong number of arguments" warnings.
(DEFVAR EXTERNAL-FUNCTIONS-ARGS-INFO)

;;;; User options to the compiler

(DEFVAR RETAIN-VARIABLE-NAMES-SWITCH 'ARGS)	;What variable names to save for debugging
(DEFVAR OPEN-CODE-MAP-SWITCH T)			;Turn MAPC, etc. into DO
(DEFVAR RUN-IN-MACLISP-SWITCH NIL)		;Barf at functions only on Lisp machine
(DEFVAR OBSOLETE-FUNCTION-WARNING-SWITCH T)	;Barf at functions which have better versions
(DEFVAR ALL-SPECIAL-SWITCH NIL)			;Make all variables special

;SPECIAL-PKG-LIST is a list of packages all of whose symbols should be special.
(DEFVAR SPECIAL-PKG-LIST (LIST (PKG-FIND-PACKAGE "FONTS")))

;This, if T, causes a check to be made for the use of a local variable
;as a function to be called, meaning funcall.  This should be set to T
;only for compiling old-fashioned Maclisp code.
(DEFVAR ALLOW-VARIABLES-IN-FUNCTION-POSITION-SWITCH)

;This, if T, prevents warnings about a lot of stylistic losses.
(DEFVAR-RESETTABLE INHIBIT-STYLE-WARNINGS-SWITCH NIL)

;This, if T, prints a ditty everytime the compiler starts compiling a function.
(DEFVAR COMPILER-VERBOSE NIL)

;This, if T, prevents warnings about calls to functions with the wrong number of arguments.
;It was initially motivated by the inlining of calls of the form (CL:REDUCE #'FOO BAR).  The
;inlining produces no argument calls to FOO (see the definition of CL:REDUCE) which we do not
;wish to warn the user about at compile time.  -- DySak 5/08/89
(DEFVAR-RESETTABLE INHIBIT-WRONG-NUMBER-OF-ARGUMENTS-WARNING-SWITCH NIL)

;;;; Random other variables

(DEFVAR QC-FILE-OLD-DEFAULT-CONS-AREA)
(DEFVAR-RESETTABLE QC-FILE-IN-PROGRESS NIL)
(DEFVAR-RESETTABLE QC-FILE-LOAD-FLAG NIL)

(DEFVAR-RESETTABLE QC-FILE-READ-IN-PROGRESS NIL)

;;; This is the function called for each form in the file.
;;; The keywords it should understand are:
;;; :FOR-FILE
;;; :TO-CORE-P
;;; :CONS-AREA
;;; :INITIALIZE
;;; :DUMP-DEFINITION
;;; :DUMP-LAMBDA-EXPRESSION
;;; :DUMP-FORM
;;; :COMPILER-TYPE
;;; :EVAL-FORM
(DEFVAR *COMPILE-FUNCTION*)

(DEFVAR *READ-THEN-PROCESS-FLAG* NIL)

;;; This is the function called on each form after it has been analyzed.
;;; It is called with three arguments, the form itself, and two flags saying
;;; whether the form is to be "eval"'ed at compile-time and at load-time.
(DEFVAR-RESETTABLE *COMPILE-FORM-FUNCTION* 'COMPILE-FORM-FUNCTION)

(DEFVAR-STANDARD FUTURE-COMMON-LISP:*COMPILE-FILE-PATHNAME* NIL)
(DEFVAR-STANDARD FUTURE-COMMON-LISP:*COMPILE-FILE-TRUENAME* NIL)
