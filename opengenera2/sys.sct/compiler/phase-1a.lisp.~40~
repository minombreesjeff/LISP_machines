;;; -*- Mode: LISP; Syntax: Zetalisp; Package: COMPILER; Lowercase: Yes; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defgeneric update-split-map (instruction split optimistic))

(defmethod (update-split-map byte-lap-instruction) (map optimistic)
  (declare (ignore optimistic))
  (unless (null (interval-current-words map))
    (multiple-value-bind (delta max)
	(stack-effects self)
      (cond ((null delta)
	     (setf (interval-current-words map) nil))
	    (t
	     (when (null max) (setf max (max 0 delta)))
	     (scl:maxf (interval-max-words map) (+ (interval-current-words map) max))
	     (incf (interval-current-words map) delta))))))

(defmethod (update-split-map interval-instruction :before) (map optimistic)
  (let ((level (interval-current-words map)))
    (unless (null level)
      (letf (((interval-current-words map) level))
	(let ((update-in (if (typep self 'split-interval-instruction) self map)))
	  (flet ((update (inst) (update-split-map inst update-in optimistic)))
	    (map-over-interval (first interval-intervals) #'update)
	    (dolist (interval (cl:rest interval-intervals))
	      (setf (interval-current-words map) nil)
	      (map-over-interval interval #'update))))))))

(defmethod (update-split-map split-interval-instruction :before) (map optimistic)
  (declare (ignore optimistic))
  (unless (null (interval-current-words map))
    (setf interval-parent map)
    (setf interval-offset (interval-current-words map))
    (push self (interval-children map))))

(defmethod (update-split-map jump-instruction :before) (map optimistic)
  (declare (ignore optimistic))
  (unless (null (interval-current-words map))
    (setf (gethash jump-tag (interval-tag-table map))
	  (- (interval-current-words map) jump-pops-if-successful))))

(defmethod (update-split-map start-catch-instruction :before) (map optimistic)
  (declare (ignore optimistic))
  (unless (null (interval-current-words map))
    (setf (gethash (catch-internal-tag start-catch-pframe) (interval-tag-table map))
	  (1- (interval-current-words map)))))

(defmethod (update-split-map start-unwind-protect-instruction :before) (map optimistic)
  (declare (ignore optimistic))
  (unless (null (interval-current-words map))
    (setf (gethash start-unwind-protect-handler (interval-tag-table map))
	  (interval-current-words map))))

(defmethod (update-split-map block-read-test-instruction :before) (map optimistic)
  (declare (ignore optimistic))
  (unless (null (interval-current-words map))
    (setf (gethash block-read-test-tag (interval-tag-table map))
	  (interval-current-words map))))

(defmethod (update-split-map internal-tag :before) (map optimistic)
  (declare (ignore optimistic))
  (when (null (interval-current-words map))
    (setf (interval-current-words map) (gethash self (interval-tag-table map)))))

(defmethod (update-split-map go-tag :before) (map optimistic)
  (declare (ignore optimistic))
  (when (null (interval-current-words map))
    (setf (interval-current-words map) (gethash tag-pframe (interval-tag-table map)))))

(defmethod (update-split-map tagbody-interval-instruction :before) (map optimistic)
  (unless (null (interval-current-words map))
    (unless (and optimistic
		 (not (nlg-non-local-reference-p tagbody-pframe)))
      (incf (interval-current-words map) (+ 2 5)))
    (scl:maxf (interval-max-words map) (interval-current-words map))
    (setf (gethash tagbody-pframe (interval-tag-table map)) (interval-current-words map))))

(defmethod (update-split-map tagbody-interval-instruction :after) (map optimistic)
  (unless (null (interval-current-words map))
    (unless (and optimistic
		 (not (nlg-non-local-reference-p tagbody-pframe)))
      (decf (interval-current-words map) (+ 2 5)))))

(defmethod (update-split-map block-interval-instruction :before) (map optimistic)
  (unless (null (interval-current-words map))
    (unless (and optimistic
		 (not (nlg-non-local-reference-p block-pframe)))
      (incf (interval-current-words map) (+ 1 5)))
    (scl:maxf (interval-max-words map) (interval-current-words map))))

(defmethod (update-split-map block-interval-instruction :after) (map optimistic)
  (unless (null (interval-current-words map))
    (unless (and optimistic
		 (not (nlg-non-local-reference-p block-pframe)))
      (decf (interval-current-words map) (+ 1 5)))))

(defmethod (update-split-map fun-instruction :after) (map optimistic)
  (declare (ignore optimistic))
  (when (and (eq (function-type fun-function) 'internal)
	     (eq (function-parent-function fun-function) *function*)
	     (function-use-stack-closure-p fun-function))
    (incf (interval-closure-words map) 2)))

;;;

(defconst *multiple-group-effect* 17)

(defun destination-effect (destination)
  (if (destination-for-return destination)
      nil
      (or (destination-n-values destination)
	  *multiple-group-effect*)))

(defgeneric stack-effects (instruction)
  (declare (values delta-words max-words)))

(defmethod (stack-effects byte-lap-instruction :default) () 0)

(defmethod (stack-effects var-instruction) () 1)
(defmethod (stack-effects fun-instruction) () 1)
(defmethod (stack-effects const-instruction) () 1)

(defmethod (stack-effects pop-instruction) ()
  (if (eq pop-n 'multiple)
      (- *multiple-group-effect*)
      (- pop-n)))

(defmethod (stack-effects copy-instruction) () 1)

(defmethod (stack-effects start-call-instruction) ()
  (let ((spec (function-spec start-call-function)))
    (if (and (not (call-force-external start-call-call))
	     (or (get-kludged-built-in *compiler* spec)
		 (and (memq (function-type start-call-function) '(external reference))
		      (symbolp spec)
		      (or (get-assemble-function *compiler* spec)
			  (get-built-in *compiler* spec (call-n-args start-call-call))))))
	0
	3)))

(defmethod (stack-effects call-instruction) ()
  (let ((words (destination-effect call-destination)))
    (and words
	 (- words call-n-args
	    (if call-start-call (stack-effects (first call-start-call)) 0)))))

(defmethod (stack-effects jump-instruction) ()
  (and (not (eq jump-condition 'always))
       (- jump-pops-if-not-successful)))

(defmethod (stack-effects return-instruction) () nil)
(defmethod (stack-effects var-location-instruction) () 1)

(defmethod (stack-effects bind-instruction) ()
  (+ (if bind-variable -1 -2)
     (bindings-in-control-stack *compiler*)))

(defmethod (stack-effects start-catch-instruction) ()
  (1- (catch-pframe-size start-catch-pframe)))

(defmethod (stack-effects start-unwind-protect-instruction) ()
  (catch-pframe-size start-unwind-protect-pframe))

(defmethod (stack-effects end-catch-instruction) ()
  (- (destination-effect end-catch-destination) (catch-pframe-size end-catch-pframe)))

(defmethod (stack-effects take-args-instruction) ()
  (take-args-stack-effects *compiler* self))

(defgeneric take-args-stack-effects (compiler take-args-inst))

(defmethod (stack-effects take-arg-instruction) () 1)
(defmethod (stack-effects take-keyword-argument-instruction) () 1)

(defmethod (stack-effects take-values-instruction) ()
  (- take-values-destination *multiple-group-effect*))

(defmethod (stack-effects relative-push-address-instruction) () 1)
(defmethod (stack-effects throw-instruction) () nil)
(defmethod (stack-effects popj-instruction) () nil)

(defmethod (stack-effects fast-aref-instruction) () 0)

(defmethod (stack-effects fast-aset-instruction) () -2)

(defmethod (stack-effects setup-array-instruction) () 3)
(defmethod (stack-effects push-pc-instruction) () 1)
(defmethod (stack-effects push-pc-array-instruction) () 1)

(defmethod (stack-effects pop-vars-instruction) ()
  (- (loop for var in pop-vars-list count (eq (variable-type var) 'lexical))))

(defmethod (stack-effects start-dbs-instruction) () 1)
(defmethod (stack-effects end-dbs-instruction) () -1)
(defmethod (stack-effects start-prog-instruction) () 1)
(defmethod (stack-effects end-prog-instruction) () -1)

(defmethod (stack-effects kludge-stack-instruction) ()
  (if (not kludge-stack-binding-p)
      kludge-stack-amount
      0))

(defmethod (stack-effects flavor-mapping-table-instruction) () 1)

(defmethod (stack-effects interval-instruction) ()
  (destination-effect interval-destination))

(defmethod (stack-effects go-instruction) () nil)
(defmethod (stack-effects computed-go-interval-instruction) () nil)

(defmethod (stack-effects block-interval-instruction) ()
  (destination-effect (block-destination block-pframe)))

(defmethod (stack-effects return-from-interval-instruction) () nil)



;;; This function does any function splitting that is needed to make stack frames fit.
(defun adjust-stack-frame-sizes (function-list)
  (if *enable-frame-splitting*
      (let ((functions nil))			;will be list of post-split functions
	(dolist (function function-list)
	  ;; Walk the byte-lap tree and collect frame use information.
	  (let ((root (make-split-interval-instruction :interval-parent nil))
		(limit (- (max-frame-size *compiler*) 5 *local-block-size-adjustment*))
		(*internal-function-uid* 1000)
		(default-warning-function (function-pr function))
		(optimistic t)
		(these-functions)
		(these-intervals))
	    (when (< limit 0.)
	      (error "The compiler was unable to break this function into several smaller ~@
                      functions that it was able to compile.  You may be able to get it to ~@
                      compile by rearranging or rewriting it."))
	    (flet ((compute-split-map ()
		     (let ((*function* function))
		       (map-over-interval (function-interval function)
					  #'(lambda (inst)
					      (update-split-map inst root optimistic))))))
	      (compute-split-map)
	      (block one-function
		(cl:loop
		   (let ((deepest-child root)
			 (deepest-offset (+ (interval-closure-words root)
					    (interval-max-words root))))
		     (labels ((find-deepest (parent offset)
				(dolist (child (interval-children parent))
				  (let* ((child-offset (+ offset
							  (interval-offset child)
							  (interval-closure-words child)))
					 (child-max (+ child-offset (interval-max-words child))))
				    (when (> child-max deepest-offset)
				      (setf deepest-offset child-max)
				      (setf deepest-child child))
				    (find-deepest child child-offset)))))
		       (find-deepest root (interval-closure-words root)))
		     ;;(format t "~&Deepest depth = ~D." deepest-offset)
		     (when (or (<= deepest-offset limit)
			       (eq deepest-child root))
		       (return-from one-function))
		     (cond (optimistic
			    (setf optimistic nil)
			    (compute-split-map))
			   (t		       
			    (loop for child-size first (+ (interval-max-words deepest-child)
							  (interval-closure-words deepest-child))
						 then parent-size
				  for child first deepest-child then parent
				  for parent = (interval-parent child)
				  for parent-size = (+ child-size
						       (interval-offset child)
						       (interval-closure-words parent))
				  do
			      (when (and (> parent-size limit)
					 (> child-size 5))
				(multiple-value-bind (nfunction interval)
				    (split-off-function function child)
				  (when (function-use-stack-closure-p nfunction)
				    (incf (interval-closure-words parent) 2))
				  (push nfunction these-functions)
				  (push interval these-intervals))
				(return))
			      (when (eq parent root)
				(return-from one-function)))))))))
	    (mapc #'change-interval-containing-function these-intervals these-functions)
	    (setq functions (nconc these-functions functions))
	    (push function functions)))
	(nreverse functions))
      function-list))


(defun split-off-function (function child)
  (when (eq *enable-frame-splitting* :warn)
    (warn "The stack frame of ~S was split because it was larger than the maximum stack frame size." (function-pr function)))
  (let* ((parent-control-stack-state (inst-pre-control-stack-state child))
	 (control-stack-state (make-control-stack-state
				(control-stack-state-unknown-group-count
				  parent-control-stack-state)
				parent-control-stack-state
				(control-stack-state-n-catch-blocks
				  parent-control-stack-state)
				(control-stack-state-n-bindings
				  parent-control-stack-state)))
	 (interval
	   (collect-interval
	     (let ((*control-stack-state* control-stack-state))
	       (emit-take-args 0 0 nil nil)
	       (emit-name nil nil nil)
	       (emit-allocate-local-block))
	     (let ((intervals (interval-intervals child)))
	       (emit-interval (first intervals))
	       (let ((ds (destination-size (interval-destination child))))
		 (unless (eq ds 'return)
		   (emit-return ds)))
	       (mapc #'emit-interval (cl:rest intervals)))))
	 (nfunction
	   (make-internal-function
	     :function-label (sys:gensymbol "SPLIT")
	     :function-parent-function function
	     :function-args-info 0 :function-lambda-list nil
	     :function-argument-block-size 0
	     :function-lexical-contour (interval-lexical-contour child)
	     :function-user-declares
	     (si:canonicalize-storage-category-debugging-info
	       nil
	       (multiple-value-bind (category disable-reference-validation)
		   (si:decode-storage-category-debugging-info
		     (function-user-declares function))
		 (and (not disable-reference-validation)
		      category)))
	     :function-interval interval
	     :function-control-stack-state control-stack-state
	     :function-has-mapped-slot-access (function-has-mapped-slot-access function))))
    (map-over-interval interval
		       #'(lambda (inst)
			   (when (eql (inst-pre-control-stack-state inst)
				      parent-control-stack-state)
			     (setf (inst-pre-control-stack-state inst)
				   control-stack-state))
			   (when (eql (inst-post-control-stack-state inst)
				      parent-control-stack-state)
			     (setf (inst-post-control-stack-state inst)
				   control-stack-state))))
    (split-off-from-parent control-stack-state)
    (let ((next (inst-next child)))
       (when next
	  (setf (inst-post-control-stack-state (inst-prev child))
		(inst-pre-control-stack-state next))))
    (loop for f first function then (function-parent-function f)
	  until (eq (function-type f) 'external)
	  finally (setf (function-internal-function-offsets f)
			(nconc (function-internal-function-offsets f) (ncons nfunction))))
    (setf (interval-intervals child)
	  (list
	    (collect-interval
	      ;; The I-compiler is gratuitously incompatible here.
	      ;; In it, calling FUNCALL is magic.
	      (emit-call-split-off-function *compiler* nfunction (interval-destination child)))))
    (setf (interval-max-words child) 1)
    (setf (interval-children child) nil)
    (values nfunction interval)))

;;;

(defun change-interval-containing-function (interval function)
  (map-over-interval interval
		     #'(lambda (inst)
			 (change-containing-function inst function))))

(defgeneric change-containing-function (instruction function))

(defmethod (change-containing-function byte-lap-instruction :default) (ignore) nil)

;;;

(defmethod (change-containing-function interval-instruction) (function)
  (dolist (interval interval-intervals)
    (change-interval-containing-function interval function)))

(defmethod (change-containing-function take-args-instruction) (function)
  (dolist (interval take-args-init-intervals)
    (change-interval-containing-function interval function)))

(defmethod (change-containing-function take-keyword-argument-instruction) (function)
  (change-interval-containing-function take-keyword-argument-interval function))

;;;

(defun change-defining-function (var function)
  (let ((old-function (lexical-function var)))
    (when (not (eq function old-function))
      (setf (function-lexical-variables old-function)
	    (delq var (function-lexical-variables old-function)))
      (push var (function-lexical-variables function))
      (setf (lexical-function var) function)
      (let ((info (lexical-mapping-table-info var)))
	(when info
	  (change-referencing-function
	    (mapped-access-information-self-mapping-table-variable info)
	    function))))))

(defun change-referencing-function (variable function)
  (cl:case (variable-type variable)
    ((lexical)
     (flet ((note-ref (variable)
	      (setf (lexical-captive-p variable) t)
	      (loop for f first function then (function-parent-function f)
		    until (or (eq f (lexical-function variable))
			      (memq f (lexical-referencing-functions variable)))
		    do
		(when (not (function-refers-lexically-p f))
		  (setf (function-refers-lexically-p f) t)
		  (setf (function-use-stack-closure-p f) t))
		(push* variable (function-free-lexical-variables f))
		(push f (lexical-referencing-functions variable)))))
       (note-ref variable)
       (let ((info (lexical-mapping-table-info variable)))
	 (when info
	   (note-ref (mapped-access-information-self-mapping-table-variable info))))       
       (when (eq (lexical-class variable) 'function-cell)
	 (let ((called-function (function-cell-function variable)))
	   (when (not (eq function (function-parent-function called-function)))
	     (cl:pushnew called-function (function-lexical-functions-called function)))))))
    ((instance)
     (when (not (function-mapping-table-p function))
       (change-referencing-function (find-lexical-variable-named function 'self) function)
       (change-referencing-function (find-lexical-variable-named function 'self-mapping-table)
				    function)		
       (setf (function-mapping-table-p function) t)))))

(defmethod (change-containing-function var-instruction) (function)
  (change-referencing-function var-variable function))

(defmethod (change-containing-function setq-instruction) (function)
  (change-referencing-function setq-variable function))

(defmethod (change-containing-function var-location-instruction) (function)
  (change-referencing-function var-location-variable function))

(defmethod (change-containing-function fast-aref-instruction) (function)
  (change-referencing-function fast-aref-variable function))

(defmethod (change-containing-function fast-aset-instruction) (function)
  (change-referencing-function fast-aset-variable function))

(defmethod (change-containing-function name-instruction) (function)
  (dolist (var name-variables)
    (when (eq (variable-type var) 'lexical)
      (change-defining-function var function))))

;;;

(defmethod (change-containing-function fun-instruction) (function)
  (when (eq (function-type fun-function) 'internal)
    (setf (function-parent-function fun-function) function)
    (when (and (function-refers-lexically-p fun-function)
	       (not (function-refers-lexically-p function)))
      (setf (function-refers-lexically-p function) t)
      (setf (function-use-stack-closure-p function) t))
    (dolist (var (function-free-lexical-variables fun-function))
      (change-referencing-function var function))))

;;;

(defmethod (change-containing-function tagbody-interval-instruction :before) (function)
  (setf (nlg-function tagbody-pframe) function)
  (change-defining-function (nlg-catch-var tagbody-pframe) function))

(defmethod (change-containing-function go-instruction) (function)
  (let ((target (nlg-transfer-target go-pframe)))
    (when (and (not (eq function (nlg-function target)))
	       (not (nlg-transfer-non-local go-pframe)))
      (setf (nlg-transfer-non-local go-pframe) t)
      (setf (nlg-non-local-reference-p target) t)
      (setf (tag-non-local-target-p go-tag) t))
    (when (nlg-transfer-non-local go-pframe)
      (change-referencing-function (nlg-catch-var target) function))))

(defmethod (change-containing-function computed-go-interval-instruction :before) (function)
  (let ((target (nlg-transfer-target computed-go-pframe)))
    (when (and (not (eq function (nlg-function target)))
	       (not (nlg-transfer-non-local computed-go-pframe)))
      (setf (nlg-transfer-non-local computed-go-pframe) t)
      (setf (nlg-non-local-reference-p target) t)
      (dolist (tag computed-go-tags)
	(setf (tag-non-local-target-p tag) t)))
    (when (nlg-transfer-non-local computed-go-pframe)
      (change-referencing-function (nlg-catch-var target) function))))

(defmethod (change-containing-function block-interval-instruction :before) (function)
  (setf (nlg-function block-pframe) function)
  (change-defining-function (nlg-catch-var block-pframe) function))

(defmethod (change-containing-function return-from-interval-instruction :before) (function)
  (let ((target (nlg-transfer-target return-from-pframe)))
    (when (and (not (eq function (nlg-function target)))
	       (not (nlg-transfer-non-local return-from-pframe)))
      (setf (nlg-transfer-non-local return-from-pframe) t)
      (setf (nlg-non-local-reference-p target) t))
    (when (nlg-transfer-non-local return-from-pframe)
      (change-referencing-function (nlg-catch-var target) function))))



(defun resolve-non-local-jumps (function)
  (let ((*function-extra-intervals* nil)
	(interval (function-interval function)))
    (substitute-over-interval interval #'resolve-non-local-jump-instruction)
    (cl:apply #'nconc-intervals interval *function-extra-intervals*)))

(defgeneric resolve-non-local-jump-instruction (instruction))

(defmethod (resolve-non-local-jump-instruction byte-lap-instruction :default) ()
  (emit self))

(defmethod (resolve-non-local-jump-instruction take-args-instruction :before) ()
  (dolist (interval take-args-init-intervals)
    (substitute-over-interval interval #'resolve-non-local-jump-instruction)))

(defmethod (resolve-non-local-jump-instruction take-keyword-argument-instruction :before) ()
  (substitute-over-interval take-keyword-argument-interval
			    #'resolve-non-local-jump-instruction))

(defmethod (resolve-non-local-jump-instruction interval-instruction) ()
  (dolist (interval interval-intervals)
    (substitute-over-interval interval #'resolve-non-local-jump-instruction))
  (let ((inst *last-inst*))
    (emit-interval (pop interval-intervals))
    (setf (inst-next self) (inst-next inst)))
  (when interval-intervals
    (setf *function-extra-intervals* (append interval-intervals *function-extra-intervals*))))

(defwhopper (resolve-non-local-jump-instruction tagbody-interval-instruction) ()
  (cond ((not (nlg-non-local-reference-p tagbody-pframe))
	 (emit-start-prog tagbody-pframe)
	 (continue-whopper)
	 (unless (destination-for-return interval-destination)
	   (emit-end-prog tagbody-pframe)))
	(t
	 (let ((first-tag (first tagbody-tags)))
	   ;; Non-local GO's.  Lots of work to do.
	   (note-catch-block inst-pre-control-stack-state)
	   (setf (tag-non-local-target-p first-tag) t)
	   ;; Make the tags we'll need.
	   (let ((return-tag (make-tag))
		 (simple (= 1 (loop for tag in tagbody-tags
				    count (tag-non-local-target-p tag))))
		 (catch-var (nlg-catch-var tagbody-pframe)))
	     (setf (catch-internal-tag tagbody-pframe) return-tag)
	     ;; Create a local variable which will contain the catch tag
	     ;; and bind it to the appropriate value.
	     (emit-const nil)
	     (emit-name (list catch-var) (nlg-looping tagbody-pframe) (cdr interval-lexical-contour))
	     ;; Prepare to enter the TAGBODY through the first tag.
	     (cond (simple
		    (emit-tag return-tag)
		    ;; Build the catch block.
		    (setf (catch-or-unwind tagbody-pframe) 'catch)
		    (emit-var-location catch-var)
		    (emit-start-catch tagbody-pframe *destination-ignore*)
		    ;; Dispatch to PC computed above.
		    (emit-start-prog tagbody-pframe)
		    ;; The body of the TAGBODY.
		    (setf (tag-non-local-target-p first-tag) nil)
		    (continue-whopper)
		    ;; Compile the code that happens if we drop off the end.
		    (unless (destination-for-return interval-destination)
		      (emit-end-prog tagbody-pframe)
		      (emit-end-catch tagbody-pframe interval-destination)
		      (emit-pop-vars (list catch-var) interval-destination)))
		   (t
		    (let ((restart-tag (make-tag)))
		      (emit-push-pc first-tag)
		      (emit-tag restart-tag)
		      ;; Build the catch block.
		      (setf (catch-or-unwind tagbody-pframe) 'catch)
		      (emit-var-location catch-var)
		      (emit-setq catch-var)
		      (emit-start-catch tagbody-pframe *destination-stack*)
		      ;; Dispatch to PC computed above.
		      (emit-start-prog tagbody-pframe)
		      (emit-copy (catch-pframe-size tagbody-pframe))
		      (emit-popj 0)
		      ;; The body of the TAGBODY.
		      (continue-whopper)
		      ;; Compile the code that happens if we drop off the end.
		      (unless (destination-for-return interval-destination)
			(emit-end-prog tagbody-pframe)
			(emit-end-catch tagbody-pframe interval-destination)
			(emit-pop 1)
			(emit-pop-vars (list catch-var) interval-destination))
		      (push (collect-interval
			      (emit-tag return-tag)
			      (emit-pop 1 1)
			      (emit-jump 'always restart-tag))
			    *function-extra-intervals*)))))))))

(definst-method (resolve-non-local-jump-instruction go) ()
  (let ((pframe (tag-pframe go-tag)))
    (cond ((not (nlg-transfer-non-local go-pframe))
	   (let ((*pframe* go-pframe))
	     (emit-unwind *destination-ignore* pframe nil))
	   (emit-jump 'always go-tag))
	  (t
	   ;; Call the helper function.
	   (setf (nlg-transfer-start-call go-pframe)
		 (call-start-call
		   (emit-call-sequence *compiler*
				       (external-function 'si:%non-local-go)
				       #'(lambda ()
					   (emit-var-location (nlg-catch-var pframe))
					   (emit-const (tag-name go-tag))
					   (emit-push-pc go-tag))
				       3 *destination-return*)))))))


(defwhopper (resolve-non-local-jump-instruction computed-go-interval-instruction) ()
  (cond ((not (nlg-transfer-non-local computed-go-pframe))
	 (continue-whopper)
	 (let ((*pframe* computed-go-pframe))
	   (emit-unwind *destination-stack* (nlg-transfer-target computed-go-pframe) nil))
	 (emit-popj 0))
	(t
	 ;; Call the helper function.
	 (setf (nlg-transfer-start-call computed-go-pframe)
	       (call-start-call
		 (emit-call-sequence
		   *compiler* (external-function 'si:%non-local-go)
		   #'(lambda ()
		       (emit-var-location (nlg-catch-var (nlg-transfer-target computed-go-pframe)))
		       (emit-const nil)
		       (continue-whopper))
		   3 *destination-return*))))))

;;;

(defwhopper (resolve-non-local-jump-instruction block-interval-instruction) ()
  (let ((continuing (not (destination-for-return interval-destination))))
    (cond ((not (nlg-non-local-reference-p block-pframe))
	   (emit-start-prog block-pframe)
	   (continue-whopper)
	   (when continuing
	     (emit-end-prog block-pframe)
	     (emit-tag (block-local-return-tag block-pframe))))
	  (t
	   ;; Hard case.
	   ;; Create a local variable which will contain the catch tag
	   ;; and bind it to the appropriate value.
	   (note-catch-block inst-pre-control-stack-state)
	   (emit-const (block-name block-pframe))
	   (emit-name (list (nlg-catch-var block-pframe)) (nlg-looping block-pframe) (cdr interval-lexical-contour))
	   ;; Built the catch block.
	   (setf (catch-or-unwind block-pframe) 'catch)
	   (emit-var-location (nlg-catch-var block-pframe))
	   (cond ((not (member (destination-n-values interval-destination) '(nil 0 1)))
		  (emit-start-catch block-pframe *destination-multiple*)
		  ;; Put out the body.
		  (emit-start-prog block-pframe)
		  (continue-whopper)
		  ;; Clean up.
		  (emit-end-prog block-pframe)
		  (reconcile-destinations interval-destination *destination-multiple*)
		  (emit-end-catch block-pframe *destination-multiple*)
		  (emit-tag (catch-internal-tag block-pframe))
		  (reconcile-destinations *destination-multiple* interval-destination)
		  (emit-tag (block-local-return-tag block-pframe))
		  (emit-pop-vars (list (nlg-catch-var block-pframe)) interval-destination))
		 (continuing
		  (emit-start-catch block-pframe interval-destination)
		  ;; Put out the body.
		  (emit-start-prog block-pframe)
		  (continue-whopper)
		  ;; Clean up.
		  (emit-end-prog block-pframe)
		  (emit-end-catch block-pframe interval-destination)
		  (emit-tag (block-local-return-tag block-pframe))
		  (emit-tag (catch-internal-tag block-pframe))
		  (emit-pop-vars (list (nlg-catch-var block-pframe)) interval-destination))
		 (t
		  (emit-start-catch block-pframe interval-destination)
		  ;; Put out the body.
		  (emit-start-prog block-pframe)
		  (continue-whopper)))))))

(defwhopper (resolve-non-local-jump-instruction return-from-interval-instruction) ()
  (let ((target (nlg-transfer-target return-from-pframe)))
    (cond ((not (nlg-transfer-non-local return-from-pframe))
	   (continue-whopper)
	   (cond ((destination-for-return (block-destination target))
		  (when (loop for pframe first return-from-pframe then (pframe-parent pframe)
			      until (eq pframe target)
			      thereis (eq (pframe-type pframe) 'open-call))
		    ;; There are some open calls which we'll have to clean up, so
		    ;; get the values from the body and then unwind the open calls.
		    (let ((*pframe* return-from-pframe))
		      (compiler:emit-unwind *destination-multiple* target t)))
		  (reconcile-destinations interval-destination (block-destination target)))
		 (t
		  (let ((*pframe* return-from-pframe))
		    (compiler:emit-unwind interval-destination target t))
		  (compiler:emit-jump 'always (block-local-return-tag target)))))
	  (t
	   (let ((catch-var (nlg-catch-var target)))
	     (cond ((null (destination-n-values interval-destination))
		    (emit-fun (external-function 'si:%return-from-lambda))
		    (flavor::feature-case
		      (3600)
		      (:imach
			(setf (nlg-transfer-start-call return-from-pframe)
			      (emit-start-call (external-function '%funcall-n) *destination-return*))))
		    (emit-var-location catch-var)
		    (emit-var catch-var)
		    (continue-whopper)
		    (emit-const 2)
		    (emit-call (external-function '+-internal) 2 *destination-stack* t)
		    (emit-call (external-function '%funcall-n) 1 *destination-return* nil 
			       (nlg-transfer-start-call return-from-pframe)))
		   (t
		    (setf (nlg-transfer-start-call return-from-pframe)
			  (call-start-call
			    (emit-call-sequence *compiler*
						(external-function 'si:%return-from-lambda)
						#'(lambda ()
						    (emit-var-location catch-var)
						    (emit-var catch-var)
						    (continue-whopper))
						(+ 2 (destination-size interval-destination))
						*destination-return*))))))))))



(defun remove-superseded-variables ()
  (dolist (*function* (reverse *function-list*))	;look at the functions outside-in
    (let ((interval (function-interval *function*)))
      ;; if we could walk over the code from "outside" in, we could do this
      ;; in one pass, but byte-lap order may be different
      (loop while (phase-2-set-supersedes-interval interval))
      (phase-2-prelude-interval interval))))

;;;

(defun phase-2-set-supersedes-interval (interval)
  (let ((changed nil))
    (loop for inst first (interval-first interval) then (inst-next inst)
	  while inst
	  doing
      (when (phase-2-set-supersedes inst)
	(setq changed t)))
    changed))

;; this returns T if a new superseding variable was created
(defgeneric phase-2-set-supersedes (inst))

(defmethod (phase-2-set-supersedes byte-lap-instruction) ()
  nil)

(defmethod (phase-2-set-supersedes take-args-instruction) ()
  (let ((changed nil))
    (dolist (interval take-args-init-intervals)
      (when (phase-2-set-supersedes-interval interval)
	(setf changed t)))
    changed))

(defmethod (phase-2-set-supersedes take-keyword-argument-instruction) ()
  (phase-2-set-supersedes-interval take-keyword-argument-interval))

(defmethod (phase-2-set-supersedes var-instruction) ()
  (when (eq (variable-type var-variable) 'lexical)
    (let ((supersedes (lexical-superseding-variable var-variable)))
      (when supersedes
	(setq var-variable supersedes))))
  (when (and (eq (inst-opcode inst-next) 'name)
	     (eq (variable-type var-variable) 'lexical)
	     (not (lexical-modified-p var-variable))
	     (not (lexical-kludge-p var-variable)))
    (let* ((name-variables (name-variables inst-next))
	   (name-variable (pop name-variables)))
      (when (and name-variable
		 (lexical-variable-inlinable name-variable)
		 (null name-variables)
		 (eq (variable-type name-variable) 'lexical)
		 (not (lexical-modified-p name-variable))
		 (not (lexical-kludge-p name-variable)))
	;; Take this var and flush it
	(setf (lexical-superseding-variable name-variable) var-variable)
	(let ((var-mt-info (lexical-mapping-table-info var-variable))
	      (name-mt-info (lexical-mapping-table-info name-variable)))
	  (when (and (null var-mt-info)
		     name-mt-info)
	    (setf (lexical-mapping-table-info var-variable) name-mt-info)))
	(flet ((adjust-fcn (f)
		 (unless (eq f (lexical-function name-variable))
		   (setf (function-free-lexical-variables f)
			 (cl:remove name-variable (function-free-lexical-variables f))))
		 (flet ((note-ref (var)
			  (unless (eq f (lexical-function var))
			    (setf (lexical-captive-p var) t)
			    (setf (function-refers-lexically-p f) t)
			    (push* var (function-free-lexical-variables f))
			    (push* f (lexical-referencing-functions var)))))
		   (note-ref var-variable)
		   (let ((info (lexical-mapping-table-info var-variable)))
		     (when info
		       (note-ref (mapped-access-information-self-mapping-table-variable info)))))))
	  (adjust-fcn (lexical-function name-variable))
	  (mapc #'adjust-fcn (lexical-referencing-functions name-variable)))
	(labels ((adam (css)
		   (let ((parent (control-stack-state-parent css)))
		     (if parent
			 (adam parent)
			 css))))
	  (when (eq (adam (lexical-control-stack-state name-variable))
		    (adam (lexical-control-stack-state var-variable)))
	    ;; From the same function, so merge the referencing states
	    (dolist (css (lexical-referencing-control-stack-states name-variable))
	      (push* css (lexical-referencing-control-stack-states var-variable)))))
	(change-instance-flavor self 'no-op-instruction)
	(change-instance-flavor inst-next 'no-op-instruction)
	t))))

;;;

(defun phase-2-prelude-interval (interval)
  (map-over-interval interval #'phase-2-prelude))

(defgeneric phase-2-prelude (inst))

(defmethod (phase-2-prelude byte-lap-instruction) ()
  nil)

(defmethod (phase-2-prelude take-args-instruction) ()
  (mapc #'phase-2-prelude-interval take-args-init-intervals))

(defmethod (phase-2-prelude take-keyword-argument-instruction) ()
  (phase-2-prelude-interval take-keyword-argument-interval))

(defmethod (phase-2-prelude var-instruction)
	   ()
  (when (eq (variable-type var-variable) 'lexical)
    (let ((supersedes (lexical-superseding-variable var-variable)))
      (when supersedes
	(setq var-variable supersedes)))))

(defmethod (phase-2-prelude fast-aref-instruction)
	   ()
  (let ((supersedes (lexical-superseding-variable fast-aref-variable)))
    (when supersedes
      (setq fast-aref-variable supersedes))))

(defmethod (phase-2-prelude fast-aset-instruction)
	   ()
  (let ((supersedes (lexical-superseding-variable fast-aset-variable)))
    (when supersedes
      (setq fast-aset-variable supersedes))))

(defmethod (phase-2-prelude pop-vars-instruction)
	   ()
  (when (cl:some #'(lambda (var)
		     (and (eq (variable-type var) 'lexical)
			  (lexical-superseding-variable var)))
		 pop-vars-list)
    (setq pop-vars-list
	  (loop for var in pop-vars-list
		unless (and (eq (variable-type var) 'lexical)
			    (lexical-superseding-variable var))
		  collect var))))
