;;; -*- Mode: Lisp; Package: COMPILER; Lowercase: T; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;
;;; This file defines the base flavors for compiler objects and their protocols.
;;;
;;; The function of a compiler object is fairly simple: it must translate some
;;; program source into an appropriate object representation, and put that representation
;;; somewhere.
;;;
;;; A compiler object is made up of several components, which may be inter-related:
;;; - The Language Parser, which differentiates between various dialects of Lisp
;;; - The Target Architecture on which the object representation should run
;;; - The Compilation Environment
;;; - The Intermediate-Representation Optimizer
;;; - The Compilation Target, which actually disposes of the object representation
;;;    (e.g. load it into virtual memory, or store it in a file)
;;;
;;; A Language Parser is responsible for all of the steps required to translate
;;; the source into an intermediate representation, including all source-to-source
;;; and source-to-pseudo-source transformations.  [By pseudo-source we mean constructs
;;; which are similar in syntax to those of the source language, but which may not be
;;; understood correctly by an interpreter of the source language - "compiler-only forms",
;;; to put it another way.]  The Language Parser may make use of the Target Architecture,
;;; and will certainly make use of the Compilation Environment.
;;;
;;; The task of the Target Architecture is to translate the program from its intermediate
;;; representation into an object representation that corresponds to the Instruction-Set
;;; Architecture of the machine on which the target is to be run.  [Note that a "machine"
;;; can be a software emulation as well as a physical computer.]  As previously stated, the
;;; Target Architecture may also be used by the Language Parser in the source-to-intermediate
;;; translation step.  The Target Architecture may also interact with the
;;; Intermediate-Representation Optimizer, as described below.
;;;
;;; The Compilation Environment contains an evaluator and definitions that are needed at
;;; compile-time.  Its main function is to support macroexpansion and compile-time
;;; error-checking.
;;;
;;; The Intermediate-Representation Optimizer does just what its name implies.  It bases its
;;; decisions on advise from the user (e.g. the CL OPTIMIZE declaration). It may interact
;;; with the Target Architecture when the optimization is more easily implemented or disabled
;;; at this level, rather than during the intermediate-to-object translation.
;;; 
;;; The Compilation Target's reponsibility is to put the object representation somewhere.
;;; This could either be the local Lisp virtual memory, a remote Lisp, either running on
;;; another piece of hardware or in a software emulation, or a file of some kind.
;;;

;;; Compiler objects
(defflavor basic-compiler
	()
	()
  (:abstract-flavor)
  (:required-flavors basic-language basic-architecture basic-compiler-target))

(defgeneric get-bindings (compiler)
  (:documentation "Returns bindings appropriate for this compiler")
  (declare (values vars values)))

(defgeneric get-default-binary-file-type (compiler)
  (:documentation "Returns the appropriate binary file type for this compiler.")
  (declare (values bin-file-type)))

(defgeneric get-read-package (compiler package)
  (:documentation "Returns the appropriate read-time package for this compiler.")
  (declare (values real-package)))

;;; This covers syntactic and semantic analysis.
(defflavor basic-language () () (:abstract-flavor) (:required-methods parse-form))

(defgeneric parse-form (language-parser form)
  (:documentation
    "This function parses form and all of its subforms into an intermediate language
representation.")
  (declare (values il-interval)))

(defgeneric determine-argument-residence (architecture function)
  (:documentation
    "Does any additional processing necessary to determine argument residence"))

;;; This covers architecture-dependencies, in the front-end and the back-end
(defflavor basic-architecture
	()
	()
  (:abstract-flavor)
  (:required-methods get-read-package get-bindings
		     get-phase-1-handler get-phase-1-hook get-transformers get-optimizers
		     phase-1-function-call function-plist-indicator
		     generate-object-representation
		     get-assemble-function get-built-in get-kludged-built-in
		     cement-args-and-destination emit-binding-stack-level
		     cement-macro-instruction
		     cement-throw cement-unwind cement-take-args
		     emit-%make-lexical-environment
		     built-in-address-operand-p format-fits-arg emit-call-sequence))

(defgeneric get-phase-1-handler (architecture symbol)
  (:documentation
    "Returns the special-form handler for SYMBOL that is appropriate for
the current architecture, if one exists.")
  (declare (values handler)))

(defgeneric get-phase-1-hook (architecture symbol)
  (:documentation
    "Returns the phase-1-hook function for SYMBOL that is appropriate for
the current architecture, if one exists.")
  (declare (values phase-1-hook)))

(defgeneric get-transformers (architecture symbol)
  (:documentation
    "Returns the transformers for SYMBOL that are appropriate for
the current architecture, if any exist.")
  (declare (values transformers)))

;;; >>> We might want to require that all optimizers be machine independent. <<<
(defgeneric get-optimizers (architecture symbol)
  (:documentation
    "Returns the optimizers for SYMBOL that are appropriate for
the current architecture, if any exist.")
  (declare (values optimizers)))

(defgeneric phase-1-function-call
	    (architecture function-name subforms destination class info lambda-list)
  (declare (values)))

(defgeneric phase-1-lambda-combination (architecture name var-list val-list body destination)
  )

(defgeneric emit-supplied-p (architecture argument argument-number)
  )

(defgeneric note-argument-lexical-internal (architecture lexical-variable)
  (:documentation "Records that its argument is lexical"))

(defgeneric general-take-args
	    (architecture argument-list)
  (declare (values))
  (:documentation "Generates code for the general take-args case"))

(defgeneric call-defun-in-flavor (architecture function form)
  (:documentation "Returns a transformed form for a call to a defun-in-flavor")
  (declare (values new-form)))

(defgeneric function-plist-indicator (architecture)
  (:documentation
    "Returns something that can be used as a plist indicator for a property
whose value is the result of a compilation.")
  (declare (values indicator)))

(defgeneric generate-object-representation (architecture function-list fixup-p)
  (:documentation
    "Generate a canonical object representation from the intermediate representations
in FUNCTION-LIST.")
  (declare (values object-representation)))

(defgeneric get-assemble-function (architecture spec)
  (:documentation
    "Returns the assemble-function function for SPEC that is appropriate for
the current architecture, if one exists.")
  (declare (values function)))

(defgeneric get-built-in (architecture spec n-args)
  (:documentation
    "Returns the built-in structure for the macro instruction that implements
call to SPEC with N-ARGS on the current architecture, if one exists.  If N-ARGS is 
NIL, return all possible built-ins.")
  (declare (values built-in-structure)))

(defgeneric get-kludged-built-in (architecture spec)
  (:documentation
    "Returns the symbol which is the name of the machine instruction that implements SPEC
on the current architecture, if one exists.  This is different from normal built-in's, and
is used mainly for instructions that take their arguments in a different order than the 
SPEC function.")
  (declare (values instruction-name-symbol)))

(defgeneric get-modification-function (architecture &rest spec)
  (:documentation
    "For internal use by Phase-3; controls optimization into arg-modifying instructions")
  (declare (values modification-function)))

(defgeneric max-frame-size (architecture)
  (:documentation
    "The maximum control stack frame size"))

(defgeneric get-data-type-number (architecture type-name)
  (:documentation "The data type number associated with a name"))  

(defgeneric cement-args-and-destination (architecture inst n-args destination)
  (:documentation
    "Called in Phase-2 by various CEMENT methods to set the stack level for things like
CALL instructions.  Should be called only for effect.")
  (declare (values)))

(defgeneric cement-take-args (architecture instruction)
  (:documentation
    "Cement the take-args byte-lap"))

(defgeneric emit-binding-stack-level (architecture)
  (:documentation
    "Emits the necessary intermediate language constructs required to push the current
binding stack level.")
  (declare (values)))

(defgeneric cement-macro-instruction (architecture intermediate-instruction)
  (:documentation "Does the necessary stack cementing for INTERMEDIATE-INSTRUCTION.")
  (declare (values)))

(defgeneric catch-pframe-size-internal (architecture pframe)
  (:documentation "The size of a catch pframe"))

(defun catch-pframe-size (pframe)
  (catch-pframe-size-internal *compiler* pframe))

(defgeneric cement-throw (architecture intermediate-instruction)
  (:documentation "Does the necessary stack cementing for INTERMEDIATE-INSTRUCTION.")
  (declare (values)))

(defgeneric cement-unwind (architecture intermediate-instruction)
  (:documentation "Does the necessary stack cementing for INTERMEDIATE-INSTRUCTION.  
This will include generating any other necessary intermedediate code to undo various
things like catch blocks and multiple-value-groups.")
  (declare (values)))

(defgeneric emit-%make-lexical-environment (architecture ncells)
  (:documentation "Emits the necessary byte-lap for a call to SI:%MAKE-LEXICAL-ENVIRONMENT
with the argument NCELLS.  [This only exists because the calling sequence is 
machine-dependent.")
  (declare (values)))

(defgeneric built-in-address-operand-p (architecture built-in)
  (:documentation "Returns T if the instruction corresponding to BUILT-IN is of the
type that takes an address operand.")
  (declare (values address-operand-p)))

(defgeneric format-fits-arg (architecture format arg)
  (:documentation "Returns T if ARG can fit into FORMAT.")
  (declare (values fits-p)))

(defgeneric emit-call-sequence (architecture function arg-pushing-continuation n-args
					     destination &optional inline-p)
  (:documentation "Emit the necessary byte-lap to call FUNCTION to DESTINATION with
the N-ARGS arguments pushed by funcalling ARG-PUSHING-CONTINUATION.  This generic
function exists to allow support for architectures with different calling sequences.")
  (declare (values) (sys:downward-funarg arg-pushing-continuation)))

(defgeneric emit-start-call-if-needed (architecture function destination n-args)
  (:documentation "Emit a start-call instruction if one is needed")
  (declare (values start-call-or-nil)))

(defgeneric global-fdefinedp (architecture fspec)
  (:documentation "FDEFINEDP relative to the global environment of this compiler"))

(defgeneric jump-pops-valid-p (architecture successful-pops not-successful-pops)
  (:documentation "Returns NIL if the architecture can not support a jump with these kinds of
pops"))

(defgeneric back-end-requires-pop-vars (architecture)
  (:documentation "returns T if phase-2 is expected to generate pop-vars instructions"))

(defgeneric emit-setq-sequence
	    (architecture variable value-form value-source-locator destination)
  (:documentation "Emit the necessary byte-lap to set VARIABLE to VALUE and return
VALUE to DESTINATION.  By default this just emits PUSH SETQ POP, but Ivory uses
this to emit better code using RPLACD."))

(defgeneric get-peep-hole-optimizers (architecture opcode)
  (:documentation
    "Returns the machine-specific optimizers for opcode that are appropriate for
the current architecture, if any exist.")
  (declare (values optimizers)))

(defgeneric bindings-in-control-stack (architecture)
  (:documentation
    "Returns the number of control stack slots used by a dynamic binding.")
  (declare (values n-slots)))

(defgeneric cement-copy-&rest-argument (architecture var)
  (:documentation "Emit the necessary byte-lap to copy the &REST argument to the heap."))

;;; This deals with the disposal of the compiled object - either load into virtual
;;; memory, or dump to file
(defflavor basic-compiler-target
	()
	()
  (:abstract-flavor)
  (:required-methods define function-plist-indicator))

(defgeneric define (target fspec definition)
  (declare (values)))

(defflavor local-compiler-target-mixin () (basic-compiler-target) (:abstract-flavor))
  
(defmethod (define local-compiler-target-mixin) (fspec definition)
  (fdefine fspec definition t))

(defmethod (form-for-define local-compiler-target-mixin) (fspec definition)
  `(fdefine ',fspec ',definition t))

(defmethod (get-function-compiled-code-object local-compiler-target-mixin) (function)	
  (cca-compiled-code-object (function-cca function)))

(defflavor remote-compiler-target-mixin () (basic-compiler-target) (:abstract-flavor))

(defmethod (define remote-compiler-target-mixin) (fspec definition)
  (setf (si:function-spec-get fspec (function-plist-indicator self)) definition))

;;; Each remote compiler must supply a FORM-FOR-DEFINE method of its own.
;;; Only a particular remote compiler knows how to do it right.
;;; The form varies depending on whether the compiler output is to be
;;; loaded into a local, remote, or emulated environment.

(defmethod (get-function-compiled-code-object remote-compiler-target-mixin) (function)	
  (function-cca function))

(defgeneric eval-form (compiler form &optional environment))

(defmethod (eval-form basic-compiler-target) (form &optional environment)
  (eval form environment))

(defmethod (emit-setq-sequence basic-compiler-target)
	   (variable value-form value-source-locator destination)
  (phase-1 value-form *destination-stack* value-source-locator)
  (emit-setq variable)
  (pop-into-destination destination))

;;; This special will contain the fully instantiated compiler object to be used
;;; during the current compilation.
(defvar *compiler*)

;;; This special will contain a compiler that uses the local processor's architecture,
;;; the local Lisp as the environment, and the local Lisp as the target.
(defvar *local-compiler*)
