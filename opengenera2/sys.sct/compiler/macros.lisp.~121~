;;; -*- Base: 8; Mode: Lisp; Package: COMPILER; Lowercase: T -*-
;;; This file is >llc>macros.
;;; This file contains macros that are part of the L Machine lisp compiler.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmacro push* (item ref)
  `(cl:pushnew ,item ,ref))

(defmacro defpf ((symbol indicator) value)
  `(deff (:property ,symbol ,indicator) ,value))

(defmacro with-lexical-contour (&body body)
  `(let ((*unknown-variable-names* *unknown-variable-names*)
	 (local-declarations local-declarations))
     (letf-if *dbs-pframe*
	      (((dbs-specials-bound *dbs-pframe*) (dbs-specials-bound *dbs-pframe*)))
       (let ((env *interpreter-lexical-environment*))
	 (si:with-interpreter-environment
	   (*interpreter-lexical-environment*
	     *interpreter-lexical-environment*
	     (pop env) (pop env) (pop env) (pop env) (pop env))
	   ,@body)))))

(defmacro collect-interval (&body body)
  `(collect-more-interval ((make-empty-interval))
     . ,body))

(defmacro collect-more-interval ((interval-form) &body body)
  (let ((answer-var (gensym)))
    `(let* ((,answer-var ,interval-form)
	    (*last-inst* (interval-last ,answer-var)))
       (progn . ,body)
       (setf (interval-last ,answer-var) *last-inst*)
       ,answer-var)))

(defmacro emitting-one-value-if-necessary ((destination) &body body)
  `(emitting-one-value-if-necessary-1 #'(lambda () ,@body) ,destination))

;;;; The matchp macro.

;;; (matchp <form>
;;;   (<pattern1> . <consequents1>)
;;;   (<pattern2> . <consequents2>)
;;;   (* . <consequents3>))
;;; evaluates <form> and matches it against successive patterns.  If one
;;; succeeds, the consequents are evaluated.  Elements of patterns can be:
;;;  Quoted list structure (or NIL) : the <form> must have EQUAL list
;;;             structure in that position.
;;;  Symbols: this symbol gets bound to the corresponding portion of
;;;             <form> during the evaluation of the consequents.
;;;  A cons: recurse.
;;;  (*or* <var> <item> <item> ...): if the <form> is EQUAL to any of the
;;;             <item>s, then the match succeeds and <var> is bound to <form>.
;;;  (*eval* <var> <lisp-form>): if the <lisp-form> evalutes T, then the
;;;             match succeeds and <var> is bound to <form>.  <lisp-form>
;;;             can use <var> too.

(eval-when (compile load eval)
(defvar *matchp-binds*)
)

(defmacro matchp (object &body clauses)
  (let ((object-var (gensym)))
    `(let ((,object-var ,object))
       (cond . ,(loop for x in clauses
		      collect (create-matchp-clause (car x)
						    object-var
						    (cdr x)))))))

(eval-when (compile load eval)
(defun create-matchp-clause (pattern form consequents)
  (let ((*matchp-binds* nil))
    (let ((test (create-matchp-test pattern form)))
      (list test
	    (if *matchp-binds*
		`(let ,*matchp-binds* . ,consequents)
		`(progn . ,consequents))))))
)

(eval-when (compile load eval)
(defun create-matchp-test (pattern form)
  (cond ((eq pattern '*)
	 t)
	((null pattern)
	 `(null ,form))
	((symbolp pattern)
	 (push (list pattern form) *matchp-binds*)
	 t)
	((atom pattern)
	 (ferror "Non-atomic symbol in pattern: ~S" pattern))
	((eq (car pattern) 'quote)
	 `(equal ,form ',(cadr pattern)))
	((eq (car pattern) '*or*)
	 (push (list (cadr pattern) form) *matchp-binds*)
	 `(member ,form ',(cddr pattern)))
	((eq (car pattern) '*eval*)
	 (push (list (cadr pattern) form) *matchp-binds*)
	 `(let ((,(cadr pattern) ,form))
	    ,(caddr pattern)))
	(t (let ((code1 (create-matchp-test (car pattern) `(car ,form)))
		 (code2 (create-matchp-test (cdr pattern) `(cdr ,form))))
	     (if (eq code1 t)
		 (if (eq code2 t)
		     `(not (atom ,form))
		     `(and (not (atom ,form)) ,code2))
		 (if (eq code2 t)
		     `(and (not (atom ,form)) ,code1)
		     `(and (not (atom ,form)) ,code1 ,code2)))))))
)

;;;; The elements and  non-terminal-elements loop paths.

#-for-cross-compiler
(progn 'compile
(define-loop-path elements elements-path
  (of using) nil)

(define-loop-path non-terminal-elements elements-path
  (of using) t)

(defun elements-path (path-name variable data-type
		      prep-phrases inclusive-p
		      allowed-prepositions data)
  allowed-prepositions data-type ;unused
  (let (of-form
	using-form
	(of-form-given nil))
    (loop for (preposition expression) in prep-phrases
	  do (selector preposition si:loop-tequal
	       (('of)
		(setq of-form expression
		      of-form-given t))
	       (('using)
		(setq using-form expression))
	       (otherwise
		(ferror nil "The preposition ~S is not supported by the ~S path"
			preposition path-name))))
    (if (not of-form-given)
	(ferror nil "The preposition /"of/" was missing in a use of the ~S path"
		path-name))
    (if (null using-form)
	(setq using-form (gensym)))
    (if (not (symbolp using-form))
	(ferror nil "The /"using/" parameter, ~S, was not a symbol in the ~S path"
		using-form path-name))
    (if inclusive-p
	(ferror nil "Inclusive stepping is not supported by the ~S path"
		path-name))
    (list (list (list variable nil)			; Bindings.
		(list using-form of-form))
	  nil						; Prologue.
	  (if (first data)				; Pre-step end-test.
	      `(null (cdr ,using-form))			;  non-terminal-elements
	      `(null ,using-form))
	  nil						; Steps.
	  nil						; Post-step endtests.
	  (list variable `(car ,using-form)		; Pseudo-steps.
		using-form `(cdr ,using-form))
	  )))
)

;;;; deftransformer and defoptimizer

(defprop deftransformer "Transformer" si:definition-type-name)
(defprop defoptimizer   "Optimizer"   si:definition-type-name)

;;;--- these need function-spec-finders!

(defmacro deftransformer ((victim name . into) arg-list &body body)
  `(progn (record-source-file-name ',victim 'deftransformer)
	  (defun ,name ,arg-list
		 (declare (sys:function-parent ,victim deftransformer))
	    ,@body)
	  (add-transformer ',victim ',name . ,(mapcar #'(lambda (x) `',x) into))
	  ',name))

(defmacro defoptimizer ((victim name . into) arg-list &body body)
  `(progn (record-source-file-name ',victim 'defoptimizer)
	  (defun ,name ,arg-list
		 (declare (sys:function-parent ,victim defoptimizer))
	    ,@body)
	  (add-optimizer-internal ',victim ',name ',into)
	  ',name))

;(ADD-OPTIMIZER BAR FOO) puts FOO on BAR's optimizers list if it isn't there already.
;(ADD-OPTIMIZER BAR FOO BAR-1 BAR-2...) also remembers that BAR can be optimized
; into BAR-1, BAR-2, etc. for the benefit of functions like WHO-CALLS.
(defmacro add-optimizer (target-function optimizer-name &rest optimized-into)
  `(add-optimizer-internal ',target-function ',optimizer-name ',optimized-into))

;For patching
(defmacro delete-optimizer (target-function optimizer-name &rest optimized-into)
  `(delete-optimizer-internal ',target-function ',optimizer-name ',optimized-into))

(defmacro delete-transformer (target-function transformer-name &rest optimized-into)
  `(delete-transformer-internal ',target-function ',transformer-name ',optimized-into))

;;;
;;;	At one point in time, optimizers were never run on top level forms.  Then it was
;;; decided to run optimizers on top level forms.  Optimizers were then required to return
;;; forms which were interpretable.  Use the following to define, add, or delete optimizers
;;; which return forms which are not interpretable. -- DySak 5/15/89 15:10:08
;;;
(defmacro define-compile-only-optimizer ((victim name . into) arg-list &body body)
  `(progn (record-source-file-name ',victim 'define-compile-only-optimizer)
	  (defun ,name ,arg-list
		 (declare (sys:function-parent ,victim define-compile-only-optimizer))
	    ,@body)
	  (add-compile-only-optimizer-internal ',victim ',name ',into)
	  ',name))

;;;
;;;	(ADD-COMPILE-ONLY-OPTIMIZER BAR FOO) puts FOO on BAR's optimizers list if it isn't
;;; there already.  (ADD-OPTIMIZER BAR FOO BAR-1 BAR-2...) also remembers that BAR can be
;;; optimized into BAR-1, BAR-2, etc. for the benefit of functions like WHO-CALLS.
;;;
(defmacro add-compile-only-optimizer (target-function optimizer-name &rest optimized-into)
  `(add-compile-only-optimizer-internal ',target-function ',optimizer-name ',optimized-into))

;For patching
(defmacro delete-compile-only-optimizer (target-function optimizer-name &rest optimized-into)
  `(delete-compile-only-optimizer-internal
     ',target-function ',optimizer-name ',optimized-into))

(defmacro future-common-lisp:define-compiler-macro (name lambda-list &body body)
  (si:defmacro-1 'compiler-macro 'sys:macro name lambda-list body))

(defmacro compiler-macro (name lambda-list &body body)
  (let* ((spec `(compiler-macro ,name))
	 (function `#'(lambda ,lambda-list
			(declare (sys:function-name ,spec)
				 (sys:function-parent ,name define-compiler-macro))
			,@body)))
    `(progn
       (eval-when (compile)
	 ;; Put macro definition where it belongs (don't really define it if compiling)
	 (compiler:file-declare ',name 'compiler-macro ,function))
       (fdefine ',spec ,function t)
       ',name)))

;;; The following is used to declare make the compiler print a warning about the use
;;; of an obsolete facility. The defprops and code for obsoleting messages, flavors,
;;; and structures are located in the files where those facilities are defined. Use
;;; of make-obsolete looks like:
;;;   (make-obsolete foo "because")              ;first two are equivalent
;;;   (make-obsolete foo "because" defun)       ;first two are equivalent
;;;   (make-obsolete foo "because" defmessage)
;;;   (make-obsolete foo "because" defflavor)
;;;   (make-obsolete foo "because" defstruct)

(defmacro make-obsolete (spec reason &optional (type 'defun))
  `(make-obsolete-1 ',spec ,reason ',type))

;;; For defining optimized comparison operators.
(defmacro define-comparison-operation (function expander
				       &key (arglist '(number &rest more-numbers))
					    (required-type 'number))
  (declare (zwei:indentation 1 1))
  `(progn
     (defun ,function (number &rest more-numbers)
       (declare lt:(side-effects simple reducible))
       (declare (arglist ,@arglist))
       (declare (return-type scl:boolean))
       (if more-numbers
	   (loop for number1 first number then number2
		 for number2 in more-numbers
		 always ,(funcall expander 'number1 'number2))
	 ;; CLtL specifies all comparisons with only one operand are true,
	 ;; but we should still check that it's a number (or whatever)
	 (cl:check-type number ,required-type)
	 t))
     (defun (:property ,function comparison-expander) (number1 number2)
       (,expander number1 number2))
     (add-transformer ',function 'transform-comparison)))

(defmacro define-not-equal-operation (function expander
				      &key (arglist '(number &rest more-numbers))
					   (required-type 'number))
  (declare (zwei:indentation 1 1))
  `(progn
     (defun ,function (number &rest more-numbers)
       (declare lt:(side-effects simple reducible))
       (declare (arglist ,@arglist))
       (declare (return-type scl:boolean))
       (if more-numbers
	   (loop for number1 = number then (first rest)
		 and for rest on more-numbers
		 always (loop for number2 in rest
			      always ,(funcall expander 'number1 'number2)))
	 ;; CLtL specifies all comparisons with only one operand are true,
	 ;; but we should still check that it's a number (or whatever)
	 (cl:check-type number ,required-type)
	 t))
     (defun (:property ,function comparison-not-equal-expander) (number1 number2)
       (,expander number1 number2))
     (add-transformer ',function 'transform-not-equal-comparison)))

;;; For defining optimized comparison operators.
(defmacro define-character-comparison-operation (function expander)
  (declare (zwei:indentation 1 1))
  `(progn
     (defun ,function (character &rest more-characters)
       (declare lt:(side-effects simple reducible))
       (declare (return-type scl:boolean))
       (if more-characters
	   (loop for char1 first character then char2
		 for char2 in more-characters
		 always ,(funcall expander 'char1 'char2))
	   ;; CLtL specifies all comparisons with only one operand are true,
	   ;; but we should still check that it's a character
	   (cl:check-type character character)
	   t))
     (defun (:property ,function comparison-expander) (char1 char2)
       (,expander char1 char2))
     (add-optimizer-internal ',function 'optimize-character-comparison nil)))

(defmacro define-character-not-equal-operation (function expander)
  (declare (zwei:indentation 1 1))
  `(progn
     (defun ,function (character &rest more-characters)
       (declare lt:(side-effects simple reducible))
       (declare (return-type scl:boolean))
       (if more-characters
	   (loop for char1 = character then (first rest)
		 and for rest on more-characters
		 always (loop for char2 in rest
			      always ,(funcall expander 'char1 'char2)))
	 ;; CLtL specifies all comparisons with only one operand are true,
	 ;; but we should still check that it's a number (or whatever)
	   (cl:check-type character character)
	   t))
     (defun (:property ,function comparison-not-equal-expander) (char1 char2)
       (,expander char1 char2))
     (add-optimizer-internal ',function 'optimize-character-not-equal-comparison nil)))

(defprop define-synonym-function "Synonym function" si:definition-type-name)

(defmacro define-synonym-function (name function)
  `(progn (record-source-file-name ',name 'define-synonym-function)
	  (deff ,name ',function)
	  (add-optimizer ,name synonym-function ,function)
	  (setf (get ',name 'synonym-function) ',function)))


;;; To avoid consing
(defmacro filter-list-to-stack ((var list fcn) . body)
  ;; The length of the stack-list is abritrary - maybe it should a parameter
  `(with-stack-list* (,var nil nil nil nil nil nil nil nil nil nil nil)
     (loop for .e. in ,list
	   with .result-cons.
	   with .i. = 0
	   when (funcall ,fcn .e.)
	     do
	       (cond ((zerop .i.) (setq .result-cons. ,var))
		     ((< .i. (length ,var))
		      (setq .result-cons. (cdr .result-cons.)))
		     (( .i. (length ,var))
		      (setq .result-cons. (cdr (rplacd .result-cons. (cons nil nil))))))
	       (rplaca .result-cons. .e.)
	       (incf .i.))
     ,@body))

(defmacro def-peep-hole ((victim name) &body body)
  `(progn (record-source-file-name ',victim 'def-peep-hole)
	  (definst-method (,name ,victim) ()
	    (declare (sys:function-parent ,victim def-peep-hole))
	    ,@body)
	  (add-peep-hole-internal ',victim ',name)
	  ',name))

(defmacro add-peep-hole (target-function peep-hole-name)
  `(add-peep-hole-internal ',target-function ',peep-hole-name))

;For patching
(defmacro delete-peep-hole (target-function peep-hole-name)
  `(delete-peep-hole-internal ',target-function ',peep-hole-name))
