;;; -*- Mode: Lisp; Package: Compiler; Base: 8 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; This module of the compiler handles all compiler warnings.
;; All warnings are updated in a database which can be later examined
;; when debugging those warnings.

;;; Database
;;; This is optimized for the case of compiling files, which is supposedly
;;; the most important.

(DEFUN GET-FILE-WARNINGS (&OPTIONAL (PATHNAME FDEFINE-FILE-PATHNAME) ALWAYS &AUX FW)
  (WHEN (TYPEP PATHNAME 'FS:PATHNAME)
    (SETQ PATHNAME (FUNCALL PATHNAME ':TRANSLATED-PATHNAME)))
  (SETQ FW (ASSQ PATHNAME COMPILER-WARNINGS-HISTORY))
  ;; COMPILER-WARNINGS-HISTORY prepends, making newest print first.
  (AND ALWAYS (NOT FW)
       (PUSH (SETQ FW (NCONS PATHNAME)) COMPILER-WARNINGS-HISTORY))
  ;; CONTEXT-FILE-WARNINGS appends, making warnings come out in compilation order,
  ;; for COMPILE-SYSTEM and friends
  (WHEN (AND FW
	     COMPILER-WARNINGS-CONTEXT
	     (NOT (MEMQ FW CONTEXT-FILE-WARNINGS)))
    (SETQ CONTEXT-FILE-WARNINGS
	  (NCONC CONTEXT-FILE-WARNINGS (NCONS FW))))
  FW)

;; This is called when a file is to be compiled.
(DEFUN RESET-FILE-WARNINGS (PATHNAME)
  (AND PATHNAME (SETQ PATHNAME (FUNCALL PATHNAME ':TRANSLATED-PATHNAME)))
  (PROG (L W)
	(SETQ L (LOCF COMPILER-WARNINGS-HISTORY)
	      W COMPILER-WARNINGS-HISTORY)
    TOP (COND ((NULL W)
	       (RETURN NIL))
	      ((EQ (CAAR W) PATHNAME)
	       (RPLACD L (CDR W))
	       (INCF COMPILER-WARNINGS-TICK)
	       (RETURN NIL)))
	(SETQ L (CDR L) W (CDR W))
	(GO TOP)))

;; This is called when a function is to be compiled.
;; It removes all warnings for that function and its internals.
;; Returns the tail pointer for use later.
(DEFUN RESET-FUNCTION-WARNINGS (FSPEC DEFINITION-TYPE)
  (PROG (L W)
	(SETQ L FILE-WARNINGS-HISTORY
	      W (CDR L))
    TOP (OR W (RETURN L))
	(COND ((OR (AND (EQUAL (CAAR W) FSPEC)
			(EQ (CADAR W) DEFINITION-TYPE))
		   (AND (LISTP (CAAR W))
			(EQ (CAAAR W) ':INTERNAL)
			(EQUAL (CADAAR W) FSPEC)))
	       (SETQ W (CDR W))
	       (RPLACD L W)
	       (INCF COMPILER-WARNINGS-TICK)
	       (GO TOP)))
	(SETQ W (CDR W)
	      L (CDR L))
	(GO TOP)))

(DEFUN ADD-WARNING-FOR-FUNCTION (FSPEC DEFINITION-TYPE WARNING)
  (INCF COMPILER-WARNINGS-TICK)
  (INCF NEW-COMPILER-WARNINGS-TICK)
  (RPLACD (LAST (GET-FUNCTION-WARNING FSPEC DEFINITION-TYPE))
	  (NCONS WARNING))
  WARNING)

(DEFUN GET-FUNCTION-WARNING (FSPEC DEFINITION-TYPE &AUX L W)
  (COND ((AND LAST-FUNCTION-WARNING
	      (EQUAL (CAR LAST-FUNCTION-WARNING) FSPEC)
	      (EQ (CADR LAST-FUNCTION-WARNING) DEFINITION-TYPE))
	 LAST-FUNCTION-WARNING)
	((AND COMPILING-WHOLE-FILE-P
	      (OR (AND FILE-WARNINGS-HISTORY-TAIL
		       (EQUAL (CAAR FILE-WARNINGS-HISTORY-TAIL) FSPEC)
		       (EQ (CADAR FILE-WARNINGS-HISTORY-TAIL) DEFINITION-TYPE))
		  (PROGN (OR FILE-WARNINGS-HISTORY-TAIL
			     (SETQ FILE-WARNINGS-HISTORY-TAIL
				   (LAST FILE-WARNINGS-HISTORY)))
			 (SETQ FILE-WARNINGS-HISTORY-TAIL
			       (CDR (RPLACD FILE-WARNINGS-HISTORY-TAIL
					    (NCONS (LIST* FSPEC DEFINITION-TYPE NIL))))))))
	 (SETQ LAST-FUNCTION-WARNING (CAR FILE-WARNINGS-HISTORY-TAIL)))
	(T (PROG ()
		 (SETQ L FILE-WARNINGS-HISTORY
		       W (CDR L))
	    L    (OR W (GO END))
		 (COND ((AND (EQUAL (CAAR W) FSPEC)
			     (EQ (CADAR W) DEFINITION-TYPE))
			(RETURN (SETQ LAST-FUNCTION-WARNING (CAR W)))))
		 (SETQ W (CDR W)
		       L (CDR L))
		 (GO L)
	    END  (RPLACD L (NCONS (LIST* FSPEC DEFINITION-TYPE NIL)))
		 (RETURN (SETQ LAST-FUNCTION-WARNING (CADR L)))))))

(DEFUN ADD-WARNING (WARNING)
  (ADD-WARNING-FOR-FUNCTION (SEND WARNING :FUNCTION) (SEND WARNING :DEFINITION-TYPE) WARNING))

(DEFUN WARNING-SOURCE-LOCATOR (&OPTIONAL (LOCATOR NIL LOCATOR-P))
  (WHEN *USE-SOURCE-LOCATORS*
    (UNLESS LOCATOR-P (SETF LOCATOR *SOURCE-LOCATOR*))
    (WHEN (AND LOCATOR (EQ *USE-SOURCE-LOCATORS* :LISP-LIST))
      (SETQ LOCATOR (FIND-FORM-IN-CORRESPONDENCES
		      (CAR LOCATOR) *READ-CORRESPONDENCES* LOCATOR)))
    LOCATOR))

;;;; This is the user interface to warnings.

;; Options are:
;;  :FUNCTION -- The value is the "function spec" to which this is applied.
;;	Note that the word "function spec" is used loosely here; it could be
;;	the name of a flavor, variable, etc.  If this is not supplied (which 
;;	the normal case), then the value of DEFAULT-WARNING-FUNCTION is used.
;;
;;  :DEFINITION-TYPE -- The value is the definition type, typically DEFUN or
;;	DEFFLAVOR.  If this is not supplied, the value of DEFAULT-WARNING-DEFINITION-TYPE
;;	is used.
;;
;; The following keywords may be either true or false, and they say that the
;; warning has this property.  Note that a warning may have more than one of
;; these keywords associated with it; for instance, it may both have bad style
;; and not run in MacLisp.
;;  :BAD-STYLE -- This warning is due to an unrecommended style of programming,
;;	but will not cause the program behave incorrectly.
;;  :ERROR -- An error occurred in the compiler, and it is being recorded here
;;	before enterring the debugger.
;;  :FATAL -- It is impossible to proceed from this warning, so the warning is
;;	recorded and then an error is signalled.
;;  :NOT-IN-MACLISP -- This warning was generated because something cannot run
;;	in MacLisp.
;;  :OBSOLETE -- This warning was generated because something is obsolete.
;;  :DELAYED -- This warning shouldn't be printed until it has been checked for
;;      obsoleteness at the end of the whole compilation.

(DEFVAR CL:*BREAK-ON-WARNINGS* NIL)

;;; This should really be called FWARN and WARN-1 called WARN.  Too late now.

(DEFUN WARN-1 (FLAVOR &REST OPTIONS
	       &KEY BAD-STYLE NOT-IN-MACLISP OBSOLETE DELAYED FATAL ERROR	;?
	       &ALLOW-OTHER-KEYS
	       &AUX (DEFAULT-CONS-AREA WORKING-STORAGE-AREA) WARNING)
  (DECLARE (DBG:ERROR-REPORTER))
  ;; Try to win if called outside of compiler warnings context,
  ;; but don't lose if called from within.
  (WHEN (AND BAD-STYLE INHIBIT-STYLE-WARNINGS-SWITCH)
    (RETURN-FROM WARN-1 NIL))
  (WHEN (AND NOT-IN-MACLISP (NOT RUN-IN-MACLISP-SWITCH))
    (RETURN-FROM WARN-1 NIL))
  (WHEN (AND OBSOLETE (NOT OBSOLETE-FUNCTION-WARNING-SWITCH))
    (RETURN-FROM WARN-1 NIL))
  (SETQ FATAL (OR FATAL ERROR))
  (COMPILER-WARNINGS-CONTEXT-BIND-MAYBE
    (SETF WARNING (LEXPR-FUNCALL #'MAKE-INSTANCE FLAVOR OPTIONS))
    (ADD-WARNING WARNING)
    ;; SUPPRESS-COMPILER-WARNINGS is a 
    (UNLESS (OR SUPPRESS-COMPILER-WARNINGS	;Flag that users can set to turn this off.
		FATAL				;Will get printed in error message.
		DELAYED)			;Will get checked later
      (PRINT-REAL-TIME-WARNING WARNING ERROR-OUTPUT)))
  (WHEN FATAL
    (FERROR "~A" WARNING))
  NIL)

;;;; Hair for functions referenced but not defined, and delayed wrong
;;;; number of arguments warnings.

(DEFVAR-RESETTABLE *SUPPRESS-REFERENCED-BUT-NOT-DEFINED* NIL)

;;; This function is called at the end of a compiler warnings context.
(DEFUN PROCESS-DELAYED-WARNINGS ()
  (LET ((WARNINGS1 (AND (NOT *SUPPRESS-REFERENCED-BUT-NOT-DEFINED*)
			(PROCESS-FUNCTIONS-REFERENCED-BUT-NOT-DEFINED)))
	(WARNINGS2 NIL))
    (DO ((W COMPILER-WARNINGS-HISTORY (CDR W)))	 ;Iterate over warnings for all files.
	((NULL W)) ;We don't attempt to splice out files with no warnings.  Dunno why.
      (DO ((L (CAR W) L1)			 ;Iterate over warnings for this file.
	   (L1 (CDAR W) (CDR L1)))		 ;L is prev-pointer, kept for splicing.
	  ((NULL L1))
	L-LOOP					 ;Branch back here if spliced L
	(DO ((M (CDAR L1) M1)			 ;Iterate over warnings for this definition.
	     (M1 (CDDAR L1) (CDR M1))		 ;M is prev-pointer, kept for splicing.
	     WARNING)
	    ((NULL M1))
	  M-LOOP				 ;Branch back here if spliced M
	  (SETQ WARNING (CAR M1))
	  (COND ((SEND WARNING :OBSOLETE-P)		;If warning is no longer valid,
		 (SETF (CDR M) (SETQ M1 (CDR M1)))	;splice it out.
		 (IF (NULL M1) (RETURN) (GO M-LOOP)))
		((SEND WARNING :DELAYED)		;Valid but not printed yet.
		 (SEND WARNING :SET-DELAYED NIL) 	;Mark it as printed,
		 (PUSH WARNING WARNINGS2))))	 	;and queue it for printing.
	(WHEN (NULL (CDDAR L1))
	  (SETF (CDR L) (SETQ L1 (CDR L1)))	 ;No warnings for this definition,
	  (IF (NULL L1) (RETURN) (GO L-LOOP))))) ;so splice it out.
    ;; Now that the database is updated, print the warnings.
    ;; Allow the user to abort the printing.
    (CONDITION-CASE ()
	 (WITH-ABORTS-ENABLED (UNWIND-PROTECT)
	   (WHEN WARNINGS1
	     (FORMAT ERROR-OUTPUT
		     "~&The following functions were referenced but don't seem defined:")
	     (DOLIST (X (NREVERSE WARNINGS1))
	       (FORMAT ERROR-OUTPUT "~& ")
	       (PRINT-FUNCTION-NAME (CAR X) ERROR-OUTPUT)
	       (FORMAT ERROR-OUTPUT " referenced by")
	       (PRINT-FUNCTION-LIST (CDR X) ERROR-OUTPUT)
	       (FORMAT ERROR-OUTPUT "~%")))
	   (DOLIST (X (NREVERSE WARNINGS2))
	     (PRINT-REAL-TIME-WARNING X ERROR-OUTPUT)))
       (ABORT NIL)))
  ;; Minimize working set of the database
  ;; This may cons a lot when there are lots of warnings, but it really
  ;; saves on page faults later.
  (SETQ COMPILER-WARNINGS-HISTORY
	(LOOP FOR FW IN COMPILER-WARNINGS-HISTORY
	      WHEN (NOT (NULL (CDR FW)))
		COLLECT FW INTO RESULT
	      FINALLY (RETURN (COPYTREE RESULT))))
  NIL)

(DEFUN FUNCTION-DEFINED (FSPEC)
  (WHEN (VARIABLE-BOUNDP FUNCTIONS-DEFINED)
    (WHEN (NULL FUNCTIONS-DEFINED)
      (SETQ FUNCTIONS-DEFINED
	    (SCL:MAKE-HASH-TABLE
	      :TEST #'CL:EQUAL
	      :SIZE (IF COMPILING-WHOLE-FILE-P
			(IF (VARIABLE-BOUNDP SCT:*SYSTEM*)
			    1000
			    100)
			20)
	      :GROWTH-FACTOR 2.0s0
	      :AREA WORKING-STORAGE-AREA)))
    (SEND FUNCTIONS-DEFINED :PUT-HASH
	  (COPY-IF-NECESSARY FSPEC)
	  (OR FDEFINE-FILE-PATHNAME T))))

(DEFUN FUNCTION-REFERENCED (WHAT &OPTIONAL (BY DEFAULT-WARNING-FUNCTION)
					   (LOCATOR (WARNING-SOURCE-LOCATOR))
				 &AUX (DEFAULT-CONS-AREA WORKING-STORAGE-AREA) PATH-ENTRY)
  (WHEN (AND (VARIABLE-BOUNDP FUNCTIONS-REFERENCED)
	     (NOT (FUNCTION-P WHAT)))
    (WHEN (NULL FUNCTIONS-REFERENCED)
      (SETQ FUNCTIONS-REFERENCED
	    (SCL:MAKE-HASH-TABLE
	      :TEST #'CL:EQUAL
	      :SIZE (IF COMPILING-WHOLE-FILE-P
			(IF (VARIABLE-BOUNDP SCT:*SYSTEM*)
			    400
			    40)
			20)
	      :GROWTH-FACTOR 2.0s0
	      :AREA WORKING-STORAGE-AREA)))
    (MULTIPLE-VALUE-BIND (ENTRY FOUND)
	(SEND FUNCTIONS-REFERENCED :GET-HASH WHAT)
      (UNLESS FOUND
	(SETQ WHAT (COPY-IF-NECESSARY WHAT)))
      (UNLESS (SETQ PATH-ENTRY (ASSQ FDEFINE-FILE-PATHNAME ENTRY))
	(SETQ PATH-ENTRY (NCONS FDEFINE-FILE-PATHNAME))
	(PUSH PATH-ENTRY ENTRY))
      (IF (AND (ATOM BY) (NULL LOCATOR))
	  (UNLESS (MEMBER BY (CDR PATH-ENTRY))
	    (PUSH (COPY-IF-NECESSARY BY) (CDR PATH-ENTRY)))
	  (LET ((BY-ENTRY (LOOP FOR ENTRIES ON (CDR PATH-ENTRY)
				AS ENTRY = (FIRST ENTRIES)
				DO (IF (ATOM ENTRY)
				       (WHEN (EQL ENTRY BY)
					 (SETQ ENTRY (NCONS ENTRY))
					 (SETF (FIRST ENTRIES) ENTRY)
					 (RETURN ENTRY))
				       (WHEN (EQUAL (CAR ENTRY) BY)
					 (RETURN ENTRY))))))
	    (WHEN (NULL BY-ENTRY)
	      (SETQ BY-ENTRY (NCONS (COPY-IF-NECESSARY BY)))
	      (PUSH BY-ENTRY (CDR PATH-ENTRY)))
	    (WHEN LOCATOR
	      (UNLESS (MEMQ LOCATOR (CDR BY-ENTRY))
		(PUSH LOCATOR (CDR BY-ENTRY))))))
      (SEND FUNCTIONS-REFERENCED :PUT-HASH WHAT ENTRY))))

(DEFUN FUNCTION-P (X)
  (COND ((SYMBOLP X)
	 (OR (FBOUNDP X) (GETL X '(*EXPR ARGDESC))))
	((FDEFINEDP X))
	(T
	 (FUNCALL (GET (VALIDATE-FUNCTION-SPEC X) 'FUNCTION-SPEC-HANDLER)
		  'SI:COMPILER-FDEFINEDP X))))

(DEFUN FUNCTION-REFERENCED-P (FUNCTION)
  (AND (VARIABLE-BOUNDP FUNCTIONS-REFERENCED)
       FUNCTIONS-REFERENCED
       (SEND FUNCTIONS-REFERENCED ':GET-HASH FUNCTION)))

(DEFUN FUNCTION-DEFINED-P (FUNCTION)
  (AND (VARIABLE-BOUNDP FUNCTIONS-DEFINED)
       FUNCTIONS-DEFINED
       (SEND FUNCTIONS-DEFINED ':GET-HASH FUNCTION)))

;;; NOTE: Don't take advantage of DELAYED-COMPILER-WARNING any place where the 
;;; volume of warnings is likely to be unmanagably large.

(DEFUN PROCESS-FUNCTIONS-REFERENCED-BUT-NOT-DEFINED (&AUX WARNINGS
						     (COMPILING-WHOLE-FILE-P NIL)
						     (DEFAULT-CONS-AREA WORKING-STORAGE-AREA))
  ;; Bind COMPILING-WHOLE-FILE-P to NIL so it doesn't mistakenly tag warnings on the
  ;; end of FILE-WARNINGS-HISTORY.
  (WHEN (AND (VARIABLE-BOUNDP FUNCTIONS-REFERENCED)
	     FUNCTIONS-REFERENCED)
    (SEND FUNCTIONS-REFERENCED :MAP-HASH
     #'(LAMBDA (FUNCTION ENTRY)
	 (UNLESS (OR (AND FUNCTIONS-DEFINED
			  (SEND FUNCTIONS-DEFINED :GET-HASH FUNCTION))
		     (GLOBAL-FDEFINEDP *COMPILER* FUNCTION))
	   (LOOP FOR (FDEFINE-FILE-PATHNAME . CALLERS) IN ENTRY
		 AS FILE-WARNINGS-HISTORY = (GET-FILE-WARNINGS FDEFINE-FILE-PATHNAME T)
		 APPEND (LOOP FOR CALLER IN CALLERS
			      AS LOCATORS = NIL
			      DO (WHEN (LISTP CALLER)
				   ;; Losing SETF -- Fixed in Common Lisp
				   (LET ((TEM CALLER))
				     (SETF `(,CALLER . ,LOCATORS) TEM)))
				 (IF LOCATORS
				     (DOLIST (LOCATOR LOCATORS)
				       (ADD-WARNING
					 (MAKE-INSTANCE 'FUNCTION-REFERENCED-BUT-NOT-DEFINED
							:REFERENCED-FUNCTION FUNCTION
							:FUNCTION CALLER
							:DEFINITION-TYPE 'DEFUN
							:SOURCE-LOCATOR LOCATOR)))
				     (ADD-WARNING
				       (MAKE-INSTANCE 'FUNCTION-REFERENCED-BUT-NOT-DEFINED
						      :REFERENCED-FUNCTION FUNCTION
						      :FUNCTION CALLER
						      :DEFINITION-TYPE 'DEFUN)))
			      COLLECT CALLER)
		   INTO ALL-CALLERS
		 FINALLY (PUSH (CONS FUNCTION ALL-CALLERS) WARNINGS))))))
  WARNINGS)

(DEFUN PRINT-FUNCTION-LIST (LIST STREAM)
  (SEND STREAM :TYO #\SPACE)		;Old one did this by accident of implementation,
					;presumably callers rely on that.
  (SCL:FORMAT-TEXTUAL-LIST LIST #'PRINT-FUNCTION-NAME
			   :STREAM STREAM :FILLED T :AFTER-LINE-BREAK "   "))

(DEFUN MAYBE-WARN-ABOUT-MACRO-DEFINITION (FCTN-NAME NEW-DEF &AUX TEM)
  (DECLARE (IGNORE NEW-DEF))
  (WHEN (AND (NOT (AND (LISTP (SETQ TEM (DECLARED-DEFINITION FCTN-NAME)))
		       (MEMQ (CAR TEM) '(MACRO SPECIAL))))
	     (FUNCTION-REFERENCED-P FCTN-NAME))
    (LET ((DEFAULT-WARNING-FUNCTION FCTN-NAME)
	  (DEFAULT-WARNING-DEFINITION-TYPE 'DEFUN))
      (WARN ()
	    "~S, which was previously assumed to be a function, is being redefined as a macro.
You will indubitably lose."
	    FCTN-NAME))))


(DEFUN FORM-WRONG-NUMBER-OF-ARGUMENTS-P (FORM)
  ;; If the function being called was defined within this compilation context,
  ;; get its new args info.
  (LET ((INFO (AND EXTERNAL-FUNCTIONS-ARGS-INFO
		   (CAR (GETHASH (CAR FORM) EXTERNAL-FUNCTIONS-ARGS-INFO)))))
    ;; Otherwise, get the args info in the ordinary way.
    (UNLESS INFO
      (MULTIPLE-VALUE (NIL INFO)
	(CLASSIFY-FORM FORM)))
    (LET ((NARGS (LENGTH (CDR FORM))))
      (COND ((AND (NOT (LDB-TEST SYSTEM:%%ARG-DESC-REST-ARG INFO))
		  (> NARGS (LDB SYSTEM:%%ARG-DESC-MAX-ARGS INFO)))
	     :TOO-MANY)
	    ((< NARGS (LDB SYSTEM:%%ARG-DESC-MIN-ARGS INFO))
	     :TOO-FEW)))))

;;; These are here so warnings work while this file is being loaded.

;;; This function binds a compiler warnings context around a function call.
;;; It is called by the COMPILER-WARNINGS-CONTEXT-BIND macro.
(DEFUN COMPILER-BIND-CONTEXT-INTERNAL (CONTINUATION BIND-CONTEXT-P BIND-WARNINGS-P)
  (DECLARE (SYS:DOWNWARD-FUNARG CONTINUATION))
  (COND (BIND-CONTEXT-P
	 ;; These are only bound in the outermost context.
	 (LET ((COMPILER-WARNINGS-CONTEXT T)
	       (FUNCTIONS-REFERENCED NIL)
	       (FUNCTIONS-DEFINED NIL)
	       (EXTERNAL-FUNCTIONS-ARGS-INFO NIL)
	       (CONTEXT-FILE-WARNINGS NIL)
	       (FILE-LOCAL-DECLARATIONS FILE-LOCAL-DECLARATIONS)
	       (*COMPILER-OPTIMIZE-STATE* (MAKE-INSTANCE 'LT:OPTIMIZE-STATE))
	       (*ALLOW-WIRED-COMPILE-TO-CORE*
		*ALLOW-WIRED-COMPILE-TO-CORE*)
	       ;; These are bound in recursive entries.
	       (FILE-WARNINGS-HISTORY (GET-FILE-WARNINGS FDEFINE-FILE-PATHNAME T))
	       (FILE-WARNINGS-HISTORY-TAIL NIL)
	       (LAST-FUNCTION-WARNING NIL)
	       (LAST-WARNING-FUNCTION T)
	       (LAST-WARNING-DEFINITION-TYPE 'DEFUN))
	   (UNWIND-PROTECT
	       (FUNCALL CONTINUATION)
	     (PROCESS-DELAYED-WARNINGS))))
	(BIND-WARNINGS-P
	 ;; These are bound in recursive entries.
	 (LET ((FILE-WARNINGS-HISTORY (GET-FILE-WARNINGS FDEFINE-FILE-PATHNAME T))
	       (FILE-WARNINGS-HISTORY-TAIL NIL)
	       (LAST-FUNCTION-WARNING NIL)
	       (LAST-WARNING-FUNCTION T)
	       (LAST-WARNING-DEFINITION-TYPE 'DEFUN))
	   (FUNCALL CONTINUATION)))
	(T
	 (FUNCALL CONTINUATION))))

(DEFUN LISP:WARN (&REST ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  (DECLARE (ARGLIST OPTIONAL-OPTIONS OPTIONAL-CONDITION-NAME FORMAT-STRING &REST ARGS))
  (LET* ((OPTIONS (AND (LISP:LISTP (FIRST ARGS)) (POP ARGS)))
	 ;;-- This is a stupid heuristic.  -- DLA
	 (SAVE-WARNING (OR OPTIONS DEFAULT-WARNING-FUNCTION
			   COMPILER-WARNINGS-CONTEXT SUPPRESS-COMPILER-WARNINGS))
	 (FLAVOR (COND ((SYMBOLP (FIRST ARGS))
			(POP ARGS))
		       ((OR (GETF OPTIONS :BAD-STYLE) (GETF OPTIONS :OBSOLETE))
			'DBG:DEFAULT-STYLE-WARNING)
		       (T 'DEFAULT-WARNING)))
	 (FORMAT-STRING (POP ARGS)))
    (CHECK-ARG-TYPE FORMAT-STRING :STRING)
    (SETQ ARGS (COPY-IF-NECESSARY ARGS))
    (LET* ((CONDITION (MAKE-CONDITION FLAVOR :FORMAT-STRING FORMAT-STRING :FORMAT-ARGS ARGS))
	   (HANDLED (IF (FBOUNDP 'CLI::MAKE-RESTART)
			(CONDITIONS:RESTART-CASE
			  (DBG:SIGNAL-CONDITION CONDITION T)
			  (CONDITIONS:MUFFLE-WARNING ()
			      :REPORT "Skip warning."
			    'CONDITIONS:MUFFLE-WARNING))
			(DBG:SIGNAL-CONDITION CONDITION T))))
      (COND (SAVE-WARNING
	     (UNLESS (EQ HANDLED 'CONDITIONS:MUFFLE-WARNING)
	       (UNLESS (OR (EQ FLAVOR 'DEFAULT-WARNING) (EQ FLAVOR 'DEFAULT-STYLE-WARNING))
		 (SETQ FORMAT-STRING "~A"
		       ARGS (LIST CONDITION)))
	       (LEXPR-FUNCALL #'WARN-1 'FORMAT-COMPILER-WARNING
			      :FORMAT-STRING FORMAT-STRING :FORMAT-ARGS ARGS
			      OPTIONS)))
	    (T
	     (UNLESS (OR HANDLED LISP:*BREAK-ON-WARNINGS* SUPPRESS-COMPILER-WARNINGS)
	       ;; Condition was not handled.  Print message but don't enter debugger.
	       (FORMAT ERROR-OUTPUT "~&Warning: ~~A~~%" CONDITION))))
      (WHEN LISP:*BREAK-ON-WARNINGS*
	;; Enter debugger, which will print the message.
	(DBG:ENTER-DEBUGGER CONDITION "*BREAK-ON-WARNINGS* is set"
			    '(((#\RESUME) :EXIT-DEBUGGER "Return from WARN"))))
      NIL)))


;;;; Printing interface.

(DEFVAR *DEFAULT-PRINT-WARNINGS-RELATIVE-TO-FILE-PACKAGE* NIL
  "The default for whether to bind *PACKAGE* while printing warnings.")

(DEFUN PRINT-COMPILER-WARNINGS (&OPTIONAL
				FILES
				(STREAM STANDARD-OUTPUT)
				FILE-NODE-MESSAGE
				FUNCTION-NODE-MESSAGE
				ANONYMOUS-FUNCTION-NODE-MESSAGE
				WARNING-NODE-MESSAGE
				&KEY
				(PRINT-PACKAGES-RELATIVE-TO-FILE-PACKAGE
				  *DEFAULT-PRINT-WARNINGS-RELATIVE-TO-FILE-PACKAGE*)
				)
  (WITH-INDENTATION (STREAM 2)
    (WHEN (NULL FILES)
      (SETQ FILES COMPILER-WARNINGS-HISTORY))
    (LOOP FOR FILE-WARNING IN FILES
	  WHEN (NLISTP FILE-WARNING)
	    DO (SETQ FILE-WARNING (GET-FILE-WARNINGS FILE-WARNING))
	  WHEN (CDR FILE-WARNING)
	    DO (WHEN FILE-NODE-MESSAGE
		 (SEND STREAM :BEGIN-NODE FILE-NODE-MESSAGE FILE-WARNING))
	       ;;--- This mess is the a direct indictment of the
	       ;;--- complete disarray of file attribute management.
	       (MULTIPLE-VALUE-BIND (VARS VALS)
		   (IF (AND PRINT-PACKAGES-RELATIVE-TO-FILE-PACKAGE
			    (CAR FILE-WARNING))
		       (FS:ATTRIBUTE-BINDINGS-FROM-PROPERTY-LIST
			 (SEND (CAR FILE-WARNING) :PROPERTY-LIST)
			 :CANONICALIZE-BASE-AND-SYNTAX T
			 :MAJOR-MODE-ADDITIONAL-ATTRIBUTES
			   (LET ((MM (OR (ZWEI:MAJOR-MODE-FROM-KEYWORD
					   (SEND (CAR FILE-WARNING) :GET ':MODE) T)
					 (ZWEI:MAJOR-MODE-FROM-CANONICAL-TYPE
					   (SEND (CAR FILE-WARNING) :CANONICAL-TYPE)))))
			     (AND MM (SEND MM :ADDITIONAL-ATTRIBUTES))))
		      ;; Use the "standard" i/o environment
		      (CLI::STANDARD-IO-ENVIRONMENT-VARS-AND-VALS))
		 (PROGV VARS VALS
		   (LET ((SCL:*PRINT-READABLY* NIL))
		     (PRINT-FILE-WARNING-HEADER FILE-WARNING STREAM)
		     (LOOP FOR FUNCTION-WARNING IN (CDR FILE-WARNING)
			   DO (PRINT-FUNCTION-WARNING FUNCTION-WARNING STREAM
						      FUNCTION-NODE-MESSAGE
						      ANONYMOUS-FUNCTION-NODE-MESSAGE
						      WARNING-NODE-MESSAGE))
		     (SEND STREAM :FRESH-LINE)
		     (WHEN FILE-NODE-MESSAGE
		       (SEND STREAM :END-NODE FILE-NODE-MESSAGE FILE-WARNING))))))))

(DEFUN PRINT-FUNCTION-WARNING (FUNCTION-WARNING STREAM FUNCTION-NODE-MESSAGE
			       ANONYMOUS-FUNCTION-NODE-MESSAGE WARNING-NODE-MESSAGE)
  (SEND STREAM :FRESH-LINE)
  (LET ((THE-MESSAGE (IF (NULL (CAR FUNCTION-WARNING))
			 ANONYMOUS-FUNCTION-NODE-MESSAGE
			 FUNCTION-NODE-MESSAGE)))
    (WHEN THE-MESSAGE
      (SEND STREAM :BEGIN-NODE THE-MESSAGE FUNCTION-WARNING))
    (SEND STREAM :TYO #\RETURN)
    (COND ((NULL (CAR FUNCTION-WARNING))
	   (FORMAT STREAM "Warning (not associated with any definition)"))
	  ((MEMQ (CADR FUNCTION-WARNING) '(DEFUN DEFFLAVOR))	;see LOAD-COMPILER-WARNINGS-1
	   (FORMAT STREAM "For ~A ~S"
		   (SI:DEFINITION-TYPE-NAME (CADR FUNCTION-WARNING))
		   (CAR FUNCTION-WARNING)))
	  (T
	   (FORMAT STREAM "For ~S ~S"
		   (CADR FUNCTION-WARNING)	;Print type in machine-readable form
		   (CAR FUNCTION-WARNING))))
    (LOOP FOR WARNING IN (CDDR FUNCTION-WARNING) DO
      (WHEN WARNING-NODE-MESSAGE
	(SEND STREAM :BEGIN-NODE WARNING-NODE-MESSAGE WARNING))
      (PRINT-WARNING WARNING STREAM)
      ;; :FRESH-LINE and the indenting stream don't work very well togther.  Get it to the
      ;; left in order to end the node.
      (WITH-INDENTATION (STREAM -2)
	(SEND STREAM :FRESH-LINE))
      (WHEN WARNING-NODE-MESSAGE
	(SEND STREAM :END-NODE WARNING-NODE-MESSAGE WARNING)))
    (WHEN THE-MESSAGE
      (SEND STREAM :END-NODE THE-MESSAGE FUNCTION-WARNING))))

(DEFUN PRINT-WARNING (WARNING STREAM)
  (WITH-INDENTATION (STREAM 2)
    (SEND STREAM :FRESH-LINE)
    (SEND WARNING :REPORT STREAM)))

(DEFUN PRINT-FILE-WARNING-HEADER (FILE-WARNING STREAM)
  (WITH-INDENTATION (STREAM -2)
    (IF (CAR FILE-WARNING)
	(FORMAT STREAM "~&~|~%Warnings for file ~A" (CAR FILE-WARNING))
	(FORMAT STREAM "~&~|~%Warnings not associated with any file"))))

(DEFUN PRINT-REAL-TIME-WARNING (WARNING &OPTIONAL (STREAM STANDARD-OUTPUT)
					&AUX (FUNCTION (SEND WARNING :FUNCTION))
					     (DEFINITION-TYPE (SEND WARNING :DEFINITION-TYPE))
					     (DEFAULT-CONS-AREA WORKING-STORAGE-AREA))
  (UNLESS (AND (EQUAL FUNCTION LAST-WARNING-FUNCTION)
	       (EQ DEFINITION-TYPE LAST-WARNING-DEFINITION-TYPE))
    (IF (NULL FUNCTION)
	(FORMAT STREAM "~&Warning (not associated with any definition):")
	(FORMAT STREAM "~&For ~A " (SI:DEFINITION-TYPE-NAME DEFINITION-TYPE))
	(PRINT-FUNCTION-NAME FUNCTION STREAM))
    (SETQ LAST-WARNING-FUNCTION FUNCTION
	  LAST-WARNING-DEFINITION-TYPE DEFINITION-TYPE))
  (PRINT-WARNING WARNING STREAM))

(DEFUN PRINT-FUNCTION-NAME (FUNCTION STREAM)
  (PRESENT FUNCTION 'FUNCTION-SPEC :STREAM STREAM))

;; Compatibility with old functions.
;(MAKE-OBSOLETE BARF "use WARN instead")
;
;(DEFUN BARF (EXP REASON SEVERITY)
;  (DECLARE (DBG:ERROR-REPORTER))
;  (WARN (AND (NEQ SEVERITY 'WARN) '(:FATAL T))
;	"~S ~A" EXP REASON))

;;;; Load compiler warnings from a file.

;;; A compiler warning that comes from reading a file of warnings.
;;; Too bad there isn't a better way to save these guys out.
(DEFFLAVOR RECONSTRUCTED-COMPILER-WARNING
	(TEXT)
	(COMPILER-WARNING)
  :INITABLE-INSTANCE-VARIABLES)

(DEFUN LOAD-COMPILER-WARNINGS (FILE &OPTIONAL (FLUSH-OLD-WARNINGS T))
  (WITH-OPEN-FILE (STREAM FILE ':ERROR ':REPROMPT)
    (LOOP AS C = (FUNCALL STREAM ':TYI)
	  WHEN (NULL C) DO (LCW-ERROR "No warnings found")
	  UNTIL (CHAR= C #\PAGE)
	  FINALLY (FUNCALL STREAM ':TYI)	;Grok CR
	  (LOAD-COMPILER-WARNINGS-1 STREAM FLUSH-OLD-WARNINGS)))
  T)

(DEFMETHOD (:REPORT RECONSTRUCTED-COMPILER-WARNING) (STREAM)
  (SEND STREAM :STRING-OUT TEXT))

(DEFUN LOAD-COMPILER-WARNINGS-1 (STREAM FLUSH-OLD-WARNINGS
				 &AUX LINE EOF FDEFINE-FILE-PATHNAME COMPILING-WHOLE-FILE-P
				      (PACKAGE SI:PKG-USER-PACKAGE))
 (LABELS ((ADD-WARNING (TEXT)
	    (WHEN TEXT
	      (ADD-WARNING-FOR-FUNCTION DEFAULT-WARNING-FUNCTION
					DEFAULT-WARNING-DEFINITION-TYPE
					(MAKE-INSTANCE
					  'RECONSTRUCTED-COMPILER-WARNING
					  :TEXT (STRING-TRIM '(#\SP #\TAB #\RETURN) TEXT))))))
  (LOOP NAMED ONE
    DO (SETQ LINE (FUNCALL STREAM ':LINE-IN))
       (COND ((STRING-EQUAL LINE "Warnings for file " 0 0 22 22)
	      (SETQ FDEFINE-FILE-PATHNAME
		    (FUNCALL (FS:MERGE-PATHNAMES (SUBSTRING LINE 22))
			     ':GENERIC-PATHNAME))
	      (SETQ PACKAGE SI:PKG-USER-PACKAGE)	;Parse package relative to this.
	      (SETQ PACKAGE (OR (PKG-FIND-PACKAGE
				  (FUNCALL FDEFINE-FILE-PATHNAME ':GET ':PACKAGE) :FIND)
				SI:PKG-USER-PACKAGE))	;Good as any, I guess...
	      (COND (FLUSH-OLD-WARNINGS
		     (RESET-FILE-WARNINGS FDEFINE-FILE-PATHNAME)
		     (SETQ COMPILING-WHOLE-FILE-P T))
		    (T (SETQ COMPILING-WHOLE-FILE-P NIL))))
	     ((STRING-EQUAL LINE "Warnings not associated with any file")
	      (SETQ FDEFINE-FILE-PATHNAME NIL
		    COMPILING-WHOLE-FILE-P NIL
		    PACKAGE SI:PKG-USER-PACKAGE))
	     (T (LCW-ERROR)))
       (FUNCALL STREAM ':LINE-IN)		;Grok empty line
       (COMPILER-WARNINGS-CONTEXT-BIND
	 (LOOP NAMED TWO
	       WITH (DEFAULT-WARNING-FUNCTION DEFAULT-WARNING-DEFINITION-TYPE)
	       WITH (TEXT TYPE POS)
	   DO (MULTIPLE-VALUE (LINE EOF) (FUNCALL STREAM ':LINE-IN))
	   DO (COND (EOF (ADD-WARNING TEXT)
			 (RETURN-FROM ONE T))
		    ((STRING-EQUAL LINE "  For Function " 0 0 17 17)
		     (ADD-WARNING TEXT)
		     (SETQ DEFAULT-WARNING-FUNCTION
			     (READ-FROM-STRING LINE 'SI:NO-EOF-OPTION 17)
			   DEFAULT-WARNING-DEFINITION-TYPE 'DEFUN
			   TEXT NIL))
		    ((STRING-EQUAL LINE "  For Flavor " 0 0 15 15)
		     (ADD-WARNING TEXT)
		     (SETQ DEFAULT-WARNING-FUNCTION
			     (READ-FROM-STRING LINE 'SI:NO-EOF-OPTION 15)
			   DEFAULT-WARNING-DEFINITION-TYPE 'DEFFLAVOR
			   TEXT NIL))
		    ((AND (STRING-EQUAL LINE "  For " 0 0 6 6)
			  ;; For DEFCONSTANT SYS:%DCW-U-NOP, for example
			  (IGNORE-ERRORS (MULTIPLE-VALUE (TYPE POS)
					   (READ-FROM-STRING LINE 'SI:NO-EOF-OPTION 6)))
			  (SYMBOLP TYPE)
			  (GETL TYPE '(ZWEI:DEFINITION-FUNCTION-SPEC-TYPE
				       SI:DEFINITION-TYPE-NAME)))
		     (ADD-WARNING TEXT)
		     (SETQ DEFAULT-WARNING-FUNCTION
			     (READ-FROM-STRING LINE 'SI:NO-EOF-OPTION POS)
			   DEFAULT-WARNING-DEFINITION-TYPE
			     (CL:GET TYPE 'ZWEI:DEFINITION-FUNCTION-SPEC-TYPE TYPE)
			   TEXT NIL))
		    ((STRING-EQUAL LINE "  Warning (not associated with any definition)")
		     (ADD-WARNING TEXT)
		     (SETQ DEFAULT-WARNING-FUNCTION NIL
			   DEFAULT-WARNING-DEFINITION-TYPE 'DEFUN
			   TEXT NIL))
		    ((STRING-EQUAL LINE "")
		     (RETURN-FROM TWO NIL))
		    ((STRING-SEARCH-NOT-CHAR #\SP LINE 0 (MIN (STRING-LENGTH LINE) 4))
		     (LCW-ERROR))
		    (T (IF ( (STRING-LENGTH LINE) 4)
			   (SETQ LINE (SUBSTRING LINE 4))
			   (SETQ LINE ""))
		       (IF TEXT
			   (SETQ TEXT (STRING-APPEND TEXT #\RETURN LINE))
			   (SETQ TEXT LINE)))))))))

(DEFUN LCW-ERROR (&OPTIONAL (FORMAT-STRING "Illegal format in Compiler Warnings file")
		  &REST FORMAT-ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  (LEXPR-FUNCALL #'FERROR NIL FORMAT-STRING FORMAT-ARGS))



(COMPILE-FLAVOR-METHODS RECONSTRUCTED-COMPILER-WARNING)

;;;; Initializations

(ADD-INITIALIZATION "Reset Compiler Warnings"
		    '(SETQ COMPILER-WARNINGS-HISTORY NIL)
		    '(BEFORE-COLD))

(SI:DEFINE-GC-OPTIMIZATION RESET-COMPILER-WARNINGS :LAYERED-IDS-RELEASE
  (:DOCUMENTATION "Clear the compiler-warnings database")
  (:BEFORE-FLIP (IGNORE)
    (SETQ COMPILER-WARNINGS-HISTORY NIL)))
