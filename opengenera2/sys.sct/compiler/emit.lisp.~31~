;;; -*- Mode: Lisp; Package: COMPILER; Lowercase: T; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; An interval is a piece of Byte-Lap, identified by its first
;;; and last instructions.  A piece of Byte-Lap is a doubly-linked
;;; list of structures that include the byte-lap-instruction structure.
;;;  interval-first: The first Byte-Lap instruction of this sequence.
;;;  interval-last: The last Byte-Lap instruction of this sequence.
;;;  interval-max-level: The maximum depth of the control stack during this code.
(defstruct (interval :named)
  interval-first
  interval-last
  interval-max-level)

(defun make-empty-interval ()
  (let ((initial-no-op (make-no-op-instruction)))
    (make-interval interval-first initial-no-op
		   interval-last initial-no-op)))

(defun emit (inst)
  (let* ((last-inst *last-inst*)
	 (last-control-stack-state (inst-post-control-stack-state last-inst))
	 (this-control-stack-state (inst-pre-control-stack-state inst))
	 (control-stack-state (or this-control-stack-state
				  *control-stack-state*
				  last-control-stack-state)))
    (unless last-control-stack-state
      (setf (inst-post-control-stack-state last-inst) control-stack-state))
    (unless this-control-stack-state
      (setf (inst-pre-control-stack-state inst) control-stack-state))
    (setf (inst-next last-inst) inst)
    (setf (inst-prev inst) last-inst)
    (setq *last-inst* inst)
    inst))

(defun emit-interval (interval)
  (check-arg-type interval interval)
  (let ((ifi (interval-first interval)))
    (setf (inst-next *last-inst*) ifi)
    (setf (inst-prev ifi) *last-inst*))
  (setq *last-inst* (interval-last interval)))

(defun insert-new-inst (inst target-inst)
  "Inserts INST byte lap instruction after TARGET-INST."
  (let ((old-next-inst (inst-next target-inst)))
      (setf (inst-next target-inst) inst)
      (setf (inst-prev inst) target-inst)
      (setf (inst-next inst) old-next-inst)
      (if old-next-inst
	  (setf (inst-prev old-next-inst) inst)
	  (setq *last-inst* inst))))

(defun find-first-inst-with-opcode (starting-inst opcode &optional (error-p t))
  (loop for inst first starting-inst then (inst-next inst)
	until (or (null inst) (eq (inst-opcode inst) opcode))
	finally
	(return (or inst (and error-p (ferror "No ~S instruction found" opcode))))))

(defun find-last-inst-with-opcode (starting-inst opcode &optional (error-p t))
  (loop with matching-inst
	for s-inst first starting-inst then (inst-next matching-inst)
	do (setq matching-inst (find-first-inst-with-opcode s-inst opcode nil))
	until (null matching-inst)
	finally (return (or (let ((i (inst-prev s-inst)))
			      (and i (eq (inst-opcode i) opcode) i))	;>>> Yuk <<<
			    (and error-p (ferror "Couldn't find a ~S inst" opcode))))))

;;; NCONC's intervals
(defun nconc-intervals (first-interval &rest intervals)
  (loop	for interval in intervals
	do (setf (inst-next (interval-last first-interval))
		 (interval-first interval))
	   (setf (inst-prev (interval-first interval))
		 (interval-last first-interval))
	   (setf (interval-last first-interval)
		 (interval-last interval))))

;;; This function walk over a byte-lap interval, calls the continuation on each instruction,
;;; and collects a new interval which replaces the old one.
(defun substitute-over-interval (interval function)
  (declare (sys:downward-funarg function))
  (let ((inst (interval-first interval))
	(*last-inst* nil))
    ;; If there is already a leading no-op, use it; otherwise make a new one.
    ;; (This is just to beautify the debugging typeouts and doesn't really matter.)
    (cond ((eq (inst-opcode inst) 'no-op)
	   (cl:shiftf *last-inst* inst (inst-next inst)))
	  (t
	   (setf (interval-first interval)
		 (setf *last-inst* (make-no-op-instruction)))))
    (cl:loop
       (when (null inst) (return))
       (let ((next-inst (inst-next inst)))
	 (funcall function inst)
	 (setf inst next-inst)))
    ;; This is the last instruction in the new interval.
    (unless (eq (inst-opcode *last-inst*) 'no-op)
      (emit (make-no-op-instruction)))
    (setf (inst-next *last-inst*) nil)		;stop chain here for print-interval
    (setf (interval-last interval) *last-inst*))
  nil)

(defun map-over-interval (interval function)
  (declare (sys:downward-funarg function))
  (loop for inst first (interval-first interval) then (inst-next inst)
	while inst
	do (funcall function inst)))

(defun map-over-intervals (intervals function)
  (declare (sys:downward-funarg function))
  (dolist (interval intervals)
    (map-over-interval interval function)))

;;;; Emiting byte-lap instructions.

(defun emit-var (variable)
  (check-arg-type variable variable)
  (emit (make-var-instruction :var-variable variable)))

(defun emit-fun (function)
  (check-arg-type function function-reference)
  ;; Emit the byte lap to reference the function
  (emit (make-fun-instruction :fun-function function)))

(defun emit-const (constant &key (read-only t) (sharable t))
  (emit (make-const-instruction :const-value constant :const-read-only read-only
				:const-sharable sharable)))

(defun emit-pop (&optional (n 1) (save-n 0))
  (check-arg n (or (fixp n) (eq n 'multiple)) "a fixnum or /"multiple/"")
  (check-arg save-n (or (fixp save-n) (eq save-n 'multiple)) "a fixnum or /"multiple/"")
  (emit (make-pop-instruction :pop-n n :pop-save-n save-n )))

(defun emit-computed-pop (variables &optional (n 0) (save-n 0))
  (check-arg-type n :fix)
  (check-arg save-n (or (fixp save-n) (eq save-n 'multiple)) "a fixnum or /"multiple/"")
  (emit (make-computed-pop-instruction :computed-pop-variables variables
				       :computed-pop-n n
				       :computed-pop-save-n save-n)))

(defun emit-setq (variable)
  (when (eq (variable-type variable) 'lexical)
    (setf (lexical-modified-p variable) t))
  (emit (make-setq-instruction :setq-variable variable)))

(defun emit-start-call (function destination)
  (declare (ignore destination))
  (check-arg-type function function-reference)
  (emit (make-start-call-instruction :start-call-function function)))

(defun emit-call (function n-args destination &optional inline-p start-call)
  (check-arg-type function function-reference)
  (check-arg-type n-args :fix "a fixnum")
  (let ((call (make-call-instruction :call-function function
				     :call-n-args n-args
				     :call-destination destination
				     :call-inline-p inline-p
				     :call-start-call (and start-call `(,start-call)))))
    (when start-call
      (setf (start-call-call start-call) call))
    (emit call)))

(defun emit-macro-instruction (opcode operand bits destination)
  destination
  (emit (make-macro-instruction-instruction :macro-instruction-bits bits
					    :macro-instruction-opcode opcode
					    :macro-instruction-operand operand)))

(defun emit-push-pc (tag)
  (let ((inst (make-push-pc-instruction :push-pc-tag tag)))
    (push inst (tag-jumps tag))
    (emit inst)))

(defun emit-push-pc-array (tags default-tag)
  (let ((inst (make-push-pc-array-instruction :push-pc-array-tags tags
					      :push-pc-array-default-tag default-tag)))
    (push inst (tag-jumps default-tag))
    (dolist (tag tags)
      (push inst (tag-jumps tag)))
    (emit inst)))

(defun emit-push-logic-variable (name)
  (emit (make-push-logic-variable-instruction :push-logic-variable-name name)))

(defun make-tag (&optional type name)
  (selectq type
    ((nil internal)
     (make-internal-tag :tag-name (incf *tag-uid*)))
    (go
     (make-go-tag :tag-name name
		  :tag-pframe *pframe*))
    (pc
     (make-pc-tag :tag-name name))
    (otherwise
     (llc-error "Bad tag type ~S" type))))

(defun emit-tag (tag)
  (if (not (typep tag 'tag-instruction))
      (llc-error "~S is not a tag" tag))
  (if (and (memq (tag-type tag) '(go return))
	   (not (eq (tag-pframe tag) *pframe*)))
      (llc-error "The tag ~S was created in pframe ~S but emitted in pframe~S"
	      tag (tag-pframe tag) *pframe*))
  (emit tag))

(defun emit-jump (condition tag &optional
		  (pops-if-successful (if (eq condition 'always) 0 1))
		  (pops-if-not-successful (if (eq condition 'always) 0 1))
		  (error-info nil))
  (if (or (null pops-if-successful) (null pops-if-not-successful))
      (error "foo"))
  (if (not (memq condition '(always true false)))
      (llc-error "~S is not a valid jump condition" condition))
  (if (not (typep tag 'tag-instruction))
      (llc-error "~S is not a tag" tag))
  (let ((inst (make-jump-instruction :jump-condition condition
				     :jump-tag tag
				     :jump-pops-if-successful pops-if-successful
				     :jump-pops-if-not-successful pops-if-not-successful
				     :jump-error-info error-info)))
    (push inst (tag-jumps tag))
    (emit inst)))

(defun emit-return-nil ()
  (emit-const nil)
  (emit-return))

(defun emit-return (&optional (n 1))
  (check-arg n (or (fixp n) (eq n 'multiple)) "a fixnum or 'MULTIPLE")
  (emit (make-return-instruction :return-n n)))

(defun emit-var-location (variable)
  (when (eq (variable-type variable) 'lexical)
    (setf (lexical-modified-p variable) t))
  (emit (make-var-location-instruction :var-location-variable variable)))

(defun emit-bind (variable &optional allow-dbs-pframe)
  (lisp:check-type variable (or null special-variable) "a special variable")
  (when (and (not allow-dbs-pframe) (boundp '*dbs-pframe*) *dbs-pframe*)
    (cl:pushnew variable (dbs-specials-bound *dbs-pframe*)))
  (when (plusp (bindings-in-control-stack *compiler*))
    (note-binding *control-stack-state*))
  (emit (make-bind-instruction :bind-variable variable)))

(defun emit-unbind (n)
  (check-arg-type n :fixnum)
  (emit (make-unbind-instruction :unbind-n n)))

(defun emit-start-catch (pframe destination)
  (check-arg-type pframe catch-pframe)
  (let ((inst (make-start-catch-instruction :start-catch-pframe pframe
					    :start-catch-destination destination))
	(tag (catch-internal-tag pframe)))
    (push inst (tag-jumps tag))
    (emit inst)))

(defun emit-start-unwind-protect (pframe handler)
  (check-arg-type pframe catch-pframe)
  (let ((inst (make-start-unwind-protect-instruction
		:start-unwind-protect-pframe pframe
		:start-unwind-protect-handler handler)))
    (push inst (tag-jumps handler))
    (emit inst)))

(defun emit-end-catch (pframe destination &optional (extra-pops 0))
  (check-arg-type pframe catch-pframe)
  (let ((inst (make-end-catch-instruction :end-catch-pframe pframe
					  :end-catch-destination destination
					  :end-catch-extra-pops extra-pops))
	(tag (catch-internal-tag pframe)))
    (and tag (push inst (tag-jumps tag)))
    (emit inst)))

(defun emit-take-args (n-required n-optional rest-p init-intervals)
  (check-arg-type n-required :fixnum)
  (check-arg-type n-optional :fixnum)
  (emit (make-take-args-instruction
	  :take-args-n-required n-required :take-args-n-optional n-optional
	  :take-args-rest-p rest-p :take-args-init-intervals init-intervals)))

(defun emit-take-arg (number rest-arg-p)
  (check-arg-type number :fixnum)
  (emit (make-take-arg-instruction :take-arg-number number :take-arg-rest-p rest-arg-p)))

(defun emit-require-args (n-required n-optional rest-p)
  (check-arg-type n-required :fixnum)
  (check-arg-type n-optional :fixnum)
  (emit (make-require-args-instruction :require-args-n-required n-required
				       :require-args-n-optional n-optional
				       :require-args-rest-p rest-p)))

(defun emit-take-keyword-argument (rest-arg-variable interval)
  (emit (make-take-keyword-argument-instruction
	  :take-keyword-argument-rest-arg rest-arg-variable
	  :take-keyword-argument-interval interval)))

(defun emit-take-values (destination)
  (emit (make-take-values-instruction :take-values-destination destination)))

(defun emit-copy (&optional (n 0) (multiple-p nil))
  (and (eq n 'multiple)
       (not multiple-p)
       (setq n 0 multiple-p t))			;Copy up from under a multiple group
  (check-arg-type n :fixnum)
  (emit (make-copy-instruction :copy-n n
			       :copy-past-multiple multiple-p)))

(defun emit-relative-push-address (n)
  (check-arg-type n :fixnum)
  (emit (make-relative-push-address-instruction :relative-push-address-n n)))

(defun emit-throw ()
  (emit (make-throw-instruction)))

(defun emit-allocate-local-block ()
  (emit (make-allocate-local-block-instruction)))

(defun emit-popj (save-n)
  (check-arg save-n (or (fixp save-n) (eq save-n 'multiple)) "a fixnum or /"multiple/"")
  (emit (make-popj-instruction :popj-save-n save-n)))

(defun emit-pop-vars (vars-list destination)
  (when (destination-for-return destination)
    (llc-error "POP-VARS to destination RETURN is not allowed."))
  (emit (make-pop-vars-instruction :pop-vars-list vars-list
				   :pop-vars-destination destination)))

(defun emit-name (variable-list &optional in-loop-p
		  (lexical-contour (append *delayed-local-declarations*
					   (si:env-variables *interpreter-lexical-environment*))))
  (check-arg variable-list cl:listp "a list")
  (dolist (variable variable-list)
    (check-arg-type variable variable)
    (when (and in-loop-p (eq (variable-type variable) 'lexical))
      (setf (lexical-bound-in-loop-p variable) t)))
  (emit (make-name-instruction :name-variables variable-list
			       :name-lexical-contour lexical-contour)))

(defun emit-start-dbs (pframe)
  (check-arg-type pframe pframe)
  (emit (make-start-dbs-instruction :start-dbs-pframe pframe)))

(defun emit-end-dbs (pframe)
  (check-arg-type pframe pframe)
  (emit (make-end-dbs-instruction :end-dbs-pframe pframe)))

(defun emit-start-prog (pframe)
  (check-arg-type pframe pframe)
  (emit (make-start-prog-instruction :start-prog-pframe pframe)))

(defun emit-end-prog (pframe)
  (check-arg-type pframe pframe)
  (emit (make-end-prog-instruction :end-prog-pframe pframe)))

(defun emit-unwind (destination pframe &optional outside-p)
  (check-arg-type pframe pframe)
  ;; Mark the unwound frames.
  (loop for pf first *pframe* then (pframe-parent pf)
	until (eq pf pframe)
	when (null pf)
	  do (llc-error "Can't find matching PFrame.")
	do (setf (pframe-unwind-p pf) t))
  (emit (make-unwind-instruction :unwind-destination destination
				 :unwind-pframe pframe
				 :unwind-outside-p outside-p)))

(defun emit-unwind-quick-internal (save-n)
  (check-arg save-n (or (fixp save-n) (eq save-n 'multiple)) "a fixnum or /"multiple/"")
  (emit (make-unwind-quick-internal-instruction :unwind-quick-internal-save-n save-n)))

(defun emit-start-multiple (pframe)
  (check-arg-type pframe pframe)
  (emit (make-start-multiple-instruction :start-multiple-pframe pframe)))

(defun emit-end-multiple (pframe)
  (check-arg-type pframe pframe)
  (emit (make-end-multiple-instruction :end-multiple-pframe pframe)))

(defun emit-start-saved-multiple (pframes)
  (emit (make-start-saved-multiple-instruction :start-saved-multiple-pframes pframes)))

(defun emit-save-level (saver)
  (emit (make-save-level-instruction :save-level-saver saver)))

(defun emit-restore-level (saver)
  (emit (make-restore-level-instruction :restore-level-saver saver)))

(defun emit-kludge-stack (amount &optional binding-p)
  (emit (make-kludge-stack-instruction :kludge-stack-amount amount
				       :kludge-stack-binding-p binding-p)))

(defun emit-flavor-mapping-table (flavor-name)
  (emit (make-flavor-mapping-table-instruction :flavor-mapping-table-flavor flavor-name)))

(defun emit-fast-aref (variable)
  (emit (make-fast-aref-instruction :fast-aref-variable variable)))

(defun emit-fast-aref-begin (function)
  (emit (make-fast-aref-begin-instruction :fast-aref-begin-function function)))

(defun emit-fast-aset (variable)
  (emit (make-fast-aset-instruction :fast-aset-variable variable)))

(defun emit-fast-aset-begin (function)
  (emit (make-fast-aset-begin-instruction :fast-aset-begin-function function)))

(defun emit-setup-array (variable)
  (emit (make-setup-array-instruction :setup-array-register-variable variable)))

(defun emit-capture-argument (variable)
  (emit (make-capture-argument-instruction :capture-argument-variable variable)))

(defun emit-block-read-test (bar code tag pframe require-tos-valid)
  (let ((inst (make-block-read-test-instruction
		:block-read-test-bar bar
		:block-read-test-code code
		:block-read-test-tag tag
		:block-read-test-pframe pframe
		:block-read-test-require-tos-valid require-tos-valid)))
    (push inst (tag-jumps tag))
    (emit inst)))

;;;

(defmethod (collect-instruction-interval interval-instruction) (continuation)
  (declare (sys:downward-funarg continuation))
  (setf interval-intervals
	(let ((*function-extra-intervals* nil))
	  (list* (collect-interval (funcall continuation))
		 *function-extra-intervals*))))

(defun emit-split (destination continuation)
  (declare (sys:downward-funarg continuation))
  (if *enable-frame-splitting*
      (let ((inst (make-split-interval-instruction :interval-destination destination)))
	(collect-instruction-interval inst continuation)
	(emit inst))
      (funcall continuation)))

(defun emit-tagbody (destination continuation pframe tags)
  (declare (sys:downward-funarg continuation))
  (let ((inst (make-tagbody-interval-instruction
		:interval-destination destination
		:tagbody-pframe pframe :tagbody-tags tags)))
    (collect-instruction-interval inst continuation)
    (emit inst)))

(defun emit-go (tag)
  (emit (make-go-instruction :go-pframe *pframe* :go-tag tag)))

(defun emit-computed-go (continuation tags)
  (declare (sys:downward-funarg continuation))
  (let ((inst (make-computed-go-interval-instruction
		:computed-go-pframe *pframe* :computed-go-tags tags
		:interval-destination *destination-stack*)))
    (collect-instruction-interval inst continuation)
    (emit inst)))

(defun emit-block (continuation pframe)
  (declare (sys:downward-funarg continuation))
  (let ((inst (make-block-interval-instruction
		:block-pframe pframe 
		:interval-destination (block-destination pframe))))
    (collect-instruction-interval inst continuation)
    (emit inst)))

(defun emit-return-from (interval-destination continuation)
  (declare (sys:downward-funarg continuation))
  (let ((inst (make-return-from-interval-instruction
		:return-from-pframe *pframe*
		:interval-destination interval-destination)))
    (collect-instruction-interval inst continuation)
    (emit inst)))
