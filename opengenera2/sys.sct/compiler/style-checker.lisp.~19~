;;; -*- Mode: Lisp; Package: compiler; Lowercase: T; Base: 8 -*-
;;; This file is l-compiler;style-checker
;;; This file contains the style checkers (called by phase-1)
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun style-check-form (form env &key check-style)
  (when (listp form)
    (let ((fcn (first form)))
      (cond ((eq fcn 'inhibit-style-warnings)
	     (return-from style-check-form (second form)))
	    ((and check-style
		  (not inhibit-style-warnings-switch)
		  (symbolp fcn)
		  (null (si:local-function-definition fcn env)))
	     (let ((*optimizer-environment* env)
		   (opts (get fcn 'style-checker)))
	       (when opts
		 (cond ((functionp opts)
			(funcall opts form))
		       ((cl:listp opts)
			(loop for (name checker) in opts
			      do (ignore name)
				 (funcall checker form)))
		       (t (warn "Invalid style checker ~S for ~S." opts fcn)))))))))
  form)






;;; Style checker for messages.
;;; Implemented by defining a style checker on SEND and LEXPR-SEND.  Similar to the
;;; function style checker.  If the message has a 'MESSAGE-STYLE-CHECKER property
;;; then that will be called with one argument, the send or lexpr-send form that
;;; is using the message.

(defun check-style-for-message (form)
  (let ((message-form (third form)))
    (cond ((keywordp message-form))		        ;unquoted keyword symbol
	  ((and (listp message-form)		        ;quoted symbol
		(eq (first message-form) 'quote)
		(symbolp (setq message-form (second message-form)))))
	  (t (setq message-form nil)))		       ;can't figure out message, don't check
    (when message-form
      (let ((style-checker (get message-form 'message-style-checker)))
	(when style-checker
	  (funcall style-checker form))))))

(defprop send check-style-for-message style-checker)
(defprop lexpr-send check-style-for-message style-checker)



;;; Style-checker for obsolete defuns.

(defun warn-about-obsolete-defun (form)
  (let* ((function (car form))
	 (reason (car (get function 'obsolete-defun))))
    (warn '(:obsolete t) "~S is an obsolete function~:[; ~A.~;.~%~A~]"
	  function (string-search-set '(#\newline #\.) reason) reason)))


;;; Things that are obsolete.

(make-obsolete getchar "use strings")
(make-obsolete getcharn "use strings")
(make-obsolete implode "use strings")
(make-obsolete maknam "use strings")
(make-obsolete explode "use strings")
(make-obsolete explodec "use strings")
(make-obsolete exploden "use strings")
(make-obsolete samepnamep "use strings")
;This can't go in PROCES because it gets loaded before this file
(make-obsolete process-create "it has been renamed to MAKE-PROCESS")
(make-obsolete si:process-run-temporary-function "PROCESS-RUN-FUNCTION is identical")
;This can't go in EVAL because that file is in the cold load.
(make-obsolete multiple-value-return "use RETURN")
;This can't go in RESOUR because that file is in the cold load.
(COMPILER:MAKE-OBSOLETE WITH-RESOURCE "use USING-RESOURCE")

(defun (make-array style-checker) (form &aux first-option)
  (and (cdddr form)
       (or (numberp (setq first-option (caddr form)))
	   (memq first-option *array-type-codes*)
	   (and (listp first-option)
		(eq (car first-option) 'quote)
		(memq (cadr first-option) *array-type-codes*)))
       (warn '(:obsolete t) "~S is the obsolete form of MAKE-ARRAY; use the keyword form"
	     form)))


;;;; Gratuitous style checkers (from QCOPT)

;; Gratuitous hack which seems worthwhile
(defun (:property format style-checker) (form)
  (need-two-args form)
  (when (stringp (cadr form))
    (warn '(:bad-style t)
	  "~S used as first argument of FORMAT;~%you probably forgot the destination argument"
	  (cadr form))))

(defun (:property cl:format style-checker) (form)
  (need-two-args form)
  (when (stringp (cadr form))
    (warn '(:bad-style t)
	  "~S used as first argument of FORMAT;~%you probably forgot the destination argument"
	  (cadr form))))

(defun (:property tv:notify style-checker) (form)
  (need-two-args form)
  (when (stringp (cadr form))
    (warn '(:bad-style t)
	  "~S used as first argument of TV:NOTIFY;~@
           you probably forgot the WINDOW-OF-INTEREST argument"
	  (cadr form))))

(defun need-two-args (form)
  (when (null (cddr form))
    (warn '(:bad-style t) "~S -- fewer than two arguments" form)))

;; These functions usually only make sense at top level, and if they occur in code,
;; it's probably an unbalanced parentheses problem.
(defprop defsubst only-at-top-level style-checker)
(defprop defflavor only-at-top-level style-checker)
(defprop defmethod only-at-top-level style-checker)
(defprop defwrapper only-at-top-level style-checker)
(defprop defwhopper only-at-top-level style-checker)
(defprop defwhopper-subst only-at-top-level style-checker)
(defprop defgeneric only-at-top-level style-checker) 
(defprop defun-in-flavor only-at-top-level style-checker)
(defprop defsubst-in-flavor only-at-top-level style-checker)
(defprop defmacro-in-flavor only-at-top-level style-checker)

(defun only-at-top-level (form)
  (warn '(:bad-style t)
	"A~:[~;n~] ~S should only occur at top level"
	(eq (car form) 'eval-when) (car form)))

(defprop dbg dbg-style style-checker)
(defun dbg-style (form)
  (and (equal form '(dbg))
       (warn () "(DBG) Breakpoint in code")))

;;;

(defmacro make-character-style-checkers (&rest functions)
  (loop for function in functions
	;; Each mapping function gets the new optimizer
	collect `(defun (:property ,function style-checker) (form)
		   (character-style-checker form))
	  into style-checkers
	;; Each fast mapping function should expand inline for lambdas
	finally (return
		  `(progn 'compile
		     ,@style-checkers))))

(defun character-style-checker (form)
  (matchp form
    ((function . arguments)
     (when (loop for arg in arguments
		 thereis (characterp arg))
       (warn '(:bad-style t)
	     "~S is being called with a character argument" function)))))

(make-character-style-checkers < = >    + -)

(make-obsolete zunderflow
	       "it has been replaced by the WITHOUT-FLOATING-UNDERFLOW-TRAPS special form"
	       defvar)

;;;

(defun warn-if-funcalling-special-form (form)
  (matchp form
    ((funcaller ((*or* ignore function quote) function) . ignore)
     (when (and (symbolp function)
		(not (si:local-function-definition function *optimizer-environment*)))
       (let ((def (declared-definition function)))
	 ;; If he's calling a constant function which is a macro or a special
	 ;; form, and it has not been shadowed by FLET, etc., give a warning
	 (when (and def
		    (or (macro-function def) (special-form-p def)))
	   (warn '(:bad-style t)
		 "Trying to ~S ~S, which is a ~:[macro~;special form~], probably won't work"
		 funcaller function (special-form-p def))))))))

(add-style-checker 'warn-if-funcalling-special-form 'funcall
		   'warn-if-funcalling-special-form)
(add-style-checker 'warn-if-funcalling-special-form 'apply
		   'warn-if-funcalling-special-form)
(add-style-checker 'warn-if-funcalling-special-form 'cl:apply
		   'warn-if-funcalling-special-form)
(add-style-checker 'warn-if-funcalling-special-form 'cl:multiple-value-call
		   'warn-if-funcalling-special-form)



;;; The following style checkers have been decomissionsed until we can tell if they appeared
;;; in original user code and not as the result of an optimizer. --Hornig

#||

(defun (eq style-checker) (form)
  (matchp form
    (('eq x y)
     (flet ((type-check (arg)
	      (when (constant-form-p arg)
		(let ((val (constant-evaluator arg)))
		  (when (numberp val)
		    (warn '(:bad-style t)
			  "~S -- You should not use EQ to compare numbers." form))
		  (when (characterp val)
		    (warn '(:bad-style t)
			  "~S -- You should not use EQ to compare characters." form))))))
       (type-check x)
       (type-check y)))))

;;;

(defun check-numeric-byte-specifier (ppss form)
  (when (and (constant-form-p ppss)
	     (not (symbolp ppss)))
    (let ((ppss (constant-evaluator ppss)))
      (phase-1-warning "Use of numeric byte specifier in ~S is obsolete.  Use (BYTE ~S ~S)."
		       form (byte-size ppss) (byte-position ppss)))))

(defun check-numeric-byte-specifier-in-ldb (form)
  (check-numeric-byte-specifier (second form) form))

(defprop ldb check-numeric-byte-specifier-in-ldb style-checker)
(defprop %logldb check-numeric-byte-specifier-in-ldb style-checker)
(defprop %p-ldb check-numeric-byte-specifier-in-ldb style-checker)
(defprop char-ldb-internal check-numeric-byte-specifier-in-ldb style-checker)

(defun check-numeric-byte-specifier-in-dpb (form)
  (check-numeric-byte-specifier (third form) form))

(defprop dpb check-numeric-byte-specifier-in-dpb style-checker)
(defprop %logdpb check-numeric-byte-specifier-in-dpb style-checker)
(defprop %p-dpb check-numeric-byte-specifier-in-dpb style-checker)
(defprop char-dpb-internal check-numeric-byte-specifier-in-dpb style-checker)

;;;

(COMPILER:MAKE-OBSOLETE AR-1 "use AREF")
(COMPILER:MAKE-OBSOLETE AS-1 "use SETF of AREF")
(COMPILER:MAKE-OBSOLETE AP-1 "use LOCF of AREF")
(COMPILER:MAKE-OBSOLETE AR-2 "use AREF")
(COMPILER:MAKE-OBSOLETE AS-2 "use SETF of AREF")
(COMPILER:MAKE-OBSOLETE AP-2 "use LOCF of AREF")

||#



;; This catches (READ-FROM-STRING "FOOBAR" :END 2), which doesn't do what you'd think.
;; This one happens to people all the time, and is in fact one of the most
;; Frequently Asked Questions about Common Lisp. 

(defun (lisp:read-from-string style-checker) (form)
  (let ((length (length form)))
    (when (or (= length 3)
	      (and (>= length 4) (evenp length)))
      (let ((eof-errorp (third form)))
	(when (and (not (atom eof-errorp))
		   (eq (car eof-errorp) 'quote)
		   (keywordp (cadr eof-errorp)))
	  (setq eof-errorp (cadr eof-errorp)))
	(when (member eof-errorp '(:start :end :preserve-whitespace))
	  (warn '(:bad-style t)
		"For ~S, ~S is an unlikely EOF-ERRORP value.~:[~;~
	       ~%You probably want ~S instead.~]"
		form eof-errorp (>= length 4)
		(list* (car form) (cadr form) t nil (cddr form))))))))


