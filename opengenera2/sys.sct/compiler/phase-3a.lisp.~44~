;;; -*- Base: 8; Mode: Lisp; Package: COMPILER; Lowercase: T -*-   10/5/81
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; 
;;;

;;; The job of this phase of the compiler is to eliminate excess setting of the SELF
;;; and SELF-MAPPING-TABLE slots.  This is done by walking the byte-lap and keeping
;;; track of what things are set to.

(defvar *pc-array*)

(defun run-phase-3a ()
  (let ((intervals-analyzed nil)
	(child-alist (mapcar #'(lambda (f) (cons f nil)) *function-list*)))
    (flet ((analyze-interval (function smt-var self-var)
	     (let ((*function* function)
		   (interval (function-interval function)))
	       (unless (memq interval intervals-analyzed)
		 (phase-3a-analyze-instructions
		   (interval-first interval)
		   (interval-last interval)
		   ;; Kludge if the mapping table variable is modified
		   ;; (i.e. there was next method information) since the
		   ;; frame-resident copy of the variable wouldn't have gotten
		   ;; updated by the (POP .EXTRA-ARGUMENT.) code.
		   (and smt-var
			(not (lexical-modified-p smt-var))
			smt-var)
		   0
		   self-var)
		 (push interval intervals-analyzed)))))
      ;; Create the mapping from functions to their children
      (let ((root nil))
	(dolist (function *function-list*)
	  (cl:ecase (function-type function)
	    (internal
	      (push function (cdr (cl:assoc (function-parent-function function) child-alist))))
	    (external
	      (setq root function))))
	(labels ((do-function (function)
		   (let ((*frame-function* function)
			 (*function* function)
			 (self-var nil)
			 (smt-var nil))
		     (dolist (var (function-lexical-variables function))
		       (let ((ovar (lexical-original-variable var)))
			 (when (and ovar
				    (lexical-argument-p ovar))
			   (selectq (lexical-location ovar)
			     ((#+imach 1 #+3600 0)
			      (setq self-var var))
			     ((#+imach 0 #+3600 1)
			      (setq smt-var var))))))
		     (analyze-interval function smt-var self-var)
		     (mapc #'analyze-interval
			   (function-frame-sharers *frame-function*)
			   smt-var self-var)
		     (mapc #'do-function (cdr (cl:assoc function child-alist))))))
	  (do-function root))))))

;;; A value of NIL for MAPPING-TABLE, SEGMENT-OFFSET, or SELF-VALUE means "Don't
;;; know".
(defun phase-3a-analyze-instructions
       (next-instruction last-instruction mapping-table segment-offset self-value)
  (loop doing
    (multiple-value (next-instruction mapping-table segment-offset self-value)
      (phase-3a-analyze-instruction
	next-instruction last-instruction mapping-table segment-offset self-value))
    (when (or (null next-instruction)
	      (eq next-instruction last-instruction))
      (return nil))))

(defgeneric phase-3a-analyze-instruction
	    (instruction last-instruction mapping-table segment-offset self-value)
  (declare (values next-instruction mapping-table segment-offset self-value)))

(defmethod (phase-3a-analyze-instruction byte-lap-instruction)
	   (last-instruction mapping-table segment-offset self-value)
  (declare (ignore last-instruction tos))
  ;; Random instructions don't affect us
  (values inst-next mapping-table segment-offset self-value))

(definst-method (phase-3a-analyze-instruction jump)
		(last-instruction mapping-table segment-offset self-value)
  (declare (ignore tos))
  (cond ((eq jump-condition 'always)
	 (values jump-tag mapping-table segment-offset self-value))
	(t
	 (phase-3a-analyze-instructions
	   jump-tag last-instruction mapping-table segment-offset self-value)
	 (values inst-next mapping-table segment-offset self-value))))

(defmethod (phase-3a-analyze-instruction push-pc-array-instruction)
	   (last-instruction mapping-table segment-offset self-value)
  (let ((*pc-array* self))
    ;; Analyze the remainder of this control flow branch with *pc-array* bound to
    ;; this instruction.
    (phase-3a-analyze-instructions
      inst-next last-instruction mapping-table segment-offset self-value)))

(definst-method (phase-3a-analyze-instruction push-pc)
		(last-instruction mapping-table segment-offset self-value)
  (phase-3a-analyze-instructions
    (push-pc-tag self)
    last-instruction
    nil
    nil
    nil)
  (values inst-next mapping-table segment-offset self-value))

(definst-method (phase-3a-analyze-instruction return)
		(last-instruction mapping-table segment-offset self-value)
  (declare (ignore last-instruction mapping-table segment-offset self-value))
  nil)

(definst-method (phase-3a-analyze-instruction start-catch)
		(last-instruction mapping-table segment-offset self-value)
  (let ((tag (catch-internal-tag start-catch-pframe)))
    (when tag
      ;; For now, we just assume that things are in an unknown state when the catch
      ;; is exited.  We could check to see if anyone inside the body changes the
      ;; state.
      (phase-3a-analyze-instructions tag last-instruction nil nil nil)))
  (values inst-next mapping-table segment-offset self-value))

(definst-method (phase-3a-analyze-instruction start-unwind-protect)
		(last-instruction mapping-table segment-offset self-value)
  (let ((tag start-unwind-protect-handler))
    ;; For now, we just assume that things are in an unknown state when the catch
    ;; is exited.  We could check to see if anyone inside the body changes the
    ;; state.
    (phase-3a-analyze-instructions tag last-instruction nil nil nil))
  (values inst-next mapping-table segment-offset self-value))

(definst-method (phase-3a-analyze-instruction end-catch)
		(last-instruction mapping-table segment-offset self-value)
  (if (eq 'unwind (catch-or-unwind end-catch-pframe))
      ;; For now, we just assume that things are in an unknown state when the unwind-protect
      ;; is exited.  We could check to see if anyone inside the body changes the state.
      (values inst-next nil nil nil)
      (values inst-next mapping-table segment-offset self-value)))

(definst-method (phase-3a-analyze-instruction popj)
		(last-instruction mapping-table segment-offset self-value)
  (declare (ignore last-instruction mapping-table segment-offset self-value))
  nil)

(definst-method (phase-3a-analyze-instruction tag)
		(last-instruction mapping-table segment-offset self-value)
  (declare (ignore last-instruction))
  ;; If our variable values duplicate existing values, then we stop here.  Otherwise,
  ;; push onward.
  (let ((state (list mapping-table segment-offset self-value)))
    (when (cl:member state tag-states :test #'cl:equal)
      (return-from phase-3a-analyze-instruction nil))
    (push state tag-states)
    (values inst-next mapping-table segment-offset self-value)))

(definst-method (phase-3a-analyze-instruction block-read-test)
		(last-instruction mapping-table segment-offset self-value)
  (phase-3a-analyze-instructions block-read-test-tag last-instruction nil nil nil)
  (values inst-next mapping-table segment-offset self-value))

(definst-method (phase-3a-analyze-instruction ensure-mapping-information)
		(last-instruction mapping-table segment-offset self-value)
  (declare (ignore last-instruction))
  (cl:pushnew (list mapping-table segment-offset)
	      ensure-mapping-information-previous-mapping-tables
	      :test #'(lambda (x y)
			(and (eq (first x) (first y))
			     (eql (second x) (second y)))))
  (cl:pushnew self-value ensure-mapping-information-previous-selfs)
  (values inst-next
	  ensure-mapping-information-mapping-table
	  ensure-mapping-information-segment
	  ensure-mapping-information-self))

(definst-method (phase-3a-analyze-instruction call)
		(last-instruction mapping-table segment-offset self-value)
  (when (and (eq (function-type call-function) 'reference)
	     (eq (function-spec call-function) '%dispatch-elt))
    (dolist (tag (push-pc-array-tags *pc-array*))
      (phase-3a-analyze-instructions
	tag last-instruction mapping-table segment-offset self-value))
    (return-from phase-3a-analyze-instruction nil))
  (values inst-next mapping-table segment-offset self-value))
