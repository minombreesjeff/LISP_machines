;;; -*- Mode: Lisp; Package: compiler; Lowercase: T; Base: 8 -*-
;;; This file is >llc>inner.
;;; This file contains parts of the compiler needed early on in system building
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun add-transformer (victim name &rest intos)
  (push* name (get victim 'transformers))
  (when intos
    (let ((opts (get victim 'optimized-into)))
      (dolist (into intos)
	(push* into opts))
      (setf (get victim 'optimized-into) opts))))

(defun delete-transformer-internal (victim name intos)
  (setf (get victim 'transformers) (delq name (get victim 'transformers)))
  (when intos
    (let ((opts (get victim 'optimized-into)))
      (dolist (into intos)
	(setq opts (delq into opts)))
      (setf (get victim 'optimized-into) opts))))

;Called both by DEFOPTIMIZER and by ADD-OPTIMIZER (which is in the manual)
(defun add-optimizer-internal (victim name intos)
  (push* name (si:function-spec-get victim 'optimizers))
  (when intos
    (let ((opts (si:function-spec-get victim 'optimized-into)))
      (dolist (into intos)
	(push* into opts))
      (setf (si:function-spec-get victim 'optimized-into) opts))))

(defun delete-optimizer-internal (victim name intos)
  (setf (si:function-spec-get victim 'optimizers)
	(delq name (si:function-spec-get victim 'optimizers)))
  (when intos
    (let ((opts (si:function-spec-get victim 'optimized-into)))
      (dolist (into intos)
	(setq opts (delq into opts)))
      (setf (si:function-spec-get victim 'optimized-into) opts))))

;;;
;;;	Called by both DEFINE-COMPILE-ONLY-OPTIMIZER and ADD-COMPILE-ONLY-OPTIMIZER.
;;;
(defun add-compile-only-optimizer-internal (victim name intos)
  (push* name (si:function-spec-get victim 'compile-only-optimizers))
  (when intos
    (let ((opts (si:function-spec-get victim 'optimized-into)))
      (dolist (into intos)
	(push* into opts))
      (setf (si:function-spec-get victim 'optimized-into) opts))))

(defun delete-compile-only-optimizer-internal (victim name intos)
  (setf (si:function-spec-get victim 'compile-only-optimizers)
	(delq name (si:function-spec-get victim 'compile-only-optimizers)))
  (when intos
    (let ((opts (si:function-spec-get victim 'optimized-into)))
      (dolist (into intos)
	(setq opts (delq into opts)))
      (setf (si:function-spec-get victim 'optimized-into) opts))))

(defun add-peep-hole-internal (victim name)
  (push* name (get victim 'peep-hole-optimizers)))

(defun delete-peep-hole-internal (victim name)
  (setf (get victim 'peep-hole-optimizers) (delq name (get victim 'peep-hole-optimizers))))


;; True if the form, which has already been optimized, is a constant.
;; Also called by the debugger & flavors, so must be loaded early.
;; constant-form-p and constant-evaluator must agree on what is a constant form.
(defun constant-form-p (form)
  (if (atom form)
      (or (not (symbolp form))
	  (compiler:self-evaluating-symbol-p form)
	  (multiple-value-bind (constant-p value)
	      (lt:named-constant-p form *interpreter-lexical-environment*)
	    (and constant-p
		 (or (not (cl:consp value))
		     (not (eq (first value) compiler:eval-at-load-time-marker))))))
      (selectq (car form)
	((quote)
	 ;; this kludge should be removed when ANSI CL is adopted
	 (let ((val (second form)))
	   (not (and (not (atom val)) (eq (first val) compiler:eval-at-load-time-marker)))))
	((values)
	 (loop for value in (cdr form)
	       always (constant-form-p value))))))

;; This must agree with constant-form-p
(defun constant-evaluator (form)
  (if (atom form)
      (cond ((not (symbolp form))
	     form)
	    ((compiler:self-evaluating-symbol-p form)
	     form)
	    (t
	     (multiple-value-bind (constant-p value)
		 (lt:named-constant-p form *interpreter-lexical-environment*)
	       (if constant-p
		   value
		   (error "Symbol ~S does not have a value." form)))))
      (selectq (first form)
	(quote
	 (second form))
	(values
	 (apply #'values		 
		(loop for value in (cdr form)
		      collect (constant-evaluator value))))
	(otherwise
	 (error "Constant evaluator called on ~S" form)))))

(defun make-obsolete-1 (spec reason &optional (type 'defun))
  (let ((function (get type 'make-obsolete)))
    (if function
	(funcall function spec reason type)
	(ferror "Don't know how to make obsolete a ~S." type))))

(defprop defun make-defun-obsolete make-obsolete)
(defun make-defun-obsolete (symbol reason ignore)
  (add-style-checker 'make-obsolete symbol 'warn-about-obsolete-defun)
  (putprop symbol (cons reason fdefine-file-pathname) 'obsolete-defun))

;; Making a message obsolete -- put a message-style-checker on the obsolete message and a
;; separate property on the message giving the reason.

(defun make-message-obsolete (message-name reason)
  (putprop message-name 'warn-about-obsolete-defmessage 'message-style-checker)
  (putprop message-name (cons reason fdefine-file-pathname) 'obsolete-message))

(defun warn-about-obsolete-defmessage (form)
  (let* ((message (if (keywordp (caddr form)) (caddr form) (cadr (caddr form))))
	 (reason (car (get message 'obsolete-message))))
    (warn '(:obsolete t) "~S is an obsolete message~:[; ~A.~;.~%~A~]"
	  message (string-search-set '(#\newline #\.) reason) reason)))

;;; This technology could be used to remove multiple definition warnings for optimizers!
(si:define-function-spec-handler compiler:style-checker
				 (function function-spec &optional arg1 arg2)
  (scl:destructuring-bind (ignore &optional checker-name checked-function &rest ignore)
     function-spec
    (selectq function
      (sys:validate-function-spec (and (= (length function-spec) 3)
				       (symbolp checked-function)
				       checker-name))
      (sys:fdefine
       (let* ((existing-list (get checked-function 'compiler:style-checker))
	      (existing-item (and (listp existing-list)	;protect from old forms.
				  (assoc checker-name existing-list))))
	 (if existing-item
	     (setf (second existing-item) arg1)
	     (unless (listp existing-list) (setq existing-list nil))
	     (push `(,checker-name ,arg1) existing-list))
	 (setf (get checked-function 'compiler:style-checker) existing-list)))
      ((sys:fdefinition sys:fdefinedp)
       (cadr (assoc checker-name
		    (let ((existing-list
			    (get checked-function 'compiler:style-checker)))
		      (and (listp existing-list) existing-list)))))
      ;;Compiler doesn't need this by special dispensation.
      (sys:fdefinition-location		
       (error "Style checkers have no fixed location.
It is not possible to get the FDEFINITION-LOCATION of ~S." function-spec))
      (sys:fundefine
       (let* ((existing-list (get checked-function 'compiler:style-checker))
	      (existing-item (and (listp existing-list)	;protect from old items.
				  (assoc checker-name existing-list))))
	 (when existing-item
	   (setf (get checked-function 'compiler:style-checker)
		 (delete existing-item existing-list)))))
      (otherwise (si:function-spec-default-handler function function-spec arg1 arg2)))))

(defun add-style-checker (checker-name checked-function function)
  (fdefine `(compiler:style-checker ,checker-name ,checked-function) function))

(defun delete-style-checker (checker-name checked-function)
  (fundefine `(compiler:style-checker ,checker-name ,checked-function)))

;; This is neeed by LOAD-COMPILED-FUNCTION in the cold load

;;; CCA is used for getting fdefinition hints when all else fails,
;;; it can also be the compiled-function object to save having to
;;; compute the cca all the time when it isn't normally needed.
(defun compiler:disassemble-decode-locative (cell &optional cca index &aux temp boundp)
  (declare (values symbol cell-type))
  (let ((region (%region-number cell)))
    ;; If cell points into the middle of a structure, find the real cell.
    (when region
      (let ((dtp (%p-data-type cell)))
	(unless (or (= dtp dtp-header-p)
		    (= dtp dtp-header-i)
		    (= dtp dtp-header-forward))
	  (setq cell (follow-cell-forwarding cell nil))
	  ;; Recalculate the region number in this case.
	  (setq region (%region-number cell)))))
    ;; Look out for stacks.
    (when (and (not (null region))
	       (ldb-test %%region-stack (region-bits region)))
      (return-from compiler:disassemble-decode-locative
	(values cell :random)))
    ;; Find the containing structure
    (let ((header (cond ((null region) nil)
			;; This optimization is here because
			;; %find-structure-header takes a long time in
			;; the big system symbol cell table.
			((and (si:%pointer- cell si:*system-symbol-cell-table-tail*)
			      (si:%pointer-< si:*system-symbol-cell-table* cell))
			 si:*system-symbol-cell-table*)
			(t (%find-structure-header cell)))))
      (cond ((and (typep header :compiled-function)
		  (eq cell (locf (cca-function-cell (sys:compiled-function-cca header)))))
	     ;; (si:compiled-function-name header) is too slow here...
	     (values (car (cca-extra-info (compiled-function-cca header)))
		     :function))

	    ((and (arrayp header)
		  (eq (named-structure-p header) 'si:forwarded-symbol-cell-table)
		  (not (minusp (setq temp (%pointer-difference cell (aloc header 0))))))
	     (let ((symbol (aref (si:forwarded-symbol-cell-table-back-pointers header) temp)))
	       (cond ((nsymbolp symbol)		;Function-spec
		      (values symbol :function))
		     ((eq (follow-cell-forwarding (value-cell-location symbol) nil) cell)
		      (values symbol :variable))
		     ((eq (follow-cell-forwarding (function-cell-location symbol) nil) cell)
		      (values symbol :function))
		     (t (values cell :random)))))

	    ((and (progn #+3600 (or (%pointer-lessp cell 1000)
				    (%pointer-lessp a-memory-virtual-address cell))
			 #+imach (or (null region)
				     (eq region wired-control-tables)))
		  (loop for (area low high . data) in *magic-locations*
			do (ignore area)
			when (and (si:%pointer- low cell)
				  (si:%pointer-< cell high))
			  return (setq temp (nth (%pointer-difference cell low) data))))
	     (values (second temp) (first temp)))

	    ((symbolp header)
	     (cond ((eq (locf (symbol-value-cell header)) cell)
		    (values header :variable))
		   ((eq (locf (symbol-function-cell header)) cell)
		    (values header :function))
		   (t (values cell :random))))
	    #+3600
	    ((when cca
	       (when (typep cca :compiled-function)
		 (setq cca (compiled-function-cca cca)))
	       (or index
		   (setq index (loop for i below (cca-n-objects cca)
				     when (eq (cca-object cca i) cell)
				       return i))))
	     (let* ((hints (loop for entry in (cdr (cca-extra-info cca))
				 when (and (listp entry)
					   (eq (car entry) :fdefinition-location-hints))
				   return (cdr entry)))
		    (hint (car (rassq index hints))))
	       (if hint (values hint :function)
		   (values cell :random))))
	    #+imach
	    ((when cca
	       (when (typep cca :compiled-function)
		 (setq cca (compiled-function-cca cca)))
	       (or index
		   (loop for i from 0 below (cca-total-size cca)
			 for pointer
			     first (%pointer-plus cca (defstorage-size compiled-function))
			     then (%pointer-plus pointer 1)
			 doing
		     (when (= (%pointer-difference
				(%memory-read pointer :cycle-type %memory-scavenge)
				cell)
			      0)
		       (setq index (* i 2))
		       (return t))))
	       ;; Can't use CL:ASSOC here because of compressed debug info.
	       (loop for (fspec . indices) in (loop for entry in (cdr (cca-extra-info cca))
						    when (and (listp entry)
							      (eq (car entry)
								  :fdefinition-location-hints))
						      return (cdr entry))
		     doing
		 (when (cl:member index indices)
		   (return-from compiler:disassemble-decode-locative
		     (values fspec :function))))))
	    ((and (listp header)			;Could be a Flavor method-holder
		  (listp (cdr header))
		  (listp (cddr header))
		  (null (cdddr header))
		  (eq cell (locf (flavor::method-holder-definition header)))
		  (listp (car header))
		  (validate-function-spec (car header)))
	     (values (car header) :function))
	    ((instancep header)
	     (clos-internals::decode-slot-locative header cell))
	    (t ;; This is condition-case because I can't do
	       ;; (%memory-read %memory-data-write) without simulating it
	       ;; in macrocode.
	      (condition-case ()
		   (setq boundp (location-boundp cell))
		 (error (values cell :random))
		 (:no-error
		   (cond ((and boundp
			       (setq temp (location-contents cell))
			       (functionp temp)
			       (setq temp (function-name temp))
			       (sys:validate-function-spec temp)
			       (si:location-is-fdefinition-location-p temp cell))
			  (values temp :function))
			 
			 ;; Some other sort of unbound cell, 
			 ;; DTP-NULL hopefully points to a hint.
			 ((and (not boundp)
			       (without-interrupts
				 (setq temp (%find-structure-header (%p-pointer cell))))
			       (validate-function-spec temp)
			       (si:location-is-fdefinition-location-p temp cell))
			  (values temp :function))
			 
			 ;; Give up.
			 (t (values cell :random))))))))))
