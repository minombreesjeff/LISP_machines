;;;-*- Syntax: Zetalisp; Mode: LISP; Package: COMPILER; Base: 8-*-
;;; New compile driver
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;;--- The INITIALIZE-P keyword is interim version control support for 
;;;    compiling multiple patch sections.
;;;--- It should be replaced by a keyword that supplies the state information
;;;    for the patch section.

(DEFUN COMPILE-FROM-STREAM (INPUT-STREAM GENERIC-PATHNAME *COMPILE-FUNCTION*
			    ADDITIONAL-BINDINGS &KEY ((INITIALIZE-P INITIALIZE-P) T))
  (MULTIPLE-VALUE-BIND (COMPILER-VARS COMPILER-VALS)
      (GET-BINDINGS *COMPILER*)
    (PROGV COMPILER-VARS COMPILER-VALS
      ;; The next two variables have to be setup before entering compiler warnings context.
      ;; Override the generic pathname
      (LET* ((FUTURE-COMMON-LISP:*COMPILE-FILE-PATHNAME*
	       (SEND-IF-HANDLES INPUT-STREAM :PATHNAME))
	     (FUTURE-COMMON-LISP:*COMPILE-FILE-TRUENAME*
	       (SEND-IF-HANDLES INPUT-STREAM :TRUENAME))
	     (FDEFINE-FILE-PATHNAME
	       (AND FUTURE-COMMON-LISP:*COMPILE-FILE-PATHNAME*
		    (SEND FUTURE-COMMON-LISP:*COMPILE-FILE-PATHNAME* ':GENERIC-PATHNAME)))
	     (SI:PATCH-SOURCE-FILE-PATHNAME NIL)
	     (COMPILING-WHOLE-FILE-P (COMPILING-WHOLE-FILE-P INPUT-STREAM)))
	(WHEN (AND COMPILING-WHOLE-FILE-P INITIALIZE-P)
	  (RESET-FILE-WARNINGS FDEFINE-FILE-PATHNAME))
	;; Bind all the variables required by the file property list
	(MULTIPLE-VALUE-BIND (FVARS FVALS)
	    (FS:FILE-ATTRIBUTE-BINDINGS
	      GENERIC-PATHNAME
	      :ADDITIONAL-ATTRIBUTES ADDITIONAL-BINDINGS)
	  (STANDARD-VALUE-PROGV FVARS FVALS
	    ;; Having bound the variables, process the file
	    (LET* ((QC-FILE-IN-PROGRESS (FUNCALL *COMPILE-FUNCTION* ':COMPILER-TYPE))
		   (QC-FILE-LOAD-FLAG (FUNCALL *COMPILE-FUNCTION* ':TO-CORE-P))
		   (UNDO-DECLARATIONS-FLAG (NOT QC-FILE-LOAD-FLAG))
		   (LOCAL-DECLARATIONS NIL)
		   (OPEN-CODE-MAP-SWITCH OPEN-CODE-MAP-SWITCH)
		   (RUN-IN-MACLISP-SWITCH RUN-IN-MACLISP-SWITCH)
		   (OBSOLETE-FUNCTION-WARNING-SWITCH OBSOLETE-FUNCTION-WARNING-SWITCH)
		   (ALL-SPECIAL-SWITCH ALL-SPECIAL-SWITCH)
		   (QC-FILE-OLD-DEFAULT-CONS-AREA DEFAULT-CONS-AREA))
	      (COMPILER-WARNINGS-CONTEXT-BIND
		(UNWIND-PROTECT
		    (PROGN
		      (WHEN INITIALIZE-P
			(FUNCALL *COMPILE-FUNCTION* ':INITIALIZE INPUT-STREAM
				 GENERIC-PATHNAME))
		      (PROCESS-FORMS-FROM-STREAM INPUT-STREAM 'COMPILE-FROM-STREAM-1
						 (FUNCALL *COMPILE-FUNCTION* ':FOR-FILE)
						 (FUNCALL *COMPILE-FUNCTION* ':CONS-AREA)))
		  (FUNCALL *COMPILE-FUNCTION* ':FINALIZE
			   INPUT-STREAM GENERIC-PATHNAME))))))))))

;;; This is the normal *COMPILE-FORM-FUNCTION*.  Its job is just to call
;;; *COMPILE-FUNCTION*.  COMPILE-TIME-P will be :FORCE for (eval-when (compile) ...).
;;; This is to turn off UNDO-DECLARATIONS-FLAG.
(DEFUN COMPILE-FORM-FUNCTION (FORM COMPILE-TIME-P LOAD-TIME-P &OPTIONAL ENVIRONMENT)
  (WHEN COMPILE-TIME-P
    (LET ((DEFAULT-CONS-AREA QC-FILE-OLD-DEFAULT-CONS-AREA)
	  (UNDO-DECLARATIONS-FLAG (AND UNDO-DECLARATIONS-FLAG
				       (NEQ COMPILE-TIME-P ':FORCE))))
      (LET-IF LOAD-TIME-P
	      ;; If we are about to load the form, too, then don't
	      ;; bother recording any who-calls information here
	      ((SI:*WHO-CALLS-MODE* :DISABLED))
	(FUNCALL *COMPILE-FUNCTION* ':EVAL-FORM FORM ENVIRONMENT))))
  (WHEN LOAD-TIME-P (FUNCALL *COMPILE-FUNCTION* :DUMP-FORM FORM ENVIRONMENT)))

;;; Used to compile (function (lambda ...)) kinds of things in a top level form.
(DEFUN COMPILE-FUNCTION-FUNCTION (FUNCTION ENVIRONMENT)
  (FUNCALL *COMPILE-FUNCTION* :COMPILE-LAMBDA-EXPRESSION FUNCTION ENVIRONMENT))

;;; This is the normal function for looking at each form read from the file and calling
;;; *COMPILE-FORM-FUNCTION* on the sub-forms of it.
;;; COMPILE-TIME-TOO means override the normal cases that eval at compile time.  It is
;;; used for recursive calls under (EVAL-WHEN (COMPILE LOAD) ...).
(DEFUN COMPILE-FROM-STREAM-1 (FORM &OPTIONAL (COMPILE-TIME-TOO NIL) ENVIRONMENT)
  (CATCH-ERROR-RESTART (SYS:ERROR "Skip compiling form ~2,2\COMPILER:SHORT-S-FORMAT\" FORM)
    (LET ((DEFAULT-CONS-AREA (FUNCALL *COMPILE-FUNCTION* ':CONS-AREA)))
      (LET ((ERROR-MESSAGE-HOOK
	      #'(LAMBDA ()
		  (DECLARE (SYS:DOWNWARD-FUNCTION))
		  (FORMAT T "~&While processing ~V,V\COMPILER:SHORT-S-FORMAT\"
			  DBG:*ERROR-MESSAGE-PRINLEVEL*
			  DBG:*ERROR-MESSAGE-PRINLENGTH*
			  FORM))))
	(SETQ FORM (FUNCALL *COMPILE-FUNCTION* ':MACRO-EXPAND FORM ENVIRONMENT)))
      (WHEN (LISTP FORM)			;Ignore atoms at top-level
	(LET ((FUNCTION (FIRST FORM)))
	  (FLET ((PROCESS-BODY (BODY COMPILE-TIME-TOO ENVIRONMENT)
		   (MAPC #'(LAMBDA (FORM)
			     (COMPILE-FROM-STREAM-1 FORM COMPILE-TIME-TOO ENVIRONMENT))
			 BODY)))
	    (SELECTQ FUNCTION
	      ((QUOTE))				;and quoted constants e.g. 'COMPILE
	      ((PROGN)
	       (PROCESS-BODY (CDR FORM) COMPILE-TIME-TOO ENVIRONMENT))
	      ((MACROLET)
	       (WHEN (SI:CHECK-FUNCTION-LET-SYNTAX FORM)
		 (SI:WITH-INTERPRETER-ENVIRONMENT
		   (NEW-ENVIRONMENT ENVIRONMENT (POP ENVIRONMENT) (POP ENVIRONMENT)
				    (POP ENVIRONMENT) (POP ENVIRONMENT) (POP ENVIRONMENT))
		   (MAPC #'(LAMBDA (DEF)
			     (PUSH (SI:DIGEST-MACROLET-MACRO DEF NIL)
				   (SI:ENV-FUNCTIONS NEW-ENVIRONMENT)))
			 (SECOND FORM))
		   (PROCESS-BODY (CDDR FORM) COMPILE-TIME-TOO NEW-ENVIRONMENT))))
	      ((FUTURE-COMMON-LISP:MACROLET)
	       (WHEN (SI:CHECK-FUNCTION-LET-SYNTAX FORM)
		 (LET ((ENV ENVIRONMENT))
		   (SI:WITH-INTERPRETER-ENVIRONMENT
		     (NEW-ENVIRONMENT ENVIRONMENT (POP ENVIRONMENT) (POP ENVIRONMENT)
				      (POP ENVIRONMENT) (POP ENVIRONMENT) (POP ENVIRONMENT))
		     (MAPC #'(LAMBDA (DEF)
			       (PUSH (SI:DIGEST-MACROLET-MACRO DEF ENV)
				     (SI:ENV-FUNCTIONS NEW-ENVIRONMENT)))
			   (SECOND FORM))
		     (PROCESS-BODY (CDDR FORM) COMPILE-TIME-TOO NEW-ENVIRONMENT)))))
	      ((FUTURE-COMMON-LISP:SYMBOL-MACROLET)
	       (WHEN (SI:CHECK-VALUE-LET-SYNTAX FORM)
		 (SI:WITH-INTERPRETER-ENVIRONMENT
		   (NEW-ENVIRONMENT ENVIRONMENT (POP ENVIRONMENT) (POP ENVIRONMENT)
				    (POP ENVIRONMENT) (POP ENVIRONMENT) (POP ENVIRONMENT))
		   (MAPC #'(LAMBDA (BINDING)
			     (LET ((VAR (POP BINDING)))
			       (PUSH `(,VAR ,(POP BINDING) T)
				     (SI:ENV-VARIABLES NEW-ENVIRONMENT))))
			 (SECOND FORM))
		   (PROCESS-BODY (CDDR FORM) COMPILE-TIME-TOO NEW-ENVIRONMENT))))
	      ((EVAL-WHEN)
	       (DESTRUCTURING-BIND (IGNORE TIMES &REST FORMS) FORM
		 (MULTIPLE-VALUE-BIND (COMPILE-P LOAD-P EVAL-P)
		     (SI:CHECK-EVAL-WHEN-TIMES TIMES :ERROR-FUNCTION #'WARN)
		   (IF (FUNCALL *COMPILE-FUNCTION* :TO-CORE-P)
		       (WHEN EVAL-P
			 (PROCESS-BODY FORMS COMPILE-TIME-TOO ENVIRONMENT))
		       (LET ((COMPILE-P (OR COMPILE-P (AND COMPILE-TIME-TOO EVAL-P))))
			 (COND (LOAD-P
				(PROCESS-BODY FORMS (AND COMPILE-P :FORCE) ENVIRONMENT))
			       (COMPILE-P
				(DOLIST (FORM FORMS)
				  (FUNCALL *COMPILE-FORM-FUNCTION* FORM :FORCE NIL
					   ENVIRONMENT)))))))))
	      ((DECLARE)
	       (DOLIST (FORM (CDR FORM))
		 (FUNCALL *COMPILE-FORM-FUNCTION* FORM (OR COMPILE-TIME-TOO T)
			  ;; (DECLARE (SPECIAL ... has load-time action as well.
			  ;; All other DECLARE's do not.
			  (MEMQ (CAR FORM) '(SPECIAL ZL:UNSPECIAL))
			  ENVIRONMENT)))
	      ((COMPILER-LET)
	       (COMPILER-LET-INTERNAL (CADR FORM) (CDDR FORM)
				      #'COMPILE-FROM-STREAM-1 COMPILE-TIME-TOO ENVIRONMENT))
	      ((MULTIPLE-DEFINITION)
	       (DESTRUCTURING-BIND (NAME TYPE . BODY) (CDR FORM)
		 (LET ((NAME-VALID (AND (NOT (NULL NAME))
					(OR (SYMBOLP NAME)
					    (AND (LISTP NAME) (NEQ (CAR NAME) 'QUOTE)))))
		       (TYPE-VALID (AND (NOT (NULL TYPE)) (SYMBOLP TYPE))))
		   (UNLESS (AND NAME-VALID TYPE-VALID)
		     (WARN "(~S ~S ~S ...) is invalid because~@
			  ~:[~S is not valid as a definition name~;~*~]~
			  ~:[~&~S is not valid as a definition type~;~*~]"
			   'MULTIPLE-DEFINITION NAME TYPE NAME-VALID NAME TYPE-VALID TYPE)))
		 (LET* ((COMPILED-BODY NIL)
			(COMPILE-FUNCTION *COMPILE-FUNCTION*)
			(*COMPILE-FUNCTION*
			  (LAMBDA (OPERATION &REST ARGS)
			    (DECLARE (SYS:DOWNWARD-FUNCTION))
			    (SELECTQ OPERATION
			      (:DUMP-FORM
			       (PUSH (FUNCALL COMPILE-FUNCTION :OPTIMIZE-TOP-LEVEL-FORM
					      (FIRST ARGS) (SECOND ARGS))
				     COMPILED-BODY))
			      (OTHERWISE (CL:APPLY COMPILE-FUNCTION OPERATION ARGS)))))
			(LOCAL-DECLARATIONS `((FUNCTION-PARENT ,NAME ,TYPE)
					      ,@LOCAL-DECLARATIONS)))
		   (PROCESS-BODY BODY COMPILE-TIME-TOO ENVIRONMENT)
		   (FUNCALL COMPILE-FUNCTION :DUMP-FORM
			    `(LOAD-MULTIPLE-DEFINITION
			       ',NAME ',TYPE ',(NREVERSE COMPILED-BODY) NIL)
			    ENVIRONMENT))))
	      (OTHERWISE
	       (LET ((TEM (AND (SYMBOLP FUNCTION) (GET FUNCTION 'TOP-LEVEL-FORM))))
		 (FUNCALL *COMPILE-FORM-FUNCTION*
			  (IF TEM (FUNCALL TEM FORM) FORM)
			  COMPILE-TIME-TOO T ENVIRONMENT))))))))))

(FORMAT:DEFFORMAT SHORT-S-FORMAT (:ONE-ARG) (ARG PARAMS)
  (LET ((PRINLEVEL (OR (FIRST PARAMS) PRINLEVEL))
	(PRINLENGTH (OR (SECOND PARAMS) PRINLENGTH)))
    (FORMAT FORMAT:*FORMAT-OUTPUT* "~S" ARG)))

;;; FOR-FILE means that forms are being sent to a file and the #, macro should
;;; not eval at read time.
(DEFUN PROCESS-FORMS-FROM-STREAM (INPUT-STREAM PROCESS-FUNCTION
				  &OPTIONAL FOR-FILE (AREA-FOR-READING READ-AREA))
  (IF *READ-THEN-PROCESS-FLAG*
      (LET ((FORM-LIST NIL))
	(DO ((EOF (NCONS NIL))
	     (FORM) (STATE NIL)
	     (READ-AREA AREA-FOR-READING)
	     (QC-FILE-READ-IN-PROGRESS FOR-FILE))
	    (NIL)
	  (MULTIPLE-VALUE (FORM STATE)
	    (FUNCALL *COMPILE-FUNCTION* ':READ INPUT-STREAM EOF STATE))
	  (AND (EQ FORM EOF) (RETURN))
	  (SETQ FORM-LIST (CONS-IN-AREA FORM FORM-LIST READ-AREA)))
	(CLOSE INPUT-STREAM)			;Mainly for the sake of the who-line
	;; Now scan down the list compiling.
	(DOLIST (FORM (NREVERSE FORM-LIST))
	  (FUNCALL *COMPILE-FUNCTION* :PROCESS-FORM PROCESS-FUNCTION FORM)))
      (DO ((EOF (NCONS NIL))
	   (FORM) (STATE NIL))
	  (NIL)
	(LET ((READ-AREA AREA-FOR-READING)
	      (QC-FILE-READ-IN-PROGRESS FOR-FILE))
	  (MULTIPLE-VALUE (FORM STATE)
	    (FUNCALL *COMPILE-FUNCTION* ':READ INPUT-STREAM EOF STATE)))
	(AND (EQ FORM EOF) (RETURN))
	(FUNCALL *COMPILE-FUNCTION* :PROCESS-FORM PROCESS-FUNCTION FORM)))
  NIL)

;;; The definition of COMPILER:PACKAGE-NAME-FOR-SYNTAX has moved to 
;;; SYS:SYS;LISP-SYNTAX.LISP.  (That function is now exported from package SYSTEM,
;;; and inherited by package COMPILER.)
;;; -kmp 5-Oct-89

(DEFUN COMPUTE-ATTRIBUTE-LIST (INPUT-STREAM OUTPUT-STREAM GENERIC-PATHNAME &AUX DECL PKG)
  ;; Copy all suitable file properties into the fasl file
  ;; Suitable means those that are lambda-bound when you read in a file.
  ;; or which are otherwise marked as belonging in the bin file.
  (LET* ((PATH-PLIST (SEND GENERIC-PATHNAME :PLIST))
	 (LIST (COPYLIST PATH-PLIST))
	 (PLIST (LOCF LIST))
	 (MODE (GET PLIST :MODE)))
    ;; Remove unsuitable properties
    (DO ((L PLIST))
	((NULL (CDR L)))
      (IF (NOT (NULL (GETL (CADR L) '(FS:FILE-ATTRIBUTE-BINDINGS
				       FILE-ATTRIBUTE-FOR-BIN-FILE))))
	  (SETQ L (CDDR L))
	  (RPLACD L (CDDDR L))))
    ;; Make sure the package property is really the package compiled in
    ;; Must load QFASL file into same package compiled in
    (IF (SETQ DECL (GET PLIST :PACKAGE))
        (SETQ PKG (fs:find-package-for-syntax decl (get plist :syntax)))
	(SETQ PKG PACKAGE))
    ;; This file may have a declaration for this package.
    ;; If so, make sure it is fasdumped.
    (IF (AND DECL (EQ PKG PACKAGE))
	(PUTPROP PLIST DECL :PACKAGE)
	(PUTPROP PLIST
		 (INTERN
		   (COMPILER:PACKAGE-NAME-FOR-SYNTAX PACKAGE (GET PLIST :SYNTAX))
		   PKG-KEYWORD-PACKAGE)
		 :PACKAGE))
    ;; If the source file mode is not :lisp, dump it
    (WHEN (NEQ MODE :LISP)
      (PUTPROP PLIST MODE :MODE))
    (WHEN INPUT-STREAM
      (LET ((TRUENAME (SEND INPUT-STREAM :SEND-IF-HANDLES :TRUENAME)))
	(WHEN TRUENAME
	  (SETF (GET PLIST :BINARY-SOURCE-FILE-ORIGINAL-TRUENAME) (STRING TRUENAME))
	  (LET ((PATHNAME (SEND INPUT-STREAM :PATHNAME)))
	    (UNLESS (AND (NUMBERP (SEND PATHNAME :VERSION))
			 (OR (NULL (FS:PATHNAME-VC-BRANCH PATHNAME))
			     (NUMBERP (FS:PATHNAME-VC-BRANCH PATHNAME))))
	      (SETF PATHNAME (SEND PATHNAME :NEW-DEFAULT-PATHNAME
				   :VERSION (SEND TRUENAME :VERSION)
				   :VC-VERSION (SEND TRUENAME :VC-VERSION))))
	    (SETF (GET PLIST :QFASL-SOURCE-FILE-UNIQUE-ID) PATHNAME)))))
    ;; If a file is being compiled across directories, remember where the
    ;; source really came from.
    (LET ((OUTFILE (SEND OUTPUT-STREAM :PATHNAME)))
      (SETQ OUTFILE (SEND OUTFILE :GENERIC-PATHNAME))
      (AND (NEQ OUTFILE FDEFINE-FILE-PATHNAME)
	   (PUTPROP PLIST FDEFINE-FILE-PATHNAME :SOURCE-FILE-GENERIC-PATHNAME)))
    (MULTIPLE-VALUE-BIND (MAJOR MINOR)
	(SCT:GET-SYSTEM-VERSION "System")
      (PUTPROP PLIST (LIST USER-ID (STRING SI:LOCAL-HOST) (TIME:GET-UNIVERSAL-TIME)
			   MAJOR MINOR)
	       :COMPILE-DATA))
    LIST))

;Process a DEFUN arglist, converting old Maclisp types of function
;such as Fexprs, Lexprs, etc. into Lisp-machine style definitions.
;This must be done before the name of the function can be determined with certainty.
;Also convert old &QUOTE-defined special forms to use DEFINE-SPECIAL-FORM instead.
;Actually, the argument is the arglist of the DEFUN, sans the DEFUN itself.
;The value is an entire form, whose car will be DEFUN or MACRO.
;The cdr of the value must be EQ to the argument, exp, if nothing has to be done.
(DEFUN DEFUN-COMPATIBILITY (EXP &KEY WARN-IF-OBSOLETE)
  (LET ((TYPE 'EXPR)
	(NAME (FIRST EXP))
	(LAMBDA-LIST (SECOND EXP))
	(BODY (CDDR EXP)))
    ;; Deal with various oddball name syntaxes
    (COND ((LISTP NAME)				;Convert function specs
	   (IF (AND (= (LENGTH NAME) 2)		;(DEFUN (FOO MACRO) ...)
		    (EQ (SECOND NAME) 'MACRO))
	       (SETQ TYPE 'MACRO NAME (FIRST NAME))
	       (SETQ NAME (STANDARDIZE-FUNCTION-SPEC NAME))))
	  ((MEMQ LAMBDA-LIST '(FEXPR EXPR MACRO))	;Maclisp function types
	   (SETQ TYPE LAMBDA-LIST
		 LAMBDA-LIST (POP BODY)))
	  ((AND (MEMQ NAME '(FEXPR EXPR MACRO))	;Maclisp function types -- other syntax
		(NOT (CL:LISTP LAMBDA-LIST)))
	   (SETQ TYPE NAME
		 NAME LAMBDA-LIST
		 LAMBDA-LIST (POP BODY))))
    ;; Convert Maclisp FEXPRs and LEXPRs to Zetalisp
    (COND ((EQ TYPE 'FEXPR)
	   (SETQ LAMBDA-LIST `(&QUOTE &REST ,@LAMBDA-LIST)))
	  ((AND (EQ TYPE 'EXPR)
		(NOT (CL:LISTP LAMBDA-LIST)))
	   (SETQ LAMBDA-LIST `(&REST *LEXPR-ARGLIST*
				     &AUX (,LAMBDA-LIST (LENGTH *LEXPR-ARGLIST*))))))
    ;; Produce the appropriate defining form: DEFUN, MACRO, or DEFINE-SPECIAL-FORM
    (COND ((EQ TYPE 'MACRO)
	   (WHEN WARN-IF-OBSOLETE
	     (COMPILER:WARN `(:OBSOLETE T :FUNCTION ,NAME)
			    "MacLisp-style macro definitions are obsolete."))
	   `(MACRO ,NAME (,@LAMBDA-LIST IGNORE) ,@BODY))
	  ((MEMQ '&QUOTE LAMBDA-LIST)
	   (MULTIPLE-VALUE-BIND (DECLARATIONS BODY)
	       (SI:FIND-BODY-DECLARATIONS BODY NIL LAMBDA-LIST)
	     (LET ((MORE NIL))
	       (SETQ LAMBDA-LIST
		     (LOOP WITH EVAL = T WITH TYPE = NIL
			   FOR ITEM IN LAMBDA-LIST
			   WHEN (MEMQ ITEM '(&QUOTE &EVAL))
			     DO (SETQ EVAL (EQ ITEM '&EVAL))
			   ELSE COLLECT ITEM
				AND DO
		       (COND ((MEMQ ITEM LAMBDA-LIST-KEYWORDS)
			      (WHEN (MEMQ ITEM '(&OPTIONAL &REST &KEY &AUX))
				(SETQ TYPE ITEM)))
			     ((AND EVAL (NEQ TYPE '&AUX))
			      (WHEN (LISTP ITEM) (SETQ ITEM (CAR ITEM)))
			      (WHEN (LISTP ITEM) (SETQ ITEM (CAR ITEM)))
			      (PUSH (IF (EQ TYPE '&REST)
					`(SETQ ,ITEM (LOOP FOR FORM IN ,ITEM
							   COLLECT (EVAL FORM .ENV.)))
					`(SETQ ,ITEM (EVAL ,ITEM .ENV.)))
				    MORE)))))
	       (WHEN MORE
		 (SETQ LAMBDA-LIST `(&ENVIRONMENT .ENV. ,@LAMBDA-LIST)))
	       (SETQ BODY (NRECONC MORE BODY)))
	     (WHEN WARN-IF-OBSOLETE
	       (COMPILER:WARN `(:OBSOLETE T :FUNCTION ,NAME)
			      "Use of &QUOTE in lambda lists is obsolete.  Use a macro or special form instead."))
	     `(SI:DEFINE-SPECIAL-FORM ,NAME ,LAMBDA-LIST
		,@DECLARATIONS
		,@BODY)))
	  ((AND (EQ (FIRST EXP) NAME) (EQ (SECOND EXP) LAMBDA-LIST) (EQ (CDDR EXP) BODY))
	   (CONS 'DEFUN EXP))
	  (T (WHEN (AND WARN-IF-OBSOLETE
			;; Suppress messages about (DEFUN (FOO BAR) () ...)
			(NOT (AND (LISTP NAME)
				  (EQ (REST1 NAME) (FIRST EXP))
				  (EQ (SECOND EXP) LAMBDA-LIST)
				  (EQ (REST2 EXP) BODY))))
	       (COMPILER:WARN `(:OBSOLETE T :FUNCTION ,NAME)
			      "Use of MacLisp syntax in definitions is obsolete."))
	     `(DEFUN ,NAME ,LAMBDA-LIST ,@BODY)))))

;Functions for dealing with FILE-LOCAL-DECLARATIONS

(DEFUN FILE-DECLARE (THING DECLARATION VALUE)
  (UNLESS COMPILER-WARNINGS-CONTEXT		;Never give FILE-LOCAL-DECLARATIONS a
    (RETURN-FROM FILE-DECLARE NIL))		;global value, that really screws things up
  (OR FILE-LOCAL-DECLARATIONS
      (SETQ FILE-LOCAL-DECLARATIONS
	    (CL:MAKE-HASH-TABLE
	      :TEST #'CL:EQUAL
	      :AREA WORKING-STORAGE-AREA
	      :SIZE (IF COMPILING-WHOLE-FILE-P
			 (IF (VARIABLE-BOUNDP SCT:*SYSTEM*)
			     1000
			     100)
			 40)
	      :GROWTH-FACTOR 2.0s0)))
  (LET ((ALIST (SEND FILE-LOCAL-DECLARATIONS :GET-HASH THING)))
    (IF ALIST
	(LET ((ELEM (ASSQ DECLARATION ALIST)))
	  (IF ELEM
	      (LET ((PROP (ASSQ FDEFINE-FILE-PATHNAME (CDR ELEM))))
		(IF PROP
		    (SETF (SECOND PROP) VALUE)
		    (PUSH `(,FDEFINE-FILE-PATHNAME ,VALUE) (CDR ELEM))))
	      (SEND FILE-LOCAL-DECLARATIONS :PUT-HASH THING
		    (CONS `(,DECLARATION (,FDEFINE-FILE-PATHNAME ,VALUE)) ALIST))))
	(SEND FILE-LOCAL-DECLARATIONS :PUT-HASH THING
	      `((,DECLARATION (,FDEFINE-FILE-PATHNAME ,VALUE))))))) 

(DEFUN FILE-DECLARATION (THING DECLARATION)
  (DECLARE (VALUES VALUE FOUND))
  (AND FILE-LOCAL-DECLARATIONS
       (LET ((ELEM (ASSQ DECLARATION (SEND FILE-LOCAL-DECLARATIONS :GET-HASH THING))))
	 (AND ELEM (VALUES (SECOND (SECOND ELEM)) T)))))

;Returns ((generic-pathname value) (generic-pathname value)...)
(DEFUN FILE-DECLARATION-ALIST (THING DECLARATION)
  (AND FILE-LOCAL-DECLARATIONS
       (CDR (ASSQ DECLARATION (SEND FILE-LOCAL-DECLARATIONS :GET-HASH THING)))))

(DEFUN PURGE-FILE-DECLARATIONS (GENERIC-PATHNAME)
  (AND FILE-LOCAL-DECLARATIONS
       (SEND FILE-LOCAL-DECLARATIONS :MAP-HASH
	     #'(LAMBDA (KEY ALIST GENERIC-PATHNAME)
		 (LOOP FOR ELEM IN ALIST WITH CHANGED = NIL
		       AS PROP = (ASSQ GENERIC-PATHNAME (CDR ELEM))
		       DO (WHEN PROP
			    (IF (CDDR ELEM)
				(SETF (CDR ELEM) (DELQ PROP (CDR ELEM)))
				(SETQ ALIST (DELQ ELEM ALIST)
				      CHANGED T)))
		       FINALLY
			 (WHEN CHANGED
			   (IF ALIST
			       (SEND FILE-LOCAL-DECLARATIONS :PUT-HASH KEY ALIST)
			       (SEND FILE-LOCAL-DECLARATIONS :REM-HASH KEY)))))
	     GENERIC-PATHNAME)))

;;;

(DEFUN NOTICE-COMPILED-FUNCTION (FSPEC)
  (FILE-DECLARE FSPEC 'DEF NIL))
