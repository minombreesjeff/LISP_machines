;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: CLtL-Internals; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;
;;; SPECIAL: Special form definitions which try to match CLtL very closely.


;;; Notes:
;;;
;;;  Atoms at toplevel of a LOOP expression are not defined by CLtL (p121).
;;;  SCL extends LOOP to add all kinds of innovative uses which are unwanted in
;;;  portable programs.

(DEFMACRO CLTL:LOOP (&BODY FORMS)
  (SYS:CHECK-ARG FORMS (EVERY #'CONSP FORMS) "a list of non-atomic forms")
  `(LOOP ,@FORMS))


;;; Notes:
;;;
;;;  The symbol IGNORE is treated magically as a variable by Genera, which we don't want.
;;;  The symbol IGNORE is also a function, which we don't want.

(SETF (GET 'CLTL:IGNORE 'SI:DECLARATION-ALIAS) 'IGNORE)

(DEFVAR *TREAT-IGNORE-NORMALLY-SYNTAXES* '(:CLTL :CLTL-ONLY))

(DEFUN IGNORE-VARIABLE-TEST-MAKER ()
  (LET ((OLD-VARIABLE-TEST COMPILER:*IGNORE-VARIABLE-TEST*))
    #'(LAMBDA (VAR-NAME)
	(IF (MEMBER (SI:LISP-SYNTAX-NAME-SYMBOL (SI:CURRENT-LISP-SYNTAX))
		    *TREAT-IGNORE-NORMALLY-SYNTAXES*)
	    (EQ VAR-NAME 'IGNORE)		;Special case SCL:IGNORE using EQ-ness
						; for sake of macro expansions. Since
						; it's out of our universe, no problem
						; should result.
	    (FUNCALL OLD-VARIABLE-TEST VAR-NAME)))))

(SETQ COMPILER:*IGNORE-VARIABLE-TEST* (IGNORE-VARIABLE-TEST-MAKER))


;;; Notes:
;;;
;;;  Because SCL allows a full body of alternatives instead of the single alternative
;;;  prescribed by CLtL, users of our CL implementation get no warning that they are 
;;;  doing something naughty when they use more than one alternative. Here we shadow IF,
;;;  changing the number of arguments it allows.


(SI:DEFINE-SPECIAL-FORM CLTL:IF (CONDITION THEN &OPTIONAL (ELSE 'NIL) &ENVIRONMENT ENV)
  (DECLARE LT:(ARG-TEMPLATE COND TEST RETURN . BODY)) ; ?
  (IF (EVAL CONDITION ENV)
      (EVAL THEN ENV)
      (EVAL ELSE ENV)))

(SETF (GET 'CLTL:IF 'LT::ANNOTATE) (GET 'CL:IF 'LT::ANNOTATE))

(COMPILER:DEFTRANSFORMER (CLTL:IF CLTL-IF-TRANSFORMER) (FORM)
  (COMPILER:MATCHP FORM
    (('CLTL:IF TEST THEN) `(SCL:IF ,TEST ,THEN))
    (('CLTL:IF TEST THEN ELSE) `(SCL:IF ,TEST ,THEN ,ELSE))
    (('CLTL:IF TEST THEN ELSE . EXTRA)
     (IGNORE EXTRA)
     (COMPILER:PHASE-1-WARNING "Extra subforms in an IF will be ignored.")
     `(SCL:IF ,TEST ,THEN ,ELSE))
    (*
     (COMPILER:PHASE-1-WARNING "Too few subforms in an IF.")
     `(SCL:IF ,@(CDR FORM) NIL NIL))))



#|| ;This one is suspect, so is turned off for now. -kmp 6-Feb-87

;;; Notes:
;;;
;;;  Because SCL provides both an IGNORE declaration and an IGNORE function,
;;;  the IGNORE declaration cannot be provided to users without taking the
;;;  IGNORE function. This reduces error checking and risks users getting
;;;  redefinition warnings about functions not described in CLtL.
;;;
;;; To Do:
;;;
;;;  This implementation will break some code-walkers because it turns DECLARE into
;;;  a macro. It is defined by CLtL to be a special form. In order to correctly
;;;  implement this, LAMBDA must be able to correctly macro expand its body. In order
;;;  to do that, LAMBDA macros must be made to accept lexical environments.
;;;  This bug was reported to Bug-Lispm by KMP, 29-Jan-87.
;;;  References: <870129165157.2.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>


(DEFMACRO CLTL:DECLARE (&REST DECLARATIONS)
  `(SYS:DECLARE ,@(MAPCAR #'(LAMBDA (DECLARATION)
			      (COND ((ATOM DECLARATION) DECLARATION) ;Illegal, but...
				    ((EQ (CAR DECLARATION) 'CLTL:IGNORE)
				     `(ZL:IGNORE ,@(CDR DECLARATION)))
				    (T DECLARATION)))
			  DECLARATIONS)))

||#




;;; Notes:
;;;
;;;  The PARSE-BODY utility is being discussed as a possible addition to CL.
;;;  Whether added or not, we'll need it internally.

(DEFUN PARSE-BODY (BODY ENV)
  (DECLARE (VALUES BODY DECLARATIONS-LIST DOCUMENTATION-LIST))
  (LET ((DECLS '())
	(DOC   NIL))
    (DO () ((OR (NULL BODY)
		(AND (STRINGP (CAR BODY))
		     (NULL (CDR BODY)))))
      (LET ((EXP (MACROEXPAND (POP BODY) ENV)))
        (COND ((AND (STRINGP EXP) BODY)
	       (IF DOC
	           (WARN "Too many doc strings. ~
			  The extra strings will be ignored.")
	           (SETQ DOC (LIST EXP))))
	      ((AND (NOT (ATOM EXP))
		    (EQ (CAR EXP) 'DECLARE))
	       (PUSH EXP DECLS))
	      (T
	       (PUSH EXP BODY)
	       (RETURN NIL)))))
    (VALUES BODY (NREVERSE DECLS) DOC)))

(DEFVAR *ENFORCE-TYPE-DECLARATIONS* T)

(DEFUN MAYBE-ENFORCE-BODY-DECLARATIONS (FORMS DECLARATIONS DOC)
  (APPEND DOC DECLARATIONS
	  #|| '(NIL) ||#			;Confuses SETF expansion of substs
	  (CREATE-DECLARATION-ENFORCEMENTS DECLARATIONS)
	  FORMS))

(DEFVAR *CLTL-PAGE-43-TABLE-4-1*
	'(ARRAY ATOM BIGNUM BIT BIT-VECTOR CHARACTER
	  COMMON COMPILED-FUNCTION COMPLEX CONS DOUBLE-FLOAT
	  FIXNUM FLOAT FUNCTION HASH-TABLE INTEGER KEYWORD
	  LIST LONG-FLOAT NIL NULL NUMBER
	  PACKAGE PATHNAME RANDOM-STATE RATIO RATIONAL READTABLE
	  SEQUENCE SHORT-FLOAT SIMPLE-ARRAY SIMPLE-BIT-VECTOR SIMPLE-STRING
	  SIMPLE-VECTOR SINGLE-FLOAT STANDARD-CHAR STREAM STRING STRING-CHAR SYMBOL T VECTOR))

(DEFUN CREATE-DECLARATION-ENFORCEMENTS (DECLARE-FORMS)
  (COND ((NOT *ENFORCE-TYPE-DECLARATIONS*) '())
	(T
	 (LET ((ENFORCEMENTS '()))
	   (DOLIST (DECLARE-FORM DECLARE-FORMS)
	     (DOLIST (DECLARATION (CDR DECLARE-FORM))
	       (LET ((DECLARATION-TYPE (CAR DECLARATION))
		     (DECLARATION-DATA (CDR DECLARATION)))
		 (WHEN (AND (NOT (ATOM *ENFORCE-TYPE-DECLARATIONS*))
			    (TAILP T *ENFORCE-TYPE-DECLARATIONS*))
		   ;; Try to be fault-tolerant if someone pushes a type onto T
		   ;; making a list like (FIXNUM . T).  This isn't documented
		   ;; to win--we're just being nice because it's an easy mistake to make.
		   (WARN "~S has an invalid value: ~S~%It is being reset to T."
			 '*ENFORCE-TYPE-DECLARATIONS* *ENFORCE-TYPE-DECLARATIONS*)
		   (SETQ *ENFORCE-TYPE-DECLARATIONS* T))
		 (COND ((COND ((EQ DECLARATION-TYPE 'TYPE)
			       (SETQ DECLARATION-TYPE (POP DECLARATION-DATA))
			       T)
			      ((EQ *ENFORCE-TYPE-DECLARATIONS* T)
			       (MEMBER DECLARATION-TYPE *CLTL-PAGE-43-TABLE-4-1*))
			      (T
			       (MEMBER DECLARATION-TYPE *ENFORCE-TYPE-DECLARATIONS*)))
			(DOLIST (VAR DECLARATION-DATA)
			  (PUSHNEW `(CHECK-TYPE ,VAR ,DECLARATION-TYPE) ENFORCEMENTS
				   :TEST #'EQUAL)))))))
	   (NREVERSE ENFORCEMENTS)))))



;;; Notes:
;;;
;;;  CLtL says that DO and DO* ought to be macros. They're not in 7.1.
;;;  This is believed fixed in 7.2.


(DEFUN IMPLICIT-PROGN (BODY)
  (COND ((NOT BODY) NIL)
	((NOT (CDR BODY)) (CAR BODY))
	(T `(PROGN ,@BODY))))

(DEFMACRO CLTL:WHEN (TEST &BODY FORMS)
  `(CLTL:IF ,TEST ,(IMPLICIT-PROGN FORMS)))

(DEFMACRO CLTL:UNLESS (TEST &BODY FORMS)
  `(CLTL:IF (NOT ,TEST) ,(IMPLICIT-PROGN FORMS)))

(DEFMACRO CLTL:COND (&REST CLAUSES)
  (IF (NULL CLAUSES)
      NIL
      (LET ((CLAUSE-1 (FIRST CLAUSES)))
	(IF (ATOM CLAUSE-1) (ERROR "Atomic COND clause: ~S" CLAUSE-1))
	(LET ((TEST (CAR CLAUSE-1))
	      (BODY (CDR CLAUSE-1)))
	  (COND ((AND (EQ TEST 'T) (NOT (REST CLAUSES)))
		 (IF BODY (IMPLICIT-PROGN BODY) 'T))
		(BODY
		 `(CLTL:IF ,TEST
			   ,(IMPLICIT-PROGN BODY)
			   ,@(IF (REST CLAUSES) `((CLTL:COND ,@(REST CLAUSES))))))
		((OR (CONSTANTP TEST))
		 `(CLTL:IF ,TEST ,TEST))
		(T
		 (LET ((VAR (GENSYM)))
		   `(LET ((,VAR ,TEST))
		      (CLTL:IF ,VAR
			       ,VAR
			       ,@(IF (REST CLAUSES) `((CLTL:COND ,@(REST CLAUSES)))))))))))))


(DEFUN BINDING-P (X &OPTIONAL (DO-P NIL))
  (OR (SYMBOLP X)
      (AND (NOT (ATOM X))
	   (SYMBOLP (CAR X))
	   (OR (AND DO-P (NULL (CDR X)))	;Not optional in LET. See pp110-111.
	       (AND (NOT (ATOM (CDR X)))
		    (OR (NULL (CDDR X))
			(AND DO-P
			     (NOT (ATOM (CDDR X)))
			     (NULL (CDDDR X)))))))))

(DEFUN DO-BINDING-LIST-P  (LIST)
  (DO ((L LIST (CDR L)))
      ((ATOM L) (NULL L))
    (UNLESS (BINDING-P (CAR L) T) (RETURN NIL))))

(DEFUN LET-BINDING-LIST-P  (LIST)		;No one uses this yet. -kmp 24-Nov-87
  (DO ((L LIST (CDR L)))
      ((ATOM L) (NULL L))
    (UNLESS (BINDING-P (CAR L) NIL) (RETURN NIL))))

(DEFMACRO CLTL:DO (BINDINGS EXITS &BODY DECLS-AND-FORMS &ENVIRONMENT ENV)
  (CHECK-TYPE BINDINGS (SATISFIES DO-BINDING-LIST-P) "a well-formed binding list")
  (CHECK-TYPE EXITS CONS "a list containing an exit test and an exit body")
  (LET ((VARIABLES (MAPCAR #'(LAMBDA (X) (IF (ATOM X) X   (NTH 0 X))) BINDINGS))
	(VALUES    (MAPCAR #'(LAMBDA (X) (IF (ATOM X) NIL (NTH 1 X))) BINDINGS))
	(UPDATES   (MAPCAN #'(LAMBDA (X) (COND ((ATOM X) NIL)
					       ((ATOM (CDR X)) NIL)
					       ((ATOM (CDDR X)) NIL)
					       (T (LIST* (NTH 0 X) (NTH 2 X) NIL))))
			   BINDINGS))
	(TAG (GENSYM)))
    (MULTIPLE-VALUE-BIND (FORMS DECLS)
	(PARSE-BODY DECLS-AND-FORMS ENV)
      (LET ((ENFORCEMENTS (CREATE-DECLARATION-ENFORCEMENTS DECLS)))
	`(LET ,(MAPCAR #'LIST VARIABLES VALUES)
	   ,@DECLS
	   ,@ENFORCEMENTS
	   (BLOCK NIL
	     (TAGBODY
	       ,TAG (CLTL:WHEN ,(CAR EXITS) (RETURN ,(IMPLICIT-PROGN (CDR EXITS))))
	            ,@FORMS
		    ,@(IF UPDATES `((PSETQ ,@UPDATES)))
		    ,@ENFORCEMENTS
		    (GO ,TAG))))))))

(DEFMACRO CLTL:DO* (BINDINGS EXITS &BODY DECLS-AND-FORMS &ENVIRONMENT ENV)
  (CHECK-TYPE BINDINGS (SATISFIES DO-BINDING-LIST-P) "a well-formed binding list")
  (CHECK-TYPE EXITS CONS "a list containing an exit test and an exit body")
  (LET ((VARIABLES (MAPCAR #'(LAMBDA (X) (IF (ATOM X) X   (NTH 0 X))) BINDINGS))
	(VALUES    (MAPCAR #'(LAMBDA (X) (IF (ATOM X) NIL (NTH 1 X))) BINDINGS))
	(UPDATES   (MAPCAN #'(LAMBDA (X) (COND ((ATOM X) NIL)
					       ((ATOM (CDR X)) NIL)
					       ((ATOM (CDDR X)) NIL)
					       (T (LIST* (NTH 0 X) (NTH 2 X) NIL))))
			   BINDINGS))
	(TAG (GENSYM)))
    (MULTIPLE-VALUE-BIND (FORMS DECLS)
	(PARSE-BODY DECLS-AND-FORMS ENV)
      (LET ((ENFORCEMENTS (CREATE-DECLARATION-ENFORCEMENTS DECLS)))
	`(LET* ,(MAPCAR #'LIST VARIABLES VALUES)
	   ,@DECLS
	   ,@ENFORCEMENTS
	   (BLOCK NIL
	     (TAGBODY
	       ,TAG (CLTL:WHEN ,(CAR EXITS) (RETURN ,(IMPLICIT-PROGN (CDR EXITS))))
	            ,@FORMS
		    ,@(IF UPDATES `((SETQ ,@UPDATES)))
		    ,@ENFORCEMENTS
		    (GO ,TAG))))))))



;;; Notes:
;;;
;;;  Because SCL conses &REST vectors on the stack, users must take care to copy them
;;;  before using them. Symbolics users have long since grown used to avoiding rest
;;;  vectors, but many CL programmers use them all the time and find it inconvenient
;;;  to be writing #+Symbolics (SETQ X (COPY-LIST X)) all over the place.
;;;
;;;  In fact, COPY-LIST would suffice for copying &REST vectors, but our COPY-&REST-LIST
;;;  will save some work in some cases. Often, for example, the rest vector will be NIL
;;;  and the NULL check will keep us from incurring the function call overhead of calling
;;;  COPY-LIST. The SI:STACK-LIST-P check is only a couple more instructions and will 
;;;  help in cases where APPLY gets its argument in the right format and does not copy 
;;;  it to the stack.
;;;
;;; To Do:
;;;
;;;  We should probably also constrain the set of keywords to just
;;;   &OPTIONAL &REST &AUX &KEY &ALLOW-OTHER-KEYS
;;;  We'll need to write a compiler style checker for that.
;;;
;;;  Forms defined with DEFLAMBDA-MACRO would compile in Release 6.1 but don't in 7.0.
;;;  Until this is fixed, our definition of CLTL:LAMBDA will not worked compiled.
;;;  This bug was reported to Bug-Compiler by KMP, 2-Feb-87.
;;;  References: <870202141100.6.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>
;;;  Hornig says this is fixed in 7.2.
;;;  References: <870202154042.1.HORNIG@COCKATIEL.SCRC.Symbolics.COM>
;;;
;;;  Need to install declaration checking.


;;; *COPY-&REST-LISTS*
;;;
;;;  If true, &REST lists always have indefinite extent (as specified in CLtL).
;;;  If false, &REST lists always have dynamic extent (as done in Zetalisp).
;;;
;;;  Note: The decision controlled by this variable is made at compile time,
;;;        not at runtime.

(DEFPARAMETER *COPY-&REST-LISTS* T
  "If NIL, &REST lists are dynamic.")

;;; *COPY-&REST-LISTS-IN-HEAP*
;;;
;;;  Whether the expression
;;;	(LET ((L '(A B C)))
;;;	  (NOT (EQ (APPLY #'(LAMBDA (&REST X) X) L) L)))
;;;  returns true is controlled by *COPY-&REST-LISTS-IN-HEAP*.
;;;
;;;  Note: The decision controlled by this variable is made at compile time,
;;;        not at runtime.

(DEFPARAMETER *COPY-&REST-LISTS-IN-HEAP* T)

(DEFMACRO COPY-&REST-LIST (LIST)
  (IF *COPY-&REST-LISTS-IN-HEAP*
      `(IF (NOT (NULL ,LIST))
	   (COPY-LIST ,LIST)
	   ,LIST)
      `(IF (AND (NOT (NULL ,LIST))
		(SI:STACK-LIST-P ,LIST))
	   (COPY-LIST ,LIST)
	   ,LIST)))

(DEFUN FIX-&REST-IN-BVL (BVL &OPTIONAL REST-VARIABLE DECLARATIONS)
  (DECLARE (VALUES BVL FIXED-P))
  (IF *COPY-&REST-LISTS*
      (REALLY-FIX-&REST-IN-BVL BVL REST-VARIABLE DECLARATIONS)
      (VALUES BVL NIL)))

(DEFUN REALLY-FIX-&REST-IN-BVL (BVL REST-VARIABLE DECLARATIONS)
  (DECLARE (VALUES BVL FIXED-P))
  (SETQ BVL (COPY-LIST BVL)) ; Destructive modification may follow, so copy argument.
  (LET* ((REST (MEMBER '&REST BVL))
	 (REST-VAR (CADR REST)))
    (COND ((OR (NOT REST)					;The trivial case
	       (BLOCK TEST
		 (DOLIST (DECLARATION DECLARATIONS)
		   (DOLIST (DECL DECLARATION)
		     (WHEN (LISTP DECL)
		       (CASE (CAR DECL)
			 ((CLTL:IGNORE)				;(IGNORE rest-var)
			  (IF (MEMBER REST-VAR (CDR DECL)) (RETURN-FROM TEST T)))
			 ((DOWNWARD-REST-ARGUMENT) 		;(DOWNWARD-REST-ARGUMENT)
			  (RETURN-FROM TEST T))))))
		 NIL))
	   (VALUES BVL NIL))
	  (T
	   (LET ((TEMP-VAR (OR REST-VARIABLE (GENTEMP "TEMP-FOR-&REST-"))))
	     (SETF (CADR REST) TEMP-VAR)
	     (COND ((NOT (CDDR REST))
		    (SETF (CDDR REST)
			  `(&AUX (,REST-VAR (COPY-&REST-LIST ,TEMP-VAR)))))
		   ((EQ (CADDR REST) '&AUX)
		    (PUSH `(,REST-VAR (COPY-&REST-LIST ,TEMP-VAR))
			  (CDDDR REST)))
		   ((EQ (CADDR REST) '&KEY)
		    (PUSH `((NOT-A-KEYWORD ,REST-VAR) (COPY-&REST-LIST ,TEMP-VAR))
			  (CDDDR REST)))
		   (T
		    ;; Back out. This should never happen.
		    (SETF (CADR REST) REST-VAR)))
	     (VALUES BVL T))))))

(PUSH :CLTL      COMPILER:*NON-PERVASIVE-SPECIALS-OK-SYNTAX-LIST*)
(PUSH :CLTL-ONLY COMPILER:*NON-PERVASIVE-SPECIALS-OK-SYNTAX-LIST*)

(DEFLAMBDA-MACRO CLTL:LAMBDA (LAMBDA-LIST &BODY DECLS/DOC/FORMS &ENVIRONMENT ENV)
  (CHECK-TYPE LAMBDA-LIST LIST "a lambda list")
  (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
      (PARSE-BODY DECLS/DOC/FORMS ENV)
    (LET ((NEW-LAMBDA-LIST (FIX-&REST-IN-BVL LAMBDA-LIST NIL DECLS)))
      `(LAMBDA ,NEW-LAMBDA-LIST
	 ,@(UNLESS (EQUAL NEW-LAMBDA-LIST LAMBDA-LIST)
	     `((DECLARE (ARGLIST ,@LAMBDA-LIST))))
	 ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC)))))

(SI:DEFMACRO-SET-INDENTATION-FOR-ZWEI 'CLTL:LAMBDA '(1 1))

(SETF (GET 'CLTL:DEFUN 'ZWEI:DEFINITION-FUNCTION-SPEC-TYPE) 'DEFUN)

(PUSH 'CLTL:DEFUN   ZWEI:*IRRELEVANT-FUNCTIONS*)
(PUSH 'CLTL:DEFUN   ZWEI:*IRRELEVANT-DEFINING-FORMS*)

(DEFMACRO CLTL:DEFUN (NAME LAMBDA-LIST &BODY DECLS/DOC/FORMS &ENVIRONMENT ENV)
  (CHECK-TYPE NAME SYMBOL)
  (CHECK-TYPE LAMBDA-LIST LIST "a lambda list")
  (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
      (PARSE-BODY DECLS/DOC/FORMS ENV)
    (MULTIPLE-VALUE-BIND (NEW-LAMBDA-LIST FIXED-P)
	(FIX-&REST-IN-BVL LAMBDA-LIST NIL DECLS)
      (LET ((CODE `(DEFUN ,NAME ,NEW-LAMBDA-LIST
		     ,@(UNLESS (EQUAL NEW-LAMBDA-LIST LAMBDA-LIST)
			 `((DECLARE (ARGLIST ,@LAMBDA-LIST))))
		     ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC))))
	(IF FIXED-P
	    `(PROGN
	       (PROCLAIM '(NOTINLINE ,NAME))
	       "INLINE declarations don't work with &REST in the Developer yet. Sorry."
	       ,CODE)
	    CODE)))))

;;; Notes:
;;;
;;;  &REST does not work in :CONSTRUCTOR arglists for DEFSTRUCT under Genera.
;;;  This does surgery on DEFSTRUCT to make sure the case never gets through
;;;  to the Genera variant.

(SETF (GET 'CLTL:DEFSTRUCT 'ZWEI:DEFINITION-FUNCTION-SPEC-TYPE) 'ZL:DEFSTRUCT)

(DEFVAR *VALID-DEFSTRUCT-SLOT-OPTIONS*
	'(:TYPE					;CLtL, 310
	  :READ-ONLY				;CLtL, 310
	  ))

(DEFVAR *VALID-DEFSTRUCT-OPTIONS*
	'(:CONC-NAME				;CLtL, p311
	  :CONSTRUCTOR				;CLtL, p311
	  :COPIER				;CLtL, p312
	  :PREDICATE				;CLtL, p312
	  :INCLUDE				;CLtL, p312
	  :PRINT-FUNCTION			;CLtL, p314
	  :TYPE					;CLtL, p314
	  :NAMED				;CLtL, p315
	  :INITIAL-OFFSET			;CLtL, p315
	  ))


(SETF (GET 'CLTL:DEFSTRUCT 'ZWEI:DEFINITION-FUNCTION-SPEC-FINDER)
      'ZWEI:DEFSELECT-FUNCTION-SPEC-FINDER)

(SETF (GET 'CLTL:DEFSTRUCT 'ZWEI:DEFINITION-FUNCTION-SPEC-TYPE)
      'ZL:DEFSTRUCT)

(DEFMACRO CLTL:DEFSTRUCT (NAME-AND-OPTIONS &BODY ITEMS)
  (LET ((MORE-FORMS '()))
    (FLET ((FIX-OPTION (OPTION)
	     (IF (AND (NOT (ATOM OPTION))
		      (EQ (CAR OPTION) :CONSTRUCTOR)
		      (CDDR OPTION)
		      (MEMBER '&REST (CADDR OPTION)))
		 (LET ((NAME (INTERN (FORMAT NIL
					     "Defstruct &REST-Constructor ~S"
					     (CADR OPTION))))
		       (VARS (MAPCAN #'(LAMBDA (V)
					 (UNLESS (MEMBER V LAMBDA-LIST-KEYWORDS)
					   (LIST (COND ((ATOM V) V)
						       ((ATOM (CAR V)) (CAR V))
						       (T (CADAR V))))))
				     (CADDR OPTION))))
		   ;; This must be a defun and not a DEFSUBST since inlining
		   ;; the &REST hack doesn't work.
		   (PUSH `(CLTL:DEFUN ,(CADR OPTION) ,(CADDR OPTION)
			    (,NAME ,@VARS))
			 MORE-FORMS)
		   `(:CONSTRUCTOR ,NAME ,VARS))
		 OPTION)))
      (LET ((CORRECTED-NAME-AND-OPTIONS
	      (COND ((ATOM NAME-AND-OPTIONS) NAME-AND-OPTIONS)
		    (T
		     (DOLIST (OPTION (CDR NAME-AND-OPTIONS))
		       (LET ((KEY (IF (ATOM OPTION) OPTION (CAR OPTION))))
			 (UNLESS (MEMBER KEY *VALID-DEFSTRUCT-OPTIONS*)
			   (ERROR "Invalid DEFSTRUCT option: ~S" KEY))))
		     (CONS (CAR NAME-AND-OPTIONS)
			   (MAPCAR #'FIX-OPTION (CDR NAME-AND-OPTIONS)))))))
	`(PROGN ,@MORE-FORMS
		(DEFSTRUCT ,CORRECTED-NAME-AND-OPTIONS ,@ITEMS))))))



;;; Notes:
;;;
;;;  PUSH (p269) and PUSHNEW (p270) do not allow the :AREA or :LOCALIZE keywords
;;;  offered by Genera. In fact, PUSH is not even supposed to be &KEY.


(DEFMACRO CLTL:PUSH (ITEM PLACE)
  `(PUSH ,ITEM ,PLACE))

(DEFMACRO CLTL:PUSHNEW (ITEM PLACE &REST KEYWORDS &KEY TEST TEST-NOT KEY)
  (DECLARE (ARGLIST ITEM PLACE &KEY TEST TEST-NOT KEY)
	   (IGNORE TEST TEST-NOT KEY))
  `(PUSHNEW ,ITEM ,PLACE ,@KEYWORDS))



;;; Notes:
;;;
;;;  TRACE (p440) is only defined to accept symbols as arguments in CLtL. Genera
;;;  supports lots of other options that we want to disallow in our restricted subset.
;;;  UNTRACE (p440) doesn't offer hairy options, but we provide symmetric error checking
;;;  anyway.


(DEFVAR *EXTENDED-TRACE-ENABLE* NIL)

(DEFMACRO CLTL:TRACE (&REST FUNCTION-NAMES)
  (UNLESS *EXTENDED-TRACE-ENABLE*
    (SYS:CHECK-ARG FUNCTION-NAMES (EVERY #'SYMBOLP FUNCTION-NAMES)
		   "a list of function names"))
  (IF (NOT FUNCTION-NAMES)
      `SI:TRACED-FUNCTIONS
      `(APPEND ,@(MAPCAR #'(LAMBDA (NAME) `(SI:TRACE-1 ',NAME)) FUNCTION-NAMES))))

(DEFMACRO CLTL:UNTRACE (&REST FUNCTION-NAMES)
  (UNLESS *EXTENDED-TRACE-ENABLE*
    (SYS:CHECK-ARG FUNCTION-NAMES (EVERY #'SYMBOLP FUNCTION-NAMES)
		   "a list of function names"))
  `(UNTRACE ,@FUNCTION-NAMES))


;;; Notes:
;;;
;;;  We have our LOAD shadowed.


(DEFMACRO CLTL:EVAL-WHEN (TIME-LIST &BODY FORMS)
  (LET ((L TIME-LIST))
    (SETQ L (SUBSTITUTE-IF 'SYS:LOAD
			   #'(LAMBDA (X) (AND (SYMBOLP X) (STRING-EQUAL X "LOAD")))
			   L))
    (SETQ L (SUBSTITUTE-IF 'SYS:EVAL
			   #'(LAMBDA (X) (AND (SYMBOLP X) (STRING-EQUAL X "EVAL")))
			   L))
    (SETQ L (SUBSTITUTE-IF 'SYS:COMPILE
			   #'(LAMBDA (X) (AND (SYMBOLP X) (STRING-EQUAL X "COMPILE")))
			   L))
    `(EVAL-WHEN ,L ,@FORMS)))

(SETF (GET 'CLTL:EVAL-WHEN 'SPECIAL-FORM) T)


;;; Notes:
;;;
;;;  Genera's TIME macro allows an additional argument, DESCRIBE-CONSING, which
;;;  CLtL (p441) does not allow.


(DEFMACRO CLTL:TIME (FORM)
  `(TIME ,FORM))



;;; DOLIST, DOTIMES
;;;
;;;  This is just for the purpose of declaration enforcement in the developer.

(DEFMACRO CLTL:DOLIST ((VAR LISTFORM &OPTIONAL RESULTFORM) &BODY BODY &ENVIRONMENT ENV)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
      (PARSE-BODY BODY ENV)
    `(DOLIST (,VAR ,LISTFORM ,RESULTFORM)
       ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC))))

(DEFMACRO CLTL:DOTIMES ((VAR COUNTFORM &OPTIONAL RESULTFORM) &BODY BODY &ENVIRONMENT ENV)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
      (PARSE-BODY BODY ENV)
    `(DOTIMES (,VAR ,COUNTFORM ,RESULTFORM)
       ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC))))



;;; PROG, PROG*
;;;
;;;  Genera 7.5 still tolerates named PROG and PROG*, which CLtL does not permit.
;;;  Also, of course, this hacks declaration enforcement which is a nice feature of
;;;  the developer.
;;;
;;; -kmp 26-Sep-89

(DEFMACRO CLTL:PROG (BINDINGS &BODY TAGBODY &ENVIRONMENT ENV)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (CHECK-TYPE BINDINGS LIST "a list of bindings")
  (MULTIPLE-VALUE-BIND (TAGBODY-FORMS DECLS DOC)
      (PARSE-BODY TAGBODY ENV)
    `(PROG ,BINDINGS ,@(MAYBE-ENFORCE-BODY-DECLARATIONS TAGBODY-FORMS DECLS DOC))))

(DEFMACRO CLTL:PROG* (BINDINGS &BODY TAGBODY &ENVIRONMENT ENV)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (CHECK-TYPE BINDINGS LIST "a list of bindings")
  (MULTIPLE-VALUE-BIND (TAGBODY-FORMS DECLS DOC)
      (PARSE-BODY TAGBODY ENV)
    `(PROG* ,BINDINGS ,@(MAYBE-ENFORCE-BODY-DECLARATIONS TAGBODY-FORMS DECLS DOC))))


;;; CLtL says that (RETURN values) or (RETURN) is ok.
;;; Genera thinks if you write (RETURN) you mean (RETURN (VALUES)) and grumbles.
;;; Also, Genera "allows" (RETURN a b c) as a synoym for (RETURN (VALUES a b c)).
;;; This fixes all that...


(DEFMACRO CLTL:RETURN (&REST ARGUMENTS)
  (DECLARE (ARGLIST &OPTIONAL (RESULTS 'NIL)))
  `(CLTL:RETURN-FROM NIL ,@ARGUMENTS))

(DEFMACRO CLTL:RETURN-FROM (TAG &OPTIONAL (RESULTS 'NIL))
  `(RETURN-FROM ,TAG ,RESULTS))

(SETF (GET 'CLTL:RETURN-FROM 'SPECIAL-FORM) T)



;;; References: <870417133538.8.DCP@KOYAANISQATSI.S4CC.Symbolics.COM>,
;;;	        <870421162305.9.HORNIG@HOME.SCRC.Symbolics.COM>
;;;
;;; Genera's MULTIPLE-VALUE-SETQ seems to have two expansions, depending on context,
;;; neither of which is good:
;;;  (MULTIPLE-VALUE-SETQ (X Y) (Z))
;;; might expand to
;;;      (ZL:MULTIPLE-VALUE (X Y) (Z))
;;;   or (MULTIPLE-VALUE-CALL #'(GENERAL-CL:LAMBDA (&OPTIONAL #:G3017 #:G3018 &REST IGNORE)
;;;	                          (SETQ X #:G3017)
;;;	                          (SETQ Y #:G3018))
;;;		              (Z)).
;;; The former is no good because ZL:MULTIPLE-VALUE is a special form, but not on CLtL's
;;; special form list. The latter is no good because we've shadowed LAMBDA and 
;;; GENERA-CL:LAMBDA is not any good to us as an expansion.
;;;
;;; Also, the MULTIPLE-VALUE-CALL expansion is wrong because it does not return the
;;; appropriate value. For the common cases, this is fixed in 7.2 but for certain
;;; degenerate cases like (MULTIPLE-VALUE () (VALUES 3 4)), 7.2 still returns NIL when
;;; 3 is the right answer. The following code is more robust and should be kept for now...
;;;
;;; Both MULTIPLE-VALUE-BIND and MULTIPLE-VALUE-SETQ will ignore variables named
;;; IGNORE, IGNORED, and NIL in Genera. Our implementation allows you to setq IGNORE
;;; and IGNORED but means something very different by it -- i.e., to really assign
;;; the variable. Our implementation barfs if you try to use NIL.


(DEFUN CHECK-MULTIPLE-VALUE-VARIABLES (OP VARIABLES)
  (DECLARE (DBG:ERROR-REPORTER))
  (DOLIST (VARIABLE VARIABLES)
    (WHEN (OR (NOT (AND VARIABLE (SYMBOLP VARIABLE)))
	      (CONSTANTP VARIABLE)
	      (MEMBER VARIABLE LAMBDA-LIST-KEYWORDS))
      (ERROR "Attempting to ~S a variable named ~S is not allowed." OP VARIABLE))))

(DEFMACRO CLTL:MULTIPLE-VALUE-SETQ (VARIABLES VALUES)
  (LET ((TEMPS (OR (MAPCAR #'(LAMBDA (IGNORE) (GENSYM)) VARIABLES)
		   (LIST (GENSYM)))))
    ; This check should really be done by a style checker, but that didn't seem to work
    ;; when I tried it, so this will have to do. -kmp 10-Apr-88
    (CHECK-MULTIPLE-VALUE-VARIABLES 'CLTL:MULTIPLE-VALUE-SETQ VARIABLES)
    `(MULTIPLE-VALUE-CALL #'(CLTL:LAMBDA (&OPTIONAL ,@TEMPS &REST MORE-VALUES)
			      (DECLARE (CLTL:IGNORE MORE-VALUES))
			      ,@(MAPCAR #'(LAMBDA (VAR TEMP) `(SETQ ,VAR ,TEMP))
					VARIABLES TEMPS)
			      ,(FIRST TEMPS))
			  ,VALUES)))

(DEFMACRO CLTL:MULTIPLE-VALUE-BIND (VARIABLES VALUES &BODY FORMS)
  (DECLARE (ZWEI:INDENTATION 1 3 2 1))  
  ;; This check should really be done by a style checker, but that didn't seem to work
  ;; when I tried it, so this will have to do. -kmp 10-Apr-88
  (CHECK-MULTIPLE-VALUE-VARIABLES 'CLTL:MULTIPLE-VALUE-BIND VARIABLES)
  `(MULTIPLE-VALUE-CALL #'(CLTL:LAMBDA (&OPTIONAL ,@VARIABLES &REST MORE-VALUES)
			    (DECLARE (CLTL:IGNORE MORE-VALUES))
			    ,@FORMS)
			,VALUES))




(DEFMACRO CLTL:LET (BINDINGS &BODY BODY &ENVIRONMENT ENV)
  (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
      (PARSE-BODY BODY ENV)
    `(LET ,BINDINGS
       ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC))))

(SETF (GET 'CLTL:LET 'SPECIAL-FORM) T)

(DEFUN FIX-LOCAL-FDEFINITION-CLAUSES (CLAUSES ENV)
  (MAPCAR #'(LAMBDA (CLAUSE) (FIX-LOCAL-FDEFINITION-CLAUSE CLAUSE ENV)) CLAUSES))

(DEFUN FIX-LOCAL-FDEFINITION-CLAUSE (CLAUSE ENV)
  (LET ((NAME         (CAR  CLAUSE))
	(LAMBDA-LIST  (CADR CLAUSE))
	(BODY         (CDDR CLAUSE)))
    (CHECK-TYPE NAME (AND SYMBOL (NOT NULL)) "a local function name")
    (CHECK-TYPE LAMBDA-LIST  LIST "a lambda list")
    (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
	(PARSE-BODY BODY ENV)
      (LET ((NEW-LAMBDA-LIST (FIX-&REST-IN-BVL LAMBDA-LIST NIL DECLS)))
	`(,NAME ,NEW-LAMBDA-LIST
	  ,@(UNLESS (EQUAL NEW-LAMBDA-LIST LAMBDA-LIST)
	      `((DECLARE (ARGLIST ,@LAMBDA-LIST))))
	  ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC))))))

(DEFVAR *ALLOW-DECLARATIONS-IN-FLET* NIL)

(DEFMACRO CLTL:FLET (FBINDINGS &BODY BODY &ENVIRONMENT ENV)
  (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
      (PARSE-BODY BODY ENV)
    (UNLESS (OR *ALLOW-DECLARATIONS-IN-FLET* (NOT DECLS))
      (ERROR "Declarations are not permitted in a FLET expression."))
    `(FLET ,(FIX-LOCAL-FDEFINITION-CLAUSES FBINDINGS ENV)
       ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC))))

(SETF (GET 'CLTL:FLET 'SPECIAL-FORM) T)

(PUSHNEW 'CLTL:FLET ZWEI:*DEFINITION-LIST-FUNCTIONS*)

(DEFMACRO CLTL:LABELS (FBINDINGS &BODY BODY &ENVIRONMENT ENV)
  (MULTIPLE-VALUE-BIND (FORMS DECLS DOC)
      (PARSE-BODY BODY ENV)
    (UNLESS (OR *ALLOW-DECLARATIONS-IN-FLET* (NOT DECLS))
      (ERROR "Declarations are not permitted in a FLET expression."))
    `(LABELS ,(FIX-LOCAL-FDEFINITION-CLAUSES FBINDINGS ENV)
       ,@(MAYBE-ENFORCE-BODY-DECLARATIONS FORMS DECLS DOC))))

(SETF (GET 'CLTL:LABELS 'SPECIAL-FORM) T)
  
(PUSHNEW 'CLTL:LABELS ZWEI:*DEFINITION-LIST-FUNCTIONS*)



;;; This is a very magic situation involving symbols outside the universe,
;;; so we deliberately disregard the environment. User code should never be
;;; macroletting these symbols, so that should be safe and save a lot of trouble.

(DEFUN PROGNIFY (FORMS)
  (CASE (LENGTH FORMS)
    ((0)       NIL)
    ((1)       (CAR FORMS))
    (OTHERWISE `(PROGN ,@FORMS))))

(DEFUN (:PROPERTY IF SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:IF ,(CADR FORM) ,(CADDR FORM) ,(PROGNIFY (CDDDR FORM))))

(DEFUN (:PROPERTY WHEN SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:WHEN   ,(CADR FORM) ,@(CDDR FORM)))

(DEFUN (:PROPERTY UNLESS SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:UNLESS ,(CADR FORM) ,@(CDDR FORM)))

(DEFUN (:PROPERTY ZL:MULTIPLE-VALUE SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:MULTIPLE-VALUE-SETQ ,@(CDR FORM)))

(DEFUN WITH-STACK-LIST-TRAMPOLINE (CONTINUATION &REST ARGUMENTS)
  ;; Note well: This exploits the SCL &REST `bug'.
  (FUNCALL CONTINUATION ARGUMENTS))

(DEFMACRO WITH-INTERNAL-STACK-LIST ((VARIABLE &REST LIST-ELEMENTS) &BODY FORMS)
  `(FUNCALL #'WITH-STACK-LIST-TRAMPOLINE
	    #'(CLTL:LAMBDA (,VARIABLE)
		(DECLARE (SYS:DOWNWARD-FUNCTION))
		,@FORMS)
	    ,@LIST-ELEMENTS))

(DEFMACRO WITH-INTERNAL-STACK-LIST* ((VARIABLE &REST LIST*-ELEMENTS) &BODY FORMS)
  `(APPLY #'WITH-STACK-LIST-TRAMPOLINE
	  #'(CLTL:LAMBDA (,VARIABLE)
	      (DECLARE (SYS:DOWNWARD-FUNCTION))
	      ,@FORMS)
	  ,@LIST*-ELEMENTS))

(DEFUN (:PROPERTY WITH-STACK-LIST SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(WITH-INTERNAL-STACK-LIST ,@(CDR FORM)))

(DEFUN (:PROPERTY WITH-STACK-LIST* SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(WITH-INTERNAL-STACK-LIST* ,@(CDR FORM)))

(DEFUN (:PROPERTY RETURN-FROM SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:RETURN-FROM ,(CADR FORM)
		     ,(IF (CDDDR FORM)
			  `(VALUES ,@(CDDR FORM))
			  (CADDR FORM))))

(DEFUN (:PROPERTY LET SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:LET ,@(CDR FORM)))

(DEFUN (:PROPERTY FLET SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:FLET ,@(CDR FORM)))

(DEFUN (:PROPERTY LABELS SPECIAL-MACRO) (FORM ENVIRONMENT)
  (DECLARE (IGNORE ENVIRONMENT))
  `(CLTL:LABELS ,@(CDR FORM)))
