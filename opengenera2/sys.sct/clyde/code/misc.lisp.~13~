;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: CLtL-Internals; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;
;;; MISC: Misc support for CL Developer system.

(DEFVAR *CLTL-PACKAGE*      (FIND-PACKAGE "CLTL"))
(DEFVAR *CLTL-USER-PACKAGE* (FIND-PACKAGE "CLTL-USER"))

(DEFVAR *DEVELOPER-SYSTEM*  "CL Developer")

(DEFVAR *KEYWORD-PACKAGE* (FIND-PACKAGE "KEYWORD"))

;; *SYNTAX-OVERRIDE*
;;
;;  Currently this variable controls nothing.
;;  It is left around to remind me to do something about it, though.
;;  In Cloe, it took on various settings to control whether when you tried
;;  to load a file with a foreign syntax (e.g., Common-Lisp) while in Cloe,
;;  it could unconditionally (or with a query) ask you if you wanted to
;;  override the given syntax and assume Cloe instead.
;;  -kmp 26-Sep-89

(DEFVAR *SYNTAX-OVERRIDE* NIL)

;; *TERMINAL-SYNONYM-STREAM*
;;
;; Currently this isn't used either.  It's part of the substrate for `real instance'
;; synonym streams used by Cloe, and it holds a cached copy of *TERMINAL-IO* syn stream
;; so that zillions don't have to be consed for different applications.  We initialize
;; it here to a Zetalisp synonym stream (symbol) and may later reset it to be an instance.

(DEFVAR *TERMINAL-SYNONYM-STREAM* (MAKE-SYNONYM-STREAM '*TERMINAL-IO*))

;;; A simple interface to the compiler optimizer facility.

(DEFUN SIMPLE-OPTIMIZER (FORM)
  (APPLY (GET (CAR FORM) 'SIMPLE-OPTIMIZER) (CDR FORM)))

(DEFMACRO DEFINE-SIMPLE-OPTIMIZER (NAME BVL &BODY FORMS)
  "Defines a compiler optimizer. Syntax is compatible with DEFMACRO."
  (SETQ BVL (COPY-LIST BVL)) ;We may want to do a side-effect internally.
  `(PROGN 
     ,(LET* ((REST (MEMBER '&REST BVL))
	     (OTHER (IF (NOT REST) NIL
			(LET ((REST-VAR (CADR REST))
			      (TEMP (GENSYM)))
			  (SETF (CADR REST) TEMP)
			  `(&AUX (,REST-VAR (COPY-LIST ,TEMP)))))))
	`(DEFUN (:PROPERTY ,NAME SIMPLE-OPTIMIZER) (,@BVL ,@OTHER)
	   ,@FORMS))
     ;; It would be nice to include the OPTIMIZED-INTO stuff someday
     (COMPILER:ADD-OPTIMIZER ,NAME SIMPLE-OPTIMIZER NIL)))

#|| ;Not used? -kmp 18-Sep-89

(DEFUN LINK-SYMBOL-VALUE-CELLS (FROM-SYMBOL TO-SYMBOL)
  (WHEN (BOUNDP FROM-SYMBOL)
    (IF (EQ (LOCF (SYMBOL-VALUE FROM-SYMBOL))
	    (LOCF (SYMBOL-VALUE TO-SYMBOL)))
	(RETURN-FROM LINK-SYMBOL-VALUE-CELLS NIL))
    (ERROR "~S is already ~:[bound~;linked to ~S~]."
	   FROM-SYMBOL TO-SYMBOL))
  (WHEN (NOT (BOUNDP TO-SYMBOL))
    (CERROR "Link ~S to ~S anyway."
	    "~*~S is not yet bound."
	    FROM-SYMBOL TO-SYMBOL))
  (UNLESS (GET FROM-SYMBOL 'SPECIAL)
    (PROCLAIM `(SPECIAL ,FROM-SYMBOL)))
  (UNLESS (GET TO-SYMBOL 'SPECIAL)
    (CERROR "Proclaim ~S special and link ~S to it."
	    "The variable ~S is not special."
	    TO-SYMBOL FROM-SYMBOL)
    (PROCLAIM `(SPECIAL ,TO-SYMBOL)))
  (FORWARD-VALUE-CELL FROM-SYMBOL TO-SYMBOL)
  T)

||#
