;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SCT; Base: 10; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Environment hacking for the System Construction Tool

;;; Philosophical point: an operation over a system must take place in a single
;;; environment.  If you want to use multiple environments for a single operation,
;;; then use component systems.  We enforce this by making subsystems use the
;;; environment of the parent system.

;; Define the flavor upon which all environments are based
(defflavor basic-environment
	(name
	 (pretty-name nil)
	 (parent nil)			;an environment can have a parent
	 (parameters nil)		;the "arglist" for this environment
	 (systems nil))			;a list of all systems which use this environment
	()
  (:conc-name environment-)
  (:initable-instance-variables name pretty-name parent parameters)
  :writable-instance-variables
  :abstract-flavor
  (:required-methods environment-salvable
		     encache-file-properties probe-file get-file-loaded-info))

(defmethod (:print-self basic-environment) (stream ignore slashify)
  (let ((scl:*print-string-length* nil))
    (if slashify
	(si:printing-random-object (self stream :typep)
	  (princ name stream))
      (princ name stream))))

(defmethod (:init basic-environment :after) (&rest ignore)
  (when (null pretty-name)
    (setq pretty-name (string-capitalize-words name))))

;;--- Nobody uses this yet
(defmethod (environment-machine-type basic-environment) ()
  *current-machine-type*)

;; If this were a cross-environment, it would, of course, return the
;; appropriate binary filetype.
(defmethod (default-binary-file-type basic-environment) ()
  si:*default-binary-file-type*)

;;--- Since destination-pathnames are resolved when the DEFSYSTEM is evaluated,
;;--- this should be called by COLLECT-MODULE-INPUTS-AND-OUTPUTS methods (?).
;;--- For example, the IMach cross-environment should turn :BIN into :IBIN.
;;--- VC branches should have some say, too
;;--- Nobody uses this yet
(defmethod (refined-destination-pathname basic-environment) (system pathname &rest keys)
  (ignore system keys)
  pathname)

(defmethod (system-version-loaded-in-environment basic-environment) (system)
  (system-loaded-version system))		;clear as mud

(defmethod (set-system-version-loaded-in-environment basic-environment) (system new-value)
  (setf (system-loaded-version system) new-value))

(defmethod (system-branch-loaded-in-environment basic-environment) (system)
  (system-loaded-branch system))		;ditto

(defmethod (set-system-branch-loaded-in-environment basic-environment) (system new-value)
  (setf (system-loaded-branch system) new-value))

(defmethod (with-system-environment-internal basic-environment)
	   (system-op top-level-p continuation &rest keys)
  (ignore system-op top-level-p keys)
  (funcall continuation))


;; The flavor upon which "ephemeral" environments, such as the running Lisp
;; world, are built
(defflavor basic-ephemeral-environment
	()
	(basic-environment)
  :abstract-flavor
  (:required-methods not-in-cold-load-environment))

(defmethod (environment-salvable basic-ephemeral-environment) () nil)


;; The flavor upon which permanent environments, such as the NFep .ENV files,
;; are built
(defflavor basic-salvable-environment
	()
	(basic-environment)
  :abstract-flavor
  (:required-methods load-environment dump-environment environment-pathname))

(defmethod (environment-salvable basic-salvable-environment) () t)

;; Salvable environments are never in "the cold load" (I don't think...)
(defmethod (not-in-cold-load-environment basic-salvable-environment) () t)


;; These guys get the environment object and all the keywords passed to
;; the top-level system operation
;; The environment should keep track of whether or not it has already been
;; loaded, or whether is has been side-effected, so that LOAD-ENVIRONMENT
;; and DUMP-ENVIRONMENT can decide whether to reload (or write or) the
;; environment.  Naturally, this protocol should be handled by each
;; environment-type, since it will surely differ from one to another.
;; ENVIRONMENT-PATHNAME is likely to be dependent of what keys are passed
;; in, e.g., for the NFep environment :BOARD-SET and :FEP-VERSION will
;; affect the name of the .ENV file
(defgeneric load-environment (environment system-op &rest keys)
  (declare (values loaded-p)))
(defgeneric dump-environment (environment system-op &rest keys))
(defgeneric environment-pathname (environment system-op &rest keys)
  (declare (values pathname)))


(defun canonicalize-environment-name (env-name)
  (intern-in-keyword-package (if (typep env-name 'basic-environment)
				 (environment-name env-name)
			       env-name)))

;; Macro used to define an environment
(defprop defenvironment "Environment" si:definition-type-name)
(defmacro defenvironment (env-name env-type &optional options &body body)
  (declare (zwei:indentation 2 3 3 1))
  (when (memq :name options)
    (ferror "You may not explicitly specify :NAME in a DEFENVIRONMENT form"))
  (when (not (null body))
    (ferror "Bodies are not yet supported in DEFENVIRONMENT forms"))
  (let ((env-name (canonicalize-environment-name env-name)))
    `(progn
       (record-source-file-name ',env-name 'defenvironment)
       (define-environment-internal ',env-name ',env-type ',options))))

(defun undefenvironment (env-name)
  (let* ((env (find-environment-named env-name))
	 (env-name (environment-name env)))
    (setq *all-environments* (delq env *all-environments*))
    (let* ((all-sfns (get env-name :source-file-name))
	   (sfn (assq 'defenvironment all-sfns)))
      (setq all-sfns (delq sfn all-sfns))
      (if (null all-sfns)
	  (si:nremprop env-name :source-file-name)
	(putprop env-name all-sfns :source-file-name)))))

(defun define-environment-internal (env-name env-type options &optional body)
  (ignore body)
  (let* ((env-type (or (cdr (assq env-type *environment-type-flavor-alist*))
		       (ferror "There is no such environment type as ~S" env-type)))
	 (env (lexpr-funcall #'make-instance 
			     env-type :name env-name options)))
    (let ((old-env (find-environment-named (environment-name env) nil)))
      (when old-env
	(setq *all-environments* (delq old-env *all-environments*))
	;; Update all the systems which use this environment to point to the
	;; new environment.  Doing this here saves us from having to do a
	;; FIND-ENVIRONMENT-NAMED repeatedly in time-critical places.
	(loop for system-name in (environment-systems old-env)
	      as system = (find-system-named system-name)
	      do (setf (system-environment system) env))
	;; Copy the list of systems into the new environment
	(setf (environment-systems env) (environment-systems old-env)))
      (push env *all-environments*))
    env))

(defun find-environment-named (env-name &optional (error-p t))
  (if (typep env-name 'basic-environment)
      env-name
    (setq env-name (canonicalize-environment-name env-name))
    (cond ((loop for env in *all-environments*
		 when (or (eq env-name (environment-name env))
			  ;; Shouldn't really need these
			  (string-equal env-name (environment-name env))
			  (string-equal env-name (environment-pretty-name env)))
		   do (return env)))
	  (error-p
	   (ferror "The environment ~A has not been defined" env-name)))))

(defvar *machine-type-environment-alist* nil)
(defun find-environment (machine-type 
			 &optional (default (find-environment-named 'lisp-world)))
  (or (second (assq machine-type *machine-type-environment-alist*))
      default))

;; The environment of a subsystem is the environment of its parent.
;; Note that we never try to bind the environment of a subsystem, we
;; always explicitly bind the parent.
(defmethod (system-environment subsystem) ()
  (let ((system (subsystem-parent-system self)))
    (if system
	(system-environment system)
	;; Bootstrapping problem: if the subsystem does not yet have a
        ;; parent, use the Lisp world environment.
	(find-environment-named 'lisp-world))))


;; Convenient macro to define a new environment type
(defprop define-environment-type define-environment-type zwei:definition-function-spec-type)
(defprop define-environment-type "Environment type" si:definition-type-name)
(defmacro define-environment-type (type &body base-flavors)
  (when (null base-flavors)
    (ferror "You have not supplied a base environment flavor for ~S" type))
  (let ((flavor (fintern "~A-ENVIRONMENT" type)))
    `(progn
       (record-source-file-name ',type 'define-environment-type)
       (defprop ,flavor (,type define-environment-type) si:flavor-parent)
       (let ((old (assq ',type *environment-type-flavor-alist*)))
	 (when old
	   (setq *environment-type-flavor-alist* (delq old *environment-type-flavor-alist*)))
	 (push '(,type . ,flavor) *environment-type-flavor-alist*))
       (defflavor ,flavor () (,@base-flavors)))))


;; Define the environment which represents the running Lisp world
(define-environment-type :lisp-world basic-ephemeral-environment)

(defmethod (encache-file-properties lisp-world-environment) (pathnames)
  (fs:multiple-file-plists pathnames))

(defmethod (probe-file lisp-world-environment) (pathname)
  ;; Signal the correct flavor of error by trying to get it again.
  (with-open-file (probe pathname :direction :probe :if-does-not-exist :error)
    (send probe :creation-date)))

(defmethod (get-file-loaded-info lisp-world-environment) (pathname pkg)
  (let ((info (sys:get-file-loaded-id pathname pkg :find)))
    ;; INFO is in the form (<logical-pathname> . <date-loaded>)
    (when info
      (cons (send (car info) :translated-pathname) (cdr info)))))

;; If we are running in the cold-load environment, then we really do have to
;; do the long MULTIPLE-FILE-PLISTS, because QLD has loaded pieces of the
;; various systems without having reconciled this with the system objects.
(defmethod (not-in-cold-load-environment lisp-world-environment) ()
  (let ((system-system (find-system-named 'system nil t)))
    ;; We are in the cold-load environment if (1) there is no SYSTEM system,
    ;; or (2) the SYSTEM system has not yet been loaded
    (not (or (null system-system)
	     (null (system-version-loaded system-system))))))


(defmethod (compile-lisp-file lisp-world-environment) (source binary pkg)
  (compiler:compile-file source binary pkg))

(defmethod (load-binary-file lisp-world-environment) 
	   (pathname &key verbose print (if-does-not-exist :error)
			  ((:package pkg) nil) default-package
			  (set-default-pathname scl:*load-set-default-pathname*))
  (declare (ignore print if-does-not-exist set-default-pathname))
  (cl:load pathname
	   :verbose verbose
	   :default-package default-package :package pkg))

(defmethod (machine-type-supports-sct-forms-p lisp-world-environment) (machine-type)
  (declare (ignore machine-type))
  t)

(defmethod (machine-type-preprocessor-atom lisp-world-environment) (machine-type)
  machine-type)

(defmethod (machine-type-simplify-preprocessor-atoms lisp-world-environment)
	   (machine-type atoms)
  (let ((3600-p (memq ':|3600| atoms))
	(imach-p (memq ':IMach atoms))
	(vlm-p (memq ':VLM atoms)))
    (cond ((and 3600-p imach-p vlm-p)
	   (setf atoms (cl:set-difference atoms '(:|3600| :IMach :VLM)))
	   (cl:pushnew :Genera atoms))
	  ((and imach-p vlm-p)
	   (when (eq machine-type (first (last *all-machine-types*)))
	     ;; This method is called once for each possible machine type.
	     ;; If we were to perform this optimization on any but the last
	     ;; type, we'd be called again with just #+:IMach and change it
	     ;; to #+(and IMach (not VLM)) which, of course, would be incorrect.
	     (setf atoms (cl:set-difference atoms '(:VLM)))))
	  (imach-p
	   (setf atoms (cl:set-difference atoms '(:IMach)))
	   (cl:pushnew '(and IMach (not VLM)) atoms))))
  atoms)

(defmethod (default-in-package-form lisp-world-environment) (machine-type)
  (declare (ignore machine-type))
  nil)

(defmethod (in-package-form lisp-world-environment) (machine-type package syntax)
  (declare (ignore machine-type package syntax))
  nil)

(defmethod (note-system-compiled lisp-world-environment)
	   (system version branch status &rest keys
	    &key no-load never-load no-compile
		 (increment-version t increment-version-p)
		 (update-directory t update-directory-p)
		 real-version real-branch
		 loading-unloaded-modules
		 machine-type-for-encaching
	    &allow-other-keys)
  (ignore version branch keys real-branch)
  (let ((dont-load (or no-load never-load))
	(incremented-version nil))
    ;; Update the version and component directory, and set *VERSION*
    ;; to the real version number.  Set the status, too
    (if (and increment-version
	     (system-maintain-journals *system*)
	     (or increment-version-p
		 ;;--- Wrong place for a query
		 (request-confirmation "Increment major version number for ~A? "
				       *system*)))
	(let ((version (increment-system-major-version *system* status dont-load)))
	  ;;if we are just recompiling for a different machine type,
	  ;;don't change status
	  (unless  machine-type-for-encaching
	    (setf (system-status system) status))
	  (setq incremented-version t)
	  (setq *version* version)
	  ;; Don't update the in-core version if we didn't load anything
	  (unless dont-load
	    (setf (system-version-loaded *system*) *version*))
	  (when (not *silent-p*)
	    (format t "~&~A version ~@(~D~) created~%" *system* version)))
	(if (not (system-maintain-journals *system*))
	    (setf (system-version-loaded *system*) :newest)
	    ;; Be sure that we have some sort of version number recorded
	    (let ((version (if (numberp real-version)
			       real-version
			       (get-system-major-version-from-directory *system* :latest))))
	      (setq *version* version)
	      (unless dont-load
		(setf (system-version-loaded *system*) *version*)
		;; :INCREMENT-VERSION NIL means "don't increment the version
		;; on disk".  We still need to be sure that the version we have
		;; in this world is the one we now have loaded, so that writing
		;; the journal files does the right thing.
		(when (system-patchable *system*)
		  (add-patch-system *system* *version*))
		;;if we are just recompiling for a different machine type,
		;;don't change status
		(unless  machine-type-for-encaching
		  (set-system-status *system* status *version*))
		(setq incremented-version t)))))
    (unless dont-load
      (setf (system-branch-loaded *system*)
	    (or *branch* (system-default-system-branch *system*))))
    (when (system-maintain-journals *system*)
      (when update-directory
	(when (or update-directory-p
		  ;;--- Wrong place for a query
		  (request-confirmation "Update component and system directory for ~A? "
					*system*))
	  (let ((designator (if (and (keywordp update-directory)
				     (neq update-directory :latest))
				update-directory :latest)))
	    ;; Add the new system to the system-dir, and designate it appropriately.
	    ;; If we didn't change the in-core version number, then pass the new
	    ;; version number explicitly so that the system-dir gets the right number.
	    ;; Things like :UPDATE-DIRECTORY :RELEASED does the obvious thing.
	    (add-loaded-system-to-directory *system* designator
					    (if dont-load *version*)
					    :no-load no-load :never-load never-load
					    :no-compile no-compile))))
      ;; Might need to set the system's status, too.  Don't do it again
      ;; if we did it above
      (unless incremented-version
	;; Sigh, need to do this here since SET-SYSTEM-STATUS needs it
	(when (and (system-patchable *system*)
		   (not dont-load))
	  (add-patch-system *system* *version*))
	;;if we are just recompiling for a different machine type,
	;;don't change status
	(unless  machine-type-for-encaching
	  (set-system-status *system* status *version*))))
    ;; If we loaded the system, we might need to make it patchable, too
    (when (and (system-patchable *system*)
	       (not dont-load))
      (add-patch-system *system* *version*))
    (unless loading-unloaded-modules
      (record-all-unloaded-system-modules)
      (unless dont-load
	(load-all-unloaded-system-modules)))))

(defmethod (note-system-loaded lisp-world-environment)
	   (system version branch status &rest keys
	    &key no-load never-load
		 dont-set-version 
		 loading-unloaded-modules
	    &allow-other-keys)
  (ignore version branch keys)
  (let ((dont-load (or no-load never-load)))
    (setf (system-status system) status)
    (unless dont-load
      (setf (system-branch-loaded *system*)
	    (or *branch* (system-default-system-branch *system*)))
      (if (or dont-set-version (not (system-maintain-journals *system*)))
	  (setf (system-version-loaded *system*)
		(if (system-maintain-journals *system*) *version* :newest))
	  ;; This kludge handles loading version :NEWEST
	  (let* ((version
		   (cond ((numberp *version*)
			  *version*)
			 ((eq *version* :newest)
			  (get-system-major-version-from-directory *system* :latest))
			 ((keywordp *version*)
			  (get-system-major-version-from-directory *system* *version*))))
		 (*version* version))
	    (setf (system-version-loaded *system*) *version*)
	    (when (system-patchable *system*)
	      (add-patch-system *system* *version*))
	    )))
    (unless loading-unloaded-modules		;don't recurse doing this
      (record-all-unloaded-system-modules)
      (unless dont-load
	(load-all-unloaded-system-modules)))))

;; Make a single instance of the Lisp world environment
(defenvironment lisp-world :lisp-world)


;;--- Needed for compatibility with 7.1, where this was not a method on systems
(defgeneric file-newer-than-file-p (&rest args)
  (declare (arglist system pathname-1 pathname-2 &optional module))
  (:function (if (typep (first args) 'basic-system)
		 (lexpr-funcall (flavor:generic file-newer-than-file-p) args)
	       (lexpr-funcall (flavor:generic file-newer-than-file-p) *system* args))))

(defun (compiler:style-checker obsolete-form file-newer-than-file-p) (form)
  (destructuring-bind (function . args) form
    (unless (or (= (length args) 4)
		(and (= (length args) 3)
		     (eq (first args) '*system*)))
      (compiler:warn "~S is an obsolete form for ~S;~@
		      you should use (~S ~S ~S ~S) instead."
	  form function
	  function '*system* (first args) (second args)))))

;; PATHNAME-2 need not exist yet (it is assumed to be output from PATHNAME-1 in some way).
(defmethod (file-newer-than-file-p system) (pathname-1 pathname-2 &optional module)
  (if (or *date-testing-off*
	  (null module)
	  (not (null (product-file-type-default module))))
      (or *date-testing-off*
	  ;; Don't need to filter for a system which has not been loaded before,
	  ;; because this only gets called when we want to compile something
	  (> (system-get-creation-date self pathname-1)
	     (system-get-creation-date self pathname-2 t))
	  (and (numberp *version*)
	       (not (eql *version* (system-version-loaded self)))))
    ;; If this module produces no output file, then we compare the creation
    ;; time of the source file with the creation time of the system itself.
    (let ((entry (assq name *cached-system-creation-dates*)))
      (if entry
	  (< (cdr entry) (system-get-creation-date self pathname-1))
	(let ((major-version (get-system-major-version-from-directory name :newest t))
	      system-creation-date)
	  (cond ((and patchable (numberp major-version))
		 ;; We have a patchable system, so we can use the creation time of
		 ;; the first patch as the creation time of the entire system.
		 (let ((patch-dir (sct:uncached-read-patch-directory name major-version)))
		   (setq system-creation-date
			 (version-date (first (patch-dir-version-list patch-dir))))))
		((not maintain-journals)
		 ;; Can't tell, be conservative
		 (return-from file-newer-than-file-p t))
		((cdr cached-component-dir-file-info)
		 ;; If the system isn't patchable, use the cached component-dir.
		 ;; From time to time, things may get compiled unnecessarily.
		 (setq system-creation-date (cdr cached-component-dir-file-info)))
		(t
		 (return-from file-newer-than-file-p t)))
	  ;; Cache the creation date of this system, and return the right answer
	  (push (cons name system-creation-date) *cached-system-creation-dates*)
	  (< system-creation-date (system-get-creation-date self pathname-1)))))))

(defmethod (file-newer-than-file-p subsystem) (pathname-1 pathname-2 &optional module)
  (file-newer-than-file-p (subsystem-parent-system self) pathname-1 pathname-2 module))

;;--- Needed for compatibility with 7.1, where this was not a method on systems
(defgeneric file-newer-than-installed-p (&rest args)
  (declare (arglist system pathname &optional module))
  (:function (if (typep (first args) 'basic-system)
		 (lexpr-funcall (flavor:generic file-newer-than-installed-p) args)
	       (lexpr-funcall (flavor:generic file-newer-than-installed-p) *system* args))))

(defun (compiler:style-checker obsolete-form file-newer-than-installed-p) (form)
  (destructuring-bind (function . args) form
    (unless (or (= (length args) 3)
		(and (= (length args) 2)
		     (eq (first args) '*system*)))
      (compiler:warn "~S is an obsolete form for ~S;~@
		      you should use (~S ~S ~S~@[ ~S~]) instead."
	  form function
	  function '*system* (first args) (second args)))))

(defmethod (file-newer-than-installed-p system) (pathname &optional module)
  (or *date-testing-off*
      ;; Immediately return T if this system has never been loaded before,
      ;; unless we are loading the initial system
      (and (null (system-version-loaded self))
	   (not-in-cold-load-environment environment))
      (let (file-info
	    loaded-info)
	(or (null (setq loaded-info (system-get-loaded-id self pathname module)))
	    (null (setq file-info (system-get-file-info self pathname)))
	    (not (equal loaded-info file-info))))
      (and (numberp *version*)
	   (typep self 'system)
	   (not (eql *version* (system-version-loaded self))))))

(defmethod (file-newer-than-installed-p subsystem) (pathname &optional module)
  (file-newer-than-installed-p (subsystem-parent-system self) pathname module))

(defmethod (system-get-creation-date system) (pathname &optional no-error-p)
  (error-restart (error "Retry getting creation date of ~A" pathname)
    (cond ((cl:getf (get-file-property-list self pathname) :creation-date))
	  ((or no-error-p) -1)
	  (t
	   (probe-file environment pathname)))))

(defmethod (system-get-file-info system) (pathname)
  (let ((plist (get-file-property-list self pathname)))
    (when plist
      (or (cl:getf plist :info)			;in case we ever cache these
	  (cons (cl:getf plist :truename) (cl:getf plist :creation-date))))))

(defmethod (system-get-loaded-id system) (pathname module)
  (let ((pkg (and module (package-for-module module self))))
    (let-if default-package
	    ((package default-package))
      (get-file-loaded-info environment pathname pkg))))

(defmethod (get-file-property-list system) (pathname &optional error-p)
  (declare (values info pathname))
  (unless files-info
    (encache-files-of-system self))
  (multiple-value-bind (info path found-p)
      (get-info-for-pathname pathname files-info)
    (cond
      (found-p
       (values info path))
      (error-p
       (error 'fs:qfile-not-found :pathname pathname
				  :error-description "File not found in internal cache"))
      (t
       ;; By now, PATHNAME should be fully merged with all the defaults
       (destructuring-bind (path . properties)
	   ;; ENCACHE-FILE-PROPERTIES returns a list, ergo CAR
	   (car (encache-file-properties environment (list pathname)))
	 (setf (get-info-for-pathname path files-info) properties)
	 (values properties path))))))

(defmethod (tick-file-property-list system) (pathname)
  (when (not *date-testing-off*)
    (when (neq *version* :newest)
      (unless files-info
	(encache-files-of-system self)))
    (multiple-value-bind (info nil found-p)
	(get-info-for-pathname pathname files-info)
      (when (and found-p info)
	;; Tick the creation date and the version number by removing the
	;; old pathname from the table, putting it back with a version
	;; of .NEWEST, and faking a more recent creation date
	;;--- Pretty unmodular, but I don't have any better schemes
	(with-stack-list (key pathname *current-machine-type*)
	  (cl:remhash key files-info))
	(setf (cl:getf info :creation-date) (time:get-universal-time))
	(setf (get-info-for-pathname (send pathname :new-version :newest) files-info)
	      info)))))

(defmethod (tick-file-property-list subsystem) (pathname)
  (tick-file-property-list (subsystem-parent-system self) pathname))
