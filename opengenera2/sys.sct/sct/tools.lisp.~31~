;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SCT; Base: 10; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Random tools for hacking systems

(defvar *count-lines-state*)

(define-system-operation :count-lines-in
  #'(named-lambda count-lines-driver
		  (source ignore ignore
			  &key count-bytes count-lines &allow-other-keys)
      (multiple-value-bind (bytes lines definitions)
	  (count-lines-in-file source count-bytes count-lines)
	(when bytes
	  (push `(,source ,bytes ,lines ,definitions) *count-lines-state*))))
  #'(named-lambda count-lines-documentation
		  (source ignore ignore &rest ignore)
      (format standard-output "~&Count~[~;ing~;ed~] lines in file ~A"
	      *system-pass* source))
  :arglist
  (system-name &rest keys
	       &key (version :newest) (machine-types :all)
	       (count-lines t) (count-bytes t) (query nil) (silent t)
	       &allow-other-keys)
  :class :normal :encache nil
  :system-branch-required t
  :plan-filter
  #'(named-lambda count-lines-in-system-filter (system-op file module &rest ignore)
      (ignore system-op module)
      (let ((count-p (not (scl:gethash file *pathname-mark-table*))))
	(setf (scl:gethash file *pathname-mark-table*) t)
	count-p))
  :body-wrapper
  `(let ((*pathname-mark-table* (scl:make-hash-table :number-of-values 0))
	 (*count-lines-state* nil))
     (when (or count-lines count-bytes)
       ,@BODY
       (setq *count-lines-state* (nreverse *count-lines-state*))
       (let ((total-bytes 0)
	     (total-lines 0)
	     (total-definitions 0))
	 (loop for (nil bytes lines definitions) in *count-lines-state* doing
	   (incf total-bytes bytes)
	   (when lines (incf total-lines lines))
	   (when definitions (incf total-definitions definitions)))
	 (scl:fresh-line)
	 (flet ((cell (value)
		  (scl:formatting-cell (t :align-x :right)
		    (if (null value)
			(format t "N//A")
			(format t "~:D" value)))))
	   (scl:formatting-table (t :inter-column-spacing "xx")
	     (scl:with-character-face (:italic)
	       (scl:formatting-column-headings ()
		 "File" "Characters" "Lines" "Definitions"))
	     (loop for (pathname bytes lines definitions) in *count-lines-state* doing
	       (scl:formatting-row ()
		 (scl:formatting-cell (t) (format t "~A" pathname))
		 (cell bytes)
		 (cell lines)
		 (cell definitions)))
	     (scl:with-character-face (:italic)
	       (scl:formatting-row ()
		 (scl:formatting-cell () (format t "Total"))
		 (cell total-bytes)
		 (cell total-lines)
		 (cell total-definitions)))))))))

(defun count-lines-in-file (file &optional count-bytes count-lines)
  (with-open-file (stream file :direction :input :element-type :default)
    (when (send stream :characters)
      (cond ((and count-bytes (not count-lines))
	     (return-from count-lines-in-file
	       (values (send stream :length) nil nil)))
	    (count-lines
	     (let ((bytes 0)
		   (lines 0)
		   (definitions (and (eq (send file :canonical-type) :lisp) 0)))

	       (cl:multiple-value-setq (lines definitions)
		 (si:with-stack-array (buffer 1000. :type 'art-fat-string
					      :fill-pointer 0)
		   (loop doing
		     (multiple-value-bind (nchars eof more-p)
			 (send stream :string-line-in nil buffer)
		       (when (and eof (zerop nchars))
			 (return-from count-lines-in-file
			   (values bytes lines definitions)))
		       (when (null more-p)
			 (incf bytes (string-length buffer))
			 (incf lines 1)
			 (when (and definitions (string-equal buffer "(def" 0 0 4))
			   (incf definitions)))))))))))))


(defun copy-file-p (system-op pathname module
		    &key (copy-sources :use-system-value) (copy-binaries :use-system-value)
		    &allow-other-keys)
  (ignore system-op)
  ;; Only copy this file once per top-level copy operation
  (when (scl:gethash pathname *pathname-mark-table*)
    (return-from copy-file-p nil))
  (setf (scl:gethash pathname *pathname-mark-table*) t)
  (let ((source (if (eq copy-sources :use-system-value)
		    (module-distribute-sources module)
		  (or copy-sources
		      (eq (module-distribute-sources module) :always))))
	(binary (if (eq copy-binaries :use-system-value)
		    (module-distribute-binaries module)
		  (or copy-binaries
		      (eq (module-distribute-binaries module) :always)))))
    (if source
	(or binary
	    (not (destination-file-p pathname)))
        (and binary
	     (or (destination-file-p pathname)
		 (eq (send pathname :canonical-type) :bfd))))))

(defun copy-journals-and-patches
       (system-op &rest keys
	&key copy-patches (copy-journals copy-patches)
	     (copy-sources :use-system-value) (copy-binaries :use-system-value)
	&allow-other-keys)
  (ignore system-op keys)
  (when (typep *system* 'subsystem)
    (return-from copy-journals-and-patches (values nil nil)))
  (let ((plans-to-prepend nil)
	(plans-to-append nil))
    (push (make-plan (make-instance 'lisp-module :name "System Declaration"
				    :distribute-sources :always
				    :distribute-binaries :never)
		     *system*
		     :inputs (mapcar #'(lambda (x)
					 (let ((path (first x)))
					   (when (null (send path :version))
					     (setf path (send path :new-pathname :version :newest)))
					   path))
				     (get-system-input-and-output-defsystem-files
				       *system*
				       (if (system-maintain-journals *system*) *version* nil))))
	  plans-to-prepend)
    (when (system-maintain-journals *system*)
      (when copy-journals
	(push (make-plan (make-instance 'plan-overhead-module :name "System Directory"
					:distribute-sources :always
					:distribute-binaries nil)
			 *system*
			 :inputs (list (current-version-patch-system-pathname
					 *system* :system-directory)))
	      plans-to-append))
      (when (or copy-journals copy-patches)
	(let ((*version*
		(if (eq *version* :newest)
		    (or (get-system-major-version-from-directory
			  *system* *journals-to-use-when-distributing-newest* t)
			(when (neq *journals-to-use-when-distributing-newest* :latest)
			  (sct-inform
			      "~&No ~@(~A~) version designated for system ~A, ~
			   will try to use Latest"
			    *journals-to-use-when-distributing-newest* *system*)
			  (get-system-major-version-from-directory *system* :latest t)))
		    *version*)))
	  (when copy-journals
	    (push (make-plan (make-instance 'plan-overhead-module :name "Journals"
					    :distribute-sources :always
					    :distribute-binaries nil)
			     *system*
			     :inputs (list (current-version-patch-system-pathname
					     *system* :component-directory *version*)))
		  plans-to-append))
	  (when (and copy-patches (system-patchable *system*))
	    (push (make-plan (make-instance 'plan-overhead-module :name "Patches"
					    :distribute-sources t :distribute-binaries t)
			     *system* :inputs (distribution-patch-file-pathnames
						*system* *version*
						:distribute-sources copy-sources
						:distribute-binaries copy-binaries
						:copy-patches copy-patches
						:included-files-checkpoint :none))
		  plans-to-append)))))
    (values (nreverse plans-to-prepend) (nreverse plans-to-append))))

(defun copy-system-reporter (original ignore ignore &rest keys
			     &key destination &allow-other-keys)
  (multiple-value-bind (input output)
      (cl:apply #'copy-target-pathname original keys)
    ;; If :DESTINATION wasn't supplied, we must be doing a Show System Plan xxx Copy.
    (if (and destination (null output))
	(format standard-output "~&~[Skip~;Skipping~;Skipped~] file ~A" *system-pass* input)
	(format standard-output "~&Cop~[y~;ying~;ied~] file ~A~@[ to ~A~]"
		*system-pass* input output))))

(defun copy-system-copier (original ignore ignore &rest keys
			   &key copy-creation-date copy-author create-directories
				clobber never-clobber silent
			   &allow-other-keys)
  (multiple-value-bind (input output)
      (cl:apply #'copy-target-pathname original :need-version t keys)
    (cond ((null output)
	   (cl:warn "Could not find or map file ~A." input))
	  ((or clobber
	       (condition-case ()
		    (let ((target (probef (fs:merge-pathnames output input))))
		      (or (null target)
			  (and (not never-clobber)
			       (cl:y-or-n-p "Overwrite existing file ~A?  " target))))
		  (fs:directory-not-found
		    t)))
	   (copyf input output
		  :copy-creation-date copy-creation-date :copy-author copy-author
		  :create-directories create-directories
		  :report-stream (and (not silent) standard-output))))))


(defun copy-target-pathname (original-source-pathname
			     &key need-version destination flatten-files &allow-other-keys
			     &aux source-pathname)
  (setq source-pathname (send original-source-pathname :translated-pathname))
  (when (and (not flatten-files)
	     (fs:pathname-vc-p source-pathname))
    (setq source-pathname (send source-pathname :new-pathname
				:version :newest
				:vc-branch nil :vc-version nil)))
  (when (and need-version
	     (eq (if (fs:pathname-vc-p source-pathname)
		     (send source-pathname :vc-version)
		     (send source-pathname :version))
		 :newest))
    (condition-case ()
	 (setq source-pathname (cl:truename source-pathname))
       ((fs:file-not-found fs:directory-not-found)
	(return-from copy-target-pathname (values source-pathname nil)))))
  (let ((target-source (if (and flatten-files
				(fs:pathname-vc-p source-pathname))
			   (fs:flatten-version-control-pathname source-pathname)
			   source-pathname)))
    (when (not need-version)
      (setf target-source (send target-source :new-pathname :version nil)))
    (flet ((logical (path)
	     (if (typep original-source-pathname 'fs:logical-pathname)
		 (send original-source-pathname :back-translated-pathname path)
		 path)))
      (values source-pathname
	      (cond ((null destination) nil)
		    ((listp destination)
		     (let ((old-phys (send target-source :translated-pathname)))
		       (loop for (from to) in destination
			     for from-pn = (fs:parse-pathname from)
			     for to-pn = (fs:parse-pathname to)
			     do
			 (when (and (typep original-source-pathname 'fs:logical-pathname)
				    (typep from-pn 'fs:logical-pathname))
			   (let ((logical-target-source (logical target-source)))
			     (when (send from-pn :pathname-match logical-target-source)
			       (return (send from-pn :translate-wild-pathname
					     to-pn logical-target-source)))))
			 (when (send from-pn :pathname-match old-phys)
			   (return (send from-pn :translate-wild-pathname to-pn old-phys))))))
		    (t
		     (let* ((path (fs:parse-pathname destination))
			    (path1 (send path
					 :new-pathname
					 :name (send target-source :name)
					 :canonical-type (send target-source :canonical-type)
					 :version (send target-source :version))))
		       (if (send path :directory-wild-p)
			   (let ((logical-target-source (logical target-source)))
			     (send (send logical-target-source :new-pathname
					 :directory
					 (cl:remove-if-not
					   #'(lambda (x)
					       (member x '(:wild :wild-inferiors)))
					   (send path :directory)))
				   :translate-wild-pathname path1 logical-target-source))
			   path1))))))))

(define-system-operation :copy
  'copy-system-copier
  'copy-system-reporter
  :arglist
    (system-name &rest keys
     &key (version :newest) (machine-types :all)
	  destination copy-patches (copy-journals copy-patches)
	  (copy-sources :use-system-value) (copy-binaries :use-system-value)
	  (copy-creation-date t) (copy-author t) create-directories
	  clobber never-clobber flatten-files compress-files
     &allow-other-keys)
  :class :normal :funny-p t :encache nil
  :system-branch-required t
  :plan-filter #'copy-file-p
  :additional-plan-constructor #'copy-journals-and-patches
  :body-wrapper
    `(progn (cl:check-type destination (or cl:pathname string (and list (not null)))
			   "a filename or a non-null filename wildcard alist")
	    (let ((*pathname-mark-table* (scl:make-hash-table :number-of-values 0))
		  (*destination-file-types*
		    (append *destination-file-types*
			    (all-file-types-for-machine-type machine-types))))
	      ,@BODY)))


(defun print-source-categories (&rest systems)
  (loop with stream = standard-output
	for system-name in systems
	as system = (find-system-named system-name)
	doing
    (format stream "~&~VSystem ~A~~%" '(nil :bold nil) system)
    (loop for file in (get-all-system-input-files system)
	  as category = (or (pathname-source-category file) :basic)
	  collect `(,(send file :generic-pathname) ,category) into result
	  finally
	    (setq result (si:stable-sort result
					 (lambda (x y)
					   ;; Sort by source category.  By sheer good
					   ;; luck, "basic" < "optional" < "restricted".
					   (alphalessp (second x) (second y)))))
	    (scl:formatting-table (stream
				   :inter-column-spacing (* 4 (send stream :char-width)))
	      (loop for (pathname category) in result
		    doing
		(scl:formatting-row (stream)
		  (scl:formatting-cell (stream)
		    (format stream "  ~A" pathname))
		  (scl:formatting-cell (stream)
		    (format stream "~:(~A~)" category))))))
    (format stream "~%")))

