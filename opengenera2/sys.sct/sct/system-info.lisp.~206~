;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SCT; Base: 10; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Information strings and labels

;; Make up prettily formatted system-version-info with furnished start- and
;; end-comment.  Put end-comment string on each line but the last, and start-comment
;; on all; insert initial-string after the start-comment on the first line only.
(defun formatted-system-version-info (start-comment &optional (end-comment "")
				      (initial-string "") (right-margin 84.))
  (let ((line-length
	  (- right-margin (string-length start-comment) (string-length end-comment)))
	;; We must assure that the only RETURNs in the result were what we put there.
	(s (cl:substitute #\space #\return (system-version-info)))
	(ll ())
	(line-start 0)
	(init-string initial-string)
	(init-string-length (string-length initial-string)))
    (flet ((fill-line (prev-comma-pos &optional no-eol)
	     (setq ll
		   (append ll
			   (ncons 
			     (format nil "~A~A~A~A~:[~%~]"
			       start-comment init-string
			       (substring s line-start
					  (if prev-comma-pos (1+ prev-comma-pos) 0))
			       end-comment no-eol))))
	     (setq line-start (if prev-comma-pos (+ prev-comma-pos 2) 0))
	     (setq init-string "" init-string-length 0)))
      ;; Fill to fit within a right-margin-column-minus-comment-strings line
      (loop for start = 0 then (+ comma-pos 2)
	    as prev-comma-pos = nil then comma-pos
	    as comma-pos = (string-search ", " s start)
	    until (null comma-pos)
	    when (> (+ (- comma-pos line-start) init-string-length) line-length)
	      do (fill-line prev-comma-pos)
	    finally
	      (when (> (- (string-length s) line-start) line-length)
		(fill-line prev-comma-pos))
	      (setq end-comment "")
	      (fill-line (1- (string-length s)) t)))
    (format nil "~{~A~}" ll)))

;; Return the list of systems (the real objects) for use by system-version-info and
;; compute-system-versions.
(defun collect-systems-for-version-info (&optional (verbose nil) (collect-visible-only-p t))
  (loop for system in *all-systems*
	with item = (get-release-internal-item)
	with version-list = (and item (get item :versions))
	;; This is far more complicated than it should be!
	when (and (typep system 'system)
		  (or (numberp (system-version-loaded system))
		      (and (not (system-maintain-journals system))
			   (eq (system-version-loaded system) :newest)))       
		  (or verbose
		      (and
			(or (null item)
			    (system-unreleased-p
			     (or (system-loaded-patches system)
				 (make-patch-system
				   name-and-atom (patch-system-name-and-atom system)
				   version (system-version-loaded system)
				   status (system-status system)))
			     version-list))
			(or (null collect-visible-only-p)
			    (null (system-is-invisible system))))))
	  collect system))

;; Format and return a string that describes the current system.
;; This string lists all the systems in this world with their versions,
;; the microcode version, and any additional information.
;; With BRIEF-FORMAT = :DISK-LABEL, return stuff suitable for disk label comment.
;; With BRIEF-FORMAT = :FINGER, return stuff suitable for a finger display.
;; The default of BRIEF-FORMAT (= nil) is to return a full-length info string, suitable of
;; bug report banners and patch-file responsibility comments.
;; If you modify this function, modify COMPUTE-SYSTEM-VERSIONS and
;; SYSTEM-VERSION-FOR-DISK-SAVE also.
(defun system-version-info (&optional (brief-format nil))
  (let ((first t)
	(first-in-group t)			;only for disk-label format
	(system-list (collect-systems-for-version-info nil nil))
	(output-string (make-array 3000 :type 'art-fat-string :fill-pointer 0))
	tem status old-status)
    ;; Note:  This is potentially dangerous.  We count on with-output-to-string and
    ;; string-nconc to keep track of the fill-pointer properly.  The performance win 
    ;; is too great to use FORMAT.
    (with-output-to-string (s output-string)
     (macrolet ((write-string (&rest items)
		  `(string-nconc output-string ,@items))
		(write-integer (integer)
		  `(si:print-integer ,integer 10 s)))
      (multiple-value-bind (released-major released-minor released-status open-genera-version)
	  (get-release-version)
	(when (and released-major (neq released-status :interim))
	  (setq first nil)
	  (setq tem (assq released-status system-status-alist))
	  (setq tem (cond ((null tem) (string released-status))
			  (brief-format (third tem))
			  (t (second tem))))
	  (when (not (equal tem ""))
	    (write-string tem " "))
	  ;; Special case: if new patches have been made to System, don't put "Rel"
	  ;; into the "brief" string.
	  (if (and brief-format
		   (equal tem "")
		   (loop for x in system-list
			 thereis (string-equal (system-short-name x) "System")))
	      ;; Inhibit a leading space.
	      (setq first t)
	      ;; Normal case, start with release version
	      (when (and open-genera-version (member :vlm cl::*features*))
		(write-string "Open Genera " open-genera-version)
		(if (eq brief-format :disk-label)
		    (write-string ", ")
		    (unless brief-format
		      (write-string ","))
		    (write-string " ")
		    (unless (eq brief-format :finger)
		      (when (not (equal tem ""))
			(write-string tem " ")))))
	      (write-string "Genera ")
	      (write-integer released-major)
	      (write-string ".")
	      (if (numberp released-minor)
		  (write-integer released-minor)
		  (write-string released-minor)))))
      (dolist (sys system-list)
	(let ((short-name (system-short-name sys)))
	  (when (not (or (and (eq brief-format :disk-label)
			      (not (memq :disk-label (system-advertised-in sys))))
			 (and (eq brief-format :finger)
			      (not (memq :finger (system-advertised-in sys))))))
	    (cond ((null (setq tem (assq (or (third (system-loaded-patches sys))
					     (system-status sys))
					 system-status-alist)))
		   (setq status (string (system-status sys))))
		  ((eq brief-format :finger)
		   (setq status ""))
		  (brief-format
		   (when (eq brief-format :disk-label)
		     (setq old-status status))
		   (setq status (third tem)))
		  (t
		   (setq status (second tem))))
	    (setq first-in-group
		  (and (eq brief-format :disk-label) (not (equal status old-status))))
	    (unless first
	      (cond ((and (eq brief-format :disk-label) first-in-group)
		     (write-string "; "))
		    ((or (null brief-format)
			 (and (eq brief-format :disk-label) (null first-in-group)))
		     (write-string ", "))
		    (t (write-string " "))))
	    (setq first nil)
	    (when (not (or (equal status "")
			   (and (eq brief-format :disk-label)
				(not first-in-group))))
	      (write-string status " "))
	    (when (not (and brief-format (equal short-name "System")))
	      (write-string
		(let ((pretty-name (system-pretty-name sys)))
		  (if brief-format
		      (if (< (string-length short-name) (string-length pretty-name))
			  short-name pretty-name)
		      pretty-name)) " "))
	    (let ((major-version (system-version-loaded sys))
		  (minor-version (version-number (first (patch-version-list
							  (system-loaded-patches sys))))))
	      (if (not (numberp major-version))
		  (write-string major-version)
		(write-integer major-version)
		(when (numberp minor-version)
		  (write-string ".")
		  (write-integer minor-version)))))))
      (when (not brief-format)
	(unless (cold-load-version-is-released-or-unspecified)
	  (write-string ", cold load ")
	  (write-integer si:cold-load-version-number))
	#+3600
	(multiple-value-bind (name version)
	    (si:microcode-description)
	  (unless (and (null name)
		       (eql version (get (get-release-internal-item) :microcode)))
	    (write-string ", microcode ")
	    (when name (write-string name " "))
	    (write-integer version)))
	#+IMach
	(progn
	  (write-string ", Ivory Revision ")
	  (write-string (si:ivory-revision-name))
	  (when (cli::fp-coprocessor-enabled-p)
	    (write-string " (FPA enabled)"))
	  (sys:system-case
	    (merlin
	      (let ((scsi-parts (loop for board in (cli::find-merlin-boards)
				      when (and (typep board 'cli::merlin-io-board)
						(cli::board-scsi-part board))
					collect (cli::board-scsi-part board))))
		(when scsi-parts
		  (write-string ", SCSI part " (first scsi-parts)))))
	    (otherwise nil)))
	;; Old versions of the FEP forgot to set SI:FEP-VERSION-NUMBER
	(when (variable-boundp si:fep-version-number)
	  (write-string #+3600 ", FEP "
			#+(and IMach (not VLM)) ", IFEP "
			#+(and IMach VLM) ", VLM Debugger ")
	  (write-integer si:fep-version-number)
	  (when (and (fixp si:fep-version-number)
		     ( si:fep-version-number 120.)
		     (plusp (string-length si:*current-fep-overlays*)))
	    (write-string ", " si:*current-fep-overlays*)))
	#+IMach
	(progn
	  (sys:system-case
	    (VLM nil)				;VLM doesn't have a Boot ROM
	    (otherwise
	      (write-string ", Boot ROM version ")
	      (if (and (variable-boundp sys:*boot-prom-version*)
		       (fixp sys:*boot-prom-version*))
		  (write-integer sys:*boot-prom-version*)
		  (write-string "Unknown"))))
	  (sys:system-case
	    ((Domino VLM) nil)			;Domino and VLM don't have Device PROMs
	    (otherwise
	      (write-string ", Device PROM version ")
	      (if (and (variable-boundp (sys:boot-device-prom-version))
		       (fixp (sys:boot-device-prom-version)))
		  (write-integer (sys:boot-device-prom-version))
		  (write-string "Unknown"))))
	  (sys:system-case
	    (MacIvory
	      (dolist (item (MacIvory-compute-system-versions t nil))
		(write-string ", " (first item) " " (second item))))
	    (Solstice
	      (dolist (item (Solstice-compute-system-versions t nil))
		(write-string ", " (first item) " " (second item))))
	    (Alpha-VLM
	      (dolist (item (AXP-OSF-VLM-compute-system-versions t nil))
		(write-string ", " (first item) " " (second item))))
	    (embedded
	      (let ((model (si:machine-model)))
		(unless (zerop (sys:emb-host-version-0))
		  (write-string (format nil ", ~A host v0 #x~16R"
				  model (sys:emb-host-version-0))))
		(unless (zerop (sys:emb-host-version-1))
		  (write-string (format nil ", ~A host v1 #x~16R"
				  model (sys:emb-host-version-1))))
		(unless (zerop (sys:emb-host-version-2))
		  (write-string (format nil ", ~A host v2 #x~16R"
				  model (sys:emb-host-version-2))))
		(unless (zerop (sys:emb-host-version-3))
		  (write-string (format nil ", ~A host v3 #x~16R"
				  model (sys:emb-host-version-3))))))
	    (otherwise nil)))
	(if (null tv:all-the-screens)		;tell what screen(s) are being used
	    (write-string ", no window system")
	    (dolist (screen tv:all-the-screens)
	      (unless (typep screen 'tv:generic-who-line-screen-mixin)
		(write-string ", ")
		(write-integer (tv:sheet-inside-width screen))
		(write-string "x")
		(write-integer (tv:sheet-inside-height screen))
		(write-string " " (si:display-device-pretty-name
				    (send screen :display-device-type))))))
	(multiple-value-bind (nil serial-number) (si:machine-model)
	  (when (and serial-number (not (zerop serial-number)))
	    (write-string ", Machine serial number ")
	    (write-integer serial-number)))
	#+IMach
	(sys:system-case
	  (MacIvory
	    (multiple-value-bind (info-available-p model cpu fpa-p memory-size keyboard)
		(cli::Macintosh-hardware-info)
	      (ignore cpu fpa-p)
	      (when info-available-p
		(write-string
		  (format nil ", Macintosh~@[ ~A~]~@[ (~DMB RAM)~]~@[, ~A~]"
		    (cli::Macintosh-model-name model)
		    (and model memory-size (floor memory-size 1_20))
		    (cli::Macintosh-keyboard-type-name keyboard))))))
	  (otherwise nil)))
      (if (null brief-format)
	  (loop for ppi in *private-patch-info*
		do (write-string ", " (private-patch-info-description ppi))
		   (when (private-patch-info-pathname ppi)
		     (write-string " (from " (private-patch-info-pathname ppi) ")")))
	  (let ((pp-count (length *private-patch-info*)))
	    (when (plusp pp-count)
	      (write-string ", ")
	      (write-integer pp-count)
	      (write-string " private patch")
	      (when (> pp-count 1) (write-string "es")))))
      (when (plusp (string-length system-additional-info))
	(write-string ", " system-additional-info))))
    output-string))
 

;; Stub for compatibility...
(deff si:system-version-info 'system-version-info)
(compiler:make-obsolete si:system-version-info "use SCT:SYSTEM-VERSION-INFO instead")


;; Mimic what draw-initial-window-hair will call the system.  C.f., also
;; COMPUTE-SYSTEM-VERSIONS
(defun lisp-release-string ()
  (let ((system-is-genera t))
    (multiple-value-bind (released-major released-minor released-status open-genera-version)
	(sct:get-release-version)
      (when (or (null released-major) (eq released-status :interim))
	(multiple-value (released-major released-minor released-status)
	  (sct:get-system-version))
	(setq system-is-genera nil
	      open-genera-version nil))
      (if (and open-genera-version (member :vlm cl::*features*))
	  (format nil "Open Genera ~A" open-genera-version)
	  (format nil "~:[System~;Genera~] ~D.~D"
		  system-is-genera released-major released-minor)))))

(defun set-*lisp-release-string* ()
  (let ((l-r-s (lisp-release-string)))
    (setf (fill-pointer sys:*lisp-release-string*) (cl:length l-r-s))
    (cl:replace sys:*lisp-release-string* l-r-s)))

(add-initialization "Set *LISP-RELEASE-STRING*" '(set-*lisp-release-string*)
		    '(:before-cold))

;; Compute (but don't print) the information for PRINT-HERALD.  If you
;; modify this function, modify LISP-RELEASE-STRING,
;; SYSTEM-VERSION-INFO, and SYSTEM-VERSION-FOR-DISK-SAVE also.
;; Return a list of things, each thing describing a particular system.
;; Each thing is a list of <annotated system name>, optionally <major version>,
;;    optionally <minor version>.
;; The <version>s are numbers or strings.  If both major and minor versions are numbers, 
;; print them with a "." between.
(defun compute-system-versions (verbose)
  (macrolet ((rs (x)
	       `(if (not (equal ,x ""))
		    (string-append ,x " ")
		    "")))
    (nconc
      (multiple-value-bind (released-major released-minor released-status open-genera-version)
	  (get-release-version)
	(when (and released-major (neq released-status :interim))
	  (nconc
	    (when (and open-genera-version (member :vlm cl::*features*))
	      (list
		(list (string-append (rs (second (assq released-status system-status-alist)))
				     "Open Genera")
		      open-genera-version)))
	    (list
	      (list (string-append (rs (second (assq released-status system-status-alist)))
				   "Genera")
		    released-major released-minor)))))
      (loop for system in (collect-systems-for-version-info verbose)
	      collect
		(list (string-append
			(rs (second (assq (or (third (system-loaded-patches system))
					      (system-status system))
					  system-status-alist)))
			(system-pretty-name system))
		      (system-version-loaded system)
		      (version-number (first
					(patch-version-list (system-loaded-patches system))))
		      system
		      (system-branch-loaded system)))
      (when verbose
	(unless (cold-load-version-is-released-or-unspecified)
	  (list (list "Cold load" si:cold-load-version-number))))
      (let ((release-internal-item (get-release-internal-item)))
	(nconc
	  #+3600
	  (multiple-value-bind (microcode-name microcode-version-number)
	      (si:microcode-description)
	    (when (or verbose
		      (not (eql microcode-version-number
				(get release-internal-item :microcode))))
	      (list (list (string-append  "Microcode " microcode-name)
			  microcode-version-number))))
	  #+IMach
	  (when (or verbose
		    (not (cl:member sys:(%read-internal-register %register-chip-revision)
				    (get release-internal-item :ivory-revision)
				    :test 'eql)))
	    (list (list "Ivory Revision" (si:ivory-revision-name))))
	  (when (or verbose
		    (not (variable-boundp si:fep-version-number))
		    (let* ((fep-versions (get release-internal-item :fep-version))
			   (fep-version (if (listp fep-versions)
					    (cl:getf fep-versions
						     #+3600 sys:*io-board-type*
						     #+(and IMach (not VLM)) :IFEP
						     #+(and IMach VLM) :VLM-Debugger)
					    fep-versions)))
		      (not (eql fep-version si:fep-version-number))))
	    (list* (list #+3600 "FEP"
			 #+(and IMach (not VLM)) "IFEP"
			 #+(and IMach VLM) "VLM Debugger"
			 (if (variable-boundp si:fep-version-number)
			     si:fep-version-number
			     "(unknown)"))
		   (and verbose
			#+3600 (and (variable-boundp si:fep-version-number)
				    (fixp si:fep-version-number)
				    ( si:fep-version-number 120.))
			(plusp (string-length si:*current-fep-overlays*))
			(loop for from = 0 then (+ comma 2)
			      as comma = (string-search-char #/, si:*current-fep-overlays*
							     from)
			      collect (list (substring si:*current-fep-overlays* from comma))
			      while comma))))
	  #+IMach
	  (sys:system-case
	    (MacIvory
	      (MacIvory-compute-system-versions
		verbose (get release-internal-item :MacIvory)))
	    (Solstice
	      (Solstice-compute-system-versions
		verbose (get release-internal-item (si:machine-model))))
	    (Alpha-VLM
	      (AXP-OSF-VLM-compute-system-versions
		verbose (get release-internal-item :AXP-OSF-VLM)))
	    (Embedded
	      ;; Always include host software versions for "unknown" embeddings.
	      (let ((model (si:machine-model)))
		(nconc
		  (unless (zerop (sys:emb-host-version-0))
		    (list (list (string-append model " host v0")
				(format nil "#x~16R" (sys:emb-host-version-0)))))
		  (unless (zerop (sys:emb-host-version-1))
		    (list (list (string-append model " host v1")
				(format nil "#x~16R" (sys:emb-host-version-1)))))
		  (unless (zerop (sys:emb-host-version-2))
		    (list (list (string-append  model " host v2")
				(format nil "#x~16R" (sys:emb-host-version-2)))))
		  (unless (zerop (sys:emb-host-version-3))
		    (list (list (string-append model " host v3")
				(format nil "#x~16R" (sys:emb-host-version-3))))))))
	    (otherwise nil))))
      (when verbose
	(multiple-value-bind (model serial-number) (si:machine-model)
	  model
	  (when (and serial-number (not (zerop serial-number)))
	    (list (list "Machine serial number" serial-number)))))
      (loop for ppi in *private-patch-info*
	    collect (list (private-patch-info-description ppi)
			  (private-patch-info-pathname ppi))))))


#+(and IMach (not VLM))
(defun MacIvory-compute-system-versions (verbose released-versions)
  (nconc
    ;; Applications that have contacted us via RPC.
    (let ((mac-aps (macintosh-internals::mac-applications-versions-for-herald)))
      (loop for (application-name version-description) in mac-aps
	    when (or verbose
		     (not (equal application-name "Genera"))
		     (not (equal version-description
				 (cl:getf released-versions :Genera-application-version))))
	      collect
		(list (string-append application-name " application") version-description)))
    ;; Autoloaded RPC servers.
    (let ((mac-rpc-servers (macintosh-internals::mac-rpc-server-versions-for-herald)))
      (loop for (server-name server-version) in mac-rpc-servers
	    when (or verbose
		     (let ((item (cl:assoc server-name
					   (cl:getf released-versions :RPC-server-versions)
					   :test #'string-equal)))
		       (or (null item)
			   (not (equal server-version (second item))))))
	      collect (list server-name server-version)))
    ;; MacIvory support & RPC library.
    (unless (zerop (sys:MacIvory-support-library-version))
      (let ((support-library-version
	      (mtb::format-Macintosh-version-number (sys:MacIvory-support-library-version))))
	(when (or verbose
		  (not (equal support-library-version
			      (cl:getf released-versions :support-library-version))))
	  (list (list "MacIvory & RPC library" support-library-version)))))
    ;; Life support version.
    (let ((life-support-version
	    (mtb::format-Macintosh-version-number (sys:MacIvory-life-support-version))))
      (when (or verbose
		(not (equal life-support-version
			    (cl:getf released-versions :life-support-version))))
	(list (list "MacIvory life support" life-support-version))))
    ;; Symbolics keyboard support software version.
    (unless (zerop (sys:MacIvory-Symbolics-keyboard-version))
      (let ((Symbolics-keyboard-version
	      (mtb::format-Macintosh-version-number
		(sys:MacIvory-Symbolics-keyboard-version))))
	(when (or verbose
		  (not (cl:member Symbolics-keyboard-version
				  (cl:getf released-versions :Symbolics-keyboard-versions)
				  :test #'equal)))
	  (list (list "Symbolics keyboard" Symbolics-keyboard-version)))))
    ;; Macintosh OS version.
    (unless (zerop (sys:MacIvory-MacOS-version))
      (let ((MacOS-version
	      (mtb::format-Macintosh-version-number (sys:MacIvory-MacOS-version))))
	(when (or verbose
		  (not (cl:member MacOS-version
				  (cl:getf released-versions :MacOS-versions)
				  :test #'equal)))
	  (list (list "Macintosh System Software" MacOS-version)))))))

#+(and IMach (not VLM))
(defun solstice-compute-system-versions (verbose released-versions)
  (flet ((format-version (trunk-major trunk-minor branch-major branch-minor)
	   (cond ((= trunk-major 255))
		 ((= branch-major 255)
		  (format nil "~d.~d" trunk-major trunk-minor))
		 (t
		  (format nil "~d.~d.~d.~d"
			  trunk-major trunk-minor branch-major branch-minor)))))
    (let ((applications nil))
      (nconc
	;; Applications that have contacted us (or that we have contacted) via RPC
	(loop for (application-name version-description)
		  in (rpc::unix-applications-versions-for-herald)
	      for app-name-length = (string-length application-name)
	      ;; If the name ends with "server", don't append "application"
	      for name = (if (and (> app-name-length 6)
				  (cl:string-equal application-name "server"
					      :start1 (- app-name-length 6)))
			     application-name
			     (string-append application-name " application"))
	      when (or verbose
		       (and
			 ;; Is this the released Genera application?
			 (not (and (equal application-name "Genera")
				   (equal version-description
					  (cl:getf released-versions
						   :Genera-application-version))))
			 ;; Is this a released version of an RPC server?
			 (let ((item (cl:assoc name (cl:getf released-versions
							     :RPC-server-versions)
					       :test #'string-equal)))
			   (or (null item)
			       (not (equal version-description (second item)))))))
		collect (list name version-description)
		  into aps-info
	      finally (return (setq applications aps-info)))
	;; Genera program (if not listed aboved)
	(let ((genera-program-version (format-version (sys:Solstice-boot-trunk-major)
						      (sys:Solstice-boot-trunk-minor)
						      (sys:Solstice-boot-branch-major)
						      (sys:Solstice-boot-branch-minor))))
	  (unless (or (null genera-program-version)
		      (equal genera-program-version
			     (second (cl:assoc "Genera application" applications
					       :test 'string-equal))))
	    (when (or verbose
		      (not (equal genera-program-version
				  (cl:getf released-versions :Genera-application-version))))
	      (list (list "Genera program" genera-program-version)))))
	;; Life support
	(let ((ivory-life-version (format-version (sys:Solstice-life-trunk-major)
						  (sys:Solstice-life-trunk-minor)
						  (sys:Solstice-life-branch-major)
						  (sys:Solstice-life-branch-minor))))
	  (unless (null ivory-life-version)
	    (when (or verbose
		      (not (equal ivory-life-version
				  (cl:getf released-versions :Ivory-life-program-version))))
	      (list (list "Ivory-life program" ivory-life-version)))))
	(let ((life-support-version (format-version (sys:Solstice-kernel-trunk-major)
						    (sys:Solstice-kernel-trunk-minor)
						    (sys:Solstice-kernel-branch-major)
						    (sys:Solstice-kernel-branch-minor))))
	  (unless (null life-support-version)
	    (when (or verbose
		      (not (equal life-support-version
				  (cl:getf released-versions :life-support-version))))
	      (list (list "UX kernel life support" life-support-version)))))
	;; Host OS
	(multiple-value-bind (unix-version kernel-name)
	    (rpc::unix-os-version)
	  (when (or verbose
		    (not (cl:member unix-version
				    (cl:getf released-versions :Unix-versions)
				    :test #'string-equal)))
	    (list (list kernel-name unix-version))))))))

#+VLM
(defun AXP-OSF-VLM-compute-system-versions (verbose released-versions)
  (nconc
    (unless (zerop (sys:vlm-genera-major-version))
      (let ((genera-version (format nil "~D.~D"
				    (sys:vlm-genera-major-version)
				    (sys:vlm-genera-minor-version))))
	(when (or verbose
		  (not (equal genera-version
			      (cl:getf released-versions :Genera-application-version))))
	  (list (list "Genera program" genera-version)))))
    (unless (zerop (sys:vlm-axp-osf-major-release))
      (let ((osf-version (format nil "~:[V~;T~]~D~@[.~D~]~@[ (Rev. ~D~@[.~D~])~]"
				 (not (zerop (sys:vlm-axp-osf-test-version-p)))
				 (sys:vlm-axp-osf-major-release)
				 (and ( (sys:vlm-axp-osf-minor-release) 255)
				      (sys:vlm-axp-osf-minor-release))
				 (and ( (sys:vlm-axp-osf-major-revision) 255)
				      (sys:vlm-axp-osf-major-revision))
				 (and ( (sys:vlm-axp-osf-minor-revision) 255)
				      (sys:vlm-axp-osf-minor-revision)))))
	(when (or verbose
		  (not (cl:member osf-version
				  (cl:getf released-versions :Unix-versions)
				  :test #'string-equal)))
	  (list (list "DEC OSF//1" osf-version)))))))

(defconst system-version-max-length 96.)

;; This function updates the system version, asking the user.  If this is a fresh
;; cold-load, the major_version stored on the file system is incremented.
;; Returns string to go in the disk label.
;; The user is allowed to add additional commentary.  If the whole string
;; won't fit in the silly 16-character disk-label comment field, the user
;; is asked to retype it in an abbreviated form.
(defun get-new-system-version (&optional for-band)
  (let (comment
	(truncated-comment nil))
    (format t "~2&")
    (print-herald :as-if-band for-band)
    (if (not (equal system-additional-info ""))
	;; here if there is an additional comment for the band
	(progn
	  (format t "~%The herald has the following additional comment: /"~A/""
		  system-additional-info)
	  (unless (cl:y-or-n-p "~&Do you want to keep this comment? ")
	    (setq system-additional-info
		  (with-input-editing-options
		      ((:input-history-default system-additional-info))
		    (prompt-and-read :string-trim
				     "Enter a new comment or RETURN for no comment: ")))))
      ;; here if there is no additional comment yet
      (unless (cl:y-or-n-p "~2&Are you satisfied with this herald? ")
	(setq system-additional-info
	      (prompt-and-read :string-trim "Enter a comment or RETURN for no comment: "))))
    ;; Even off fresh-line-ness from entering string
    (cl:fresh-line)
    (setq comment (system-version-info :disk-label))	;print the proto-title for the band
    (loop with first-time = t
	  do (format t "~%The title for this world on the disk label is~:[ now~;~]~2~%~S.~"
		     first-time comment)
	     (when (> (string-length comment) system-version-max-length)
	       (format t "~&This is longer than the limit of ~D characters.~%~@
                          Unless you specify otherwise, this will be truncated to~2~%~S.~"
		 system-version-max-length
		 (setq truncated-comment
		       (substring comment 0 system-version-max-length))))
	  ;; (Should really parse it to abbreviate...)
	  until (cl:y-or-n-p "  Ok? ")	;will they take the truncation?
	    do (setq
		 first-time nil
		 truncated-comment nil
		 comment			;no, make them type a nonempty string
		 (with-input-editing-options ((:input-history-default comment))
		   (loop initially (format t "~2&")
			 for cmt first (prompt-and-read
					 :string-trim
					 "Enter an alternate title ~
                                          (c-m-Y to yank present version): ")
				 then (prompt-and-read
					:string-trim
					"Please try again (c-m-Y to yank present version): ")
			 as clen = (string-length cmt)
			 until (and (> clen 0)	;and be sure it fits in 16 chars
				    ( clen system-version-max-length))
			 do (format t "~&You have entered a ~
                              ~:[string that is too long~;null band title~].~2%" (eql clen 0))
			 finally (return cmt)))))
    (or truncated-comment comment)))

(defconst *ids-band-name-abbreviations-alist* '(("Release-" "Rel")
						("System-" "Sys")
						("Inc-" "Inc")
						("from-" "")))

;; If you modify this function, modify SYSTEM-VERSION-INFO and COMPUTE-SYSTEM-VERSIONS also
(defun system-version-for-disk-save (&optional incremental)
  (let ((s (make-array 64. :type 'art-string :fill-pointer 0)))
    (multiple-value-bind (released-major released-minor released-status)
	(get-release-version)
      (let ((sys (cl:find (find-system-named "System") (unreleased-patch-systems)
			  :key #'patch-system)))
	(if (and released-major (not sys) (neq released-status :interim))
	    (format s "~:[~;Inc-~]Genera-~D-~D"
	      incremental
	      released-major
	      (if (stringp released-minor)
		  (cl:nsubstitute #\- #\.
				  (substring released-minor 0
					     (string-search-char #\Space released-minor))
				  :test #'char-equal)
		  released-minor))
	    (format s "~A-~D-~D"
	      (if incremental "Inc" "System")
	      (patch-version sys) (version-number (first (patch-version-list sys)))))
	(when incremental
	  (format s "-from-~A"
	    (let* ((band (si:loaded-band-name))
		   (appendage (if (cl:pathnamep band)
				  (send band :name)
				  "Unknown")))
	      ;; trim known substrings
	      (loop for (key replacement) in *ids-band-name-abbreviations-alist*
		    do
		(loop as bp = (string-search key appendage)
		      while bp do
		  (setq appendage
			(string-append (substring appendage 0 bp)
				       replacement
				       (substring appendage (+ bp (string-length key)))))))
	      appendage))
	  (when (> (fill-pointer s) 32.)
	    (setf (fill-pointer s) (- 32. 4))
	    (format s "-etc")))))
    (substring s 0)))


;; List of messages to explain those status values that need explanation.
(defconst system-status-message-alist
  '((:experimental .
     "Note:  ~A is experimental.  Please :Load Patches.")
    (:broken .
     "Caution:  ~A has been marked as /"broken/"; using this world-load may not work.")))
     
;; Warn the user, based on the system status.
(defun print-system-status-warning (&optional (system "System"))
  (let ((system (find-system-named system t t)))
    (multiple-value-bind (nil nil status)
	(get-system-version system)
      (let ((message (cdr (assq status system-status-message-alist))))
	(when (not (null message))
	  (format t "~&~@{~}~2%" message (system-pretty-name system)))))))


;;; Release numbering.

;; *RELEASES* is an alist whose keys are (<major rel#> <minor rel#> .
;; <reserved>), and the rest is alternating keywords and values.  The
;; value with the :VERSIONS keyword is a list of items, one for each
;; system in the release; each item is (<name of patch system> <major
;; sys#> <minor sys#> <models> . <reserved>), where <models> is a list
;; of machine models (:XL1200, etc) or architectures (:IMach, :|3600|)
;; that restrict the applicability of the item.  The value with the
;; :AUTHOR keyword is a string, being the user-id of the person who
;; officially "released" these numbers.  The value with the :STATUS
;; keyword is :EXPERIMENTAL, :RELEASED, :OBSOLETE, or :BROKEN.  The
;; value of the :RELEASE-DATE keyword is a parseable date string set to
;; the date of FCS, as closely as can be determined; this is used to set
;; the compyright year in the legal-fine-print.  More keywords can be
;; added in the future.  PRINT-HERALD is changed to print the release
;; m.n, preceeded by Experimental or whatever if it is not released, and
;; then only numbers of systems if those are not the same as that
;; *RELEASES* says.  More recent (higher numbered) releases are always
;; earlier in the list, for GET-RELEASE.
;;
;; When you make the System system patch which sets *RELEASES* for a 
;; given release, make sure that said patch also runs the function
;; SI:INITIALIZE-LEGAL-NOTICES.  In this way, we can guarantee that 
;; the fallback legal notice variables are as up-to-date as possible
;; in the distribution worlds.
(defconst *releases*
 	  '#10r(((8 5) :versions
		 (("System" 452 22)
		  ("CLOS" 439 0)
		  ("RPC" 443 1)
		  ("Embedding-Support" 435 0)
		  #-VLM
		  ("MacIvory-Support" 447 0)
		  ("UX-Support" 443 0)
		  ("Development-Utilities" 439 0)
		  ("Old-TV" 436 0)
		  ("Zwei" 436 0)
		  ("Utilities" 445 0)
		  ("RPC-Development" 438 0)
		  #-VLM
		  ("MacIvory-Development" 434 0)
		  ("UX-Development" 442 0)
		  ("Server-Utilities" 442 0)
		  #-VLM
		  ("Serial" 435 0)
		  ("Hardcopy" 446 0)
		  ("Zmail" 442 1)
		  #-VLM
		  ("SCSI" 430 0)
		  ("Tape" 444 3)
		  #-VLM
		  ("LMFS" 442 1)
		  ("NSage" 440 0)
		  ("Extended-Help" 441 0)
		  ("CL-Developer" 428 0)
		  ("DOC" 440 12)
		  ("IP-TCP" 452 6)
		  ("IP-TCP-DOC" 423 0)
		  ("CLX" 450 0)
		  ("X-Remote-Screen" 448 3)
		  ("X-Documentation" 422 0)
		  ("NFS-Client" 442 0)
		  ("NFS-Documentation" 424 0)
		  #+ignore
		  ("Lock-simple" 437 0)
		  #+ignore
		  ("compare-merge" 404 0)
		  #+ignore
		  ("Version-Control" 405 0)
		  #+ignore
		  ("Version-Control-doc" 401 0)
		  )
		 :open-genera "2.0"
		 :cold-load-version (:VLM 7 :IMach 1 :|3600| 1)
		 :fep-version (:vlm-debugger 329 :obs 127 :nbs 208 :ifep 328)
		 :microcode 430
		 :ivory-revision (2 4 5)
		 :AXP-OSF-VLM (:Genera-application-version "5.21"
			       :Unix-versions ("V1.3 (Rev. 111)"))
		 :MacIvory (:Genera-application-version "5.6"
			    :RPC-server-versions (("Toolbox Servers" "4.2")
						  ("MacIvory SCSI Manager Server" "4.3.1")
						  ("MacIvory Serial I//O Server" "1.2.1"))
			    :support-library-version "6.3.2"
			    :life-support-version "4.4.0"
			    :Symbolics-keyboard-versions ("2.1")
			    :MacOS-versions ("6.0.7" "6.0.8" "7.0" "7.0.1" "7.1"))
		 :UX400S (:Genera-application-version "2.5.1.2"
			  :RPC-server-versions (("UX Support Server" "2.5.1.3"))
			  :ivory-life-program-version "2.5.1.2"
			  :life-support-version "2.5.1.2"
			  :Unix-versions ("4.1.1"))
		 :UX1200S (:Genera-application-version "2.5.1.2"
			   :RPC-server-versions (("UX Support Server" "2.5.1.3"))
			   :ivory-life-program-version "2.5.1.2"
			   :life-support-version "2.5.1.2"
			   :Unix-versions ("4.1.1"))
		 :author "Reti"
		 :status :released
		 :release-date "07 October 1998")
		#+VLM
		((8 "4") :versions
		 (("System" 450 3)
		  ("CLOS" 435 0)
		  ("RPC" 439 0)
		  ("Embedding-Support" 431 0)
		  ("UX-Support" 440 0)
		  ("Development-Utilities" 435 0)
		  ("Old-TV" 433 0)
		  ("Zwei" 433 0)
		  ("Utilities" 442 0)
		  ("RPC-Development" 434 0)
		  ("UX-Development" 439 0)
		  ("Hardcopy" 443 0)
		  ("Zmail" 440 0)
		  ("Tape" 442 1)
		  ("NSage" 438 0)
		  ("Extended-Help" 439 0)
		  ("CL-Developer" 426 0)
		  ("Doc" 439 0)			;i.e., "Documentation Database"
		  ("IP-TCP" 449 0)
		  ("IP-TCP-Doc" 421 0)
		  ("CLX" 446 0)
		  ("X-Remote-Screen" 445 1)
		  ("X-Documentation" 420 0)
		  ("NFS-Client" 439 0)
		  ("NFS-Documentation" 422 0)
 		  )
		 :open-genera "1.0"
		 :cold-load-version (:VLM 7)
		 :fep-version (:vlm-debugger 329)
		 :ivory-revision (5)
		 :AXP-OSF-VLM (:Genera-application-version "5.21"
			       :Unix-versions ("V1.3 (Rev. 111)"))
		 :author "Palter"
		 :status :released
		 :release-date "10 September 1993")
		#+VLM
		((8 "4 Beta II") :versions
		 (("System" 449 35)
		  ("CLOS" 434 0)
		  ("RPC" 438 2)
		  ("Embedding-Support" 430 3)
		  ("MacIvory-Support" 444 1 (:IMach))
		  ("UX-Support" 439 0 (:IMach :VLM))
		  ("Development-Utilities" 434 0)
		  ("Old-TV" 432 0)
		  ("Zwei" 432 0)
		  ("Utilities" 441 0)
		  ("RPC-Development" 433 1 (:IMach :VLM))
		  ("MacIvory-Development" 431 0 (:IMach))
		  ("UX-Development" 438 0 (:IMach :VLM))
		  ("Server-Utilities" 439 0 (:|3600| :IMach))
		  ("Serial" 432 0 (:|3600| :IMach))
		  ("Hardcopy" 442 0)
		  ("Zmail" 439 0)
		  ("SCSI" 428 0 (:|3600| :IMach))
		  ("Tape" 441 2)
		  ("LMFS" 440 0 (:|3600| :IMach))
		  ("NSage" 437 0)
		  ("Extended-Help" 438 0)
		  ("CL-Developer" 425 0)
		  ("Doc" 438 49)			;i.e., "Documentation Database"
		  ("IP-TCP" 448 0)
		  ("IP-TCP-Doc" 420 0)
		  ("CLX" 445 2 (:IMach :VLM))
		  ("X-Remote-Screen" 444 4 (:IMach :VLM))
		  ("X-Documentation" 419 0 (:IMach :VLM))
		  ("NFS-Client" 438 0)
		  ("NFS-Documentation" 421 0)
 		  )
		 :cold-load-version (:VLM 1)
		 :fep-version (:vlm-debugger 329)
		 :ivory-revision (5)
		 :AXP-OSF-VLM (:Genera-application-version "4.0"
			       :Unix-versions ("V1.2 (Rev. 10)"))
		 :author "Palter"
		 :status :experimental
		 :release-date "16 July 1993")
		#+VLM
		((8 "4 Beta I") :versions
		 (("System" 449 20)
		  ("CLOS" 434 0)
		  ("RPC" 438 0)
		  ("Embedding-Support" 430 1)
		  ("MacIvory-Support" 444 1 (:IMach :VLM))
		  ("UX-Support" 439 0 (:IMach :VLM))
		  ("Development-Utilities" 434 0)
		  ("Old-TV" 432 0)
		  ("Zwei" 432 0)
		  ("Utilities" 441 0)
		  ("RPC-Development" 433 0 (:IMach :VLM))
		  ("MacIvory-Development" 431 0 (:IMach :VLM))
		  ("UX-Development" 438 0 (:IMach :VLM))
		  ("Server-Utilities" 439 0 (:|3600| :IMach))
		  ("Serial" 432 0 (:|3600| :IMach))
		  ("Hardcopy" 442 0)
		  ("Zmail" 439 0)
		  ("SCSI" 428 0 (:|3600| :IMach))
		  ("Tape" 441 0 (:|3600| :IMach))
		  ("LMFS" 440 0 (:|3600| :IMach))
		  ("NSage" 437 0)
		  ("Extended-Help" 438 0)
		  ("CL-Developer" 425 0)
		  ("Doc" 438 42)			;i.e., "Documentation Database"
		  ("IP-TCP" 448 0)
		  ("IP-TCP-Doc" 420 0)
		  ("CLX" 445 2 (:IMach :VLM))
		  ("X-Remote-Screen" 444 1 (:IMach :VLM))
		  ("X-Documentation" 419 0 (:IMach :VLM))
		  ("NFS-Client" 438 0)
		  ("NFS-Documentation" 421 0)
		  ("Conversion-Tools" 433 0 (:VLM))
		  ("CLIM" 64 0 (:VLM))
		  ("Genera-CLIM" 64 0 (:VLM))
		  ("CLX-CLIM" 64 0 (:VLM))
		  ("Postscript-CLIM" 64 0 (:VLM))
		  ("CLIM-Doc" 64 0 (:VLM))
		  ("CLIM-Demo" 64 0 (:VLM))
 		  )
		 :cold-load-version (:VLM 1)
		 :fep-version (:vlm-debugger 329)
		 :ivory-revision (5)
		 :author "Palter"
		 :status :experimental
		 :release-date "18 June 1993")
		((8 3) :versions
		 (("System" 446 21)
		  ("CLOS" 432 1)
		  ("RPC" 436 0)
		  ("Embedding-Support" 428 1)
		  ("MacIvory-Support" 442 1 (:IMach))
		  ("UX-Support" 437 0 (:IMach))
		  ("Development-Utilities" 432 0)
		  ("Old-TV" 430 0)
		  ("Zwei" 430 2)
		  ("Utilities" 439 4)
		  ("RPC-Development" 431 0(:IMach))
		  ("MacIvory-Development" 429 0 (:IMach))
		  ("UX-Development" 436 0 (:IMach))
		  ("Server-Utilities" 437 1)
		  ("Serial" 430 0)
		  ("Hardcopy" 440 1)
		  ("Zmail" 437 0)
		  ("LMFS-DEFSTORAGE" 415 0)
		  ("SCSI" 426 2)
		  ("Tape" 439 0)
		  ("LMFS" 438 0)
		  ("NSage" 435 0)
		  ("Extended-Help" 436 0)
		  ("CL-Developer" 423 0)
		  ("Doc" 437 0)			;i.e., "Documentation Database"
		  ("IP-TCP" 446 1)
		  ("IP-TCP-Doc" 419 0) 
		  ("CLX" 442 0 (:IMach))
		  ("X-Remote-Screen" 440 3 (:IMach))
		  ("X-Documentation" 418 0 (:IMach))
		  ("NFS-Client" 436 0)
		  ("NFS-Documentation" 420 0)
 		  )
		 :cold-load-version (:IMach 1 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 328)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.6"
			    :RPC-server-versions (("Toolbox Servers" "4.2")
						  ("MacIvory SCSI Manager Server" "4.3.1")
						  ("MacIvory Serial I//O Server" "1.2.1"))
			    :support-library-version "6.3.2"
			    :life-support-version "4.3.6"
			    :Symbolics-keyboard-versions ("2.1")
			    :MacOS-versions ("6.0.7" "6.0.8" "7.0" "7.0.1" "7.1"))
		 :UX400S (:Genera-application-version "2.5.1.2"
			  :RPC-server-versions (("UX Support Server" "2.5.1.3"))
			  :ivory-life-program-version "2.5.1.2"
			  :life-support-version "2.5.1.2"
			  :Unix-versions ("4.1.1"))
		 :UX1200S (:Genera-application-version "2.5.1.2"
			   :RPC-server-versions (("UX Support Server" "2.5.1.3"))
			   :ivory-life-program-version "2.5.1.2"
			   :life-support-version "2.5.1.2"
			   :Unix-versions ("4.1.1"))
		 :author "Palter"
		 :status :released
		 :release-date "26 March 1993")
		#+IMach
		((8 "3 MacIvory Delivery") :versions
		 (("System" 446 21)
		  ("CLOS" 432 1)
		  ("RPC" 436 0)
		  ("Embedding-Support" 428 1)
		  ("MacIvory-Support" 442 1 (:IMach))
 		  )
		 :cold-load-version (:IMach 1)
		 :fep-version (:ifep 328)
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.6"
			    :RPC-server-versions (("Toolbox Servers" "4.2")
						  ("MacIvory SCSI Manager Server" "4.3.1")
						  ("MacIvory Serial I//O Server" "1.2.1"))
			    :support-library-version "6.3.2"
			    :life-support-version "4.3.6"
			    :Symbolics-keyboard-versions ("2.1")
			    :MacOS-versions ("6.0.7" "6.0.8" "7.0" "7.0.1" "7.1"))
		 :author "Palter"
		 :status :released
		 :release-date "26 March 1993")
		#+IMach
		((8 "3 UX Delivery") :versions
		 (("System" 446 21)
		  ("CLOS" 432 1)
		  ("RPC" 436 0)
		  ("Embedding-Support" 428 1)
		  ("UX-Support" 437 0 (:IMach))
		  ("IP-TCP" 446 1) 
		  ("CLX" 442 0 (:IMach))
		  ("X-Remote-Screen" 440 3 (:IMach))
		  ("NFS-Client" 436 0)
 		  )
		 :cold-load-version (:IMach 1)
		 :fep-version (:ifep 328)
		 :ivory-revision (2 4)
		 :UX400S (:Genera-application-version "2.5.1.2"
			  :RPC-server-versions (("UX Support Server" "2.5.1.3"))
			  :ivory-life-program-version "2.5.1.2"
			  :life-support-version "2.5.1.2"
			  :Unix-versions ("4.1.1"))
		 :UX1200S (:Genera-application-version "2.5.1.2"
			   :RPC-server-versions (("UX Support Server" "2.5.1.3"))
			   :ivory-life-program-version "2.5.1.2"
			   :life-support-version "2.5.1.2"
			   :Unix-versions ("4.1.1"))
		 :author "Palter"
		 :status :released
		 :release-date "26 March 1993")
		#+IMach	 ;; 8.2 NXP ECO#1 is NXP1000-only -- The :IMach's below are redundant.
		((8 "2.1 NXP") :versions
		 (("System" 443 15)
		  ("CLOS" 428 0)
		  ("RPC" 432 0 (:IMach))
		  ("Embedding-Support" 424 2 (:IMach))
		  ("MacIvory-Support" 438 0 (:IMach))
		  ("UX-Support" 433 0 (:IMach))
		  ("Development-Utilities" 428 0)
		  ("Old-TV" 426 0)
		  ("Zwei" 426 0)
		  ("Utilities" 436 3)
		  ("RPC-Development" 427 0 (:IMach))
		  ("MacIvory-Development" 426 0 (:IMach))
		  ("UX-Development" 432 0 (:IMach))
		  ("Server-Utilities" 434 0)
		  ("Serial" 427 0)
		  ("Hardcopy" 437 0)
		  ("Zmail" 434 2)
		  ("LMFS-DEFSTORAGE" 410 0)
		  ("SCSI" 423 0)
		  ("Tape" 436 2)
		  ("LMFS" 435 0)
		  ("NSage" 432 2)
		  ("Extended-Help" 433 0)
		  ("CL-Developer" 420 0)
		  ("Doc" 431 2)			;i.e., "Documentation Database"
		  ("IP-TCP" 442 3 (:IMach))
		  ("IP-TCP-Doc" 415 0 (:IMach)) 
		  ("CLX" 438 0 (:IMach))
		  ("X-Remote-Screen" 436 4 (:IMach))
		  ("X-Documentation" 414 0 (:IMach))
		  ("NFS-Client" 432 0 (:IMach))
		  ("NFS-Documentation" 416 0 (:IMach))
 		  )
		 :cold-load-version (:IMach 2)
		 :fep-version (:ifep 328)
		 :ivory-revision (4)
		 :author "Dodds"
		 :status :released
		 :release-date "1 Dec 1992")
		#+IMach		;; 8.2 NXP is NXP1000-only -- The :IMach's below are redundant.
		((8 "2 NXP") :versions
		 (("System" 443 5)
		  ("CLOS" 428 0)
		  ("RPC" 432 0 (:IMach))
		  ("Embedding-Support" 424 0 (:IMach))
		  ("MacIvory-Support" 438 0 (:IMach))
		  ("UX-Support" 433 0 (:IMach))
		  ("Development-Utilities" 428 0)
		  ("Old-TV" 426 0)
		  ("Zwei" 426 0)
		  ("Utilities" 436 0)
		  ("RPC-Development" 427 0 (:IMach))
		  ("MacIvory-Development" 426 0 (:IMach))
		  ("UX-Development" 432 0 (:IMach))
		  ("Server-Utilities" 434 0)
		  ("Serial" 427 0)
		  ("Hardcopy" 437 0)
		  ("Zmail" 434 0)
		  ("LMFS-DEFSTORAGE" 410 0)
		  ("SCSI" 423 0)
		  ("Tape" 436 0)
		  ("LMFS" 435 0)
		  ("NSage" 432 0)
		  ("Extended-Help" 433 0)
		  ("CL-Developer" 420 0)
		  ("Doc" 431 0)			;i.e., "Documentation Database"
		  ("IP-TCP" 442 0 (:IMach))
		  ("IP-TCP-Doc" 415 0 (:IMach)) 
		  ("CLX" 438 0 (:IMach))
		  ("X-Remote-Screen" 436 0 (:IMach))
		  ("X-Documentation" 414 0 (:IMach))
		  ("NFS-Client" 432 0 (:IMach))
		  ("NFS-Documentation" 416 0 (:IMach))
 		  )
		 :cold-load-version (:IMach 2)
		 :fep-version (:ifep 328)
		 :ivory-revision (4)
		 :author "Palter"
		 :status :released
		 :release-date "18 Sep 1992")
		((8 "1.1") :versions
		 (("System" 436 37)
		  ("CLOS" 421 5)
		  ("RPC" 425 0 (:Imach))
		  ("Embedding-Support" 417 0 (:Imach))
		  ("MacIvory-Support" 431 5 (:Imach))
		  ("UX-Support" 426 0 (:Imach))
		  ("Development-Utilities" 421 2)
		  ("Old-TV" 419 0)
		  ("Zwei" 419 6)
		  ("Utilities" 429 4)
		  ("RPC-Development" 420 0 (:Imach))
		  ("MacIvory-Development" 419 0 (:Imach))
		  ("UX-Development" 425 0 (:Imach))
		  ("Server-Utilities" 427 3)
		  ("Serial" 420 3)
		  ("Hardcopy" 430 0)
		  ("Zmail" 427 4)
		  ("LMFS-DEFSTORAGE" 403 0)
		  ("SCSI" 416 5)
		  ("Tape" 429 7)
		  ("LMFS" 428 1)
		  ("NSage" 425 2)
		  ("Extended-Help" 426 0)
		  ("CL-Developer" 413 1)
		  ("Doc" 427 4)			;i.e., "Documentation Database"
		  ("IP-TCP" 435 4 (:UX400S :UX1200S))
		  ("IP-TCP-Doc" 409 0 (:UX400S :UX1200S)) 
		  ("CLX" 431 0 (:UX400S :UX1200S))
		  ("X-Remote-Screen" 429 0 (:UX400S :UX1200S))
		  ("X-Documentation" 408 0 (:UX400S :UX1200S))
		  ("NFS-Client" 425 2 (:UX400S :UX1200S))
		  ("NFS-Documentation" 410 0 (:UX400S :UX1200S))
 		  )
		 :cold-load-version (:IMach 2 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 325)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.7"
			    :RPC-server-versions (("Toolbox Servers" "4.1.2")
						  ("MacIvory SCSI Manager Server" "4.2")
						  ("MacIvory Serial I//O Server" "1.1.2"))
			    :support-library-version "6.2"
			    :life-support-version "4.2.1"
			    :Symbolics-keyboard-versions ("2.0.3")
			    :MacOS-versions ("6.0.7" "6.0.8" "7.0"))
		 :UX400S (:Genera-application-version "2.4.3.2"
			  :RPC-server-versions (("UX Support Server" "2.4.3.1"))
			  :ivory-life-program-version "2.4.3.1"
			  :life-support-version "2.4.3.1"
			  :Unix-versions ("4.1.1"))
		 :UX1200S (:Genera-application-version "2.4.3.2"
			  :RPC-server-versions (("UX Support Server" "2.4.3.1"))
			  :ivory-life-program-version "2.4.3.1"
			  :life-support-version "2.4.3.1"
			  :Unix-versions ("4.1.1"))
		 :author "Dodds"
		 :status :released
		 :release-date "4 Oct 1991")
		#+IMach
		((8 "1.1 UX Delivery") :versions
		 (("System" 436 37)
		  ("CLOS" 421 5)
		  ("RPC" 425 0 (:Imach))
		  ("Embedding-Support" 417 0 (:Imach))
		  ("UX-Support" 426 0 (:Imach))
		  ("IP-TCP" 435 4 (:UX400S :UX1200S))
		  ("CLX" 431 0 (:UX400S :UX1200S))
		  ("X-Remote-Screen" 429 0 (:UX400S :UX1200S))
		  ("NFS-Client" 425 2 (:UX400S :UX1200S))
 		  )
		 :cold-load-version (:IMach 2 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 325)
		 :microcode 430
		 :ivory-revision (2 4)
		 :UX400S (:Genera-application-version "2.4.3.2"
			  :RPC-server-versions (("UX Support Server" "2.4.3.1"))
			  :ivory-life-program-version "2.4.3.1"
			  :life-support-version "2.4.3.1"
			  :Unix-versions ("4.1.1"))
		 :UX1200S (:Genera-application-version "2.4.3.2"
			  :RPC-server-versions (("UX Support Server" "2.4.3.1"))
			  :ivory-life-program-version "2.4.3.1"
			  :life-support-version "2.4.3.1"
			  :Unix-versions ("4.1.1"))
		 :author "Dodds"
		 :status :released
		 :release-date "4 Oct 1991")
		#+IMach
		((8 "1.1 MacIvory Delivery") :versions
		 (("System" 436 37)
		  ("CLOS" 421 5)
		  ("RPC" 425 0 (:Imach))
		  ("Embedding-Support" 417 0 (:Imach))
		  ("MacIvory-Support" 431 5 (:Imach))
 		  )
		 :cold-load-version (:IMach 2 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 325)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.7"
			    :RPC-server-versions (("Toolbox Servers" "4.1.2")
						  ("MacIvory SCSI Manager Server" "4.2")
						  ("MacIvory Serial I//O Server" "1.1.2"))
			    :support-library-version "6.2"
			    :life-support-version "4.2.1"
			    :Symbolics-keyboard-versions ("2.0.3")
			    :MacOS-versions ("6.0.7" "6.0.8" "7.0"))
		 :author "Dodds"
		 :status :released
		 :release-date "4 Oct 1991")
		((8 "1") :versions
		 (("System" 436 18)
		  ("CLOS" 421 1)
		  ("RPC" 425 0 (:Imach))
		  ("Embedding-Support" 417 0 (:Imach))
		  ("MacIvory-Support" 431 0 (:Imach))
		  ("UX-Support" 426 0 (:Imach))
		  ("Development-Utilities" 421 0)
		  ("Old-TV" 419 0)
		  ("Zwei" 419 0)
		  ("Utilities" 429 0)
		  ("RPC-Development" 420 0 (:Imach))
		  ("MacIvory-Development" 419 0 (:Imach))
		  ("UX-Development" 425 0 (:Imach))
		  ("Server-Utilities" 427 1)
		  ("Serial" 420 0)
		  ("Hardcopy" 430 0)
		  ("Zmail" 427 0)
		  ("LMFS-DEFSTORAGE" 403 0)
		  ("SCSI" 416 0)
		  ("Tape" 429 0)
		  ("LMFS" 428 1)
		  ("NSage" 425 0)
		  ("Extended-Help" 426 0)
		  ("CL-Developer" 413 1)
		  ("Doc" 427 2)			;i.e., "Documentation Database"
		  ("IP-TCP" 435 2 (:UX400S :UX1200S))
		  ("IP-TCP-Doc" 409 0 (:UX400S :UX1200S)) 
		  ("CLX" 431 0 (:UX400S :UX1200S))
		  ("X-Remote-Screen" 429 0 (:UX400S :UX1200S))
		  ("X-Documentation" 408 0 (:UX400S :UX1200S))
		  ("NFS-Client" 425 0 (:UX400S :UX1200S))
		  ("NFS-Documentation" 410 0 (:UX400S :UX1200S))
 		  )
		 :cold-load-version (:IMach 2 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 325)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.6"
			    :RPC-server-versions (("Toolbox Servers" "4.1.2")
						  ("MacIvory SCSI Manager Server" "4.1.2")
						  ("MacIvory Serial I//O Server" "1.1.2"))
			    :support-library-version "6.1.4"
			    :life-support-version "4.1.3"
			    :Symbolics-keyboard-versions ("2.0.2")
			    :MacOS-versions ("6.0.7"))
		 :UX400S (:Genera-application-version "2.4.1.1"
			  :RPC-server-versions (("UX Support Server" "2.4.1.1"))
			  :ivory-life-program-version "2.4.1.1"
			  :life-support-version "2.4.1.1"
			  :Unix-versions ("4.1"))
		 :UX1200S (:Genera-application-version "2.4.1.1"
			   :RPC-server-versions (("UX Support Server" "2.4.1.1"))
			   :ivory-life-program-version "2.4.1.1"
			   :life-support-version "2.4.1.1"
			   :Unix-versions ("4.1"))
		 :author "Kaufman"
		 :status :released)
		#+IMach
		((8 "1 UX Delivery") :versions
		 (("System" 436 18)
		  ("CLOS" 421 1)
		  ("RPC" 425 0 (:Imach))
		  ("Embedding-Support" 417 0 (:Imach))
		  ("UX-Support" 426 0 (:Imach))
		  ("IP-TCP" 435 2 (:UX400S :UX1200S))
		  ("CLX" 431 0 (:UX400S :UX1200S))
		  ("X-Remote-Screen" 429 0 (:UX400S :UX1200S))
		  ("NFS-Client" 425 0 (:UX400S :UX1200S))
 		  )
		 :cold-load-version (:IMach 2 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 325)
		 :microcode 430
		 :ivory-revision (2 4)
		 :UX400S (:Genera-application-version "2.4.1.1"
			  :RPC-server-versions (("UX Support Server" "2.4.1.1"))
			  :ivory-life-program-version "2.4.1.1"
			  :life-support-version "2.4.1.1"
			  :Unix-versions ("4.1"))
		 :UX1200S (:Genera-application-version "2.4.1.1"
			   :RPC-server-versions (("UX Support Server" "2.4.1.1"))
			   :ivory-life-program-version "2.4.1.1"
			   :life-support-version "2.4.1.1"
			   :Unix-versions ("4.1"))
		 :author "Kaufman"
		 :status :released)
		#+IMach
		((8 "1 MacIvory Delivery") :versions
		 (("System" 436 18)
		  ("CLOS" 421 1)
		  ("RPC" 425 0 (:Imach))
		  ("Embedding-Support" 417 0 (:Imach))
		  ("MacIvory-Support" 431 0 (:Imach))
 		  )
		 :cold-load-version (:IMach 2 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 325)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.6"
			    :RPC-server-versions (("Toolbox Servers" "4.1.2")
						  ("MacIvory SCSI Manager Server" "4.1.2")
						  ("MacIvory Serial I//O Server" "1.1.2"))
			    :support-library-version "6.1.4"
			    :life-support-version "4.1.3"
			    :Symbolics-keyboard-versions ("2.0.2")
			    :MacOS-versions ("6.0.7"))
		 :author "Kaufman"
		 :status :released)
		((8 "1 Prototype") :versions
		 (("System" 436 9)
		  ("CLOS" 421 1)
		  ("RPC" 425 0 (:Imach))
		  ("Embedding-Support" 417 0 (:Imach))
		  ("MacIvory-Support" 431 0 (:Imach))
		  ("UX-Support" 426 0 (:Imach))
		  ("Development-Utilities" 421 0)
		  ("Old-TV" 419 0)
		  ("Zwei" 419 0)
		  ("Utilities" 429 0)
		  ("RPC-Development" 420 0 (:Imach))
		  ("MacIvory-Development" 419 0 (:Imach))
		  ("UX-Development" 425 0 (:Imach))
		  ("Server-Utilities" 427 1)
		  ("Serial" 420 0)
		  ("Hardcopy" 430 0)
		  ("Zmail" 427 0)
		  ("LMFS-DEFSTORAGE" 403 0)
		  ("SCSI" 416 0)
		  ("Tape" 429 0)
		  ("LMFS" 428 0)
		  ("NSage" 425 0)
		  ("Extended-Help" 426 0)
		  ("CL-Developer" 413 1)
		  ("Doc" 427 0)			;i.e., "Documentation Database"
		  ("IP-TCP" 435 1 (:UX400S))
		  ("IP-TCP-Doc" 409 0 (:UX400S)) 
		  ("CLX" 431 0 (:UX400S))
		  ("X-Remote-Screen" 429 0 (:UX400S))
		  ("X-Documentation" 408 0 (:UX400S))
		  ("NFS-Client" 425 0 (:UX400S))
		  ("NFS-Documentation" 410 0 (:UX400S))
 		  )
		 :cold-load-version (:IMach 1 :|3600| 1)
		 :fep-version (:obs 127 :nbs 208 :ifep 325)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.6"
			    :RPC-server-versions (("Toolbox Servers" "4.1.2")
						  ("MacIvory SCSI Manager Server" "4.1.2")
						  ("MacIvory Serial I//O Server" "1.1.2"))
			    :support-library-version "6.1.4"
			    :life-support-version "4.1.3"
			    :Symbolics-keyboard-versions ("2.0.2")
			    :MacOS-versions ("6.0.7"))
		 :UX400S (:Genera-application-version "2.4.1.1"
			  :RPC-server-versions (("UX Support Server" "2.4.1.1"))
			  :ivory-life-program-version "2.4.1.1"
			  :life-support-version "2.4.1.1"
			  :Unix-versions ("4.1"))
		 :author "Hornig"
		 :status :experimental)
		((8 "0.2") :versions
		 (("System" 425 131)
		  ("CLOS" 406 46)
		  #+IMach ("RPC" 415 0)
		  #+IMach ("Embedding-Support" 407 0)
		  #+IMach ("MacIvory-Support" 421 10)
		  #+IMach ("UX-Support" 416 0)
		  ("Development-Utilities" 410 7)
		  ("Old-TV" 408 0)
		  ("Zwei" 408 10)
		  ("Utilities" 419 13)
		  #+IMach ("RPC-Development" 410 2)
		  #+IMach ("MacIvory-Development" 409 2)
		  #+IMach ("UX-Development" 415 0)
		  ("Server-Utilities" 417 4)
		  ("Serial" 409 19)
		  ("Hardcopy" 420 7)
		  ("Zmail" 417 3)
		  ("LMFS" 418 2)
		  #+IMach ("SCSI" 406 0)
		  ("Tape" 419 8)
		  ("NSage" 415 18)
		  ("Extended-Help" 416 0)
		  ("CL-Developer" 403 3)
		  ("Doc" 420 2)			;i.e., "Documentation Database"
		  ("IP-TCP" 422 9 (:UX400S))
		  ("IP-TCP-Doc" 404 0 (:UX400S)) 
		  ("CLX" 419 3 (:UX400S))
		  ("X-Remote-Screen" 418 1 (:UX400S))
		  ("X-Documentation" 403 0 (:UX400S))
		  ("Network-RPC" 415 5 (:UX400S))
		  ("NFS-Client" 415 3 (:UX400S))
		  ("NFS-Documentation" 404 0 (:UX400S))
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 322)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.3"
			    :RPC-server-versions (("Toolbox Servers" "4.1")
						  ("MacIvory SCSI Manager Server" "4.1")
						  ("MacIvory Serial I//O Server" "1.0"))
			    :support-library-version "5.5.2"
			    :life-support-version "3.6.2"
			    :Symbolics-keyboard-versions ("2.0")
			    :MacOS-versions ("6.0.2" "6.0.3" "6.0.4" "6.0.5"))
		 :UX400S (:Genera-application-version "2.2.1.2"
			  :RPC-server-versions (("UX Support Server" "2.2.1.1"))
			  :ivory-life-program-version "2.2.1.3"
			  :life-support-version "2.2.1.3"
			  :Unix-versions ("4.1"))
		 :author "Kaufman"
		 :status :released)
		((8 "0.2 UX Delivery") :versions
		 (("System" 425 131)
		  ("CLOS" 406 46)
		  ("RPC" 415 0)
		  ("Embedding-Support" 407 0)
		  ("UX-Support" 416 0)
		  ("IP-TCP" 422 9)
		  ("CLX" 419 3)
		  ("X-Remote-Screen" 418 1)
		  ("Network-RPC" 415 5)
		  ("NFS-Client" 415 3)
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 322)
		 :microcode 430
		 :ivory-revision (2 4)
		 :UX400S (:Genera-application-version "2.2.1.2"
			  :RPC-server-versions (("UX Support Server" "2.2.1.1"))
			  :ivory-life-program-version "2.2.1.3"
			  :life-support-version "2.2.1.3"
			  :Unix-versions ("4.1"))
		 :author "Kaufman"
		 :status :released)
		((8 "0.1") :versions
		 (("System" 425 111)
		  ("CLOS" 406 39)
		  #+IMach ("RPC" 415 0)
		  #+IMach ("Embedding-Support" 407 0)
		  #+IMach ("MacIvory-Support" 421 5)
		  #+IMach ("UX-Support" 416 0)
		  ("Development-Utilities" 410 7)
		  ("Old-TV" 408 0)
		  ("Zwei" 408 8)
		  ("Utilities" 419 11)
		  #+IMach ("RPC-Development" 410 2)
		  #+IMach ("MacIvory-Development" 409 0)
		  #+IMach ("UX-Development" 415 0)
		  ("Server-Utilities" 417 4)
		  ("Serial" 409 19)
		  ("Hardcopy" 420 7)
		  ("Zmail" 417 3)
		  ("LMFS" 418 2)
		  #+IMach ("SCSI" 406 0)
		  ("Tape" 419 8)
		  ("NSage" 415 9)
		  ("Extended-Help" 416 0)
		  ("CL-Developer" 403 3)
		  ("Doc" 420 2)			;i.e., "Documentation Database"
		  ("IP-TCP" 422 6 (:UX400S))
		  ("IP-TCP-Doc" 404 0 (:UX400S)) 
		  ("CLX" 419 3 (:UX400S))
		  ("X-Remote-Screen" 418 1 (:UX400S))
		  ("X-Documentation" 403 0 (:UX400S))
		  ("Network-RPC" 415 5 (:UX400S))
		  ("NFS-Client" 415 3 (:UX400S))
		  ("NFS-Documentation" 404 0 (:UX400S))
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 321)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.3"
			    :RPC-server-versions (("Toolbox Servers" "4.1")
						  ("MacIvory SCSI Manager Server" "4.1")
						  ("MacIvory Serial I//O Server" "1.0"))
			    :support-library-version "5.5.2"
			    :life-support-version "3.6.2"
			    :Symbolics-keyboard-versions ("2.0")
			    :MacOS-versions ("6.0.2" "6.0.3" "6.0.4" "6.0.5"))
		 :UX400S (:Genera-application-version "2.2.1.2"
			  :RPC-server-versions (("UX Support Server" "2.2.1.1"))
			  :ivory-life-program-version "2.2.1.3"
			  :life-support-version "2.2.1.3"
			  :Unix-versions ("4.1"))
		 :author "Kaufman"
		 :status :released)
		((8 "0.1 MacIvory Delivery") :versions
		 (("System" 425 111)
		  ("CLOS" 406 39)
		  ("RPC" 415 0)
		  ("Embedding-Support" 407 0)
		  ("MacIvory-Support" 421 5)
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 321)
		 :microcode 430
		 :ivory-revision (2 4)
		 :MacIvory (:Genera-application-version "5.4.3"
			    :RPC-server-versions (("Toolbox Servers" "4.1")
						  ("MacIvory SCSI Manager Server" "4.1")
						  ("MacIvory Serial I//O Server" "1.0"))
			    :support-library-version "5.5.2"
			    :life-support-version "3.6.2"
			    :Symbolics-keyboard-versions ("2.0")
			    :MacOS-versions ("6.0.2" "6.0.3" "6.0.4" "6.0.5"))
		 :author "Kaufman"
		 :status :released)
		((8 "0.1 UX Delivery") :versions
		 (("System" 425 111)
		  ("CLOS" 406 39)
		  ("RPC" 415 0)
		  ("Embedding-Support" 407 0)
		  ("UX-Support" 416 0)
		  ("IP-TCP" 422 6)
		  ("CLX" 419 3)
		  ("X-Remote-Screen" 418 1)
		  ("Network-RPC" 415 5)
		  ("NFS-Client" 415 3)
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 321)
		 :microcode 430
		 :ivory-revision (2 4)
		 :UX400S (:Genera-application-version "2.2.1.2"
			  :RPC-server-versions (("UX Support Server" "2.2.1.1"))
			  :ivory-life-program-version "2.2.1.3"
			  :life-support-version "2.2.1.3"
			  :Unix-versions ("4.1"))
		 :author "Kaufman"
		 :status :released)
		((8 "0 XL") :versions
		 (("System" 425 83)
		  ("CLOS" 406 27)
		  #+IMach ("RPC" 415 0)
		  #+IMach ("Embedding-Support" 407 0)
		  #+IMach ("MacIvory-Support" 421 2)
		  #+IMach ("UX-Support" 416 0)
		  ("Development-Utilities" 410 4)
		  ("Old-TV" 408 0)
		  ("Zwei" 408 5)
		  ("Utilities" 419 6)
		  #+IMach ("RPC-Development" 410 1)
		  #+IMach ("MacIvory-Development" 409 0)
		  #+IMach ("UX-Development" 415 0)
		  ("Server-Utilities" 417 3)
		  ("Serial" 409 12)
		  ("Hardcopy" 420 5)
		  ("Zmail" 417 1)
		  ("LMFS" 418 0)
		  #+IMach ("SCSI" 406 0)
		  ("Tape" 419 3)
		  ("NSage" 415 7)
		  ("Extended-Help" 416 0)
		  ("CL-Developer" 403 1)
		  ("Doc" 420 1)			;i.e., "Documentation Database"
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 318)
		 :microcode 430
		 :ivory-revision (4)
		 :author "Kaufman"
		 :status :released)
		((8 "0") :versions
		 (("System" 425 39)
		  ("CLOS" 406 11)
		  #+IMach ("RPC" 415 0)
		  #+IMach ("Embedding-Support" 407 0)
		  #+IMach ("MacIvory-Support" 421 0)
		  #+IMach ("UX-Support" 416 0)
		  ("Development-Utilities" 410 1)
		  ("Old-TV" 408 0)
		  ("Zwei" 408 3)
		  ("Utilities" 419 1)
		  #+IMach ("RPC-Development" 410 0)
		  #+IMach ("MacIvory-Development" 409 0)
		  #+IMach ("UX-Development" 415 0)
		  ("Server-Utilities" 417 2)
		  ("Serial" 409 8)
		  ("Hardcopy" 420 3)
		  ("Zmail" 417 1)
		  ("LMFS" 418 0)
		  #+IMach ("SCSI" 406 0)
		  ("Tape" 419 3)
		  ("NSage" 415 5)
		  ("Extended-Help" 416 0)
		  ("CL-Developer" 403 1)
		  ("Doc" 420 0)			;i.e., "Documentation Database"
		  ("IP-TCP" 422 2 (:UX400S))
		  ("IP-TCP-Doc" 404 0 (:UX400S)) 
		  ("CLX" 419 0 (:UX400S))
		  ("X-Remote-Screen" 418 1 (:UX400S))
		  ("X-Documentation" 403 0 (:UX400S))
		  ("Network-RPC" 415 1 (:UX400S))
		  ("NFS-Client" 415 0 (:UX400S))
		  ("NFS-Documentation" 404 0 (:UX400S))
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 317)
		 :microcode 430
		 :ivory-revision (2)
		 :MacIvory (:Genera-application-version "5.4.2"
			    :RPC-server-versions (("Toolbox Servers" "4.1")
						  ("MacIvory SCSI Manager Server" "4.1")
						  ("MacIvory Serial I//O Server" "1.0"))
			    :support-library-version "5.4"
			    :life-support-version "3.5.1"
			    :Symbolics-keyboard-versions ("2.0")
			    :MacOS-versions ("6.0.2" "6.0.3" "6.0.4" "6.0.5"))
		 :UX400S (:Genera-application-version "2.2.1.2"
			  :RPC-server-versions (("UX Support Server" "2.2.1.1"))
			  :ivory-life-program-version "2.2.1.1"
			  :life-support-version "2.2.1.1"
			  :Unix-versions ("4.0.1" "4.0.3" "4.0.3c"))
		 :author "Kaufman"
		 :status :released)
		((8 "0 MacIvory Delivery") :versions
		 (("System" 425 39)
		  ("CLOS" 406 11)
		  ("RPC" 415 0)
		  ("Embedding-Support" 407 0)
		  ("MacIvory-Support" 421 0)
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 317)
		 :microcode 430
		 :ivory-revision (2)
		 :MacIvory (:Genera-application-version "5.4.2"
			    :RPC-server-versions (("Toolbox Servers" "4.1")
						  ("MacIvory SCSI Manager Server" "4.1")
						  ("MacIvory Serial I//O Server" "1.0"))
			    :support-library-version "5.4"
			    :life-support-version "3.5.1"
			    :Symbolics-keyboard-versions ("2.0")
			    :MacOS-versions ("6.0.2" "6.0.3" "6.0.4" "6.0.5"))
		 :author "Kaufman"
		 :status :released)
		((8 "0 UX Delivery") :versions
		 (("System" 425 39)
		  ("CLOS" 406 11)
		  ("RPC" 415 0)
		  ("Embedding-Support" 407 0)
		  ("UX-Support" 416 0)
		  ("IP-TCP" 422 2)
		  ("CLX" 419 0)
		  ("X-Remote-Screen" 418 1)
		  ("Network-RPC" 415 1)
		  ("NFS-Client" 415 0)
 		  )
		 :cold-load-version #+IMach 8 #+3600 5
		 :fep-version (:obs 127 :nbs 208 :ifep 317)
		 :microcode 430
		 :ivory-revision (2)
		 :UX400S (:Genera-application-version "2.2.1.2"
			  :RPC-server-versions (("UX Support Server" "2.2.1.1"))
			  :ivory-life-program-version "2.2.1.1"
			  :life-support-version "2.2.1.1"
			  :Unix-versions ("4.0.1" "4.0.3" "4.0.3c"))
		 :author "Kaufman"
		 :status :released)
		((7 "4 Ivory") :versions
		 (("System" 418 95)
		  ("RPC" 407 3)
		  ("MacIvory-Support" 412 21)
		  ("Serial"  402 3)
		  ("Utilities" 412 10)
		  ("Server-Utilities" 410 0)
		  ("Hardcopy" 413 3)
		  ("Zmail" 410 3)
		  ("LMFS" 411 3)
		  ("Tape" 412 5)
		  ("NSage" 407 4)
		  ("Extended-Help" 409 0)
		  ("RPC-Development" 401 0)
		  ("MacIvory-Development" 401 1)
		  ("Doc" 412 0)			;i.e., "Documentation Database"
		  )
		 :cold-load-version #+IMach 5 #+3600 2
		 :fep-version (:obs 127 :nbs 208 :ifep 310)
		 :microcode 426
		 :ivory-revision 2
		 :MacIvory-application-version "3.2.2"
		 :MacOS-version "6.0.2"
		 :author "Palter"
		 :status :released)
		((7 "4 MacIvory Delivery") :versions
		 (("System" 418 95)
		  ("RPC" 407 3)
		  ("MacIvory-Support" 412 21)
		  )
		 :cold-load-version #+IMach 5 #+3600 2
		 :fep-version (:obs 127 :nbs 208 :ifep 310)
		 :microcode 426
		 :ivory-revision 2
		 :MacIvory-application-version "3.2.2"
		 :MacOS-version "6.0.2"
		 :author "Palter"
		 :status :released)
		((7 "3 Ivory") :versions
		 (("System" 416 241)
		  ("Utilities" 409 18)
		  ("Server-Utilities" 408 2)
		  ("Hardcopy" 411 7)
		  ("Zmail" 408 5)
		  ("LMFS" 408 3)
		  ("Tape" 409 8)
		  ("NSage" 405 18)
		  ("Extended-Help" 407 5)
		  ("RPC" 403 11)
		  ("MacIvory-Support" 407 58)
		  ("Doc" 408 0)			;i.e., "Documentation Database"
		  )
		 :cold-load-version 1
		 :fep-version (:obs 127 :nbs 208 :ifep 307)
		 :microcode 424
		 :ivory-revision 1
		 :MacIvory-application-version "1.4.1"
		 :MacOS-version "6.0.2"
		 :author "SWM"
		 :status :released)
		((7 2) :versions
		 (("System" 376 152)
		  ("Utilities" 27 25)
		  ("Server-Utilities" 28 4)
		  ("Hardcopy" 118 16)
		  ("Zmail" 165 19)
		  ("LMFS" 102 6)
		  ("Tape" 82 15)
		  ("NSage" 27 119)
		  ("Extended-Help" 18 3)
		  ("Doc" 62 0))			;i.e., "Documentation Database"
		 :cold-load-version 1
		 :fep-version (:obs 127 :nbs 208)
		 :microcode 420
		 :author "SWM"
		 :status :released)
		((7 1) :versions
		 (("System" 349 296)
		  ("Utilities" 10 38)
		  ("SU" 10 5)			;i.e., "Server Utilities"
		  ("Hardcopy" 101 17)
		  ("Zmail" 146 25)
		  ("LMFS" 84 9)
		  ("Tape" 64 13)
		  ("Basic-Sage" 42 12)		;i.e., "Basic Sage"
		  ("Extended Help" 1 1)
		  ("Doc" 35 8))			;i.e., "Documentation Database"
		 :cold-load-version 6
		 :fep-version (:obs 127 :nbs 206)
		 :microcode 396
		 :author "SWM"
		 :status :released)
		((7 "0G1") :versions
		 (("System" 349 152)
		  ("Utilities" 10 20)
		  ("SU" 10 1)			;i.e., "Server Utilities"
		  ("Hardcopy" 101 10)
		  ("Zmail" 146 12)
		  ("LMFS" 84 6)
		  ("Tape" 64 7)
		  ("Basic-Sage" 42 8)		;i.e., "Basic Sage"
		  ("Extended Help" 1 0)
		  ("Doc" 35 0))			;i.e., "Documentation Database"
		 :cold-load-version 6
		 :fep-version (:obs 127 :nbs 206)
		 :microcode 394
		 :author "Pasieka"
		 :status :released)
		((7 "0G") :versions
		 (("System" 349 151)
		  ("Utilities" 10 20)
		  ("SU" 10 1)			;i.e., "Server Utilities"
		  ("Hardcopy" 101 10)
		  ("Zmail" 146 12)
		  ("LMFS" 84 6)
		  ("Tape" 64 6)
		  ("Basic-Sage" 42 8)		;i.e., "Basic Sage"
		  ("Extended Help" 1 0)
		  ("Doc" 35 0))			;i.e., "Documentation Database"
		 :cold-load-version 6
		 :fep-version (:obs 127 :nbs 206)
		 :microcode 394
		 :author "Hornig"
		 :status :released)
		((7 0) :versions
		 (("System" 349 148)
		  ("Utilities" 10 19)
		  ("SU" 10 1)			;i.e., "Server Utilities"
		  ("Hardcopy" 101 10)
		  ("Zmail" 146 12)
		  ("LMFS" 84 6)
		  ("Tape" 64 5)
		  ("Basic-Sage" 42 8)		;i.e., "Basic Sage"
		  ("Extended Help" 1 0)
		  ("Doc" 35 0))			;i.e., "Documentation Database"
		 :cold-load-version 6
		 :fep-version (:obs 127 :nbs 206)
		 :microcode 394
		 :author "Palter"
		 :status :released)
		((6 "G") :versions
		 (("System" 271 299)
		  ("Hardcopy" 46 33)
		  ("Zmail" 107 24)
		  ("LMFS" 57 15)
		  ("Tape" 41 18)
		  ("Basic Sage" 15 88)
		  ("Documentation Database" 5 0)
		  ("Common Lisp" 4 26))
		 :cold-load-version 198
		 :fep-version 206
		 :microcode 388
		 :author "Pasieka"
		 :status :released)
		((6 1) :versions
		 (("System" 271 212)
		  ("Hardcopy" 46 33)
		  ("Zmail" 107 24)
		  ("LMFS" 57 15)
		  ("Tape" 41 3)
		  ("Basic Sage" 15 88)
		  ("Documentation Database" 5 0)
		  ("Common Lisp" 4 23))
		 :cold-load-version 198
		 :fep-version 24
		 :microcode 336
		 :author "Joseph"
		 :status :released)
		((6 0) :versions
		 (("System" 271 22)
		  ("Hardcopy" 46 1)
		  ("Zmail" 107 1)
		  ("LMFS" 57 0)
		  ("Tape" 41 0)
		  ("Basic Sage" 15 8)
		  ("Documentation Database" 3 0)
		  ("Common Lisp" 4 1))
		 :cold-load-version 198
		 :fep-version 24
		 :microcode 319
		 :author "Joseph"
		 :status :released)))


;; Finds and returns the release spec matching the designator, which is either a
;; string, like "7.0G1", or a list in the same form as the keys in *RELEASES*,
;; like, '(7 "0G1").
(defun find-release-spec (designator)
  (dolist (spec *releases*)
    (let ((key (first spec)))
      (when (funcall (if (stringp designator)
			 (progn (setq key (let ((cl:*print-base* 10.))
					    (format nil "~A.~A" (first key) (second key))))
				#'string-equal)
		       #'equal)
		     key designator)
	(return spec)))))

;; Figures out what release we are running.  Returns the major and minor release
;; number, and its status.  This works by finding the most recent release that
;; we are in advance of in every respect. Returns  NIL if this doesn't seem to be
;; any release at all.
(defun get-release-version ()
  (declare (values major-version minor-version status open-genera-version))
  (let ((item (get-release-internal-item)))
    (if item
	(values (first (car item)) (second (car item)) (get item :status)
		(get item :open-genera))
	;;--- Fallback, needs to be changed for each and every release
	(values 8 "6 Interim" :interim))))

;; Stub for compatibility...
(deff si:get-release-version 'get-release-version)
(compiler:make-obsolete si:get-release-version "use SCT:GET-RELEASE-VERSION instead")

;; Figures out what release we are running.  Returns the element of *RELEASES*.
;; This is an internal function, since the format of *RELEASES* is internal
;; and subject to change.
(defun get-release-internal-item ()
  (dolist (item *releases*)
    (when (we-have-these-versions (get item :versions)
				  #+3600 (get item :microcode))
      (return item))))

;; Given a bunch of versions, required minor versions, and machine
;; models/architectures, return T only if each of those systems is not
;; required to exist on this type of machine or exists with a greater or
;; equal version number.  Also, if the microcode arg is provided, we
;; must have at least that version of the microcode.  As a special case,
;; the version of System must match exactly.
(defun we-have-these-versions (version-list &optional #+3600 released-microcode)
  (and #+3600 (multiple-value-bind (nil current-microcode)
		  (si:microcode-description)
		(or (null released-microcode)
		    (null current-microcode)
		    ( current-microcode released-microcode)))
       (loop with model = (si:machine-model)
	     for (system-name required-major required-minor applicable-models) in version-list
	     for ok = (or (and applicable-models
			     (not (member #+3600 :|3600|
					  #+(and IMach (not VLM)) :IMach
					  #+(and IMach VLM) :VLM
					  applicable-models))
			     (not (member model applicable-models)))
			(multiple-value-bind (current-major current-minor)
			    (sct:get-system-version system-name)
			  (and (numberp current-major)
			       (if (equal system-name "System")
				   (= required-major current-major)
				   ( required-major current-major))
			       (or (< required-major current-major)
				   ( required-minor current-minor)))))
	     do (when (null ok) (si:dbg))
	     always ok)))

#+3600
si:
(defun microcode-description ()
  (declare (values name version))
  (values %microcode-version (microcode-version-number %microcode-version)))

;; Returns a subset of PATCH-SYSTEMS-LIST that leaves out those that are
;; part of the current release, only returning those that are advanced
;; beyond the level of the current release.  No systems are behind the level
;; of the current release, by definition.  If there's a system that isn't
;; mentioned at all in the *RELEASES* entry, or that is but has a higher
;; version number, it is included in this list.
(defun unreleased-patch-systems ()
  (let ((item (get-release-internal-item))
	(patch-systems-list (systems-version-list t)))	;include loaded non-patchable, too
    (if (null item)
	patch-systems-list
	(let ((version-list (get item :versions)))
	  (loop for sys in patch-systems-list
		when (system-unreleased-p sys version-list)
		collect sys)))))

;; Returns T if the system is "unreleased" and has to be printed.  Assumes that
;; this is the version list of the current release, so that we print any system
;; that isn't defined with exactly the release.
(defun system-unreleased-p (patch-system version-list)
  (let ((patch (find-patch-system-in-patch-list (patch-name patch-system) version-list)))
   (let ((answer
    (or (null patch)
	( (patch-version patch-system) (second patch))
	( (version-number (first (patch-version-list patch-system))) (third patch))
	(and (fourth patch)
	     (not (member #+3600 :|3600|
			  #+(and IMach (not VLM)) :IMach
			  #+(and IMach VLM) :VLM
			  (fourth patch)))
	     (not (member (si:machine-model) (fourth patch)))))))
     (when answer (si:dbg)) answer)))

(defun find-patch-system-in-patch-list (name patch-list)
  (loop for patch in patch-list
	as patch-name = (patch-name patch)
	when (string-equal name patch-name)
	  do (return patch)
	finally (return nil)))

;; Returns a subset of PATCH-SYSTEMS-LIST just like (UNRELEASED-PATCH-SYSTEMS)
;; except that invisible systems are also excluded.
(defun visible-unreleased-patch-systems ()
  (loop for sys in (unreleased-patch-systems)
	unless (system-is-invisible (patch-name sys))
	  collect sys))

;; At the moment, the possible values of (system-advertised-in system)
;; are :HERALD, :FINGER, and :DISK-LABEL.  The first one will have to
;; serve for now as a general marker for visibility.  These functions
;; are robust in the sense that an unknown system is invisible.
(defun system-is-invisible (system)
  (let ((system (find-system-named system nil t)))
       (or (null system)
	   (not (memq :herald (system-advertised-in system))))))

(defun system-should-not-appear-in-disk-label (system)
  (let ((system (find-system-named system nil t)))
    (or (null system)
	(not (memq :disk-label (system-advertised-in system))))))

(defun system-should-not-appear-in-finger-string (system)
  (let ((system (find-system-named system nil t)))
    (or (null system)
	(not (memq :finger (system-advertised-in system))))))

(defun cold-load-version-is-released-or-unspecified ()
  (or (null si:cold-load-version-number)		;Not known (A machine for now).
      (let* ((item (get-release-internal-item))
	     (cold-load-version
	       (when item
		 (cl:getf (get item :cold-load-version)
			  #+(and IMach (not VLM)) :IMach
			  #+(and IMach VLM) :VLM
			  #+3600 :|3600|))))
	(and cold-load-version
	     (= cold-load-version si:cold-load-version-number)))))


;;; The ECO system (pretty grandiose, huh?)

(defflavor eco
	(system-name
	 major-version
	 minor-version
	 level
	 description)
	()
  :writable-instance-variables
  :initable-instance-variables)

(defvar *all-ecos* nil)

(defvar *eco-system* nil)
(defvar *eco-major-version* nil)
(defvar *eco-minor-version* nil)

;; The ECO level for a system is an ascending number which by convention starts
;; at 1 and is incremented by 1 for each ECO patch to that system.  These numbers
;; are maintained by hand!
(defmacro define-eco (level description &optional system major-version minor-version)
  `(define-eco-internal ,system ,major-version ,minor-version
			,level ,description))

(defun define-eco-internal (system major-version minor-version level description)
  ;; The patch system is responsible for binding these
  (when (null system)
    (setq system *eco-system*))
  (when (null major-version)
    (setq major-version *eco-major-version*))
  (when (null minor-version)
    (setq minor-version *eco-minor-version*))
  (let* ((system (find-system-named system))
	 (system-name (system-name system))
	 (eco (make-instance 'eco
			     :system-name system-name
			     :major-version major-version
			     :minor-version minor-version
			     :level level
			     :description description))
	 (old-eco (cl:find eco *all-ecos*
			   :test (lambda (x y)
				   (and (eq (eco-system-name x) (eco-system-name y))
					(eq (eco-major-version x) (eco-major-version y))
					(eq (eco-minor-version x) (eco-minor-version y)))))))
    ;; Squirrel away the new ECO
    (if (null old-eco)
	(setf *all-ecos* (nconc *all-ecos* (list eco)))
      (cl:nsubstitute eco old-eco *all-ecos* :count 1))
    ;; This assume ECOs get loaded in increasing order
    (setf (system-eco-level system) level)
    eco))


;; Need at least this, even if hairy initial window isn't loaded.
(defun print-herald (&key as-if-band verbose stream brief)
  (when (null stream) (setq stream standard-output))
  (dw:with-output-as-presentation (:type 'cp:command
				   :object `(world-tools:com-show-fep-directory)
				   :stream stream)
    (format stream "~&Symbolics System, ~:[~;disk-saved into ~]~A~@[ (~A)~]"
	    si:*disk-saved* (or as-if-band (sys:loaded-band-name))
	    (when (and (variable-boundp system-additional-info)
		       (plusp (array-active-length system-additional-info)))
	      system-additional-info)))
  (dw:with-output-as-presentation (:type 'cp:command
				   :object `(si:com-show-machine-configuration
					      ,net:*local-host*)
				   :stream stream)
    (format stream "~&~A Processor, " (si:machine-model))
    (display-memory-description stream))
  (format stream "~%")
  (let ((private-patch-notes nil))
    (declare (special private-patch-notes))	;---bug in DW::CONTINUATION-FOR-DISPLAY?
    (cond (brief
	    (multiple-value-bind (release-major release-minor release-status)
		(get-release-version)
	      (multiple-value-bind (system-major system-minor system-status)
		  (get-system-version)
		(let* ((genera-released-p (not (or (not release-status)
						   (eq release-status :interim))))
		       (system-string (unless genera-released-p
					(format nil "~@[~:(~A~) ~]System"
						(unless (eq system-status :released)
						  system-status))))
		       (tabstop (+ 1
				   (string-length
				     (if genera-released-p "Genera" system-string))
				   2)))
		  (format stream " ")
		  (dw:with-output-as-presentation (:object nil
						   :type 'si:release
						   :single-box t
						   :allow-sensitive-inferiors nil
						   :stream stream)
		    (format stream "Genera~VT~D.~D" tabstop release-major release-minor))
		  (format stream "~%")
		  (unless genera-released-p
		    (format stream " ")
		    (dw:with-output-as-presentation (:object (find-system-named 'system)
						     :type 'system
						     :single-box t
						     :allow-sensitive-inferiors nil
						     :stream stream)
		      (format stream "~A~VT~D.~D"
			      system-string tabstop system-major system-minor))
		    (format stream "~%"))))))
	  (t
	    (let ((computed-system-versions (compute-system-versions verbose)))
	      (si:dbg)
	      (scl:formatting-table (stream)
		(loop for item in computed-system-versions doing
		  (scl:destructuring-bind (text &optional (major () major-p)
						(minor () minor-p)
						system-object
						system-branch)
		      item
		    (flet ((do-row (stream)
			     (scl:formatting-row (stream)
			       (scl:formatting-cell (stream)
				 (tyo #\space stream)
				 (scl:write-string text stream))
			       (flet ((decimal (number)
					(scl:write number :stream stream
						   :escape nil :pretty nil
						   :base 10
						   :radix nil)))
				 (scl:formatting-cell (stream)
				   (when (and major-p major (neq major :newest))
				     (decimal major))
				   (when (and minor-p minor)
				     (scl:write-string "." stream)
				     (decimal minor)))
				 (scl:formatting-cell (stream)
				   (when (and system-object (system-eco-level system-object))
				     (scl:write-string "(ECO level " stream)
				     (decimal (system-eco-level system-object))
				     (scl:write-string ")" stream))))
			       (when system-branch
				 (scl:formatting-cell (stream)
				   (scl:write-string (string-capitalize-words system-branch)
						     stream))))))
		      (cond (system-object
			     ;; If it's a real system, present it as such
			     (dw:with-output-as-presentation (:object system-object
							      :type 'system
							      :single-box t
							      :stream stream)
			       (do-row stream)))
			    ((string-equal text "Genera" (max 0 (- (string-length text) 6)))
			     ;; Special case the "Genera" frob
			     (dw:with-output-as-presentation (:object nil
							      :type 'si:release
							      :single-box t
							      :stream stream)
			       (do-row stream)))
			    ((typep major 'fs:pathname)
			     ;; Delay this until we're outside of the FORMATTING-TABLE
			     ;; (PUSHNEW because this code gets run twice)
			     (cl:pushnew item private-patch-notes :test #'equal))
			    (t
			     (do-row stream))))))))))
    (unless brief
      (loop with fill-column = (if (operation-handled-p stream :read-cursorpos)
				   (* 95. (or (send-if-handles stream :char-width) 1))
				   nil)
	    for (note pathname) in (nreverse private-patch-notes) doing
	;; If it's a private patch, point to its source file
	(dw:with-output-as-presentation (:object pathname
					 :type (cl:type-of pathname)
					 :single-box t
					 :stream stream)
	  (si:with-indentation (stream 1)
	    (if (null fill-column)
		(format stream "~%~A~@[, from ~A~]" note pathname)
		(scl:filling-output (stream
				      :after-line-break " "
				      :fill-column fill-column)
		  (format stream "~%~A~@[, from ~A~]" note (and verbose pathname))))))))
    (unless brief (terpri stream))
    (dw:with-output-as-presentation (:type 'cp:command
				     :object `(cl-neti::com-show-namespace-object
						,net:*local-site*)
				     :stream stream)
      (format stream "~A" (send net:*local-site* ':pretty-name)))
    (format stream " ")
    (dw:with-output-as-presentation (:type 'cp:command
				     :object `(cl-neti::com-show-namespace-object
						,net:*local-host*)
				     :stream stream)
      (format stream "~A" si:local-pretty-host-name))
    (terpri stream)
    nil))

;Definition of PRINT-BRIEF-HERALD removed.  Use :BRIEF argument to PRINT-HERALD now. -kmp

#-VLM
(defun display-memory-description (stream)
  (flet ((print-memory-size (size description)
	   (cl:format stream "~,1FM words ~A" (cl:// size 1_20) description)))
    (print-memory-size (* storage:*count-usable-pages* sys:page-size) "Physical memory") 
    (format stream ", ")
    (print-memory-size (* storage:*count-swap-pages* sys:page-size) "Swapping space")
    (format stream ".")))

#+VLM
(defun display-memory-description (stream)
  (flet ((print-memory-size (size description)
	   (cl:format stream "~,1FM words ~A" (cl:// size 1_20) description)))
    (if (zerop (sys:vlm-virtual-memory-size))
	(print-memory-size (* storage:*count-remaining-swap-pages* sys:page-size)
			   "virtual memory still available")
      (print-memory-size (sys:vlm-virtual-memory-size) "virtual memory requested")
      (format stream ", ")
      (print-memory-size (* storage:*count-remaining-swap-pages* sys:page-size)
			 "still available"))
    (format stream ".")))
