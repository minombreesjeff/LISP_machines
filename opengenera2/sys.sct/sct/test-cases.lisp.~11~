;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SCT; Base: 10; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Test cases

#||

;; Short-form test cases

(defsystem might-fail-1
    (:default-pathname "q:>swm>")
  (:serial
    "s1"
   (:parallel
     (:serial "s2a" "s2b")
     (:serial "s3a" "s3b"))))

(defsystem might-fail-2
    (:default-pathname "q:>swm>")
  (:parallel
    (:serial "s2a" "s2b")
    (:serial "s3a" "s3b")))

(defsystem foo1 ()				;remove :default-pathname "Y:>NSS>"
  (:serial "a" "b" "c")) ==>
(defsystem foo1
  (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:in-order-to (:compile :load) (:load |Module 1|)))
  (:module |Module 3| ("c") (:in-order-to (:compile :load) (:load |Module 2|))))

(defsystem foo2 (:default-pathname "Y:>NSS>")
  (:serial "a" "b" (:serial "x" "y") "c")) ==>
(defsystem foo2
    (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:in-order-to (:compile :load) (:load |Module 1|)))
  (:module |Module 3| ("x") (:in-order-to (:compile :load) (:load |Module 2|)))
  (:module |Module 4| ("y") (:in-order-to (:compile :load) (:load |Module 3|)))
  (:module |Module 5| ("c") (:in-order-to (:compile :load) (:load |Module 4|))))

(defsystem foo3 (:default-pathname "Y:>NSS>")
  (:parallel "a" "b" "c")) ==>
(defsystem foo3
    (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a" "b" "c")))

(defsystem foo4 (:default-pathname "Y:>NSS>")
  (:parallel "a" "b" (:parallel "x" "y") "c")) ==>
(defsystem foo4
  (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a" "b" "c") (:in-order-to :load (:compile |Module 2|)))
  (:module |Module 2| ("x" "y") (:in-order-to :load (:compile |Module 1|))))

(defsystem foo5 (:default-pathname "Y:>NSS>")
  (:parallel "a" "b" (:serial "x" "y") "c")) ==>
(defsystem foo5
    (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a" "b" "c") (:in-order-to :load (:compile |Module 3|)))
  (:module |Module 2| ("x") (:in-order-to :load (:compile |Module 1|)))
  (:module |Module 3| ("y") (:in-order-to (:compile :load) (:load |Module 2|))))

(defsystem foo6 (:default-pathname "Y:>NSS>")
  (:serial "a" "b" (:parallel "x" "y") "c")) ==>
(defsystem foo6
    (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:in-order-to (:compile :load) (:load |Module 1|)))
  (:module |Module 3| ("x" "y") (:in-order-to (:compile :load) (:load |Module 2|)))
  (:module |Module 4| ("c") (:in-order-to (:compile :load) (:load |Module 3|))))

(defsystem foo7 (:default-pathname "Y:>NSS>")
  (:module flob ("z"))
  (:serial "a" "b" flob "d")) ==>
(defsystem foo7
    (:default-pathname "Y:>NSS>")
  (:module flob ("z") (:in-order-to (:compile :load) (:load |Module 2|)))
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:in-order-to (:compile :load) (:load |Module 1|)))
  (:module |Module 3| ("d") (:in-order-to (:compile :load) (:load flob))))

(defsystem foo8 (:default-pathname "Y:>NSS>")
  (:module flob ("z"))
  (:parallel "a" "b" flob "d")) ==>
(defsystem foo8
    (:default-pathname "Y:>NSS>")
  (:module flob ("z") (:in-order-to :load (:compile |Module 1|)))
  (:module |Module 1| ("a" "b" "d") (:in-order-to :load (:compile flob))))

(defsystem foo9 (:default-pathname "Y:>NSS>")
  (:module flob ("z"))
  (:module bolf ("x"))
  (:serial "a" bolf "b" flob "d")) ==>
(defsystem foo9
    (:default-pathname "Y:>NSS>")
  (:module flob ("z") (:in-order-to (:compile :load) (:load |Module 2|)))
  (:module bolf ("x") (:in-order-to (:compile :load) (:load |Module 1|)))
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:in-order-to (:compile :load) (:load bolf)))
  (:module |Module 3| ("d") (:in-order-to (:compile :load) (:load flob))))

(defsystem foo10 (:default-pathname "Y:>NSS>")
  (:module flob ("z"))
  (:module bolf ("x"))
  (:parallel "a" bolf "b" flob "d")) ==>
(defsystem foo10
    (:default-pathname "Y:>NSS>")
  (:module flob ("z") (:in-order-to :load (:compile |Module 1| bolf)))
  (:module bolf ("x") (:in-order-to :load (:compile |Module 1| flob)))
  (:module |Module 1| ("a" "b" "d") (:in-order-to :load (:compile bolf flob))))

(defsystem foo11 (:default-pathname "Y:>NSS>")
  (:module flob ("z"))
  (:module bolf ("x"))
  (:parallel "a" (:serial bolf (:parallel "b" flob) "d"))) ==>
(defsystem foo11
    (:default-pathname "Y:>NSS>")
  (:module flob ("z") (:in-order-to :load (:compile |Module 2|)))
  (:module bolf ("x") (:in-order-to :load (:compile |Module 1|)))
  (:module |Module 1| ("a")
	   (:in-order-to :load (:compile |Module 4|)))
  (:module |Module 2| ("b") (:in-order-to :load (:compile flob)))
  (:module |Module 3| nil
	   (:in-order-to :compile (:compile |Module 2| flob))
	   (:in-order-to :load (:load |Module 2| flob))
	   (:in-order-to (:compile :load) (:load bolf)))
  (:module |Module 4| ("d")
	   (:in-order-to (:compile :load) (:load |Module 3|))))

(defsystem foo12 (:default-pathname "Y:>NSS>")
  (:definitions "a" (:serial "b" "c" "d"))) ==>
(defsystem foo12
    (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:uses-definitions-from |Module 1|))
  (:module |Module 3| ("c") (:uses-definitions-from |Module 1|)
			    (:in-order-to (:compile :load) (:load |Module 2|)))
  (:module |Module 4| ("d") (:uses-definitions-from |Module 1|)
			    (:in-order-to (:compile :load) (:load |Module 3|))))

(defsystem foo13 (:default-pathname "Y:>NSS>")
  (:definitions "a" (:serial "b" (:definitions "x" (:parallel "c" "d"))))) ==>
(defsystem foo13
    (:default-pathname "Y:>NSS>")
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:uses-definitions-from |Module 1|))
  (:module |Module 3| ("x") (:uses-definitions-from |Module 1|)
			    (:in-order-to (:compile :load) (:load |Module 2|)))
  (:module |Module 4| ("c" "d") (:uses-definitions-from |Module 3|)))

(defsystem foo14 (:default-pathname "Y:>NSS>")
  (:module bar ("x") (:in-order-to :load (:load foo)))
  (:module-group foo (:definitions "a" (:serial "b" "c"))
		 (:type :fortran))) ==>
(defsystem foo14
    (:default-pathname "Y:>NSS>")
  (:module bar ("x") (:in-order-to :load (:load foo)))
  (:module foo nil (:type :fortran) (:in-order-to :load (:load |Module 3|)))
  (:module |Module 1| ("a") (:type :fortran))
  (:module |Module 2| ("b") (:uses-definitions-from |Module 1|) (:type :fortran))
  (:module |Module 3| ("c") (:uses-definitions-from |Module 1|) (:type :fortran)
			    (:in-order-to (:compile :load) (:load |Module 2|))))

(defsystem foo15 (:default-pathname "Y:>NSS>")
  (:module bar ("x"))
  (:definitions "a" (:serial "b" "c" bar))) ==>
(defsystem foo15
    (:default-pathname "Y:>NSS>")
  (:module bar ("x") (:in-order-to (:compile :load) (:load |Module 3|)))
  (:module |Module 1| ("a"))
  (:module |Module 2| ("b") (:uses-definitions-from |Module 1|))
  (:module |Module 3| ("c") (:uses-definitions-from |Module 1|)
			    (:in-order-to (:compile :load) (:load |Module 2|))))

||#


#||
(defsystem uses (:default-pathname "q:>test>src>")
  (:module defs (("defs" "<bin>defs")))
  (:module macs (("macs" "<bin>macs")) (:uses-definitions-from defs))
  (:module util (("util" "<bin>util")) (:uses-definitions-from macs))
  (:module main (("main" "<bin>main")) (:uses-definitions-from util)))
(describe-system 'uses :compile)
(describe-system 'uses :load)
(describe-system 'uses :edit)

(defsystem ex (:default-pathname "q:>swm>nss>")
  (:module defs  ("defs"))
  (:module macs  ("macs")
	   (:in-order-to :compile (:load defs))
	   (:root-module nil)
	   (:compile-satisfies-load t))
  (:module utils ("utils")
	   (:uses-definitions-from macs)
	   (:in-order-to :compile (:load macs))
	   (:in-order-to :load (:load defs)))
  (:module main  ("main")
	   (:uses-definitions-from macs)
	   (:in-order-to :compile (:load macs))
	   (:in-order-to :load (:load utils))))
(describe-system 'ex :compile)
(describe-system 'ex :load)

(defsystem circular (:default-pathname "q:>swm>nss>")
  (:module defs ("defs") (:in-order-to :compile (:load utils)))
  (:module macros ("macros") (:in-order-to :compile (:load defs)))
  (:module utils ("utils") (:in-order-to :compile (:load macros)))
  (:module main ("main") (:in-order-to :compile (:load defs))))

(defsystem not-circular (:default-pathname "q:>swm>nss>")
  (:module defs ("defs"))
  (:module macros ("macros") (:in-order-to :compile (:load defs)))
  (:module utils ("utils") (:in-order-to :compile (:load defs)))
  (:module main ("main") (:in-order-to :compile (:load defs))))

(defsystem no-root (:default-pathname "q:>swm>nss>")
  (:module defs ("defs") (:in-order-to :compile (:load main)))
  (:module utils ("utils") (:in-order-to :compile (:load defs)))
  (:module main ("main") (:in-order-to :compile (:load utils))))

(defsystem ex1
    (:default-pathname "q:>swm>")
  (:module read-me ("read-me") (:type :text))
  (:module fonts (fonts) (:type :font))
  (:module defs ("defs"))
  (:module macros ("macros")
	   (:in-order-to :compile (:load defs)))
  (:module utils ("utils")
	   (:uses-definitions-from macros)
	   (:in-order-to (:compile :load) (:load defs macros)))
  (:module main ("rooms" "passages" "main")
	   (:uses-definitions-from macros)
	   (:in-order-to :compile (:load defs macros))
	   (:in-order-to :load (:load utils))
	   (:in-order-to (:edit :hardcopy) (:load fonts))))
(describe-system 'ex1 :compile :no-load t)
(describe-system 'ex1 :load)
(describe-system 'ex1 :edit)
(describe-system 'ex1 :hardcopy)
(describe-system 'ex1 :distribute)

(defsystem ex2-forward
    (:default-pathname "q:>swm>")
  (:module defs ("defs"))
  (:module macros ("macros")
	   (:in-order-to :compile (:load defs))
	   (:root-module nil))
  (:module utils ("u1" "u2")
	   (:in-order-to :compile (:load defs macros))
	   (:in-order-to :load (:load defs)))
  (:module main ("rooms" "passages" "main")
	   (:in-order-to :compile (:load defs macros))
	   (:in-order-to :load (:load utils))))
(describe-system 'ex2-forward :compile)
(describe-system 'ex2-forward :load)
(describe-system 'ex2-forward :edit)

(defsystem ex2-backward
    (:default-pathname "q:>swm>")
  (:module main ("rooms" "passages" "main")
	   (:in-order-to :compile (:load defs macros))
	   (:in-order-to :load (:load utils)))
  (:module utils ("u1" "u2")
	   (:in-order-to :compile (:load defs macros))
	   (:in-order-to :load (:load defs)))
  (:module macros ("macros")
	   (:in-order-to :compile (:load defs))
	   (:root-module nil))
  (:module defs ("defs")))
(describe-system 'ex2-backward :compile)
(describe-system 'ex2-backward :load)
(describe-system 'ex2-backward :edit)


(defsystem nfep
    (:default-pathname "SYS: N-FEP;"
     :default-module-type :lil
     :pretty-name "New FEP debugger"
     :short-name "Debugger"
     :default-package lil
     :parameters (module (version 127.) (bdlc t) (board-set :obs)
		  ;; Options for :COMPILE
		  (dump-env t) (write-flod t) (patch nil)))
  (:module lisp-support (ex1)
	   (:type :system))
  (:module base-env ("PROM")
	   (:type :environment)
	   (:in-order-to :load-environment (:load lisp-support)
					   (:initialize base-env)))
  (:module source ("3600-HARDWARE" "3600-SOFTWARE" "FULL-VMEM" "DEBUG" "REMOTE-DEBUGGER")
	   (:type :lil)
	   (:distribute-binaries nil)
	   (:in-order-to (:parse :gild) (:load-environment base-env)
					(:break-for-patch base-env)))
  (:module overlay ((debugger lil:(com-debug))
		    (remote-debugger lil:(com-remote-debug)))
	   (:type :overlay)
	   (:in-order-to (:compile) (:parse source)
				    (:gild source))))
(describe-system 'nfep :load-environment :module 'debugger)
(describe-system 'nfep :dump-environment :module 'debugger :version 999.)
(describe-system 'nfep :write-overlay :module 'debugger)
(describe-system 'nfep :compile :module 'debugger :patch t
		 :dump-env t :write-flod t)	;--- these don't work...
(describe-system 'nfep :distribute :module 'debugger)
||#

