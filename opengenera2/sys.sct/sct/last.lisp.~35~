;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SCT; Base: 10; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; System flavors
(compile-flavor-methods system subsystem undefined-system)

;; Essential module flavors
(compile-flavor-methods basic-module
			bin-load-module no-load-or-compile-module binary-module)

(compile-flavor-methods plan)

(compile-flavor-methods private-patch-info)

;; Compile the individual module types
(compile-flavor-methods system-module
			lisp-module lisp-read-only-module lisp-load-only-module
			logical-translations-module readtable-module
			text-module lisp-example-module font-module
			binary-data-module text-data-module data-no-load-module
			lgp2-metrics-module)
(compile-flavor-methods sage-module documentation-module)
(compile-flavor-methods fortran-module pascal-module c-module c-include-module)

(compile-flavor-methods system-initialization-module)

(compile-flavor-methods distribution-system distribution-module)

(compile-flavor-methods macintosh-fonts-module
			toolkit-program-module
			mac-c-include-module)

;; Environments
(compile-flavor-methods lisp-world-environment)

;; Error conditions
(compile-flavor-methods no-system-branch-mapping no-component-version
			system-not-found system-declaration-not-found)


;;; Warm boot cleanups

(defun reset-sct-state-variables ()
  (loop for (var) in *system-operation-bindings*
	do (makunbound var))
  (loop for var in '(*system* *version* *branch*
		     *query-p* *silent-p* *batch-p* *query-type* *proceed-p*
		     *system-pass* *sct-progress-note*
		     *module-count* *anonymous-module-count* *module-creation-options*
		     *new-modules* *named-modules* *modules-changed*)
	do (makunbound var))
  (setq *maintain-sct-progress-note* t)
  (process:reset-lock *all-systems-lock*)
  ;; Now page out the wazoo
  (loop for system in *all-systems* doing
    (setf (system-files-info system) nil)
    (setf (system-plans-built system) nil)
    (process:reset-lock (system-lock system))))

(add-initialization "Reset global SCT state"
   '(reset-sct-state-variables)
   '(:warm))


;;; Full GC cleanup tasks

(si:define-gc-optimization sct-gc :layered-system-release
  (:documentation
    "Clear SCT caches and remove some references under control of the :REMOVE-VC-INFO and
:SOURCE-FILE-NAMES keywords.")
  (:before-flip (ignore)
    ;; In unsorted form, these can point to old system objects,
    ;; which are not forwarded when new ones are installed.
    (si:sort-aarray *true-systems-aarray*)
    (si:sort-aarray *patchable-systems-aarray*)
    (si:sort-aarray *subsystems-aarray*)
    (let* ((source-file-names (si:immediate-gc-option :source-file-names))
	   (forget-modules (memq source-file-names '(:remove :replace-with-stand-in))))
      (dolist (system *all-systems*)
	(system-before-full-gc system
	  :clear-caches t
	  :forget-modules forget-modules
	  :forget-patches source-file-names
	  :remove-vc-info (si:immediate-gc-option :remove-vc-info))))))

(defmethod (system-before-full-gc basic-system) (&key clear-caches
						      remove-vc-info
						      forget-patches
						      forget-modules)
  (ignore forget-patches)
  (when clear-caches
    (setq files-info nil))
  (when remove-vc-info
    (setq loaded-branch nil
	  default-system-branch nil
	  branch-mapping nil
	  version-controlled nil))
  (when forget-modules
    (unless (eq name :logical-pathnames-translation-files)
      (setq modules :need-to-reload-system-declaration	;--- Need support for this elsewhere.
	    module-names :need-to-reload-system-declaration))
    (setq default-destination-pathname nil
	  default-pathname nil
	  source-category nil)))

(defmethod (system-before-full-gc system :after) (&key clear-caches
						       remove-vc-info
						       forget-patches
						       forget-modules)
  (ignore remove-vc-info forget-modules)
  (when clear-caches
    (setq load-patches-plan nil
	  loaded-patch-dir-creation-date nil
	  cached-component-dir nil
	  cached-component-dir-file-info nil
	  cached-component-dir-machine-type nil
	  cached-patch-dir nil
	  cached-patch-dir-file-info nil
	  cached-system-dir nil
	  cached-system-dir-file-info nil
	  cached-vc-source-change-journal nil
	  cached-vc-source-change-journal-file-info nil)) 
 (when (and forget-patches loaded-patches)
    (let ((version (version-number (first (patch-version-list loaded-patches)))))
      (when (plusp version)
	(setf (patch-version-list loaded-patches)
	      (list
		(make-patch-version number version
				    explanation (format nil "~A loaded to patch ~D.~D"
							self loaded-version version)
				    author user-id
				    date (time:get-universal-time))))))))
