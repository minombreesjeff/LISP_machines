;;; -*- Package: COLOR; Base: 10.; Mode: LISP; Syntax: Zetalisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")skeletonize-sheet-or-raster0 (sheet-or-raster &key width height (dx 0)(dy 0))
  (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");find all the points in a 1b image that have neighbors on 4 sides, and remove
0  2;them.  This leaves a thin outline of the original image
0  (tv:with-prepared-sheet-or-raster (sheet-or-raster :array ar :inside-width w
						:inside-height h
						:width ww
						:height hh
						:inside-left i-l :inside-top i-t)
    (setq dx (max dx 0)
	  dy (max dy 0))

    (setq width (min (or width w) (- w dx))
	  height (min (or height h)(- h dx)))

    (incf dx i-l)
    (incf dy i-t)
				 
    (tv:with-temp-sheet-raster (temp (list hh (* 32 (ceiling ww 32))) :type 'art-1b)
      (bitblt color:alu-seta (1- width) height ar dx dy temp (1+ dx) dy)
      (bitblt color:alu-and  (1- width) height ar (1+ dx) dy temp dx dy)
      (bitblt color:alu-and width (1- height) ar dx dy temp dx (1+ dy))
      (bitblt color:alu-and width (1- height) ar dx (1+ dy) temp dx dy)

      (bitblt color:alu-~x*y w h temp dx dy ar dx dy)))
  #||
2						;this is similar, but produces slightly thinner outlines
0  (tv:with-temp-sheet-raster (temp (list h (* (ceiling w 32) 32)) :type 'art-1b)
    (bitblt color:alu-seta w h sheet-or-raster 0 0 temp 0 0)
    (bitblt color:alu-xor (1- w) h sheet-or-raster 1 0 temp 0 0)
    (bitblt color:alu-xor w (1- h) sheet-or-raster 0 1 sheet-or-raster 0 0)
    (bitblt color:alu-ior w h temp 0 0 sheet-or-raster 0 0))
  ||#
  sheet-or-raster
  )


(defun 1find-dark-point-in-sheet-or-raster
0       (sheet-or-raster &key start-x start-y left top right bottom (threshold 1))
  2;find some non-zero point within the image rectangle
0  (tv:with-prepared-sheet-or-raster (sheet-or-raster :array ar :span ar-span
					   :inside-width ar-width :inside-height ar-height
					   :inside-left ar-left
					   :inside-top ar-top
					   )

    (let* ((left (max ar-left (or left ar-left)))
	   (top (max ar-top (or top ar-top)))
	   (right (min ar-width (or right ar-width)))
	   (bottom (min ar-height (or bottom ar-height)))
	   (start-x (or start-x left))
	   (start-y (or start-y top))
	   )
      (loop named find-point
	    for y from start-y below bottom
	    as first-x from (+ start-x (* y ar-span)) by ar-span
	    do
	(loop for x from left below right
	      as idx from first-x 
	      as pixel = (aref ar idx)
	      when ( pixel threshold)
		do (return-from find-point (values (- x ar-left)(- y ar-top)))
		   )))))

;(defun 1FIND-OUTLINE-IN-SHEET-OR-RASTER-INTERNAL
0;       (raster first-x first-y &key (threshold 1) (minimum-length 100))
;  2;starting from FIRST-X,FIRST-Y, follow the connection chain
0;  2;and return a list of all points
0;  (macrolet1 0((test-point (x y)
;	       (once-only (x y)
;		  `(and ( 0 ,x)
;			(< ,x w)
;			( 0 ,y)
;			(< ,y h)
;			( (aref ar (+ (* ,y span) ,x)) threshold)))))
;    (let (border-points)
;      (tv:with-prepared-sheet-or-raster
;	(raster :array ar :inside-width w :inside-height h
;		:inside-left ar-l
;		:inside-top ar-t
;		:span span)
;	(incf first-x ar-l)
;	(incf first-y ar-t)
;	(push (list first-x first-y) border-points)
;	(loop named border
;	      with threshold = (max 1 threshold)
;	      and this-x = first-x
;	      and this-y = first-y
;	      and last-x-point = first-x
;	      and last-y-point = first-y
;	      and dx = 1 and dy = 0
;	      and total-length = 0
;	      do
;	  (if (zerop dy)
;	      (cond ((test-point
;		       (+ this-x dx)
;		       (+ this-y (if (> dx 0) -1 1))) 
;2		     ;left turn from X-major
0;		     ;(format t "x left turn")
;		     (let ((new-x (+ dx this-x)))
;		       (unless (and (= last-x-point new-x)
;				    (= last-y-point this-y))
;			 (incf total-length (+ (abs (- new-x last-x-point))
;					       (abs (- this-y last-y-point))))
;			 (setq last-x-point new-x
;			       last-y-point this-y)
;			 (push (list last-x-point last-y-point) border-points)))
;		     (setq this-x (+ this-x dx)
;			   this-y (+ this-y (if (> dx 0) -1 1))
;			   dy (if (> dx 0) -1 1)
;			   dx 0			
;			   ))
;		    ((test-point
;		       (+ this-x dx)
;		       this-y)
;		     ;(format t "x ahead")
;		     2;continuing straight ahead along X axis
0;		     (setq this-x (+ this-x dx))
;		     )
;		    (t 2;make a right turn
0;		     ;(format t "x right turn")
;		     (cond ((= dx 1) (setq dx 0 dy 1))
;			   (t (setq dx 0 dy -1)))
;		     (unless (and (= last-x-point this-x)
;				  (= last-y-point this-y))
;		       (incf total-length (+ (abs (- this-x last-x-point))
;					     (abs (- this-y last-y-point))))
;		       (setq last-x-point this-x
;			     last-y-point this-y)
;		       (push (list this-x this-y) border-points))
;		    ))
;	      (cond ((test-point
;		       (+ this-x (if (> dy 0) 1 -1))
;		       (+ this-y dy))
;		     2;left turn from Y-major
0;		     ;(format t "y left turn")
;		     (let ((new-y (+ dy this-y)))
;		       (unless (and (= last-x-point this-x)
;				    (= last-y-point new-y))
;			 (incf total-length (+ (abs (- this-y last-x-point))
;					       (abs (- new-y last-y-point))))
;			 (setq last-x-point this-x
;			       last-y-point new-y)
;			 (push (list last-x-point last-y-point) border-points)))
;		     (setq this-x (+ this-x (if (> dy 0) 1 -1))
;			   this-y (+ this-y dy)
;			   dx (if (> dy 0) 1 -1)
;			   dy 0
;			   )		     
;		     )
;		    ((test-point
;		       this-x
;		       (+ this-y dy))
;		     ;(format t "y ahead")
;		     2;continuing straight ahead along Y axis
0;		     (setq this-y (+ this-y dy))
;		     )
;		    (t 2;make a right turn
0;		     ;(format t "y right turn")
;		     (cond ((= dy -1) (setq dx 1 dy 0))
;			   (t (setq dx -1 dy 0)))
;
;		     (unless (and (= last-x-point this-x)
;				  (= last-y-point this-y))
;		       (incf total-length (+ (abs (- this-x last-x-point))
;					     (abs (- this-y last-y-point))))
;		       (setq last-x-point this-x
;			     last-y-point this-y)
;		       (push (list this-x this-y) border-points)))
;		    )
;	      )
;	  until (and (= this-x first-x)
;		     (= this-y first-y)
;		     (= dx 1)
;		     (= dy 0))
;	  finally
;	    (loop for ((x1 y1)(x2 y2)) on border-points
;		  while x2
;		  do (tv:%draw-line-internal x1 y1 x2 y2 tv:alu-setz t raster)
;		  finally
;		    (tv:%draw-line-internal x1 y1 first-x first-y tv:alu-setz t raster))
;	    (unless ( total-length minimum-length)
;		    (return nil))
;		  (return border-points))
;	)))
;  )

;;; added from >malone>hacks>new-find-raster-outline.lisp  -- lgm 9dec88

(defun 1FIND-OUTLINE-IN-SHEET-OR-RASTER-INTERNAL0 (raster first-x first-y
						 &key (threshold 1) (minimum-length 100)
						 (cut-corners t))
  (macrolet1 0((test-pt (x y &optional s dir)
	       (unless s (setq s `(* ,y span)))
	       `(and ,@(and (or (null dir) (memq dir '(:nw :n :ne))) `(( ,y 0)))
		     ,@(and (or (null dir) (memq dir '(:sw :w :nw))) `(( ,x 0)))
		     ,@(and (or (null dir) (memq dir '(:se :s :sw))) `((< ,y h)))
		     ,@(and (or (null dir) (memq dir '(:ne :e :se))) `((< ,x w)))
		     ( (aref ar (+ ,s ,x)) threshold))
	       )
	     (add-border-pt (x y)
	       `(unless (and (= last-x ,x)
			     (= last-y ,y))
		  (incf total-length (+ (abs (- ,x last-x))
					(abs (- ,y last-y))))
		  (setq last-x ,x
			last-y ,y)
		  (setq border-tail (cdr (rplacd border-tail (ncons (list last-x last-y))))))
	       )
	     (advance-pixel (dir)
	       (let* ((dirs  (memq dir (circular-list :N :NW :W :SW :S :SE :E :NE)))
		      (ydir  (or (eq dir :N) (eq dir :S)))
		      (neg   (or (eq dir :N) (eq dir :W)))
		      (yinc  (if ydir (if neg '- '+) (if neg '+ '-)))
		      (addx  (if ydir 'this-x 'new-x))
		      (addy  (if ydir 'new-y 'this-y))
		      (adds  (if ydir 'new-s 'this-s))
		      )
		 `(let ((new-x (,(if neg '- '+) this-x 1))
			(new-y (,yinc this-y 1))
			(new-s (,yinc this-s span)))
		    #+debug(format t "~C" ,(selectq dir (:N #/) (:W #/<) (:S #/) (:E #/>)))
		    (cond ((test-pt new-x new-y new-s ,(second dirs))
			   ;; 2probe forward and to the left:
0			   #+debug(format t "//")
			   (cond (all-rect
				  (add-border-pt ,addx ,addy))
				 (all-diag
				  (add-border-pt this-x this-y)
				  (add-border-pt new-x new-y))
				 ((test-pt ,addx ,addy ,adds T)
				  (add-border-pt ,addx ,addy))
				 (t
				  (add-border-pt this-x this-y)
				  (add-border-pt new-x new-y)))
			   (setq this-x new-x
				 this-y new-y
				 this-s new-s
				 direction ,(third dirs))
			   )
			  ((test-pt ,addx ,addy ,adds ,(first dirs))
			   ;; 2probe straight forward:
0			   ,(if ydir
				`(setq this-y new-y this-s new-s)
				`(setq this-x new-x))
			   )
			  (t
			   ;; 2pivot toward right:
0			   #+debug(format t "\")
			   (add-border-pt this-x this-y)
			   (setq direction ,(seventh dirs))
			   ))))
	       ))
    (let ((all-rect  (not cut-corners))
	  (all-diag  (eq cut-corners :force))
	  border-points)
      (tv:with-prepared-sheet-or-raster
	(raster :array ar :inside-width w :inside-height h
		:inside-left ar-l
		:inside-top ar-t
		:span span)
	(incf first-x ar-l)
	(incf first-y ar-t)
	(push (list first-x first-y) border-points)
	(loop named border
	      with threshold = (max 1 threshold)
	      and this-x = first-x
	      and this-y = first-y
	      and last-x = first-x
	      and last-y = first-y
	      and direction = :E
	      and total-length = 0
	      and border-tail = border-points
	      with this-s = (* this-y span)
	      do

	  (select direction
	    (:N  (advance-pixel :N))
	    (:E  (advance-pixel :E))
	    (:S  (advance-pixel :S))
	    (:W  (advance-pixel :W)))

	      until (and (= this-x first-x)
			 (= this-y first-y)
			 (eq direction :E))
	      finally
		(loop for x1 first (caar border-points) then x2
		      and for y1 first (cadar border-points) then y2
		      for (x2 y2) in (cdr border-points)
		      while x2
		      do (tv:%draw-line-internal x1 y1 x2 y2 tv:alu-setz t raster)
		      finally
			(tv:%draw-line-internal x1 y1 first-x first-y tv:alu-setz t raster))
		(unless ( total-length minimum-length)
		  (return nil))
		(return border-points))
	)))
  )


(defun1 FIND-OUTLINE-IN-SHEET-OR-RASTER0 (array &key start-y left top right bottom
		    (threshold 1)
		    (minimum-length 100)
		    )
  2;find one complete outline
0  (loop with start-x
	doing
    (multiple-value (start-x start-y)
      (find-dark-point-in-sheet-or-raster array
		       :left left :top top :right right :bottom bottom
		       :threshold threshold
		       :start-y start-y))
	until (null start-x)
	as outline = (find-outline-in-sheet-or-raster-internal
		       array start-x start-y
		       :minimum-length minimum-length
		       :threshold threshold)
	when outline
	  return (values start-x start-y outline)
		 ))


(defun 1FIND-OUTLINES-IN-SHEET-OR-RASTER0 (array &key start-y left top right bottom
					            (threshold 1) (minimum-length 100))
  (tv:noting-progress ("Finding outlines")
    (loop with current-border = nil
	  do (multiple-value (nil start-y current-border) 
	       (find-outline-in-sheet-or-raster array
						:start-y start-y
						:left left :top top
						:right right :bottom bottom
						:minimum-length minimum-length
						:threshold threshold
						))
	  while current-border
	  collect current-border)
    ))

(defun 1point-inside-outline-p0 (x0 y0 outline)
2  ;determine if point x0,y0 is inside the outline, using the
  ;well-known property that if it does, a line from x0,x0 to
  ;infinity will intersect the outline an odd number of times.
0  (loop with n-cuts = 0
	for ((x1 y1)(x2 y2)) on outline
	while x2
	when (tv:line-intersection x0 y0 -99 -100 x1 y1 x2 y2 )
	  do (incf n-cuts)
	finally (when (tv:line-intersection x0 y0 -99 -100
					    x1 y1
					    (first (first outline))
					    (second (first outline)))
		  (incf n-cuts))
		(return (oddp n-cuts))))

(defun 1nest-outlines0 (outlines)
  2;note that we know the contained outlines, if any, are
0  2;after the containing outlines in the list, due to the
0  2;way we generated the original outline list
0  (when outlines
    (loop with (l1) = outlines
	  and nested and un-nested
	  for l2 in (cdr outlines)
	  as ((x1 y1)) = l2
	  if (point-inside-outline-p x1 y1 l1)
	    do (push l2 nested)
	  else do (push l2 un-nested)
	  finally
	    (return (cons (cons l1 (nest-outlines (reverse nested)))
			  (nest-outlines (reverse un-nested)))))))

(defun 1find-nested-outlines-in-sheet-or-raster
0       (array &rest args)
  (declare (arglist (array &key start-y left top right bottom
			  (threshold 1)
			  (minimum-length 100)
			  )))
  (let ((raw-outlines (lexpr-funcall #'find-outlines-in-sheet-or-raster array args)))
    (values (nest-outlines raw-outlines)
	    raw-outlines)))


(defmethod (1:skeletonize 01bit-image-mixin)
	   (&key (dx 0)(dy 0)
		 (user:width (send self :width))
		 (user:height (send self :height)))
  (with-bit-arrays () 
    (skeletonize-sheet-or-raster data-array
				 :dx dx :dy dy :width user:width :height user:height)))

(defmethod (1:create-outline-image0 essential-image-methods)
	   (threshold &rest keywords
		      &key (intensity-operator :max) &allow-other-keys)
1  0(let ((new-image
	  (lexpr-send self :create-scaled-image :scaled-image-type 'b&w-image
		:dither nil :jitter nil
		:threshold threshold
		:intensity-operator intensity-operator
		keywords)))
    (send new-image :skeletonize)
    new-image))

(defmethod (1:raw-outlines 0essential-image-methods) 
	   (&rest keywords
		  &key
		  (scale-factor 1) ;for backward compatibility
		  (scale scale-factor)
		  (x-scale scale)
		  (y-scale scale)
		  threshold (minimum-length 33) &allow-other-keys)
  (si:with-rem-keywords (keywords keywords '(:threshold :minimum-length))
    (let ((ol (lexpr-send self :create-outline-image threshold keywords)))
      (unwind-protect
	  (let ((raw-outlines
		  (find-outlines-in-sheet-or-raster
		    (send ol :data-array )
		    :right (send ol :width)
		    :bottom (send ol :height)
		    :minimum-length (* minimum-length scale-factor))))
	    (when (not (eql scale-factor 1))
	      (loop for l in raw-outlines do
		(loop for pt in l
		      as (x y) = pt
		      do (setf (first pt) (// x x-scale))
			 (setf (second pt) (// y y-scale)))))
	    (send self :putprop raw-outlines :raw-outlines)
	    raw-outlines)
	(kill-image ol)))))

(defmethod (1:nested-outlines 0essential-image-methods)
	   (&rest keywords)
  (declare (arglist &key
		    (scale-factor 1)		;for backward compatibility
		    (scale scale-factor)
		    (x-scale scale)
		    (y-scale scale)
		    threshold (minimum-length 33) &allow-other-keys))
  (let ((raw-outlines (lexpr-send self :raw-outlines keywords)))
    (values (nest-outlines raw-outlines)
	    raw-outlines)))

#||

(defun draw-outline (outline window &optional (alu (send window :char-aluf)))
  (loop with o = (first outline)
	for ((x1 y1)(x2 y2)) on outline
	while x2 do
    (send window :draw-line x1 y1 x2 y2 alu)
    finally (send window :draw-line x1 y1 (first o)(second o) alu)))

(defun draw-outlines (outlines window &optional (alu (send window :char-aluf)))
  (loop for l in outlines do (draw-outline l window alu)))

||#

