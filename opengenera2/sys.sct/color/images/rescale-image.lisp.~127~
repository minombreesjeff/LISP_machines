;;; -*- Package: COLOR; Base: 10.; Mode: LISP -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD-EXTENDED NIL) "CPTFONTB")Additions to image mixins
0;;
;;
;; Two capabilities are added:
;;  To create re-scaled images, of the same type as the original
;;  To rapidly create re-scaled images of standard-palette-8bit
;;     type, for use in menus.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; 1Menu methods
0;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod (:discard-scaled-images essential-image-methods) (&rest kill-args)
  (loop for (nil image) on (send self :get :scaled-images) by #'cddr
	unless (named-image-p image)
	  do (lexpr-funcall #'kill-image image kill-args)
	finally (send self :remprop :scaled-images)))

(defmethod (%create-image-icon essential-image-methods) (from-image &rest rescale-options)
  (unless (when (send from-image :bit-arrays-valid-p)
	    (multiple-value-bind (nil err)
		(catch-error
		  (progn (send self :create-bit-arrays)
			 (send self :putprop t :building-icon)
			 (lexpr-send from-image :transfer-scaled-image self
				     :kill-derived-images nil
				     rescale-options
				     )
			 (send self :remprop :building-icon)))
	      (when err
		(format t "Error creating icon for ~A" from-image))
	      (when (or err (not (send self :bit-arrays-valid-p)))
		(send self :putprop :no :icon-file-exists))
	      (not err)))

    (kill-image self)
    (kill-derived-images from-image))
  )

(defmethod (%load-binary-file essential-image-methods) ()
  (send self :putprop t :building-icon)
  (multiple-value-bind (nil error-p)
      (catch-error (send self :load-binary-file :force-reload t
			 :frame (send self :current-frame)
			 ))
    (when error-p
      (format t "Error creating icon for ~A" self))
    (when (or error-p (not (send self :bit-arrays-valid-p)))
      (send self :putprop :no :icon-file-exists))
    ))

(defmethod (%load-image-icon-file essential-image-methods) ()
  (send self :putprop t :building-icon)
  (multiple-value-bind (nil error-p)
      (catch-error (send self :load-binary-file :force-reload t))
    (send self :remprop :building-icon)
    (when error-p
      (format t "Error creating icon for ~A" self))
    (when (or error-p (not (send self :bit-arrays-valid-p)))
      (let ((src (send self :get :source-image)))
	(when src
	  (send src :putprop :no :icon-file-exists)
	  (kill-derived-images src))))))

(defvar deferred-image-processes (list nil))
(defvar-resettable background-image-process nil)

(defun start-deferred-image-process (function image &rest args)
  (send image :create-bit-arrays)
  (multiple-value-bind (w h)(send image :size)
    (decf w)(decf h)
    (send image :fake-draw-lines 0 0 w 0 w h 0 h 0 0 w h)
    (send image :fake-draw-line w 0 0 h))
  (send image :putprop t :building-icon)
  (nconc deferred-image-processes (list (cons function (cons image (copylist args)))))
  (unless background-image-process
    (setq background-image-process
	  (process-run-function `(:name "Make Icons"
				  :priority -2
				  )
	    #'empty-image-process-queue))))
					   

(defun empty-image-process-queue (&key no-exit verbose)
  (setq background-image-process tv:current-process)
  (unwind-protect
      (loop when no-exit do (process-wait "Icon Wait"
			      #'(lambda ()
				  (when (cdr deferred-image-processes) t)))
	    as task = (second deferred-image-processes)
	    when (null task) do (loop-finish)
	    when (block recover
		   (error-restart ((sys:error) "Retry task ~S" task)
		     (progn (error-restart ((sys:error) "Discard task ~S and proceed" task)
			      (when verbose
				(format t "~&~D items;  Starting task ~S"
					(length (cdr deferred-image-processes))
					task))
			      (cl:apply (car task) (cdr task))
			      (when verbose
				(format t "~&~D items;  Finished ~S"
					(length (cdr deferred-image-processes))
					task))
			      (return-from recover t))
			    (return-from recover t))
		     (return-from recover nil)))
	      do (setf (cdr deferred-image-processes)
		       (cddr deferred-image-processes))
		 )
    (when verbose (format t "~&~D items;  Exiting" (length (cdr deferred-image-processes))))
    (setq background-image-process nil)))

(defmethod (:find-scaled-image essential-image-methods)
	   (&key scale (create-p :defer) (load-file) (rescale :select))
  (multiple-value-bind (w h)
      (send self :size)
    (if (and ( w *default-image-menu-size*) ( h *default-image-menu-size*))

	(let ((im self))
	  (when (send im :image-valid-p t)
	    (cond ((send im :image-valid-p nil))
		  ((eq load-file :defer)
		   (start-deferred-image-process #'%load-binary-file im))
		  (load-file (%load-binary-file im))
		  (t (setq im nil)))
	    im))

	(let ((si (send self :get :scaled-images))
	      (sf (fmax 1 (round (* scale 100)))))
	  (or (get (locf si) sf)
	      (let ((can-be-loaded (and load-file (send self :icon-file-exists)))
		    (can-be-created (and create-p (send self :bit-arrays-valid-p))))
		(when (or can-be-loaded can-be-created)
		  (let ((im (make-image (typep self)
					:name (format nil "(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")Icon0:~A" (send self :name))
					:remember-in-database nil
					:source-file source-file
					:width (round (* w scale))
					:height (round (* h scale))
					:load-image-icon t
					:invisible-to-database t
					:property-list (list :binary-map nil
							     :source-image self)
					:setup-color-map (standard-color-map self)
					:dont-load-binary t
					:binary-file-type :image-icon)))
		    (cond ((and can-be-loaded (eq load-file :defer))
			   (start-deferred-image-process #'%load-image-icon-file im))
			  ((and can-be-created (eq create-p :defer))
			   (start-deferred-image-process
			     #'%create-image-icon im self :rescale rescale))
			  (can-be-loaded (%load-image-icon-file im))
			  (can-be-created
			   (%create-image-icon im self :rescale rescale)))

		  (when (send im :bit-arrays-valid-p)
		    (putprop (locf si) im sf)
		    (send self :putprop si :scaled-images)
		    im)
		  ))))))))

(defmethod (:menu-icon essential-image-methods)
	   (&key (create-p :defer) (window)(load-file :defer)
		 (rescale :select))
  (multiple-value-bind (w h)(send self :size)
    (when (and w h)
      (let* ((scale (or (send self :get :menu-scale)
			(min (// *default-image-menu-size* (float w))
			     (// *default-image-menu-size* (float h)))))
	     (icon (send self :find-scaled-image :scale scale
			 :create-p (when (and create-p (send self :image-valid-p))
				     create-p)
			 :load-file load-file
			 :rescale rescale
			 )
		   ))
	(when icon
	  (when window
	    (let* ((screen (send window :screen))
		   (direct (compatible-pixel-depth-and-color-map icon 
				 2;don't use (tv:sheet-bits-per-pixel window) here,
0				 2;because if the window isn't exposed the rasters
0				 2;aren't set up yet.  The answer will be wrooong
0				 2;if the window is changing screens.
0				 (send screen :bits-per-pixel)
				 *standard-false-color-map*)
			   ))
	      (unless direct
		(multiple-value-bind (im-type nil im-create-anon)
		    (default-image-type window)
		  (when (eq im-create-anon :2b-image)
		    (setq im-create-anon :1b-image
			  im-type 'b&w-image))
		  (or (let ((new (send icon :get im-create-anon)))
			(when new (setq icon new)))
		      (let ((im (make-image im-type
					    :name (send icon :name)
					    :invisible-to-database t
					    :remember-in-database nil
					    :width (send icon :width)
					    :setup-color-map
					      (if (eq im-type 'false-color-image)
						  *standard-false-color-map*
						  nil)
					    :height (send icon :height)
					    :dont-load-binary t)))
			(if (or (eq create-p :defer) 
				(send icon :get :building-icon))
			    (start-deferred-image-process
			      #'%create-image-icon im icon
			      :rescale rescale)
			    (%create-image-icon im icon :rescale rescale))
			(send icon :putprop im im-create-anon)
			(setq icon im)
			))))))
	  icon)))))

(defmethod (:menu-bounding-box-size essential-image-methods) (window &rest ignore)
  (let ((icon (send self :menu-icon :window window))
	(lh (if window (send window :line-height) 14))
	(xoffs (if *box-image-icons* 5 1))
	(yoffs (if *box-image-icons* 5 1))
	)
    (if icon
	(multiple-value-bind (iw ih) (send icon :size)
	  (values (+ iw xoffs) (+ yoffs ih lh)))
	(let* ((menu-scale
		 (or (send self :get :menu-scale)
		     (min (// *default-image-menu-size* (float (send self :width)))
			  (// *default-image-menu-size* (float (send self :height)))))))
	  (multiple-value-bind (w h)
	      (send self :size)
	    (if (and (<= w 32.)
		     (<= h 24.))
		(values (+ xoffs (ceiling w))
			(+ yoffs (+ (ceiling h) lh)))
		(values (+ xoffs (ceiling (* menu-scale w)))
			(+ yoffs (ceiling (* menu-scale h)) lh)
			)))))))

(defmethod (:menu-print essential-image-methods) (window x y)
  (let* ((icon (send self :menu-icon :create-p :defer :window window))
	 (xoffs (if *box-image-icons* 2 0))
	 (yoffs (if *box-image-icons* 2 0)))

    (when icon
      (send icon
	    :send-image-to-window window
	    :wdx (+ x xoffs)
	    :wdy (+ y yoffs)
	    )
      (multiple-value-bind (iw ih) (send icon :size)
	(incf ih (+ y yoffs))
	(incf iw (+ x xoffs))
	(let ((lh (send window :line-height)))
	  (send window :display-x-y-centered-string
		(string (send self :name))
		(+ x xoffs) ih iw (+ ih lh)
		)
	  (when *box-image-icons*
	    (incf ih (+ lh yoffs -1))
	    (incf iw (1- xoffs))
	    (send window :draw-lines (send window :char-aluf) x y iw y  iw ih  x ih  x y)
	    ))))
    ))

(defmethod (:menu-invert essential-image-methods) (window x y)
  (let* ((icon (send self :menu-icon :create-p :defer :window window))
	 (xoffs (if *box-image-icons* 2 0))
	 (yoffs (if *box-image-icons* 2 0)))
    (when icon
      (multiple-value-bind (w h) (send icon :size)
	(send window :draw-rectangle w (send window :line-height)
	      (+ x xoffs) (+ y h yoffs) tv:alu-xor)
      ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; 
;; 1Scaling methods
0;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod (:scaled-image-type essential-image-methods) (&optional fast-p)
  fast-p ;obsolete
  (typep self))

(defmethod (:rgb rgb-image-mixin) ()
  (values red green blue))

;;
;; This is the method user's should use: it creates a new
;; image and invokes the copier to move in the new bits.
;;
(defvar special-scale-factors
	`((:square-to-pal :width #.(cl:// 16 19) :height 1)
	  (:pal-to-square :width #.(cl:// 19 16) :height 1)
	  (:square-to-hdtv :width #.(cl:// 3 4) :height 1)
	  (:hdtv-to-square :width #.(cl:// 4 3) :height 1)
	  (:square-to-abekas :width #.(cl:// 9 8) :height 1)
	  (:abekas-to-square :width #.(cl:// 8 9) :height 1)
	  ))

(defmethod (:create-scaled-image essential-image-methods)
	   (&rest other-args
		  &key
		  image
		  (scale-factor 1)
		  (scale scale-factor)
		  scale-factor-height
		  scale-factor-width
		  (x-scale scale-factor-width)
		  (y-scale scale-factor-height)
		  fast rescale (dither t) jitter
		  (scaled-rotation 0) transpose-xy

		  scaled-width scaled-height
		  scaled-image-type
		  scaled-image-name
		  (name scaled-image-name)
		  (scaled-image-map (send self :setup-color-map))
		  scaled-image-properties scaled-image-other-args
		  (frame (send self :current-frame))
		  (scaled-image-frame frame)
		  to-quad from-quad

		  from-left from-top from-right from-bottom
		  to-left to-top to-right to-bottom
		  &allow-other-keys
		  )

  (send self :set-current-frame frame)
  (let ((special-scale (assoc scale special-scale-factors)))
    (when special-scale
      (unless x-scale (setq x-scale scale))
      (unless y-scale (setq y-scale scale))))
  
  (let ((special-width (assoc x-scale special-scale-factors)))
    (when special-width
      (setq scaled-width
	    (truncate (* (get special-width :width)
			 (send self :width))))))

  (let ((special-height (assoc y-scale special-scale-factors)))
    (when special-height
      (setq scaled-height (truncate (* (get special-height :height)
				       (send self :height))))))

  (si:with-rem-keywords
    (other-args other-args
		'(:scale-factor :dither :rescale :frame :image
				:scale :x-scale :y-scale
				:scale-factor-width :scale-factor-height
				:scaled-width :scaled-height
				:scaled-rotation :transpose-xy
				:scaled-image-type :scaled-image-name
				:name
				:scaled-image-properties
				:scaled-image-other-args
				:scaled-image-frame
				:scaled-image-map))

    (let* ((my-width (send self :width))
	   (my-height (send self :height))
	   (scaled-width (when my-width
			   (round (or scaled-width
				      (when x-scale
					(* my-width x-scale))
				      (when scale
					(* my-width scale))
				      my-width))))
	   (scaled-height (when my-height
			    (round (or scaled-height
				       (when y-scale
					 (* my-height y-scale))
				       (when scale
					 (* my-height scale))
				       my-height))))
	   (image-type (or scaled-image-type (send self :scaled-image-type fast))))

      (when (or ( scaled-rotation 0)
		transpose-xy
		(and scaled-width (< scaled-width 0))
		(and scaled-height (< scaled-height 0))
		to-quad)
	(unless to-quad
	  (push nil other-args)
	  (push :perspective other-args))

	(destructuring-bind (x0 y0 x1 y1 x2 y2 x3 y3)
	    (or to-quad
		(with-stack-list (points 0 0
					 scaled-width 0
					 scaled-width scaled-height
					 0 scaled-height)
		  (scaled-and-rotated-points scaled-rotation points
					     :transpose-xy transpose-xy)))
	  (let ((minx (min x0 x1 x2 x3))
		(miny (min y0 y1 y2 y3)))
	    (decf x0 minx)
	    (decf x1 minx)
	    (decf x2 minx)
	    (decf x3 minx)
	    (decf y0 miny)
	    (decf y1 miny)
	    (decf y2 miny)
	    (decf y3 miny))
	  (setq scaled-image-properties `(:x-offset ,x0
					  :y-offset ,y0
					  ,@scaled-image-properties))
	  (setq to-quad (list x0 y0 x1 y1 x2 y2 x3 y3)
		scaled-width (floor (1+ (max x0 x1 x2 x3)))
		scaled-height (floor (1+ (max y0 y1 y2 y3))))
	  ))

      (let* ((creation-parameters 
	       (unless image
		 `(:create-scaled-image ,name
		   ,@(when fast `(:fast ,fast))
		   ,@(when rescale `(:rescale ,rescale))
		   ,@(when scale `(:scale ,scale))
		   ,@(when x-scale `(:x-scale ,x-scale))
		   ,@(when y-scale `(:y-scale ,y-scale))
		   ,@(when scaled-width `(:scaled-width ,scaled-width))
		   ,@(when scaled-height `(:scaled-height ,scaled-height))
		   ,@(when scaled-rotation `(:scaled-rotation ,scaled-rotation))
		   ,@(when transpose-xy `(:transpose-xy ,transpose-xy))

		   :from-width ,my-width
		   :from-height ,my-height
		   ,@(when from-quad `(:from-quad ,from-quad))
		   ,@(when from-left `(:from-left ,from-left))
		   ,@(when from-top `(:from-top ,from-top))
		   ,@(when from-right `(:from-right ,from-right))
		   ,@(when from-bottom `(:from-bottom ,from-bottom))

		   ,@(when to-quad `(:to-quad ,to-quad))
		   ,@(when to-left `(:to-left ,to-left))
		   ,@(when to-top `(:to-top ,to-top))
		   ,@(when to-right `(:to-right ,to-right))
		   ,@(when to-bottom `(:to-bottom ,to-bottom))
		   ,@(when dither `(:dither ,dither))
		   ,@(when :jitter `(:jitter ,jitter)))))
	     (image (or image
			(lexpr-funcall
			  #'make-image image-type
			  :name (or name
				    (format nil "~Ax~3F" (send self :name)
					    (if (zerop (* my-width my-height))
						'1e
						(// (* scaled-width scaled-height)
						    (float (* my-width
							      my-height)))
						)))
			  :creation-parameters creation-parameters
			  :setup-color-map  scaled-image-map
			  :properties scaled-image-properties
			  scaled-image-other-args
			  ))))
	(send image :set-current-frame scaled-image-frame)
	(send image :set-size scaled-width scaled-height)
	(multiple-value-bind (spec ip)
	    (when (and scaled-width scaled-height
		       (send self :image-valid-p t))
	      (send image :create-bit-arrays)
	      (lexpr-send self :transfer-scaled-image image
			  :from-quad from-quad
			  :to-quad to-quad
			  :dither dither :rescale rescale
			  other-args))
	  (values image spec ip)
	  )
	))))

;;
;; This whopper does the bounds checking and clipping - the continuations
;; do the actual copying.
;;
(defmethod (:transfer-in-scaled-image essential-image-methods)
	   (&rest other-args
		  &key (to-left 0)
		  (to-top 0)
		  (kill-derived-images t)
		  (to-right (send self :width))
		  (to-bottom (send self :height))
		  from-array combination-array
		  to-quad from-quad rescale fast
		  &allow-other-keys)

  (send self :with-single-bit-array
	#'(lambda (to-array)

	    (when kill-derived-images (kill-derived-images self))
	    (multiple-value-bind (to-image-type to-palette)
		(send self :transfer-image-type-spec)

	      (cond ((image-p from-array)
		     (lexpr-send from-array :transfer-scaled-image to-array
				 :to-array to-array
				 :to-left to-left
				 :to-top to-top
				 :to-right to-right
				 :to-bottom to-bottom
				 :to-image-type to-image-type
				 :combination-array (or combination-array to-palette)
				 other-args))
		    (t (si:with-rem-keywords (other-args other-args '(:kill-derived-images))
			 (lexpr-funcall
			   (if (or from-quad to-quad (eq rescale :filter) (eq fast :filter))
			       #'transform-quadrangle
			       #'zoom-rectangle)
			   :to-array to-array
			   :to-left to-left
			   :to-top to-top
			   :to-right to-right
			   :to-bottom to-bottom
			   :to-image-type to-image-type
			   :combination-array (or combination-array to-palette)
			   other-args
			   ))
		       )))))
  )

(defmethod (:transfer-scaled-image essential-image-methods)
	   (to-image
	     &rest other-args
	     &key (from-left 0)
	     (from-top 0)
	     (from-right (send self :width))
	     (from-bottom (send self :height))
	     translation-array
	     to-quad from-quad rescale fast
	     &allow-other-keys)

  (send self :with-single-bit-array
	#'(lambda (from-array)
	    (multiple-value-bind (from-image-type from-palette)
		(send self :transfer-image-type-spec)
	      (cond ((image-p to-image)
		     (lexpr-send to-image :transfer-in-scaled-image
				 :from-array from-array
				 :from-left from-left
				 :from-top from-top
				 :from-right from-right
				 :from-bottom from-bottom
				 :from-image-type from-image-type
				 :translation-array (or translation-array from-palette)
				 other-args))
		    (t 
		     (lexpr-funcall
		       (if (or from-quad to-quad (eq rescale :filter) (eq fast :filter))
			   #'transform-quadrangle
			   #'zoom-rectangle)
		       :to-array to-image
		       :from-array from-array
		       :from-left from-left
		       :from-top from-top
		       :from-right from-right
		       :from-bottom from-bottom
		       :from-image-type from-image-type
		       :translation-array (or translation-array from-palette)
		       other-args)))))
  ))



(3 0 (NIL 0) (NIL :BOLD :LARGE) "MEDFNTB");;
;; Histograming
;;

0(defwhopper (:histogram-image packed-rgb-image-mixin) (&rest args)
  (lexpr-continue-whopper :fetch :packed-rgb args))

(defwhopper (:histogram-image packed-yuv-image-mixin) (&rest args)
  (lexpr-continue-whopper :fetch :packed-yuv args))

(defmethod (:histogram-image essential-image-methods)
	   (&rest args
		  &key user:width user:height dx dy
		  (map (send self :setup-color-map))
		  result-type
		  from-color
		  (fetch :rgba)
		  (frame (send self :current-frame))
		  to-array
		  &allow-other-keys)
  (ignore result-type)
  (si:with-rem-keywords (new-args args '(:dx :dy :width :height :frame))
    (send self :with-single-bit-array
	  #'(lambda (from-array)
	      (setq to-array
		    (lexpr-funcall #'image-histogram
				   :from-array from-array
				   :from-image-type (send self :transfer-image-type-spec)
				   :from-left dx
				   :from-top dy
				   :from-right (or user:width (send self :width))
				   :from-bottom (or user:height (send self :height))
				   :map map
				   :fetch (or from-color
					      (if (and (listp from-array) (eq fetch :rgba))
						  :r+g+b
						  fetch))
				   new-args)))
	  :frame frame))
  to-array)


