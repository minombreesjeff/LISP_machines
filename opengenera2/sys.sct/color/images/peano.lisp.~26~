;;; -*- Mode: LISP; Package: COLOR; Base: 10. -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


(defvar hashed (make-equal-hash-table))
(defmacro defun-cached (fn args &rest body &aux internal)
  (setq internal (intern (string-append fn "-CACHED-INTERNAL") (symbol-package fn)))
  `(progn 'compile
	  (defun ,internal ,args ,@body)
	  (defun ,fn (&rest arglist)
	    (with-stack-list (l ',fn arglist)
	      (multiple-value-bind (..v ..t)
		  (send hashed ':get-hash l)
		(if ..t
		    (lexpr-funcall #'values ..v)
		    (setq ..v (multiple-value-list (lexpr-funcall #',internal arglist)))
		    (send hashed ':put-hash (copytree l) ..v)
		    (lexpr-funcall #'values ..v)))))))

;;;
;;; COLOR MAP OPTIMIZATION for the display of R G B color images on an 8 color system.

;;; Algorithms developed from R. J. Stevens, et.al.  
;;; "Manipulation and Presentation of Multidimensional Image Data Using the Peano Scan",
;;; IEEE Trans on Pattern Anal and Mach Intell, Sept. 1983.

;;; Multi-dimension Peano scan  developed from A. R. Butz,
;;; "Alternative Algorithm for Hilbert's Space-Filling Curve",
;;; IEEE Trans on Computer Graphics, April 1971.

(defun princ-pos(n n-bits)
  (when (oddp n) (setq n (logxor n (1- (lsh 1 n-bits)))))
  (if (zerop n) n-bits
      (loop for m first (lsh n -1) then (lsh m -1)
	    for pos from (1- n-bits) by -1
	    when (oddp m)
	    return pos
	    finally (ferror "lossage"))))

; this one is much faster (and following algorithm is sensitive to speed of this).
(defun right-circular-shift(number n word-length)
  (+ (lsh (logand number (1- (lsh 1 n))) (- word-length n))
     (lsh number (- n))))

(defun left-circular-shift(number n word-length)
  (right-circular-shift number (- word-length n) word-length))

(defvar max-n-coords 10.)
(defvar coord-arr (make-array max-n-coords ':initial-value 0 :type 'art-fixnum))
(defvar coord-bits (make-raster-array 32. max-n-coords
		     ':type 'art-1b ':displaced-to coord-arr))




; resulting n-space coords of number end up in coord-arr.
(defun peano(n-coords m-bits number &optional verbose)	
  (let ((coord-b coord-bits))
    (declare (sys:array-register coord-b))
    (loop for i from (1- m-bits) downto 0
	for rho = (ldb (byte n-coords (* n-coords i)) number)
	for shift first 0 then (mod (+ shift p-pos -1) n-coords) ; previous p-pos
	for p-pos = (princ-pos rho n-coords)
	for sigma = (logxor rho (lsh rho -1))
	for tau = (logxor sigma 1 (if (evenp rho) (lsh 1 (- n-coords p-pos)) 0))
	for omega first 0 then (logxor omega tau-p)	; previous omega and tau-p
	for sigma-p = (right-circular-shift sigma shift n-coords)
	for tau-p = (right-circular-shift tau shift n-coords)
	for alpha = (logxor omega sigma-p)
	when verbose
	do (format t "i=~2d rho=~2,6R p-pos=~2d sigma=~2,6R tau=~2,6R sigma-p=~2,6R ~
                      tau-p=~2,6R omega=~2,6R alpha=~2,6R~%"
		   (- m-bits i) rho  p-pos sigma tau sigma-p tau-p omega alpha)
	do (loop for coord from (1- n-coords) downto 0
		 for x first alpha then (lsh x -1)
		 do (setf (raster-aref coord-b i coord) (logand x 1))))))

; returns position on peano curve of n-space coords in coord-arr. 
(defun inv-peano(n-coords m-bits &optional verbose)
  (loop for i from (1- m-bits) downto 0
	with number = 0
	for omega first 0 then (logxor omega tau-p)	; previous omega and tau-p
	for shift first 0 then (mod (+ shift p-pos -1) n-coords)
	for alpha =
	(loop for coord from (1- n-coords) downto 0
	      for mask first 1 then (lsh mask 1)
	      unless (zerop (raster-aref coord-bits i coord)) 
	      sum mask)
	for sigma-p = (logxor alpha omega)
	for sigma = (left-circular-shift sigma-p shift n-coords)
	for rho =
	(loop repeat n-coords
	      for mask first (lsh 1 (1- n-coords)) then (lsh mask -1)
	      for prev-result first 0 then (lsh result -1)
	      for result = (logxor (logand sigma mask) prev-result)
	      sum result)
	for p-pos = (princ-pos rho n-coords)
	for tau = (logxor sigma 1 (if (evenp rho) (lsh 1 (- n-coords p-pos)) 0))
	for tau-p = (right-circular-shift tau shift n-coords)
	do (setq number (dpb rho (byte n-coords (* n-coords i)) number))
	when verbose
	do (format t "i=~2d rho=~2,6R p-pos=~2d sigma=~2,6R tau=~2,6R sigma-p=~2,6R ~
                      tau-p=~2,6R omega=~2,6R alpha=~2,6R~%"
		   (- m-bits i) rho  p-pos sigma tau sigma-p tau-p omega alpha)
	finally (return number)))



; functions to compute transforms m-bits-per-stage at a time.

(defun partial-peano(n-coords m-bits number shift-in &optional verbose)	
  (loop for i from (1- m-bits) downto 0
	for rho = (ldb (byte n-coords (* n-coords i)) number)
	for shift first shift-in then next-shift ; previous p-pos
	for p-pos = (princ-pos rho n-coords)
	for sigma = (logxor rho (lsh rho -1))
	for tau = (logxor sigma 1 (if (evenp rho) (lsh 1 (- n-coords p-pos)) 0))
	for omega first 0 then next-omega	; previous omega and tau-p
	for sigma-p = (right-circular-shift sigma shift n-coords)
	for tau-p = (right-circular-shift tau shift n-coords)
	for alpha = (logxor omega sigma-p)
	for next-shift = (mod (+ shift p-pos -1) n-coords)
	for next-omega = (logxor omega tau-p)
	when verbose
	do (format t "i=~2d rho=~2,6R p-pos=~2d sigma=~2,6R tau=~2,6R sigma-p=~2,6R ~
                      tau-p=~2,6R omega=~2,6R alpha=~2,6R~%"
		   (- m-bits i) rho  p-pos sigma tau sigma-p tau-p omega alpha)
	do
	(loop for coord from 0 below n-coords
	      for x first alpha then (lsh x -1)
	      do (setf (raster-aref coord-bits i coord) (logand x 1)))
	finally (return (values next-shift next-omega))))

#| no longer needed -- just tests the partial-peano function.
(defun full-peano(n-coords m-bits-per-stage n-stages number &optional verbose)
  (let ((pchunk-size (* m-bits-per-stage n-coords))
	shift omega next-omega)

    (fillarray coord-arr '(0))
    (multiple-value (shift omega)
      (partial-peano n-coords m-bits-per-stage
		       (load-byte number (* (1- n-stages) pchunk-size) pchunk-size)
		       0))
    (loop for stage from (- n-stages 2) downto 0
	  do 
	  (loop for coord from 0 below n-coords
		do (setf (aref coord-arr coord)
			 (lsh (aref coord-arr coord) m-bits-per-stage)))
	  
	  (multiple-value (shift next-omega)
	    (partial-peano n-coords m-bits-per-stage
			     (load-byte number (* stage pchunk-size) pchunk-size)
			     shift))
	    (loop for coord from (1- n-coords) downto 0
		  for o first omega then (lsh o -1)
		  with mask = (1- (lsh 1 m-bits-per-stage))
		  when (oddp o)
		  do (setf (aref coord-arr coord)
			   (logxor mask (aref coord-arr coord))))
	    (setq omega (logxor omega next-omega)))
    (when verbose
      (loop for coord from 0 below n-coords
	    do (format t "~2r~%" (aref coord-arr coord))))))
|#


; builds tables for fast transforms.
(defun-cached peano-table(n-coords desired-coord-size n-stages)
  (let*((m-bits-per-stage (ceiling desired-coord-size n-stages))
	(pchunk-size (* n-coords m-bits-per-stage))
	(coord-size (* n-stages m-bits-per-stage))
	(table-size (lsh 1 pchunk-size))
	(peano-table (make-array (* table-size n-coords)))
	(inv-table  (make-array (* table-size n-coords)))
	(alpha-map (make-array (lsh 1 coord-size))))
    (fillarray coord-arr '(0))
    (loop for index from 0 below table-size
	  do
	  (loop for shift from 0 below n-coords
		do (multiple-value-bind (next-shift next-omega) 
		       (partial-peano n-coords m-bits-per-stage index shift)
		     (setf (aref peano-table (+ index (* table-size shift)))
			   (list (* table-size next-shift)
				 (loop repeat n-coords
				       for m first (1- (lsh 1 m-bits-per-stage))
				             then (lsh m coord-size)
				       for o first next-omega then (lsh o -1)
				       when (oddp o) sum m)
				 (loop for coord from 0 below n-coords
				       for offset from 0 by coord-size
				       sum  (lsh (aref coord-arr coord) offset))))
		     (setf (aref inv-table
				 (+ (* shift table-size)
				    (loop for coord from 0 below n-coords
					  for offset from 0 by m-bits-per-stage
					  sum (lsh (aref coord-arr coord) offset))))
			   (list (* table-size next-shift)
				 (loop repeat n-coords
				       for m first (1- (lsh 1 m-bits-per-stage))
				             then (lsh m m-bits-per-stage)
				       for o first next-omega then (lsh o -1)
				       when (oddp o) sum m)
				 index)))))
    (loop for i from 0 below (lsh 1 coord-size)
	  do
	  (setf (aref alpha-map i)
		(loop repeat n-stages
		      for from-pos from 0 by m-bits-per-stage
		      for to-pos from 0 by pchunk-size
		      sum (lsh (load-byte i from-pos m-bits-per-stage) to-pos))))
	       
    (values peano-table inv-table alpha-map)))


(defun fast-peano(coord-arr n-coords desired-coord-size n-stages number
		    &optional verbose table)
  (let* ((m-bits-per-stage (ceiling desired-coord-size n-stages))
	 (coord-size (* n-stages m-bits-per-stage))
	 (extra-bits (- coord-size desired-coord-size))
	 (pchunk-size (* m-bits-per-stage n-coords))
	 coord-vector tmp-coord-vector shift omega next-omega)
    (unless table (setq table (peano-table n-coords desired-coord-size n-stages)))
    (setq number (ash number (* n-coords extra-bits)))
    
    (setf `(,shift ,omega ,coord-vector)
	  (aref table (load-byte number (* (1- n-stages) pchunk-size) pchunk-size)))
    
    (loop for stage from (- n-stages 2) downto 0
	  for chunk-pos from (* stage pchunk-size) by (- pchunk-size)
	  do 
	  (setf `(,shift ,next-omega ,tmp-coord-vector)
		(aref table (+ (load-byte number chunk-pos pchunk-size) shift)))
	  (setq coord-vector (logior (lsh coord-vector m-bits-per-stage)
				     (logxor tmp-coord-vector omega)))
	  (setq omega (logxor omega next-omega)))
   
    
    (when (plusp extra-bits)
      (loop repeat n-coords
	    with out-vector = 0
	    for in-vector first (ash coord-vector (- extra-bits))
	    then (ash in-vector (- coord-size))
	    for pos from 0 by desired-coord-size
	    do (setq out-vector (deposit-byte out-vector pos desired-coord-size in-vector))
	    finally (setq coord-vector out-vector)))

    (when coord-arr
      (unpack-coords coord-arr coord-vector desired-coord-size n-coords)
      (when verbose
	(loop for coord from (1- n-coords) downto 0
	      do (format t "~2r~%" (aref coord-arr coord)))))
    
    coord-vector))

(defun unpack-coords(coord-arr packed-coords bits-per-coord
		     &optional (n-coords (array-active-length coord-arr)))
  (loop for coord from 0 below n-coords
	for vector first packed-coords then (lsh vector (- bits-per-coord))
	with coord-mask = (1- (lsh 1 bits-per-coord))
	do (setf (aref coord-arr coord) (logand vector coord-mask))))




(defun fast-inv-peano
       (coord-arr n-coords desired-coord-size n-stages 
	&optional table alpha-map)
  (let*((m-bits-per-stage (ceiling desired-coord-size n-stages))
	(coord-size (* m-bits-per-stage n-stages))
	(extra-bits (- coord-size desired-coord-size))
	(pchunk-size (* m-bits-per-stage n-coords))
	rho-vector tmp-rho-vector shift omega next-omega scrambled-coords)
   (unless table
     (multiple-value (nil table )
       (peano-table n-coords desired-coord-size n-stages)))
   (unless alpha-map
     (multiple-value (nil nil alpha-map)
       (peano-table n-coords desired-coord-size n-stages)))

   (setq scrambled-coords
	  (loop for coord from 0 below n-coords
		for offset from 0 by m-bits-per-stage
		sum (ash (aref alpha-map (ash (aref coord-arr coord) extra-bits))
			 offset)))
    
    (setf `(,shift ,omega ,rho-vector)
	  (aref table (load-byte scrambled-coords (* (1- n-stages) pchunk-size) pchunk-size)))

    (loop for stage from (- n-stages 2) downto 0
	  for chunk-pos from (* stage pchunk-size) by (- pchunk-size)
	  do 
	  (setf `(,shift ,next-omega ,tmp-rho-vector)
		(aref table (+ (logxor (load-byte scrambled-coords chunk-pos pchunk-size)
				       omega)
			       shift)))
	  (setq rho-vector (logior (lsh rho-vector pchunk-size) tmp-rho-vector))
	  (setq omega (logxor omega next-omega)))

    (ash rho-vector (- (* n-coords extra-bits)))))


; color space transforms

; generalize this: build an array of arrays, or use a parametric argument to
; calculate the  color space coordinate.

(defun-cached peano-map-array (n-dims bits-per-coord n-stages)
  (let* ((peano-array-length (lsh 1 (* bits-per-coord n-dims)))
	 (peano-array (make-array peano-array-length
				  :area (image-bit-array-area)
				  ':initial-value 0 ))
	 )
    (tv:noting-progress ("creating peano map")
      (multiple-value-bind (table)
	  (peano-table n-dims bits-per-coord n-stages)
	(loop for i from 0 below peano-array-length
	      do (tv:note-progress i peano-array-length)
		 (setf (aref peano-array i)
		       (fast-peano nil n-dims bits-per-coord n-stages i nil table)))))
    peano-array))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI"); returns an array with n-buckets elements each pointing to the start of a new bucket.
0(defun histogram-equalize (bucket-array 1d-hist map-array mass-per-bucket total-mass)
  (si:fill-array bucket-array nil 0)
  (let ((map-array map-array)
	(1d-hist 1d-hist))
    (declare (sys:array-register-1d map-array 1d-hist))

    (tv:noting-progress ("equalize histogram")
      (loop with max-index = (array-length map-array)
	    and max-bucket = (array-length bucket-array)
	    and counted-mass = 0			
	    and start-index = 0
	    and indexes-used = 0
	    for bucket from 0
	    while (and (< bucket max-bucket)
		       (< indexes-used max-index))
	    do
	(loop for index from start-index below max-index
	      do
	  (incf indexes-used)
	      sum (aref 1d-hist (aref map-array index)) into bucket-mass
	      until (>= bucket-mass mass-per-bucket) 
	      finally
		(incf counted-mass bucket-mass)
		(setf (aref bucket-array bucket) (fmin max-index (incf index)))
		(setq start-index index))
	(tv:note-progress bucket max-bucket)
	    finally
	      (let* ((toobig (< indexes-used max-index))
		     (efficiency (if toobig
				     (// (float counted-mass) total-mass)
				     (// (float bucket) max-bucket)))
		     (retry-bucket-mass
		       (if toobig
			   (progn
			     ;; force the walk to be complete
			     (setf (aref bucket-array (1- max-bucket)) max-index)
			     (fmax 1 (round (// mass-per-bucket efficiency))))
			   (fmax 1 (round (* (// (float bucket) max-bucket) mass-per-bucket))))))
		#|| (format t "Histogram-equalize:  efficiency=~d, retry-bucket-mass=~d~%"
			efficiency retry-bucket-mass) ||#
		(return (values efficiency retry-bucket-mass)))))))

  
(defun 3d-peano-space-bucket-centroid
       (result-map bucket-array map-array 1d-hist-array
	&optional (1d-assignment-array 1d-hist-array)
	)
  1;;
0  1;; Find the weighted center of each bucket, which becomes
0  1;; the color value
0  1;;
0  (let* ((bits-per-coord (// (log2 (array-length 1d-hist-array)) 3))
	 (n-buckets (array-length bucket-array))
	 (bits-for-bucket-index (log2 n-buckets))
	 (1d-hist-array 1d-hist-array)
	 (1d-assignment-array 1d-assignment-array)
	 (byte1 (byte bits-per-coord 0))
	 (byte2 (byte bits-per-coord bits-per-coord))
	 (byte3 (byte bits-per-coord (* 2 bits-per-coord)))
	 )
    (declare (sys:array-register-1d 1d-hist-array 1d-assignment-array))
    (tv:noting-progress ("find centroid of map colors")
      (loop with n-buckets = (array-length bucket-array)
	    for bucket from 0 below n-buckets
	    for peano-start-index first 0 then peano-end-index
	    for peano-end-index = (aref bucket-array bucket)
	    as bucket-mass = 0
	    as accum-1 = 0
	    as accum-2 = 0
	    as accum-3 = 0
	    do
	(tv:note-progress bucket n-buckets)
	(loop for peano-index from peano-start-index below peano-end-index
	      for hist-index = (aref map-array peano-index)
	      for mass = (aref 1d-hist-array hist-index)
						; here is the assignment
	      do
	  (if (plusp mass)
	      (progn
		(setf (aref 1d-assignment-array hist-index)
		      (logior (ash mass bits-for-bucket-index) bucket ))
		(incf bucket-mass mass)
		(incf accum-1 (* mass (ldb byte1 hist-index)))
		(incf accum-2 (* mass (ldb byte2 hist-index)))
		(incf accum-3 (* mass (ldb byte3 hist-index)))
		)
	      (setf (aref 1d-assignment-array hist-index) -1)))
	(let ((quo (ash (fmax 1.0 (float bucket-mass)) bits-per-coord)))
	  (send result-map :write-color-map bucket
		(// accum-1 quo)
		(// accum-2 quo)
		(// accum-3 quo))
	  )
	))
    result-map))

(defvar *map-analyze-threshold* 1)
(defun map-analyze (bins-per-color 1d-assignment-array color-map
		    threshold
		    replay-offset)
  (let* ((size (send color-map :color-map-description))
	 (threshold-1 (// (float threshold) size))
	 (threshold (* threshold-1 threshold-1))
	 (bits-for-bucket-index (log2 size))
	 (bucket-index-mask (1- (ash 1 bits-for-bucket-index)))
	 (1d-assignment-array 1d-assignment-array)
	 (sh (- bits-for-bucket-index))
	 )

    (declare (sys:array-register-1d 1d-assignment-array))
    
    (tv:noting-progress ("Remap optimize")
      (loop with step = (// 1.0 bins-per-color)
	    for b from 0 below bins-per-color
	    as fb from 0 by step
	    with linear-index = 0
	    do
	(tv:note-progress b bins-per-color)
	(loop repeat bins-per-color
	      as fg from 0 by step
	      do
	  (loop repeat bins-per-color
		as fr from 0 by step
		for color-info = (aref 1d-assignment-array linear-index)
		for bucket = (logand color-info bucket-index-mask)
		for bucket-mass = (ash color-info sh)
		when (> bucket-mass 0)
		  do
		    (multiple-value-bind (nr ng nb)
			(send color-map :read-color-map bucket)
		      (let* ((dr (- nr fr))
			     (dg (- ng fg))
			     (db (- nb fb))
			     (dist (+ (* dr dr) (* dg dg) (* db db))))
			(when (> dist threshold)
			  (setq bucket
				(send color-map :flonum-closest-color-in-palette
				      fr fg fb))
			  )
			(setf (aref 1d-assignment-array linear-index)
			      (+ replay-offset bucket))
			))
		do
	    (incf linear-index)))
	))
    ))


(defun-cached make-color-hist (bins-per-color)
  (make-array (expt bins-per-color 3)
	      :area (image-bit-array-area)
	      :type 'art-q
	      :initial-value 0))

(defun array-total-mass (array)
  (let ((ar array))
    (declare (sys:array-register-1d ar))
    (loop for idx from 0 below (array-length ar)
	  sum (aref ar idx))))

(defvar-resettable color-map-optimize nil)
(defun color-map-optimize
       (&optional (n-buckets 254)(bins-per-color 64)
	(color-hist (make-color-hist bins-per-color))
	(total-mass (array-total-mass color-hist))
	)
  (si:with-process-lock ((locf color-map-optimize))
    (let ((color-map (make-instance 'standard-color-map :size n-buckets))
	(peano-map (peano-map-array 3 (log2 bins-per-color) 2)))
    (tv:with-stack-array (bucket-array n-buckets)

      (loop for bucket-size first (ceiling total-mass n-buckets) then retry-bucket-size
	    with retry-bucket-size with efficiency = 0 and old-efficiency
	    as tries from 1
	    do
	(setq old-efficiency (round (* efficiency 100.0)))
	(multiple-value (efficiency retry-bucket-size)
	  (histogram-equalize bucket-array color-hist peano-map
			      bucket-size total-mass))
	    until
	      (or (>= (+ (* tries 0.005) efficiency) 1.0)
		  (= (round (* 100.0 efficiency)) old-efficiency)))

	    
      (3d-peano-space-bucket-centroid
	color-map bucket-array peano-map color-hist
	)
      color-map))))

(defun remap-optimize (bins-per-color color-histogram color-map replay-offset)
  (map-analyze bins-per-color color-histogram
	       color-map
	       *map-analyze-threshold* 
	       replay-offset))

