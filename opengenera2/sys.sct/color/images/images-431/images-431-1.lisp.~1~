;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: USER; Base: 10; Patch-File: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Patch file for IMAGES version 431.1
;;; Reason: Function COLOR:RESOLVE-EDGES:  fix double zoom problem (patch from Mystech)
;;; Written by Reti, 11/20/96 11:28:31
;;; while running on ZUGSPITZE from FEP2:>Inc-451-44-from-DVLM-J.ilod.1
;;; with Experimental System 451.57, Experimental CLOS 436.0, Experimental RPC 440.3,
;;; Experimental Embedding Support 432.0, Experimental MacIvory Support 445.1,
;;; Experimental UX Support 441.0, Experimental Development Utilities 436.0,
;;; Experimental Old TV 434.0, Experimental Zwei 434.3, Experimental Utilities 443.1,
;;; Experimental RPC Development 435.1, Experimental MacIvory Development 432.0,
;;; Experimental UX Development 440.0, Experimental Server Utilities 440.1,
;;; Experimental Serial 433.0, Experimental Hardcopy 444.0, Experimental Zmail 441.2,
;;; Experimental SCSI 429.0, Experimental Tape 443.3, Experimental LMFS 441.1,
;;; Experimental NSage 439.0, Experimental Extended Help 440.0,
;;; Experimental CL Developer 427.0, Experimental Documentation Database 440.3,
;;; Experimental IP-TCP 450.7, Experimental IP-TCP Documentation 422.0,
;;; Experimental CLX 447.1, Experimental X Remote Screen 446.2,
;;; Experimental X Documentation 421.1, Experimental NFS Client 440.0,
;;; Experimental NFS Documentation 423.1, Experimental Serial Networks 6.1,
;;; Experimental Serial Networks Documentation 8.0, Experimental DNA 437.0,
;;; Experimental Metering 443.1, Experimental Metering Substrate 443.0,
;;; Experimental Conversion Tools 435.0, Experimental Hacks 439.1,
;;; Experimental Mac Dex 431.0, Experimental HyperCard/MacIvory 431.0,
;;; Experimental Statice Runtime 465.2, Experimental Statice Browser 465.0,
;;; Experimental Statice 465.0, Experimental Statice Documentation 425.0,
;;; Experimental CLIM 71.10, Experimental Genera CLIM 71.0,
;;; Experimental CLX CLIM 71.0, Experimental PostScript CLIM 71.3,
;;; Experimental CLIM Documentation 71.27, Experimental CLIM Demo 71.3,
;;; Experimental Symbolics Concordia 442.0,
;;; Experimental Essential Image Substrate 431.0, Experimental Image Substrate 438.1,
;;; Experimental Graphic Editing Documentation 431.0,
;;; Experimental Graphic Editing 439.0, Experimental Graphic Editor 438.0,
;;; Experimental Bitmap Editor 439.0, Experimental Postscript 434.0,
;;; Experimental Concordia Documentation 431.0, Experimental Lock Simple 435.1,
;;; Experimental Producer 419.0, Version Control 405.0, Compare Merge 404.0,
;;; VC Documentation 401.0, Symbolics In-House 442.1,
;;; Symbolics In-House Documentation 424.9, SCRC 440.1, Weather User 424.1,
;;; Logical Pathnames Translation Files NEWEST, Experimental IFEP Compiler 52.3,
;;; Experimental IFEP Kernel 329.22, Experimental IFEP Utilities 329.12,
;;; Experimental VLM Debugger 329.6, Experimental Minima Developer 49.6,
;;; Experimental Minima Debugger 29.38, Experimental Alpha AXP Assembler 7.3,
;;; Experimental Alpha AXP OSF VLM 7, Experimental Alpha AXP Emulator Support 7.5,
;;; Experimental Alpha AXP Translator Support 7.2,
;;; Experimental Alpha AXP Translator 7.15, Experimental VLM Development 1.0,
;;; Experimental Color 427.0, Experimental Graphics Support 431.0,
;;; Experimental Genera Extensions 16.0,
;;; Experimental Color System Documentation 10.0, Experimental SGD Book Design 10.0,
;;; Experimental FrameThrower 14.0, Experimental FrameThrower XL Interface 14.0,
;;; Experimental Ivory Color Support 11.0, HTTP Server 60.58,
;;; Showable Procedures 36.3, Binary Tree 34.0, W3 Presentation System 2.2,
;;; HTTP 1.0 Base Client 35.3, Experimental C Runtime 437.0,
;;; Experimental Compiler Tools Package 433.0,
;;; Experimental Compiler Tools Runtime 433.0, Experimental C Packages 435.0,
;;; Experimental Minimal Lexer Runtime 438.0, Experimental Lexer Package 437.0,
;;; Experimental Syntax Editor Runtime 433.0, Experimental Djpeg 6.0,
;;; Experimental C 439.0, Experimental Lexer Runtime 437.0,
;;; Experimental Lalr 1 433.0, Experimental Context Free Grammar 438.0,
;;; Experimental Context Free Grammar Package 438.0, C Library Headers 433,
;;; Experimental Compiler Tools Development 434.0,
;;; Experimental Compiler Tools Debugger 433.0, Experimental C Documentation 426.0,
;;; Experimental Syntax Editor Support 433.0, Experimental LL-1 support system 437.0,
;;; Experimental Harbison Steele Doc 437.0, Experimental Hardcopy Restriction 432.0,
;;; Experimental Images 431.0, cold load 1, Ivory Revision 4A (FPA enabled),
;;; IFEP 325, FEP0:>i325-loaders.flod(8), FEP0:>i325-info.flod(8),
;;; FEP0:>i325-debug.flod(8), FEP0:>i325-lisp.flod(8), FEP0:>i325-kernel.fep(9),
;;; Boot ROM version 320, Device PROM version 325, Genera application 5.6,
;;; MacIvory SCSI Manager Server 4.3.1, Toolbox Servers 4.2,
;;; MacIvory Serial I/O Server 1.2.1, MacIvory & RPC library 6.3.2,
;;; MacIvory life support 4.3.6, Macintosh System Software 7.0,
;;; 1152x814 Screen with Genera fonts, Machine serial number 30421, Macintosh IIx,
;;; Apple Extended Keyboard II,
;;; Allow serial and net stuff (from RETI:RETI;NET-PATCHES.LISP.2),
;;; Make expand mailing list do a better job of chasing down mail host (from Z:>reti>better-expand-patch.lisp.2),
;;; Prompt if no embedding host type known (from S:>Reti>embed-host-patch),
;;; FrameThrower Microload 74 (from SYS:COLOR;FRAMETHROWER;INITIALIZATION.LISP.167),
;;; Patch TCP hang on close when client drops connection. (from HTTP:LISPM;SERVER;TCP-PATCH-HANG-ON-CLOSE.LISP.8),
;;; Map tar patch (from Z:>Reti>map-tar-patch.lisp.3).


#+(OR MINIMA-RUNTIME MINIMA-DEVELOPER) (IN-PACKAGE "COMMON-LISP-USER")


(SCT:FILES-PATCHED-IN-THIS-PATCH-FILE 
  "SYS:COLOR;IMAGES;IMAGE.LISP.590")


;========================
(SCT:BEGIN-PATCH-SECTION)
(SCT:PATCH-SECTION-SOURCE-FILE "SYS:COLOR;IMAGES;IMAGE.LISP.590")
(SCT:PATCH-SECTION-ATTRIBUTES
  "-*- Package: COLOR; Base: 10.; Mode: LISP; -*-")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")Elaboration of the bit array stream protocol
0;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; (2 0 (NIL 0) (NIL :BOLD-EXTENDED NIL) "CPTFONTB")Utility functions
0;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; resolve edge specs into a legal set, get some edges from
;; the mouse if needed.
;;
(defun resolve-edges (window wdx wdy iwidth iheight edges from-field to-field
		      &key (scale 1) (x-scale scale)(y-scale scale))
  
  (let* ((iswin (typep window 'tv:sheet))
	 (isimage (typep window 'essential-image-methods))
	 (wwidth (cond ((or iswin isimage)
			(send window :width))
		       (t (when (listp window) (setq window (first window)))
			  (decode-raster-array window))))
	 (wheight (if (or iswin isimage)
		      (send window :height)
		      (multiple-value-bind (nil w)
			  (decode-raster-array window)
			w)))
	 (iwidth (or iwidth wwidth))
	 (iheight (or iheight wheight))
	 (width (ceiling (* iwidth x-scale)))
	 (height (ceiling (* iheight y-scale)))
	 (wleft (if iswin (tv:sheet-inside-left window) 0))
	 (wtop (if iswin (tv:sheet-inside-top window) 0))
	 (wright (if iswin (- wwidth (tv:sheet-right-margin-size window)) wwidth))
	 (wbot (if iswin (- wheight (tv:sheet-bottom-margin-size window)) wheight))
	 (wdx (or wdx 0))
	 (wdy (or wdy 0)))

    (when to-field
      (setq height (* height 2)))
    (when from-field
      (cond ((eql from-field 1) (setq height (ceiling height 2)))
	    ((eql from-field 2) (setq height (floor height 2)))))

    (multiple-value-bind (left top right bottom)
	(cond ((eq edges :everything)
	       (values wdx wdy width height))
	      ((eq edges :inside)
	       (let ((left (+ wleft wdx))
		     (top (+ wtop wdy)))
		 (values left top
			 (min wright (+ left width))
			 (min wbot (+ top height)))))
	      ((eq edges :mouse)
	       (tv:with-mouse-grabbed-on-sheet (window)
		 (tv:mouse-set-blinker-definition :character 0 0 :on
						  :set-character #\mouse:nw-corner)
		 (loop with left and top and right and bottom do
		   (multiple-value (left top right bottom)
		     (funcall *msr-function*
			      wdx wdy (+ wdx width) (+ wdy height)
			      window
			      0 0 t))
		       until (and left right bottom top)
		       finally (return (values left top right bottom)))
	       ))
	      ((listp edges)
	       (let* ((left (+ wleft (or (first edges) wdx 0)))
		      (top (+ wtop (or (second edges) wdy 0))))
		 (values left
			 top
			 (min wright
			      (cond ((third edges)
				     (+ (third edges) wleft))
				    (t (+ left width))))
			 (min wbot
			      (cond ((fourth edges)
				     (+ (fourth edges) wtop))
				    (t (+ top height)))))))
	      (t ;; unspecified, default to inside coordinates
	       (let ((left (+ wdx wleft))
		     (top (+ wdy wtop))
		     )
		 ;; clip to inside coordinates
		 (values (max wleft left)
			 (max wtop top)
			 (min wright
			      (+ left width))
			 (min wbot
			      (+ top height))))
	       ))
      (let ((left (min (max 0 left) wwidth))
	    (top (min (max 0 top) wheight))
	    (height (min iheight
			 (floor (max (- (min wheight bottom) top) 0) y-scale)))
	    )

	(when from-field (setq height (* height 2)))

	(cond ((eql to-field 1) (setq height (ceiling height 2)))
	      ((eql to-field 2) (setq height (floor height 2))))
	(values left top
		(min iwidth (floor (max (- (min wwidth right) left) 0) x-scale))
		height))
      )
    ))

