;;; -*- Mode: LISP; Base: 10.; Package: SYSTEM-INTERNALS -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(DEFVAR *USE-FAST-FEP-FILES* T)
(DEFVAR *CONTINUATION* NIL)
(DEFVAR *STRING-IN-FUNCTION*)
(DEFVAR *STRING-OUT-FUNCTION*)
(DEFVAR *MAKE-ARRAY-FUNCTION*)
(DEFVAR *RLD-FUNCTION*)
(DEFVAR *RLE-FUNCTION*)
(DEFVAR *TO-FIELD* nil)
(DEFVAR *FROM-FIELD* nil)
(DEFVAR *IMAGE-TYPE*)
(DEFVAR *DEST-IMAGE-TYPE*)
(DEFVAR *LAST-KEY* NIL)
(DEFVAR *SHEET-TO-PREPARE*)
(DEFVAR *SHIFT* NIL)
(DEFVAR *WRITE-MASK* NIL)
(defvar *default-alpha* 255.)
(DEFVAR *COLOR-MAP-TRANSLATION* NIL)
(DEFVAR *WINDOW-COLOR-MAP-TRANSLATION* NIL)
;; offsets for the destination array
(DEFVAR *DEST-LEFT-MARGIN*)
(DEFVAR *DEST-TOP-MARGIN*)
(DEFVAR *DEST-X-SCALE* 1)
(DEFVAR *DEST-Y-SCALE* 1)
(DEFVAR *DEST-RESCALE* :SELECT)

;; offsets for the source array
(DEFVAR *SOURCE-LEFT-MARGIN*)
(DEFVAR *SOURCE-TOP-MARGIN*)

;; size to transfer into
(DEFVAR *DEST-WIDTH*)
(DEFVAR *DEST-HEIGHT*)




(DEFVAR BLOCK-TYPES NIL)

(DEFSTRUCT (TYPE-DESC (:TYPE :LIST))
  NAME TEST READER WRITER)


(DEFUN BOUT32 (STREAM DAT)
  (SEND STREAM ':TYO (LOAD-BYTE DAT 16 16))
  (SEND STREAM ':TYO (LOAD-BYTE DAT 0 16)))

(DEFUN BIN32 (STREAM)
  (LET ((HI (SEND STREAM ':TYI))
	(LO (SEND STREAM ':TYI)))
    (AND HI LO (%LOGDPB HI (BYTE 16 16) LO))))

(DEFMACRO MAKE-BLOCK-TYPE (NAME CODE TEST READER WRITER)
  `(PROGN 'COMPILE
	  (DEFCONST ,NAME ,CODE)
	  (PUTPROP (LOCF BLOCK-TYPES)
		   (MAKE-TYPE-DESC NAME ',NAME
				   TEST ',TEST
				   READER ',READER
				   WRITER ',WRITER)
		   ,CODE)))

(MAKE-BLOCK-TYPE *RAW-ARRAY* 1 ARRAYP-AND-NOT-STRINGP LOAD-AS-RAW-ARRAY DUMP-AS-RAW-ARRAY)
(MAKE-BLOCK-TYPE *SYMBOL* 2 SYMBOLP LOAD-AS-SYMBOL DUMP-AS-SYMBOL)
(MAKE-BLOCK-TYPE *STRING* 3 STRINGP LOAD-AS-STRING DUMP-AS-STRING)
;; reserved for paint
;;(MAKE-BLOCK-TYPE ARRAY-IN-SHEETS-CLOTHING 4 ARRAY-IN-SHEETS-CLOTHING-P
;;		 LOAD-AS-ARRAY-IN-SHEETS-CLOTHING
;;		 DUMP-AS-ARRAY-IN-SHEETS-CLOTHING)
;;
(MAKE-BLOCK-TYPE *FIXNUM* 5 FIXP LOAD-AS-FIXNUM DUMP-AS-FIXNUM)

(DEFUN ARRAYP-AND-NOT-STRINGP (X)
  (AND (ARRAYP X) (NOT (STRINGP X))))

(DEFUN DUMP-AS-FIXNUM (STREAM FIXN &OPTIONAL OPTIONS)
  (BOUT32 STREAM 8)
  (BOUT32 STREAM (CL:GETF OPTIONS :BLOCK-TYPE *FIXNUM*))
  (BOUT32 STREAM FIXN)
  8
  )

(DEFUN LOAD-AS-FIXNUM
       (STREAM LEN OPTIONS)
  OPTIONS LEN
  (BIN32 STREAM))

;;
;; Symbols,
;;
(DEFUN DUMP-AS-SYMBOL (STREAM SYMB &OPTIONAL OPTIONS)
  (LET ((STR (LET ((PACKAGE (PKG-FIND-PACKAGE ':KEYWORD)))
	       (FORMAT NIL "~S" SYMB))))
    (DUMP-AS-RAW-ARRAY STREAM STR
		       `(:BLOCK-TYPE ,*SYMBOL* ,@OPTIONS))))

(DEFUN LOAD-AS-SYMBOL
       (STREAM LEN OPTIONS
	&AUX &SPECIAL *RLD-FUNCTION* (*MAKE-ARRAY-FUNCTION* 'MAKE-ARRAY))
  (LET ((PACKAGE (PKG-FIND-PACKAGE 'KEYWORD))
	(STR (LOAD-AS-RAW-ARRAY STREAM LEN
				`(:INTERNAL-ARRAY-TYPE ART-STRING ,@OPTIONS))))
    (READ-FROM-STRING STR)))

;;
;; Strings (really a type of array)
;;
(DEFUN DUMP-AS-STRING (STREAM STR &OPTIONAL OPTIONS)
  (DUMP-AS-RAW-ARRAY STREAM STR
		     `(:BLOCK-TYPE ,*STRING* ,@OPTIONS)))

(DEFUN LOAD-AS-STRING
       (STREAM LEN OPTIONS
	&AUX &SPECIAL *RLD-FUNCTION* (*MAKE-ARRAY-FUNCTION* 'MAKE-ARRAY))
  (LOAD-AS-RAW-ARRAY STREAM LEN
		     `(:STRINGP T ,@OPTIONS)))

;; ;; Arrays, which are the basis for all arrays, strings and symbols ;;
;; Array format is
;;
;;	N	        ;; number of bytes to follow 
;;	blocktype	;; 1 2 or 3 for array, string, or symbol ;;
;;      bits-per-elt	;; number of bits per element
;;	n-dims	     	;; number of dimensions
;;	dim1 ... dimn	;; N words of data, one for each dimension
;;	block data	;; data to fill the array
;;
(DEFUN DUMP-AS-RAW-ARRAY
       (&SPECIAL STREAM ARRAY &OPTIONAL &SPECIAL OPTIONS 
	&AUX (A-BITS-PER-ELT (ARRAY-ELEMENT-BYTE-SIZE ARRAY))
	(RLE-LENGTH (CL:GETF OPTIONS :RLE-LENGTH))
	(DIMS (IF RLE-LENGTH
		  (CONS RLE-LENGTH NIL)
		  (REVERSE (ARRAY-DIMENSIONS ARRAY))))
	(RLE (AND *RLE-FUNCTION* (= 2 (LENGTH DIMS)))))

  (IF (OR RLE (= A-BITS-PER-ELT 32.))
      (SELECTQ *LAST-KEY*
	(:DATA-ARRAY (SETQ *SHIFT* NIL))
	(:RED (SETQ *SHIFT* 0))
	(:GREEN (SETQ *SHIFT* 8))
	(:BLUE (SETQ *SHIFT* 16.))
	(:ALPHA (SETQ *SHIFT* 24.))
	((:Y :U :V) (SETQ *SHIFT* *LAST-KEY*))
	(T (SETQ *SHIFT* NIL)))
      (SETQ *SHIFT* NIL))

  (IF RLE
      (FUNCALL *RLE-FUNCTION* ARRAY 
	       #'(LAMBDA (ARR LEN)
		   (DUMP-AS-RAW-ARRAY STREAM ARR
				      `(:RLE-LENGTH ,LEN ,@OPTIONS)))
	       )
      (LET* ((EXTRA-WORDS (CL:GETF OPTIONS :EXTRA-WORDS))
	     (LENGTH (COND (RLE-LENGTH)
			   ((NULL (CDR DIMS)) (CAR DIMS))
			   (T (CL:APPLY '*
				     (tv:raster-width-for-bitblt
				       (car dims) 
				       (IF *SHIFT* 'ART-8B (ARRAY-TYPE ARRAY)))
				     (CDR DIMS)))))
	     (N-BITS (IF (AND *SHIFT* (NULL RLE-LENGTH))
			 8
			 A-BITS-PER-ELT))
	     (STRING-OUT-LENGTH (// (* LENGTH N-BITS) 16.))
	     (LAST-WORD (// (* STRING-OUT-LENGTH 16.) N-BITS))
	     (16-LENGTH (IF (= LAST-WORD LENGTH)
			    STRING-OUT-LENGTH
			    (1+ STRING-OUT-LENGTH)))
	     (TOTAL-LEN (+ 12
			   (* 4 (+ (LENGTH EXTRA-WORDS) (LENGTH DIMS)))
			   (* 2 16-LENGTH))))
	
	(BOUT32 STREAM TOTAL-LEN)         ;; size
	(BOUT32 STREAM (CL:GETF OPTIONS :BLOCK-TYPE *RAW-ARRAY*))         ;; block type
	
	(LOOP FOR I IN EXTRA-WORDS DO
	      (BOUT32 STREAM I))
	
	(BOUT32 STREAM N-BITS)            ;; bits per elem
	(BOUT32 STREAM (LENGTH DIMS))     ;; number of dims
	(LOOP FOR I IN DIMS DO (BOUT32 STREAM I))  ;; dims

	(FUNCALL *STRING-OUT-FUNCTION* STREAM ARRAY STRING-OUT-LENGTH DIMS)

	(UNLESS (= LENGTH LAST-WORD)
	  ;; combine the last few bytes into a 16 bit word
	  ;; (we only get here with 1d arrays, because all window arrays
	  ;; are forced to be multiples of 32bits wide)
	  (LOOP WITH VAL = 0
		FOR I FROM LAST-WORD BELOW LENGTH
		DO
		(SETQ VAL (+ (LSH VAL N-BITS)
			     (SELECTQ *SHIFT*
			       (NIL (CHAR-CODE (AREF ARRAY I)))
			       ((0 8 16 24)
				(LOAD-BYTE (CHAR-CODE (AREF ARRAY I)) *SHIFT* 8)))
			     ))
		FINALLY (SEND STREAM ':TYO VAL)))
      TOTAL-LEN)))

;;
;; returns a length appropriate for both art-16b and for bitblt, 
;; which requires multiples of 32
;;
(DEFUN ROW-LENGTH-AS-16-ARRAY
       (ARRAY N)
  (let* ((BPE (IF *SHIFT* 8
		  (ARRAY-ELEMENT-BYTE-SIZE ARRAY))))
    (* 2 (ceiling (* bpe n) 32))))

(DEFUN STRING-OUT-FROM-DISPLACED-ARRAY 
       (STREAM ARRAY NBYTES DIMS)

  (IF (AND *USE-FAST-FEP-FILES*
	   (= (LENGTH DIMS) 2)
	   (NULL *SHIFT*)
	   (NULL *FROM-FIELD*)
	   (NULL *TO-FIELD*)
	   (SEND STREAM :OPERATION-HANDLED-P :WRITE-2D-ARRAY-REAL-FAST))
      

      (SEND STREAM :WRITE-2D-ARRAY-REAL-FAST ARRAY
	    :WIDTH (FIRST DIMS)
	    :HEIGHT (SECOND DIMS)
	    :X 0 :Y 0)
      (LET* ((LINELEN (ROW-LENGTH-AS-16-ARRAY ARRAY (FIRST DIMS)))
	     (FROM-FIELD *FROM-FIELD*)
	     (TO-FIELD *TO-FIELD*)
	     (EMIT-BLANKS (EQL *TO-FIELD* 2))
	     (ALEN (+ (IF TO-FIELD LINELEN 0) LINELEN))
	     (ARRAY-TYPE (ARRAY-TYPE ARRAY)))

      ;; DISPLACED ARRAYS (USUALLY SCREEN BIT ARRAYS)
	(WITH-STACK-LIST (LINE-DIMS 1 ALEN)
	(WITH-STACK-LIST (BIT-DIMS 1
				   (IF *SHIFT*
				       (* 2 ALEN)
				       (tv:raster-width-for-bitblt (FIRST DIMS) ARRAY-TYPE)))
	(WITH-STACK-ARRAY (STRING-OUT-ARRAY ALEN :TYPE 'ART-16B) 
	(WITH-STACK-ARRAY (LINE-ARRAY LINE-DIMS :DISPLACED-TO STRING-OUT-ARRAY
				      :type 'art-16b)
	(WITH-STACK-ARRAY (BIT-ARRAY BIT-DIMS :DISPLACED-TO STRING-OUT-ARRAY
				     :type (IF *SHIFT* 'ART-8B ARRAY-TYPE))

	(TV:WITH-PREPARED-SHEET-OR-RASTER (*SHEET-TO-PREPARE* :FORCE-PREPARE T)
	  (LOOP WITH SIDX = 0
		FOR LINE FROM (IF FROM-FIELD (1- FROM-FIELD) 0)
			 BELOW (OR (SECOND DIMS) 1)
			 BY (IF FROM-FIELD 2 1)
		WHILE (< SIDX NBYTES)
		DO
	    (SELECTQ *SHIFT*
	      (NIL (BITBLT TV:ALU-SETA LINELEN 1
			   ARRAY 0 LINE
			   LINE-ARRAY
			   0 0))
	      (0 (COLOR:%COPY-IMAGE-RECTANGLE
		   (FIRST DIMS) 1
		   ARRAY 0 LINE
		   BIT-ARRAY 0 0)
		 )
	      (8 (COLOR:%COPY-IMAGE-RECTANGLE
		   (FIRST DIMS) 1
		   ARRAY 0 LINE
		   BIT-ARRAY 0 0 -8.))
	      (16. (COLOR:%COPY-IMAGE-RECTANGLE
		     (FIRST DIMS) 1
		     ARRAY 0 LINE
		     BIT-ARRAY 0 0 -16.))
	      (24. (COLOR:%COPY-IMAGE-RECTANGLE
		     (FIRST DIMS) 1
		     ARRAY 0 LINE
		     BIT-ARRAY 0 0 -24.))
	      (T (FERROR "UNEXPECTED SHIFT FACTOR ~A" SI:*SHIFT*))
	      )
	    (tv:unprepare-sheet
	      (WHEN TO-FIELD
		(IF EMIT-BLANKS
		    (SEND STREAM :STRING-OUT STRING-OUT-ARRAY LINELEN ALEN)
		    (SETQ EMIT-BLANKS T)))
	      (SEND STREAM :STRING-OUT STRING-OUT-ARRAY 0 LINELEN))
	    (INCF SIDX ALEN)
	    ))))))))))

(DEFUN STRING-OUT-FROM-ARRAY (STREAM ARRAY NBYTES DIMS)

  (IF (AND (SECOND DIMS)
	   (OR (ARRAY-INDIRECT-P ARRAY)
	       ( (FIRST DIMS) (DECODE-RASTER-ARRAY ARRAY))
	       *SHEET-TO-PREPARE*
	       *from-field*
	       *to-field*
	       *SHIFT*
	       ))
      (STRING-OUT-FROM-DISPLACED-ARRAY STREAM ARRAY NBYTES DIMS)

      (IF (AND *USE-FAST-FEP-FILES*
	       (= (LENGTH DIMS) 2)
	       (NULL *SHIFT*)
	       (SEND STREAM :OPERATION-HANDLED-P :WRITE-2D-ARRAY-REAL-FAST))
      
	  (SEND STREAM :WRITE-2D-ARRAY-REAL-FAST ARRAY
		:WIDTH (FIRST DIMS)
		:HEIGHT (SECOND DIMS)
		:X 0 :Y 0)
      
	  (WITH-STACK-ARRAY (16-ARRAY NBYTES :TYPE 'ART-16B :DISPLACED-TO ARRAY)
	    (SEND STREAM ':STRING-OUT 16-ARRAY 0 NBYTES))
      )))

(DEFUN LOAD-AS-RAW-ARRAY (STREAM REMAINING-LENGTH &OPTIONAL OPTIONS )
  (LET* ((N-BITS (BIN32 STREAM))
	 (NDIMS (BIN32 STREAM))
	 (RLD *RLD-FUNCTION*)
	 (LENGTH (- REMAINING-LENGTH 8))
	 (DIMS (LOOP REPEAT NDIMS
		     DO
		     (SETQ LENGTH (- LENGTH 4))
		     COLLECT
		     (BIN32 STREAM)))
	 (KEYED-TYPES (WHEN (OR RLD (> NDIMS 1))
			(CL:GETF OPTIONS :RLE-COMPONENT-NAMES)))
	 (ARRAY-TYPE (COND (RLD
			    (IF (EQ RLD 'COLOR:RLD-ARRAY-1)
				'ART-8B
				(LET ((TMP (BIN32 STREAM)))
				  (SETQ LENGTH (- LENGTH 4))
				  (IF (AND (EQL TMP 8)
					   (MEMQ *LAST-KEY* KEYED-TYPES))
				      (CL:GETF OPTIONS :ARRAY-TYPE)
				      (COLOR:DATA-ARRAY-TYPE TMP))
				  )))
			   ((CL:GETF OPTIONS ':INTERNAL-ARRAY-TYPE))
			   (T
			    (IF (CL:GETF OPTIONS :STRINGP)
				(IF ( N-BITS 8) 'ART-STRING 'ART-FAT-STRING)
				(COLOR:DATA-ARRAY-TYPE N-BITS))
			    )))
	 (DIMS (IF (NULL RLD)
		     DIMS
		     (SETQ NDIMS 2
			   LENGTH (- LENGTH 8))
		     (LET ((W (BIN32 STREAM))
			   (H (BIN32 STREAM)))
		       (LIST (SELECTQ ARRAY-TYPE
			       (ART-1B (* W 8))
			       (ART-2B (* W 4))
			       (ART-4B (* W 2))
			       ((ART-8B ART-FIXNUM) W)
			       (T (ferror "Unexpected array-type ~A" array-type)))
			     H))))
	 (MAKE-ARRAY-DIMS (COND ((NULL (CDR DIMS)) DIMS)
				(T (CONS (TV:RASTER-WIDTH-FOR-BITBLT (FIRST DIMS) ARRAY-TYPE)
					 (CDR DIMS)))))

	 (*DEST-IMAGE-TYPE*)  ;here so make-array-function can setq it
	 (ARRAY (FUNCALL *MAKE-ARRAY-FUNCTION*
			 (REVERSE MAKE-ARRAY-DIMS)
			 :AREA (COLOR:IMAGE-BIT-ARRAY-AREA)
			 ':TYPE ARRAY-TYPE
			 ))
	 (DEFAULT-IMAGE-TYPE (COLOR:DEFAULT-IMAGE-TYPE ARRAY))
	 (*IMAGE-TYPE* (or (CL:GETF OPTIONS :IMAGE-TYPE default-image-type)
			   default-image-type))
	 (*dest-image-type* (or *dest-image-type*
				(CL:GETF OPTIONS :TO-IMAGE-TYPE)
				(if (and (eq default-image-type 'color:false-color-image)
					 (memq *image-type* '(color:false-color-image
							       color:8b-random-image
							       color:8b-palette-image
							       color:packed-rgb-image
							       color:packed-yuv-image
							       )))
				    *image-type*
				    default-image-type)))
	 (16-LENGTH (IF (= NDIMS 1)
			(// (LEXPR-FUNCALL '* N-BITS DIMS) 16)
			(// LENGTH 2)
			))
	 (*SHIFT* (WHEN (OR (= (ARRAY-ELEMENT-BYTE-SIZE ARRAY) 32.)
			    (AND RLD (= NDIMS 2)))
		      (SELECTQ *LAST-KEY*
			(:RED 0)
			(:GREEN *SHIFT* 8)
			(:BLUE 16.)
			(:ALPHA  24.)
			((:Y :U :V) *LAST-KEY*)
			(T NIL))))
	 (*WRITE-MASK* (CL:GETF OPTIONS :WRITE-MASK))
	 )

    (when (eql *write-mask* -1) (setq *write-mask* nil))

    ;; set up the limits if they haven't been
    (SETQ *DEST-LEFT-MARGIN* (MAX 0 (OR *DEST-LEFT-MARGIN* 0))
	  *DEST-TOP-MARGIN* (MAX 0 (OR *DEST-TOP-MARGIN* 0))
	  *SOURCE-LEFT-MARGIN* (MAX 0 (OR *SOURCE-LEFT-MARGIN* 0))
	  *SOURCE-TOP-MARGIN* (MAX 0 (OR *SOURCE-TOP-MARGIN* 0))

	  *DEST-WIDTH* (MIN (FIRST DIMS)
			    (OR *DEST-WIDTH* (FIRST DIMS))
			    (- (IF (SECOND DIMS)
				   (DECODE-RASTER-ARRAY ARRAY)
				   (ARRAY-DIMENSION-N 1 ARRAY))
			       *DEST-LEFT-MARGIN*))
	  *DEST-HEIGHT* (MIN (OR (SECOND DIMS) 1)
			     (OR *DEST-HEIGHT* (SECOND DIMS) 1)
			     (- (OR (AND (SECOND DIMS)
					 ;compensated for row-majow
					 (ARRAY-DIMENSION-N 1 ARRAY))
				    1)
				*DEST-TOP-MARGIN*))
	  )

    (FUNCALL (OR RLD *STRING-IN-FUNCTION*)
	     STREAM ARRAY 16-LENGTH DIMS
	     *DEST-LEFT-MARGIN* *DEST-TOP-MARGIN*
	     *SOURCE-LEFT-MARGIN* *SOURCE-TOP-MARGIN*
	     *DEST-WIDTH* *DEST-HEIGHT*
	     (OR (CDR (ASSQ ARRAY-TYPE ARRAY-BITS-PER-ELEMENT)) 32)
	     )

    (UNLESS (= (* 16-LENGTH 2) LENGTH)
      ;; when there are an odd number of bytes mod 16
      ;; (we only get here with 1d arrays)
      (LOOP WITH VAL = (SEND STREAM ':TYI)
	    AND LAST-BYTE = (// (* 16-LENGTH 16) N-BITS)
	    WITH BYTES = (1- (- (FIRST DIMS) LAST-BYTE))
	    FOR POS FROM (* N-BITS BYTES) BY (- N-BITS)
	    AS I FROM LAST-BYTE TO (+ LAST-BYTE BYTES)
	    DO
	    (ASET (CODE-CHAR (LOAD-BYTE VAL POS N-BITS)) ARRAY I)))

    ARRAY)
  )

;;
;; This assumes that any displaced arrays it is given are appropriately formed
;; for BITBLT, that is, a multiple of total 32 bits pre row.
;;
(DEFUN STRING-IN-TO-DISPLACED-ARRAY
       (STREAM ARRAY NBYTES DIMS  DDX DDY SDX SDY WID HEI ELEMENT-SIZE)
  (ignore nbytes element-size); unused

  (LET* ((FROM-IMAGE-TYPE (if (eq *image-type* 'color:rgb-image)
			      'color:false-color-image
			      *image-type*))
	 (DEFAULT-IMAGE-TYPE *DEST-IMAGE-TYPE*)
	 (TO-IMAGE-TYPE (IF (and (eq default-image-type 'color:false-color-image)
				 (memq from-image-type '(color:false-color-image
							 color:8b-random-image
							 color:8b-palette-image
							 color:packed-rgb-image
							 color:packed-yuv-image
							 )))
			    from-image-type
			    default-image-type))
	 (continuation *continuation*)
	 )

    (IF (AND *USE-FAST-FEP-FILES*
	   (= (LENGTH DIMS) 2)
	   (NULL *SHIFT*)
	   (NULL *TO-FIELD*)
	   (NULL *FROM-FIELD*)
	   (EQL *DEST-X-SCALE* 1)
	   (EQL *DEST-Y-SCALE* 1)
	   (EQ FROM-IMAGE-TYPE TO-IMAGE-TYPE)
	   (NULL *WRITE-MASK*)
	   (null continuation)
	   (SEND STREAM :OPERATION-HANDLED-P :READ-2D-ARRAY-REAL-FAST))

      (SEND STREAM :READ-2D-ARRAY-REAL-FAST ARRAY
	    :WIDTH WID
	    :HEIGHT HEI
	    :STORED-WIDTH (FIRST DIMS)
	    :STORED-HEIGHT (SECOND DIMS)
	    :STORED-X-OFFSET SDX
	    :STORED-Y-OFFSET SDY
	    :X DDX :Y DDY)

      (LET* ((WIDTH (FIRST DIMS))
	     (HEIGHT (SECOND DIMS))
	     (MUL (COLOR:IMAGE-WIDTH-MULTIPLIER TO-IMAGE-TYPE))
	     (E-WID (// WID MUL))
	     (D-WID (// (ROUND (* WID *DEST-X-SCALE*)) MUL))
	     (D-HEI (ROUND (* HEI *DEST-Y-SCALE*)))
	     (FROM-FIELD *FROM-FIELD*)
	     (TO-FIELD *TO-FIELD*)
	     (SDX (* SDX (color:image-width-multiplier from-image-type)))
	     )

	(labels ((string-in-with-zoom-rectangle 
		    (raster ignore strobe)
		   (color:zoom-rectangle
		     :rescale *dest-rescale*
		     :from-image-type from-image-type
		     :from-array raster
		     :to-field to-field
		     :from-field nil		;taken care of by our string-in function
		     :from-left 0
		     :from-top 0
		     :from-right e-wid
		     :from-bottom (cond ((eql from-field 1) (ceiling hei 2))
					((eql from-field 2) (floor hei 2))
					(t hei))
		     :from-array-stream strobe
		     :to-array array
		     :to-left ddx
		     :to-top ddy
		     :to-right (+ ddx d-wid)
		     :to-bottom (+ ddy (cond ((and to-field from-field) d-hei)
					     ((eql from-field 1) (ceiling d-hei 2))
					     ((eql from-field 2) (floor d-hei 2))
					     (to-field (* d-hei 2))
					     (t d-hei)))
		     :to-image-type to-image-type
		     :write-mask *write-mask*
		     :default-alpha *default-alpha*
		     :store (selectq *shift* (0 :red)(8 :green)(16. :blue)(24. :alpha)
				     (t :default))
		     :to-window (when (typep *sheet-to-prepare* 'tv:sheet)
				  *sheet-to-prepare*)
		     :combination-array *window-color-map-translation*
		     :translation-array *color-map-translation*)
		   ))
	  (tv:with-bit-array-stream
	    stream :input (or continuation #'string-in-with-zoom-rectangle)
	    :byte-size element-size
	    :stream-width width
	    :stream-height height
	    :from-field from-field
	    :width wid
	    :height hei
	    :x-offset sdx
	    :y-offset sdy))
	)
      )))

(DEFUN STRING-IN-TO-ARRAY (STREAM ARRAY NBYTES DIMS  DDX DDY SDX SDY WID HEI ELEMENT-SIZE)

  (IF (AND (SECOND DIMS)
	   (OR ( (FIRST DIMS) (DECODE-RASTER-ARRAY ARRAY))
	       *SHEET-TO-PREPARE*
	       *SHIFT*
	       *TO-FIELD*
	       *FROM-FIELD*
	       *CONTINUATION*
	       (ARRAY-INDIRECT-P ARRAY)
	       ( DDX 0)
	       ( DDY 0)
	       ( SDX 0)
	       ( SDY 0)
	       ( WID (FIRST DIMS))
	       ( HEI (SECOND DIMS))
	       ( ELEMENT-SIZE (ARRAY-ELEMENT-BYTE-SIZE ARRAY))
	       ))

      (STRING-IN-TO-DISPLACED-ARRAY STREAM ARRAY NBYTES DIMS
				    DDX DDY SDX SDY WID HEI ELEMENT-SIZE)

      (IF (AND *USE-FAST-FEP-FILES*
	       (= (LENGTH DIMS) 2)
	       (SEND STREAM :OPERATION-HANDLED-P :READ-2D-ARRAY-REAL-FAST))


	  (SEND STREAM :READ-2D-ARRAY-REAL-FAST ARRAY
		:WIDTH (FIRST DIMS)
		:HEIGHT (SECOND DIMS)
		:X 0 :Y 0)
	  
	  (WITH-STACK-ARRAY (16-ARRAY NBYTES :TYPE 'ART-16B :DISPLACED-TO ARRAY)
	    (SEND STREAM ':STRING-IN NIL 16-ARRAY 0 NBYTES))
      )))

(DEFUN WRITE-TO-DUMP-FILE
       (FILE ARRAYS &REST OPTIONS
	&AUX &SPECIAL
	(*RLE-FUNCTION* (CL:GETF OPTIONS :RLE))
	(*STRING-OUT-FUNCTION* (CL:GETF OPTIONS :STRING-OUT 'STRING-OUT-FROM-ARRAY))
	(*SHEET-TO-PREPARE* (CL:GETF OPTIONS :PREPARE-SHEET))
	(*image-type* (cl:getf options :image-type))
	(file-type (cl:getf options :file-type))
	(*to-field* (cl:getf options :to-field))
	(*from-field* (cl:getf options :from-field))
	)

  (SETQ FILE (FS:MERGE-PATHNAME-DEFAULTS FILE NIL file-type :NEWEST))
  (SETQ FILE (SEND FILE :NEW-PATHNAME :VERSION :NEWEST :CANONICAL-TYPE FILE-TYPE))

  (COLOR:WITH-RELIABLE-CONNECTIONS ()
    (LET* ((ESTIMATED-LENGTH (round
			       (* 1.05  ;5% slop, since we'd rather overestimate than
				  ;underestimate and accidentally expand over the cliff
				  (loop for (key array) on arrays by #'cddr
					when (arrayp array)
					  sum (// (* (array-length array)
						     (selectq key
						       ((:red :green :blue :alpha) 8)
						       (:y 4)
						       ((:u :v) 2)
						       (t (array-element-byte-size array))))
						  8)))))
	   (STREAM (FUNCALL (IF (AND *USE-FAST-FEP-FILES*
				     (PATHNAME-IS-LOCAL-FEP-P FILE))
				'OPEN-FEP-IMAGE-STREAM
				'OPEN)
			    FILE :DIRECTION :OUTPUT :CHARACTERS NIL
			    :ESTIMATED-LENGTH estimated-length))
	   (FILE-MAP)
	   (CURRENT-FRAME)
	   (virtual-pointer 0)
	   (ABORT-FLAG :ABORT))
      
      (UNWIND-PROTECT
	  (LOOP WITH RLE = (CL:GETF OPTIONS :PRINT)
		AND *LAST-KEY*
		INITIALLY (WHEN RLE (SEND TERMINAL-IO :FRESH-LINE))
		AS PREV-I = I
		FOR I IN ARRAYS
		AS J FROM 0
		DO
	    (SETQ *LAST-KEY* (IF (ODDP J) PREV-I NIL))
	    (IF (OR (EVENP J)
		    (WHEN (NEQ *LAST-KEY* :RLD)
		      (OR (SYMBOLP I)
			  (FIXP I)
			  (STRINGP I))))
		(PUSH I FILE-MAP)
		(PUSH (LIST VIRTUAL-POINTER) FILE-MAP))
	    (MULTIPLE-VALUE-BIND (BYTES SIZ)
		(LOOP FOR TYPEDESC IN (CDR BLOCK-TYPES) BY #'CDDR
		      WHEN (CALL (TEST TYPEDESC) :OPTIONAL I :OPTIONAL OPTIONS)
			DO (scl:with-standard-io-environment 
			     (RETURN
			       (CALL (WRITER TYPEDESC) :OPTIONAL STREAM :OPTIONAL I
				     :OPTIONAL OPTIONS)))
		      FINALLY (FERROR "Can't dump ~A" I))
	      (INCF VIRTUAL-POINTER (CEILING (+ 4 BYTES) 2))
	      (WHEN (AND (ODDP J)(EQ *LAST-KEY* :CURRENT-FRAME))
		(SETQ CURRENT-FRAME I))
	      (WHEN (AND SIZ RLE)
		(FORMAT T "Encoded~A~A ~A (~a) to ~4F4%~%"
			(IF CURRENT-FRAME " Frame " "")
			(OR CURRENT-FRAME "")
			*LAST-KEY*
			I
			(* SIZ 100)))
	      )
		FINALLY
		  (color:cache-image-file (send stream :truename))
		  (SETQ ABORT-FLAG NIL))
	(CLOSE-OPEN-STREAM STREAM ABORT-FLAG))
      (UNLESS ABORT-FLAG
	(VALUES FILE (NREVERSE FILE-MAP))))))


(defvar *types-that-can-set-pointer* nil)
(defvar *types-that-cant-set-pointer* nil)
(defun stream-can-set-pointer (stream pos)
  (let ((typ (typep stream)))
    (cond ((zerop pos)(si:stream-supports-set-pointer-0 stream ))
	  ((memq typ *types-that-can-set-pointer*) t)
	  ((memq typ *types-that-cant-set-pointer*) nil)
	  (t (multiple-value-bind (nil e)
		 (catch-error (send stream :set-pointer pos) nil)
	       (if e
		   (push typ *types-that-cant-set-pointer*)
		   (push typ *types-that-can-set-pointer*))
	       (not e))))))

(defun set-stream-pointer (stream new old)
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")  ;fake set-pointer on those streams that don't have it.
0  (unless (= new old)
    (cond ((stream-can-set-pointer stream new)
	   (send stream :set-pointer new))
	  (t
	   (when (> old new)
	     (send stream :set-pointer 0)
	     (setq old 0))
	   (with-stack-array (a (min (- new old) 2048) :type 'art-16b)
	     (loop until (= old new)
		   as siz = (min (- new old) 2048)
		   as val = (multiple-value-bind (nil v)
				(send stream :string-in nil a 0 siz)
			      (not v))
		   do (incf old siz)
		   while val
		     ))))))
			     

(defvar *describe-file-override* nil)

(defun read-from-dump-file
       (file &rest options
	&aux
	(frame-list (cl:getf options :frame-list))
	(load-map (cl:getf options :load-map))
	&special typedesc *last-key*
	(*rld-function* nil)
	(*color-map-translation* (cl:getf options :color-map))
	(*window-color-map-translation* (cl:getf options :window-color-map))
	(local-make-array-function (cl:getf options :make-array 'make-array))
	(*string-in-function* (cl:getf options :string-in 'string-in-to-array))
	(*sheet-to-prepare* (cl:getf options :prepare-sheet))
	(*dest-left-margin* (cl:getf options :ddx))
	(*dest-top-margin* (cl:getf options :ddy))
	(*dest-x-scale* (cl:getf options :x-scale 1))
	(*dest-y-scale* (cl:getf options :y-scale 1))
	(*dest-rescale* (cl:getf options :rescale :select))
	(*source-left-margin* (cl:getf options :sdx))
	(*source-top-margin* (cl:getf options :sdy))
	(*default-alpha* (cl:getf options :default-alpha 255.))
	(*dest-width* (cl:getf options :width))
	(*dest-height* (cl:getf options :height))
	(inhibit-channels (cl:getf options :inhibit-channels))
	(describe-file (or *describe-file-override*
			   (cl:getf options :describe-file)))
	(*from-field* (cl:getf options :from-field))
	(*to-field* (cl:getf options :to-field))
	(*continuation* (cl:getf options :continuation))
	)
  (setq file (fs:parse-pathname file))
  (color:with-reliable-connections () 
     (let* ((stream (funcall (if (and *use-fast-fep-files*
				      (pathname-is-local-fep-p file))
				 'open-fep-image-stream
				 'open)
			     file :direction :input :characters nil))
	    (abort-flag :abort)
	    (load-map load-map)
	    made-arrays
	    val)
       (labels ((local-make-array (&rest args)
		  (declare (sys:downward-function local-make-array))
		  (let ((val (cl:apply local-make-array-function args)))
		    (push val made-arrays)
		    val)))
       (unwind-protect
	   (let ((*make-array-function* #'local-make-array))
	     (setq val
		   (loop with load-frame = nil
			 and pos = 0
			 for j from 0
			 as read-a-block =
			    (cond ((listp load-map)
				   (cond ((and (neq *last-key* :current-frame)
					       (listp (car load-map)))
					  (set-stream-pointer stream (caar load-map) pos)
					  (setq pos (caar load-map))
					  t)
					 ((and (eq *last-key* :binary-unique-id)
					       (stringp (car load-map)))
					  (set-stream-pointer stream 19 pos)
					  (setq pos 19)
					  t)))
				  ((evenp j))
				  ((eq load-map t)
				   (or (null frame-list)
				       (member load-frame frame-list)))
				  ((eql load-frame load-map))
				  ((eql *last-key* :binary-unique-id))
				  ((eql *last-key* :rld))
				  ((eql *last-key* :current-frame))
				  )
			 as thiskey =
			    (if (and (listp load-map)
				     (not read-a-block))
				(car load-map)
				(let ((len (bin32 stream)))
				  (when (or (not (fixp len)) (zerop len))
				    (loop-finish))
				  (let ((typ (bin32 stream)))
				    (setq typedesc (cl:getf block-types typ))
				      
				    (unless typedesc
				      (if (eql typ 4)
					  (progn (setq typ 5)
						;hack for junk movie files
						 (setq typedesc (cl:getf block-types typ)))
					  (ferror "unknown block type ~a" typ)
					  ))

				    (when (or describe-file
					      (null typedesc))
				      (format t "~&@~A: block type ~d ~a length 2+~d (~A)"
					      pos
					      typ
					      (if typedesc (reader typedesc)
						  "Unknown")
					      (// len 2)
					      (if (oddp len) "Odd" "Even"))
				      )

				    (setq *dest-left-margin* (cl:getf options :ddx)
					  *dest-top-margin* (cl:getf options :ddy)
					  *source-left-margin* (cl:getf options :sdx)
					  *source-top-margin* (cl:getf options :sdy)
					  *dest-width* (cl:getf options :width)
					  *dest-height* (cl:getf options :height))

				    (let ((old-pos pos))
				      (incf pos (+ 2 (// len 2)))

				      (cond ((or (null typedesc)
						 (not read-a-block)
						 (and (oddp j)
						      (memq *last-key* inhibit-channels)))
					     (set-stream-pointer stream pos old-pos)
					     nil)
					    (t (funcall (reader typedesc)
							stream (- len 4) options))))
				    )
				  ))
			 collect thiskey
			 do
		     (when (listp load-map)
		       (when (and (eq *last-key* :binary-unique-id)
				  (stringp (car load-map))
				  (not (or (string-equal (car load-map) thiskey)
					   (string-equal (cl:remove #// (car load-map))
							 (cl:remove #// thiskey)))
				       ))
			 (catch-error-restart 
			   ((sys:error)
			    "Discard the load map and retry")
			   (ferror "load map doesn't match .dump file: ID should be ~A but is ~A"
				   (car load-map) thiskey))
			 (return :discard-load-map)
			 )
		       (unless (setq load-map (cdr load-map))
			 (loop-finish)))
		     (when describe-file (format t " = ~S" thiskey))
		     (if (evenp j)
			 (setq *last-key* thiskey)
			 (selectq *last-key*
			   (:rld (setq *rld-function* thiskey))
			   (:current-frame (setq load-frame thiskey))))
		     )
		   abort-flag nil)
	     val
	     )
	 (when abort-flag
	   (loop for v in made-arrays
		 when (and (arrayp v)
			   (= 2 (array-#-dims v)))
		   do (tv:deallocate-temp-sheet-raster-and-header v))
	   (setq val nil))
	 (close-open-stream stream abort-flag)))
       val)))

