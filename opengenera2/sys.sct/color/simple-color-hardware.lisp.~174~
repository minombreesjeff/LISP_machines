;;;-*- Mode: LISP; Package: COLOR; Base: 8 -*- 

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;
;; this is the base structure for all the control-register-like structures
;;
(defstruct (sc-control
	     :conc-name
	     (:type :named-array-leader)
	     (:size-symbol sc-control-base-size)
	     (:make-array (:type 'art-fixnum :initial-value 0)))
  nil properties alternate-array)

(defmacro sc-control-property (cont name)
  `(get (locf (sc-control-properties ,cont)) ,name))

(defmacro fixup-control (var &key (null 'control) (tee 'control-image)
			 (control nil))
  (when (and control (eq null 'control))
    (setq null control))
  `(cond ,@(when null `(((null ,var) (setq ,var ,null))))
	 ,@(when tee `(((eq ,var t) (setq ,var ,tee))))
	 ,@(when control `(((eq ,var control) (setq ,var ,control))))))

;;
;; Basic control
;;
(defflavor control-protocol () ()
  (:required-instance-variables tv:screen)
  (:required-methods
   :control :control-image
   :new-control
   :make-control-image
   :copy-control-image
   :vertical-sync-p :get-vertical-sync-with-timeout
   :set-interlace :interlace
   :video-on :set-video-on
   :bow-mode :set-bow-mode
   :hardware-description :appropriate-hardware-p
   :create-screen-array :inferior-screen-array-adjusted
   :visible-size
   :pixel-mode-array :fill-mode-array :packed-pixel-mode-arrays :external-overlay-array
   :setup-hardware  :hardware-set-base-addresses
   :figure-usable-color-parameters

   ;; color screens only
   :pixel-width :set-pixel-width
   :hardware-control-locs 
   :set-base-addresses
   :wrap :set-wrap
   :chroma-key-modes
   :put-sync-on-video
   )
  :abstract-flavor)

(defflavor global-pan-zoom-protocol () ()
  (:required-instance-variables control)
  (:required-methods
       :pan-and-zoom-p
       :zoom :set-zoom :pan :set-pan
       :set-pan-and-zoom)
  :abstract-flavor)

(defflavor line-index-table-protocol () ()
  (:required-methods
     :line-index-table :line-index-table-image :set-line-index-table-image
     :make-line-index-table-image :new-line-index-table
     :initialize-line-index-table :line-bounds :set-line-bounds)
  :abstract-flavor)


(defflavor line-pan-zoom-protocol () ()
  (:required-methods
   :line-pan-zoom :line-pan-zoom-image :set-line-pan-zoom-image
   :make-line-pan-zoom-image :new-line-pan-zoom 
   :initialize-line-pan-zoom
   :line-pan-zoom-for-line :set-line-pan-zoom-for-line
   :line-pan-zoom-image-for-line :set-line-pan-zoom-image-for-line
   :x-zoom-from-lit :set-x-zoom-from-lit
   :x-pan-from-lit :set-x-pan-from-lit)
  :abstract-flavor)

(defflavor hardware-cursor-protocol () ()
  (:required-methods
     :cursor :cursor-image :set-cursor-image
     :make-cursor-image :new-cursor :initialize-cursor-image
     :cursor-visible? :set-cursor-visible?
     :cursor-position :set-cursor-position)
  :abstract-flavor)

(defflavor color-map-protocol () ()
  (:required-methods
     :color-map :color-map-image :set-color-map-image
     :initialize-color-map :new-color-map :make-color-map-image
     :map-modes :set-map-mode :map-mode :color-map-description
     :overlay-description
     :read-color-map :read-color-map-image
     :write-color-map :write-color-map-image
     )
  :abstract-flavor)

(defflavor graphics-protocol () ()
  (:required-methods
   :%draw-point
   :%draw-char
   :%draw-rectangle
   :%draw-line
   :%draw-triangle
   :%draw-glyph
   :%draw-string
   :%draw-1-bit-raster
   :%bitblt
   :with-alu-cached
   :with-alu-cached-source
   :exchange-two-colors-aluf)
  :abstract-flavor)

(defflavor slave-graphics-mixin ()
      (i-p:slave-graphics-image-process-mixin graphics-protocol))

(tv:def-pass-to-parent slave-graphics-mixin 
   :%draw-point
   :%draw-char
   :%draw-rectangle
   :%draw-line
   :%draw-triangle
   :%draw-glyph
   :%bitblt
   :%draw-string
   :%draw-1-bit-raster
   :with-alu-cached
   :with-alu-cached-source
   tv:wait-remote-screen-idle
   :exchange-two-colors-aluf
   :inferior-screen-array-adjusted
  tv:%with-bit-array
  tv:%with-bit-array-stream
  tv:%with-bit-array-or-stream)

(defmethod (:create-screen-array slave-graphics-mixin) 
	   (width height array &optional (type (tv:sheet-array-type self)))
  (send tv:parent-screen :create-screen-array width height array type))


(defflavor common-color-hardware-mixin 
	((accept-pop-up-notifications nil))
	()
  :gettable-instance-variables
  :settable-instance-variables
  :initable-instance-variables
  (:required-flavors tv:sheet)D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI") ;don't require tv:screen (for X screen compatibility)
0  (:required-instance-variables control control-image)
  (:default-init-plist :property-list '(:turn-video-on-for-mouse nil )
  ))

(defflavor simulate-bow-mode-mixin ((bow-mode)) ()
  (:required-instance-variables control control-image))

(defmethod (:init simulate-bow-mode-mixin :after) (ignore)
  (send self :set-bow-mode bow-mode control-image)
  )

(defmethod (:bow-mode simulate-bow-mode-mixin) (&optional (cont control))
  (fixup-control cont)
  (get (locf (sc-control-properties cont)) :bow-mode))

(defmethod (:new-control simulate-bow-mode-mixin :after) (&optional (cont control-image))
  (fixup-control cont)
  (send self ':set-bow-mode (get (locf (sc-control-properties cont)) :bow-mode)))

(defmethod (:set-bow-mode simulate-bow-mode-mixin)
	   (new &optional (cont control))

  (fixup-control cont)

  (let ((old (send self ':bow-mode cont))
	(new (selectq new ((0 nil) nil) (t t))))

    (putprop (locf (sc-control-properties cont)) new :bow-mode)
    (when (eq cont control)
      (putprop (locf (sc-control-properties control-image)) new :bow-mode)
      (unless (eq new old) (send self :new-color-map))
      )
    old))

(format:defformat format:structure-no-contents (:one-arg) (arg options)
  (ignore options)
  (printing-random-object (arg format:*format-output* :typep)
    ()))

(defstruct (color-map-structure
		(:include sc-control)
		(:print "~\structure-no-contents\" color-map-structure)
		(:make-array (:type 'art-fixnum :initial-value 0)))
  )
;;
;;
;; Color Map
;;
;;
(defflavor basic-color-map-mixin
	(color-map
	 (map-info-tick 0)
	 color-map-image
	 (default-map-segment-number 0)
	 (init-color-map ':initialize-color-map))
	(color-map-protocol control-protocol)

  :gettable-instance-variables
  (:settable-instance-variables color-map-image default-map-segment-number init-color-map)
  (:initable-instance-variables default-map-segment-number init-color-map)
  (:init-keywords :map-mode
    :segment-number :map-source :overlay-source
    :beep-specification :map-segment-number)
  (:default-init-plist :map-mode :default
		       :segment-number 0
		       :overlay-source 0.
		       :map-source 0)
  (:required-methods :write-color-map :read-color-map
   :write-color-map-image :read-color-map-image :new-color-map))

(defwhopper-subst (:write-color-map-image basic-color-map-mixin) (&rest args)
  (incf map-info-tick)
  (lexpr-continue-whopper args))

(defmethod (:standard-color-map basic-color-map-mixin)
	   (&optional (segn (send self :map-segment-number))
		      (map color-map-image))
  (when map
    (let* ((map-info (sc-control-property map :standard-map-info)))
      (destructuring-bind (my-tick his-tick std-map)
	  (cl:getf map-info segn)
	(when (and std-map
		   (eql my-tick map-info-tick)
		   (eql his-tick (send std-map :map-info-tick)))
	  std-map)))))

(defmethod (:set-standard-color-map basic-color-map-mixin)
	   (segn map-image standard-color-map)
  (let* ((map-info (sc-control-property map-image :standard-map-info))
	 (seg-info (or (cl:getf map-info segn)
		       (let ((new (list nil nil nil)))
			 (setf (cl:getf map-info segn) new)
			 (setf (sc-control-property map-image :standard-map-info) map-info)
			 new))))
    (setf (first seg-info) map-info-tick)
    (setf (second seg-info)
	  (when standard-color-map (send standard-color-map :map-info-tick)))
    (setf (third seg-info) standard-color-map)
    ))

(defmethod (:read-screen-map basic-color-map-mixin) 
	   (&optional
	     standard-map
	     (mapn (send self :map-segment-number))
	     (map-image color-map-image))
  (when map-image
    (let* ((my-size (send self :color-map-description))
	   (standard-map (or standard-map (make-standard-color-map :size my-size))))
      (unless (eql (send standard-map :color-map-description) my-size)
	(send standard-map :set-size my-size))
      (loop for i from 0 below my-size
	  do
	(multiple-value-bind (r g b)
	    (send self ':read-color-map-image i mapn map-image)
	  (send standard-map ':write-color-map
		i
		(// r 1023.0)
		(// g 1023.0)
		(// b 1023.0))))
      (send self :set-standard-color-map mapn map-image standard-map)
      standard-map)))

(defmethod (:write-screen-map basic-color-map-mixin)
	   (standard-map &optional
			 (mapn (send self :map-segment-number))
			 noupdate
			 (map-image color-map-image)
			 )
  (loop with dim = (send self :color-map-description)
	for i from 0 below (min dim (send standard-map :color-map-description))
	do
    (multiple-value-bind (r g b)(send standard-map :read-color-map i)
      (send self ':write-color-map-image
	    i
	    (min 1023. (round (* 1023.99 r)))
	    (min 1023. (round (* 1023.99 g)))
	    (min 1023. (round (* 1023.99 b)))
	    mapn )))
  (unless noupdate
    (send self :new-color-map map-image mapn))
  (send self :set-standard-color-map mapn map-image standard-map))

(defmethod (:hardware-rgb->rgb basic-color-map-mixin) (r g b)
  (hardware-rgb->rgb r g b))

(defmethod (:rgb->hardware-rgb basic-color-map-mixin) (r g b)
  (rgb->hardware-rgb r g b))

(defmethod (:init basic-color-map-mixin :before) (ignore)
  (setq color-map (send self ':make-color-map-image t)
	color-map-image (send self ':make-color-map-image nil))
  )

(defmethod (:standardize-color-map basic-color-map-mixin) ()
  (send tv:screen (send tv:screen :init-color-map) )
  (send tv:screen ':new-color-map ))

(defmethod (:init basic-color-map-mixin :after) (plist)
  (send self ':set-map-mode
	(let ((mode (get plist ':map-mode)))
	  (if (or (null mode) (eq mode :default))
	      (send self :default-map-mode)
	      mode))
	(get plist ':segment-number)
	(get plist ':map-source)
	(get plist ':overlay-source)
	(send self ':control-image))
  (let ((beep (get plist :beep-specification)))
    (when beep (send self :putprop beep :beep-specification)))
  (send self init-color-map))

(defmethod (:default-map-mode basic-color-map-mixin :default) ()
  (first (send self :map-modes)))

(defmethod (:setup-hardware basic-color-map-mixin :after) (&rest ignore)
  (send self :new-color-map))


(defmethod (:color-map-image-for-mode basic-color-map-mixin) (array &optional ignore)
  array)

(defmethod (:make-color-map-image basic-color-map-mixin)
	   (&optional displaced-to dims)
  "Make and array image of the color map"
  (when (null dims)
    1;this clause due to HIC for X screen compatability
0    (multiple-value-bind (slots nmaps)
	(send self :color-map-description)
      (setq dims (list nmaps slots))))
  (send self ':make-color-map-image-internal displaced-to dims nil))


(defmethod (:make-color-map-image-internal basic-color-map-mixin)
	   (displaced-to dims &optional primary )
  (let* ((image (make-color-map-structure
		  :make-array (:dimensions dims
			       :displaced-to (if (eq displaced-to t)
						 (make-array 0)
						 displaced-to))))
	 (2d-image (make-array
		     (if (= (length dims) 3)
			 (list (first dims) (* (second dims) (third dims)))
			 (list 1 (* (first dims) (second dims))))
		     ':type 'art-fixnum
		     ':displaced-to image)))

    (setf (sc-control-alternate-array image) 2d-image)

    (when primary
      (setf (sc-control-property image :primary) primary)
      )
    image))


(defmethod (:update-color-map-from-image basic-color-map-mixin)
	   (&optional (image color-map-image) &rest args)
  "update the hardware from the color map image"
  (lexpr-send self ':new-color-map image args))

(defmethod (:beep basic-color-map-mixin) (&optional beep-type)
  beep-type
  (let* ((segment-number (send self :map-segment-number))
	 (beep-map (send self :beep-color-map))
	 (cmi color-map-image))
    (without-interrupts
      (setq color-map-image beep-map)
      (send self :update-color-map-from-image beep-map 0)
      (send self :set-map-segment-number 0)
      (setq color-map-image cmi)
      (send self :new-color-map (send self :color-map-image))
      (send self :set-map-segment-number segment-number))
    ))

(defmethod (:beep-color-map basic-color-map-mixin) ()
  (or (send self :get :beep-color-map)
      (let ((spec (send self :get :beep-specification))
	    (map (send self :make-color-map-image)))
	(cond ((AND spec (symbolp spec))
	       (send self spec map))
	      (t (cond ((fixp spec))
		       ((floatp spec)
			;; convert flonum to binary mask
			(setq spec (1- (lsh 1 (1- (haulong (round (* 1024. spec))))))))
		       (t (setq spec #o777)))
		 (loop for i from 0 below (send self :color-map-description t)
		       do
		       (send self :write-color-map-image i
			     (logxor spec (lsh i 2))
			     (logxor spec  (lsh i 2))
			     (logxor spec (lsh i 2))
			     0 map))))
	(send self :putprop map :beep-color-map))))

(defflavor simple-color-map-mixin ((color-map-offset)) (basic-color-map-mixin)
  (:required-flavors common-color-hardware-mixin)
  :initable-instance-variables
  (:gettable-instance-variables color-map-offset)
  )

(defmethod (:map-modes simple-color-map-mixin) ()
  (values
    '(:8-bit)
    1.				 ;; maps
    ))

(defmethod (:color-map-description simple-color-map-mixin) (&optional image )
  image ;; unused
  (values

    ;; size of maps
    (array-dimension-n  2 color-map-image)

    ;; number of maps available
    (array-dimension-n  1 color-map-image)

    ':dependent

    ':none))

(defmethod (:overlay-description simple-color-map-mixin) (&rest ignore)
  (values 0 0 :none))

(defmethod (:set-map-mode simple-color-map-mixin)
	   (mode &optional segment-number map-source overlay-source image )
  mode segment-number map-source overlay-source
  
  (fixup-control image)
  (send self ':map-mode image))


(defmethod (:map-mode simple-color-map-mixin) ( &optional image )
  image ;;unused
  (values 
    ':8-bit
    0
    0
    8
    0
    0))

(defmethod (:pixel-positions simple-color-map-mixin) (&optional ignore)
  (values '(0) '(0)))


(defmethod ((2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB"):write-color-map-image0 simple-color-map-mixin) (slot r g b &optional
							    (segment-number
							      default-map-segment-number)
							    (map color-map-image)
							    (alpha (lsh slot 2)))
  (let ((rmap (if (or (eq map color-map)
		      (eq map t)
		      (eq map nil))
		  color-map-image
		  map))
	(segment-number (or segment-number default-map-segment-number))
	(index (+ (* segment-number 256.) slot))
	(val (%logdpbs (lsh alpha -2) (byte 8. 24.)
		       (lsh b -2)     (byte 8. 16.)
		       (lsh g -2)     (byte 8. 8.)
		       (lsh r -2)))
	)
    (declare (sys:array-register-1d rmap))
    (setf (aref rmap index) val)
    (when (and (eq map color-map)
	       (eq segment-number (send self :map-segment-number)))
      (update-hardware-color-map self index 1))))

(defmethod (2%bow-mode-alu0 simple-color-map-mixin) ()
  (if (send self :bow-mode) color:alu-~x color:alu-x))

(defmethod (2update-hardware-color-map0 simple-color-map-mixin) (offset size)

  (multiple-value-bind (seg-size n-segs)
      (send self :color-map-description t)
    (let ((bow-mode-alu (%bow-mode-alu self)))
      (multiple-value-bind (y x)(floor offset seg-size)

	(wait-for-vertical-sync 
	  (if (= size 1)

	      (let ((val (%1d-aref color-map-image offset)))
		(setf (%1d-aref color-map (+ x (* seg-size (mod y n-segs))))
		      (boole bow-mode-alu val val)))

	      (let* ((dest (sc-control-alternate-array color-map))
		     (ds (array-length dest)))
		(tv:bitblt bow-mode-alu size 1      
			   (sc-control-alternate-array color-map-image) offset 0
			   dest (mod offset ds) 0))
	      )))))
    )

(defmethod (:write-color-map simple-color-map-mixin)
	   (slot r g b &optional (segment-number default-map-segment-number)
		 (alpha (lsh slot 2)))
  (send self :write-color-map-image slot r g b segment-number color-map alpha))

(defmethod (:read-color-map-image simple-color-map-mixin)
	   (slot &optional
		 (segment-number default-map-segment-number)
		 (map color-map-image))
  (let* ((segment-number (or segment-number default-map-segment-number))
	 (map (selectq map
		((t nil) color-map-image)
		(t map)))
	 (v (raster-aref map slot segment-number)))
    (values
      (lsh (ldb (byte 8. 0) v) 2)
      (lsh (ldb (byte 8. 8.) v) 2)
      (lsh (ldb (byte 8. 16.) v) 2)
      (lsh (ldb (byte 8. 24.) v) 2)))
  )

(defmethod (:read-color-map simple-color-map-mixin)
	   (slot &optional ( segment-number default-map-segment-number))
  (send self :read-color-map-image slot segment-number color-map-image))

(defmethod (:map-segment-number simple-color-map-mixin) (&optional cont)
  (fixup-control cont)
  (or (get (locf (sc-control-properties cont)) :map-segment-number)
      0))

(defmethod (:set-map-segment-number simple-color-map-mixin) (n &optional cont)
  (fixup-control cont)
  (multiple-value-bind (nil n-maps) (send self :color-map-description cont)
    (unless (and (fixp n)(< -1 n n-maps))
      (ferror "~A isn't a valid map segment number" n)))
  (prog1 (send self :map-segment-number cont)
	 (setf (sc-control-property cont :map-segment-number) n)
	 (when (eq cont control)
	   (setf (sc-control-property control-image :map-segment-number) n)
	   (send self ':new-color-map color-map-image n))))

(defmethod (:new-control simple-color-map-mixin :after) (&optional (cont t))
  (fixup-control cont)
  (let ((new (send self :map-segment-number cont)))
    (unless (eql new (send self :map-segment-number control))
      ;;
      ;;note; this is a noop if the actual methods handle map-segment-number "for real"
      ;;
      (send self :set-map-segment-number new control))
    ))

(defmethod (:new-color-map simple-color-map-mixin)
	   (&optional (new color-map-image) (num (send self :map-segment-number)) to-num)
  (let* ((new (if (or (eql new t)
		      (eql new niL))
		  color-map-image
		  new))
	 (map-size (send self :color-map-description t))
	 (source (sc-control-alternate-array new))
	 (num (or num 0))
	 (to-num (or to-num num))
	 )

    (unless (and (eq new color-map-image)
		 (eql num to-num))
      (let* ((d2 (sc-control-alternate-array color-map-image))
	     )
	(bitblt alu-x map-size 1
		source (* num map-size) 0
		d2 (* to-num map-size) 0)))

    (update-hardware-color-map self (* to-num map-size) map-size)
    ))


(defmethod (:make-threshold-map managed-map-mixin)
	   (&key (lower-threshold 0.5)
		 (upper-threshold 1.0)
		 (segment (send self :map-segment-number))
		 (map (send self :color-map-image))
		 (zero-value 0)
		 (one-value 1023.)
		 (update (eq map (send self :color-map-image))))

  (let* ((n-slots (send self :color-map-description))
	 (lower-threshold (max 0 (min n-slots
				(round (if (fixp lower-threshold)
					   lower-threshold
					   (* n-slots lower-threshold))))))
	 (upper-threshold (max 0 (min n-slots
				      (round (if (fixp upper-threshold)
						 upper-threshold
						 (* n-slots upper-threshold)))))))
    (when (> lower-threshold upper-threshold)
      (swapf zero-value one-value)
      (swapf lower-threshold upper-threshold))

    (loop for i from 0 below lower-threshold
	  do (send self :write-color-map-image i zero-value zero-value zero-value segment map))
    (loop for i from lower-threshold below upper-threshold
	  do (send self :write-color-map-image i one-value one-value one-value segment map))
    (loop for i from upper-threshold below n-slots
	  do (send self :write-color-map-image i zero-value zero-value zero-value segment map))    
    )
  (when update (send self :new-color-map map segment))
  )

(defmethod (:mouse-set-map-thresholds managed-map-mixin)
	   (&key (lower-threshold 0.5)
		 (upper-threshold 1.0)
		 (temporary-p t)
		 (adjust-threshold :lower))

  (let ((cm (send self :make-color-map-image))
	(next-threshold (selectq adjust-threshold (:lower :upper) (t :lower)))
	)
    (copy-array-contents (send self :color-map-image) cm)

    (when (floatp lower-threshold)
      (setq lower-threshold (round (* 256. lower-threshold))))
    (when (floatp upper-threshold)
      (setq upper-threshold (round (* 256. upper-threshold))))

    (unwind-protect
	(tv:with-mouse-usurped
	  (loop with val = (or lower-threshold 128)
		and old-val
		doing
	    (unless (eql val old-val)
	      (send self :make-threshold-map
		    :lower-threshold (if (eq adjust-threshold :upper)
					 lower-threshold
					 val)
		    :upper-threshold (if (eq adjust-threshold :upper)
					 val
					 upper-threshold))
	      (setq old-val val)
	      (setf tv:who-line-mouse-grabbed-documentation
		    (format nil "L: Set ~A threshold to ~A     M: Exit with Lower = ~A Upper = ~A    R: Switch to setting ~A threshold"
			    adjust-threshold val
			    lower-threshold upper-threshold
			    next-threshold)))

	    (multiple-value-bind (dx ignore click) (tv:mouse-input)
	      (setq old-val val
		    val (truncate (max (min (+ val (* .2 dx)) 255.) 0)))

	      (cond ((bit-test click 2)
		     (return (values lower-threshold upper-threshold)))
		    ((zerop click))
		    ((bit-test click 1)
		     (selectq adjust-threshold
		       (:upper (setq upper-threshold val))
		       (t (setq lower-threshold val))))
		    ((bit-test click 4)
		     (swapf adjust-threshold next-threshold)
		     (setq old-val (setq val (selectq adjust-threshold
					       (:upper upper-threshold)
					       (t lower-threshold))))
		     )))
	    )
	  )
      (when temporary-p
	(send self :new-color-map cm))
      )))

(defmethod (:mouse-set-map-threshold managed-map-mixin)
	   (&key (lower-threshold 0.5)
		 (temporary-p t))

  (let ((cm   (send self :make-color-map-image))
	(who  tv:who-line-documentation-window)
	(doc  "Any click will set threshold to = XXX")
	doc1)
    (copy-array-contents (send self :color-map-image) cm)
    (when (floatp lower-threshold)
      (setq lower-threshold (round (* 256. lower-threshold))))
    (unwind-protect
	(tv:with-mouse-usurped
	  (setq tv:who-line-mouse-grabbed-documentation doc)
	  (loop with val = (or lower-threshold 128.)
		with fixval = val
		and oldval  = -1
		for num-idx = 34.
	        doing
	    (unless (= oldval fixval)
	      (setq oldval fixval)
	      (send self :make-threshold-map :lower-threshold fixval :upper-threshold 1.0)
	      (with-output-to-string (s doc num-idx) (format s "~3D" fixval))
	      (multiple-value (doc doc1) (tv:who-line-documentation-function who nil doc1)))
	    (multiple-value-bind (dx ignore click) (tv:mouse-input)
	      (when (plusp click) (return fixval))
	      (setq val    (+ val (* .2 dx))
		    oldval fixval
		    fixval (max (min (round val) 255.) 0)))))
      (when temporary-p
	(send self :new-color-map cm))
      )))


1;
;note that the name COLOR-RASTER-ARRAY is known explicitly to various
;other callers, and if it is changed, or other dependants of tv:sheet-raster
;are added, they will have to be updated too.
;
0(defstruct (color-raster-array (:type :named-array-leader)
			       (:print "~\sheet-raster\" color-raster-array)
			       (:include tv:sheet-raster)
			       (:constructor nil)
			       (:size-symbol color-raster-array-leader-length))
  (unused-0 nil)			;Fill pointer, unused
  (color-pixel-mode-arrays)			;Array to access pixel mode
  (color-fill-mode-arrays)		;Array to access fill mode
  (color-packed-mode-arrays)		;Arrays to access packed-pixels.
  (color-external-overlay-arrays)       ;an overlay lane at a different virtual address.
  (color-raster-array-properties)	;any other stuff
  )

(defstruct (1d-sheet-raster (:type :named-array-leader)
			    (:include tv:sheet-raster)
			    (:constructor nil)))
  
(defstruct (1d-color-raster-array (:type :named-array-leader)
				  (:include color-raster-array)
				  (:constructor nil)))

