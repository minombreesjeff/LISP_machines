;;;-*- Mode: LISP; Package: COLOR; Base: 10.; Lowercase: Yes -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defflavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")overlay-screen-mixin
0	((overlay-designators
	   '(:external-overlay :external-overlay-0 :external-overlay-1))
	 (overlay-plane-image)
	 (overlay-color :white)
	 (foreground-color '(0 0 0))
	 (background-color '(1.0 1.0 1.0))
	 (overlay-descriptor :overlay)
	 (inhibit-refresh :first)
	 (console nil))
	(tv:unused-memory-allocator-mixin)
  (:required-flavors color-slave-screen-mixin tv:screen)
  (:required-instance-variables tv:buffer)
  (:required-methods create-color-console-parent)
  (:init-keywords :set-mouse-sheet-when-selected :bow-mode)
  (:default-init-plist :set-mouse-sheet-when-selected :from-parent :bow-mode nil
		       :parent-screen nil)
  (:initable-instance-variables foreground-color background-color inhibit-refresh
				overlay-designators overlay-descriptor)
  (:settable-instance-variables background-color foreground-color console)
  )

(defwhopper (1:refresh0 overlay-screen-mixin) (&rest args)
  (unless inhibit-refresh
    (lexpr-continue-whopper args))
  (when (eq inhibit-refresh :first)
    (setq inhibit-refresh nil)))

(defmethod (1:create-screen-array0 overlay-screen-mixin)
	   (width height array &optional (type (tv:sheet-array-type self)))
  (let ((not-for-screen? (and (arrayp array)
			      (= (array-#-dims array) 2))))
    (make-raster-array
      width height
      :type type
      :named-structure-symbol
       (if height 'color-raster-array '1d-color-raster-array)
       :leader-length color-raster-array-leader-length
      :displaced-to array
      :displaced-conformally not-for-screen?
      :displaced-index-offset (if not-for-screen? 0 nil)))
  )

(defmethod (1:inferior-screen-array-adjusted0 overlay-screen-mixin)
	   (sheet array width height new-pointer x-offset y-offset)
  sheet ;Ignored
  (when (typep array 'tv:sheet-raster)
    (setf (tv:sheet-raster-sheet array) self))
	  (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;when there is a who screen, use the full height

0  (when (and (eql sheet self) height)
    (setq height (max height (screen-height-with-who-line self))))
  (redirect-color-raster-array self array (array-type array)
			       width height new-pointer x-offset y-offset sheet :pixel)
  )


(defmethod (1redirect-color-raster-array0 overlay-screen-mixin)
	   (array type width height displaced-to x-offset y-offset
		  &optional sheet private-type number)
  (ignore private-type)
  (let ((ar (redirect-color-raster array type width height displaced-to x-offset y-offset)))
    (when ar (register-bitmap-internal self ar sheet private-type number))
    ar))

(defmethod (1tv:get-remote-bitmap0 overlay-screen-mixin) (raster)
  (let ((sym (si:named-structure-p raster)))
    (when (or (eq sym 'color-raster-array)
	      (eq sym '1d-color-raster-array))
      (getf (color-raster-array-properties raster) self))))

(defmethod (1register-bitmap-internal0 overlay-screen-mixin :default) 
	   (new sheet &optional private-type number)
  (ignore  sheet private-type number)
  (if (and (eq private-type :pixel)
	   (multiple-value-bind (origin bit-origin bpp w h span) (decode-array-parameters new)
	     (ignore bit-origin bpp w h span)
	     #+3600 (or (fixp origin)
			(and (locativep origin)
			     (eql (ldb sys:%%vma-equals-pma (%pointer origin))
				  sys:%vma-equals-pma)))
	     #+imach (typep origin :physical-address)))

      (setf (cl:getf  (color-raster-array-properties new) self)
	    new)

      (setf (cl:getf (color-raster-array-properties new) self)
	    nil)))

(defmethod (1:hardware-control-locs0 overlay-screen-mixin) ()
  nil)

(defmethod (1:figure-usable-color-parameters0 overlay-screen-mixin)
	   (write-mask data alu &optional type array screen-array)
  (when (member array overlay-designators) (setq array :default))
  (default-figure-usable-color-parameters
    (if (bit-test write-mask 1) -1 0)
    (if (bit-test data 1) -1 0)
    alu type array screen-array)
	)

(defwhopper (1create-color-console-parent0 overlay-screen-mixin) ()
  (let ((scr (continue-whopper)))
    (setf (tv:sheet-screen scr) scr)
    (loop for i in (send scr :overlay-screens)
	  do (set-parent-screen-internal i scr))
    scr))

(defmethod (1:init 0overlay-screen-mixin :before) (ignore)
2  ;;if we are being instantiated without a parent, create him.  This happens
  ;;when booting a cad buffer color console.
0  (unless tv:parent-screen
    (send self :putprop t :turn-video-on-for-mouse)
    (send self :putprop :overlay :video)
    (create-color-console-parent self)
    (setf color-screen tv:parent-screen)
    (send self :putprop t :color-console-p)
    (tv:set-default-window-size 'zwei:zmacs-frame tv:parent-screen nil :width #o1421)
    (tv:set-default-window-size 'zwei:zmacs-frame self nil :width #o1421))
  )

(defmethod (1:init0 overlay-screen-mixin :after) (plist)

  (send self :putprop (get plist :bow-mode) :bow-mode)
  (setq overlay-plane-image  (tv:make-sheet-bit-array self tv:width tv:height))

  (let ((g (get plist :set-mouse-sheet-when-selected)))
    (when g
      (send self :putprop g :set-mouse-sheet-when-selected)))
  (send self :init-overlay-color-map))

(defmethod (1set-parent-screen-internal0 overlay-screen-mixin) (new)
  (setq tv:parent-screen new
	tv:screen-lock (tv:screen-lock tv:parent-screen)))

(defmethod (1:save-overlay-state0 overlay-screen-mixin) ()
  ;; move the overlay plane to safekeeping
  (setq overlay-color (send tv:parent-screen :overlay-color))
  (let ((w tv:width)
	(h tv:height)
	(ov overlay-plane-image))
    (when tv:exposed-p
      (page-in-raster-array ov)
      (tv:prepare-sheet (self)
	(send self :%bitblt tv:alu-seta w h
	      nil 0 0
	      ov 0 0
	      self)))
    (when (eq tv:who-line-screen tv:who-screen)
      (tv:remove-active-who-line-screen tv:who-screen))
    ;; redirect the overlay plane to the safekeeping array
    (send self :adjust-screen-array tv:old-screen-array ov)
    )
  )

(defmethod (1:restore-overlay-state0 overlay-screen-mixin) ()
  ;; restore the control image, map image, overlay plane
  (let* ((w tv:width)
	 (h tv:height)
	 (ov overlay-plane-image))
    (when tv:exposed-p
      (send self :adjust-screen-array tv:old-screen-array tv:buffer)
      (page-in-raster-array ov)
      (tv:prepare-sheet (self)
	(send self :%bitblt tv:alu-seta w h
	      ov 0 0
	      nil 0 0
	      self)))
    (when (instancep tv:who-screen)
      (tv:add-active-who-line-screen tv:who-screen)))
  (send tv:parent-screen :set-overlay-color overlay-color)
  )

(defmethod (1:visible-pixel-slots0 overlay-screen-mixin) 
	   (ov-type main-bits ov-bits seg)
  (send tv:parent-screen :visible-pixel-slots ov-type main-bits ov-bits seg))

(defmethod (1:visible-pixel0  overlay-screen-mixin)
	   (ov-type main-bits ov-bits segment-number)
  (send tv:parent-screen :visible-pixel ov-type main-bits ov-bits segment-number)
  )

(defmethod (1:rgb-for-color0 overlay-screen-mixin) (color &optional y)
  (let* ((parent-size (send tv:parent-screen :bits-per-pixel))
	 (my-byte (byte (send self :bits-per-pixel)
			parent-size))
	 (parent-byte (byte parent-size 0))
	 (rgb (cond (y (dpb (send self :point color y)
			    my-byte
			    (send tv:parent-screen :point color y)))
		    ((fixp color) (dpb color my-byte 0))
		    ((instancep color)
		     (multiple-value-bind (ignore ignore ignore fill)
			 (send color (send tv:parent-screen :alu-parameter-message)
			       self (send self :screen-array))
		       (dpb fill my-byte 0)))
		    (t (ferror "~A Not valid as a color spec" color)))))
    (multiple-value-bind (mode segment-number)
	(send self :map-mode)
      (send self :visible-pixel
	    mode
	    (ldb parent-byte rgb)  ;; data bits
	    (ldb my-byte rgb);; overlay bits
	    segment-number))))

(defmethod (1:set-foreground-color0 overlay-screen-mixin :after) (ignore)
  (send self :init-overlay-color-map)
  (when (eq (send tv:parent-screen :overlay-is-independent nil) :opaque)
    (send tv:parent-screen :new-color-map))
  )

(defmethod (1:set-background-color0 overlay-screen-mixin :after) (ignore)
  (send self :init-overlay-color-map)
  (when (eq (send tv:parent-screen :overlay-is-independent nil) :opaque)
    (send tv:parent-screen :new-color-map)))

(defmethod (1:set-overlay-color0 overlay-screen-mixin) (color &optional cont)
  (send tv:parent-screen :set-overlay-color color cont))

(defmethod (1:overlay-color0 overlay-screen-mixin) (&optional cont)
  (send tv:parent-screen :overlay-color cont))

(defmethod (1:beep0 overlay-screen-mixin) (&optional beep-type)
  (ignore beep-type)
  (let ((beep-type (if (and (variable-boundp console) console) tv:beep :flash)))
    (selectq beep-type
      ((nil))
      ((:beep)
       (sys:%beep tv:beep-wavelength tv:beep-duration console))
      (otherwise
       (unless (eq beep-type :flash)
	 (sys:%beep tv:beep-wavelength tv:beep-duration console))
       (let ((b (send self :bow-mode)))
	 (send self :set-bow-mode (not b))
	 (send self :set-bow-mode b)))))
  )
;;
;; Low level stuff to get the arrays indirected properly
;;
(defwhopper (1:expose0 overlay-screen-mixin) (&rest args)
  (unless (send tv:parent-screen :exposed-p)
    (send tv:parent-screen :expose))
  (when (send tv:parent-screen :exposed-p)
    (send self :hardware-set-base-addresses nil)
    (send self :setup-hardware)
    (lexpr-continue-whopper args)))


(defmethod (1:deactivate0 overlay-screen-mixin :before) ()
  (when (send self :exposed-p)
    (send tv:parent-screen :set-overlay-is-independent nil))
  )

(defmethod (1:deactivate0 overlay-screen-mixin :after) ()
  (send self :un-set-base-addresses))

(defmethod (1:set-base-addresses0 overlay-screen-mixin) (ignore)
  (unless (send tv:parent-screen :exposed-p)
    (send tv:parent-screen :expose))
  (setq tv:buffer (send tv:parent-screen :overlay-buffer self))
  (set-who-line-buffer self tv:buffer)
  )

(defmethod (1:un-set-base-addresses0 overlay-screen-mixin) ()
  (setq tv:buffer *dummy-array*)
  (set-who-line-buffer self tv:buffer)
  )

(defmethod (1:hardware-set-base-addresses0 overlay-screen-mixin) (&optional ignore)
  (send self :set-base-addresses nil)
  )

(defmethod (1:setup-hardware0 overlay-screen-mixin) ()
  (unless (send tv:parent-screen :exposed-p)
    (send tv:parent-screen :expose))
  )

(defmethod (1:appropriate-hardware-p0 overlay-screen-mixin) ()
  (send tv:parent-screen :exposed-p))

(defmethod (1:hardware-description0 overlay-screen-mixin) ()
  (multiple-value-bind (nil mem paddle)
      (send tv:parent-screen :hardware-description)
    (values overlay-descriptor mem paddle)))

(defmethod (1:invisible-to-mouse-p0 overlay-screen-mixin) ()
  (or tv:invisible-to-mouse-p
      (not (send self :video-on))))

(defmethod (1:accept-pop-up-notifications 0overlay-screen-mixin) ()
  (not (send self :invisible-to-mouse-p)))

(defmethod (1:bow-mode0 overlay-screen-mixin) (&optional ignore)
  (send self :get :bow-mode))

(defmethod (1:set-bow-mode0 overlay-screen-mixin) (to &optional ignore)
  (setq to (selectq to ((nil 0) nil) (t t)))
  (let ((old (send self :get :bow-mode))
	(ov-col (send tv:parent-screen :overlay-color)))
    (send self :putprop to :bow-mode)
    (when (neq to old)
      (if (eq (send tv:parent-screen :overlay-is-independent) :opaque)
	  (send tv:parent-screen :new-color-map)
	  (send tv:parent-screen :set-overlay-color ov-col)
	  ))
    old))

(defmethod (1:set-map-mode0 overlay-screen-mixin) (&rest args)
  (lexpr-send tv:parent-screen :set-map-mode args))

(defmethod (1:map-mode0 overlay-screen-mixin) (&rest args)
  (lexpr-send tv:parent-screen :map-mode args))

(defmethod (1:pixel-positions0 overlay-screen-mixin) (&optional ignore)
  (values '(0) '(0)))

(defmethod (1:video-on0 overlay-screen-mixin) (&optional cont)
  (and (send tv:parent-screen :exposed-p)
       (send tv:parent-screen :video-on-hardware cont)
       (let ((act (send self :get :active-overlay-p))
	     (ind (send tv:parent-screen :overlay-is-independent cont)))
	 (if act
	     (not ind)
	     ind
	     ))
       (send tv:parent-screen :overlays-enabled-p)
       ))

(defmethod (1:set-video-on0 overlay-screen-mixin) (to &optional cont)
  (let ((ison (send self :video-on cont))
	(to (selectq to ((nil 0) nil) (t t))))
    (when (and (neq ison to)
	       (send tv:parent-screen :exposed-p)
	       (or (eq cont nil) (eq cont (send tv:parent-screen :control))))
      ;; change state
      (if (null to)

	  (send tv:parent-screen :set-map-mode
		(or (send self :get :parent-video-off-mode)
		    (first (send tv:parent-screen :map-modes)))
		cont)

	  (send tv:parent-screen :set-video-on-hardware t cont)	
	  (send tv:parent-screen :set-map-mode
		(or (send self :get :parent-video-on-mode)
		    (if (send self :get :active-overlay-p)
			(if (memq :24-bit-and-foreground-overlay
				  (send tv:parent-screen :map-modes))
			    :24-bit-with-foreground-overlay
			    :8-bit-with-foreground-overlay)
			:opaque-overlay)
		    cont))))
    ison))

(defmethod (1:screen-select0 overlay-screen-mixin :after)
	   (&optional (set-video-on t))
  (unless (or (null set-video-on)
	      (send self :get :dont-make-visible-when-selected))
    (unless (send self :video-on)
      (send self :set-video-on t))
    (when (and (instancep tv:mouse-sheet)
	       (eq tv:parent-screen (tv:sheet-screen tv:mouse-sheet))
	       (eq :from-parent (send self :get :set-mouse-sheet-when-selected)))
      (tv:mouse-set-sheet self))))

;
; mixin for parents of overlay screens
;
(defflavor1 overlay-screen-parent-mixin
0	((overlay-is-independent)
	 (overlay-screens)
	 (active-overlay-screens)
	 )
	()
  (:required-flavors tv:screen common-control-mixin)
  (:initable-instance-variables overlay-screens)
  (:gettable-instance-variables overlay-screens active-overlay-screens)
  (:required-methods :create-overlay-screen :save-overlay-state :restore-overlay-state)
  (:init-keywords :overlay-screen)
  )

(defmethod (1:init0  overlay-screen-parent-mixin :before)(plist)
  (let ((os (get plist :overlay-screen)))
    (when os (setq overlay-screens (list os)))))

(defmethod (1:overlay-is-independent0 overlay-screen-parent-mixin) (&optional cont)
  (fixup-control cont)
  (cl:getf (sc-control-properties cont) :overlay-is-independent)
  )

(defmethod (1:set-overlay-is-independent0 overlay-screen-parent-mixin) (to &optional cont)
  (fixup-control cont)
  (let ((new (selectq to ((nil 0) nil) (t t)))
	(old (send self :overlay-is-independent cont)))
    (putprop (locf (sc-control-properties cont)) to :overlay-is-independent)
    (send self :create-overlay-screen)
    (when (eq cont control)
      (setq overlay-is-independent to)
      (putprop (locf (sc-control-properties control-image)) to :overlay-is-independent)
      (unless (eq (and old t) (and new t))
	(without-interrupts
	  (cond (new
		 ;; moving from dependent to independent overlay
		 (send self :save-overlay-state)
		 (loop for scr in overlay-screens do (send scr  :restore-overlay-state))
		 )
		(t ;;moving from independent to dependent overlay
		 (loop for scr in overlay-screens do (send scr :save-overlay-state))
		 (send self :restore-overlay-state))
		))))
  old))

(defmethod (1:invisible-to-mouse-p0 overlay-screen-parent-mixin) ()
  (or tv:invisible-to-mouse-p 
      (when overlay-is-independent
	(send self :overlays-enabled-p))))

(defmethod (1:overlay-screen0 overlay-screen-parent-mixin) (&optional which)
  (if which
      (nth which overlay-screens)
      (cl:apply #'values overlay-screens)))

(defmethod (1:active-overlay-screen0 overlay-screen-parent-mixin) (&optional which)
  (if which
      (nth which active-overlay-screens)
      (cl:apply #'values active-overlay-screens)))

(defmethod (1create-overlay-screen-internal0 overlay-screen-parent-mixin)
	   (flavor pixel-depth &rest make-window-options &key name-prefix property-list
		   &allow-other-keys)
  (si:with-rem-keywords (make-window-options make-window-options
					     '(:name-prefix :property-list))
    (let ((scr (lexpr-funcall #'tv:make-window flavor
			      :bits-per-pixel pixel-depth
			      :width tv:width
			      :buffer *dummy-array*
			      :superior nil
			      :name (multiple-value-bind (type slot)
					(send self :hardware-description)
				      (format nil "~A for ~A ~D"
					      (or name-prefix "Overlay")
					      type
					      slot))
			      :property-list (append '(:video :overlay
						       :turn-video-on-for-mouse nil)
						     property-list)
			      :height tv:height
			      :parent-screen self
			      make-window-options
			      )))
      (send scr :change-of-size-or-margins
	    :top-margin-size (send self :top-margin-size)
	    :left-margin-size (send self :left-margin-size)
	    :right-margin-size (send self :right-margin-size)
	    :bottom-margin-size (send self :bottom-margin-size)
	    )
      (set-parent-screen-internal scr self)
      scr)))


(defmethod (1:activate0 overlay-screen-parent-mixin :after) ()
  (loop for scr in overlay-screens do (send scr :activate))
  )

(defmethod (1:deactivate0 overlay-screen-parent-mixin :before) ()
  (loop for scr in overlay-screens do (send scr :deactivate))
  (loop for scr in active-overlay-screens do (send scr :deactivate))
  )

(defmethod (1:deactivate0 overlay-screen-parent-mixin :after) ()
  (send self :un-set-base-addresses))

(defmethod (1:expose0 overlay-screen-parent-mixin :after) (&rest ignore)
  (when tv:exposed-p
    (loop for scr in overlay-screens do (send scr :expose))
    (loop for scr in active-overlay-screens do (send scr :expose))
    ))

(defmethod (1:deexpose0 overlay-screen-parent-mixin :after) (&rest ignore)
  (unless tv:exposed-p
    (loop for scr in overlay-screens do (send scr :deexpose))
    (loop for scr in active-overlay-screens do (send scr :deexpose))
    ))

 (defmethod (1:screen-select0 overlay-screen-parent-mixin :after) (&optional (set-video-on t))
  (unless (or (null set-video-on)
	      (send self :get :dont-make-visible-when-selected))
    (unless (send self :video-on)
      (send self :set-video-on t))
    (when (and (instancep tv:mouse-sheet)
	       (member (tv:sheet-screen tv:mouse-sheet) overlay-screens)
	       (eq :from-overlay (send self :get :set-mouse-sheet-when-selected)))
      (tv:mouse-set-sheet self))))

(defmethod (1:new-control0 overlay-screen-parent-mixin :after) (&optional (cont  t))
  (fixup-control cont)
  (send self :set-overlay-is-independent
	(get (locf (sc-control-properties cont)) :overlay-is-independent)
	control))

