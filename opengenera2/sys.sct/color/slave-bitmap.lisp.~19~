;;-*- Mode: LISP; Package: TV; Base: 10 -*- 


;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defflavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")slave-bitmap-screen0 ((remote-status :local))
      (color:slave-graphics-mixin slave-allocator-mixin slave-screen-mixin roving-bitmap)
  (:init-keywords :for-stream :fixed-size)
  :gettable-instance-variables
  :initable-instance-variables
  (:default-init-plist :width 1 :height 1))


(defmethod (1:set-remote-status0 slave-bitmap-screen) (new)
  (setq remote-status new)
  (if remote-status
      (make-remote parent-screen buffer :error-p new)
      (make-local parent-screen buffer :error-p nil)))

(defmethod (1%make-new-buffer0 slave-bitmap-screen) ()
  (setq buffer (allocate-raster parent-screen
				      width height
				      :type (sheet-array-type self)
				      :make-remote (when remote-status t)
				      :error-p remote-status
				      :for-sheet self
				      :allow-excess-size t)
	)
  )

(defmethod (1:init0 slave-bitmap-screen :before) (ignore)
  (unless buffer (%make-new-buffer self)))

(defmethod (1:adjust-screen-array0 slave-bitmap-screen)
	   (array new-pointer &optional (SUP-XOFF 0) (SUP-YOFF 0)
		  (XOFF X-OFFSET) (YOFF Y-OFFSET))
  (ignore xoff yoff sup-xoff sup-yoff)
  (when (and (arrayp new-pointer)
	     (= 2 (array-#-dims new-pointer)))
    (multiple-value-bind (owidth oheight)
	(decode-raster-array new-pointer)
      (if (and (eq new-pointer buffer)
	       (not (and (eql owidth width)(eql oheight height))))

	  (progn
	    (deallocate-raster parent-screen buffer :error-p nil)
	    (%make-new-buffer self)
	    (tv:deallocate-raster parent-screen new-pointer :error-p nil)
	    (setq new-pointer buffer)
	    )

	  (grow-bit-array new-pointer width
			     height width
			     owidth oheight
			     erase-aluf))))

  (send screen :inferior-screen-array-adjusted
	self array width height new-pointer 0 0)

  (when (eq array screen-array)
    (adjust-inferior-screen-arrays self array 0 0))
  )

(defmethod (1:reset0 slave-bitmap-screen :before) (&key width height &allow-other-keys)
  (when (and width height)
    (send self :set-size width height)))

(defmethod (1:kill0 slave-bitmap-screen :after) ()
  (deallocate-raster parent-screen buffer :error-p nil))

(defmethod (1deallocate-bitmap-stream0 slave-bitmap-screen :before) ()
  (when parent-screen
    (send self :set-size 1 1)))

(defmethod (1:assure-room-for-output0 slave-bitmap-screen :after) (&rest ignore)
  (when remote-status
    (make-remote parent-screen buffer :error-p remote-status)))

(defmethod (1deallocate-bitmap-stream0 slave-bitmap-screen) ()
  (deallocate-resource 'b&w-slave-bitmap-screen-resource self))

(defflavor 1color:color-slave-bitmap-screen0 ()
      (color:color-slave-screen-mixin  slave-bitmap-screen))

(defmethod (1deallocate-bitmap-stream0 color:color-slave-bitmap-screen) ()
  (deallocate-resource 'color:color-slave-bitmap-screen-resource self))
  

(defresource color:1color-slave-bitmap-screen-resource0 (parent-screen bits-per-pixel)
  :constructor (make-instance 'color:color-slave-bitmap-screen
			      :bits-per-pixel bits-per-pixel
			      :parent-screen parent-screen))
(defresource 1b&w-slave-bitmap-screen-resource0 (parent-screen bits-per-pixel)
  :constructor (make-instance 'slave-bitmap-screen
			      :bits-per-pixel bits-per-pixel
			      :parent-screen parent-screen))



;tie us into the allocator
(defmethod (1:screen-allocate-bitmap-stream0 common-allocator-mixin)
	   (&rest args &key bits-per-pixel &allow-other-keys)
  (let ((win (if (= bits-per-pixel 1)
		 (allocate-resource 'b&w-slave-bitmap-screen-resource
				    self bits-per-pixel)
		 (allocate-resource 'color:color-slave-bitmap-screen-resource
				    self bits-per-pixel))))
    (when win (lexpr-send win :reset args))
    win))

(defmethod (1graphics::stream-transform0 common-allocator-mixin) ()
  graphics:*identity-transform*)
