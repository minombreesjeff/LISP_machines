;;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: Gt; Fonts: CPTFONT,CPTFONTB,CPTFONTI; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defmacro D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")with-temporary-mouse-sheet0 ((temporary-mouse-sheet) &body body &environment env)
  (once-only (temporary-mouse-sheet &environment env)
    `(unwind-protect
	 (let-globally ((tv:mouse-sheet tv:mouse-sheet))
	   (tv:mouse-set-sheet ,temporary-mouse-sheet)
	   ,@body)
       (tv:mouse-set-sheet tv:mouse-sheet))))

;;; -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

(defflavor 1pop-up-menu-flavor
0	((associated-canvas) (value))
	(menu-items-mixin 
	 tv:window
	 tv:top-box-label-mixin
	 tv:borders-mixin
	 tv:temporary-window-mixin)
  (:settable-instance-variables))

;(defflavor 1pop-up-menu-flavor
0;	((associated-canvas) (value))
;	(menu-items-mixin 
;	 tv:window
;	 tv:DROP-SHADOW-BORDERS-MIXIN
;	 tv:top-box-label-mixin
;	 tv:borders-mixin
;	 tv:temporary-window-mixin)
;  (:settable-instance-variables))

(tv:defwindow-resource 1pop-up-menu-flavor0 ()
  :make-window
  (pop-up-menu-flavor :blinker-p nil)
  :reusable-when :deexposed)

(defmacro 1pop-up-choose0 (item-list &key (width) (height) (initial-value) (label) (alignment-parameters ''(:vertical 0 0 2))
			 (defaults ''(:setup :default-b&w-setup)) (align-once? nil) (size :dynamic))
  `(let* (result (gt:*plist-defaults* ,defaults))
     (using-resource (*window* 1pop-up-menu-flavor0 tv:mouse-sheet)
       (send *window* :set-item-list nil)
       (send *window* :set-all-items nil)
       (let* ((top-items ,item-list)
	      (top-item (group-menu-item top-items :alignment-parameters ,alignment-parameters
					  :align-once? ,align-once? :size ,size)))
	 (send *window* :set-top-level-nodes (list top-item))
	 (multiple-value-bind (x1 y1 x2 y2)
	     (align :vertical 10 10 2 (list top-item))
	   (cond ((and ,width ,height) (send *window* :set-inside-size ,width ,height))
		 (t (send *window* :set-inside-size  (+ 15 (abs (- x2 x1))) (+ 15 (abs (- y2 y1))))))
	   )
	 (when ,label (send *window* :set-label ,label))
	 (when ,initial-value
	   (send *window* :set-value ,initial-value)))

       (unwind-protect
	   (progn (send *window* :expose-near '(:mouse))
		  (setq result (send *window* :main-loop)))
	 (send *window* :deactivate))
       )))

(defmacro 1define-pop-up-window0 (item-list &key (width) (height) (initial-value) (label) (alignment-parameters ''(:vertical 0 0 2))
				(defaults ''(:setup :default-b&w-setup)) (align-once? nil) (size :dynamic))
  `(let* (result (gt:*plist-defaults* ,defaults))
     (setq result (tv:make-window '1pop-up-menu-flavor0 :superior tv:main-screen :blinker-p nil))
     (let ((*window* result))
       (send *window* :set-item-list nil)
       (send *window* :set-all-items nil)
       (let* ((top-items ,item-list)
	      (top-item (group-menu-item top-items :alignment-parameters ,alignment-parameters
					 :align-once? ,align-once? :size ,size)))
;	 (align :vertical 10 10 2 top-items)
	 (send *window* :set-top-level-nodes (list top-item))
	 (multiple-value-bind (x1 y1 x2 y2)
	     (align :vertical 10 10 2 (list top-item))
	   (cond ((and ,width ,height) (send *window* :set-inside-size ,width ,height))
		 (t (send *window* :set-inside-size  (+ 15 (abs (- x2 x1))) (+ 15 (abs (- y2 y1))))))
	   )
	 (when ,label (send *window* :set-label ,label))
	 (when ,initial-value
	   (send *window* :set-value ,initial-value)))
       )
     result))

;(defun 1call-pop-up-window0 (name &optional recreate-window?)
;  (when recreate-window? (clear-resource name))
;  (gt:pop-up-menu-choose name tv:mouse-sheet))

(defun 1call-pop-up-window0 (window &optional initial-value)
  (let ((result))
    (when initial-value
      (send window :set-value initial-value))
    (unwind-protect
	(progn (send window :expose-near '(:mouse))
	       (setq result (send window :main-loop)))
      (send window :deactivate)
      result)))

(defvar 1*pop-up-directory*0 (cl:make-hash-table))

(defun 1zap-menu0 (id window)
  (prog1 (cl:gethash (list (send window :screen) id) *pop-up-directory*)
	 (setf (cl:gethash (list (send window :screen) id) *pop-up-directory*) nil)))

(defun 1call-menu0 (screen label item-lists width height &optional id)
  (cond ((and id (cl:gethash (list screen id) *pop-up-directory*))
	 (gt:1call-pop-up-window0 (cl:gethash (list screen id) *pop-up-directory*)))
	(id
	 (when (not (listp (car (car item-lists))))
	   (setq item-lists (list item-lists)))
	 (let ((window (make-pop-up-window screen label item-lists width height)))
	   (setf (cl:gethash (list id) *pop-up-directory*) window)
	   (gt:1call-pop-up-window0 window)))))

(defun 1make-pop-up-window0 (screen label item-lists width height)
  (let* ((*window* (tv:make-window '1pop-up-menu-flavor0 :superior screen :blinker-p nil :label nil))
	 field)
    (when (and width height)
      (send *window* :set-inside-size width height))
    (setq field (gt:1make-stylish-choice-menu0 *window* label item-lists))
    (when (not (and width height))
      (send field :set-size :dynamic)
      (send field :align)
      (send field :set-size :static)
      (send *window* :set-inside-size (send field :width) (send field :height)))
    (send *window* :set-top-level-nodes (list field))
    *window*))

(defun 1make-stylish-choice-menu0 (window menu-label item-lists)
  (let* ((*window* window)
	 (main-group (group-menu-item
		       (loop for item-list in item-lists
			     collect (group-menu-item
				       (loop for item in item-list
					     collect
					       (command-menu-item
						 :documentation (second (member :documentation item))
						 :value (second (member :value item))
						 :select-method :return-value
						 :shadow-parameters *default-color-shadow*
						 :background-color *40%-gray*
						 :boxed-string (car item)))
				       :background-color *80%-gray* :equalize-sub-item-width t
				       :alignment-parameters '(:vertical 0 0 2)))
		       :background-color *80%-gray*
		       :alignment-parameters  '(:horizontal 0 0 8)))
	 (top-label (label-menu-item :background-color *80%-gray*
				     :boxed-string-color *black* :boxed-string (or menu-label "Select One")
				     :font cptfontcb :height 14
				     :alignment-x-off 10))
	 (abort-box (command-menu-item
		      :value :abort
		      :select-method :return-value
		      :shadow-parameters *default-color-shadow*
		      :width (send (car (send main-group :item-list)) :width)
		      :height 14
		      :boxed-string "ABORT" :background-color
		      *dark-red*))
	 (top-group
	   (group-menu-item
	     (list top-label
		   (spacer-menu-item :height 2 :width (send main-group :total-width)
				     :drawing-method :draw-center-line)
		   main-group
		   (spacer-menu-item :height 2 :width (send main-group :total-width))
		   abort-box
		   (spacer-menu-item :height 2 :width (send main-group :total-width))
		   )
	     :alignment-parameters '(:vertical 0 0 2)
	     :background-color *80%-gray* :borders *default-thick-border*)))
    (send top-group :set-height (send window :height))
    (send top-group :set-width (send window :width))
    (send top-group :set-size :static)
    top-group))


;;; -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; values are returned by 'gt:done being thrown with a value.  This value 
;; is caught and returned by :main-loop.
0(defun 1pop-up-menu-choose0 (window-flavor screen &optional initial-value)
  (eval
    `(using-resource (window ,window-flavor ,screen)
       (setq pur-window window)
       (when ,initial-value
	 (send window :set-value ,initial-value))
       (unwind-protect
	   (progn (send window :expose-near '(:mouse))
		  (setq result (send window :main-loop)))
	 (send window :deactivate)))))
      


(defmethod 1(:refresh pop-up-menu-flavor :after)0 (&rest ignore)
  (send self :standard-refresh))

(defmethod 1(:window pop-up-menu-flavor)0 () self)
(defmethod 1(:window-value pop-up-menu-flavor)0 () value)
  
(defmethod1 (:find-database pop-up-menu-flavor)0 (type)
  (cond ((eq type :window) self)
	((eq type :window-value) value)
	(t value)))

(defmethod 1(:set pop-up-menu-flavor)0 (accessor new-value)
  (if (eq accessor :value)
      (setq value new-value)))

(defmethod 1(:mouse-select pop-up-menu-flavor)0 (&rest ignore))

2;; returns value thrown to 'done.
0(defmethod (1:main-loop0 pop-up-menu-flavor) ()	
  (send self :clear-input)
  (catch 'done
    (loop do
      (*catch :abort-it
	(let ((char (send self ':any-tyi))
	      (old-click-time tv:Mouse-double-click-time))
	  (unwind-protect
	      (progn
		(setq tv:Mouse-double-click-time nil)
		(cond ((not (listp char))
		       (tv:beep))
		      ((eq (first char) :abort)
		       (throw 'done nil))
		      ((not (eq (first char) ':graphics-toolkit-mouse-item))
		       (comment ferror "The list ~S was received as a mouse blip" char))
		      (t  
		       (lexpr-send self (first char) (cdr char))
		       (send self :clear-input))))
	    (setq tv:mouse-double-click-time old-click-time)))))))

(defun 1pop-up-menu-top-level0 (window)
  (send window ':main-loop))

(defmethod 1(:deexpose 0pop-up-menu-flavor :after) (&rest ignore)
  (send self :force-kbd-input '(:abort)))

(defmethod (1:abort-choose0 gt:base-menu-item) (&rest ignore)
  (throw 'done nil))

(defmethod 1(:exit 0gt:base-menu-item) (&rest ignore) (throw 'done t))
(defmethod 1(:exit-value 0gt:base-menu-item) (&rest ignore)
  (throw 'done (send menu-window :value)))

;;;----------------------------------------------------------------------
;;;----------------------------------------------------------------------
;;(gt:pop-up-menu-choose 'pop-up-slider-window tv:mouse-sheet)

(defvar1 *jess* 0(si:backtranslate-font fonts:jess14))

(defflavor 1pop-up-slider-window0 () (pop-up-menu-flavor)
  (:default-init-plist :value .5))

;; need to update database-type etc
(comment defmethod1 (:init pop-up-slider-window :after)0 (&rest ignore)
  (gt:make-group 'foo '((exit abort)) '(("Exit" "Abort")) 'gt:command-menu-item 
		 3 5      5. 40.  60. 15. self
		 :select-method '(:item-list (:exit-value :abort-choose))
		 :font gt:cptfontb
		 :documentation '(:item-list ("Exit with this color" "Abort from choosing color")))
  (gt:make-group 'foo '((min max)) '(("Min" "Max")) 'gt:boxed-number-menu-item
		 3 5   75 40 30 15 self :label-width 30
		 :borders (make-border))
  (gt:make-label-menu-item 'slider "Value" 'slider-menu-item
			   85 10 170 25
			   5 10 70 25 self :borders (make-border :border-width 2)
			   :font *jess*  :label-font cptfonti
			   :database :window :database-type :ask-window :accessor :value
			   )
  (setq gt:item-list
	(send self :get-items '(slider  exit abort))))	;min max

(tv:defwindow-resource 1pop-up-slider-window0 ()
  :make-window
  (pop-up-slider-window :width 300. :height 100. :blinker-p nil
			:borders 2 :label1 "0     1Select Value0")
  :reusable-when :deexposed)

;;;----------------------------------------------------------------------
;;;----------------------------------------------------------------------
(defobject 1window-spec0 ((name "Window Name") (borders? nil) (edge-spec :full-screen)
			(left 0) (top 0) (width 640) (height 484))
  (base-general-object-flavor)
  (:settable-instance-variables))

;;(gt:pop-up-menu-choose 'pop-up-create-window-menu tv:mouse-sheet)

(defflavor 1pop-up-create-window-menu0 () (pop-up-menu-flavor)
  (:default-init-plist :value (make-instance 'window-spec)))

;; need to update database type etc in this
(comment defmethod1 (:init pop-up-create-window-menu :after)0 (&rest ignore)
  (gt:make-label-menu-item 'name "Name:" 'text-menu-item
			   45 5 150 15    5 5 40 15 self :font cptfonti
			   :database :window-value :database-type :ask-window :accessor :name
			   )
  (gt:make-group 'foo '((With-borders No-borders)) '(("Plain" "Borders")) 'gt:selectable-menu-item
		 2 2   5 105 60 15 self :borders (make-border)
		 :database :window-value :database-type :ask-window :accessor :borders? :select-value
		  '(:item-list (t nil)) :font cptfontcb)
  (gt:make-group 'foo '((mouse-edges Full-screen numeric-edges bitmap))
		 '(("Mouse-Edges" "Full-Screen" "Numeric-Edges" "Bitmap")) 'gt:selectable-menu-item
		 2 2   5 25 110 15 self   :borders (make-border)
		 :database :window-value :database-type :ask-window :accessor :edge-spec
		  :font cptfontcb :select-value
		 '(:item-list (:mouse-edges :full-screen :numeric-edges :bitmap)))
  (gt:make-group 'foo '((edges-left edges-width)(edges-top edges-height))
		 '(("Left" "Width") ("Top" "Height")) 'gt:boxed-number-menu-item
		 2 2   120 25 30 15 self   :borders (make-border)
		 :label-width 35 :database-type :ask-window
		 :database :window-value :accessor '(:item-list (:left :width) (:top :height)))
  (gt:make-group 'foo '((exit abort)) '(("Exit" "Abort")) 'gt:command-menu-item 
		 3 5   185. 105.  60. 15. self
		 :select-method '(:item-list (:exit-value :abort-choose))
		 :font gt:cptfontb
		 :documentation '(:item-list ("Exit with this color" "Abort from choosing color")))

  (setq gt:item-list
	(send self :get-items '(name with-borders no-borders mouse-edges full-screen bitmap numeric-edges exit
				     abort)))
  (declare-brothers self nil '(no-borders with-borders))
  (declare-brothers self nil '(mouse-edges full-screen numeric-edges bitmap))
  (declare-children self 'numeric-edges '(edges-left edges-top edges-width edges-height)))

(tv:defwindow-resource 1pop-up-create-window-menu0 ()
  :make-window
  (pop-up-create-window-menu :width 260. :height 165. :blinker-p nil
			:borders 2 :label1 "0     1Create New Window0")
  :reusable-when :deexposed)
(compile-flavor-methods 1pop-up-create-window-menu0 window-spec)
;;;----------------------------------------------------------------------
;;;----------------------------------------------------------------------

(defflavor 1color-display-window-mixin0 ((refreshed-before-p nil)) (tv:window)
  (:settable-instance-variables)
  (:default-init-plist :borders nil :blinker-p nil :label nil
		       :deexposed-typeout-action :permit
		       :save-bits :delayed))

(defflavor 1color-display-window0 ((findable? t) (background-stream))
	   (color-display-window-mixin tv:process-mixin)
  (:settable-instance-variables)
  (:method-combination
   :menu-item-list (:append :MOST-SPECIFIC-LAST))
  (:default-init-plist :borders nil :blinker-p nil :label nil
		       :save-bits :delayed
		       :process '(color-display-window-top-level)))

(defun 1color-display-window-top-level0 (window)
  (dbg:with-default-bug-report-recipient-system ('color)
    (send window ':main-loop)))

(defun 1menu-background-stream0 ()
  (tv:make-window 'dw-background-stream
		  :name "Display window background window"
		  :label "Display window background window"
		  ))

(defmethod 1(:who-line-documentation-string color-display-window)0 ()
  "R: Menu to erase window, load or save an image")

(defvar 1*color-display-window-item-list*
0	'(("Erase this Window" :value :erase-display-window)
	  ("Erase to Color" :value :erase-display-window-to-color)
	  ("Load Image" :value :load-image-to-display-window)
	  ("Save Image" :value :save-image-from-display-window)))

(defmethod 1(:menu-item-list color-display-window)0 ()
  *color-display-window-item-list*)

(defmethod 1(:main-loop color-display-window)0 ()	
  (send self :clear-input)
  (when (or (not background-stream))
    (setq background-stream (menu-background-stream)))
  (let ((si:kbd-standard-intercepted-characters '(#\abort))
	(si:kbd-intercepted-characters '(#\abort))
	(terminal-io background-stream)
	(debug-io background-stream))
    (loop do
      (let ((char (send self ':any-tyi)))
	(cond ((not (listp char))
	       (send self :send-if-handles char))
	      ((and (eq (first char) :mouse-button)
		    (eql (second char) #/mouse-r))
	       (let ((choice (tv:menu-choose (send self :menu-item-list)
				1"0 1Color Display Window"0)))
		 (when choice
		   (send self choice)))))))))

(defmethod 1(:erase-display-window color-display-window)0 ()
  (when (tv:menu-choose '(("Erase Window" :value t)) 1"Confirm"0)
    (send self :clear-window)))

#|| ;this references a system that isn't defined. If this method 
    ;is really necessary, something will have to be remodularized
    ;-ddyer
(defmethod 1(:erase-display-window-to-color color-display-window)0 ()
  (let ((color (color-palette:choose-color)))
    (when color
      (tv:prepare-sheet (self)
	(send self :draw-rectangle (send self :width) (send self :height) 0 0
	      (color:scf (send color :alu-rgb) -1))))))
||#

(defmethod 1(:load-image-to-display-window color-display-window)0 ()
  (color:view-image self nil :menu-icons nil))

(defmethod 1(:save-image-from-display-window color-display-window)0 ()
  (let ((x tv:Mouse-x) (y tv:Mouse-y))
    (unwind-protect
	(progn
	  (tv:mouse-set-sheet tv:main-screen)
	  (beep)
	  (format t "~%~%~%-------------------1Save Window0-----------------------------------~%")
	  (color:save-window self))
      (format t "......................1.0...........................................")
      (tv:mouse-set-sheet (send self :screen))
      (tv:mouse-warp x y))))


(defflavor 1color-display-window-with-borders-and-label0 ()
	   (color-display-window-mixin tv:top-label-mixin)
  (:settable-instance-variables)
  (:default-init-plist :blinker-p nil :borders t :label t))

(defmethod 1(:color-display-window-p color-display-window)0 () findable?)

2;; When killing a window, make sure the implicit deactivate does not
;; generate a save bits array.
0(defmethod1 (:kill color-display-window-mixin :before)0 ()
  (when (eq (send self :save-bits) :delayed)
    (send self :set-save-bits nil)))

2;; Keep screen manager from graying overlaid windows
0(defmethod 1(:screen-manage-deexposed-gray-array color-display-window-mixin)0 ()
  (values nil t))

(defwhopper1 (:refresh color-display-window-mixin)0 (&rest refresh-type)
  (when (or (not refreshed-before-p)
	    (eq :use-old-bits (first refresh-type)))
      (lexpr-continue-whopper  refresh-type))
  (when  (not  refreshed-before-p) (send self :clear-window))
  (setq  refreshed-before-p  t))

(compile-flavor-methods color-display-window color-display-window-mixin)

;;;----------------------------------------------------------------------
;;;----------------------------------------------------------------------

(compile-flavor-methods 1pop-up-menu-flavor0 1 pop-up-slider-window0)


