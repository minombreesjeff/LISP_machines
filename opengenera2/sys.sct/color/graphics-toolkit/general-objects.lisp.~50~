;;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: Gt; Fonts: CPTFONT,CPTFONTB,CPTFONTI; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defmethodD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") (:copy-instance color:standard-color)0 (old)
  (color:duplicate-color old :rgb self))

;;; copy instances, pass on numeric, symbols, strings.
(defun1 copy-spec0 (spec)
  (if (instancep spec)
      (let ((ns (make-instance (typep spec))))
	(send ns :copy-instance spec)
	ns)
      (if (listp spec)
	  (loop for i in spec collect (copy-spec i))
	  spec)))

(defun1 list-get0 (plist indicator)
  (loop for i in plist by #'cddr
	for value in (cdr plist) by #'cddr
	until (or (eq i indicator) (null i))
	finally (return (if (eq i indicator) value))))

(defun 1change-nth-in-list0 (new-item n list)
  (let ((endlist (nthcdr n list)))
    (rplaca endlist new-item)
    list))

(defun1 rotate-list-in-place0 (list &optional backwards-p)
  (if backwards-p
      (loop for i from 0 below (length list)
	    with first = (car list)
	    for next-element = (if (= i (1- (length list))) first (nth (1+ i) list))
	    do
	(rplaca (nthcdr i list) next-element))
      (loop for i from (1- (length list)) downto 0
	    with last = (car (last list))
	    for next-element = (if (zerop i) last (nth (1- i) list))
	    do
	(rplaca (nthcdr i list) next-element)))
  list)

(defun 1insert-item-in-list0 (item n list)
  (append (firstn n list) (list item) (nthcdr n list)))

(defun 1replace-item-in-list0 (item n list)
  (append (firstn n list) (list item) (nthcdr (+ 1 n) list)))


(defflavor1 base-general-object-flavor0 () ()
  (:method-combination
   :dump-forms (:append :MOST-SPECIFIC-LAST)
   :set (:case :MOST-SPECIFIC-LAST)
   :info (:append :MOST-SPECIFIC-LAST)))

(defun1 make-array-from-list0 (list)
  (let* ((s (length list))
	 (array (make-array s :type 'art-q)))
    (loop for i below s do (setf (aref array i) (nth i list)))
    array))

(defun 1dump-list0 (list)
  (cond ((<= (length list) 200.)
	 `(list ,@list))
	(t 
	 `(append
	    ,(cons 'list
		  (loop for i below 200
			for j in list
			collect j))
	    ,(dump-list (nthcdr 200 list))))))

(defmethod1 (:fasd-form base-general-object-flavor)0 ()
  (send self 1:fasd-form-internal0))

;; this gets shadowed by objects who want to decide what
;; external objects should get saved.
(defmethod 1(:external-objects-to-save base-general-object-flavor)0 ()
  (send self :external-objects))
(defmethod1 (:fasd-form-internal base-general-object-flavor)0 ()
  (let ((info (send self :info))
	(external-objects (send self :external-objects))
	(external-objects-to-save (send self :external-objects-to-save)))
    (loop for variable in info by #'cddr
	  for type in (cdr info) by #'cddr
	  for value = (send self variable)
	  append
	    (cond ((not (member variable external-objects))
		   (list variable `(quote ,value)))
		  ((member variable external-objects-to-save)
		   (send (send self variable) :external-object-reference))
		  (t (list variable nil)))
	    into ans
	  finally (return `(make-instance ',(typep self) ,@ans)))))

(defun1 uneval0 (thing)				
  (cond ((typep thing 1'base-general-object-flavor0)
	 (let ((info (send thing :info)))
	   (loop for variable in info by #'cddr
		 for type in (cdr info) by #'cddr
		 append (list variable
			      (cond((eq type 1:color-object0)
				    `(make-rgb-color ,(send (send thing variable) :red)
						     ,(send (send thing variable) :green)
						     ,(send (send thing variable) :blue)))
				   ((eq type 1:instance0)	;instance
				    (let ((val (send thing variable)))
				      (cond ((instancep val)
					     (uneval (send thing variable)))
					    (t val))))
				   ((eq type :1array0)
				    (if (send thing variable)
					`(make-array-from-list
					   (list ,@(zl:listarray (send thing variable))))))
				   ((eq type 1:bs-font0)
				    (when (send thing variable)
				      `(find-bs-font-from-id
					 ,(send (send (send thing variable) :header-info)
						:bs-font-id))))
				   ((eq type :1dont-dump0) nil)
				   ((eq type 1:value0-1symbol0)
				    (when (send thing variable)
				      `',(send thing variable)))
				   ((memq type '(1:color-list0 1:list-of-instances0 1:float-list
0							     1:object-list0))
				    (when (send thing variable)
				      (loop for i in (send thing variable)
					    collect (uneval i) into ans
					    finally (return (dump-list ans)))))
				   ;; 1if we have a list in a symbol slot uneval it anyway
0				   ((listp (send thing variable))
				    (uneval (send thing variable)))
				   (t (send thing variable))
				   )) into ans
		 finally (return `(make-instance ',(typep thing) ,@ans)))))
	((listp thing)
	 (loop for i in thing
	       collect (uneval i) into ans
	       finally (return `(list ,@ans))))
	(t
	 (cond ((typep thing '1color:standard-color0)
		`(make-rgb-color ,(send thing :red)
				 ,(send thing :green)
				 ,(send thing :blue)))
	       (t thing)))))


;; variable is really a variable plist like (size 0 :type :integer :min 0 :max 100)
;; 1from, to, ratio0 are arguments to the methods that these get inserted in.
(defun 1interp-expander0 (variable)
  (let ((key-var (intern (string (car variable)) 'keyword))
	(type (if (list-get variable :type)
		  (list-get variable :type)
		  (typep (second variable)))))
    (cond ((memq type '(1:fixnum :integer0))
	   `(setq ,(first variable)
		  (round (linear-interpolation ratio (send from ,key-var)
					       (send to ,key-var)))))
	  ((memq type '(1:single-float :float0))
	   `(setq ,(first variable)
		  (linear-interpolation ratio (float (send from ,key-var)) (float (send to ,key-var)))))
	  ((memq type1 '(:instance))
0	   `(when (and ,(first variable) (send from ,key-var) (send to ,key-var))
	      (send (find-indirect-spec ,(first variable)) :interpolate-values
		    (find-indirect-spec (send from ,key-var))
		    (find-indirect-spec (send to ,key-var)) ratio)))
	  ((eq type 1:color-object0)
	   `(color:interpolate-colors (send from ,key-var) (send to ,key-var)
				      :rgb ,(first variable) ratio))	
	  ((eq type 1:float-list0)
	   `(loop for element in ,(first variable)
		  with pos = ,(first variable)
		  for pfrom in (send from ,key-var)
		  for pto in (send to ,key-var)
		  do
	      (rplaca pos (linear-interpolation ratio (float pfrom) (float pto)))
	      (setq pos (cdr pos))
	      ))
	  ((eq type 1:integer-list0)
	   `(loop for element in ,(first variable)
		  with pos = ,(first variable)
		  for pfrom in (send from ,key-var)
		  for pto in (send to ,key-var)
		  do
	      (rplaca pos (round (linear-interpolation ratio pfrom pto)))
	      (setq pos (cdr pos))
	      ))
	  ((eq type 1:color-list0)
	   `(loop for i in ,(first variable)
		  for fi in (send from ,key-var)
		  for ti in (send to ,key-var)
		  do
	      (color:interpolate-colors fi ti :rgb i ratio)))
	  ((or (eq type 1:list-of-instances0) (eq type 1:object-list0))
	   `(loop for i in ,(first variable)
		  for fi in (send from ,key-var)
		  for ti in (send to ,key-var)
		  do
	      (when (and i fi ti) (send i :interpolate-values fi ti ratio))))
	  )))

(defun 1case-set-expander0 (variables mixin-name)
  (loop for variable in variables
	collect
	  (let ((key-var (intern (string (car variable)) 'keyword)))
	    `(defmethod (:set ,mixin-name #m:case ,key-var) (value)
	       (setq ,(car variable) value)))))

;; only does 1d arrays
(defun 1copy-array0 (array)
  (let ((new (make-array (array-length array) :type (array-type array))))
    (loop for i below (array-length array)
	  do
      (setf (aref new i) (copy-spec (aref array i))))
    new))

(defun 1copy-instance-list0 (list)
  (loop for i in list
	collect (copy-spec i)))


(defun 1update-instance-list0 (dest-list source-list)
  (loop for s in source-list
	for n from 0
	collect (cond ((null s) nil)
		      ((not (instancep s)) s)
		      ((eq (typep s) (typep (nth n dest-list)))
		       (send (nth n dest-list) :copy-instance s)
		       (nth n dest-list))
		      ((copy-spec s)))))

(defun 1copy-expander0 (variable)
  (let ((key-var (intern (string (car variable)) 'keyword))
	(type (if (list-get variable :type)
		  (list-get variable :type)
		  (typep (second variable))))
	(dont-copy (list-get variable :dont-copy)))
    (cond (dont-copy nil)
	  ((or (memq type '(:fixnum :integer))
	       (memq type '(:single-float :float))
	       (eq type :external-object)
	       (eq type :string)
	       (eq type :value-symbol)
	       (eq type :symbol)
	       (null type))
	   `(setq ,(first variable) (send instance ,key-var)))
	  1;; not right for color-list
0	  ((memq type 1'(:float-list :integer-list :symbol-list)0)
	   `(setq ,(first variable) (copylist (send instance ,key-var))))
	  ((eq type :color-list)
	   `(setq ,(first variable) (copy-instance-list (send instance ,key-var))))
	  ((eq type 1:instance0)
	   `(cond ((and (instancep ,(first variable)) (instancep (send instance ,key-var)))
		   (send ,(first variable) :copy-instance
			 (send instance ,key-var)))
		  ((instancep (send instance ,key-var))
		   (setq ,(first variable)
			 (copy-spec (if (instancep (send instance ,key-var))
					(send instance ,key-var)
					instance))))
		  (t (setq ,(first variable) (send instance ,key-var)))
		  ))
	  ((eq type  1:indirect-instance0)
	   `(if ,(first variable)
		(send ,(first variable) :copy-instance  (send instance ,key-var))
		(setq ,(first variable) (copy-spec (send instance ,key-var)))))
	  ((or (eq type 1:list-of-instances0) (eq type 1:object-list0))
	   `(setq ,(first variable)
		  (update-instance-list ,(first variable) (send instance ,key-var))))
	  ((eq type 1:color-object0)
	   `(send ,(first variable) :set-rgb (send (send instance ,key-var) :red)
		  (send (send instance ,key-var) :green)
		  (send (send instance ,key-var) :blue)))
	  ((eq type 1:array0)
	   `(setq ,(first variable) (copy-array (send instance ,key-var))))
	  )))


(defun 1info-expander0 (variable)
  (let ((key-var (intern (string (car variable)) 'keyword))
	(type (if (list-get variable :type)
		  (list-get variable :type)
		  (typep (second variable)))))
    (list key-var type)))

;; legal types
;; 1:fixnum :integer :single-float :symbol :instance 0(= 1:list-of-instances0 1:object-list0 )
;; 1:color-object0 1:directory-name0  1:external-object
0(defmacro1 defobject0 (mixin-name var-list component-flavors &rest defflavor-options)
  (let* ((interp-list
	   (loop for var in var-list
		 collect (interp-expander var) into ans
		 finally (return (cons 'progn ans))))
	 (copy-list
	   (loop for var in var-list
		 collect (copy-expander var) into ans
		 finally (return (cons 'progn (append ans '(instance))))))
	 (info-list
	   (loop for var in var-list
		 append (info-expander var) into ans
		 finally (return (cons 'list ans))))
	 (external-objects (assoc :external-objects defflavor-options))
	 (project-type (assoc :project-type defflavor-options))
	 (class-library (assoc :class-library defflavor-options)))
    (setq defflavor-options (remove class-library
				    (remove project-type
					    (remove external-objects defflavor-options))))
    `(progn
       'compile
       (defflavor ,mixin-name
	       ,(loop for var in var-list
		      collect (list (first var) (second var)))
	       ,component-flavors
	 ,@defflavor-options)
       (defmethod (:external-objects ,mixin-name) () ,(cons 'list (cdr external-objects)))
       (defmethod (:project-type ,mixin-name) () ,(cadr project-type))
       (defmethod (:class-library ,mixin-name) ()
	 ,(if (cdr class-library)
	     (cons 'list (cdr class-library))
	     ''*all-objects*
	      ))
       (defmethod (:info ,mixin-name) ()
	 ,info-list)
       ,@(case-set-expander var-list mixin-name)
       (defmethod (:interpolate-values ,mixin-name :after) (from to ratio)
	 from to ratio				;in case there are no instance variables
	 ,interp-list)
       (defmethod (:copy-instance ,mixin-name :after) (&optional instance)
	 (when (not instance)
	   (setq instance (make-instance (typep self))))
	 ,copy-list))))
