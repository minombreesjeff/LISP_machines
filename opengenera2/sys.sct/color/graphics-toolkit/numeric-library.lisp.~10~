;;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: (Gt); Fonts: CPTFONT,CPTFONTB,CPTFONTI; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;------------------------------------------------------------------------------
; Calculates a value by linearly extra(or inter)polating between two "extreme"
; values by a specified weighting factor which is expressed as a flonum.  
; Values of the weight between 0 and 1 correspond to the interval between the
; extreme values.

;------------------------------------------------------------------------------
; Predicate for a number between 0 and 1.


(defun  number-between-0-and-1-p  (n)
  (and  (numberp  n)  (>=  n 0)  (<=  n 1)))


;------------------------------------------------------------------------------
; Cause restartable error if specified arg is not a number between 0 and 1.


(defmacro  check-arg-0-1  (arg)
  `(check-arg  ,arg
	       number-between-0-and-1-p
	       "a number between 0 and 1"))




(defsubst  linear-extrapolation  (weight
				  value-for-weight-of-0  value-for-weight-of-1)
  (let* ((wt  (float weight))
	 (v0  value-for-weight-of-0)
	 (v1  value-for-weight-of-1)
	 (li  (+ (* wt (- v1 v0)) v0)))
    
    (if  (fixp v0)  (fixr li)  li)))


; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Calculates a value by linearly interpolating between two "extreme" values by
; a specified weighting factor which is expressed as a flonum between 0 and 1


(defsubst  linear-interpolation  (weight
				  value-for-weight-of-0  value-for-weight-of-1)
;  (check-arg-0-1  weight)
  (linear-extrapolation  weight  value-for-weight-of-0  value-for-weight-of-1))


; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Same idea, but express fraction as ratio of two integers:
; weight = weight-0 / weight-1

(defsubst  linear-interp-by-ratio  (weight-0  weight-1
				    value-for-weight-of-0  value-for-weight-of-1)
  
  (let* ((w0  weight-0)
	 (w1  weight-1)
	 (v0  value-for-weight-of-0)
	 (v1  value-for-weight-of-1)
	 (li  (+ (// (* (- v1 v0) w0) w1) v0)))
    
    (if  (fixp v0)  (fixr li)  li)))

; -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

(deff mod-lurp 'modular-linear-interpolation)

(defun modular-linear-interpolation (weight value-0 value-1 modulus)
  (check-arg-0-1  weight)
  (if (< (abs (- value-0 value-1))
	 (// modulus 2))
      (linear-interpolation weight value-0 value-1)
      (mod (if (< value-0 value-1)
	       (linear-interpolation weight (+ value-0 modulus) value-1)
	       (linear-interpolation weight value-0 (+ value-1 modulus)))
	   modulus)))


;------------------------------------------------------------------------------
;
; Ensures that a value lies between two bounds, by "clipping" to the bounding
; values if necessary.


(defsubst  force-into-range  (number  lower-bound  upper-bound)
  "Ensures that a number lies between a lower and upper bound."
  (min  (max  number  lower-bound)  upper-bound))

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")force-into-possible-range0 (number min max)
  (when min (setq number (max min number)))
  (when max (setq number (min max number)))
  number)

(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; number is between 0.0 and 1.0.  Force it between min and max.
0(defun 1denormalize0 (number min max)
  (+ min (* (- max min) number)))

(defun 1legal-color?0 (color &optional (standard :ntsc))
  (cond ((eq standard :ntsc)
	 (ntsc-legal-color? color))
	((eq standard :601)
	 (601-legal-color? color))
	((eq standard :pal)
	 (pal-legal-color? color))
	(t t)))

2;; from Dave Stroud at SLTD
0(defun 1pal-legal-color?0 (color)
  (multiple-value-bind (r g b)
      (send color :rgb)
    (let* ((y (+ (* r .299) (* g .587) (* b .114)))
	   (u (+ (* r -.1686) (* g -.3311) (* b .4997)))
	   (v (+ (* r .4998) (* g -.4185) (* b -.0813)))
	   (saturation (sqrt (+ (* u u) (* v v)))))
      (and (< (+ y saturation) 1.334)
	   (> (- y saturation) -.339)))))

(defun1 ntsc-legal-color?0 (color)
  (multiple-value-bind (r g b)
      (send color :rgb)
    (let* ((i (+ (* r .6) (* g -.28) (* b -.32)))
	   (q (+ (* r .21) (* g -.52) (* b .31)))
	   (c (sqrt (+ (* i i) (* q q)))))
      (< (* 2 c) 1.0))))

(defun1 601-legal-color?0 (color)
  (multiple-value-bind (r g b)
      (send color :rgb)
    (and (>= (round (* r 255)) 16) (>= (round (* g 255)) 16) (>= (round (* b 255)) 16)
	 (<= (round (* r 255)) 235) (<= (round (* g 255)) 235) (<= (round (* b 255)) 235))))

;;; adds four digit postfix to string.  (numericate "foo" 20) => "foo-0020"
(defun1 numericate 0(value number)
  (let ((padding ""))
    (if (< number 1000.) (setq padding "0"))
    (if (< number 100.) (setq padding "00"))
    (if (< number 10.) (setq padding "000"))
    (format nil "~a-~a~a" value padding (min 9999. (max 0 number)))))

2;; returns name string, frame number and whether or not this string has a frame number.
0(defun 1parse-frame-string0 (string)
  (let* ((length (string-length string))
	 (last-4 (substring string (max 0 (- length 4)) length))
	 (first-but-5 (substring string 0 (max 0 (- length 5))))
	 (number (parse-number last-4)))
    (if (numberp number)
	(values first-but-5 number t)
	(values string 0 nil))))


(defun1 increment-frame-string0 (string increment &optional (null-offset 0))
  (multiple-value-bind (string-name string-frame-number numbered-string?)
      (parse-frame-string string)

    (when (not numbered-string?)
      (setq increment (+ null-offset increment)))

    (let* ((padding "")
	   (frame (+ increment string-frame-number)))
      (if (< frame 1000.) (setq padding "0"))
      (if (< frame 100.) (setq padding "00"))
      (if (< frame 10.) (setq padding "000"))
      (cond
	((< frame 0)
	 (setq string string-name))
	(t
	 (setq string
	       (string-append string-name "-" padding
			      (format nil "~a"
				      (min 9999. (max 0 frame)))))))
      string)))

(defmacro 1combine-rgb0 (r g b)
  `(dpb ,b #o2010 (dpb ,g #o1010 ,r)))

(defmacro 1combine-rgba0 (r g b alpha)
  `(%logdpb ,alpha #o3010 (dpb ,b #o2010 (dpb ,g #o1010 ,r))))

(defun 1hardware-rgba0 (window color-object &optional (gridify nil))
  window
  (multiple-value-bind (r g b)
      (send color-object :rgb)
    (let ((answer (combine-rgba (round (* r 255.)) (round (* g 255.)) (round (* b 255.))  (round (* r 255.)))))
      (if gridify
	  (logand answer *grid-plane-mask*)
	  answer))))

(defun 1hardware-rgb0 (window color-object &optional (gridify nil))
  window
  (multiple-value-bind (r g b)
      (send color-object :rgb)
    (let ((answer (combine-rgb (round (* r 255.)) (round (* g 255.)) (round (* b 255.)))))
      (if gridify
	  (logand answer *grid-plane-mask*)
	  answer))))
