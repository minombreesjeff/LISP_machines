;;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: Gt; Fonts: CPTFONT,CPTFONTB,CPTFONTI; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;; **** The following is restored from version 46 of
;;; sys:color;graphics-toolkit;general-objects.lisp, fixing an apparent
;;; spazz wherein all the rest of the buffer was deleted after
;;; DEFOBJECT, instead of the part starting with GENERAL-DATABASE

0(defvar 1*indirect-spec-list*0 nil)

(defun1 find0-1indirect0-1spec0 (key)
  (if (instancep key)
      key
      (loop for i in *indirect-spec-list*
	    until (string-equal key (send i :unique-id))
	    finally (return i))))

;;-------------------------------------------------------------------------------------
;;-------------------------------------------------------------------------------------

(defobject 1external-object-tag0 ((project-name nil :dont-copy t)
				(name nil :dont-copy t)
				(type nil)) (base-general-object-flavor)
	   (:settable-instance-variables))

(defun 1make-external-object-tag0 (project-name name type &optional object)
  (or (find-object (list project-name name type))
      (let ((tag (make-instance 'external-object-tag :project-name project-name
				:name name :type type)))
	(register-object tag (list project-name name type))
	(when object 
	  (register-object object tag))
	tag
	)))

;;;------------------------------------------------------------------------
(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; this mixin is required for objects that can save themselves to their own 
;; files
0(defobject 1external-object0 ((modified-p nil) (project nil :dont-copy t)
			    (name nil :dont-copy t) (saved-p nil)) (1base-general-object-flavor0)
	   (:settable-instance-variables))


(defmethod1 (:init external-object :after)0 (&rest ignore)
  (if project
      (setq project (find-project project)))
  (when (and project name)
    (register-object self (make-external-object-tag (send project :project-name) name
						    (send self :project-type) nil))))

(defmethod 1(:external-object-p external-object)0 () t)

(defvar 1*top-level-object-to-save*0 nil)
(defmethod1 (:fasd-form external-object)0 (&optional (top-level?))
  (if (or top-level? (eq *top-level-object-to-save* self))
      (send self :fasd-form-internal)
2      ;; I'm a sub-object, so just provide a tag
0      `(make-external-object-tag ,(send project :project-name) ,name ,(send self :project-type) nil)))


(defmethod 1(:external-objects base-general-object-flavor)0 () nil)

2;; this makes sure that all sub-objects have their projects defined so
;; that they can provide a reference tag when this object itself is saved.
0(defmethod 1(prepare-to-save base-general-object-flavor)0 (default-project)
  (loop for i in (send self :info) by #'cddr
	for ob = (send self i)
	do
    (cond 
	  ((and (instancep ob) (typep ob 'base-general-object-flavor))
	   (prepare-to-save (send self i) default-project))
	  ((listp ob)
	   (loop for j in ob
		 do
	     (when (and (instancep j) (typep j 'base-general-object-flavor))
	       (prepare-to-save j default-project))))
	  )))

2;; Give this object a project and a name
0(defmethod 1(prepare-to-save external-object0 1:before)0 (default-project)
  (when (not project)
    (send self :set-project default-project))
  (when (not name)
    (setq name (string  (make-unique-id "Object")))))

(defmethod 1(save-object external-object)0 (&optional (default-project (find-project project))
						    (save-referenced-objects? t))
  (let ((old-object *top-level-object-to-save*))
    (setq *top-level-object-to-save* self)

2    ;; Traverse heirarchy, resolving projects for all referenced external objects.
    ;; after this executes, entire hierarchy has projects defined.
0    (prepare-to-save self default-project)

2    ;; save this object
0    (save-object-internal self)

2    ;; save all referenced objects
0    (when save-referenced-objects?
      (save-referenced-objects self))

    (setq *top-level-object-to-save* old-object)))

2;; Save-object can only be called on EXTERNAL0-2OBJECTs.  Non EXTERNAL0-2OBJECTs
;; by definition cannot be saved to their own file.
0(defmethod 1(save-object-internal external-object)0 ()
2  ;; Save this object itself
0  (let* ((project-directory (resolve-project project (send self :project-type)))
	 (file (send project-directory :new-name (send self :name))))
2    ;; only save to file when it has been modified or has yet to be saved.
0    (when t ;(or (not (send self :saved-p)) (send self :modified-p))
      (sys:dump-forms-to-file file
			      (list    `(send ,(send self :class-library) :add-object-at-end ,self))
			      '(:package "gt"))
      (setq modified-p nil saved-p t project project))
    ))

(defun 1external-object-p0 (object)
  (and (instancep object)
       (send object :send-if-handles :external-object-p)))
      

(defmethod 1(save-referenced-objects base-general-object-flavor)0 ()
  (loop for i in (send self :info) by #'cddr
	with externals = (send self :external-objects-to-save)
	for ob = (send self i)
	do
    (cond ((member i externals)
	   (save-object ob))
	  ((and (instancep ob) (typep ob 'base-general-object-flavor))
	   (save-referenced-objects ob))
	  ((listp ob)
	   (loop for j in ob
		 do
	     (when (and (instancep j) (typep j 'base-general-object-flavor))
	       (save-referenced-objects j))))
	  )))

;;-------------------------------------------------------------------------------------
(defun 1resolve-object-tag0 (object-tag)
  (let ((dir (get-sub-directory (find-project-directory (send object-tag :project-name))
				(format nil "~a" (send object-tag :type)))))
    (setq dir (send dir :new-name (send object-tag :name)))
    (setq dir (send dir :new-canonical-type :ibin))))

(defun 1load-object-file0 (project-name name type)
  (load-object (make-external-object-tag project-name name type nil)))

(defmethod 1(load-object external-object-tag)0 ()
  (load (1resolve-object-tag0 self) nil nil nil t)
  (let ((ob (find-object self)))
    (load-referenced-objects ob)))

(defmethod 1(load-referenced-objects base-general-object-flavor)0 ()
  (loop for i in (send self :info) by #'cddr
	for ob = (send self i)
	do
    (cond ((typep ob 'external-object-tag)
	   (load-object ob)
	   (if (find-object ob)
	       (send self :set i (find-object ob))
	       (format t "Can't find object ~a" ob)))
	  ((and (instancep ob) (typep ob 'base-general-object-flavor))
	   (load-referenced-objects ob))
	  ((listp ob)
	   (loop for j in ob
		 do
	     (when (and (instancep j) (typep j 'base-general-object-flavor))
	       (load-referenced-objects j))))
	  )))

1;;; **** End of restored code


(defobject general-database0 ((database-name "Unnamed")
			     (object-type nil :type :value-symbol)
			     (current-object 0))
  (external-object)
  (:init-keywords :current-page :page-size :database-type :directory
		  :unique-id)	;2kept for compatibility so saved db's can load
0  (:settable-instance-variables))

(defvar *id-counter* 0)

;;; A crock, probably, but the best I could think of on short notice.  I will
;;; pass this on to the mail and database savants for comment.  -- joseph 19dec87
;  (let* ((complete-raw-message-id (zwei:generate-standard-message-id))
;	 (first-part (cl:subseq complete-raw-message-id
;				1 (cl:position #/@ complete-raw-message-id))))
;    (cl:substitute #/- #/. first-part)))

(defmethod1 (:name general-database)0 () (send self :database-name))
(defmethod1 (:set-name general-database)0 (new) (send self :set-database-name new))

;;;-----------------------------------------------------------------------------
;;;-----------------------------------------------------------------------------
(defobject 1list-database-operations0 ((modified-p nil)) (base-general-object-flavor))

1(defobject list-database0 ((database-list nil :type :list-of-instances))
  (general-database list-database-operations)
  (:settable-instance-variables))


(defmethod 1(:create-new-object 0list-database-operations1)0 ()
  (make-instance (send self :object-type)))

(defmethod (1:get-nth-object0 list-database-operations) (n)  (nth n (send self :database-list)))

(defmethod (1:add-item 0list-database-operations) (new-item)
  (setq modified-p t)
  (send self :set-database-list (cons new-item (send self :database-list))))

(defmethod (1:add-object-at-end0 list-database-operations) (new-item)
  (setq modified-p t)
  (let ((dbl (send self :database-list)))
    (if (null dbl)
	(send self :set-database-list (list new-item))
	(rplacd (last dbl) (list new-item)))))

(defmethod (1:insert-object-at-n0 list-database-operations) (new-object n)
  (setq modified-p t)
  (send self :insure-object-at-n n)
  (setf (nth n (send self :database-list)) new-object))

(defmethod1 (:insure-object-at-n list-database0-operations1)0 (n)
  (loop until (> (length (send self :database-list)) n)
	do
    (send self :add-object-at-end nil))) ; (make-instance object-type)

(defmethod (1:change-object-at-n0 list-database-operations) (new-object n)
  (setq modified-p t)
  (send self :set-database-list
	(replace-item-in-list new-object n (send self :database-list))))

(defmethod 1(:delete-object-at-n list-database0-operations1)0 (n)
  (setq modified-p t)
  (send self :set-database-list
	(loop for i in (send self :database-list)
	      for count from 0
	      append (if ( n count) (list i) nil))))

(defmethod 1(:insert-object-before-n list-database0-operations1)0 (object n)
  (setq modified-p t)
  (if (>= n (length (send self :database-list)))
      (send self :set-database-list (append (send self :database-list) (list object)))
      (send self :set-database-list
	    (loop for i in (send self :database-list)
		  for count from 0
		  append (if ( n count) (list i) (list object i))))))

(defmethod (1:remove-object0 list-database-operations) (object)
  (setq modified-p t)
  (send self :set-database-list (remove object (send self :database-list))))

(defmethod (1:shift-list0 list-database-operations) (&optional (direction :left))
  (setq modified-p t)
  (rotate-list-in-place (send self :database-list) (eq direction :left)))

2;; insert this into general objects
0(defmethod 1(:sort-database list-database0-operations1)0 (predicate)
  (setq modified-p t)
  (send self :set-database-list (sort (send self :database-list) predicate)))

(defmethod 1(:add-item-in-sort-position list-database-operations)0 (new-item predicate)
  (setq modified-p t)
  (let ((dbl (send self :database-list)))
    (if (null dbl)
	(send self :set-database-list (list new-item))
	(send self :set-database-list (cons new-item dbl))
	(send self :sort-database predicate))))

;      (loop for rest-items on database-list
;	    for current-item in (cdr database-list)
;	    for insert-now = (apply predicate (list new-item current-item))
;	    when (or insert-now (null (cdr rest-items)))
;	      do (rplacd rest-items (cons new-item (cdr rest-items)))
;	    until insert-now)))


;;;------------------------------------------------------------
;;;------------------------------------------------------------

(defobject 1row-database-operations0 ((modified-p nil)) (base-general-object-flavor))

(defmethod 1(:reverse-row0 row-database-operations) (row)
  (setq modified-p t)
  (change-nth-in-list 
    (reverse (nth row (send self :database-list)))
    row
    (send self :database-list)))

(defmethod 1(:shift-row0 row-database-operations) (row amount)
  (setq modified-p t)
  (loop repeat amount
	do
    (let ((list (nth row (send self :database-list))))
      (change-nth-in-list
	(rotate-list-in-place list)
	(send self :translated-row row)
	(send self :database-list)))))

(defmethod 1(:alter-row 0row-database-operations) (accessor change row &optional (min 0) (max 1))
  (setq modified-p t)
  (loop for value in (nth row (send self :database-list))
	for vvalue = (if value (send value accessor))
	for nvalue = (if value (force-into-range (+ vvalue change) min max))
	do
	(when value (send value :set-component accessor nvalue))))


(defmethod (1:get-nth-row0 row-database-operations) (n) (nth n (send self :database-list)))

(defmethod (1:insert-new-row0 row-database-operations) (new-row n)
  (setq modified-p t)
  (send self :set-database-list (insert-item-in-list new-row n (send self :database-list))))

(defmethod (1:change-object-at-n0 row-database1-0operations) (new-object n)
  (setq modified-p t)
  (send self :set-database-list (replace-item-in-list new-object n (send self :database-list))))

(defmethod (1:get-nth-object0 row-database-operations) (n)
  (setq modified-p t)
  (let ((row (nth (// n (send self :row-length)) (send self :database-list))))
    (nth (mod n (send self :row-length)) row)))

(defmethod (1:get-row-for-object0 row-database-operations) (n)
  (setq modified-p t)
  (let ((row (nth (// n (send self :row-length)) (send self :database-list))))
    row))

2;; eg color palette
1(defobject row-database0 ((database-list nil :type :object-list) 
			 (row-length 12))
  (general-database row-database-operations)
  (:init-keywords :row-offset)
  (:settable-instance-variables))

;;;------------------------------------------------------------
;;;------------------------------------------------------------

1(defobject multi-database0 ((current-database nil :type :instance)
			   (all-databases nil :type :list-of-any)) (general-database))

(defmethod1 (:remove-object multi-database)0 (object)
  (setq all-databases (remove object all-databases)))

(defvar 1*default-file-name*0 "local:>foo")

(defvar 1*unique-id-hash-table*0 (cl:make-hash-table :size 2000.))

(defun 1make-unique-id0 (prefix)
  (incf *id-counter*)
  (intern (format nil 
		  "~a-~a-~a-~a" prefix (cl:get-universal-time)
		  (time:fixnum-microsecond-time) *id-counter*) 'gt))

(defun 1register-object0 (object id)
  (setf (cl:gethash id 1*unique-id-hash-table*0) object))

(defun 1find-object0 (uid)
  (cl:gethash uid 1*unique-id-hash-table*0))


;;-------------------------------------------------------------------------------------

(defflavor 1variable-mixin0 () ())

(defflavor 1variable0 ((symbol)) (variable-mixin)
  (:settable-instance-variables))
(defun 1make-variable0 (symbol)
  (make-instance 'variable :symbol symbol))
(defmethod 1(:set-value variable)0 (new)
  (set symbol new))
(defmethod 1(:get-value variable)0 ()
  (eval symbol))

;;-------------------------------------------------------------------------------------

(defflavor 1library-variable0 ((library-symbol) (index)) (variable)
  (:settable-instance-variables))
(defun 1make-library-variable0 (library-symbol index)
  (make-instance 'library-variable :library-symbol library-symbol :index index))
(defmethod 1(:set-value library-variable)0 (new)
  (send (eval library-symbol) :change-object-at-n new index))
(defmethod 1(:get-value library-variable)0 ()
  (send (eval library-symbol) :get-nth-object index))

;;-------------------------------------------------------------------------------------

(defflavor 1slot-variable0 ((symbol) (accessor) (modifier)) (variable)
  (:settable-instance-variables))
(defun 1make-slot-variable0 (symbol accessor &optional modifier)
  (make-instance 'slot-variable :symbol symbol :accessor accessor
		 :modifier modifier))
(defmethod 1(:set-value slot-variable)0 (new)
  (if modifier
      (send (eval symbol) modifier new)
      (send (eval symbol) :set accessor new)))
(defmethod 1(:get-value slot-variable)0 ()
  (send (eval symbol) accessor))
(defmethod 1(get-container slot-variable)0 ()
  (eval symbol))
;;-------------------------------------------------------------------------------------

(defflavor 1library-slot-variable0 ((index)) (slot-variable)
  (:settable-instance-variables))

(defun 1make-library-slot-variable0 (symbol index accessor &optional modifier)
  (make-instance 'library-slot-variable :symbol symbol :index index :accessor accessor
		 :modifier modifier))
(defmethod 1(:set-value library-slot-variable)0 (new)
  (if modifier
      (send (send (eval symbol) :get-nth-object index) modifier new)
      (send (send (eval symbol) :get-nth-object index) :set accessor new)))
(defmethod 1(:get-value library-slot-variable)0 ()
  (let ((ob (send (eval symbol) :get-nth-object index)))
    (when ob
      (send ob accessor))))
(defmethod 1(get-container library-slot-variable)0 ()
  (send (eval symbol) :get-nth-object index))


;;-------------------------------------------------------------------------------------

(defflavor 12slot-variable0 ((preliminary-accessor)) (slot-variable)
  (:settable-instance-variables))
(defun 1make-2slot-variable0 (symbol preliminary-accessor accessor &optional modifier)
  (make-instance '2slot-variable :preliminary-accessor preliminary-accessor
		 :symbol symbol :accessor accessor :modifier modifier))
(defmethod 1(:set-value 2slot-variable)0 (new)
  (if modifier
      (send (send (eval symbol) preliminary-accessor) modifier new)
      (send (send (eval symbol) preliminary-accessor) :set accessor new)))
(defmethod 1(:get-value 2slot-variable)0 ()
  (send (send (eval symbol) preliminary-accessor) accessor))
(defmethod 1(get-container 2slot-variable)0 ()
  (send (eval symbol) preliminary-accessor))
;;-------------------------------------------------------------------------------------

(defflavor 1negation-variable0 ((sub-variable)) (variable-mixin)
  (:settable-instance-variables))
(defun 1make-negation-variable0 (sub-variable)
  (make-instance 'negation-variable :sub-variable sub-variable))
(defmethod 1(:set-value negation-variable)0 (new)
  (send sub-variable :set-value (not new)))
(defmethod 1(:get-value negation-variable)0 ()
  (not (send sub-variable :get-value)))


(compile-flavor-methods variable 2slot-variable slot-variable negation-variable)

;;-------------------------------------------------------------------------------------

(defvar 1*all-objects*0 (make-instance 'list-database))
(defmethod 1(class-library base-general-object-flavor)0 ()
  *all-objects*)



1;;; Tantalizing remmant in an older version of
;;; sys:color;graphics-toolkit;general-objects that doesn't seem to correspond
;;; to another source.  -- Dodds 10/16/92

0;;-------------------------------------------------------------------------------------

;;-------------------------------------------------------------------------------------

2;; projects are objects to differentiate them from directories.
0(defobject 1project0 ((project-name)) (base-general-object-flavor)
	   (:settable-instance-variables))

(defmethod 1(:fasd-form project)0 ()
  `(make-project ',project-name))

(defun 1make-project0 (name)
  (if (find-project name)
      (find-project name)
      (make-instance 'project :project-name name)))

(defmethod 1(:string-for-printing project)0 () project-name)

2;; this list should really be added to by the various things that use it.
0(defvar 1*project-types*0 '(:image :segment :brush :sequence :palette :pasteup))

(defmethod  (1:print-self0 project)  (stream &rest ignore)
  (si:printing-random-object  (self stream :no-pointer)
    (format stream "Project: ~a" (send self :project-name))))

(defvar 1*projects*0 (make-instance 'list-database))
(defvar 1*default-project*0 nil)
(defvar 1*default-project-directory*0 nil)

(defconst 1*project-def-file-name*0 "project-defintions")

(defun 1make-default-project-for-site0 ()
  (when (not (find-project "Default-project")) 
    (create-project-directories (send (fs:parse-pathname "graphics:default-project;") :translated-pathname))
1    0(consider-new-project (make-project "Default-project")
			  (send (fs:parse-pathname "graphics:default-project;") :translated-pathname) nil)))

(defun 1write-project-file0 (&optional homedir)
  (with-open-file (stream (send (send (or homedir (fs:user-homedir))
				      :new-name *project-def-file-name*)
				:new-canonical-type :lisp)
			  :direction :output)
    (print
      (loop for i in (send *projects* :database-list)
	    collect
	      (list (first i) (send (second i) :string-for-printing)))
      stream
      )))

(defun 1read-project-file0 (&optional homedir (merge-p t))
  (with-open-file (s (send (send (or homedir (fs:user-homedir))
				 :new-name *project-def-file-name*)
			   :new-canonical-type :lisp)
		     :direction :input)
    (let ((plist (read s)))
      (setq plist
	    (loop for p in plist
		  collect (list (first p) (fs:parse-pathname (second p)) (make-project (first p)))))
      (if merge-p
	  (send *projects* :set-database-list (append plist (send *projects* :database-list)))
	  (send *projects* :set-database-list plist))
      )))

(defun 1find-project-directory0 (name)
  (second (assoc name (send *projects* :database-list))))

(defun 1find-project0 (project-or-name)
  (if (instancep project-or-name)
      project-or-name
      (third (assoc project-or-name (send *projects* :database-list)))))

(defun 1get-sub-directory0 (dir sub-directory)
  (setq dir (fs:parse-pathname dir))
  (setq dir (send dir :new-name sub-directory))
  (setq dir (send dir :new-type :directory))
  (send dir :pathname-as-directory))
    
(defun 1resolve-project0 (project type)
  type
  (if (instancep project)
      (get-sub-directory (find-project-directory (send project :project-name))
			 (format nil "~a" type))
      project))

(defun 1create-project-directories0 (dir)
  (setq dir (fs:parse-pathname dir))
  (setq dir (send dir :new-name nil))
  (setq dir (send dir :new-version nil))
  (setq dir (send dir :new-type nil))
  (setq dir (send dir :new-canonical-type nil))
  (setq dir (send dir :new-name nil))
  
  (condition-case (error)
       (probef (fs:parse-pathname dir))
     (fs:directory-not-found
       (fs:create-directories-recursively dir)))
  (let ((dir (fs:parse-pathname dir)))
    (loop for sub-dir in '("image" "brush" "palette" "segment" "sequence" "pasteup")
	  for fd = (send dir :new-name sub-dir)
	  do
      (setq fd (send fd :new-type :directory))
      (setq fd (send fd :pathname-as-directory))
      (condition-case (error)
	   (probef fd)
	 (fs:directory-not-found
	   (fs:create-directories-recursively fd))))))

