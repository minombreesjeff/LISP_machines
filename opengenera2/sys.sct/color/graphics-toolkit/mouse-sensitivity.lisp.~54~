;;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: Gt; Fonts: CPTFONT,CPTFONTB,CPTFONTI; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")last-item0)
(defvar 1current-item0)
(defvar 1ci0)

;;; Provides a window with a simple facility for creating mouse-sensitive
;;; rectangular areas, called "items".  Each one is mouse-sensitive, and
;;; causes a blip to be sent to the window when it is moused upon.  Each
;;; can have its own documentation string as well.
(defflavor 1menu-items-mixin
0	((msi-hash-table (cl:make-hash-table :size 500.))	
	 (all-items nil) (top-level-nodes) (y-scroll 0)
	 (x-scroll 0) (erase-color *black*) (inactive-items) (inactive-top-level-nodes)
	 (item-list nil) item-blinker  (background-io-stream) (scratch-array))
	()
  (:required-flavors tv:sheet)
  :settable-instance-variables)

(defmethod 1(:standard-refresh menu-items-mixin)0 ()
  (cond (top-level-nodes
	 (loop for i in top-level-nodes
	       do
	   (send i :expose-item)))
	(t
	 (let ((gt:*permit-draw-item* nil))
	   (loop for i in item-list
		 do
	     (send i :expose-item)))
	 (loop for i in item-list
	       do
	   (send i :draw-item)))))

;;;--------------------------------------------------------------------------------
(defvar *standard-menu-margins-and-labels*
	`(;(DW:MARGIN-BORDERS :THICKNESS 2)
	  (DW:MARGIN-WHITE-BORDERS :THICKNESS 2)
	  ;(DW:MARGIN-LABEL :MARGIN :TOP :BOX NIL :BOX-THICKNESS NIL)
	  ))

(defvar *standard-menu-margins-labels-and-scroll-bars*
	`(;(DW:MARGIN-RAGGED-BORDERS :THICKNESS 2)
	  ;(DW:MARGIN-WHITE-BORDERS :THICKNESS 2)
	  (DW:MARGIN-SCROLL-BAR)
	  ;(DW:MARGIN-LABEL :MARGIN :TOP)
	  ))
;;;--------------------------------------------------------------------------------
(defflavor 1scrolling-menu-items-window0 ()
	   (gt:menu-items-mixin tv:window dw:margin-mixin tv:basic-scroll-bar
	    tv:process-mixin)
  (:default-init-plist :blinker-p nil
		       :borders 2
		       :margin-components
		       tv:*standard-menu-margins-labels-and-scroll-bars*
		       :process '(top-level))
  (:settable-instance-variables))

(defwhopper 1(:set-scroll-bar-always-displayed-p scrolling-menu-items-window)
0	    (margin new)
  (when (send self :scroll-bar-in-margin margin)
    (continue-whopper margin new)))

(defmethod 1(:scroll-to scrolling-menu-items-window)
0	   (pos &optional ignore)

  (setq y-scroll pos)
  (send self :refresh))

(defmethod 1(:y-scroll-to  scrolling-menu-items-window)0 (pos type)
  (ignore type)
  (when (eq pos :top) (setq y-scroll 0))
  (when (eq pos :bottom) (setq y-scroll 100))
  (send self :refresh)
  )

(defwhopper 1(:refresh scrolling-menu-items-window)0 (&rest args)
  (lexpr-continue-whopper args)
  (send self :standard-refresh))

(defmethod 1(:scroll-position scrolling-menu-items-window)0 ()
  (values y-scroll 10 100))

(compile-flavor-methods 1scrolling-menu-items-window0)
;;;--------------------------------------------------------------------------------
;;;--------------------------------------------------------------------------------

(defflavor 1menu-items-window0 ()
	   (gt:menu-items-mixin tv:window  tv:process-mixin)
  (:default-init-plist :blinker-p nil
		       :borders 2
		       :process '(top-level))
  (:settable-instance-variables))

(defflavor 1menu-items-window01 ()
	   (gt:menu-items-mixin tv:window  tv:process-mixin)
  (:default-init-plist :blinker-p nil
		       :borders nil
		       :process '(top-level))
  (:settable-instance-variables))

(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Dummy method.  Clients can implement their own interaction windows.
0(defmethod 1(:expose-background-window menu-items-window)0 ())

(defmethod 1(:refresh menu-items-window :after)0 (&rest ignore)
  (send self :standard-refresh))

(defun1 top-level0 (window)
  (send window ':basic-main-loop))

(defmethod 1(:background-stream menu-items-window)0 ()
  (or background-io-stream
      (setq background-io-stream
	    (tv:make-window 'dw-background-stream
			    :name "Score Window background window"
			    :label "Score Window background window"
			    ))))

(defmethod 1(:find-database menu-items-window)0 (ignore))

(compile-flavor-methods 1menu-items-window0)

;;;--------------------------------------------------------------------------------
;;;--------------------------------------------------------------------------------

(defmethod1 (:graphics-toolkit-mouse-item menu-items-mixin)0 (item x y buttons)
  (send item :execute-select-method buttons x y nil))

2;;; Look for point x,y (in the window's outside coordinate space) and return the
;;; item sitting there, else nil.
0(defmethod1 (:find-ms-item menu-items-mixin)0 (x y)
  (decf x (tv:sheet-inside-left))
  (decf y (tv:sheet-inside-top))
  (loop for item in item-list
	for there? = (send item :are-you-at? x y)
	when there? do (return there?)))

;;; Remove a particular item.
(defmethod 1(:remove-item menu-items-mixin)0 (item)
  (setq item-list (delq item item-list)))

(defmethod 1(:add-item menu-items-mixin)0 (item)
  (when (not (member item item-list))
    (if item-list
	(rplacd (send item :cons-cell) item-list)
	(rplacd (send item :cons-cell) nil))
    (setq item-list (send item :cons-cell))))

(defmethod 1(:activate menu-items-mixin :after)0 ()
  (when (eq (send self :superior) tv:main-screen)
    (setq erase-color *black*))
  (send self :set-erase-aluf (send self :window-alu erase-color (color:scf -1 -1)))
  (when (instancep (send self :erase-aluf))
    (send (send self :erase-aluf) :set-plane-mask -1)))	;erase everything

(defmethod 1(:init menu-items-mixin :after)0 (ignore)
  (setq item-blinker (tv:make-blinker self 'tv:hollow-rectangular-blinker ':visibility nil)))

(defwhopper 1(:handle-mouse menu-items-mixin)0 ()
  (let ((tv:Mouse-double-click-time nil))
    (continue-whopper)))

;;; When the mouse leaves the window, turn off the item blinker.
(defmethod 1(:handle-mouse menu-items-mixin :after)0 ()
  (send item-blinker ':set-visibility nil))

(defvar 1last-seen-item0 nil)

;;; When the mouse moves, track the mouse and update the blinker.
;; turn off blinker before changing size.
(defmethod 1(:mouse-moves menu-items-mixin)0 (x y)
  (cond ((< y 0))
	(t
	 (tv:mouse-set-blinker-cursorpos)	;Track the mouse.
	 (let ((item (send self :find-ms-item x y)))		;See if the mouse is inside an item.
	   (when item (setq current-item item ci item))
	   (cond ((and (not (null item)) (neq item last-seen-item)
		       (send item :mouse-sensitive))	;It is, turn on the blinker.
		  (multiple-value-bind (left top right bottom)
		      (send item (send item :highlight-method) self x y)
		    (tv:blinker-set-visibility item-blinker nil)
		    (tv:blinker-set-cursorpos item-blinker left top)
		    (tv:blinker-set-size item-blinker (if (zerop left) right (- right left -1))
					 (if (zerop top) bottom (- bottom top -1)))
		    (tv:blinker-set-visibility item-blinker t)))
		 ((and item (send item :mouse-sensitive) (eq item last-seen-item))
		  (tv:blinker-set-visibility item-blinker t))
		 (t (tv:blinker-set-visibility item-blinker nil)))
	   (setq last-seen-item item)
	   ))))

(defwhopper  1(:mouse-buttons menu-items-mixin)0  (bd x y)
  (let ((buttons (tv:mouse-button-encode bd)))
    (if (eq buttons #\sh-mouse-r)
	(continue-whopper bd x y)
	(send self ':mouse-click buttons x y))))

;;; When the mouse is clicked, do the appropriate thing.
(defmethod 1(:mouse-click menu-items-mixin)0 (button x y)
  (let ((item (send self :find-ms-item x y)))
    (cond (item
	   (setq last-item item)
	   (when (not (send self :listen))
	     (process-sleep 1.)			;to help tablet process somehow
	     (send self ':force-kbd-input
		   (list ':graphics-toolkit-mouse-item item x y button)))
	   t)
	  (t nil))))

(defmethod 1(:refresh-rectangle menu-items-mixin)0 (x1 y1 x2 y2) 
  (loop for i in item-list
	for w = (send i :width)
	for h = (send i :height)
	do
    (multiple-value-bind (ix1 iy1 ix2 iy2)
	(send i :absolute-edges)
      (ignore ix2 iy2)
      (when (or (and (<= x1 ix1 x2)
		     (<= y1 iy1 y2))
		(and (<= x1 (+ ix1 w) x2)
		     (<= y1 (+ iy1 h) y2))
		(and (<= ix1 x1 (+ ix1 w))
		     (<= iy1 y1 (+ iy1 h))))
	(send i :draw-item)))))

(defmethod 1(:refresh-rectangle-of menu-items-mixin)0 (group)
  (multiple-value-bind (x1 y1 x2 y2)
      (send group :absolute-edges)
    (send self :refresh-rectangle x1 y1 x2 y2)))

(defmethod 1(:push-new-item-list menu-items-mixin)0 (new-items new-top-nodes)
  (push item-list inactive-items)
  (setq item-list new-items)
  (push top-level-nodes inactive-top-level-nodes)
  (setq top-level-nodes new-top-nodes))

(defmethod 1(:pop-item-list menu-items-mixin)0 ()
  (setq top-level-nodes (pop inactive-top-level-nodes))
  (setq item-list (pop inactive-items)))

(defmethod 1(:input-command-characters0 1menu-items-mixin)0 (char)
  (when *last-selected-item*
    (send *last-selected-item* :send-if-handles :handle-character-input char))
  (ignore char))

(defmethod 1(:basic0-1main-loop0 1menu-items-mixin)0 ()	
  (send self :clear-input)
  (let ((terminal-io (or (send self :background-io-stream) terminal-io))
	(debug-io (or (send self :background-io-stream) debug-io)))
    (catch 'done
      (loop do
	(*catch :abort-it
	  (let ((char (send self ':any-tyi))
		(old-mdct tv:Mouse-double-click-time))
	    (unwind-protect
		(progn
		  (setq tv:Mouse-double-click-time nil)
		  (cond ((not (listp char))
			 (send self :input-command-characters char))
			((not (eq (first char) ':graphics-toolkit-mouse-item))
			 (comment ferror "The list ~S was received as a mouse blip" char))
			(t  
			 (lexpr-send self (first char) (cdr char))
			 (send self :clear-input))))
	      (setq tv:Mouse-double-click-time old-mdct))))))))

;;; Return the documentation string for the current item.
(defmethod 1(:who-line-documentation-string menu-items-mixin)0 ()
  (if last-seen-item
      (send last-seen-item :documentation)
      "Mouse-R2:  System menu."
      ))

(defmethod 1(:mask-for-drawing menu-items-mixin) 0() -1)
(defmethod 1(:window-alu menu-items-mixin) 0(color alu &optional (alu-code tv:alu-seta))
  (cond ((eq (send self :screen) tv:main-screen)
	 (if (> (send color :hexcone-intensity) .5)
	     tv:alu-seta tv:alu-andca))
	(t (send (send self :screen) :compute-color-alu alu color)
	   (send alu :set-alu alu-code)
	   alu)))

(defmethod (1:get-items0 menu-items-mixin) (items)
  (loop for i in items
	collect (if (instancep i) i (cl:gethash i msi-hash-table)) into ans
	finally (return ans)))

(defmethod (1:get-item0 menu-items-mixin) (item)
  (if (instancep item) item (cl:gethash item msi-hash-table)))

(defmethod (1:window-x0 menu-items-mixin) (screen-x)
  (multiple-value-bind (rx nil)
      (window-offsetss self)
    (- screen-x rx)))


;;;------------------------------------------------------------------------
;;;------------------------------------------------------------------------
(defflavor 1dw-background-stream0 ()
	   (dw:dynamic-window)
  (:default-init-plist
    :save-bits  t
    :more-p nil
    :superior  tv:main-screen
    :deexposed-typeout-action  '(:select)
    :label  "Background Stream"))

(defmethod (:expose 1dw-background-stream0 :after) (&rest ignore)
  (send self :select))

(defwhopper (1:notice0 dw-background-stream) (event &rest args)
  (when (eq event :error)
    (send self :beep)
    (when (zerop (tv:sheet-all-exposed self))
      (when (listp tv:deexposed-typeout-action)
	;; figure it'll expose or something..
	(when (tv:sheet-can-get-lock self)
	  (apply self tv:deexposed-typeout-action)))))
  (lexpr-continue-whopper event args)
  (send self :select))

;;;------------------------------------------------------------------------
;;;------------------------------------------------------------------------

