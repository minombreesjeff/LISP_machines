;;-*- Mode: LISP; Package: COLOR; Base: 10.; Lowercase: Yes -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;
;; Low quality but very fast random numbers.
;;

(defconst *simple-random-a* #o75432015)
(defconst *simple-random-start-x0* #o02376545227)
(defvar *simple-random-x0* *simple-random-start-x0*)

(defun reinitialize-simple-random (&optional (seed 0) (seed0 *simple-random-start-x0*))
  (setq *simple-random-x0* (logxor seed seed0)))

(defmacro simple-random (&optional faster)
  `(setq *simple-random-x0*
	 (multiple-value-bind (low ,@(unless faster (list 'high)))
	     (sys:%multiply-bignum-step *simple-random-a* *simple-random-x0*)
	   ,(if faster
		'low
		'(sys:%32-bit-difference low high)))))

(defmacro with-random-variable ((var &optional seed
				     &key faster
				     (seed0 '*simple-random-start-x0*)
				     (seed1 '*simple-random-a*))
				&body body)
  (subst `(setq .x0. (multiple-value-bind (.low. ,@(unless faster (list '.high.)))
			 (sys:%multiply-bignum-step .avar. .x0.)
		       ,(if faster
			    '.low.
			    `(sys:%32-bit-difference .low. .high.))))
	 var
	 `(let* ((.avar. ,seed1)
		 (.x0. ,(if seed
			    `(logxor ,seed ,seed0)
			    '*simple-random-x0*)))
	    (unwind-protect
		(progn
		  . ,body)
	      (setq *simple-random-x0* .x0.)))))

(defmacro small-range (n random)
  `(\ (ldb (byte 22 8) ,random) ,n))


#||
(defun test-simple-random ()
  (print (simple-random)))

(defun test-with-random-variable ()
  (with-random-variable (rand)
    (print rand)
    (print rand)))
||#

(defmacro simple-random-vector (array size)
  `(let* ((ary ,array)
	  (siz ,size)
	 (a *simple-random-a*)
	 (x0 *simple-random-x0*))
    (declare (sys:array-register ary))
    (unwind-protect
	(loop do
	  (setf (aref ary (decf siz)) (setq x0 
					    (multiple-value-bind (.low. .high.)
						(sys:%multiply-bignum-step .avar. .x0.)
					      (sys:%32-bit-difference .low. .high.))))
	      until (zerop siz))
      (setq *simple-random-x0* x0))))


;;
;; Because MIN and MAX compile function calls (yuk)
;;
(defsubst fmin (a b)
  (if (< a b) a b))
(defsubst fmax (a b)
  (if (> a b) a b))
;;
;; Used in Images and perhaps elsewhere.  Formerly used in Zoom.
;; 
(defmacro log2 (n &environment env)
  (once-only (n &environment env)
    `(fmin (haulong ,n)
	   (haulong (1- ,n)))))

;;
;; Bitblt auxiliaries
;;


(defvar si:*max-pagein-segment-size*)
;;
;; make the max 1/20 of unwired physical memory
;;
(add-initialization ':set-pagein-size
		    '(setq si:*max-pagein-segment-size*
			   (min (// (* sys:page-size
				       1
				       (- si:*count-usable-pages* si:*count-wired-pages*))
				    4.)
				(* 640. 490.)
				))
		    '(:COLD :NOW))

(defvar *explicit-page* nil)
(defun tv:page-in-window-array
       (sheet array &optional from-x from-y to-x to-y
		      (hang-p storage::*default-page-in-hang-p*)
		      (normalize-p t)
		      )
  (cond ((not (member *explicit-page* '(:in t))))
	((and sheet (eq array (tv:sheet-screen-array sheet))))
	(t (page-in-raster-array array from-x from-y to-x to-y hang-p normalize-p)))
  )

(defun tv:page-out-window-array
       (sheet array &optional from-x from-y to-x to-y)
  (cond ((not (member *explicit-page* '(:out t))))
	((and sheet (eq array (tv:sheet-screen-array sheet))))
	(t (page-out-raster-array array from-x from-y to-x to-y)))
  )

tv:
(defun bitblt-by-segments (ALU WIDTH HEIGHT SCREEN-ARRAY start-x start-y BIT-ARRAY to-x to-y
			   &key (function #'tv:bitblt-unpacked))

  (if (or ( height 0)( width 0))

      (funcall function ALU WIDTH HEIGHT SCREEN-ARRAY start-x start-y BIT-ARRAY to-x to-y)

  (multiple-value-bind (bit-array-width bit-array-height)
      (decode-raster-array bit-array)
    (multiple-value-bind (screen-array-width screen-array-height)
	(decode-raster-array screen-array)

      (loop with wrapped-screen-array-x = (mod start-x screen-array-width)
	    and wrapped-bit-array-x = (mod to-x bit-array-width)
	    with wrapped-screen-array-right (min (+ wrapped-screen-array-x width) screen-array-width)
	    and wrapped-bit-array-right (min (+ wrapped-bit-array-x width) bit-array-width)
	    and rowsize = (max 1 (// (* width (si:array-element-byte-size bit-array)) 32))
	    with segsize = (max 1
				(min height
				     (// si:*max-pagein-segment-size* (abs rowsize))))
	    for fy from start-y by segsize
	    as  ty from to-y by segsize
	    as  i from 0 below height by segsize
	    and sheet = (and (boundp 'tv:currently-prepared-sheet) tv:currently-prepared-sheet)
	    as opsize = (min segsize (- height i)) then next-opsize 
	    as next-opsize = (min segsize (- height segsize i))
	    as wrapped-fy = (mod fy screen-array-height)
	    as wrapped-ty = (mod ty bit-array-height)
	    as wrapped-fy-end = (min (+ wrapped-fy opsize) screen-array-height)
	    as wrapped-ty-end = (min (+ wrapped-ty opsize) bit-array-height)
	    as wrapped-next-fy = (mod (+ fy opsize) screen-array-height)
	    as wrapped-next-ty = (mod (+ ty opsize) bit-array-height)
	    while (> opsize 0)
	    do
	(page-in-window-array sheet screen-array
			      wrapped-screen-array-x wrapped-fy
			      wrapped-screen-array-right wrapped-fy-end  t t)
	(tv:page-in-window-array sheet bit-array
				 wrapped-bit-array-x wrapped-ty
				 wrapped-bit-array-right wrapped-ty-end t t)
	(when (> next-opsize 0)
	  (page-in-window-array sheet screen-array
				wrapped-screen-array-x wrapped-next-fy
				wrapped-screen-array-right (min (+ wrapped-next-fy next-opsize) screen-array-height)
				nil t)
	  (page-in-window-array sheet bit-array
				wrapped-bit-array-x wrapped-next-ty
				wrapped-bit-array-right (min (+ wrapped-next-ty next-opsize) bit-array-height)
				nil t)
	  )
	(funcall function alu width opsize
		 screen-array start-x fy
		 bit-array to-x ty)

	;;only if explicit page-out is wanted...
	(page-out-window-array sheet screen-array
			       wrapped-screen-array-x wrapped-fy wrapped-screen-array-right wrapped-fy-end)
	(page-out-window-array sheet bit-array
			       wrapped-bit-array-x wrapped-ty wrapped-bit-array-right wrapped-ty-end)
    
	))
  
      )))




(defvar *network-errors* nil)
(defun network-error (string err)
  (let ((error-string
	  (with-output-to-string (str)
	    (format str "~a" err)
	    (format str "~&~A~&" string))))
    (push error-string *network-errors*)
    (princ error-string)))

(defmacro with-reliable-connections ((&key (retries 3) (wait-for-connection t)) &body body)
  `(loop with timer = 1
	 and retries = ,retries
	 until (zerop retries)
	 do
     (condition-case (err)
	  (return (progn ,@body))
	,@(when wait-for-connection
	    `((sys:host-not-responding
		(process-sleep timer "Retry wait")
		(setq timer (min (* 60 60 5) (+ 120. (* timer 2)))))))
	(sys:network-error
	  (network-error "Retrying" err)
	  (decf retries))
	)
     finally (ferror "Connections Failed")))


;;
;; A simple directory cache
;;
(defflavor directory-cache
	((file-types t)
	 (file-versions :newest)
	 (cache (cl:make-hash-table)))
	()
  (:conc-name "DIRECTORY-CACHE-")
  :readable-instance-variables
  :writable-instance-variables
  :initable-instance-variables)

(defun cautious-directory-list (dir &rest options)
  (let* ((ddir (send dir :directory-pathname-as-file))
	 (err)(val)
	 (rdir (condition-case ()
		    (probef ddir)
		  (sys:error
		    (setq err t)
		    ))))
    ;;
    ;; Note; this kludge is necessary to paper over a server bug, where
    ;; the server bombs trying to directory-list a directory link.  We
    ;; use probef to translate the directory into a real directory, and 
    ;; translate the linked pathname back into the original name and type.
    ;;
    ;;
    ;; We are also watching for the legitimate case where foo.directory is
    ;; an ordinary file rather than a directory.
    ;;
    (unless err
      (when rdir
	(unless (eq ddir rdir)
	  (setq dir (send (send rdir :pathname-as-directory)
			  :new-pathname :name (send dir :name)
			  :type (send dir :type)
			  :version (send dir :version)))))
      (condition-case ()
	   (setq val (lexpr-funcall #'fs:directory-list dir options))
	 (fs:file-error
	   (if (member :fast options)
	       (progn
		 (multiple-value (val err)
		   ;there's a bug in the SGI ftp server, such that it causes an
		   ;error if you give the :fast option.  So I guess we'll just have
		   ;to fake it.
		   (cautious-directory-list dir (remove :fast options)))
		 (unless err 
		   (loop for i in (cdr val) do (setf (cdr i) nil))))
	       (setq err t)))
	 ))
    (values val err)
    ))

(defmethod (map-over-matching-pathnames directory-cache)
	   (pathname &key uncache continuation (types file-types))

  (let* ((path (fs:parse-pathname pathname))
	 (name (or (send path :name) :wild))
	 (type (or (send path :type) :wild)))

    (labels ((recurse (path &optional dir-components)
	       (let* ((dir (send path :directory))
		      (last-dir-name (when (listp dir) (car (last dir))))
		      (accordion-directory (when (eq :wild-inferiors last-dir-name)
					     (setq path (send path :new-directory
							      `(,@(butlast dir)
								:wild)))
					     (push :wild-inferiors dir-components)
					     t))
		      (fdir (send path :directory-pathname-as-file))
		      (dir-cache (gethash fdir cache))
		      )
		 (cond ((send fdir :directory-wild-p)
			(push last-dir-name dir-components)
			(recurse (send fdir :new-pathname :name name) dir-components))
		       ((send fdir :name-wild-p)
			(loop with wild-name = (send fdir :name)
			      and current-dir = (send fdir :directory)
 			      for (f) in (cdr (cautious-directory-list fdir :fast))
			      when (fs:wildcard-match wild-name (send f :name))
				do
				  (if dir-components
				      (recurse
					(send fdir :new-pathname
					      :directory
					      (append (if (listp current-dir)
							  current-dir
							  nil)
						      (list (send f :name))
						      dir-components)
					      :type :wild
					      :name name
					      :version file-versions)
					nil)
				      (recurse (send (send f :pathname-as-directory)
						     :new-pathname :name  name
						     )))
			      when accordion-directory
				do
				  (recurse (send  (send f :pathname-as-directory)
						  :new-pathname :name name)
							 )))
		       (t
			(when (or uncache (null dir-cache))

			  (cond ((symbolp dir-cache)
				 (setq dir-cache (cl:make-hash-table :test #'string=)))
				(t (remhash fdir cache)
				   (clrhash dir-cache)))

			  (when continuation
			    (unless (symbolp dir-cache)
			      (multiple-value-bind (files err)
				  (cautious-directory-list 
				    (send path
					  :new-pathname
					  :type :wild
					  :name :wild
					  :version file-versions)
				    :fast)
				(cond (err (setq dir-cache :nonexistant))
				      (t
				       (loop for (f) in (cdr files)
					     as nam = (send f :name)
					     as typ = (send f :canonical-type)
					     when (or (eq types t) (memq typ types))
					       do
						 (scl:modify-hash dir-cache nam
								  #'(lambda (key dat ignore)
								      (ignore key)
								      (unless (memq f dat)
									(push f dat))
								      dat)
								  ))))
				(puthash fdir dir-cache cache)))))

			(when continuation
			  (unless (symbolp dir-cache)
			    (maphash #'(lambda (key dat)
					 (when (and (fs:wildcard-match name key)
						    (loop for e in dat
							  thereis	
							    (fs:wildcard-match
							      type
							      (send e :type))))
					   (funcall continuation fdir key dat)))
				     dir-cache)))))
			  )))
      (recurse path))))

(defmethod (pathnames-matching directory-cache) (path &rest keywords)
  (let (matches)
    (lexpr-funcall #'map-over-matching-pathnames self path
		   :continuation #'(lambda (dir key dat)
				     (declare (sys:downward-function))
				     (ignore dir key)
				     (push dat matches))
		   keywords)

    matches))

;;
;; These functions are for images, to try to minimize the damage when
;; the window we are using is ripped out from under us
;;
(defun sheet-unmoved (&rest args)
  (loop for (raster span) on args by #'cddr
	do
    (multiple-value-bind (nil nil s)
	(decode-raster-array (if (listp raster) (first raster) raster))
      (when ( s span) (return nil)))
    finally (return t)))

(defun allow-sheet-activity (&rest args)
  (tv:unprepare-sheet)
  (loop until (cl:apply #'sheet-unmoved args)
	do (tv:unprepare-sheet
	     (cl:apply #'process-wait
		 "sheet abnormal" #'sheet-unmoved args))))
