;;; -*- Mode: LISP; Base: 10.; Package: COLOR; Syntax: Zetalisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defmacro intensity-histogram-per-color (current color &key byte)
  (ignore color)
  `(incf (aref dest ,(if byte `(ldb ,byte ,current) current))))

(eval-when (compile load eval)
(defconst intensity-histogram (make-instance 'image-process
				      :main-loop :copy
				      :name :intensity-histogram
				      :arglist '(width height
						       src sx sy
						       dest)
				      :key-args '(:byte)
				      :non-keyword-args '(:to-field)
				      :common-args
				      '(:note-progress "Intensity-histogram"
					:other-arrays ((dest dest))
				        :per-color
					(intensity-histogram-per-color :byte (:byte))
				      ))))

(def-image-process histogram-simple intensity-histogram
  :key-args (:fetch :rgba :store nil :byte nil))
(def-image-process histogram-red intensity-histogram
  :key-args (:fetch :red :byte nil))
(def-image-process histogram-green intensity-histogram
  :key-args (:fetch :green :byte nil))
(def-image-process histogram-blue intensity-histogram
  :key-args (:fetch :blue :byte nil))
(def-image-process histogram-alpha intensity-histogram
  :key-args (:fetch :alpha :byte nil))
(def-image-process historgram-mapped intensity-histogram
  :key-args (:fetch :rgba :map :named :byte nil)
  :keyword-args (translation-name translation-array))
(def-image-process histogram-rgba-intensity intensity-histogram
  :key-args (:fetch :rgba :separate :intensity :byte nil))
(def-image-process histogram-r+g+b-intensity intensity-histogram
  :key-args (:fetch :r+g+b :separate :intensity :byte nil))
(def-image-process histogram-packed-rgb-intensity intensity-histogram
  :key-args (:fetch :packed-rgb :separate :intensity :byte nil))
(def-image-process histogram-packed-yuv-intensity intensity-histogram
  :key-args (:fetch :packed-yuv :separate :packed-y :byte nil))

(defmacro rgb-intensity-histogram-per-color (current color &key byte)
  (ignore color)
  `(incf (aref ,(selectq color
		  (:red 'dest-r)
		  (:green 'dest-g)
		  (:blue 'dest-b))
	       ,(if byte `(ldb ,byte ,current) current))))

(eval-when (compile load eval)
  (defconst rgb-histogram (make-instance 'image-process
				       :main-loop :copy
				       :name :rgb-histogram
				       :arglist '(width height
							src sx sy
							dest)
				      :key-args '(:byte)
				      :non-keyword-args '(:to-field)
				      :common-args
				      '(:note-progress "RGB Intensity histogram"
					:other-arrays ((dest-r (first dest))
						       (dest-g (second dest))
						       (dest-b (third dest)))
				        :per-color
					(rgb-intensity-histogram-per-color :byte nil)
				      ))))

(def-image-process rgb-historgram-mapped rgb-histogram
  :key-args (:fetch :rgba :map :named :separate :rgb :byte nil
		    :save-last-pixel save-last-pixel
		    )
  :keyword-args (translation-name translation-array))


(def-image-process rgb-histogram-rgba rgb-histogram
  :key-args (:fetch :rgba :separate :rgb :byte nil
		    :save-last-pixel save-last-pixel
		    ))

(def-image-process rgb-histogram-r+g+b rgb-histogram
  :key-args (:fetch :r+g+b :byte nil))

(def-image-process rgb-histogram-packed-rgb rgb-histogram
  :key-args (:fetch :packed-rgb :byte nil))

(eval-when (compile load eval)
  (defconst color-histogram (make-instance 'image-process
				       :main-loop :copy
				       :name :color-histogram
				       :arglist '(width height
							src sx sy
							dest)
				       :key-args '(:bins)
				       :non-keyword-args '(:to-field)
				      :common-args
				      '(:note-progress "color histogram"
					:permitted-args (:bins)
					:other-arrays ((dest dest))
				      ))))

(def-image-process color-histogram-rgba color-histogram
  :key-args (:fetch :rgba :separate :rgb)
  (with-stack-list (spec :fetch :rgba :separate :bins
			 :combine :bins :bins (array-dimensions dest)
			 :save-last-pixel 'save-last-pixel
			)
    (let* ((ip (find-image-process
		 color-histogram spec
		 :error-p t
		 :create-p t
		 ))
	   (fn (compiled-function ip)))
      (funcall fn width height src sx sy dest :from-field from-field
	       :per-line-function per-line-function))))

(def-image-process color-histogram-r+g+b color-histogram
  :key-args (:fetch :r+g+b :separate nil)
  (with-stack-list (spec :fetch :r+g+b :separate :bins
			 :combine :bins :bins (array-dimensions dest)
			)
    (let* ((ip (find-image-process
		 color-histogram spec
		 :error-p t
		 :create-p t
		 ))
	   (fn (compiled-function ip)))
      (funcall fn width height src sx sy dest :from-field from-field
	       :per-line-function per-line-function
	       ))))

(def-image-process color-histogram-packed-rgb color-histogram
  :key-args (:fetch :packed-rgb :separate nil)
  (with-stack-list (spec :fetch :packed-rgb :separate :bins
			 :combine :bins :bins (array-dimensions dest)
			)
    (let* ((ip (find-image-process
		 color-histogram spec
		 :error-p t
		 :create-p t
		 ))
	   (fn (compiled-function ip)))
      (funcall fn width height src sx sy dest :from-field from-field
	       :per-line-function per-line-function
	       ))))

(defun image-histogram (&key from-array
			    from-left
			    from-top
			    from-right
			    from-bottom
			    to-array
			    map
			    translation-name
			    (translation-array map)
			    from-image-type
			    (result-type (cond ((listp to-array) :rgb)
					       ((and (arrayp to-array)
						     (= 3 (array-#-dims to-array)))
						:color)
					       (t :intensity)))
			    fetch
			    separate
			    (bins-per-color 64)
			    (from-field)
			    )

  (when (symbolp translation-array)
    (setq translation-array (symeval translation-array)))

  (let ((fa (if (listp from-array)(first from-array) from-array)))
    (when translation-array
      (when (eq translation-array (standard-grayscale-map (array-element-byte-size fa)))
	(setq translation-array nil))))

  (unless from-image-type
    (multiple-value (from-image-type translation-array)
      (transfer-image-type from-array translation-array)))

  (unless fetch
    (setq fetch (selectq from-image-type
		  (rgb-image ':r+g+b)
		  (t :rgba))))

  (unless separate
    (setq separate (cond ((eq result-type :intensity)
			  (selectq from-image-type
			    ((32b-image rgb-image packed-rgb-image) :intensity)))
			 ((or (eq fetch :r+g+b)
			      (eq fetch :packed-rgb))
			  nil)
			 (t :rgb))))

  (with-stack-list (spec :fetch fetch
			 :map (when translation-array :named)
			 :separate separate)
    (unless to-array
      (setq to-array (selectq result-type
		       (:intensity
			(make-array
			  (expt 2 (if (arrayp from-array)
				      (min 8 (array-element-byte-size from-array))
				      8))
			  :type 'art-fixnum))
		       (:rgb
			(list (make-array 256 :type 'art-fixnum)
			      (make-array 256 :type 'art-fixnum)
			      (make-array 256 :type 'art-fixnum)))
		       (:color
			(make-array
			  (if (listp bins-per-color)
			      bins-per-color
			      (list bins-per-color bins-per-color bins-per-color))
			  ':type 'art-fixnum))
			)
		       ))

    (when translation-array
      (unless translation-name
	(setq translation-name (selectq (array-length to-array)
				 (4 :2b-gray-contribution)
				 (16 :4b-gray-contribution)
				 (t :gray-contribution)))))


    (multiple-value-bind (w h) (decode-raster-array (if (listp from-array)
							(first from-array)
							from-array))
      (let* ((from-left (floor (cond ((null from-left) 0)
				     ((< from-left 0) 0)
				     (t from-left))))
	     (from-top (floor (cond ((null from-top) 0)
				    ((< from-top 0) 0)
				    (t from-top))))
	     (from-right (ceiling (cond ((null from-right) w)
					((> from-right w) w)
					(t from-right))))
	     (from-bottom (ceiling (cond ((null from-bottom) h)
					 ((> from-bottom h) h)
					 (t from-bottom))))
	     (image-process (selectq result-type
			      (:color color-histogram)
			      (:rgb rgb-histogram)
			      (:intensity intensity-histogram)
			      (t (ferror "~A isn't a known result type"
					 result-type))))
	     (ip-fun (find-image-process image-process spec :error-p t)))

	(cl:apply (compiled-function ip-fun)
		  (- from-right from-left) (- from-bottom from-top)
		  from-array from-left from-top
		  to-array
		  (image-process-accepts-other-args
		    ip-fun
		    :translation-array translation-array
		    :translation-name translation-name
		    :from-field from-field
		    ))
	(values to-array ip-fun)))))


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD :LARGE) "MEDFNTB");;
;; Histogram remapping, used by peano
;;

0(eval-when (compile load eval)
  (defconst histogram-remap (make-instance 'image-process
					 :main-loop :copy
					 :name :histogram-remap
					 :arglist '(width height
							  src sx sy
							  dest dx dy)
					 :keyword-args '(histogram color-map threshold)
					 :key-args '(:bins :jitter :dither)
					 :common-args
					 '(:note-progress "remap image"
					   :other-arrays ((hist histogram))
					   :first (ignore color-map threshold)
					   :permitted-args (:bins)))))

(defvar *all-image-processes*
	'(pixel-copy
	   pixel-replication
	   rescale-image
	   change-pixel-aspect-ratio-19//16
	   change-pixel-aspect-ratio-16//19
	   change-pixel-aspect-ratio-9//8
	   change-pixel-aspect-ratio-8//9
	   change-pixel-aspect-ratio-4//3
	   change-pixel-aspect-ratio-3//4
	   permute-image	
	   catmull-transformation
	   ))

;;
;; Precompile a bunch of image processes we will need
;;
(PRECOMPILE-IMAGE-PROCESSES 'PIXEL-COPY
			    '((:FETCH :2B-8B :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :RGBA :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES NIL)
			      (:FETCH :RGBA :MAP :NAMED-WITH-ALPHA :SEPARATE NIL
                                      :COMBINE NIL :STORE :RGBA :FROM-FIELD NIL :TO-FIELD NIL
                                      :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :TRANSLATION-ARRAY *STANDARD-FALSE-COLOR-MAP*
                                      :TRANSLATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :WRITE-MASK NIL :COMPUTED-DEST-LINES NIL
                                      :COMPUTED-SOURCE-LINES T)
			      (:FETCH :1B-32B :MAP NIL :SEPARATE NIL :COMBINE NIL
                                      :STORE :RGBA :FROM-FIELD NIL :TO-FIELD NIL
                                      :PER-LINE-FUNCTION NIL :WRITE-MASK NIL
                                      :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES T)
			      (:FETCH :RGBA :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :BLUE :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES T)
			      (:FETCH :RGBA :MAP :NAMED :SEPARATE :RGB :COMBINE
                                      :DITHERED-RANDOM-PALETTE :STORE :RGBA :FROM-FIELD NIL
                                      :TO-FIELD NIL :PER-LINE-FUNCTION NIL :TRANSLATION-ARRAY
                                      *STANDARD-FALSE-COLOR-MAP* :TRANSLATION-NAME
                                      :FULL-COLOR-TRANSLATION-ARRAY :COMBINATION-ARRAY
                                      *STANDARD-FALSE-COLOR-MAP* :WRITE-MASK NIL
                                      :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES NIL)
			      (:FETCH :RGBA :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :GREEN :FROM-FIELD NIL
                                      :TO-FIELD NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES T)
			      (:FETCH :RGBA :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :RGBA :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES NIL)
			      (:FETCH :RGBA :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :RGBA :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES T)
			      (:FETCH :2B-8B :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :RGBA :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES T)
			      (:FETCH :RGBA :MAP :NAMED-WITH-ALPHA :SEPARATE NIL
                                      :COMBINE NIL :STORE :RGBA :FROM-FIELD NIL :TO-FIELD NIL
                                      :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :TRANSLATION-ARRAY *STANDARD-FALSE-COLOR-MAP*
                                      :TRANSLATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :WRITE-MASK NIL :COMPUTED-DEST-LINES NIL
                                      :COMPUTED-SOURCE-LINES NIL)
			      (:FETCH :RGBA :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :RED :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES T)
			      (:FETCH :PACKED-RGB :MAP NIL :SEPARATE NIL :COMBINE :RGBA
                                      :STORE :RGBA :FROM-FIELD NIL :TO-FIELD NIL
                                      :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255 :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES T)
			      (:FETCH :RGBA :MAP NIL :SEPARATE :RGB :COMBINE NIL :STORE
                                      :R+G+B :FROM-FIELD NIL :TO-FIELD NIL :PER-LINE-FUNCTION
                                      NIL :WRITE-MASK NIL :COMPUTED-DEST-LINES NIL
                                      :COMPUTED-SOURCE-LINES NIL)))
(PRECOMPILE-IMAGE-PROCESSES
  'PIXEL-COPY
  '((:FROM-FIELD NIL :TO-FIELD NIL :WRITE-MASK NIL
		 :COMPUTED-SOURCE-LINES T
		 :INTENSITY-OPERATOR :INTENSITY :JITTER NIL
		 :FETCH :RGBA :STORE
		 :RGBA :DITHER NIL :RESCALE :SELECT)
    (:FROM-FIELD NIL :TO-FIELD NIL
		 :WRITE-MASK NIL :COMPUTED-SOURCE-LINES T
		 :INTENSITY-OPERATOR :INTENSITY
		 :JITTER NIL :FETCH :PACKED-RGB
		 :STORE :PACKED-RGB :RESCALE :SELECT :DITHER NIL)
    (:FETCH :PACKED-RGB :MAP NIL :SEPARATE :INTENSITY
	    :COMBINE :DITHERED-THRESHOLD :STORE :RGBA :FROM-FIELD
	    NIL :TO-FIELD NIL :PER-LINE-FUNCTION NIL :BLACK-PIXEL 0
	    :WHITE-PIXEL -1 :BRIGHTNESS 255 :THRESHOLD 128
	    :WRITE-MASK NIL :COMPUTED-DEST-LINES NIL
	    :COMPUTED-SOURCE-LINES NIL)
    (:FETCH :R+G+B :MAP NIL :SEPARATE :INTENSITY :COMBINE
	    :DITHERED-THRESHOLD :STORE :RGBA :FROM-FIELD NIL
	    :TO-FIELD NIL :PER-LINE-FUNCTION NIL :BLACK-PIXEL 0
	    :WHITE-PIXEL -1 :BRIGHTNESS 255 :THRESHOLD 128
	    :WRITE-MASK NIL :COMPUTED-DEST-LINES NIL
	    :COMPUTED-SOURCE-LINES NIL)
    (:FETCH :RGBA :MAP NIL :SEPARATE :INTENSITY :COMBINE
	    :DITHERED-THRESHOLD :STORE :RGBA :FROM-FIELD NIL
	    :TO-FIELD NIL :PER-LINE-FUNCTION NIL :BRIGHTNESS 255
	    :THRESHOLD 128 :BLACK-PIXEL 0 :WHITE-PIXEL -1
	    :WRITE-MASK NIL :COMPUTED-DEST-LINES NIL
	    :COMPUTED-SOURCE-LINES NIL)
    (:FETCH :RGBA :MAP :NAMED :SEPARATE NIL :COMBINE
	    :DITHERED-THRESHOLD :STORE :RGBA :FROM-FIELD NIL
	    :TO-FIELD NIL :PER-LINE-FUNCTION NIL :TRANSLATION-NAME
	    :B&W-TRANSLATION-ARRAY :TRANSLATION-ARRAY
	    *STANDARD-FALSE-COLOR-MAP* :BLACK-PIXEL 0 :WHITE-PIXEL
	    -1 :THRESHOLD 128 :BRIGHTNESS 255 :WRITE-MASK NIL
	    :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES NIL)
    (:FETCH :RGBA :MAP NIL :SEPARATE NIL :COMBINE
	    :DITHERED-THRESHOLD :STORE :RGBA :FROM-FIELD NIL
	    :TO-FIELD NIL :PER-LINE-FUNCTION NIL :THRESHOLD 2
	    :BRIGHTNESS 3 :BLACK-PIXEL 0 :WHITE-PIXEL -1 :WRITE-MASK
	    NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES
	    NIL)))

(PRECOMPILE-IMAGE-PROCESSES 'RESCALE-IMAGE
			    '((:FETCH :RGBA :MAP :NAMED :SEPARATE :RGB :COMBINE
                                      :DITHERED-PALETTE :STORE :RGBA :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :TRANSLATION-ARRAY
                                      *STANDARD-FALSE-COLOR-MAP* :TRANSLATION-NAME
                                      :FULL-COLOR-TRANSLATION-ARRAY :COMBINATION-ARRAY
                                      *STANDARD-FALSE-COLOR-MAP* :WRITE-MASK NIL
                                      :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES NIL
                                      :RESCALE :SELECT :DITHER T :JITTER NIL)
			      (:FETCH :R+G+B :MAP NIL :SEPARATE NIL :COMBINE NIL :STORE
                                      :R+G+B :FROM-FIELD NIL :TO-FIELD NIL :PER-LINE-FUNCTION
                                      NIL :WRITE-MASK NIL :COMPUTED-DEST-LINES NIL
                                      :COMPUTED-SOURCE-LINES NIL :RESCALE :SELECT :DITHER NIL
                                      :JITTER NIL)
			      (:FETCH :PACKED-RGB :MAP NIL :SEPARATE NIL :COMBINE NIL
                                      :STORE :PACKED-RGB :FROM-FIELD NIL :TO-FIELD NIL
                                      :PER-LINE-FUNCTION NIL :WRITE-MASK NIL
                                      :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES NIL
                                      :RESCALE :SELECT :DITHER NIL :JITTER NIL)
			      (:FETCH :1B-8B :MAP NIL :SEPARATE NIL :COMBINE
                                      :NAMED-WITH-ALPHA :STORE :RGBA :FROM-FIELD NIL :TO-FIELD
                                      NIL :PER-LINE-FUNCTION NIL :DEFAULT-ALPHA 255
                                      :COMBINATION-NAME :FULL-COLOR-TRANSLATION-ARRAY
                                      :COMBINATION-ARRAY *STANDARD-GRAYSCALE-MAP* :WRITE-MASK
                                      NIL :COMPUTED-DEST-LINES NIL :COMPUTED-SOURCE-LINES NIL
                                      :RESCALE :AVERAGE :DITHER NIL :JITTER NIL)))
