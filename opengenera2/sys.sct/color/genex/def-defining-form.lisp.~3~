;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")cwr 4-20-88:  This stuff is stolen directly from SGR's code in Joshua.  Occurances of "Joshua" in the text have been
0;;; 1              replaced with "Dyna".  (See the file SYS:JOSHUA;CODE;SYSTEM-PATCHES.LISP)
0;;; 1cwr 8-15-88:  Changed "dyna" into "si".  Added new default :finder function.  Changed to respect value returned from
0;;; 1              record-source-file-name so that answering N to a redefinition query actually works.
0;;; 1cwr 8-16-88:  Changed mechanism for defaulting :finder so that it does not conflict with :parser spec.
0;;; 1cwr 8-30-88:  Reverted to no default :finder.  Changed fonts (apologies to SRG).
0;;; 1cwr  9-7-88:  Changed PROGN (previously a WHEN, previously a PROGN) to the correct thing: SYS:MULTIPLE-DEFINITION.
0;;;
;;; ------------------------------------------------------------------------------------------
;;;
;;; (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")[...insert cogent, lucid, and easily understood documentation here...]
0;;;
;;; ------------------------------------------------------------------------------------------
;;;
;;; Properties of defining forms: 
;;;  [1] They define something named by a function spec.
;;;  [2] They only occur at top-level.
;;;  [3] m-. can find them.
;;;  [4] Zmacs can sectionize buffers containing them.
;;;  [5] m-X Kill Definition can undo them.
;;;  [6] m-X Show Effect of Definition can write stories about them.
;;;  [7] They are "irrelevant" in the Zmacs sense.
;;; ([8] They sometimes have an "undo" function that uses the :previous-definition property
;;;      kept on function-spec-plists.)
;;;  [9] users are warned against redefining a given spec in more than one place  (-cwr)
;;;
;;; ------------------------------------------------------------------------------------------
;;;
;;; 2[...insert crisp, concrete example of usage here...]  0Joshua's user-visible defining
;;; forms are define-predicate, define-predicate-model, define-predicate-handler, defrule,
;;; defdescription, defexample, and the description method guys.  S-Dynamics uses this for
;;; defuniverse, def-dynamic-operation-class, and define-dynamic-operation.
;;;
;;; ------------------------------------------------------------------------------------------


;;; First, we gotta do for SI:DEF-DEFINING-FORM what it will do for other defining forms!

(pushnew 'si:def-defining-form zwei:*irrelevant-functions*)
(pushnew 'si:def-defining-form zwei:*irrelevant-defining-forms*)
(defprop  si:def-defining-form compiler:only-at-top-level compiler:style-checker)
(defprop  si:def-defining-form "Defining Form" si:definition-type-name)
(defprop  si:def-defining-form
	  ;;(3 0 (NIL 0) (NIL :CONDENSED NIL) "CPTFONTC") do this way instead of defining (:property0 3si:def-defining-form zwei:kill-definition), so
0	  ;;3 that inserting a form into your buffer to kill a0 3definition looks prettier.
0	  si:undef-defining-form zwei:kill-definition)


(defmacro 2si:def-defining-form 0(name &body ignore3 0&key
				definer killer shower parser finder
				(style-checker 'compiler:only-at-top-level)
				type-name function-spec-type)
  (declare (zwei:indentation 1 2))
3  ;; how to define a defining macro, Cadillac style.
  ;; definer is either a function spec or  (args &rest body).  killer, shower, parser, finder,
  ;;   and style-checker are similar.
  ;; type-name is a string or NIL
  ;; function-spec-type is a function-spec type or NIL (seldom needed)
0  (check-type name symbol)
  (check-type definer       (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type killer        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type shower        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type parser        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type finder        (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (check-type style-checker (or (satisfies sys:validate-function-spec) list)
	      "a function spec or a definition of the form (<args> . <body>)")
  (when (and parser finder)
    (cerror "Ignore FINDER" ;; parser is more general
	    "PARSER and FINDER args to SI:DEF-DEFINING-FORM shouldn't both be given")
    (setq finder nil))
  (flet ((defprop-or-defun (name property-name thing)
3	   ;; defprop thing if it's a function spec, or defun a property-list function
0	   (cond ((sys:validate-function-spec thing)
3		  ;; want to do a direct defprop
0		  `((defprop ,name ,thing ,property-name)))
		 ((listp thing)
3		  ;; want to define one here
0		  `((defun (:property ,name ,property-name) ,(car thing)
		      (declare (sys:function-parent ,name si:def-defining-form))
		      ,@(cdr thing))))
		 (t
		  (error "Mal-formed property function.  ~
			  Expected function-spec or (<args> . <body>): ~S"
			 thing)))))
    ;;
    `(sys:multiple-definition
       ,name si:def-defining-form
       ,@(when type-name
3	   ;; pretty name that appears in patch comments, typein line, etc.
0	   `((defprop ,name ,type-name si:definition-type-name)))
       ,@(when function-spec-type
3	   ;; usually unecessary, defaults to like DEFUN.
0	   `((defprop ,name ,function-spec-type zwei:definition-function-spec-type)))
       ,(cond ((sys:validate-function-spec definer)
3	        ;; just gave a function spec as the definer
0	       `(def ,name
3		     ;; this is probably nonsense, but it does arrange function-parentage
0		     (proclaim '(sys:function-parent ,name si:def-defining-form))
		  (setf (fdefinition ',name) ',definer)))
	      ((listp definer)
	       `(defmacro ,name ,(car definer)
3		  ;; this is the thing that actually expands the defining macro
0		  (declare (sys:function-parent ,name si:def-defining-form))
		  ,@(cdr definer)))
	      (t
	       (error "Mal-formed definer.  Expected function-spec or (<args> . <body>): ~S"
		      definer)))
3        ;; always give it a style checker (defaulting to compiler:only-at-top-level)
0       ,@(defprop-or-defun name 'compiler:style-checker style-checker)
3        ;; sectionization helper
0       ,@(when finder3 0(defprop-or-defun name 'zwei:definition-function-spec-finder finder))
3        ;; more drastic sectionization helper
0       ,@(when parser3 0(defprop-or-defun name 'zwei:definition-function-spec-parser parser))
3        ;; drives m-X Kill Definition
0       ,@(when killer3 0(defprop-or-defun name 'zwei:kill-definition killer))
3        ;; drives m-X Show Effect of Definition
0       ,@(when shower3 0(defprop-or-defun name 'zwei:show-effect-handler shower))
3        ;; make it irrelevant
0       (pushnew ',name zwei:*irrelevant-functions*)
       (pushnew ',name zwei:*irrelevant-defining-forms*)
3        ;; return the name
0       ',name)))


(defun 2si:undef-defining-form 0(fspec)
3  ;; how to kill a si:def-defining-form form
  0(check-type fspec symbol) 3;defining-forms are always symbols
  ;; undefine the macro
  0(fundefine fspec)
3  ;; remove anything we might have put on its property list
  0(remprop fspec :previous-definition)
3  0(remprop fspec 'compiler:style-checker)
3  0(remprop fspec 'si:definition-type-name)
3  0(remprop fspec 'zwei:definition-function-spec-type)
3  0(remprop fspec 'zwei:definition-function-spec-parser)
3  0(remprop fspec 'zwei:definition-function-spec-finder)
3  0(remprop fspec 'zwei:kill-definition)
3  0(remprop fspec 'zwei:show-effect-handler)
3  ;; remove it from Zwei's irrelevant stuff
  0(setq zwei:*irrelevant-functions* (delete fspec zwei:*irrelevant-functions*))
3  0(setq zwei:*irrelevant-defining-forms* (delete fspec zwei:*irrelevant-defining-forms*))
3  ;; removes :source-file-name property and so on, keeping pathname system happy
  0(si:remove-source-file-definition fspec 'si:def-defining-form))


(defun 2(:property si:def-defining-form zwei:show-effect-handler)0 (form &aux
								  (name (second form))
								  next (count 0))
3  ;; how to describe the effects of a si:def-defining-form form -- in the typeout window,
  ;; 'cause this is usually several lines of output.
  0(flet ((talk-about-definition (fspec type arglist counter)
3	   ;; say something cogent about a definition being bashed.
	   0(cond ((not (sys:validate-function-spec fspec))
3		  0(zwei:barf "Invalid function spec ~S." fspec))
3		 0((not (fdefinedp fspec))
3		  ;; not defined yet
		  0(format zwei:*typeout-window* "~&[~D] Define the ~A ~S for the first time."
3			  0counter type3 0fspec))
3		 0(t
3		   ;; defined already, so grok the arglists
		   0(format zwei:*typeout-window* "~&[~D] Redefine the ~A ~S with ~
                                                  ~:[different~;the same~] arguments."
3			   0counter type fspec (equal arglist (arglist fspec t))))))
3	 0(talk-about-property (prop-name new-value compare-function counter)
3	   ;; say something cogent about a property being bashed
	   0(declare (sys:downward-funarg compare-function))
3	   0(let ((old-value (get name prop-name)))
3	     0(cond (old-value
3		     ;; there is an old value
		     0(cond ((funcall compare-function new-value old-value)
3			    ;; they're the "same", for "same" arbited by compare-function
			    0(format zwei:*typeout-window*
				   "~&[~D] Reinforce the system's notion that ~
				    ~S's ~S property should be ~S."
3				    0counter name prop-name new-value))
3			   0(t
3			     ;; not "same"
			     0(format zwei:*typeout-window*
				    "~&[~D] Change ~S's ~S property to ~S."
3				     0counter name prop-name new-value))))
3		   0(t
3		     ;; no old value
		     0(format zwei:*typeout-window* "~&[~D] Define ~S's ~S property to be ~S."
3			     0counter name prop-name new-value)))))
3	 0(frobulate-arglist (thing)
3	   ;; deals with the 2 ways some parts can be given: either a function-spec, or
	   ;; (<args> . <body>)
	   0(if (sys:validate-function-spec thing)
3	       0(arglist thing t)
3	       0(car thing)))
3	 0(find-piece (keyword)
3	   ;; find :killer, :definer, etc.
	   0(getf (cddr form) keyword)))
3    0(format zwei:*typeout-window* "~&Evaluating this will:")
3    ;; first, talk about the definer (required arg)
    0(talk-about-definition name
3			   0(get 'si:def-defining-form 'si:definition-type-name)
3			   0(frobulate-arglist (find-piece :definer))
3			   0(incf count))
3    0(when (setq next (find-piece :killer))
3      ;; there is a killer
      0(talk-about-definition `(:property ,name zwei:kill-definition)
3			     0"m-X Kill Definition driver"
3			     0(frobulate-arglist next)
3			     0(incf count)))
3    0(when (setq next (find-piece :shower))
3      ;; there is a shower
      0(talk-about-definition `(:property ,name zwei:show-effect-handler)
3			     0"m-X Show Effect of Definition driver"
3			     0(frobulate-arglist next)
3			     0(incf count)))
3    0(when (setq next (find-piece :finder))
3      ;; there is a finder
      0(talk-about-definition `(:property ,name zwei:definition-function-spec-finder)
3			     0"sectionization helper"
3			     0(frobulate-arglist next)
3			     0(incf count)))
3    0(when (setq next (find-piece :parser))
3      ;; there is a parser
      0(talk-about-definition `(:property ,name zwei:definition-function-spec-parser)
3			     0"sectionization helper"
3			     0(frobulate-arglist next)
3			     0(incf count)))
3    0(when (setq next (find-piece :type-name))
3      ;; there is a type-name
      0(talk-about-property 'si:definition-type-name next #'string= (incf count)))
3    0(when (setq next (find-piece :function-spec-type))
3      ;; there is a function-spec-type
      0(talk-about-property 'zwei:definition-function-spec-type next #'eql (incf count)))
3    ;; talk about the style checker
    0(talk-about-definition `(:property ,name compiler:style-checker)
3			   0"style checker"
3			   0(frobulate-arglist 'compiler:only-at-top-level)
3			   0(incf count))
3    ;; talk about irrelevancy
    0(cond ((or (member name zwei:*irrelevant-functions*)
3	       0(member name zwei:*irrelevant-defining-forms*))
3	   ;; it's already at least partially irrelevant
	   0(format zwei:*typeout-window*
		  "~&[~D] Reinforce Zmacs's opinion that ~S is irrelevant."
3		   0count name))
3	  0(t
3	    ;; it's not irrelevant yet
	    0(format zwei:*typeout-window* "~&[~D] Tell Zmacs ~S is irrelevant."
3		    0count name)))
3    ;; don't macroexpand further to look at other effects
    0t))


3;;;  New code, cwr 8-15-88.  Based on a conversation with SGR in late April 1988.  This finder function can
;;;  be supplied to si:def-defining-form to allow forms that are of either of these types:
;;;      (define-frob foo ...)
;;;      (define-frob (foo ...) ...)
;;;  and which consider the symbol foo to be the "fspec" of the form.
;;;
0(defun 2si:default-heuristic-function-spec-finder 0(bp)
  (and (setq bp (zwei:forward-over zwei:*whitespace-chars* bp))
        (if (char-equal (zwei:bp-char bp) #\open-parenthesis)
	  (zwei:forward-list bp 1 nil -1 t)
	  bp)))


;;; -- eof -----------------------------------------------------------------------------------
