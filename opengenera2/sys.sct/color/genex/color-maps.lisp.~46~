;;; -*- Mode: LISP; Syntax: Zetalisp; Package: COLOR; Base: 10; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defmacro closest-color-in-palette (r g b &key (fixnum t) heap size with-error)
  #||
  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")Find the closest color to R,G,B in the palette, using a two-phase search,
0  1and a color table sorted by distance from the origin
0  
  1First, use a binary search to find the color closest to the same distance
0  1from the origin
0  
  1Then search linearly up and down from that point, until the new probe colors
0  1are further from the origin than the best match so far.
0  
  1Think of this geometrically:   The colors are arrayed in 1/8 sphere, where
0  1black is 0,0,0 and white is 1,1,1.   Phase 1 locates the desired color within
0  1a shell some distance from the origin.  Phase 2 searches a spherical space
0  1around the desired color, shrinking the sphere until its radius is small enough
0  1that we know all the unexamined colors are further away.
0  ||#
  `(let* (,@(if fixnum
		`((r ,r)
		  (g ,g)
		  (b ,b))
		`((r (if (< ,r 0.00001) 0.0 ,r))	;avoid floating underflow traps
		  (g (if (< ,g 0.00001) 0.0 ,g))
		  (b (if (< ,b 0.00001) 0.0 ,b))))
	  (rsq (* r r))
	  (gsq (* g g))
	  (bsq (* b b))
	  (distsql (+ rsq gsq bsq))
	  (dist ,(if fixnum `(isqrt distsql) `(sqrt distsql)))
	  ,@(unless heap
	      (setq heap 'heap)
	      `((heap (send self ,(if fixnum
				      :fixnum-color-heap
				      :flonum-color-heap)))))
	  ,@(unless size
	      (setq size 'size)
	      `((size (1- (array-length heap)))))
	  (ub ,size)
	  (lb 0)
	  (max-size ,(if fixnum (* 3 255 255) 3.0))
	  (idx ,(let ((v '(// (* dist ub) max-size)))
		  (if fixnum v `(round ,v))))
	  )
     
     (declare (sys:array-register ,heap))
     
     (loop named phase-1
	   as dat = (aref ,heap idx)
	   as (center-dist) = dat
	   until (or (= center-dist dist)
		     ( ub lb))
	   do
       ;binary search for a starting point the right distance
       (cond ((> center-dist dist)
	      (setq ub (fmax 0 (1- idx))
		    idx (lsh (+ lb ub 1) -1)))
	     (t (setq lb (fmin size (1+ idx))
		      idx (lsh (+ lb ub 1) -1))))
	   finally
	     ;scan outward for the best match, terminating when the available bound
	     ;is better than the distance bound.
	     (loop with best-distsq = max-size
		   ,@(when with-error `(and best-dr and best-dg and best-db))
		   and best-idx = (second dat)
		   and low-idx = idx
		   and high-idx = (1+ idx)
		   with low-dat = dat
		   and high-dat = (when (< high-idx ,size)
				    (aref ,heap high-idx))
		   while (or low-dat high-dat)
		   do
	       (when low-dat
		 (let* ((center-dist (pop low-dat))
			(dr (- (pop low-dat) r))
			(dg (- (pop low-dat) g))
			(db (- (pop low-dat) b))
			(dd (+ (* dr dr) (* dg dg)(* db db)))
			)			
		   (if (< dd best-distsq)
		       (setq best-distsq dd
			     best-idx (first low-dat)
			     ,@(when with-error
				 `(best-dr dr
					   best-dg dg
					   best-db db)
				 ))
		       (let* ((dif (- center-dist dist))
			      (dis (* dif dif))
			      )
			 (when (> dis best-distsq)
			   ;(ferror "stop low ~A" low-idx)
			   (setq low-idx 0))))
		   (setq low-idx (1- low-idx))
		   (setq low-dat (if (< low-idx 0)
				     nil
				     (aref heap low-idx))))
		 )
	       (when high-dat
		 (let* ((center-dist (pop high-dat))
			(dr (- (pop high-dat) r))
			(dg (- (pop high-dat) g))
			(db (- (pop high-dat) b))
			(dd (+ (* dr dr)(* dg dg)(* db db))))
		   (if (< dd best-distsq)
		       (setq best-distsq dd
			     best-idx (first high-dat)
			     ,@(when with-error
				 `(best-dr dr
					   best-dg dg
					   best-db db)
				 )) 
		       (let* ((dif (- center-dist dist))
			      (dis (* dif dif))
			      )
			 (when (> dis best-distsq)
			   ;(ferror "stop high ~A" high-idx)
			   (setq high-idx ,size))))
		   (incf high-idx)
		   (setq high-dat (if (> high-idx ,size)
				      nil
				      (aref heap high-idx)))
		   ))
		   finally
		     (if best-idx
			 (return-from phase-1
			   ,(if with-error `(values best-idx best-dr best-dg best-db)
				'best-idx))
			 (ferror "no value in phase 2!")))
	     (ferror "no value in phase 1!")
	     ))
     )


(defgeneric fixnum-closest-color-in-palette (self r g b)
  (declare lt::(side-effects reader))
  (:compatible-message :fixnum-closest-color-in-palette))

(defgeneric fixnum-closest-color-in-palette-with-error (self r g b)
  (declare lt::(side-effects reader))
  (:compatible-message :fixnum-closest-color-in-palette-with-error))

(defmethod (fixnum-closest-color-in-palette standard-color-map) (r g b)
  (declare lt::(side-effects reader))
  (closest-color-in-palette r g b :fixnum t))

(defmethod (fixnum-closest-color-in-palette-with-error standard-color-map) (r g b)
  (closest-color-in-palette r g b :fixnum t :with-error t))

(defmethod (:flonum-closest-color-in-palette standard-color-map) (r g b)
  (closest-color-in-palette r g b :fixnum nil))

(defmethod (:flonum-closest-color-in-palette-with-error standard-color-map) (r g b)
  (closest-color-in-palette r g b :fixnum nil :with-error t))

#||

(defmethod (:slow-closest-color-in-palette standard-color-map) (r g b)
  (loop with fr = (if (floatp r) r (// r 255.0))
	and fg = (if (floatp g) g (// g 255.0))
	and fb = (if (floatp b) b (// b 255.0))
	with min and minv
	for i from 0 below (send self :size)
	do
    (multiple-value-bind ( r g b) (send self :read-color-map i)
      (let* ((dr (- r fr))
	     (dg (- g fg))
	     (db (- b fb))
	     (val (+ (* dr dr)(* dg dg)(* db db))))
	(when (or (null minv)(< val minv))
	  (setq minv val
		min i))))
    finally (return (values min minv))))


(defun dist (r1 g1 b1 r2 g2 b2)
  (sqrt (+ (expt (- r1 r2) 2) (expt (- g1 g2) 2) (expt (- b1 b2) 2))))

(defun test-palette (palette fixed &optional (n 10000))
  (let ((total-fast 0)
	(total-slow 0))
    (loop with fun = (if fixed :fixnum-closest-color-in-palette
			 :flonum-closest-color-in-palette)
	  repeat n
	  as r = (if fixed (random 256) (// (random 10000) 10000.0))
	  as g = (if fixed (random 256) (// (random 10000) 10000.0))
	  as b = (if fixed (random 256) (// (random 10000) 10000.0))
	  as t0 = (time:fixnum-microsecond-time)
	  as v1 = (send palette :slow-closest-color-in-palette r g b)
	  as t1 = (time:time-difference (time:fixnum-microsecond-time) t0)

	  as t00 = (time:fixnum-microsecond-time)
	  as v2 = (send palette fun r g b)
	  as t2 = (time:time-difference (time:fixnum-microsecond-time) t00)
	  do
      (incf total-slow t1)
      (incf total-fast t2)
      (unless (eql v1 v2)
	(multiple-value-bind (r1 g1 b1) (send palette :read-color-map v1)
	  (multiple-value-bind (r2 g2 b2)(send palette :read-color-map v2)
	    (when fixed
	      (setq r1 (floor (* r1 255.9))
		    g1 (floor (* g1 255.9))
		    b1 (floor (* b1 255.9))
		    r2 (floor (* r2 255.9))
		    g2 (floor (* g2 255.9))
		    b2 (floor (* b2 255.9))))
	    (let ((d1 (dist r g b r1 g1 b1))
		  (d2 (dist r g b r2 g2 b2)))
	    (unless (if fixed
			( (abs (- d1 d2)) 2)
			(eql d1 d2))
	      (ferror "disagreement!")))))))
    (values (// total-fast (float total-slow))
	    total-slow
	    total-fast)))
||#


	

(defmethod (:component-translation-array standard-color-map)
	   (component-function &optional (result-type 'art-8b))
  (or (get (locf derived-maps) component-function)
      (putprop (locf derived-maps)
	       (loop with len = (decode-raster-array map)
		     with tr = (make-array len :type result-type)
		     for i from 0 below len do
		 (multiple-value-bind (r g b) (send self ':read-color-map i)
		   (setf (aref tr i)
			 (funcall component-function r g b)))
		     finally (return tr))
	       component-function)))

(defun y-component (r g b)
  (fmax 0 (fmin 255 (round (* 255.5 (rgb->yiq r g b))))))
(defun intensity-component (r g b)
  (fmax 0 (fmin 255 (round (* #.(// 255.5 (expt 3.0 0.5)) (rgb->i r g b))))))
(defun red-component (r g b)
  (ignore g b)
  (fmax 0 (fmin 255 (round (* 255.5 r)))))
(defun green-component (r g b)
  (ignore r b)
  (fmax 0 (fmin 255 (round (* 255.5 g)))))
(defun blue-component (r g b)
  (ignore r g)
  (fmax 0 (fmin 255 (round (* 255.5 b)))))
(defun max-component (r g b)
  (red-component (max r g b) 0 0))
(defun min-component (r g b)
  (red-component (min r g b) 0 0))

(defvar *intensity-components* '((:intensity intensity-component :b&w-translation-array)
				 (nil intensity-component :b&w-translation-array)
				 (:y y-component :y-translation-array)
				 (:r red-component :red-translation-array)
				 (:b blue-component :blue-translation-array)
				 (:g green-component :green-translation-array)
				 (:min min-component :min-translation-array)
				 (:max max-component :max-translation-array)))

(defmethod (:b&w-translation-array standard-color-map)
	   (&optional (intensity-operator :intensity))
  (let ((op (assoc intensity-operator *intensity-components*)))
    (send self :component-translation-array
	  (or (second op)
	      (ferror "~A isn't as defined intensity component" intensity-operator)))))

(defmethod (:y-translation-array standard-color-map) ()
  (send self :component-translation-array 'y-component))
(defmethod (:red-translation-array standard-color-map) ()
  (send self :component-translation-array 'red-component))
(defmethod (:green-translation-array standard-color-map) ()
  (send self :component-translation-array 'green-component))
(defmethod (:blue-translation-array standard-color-map) ()
  (send self :component-translation-array 'blue-component))
(defmethod (:min-translation-array standard-color-map) ()
  (send self :component-translation-array 'min-component))
(defmethod (:max-translation-array standard-color-map) ()
  (send self :component-translation-array 'max-component))

(defmethod (:make-translation-array-with-alpha standard-color-map)
	   (base-array key function)
  (let ((aa (get (locf derived-maps) key)))
    (or (get (locf aa) base-array)
	(loop with len = (array-length base-array)
	      with new-array = (make-array len :type 'art-fixnum)
	      for idx from 0 below len do
	  (setf (aref new-array idx)
		(funcall function (aref base-array idx)))
	      finally (putprop (locf aa) new-array base-array)
		      (putprop (locf derived-maps) aa key)
		      (return new-array)))))

(defmethod (:translation-array-with-alpha standard-color-map) (name alpha)
  (let ((base-array (send self name)))
    (cond ((null alpha) base-array)
	  ((fixp alpha)
	   (setq alpha (ldb (byte 8 0) alpha))
	   (let* ((aa (get (locf derived-maps) alpha))
		  (newa (or (get (locf aa) base-array)
			    (loop for i being the array-elements of base-array
				  when ( alpha (ldb (byte 8 24) i))
				    return nil
				  finally 
				    (putprop (locf aa) base-array base-array)
				    (putprop (locf derived-maps) aa alpha)
				    (return base-array)))))
	     (or newa
		 (send self :make-translation-array-with-alpha
		       base-array
		       alpha
		       #'(lambda (old)
			   (%logdpb alpha (byte 8 24) old))))))
	  ((let ((opfn (combine-operator-function alpha '(r g b))))
	     (send self :make-translation-array-with-alpha
		   base-array
		   alpha
		   #'(lambda (old)
		       (%logdpb
			 (funcall opfn
				  (ldb (byte 8 0) old)
				  (ldb (byte 8 8) old)
				  (ldb (byte 8 16) old)
				  )
			 (byte 8 24)
			 old)))))
	  (t (ferror "Alpha must be NIL or a fixnum")))))

(defmethod (:red-contribution standard-color-map) ()
  (or (get (locf derived-maps) :red-contribition)
      (and (send self :orthogonal-rgb-contributions)
	   (get (locf derived-maps) :red-contribution))))
(defmethod (:green-contribution standard-color-map) ()
  (or (get (locf derived-maps) :green-contribition)
      (and (send self :orthogonal-rgb-contributions)
	   (get (locf derived-maps) :green-contribution))))
(defmethod (:blue-contribution standard-color-map) ()
  (or (get (locf derived-maps) :blue-contribition)
      (and (send self :orthogonal-rgb-contributions)
	   (get (locf derived-maps) :blue-contribution))))

(defmethod (:gray-contribution standard-color-map) (&optional (max-input-value 256.))
  1;generate a downconversion array to convert grayscale values to the closest
0  1;color in our palette.  Normally, the max value is 256.  Zoom-rectangle with
0  1;simply aref the gray-contribution array we produce.
0  (or (get (locf derived-maps) :gray-contribution)
      (and (send self :orthogonal-rgb-contributions max-input-value)
	   (get (locf derived-maps) :gray-contribution))
      (let* ((ga (make-array max-input-value :type 'art-8b)))
	(declare (sys:array-register ga))
	(loop for i from 0 below max-input-value
	      as ci = (// (* i 256) max-input-value)
	      as v = (send self :fixnum-closest-color-in-palette ci ci ci)
	      do (setf (aref ga i) v))
	(putprop (locf derived-maps) ga :gray-contribution)
      )))


(defmethod (:2b-gray-contribution standard-color-map) ()
  (or (get (locf derived-maps) :2b-gray-contribution)
      (and (send self :orthogonal-rgb-contributions)
	   (get (locf derived-maps) :2b-gray-contribution))
      (let* ((ga (make-array 4 :type 'art-8b)))
	(declare (sys:array-register ga))
	(loop for i from 0 below 4
	      as idx = (* i (// 255. 3))
	      as v = (send self :fixnum-closest-color-in-palette idx idx idx)
	      do (setf (aref ga i) v))
	(putprop (locf derived-maps) ga :2b-gray-contribution)
	)))

(defmethod (:4b-gray-contribution standard-color-map) ()
  (or (get (locf derived-maps) :4b-gray-contribution)
      (and (send self :orthogonal-rgb-contributions)
	   (get (locf derived-maps) :4b-gray-contribution))
      (let* ((ga (make-array 16 :type 'art-8b)))
	(declare (sys:array-register ga))
	(loop for i from 0 below 16
	      as idx = (* i (// 255 15))
	      as v = (send self :fixnum-closest-color-in-palette idx idx idx)
	      do (setf (aref ga i) v))
	(putprop (locf derived-maps) ga :4b-gray-contribution)
	)))

(defmethod (:red-contribution-with-error standard-color-map) ()
  (or (get (locf derived-maps) :red-contribution-with-error)
      (send self :contribution-with-error :red-contribution :red-contribution-with-error
	    ;3/4 because we want errors to decay fairly rapidly
	    #'(lambda (i a) (// (* 3 (- (ldb (byte 8 0) a) i)) 4)))))

(defmethod (:green-contribution-with-error standard-color-map) ()
  (or (get (locf derived-maps) :green-contribution-with-error)
      (send self :contribution-with-error :green-contribution :green-contribution-with-error
	    ;3/4 because we want errors to decay fairly rapidly
	    #'(lambda (i a) (// (* 3 (- (ldb (byte 8 8) a) i)) 4)))))

(defmethod (:blue-contribution-with-error standard-color-map) ()
  (or (get (locf derived-maps) :blue-contribution-with-error)
      (send self :contribution-with-error :blue-contribution :blue-contribution-with-error
	    ;3/4 because we want errors to decay fairly rapidly
	    #'(lambda (i a) (// (* 3 (- (ldb (byte 8 16) a) i)) 4)))))

(defmethod (:gray-contribution-with-error standard-color-map) ()
  (or (get (locf derived-maps) :gray-contribution-with-error)
      (send self :contribution-with-error :gray-contribution :gray-contribution-with-error
	    #'(lambda (i a)
		(- (fixnum-rgb->i (ldb (byte 8 0) a) (ldb (byte 8 8) a) (ldb (byte 8 16) a))
		   i)))))

(defmethod (:2b-gray-contribution-with-error standard-color-map) ()	
  (or (get (locf derived-maps) :2b-gray-contribution-with-error)
      (send self :contribution-with-error :2b-gray-contribution :2b-gray-contribution-with-error
	    #'(lambda (i a)
		(// (- (fixnum-rgb->i
			 (ldb (byte 8 0) a)
			 (ldb (byte 8 8) a) (ldb (byte 8 16) a))
		       (// (* 255 i) 3))
		    64)))
      ))

(defmethod (:4b-gray-contribution-with-error standard-color-map) ()
  (or (get (locf derived-maps) :4b-gray-contribution-with-error)
      (send self :contribution-with-error :4b-gray-contribution :4b-gray-contribution-with-error
	    #'(lambda (i a)
		(// (- (fixnum-rgb->i
			 (ldb (byte 8 0) a)
			 (ldb (byte 8 8) a) 
			 (ldb (byte 8 16) a))
		       (// (* 255 i) 15))
		    16)))
      ))

(defmethod (:contribution-with-error standard-color-map) (source result error-fun)
  (declare (sys:downward-funarg error-fun))
  (or (get (locf derived-maps) result)
      (loop with old = (send self source)
	    and xc = (if (memq source '(:gray-contribution :2b-gray-contribution
					:4b-gray-contribution))
			 0
			 (+ (aref (send self(if (eq source :red-contribution)
						:green-contribution
						:red-contribution))
				  0)
			    (aref (send self (if (eq source :blue-contribution)
						 :red-contribution
						 :blue-contribution))
				  0)))
	    with new = (make-array (array-length old) :type 'art-fixnum)
	    with full = (send self :full-color-translation-array)
	    for index from 0 below (array-length old)
	    as data = (aref old index)
	    do
	(setf (aref new index)
	      (%logdpb (funcall error-fun index (aref full (+ data xc)))
		       (byte 16 16)
		       data)
	      )
	finally (putprop (locf derived-maps) new result)
		(return new))))

#||
(defmethod (:show-error standard-color-map) (which)
  (loop with map = (send self which)
	for i from 0 below (array-length map)
	collect
	  (ash (aref map i) -16)
	  #m(list i
		(ldb (byte 8 0) (aref map i))
		(ash (aref map i) -16))))

||#
(defmethod (:map-manager standard-color-map) ()
  (send self :get :map-manager))

(defmethod (:orthogonal-rgb-contributions standard-color-map)
	   (&optional (max-input-value 256))
  1;generate a downconversion array to convert grayscale values to the closest
0  1;color in our palette.  Normally, the max value is 256.  Zoom-rectangle with
0  1;simply aref the contribution arrays we produce.
0  (let ((mm (send self :map-manager)))
    (when mm
      (multiple-value-bind (r g b)
	  (send mm :send-if-handles :orthogonal-rgb-segments max-input-value)

	(when (and r g b)
	  (putprop (locf derived-maps) r :red-contribution)
	  (putprop (locf derived-maps) g :green-contribution)
	  (putprop (locf derived-maps) b :blue-contribution)
	  
	  (let ((gray (make-array max-input-value :type 'art-8b))
		(4b-gray (make-array 16 :type 'art-8b))
		(2b-gray (make-array 4 :type 'art-8b))
		(r r)(g g)(b b))
	    (declare (sys:array-register r g b gray 2b-gray 4b-gray))
	    (loop for i from 0 below max-input-value 
		  do
	      (setf (aref gray i) (+ (aref r i)(aref g i)(aref b i))))
	    (putprop (locf derived-maps) gray :gray-contribution)
	    (loop with inc = (// (1- max-input-value) 15)
		  for i from 0 to 15
		  do (setf (aref 4b-gray i)
			   (aref gray (* i inc))))
	    (putprop (locf derived-maps) 4b-gray :4b-gray-contribution)
	    (loop with inc = (// (1- max-input-value) 3)
		  for i from 0 to 3
		  do (setf (aref 2b-gray i)
			   (aref gray (* i inc))))
	    (putprop (locf derived-maps) 2b-gray :2b-gray-contribution)
	    ))))))


(defmethod (:get-other-palette standard-color-map) (other)
  (get (locf derived-maps) other))
(defmethod (:set-derived-palette standard-color-map) (other new)
  (putprop (locf derived-maps) new other))
(defmethod (:combine-palettes standard-color-map) (other-palette)
  (or (and (if (instancep other-palette)
	       (send other-palette :get-other-palette self)
	       t)
	   (car (send self :get-other-palette other-palette)))
      (let* ((from-size (send self :size))
	     (to-size (send other-palette :size))
	     (new-from (make-array to-size :type 'art-8b))
	     (new-to (make-array from-size :type 'art-8b)))
	(declare (sys:array-register new))
	(loop for i from 0 below to-size
	      do
	  (setf (aref new-from i)
		(multiple-value-bind ( r g b) (send other-palette :read-color-map i)
		  (send self :flonum-closest-color-in-palette  r g b))))
	(loop for i from 0 below from-size do
	  (setf (aref new-to i)
		(multiple-value-bind ( r g b) (send self :read-color-map i)
		  (send other-palette :flonum-closest-color-in-palette  r g b)))
		  )
	(send self :set-derived-palette other-palette (cons new-to new-from))
	(send other-palette :set-derived-palette self (cons new-from new-to))
	new-to
	)))

(defmethod (:intensity-bounds standard-color-map)
	   (&key (lower-bound 1)
		 (upper-bound (- (array-dimension-n 2 map) 2)))
  (loop with min and max
	for i from lower-bound to upper-bound
	do
    (multiple-value-bind (r g b) (send self :read-color-map i)
      (let ((intensity (rgb->i r g b)))
	(when (or (null min) (< intensity min))
	  (setq min intensity))
	(when (or (null max) (< max intensity))
	  (setq max intensity))))
    finally (return (values (// min (sqrt 3)) (// max (sqrt 3))))))

(defmethod (:enhance-contrast standard-color-map)
	   (&key (to self)
		 (lower-bound 1)
		 (upper-bound (- (array-dimension-n 2 map) 2))
		 (new-min-intensity 0)
		 (new-max-intensity 1.0))
  (multiple-value-bind (min max)
    (send self :intensity-bounds
	  :lower-bound lower-bound
	  :upper-bound upper-bound)
    (loop for idx from lower-bound to upper-bound
	  with di = (- new-min-intensity min)
	  with mi = (// (- new-max-intensity new-min-intensity)
			(- max min))
	  do
      (multiple-value-bind (r g b) (send self :read-color-map idx)
	(multiple-value-bind (i h s) (rgb->ihs r g b)
	  (let ((ni (+ new-min-intensity (* (+ i di) mi))))
	    (multiple-value-bind (nr ng nb)
		(ihs->rgb ni h s)
	      (send to :write-color-map idx nr ng nb))))))))

#||
;; The idea here is to sort the color map entries by brightness = (fmax r,g,b),
;; then reflect the order of the top 1/2 of the values, so that the color map
;; entries at address x and (lognot x) are far apart in color space, thus making
;; the cursor visible everywhere.
(defun make-remap-array (color-map &optional (first-map-entry 1))
  (let* ((n (send color-map :color-map-description))
	 (remap-array (make-array n))
	 (n/2 (// n 2)))
    (with-stack-array (sort-arr (* 2 n))
      (loop repeat n
	    for map-index from 0
	    for i from 0 by 2
	    do
	    (setf (aref sort-arr i)
		  (multiple-value-bind (r g b)
		      (send color-map :read-color-map map-index)
		    (max r g b)))
	    (setf (aref sort-arr (1+ i))
		  map-index))
      (sort-grouped-array sort-arr 2 #'<)
      (loop repeat n/2
	    for map-index from first-map-entry
	    for i from 1 by 2
	    do (setf (aref remap-array (aref sort-arr i)) map-index))
      (loop repeat n/2
	    for map-index from (+ n/2 first-map-entry)
	    for i from (1- (array-length sort-arr)) by -2
	    do (setf (aref remap-array (aref sort-arr i)) map-index))
      (setq *bucket-remap-array* remap-array))))
||#

(2 0 (NIL 0) (NIL :BOLD :LARGE) "MEDFNTB");;
;; Add capacity to act as a map manager
;;

0(defflavor random-color-map-manager (super map) ()
  :initable-instance-variables
  :writable-instance-variables)

(defmethod (:compute-rgb-slots random-color-map-manager) (r g b)
  (send map :flonum-closest-color-in-palette r g b))

(defmethod (:compute-rgb-data random-color-map-manager) (r g b)
  (send map :flonum-closest-color-in-palette r g b))

(defmethod (:number-of-segments random-color-map-manager) (&optional ignore)
  (send map :color-map-description))

(defmethod (:create-balanced-map random-color-map-manager)
	   (&optional lb ub noupdate (map (send super ':color-map-image)) map-num)
  (ignore lb ub)
  (send map :write-screen-map super map-num noupdate))

