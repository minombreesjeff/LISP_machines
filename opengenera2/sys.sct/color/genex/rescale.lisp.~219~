;;; -*- Mode: LISP; Base: 10.; Package: COLOR; Syntax: Zetalisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")window-has-hardware-write-mask0 (to-window write-mask)
  (and to-window
       (= 1 (tv:sheet-all-exposed to-window))
       (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");the window system doesn't get plain bitblt with a mask right,
0       2;so if there isn't color hardware to do it for us, do it the slow way
0       (or (null write-mask)
	   (eql write-mask -1)
	   (let ((ma (send (send to-window :screen)
			   :figure-usable-color-parameters
			   write-mask
			   -1
			   tv:alu-seta)))
	     (eql ma write-mask)))))


1;;
;;
;; Methods for rescaling images
;;
;;

(3 0 (NIL 0) (NIL :ITALIC :LARGE) "MEDFNTI");;
;; First the simplest - an elementary image process
;; to do pixel replication
;;
0(defmethod (pixel-copy-propriety-test image-process)
	   (old-width new-width old-height new-height &rest ignore
		      &key &allow-other-keys)
  (and (= new-width old-width)
       (= new-height old-height)
       ))

(eval-when (compile load eval)
(defconst1 pixel-copy0 (make-instance 'image-process
				      :main-loop :copy
				      :name :pixel-copy
				      :create-on-demand t
				      :propriety-test 'pixel-copy-propriety-test
				      :permitted-args '(:default-alpha :rescale :to-screen
								       :from-field :to-field
								       )
				      :ignored-args '(:dither :jitter :rescale)
				      :arglist '(width height
						       src sx sy
						       dest dx dy
						       ignore ignore)
				      ))
(defun pixel-copy-component-image-processes ()
  (loop for source in '(:2b-8b :red :green :blue :alpha) nconc
    (loop for destination in '(:red :green :blue :alpha)
	  collect
	  `((:fetch ,source :store ,destination)
	    (image-process-macro :fetch ,(if (eq source :red) :rgba source)
				 :store ,destination)
	    ))))

(defmacro create-component-pixel-copiers (&key (compile :return))
  (let ((res (pixel-copy-component-image-processes)))
    (append
      (create-image-processes
	 'pixel-copy
	 res
	 :prefix "COMPONENT-COPY"
	 :compile compile)
      (loop for (typ) in res
	    collect
	      `(remember-image-process
		 pixel-copy
		 ',(append typ `(:dither t))
		 ',typ)
	    collect
	      `(remember-image-process
		 pixel-copy
		 ',(append typ `(:dither t :jitter t))
		 ',typ)
	      ))))

(defmacro bb-spec (shift)
  (logior alu-shift (selector shift eql
		      (:M0 (dpb 0 (byte 2 1) 0))
		      ((0 8 16 24) (dpb (// shift 8) (byte 2 1) 1))
		      ((-8 -16 -24) (dpb (// shift -8) (byte 2 1) 0))
		      (t (ferror "~A doesn't specify an unpacked bitblt" shift)))))
)
(1create-component-pixel-copiers0 :compile :defer)
						

2;;
;; The pixel copiers that use microcode assist, or that we want to 
;; have defined and compiled anyway.
;;
0(defun1 pixel-copy-1b->xx-bitblt0 (alu width height src sx sy dest dx dy)
  (let ((tv:bitblt-unpacking-constant 0))
    (%DRAW-RECTANGLE WIDTH HEIGHT DX DY
		     (logior %template-alu %extended-alu (or alu tv:alu-setz)) DEST))
  (TV:BITBLT-BY-SEGMENTS (logior %template-alu %extended-alu (or alu tv:alu-seta))
			 WIDTH HEIGHT SRC SX SY DEST DX DY))


(def-image-process 1pixel-copy-1b->xx-masked 0pixel-copy
  :key-args (:fetch :1b-32b :store :rgba :write-mask t)
  :extra-keyword-args (to-window)
  (cond (to-window
	 (let ((tv:bitblt-unpacking-mask write-mask)
	       (tv:bitblt-unpacking-constant -1)
	       (scr (tv:sheet-screen to-window)))
	   (labels ((pixel-copy-1b->xx-window (alu width height src sx sy dest dx dy)
		      (declare (sys:downward-function))
		      (send scr :%draw-1-bit-raster width height
				   src sx sy
				   dest dx dy
				   alu color:alu-noop to-window)))

	     (send scr :%draw-rectangle width height
		   dx dy tv:alu-setz to-window)

	     (image-process-macro :fetch :1b-32b :store :rgba
				  :main-loop :bitblt 
				  :alu (logior %template-alu %extended-alu tv:alu-seta)
				  :per-color (:bitblt pixel-copy-1b->xx-window))))
	 )
	(color-microcode-p 
	 (let* ((bpp (si:array-element-byte-size dest))
		(tv:bitblt-unpacking-mask
		  (color:effective-write-mask write-mask nil bpp))
		(tv:bitblt-unpacking-constant -1))
	   (image-process-macro :fetch :1b-32b :store :rgba
				:main-loop :bitblt
				:alu (logior %template-alu %extended-alu tv:alu-seta)
				:per-color (:bitblt pixel-copy-1b->xx-bitblt))
	 ))
	((and write-mask ( write-mask -1))
	 (image-process-macro :fetch :1b-32b :store :rgba :write-mask t))
	(t (image-process-macro :fetch :1b-32b :store :rgba))
	))

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :rgba :write-mask t :dither t)
			'(:fetch :1b-32b :store :rgba :write-mask t))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :rgba :write-mask t :dither t :jitter t)
			'(:fetch :1b-32b :store :rgba :write-mask t))

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :rgba)
			'(:fetch :1b-32b :store :rgba :write-mask t))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :rgba :dither t)
			'(:fetch :1b-32b :store :rgba))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :rgba :dither t :jitter t)
			'(:fetch :1b-32b :store :rgba))

(def-image-process 1pixel-copy-1b->r 0pixel-copy
  :key-args (:fetch :1b-32b :store :red)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window
			   :to-field to-field
			   :write-mask #o377
			   :per-line-function per-line-function
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :red :dither t)
			'(:fetch :1b-32b :store :red))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :red :dither t :jitter t)
			'(:fetch :1b-32b :store :red))

(def-image-process 1pixel-copy-1b->r-masked 0pixel-copy
  :key-args (:fetch :1b-32b :store :red :write-mask t)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window :to-field to-field
			   :per-line-function per-line-function
			   :write-mask (logand #o377 (or write-mask -1))
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :red :write-mask t :dither t)
			'(:fetch :1b-32b :store :red :write-mask t))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :red :write-mask t :dither t :jitter t)
			'(:fetch :1b-32b :store :red :write-mask t))

(def-image-process 1pixel-copy-1b->g 0pixel-copy
  :key-args (:fetch :1b-32b :store :green)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window :to-field to-field
			   :per-line-function per-line-function
			   :write-mask (lsh #o377 8)
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :green :dither t)
			'(:fetch :1b-32b :store :green))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :green :dither t :jitter t)
			'(:fetch :1b-32b :store :green))

(def-image-process 1pixel-copy-1b->g-masked 0pixel-copy
  :key-args (:fetch :1b-32b :store :green :write-mask t)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window :to-field to-field
			   :per-line-function per-line-function
			   :write-mask (logand (lsh #o377 8) (or write-mask -1))
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :green :write-mask t :dither t)
			'(:fetch :1b-32b :store :green :write-mask t))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :green :write-mask t :dither t :jitter t)
			'(:fetch :1b-32b :store :green :write-mask t))

(def-image-process 1pixel-copy-1b->b 0pixel-copy
  :key-args (:fetch :1b-32b :store :blue)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window :to-field to-field
			   :per-line-function per-line-function
			   :write-mask (lsh #o377 16.)
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :blue :dither t)
			'(:fetch :1b-32b :store :blue))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :blue :dither t :jitter t)
			'(:fetch :1b-32b :store :blue))

(def-image-process 1pixel-copy-1b->b-masked 0pixel-copy
  :key-args (:fetch :1b-32b :store :blue :write-mask t)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window :to-field to-field
			   :per-line-function per-line-function
			   :write-mask (logand (lsh #o377 16.) (or write-mask -1))
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :blue :write-mask t :dither t)
			'(:fetch :1b-32b :store :blue :write-mask t))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :blue :write-mask t :dither t :jitter t)
			'(:fetch :1b-32b :store :blue :write-mask t))

(def-image-process 1pixel-copy-1b->alpha 0pixel-copy
  :key-args (:fetch :1b-32b :store :alpha)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window :to-field to-field
			   :per-line-function per-line-function
			   :write-mask (lsh #o377 24.)
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :alpha :dither t)
			'(:fetch :1b-32b :store :alpha))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :alpha :dither t :jitter t)
			'(:fetch :1b-32b :store :alpha))

(def-image-process 1pixel-copy-1b->alpha-masked 0pixel-copy
  :key-args (:fetch :1b-32b :store :alpha :write-mask t)
  :extra-keyword-args (to-window)
  (pixel-copy-1b->xx-masked width height src sx sy dest dx dy nil nil
			   :to-window to-window :to-field to-field
			   :per-line-function per-line-function
			   :write-mask (logand (lsh #o377 24.) (or write-mask -1))
			   :from-field from-field)
  )

(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :alpha :write-mask t :dither t)
			'(:fetch :1b-32b :store :alpha :write-mask t))
(remember-image-process pixel-copy
			'(:fetch :1b-32b :store :alpha :write-mask t :dither t :jitter t)
			'(:fetch :1b-32b :store :alpha :write-mask t))

(defun 1tv:bitblt-masked-by-segments0 (alu width height src sx sy dest dx dy)
  (TV:BITBLT-BY-SEGMENTS alu WIDTH HEIGHT
			 SRC SX SY DEST DX DY
			 :function #'tv:bitblt-masked))

(def-image-process 1pixel-copy-rgba->rgba-masked0 pixel-copy
  :key-args (:fetch :rgba :store :rgba1 0:write-mask t)
  :extra-keyword-args (to-window)
  (cond ((window-has-hardware-write-mask to-window write-mask)
	 (let ((scr (tv:sheet-screen to-window))
	       (tv:bitblt-unpacking-mask (or write-mask -1)))
	   (labels ((screen-bitblt (alu width height src sx sy dest dx dy)
		      (declare (sys:downward-function))
		      (send scr :%bitblt alu width height src sx sy dest dx dy to-window)))
	     (image-process-macro :fetch :rgba :store :rgba
				  :main-loop :bitblt
				  :alu tv:alu-seta
				  :per-color (:bitblt screen-bitblt)))))
	((and write-mask (not (eql write-mask -1)))
	 (if #+imach color-microcode-p
	     #+3600 nil
	     (let* ((bpp (si:array-element-byte-size dest))
		    (tv:bitblt-unpacking-mask (effective-write-mask write-mask nil bpp)))
	       (image-process-macro :fetch :rgba :store :rgba
				    :write-mask nil
				    :main-loop :bitblt
				    :per-color (:bitblt tv:bitblt-masked-by-segments)
				    :alu tv:alu-seta))
	     (image-process-macro :fetch :rgba :store :rgba
				  :write-mask t
				  :alu tv:alu-seta)
	     ))
	(t (image-process-macro :fetch :rgba :store :rgba
				:write-mask nil
				:main-loop :bitblt
				:per-color (:bitblt tv:bitblt-by-segments)
				:alu tv:alu-seta))))

(remember-image-process pixel-copy
			'(:fetch :rgba :store :rgba1 0:write-mask t :dither t)
			'(:fetch :rgba :store :rgba1 0:write-mask t))
(remember-image-process pixel-copy
			'(:fetch :rgba :store :rgba1 0:write-mask t :dither t :jitter t)
			'(:fetch :rgba :store :rgba1 0:write-mask t))

(remember-image-process pixel-copy
			'(:fetch :rgba :store :rgba)
			'(:fetch :rgba :store :rgba :write-mask t))

(remember-image-process pixel-copy
			'(:fetch :rgba :store :rgba :dither t)
			'(:fetch :rgba :store :rgba))
(remember-image-process pixel-copy
			'(:fetch :rgba :store :rgba :dither t :jitter t)
			'(:fetch :rgba :store :rgba))

(def-image-process 1pixel-copy-packed-rgb->packed-rgb 0pixel-copy
  :key-args (:fetch :packed-rgb :store :packed-rgb)
  (let ((width (* 3 width))
	(sx (* 3 sx))
	(dx (* 3 dx)))
    (image-process-macro :fetch :packed-rgb :store :packed-rgb
			 :main-loop :bitblt
			 :per-line-function per-line-function
			 :per-color (:bitblt tv:bitblt-by-segments)
			 :alu tv:alu-seta)))

(remember-image-process pixel-copy
			'(:fetch :packed-rgb :store :packed-rgb :dither t)
			'(:fetch :packed-rgb :store :packed-rgb))
(remember-image-process pixel-copy
			'(:fetch :packed-rgb :store :packed-rgb :dither t :jitter t)
			'(:fetch :packed-rgb :store :packed-rgb))

(def-image-process 1pixel-copy-packed-yuv->packed-yuv0 pixel-copy
  :key-args (:fetch :yuv-rgb :store :packed-yuv-from-rgb)
  (if (and (evenp sx)(evenp dx)(evenp width))
      (let ((width (* 2 width))
	    (sx (* 2 sx))
	    (dx (* 2 dx)))
	2;we can only use BITBLT if all the X parameters are even.  Otherwise,
0	2;we have to unpack RGB and repack it.
0	(image-process-macro :fetch :packed-yuv :store :packed-yuv
			     :main-loop :bitblt
			     :per-color (:bitblt tv:bitblt-by-segments)
			     :alu tv:alu-seta))
      (image-process-macro :fetch :yuv-rgb :store :packed-yuv-from-rgb)
      ))

(remember-image-process pixel-copy
			'(:fetch :yuv-rgb :store :packed-yuv-from-rgb :dither t)
			'(:fetch :yuv-rgb :store :packed-yuv-from-rgb))
(remember-image-process pixel-copy
			'(:fetch :yuv-rgb :store :packed-yuv-from-rgb :dither t :jitter t)
			'(:fetch :yuv-rgb  :store :packed-yuv-from-rgb))


(def-image-process 1pixel-copy-r+g+b->r+g+b 0pixel-copy
  :key-args (:fetch :r+g+b :store :r+g+b)
    (image-process-macro :fetch :r+g+b :store :r+g+b
			 :main-loop :bitblt
			 :per-color (:bitblt tv:bitblt-by-segments)
			 :alu tv:alu-seta)
    )

(remember-image-process pixel-copy
			'(:fetch :r+g+b :store :r+g+b :dither t)
			'(:fetch :r+g+b :store :r+g+b))
(remember-image-process pixel-copy
			'(:fetch :r+g+b :store :r+g+b :dither t :jitter t)
			'(:fetch :r+g+b :store :r+g+b)) 


(def-image-process 1pixel-copy-r+g+b->r+g+b-masked0 pixel-copy
  :key-args (:fetch :r+g+b :store :r+g+b1 0:write-mask t)
  :extra-keyword-args (to-window)
  (loop for s in src
	as d in dest
	as m first (or write-mask -1) then (if to-window m (lsh m -8))
	as ma = (if to-window m (dpb m (byte 8 0) -1))
	do
    ;note that this kludgery with the write mask is to compensate for
    ;the fact (1) write mask hardware is not shifted in the packed mode arrays
    (pixel-copy-rgba->rgba-masked width height s sx sy d dx dy nil nil
					 :to-window to-window
					 :write-mask ma
					 :per-line-function per-line-function
					 :from-field from-field
					 :to-field to-field)))

(remember-image-process pixel-copy
			'(:fetch :r+g+b :store :r+g+b :dither t :write-mask t)
			'(:fetch :r+g+b :store :r+g+b :write-mask t))
(remember-image-process pixel-copy		;
			'(:fetch :r+g+b :store :r+g+b :dither t :jitter t :write-mask t)
			'(:fetch :r+g+b :store :r+g+b :write-mask t))

(def-image-process 1pixel-copy-r->r+g+b 0pixel-copy
  1:0key-args (:fetch :rgba :store :r+g+b)
  (if color-microcode-p
      (image-process-macro :fetch :rgba :store :r+g+b
			   :main-loop :bitblt
			   :per-color (:bitblt tv:bitblt-by-segments)
			   :alu tv:alu-seta)
      (image-process-macro :fetch :rgba :store :r+g+b)))

(remember-image-process pixel-copy
			'(:fetch :rgba :store :r+g+b :dither t)
			'(:fetch :rgba :store :r+g+b))
(remember-image-process pixel-copy
			'(:fetch :rgba :store :r+g+b :dither t :jitter t)
			'(:fetch :rgba :store :r+g+b))

(def-image-process 1pixel-copy-r->rgba 0pixel-copy
  :key-args (:fetch :red :store :rgba)
  (let ((dsize (si:array-element-byte-size dest))
	(ssize (si:array-element-byte-size src)))
    (if (and color-microcode-p (eql dsize 32.)(eql ssize 8))
	(image-process-macro :fetch :rgba :store :rgba
			     :main-loop :bitblt
			     :per-color (:bitblt tv:bitblt-by-segments)
			     :alu (bb-spec :m0))
	(image-process-macro :fetch :red :store :rgba)
	)))

(remember-image-process pixel-copy
			'(:fetch :red :store :rgba :dither t)
			'(:fetch :red :store :rgba))
(remember-image-process pixel-copy
			'(:fetch :red :store :rgba :dither t :jitter t)
			'(:fetch :red :store :rgba))

(def-image-process 1pixel-copy-g->rgba 0pixel-copy
  :key-args (:fetch :green :store :rgba)
  (let ((dsize (si:array-element-byte-size dest))
	(ssize (si:array-element-byte-size src)))
    (if (and color-microcode-p (eql dsize 32.)(eql ssize 8))
      (image-process-macro :fetch :blue :store :rgba
			   :main-loop :bitblt
			   :per-color (:bitblt tv:bitblt-by-segments)
			   :alu (bb-spec -8))
      (image-process-macro :fetch :green :store :rgba)
      )))

(remember-image-process pixel-copy
			'(:fetch :green :store :rgba :dither t)
			'(:fetch :green :store :rgba))
(remember-image-process pixel-copy
			'(:fetch :green :store :rgba :dither t :jitter t)
			'(:fetch :green :store :rgba))

(def-image-process 1pixel-copy-b->rgba 0pixel-copy
  :key-args (:fetch :blue :store :rgba)
  (let ((dsize (si:array-element-byte-size dest))
	(ssize (si:array-element-byte-size src)))
    (if (and color-microcode-p (eql dsize 32.)(eql ssize 8))
      (image-process-macro :fetch :blue :store :rgba
			   :main-loop :bitblt
			   :per-color (:bitblt tv:bitblt-by-segments)
			   :alu (bb-spec -16))
      (image-process-macro :fetch :blue :store :rgba)
      )))

(remember-image-process pixel-copy
			'(:fetch :blue :store :rgba :dither t)
			'(:fetch :blue :store :rgba))
(remember-image-process pixel-copy
			'(:fetch :blue :store :rgba :dither t :jitter t)
			'(:fetch :blue :store :rgba))

(def-image-process 1pixel-copy-alpha->rgba 0pixel-copy
  :key-args (:fetch :alpha :store :rgba)
  (let ((dsize (si:array-element-byte-size dest))
	(ssize (si:array-element-byte-size src)))
    (if (and color-microcode-p (eql dsize 32.)(eql ssize 8))
      (image-process-macro :fetch :alpha :store :rgba
			   :main-loop :bitblt
			   :per-color (:bitblt tv:bitblt-by-segments)
			   :alu (bb-spec -24))
      (image-process-macro :fetch :alpha :store :rgba)
      )))

(remember-image-process pixel-copy
			'(:fetch :alpha :store :rgba :dither t)
			'(:fetch :alpha :store :rgba))
(remember-image-process pixel-copy
			'(:fetch :alpha :store :rgba :dither t :jitter t)
			'(:fetch :alpha :store :rgba))

(def-image-process 1pixel-copy-rgba->r 0pixel-copy
  :key-args (:store :red :fetch :rgba :write-mask t)
  :extra-keyword-args (to-window)
  (let* ((null-mask (%logdpb 0 (byte 8 0) -1))
	 (write-mask (logior (or write-mask -1)
			     null-mask))
	 (dsize (si:array-element-byte-size dest))
	 (ssize (si:array-element-byte-size src)))

    (cond ((eql write-mask null-mask))
	  ((when (and to-window (eql dsize 8.)(eql ssize 32))
	     (tv:with-prepared-sheet-or-raster (to-window :screen scr :window win)
	       (when scr
		 (let ((ppm (get-special-array scr :red dest)))
		   (when ppm
		     (pixel-copy-rgba->rgba-masked width height src sx sy ppm dx dy nil nil
						   :write-mask write-mask
						   :to-window to-window
						   :from-field from-field
						   :to-field to-field
						   :per-line-function per-line-function)
		     t))))))
	  (( write-mask -1)
	   (image-process-macro :fetch :rgba :store :red :write-mask t))
	  ((and color-microcode-p (eql dsize 8.)(eql ssize 32))
	   (image-process-macro :fetch :rgba :store :red
				:main-loop :bitblt
				:per-color (:bitblt tv:bitblt-by-segments)
				:alu (bb-spec 0)))
	  (t (image-process-macro :fetch :rgba :store :red)
	     ))))


(remember-image-process pixel-copy
			'(:store :red :fetch :rgba)
			'(:store :red :fetch :rgba :write-mask t))

(remember-image-process pixel-copy
			'(:store :red :fetch :rgba :dither t :write-mask t)
			'(:store :red :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :red :fetch :rgba :dither t :jitter t :write-mask t)
			'(:store :red :fetch :rgba))


(remember-image-process pixel-copy
			'(:store :red :fetch :rgba :dither t)
			'(:store :red :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :red :fetch :rgba :dither t :jitter t)
			'(:store :red :fetch :rgba))


(def-image-process 1pixel-copy-rgba->g 0pixel-copy
  :key-args (:store :green :fetch :rgba :write-mask t)
  :extra-keyword-args (to-window)
  (let* ((null-mask (%logdpb 0 (byte 8 8) -1))
	 (write-mask (logior (or write-mask -1)
			     null-mask))
	 (dsize (si:array-element-byte-size dest))
	 (ssize (si:array-element-byte-size src))
	 )
    (cond ((eql write-mask null-mask))
	  ((when (and to-window (eql dsize 32.)(eql ssize 8))
	     (tv:with-prepared-sheet-or-raster (to-window :screen scr :window win)
	       (when scr
		 (let ((ppm (get-special-array scr :green dest)))
		   (when ppm
		     (pixel-copy-rgba->rgba-masked width height src sx sy ppm dx dy nil nil
					   :write-mask write-mask
					    :to-window to-window
					    :from-field from-field
					    :to-field to-field
					    :per-line-function per-line-function)
		     t))))))
	  (( write-mask -1)
	   (image-process-macro :fetch :rgba :store :green :write-mask t))
	  ((and color-microcode-p (eql dsize 32.)(eql ssize 8))
	   (image-process-macro :fetch :rgba :store :green
				:main-loop :bitblt
				:per-color (:bitblt tv:bitblt-by-segments)
				:alu (bb-spec 8)))
	  (t (image-process-macro :fetch :rgba :store :green)
	     ))))

(remember-image-process pixel-copy
			'(:store :green :fetch :rgba)
			'(:store :green :fetch :rgba :write-mask t))

(remember-image-process pixel-copy
			'(:store :green :fetch :rgba :dither t :write-mask t)
			'(:store :green :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :green :fetch :rgba :dither t :jitter t :write-mask t)
			'(:store :green :fetch :rgba))

(remember-image-process pixel-copy
			'(:store :green :fetch :rgba :dither t)
			'(:store :green :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :green :fetch :rgba :dither t :jitter t)
			'(:store :green :fetch :rgba))

(def-image-process 1pixel-copy-rgba->b 0pixel-copy
  :key-args (:store :blue :fetch :rgba :write-mask t)
  :extra-keyword-args (to-window)
  (let* ((null-mask (%logdpb 0 (byte 8 16) -1))
	 (write-mask (logior (or write-mask -1)
			     null-mask))
	 (dsize (si:array-element-byte-size dest))
	 (ssize (si:array-element-byte-size src))
	 )
    (cond ((eql write-mask null-mask))
	  ((when (and to-window (eql dsize 32.)(eql ssize 8))
	     (tv:with-prepared-sheet-or-raster (to-window :screen scr :window win)
	       (when scr
		 (let ((ppm (get-special-array scr :blue dest)))
		   (when ppm
		     (pixel-copy-rgba->rgba-masked width height src sx sy ppm dx dy nil nil 
					    :to-window to-window
					    :write-mask write-mask
					    :from-field from-field
					    :to-field to-field
					    :per-line-function per-line-function)
		     t))))))
	  (( write-mask -1)
	   (image-process-macro :fetch :rgba :store :blue :write-mask t))
	  ((and color-microcode-p (eql dsize 32.)(eql ssize 8))
	   (image-process-macro :fetch :rgba :store :blue
				:main-loop :bitblt
				:per-color (:bitblt tv:bitblt-by-segments)
				:alu (bb-spec 16)))
	  (t (image-process-macro :fetch :rgba :store :blue)
	     ))))

(remember-image-process pixel-copy
			'(:store :blue :fetch :rgba)
			'(:store :blue :fetch :rgba :write-mask t))

(remember-image-process pixel-copy
			'(:store :blue :fetch :rgba :dither t :write-mask t)
			'(:store :blue :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :blue :fetch :rgba :dither t :jitter t :write-mask t)
			'(:store :blue :fetch :rgba))

(remember-image-process pixel-copy
			'(:store :blue :fetch :rgba :dither t)
			'(:store :blue :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :blue :fetch :rgba :dither t :jitter t)
			'(:store :blue :fetch :rgba))

(def-image-process 1pixel-copy-rgba->alpha 0pixel-copy
  :key-args (:store :alpha :fetch :rgba :write-mask t)
  :extra-keyword-args (to-window)
  (let* ((null-mask (%logdpb 0 (byte 8 24) -1))
	 (write-mask (logior (or write-mask -1)
			     null-mask))
	 (dsize (si:array-element-byte-size dest))
	 (ssize (si:array-element-byte-size src))
	 )
    (cond ((eql write-mask null-mask))
	  ((when (and to-window (eql dsize 32.)(eql ssize 8))
	     (tv:with-prepared-sheet-or-raster (to-window :screen scr :window win)
	       (when scr
		 (let ((ppm (get-special-array scr :blue dest)))
		   (when ppm
		     (pixel-copy-rgba->rgba-masked width height src sx sy ppm dx dy nil nil
					   :write-mask write-mask
					    :to-window to-window
					    :from-field from-field
					    :to-field to-field
					    :per-line-function per-line-function)
		     t))))))
	  (( write-mask -1)
	   (image-process-macro :fetch :rgba :store :alpha :write-mask t))
	  ((and color-microcode-p (eql dsize 32.)(eql ssize 8))
	   (image-process-macro :fetch :rgba :store :alpha
				:main-loop :bitblt
				:per-color (:bitblt tv:bitblt-by-segments)
				:alu (bb-spec 24)))
	  (t (image-process-macro :fetch :rgba :store :alpha)
	     ))))

(remember-image-process pixel-copy
			'(:store :alpha :fetch :rgba)
			'(:store :alpha :fetch :rgba :write-mask t))

(remember-image-process pixel-copy
			'(:store :alpha :fetch :rgba :dither t :write-mask t)
			'(:store :alpha :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :alpha :fetch :rgba :dither t :jitter t :write-mask t)
			'(:store :alpha :fetch :rgba))

(remember-image-process pixel-copy
			'(:store :alpha :fetch :rgba :dither t)
			'(:store :alpha :fetch :rgba))
(remember-image-process pixel-copy
			'(:store :alpha :fetch :rgba :dither t :jitter t)
			'(:store :alpha :fetch :rgba))

(defvar *8b-32b-pixel-copy-functions*
	`((:red . pixel-copy-rgba->r)
	  (0  . pixel-copy-rgba->r)
	  (:green . pixel-copy-rgba->g)
	  (8  . pixel-copy-rgba->g)
	  (:blue . pixel-copy-rgba->b)
	  (16  . pixel-copy-rgba->b)
	  (:alpha . pixel-copy-rgba->alpha)
	  (24  . pixel-copy-rgba->alpha)
	  ))

(defun bitblt-8b-32b (alu wid hei src sdx sdy dest dx dy how &optional write-mask)
  ;; simulate a bitblt from an 8bit array to an 32bit array, with a shift
  (cond
    ((eql alu tv:alu-seta)
     (let ((fun (or (cdr (assoc how *8b-32b-pixel-copy-functions*))
		    (ferror "No pixel copy function for destination ~S" how))))
       (funcall fun wid hei src sdx sdy dest dx dy nil nil :write-mask write-mask)))
    (t (ferror "only alu-seta is supported"))))

(defvar *32b-8b-pixel-copy-functions*
	`((:red . pixel-copy-r->rgba)
	  (0  . pixel-copy-r->rgba)
	  (:green . pixel-copy-g->rgba)
	  (8  . pixel-copy-g->rgba)
	  (:blue . pixel-copy-b->rgba)
	  (16  . pixel-copy-b->rgba)
	  (:alpha . pixel-copy-alpha->rgba)
	  (24  . pixel-copy-alpha->rgba)
	  ))

(defun bitblt-32b-8b (alu wid hei src sdx sdy dest dx dy how)
  ;; simulate a bitblt from an 32bit array to an 8bit array, with a shift
  (cond ((eql alu tv:alu-seta)
	 (let ((fun (or (cdr (assoc how *32b-8b-pixel-copy-functions*))
			(ferror "No pixel copy function for destination ~S" how))))
	   (funcall fun wid hei src sdx sdy dest dx dy nil nil))
	 )
	(t (ferror "only alu-seta is supported")))
  )


(4 0 (NIL 0) (NIL :BOLD :VERY-LARGE) "BIGFNTB");;; Reduce by integer factors

0(defmethod (pixel-rescale-propriety-test image-process)
	   (old-width new-width old-height new-height &rest specs
		      &key spec &allow-other-keys)
  (ignore specs)
  2;must be scaling down by an integer amount in both directions
0  (destructuring-bind (&key rescale &allow-other-keys) spec
    (when (and (< new-height old-height)
	       (< new-width old-width)
	       (eq rescale :average)
	       (or ( old-height new-height)( old-width new-width))
	       (zerop (remainder old-width new-width))
	       (zerop (remainder old-height new-height)))
      (setf (cl:getf spec :rescale)
	    `(:pixel-average ,(// old-width new-width) ,(// old-height new-height)))
      t
      )))

(eval-when (compile load eval)
  (defconst1 pixel-rescale0 (make-instance 'image-process
					 :main-loop :copy
					 :name :pixel-rescale
					 :key-args '(:rescale :dither :jitter)
					 :create-on-demand t
					 :propriety-test 'pixel-rescale-propriety-test
					 :permitted-args '(:default-alpha :rescale :to-screen
									  :from-field :to-field
									  )
					 :ignored-args '(:dither :jitter)
					 :arglist '(width height
							  src sx sy
							  dest dx dy
							  dest-width dest-height)
					 :common-args '(:optional-store ignore
							:rescale :pixel-average
							)
					 ))
  )

(def-image-process rescale-rgba-2x->1x pixel-rescale
  :key-args (:fetch :rgba :store :rgba :separate :rgba :combine :rgba
		    :rescale (:pixel-average 2 2))
  #|| ;22 seconds
  (image-process-macro :fetch :rgba :store :rgba :separate :rgba :combine :rgba
		    :rescale (:pixel-average 2 2))
  ||#
  (ignore height width)
  (tv:with-prepared-sheet-or-raster (src :array sa :array-only t :span sa-span)
    (tv:with-prepared-sheet-or-raster (dest :array da :array-only t :span da-span)
      (loop repeat dest-height
	    with pixel-mask = (lsh #b1111110011111100111111001111110 1)
	    with round-mask = #b011000000110000001100000011
	    as sidx from (+ sx (* (+ sy (if from-field (1- from-field) 0))
				  sa-span))
		    by (lsh sa-span (if from-field 2 1))
	    as didx from (+ dx (* (+ dy (if to-field (1- to-field) 0)) da-span))
		    by (if to-field (lsh da-span 1) da-span)
	    do
	(loop repeat dest-width
	      for sidx00 from sidx by 2
	      for sidx10 from (+ sidx sa-span) by 2
	      for didx00 from didx
	      as tpix00 = (aref sa sidx00)
	      as tpix01 = (aref sa (1+ sidx00))
	      as tpix10 = (aref sa sidx10)
	      as tpix11 = (aref sa (1+ sidx10))
	      do
	  (setf (aref da didx00)
		(sys:%32-bit-plus (lsh (logand pixel-mask tpix00) -2)
		(sys:%32-bit-plus (lsh (logand pixel-mask tpix01) -2)
		(sys:%32-bit-plus (lsh (logand pixel-mask tpix10) -2)
		(sys:%32-bit-plus (lsh (logand pixel-mask tpix11) -2)
		  (lsh (logand (+ (logand round-mask tpix00) 
				  (logand round-mask tpix01)
				  (logand round-mask tpix10)
				  (logand round-mask tpix11)) pixel-mask) -2))))))
	  )))))

(defmethod (pixel-replication-propriety-test image-process)
       (old-width new-width old-height new-height &key spec from-field to-field
		  &allow-other-keys)
  (and ( new-width old-width)  ;let exact match fall into pixel-copy
       ( new-height old-height)
       (null from-field)
       (null to-field)
       (zerop (\ new-width old-width))
       (zerop (\ new-height old-height))
       (null (get (locf spec) :translation-array))
       (null (get (locf spec) :combination-array))
       ))

(eval-when (compile load eval)
  (defconst1 pixel-replication 0(make-instance 'image-process
					   :main-loop :copy ;not really used
					   :create-on-demand nil
					   :name :pixel-replication	
					   :propriety-test 'pixel-replication-propriety-test
					   :arglist '(width height
							    src sx sy
							    dest dx dy
							    dest-width dest-height)
					   :permitted-args '(:rescale)
					   :common-args '(:rescale :select))))

(def-image-process 1pixel-zoom-rgba->rgba0 pixel-replication
  :key-args (:fetch :rgba :store :rgba)
  (ignore from-field to-field)
  (pixel-replication-zoom-rectangle
    src dest
    sx sy
    (1- (// dest-width width)) (1- (// dest-height height))
    dx dy (+ dx dest-width) (+ dy dest-height)
    :per-line-function per-line-function)
  )


(def-image-process 1pixel-zoom-r+g+b->r+g+b 0pixel-replication
  :key-args (:fetch :r+g+b :store :r+g+b)
  (ignore from-field to-field)
  (loop for from in src as to in dest do
    (pixel-zoom-rgba->rgba width height
			   from sx sy
			   to dx dy
			   dest-width dest-height
			   :per-line-function per-line-function
			   )))

(def-image-process 1pixel-zoom-r->r+g+b 0pixel-replication
  1:0key-args (:fetch :rgba :store :r+g+b)
  (ignore from-field to-field)
  (loop for to in dest do
    (pixel-zoom-rgba->rgba width height
			   src sx sy
			   to dx dy
			   dest-width dest-height
			   :per-line-function per-line-function
			   )
    ))



4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Specialized rescalers for changing aspect ratio
;;
;;
;;(5 0 (NIL 0) (NIL :BOLD :LARGE) "MEDFNTB") Next some image processes to rescale chaning pixel aspect ratio.
4;;5 these specialized versions are substantially faster than the
4;;5 general versions, so better to use if the parameters of the
4;;5 image process are appropriate
4;;
;;5 These macros use the IMAGE-PROCESS-MACRO facility extensively, to 
4;;5 provide the same basic functionality in many variations of input
4;;5 and output parameter types
4;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

0(eval-when (compile load eval)
  (defun x-expand-pixel-fetch (n &key step mod)
    ;returns t or nil depending on if pixel N needs to be fetched,
    ;or is the same as the pixel already fetched
    (let* ((fr (* n step))
	   (to (+ fr step)))
      (or (> step mod)
	  (and ( (floor fr mod) (floor to mod))
	       ( n (1- (max step mod))))
	  (= n 0)
	  ))))

(eval-when (compile load eval)
  (defun x-expand-pixel-store (n &key step mod pack-first)
    ;returns T NIL or 'last-pixel, depending on if pixel N needs to be
    ;computed and stored, or is the same as the pixel fetched
    (if (> step mod)
	(let* ((fr (* n mod))
	       (to (+ fr mod)))
	  (if (or (= n 0)
		  (= (floor fr step) (floor to step)))
	      nil t))
	(let* ((fr (* n step))
	       (to (+ fr step)))
	  (cond ((and pack-first (= n 0)) t)
		((or (= (floor fr mod) (floor to mod))
		     (= n 0)
		     (= n (1- mod)))
		 'last-pixel)
		(t t))))))

(defmacro x-expand-pixel (pix id n &key step mod locals)
  ;; do the actual expansion, for pixel n one color
  id
  (labels ((fast* (const num)
	     (cond ((= const 0) `0)
		   ((= const 1) num)
		   ((= const 2) `(+ ,num ,num))
		   (t `(* ,const ,num))))
	   (fast// (num const)
	     (cond ((= const 1) num)
		   ((= const (logand const (- const)))
		    `(ash ,num ,(- 1 (haulong const))))
		   (t `(// ,num ,const))))
	   )
    (if (> step mod)
	(let* ((fr (* n mod))
	       (to (+ fr mod))
	       (tmp (first locals)))
	  (cond ((= n 0)
		 `(setq ,tmp (+ ,(// step 2) ,(fast* mod pix))))
		((= (floor fr step) (floor to step))
		 `(setq ,tmp (+ ,tmp ,(fast* mod pix))))
		(t `(setq ,pix ,(fast//
				  `(+ ,tmp
				      (progn
					,@(when ( n (1- step))
					    `((setq ,tmp ,(fast*  (\ to step) pix))))
					,@(if (= n (1- step))
					      `(,(fast* mod pix))
					      `(,(fast* (- mod (\ to step)) pix)))))
				   step))
		   )))
	(let* ((fr (* n step))
	       (to (+ fr step))
	       (tmp (first locals)))
	  
	  (cond ((= (floor fr mod) (floor to mod))
		 `(setq ,tmp ,(fast* (- mod (\ to mod)) pix)))
		(t `(setq ,pix ,(fast//
				  `(+ ,tmp
				      (progn
					,@(when ( (floor to mod)
						   (floor (+ to step) mod))
					    `((setq ,tmp ,(fast* (- mod (\ to mod)) pix))))
					,(fast* (\ to mod) pix)))
				  step))
		   ))))))

(defmethod (change-aspect-ratio-propriety-test image-process)
	   (old-width new-width old-height new-height &key (slop 1.0) &allow-other-keys)
  (and (eql old-height new-height)
       (let* ((per-color (get (locf common-args) :per-color))
	      (in (get per-color :mod))
	      (out (get per-color :step)))
	 (and (fixp in)
	      (fixp out)
	      ( (- old-width slop)
		 (// (* new-width out) (float in))
		 old-width)
	      ))
       ))

(eval-when (compile eval load)

(defmacro define-aspect-ratio-changer (dest-width source-width)
  (let* ((ratio (cl:// dest-width source-width))
	 (dest-width (rational-numerator ratio))
	 (source-width (rational-denominator ratio))
	 (basic-name-string (format nil "CHANGE-PIXEL-ASPECT-RATIO-~D//~D"
				    dest-width source-width))
	 (basic-name (intern basic-name-string)))
    `(progn 
       (eval-when (compile load eval)
         (defconst ,basic-name
		 (make-instance 'image-process
		   :main-loop :change-aspect-ratio
		   :create-on-demand nil
		   :name ,(intern basic-name-string :keyword)
		   :key-args '(:rescale :dither :jitter)
		   :arglist '(width height src sx sy dest dx dy dest-width dest-height)
		   :propriety-test 'change-aspect-ratio-propriety-test
		   :common-args
		   `(:locals-per-color (temp)
		     :source-pixels-per-group ,,source-width
		     :dest-pixels-per-group ,,dest-width
		     :note-progress ,,basic-name-string
		     :optional-fetch
		     (x-expand-pixel-fetch :step ,,source-width :mod ,,dest-width)
		     :optional-store
		     (x-expand-pixel-store :step ,,source-width :mod ,,dest-width)
		     :per-color
		     (x-expand-pixel :step ,,source-width :mod ,,dest-width)
		     :note-progress ,,basic-name-string
		     :rescale :average
		     )
		   ))
	 ))))


(defmacro define-aspect-ratio-changer-functions
	  (source-width  dest-width &key (compile :return))
  (let* ((ratio (cl:// dest-width source-width))
	 (dest-width (rational-numerator ratio))
	 (source-width (rational-denominator ratio))
	 (basic-name-string (format nil "CHANGE-PIXEL-ASPECT-RATIO-~D//~D"
				    dest-width source-width))
	 (basic-name (intern basic-name-string)))


  (create-image-processes
    basic-name
    `(((:fetch :rgba :store :rgba))
      ((:fetch :r+g+b :store :r+g+b)
       (loop with ip = (find-image-process
			 ,basic-name
			 `(:fetch :rgba :store :rgba :rescale :average))
	     with cp = (compiled-function ip)
	     for from in src as to in dest do
	 (funcall cp width height from sx sy to dx dy dest-width dest-height)))
      ((:fetch :rgba
	:map :named-with-alpha
	:separate :rgb
	:combine :rgb
	:store :rgba)
       :keyword-args ((translation-array *standard-false-color-map*)
		      (translation-name :full-color-translation-array)
		      (default-alpha 255)
		      ))
      ((:fetch :rgba
	:separate :rgb
	:combine :rgb
	:store :rgba))
      ((:fetch :rgba
	:separate :rgba
	:combine :rgba
	:store :rgba
	))
      ((:combine :rgb
	:fetch :r+g+b
	:store :rgba
	)
       (image-process-macro 
	 :combine :rgb
	 :fetch :r+g+b
	 :store :rgba
	 :optional-store
	 (x-expand-pixel-store :step ,source-width :mod ,dest-width :pack-first t)
	 ))
      ((:fetch :rgba
	:combine :named-with-alpha
	:store :rgba)
       :keyword-args ((combination-array *standard-grayscale-map*)
		      (combination-name :full-color-translation-array)
		      (default-alpha 255)
		      ))
      )
    :prefix basic-name-string
    :compile compile
    ))))

(eval-when (compile eval load)
(define-aspect-ratio-changer 19 16) ;760/640 = Narrow Pal to Square Pal
(define-aspect-ratio-changer 16 19) ;640/760 = Square Pal to Narrow Pal
(define-aspect-ratio-changer 4 3)  ;Square to HDTV
(define-aspect-ratio-changer 3 4)
(define-aspect-ratio-changer 9 8)  ;Square to 4:2:2
(define-aspect-ratio-changer 8 9))
2;;
;; these would generate extremely large functions, and probably
;; won't be used anyway.
;;0(define-aspect-ratio-changer 864 760) ;Wide Pal to Square Pal
2;;0(define-aspect-ratio-changer 760 864) ;Square Pal to Wide Pal to 
2;;



0(define-aspect-ratio-changer-functions 19 16 :compile :defer) 
(define-aspect-ratio-changer-functions 16 19 :compile :defer) 
(define-aspect-ratio-changer-functions 4 3 :compile :defer)  ;Square to HDTV
(define-aspect-ratio-changer-functions 3 4 :compile :defer)
(define-aspect-ratio-changer-functions 9 8 :compile :defer)  ;Square to 4:2:2
(define-aspect-ratio-changer-functions 8 9 :compile :defer)


(defconst rescale-image-specs (cl:make-hash-table :test 'equal))

(defmacro def-image-spec (source-type dest-type &rest specs)
  (let ((val (loop for spec in specs
		   #||
		   ;not yet implemented :component scheme, see w:>ddyer>images>component
		   as comp = (get (locf spec0) :component)
		   as comp-spec = (when comp
				    (or (gethash comp component-operators)
					(ferror "~S isn't a component operator")))
		   as spec = (if comp
				 (let ((new (append comp-spec spec0 nil)))
				   (remprop (locf new) :component)
				   new)
				 spec0)
		   ||#
		   as rescale = (get (locf spec) :rescale)
		   as dither = (get (locf spec) :dither)
		   as dither-list = (cond ((listp dither) dither)
					  ((eq dither ') '(t nil))
					  (t (list dither)))
		   as rescale-list = (cond ((listp rescale) rescale)
					   ((eq rescale ') '(:average :select))
					   (t (list rescale)))
		   do
	       (loop for op in '(:fetch :store :map :combine :separate)
		     for op-list in '(fetch-operators store-operators map-operators
						      combine-operators separate-operators)
		     as val = (get (locf spec) op)
		     as fval = (gethash val (symeval op-list))
		     when (and (or val (memq op '(:fetch :store))) (not fval))
		       do
			 (ferror "~S isn't a known ~S operator" val op))
		   nconc
		     (loop for r in rescale-list
			   nconc
			     (loop for j in '(t nil)	;jitter on and off
				   nconc
				     (loop for d in (if j (remove nil dither-list) dither-list)
					   as nd = (if (eq dither ') nil d)
					   as nj = (if (eq nd t) j nil)
					   as newspec = (copylist spec)
					   do
				       (remprop (locf newspec) :jitter-threshold)
				       (putprop (locf newspec) nd :dither)
				       (putprop (locf newspec) nj :jitter)
				       (putprop (locf newspec) r :rescale)
				       (when nj
					 (putprop (locf newspec)
						  (or (get (locf spec) :jitter-threshold)
						      (get (locf spec) :threshold)
						      0.1)
						  :threshold))
					   collect
					     `(puthash '(,source-type ,dest-type ,r ,d ,j)
						       ',newspec
						       rescale-image-specs)))))))

    ;(when (gethash (list source-type dest-type :select nil nil)
    ;rescale-image-specs)
    ;(format t "~&~A -> ~A already defined" source-type dest-type))

    ;some checking to guard against typos
    (unless (= (length val) 6) (ferror "not 6 things"))
    (loop with rescale-average = 0 and rescale-select = 0
	  and dither-t = 0 and dither-nil = 0
	  for v in val
	  as (nil (nil (nil nil r d)) (nil other)) = v
	  do
      (cond ((eq d t) (incf dither-t))
	    ((eq d nil) (incf dither-nil))
	    (t (ferror "Dither bad for ~A" v)))
      (cond ((eq r :select) (incf rescale-select))
	    ((eq r :average) (incf rescale-average))
	    (t (ferror "Rescale bad for ~A" v)))
      finally
	(unless (evenp (+ (if (get (locf other) :translation-array) 1 0)
			  (if (get (locf other) :translation-name) 1 0)))
	  (ferror "Inconsistant map translation info"))

	(unless (= rescale-select 3) (ferror "not 4 rescale-selects"))
	(unless (= rescale-average 3) (ferror "not 4 rescale-average"))
	(unless (= dither-t 4) (ferror "not 4 dither-t"))
	(unless (= dither-nil 2) (ferror "not 2 dither-nil")))
    `(progn ,@val)))



4


0#||

Some benchmark results;

The old vs. new algorithms in sys:color;images;reduce yield these times:

			       old     new         old     new
type   direction   new size    slow    slow        fast    fast

1B     up          640,480     279.37  25.34       100.30  14.32
1B     down        116,162      21.68  22.38         6.29   9.77
8B     up          640,480     508.02  36.83       145.75  17.62
8B     down        116,162     107.34  30.37         6.18  10.66
GR     up          640,480     274.22  23.66       145.37  17.55
GR     down        116,162      21.35  22.32         9.40  10.78
RGB    up          640,480     834.47  36.10       155.48  16.69
RGB    down        116,162      63.07  30.32         9.51  10.30
32B    up          640,480     298.00  43.76       141.03  17.34
32B    down        116,162      83.41  33.73         8.86  10.28


||#
4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; The transformation specs
;;
;;1 This is a little grubby, but the alternative is much worse.
4;;1 We ennumerate all the combinations of source and destination,
4;;1 Specifying the strategy for converting source into destination.
4;;1 Fortunately, we only have to do this once, and thereafter piggyback
4;;1 on the information stored here.
4;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; source B&W-IMAGE
0(def-image-spec b&w-image b&w-image 
		(:fetch :rgba :store :rgba :dither  :rescale  :threshold 1 :brightness 1))

(def-image-spec b&w-image 2b-image 
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-2b :store :rgba :rescale :average :dither 
			:threshold 2 :brightness 3))

(def-image-spec b&w-image 2b-palette-image
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-2b
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 2 :brightness 3
		 :dither nil
		)
		(:fetch :1b-2b
		 :combine :2b-dithered-named
		 :combination-name :2b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		 :threshold 2 :brightness 3
		))

(def-image-spec b&w-image 2b-random-image
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-2b
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 2 :brightness 3
		 :dither nil
		)
		(:fetch :1b-2b
		 :combine :2b-dithered-named
		 :combination-name :2b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 2 :brightness 3
		 :dither t
		))

(def-image-spec b&w-image 4b-image 
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-4b :store :rgba :rescale :average :dither 
			:threshold 8 :brightness 15
			))

(def-image-spec b&w-image 4b-palette-image
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-4b
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		)
		(:fetch :1b-4b
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		 :threshold 8 :brightness 15
		))

(def-image-spec b&w-image 4b-random-image
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-4b
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		)
		(:fetch :1b-4b
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		 :threshold 8 :brightness 15
		))

(def-image-spec b&w-image false-color-image
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-8b :store :rgba :rescale :average :dither ))

(def-image-spec b&w-image 8b-palette-image 
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-8b
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		)
		(:fetch :1b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		))

(def-image-spec b&w-image 8b-random-image 
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		)
		(:fetch :1b-8b
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec b&w-image rgb-image 
		(:fetch :1b-32b :store :r+g+b :rescale :select :dither )
		(:fetch :1b-8b :store :r+g+b :rescale :average :dither ))

(def-image-spec b&w-image packed-rgb-image 
		(:fetch :1b-32b :store :packed-rgb :rescale :select :dither )
		(:fetch :1b-8b :store :packed-rgb :rescale :average :dither ))

(def-image-spec b&w-image packed-yuv-image 
		(:fetch :1b-8b :store :packed-yuv-from-rgb :rescale :select :dither )
		(:fetch :1b-8b :store :packed-yuv-from-rgb :rescale :average :dither ))

(def-image-spec b&w-image 32b-image 
		(:fetch :1b-32b :store :rgba :rescale :select :dither )
		(:fetch :1b-8b
		 :combine :named-with-alpha
		 :default-alpha 255
		 :combination-name :full-color-translation-array
		 :combination-array *standard-grayscale-map*
		 :store :rgba
		 :rescale :average
		 :dither 
		))

4;;; source 2b-image
0(def-image-spec 2b-image b&w-image 
		(:fetch :rgba :combine :dithered-threshold :store :rgba
			:threshold 2 :brightness 3
			:black-pixel 0
			:white-pixel -1
			:rescale :select
			:dither t
		)
		(:fetch :rgba :combine :threshold :store :rgba
			:threshold 2 :brightness 3
			:black-pixel 0
			:white-pixel -1
			:rescale :select
			:dither nil
		)
		(:fetch :rgba :combine :dithered-threshold :store :rgba
			:threshold 2 :brightness 3
			:black-pixel 0
			:white-pixel -1
			:rescale :average
			:dither t
		)
		(:fetch :rgba :combine :threshold :store :rgba
			:black-pixel 0
			:white-pixel -1
			:threshold 2
			:brightness 3
			:rescale :average
			:dither nil
		))

(def-image-spec 2b-image 2b-image 
		(:fetch :rgba :store :rgba :rescale  :dither 
			:threshold 2 :brightness 3))

(def-image-spec 2b-image 2b-palette-image 
		(:fetch :rgba
		 :combine :2b-dithered-named
		 :combination-name :2b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither t
		 :threshold 2 :brightness 3
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :rgba
		 :combine :2b-dithered-named
		 :combination-name :2b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 2 :brightness 3
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 2b-image 2b-random-image 
		(:fetch :rgba
		 :combine :2b-dithered-named
		 :combination-name :2b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :threshold 2 :brightness 3
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :rgba
		 :combine :2b-dithered-named
		 :combination-name :2b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		 :threshold 2 :brightness 3
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 2b-image 4b-image 
		(:fetch :2b-4b :store :rgba :rescale  :dither 
			:threshold 8 :brightness 15))

(def-image-spec 2b-image 4b-palette-image
		(:fetch :2b-4b
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :select
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :2b-4b
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :2b-4b
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 2b-image 4b-random-image 
		(:fetch :rgba
		 :combine :2b-dithered-named
		 :combination-name :2b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :threshold 2 :brightness 3
		 :rescale :select
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :2b-4b
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :2b-4b
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))


(def-image-spec 2b-image false-color-image 
		(:fetch :2b-8b :store :rgba :rescale  :dither ))

(def-image-spec 2b-image 8b-palette-image 
		(:fetch :2b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :2b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		)
		(:fetch :2b-8b
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 2b-image 8b-random-image 
		(:fetch :2b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :2b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		)
		(:fetch :2b-8b
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 2b-image rgb-image 
		(:fetch :2b-8b :store :r+g+b :rescale  :dither ))

(def-image-spec 2b-image packed-rgb-image 
		(:fetch :2b-8b :store :packed-rgb :rescale  :dither ))


(def-image-spec 2b-image packed-yuv-image 
		(:fetch :2b-8b :store :packed-yuv-from-rgb :rescale  :dither ))

(def-image-spec 2b-image 32b-image 
		(:fetch :2b-8b
		 :combine :named-with-alpha
		 :default-alpha 255
		 :combination-name :full-color-translation-array
		 :combination-array *standard-grayscale-map*
		 :store :rgba
		 :rescale 
		 :dither 
		))


4;;; source 2b-palette-image
0(def-image-spec 2b-palette-image b&w-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-2b-color-map*
		 :combine :dithered-threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :brightness 255
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-2b-color-map*
		 :combine :threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :rescale 
		 :dither nil))

(def-image-spec 2b-palette-image 2b-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-2b-color-map*
		 :combine :dithered-named
		 :store :rgba
		 :combination-array *standard-2b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-2b-color-map*
		 :combine :8b-2b :store :rgba
		 :rescale 
		 :dither nil)
		)

(def-image-spec 2b-palette-image 2b-palette-image 
		(:fetch :rgba :store :rgba :rescale :select :dither )
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-2b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-2b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither nil))

(def-image-spec 2b-palette-image 2b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-2b-color-map*
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-2b-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-2b-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-2b-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 2b-palette-image 4b-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-2b-color-map*
			:combination-array *standard-4b-grayscale-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-2b-color-map*
		 :combine :dithered-named
		 :store :rgba
		 :combination-array *standard-4b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-2b-color-map*
		 :combine :8b-4b :store :rgba
		 :rescale :average
		 :dither nil)
		)

(def-image-spec 2b-palette-image 4b-palette-image
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-2b-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-4b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale 
		 :dither t))

(def-image-spec 2b-palette-image 4b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-2b-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-2b-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 2b-palette-image false-color-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-2b-color-map*
		 :store :rgba
		 :rescale 
		 :dither 
		 ))

(def-image-spec 2b-palette-image 8b-palette-image 
		(:fetch :rgba :store :rgba :rescale :select :dither )
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil))

(def-image-spec 2b-palette-image 8b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-2b-color-map*
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-2b-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-false-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-false-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 2b-palette-image rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :store :r+g+b
		 :rescale 
		 :dither 
		 ))

(def-image-spec 2b-palette-image packed-rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :store :packed-rgb
		 :rescale 
		 :dither 
		 ))

(def-image-spec 2b-palette-image packed-yuv-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :separate :rgb :store :packed-yuv-from-rgb
		 :rescale 
		 :dither 
		 ))

(def-image-spec 2b-palette-image 32b-image 
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :default-alpha 255
		 :store :rgba
		 :rescale :select
		 :dither )
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-name :full-color-translation-array
		 :translation-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :default-alpha 255
		 :separate :rgb
		 :combine :rgba
		 :dither ))

4;;; source 2b-random-image
0(def-image-spec 2b-random-image b&w-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :brightness 255
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :b&w-translation-array
		 :black-pixel 0
		 :white-pixel -1
		 :combine :threshold
		 :store :rgba
		 :threshold 128
		 :rescale 
		 :dither nil))

(def-image-spec 2b-random-image 2b-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-named :store :rgba
		 :combination-array *standard-2b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :store :rgba
		 :translation-array *standard-2b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :8b-2b
		 :rescale 
		 :dither nil)
		)

(def-image-spec 2b-random-image 2b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-2b-color-map*
	  :combination-array *standard-2b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map* ;nonexistant at present
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map* ;nonexistant at present
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-2b-color-map* ;nonexistant at present
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 2b-random-image 2b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-2b-color-map*
	  :combination-array *standard-2b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-2b-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-2b-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-2b-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 2b-random-image 4b-image 
		(:fetch :rgba
		 :map :named
		 :store :rgba
		 :translation-array *standard-2b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :8b-4b
		 :rescale :average
		 :dither nil)
	  	(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-2b-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-named :store :rgba
		 :combination-array *standard-4b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		)

(def-image-spec 2b-random-image 4b-palette-image
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-2b-color-map*
	  :combination-array *standard-4b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 2b-random-image 4b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-2b-color-map*
	  :combination-array *standard-4b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 2b-random-image false-color-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :b&w-translation-array
		 :store :rgba
		 :rescale 
		 :dither ))

(def-image-spec 2b-random-image 8b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-2b-color-map*
	  :combination-array *standard-false-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-false-color-map*
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-false-color-map*
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-false-color-map*
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 2b-random-image 8b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-2b-color-map*
	  :combination-array *standard-false-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-random-palette
   :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-2b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 2b-random-image rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :r+g+b
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :r+g+b
		 :dither 
		 :rescale :average)
		)

(def-image-spec 2b-random-image packed-rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-rgb
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-rgb
		 :dither 
		 :rescale :average)
		)

(def-image-spec 2b-random-image packed-yuv-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-yuv-from-rgb
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-yuv-from-rgb
		 :dither 
		 :rescale :average)
		)

(def-image-spec 2b-random-image 32b-image 
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :default-alpha 255
		 :store :rgba
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-array *standard-2b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :combine :rgba :store :rgba
		 :default-alpha 255
		 :rescale :average
		 :dither ))


4;;; source 4b-image
0(def-image-spec 4b-image b&w-image 
		(:fetch :rgba :combine :dithered-threshold :store :rgba
			:threshold 8 :brightness 15
			:black-pixel 0
			:white-pixel -1
			:rescale :select
			:dither t
		)
		(:fetch :rgba :combine :threshold :store :rgba
			:threshold 8 :brightness 15
			:black-pixel 0
			:white-pixel -1
			:rescale :select
			:dither nil
		)
		(:fetch :rgba :combine :dithered-threshold :store :rgba
			:threshold 8 :brightness 15
			:black-pixel 0
			:white-pixel -1
			:rescale :average
			:dither t
		)
		(:fetch :rgba :combine :threshold :store :rgba
			:black-pixel 0
			:white-pixel -1
			:threshold 8 :brightness 15
			:rescale :average
			:dither nil
		))

(def-image-spec 4b-image 2b-image
		(:fetch :rgba :combine :4b-dithered-named :store :rgba
			:combination-array *standard-2b-grayscale-map*
			:combination-name :4b-gray-contribution-with-error
			:rescale 
			:threshold 8 :brightness 15
			:dither t
			)
		(:fetch :rgba
		 :combine :4b-2b
		 :store :rgba
		 :rescale 
		 :dither nil)
		)

(def-image-spec 4b-image 2b-palette-image 
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :rgba
		 :combine :4b-dithered-named
	         :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
	         :combination-name :4b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 4b-image 2b-random-image 
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		 :threshold 8 :brightness 15
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 4b-image 4b-image 
		(:fetch :rgba :store :rgba :rescale  :dither 
			:threshold 8 :brightness 15))

(def-image-spec 4b-image 4b-palette-image
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :select
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 4b-image 4b-random-image 
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :select
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :threshold 8 :brightness 15
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))


(def-image-spec 4b-image false-color-image 
		(:fetch :4b-8b :store :rgba :rescale  :dither 
			))

(def-image-spec 4b-image 8b-palette-image 
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :4b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		)
		(:fetch :4b-8b
		 :combine :named :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 4b-image 8b-random-image 
		(:fetch :rgba
		 :combine :4b-dithered-named
		 :combination-name :4b-gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither t
		)
		(:fetch :rgba
		 :combine :named
		 :combination-name :4b-gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :select
		 :dither nil
		)
		(:fetch :4b-8b
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t
		)
		(:fetch :4b-8b
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil
		))

(def-image-spec 4b-image rgb-image 
		(:fetch :4b-8b :store :r+g+b :rescale  :dither ))

(def-image-spec 4b-image packed-rgb-image 
		(:fetch :4b-8b :store :packed-rgb :rescale  :dither ))

(def-image-spec 4b-image packed-yuv-image 
		(:fetch :4b-8b :store :packed-yuv-from-rgb :rescale  :dither ))

(def-image-spec 4b-image 32b-image 
		(:fetch :4b-8b
		 :combine :named-with-alpha
		 :default-alpha 255
		 :combination-name :full-color-translation-array
		 :combination-array *standard-grayscale-map*
		 :store :rgba
		 :rescale 
		 :dither 
		))


4;;; source 4b-palette-image
0(def-image-spec 4b-palette-image b&w-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-4b-color-map*
		 :combine :dithered-threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :brightness 255
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-4b-color-map*
		 :combine :threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :rescale 
		 :dither nil))

(def-image-spec 4b-palette-image 2b-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-2b-grayscale-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-4b-color-map*
		 :combine :dithered-named
		 :store :rgba
		 :combination-array *standard-2b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-4b-color-map*
		 :combine :8b-2b :store :rgba
		 :rescale :average
		 :dither nil)
		)

(def-image-spec 4b-palette-image 2b-palette-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-2b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-2b-color-map* 
		 :store :rgba
		 :rescale 
		 :dither t))

(def-image-spec 4b-palette-image 2b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-4b-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-2b-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-2b-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 4b-palette-image 4b-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-4b-grayscale-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-4b-color-map*
		 :combine :dithered-named
		 :store :rgba
		 :combination-array *standard-4b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-4b-color-map*
		 :combine :8b-4b :store :rgba
		 :rescale :average
		 :dither nil)
		)

(def-image-spec 4b-palette-image 4b-palette-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-4b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-4b-color-map* 
		 :store :rgba
		 :rescale 
		 :dither t))

(def-image-spec 4b-palette-image 4b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-4b-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 4b-palette-image false-color-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-4b-color-map*
		 :store :rgba
		 :rescale 
		 :dither 
		 ))

(def-image-spec 4b-palette-image 8b-palette-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-8b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil))

(def-image-spec 4b-palette-image 8b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-4b-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-2b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-false-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-false-color-map*
		 :rescale :average
		 :dither nil))



(def-image-spec 4b-palette-image rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :store :r+g+b
		 :rescale 
		 :dither 
		 ))

(def-image-spec 4b-palette-image packed-rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :store :packed-rgb
		 :rescale 
		 :dither 
		 ))
(def-image-spec 4b-palette-image packed-yuv-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :separate :rgb :store :packed-yuv-from-rgb
		 :rescale 
		 :dither 
		 ))

(def-image-spec 4b-palette-image 32b-image 
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :default-alpha 255
		 :store :rgba
		 :rescale :select
		 :dither )
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-name :full-color-translation-array
		 :translation-array *standard-4b-color-map*
		 :store :rgba
		 :rescale :average
		 :default-alpha 255
		 :separate :rgb
		 :combine :rgba
		 :dither ))

4;;; source 4b-random-image
0(def-image-spec 4b-random-image b&w-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :brightness 255
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :b&w-translation-array
		 :black-pixel 0
		 :white-pixel -1
		 :combine :threshold
		 :store :rgba
		 :threshold 128
		 :rescale 
		 :dither nil))

(def-image-spec 4b-random-image 2b-image 
  	(:fetch :rgba :map :new-palette :store :rgba
		:translation-array *standard-4b-color-map*
		:combination-array *standard-2b-grayscale-map*
		:rescale :select
		:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-named
		 :store :rgba
		 :combination-array *standard-2b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :store :rgba
		 :translation-array *standard-4b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :8b-2b
		 :rescale :average
		 :dither nil)
		)

(def-image-spec 4b-random-image 2b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-4b-color-map*
	  :combination-array *standard-2b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map*
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map* 
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-2b-color-map*
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 4b-random-image 2b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-4b-color-map*
	  :combination-array *standard-2b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-2b-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-2b-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-2b-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 4b-random-image 4b-image 
		(:fetch :rgba
		 :map :named
		 :store :rgba
		 :translation-array *standard-4b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :8b-4b
		 :rescale :average
		 :dither nil)
	  	(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-4b-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-named
		 :store :rgba
		 :combination-array *standard-4b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		)

(def-image-spec 4b-random-image 4b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-4b-color-map*
	  :combination-array *standard-4b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 4b-random-image 4b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-4b-color-map*
	  :combination-array *standard-4b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 4b-random-image false-color-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :b&w-translation-array
		 :store :rgba
		 :rescale 
		 :dither ))

(def-image-spec 4b-random-image 8b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-4b-color-map*
	  :combination-array *standard-false-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map*
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map*
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-2b-color-map*
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 4b-random-image 8b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-4b-color-map*
	  :combination-array *standard-false-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-4b-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 4b-random-image rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :r+g+b
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :r+g+b
		 :dither 
		 :rescale :average)
		)

(def-image-spec 4b-random-image packed-rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-rgb
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-rgb
		 :dither 
		 :rescale :average)
		)
(def-image-spec 4b-random-image packed-yuv-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-yuv-from-rgb
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-yuv-from-rgb
		 :dither 
		 :rescale :average)
		)

(def-image-spec 4b-random-image 32b-image 
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :default-alpha 255
		 :store :rgba
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-array *standard-4b-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :combine :rgba :store :rgba
		 :default-alpha 255
		 :rescale :average
		 :dither ))


4;;; source FALSE-COLOR-IMAGE 
0(def-image-spec false-color-image b&w-image 
		(:fetch :rgba :combine :dithered-threshold :store :rgba
			:black-pixel 0
			:white-pixel -1
			:threshold 128 :brightness 255
			:rescale 
			:dither t)
		(:fetch :rgba :combine :threshold :store :rgba
			:black-pixel 0
			:white-pixel -1
			:threshold 128 
			:rescale 
			:dither nil))

(def-image-spec false-color-image 2b-image 
		(:fetch :rgba :combine :dithered-named
			:store :rgba
			:combination-array *standard-2b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t
			)
		(:fetch :rgba :combine :8b-2b :store :rgba
			:rescale 
			:dither nil)
		)

(def-image-spec false-color-image 2b-palette-image 
		(:fetch :rgba
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-2b-color-map* ;nonexistant at present
		 :store :rgba
		 :rescale 
		 :dither t
		 )
		(:fetch :rgba
		 :combine :named
		 :combination-name :2b-gray-contribution
		 :combination-array *standard-2b-color-map* ;nonexistant at present
		 :store :rgba
		 :rescale 
		 :dither nil
		 ))

(def-image-spec false-color-image 2b-random-image 
		(:fetch :rgba
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-2b-color-map*
		 :store :rgba
		 :rescale 
		 :dither nil))

(def-image-spec false-color-image 4b-image 
		(:fetch :rgba :combine :dithered-named :store :rgba
			:combination-array *standard-4b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t
			)
		(:fetch :rgba :combine :8b-4b :store :rgba
			:rescale 
			:dither nil)
		)

(def-image-spec false-color-image 4b-palette-image 
		(:fetch :rgba
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-4b-color-map* ;nonexistant at present
		 :store :rgba
		 :rescale 
		 :dither t
		 )
		(:fetch :rgba
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-4b-color-map* ;nonexistant at present
		 :store :rgba
		 :rescale 
		 :dither nil
		 )
		)

(def-image-spec false-color-image 4b-random-image 
		(:fetch :rgba
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-4b-color-map*
		 :store :rgba
		 :rescale 
		 :dither nil))

(def-image-spec false-color-image false-color-image 
		(:fetch :rgba :store :rgba :rescale  :dither ))

(def-image-spec false-color-image 8b-palette-image 
		(:fetch :rgba
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale 
		 :dither t
		 )
		(:fetch :rgba
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale 
		 :dither nil
		 ))

(def-image-spec false-color-image 8b-random-image 
		(:fetch :rgba
		 :combine :dithered-named
		 :combination-name :gray-contribution-with-error
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :combine :named
		 :combination-name :gray-contribution
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale 
		 :dither nil))

(def-image-spec false-color-image rgb-image 
		(:fetch :rgba :store :r+g+b :dither  :rescale ))

(def-image-spec false-color-image packed-rgb-image 
		(:fetch :rgba :store :packed-rgb :dither  :rescale ))

(def-image-spec false-color-image packed-yuv-image 
		(:fetch :rgba :store :packed-yuv-from-rgb :dither  :rescale ))

(def-image-spec false-color-image 32b-image
		(:fetch :rgba
		 :combine :named-with-alpha
		 :combination-name :full-color-translation-array
		 :combination-array *STANDARD-GRAYSCALE-MAP*
		 :default-alpha 255
		 :store :rgba
		 :rescale 
		 :dither ))

4;;; source 8b-palette-image
0(def-image-spec 8b-palette-image b&w-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-false-color-map*
		 :combine :dithered-threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :brightness 255
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-false-color-map*
		 :combine :threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :rescale 
		 :dither nil))

(def-image-spec 8b-palette-image 2b-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-false-color-map*
		 :combine :dithered-named :store :rgba
		 :combination-array *standard-2b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-false-color-map*
		 :combine :8b-2b :store :rgba
		 :rescale 
		 :dither nil)
		)

(def-image-spec 8b-palette-image 2b-palette-image 
		(:fetch :rgba :store :rgba :rescale :select :dither )
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-2b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-2b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither nil))

(def-image-spec 8b-palette-image 2b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-false-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-false-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 8b-palette-image 4b-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-false-color-map*
		 :combine :dithered-named :store :rgba
		 :combination-array *standard-4b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-false-color-map*
		 :combine :8b-4b :store :rgba
		 :rescale 
		 :dither nil)
		)

(def-image-spec 8b-palette-image 4b-palette-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-false-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :combine :dithered-palette
		 :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :select
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-4b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-4b-color-map* 
		 :store :rgba
		 :rescale :average
		 :dither nil))

(def-image-spec 8b-palette-image 4b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-false-color-map*
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-false-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-4b-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-4b-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 8b-palette-image false-color-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :b&w-translation-array
		 :translation-array *standard-false-color-map*
		 :store :rgba
		 :rescale 
		 :dither 
		 ))

(def-image-spec 8b-palette-image 8b-palette-image 
		(:fetch :rgba :store :rgba :rescale :select :dither )
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb
		 :combine :dithered-palette
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb
		 :combine :palette
		 :combination-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :dither nil))

(def-image-spec 8b-palette-image 8b-random-image 
		(:fetch :rgba :map :new-palette :store :rgba
			:translation-array *standard-false-color-map*
			:combination-array *standard-false-color-map*
			:rescale :select
			:dither nil)
		(:fetch :rgba :map :named :store :rgba
			:translation-array *standard-false-color-map*
			:translation-name :full-color-translation-array
			:separate :rgb
			:combine :dithered-random-palette
			:combination-array *standard-false-color-map*
			:rescale :select
			:dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :combine :dithered-random-palette :store :rgba
		 :combination-array *standard-false-color-map*
		 :rescale :average
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :combine :random-palette :store :rgba
		 :combination-array *standard-false-color-map*
		 :rescale :average
		 :dither nil))

(def-image-spec 8b-palette-image rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :store :r+g+b
		 :rescale 
		 :dither 
		 ))

(def-image-spec 8b-palette-image packed-rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :store :packed-rgb
		 :rescale 
		 :dither 
		 ))

(def-image-spec 8b-palette-image packed-yuv-image 
		(:fetch :rgba
		 :map :named
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :separate :rgb :store :packed-yuv-from-rgb
		 :rescale 
		 :dither 
		 ))

(def-image-spec 8b-palette-image 32b-image 
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :default-alpha 255
		 :store :rgba
		 :rescale :select
		 :dither )
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-name :full-color-translation-array
		 :translation-array *standard-false-color-map*
		 :store :rgba
		 :rescale :average
		 :default-alpha 255
		 :separate :rgb
		 :combine :rgba
		 :dither ))

4;;; source 8b-random-image
0(def-image-spec 8b-random-image b&w-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-threshold
		 :black-pixel 0
		 :white-pixel -1
		 :store :rgba
		 :threshold 128
		 :brightness 255
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :b&w-translation-array
		 :black-pixel 0
		 :white-pixel -1
		 :combine :threshold
		 :store :rgba
		 :threshold 128
		 :rescale 
		 :dither nil))

(def-image-spec 8b-random-image 2b-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-named :store :rgba
		 :combination-array *standard-2b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :store :rgba
		 :translation-array *standard-false-color-map*
		 :translation-name :b&w-translation-array
		 :combine :8b-2b
		 :rescale 
		 :dither nil)
		)

(def-image-spec 8b-random-image 2b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-false-color-map*
	  :combination-array *standard-2b-grayscale-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map* ;nonexistant at present
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-2b-color-map* ;nonexistant at present
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-2b-color-map* ;nonexistant at present
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 8b-random-image 2b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-false-color-map*
	  :combination-array *standard-2b-grayscale-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-2b-grayscale-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-2b-grayscale-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-2b-grayscale-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 8b-random-image 4b-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :b&w-translation-array
		 :combine :dithered-named :store :rgba
		 :combination-array *standard-4b-grayscale-map*
		 :combination-name :gray-contribution-with-error
		 :rescale 
		 :dither t)
		(:fetch :rgba
		 :map :named
		 :store :rgba
		 :translation-array *standard-false-color-map*
		 :translation-name :b&w-translation-array
		 :combine :8b-4b
		 :rescale 
		 :dither nil)
		)

(def-image-spec 8b-random-image 4b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-false-color-map*
	  :combination-array *standard-4b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-4b-color-map*
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 8b-random-image 4b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-false-color-map*
	  :combination-array *standard-4b-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-4b-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 8b-random-image false-color-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :b&w-translation-array
		 :store :rgba
		 :rescale 
		 :dither ))

(def-image-spec 8b-random-image 8b-palette-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-false-color-map*
	  :combination-array *standard-false-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-false-color-map*
   :store :rgba
   :rescale :select
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :dithered-palette
   :combination-array *standard-false-color-map*
   :store :rgba
   :rescale :average
   :dither t)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb
   :combine :palette
   :combination-array *standard-false-color-map*
   :store :rgba
   :rescale :average
   :dither nil))

(def-image-spec 8b-random-image 8b-random-image 
  (:fetch :rgba :map :new-palette :store :rgba
	  :translation-array *standard-false-color-map*
	  :combination-array *standard-false-color-map*
	  :rescale :select
	  :dither nil)
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :select
   :dither t
   )
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :dithered-random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :average
   :dither t
   )		
  (:fetch :rgba
   :map :named
   :translation-array *standard-false-color-map*
   :translation-name :full-color-translation-array
   :separate :rgb :combine :random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale :average
   :dither nil
   ))

(def-image-spec 8b-random-image rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :r+g+b
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :r+g+b
		 :dither 
		 :rescale :average)
		)

(def-image-spec 8b-random-image packed-rgb-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-rgb
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-rgb
		 :dither 
		 :rescale :average)
		)

(def-image-spec 8b-random-image packed-yuv-image 
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-yuv-from-rgb
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :store :packed-yuv-from-rgb
		 :dither 
		 :rescale :average)
		)

(def-image-spec 8b-random-image 32b-image 
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :default-alpha 255
		 :store :rgba
		 :rescale :select
		 :dither 
		 )
		(:fetch :rgba
		 :map :named-with-alpha
		 :translation-array *standard-false-color-map*
		 :translation-name :full-color-translation-array
		 :separate :rgb :combine :rgba :store :rgba
		 :default-alpha 255
		 :rescale :average
		 :dither ))


4;;; source rgb-image
0(def-image-spec rgb-image b&w-image 
		(:fetch :r+g+b :separate :intensity :combine :dithered-threshold :store :rgba
			:black-pixel 0
			:white-pixel -1
			:brightness 255
			:threshold 128
			:rescale 
			:dither t)
		(:fetch :r+g+b :separate :intensity :combine :threshold :store :rgba
			:threshold 128
			:black-pixel 0
			:white-pixel -1
			:rescale 
			:dither nil)
		)

(def-image-spec rgb-image 2b-image 
		(:fetch :r+g+b :separate :intensity :combine :dithered-named :store :rgba
			:combination-array *standard-2b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :r+g+b :separate :intensity :combine :8b-2b :store :rgba
			:rescale 
			:dither nil))

(def-image-spec rgb-image 2b-palette-image 
		(:fetch :r+g+b :combine :dithered-palette :store :rgba
			:combination-array *standard-2b-color-map* ;nonexistant at present
			:rescale 
			:dither t
			)
		(:fetch :r+g+b :combine :palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec rgb-image 2b-random-image 
		(:fetch :r+g+b :combine :dithered-random-palette :store :rgba
			:combination-array *standard-2b-color-map* ;nonexistant at present
			:rescale 
			:dither t
			)
		(:fetch :r+g+b :combine :random-palette :store :rgba
			:combination-array *standard-2b-color-map* ;nonexistant at present
			:rescale 
			:dither nil
			))

(def-image-spec rgb-image 4b-image 
		(:fetch :r+g+b :separate :intensity :combine :dithered-named :store :rgba
			:combination-array *standard-4b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :r+g+b :separate :intensity :combine :8b-4b :store :rgba
			:rescale 
			:dither nil))

(def-image-spec rgb-image 4b-palette-image 
		(:fetch :r+g+b :combine :dithered-palette :store :rgba
			:combination-array *standard-4b-color-map* ;nonexistant at present
			:rescale 
			:dither t
			)
		(:fetch :r+g+b :combine :palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec rgb-image 4b-random-image 
		(:fetch :r+g+b :combine :dithered-random-palette :store :rgba
			:combination-array *standard-4b-color-map* ;nonexistant at present
			:rescale 
			:dither t
			)
		(:fetch :r+g+b :combine :random-palette :store :rgba
			:combination-array *standard-4b-color-map* ;nonexistant at present
			:rescale 
			:dither nil
			))

(def-image-spec rgb-image false-color-image 
		(:fetch :r+g+b :separate :intensity :store :rgba :rescale  :dither ))

(def-image-spec rgb-image 8b-palette-image 
		(:fetch :r+g+b :combine :dithered-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither t
			)
		(:fetch :r+g+b :combine :palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec rgb-image 8b-random-image 
		(:fetch :r+g+b :combine :dithered-random-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither t
			)
		(:fetch :r+g+b :combine :random-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec rgb-image rgb-image 
		(:fetch :r+g+b :store :r+g+b :rescale  :dither ))

(def-image-spec rgb-image packed-rgb-image 
		(:fetch :r+g+b :store :packed-rgb :rescale  :dither ))

(def-image-spec rgb-image packed-yuv-image 
		(:fetch :r+g+b :store :packed-yuv-from-rgb :rescale  :dither ))

(def-image-spec rgb-image 32b-image 
		(:fetch :r+g+b :combine :rgba :store :rgba :rescale  :dither 
			:default-alpha 255))


4;;; source packed-rgb-image
0(def-image-spec packed-rgb-image b&w-image 
		(:fetch :packed-rgb :separate :intensity :combine :dithered-threshold :store :rgba
			:black-pixel 0
			:white-pixel -1
			:brightness 255
			:threshold 128
			:rescale 
			:dither t)
		(:fetch :packed-rgb :separate :intensity :combine :threshold :store :rgba
			:threshold 128
			:black-pixel 0
			:white-pixel -1
			:rescale 
			:dither nil)
		)

(def-image-spec packed-rgb-image  2b-image 
		(:fetch :packed-rgb :separate :intensity :combine :dithered-named :store :rgba
			:combination-array *standard-2b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :packed-rgb :separate :intensity :combine :8b-2b :store :rgba
			:rescale 
			:dither nil))

(def-image-spec packed-rgb-image  2b-palette-image 
		(:fetch :packed-rgb :combine :dithered-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :packed-rgb :combine :palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-rgb-image  2b-random-image 
		(:fetch :packed-rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :packed-rgb :combine :random-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-rgb-image  4b-image 
		(:fetch :packed-rgb :separate :intensity :combine :dithered-named :store :rgba
			:combination-array *standard-4b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :packed-rgb :separate :intensity :combine :8b-4b :store :rgba
			:rescale 
			:dither nil))

(def-image-spec packed-rgb-image 4b-palette-image 
		(:fetch :packed-rgb :combine :dithered-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :packed-rgb :combine :palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-rgb-image  4b-random-image 
		(:fetch :packed-rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :packed-rgb :combine :random-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-rgb-image  false-color-image 
		(:fetch :packed-rgb :separate :intensity :store :rgba :rescale  :dither ))

(def-image-spec packed-rgb-image  8b-palette-image 
		(:fetch :packed-rgb :combine :dithered-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither t
			)
		(:fetch :packed-rgb :combine :palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-rgb-image  8b-random-image 
		(:fetch :packed-rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither t
			)
		(:fetch :packed-rgb :combine :random-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-rgb-image  rgb-image 
		(:fetch :packed-rgb :store :r+g+b :rescale  :dither ))

(def-image-spec packed-rgb-image  packed-rgb-image 
		(:fetch :packed-rgb :store :packed-rgb :rescale  :dither ))

(def-image-spec packed-rgb-image  packed-yuv-image 
		(:fetch :packed-rgb :store :packed-yuv-from-rgb :rescale  :dither ))

(def-image-spec packed-rgb-image  32b-image 
		(:fetch :packed-rgb :combine :rgba :store :rgba :rescale  :dither 
			:default-alpha 255))



4;;; source packed-yuv-image
0(def-image-spec packed-yuv-image  b&w-image 
		(:fetch :packed-yuv :separate :packed-y
			:combine :dithered-threshold :store :rgba
			:black-pixel 0
			:white-pixel -1
			:brightness 255
			:threshold 128
			:rescale 
			:dither t)
		(:fetch :packed-yuv :separate :packed-y :combine :threshold :store :rgba
			:threshold 128
			:black-pixel 0
			:white-pixel -1
			:rescale 
			:dither nil)
		)

(def-image-spec packed-yuv-image  2b-image 
		(:fetch :packed-yuv :separate :packed-y :combine :dithered-named :store :rgba
			:combination-array *standard-2b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :packed-yuv :separate :packed-y :combine :8b-2b :store :rgba
			:rescale 
			:dither nil))


(def-image-spec packed-yuv-image  2b-palette-image 
  (:fetch :yuv-rgb
   :combine :dithered-palette :store :rgba
   :combination-array *standard-2b-color-map*
   :rescale 
   :dither t
   )
  (:fetch :yuv-rgb :combine :palette :store :rgba
	  :combination-array *standard-2b-color-map*
	  :rescale 
	  :dither nil
	  ))

(def-image-spec packed-yuv-image  2b-random-image 
		(:fetch :yuv-rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :yuv-rgb :combine :random-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-yuv-image  4b-image 
		(:fetch :packed-yuv :separate :packed-y :combine :dithered-named :store :rgba
			:combination-array *standard-4b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :packed-yuv :separate :packed-y :combine :8b-4b :store :rgba
			:rescale 
			:dither nil))

(def-image-spec packed-yuv-image 4b-palette-image 
		(:fetch :yuv-rgb :combine :dithered-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :yuv-rgb :combine :palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec packed-yuv-image  4b-random-image 
		(:fetch :yuv-rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :yuv-rgb :combine :random-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither nil
			))


(def-image-spec packed-yuv-image  false-color-image
		(:fetch :packed-yuv :separate :packed-y
			:store :rgba :rescale :select :dither )

		(:fetch :packed-yuv
		 :separate :packed-y
		 :store :rgba
		 :rescale :average
		 :dither )
		)

(def-image-spec packed-yuv-image  8b-palette-image 
  (:fetch :yuv-rgb
   :combine :dithered-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale 
   :dither t
   )
  (:fetch :yuv-rgb
   :combine :palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale 
   :dither nil
   ))

(def-image-spec packed-yuv-image  8b-random-image 
  (:fetch :yuv-rgb
   :combine :dithered-random-palette :store :rgba
   :combination-array *standard-false-color-map*
   :rescale 
   :dither t
   )
  (:fetch :yuv-rgb :combine :random-palette :store :rgba
	  :combination-array *standard-false-color-map*
	  :rescale 
	  :dither nil
	  ))

(def-image-spec packed-yuv-image packed-yuv-image 
		(:fetch :yuv-rgb
		 :store :packed-yuv-from-rgb
		 :rescale 
		 :dither )
		)

(def-image-spec packed-yuv-image 32b-image
	  (:fetch :yuv-rgb
	   :combine :rgba
	   :default-alpha 255
	   :store :rgba
	   :rescale 
	   :dither ))

(def-image-spec packed-yuv-image rgb-image
	  (:fetch :yuv-rgb
	   :store :r+g+b
	   :rescale 
	   :dither ))

(def-image-spec packed-yuv-image packed-rgb-image
  	(:fetch :yuv-rgb
	 :store :packed-rgb
	 :dither  :rescale ))



4;;; source 32b-image
0(def-image-spec 32b-image b&w-image 
		(:fetch :rgba :separate :intensity :combine :dithered-threshold :store :rgba
			:brightness 255
			:threshold 128
			:black-pixel 0
			:white-pixel -1
			:rescale 
			:dither t)
		(:fetch :rgba :separate :intensity :combine :threshold :store :rgba
			:threshold 128
			:black-pixel 0
			:white-pixel -1
			:rescale 
			:dither nil))

(def-image-spec 32b-image 2b-image 
		(:fetch :rgba :separate :intensity :combine :dithered-named :store :rgba
			:combination-array *standard-2b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :rgba :separate :intensity :combine :8b-2b :store :rgba
			:rescale 
			:dither nil))

(def-image-spec 32b-image 2b-palette-image 
		(:fetch :rgba :separate :rgb :combine :dithered-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :rgba :separate :rgb :combine :palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec 32b-image 2b-random-image 
		(:fetch :rgba :separate :rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :rgba :separate :rgb :combine :random-palette :store :rgba
			:combination-array *standard-2b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec 32b-image 4b-image 
		(:fetch :rgba :separate :intensity :combine :dithered-named :store :rgba
			:combination-array *standard-4b-grayscale-map*
			:combination-name :gray-contribution-with-error
			:rescale 
			:dither t)
		(:fetch :rgba :separate :intensity :combine :8b-4b :store :rgba
			:rescale 
			:dither nil))

(def-image-spec 32b-image 4b-palette-image 
		(:fetch :rgba :separate :rgb :combine :dithered-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :rgba :separate :rgb :combine :palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec 32b-image 4b-random-image 
		(:fetch :rgba :separate :rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither t
			)
		(:fetch :rgba :separate :rgb :combine :random-palette :store :rgba
			:combination-array *standard-4b-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec 32b-image false-color-image 
		(:fetch :rgba :separate :intensity :store :rgba :rescale  :dither ))

(def-image-spec 32b-image 8b-palette-image 
		(:fetch :rgba :separate :rgb :combine :dithered-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither t
			)
		(:fetch :rgba :separate :rgb :combine :palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec 32b-image 8b-random-image 
		(:fetch :rgba :separate :rgb :combine :dithered-random-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither t
			)
		(:fetch :rgba :separate :rgb :combine :random-palette :store :rgba
			:combination-array *standard-false-color-map*
			:rescale 
			:dither nil
			))

(def-image-spec 32b-image rgb-image 
		(:fetch :rgba :separate :rgb :store :r+g+b :rescale  :dither )
		)

(def-image-spec 32b-image packed-rgb-image 
		(:fetch :rgba :separate :rgb :store :packed-rgb :rescale  :dither )
		)


(def-image-spec 32b-image packed-yuv-image 
		(:fetch :rgba :separate :rgb :store :packed-yuv-from-rgb
			:rescale  :dither 
			)
		)

(def-image-spec 32b-image 32b-image 
		(:fetch :rgba :store :rgba :rescale :select :dither )
		(:fetch :rgba :separate :rgba :combine :rgba :store :rgba
			:rescale :average :dither ))

(def-image-spec 32b-no-alpha-image 32b-image 
		(:fetch :rgba :separate :rgb :combine :rgba :store :rgba
			:default-alpha 255
			:rescale  :dither ))
;source end

#||
(defun compare-specs ()
  (maphash #'(lambda (key dat)
	       (loop with new-dat = (gethash key rescale-image-specs)
		     for (k v) on dat by #'cddr
		     as new-v = (get (locf new-dat) k)
		     unless (eql new-v v)
		       do (ferror "For ~S, ~S was ~S is ~S"
				  key k v new-v)
		     )
	       )
	   old-rescale-image-specs))
	   
||#
3;;
;; Now the basic "hardway" image process, which scales
;; arbitrarily in X and 
0(defconst *rescale-image-limiting-size* (ash 1 (- 32. 8)))

(defmethod (rescale-image-propriety-test image-process)
	   (old-width new-width old-height new-height &rest ignore
		      &key &allow-other-keys)
  (ignore new-width new-height)
  ( (* old-width old-height)
     *rescale-image-limiting-size*))

(defconst rescale-image
	  (make-instance 'image-process
			 :main-loop :rescale
			 :name :rescale-image
			 :arglist '(width height
					  src sx sy
					  dest dx dy
					  dest-width dest-height)
			 :key-args '(:rescale :dither :jitter)
			 :propriety-test 'rescale-image-propriety-test
			 :permitted-args '(:threshold :brightness :default-alpha
					   :black-pixel :white-pixel
					   :combination-array :combination-name
					   :translation-array :translation-name
					   :from-field :to-field 
					   )
			 :common-args '(:note-progress "Rescaling"
					:rescale :average)))

(defconst pixel-aspect-ratio-image-processes
	  (list
	    pixel-replication
	    pixel-copy
	    pixel-rescale
	    change-pixel-aspect-ratio-19//16
	    change-pixel-aspect-ratio-16//19
	    change-pixel-aspect-ratio-9//8
	    change-pixel-aspect-ratio-8//9
	    change-pixel-aspect-ratio-4//3
	    change-pixel-aspect-ratio-3//4
	    rescale-image))




4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; User level driver functions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



0(defun1 appropriate-rescale-image-process
0       (old-width new-width old-height new-height &key (slop 1.0) spec)
  (loop for image-process in pixel-aspect-ratio-image-processes
	as test = (image-process-propriety-test image-process)
	when (or (null test)
		 (and (funcall test image-process
			  old-width new-width old-height new-height :slop slop
			  :spec spec)
		      (or (null spec)
			  (image-process-create-on-demand image-process)
			  (find-image-process image-process spec
					      :error-p nil :create-p nil)
			  )))
	  return image-process
		 finally (ferror "No image process can rescale this way, try with rescale :SELECT or :FILTER"))
  )

(defun 1clip-margin 0(test from-left to-left from-width to-width from-clip-left to-clip-left)
  (when (funcall test from-left from-clip-left)
    (let* ((dif (float (- from-clip-left from-left)))
	   (scale (// dif from-width )))
      (setq from-left from-clip-left
	    to-left (+ to-left (* scale to-width)))))
  (when (funcall test to-left to-clip-left)
    (let* ((dif (float (- to-clip-left to-left)))
	   (scale (// dif to-width )))
      (setq to-left to-clip-left
	    from-left (+ from-left (* scale from-width)))))
  (values (round from-left)(round to-left)))

(defvar *zoom-rectangle-debug* nil ":BREAK stops before calling function
:BREAK-IN stops inside the function
:BREAK-IN-1 stops inside the function, on the first line only
:MODE-LOCK stops when the mode lock key is down")

(defun call-debugger ()
  (funcall 'dbg))

(defun 1convert-height-for-fields 0(this-height this-height-field other-field)
  2;convert heights into corresponding heights, given that0 2either or both may a field
  ;(and which field).  If this height and the result is not, there are only 1/2 as 
0  2;many lines in the destination.  If this height is not a field and the other
0  2;height is, there are twice as many lines in it.
0  (cond ((eq (null other-field)
	     (null this-height-field))
	 2;fields are the same size, either both fields or both frames
0	 this-height)
	((null this-height-field)
	 2;dest is a frame, source is a field, therefore source is twice as high
0	 (* this-height 2))
	((eql this-height-field 1)
	 2;dest is field0 21, source is a frame so half as high (round up)
0	 (ceiling this-height 2))
	(t
	 2;dest is field0 22, source is a frame so half as high (round down)
0	 (floor this-height 2))))


(defun 1zoom-rectangle
0       (&rest args
	&key

	from-array
	from-array-stream
	(from-image-type (default-image-type from-array))
	(from-left 0)
	(from-top 0)
	(from-right)
	(from-bottom)
	(from-clipping-rectangle)
	from-field

	to-array
	to-array-stream
	(to-image-type  (default-image-type to-array))
	(to-left 0)
	(to-top 0)
	(to-right)
	(to-bottom)
	to-window
	(to-clipping-rectangle)
	to-field
	(write-mask -1)

	(translation-array)
	(combination-array)
	(translation-name)
	(combination-name)
	(threshold)
	(black-pixel 0)
	(white-pixel -1)
	(brightness)
	(dither t)
	(jitter)

	(default-alpha)
	(force-default-alpha nil)

	image-process
	rescale
	fast

	(pixel-aspect-ratio-slop 1.0)
	(floating-point-slop 0.0001)

	(fetch nil fetch-supplied)
	(store nil store-supplied)
	(map nil map-supplied)
	(combine nil combine-supplied)
	(separate nil separate-supplied)

	(error-p t)
	(perspective nil)
	from-quad to-quad scratch-array 
	other-args other-first-pass-args other-second-pass-args
	(zoom-rectangle-debug *zoom-rectangle-debug*)
	(intensity-operator :intensity)
	per-line-function
	)

  (ignore from-quad to-quad floating-point-slop scratch-array error-p perspective)

  (when (and (eq from-image-type '32b-image)
	     force-default-alpha)
    (setq from-image-type '32b-no-alpha-image))

  (let* ((rescale (cond ((eq rescale t) :average)
			(rescale rescale)
			((eq fast t) :select)
			(fast fast)
			(t :average)))
	 (byte-size (array-element-byte-size (if (listp to-array) (first to-array) to-array)))
	 (write-mask (if (or (eql write-mask -1)
			     (eql write-mask (1- (lsh 1 byte-size))))
			 nil
			 write-mask))
	 (from-image-width-multiplier (image-width-multiplier from-image-type))
	 (to-image-width-multiplier (image-width-multiplier to-image-type)))

    (if (or from-quad to-quad (eq rescale :filter))
	(lexpr-funcall #'transform-quadrangle args)

	(when jitter
	  (setq dither t)				
	  (setq jitter t))

	(multiple-value-bind (to-right-margin to-bottom-margin)
	    (decode-raster-array (if (listp to-array) (first to-array) to-array))
	  (setq to-right-margin (// to-right-margin to-image-width-multiplier))
	  (multiple-value-bind (from-right-margin from-bottom-margin)
	      (decode-raster-array (if (listp from-array) (first from-array) from-array))
	    (setq from-right-margin (// from-right-margin from-image-width-multiplier))

	      (destructuring-bind (from-clip-left
				    from-clip-top
				    from-clip-right
				    from-clip-bottom)
		  from-clipping-rectangle

		(destructuring-bind (to-clip-left
				      to-clip-top
				      to-clip-right
				      to-clip-bottom)
		    to-clipping-rectangle

		  2;;prepare the destination array loop.  If there
0		  2;;are no destination arrays, use PROGN
0		  (cond (from-array-stream (setq from-clip-top from-top))
			(from-clip-top
			 (setq from-clip-top (max from-clip-top 0)))
			(t (setq from-clip-top 0)))

		  (cond (from-clip-left (setq from-clip-left (max from-clip-left 0)))
			(t (setq from-clip-left 0)))

		  (cond (from-array-stream (setq from-clip-bottom from-bottom))
			(from-clip-bottom
			 (setq from-clip-bottom
			       (min from-clip-bottom from-bottom-margin)))
			(t (setq from-clip-bottom from-bottom-margin)))

		  (cond (from-clip-right
			 (setq from-clip-right (min from-right-margin from-clip-right)))
			(t (setq from-clip-right from-right-margin)))

		  2;;prepare the destination array loop.  If there
0		  2;;are no destination arrays, use PROGN
0		  (cond (to-array-stream (setq to-clip-top to-top))
			(to-clip-top
			 (setq to-clip-top (max to-clip-top 0)))
			(t (setq to-clip-top 0)))
		  (cond (to-clip-left (setq to-clip-left (max to-clip-left 0)))
			(t (setq to-clip-left 0)))
		  (cond (to-array-stream (setq to-clip-bottom to-bottom))
			(to-clip-bottom
			 (setq to-clip-bottom (min to-clip-bottom to-bottom-margin)))
			(t (setq to-clip-bottom to-bottom-margin )))
		  (cond (to-clip-right
			 (setq to-clip-right (min to-right-margin to-clip-right)))
			(t (setq to-clip-right to-right-margin)))

		  (when (eql to-field 1)
		    (incf to-clip-bottom))

		  (when (eql from-field 1)
		    (incf from-clip-bottom))

	    (let* ((to-right (or to-right to-right-margin))
		   (to-bottom  (or to-bottom to-bottom-margin))
		   (from-right  (or from-right from-right-margin))
		   (from-bottom  (or from-bottom from-bottom-margin))
		   (from-left (or from-left 0))
		   (from-top (or from-top 0))
		   (to-left (or to-left 0))
		   (to-top (or to-top 0))
		   (from-w (- from-right from-left))
		   (from-h (- from-bottom from-top))
		   (to-w (- to-right to-left))
		   (to-h (- to-bottom to-top)))


	      (multiple-value (from-right to-right)
		(clip-margin #'> from-right  to-right
			     from-w to-w
			     from-clip-right to-clip-right))

	      (multiple-value (from-bottom to-bottom)
		(clip-margin #'> from-bottom to-bottom
			     from-h to-h
			     from-clip-bottom to-clip-bottom))

	      (multiple-value (from-left to-left)
		(clip-margin #'< from-left to-left
			     from-w to-w
			     from-clip-left to-clip-left))

	      (multiple-value (from-top to-top)
		(clip-margin #'< from-top to-top
			     from-h to-h
			     from-clip-top to-clip-top))

	      (setq to-w (- to-right to-left)
		    from-w (- from-right from-left)
		    to-h (- to-bottom to-top)
		    from-h (- from-bottom from-top))

	      (cond ((eql from-field 1) (setq from-h (ceiling from-h 2)))
		    ((eql from-field 2) (setq from-h (floor from-h 2))))

	      (cond ((eql to-field 1) (setq to-h (ceiling to-h 2)))
		    ((eql to-field 2) (setq to-h (floor to-h 2))))

	      (when (and (eq rescale :average)
			 (eql from-w to-w)
			 (eql from-h to-h))
		(setq rescale :select))

	      (when (and (eq from-image-type to-image-type)
			 (eq rescale :select)
			 (eq translation-array combination-array))
		(cond ((member from-image-type '(8b-random-image 8b-palette-image))
		       (setq from-image-type 'false-color-image
			     to-image-type 'false-color-image))
		      ((member from-image-type '(4b-random-image 4b-palette-image))
		       (setq from-image-type '4b-image
			     to-image-type '4b-image))
		      ((member from-image-type '(2b-random-image 2b-palette-image))
		       (setq from-image-type '2b-image
			     to-image-type '2b-image))))

	      (let* ((spec-key (list from-image-type to-image-type rescale dither jitter))
		     (rescale-specs (or (gethash spec-key rescale-image-specs)
					(ferror "Missing image spec key for ~A" spec-key)))
		     (default-alpha (or default-alpha
					(get (locf rescale-specs) :default-alpha)))
		     (spec `(,@(when (and fetch-supplied
					  (neq fetch :default))
				 `(:fetch ,fetch))
			     ,@(when (and store-supplied (neq store :default))
				 `(:store ,store))
			     ,@(when (and combine-supplied
					  (neq combine :default))
				 `(:combine ,combine))
			     ,@(when (and separate-supplied
					  (neq separate :default))
				 `(:separate ,separate))
			     ,@(when (and map-supplied
					  (neq map :default))
				 `(:map ,map))
			     ,@(when (and default-alpha
					  (neq default-alpha :default))
				 `(:default-alpha ,default-alpha))
			     ,@(when from-array-stream
				 (list :computed-source-lines t))
			     ,@(when to-array-stream
				 (list :computed-dest-lines t))
			     :intensity-operator ,intensity-operator
			     ,@(copylist rescale-specs)
			     ))
		     (image-process (or image-process
					(appropriate-rescale-image-process
					  from-w to-w from-h to-h
					  :spec spec
					  :slop pixel-aspect-ratio-slop)))
		     (image-process-function
		       (find-image-process image-process
					   `(:from-field nil
					     :to-field nil
					     :write-mask ,(when write-mask t)
					     ,@spec )
					   :error-p t
					   :create-p t
					   :compile t))
		     (composition-function (compiled-function image-process-function))

		     (threshold (or threshold (get (locf rescale-specs) :threshold)))

		     (to-array (if to-array-stream
				   (list to-array to-array-stream)
				   to-array))
		     (from-array (if from-array-stream
				     (list from-array from-array-stream)
				     from-array))
		     (once)
		     )

		(when zoom-rectangle-debug
		  (format t "~&Zoom Rectangle:  Spec ~S~&Image process ~S~&Function ~S"
			  spec image-process image-process-function)
		  (when (eq zoom-rectangle-debug :break)
		    (call-debugger))
		  )

		(cl:apply composition-function
			  from-w from-h
			  from-array from-left from-top
			  to-array to-left to-top
			  to-w to-h
			  (image-process-accepts-other-rescale-args
			    image-process-function spec
			    :to-window to-window
			    :translation-array translation-array
			    :combination-array combination-array
			    :translation-name translation-name
			    :combination-name combination-name
			    :default-alpha default-alpha
			    :brightness brightness
			    :threshold threshold
			    :black-pixel black-pixel
			    :white-pixel white-pixel
			    :from-field from-field
			    :to-field to-field
			    :write-mask write-mask
			    :per-line-function
			    (cond (per-line-function)
				  ((eq *zoom-rectangle-debug* :break-in)
				   #'call-debugger)
				  ((eq *zoom-rectangle-debug* :break-in-1)
				   #'(lambda ()
				       (unless once
					 (funcall 'dbg)
					 (setq once t))))
				  ((eq *zoom-rectangle-debug* :mode-lock)
				   #'(lambda ()
				       (WHEN (DBG:WHEN-MODE-LOCK-INTERNAL)
					 (FUNCALL 'DBG)))))
			    :other-args (append
					  other-args
					  other-first-pass-args
					  other-second-pass-args))
			  )
		    (values spec image-process)
		    )))))))
    ))

(defun image-process-accepts-other-rescale-args
       (ip defaults &key threshold brightness default-alpha combination-name other-args
	black-pixel white-pixel from-field to-field write-mask to-window
	jitter per-line-function
	combination-array translation-name translation-array)

  (let* ((intensity-operator (get (locf defaults) :intensity-operator))
	 (brightness (cond ((numberp brightness) brightness)
			   (t (get (locf defaults) :brightness))))
	 (black-pixel (or black-pixel 0))
	 (white-pixel (or white-pixel -1))
	 (write-mask (or write-mask -1))
	 (threshold (cond ((numberp threshold) threshold)
			  ((and jitter (get (locf defaults) :jitter-threshold)))
			  ((get (locf defaults) :threshold))
			  (jitter 26.)))
	 (combination-name (or combination-name
			       (get (locf defaults) :combination-name)))
	 (translation-name (or translation-name
			       (get (locf defaults) :translation-name)))
	 (translation-array (or translation-array
				(get (locf defaults) :translation-array)))
	 (combination-array (or combination-array
				(get (locf defaults) :combination-array)))
	 (translation-array (if (symbolp translation-array)
				(symeval translation-array)
				translation-array))
	 (combination-array (if (symbolp combination-array)
				(symeval combination-array)
				combination-array))
	 )

      (destructuring-bind (nil nil repl)
	  (assoc intensity-operator *intensity-components*)
	(when repl
	  (when (eq translation-name :b&w-translation-array)
	    (setq translation-name repl))
	  (when (eq combination-name :b&w-translation-array)
	    (setq combination-name repl))))

    (when (floatp threshold) (setq threshold (round (* 255 threshold))))
    (when (floatp brightness) (setq brightness (round (* 255 brightness))))
    (lexpr-funcall #'image-process-accepts-other-args
		   ip
		   :per-line-function per-line-function
		   :brightness brightness
		   :threshold threshold
		   :default-alpha default-alpha
		   :combination-name combination-name
		   :combination-array combination-array
		   :translation-name translation-name
		   :translation-array translation-array
		   :black-pixel black-pixel
		   :white-pixel white-pixel
		   :from-field from-field
		   :to-field to-field
		   :write-mask write-mask
		   :to-window to-window
		   other-args)))


#||

For reference: Lamb claims the mit-hack gives better grayscale.
Preliminary tests are inconclusive

;;; Equalizing

;;; The intensity values are remapped to enhance the contrast in the
;;; entire image, based on a histogram of the intensities in a (moused)
;;; rectangular portion of the image.  The intensities are changed so
;;; that there are roughly the same number of pixels having each
;;; possible intensity.
(defun make-equalizing-map (image)
  (let ((hist (cl:make-array 256. :initial-element 0))
	(map (make-array 256.)))
    (let ((left 0) (top 0))
      (multiple-value-bind (right bottom) (decode-raster-array image)
	;; Build histogram of intensity values in moused rectangle.  Histogram
	;; has 256 bins, one bin for each possible intensity value.  The values
	;; in the bins are how many pixels have the corrseponding value.
	(loop for j from top below bottom
	      do (loop for i from left below right
		       do (incf (aref hist (raster-aref image i j)))))
	;; Build map for mapping from original intensity to a new one.  The new
	;; intensity values are such that 1/256th of the pixels in the image has
	;; each intensity value, or close to this.
	(loop with total-npix = (* (- right left) (- bottom top))
	      for index from 0 to 255
	      summing (aref hist index) into npix
	      do (setf (aref map index) (floor (* npix 255) total-npix)))
	map))))
	
(defun apply-map (image map)
  (multiple-value-bind (xdim ydim) (decode-raster-array image)
    ;; Now "equalize" the image by applying the intensity map
    (loop for y from 0 below ydim do
      (loop for x from 0 below xdim do
	(setf (raster-aref image x y) (aref map (raster-aref image x y)))))))

;;;; Dithering
;;;; (Convert an 8 bit/pixel image to a 1 bit/pixel image)

;;; Given an array of grey values, build a 1 bit image that will look like
;;; the grey image when displayed.
(defun dither-image (8bit 1bit)
  (multiple-value-bind (xdim ydim) (decode-raster-array 8bit)
      (let ((8bit 8bit)				; so the array-registers will work
	    (1bit 1bit)
	    (line-buffer (make-array (+ 3 xdim) :initial-value 0))
	    (local-err) (n+w))
	(declare (compiler:array-register-1d 8bit 1bit))
	(loop for y from 0 below ydim do
	  (loop for x from 0 below xdim
		and w  from 0			; line buffer indeces
		and nw from 1
		and n  from 2
		and ne from 3
		do
	    (setq n+w (+ (aref line-buffer n) (aref line-buffer w)))
	    (setq local-err (+ (ash (+ (aref line-buffer nw)
				       (aref line-buffer ne)
				       n+w n+w n+w)
				    -3)
			       (raster-aref 8bit x y)))
	    (cond ((< local-err 0)
		   (setf (aref line-buffer nw) local-err)
		   (setf (raster-aref 1bit x y) 1))
		  (t
		   (setf (aref line-buffer nw) (- local-err 255))
		   (setf (raster-aref 1bit x y) 0))))))))

||#
