;;; -*- Base: 8; Lowercase: Yes; Mode: Lisp; Package: (color); -*-


;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;; File created by COYNE, Symbolics Graphics Division, on 2/6/84.

;--------------------------------------------------------------------------------------------

;cm-request is a symbol, either :required indicating a certain number or :my-share indicating
;that it will take as many as it can get.  If :required, the number is in number-of-cm-slots.
(defflavor color-map-allocation-mixin
	((full-color? :ask)
	 (cm-request :my-share)
	 (first-cm-slot 1)
	 (number-of-cm-slots 0)) ()
  (:initable-instance-variables full-color?)
  (:settable-instance-variables)
  (:default-init-plist
   :full-color? :ask))

(defflavor virtual-color-map-mixin
	((virtual-color-map))
	()
  (:required-flavors color-map-allocation-mixin)
  (:settable-instance-variables))


(defmethod (:make-virtual-color-map virtual-color-map-mixin) (screen)

  (let* ((len (send screen :color-map-description))
	 (old-map virtual-color-map))
    (when (or (null old-map)
	      ( len (array-length old-map)))
      (loop with image = (make-array len ':type 'art-q)
	    for i from 0 below len
	    do (setf (aref image i) (make-instance 'standard-color))
	       finally (setq virtual-color-map image)
		       (send (aref image (1- len)) :set-rgb 1.0 1.0 1.0)))
    (setq number-of-cm-slots (- len first-cm-slot 1))
    ))


(defmethod (:get-vcm-slot-object virtual-color-map-mixin) (slot)
  (aref virtual-color-map slot))


(defmethod (:update-screen virtual-color-map-mixin) (screen)
  (loop with mapn = (send screen :map-segment-number)
	for i from first-cm-slot below (+ first-cm-slot number-of-cm-slots)
	do
    (multiple-value-bind (r g b)
	(send (aref virtual-color-map i) :rgb)
      (send screen :write-managed-map i r g b mapn))
	finally
	  (send screen :new-color-map (send screen :color-map-image) mapn)
	  ))


;;;----------------------------------------------------------------------------------------

(defun 24bit-color-maps ()
  (let ((mapn (send color:color-screen :map-segment-number))
	(map (send color:color-screen :color-map-image)))
    (send color:color-screen :initialize-color-map mapn map)
    (send color:color-screen :new-color-map map mapn)))

(defmacro with-mouse-sheet ((sheet) &body body)
  (let ((old-sheet (gensym)))
    `(let ((,old-sheet tv:mouse-sheet))
       (unwind-protect
	 (progn
	   (tv:mouse-set-sheet ,sheet)
	   . ,body)
	 (tv:mouse-set-sheet ,old-sheet)))))

    
(defflavor display-pane-mixin ((display-time 0)) ()
  (:required-flavors active-mixin tv:window tv:pane-mixin color-map-allocation-mixin))

(defflavor display-pane ()
	   (display-pane-mixin active-mixin tv:window
	    tv:pane-mixin color-map-allocation-mixin)
  (:default-init-plist :label nil :bottom-margin-size 0 :borders 1 :border-margin-width 0))

(defmethod (:init display-pane-mixin :after) (ignore)
  (send self :set-borders 1)
  (setq tv:blinker-list nil))

(defmethod (:mouse-click display-pane-mixin) (button x y)
  (send self ':force-kbd-input (list ':display-buttons button x y))
  t)

(defmethod (:who-line-documentation-string display-pane-mixin) ()
  "CLICK FOR SYSTEM MENU")

(defmethod (:init display-pane-mixin :before) (ignore)
  (setq number-of-cm-slots 1)
  (setq cm-request :required))

(defmethod (:refresh display-pane-mixin :after) (&optional type)
  (when (send (send self :superior) :active-editor?)
    (send self :update-value-from-object (send tv:superior :value-object) tv:superior
	  *lots-of-time* t))
  (when (and active? tv:exposed-p (or (not tv:restored-bits-p) (eq type ':size-changed)))
    (if full-color?
	(send self :draw-display (send tv:superior :value-object))
	(multiple-value-bind (width height)
	    (send self ':inside-size)
	  (send self :draw-rectangle width height 0 0
		(color:scf
		  (if (eq (send tv:screen :map-mode) :12-bit)
		      (dpb first-cm-slot (byte 16 16.) first-cm-slot)
		      (dpb first-cm-slot (byte 8 16.)
			   (dpb first-cm-slot (byte 8 8) first-cm-slot)))
		  -1))))))


;;; only for full color
(defmethod (:draw-display display-pane-mixin) (color-object)
  (multiple-value-bind (r g b)
      (send color-object :rgb)
    (let ((alu (color:scf 0 -1)))
      (send tv:screen :compute-rgb-alu alu r g b)
      (multiple-value-bind (width height)
	  (send self :inside-size)
	(send self :draw-rectangle width height 0 0 alu)))))

(defmethod (:update-value-from-object display-pane-mixin :after)
	   (value-object ignore time-limit &optional ignore)
  (when (<= display-time time-limit)
    (if full-color? (send self :draw-display value-object)
	(multiple-value-bind (r g b)
	    (send value-object :rgb)
	  (send (send tv:superior :get-vcm-slot-object first-cm-slot)
		:set-rgb r g b)
	  (when (>= time-limit display-time)
	    ;; only change real color-map if time-limit is small
	    (multiple-value-bind (hr hg hb)
		(send tv:screen :rgb->hardware-rgb r g b)
	      (send tv:screen :write-color-map first-cm-slot hr hg hb)))))))


;;; The slider panes only want to know about changes in a scalar value.  However, the
;;; color editor sends value-object to panes.  The panes want to get a numeric value.
;;; This flavor does the extraction and passes the numeric value on to the slider.
;;; access-method is the method we send to the color-object to get this sliders value
;;; set-method is the method we send to the color-object to set this sliders value
(defflavor slider-window-mixin (access-method set-method color-space) ()
  (:required-flavors basic-slider-window active-mixin)
  (:gettable-instance-variables)		;gettable for debugging*****
  (:required-instance-variables tv:superior))

(defflavor slider-window ()
	   (tv:pane-no-mouse-select-mixin
	    basic-slider-window
	    active-mixin
	    tv:window
	    slider-window-mixin)
  (:default-init-plist :borders 1 :border-margin-width 0))

;;; I reflect where the mouse is by changing my value, moving my slider and telling
;;; my superior that the world's state has changed. Time-limit indicates whether we
;;; can update the entire display or just those who can react quickly.  When the
;;; mouse button is held down continuously, we want things to change quickly.  This
;;; means that all things won't have time to change.  Time-limit tells them that.
(defmethod (:mouse-wants-to-set-value slider-window-mixin :after) (x y button time-limit)
  y
  x
  Button
  ;; tell superior that value has changed.
  (send tv:superior :notify self set-method value time-limit))

(defmethod (:update-value-from-object slider-window-mixin)
	   (val-object sender time-limit &optional ignore)
  ;;; tells basic slider window to update value
  (send self :update-value (send val-object access-method) sender time-limit))

;;; change the instance variables of a given slider so that behaves as a given color
(defmethod (:reprocess-slider slider-window-mixin) (color-info space color-dimension)
  (setq min-value (get (get (second (assoc space color-info)) color-dimension) :min))
  (setq max-value (get (get (second (assoc space color-info)) color-dimension) :max))
  (setq active? t)
  (setq color-space space)
  (setq access-method color-dimension)
  (setq set-method (get (get (second (assoc space color-info)) color-dimension) :set-method))
  (let ((name (get (get (second (assoc space color-info)) color-dimension) :name))
	(nickname (get (getf (second (assoc space color-info)) color-dimension) :nickname)))
    (setq label-string nickname)
    (if (or (not (send self :side-display?)) (not nickname)) (setq label-string name))))

;;; color-map-size is the number of colors beneath the slider
;;; color-map-start is the first color map slot where the scale-size elements are stored 
(defflavor color-bar (color-object-right color-object-left color-space
			(color-slider-redisplay-time 1) (full-color-segments 53.))
	   (color-map-allocation-mixin)
  (:init-keywords :flavor)
  (:gettable-instance-variables)
  (:settable-instance-variables full-color-segments color-slider-redisplay-time)
  (:required-flavors window-inner-rectangle-mixin tv:window))

(defmethod (:set-boundaries color-bar) (flavor)
  (setq color-object-left (make-instance flavor))
  (setq color-object-right (make-instance flavor)))

(defmethod (:init color-bar :before) (plist)
  (let ((color-flavor (get plist :flavor)))
    (send self :set-boundaries (if color-flavor color-flavor 'color:standard-color)))
  (setq cm-request :my-share))

;;; this message sent from above when some pane changed state of world
(defmethod (:update-color-bar color-bar) (sender time-limit)
  (if full-color?
      (send self :draw-color-bar time-limit)
      (when (<= color-slider-redisplay-time time-limit)
	(loop for slot-number from first-cm-slot below (+ first-cm-slot number-of-cm-slots)
	      for co = (send sender :get-vcm-slot-object slot-number)
	      do
	  (send color-object-left :interpolate color-space color-object-right
		(// (1+ (- slot-number first-cm-slot)) (float number-of-cm-slots))
		co)))))

(defmethod (:new-background color-bar) ())

(defmethod (:inner-width color-bar) ()
  (- inner-right-pos inner-left-pos))

(defmethod (:draw-color-bar color-bar) (time-limit) 
  ;so that things like sliders know that their background has slipped out from under them.
  (send self :new-background)			
  (when (<= color-slider-redisplay-time time-limit)
    (if full-color?
	(loop with total = (float full-color-segments)
	      for i from 0 below total
	      with x-incr = (// (- inner-right-pos inner-left-pos) total)
	      with incr = (1+ (fix x-incr))
	      with answer = (send color-object-left :make-duplicate :rgb)
		;**** why rgb?****
	      with alu = (color:scf 0 -1)
	      initially
	      (progn
		(when (not (send self :side-display?))
		  (send alu :set-fill-data 0)
		  (send self :draw-rectangle inner-left-pos 1 0 inner-top-pos alu)))
	      do
	      (send color-object-left :interpolate color-space color-object-right
		    (// i total) answer)
	      (multiple-value-bind (r g b)
		  (send answer :rgb)
		(send tv:screen :compute-rgb-alu alu r g b))
	      ;;; width height x y
	      (send self :draw-rectangle
		    incr 1 (+ inner-left-pos (fix (* x-incr i)))
		    inner-top-pos alu))
	(loop with mode = (send tv:screen :map-mode)
	      for i from 0 below number-of-cm-slots
	      as color-value-1 = (+ i first-cm-slot)
	      as color-value = (if (eq mode :12-bit)
				   (dpb color-value-1 (byte 16 16.) color-value-1)
				   (dpb color-value-1 (byte 8 16.)
					(dpb color-value-1 (byte 8 8) color-value-1)))
	      with element-length =  (// (float (- inner-right-pos inner-left-pos))
					 number-of-cm-slots)
	      for horizontal-start = (+ inner-left-pos (sys:round (* i element-length)))
	      for horizontal-end = (sys:round (+ inner-left-pos (* (1+ i) element-length)))
	      for alu = (color:scf color-value -1)
	      do
	      (send self ':draw-line horizontal-start inner-top-pos
		    horizontal-end inner-top-pos alu)))
    ;;; alu w h from to
    (if (> (- inner-bottom-pos inner-top-pos) 3)
	(send self ':bitblt-within-sheet tv:alu-seta (- inner-right-pos inner-left-pos)
	      (- inner-bottom-pos inner-top-pos) inner-left-pos inner-top-pos
	      inner-left-pos (1+ inner-top-pos)))
    (send self :send-if-handles :save-those-knob-bits))
  )

;; THIS thing tells the generic color-bar what colors to draw between.
;;****** slider control is slightly wrong.  There should be a value-object-controller
;; which has access-method (maybe set-method) and color-space. *******
(defflavor color-slider-window-mixin (last-left-color last-right-color) ()
  (:settable-instance-variables)
  (:required-flavors slider-window color-bar basic-slider-window))	

(defflavor color-slider-window ()
	   (slider-window color-bar basic-slider-window color-slider-window-mixin))

(defmethod (:set-boundaries color-slider-window-mixin :after) (ignore)
  (variable-makunbound last-left-color)
  (variable-makunbound last-right-color))

;;; the color has changed. recompute color-object1 and color-object2 (the limitting colors) to
;;; reflect this change.  This must draw before the knob itself does.
(defmethod (:update-value-from-object color-slider-window-mixin :before)
	   (new-color sender time-limit &optional unconditional?)
  (when (<= color-slider-redisplay-time time-limit)
    ;;; set up left and right limitting colors for this color space dimension
    (color:duplicate-color new-color color-space color-object-left)
    (color:duplicate-color new-color color-space color-object-right)
    (send color-object-right :set-component access-method max-value)
    (send color-object-left :set-component access-method min-value)
    (cond ((not (variable-boundp last-left-color))    ;; only on first pass
	   (send self :update-color-bar sender time-limit)
	   (setq last-left-color (color:duplicate-color color-object-left color-space))
	   (setq last-right-color (color:duplicate-color color-object-right color-space)))
	  ;; if the limitting colors for this slider have changed, redraw color bar.
	  ((or (not (color:colors-equal? last-left-color color-object-left color-space))
	       unconditional?)
	   (send self :update-color-bar sender time-limit)
	   (color:duplicate-color color-object-left color-space last-left-color)
	   (color:duplicate-color color-object-right color-space last-right-color)))))

(defmethod (:refresh color-slider-window-mixin :after) (&optional ignore)
  (when (send (send self :superior) :active-editor?)
    (when (not full-color?)
      (send self :draw-color-bar *lots-of-time*))
    (send self :update-value-from-object
	  (send tv:superior :value-object)
	  tv:superior
	  *lots-of-time* t)))

(defflavor color-editor-mixin (value-object (max-number-of-sliders 3) saved-color-map
					    (active-editor? nil))
	   ()
  (:required-flavors color:virtual-color-map-mixin color-map-allocation-mixin
   si:property-list-mixin tv:bordered-constraint-frame-with-shared-io-buffer)
  (:settable-instance-variables)
  (:init-keywords :initial-color-space :initial-value-object-flavor :use-display-pane?
   :side-display? :display-size :numeric-display? :numeric-redisplay-time
   :full-color-segments)
  (:default-init-plist :use-display-pane? t 
    :numeric-display? nil
    :numeric-redisplay-time *lots-of-time*
    :full-color-segments 60.
    :edges-from :mouse
    :display-size .3
    :first-cm-slot 1.
    :side-display? t
    :cm-request ':my-share
    :use-display-pane? t
    :initial-color-space :ihs
    :initial-value-object-flavor 'color:standard-color
    :borders 1
    :border-margin-width 0
    :save-bits nil))

(defmethod (:activate color-editor-mixin :after) (&rest ignore)
  (send self :make-virtual-color-map tv:screen)
  (send self :new-parameters nil)
  )

(defmethod (:set-full-color? color-editor-mixin) (to)

  (let ((to (if (eq to :ask)
		(multiple-value-bind (nil nil type)
		    (send (send self :screen) :color-map-description)
		  (eq type :independent))
		(and to t))))

    (unless (eq to full-color?)
      ;; change full color mode
      (setq full-color? to)
      (send self :divy-up-color-map)
      (if (null to)
	  (send self :update-screen tv:screen)
	  (loop for i in (send self :send-if-handles :list-of-panes)
		do (send i :send-if-handles :set-full-color? t)
		finally
		  (let ((screen (send self :screen)))
		    (send screen :new-color-map
			  (send self :saved-color-map)
			  (send screen :map-segment-number)))))
      )))

(defmethod (:divy-up-color-map color-editor-mixin) ()
  (send self :make-virtual-color-map tv:screen)
  (loop with number-taken = first-cm-slot
	for pane in (send self :list-of-panes)
	as request = (send pane :send-if-handles :cm-request)
	if (and (typep pane 'color-map-allocation-mixin) (send pane :active?))
	  do
	    (send pane :set-full-color? nil)
	and if (eq request :required)
	      do (send pane :set-first-cm-slot number-taken)
		 (incf number-taken (send pane :number-of-cm-slots))
	else collect pane into splitters-list
	finally 
	  (loop for splitters on splitters-list
		as number-free first (- number-of-cm-slots number-taken)
			       then (- number-free colors-per-pane)
		as splitter = (car splitters)
		as colors-per-pane = (min (// number-free
					      (length splitters))
					  (send splitter :full-color-segments)
					  (send splitter :inner-width))
		do
		(send splitter :set-first-cm-slot number-taken)
		(send splitter :set-number-of-cm-slots colors-per-pane)
		(incf number-taken colors-per-pane))
	  (setq number-of-cm-slots (- number-taken first-cm-slot))
	  ))


;;; slider sends this to color-editor when slider's value has changed
(defmethod (:notify color-editor-mixin) (sender set-method value time-limit)
  sender
  (send value-object set-method value)
  (dolist (child tv:inferiors)
    (if (and (neq child sender) (send child :send-if-handles :active?))
	(send child :send-if-handles
	      :update-value-from-object value-object self time-limit)))
  ;; write virtual color map to real hardware color map
  (if (and (not full-color?) (> time-limit *little-time*))
      (send self :update-screen tv:screen)))


(defmethod (:list-of-panes color-editor-mixin) (&optional (flavor-type 'tv:sheet))
  (if (variable-boundp tv:internal-panes)
      (loop for pane in tv:internal-panes
	    append (if (typep (cdr pane) flavor-type) 
		       (list (cdr pane))
		      nil))))
      
;;; Change the panes so that they are sliders for the color spaces we desire
;;; based on the property list and makes the appropriate ones active.
(defmethod (:sift-panes color-editor-mixin) (&aux list-of-valuator-panes)
  ;; deactivate all slider panes
  (setq list-of-valuator-panes (send self :list-of-panes 'valuator-mixin))
  (dolist (pane list-of-valuator-panes)
    (send pane :set-active? nil))

  ;; set the panes' instance variables to reflect the color dimension they are controlling.
  ;; the message :reprocess-slider does this.
  (loop with active-components =		;active color-spaces on property list 
	(loop for component in (send value-object :list-color-spaces)
	      ;; when this model is active
	      when (send self :get component)
	      collect component)
	with color-info = (send value-object :color-info)
	with pane-list = list-of-valuator-panes
	;; do one color space at a time
	for slider-color-space in active-components
	for dim-count from 3 by 3
	for dimensions = (get (second (assoc slider-color-space color-info)) :dimensions)
	when (or (> (length dimensions) (length pane-list))
		 (and (not (send self :get :side-display?))
		      (> dim-count max-number-of-sliders)))
	return nil
	do
	(loop for color-dimension in
	      (get (second (assoc slider-color-space color-info)) :dimensions)
	      for current-pane = (car pane-list)
	      do
	      (setq pane-list (cdr pane-list))
	      ;; actually change this pane to match one aspect of this color object.
	      (If (null current-pane)
		  (ferror nil "too many models"))
	      (send current-pane :reprocess-slider color-info slider-color-space
		    color-dimension))))

;;; set configuration to include only those panes which are active
(defmethod (:change-constraints color-editor-mixin) ()
  ;; the car of each element of tv:internal-panes is the name, the cdr is the actual pane
  (loop for pane in tv:internal-panes
	when (and (typep (cdr pane) 'valuator-mixin) (send (cdr pane) :active?))
	collect (car pane) into order-list
	when (and (typep (cdr pane) 'valuator-mixin) (send (cdr pane) :active?))
	collect `(,(car pane) :even) into constraint-list
	finally (setq tv:constraints
		      `((main . ((display
				   menu
				   ,@order-list)
				 ((display ,(send self :get :display-size)))
				 ((menu :ask :pane-size))
				 ,@(if constraint-list (list constraint-list))))))))

(defmethod (:new-parameters color-editor-mixin) (&optional (choose? t))
  (let ((ibase 10.) (base 10.))
    (if choose?
	(tv:choose-variable-values (send self :parameter-list) :label "Select Configuration"))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")    ;; when numeric-display? is turned on, turn side-display? off.  They really aren't independent.
0    (if (send self :get :numeric-display?)
	(send self :putprop nil :side-display?)
	(send self :putprop t :side-display?))

    (loop for i in (send self :list-of-panes)
	  do
      (send i :send-if-handles :set-full-color-segments
	    (send self :get :full-color-segments))
      finally
	(setq full-color? :x)
	(send self :set-full-color? (send self :get :full-color?))
	)

    (loop for i in (send self :list-of-panes)
	  do
      (send i :send-if-handles :set-numeric-redisplay-time
	    (send self :get :numeric-redisplay-time))
      (send i :send-if-handles :set-side-display? (send self :get :side-display?))
      (send i :send-if-handles :set-numeric-display? (send self :get :numeric-display?))
      (send i :send-if-handles :slider-recompute))

    (send self ':sift-panes)

    (send self :change-constraints)
    (send self ':redefine-configuration 'main (cdar tv:constraints) nil)
    ;;this caused infinite regress in 7.3i
    ;;(send self :set-configuration 'main)
    (unless full-color?
      (send self :update-screen tv:screen))
1    ;; refresh when changing configuration.
0    (if choose? (send self :refresh))
    ))

(defmethod (:parameter-list color-editor-mixin) ()

  (list
    (list (locf (get (send self :property-list-location) :display-size))
	  "Display Size            " :assoc '(("Small" . .2) ("Medium" . .3) ("Large" . .4)))
    (list (locf (get (send self :property-list-location) :numeric-redisplay-time))
	  "Numeric Redisplay Mode  " :assoc `(("Continuous" . ,*little-time*)
					    ("Incremental" . ,*lots-of-time*)))
;    (list (locf (get (send self :property-list-location) :side-display?))
;	  "Side Labels?            " :assoc '(("Yes" . t) ("No" . nil)))
    (list (locf (get (send self :property-list-location) :numeric-display?))
	  "Numeric Display?        " :assoc '(("Yes" . t) ("No" . nil)))
    (list (locf (get (send self :property-list-location) :full-color-segments))
	  "Number of Color Segments" :choose '(20. 40. 60. 100.))
    (list (locf (get (send self :property-list-location) :full-color?))
	  "Color Mode" :assoc '(("Use Standard Palette" . T)
				 (" Use best" . :ASK)
				 (" Use color map")
				 ))))

;;; each color-editor has a property list which tells which color spaces are active
;;; (have sliders). This enables the user to change those properties.
(defmethod (:configuration-list color-editor-mixin) ()
  (loop for component in (send value-object :list-color-spaces)
	collect (list (locf (get (send self :property-list-location) component))
		      (substring (string-append (string component) "            ")
				 0 11.) :assoc '(("Yes" . t) ("No" . nil)))))

;;; To change what color space we are editting in.
(defmethod (:new-configuration color-editor-mixin) (&optional initial?)
  (cond ((not initial?)
	 (tv:choose-variable-values (send self ':configuration-list) :label "Choose Models")
	 (send self ':clear-window)
	 (send self ':sift-panes)
	 (if (not full-color?)
	     (send self :divy-up-color-map))))
  ;; change characteristics of panes to match reconfiguration. mark all
  ;; slider panes as inactive.
  ;; the panes to be included in this reconfiguration are marked with active? as t
  ;; set configuration to include only those panes which are active
  (send self :change-constraints)
  (send self ':redefine-configuration 'main (cdar tv:constraints) nil)
  (send self ':set-configuration 'main)
  )

(defmethod (:init color-editor-mixin :before) (plist)
  (setq saved-color-map (send (send self :screen) :make-color-map-image))
  (send self :putprop (get plist :side-display?) :side-display?)
  (send self :putprop (get plist :numeric-redisplay-time) :numeric-redisplay-time)
  (send self :putprop (get plist :full-color-segments) :full-color-segments)
  (send self :putprop (get plist :numeric-display?) :numeric-display?)
  (send self :putprop (get plist :display-size) :display-size)
  (setq value-object (make-instance (or (get plist :initial-value-object-flavor)
					'color:standard-color)))
  ;; tv:panes should never change unless we run out of panes
  (setq tv:panes
	`((display display-pane :active? ,(get plist :use-display-pane?)
		   :full-color? ,full-color?)
	  (menu tv:command-menu-pane :item-list
		(("Done" :value done :documentation
		  "Finish Editing This Color.")
		 ("Model" :value configuration :documentation
		  "Change The Active Color Space.")
		 ("Config" :value parameters :documentation
		  "Change Parameters Of Color Editor.")
		 ("Abort" :value abort :documentation
		  "Abort Editing This Color.")))
	  (pane0 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane1 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane2 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane3 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane4 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane5 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane6 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane7 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  (pane8 color-slider-window :full-color? ,full-color? :flavor ,(typep value-object))
	  ))
  ;; configuration is nil to start off with
  (setq tv:constraints nil)
  ;; no color space is used to start off with
  (dolist (color-space (send value-object :list-color-spaces))
    (send self :putprop nil color-space))
  ;; except if one is specified
  (send self :putprop t (get plist :initial-color-space))
)

(defmethod (:change-of-size-or-margins color-editor-mixin :after) (&rest ignore)
  (multiple-value-bind (w h)
      (send self :inside-size)
    w
    (setq max-number-of-sliders (* (// (fix (// (// (* h .6) 4) 3)) 3) 3))))

;;; All panes have been created and are living in tv:internal-panes
(defmethod (:init color-editor-mixin :after) (plist)
  ;; decide which panes are to be active (based on property list)

  (send self :putprop full-color? :full-color?)

  (multiple-value-bind (w h)
      (send self :inside-size)
    w
    (setq max-number-of-sliders (* (// (fix (// (// (* h .6) 4) 5)) 3) 3)))
  (send self :sift-panes)
  (send self :new-configuration (get plist :initial-color-space))
  )


(defflavor color-editor ()
	   (color-editor-mixin
	    virtual-color-map-mixin
	    tv:temporary-window-mixin  ;;[ddyer] this needs to be here.  Otherwise, exposing
	    			       ;;a color editor destroys whatever was on your screen!
	    color-map-allocation-mixin
	    si:property-list-mixin
	    tv:bordered-constraint-frame-with-shared-io-buffer)
  )

(defun make-color-editor-window ()
  (let ((scr (find-color-screen :create-p t)))
    (if scr
	(tv:make-window 'color-editor :superior scr)
	)))

(defmethod (:deexpose color-editor-mixin :after) (&rest foo)
  (if (not foo)
      (send (send self :get-pane 'display) :force-kbd-input (list :abort))))

(defmethod (:edit color-editor-mixin) (label color-object)
  label
  (send (send self :get-pane 'pane1) :clear-input)
  ;;; save old color map
  (cond (color-object
	 (setq value-object (color:duplicate-color color-object :rgb))
	 (loop for p in (send self :list-of-panes)
	       do
	       (send p :send-if-handles :set-boundaries (typep color-object))))
	(t
	 (setq value-object (make-instance 'color:standard-color))
	 (send value-object :set-rgb .5 .5 1.0)))
  (progn
   (when (not tv:exposed-p)
      (when (not full-color?)
	(send self :divy-up-color-map))
      (send self ':expose)
      (dolist (child tv:inferiors)
	;;; for color-bars, bounding colors' flavor is specified
	(send child :send-if-handles :set-boundaries (typep value-object))
	(if (send child :send-if-handles :active?) 
	    (send child :send-if-handles
		  :update-value-from-object value-object self *lots-of-time* t))
	)
      (if (not full-color?)
	    (send self :update-screen tv:screen)))
    
    (do ()
	(())
      (let ((char (send (send self ':get-pane 'pane1) ':any-tyi)))
	(cond ((and (listp char)
		    (selectq (first char)
		      (:abort 
		       (return nil))
		      (:display-buttons
		       (tv:mouse-call-system-menu))
		      (:slider-buttons
		       (send (second char) ':track-mouse))
		      (:menu
		       (selectq (send (fourth char) ':execute (second char))
			 (configuration
			  (send self ':new-configuration)
			  (dolist (child tv:inferiors)
			    (if (send child :send-if-handles :active?) 
				(send child :send-if-handles :update-value-from-object
				      value-object self *lots-of-time*)))
			  (if (not full-color?)
			      (send self :update-screen tv:screen)))
			 (parameters		
			  (send self :new-parameters))
			 (done
			  (if color-object
			      (multiple-value-bind (r g b)
				  (send value-object :rgb)
				(send color-object :set-rgb r g b)
				(return color-object))
			    (return value-object)))
			 (abort
			  (return nil))
			 (otherwise (tv:mouse-call-system-menu))
			 ))))))))))

(compile-flavor-methods color-editor color-slider-window slider-window display-pane)

(defun edit-color (&optional color-object window &aux ans)
  (let ((window (or window
		    (tv:find-window-of-flavor 'color-editor)
		    (make-color-editor-window))))
    (if window
	(progn
	  (copy-array-contents (send (send window :screen) :color-map-image)
			       (send window :saved-color-map))
	  (unwind-protect
	      (let ((scr (send window ':screen)))
		(send window :set-active-editor? t)
		(send window :set-priority -1)
		(with-mouse-sheet (scr)
		  (color-palette:with-screen-pan-zoom-restored (scr)
		    (color-palette:with-mouse-position-restored 
		      (tv:window-call (window :deexpose)
			(send scr :send-if-handles :make-window-visible window)
			(setq ans (send window ':edit nil color-object))))))
		(send window :set-active-editor? nil))
	    (when (not (send window :full-color?))
	      (send (send window :screen) :new-color-map (send window :saved-color-map)))))
	(setq ans (bw-choose-color color-object)))
    ans))

(defun color-editor (&optional color-object window)
  (edit-color color-object window))

;;
;; Add a command to run the color editor
;;
(define-cp-command (tv:edit-color :command-table :global :values t) () (edit-color))

