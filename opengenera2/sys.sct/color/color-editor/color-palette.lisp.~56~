;;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: (color-palette); -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;; 
;;; Paint's entrypoint COLOR-PALETTE:CHOOSE-COLOR has not changed, and a new external calling
;;; point has been added for invoking this utility from another system.  The new function is
;;; COLOR-PALETTE:POP-UP-COLOR-PALETTE.  The new function takes care of finding or creating a
;;; color screen, warping the mouse to the color screen, optionally forcing a specified zoom
;;; setting, turning on "keep mouse visible" mode, calling CHOOSE-COLOR, then restoring all
;;; previous state such as putting the mouse back to the screen and location where it was
;;; before the call.


(defflavorD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") paint-color0 ((color-name nil) (menu-items-per-line 0))
	   (si:property-list-mixin color:standard-color)
  (:settable-instance-variables))

(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; Interpolate colors in a mixture or rgb and ihs so that you don't get intensity
;; drops.  In round brushes this is manifested as a dark ring around the brush.
0(defun 1ringless-interp0 (color1 color2 output ratio)
  (when (not output) (setq output (make-rgb-color)))
  (let ((i1 (send color1 :intensity))
	(i2 (send color2 :intensity)))
    (color:interpolate-colors color1 color2 :rgb output ratio)
    (send output :set-intensity (+ i1 (* ratio (- i2 i1))))
    output))

(defun 1make-rgb-color0 (&optional (r 1.0) (g 1.0) (b 1.0) name (menu-items-per-line 5))
  (let ((color (send (make-instance 'paint-color) :set-rgb (float r) (float g) (float b))))
    (if name (send color :set-color-name name))
    (if menu-items-per-line (send color :set-menu-items-per-line menu-items-per-line))
    color))

(defmethod  1(:color-p paint-color)0  ()  t)


;------------------------------------------------------------------------------
;;; 24 bit RGB pixel packing/unpacking

(defconstant  124-bit-pixel-red-byte-discriptor   0(byte 8 0))
(defconstant1  24-bit-pixel-green-byte-discriptor0 (byte 8 8))
(defconstant  124-bit-pixel-blue-byte-discriptor0  (byte 8 16))
(defconstant  132-bit-pixel-alpha-byte-discriptor0  (byte 8 24))

(defmacro 124-bit-pixel-red-value0 (pixel)
  `(ldb  24-bit-pixel-red-byte-discriptor   ,pixel))

(defmacro 124-bit-pixel-green-value0 (pixel)
  `(ldb  24-bit-pixel-green-byte-discriptor ,pixel))

(defmacro 124-bit-pixel-blue-value0 (pixel)
  `(ldb  24-bit-pixel-blue-byte-discriptor  ,pixel))

(defmacro 321-bit-pixel-alpha-value0 (pixel)
  `(%logldb  321-bit-pixel-alpha-byte-discriptor0  ,pixel))

(defmethod 1 (:alu-for-screen paint-color)0  (screen)
  (selectq (send screen :bits-per-pixel)
    (1  (if (> 0.866				; corresponds to 50% gray
	       (send self :intensity))
	    tv:alu-andca tv:alu-ior))
    (8  (send screen :compute-color-alu tv:alu-seta self))
    (32 (color:sc-fill-alu (color:hardware-rgb screen self) -1))))

(defmethod  1(:32b-pixel-value paint-color)0  ()
  (multiple-value-bind (r g b)
      (send self :rgb)
    (gt:combine-rgb (round (* 255 r)) (round (* 255 g)) (round (* 255 b)))))

;------------------------------------------------------------------------------

2;; support for fasd dump format
0(defmethod 1(:fasd-form paint-color)0 ()
  `(make-instance ',(typep self) ,@(send self ':create-init-plist)))

(defmethod 1(:create-init-plist paint-color)0 ()
  `(:red ,color:red :green ,color:green :blue ,color:blue))

;; suport for image dump format
(defmethod 1(:image-dump-form paint-color)0 ()
  `(:red ,color:red :green ,color:green :blue ,color:blue))

;------------------------------------------------------------------------------
(defconst1  *colors*0  nil)

(defmacro  1defcolor0  (name  val)
  `(progn 'compile
	  (defconst ,name ,val)
	  (unless (memq ,name *colors*)
	    (push ,name *colors*))))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(defun make-gray (level &rest ignore) (make-rgb-color level level level))

(defcolor *black*        (make-gray 0.00    "Black"))
(defcolor *5%-gray*      (make-gray 0.05  "5% gray"))
(defcolor *10%-gray*     (make-gray 0.10 "10% gray"))
(defcolor *15%-gray*     (make-gray 0.15 "15% gray"))
(defcolor *20%-gray*     (make-gray 0.20 "20% gray"))
(defcolor *25%-gray*     (make-gray 0.25 "25% gray"))
(defcolor *30%-gray*     (make-gray 0.30 "30% gray"))
(defcolor *35%-gray*     (make-gray 0.35 "35% gray"))
(defcolor *40%-gray*     (make-gray 0.40 "40% gray"))
(defcolor *45%-gray*     (make-gray 0.45 "45% gray"))
(defcolor *50%-gray*     (make-gray 0.50 "50% gray"))
(defcolor *55%-gray*     (make-gray 0.55 "55% gray"))
(defcolor *60%-gray*     (make-gray 0.60 "60% gray"))
(defcolor *65%-gray*     (make-gray 0.65 "65% gray"))
(defcolor *70%-gray*     (make-gray 0.70 "70% gray"))
(defcolor *75%-gray*     (make-gray 0.75 "75% gray"))
(defcolor *80%-gray*     (make-gray 0.80 "80% gray"))
(defcolor *85%-gray*     (make-gray 0.85 "85% gray"))
(defcolor *90%-gray*     (make-gray 0.90 "90% gray"))
(defcolor *95%-gray*     (make-gray 0.95 "95% gray"))
(defcolor *white*        (make-gray 1.00    "White"))

(defcolor *red*          (make-rgb-color 1  0  0  "Red"))
(defcolor *red-yellow*   (make-rgb-color 1  .5 0  "Red-Yellow"   ))
(defcolor *yellow*       (make-rgb-color 1  1  0  "Yellow"       ))
(defcolor *yellow-green* (make-rgb-color .5 1  0  "Yellow-Green" ))
(defcolor *green*        (make-rgb-color 0  1  0  "Green"        ))
(defcolor *green-cyan*   (make-rgb-color 0  1  .5 "Green-Cyan"   ))
(defcolor *cyan*         (make-rgb-color 0  1  1  "Cyan"         ))
(defcolor *cyan-blue*    (make-rgb-color 0  .5 1  "Cyan-Blue"    ))
(defcolor *blue*         (make-rgb-color 0  0  1  "Blue"         ))
(defcolor *blue-magenta* (make-rgb-color .5 0  1  "Blue-Magenta" ))
(defcolor *magenta*      (make-rgb-color 1  0  1  "Magenta"      ))
(defcolor *magenta-red*  (make-rgb-color 1  0  .5 "Magenta-Red"  ))

(defcolor *dark-blue*    (make-rgb-color 0  0  .5 "Dark Blue"    ))

(defcolor *process-red*     (make-rgb-color 1  0  0 "Red"     ))
(defcolor *process-yellow*  (make-rgb-color 1  1  0 "Yellow"  ))
(defcolor *process-green*   (make-rgb-color 0  1  0 "Green"   ))
(defcolor *process-cyan*    (make-rgb-color 0  1  1 "Cyan"    ))
(defcolor *process-blue*    (make-rgb-color 0  0  1 "Blue"    ))
(defcolor *process-magenta* (make-rgb-color 1  0  1 "Magenta" ))


(defconst 1*last-palette-operation*0 :delete-palette-row)

(defun 1menu-dark-color0 (color)
  (color:interpolate-colors color *black* :rgb nil .4))

(defun 1menu-desat-color0 (color)
  (color:interpolate-colors color *90%-gray* :rgb nil .6))

(defconst1 *basic-grays-for-menu*0		
  (list *black* *10%-gray* *20%-gray* *30%-gray* *40%-gray* *50%-gray*
	*60%-gray* *70%-gray* *80%-gray* *90%-gray* *white*))

(defconst 1*basic-process-colors-for-menu*
0   (list *process-red* *process-yellow* *process-green*
	 *process-cyan* *process-blue* *process-magenta*))

(defconst 1*basic-bright-saturated-hues-for-menu*
0   (list *red* *red-yellow* *yellow* *yellow-green* *green* *green-cyan*
	 *cyan* *cyan-blue* *blue* *blue-magenta* *magenta* *magenta-red*))

(defconst 1*new-basic-grays-for-menu0*
  (list *black* *5%-gray* *10%-gray* *20%-gray* *30%-gray* *40%-gray* *50%-gray*
	*60%-gray* *70%-gray* *80%-gray* *90%-gray* *white*))

(defconst 1*basic-dark-saturated-hues-for-menu*
0	  (mapcar #'menu-dark-color *basic-bright-saturated-hues-for-menu*))

(defconst 1*basic-bright-desaturated-hues-for-menu*
0	  (mapcar #'menu-desat-color *basic-bright-saturated-hues-for-menu*))

(defconst 1*basic-dark-desaturated-hues-for-menu*
0	  (mapcar #'menu-dark-color *basic-bright-desaturated-hues-for-menu*))

(defconst 1*new-basic-color-set-for-menu*
0	  (append *new-basic-grays-for-menu*
		  *basic-bright-saturated-hues-for-menu*
		  *basic-dark-saturated-hues-for-menu*
		  *basic-bright-desaturated-hues-for-menu*))

(defconst 1*initial-color-set0*
	  (list *new-basic-grays-for-menu*
		*basic-bright-saturated-hues-for-menu*
		*basic-dark-saturated-hues-for-menu*
		*basic-bright-desaturated-hues-for-menu*))

(defconst 1*basic-color-set-for-menu*
0	  (append *basic-grays-for-menu*
		  *basic-process-colors-for-menu*
		  *basic-bright-saturated-hues-for-menu*
		  *basic-dark-saturated-hues-for-menu*
		  *basic-dark-desaturated-hues-for-menu*
		  *basic-bright-desaturated-hues-for-menu*))



1;------------------------------------------------------------------------------

(compile-flavor-methods  paint-color)


0(defmacro1 with-mouse-position-restored0 (&body body)
  `(let* ((.x. tv:mouse-last-x)
	  (.y. tv:mouse-last-y)
	  (.val.))
     (unwind-protect (setq .val. (progn ,@body))
		     (tv:mouse-warp .x. .y.)
		     .val.)))

(defmacro 1with-screen-pan-zoom-restored0 ((screen) &body body &environment env)
  (once-only (screen &environment env)
    `(multiple-value-bind (.xp. .yp. .xz. .yz.) (send ,screen :send-if-handles :pan-and-zoom)
       (unwind-protect (progn ,@body)
	 (send ,screen :send-if-handles :set-pan-and-zoom .xp. .yp. .xz. .yz.)))))

'(defmacro 1with-temporary-screen-zoom0 ((screen zoom) &body body &environment env)
   (once-only (screen zoom &environment env)
     `(if (null ,zoom)
	  (progn ,@body)
	  (multiple-value-bind (.xz. .yz.) (send ,screen :send-if-handles :zoom)
	    (unwind-protect (progn (send ,screen :send-if-handles :set-zoom ,zoom ,zoom)
				   ,@body)
	      (send ,screen :send-if-handles :set-zoom .xz. .yz.))))))

(defmacro 1with-temporary-screen-keep-mouse-visible-p
0	  ((screen kmv-p) &body body &environment env)
  (once-only (screen kmv-p &environment env)
    `(let ((.kmv-p. (send ,screen :send-if-handles :keep-mouse-visible-p)))
       (unwind-protect (progn (send ,screen :send-if-handles :set-keep-mouse-visible-p ,kmv-p)
			      ,@body)
	 (send ,screen :send-if-handles :set-keep-mouse-visible-p .kmv-p.)))))


;;; -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

(defconst 1*force-zoom-default*0 2)

(defun 1pop-up-color-palette0 (&key initial-color (copy-initial-color nil)
			     short-life? screen (force-zoom
						  *force-zoom-default*)
			     (choose-with-sliders? nil)
			     (illegal-color-warning gt:*illegal-color-warning*))
  (let ((screen (color:find-color-screen :create-p t :which :default :default screen
					 :error-p nil))
	(initial-color-duplicate (when initial-color (color:duplicate-color initial-color :rgb)))
	val)
    (setq screen (or screen tv:main-screen))
    (cond (choose-with-sliders?
	   (when copy-initial-color
	     (setq initial-color (color:duplicate-color initial-color :rgb)))
	   (setq val (1color:bw-choose-color0 initial-color))
	   (if (null val)
2	       ;; if aborted, don't change initial-color, then return nil.
0	       (progn
		 (when initial-color
		   (color:duplicate-color initial-color-duplicate :rgb initial-color))
		 nil)
	       (or initial-color val)))
	  (t
	   (with-mouse-position-restored
	     (gt:with-temporary-mouse-sheet (screen)
	       (with-screen-pan-zoom-restored (screen)
		 (when force-zoom
		   (send screen :send-if-handles :set-zoom force-zoom force-zoom))
		 (when copy-initial-color
		   (setq initial-color (color:duplicate-color initial-color :rgb)))
		 (with-temporary-screen-keep-mouse-visible-p (screen t)
		   (setq val (choose-color initial-color short-life?
					   screen illegal-color-warning
					   t
					   ))))))
	   (if (null val)
2	       ;; if aborted, don't change initial-color, then return nil.
0	       (progn
		 (when initial-color
		   (color:duplicate-color initial-color-duplicate :rgb initial-color))
		 nil)
	       (or initial-color val))))))

;;
;; Add a command to run the color palette
;;
(define-cp-command (com-select-color :command-table :global :values t) ()
   (pop-up-color-palette))

(defvar 1*initial-palette0* (gt:copy-spec *initial-color-set*))
(defvar 1*default-palette-name*0 nil)
(defvar 1*current-palette*
0	  (make-instance 'gt:row-database :database-list *initial-palette*
			 :row-length 12. :database-type :current-palette
			 :database-name "Initial-Palette"))

;; dummy out for now until new paint version is installed here.
(comment defvar 1*current-palette-layout*
0	(make-instance 'gt:library-layout :row-length 12 :page-size 4))

(defvar 1*all-palettes*
0	  (make-instance 'gt:list-database :database-type :all-palettes
			 :database-name "Palette-Database"
			 :database-list (list *current-palette*)))

(defflavor 1palette-menu-flavor
0	(palette
	 (short-life? t)
	 (current-color (color:make-standard-color :rgb '(1.0 0 0))))
	(gt:pop-up-menu-flavor)
  (:settable-instance-variables))

(defmethod1 (:update-color palette-menu-flavor)0 (co)
  (if co
      (send current-color :set-rgb (send co :red) (send co :green) (send co :blue)))
  (let ((item (send self :get-item 'selected-color-patch)))
    (when item (send item :draw-item))))

;;;---------------------------------------------------------------------------------------
;; dummy out for now until new paint version is installed here.
(comment tv:defwindow-resource1 pop-up-palette-window0 ()
	:make-window (palette-menu-flavor :width 200. :height 95. :label nil :blinker-p nil)
	:reusable-when :deexposed)

(defvar 1*re-init*0 nil)
(defvar 1*palette-window*0)
(defmethod 1(:re-init palette-menu-flavor)0 ()
  (setq *palette-window* self)
  (when *re-init*
    (send self :initialize-items)
    (send self :init-top-level-items)))

(defmethod 1(:init palette-menu-flavor :after)0 (&rest ignore)
  (send self :initialize-items)
  (send self :init-top-level-items)
  )

(defmethod 1(:main-loop palette-menu-flavor)0 (initial-color)	
  (send self :clear-input)
  (let* ((normal-exit-p
	   (catch 'done
	     (loop do
	       (*catch :abort-it
		 (let ((char (send self ':any-tyi)))
		   (cond ((not (listp char))
			  (tv:beep))
			 ((eq (first char) :cancel)
			  (throw 'done :cancel))
			 ((not (eq (first char) ':graphics-toolkit-mouse-item))
			  (comment ferror "The list ~S was received as a mouse blip" char))
			 (t  
			  (send (second char) (eval (send (second char) :select-method))
				(fifth char) (third char) (fourth char))
2			  ;; get rid of all input.  check for cancel.
			  ;; need cancel check because if you call color editor and then
			  ;; select background to deexpose both of them, you don't want
			  ;; to clear-input away the :cancel blip and be left hanging.
0			  (loop until (not char)
				do
			    (setq char (send self :any-tyi-no-hang))
			    (when (eq (first char) :cancel)
			      (throw 'done :cancel)))
			  ))))))))
    (if (eq normal-exit-p :cancel)
	nil
	(if normal-exit-p 
	    (if initial-color
		(send initial-color :set-rgb
		      (send current-color :red)
		      (send current-color :green)
		      (send current-color :blue))
		(color:make-standard-color
		  :rgb (send current-color :red)
		  (send current-color :green)
		  (send current-color :blue)))
	    initial-color))))

(defun1 top-level0 (window)
  (send window ':main-loop))

(defmethod 1(:init-top-level-items palette-menu-flavor)0 ()
  (send self :set-item-list
	(append (send self :get-items
		      '(palette-start palette-forward palette-backward palette-menu
				      palette-page-box selected-color-patch exit-box edit-box
				      file-box abort-box))
		(send self :palette))))

(defun1 choose-color0 (&optional initial-color short-life?
		     (color-screen (color:find-color-screen :create-p t
							    :which :default :error-p nil))
		     (illegal-color-warning gt:*illegal-color-warning*)
		     pan-and-zoom-to-be-visible)

  (if (and color-screen (> (send color-screen :useful-bits-per-pixel) 1))
      (let (result
	    (gt:*illegal-color-warning* illegal-color-warning))
	(using-resource (window pop-up-palette-window color-screen)
	  (send window :re-init)
	  (when pan-and-zoom-to-be-visible
	    (send color-screen :send-if-handles :make-window-visible window))
	  (when initial-color
	    (multiple-value-bind (r g b) (send initial-color :rgb)
	      (send (send window :current-color) :set-rgb r g b)))

	  (unwind-protect
	      (progn (send window :set-short-life? short-life?)
		     (send window :expose-near '(:mouse))
		     (setq result (send window :main-loop initial-color)))
	    (send window :deactivate)
	    result)))
      (gt:pop-up-menu-choose '1pop-up-b&w-select-color-window0 tv:mouse-sheet initial-color)))

(defmethod 1(:deexpose palette-menu-flavor :after)0 (&rest ignore)
  (send self :force-kbd-input '(:cancel)))

;;;--------------------------------------------------------------------------------
(defflavor1 palette-color-box-item0 () (gt:base-menu-item)
  (:default-init-plist :borders nil))

(defmethod 1(:palette-color-box-draw palette-color-box-item)0 ()
  (multiple-value-bind (xoff yoff)
      (send self :offsets)
    (cond (gt:value
	   (send gt:menu-window :window-alu gt:value gt:alu)
	   (send gt:menu-window :draw-rectangle gt:width gt:height (+ xoff gt:item-left)
		 (+ yoff gt:item-top) gt:alu)
	   (when (and (not (gt:legal-color? gt:value gt:*illegal-color-warning*))
		      (> Gt:height 12) (> gt:width 150))
	     (send self :draw-centered-string (format nil "  ----~a Illegal --" gt:*illegal-color-warning*)
		   gt:cptfontcc tv:alu-xor)))
	  (t
	   (send self :draw-with-alu tv:alu-andca)
	   (send gt:menu-window :draw-rectangle 2 2 (+ xoff gt:item-left (// gt:width 2))
		 (+ yoff gt:item-top (// gt:height 2))
		 (send gt:menu-window :window-alu *white* gt:alu)))))
  (send self :draw-border))

2;; Current row in the palette to fill with on mouse-shift-l
0(defconst1 *current-colors*0 0)

(defmethod1 (:palette-color-box-select palette-color-box-item)
0	   (mouse-buttons &rest ignore)
  (let* ((real-layout  (eval gt:library-layout))
	 (row-length (send real-layout :row-length))
	 (page-size (send real-layout :page-size))
	 (row (// gt:index row-length))
	 (position (mod gt:index row-length))
	 (translated-row (send real-layout :translated-row row))
	 (row-colors (send *current-palette* :get-nth-row translated-row))
	 (color (nth position row-colors)))
    (when (null row-colors)
      (send *current-palette* :change-object-at-n
	    (loop repeat row-length collect nil)
	    translated-row)
      (setq row-colors (send *current-palette* :get-nth-row translated-row)))
    (cond ((eql mouse-buttons 1#\mouse-r0)
	   (gt:change-nth-in-list nil position row-colors))
	  ((eql mouse-buttons 1#\sh-mouse-m)
0	   (palette-operation *last-palette-operation* translated-row)
	   (expose-palette gt:menu-window row))
	  ((eql mouse-buttons 1#\mouse-l-20)
	   (setq *current-colors* (mod (+ *current-colors* 1) page-size))
	   (let ((nr (gt:copy-spec
		       (nth *current-colors* *initial-color-set*))))
	     (send *current-palette* :change-object-at-n nr translated-row))
	   (expose-palette gt:menu-window row))
	  ((eql mouse-buttons 1#\mouse-r-20)
	   (let ((op
		   (tv:menu-choose '(("Delete Row" :value :delete-palette-row
				      :font fonts:tvfont)
				     ("Reverse Row" :value :palette-row-reverse
				      :font fonts:tvfont)
				     ("Shift Row" :value :palette-row-shift
				      :font fonts:tvfont)
				     ("Desat Row" :value :desat-row
				      :font fonts:tvfont)
				     ("Saturate Row" :value :saturate-row
				      :font fonts:tvfont)
				     ("Lighten Row" :value :intensify-row
				      :font fonts:tvfont)
				     ("Darken Row" :value :de-intensify-row
				      :font fonts:tvfont)))))
	     (when op
	       (setq *last-palette-operation* op)
	       (palette-operation op translated-row)
	       (expose-palette gt:menu-window row)
	       (loop for i in (send (send gt:menu-window :get-item 'palette-color-items) :children)
		     do
		     (send i :set-documentation
			   (format nil "~A~A ~A"
	   "L: select color, M: interpolate row, R: Delete color   sh-L: Initial colors    sh-M: "   *last-palette-operation*   "   sh-R: Palette Menu")))
	       )))
	  ((eql mouse-buttons 1#\mouse-m0)
	   (send self :mix-palette))
	  (1color
0	   (send gt:menu-window :update-color color)
	   (when (send gt:menu-window :short-life?)
	     (send gt:menu-window :deexpose)
	     (throw 'done t)))
	  ;; fill empty slot
	  (1t
0	   (gt:change-nth-in-list 
	     (make-rgb-color (send (send gt:menu-window :current-color) :red)
				   (send (send gt:menu-window :current-color) :green)
				   (send (send gt:menu-window :current-color) :blue))
	     position row-colors))))
  (send self :expose-item))

(defmethod (1:mix-palette palette-color-box-item0) ()
  (let* ((real-layout  (eval gt:library-layout))
	 (row-length (send real-layout :row-length))
	 (row (// gt:index (send *current-palette* :row-length)))
	 (page-size (send real-layout :page-size))
	 (row-offset (send real-layout :row-offset))
	 (position (mod gt:index row-length))
	 (row-colors (send *current-palette* :get-nth-row
			   (+ row row-offset
			      (* page-size (send real-layout :current-page)))))
	 (color (nth position row-colors)))
    (cond ((null row-colors))
	  (color
	   ;; full row interpolate
	   (loop for i from 1 below row-length
		 with first = (nth 0 row-colors)
		 with last = (nth (1- row-length) row-colors)
		 do
	     (when (and first last)
	       (gt:change-nth-in-list (ringless-interp first last nil
						       (// i (- row-length 2.0)))
				   i row-colors))
	     ))
	  (t   ; partial row interpolate
	   (when (and ( position 0) ( position (1- row-length)))
	     (loop with top =
		     (loop for p from position downto 0
			   until (nth p row-colors)
			   finally (return (if (< p 0) 0 p)))
		   with bottom =
		     (loop for p from position to (1- row-length)
			   until (nth p row-colors)
			   finally (return (if (< p 0) 0 p)))
		   for i from top to bottom
		   with first = (nth top row-colors)
		   with last = (nth bottom row-colors)
		   do
	       (when (and first last)
		 (gt:change-nth-in-list
		   (ringless-interp first last nil
				    (abs (// (- top i) (float (- bottom top)))))
		   i row-colors))
	       ))))
    (expose-palette gt:menu-window  row)
    ))

;;;--------------------------------------------------------------------------------
(defflavor1 palette-menu-item0 () (gt:base-menu-item))

(defmethod1 (:command palette-menu-item)0 (&rest ignore)	
  (selectq gt:id
    (abort-box (throw 'done nil))
    (exit-box (throw 'done t))
    (edit-box (let ((nc (color:edit-color (send gt:menu-window :current-color))))
		(when nc (send gt:menu-window :update-color nc))))
    (file-box (save-palette gt:menu-window))
    (otherwise
     (let ((row nil) 
	   (translated-row)
	   (operation
	     (tv:menu-choose '(("Grays" . 0)
			       ("Colors" . 1)
			       ("Dark Colors" . 2)
			       ("Desat Colors" . 3)
			       ("Delete" . :delete)))))
       (cond ((eq operation :exit)
	      (send gt:menu-window :deexpose)
	      (throw 'done t))
	     ((eq operation :edit)
	      (let ((nc (color:edit-color (send gt:menu-window :current-color))))
		(when nc (send gt:menu-window :update-color nc))))
	     (operation (setq row
			      (tv:menu-choose '(("Row 1" . 0)
						("Row 2" . 1)  
						("Row 3" . 2)  
						("Row 4" . 3)) "Choose Row"))))
       (when row 
	 (setq translated-row (send *current-palette-layout* :translated-row row))
	 (if (eq operation :delete)
	     (palette-operation :delete-palette-row translated-row)
	     (palette-operation :fill translated-row operation))
	 (expose-palette gt:menu-window row)
	 (send gt:current-item :draw-item)
	 )))))
;;;------------------------------------------------------------------------------------
(defun1 redraw-palette0 (row window)
  (cond
2    ;; the color palette's way
0    ((send (send window :get-item 'palette-color-items) :children)
     (loop for i in (send (send window :get-item 'palette-color-items) :children)
	   do
	 (send i :expose-item)))
2    ;; paint's way.
0    (t
     (loop for i in (send (send window :get-item 'palette-color-items) :item-list)
	   for count from 0
	   do
       (when (or (not row) (= row count))
	 (send i :expose-item))))))

(defun 1expose-palette0 (window &optional row)
  (redraw-palette row window))


;;;------------------------------------------------------------------------------------------
(defvar foo)
(defwhopper  1(:mouse-buttons palette-menu-flavor)0  (bd x y)
  (let ((tv:MOUSE-DOUBLE-CLICK-TIME nil))
    (let ((buttons (tv:mouse-button-encode bd)))
      (send self ':mouse-click buttons x y))))
;; dummy out for now until new paint version is installed here.
(comment defmethod 1(:initialize-items palette-menu-flavor)0 (&optional (window self))
  (send self :set-palette
	(loop for i from 0 to 11
	      append
		(loop for j from 0 to 3
		      for index = (+ (* j 12) i)
		      collect
			(gt:create-menu-item
			  nil 'palette-color-box-item window :select-method 1:palette-color-box-select
0			  :database '*current-palette* :database-type :symbol :use-database? t :accessor nil
			  :drawing-method :palette-color-box-draw
			  :library-layout '*current-palette-layout* :documentation
			  "L: select color,  M: interpolate row,  R: Delete color   sh-L: Initial colors    sh-M:Delete Row   sh-R: Menu  "
			  :width 14 :height 14 :item-left (+ 15 (* i 15)) :item-top (* j 15) :index index))))

  (gt:create-menu-item 'palette-color-items 'gt:dummy-menu-item window :children (send self :palette))

  (gt:create-menu-item 'selected-color-patch 'palette-color-box-item self :item-left 15 :item-top 60
		       :width 180. :height 13. :select-method :ignore
		       :drawing-method :palette-color-box-draw
		       :mouse-sensitive nil :value current-color)
  (gt:create-group 'foo window '(:horizontal 0 0 2) 15 75 nil '(exit-box palette-menu edit-box file-box abort-box)
		   'palette-menu-item :boxed-string '(:item-list "Exit" "Rows" "Edit" "Libr" "Abort") :width 35. :height 13.
		   :select-method :command :drawing-method :command-draw :background-color gt:command-color
		   :documentation
		   '(:item-list " L:  Exit Palette                   M:, R:  Abort palette, revert to original color."
		     " Fill Rows with colors" " Use Color Editor" "Saving and Loading of Palettes" "Abort"))

  (gt:create-menu-item 'palette-page-box 'gt:paging-menu-item window
		       :item-left 0. :item-top 0. :width 15. :height 13.
		       :library-layout '*current-palette-layout*
		       :paging-action :display)
  (gt:create-group 'foo window '(:vertical 0 0 2) 0 15 nil '(palette-start palette-backward palette-forward )
    'gt:paging-menu-item :boxed-string '(:item-list "1" "-" "+")
    :width 12. :height 13. :select-method :page-choose 
    :library-layout '*current-palette-layout*
    :paging-action '(:item-list :start :decrement :increment)
    :documentation '(:item-list " Go to Page 1 of the palette" " Page Backward" " Page Forward")
    :dependents `(,(send self :get-item 'selected-color-patch)
		  ,(send self :get-item 'palette-page-box)
		  ,@(send self :palette)))
  )

(defun1 save-palette0 (window)
  (gt:general-saving-menus
    window :palette *current-palette* *all-palettes* "1Palette Operations0"
    '*current-palette* '*default-palette-name* #'redraw-palette))


(defun1 palette-operation0 (operation row &optional data)
  (let ((row-length (send *current-palette* :row-length)))
    (cond ((eq operation :palette-row-reverse)
	   (send *current-palette* :reverse-row row))
	  ((eq operation :palette-row-shift)	
	   (send *current-palette* :shift-row row 1))
	  ((eq operation :desat-row)
	   (send *current-palette* :alter-row :hexcone-saturation -.05 row))
	  ((eq operation :saturate-row)
	   (send *current-palette* :alter-row :hexcone-saturation .05 row))
	  ((eq operation :intensify-row)
	   (send *current-palette* :alter-row :hexcone-intensity .05 row))
	  ((eq operation :de-intensify-row)
	   (send *current-palette* :alter-row :hexcone-intensity -.05 row))
	  ((eq operation :delete-palette-row)
	   (send *current-palette* :change-object-at-n
		 (list nil nil nil nil nil nil nil nil nil nil nil nil)
		 row))
	  ((eq operation :mix)
	   (send *current-palette* :change-object-at-n
		 (loop for i from 0 to (1- row-length)
		       collect
			 (color:interpolate-colors
			   (first data) (second data) :rgb nil
			   (// i (float (1- row-length)))))
		 row))
	  ((eq operation :fill)
	   (let ((colors (gt:copy-spec (nth data *initial-color-set*))))
	     (send *current-palette* :change-object-at-n  colors row))))))


1;;---------------------------------------------------------------------------------
;;---------------------------------------------------------------------------------
0;(gt:pop-up-menu-choose '1pop-up-b&w-select-color-window0 tv:mouse-sheet)

(defflavor 1pop-up-b&w-select-color-window0 () (gt:pop-up-menu-flavor)
  (:default-init-plist :value (make-rgb-color)))

(defvar1 *jess* 0(si:backtranslate-font fonts:jess14))
(defmethod 1(:bw-color-slider-choose gt:base-menu-item)0 (&rest ignore)
  (send (send gt:menu-window :value) :set-component gt:accessor gt:value)
  (send (send gt:menu-window :get-item 'color-name) :set-value (send gt:menu-window :value))
  (send (send gt:menu-window :get-item 'color-name) :draw-item))

;; dummy out for now until new paint version is installed here.
(comment defmethod1 (:init pop-up-b&w-select-color-window :after)0 (&rest ignore)
  (gt:create-group 'rgb-group self '(:vertical 0 0 5) 5 10 nil  '(red green blue)
		 'gt:slider-menu-item :label '(:item-list "Red" "Green" "Blue")
		 :width 220 :height 20  :select-method '(:items :slider-choose :bw-color-slider-choose)
		 :label-width 50 :label-height 20 :font *jess* :label-font gt:cptfont
		 :accessor '(:item-list :red :green :blue)
		 :database :window-value :database-type :ask-window :borders
		 (gt:make-border :use-border? t :border-width 2))
  (gt:create-group 'ihs-group self '(:vertical 0 0 5) 5 10 nil '(int hue sat)
		   'gt:slider-menu-item :label '(:item-list "Int" "Hue" "Sat")
		   :width 220 :height 20 :select-method '(:items :slider-choose :bw-color-slider-choose)
		   :label-width 50 :label-height 20 :font *jess* :label-font gt:cptfont
		   :accessor '(:item-list :hexcone-intensity :hexcone-hue :hexcone-saturation)
		   :database :window-value :database-type :ask-window  :borders
		   (gt:make-border :use-border? t :border-width 2))
  (gt:create-menu-item 'color-name 'gt:text-menu-item self :item-left 5 :item-top 80
		       :width 295 :height 15 :drawing-method :text-draw
		       :database :window-value :database-type :ask-window  :Mouse-sensitive nil
		       :font gt:cptfonti :select-method :ignore :documentation "")
  (gt:create-group 'exit-abort-group self '(:vertical 0 0 3) 10 100 nil '(exit abort) 'gt:command-menu-item 
		   :boxed-string  '(:item-list "Exit" "Abort") :width  60. :height 15.
		   :select-method '(:item-list :exit-value :abort-choose) :font gt:cptfontb
		   :documentation '(:item-list "Exit with this color" "Abort from choosing color"))
  (gt:create-group 'color-space-group self  '(:vertical 0 0 3) 100 100 nil '(rgb ihs) 'gt:selectable-menu-item
		   :boxed-string '(:item-list "RGB" "IHS") :width 60. :height 15.    :font gt:cptfontb
		   :borders (gt:make-border :use-border? t :border-width 1)
		   :documentation '(:item-list "Use RGB color space" "Use IHS color space"))
  (gt:declare-brothers self nil '(color-space-group))
  (gt:declare-children self 'rgb '(rgb-group))
  (gt:declare-children self 'ihs '(ihs-group))
  (gt:declare-brothers self nil '(ihs rgb))
  (send (send self :get-item 'rgb) :set-selected-p t)
  (setq gt:top-level-nodes
	(send self :get-items
	      '(exit exit-abort-group color-space-group color-name))))

(defun1 color:bw-choose-color0 (&optional color-object)
  (gt:pop-up-menu-choose 'color-palette:pop-up-b&w-select-color-window tv:mouse-sheet color-object))

;; dummy out for now until new paint version is installed here.
(comment tv:defwindow-resource 1pop-up-b&w-select-color-window0 ()
  :make-window
  (pop-up-b&w-select-color-window :width 300. :height 160. :blinker-p nil
			:borders 2 :label 1"       Select a Color"0)
  :reusable-when :deexposed)

1(compile-flavor-methods palette-menu-flavor palette-menu-item palette-color-box-item0 1pop-up-b&w-select-color-window)


