;;; -*- Base: 8; Lowercase: Yes; Mode: Lisp; Package: (color); -*-


;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defconst *lots-of-time* 5)
(defconst *little-time* 0)
(defconst *medium-time* 1)

(defmacro with-mouse-captured ((sheet) &body body)
  (let ((old-sheet (gensym)))
    `(let ((,old-sheet tv:mouse-sheet))
       (tv:with-mouse-grabbed
	 (unwind-protect
	   (progn
	     (tv:mouse-set-sheet ,sheet)
	     (send tv:mouse-blinker ':set-visibility nil)
	     . ,body)
	   (send tv:mouse-blinker ':set-visibility t)
	   (tv:mouse-set-sheet ,old-sheet))))))

;;; active? tells whether or not this slider in part of the frame's current configuration
(defflavor active-mixin ((active? nil)) ()
  (:settable-instance-variables))

;;; min-value is the minimum value of the variable.
;;; max-value is the maximum value of the variable.
;;; value is the current value.
(defflavor valuator-mixin (value min-value max-value)
	   ()
  (:settable-instance-variables value min-value max-value)
  (:initable-instance-variables))

(defflavor window-inner-rectangle-mixin
	(inner-left-pos inner-right-pos inner-top-pos inner-bottom-pos)
	())

;;; format-control is format control string for printing out the current value.
;;; label-string is the name to appear before the number.
;;; line-y is the y-coord of the line; line-dy is the half-length of the
;;; little vertical lines at the end.  line-x1 snd line-x2 are the x-coords
;;; of the ends of the line (and of the little vertical lines.)
;;; knob-height and knob-width are the size of the knob in pixels.
;;; knob-x is the x-position of the knob, or nil if no knob is being displayed.
;;; knob-bits is an image of the knob, to be blted onto the window.
;;; knob-save-bits is another array of the same size used to save what is
;;;   underneath the knob.
;;; LABEL-END-X is where the label ends and the number begins.
;;; *** is slider-value needed?, use value object in valuator-mixin ****

(defflavor basic-slider-window
	(format-control slider-redisplay-time slider-knob-height-ratio
			slider-knob-width-ratio font-top-spacing font-bottom-spacing
			slider-left-space line-y line-dy label-string
			label-end-x slider-knob-x slider-knob-height slider-knob-width
			numeric-redisplay-time (first-time? 0) (side-display? nil)
			slider-knob-bits slider-knob-save-bits numeric-display?)
	(active-mixin valuator-mixin tv:window tv:pane-mixin window-inner-rectangle-mixin)
  (:default-init-plist :format-control "~4,2f" :blinker-p nil :label nil 
   :numeric-display? nil
   :slider-left-space 0.01 :slider-knob-height-ratio 2.0 :slider-knob-width-ratio .004
   :max-value 1.0 :min-value 0.0 :value .5 :font-top-spacing 0.0 :font-bottom-spacing 0.0
   :slider-redisplay-time *little-time* :label-string "un-named"
   :numeric-redisplay-time *medium-time*)
  (:settable-instance-variables numeric-display? numeric-redisplay-time side-display?)
  (:initable-instance-variables)
  (:gettable-instance-variables))


(defmethod (:who-line-documentation-string basic-slider-window) ()
  "l: move slider here")

(defmethod (:mouse-wants-to-set-value basic-slider-window)
	   (x y button time-limit &aux new-val)
  y
  button
  (setq new-val					;change slider's value
	(+ (* (// (float (- x inner-left-pos))
		  (- inner-right-pos inner-left-pos))
	      (- max-value min-value))
	   min-value))
  (setq new-val (min (max new-val min-value) max-value))
  (send self :update-value new-val self time-limit))

(defmethod (:mouse-buttons basic-slider-window) (ignore ignore ignore)
  (send self ':force-kbd-input (list ':slider-buttons self)))

(defmethod (:track-mouse basic-slider-window) ()
  (with-mouse-captured (self)
    (loop with last-buttons = nil
	  for current-buttons = tv:mouse-last-buttons
	  until (zerop current-buttons)
	  finally (send self :mouse-wants-to-set-value tv:mouse-x tv:mouse-y
			current-buttons *lots-of-time*)	;time to redisp
	  do
	  ;; *little-time* is the time-limit to redisplay inside the loop
	  (if (eq last-buttons current-buttons)
	      (send self :mouse-wants-to-set-value
		    tv:mouse-x tv:mouse-y current-buttons *little-time*))
	  (setq last-buttons current-buttons)
	  (tv:mouse-wait sys:mouse-x sys:mouse-y last-buttons))))

(defmethod (:compute-slider-knob-x basic-slider-window) ()
  (setq slider-knob-x (+ inner-left-pos (fix (* (- inner-right-pos inner-left-pos)
						(// (- value min-value)
						    (- max-value min-value)))))))

(defmethod (:new-background basic-slider-window :after) ()
  (setq first-time? 0))

;;; pane gets this message when someone else has changed the state of the world.
;;; pane is responsible for changing itself if it can as constrained by time.
;;; if first-time is 0 then we don't want to undraw since it has never been drawn.  
(defmethod (:update-value basic-slider-window) (val ignore time-limit)
  ;; redisplay if there is time
  (cond ((<= slider-redisplay-time time-limit)
	 (cond ((zerop first-time?)
		(setq value val)
		(send self :draw-knob time-limit))
	       (t (send self :undraw-knob)
		  (setq value val)			;new slider value
		  (send self :draw-knob time-limit)))))
  (incf first-time?)
  (cond ((<= numeric-redisplay-time time-limit)			;redraw pane
	 (send self :draw-numeric-display time-limit))))

(defmethod (:init basic-slider-window :after) (&rest ignore)
  (check-arg format-control stringp "a string")
  (check-arg min-value numberp "a number")
  (check-arg max-value numberp "a number")
  (setq value (min max-value (max min-value value)))
  (send self ':slider-recompute))

(defmethod (:change-of-size-or-margins basic-slider-window :after) (&rest ignore)
  (send self ':slider-recompute))

(defmethod (:refresh basic-slider-window :after) (&optional type)
  type
  (when active?
;    (if (not (send (send self :superior) :full-color?))
;	(send self :draw-knob *lots-of-time* t))
    (send self :draw-numeric-display *lots-of-time* t)))


(defmethod (:draw-numeric-display basic-slider-window) (time &optional refresh?)
  ;; write the text at the top.
  (multiple-value-bind (ww hh)
      (send self :inside-size)
    ww
    (if (send self :side-display?)
	(send self :draw-rectangle 2 hh (- inner-left-pos 2) 0 tv:alu-seta))
    (when (and (<= slider-redisplay-time time) (or refresh? numeric-display?)
	       	     (< (font-raster-height tv:current-font)
			(- inner-bottom-pos inner-top-pos)))
      (cond (side-display?
	     (send self :set-cursorpos 0 0)
	     (send self :draw-rectangle (- inner-left-pos 2) hh 0 0 tv:alu-andca)
	     (send self :string-out label-string))
	    (t 
	     (send self ':set-cursorpos 0 font-bottom-spacing)
	     (send self ':clear-rest-of-line)
	     (send self ':string-out label-string)
	     (send self ':string-out ": ")
	     (setq label-end-x (send self ':read-cursorpos))
	     (if numeric-display?
		 (format self format-control value)))))))

(defmethod (:save-those-knob-bits basic-slider-window) ()
  (send self ':bitblt-from-sheet
	tv:alu-seta slider-knob-width slider-knob-height
	(max (- slider-knob-x (1+ (// slider-knob-width 2))) 0) (fix (- line-y line-dy))
	slider-knob-save-bits 0 0))

(defconst ce-xor-data (+ 128.))
(defconst ce-new-xor
	  (color:scf (+ ce-xor-data (ash ce-xor-data 8.) (ash ce-xor-data 16.)) -1))
(send ce-new-xor :set-alu tv:alu-xor)

(defmethod (:draw-knob basic-slider-window) (time-limit &optional refresh?)
  (when (or (<= slider-redisplay-time time-limit) refresh?)
    (send self :compute-slider-knob-x)
    (send self :save-those-knob-bits)
    ;;; assumes that area under knob is untainted
    (send self ':draw-rectangle
	  slider-knob-width slider-knob-height
	  (max (- slider-knob-x (1+ (// slider-knob-width 2))) 0) (fix (- line-y line-dy))
	  ce-new-xor)))

(defmethod (:undraw-knob basic-slider-window) ()
  (send self ':bitblt
	tv:alu-seta slider-knob-width slider-knob-height slider-knob-save-bits 0 0
	(max (- slider-knob-x (1+ (// slider-knob-width 2))) 0) (fix (- line-y line-dy))))



;; recompute slider instance variables from size of slider window
(defmethod (:slider-recompute basic-slider-window) ()
  (multiple-value-bind (inside-width inside-height)
      (send self ':inside-size)
    inside-height inside-width
    ;; top-part-height is essentially the vertical space we give to the label
    (let ((top-part-height (if side-display?
			       0
			       (sys:round (+ font-top-spacing
					     (font-raster-height tv:current-font)	
					     font-bottom-spacing)))))
      (setq line-y (// (+ inside-height top-part-height) 2)
	    line-dy (max (// (- inside-height top-part-height) 2) 0)
	    inner-top-pos (- line-y line-dy)
	    inner-bottom-pos (+ line-y line-dy)
	    inner-left-pos (if side-display?
			       (* 6 (sys:round (font-raster-width tv:current-font)))
			       (fix (* slider-left-space inside-width)))
	    inner-right-pos (if side-display? inside-width (- inside-width inner-left-pos))
	    slider-knob-height (max 1 (fix (* slider-knob-height-ratio line-dy)))
	    slider-knob-width (max 2 (fix (* slider-knob-width-ratio
					     (- inner-right-pos inner-left-pos)))))
      (send self :compute-slider-knob-x)
      (setq slider-knob-bits (tv:make-sheet-bit-array
			       self slider-knob-width slider-knob-height :initial-value 0)
	    slider-knob-save-bits (tv:make-sheet-bit-array
				    self slider-knob-width slider-knob-height
				    :initial-value 0))
      (tv:%draw-rectangle slider-knob-width slider-knob-height 0 0
			  tv:alu-ior slider-knob-bits)
      )))
