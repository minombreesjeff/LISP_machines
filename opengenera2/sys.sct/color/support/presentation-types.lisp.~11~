;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")dw::define-pop-up-menu-presentation-type

0;;; Defining presentation types with pop-up menus, removing (shadowing)
;;; the default mouse handlers from the middle and right clicks.  The
;;; :MENU-FORM argument is a form that, when evaluated, presents a
;;; pop-up menu from which the user selects a value.  If the value
;;; returned is NIL (the typical case when the user does not make a
;;; selection but moves the mouse off of the menu), the behavior is
;;; determined by the value of :ACTION-IF-NIL.  If it is :RETURN-NIL,
;;; the value of NIL is returned; if it is :SIGNAL-ABORT, then (signal
;;; 'sys:abort) is evaluated.  The :SIGNAL-ABORT option is useful in a
;;; DW:ACCEPTING-VALUES body to preserve the previous value when NIL is
;;; returned, e.g., when the mouse moves off the menu.  The syntax of
;;; the :PRINTER argument is the same as DW:DEFINE-PRESENTATION-TYPE:
;;; (<(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")arglist0> <2body0>).  The :DESCRIPTION argument is a string that is
;;; printed (in italics) when the value is NIL. If the
;;; :REMOVE-RIGHT-CLICK-MENU arguments is T (the default), the right
;;; click mouse handlers are removed (shadowed); if the value is NIL
;;; they are not removed.  Any other keyword arguments are passed on to
;;; DW:DEFINE-PRESENTATION-TYPE.

#|| Examples:

(dw::define-pop-up-menu-presentation-type size
  :menu-form (dw:menu-choose '("small" "medium" "large")))

(dw::define-pop-up-menu-presentation-type 3d-object
  :description "an S-Geometry object"
  :menu-form (3d:choose-object)
  :printer ((object stream)
	    (format stream "~A"
		    (if object
			(send object :name)
			"2an S-Geometry object0"))))

(defun test-pop-up-menu-presentation-type ()
  (dw:accepting-values (cl:*query-io*
			 :own-window t
			 :label "Choose items from a pop-up menu: ")
    (values
      (dw:accept 'size :prompt "Choose a size")
      (dw:accept '3d-object :prompt "Choose an object"))))
||#


(si:def-defining-form 1dw0::1define0-1pop-up-menu-presentation-type
0   :type-name "Pop-up menu presentation type"
   :killer dw::undefine-pop-up-menu-presentation-type
   :definer
   ((name &rest args)
    (declare 
      (arglist name &key description menu-form printer
	       (action-if-nil :signal-abort) (remove-right-click-menu t)
	       &rest additional-presentation-type-arguments)
      (zwei:indentation 1 1))
    (let* ((name-without-package (symbol-name name))
	   (package-of-name (symbol-package name))
	   (middle-click-command
	     (intern (string-append 'eliminate-middle-click-for- name-without-package)
		     package-of-name))
	   (right-click-command
	     (intern (string-append 'eliminate-right-click-for- name-without-package)
		     package-of-name))
	   (description (getf args :description))
	   (menu-form (getf args :menu-form))
	   (printer (getf args :printer))
	   (action-if-nil (getf args :action-if-nil :signal-abort))
	   (remove-right-click-menu (getf args :remove-right-click-menu t)))
      (unless (member action-if-nil '(:signal-abort :return-nil))
	(error "The possible values of :ACTION-IF-NIL are ~
              :SIGNAL-ABORT and :RETURN-NIL; ~S is not defined." action-if-nil))
      `(sys:multiple-definition
	 ,name define-pop-up-menu-presentation-type
	 (declare
	   (sys:function-parent ',name 'dw::define-pop-up-menu-presentation-type))
	 (dw:define-presentation-type ,name ()
	    :description ,description
	    :parser ((ignore)
		     (or ,menu-form
			 (select ,action-if-nil
			   (:signal-abort (signal 'sys:abort))
			   (:return-nil nil))))
	    :printer ,(or printer
			  `((object stream)
			    (format stream "~V~A~"
				    (unless object '(nil :italic nil))
				    (or object ,description))))
	    ,@(si:with-rem-keywords
		(ptype-args args '(:description :menu-form :printer :action-if-nil :remove-right-click-menu))
		(copy-list ptype-args)))
	 (dw::define-accept-values-command (,middle-click-command)
	     ((query 'dw::accept-values-query-display))
	    (ignore query))
	 (dw:define-presentation-to-command-translator ,middle-click-command
	    (dw::accept-values-value-display
	      :gesture :middle
	      :priority 1
	      :documentation ""
	      :tester
	      ((accept-values-value &rest ignore)
	       (dw:presentation-subtypep
		 (dw::accept-values-query-presentation-type
		   (dw::accept-values-value-query-identifier accept-values-value)) ',name)))
	    (accept-values-value)
	   (list ',middle-click-command
		 (dw::accept-values-value-query-identifier accept-values-value)))
	 ,@(if remove-right-click-menu
	       `((dw::define-accept-values-command (,right-click-command)
		     ((query 'dw::accept-values-query-display))
		    (ignore query))
		 (dw:define-presentation-to-command-translator ,right-click-command
		    (dw::accept-values-value-display
		      :gesture :right
		      :priority 1
		      :documentation ""
		      :tester
		      ((accept-values-value &rest ignore)
		       (dw:presentation-subtypep
			 (dw::accept-values-query-presentation-type
			   (dw::accept-values-value-query-identifier accept-values-value)) ',name)))
		    (accept-values-value)
		   (list ',right-click-command
			 (dw::accept-values-value-query-identifier accept-values-value)))))
	 ',name))))


(defun 1dw0::1undefine0-1pop0-1up0-1menu0-1presentation0-1type0 (type-name)
  (let ((name-without-package (symbol-name type-name))
	(package-of-name (symbol-package type-name)))
    (flet ((undefine-definitions (name)
	     (fundefine name)
	     (fundefine (intern (string-append name '- 'internal) (symbol-package name)))
	     (fundefine (intern (string-append name '- 'parser) (symbol-package name)))
	     (funcall
	       #'(:property scl:define-presentation-translator zwei:kill-definition) name)
	     nil))
      (undefine-definitions
	(intern (string-append 'eliminate-middle-click-for- name-without-package)
		package-of-name))
      (undefine-definitions
	(intern (string-append 'eliminate-right-click-for- name-without-package)
		package-of-name))
      (dw:delete-presentation-type type-name))))


