;;-*- Mode: LISP; Package: COLOR; Base: 8; Patch-File: Yes -*- 

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
#||

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1988, 1987, 1986, 1985, 1984, 1983, 1982, 1981, 1980 Symbolics, Inc.  All rights reserved.
;;;> ** Portions Copyright (c) 1980 by Massachusetts Institute of Technology.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary 
;;;> to, and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve 
;;;> them as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and 
;;;> stored only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3670 (R), Symbolics 3675 (R), Symbolics 3630,
;;;> Symbolics 3640, Symbolics 3645 (R), Symbolics 3650 (R), Symbolics 3620 (R), Symbolics 
;;;> 3610 (R), Symbolics Common Lisp (R), Symbolics-Lisp (R), Zetalisp (R), Genera (R),
;;;> Wheels, Dynamic Windows (R), Showcase, SmartStore (R), Semanticue (R), Frame-Up (R),
;;;> Firewall (R), MACSYMA (R), COMMON LISP MACSYMA, CL-MACSYMA (R), LISP MACHINE
;;;> MACSYMA (R), MACSYMA Newsletter (R), Document Examiner (R), S-DYNAMICS (R),
;;;> S-GEOMETRY (R), S-PAINT (R), S-RENDER (R), "Your Next Step in Computing" (R), Ivory,
;;;> MacIvory, Symbolics C, Symbolics Pascal, Symbolics Prolog, Symbolics Fortran, CLOE,
;;;> Joshua, Concordia, and Statice are trademarks of Symbolics, Inc.
;;;> 
;;;> RESTRICTED RIGHTS LEGEND
;;;>    Use, duplication, and disclosure by the Government are subject to restrictions 
;;;> as set forth in subdivision (c)(1)(ii) of the Rights in Trademark Data and Computer 
;;;> Software Clause at FAR 52.227-7013.
;;;> 
;;;>      Symbolics, Inc.
;;;>      11 Cambridge Center
;;;>      Cambridge, Massachusetts  02142
;;;>      United States of America
;;;>      617-621-7500
;;;> *****************************************************************************************
;;;>


   The software, data, and information contained herein 
are proprietary to, and comprise valuable trade secrets
of, Symbolics, Inc.  They are given in confidence by 
Symbolics pursuant to a written license agreement, and 
may be used, copied, transmitted, and stored only in 
accordance with the terms of such license.


Symbolics, Symbolics 3600, Symbolics 3670, Symbolics 3675, Symbolics
3640, Symbolics 3645, SYMBOLICS COMMON LISP, SYMBOLICS-LISP, ZETALISP,
MACSYMA, COMMON LISP MACSYMA, CL-MACSYMA, LISP MACHINE MACSYMA, MACSYMA
Newsletter, Document Examiner, S-DYNAMICS, S-GEOMETRY, S-PAINT,
S-RENDER, and, "Your Next Step in Computing" are trademarks of
Symbolics, Inc.

RESTRICTED RIGHTS LEGEND
   Use, duplication, and disclosure by the Government are
subject to restrictions as set forth in subdivision 
(b)(3)(ii) of the Rights in Technical Data and Computer 
Software Clause at FAR 52.227-7013.

     Symbolics, Inc.
     11 Cambridge Center
     Cambridge, Massachusetts  02142
     United States of America
     617-577-7500

||#

(defvar color-parts nil)
(defvar color-paddle-per-slot nil)
(defvar-resettable reboot-lock nil)

(defmacro define-color-part (name number desc &rest props)
  `(let ((desc '(:part-number ,number
		 :name ,name
		 :description ,desc
		 ,@(copylist props))))
     (when (fixp ',number)
       (putprop (locf color-parts)
		desc
		',number))
     (putprop (locf color-parts)
	      desc
	      ',name)
     (setq color-paddle-per-slot nil)))

(defun color-part-numbers ()
  (loop for i in color-parts by #'cddr
	when (fixp i)
	collect i))

(defun color-controller-types ()
  (loop for (i j) on color-parts by #'cddr
	when (and (symbolp i)
		  (cl:getf j :controller))
	  collect i))

(defun READ-COLOR-DEFAULTS (&key (file "fep:>color.cfg") (always-read t)(print-errors))
  (unless reboot-lock
    (fs:with-automatic-login-to-sys-host
      (let ((path (fs:parse-pathname file)))
	(when (and path (or always-read
			    (neq path (cl:getf color-paddle-per-slot :default-file))))
	  (cl:setf (cl:getf color-paddle-per-slot :default-file) path)
	  (cl:remf color-paddle-per-slot 'color-controllers)
	  (cl:setf (cl:getf color-paddle-per-slot :defaults)
		   (block read-text-file
		     (catch-error
		       (read-text-file path
				       :error nil
				       :if-does-not-exist nil
				       :eval-function
				       #'(lambda (a)
					   (return-from read-text-file a)))
		       print-errors)))
	  ))))
  (cl:getf color-paddle-per-slot :defaults))

(defun write-color-defaults (form &key (file "fep:>color.cfg") comment)
  (scl:with-standard-io-environment
    (let ((name (with-open-file (stream file :direction :output :characters t)
		  (format stream ";;; -*- Package: ~A; Base: ~A; Syntax: Common-Lisp; Mode: LISP -*-~%~%" package base)
		  (when comment (princ comment stream))
		  (grind-top-level
		    form
		    nil stream))))
      (putprop 'color-paddle-per-slot form :defaults)
      (putprop 'color-paddle-per-slot name :default-file)
      )))

(defun change-color-defaults (form in-form)
  (when (listp in-form)(setq in-form (copylist in-form)))
  (labels ((property-list-p (list)
	     (and (listp list)
		  (evenp (length list))
		  (loop for (i nil) on list by #'cddr always (keywordp i)))))
    (loop for (prop val) on form by #'cddr
	  do
      (if (neq val :nil)
	  (setf (cl:getf in-form prop)
		(let ((old-val (cl:getf in-form prop)))
		  (if (and (property-list-p val)
			   (property-list-p old-val))
		      (change-color-defaults val old-val)
		      val)))
	  (cl:remf in-form prop ))
	  finally (return in-form))))

(defun save-modified-color-defaults
       (new-form &key
	(comment)
	(file "fep:>color.cfg")
	(in-form (read-color-defaults :always-read nil :file file)))
  (write-color-defaults (change-color-defaults new-form in-form) :file file :comment comment)
  (read-color-defaults
    :file file
    :always-read t))

(defun possible-sync-programs (controller-type &optional paddle-card)
  (let ((types ))
    (labels ((sync-types (item)
	       (let* ((desc (cl:getf color-parts item))
		      (sync (cl:getf desc :sync-programs)))
		 (loop for i in (when (boundp sync) (symeval sync)) by #'cddr
		       unless (memq i types)
			 do (push i types)))))
      (sync-types controller-type)
      (if (listp paddle-card)
	  (loop for i in paddle-card do (sync-types i))
	  (sync-types paddle-card)))
    types))

(defun possible-video-calibrations (controller)
  (let* ((def (read-color-defaults :always-read nil))
	 (sp (cl:getf def :video-calibrations)))
    (loop for (n v) on (append sp (plist 'sync-calibrations)) by #'cddr
	when (and (listp v)
		  (not (member n names))
		  (eq (cl:getf v :controller) controller))
	  collect n into names
	  finally (return names))))

(defun get-video-calibration (name)
  (let* ((defaults (color:read-color-defaults :always-read nil))
	 (video (cl:getf defaults :video-calibrations)))
    (values
      (or (cl:getf video name )
	  (get 'video-calibrations name))
      video
      )))

(defun get-color-setup (name)
  (let* ((defaults (color:read-color-defaults :always-read nil))
	 (video (cl:getf defaults :setups)))
    (or (cl:getf video name )
	(get 'color-setups name))))
	  

(defun possible-pixel-depths (controller-spec)
  (declare (special *standard-color-controllers*))
  (destructuring-bind (controller nil mems paddle)
      controller-spec
    (let* ((cont-dest (cl:getf color-parts controller))
	   (pixdepth (cl:getf cont-dest :pixel-depths)))
      (cond ((memq :broadcast-paddle paddle) '(32.))
	    ((memq :frame-grabber-paddle paddle) '(24.))
	    ((memq controller *standard-color-controllers*)
	     (cl:ecase (length mems)
	       (1 '(8))
	       (2
		 D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");note it is important to include 16 bits per pixel
0		 1;in order to support 8+8 configurations
0		 '(16. 8))
	       (3 '(24. 8))
	       (4
		 1;note it is important to include 16 bits per pixel
0		 1;in order to support 8+8 configurations
0		 '(32. 16. 8.))))
	    (pixdepth pixdepth)
	    (t '(8.))))))


(defun remove-color-controller (type slot)
  (unless reboot-lock
    (let ((controllers (getf color-paddle-per-slot 'color-controllers)))
      (when (listp controllers)
	(setq controllers
	      (cl:remove-if
		#'(lambda (a)
		    (and (listp a)
			 (destructuring-bind (cont where) a
			   (if (listp where)
			       (and (eql (first where) type)
				    (eql (second where) slot))
			       (and (eql cont type)
				    (eql slot where))))))
		controllers))
	(setf (getf color-paddle-per-slot 'color-controllers)
	      controllers)))))


(defun define-color-controller-internal (type slot &optional memories &rest paddle)
  ;;
  ;; validate the junk he typed in
  ;;
  (let ((paddle (remove nil paddle)))
    (loop for cont in (cons type paddle)
	  as first-time = t then nil
	  as cont-desc = (getf color-parts cont)
	  unless (and cont-desc
		      (if first-time (getf cont-desc :controller) t))
	    do
	      (ferror "~A isn't a known color ~A" cont (if first-time "controller" "option"))
	      )
    (loop with controllers = (getf color-paddle-per-slot 'color-controllers)
	  with new = (list type slot (copylist memories) (copylist paddle))
	  for contp on controllers
	  as cont = (first contp)
	  when (equal (second cont) slot)
	    do (rplaca contp new)
	       (return nil)
	  finally
	    (putprop (locf color-paddle-per-slot)
		     (push new controllers)
		     'color-controllers)
	    ))
  (setf (getf color-paddle-per-slot :color-resources-string) nil))

(defun find-controllers (&optional (types (color-controller-types)))
						;this part is relevant mostly to Lmachines 
  (declare (special *genlock-paddle-cards*))

  (unless reboot-lock



1    ;this part is relevant mostly on Imachines
    ;scan the default file
0    (loop for (type  val) on (read-color-defaults :always-read nil)
		    by #'cddr
	  when (eq type :controllers)
	    do (loop for spec in val do
		 (cl:apply #'define-color-controller-internal spec)))


    (labels ((memory-boards-for-controller
		(remaining-controllers boards)
	       ;;
	       ;; note; because the memory boards are indestinguishable, we have to assert
	       ;; their connection to a particular controller by proxemity.  Find memory
	       ;; boards that are between this controller and the next 
	       ;; controller which requires memort boards
	       ;;
	       (let* ((desc (first remaining-controllers))
		      (cont-slot (first desc))
		      (other-controllers (cdr remaining-controllers))
		      (mem (get desc :memory-required)))
		 (when mem
		   (loop with m1 = (get (locf color-parts) (first mem))
			 and slots
			 and next-cont-slot = (loop for i in other-controllers
						    when (get i :memory-required)
						      return (first i)
						    finally (return -1))
			 for slot in (cdr (assoc (get (locf m1) ':part-number) boards))
			 when (< next-cont-slot slot cont-slot)
			   do (push slot slots)
			 finally (return slots)))))
	     (paddle-card-names (part-number slot boards)
	       ;; given a part number and its home slot, find the paddle cards
	       ;; that share the space
	       (loop for i in boards
		     when (and (neq (first i) part-number)
			       (member slot (cdr i)))
		       collect
			 (let ((j (get (locf color-parts) (first i))))
			   (or (get (locf j) :name)
			       (format nil "**unknown paddle card ~D **"
				       (first i)))))
	       ))

      (loop with boards = (color-boards-present)
	    with old-controllers = (cl:getf color-paddle-per-slot 'color-controllers)
	    for board in boards
	    as desc = (get (locf color-parts) (first board))
	    when (and (cdr board)
		      (get (locf desc) :controller))
	      nconc (loop for i in (cdr board) collect (cons i desc))
		into controllers
	    finally
	      (setq controllers (sort controllers  #'(lambda (a b) (> (car a) (car b)))))
	      (let ((val 
		      (loop for cont on controllers
			    as desc = (first cont)
			    as part-number = (get desc :part-number)
			    as slot = (first desc)
			    as memslots = (memory-boards-for-controller cont boards)
			    as paddle = (paddle-card-names part-number slot boards)
			    as genlock = (loop for pa in paddle
					       as gp = (memq pa *genlock-paddle-cards*)
					       when gp return (first gp))

			    collect
			      (list (get desc :name)
				    slot
				    memslots
				    paddle
				    (format nil "~A~A in slot ~A"
					    (if genlock "Genlocked " "")
					    (or (get desc :description)
						(get desc :name))
					    slot)
				    ))))
		(cl:setf
		  (cl:getf color-paddle-per-slot 'color-controllers)
		  (cl:union val old-controllers :test #'(lambda (a b)
							  (equal (second a) (second b)))))
		(return val))
	      ))

1						;look directly 
0    (loop for type in types
	  as dat = (getf color-parts type)
	  as finder = (getf dat :finder)
	  when finder
	    do
	      (catch-error (funcall finder) nil))
    ))


(defun color-boards-present (&key show-paddle-cards (flush-cache reboot-lock))
  (unless reboot-lock
    (when (or show-paddle-cards flush-cache)
      (setq color-paddle-per-slot nil))
    (let ((boards (cl:getf color-paddle-per-slot 'color-boards-present :no)))
      (when (eq :no boards)

	(let ((boards (nconc (apply 'find-part-number-slots (color-part-numbers)))))
	  (loop for i in boards
		as j = (get (locf color-parts) (first i))
		as paddle = (get (locf j) ':find-paddle-cards)
		when paddle
		  do
		    (loop for slot in (cdr i) do
		      (multiple-value-bind (mem ctl)
			  (if (listp paddle)
			      (lexpr-funcall (car paddle) slot
					     :show-paddle-cards show-paddle-cards
					     (cdr paddle))
			      (funcall paddle slot :show-paddle-cards show-paddle-cards))
			(when mem (push (list mem slot) boards))
			(when ctl (push (list ctl slot) boards))))
		    )
	  (setf (cl:getf color-paddle-per-slot 'color-boards-present) boards))
	)
      (cl:getf color-paddle-per-slot 'color-boards-present)))
  )

(defun color-controllers (&key controller-types not-controller-types
			  paddle-card-types not-paddle-card-types
			  controller-predicate
			  (flush-cache nil))

  (declare (special *genlock-paddle-cards*))
  (when flush-cache (setq color-paddle-per-slot nil))
  (let* ((cached-controllers (getf color-paddle-per-slot 'color-controllers :no))
	 (all-controllers (cond ((eq cached-controllers :no)
				 (find-controllers)
				 (getf color-paddle-per-slot 'color-controllers))
				(t cached-controllers
				   ))))
    (when (eq controller-types t)
      (setq controller-types nil))
    (if (or controller-types not-controller-types
	    paddle-card-types not-paddle-card-types
	    controller-predicate)
      (loop for cont in all-controllers
	    as (this-cont nil nil this-paddle-card) = cont
	    when (and (or (null controller-types)
			  (memq this-cont controller-types))
		      (not (memq this-cont not-controller-types))
		      (or (null controller-predicate)
			  (funcall controller-predicate cont))
		      (or (null paddle-card-types)
			  (loop for i in this-paddle-card
				thereis (memq i paddle-card-types)))
		      (not (loop for i in this-paddle-card
				     thereis (memq i not-paddle-card-types)))
		      )
	      collect cont)
      all-controllers)))

(define-presentation-type(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") available-color-controller0 (())
   :parser ((stream) (dw:complete-from-sequence
		       (color-controllers)
		       stream
		       :partial-completers '(#\SPACE)
		       :name-key #'fifth
		       ))
   :printer ((x stream) (princ (fifth x) stream))
   :description "A color controller in this machine")

(defun internal-color-system-description
       (&optional controller-type controller-slot (or-any-slot t))
  (loop for (cont slot mem paddle) in (color-controllers)
	as desc = (get (locf color-parts) cont)
	as mem-req = (get (locf desc) :memory-required)
	when (and (or (null controller-type)
		      (eq controller-type cont))
		  (or (null controller-slot)
		      (eql slot controller-slot)))
	  nconc
	    (list cont
		  (if mem-req (length mem) 1)
		  paddle)
	    into val
	finally (when (and (null val) controller-slot or-any-slot controller-type)
		  (return
		    (internal-color-system-description controller-type nil nil)))
		(return (lexpr-funcall #'values val))))

(defun color-system-description ()
  (color:internal-color-system-description))

(defun color-resources-string ()
  (if reboot-lock
      ""
      (or (getf color-paddle-per-slot :color-resources-string)
	  (let ((str (with-output-to-string (str)
		       (loop with parts = (color-controllers)
			     as part = (pop parts)
			     as controller = (pop part)
			     as cont-desc = (get (locf color-parts) controller)
			     do (pop part)
			     as memory = (pop part)
			     as paddle = (pop part)
			     do
			 (when memory (format str "~D-bit " (* 8 (length memory))))
			 (loop for i in paddle
			       as j = (get (locf color-parts) i)
			       while i
			       when j
				 do
				   (format str "~A" (or (get (locf j) :short-description)
							(string-downcase i))))
			 (format str "~A" (cond ((get (locf cont-desc) :short-description))
						(controller (string-downcase controller))
						(t "")))
			 (if (null parts)
			     (return "")
			     (format str " + "))
			 ))))
	    (setf (getf color-paddle-per-slot
			:color-resources-string)
		  str)
	    str))))

(add-initialization :color-paddles `(setq reboot-lock nil) '(:warm))

(add-initialization :color-paddles 
		    '(setq reboot-lock t
			   color-paddle-per-slot nil
			   )
		    '(:before-cold))
(setq color-paddle-per-slot nil)
