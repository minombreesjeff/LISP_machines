;;; -*- Mode: LISP; Package: TV; Base: 10.; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; A string editor, to make it wasy to edit the strings in the world
;;

(defun trim-trailing-blanks (str)
  (loop for i from (1- (array-active-length str)) downto 0
	as chr = (aref str i)
	unless (cl:member chr '(#\newline #\space) :test #'char-equal)
	  return (substring str 0 (1+ i))
	finally (return (string-append ""))))

(defun read-string-for-edit-string-internal (window)
  (loop with value
	as chr = (send window :any-tyi)
	when (and (listp chr)
		  (eq (first chr) :activation))
	  do
	    (let* ((ie-str (symeval-in-instance
			     window
			     'si:input-editor-buffer)))
	      (setq value  (string-append (or ie-str "")))
	      (send window :clear-input)
	      (send window :clear-window)
	      (return value))))

(defun edit-string-internal (window &key
			     (label :default)
			     (reader-function 'read-string-for-edit-string-internal)
			     (input-editor-options)
			     initial-value
			     (prompt ">")
			     (echo-style '(nil nil nil))
			     (prompt-style '(nil nil nil))
			     (typein-style '(nil nil nil))
			     (expose-p t)
			     (select-p t)
			     (zoom t)
			     (final-action nil)
			     (warp-mouse nil)
			     (multi-line t)
			     (borders :unspecified)
			     (border-margin-width :unspecified)
			     (trim-blanks t)
			     (superior :unspecified)
			     (size :unspecified)
			     (size-from-prompt-extra '(4 1))
			     (minimum-character-size '(40 1))
			     (messages-to-window)
			     (notification-mode :unspecified)
			     loop &aux locative)
  (loop for msgs first messages-to-window then (cdr msgs)
	until (null msgs) do (lexpr-send window (first msgs)))

  (when (neq borders :unspecified)
    (send window :set-borders borders))

  (when (neq border-margin-width :unspecified)
    (send window :set-border-margin-width border-margin-width))

  (when (and superior (neq superior :unspecified))
    (send window :set-superior superior))

  (when (neq label :unspecified)
    (send window :set-label (if (eq label :default)
				(if multi-line
				    #.(format nil "Type ~ to exit" #\END)
				    #.(format nil "Type ~ or ~ to exit" #\END #\RETURN))
				label)))

  (cond ((listp prompt) (setq prompt (lexpr-funcall #'format nil prompt)))
	(t (setq prompt (string prompt))))

  (cond ((eq size :unspecified))
	((neq size :from-prompt)
	 (send window :set-size (first size) (second size)))
	(t (destructuring-bind (x y) size-from-prompt-extra
	     (send window :set-size-in-characters prompt prompt)
	     (multiple-value-bind (w h) (send window :size-in-characters)
	       (send window :set-size-in-characters
		     (max (+ w x) (first minimum-character-size))
		     (max (+ h y) (second minimum-character-size)))))))


  (using-window (window :expose-p expose-p :select-p select-p
			:echo-character-style echo-style
			:default-character-style prompt-style
			:typein-character-style typein-style
			:notification-mode notification-mode
			:zoom zoom :warp-mouse warp-mouse :final-action final-action)
    
    (when (locativep initial-value)
      (setq locative initial-value
	    initial-value (location-contents initial-value)))

    (unless initial-value (setq initial-value ""))
    (setq initial-value (string initial-value))
    (loop as retry = nil
	  as si:*input-editor-options* =
	  (append input-editor-options
		  `((:initial-input ,initial-value)
		    (:inhibit-notifications t)
		    (:prompt ,.prompt)
		    (:activation member ,(if multi-line '(#\end) '(#\end #\line #\return)))
		    (:preemptable :blip)))
	  do
      (multiple-value-bind (blip val)
	  (with-input-editing (window)
	    (setq initial-value (funcall reader-function window)))
	(if (eq val :blip)
	    (progn
	      (selectq (first blip)
		(:new-initial-value
		 (when (and locative
			    (neq (third blip) :abort))
		   (let* ((ie-str (symeval-in-instance
				    window
				    'si:input-editor-buffer))
			  )
		     (setq initial-value
			   (funcall (if trim-blanks #'trim-trailing-blanks #'string-append)
				    (or ie-str ""))))
		   
		   (setf (location-contents locative)
			 (if (string-equal initial-value "")
			     nil initial-value)))
		 (setq initial-value (second blip)
		       locative nil
		       label (fourth blip))
		 (when (locativep initial-value)
		   (setq locative initial-value
			 initial-value (location-contents initial-value)))
		 (unless initial-value (setq initial-value ""))
		 (when label
		   (send window :set-label
			 (if (eq label :none) nil label)))
		 )
		(:mouse-button (setq retry t))
		(t (format t "~&Funny blip ~S~%" blip)))
	      (send window :clear-input)
	      (send window :clear-window))

	    (when locative
	      (let ((i-v (if (and trim-blanks (stringp initial-value))
			     (trim-trailing-blanks initial-value)
			     initial-value)))
		(setf (location-contents locative)
		    (if (and (stringp i-v)(string-equal "" i-v))
			nil
			i-v))))
	    )
	)
	  until (and (null loop)
		     (null retry)
		     )
	    ))
  (let ((i-v (if (and trim-blanks (stringp initial-value))
		 (trim-trailing-blanks initial-value)
		 initial-value)))
    (when (and (stringp i-v)(string-equal "" i-v))
      (setq i-v nil))
    (when locative
      (setf (location-contents locative) i-v))
    (values i-v locative))
  )

#||
(defconst *pop-up-readline-margin-components*
  `((dw::margin-drop-shadow-borders )
    (dw::margin-label)
    (dw::margin-white-borders :thickness 2)))

(defun dw::pop-up-readline (&rest args &key
			(superior tv:mouse-sheet)
			(size :from-prompt)
			(multi-line nil)
			(notification-mode :always-pop-up)
			&allow-other-keys)

      (using-resource (window
			dw:dynamic-window
			superior
			:blinker-p t
			:temporary-p t)
	(lexpr-funcall #'edit-string-internal window
		       :superior superior
		       :final-action :deactivate
		       :multi-line multi-line
		       :size size
		       :select-p t
		       :notification-mode notification-mode
		       args)))
||#

(defun pop-up-readline (&rest args &key
			(superior tv:mouse-sheet)
			(size :from-prompt)
			(multi-line nil)
			(input-editor-options)
			(initial-value)
			(notification-mode :always-pop-up)
			(keyboard-table nil)
			&allow-other-keys)
  (declare (arglist (&key 
		      (prompt "")
		      (size :from-prompt)
		      (label :default)
		      (multi-line nil)
		      initial-value
		      (size-from-prompt-extra '(4 1))
		      (minimum-character-size '(40 1))

		      (reader-function 'read-string-for-edit-string-internal)
		      (input-editor-options)
		      (echo-style '(nil nil nil))
		      (prompt-style '(nil nil nil))
		      (typein-style '(nil nil nil))
		      (expose-p t)
		      (select-p t)
		      (superior tv:mouse-sheet)
		      (zoom t)
		      (final-action nil)
		      (warp-mouse nil)

		      (borders :unspecified)
		      (border-margin-width :unspecified)
		      (trim-blanks t)
		      (messages-to-window)
		      (notification-mode :always-pop-up))))

  (using-resource (window tv:pop-up-text-window superior)
    (let ((old-keyboard-table (get (locf (tv:io-buffer-plist (send window :io-buffer)))
				   :keyboard-table)))
      (unwind-protect
	  (progn
	    (when keyboard-table
	      (putprop (locf (tv:io-buffer-plist (send window :io-buffer)))
		       keyboard-table :keyboard-table))
	    (block read-loop
	      (lexpr-funcall #'edit-string-internal window
			     :allow-other-keys t
			     :superior superior
			     :final-action :deactivate
			     :multi-line multi-line
			     :size size
			     :select-p t
			     :notification-mode notification-mode
			     :input-editor-options
			     `(,@input-editor-options
			       (:input-wait "User Input"
				,#'(lambda () (when (not (send window :exposed-p))
						(return-from read-loop initial-value)))))
			     args)))
	(putprop (locf (tv:io-buffer-plist (send window :io-buffer)))
		 old-keyboard-table :keyboard-table)))))


