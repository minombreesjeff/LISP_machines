;;; -*- Mode: LISP; Package: TV; Base: 10. -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;--------------------------------------------------------------------------------
;;;
;;;			     Fill an Area.
;;;
;;;--------------------------------------------------------------------------------

;;;	  When		 Who	    What
;;;	19 Jun 84	Eric	Created file.
;;;	 9 Jul 84	Eric	Initial Coding.
;;;     30 aug 84	DDyer	Adapt to include in color

;;;--------------------------------------------------------------------------------

;;; This particular fill mechanism works in two stages.  First we find a
;;; segment of  a row to fill, and then we call a brush op on it.  This
;;; file is mainly concerned with finding the segments.


;; these specials are bound in the main loop
(defvar *fill-row-span*)	;;Number of elements between rows in the source array
(defvar *fill-diagonal-offset*)  ;; 0 or 1 depending on if diagonals are connected
(defvar *fill-first-row*)  	;;First row in the array to scan
(defvar *fill-last-row*)	;;Last row in the array to scan
(defvar *fill-left-limit*) 	;;First column in the array to scan
(defvar *fill-right-limit*)	;;Last column in the array to scan
(defvar *fill-source-pixel-value*)		;;Color on which fill is keyed
(defvar *fill-source*)		;;Array on which fill is keyed
(defvar *fill-pixel-mask*)	;;Mask for pixel values
(defvar *fill-bitmap-width*)
(defvar *fill-current-edge*)  	;;Stack of edges of fill space active
(defvar *fill-bitmap*)		;;Bitmap for tracking parts of the fill region already found
(defvar *fill-bitmap-span*)	;;array-row-span for the fill bitmap
(defvar *fill-line-map*)	;;1 element for each line of fill-bitmap.
				;;T if this fill operation touched it.

(defvar *fill-window*)
(defvar *fill-message*)
(defvar *fill-window-top*)
(defvar *fill-window-left*)

;;;--------------------------------------------------------------------------------
;;;		Scan left/right until/while it's this color..

;;; The following four functions might stand to be microcoded.

(defun scan-left-until-color (array color row start-col left-limit)
  (let* ((a array)
	 (mask *fill-pixel-mask*)
	 (row-index (* row *fill-row-span*)))
    (declare (compiler:array-register-1d a))
    (loop for i from (+ start-col row-index )
	  downto (+ left-limit row-index)
	  for x from start-col by -1
	  when (= (logand mask (aref a i)) color)
	  return  x
	  finally (return (1- left-limit)))))

(defun scan-left-while-color (array color row start-col left-limit)
  (let* ((a array)
	 (mask *fill-pixel-mask*)
	 (row-index (* row *fill-row-span*))
	 )
    (declare (compiler:array-register-1d a))
    (loop for i from (+ start-col row-index)
	  downto (+ left-limit row-index)
	  for x from start-col by -1
	  when ( (logand mask (aref a i)) color)
	  return  x
	  finally (return (1- left-limit)))))

(defun scan-right-until-color (array color row start-col right-limit)
  (let* ((a array)
	 (mask *fill-pixel-mask*)
	 (row-index (* row *fill-row-span*))
	 )
    (declare (compiler:array-register-1d a))
    (loop for i from (+ start-col row-index)
	  to (+ right-limit row-index)
	  for x from start-col by 1
	  when (= (logand mask (aref a i)) color)
	  return  x
	  finally (return (1+ right-limit)))))

(defun scan-right-while-color (array color row start-col right-limit)
  (let* ((a array)
	 (mask *fill-pixel-mask*)
	 (row-index (* row *fill-row-span*))
	 )
    (declare (compiler:array-register-1d a))
    (loop for i from (+ start-col row-index)
	  to (+ right-limit row-index)
	  for x from start-col by 1
	  when ( (logand mask (aref a i)) color)
	  return  x
	  finally (return (1+ right-limit)))))



;;; --------------------------------------------------------------------------------
;;; 	Fill Edge object...
(defflavor fill-edge (line up-left up-right down-left down-right (next-edge)) ()
  :ordered-instance-variables
  :writable-instance-variables)	;..so the macros below work..

(defmethod  (:print-self fill-edge) (stream ignore ignore)
  (si:printing-random-object (self stream :typep)
    (format stream "~d-~d ~d-~d on ~d" up-left up-right down-left down-right line)))

(defmacro with-edge-parameters ((edge direct &optional row l r n) &body body)
  `(let (,@(and row `((,row (fill-edge-line ,edge))))
	 ,@(and l (eq direct :up) `((,l (fill-edge-up-left ,edge))))
	 ,@(and r (eq direct :up) `((,r (fill-edge-up-right ,edge))))

	 ,@(and l (eq direct :down) `((,l (fill-edge-down-left ,edge))))
	 ,@(and r (eq direct :down) `((,r (fill-edge-down-right ,edge))))

	 ,@(and n `((,n (fill-edge-next-edge ,edge)))))
     . ,body))



;;; --------------------------------------------------------------------------------
;;; 	Fill Edge Resource...

;;; Note:  The ^$#$# "RESOURCE" system can't cut it here...  We're picking up and putting
;;; back so many edges so fast that ALLOCATE-RESOURCE is taking too long to search thru the
;;; array of objects for a free one.  I'll just hack this with an array-stack..

(defconst *edge-resource* nil)

(defun get-new-edge (line up-left up-right down-left down-right)
  (let ((value))
    (without-interrupts
      (when *edge-resource*
	(setq value *edge-resource*
	      *edge-resource* (fill-edge-next-edge value)
	      )
	(setf (fill-edge-next-edge value) nil)
	))
    (unless value
      (setq value (make-instance 'fill-edge)))
    (setf (fill-edge-line value) line)
    (setf (fill-edge-up-left value) up-left)
    (setf (fill-edge-up-right value) up-right)

    (setf (fill-edge-down-left value) down-left)
    (setf (fill-edge-down-right value) down-right)

    ;;got new edge!
    (setf (fill-edge-next-edge value) *fill-current-edge*)
    (setq *fill-current-edge* value)
    value))

(defun return-edge (edge)
  (without-interrupts
    (setf (fill-edge-next-edge edge) *edge-resource*)
    (setq *edge-resource* edge)))


;;; --------------------------------------------------------------------------------
;;;     Fill Bitmap...



(defun mark-edge-in-bitmap (row l r )
  (let ((row (- row *fill-first-row*))
	)

    (when *fill-line-map*
      (unless (aref *fill-line-map* row)
	(tv:%draw-rectangle-internal *fill-bitmap-width* 1
				   0 row
				   tv:alu-setz *fill-bitmap*)
	(setf (aref *fill-line-map* row) t)))
	      

    (tv:%draw-rectangle-internal (- r l -1) 1
				 (- l *fill-left-limit*) row
				 tv:alu-ior *fill-bitmap*)))

(defun fill-bitmap-edge-marked (row l)
  (let ((row (- row *fill-first-row*))
	(l (- l *fill-left-limit*)))
    (and (or (null *fill-line-map*)
	     (aref *fill-line-map* row))
	 (not (zerop (%1d-aref *fill-bitmap* (+ l (* row *fill-bitmap-span*)))
		     #|| (raster-aref *fill-bitmap* l row) ||#
		     )))))

;;;--------------------------------------------------------------------------------
;;;      Main Loop and Exploring functions..

(defun fill-edge (row starting-point right-limit)
  row starting-point right-limit
  (ferror "Don't call this definition of FILL-EDGE, use LETF to bind it"))

(defun fill-main-loop-in-environment  (draw-row-function scan-function x y)
  "Run the main loop with the environment set up right."
  ;; Bind the function cells of FILL-EDGE and  SCAN-FOR-NEW-EDGE
  (letf ((#'fill-edge (if (symbolp draw-row-function)
			    (fsymeval draw-row-function)
			    draw-row-function))
	 (#'scan-for-new-edge		;save a cycle here & there..
	  (if (symbolp scan-function) (fsymeval scan-function) scan-function))
	 )
    (let ((*fill-current-edge*)
	  (*fill-bitmap-width* (- *fill-right-limit* *fill-left-limit* -1))
	  (*fill-Pixel-mask* (or *fill-pixel-mask*
				 (1- (lsh 1 (si:array-element-byte-size *fill-source*))))))
      (setq *fill-source-pixel-value* (logand *fill-source-pixel-value* *fill-pixel-mask*))
      (when *fill-line-map*
	(si:fill-array *fill-line-map* nil 0))
      
      (when (and (<= *fill-first-row* y *fill-last-row*)
		 (<= *fill-left-limit* x *fill-right-limit*))
	(multiple-value-bind ( l r)
	    (scan-for-new-edge y x x )
	  (when l (get-new-edge y l r l r)
		(mark-edge-in-bitmap y l r)
		(fill-edge y l r)
		(fill-main-loop)))))))


(defun fill-main-loop ()
  (loop as current-edge = *fill-current-edge*
	until (null current-edge)
	doing
	(setq *fill-current-edge* (fill-edge-next-edge current-edge))
	(explore-up-from-edge current-edge)	;Finds edge(s) on line above, pushes on list.
	(explore-down-from-edge current-edge)	;  "     "     "   "   below.
	(return-edge current-edge)		;All done with this edge.
	))


;;; This is really a dummy.  Bind the function cell to one of the two following...
(defun scan-for-new-edge (row starting-point right-limit)
  row starting-point right-limit
  nil)


(defun scan-for-new-edge-until (row starting-point right-limit
				&aux
				(color *fill-source-pixel-value*)
				(source *fill-source*)
				(mask *fill-pixel-mask*))
  (declare (sys:array-register-1d source))
  (prog scan (left right )
	;; See if we have to scan right or left to find the left edge.
	(if ( (logand mask (aref source (+ starting-point (* row *fill-row-span*)))
		       #|| (raster-aref source starting-point row) ||#
		       )
	       color)				;we're inside = scan left..
	    (setq left (1+ (scan-left-until-color source color
						  row starting-point *fill-left-limit*)))

	    ;;else..  we're outside = scan right to find left edge.
	    (setq left (scan-right-while-color
			 source color row starting-point right-limit)))
	(when (> left right-limit)		;didn't find end of border.
	  (return nil))
	;; Got the left edge, now get the right.. 
	(setq right (scan-right-until-color source color row
					    (max left starting-point) *fill-right-limit*))
	(return (values left (1- right)))))


(defun scan-for-new-edge-while (row starting-point right-limit
				&aux
				(color *fill-source-pixel-value*)
				(source *fill-source*)
				(mask *fill-pixel-mask*))
  (declare (sys:array-register-1d source))
  (prog scan (left right)
	;; See if we have to scan right or left to find the left edge.
	(if (= (logand mask (aref source (+ starting-point (* row *fill-row-span*)))
		       #|| (raster-aref source starting-point row) ||#
		       )
	       color)				;we're inside = scan left..
	    (progn
	      (setq left (1+ (scan-left-while-color
			       source color row
			       starting-point *fill-left-limit*))))
	    
	    ;;else..  we're outside = scan right to find left edge.
	    (setq left (scan-right-until-color source color row
					       starting-point right-limit)))
	(when (> left right-limit)		;didn't find end of border.
	  (return nil))

	;; Got the left edge, now get the right..
	(setq right (scan-right-while-color source color row
					    (max left starting-point) *fill-right-limit*))
	(return (values left (1- right)))))


;;; These functions test above and below the current row.

(defun explore-up-from-edge (edge)
  (with-edge-parameters (edge :up row left right) 

    (unless (= row *fill-first-row*)

      (loop with new-edge-l
	    and new-edge-r
	    and current-left = (max (- left *fill-diagonal-offset*) *fill-left-limit*)
	    and new-right = (min (+ right *fill-diagonal-offset*) *fill-right-limit*)
	    and current-row = (1- row)
	    until (> current-left new-right)
	    do (multiple-value (new-edge-l new-edge-r)
		 (scan-for-new-edge current-row current-left new-right))
	    while new-edge-l
	    doing
	    (unless (fill-bitmap-edge-marked current-row new-edge-l )
	      (get-new-edge current-row
			    new-edge-l new-edge-r
			    (if (< new-edge-l left) new-edge-l right)
			    (if (> new-edge-r right) new-edge-r left)
			    )
	      (mark-edge-in-bitmap current-row new-edge-l new-edge-r)
	      (fill-edge current-row new-edge-l new-edge-r)
	      )
	    (setq current-left (+ 2 new-edge-r))))))

(defun explore-down-from-edge (edge)
  (with-edge-parameters (edge :down row left right )

    (unless (= row *fill-last-row*)

      (loop with new-edge-l
	    and new-edge-r
	    and current-left = (max (- left *fill-diagonal-offset*) *fill-left-limit*)
	    and new-right = (min (+ right *fill-diagonal-offset*) *fill-right-limit*)
	    and current-row = (1+ row)
	    until (> current-left new-right)
	    do (multiple-value (new-edge-l new-edge-r)
		 (scan-for-new-edge current-row current-left new-right))
	    while new-edge-l
	    doing
	    (unless (fill-bitmap-edge-marked current-row new-edge-l)
	      (get-new-edge current-row
			    (if (< new-edge-l left) new-edge-l right)
			    (if (> new-edge-r right) new-edge-r left)
			    new-edge-l new-edge-r)
	      (mark-edge-in-bitmap current-row new-edge-l new-edge-r)
	      (fill-edge current-row new-edge-l new-edge-r)
	      )
	    (setq current-left (+ 2 new-edge-r)))
      ))
  )


;;; --------------------------------------------------------------------------------
;;;   Test Fixture...



(comment

(defun sbm ()
  (send terminal-io :bitblt tv:alu-seta 1024. 1024. *fill-bitmap* 0 0 0 0))

(defun test-fill ()
  (with-brush-locked pb
    (multiple-value-bind (x y) (mouse-specify-point)
      (let ((color (%logldb (byte 24 0) (prepare-sheet (pc)
					  (raster-aref (send pc :screen-array) x y))))
	    (foo (send terminal-io :expose-for-typeout))
	    (*fill-bitmap* (send terminal-io :screen-array)))
	(prepare-sheet (pc)
	  (prepare-sheet (terminal-io) 
	    (fill-array-while sa color x y)
	    
	    ))))))
  

(with-brush-locked pb
    (multiple-value-bind (x y) (mouse-specify-point)
      (let ((color (%logldb (byte 24 0) (prepare-sheet (pc)(raster-aref sa x y))))
	    (foo (send terminal-io :expose-for-typeout))
	    (*fill-bitmap* (send terminal-io :screen-array)))
	(prepare-sheet (pc)
	  (prepare-sheet (terminal-io) 
	    (fill-changing-colors (send pc :screen-array)
				  color
				  (send *cyan-blue* :32b-pixel-value)
				  x y)
	    
	    )))))


)

(defmethod (:fill-area tv:graphics-mixin)
	   (seed-x seed-y
		   &key
		   (search-function :until)
		   (pixel-value 0)
		   (pixel-mask)
		   (draw-row-function)
		   (draw-row-message)
		   connect-diagonals
		   user:bit-array
		   (incrementally-clear t)
		   (left (tv:sheet-inside-left))
		   (top (tv:sheet-inside-top))
		   (right (+ (tv:sheet-inside-left) (tv:sheet-inside-width)))
		   (bottom (+ (tv:sheet-inside-top) (tv:sheet-inside-height)))
		   (edges)
		   (fill-pixel-value)
		   (fill-alu)
		   save-bit-array
		   discard-bit-array
		   save-line-array
		   discard-line-array
		   )
  
  (declare (special fill-pixel-value fill-alu))
  
  (selectq search-function
    (:until (setq search-function #'scan-for-new-edge-until))
    (:while (setq search-function #'scan-for-new-edge-while))
    )
  
  (when edges
    (when (first edges) (setq left (first edges)))
    (when (second edges) (setq top (second edges)))
    (when (third edges) (setq right (third edges)))
    (when (fourth edges) (setq bottom (fourth edges))))
  
  (when (and (null fill-pixel-value) (null fill-alu))
    (setq fill-pixel-value (lognot pixel-value)))
  
  (when (or (fixp draw-row-function)
	    (and (fixp fill-pixel-value) (null draw-row-function) (null draw-row-message)))
    (when (fixp draw-row-function)
      (setq fill-pixel-value draw-row-function))
    (setq draw-row-function #'change-color-of-line))
  
  (when (and fill-alu (not (or draw-row-function draw-row-message)))
    (setq draw-row-function
	  #'(lambda (line from to)
	      (send *fill-window* :draw-rectangle (- to from -1 ) 1
		    (- from *fill-window-left*) (- line *fill-window-top*)
		    fill-alu))))
  (when draw-row-message
    (setq draw-row-function
	  (if (and (listp draw-row-message) (listp (cdr draw-row-message)))
	      
	      #'(lambda (line from to)
		  (send *fill-window* (car *fill-message*)
			(- line *fill-window-top*)
			(- from *fill-window-left*)
			(- to *fill-window-left*)
			(cdr *fill-message*)))
	      
	      #'(lambda (line from to)
		  (send *fill-window* *fill-message*
			(- line *fill-window-top*)
			(- from *fill-window-left*)
			(- to *fill-window-left*))))))

  (when (null draw-row-function)
    (setq draw-row-function #'ignore))

  (let* ((left (max (tv:sheet-inside-left) left))
	 (top  (max (tv:sheet-inside-top) top))
	 (right (min (+ (tv:sheet-inside-left) right)
		     (+ (tv:sheet-inside-left) (tv:sheet-inside-width))))
	 (bottom (min (+ (tv:sheet-inside-top) bottom)
		      (+ (tv:sheet-inside-top) (tv:sheet-inside-height))))
	 (width (- right left))
	 (height (- bottom top)))

    (tv:with-bit-array
      self :both
      #'(lambda (raster index span)
	  (multiple-value-bind (top left)(floor index span)
	    (let ((right (+ left width))
		  (bottom (+ top height)))

	      (when user:bit-array
		;; clip right and bottom to the bit array supplied
		(multiple-value-bind (wid hei)
		    (decode-raster-array user:bit-array)
		  (setq right (min right (+ left wid))
			bottom (min bottom (+ top hei)))))
	    
	      (when (and user:bit-array (arrayp incrementally-clear))
		;; clip to the line index array
		(setq bottom (min bottom (+ top (array-dimension-n 1 incrementally-clear)))))
      
	      (let ((*fill-first-row* top)
		    (*fill-last-row*  (1- bottom))
		    (*fill-left-limit* left)
		    (*fill-right-limit* (1- right))
		    (*fill-source* raster)
		    (*fill-row-span* span)
		    (*fill-source-pixel-value* pixel-value)
		    (*fill-pixel-mask* pixel-mask)
		    (*fill-bitmap* user:bit-array)
		    (*fill-line-map* (and user:bit-array incrementally-clear))
		    (*fill-window* self)
		    (*fill-window-top* (tv:sheet-inside-top))
		    (*fill-window-left* (tv:sheet-inside-left))
		    (*fill-message* draw-row-message)
		    (*fill-diagonal-offset* (if CONNECT-DIAGONALS 1 0))
		    )
      
		(unwind-protect
	  
		    (progn 
		      (unless *fill-bitmap*
			(setq *fill-bitmap*
			      (allocate-temp-sheet-raster-and-header
				(list (- *fill-last-row* *fill-first-row* -1)
				      (* 32 (ceiling (- *fill-right-limit* *fill-left-limit* -1) 32 ))
				      )
				':type 'art-1b	;always 1b, not screen array type
				':initial-value 0
				)))
	    ;;; allocate a line map if one is requested
		      (when (eq *fill-line-map* t)
			(setq *fill-line-map*
			      (allocate-temp-sheet-raster-and-header
				(- *fill-last-row* *fill-first-row* -1)
				':type 'art-boolean)))
		      (multiple-value-bind (nil nil *fill-bitmap-span*)
			  (decode-raster-array *fill-bitmap*)
			(send tv:screen ':%fill-area
			      (+ seed-x (tv:sheet-inside-left))
			      (+ seed-y (tv:sheet-inside-top))
			      draw-row-function	;; funciton to do something once found
			      search-function	;; function to continue scan
			      )))
	
		  (unless (or save-bit-array
			      (and user:bit-array (not discard-bit-array)))
		    (deallocate-temp-sheet-raster-and-header *fill-bitmap*)
		    (setq *fill-bitmap* nil))
	
		  (when (or save-line-array
			    (and user:bit-array
				 (eq incrementally-clear  t)
				 (not discard-line-array)))
		    (deallocate-temp-sheet-raster-and-header *fill-line-map*)
		    (setq *fill-line-map* nil))
		  )
		(values *fill-bitmap* *fill-line-map*)
		)
	    )))
      :x-offset left
      :y-offset top
      :width width
      :height height))
  )


(defmethod (:%fill-area tv:basic-screen)
	   (seed-x seed-y
	    draw-row-function search-function
	    )
  (fill-main-loop-in-environment draw-row-function search-function
				 seed-x seed-y)
  )


(defun fill-array-until (*fill-source* *fill-source-pixel-value* x y
			 &optional
			 (draw-row-function #'ignore)
			 *fill-bitmap* *fill-line-map*
			 (*fill-left-limit* 0)
			 (*fill-first-row* 0)
			 *fill-right-limit* 
			 *fill-last-row* 
			 )
  (declare (arglist array-or-sheet color seed-x seed-y &optional (draw-row-function #'ignore)))

  (unless (and *fill-right-limit* *fill-last-row*)
    (multiple-value-bind (w h *fill-row-span*)
	(decode-raster-array *fill-source*)
      (unless *fill-right-limit*
	(setq *fill-right-limit* w))
      (unless *fill-last-row*
	(setq *fill-last-row* h))))

  (fill-main-loop-in-environment draw-row-function #'scan-for-new-edge-until x y))


(defun fill-array-while (*fill-source* *fill-source-pixel-value* x y
			 &optional (draw-row-function #'ignore)
			 *fill-bitmap* *fill-line-map*
			 (*fill-left-limit* 0)
			 (*fill-first-row* 0)
			 *fill-right-limit* 
			 *fill-last-row*
			 )
  (declare (arglist array-or-sheet color seed-x seed-y &optional (draw-row-function #'ignore)))

  (unless (and *fill-right-limit* *fill-last-row*)
    (multiple-value-bind (w h *fill-row-span*)
	(decode-raster-array *fill-source*)
      (unless *fill-right-limit*
	(setq *fill-right-limit* w))
      (unless *fill-last-row*
	(setq *fill-last-row* h))))

  (fill-main-loop-in-environment draw-row-function #'scan-for-new-edge-while x y))

(defun change-color-of-line
       (line l r)
  (declare (special fill-pixel-value))
  (let ((a *fill-source*)
	(span *fill-row-span*))
    (declare (compiler:array-register-1d a))
    (loop for i from (+ (* span line) l) to (+ (* span line) r)
	  doing (setf (aref a i) fill-pixel-value))))

(defun fill-changing-colors (source old-color fill-pixel-value x y
			     )
  (declare (special fill-pixel-value))
  (fill-array-while source old-color x y)
  )

(defmethod (:fill-draw-line tv:graphics-mixin) (line from to &optional (alu tv:char-aluf))
  
  (send self ':draw-line from line to line alu)
  )

(compile-flavor-methods fill-edge)
