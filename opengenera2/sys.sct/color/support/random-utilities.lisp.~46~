;;-*- Mode: LISP; Package: COLOR; Base: 10.; Lowercase: Yes -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>



;;
;; Utilities for loading aux systems
;;
(defun load-images-system ()
  (unless (fboundp 'save-window)
    (load-system 'images :load-patches t :query nil :version :released :silent t)))

(defun load-color-editor-system ()
  (unless (fboundp 'edit-color)
    (load-system 'color-editor :load-patches t :query nil :version :released :silent t)))


#||
;; These are the conversion routines I spoke of.  N should
;; be a literal value, or #.'ed, during invokation.  If the
;; input value is greater than 1.0, the routines will still
;; produce reasonable output, i.e. if 8 bit integers are
;; what you want, up to 16 bits of the mantissa for the fix
;; routines and 15 bits of the mantissa for the fixr routines
;; can all be ones before there will be a carry over into the
;; next bit position (beyond 8).  For most of your applications,
;; I would assume that it would quite a bit of effort to lose
;; 16 bits of precision.  I don't think the division which
;; you currently do would deal with that much precision loss
;; any better.

;; The following "%" routines replace the system fix and fixr
;; routines.  Each of the pairs represent certain constant
;; assumptions about the nature of the input float and the
;; the desired fixed point result

;; This pair directly substitutes for the system fix and fixr routines

(defsubst %fast-fix-float (float)
  (let* ((.f. (sys:%fixnum float))
	 (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
    (ash (if (ldb-test sys:%%single-sign .f.) (- frac) frac)
	 (- (ldb sys:%%single-exponent .f.) 150.))))

(defsubst %fast-fixr-float (float)
  (let* ((.f. (sys:%fixnum float))
	 (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
    (ash (1+ (ash (if (ldb-test sys:%%single-sign .f.) (- frac) frac)
		  (- (ldb sys:%%single-exponent .f.) 149.))) -1)))

;; All of the following assume that the input will be a float whose
;; magnitude is in the range [0.0, 1.0] (inclusive) 

;; The following pair assume that the output will be representable in
;; an n significant bit (signed) fixum.

(defmacro %fast-fix-float-to-n-significant-bits (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.)))
	  (intf (lsh (- frac (lsh frac (- ,n))) 
		     (- (ldb sys:%%single-exponent .f.) (- 150. ,n)))))
     (if (ldb-test sys:%%single-sign .f.) 
	 (- intf)
	 ;;else
	 intf)))

(defmacro %fast-fixr-float-to-n-significant-bits (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.)))
	  (intf (lsh (1+ (lsh (- frac (lsh frac (- ,n))) 
		   (- (ldb sys:%%single-exponent .f.) (- 149. ,n)))) -1)))
     (if (ldb-test sys:%%single-sign .f.)
	 (- intf)
	 ;;else
	 intf)))

;; The following assume that the argument is a non-negative float and
;; that the output will be representable as an n bit fixnum.

(defmacro %fast-fix-float-to-n-significant-bits-unsigned (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
     (lsh (- frac (lsh frac (- ,n))) 
	  (- (ldb sys:%%single-exponent .f.) (- 150. ,n)))))

(defmacro %fast-fixr-float-to-n-significant-bits-unsigned (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
     (lsh (1+ (lsh (- frac (lsh frac (- ,n))) 
		   (- (ldb sys:%%single-exponent .f.) (- 149. ,n)))) -1)))


;; The following pair assume that the output will be representable in
;; an n bit fixnum pixel, and therefore complains if it get a negative input

(defmacro %fast-fix-float-to-n-bit-pixel (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
     (when (ldb-test sys:%%single-sign .f.) (ferror "Negative?"))
     (lsh (- frac (lsh frac (- ,n))) (- (ldb sys:%%single-exponent .f.) (- 150. ,n)))))

(defmacro %fast-fixr-float-to-n-bit-pixel (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
     (when (ldb-test sys:%%single-sign .f.) (ferror "Negative?"))
     (lsh (1+ (lsh (- frac (lsh frac (- ,n))) 
		   (- (ldb sys:%%single-exponent .f.) (- 149. ,n)))) -1)))

;; The following pair assume that the output will be representable in
;; an n bit fixnum pixel, and clamps to 0 if it get a negative input

(defmacro %fast-fix-float-to-n-bit-clamped-pixel (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
     (if (ldb-test sys:%%single-sign .f.) 
	 0
	 ;;else
	 (lsh (- frac (lsh frac (- ,n))) (- (ldb sys:%%single-exponent .f.) (- 150. ,n))))))

(defmacro %fast-fixr-float-to-n-bit-clamped-pixel (float n)
  `(let* ((.f. (sys:%fixnum ,float))
	  (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
     (if (ldb-test sys:%%single-sign .f.) 
	 0
	 ;;else
	 (lsh (1+ (lsh (- frac (lsh frac (- ,n))) 
		       (- (ldb sys:%%single-exponent .f.) (- 149. ,n)))) -1))))

;; The following pair assume that the output will be an 8 bit pixel,
;; and therefore complains if it gets a negative input.

(defsubst %fast-fix-float-to-8-bit-pixel (float)
  (let* ((.f. (sys:%fixnum float))
	 (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
    (when (ldb-test sys:%%single-sign .f.) (ferror "Negative?"))
    (lsh (- frac (lsh frac -8.)) (- (ldb sys:%%single-exponent .f.) 142.))))

(defsubst %fast-fixr-float-to-8-bit-pixel (float)
  (let* ((.f. (sys:%fixnum float))
	 (frac (logior #o40000000 (ldb sys:%%single-fraction .f.))))
    (when (ldb-test sys:%%single-sign .f.) (ferror "Negative?"))
    (lsh (1+ (lsh (- frac (lsh frac -8.)) (- (ldb sys:%%single-exponent .f.) 141.))) -1)))

||#



;;; PRETTY-LESSP is a predicate on strings which compares corresponding
;;; substrings of digits numerically, while comparing non-numeric substrings in
;;; the usual way.  Example: (sort '("0" "1" "1a" "1b" "2" "10") #'pretty-lessp)
;;; produces a result which is the same as the input.  In contrast, sorting by
;;; #'string-lessp will result with the element "10" moved between "1" and "1a",
;;; since in normal string comparison the character "0" is less than "a".

;;; PRETTY-LESSP is good for situations where items may be named in this
;;; fashion.  Of course there are applicatins where even this is not sufficient,
;;; but it does make many sorts of user-visible listings prettier.

;;; This implementation is efficient in the sense that it compares only the
;;; minimum number of characters, and does not cons no matter how long the
;;; strings of digits are.  The comptuational overhead has been kept as low as
;;; possible without making the code too obscure.

;;; This implementation is deficient in certain aspects.  One potential
;;; functional misfeature is that it treats any leading zero as a digit smaller
;;; than one.  That is, "0"<"1"<"00"<"10" for example.  In some applications
;;; this may be the right thing, while others might prefer the order to be
;;; "0"<"00"<"1"<"10".  This code can be extended in a natural way to provide
;;; this if you desire it.  Another potential misfeature is that the function as
;;; written pays attention only to the CHAR-CODE of the characters and ignores
;;; all other attributes.  Again, this is easy to modify.  Finally, the name of
;;; the predicate is silly.

;;; True if char is a digit in base 10.  Assumes that digit chars are dense in chars.
(DEFSUBST DECIMAL-DIGIT-CHAR-P (CHAR)
  (WHEN (< -1 (SETF CHAR (- (CHAR-CODE CHAR) (CHAR-CODE #\0))) 10)
    CHAR))

;;; Basically two loops.  The outer compares regular characters, the inner
;;; compares substrings of digits.  The lesser substring is the first one that
;;; has a smaller digit, unless that substring is longer.  SMALLER-LEFT-DIGIT is
;;; used to keep track of this.  (The code is made extra verbose because the
;;; statement syntax of LOOP conflicts with the functional syntax of things like
;;; MACROLET.)  The boundry conditions are tricksy.  An implication of them is
;;; that all non-digit chars are less than all digit chars.

;;
;; Stolen from S:>HACKS>pretty-lessp
;;
(DEFUN TV:PRETTY-STRING-LESSP (X Y)
  (SETF X (STRING X))
  (SETF Y (STRING Y))
  (LOOP WITH LX = (STRING-LENGTH X)
	WITH LY = (STRING-LENGTH Y)
	WITH XI = (AND (< 0 LX) (AREF X 0))
	WITH YI = (AND (< 0 LY) (AREF Y 0))
	WITH XD = (AND XI (DECIMAL-DIGIT-CHAR-P XI))
	WITH YD = (AND YI (DECIMAL-DIGIT-CHAR-P YI))
	WITH I = 0
	WITH SMALLER-LEFT-DIGIT
	WHILE (AND XI YI)
	IF (AND XD YD)
	  DO (LOOP UNLESS (OR SMALLER-LEFT-DIGIT (= XD YD))
		     DO (SETF SMALLER-LEFT-DIGIT (IF (< XD YD) :X :Y))
		   DO (PROGN
			(INCF I)
			(SETF XI (AND (< I LX) (AREF X I)))
			(SETF YI (AND (< I LY) (AREF Y I)))
			(SETF XD (AND XI (DECIMAL-DIGIT-CHAR-P XI)))
			(SETF YD (AND YI (DECIMAL-DIGIT-CHAR-P YI))))
		   WHILE (AND XD YD)
		   FINALLY (COND
			     ((OR XD YD) (RETURN-FROM TV:PRETTY-STRING-LESSP (NOT XD)))
			     (SMALLER-LEFT-DIGIT
			      (RETURN-FROM TV:PRETTY-STRING-LESSP
				(EQ SMALLER-LEFT-DIGIT :X)))))
	     
	ELSE DO (COND
		  ((OR XD YD)
		   (RETURN-FROM TV:PRETTY-STRING-LESSP (NOT XD)))
		  ((CHAR XI YI)
		   (RETURN-FROM TV:PRETTY-STRING-LESSP (CHAR< XI YI)))
		  (T
		   (INCF I)
		   (SETF XI (AND (< I LX) (AREF X I)))
		   (SETF YI (AND (< I LY) (AREF Y I)))
		   (SETF XD (AND XI (DECIMAL-DIGIT-CHAR-P XI)))
		   (SETF YD (AND YI (DECIMAL-DIGIT-CHAR-P YI)))))
	FINALLY (RETURN-FROM TV:PRETTY-STRING-LESSP (AND YI (NOT XI)))))


;;; -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")tv:remove-select-key 0(character &optional
			     (flavor nil)
			     (name nil name-arg-supplied-p)
			     (create-p t)
			     (clobber-p))
  (ignore create-p flavor)
  (2 0 (NIL 0) (NIL :CONDENSED NIL) "CPTFONTC");;
0  2;; This function undoes the result of a call to tv:add-select-key.  The intent of the optional args
0  2;; is to allow extra validation that the correct item is being removed from tv:*select-keys*.
0  2;;
0  (ignore clobber-p)
2  ;; Genera 7.3 or later
0  (let ((item (gethash character cli::*select-key-table*)))
    (when (or (not name-arg-supplied-p)
	      (equal name (third item)))
      (remhash character cli::*select-key-table*)
      (values character item))))

(defun 1tv:remove-from-system-menu-programs-column 0(name &optional
						   (form nil form-arg-supplied-p)
						   (documentation nil doc-arg-supplied-p)
						   (after nil after-arg-supplied-p))
  2;;
0  2;; This function undoes the result of a call to tv:add-to-system-menu-programs-column.
0  2;;
0  2;; The intent of the optional args is to allow extra validation that the correct item is being removed
0  2;; from tv:*system-menu-programs-column*.  I punted on the "after" argument.  I'm not sure that it can
0  2;; be validated since a value of T or NIL means "top" and "bottom" and those change with time.
0  2;;
0  (ignore after after-arg-supplied-p)
  (let ((item (cl:find name tv:*system-menu-programs-column*
		       :key #'first
		       :test #'string-equal)))
    (when (and (or (not form-arg-supplied-p)
		   (equal form (third item)))
	       (or (not doc-arg-supplied-p)
		   (equal documentation (fifth item))))
      (setq tv:*system-menu-programs-column*
	    (cl:remove item tv:*system-menu-programs-column*))
      (values name item))))

;;; -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --



;;;
;;; S-frame Stuff
;;;
(defvar tv:*global-default-configurations*
	`((:empty :no-constraints
	   (:name "Empty" :documentation "An empty frame with no windows" ))))

(3 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");Descriptors in the constraint language that call funcions
0(defvar tv:1*action-configuration-keywords*0 '(:apply
					   :apply-self
					   :select
					   :eval))

3;descriptors that are copied from one configuration to the next
0(defvar1 0tv:1*special-configuration-keywords*
0	`(:group :name ,@tv:*action-configuration-keywords*))
						
3;descriptors in the constraint language that don't describe windows
0(defvar1 0tv:1*all-special-configuration-keywords*
0	`(:default-configuration ,@tv:*special-configuration-keywords*))

3;descriptors to use within window describing entries
0(defvar1 0tv:1*window-specification-keywords*
0	'(:window :make-window :make-window-function :window-name
		  :edges :x-offset :y-offset :width :height :size
		  :apply :apply-self :select :select-p :expose-p :hide
		  :keyword-contexts :message :function :generic-function :properties
		  :io-buffer))

(defun tv:bless-configuration (name value error-p)
  (if (eq (car value) :no-constraints)
      (loop with ok = t
	    for spec in (cdr value) 
	    unless (memq (first spec) tv:*all-special-configuration-keywords*)
	      do
		(loop for (key) on spec by #'cddr
		      unless (memq key tv:*window-specification-keywords*)
			collect key into bad-keys
		      finally
			(when (and error-p bad-keys)
			  (ferror "Undefined window descriptor~p ~{~S ~}in configuration ~S~&~
			descriptor ~S,~&possible values are~&~{~S ~}"
				  (length bad-keys)
				  bad-keys name spec
				  tv:*window-specification-keywords*)
			  )
			(when bad-keys (setq ok nil))
			)
	    finally (return ok))
      t))

(defun tv:add-global-configuration (name value)
  (when (tv:bless-configuration name value t)
    (loop for i in tv:*global-default-configurations*
	  when (equal (car i) name)
	    return (setf (cdr i) (copytree value))
	  finally (push (cons name (copytree value)) tv:*global-default-configurations*))))

(defun tv:remove-global-configuration (name)
  (setq tv:*global-default-configurations*
	(cl:remove-if #'(lambda (a)(equal (car a) name)) tv:*global-default-configurations*)))

(defvar tv:*s-frame-init-keywords*
	'(:save-bits t
	  :name "S-Frame"
	  :frame-objects
	  ((:unconstrained :default-keyword-contexts
	    ((:whole-screen :pane-creation
	      :set-attributes :whole-frame-operations)
	     (:items-in-window :frame-window-operations
	      :set-attributes)
	     ;; hollow circle
	     (:mouse-blinker :character 6 6 :on :set-character  #\mouse:fat-circle)
	     ;; solid circle 
	     (:mouse-item-blinker :character 6 6 :on :set-character #\mouse:filled-circle)
	     )))
	  :top-command-menu t))

(defvar-resettable tv:*in-s-frame-select* nil)

(defun tv:s-frame-select
       (&key group default-configuration configuration set-configuration-keywords
	program-name must-create frame
	function
	expose-p 
	select-p
	activate-p
	(ok-to-create t)
	(selected-ok t)
	beep-if-only-one-selected
	frame-options				;init keywords
	set-frame-objects			;live frame's "frame options" set each time
	init-frame-objects			;live frame's "frame options" set at init
	)
  (dbg:with-default-bug-report-recipient-system ('live-window)
    (let-if (null ok-to-create) ((tv:*in-s-frame-select* nil))
      (let (i-did-it
	    (key "finding a frame" ))
	(unwind-protect
	    (when (or (without-interrupts
			(setq i-did-it
			      (si:store-conditional (locf tv:*in-s-frame-select*) nil key)))
		      (when must-create 
			(tv:confirmation-menu
			  (format nil
				  "Frame building is already in progress,~%currently ~A~%~
			     shall I go ahead anyway?"
				  tv:*in-s-frame-select*)
			  :if-no-response nil)))
	      (setq i-did-it t)
	      (setq tv:*in-s-frame-select* key)	;do it anyway

	      (cond ((fboundp 'tv:live-window-select)
		     (funcall 'tv:live-window-select
			      :expose-p expose-p
			      :activate-p activate-p
			      :select-p select-p
			      :ok-to-create ok-to-create
			      :selected-ok selected-ok
			      :beep-if-only-one-selected beep-if-only-one-selected
			      :set-frame-objects set-frame-objects
			      :frame frame
			      :set-configuration-keywords
			      `(:group ,group :default-configuration ,default-configuration :configuration ,configuration
				       ,@set-configuration-keywords)
			      :predicate #'(lambda (a)
					     (memq a (send tv:default-screen :inferiors)))
			      :frame-options (append frame-options
						     `(:frame-objects ,init-frame-objects)
						     tv:*s-frame-init-keywords*)
			      )
		     )
		    (program-name
		     (dw::find-program-window program-name
					      :create-p (if must-create :force ok-to-create)
					      :expose-p expose-p
					      :activate-p activate-p
					      :selected-ok selected-ok
					      ))
		    (function (if (listp function)
				  (cl:apply (first function) (cdr function))
				  (funcall function)))
		    (t (beep)))
	      )
	  (when i-did-it (setq tv:*in-s-frame-select* nil)))))))


(defmacro tv:def-s-frame-program (&key key name program-name group default-configuration
			       configuration
			       set-configuration-keywords
			       documentation
			       wrapper
			       (add-to-system-menu t)
			       (replace-existing-select-key t)
			       function
			       configurations)
  (let* ((standard-form
	   `(tv:s-frame-select :program-name ,program-name
			    :group ,group
			    :function ,function
			    :default-configuration ,default-configuration
			    :configuration ,configuration
			    :set-configuration-keywords ,set-configuration-keywords))
	 (create-standard-form (append standard-form `(:must-create t))))

    (when wrapper
      (if (or (nlistp wrapper)
	      (eq (car wrapper) 'function))

	  (setq standard-form `(funcall ,wrapper  #'(lambda () ,standard-form))
		create-standard-form `(funcall ,wrapper #'(lambda () ,create-standard-form)))

	  (setq standard-form (subst standard-form :continue-select wrapper)
		create-standard-form (subst create-standard-form :continue-select wrapper))))
    `(progn
       ,@(when key
	   `((tv:add-select-key ,key
				',standard-form
				,name
				',create-standard-form
				,replace-existing-select-key)))
       ,@(when (and name add-to-system-menu)
	   `((tv:add-to-system-menu-programs-column
	       ,(if (stringp add-to-system-menu) add-to-system-menu name)
	       ',standard-form
	       ',(or documentation
		     (format nil "An S-products frame, initialized for ~A" name)))))
       ,@(when configurations
	   `(,@(loop for c in configurations
		     collect
		       `(tv:add-global-configuration ',(first c) ',(cdr c)))))
       )))


(defun 1read-text-file0 (file &rest args)
  (declare (arglist file &key read-function eval-function print-function env
		    error if-does-not-exist
		    eof-option message-p read-into-package &allow-other-keys))
  (with-open-file (stream file
			  :direction :input
			  :characters t)
    (when stream
      (si:with-rem-keywords (args args '(:ERROR :IF-DOES-NOT-EXIST))
	(lexpr-funcall #'reading-from-file-stream stream args)))
    ))

(DEFUN READING-FROM-FILE-STREAM (STANDARD-INPUT
		     &KEY MESSAGE-P
		     ENV
		     READ-INTO-PACKAGE
		     (READ-FUNCTION #'READ)
		     (EVAL-FUNCTION #'EVAL)
		     (PRINT-FUNCTION #'IGNORE)
		     (EOF-OPTION NIL)
		     &AUX (PACKAGE PACKAGE))
		     
  (MULTIPLE-VALUE-BIND (PATHNAME IGNORE FS:FDEFINE-FILE-PATHNAME GENERIC-PLIST)
      (SEND STANDARD-INPUT :GENERIC-PATHNAME-AND-PLIST)
    (LET ((SI:PATCH-SOURCE-FILE-PATHNAME NIL))
      (FS:READ-ATTRIBUTE-LIST GENERIC-PLIST STANDARD-INPUT)
      ;; Enter appropriate environment for the file
      (MULTIPLE-VALUE-BIND (VARS VALS)
	  (FS:FILE-ATTRIBUTE-BINDINGS GENERIC-PLIST)
	(PROGV VARS VALS
	  ;; If package overridden, do so.  PACKAGE is bound in any case.
	  (WHEN READ-INTO-PACKAGE (SETQ PACKAGE (PKG-FIND-PACKAGE READ-INTO-PACKAGE)))
	  ;; Tell user what it was unless told not to	
	  (WHEN MESSAGE-P
	    (SEND STANDARD-OUTPUT :FRESH-LINE)
	    (PRINC "Loading ")
	    (PRINC PATHNAME)
	    (PRINC " into package ")
	    (PRINC PACKAGE)
	    (TERPRI))
	  (SI:LOADING-FILE GENERIC-PLIST
	    (LOOP AS FORM =  (FUNCALL READ-FUNCTION STANDARD-INPUT EOF-OPTION)
		  UNTIL (EQ  FORM EOF-OPTION)
		  AS VAL = (IF ENV (FUNCALL EVAL-FUNCTION FORM ENV)
			       (FUNCALL EVAL-FUNCTION FORM))
		  DO (FUNCALL PRINT-FUNCTION FORM VAL)))
	  (SI:SET-FILE-STREAM-LOADED-ID STANDARD-INPUT PACKAGE)
	  PATHNAME)))))
